
13-1_CAN_F429ZIT6U.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
<<<<<<< Updated upstream
  1 .text         00015774  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002c7c  08015924  08015924  00025924  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080185a0  080185a0  00030078  2**0
                  CONTENTS
  4 .ARM          00000008  080185a0  080185a0  000285a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080185a8  080185a8  00030078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080185a8  080185a8  000285a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080185ac  080185ac  000285ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080185b0  00030000  2**2
=======
  1 .text         00015744  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002c90  080158f4  080158f4  000258f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08018584  08018584  00030078  2**0
                  CONTENTS
  4 .ARM          00000008  08018584  08018584  00028584  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801858c  0801858c  00030078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801858c  0801858c  0002858c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08018590  08018590  00028590  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08018594  00030000  2**2
>>>>>>> Stashed changes
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030078  2**0
                  CONTENTS
 10 .bss          00007254  20000078  20000078  00030078  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200072cc  200072cc  00030078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030078  2**0
                  CONTENTS, READONLY
 13 .debug_info   00047931  00000000  00000000  000300a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00008aaa  00000000  00000000  000779d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002620  00000000  00000000  00080488  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002438  00000000  00000000  00082aa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003717a  00000000  00000000  00084ee0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
<<<<<<< Updated upstream
 18 .debug_line   0003f1ea  00000000  00000000  000bc05a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010e075  00000000  00000000  000fb244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  002092b9  2**0
=======
 18 .debug_line   0003f1e8  00000000  00000000  000bc05a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010e075  00000000  00000000  000fb242  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  002092b7  2**0
>>>>>>> Stashed changes
                  CONTENTS, READONLY
 21 .debug_frame  0000a6c8  00000000  00000000  0020930c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000078 	.word	0x20000078
 80001cc:	00000000 	.word	0x00000000
<<<<<<< Updated upstream
 80001d0:	0801590c 	.word	0x0801590c
=======
 80001d0:	080158dc 	.word	0x080158dc
>>>>>>> Stashed changes

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000007c 	.word	0x2000007c
<<<<<<< Updated upstream
 80001ec:	0801590c 	.word	0x0801590c
=======
 80001ec:	080158dc 	.word	0x080158dc
>>>>>>> Stashed changes

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96e 	b.w	8000584 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468c      	mov	ip, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	f040 8083 	bne.w	80003d6 <__udivmoddi4+0x116>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d947      	bls.n	8000366 <__udivmoddi4+0xa6>
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	b142      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002dc:	f1c2 0020 	rsb	r0, r2, #32
 80002e0:	fa24 f000 	lsr.w	r0, r4, r0
 80002e4:	4091      	lsls	r1, r2
 80002e6:	4097      	lsls	r7, r2
 80002e8:	ea40 0c01 	orr.w	ip, r0, r1
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbbc f6f8 	udiv	r6, ip, r8
 80002f8:	fa1f fe87 	uxth.w	lr, r7
 80002fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb06 f10e 	mul.w	r1, r6, lr
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18fb      	adds	r3, r7, r3
 800030e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000312:	f080 8119 	bcs.w	8000548 <__udivmoddi4+0x288>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8116 	bls.w	8000548 <__udivmoddi4+0x288>
 800031c:	3e02      	subs	r6, #2
 800031e:	443b      	add	r3, r7
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0f8 	udiv	r0, r3, r8
 8000328:	fb08 3310 	mls	r3, r8, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fe0e 	mul.w	lr, r0, lr
 8000334:	45a6      	cmp	lr, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	193c      	adds	r4, r7, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8105 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f240 8102 	bls.w	800054c <__udivmoddi4+0x28c>
 8000348:	3802      	subs	r0, #2
 800034a:	443c      	add	r4, r7
 800034c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000350:	eba4 040e 	sub.w	r4, r4, lr
 8000354:	2600      	movs	r6, #0
 8000356:	b11d      	cbz	r5, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c5 4300 	strd	r4, r3, [r5]
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	b902      	cbnz	r2, 800036a <__udivmoddi4+0xaa>
 8000368:	deff      	udf	#255	; 0xff
 800036a:	fab2 f282 	clz	r2, r2
 800036e:	2a00      	cmp	r2, #0
 8000370:	d150      	bne.n	8000414 <__udivmoddi4+0x154>
 8000372:	1bcb      	subs	r3, r1, r7
 8000374:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	2601      	movs	r6, #1
 800037e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000382:	0c21      	lsrs	r1, r4, #16
 8000384:	fb0e 331c 	mls	r3, lr, ip, r3
 8000388:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800038c:	fb08 f30c 	mul.w	r3, r8, ip
 8000390:	428b      	cmp	r3, r1
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0xe4>
 8000394:	1879      	adds	r1, r7, r1
 8000396:	f10c 30ff 	add.w	r0, ip, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0xe2>
 800039c:	428b      	cmp	r3, r1
 800039e:	f200 80e9 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003a2:	4684      	mov	ip, r0
 80003a4:	1ac9      	subs	r1, r1, r3
 80003a6:	b2a3      	uxth	r3, r4
 80003a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80003b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003b4:	fb08 f800 	mul.w	r8, r8, r0
 80003b8:	45a0      	cmp	r8, r4
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x10c>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x10a>
 80003c4:	45a0      	cmp	r8, r4
 80003c6:	f200 80d9 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003ca:	4618      	mov	r0, r3
 80003cc:	eba4 0408 	sub.w	r4, r4, r8
 80003d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003d4:	e7bf      	b.n	8000356 <__udivmoddi4+0x96>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0x12e>
 80003da:	2d00      	cmp	r5, #0
 80003dc:	f000 80b1 	beq.w	8000542 <__udivmoddi4+0x282>
 80003e0:	2600      	movs	r6, #0
 80003e2:	e9c5 0100 	strd	r0, r1, [r5]
 80003e6:	4630      	mov	r0, r6
 80003e8:	4631      	mov	r1, r6
 80003ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ee:	fab3 f683 	clz	r6, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d14a      	bne.n	800048c <__udivmoddi4+0x1cc>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d302      	bcc.n	8000400 <__udivmoddi4+0x140>
 80003fa:	4282      	cmp	r2, r0
 80003fc:	f200 80b8 	bhi.w	8000570 <__udivmoddi4+0x2b0>
 8000400:	1a84      	subs	r4, r0, r2
 8000402:	eb61 0103 	sbc.w	r1, r1, r3
 8000406:	2001      	movs	r0, #1
 8000408:	468c      	mov	ip, r1
 800040a:	2d00      	cmp	r5, #0
 800040c:	d0a8      	beq.n	8000360 <__udivmoddi4+0xa0>
 800040e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000412:	e7a5      	b.n	8000360 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f603 	lsr.w	r6, r0, r3
 800041c:	4097      	lsls	r7, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000426:	40d9      	lsrs	r1, r3
 8000428:	4330      	orrs	r0, r6
 800042a:	0c03      	lsrs	r3, r0, #16
 800042c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000430:	fa1f f887 	uxth.w	r8, r7
 8000434:	fb0e 1116 	mls	r1, lr, r6, r1
 8000438:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043c:	fb06 f108 	mul.w	r1, r6, r8
 8000440:	4299      	cmp	r1, r3
 8000442:	fa04 f402 	lsl.w	r4, r4, r2
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x19c>
 8000448:	18fb      	adds	r3, r7, r3
 800044a:	f106 3cff 	add.w	ip, r6, #4294967295
 800044e:	f080 808d 	bcs.w	800056c <__udivmoddi4+0x2ac>
 8000452:	4299      	cmp	r1, r3
 8000454:	f240 808a 	bls.w	800056c <__udivmoddi4+0x2ac>
 8000458:	3e02      	subs	r6, #2
 800045a:	443b      	add	r3, r7
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b281      	uxth	r1, r0
 8000460:	fbb3 f0fe 	udiv	r0, r3, lr
 8000464:	fb0e 3310 	mls	r3, lr, r0, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb00 f308 	mul.w	r3, r0, r8
 8000470:	428b      	cmp	r3, r1
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x1c4>
 8000474:	1879      	adds	r1, r7, r1
 8000476:	f100 3cff 	add.w	ip, r0, #4294967295
 800047a:	d273      	bcs.n	8000564 <__udivmoddi4+0x2a4>
 800047c:	428b      	cmp	r3, r1
 800047e:	d971      	bls.n	8000564 <__udivmoddi4+0x2a4>
 8000480:	3802      	subs	r0, #2
 8000482:	4439      	add	r1, r7
 8000484:	1acb      	subs	r3, r1, r3
 8000486:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800048a:	e778      	b.n	800037e <__udivmoddi4+0xbe>
 800048c:	f1c6 0c20 	rsb	ip, r6, #32
 8000490:	fa03 f406 	lsl.w	r4, r3, r6
 8000494:	fa22 f30c 	lsr.w	r3, r2, ip
 8000498:	431c      	orrs	r4, r3
 800049a:	fa20 f70c 	lsr.w	r7, r0, ip
 800049e:	fa01 f306 	lsl.w	r3, r1, r6
 80004a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004aa:	431f      	orrs	r7, r3
 80004ac:	0c3b      	lsrs	r3, r7, #16
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fa1f f884 	uxth.w	r8, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004be:	fb09 fa08 	mul.w	sl, r9, r8
 80004c2:	458a      	cmp	sl, r1
 80004c4:	fa02 f206 	lsl.w	r2, r2, r6
 80004c8:	fa00 f306 	lsl.w	r3, r0, r6
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x220>
 80004ce:	1861      	adds	r1, r4, r1
 80004d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d4:	d248      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 80004d6:	458a      	cmp	sl, r1
 80004d8:	d946      	bls.n	8000568 <__udivmoddi4+0x2a8>
 80004da:	f1a9 0902 	sub.w	r9, r9, #2
 80004de:	4421      	add	r1, r4
 80004e0:	eba1 010a 	sub.w	r1, r1, sl
 80004e4:	b2bf      	uxth	r7, r7
 80004e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004f2:	fb00 f808 	mul.w	r8, r0, r8
 80004f6:	45b8      	cmp	r8, r7
 80004f8:	d907      	bls.n	800050a <__udivmoddi4+0x24a>
 80004fa:	19e7      	adds	r7, r4, r7
 80004fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000500:	d22e      	bcs.n	8000560 <__udivmoddi4+0x2a0>
 8000502:	45b8      	cmp	r8, r7
 8000504:	d92c      	bls.n	8000560 <__udivmoddi4+0x2a0>
 8000506:	3802      	subs	r0, #2
 8000508:	4427      	add	r7, r4
 800050a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800050e:	eba7 0708 	sub.w	r7, r7, r8
 8000512:	fba0 8902 	umull	r8, r9, r0, r2
 8000516:	454f      	cmp	r7, r9
 8000518:	46c6      	mov	lr, r8
 800051a:	4649      	mov	r1, r9
 800051c:	d31a      	bcc.n	8000554 <__udivmoddi4+0x294>
 800051e:	d017      	beq.n	8000550 <__udivmoddi4+0x290>
 8000520:	b15d      	cbz	r5, 800053a <__udivmoddi4+0x27a>
 8000522:	ebb3 020e 	subs.w	r2, r3, lr
 8000526:	eb67 0701 	sbc.w	r7, r7, r1
 800052a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800052e:	40f2      	lsrs	r2, r6
 8000530:	ea4c 0202 	orr.w	r2, ip, r2
 8000534:	40f7      	lsrs	r7, r6
 8000536:	e9c5 2700 	strd	r2, r7, [r5]
 800053a:	2600      	movs	r6, #0
 800053c:	4631      	mov	r1, r6
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e70b      	b.n	8000360 <__udivmoddi4+0xa0>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e9      	b.n	8000320 <__udivmoddi4+0x60>
 800054c:	4618      	mov	r0, r3
 800054e:	e6fd      	b.n	800034c <__udivmoddi4+0x8c>
 8000550:	4543      	cmp	r3, r8
 8000552:	d2e5      	bcs.n	8000520 <__udivmoddi4+0x260>
 8000554:	ebb8 0e02 	subs.w	lr, r8, r2
 8000558:	eb69 0104 	sbc.w	r1, r9, r4
 800055c:	3801      	subs	r0, #1
 800055e:	e7df      	b.n	8000520 <__udivmoddi4+0x260>
 8000560:	4608      	mov	r0, r1
 8000562:	e7d2      	b.n	800050a <__udivmoddi4+0x24a>
 8000564:	4660      	mov	r0, ip
 8000566:	e78d      	b.n	8000484 <__udivmoddi4+0x1c4>
 8000568:	4681      	mov	r9, r0
 800056a:	e7b9      	b.n	80004e0 <__udivmoddi4+0x220>
 800056c:	4666      	mov	r6, ip
 800056e:	e775      	b.n	800045c <__udivmoddi4+0x19c>
 8000570:	4630      	mov	r0, r6
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14a>
 8000574:	f1ac 0c02 	sub.w	ip, ip, #2
 8000578:	4439      	add	r1, r7
 800057a:	e713      	b.n	80003a4 <__udivmoddi4+0xe4>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	e724      	b.n	80003cc <__udivmoddi4+0x10c>
 8000582:	bf00      	nop

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b084      	sub	sp, #16
 800058c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800058e:	463b      	mov	r3, r7
 8000590:	2200      	movs	r2, #0
 8000592:	601a      	str	r2, [r3, #0]
 8000594:	605a      	str	r2, [r3, #4]
 8000596:	609a      	str	r2, [r3, #8]
 8000598:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800059a:	4b36      	ldr	r3, [pc, #216]	; (8000674 <MX_ADC1_Init+0xec>)
 800059c:	4a36      	ldr	r2, [pc, #216]	; (8000678 <MX_ADC1_Init+0xf0>)
 800059e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005a0:	4b34      	ldr	r3, [pc, #208]	; (8000674 <MX_ADC1_Init+0xec>)
 80005a2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80005a6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005a8:	4b32      	ldr	r3, [pc, #200]	; (8000674 <MX_ADC1_Init+0xec>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80005ae:	4b31      	ldr	r3, [pc, #196]	; (8000674 <MX_ADC1_Init+0xec>)
 80005b0:	2201      	movs	r2, #1
 80005b2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80005b4:	4b2f      	ldr	r3, [pc, #188]	; (8000674 <MX_ADC1_Init+0xec>)
 80005b6:	2201      	movs	r2, #1
 80005b8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005ba:	4b2e      	ldr	r3, [pc, #184]	; (8000674 <MX_ADC1_Init+0xec>)
 80005bc:	2200      	movs	r2, #0
 80005be:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005c2:	4b2c      	ldr	r3, [pc, #176]	; (8000674 <MX_ADC1_Init+0xec>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005c8:	4b2a      	ldr	r3, [pc, #168]	; (8000674 <MX_ADC1_Init+0xec>)
 80005ca:	4a2c      	ldr	r2, [pc, #176]	; (800067c <MX_ADC1_Init+0xf4>)
 80005cc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005ce:	4b29      	ldr	r3, [pc, #164]	; (8000674 <MX_ADC1_Init+0xec>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 80005d4:	4b27      	ldr	r3, [pc, #156]	; (8000674 <MX_ADC1_Init+0xec>)
 80005d6:	2204      	movs	r2, #4
 80005d8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80005da:	4b26      	ldr	r3, [pc, #152]	; (8000674 <MX_ADC1_Init+0xec>)
 80005dc:	2201      	movs	r2, #1
 80005de:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005e2:	4b24      	ldr	r3, [pc, #144]	; (8000674 <MX_ADC1_Init+0xec>)
 80005e4:	2201      	movs	r2, #1
 80005e6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005e8:	4822      	ldr	r0, [pc, #136]	; (8000674 <MX_ADC1_Init+0xec>)
<<<<<<< Updated upstream
 80005ea:	f001 fd8f 	bl	800210c <HAL_ADC_Init>
=======
 80005ea:	f001 fd91 	bl	8002110 <HAL_ADC_Init>
>>>>>>> Stashed changes
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d001      	beq.n	80005f8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
<<<<<<< Updated upstream
 80005f4:	f000 fd5a 	bl	80010ac <Error_Handler>
=======
 80005f4:	f000 fd5c 	bl	80010b0 <Error_Handler>
>>>>>>> Stashed changes
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80005f8:	230a      	movs	r3, #10
 80005fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80005fc:	2301      	movs	r3, #1
 80005fe:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 8000600:	2304      	movs	r3, #4
 8000602:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000604:	463b      	mov	r3, r7
 8000606:	4619      	mov	r1, r3
 8000608:	481a      	ldr	r0, [pc, #104]	; (8000674 <MX_ADC1_Init+0xec>)
<<<<<<< Updated upstream
 800060a:	f001 fdc3 	bl	8002194 <HAL_ADC_ConfigChannel>
=======
 800060a:	f001 fdc5 	bl	8002198 <HAL_ADC_ConfigChannel>
>>>>>>> Stashed changes
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d001      	beq.n	8000618 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
<<<<<<< Updated upstream
 8000614:	f000 fd4a 	bl	80010ac <Error_Handler>
=======
 8000614:	f000 fd4c 	bl	80010b0 <Error_Handler>
>>>>>>> Stashed changes
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000618:	230c      	movs	r3, #12
 800061a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800061c:	2302      	movs	r3, #2
 800061e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000620:	463b      	mov	r3, r7
 8000622:	4619      	mov	r1, r3
 8000624:	4813      	ldr	r0, [pc, #76]	; (8000674 <MX_ADC1_Init+0xec>)
<<<<<<< Updated upstream
 8000626:	f001 fdb5 	bl	8002194 <HAL_ADC_ConfigChannel>
=======
 8000626:	f001 fdb7 	bl	8002198 <HAL_ADC_ConfigChannel>
>>>>>>> Stashed changes
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
<<<<<<< Updated upstream
 8000630:	f000 fd3c 	bl	80010ac <Error_Handler>
=======
 8000630:	f000 fd3e 	bl	80010b0 <Error_Handler>
>>>>>>> Stashed changes
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000634:	230d      	movs	r3, #13
 8000636:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000638:	2303      	movs	r3, #3
 800063a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800063c:	463b      	mov	r3, r7
 800063e:	4619      	mov	r1, r3
 8000640:	480c      	ldr	r0, [pc, #48]	; (8000674 <MX_ADC1_Init+0xec>)
<<<<<<< Updated upstream
 8000642:	f001 fda7 	bl	8002194 <HAL_ADC_ConfigChannel>
=======
 8000642:	f001 fda9 	bl	8002198 <HAL_ADC_ConfigChannel>
>>>>>>> Stashed changes
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
<<<<<<< Updated upstream
 800064c:	f000 fd2e 	bl	80010ac <Error_Handler>
=======
 800064c:	f000 fd30 	bl	80010b0 <Error_Handler>
>>>>>>> Stashed changes
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000650:	2309      	movs	r3, #9
 8000652:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000654:	2304      	movs	r3, #4
 8000656:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000658:	463b      	mov	r3, r7
 800065a:	4619      	mov	r1, r3
 800065c:	4805      	ldr	r0, [pc, #20]	; (8000674 <MX_ADC1_Init+0xec>)
<<<<<<< Updated upstream
 800065e:	f001 fd99 	bl	8002194 <HAL_ADC_ConfigChannel>
=======
 800065e:	f001 fd9b 	bl	8002198 <HAL_ADC_ConfigChannel>
>>>>>>> Stashed changes
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
<<<<<<< Updated upstream
 8000668:	f000 fd20 	bl	80010ac <Error_Handler>
=======
 8000668:	f000 fd22 	bl	80010b0 <Error_Handler>
>>>>>>> Stashed changes
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800066c:	bf00      	nop
 800066e:	3710      	adds	r7, #16
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	2000022c 	.word	0x2000022c
 8000678:	40012000 	.word	0x40012000
 800067c:	0f000001 	.word	0x0f000001

08000680 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b08a      	sub	sp, #40	; 0x28
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000688:	f107 0314 	add.w	r3, r7, #20
 800068c:	2200      	movs	r2, #0
 800068e:	601a      	str	r2, [r3, #0]
 8000690:	605a      	str	r2, [r3, #4]
 8000692:	609a      	str	r2, [r3, #8]
 8000694:	60da      	str	r2, [r3, #12]
 8000696:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4a3c      	ldr	r2, [pc, #240]	; (8000790 <HAL_ADC_MspInit+0x110>)
 800069e:	4293      	cmp	r3, r2
 80006a0:	d171      	bne.n	8000786 <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80006a2:	2300      	movs	r3, #0
 80006a4:	613b      	str	r3, [r7, #16]
 80006a6:	4b3b      	ldr	r3, [pc, #236]	; (8000794 <HAL_ADC_MspInit+0x114>)
 80006a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006aa:	4a3a      	ldr	r2, [pc, #232]	; (8000794 <HAL_ADC_MspInit+0x114>)
 80006ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006b0:	6453      	str	r3, [r2, #68]	; 0x44
 80006b2:	4b38      	ldr	r3, [pc, #224]	; (8000794 <HAL_ADC_MspInit+0x114>)
 80006b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80006ba:	613b      	str	r3, [r7, #16]
 80006bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80006be:	2300      	movs	r3, #0
 80006c0:	60fb      	str	r3, [r7, #12]
 80006c2:	4b34      	ldr	r3, [pc, #208]	; (8000794 <HAL_ADC_MspInit+0x114>)
 80006c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c6:	4a33      	ldr	r2, [pc, #204]	; (8000794 <HAL_ADC_MspInit+0x114>)
 80006c8:	f043 0304 	orr.w	r3, r3, #4
 80006cc:	6313      	str	r3, [r2, #48]	; 0x30
 80006ce:	4b31      	ldr	r3, [pc, #196]	; (8000794 <HAL_ADC_MspInit+0x114>)
 80006d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d2:	f003 0304 	and.w	r3, r3, #4
 80006d6:	60fb      	str	r3, [r7, #12]
 80006d8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006da:	2300      	movs	r3, #0
 80006dc:	60bb      	str	r3, [r7, #8]
 80006de:	4b2d      	ldr	r3, [pc, #180]	; (8000794 <HAL_ADC_MspInit+0x114>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e2:	4a2c      	ldr	r2, [pc, #176]	; (8000794 <HAL_ADC_MspInit+0x114>)
 80006e4:	f043 0302 	orr.w	r3, r3, #2
 80006e8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ea:	4b2a      	ldr	r3, [pc, #168]	; (8000794 <HAL_ADC_MspInit+0x114>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ee:	f003 0302 	and.w	r3, r3, #2
 80006f2:	60bb      	str	r3, [r7, #8]
 80006f4:	68bb      	ldr	r3, [r7, #8]
    PC0     ------> ADC1_IN10
    PC2     ------> ADC1_IN12
    PC3     ------> ADC1_IN13
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 80006f6:	230d      	movs	r3, #13
 80006f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006fa:	2303      	movs	r3, #3
 80006fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fe:	2300      	movs	r3, #0
 8000700:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000702:	f107 0314 	add.w	r3, r7, #20
 8000706:	4619      	mov	r1, r3
 8000708:	4823      	ldr	r0, [pc, #140]	; (8000798 <HAL_ADC_MspInit+0x118>)
<<<<<<< Updated upstream
 800070a:	f004 fc3b 	bl	8004f84 <HAL_GPIO_Init>
=======
 800070a:	f004 fc3d 	bl	8004f88 <HAL_GPIO_Init>
>>>>>>> Stashed changes

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800070e:	2302      	movs	r3, #2
 8000710:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000712:	2303      	movs	r3, #3
 8000714:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000716:	2300      	movs	r3, #0
 8000718:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800071a:	f107 0314 	add.w	r3, r7, #20
 800071e:	4619      	mov	r1, r3
 8000720:	481e      	ldr	r0, [pc, #120]	; (800079c <HAL_ADC_MspInit+0x11c>)
<<<<<<< Updated upstream
 8000722:	f004 fc2f 	bl	8004f84 <HAL_GPIO_Init>
=======
 8000722:	f004 fc31 	bl	8004f88 <HAL_GPIO_Init>
>>>>>>> Stashed changes

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000726:	4b1e      	ldr	r3, [pc, #120]	; (80007a0 <HAL_ADC_MspInit+0x120>)
 8000728:	4a1e      	ldr	r2, [pc, #120]	; (80007a4 <HAL_ADC_MspInit+0x124>)
 800072a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800072c:	4b1c      	ldr	r3, [pc, #112]	; (80007a0 <HAL_ADC_MspInit+0x120>)
 800072e:	2200      	movs	r2, #0
 8000730:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000732:	4b1b      	ldr	r3, [pc, #108]	; (80007a0 <HAL_ADC_MspInit+0x120>)
 8000734:	2200      	movs	r2, #0
 8000736:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000738:	4b19      	ldr	r3, [pc, #100]	; (80007a0 <HAL_ADC_MspInit+0x120>)
 800073a:	2200      	movs	r2, #0
 800073c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800073e:	4b18      	ldr	r3, [pc, #96]	; (80007a0 <HAL_ADC_MspInit+0x120>)
 8000740:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000744:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000746:	4b16      	ldr	r3, [pc, #88]	; (80007a0 <HAL_ADC_MspInit+0x120>)
 8000748:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800074c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800074e:	4b14      	ldr	r3, [pc, #80]	; (80007a0 <HAL_ADC_MspInit+0x120>)
 8000750:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000754:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000756:	4b12      	ldr	r3, [pc, #72]	; (80007a0 <HAL_ADC_MspInit+0x120>)
 8000758:	f44f 7280 	mov.w	r2, #256	; 0x100
 800075c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800075e:	4b10      	ldr	r3, [pc, #64]	; (80007a0 <HAL_ADC_MspInit+0x120>)
 8000760:	2200      	movs	r2, #0
 8000762:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000764:	4b0e      	ldr	r3, [pc, #56]	; (80007a0 <HAL_ADC_MspInit+0x120>)
 8000766:	2200      	movs	r2, #0
 8000768:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800076a:	480d      	ldr	r0, [pc, #52]	; (80007a0 <HAL_ADC_MspInit+0x120>)
<<<<<<< Updated upstream
 800076c:	f002 ff5a 	bl	8003624 <HAL_DMA_Init>
=======
 800076c:	f002 ff5c 	bl	8003628 <HAL_DMA_Init>
>>>>>>> Stashed changes
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
<<<<<<< Updated upstream
 8000776:	f000 fc99 	bl	80010ac <Error_Handler>
=======
 8000776:	f000 fc9b 	bl	80010b0 <Error_Handler>
>>>>>>> Stashed changes
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	4a08      	ldr	r2, [pc, #32]	; (80007a0 <HAL_ADC_MspInit+0x120>)
 800077e:	639a      	str	r2, [r3, #56]	; 0x38
 8000780:	4a07      	ldr	r2, [pc, #28]	; (80007a0 <HAL_ADC_MspInit+0x120>)
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000786:	bf00      	nop
 8000788:	3728      	adds	r7, #40	; 0x28
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	40012000 	.word	0x40012000
 8000794:	40023800 	.word	0x40023800
 8000798:	40020800 	.word	0x40020800
 800079c:	40020400 	.word	0x40020400
 80007a0:	20000274 	.word	0x20000274
 80007a4:	40026410 	.word	0x40026410

080007a8 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80007ac:	4b17      	ldr	r3, [pc, #92]	; (800080c <MX_CAN1_Init+0x64>)
 80007ae:	4a18      	ldr	r2, [pc, #96]	; (8000810 <MX_CAN1_Init+0x68>)
 80007b0:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 9;
 80007b2:	4b16      	ldr	r3, [pc, #88]	; (800080c <MX_CAN1_Init+0x64>)
 80007b4:	2209      	movs	r2, #9
 80007b6:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80007b8:	4b14      	ldr	r3, [pc, #80]	; (800080c <MX_CAN1_Init+0x64>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80007be:	4b13      	ldr	r3, [pc, #76]	; (800080c <MX_CAN1_Init+0x64>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_6TQ;
 80007c4:	4b11      	ldr	r3, [pc, #68]	; (800080c <MX_CAN1_Init+0x64>)
 80007c6:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 80007ca:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 80007cc:	4b0f      	ldr	r3, [pc, #60]	; (800080c <MX_CAN1_Init+0x64>)
 80007ce:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80007d2:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80007d4:	4b0d      	ldr	r3, [pc, #52]	; (800080c <MX_CAN1_Init+0x64>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80007da:	4b0c      	ldr	r3, [pc, #48]	; (800080c <MX_CAN1_Init+0x64>)
 80007dc:	2200      	movs	r2, #0
 80007de:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80007e0:	4b0a      	ldr	r3, [pc, #40]	; (800080c <MX_CAN1_Init+0x64>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80007e6:	4b09      	ldr	r3, [pc, #36]	; (800080c <MX_CAN1_Init+0x64>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80007ec:	4b07      	ldr	r3, [pc, #28]	; (800080c <MX_CAN1_Init+0x64>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80007f2:	4b06      	ldr	r3, [pc, #24]	; (800080c <MX_CAN1_Init+0x64>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80007f8:	4804      	ldr	r0, [pc, #16]	; (800080c <MX_CAN1_Init+0x64>)
<<<<<<< Updated upstream
 80007fa:	f001 fef9 	bl	80025f0 <HAL_CAN_Init>
=======
 80007fa:	f001 fefb 	bl	80025f4 <HAL_CAN_Init>
>>>>>>> Stashed changes
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
<<<<<<< Updated upstream
 8000804:	f000 fc52 	bl	80010ac <Error_Handler>
=======
 8000804:	f000 fc54 	bl	80010b0 <Error_Handler>
>>>>>>> Stashed changes
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000808:	bf00      	nop
 800080a:	bd80      	pop	{r7, pc}
 800080c:	20000344 	.word	0x20000344
 8000810:	40006400 	.word	0x40006400

08000814 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b08a      	sub	sp, #40	; 0x28
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800081c:	f107 0314 	add.w	r3, r7, #20
 8000820:	2200      	movs	r2, #0
 8000822:	601a      	str	r2, [r3, #0]
 8000824:	605a      	str	r2, [r3, #4]
 8000826:	609a      	str	r2, [r3, #8]
 8000828:	60da      	str	r2, [r3, #12]
 800082a:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	4a1d      	ldr	r2, [pc, #116]	; (80008a8 <HAL_CAN_MspInit+0x94>)
 8000832:	4293      	cmp	r3, r2
 8000834:	d133      	bne.n	800089e <HAL_CAN_MspInit+0x8a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000836:	2300      	movs	r3, #0
 8000838:	613b      	str	r3, [r7, #16]
 800083a:	4b1c      	ldr	r3, [pc, #112]	; (80008ac <HAL_CAN_MspInit+0x98>)
 800083c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800083e:	4a1b      	ldr	r2, [pc, #108]	; (80008ac <HAL_CAN_MspInit+0x98>)
 8000840:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000844:	6413      	str	r3, [r2, #64]	; 0x40
 8000846:	4b19      	ldr	r3, [pc, #100]	; (80008ac <HAL_CAN_MspInit+0x98>)
 8000848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800084a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800084e:	613b      	str	r3, [r7, #16]
 8000850:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000852:	2300      	movs	r3, #0
 8000854:	60fb      	str	r3, [r7, #12]
 8000856:	4b15      	ldr	r3, [pc, #84]	; (80008ac <HAL_CAN_MspInit+0x98>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	4a14      	ldr	r2, [pc, #80]	; (80008ac <HAL_CAN_MspInit+0x98>)
 800085c:	f043 0308 	orr.w	r3, r3, #8
 8000860:	6313      	str	r3, [r2, #48]	; 0x30
 8000862:	4b12      	ldr	r3, [pc, #72]	; (80008ac <HAL_CAN_MspInit+0x98>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	f003 0308 	and.w	r3, r3, #8
 800086a:	60fb      	str	r3, [r7, #12]
 800086c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800086e:	2303      	movs	r3, #3
 8000870:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000872:	2302      	movs	r3, #2
 8000874:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000876:	2300      	movs	r3, #0
 8000878:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800087a:	2303      	movs	r3, #3
 800087c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800087e:	2309      	movs	r3, #9
 8000880:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000882:	f107 0314 	add.w	r3, r7, #20
 8000886:	4619      	mov	r1, r3
 8000888:	4809      	ldr	r0, [pc, #36]	; (80008b0 <HAL_CAN_MspInit+0x9c>)
<<<<<<< Updated upstream
 800088a:	f004 fb7b 	bl	8004f84 <HAL_GPIO_Init>
=======
 800088a:	f004 fb7d 	bl	8004f88 <HAL_GPIO_Init>
>>>>>>> Stashed changes

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 800088e:	2200      	movs	r2, #0
 8000890:	2100      	movs	r1, #0
 8000892:	2014      	movs	r0, #20
<<<<<<< Updated upstream
 8000894:	f002 fe1f 	bl	80034d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000898:	2014      	movs	r0, #20
 800089a:	f002 fe38 	bl	800350e <HAL_NVIC_EnableIRQ>
=======
 8000894:	f002 fe21 	bl	80034da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000898:	2014      	movs	r0, #20
 800089a:	f002 fe3a 	bl	8003512 <HAL_NVIC_EnableIRQ>
>>>>>>> Stashed changes
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 800089e:	bf00      	nop
 80008a0:	3728      	adds	r7, #40	; 0x28
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	40006400 	.word	0x40006400
 80008ac:	40023800 	.word	0x40023800
 80008b0:	40020c00 	.word	0x40020c00

080008b4 <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80008ba:	463b      	mov	r3, r7
 80008bc:	2200      	movs	r2, #0
 80008be:	601a      	str	r2, [r3, #0]
 80008c0:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80008c2:	4b0f      	ldr	r3, [pc, #60]	; (8000900 <MX_DAC_Init+0x4c>)
 80008c4:	4a0f      	ldr	r2, [pc, #60]	; (8000904 <MX_DAC_Init+0x50>)
 80008c6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80008c8:	480d      	ldr	r0, [pc, #52]	; (8000900 <MX_DAC_Init+0x4c>)
<<<<<<< Updated upstream
 80008ca:	f002 fe3a 	bl	8003542 <HAL_DAC_Init>
=======
 80008ca:	f002 fe3c 	bl	8003546 <HAL_DAC_Init>
>>>>>>> Stashed changes
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d001      	beq.n	80008d8 <MX_DAC_Init+0x24>
  {
    Error_Handler();
<<<<<<< Updated upstream
 80008d4:	f000 fbea 	bl	80010ac <Error_Handler>
=======
 80008d4:	f000 fbec 	bl	80010b0 <Error_Handler>
>>>>>>> Stashed changes
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80008d8:	2300      	movs	r3, #0
 80008da:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80008dc:	2300      	movs	r3, #0
 80008de:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80008e0:	463b      	mov	r3, r7
 80008e2:	2200      	movs	r2, #0
 80008e4:	4619      	mov	r1, r3
 80008e6:	4806      	ldr	r0, [pc, #24]	; (8000900 <MX_DAC_Init+0x4c>)
<<<<<<< Updated upstream
 80008e8:	f002 fe4d 	bl	8003586 <HAL_DAC_ConfigChannel>
=======
 80008e8:	f002 fe4f 	bl	800358a <HAL_DAC_ConfigChannel>
>>>>>>> Stashed changes
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <MX_DAC_Init+0x42>
  {
    Error_Handler();
<<<<<<< Updated upstream
 80008f2:	f000 fbdb 	bl	80010ac <Error_Handler>
=======
 80008f2:	f000 fbdd 	bl	80010b0 <Error_Handler>
>>>>>>> Stashed changes
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80008f6:	bf00      	nop
 80008f8:	3708      	adds	r7, #8
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	2000036c 	.word	0x2000036c
 8000904:	40007400 	.word	0x40007400

08000908 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b08a      	sub	sp, #40	; 0x28
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000910:	f107 0314 	add.w	r3, r7, #20
 8000914:	2200      	movs	r2, #0
 8000916:	601a      	str	r2, [r3, #0]
 8000918:	605a      	str	r2, [r3, #4]
 800091a:	609a      	str	r2, [r3, #8]
 800091c:	60da      	str	r2, [r3, #12]
 800091e:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	4a17      	ldr	r2, [pc, #92]	; (8000984 <HAL_DAC_MspInit+0x7c>)
 8000926:	4293      	cmp	r3, r2
 8000928:	d127      	bne.n	800097a <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800092a:	2300      	movs	r3, #0
 800092c:	613b      	str	r3, [r7, #16]
 800092e:	4b16      	ldr	r3, [pc, #88]	; (8000988 <HAL_DAC_MspInit+0x80>)
 8000930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000932:	4a15      	ldr	r2, [pc, #84]	; (8000988 <HAL_DAC_MspInit+0x80>)
 8000934:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000938:	6413      	str	r3, [r2, #64]	; 0x40
 800093a:	4b13      	ldr	r3, [pc, #76]	; (8000988 <HAL_DAC_MspInit+0x80>)
 800093c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800093e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000942:	613b      	str	r3, [r7, #16]
 8000944:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000946:	2300      	movs	r3, #0
 8000948:	60fb      	str	r3, [r7, #12]
 800094a:	4b0f      	ldr	r3, [pc, #60]	; (8000988 <HAL_DAC_MspInit+0x80>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094e:	4a0e      	ldr	r2, [pc, #56]	; (8000988 <HAL_DAC_MspInit+0x80>)
 8000950:	f043 0301 	orr.w	r3, r3, #1
 8000954:	6313      	str	r3, [r2, #48]	; 0x30
 8000956:	4b0c      	ldr	r3, [pc, #48]	; (8000988 <HAL_DAC_MspInit+0x80>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095a:	f003 0301 	and.w	r3, r3, #1
 800095e:	60fb      	str	r3, [r7, #12]
 8000960:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000962:	2310      	movs	r3, #16
 8000964:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000966:	2303      	movs	r3, #3
 8000968:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096a:	2300      	movs	r3, #0
 800096c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800096e:	f107 0314 	add.w	r3, r7, #20
 8000972:	4619      	mov	r1, r3
 8000974:	4805      	ldr	r0, [pc, #20]	; (800098c <HAL_DAC_MspInit+0x84>)
<<<<<<< Updated upstream
 8000976:	f004 fb05 	bl	8004f84 <HAL_GPIO_Init>
=======
 8000976:	f004 fb07 	bl	8004f88 <HAL_GPIO_Init>
>>>>>>> Stashed changes

  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 800097a:	bf00      	nop
 800097c:	3728      	adds	r7, #40	; 0x28
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	40007400 	.word	0x40007400
 8000988:	40023800 	.word	0x40023800
 800098c:	40020000 	.word	0x40020000

08000990 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000996:	2300      	movs	r3, #0
 8000998:	607b      	str	r3, [r7, #4]
 800099a:	4b14      	ldr	r3, [pc, #80]	; (80009ec <MX_DMA_Init+0x5c>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099e:	4a13      	ldr	r2, [pc, #76]	; (80009ec <MX_DMA_Init+0x5c>)
 80009a0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80009a4:	6313      	str	r3, [r2, #48]	; 0x30
 80009a6:	4b11      	ldr	r3, [pc, #68]	; (80009ec <MX_DMA_Init+0x5c>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80009ae:	607b      	str	r3, [r7, #4]
 80009b0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80009b2:	2200      	movs	r2, #0
 80009b4:	2100      	movs	r1, #0
 80009b6:	2038      	movs	r0, #56	; 0x38
<<<<<<< Updated upstream
 80009b8:	f002 fd8d 	bl	80034d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80009bc:	2038      	movs	r0, #56	; 0x38
 80009be:	f002 fda6 	bl	800350e <HAL_NVIC_EnableIRQ>
=======
 80009b8:	f002 fd8f 	bl	80034da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80009bc:	2038      	movs	r0, #56	; 0x38
 80009be:	f002 fda8 	bl	8003512 <HAL_NVIC_EnableIRQ>
>>>>>>> Stashed changes
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80009c2:	2200      	movs	r2, #0
 80009c4:	2100      	movs	r1, #0
 80009c6:	203b      	movs	r0, #59	; 0x3b
<<<<<<< Updated upstream
 80009c8:	f002 fd85 	bl	80034d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80009cc:	203b      	movs	r0, #59	; 0x3b
 80009ce:	f002 fd9e 	bl	800350e <HAL_NVIC_EnableIRQ>
=======
 80009c8:	f002 fd87 	bl	80034da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80009cc:	203b      	movs	r0, #59	; 0x3b
 80009ce:	f002 fda0 	bl	8003512 <HAL_NVIC_EnableIRQ>
>>>>>>> Stashed changes
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 80009d2:	2200      	movs	r2, #0
 80009d4:	2100      	movs	r1, #0
 80009d6:	2045      	movs	r0, #69	; 0x45
<<<<<<< Updated upstream
 80009d8:	f002 fd7d 	bl	80034d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80009dc:	2045      	movs	r0, #69	; 0x45
 80009de:	f002 fd96 	bl	800350e <HAL_NVIC_EnableIRQ>
=======
 80009d8:	f002 fd7f 	bl	80034da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80009dc:	2045      	movs	r0, #69	; 0x45
 80009de:	f002 fd98 	bl	8003512 <HAL_NVIC_EnableIRQ>
>>>>>>> Stashed changes

}
 80009e2:	bf00      	nop
 80009e4:	3708      	adds	r7, #8
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	40023800 	.word	0x40023800

080009f0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b08c      	sub	sp, #48	; 0x30
 80009f4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f6:	f107 031c 	add.w	r3, r7, #28
 80009fa:	2200      	movs	r2, #0
 80009fc:	601a      	str	r2, [r3, #0]
 80009fe:	605a      	str	r2, [r3, #4]
 8000a00:	609a      	str	r2, [r3, #8]
 8000a02:	60da      	str	r2, [r3, #12]
 8000a04:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a06:	2300      	movs	r3, #0
 8000a08:	61bb      	str	r3, [r7, #24]
 8000a0a:	4b4f      	ldr	r3, [pc, #316]	; (8000b48 <MX_GPIO_Init+0x158>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	4a4e      	ldr	r2, [pc, #312]	; (8000b48 <MX_GPIO_Init+0x158>)
 8000a10:	f043 0320 	orr.w	r3, r3, #32
 8000a14:	6313      	str	r3, [r2, #48]	; 0x30
 8000a16:	4b4c      	ldr	r3, [pc, #304]	; (8000b48 <MX_GPIO_Init+0x158>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	f003 0320 	and.w	r3, r3, #32
 8000a1e:	61bb      	str	r3, [r7, #24]
 8000a20:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a22:	2300      	movs	r3, #0
 8000a24:	617b      	str	r3, [r7, #20]
 8000a26:	4b48      	ldr	r3, [pc, #288]	; (8000b48 <MX_GPIO_Init+0x158>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2a:	4a47      	ldr	r2, [pc, #284]	; (8000b48 <MX_GPIO_Init+0x158>)
 8000a2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a30:	6313      	str	r3, [r2, #48]	; 0x30
 8000a32:	4b45      	ldr	r3, [pc, #276]	; (8000b48 <MX_GPIO_Init+0x158>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a3a:	617b      	str	r3, [r7, #20]
 8000a3c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a3e:	2300      	movs	r3, #0
 8000a40:	613b      	str	r3, [r7, #16]
 8000a42:	4b41      	ldr	r3, [pc, #260]	; (8000b48 <MX_GPIO_Init+0x158>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a46:	4a40      	ldr	r2, [pc, #256]	; (8000b48 <MX_GPIO_Init+0x158>)
 8000a48:	f043 0304 	orr.w	r3, r3, #4
 8000a4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a4e:	4b3e      	ldr	r3, [pc, #248]	; (8000b48 <MX_GPIO_Init+0x158>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a52:	f003 0304 	and.w	r3, r3, #4
 8000a56:	613b      	str	r3, [r7, #16]
 8000a58:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	60fb      	str	r3, [r7, #12]
 8000a5e:	4b3a      	ldr	r3, [pc, #232]	; (8000b48 <MX_GPIO_Init+0x158>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a62:	4a39      	ldr	r2, [pc, #228]	; (8000b48 <MX_GPIO_Init+0x158>)
 8000a64:	f043 0301 	orr.w	r3, r3, #1
 8000a68:	6313      	str	r3, [r2, #48]	; 0x30
 8000a6a:	4b37      	ldr	r3, [pc, #220]	; (8000b48 <MX_GPIO_Init+0x158>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	f003 0301 	and.w	r3, r3, #1
 8000a72:	60fb      	str	r3, [r7, #12]
 8000a74:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a76:	2300      	movs	r3, #0
 8000a78:	60bb      	str	r3, [r7, #8]
 8000a7a:	4b33      	ldr	r3, [pc, #204]	; (8000b48 <MX_GPIO_Init+0x158>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7e:	4a32      	ldr	r2, [pc, #200]	; (8000b48 <MX_GPIO_Init+0x158>)
 8000a80:	f043 0302 	orr.w	r3, r3, #2
 8000a84:	6313      	str	r3, [r2, #48]	; 0x30
 8000a86:	4b30      	ldr	r3, [pc, #192]	; (8000b48 <MX_GPIO_Init+0x158>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	f003 0302 	and.w	r3, r3, #2
 8000a8e:	60bb      	str	r3, [r7, #8]
 8000a90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a92:	2300      	movs	r3, #0
 8000a94:	607b      	str	r3, [r7, #4]
 8000a96:	4b2c      	ldr	r3, [pc, #176]	; (8000b48 <MX_GPIO_Init+0x158>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9a:	4a2b      	ldr	r2, [pc, #172]	; (8000b48 <MX_GPIO_Init+0x158>)
 8000a9c:	f043 0308 	orr.w	r3, r3, #8
 8000aa0:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa2:	4b29      	ldr	r3, [pc, #164]	; (8000b48 <MX_GPIO_Init+0x158>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa6:	f003 0308 	and.w	r3, r3, #8
 8000aaa:	607b      	str	r3, [r7, #4]
 8000aac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8000aae:	2200      	movs	r2, #0
 8000ab0:	2140      	movs	r1, #64	; 0x40
 8000ab2:	4826      	ldr	r0, [pc, #152]	; (8000b4c <MX_GPIO_Init+0x15c>)
<<<<<<< Updated upstream
 8000ab4:	f004 fc2a 	bl	800530c <HAL_GPIO_WritePin>
=======
 8000ab4:	f004 fc2c 	bl	8005310 <HAL_GPIO_WritePin>
>>>>>>> Stashed changes

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_7, GPIO_PIN_RESET);
 8000ab8:	2200      	movs	r2, #0
 8000aba:	2181      	movs	r1, #129	; 0x81
 8000abc:	4824      	ldr	r0, [pc, #144]	; (8000b50 <MX_GPIO_Init+0x160>)
<<<<<<< Updated upstream
 8000abe:	f004 fc25 	bl	800530c <HAL_GPIO_WritePin>
=======
 8000abe:	f004 fc27 	bl	8005310 <HAL_GPIO_WritePin>
>>>>>>> Stashed changes

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000ac2:	2340      	movs	r3, #64	; 0x40
 8000ac4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aca:	2300      	movs	r3, #0
 8000acc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ad2:	f107 031c 	add.w	r3, r7, #28
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	481c      	ldr	r0, [pc, #112]	; (8000b4c <MX_GPIO_Init+0x15c>)
<<<<<<< Updated upstream
 8000ada:	f004 fa53 	bl	8004f84 <HAL_GPIO_Init>
=======
 8000ada:	f004 fa55 	bl	8004f88 <HAL_GPIO_Init>
>>>>>>> Stashed changes

  /*Configure GPIO pins : PB0 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_7;
 8000ade:	2381      	movs	r3, #129	; 0x81
 8000ae0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aea:	2300      	movs	r3, #0
 8000aec:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aee:	f107 031c 	add.w	r3, r7, #28
 8000af2:	4619      	mov	r1, r3
 8000af4:	4816      	ldr	r0, [pc, #88]	; (8000b50 <MX_GPIO_Init+0x160>)
<<<<<<< Updated upstream
 8000af6:	f004 fa45 	bl	8004f84 <HAL_GPIO_Init>
=======
 8000af6:	f004 fa47 	bl	8004f88 <HAL_GPIO_Init>
>>>>>>> Stashed changes

  /*Configure GPIO pin : PD10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000afa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000afe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b00:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b06:	2301      	movs	r3, #1
 8000b08:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b0a:	f107 031c 	add.w	r3, r7, #28
 8000b0e:	4619      	mov	r1, r3
 8000b10:	4810      	ldr	r0, [pc, #64]	; (8000b54 <MX_GPIO_Init+0x164>)
<<<<<<< Updated upstream
 8000b12:	f004 fa37 	bl	8004f84 <HAL_GPIO_Init>
=======
 8000b12:	f004 fa39 	bl	8004f88 <HAL_GPIO_Init>
>>>>>>> Stashed changes

  /*Configure GPIO pin : PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000b16:	2308      	movs	r3, #8
 8000b18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b22:	f107 031c 	add.w	r3, r7, #28
 8000b26:	4619      	mov	r1, r3
 8000b28:	480a      	ldr	r0, [pc, #40]	; (8000b54 <MX_GPIO_Init+0x164>)
<<<<<<< Updated upstream
 8000b2a:	f004 fa2b 	bl	8004f84 <HAL_GPIO_Init>
=======
 8000b2a:	f004 fa2d 	bl	8004f88 <HAL_GPIO_Init>
>>>>>>> Stashed changes

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000b2e:	2200      	movs	r2, #0
 8000b30:	2100      	movs	r1, #0
 8000b32:	2028      	movs	r0, #40	; 0x28
<<<<<<< Updated upstream
 8000b34:	f002 fccf 	bl	80034d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000b38:	2028      	movs	r0, #40	; 0x28
 8000b3a:	f002 fce8 	bl	800350e <HAL_NVIC_EnableIRQ>
=======
 8000b34:	f002 fcd1 	bl	80034da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000b38:	2028      	movs	r0, #40	; 0x28
 8000b3a:	f002 fcea 	bl	8003512 <HAL_NVIC_EnableIRQ>
>>>>>>> Stashed changes

}
 8000b3e:	bf00      	nop
 8000b40:	3730      	adds	r7, #48	; 0x30
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	40023800 	.word	0x40023800
 8000b4c:	40020000 	.word	0x40020000
 8000b50:	40020400 	.word	0x40020400
 8000b54:	40020c00 	.word	0x40020c00

08000b58 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b5c:	4b1b      	ldr	r3, [pc, #108]	; (8000bcc <MX_I2C1_Init+0x74>)
 8000b5e:	4a1c      	ldr	r2, [pc, #112]	; (8000bd0 <MX_I2C1_Init+0x78>)
 8000b60:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000b62:	4b1a      	ldr	r3, [pc, #104]	; (8000bcc <MX_I2C1_Init+0x74>)
 8000b64:	4a1b      	ldr	r2, [pc, #108]	; (8000bd4 <MX_I2C1_Init+0x7c>)
 8000b66:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b68:	4b18      	ldr	r3, [pc, #96]	; (8000bcc <MX_I2C1_Init+0x74>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000b6e:	4b17      	ldr	r3, [pc, #92]	; (8000bcc <MX_I2C1_Init+0x74>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b74:	4b15      	ldr	r3, [pc, #84]	; (8000bcc <MX_I2C1_Init+0x74>)
 8000b76:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b7a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b7c:	4b13      	ldr	r3, [pc, #76]	; (8000bcc <MX_I2C1_Init+0x74>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000b82:	4b12      	ldr	r3, [pc, #72]	; (8000bcc <MX_I2C1_Init+0x74>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b88:	4b10      	ldr	r3, [pc, #64]	; (8000bcc <MX_I2C1_Init+0x74>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b8e:	4b0f      	ldr	r3, [pc, #60]	; (8000bcc <MX_I2C1_Init+0x74>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b94:	480d      	ldr	r0, [pc, #52]	; (8000bcc <MX_I2C1_Init+0x74>)
<<<<<<< Updated upstream
 8000b96:	f004 fc05 	bl	80053a4 <HAL_I2C_Init>
=======
 8000b96:	f004 fbed 	bl	8005374 <HAL_I2C_Init>
>>>>>>> Stashed changes
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d001      	beq.n	8000ba4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
<<<<<<< Updated upstream
 8000ba0:	f000 fa84 	bl	80010ac <Error_Handler>
=======
 8000ba0:	f000 fa86 	bl	80010b0 <Error_Handler>
>>>>>>> Stashed changes
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ba4:	2100      	movs	r1, #0
 8000ba6:	4809      	ldr	r0, [pc, #36]	; (8000bcc <MX_I2C1_Init+0x74>)
<<<<<<< Updated upstream
 8000ba8:	f004 fd40 	bl	800562c <HAL_I2CEx_ConfigAnalogFilter>
=======
 8000ba8:	f004 fd28 	bl	80055fc <HAL_I2CEx_ConfigAnalogFilter>
>>>>>>> Stashed changes
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d001      	beq.n	8000bb6 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
<<<<<<< Updated upstream
 8000bb2:	f000 fa7b 	bl	80010ac <Error_Handler>
=======
 8000bb2:	f000 fa7d 	bl	80010b0 <Error_Handler>
>>>>>>> Stashed changes
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000bb6:	2100      	movs	r1, #0
 8000bb8:	4804      	ldr	r0, [pc, #16]	; (8000bcc <MX_I2C1_Init+0x74>)
<<<<<<< Updated upstream
 8000bba:	f004 fd73 	bl	80056a4 <HAL_I2CEx_ConfigDigitalFilter>
=======
 8000bba:	f004 fd5b 	bl	8005674 <HAL_I2CEx_ConfigDigitalFilter>
>>>>>>> Stashed changes
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
<<<<<<< Updated upstream
 8000bc4:	f000 fa72 	bl	80010ac <Error_Handler>
=======
 8000bc4:	f000 fa74 	bl	80010b0 <Error_Handler>
>>>>>>> Stashed changes
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000bc8:	bf00      	nop
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	20000380 	.word	0x20000380
 8000bd0:	40005400 	.word	0x40005400
 8000bd4:	00061a80 	.word	0x00061a80

08000bd8 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000bdc:	4b1b      	ldr	r3, [pc, #108]	; (8000c4c <MX_I2C2_Init+0x74>)
 8000bde:	4a1c      	ldr	r2, [pc, #112]	; (8000c50 <MX_I2C2_Init+0x78>)
 8000be0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000be2:	4b1a      	ldr	r3, [pc, #104]	; (8000c4c <MX_I2C2_Init+0x74>)
 8000be4:	4a1b      	ldr	r2, [pc, #108]	; (8000c54 <MX_I2C2_Init+0x7c>)
 8000be6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000be8:	4b18      	ldr	r3, [pc, #96]	; (8000c4c <MX_I2C2_Init+0x74>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000bee:	4b17      	ldr	r3, [pc, #92]	; (8000c4c <MX_I2C2_Init+0x74>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000bf4:	4b15      	ldr	r3, [pc, #84]	; (8000c4c <MX_I2C2_Init+0x74>)
 8000bf6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000bfa:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bfc:	4b13      	ldr	r3, [pc, #76]	; (8000c4c <MX_I2C2_Init+0x74>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000c02:	4b12      	ldr	r3, [pc, #72]	; (8000c4c <MX_I2C2_Init+0x74>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c08:	4b10      	ldr	r3, [pc, #64]	; (8000c4c <MX_I2C2_Init+0x74>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c0e:	4b0f      	ldr	r3, [pc, #60]	; (8000c4c <MX_I2C2_Init+0x74>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000c14:	480d      	ldr	r0, [pc, #52]	; (8000c4c <MX_I2C2_Init+0x74>)
<<<<<<< Updated upstream
 8000c16:	f004 fbc5 	bl	80053a4 <HAL_I2C_Init>
=======
 8000c16:	f004 fbad 	bl	8005374 <HAL_I2C_Init>
>>>>>>> Stashed changes
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d001      	beq.n	8000c24 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
<<<<<<< Updated upstream
 8000c20:	f000 fa44 	bl	80010ac <Error_Handler>
=======
 8000c20:	f000 fa46 	bl	80010b0 <Error_Handler>
>>>>>>> Stashed changes
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c24:	2100      	movs	r1, #0
 8000c26:	4809      	ldr	r0, [pc, #36]	; (8000c4c <MX_I2C2_Init+0x74>)
<<<<<<< Updated upstream
 8000c28:	f004 fd00 	bl	800562c <HAL_I2CEx_ConfigAnalogFilter>
=======
 8000c28:	f004 fce8 	bl	80055fc <HAL_I2CEx_ConfigAnalogFilter>
>>>>>>> Stashed changes
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
<<<<<<< Updated upstream
 8000c32:	f000 fa3b 	bl	80010ac <Error_Handler>
=======
 8000c32:	f000 fa3d 	bl	80010b0 <Error_Handler>
>>>>>>> Stashed changes
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000c36:	2100      	movs	r1, #0
 8000c38:	4804      	ldr	r0, [pc, #16]	; (8000c4c <MX_I2C2_Init+0x74>)
<<<<<<< Updated upstream
 8000c3a:	f004 fd33 	bl	80056a4 <HAL_I2CEx_ConfigDigitalFilter>
=======
 8000c3a:	f004 fd1b 	bl	8005674 <HAL_I2CEx_ConfigDigitalFilter>
>>>>>>> Stashed changes
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d001      	beq.n	8000c48 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
<<<<<<< Updated upstream
 8000c44:	f000 fa32 	bl	80010ac <Error_Handler>
=======
 8000c44:	f000 fa34 	bl	80010b0 <Error_Handler>
>>>>>>> Stashed changes
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000c48:	bf00      	nop
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	200003d4 	.word	0x200003d4
 8000c50:	40005800 	.word	0x40005800
 8000c54:	000186a0 	.word	0x000186a0

08000c58 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b08c      	sub	sp, #48	; 0x30
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c60:	f107 031c 	add.w	r3, r7, #28
 8000c64:	2200      	movs	r2, #0
 8000c66:	601a      	str	r2, [r3, #0]
 8000c68:	605a      	str	r2, [r3, #4]
 8000c6a:	609a      	str	r2, [r3, #8]
 8000c6c:	60da      	str	r2, [r3, #12]
 8000c6e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4a32      	ldr	r2, [pc, #200]	; (8000d40 <HAL_I2C_MspInit+0xe8>)
 8000c76:	4293      	cmp	r3, r2
 8000c78:	d12d      	bne.n	8000cd6 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	61bb      	str	r3, [r7, #24]
 8000c7e:	4b31      	ldr	r3, [pc, #196]	; (8000d44 <HAL_I2C_MspInit+0xec>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c82:	4a30      	ldr	r2, [pc, #192]	; (8000d44 <HAL_I2C_MspInit+0xec>)
 8000c84:	f043 0302 	orr.w	r3, r3, #2
 8000c88:	6313      	str	r3, [r2, #48]	; 0x30
 8000c8a:	4b2e      	ldr	r3, [pc, #184]	; (8000d44 <HAL_I2C_MspInit+0xec>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8e:	f003 0302 	and.w	r3, r3, #2
 8000c92:	61bb      	str	r3, [r7, #24]
 8000c94:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000c96:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c9c:	2312      	movs	r3, #18
 8000c9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ca4:	2303      	movs	r3, #3
 8000ca6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ca8:	2304      	movs	r3, #4
 8000caa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cac:	f107 031c 	add.w	r3, r7, #28
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	4825      	ldr	r0, [pc, #148]	; (8000d48 <HAL_I2C_MspInit+0xf0>)
<<<<<<< Updated upstream
 8000cb4:	f004 f966 	bl	8004f84 <HAL_GPIO_Init>
=======
 8000cb4:	f004 f968 	bl	8004f88 <HAL_GPIO_Init>
>>>>>>> Stashed changes

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000cb8:	2300      	movs	r3, #0
 8000cba:	617b      	str	r3, [r7, #20]
 8000cbc:	4b21      	ldr	r3, [pc, #132]	; (8000d44 <HAL_I2C_MspInit+0xec>)
 8000cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc0:	4a20      	ldr	r2, [pc, #128]	; (8000d44 <HAL_I2C_MspInit+0xec>)
 8000cc2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000cc6:	6413      	str	r3, [r2, #64]	; 0x40
 8000cc8:	4b1e      	ldr	r3, [pc, #120]	; (8000d44 <HAL_I2C_MspInit+0xec>)
 8000cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ccc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cd0:	617b      	str	r3, [r7, #20]
 8000cd2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000cd4:	e030      	b.n	8000d38 <HAL_I2C_MspInit+0xe0>
  else if(i2cHandle->Instance==I2C2)
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	4a1c      	ldr	r2, [pc, #112]	; (8000d4c <HAL_I2C_MspInit+0xf4>)
 8000cdc:	4293      	cmp	r3, r2
 8000cde:	d12b      	bne.n	8000d38 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	613b      	str	r3, [r7, #16]
 8000ce4:	4b17      	ldr	r3, [pc, #92]	; (8000d44 <HAL_I2C_MspInit+0xec>)
 8000ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce8:	4a16      	ldr	r2, [pc, #88]	; (8000d44 <HAL_I2C_MspInit+0xec>)
 8000cea:	f043 0320 	orr.w	r3, r3, #32
 8000cee:	6313      	str	r3, [r2, #48]	; 0x30
 8000cf0:	4b14      	ldr	r3, [pc, #80]	; (8000d44 <HAL_I2C_MspInit+0xec>)
 8000cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf4:	f003 0320 	and.w	r3, r3, #32
 8000cf8:	613b      	str	r3, [r7, #16]
 8000cfa:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000cfc:	2303      	movs	r3, #3
 8000cfe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d00:	2312      	movs	r3, #18
 8000d02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d04:	2300      	movs	r3, #0
 8000d06:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d08:	2303      	movs	r3, #3
 8000d0a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000d0c:	2304      	movs	r3, #4
 8000d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000d10:	f107 031c 	add.w	r3, r7, #28
 8000d14:	4619      	mov	r1, r3
 8000d16:	480e      	ldr	r0, [pc, #56]	; (8000d50 <HAL_I2C_MspInit+0xf8>)
<<<<<<< Updated upstream
 8000d18:	f004 f934 	bl	8004f84 <HAL_GPIO_Init>
=======
 8000d18:	f004 f936 	bl	8004f88 <HAL_GPIO_Init>
>>>>>>> Stashed changes
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	60fb      	str	r3, [r7, #12]
 8000d20:	4b08      	ldr	r3, [pc, #32]	; (8000d44 <HAL_I2C_MspInit+0xec>)
 8000d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d24:	4a07      	ldr	r2, [pc, #28]	; (8000d44 <HAL_I2C_MspInit+0xec>)
 8000d26:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000d2a:	6413      	str	r3, [r2, #64]	; 0x40
 8000d2c:	4b05      	ldr	r3, [pc, #20]	; (8000d44 <HAL_I2C_MspInit+0xec>)
 8000d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d30:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d34:	60fb      	str	r3, [r7, #12]
 8000d36:	68fb      	ldr	r3, [r7, #12]
}
 8000d38:	bf00      	nop
 8000d3a:	3730      	adds	r7, #48	; 0x30
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	40005400 	.word	0x40005400
 8000d44:	40023800 	.word	0x40023800
 8000d48:	40020400 	.word	0x40020400
 8000d4c:	40005800 	.word	0x40005800
 8000d50:	40021400 	.word	0x40021400

08000d54 <_write>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

int _write(int file, char* p, int len)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b084      	sub	sp, #16
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	60f8      	str	r0, [r7, #12]
 8000d5c:	60b9      	str	r1, [r7, #8]
 8000d5e:	607a      	str	r2, [r7, #4]
	if(HAL_UART_Transmit(&huart3, (uint8_t*)p, len, 10) == HAL_OK) return len;
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	b29a      	uxth	r2, r3
 8000d64:	230a      	movs	r3, #10
 8000d66:	68b9      	ldr	r1, [r7, #8]
 8000d68:	4806      	ldr	r0, [pc, #24]	; (8000d84 <_write+0x30>)
<<<<<<< Updated upstream
 8000d6a:	f007 fc8a 	bl	8008682 <HAL_UART_Transmit>
=======
 8000d6a:	f007 fc72 	bl	8008652 <HAL_UART_Transmit>
>>>>>>> Stashed changes
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d101      	bne.n	8000d78 <_write+0x24>
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	e000      	b.n	8000d7a <_write+0x26>
	else return 0;
 8000d78:	2300      	movs	r3, #0
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	3710      	adds	r7, #16
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	20000774 	.word	0x20000774

08000d88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b086      	sub	sp, #24
 8000d8c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
<<<<<<< Updated upstream
 8000d8e:	f001 f927 	bl	8001fe0 <HAL_Init>
=======
 8000d8e:	f001 f929 	bl	8001fe4 <HAL_Init>
>>>>>>> Stashed changes
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d92:	f000 f8c9 	bl	8000f28 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d96:	f7ff fe2b 	bl	80009f0 <MX_GPIO_Init>
  MX_USART3_UART_Init();
<<<<<<< Updated upstream
 8000d9a:	f001 f87d 	bl	8001e98 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8000d9e:	f7ff fedb 	bl	8000b58 <MX_I2C1_Init>
  MX_TIM7_Init();
 8000da2:	f000 fe83 	bl	8001aac <MX_TIM7_Init>
  MX_TIM3_Init();
 8000da6:	f000 fcf5 	bl	8001794 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000daa:	f000 fd69 	bl	8001880 <MX_TIM4_Init>
  MX_TIM10_Init();
 8000dae:	f000 feb3 	bl	8001b18 <MX_TIM10_Init>
  MX_TIM2_Init();
 8000db2:	f000 fc79 	bl	80016a8 <MX_TIM2_Init>
=======
 8000d9a:	f001 f87f 	bl	8001e9c <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8000d9e:	f7ff fedb 	bl	8000b58 <MX_I2C1_Init>
  MX_TIM7_Init();
 8000da2:	f000 fe85 	bl	8001ab0 <MX_TIM7_Init>
  MX_TIM3_Init();
 8000da6:	f000 fcf7 	bl	8001798 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000daa:	f000 fd6b 	bl	8001884 <MX_TIM4_Init>
  MX_TIM10_Init();
 8000dae:	f000 feb5 	bl	8001b1c <MX_TIM10_Init>
  MX_TIM2_Init();
 8000db2:	f000 fc7b 	bl	80016ac <MX_TIM2_Init>
>>>>>>> Stashed changes
  MX_DMA_Init();
 8000db6:	f7ff fdeb 	bl	8000990 <MX_DMA_Init>
  MX_ADC1_Init();
 8000dba:	f7ff fbe5 	bl	8000588 <MX_ADC1_Init>
  MX_TIM5_Init();
<<<<<<< Updated upstream
 8000dbe:	f000 fdf3 	bl	80019a8 <MX_TIM5_Init>
=======
 8000dbe:	f000 fdf5 	bl	80019ac <MX_TIM5_Init>
>>>>>>> Stashed changes
  MX_DAC_Init();
 8000dc2:	f7ff fd77 	bl	80008b4 <MX_DAC_Init>
  MX_I2C2_Init();
 8000dc6:	f7ff ff07 	bl	8000bd8 <MX_I2C2_Init>
  MX_SPI2_Init();
<<<<<<< Updated upstream
 8000dca:	f000 fa85 	bl	80012d8 <MX_SPI2_Init>
  MX_SDIO_SD_Init();
 8000dce:	f000 f973 	bl	80010b8 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8000dd2:	f009 f8e5 	bl	8009fa0 <MX_FATFS_Init>
  MX_LWIP_Init();
 8000dd6:	f009 fb3d 	bl	800a454 <MX_LWIP_Init>
=======
 8000dca:	f000 fa87 	bl	80012dc <MX_SPI2_Init>
  MX_SDIO_SD_Init();
 8000dce:	f000 f975 	bl	80010bc <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8000dd2:	f009 f8cd 	bl	8009f70 <MX_FATFS_Init>
  MX_LWIP_Init();
 8000dd6:	f009 fb25 	bl	800a424 <MX_LWIP_Init>
>>>>>>> Stashed changes
  MX_CAN1_Init();
 8000dda:	f7ff fce5 	bl	80007a8 <MX_CAN1_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  canFilter1.FilterMaskIdHigh = 0x7E7 << 5;
 8000dde:	4b45      	ldr	r3, [pc, #276]	; (8000ef4 <main+0x16c>)
 8000de0:	f64f 42e0 	movw	r2, #64736	; 0xfce0
 8000de4:	609a      	str	r2, [r3, #8]
  canFilter1.FilterIdHigh = 0x1EF << 5;
 8000de6:	4b43      	ldr	r3, [pc, #268]	; (8000ef4 <main+0x16c>)
 8000de8:	f643 52e0 	movw	r2, #15840	; 0x3de0
 8000dec:	601a      	str	r2, [r3, #0]

  canFilter1.FilterMaskIdLow = 0x7E7 << 5;
 8000dee:	4b41      	ldr	r3, [pc, #260]	; (8000ef4 <main+0x16c>)
 8000df0:	f64f 42e0 	movw	r2, #64736	; 0xfce0
 8000df4:	60da      	str	r2, [r3, #12]
  canFilter1.FilterIdLow = 0x1EF << 5;
 8000df6:	4b3f      	ldr	r3, [pc, #252]	; (8000ef4 <main+0x16c>)
 8000df8:	f643 52e0 	movw	r2, #15840	; 0x3de0
 8000dfc:	605a      	str	r2, [r3, #4]

  canFilter1.FilterMode = CAN_FILTERMODE_IDMASK;
 8000dfe:	4b3d      	ldr	r3, [pc, #244]	; (8000ef4 <main+0x16c>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	619a      	str	r2, [r3, #24]
  canFilter1.FilterScale = CAN_FILTERSCALE_16BIT;
 8000e04:	4b3b      	ldr	r3, [pc, #236]	; (8000ef4 <main+0x16c>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	61da      	str	r2, [r3, #28]

  canFilter1.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000e0a:	4b3a      	ldr	r3, [pc, #232]	; (8000ef4 <main+0x16c>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	611a      	str	r2, [r3, #16]
  canFilter1.FilterBank = 0;
 8000e10:	4b38      	ldr	r3, [pc, #224]	; (8000ef4 <main+0x16c>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	615a      	str	r2, [r3, #20]
  canFilter1.FilterActivation = ENABLE;
 8000e16:	4b37      	ldr	r3, [pc, #220]	; (8000ef4 <main+0x16c>)
 8000e18:	2201      	movs	r2, #1
 8000e1a:	621a      	str	r2, [r3, #32]

  HAL_CAN_ConfigFilter(&hcan1, &canFilter1);
<<<<<<< Updated upstream
 8000e1c:	4932      	ldr	r1, [pc, #200]	; (8000ee8 <main+0x160>)
 8000e1e:	4833      	ldr	r0, [pc, #204]	; (8000eec <main+0x164>)
 8000e20:	f001 fce2 	bl	80027e8 <HAL_CAN_ConfigFilter>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000e24:	2102      	movs	r1, #2
 8000e26:	4831      	ldr	r0, [pc, #196]	; (8000eec <main+0x164>)
 8000e28:	f002 f824 	bl	8002e74 <HAL_CAN_ActivateNotification>

  HAL_CAN_Start(&hcan1);
 8000e2c:	482f      	ldr	r0, [pc, #188]	; (8000eec <main+0x164>)
 8000e2e:	f001 fdbb 	bl	80029a8 <HAL_CAN_Start>
=======
 8000e1c:	4935      	ldr	r1, [pc, #212]	; (8000ef4 <main+0x16c>)
 8000e1e:	4836      	ldr	r0, [pc, #216]	; (8000ef8 <main+0x170>)
 8000e20:	f001 fce4 	bl	80027ec <HAL_CAN_ConfigFilter>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000e24:	2102      	movs	r1, #2
 8000e26:	4834      	ldr	r0, [pc, #208]	; (8000ef8 <main+0x170>)
 8000e28:	f002 f826 	bl	8002e78 <HAL_CAN_ActivateNotification>

  HAL_CAN_Start(&hcan1);
 8000e2c:	4832      	ldr	r0, [pc, #200]	; (8000ef8 <main+0x170>)
 8000e2e:	f001 fdbd 	bl	80029ac <HAL_CAN_Start>
>>>>>>> Stashed changes
  uint8_t str[20];
  while (1)
  {
	  if(buttonFlag == 1)
 8000e32:	4b32      	ldr	r3, [pc, #200]	; (8000efc <main+0x174>)
 8000e34:	781b      	ldrb	r3, [r3, #0]
 8000e36:	b2db      	uxtb	r3, r3
 8000e38:	2b01      	cmp	r3, #1
 8000e3a:	d138      	bne.n	8000eae <main+0x126>
	  {
		  buttonFlag = 0;
 8000e3c:	4b2f      	ldr	r3, [pc, #188]	; (8000efc <main+0x174>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	701a      	strb	r2, [r3, #0]

		  canTxHeader.StdId = 0x1EF;
 8000e42:	4b2f      	ldr	r3, [pc, #188]	; (8000f00 <main+0x178>)
 8000e44:	f240 12ef 	movw	r2, #495	; 0x1ef
 8000e48:	601a      	str	r2, [r3, #0]
		  canTxHeader.RTR = CAN_RTR_DATA;
 8000e4a:	4b2d      	ldr	r3, [pc, #180]	; (8000f00 <main+0x178>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	60da      	str	r2, [r3, #12]
		  canTxHeader.IDE = CAN_ID_STD;
 8000e50:	4b2b      	ldr	r3, [pc, #172]	; (8000f00 <main+0x178>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	609a      	str	r2, [r3, #8]
		  canTxHeader.DLC = 8;
 8000e56:	4b2a      	ldr	r3, [pc, #168]	; (8000f00 <main+0x178>)
 8000e58:	2208      	movs	r2, #8
 8000e5a:	611a      	str	r2, [r3, #16]

		  can1Tx0Data[0] = 0;
 8000e5c:	4b29      	ldr	r3, [pc, #164]	; (8000f04 <main+0x17c>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	701a      	strb	r2, [r3, #0]
		  for(int i=0; i<8; i++) can1Tx0Data[i]++;
 8000e62:	2300      	movs	r3, #0
 8000e64:	617b      	str	r3, [r7, #20]
 8000e66:	e00d      	b.n	8000e84 <main+0xfc>
 8000e68:	4a26      	ldr	r2, [pc, #152]	; (8000f04 <main+0x17c>)
 8000e6a:	697b      	ldr	r3, [r7, #20]
 8000e6c:	4413      	add	r3, r2
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	3301      	adds	r3, #1
 8000e72:	b2d9      	uxtb	r1, r3
 8000e74:	4a23      	ldr	r2, [pc, #140]	; (8000f04 <main+0x17c>)
 8000e76:	697b      	ldr	r3, [r7, #20]
 8000e78:	4413      	add	r3, r2
 8000e7a:	460a      	mov	r2, r1
 8000e7c:	701a      	strb	r2, [r3, #0]
 8000e7e:	697b      	ldr	r3, [r7, #20]
 8000e80:	3301      	adds	r3, #1
 8000e82:	617b      	str	r3, [r7, #20]
 8000e84:	697b      	ldr	r3, [r7, #20]
 8000e86:	2b07      	cmp	r3, #7
 8000e88:	ddee      	ble.n	8000e68 <main+0xe0>

		  TxMailBox = HAL_CAN_GetTxMailboxesFreeLevel(&hcan1);
<<<<<<< Updated upstream
 8000e8a:	4818      	ldr	r0, [pc, #96]	; (8000eec <main+0x164>)
 8000e8c:	f001 feab 	bl	8002be6 <HAL_CAN_GetTxMailboxesFreeLevel>
=======
 8000e8a:	481b      	ldr	r0, [pc, #108]	; (8000ef8 <main+0x170>)
 8000e8c:	f001 fead 	bl	8002bea <HAL_CAN_GetTxMailboxesFreeLevel>
>>>>>>> Stashed changes
 8000e90:	4603      	mov	r3, r0
 8000e92:	4a1d      	ldr	r2, [pc, #116]	; (8000f08 <main+0x180>)
 8000e94:	6013      	str	r3, [r2, #0]
		  printf("TxMailBox = %lu\r\n", TxMailBox);
 8000e96:	4b1c      	ldr	r3, [pc, #112]	; (8000f08 <main+0x180>)
 8000e98:	681b      	ldr	r3, [r3, #0]
<<<<<<< Updated upstream
 8000e9a:	4a17      	ldr	r2, [pc, #92]	; (8000ef8 <main+0x170>)
 8000e9c:	4915      	ldr	r1, [pc, #84]	; (8000ef4 <main+0x16c>)
 8000e9e:	4813      	ldr	r0, [pc, #76]	; (8000eec <main+0x164>)
 8000ea0:	f001 fdc6 	bl	8002a30 <HAL_CAN_AddTxMessage>
=======
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	481b      	ldr	r0, [pc, #108]	; (8000f0c <main+0x184>)
 8000e9e:	f013 fb59 	bl	8014554 <iprintf>
		  //HAL_CAN_AddTxMessage(&hcan1, &canTxHeader, &can1Tx0Data[0], TxMailBox);
		  HAL_CAN_AddTxMessage(&hcan1, &canTxHeader, &can1Tx0Data[0], &TxMailBox);
 8000ea2:	4b19      	ldr	r3, [pc, #100]	; (8000f08 <main+0x180>)
 8000ea4:	4a17      	ldr	r2, [pc, #92]	; (8000f04 <main+0x17c>)
 8000ea6:	4916      	ldr	r1, [pc, #88]	; (8000f00 <main+0x178>)
 8000ea8:	4813      	ldr	r0, [pc, #76]	; (8000ef8 <main+0x170>)
 8000eaa:	f001 fdc3 	bl	8002a34 <HAL_CAN_AddTxMessage>

>>>>>>> Stashed changes

	  }

	  if(can1_rx0_flag == 1)
 8000eae:	4b18      	ldr	r3, [pc, #96]	; (8000f10 <main+0x188>)
 8000eb0:	781b      	ldrb	r3, [r3, #0]
 8000eb2:	b2db      	uxtb	r3, r3
 8000eb4:	2b01      	cmp	r3, #1
 8000eb6:	d1bc      	bne.n	8000e32 <main+0xaa>
	  {
		  can1_rx0_flag = 0;
 8000eb8:	4b15      	ldr	r3, [pc, #84]	; (8000f10 <main+0x188>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	701a      	strb	r2, [r3, #0]
		  sprintf((char*)str, "Rx ID : 0x%3X", (unsigned)canRxHeader.StdId);
<<<<<<< Updated upstream
 8000eb4:	4b13      	ldr	r3, [pc, #76]	; (8000f04 <main+0x17c>)
 8000eb6:	681a      	ldr	r2, [r3, #0]
 8000eb8:	463b      	mov	r3, r7
 8000eba:	4913      	ldr	r1, [pc, #76]	; (8000f08 <main+0x180>)
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f013 fbb9 	bl	8014634 <siprintf>
		  printf("%s\r\n", str);
 8000ec2:	463b      	mov	r3, r7
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	4811      	ldr	r0, [pc, #68]	; (8000f0c <main+0x184>)
 8000ec8:	f013 fb5c 	bl	8014584 <iprintf>
		  sprintf((char*)str, "Rx Data : 0x%2X", can1Rx0Data[0]);	// 1 byte
 8000ecc:	4b10      	ldr	r3, [pc, #64]	; (8000f10 <main+0x188>)
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	461a      	mov	r2, r3
 8000ed2:	463b      	mov	r3, r7
 8000ed4:	490f      	ldr	r1, [pc, #60]	; (8000f14 <main+0x18c>)
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f013 fbac 	bl	8014634 <siprintf>
=======
 8000ebe:	4b15      	ldr	r3, [pc, #84]	; (8000f14 <main+0x18c>)
 8000ec0:	681a      	ldr	r2, [r3, #0]
 8000ec2:	463b      	mov	r3, r7
 8000ec4:	4914      	ldr	r1, [pc, #80]	; (8000f18 <main+0x190>)
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f013 fb9c 	bl	8014604 <siprintf>
>>>>>>> Stashed changes
		  printf("%s\r\n", str);
 8000ecc:	463b      	mov	r3, r7
 8000ece:	4619      	mov	r1, r3
 8000ed0:	4812      	ldr	r0, [pc, #72]	; (8000f1c <main+0x194>)
 8000ed2:	f013 fb3f 	bl	8014554 <iprintf>
		  sprintf((char*)str, "Rx Data : 0x%2X", can1Rx0Data[0]);	// 1 byte
 8000ed6:	4b12      	ldr	r3, [pc, #72]	; (8000f20 <main+0x198>)
 8000ed8:	781b      	ldrb	r3, [r3, #0]
 8000eda:	461a      	mov	r2, r3
 8000edc:	463b      	mov	r3, r7
<<<<<<< Updated upstream
 8000ede:	4619      	mov	r1, r3
 8000ee0:	480a      	ldr	r0, [pc, #40]	; (8000f0c <main+0x184>)
 8000ee2:	f013 fb4f 	bl	8014584 <iprintf>
	  if(buttonFlag == 1)
 8000ee6:	e7a4      	b.n	8000e32 <main+0xaa>
 8000ee8:	200002f0 	.word	0x200002f0
 8000eec:	20000344 	.word	0x20000344
 8000ef0:	20000094 	.word	0x20000094
 8000ef4:	200002d4 	.word	0x200002d4
 8000ef8:	2000033c 	.word	0x2000033c
 8000efc:	200002ec 	.word	0x200002ec
 8000f00:	20000095 	.word	0x20000095
 8000f04:	20000320 	.word	0x20000320
 8000f08:	08015924 	.word	0x08015924
 8000f0c:	08015934 	.word	0x08015934
 8000f10:	20000318 	.word	0x20000318
 8000f14:	0801593c 	.word	0x0801593c

08000f18 <SystemClock_Config>:
=======
 8000ede:	4911      	ldr	r1, [pc, #68]	; (8000f24 <main+0x19c>)
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f013 fb8f 	bl	8014604 <siprintf>
		  printf("%s\r\n", str);
 8000ee6:	463b      	mov	r3, r7
 8000ee8:	4619      	mov	r1, r3
 8000eea:	480c      	ldr	r0, [pc, #48]	; (8000f1c <main+0x194>)
 8000eec:	f013 fb32 	bl	8014554 <iprintf>
	  if(buttonFlag == 1)
 8000ef0:	e79f      	b.n	8000e32 <main+0xaa>
 8000ef2:	bf00      	nop
 8000ef4:	200002f0 	.word	0x200002f0
 8000ef8:	20000344 	.word	0x20000344
 8000efc:	20000094 	.word	0x20000094
 8000f00:	200002d4 	.word	0x200002d4
 8000f04:	2000033c 	.word	0x2000033c
 8000f08:	200002ec 	.word	0x200002ec
 8000f0c:	080158f4 	.word	0x080158f4
 8000f10:	20000095 	.word	0x20000095
 8000f14:	20000320 	.word	0x20000320
 8000f18:	08015908 	.word	0x08015908
 8000f1c:	08015918 	.word	0x08015918
 8000f20:	20000318 	.word	0x20000318
 8000f24:	08015920 	.word	0x08015920

08000f28 <SystemClock_Config>:
>>>>>>> Stashed changes
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b094      	sub	sp, #80	; 0x50
 8000f2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
<<<<<<< Updated upstream
 8000f1e:	f107 0320 	add.w	r3, r7, #32
 8000f22:	2230      	movs	r2, #48	; 0x30
 8000f24:	2100      	movs	r1, #0
 8000f26:	4618      	mov	r0, r3
 8000f28:	f013 fb24 	bl	8014574 <memset>
=======
 8000f2e:	f107 0320 	add.w	r3, r7, #32
 8000f32:	2230      	movs	r2, #48	; 0x30
 8000f34:	2100      	movs	r1, #0
 8000f36:	4618      	mov	r0, r3
 8000f38:	f013 fb04 	bl	8014544 <memset>
>>>>>>> Stashed changes
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f3c:	f107 030c 	add.w	r3, r7, #12
 8000f40:	2200      	movs	r2, #0
 8000f42:	601a      	str	r2, [r3, #0]
 8000f44:	605a      	str	r2, [r3, #4]
 8000f46:	609a      	str	r2, [r3, #8]
 8000f48:	60da      	str	r2, [r3, #12]
 8000f4a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	60bb      	str	r3, [r7, #8]
 8000f50:	4b2b      	ldr	r3, [pc, #172]	; (8001000 <SystemClock_Config+0xd8>)
 8000f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f54:	4a2a      	ldr	r2, [pc, #168]	; (8001000 <SystemClock_Config+0xd8>)
 8000f56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f5a:	6413      	str	r3, [r2, #64]	; 0x40
 8000f5c:	4b28      	ldr	r3, [pc, #160]	; (8001000 <SystemClock_Config+0xd8>)
 8000f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f64:	60bb      	str	r3, [r7, #8]
 8000f66:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f68:	2300      	movs	r3, #0
 8000f6a:	607b      	str	r3, [r7, #4]
 8000f6c:	4b25      	ldr	r3, [pc, #148]	; (8001004 <SystemClock_Config+0xdc>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a24      	ldr	r2, [pc, #144]	; (8001004 <SystemClock_Config+0xdc>)
 8000f72:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f76:	6013      	str	r3, [r2, #0]
 8000f78:	4b22      	ldr	r3, [pc, #136]	; (8001004 <SystemClock_Config+0xdc>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f80:	607b      	str	r3, [r7, #4]
 8000f82:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f84:	2301      	movs	r3, #1
 8000f86:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f88:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f8c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f8e:	2302      	movs	r3, #2
 8000f90:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f92:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f96:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000f98:	2304      	movs	r3, #4
 8000f9a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000f9c:	23b4      	movs	r3, #180	; 0xb4
 8000f9e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fa0:	2302      	movs	r3, #2
 8000fa2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000fa4:	2308      	movs	r3, #8
 8000fa6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
<<<<<<< Updated upstream
 8000f98:	f107 0320 	add.w	r3, r7, #32
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f004 fc11 	bl	80057c4 <HAL_RCC_OscConfig>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d001      	beq.n	8000fac <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000fa8:	f000 f880 	bl	80010ac <Error_Handler>
=======
 8000fa8:	f107 0320 	add.w	r3, r7, #32
 8000fac:	4618      	mov	r0, r3
 8000fae:	f004 fbf1 	bl	8005794 <HAL_RCC_OscConfig>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d001      	beq.n	8000fbc <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000fb8:	f000 f87a 	bl	80010b0 <Error_Handler>
>>>>>>> Stashed changes
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
<<<<<<< Updated upstream
 8000fac:	f004 fbba 	bl	8005724 <HAL_PWREx_EnableOverDrive>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d001      	beq.n	8000fba <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000fb6:	f000 f879 	bl	80010ac <Error_Handler>
=======
 8000fbc:	f004 fb9a 	bl	80056f4 <HAL_PWREx_EnableOverDrive>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000fc6:	f000 f873 	bl	80010b0 <Error_Handler>
>>>>>>> Stashed changes
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fca:	230f      	movs	r3, #15
 8000fcc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fce:	2302      	movs	r3, #2
 8000fd0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000fd6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000fda:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000fdc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fe0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
<<<<<<< Updated upstream
 8000fd2:	f107 030c 	add.w	r3, r7, #12
 8000fd6:	2105      	movs	r1, #5
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f004 fe6b 	bl	8005cb4 <HAL_RCC_ClockConfig>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d001      	beq.n	8000fe8 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000fe4:	f000 f862 	bl	80010ac <Error_Handler>
=======
 8000fe2:	f107 030c 	add.w	r3, r7, #12
 8000fe6:	2105      	movs	r1, #5
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f004 fe4b 	bl	8005c84 <HAL_RCC_ClockConfig>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000ff4:	f000 f85c 	bl	80010b0 <Error_Handler>
>>>>>>> Stashed changes
  }
}
 8000ff8:	bf00      	nop
 8000ffa:	3750      	adds	r7, #80	; 0x50
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	40023800 	.word	0x40023800
 8001004:	40007000 	.word	0x40007000

08001008 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	4603      	mov	r3, r0
 8001010:	80fb      	strh	r3, [r7, #6]
	static uint32_t temp;
<<<<<<< Updated upstream
	if(GPIO_Pin == GPIO_PIN_10)	// PIN_3 Pressed
 8001002:	88fb      	ldrh	r3, [r7, #6]
 8001004:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001008:	d120      	bne.n	800104c <HAL_GPIO_EXTI_Callback+0x54>
	{
		if(HAL_GetTick() - temp > 100){
 800100a:	f001 f84f 	bl	80020ac <HAL_GetTick>
 800100e:	4602      	mov	r2, r0
 8001010:	4b10      	ldr	r3, [pc, #64]	; (8001054 <HAL_GPIO_EXTI_Callback+0x5c>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	1ad3      	subs	r3, r2, r3
 8001016:	2b64      	cmp	r3, #100	; 0x64
 8001018:	d90a      	bls.n	8001030 <HAL_GPIO_EXTI_Callback+0x38>
			printf("%s\r\n", "PIN_10 Pressed");
 800101a:	490f      	ldr	r1, [pc, #60]	; (8001058 <HAL_GPIO_EXTI_Callback+0x60>)
 800101c:	480f      	ldr	r0, [pc, #60]	; (800105c <HAL_GPIO_EXTI_Callback+0x64>)
 800101e:	f013 fab1 	bl	8014584 <iprintf>
			buttonFlag = 1;
 8001022:	4b0f      	ldr	r3, [pc, #60]	; (8001060 <HAL_GPIO_EXTI_Callback+0x68>)
 8001024:	2201      	movs	r2, #1
 8001026:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8001028:	2180      	movs	r1, #128	; 0x80
 800102a:	480e      	ldr	r0, [pc, #56]	; (8001064 <HAL_GPIO_EXTI_Callback+0x6c>)
 800102c:	f004 f987 	bl	800533e <HAL_GPIO_TogglePin>
		}
		//while(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_3) == GPIO_PIN_RESET);
		while(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_10) == GPIO_PIN_RESET){
 8001030:	bf00      	nop
 8001032:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001036:	480c      	ldr	r0, [pc, #48]	; (8001068 <HAL_GPIO_EXTI_Callback+0x70>)
 8001038:	f004 f950 	bl	80052dc <HAL_GPIO_ReadPin>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d0f7      	beq.n	8001032 <HAL_GPIO_EXTI_Callback+0x3a>
			//printf("%s\r\n", "wait for reset");
		}	// button -> 0
		temp = HAL_GetTick();	// check last time
 8001042:	f001 f833 	bl	80020ac <HAL_GetTick>
 8001046:	4603      	mov	r3, r0
 8001048:	4a02      	ldr	r2, [pc, #8]	; (8001054 <HAL_GPIO_EXTI_Callback+0x5c>)
 800104a:	6013      	str	r3, [r2, #0]
	}

}
 800104c:	bf00      	nop
 800104e:	3708      	adds	r7, #8
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	20000098 	.word	0x20000098
 8001058:	0801594c 	.word	0x0801594c
 800105c:	08015934 	.word	0x08015934
 8001060:	20000094 	.word	0x20000094
 8001064:	40020400 	.word	0x40020400
 8001068:	40020c00 	.word	0x40020c00

0800106c <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
	if(hcan->Instance == CAN1)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a07      	ldr	r2, [pc, #28]	; (8001098 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d108      	bne.n	8001090 <HAL_CAN_RxFifo0MsgPendingCallback+0x24>
	{
		HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &canRxHeader, &can1Rx0Data[0]);
 800107e:	4b07      	ldr	r3, [pc, #28]	; (800109c <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8001080:	4a07      	ldr	r2, [pc, #28]	; (80010a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8001082:	2100      	movs	r1, #0
 8001084:	4807      	ldr	r0, [pc, #28]	; (80010a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 8001086:	f001 fde3 	bl	8002c50 <HAL_CAN_GetRxMessage>
		can1_rx0_flag = 1;
 800108a:	4b07      	ldr	r3, [pc, #28]	; (80010a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 800108c:	2201      	movs	r2, #1
 800108e:	701a      	strb	r2, [r3, #0]
	}
}
 8001090:	bf00      	nop
 8001092:	3708      	adds	r7, #8
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	40006400 	.word	0x40006400
 800109c:	20000318 	.word	0x20000318
 80010a0:	20000320 	.word	0x20000320
 80010a4:	20000344 	.word	0x20000344
 80010a8:	20000095 	.word	0x20000095

080010ac <Error_Handler>:
=======
	if(GPIO_Pin == GPIO_PIN_10)	// PIN_10 Pressed
 8001012:	88fb      	ldrh	r3, [r7, #6]
 8001014:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001018:	d11c      	bne.n	8001054 <HAL_GPIO_EXTI_Callback+0x4c>
	{
		if(HAL_GetTick() - temp > 100){
 800101a:	f001 f849 	bl	80020b0 <HAL_GetTick>
 800101e:	4602      	mov	r2, r0
 8001020:	4b0e      	ldr	r3, [pc, #56]	; (800105c <HAL_GPIO_EXTI_Callback+0x54>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	1ad3      	subs	r3, r2, r3
 8001026:	2b64      	cmp	r3, #100	; 0x64
 8001028:	d906      	bls.n	8001038 <HAL_GPIO_EXTI_Callback+0x30>
			printf("%s\r\n", "PIN_10 Pressed");
 800102a:	490d      	ldr	r1, [pc, #52]	; (8001060 <HAL_GPIO_EXTI_Callback+0x58>)
 800102c:	480d      	ldr	r0, [pc, #52]	; (8001064 <HAL_GPIO_EXTI_Callback+0x5c>)
 800102e:	f013 fa91 	bl	8014554 <iprintf>
			buttonFlag = 1;
 8001032:	4b0d      	ldr	r3, [pc, #52]	; (8001068 <HAL_GPIO_EXTI_Callback+0x60>)
 8001034:	2201      	movs	r2, #1
 8001036:	701a      	strb	r2, [r3, #0]
			//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
		}
		//while(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_3) == GPIO_PIN_RESET);
		while(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_10) == GPIO_PIN_RESET){
 8001038:	bf00      	nop
 800103a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800103e:	480b      	ldr	r0, [pc, #44]	; (800106c <HAL_GPIO_EXTI_Callback+0x64>)
 8001040:	f004 f94e 	bl	80052e0 <HAL_GPIO_ReadPin>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d0f7      	beq.n	800103a <HAL_GPIO_EXTI_Callback+0x32>
			//printf("%s\r\n", "wait for reset");
		}	// button -> 0
		temp = HAL_GetTick();	// check last time
 800104a:	f001 f831 	bl	80020b0 <HAL_GetTick>
 800104e:	4603      	mov	r3, r0
 8001050:	4a02      	ldr	r2, [pc, #8]	; (800105c <HAL_GPIO_EXTI_Callback+0x54>)
 8001052:	6013      	str	r3, [r2, #0]
	}

}
 8001054:	bf00      	nop
 8001056:	3708      	adds	r7, #8
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	20000098 	.word	0x20000098
 8001060:	08015930 	.word	0x08015930
 8001064:	08015918 	.word	0x08015918
 8001068:	20000094 	.word	0x20000094
 800106c:	40020c00 	.word	0x40020c00

08001070 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
	if(hcan->Instance == CAN1)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a07      	ldr	r2, [pc, #28]	; (800109c <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d108      	bne.n	8001094 <HAL_CAN_RxFifo0MsgPendingCallback+0x24>
	{
		HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &canRxHeader, &can1Rx0Data[0]);
 8001082:	4b07      	ldr	r3, [pc, #28]	; (80010a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8001084:	4a07      	ldr	r2, [pc, #28]	; (80010a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8001086:	2100      	movs	r1, #0
 8001088:	4807      	ldr	r0, [pc, #28]	; (80010a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 800108a:	f001 fde3 	bl	8002c54 <HAL_CAN_GetRxMessage>
		can1_rx0_flag = 1;
 800108e:	4b07      	ldr	r3, [pc, #28]	; (80010ac <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 8001090:	2201      	movs	r2, #1
 8001092:	701a      	strb	r2, [r3, #0]
	}
}
 8001094:	bf00      	nop
 8001096:	3708      	adds	r7, #8
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	40006400 	.word	0x40006400
 80010a0:	20000318 	.word	0x20000318
 80010a4:	20000320 	.word	0x20000320
 80010a8:	20000344 	.word	0x20000344
 80010ac:	20000095 	.word	0x20000095

080010b0 <Error_Handler>:
>>>>>>> Stashed changes
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
<<<<<<< Updated upstream
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
=======
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
<<<<<<< Updated upstream
 80010b0:	b672      	cpsid	i
}
 80010b2:	bf00      	nop
=======
 80010b4:	b672      	cpsid	i
}
 80010b6:	bf00      	nop
>>>>>>> Stashed changes
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
<<<<<<< Updated upstream
 80010b4:	e7fe      	b.n	80010b4 <Error_Handler+0x8>
	...

080010b8 <MX_SDIO_SD_Init>:
=======
 80010b8:	e7fe      	b.n	80010b8 <Error_Handler+0x8>
	...

080010bc <MX_SDIO_SD_Init>:
>>>>>>> Stashed changes
DMA_HandleTypeDef hdma_sdio_rx;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
<<<<<<< Updated upstream
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
=======
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
<<<<<<< Updated upstream
 80010bc:	4b0c      	ldr	r3, [pc, #48]	; (80010f0 <MX_SDIO_SD_Init+0x38>)
 80010be:	4a0d      	ldr	r2, [pc, #52]	; (80010f4 <MX_SDIO_SD_Init+0x3c>)
 80010c0:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80010c2:	4b0b      	ldr	r3, [pc, #44]	; (80010f0 <MX_SDIO_SD_Init+0x38>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80010c8:	4b09      	ldr	r3, [pc, #36]	; (80010f0 <MX_SDIO_SD_Init+0x38>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80010ce:	4b08      	ldr	r3, [pc, #32]	; (80010f0 <MX_SDIO_SD_Init+0x38>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80010d4:	4b06      	ldr	r3, [pc, #24]	; (80010f0 <MX_SDIO_SD_Init+0x38>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80010da:	4b05      	ldr	r3, [pc, #20]	; (80010f0 <MX_SDIO_SD_Init+0x38>)
 80010dc:	2200      	movs	r2, #0
 80010de:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 80010e0:	4b03      	ldr	r3, [pc, #12]	; (80010f0 <MX_SDIO_SD_Init+0x38>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	619a      	str	r2, [r3, #24]
=======
 80010c0:	4b0c      	ldr	r3, [pc, #48]	; (80010f4 <MX_SDIO_SD_Init+0x38>)
 80010c2:	4a0d      	ldr	r2, [pc, #52]	; (80010f8 <MX_SDIO_SD_Init+0x3c>)
 80010c4:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80010c6:	4b0b      	ldr	r3, [pc, #44]	; (80010f4 <MX_SDIO_SD_Init+0x38>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80010cc:	4b09      	ldr	r3, [pc, #36]	; (80010f4 <MX_SDIO_SD_Init+0x38>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80010d2:	4b08      	ldr	r3, [pc, #32]	; (80010f4 <MX_SDIO_SD_Init+0x38>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80010d8:	4b06      	ldr	r3, [pc, #24]	; (80010f4 <MX_SDIO_SD_Init+0x38>)
 80010da:	2200      	movs	r2, #0
 80010dc:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80010de:	4b05      	ldr	r3, [pc, #20]	; (80010f4 <MX_SDIO_SD_Init+0x38>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 80010e4:	4b03      	ldr	r3, [pc, #12]	; (80010f4 <MX_SDIO_SD_Init+0x38>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	619a      	str	r2, [r3, #24]
>>>>>>> Stashed changes
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
<<<<<<< Updated upstream
 80010e6:	bf00      	nop
 80010e8:	46bd      	mov	sp, r7
 80010ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ee:	4770      	bx	lr
 80010f0:	200004e8 	.word	0x200004e8
 80010f4:	40012c00 	.word	0x40012c00

080010f8 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b08a      	sub	sp, #40	; 0x28
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001100:	f107 0314 	add.w	r3, r7, #20
 8001104:	2200      	movs	r2, #0
 8001106:	601a      	str	r2, [r3, #0]
 8001108:	605a      	str	r2, [r3, #4]
 800110a:	609a      	str	r2, [r3, #8]
 800110c:	60da      	str	r2, [r3, #12]
 800110e:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDIO)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a68      	ldr	r2, [pc, #416]	; (80012b8 <HAL_SD_MspInit+0x1c0>)
 8001116:	4293      	cmp	r3, r2
 8001118:	f040 80c9 	bne.w	80012ae <HAL_SD_MspInit+0x1b6>
=======
 80010ea:	bf00      	nop
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr
 80010f4:	200004e8 	.word	0x200004e8
 80010f8:	40012c00 	.word	0x40012c00

080010fc <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b08a      	sub	sp, #40	; 0x28
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001104:	f107 0314 	add.w	r3, r7, #20
 8001108:	2200      	movs	r2, #0
 800110a:	601a      	str	r2, [r3, #0]
 800110c:	605a      	str	r2, [r3, #4]
 800110e:	609a      	str	r2, [r3, #8]
 8001110:	60da      	str	r2, [r3, #12]
 8001112:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDIO)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a68      	ldr	r2, [pc, #416]	; (80012bc <HAL_SD_MspInit+0x1c0>)
 800111a:	4293      	cmp	r3, r2
 800111c:	f040 80c9 	bne.w	80012b2 <HAL_SD_MspInit+0x1b6>
>>>>>>> Stashed changes
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
<<<<<<< Updated upstream
 800111c:	2300      	movs	r3, #0
 800111e:	613b      	str	r3, [r7, #16]
 8001120:	4b66      	ldr	r3, [pc, #408]	; (80012bc <HAL_SD_MspInit+0x1c4>)
 8001122:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001124:	4a65      	ldr	r2, [pc, #404]	; (80012bc <HAL_SD_MspInit+0x1c4>)
 8001126:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800112a:	6453      	str	r3, [r2, #68]	; 0x44
 800112c:	4b63      	ldr	r3, [pc, #396]	; (80012bc <HAL_SD_MspInit+0x1c4>)
 800112e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001130:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001134:	613b      	str	r3, [r7, #16]
 8001136:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001138:	2300      	movs	r3, #0
 800113a:	60fb      	str	r3, [r7, #12]
 800113c:	4b5f      	ldr	r3, [pc, #380]	; (80012bc <HAL_SD_MspInit+0x1c4>)
 800113e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001140:	4a5e      	ldr	r2, [pc, #376]	; (80012bc <HAL_SD_MspInit+0x1c4>)
 8001142:	f043 0304 	orr.w	r3, r3, #4
 8001146:	6313      	str	r3, [r2, #48]	; 0x30
 8001148:	4b5c      	ldr	r3, [pc, #368]	; (80012bc <HAL_SD_MspInit+0x1c4>)
 800114a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114c:	f003 0304 	and.w	r3, r3, #4
 8001150:	60fb      	str	r3, [r7, #12]
 8001152:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001154:	2300      	movs	r3, #0
 8001156:	60bb      	str	r3, [r7, #8]
 8001158:	4b58      	ldr	r3, [pc, #352]	; (80012bc <HAL_SD_MspInit+0x1c4>)
 800115a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115c:	4a57      	ldr	r2, [pc, #348]	; (80012bc <HAL_SD_MspInit+0x1c4>)
 800115e:	f043 0308 	orr.w	r3, r3, #8
 8001162:	6313      	str	r3, [r2, #48]	; 0x30
 8001164:	4b55      	ldr	r3, [pc, #340]	; (80012bc <HAL_SD_MspInit+0x1c4>)
 8001166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001168:	f003 0308 	and.w	r3, r3, #8
 800116c:	60bb      	str	r3, [r7, #8]
 800116e:	68bb      	ldr	r3, [r7, #8]
=======
 8001120:	2300      	movs	r3, #0
 8001122:	613b      	str	r3, [r7, #16]
 8001124:	4b66      	ldr	r3, [pc, #408]	; (80012c0 <HAL_SD_MspInit+0x1c4>)
 8001126:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001128:	4a65      	ldr	r2, [pc, #404]	; (80012c0 <HAL_SD_MspInit+0x1c4>)
 800112a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800112e:	6453      	str	r3, [r2, #68]	; 0x44
 8001130:	4b63      	ldr	r3, [pc, #396]	; (80012c0 <HAL_SD_MspInit+0x1c4>)
 8001132:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001134:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001138:	613b      	str	r3, [r7, #16]
 800113a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800113c:	2300      	movs	r3, #0
 800113e:	60fb      	str	r3, [r7, #12]
 8001140:	4b5f      	ldr	r3, [pc, #380]	; (80012c0 <HAL_SD_MspInit+0x1c4>)
 8001142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001144:	4a5e      	ldr	r2, [pc, #376]	; (80012c0 <HAL_SD_MspInit+0x1c4>)
 8001146:	f043 0304 	orr.w	r3, r3, #4
 800114a:	6313      	str	r3, [r2, #48]	; 0x30
 800114c:	4b5c      	ldr	r3, [pc, #368]	; (80012c0 <HAL_SD_MspInit+0x1c4>)
 800114e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001150:	f003 0304 	and.w	r3, r3, #4
 8001154:	60fb      	str	r3, [r7, #12]
 8001156:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001158:	2300      	movs	r3, #0
 800115a:	60bb      	str	r3, [r7, #8]
 800115c:	4b58      	ldr	r3, [pc, #352]	; (80012c0 <HAL_SD_MspInit+0x1c4>)
 800115e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001160:	4a57      	ldr	r2, [pc, #348]	; (80012c0 <HAL_SD_MspInit+0x1c4>)
 8001162:	f043 0308 	orr.w	r3, r3, #8
 8001166:	6313      	str	r3, [r2, #48]	; 0x30
 8001168:	4b55      	ldr	r3, [pc, #340]	; (80012c0 <HAL_SD_MspInit+0x1c4>)
 800116a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116c:	f003 0308 	and.w	r3, r3, #8
 8001170:	60bb      	str	r3, [r7, #8]
 8001172:	68bb      	ldr	r3, [r7, #8]
>>>>>>> Stashed changes
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
<<<<<<< Updated upstream
 8001170:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001174:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001176:	2302      	movs	r3, #2
 8001178:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117a:	2300      	movs	r3, #0
 800117c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800117e:	2303      	movs	r3, #3
 8001180:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001182:	230c      	movs	r3, #12
 8001184:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001186:	f107 0314 	add.w	r3, r7, #20
 800118a:	4619      	mov	r1, r3
 800118c:	484c      	ldr	r0, [pc, #304]	; (80012c0 <HAL_SD_MspInit+0x1c8>)
 800118e:	f003 fef9 	bl	8004f84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001192:	2304      	movs	r3, #4
 8001194:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001196:	2302      	movs	r3, #2
 8001198:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119a:	2300      	movs	r3, #0
 800119c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800119e:	2303      	movs	r3, #3
 80011a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80011a2:	230c      	movs	r3, #12
 80011a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011a6:	f107 0314 	add.w	r3, r7, #20
 80011aa:	4619      	mov	r1, r3
 80011ac:	4845      	ldr	r0, [pc, #276]	; (80012c4 <HAL_SD_MspInit+0x1cc>)
 80011ae:	f003 fee9 	bl	8004f84 <HAL_GPIO_Init>
=======
 8001174:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001178:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800117a:	2302      	movs	r3, #2
 800117c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117e:	2300      	movs	r3, #0
 8001180:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001182:	2303      	movs	r3, #3
 8001184:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001186:	230c      	movs	r3, #12
 8001188:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800118a:	f107 0314 	add.w	r3, r7, #20
 800118e:	4619      	mov	r1, r3
 8001190:	484c      	ldr	r0, [pc, #304]	; (80012c4 <HAL_SD_MspInit+0x1c8>)
 8001192:	f003 fef9 	bl	8004f88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001196:	2304      	movs	r3, #4
 8001198:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800119a:	2302      	movs	r3, #2
 800119c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119e:	2300      	movs	r3, #0
 80011a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011a2:	2303      	movs	r3, #3
 80011a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80011a6:	230c      	movs	r3, #12
 80011a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011aa:	f107 0314 	add.w	r3, r7, #20
 80011ae:	4619      	mov	r1, r3
 80011b0:	4845      	ldr	r0, [pc, #276]	; (80012c8 <HAL_SD_MspInit+0x1cc>)
 80011b2:	f003 fee9 	bl	8004f88 <HAL_GPIO_Init>
>>>>>>> Stashed changes

    /* SDIO DMA Init */
    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream3;
<<<<<<< Updated upstream
 80011b2:	4b45      	ldr	r3, [pc, #276]	; (80012c8 <HAL_SD_MspInit+0x1d0>)
 80011b4:	4a45      	ldr	r2, [pc, #276]	; (80012cc <HAL_SD_MspInit+0x1d4>)
 80011b6:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 80011b8:	4b43      	ldr	r3, [pc, #268]	; (80012c8 <HAL_SD_MspInit+0x1d0>)
 80011ba:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80011be:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80011c0:	4b41      	ldr	r3, [pc, #260]	; (80012c8 <HAL_SD_MspInit+0x1d0>)
 80011c2:	2240      	movs	r2, #64	; 0x40
 80011c4:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80011c6:	4b40      	ldr	r3, [pc, #256]	; (80012c8 <HAL_SD_MspInit+0x1d0>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 80011cc:	4b3e      	ldr	r3, [pc, #248]	; (80012c8 <HAL_SD_MspInit+0x1d0>)
 80011ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011d2:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80011d4:	4b3c      	ldr	r3, [pc, #240]	; (80012c8 <HAL_SD_MspInit+0x1d0>)
 80011d6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80011da:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80011dc:	4b3a      	ldr	r3, [pc, #232]	; (80012c8 <HAL_SD_MspInit+0x1d0>)
 80011de:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80011e2:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 80011e4:	4b38      	ldr	r3, [pc, #224]	; (80012c8 <HAL_SD_MspInit+0x1d0>)
 80011e6:	2220      	movs	r2, #32
 80011e8:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 80011ea:	4b37      	ldr	r3, [pc, #220]	; (80012c8 <HAL_SD_MspInit+0x1d0>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80011f0:	4b35      	ldr	r3, [pc, #212]	; (80012c8 <HAL_SD_MspInit+0x1d0>)
 80011f2:	2204      	movs	r2, #4
 80011f4:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80011f6:	4b34      	ldr	r3, [pc, #208]	; (80012c8 <HAL_SD_MspInit+0x1d0>)
 80011f8:	2203      	movs	r2, #3
 80011fa:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 80011fc:	4b32      	ldr	r3, [pc, #200]	; (80012c8 <HAL_SD_MspInit+0x1d0>)
 80011fe:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001202:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001204:	4b30      	ldr	r3, [pc, #192]	; (80012c8 <HAL_SD_MspInit+0x1d0>)
 8001206:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800120a:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 800120c:	482e      	ldr	r0, [pc, #184]	; (80012c8 <HAL_SD_MspInit+0x1d0>)
 800120e:	f002 fa09 	bl	8003624 <HAL_DMA_Init>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <HAL_SD_MspInit+0x124>
    {
      Error_Handler();
 8001218:	f7ff ff48 	bl	80010ac <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdio_tx);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	4a2a      	ldr	r2, [pc, #168]	; (80012c8 <HAL_SD_MspInit+0x1d0>)
 8001220:	63da      	str	r2, [r3, #60]	; 0x3c
 8001222:	4a29      	ldr	r2, [pc, #164]	; (80012c8 <HAL_SD_MspInit+0x1d0>)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream6;
 8001228:	4b29      	ldr	r3, [pc, #164]	; (80012d0 <HAL_SD_MspInit+0x1d8>)
 800122a:	4a2a      	ldr	r2, [pc, #168]	; (80012d4 <HAL_SD_MspInit+0x1dc>)
 800122c:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 800122e:	4b28      	ldr	r3, [pc, #160]	; (80012d0 <HAL_SD_MspInit+0x1d8>)
 8001230:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001234:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001236:	4b26      	ldr	r3, [pc, #152]	; (80012d0 <HAL_SD_MspInit+0x1d8>)
 8001238:	2200      	movs	r2, #0
 800123a:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800123c:	4b24      	ldr	r3, [pc, #144]	; (80012d0 <HAL_SD_MspInit+0x1d8>)
 800123e:	2200      	movs	r2, #0
 8001240:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001242:	4b23      	ldr	r3, [pc, #140]	; (80012d0 <HAL_SD_MspInit+0x1d8>)
 8001244:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001248:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800124a:	4b21      	ldr	r3, [pc, #132]	; (80012d0 <HAL_SD_MspInit+0x1d8>)
 800124c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001250:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001252:	4b1f      	ldr	r3, [pc, #124]	; (80012d0 <HAL_SD_MspInit+0x1d8>)
 8001254:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001258:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 800125a:	4b1d      	ldr	r3, [pc, #116]	; (80012d0 <HAL_SD_MspInit+0x1d8>)
 800125c:	2220      	movs	r2, #32
 800125e:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001260:	4b1b      	ldr	r3, [pc, #108]	; (80012d0 <HAL_SD_MspInit+0x1d8>)
 8001262:	2200      	movs	r2, #0
 8001264:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001266:	4b1a      	ldr	r3, [pc, #104]	; (80012d0 <HAL_SD_MspInit+0x1d8>)
 8001268:	2204      	movs	r2, #4
 800126a:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800126c:	4b18      	ldr	r3, [pc, #96]	; (80012d0 <HAL_SD_MspInit+0x1d8>)
 800126e:	2203      	movs	r2, #3
 8001270:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8001272:	4b17      	ldr	r3, [pc, #92]	; (80012d0 <HAL_SD_MspInit+0x1d8>)
 8001274:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001278:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 800127a:	4b15      	ldr	r3, [pc, #84]	; (80012d0 <HAL_SD_MspInit+0x1d8>)
 800127c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001280:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8001282:	4813      	ldr	r0, [pc, #76]	; (80012d0 <HAL_SD_MspInit+0x1d8>)
 8001284:	f002 f9ce 	bl	8003624 <HAL_DMA_Init>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <HAL_SD_MspInit+0x19a>
    {
      Error_Handler();
 800128e:	f7ff ff0d 	bl	80010ac <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdio_rx);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	4a0e      	ldr	r2, [pc, #56]	; (80012d0 <HAL_SD_MspInit+0x1d8>)
 8001296:	641a      	str	r2, [r3, #64]	; 0x40
 8001298:	4a0d      	ldr	r2, [pc, #52]	; (80012d0 <HAL_SD_MspInit+0x1d8>)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 800129e:	2200      	movs	r2, #0
 80012a0:	2100      	movs	r1, #0
 80012a2:	2031      	movs	r0, #49	; 0x31
 80012a4:	f002 f917 	bl	80034d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 80012a8:	2031      	movs	r0, #49	; 0x31
 80012aa:	f002 f930 	bl	800350e <HAL_NVIC_EnableIRQ>
=======
 80011b6:	4b45      	ldr	r3, [pc, #276]	; (80012cc <HAL_SD_MspInit+0x1d0>)
 80011b8:	4a45      	ldr	r2, [pc, #276]	; (80012d0 <HAL_SD_MspInit+0x1d4>)
 80011ba:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 80011bc:	4b43      	ldr	r3, [pc, #268]	; (80012cc <HAL_SD_MspInit+0x1d0>)
 80011be:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80011c2:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80011c4:	4b41      	ldr	r3, [pc, #260]	; (80012cc <HAL_SD_MspInit+0x1d0>)
 80011c6:	2240      	movs	r2, #64	; 0x40
 80011c8:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80011ca:	4b40      	ldr	r3, [pc, #256]	; (80012cc <HAL_SD_MspInit+0x1d0>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 80011d0:	4b3e      	ldr	r3, [pc, #248]	; (80012cc <HAL_SD_MspInit+0x1d0>)
 80011d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011d6:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80011d8:	4b3c      	ldr	r3, [pc, #240]	; (80012cc <HAL_SD_MspInit+0x1d0>)
 80011da:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80011de:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80011e0:	4b3a      	ldr	r3, [pc, #232]	; (80012cc <HAL_SD_MspInit+0x1d0>)
 80011e2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80011e6:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 80011e8:	4b38      	ldr	r3, [pc, #224]	; (80012cc <HAL_SD_MspInit+0x1d0>)
 80011ea:	2220      	movs	r2, #32
 80011ec:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 80011ee:	4b37      	ldr	r3, [pc, #220]	; (80012cc <HAL_SD_MspInit+0x1d0>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80011f4:	4b35      	ldr	r3, [pc, #212]	; (80012cc <HAL_SD_MspInit+0x1d0>)
 80011f6:	2204      	movs	r2, #4
 80011f8:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80011fa:	4b34      	ldr	r3, [pc, #208]	; (80012cc <HAL_SD_MspInit+0x1d0>)
 80011fc:	2203      	movs	r2, #3
 80011fe:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8001200:	4b32      	ldr	r3, [pc, #200]	; (80012cc <HAL_SD_MspInit+0x1d0>)
 8001202:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001206:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001208:	4b30      	ldr	r3, [pc, #192]	; (80012cc <HAL_SD_MspInit+0x1d0>)
 800120a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800120e:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8001210:	482e      	ldr	r0, [pc, #184]	; (80012cc <HAL_SD_MspInit+0x1d0>)
 8001212:	f002 fa09 	bl	8003628 <HAL_DMA_Init>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <HAL_SD_MspInit+0x124>
    {
      Error_Handler();
 800121c:	f7ff ff48 	bl	80010b0 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdio_tx);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	4a2a      	ldr	r2, [pc, #168]	; (80012cc <HAL_SD_MspInit+0x1d0>)
 8001224:	63da      	str	r2, [r3, #60]	; 0x3c
 8001226:	4a29      	ldr	r2, [pc, #164]	; (80012cc <HAL_SD_MspInit+0x1d0>)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream6;
 800122c:	4b29      	ldr	r3, [pc, #164]	; (80012d4 <HAL_SD_MspInit+0x1d8>)
 800122e:	4a2a      	ldr	r2, [pc, #168]	; (80012d8 <HAL_SD_MspInit+0x1dc>)
 8001230:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8001232:	4b28      	ldr	r3, [pc, #160]	; (80012d4 <HAL_SD_MspInit+0x1d8>)
 8001234:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001238:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800123a:	4b26      	ldr	r3, [pc, #152]	; (80012d4 <HAL_SD_MspInit+0x1d8>)
 800123c:	2200      	movs	r2, #0
 800123e:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001240:	4b24      	ldr	r3, [pc, #144]	; (80012d4 <HAL_SD_MspInit+0x1d8>)
 8001242:	2200      	movs	r2, #0
 8001244:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001246:	4b23      	ldr	r3, [pc, #140]	; (80012d4 <HAL_SD_MspInit+0x1d8>)
 8001248:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800124c:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800124e:	4b21      	ldr	r3, [pc, #132]	; (80012d4 <HAL_SD_MspInit+0x1d8>)
 8001250:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001254:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001256:	4b1f      	ldr	r3, [pc, #124]	; (80012d4 <HAL_SD_MspInit+0x1d8>)
 8001258:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800125c:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 800125e:	4b1d      	ldr	r3, [pc, #116]	; (80012d4 <HAL_SD_MspInit+0x1d8>)
 8001260:	2220      	movs	r2, #32
 8001262:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001264:	4b1b      	ldr	r3, [pc, #108]	; (80012d4 <HAL_SD_MspInit+0x1d8>)
 8001266:	2200      	movs	r2, #0
 8001268:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800126a:	4b1a      	ldr	r3, [pc, #104]	; (80012d4 <HAL_SD_MspInit+0x1d8>)
 800126c:	2204      	movs	r2, #4
 800126e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001270:	4b18      	ldr	r3, [pc, #96]	; (80012d4 <HAL_SD_MspInit+0x1d8>)
 8001272:	2203      	movs	r2, #3
 8001274:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8001276:	4b17      	ldr	r3, [pc, #92]	; (80012d4 <HAL_SD_MspInit+0x1d8>)
 8001278:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800127c:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 800127e:	4b15      	ldr	r3, [pc, #84]	; (80012d4 <HAL_SD_MspInit+0x1d8>)
 8001280:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001284:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8001286:	4813      	ldr	r0, [pc, #76]	; (80012d4 <HAL_SD_MspInit+0x1d8>)
 8001288:	f002 f9ce 	bl	8003628 <HAL_DMA_Init>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <HAL_SD_MspInit+0x19a>
    {
      Error_Handler();
 8001292:	f7ff ff0d 	bl	80010b0 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdio_rx);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	4a0e      	ldr	r2, [pc, #56]	; (80012d4 <HAL_SD_MspInit+0x1d8>)
 800129a:	641a      	str	r2, [r3, #64]	; 0x40
 800129c:	4a0d      	ldr	r2, [pc, #52]	; (80012d4 <HAL_SD_MspInit+0x1d8>)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 80012a2:	2200      	movs	r2, #0
 80012a4:	2100      	movs	r1, #0
 80012a6:	2031      	movs	r0, #49	; 0x31
 80012a8:	f002 f917 	bl	80034da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 80012ac:	2031      	movs	r0, #49	; 0x31
 80012ae:	f002 f930 	bl	8003512 <HAL_NVIC_EnableIRQ>
>>>>>>> Stashed changes
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
<<<<<<< Updated upstream
 80012ae:	bf00      	nop
 80012b0:	3728      	adds	r7, #40	; 0x28
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	40012c00 	.word	0x40012c00
 80012bc:	40023800 	.word	0x40023800
 80012c0:	40020800 	.word	0x40020800
 80012c4:	40020c00 	.word	0x40020c00
 80012c8:	20000488 	.word	0x20000488
 80012cc:	40026458 	.word	0x40026458
 80012d0:	20000428 	.word	0x20000428
 80012d4:	400264a0 	.word	0x400264a0

080012d8 <MX_SPI2_Init>:
=======
 80012b2:	bf00      	nop
 80012b4:	3728      	adds	r7, #40	; 0x28
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	40012c00 	.word	0x40012c00
 80012c0:	40023800 	.word	0x40023800
 80012c4:	40020800 	.word	0x40020800
 80012c8:	40020c00 	.word	0x40020c00
 80012cc:	20000488 	.word	0x20000488
 80012d0:	40026458 	.word	0x40026458
 80012d4:	20000428 	.word	0x20000428
 80012d8:	400264a0 	.word	0x400264a0

080012dc <MX_SPI2_Init>:
>>>>>>> Stashed changes

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
<<<<<<< Updated upstream
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0
=======
 80012dc:	b580      	push	{r7, lr}
 80012de:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
<<<<<<< Updated upstream
 80012dc:	4b17      	ldr	r3, [pc, #92]	; (800133c <MX_SPI2_Init+0x64>)
 80012de:	4a18      	ldr	r2, [pc, #96]	; (8001340 <MX_SPI2_Init+0x68>)
 80012e0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80012e2:	4b16      	ldr	r3, [pc, #88]	; (800133c <MX_SPI2_Init+0x64>)
 80012e4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80012e8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80012ea:	4b14      	ldr	r3, [pc, #80]	; (800133c <MX_SPI2_Init+0x64>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80012f0:	4b12      	ldr	r3, [pc, #72]	; (800133c <MX_SPI2_Init+0x64>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80012f6:	4b11      	ldr	r3, [pc, #68]	; (800133c <MX_SPI2_Init+0x64>)
 80012f8:	2202      	movs	r2, #2
 80012fa:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 80012fc:	4b0f      	ldr	r3, [pc, #60]	; (800133c <MX_SPI2_Init+0x64>)
 80012fe:	2201      	movs	r2, #1
 8001300:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001302:	4b0e      	ldr	r3, [pc, #56]	; (800133c <MX_SPI2_Init+0x64>)
 8001304:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001308:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800130a:	4b0c      	ldr	r3, [pc, #48]	; (800133c <MX_SPI2_Init+0x64>)
 800130c:	2210      	movs	r2, #16
 800130e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001310:	4b0a      	ldr	r3, [pc, #40]	; (800133c <MX_SPI2_Init+0x64>)
 8001312:	2200      	movs	r2, #0
 8001314:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001316:	4b09      	ldr	r3, [pc, #36]	; (800133c <MX_SPI2_Init+0x64>)
 8001318:	2200      	movs	r2, #0
 800131a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800131c:	4b07      	ldr	r3, [pc, #28]	; (800133c <MX_SPI2_Init+0x64>)
 800131e:	2200      	movs	r2, #0
 8001320:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001322:	4b06      	ldr	r3, [pc, #24]	; (800133c <MX_SPI2_Init+0x64>)
 8001324:	220a      	movs	r2, #10
 8001326:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001328:	4804      	ldr	r0, [pc, #16]	; (800133c <MX_SPI2_Init+0x64>)
 800132a:	f006 f9ee 	bl	800770a <HAL_SPI_Init>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001334:	f7ff feba 	bl	80010ac <Error_Handler>
=======
 80012e0:	4b17      	ldr	r3, [pc, #92]	; (8001340 <MX_SPI2_Init+0x64>)
 80012e2:	4a18      	ldr	r2, [pc, #96]	; (8001344 <MX_SPI2_Init+0x68>)
 80012e4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80012e6:	4b16      	ldr	r3, [pc, #88]	; (8001340 <MX_SPI2_Init+0x64>)
 80012e8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80012ec:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80012ee:	4b14      	ldr	r3, [pc, #80]	; (8001340 <MX_SPI2_Init+0x64>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80012f4:	4b12      	ldr	r3, [pc, #72]	; (8001340 <MX_SPI2_Init+0x64>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80012fa:	4b11      	ldr	r3, [pc, #68]	; (8001340 <MX_SPI2_Init+0x64>)
 80012fc:	2202      	movs	r2, #2
 80012fe:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001300:	4b0f      	ldr	r3, [pc, #60]	; (8001340 <MX_SPI2_Init+0x64>)
 8001302:	2201      	movs	r2, #1
 8001304:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001306:	4b0e      	ldr	r3, [pc, #56]	; (8001340 <MX_SPI2_Init+0x64>)
 8001308:	f44f 7200 	mov.w	r2, #512	; 0x200
 800130c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800130e:	4b0c      	ldr	r3, [pc, #48]	; (8001340 <MX_SPI2_Init+0x64>)
 8001310:	2210      	movs	r2, #16
 8001312:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001314:	4b0a      	ldr	r3, [pc, #40]	; (8001340 <MX_SPI2_Init+0x64>)
 8001316:	2200      	movs	r2, #0
 8001318:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800131a:	4b09      	ldr	r3, [pc, #36]	; (8001340 <MX_SPI2_Init+0x64>)
 800131c:	2200      	movs	r2, #0
 800131e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001320:	4b07      	ldr	r3, [pc, #28]	; (8001340 <MX_SPI2_Init+0x64>)
 8001322:	2200      	movs	r2, #0
 8001324:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001326:	4b06      	ldr	r3, [pc, #24]	; (8001340 <MX_SPI2_Init+0x64>)
 8001328:	220a      	movs	r2, #10
 800132a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800132c:	4804      	ldr	r0, [pc, #16]	; (8001340 <MX_SPI2_Init+0x64>)
 800132e:	f006 f9d4 	bl	80076da <HAL_SPI_Init>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001338:	f7ff feba 	bl	80010b0 <Error_Handler>
>>>>>>> Stashed changes
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
<<<<<<< Updated upstream
 8001338:	bf00      	nop
 800133a:	bd80      	pop	{r7, pc}
 800133c:	2000056c 	.word	0x2000056c
 8001340:	40003800 	.word	0x40003800

08001344 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b08a      	sub	sp, #40	; 0x28
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800134c:	f107 0314 	add.w	r3, r7, #20
 8001350:	2200      	movs	r2, #0
 8001352:	601a      	str	r2, [r3, #0]
 8001354:	605a      	str	r2, [r3, #4]
 8001356:	609a      	str	r2, [r3, #8]
 8001358:	60da      	str	r2, [r3, #12]
 800135a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a19      	ldr	r2, [pc, #100]	; (80013c8 <HAL_SPI_MspInit+0x84>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d12c      	bne.n	80013c0 <HAL_SPI_MspInit+0x7c>
=======
 800133c:	bf00      	nop
 800133e:	bd80      	pop	{r7, pc}
 8001340:	2000056c 	.word	0x2000056c
 8001344:	40003800 	.word	0x40003800

08001348 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b08a      	sub	sp, #40	; 0x28
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001350:	f107 0314 	add.w	r3, r7, #20
 8001354:	2200      	movs	r2, #0
 8001356:	601a      	str	r2, [r3, #0]
 8001358:	605a      	str	r2, [r3, #4]
 800135a:	609a      	str	r2, [r3, #8]
 800135c:	60da      	str	r2, [r3, #12]
 800135e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a19      	ldr	r2, [pc, #100]	; (80013cc <HAL_SPI_MspInit+0x84>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d12c      	bne.n	80013c4 <HAL_SPI_MspInit+0x7c>
>>>>>>> Stashed changes
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
<<<<<<< Updated upstream
 8001366:	2300      	movs	r3, #0
 8001368:	613b      	str	r3, [r7, #16]
 800136a:	4b18      	ldr	r3, [pc, #96]	; (80013cc <HAL_SPI_MspInit+0x88>)
 800136c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136e:	4a17      	ldr	r2, [pc, #92]	; (80013cc <HAL_SPI_MspInit+0x88>)
 8001370:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001374:	6413      	str	r3, [r2, #64]	; 0x40
 8001376:	4b15      	ldr	r3, [pc, #84]	; (80013cc <HAL_SPI_MspInit+0x88>)
 8001378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800137e:	613b      	str	r3, [r7, #16]
 8001380:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001382:	2300      	movs	r3, #0
 8001384:	60fb      	str	r3, [r7, #12]
 8001386:	4b11      	ldr	r3, [pc, #68]	; (80013cc <HAL_SPI_MspInit+0x88>)
 8001388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138a:	4a10      	ldr	r2, [pc, #64]	; (80013cc <HAL_SPI_MspInit+0x88>)
 800138c:	f043 0302 	orr.w	r3, r3, #2
 8001390:	6313      	str	r3, [r2, #48]	; 0x30
 8001392:	4b0e      	ldr	r3, [pc, #56]	; (80013cc <HAL_SPI_MspInit+0x88>)
 8001394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001396:	f003 0302 	and.w	r3, r3, #2
 800139a:	60fb      	str	r3, [r7, #12]
 800139c:	68fb      	ldr	r3, [r7, #12]
=======
 800136a:	2300      	movs	r3, #0
 800136c:	613b      	str	r3, [r7, #16]
 800136e:	4b18      	ldr	r3, [pc, #96]	; (80013d0 <HAL_SPI_MspInit+0x88>)
 8001370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001372:	4a17      	ldr	r2, [pc, #92]	; (80013d0 <HAL_SPI_MspInit+0x88>)
 8001374:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001378:	6413      	str	r3, [r2, #64]	; 0x40
 800137a:	4b15      	ldr	r3, [pc, #84]	; (80013d0 <HAL_SPI_MspInit+0x88>)
 800137c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001382:	613b      	str	r3, [r7, #16]
 8001384:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001386:	2300      	movs	r3, #0
 8001388:	60fb      	str	r3, [r7, #12]
 800138a:	4b11      	ldr	r3, [pc, #68]	; (80013d0 <HAL_SPI_MspInit+0x88>)
 800138c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138e:	4a10      	ldr	r2, [pc, #64]	; (80013d0 <HAL_SPI_MspInit+0x88>)
 8001390:	f043 0302 	orr.w	r3, r3, #2
 8001394:	6313      	str	r3, [r2, #48]	; 0x30
 8001396:	4b0e      	ldr	r3, [pc, #56]	; (80013d0 <HAL_SPI_MspInit+0x88>)
 8001398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139a:	f003 0302 	and.w	r3, r3, #2
 800139e:	60fb      	str	r3, [r7, #12]
 80013a0:	68fb      	ldr	r3, [r7, #12]
>>>>>>> Stashed changes
    /**SPI2 GPIO Configuration
    PB10     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
<<<<<<< Updated upstream
 800139e:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 80013a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a4:	2302      	movs	r3, #2
 80013a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a8:	2300      	movs	r3, #0
 80013aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ac:	2303      	movs	r3, #3
 80013ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80013b0:	2305      	movs	r3, #5
 80013b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013b4:	f107 0314 	add.w	r3, r7, #20
 80013b8:	4619      	mov	r1, r3
 80013ba:	4805      	ldr	r0, [pc, #20]	; (80013d0 <HAL_SPI_MspInit+0x8c>)
 80013bc:	f003 fde2 	bl	8004f84 <HAL_GPIO_Init>
=======
 80013a2:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 80013a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a8:	2302      	movs	r3, #2
 80013aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ac:	2300      	movs	r3, #0
 80013ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013b0:	2303      	movs	r3, #3
 80013b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80013b4:	2305      	movs	r3, #5
 80013b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013b8:	f107 0314 	add.w	r3, r7, #20
 80013bc:	4619      	mov	r1, r3
 80013be:	4805      	ldr	r0, [pc, #20]	; (80013d4 <HAL_SPI_MspInit+0x8c>)
 80013c0:	f003 fde2 	bl	8004f88 <HAL_GPIO_Init>
>>>>>>> Stashed changes

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
<<<<<<< Updated upstream
 80013c0:	bf00      	nop
 80013c2:	3728      	adds	r7, #40	; 0x28
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	40003800 	.word	0x40003800
 80013cc:	40023800 	.word	0x40023800
 80013d0:	40020400 	.word	0x40020400

080013d4 <HAL_MspInit>:
=======
 80013c4:	bf00      	nop
 80013c6:	3728      	adds	r7, #40	; 0x28
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	40003800 	.word	0x40003800
 80013d0:	40023800 	.word	0x40023800
 80013d4:	40020400 	.word	0x40020400

080013d8 <HAL_MspInit>:
>>>>>>> Stashed changes
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
<<<<<<< Updated upstream
 80013d4:	b480      	push	{r7}
 80013d6:	b083      	sub	sp, #12
 80013d8:	af00      	add	r7, sp, #0
=======
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
<<<<<<< Updated upstream
 80013da:	2300      	movs	r3, #0
 80013dc:	607b      	str	r3, [r7, #4]
 80013de:	4b10      	ldr	r3, [pc, #64]	; (8001420 <HAL_MspInit+0x4c>)
 80013e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013e2:	4a0f      	ldr	r2, [pc, #60]	; (8001420 <HAL_MspInit+0x4c>)
 80013e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013e8:	6453      	str	r3, [r2, #68]	; 0x44
 80013ea:	4b0d      	ldr	r3, [pc, #52]	; (8001420 <HAL_MspInit+0x4c>)
 80013ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013f2:	607b      	str	r3, [r7, #4]
 80013f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013f6:	2300      	movs	r3, #0
 80013f8:	603b      	str	r3, [r7, #0]
 80013fa:	4b09      	ldr	r3, [pc, #36]	; (8001420 <HAL_MspInit+0x4c>)
 80013fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fe:	4a08      	ldr	r2, [pc, #32]	; (8001420 <HAL_MspInit+0x4c>)
 8001400:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001404:	6413      	str	r3, [r2, #64]	; 0x40
 8001406:	4b06      	ldr	r3, [pc, #24]	; (8001420 <HAL_MspInit+0x4c>)
 8001408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800140e:	603b      	str	r3, [r7, #0]
 8001410:	683b      	ldr	r3, [r7, #0]
=======
 80013de:	2300      	movs	r3, #0
 80013e0:	607b      	str	r3, [r7, #4]
 80013e2:	4b10      	ldr	r3, [pc, #64]	; (8001424 <HAL_MspInit+0x4c>)
 80013e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013e6:	4a0f      	ldr	r2, [pc, #60]	; (8001424 <HAL_MspInit+0x4c>)
 80013e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013ec:	6453      	str	r3, [r2, #68]	; 0x44
 80013ee:	4b0d      	ldr	r3, [pc, #52]	; (8001424 <HAL_MspInit+0x4c>)
 80013f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013f6:	607b      	str	r3, [r7, #4]
 80013f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013fa:	2300      	movs	r3, #0
 80013fc:	603b      	str	r3, [r7, #0]
 80013fe:	4b09      	ldr	r3, [pc, #36]	; (8001424 <HAL_MspInit+0x4c>)
 8001400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001402:	4a08      	ldr	r2, [pc, #32]	; (8001424 <HAL_MspInit+0x4c>)
 8001404:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001408:	6413      	str	r3, [r2, #64]	; 0x40
 800140a:	4b06      	ldr	r3, [pc, #24]	; (8001424 <HAL_MspInit+0x4c>)
 800140c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001412:	603b      	str	r3, [r7, #0]
 8001414:	683b      	ldr	r3, [r7, #0]
>>>>>>> Stashed changes
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
<<<<<<< Updated upstream
 8001412:	bf00      	nop
 8001414:	370c      	adds	r7, #12
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr
 800141e:	bf00      	nop
 8001420:	40023800 	.word	0x40023800

08001424 <NMI_Handler>:
=======
 8001416:	bf00      	nop
 8001418:	370c      	adds	r7, #12
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	40023800 	.word	0x40023800

08001428 <NMI_Handler>:
>>>>>>> Stashed changes
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
<<<<<<< Updated upstream
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
=======
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
<<<<<<< Updated upstream
 8001428:	e7fe      	b.n	8001428 <NMI_Handler+0x4>

0800142a <HardFault_Handler>:
=======
 800142c:	e7fe      	b.n	800142c <NMI_Handler+0x4>

0800142e <HardFault_Handler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
<<<<<<< Updated upstream
 800142a:	b480      	push	{r7}
 800142c:	af00      	add	r7, sp, #0
=======
 800142e:	b480      	push	{r7}
 8001430:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
<<<<<<< Updated upstream
 800142e:	e7fe      	b.n	800142e <HardFault_Handler+0x4>

08001430 <MemManage_Handler>:
=======
 8001432:	e7fe      	b.n	8001432 <HardFault_Handler+0x4>

08001434 <MemManage_Handler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
<<<<<<< Updated upstream
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
=======
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
<<<<<<< Updated upstream
 8001434:	e7fe      	b.n	8001434 <MemManage_Handler+0x4>

08001436 <BusFault_Handler>:
=======
 8001438:	e7fe      	b.n	8001438 <MemManage_Handler+0x4>

0800143a <BusFault_Handler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
<<<<<<< Updated upstream
 8001436:	b480      	push	{r7}
 8001438:	af00      	add	r7, sp, #0
=======
 800143a:	b480      	push	{r7}
 800143c:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
<<<<<<< Updated upstream
 800143a:	e7fe      	b.n	800143a <BusFault_Handler+0x4>

0800143c <UsageFault_Handler>:
=======
 800143e:	e7fe      	b.n	800143e <BusFault_Handler+0x4>

08001440 <UsageFault_Handler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
<<<<<<< Updated upstream
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
=======
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
<<<<<<< Updated upstream
 8001440:	e7fe      	b.n	8001440 <UsageFault_Handler+0x4>

08001442 <SVC_Handler>:
=======
 8001444:	e7fe      	b.n	8001444 <UsageFault_Handler+0x4>

08001446 <SVC_Handler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
<<<<<<< Updated upstream
 8001442:	b480      	push	{r7}
 8001444:	af00      	add	r7, sp, #0
=======
 8001446:	b480      	push	{r7}
 8001448:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
<<<<<<< Updated upstream
 8001446:	bf00      	nop
 8001448:	46bd      	mov	sp, r7
 800144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144e:	4770      	bx	lr

08001450 <DebugMon_Handler>:
=======
 800144a:	bf00      	nop
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr

08001454 <DebugMon_Handler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
<<<<<<< Updated upstream
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
=======
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
<<<<<<< Updated upstream
 8001454:	bf00      	nop
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr

0800145e <PendSV_Handler>:
=======
 8001458:	bf00      	nop
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr

08001462 <PendSV_Handler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
<<<<<<< Updated upstream
 800145e:	b480      	push	{r7}
 8001460:	af00      	add	r7, sp, #0
=======
 8001462:	b480      	push	{r7}
 8001464:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
<<<<<<< Updated upstream
 8001462:	bf00      	nop
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr

0800146c <SysTick_Handler>:
=======
 8001466:	bf00      	nop
 8001468:	46bd      	mov	sp, r7
 800146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146e:	4770      	bx	lr

08001470 <SysTick_Handler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
<<<<<<< Updated upstream
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
=======
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
<<<<<<< Updated upstream
 8001470:	f000 fe08 	bl	8002084 <HAL_IncTick>
=======
 8001474:	f000 fe08 	bl	8002088 <HAL_IncTick>
>>>>>>> Stashed changes
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
<<<<<<< Updated upstream
 8001474:	bf00      	nop
 8001476:	bd80      	pop	{r7, pc}

08001478 <CAN1_RX0_IRQHandler>:
=======
 8001478:	bf00      	nop
 800147a:	bd80      	pop	{r7, pc}

0800147c <CAN1_RX0_IRQHandler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
<<<<<<< Updated upstream
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
=======
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
<<<<<<< Updated upstream
 800147c:	4802      	ldr	r0, [pc, #8]	; (8001488 <CAN1_RX0_IRQHandler+0x10>)
 800147e:	f001 fd1f 	bl	8002ec0 <HAL_CAN_IRQHandler>
=======
 8001480:	4802      	ldr	r0, [pc, #8]	; (800148c <CAN1_RX0_IRQHandler+0x10>)
 8001482:	f001 fd1f 	bl	8002ec4 <HAL_CAN_IRQHandler>
>>>>>>> Stashed changes
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
<<<<<<< Updated upstream
 8001482:	bf00      	nop
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	20000344 	.word	0x20000344

0800148c <TIM4_IRQHandler>:
=======
 8001486:	bf00      	nop
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	20000344 	.word	0x20000344

08001490 <TIM4_IRQHandler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
<<<<<<< Updated upstream
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
=======
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
<<<<<<< Updated upstream
 8001490:	4802      	ldr	r0, [pc, #8]	; (800149c <TIM4_IRQHandler+0x10>)
 8001492:	f006 fa6b 	bl	800796c <HAL_TIM_IRQHandler>
=======
 8001494:	4802      	ldr	r0, [pc, #8]	; (80014a0 <TIM4_IRQHandler+0x10>)
 8001496:	f006 fa51 	bl	800793c <HAL_TIM_IRQHandler>
>>>>>>> Stashed changes
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
<<<<<<< Updated upstream
 8001496:	bf00      	nop
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	200005c4 	.word	0x200005c4

080014a0 <USART3_IRQHandler>:
=======
 800149a:	bf00      	nop
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	200005c4 	.word	0x200005c4

080014a4 <USART3_IRQHandler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
<<<<<<< Updated upstream
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0
=======
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
<<<<<<< Updated upstream
 80014a4:	4802      	ldr	r0, [pc, #8]	; (80014b0 <USART3_IRQHandler+0x10>)
 80014a6:	f007 f97f 	bl	80087a8 <HAL_UART_IRQHandler>
=======
 80014a8:	4802      	ldr	r0, [pc, #8]	; (80014b4 <USART3_IRQHandler+0x10>)
 80014aa:	f007 f965 	bl	8008778 <HAL_UART_IRQHandler>
>>>>>>> Stashed changes
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
<<<<<<< Updated upstream
 80014aa:	bf00      	nop
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	20000774 	.word	0x20000774

080014b4 <EXTI15_10_IRQHandler>:
=======
 80014ae:	bf00      	nop
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	20000774 	.word	0x20000774

080014b8 <EXTI15_10_IRQHandler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
<<<<<<< Updated upstream
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
=======
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
<<<<<<< Updated upstream
 80014b8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80014bc:	f003 ff5a 	bl	8005374 <HAL_GPIO_EXTI_IRQHandler>
=======
 80014bc:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80014c0:	f003 ff40 	bl	8005344 <HAL_GPIO_EXTI_IRQHandler>
>>>>>>> Stashed changes
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
<<<<<<< Updated upstream
 80014c0:	bf00      	nop
 80014c2:	bd80      	pop	{r7, pc}

080014c4 <SDIO_IRQHandler>:
=======
 80014c4:	bf00      	nop
 80014c6:	bd80      	pop	{r7, pc}

080014c8 <SDIO_IRQHandler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
<<<<<<< Updated upstream
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0
=======
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
<<<<<<< Updated upstream
 80014c8:	4802      	ldr	r0, [pc, #8]	; (80014d4 <SDIO_IRQHandler+0x10>)
 80014ca:	f005 f865 	bl	8006598 <HAL_SD_IRQHandler>
=======
 80014cc:	4802      	ldr	r0, [pc, #8]	; (80014d8 <SDIO_IRQHandler+0x10>)
 80014ce:	f005 f84b 	bl	8006568 <HAL_SD_IRQHandler>
>>>>>>> Stashed changes
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
<<<<<<< Updated upstream
 80014ce:	bf00      	nop
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	200004e8 	.word	0x200004e8

080014d8 <TIM7_IRQHandler>:
=======
 80014d2:	bf00      	nop
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	200004e8 	.word	0x200004e8

080014dc <TIM7_IRQHandler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
<<<<<<< Updated upstream
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
=======
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
<<<<<<< Updated upstream
 80014dc:	4802      	ldr	r0, [pc, #8]	; (80014e8 <TIM7_IRQHandler+0x10>)
 80014de:	f006 fa45 	bl	800796c <HAL_TIM_IRQHandler>
=======
 80014e0:	4802      	ldr	r0, [pc, #8]	; (80014ec <TIM7_IRQHandler+0x10>)
 80014e2:	f006 fa2b 	bl	800793c <HAL_TIM_IRQHandler>
>>>>>>> Stashed changes
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
<<<<<<< Updated upstream
 80014e2:	bf00      	nop
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	2000072c 	.word	0x2000072c

080014ec <DMA2_Stream0_IRQHandler>:
=======
 80014e6:	bf00      	nop
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	2000072c 	.word	0x2000072c

080014f0 <DMA2_Stream0_IRQHandler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
<<<<<<< Updated upstream
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0
=======
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
<<<<<<< Updated upstream
 80014f0:	4802      	ldr	r0, [pc, #8]	; (80014fc <DMA2_Stream0_IRQHandler+0x10>)
 80014f2:	f002 fa2f 	bl	8003954 <HAL_DMA_IRQHandler>
=======
 80014f4:	4802      	ldr	r0, [pc, #8]	; (8001500 <DMA2_Stream0_IRQHandler+0x10>)
 80014f6:	f002 fa2f 	bl	8003958 <HAL_DMA_IRQHandler>
>>>>>>> Stashed changes
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
<<<<<<< Updated upstream
 80014f6:	bf00      	nop
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	20000274 	.word	0x20000274

08001500 <DMA2_Stream3_IRQHandler>:
=======
 80014fa:	bf00      	nop
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	20000274 	.word	0x20000274

08001504 <DMA2_Stream3_IRQHandler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
<<<<<<< Updated upstream
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
=======
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
<<<<<<< Updated upstream
 8001504:	4802      	ldr	r0, [pc, #8]	; (8001510 <DMA2_Stream3_IRQHandler+0x10>)
 8001506:	f002 fa25 	bl	8003954 <HAL_DMA_IRQHandler>
=======
 8001508:	4802      	ldr	r0, [pc, #8]	; (8001514 <DMA2_Stream3_IRQHandler+0x10>)
 800150a:	f002 fa25 	bl	8003958 <HAL_DMA_IRQHandler>
>>>>>>> Stashed changes
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
<<<<<<< Updated upstream
 800150a:	bf00      	nop
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	20000488 	.word	0x20000488

08001514 <DMA2_Stream6_IRQHandler>:
=======
 800150e:	bf00      	nop
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	20000488 	.word	0x20000488

08001518 <DMA2_Stream6_IRQHandler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
<<<<<<< Updated upstream
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
=======
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
<<<<<<< Updated upstream
 8001518:	4802      	ldr	r0, [pc, #8]	; (8001524 <DMA2_Stream6_IRQHandler+0x10>)
 800151a:	f002 fa1b 	bl	8003954 <HAL_DMA_IRQHandler>
=======
 800151c:	4802      	ldr	r0, [pc, #8]	; (8001528 <DMA2_Stream6_IRQHandler+0x10>)
 800151e:	f002 fa1b 	bl	8003958 <HAL_DMA_IRQHandler>
>>>>>>> Stashed changes
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
<<<<<<< Updated upstream
 800151e:	bf00      	nop
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	20000428 	.word	0x20000428

08001528 <_getpid>:
=======
 8001522:	bf00      	nop
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	20000428 	.word	0x20000428

0800152c <_getpid>:
>>>>>>> Stashed changes
void initialise_monitor_handles()
{
}

int _getpid(void)
{
<<<<<<< Updated upstream
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
	return 1;
 800152c:	2301      	movs	r3, #1
}
 800152e:	4618      	mov	r0, r3
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr

08001538 <_kill>:

int _kill(int pid, int sig)
{
 8001538:	b480      	push	{r7}
 800153a:	b083      	sub	sp, #12
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
 8001540:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001542:	4b05      	ldr	r3, [pc, #20]	; (8001558 <_kill+0x20>)
 8001544:	2216      	movs	r2, #22
 8001546:	601a      	str	r2, [r3, #0]
	return -1;
 8001548:	f04f 33ff 	mov.w	r3, #4294967295
}
 800154c:	4618      	mov	r0, r3
 800154e:	370c      	adds	r7, #12
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr
 8001558:	200072bc 	.word	0x200072bc

0800155c <_exit>:

void _exit (int status)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b082      	sub	sp, #8
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001564:	f04f 31ff 	mov.w	r1, #4294967295
 8001568:	6878      	ldr	r0, [r7, #4]
 800156a:	f7ff ffe5 	bl	8001538 <_kill>
	while (1) {}		/* Make sure we hang here */
 800156e:	e7fe      	b.n	800156e <_exit+0x12>

08001570 <_read>:
=======
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
	return 1;
 8001530:	2301      	movs	r3, #1
}
 8001532:	4618      	mov	r0, r3
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr

0800153c <_kill>:

int _kill(int pid, int sig)
{
 800153c:	b480      	push	{r7}
 800153e:	b083      	sub	sp, #12
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
 8001544:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001546:	4b05      	ldr	r3, [pc, #20]	; (800155c <_kill+0x20>)
 8001548:	2216      	movs	r2, #22
 800154a:	601a      	str	r2, [r3, #0]
	return -1;
 800154c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001550:	4618      	mov	r0, r3
 8001552:	370c      	adds	r7, #12
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr
 800155c:	200072bc 	.word	0x200072bc

08001560 <_exit>:

void _exit (int status)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001568:	f04f 31ff 	mov.w	r1, #4294967295
 800156c:	6878      	ldr	r0, [r7, #4]
 800156e:	f7ff ffe5 	bl	800153c <_kill>
	while (1) {}		/* Make sure we hang here */
 8001572:	e7fe      	b.n	8001572 <_exit+0x12>

08001574 <_read>:
>>>>>>> Stashed changes
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
<<<<<<< Updated upstream
 8001570:	b580      	push	{r7, lr}
 8001572:	b086      	sub	sp, #24
 8001574:	af00      	add	r7, sp, #0
 8001576:	60f8      	str	r0, [r7, #12]
 8001578:	60b9      	str	r1, [r7, #8]
 800157a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800157c:	2300      	movs	r3, #0
 800157e:	617b      	str	r3, [r7, #20]
 8001580:	e00a      	b.n	8001598 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001582:	f3af 8000 	nop.w
 8001586:	4601      	mov	r1, r0
 8001588:	68bb      	ldr	r3, [r7, #8]
 800158a:	1c5a      	adds	r2, r3, #1
 800158c:	60ba      	str	r2, [r7, #8]
 800158e:	b2ca      	uxtb	r2, r1
 8001590:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001592:	697b      	ldr	r3, [r7, #20]
 8001594:	3301      	adds	r3, #1
 8001596:	617b      	str	r3, [r7, #20]
 8001598:	697a      	ldr	r2, [r7, #20]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	429a      	cmp	r2, r3
 800159e:	dbf0      	blt.n	8001582 <_read+0x12>
	}

return len;
 80015a0:	687b      	ldr	r3, [r7, #4]
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	3718      	adds	r7, #24
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}

080015aa <_close>:
=======
 8001574:	b580      	push	{r7, lr}
 8001576:	b086      	sub	sp, #24
 8001578:	af00      	add	r7, sp, #0
 800157a:	60f8      	str	r0, [r7, #12]
 800157c:	60b9      	str	r1, [r7, #8]
 800157e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001580:	2300      	movs	r3, #0
 8001582:	617b      	str	r3, [r7, #20]
 8001584:	e00a      	b.n	800159c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001586:	f3af 8000 	nop.w
 800158a:	4601      	mov	r1, r0
 800158c:	68bb      	ldr	r3, [r7, #8]
 800158e:	1c5a      	adds	r2, r3, #1
 8001590:	60ba      	str	r2, [r7, #8]
 8001592:	b2ca      	uxtb	r2, r1
 8001594:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001596:	697b      	ldr	r3, [r7, #20]
 8001598:	3301      	adds	r3, #1
 800159a:	617b      	str	r3, [r7, #20]
 800159c:	697a      	ldr	r2, [r7, #20]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	429a      	cmp	r2, r3
 80015a2:	dbf0      	blt.n	8001586 <_read+0x12>
	}

return len;
 80015a4:	687b      	ldr	r3, [r7, #4]
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	3718      	adds	r7, #24
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}

080015ae <_close>:
>>>>>>> Stashed changes
	}
	return len;
}

int _close(int file)
{
<<<<<<< Updated upstream
 80015aa:	b480      	push	{r7}
 80015ac:	b083      	sub	sp, #12
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	6078      	str	r0, [r7, #4]
	return -1;
 80015b2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	370c      	adds	r7, #12
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr

080015c2 <_fstat>:
=======
 80015ae:	b480      	push	{r7}
 80015b0:	b083      	sub	sp, #12
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	6078      	str	r0, [r7, #4]
	return -1;
 80015b6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	370c      	adds	r7, #12
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr

080015c6 <_fstat>:
>>>>>>> Stashed changes


int _fstat(int file, struct stat *st)
{
<<<<<<< Updated upstream
 80015c2:	b480      	push	{r7}
 80015c4:	b083      	sub	sp, #12
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	6078      	str	r0, [r7, #4]
 80015ca:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015d2:	605a      	str	r2, [r3, #4]
	return 0;
 80015d4:	2300      	movs	r3, #0
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	370c      	adds	r7, #12
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr

080015e2 <_isatty>:

int _isatty(int file)
{
 80015e2:	b480      	push	{r7}
 80015e4:	b083      	sub	sp, #12
 80015e6:	af00      	add	r7, sp, #0
 80015e8:	6078      	str	r0, [r7, #4]
	return 1;
 80015ea:	2301      	movs	r3, #1
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	370c      	adds	r7, #12
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr

080015f8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b085      	sub	sp, #20
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	60f8      	str	r0, [r7, #12]
 8001600:	60b9      	str	r1, [r7, #8]
 8001602:	607a      	str	r2, [r7, #4]
	return 0;
 8001604:	2300      	movs	r3, #0
}
 8001606:	4618      	mov	r0, r3
 8001608:	3714      	adds	r7, #20
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr
	...

08001614 <_sbrk>:
=======
 80015c6:	b480      	push	{r7}
 80015c8:	b083      	sub	sp, #12
 80015ca:	af00      	add	r7, sp, #0
 80015cc:	6078      	str	r0, [r7, #4]
 80015ce:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015d6:	605a      	str	r2, [r3, #4]
	return 0;
 80015d8:	2300      	movs	r3, #0
}
 80015da:	4618      	mov	r0, r3
 80015dc:	370c      	adds	r7, #12
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr

080015e6 <_isatty>:

int _isatty(int file)
{
 80015e6:	b480      	push	{r7}
 80015e8:	b083      	sub	sp, #12
 80015ea:	af00      	add	r7, sp, #0
 80015ec:	6078      	str	r0, [r7, #4]
	return 1;
 80015ee:	2301      	movs	r3, #1
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	370c      	adds	r7, #12
 80015f4:	46bd      	mov	sp, r7
 80015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fa:	4770      	bx	lr

080015fc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b085      	sub	sp, #20
 8001600:	af00      	add	r7, sp, #0
 8001602:	60f8      	str	r0, [r7, #12]
 8001604:	60b9      	str	r1, [r7, #8]
 8001606:	607a      	str	r2, [r7, #4]
	return 0;
 8001608:	2300      	movs	r3, #0
}
 800160a:	4618      	mov	r0, r3
 800160c:	3714      	adds	r7, #20
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr
	...

08001618 <_sbrk>:
>>>>>>> Stashed changes
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
<<<<<<< Updated upstream
 8001614:	b480      	push	{r7}
 8001616:	b087      	sub	sp, #28
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
=======
 8001618:	b480      	push	{r7}
 800161a:	b087      	sub	sp, #28
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
<<<<<<< Updated upstream
 800161c:	4a14      	ldr	r2, [pc, #80]	; (8001670 <_sbrk+0x5c>)
 800161e:	4b15      	ldr	r3, [pc, #84]	; (8001674 <_sbrk+0x60>)
 8001620:	1ad3      	subs	r3, r2, r3
 8001622:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	613b      	str	r3, [r7, #16]
=======
 8001620:	4a14      	ldr	r2, [pc, #80]	; (8001674 <_sbrk+0x5c>)
 8001622:	4b15      	ldr	r3, [pc, #84]	; (8001678 <_sbrk+0x60>)
 8001624:	1ad3      	subs	r3, r2, r3
 8001626:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	613b      	str	r3, [r7, #16]
>>>>>>> Stashed changes
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
<<<<<<< Updated upstream
 8001628:	4b13      	ldr	r3, [pc, #76]	; (8001678 <_sbrk+0x64>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d102      	bne.n	8001636 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001630:	4b11      	ldr	r3, [pc, #68]	; (8001678 <_sbrk+0x64>)
 8001632:	4a12      	ldr	r2, [pc, #72]	; (800167c <_sbrk+0x68>)
 8001634:	601a      	str	r2, [r3, #0]
=======
 800162c:	4b13      	ldr	r3, [pc, #76]	; (800167c <_sbrk+0x64>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d102      	bne.n	800163a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001634:	4b11      	ldr	r3, [pc, #68]	; (800167c <_sbrk+0x64>)
 8001636:	4a12      	ldr	r2, [pc, #72]	; (8001680 <_sbrk+0x68>)
 8001638:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
<<<<<<< Updated upstream
 8001636:	4b10      	ldr	r3, [pc, #64]	; (8001678 <_sbrk+0x64>)
 8001638:	681a      	ldr	r2, [r3, #0]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	4413      	add	r3, r2
 800163e:	693a      	ldr	r2, [r7, #16]
 8001640:	429a      	cmp	r2, r3
 8001642:	d205      	bcs.n	8001650 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001644:	4b0e      	ldr	r3, [pc, #56]	; (8001680 <_sbrk+0x6c>)
 8001646:	220c      	movs	r2, #12
 8001648:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800164a:	f04f 33ff 	mov.w	r3, #4294967295
 800164e:	e009      	b.n	8001664 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001650:	4b09      	ldr	r3, [pc, #36]	; (8001678 <_sbrk+0x64>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001656:	4b08      	ldr	r3, [pc, #32]	; (8001678 <_sbrk+0x64>)
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	4413      	add	r3, r2
 800165e:	4a06      	ldr	r2, [pc, #24]	; (8001678 <_sbrk+0x64>)
 8001660:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001662:	68fb      	ldr	r3, [r7, #12]
}
 8001664:	4618      	mov	r0, r3
 8001666:	371c      	adds	r7, #28
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr
 8001670:	20030000 	.word	0x20030000
 8001674:	00000400 	.word	0x00000400
 8001678:	2000009c 	.word	0x2000009c
 800167c:	200072d0 	.word	0x200072d0
 8001680:	200072bc 	.word	0x200072bc

08001684 <SystemInit>:
=======
 800163a:	4b10      	ldr	r3, [pc, #64]	; (800167c <_sbrk+0x64>)
 800163c:	681a      	ldr	r2, [r3, #0]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	4413      	add	r3, r2
 8001642:	693a      	ldr	r2, [r7, #16]
 8001644:	429a      	cmp	r2, r3
 8001646:	d205      	bcs.n	8001654 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001648:	4b0e      	ldr	r3, [pc, #56]	; (8001684 <_sbrk+0x6c>)
 800164a:	220c      	movs	r2, #12
 800164c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800164e:	f04f 33ff 	mov.w	r3, #4294967295
 8001652:	e009      	b.n	8001668 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001654:	4b09      	ldr	r3, [pc, #36]	; (800167c <_sbrk+0x64>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800165a:	4b08      	ldr	r3, [pc, #32]	; (800167c <_sbrk+0x64>)
 800165c:	681a      	ldr	r2, [r3, #0]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	4413      	add	r3, r2
 8001662:	4a06      	ldr	r2, [pc, #24]	; (800167c <_sbrk+0x64>)
 8001664:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001666:	68fb      	ldr	r3, [r7, #12]
}
 8001668:	4618      	mov	r0, r3
 800166a:	371c      	adds	r7, #28
 800166c:	46bd      	mov	sp, r7
 800166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001672:	4770      	bx	lr
 8001674:	20030000 	.word	0x20030000
 8001678:	00000400 	.word	0x00000400
 800167c:	2000009c 	.word	0x2000009c
 8001680:	200072d0 	.word	0x200072d0
 8001684:	200072bc 	.word	0x200072bc

08001688 <SystemInit>:
>>>>>>> Stashed changes
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
<<<<<<< Updated upstream
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001688:	4b06      	ldr	r3, [pc, #24]	; (80016a4 <SystemInit+0x20>)
 800168a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800168e:	4a05      	ldr	r2, [pc, #20]	; (80016a4 <SystemInit+0x20>)
 8001690:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001694:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
=======
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800168c:	4b06      	ldr	r3, [pc, #24]	; (80016a8 <SystemInit+0x20>)
 800168e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001692:	4a05      	ldr	r2, [pc, #20]	; (80016a8 <SystemInit+0x20>)
 8001694:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001698:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
>>>>>>> Stashed changes

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
<<<<<<< Updated upstream
 8001698:	bf00      	nop
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr
 80016a2:	bf00      	nop
 80016a4:	e000ed00 	.word	0xe000ed00

080016a8 <MX_TIM2_Init>:
=======
 800169c:	bf00      	nop
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr
 80016a6:	bf00      	nop
 80016a8:	e000ed00 	.word	0xe000ed00

080016ac <MX_TIM2_Init>:
>>>>>>> Stashed changes
TIM_HandleTypeDef htim7;
TIM_HandleTypeDef htim10;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
<<<<<<< Updated upstream
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b08e      	sub	sp, #56	; 0x38
 80016ac:	af00      	add	r7, sp, #0
=======
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b08e      	sub	sp, #56	; 0x38
 80016b0:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
<<<<<<< Updated upstream
 80016ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016b2:	2200      	movs	r2, #0
 80016b4:	601a      	str	r2, [r3, #0]
 80016b6:	605a      	str	r2, [r3, #4]
 80016b8:	609a      	str	r2, [r3, #8]
 80016ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016bc:	f107 0320 	add.w	r3, r7, #32
 80016c0:	2200      	movs	r2, #0
 80016c2:	601a      	str	r2, [r3, #0]
 80016c4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016c6:	1d3b      	adds	r3, r7, #4
 80016c8:	2200      	movs	r2, #0
 80016ca:	601a      	str	r2, [r3, #0]
 80016cc:	605a      	str	r2, [r3, #4]
 80016ce:	609a      	str	r2, [r3, #8]
 80016d0:	60da      	str	r2, [r3, #12]
 80016d2:	611a      	str	r2, [r3, #16]
 80016d4:	615a      	str	r2, [r3, #20]
 80016d6:	619a      	str	r2, [r3, #24]
=======
 80016b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016b6:	2200      	movs	r2, #0
 80016b8:	601a      	str	r2, [r3, #0]
 80016ba:	605a      	str	r2, [r3, #4]
 80016bc:	609a      	str	r2, [r3, #8]
 80016be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016c0:	f107 0320 	add.w	r3, r7, #32
 80016c4:	2200      	movs	r2, #0
 80016c6:	601a      	str	r2, [r3, #0]
 80016c8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016ca:	1d3b      	adds	r3, r7, #4
 80016cc:	2200      	movs	r2, #0
 80016ce:	601a      	str	r2, [r3, #0]
 80016d0:	605a      	str	r2, [r3, #4]
 80016d2:	609a      	str	r2, [r3, #8]
 80016d4:	60da      	str	r2, [r3, #12]
 80016d6:	611a      	str	r2, [r3, #16]
 80016d8:	615a      	str	r2, [r3, #20]
 80016da:	619a      	str	r2, [r3, #24]
>>>>>>> Stashed changes

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
<<<<<<< Updated upstream
 80016d8:	4b2d      	ldr	r3, [pc, #180]	; (8001790 <MX_TIM2_Init+0xe8>)
 80016da:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016de:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 180-1;
 80016e0:	4b2b      	ldr	r3, [pc, #172]	; (8001790 <MX_TIM2_Init+0xe8>)
 80016e2:	22b3      	movs	r2, #179	; 0xb3
 80016e4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016e6:	4b2a      	ldr	r3, [pc, #168]	; (8001790 <MX_TIM2_Init+0xe8>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 80016ec:	4b28      	ldr	r3, [pc, #160]	; (8001790 <MX_TIM2_Init+0xe8>)
 80016ee:	f240 32e7 	movw	r2, #999	; 0x3e7
 80016f2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016f4:	4b26      	ldr	r3, [pc, #152]	; (8001790 <MX_TIM2_Init+0xe8>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016fa:	4b25      	ldr	r3, [pc, #148]	; (8001790 <MX_TIM2_Init+0xe8>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001700:	4823      	ldr	r0, [pc, #140]	; (8001790 <MX_TIM2_Init+0xe8>)
 8001702:	f006 f88b 	bl	800781c <HAL_TIM_Base_Init>
 8001706:	4603      	mov	r3, r0
 8001708:	2b00      	cmp	r3, #0
 800170a:	d001      	beq.n	8001710 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 800170c:	f7ff fcce 	bl	80010ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001710:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001714:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001716:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800171a:	4619      	mov	r1, r3
 800171c:	481c      	ldr	r0, [pc, #112]	; (8001790 <MX_TIM2_Init+0xe8>)
 800171e:	f006 faef 	bl	8007d00 <HAL_TIM_ConfigClockSource>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d001      	beq.n	800172c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001728:	f7ff fcc0 	bl	80010ac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800172c:	4818      	ldr	r0, [pc, #96]	; (8001790 <MX_TIM2_Init+0xe8>)
 800172e:	f006 f8c4 	bl	80078ba <HAL_TIM_PWM_Init>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d001      	beq.n	800173c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001738:	f7ff fcb8 	bl	80010ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800173c:	2300      	movs	r3, #0
 800173e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001740:	2300      	movs	r3, #0
 8001742:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001744:	f107 0320 	add.w	r3, r7, #32
 8001748:	4619      	mov	r1, r3
 800174a:	4811      	ldr	r0, [pc, #68]	; (8001790 <MX_TIM2_Init+0xe8>)
 800174c:	f006 febc 	bl	80084c8 <HAL_TIMEx_MasterConfigSynchronization>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d001      	beq.n	800175a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001756:	f7ff fca9 	bl	80010ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800175a:	2360      	movs	r3, #96	; 0x60
 800175c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 800175e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001762:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001764:	2300      	movs	r3, #0
 8001766:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001768:	2300      	movs	r3, #0
 800176a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800176c:	1d3b      	adds	r3, r7, #4
 800176e:	2200      	movs	r2, #0
 8001770:	4619      	mov	r1, r3
 8001772:	4807      	ldr	r0, [pc, #28]	; (8001790 <MX_TIM2_Init+0xe8>)
 8001774:	f006 fa02 	bl	8007b7c <HAL_TIM_PWM_ConfigChannel>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d001      	beq.n	8001782 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800177e:	f7ff fc95 	bl	80010ac <Error_Handler>
=======
 80016dc:	4b2d      	ldr	r3, [pc, #180]	; (8001794 <MX_TIM2_Init+0xe8>)
 80016de:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016e2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 180-1;
 80016e4:	4b2b      	ldr	r3, [pc, #172]	; (8001794 <MX_TIM2_Init+0xe8>)
 80016e6:	22b3      	movs	r2, #179	; 0xb3
 80016e8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016ea:	4b2a      	ldr	r3, [pc, #168]	; (8001794 <MX_TIM2_Init+0xe8>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 80016f0:	4b28      	ldr	r3, [pc, #160]	; (8001794 <MX_TIM2_Init+0xe8>)
 80016f2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80016f6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016f8:	4b26      	ldr	r3, [pc, #152]	; (8001794 <MX_TIM2_Init+0xe8>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016fe:	4b25      	ldr	r3, [pc, #148]	; (8001794 <MX_TIM2_Init+0xe8>)
 8001700:	2200      	movs	r2, #0
 8001702:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001704:	4823      	ldr	r0, [pc, #140]	; (8001794 <MX_TIM2_Init+0xe8>)
 8001706:	f006 f871 	bl	80077ec <HAL_TIM_Base_Init>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	d001      	beq.n	8001714 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001710:	f7ff fcce 	bl	80010b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001714:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001718:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800171a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800171e:	4619      	mov	r1, r3
 8001720:	481c      	ldr	r0, [pc, #112]	; (8001794 <MX_TIM2_Init+0xe8>)
 8001722:	f006 fad5 	bl	8007cd0 <HAL_TIM_ConfigClockSource>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d001      	beq.n	8001730 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800172c:	f7ff fcc0 	bl	80010b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001730:	4818      	ldr	r0, [pc, #96]	; (8001794 <MX_TIM2_Init+0xe8>)
 8001732:	f006 f8aa 	bl	800788a <HAL_TIM_PWM_Init>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d001      	beq.n	8001740 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800173c:	f7ff fcb8 	bl	80010b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001740:	2300      	movs	r3, #0
 8001742:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001744:	2300      	movs	r3, #0
 8001746:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001748:	f107 0320 	add.w	r3, r7, #32
 800174c:	4619      	mov	r1, r3
 800174e:	4811      	ldr	r0, [pc, #68]	; (8001794 <MX_TIM2_Init+0xe8>)
 8001750:	f006 fea2 	bl	8008498 <HAL_TIMEx_MasterConfigSynchronization>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d001      	beq.n	800175e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800175a:	f7ff fca9 	bl	80010b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800175e:	2360      	movs	r3, #96	; 0x60
 8001760:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 8001762:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001766:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001768:	2300      	movs	r3, #0
 800176a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800176c:	2300      	movs	r3, #0
 800176e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001770:	1d3b      	adds	r3, r7, #4
 8001772:	2200      	movs	r2, #0
 8001774:	4619      	mov	r1, r3
 8001776:	4807      	ldr	r0, [pc, #28]	; (8001794 <MX_TIM2_Init+0xe8>)
 8001778:	f006 f9e8 	bl	8007b4c <HAL_TIM_PWM_ConfigChannel>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	d001      	beq.n	8001786 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001782:	f7ff fc95 	bl	80010b0 <Error_Handler>
>>>>>>> Stashed changes
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
<<<<<<< Updated upstream
 8001782:	4803      	ldr	r0, [pc, #12]	; (8001790 <MX_TIM2_Init+0xe8>)
 8001784:	f000 fab2 	bl	8001cec <HAL_TIM_MspPostInit>

}
 8001788:	bf00      	nop
 800178a:	3738      	adds	r7, #56	; 0x38
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	200006e4 	.word	0x200006e4

08001794 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b08e      	sub	sp, #56	; 0x38
 8001798:	af00      	add	r7, sp, #0
=======
 8001786:	4803      	ldr	r0, [pc, #12]	; (8001794 <MX_TIM2_Init+0xe8>)
 8001788:	f000 fab2 	bl	8001cf0 <HAL_TIM_MspPostInit>

}
 800178c:	bf00      	nop
 800178e:	3738      	adds	r7, #56	; 0x38
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}
 8001794:	200006e4 	.word	0x200006e4

08001798 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b08e      	sub	sp, #56	; 0x38
 800179c:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
<<<<<<< Updated upstream
 800179a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800179e:	2200      	movs	r2, #0
 80017a0:	601a      	str	r2, [r3, #0]
 80017a2:	605a      	str	r2, [r3, #4]
 80017a4:	609a      	str	r2, [r3, #8]
 80017a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017a8:	f107 0320 	add.w	r3, r7, #32
 80017ac:	2200      	movs	r2, #0
 80017ae:	601a      	str	r2, [r3, #0]
 80017b0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017b2:	1d3b      	adds	r3, r7, #4
 80017b4:	2200      	movs	r2, #0
 80017b6:	601a      	str	r2, [r3, #0]
 80017b8:	605a      	str	r2, [r3, #4]
 80017ba:	609a      	str	r2, [r3, #8]
 80017bc:	60da      	str	r2, [r3, #12]
 80017be:	611a      	str	r2, [r3, #16]
 80017c0:	615a      	str	r2, [r3, #20]
 80017c2:	619a      	str	r2, [r3, #24]
=======
 800179e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017a2:	2200      	movs	r2, #0
 80017a4:	601a      	str	r2, [r3, #0]
 80017a6:	605a      	str	r2, [r3, #4]
 80017a8:	609a      	str	r2, [r3, #8]
 80017aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017ac:	f107 0320 	add.w	r3, r7, #32
 80017b0:	2200      	movs	r2, #0
 80017b2:	601a      	str	r2, [r3, #0]
 80017b4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017b6:	1d3b      	adds	r3, r7, #4
 80017b8:	2200      	movs	r2, #0
 80017ba:	601a      	str	r2, [r3, #0]
 80017bc:	605a      	str	r2, [r3, #4]
 80017be:	609a      	str	r2, [r3, #8]
 80017c0:	60da      	str	r2, [r3, #12]
 80017c2:	611a      	str	r2, [r3, #16]
 80017c4:	615a      	str	r2, [r3, #20]
 80017c6:	619a      	str	r2, [r3, #24]
>>>>>>> Stashed changes

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
<<<<<<< Updated upstream
 80017c4:	4b2c      	ldr	r3, [pc, #176]	; (8001878 <MX_TIM3_Init+0xe4>)
 80017c6:	4a2d      	ldr	r2, [pc, #180]	; (800187c <MX_TIM3_Init+0xe8>)
 80017c8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9-1;
 80017ca:	4b2b      	ldr	r3, [pc, #172]	; (8001878 <MX_TIM3_Init+0xe4>)
 80017cc:	2208      	movs	r2, #8
 80017ce:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017d0:	4b29      	ldr	r3, [pc, #164]	; (8001878 <MX_TIM3_Init+0xe4>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 50000-1;
 80017d6:	4b28      	ldr	r3, [pc, #160]	; (8001878 <MX_TIM3_Init+0xe4>)
 80017d8:	f24c 324f 	movw	r2, #49999	; 0xc34f
 80017dc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017de:	4b26      	ldr	r3, [pc, #152]	; (8001878 <MX_TIM3_Init+0xe4>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017e4:	4b24      	ldr	r3, [pc, #144]	; (8001878 <MX_TIM3_Init+0xe4>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80017ea:	4823      	ldr	r0, [pc, #140]	; (8001878 <MX_TIM3_Init+0xe4>)
 80017ec:	f006 f816 	bl	800781c <HAL_TIM_Base_Init>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d001      	beq.n	80017fa <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80017f6:	f7ff fc59 	bl	80010ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017fe:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001800:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001804:	4619      	mov	r1, r3
 8001806:	481c      	ldr	r0, [pc, #112]	; (8001878 <MX_TIM3_Init+0xe4>)
 8001808:	f006 fa7a 	bl	8007d00 <HAL_TIM_ConfigClockSource>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d001      	beq.n	8001816 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001812:	f7ff fc4b 	bl	80010ac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001816:	4818      	ldr	r0, [pc, #96]	; (8001878 <MX_TIM3_Init+0xe4>)
 8001818:	f006 f84f 	bl	80078ba <HAL_TIM_PWM_Init>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	d001      	beq.n	8001826 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001822:	f7ff fc43 	bl	80010ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001826:	2300      	movs	r3, #0
 8001828:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800182a:	2300      	movs	r3, #0
 800182c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800182e:	f107 0320 	add.w	r3, r7, #32
 8001832:	4619      	mov	r1, r3
 8001834:	4810      	ldr	r0, [pc, #64]	; (8001878 <MX_TIM3_Init+0xe4>)
 8001836:	f006 fe47 	bl	80084c8 <HAL_TIMEx_MasterConfigSynchronization>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d001      	beq.n	8001844 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001840:	f7ff fc34 	bl	80010ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001844:	2360      	movs	r3, #96	; 0x60
 8001846:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001848:	2300      	movs	r3, #0
 800184a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800184c:	2300      	movs	r3, #0
 800184e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001850:	2300      	movs	r3, #0
 8001852:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001854:	1d3b      	adds	r3, r7, #4
 8001856:	2200      	movs	r2, #0
 8001858:	4619      	mov	r1, r3
 800185a:	4807      	ldr	r0, [pc, #28]	; (8001878 <MX_TIM3_Init+0xe4>)
 800185c:	f006 f98e 	bl	8007b7c <HAL_TIM_PWM_ConfigChannel>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d001      	beq.n	800186a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001866:	f7ff fc21 	bl	80010ac <Error_Handler>
=======
 80017c8:	4b2c      	ldr	r3, [pc, #176]	; (800187c <MX_TIM3_Init+0xe4>)
 80017ca:	4a2d      	ldr	r2, [pc, #180]	; (8001880 <MX_TIM3_Init+0xe8>)
 80017cc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9-1;
 80017ce:	4b2b      	ldr	r3, [pc, #172]	; (800187c <MX_TIM3_Init+0xe4>)
 80017d0:	2208      	movs	r2, #8
 80017d2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017d4:	4b29      	ldr	r3, [pc, #164]	; (800187c <MX_TIM3_Init+0xe4>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 50000-1;
 80017da:	4b28      	ldr	r3, [pc, #160]	; (800187c <MX_TIM3_Init+0xe4>)
 80017dc:	f24c 324f 	movw	r2, #49999	; 0xc34f
 80017e0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017e2:	4b26      	ldr	r3, [pc, #152]	; (800187c <MX_TIM3_Init+0xe4>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017e8:	4b24      	ldr	r3, [pc, #144]	; (800187c <MX_TIM3_Init+0xe4>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80017ee:	4823      	ldr	r0, [pc, #140]	; (800187c <MX_TIM3_Init+0xe4>)
 80017f0:	f005 fffc 	bl	80077ec <HAL_TIM_Base_Init>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d001      	beq.n	80017fe <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80017fa:	f7ff fc59 	bl	80010b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001802:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001804:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001808:	4619      	mov	r1, r3
 800180a:	481c      	ldr	r0, [pc, #112]	; (800187c <MX_TIM3_Init+0xe4>)
 800180c:	f006 fa60 	bl	8007cd0 <HAL_TIM_ConfigClockSource>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001816:	f7ff fc4b 	bl	80010b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800181a:	4818      	ldr	r0, [pc, #96]	; (800187c <MX_TIM3_Init+0xe4>)
 800181c:	f006 f835 	bl	800788a <HAL_TIM_PWM_Init>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d001      	beq.n	800182a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001826:	f7ff fc43 	bl	80010b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800182a:	2300      	movs	r3, #0
 800182c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800182e:	2300      	movs	r3, #0
 8001830:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001832:	f107 0320 	add.w	r3, r7, #32
 8001836:	4619      	mov	r1, r3
 8001838:	4810      	ldr	r0, [pc, #64]	; (800187c <MX_TIM3_Init+0xe4>)
 800183a:	f006 fe2d 	bl	8008498 <HAL_TIMEx_MasterConfigSynchronization>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d001      	beq.n	8001848 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001844:	f7ff fc34 	bl	80010b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001848:	2360      	movs	r3, #96	; 0x60
 800184a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800184c:	2300      	movs	r3, #0
 800184e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001850:	2300      	movs	r3, #0
 8001852:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001854:	2300      	movs	r3, #0
 8001856:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001858:	1d3b      	adds	r3, r7, #4
 800185a:	2200      	movs	r2, #0
 800185c:	4619      	mov	r1, r3
 800185e:	4807      	ldr	r0, [pc, #28]	; (800187c <MX_TIM3_Init+0xe4>)
 8001860:	f006 f974 	bl	8007b4c <HAL_TIM_PWM_ConfigChannel>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	d001      	beq.n	800186e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800186a:	f7ff fc21 	bl	80010b0 <Error_Handler>
>>>>>>> Stashed changes
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
<<<<<<< Updated upstream
 800186a:	4803      	ldr	r0, [pc, #12]	; (8001878 <MX_TIM3_Init+0xe4>)
 800186c:	f000 fa3e 	bl	8001cec <HAL_TIM_MspPostInit>

}
 8001870:	bf00      	nop
 8001872:	3738      	adds	r7, #56	; 0x38
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	2000069c 	.word	0x2000069c
 800187c:	40000400 	.word	0x40000400

08001880 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b08e      	sub	sp, #56	; 0x38
 8001884:	af00      	add	r7, sp, #0
=======
 800186e:	4803      	ldr	r0, [pc, #12]	; (800187c <MX_TIM3_Init+0xe4>)
 8001870:	f000 fa3e 	bl	8001cf0 <HAL_TIM_MspPostInit>

}
 8001874:	bf00      	nop
 8001876:	3738      	adds	r7, #56	; 0x38
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}
 800187c:	2000069c 	.word	0x2000069c
 8001880:	40000400 	.word	0x40000400

08001884 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b08e      	sub	sp, #56	; 0x38
 8001888:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
<<<<<<< Updated upstream
 8001886:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800188a:	2200      	movs	r2, #0
 800188c:	601a      	str	r2, [r3, #0]
 800188e:	605a      	str	r2, [r3, #4]
 8001890:	609a      	str	r2, [r3, #8]
 8001892:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001894:	f107 0320 	add.w	r3, r7, #32
 8001898:	2200      	movs	r2, #0
 800189a:	601a      	str	r2, [r3, #0]
 800189c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800189e:	1d3b      	adds	r3, r7, #4
 80018a0:	2200      	movs	r2, #0
 80018a2:	601a      	str	r2, [r3, #0]
 80018a4:	605a      	str	r2, [r3, #4]
 80018a6:	609a      	str	r2, [r3, #8]
 80018a8:	60da      	str	r2, [r3, #12]
 80018aa:	611a      	str	r2, [r3, #16]
 80018ac:	615a      	str	r2, [r3, #20]
 80018ae:	619a      	str	r2, [r3, #24]
=======
 800188a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800188e:	2200      	movs	r2, #0
 8001890:	601a      	str	r2, [r3, #0]
 8001892:	605a      	str	r2, [r3, #4]
 8001894:	609a      	str	r2, [r3, #8]
 8001896:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001898:	f107 0320 	add.w	r3, r7, #32
 800189c:	2200      	movs	r2, #0
 800189e:	601a      	str	r2, [r3, #0]
 80018a0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018a2:	1d3b      	adds	r3, r7, #4
 80018a4:	2200      	movs	r2, #0
 80018a6:	601a      	str	r2, [r3, #0]
 80018a8:	605a      	str	r2, [r3, #4]
 80018aa:	609a      	str	r2, [r3, #8]
 80018ac:	60da      	str	r2, [r3, #12]
 80018ae:	611a      	str	r2, [r3, #16]
 80018b0:	615a      	str	r2, [r3, #20]
 80018b2:	619a      	str	r2, [r3, #24]
>>>>>>> Stashed changes

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
<<<<<<< Updated upstream
 80018b0:	4b3b      	ldr	r3, [pc, #236]	; (80019a0 <MX_TIM4_Init+0x120>)
 80018b2:	4a3c      	ldr	r2, [pc, #240]	; (80019a4 <MX_TIM4_Init+0x124>)
 80018b4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 18-1;
 80018b6:	4b3a      	ldr	r3, [pc, #232]	; (80019a0 <MX_TIM4_Init+0x120>)
 80018b8:	2211      	movs	r2, #17
 80018ba:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018bc:	4b38      	ldr	r3, [pc, #224]	; (80019a0 <MX_TIM4_Init+0x120>)
 80018be:	2200      	movs	r2, #0
 80018c0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 50000-1;
 80018c2:	4b37      	ldr	r3, [pc, #220]	; (80019a0 <MX_TIM4_Init+0x120>)
 80018c4:	f24c 324f 	movw	r2, #49999	; 0xc34f
 80018c8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018ca:	4b35      	ldr	r3, [pc, #212]	; (80019a0 <MX_TIM4_Init+0x120>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018d0:	4b33      	ldr	r3, [pc, #204]	; (80019a0 <MX_TIM4_Init+0x120>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80018d6:	4832      	ldr	r0, [pc, #200]	; (80019a0 <MX_TIM4_Init+0x120>)
 80018d8:	f005 ffa0 	bl	800781c <HAL_TIM_Base_Init>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d001      	beq.n	80018e6 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 80018e2:	f7ff fbe3 	bl	80010ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018ea:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80018ec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018f0:	4619      	mov	r1, r3
 80018f2:	482b      	ldr	r0, [pc, #172]	; (80019a0 <MX_TIM4_Init+0x120>)
 80018f4:	f006 fa04 	bl	8007d00 <HAL_TIM_ConfigClockSource>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d001      	beq.n	8001902 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 80018fe:	f7ff fbd5 	bl	80010ac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001902:	4827      	ldr	r0, [pc, #156]	; (80019a0 <MX_TIM4_Init+0x120>)
 8001904:	f005 ffd9 	bl	80078ba <HAL_TIM_PWM_Init>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d001      	beq.n	8001912 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 800190e:	f7ff fbcd 	bl	80010ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001912:	2300      	movs	r3, #0
 8001914:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001916:	2300      	movs	r3, #0
 8001918:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800191a:	f107 0320 	add.w	r3, r7, #32
 800191e:	4619      	mov	r1, r3
 8001920:	481f      	ldr	r0, [pc, #124]	; (80019a0 <MX_TIM4_Init+0x120>)
 8001922:	f006 fdd1 	bl	80084c8 <HAL_TIMEx_MasterConfigSynchronization>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d001      	beq.n	8001930 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 800192c:	f7ff fbbe 	bl	80010ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001930:	2360      	movs	r3, #96	; 0x60
 8001932:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 25000-1;
 8001934:	f246 13a7 	movw	r3, #24999	; 0x61a7
 8001938:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800193a:	2300      	movs	r3, #0
 800193c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800193e:	2300      	movs	r3, #0
 8001940:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001942:	1d3b      	adds	r3, r7, #4
 8001944:	2200      	movs	r2, #0
 8001946:	4619      	mov	r1, r3
 8001948:	4815      	ldr	r0, [pc, #84]	; (80019a0 <MX_TIM4_Init+0x120>)
 800194a:	f006 f917 	bl	8007b7c <HAL_TIM_PWM_ConfigChannel>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d001      	beq.n	8001958 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8001954:	f7ff fbaa 	bl	80010ac <Error_Handler>
  }
  sConfigOC.Pulse = 12500-1;
 8001958:	f243 03d3 	movw	r3, #12499	; 0x30d3
 800195c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800195e:	1d3b      	adds	r3, r7, #4
 8001960:	2204      	movs	r2, #4
 8001962:	4619      	mov	r1, r3
 8001964:	480e      	ldr	r0, [pc, #56]	; (80019a0 <MX_TIM4_Init+0x120>)
 8001966:	f006 f909 	bl	8007b7c <HAL_TIM_PWM_ConfigChannel>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	d001      	beq.n	8001974 <MX_TIM4_Init+0xf4>
  {
    Error_Handler();
 8001970:	f7ff fb9c 	bl	80010ac <Error_Handler>
  }
  sConfigOC.Pulse = 7250-1;
 8001974:	f641 4351 	movw	r3, #7249	; 0x1c51
 8001978:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800197a:	1d3b      	adds	r3, r7, #4
 800197c:	2208      	movs	r2, #8
 800197e:	4619      	mov	r1, r3
 8001980:	4807      	ldr	r0, [pc, #28]	; (80019a0 <MX_TIM4_Init+0x120>)
 8001982:	f006 f8fb 	bl	8007b7c <HAL_TIM_PWM_ConfigChannel>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d001      	beq.n	8001990 <MX_TIM4_Init+0x110>
  {
    Error_Handler();
 800198c:	f7ff fb8e 	bl	80010ac <Error_Handler>
=======
 80018b4:	4b3b      	ldr	r3, [pc, #236]	; (80019a4 <MX_TIM4_Init+0x120>)
 80018b6:	4a3c      	ldr	r2, [pc, #240]	; (80019a8 <MX_TIM4_Init+0x124>)
 80018b8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 18-1;
 80018ba:	4b3a      	ldr	r3, [pc, #232]	; (80019a4 <MX_TIM4_Init+0x120>)
 80018bc:	2211      	movs	r2, #17
 80018be:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018c0:	4b38      	ldr	r3, [pc, #224]	; (80019a4 <MX_TIM4_Init+0x120>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 50000-1;
 80018c6:	4b37      	ldr	r3, [pc, #220]	; (80019a4 <MX_TIM4_Init+0x120>)
 80018c8:	f24c 324f 	movw	r2, #49999	; 0xc34f
 80018cc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018ce:	4b35      	ldr	r3, [pc, #212]	; (80019a4 <MX_TIM4_Init+0x120>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018d4:	4b33      	ldr	r3, [pc, #204]	; (80019a4 <MX_TIM4_Init+0x120>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80018da:	4832      	ldr	r0, [pc, #200]	; (80019a4 <MX_TIM4_Init+0x120>)
 80018dc:	f005 ff86 	bl	80077ec <HAL_TIM_Base_Init>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d001      	beq.n	80018ea <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 80018e6:	f7ff fbe3 	bl	80010b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018ee:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80018f0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018f4:	4619      	mov	r1, r3
 80018f6:	482b      	ldr	r0, [pc, #172]	; (80019a4 <MX_TIM4_Init+0x120>)
 80018f8:	f006 f9ea 	bl	8007cd0 <HAL_TIM_ConfigClockSource>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d001      	beq.n	8001906 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001902:	f7ff fbd5 	bl	80010b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001906:	4827      	ldr	r0, [pc, #156]	; (80019a4 <MX_TIM4_Init+0x120>)
 8001908:	f005 ffbf 	bl	800788a <HAL_TIM_PWM_Init>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d001      	beq.n	8001916 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001912:	f7ff fbcd 	bl	80010b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001916:	2300      	movs	r3, #0
 8001918:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800191a:	2300      	movs	r3, #0
 800191c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800191e:	f107 0320 	add.w	r3, r7, #32
 8001922:	4619      	mov	r1, r3
 8001924:	481f      	ldr	r0, [pc, #124]	; (80019a4 <MX_TIM4_Init+0x120>)
 8001926:	f006 fdb7 	bl	8008498 <HAL_TIMEx_MasterConfigSynchronization>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d001      	beq.n	8001934 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001930:	f7ff fbbe 	bl	80010b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001934:	2360      	movs	r3, #96	; 0x60
 8001936:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 25000-1;
 8001938:	f246 13a7 	movw	r3, #24999	; 0x61a7
 800193c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800193e:	2300      	movs	r3, #0
 8001940:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001942:	2300      	movs	r3, #0
 8001944:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001946:	1d3b      	adds	r3, r7, #4
 8001948:	2200      	movs	r2, #0
 800194a:	4619      	mov	r1, r3
 800194c:	4815      	ldr	r0, [pc, #84]	; (80019a4 <MX_TIM4_Init+0x120>)
 800194e:	f006 f8fd 	bl	8007b4c <HAL_TIM_PWM_ConfigChannel>
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	d001      	beq.n	800195c <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8001958:	f7ff fbaa 	bl	80010b0 <Error_Handler>
  }
  sConfigOC.Pulse = 12500-1;
 800195c:	f243 03d3 	movw	r3, #12499	; 0x30d3
 8001960:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001962:	1d3b      	adds	r3, r7, #4
 8001964:	2204      	movs	r2, #4
 8001966:	4619      	mov	r1, r3
 8001968:	480e      	ldr	r0, [pc, #56]	; (80019a4 <MX_TIM4_Init+0x120>)
 800196a:	f006 f8ef 	bl	8007b4c <HAL_TIM_PWM_ConfigChannel>
 800196e:	4603      	mov	r3, r0
 8001970:	2b00      	cmp	r3, #0
 8001972:	d001      	beq.n	8001978 <MX_TIM4_Init+0xf4>
  {
    Error_Handler();
 8001974:	f7ff fb9c 	bl	80010b0 <Error_Handler>
  }
  sConfigOC.Pulse = 7250-1;
 8001978:	f641 4351 	movw	r3, #7249	; 0x1c51
 800197c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800197e:	1d3b      	adds	r3, r7, #4
 8001980:	2208      	movs	r2, #8
 8001982:	4619      	mov	r1, r3
 8001984:	4807      	ldr	r0, [pc, #28]	; (80019a4 <MX_TIM4_Init+0x120>)
 8001986:	f006 f8e1 	bl	8007b4c <HAL_TIM_PWM_ConfigChannel>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	d001      	beq.n	8001994 <MX_TIM4_Init+0x110>
  {
    Error_Handler();
 8001990:	f7ff fb8e 	bl	80010b0 <Error_Handler>
>>>>>>> Stashed changes
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
<<<<<<< Updated upstream
 8001990:	4803      	ldr	r0, [pc, #12]	; (80019a0 <MX_TIM4_Init+0x120>)
 8001992:	f000 f9ab 	bl	8001cec <HAL_TIM_MspPostInit>

}
 8001996:	bf00      	nop
 8001998:	3738      	adds	r7, #56	; 0x38
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	200005c4 	.word	0x200005c4
 80019a4:	40000800 	.word	0x40000800

080019a8 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b08e      	sub	sp, #56	; 0x38
 80019ac:	af00      	add	r7, sp, #0
=======
 8001994:	4803      	ldr	r0, [pc, #12]	; (80019a4 <MX_TIM4_Init+0x120>)
 8001996:	f000 f9ab 	bl	8001cf0 <HAL_TIM_MspPostInit>

}
 800199a:	bf00      	nop
 800199c:	3738      	adds	r7, #56	; 0x38
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	200005c4 	.word	0x200005c4
 80019a8:	40000800 	.word	0x40000800

080019ac <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b08e      	sub	sp, #56	; 0x38
 80019b0:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
<<<<<<< Updated upstream
 80019ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019b2:	2200      	movs	r2, #0
 80019b4:	601a      	str	r2, [r3, #0]
 80019b6:	605a      	str	r2, [r3, #4]
 80019b8:	609a      	str	r2, [r3, #8]
 80019ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019bc:	f107 0320 	add.w	r3, r7, #32
 80019c0:	2200      	movs	r2, #0
 80019c2:	601a      	str	r2, [r3, #0]
 80019c4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019c6:	1d3b      	adds	r3, r7, #4
 80019c8:	2200      	movs	r2, #0
 80019ca:	601a      	str	r2, [r3, #0]
 80019cc:	605a      	str	r2, [r3, #4]
 80019ce:	609a      	str	r2, [r3, #8]
 80019d0:	60da      	str	r2, [r3, #12]
 80019d2:	611a      	str	r2, [r3, #16]
 80019d4:	615a      	str	r2, [r3, #20]
 80019d6:	619a      	str	r2, [r3, #24]
=======
 80019b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019b6:	2200      	movs	r2, #0
 80019b8:	601a      	str	r2, [r3, #0]
 80019ba:	605a      	str	r2, [r3, #4]
 80019bc:	609a      	str	r2, [r3, #8]
 80019be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019c0:	f107 0320 	add.w	r3, r7, #32
 80019c4:	2200      	movs	r2, #0
 80019c6:	601a      	str	r2, [r3, #0]
 80019c8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019ca:	1d3b      	adds	r3, r7, #4
 80019cc:	2200      	movs	r2, #0
 80019ce:	601a      	str	r2, [r3, #0]
 80019d0:	605a      	str	r2, [r3, #4]
 80019d2:	609a      	str	r2, [r3, #8]
 80019d4:	60da      	str	r2, [r3, #12]
 80019d6:	611a      	str	r2, [r3, #16]
 80019d8:	615a      	str	r2, [r3, #20]
 80019da:	619a      	str	r2, [r3, #24]
>>>>>>> Stashed changes

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
<<<<<<< Updated upstream
 80019d8:	4b31      	ldr	r3, [pc, #196]	; (8001aa0 <MX_TIM5_Init+0xf8>)
 80019da:	4a32      	ldr	r2, [pc, #200]	; (8001aa4 <MX_TIM5_Init+0xfc>)
 80019dc:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 9;
 80019de:	4b30      	ldr	r3, [pc, #192]	; (8001aa0 <MX_TIM5_Init+0xf8>)
 80019e0:	2209      	movs	r2, #9
 80019e2:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019e4:	4b2e      	ldr	r3, [pc, #184]	; (8001aa0 <MX_TIM5_Init+0xf8>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 100000-1;
 80019ea:	4b2d      	ldr	r3, [pc, #180]	; (8001aa0 <MX_TIM5_Init+0xf8>)
 80019ec:	4a2e      	ldr	r2, [pc, #184]	; (8001aa8 <MX_TIM5_Init+0x100>)
 80019ee:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019f0:	4b2b      	ldr	r3, [pc, #172]	; (8001aa0 <MX_TIM5_Init+0xf8>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019f6:	4b2a      	ldr	r3, [pc, #168]	; (8001aa0 <MX_TIM5_Init+0xf8>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80019fc:	4828      	ldr	r0, [pc, #160]	; (8001aa0 <MX_TIM5_Init+0xf8>)
 80019fe:	f005 ff0d 	bl	800781c <HAL_TIM_Base_Init>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d001      	beq.n	8001a0c <MX_TIM5_Init+0x64>
  {
    Error_Handler();
 8001a08:	f7ff fb50 	bl	80010ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a10:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001a12:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a16:	4619      	mov	r1, r3
 8001a18:	4821      	ldr	r0, [pc, #132]	; (8001aa0 <MX_TIM5_Init+0xf8>)
 8001a1a:	f006 f971 	bl	8007d00 <HAL_TIM_ConfigClockSource>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d001      	beq.n	8001a28 <MX_TIM5_Init+0x80>
  {
    Error_Handler();
 8001a24:	f7ff fb42 	bl	80010ac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001a28:	481d      	ldr	r0, [pc, #116]	; (8001aa0 <MX_TIM5_Init+0xf8>)
 8001a2a:	f005 ff46 	bl	80078ba <HAL_TIM_PWM_Init>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d001      	beq.n	8001a38 <MX_TIM5_Init+0x90>
  {
    Error_Handler();
 8001a34:	f7ff fb3a 	bl	80010ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001a40:	f107 0320 	add.w	r3, r7, #32
 8001a44:	4619      	mov	r1, r3
 8001a46:	4816      	ldr	r0, [pc, #88]	; (8001aa0 <MX_TIM5_Init+0xf8>)
 8001a48:	f006 fd3e 	bl	80084c8 <HAL_TIMEx_MasterConfigSynchronization>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d001      	beq.n	8001a56 <MX_TIM5_Init+0xae>
  {
    Error_Handler();
 8001a52:	f7ff fb2b 	bl	80010ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a56:	2360      	movs	r3, #96	; 0x60
 8001a58:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a62:	2300      	movs	r3, #0
 8001a64:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a66:	1d3b      	adds	r3, r7, #4
 8001a68:	2200      	movs	r2, #0
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	480c      	ldr	r0, [pc, #48]	; (8001aa0 <MX_TIM5_Init+0xf8>)
 8001a6e:	f006 f885 	bl	8007b7c <HAL_TIM_PWM_ConfigChannel>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d001      	beq.n	8001a7c <MX_TIM5_Init+0xd4>
  {
    Error_Handler();
 8001a78:	f7ff fb18 	bl	80010ac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001a7c:	1d3b      	adds	r3, r7, #4
 8001a7e:	220c      	movs	r2, #12
 8001a80:	4619      	mov	r1, r3
 8001a82:	4807      	ldr	r0, [pc, #28]	; (8001aa0 <MX_TIM5_Init+0xf8>)
 8001a84:	f006 f87a 	bl	8007b7c <HAL_TIM_PWM_ConfigChannel>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d001      	beq.n	8001a92 <MX_TIM5_Init+0xea>
  {
    Error_Handler();
 8001a8e:	f7ff fb0d 	bl	80010ac <Error_Handler>
=======
 80019dc:	4b31      	ldr	r3, [pc, #196]	; (8001aa4 <MX_TIM5_Init+0xf8>)
 80019de:	4a32      	ldr	r2, [pc, #200]	; (8001aa8 <MX_TIM5_Init+0xfc>)
 80019e0:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 9;
 80019e2:	4b30      	ldr	r3, [pc, #192]	; (8001aa4 <MX_TIM5_Init+0xf8>)
 80019e4:	2209      	movs	r2, #9
 80019e6:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019e8:	4b2e      	ldr	r3, [pc, #184]	; (8001aa4 <MX_TIM5_Init+0xf8>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 100000-1;
 80019ee:	4b2d      	ldr	r3, [pc, #180]	; (8001aa4 <MX_TIM5_Init+0xf8>)
 80019f0:	4a2e      	ldr	r2, [pc, #184]	; (8001aac <MX_TIM5_Init+0x100>)
 80019f2:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019f4:	4b2b      	ldr	r3, [pc, #172]	; (8001aa4 <MX_TIM5_Init+0xf8>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019fa:	4b2a      	ldr	r3, [pc, #168]	; (8001aa4 <MX_TIM5_Init+0xf8>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001a00:	4828      	ldr	r0, [pc, #160]	; (8001aa4 <MX_TIM5_Init+0xf8>)
 8001a02:	f005 fef3 	bl	80077ec <HAL_TIM_Base_Init>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d001      	beq.n	8001a10 <MX_TIM5_Init+0x64>
  {
    Error_Handler();
 8001a0c:	f7ff fb50 	bl	80010b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a14:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001a16:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	4821      	ldr	r0, [pc, #132]	; (8001aa4 <MX_TIM5_Init+0xf8>)
 8001a1e:	f006 f957 	bl	8007cd0 <HAL_TIM_ConfigClockSource>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d001      	beq.n	8001a2c <MX_TIM5_Init+0x80>
  {
    Error_Handler();
 8001a28:	f7ff fb42 	bl	80010b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001a2c:	481d      	ldr	r0, [pc, #116]	; (8001aa4 <MX_TIM5_Init+0xf8>)
 8001a2e:	f005 ff2c 	bl	800788a <HAL_TIM_PWM_Init>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d001      	beq.n	8001a3c <MX_TIM5_Init+0x90>
  {
    Error_Handler();
 8001a38:	f7ff fb3a 	bl	80010b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a40:	2300      	movs	r3, #0
 8001a42:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001a44:	f107 0320 	add.w	r3, r7, #32
 8001a48:	4619      	mov	r1, r3
 8001a4a:	4816      	ldr	r0, [pc, #88]	; (8001aa4 <MX_TIM5_Init+0xf8>)
 8001a4c:	f006 fd24 	bl	8008498 <HAL_TIMEx_MasterConfigSynchronization>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d001      	beq.n	8001a5a <MX_TIM5_Init+0xae>
  {
    Error_Handler();
 8001a56:	f7ff fb2b 	bl	80010b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a5a:	2360      	movs	r3, #96	; 0x60
 8001a5c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a62:	2300      	movs	r3, #0
 8001a64:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a66:	2300      	movs	r3, #0
 8001a68:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a6a:	1d3b      	adds	r3, r7, #4
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	4619      	mov	r1, r3
 8001a70:	480c      	ldr	r0, [pc, #48]	; (8001aa4 <MX_TIM5_Init+0xf8>)
 8001a72:	f006 f86b 	bl	8007b4c <HAL_TIM_PWM_ConfigChannel>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d001      	beq.n	8001a80 <MX_TIM5_Init+0xd4>
  {
    Error_Handler();
 8001a7c:	f7ff fb18 	bl	80010b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001a80:	1d3b      	adds	r3, r7, #4
 8001a82:	220c      	movs	r2, #12
 8001a84:	4619      	mov	r1, r3
 8001a86:	4807      	ldr	r0, [pc, #28]	; (8001aa4 <MX_TIM5_Init+0xf8>)
 8001a88:	f006 f860 	bl	8007b4c <HAL_TIM_PWM_ConfigChannel>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d001      	beq.n	8001a96 <MX_TIM5_Init+0xea>
  {
    Error_Handler();
 8001a92:	f7ff fb0d 	bl	80010b0 <Error_Handler>
>>>>>>> Stashed changes
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
<<<<<<< Updated upstream
 8001a92:	4803      	ldr	r0, [pc, #12]	; (8001aa0 <MX_TIM5_Init+0xf8>)
 8001a94:	f000 f92a 	bl	8001cec <HAL_TIM_MspPostInit>

}
 8001a98:	bf00      	nop
 8001a9a:	3738      	adds	r7, #56	; 0x38
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	20000654 	.word	0x20000654
 8001aa4:	40000c00 	.word	0x40000c00
 8001aa8:	0001869f 	.word	0x0001869f

08001aac <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b082      	sub	sp, #8
 8001ab0:	af00      	add	r7, sp, #0
=======
 8001a96:	4803      	ldr	r0, [pc, #12]	; (8001aa4 <MX_TIM5_Init+0xf8>)
 8001a98:	f000 f92a 	bl	8001cf0 <HAL_TIM_MspPostInit>

}
 8001a9c:	bf00      	nop
 8001a9e:	3738      	adds	r7, #56	; 0x38
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	20000654 	.word	0x20000654
 8001aa8:	40000c00 	.word	0x40000c00
 8001aac:	0001869f 	.word	0x0001869f

08001ab0 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
<<<<<<< Updated upstream
 8001ab2:	463b      	mov	r3, r7
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	601a      	str	r2, [r3, #0]
 8001ab8:	605a      	str	r2, [r3, #4]
=======
 8001ab6:	463b      	mov	r3, r7
 8001ab8:	2200      	movs	r2, #0
 8001aba:	601a      	str	r2, [r3, #0]
 8001abc:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
<<<<<<< Updated upstream
 8001aba:	4b15      	ldr	r3, [pc, #84]	; (8001b10 <MX_TIM7_Init+0x64>)
 8001abc:	4a15      	ldr	r2, [pc, #84]	; (8001b14 <MX_TIM7_Init+0x68>)
 8001abe:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 8;
 8001ac0:	4b13      	ldr	r3, [pc, #76]	; (8001b10 <MX_TIM7_Init+0x64>)
 8001ac2:	2208      	movs	r2, #8
 8001ac4:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ac6:	4b12      	ldr	r3, [pc, #72]	; (8001b10 <MX_TIM7_Init+0x64>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9999;
 8001acc:	4b10      	ldr	r3, [pc, #64]	; (8001b10 <MX_TIM7_Init+0x64>)
 8001ace:	f242 720f 	movw	r2, #9999	; 0x270f
 8001ad2:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001ad4:	4b0e      	ldr	r3, [pc, #56]	; (8001b10 <MX_TIM7_Init+0x64>)
 8001ad6:	2280      	movs	r2, #128	; 0x80
 8001ad8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001ada:	480d      	ldr	r0, [pc, #52]	; (8001b10 <MX_TIM7_Init+0x64>)
 8001adc:	f005 fe9e 	bl	800781c <HAL_TIM_Base_Init>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d001      	beq.n	8001aea <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8001ae6:	f7ff fae1 	bl	80010ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001aea:	2300      	movs	r3, #0
 8001aec:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001aee:	2300      	movs	r3, #0
 8001af0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001af2:	463b      	mov	r3, r7
 8001af4:	4619      	mov	r1, r3
 8001af6:	4806      	ldr	r0, [pc, #24]	; (8001b10 <MX_TIM7_Init+0x64>)
 8001af8:	f006 fce6 	bl	80084c8 <HAL_TIMEx_MasterConfigSynchronization>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d001      	beq.n	8001b06 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8001b02:	f7ff fad3 	bl	80010ac <Error_Handler>
=======
 8001abe:	4b15      	ldr	r3, [pc, #84]	; (8001b14 <MX_TIM7_Init+0x64>)
 8001ac0:	4a15      	ldr	r2, [pc, #84]	; (8001b18 <MX_TIM7_Init+0x68>)
 8001ac2:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 8;
 8001ac4:	4b13      	ldr	r3, [pc, #76]	; (8001b14 <MX_TIM7_Init+0x64>)
 8001ac6:	2208      	movs	r2, #8
 8001ac8:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001aca:	4b12      	ldr	r3, [pc, #72]	; (8001b14 <MX_TIM7_Init+0x64>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9999;
 8001ad0:	4b10      	ldr	r3, [pc, #64]	; (8001b14 <MX_TIM7_Init+0x64>)
 8001ad2:	f242 720f 	movw	r2, #9999	; 0x270f
 8001ad6:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001ad8:	4b0e      	ldr	r3, [pc, #56]	; (8001b14 <MX_TIM7_Init+0x64>)
 8001ada:	2280      	movs	r2, #128	; 0x80
 8001adc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001ade:	480d      	ldr	r0, [pc, #52]	; (8001b14 <MX_TIM7_Init+0x64>)
 8001ae0:	f005 fe84 	bl	80077ec <HAL_TIM_Base_Init>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d001      	beq.n	8001aee <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8001aea:	f7ff fae1 	bl	80010b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001aee:	2300      	movs	r3, #0
 8001af0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001af2:	2300      	movs	r3, #0
 8001af4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001af6:	463b      	mov	r3, r7
 8001af8:	4619      	mov	r1, r3
 8001afa:	4806      	ldr	r0, [pc, #24]	; (8001b14 <MX_TIM7_Init+0x64>)
 8001afc:	f006 fccc 	bl	8008498 <HAL_TIMEx_MasterConfigSynchronization>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d001      	beq.n	8001b0a <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8001b06:	f7ff fad3 	bl	80010b0 <Error_Handler>
>>>>>>> Stashed changes
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
<<<<<<< Updated upstream
 8001b06:	bf00      	nop
 8001b08:	3708      	adds	r7, #8
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	2000072c 	.word	0x2000072c
 8001b14:	40001400 	.word	0x40001400

08001b18 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b088      	sub	sp, #32
 8001b1c:	af00      	add	r7, sp, #0
=======
 8001b0a:	bf00      	nop
 8001b0c:	3708      	adds	r7, #8
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	2000072c 	.word	0x2000072c
 8001b18:	40001400 	.word	0x40001400

08001b1c <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b088      	sub	sp, #32
 8001b20:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
<<<<<<< Updated upstream
 8001b1e:	1d3b      	adds	r3, r7, #4
 8001b20:	2200      	movs	r2, #0
 8001b22:	601a      	str	r2, [r3, #0]
 8001b24:	605a      	str	r2, [r3, #4]
 8001b26:	609a      	str	r2, [r3, #8]
 8001b28:	60da      	str	r2, [r3, #12]
 8001b2a:	611a      	str	r2, [r3, #16]
 8001b2c:	615a      	str	r2, [r3, #20]
 8001b2e:	619a      	str	r2, [r3, #24]
=======
 8001b22:	1d3b      	adds	r3, r7, #4
 8001b24:	2200      	movs	r2, #0
 8001b26:	601a      	str	r2, [r3, #0]
 8001b28:	605a      	str	r2, [r3, #4]
 8001b2a:	609a      	str	r2, [r3, #8]
 8001b2c:	60da      	str	r2, [r3, #12]
 8001b2e:	611a      	str	r2, [r3, #16]
 8001b30:	615a      	str	r2, [r3, #20]
 8001b32:	619a      	str	r2, [r3, #24]
>>>>>>> Stashed changes

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
<<<<<<< Updated upstream
 8001b30:	4b1e      	ldr	r3, [pc, #120]	; (8001bac <MX_TIM10_Init+0x94>)
 8001b32:	4a1f      	ldr	r2, [pc, #124]	; (8001bb0 <MX_TIM10_Init+0x98>)
 8001b34:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 72-1;
 8001b36:	4b1d      	ldr	r3, [pc, #116]	; (8001bac <MX_TIM10_Init+0x94>)
 8001b38:	2247      	movs	r2, #71	; 0x47
 8001b3a:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b3c:	4b1b      	ldr	r3, [pc, #108]	; (8001bac <MX_TIM10_Init+0x94>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 50000-1;
 8001b42:	4b1a      	ldr	r3, [pc, #104]	; (8001bac <MX_TIM10_Init+0x94>)
 8001b44:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8001b48:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b4a:	4b18      	ldr	r3, [pc, #96]	; (8001bac <MX_TIM10_Init+0x94>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b50:	4b16      	ldr	r3, [pc, #88]	; (8001bac <MX_TIM10_Init+0x94>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001b56:	4815      	ldr	r0, [pc, #84]	; (8001bac <MX_TIM10_Init+0x94>)
 8001b58:	f005 fe60 	bl	800781c <HAL_TIM_Base_Init>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d001      	beq.n	8001b66 <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 8001b62:	f7ff faa3 	bl	80010ac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8001b66:	4811      	ldr	r0, [pc, #68]	; (8001bac <MX_TIM10_Init+0x94>)
 8001b68:	f005 fea7 	bl	80078ba <HAL_TIM_PWM_Init>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d001      	beq.n	8001b76 <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 8001b72:	f7ff fa9b 	bl	80010ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b76:	2360      	movs	r3, #96	; 0x60
 8001b78:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 8001b7a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001b7e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b80:	2300      	movs	r3, #0
 8001b82:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b84:	2300      	movs	r3, #0
 8001b86:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b88:	1d3b      	adds	r3, r7, #4
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	4807      	ldr	r0, [pc, #28]	; (8001bac <MX_TIM10_Init+0x94>)
 8001b90:	f005 fff4 	bl	8007b7c <HAL_TIM_PWM_ConfigChannel>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d001      	beq.n	8001b9e <MX_TIM10_Init+0x86>
  {
    Error_Handler();
 8001b9a:	f7ff fa87 	bl	80010ac <Error_Handler>
=======
 8001b34:	4b1e      	ldr	r3, [pc, #120]	; (8001bb0 <MX_TIM10_Init+0x94>)
 8001b36:	4a1f      	ldr	r2, [pc, #124]	; (8001bb4 <MX_TIM10_Init+0x98>)
 8001b38:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 72-1;
 8001b3a:	4b1d      	ldr	r3, [pc, #116]	; (8001bb0 <MX_TIM10_Init+0x94>)
 8001b3c:	2247      	movs	r2, #71	; 0x47
 8001b3e:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b40:	4b1b      	ldr	r3, [pc, #108]	; (8001bb0 <MX_TIM10_Init+0x94>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 50000-1;
 8001b46:	4b1a      	ldr	r3, [pc, #104]	; (8001bb0 <MX_TIM10_Init+0x94>)
 8001b48:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8001b4c:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b4e:	4b18      	ldr	r3, [pc, #96]	; (8001bb0 <MX_TIM10_Init+0x94>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b54:	4b16      	ldr	r3, [pc, #88]	; (8001bb0 <MX_TIM10_Init+0x94>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001b5a:	4815      	ldr	r0, [pc, #84]	; (8001bb0 <MX_TIM10_Init+0x94>)
 8001b5c:	f005 fe46 	bl	80077ec <HAL_TIM_Base_Init>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d001      	beq.n	8001b6a <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 8001b66:	f7ff faa3 	bl	80010b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8001b6a:	4811      	ldr	r0, [pc, #68]	; (8001bb0 <MX_TIM10_Init+0x94>)
 8001b6c:	f005 fe8d 	bl	800788a <HAL_TIM_PWM_Init>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d001      	beq.n	8001b7a <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 8001b76:	f7ff fa9b 	bl	80010b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b7a:	2360      	movs	r3, #96	; 0x60
 8001b7c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 8001b7e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001b82:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b84:	2300      	movs	r3, #0
 8001b86:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b8c:	1d3b      	adds	r3, r7, #4
 8001b8e:	2200      	movs	r2, #0
 8001b90:	4619      	mov	r1, r3
 8001b92:	4807      	ldr	r0, [pc, #28]	; (8001bb0 <MX_TIM10_Init+0x94>)
 8001b94:	f005 ffda 	bl	8007b4c <HAL_TIM_PWM_ConfigChannel>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d001      	beq.n	8001ba2 <MX_TIM10_Init+0x86>
  {
    Error_Handler();
 8001b9e:	f7ff fa87 	bl	80010b0 <Error_Handler>
>>>>>>> Stashed changes
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
<<<<<<< Updated upstream
 8001b9e:	4803      	ldr	r0, [pc, #12]	; (8001bac <MX_TIM10_Init+0x94>)
 8001ba0:	f000 f8a4 	bl	8001cec <HAL_TIM_MspPostInit>

}
 8001ba4:	bf00      	nop
 8001ba6:	3720      	adds	r7, #32
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	2000060c 	.word	0x2000060c
 8001bb0:	40014400 	.word	0x40014400

08001bb4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b088      	sub	sp, #32
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bc4:	d10e      	bne.n	8001be4 <HAL_TIM_Base_MspInit+0x30>
=======
 8001ba2:	4803      	ldr	r0, [pc, #12]	; (8001bb0 <MX_TIM10_Init+0x94>)
 8001ba4:	f000 f8a4 	bl	8001cf0 <HAL_TIM_MspPostInit>

}
 8001ba8:	bf00      	nop
 8001baa:	3720      	adds	r7, #32
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	2000060c 	.word	0x2000060c
 8001bb4:	40014400 	.word	0x40014400

08001bb8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b088      	sub	sp, #32
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bc8:	d10e      	bne.n	8001be8 <HAL_TIM_Base_MspInit+0x30>
>>>>>>> Stashed changes
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
<<<<<<< Updated upstream
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	61fb      	str	r3, [r7, #28]
 8001bca:	4b42      	ldr	r3, [pc, #264]	; (8001cd4 <HAL_TIM_Base_MspInit+0x120>)
 8001bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bce:	4a41      	ldr	r2, [pc, #260]	; (8001cd4 <HAL_TIM_Base_MspInit+0x120>)
 8001bd0:	f043 0301 	orr.w	r3, r3, #1
 8001bd4:	6413      	str	r3, [r2, #64]	; 0x40
 8001bd6:	4b3f      	ldr	r3, [pc, #252]	; (8001cd4 <HAL_TIM_Base_MspInit+0x120>)
 8001bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bda:	f003 0301 	and.w	r3, r3, #1
 8001bde:	61fb      	str	r3, [r7, #28]
 8001be0:	69fb      	ldr	r3, [r7, #28]
=======
 8001bca:	2300      	movs	r3, #0
 8001bcc:	61fb      	str	r3, [r7, #28]
 8001bce:	4b42      	ldr	r3, [pc, #264]	; (8001cd8 <HAL_TIM_Base_MspInit+0x120>)
 8001bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd2:	4a41      	ldr	r2, [pc, #260]	; (8001cd8 <HAL_TIM_Base_MspInit+0x120>)
 8001bd4:	f043 0301 	orr.w	r3, r3, #1
 8001bd8:	6413      	str	r3, [r2, #64]	; 0x40
 8001bda:	4b3f      	ldr	r3, [pc, #252]	; (8001cd8 <HAL_TIM_Base_MspInit+0x120>)
 8001bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bde:	f003 0301 	and.w	r3, r3, #1
 8001be2:	61fb      	str	r3, [r7, #28]
 8001be4:	69fb      	ldr	r3, [r7, #28]
>>>>>>> Stashed changes
    __HAL_RCC_TIM10_CLK_ENABLE();
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
<<<<<<< Updated upstream
 8001be2:	e072      	b.n	8001cca <HAL_TIM_Base_MspInit+0x116>
  else if(tim_baseHandle->Instance==TIM3)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a3b      	ldr	r2, [pc, #236]	; (8001cd8 <HAL_TIM_Base_MspInit+0x124>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d10e      	bne.n	8001c0c <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001bee:	2300      	movs	r3, #0
 8001bf0:	61bb      	str	r3, [r7, #24]
 8001bf2:	4b38      	ldr	r3, [pc, #224]	; (8001cd4 <HAL_TIM_Base_MspInit+0x120>)
 8001bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf6:	4a37      	ldr	r2, [pc, #220]	; (8001cd4 <HAL_TIM_Base_MspInit+0x120>)
 8001bf8:	f043 0302 	orr.w	r3, r3, #2
 8001bfc:	6413      	str	r3, [r2, #64]	; 0x40
 8001bfe:	4b35      	ldr	r3, [pc, #212]	; (8001cd4 <HAL_TIM_Base_MspInit+0x120>)
 8001c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c02:	f003 0302 	and.w	r3, r3, #2
 8001c06:	61bb      	str	r3, [r7, #24]
 8001c08:	69bb      	ldr	r3, [r7, #24]
}
 8001c0a:	e05e      	b.n	8001cca <HAL_TIM_Base_MspInit+0x116>
  else if(tim_baseHandle->Instance==TIM4)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a32      	ldr	r2, [pc, #200]	; (8001cdc <HAL_TIM_Base_MspInit+0x128>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d116      	bne.n	8001c44 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001c16:	2300      	movs	r3, #0
 8001c18:	617b      	str	r3, [r7, #20]
 8001c1a:	4b2e      	ldr	r3, [pc, #184]	; (8001cd4 <HAL_TIM_Base_MspInit+0x120>)
 8001c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1e:	4a2d      	ldr	r2, [pc, #180]	; (8001cd4 <HAL_TIM_Base_MspInit+0x120>)
 8001c20:	f043 0304 	orr.w	r3, r3, #4
 8001c24:	6413      	str	r3, [r2, #64]	; 0x40
 8001c26:	4b2b      	ldr	r3, [pc, #172]	; (8001cd4 <HAL_TIM_Base_MspInit+0x120>)
 8001c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2a:	f003 0304 	and.w	r3, r3, #4
 8001c2e:	617b      	str	r3, [r7, #20]
 8001c30:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001c32:	2200      	movs	r2, #0
 8001c34:	2100      	movs	r1, #0
 8001c36:	201e      	movs	r0, #30
 8001c38:	f001 fc4d 	bl	80034d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001c3c:	201e      	movs	r0, #30
 8001c3e:	f001 fc66 	bl	800350e <HAL_NVIC_EnableIRQ>
}
 8001c42:	e042      	b.n	8001cca <HAL_TIM_Base_MspInit+0x116>
  else if(tim_baseHandle->Instance==TIM5)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a25      	ldr	r2, [pc, #148]	; (8001ce0 <HAL_TIM_Base_MspInit+0x12c>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d10e      	bne.n	8001c6c <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001c4e:	2300      	movs	r3, #0
 8001c50:	613b      	str	r3, [r7, #16]
 8001c52:	4b20      	ldr	r3, [pc, #128]	; (8001cd4 <HAL_TIM_Base_MspInit+0x120>)
 8001c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c56:	4a1f      	ldr	r2, [pc, #124]	; (8001cd4 <HAL_TIM_Base_MspInit+0x120>)
 8001c58:	f043 0308 	orr.w	r3, r3, #8
 8001c5c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c5e:	4b1d      	ldr	r3, [pc, #116]	; (8001cd4 <HAL_TIM_Base_MspInit+0x120>)
 8001c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c62:	f003 0308 	and.w	r3, r3, #8
 8001c66:	613b      	str	r3, [r7, #16]
 8001c68:	693b      	ldr	r3, [r7, #16]
}
 8001c6a:	e02e      	b.n	8001cca <HAL_TIM_Base_MspInit+0x116>
  else if(tim_baseHandle->Instance==TIM7)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a1c      	ldr	r2, [pc, #112]	; (8001ce4 <HAL_TIM_Base_MspInit+0x130>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d116      	bne.n	8001ca4 <HAL_TIM_Base_MspInit+0xf0>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001c76:	2300      	movs	r3, #0
 8001c78:	60fb      	str	r3, [r7, #12]
 8001c7a:	4b16      	ldr	r3, [pc, #88]	; (8001cd4 <HAL_TIM_Base_MspInit+0x120>)
 8001c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7e:	4a15      	ldr	r2, [pc, #84]	; (8001cd4 <HAL_TIM_Base_MspInit+0x120>)
 8001c80:	f043 0320 	orr.w	r3, r3, #32
 8001c84:	6413      	str	r3, [r2, #64]	; 0x40
 8001c86:	4b13      	ldr	r3, [pc, #76]	; (8001cd4 <HAL_TIM_Base_MspInit+0x120>)
 8001c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c8a:	f003 0320 	and.w	r3, r3, #32
 8001c8e:	60fb      	str	r3, [r7, #12]
 8001c90:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001c92:	2200      	movs	r2, #0
 8001c94:	2100      	movs	r1, #0
 8001c96:	2037      	movs	r0, #55	; 0x37
 8001c98:	f001 fc1d 	bl	80034d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001c9c:	2037      	movs	r0, #55	; 0x37
 8001c9e:	f001 fc36 	bl	800350e <HAL_NVIC_EnableIRQ>
}
 8001ca2:	e012      	b.n	8001cca <HAL_TIM_Base_MspInit+0x116>
  else if(tim_baseHandle->Instance==TIM10)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a0f      	ldr	r2, [pc, #60]	; (8001ce8 <HAL_TIM_Base_MspInit+0x134>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d10d      	bne.n	8001cca <HAL_TIM_Base_MspInit+0x116>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001cae:	2300      	movs	r3, #0
 8001cb0:	60bb      	str	r3, [r7, #8]
 8001cb2:	4b08      	ldr	r3, [pc, #32]	; (8001cd4 <HAL_TIM_Base_MspInit+0x120>)
 8001cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cb6:	4a07      	ldr	r2, [pc, #28]	; (8001cd4 <HAL_TIM_Base_MspInit+0x120>)
 8001cb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cbc:	6453      	str	r3, [r2, #68]	; 0x44
 8001cbe:	4b05      	ldr	r3, [pc, #20]	; (8001cd4 <HAL_TIM_Base_MspInit+0x120>)
 8001cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cc6:	60bb      	str	r3, [r7, #8]
 8001cc8:	68bb      	ldr	r3, [r7, #8]
}
 8001cca:	bf00      	nop
 8001ccc:	3720      	adds	r7, #32
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	40023800 	.word	0x40023800
 8001cd8:	40000400 	.word	0x40000400
 8001cdc:	40000800 	.word	0x40000800
 8001ce0:	40000c00 	.word	0x40000c00
 8001ce4:	40001400 	.word	0x40001400
 8001ce8:	40014400 	.word	0x40014400

08001cec <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b08c      	sub	sp, #48	; 0x30
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cf4:	f107 031c 	add.w	r3, r7, #28
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	601a      	str	r2, [r3, #0]
 8001cfc:	605a      	str	r2, [r3, #4]
 8001cfe:	609a      	str	r2, [r3, #8]
 8001d00:	60da      	str	r2, [r3, #12]
 8001d02:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d0c:	d11e      	bne.n	8001d4c <HAL_TIM_MspPostInit+0x60>
=======
 8001be6:	e072      	b.n	8001cce <HAL_TIM_Base_MspInit+0x116>
  else if(tim_baseHandle->Instance==TIM3)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a3b      	ldr	r2, [pc, #236]	; (8001cdc <HAL_TIM_Base_MspInit+0x124>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d10e      	bne.n	8001c10 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	61bb      	str	r3, [r7, #24]
 8001bf6:	4b38      	ldr	r3, [pc, #224]	; (8001cd8 <HAL_TIM_Base_MspInit+0x120>)
 8001bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfa:	4a37      	ldr	r2, [pc, #220]	; (8001cd8 <HAL_TIM_Base_MspInit+0x120>)
 8001bfc:	f043 0302 	orr.w	r3, r3, #2
 8001c00:	6413      	str	r3, [r2, #64]	; 0x40
 8001c02:	4b35      	ldr	r3, [pc, #212]	; (8001cd8 <HAL_TIM_Base_MspInit+0x120>)
 8001c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c06:	f003 0302 	and.w	r3, r3, #2
 8001c0a:	61bb      	str	r3, [r7, #24]
 8001c0c:	69bb      	ldr	r3, [r7, #24]
}
 8001c0e:	e05e      	b.n	8001cce <HAL_TIM_Base_MspInit+0x116>
  else if(tim_baseHandle->Instance==TIM4)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a32      	ldr	r2, [pc, #200]	; (8001ce0 <HAL_TIM_Base_MspInit+0x128>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d116      	bne.n	8001c48 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	617b      	str	r3, [r7, #20]
 8001c1e:	4b2e      	ldr	r3, [pc, #184]	; (8001cd8 <HAL_TIM_Base_MspInit+0x120>)
 8001c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c22:	4a2d      	ldr	r2, [pc, #180]	; (8001cd8 <HAL_TIM_Base_MspInit+0x120>)
 8001c24:	f043 0304 	orr.w	r3, r3, #4
 8001c28:	6413      	str	r3, [r2, #64]	; 0x40
 8001c2a:	4b2b      	ldr	r3, [pc, #172]	; (8001cd8 <HAL_TIM_Base_MspInit+0x120>)
 8001c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2e:	f003 0304 	and.w	r3, r3, #4
 8001c32:	617b      	str	r3, [r7, #20]
 8001c34:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001c36:	2200      	movs	r2, #0
 8001c38:	2100      	movs	r1, #0
 8001c3a:	201e      	movs	r0, #30
 8001c3c:	f001 fc4d 	bl	80034da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001c40:	201e      	movs	r0, #30
 8001c42:	f001 fc66 	bl	8003512 <HAL_NVIC_EnableIRQ>
}
 8001c46:	e042      	b.n	8001cce <HAL_TIM_Base_MspInit+0x116>
  else if(tim_baseHandle->Instance==TIM5)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a25      	ldr	r2, [pc, #148]	; (8001ce4 <HAL_TIM_Base_MspInit+0x12c>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d10e      	bne.n	8001c70 <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001c52:	2300      	movs	r3, #0
 8001c54:	613b      	str	r3, [r7, #16]
 8001c56:	4b20      	ldr	r3, [pc, #128]	; (8001cd8 <HAL_TIM_Base_MspInit+0x120>)
 8001c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c5a:	4a1f      	ldr	r2, [pc, #124]	; (8001cd8 <HAL_TIM_Base_MspInit+0x120>)
 8001c5c:	f043 0308 	orr.w	r3, r3, #8
 8001c60:	6413      	str	r3, [r2, #64]	; 0x40
 8001c62:	4b1d      	ldr	r3, [pc, #116]	; (8001cd8 <HAL_TIM_Base_MspInit+0x120>)
 8001c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c66:	f003 0308 	and.w	r3, r3, #8
 8001c6a:	613b      	str	r3, [r7, #16]
 8001c6c:	693b      	ldr	r3, [r7, #16]
}
 8001c6e:	e02e      	b.n	8001cce <HAL_TIM_Base_MspInit+0x116>
  else if(tim_baseHandle->Instance==TIM7)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a1c      	ldr	r2, [pc, #112]	; (8001ce8 <HAL_TIM_Base_MspInit+0x130>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d116      	bne.n	8001ca8 <HAL_TIM_Base_MspInit+0xf0>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	60fb      	str	r3, [r7, #12]
 8001c7e:	4b16      	ldr	r3, [pc, #88]	; (8001cd8 <HAL_TIM_Base_MspInit+0x120>)
 8001c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c82:	4a15      	ldr	r2, [pc, #84]	; (8001cd8 <HAL_TIM_Base_MspInit+0x120>)
 8001c84:	f043 0320 	orr.w	r3, r3, #32
 8001c88:	6413      	str	r3, [r2, #64]	; 0x40
 8001c8a:	4b13      	ldr	r3, [pc, #76]	; (8001cd8 <HAL_TIM_Base_MspInit+0x120>)
 8001c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c8e:	f003 0320 	and.w	r3, r3, #32
 8001c92:	60fb      	str	r3, [r7, #12]
 8001c94:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001c96:	2200      	movs	r2, #0
 8001c98:	2100      	movs	r1, #0
 8001c9a:	2037      	movs	r0, #55	; 0x37
 8001c9c:	f001 fc1d 	bl	80034da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001ca0:	2037      	movs	r0, #55	; 0x37
 8001ca2:	f001 fc36 	bl	8003512 <HAL_NVIC_EnableIRQ>
}
 8001ca6:	e012      	b.n	8001cce <HAL_TIM_Base_MspInit+0x116>
  else if(tim_baseHandle->Instance==TIM10)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a0f      	ldr	r2, [pc, #60]	; (8001cec <HAL_TIM_Base_MspInit+0x134>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d10d      	bne.n	8001cce <HAL_TIM_Base_MspInit+0x116>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	60bb      	str	r3, [r7, #8]
 8001cb6:	4b08      	ldr	r3, [pc, #32]	; (8001cd8 <HAL_TIM_Base_MspInit+0x120>)
 8001cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cba:	4a07      	ldr	r2, [pc, #28]	; (8001cd8 <HAL_TIM_Base_MspInit+0x120>)
 8001cbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cc0:	6453      	str	r3, [r2, #68]	; 0x44
 8001cc2:	4b05      	ldr	r3, [pc, #20]	; (8001cd8 <HAL_TIM_Base_MspInit+0x120>)
 8001cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cca:	60bb      	str	r3, [r7, #8]
 8001ccc:	68bb      	ldr	r3, [r7, #8]
}
 8001cce:	bf00      	nop
 8001cd0:	3720      	adds	r7, #32
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	40023800 	.word	0x40023800
 8001cdc:	40000400 	.word	0x40000400
 8001ce0:	40000800 	.word	0x40000800
 8001ce4:	40000c00 	.word	0x40000c00
 8001ce8:	40001400 	.word	0x40001400
 8001cec:	40014400 	.word	0x40014400

08001cf0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b08c      	sub	sp, #48	; 0x30
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cf8:	f107 031c 	add.w	r3, r7, #28
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	601a      	str	r2, [r3, #0]
 8001d00:	605a      	str	r2, [r3, #4]
 8001d02:	609a      	str	r2, [r3, #8]
 8001d04:	60da      	str	r2, [r3, #12]
 8001d06:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d10:	d11e      	bne.n	8001d50 <HAL_TIM_MspPostInit+0x60>
>>>>>>> Stashed changes
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
<<<<<<< Updated upstream
 8001d0e:	2300      	movs	r3, #0
 8001d10:	61bb      	str	r3, [r7, #24]
 8001d12:	4b58      	ldr	r3, [pc, #352]	; (8001e74 <HAL_TIM_MspPostInit+0x188>)
 8001d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d16:	4a57      	ldr	r2, [pc, #348]	; (8001e74 <HAL_TIM_MspPostInit+0x188>)
 8001d18:	f043 0301 	orr.w	r3, r3, #1
 8001d1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d1e:	4b55      	ldr	r3, [pc, #340]	; (8001e74 <HAL_TIM_MspPostInit+0x188>)
 8001d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d22:	f003 0301 	and.w	r3, r3, #1
 8001d26:	61bb      	str	r3, [r7, #24]
 8001d28:	69bb      	ldr	r3, [r7, #24]
=======
 8001d12:	2300      	movs	r3, #0
 8001d14:	61bb      	str	r3, [r7, #24]
 8001d16:	4b58      	ldr	r3, [pc, #352]	; (8001e78 <HAL_TIM_MspPostInit+0x188>)
 8001d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1a:	4a57      	ldr	r2, [pc, #348]	; (8001e78 <HAL_TIM_MspPostInit+0x188>)
 8001d1c:	f043 0301 	orr.w	r3, r3, #1
 8001d20:	6313      	str	r3, [r2, #48]	; 0x30
 8001d22:	4b55      	ldr	r3, [pc, #340]	; (8001e78 <HAL_TIM_MspPostInit+0x188>)
 8001d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d26:	f003 0301 	and.w	r3, r3, #1
 8001d2a:	61bb      	str	r3, [r7, #24]
 8001d2c:	69bb      	ldr	r3, [r7, #24]
>>>>>>> Stashed changes
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
<<<<<<< Updated upstream
 8001d2a:	2320      	movs	r3, #32
 8001d2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d2e:	2302      	movs	r3, #2
 8001d30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d32:	2300      	movs	r3, #0
 8001d34:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d36:	2300      	movs	r3, #0
 8001d38:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d3e:	f107 031c 	add.w	r3, r7, #28
 8001d42:	4619      	mov	r1, r3
 8001d44:	484c      	ldr	r0, [pc, #304]	; (8001e78 <HAL_TIM_MspPostInit+0x18c>)
 8001d46:	f003 f91d 	bl	8004f84 <HAL_GPIO_Init>
=======
 8001d2e:	2320      	movs	r3, #32
 8001d30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d32:	2302      	movs	r3, #2
 8001d34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d36:	2300      	movs	r3, #0
 8001d38:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d42:	f107 031c 	add.w	r3, r7, #28
 8001d46:	4619      	mov	r1, r3
 8001d48:	484c      	ldr	r0, [pc, #304]	; (8001e7c <HAL_TIM_MspPostInit+0x18c>)
 8001d4a:	f003 f91d 	bl	8004f88 <HAL_GPIO_Init>
>>>>>>> Stashed changes
  /* USER CODE BEGIN TIM10_MspPostInit 1 */

  /* USER CODE END TIM10_MspPostInit 1 */
  }

}
<<<<<<< Updated upstream
 8001d4a:	e08f      	b.n	8001e6c <HAL_TIM_MspPostInit+0x180>
  else if(timHandle->Instance==TIM3)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a4a      	ldr	r2, [pc, #296]	; (8001e7c <HAL_TIM_MspPostInit+0x190>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d11e      	bne.n	8001d94 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d56:	2300      	movs	r3, #0
 8001d58:	617b      	str	r3, [r7, #20]
 8001d5a:	4b46      	ldr	r3, [pc, #280]	; (8001e74 <HAL_TIM_MspPostInit+0x188>)
 8001d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5e:	4a45      	ldr	r2, [pc, #276]	; (8001e74 <HAL_TIM_MspPostInit+0x188>)
 8001d60:	f043 0304 	orr.w	r3, r3, #4
 8001d64:	6313      	str	r3, [r2, #48]	; 0x30
 8001d66:	4b43      	ldr	r3, [pc, #268]	; (8001e74 <HAL_TIM_MspPostInit+0x188>)
 8001d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6a:	f003 0304 	and.w	r3, r3, #4
 8001d6e:	617b      	str	r3, [r7, #20]
 8001d70:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001d72:	2340      	movs	r3, #64	; 0x40
 8001d74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d76:	2302      	movs	r3, #2
 8001d78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001d82:	2302      	movs	r3, #2
 8001d84:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d86:	f107 031c 	add.w	r3, r7, #28
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	483c      	ldr	r0, [pc, #240]	; (8001e80 <HAL_TIM_MspPostInit+0x194>)
 8001d8e:	f003 f8f9 	bl	8004f84 <HAL_GPIO_Init>
}
 8001d92:	e06b      	b.n	8001e6c <HAL_TIM_MspPostInit+0x180>
  else if(timHandle->Instance==TIM4)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a3a      	ldr	r2, [pc, #232]	; (8001e84 <HAL_TIM_MspPostInit+0x198>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d11f      	bne.n	8001dde <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d9e:	2300      	movs	r3, #0
 8001da0:	613b      	str	r3, [r7, #16]
 8001da2:	4b34      	ldr	r3, [pc, #208]	; (8001e74 <HAL_TIM_MspPostInit+0x188>)
 8001da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da6:	4a33      	ldr	r2, [pc, #204]	; (8001e74 <HAL_TIM_MspPostInit+0x188>)
 8001da8:	f043 0308 	orr.w	r3, r3, #8
 8001dac:	6313      	str	r3, [r2, #48]	; 0x30
 8001dae:	4b31      	ldr	r3, [pc, #196]	; (8001e74 <HAL_TIM_MspPostInit+0x188>)
 8001db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db2:	f003 0308 	and.w	r3, r3, #8
 8001db6:	613b      	str	r3, [r7, #16]
 8001db8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8001dba:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8001dbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dc0:	2302      	movs	r3, #2
 8001dc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001dcc:	2302      	movs	r3, #2
 8001dce:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001dd0:	f107 031c 	add.w	r3, r7, #28
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	482c      	ldr	r0, [pc, #176]	; (8001e88 <HAL_TIM_MspPostInit+0x19c>)
 8001dd8:	f003 f8d4 	bl	8004f84 <HAL_GPIO_Init>
}
 8001ddc:	e046      	b.n	8001e6c <HAL_TIM_MspPostInit+0x180>
  else if(timHandle->Instance==TIM5)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a2a      	ldr	r2, [pc, #168]	; (8001e8c <HAL_TIM_MspPostInit+0x1a0>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d11e      	bne.n	8001e26 <HAL_TIM_MspPostInit+0x13a>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001de8:	2300      	movs	r3, #0
 8001dea:	60fb      	str	r3, [r7, #12]
 8001dec:	4b21      	ldr	r3, [pc, #132]	; (8001e74 <HAL_TIM_MspPostInit+0x188>)
 8001dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df0:	4a20      	ldr	r2, [pc, #128]	; (8001e74 <HAL_TIM_MspPostInit+0x188>)
 8001df2:	f043 0301 	orr.w	r3, r3, #1
 8001df6:	6313      	str	r3, [r2, #48]	; 0x30
 8001df8:	4b1e      	ldr	r3, [pc, #120]	; (8001e74 <HAL_TIM_MspPostInit+0x188>)
 8001dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfc:	f003 0301 	and.w	r3, r3, #1
 8001e00:	60fb      	str	r3, [r7, #12]
 8001e02:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8001e04:	2309      	movs	r3, #9
 8001e06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e08:	2302      	movs	r3, #2
 8001e0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e10:	2300      	movs	r3, #0
 8001e12:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001e14:	2302      	movs	r3, #2
 8001e16:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e18:	f107 031c 	add.w	r3, r7, #28
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	4816      	ldr	r0, [pc, #88]	; (8001e78 <HAL_TIM_MspPostInit+0x18c>)
 8001e20:	f003 f8b0 	bl	8004f84 <HAL_GPIO_Init>
}
 8001e24:	e022      	b.n	8001e6c <HAL_TIM_MspPostInit+0x180>
  else if(timHandle->Instance==TIM10)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a19      	ldr	r2, [pc, #100]	; (8001e90 <HAL_TIM_MspPostInit+0x1a4>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d11d      	bne.n	8001e6c <HAL_TIM_MspPostInit+0x180>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001e30:	2300      	movs	r3, #0
 8001e32:	60bb      	str	r3, [r7, #8]
 8001e34:	4b0f      	ldr	r3, [pc, #60]	; (8001e74 <HAL_TIM_MspPostInit+0x188>)
 8001e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e38:	4a0e      	ldr	r2, [pc, #56]	; (8001e74 <HAL_TIM_MspPostInit+0x188>)
 8001e3a:	f043 0320 	orr.w	r3, r3, #32
 8001e3e:	6313      	str	r3, [r2, #48]	; 0x30
 8001e40:	4b0c      	ldr	r3, [pc, #48]	; (8001e74 <HAL_TIM_MspPostInit+0x188>)
 8001e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e44:	f003 0320 	and.w	r3, r3, #32
 8001e48:	60bb      	str	r3, [r7, #8]
 8001e4a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001e4c:	2340      	movs	r3, #64	; 0x40
 8001e4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e50:	2302      	movs	r3, #2
 8001e52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e54:	2300      	movs	r3, #0
 8001e56:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8001e5c:	2303      	movs	r3, #3
 8001e5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001e60:	f107 031c 	add.w	r3, r7, #28
 8001e64:	4619      	mov	r1, r3
 8001e66:	480b      	ldr	r0, [pc, #44]	; (8001e94 <HAL_TIM_MspPostInit+0x1a8>)
 8001e68:	f003 f88c 	bl	8004f84 <HAL_GPIO_Init>
}
 8001e6c:	bf00      	nop
 8001e6e:	3730      	adds	r7, #48	; 0x30
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	40023800 	.word	0x40023800
 8001e78:	40020000 	.word	0x40020000
 8001e7c:	40000400 	.word	0x40000400
 8001e80:	40020800 	.word	0x40020800
 8001e84:	40000800 	.word	0x40000800
 8001e88:	40020c00 	.word	0x40020c00
 8001e8c:	40000c00 	.word	0x40000c00
 8001e90:	40014400 	.word	0x40014400
 8001e94:	40021400 	.word	0x40021400

08001e98 <MX_USART3_UART_Init>:
=======
 8001d4e:	e08f      	b.n	8001e70 <HAL_TIM_MspPostInit+0x180>
  else if(timHandle->Instance==TIM3)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a4a      	ldr	r2, [pc, #296]	; (8001e80 <HAL_TIM_MspPostInit+0x190>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d11e      	bne.n	8001d98 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	617b      	str	r3, [r7, #20]
 8001d5e:	4b46      	ldr	r3, [pc, #280]	; (8001e78 <HAL_TIM_MspPostInit+0x188>)
 8001d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d62:	4a45      	ldr	r2, [pc, #276]	; (8001e78 <HAL_TIM_MspPostInit+0x188>)
 8001d64:	f043 0304 	orr.w	r3, r3, #4
 8001d68:	6313      	str	r3, [r2, #48]	; 0x30
 8001d6a:	4b43      	ldr	r3, [pc, #268]	; (8001e78 <HAL_TIM_MspPostInit+0x188>)
 8001d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6e:	f003 0304 	and.w	r3, r3, #4
 8001d72:	617b      	str	r3, [r7, #20]
 8001d74:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001d76:	2340      	movs	r3, #64	; 0x40
 8001d78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d7a:	2302      	movs	r3, #2
 8001d7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d82:	2300      	movs	r3, #0
 8001d84:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001d86:	2302      	movs	r3, #2
 8001d88:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d8a:	f107 031c 	add.w	r3, r7, #28
 8001d8e:	4619      	mov	r1, r3
 8001d90:	483c      	ldr	r0, [pc, #240]	; (8001e84 <HAL_TIM_MspPostInit+0x194>)
 8001d92:	f003 f8f9 	bl	8004f88 <HAL_GPIO_Init>
}
 8001d96:	e06b      	b.n	8001e70 <HAL_TIM_MspPostInit+0x180>
  else if(timHandle->Instance==TIM4)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a3a      	ldr	r2, [pc, #232]	; (8001e88 <HAL_TIM_MspPostInit+0x198>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d11f      	bne.n	8001de2 <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001da2:	2300      	movs	r3, #0
 8001da4:	613b      	str	r3, [r7, #16]
 8001da6:	4b34      	ldr	r3, [pc, #208]	; (8001e78 <HAL_TIM_MspPostInit+0x188>)
 8001da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001daa:	4a33      	ldr	r2, [pc, #204]	; (8001e78 <HAL_TIM_MspPostInit+0x188>)
 8001dac:	f043 0308 	orr.w	r3, r3, #8
 8001db0:	6313      	str	r3, [r2, #48]	; 0x30
 8001db2:	4b31      	ldr	r3, [pc, #196]	; (8001e78 <HAL_TIM_MspPostInit+0x188>)
 8001db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db6:	f003 0308 	and.w	r3, r3, #8
 8001dba:	613b      	str	r3, [r7, #16]
 8001dbc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8001dbe:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8001dc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dc4:	2302      	movs	r3, #2
 8001dc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001dd0:	2302      	movs	r3, #2
 8001dd2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001dd4:	f107 031c 	add.w	r3, r7, #28
 8001dd8:	4619      	mov	r1, r3
 8001dda:	482c      	ldr	r0, [pc, #176]	; (8001e8c <HAL_TIM_MspPostInit+0x19c>)
 8001ddc:	f003 f8d4 	bl	8004f88 <HAL_GPIO_Init>
}
 8001de0:	e046      	b.n	8001e70 <HAL_TIM_MspPostInit+0x180>
  else if(timHandle->Instance==TIM5)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a2a      	ldr	r2, [pc, #168]	; (8001e90 <HAL_TIM_MspPostInit+0x1a0>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d11e      	bne.n	8001e2a <HAL_TIM_MspPostInit+0x13a>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dec:	2300      	movs	r3, #0
 8001dee:	60fb      	str	r3, [r7, #12]
 8001df0:	4b21      	ldr	r3, [pc, #132]	; (8001e78 <HAL_TIM_MspPostInit+0x188>)
 8001df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df4:	4a20      	ldr	r2, [pc, #128]	; (8001e78 <HAL_TIM_MspPostInit+0x188>)
 8001df6:	f043 0301 	orr.w	r3, r3, #1
 8001dfa:	6313      	str	r3, [r2, #48]	; 0x30
 8001dfc:	4b1e      	ldr	r3, [pc, #120]	; (8001e78 <HAL_TIM_MspPostInit+0x188>)
 8001dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e00:	f003 0301 	and.w	r3, r3, #1
 8001e04:	60fb      	str	r3, [r7, #12]
 8001e06:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8001e08:	2309      	movs	r3, #9
 8001e0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e0c:	2302      	movs	r3, #2
 8001e0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e10:	2300      	movs	r3, #0
 8001e12:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e14:	2300      	movs	r3, #0
 8001e16:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001e18:	2302      	movs	r3, #2
 8001e1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e1c:	f107 031c 	add.w	r3, r7, #28
 8001e20:	4619      	mov	r1, r3
 8001e22:	4816      	ldr	r0, [pc, #88]	; (8001e7c <HAL_TIM_MspPostInit+0x18c>)
 8001e24:	f003 f8b0 	bl	8004f88 <HAL_GPIO_Init>
}
 8001e28:	e022      	b.n	8001e70 <HAL_TIM_MspPostInit+0x180>
  else if(timHandle->Instance==TIM10)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a19      	ldr	r2, [pc, #100]	; (8001e94 <HAL_TIM_MspPostInit+0x1a4>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d11d      	bne.n	8001e70 <HAL_TIM_MspPostInit+0x180>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001e34:	2300      	movs	r3, #0
 8001e36:	60bb      	str	r3, [r7, #8]
 8001e38:	4b0f      	ldr	r3, [pc, #60]	; (8001e78 <HAL_TIM_MspPostInit+0x188>)
 8001e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3c:	4a0e      	ldr	r2, [pc, #56]	; (8001e78 <HAL_TIM_MspPostInit+0x188>)
 8001e3e:	f043 0320 	orr.w	r3, r3, #32
 8001e42:	6313      	str	r3, [r2, #48]	; 0x30
 8001e44:	4b0c      	ldr	r3, [pc, #48]	; (8001e78 <HAL_TIM_MspPostInit+0x188>)
 8001e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e48:	f003 0320 	and.w	r3, r3, #32
 8001e4c:	60bb      	str	r3, [r7, #8]
 8001e4e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001e50:	2340      	movs	r3, #64	; 0x40
 8001e52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e54:	2302      	movs	r3, #2
 8001e56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8001e60:	2303      	movs	r3, #3
 8001e62:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001e64:	f107 031c 	add.w	r3, r7, #28
 8001e68:	4619      	mov	r1, r3
 8001e6a:	480b      	ldr	r0, [pc, #44]	; (8001e98 <HAL_TIM_MspPostInit+0x1a8>)
 8001e6c:	f003 f88c 	bl	8004f88 <HAL_GPIO_Init>
}
 8001e70:	bf00      	nop
 8001e72:	3730      	adds	r7, #48	; 0x30
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	40023800 	.word	0x40023800
 8001e7c:	40020000 	.word	0x40020000
 8001e80:	40000400 	.word	0x40000400
 8001e84:	40020800 	.word	0x40020800
 8001e88:	40000800 	.word	0x40000800
 8001e8c:	40020c00 	.word	0x40020c00
 8001e90:	40000c00 	.word	0x40000c00
 8001e94:	40014400 	.word	0x40014400
 8001e98:	40021400 	.word	0x40021400

08001e9c <MX_USART3_UART_Init>:
>>>>>>> Stashed changes
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
<<<<<<< Updated upstream
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	af00      	add	r7, sp, #0
=======
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
<<<<<<< Updated upstream
 8001e9c:	4b11      	ldr	r3, [pc, #68]	; (8001ee4 <MX_USART3_UART_Init+0x4c>)
 8001e9e:	4a12      	ldr	r2, [pc, #72]	; (8001ee8 <MX_USART3_UART_Init+0x50>)
 8001ea0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001ea2:	4b10      	ldr	r3, [pc, #64]	; (8001ee4 <MX_USART3_UART_Init+0x4c>)
 8001ea4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ea8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001eaa:	4b0e      	ldr	r3, [pc, #56]	; (8001ee4 <MX_USART3_UART_Init+0x4c>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001eb0:	4b0c      	ldr	r3, [pc, #48]	; (8001ee4 <MX_USART3_UART_Init+0x4c>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001eb6:	4b0b      	ldr	r3, [pc, #44]	; (8001ee4 <MX_USART3_UART_Init+0x4c>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001ebc:	4b09      	ldr	r3, [pc, #36]	; (8001ee4 <MX_USART3_UART_Init+0x4c>)
 8001ebe:	220c      	movs	r2, #12
 8001ec0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ec2:	4b08      	ldr	r3, [pc, #32]	; (8001ee4 <MX_USART3_UART_Init+0x4c>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ec8:	4b06      	ldr	r3, [pc, #24]	; (8001ee4 <MX_USART3_UART_Init+0x4c>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001ece:	4805      	ldr	r0, [pc, #20]	; (8001ee4 <MX_USART3_UART_Init+0x4c>)
 8001ed0:	f006 fb8a 	bl	80085e8 <HAL_UART_Init>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d001      	beq.n	8001ede <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001eda:	f7ff f8e7 	bl	80010ac <Error_Handler>
=======
 8001ea0:	4b11      	ldr	r3, [pc, #68]	; (8001ee8 <MX_USART3_UART_Init+0x4c>)
 8001ea2:	4a12      	ldr	r2, [pc, #72]	; (8001eec <MX_USART3_UART_Init+0x50>)
 8001ea4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001ea6:	4b10      	ldr	r3, [pc, #64]	; (8001ee8 <MX_USART3_UART_Init+0x4c>)
 8001ea8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001eac:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001eae:	4b0e      	ldr	r3, [pc, #56]	; (8001ee8 <MX_USART3_UART_Init+0x4c>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001eb4:	4b0c      	ldr	r3, [pc, #48]	; (8001ee8 <MX_USART3_UART_Init+0x4c>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001eba:	4b0b      	ldr	r3, [pc, #44]	; (8001ee8 <MX_USART3_UART_Init+0x4c>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001ec0:	4b09      	ldr	r3, [pc, #36]	; (8001ee8 <MX_USART3_UART_Init+0x4c>)
 8001ec2:	220c      	movs	r2, #12
 8001ec4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ec6:	4b08      	ldr	r3, [pc, #32]	; (8001ee8 <MX_USART3_UART_Init+0x4c>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ecc:	4b06      	ldr	r3, [pc, #24]	; (8001ee8 <MX_USART3_UART_Init+0x4c>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001ed2:	4805      	ldr	r0, [pc, #20]	; (8001ee8 <MX_USART3_UART_Init+0x4c>)
 8001ed4:	f006 fb70 	bl	80085b8 <HAL_UART_Init>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d001      	beq.n	8001ee2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001ede:	f7ff f8e7 	bl	80010b0 <Error_Handler>
>>>>>>> Stashed changes
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
<<<<<<< Updated upstream
 8001ede:	bf00      	nop
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	20000774 	.word	0x20000774
 8001ee8:	40004800 	.word	0x40004800

08001eec <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b08a      	sub	sp, #40	; 0x28
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ef4:	f107 0314 	add.w	r3, r7, #20
 8001ef8:	2200      	movs	r2, #0
 8001efa:	601a      	str	r2, [r3, #0]
 8001efc:	605a      	str	r2, [r3, #4]
 8001efe:	609a      	str	r2, [r3, #8]
 8001f00:	60da      	str	r2, [r3, #12]
 8001f02:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a1d      	ldr	r2, [pc, #116]	; (8001f80 <HAL_UART_MspInit+0x94>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d134      	bne.n	8001f78 <HAL_UART_MspInit+0x8c>
=======
 8001ee2:	bf00      	nop
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	20000774 	.word	0x20000774
 8001eec:	40004800 	.word	0x40004800

08001ef0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b08a      	sub	sp, #40	; 0x28
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ef8:	f107 0314 	add.w	r3, r7, #20
 8001efc:	2200      	movs	r2, #0
 8001efe:	601a      	str	r2, [r3, #0]
 8001f00:	605a      	str	r2, [r3, #4]
 8001f02:	609a      	str	r2, [r3, #8]
 8001f04:	60da      	str	r2, [r3, #12]
 8001f06:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a1d      	ldr	r2, [pc, #116]	; (8001f84 <HAL_UART_MspInit+0x94>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d134      	bne.n	8001f7c <HAL_UART_MspInit+0x8c>
>>>>>>> Stashed changes
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
<<<<<<< Updated upstream
 8001f0e:	2300      	movs	r3, #0
 8001f10:	613b      	str	r3, [r7, #16]
 8001f12:	4b1c      	ldr	r3, [pc, #112]	; (8001f84 <HAL_UART_MspInit+0x98>)
 8001f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f16:	4a1b      	ldr	r2, [pc, #108]	; (8001f84 <HAL_UART_MspInit+0x98>)
 8001f18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f1c:	6413      	str	r3, [r2, #64]	; 0x40
 8001f1e:	4b19      	ldr	r3, [pc, #100]	; (8001f84 <HAL_UART_MspInit+0x98>)
 8001f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f26:	613b      	str	r3, [r7, #16]
 8001f28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	60fb      	str	r3, [r7, #12]
 8001f2e:	4b15      	ldr	r3, [pc, #84]	; (8001f84 <HAL_UART_MspInit+0x98>)
 8001f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f32:	4a14      	ldr	r2, [pc, #80]	; (8001f84 <HAL_UART_MspInit+0x98>)
 8001f34:	f043 0308 	orr.w	r3, r3, #8
 8001f38:	6313      	str	r3, [r2, #48]	; 0x30
 8001f3a:	4b12      	ldr	r3, [pc, #72]	; (8001f84 <HAL_UART_MspInit+0x98>)
 8001f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3e:	f003 0308 	and.w	r3, r3, #8
 8001f42:	60fb      	str	r3, [r7, #12]
 8001f44:	68fb      	ldr	r3, [r7, #12]
=======
 8001f12:	2300      	movs	r3, #0
 8001f14:	613b      	str	r3, [r7, #16]
 8001f16:	4b1c      	ldr	r3, [pc, #112]	; (8001f88 <HAL_UART_MspInit+0x98>)
 8001f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f1a:	4a1b      	ldr	r2, [pc, #108]	; (8001f88 <HAL_UART_MspInit+0x98>)
 8001f1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f20:	6413      	str	r3, [r2, #64]	; 0x40
 8001f22:	4b19      	ldr	r3, [pc, #100]	; (8001f88 <HAL_UART_MspInit+0x98>)
 8001f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f26:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f2a:	613b      	str	r3, [r7, #16]
 8001f2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f2e:	2300      	movs	r3, #0
 8001f30:	60fb      	str	r3, [r7, #12]
 8001f32:	4b15      	ldr	r3, [pc, #84]	; (8001f88 <HAL_UART_MspInit+0x98>)
 8001f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f36:	4a14      	ldr	r2, [pc, #80]	; (8001f88 <HAL_UART_MspInit+0x98>)
 8001f38:	f043 0308 	orr.w	r3, r3, #8
 8001f3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f3e:	4b12      	ldr	r3, [pc, #72]	; (8001f88 <HAL_UART_MspInit+0x98>)
 8001f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f42:	f003 0308 	and.w	r3, r3, #8
 8001f46:	60fb      	str	r3, [r7, #12]
 8001f48:	68fb      	ldr	r3, [r7, #12]
>>>>>>> Stashed changes
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
<<<<<<< Updated upstream
 8001f46:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001f4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f4c:	2302      	movs	r3, #2
 8001f4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f50:	2300      	movs	r3, #0
 8001f52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f54:	2303      	movs	r3, #3
 8001f56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001f58:	2307      	movs	r3, #7
 8001f5a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f5c:	f107 0314 	add.w	r3, r7, #20
 8001f60:	4619      	mov	r1, r3
 8001f62:	4809      	ldr	r0, [pc, #36]	; (8001f88 <HAL_UART_MspInit+0x9c>)
 8001f64:	f003 f80e 	bl	8004f84 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001f68:	2200      	movs	r2, #0
 8001f6a:	2100      	movs	r1, #0
 8001f6c:	2027      	movs	r0, #39	; 0x27
 8001f6e:	f001 fab2 	bl	80034d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001f72:	2027      	movs	r0, #39	; 0x27
 8001f74:	f001 facb 	bl	800350e <HAL_NVIC_EnableIRQ>
=======
 8001f4a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001f4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f50:	2302      	movs	r3, #2
 8001f52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f54:	2300      	movs	r3, #0
 8001f56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f58:	2303      	movs	r3, #3
 8001f5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001f5c:	2307      	movs	r3, #7
 8001f5e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f60:	f107 0314 	add.w	r3, r7, #20
 8001f64:	4619      	mov	r1, r3
 8001f66:	4809      	ldr	r0, [pc, #36]	; (8001f8c <HAL_UART_MspInit+0x9c>)
 8001f68:	f003 f80e 	bl	8004f88 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	2100      	movs	r1, #0
 8001f70:	2027      	movs	r0, #39	; 0x27
 8001f72:	f001 fab2 	bl	80034da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001f76:	2027      	movs	r0, #39	; 0x27
 8001f78:	f001 facb 	bl	8003512 <HAL_NVIC_EnableIRQ>
>>>>>>> Stashed changes
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
<<<<<<< Updated upstream
 8001f78:	bf00      	nop
 8001f7a:	3728      	adds	r7, #40	; 0x28
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	40004800 	.word	0x40004800
 8001f84:	40023800 	.word	0x40023800
 8001f88:	40020c00 	.word	0x40020c00

08001f8c <Reset_Handler>:
=======
 8001f7c:	bf00      	nop
 8001f7e:	3728      	adds	r7, #40	; 0x28
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	40004800 	.word	0x40004800
 8001f88:	40023800 	.word	0x40023800
 8001f8c:	40020c00 	.word	0x40020c00

08001f90 <Reset_Handler>:
>>>>>>> Stashed changes

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
<<<<<<< Updated upstream
 8001f8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001fc4 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f90:	480d      	ldr	r0, [pc, #52]	; (8001fc8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001f92:	490e      	ldr	r1, [pc, #56]	; (8001fcc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001f94:	4a0e      	ldr	r2, [pc, #56]	; (8001fd0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001f96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f98:	e002      	b.n	8001fa0 <LoopCopyDataInit>

08001f9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f9e:	3304      	adds	r3, #4

08001fa0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fa0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fa2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fa4:	d3f9      	bcc.n	8001f9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fa6:	4a0b      	ldr	r2, [pc, #44]	; (8001fd4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001fa8:	4c0b      	ldr	r4, [pc, #44]	; (8001fd8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001faa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fac:	e001      	b.n	8001fb2 <LoopFillZerobss>

08001fae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fb0:	3204      	adds	r2, #4

08001fb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fb4:	d3fb      	bcc.n	8001fae <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001fb6:	f7ff fb65 	bl	8001684 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001fba:	f012 fa81 	bl	80144c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001fbe:	f7fe fee3 	bl	8000d88 <main>
  bx  lr    
 8001fc2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001fc4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001fc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fcc:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001fd0:	080185b0 	.word	0x080185b0
  ldr r2, =_sbss
 8001fd4:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001fd8:	200072cc 	.word	0x200072cc

08001fdc <ADC_IRQHandler>:
=======
 8001f90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001fc8 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f94:	480d      	ldr	r0, [pc, #52]	; (8001fcc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001f96:	490e      	ldr	r1, [pc, #56]	; (8001fd0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001f98:	4a0e      	ldr	r2, [pc, #56]	; (8001fd4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001f9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f9c:	e002      	b.n	8001fa4 <LoopCopyDataInit>

08001f9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fa0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fa2:	3304      	adds	r3, #4

08001fa4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fa4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fa6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fa8:	d3f9      	bcc.n	8001f9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001faa:	4a0b      	ldr	r2, [pc, #44]	; (8001fd8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001fac:	4c0b      	ldr	r4, [pc, #44]	; (8001fdc <LoopFillZerobss+0x26>)
  movs r3, #0
 8001fae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fb0:	e001      	b.n	8001fb6 <LoopFillZerobss>

08001fb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fb4:	3204      	adds	r2, #4

08001fb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fb8:	d3fb      	bcc.n	8001fb2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001fba:	f7ff fb65 	bl	8001688 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001fbe:	f012 fa67 	bl	8014490 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001fc2:	f7fe fee1 	bl	8000d88 <main>
  bx  lr    
 8001fc6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001fc8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001fcc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fd0:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001fd4:	08018594 	.word	0x08018594
  ldr r2, =_sbss
 8001fd8:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001fdc:	200072cc 	.word	0x200072cc

08001fe0 <ADC_IRQHandler>:
>>>>>>> Stashed changes
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
<<<<<<< Updated upstream
 8001fdc:	e7fe      	b.n	8001fdc <ADC_IRQHandler>
	...

08001fe0 <HAL_Init>:
=======
 8001fe0:	e7fe      	b.n	8001fe0 <ADC_IRQHandler>
	...

08001fe4 <HAL_Init>:
>>>>>>> Stashed changes
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
<<<<<<< Updated upstream
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001fe4:	4b0e      	ldr	r3, [pc, #56]	; (8002020 <HAL_Init+0x40>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a0d      	ldr	r2, [pc, #52]	; (8002020 <HAL_Init+0x40>)
 8001fea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001fee:	6013      	str	r3, [r2, #0]
=======
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001fe8:	4b0e      	ldr	r3, [pc, #56]	; (8002024 <HAL_Init+0x40>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a0d      	ldr	r2, [pc, #52]	; (8002024 <HAL_Init+0x40>)
 8001fee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ff2:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
<<<<<<< Updated upstream
 8001ff0:	4b0b      	ldr	r3, [pc, #44]	; (8002020 <HAL_Init+0x40>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a0a      	ldr	r2, [pc, #40]	; (8002020 <HAL_Init+0x40>)
 8001ff6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ffa:	6013      	str	r3, [r2, #0]
=======
 8001ff4:	4b0b      	ldr	r3, [pc, #44]	; (8002024 <HAL_Init+0x40>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a0a      	ldr	r2, [pc, #40]	; (8002024 <HAL_Init+0x40>)
 8001ffa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ffe:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
<<<<<<< Updated upstream
 8001ffc:	4b08      	ldr	r3, [pc, #32]	; (8002020 <HAL_Init+0x40>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a07      	ldr	r2, [pc, #28]	; (8002020 <HAL_Init+0x40>)
 8002002:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002006:	6013      	str	r3, [r2, #0]
=======
 8002000:	4b08      	ldr	r3, [pc, #32]	; (8002024 <HAL_Init+0x40>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a07      	ldr	r2, [pc, #28]	; (8002024 <HAL_Init+0x40>)
 8002006:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800200a:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
<<<<<<< Updated upstream
 8002008:	2003      	movs	r0, #3
 800200a:	f001 fa59 	bl	80034c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800200e:	200f      	movs	r0, #15
 8002010:	f000 f808 	bl	8002024 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002014:	f7ff f9de 	bl	80013d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002018:	2300      	movs	r3, #0
}
 800201a:	4618      	mov	r0, r3
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	40023c00 	.word	0x40023c00

08002024 <HAL_InitTick>:
=======
 800200c:	2003      	movs	r0, #3
 800200e:	f001 fa59 	bl	80034c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002012:	200f      	movs	r0, #15
 8002014:	f000 f808 	bl	8002028 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002018:	f7ff f9de 	bl	80013d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800201c:	2300      	movs	r3, #0
}
 800201e:	4618      	mov	r0, r3
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	40023c00 	.word	0x40023c00

08002028 <HAL_InitTick>:
>>>>>>> Stashed changes
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
<<<<<<< Updated upstream
 8002024:	b580      	push	{r7, lr}
 8002026:	b082      	sub	sp, #8
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800202c:	4b12      	ldr	r3, [pc, #72]	; (8002078 <HAL_InitTick+0x54>)
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	4b12      	ldr	r3, [pc, #72]	; (800207c <HAL_InitTick+0x58>)
 8002032:	781b      	ldrb	r3, [r3, #0]
 8002034:	4619      	mov	r1, r3
 8002036:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800203a:	fbb3 f3f1 	udiv	r3, r3, r1
 800203e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002042:	4618      	mov	r0, r3
 8002044:	f001 fa71 	bl	800352a <HAL_SYSTICK_Config>
 8002048:	4603      	mov	r3, r0
 800204a:	2b00      	cmp	r3, #0
 800204c:	d001      	beq.n	8002052 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e00e      	b.n	8002070 <HAL_InitTick+0x4c>
=======
 8002028:	b580      	push	{r7, lr}
 800202a:	b082      	sub	sp, #8
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002030:	4b12      	ldr	r3, [pc, #72]	; (800207c <HAL_InitTick+0x54>)
 8002032:	681a      	ldr	r2, [r3, #0]
 8002034:	4b12      	ldr	r3, [pc, #72]	; (8002080 <HAL_InitTick+0x58>)
 8002036:	781b      	ldrb	r3, [r3, #0]
 8002038:	4619      	mov	r1, r3
 800203a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800203e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002042:	fbb2 f3f3 	udiv	r3, r2, r3
 8002046:	4618      	mov	r0, r3
 8002048:	f001 fa71 	bl	800352e <HAL_SYSTICK_Config>
 800204c:	4603      	mov	r3, r0
 800204e:	2b00      	cmp	r3, #0
 8002050:	d001      	beq.n	8002056 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	e00e      	b.n	8002074 <HAL_InitTick+0x4c>
>>>>>>> Stashed changes
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
<<<<<<< Updated upstream
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2b0f      	cmp	r3, #15
 8002056:	d80a      	bhi.n	800206e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002058:	2200      	movs	r2, #0
 800205a:	6879      	ldr	r1, [r7, #4]
 800205c:	f04f 30ff 	mov.w	r0, #4294967295
 8002060:	f001 fa39 	bl	80034d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002064:	4a06      	ldr	r2, [pc, #24]	; (8002080 <HAL_InitTick+0x5c>)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6013      	str	r3, [r2, #0]
=======
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2b0f      	cmp	r3, #15
 800205a:	d80a      	bhi.n	8002072 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800205c:	2200      	movs	r2, #0
 800205e:	6879      	ldr	r1, [r7, #4]
 8002060:	f04f 30ff 	mov.w	r0, #4294967295
 8002064:	f001 fa39 	bl	80034da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002068:	4a06      	ldr	r2, [pc, #24]	; (8002084 <HAL_InitTick+0x5c>)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
<<<<<<< Updated upstream
 800206a:	2300      	movs	r3, #0
 800206c:	e000      	b.n	8002070 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800206e:	2301      	movs	r3, #1
}
 8002070:	4618      	mov	r0, r3
 8002072:	3708      	adds	r7, #8
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}
 8002078:	20000000 	.word	0x20000000
 800207c:	20000008 	.word	0x20000008
 8002080:	20000004 	.word	0x20000004

08002084 <HAL_IncTick>:
=======
 800206e:	2300      	movs	r3, #0
 8002070:	e000      	b.n	8002074 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
}
 8002074:	4618      	mov	r0, r3
 8002076:	3708      	adds	r7, #8
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}
 800207c:	20000000 	.word	0x20000000
 8002080:	20000008 	.word	0x20000008
 8002084:	20000004 	.word	0x20000004

08002088 <HAL_IncTick>:
>>>>>>> Stashed changes
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
<<<<<<< Updated upstream
 8002084:	b480      	push	{r7}
 8002086:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002088:	4b06      	ldr	r3, [pc, #24]	; (80020a4 <HAL_IncTick+0x20>)
 800208a:	781b      	ldrb	r3, [r3, #0]
 800208c:	461a      	mov	r2, r3
 800208e:	4b06      	ldr	r3, [pc, #24]	; (80020a8 <HAL_IncTick+0x24>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4413      	add	r3, r2
 8002094:	4a04      	ldr	r2, [pc, #16]	; (80020a8 <HAL_IncTick+0x24>)
 8002096:	6013      	str	r3, [r2, #0]
}
 8002098:	bf00      	nop
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr
 80020a2:	bf00      	nop
 80020a4:	20000008 	.word	0x20000008
 80020a8:	200007b8 	.word	0x200007b8

080020ac <HAL_GetTick>:
=======
 8002088:	b480      	push	{r7}
 800208a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800208c:	4b06      	ldr	r3, [pc, #24]	; (80020a8 <HAL_IncTick+0x20>)
 800208e:	781b      	ldrb	r3, [r3, #0]
 8002090:	461a      	mov	r2, r3
 8002092:	4b06      	ldr	r3, [pc, #24]	; (80020ac <HAL_IncTick+0x24>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4413      	add	r3, r2
 8002098:	4a04      	ldr	r2, [pc, #16]	; (80020ac <HAL_IncTick+0x24>)
 800209a:	6013      	str	r3, [r2, #0]
}
 800209c:	bf00      	nop
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr
 80020a6:	bf00      	nop
 80020a8:	20000008 	.word	0x20000008
 80020ac:	200007b8 	.word	0x200007b8

080020b0 <HAL_GetTick>:
>>>>>>> Stashed changes
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
<<<<<<< Updated upstream
 80020ac:	b480      	push	{r7}
 80020ae:	af00      	add	r7, sp, #0
  return uwTick;
 80020b0:	4b03      	ldr	r3, [pc, #12]	; (80020c0 <HAL_GetTick+0x14>)
 80020b2:	681b      	ldr	r3, [r3, #0]
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr
 80020be:	bf00      	nop
 80020c0:	200007b8 	.word	0x200007b8

080020c4 <HAL_Delay>:
=======
 80020b0:	b480      	push	{r7}
 80020b2:	af00      	add	r7, sp, #0
  return uwTick;
 80020b4:	4b03      	ldr	r3, [pc, #12]	; (80020c4 <HAL_GetTick+0x14>)
 80020b6:	681b      	ldr	r3, [r3, #0]
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr
 80020c2:	bf00      	nop
 80020c4:	200007b8 	.word	0x200007b8

080020c8 <HAL_Delay>:
>>>>>>> Stashed changes
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
<<<<<<< Updated upstream
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b084      	sub	sp, #16
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020cc:	f7ff ffee 	bl	80020ac <HAL_GetTick>
 80020d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020dc:	d005      	beq.n	80020ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80020de:	4b0a      	ldr	r3, [pc, #40]	; (8002108 <HAL_Delay+0x44>)
 80020e0:	781b      	ldrb	r3, [r3, #0]
 80020e2:	461a      	mov	r2, r3
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	4413      	add	r3, r2
 80020e8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80020ea:	bf00      	nop
 80020ec:	f7ff ffde 	bl	80020ac <HAL_GetTick>
 80020f0:	4602      	mov	r2, r0
 80020f2:	68bb      	ldr	r3, [r7, #8]
 80020f4:	1ad3      	subs	r3, r2, r3
 80020f6:	68fa      	ldr	r2, [r7, #12]
 80020f8:	429a      	cmp	r2, r3
 80020fa:	d8f7      	bhi.n	80020ec <HAL_Delay+0x28>
  {
  }
}
 80020fc:	bf00      	nop
 80020fe:	bf00      	nop
 8002100:	3710      	adds	r7, #16
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	20000008 	.word	0x20000008

0800210c <HAL_ADC_Init>:
=======
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b084      	sub	sp, #16
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020d0:	f7ff ffee 	bl	80020b0 <HAL_GetTick>
 80020d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020e0:	d005      	beq.n	80020ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80020e2:	4b0a      	ldr	r3, [pc, #40]	; (800210c <HAL_Delay+0x44>)
 80020e4:	781b      	ldrb	r3, [r3, #0]
 80020e6:	461a      	mov	r2, r3
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	4413      	add	r3, r2
 80020ec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80020ee:	bf00      	nop
 80020f0:	f7ff ffde 	bl	80020b0 <HAL_GetTick>
 80020f4:	4602      	mov	r2, r0
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	1ad3      	subs	r3, r2, r3
 80020fa:	68fa      	ldr	r2, [r7, #12]
 80020fc:	429a      	cmp	r2, r3
 80020fe:	d8f7      	bhi.n	80020f0 <HAL_Delay+0x28>
  {
  }
}
 8002100:	bf00      	nop
 8002102:	bf00      	nop
 8002104:	3710      	adds	r7, #16
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	20000008 	.word	0x20000008

08002110 <HAL_ADC_Init>:
>>>>>>> Stashed changes
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
<<<<<<< Updated upstream
 800210c:	b580      	push	{r7, lr}
 800210e:	b084      	sub	sp, #16
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002114:	2300      	movs	r3, #0
 8002116:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d101      	bne.n	8002122 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	e033      	b.n	800218a <HAL_ADC_Init+0x7e>
=======
 8002110:	b580      	push	{r7, lr}
 8002112:	b084      	sub	sp, #16
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002118:	2300      	movs	r3, #0
 800211a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d101      	bne.n	8002126 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e033      	b.n	800218e <HAL_ADC_Init+0x7e>
>>>>>>> Stashed changes
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
<<<<<<< Updated upstream
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002126:	2b00      	cmp	r3, #0
 8002128:	d109      	bne.n	800213e <HAL_ADC_Init+0x32>
=======
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212a:	2b00      	cmp	r3, #0
 800212c:	d109      	bne.n	8002142 <HAL_ADC_Init+0x32>
>>>>>>> Stashed changes

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
<<<<<<< Updated upstream
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	f7fe faa8 	bl	8000680 <HAL_ADC_MspInit>
=======
 800212e:	6878      	ldr	r0, [r7, #4]
 8002130:	f7fe faa6 	bl	8000680 <HAL_ADC_MspInit>
>>>>>>> Stashed changes
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
<<<<<<< Updated upstream
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2200      	movs	r2, #0
 8002134:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2200      	movs	r2, #0
 800213a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2200      	movs	r2, #0
 8002138:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2200      	movs	r2, #0
 800213e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
>>>>>>> Stashed changes
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
<<<<<<< Updated upstream
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002142:	f003 0310 	and.w	r3, r3, #16
 8002146:	2b00      	cmp	r3, #0
 8002148:	d118      	bne.n	800217c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002152:	f023 0302 	bic.w	r3, r3, #2
 8002156:	f043 0202 	orr.w	r2, r3, #2
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	641a      	str	r2, [r3, #64]	; 0x40
=======
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002146:	f003 0310 	and.w	r3, r3, #16
 800214a:	2b00      	cmp	r3, #0
 800214c:	d118      	bne.n	8002180 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002152:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002156:	f023 0302 	bic.w	r3, r3, #2
 800215a:	f043 0202 	orr.w	r2, r3, #2
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	641a      	str	r2, [r3, #64]	; 0x40
>>>>>>> Stashed changes
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
<<<<<<< Updated upstream
 800215e:	6878      	ldr	r0, [r7, #4]
 8002160:	f000 f94a 	bl	80023f8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2200      	movs	r2, #0
 8002168:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216e:	f023 0303 	bic.w	r3, r3, #3
 8002172:	f043 0201 	orr.w	r2, r3, #1
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	641a      	str	r2, [r3, #64]	; 0x40
 800217a:	e001      	b.n	8002180 <HAL_ADC_Init+0x74>
=======
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	f000 f94a 	bl	80023fc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2200      	movs	r2, #0
 800216c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002172:	f023 0303 	bic.w	r3, r3, #3
 8002176:	f043 0201 	orr.w	r2, r3, #1
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	641a      	str	r2, [r3, #64]	; 0x40
 800217e:	e001      	b.n	8002184 <HAL_ADC_Init+0x74>
>>>>>>> Stashed changes
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
<<<<<<< Updated upstream
 800217c:	2301      	movs	r3, #1
 800217e:	73fb      	strb	r3, [r7, #15]
=======
 8002180:	2301      	movs	r3, #1
 8002182:	73fb      	strb	r3, [r7, #15]
>>>>>>> Stashed changes
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
<<<<<<< Updated upstream
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2200      	movs	r2, #0
 8002184:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002188:	7bfb      	ldrb	r3, [r7, #15]
}
 800218a:	4618      	mov	r0, r3
 800218c:	3710      	adds	r7, #16
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}
	...

08002194 <HAL_ADC_ConfigChannel>:
=======
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2200      	movs	r2, #0
 8002188:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800218c:	7bfb      	ldrb	r3, [r7, #15]
}
 800218e:	4618      	mov	r0, r3
 8002190:	3710      	adds	r7, #16
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
	...

08002198 <HAL_ADC_ConfigChannel>:
>>>>>>> Stashed changes
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
<<<<<<< Updated upstream
 8002194:	b480      	push	{r7}
 8002196:	b085      	sub	sp, #20
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
 800219c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800219e:	2300      	movs	r3, #0
 80021a0:	60bb      	str	r3, [r7, #8]
=======
 8002198:	b480      	push	{r7}
 800219a:	b085      	sub	sp, #20
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
 80021a0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80021a2:	2300      	movs	r3, #0
 80021a4:	60bb      	str	r3, [r7, #8]
>>>>>>> Stashed changes
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
<<<<<<< Updated upstream
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021a8:	2b01      	cmp	r3, #1
 80021aa:	d101      	bne.n	80021b0 <HAL_ADC_ConfigChannel+0x1c>
 80021ac:	2302      	movs	r3, #2
 80021ae:	e113      	b.n	80023d8 <HAL_ADC_ConfigChannel+0x244>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2201      	movs	r2, #1
 80021b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	2b09      	cmp	r3, #9
 80021be:	d925      	bls.n	800220c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	68d9      	ldr	r1, [r3, #12]
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	b29b      	uxth	r3, r3
 80021cc:	461a      	mov	r2, r3
 80021ce:	4613      	mov	r3, r2
 80021d0:	005b      	lsls	r3, r3, #1
 80021d2:	4413      	add	r3, r2
 80021d4:	3b1e      	subs	r3, #30
 80021d6:	2207      	movs	r2, #7
 80021d8:	fa02 f303 	lsl.w	r3, r2, r3
 80021dc:	43da      	mvns	r2, r3
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	400a      	ands	r2, r1
 80021e4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	68d9      	ldr	r1, [r3, #12]
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	689a      	ldr	r2, [r3, #8]
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	b29b      	uxth	r3, r3
 80021f6:	4618      	mov	r0, r3
 80021f8:	4603      	mov	r3, r0
 80021fa:	005b      	lsls	r3, r3, #1
 80021fc:	4403      	add	r3, r0
 80021fe:	3b1e      	subs	r3, #30
 8002200:	409a      	lsls	r2, r3
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	430a      	orrs	r2, r1
 8002208:	60da      	str	r2, [r3, #12]
 800220a:	e022      	b.n	8002252 <HAL_ADC_ConfigChannel+0xbe>
=======
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	d101      	bne.n	80021b4 <HAL_ADC_ConfigChannel+0x1c>
 80021b0:	2302      	movs	r3, #2
 80021b2:	e113      	b.n	80023dc <HAL_ADC_ConfigChannel+0x244>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2201      	movs	r2, #1
 80021b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	2b09      	cmp	r3, #9
 80021c2:	d925      	bls.n	8002210 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	68d9      	ldr	r1, [r3, #12]
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	b29b      	uxth	r3, r3
 80021d0:	461a      	mov	r2, r3
 80021d2:	4613      	mov	r3, r2
 80021d4:	005b      	lsls	r3, r3, #1
 80021d6:	4413      	add	r3, r2
 80021d8:	3b1e      	subs	r3, #30
 80021da:	2207      	movs	r2, #7
 80021dc:	fa02 f303 	lsl.w	r3, r2, r3
 80021e0:	43da      	mvns	r2, r3
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	400a      	ands	r2, r1
 80021e8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	68d9      	ldr	r1, [r3, #12]
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	689a      	ldr	r2, [r3, #8]
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	b29b      	uxth	r3, r3
 80021fa:	4618      	mov	r0, r3
 80021fc:	4603      	mov	r3, r0
 80021fe:	005b      	lsls	r3, r3, #1
 8002200:	4403      	add	r3, r0
 8002202:	3b1e      	subs	r3, #30
 8002204:	409a      	lsls	r2, r3
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	430a      	orrs	r2, r1
 800220c:	60da      	str	r2, [r3, #12]
 800220e:	e022      	b.n	8002256 <HAL_ADC_ConfigChannel+0xbe>
>>>>>>> Stashed changes
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
<<<<<<< Updated upstream
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	6919      	ldr	r1, [r3, #16]
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	b29b      	uxth	r3, r3
 8002218:	461a      	mov	r2, r3
 800221a:	4613      	mov	r3, r2
 800221c:	005b      	lsls	r3, r3, #1
 800221e:	4413      	add	r3, r2
 8002220:	2207      	movs	r2, #7
 8002222:	fa02 f303 	lsl.w	r3, r2, r3
 8002226:	43da      	mvns	r2, r3
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	400a      	ands	r2, r1
 800222e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	6919      	ldr	r1, [r3, #16]
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	689a      	ldr	r2, [r3, #8]
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	b29b      	uxth	r3, r3
 8002240:	4618      	mov	r0, r3
 8002242:	4603      	mov	r3, r0
 8002244:	005b      	lsls	r3, r3, #1
 8002246:	4403      	add	r3, r0
 8002248:	409a      	lsls	r2, r3
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	430a      	orrs	r2, r1
 8002250:	611a      	str	r2, [r3, #16]
=======
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	6919      	ldr	r1, [r3, #16]
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	b29b      	uxth	r3, r3
 800221c:	461a      	mov	r2, r3
 800221e:	4613      	mov	r3, r2
 8002220:	005b      	lsls	r3, r3, #1
 8002222:	4413      	add	r3, r2
 8002224:	2207      	movs	r2, #7
 8002226:	fa02 f303 	lsl.w	r3, r2, r3
 800222a:	43da      	mvns	r2, r3
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	400a      	ands	r2, r1
 8002232:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	6919      	ldr	r1, [r3, #16]
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	689a      	ldr	r2, [r3, #8]
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	b29b      	uxth	r3, r3
 8002244:	4618      	mov	r0, r3
 8002246:	4603      	mov	r3, r0
 8002248:	005b      	lsls	r3, r3, #1
 800224a:	4403      	add	r3, r0
 800224c:	409a      	lsls	r2, r3
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	430a      	orrs	r2, r1
 8002254:	611a      	str	r2, [r3, #16]
>>>>>>> Stashed changes
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
<<<<<<< Updated upstream
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	2b06      	cmp	r3, #6
 8002258:	d824      	bhi.n	80022a4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	685a      	ldr	r2, [r3, #4]
 8002264:	4613      	mov	r3, r2
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	4413      	add	r3, r2
 800226a:	3b05      	subs	r3, #5
 800226c:	221f      	movs	r2, #31
 800226e:	fa02 f303 	lsl.w	r3, r2, r3
 8002272:	43da      	mvns	r2, r3
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	400a      	ands	r2, r1
 800227a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	b29b      	uxth	r3, r3
 8002288:	4618      	mov	r0, r3
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	685a      	ldr	r2, [r3, #4]
 800228e:	4613      	mov	r3, r2
 8002290:	009b      	lsls	r3, r3, #2
 8002292:	4413      	add	r3, r2
 8002294:	3b05      	subs	r3, #5
 8002296:	fa00 f203 	lsl.w	r2, r0, r3
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	430a      	orrs	r2, r1
 80022a0:	635a      	str	r2, [r3, #52]	; 0x34
 80022a2:	e04c      	b.n	800233e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	2b0c      	cmp	r3, #12
 80022aa:	d824      	bhi.n	80022f6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	685a      	ldr	r2, [r3, #4]
 80022b6:	4613      	mov	r3, r2
 80022b8:	009b      	lsls	r3, r3, #2
 80022ba:	4413      	add	r3, r2
 80022bc:	3b23      	subs	r3, #35	; 0x23
 80022be:	221f      	movs	r2, #31
 80022c0:	fa02 f303 	lsl.w	r3, r2, r3
 80022c4:	43da      	mvns	r2, r3
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	400a      	ands	r2, r1
 80022cc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	b29b      	uxth	r3, r3
 80022da:	4618      	mov	r0, r3
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	685a      	ldr	r2, [r3, #4]
 80022e0:	4613      	mov	r3, r2
 80022e2:	009b      	lsls	r3, r3, #2
 80022e4:	4413      	add	r3, r2
 80022e6:	3b23      	subs	r3, #35	; 0x23
 80022e8:	fa00 f203 	lsl.w	r2, r0, r3
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	430a      	orrs	r2, r1
 80022f2:	631a      	str	r2, [r3, #48]	; 0x30
 80022f4:	e023      	b.n	800233e <HAL_ADC_ConfigChannel+0x1aa>
=======
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	2b06      	cmp	r3, #6
 800225c:	d824      	bhi.n	80022a8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	685a      	ldr	r2, [r3, #4]
 8002268:	4613      	mov	r3, r2
 800226a:	009b      	lsls	r3, r3, #2
 800226c:	4413      	add	r3, r2
 800226e:	3b05      	subs	r3, #5
 8002270:	221f      	movs	r2, #31
 8002272:	fa02 f303 	lsl.w	r3, r2, r3
 8002276:	43da      	mvns	r2, r3
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	400a      	ands	r2, r1
 800227e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	b29b      	uxth	r3, r3
 800228c:	4618      	mov	r0, r3
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	685a      	ldr	r2, [r3, #4]
 8002292:	4613      	mov	r3, r2
 8002294:	009b      	lsls	r3, r3, #2
 8002296:	4413      	add	r3, r2
 8002298:	3b05      	subs	r3, #5
 800229a:	fa00 f203 	lsl.w	r2, r0, r3
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	430a      	orrs	r2, r1
 80022a4:	635a      	str	r2, [r3, #52]	; 0x34
 80022a6:	e04c      	b.n	8002342 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	2b0c      	cmp	r3, #12
 80022ae:	d824      	bhi.n	80022fa <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	685a      	ldr	r2, [r3, #4]
 80022ba:	4613      	mov	r3, r2
 80022bc:	009b      	lsls	r3, r3, #2
 80022be:	4413      	add	r3, r2
 80022c0:	3b23      	subs	r3, #35	; 0x23
 80022c2:	221f      	movs	r2, #31
 80022c4:	fa02 f303 	lsl.w	r3, r2, r3
 80022c8:	43da      	mvns	r2, r3
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	400a      	ands	r2, r1
 80022d0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	b29b      	uxth	r3, r3
 80022de:	4618      	mov	r0, r3
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	685a      	ldr	r2, [r3, #4]
 80022e4:	4613      	mov	r3, r2
 80022e6:	009b      	lsls	r3, r3, #2
 80022e8:	4413      	add	r3, r2
 80022ea:	3b23      	subs	r3, #35	; 0x23
 80022ec:	fa00 f203 	lsl.w	r2, r0, r3
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	430a      	orrs	r2, r1
 80022f6:	631a      	str	r2, [r3, #48]	; 0x30
 80022f8:	e023      	b.n	8002342 <HAL_ADC_ConfigChannel+0x1aa>
>>>>>>> Stashed changes
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
<<<<<<< Updated upstream
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	685a      	ldr	r2, [r3, #4]
 8002300:	4613      	mov	r3, r2
 8002302:	009b      	lsls	r3, r3, #2
 8002304:	4413      	add	r3, r2
 8002306:	3b41      	subs	r3, #65	; 0x41
 8002308:	221f      	movs	r2, #31
 800230a:	fa02 f303 	lsl.w	r3, r2, r3
 800230e:	43da      	mvns	r2, r3
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	400a      	ands	r2, r1
 8002316:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	b29b      	uxth	r3, r3
 8002324:	4618      	mov	r0, r3
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	685a      	ldr	r2, [r3, #4]
 800232a:	4613      	mov	r3, r2
 800232c:	009b      	lsls	r3, r3, #2
 800232e:	4413      	add	r3, r2
 8002330:	3b41      	subs	r3, #65	; 0x41
 8002332:	fa00 f203 	lsl.w	r2, r0, r3
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	430a      	orrs	r2, r1
 800233c:	62da      	str	r2, [r3, #44]	; 0x2c
=======
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	685a      	ldr	r2, [r3, #4]
 8002304:	4613      	mov	r3, r2
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	4413      	add	r3, r2
 800230a:	3b41      	subs	r3, #65	; 0x41
 800230c:	221f      	movs	r2, #31
 800230e:	fa02 f303 	lsl.w	r3, r2, r3
 8002312:	43da      	mvns	r2, r3
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	400a      	ands	r2, r1
 800231a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	b29b      	uxth	r3, r3
 8002328:	4618      	mov	r0, r3
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	685a      	ldr	r2, [r3, #4]
 800232e:	4613      	mov	r3, r2
 8002330:	009b      	lsls	r3, r3, #2
 8002332:	4413      	add	r3, r2
 8002334:	3b41      	subs	r3, #65	; 0x41
 8002336:	fa00 f203 	lsl.w	r2, r0, r3
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	430a      	orrs	r2, r1
 8002340:	62da      	str	r2, [r3, #44]	; 0x2c
>>>>>>> Stashed changes
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
<<<<<<< Updated upstream
 800233e:	4b29      	ldr	r3, [pc, #164]	; (80023e4 <HAL_ADC_ConfigChannel+0x250>)
 8002340:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a28      	ldr	r2, [pc, #160]	; (80023e8 <HAL_ADC_ConfigChannel+0x254>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d10f      	bne.n	800236c <HAL_ADC_ConfigChannel+0x1d8>
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	2b12      	cmp	r3, #18
 8002352:	d10b      	bne.n	800236c <HAL_ADC_ConfigChannel+0x1d8>
=======
 8002342:	4b29      	ldr	r3, [pc, #164]	; (80023e8 <HAL_ADC_ConfigChannel+0x250>)
 8002344:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a28      	ldr	r2, [pc, #160]	; (80023ec <HAL_ADC_ConfigChannel+0x254>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d10f      	bne.n	8002370 <HAL_ADC_ConfigChannel+0x1d8>
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	2b12      	cmp	r3, #18
 8002356:	d10b      	bne.n	8002370 <HAL_ADC_ConfigChannel+0x1d8>
>>>>>>> Stashed changes
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
<<<<<<< Updated upstream
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	605a      	str	r2, [r3, #4]
=======
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
<<<<<<< Updated upstream
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a1d      	ldr	r2, [pc, #116]	; (80023e8 <HAL_ADC_ConfigChannel+0x254>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d12b      	bne.n	80023ce <HAL_ADC_ConfigChannel+0x23a>
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a1c      	ldr	r2, [pc, #112]	; (80023ec <HAL_ADC_ConfigChannel+0x258>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d003      	beq.n	8002388 <HAL_ADC_ConfigChannel+0x1f4>
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	2b11      	cmp	r3, #17
 8002386:	d122      	bne.n	80023ce <HAL_ADC_ConfigChannel+0x23a>
=======
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a1d      	ldr	r2, [pc, #116]	; (80023ec <HAL_ADC_ConfigChannel+0x254>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d12b      	bne.n	80023d2 <HAL_ADC_ConfigChannel+0x23a>
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a1c      	ldr	r2, [pc, #112]	; (80023f0 <HAL_ADC_ConfigChannel+0x258>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d003      	beq.n	800238c <HAL_ADC_ConfigChannel+0x1f4>
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	2b11      	cmp	r3, #17
 800238a:	d122      	bne.n	80023d2 <HAL_ADC_ConfigChannel+0x23a>
>>>>>>> Stashed changes
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
<<<<<<< Updated upstream
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a11      	ldr	r2, [pc, #68]	; (80023ec <HAL_ADC_ConfigChannel+0x258>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d111      	bne.n	80023ce <HAL_ADC_ConfigChannel+0x23a>
=======
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a11      	ldr	r2, [pc, #68]	; (80023f0 <HAL_ADC_ConfigChannel+0x258>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d111      	bne.n	80023d2 <HAL_ADC_ConfigChannel+0x23a>
>>>>>>> Stashed changes
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
<<<<<<< Updated upstream
 80023aa:	4b11      	ldr	r3, [pc, #68]	; (80023f0 <HAL_ADC_ConfigChannel+0x25c>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a11      	ldr	r2, [pc, #68]	; (80023f4 <HAL_ADC_ConfigChannel+0x260>)
 80023b0:	fba2 2303 	umull	r2, r3, r2, r3
 80023b4:	0c9a      	lsrs	r2, r3, #18
 80023b6:	4613      	mov	r3, r2
 80023b8:	009b      	lsls	r3, r3, #2
 80023ba:	4413      	add	r3, r2
 80023bc:	005b      	lsls	r3, r3, #1
 80023be:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80023c0:	e002      	b.n	80023c8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	3b01      	subs	r3, #1
 80023c6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d1f9      	bne.n	80023c2 <HAL_ADC_ConfigChannel+0x22e>
=======
 80023ae:	4b11      	ldr	r3, [pc, #68]	; (80023f4 <HAL_ADC_ConfigChannel+0x25c>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a11      	ldr	r2, [pc, #68]	; (80023f8 <HAL_ADC_ConfigChannel+0x260>)
 80023b4:	fba2 2303 	umull	r2, r3, r2, r3
 80023b8:	0c9a      	lsrs	r2, r3, #18
 80023ba:	4613      	mov	r3, r2
 80023bc:	009b      	lsls	r3, r3, #2
 80023be:	4413      	add	r3, r2
 80023c0:	005b      	lsls	r3, r3, #1
 80023c2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80023c4:	e002      	b.n	80023cc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80023c6:	68bb      	ldr	r3, [r7, #8]
 80023c8:	3b01      	subs	r3, #1
 80023ca:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d1f9      	bne.n	80023c6 <HAL_ADC_ConfigChannel+0x22e>
>>>>>>> Stashed changes
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
<<<<<<< Updated upstream
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2200      	movs	r2, #0
 80023d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80023d6:	2300      	movs	r3, #0
}
 80023d8:	4618      	mov	r0, r3
 80023da:	3714      	adds	r7, #20
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr
 80023e4:	40012300 	.word	0x40012300
 80023e8:	40012000 	.word	0x40012000
 80023ec:	10000012 	.word	0x10000012
 80023f0:	20000000 	.word	0x20000000
 80023f4:	431bde83 	.word	0x431bde83

080023f8 <ADC_Init>:
=======
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2200      	movs	r2, #0
 80023d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80023da:	2300      	movs	r3, #0
}
 80023dc:	4618      	mov	r0, r3
 80023de:	3714      	adds	r7, #20
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr
 80023e8:	40012300 	.word	0x40012300
 80023ec:	40012000 	.word	0x40012000
 80023f0:	10000012 	.word	0x10000012
 80023f4:	20000000 	.word	0x20000000
 80023f8:	431bde83 	.word	0x431bde83

080023fc <ADC_Init>:
>>>>>>> Stashed changes
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
<<<<<<< Updated upstream
 80023f8:	b480      	push	{r7}
 80023fa:	b085      	sub	sp, #20
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
=======
 80023fc:	b480      	push	{r7}
 80023fe:	b085      	sub	sp, #20
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
<<<<<<< Updated upstream
 8002400:	4b79      	ldr	r3, [pc, #484]	; (80025e8 <ADC_Init+0x1f0>)
 8002402:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	685a      	ldr	r2, [r3, #4]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	431a      	orrs	r2, r3
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	685a      	ldr	r2, [r3, #4]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800242c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	6859      	ldr	r1, [r3, #4]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	691b      	ldr	r3, [r3, #16]
 8002438:	021a      	lsls	r2, r3, #8
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	430a      	orrs	r2, r1
 8002440:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	685a      	ldr	r2, [r3, #4]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002450:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	6859      	ldr	r1, [r3, #4]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	689a      	ldr	r2, [r3, #8]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	430a      	orrs	r2, r1
 8002462:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	689a      	ldr	r2, [r3, #8]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002472:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	6899      	ldr	r1, [r3, #8]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	68da      	ldr	r2, [r3, #12]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	430a      	orrs	r2, r1
 8002484:	609a      	str	r2, [r3, #8]
=======
 8002404:	4b79      	ldr	r3, [pc, #484]	; (80025ec <ADC_Init+0x1f0>)
 8002406:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	685a      	ldr	r2, [r3, #4]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	431a      	orrs	r2, r3
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	685a      	ldr	r2, [r3, #4]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002430:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	6859      	ldr	r1, [r3, #4]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	691b      	ldr	r3, [r3, #16]
 800243c:	021a      	lsls	r2, r3, #8
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	430a      	orrs	r2, r1
 8002444:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	685a      	ldr	r2, [r3, #4]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002454:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	6859      	ldr	r1, [r3, #4]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	689a      	ldr	r2, [r3, #8]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	430a      	orrs	r2, r1
 8002466:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	689a      	ldr	r2, [r3, #8]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002476:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	6899      	ldr	r1, [r3, #8]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	68da      	ldr	r2, [r3, #12]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	430a      	orrs	r2, r1
 8002488:	609a      	str	r2, [r3, #8]
>>>>>>> Stashed changes
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
<<<<<<< Updated upstream
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800248a:	4a58      	ldr	r2, [pc, #352]	; (80025ec <ADC_Init+0x1f4>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d022      	beq.n	80024d6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	689a      	ldr	r2, [r3, #8]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800249e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	6899      	ldr	r1, [r3, #8]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	430a      	orrs	r2, r1
 80024b0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	689a      	ldr	r2, [r3, #8]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80024c0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	6899      	ldr	r1, [r3, #8]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	430a      	orrs	r2, r1
 80024d2:	609a      	str	r2, [r3, #8]
 80024d4:	e00f      	b.n	80024f6 <ADC_Init+0xfe>
=======
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800248e:	4a58      	ldr	r2, [pc, #352]	; (80025f0 <ADC_Init+0x1f4>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d022      	beq.n	80024da <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	689a      	ldr	r2, [r3, #8]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80024a2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	6899      	ldr	r1, [r3, #8]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	430a      	orrs	r2, r1
 80024b4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	689a      	ldr	r2, [r3, #8]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80024c4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	6899      	ldr	r1, [r3, #8]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	430a      	orrs	r2, r1
 80024d6:	609a      	str	r2, [r3, #8]
 80024d8:	e00f      	b.n	80024fa <ADC_Init+0xfe>
>>>>>>> Stashed changes
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
<<<<<<< Updated upstream
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	689a      	ldr	r2, [r3, #8]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80024e4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	689a      	ldr	r2, [r3, #8]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80024f4:	609a      	str	r2, [r3, #8]
=======
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	689a      	ldr	r2, [r3, #8]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80024e8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	689a      	ldr	r2, [r3, #8]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80024f8:	609a      	str	r2, [r3, #8]
>>>>>>> Stashed changes
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
<<<<<<< Updated upstream
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	689a      	ldr	r2, [r3, #8]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f022 0202 	bic.w	r2, r2, #2
 8002504:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	6899      	ldr	r1, [r3, #8]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	7e1b      	ldrb	r3, [r3, #24]
 8002510:	005a      	lsls	r2, r3, #1
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	430a      	orrs	r2, r1
 8002518:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d01b      	beq.n	800255c <ADC_Init+0x164>
=======
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	689a      	ldr	r2, [r3, #8]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f022 0202 	bic.w	r2, r2, #2
 8002508:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	6899      	ldr	r1, [r3, #8]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	7e1b      	ldrb	r3, [r3, #24]
 8002514:	005a      	lsls	r2, r3, #1
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	430a      	orrs	r2, r1
 800251c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d01b      	beq.n	8002560 <ADC_Init+0x164>
>>>>>>> Stashed changes
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
<<<<<<< Updated upstream
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	685a      	ldr	r2, [r3, #4]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002532:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	685a      	ldr	r2, [r3, #4]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002542:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	6859      	ldr	r1, [r3, #4]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800254e:	3b01      	subs	r3, #1
 8002550:	035a      	lsls	r2, r3, #13
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	430a      	orrs	r2, r1
 8002558:	605a      	str	r2, [r3, #4]
 800255a:	e007      	b.n	800256c <ADC_Init+0x174>
=======
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	685a      	ldr	r2, [r3, #4]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002536:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	685a      	ldr	r2, [r3, #4]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002546:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	6859      	ldr	r1, [r3, #4]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002552:	3b01      	subs	r3, #1
 8002554:	035a      	lsls	r2, r3, #13
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	430a      	orrs	r2, r1
 800255c:	605a      	str	r2, [r3, #4]
 800255e:	e007      	b.n	8002570 <ADC_Init+0x174>
>>>>>>> Stashed changes
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
<<<<<<< Updated upstream
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	685a      	ldr	r2, [r3, #4]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800256a:	605a      	str	r2, [r3, #4]
=======
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	685a      	ldr	r2, [r3, #4]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800256e:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
<<<<<<< Updated upstream
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800257a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	69db      	ldr	r3, [r3, #28]
 8002586:	3b01      	subs	r3, #1
 8002588:	051a      	lsls	r2, r3, #20
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	430a      	orrs	r2, r1
 8002590:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	689a      	ldr	r2, [r3, #8]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80025a0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	6899      	ldr	r1, [r3, #8]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80025ae:	025a      	lsls	r2, r3, #9
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	430a      	orrs	r2, r1
 80025b6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	689a      	ldr	r2, [r3, #8]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025c6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	6899      	ldr	r1, [r3, #8]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	695b      	ldr	r3, [r3, #20]
 80025d2:	029a      	lsls	r2, r3, #10
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	430a      	orrs	r2, r1
 80025da:	609a      	str	r2, [r3, #8]
}
 80025dc:	bf00      	nop
 80025de:	3714      	adds	r7, #20
 80025e0:	46bd      	mov	sp, r7
 80025e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e6:	4770      	bx	lr
 80025e8:	40012300 	.word	0x40012300
 80025ec:	0f000001 	.word	0x0f000001

080025f0 <HAL_CAN_Init>:
=======
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800257e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	69db      	ldr	r3, [r3, #28]
 800258a:	3b01      	subs	r3, #1
 800258c:	051a      	lsls	r2, r3, #20
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	430a      	orrs	r2, r1
 8002594:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	689a      	ldr	r2, [r3, #8]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80025a4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	6899      	ldr	r1, [r3, #8]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80025b2:	025a      	lsls	r2, r3, #9
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	430a      	orrs	r2, r1
 80025ba:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	689a      	ldr	r2, [r3, #8]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025ca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	6899      	ldr	r1, [r3, #8]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	695b      	ldr	r3, [r3, #20]
 80025d6:	029a      	lsls	r2, r3, #10
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	430a      	orrs	r2, r1
 80025de:	609a      	str	r2, [r3, #8]
}
 80025e0:	bf00      	nop
 80025e2:	3714      	adds	r7, #20
 80025e4:	46bd      	mov	sp, r7
 80025e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ea:	4770      	bx	lr
 80025ec:	40012300 	.word	0x40012300
 80025f0:	0f000001 	.word	0x0f000001

080025f4 <HAL_CAN_Init>:
>>>>>>> Stashed changes
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
<<<<<<< Updated upstream
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b084      	sub	sp, #16
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
=======
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b084      	sub	sp, #16
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
<<<<<<< Updated upstream
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d101      	bne.n	8002602 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	e0ed      	b.n	80027de <HAL_CAN_Init+0x1ee>
=======
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d101      	bne.n	8002606 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e0ed      	b.n	80027e2 <HAL_CAN_Init+0x1ee>
>>>>>>> Stashed changes
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
<<<<<<< Updated upstream
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002608:	b2db      	uxtb	r3, r3
 800260a:	2b00      	cmp	r3, #0
 800260c:	d102      	bne.n	8002614 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800260e:	6878      	ldr	r0, [r7, #4]
 8002610:	f7fe f900 	bl	8000814 <HAL_CAN_MspInit>
=======
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	f893 3020 	ldrb.w	r3, [r3, #32]
 800260c:	b2db      	uxtb	r3, r3
 800260e:	2b00      	cmp	r3, #0
 8002610:	d102      	bne.n	8002618 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002612:	6878      	ldr	r0, [r7, #4]
 8002614:	f7fe f8fe 	bl	8000814 <HAL_CAN_MspInit>
>>>>>>> Stashed changes
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
<<<<<<< Updated upstream
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f042 0201 	orr.w	r2, r2, #1
 8002622:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002624:	f7ff fd42 	bl	80020ac <HAL_GetTick>
 8002628:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800262a:	e012      	b.n	8002652 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800262c:	f7ff fd3e 	bl	80020ac <HAL_GetTick>
 8002630:	4602      	mov	r2, r0
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	1ad3      	subs	r3, r2, r3
 8002636:	2b0a      	cmp	r3, #10
 8002638:	d90b      	bls.n	8002652 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800263e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2205      	movs	r2, #5
 800264a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e0c5      	b.n	80027de <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	f003 0301 	and.w	r3, r3, #1
 800265c:	2b00      	cmp	r3, #0
 800265e:	d0e5      	beq.n	800262c <HAL_CAN_Init+0x3c>
=======
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	681a      	ldr	r2, [r3, #0]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f042 0201 	orr.w	r2, r2, #1
 8002626:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002628:	f7ff fd42 	bl	80020b0 <HAL_GetTick>
 800262c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800262e:	e012      	b.n	8002656 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002630:	f7ff fd3e 	bl	80020b0 <HAL_GetTick>
 8002634:	4602      	mov	r2, r0
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	1ad3      	subs	r3, r2, r3
 800263a:	2b0a      	cmp	r3, #10
 800263c:	d90b      	bls.n	8002656 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002642:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2205      	movs	r2, #5
 800264e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e0c5      	b.n	80027e2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	f003 0301 	and.w	r3, r3, #1
 8002660:	2b00      	cmp	r3, #0
 8002662:	d0e5      	beq.n	8002630 <HAL_CAN_Init+0x3c>
>>>>>>> Stashed changes
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
<<<<<<< Updated upstream
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	681a      	ldr	r2, [r3, #0]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f022 0202 	bic.w	r2, r2, #2
 800266e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002670:	f7ff fd1c 	bl	80020ac <HAL_GetTick>
 8002674:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002676:	e012      	b.n	800269e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002678:	f7ff fd18 	bl	80020ac <HAL_GetTick>
 800267c:	4602      	mov	r2, r0
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	1ad3      	subs	r3, r2, r3
 8002682:	2b0a      	cmp	r3, #10
 8002684:	d90b      	bls.n	800269e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800268a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2205      	movs	r2, #5
 8002696:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e09f      	b.n	80027de <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	f003 0302 	and.w	r3, r3, #2
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d1e5      	bne.n	8002678 <HAL_CAN_Init+0x88>
=======
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	681a      	ldr	r2, [r3, #0]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f022 0202 	bic.w	r2, r2, #2
 8002672:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002674:	f7ff fd1c 	bl	80020b0 <HAL_GetTick>
 8002678:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800267a:	e012      	b.n	80026a2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800267c:	f7ff fd18 	bl	80020b0 <HAL_GetTick>
 8002680:	4602      	mov	r2, r0
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	1ad3      	subs	r3, r2, r3
 8002686:	2b0a      	cmp	r3, #10
 8002688:	d90b      	bls.n	80026a2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800268e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2205      	movs	r2, #5
 800269a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e09f      	b.n	80027e2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	f003 0302 	and.w	r3, r3, #2
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d1e5      	bne.n	800267c <HAL_CAN_Init+0x88>
>>>>>>> Stashed changes
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
<<<<<<< Updated upstream
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	7e1b      	ldrb	r3, [r3, #24]
 80026b0:	2b01      	cmp	r3, #1
 80026b2:	d108      	bne.n	80026c6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80026c2:	601a      	str	r2, [r3, #0]
 80026c4:	e007      	b.n	80026d6 <HAL_CAN_Init+0xe6>
=======
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	7e1b      	ldrb	r3, [r3, #24]
 80026b4:	2b01      	cmp	r3, #1
 80026b6:	d108      	bne.n	80026ca <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	681a      	ldr	r2, [r3, #0]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80026c6:	601a      	str	r2, [r3, #0]
 80026c8:	e007      	b.n	80026da <HAL_CAN_Init+0xe6>
>>>>>>> Stashed changes
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
<<<<<<< Updated upstream
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	681a      	ldr	r2, [r3, #0]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80026d4:	601a      	str	r2, [r3, #0]
=======
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	681a      	ldr	r2, [r3, #0]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80026d8:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
<<<<<<< Updated upstream
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	7e5b      	ldrb	r3, [r3, #25]
 80026da:	2b01      	cmp	r3, #1
 80026dc:	d108      	bne.n	80026f0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80026ec:	601a      	str	r2, [r3, #0]
 80026ee:	e007      	b.n	8002700 <HAL_CAN_Init+0x110>
=======
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	7e5b      	ldrb	r3, [r3, #25]
 80026de:	2b01      	cmp	r3, #1
 80026e0:	d108      	bne.n	80026f4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80026f0:	601a      	str	r2, [r3, #0]
 80026f2:	e007      	b.n	8002704 <HAL_CAN_Init+0x110>
>>>>>>> Stashed changes
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
<<<<<<< Updated upstream
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	681a      	ldr	r2, [r3, #0]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80026fe:	601a      	str	r2, [r3, #0]
=======
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002702:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
<<<<<<< Updated upstream
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	7e9b      	ldrb	r3, [r3, #26]
 8002704:	2b01      	cmp	r3, #1
 8002706:	d108      	bne.n	800271a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f042 0220 	orr.w	r2, r2, #32
 8002716:	601a      	str	r2, [r3, #0]
 8002718:	e007      	b.n	800272a <HAL_CAN_Init+0x13a>
=======
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	7e9b      	ldrb	r3, [r3, #26]
 8002708:	2b01      	cmp	r3, #1
 800270a:	d108      	bne.n	800271e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	681a      	ldr	r2, [r3, #0]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f042 0220 	orr.w	r2, r2, #32
 800271a:	601a      	str	r2, [r3, #0]
 800271c:	e007      	b.n	800272e <HAL_CAN_Init+0x13a>
>>>>>>> Stashed changes
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
<<<<<<< Updated upstream
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	681a      	ldr	r2, [r3, #0]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f022 0220 	bic.w	r2, r2, #32
 8002728:	601a      	str	r2, [r3, #0]
=======
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f022 0220 	bic.w	r2, r2, #32
 800272c:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
<<<<<<< Updated upstream
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	7edb      	ldrb	r3, [r3, #27]
 800272e:	2b01      	cmp	r3, #1
 8002730:	d108      	bne.n	8002744 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	681a      	ldr	r2, [r3, #0]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f022 0210 	bic.w	r2, r2, #16
 8002740:	601a      	str	r2, [r3, #0]
 8002742:	e007      	b.n	8002754 <HAL_CAN_Init+0x164>
=======
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	7edb      	ldrb	r3, [r3, #27]
 8002732:	2b01      	cmp	r3, #1
 8002734:	d108      	bne.n	8002748 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	681a      	ldr	r2, [r3, #0]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f022 0210 	bic.w	r2, r2, #16
 8002744:	601a      	str	r2, [r3, #0]
 8002746:	e007      	b.n	8002758 <HAL_CAN_Init+0x164>
>>>>>>> Stashed changes
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
<<<<<<< Updated upstream
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	681a      	ldr	r2, [r3, #0]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f042 0210 	orr.w	r2, r2, #16
 8002752:	601a      	str	r2, [r3, #0]
=======
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f042 0210 	orr.w	r2, r2, #16
 8002756:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
<<<<<<< Updated upstream
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	7f1b      	ldrb	r3, [r3, #28]
 8002758:	2b01      	cmp	r3, #1
 800275a:	d108      	bne.n	800276e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f042 0208 	orr.w	r2, r2, #8
 800276a:	601a      	str	r2, [r3, #0]
 800276c:	e007      	b.n	800277e <HAL_CAN_Init+0x18e>
=======
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	7f1b      	ldrb	r3, [r3, #28]
 800275c:	2b01      	cmp	r3, #1
 800275e:	d108      	bne.n	8002772 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	681a      	ldr	r2, [r3, #0]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f042 0208 	orr.w	r2, r2, #8
 800276e:	601a      	str	r2, [r3, #0]
 8002770:	e007      	b.n	8002782 <HAL_CAN_Init+0x18e>
>>>>>>> Stashed changes
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
<<<<<<< Updated upstream
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f022 0208 	bic.w	r2, r2, #8
 800277c:	601a      	str	r2, [r3, #0]
=======
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f022 0208 	bic.w	r2, r2, #8
 8002780:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
<<<<<<< Updated upstream
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	7f5b      	ldrb	r3, [r3, #29]
 8002782:	2b01      	cmp	r3, #1
 8002784:	d108      	bne.n	8002798 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f042 0204 	orr.w	r2, r2, #4
 8002794:	601a      	str	r2, [r3, #0]
 8002796:	e007      	b.n	80027a8 <HAL_CAN_Init+0x1b8>
=======
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	7f5b      	ldrb	r3, [r3, #29]
 8002786:	2b01      	cmp	r3, #1
 8002788:	d108      	bne.n	800279c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f042 0204 	orr.w	r2, r2, #4
 8002798:	601a      	str	r2, [r3, #0]
 800279a:	e007      	b.n	80027ac <HAL_CAN_Init+0x1b8>
>>>>>>> Stashed changes
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
<<<<<<< Updated upstream
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f022 0204 	bic.w	r2, r2, #4
 80027a6:	601a      	str	r2, [r3, #0]
=======
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f022 0204 	bic.w	r2, r2, #4
 80027aa:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
<<<<<<< Updated upstream
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	689a      	ldr	r2, [r3, #8]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	68db      	ldr	r3, [r3, #12]
 80027b0:	431a      	orrs	r2, r3
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	691b      	ldr	r3, [r3, #16]
 80027b6:	431a      	orrs	r2, r3
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	695b      	ldr	r3, [r3, #20]
 80027bc:	ea42 0103 	orr.w	r1, r2, r3
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	1e5a      	subs	r2, r3, #1
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	430a      	orrs	r2, r1
 80027cc:	61da      	str	r2, [r3, #28]
=======
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	689a      	ldr	r2, [r3, #8]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	68db      	ldr	r3, [r3, #12]
 80027b4:	431a      	orrs	r2, r3
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	691b      	ldr	r3, [r3, #16]
 80027ba:	431a      	orrs	r2, r3
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	695b      	ldr	r3, [r3, #20]
 80027c0:	ea42 0103 	orr.w	r1, r2, r3
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	1e5a      	subs	r2, r3, #1
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	430a      	orrs	r2, r1
 80027d0:	61da      	str	r2, [r3, #28]
>>>>>>> Stashed changes
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
<<<<<<< Updated upstream
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2200      	movs	r2, #0
 80027d2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2201      	movs	r2, #1
 80027d8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80027dc:	2300      	movs	r3, #0
}
 80027de:	4618      	mov	r0, r3
 80027e0:	3710      	adds	r7, #16
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}
	...

080027e8 <HAL_CAN_ConfigFilter>:
=======
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2200      	movs	r2, #0
 80027d6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2201      	movs	r2, #1
 80027dc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80027e0:	2300      	movs	r3, #0
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	3710      	adds	r7, #16
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}
	...

080027ec <HAL_CAN_ConfigFilter>:
>>>>>>> Stashed changes
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
<<<<<<< Updated upstream
 80027e8:	b480      	push	{r7}
 80027ea:	b087      	sub	sp, #28
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
 80027f0:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027fe:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002800:	7cfb      	ldrb	r3, [r7, #19]
 8002802:	2b01      	cmp	r3, #1
 8002804:	d003      	beq.n	800280e <HAL_CAN_ConfigFilter+0x26>
 8002806:	7cfb      	ldrb	r3, [r7, #19]
 8002808:	2b02      	cmp	r3, #2
 800280a:	f040 80be 	bne.w	800298a <HAL_CAN_ConfigFilter+0x1a2>
=======
 80027ec:	b480      	push	{r7}
 80027ee:	b087      	sub	sp, #28
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
 80027f4:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002802:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002804:	7cfb      	ldrb	r3, [r7, #19]
 8002806:	2b01      	cmp	r3, #1
 8002808:	d003      	beq.n	8002812 <HAL_CAN_ConfigFilter+0x26>
 800280a:	7cfb      	ldrb	r3, [r7, #19]
 800280c:	2b02      	cmp	r3, #2
 800280e:	f040 80be 	bne.w	800298e <HAL_CAN_ConfigFilter+0x1a2>
>>>>>>> Stashed changes
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
<<<<<<< Updated upstream
 800280e:	4b65      	ldr	r3, [pc, #404]	; (80029a4 <HAL_CAN_ConfigFilter+0x1bc>)
 8002810:	617b      	str	r3, [r7, #20]
=======
 8002812:	4b65      	ldr	r3, [pc, #404]	; (80029a8 <HAL_CAN_ConfigFilter+0x1bc>)
 8002814:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
<<<<<<< Updated upstream
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002818:	f043 0201 	orr.w	r2, r3, #1
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
=======
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800281c:	f043 0201 	orr.w	r2, r3, #1
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
>>>>>>> Stashed changes
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
<<<<<<< Updated upstream
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002828:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800283c:	021b      	lsls	r3, r3, #8
 800283e:	431a      	orrs	r2, r3
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
=======
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800282c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002840:	021b      	lsls	r3, r3, #8
 8002842:	431a      	orrs	r2, r3
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
>>>>>>> Stashed changes

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
<<<<<<< Updated upstream
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	695b      	ldr	r3, [r3, #20]
 800284a:	f003 031f 	and.w	r3, r3, #31
 800284e:	2201      	movs	r2, #1
 8002850:	fa02 f303 	lsl.w	r3, r2, r3
 8002854:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	43db      	mvns	r3, r3
 8002860:	401a      	ands	r2, r3
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	69db      	ldr	r3, [r3, #28]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d123      	bne.n	80028b8 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	43db      	mvns	r3, r3
 800287a:	401a      	ands	r2, r3
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
=======
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	695b      	ldr	r3, [r3, #20]
 800284e:	f003 031f 	and.w	r3, r3, #31
 8002852:	2201      	movs	r2, #1
 8002854:	fa02 f303 	lsl.w	r3, r2, r3
 8002858:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	43db      	mvns	r3, r3
 8002864:	401a      	ands	r2, r3
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	69db      	ldr	r3, [r3, #28]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d123      	bne.n	80028bc <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	43db      	mvns	r3, r3
 800287e:	401a      	ands	r2, r3
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
>>>>>>> Stashed changes

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
<<<<<<< Updated upstream
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	68db      	ldr	r3, [r3, #12]
 8002886:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800288e:	683a      	ldr	r2, [r7, #0]
 8002890:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002892:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	3248      	adds	r2, #72	; 0x48
 8002898:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
=======
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	68db      	ldr	r3, [r3, #12]
 800288a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002892:	683a      	ldr	r2, [r7, #0]
 8002894:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002896:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	3248      	adds	r2, #72	; 0x48
 800289c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
>>>>>>> Stashed changes

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
<<<<<<< Updated upstream
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80028ac:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80028ae:	6979      	ldr	r1, [r7, #20]
 80028b0:	3348      	adds	r3, #72	; 0x48
 80028b2:	00db      	lsls	r3, r3, #3
 80028b4:	440b      	add	r3, r1
 80028b6:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	69db      	ldr	r3, [r3, #28]
 80028bc:	2b01      	cmp	r3, #1
 80028be:	d122      	bne.n	8002906 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	431a      	orrs	r2, r3
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
=======
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80028b0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80028b2:	6979      	ldr	r1, [r7, #20]
 80028b4:	3348      	adds	r3, #72	; 0x48
 80028b6:	00db      	lsls	r3, r3, #3
 80028b8:	440b      	add	r3, r1
 80028ba:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	69db      	ldr	r3, [r3, #28]
 80028c0:	2b01      	cmp	r3, #1
 80028c2:	d122      	bne.n	800290a <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	431a      	orrs	r2, r3
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
>>>>>>> Stashed changes

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
<<<<<<< Updated upstream
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80028dc:	683a      	ldr	r2, [r7, #0]
 80028de:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80028e0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	3248      	adds	r2, #72	; 0x48
 80028e6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
=======
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80028e0:	683a      	ldr	r2, [r7, #0]
 80028e2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80028e4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	3248      	adds	r2, #72	; 0x48
 80028ea:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
>>>>>>> Stashed changes

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
<<<<<<< Updated upstream
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	68db      	ldr	r3, [r3, #12]
 80028f4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80028fa:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80028fc:	6979      	ldr	r1, [r7, #20]
 80028fe:	3348      	adds	r3, #72	; 0x48
 8002900:	00db      	lsls	r3, r3, #3
 8002902:	440b      	add	r3, r1
 8002904:	605a      	str	r2, [r3, #4]
=======
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	68db      	ldr	r3, [r3, #12]
 80028f8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80028fe:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002900:	6979      	ldr	r1, [r7, #20]
 8002902:	3348      	adds	r3, #72	; 0x48
 8002904:	00db      	lsls	r3, r3, #3
 8002906:	440b      	add	r3, r1
 8002908:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
<<<<<<< Updated upstream
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	699b      	ldr	r3, [r3, #24]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d109      	bne.n	8002922 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	43db      	mvns	r3, r3
 8002918:	401a      	ands	r2, r3
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002920:	e007      	b.n	8002932 <HAL_CAN_ConfigFilter+0x14a>
=======
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	699b      	ldr	r3, [r3, #24]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d109      	bne.n	8002926 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	43db      	mvns	r3, r3
 800291c:	401a      	ands	r2, r3
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002924:	e007      	b.n	8002936 <HAL_CAN_ConfigFilter+0x14a>
>>>>>>> Stashed changes
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
<<<<<<< Updated upstream
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	431a      	orrs	r2, r3
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
=======
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	431a      	orrs	r2, r3
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
>>>>>>> Stashed changes
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
<<<<<<< Updated upstream
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	691b      	ldr	r3, [r3, #16]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d109      	bne.n	800294e <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	43db      	mvns	r3, r3
 8002944:	401a      	ands	r2, r3
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800294c:	e007      	b.n	800295e <HAL_CAN_ConfigFilter+0x176>
=======
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	691b      	ldr	r3, [r3, #16]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d109      	bne.n	8002952 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	43db      	mvns	r3, r3
 8002948:	401a      	ands	r2, r3
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002950:	e007      	b.n	8002962 <HAL_CAN_ConfigFilter+0x176>
>>>>>>> Stashed changes
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
<<<<<<< Updated upstream
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	431a      	orrs	r2, r3
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
=======
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	431a      	orrs	r2, r3
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
>>>>>>> Stashed changes
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
<<<<<<< Updated upstream
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	6a1b      	ldr	r3, [r3, #32]
 8002962:	2b01      	cmp	r3, #1
 8002964:	d107      	bne.n	8002976 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	431a      	orrs	r2, r3
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
=======
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	6a1b      	ldr	r3, [r3, #32]
 8002966:	2b01      	cmp	r3, #1
 8002968:	d107      	bne.n	800297a <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	431a      	orrs	r2, r3
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
>>>>>>> Stashed changes
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
<<<<<<< Updated upstream
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800297c:	f023 0201 	bic.w	r2, r3, #1
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002986:	2300      	movs	r3, #0
 8002988:	e006      	b.n	8002998 <HAL_CAN_ConfigFilter+0x1b0>
=======
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002980:	f023 0201 	bic.w	r2, r3, #1
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800298a:	2300      	movs	r3, #0
 800298c:	e006      	b.n	800299c <HAL_CAN_ConfigFilter+0x1b0>
>>>>>>> Stashed changes
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
<<<<<<< Updated upstream
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800298e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002996:	2301      	movs	r3, #1
  }
}
 8002998:	4618      	mov	r0, r3
 800299a:	371c      	adds	r7, #28
 800299c:	46bd      	mov	sp, r7
 800299e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a2:	4770      	bx	lr
 80029a4:	40006400 	.word	0x40006400

080029a8 <HAL_CAN_Start>:
=======
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002992:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
  }
}
 800299c:	4618      	mov	r0, r3
 800299e:	371c      	adds	r7, #28
 80029a0:	46bd      	mov	sp, r7
 80029a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a6:	4770      	bx	lr
 80029a8:	40006400 	.word	0x40006400

080029ac <HAL_CAN_Start>:
>>>>>>> Stashed changes
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
<<<<<<< Updated upstream
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b084      	sub	sp, #16
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029b6:	b2db      	uxtb	r3, r3
 80029b8:	2b01      	cmp	r3, #1
 80029ba:	d12e      	bne.n	8002a1a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2202      	movs	r2, #2
 80029c0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f022 0201 	bic.w	r2, r2, #1
 80029d2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80029d4:	f7ff fb6a 	bl	80020ac <HAL_GetTick>
 80029d8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80029da:	e012      	b.n	8002a02 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80029dc:	f7ff fb66 	bl	80020ac <HAL_GetTick>
 80029e0:	4602      	mov	r2, r0
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	2b0a      	cmp	r3, #10
 80029e8:	d90b      	bls.n	8002a02 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ee:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2205      	movs	r2, #5
 80029fa:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	e012      	b.n	8002a28 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	f003 0301 	and.w	r3, r3, #1
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d1e5      	bne.n	80029dc <HAL_CAN_Start+0x34>
=======
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b084      	sub	sp, #16
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029ba:	b2db      	uxtb	r3, r3
 80029bc:	2b01      	cmp	r3, #1
 80029be:	d12e      	bne.n	8002a1e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2202      	movs	r2, #2
 80029c4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f022 0201 	bic.w	r2, r2, #1
 80029d6:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80029d8:	f7ff fb6a 	bl	80020b0 <HAL_GetTick>
 80029dc:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80029de:	e012      	b.n	8002a06 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80029e0:	f7ff fb66 	bl	80020b0 <HAL_GetTick>
 80029e4:	4602      	mov	r2, r0
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	1ad3      	subs	r3, r2, r3
 80029ea:	2b0a      	cmp	r3, #10
 80029ec:	d90b      	bls.n	8002a06 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2205      	movs	r2, #5
 80029fe:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e012      	b.n	8002a2c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	f003 0301 	and.w	r3, r3, #1
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d1e5      	bne.n	80029e0 <HAL_CAN_Start+0x34>
>>>>>>> Stashed changes
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
<<<<<<< Updated upstream
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2200      	movs	r2, #0
 8002a14:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002a16:	2300      	movs	r3, #0
 8002a18:	e006      	b.n	8002a28 <HAL_CAN_Start+0x80>
=======
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2200      	movs	r2, #0
 8002a18:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	e006      	b.n	8002a2c <HAL_CAN_Start+0x80>
>>>>>>> Stashed changes
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
<<<<<<< Updated upstream
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a1e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
  }
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	3710      	adds	r7, #16
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}

08002a30 <HAL_CAN_AddTxMessage>:
=======
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a22:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
  }
}
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	3710      	adds	r7, #16
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}

08002a34 <HAL_CAN_AddTxMessage>:
>>>>>>> Stashed changes
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
<<<<<<< Updated upstream
 8002a30:	b480      	push	{r7}
 8002a32:	b089      	sub	sp, #36	; 0x24
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	60f8      	str	r0, [r7, #12]
 8002a38:	60b9      	str	r1, [r7, #8]
 8002a3a:	607a      	str	r2, [r7, #4]
 8002a3c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a44:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	61bb      	str	r3, [r7, #24]
=======
 8002a34:	b480      	push	{r7}
 8002a36:	b089      	sub	sp, #36	; 0x24
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	60f8      	str	r0, [r7, #12]
 8002a3c:	60b9      	str	r1, [r7, #8]
 8002a3e:	607a      	str	r2, [r7, #4]
 8002a40:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a48:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	61bb      	str	r3, [r7, #24]
>>>>>>> Stashed changes
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
<<<<<<< Updated upstream
 8002a4e:	7ffb      	ldrb	r3, [r7, #31]
 8002a50:	2b01      	cmp	r3, #1
 8002a52:	d003      	beq.n	8002a5c <HAL_CAN_AddTxMessage+0x2c>
 8002a54:	7ffb      	ldrb	r3, [r7, #31]
 8002a56:	2b02      	cmp	r3, #2
 8002a58:	f040 80b8 	bne.w	8002bcc <HAL_CAN_AddTxMessage+0x19c>
=======
 8002a52:	7ffb      	ldrb	r3, [r7, #31]
 8002a54:	2b01      	cmp	r3, #1
 8002a56:	d003      	beq.n	8002a60 <HAL_CAN_AddTxMessage+0x2c>
 8002a58:	7ffb      	ldrb	r3, [r7, #31]
 8002a5a:	2b02      	cmp	r3, #2
 8002a5c:	f040 80b8 	bne.w	8002bd0 <HAL_CAN_AddTxMessage+0x19c>
>>>>>>> Stashed changes
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
<<<<<<< Updated upstream
 8002a5c:	69bb      	ldr	r3, [r7, #24]
 8002a5e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d10a      	bne.n	8002a7c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002a66:	69bb      	ldr	r3, [r7, #24]
 8002a68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d105      	bne.n	8002a7c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002a70:	69bb      	ldr	r3, [r7, #24]
 8002a72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	f000 80a0 	beq.w	8002bbc <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002a7c:	69bb      	ldr	r3, [r7, #24]
 8002a7e:	0e1b      	lsrs	r3, r3, #24
 8002a80:	f003 0303 	and.w	r3, r3, #3
 8002a84:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	2b02      	cmp	r3, #2
 8002a8a:	d907      	bls.n	8002a9c <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a90:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	e09e      	b.n	8002bda <HAL_CAN_AddTxMessage+0x1aa>
=======
 8002a60:	69bb      	ldr	r3, [r7, #24]
 8002a62:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d10a      	bne.n	8002a80 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002a6a:	69bb      	ldr	r3, [r7, #24]
 8002a6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d105      	bne.n	8002a80 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002a74:	69bb      	ldr	r3, [r7, #24]
 8002a76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	f000 80a0 	beq.w	8002bc0 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002a80:	69bb      	ldr	r3, [r7, #24]
 8002a82:	0e1b      	lsrs	r3, r3, #24
 8002a84:	f003 0303 	and.w	r3, r3, #3
 8002a88:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	2b02      	cmp	r3, #2
 8002a8e:	d907      	bls.n	8002aa0 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a94:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	e09e      	b.n	8002bde <HAL_CAN_AddTxMessage+0x1aa>
>>>>>>> Stashed changes
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
<<<<<<< Updated upstream
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	409a      	lsls	r2, r3
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d10d      	bne.n	8002aca <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002ab8:	68f9      	ldr	r1, [r7, #12]
 8002aba:	6809      	ldr	r1, [r1, #0]
 8002abc:	431a      	orrs	r2, r3
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	3318      	adds	r3, #24
 8002ac2:	011b      	lsls	r3, r3, #4
 8002ac4:	440b      	add	r3, r1
 8002ac6:	601a      	str	r2, [r3, #0]
 8002ac8:	e00f      	b.n	8002aea <HAL_CAN_AddTxMessage+0xba>
=======
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	409a      	lsls	r2, r3
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d10d      	bne.n	8002ace <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002ab2:	68bb      	ldr	r3, [r7, #8]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002abc:	68f9      	ldr	r1, [r7, #12]
 8002abe:	6809      	ldr	r1, [r1, #0]
 8002ac0:	431a      	orrs	r2, r3
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	3318      	adds	r3, #24
 8002ac6:	011b      	lsls	r3, r3, #4
 8002ac8:	440b      	add	r3, r1
 8002aca:	601a      	str	r2, [r3, #0]
 8002acc:	e00f      	b.n	8002aee <HAL_CAN_AddTxMessage+0xba>
>>>>>>> Stashed changes
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
<<<<<<< Updated upstream
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002ad4:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002ada:	68f9      	ldr	r1, [r7, #12]
 8002adc:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002ade:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	3318      	adds	r3, #24
 8002ae4:	011b      	lsls	r3, r3, #4
 8002ae6:	440b      	add	r3, r1
 8002ae8:	601a      	str	r2, [r3, #0]
=======
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002ad8:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002ade:	68f9      	ldr	r1, [r7, #12]
 8002ae0:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002ae2:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	3318      	adds	r3, #24
 8002ae8:	011b      	lsls	r3, r3, #4
 8002aea:	440b      	add	r3, r1
 8002aec:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
<<<<<<< Updated upstream
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	6819      	ldr	r1, [r3, #0]
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	691a      	ldr	r2, [r3, #16]
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	3318      	adds	r3, #24
 8002af6:	011b      	lsls	r3, r3, #4
 8002af8:	440b      	add	r3, r1
 8002afa:	3304      	adds	r3, #4
 8002afc:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	7d1b      	ldrb	r3, [r3, #20]
 8002b02:	2b01      	cmp	r3, #1
 8002b04:	d111      	bne.n	8002b2a <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681a      	ldr	r2, [r3, #0]
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	3318      	adds	r3, #24
 8002b0e:	011b      	lsls	r3, r3, #4
 8002b10:	4413      	add	r3, r2
 8002b12:	3304      	adds	r3, #4
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	68fa      	ldr	r2, [r7, #12]
 8002b18:	6811      	ldr	r1, [r2, #0]
 8002b1a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	3318      	adds	r3, #24
 8002b22:	011b      	lsls	r3, r3, #4
 8002b24:	440b      	add	r3, r1
 8002b26:	3304      	adds	r3, #4
 8002b28:	601a      	str	r2, [r3, #0]
=======
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	6819      	ldr	r1, [r3, #0]
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	691a      	ldr	r2, [r3, #16]
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	3318      	adds	r3, #24
 8002afa:	011b      	lsls	r3, r3, #4
 8002afc:	440b      	add	r3, r1
 8002afe:	3304      	adds	r3, #4
 8002b00:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	7d1b      	ldrb	r3, [r3, #20]
 8002b06:	2b01      	cmp	r3, #1
 8002b08:	d111      	bne.n	8002b2e <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	3318      	adds	r3, #24
 8002b12:	011b      	lsls	r3, r3, #4
 8002b14:	4413      	add	r3, r2
 8002b16:	3304      	adds	r3, #4
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	68fa      	ldr	r2, [r7, #12]
 8002b1c:	6811      	ldr	r1, [r2, #0]
 8002b1e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	3318      	adds	r3, #24
 8002b26:	011b      	lsls	r3, r3, #4
 8002b28:	440b      	add	r3, r1
 8002b2a:	3304      	adds	r3, #4
 8002b2c:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
<<<<<<< Updated upstream
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	3307      	adds	r3, #7
 8002b2e:	781b      	ldrb	r3, [r3, #0]
 8002b30:	061a      	lsls	r2, r3, #24
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	3306      	adds	r3, #6
 8002b36:	781b      	ldrb	r3, [r3, #0]
 8002b38:	041b      	lsls	r3, r3, #16
 8002b3a:	431a      	orrs	r2, r3
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	3305      	adds	r3, #5
 8002b40:	781b      	ldrb	r3, [r3, #0]
 8002b42:	021b      	lsls	r3, r3, #8
 8002b44:	4313      	orrs	r3, r2
 8002b46:	687a      	ldr	r2, [r7, #4]
 8002b48:	3204      	adds	r2, #4
 8002b4a:	7812      	ldrb	r2, [r2, #0]
 8002b4c:	4610      	mov	r0, r2
 8002b4e:	68fa      	ldr	r2, [r7, #12]
 8002b50:	6811      	ldr	r1, [r2, #0]
 8002b52:	ea43 0200 	orr.w	r2, r3, r0
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	011b      	lsls	r3, r3, #4
 8002b5a:	440b      	add	r3, r1
 8002b5c:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002b60:	601a      	str	r2, [r3, #0]
=======
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	3307      	adds	r3, #7
 8002b32:	781b      	ldrb	r3, [r3, #0]
 8002b34:	061a      	lsls	r2, r3, #24
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	3306      	adds	r3, #6
 8002b3a:	781b      	ldrb	r3, [r3, #0]
 8002b3c:	041b      	lsls	r3, r3, #16
 8002b3e:	431a      	orrs	r2, r3
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	3305      	adds	r3, #5
 8002b44:	781b      	ldrb	r3, [r3, #0]
 8002b46:	021b      	lsls	r3, r3, #8
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	687a      	ldr	r2, [r7, #4]
 8002b4c:	3204      	adds	r2, #4
 8002b4e:	7812      	ldrb	r2, [r2, #0]
 8002b50:	4610      	mov	r0, r2
 8002b52:	68fa      	ldr	r2, [r7, #12]
 8002b54:	6811      	ldr	r1, [r2, #0]
 8002b56:	ea43 0200 	orr.w	r2, r3, r0
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	011b      	lsls	r3, r3, #4
 8002b5e:	440b      	add	r3, r1
 8002b60:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002b64:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
<<<<<<< Updated upstream
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	3303      	adds	r3, #3
 8002b66:	781b      	ldrb	r3, [r3, #0]
 8002b68:	061a      	lsls	r2, r3, #24
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	3302      	adds	r3, #2
 8002b6e:	781b      	ldrb	r3, [r3, #0]
 8002b70:	041b      	lsls	r3, r3, #16
 8002b72:	431a      	orrs	r2, r3
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	3301      	adds	r3, #1
 8002b78:	781b      	ldrb	r3, [r3, #0]
 8002b7a:	021b      	lsls	r3, r3, #8
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	687a      	ldr	r2, [r7, #4]
 8002b80:	7812      	ldrb	r2, [r2, #0]
 8002b82:	4610      	mov	r0, r2
 8002b84:	68fa      	ldr	r2, [r7, #12]
 8002b86:	6811      	ldr	r1, [r2, #0]
 8002b88:	ea43 0200 	orr.w	r2, r3, r0
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	011b      	lsls	r3, r3, #4
 8002b90:	440b      	add	r3, r1
 8002b92:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002b96:	601a      	str	r2, [r3, #0]
=======
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	3303      	adds	r3, #3
 8002b6a:	781b      	ldrb	r3, [r3, #0]
 8002b6c:	061a      	lsls	r2, r3, #24
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	3302      	adds	r3, #2
 8002b72:	781b      	ldrb	r3, [r3, #0]
 8002b74:	041b      	lsls	r3, r3, #16
 8002b76:	431a      	orrs	r2, r3
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	3301      	adds	r3, #1
 8002b7c:	781b      	ldrb	r3, [r3, #0]
 8002b7e:	021b      	lsls	r3, r3, #8
 8002b80:	4313      	orrs	r3, r2
 8002b82:	687a      	ldr	r2, [r7, #4]
 8002b84:	7812      	ldrb	r2, [r2, #0]
 8002b86:	4610      	mov	r0, r2
 8002b88:	68fa      	ldr	r2, [r7, #12]
 8002b8a:	6811      	ldr	r1, [r2, #0]
 8002b8c:	ea43 0200 	orr.w	r2, r3, r0
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	011b      	lsls	r3, r3, #4
 8002b94:	440b      	add	r3, r1
 8002b96:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002b9a:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
<<<<<<< Updated upstream
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681a      	ldr	r2, [r3, #0]
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	3318      	adds	r3, #24
 8002ba0:	011b      	lsls	r3, r3, #4
 8002ba2:	4413      	add	r3, r2
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	68fa      	ldr	r2, [r7, #12]
 8002ba8:	6811      	ldr	r1, [r2, #0]
 8002baa:	f043 0201 	orr.w	r2, r3, #1
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	3318      	adds	r3, #24
 8002bb2:	011b      	lsls	r3, r3, #4
 8002bb4:	440b      	add	r3, r1
 8002bb6:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	e00e      	b.n	8002bda <HAL_CAN_AddTxMessage+0x1aa>
=======
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	3318      	adds	r3, #24
 8002ba4:	011b      	lsls	r3, r3, #4
 8002ba6:	4413      	add	r3, r2
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	68fa      	ldr	r2, [r7, #12]
 8002bac:	6811      	ldr	r1, [r2, #0]
 8002bae:	f043 0201 	orr.w	r2, r3, #1
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	3318      	adds	r3, #24
 8002bb6:	011b      	lsls	r3, r3, #4
 8002bb8:	440b      	add	r3, r1
 8002bba:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	e00e      	b.n	8002bde <HAL_CAN_AddTxMessage+0x1aa>
>>>>>>> Stashed changes
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
<<<<<<< Updated upstream
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	e006      	b.n	8002bda <HAL_CAN_AddTxMessage+0x1aa>
=======
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	e006      	b.n	8002bde <HAL_CAN_AddTxMessage+0x1aa>
>>>>>>> Stashed changes
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
<<<<<<< Updated upstream
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
  }
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	3724      	adds	r7, #36	; 0x24
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr

08002be6 <HAL_CAN_GetTxMailboxesFreeLevel>:
=======
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
  }
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	3724      	adds	r7, #36	; 0x24
 8002be2:	46bd      	mov	sp, r7
 8002be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be8:	4770      	bx	lr

08002bea <HAL_CAN_GetTxMailboxesFreeLevel>:
>>>>>>> Stashed changes
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
<<<<<<< Updated upstream
 8002be6:	b480      	push	{r7}
 8002be8:	b085      	sub	sp, #20
 8002bea:	af00      	add	r7, sp, #0
 8002bec:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002bf8:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8002bfa:	7afb      	ldrb	r3, [r7, #11]
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d002      	beq.n	8002c06 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8002c00:	7afb      	ldrb	r3, [r7, #11]
 8002c02:	2b02      	cmp	r3, #2
 8002c04:	d11d      	bne.n	8002c42 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
=======
 8002bea:	b480      	push	{r7}
 8002bec:	b085      	sub	sp, #20
 8002bee:	af00      	add	r7, sp, #0
 8002bf0:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002bfc:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8002bfe:	7afb      	ldrb	r3, [r7, #11]
 8002c00:	2b01      	cmp	r3, #1
 8002c02:	d002      	beq.n	8002c0a <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8002c04:	7afb      	ldrb	r3, [r7, #11]
 8002c06:	2b02      	cmp	r3, #2
 8002c08:	d11d      	bne.n	8002c46 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
>>>>>>> Stashed changes
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
<<<<<<< Updated upstream
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d002      	beq.n	8002c1a <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	3301      	adds	r3, #1
 8002c18:	60fb      	str	r3, [r7, #12]
=======
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d002      	beq.n	8002c1e <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	3301      	adds	r3, #1
 8002c1c:	60fb      	str	r3, [r7, #12]
>>>>>>> Stashed changes
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
<<<<<<< Updated upstream
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d002      	beq.n	8002c2e <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	3301      	adds	r3, #1
 8002c2c:	60fb      	str	r3, [r7, #12]
=======
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d002      	beq.n	8002c32 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	3301      	adds	r3, #1
 8002c30:	60fb      	str	r3, [r7, #12]
>>>>>>> Stashed changes
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
<<<<<<< Updated upstream
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d002      	beq.n	8002c42 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	3301      	adds	r3, #1
 8002c40:	60fb      	str	r3, [r7, #12]
=======
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d002      	beq.n	8002c46 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	3301      	adds	r3, #1
 8002c44:	60fb      	str	r3, [r7, #12]
>>>>>>> Stashed changes
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
<<<<<<< Updated upstream
 8002c42:	68fb      	ldr	r3, [r7, #12]
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	3714      	adds	r7, #20
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4e:	4770      	bx	lr

08002c50 <HAL_CAN_GetRxMessage>:
=======
 8002c46:	68fb      	ldr	r3, [r7, #12]
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	3714      	adds	r7, #20
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c52:	4770      	bx	lr

08002c54 <HAL_CAN_GetRxMessage>:
>>>>>>> Stashed changes
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
<<<<<<< Updated upstream
 8002c50:	b480      	push	{r7}
 8002c52:	b087      	sub	sp, #28
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	60f8      	str	r0, [r7, #12]
 8002c58:	60b9      	str	r1, [r7, #8]
 8002c5a:	607a      	str	r2, [r7, #4]
 8002c5c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c64:	75fb      	strb	r3, [r7, #23]
=======
 8002c54:	b480      	push	{r7}
 8002c56:	b087      	sub	sp, #28
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	60f8      	str	r0, [r7, #12]
 8002c5c:	60b9      	str	r1, [r7, #8]
 8002c5e:	607a      	str	r2, [r7, #4]
 8002c60:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c68:	75fb      	strb	r3, [r7, #23]
>>>>>>> Stashed changes

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
<<<<<<< Updated upstream
 8002c66:	7dfb      	ldrb	r3, [r7, #23]
 8002c68:	2b01      	cmp	r3, #1
 8002c6a:	d003      	beq.n	8002c74 <HAL_CAN_GetRxMessage+0x24>
 8002c6c:	7dfb      	ldrb	r3, [r7, #23]
 8002c6e:	2b02      	cmp	r3, #2
 8002c70:	f040 80f3 	bne.w	8002e5a <HAL_CAN_GetRxMessage+0x20a>
=======
 8002c6a:	7dfb      	ldrb	r3, [r7, #23]
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	d003      	beq.n	8002c78 <HAL_CAN_GetRxMessage+0x24>
 8002c70:	7dfb      	ldrb	r3, [r7, #23]
 8002c72:	2b02      	cmp	r3, #2
 8002c74:	f040 80f3 	bne.w	8002e5e <HAL_CAN_GetRxMessage+0x20a>
>>>>>>> Stashed changes
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
<<<<<<< Updated upstream
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d10e      	bne.n	8002c98 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	68db      	ldr	r3, [r3, #12]
 8002c80:	f003 0303 	and.w	r3, r3, #3
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d116      	bne.n	8002cb6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c8c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002c94:	2301      	movs	r3, #1
 8002c96:	e0e7      	b.n	8002e68 <HAL_CAN_GetRxMessage+0x218>
=======
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d10e      	bne.n	8002c9c <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	68db      	ldr	r3, [r3, #12]
 8002c84:	f003 0303 	and.w	r3, r3, #3
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d116      	bne.n	8002cba <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c90:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	e0e7      	b.n	8002e6c <HAL_CAN_GetRxMessage+0x218>
>>>>>>> Stashed changes
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
<<<<<<< Updated upstream
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	691b      	ldr	r3, [r3, #16]
 8002c9e:	f003 0303 	and.w	r3, r3, #3
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d107      	bne.n	8002cb6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002caa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e0d8      	b.n	8002e68 <HAL_CAN_GetRxMessage+0x218>
=======
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	691b      	ldr	r3, [r3, #16]
 8002ca2:	f003 0303 	and.w	r3, r3, #3
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d107      	bne.n	8002cba <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cae:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e0d8      	b.n	8002e6c <HAL_CAN_GetRxMessage+0x218>
>>>>>>> Stashed changes
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
<<<<<<< Updated upstream
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	331b      	adds	r3, #27
 8002cbe:	011b      	lsls	r3, r3, #4
 8002cc0:	4413      	add	r3, r2
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f003 0204 	and.w	r2, r3, #4
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d10c      	bne.n	8002cee <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	331b      	adds	r3, #27
 8002cdc:	011b      	lsls	r3, r3, #4
 8002cde:	4413      	add	r3, r2
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	0d5b      	lsrs	r3, r3, #21
 8002ce4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	601a      	str	r2, [r3, #0]
 8002cec:	e00b      	b.n	8002d06 <HAL_CAN_GetRxMessage+0xb6>
=======
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681a      	ldr	r2, [r3, #0]
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	331b      	adds	r3, #27
 8002cc2:	011b      	lsls	r3, r3, #4
 8002cc4:	4413      	add	r3, r2
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f003 0204 	and.w	r2, r3, #4
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d10c      	bne.n	8002cf2 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	331b      	adds	r3, #27
 8002ce0:	011b      	lsls	r3, r3, #4
 8002ce2:	4413      	add	r3, r2
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	0d5b      	lsrs	r3, r3, #21
 8002ce8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	601a      	str	r2, [r3, #0]
 8002cf0:	e00b      	b.n	8002d0a <HAL_CAN_GetRxMessage+0xb6>
>>>>>>> Stashed changes
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
<<<<<<< Updated upstream
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	331b      	adds	r3, #27
 8002cf6:	011b      	lsls	r3, r3, #4
 8002cf8:	4413      	add	r3, r2
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	08db      	lsrs	r3, r3, #3
 8002cfe:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	331b      	adds	r3, #27
 8002d0e:	011b      	lsls	r3, r3, #4
 8002d10:	4413      	add	r3, r2
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f003 0202 	and.w	r2, r3, #2
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681a      	ldr	r2, [r3, #0]
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	331b      	adds	r3, #27
 8002d24:	011b      	lsls	r3, r3, #4
 8002d26:	4413      	add	r3, r2
 8002d28:	3304      	adds	r3, #4
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f003 020f 	and.w	r2, r3, #15
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681a      	ldr	r2, [r3, #0]
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	331b      	adds	r3, #27
 8002d3c:	011b      	lsls	r3, r3, #4
 8002d3e:	4413      	add	r3, r2
 8002d40:	3304      	adds	r3, #4
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	0a1b      	lsrs	r3, r3, #8
 8002d46:	b2da      	uxtb	r2, r3
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	331b      	adds	r3, #27
 8002d54:	011b      	lsls	r3, r3, #4
 8002d56:	4413      	add	r3, r2
 8002d58:	3304      	adds	r3, #4
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	0c1b      	lsrs	r3, r3, #16
 8002d5e:	b29a      	uxth	r2, r3
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	011b      	lsls	r3, r3, #4
 8002d6c:	4413      	add	r3, r2
 8002d6e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	b2da      	uxtb	r2, r3
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681a      	ldr	r2, [r3, #0]
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	011b      	lsls	r3, r3, #4
 8002d82:	4413      	add	r3, r2
 8002d84:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	0a1a      	lsrs	r2, r3, #8
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	3301      	adds	r3, #1
 8002d90:	b2d2      	uxtb	r2, r2
 8002d92:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681a      	ldr	r2, [r3, #0]
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	011b      	lsls	r3, r3, #4
 8002d9c:	4413      	add	r3, r2
 8002d9e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	0c1a      	lsrs	r2, r3, #16
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	3302      	adds	r3, #2
 8002daa:	b2d2      	uxtb	r2, r2
 8002dac:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	011b      	lsls	r3, r3, #4
 8002db6:	4413      	add	r3, r2
 8002db8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	0e1a      	lsrs	r2, r3, #24
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	3303      	adds	r3, #3
 8002dc4:	b2d2      	uxtb	r2, r2
 8002dc6:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	011b      	lsls	r3, r3, #4
 8002dd0:	4413      	add	r3, r2
 8002dd2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002dd6:	681a      	ldr	r2, [r3, #0]
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	3304      	adds	r3, #4
 8002ddc:	b2d2      	uxtb	r2, r2
 8002dde:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	011b      	lsls	r3, r3, #4
 8002de8:	4413      	add	r3, r2
 8002dea:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	0a1a      	lsrs	r2, r3, #8
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	3305      	adds	r3, #5
 8002df6:	b2d2      	uxtb	r2, r2
 8002df8:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	011b      	lsls	r3, r3, #4
 8002e02:	4413      	add	r3, r2
 8002e04:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	0c1a      	lsrs	r2, r3, #16
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	3306      	adds	r3, #6
 8002e10:	b2d2      	uxtb	r2, r2
 8002e12:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	011b      	lsls	r3, r3, #4
 8002e1c:	4413      	add	r3, r2
 8002e1e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	0e1a      	lsrs	r2, r3, #24
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	3307      	adds	r3, #7
 8002e2a:	b2d2      	uxtb	r2, r2
 8002e2c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d108      	bne.n	8002e46 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	68da      	ldr	r2, [r3, #12]
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f042 0220 	orr.w	r2, r2, #32
 8002e42:	60da      	str	r2, [r3, #12]
 8002e44:	e007      	b.n	8002e56 <HAL_CAN_GetRxMessage+0x206>
=======
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	331b      	adds	r3, #27
 8002cfa:	011b      	lsls	r3, r3, #4
 8002cfc:	4413      	add	r3, r2
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	08db      	lsrs	r3, r3, #3
 8002d02:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681a      	ldr	r2, [r3, #0]
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	331b      	adds	r3, #27
 8002d12:	011b      	lsls	r3, r3, #4
 8002d14:	4413      	add	r3, r2
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f003 0202 	and.w	r2, r3, #2
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	331b      	adds	r3, #27
 8002d28:	011b      	lsls	r3, r3, #4
 8002d2a:	4413      	add	r3, r2
 8002d2c:	3304      	adds	r3, #4
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 020f 	and.w	r2, r3, #15
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	331b      	adds	r3, #27
 8002d40:	011b      	lsls	r3, r3, #4
 8002d42:	4413      	add	r3, r2
 8002d44:	3304      	adds	r3, #4
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	0a1b      	lsrs	r3, r3, #8
 8002d4a:	b2da      	uxtb	r2, r3
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681a      	ldr	r2, [r3, #0]
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	331b      	adds	r3, #27
 8002d58:	011b      	lsls	r3, r3, #4
 8002d5a:	4413      	add	r3, r2
 8002d5c:	3304      	adds	r3, #4
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	0c1b      	lsrs	r3, r3, #16
 8002d62:	b29a      	uxth	r2, r3
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681a      	ldr	r2, [r3, #0]
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	011b      	lsls	r3, r3, #4
 8002d70:	4413      	add	r3, r2
 8002d72:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	b2da      	uxtb	r2, r3
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681a      	ldr	r2, [r3, #0]
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	011b      	lsls	r3, r3, #4
 8002d86:	4413      	add	r3, r2
 8002d88:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	0a1a      	lsrs	r2, r3, #8
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	3301      	adds	r3, #1
 8002d94:	b2d2      	uxtb	r2, r2
 8002d96:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	011b      	lsls	r3, r3, #4
 8002da0:	4413      	add	r3, r2
 8002da2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	0c1a      	lsrs	r2, r3, #16
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	3302      	adds	r3, #2
 8002dae:	b2d2      	uxtb	r2, r2
 8002db0:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681a      	ldr	r2, [r3, #0]
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	011b      	lsls	r3, r3, #4
 8002dba:	4413      	add	r3, r2
 8002dbc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	0e1a      	lsrs	r2, r3, #24
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	3303      	adds	r3, #3
 8002dc8:	b2d2      	uxtb	r2, r2
 8002dca:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681a      	ldr	r2, [r3, #0]
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	011b      	lsls	r3, r3, #4
 8002dd4:	4413      	add	r3, r2
 8002dd6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	3304      	adds	r3, #4
 8002de0:	b2d2      	uxtb	r2, r2
 8002de2:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681a      	ldr	r2, [r3, #0]
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	011b      	lsls	r3, r3, #4
 8002dec:	4413      	add	r3, r2
 8002dee:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	0a1a      	lsrs	r2, r3, #8
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	3305      	adds	r3, #5
 8002dfa:	b2d2      	uxtb	r2, r2
 8002dfc:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681a      	ldr	r2, [r3, #0]
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	011b      	lsls	r3, r3, #4
 8002e06:	4413      	add	r3, r2
 8002e08:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	0c1a      	lsrs	r2, r3, #16
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	3306      	adds	r3, #6
 8002e14:	b2d2      	uxtb	r2, r2
 8002e16:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	011b      	lsls	r3, r3, #4
 8002e20:	4413      	add	r3, r2
 8002e22:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	0e1a      	lsrs	r2, r3, #24
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	3307      	adds	r3, #7
 8002e2e:	b2d2      	uxtb	r2, r2
 8002e30:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d108      	bne.n	8002e4a <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	68da      	ldr	r2, [r3, #12]
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f042 0220 	orr.w	r2, r2, #32
 8002e46:	60da      	str	r2, [r3, #12]
 8002e48:	e007      	b.n	8002e5a <HAL_CAN_GetRxMessage+0x206>
>>>>>>> Stashed changes
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
<<<<<<< Updated upstream
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	691a      	ldr	r2, [r3, #16]
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f042 0220 	orr.w	r2, r2, #32
 8002e54:	611a      	str	r2, [r3, #16]
=======
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	691a      	ldr	r2, [r3, #16]
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f042 0220 	orr.w	r2, r2, #32
 8002e58:	611a      	str	r2, [r3, #16]
>>>>>>> Stashed changes
    }

    /* Return function status */
    return HAL_OK;
<<<<<<< Updated upstream
 8002e56:	2300      	movs	r3, #0
 8002e58:	e006      	b.n	8002e68 <HAL_CAN_GetRxMessage+0x218>
=======
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	e006      	b.n	8002e6c <HAL_CAN_GetRxMessage+0x218>
>>>>>>> Stashed changes
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
<<<<<<< Updated upstream
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e5e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
  }
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	371c      	adds	r7, #28
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e72:	4770      	bx	lr

08002e74 <HAL_CAN_ActivateNotification>:
=======
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e62:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
  }
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	371c      	adds	r7, #28
 8002e70:	46bd      	mov	sp, r7
 8002e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e76:	4770      	bx	lr

08002e78 <HAL_CAN_ActivateNotification>:
>>>>>>> Stashed changes
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
<<<<<<< Updated upstream
 8002e74:	b480      	push	{r7}
 8002e76:	b085      	sub	sp, #20
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
 8002e7c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e84:	73fb      	strb	r3, [r7, #15]
=======
 8002e78:	b480      	push	{r7}
 8002e7a:	b085      	sub	sp, #20
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
 8002e80:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e88:	73fb      	strb	r3, [r7, #15]
>>>>>>> Stashed changes

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
<<<<<<< Updated upstream
 8002e86:	7bfb      	ldrb	r3, [r7, #15]
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	d002      	beq.n	8002e92 <HAL_CAN_ActivateNotification+0x1e>
 8002e8c:	7bfb      	ldrb	r3, [r7, #15]
 8002e8e:	2b02      	cmp	r3, #2
 8002e90:	d109      	bne.n	8002ea6 <HAL_CAN_ActivateNotification+0x32>
=======
 8002e8a:	7bfb      	ldrb	r3, [r7, #15]
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	d002      	beq.n	8002e96 <HAL_CAN_ActivateNotification+0x1e>
 8002e90:	7bfb      	ldrb	r3, [r7, #15]
 8002e92:	2b02      	cmp	r3, #2
 8002e94:	d109      	bne.n	8002eaa <HAL_CAN_ActivateNotification+0x32>
>>>>>>> Stashed changes
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
<<<<<<< Updated upstream
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	6959      	ldr	r1, [r3, #20]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	683a      	ldr	r2, [r7, #0]
 8002e9e:	430a      	orrs	r2, r1
 8002ea0:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	e006      	b.n	8002eb4 <HAL_CAN_ActivateNotification+0x40>
=======
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	6959      	ldr	r1, [r3, #20]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	683a      	ldr	r2, [r7, #0]
 8002ea2:	430a      	orrs	r2, r1
 8002ea4:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	e006      	b.n	8002eb8 <HAL_CAN_ActivateNotification+0x40>
>>>>>>> Stashed changes
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
<<<<<<< Updated upstream
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eaa:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
  }
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	3714      	adds	r7, #20
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebe:	4770      	bx	lr

08002ec0 <HAL_CAN_IRQHandler>:
=======
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eae:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
  }
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	3714      	adds	r7, #20
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec2:	4770      	bx	lr

08002ec4 <HAL_CAN_IRQHandler>:
>>>>>>> Stashed changes
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
<<<<<<< Updated upstream
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b08a      	sub	sp, #40	; 0x28
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	695b      	ldr	r3, [r3, #20]
 8002ed2:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	68db      	ldr	r3, [r3, #12]
 8002eea:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	691b      	ldr	r3, [r3, #16]
 8002ef2:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	699b      	ldr	r3, [r3, #24]
 8002efa:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002efc:	6a3b      	ldr	r3, [r7, #32]
 8002efe:	f003 0301 	and.w	r3, r3, #1
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d07c      	beq.n	8003000 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002f06:	69bb      	ldr	r3, [r7, #24]
 8002f08:	f003 0301 	and.w	r3, r3, #1
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d023      	beq.n	8002f58 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	2201      	movs	r2, #1
 8002f16:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002f18:	69bb      	ldr	r3, [r7, #24]
 8002f1a:	f003 0302 	and.w	r3, r3, #2
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d003      	beq.n	8002f2a <HAL_CAN_IRQHandler+0x6a>
=======
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b08a      	sub	sp, #40	; 0x28
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	695b      	ldr	r3, [r3, #20]
 8002ed6:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	68db      	ldr	r3, [r3, #12]
 8002eee:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	691b      	ldr	r3, [r3, #16]
 8002ef6:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	699b      	ldr	r3, [r3, #24]
 8002efe:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002f00:	6a3b      	ldr	r3, [r7, #32]
 8002f02:	f003 0301 	and.w	r3, r3, #1
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d07c      	beq.n	8003004 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002f0a:	69bb      	ldr	r3, [r7, #24]
 8002f0c:	f003 0301 	and.w	r3, r3, #1
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d023      	beq.n	8002f5c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	2201      	movs	r2, #1
 8002f1a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002f1c:	69bb      	ldr	r3, [r7, #24]
 8002f1e:	f003 0302 	and.w	r3, r3, #2
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d003      	beq.n	8002f2e <HAL_CAN_IRQHandler+0x6a>
>>>>>>> Stashed changes
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
<<<<<<< Updated upstream
 8002f22:	6878      	ldr	r0, [r7, #4]
 8002f24:	f000 f983 	bl	800322e <HAL_CAN_TxMailbox0CompleteCallback>
 8002f28:	e016      	b.n	8002f58 <HAL_CAN_IRQHandler+0x98>
=======
 8002f26:	6878      	ldr	r0, [r7, #4]
 8002f28:	f000 f983 	bl	8003232 <HAL_CAN_TxMailbox0CompleteCallback>
 8002f2c:	e016      	b.n	8002f5c <HAL_CAN_IRQHandler+0x98>
>>>>>>> Stashed changes
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
<<<<<<< Updated upstream
 8002f2a:	69bb      	ldr	r3, [r7, #24]
 8002f2c:	f003 0304 	and.w	r3, r3, #4
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d004      	beq.n	8002f3e <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f36:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002f3a:	627b      	str	r3, [r7, #36]	; 0x24
 8002f3c:	e00c      	b.n	8002f58 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002f3e:	69bb      	ldr	r3, [r7, #24]
 8002f40:	f003 0308 	and.w	r3, r3, #8
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d004      	beq.n	8002f52 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f4a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002f4e:	627b      	str	r3, [r7, #36]	; 0x24
 8002f50:	e002      	b.n	8002f58 <HAL_CAN_IRQHandler+0x98>
=======
 8002f2e:	69bb      	ldr	r3, [r7, #24]
 8002f30:	f003 0304 	and.w	r3, r3, #4
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d004      	beq.n	8002f42 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f3a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002f3e:	627b      	str	r3, [r7, #36]	; 0x24
 8002f40:	e00c      	b.n	8002f5c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002f42:	69bb      	ldr	r3, [r7, #24]
 8002f44:	f003 0308 	and.w	r3, r3, #8
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d004      	beq.n	8002f56 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f4e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002f52:	627b      	str	r3, [r7, #36]	; 0x24
 8002f54:	e002      	b.n	8002f5c <HAL_CAN_IRQHandler+0x98>
>>>>>>> Stashed changes
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
<<<<<<< Updated upstream
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	f000 f989 	bl	800326a <HAL_CAN_TxMailbox0AbortCallback>
=======
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	f000 f989 	bl	800326e <HAL_CAN_TxMailbox0AbortCallback>
>>>>>>> Stashed changes
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
<<<<<<< Updated upstream
 8002f58:	69bb      	ldr	r3, [r7, #24]
 8002f5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d024      	beq.n	8002fac <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f6a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002f6c:	69bb      	ldr	r3, [r7, #24]
 8002f6e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d003      	beq.n	8002f7e <HAL_CAN_IRQHandler+0xbe>
=======
 8002f5c:	69bb      	ldr	r3, [r7, #24]
 8002f5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d024      	beq.n	8002fb0 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f6e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002f70:	69bb      	ldr	r3, [r7, #24]
 8002f72:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d003      	beq.n	8002f82 <HAL_CAN_IRQHandler+0xbe>
>>>>>>> Stashed changes
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
<<<<<<< Updated upstream
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	f000 f963 	bl	8003242 <HAL_CAN_TxMailbox1CompleteCallback>
 8002f7c:	e016      	b.n	8002fac <HAL_CAN_IRQHandler+0xec>
=======
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	f000 f963 	bl	8003246 <HAL_CAN_TxMailbox1CompleteCallback>
 8002f80:	e016      	b.n	8002fb0 <HAL_CAN_IRQHandler+0xec>
>>>>>>> Stashed changes
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
<<<<<<< Updated upstream
 8002f7e:	69bb      	ldr	r3, [r7, #24]
 8002f80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d004      	beq.n	8002f92 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f8a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002f8e:	627b      	str	r3, [r7, #36]	; 0x24
 8002f90:	e00c      	b.n	8002fac <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002f92:	69bb      	ldr	r3, [r7, #24]
 8002f94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d004      	beq.n	8002fa6 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f9e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002fa2:	627b      	str	r3, [r7, #36]	; 0x24
 8002fa4:	e002      	b.n	8002fac <HAL_CAN_IRQHandler+0xec>
=======
 8002f82:	69bb      	ldr	r3, [r7, #24]
 8002f84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d004      	beq.n	8002f96 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f8e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002f92:	627b      	str	r3, [r7, #36]	; 0x24
 8002f94:	e00c      	b.n	8002fb0 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002f96:	69bb      	ldr	r3, [r7, #24]
 8002f98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d004      	beq.n	8002faa <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002fa6:	627b      	str	r3, [r7, #36]	; 0x24
 8002fa8:	e002      	b.n	8002fb0 <HAL_CAN_IRQHandler+0xec>
>>>>>>> Stashed changes
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
<<<<<<< Updated upstream
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	f000 f969 	bl	800327e <HAL_CAN_TxMailbox1AbortCallback>
=======
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	f000 f969 	bl	8003282 <HAL_CAN_TxMailbox1AbortCallback>
>>>>>>> Stashed changes
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
<<<<<<< Updated upstream
 8002fac:	69bb      	ldr	r3, [r7, #24]
 8002fae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d024      	beq.n	8003000 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002fbe:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002fc0:	69bb      	ldr	r3, [r7, #24]
 8002fc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d003      	beq.n	8002fd2 <HAL_CAN_IRQHandler+0x112>
=======
 8002fb0:	69bb      	ldr	r3, [r7, #24]
 8002fb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d024      	beq.n	8003004 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002fc2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002fc4:	69bb      	ldr	r3, [r7, #24]
 8002fc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d003      	beq.n	8002fd6 <HAL_CAN_IRQHandler+0x112>
>>>>>>> Stashed changes
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
<<<<<<< Updated upstream
 8002fca:	6878      	ldr	r0, [r7, #4]
 8002fcc:	f000 f943 	bl	8003256 <HAL_CAN_TxMailbox2CompleteCallback>
 8002fd0:	e016      	b.n	8003000 <HAL_CAN_IRQHandler+0x140>
=======
 8002fce:	6878      	ldr	r0, [r7, #4]
 8002fd0:	f000 f943 	bl	800325a <HAL_CAN_TxMailbox2CompleteCallback>
 8002fd4:	e016      	b.n	8003004 <HAL_CAN_IRQHandler+0x140>
>>>>>>> Stashed changes
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
<<<<<<< Updated upstream
 8002fd2:	69bb      	ldr	r3, [r7, #24]
 8002fd4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d004      	beq.n	8002fe6 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002fe2:	627b      	str	r3, [r7, #36]	; 0x24
 8002fe4:	e00c      	b.n	8003000 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002fe6:	69bb      	ldr	r3, [r7, #24]
 8002fe8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d004      	beq.n	8002ffa <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ff6:	627b      	str	r3, [r7, #36]	; 0x24
 8002ff8:	e002      	b.n	8003000 <HAL_CAN_IRQHandler+0x140>
=======
 8002fd6:	69bb      	ldr	r3, [r7, #24]
 8002fd8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d004      	beq.n	8002fea <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002fe6:	627b      	str	r3, [r7, #36]	; 0x24
 8002fe8:	e00c      	b.n	8003004 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002fea:	69bb      	ldr	r3, [r7, #24]
 8002fec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d004      	beq.n	8002ffe <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ffa:	627b      	str	r3, [r7, #36]	; 0x24
 8002ffc:	e002      	b.n	8003004 <HAL_CAN_IRQHandler+0x140>
>>>>>>> Stashed changes
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
<<<<<<< Updated upstream
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	f000 f949 	bl	8003292 <HAL_CAN_TxMailbox2AbortCallback>
=======
 8002ffe:	6878      	ldr	r0, [r7, #4]
 8003000:	f000 f949 	bl	8003296 <HAL_CAN_TxMailbox2AbortCallback>
>>>>>>> Stashed changes
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
<<<<<<< Updated upstream
 8003000:	6a3b      	ldr	r3, [r7, #32]
 8003002:	f003 0308 	and.w	r3, r3, #8
 8003006:	2b00      	cmp	r3, #0
 8003008:	d00c      	beq.n	8003024 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	f003 0310 	and.w	r3, r3, #16
 8003010:	2b00      	cmp	r3, #0
 8003012:	d007      	beq.n	8003024 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003016:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800301a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	2210      	movs	r2, #16
 8003022:	60da      	str	r2, [r3, #12]
=======
 8003004:	6a3b      	ldr	r3, [r7, #32]
 8003006:	f003 0308 	and.w	r3, r3, #8
 800300a:	2b00      	cmp	r3, #0
 800300c:	d00c      	beq.n	8003028 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	f003 0310 	and.w	r3, r3, #16
 8003014:	2b00      	cmp	r3, #0
 8003016:	d007      	beq.n	8003028 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800301a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800301e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	2210      	movs	r2, #16
 8003026:	60da      	str	r2, [r3, #12]
>>>>>>> Stashed changes
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
<<<<<<< Updated upstream
 8003024:	6a3b      	ldr	r3, [r7, #32]
 8003026:	f003 0304 	and.w	r3, r3, #4
 800302a:	2b00      	cmp	r3, #0
 800302c:	d00b      	beq.n	8003046 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	f003 0308 	and.w	r3, r3, #8
 8003034:	2b00      	cmp	r3, #0
 8003036:	d006      	beq.n	8003046 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	2208      	movs	r2, #8
 800303e:	60da      	str	r2, [r3, #12]
=======
 8003028:	6a3b      	ldr	r3, [r7, #32]
 800302a:	f003 0304 	and.w	r3, r3, #4
 800302e:	2b00      	cmp	r3, #0
 8003030:	d00b      	beq.n	800304a <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	f003 0308 	and.w	r3, r3, #8
 8003038:	2b00      	cmp	r3, #0
 800303a:	d006      	beq.n	800304a <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	2208      	movs	r2, #8
 8003042:	60da      	str	r2, [r3, #12]
>>>>>>> Stashed changes
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
<<<<<<< Updated upstream
 8003040:	6878      	ldr	r0, [r7, #4]
 8003042:	f000 f930 	bl	80032a6 <HAL_CAN_RxFifo0FullCallback>
=======
 8003044:	6878      	ldr	r0, [r7, #4]
 8003046:	f000 f930 	bl	80032aa <HAL_CAN_RxFifo0FullCallback>
>>>>>>> Stashed changes
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
<<<<<<< Updated upstream
 8003046:	6a3b      	ldr	r3, [r7, #32]
 8003048:	f003 0302 	and.w	r3, r3, #2
 800304c:	2b00      	cmp	r3, #0
 800304e:	d009      	beq.n	8003064 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	68db      	ldr	r3, [r3, #12]
 8003056:	f003 0303 	and.w	r3, r3, #3
 800305a:	2b00      	cmp	r3, #0
 800305c:	d002      	beq.n	8003064 <HAL_CAN_IRQHandler+0x1a4>
=======
 800304a:	6a3b      	ldr	r3, [r7, #32]
 800304c:	f003 0302 	and.w	r3, r3, #2
 8003050:	2b00      	cmp	r3, #0
 8003052:	d009      	beq.n	8003068 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	68db      	ldr	r3, [r3, #12]
 800305a:	f003 0303 	and.w	r3, r3, #3
 800305e:	2b00      	cmp	r3, #0
 8003060:	d002      	beq.n	8003068 <HAL_CAN_IRQHandler+0x1a4>
>>>>>>> Stashed changes
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
<<<<<<< Updated upstream
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f7fe f804 	bl	800106c <HAL_CAN_RxFifo0MsgPendingCallback>
=======
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	f7fe f804 	bl	8001070 <HAL_CAN_RxFifo0MsgPendingCallback>
>>>>>>> Stashed changes
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
<<<<<<< Updated upstream
 8003064:	6a3b      	ldr	r3, [r7, #32]
 8003066:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800306a:	2b00      	cmp	r3, #0
 800306c:	d00c      	beq.n	8003088 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	f003 0310 	and.w	r3, r3, #16
 8003074:	2b00      	cmp	r3, #0
 8003076:	d007      	beq.n	8003088 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800307a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800307e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	2210      	movs	r2, #16
 8003086:	611a      	str	r2, [r3, #16]
=======
 8003068:	6a3b      	ldr	r3, [r7, #32]
 800306a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800306e:	2b00      	cmp	r3, #0
 8003070:	d00c      	beq.n	800308c <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	f003 0310 	and.w	r3, r3, #16
 8003078:	2b00      	cmp	r3, #0
 800307a:	d007      	beq.n	800308c <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800307c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800307e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003082:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	2210      	movs	r2, #16
 800308a:	611a      	str	r2, [r3, #16]
>>>>>>> Stashed changes
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
<<<<<<< Updated upstream
 8003088:	6a3b      	ldr	r3, [r7, #32]
 800308a:	f003 0320 	and.w	r3, r3, #32
 800308e:	2b00      	cmp	r3, #0
 8003090:	d00b      	beq.n	80030aa <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	f003 0308 	and.w	r3, r3, #8
 8003098:	2b00      	cmp	r3, #0
 800309a:	d006      	beq.n	80030aa <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	2208      	movs	r2, #8
 80030a2:	611a      	str	r2, [r3, #16]
=======
 800308c:	6a3b      	ldr	r3, [r7, #32]
 800308e:	f003 0320 	and.w	r3, r3, #32
 8003092:	2b00      	cmp	r3, #0
 8003094:	d00b      	beq.n	80030ae <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	f003 0308 	and.w	r3, r3, #8
 800309c:	2b00      	cmp	r3, #0
 800309e:	d006      	beq.n	80030ae <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	2208      	movs	r2, #8
 80030a6:	611a      	str	r2, [r3, #16]
>>>>>>> Stashed changes
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
<<<<<<< Updated upstream
 80030a4:	6878      	ldr	r0, [r7, #4]
 80030a6:	f000 f912 	bl	80032ce <HAL_CAN_RxFifo1FullCallback>
=======
 80030a8:	6878      	ldr	r0, [r7, #4]
 80030aa:	f000 f912 	bl	80032d2 <HAL_CAN_RxFifo1FullCallback>
>>>>>>> Stashed changes
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
<<<<<<< Updated upstream
 80030aa:	6a3b      	ldr	r3, [r7, #32]
 80030ac:	f003 0310 	and.w	r3, r3, #16
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d009      	beq.n	80030c8 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	691b      	ldr	r3, [r3, #16]
 80030ba:	f003 0303 	and.w	r3, r3, #3
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d002      	beq.n	80030c8 <HAL_CAN_IRQHandler+0x208>
=======
 80030ae:	6a3b      	ldr	r3, [r7, #32]
 80030b0:	f003 0310 	and.w	r3, r3, #16
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d009      	beq.n	80030cc <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	691b      	ldr	r3, [r3, #16]
 80030be:	f003 0303 	and.w	r3, r3, #3
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d002      	beq.n	80030cc <HAL_CAN_IRQHandler+0x208>
>>>>>>> Stashed changes
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
<<<<<<< Updated upstream
 80030c2:	6878      	ldr	r0, [r7, #4]
 80030c4:	f000 f8f9 	bl	80032ba <HAL_CAN_RxFifo1MsgPendingCallback>
=======
 80030c6:	6878      	ldr	r0, [r7, #4]
 80030c8:	f000 f8f9 	bl	80032be <HAL_CAN_RxFifo1MsgPendingCallback>
>>>>>>> Stashed changes
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
<<<<<<< Updated upstream
 80030c8:	6a3b      	ldr	r3, [r7, #32]
 80030ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d00b      	beq.n	80030ea <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80030d2:	69fb      	ldr	r3, [r7, #28]
 80030d4:	f003 0310 	and.w	r3, r3, #16
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d006      	beq.n	80030ea <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	2210      	movs	r2, #16
 80030e2:	605a      	str	r2, [r3, #4]
=======
 80030cc:	6a3b      	ldr	r3, [r7, #32]
 80030ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d00b      	beq.n	80030ee <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80030d6:	69fb      	ldr	r3, [r7, #28]
 80030d8:	f003 0310 	and.w	r3, r3, #16
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d006      	beq.n	80030ee <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	2210      	movs	r2, #16
 80030e6:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
<<<<<<< Updated upstream
 80030e4:	6878      	ldr	r0, [r7, #4]
 80030e6:	f000 f8fc 	bl	80032e2 <HAL_CAN_SleepCallback>
=======
 80030e8:	6878      	ldr	r0, [r7, #4]
 80030ea:	f000 f8fc 	bl	80032e6 <HAL_CAN_SleepCallback>
>>>>>>> Stashed changes
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
<<<<<<< Updated upstream
 80030ea:	6a3b      	ldr	r3, [r7, #32]
 80030ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d00b      	beq.n	800310c <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80030f4:	69fb      	ldr	r3, [r7, #28]
 80030f6:	f003 0308 	and.w	r3, r3, #8
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d006      	beq.n	800310c <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	2208      	movs	r2, #8
 8003104:	605a      	str	r2, [r3, #4]
=======
 80030ee:	6a3b      	ldr	r3, [r7, #32]
 80030f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d00b      	beq.n	8003110 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80030f8:	69fb      	ldr	r3, [r7, #28]
 80030fa:	f003 0308 	and.w	r3, r3, #8
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d006      	beq.n	8003110 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	2208      	movs	r2, #8
 8003108:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
<<<<<<< Updated upstream
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	f000 f8f5 	bl	80032f6 <HAL_CAN_WakeUpFromRxMsgCallback>
=======
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	f000 f8f5 	bl	80032fa <HAL_CAN_WakeUpFromRxMsgCallback>
>>>>>>> Stashed changes
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
<<<<<<< Updated upstream
 800310c:	6a3b      	ldr	r3, [r7, #32]
 800310e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003112:	2b00      	cmp	r3, #0
 8003114:	d07b      	beq.n	800320e <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003116:	69fb      	ldr	r3, [r7, #28]
 8003118:	f003 0304 	and.w	r3, r3, #4
 800311c:	2b00      	cmp	r3, #0
 800311e:	d072      	beq.n	8003206 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003120:	6a3b      	ldr	r3, [r7, #32]
 8003122:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003126:	2b00      	cmp	r3, #0
 8003128:	d008      	beq.n	800313c <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003130:	2b00      	cmp	r3, #0
 8003132:	d003      	beq.n	800313c <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003136:	f043 0301 	orr.w	r3, r3, #1
 800313a:	627b      	str	r3, [r7, #36]	; 0x24
=======
 8003110:	6a3b      	ldr	r3, [r7, #32]
 8003112:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003116:	2b00      	cmp	r3, #0
 8003118:	d07b      	beq.n	8003212 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800311a:	69fb      	ldr	r3, [r7, #28]
 800311c:	f003 0304 	and.w	r3, r3, #4
 8003120:	2b00      	cmp	r3, #0
 8003122:	d072      	beq.n	800320a <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003124:	6a3b      	ldr	r3, [r7, #32]
 8003126:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800312a:	2b00      	cmp	r3, #0
 800312c:	d008      	beq.n	8003140 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003134:	2b00      	cmp	r3, #0
 8003136:	d003      	beq.n	8003140 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800313a:	f043 0301 	orr.w	r3, r3, #1
 800313e:	627b      	str	r3, [r7, #36]	; 0x24
>>>>>>> Stashed changes

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
<<<<<<< Updated upstream
 800313c:	6a3b      	ldr	r3, [r7, #32]
 800313e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003142:	2b00      	cmp	r3, #0
 8003144:	d008      	beq.n	8003158 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800314c:	2b00      	cmp	r3, #0
 800314e:	d003      	beq.n	8003158 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003152:	f043 0302 	orr.w	r3, r3, #2
 8003156:	627b      	str	r3, [r7, #36]	; 0x24
=======
 8003140:	6a3b      	ldr	r3, [r7, #32]
 8003142:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003146:	2b00      	cmp	r3, #0
 8003148:	d008      	beq.n	800315c <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003150:	2b00      	cmp	r3, #0
 8003152:	d003      	beq.n	800315c <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003156:	f043 0302 	orr.w	r3, r3, #2
 800315a:	627b      	str	r3, [r7, #36]	; 0x24
>>>>>>> Stashed changes

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
<<<<<<< Updated upstream
 8003158:	6a3b      	ldr	r3, [r7, #32]
 800315a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800315e:	2b00      	cmp	r3, #0
 8003160:	d008      	beq.n	8003174 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003168:	2b00      	cmp	r3, #0
 800316a:	d003      	beq.n	8003174 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800316c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800316e:	f043 0304 	orr.w	r3, r3, #4
 8003172:	627b      	str	r3, [r7, #36]	; 0x24
=======
 800315c:	6a3b      	ldr	r3, [r7, #32]
 800315e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003162:	2b00      	cmp	r3, #0
 8003164:	d008      	beq.n	8003178 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800316c:	2b00      	cmp	r3, #0
 800316e:	d003      	beq.n	8003178 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003172:	f043 0304 	orr.w	r3, r3, #4
 8003176:	627b      	str	r3, [r7, #36]	; 0x24
>>>>>>> Stashed changes

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
<<<<<<< Updated upstream
 8003174:	6a3b      	ldr	r3, [r7, #32]
 8003176:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800317a:	2b00      	cmp	r3, #0
 800317c:	d043      	beq.n	8003206 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003184:	2b00      	cmp	r3, #0
 8003186:	d03e      	beq.n	8003206 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800318e:	2b60      	cmp	r3, #96	; 0x60
 8003190:	d02b      	beq.n	80031ea <HAL_CAN_IRQHandler+0x32a>
 8003192:	2b60      	cmp	r3, #96	; 0x60
 8003194:	d82e      	bhi.n	80031f4 <HAL_CAN_IRQHandler+0x334>
 8003196:	2b50      	cmp	r3, #80	; 0x50
 8003198:	d022      	beq.n	80031e0 <HAL_CAN_IRQHandler+0x320>
 800319a:	2b50      	cmp	r3, #80	; 0x50
 800319c:	d82a      	bhi.n	80031f4 <HAL_CAN_IRQHandler+0x334>
 800319e:	2b40      	cmp	r3, #64	; 0x40
 80031a0:	d019      	beq.n	80031d6 <HAL_CAN_IRQHandler+0x316>
 80031a2:	2b40      	cmp	r3, #64	; 0x40
 80031a4:	d826      	bhi.n	80031f4 <HAL_CAN_IRQHandler+0x334>
 80031a6:	2b30      	cmp	r3, #48	; 0x30
 80031a8:	d010      	beq.n	80031cc <HAL_CAN_IRQHandler+0x30c>
 80031aa:	2b30      	cmp	r3, #48	; 0x30
 80031ac:	d822      	bhi.n	80031f4 <HAL_CAN_IRQHandler+0x334>
 80031ae:	2b10      	cmp	r3, #16
 80031b0:	d002      	beq.n	80031b8 <HAL_CAN_IRQHandler+0x2f8>
 80031b2:	2b20      	cmp	r3, #32
 80031b4:	d005      	beq.n	80031c2 <HAL_CAN_IRQHandler+0x302>
=======
 8003178:	6a3b      	ldr	r3, [r7, #32]
 800317a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800317e:	2b00      	cmp	r3, #0
 8003180:	d043      	beq.n	800320a <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003188:	2b00      	cmp	r3, #0
 800318a:	d03e      	beq.n	800320a <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003192:	2b60      	cmp	r3, #96	; 0x60
 8003194:	d02b      	beq.n	80031ee <HAL_CAN_IRQHandler+0x32a>
 8003196:	2b60      	cmp	r3, #96	; 0x60
 8003198:	d82e      	bhi.n	80031f8 <HAL_CAN_IRQHandler+0x334>
 800319a:	2b50      	cmp	r3, #80	; 0x50
 800319c:	d022      	beq.n	80031e4 <HAL_CAN_IRQHandler+0x320>
 800319e:	2b50      	cmp	r3, #80	; 0x50
 80031a0:	d82a      	bhi.n	80031f8 <HAL_CAN_IRQHandler+0x334>
 80031a2:	2b40      	cmp	r3, #64	; 0x40
 80031a4:	d019      	beq.n	80031da <HAL_CAN_IRQHandler+0x316>
 80031a6:	2b40      	cmp	r3, #64	; 0x40
 80031a8:	d826      	bhi.n	80031f8 <HAL_CAN_IRQHandler+0x334>
 80031aa:	2b30      	cmp	r3, #48	; 0x30
 80031ac:	d010      	beq.n	80031d0 <HAL_CAN_IRQHandler+0x30c>
 80031ae:	2b30      	cmp	r3, #48	; 0x30
 80031b0:	d822      	bhi.n	80031f8 <HAL_CAN_IRQHandler+0x334>
 80031b2:	2b10      	cmp	r3, #16
 80031b4:	d002      	beq.n	80031bc <HAL_CAN_IRQHandler+0x2f8>
 80031b6:	2b20      	cmp	r3, #32
 80031b8:	d005      	beq.n	80031c6 <HAL_CAN_IRQHandler+0x302>
>>>>>>> Stashed changes
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
<<<<<<< Updated upstream
 80031b6:	e01d      	b.n	80031f4 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80031b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ba:	f043 0308 	orr.w	r3, r3, #8
 80031be:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80031c0:	e019      	b.n	80031f6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80031c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c4:	f043 0310 	orr.w	r3, r3, #16
 80031c8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80031ca:	e014      	b.n	80031f6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80031cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ce:	f043 0320 	orr.w	r3, r3, #32
 80031d2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80031d4:	e00f      	b.n	80031f6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80031d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80031dc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80031de:	e00a      	b.n	80031f6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80031e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031e6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80031e8:	e005      	b.n	80031f6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80031ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031f0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80031f2:	e000      	b.n	80031f6 <HAL_CAN_IRQHandler+0x336>
            break;
 80031f4:	bf00      	nop
=======
 80031ba:	e01d      	b.n	80031f8 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80031bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031be:	f043 0308 	orr.w	r3, r3, #8
 80031c2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80031c4:	e019      	b.n	80031fa <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80031c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c8:	f043 0310 	orr.w	r3, r3, #16
 80031cc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80031ce:	e014      	b.n	80031fa <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80031d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d2:	f043 0320 	orr.w	r3, r3, #32
 80031d6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80031d8:	e00f      	b.n	80031fa <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80031da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80031e0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80031e2:	e00a      	b.n	80031fa <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80031e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031ea:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80031ec:	e005      	b.n	80031fa <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80031ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031f4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80031f6:	e000      	b.n	80031fa <HAL_CAN_IRQHandler+0x336>
            break;
 80031f8:	bf00      	nop
>>>>>>> Stashed changes
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
<<<<<<< Updated upstream
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	699a      	ldr	r2, [r3, #24]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003204:	619a      	str	r2, [r3, #24]
=======
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	699a      	ldr	r2, [r3, #24]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003208:	619a      	str	r2, [r3, #24]
>>>>>>> Stashed changes
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
<<<<<<< Updated upstream
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	2204      	movs	r2, #4
 800320c:	605a      	str	r2, [r3, #4]
=======
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	2204      	movs	r2, #4
 8003210:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
<<<<<<< Updated upstream
 800320e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003210:	2b00      	cmp	r3, #0
 8003212:	d008      	beq.n	8003226 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800321a:	431a      	orrs	r2, r3
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	625a      	str	r2, [r3, #36]	; 0x24
=======
 8003212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003214:	2b00      	cmp	r3, #0
 8003216:	d008      	beq.n	800322a <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800321c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800321e:	431a      	orrs	r2, r3
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	625a      	str	r2, [r3, #36]	; 0x24
>>>>>>> Stashed changes
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
<<<<<<< Updated upstream
 8003220:	6878      	ldr	r0, [r7, #4]
 8003222:	f000 f872 	bl	800330a <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003226:	bf00      	nop
 8003228:	3728      	adds	r7, #40	; 0x28
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}

0800322e <HAL_CAN_TxMailbox0CompleteCallback>:
=======
 8003224:	6878      	ldr	r0, [r7, #4]
 8003226:	f000 f872 	bl	800330e <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800322a:	bf00      	nop
 800322c:	3728      	adds	r7, #40	; 0x28
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}

08003232 <HAL_CAN_TxMailbox0CompleteCallback>:
>>>>>>> Stashed changes
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
<<<<<<< Updated upstream
 800322e:	b480      	push	{r7}
 8003230:	b083      	sub	sp, #12
 8003232:	af00      	add	r7, sp, #0
 8003234:	6078      	str	r0, [r7, #4]
=======
 8003232:	b480      	push	{r7}
 8003234:	b083      	sub	sp, #12
 8003236:	af00      	add	r7, sp, #0
 8003238:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
<<<<<<< Updated upstream
 8003236:	bf00      	nop
 8003238:	370c      	adds	r7, #12
 800323a:	46bd      	mov	sp, r7
 800323c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003240:	4770      	bx	lr

08003242 <HAL_CAN_TxMailbox1CompleteCallback>:
=======
 800323a:	bf00      	nop
 800323c:	370c      	adds	r7, #12
 800323e:	46bd      	mov	sp, r7
 8003240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003244:	4770      	bx	lr

08003246 <HAL_CAN_TxMailbox1CompleteCallback>:
>>>>>>> Stashed changes
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
<<<<<<< Updated upstream
 8003242:	b480      	push	{r7}
 8003244:	b083      	sub	sp, #12
 8003246:	af00      	add	r7, sp, #0
 8003248:	6078      	str	r0, [r7, #4]
=======
 8003246:	b480      	push	{r7}
 8003248:	b083      	sub	sp, #12
 800324a:	af00      	add	r7, sp, #0
 800324c:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
<<<<<<< Updated upstream
 800324a:	bf00      	nop
 800324c:	370c      	adds	r7, #12
 800324e:	46bd      	mov	sp, r7
 8003250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003254:	4770      	bx	lr

08003256 <HAL_CAN_TxMailbox2CompleteCallback>:
=======
 800324e:	bf00      	nop
 8003250:	370c      	adds	r7, #12
 8003252:	46bd      	mov	sp, r7
 8003254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003258:	4770      	bx	lr

0800325a <HAL_CAN_TxMailbox2CompleteCallback>:
>>>>>>> Stashed changes
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
<<<<<<< Updated upstream
 8003256:	b480      	push	{r7}
 8003258:	b083      	sub	sp, #12
 800325a:	af00      	add	r7, sp, #0
 800325c:	6078      	str	r0, [r7, #4]
=======
 800325a:	b480      	push	{r7}
 800325c:	b083      	sub	sp, #12
 800325e:	af00      	add	r7, sp, #0
 8003260:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
<<<<<<< Updated upstream
 800325e:	bf00      	nop
 8003260:	370c      	adds	r7, #12
 8003262:	46bd      	mov	sp, r7
 8003264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003268:	4770      	bx	lr

0800326a <HAL_CAN_TxMailbox0AbortCallback>:
=======
 8003262:	bf00      	nop
 8003264:	370c      	adds	r7, #12
 8003266:	46bd      	mov	sp, r7
 8003268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326c:	4770      	bx	lr

0800326e <HAL_CAN_TxMailbox0AbortCallback>:
>>>>>>> Stashed changes
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
<<<<<<< Updated upstream
 800326a:	b480      	push	{r7}
 800326c:	b083      	sub	sp, #12
 800326e:	af00      	add	r7, sp, #0
 8003270:	6078      	str	r0, [r7, #4]
=======
 800326e:	b480      	push	{r7}
 8003270:	b083      	sub	sp, #12
 8003272:	af00      	add	r7, sp, #0
 8003274:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
<<<<<<< Updated upstream
 8003272:	bf00      	nop
 8003274:	370c      	adds	r7, #12
 8003276:	46bd      	mov	sp, r7
 8003278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327c:	4770      	bx	lr

0800327e <HAL_CAN_TxMailbox1AbortCallback>:
=======
 8003276:	bf00      	nop
 8003278:	370c      	adds	r7, #12
 800327a:	46bd      	mov	sp, r7
 800327c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003280:	4770      	bx	lr

08003282 <HAL_CAN_TxMailbox1AbortCallback>:
>>>>>>> Stashed changes
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
<<<<<<< Updated upstream
 800327e:	b480      	push	{r7}
 8003280:	b083      	sub	sp, #12
 8003282:	af00      	add	r7, sp, #0
 8003284:	6078      	str	r0, [r7, #4]
=======
 8003282:	b480      	push	{r7}
 8003284:	b083      	sub	sp, #12
 8003286:	af00      	add	r7, sp, #0
 8003288:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
<<<<<<< Updated upstream
 8003286:	bf00      	nop
 8003288:	370c      	adds	r7, #12
 800328a:	46bd      	mov	sp, r7
 800328c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003290:	4770      	bx	lr

08003292 <HAL_CAN_TxMailbox2AbortCallback>:
=======
 800328a:	bf00      	nop
 800328c:	370c      	adds	r7, #12
 800328e:	46bd      	mov	sp, r7
 8003290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003294:	4770      	bx	lr

08003296 <HAL_CAN_TxMailbox2AbortCallback>:
>>>>>>> Stashed changes
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
<<<<<<< Updated upstream
 8003292:	b480      	push	{r7}
 8003294:	b083      	sub	sp, #12
 8003296:	af00      	add	r7, sp, #0
 8003298:	6078      	str	r0, [r7, #4]
=======
 8003296:	b480      	push	{r7}
 8003298:	b083      	sub	sp, #12
 800329a:	af00      	add	r7, sp, #0
 800329c:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
<<<<<<< Updated upstream
 800329a:	bf00      	nop
 800329c:	370c      	adds	r7, #12
 800329e:	46bd      	mov	sp, r7
 80032a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a4:	4770      	bx	lr

080032a6 <HAL_CAN_RxFifo0FullCallback>:
=======
 800329e:	bf00      	nop
 80032a0:	370c      	adds	r7, #12
 80032a2:	46bd      	mov	sp, r7
 80032a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a8:	4770      	bx	lr

080032aa <HAL_CAN_RxFifo0FullCallback>:
>>>>>>> Stashed changes
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
<<<<<<< Updated upstream
 80032a6:	b480      	push	{r7}
 80032a8:	b083      	sub	sp, #12
 80032aa:	af00      	add	r7, sp, #0
 80032ac:	6078      	str	r0, [r7, #4]
=======
 80032aa:	b480      	push	{r7}
 80032ac:	b083      	sub	sp, #12
 80032ae:	af00      	add	r7, sp, #0
 80032b0:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
<<<<<<< Updated upstream
 80032ae:	bf00      	nop
 80032b0:	370c      	adds	r7, #12
 80032b2:	46bd      	mov	sp, r7
 80032b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b8:	4770      	bx	lr

080032ba <HAL_CAN_RxFifo1MsgPendingCallback>:
=======
 80032b2:	bf00      	nop
 80032b4:	370c      	adds	r7, #12
 80032b6:	46bd      	mov	sp, r7
 80032b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032bc:	4770      	bx	lr

080032be <HAL_CAN_RxFifo1MsgPendingCallback>:
>>>>>>> Stashed changes
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
<<<<<<< Updated upstream
 80032ba:	b480      	push	{r7}
 80032bc:	b083      	sub	sp, #12
 80032be:	af00      	add	r7, sp, #0
 80032c0:	6078      	str	r0, [r7, #4]
=======
 80032be:	b480      	push	{r7}
 80032c0:	b083      	sub	sp, #12
 80032c2:	af00      	add	r7, sp, #0
 80032c4:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
<<<<<<< Updated upstream
 80032c2:	bf00      	nop
 80032c4:	370c      	adds	r7, #12
 80032c6:	46bd      	mov	sp, r7
 80032c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032cc:	4770      	bx	lr

080032ce <HAL_CAN_RxFifo1FullCallback>:
=======
 80032c6:	bf00      	nop
 80032c8:	370c      	adds	r7, #12
 80032ca:	46bd      	mov	sp, r7
 80032cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d0:	4770      	bx	lr

080032d2 <HAL_CAN_RxFifo1FullCallback>:
>>>>>>> Stashed changes
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
<<<<<<< Updated upstream
 80032ce:	b480      	push	{r7}
 80032d0:	b083      	sub	sp, #12
 80032d2:	af00      	add	r7, sp, #0
 80032d4:	6078      	str	r0, [r7, #4]
=======
 80032d2:	b480      	push	{r7}
 80032d4:	b083      	sub	sp, #12
 80032d6:	af00      	add	r7, sp, #0
 80032d8:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
<<<<<<< Updated upstream
 80032d6:	bf00      	nop
 80032d8:	370c      	adds	r7, #12
 80032da:	46bd      	mov	sp, r7
 80032dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e0:	4770      	bx	lr

080032e2 <HAL_CAN_SleepCallback>:
=======
 80032da:	bf00      	nop
 80032dc:	370c      	adds	r7, #12
 80032de:	46bd      	mov	sp, r7
 80032e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e4:	4770      	bx	lr

080032e6 <HAL_CAN_SleepCallback>:
>>>>>>> Stashed changes
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
<<<<<<< Updated upstream
 80032e2:	b480      	push	{r7}
 80032e4:	b083      	sub	sp, #12
 80032e6:	af00      	add	r7, sp, #0
 80032e8:	6078      	str	r0, [r7, #4]
=======
 80032e6:	b480      	push	{r7}
 80032e8:	b083      	sub	sp, #12
 80032ea:	af00      	add	r7, sp, #0
 80032ec:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
<<<<<<< Updated upstream
 80032ea:	bf00      	nop
 80032ec:	370c      	adds	r7, #12
 80032ee:	46bd      	mov	sp, r7
 80032f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f4:	4770      	bx	lr

080032f6 <HAL_CAN_WakeUpFromRxMsgCallback>:
=======
 80032ee:	bf00      	nop
 80032f0:	370c      	adds	r7, #12
 80032f2:	46bd      	mov	sp, r7
 80032f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f8:	4770      	bx	lr

080032fa <HAL_CAN_WakeUpFromRxMsgCallback>:
>>>>>>> Stashed changes
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
<<<<<<< Updated upstream
 80032f6:	b480      	push	{r7}
 80032f8:	b083      	sub	sp, #12
 80032fa:	af00      	add	r7, sp, #0
 80032fc:	6078      	str	r0, [r7, #4]
=======
 80032fa:	b480      	push	{r7}
 80032fc:	b083      	sub	sp, #12
 80032fe:	af00      	add	r7, sp, #0
 8003300:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
<<<<<<< Updated upstream
 80032fe:	bf00      	nop
 8003300:	370c      	adds	r7, #12
 8003302:	46bd      	mov	sp, r7
 8003304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003308:	4770      	bx	lr

0800330a <HAL_CAN_ErrorCallback>:
=======
 8003302:	bf00      	nop
 8003304:	370c      	adds	r7, #12
 8003306:	46bd      	mov	sp, r7
 8003308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330c:	4770      	bx	lr

0800330e <HAL_CAN_ErrorCallback>:
>>>>>>> Stashed changes
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
<<<<<<< Updated upstream
 800330a:	b480      	push	{r7}
 800330c:	b083      	sub	sp, #12
 800330e:	af00      	add	r7, sp, #0
 8003310:	6078      	str	r0, [r7, #4]
=======
 800330e:	b480      	push	{r7}
 8003310:	b083      	sub	sp, #12
 8003312:	af00      	add	r7, sp, #0
 8003314:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
<<<<<<< Updated upstream
 8003312:	bf00      	nop
 8003314:	370c      	adds	r7, #12
 8003316:	46bd      	mov	sp, r7
 8003318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331c:	4770      	bx	lr
	...

08003320 <__NVIC_SetPriorityGrouping>:
=======
 8003316:	bf00      	nop
 8003318:	370c      	adds	r7, #12
 800331a:	46bd      	mov	sp, r7
 800331c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003320:	4770      	bx	lr
	...

08003324 <__NVIC_SetPriorityGrouping>:
>>>>>>> Stashed changes
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
<<<<<<< Updated upstream
 8003320:	b480      	push	{r7}
 8003322:	b085      	sub	sp, #20
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	f003 0307 	and.w	r3, r3, #7
 800332e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003330:	4b0c      	ldr	r3, [pc, #48]	; (8003364 <__NVIC_SetPriorityGrouping+0x44>)
 8003332:	68db      	ldr	r3, [r3, #12]
 8003334:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003336:	68ba      	ldr	r2, [r7, #8]
 8003338:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800333c:	4013      	ands	r3, r2
 800333e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003348:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800334c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003350:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003352:	4a04      	ldr	r2, [pc, #16]	; (8003364 <__NVIC_SetPriorityGrouping+0x44>)
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	60d3      	str	r3, [r2, #12]
}
 8003358:	bf00      	nop
 800335a:	3714      	adds	r7, #20
 800335c:	46bd      	mov	sp, r7
 800335e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003362:	4770      	bx	lr
 8003364:	e000ed00 	.word	0xe000ed00

08003368 <__NVIC_GetPriorityGrouping>:
=======
 8003324:	b480      	push	{r7}
 8003326:	b085      	sub	sp, #20
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	f003 0307 	and.w	r3, r3, #7
 8003332:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003334:	4b0c      	ldr	r3, [pc, #48]	; (8003368 <__NVIC_SetPriorityGrouping+0x44>)
 8003336:	68db      	ldr	r3, [r3, #12]
 8003338:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800333a:	68ba      	ldr	r2, [r7, #8]
 800333c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003340:	4013      	ands	r3, r2
 8003342:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800334c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003350:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003354:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003356:	4a04      	ldr	r2, [pc, #16]	; (8003368 <__NVIC_SetPriorityGrouping+0x44>)
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	60d3      	str	r3, [r2, #12]
}
 800335c:	bf00      	nop
 800335e:	3714      	adds	r7, #20
 8003360:	46bd      	mov	sp, r7
 8003362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003366:	4770      	bx	lr
 8003368:	e000ed00 	.word	0xe000ed00

0800336c <__NVIC_GetPriorityGrouping>:
>>>>>>> Stashed changes
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
<<<<<<< Updated upstream
 8003368:	b480      	push	{r7}
 800336a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800336c:	4b04      	ldr	r3, [pc, #16]	; (8003380 <__NVIC_GetPriorityGrouping+0x18>)
 800336e:	68db      	ldr	r3, [r3, #12]
 8003370:	0a1b      	lsrs	r3, r3, #8
 8003372:	f003 0307 	and.w	r3, r3, #7
}
 8003376:	4618      	mov	r0, r3
 8003378:	46bd      	mov	sp, r7
 800337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337e:	4770      	bx	lr
 8003380:	e000ed00 	.word	0xe000ed00

08003384 <__NVIC_EnableIRQ>:
=======
 800336c:	b480      	push	{r7}
 800336e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003370:	4b04      	ldr	r3, [pc, #16]	; (8003384 <__NVIC_GetPriorityGrouping+0x18>)
 8003372:	68db      	ldr	r3, [r3, #12]
 8003374:	0a1b      	lsrs	r3, r3, #8
 8003376:	f003 0307 	and.w	r3, r3, #7
}
 800337a:	4618      	mov	r0, r3
 800337c:	46bd      	mov	sp, r7
 800337e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003382:	4770      	bx	lr
 8003384:	e000ed00 	.word	0xe000ed00

08003388 <__NVIC_EnableIRQ>:
>>>>>>> Stashed changes
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
<<<<<<< Updated upstream
 8003384:	b480      	push	{r7}
 8003386:	b083      	sub	sp, #12
 8003388:	af00      	add	r7, sp, #0
 800338a:	4603      	mov	r3, r0
 800338c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800338e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003392:	2b00      	cmp	r3, #0
 8003394:	db0b      	blt.n	80033ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003396:	79fb      	ldrb	r3, [r7, #7]
 8003398:	f003 021f 	and.w	r2, r3, #31
 800339c:	4907      	ldr	r1, [pc, #28]	; (80033bc <__NVIC_EnableIRQ+0x38>)
 800339e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033a2:	095b      	lsrs	r3, r3, #5
 80033a4:	2001      	movs	r0, #1
 80033a6:	fa00 f202 	lsl.w	r2, r0, r2
 80033aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80033ae:	bf00      	nop
 80033b0:	370c      	adds	r7, #12
 80033b2:	46bd      	mov	sp, r7
 80033b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b8:	4770      	bx	lr
 80033ba:	bf00      	nop
 80033bc:	e000e100 	.word	0xe000e100

080033c0 <__NVIC_SetPriority>:
=======
 8003388:	b480      	push	{r7}
 800338a:	b083      	sub	sp, #12
 800338c:	af00      	add	r7, sp, #0
 800338e:	4603      	mov	r3, r0
 8003390:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003392:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003396:	2b00      	cmp	r3, #0
 8003398:	db0b      	blt.n	80033b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800339a:	79fb      	ldrb	r3, [r7, #7]
 800339c:	f003 021f 	and.w	r2, r3, #31
 80033a0:	4907      	ldr	r1, [pc, #28]	; (80033c0 <__NVIC_EnableIRQ+0x38>)
 80033a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033a6:	095b      	lsrs	r3, r3, #5
 80033a8:	2001      	movs	r0, #1
 80033aa:	fa00 f202 	lsl.w	r2, r0, r2
 80033ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80033b2:	bf00      	nop
 80033b4:	370c      	adds	r7, #12
 80033b6:	46bd      	mov	sp, r7
 80033b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033bc:	4770      	bx	lr
 80033be:	bf00      	nop
 80033c0:	e000e100 	.word	0xe000e100

080033c4 <__NVIC_SetPriority>:
>>>>>>> Stashed changes
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
<<<<<<< Updated upstream
 80033c0:	b480      	push	{r7}
 80033c2:	b083      	sub	sp, #12
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	4603      	mov	r3, r0
 80033c8:	6039      	str	r1, [r7, #0]
 80033ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	db0a      	blt.n	80033ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	b2da      	uxtb	r2, r3
 80033d8:	490c      	ldr	r1, [pc, #48]	; (800340c <__NVIC_SetPriority+0x4c>)
 80033da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033de:	0112      	lsls	r2, r2, #4
 80033e0:	b2d2      	uxtb	r2, r2
 80033e2:	440b      	add	r3, r1
 80033e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
=======
 80033c4:	b480      	push	{r7}
 80033c6:	b083      	sub	sp, #12
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	4603      	mov	r3, r0
 80033cc:	6039      	str	r1, [r7, #0]
 80033ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	db0a      	blt.n	80033ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	b2da      	uxtb	r2, r3
 80033dc:	490c      	ldr	r1, [pc, #48]	; (8003410 <__NVIC_SetPriority+0x4c>)
 80033de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033e2:	0112      	lsls	r2, r2, #4
 80033e4:	b2d2      	uxtb	r2, r2
 80033e6:	440b      	add	r3, r1
 80033e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
>>>>>>> Stashed changes
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
<<<<<<< Updated upstream
 80033e8:	e00a      	b.n	8003400 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	b2da      	uxtb	r2, r3
 80033ee:	4908      	ldr	r1, [pc, #32]	; (8003410 <__NVIC_SetPriority+0x50>)
 80033f0:	79fb      	ldrb	r3, [r7, #7]
 80033f2:	f003 030f 	and.w	r3, r3, #15
 80033f6:	3b04      	subs	r3, #4
 80033f8:	0112      	lsls	r2, r2, #4
 80033fa:	b2d2      	uxtb	r2, r2
 80033fc:	440b      	add	r3, r1
 80033fe:	761a      	strb	r2, [r3, #24]
}
 8003400:	bf00      	nop
 8003402:	370c      	adds	r7, #12
 8003404:	46bd      	mov	sp, r7
 8003406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340a:	4770      	bx	lr
 800340c:	e000e100 	.word	0xe000e100
 8003410:	e000ed00 	.word	0xe000ed00

08003414 <NVIC_EncodePriority>:
=======
 80033ec:	e00a      	b.n	8003404 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	b2da      	uxtb	r2, r3
 80033f2:	4908      	ldr	r1, [pc, #32]	; (8003414 <__NVIC_SetPriority+0x50>)
 80033f4:	79fb      	ldrb	r3, [r7, #7]
 80033f6:	f003 030f 	and.w	r3, r3, #15
 80033fa:	3b04      	subs	r3, #4
 80033fc:	0112      	lsls	r2, r2, #4
 80033fe:	b2d2      	uxtb	r2, r2
 8003400:	440b      	add	r3, r1
 8003402:	761a      	strb	r2, [r3, #24]
}
 8003404:	bf00      	nop
 8003406:	370c      	adds	r7, #12
 8003408:	46bd      	mov	sp, r7
 800340a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340e:	4770      	bx	lr
 8003410:	e000e100 	.word	0xe000e100
 8003414:	e000ed00 	.word	0xe000ed00

08003418 <NVIC_EncodePriority>:
>>>>>>> Stashed changes
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
<<<<<<< Updated upstream
 8003414:	b480      	push	{r7}
 8003416:	b089      	sub	sp, #36	; 0x24
 8003418:	af00      	add	r7, sp, #0
 800341a:	60f8      	str	r0, [r7, #12]
 800341c:	60b9      	str	r1, [r7, #8]
 800341e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	f003 0307 	and.w	r3, r3, #7
 8003426:	61fb      	str	r3, [r7, #28]
=======
 8003418:	b480      	push	{r7}
 800341a:	b089      	sub	sp, #36	; 0x24
 800341c:	af00      	add	r7, sp, #0
 800341e:	60f8      	str	r0, [r7, #12]
 8003420:	60b9      	str	r1, [r7, #8]
 8003422:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	f003 0307 	and.w	r3, r3, #7
 800342a:	61fb      	str	r3, [r7, #28]
>>>>>>> Stashed changes
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
<<<<<<< Updated upstream
 8003428:	69fb      	ldr	r3, [r7, #28]
 800342a:	f1c3 0307 	rsb	r3, r3, #7
 800342e:	2b04      	cmp	r3, #4
 8003430:	bf28      	it	cs
 8003432:	2304      	movcs	r3, #4
 8003434:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003436:	69fb      	ldr	r3, [r7, #28]
 8003438:	3304      	adds	r3, #4
 800343a:	2b06      	cmp	r3, #6
 800343c:	d902      	bls.n	8003444 <NVIC_EncodePriority+0x30>
 800343e:	69fb      	ldr	r3, [r7, #28]
 8003440:	3b03      	subs	r3, #3
 8003442:	e000      	b.n	8003446 <NVIC_EncodePriority+0x32>
 8003444:	2300      	movs	r3, #0
 8003446:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003448:	f04f 32ff 	mov.w	r2, #4294967295
 800344c:	69bb      	ldr	r3, [r7, #24]
 800344e:	fa02 f303 	lsl.w	r3, r2, r3
 8003452:	43da      	mvns	r2, r3
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	401a      	ands	r2, r3
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800345c:	f04f 31ff 	mov.w	r1, #4294967295
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	fa01 f303 	lsl.w	r3, r1, r3
 8003466:	43d9      	mvns	r1, r3
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800346c:	4313      	orrs	r3, r2
         );
}
 800346e:	4618      	mov	r0, r3
 8003470:	3724      	adds	r7, #36	; 0x24
 8003472:	46bd      	mov	sp, r7
 8003474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003478:	4770      	bx	lr
	...

0800347c <SysTick_Config>:
=======
 800342c:	69fb      	ldr	r3, [r7, #28]
 800342e:	f1c3 0307 	rsb	r3, r3, #7
 8003432:	2b04      	cmp	r3, #4
 8003434:	bf28      	it	cs
 8003436:	2304      	movcs	r3, #4
 8003438:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800343a:	69fb      	ldr	r3, [r7, #28]
 800343c:	3304      	adds	r3, #4
 800343e:	2b06      	cmp	r3, #6
 8003440:	d902      	bls.n	8003448 <NVIC_EncodePriority+0x30>
 8003442:	69fb      	ldr	r3, [r7, #28]
 8003444:	3b03      	subs	r3, #3
 8003446:	e000      	b.n	800344a <NVIC_EncodePriority+0x32>
 8003448:	2300      	movs	r3, #0
 800344a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800344c:	f04f 32ff 	mov.w	r2, #4294967295
 8003450:	69bb      	ldr	r3, [r7, #24]
 8003452:	fa02 f303 	lsl.w	r3, r2, r3
 8003456:	43da      	mvns	r2, r3
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	401a      	ands	r2, r3
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003460:	f04f 31ff 	mov.w	r1, #4294967295
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	fa01 f303 	lsl.w	r3, r1, r3
 800346a:	43d9      	mvns	r1, r3
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003470:	4313      	orrs	r3, r2
         );
}
 8003472:	4618      	mov	r0, r3
 8003474:	3724      	adds	r7, #36	; 0x24
 8003476:	46bd      	mov	sp, r7
 8003478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347c:	4770      	bx	lr
	...

08003480 <SysTick_Config>:
>>>>>>> Stashed changes
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
<<<<<<< Updated upstream
 800347c:	b580      	push	{r7, lr}
 800347e:	b082      	sub	sp, #8
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	3b01      	subs	r3, #1
 8003488:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800348c:	d301      	bcc.n	8003492 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800348e:	2301      	movs	r3, #1
 8003490:	e00f      	b.n	80034b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003492:	4a0a      	ldr	r2, [pc, #40]	; (80034bc <SysTick_Config+0x40>)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	3b01      	subs	r3, #1
 8003498:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800349a:	210f      	movs	r1, #15
 800349c:	f04f 30ff 	mov.w	r0, #4294967295
 80034a0:	f7ff ff8e 	bl	80033c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80034a4:	4b05      	ldr	r3, [pc, #20]	; (80034bc <SysTick_Config+0x40>)
 80034a6:	2200      	movs	r2, #0
 80034a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80034aa:	4b04      	ldr	r3, [pc, #16]	; (80034bc <SysTick_Config+0x40>)
 80034ac:	2207      	movs	r2, #7
 80034ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80034b0:	2300      	movs	r3, #0
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	3708      	adds	r7, #8
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}
 80034ba:	bf00      	nop
 80034bc:	e000e010 	.word	0xe000e010

080034c0 <HAL_NVIC_SetPriorityGrouping>:
=======
 8003480:	b580      	push	{r7, lr}
 8003482:	b082      	sub	sp, #8
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	3b01      	subs	r3, #1
 800348c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003490:	d301      	bcc.n	8003496 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003492:	2301      	movs	r3, #1
 8003494:	e00f      	b.n	80034b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003496:	4a0a      	ldr	r2, [pc, #40]	; (80034c0 <SysTick_Config+0x40>)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	3b01      	subs	r3, #1
 800349c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800349e:	210f      	movs	r1, #15
 80034a0:	f04f 30ff 	mov.w	r0, #4294967295
 80034a4:	f7ff ff8e 	bl	80033c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80034a8:	4b05      	ldr	r3, [pc, #20]	; (80034c0 <SysTick_Config+0x40>)
 80034aa:	2200      	movs	r2, #0
 80034ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80034ae:	4b04      	ldr	r3, [pc, #16]	; (80034c0 <SysTick_Config+0x40>)
 80034b0:	2207      	movs	r2, #7
 80034b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80034b4:	2300      	movs	r3, #0
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3708      	adds	r7, #8
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}
 80034be:	bf00      	nop
 80034c0:	e000e010 	.word	0xe000e010

080034c4 <HAL_NVIC_SetPriorityGrouping>:
>>>>>>> Stashed changes
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
<<<<<<< Updated upstream
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b082      	sub	sp, #8
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
=======
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b082      	sub	sp, #8
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
<<<<<<< Updated upstream
 80034c8:	6878      	ldr	r0, [r7, #4]
 80034ca:	f7ff ff29 	bl	8003320 <__NVIC_SetPriorityGrouping>
}
 80034ce:	bf00      	nop
 80034d0:	3708      	adds	r7, #8
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}

080034d6 <HAL_NVIC_SetPriority>:
=======
 80034cc:	6878      	ldr	r0, [r7, #4]
 80034ce:	f7ff ff29 	bl	8003324 <__NVIC_SetPriorityGrouping>
}
 80034d2:	bf00      	nop
 80034d4:	3708      	adds	r7, #8
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}

080034da <HAL_NVIC_SetPriority>:
>>>>>>> Stashed changes
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
<<<<<<< Updated upstream
 80034d6:	b580      	push	{r7, lr}
 80034d8:	b086      	sub	sp, #24
 80034da:	af00      	add	r7, sp, #0
 80034dc:	4603      	mov	r3, r0
 80034de:	60b9      	str	r1, [r7, #8]
 80034e0:	607a      	str	r2, [r7, #4]
 80034e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80034e4:	2300      	movs	r3, #0
 80034e6:	617b      	str	r3, [r7, #20]
=======
 80034da:	b580      	push	{r7, lr}
 80034dc:	b086      	sub	sp, #24
 80034de:	af00      	add	r7, sp, #0
 80034e0:	4603      	mov	r3, r0
 80034e2:	60b9      	str	r1, [r7, #8]
 80034e4:	607a      	str	r2, [r7, #4]
 80034e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80034e8:	2300      	movs	r3, #0
 80034ea:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
<<<<<<< Updated upstream
 80034e8:	f7ff ff3e 	bl	8003368 <__NVIC_GetPriorityGrouping>
 80034ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034ee:	687a      	ldr	r2, [r7, #4]
 80034f0:	68b9      	ldr	r1, [r7, #8]
 80034f2:	6978      	ldr	r0, [r7, #20]
 80034f4:	f7ff ff8e 	bl	8003414 <NVIC_EncodePriority>
 80034f8:	4602      	mov	r2, r0
 80034fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034fe:	4611      	mov	r1, r2
 8003500:	4618      	mov	r0, r3
 8003502:	f7ff ff5d 	bl	80033c0 <__NVIC_SetPriority>
}
 8003506:	bf00      	nop
 8003508:	3718      	adds	r7, #24
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}

0800350e <HAL_NVIC_EnableIRQ>:
=======
 80034ec:	f7ff ff3e 	bl	800336c <__NVIC_GetPriorityGrouping>
 80034f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034f2:	687a      	ldr	r2, [r7, #4]
 80034f4:	68b9      	ldr	r1, [r7, #8]
 80034f6:	6978      	ldr	r0, [r7, #20]
 80034f8:	f7ff ff8e 	bl	8003418 <NVIC_EncodePriority>
 80034fc:	4602      	mov	r2, r0
 80034fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003502:	4611      	mov	r1, r2
 8003504:	4618      	mov	r0, r3
 8003506:	f7ff ff5d 	bl	80033c4 <__NVIC_SetPriority>
}
 800350a:	bf00      	nop
 800350c:	3718      	adds	r7, #24
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}

08003512 <HAL_NVIC_EnableIRQ>:
>>>>>>> Stashed changes
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
<<<<<<< Updated upstream
 800350e:	b580      	push	{r7, lr}
 8003510:	b082      	sub	sp, #8
 8003512:	af00      	add	r7, sp, #0
 8003514:	4603      	mov	r3, r0
 8003516:	71fb      	strb	r3, [r7, #7]
=======
 8003512:	b580      	push	{r7, lr}
 8003514:	b082      	sub	sp, #8
 8003516:	af00      	add	r7, sp, #0
 8003518:	4603      	mov	r3, r0
 800351a:	71fb      	strb	r3, [r7, #7]
>>>>>>> Stashed changes
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
<<<<<<< Updated upstream
 8003518:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800351c:	4618      	mov	r0, r3
 800351e:	f7ff ff31 	bl	8003384 <__NVIC_EnableIRQ>
}
 8003522:	bf00      	nop
 8003524:	3708      	adds	r7, #8
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}

0800352a <HAL_SYSTICK_Config>:
=======
 800351c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003520:	4618      	mov	r0, r3
 8003522:	f7ff ff31 	bl	8003388 <__NVIC_EnableIRQ>
}
 8003526:	bf00      	nop
 8003528:	3708      	adds	r7, #8
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}

0800352e <HAL_SYSTICK_Config>:
>>>>>>> Stashed changes
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
<<<<<<< Updated upstream
 800352a:	b580      	push	{r7, lr}
 800352c:	b082      	sub	sp, #8
 800352e:	af00      	add	r7, sp, #0
 8003530:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	f7ff ffa2 	bl	800347c <SysTick_Config>
 8003538:	4603      	mov	r3, r0
}
 800353a:	4618      	mov	r0, r3
 800353c:	3708      	adds	r7, #8
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}

08003542 <HAL_DAC_Init>:
=======
 800352e:	b580      	push	{r7, lr}
 8003530:	b082      	sub	sp, #8
 8003532:	af00      	add	r7, sp, #0
 8003534:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f7ff ffa2 	bl	8003480 <SysTick_Config>
 800353c:	4603      	mov	r3, r0
}
 800353e:	4618      	mov	r0, r3
 8003540:	3708      	adds	r7, #8
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}

08003546 <HAL_DAC_Init>:
>>>>>>> Stashed changes
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
<<<<<<< Updated upstream
 8003542:	b580      	push	{r7, lr}
 8003544:	b082      	sub	sp, #8
 8003546:	af00      	add	r7, sp, #0
 8003548:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d101      	bne.n	8003554 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003550:	2301      	movs	r3, #1
 8003552:	e014      	b.n	800357e <HAL_DAC_Init+0x3c>
=======
 8003546:	b580      	push	{r7, lr}
 8003548:	b082      	sub	sp, #8
 800354a:	af00      	add	r7, sp, #0
 800354c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d101      	bne.n	8003558 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	e014      	b.n	8003582 <HAL_DAC_Init+0x3c>
>>>>>>> Stashed changes
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
<<<<<<< Updated upstream
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	791b      	ldrb	r3, [r3, #4]
 8003558:	b2db      	uxtb	r3, r3
 800355a:	2b00      	cmp	r3, #0
 800355c:	d105      	bne.n	800356a <HAL_DAC_Init+0x28>
=======
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	791b      	ldrb	r3, [r3, #4]
 800355c:	b2db      	uxtb	r3, r3
 800355e:	2b00      	cmp	r3, #0
 8003560:	d105      	bne.n	800356e <HAL_DAC_Init+0x28>
>>>>>>> Stashed changes
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
<<<<<<< Updated upstream
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2200      	movs	r2, #0
 8003562:	715a      	strb	r2, [r3, #5]
=======
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2200      	movs	r2, #0
 8003566:	715a      	strb	r2, [r3, #5]
>>>>>>> Stashed changes
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
<<<<<<< Updated upstream
 8003564:	6878      	ldr	r0, [r7, #4]
 8003566:	f7fd f9cf 	bl	8000908 <HAL_DAC_MspInit>
=======
 8003568:	6878      	ldr	r0, [r7, #4]
 800356a:	f7fd f9cd 	bl	8000908 <HAL_DAC_MspInit>
>>>>>>> Stashed changes
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
<<<<<<< Updated upstream
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2202      	movs	r2, #2
 800356e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2200      	movs	r2, #0
 8003574:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2201      	movs	r2, #1
 800357a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800357c:	2300      	movs	r3, #0
}
 800357e:	4618      	mov	r0, r3
 8003580:	3708      	adds	r7, #8
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}

08003586 <HAL_DAC_ConfigChannel>:
=======
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2202      	movs	r2, #2
 8003572:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2200      	movs	r2, #0
 8003578:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2201      	movs	r2, #1
 800357e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003580:	2300      	movs	r3, #0
}
 8003582:	4618      	mov	r0, r3
 8003584:	3708      	adds	r7, #8
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}

0800358a <HAL_DAC_ConfigChannel>:
>>>>>>> Stashed changes
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
<<<<<<< Updated upstream
 8003586:	b480      	push	{r7}
 8003588:	b087      	sub	sp, #28
 800358a:	af00      	add	r7, sp, #0
 800358c:	60f8      	str	r0, [r7, #12]
 800358e:	60b9      	str	r1, [r7, #8]
 8003590:	607a      	str	r2, [r7, #4]
=======
 800358a:	b480      	push	{r7}
 800358c:	b087      	sub	sp, #28
 800358e:	af00      	add	r7, sp, #0
 8003590:	60f8      	str	r0, [r7, #12]
 8003592:	60b9      	str	r1, [r7, #8]
 8003594:	607a      	str	r2, [r7, #4]
>>>>>>> Stashed changes
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
<<<<<<< Updated upstream
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	795b      	ldrb	r3, [r3, #5]
 8003596:	2b01      	cmp	r3, #1
 8003598:	d101      	bne.n	800359e <HAL_DAC_ConfigChannel+0x18>
 800359a:	2302      	movs	r3, #2
 800359c:	e03c      	b.n	8003618 <HAL_DAC_ConfigChannel+0x92>
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	2201      	movs	r2, #1
 80035a2:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2202      	movs	r2, #2
 80035a8:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	f003 0310 	and.w	r3, r3, #16
 80035b8:	f640 72fe 	movw	r2, #4094	; 0xffe
 80035bc:	fa02 f303 	lsl.w	r3, r2, r3
 80035c0:	43db      	mvns	r3, r3
 80035c2:	697a      	ldr	r2, [r7, #20]
 80035c4:	4013      	ands	r3, r2
 80035c6:	617b      	str	r3, [r7, #20]
=======
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	795b      	ldrb	r3, [r3, #5]
 800359a:	2b01      	cmp	r3, #1
 800359c:	d101      	bne.n	80035a2 <HAL_DAC_ConfigChannel+0x18>
 800359e:	2302      	movs	r3, #2
 80035a0:	e03c      	b.n	800361c <HAL_DAC_ConfigChannel+0x92>
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	2201      	movs	r2, #1
 80035a6:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	2202      	movs	r2, #2
 80035ac:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	f003 0310 	and.w	r3, r3, #16
 80035bc:	f640 72fe 	movw	r2, #4094	; 0xffe
 80035c0:	fa02 f303 	lsl.w	r3, r2, r3
 80035c4:	43db      	mvns	r3, r3
 80035c6:	697a      	ldr	r2, [r7, #20]
 80035c8:	4013      	ands	r3, r2
 80035ca:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
<<<<<<< Updated upstream
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	681a      	ldr	r2, [r3, #0]
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	4313      	orrs	r3, r2
 80035d2:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	f003 0310 	and.w	r3, r3, #16
 80035da:	693a      	ldr	r2, [r7, #16]
 80035dc:	fa02 f303 	lsl.w	r3, r2, r3
 80035e0:	697a      	ldr	r2, [r7, #20]
 80035e2:	4313      	orrs	r3, r2
 80035e4:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	697a      	ldr	r2, [r7, #20]
 80035ec:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	6819      	ldr	r1, [r3, #0]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	f003 0310 	and.w	r3, r3, #16
 80035fa:	22c0      	movs	r2, #192	; 0xc0
 80035fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003600:	43da      	mvns	r2, r3
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	400a      	ands	r2, r1
 8003608:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	2201      	movs	r2, #1
 800360e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2200      	movs	r2, #0
 8003614:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003616:	2300      	movs	r3, #0
}
 8003618:	4618      	mov	r0, r3
 800361a:	371c      	adds	r7, #28
 800361c:	46bd      	mov	sp, r7
 800361e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003622:	4770      	bx	lr

08003624 <HAL_DMA_Init>:
=======
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	681a      	ldr	r2, [r3, #0]
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	4313      	orrs	r3, r2
 80035d6:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	f003 0310 	and.w	r3, r3, #16
 80035de:	693a      	ldr	r2, [r7, #16]
 80035e0:	fa02 f303 	lsl.w	r3, r2, r3
 80035e4:	697a      	ldr	r2, [r7, #20]
 80035e6:	4313      	orrs	r3, r2
 80035e8:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	697a      	ldr	r2, [r7, #20]
 80035f0:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	6819      	ldr	r1, [r3, #0]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	f003 0310 	and.w	r3, r3, #16
 80035fe:	22c0      	movs	r2, #192	; 0xc0
 8003600:	fa02 f303 	lsl.w	r3, r2, r3
 8003604:	43da      	mvns	r2, r3
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	400a      	ands	r2, r1
 800360c:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2201      	movs	r2, #1
 8003612:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	2200      	movs	r2, #0
 8003618:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800361a:	2300      	movs	r3, #0
}
 800361c:	4618      	mov	r0, r3
 800361e:	371c      	adds	r7, #28
 8003620:	46bd      	mov	sp, r7
 8003622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003626:	4770      	bx	lr

08003628 <HAL_DMA_Init>:
>>>>>>> Stashed changes
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
<<<<<<< Updated upstream
 8003624:	b580      	push	{r7, lr}
 8003626:	b086      	sub	sp, #24
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800362c:	2300      	movs	r3, #0
 800362e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003630:	f7fe fd3c 	bl	80020ac <HAL_GetTick>
 8003634:	6138      	str	r0, [r7, #16]
=======
 8003628:	b580      	push	{r7, lr}
 800362a:	b086      	sub	sp, #24
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003630:	2300      	movs	r3, #0
 8003632:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003634:	f7fe fd3c 	bl	80020b0 <HAL_GetTick>
 8003638:	6138      	str	r0, [r7, #16]
>>>>>>> Stashed changes
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
<<<<<<< Updated upstream
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d101      	bne.n	8003640 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	e099      	b.n	8003774 <HAL_DMA_Init+0x150>
=======
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d101      	bne.n	8003644 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	e099      	b.n	8003778 <HAL_DMA_Init+0x150>
>>>>>>> Stashed changes
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
<<<<<<< Updated upstream
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2202      	movs	r2, #2
 8003644:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2200      	movs	r2, #0
 800364c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	681a      	ldr	r2, [r3, #0]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f022 0201 	bic.w	r2, r2, #1
 800365e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003660:	e00f      	b.n	8003682 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003662:	f7fe fd23 	bl	80020ac <HAL_GetTick>
 8003666:	4602      	mov	r2, r0
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	1ad3      	subs	r3, r2, r3
 800366c:	2b05      	cmp	r3, #5
 800366e:	d908      	bls.n	8003682 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2220      	movs	r2, #32
 8003674:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2203      	movs	r2, #3
 800367a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800367e:	2303      	movs	r3, #3
 8003680:	e078      	b.n	8003774 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f003 0301 	and.w	r3, r3, #1
 800368c:	2b00      	cmp	r3, #0
 800368e:	d1e8      	bne.n	8003662 <HAL_DMA_Init+0x3e>
=======
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2202      	movs	r2, #2
 8003648:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2200      	movs	r2, #0
 8003650:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f022 0201 	bic.w	r2, r2, #1
 8003662:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003664:	e00f      	b.n	8003686 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003666:	f7fe fd23 	bl	80020b0 <HAL_GetTick>
 800366a:	4602      	mov	r2, r0
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	1ad3      	subs	r3, r2, r3
 8003670:	2b05      	cmp	r3, #5
 8003672:	d908      	bls.n	8003686 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2220      	movs	r2, #32
 8003678:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2203      	movs	r2, #3
 800367e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003682:	2303      	movs	r3, #3
 8003684:	e078      	b.n	8003778 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f003 0301 	and.w	r3, r3, #1
 8003690:	2b00      	cmp	r3, #0
 8003692:	d1e8      	bne.n	8003666 <HAL_DMA_Init+0x3e>
>>>>>>> Stashed changes
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
<<<<<<< Updated upstream
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003698:	697a      	ldr	r2, [r7, #20]
 800369a:	4b38      	ldr	r3, [pc, #224]	; (800377c <HAL_DMA_Init+0x158>)
 800369c:	4013      	ands	r3, r2
 800369e:	617b      	str	r3, [r7, #20]
=======
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800369c:	697a      	ldr	r2, [r7, #20]
 800369e:	4b38      	ldr	r3, [pc, #224]	; (8003780 <HAL_DMA_Init+0x158>)
 80036a0:	4013      	ands	r3, r2
 80036a2:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
<<<<<<< Updated upstream
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	685a      	ldr	r2, [r3, #4]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80036ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	691b      	ldr	r3, [r3, #16]
 80036b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	699b      	ldr	r3, [r3, #24]
 80036c0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036c6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6a1b      	ldr	r3, [r3, #32]
 80036cc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80036ce:	697a      	ldr	r2, [r7, #20]
 80036d0:	4313      	orrs	r3, r2
 80036d2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d8:	2b04      	cmp	r3, #4
 80036da:	d107      	bne.n	80036ec <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036e4:	4313      	orrs	r3, r2
 80036e6:	697a      	ldr	r2, [r7, #20]
 80036e8:	4313      	orrs	r3, r2
 80036ea:	617b      	str	r3, [r7, #20]
=======
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	685a      	ldr	r2, [r3, #4]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80036b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	691b      	ldr	r3, [r3, #16]
 80036b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036be:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	699b      	ldr	r3, [r3, #24]
 80036c4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036ca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6a1b      	ldr	r3, [r3, #32]
 80036d0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80036d2:	697a      	ldr	r2, [r7, #20]
 80036d4:	4313      	orrs	r3, r2
 80036d6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036dc:	2b04      	cmp	r3, #4
 80036de:	d107      	bne.n	80036f0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036e8:	4313      	orrs	r3, r2
 80036ea:	697a      	ldr	r2, [r7, #20]
 80036ec:	4313      	orrs	r3, r2
 80036ee:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
<<<<<<< Updated upstream
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	697a      	ldr	r2, [r7, #20]
 80036f2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	695b      	ldr	r3, [r3, #20]
 80036fa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	f023 0307 	bic.w	r3, r3, #7
 8003702:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003708:	697a      	ldr	r2, [r7, #20]
 800370a:	4313      	orrs	r3, r2
 800370c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003712:	2b04      	cmp	r3, #4
 8003714:	d117      	bne.n	8003746 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800371a:	697a      	ldr	r2, [r7, #20]
 800371c:	4313      	orrs	r3, r2
 800371e:	617b      	str	r3, [r7, #20]
=======
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	697a      	ldr	r2, [r7, #20]
 80036f6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	695b      	ldr	r3, [r3, #20]
 80036fe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003700:	697b      	ldr	r3, [r7, #20]
 8003702:	f023 0307 	bic.w	r3, r3, #7
 8003706:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800370c:	697a      	ldr	r2, [r7, #20]
 800370e:	4313      	orrs	r3, r2
 8003710:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003716:	2b04      	cmp	r3, #4
 8003718:	d117      	bne.n	800374a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800371e:	697a      	ldr	r2, [r7, #20]
 8003720:	4313      	orrs	r3, r2
 8003722:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
<<<<<<< Updated upstream
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003724:	2b00      	cmp	r3, #0
 8003726:	d00e      	beq.n	8003746 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003728:	6878      	ldr	r0, [r7, #4]
 800372a:	f000 fb0d 	bl	8003d48 <DMA_CheckFifoParam>
 800372e:	4603      	mov	r3, r0
 8003730:	2b00      	cmp	r3, #0
 8003732:	d008      	beq.n	8003746 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2240      	movs	r2, #64	; 0x40
 8003738:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2201      	movs	r2, #1
 800373e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003742:	2301      	movs	r3, #1
 8003744:	e016      	b.n	8003774 <HAL_DMA_Init+0x150>
=======
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003728:	2b00      	cmp	r3, #0
 800372a:	d00e      	beq.n	800374a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800372c:	6878      	ldr	r0, [r7, #4]
 800372e:	f000 fb0d 	bl	8003d4c <DMA_CheckFifoParam>
 8003732:	4603      	mov	r3, r0
 8003734:	2b00      	cmp	r3, #0
 8003736:	d008      	beq.n	800374a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2240      	movs	r2, #64	; 0x40
 800373c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2201      	movs	r2, #1
 8003742:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003746:	2301      	movs	r3, #1
 8003748:	e016      	b.n	8003778 <HAL_DMA_Init+0x150>
>>>>>>> Stashed changes
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
<<<<<<< Updated upstream
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	697a      	ldr	r2, [r7, #20]
 800374c:	615a      	str	r2, [r3, #20]
=======
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	697a      	ldr	r2, [r7, #20]
 8003750:	615a      	str	r2, [r3, #20]
>>>>>>> Stashed changes

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
<<<<<<< Updated upstream
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f000 fac4 	bl	8003cdc <DMA_CalcBaseAndBitshift>
 8003754:	4603      	mov	r3, r0
 8003756:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800375c:	223f      	movs	r2, #63	; 0x3f
 800375e:	409a      	lsls	r2, r3
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2200      	movs	r2, #0
 8003768:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2201      	movs	r2, #1
 800376e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003772:	2300      	movs	r3, #0
}
 8003774:	4618      	mov	r0, r3
 8003776:	3718      	adds	r7, #24
 8003778:	46bd      	mov	sp, r7
 800377a:	bd80      	pop	{r7, pc}
 800377c:	f010803f 	.word	0xf010803f

08003780 <HAL_DMA_Start_IT>:
=======
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	f000 fac4 	bl	8003ce0 <DMA_CalcBaseAndBitshift>
 8003758:	4603      	mov	r3, r0
 800375a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003760:	223f      	movs	r2, #63	; 0x3f
 8003762:	409a      	lsls	r2, r3
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2200      	movs	r2, #0
 800376c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2201      	movs	r2, #1
 8003772:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003776:	2300      	movs	r3, #0
}
 8003778:	4618      	mov	r0, r3
 800377a:	3718      	adds	r7, #24
 800377c:	46bd      	mov	sp, r7
 800377e:	bd80      	pop	{r7, pc}
 8003780:	f010803f 	.word	0xf010803f

08003784 <HAL_DMA_Start_IT>:
>>>>>>> Stashed changes
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
<<<<<<< Updated upstream
 8003780:	b580      	push	{r7, lr}
 8003782:	b086      	sub	sp, #24
 8003784:	af00      	add	r7, sp, #0
 8003786:	60f8      	str	r0, [r7, #12]
 8003788:	60b9      	str	r1, [r7, #8]
 800378a:	607a      	str	r2, [r7, #4]
 800378c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800378e:	2300      	movs	r3, #0
 8003790:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003796:	613b      	str	r3, [r7, #16]
=======
 8003784:	b580      	push	{r7, lr}
 8003786:	b086      	sub	sp, #24
 8003788:	af00      	add	r7, sp, #0
 800378a:	60f8      	str	r0, [r7, #12]
 800378c:	60b9      	str	r1, [r7, #8]
 800378e:	607a      	str	r2, [r7, #4]
 8003790:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003792:	2300      	movs	r3, #0
 8003794:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800379a:	613b      	str	r3, [r7, #16]
>>>>>>> Stashed changes
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
<<<<<<< Updated upstream
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800379e:	2b01      	cmp	r3, #1
 80037a0:	d101      	bne.n	80037a6 <HAL_DMA_Start_IT+0x26>
 80037a2:	2302      	movs	r3, #2
 80037a4:	e040      	b.n	8003828 <HAL_DMA_Start_IT+0xa8>
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	2201      	movs	r2, #1
 80037aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80037b4:	b2db      	uxtb	r3, r3
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	d12f      	bne.n	800381a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2202      	movs	r2, #2
 80037be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2200      	movs	r2, #0
 80037c6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	687a      	ldr	r2, [r7, #4]
 80037cc:	68b9      	ldr	r1, [r7, #8]
 80037ce:	68f8      	ldr	r0, [r7, #12]
 80037d0:	f000 fa56 	bl	8003c80 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037d8:	223f      	movs	r2, #63	; 0x3f
 80037da:	409a      	lsls	r2, r3
 80037dc:	693b      	ldr	r3, [r7, #16]
 80037de:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	681a      	ldr	r2, [r3, #0]
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f042 0216 	orr.w	r2, r2, #22
 80037ee:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d007      	beq.n	8003808 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	681a      	ldr	r2, [r3, #0]
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f042 0208 	orr.w	r2, r2, #8
 8003806:	601a      	str	r2, [r3, #0]
=======
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80037a2:	2b01      	cmp	r3, #1
 80037a4:	d101      	bne.n	80037aa <HAL_DMA_Start_IT+0x26>
 80037a6:	2302      	movs	r3, #2
 80037a8:	e040      	b.n	800382c <HAL_DMA_Start_IT+0xa8>
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	2201      	movs	r2, #1
 80037ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80037b8:	b2db      	uxtb	r3, r3
 80037ba:	2b01      	cmp	r3, #1
 80037bc:	d12f      	bne.n	800381e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2202      	movs	r2, #2
 80037c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	2200      	movs	r2, #0
 80037ca:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	687a      	ldr	r2, [r7, #4]
 80037d0:	68b9      	ldr	r1, [r7, #8]
 80037d2:	68f8      	ldr	r0, [r7, #12]
 80037d4:	f000 fa56 	bl	8003c84 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037dc:	223f      	movs	r2, #63	; 0x3f
 80037de:	409a      	lsls	r2, r3
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	681a      	ldr	r2, [r3, #0]
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f042 0216 	orr.w	r2, r2, #22
 80037f2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d007      	beq.n	800380c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f042 0208 	orr.w	r2, r2, #8
 800380a:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
<<<<<<< Updated upstream
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	681a      	ldr	r2, [r3, #0]
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f042 0201 	orr.w	r2, r2, #1
 8003816:	601a      	str	r2, [r3, #0]
 8003818:	e005      	b.n	8003826 <HAL_DMA_Start_IT+0xa6>
=======
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	681a      	ldr	r2, [r3, #0]
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f042 0201 	orr.w	r2, r2, #1
 800381a:	601a      	str	r2, [r3, #0]
 800381c:	e005      	b.n	800382a <HAL_DMA_Start_IT+0xa6>
>>>>>>> Stashed changes
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
<<<<<<< Updated upstream
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2200      	movs	r2, #0
 800381e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003822:	2302      	movs	r3, #2
 8003824:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003826:	7dfb      	ldrb	r3, [r7, #23]
}
 8003828:	4618      	mov	r0, r3
 800382a:	3718      	adds	r7, #24
 800382c:	46bd      	mov	sp, r7
 800382e:	bd80      	pop	{r7, pc}

08003830 <HAL_DMA_Abort>:
=======
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	2200      	movs	r2, #0
 8003822:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003826:	2302      	movs	r3, #2
 8003828:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800382a:	7dfb      	ldrb	r3, [r7, #23]
}
 800382c:	4618      	mov	r0, r3
 800382e:	3718      	adds	r7, #24
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}

08003834 <HAL_DMA_Abort>:
>>>>>>> Stashed changes
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
<<<<<<< Updated upstream
 8003830:	b580      	push	{r7, lr}
 8003832:	b084      	sub	sp, #16
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800383c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800383e:	f7fe fc35 	bl	80020ac <HAL_GetTick>
 8003842:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800384a:	b2db      	uxtb	r3, r3
 800384c:	2b02      	cmp	r3, #2
 800384e:	d008      	beq.n	8003862 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2280      	movs	r2, #128	; 0x80
 8003854:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2200      	movs	r2, #0
 800385a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	e052      	b.n	8003908 <HAL_DMA_Abort+0xd8>
=======
 8003834:	b580      	push	{r7, lr}
 8003836:	b084      	sub	sp, #16
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003840:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003842:	f7fe fc35 	bl	80020b0 <HAL_GetTick>
 8003846:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800384e:	b2db      	uxtb	r3, r3
 8003850:	2b02      	cmp	r3, #2
 8003852:	d008      	beq.n	8003866 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2280      	movs	r2, #128	; 0x80
 8003858:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2200      	movs	r2, #0
 800385e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	e052      	b.n	800390c <HAL_DMA_Abort+0xd8>
>>>>>>> Stashed changes
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
<<<<<<< Updated upstream
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f022 0216 	bic.w	r2, r2, #22
 8003870:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	695a      	ldr	r2, [r3, #20]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003880:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003886:	2b00      	cmp	r3, #0
 8003888:	d103      	bne.n	8003892 <HAL_DMA_Abort+0x62>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800388e:	2b00      	cmp	r3, #0
 8003890:	d007      	beq.n	80038a2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	681a      	ldr	r2, [r3, #0]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f022 0208 	bic.w	r2, r2, #8
 80038a0:	601a      	str	r2, [r3, #0]
=======
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f022 0216 	bic.w	r2, r2, #22
 8003874:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	695a      	ldr	r2, [r3, #20]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003884:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800388a:	2b00      	cmp	r3, #0
 800388c:	d103      	bne.n	8003896 <HAL_DMA_Abort+0x62>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003892:	2b00      	cmp	r3, #0
 8003894:	d007      	beq.n	80038a6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	681a      	ldr	r2, [r3, #0]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f022 0208 	bic.w	r2, r2, #8
 80038a4:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
<<<<<<< Updated upstream
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	681a      	ldr	r2, [r3, #0]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f022 0201 	bic.w	r2, r2, #1
 80038b0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80038b2:	e013      	b.n	80038dc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80038b4:	f7fe fbfa 	bl	80020ac <HAL_GetTick>
 80038b8:	4602      	mov	r2, r0
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	1ad3      	subs	r3, r2, r3
 80038be:	2b05      	cmp	r3, #5
 80038c0:	d90c      	bls.n	80038dc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2220      	movs	r2, #32
 80038c6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2203      	movs	r2, #3
 80038cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2200      	movs	r2, #0
 80038d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80038d8:	2303      	movs	r3, #3
 80038da:	e015      	b.n	8003908 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f003 0301 	and.w	r3, r3, #1
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d1e4      	bne.n	80038b4 <HAL_DMA_Abort+0x84>
=======
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f022 0201 	bic.w	r2, r2, #1
 80038b4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80038b6:	e013      	b.n	80038e0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80038b8:	f7fe fbfa 	bl	80020b0 <HAL_GetTick>
 80038bc:	4602      	mov	r2, r0
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	1ad3      	subs	r3, r2, r3
 80038c2:	2b05      	cmp	r3, #5
 80038c4:	d90c      	bls.n	80038e0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2220      	movs	r2, #32
 80038ca:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2203      	movs	r2, #3
 80038d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2200      	movs	r2, #0
 80038d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80038dc:	2303      	movs	r3, #3
 80038de:	e015      	b.n	800390c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 0301 	and.w	r3, r3, #1
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d1e4      	bne.n	80038b8 <HAL_DMA_Abort+0x84>
>>>>>>> Stashed changes
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
<<<<<<< Updated upstream
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038ee:	223f      	movs	r2, #63	; 0x3f
 80038f0:	409a      	lsls	r2, r3
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2201      	movs	r2, #1
 80038fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2200      	movs	r2, #0
 8003902:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003906:	2300      	movs	r3, #0
}
 8003908:	4618      	mov	r0, r3
 800390a:	3710      	adds	r7, #16
 800390c:	46bd      	mov	sp, r7
 800390e:	bd80      	pop	{r7, pc}

08003910 <HAL_DMA_Abort_IT>:
=======
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038f2:	223f      	movs	r2, #63	; 0x3f
 80038f4:	409a      	lsls	r2, r3
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2201      	movs	r2, #1
 80038fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2200      	movs	r2, #0
 8003906:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800390a:	2300      	movs	r3, #0
}
 800390c:	4618      	mov	r0, r3
 800390e:	3710      	adds	r7, #16
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}

08003914 <HAL_DMA_Abort_IT>:
>>>>>>> Stashed changes
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
<<<<<<< Updated upstream
 8003910:	b480      	push	{r7}
 8003912:	b083      	sub	sp, #12
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800391e:	b2db      	uxtb	r3, r3
 8003920:	2b02      	cmp	r3, #2
 8003922:	d004      	beq.n	800392e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2280      	movs	r2, #128	; 0x80
 8003928:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	e00c      	b.n	8003948 <HAL_DMA_Abort_IT+0x38>
=======
 8003914:	b480      	push	{r7}
 8003916:	b083      	sub	sp, #12
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003922:	b2db      	uxtb	r3, r3
 8003924:	2b02      	cmp	r3, #2
 8003926:	d004      	beq.n	8003932 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2280      	movs	r2, #128	; 0x80
 800392c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	e00c      	b.n	800394c <HAL_DMA_Abort_IT+0x38>
>>>>>>> Stashed changes
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
<<<<<<< Updated upstream
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2205      	movs	r2, #5
 8003932:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	681a      	ldr	r2, [r3, #0]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f022 0201 	bic.w	r2, r2, #1
 8003944:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003946:	2300      	movs	r3, #0
}
 8003948:	4618      	mov	r0, r3
 800394a:	370c      	adds	r7, #12
 800394c:	46bd      	mov	sp, r7
 800394e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003952:	4770      	bx	lr

08003954 <HAL_DMA_IRQHandler>:
=======
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2205      	movs	r2, #5
 8003936:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	681a      	ldr	r2, [r3, #0]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f022 0201 	bic.w	r2, r2, #1
 8003948:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800394a:	2300      	movs	r3, #0
}
 800394c:	4618      	mov	r0, r3
 800394e:	370c      	adds	r7, #12
 8003950:	46bd      	mov	sp, r7
 8003952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003956:	4770      	bx	lr

08003958 <HAL_DMA_IRQHandler>:
>>>>>>> Stashed changes
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
<<<<<<< Updated upstream
 8003954:	b580      	push	{r7, lr}
 8003956:	b086      	sub	sp, #24
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800395c:	2300      	movs	r3, #0
 800395e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003960:	4b92      	ldr	r3, [pc, #584]	; (8003bac <HAL_DMA_IRQHandler+0x258>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a92      	ldr	r2, [pc, #584]	; (8003bb0 <HAL_DMA_IRQHandler+0x25c>)
 8003966:	fba2 2303 	umull	r2, r3, r2, r3
 800396a:	0a9b      	lsrs	r3, r3, #10
 800396c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003972:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800397e:	2208      	movs	r2, #8
 8003980:	409a      	lsls	r2, r3
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	4013      	ands	r3, r2
 8003986:	2b00      	cmp	r3, #0
 8003988:	d01a      	beq.n	80039c0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f003 0304 	and.w	r3, r3, #4
 8003994:	2b00      	cmp	r3, #0
 8003996:	d013      	beq.n	80039c0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	681a      	ldr	r2, [r3, #0]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f022 0204 	bic.w	r2, r2, #4
 80039a6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039ac:	2208      	movs	r2, #8
 80039ae:	409a      	lsls	r2, r3
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039b8:	f043 0201 	orr.w	r2, r3, #1
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	655a      	str	r2, [r3, #84]	; 0x54
=======
 8003958:	b580      	push	{r7, lr}
 800395a:	b086      	sub	sp, #24
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003960:	2300      	movs	r3, #0
 8003962:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003964:	4b92      	ldr	r3, [pc, #584]	; (8003bb0 <HAL_DMA_IRQHandler+0x258>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a92      	ldr	r2, [pc, #584]	; (8003bb4 <HAL_DMA_IRQHandler+0x25c>)
 800396a:	fba2 2303 	umull	r2, r3, r2, r3
 800396e:	0a9b      	lsrs	r3, r3, #10
 8003970:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003976:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003982:	2208      	movs	r2, #8
 8003984:	409a      	lsls	r2, r3
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	4013      	ands	r3, r2
 800398a:	2b00      	cmp	r3, #0
 800398c:	d01a      	beq.n	80039c4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f003 0304 	and.w	r3, r3, #4
 8003998:	2b00      	cmp	r3, #0
 800399a:	d013      	beq.n	80039c4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	681a      	ldr	r2, [r3, #0]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f022 0204 	bic.w	r2, r2, #4
 80039aa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039b0:	2208      	movs	r2, #8
 80039b2:	409a      	lsls	r2, r3
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039bc:	f043 0201 	orr.w	r2, r3, #1
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	655a      	str	r2, [r3, #84]	; 0x54
>>>>>>> Stashed changes
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
<<<<<<< Updated upstream
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039c4:	2201      	movs	r2, #1
 80039c6:	409a      	lsls	r2, r3
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	4013      	ands	r3, r2
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d012      	beq.n	80039f6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	695b      	ldr	r3, [r3, #20]
 80039d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d00b      	beq.n	80039f6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039e2:	2201      	movs	r2, #1
 80039e4:	409a      	lsls	r2, r3
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039ee:	f043 0202 	orr.w	r2, r3, #2
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	655a      	str	r2, [r3, #84]	; 0x54
=======
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039c8:	2201      	movs	r2, #1
 80039ca:	409a      	lsls	r2, r3
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	4013      	ands	r3, r2
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d012      	beq.n	80039fa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	695b      	ldr	r3, [r3, #20]
 80039da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d00b      	beq.n	80039fa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039e6:	2201      	movs	r2, #1
 80039e8:	409a      	lsls	r2, r3
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039f2:	f043 0202 	orr.w	r2, r3, #2
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	655a      	str	r2, [r3, #84]	; 0x54
>>>>>>> Stashed changes
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
<<<<<<< Updated upstream
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039fa:	2204      	movs	r2, #4
 80039fc:	409a      	lsls	r2, r3
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	4013      	ands	r3, r2
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d012      	beq.n	8003a2c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f003 0302 	and.w	r3, r3, #2
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d00b      	beq.n	8003a2c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a18:	2204      	movs	r2, #4
 8003a1a:	409a      	lsls	r2, r3
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a24:	f043 0204 	orr.w	r2, r3, #4
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	655a      	str	r2, [r3, #84]	; 0x54
=======
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039fe:	2204      	movs	r2, #4
 8003a00:	409a      	lsls	r2, r3
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	4013      	ands	r3, r2
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d012      	beq.n	8003a30 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f003 0302 	and.w	r3, r3, #2
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d00b      	beq.n	8003a30 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a1c:	2204      	movs	r2, #4
 8003a1e:	409a      	lsls	r2, r3
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a28:	f043 0204 	orr.w	r2, r3, #4
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	655a      	str	r2, [r3, #84]	; 0x54
>>>>>>> Stashed changes
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
<<<<<<< Updated upstream
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a30:	2210      	movs	r2, #16
 8003a32:	409a      	lsls	r2, r3
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	4013      	ands	r3, r2
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d043      	beq.n	8003ac4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f003 0308 	and.w	r3, r3, #8
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d03c      	beq.n	8003ac4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a4e:	2210      	movs	r2, #16
 8003a50:	409a      	lsls	r2, r3
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d018      	beq.n	8003a96 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d108      	bne.n	8003a84 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d024      	beq.n	8003ac4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	4798      	blx	r3
 8003a82:	e01f      	b.n	8003ac4 <HAL_DMA_IRQHandler+0x170>
=======
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a34:	2210      	movs	r2, #16
 8003a36:	409a      	lsls	r2, r3
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	4013      	ands	r3, r2
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d043      	beq.n	8003ac8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f003 0308 	and.w	r3, r3, #8
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d03c      	beq.n	8003ac8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a52:	2210      	movs	r2, #16
 8003a54:	409a      	lsls	r2, r3
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d018      	beq.n	8003a9a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d108      	bne.n	8003a88 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d024      	beq.n	8003ac8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	4798      	blx	r3
 8003a86:	e01f      	b.n	8003ac8 <HAL_DMA_IRQHandler+0x170>
>>>>>>> Stashed changes
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
<<<<<<< Updated upstream
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d01b      	beq.n	8003ac4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a90:	6878      	ldr	r0, [r7, #4]
 8003a92:	4798      	blx	r3
 8003a94:	e016      	b.n	8003ac4 <HAL_DMA_IRQHandler+0x170>
=======
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d01b      	beq.n	8003ac8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a94:	6878      	ldr	r0, [r7, #4]
 8003a96:	4798      	blx	r3
 8003a98:	e016      	b.n	8003ac8 <HAL_DMA_IRQHandler+0x170>
>>>>>>> Stashed changes
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
<<<<<<< Updated upstream
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d107      	bne.n	8003ab4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	681a      	ldr	r2, [r3, #0]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f022 0208 	bic.w	r2, r2, #8
 8003ab2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d003      	beq.n	8003ac4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac0:	6878      	ldr	r0, [r7, #4]
 8003ac2:	4798      	blx	r3
=======
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d107      	bne.n	8003ab8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	681a      	ldr	r2, [r3, #0]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f022 0208 	bic.w	r2, r2, #8
 8003ab6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d003      	beq.n	8003ac8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac4:	6878      	ldr	r0, [r7, #4]
 8003ac6:	4798      	blx	r3
>>>>>>> Stashed changes
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
<<<<<<< Updated upstream
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ac8:	2220      	movs	r2, #32
 8003aca:	409a      	lsls	r2, r3
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	4013      	ands	r3, r2
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	f000 808e 	beq.w	8003bf2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f003 0310 	and.w	r3, r3, #16
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	f000 8086 	beq.w	8003bf2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003aea:	2220      	movs	r2, #32
 8003aec:	409a      	lsls	r2, r3
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	2b05      	cmp	r3, #5
 8003afc:	d136      	bne.n	8003b6c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	681a      	ldr	r2, [r3, #0]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f022 0216 	bic.w	r2, r2, #22
 8003b0c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	695a      	ldr	r2, [r3, #20]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003b1c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d103      	bne.n	8003b2e <HAL_DMA_IRQHandler+0x1da>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d007      	beq.n	8003b3e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	681a      	ldr	r2, [r3, #0]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f022 0208 	bic.w	r2, r2, #8
 8003b3c:	601a      	str	r2, [r3, #0]
=======
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003acc:	2220      	movs	r2, #32
 8003ace:	409a      	lsls	r2, r3
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	4013      	ands	r3, r2
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	f000 808e 	beq.w	8003bf6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f003 0310 	and.w	r3, r3, #16
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	f000 8086 	beq.w	8003bf6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003aee:	2220      	movs	r2, #32
 8003af0:	409a      	lsls	r2, r3
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003afc:	b2db      	uxtb	r3, r3
 8003afe:	2b05      	cmp	r3, #5
 8003b00:	d136      	bne.n	8003b70 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	681a      	ldr	r2, [r3, #0]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f022 0216 	bic.w	r2, r2, #22
 8003b10:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	695a      	ldr	r2, [r3, #20]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003b20:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d103      	bne.n	8003b32 <HAL_DMA_IRQHandler+0x1da>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d007      	beq.n	8003b42 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f022 0208 	bic.w	r2, r2, #8
 8003b40:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
<<<<<<< Updated upstream
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b42:	223f      	movs	r2, #63	; 0x3f
 8003b44:	409a      	lsls	r2, r3
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2200      	movs	r2, #0
 8003b56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d07d      	beq.n	8003c5e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	4798      	blx	r3
        }
        return;
 8003b6a:	e078      	b.n	8003c5e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d01c      	beq.n	8003bb4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d108      	bne.n	8003b9a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d030      	beq.n	8003bf2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b94:	6878      	ldr	r0, [r7, #4]
 8003b96:	4798      	blx	r3
 8003b98:	e02b      	b.n	8003bf2 <HAL_DMA_IRQHandler+0x29e>
=======
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b46:	223f      	movs	r2, #63	; 0x3f
 8003b48:	409a      	lsls	r2, r3
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2201      	movs	r2, #1
 8003b52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d07d      	beq.n	8003c62 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b6a:	6878      	ldr	r0, [r7, #4]
 8003b6c:	4798      	blx	r3
        }
        return;
 8003b6e:	e078      	b.n	8003c62 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d01c      	beq.n	8003bb8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d108      	bne.n	8003b9e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d030      	beq.n	8003bf6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b98:	6878      	ldr	r0, [r7, #4]
 8003b9a:	4798      	blx	r3
 8003b9c:	e02b      	b.n	8003bf6 <HAL_DMA_IRQHandler+0x29e>
>>>>>>> Stashed changes
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
<<<<<<< Updated upstream
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d027      	beq.n	8003bf2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	4798      	blx	r3
 8003baa:	e022      	b.n	8003bf2 <HAL_DMA_IRQHandler+0x29e>
 8003bac:	20000000 	.word	0x20000000
 8003bb0:	1b4e81b5 	.word	0x1b4e81b5
=======
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d027      	beq.n	8003bf6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	4798      	blx	r3
 8003bae:	e022      	b.n	8003bf6 <HAL_DMA_IRQHandler+0x29e>
 8003bb0:	20000000 	.word	0x20000000
 8003bb4:	1b4e81b5 	.word	0x1b4e81b5
>>>>>>> Stashed changes
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
<<<<<<< Updated upstream
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d10f      	bne.n	8003be2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	681a      	ldr	r2, [r3, #0]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f022 0210 	bic.w	r2, r2, #16
 8003bd0:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2201      	movs	r2, #1
 8003bd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d003      	beq.n	8003bf2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bee:	6878      	ldr	r0, [r7, #4]
 8003bf0:	4798      	blx	r3
=======
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d10f      	bne.n	8003be6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	681a      	ldr	r2, [r3, #0]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f022 0210 	bic.w	r2, r2, #16
 8003bd4:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2201      	movs	r2, #1
 8003bda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2200      	movs	r2, #0
 8003be2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d003      	beq.n	8003bf6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	4798      	blx	r3
>>>>>>> Stashed changes
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
<<<<<<< Updated upstream
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d032      	beq.n	8003c60 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bfe:	f003 0301 	and.w	r3, r3, #1
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d022      	beq.n	8003c4c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2205      	movs	r2, #5
 8003c0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	681a      	ldr	r2, [r3, #0]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f022 0201 	bic.w	r2, r2, #1
 8003c1c:	601a      	str	r2, [r3, #0]
=======
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d032      	beq.n	8003c64 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c02:	f003 0301 	and.w	r3, r3, #1
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d022      	beq.n	8003c50 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2205      	movs	r2, #5
 8003c0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f022 0201 	bic.w	r2, r2, #1
 8003c20:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes

      do
      {
        if (++count > timeout)
<<<<<<< Updated upstream
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	3301      	adds	r3, #1
 8003c22:	60bb      	str	r3, [r7, #8]
 8003c24:	697a      	ldr	r2, [r7, #20]
 8003c26:	429a      	cmp	r2, r3
 8003c28:	d307      	bcc.n	8003c3a <HAL_DMA_IRQHandler+0x2e6>
=======
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	3301      	adds	r3, #1
 8003c26:	60bb      	str	r3, [r7, #8]
 8003c28:	697a      	ldr	r2, [r7, #20]
 8003c2a:	429a      	cmp	r2, r3
 8003c2c:	d307      	bcc.n	8003c3e <HAL_DMA_IRQHandler+0x2e6>
>>>>>>> Stashed changes
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
<<<<<<< Updated upstream
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f003 0301 	and.w	r3, r3, #1
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d1f2      	bne.n	8003c1e <HAL_DMA_IRQHandler+0x2ca>
 8003c38:	e000      	b.n	8003c3c <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003c3a:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2201      	movs	r2, #1
 8003c40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2200      	movs	r2, #0
 8003c48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d005      	beq.n	8003c60 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c58:	6878      	ldr	r0, [r7, #4]
 8003c5a:	4798      	blx	r3
 8003c5c:	e000      	b.n	8003c60 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003c5e:	bf00      	nop
    }
  }
}
 8003c60:	3718      	adds	r7, #24
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bd80      	pop	{r7, pc}
 8003c66:	bf00      	nop

08003c68 <HAL_DMA_GetError>:
=======
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f003 0301 	and.w	r3, r3, #1
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d1f2      	bne.n	8003c22 <HAL_DMA_IRQHandler+0x2ca>
 8003c3c:	e000      	b.n	8003c40 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003c3e:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2201      	movs	r2, #1
 8003c44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d005      	beq.n	8003c64 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c5c:	6878      	ldr	r0, [r7, #4]
 8003c5e:	4798      	blx	r3
 8003c60:	e000      	b.n	8003c64 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003c62:	bf00      	nop
    }
  }
}
 8003c64:	3718      	adds	r7, #24
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}
 8003c6a:	bf00      	nop

08003c6c <HAL_DMA_GetError>:
>>>>>>> Stashed changes
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
<<<<<<< Updated upstream
 8003c68:	b480      	push	{r7}
 8003c6a:	b083      	sub	sp, #12
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	370c      	adds	r7, #12
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7e:	4770      	bx	lr

08003c80 <DMA_SetConfig>:
=======
 8003c6c:	b480      	push	{r7}
 8003c6e:	b083      	sub	sp, #12
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8003c78:	4618      	mov	r0, r3
 8003c7a:	370c      	adds	r7, #12
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c82:	4770      	bx	lr

08003c84 <DMA_SetConfig>:
>>>>>>> Stashed changes
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
<<<<<<< Updated upstream
 8003c80:	b480      	push	{r7}
 8003c82:	b085      	sub	sp, #20
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	60f8      	str	r0, [r7, #12]
 8003c88:	60b9      	str	r1, [r7, #8]
 8003c8a:	607a      	str	r2, [r7, #4]
 8003c8c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	681a      	ldr	r2, [r3, #0]
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003c9c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	683a      	ldr	r2, [r7, #0]
 8003ca4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	2b40      	cmp	r3, #64	; 0x40
 8003cac:	d108      	bne.n	8003cc0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	687a      	ldr	r2, [r7, #4]
 8003cb4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	68ba      	ldr	r2, [r7, #8]
 8003cbc:	60da      	str	r2, [r3, #12]
=======
 8003c84:	b480      	push	{r7}
 8003c86:	b085      	sub	sp, #20
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	60f8      	str	r0, [r7, #12]
 8003c8c:	60b9      	str	r1, [r7, #8]
 8003c8e:	607a      	str	r2, [r7, #4]
 8003c90:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	681a      	ldr	r2, [r3, #0]
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003ca0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	683a      	ldr	r2, [r7, #0]
 8003ca8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	689b      	ldr	r3, [r3, #8]
 8003cae:	2b40      	cmp	r3, #64	; 0x40
 8003cb0:	d108      	bne.n	8003cc4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	687a      	ldr	r2, [r7, #4]
 8003cb8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	68ba      	ldr	r2, [r7, #8]
 8003cc0:	60da      	str	r2, [r3, #12]
>>>>>>> Stashed changes
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
<<<<<<< Updated upstream
 8003cbe:	e007      	b.n	8003cd0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	68ba      	ldr	r2, [r7, #8]
 8003cc6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	687a      	ldr	r2, [r7, #4]
 8003cce:	60da      	str	r2, [r3, #12]
}
 8003cd0:	bf00      	nop
 8003cd2:	3714      	adds	r7, #20
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cda:	4770      	bx	lr

08003cdc <DMA_CalcBaseAndBitshift>:
=======
 8003cc2:	e007      	b.n	8003cd4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	68ba      	ldr	r2, [r7, #8]
 8003cca:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	687a      	ldr	r2, [r7, #4]
 8003cd2:	60da      	str	r2, [r3, #12]
}
 8003cd4:	bf00      	nop
 8003cd6:	3714      	adds	r7, #20
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cde:	4770      	bx	lr

08003ce0 <DMA_CalcBaseAndBitshift>:
>>>>>>> Stashed changes
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
<<<<<<< Updated upstream
 8003cdc:	b480      	push	{r7}
 8003cde:	b085      	sub	sp, #20
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	b2db      	uxtb	r3, r3
 8003cea:	3b10      	subs	r3, #16
 8003cec:	4a14      	ldr	r2, [pc, #80]	; (8003d40 <DMA_CalcBaseAndBitshift+0x64>)
 8003cee:	fba2 2303 	umull	r2, r3, r2, r3
 8003cf2:	091b      	lsrs	r3, r3, #4
 8003cf4:	60fb      	str	r3, [r7, #12]
=======
 8003ce0:	b480      	push	{r7}
 8003ce2:	b085      	sub	sp, #20
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	b2db      	uxtb	r3, r3
 8003cee:	3b10      	subs	r3, #16
 8003cf0:	4a14      	ldr	r2, [pc, #80]	; (8003d44 <DMA_CalcBaseAndBitshift+0x64>)
 8003cf2:	fba2 2303 	umull	r2, r3, r2, r3
 8003cf6:	091b      	lsrs	r3, r3, #4
 8003cf8:	60fb      	str	r3, [r7, #12]
>>>>>>> Stashed changes
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
<<<<<<< Updated upstream
 8003cf6:	4a13      	ldr	r2, [pc, #76]	; (8003d44 <DMA_CalcBaseAndBitshift+0x68>)
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	4413      	add	r3, r2
 8003cfc:	781b      	ldrb	r3, [r3, #0]
 8003cfe:	461a      	mov	r2, r3
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	2b03      	cmp	r3, #3
 8003d08:	d909      	bls.n	8003d1e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003d12:	f023 0303 	bic.w	r3, r3, #3
 8003d16:	1d1a      	adds	r2, r3, #4
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	659a      	str	r2, [r3, #88]	; 0x58
 8003d1c:	e007      	b.n	8003d2e <DMA_CalcBaseAndBitshift+0x52>
=======
 8003cfa:	4a13      	ldr	r2, [pc, #76]	; (8003d48 <DMA_CalcBaseAndBitshift+0x68>)
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	4413      	add	r3, r2
 8003d00:	781b      	ldrb	r3, [r3, #0]
 8003d02:	461a      	mov	r2, r3
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2b03      	cmp	r3, #3
 8003d0c:	d909      	bls.n	8003d22 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003d16:	f023 0303 	bic.w	r3, r3, #3
 8003d1a:	1d1a      	adds	r2, r3, #4
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	659a      	str	r2, [r3, #88]	; 0x58
 8003d20:	e007      	b.n	8003d32 <DMA_CalcBaseAndBitshift+0x52>
>>>>>>> Stashed changes
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
<<<<<<< Updated upstream
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003d26:	f023 0303 	bic.w	r3, r3, #3
 8003d2a:	687a      	ldr	r2, [r7, #4]
 8003d2c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	3714      	adds	r7, #20
 8003d36:	46bd      	mov	sp, r7
 8003d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3c:	4770      	bx	lr
 8003d3e:	bf00      	nop
 8003d40:	aaaaaaab 	.word	0xaaaaaaab
 8003d44:	08018354 	.word	0x08018354

08003d48 <DMA_CheckFifoParam>:
=======
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003d2a:	f023 0303 	bic.w	r3, r3, #3
 8003d2e:	687a      	ldr	r2, [r7, #4]
 8003d30:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	3714      	adds	r7, #20
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d40:	4770      	bx	lr
 8003d42:	bf00      	nop
 8003d44:	aaaaaaab 	.word	0xaaaaaaab
 8003d48:	08018338 	.word	0x08018338

08003d4c <DMA_CheckFifoParam>:
>>>>>>> Stashed changes
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
<<<<<<< Updated upstream
 8003d48:	b480      	push	{r7}
 8003d4a:	b085      	sub	sp, #20
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d50:	2300      	movs	r3, #0
 8003d52:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d58:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	699b      	ldr	r3, [r3, #24]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d11f      	bne.n	8003da2 <DMA_CheckFifoParam+0x5a>
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	2b03      	cmp	r3, #3
 8003d66:	d856      	bhi.n	8003e16 <DMA_CheckFifoParam+0xce>
 8003d68:	a201      	add	r2, pc, #4	; (adr r2, 8003d70 <DMA_CheckFifoParam+0x28>)
 8003d6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d6e:	bf00      	nop
 8003d70:	08003d81 	.word	0x08003d81
 8003d74:	08003d93 	.word	0x08003d93
 8003d78:	08003d81 	.word	0x08003d81
 8003d7c:	08003e17 	.word	0x08003e17
=======
 8003d4c:	b480      	push	{r7}
 8003d4e:	b085      	sub	sp, #20
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d54:	2300      	movs	r3, #0
 8003d56:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d5c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	699b      	ldr	r3, [r3, #24]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d11f      	bne.n	8003da6 <DMA_CheckFifoParam+0x5a>
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	2b03      	cmp	r3, #3
 8003d6a:	d856      	bhi.n	8003e1a <DMA_CheckFifoParam+0xce>
 8003d6c:	a201      	add	r2, pc, #4	; (adr r2, 8003d74 <DMA_CheckFifoParam+0x28>)
 8003d6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d72:	bf00      	nop
 8003d74:	08003d85 	.word	0x08003d85
 8003d78:	08003d97 	.word	0x08003d97
 8003d7c:	08003d85 	.word	0x08003d85
 8003d80:	08003e1b 	.word	0x08003e1b
>>>>>>> Stashed changes
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
<<<<<<< Updated upstream
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d84:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d046      	beq.n	8003e1a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d90:	e043      	b.n	8003e1a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d96:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003d9a:	d140      	bne.n	8003e1e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003da0:	e03d      	b.n	8003e1e <DMA_CheckFifoParam+0xd6>
=======
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d88:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d046      	beq.n	8003e1e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003d90:	2301      	movs	r3, #1
 8003d92:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d94:	e043      	b.n	8003e1e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d9a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003d9e:	d140      	bne.n	8003e22 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003da0:	2301      	movs	r3, #1
 8003da2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003da4:	e03d      	b.n	8003e22 <DMA_CheckFifoParam+0xd6>
>>>>>>> Stashed changes
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
<<<<<<< Updated upstream
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	699b      	ldr	r3, [r3, #24]
 8003da6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003daa:	d121      	bne.n	8003df0 <DMA_CheckFifoParam+0xa8>
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	2b03      	cmp	r3, #3
 8003db0:	d837      	bhi.n	8003e22 <DMA_CheckFifoParam+0xda>
 8003db2:	a201      	add	r2, pc, #4	; (adr r2, 8003db8 <DMA_CheckFifoParam+0x70>)
 8003db4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003db8:	08003dc9 	.word	0x08003dc9
 8003dbc:	08003dcf 	.word	0x08003dcf
 8003dc0:	08003dc9 	.word	0x08003dc9
 8003dc4:	08003de1 	.word	0x08003de1
=======
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	699b      	ldr	r3, [r3, #24]
 8003daa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003dae:	d121      	bne.n	8003df4 <DMA_CheckFifoParam+0xa8>
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	2b03      	cmp	r3, #3
 8003db4:	d837      	bhi.n	8003e26 <DMA_CheckFifoParam+0xda>
 8003db6:	a201      	add	r2, pc, #4	; (adr r2, 8003dbc <DMA_CheckFifoParam+0x70>)
 8003db8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dbc:	08003dcd 	.word	0x08003dcd
 8003dc0:	08003dd3 	.word	0x08003dd3
 8003dc4:	08003dcd 	.word	0x08003dcd
 8003dc8:	08003de5 	.word	0x08003de5
>>>>>>> Stashed changes
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
<<<<<<< Updated upstream
 8003dc8:	2301      	movs	r3, #1
 8003dca:	73fb      	strb	r3, [r7, #15]
      break;
 8003dcc:	e030      	b.n	8003e30 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dd2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d025      	beq.n	8003e26 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003dde:	e022      	b.n	8003e26 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003de4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003de8:	d11f      	bne.n	8003e2a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003dee:	e01c      	b.n	8003e2a <DMA_CheckFifoParam+0xe2>
=======
 8003dcc:	2301      	movs	r3, #1
 8003dce:	73fb      	strb	r3, [r7, #15]
      break;
 8003dd0:	e030      	b.n	8003e34 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dd6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d025      	beq.n	8003e2a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003de2:	e022      	b.n	8003e2a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003de8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003dec:	d11f      	bne.n	8003e2e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003df2:	e01c      	b.n	8003e2e <DMA_CheckFifoParam+0xe2>
>>>>>>> Stashed changes
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
<<<<<<< Updated upstream
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	2b02      	cmp	r3, #2
 8003df4:	d903      	bls.n	8003dfe <DMA_CheckFifoParam+0xb6>
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	2b03      	cmp	r3, #3
 8003dfa:	d003      	beq.n	8003e04 <DMA_CheckFifoParam+0xbc>
=======
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	2b02      	cmp	r3, #2
 8003df8:	d903      	bls.n	8003e02 <DMA_CheckFifoParam+0xb6>
 8003dfa:	68bb      	ldr	r3, [r7, #8]
 8003dfc:	2b03      	cmp	r3, #3
 8003dfe:	d003      	beq.n	8003e08 <DMA_CheckFifoParam+0xbc>
>>>>>>> Stashed changes
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
<<<<<<< Updated upstream
 8003dfc:	e018      	b.n	8003e30 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	73fb      	strb	r3, [r7, #15]
      break;
 8003e02:	e015      	b.n	8003e30 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e08:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d00e      	beq.n	8003e2e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003e10:	2301      	movs	r3, #1
 8003e12:	73fb      	strb	r3, [r7, #15]
      break;
 8003e14:	e00b      	b.n	8003e2e <DMA_CheckFifoParam+0xe6>
      break;
 8003e16:	bf00      	nop
 8003e18:	e00a      	b.n	8003e30 <DMA_CheckFifoParam+0xe8>
      break;
 8003e1a:	bf00      	nop
 8003e1c:	e008      	b.n	8003e30 <DMA_CheckFifoParam+0xe8>
      break;
 8003e1e:	bf00      	nop
 8003e20:	e006      	b.n	8003e30 <DMA_CheckFifoParam+0xe8>
      break;
 8003e22:	bf00      	nop
 8003e24:	e004      	b.n	8003e30 <DMA_CheckFifoParam+0xe8>
      break;
 8003e26:	bf00      	nop
 8003e28:	e002      	b.n	8003e30 <DMA_CheckFifoParam+0xe8>
      break;   
 8003e2a:	bf00      	nop
 8003e2c:	e000      	b.n	8003e30 <DMA_CheckFifoParam+0xe8>
      break;
 8003e2e:	bf00      	nop
=======
 8003e00:	e018      	b.n	8003e34 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	73fb      	strb	r3, [r7, #15]
      break;
 8003e06:	e015      	b.n	8003e34 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e0c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d00e      	beq.n	8003e32 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003e14:	2301      	movs	r3, #1
 8003e16:	73fb      	strb	r3, [r7, #15]
      break;
 8003e18:	e00b      	b.n	8003e32 <DMA_CheckFifoParam+0xe6>
      break;
 8003e1a:	bf00      	nop
 8003e1c:	e00a      	b.n	8003e34 <DMA_CheckFifoParam+0xe8>
      break;
 8003e1e:	bf00      	nop
 8003e20:	e008      	b.n	8003e34 <DMA_CheckFifoParam+0xe8>
      break;
 8003e22:	bf00      	nop
 8003e24:	e006      	b.n	8003e34 <DMA_CheckFifoParam+0xe8>
      break;
 8003e26:	bf00      	nop
 8003e28:	e004      	b.n	8003e34 <DMA_CheckFifoParam+0xe8>
      break;
 8003e2a:	bf00      	nop
 8003e2c:	e002      	b.n	8003e34 <DMA_CheckFifoParam+0xe8>
      break;   
 8003e2e:	bf00      	nop
 8003e30:	e000      	b.n	8003e34 <DMA_CheckFifoParam+0xe8>
      break;
 8003e32:	bf00      	nop
>>>>>>> Stashed changes
    }
  } 
  
  return status; 
<<<<<<< Updated upstream
 8003e30:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e32:	4618      	mov	r0, r3
 8003e34:	3714      	adds	r7, #20
 8003e36:	46bd      	mov	sp, r7
 8003e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3c:	4770      	bx	lr
 8003e3e:	bf00      	nop

08003e40 <HAL_ETH_Init>:
=======
 8003e34:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	3714      	adds	r7, #20
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e40:	4770      	bx	lr
 8003e42:	bf00      	nop

08003e44 <HAL_ETH_Init>:
>>>>>>> Stashed changes
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
<<<<<<< Updated upstream
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b088      	sub	sp, #32
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8003e48:	2300      	movs	r3, #0
 8003e4a:	61fb      	str	r3, [r7, #28]
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8003e50:	4baa      	ldr	r3, [pc, #680]	; (80040fc <HAL_ETH_Init+0x2bc>)
 8003e52:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8003e54:	2300      	movs	r3, #0
 8003e56:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8003e58:	2300      	movs	r3, #0
 8003e5a:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d101      	bne.n	8003e66 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	e183      	b.n	800416e <HAL_ETH_Init+0x32e>
=======
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b088      	sub	sp, #32
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	61fb      	str	r3, [r7, #28]
 8003e50:	2300      	movs	r3, #0
 8003e52:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8003e54:	4baa      	ldr	r3, [pc, #680]	; (8004100 <HAL_ETH_Init+0x2bc>)
 8003e56:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8003e58:	2300      	movs	r3, #0
 8003e5a:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d101      	bne.n	8003e6a <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	e183      	b.n	8004172 <HAL_ETH_Init+0x32e>
>>>>>>> Stashed changes
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
<<<<<<< Updated upstream
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003e6c:	b2db      	uxtb	r3, r3
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d106      	bne.n	8003e80 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2200      	movs	r2, #0
 8003e76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
=======
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003e70:	b2db      	uxtb	r3, r3
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d106      	bne.n	8003e84 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
>>>>>>> Stashed changes
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
<<<<<<< Updated upstream
 8003e7a:	6878      	ldr	r0, [r7, #4]
 8003e7c:	f006 fc1c 	bl	800a6b8 <HAL_ETH_MspInit>
=======
 8003e7e:	6878      	ldr	r0, [r7, #4]
 8003e80:	f006 fc02 	bl	800a688 <HAL_ETH_MspInit>
>>>>>>> Stashed changes
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
<<<<<<< Updated upstream
 8003e80:	2300      	movs	r3, #0
 8003e82:	60bb      	str	r3, [r7, #8]
 8003e84:	4b9e      	ldr	r3, [pc, #632]	; (8004100 <HAL_ETH_Init+0x2c0>)
 8003e86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e88:	4a9d      	ldr	r2, [pc, #628]	; (8004100 <HAL_ETH_Init+0x2c0>)
 8003e8a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e8e:	6453      	str	r3, [r2, #68]	; 0x44
 8003e90:	4b9b      	ldr	r3, [pc, #620]	; (8004100 <HAL_ETH_Init+0x2c0>)
 8003e92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e98:	60bb      	str	r3, [r7, #8]
 8003e9a:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8003e9c:	4b99      	ldr	r3, [pc, #612]	; (8004104 <HAL_ETH_Init+0x2c4>)
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	4a98      	ldr	r2, [pc, #608]	; (8004104 <HAL_ETH_Init+0x2c4>)
 8003ea2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003ea6:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8003ea8:	4b96      	ldr	r3, [pc, #600]	; (8004104 <HAL_ETH_Init+0x2c4>)
 8003eaa:	685a      	ldr	r2, [r3, #4]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6a1b      	ldr	r3, [r3, #32]
 8003eb0:	4994      	ldr	r1, [pc, #592]	; (8004104 <HAL_ETH_Init+0x2c4>)
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	604b      	str	r3, [r1, #4]
=======
 8003e84:	2300      	movs	r3, #0
 8003e86:	60bb      	str	r3, [r7, #8]
 8003e88:	4b9e      	ldr	r3, [pc, #632]	; (8004104 <HAL_ETH_Init+0x2c0>)
 8003e8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e8c:	4a9d      	ldr	r2, [pc, #628]	; (8004104 <HAL_ETH_Init+0x2c0>)
 8003e8e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e92:	6453      	str	r3, [r2, #68]	; 0x44
 8003e94:	4b9b      	ldr	r3, [pc, #620]	; (8004104 <HAL_ETH_Init+0x2c0>)
 8003e96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e9c:	60bb      	str	r3, [r7, #8]
 8003e9e:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8003ea0:	4b99      	ldr	r3, [pc, #612]	; (8004108 <HAL_ETH_Init+0x2c4>)
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	4a98      	ldr	r2, [pc, #608]	; (8004108 <HAL_ETH_Init+0x2c4>)
 8003ea6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003eaa:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8003eac:	4b96      	ldr	r3, [pc, #600]	; (8004108 <HAL_ETH_Init+0x2c4>)
 8003eae:	685a      	ldr	r2, [r3, #4]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6a1b      	ldr	r3, [r3, #32]
 8003eb4:	4994      	ldr	r1, [pc, #592]	; (8004108 <HAL_ETH_Init+0x2c4>)
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	604b      	str	r3, [r1, #4]
>>>>>>> Stashed changes
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
<<<<<<< Updated upstream
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ebe:	681a      	ldr	r2, [r3, #0]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f042 0201 	orr.w	r2, r2, #1
 8003ec8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ecc:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8003ece:	f7fe f8ed 	bl	80020ac <HAL_GetTick>
 8003ed2:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8003ed4:	e011      	b.n	8003efa <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8003ed6:	f7fe f8e9 	bl	80020ac <HAL_GetTick>
 8003eda:	4602      	mov	r2, r0
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	1ad3      	subs	r3, r2, r3
 8003ee0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003ee4:	d909      	bls.n	8003efa <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2203      	movs	r2, #3
 8003eea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
=======
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ec2:	681a      	ldr	r2, [r3, #0]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f042 0201 	orr.w	r2, r2, #1
 8003ecc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ed0:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8003ed2:	f7fe f8ed 	bl	80020b0 <HAL_GetTick>
 8003ed6:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8003ed8:	e011      	b.n	8003efe <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8003eda:	f7fe f8e9 	bl	80020b0 <HAL_GetTick>
 8003ede:	4602      	mov	r2, r0
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	1ad3      	subs	r3, r2, r3
 8003ee4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003ee8:	d909      	bls.n	8003efe <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2203      	movs	r2, #3
 8003eee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
>>>>>>> Stashed changes
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
<<<<<<< Updated upstream
 8003ef6:	2303      	movs	r3, #3
 8003ef8:	e139      	b.n	800416e <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f003 0301 	and.w	r3, r3, #1
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d1e4      	bne.n	8003ed6 <HAL_ETH_Init+0x96>
=======
 8003efa:	2303      	movs	r3, #3
 8003efc:	e139      	b.n	8004172 <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f003 0301 	and.w	r3, r3, #1
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d1e4      	bne.n	8003eda <HAL_ETH_Init+0x96>
>>>>>>> Stashed changes
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
<<<<<<< Updated upstream
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	691b      	ldr	r3, [r3, #16]
 8003f12:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8003f14:	69fb      	ldr	r3, [r7, #28]
 8003f16:	f023 031c 	bic.w	r3, r3, #28
 8003f1a:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8003f1c:	f002 f892 	bl	8006044 <HAL_RCC_GetHCLKFreq>
 8003f20:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8003f22:	69bb      	ldr	r3, [r7, #24]
 8003f24:	4a78      	ldr	r2, [pc, #480]	; (8004108 <HAL_ETH_Init+0x2c8>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d908      	bls.n	8003f3c <HAL_ETH_Init+0xfc>
 8003f2a:	69bb      	ldr	r3, [r7, #24]
 8003f2c:	4a77      	ldr	r2, [pc, #476]	; (800410c <HAL_ETH_Init+0x2cc>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d804      	bhi.n	8003f3c <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8003f32:	69fb      	ldr	r3, [r7, #28]
 8003f34:	f043 0308 	orr.w	r3, r3, #8
 8003f38:	61fb      	str	r3, [r7, #28]
 8003f3a:	e027      	b.n	8003f8c <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8003f3c:	69bb      	ldr	r3, [r7, #24]
 8003f3e:	4a73      	ldr	r2, [pc, #460]	; (800410c <HAL_ETH_Init+0x2cc>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d908      	bls.n	8003f56 <HAL_ETH_Init+0x116>
 8003f44:	69bb      	ldr	r3, [r7, #24]
 8003f46:	4a6d      	ldr	r2, [pc, #436]	; (80040fc <HAL_ETH_Init+0x2bc>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d204      	bcs.n	8003f56 <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8003f4c:	69fb      	ldr	r3, [r7, #28]
 8003f4e:	f043 030c 	orr.w	r3, r3, #12
 8003f52:	61fb      	str	r3, [r7, #28]
 8003f54:	e01a      	b.n	8003f8c <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8003f56:	69bb      	ldr	r3, [r7, #24]
 8003f58:	4a68      	ldr	r2, [pc, #416]	; (80040fc <HAL_ETH_Init+0x2bc>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d303      	bcc.n	8003f66 <HAL_ETH_Init+0x126>
 8003f5e:	69bb      	ldr	r3, [r7, #24]
 8003f60:	4a6b      	ldr	r2, [pc, #428]	; (8004110 <HAL_ETH_Init+0x2d0>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d911      	bls.n	8003f8a <HAL_ETH_Init+0x14a>
=======
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	691b      	ldr	r3, [r3, #16]
 8003f16:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8003f18:	69fb      	ldr	r3, [r7, #28]
 8003f1a:	f023 031c 	bic.w	r3, r3, #28
 8003f1e:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8003f20:	f002 f878 	bl	8006014 <HAL_RCC_GetHCLKFreq>
 8003f24:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8003f26:	69bb      	ldr	r3, [r7, #24]
 8003f28:	4a78      	ldr	r2, [pc, #480]	; (800410c <HAL_ETH_Init+0x2c8>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d908      	bls.n	8003f40 <HAL_ETH_Init+0xfc>
 8003f2e:	69bb      	ldr	r3, [r7, #24]
 8003f30:	4a77      	ldr	r2, [pc, #476]	; (8004110 <HAL_ETH_Init+0x2cc>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d804      	bhi.n	8003f40 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8003f36:	69fb      	ldr	r3, [r7, #28]
 8003f38:	f043 0308 	orr.w	r3, r3, #8
 8003f3c:	61fb      	str	r3, [r7, #28]
 8003f3e:	e027      	b.n	8003f90 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8003f40:	69bb      	ldr	r3, [r7, #24]
 8003f42:	4a73      	ldr	r2, [pc, #460]	; (8004110 <HAL_ETH_Init+0x2cc>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d908      	bls.n	8003f5a <HAL_ETH_Init+0x116>
 8003f48:	69bb      	ldr	r3, [r7, #24]
 8003f4a:	4a6d      	ldr	r2, [pc, #436]	; (8004100 <HAL_ETH_Init+0x2bc>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d204      	bcs.n	8003f5a <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8003f50:	69fb      	ldr	r3, [r7, #28]
 8003f52:	f043 030c 	orr.w	r3, r3, #12
 8003f56:	61fb      	str	r3, [r7, #28]
 8003f58:	e01a      	b.n	8003f90 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8003f5a:	69bb      	ldr	r3, [r7, #24]
 8003f5c:	4a68      	ldr	r2, [pc, #416]	; (8004100 <HAL_ETH_Init+0x2bc>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d303      	bcc.n	8003f6a <HAL_ETH_Init+0x126>
 8003f62:	69bb      	ldr	r3, [r7, #24]
 8003f64:	4a6b      	ldr	r2, [pc, #428]	; (8004114 <HAL_ETH_Init+0x2d0>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d911      	bls.n	8003f8e <HAL_ETH_Init+0x14a>
>>>>>>> Stashed changes
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
<<<<<<< Updated upstream
 8003f66:	69bb      	ldr	r3, [r7, #24]
 8003f68:	4a69      	ldr	r2, [pc, #420]	; (8004110 <HAL_ETH_Init+0x2d0>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d908      	bls.n	8003f80 <HAL_ETH_Init+0x140>
 8003f6e:	69bb      	ldr	r3, [r7, #24]
 8003f70:	4a68      	ldr	r2, [pc, #416]	; (8004114 <HAL_ETH_Init+0x2d4>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d804      	bhi.n	8003f80 <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8003f76:	69fb      	ldr	r3, [r7, #28]
 8003f78:	f043 0304 	orr.w	r3, r3, #4
 8003f7c:	61fb      	str	r3, [r7, #28]
 8003f7e:	e005      	b.n	8003f8c <HAL_ETH_Init+0x14c>
=======
 8003f6a:	69bb      	ldr	r3, [r7, #24]
 8003f6c:	4a69      	ldr	r2, [pc, #420]	; (8004114 <HAL_ETH_Init+0x2d0>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d908      	bls.n	8003f84 <HAL_ETH_Init+0x140>
 8003f72:	69bb      	ldr	r3, [r7, #24]
 8003f74:	4a68      	ldr	r2, [pc, #416]	; (8004118 <HAL_ETH_Init+0x2d4>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d804      	bhi.n	8003f84 <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8003f7a:	69fb      	ldr	r3, [r7, #28]
 8003f7c:	f043 0304 	orr.w	r3, r3, #4
 8003f80:	61fb      	str	r3, [r7, #28]
 8003f82:	e005      	b.n	8003f90 <HAL_ETH_Init+0x14c>
>>>>>>> Stashed changes
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
<<<<<<< Updated upstream
 8003f80:	69fb      	ldr	r3, [r7, #28]
 8003f82:	f043 0310 	orr.w	r3, r3, #16
 8003f86:	61fb      	str	r3, [r7, #28]
 8003f88:	e000      	b.n	8003f8c <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8003f8a:	bf00      	nop
=======
 8003f84:	69fb      	ldr	r3, [r7, #28]
 8003f86:	f043 0310 	orr.w	r3, r3, #16
 8003f8a:	61fb      	str	r3, [r7, #28]
 8003f8c:	e000      	b.n	8003f90 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8003f8e:	bf00      	nop
>>>>>>> Stashed changes
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
<<<<<<< Updated upstream
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	69fa      	ldr	r2, [r7, #28]
 8003f92:	611a      	str	r2, [r3, #16]
=======
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	69fa      	ldr	r2, [r7, #28]
 8003f96:	611a      	str	r2, [r3, #16]
>>>>>>> Stashed changes
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
<<<<<<< Updated upstream
 8003f94:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003f98:	2100      	movs	r1, #0
 8003f9a:	6878      	ldr	r0, [r7, #4]
 8003f9c:	f000 fb14 	bl	80045c8 <HAL_ETH_WritePHYRegister>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d00b      	beq.n	8003fbe <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8003faa:	6939      	ldr	r1, [r7, #16]
 8003fac:	6878      	ldr	r0, [r7, #4]
 8003fae:	f000 fcc9 	bl	8004944 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2201      	movs	r2, #1
 8003fb6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	e0d7      	b.n	800416e <HAL_ETH_Init+0x32e>
=======
 8003f98:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003f9c:	2100      	movs	r1, #0
 8003f9e:	6878      	ldr	r0, [r7, #4]
 8003fa0:	f000 fb14 	bl	80045cc <HAL_ETH_WritePHYRegister>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d00b      	beq.n	8003fc2 <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8003faa:	2301      	movs	r3, #1
 8003fac:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8003fae:	6939      	ldr	r1, [r7, #16]
 8003fb0:	6878      	ldr	r0, [r7, #4]
 8003fb2:	f000 fcc9 	bl	8004948 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2201      	movs	r2, #1
 8003fba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	e0d7      	b.n	8004172 <HAL_ETH_Init+0x32e>
>>>>>>> Stashed changes
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
<<<<<<< Updated upstream
 8003fbe:	20ff      	movs	r0, #255	; 0xff
 8003fc0:	f7fe f880 	bl	80020c4 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	f000 80a5 	beq.w	8004118 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8003fce:	f7fe f86d 	bl	80020ac <HAL_GetTick>
 8003fd2:	6178      	str	r0, [r7, #20]
=======
 8003fc2:	20ff      	movs	r0, #255	; 0xff
 8003fc4:	f7fe f880 	bl	80020c8 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	f000 80a5 	beq.w	800411c <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8003fd2:	f7fe f86d 	bl	80020b0 <HAL_GetTick>
 8003fd6:	6178      	str	r0, [r7, #20]
>>>>>>> Stashed changes
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
<<<<<<< Updated upstream
 8003fd4:	f107 030c 	add.w	r3, r7, #12
 8003fd8:	461a      	mov	r2, r3
 8003fda:	2101      	movs	r1, #1
 8003fdc:	6878      	ldr	r0, [r7, #4]
 8003fde:	f000 fa8b 	bl	80044f8 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8003fe2:	f7fe f863 	bl	80020ac <HAL_GetTick>
 8003fe6:	4602      	mov	r2, r0
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	1ad3      	subs	r3, r2, r3
 8003fec:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d90f      	bls.n	8004014 <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8003ff8:	6939      	ldr	r1, [r7, #16]
 8003ffa:	6878      	ldr	r0, [r7, #4]
 8003ffc:	f000 fca2 	bl	8004944 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2201      	movs	r2, #1
 8004004:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2200      	movs	r2, #0
 800400c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8004010:	2303      	movs	r3, #3
 8004012:	e0ac      	b.n	800416e <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	f003 0304 	and.w	r3, r3, #4
 800401a:	2b00      	cmp	r3, #0
 800401c:	d0da      	beq.n	8003fd4 <HAL_ETH_Init+0x194>
=======
 8003fd8:	f107 030c 	add.w	r3, r7, #12
 8003fdc:	461a      	mov	r2, r3
 8003fde:	2101      	movs	r1, #1
 8003fe0:	6878      	ldr	r0, [r7, #4]
 8003fe2:	f000 fa8b 	bl	80044fc <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8003fe6:	f7fe f863 	bl	80020b0 <HAL_GetTick>
 8003fea:	4602      	mov	r2, r0
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	1ad3      	subs	r3, r2, r3
 8003ff0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d90f      	bls.n	8004018 <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8003ffc:	6939      	ldr	r1, [r7, #16]
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f000 fca2 	bl	8004948 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2201      	movs	r2, #1
 8004008:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2200      	movs	r2, #0
 8004010:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8004014:	2303      	movs	r3, #3
 8004016:	e0ac      	b.n	8004172 <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	f003 0304 	and.w	r3, r3, #4
 800401e:	2b00      	cmp	r3, #0
 8004020:	d0da      	beq.n	8003fd8 <HAL_ETH_Init+0x194>
>>>>>>> Stashed changes

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
<<<<<<< Updated upstream
 800401e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004022:	2100      	movs	r1, #0
 8004024:	6878      	ldr	r0, [r7, #4]
 8004026:	f000 facf 	bl	80045c8 <HAL_ETH_WritePHYRegister>
 800402a:	4603      	mov	r3, r0
 800402c:	2b00      	cmp	r3, #0
 800402e:	d00b      	beq.n	8004048 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8004030:	2301      	movs	r3, #1
 8004032:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8004034:	6939      	ldr	r1, [r7, #16]
 8004036:	6878      	ldr	r0, [r7, #4]
 8004038:	f000 fc84 	bl	8004944 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2201      	movs	r2, #1
 8004040:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8004044:	2301      	movs	r3, #1
 8004046:	e092      	b.n	800416e <HAL_ETH_Init+0x32e>
=======
 8004022:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004026:	2100      	movs	r1, #0
 8004028:	6878      	ldr	r0, [r7, #4]
 800402a:	f000 facf 	bl	80045cc <HAL_ETH_WritePHYRegister>
 800402e:	4603      	mov	r3, r0
 8004030:	2b00      	cmp	r3, #0
 8004032:	d00b      	beq.n	800404c <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8004034:	2301      	movs	r3, #1
 8004036:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8004038:	6939      	ldr	r1, [r7, #16]
 800403a:	6878      	ldr	r0, [r7, #4]
 800403c:	f000 fc84 	bl	8004948 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2201      	movs	r2, #1
 8004044:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8004048:	2301      	movs	r3, #1
 800404a:	e092      	b.n	8004172 <HAL_ETH_Init+0x32e>
>>>>>>> Stashed changes
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
<<<<<<< Updated upstream
 8004048:	f7fe f830 	bl	80020ac <HAL_GetTick>
 800404c:	6178      	str	r0, [r7, #20]
=======
 800404c:	f7fe f830 	bl	80020b0 <HAL_GetTick>
 8004050:	6178      	str	r0, [r7, #20]
>>>>>>> Stashed changes
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
<<<<<<< Updated upstream
 800404e:	f107 030c 	add.w	r3, r7, #12
 8004052:	461a      	mov	r2, r3
 8004054:	2101      	movs	r1, #1
 8004056:	6878      	ldr	r0, [r7, #4]
 8004058:	f000 fa4e 	bl	80044f8 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 800405c:	f7fe f826 	bl	80020ac <HAL_GetTick>
 8004060:	4602      	mov	r2, r0
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	1ad3      	subs	r3, r2, r3
 8004066:	f241 3288 	movw	r2, #5000	; 0x1388
 800406a:	4293      	cmp	r3, r2
 800406c:	d90f      	bls.n	800408e <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800406e:	2301      	movs	r3, #1
 8004070:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8004072:	6939      	ldr	r1, [r7, #16]
 8004074:	6878      	ldr	r0, [r7, #4]
 8004076:	f000 fc65 	bl	8004944 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2201      	movs	r2, #1
 800407e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2200      	movs	r2, #0
 8004086:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 800408a:	2303      	movs	r3, #3
 800408c:	e06f      	b.n	800416e <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	f003 0320 	and.w	r3, r3, #32
 8004094:	2b00      	cmp	r3, #0
 8004096:	d0da      	beq.n	800404e <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8004098:	f107 030c 	add.w	r3, r7, #12
 800409c:	461a      	mov	r2, r3
 800409e:	2110      	movs	r1, #16
 80040a0:	6878      	ldr	r0, [r7, #4]
 80040a2:	f000 fa29 	bl	80044f8 <HAL_ETH_ReadPHYRegister>
 80040a6:	4603      	mov	r3, r0
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d00b      	beq.n	80040c4 <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80040ac:	2301      	movs	r3, #1
 80040ae:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80040b0:	6939      	ldr	r1, [r7, #16]
 80040b2:	6878      	ldr	r0, [r7, #4]
 80040b4:	f000 fc46 	bl	8004944 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2201      	movs	r2, #1
 80040bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80040c0:	2301      	movs	r3, #1
 80040c2:	e054      	b.n	800416e <HAL_ETH_Init+0x32e>
=======
 8004052:	f107 030c 	add.w	r3, r7, #12
 8004056:	461a      	mov	r2, r3
 8004058:	2101      	movs	r1, #1
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	f000 fa4e 	bl	80044fc <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8004060:	f7fe f826 	bl	80020b0 <HAL_GetTick>
 8004064:	4602      	mov	r2, r0
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	1ad3      	subs	r3, r2, r3
 800406a:	f241 3288 	movw	r2, #5000	; 0x1388
 800406e:	4293      	cmp	r3, r2
 8004070:	d90f      	bls.n	8004092 <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8004072:	2301      	movs	r3, #1
 8004074:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8004076:	6939      	ldr	r1, [r7, #16]
 8004078:	6878      	ldr	r0, [r7, #4]
 800407a:	f000 fc65 	bl	8004948 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2201      	movs	r2, #1
 8004082:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2200      	movs	r2, #0
 800408a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 800408e:	2303      	movs	r3, #3
 8004090:	e06f      	b.n	8004172 <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	f003 0320 	and.w	r3, r3, #32
 8004098:	2b00      	cmp	r3, #0
 800409a:	d0da      	beq.n	8004052 <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 800409c:	f107 030c 	add.w	r3, r7, #12
 80040a0:	461a      	mov	r2, r3
 80040a2:	2110      	movs	r1, #16
 80040a4:	6878      	ldr	r0, [r7, #4]
 80040a6:	f000 fa29 	bl	80044fc <HAL_ETH_ReadPHYRegister>
 80040aa:	4603      	mov	r3, r0
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d00b      	beq.n	80040c8 <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80040b0:	2301      	movs	r3, #1
 80040b2:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80040b4:	6939      	ldr	r1, [r7, #16]
 80040b6:	6878      	ldr	r0, [r7, #4]
 80040b8:	f000 fc46 	bl	8004948 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2201      	movs	r2, #1
 80040c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80040c4:	2301      	movs	r3, #1
 80040c6:	e054      	b.n	8004172 <HAL_ETH_Init+0x32e>
>>>>>>> Stashed changes
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
<<<<<<< Updated upstream
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	f003 0304 	and.w	r3, r3, #4
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d004      	beq.n	80040d8 <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80040d4:	60da      	str	r2, [r3, #12]
 80040d6:	e002      	b.n	80040de <HAL_ETH_Init+0x29e>
=======
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	f003 0304 	and.w	r3, r3, #4
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d004      	beq.n	80040dc <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80040d8:	60da      	str	r2, [r3, #12]
 80040da:	e002      	b.n	80040e2 <HAL_ETH_Init+0x29e>
>>>>>>> Stashed changes
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
<<<<<<< Updated upstream
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2200      	movs	r2, #0
 80040dc:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	f003 0302 	and.w	r3, r3, #2
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d003      	beq.n	80040f0 <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2200      	movs	r2, #0
 80040ec:	609a      	str	r2, [r3, #8]
 80040ee:	e035      	b.n	800415c <HAL_ETH_Init+0x31c>
=======
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2200      	movs	r2, #0
 80040e0:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	f003 0302 	and.w	r3, r3, #2
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d003      	beq.n	80040f4 <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2200      	movs	r2, #0
 80040f0:	609a      	str	r2, [r3, #8]
 80040f2:	e035      	b.n	8004160 <HAL_ETH_Init+0x31c>
>>>>>>> Stashed changes
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
<<<<<<< Updated upstream
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80040f6:	609a      	str	r2, [r3, #8]
 80040f8:	e030      	b.n	800415c <HAL_ETH_Init+0x31c>
 80040fa:	bf00      	nop
 80040fc:	03938700 	.word	0x03938700
 8004100:	40023800 	.word	0x40023800
 8004104:	40013800 	.word	0x40013800
 8004108:	01312cff 	.word	0x01312cff
 800410c:	02160ebf 	.word	0x02160ebf
 8004110:	05f5e0ff 	.word	0x05f5e0ff
 8004114:	08f0d17f 	.word	0x08f0d17f
=======
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80040fa:	609a      	str	r2, [r3, #8]
 80040fc:	e030      	b.n	8004160 <HAL_ETH_Init+0x31c>
 80040fe:	bf00      	nop
 8004100:	03938700 	.word	0x03938700
 8004104:	40023800 	.word	0x40023800
 8004108:	40013800 	.word	0x40013800
 800410c:	01312cff 	.word	0x01312cff
 8004110:	02160ebf 	.word	0x02160ebf
 8004114:	05f5e0ff 	.word	0x05f5e0ff
 8004118:	08f0d17f 	.word	0x08f0d17f
>>>>>>> Stashed changes
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
<<<<<<< Updated upstream
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	68db      	ldr	r3, [r3, #12]
 800411c:	08db      	lsrs	r3, r3, #3
 800411e:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	085b      	lsrs	r3, r3, #1
 8004126:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8004128:	4313      	orrs	r3, r2
 800412a:	b29b      	uxth	r3, r3
 800412c:	461a      	mov	r2, r3
 800412e:	2100      	movs	r1, #0
 8004130:	6878      	ldr	r0, [r7, #4]
 8004132:	f000 fa49 	bl	80045c8 <HAL_ETH_WritePHYRegister>
 8004136:	4603      	mov	r3, r0
 8004138:	2b00      	cmp	r3, #0
 800413a:	d00b      	beq.n	8004154 <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800413c:	2301      	movs	r3, #1
 800413e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8004140:	6939      	ldr	r1, [r7, #16]
 8004142:	6878      	ldr	r0, [r7, #4]
 8004144:	f000 fbfe 	bl	8004944 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2201      	movs	r2, #1
 800414c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8004150:	2301      	movs	r3, #1
 8004152:	e00c      	b.n	800416e <HAL_ETH_Init+0x32e>
=======
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	68db      	ldr	r3, [r3, #12]
 8004120:	08db      	lsrs	r3, r3, #3
 8004122:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	085b      	lsrs	r3, r3, #1
 800412a:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 800412c:	4313      	orrs	r3, r2
 800412e:	b29b      	uxth	r3, r3
 8004130:	461a      	mov	r2, r3
 8004132:	2100      	movs	r1, #0
 8004134:	6878      	ldr	r0, [r7, #4]
 8004136:	f000 fa49 	bl	80045cc <HAL_ETH_WritePHYRegister>
 800413a:	4603      	mov	r3, r0
 800413c:	2b00      	cmp	r3, #0
 800413e:	d00b      	beq.n	8004158 <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8004140:	2301      	movs	r3, #1
 8004142:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8004144:	6939      	ldr	r1, [r7, #16]
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	f000 fbfe 	bl	8004948 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2201      	movs	r2, #1
 8004150:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8004154:	2301      	movs	r3, #1
 8004156:	e00c      	b.n	8004172 <HAL_ETH_Init+0x32e>
>>>>>>> Stashed changes
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
<<<<<<< Updated upstream
 8004154:	f640 70ff 	movw	r0, #4095	; 0xfff
 8004158:	f7fd ffb4 	bl	80020c4 <HAL_Delay>
=======
 8004158:	f640 70ff 	movw	r0, #4095	; 0xfff
 800415c:	f7fd ffb4 	bl	80020c8 <HAL_Delay>
>>>>>>> Stashed changes
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
<<<<<<< Updated upstream
 800415c:	6939      	ldr	r1, [r7, #16]
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	f000 fbf0 	bl	8004944 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2201      	movs	r2, #1
 8004168:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 800416c:	2300      	movs	r3, #0
}
 800416e:	4618      	mov	r0, r3
 8004170:	3720      	adds	r7, #32
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}
 8004176:	bf00      	nop

08004178 <HAL_ETH_DMATxDescListInit>:
=======
 8004160:	6939      	ldr	r1, [r7, #16]
 8004162:	6878      	ldr	r0, [r7, #4]
 8004164:	f000 fbf0 	bl	8004948 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2201      	movs	r2, #1
 800416c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8004170:	2300      	movs	r3, #0
}
 8004172:	4618      	mov	r0, r3
 8004174:	3720      	adds	r7, #32
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}
 800417a:	bf00      	nop

0800417c <HAL_ETH_DMATxDescListInit>:
>>>>>>> Stashed changes
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
<<<<<<< Updated upstream
 8004178:	b480      	push	{r7}
 800417a:	b087      	sub	sp, #28
 800417c:	af00      	add	r7, sp, #0
 800417e:	60f8      	str	r0, [r7, #12]
 8004180:	60b9      	str	r1, [r7, #8]
 8004182:	607a      	str	r2, [r7, #4]
 8004184:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8004186:	2300      	movs	r3, #0
 8004188:	617b      	str	r3, [r7, #20]
=======
 800417c:	b480      	push	{r7}
 800417e:	b087      	sub	sp, #28
 8004180:	af00      	add	r7, sp, #0
 8004182:	60f8      	str	r0, [r7, #12]
 8004184:	60b9      	str	r1, [r7, #8]
 8004186:	607a      	str	r2, [r7, #4]
 8004188:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 800418a:	2300      	movs	r3, #0
 800418c:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
<<<<<<< Updated upstream
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004190:	2b01      	cmp	r3, #1
 8004192:	d101      	bne.n	8004198 <HAL_ETH_DMATxDescListInit+0x20>
 8004194:	2302      	movs	r3, #2
 8004196:	e052      	b.n	800423e <HAL_ETH_DMATxDescListInit+0xc6>
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2201      	movs	r2, #1
 800419c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2202      	movs	r2, #2
 80041a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	68ba      	ldr	r2, [r7, #8]
 80041ac:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 80041ae:	2300      	movs	r3, #0
 80041b0:	617b      	str	r3, [r7, #20]
 80041b2:	e030      	b.n	8004216 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	015b      	lsls	r3, r3, #5
 80041b8:	68ba      	ldr	r2, [r7, #8]
 80041ba:	4413      	add	r3, r2
 80041bc:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80041c4:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80041cc:	fb02 f303 	mul.w	r3, r2, r3
 80041d0:	687a      	ldr	r2, [r7, #4]
 80041d2:	4413      	add	r3, r2
 80041d4:	461a      	mov	r2, r3
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	69db      	ldr	r3, [r3, #28]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d105      	bne.n	80041ee <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80041ea:	693b      	ldr	r3, [r7, #16]
 80041ec:	601a      	str	r2, [r3, #0]
=======
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004194:	2b01      	cmp	r3, #1
 8004196:	d101      	bne.n	800419c <HAL_ETH_DMATxDescListInit+0x20>
 8004198:	2302      	movs	r3, #2
 800419a:	e052      	b.n	8004242 <HAL_ETH_DMATxDescListInit+0xc6>
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	2201      	movs	r2, #1
 80041a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	2202      	movs	r2, #2
 80041a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	68ba      	ldr	r2, [r7, #8]
 80041b0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 80041b2:	2300      	movs	r3, #0
 80041b4:	617b      	str	r3, [r7, #20]
 80041b6:	e030      	b.n	800421a <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	015b      	lsls	r3, r3, #5
 80041bc:	68ba      	ldr	r2, [r7, #8]
 80041be:	4413      	add	r3, r2
 80041c0:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80041c8:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80041d0:	fb02 f303 	mul.w	r3, r2, r3
 80041d4:	687a      	ldr	r2, [r7, #4]
 80041d6:	4413      	add	r3, r2
 80041d8:	461a      	mov	r2, r3
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	69db      	ldr	r3, [r3, #28]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d105      	bne.n	80041f2 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
<<<<<<< Updated upstream
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	3b01      	subs	r3, #1
 80041f2:	697a      	ldr	r2, [r7, #20]
 80041f4:	429a      	cmp	r2, r3
 80041f6:	d208      	bcs.n	800420a <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	3301      	adds	r3, #1
 80041fc:	015b      	lsls	r3, r3, #5
 80041fe:	68ba      	ldr	r2, [r7, #8]
 8004200:	4413      	add	r3, r2
 8004202:	461a      	mov	r2, r3
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	60da      	str	r2, [r3, #12]
 8004208:	e002      	b.n	8004210 <HAL_ETH_DMATxDescListInit+0x98>
=======
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	3b01      	subs	r3, #1
 80041f6:	697a      	ldr	r2, [r7, #20]
 80041f8:	429a      	cmp	r2, r3
 80041fa:	d208      	bcs.n	800420e <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	3301      	adds	r3, #1
 8004200:	015b      	lsls	r3, r3, #5
 8004202:	68ba      	ldr	r2, [r7, #8]
 8004204:	4413      	add	r3, r2
 8004206:	461a      	mov	r2, r3
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	60da      	str	r2, [r3, #12]
 800420c:	e002      	b.n	8004214 <HAL_ETH_DMATxDescListInit+0x98>
>>>>>>> Stashed changes
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
<<<<<<< Updated upstream
 800420a:	68ba      	ldr	r2, [r7, #8]
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	3301      	adds	r3, #1
 8004214:	617b      	str	r3, [r7, #20]
 8004216:	697a      	ldr	r2, [r7, #20]
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	429a      	cmp	r2, r3
 800421c:	d3ca      	bcc.n	80041b4 <HAL_ETH_DMATxDescListInit+0x3c>
=======
 800420e:	68ba      	ldr	r2, [r7, #8]
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	3301      	adds	r3, #1
 8004218:	617b      	str	r3, [r7, #20]
 800421a:	697a      	ldr	r2, [r7, #20]
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	429a      	cmp	r2, r3
 8004220:	d3ca      	bcc.n	80041b8 <HAL_ETH_DMATxDescListInit+0x3c>
>>>>>>> Stashed changes
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
<<<<<<< Updated upstream
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	68ba      	ldr	r2, [r7, #8]
 8004224:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004228:	3310      	adds	r3, #16
 800422a:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	2201      	movs	r2, #1
 8004230:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	2200      	movs	r2, #0
 8004238:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800423c:	2300      	movs	r3, #0
}
 800423e:	4618      	mov	r0, r3
 8004240:	371c      	adds	r7, #28
 8004242:	46bd      	mov	sp, r7
 8004244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004248:	4770      	bx	lr

0800424a <HAL_ETH_DMARxDescListInit>:
=======
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	68ba      	ldr	r2, [r7, #8]
 8004228:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800422c:	3310      	adds	r3, #16
 800422e:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2201      	movs	r2, #1
 8004234:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	2200      	movs	r2, #0
 800423c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8004240:	2300      	movs	r3, #0
}
 8004242:	4618      	mov	r0, r3
 8004244:	371c      	adds	r7, #28
 8004246:	46bd      	mov	sp, r7
 8004248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424c:	4770      	bx	lr

0800424e <HAL_ETH_DMARxDescListInit>:
>>>>>>> Stashed changes
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
<<<<<<< Updated upstream
 800424a:	b480      	push	{r7}
 800424c:	b087      	sub	sp, #28
 800424e:	af00      	add	r7, sp, #0
 8004250:	60f8      	str	r0, [r7, #12]
 8004252:	60b9      	str	r1, [r7, #8]
 8004254:	607a      	str	r2, [r7, #4]
 8004256:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8004258:	2300      	movs	r3, #0
 800425a:	617b      	str	r3, [r7, #20]
=======
 800424e:	b480      	push	{r7}
 8004250:	b087      	sub	sp, #28
 8004252:	af00      	add	r7, sp, #0
 8004254:	60f8      	str	r0, [r7, #12]
 8004256:	60b9      	str	r1, [r7, #8]
 8004258:	607a      	str	r2, [r7, #4]
 800425a:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 800425c:	2300      	movs	r3, #0
 800425e:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
<<<<<<< Updated upstream
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004262:	2b01      	cmp	r3, #1
 8004264:	d101      	bne.n	800426a <HAL_ETH_DMARxDescListInit+0x20>
 8004266:	2302      	movs	r3, #2
 8004268:	e056      	b.n	8004318 <HAL_ETH_DMARxDescListInit+0xce>
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	2201      	movs	r2, #1
 800426e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	2202      	movs	r2, #2
 8004276:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	68ba      	ldr	r2, [r7, #8]
 800427e:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 8004280:	2300      	movs	r3, #0
 8004282:	617b      	str	r3, [r7, #20]
 8004284:	e034      	b.n	80042f0 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 8004286:	697b      	ldr	r3, [r7, #20]
 8004288:	015b      	lsls	r3, r3, #5
 800428a:	68ba      	ldr	r2, [r7, #8]
 800428c:	4413      	add	r3, r2
 800428e:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8004290:	693b      	ldr	r3, [r7, #16]
 8004292:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004296:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	f244 52f4 	movw	r2, #17908	; 0x45f4
 800429e:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80042a6:	fb02 f303 	mul.w	r3, r2, r3
 80042aa:	687a      	ldr	r2, [r7, #4]
 80042ac:	4413      	add	r3, r2
 80042ae:	461a      	mov	r2, r3
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	699b      	ldr	r3, [r3, #24]
 80042b8:	2b01      	cmp	r3, #1
 80042ba:	d105      	bne.n	80042c8 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	605a      	str	r2, [r3, #4]
=======
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004266:	2b01      	cmp	r3, #1
 8004268:	d101      	bne.n	800426e <HAL_ETH_DMARxDescListInit+0x20>
 800426a:	2302      	movs	r3, #2
 800426c:	e056      	b.n	800431c <HAL_ETH_DMARxDescListInit+0xce>
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	2201      	movs	r2, #1
 8004272:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	2202      	movs	r2, #2
 800427a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	68ba      	ldr	r2, [r7, #8]
 8004282:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 8004284:	2300      	movs	r3, #0
 8004286:	617b      	str	r3, [r7, #20]
 8004288:	e034      	b.n	80042f4 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	015b      	lsls	r3, r3, #5
 800428e:	68ba      	ldr	r2, [r7, #8]
 8004290:	4413      	add	r3, r2
 8004292:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800429a:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 800429c:	693b      	ldr	r3, [r7, #16]
 800429e:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80042a2:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80042aa:	fb02 f303 	mul.w	r3, r2, r3
 80042ae:	687a      	ldr	r2, [r7, #4]
 80042b0:	4413      	add	r3, r2
 80042b2:	461a      	mov	r2, r3
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	699b      	ldr	r3, [r3, #24]
 80042bc:	2b01      	cmp	r3, #1
 80042be:	d105      	bne.n	80042cc <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 80042c0:	693b      	ldr	r3, [r7, #16]
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80042c8:	693b      	ldr	r3, [r7, #16]
 80042ca:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
<<<<<<< Updated upstream
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	3b01      	subs	r3, #1
 80042cc:	697a      	ldr	r2, [r7, #20]
 80042ce:	429a      	cmp	r2, r3
 80042d0:	d208      	bcs.n	80042e4 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	3301      	adds	r3, #1
 80042d6:	015b      	lsls	r3, r3, #5
 80042d8:	68ba      	ldr	r2, [r7, #8]
 80042da:	4413      	add	r3, r2
 80042dc:	461a      	mov	r2, r3
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	60da      	str	r2, [r3, #12]
 80042e2:	e002      	b.n	80042ea <HAL_ETH_DMARxDescListInit+0xa0>
=======
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	3b01      	subs	r3, #1
 80042d0:	697a      	ldr	r2, [r7, #20]
 80042d2:	429a      	cmp	r2, r3
 80042d4:	d208      	bcs.n	80042e8 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	3301      	adds	r3, #1
 80042da:	015b      	lsls	r3, r3, #5
 80042dc:	68ba      	ldr	r2, [r7, #8]
 80042de:	4413      	add	r3, r2
 80042e0:	461a      	mov	r2, r3
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	60da      	str	r2, [r3, #12]
 80042e6:	e002      	b.n	80042ee <HAL_ETH_DMARxDescListInit+0xa0>
>>>>>>> Stashed changes
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
<<<<<<< Updated upstream
 80042e4:	68ba      	ldr	r2, [r7, #8]
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	3301      	adds	r3, #1
 80042ee:	617b      	str	r3, [r7, #20]
 80042f0:	697a      	ldr	r2, [r7, #20]
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	429a      	cmp	r2, r3
 80042f6:	d3c6      	bcc.n	8004286 <HAL_ETH_DMARxDescListInit+0x3c>
=======
 80042e8:	68ba      	ldr	r2, [r7, #8]
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 80042ee:	697b      	ldr	r3, [r7, #20]
 80042f0:	3301      	adds	r3, #1
 80042f2:	617b      	str	r3, [r7, #20]
 80042f4:	697a      	ldr	r2, [r7, #20]
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	429a      	cmp	r2, r3
 80042fa:	d3c6      	bcc.n	800428a <HAL_ETH_DMARxDescListInit+0x3c>
>>>>>>> Stashed changes
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
<<<<<<< Updated upstream
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	68ba      	ldr	r2, [r7, #8]
 80042fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004302:	330c      	adds	r3, #12
 8004304:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	2201      	movs	r2, #1
 800430a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	2200      	movs	r2, #0
 8004312:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8004316:	2300      	movs	r3, #0
}
 8004318:	4618      	mov	r0, r3
 800431a:	371c      	adds	r7, #28
 800431c:	46bd      	mov	sp, r7
 800431e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004322:	4770      	bx	lr

08004324 <HAL_ETH_TransmitFrame>:
=======
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	68ba      	ldr	r2, [r7, #8]
 8004302:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004306:	330c      	adds	r3, #12
 8004308:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	2201      	movs	r2, #1
 800430e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	2200      	movs	r2, #0
 8004316:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800431a:	2300      	movs	r3, #0
}
 800431c:	4618      	mov	r0, r3
 800431e:	371c      	adds	r7, #28
 8004320:	46bd      	mov	sp, r7
 8004322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004326:	4770      	bx	lr

08004328 <HAL_ETH_TransmitFrame>:
>>>>>>> Stashed changes
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
<<<<<<< Updated upstream
 8004324:	b480      	push	{r7}
 8004326:	b087      	sub	sp, #28
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
 800432c:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 800432e:	2300      	movs	r3, #0
 8004330:	617b      	str	r3, [r7, #20]
 8004332:	2300      	movs	r3, #0
 8004334:	60fb      	str	r3, [r7, #12]
 8004336:	2300      	movs	r3, #0
 8004338:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004340:	2b01      	cmp	r3, #1
 8004342:	d101      	bne.n	8004348 <HAL_ETH_TransmitFrame+0x24>
 8004344:	2302      	movs	r3, #2
 8004346:	e0cd      	b.n	80044e4 <HAL_ETH_TransmitFrame+0x1c0>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2201      	movs	r2, #1
 800434c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2202      	movs	r2, #2
 8004354:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d109      	bne.n	8004372 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2201      	movs	r2, #1
 8004362:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2200      	movs	r2, #0
 800436a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 800436e:	2301      	movs	r3, #1
 8004370:	e0b8      	b.n	80044e4 <HAL_ETH_TransmitFrame+0x1c0>
=======
 8004328:	b480      	push	{r7}
 800432a:	b087      	sub	sp, #28
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
 8004330:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 8004332:	2300      	movs	r3, #0
 8004334:	617b      	str	r3, [r7, #20]
 8004336:	2300      	movs	r3, #0
 8004338:	60fb      	str	r3, [r7, #12]
 800433a:	2300      	movs	r3, #0
 800433c:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004344:	2b01      	cmp	r3, #1
 8004346:	d101      	bne.n	800434c <HAL_ETH_TransmitFrame+0x24>
 8004348:	2302      	movs	r3, #2
 800434a:	e0cd      	b.n	80044e8 <HAL_ETH_TransmitFrame+0x1c0>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2201      	movs	r2, #1
 8004350:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2202      	movs	r2, #2
 8004358:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d109      	bne.n	8004376 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2201      	movs	r2, #1
 8004366:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2200      	movs	r2, #0
 800436e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 8004372:	2301      	movs	r3, #1
 8004374:	e0b8      	b.n	80044e8 <HAL_ETH_TransmitFrame+0x1c0>
>>>>>>> Stashed changes
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
<<<<<<< Updated upstream
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	2b00      	cmp	r3, #0
 800437a:	da09      	bge.n	8004390 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2212      	movs	r2, #18
 8004380:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2200      	movs	r2, #0
 8004388:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 800438c:	2301      	movs	r3, #1
 800438e:	e0a9      	b.n	80044e4 <HAL_ETH_TransmitFrame+0x1c0>
=======
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	2b00      	cmp	r3, #0
 800437e:	da09      	bge.n	8004394 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2212      	movs	r2, #18
 8004384:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2200      	movs	r2, #0
 800438c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8004390:	2301      	movs	r3, #1
 8004392:	e0a9      	b.n	80044e8 <HAL_ETH_TransmitFrame+0x1c0>
>>>>>>> Stashed changes
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
<<<<<<< Updated upstream
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8004396:	4293      	cmp	r3, r2
 8004398:	d915      	bls.n	80043c6 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	4a54      	ldr	r2, [pc, #336]	; (80044f0 <HAL_ETH_TransmitFrame+0x1cc>)
 800439e:	fba2 2303 	umull	r2, r3, r2, r3
 80043a2:	0a9b      	lsrs	r3, r3, #10
 80043a4:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 80043a6:	683a      	ldr	r2, [r7, #0]
 80043a8:	4b51      	ldr	r3, [pc, #324]	; (80044f0 <HAL_ETH_TransmitFrame+0x1cc>)
 80043aa:	fba3 1302 	umull	r1, r3, r3, r2
 80043ae:	0a9b      	lsrs	r3, r3, #10
 80043b0:	f240 51f4 	movw	r1, #1524	; 0x5f4
 80043b4:	fb01 f303 	mul.w	r3, r1, r3
 80043b8:	1ad3      	subs	r3, r2, r3
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d005      	beq.n	80043ca <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 80043be:	697b      	ldr	r3, [r7, #20]
 80043c0:	3301      	adds	r3, #1
 80043c2:	617b      	str	r3, [r7, #20]
 80043c4:	e001      	b.n	80043ca <HAL_ETH_TransmitFrame+0xa6>
=======
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800439a:	4293      	cmp	r3, r2
 800439c:	d915      	bls.n	80043ca <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	4a54      	ldr	r2, [pc, #336]	; (80044f4 <HAL_ETH_TransmitFrame+0x1cc>)
 80043a2:	fba2 2303 	umull	r2, r3, r2, r3
 80043a6:	0a9b      	lsrs	r3, r3, #10
 80043a8:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 80043aa:	683a      	ldr	r2, [r7, #0]
 80043ac:	4b51      	ldr	r3, [pc, #324]	; (80044f4 <HAL_ETH_TransmitFrame+0x1cc>)
 80043ae:	fba3 1302 	umull	r1, r3, r3, r2
 80043b2:	0a9b      	lsrs	r3, r3, #10
 80043b4:	f240 51f4 	movw	r1, #1524	; 0x5f4
 80043b8:	fb01 f303 	mul.w	r3, r1, r3
 80043bc:	1ad3      	subs	r3, r2, r3
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d005      	beq.n	80043ce <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	3301      	adds	r3, #1
 80043c6:	617b      	str	r3, [r7, #20]
 80043c8:	e001      	b.n	80043ce <HAL_ETH_TransmitFrame+0xa6>
>>>>>>> Stashed changes
    }
  }
  else 
  {  
    bufcount = 1U;
<<<<<<< Updated upstream
 80043c6:	2301      	movs	r3, #1
 80043c8:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 80043ca:	697b      	ldr	r3, [r7, #20]
 80043cc:	2b01      	cmp	r3, #1
 80043ce:	d11c      	bne.n	800440a <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043d4:	681a      	ldr	r2, [r3, #0]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043da:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 80043de:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043e4:	683a      	ldr	r2, [r7, #0]
 80043e6:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80043ea:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043f0:	681a      	ldr	r2, [r3, #0]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043f6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80043fa:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004400:	68db      	ldr	r3, [r3, #12]
 8004402:	461a      	mov	r2, r3
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	62da      	str	r2, [r3, #44]	; 0x2c
 8004408:	e04b      	b.n	80044a2 <HAL_ETH_TransmitFrame+0x17e>
=======
 80043ca:	2301      	movs	r3, #1
 80043cc:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	2b01      	cmp	r3, #1
 80043d2:	d11c      	bne.n	800440e <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043d8:	681a      	ldr	r2, [r3, #0]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043de:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 80043e2:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043e8:	683a      	ldr	r2, [r7, #0]
 80043ea:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80043ee:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043f4:	681a      	ldr	r2, [r3, #0]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043fa:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80043fe:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004404:	68db      	ldr	r3, [r3, #12]
 8004406:	461a      	mov	r2, r3
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	62da      	str	r2, [r3, #44]	; 0x2c
 800440c:	e04b      	b.n	80044a6 <HAL_ETH_TransmitFrame+0x17e>
>>>>>>> Stashed changes
  }
  else
  {
    for (i=0U; i< bufcount; i++)
<<<<<<< Updated upstream
 800440a:	2300      	movs	r3, #0
 800440c:	613b      	str	r3, [r7, #16]
 800440e:	e044      	b.n	800449a <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004414:	681a      	ldr	r2, [r3, #0]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800441a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800441e:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 8004420:	693b      	ldr	r3, [r7, #16]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d107      	bne.n	8004436 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800442a:	681a      	ldr	r2, [r3, #0]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004430:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004434:	601a      	str	r2, [r3, #0]
=======
 800440e:	2300      	movs	r3, #0
 8004410:	613b      	str	r3, [r7, #16]
 8004412:	e044      	b.n	800449e <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004418:	681a      	ldr	r2, [r3, #0]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800441e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004422:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d107      	bne.n	800443a <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800442e:	681a      	ldr	r2, [r3, #0]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004434:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004438:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
<<<<<<< Updated upstream
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800443a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800443e:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 8004440:	697b      	ldr	r3, [r7, #20]
 8004442:	3b01      	subs	r3, #1
 8004444:	693a      	ldr	r2, [r7, #16]
 8004446:	429a      	cmp	r2, r3
 8004448:	d116      	bne.n	8004478 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800444e:	681a      	ldr	r2, [r3, #0]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004454:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8004458:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	4a25      	ldr	r2, [pc, #148]	; (80044f4 <HAL_ETH_TransmitFrame+0x1d0>)
 800445e:	fb02 f203 	mul.w	r2, r2, r3
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	4413      	add	r3, r2
 8004466:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800446a:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004470:	68fa      	ldr	r2, [r7, #12]
 8004472:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8004476:	605a      	str	r2, [r3, #4]
=======
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800443e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8004442:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	3b01      	subs	r3, #1
 8004448:	693a      	ldr	r2, [r7, #16]
 800444a:	429a      	cmp	r2, r3
 800444c:	d116      	bne.n	800447c <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004452:	681a      	ldr	r2, [r3, #0]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004458:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800445c:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	4a25      	ldr	r2, [pc, #148]	; (80044f8 <HAL_ETH_TransmitFrame+0x1d0>)
 8004462:	fb02 f203 	mul.w	r2, r2, r3
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	4413      	add	r3, r2
 800446a:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800446e:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004474:	68fa      	ldr	r2, [r7, #12]
 8004476:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800447a:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
<<<<<<< Updated upstream
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800447c:	681a      	ldr	r2, [r3, #0]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004482:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004486:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800448c:	68db      	ldr	r3, [r3, #12]
 800448e:	461a      	mov	r2, r3
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	3301      	adds	r3, #1
 8004498:	613b      	str	r3, [r7, #16]
 800449a:	693a      	ldr	r2, [r7, #16]
 800449c:	697b      	ldr	r3, [r7, #20]
 800449e:	429a      	cmp	r2, r3
 80044a0:	d3b6      	bcc.n	8004410 <HAL_ETH_TransmitFrame+0xec>
=======
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004480:	681a      	ldr	r2, [r3, #0]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004486:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800448a:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004490:	68db      	ldr	r3, [r3, #12]
 8004492:	461a      	mov	r2, r3
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 8004498:	693b      	ldr	r3, [r7, #16]
 800449a:	3301      	adds	r3, #1
 800449c:	613b      	str	r3, [r7, #16]
 800449e:	693a      	ldr	r2, [r7, #16]
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	429a      	cmp	r2, r3
 80044a4:	d3b6      	bcc.n	8004414 <HAL_ETH_TransmitFrame+0xec>
>>>>>>> Stashed changes
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
<<<<<<< Updated upstream
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044aa:	3314      	adds	r3, #20
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f003 0304 	and.w	r3, r3, #4
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d00d      	beq.n	80044d2 <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044be:	3314      	adds	r3, #20
 80044c0:	2204      	movs	r2, #4
 80044c2:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044cc:	3304      	adds	r3, #4
 80044ce:	2200      	movs	r2, #0
 80044d0:	601a      	str	r2, [r3, #0]
=======
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044ae:	3314      	adds	r3, #20
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f003 0304 	and.w	r3, r3, #4
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d00d      	beq.n	80044d6 <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044c2:	3314      	adds	r3, #20
 80044c4:	2204      	movs	r2, #4
 80044c6:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044d0:	3304      	adds	r3, #4
 80044d2:	2200      	movs	r2, #0
 80044d4:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
<<<<<<< Updated upstream
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2201      	movs	r2, #1
 80044d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2200      	movs	r2, #0
 80044de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80044e2:	2300      	movs	r3, #0
}
 80044e4:	4618      	mov	r0, r3
 80044e6:	371c      	adds	r7, #28
 80044e8:	46bd      	mov	sp, r7
 80044ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ee:	4770      	bx	lr
 80044f0:	ac02b00b 	.word	0xac02b00b
 80044f4:	fffffa0c 	.word	0xfffffa0c

080044f8 <HAL_ETH_ReadPHYRegister>:
=======
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2201      	movs	r2, #1
 80044da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2200      	movs	r2, #0
 80044e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80044e6:	2300      	movs	r3, #0
}
 80044e8:	4618      	mov	r0, r3
 80044ea:	371c      	adds	r7, #28
 80044ec:	46bd      	mov	sp, r7
 80044ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f2:	4770      	bx	lr
 80044f4:	ac02b00b 	.word	0xac02b00b
 80044f8:	fffffa0c 	.word	0xfffffa0c

080044fc <HAL_ETH_ReadPHYRegister>:
>>>>>>> Stashed changes
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
<<<<<<< Updated upstream
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b086      	sub	sp, #24
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	60f8      	str	r0, [r7, #12]
 8004500:	460b      	mov	r3, r1
 8004502:	607a      	str	r2, [r7, #4]
 8004504:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 8004506:	2300      	movs	r3, #0
 8004508:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 800450a:	2300      	movs	r3, #0
 800450c:	613b      	str	r3, [r7, #16]
=======
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b086      	sub	sp, #24
 8004500:	af00      	add	r7, sp, #0
 8004502:	60f8      	str	r0, [r7, #12]
 8004504:	460b      	mov	r3, r1
 8004506:	607a      	str	r2, [r7, #4]
 8004508:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 800450a:	2300      	movs	r3, #0
 800450c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 800450e:	2300      	movs	r3, #0
 8004510:	613b      	str	r3, [r7, #16]
>>>>>>> Stashed changes
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
<<<<<<< Updated upstream
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004514:	b2db      	uxtb	r3, r3
 8004516:	2b82      	cmp	r3, #130	; 0x82
 8004518:	d101      	bne.n	800451e <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 800451a:	2302      	movs	r3, #2
 800451c:	e050      	b.n	80045c0 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	2282      	movs	r2, #130	; 0x82
 8004522:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	691b      	ldr	r3, [r3, #16]
 800452c:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	f003 031c 	and.w	r3, r3, #28
 8004534:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	8a1b      	ldrh	r3, [r3, #16]
 800453a:	02db      	lsls	r3, r3, #11
 800453c:	b29b      	uxth	r3, r3
 800453e:	697a      	ldr	r2, [r7, #20]
 8004540:	4313      	orrs	r3, r2
 8004542:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8004544:	897b      	ldrh	r3, [r7, #10]
 8004546:	019b      	lsls	r3, r3, #6
 8004548:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800454c:	697a      	ldr	r2, [r7, #20]
 800454e:	4313      	orrs	r3, r2
 8004550:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8004552:	697b      	ldr	r3, [r7, #20]
 8004554:	f023 0302 	bic.w	r3, r3, #2
 8004558:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 800455a:	697b      	ldr	r3, [r7, #20]
 800455c:	f043 0301 	orr.w	r3, r3, #1
 8004560:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	697a      	ldr	r2, [r7, #20]
 8004568:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800456a:	f7fd fd9f 	bl	80020ac <HAL_GetTick>
 800456e:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004570:	e015      	b.n	800459e <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8004572:	f7fd fd9b 	bl	80020ac <HAL_GetTick>
 8004576:	4602      	mov	r2, r0
 8004578:	693b      	ldr	r3, [r7, #16]
 800457a:	1ad3      	subs	r3, r2, r3
 800457c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004580:	d309      	bcc.n	8004596 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	2201      	movs	r2, #1
 8004586:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	2200      	movs	r2, #0
 800458e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8004592:	2303      	movs	r3, #3
 8004594:	e014      	b.n	80045c0 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	691b      	ldr	r3, [r3, #16]
 800459c:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	f003 0301 	and.w	r3, r3, #1
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d1e4      	bne.n	8004572 <HAL_ETH_ReadPHYRegister+0x7a>
=======
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004518:	b2db      	uxtb	r3, r3
 800451a:	2b82      	cmp	r3, #130	; 0x82
 800451c:	d101      	bne.n	8004522 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 800451e:	2302      	movs	r3, #2
 8004520:	e050      	b.n	80045c4 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	2282      	movs	r2, #130	; 0x82
 8004526:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	691b      	ldr	r3, [r3, #16]
 8004530:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8004532:	697b      	ldr	r3, [r7, #20]
 8004534:	f003 031c 	and.w	r3, r3, #28
 8004538:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	8a1b      	ldrh	r3, [r3, #16]
 800453e:	02db      	lsls	r3, r3, #11
 8004540:	b29b      	uxth	r3, r3
 8004542:	697a      	ldr	r2, [r7, #20]
 8004544:	4313      	orrs	r3, r2
 8004546:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8004548:	897b      	ldrh	r3, [r7, #10]
 800454a:	019b      	lsls	r3, r3, #6
 800454c:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8004550:	697a      	ldr	r2, [r7, #20]
 8004552:	4313      	orrs	r3, r2
 8004554:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	f023 0302 	bic.w	r3, r3, #2
 800455c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	f043 0301 	orr.w	r3, r3, #1
 8004564:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	697a      	ldr	r2, [r7, #20]
 800456c:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800456e:	f7fd fd9f 	bl	80020b0 <HAL_GetTick>
 8004572:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004574:	e015      	b.n	80045a2 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8004576:	f7fd fd9b 	bl	80020b0 <HAL_GetTick>
 800457a:	4602      	mov	r2, r0
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	1ad3      	subs	r3, r2, r3
 8004580:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004584:	d309      	bcc.n	800459a <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2201      	movs	r2, #1
 800458a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	2200      	movs	r2, #0
 8004592:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8004596:	2303      	movs	r3, #3
 8004598:	e014      	b.n	80045c4 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	691b      	ldr	r3, [r3, #16]
 80045a0:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	f003 0301 	and.w	r3, r3, #1
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d1e4      	bne.n	8004576 <HAL_ETH_ReadPHYRegister+0x7a>
>>>>>>> Stashed changes
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
<<<<<<< Updated upstream
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	695b      	ldr	r3, [r3, #20]
 80045ae:	b29b      	uxth	r3, r3
 80045b0:	461a      	mov	r2, r3
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	2201      	movs	r2, #1
 80045ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80045be:	2300      	movs	r3, #0
}
 80045c0:	4618      	mov	r0, r3
 80045c2:	3718      	adds	r7, #24
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bd80      	pop	{r7, pc}

080045c8 <HAL_ETH_WritePHYRegister>:
=======
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	695b      	ldr	r3, [r3, #20]
 80045b2:	b29b      	uxth	r3, r3
 80045b4:	461a      	mov	r2, r3
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	2201      	movs	r2, #1
 80045be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80045c2:	2300      	movs	r3, #0
}
 80045c4:	4618      	mov	r0, r3
 80045c6:	3718      	adds	r7, #24
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bd80      	pop	{r7, pc}

080045cc <HAL_ETH_WritePHYRegister>:
>>>>>>> Stashed changes
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
<<<<<<< Updated upstream
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b086      	sub	sp, #24
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	60f8      	str	r0, [r7, #12]
 80045d0:	460b      	mov	r3, r1
 80045d2:	607a      	str	r2, [r7, #4]
 80045d4:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 80045d6:	2300      	movs	r3, #0
 80045d8:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80045da:	2300      	movs	r3, #0
 80045dc:	613b      	str	r3, [r7, #16]
=======
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b086      	sub	sp, #24
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	60f8      	str	r0, [r7, #12]
 80045d4:	460b      	mov	r3, r1
 80045d6:	607a      	str	r2, [r7, #4]
 80045d8:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 80045da:	2300      	movs	r3, #0
 80045dc:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80045de:	2300      	movs	r3, #0
 80045e0:	613b      	str	r3, [r7, #16]
>>>>>>> Stashed changes
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
<<<<<<< Updated upstream
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80045e4:	b2db      	uxtb	r3, r3
 80045e6:	2b42      	cmp	r3, #66	; 0x42
 80045e8:	d101      	bne.n	80045ee <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 80045ea:	2302      	movs	r3, #2
 80045ec:	e04e      	b.n	800468c <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	2242      	movs	r2, #66	; 0x42
 80045f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	691b      	ldr	r3, [r3, #16]
 80045fc:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	f003 031c 	and.w	r3, r3, #28
 8004604:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	8a1b      	ldrh	r3, [r3, #16]
 800460a:	02db      	lsls	r3, r3, #11
 800460c:	b29b      	uxth	r3, r3
 800460e:	697a      	ldr	r2, [r7, #20]
 8004610:	4313      	orrs	r3, r2
 8004612:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8004614:	897b      	ldrh	r3, [r7, #10]
 8004616:	019b      	lsls	r3, r3, #6
 8004618:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800461c:	697a      	ldr	r2, [r7, #20]
 800461e:	4313      	orrs	r3, r2
 8004620:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	f043 0302 	orr.w	r3, r3, #2
 8004628:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	f043 0301 	orr.w	r3, r3, #1
 8004630:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	b29a      	uxth	r2, r3
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	697a      	ldr	r2, [r7, #20]
 8004642:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8004644:	f7fd fd32 	bl	80020ac <HAL_GetTick>
 8004648:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800464a:	e015      	b.n	8004678 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 800464c:	f7fd fd2e 	bl	80020ac <HAL_GetTick>
 8004650:	4602      	mov	r2, r0
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	1ad3      	subs	r3, r2, r3
 8004656:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800465a:	d309      	bcc.n	8004670 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	2201      	movs	r2, #1
 8004660:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	2200      	movs	r2, #0
 8004668:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 800466c:	2303      	movs	r3, #3
 800466e:	e00d      	b.n	800468c <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	691b      	ldr	r3, [r3, #16]
 8004676:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	f003 0301 	and.w	r3, r3, #1
 800467e:	2b00      	cmp	r3, #0
 8004680:	d1e4      	bne.n	800464c <HAL_ETH_WritePHYRegister+0x84>
=======
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80045e8:	b2db      	uxtb	r3, r3
 80045ea:	2b42      	cmp	r3, #66	; 0x42
 80045ec:	d101      	bne.n	80045f2 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 80045ee:	2302      	movs	r3, #2
 80045f0:	e04e      	b.n	8004690 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	2242      	movs	r2, #66	; 0x42
 80045f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	691b      	ldr	r3, [r3, #16]
 8004600:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8004602:	697b      	ldr	r3, [r7, #20]
 8004604:	f003 031c 	and.w	r3, r3, #28
 8004608:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	8a1b      	ldrh	r3, [r3, #16]
 800460e:	02db      	lsls	r3, r3, #11
 8004610:	b29b      	uxth	r3, r3
 8004612:	697a      	ldr	r2, [r7, #20]
 8004614:	4313      	orrs	r3, r2
 8004616:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8004618:	897b      	ldrh	r3, [r7, #10]
 800461a:	019b      	lsls	r3, r3, #6
 800461c:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8004620:	697a      	ldr	r2, [r7, #20]
 8004622:	4313      	orrs	r3, r2
 8004624:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8004626:	697b      	ldr	r3, [r7, #20]
 8004628:	f043 0302 	orr.w	r3, r3, #2
 800462c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	f043 0301 	orr.w	r3, r3, #1
 8004634:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	b29a      	uxth	r2, r3
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	697a      	ldr	r2, [r7, #20]
 8004646:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8004648:	f7fd fd32 	bl	80020b0 <HAL_GetTick>
 800464c:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800464e:	e015      	b.n	800467c <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8004650:	f7fd fd2e 	bl	80020b0 <HAL_GetTick>
 8004654:	4602      	mov	r2, r0
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	1ad3      	subs	r3, r2, r3
 800465a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800465e:	d309      	bcc.n	8004674 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	2201      	movs	r2, #1
 8004664:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	2200      	movs	r2, #0
 800466c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8004670:	2303      	movs	r3, #3
 8004672:	e00d      	b.n	8004690 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	691b      	ldr	r3, [r3, #16]
 800467a:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800467c:	697b      	ldr	r3, [r7, #20]
 800467e:	f003 0301 	and.w	r3, r3, #1
 8004682:	2b00      	cmp	r3, #0
 8004684:	d1e4      	bne.n	8004650 <HAL_ETH_WritePHYRegister+0x84>
>>>>>>> Stashed changes
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
<<<<<<< Updated upstream
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	2201      	movs	r2, #1
 8004686:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 800468a:	2300      	movs	r3, #0
}
 800468c:	4618      	mov	r0, r3
 800468e:	3718      	adds	r7, #24
 8004690:	46bd      	mov	sp, r7
 8004692:	bd80      	pop	{r7, pc}

08004694 <HAL_ETH_Start>:
=======
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	2201      	movs	r2, #1
 800468a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 800468e:	2300      	movs	r3, #0
}
 8004690:	4618      	mov	r0, r3
 8004692:	3718      	adds	r7, #24
 8004694:	46bd      	mov	sp, r7
 8004696:	bd80      	pop	{r7, pc}

08004698 <HAL_ETH_Start>:
>>>>>>> Stashed changes
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
<<<<<<< Updated upstream
 8004694:	b580      	push	{r7, lr}
 8004696:	b082      	sub	sp, #8
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80046a2:	2b01      	cmp	r3, #1
 80046a4:	d101      	bne.n	80046aa <HAL_ETH_Start+0x16>
 80046a6:	2302      	movs	r3, #2
 80046a8:	e01f      	b.n	80046ea <HAL_ETH_Start+0x56>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2201      	movs	r2, #1
 80046ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2202      	movs	r2, #2
 80046b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 80046ba:	6878      	ldr	r0, [r7, #4]
 80046bc:	f000 fb44 	bl	8004d48 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 80046c0:	6878      	ldr	r0, [r7, #4]
 80046c2:	f000 fb7b 	bl	8004dbc <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 80046c6:	6878      	ldr	r0, [r7, #4]
 80046c8:	f000 fc12 	bl	8004ef0 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 80046cc:	6878      	ldr	r0, [r7, #4]
 80046ce:	f000 fbaf 	bl	8004e30 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 80046d2:	6878      	ldr	r0, [r7, #4]
 80046d4:	f000 fbdc 	bl	8004e90 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2201      	movs	r2, #1
 80046dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2200      	movs	r2, #0
 80046e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80046e8:	2300      	movs	r3, #0
}
 80046ea:	4618      	mov	r0, r3
 80046ec:	3708      	adds	r7, #8
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bd80      	pop	{r7, pc}

080046f2 <HAL_ETH_Stop>:
=======
 8004698:	b580      	push	{r7, lr}
 800469a:	b082      	sub	sp, #8
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80046a6:	2b01      	cmp	r3, #1
 80046a8:	d101      	bne.n	80046ae <HAL_ETH_Start+0x16>
 80046aa:	2302      	movs	r3, #2
 80046ac:	e01f      	b.n	80046ee <HAL_ETH_Start+0x56>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2201      	movs	r2, #1
 80046b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2202      	movs	r2, #2
 80046ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 80046be:	6878      	ldr	r0, [r7, #4]
 80046c0:	f000 fb44 	bl	8004d4c <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 80046c4:	6878      	ldr	r0, [r7, #4]
 80046c6:	f000 fb7b 	bl	8004dc0 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 80046ca:	6878      	ldr	r0, [r7, #4]
 80046cc:	f000 fc12 	bl	8004ef4 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 80046d0:	6878      	ldr	r0, [r7, #4]
 80046d2:	f000 fbaf 	bl	8004e34 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 80046d6:	6878      	ldr	r0, [r7, #4]
 80046d8:	f000 fbdc 	bl	8004e94 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2201      	movs	r2, #1
 80046e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2200      	movs	r2, #0
 80046e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80046ec:	2300      	movs	r3, #0
}
 80046ee:	4618      	mov	r0, r3
 80046f0:	3708      	adds	r7, #8
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}

080046f6 <HAL_ETH_Stop>:
>>>>>>> Stashed changes
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
<<<<<<< Updated upstream
 80046f2:	b580      	push	{r7, lr}
 80046f4:	b082      	sub	sp, #8
 80046f6:	af00      	add	r7, sp, #0
 80046f8:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004700:	2b01      	cmp	r3, #1
 8004702:	d101      	bne.n	8004708 <HAL_ETH_Stop+0x16>
 8004704:	2302      	movs	r3, #2
 8004706:	e01f      	b.n	8004748 <HAL_ETH_Stop+0x56>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2201      	movs	r2, #1
 800470c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2202      	movs	r2, #2
 8004714:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8004718:	6878      	ldr	r0, [r7, #4]
 800471a:	f000 fba1 	bl	8004e60 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 800471e:	6878      	ldr	r0, [r7, #4]
 8004720:	f000 fbce 	bl	8004ec0 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8004724:	6878      	ldr	r0, [r7, #4]
 8004726:	f000 fb66 	bl	8004df6 <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	f000 fbe0 	bl	8004ef0 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8004730:	6878      	ldr	r0, [r7, #4]
 8004732:	f000 fb26 	bl	8004d82 <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2201      	movs	r2, #1
 800473a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2200      	movs	r2, #0
 8004742:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8004746:	2300      	movs	r3, #0
}
 8004748:	4618      	mov	r0, r3
 800474a:	3708      	adds	r7, #8
 800474c:	46bd      	mov	sp, r7
 800474e:	bd80      	pop	{r7, pc}

08004750 <HAL_ETH_ConfigMAC>:
=======
 80046f6:	b580      	push	{r7, lr}
 80046f8:	b082      	sub	sp, #8
 80046fa:	af00      	add	r7, sp, #0
 80046fc:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004704:	2b01      	cmp	r3, #1
 8004706:	d101      	bne.n	800470c <HAL_ETH_Stop+0x16>
 8004708:	2302      	movs	r3, #2
 800470a:	e01f      	b.n	800474c <HAL_ETH_Stop+0x56>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2201      	movs	r2, #1
 8004710:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2202      	movs	r2, #2
 8004718:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 800471c:	6878      	ldr	r0, [r7, #4]
 800471e:	f000 fba1 	bl	8004e64 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8004722:	6878      	ldr	r0, [r7, #4]
 8004724:	f000 fbce 	bl	8004ec4 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8004728:	6878      	ldr	r0, [r7, #4]
 800472a:	f000 fb66 	bl	8004dfa <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 800472e:	6878      	ldr	r0, [r7, #4]
 8004730:	f000 fbe0 	bl	8004ef4 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8004734:	6878      	ldr	r0, [r7, #4]
 8004736:	f000 fb26 	bl	8004d86 <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2201      	movs	r2, #1
 800473e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2200      	movs	r2, #0
 8004746:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800474a:	2300      	movs	r3, #0
}
 800474c:	4618      	mov	r0, r3
 800474e:	3708      	adds	r7, #8
 8004750:	46bd      	mov	sp, r7
 8004752:	bd80      	pop	{r7, pc}

08004754 <HAL_ETH_ConfigMAC>:
>>>>>>> Stashed changes
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
<<<<<<< Updated upstream
 8004750:	b580      	push	{r7, lr}
 8004752:	b084      	sub	sp, #16
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
 8004758:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 800475a:	2300      	movs	r3, #0
 800475c:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004764:	2b01      	cmp	r3, #1
 8004766:	d101      	bne.n	800476c <HAL_ETH_ConfigMAC+0x1c>
 8004768:	2302      	movs	r3, #2
 800476a:	e0e4      	b.n	8004936 <HAL_ETH_ConfigMAC+0x1e6>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2201      	movs	r2, #1
 8004770:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2202      	movs	r2, #2
 8004778:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
=======
 8004754:	b580      	push	{r7, lr}
 8004756:	b084      	sub	sp, #16
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
 800475c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 800475e:	2300      	movs	r3, #0
 8004760:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004768:	2b01      	cmp	r3, #1
 800476a:	d101      	bne.n	8004770 <HAL_ETH_ConfigMAC+0x1c>
 800476c:	2302      	movs	r3, #2
 800476e:	e0e4      	b.n	800493a <HAL_ETH_ConfigMAC+0x1e6>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2201      	movs	r2, #1
 8004774:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2202      	movs	r2, #2
 800477c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
>>>>>>> Stashed changes
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
<<<<<<< Updated upstream
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	2b00      	cmp	r3, #0
 8004780:	f000 80b1 	beq.w	80048e6 <HAL_ETH_ConfigMAC+0x196>
=======
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	2b00      	cmp	r3, #0
 8004784:	f000 80b1 	beq.w	80048ea <HAL_ETH_ConfigMAC+0x196>
>>>>>>> Stashed changes
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
<<<<<<< Updated upstream
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800478c:	68fa      	ldr	r2, [r7, #12]
 800478e:	4b6c      	ldr	r3, [pc, #432]	; (8004940 <HAL_ETH_ConfigMAC+0x1f0>)
 8004790:	4013      	ands	r3, r2
 8004792:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 800479c:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 80047a2:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 80047a8:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 80047ae:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 80047b4:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 80047ba:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 80047c0:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 80047c6:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 80047cc:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 80047d2:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 80047d8:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 80047de:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 80047e0:	68fa      	ldr	r2, [r7, #12]
 80047e2:	4313      	orrs	r3, r2
 80047e4:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	68fa      	ldr	r2, [r7, #12]
 80047ec:	601a      	str	r2, [r3, #0]
=======
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8004790:	68fa      	ldr	r2, [r7, #12]
 8004792:	4b6c      	ldr	r3, [pc, #432]	; (8004944 <HAL_ETH_ConfigMAC+0x1f0>)
 8004794:	4013      	ands	r3, r2
 8004796:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 80047a0:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 80047a6:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 80047ac:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 80047b2:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 80047b8:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 80047be:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 80047c4:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 80047ca:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 80047d0:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 80047d6:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 80047dc:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 80047e2:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 80047e4:	68fa      	ldr	r2, [r7, #12]
 80047e6:	4313      	orrs	r3, r2
 80047e8:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	68fa      	ldr	r2, [r7, #12]
 80047f0:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
<<<<<<< Updated upstream
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80047f6:	2001      	movs	r0, #1
 80047f8:	f7fd fc64 	bl	80020c4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1; 
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	68fa      	ldr	r2, [r7, #12]
 8004802:	601a      	str	r2, [r3, #0]
=======
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80047fa:	2001      	movs	r0, #1
 80047fc:	f7fd fc64 	bl	80020c8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1; 
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	68fa      	ldr	r2, [r7, #12]
 8004806:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
<<<<<<< Updated upstream
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800480c:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 8004812:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8004818:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 800481e:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8004824:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 800482a:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8004836:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8004838:	605a      	str	r2, [r3, #4]
=======
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8004810:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 8004816:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 800481c:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 8004822:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8004828:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 800482e:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 800483a:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800483c:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFFR;
<<<<<<< Updated upstream
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8004842:	2001      	movs	r0, #1
 8004844:	f7fd fc3e 	bl	80020c4 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg1;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	68fa      	ldr	r2, [r7, #12]
 800484e:	605a      	str	r2, [r3, #4]
=======
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8004846:	2001      	movs	r0, #1
 8004848:	f7fd fc3e 	bl	80020c8 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg1;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	68fa      	ldr	r2, [r7, #12]
 8004852:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
<<<<<<< Updated upstream
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	683a      	ldr	r2, [r7, #0]
 8004856:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004858:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	683a      	ldr	r2, [r7, #0]
 8004860:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004862:	60da      	str	r2, [r3, #12]
=======
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	683a      	ldr	r2, [r7, #0]
 800485a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800485c:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	683a      	ldr	r2, [r7, #0]
 8004864:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004866:	60da      	str	r2, [r3, #12]
>>>>>>> Stashed changes
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg1 = (heth->Instance)->MACFCR;
<<<<<<< Updated upstream
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	699b      	ldr	r3, [r3, #24]
 800486a:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800486c:	68fa      	ldr	r2, [r7, #12]
 800486e:	f64f 7341 	movw	r3, #65345	; 0xff41
 8004872:	4013      	ands	r3, r2
 8004874:	60fb      	str	r3, [r7, #12]
     
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800487a:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8004880:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 8004886:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 800488c:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 8004892:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8004898:	4313      	orrs	r3, r2
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 800489a:	68fa      	ldr	r2, [r7, #12]
 800489c:	4313      	orrs	r3, r2
 800489e:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	68fa      	ldr	r2, [r7, #12]
 80048a6:	619a      	str	r2, [r3, #24]
=======
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	699b      	ldr	r3, [r3, #24]
 800486e:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8004870:	68fa      	ldr	r2, [r7, #12]
 8004872:	f64f 7341 	movw	r3, #65345	; 0xff41
 8004876:	4013      	ands	r3, r2
 8004878:	60fb      	str	r3, [r7, #12]
     
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800487e:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8004884:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 800488a:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8004890:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 8004896:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 800489c:	4313      	orrs	r3, r2
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 800489e:	68fa      	ldr	r2, [r7, #12]
 80048a0:	4313      	orrs	r3, r2
 80048a2:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	68fa      	ldr	r2, [r7, #12]
 80048aa:	619a      	str	r2, [r3, #24]
>>>>>>> Stashed changes
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFCR;
<<<<<<< Updated upstream
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	699b      	ldr	r3, [r3, #24]
 80048ae:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80048b0:	2001      	movs	r0, #1
 80048b2:	f7fd fc07 	bl	80020c4 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg1;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	68fa      	ldr	r2, [r7, #12]
 80048bc:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	430a      	orrs	r2, r1
 80048cc:	61da      	str	r2, [r3, #28]
=======
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	699b      	ldr	r3, [r3, #24]
 80048b2:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80048b4:	2001      	movs	r0, #1
 80048b6:	f7fd fc07 	bl	80020c8 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg1;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	68fa      	ldr	r2, [r7, #12]
 80048c0:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	430a      	orrs	r2, r1
 80048d0:	61da      	str	r2, [r3, #28]
>>>>>>> Stashed changes
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg1 = (heth->Instance)->MACVLANTR;
<<<<<<< Updated upstream
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	69db      	ldr	r3, [r3, #28]
 80048d4:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 80048d6:	2001      	movs	r0, #1
 80048d8:	f7fd fbf4 	bl	80020c4 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg1;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	68fa      	ldr	r2, [r7, #12]
 80048e2:	61da      	str	r2, [r3, #28]
 80048e4:	e01e      	b.n	8004924 <HAL_ETH_ConfigMAC+0x1d4>
=======
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	69db      	ldr	r3, [r3, #28]
 80048d8:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 80048da:	2001      	movs	r0, #1
 80048dc:	f7fd fbf4 	bl	80020c8 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg1;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	68fa      	ldr	r2, [r7, #12]
 80048e6:	61da      	str	r2, [r3, #28]
 80048e8:	e01e      	b.n	8004928 <HAL_ETH_ConfigMAC+0x1d4>
>>>>>>> Stashed changes
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
<<<<<<< Updated upstream
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80048f4:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	689a      	ldr	r2, [r3, #8]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	68db      	ldr	r3, [r3, #12]
 80048fe:	4313      	orrs	r3, r2
 8004900:	68fa      	ldr	r2, [r7, #12]
 8004902:	4313      	orrs	r3, r2
 8004904:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	68fa      	ldr	r2, [r7, #12]
 800490c:	601a      	str	r2, [r3, #0]
=======
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80048f8:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	689a      	ldr	r2, [r3, #8]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	68db      	ldr	r3, [r3, #12]
 8004902:	4313      	orrs	r3, r2
 8004904:	68fa      	ldr	r2, [r7, #12]
 8004906:	4313      	orrs	r3, r2
 8004908:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	68fa      	ldr	r2, [r7, #12]
 8004910:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
<<<<<<< Updated upstream
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8004916:	2001      	movs	r0, #1
 8004918:	f7fd fbd4 	bl	80020c4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	68fa      	ldr	r2, [r7, #12]
 8004922:	601a      	str	r2, [r3, #0]
=======
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800491a:	2001      	movs	r0, #1
 800491c:	f7fd fbd4 	bl	80020c8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	68fa      	ldr	r2, [r7, #12]
 8004926:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
<<<<<<< Updated upstream
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2201      	movs	r2, #1
 8004928:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2200      	movs	r2, #0
 8004930:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 8004934:	2300      	movs	r3, #0
}
 8004936:	4618      	mov	r0, r3
 8004938:	3710      	adds	r7, #16
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}
 800493e:	bf00      	nop
 8004940:	ff20810f 	.word	0xff20810f

08004944 <ETH_MACDMAConfig>:
=======
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2201      	movs	r2, #1
 800492c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2200      	movs	r2, #0
 8004934:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 8004938:	2300      	movs	r3, #0
}
 800493a:	4618      	mov	r0, r3
 800493c:	3710      	adds	r7, #16
 800493e:	46bd      	mov	sp, r7
 8004940:	bd80      	pop	{r7, pc}
 8004942:	bf00      	nop
 8004944:	ff20810f 	.word	0xff20810f

08004948 <ETH_MACDMAConfig>:
>>>>>>> Stashed changes
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
<<<<<<< Updated upstream
 8004944:	b580      	push	{r7, lr}
 8004946:	b0b0      	sub	sp, #192	; 0xc0
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
 800494c:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 800494e:	2300      	movs	r3, #0
 8004950:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d007      	beq.n	800496a <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004960:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004968:	609a      	str	r2, [r3, #8]
=======
 8004948:	b580      	push	{r7, lr}
 800494a:	b0b0      	sub	sp, #192	; 0xc0
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
 8004950:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 8004952:	2300      	movs	r3, #0
 8004954:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d007      	beq.n	800496e <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004964:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800496c:	609a      	str	r2, [r3, #8]
>>>>>>> Stashed changes
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
<<<<<<< Updated upstream
 800496a:	2300      	movs	r3, #0
 800496c:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 800496e:	2300      	movs	r3, #0
 8004970:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8004972:	2300      	movs	r3, #0
 8004974:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8004976:	2300      	movs	r3, #0
 8004978:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 800497a:	2300      	movs	r3, #0
 800497c:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 800497e:	2300      	movs	r3, #0
 8004980:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	69db      	ldr	r3, [r3, #28]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d103      	bne.n	8004992 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 800498a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800498e:	663b      	str	r3, [r7, #96]	; 0x60
 8004990:	e001      	b.n	8004996 <ETH_MACDMAConfig+0x52>
=======
 800496e:	2300      	movs	r3, #0
 8004970:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8004972:	2300      	movs	r3, #0
 8004974:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8004976:	2300      	movs	r3, #0
 8004978:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 800497a:	2300      	movs	r3, #0
 800497c:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 800497e:	2300      	movs	r3, #0
 8004980:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8004982:	2300      	movs	r3, #0
 8004984:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	69db      	ldr	r3, [r3, #28]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d103      	bne.n	8004996 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 800498e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004992:	663b      	str	r3, [r7, #96]	; 0x60
 8004994:	e001      	b.n	800499a <ETH_MACDMAConfig+0x52>
>>>>>>> Stashed changes
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
<<<<<<< Updated upstream
 8004992:	2300      	movs	r3, #0
 8004994:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8004996:	f44f 7300 	mov.w	r3, #512	; 0x200
 800499a:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 800499c:	2300      	movs	r3, #0
 800499e:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80049a0:	2300      	movs	r3, #0
 80049a2:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 80049a4:	2300      	movs	r3, #0
 80049a6:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 80049a8:	2300      	movs	r3, #0
 80049aa:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 80049ac:	2300      	movs	r3, #0
 80049ae:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 80049b0:	2340      	movs	r3, #64	; 0x40
 80049b2:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 80049b4:	2300      	movs	r3, #0
 80049b6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 80049ba:	2300      	movs	r3, #0
 80049bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 80049c0:	2300      	movs	r3, #0
 80049c2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 80049c6:	2300      	movs	r3, #0
 80049c8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 80049cc:	2300      	movs	r3, #0
 80049ce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 80049d2:	2300      	movs	r3, #0
 80049d4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 80049d8:	2300      	movs	r3, #0
 80049da:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 80049de:	2300      	movs	r3, #0
 80049e0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 80049e4:	2380      	movs	r3, #128	; 0x80
 80049e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80049ea:	2300      	movs	r3, #0
 80049ec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 80049f0:	2300      	movs	r3, #0
 80049f2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 80049f6:	2300      	movs	r3, #0
 80049f8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 80049fc:	2300      	movs	r3, #0
 80049fe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8004a02:	2300      	movs	r3, #0
 8004a04:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8004a08:	2300      	movs	r3, #0
 8004a0a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
=======
 8004996:	2300      	movs	r3, #0
 8004998:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 800499a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800499e:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 80049a0:	2300      	movs	r3, #0
 80049a2:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80049a4:	2300      	movs	r3, #0
 80049a6:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 80049a8:	2300      	movs	r3, #0
 80049aa:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 80049ac:	2300      	movs	r3, #0
 80049ae:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 80049b0:	2300      	movs	r3, #0
 80049b2:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 80049b4:	2340      	movs	r3, #64	; 0x40
 80049b6:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 80049b8:	2300      	movs	r3, #0
 80049ba:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 80049be:	2300      	movs	r3, #0
 80049c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 80049c4:	2300      	movs	r3, #0
 80049c6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 80049ca:	2300      	movs	r3, #0
 80049cc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 80049d0:	2300      	movs	r3, #0
 80049d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 80049d6:	2300      	movs	r3, #0
 80049d8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 80049dc:	2300      	movs	r3, #0
 80049de:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 80049e2:	2300      	movs	r3, #0
 80049e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 80049e8:	2380      	movs	r3, #128	; 0x80
 80049ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80049ee:	2300      	movs	r3, #0
 80049f0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 80049f4:	2300      	movs	r3, #0
 80049f6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 80049fa:	2300      	movs	r3, #0
 80049fc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8004a00:	2300      	movs	r3, #0
 8004a02:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8004a06:	2300      	movs	r3, #0
 8004a08:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
>>>>>>> Stashed changes
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
<<<<<<< Updated upstream
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8004a18:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004a1c:	4bac      	ldr	r3, [pc, #688]	; (8004cd0 <ETH_MACDMAConfig+0x38c>)
 8004a1e:	4013      	ands	r3, r2
 8004a20:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
=======
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8004a1c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004a20:	4bac      	ldr	r3, [pc, #688]	; (8004cd4 <ETH_MACDMAConfig+0x38c>)
 8004a22:	4013      	ands	r3, r2
 8004a24:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
>>>>>>> Stashed changes
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
<<<<<<< Updated upstream
 8004a24:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8004a26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8004a28:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8004a2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8004a2c:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8004a2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8004a30:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8004a36:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8004a38:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8004a3a:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8004a3c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8004a3e:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8004a44:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8004a46:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8004a48:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8004a4a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8004a4c:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8004a4e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8004a50:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8004a52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8004a54:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8004a56:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8004a58:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8004a5a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004a5e:	4313      	orrs	r3, r2
 8004a60:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004a6c:	601a      	str	r2, [r3, #0]
=======
 8004a28:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8004a2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8004a2c:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8004a2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8004a30:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8004a32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8004a34:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8004a3a:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8004a3c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8004a3e:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8004a40:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8004a42:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8004a48:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8004a4a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8004a4c:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8004a4e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8004a50:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8004a52:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8004a54:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8004a56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8004a58:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8004a5a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8004a5c:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8004a5e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004a62:	4313      	orrs	r3, r2
 8004a64:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004a70:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
<<<<<<< Updated upstream
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004a78:	2001      	movs	r0, #1
 8004a7a:	f7fd fb23 	bl	80020c4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004a86:	601a      	str	r2, [r3, #0]
=======
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004a7c:	2001      	movs	r0, #1
 8004a7e:	f7fd fb23 	bl	80020c8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004a8a:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
<<<<<<< Updated upstream
 8004a88:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8004a8a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8004a8c:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8004a8e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8004a90:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8004a92:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8004a96:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8004a98:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8004a9c:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8004a9e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8004aa2:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8004aa4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8004aa8:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8004aac:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8004ab4:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8004ab6:	605a      	str	r2, [r3, #4]
=======
 8004a8c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8004a8e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8004a90:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8004a92:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8004a94:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8004a96:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8004a9a:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8004a9c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8004aa0:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8004aa2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8004aa6:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8004aa8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8004aac:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8004ab0:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8004ab8:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8004aba:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
<<<<<<< Updated upstream
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8004ac2:	2001      	movs	r0, #1
 8004ac4:	f7fd fafe 	bl	80020c4 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004ad0:	605a      	str	r2, [r3, #4]
=======
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8004ac6:	2001      	movs	r0, #1
 8004ac8:	f7fd fafe 	bl	80020c8 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004ad4:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
<<<<<<< Updated upstream
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004ada:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8004ae4:	60da      	str	r2, [r3, #12]
=======
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004ade:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8004ae8:	60da      	str	r2, [r3, #12]
>>>>>>> Stashed changes
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
<<<<<<< Updated upstream
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	699b      	ldr	r3, [r3, #24]
 8004aec:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8004af0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004af4:	f64f 7341 	movw	r3, #65345	; 0xff41
 8004af8:	4013      	ands	r3, r2
 8004afa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
=======
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	699b      	ldr	r3, [r3, #24]
 8004af0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8004af4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004af8:	f64f 7341 	movw	r3, #65345	; 0xff41
 8004afc:	4013      	ands	r3, r2
 8004afe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
>>>>>>> Stashed changes
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
<<<<<<< Updated upstream
 8004afe:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004b02:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8004b04:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8004b08:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8004b0a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8004b0e:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8004b10:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8004b14:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8004b16:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8004b1a:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8004b1c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8004b20:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8004b22:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004b26:	4313      	orrs	r3, r2
 8004b28:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004b34:	619a      	str	r2, [r3, #24]
=======
 8004b02:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004b06:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8004b08:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8004b0c:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8004b0e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8004b12:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8004b14:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8004b18:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8004b1a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8004b1e:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8004b20:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8004b24:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8004b26:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004b38:	619a      	str	r2, [r3, #24]
>>>>>>> Stashed changes
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
<<<<<<< Updated upstream
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	699b      	ldr	r3, [r3, #24]
 8004b3c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8004b40:	2001      	movs	r0, #1
 8004b42:	f7fd fabf 	bl	80020c4 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004b4e:	619a      	str	r2, [r3, #24]
=======
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	699b      	ldr	r3, [r3, #24]
 8004b40:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8004b44:	2001      	movs	r0, #1
 8004b46:	f7fd fabf 	bl	80020c8 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004b52:	619a      	str	r2, [r3, #24]
>>>>>>> Stashed changes
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
<<<<<<< Updated upstream
 8004b50:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8004b54:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	430a      	orrs	r2, r1
 8004b5e:	61da      	str	r2, [r3, #28]
=======
 8004b54:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8004b58:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	430a      	orrs	r2, r1
 8004b62:	61da      	str	r2, [r3, #28]
>>>>>>> Stashed changes
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
<<<<<<< Updated upstream
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	69db      	ldr	r3, [r3, #28]
 8004b66:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8004b6a:	2001      	movs	r0, #1
 8004b6c:	f7fd faaa 	bl	80020c4 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004b78:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8004b7e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004b82:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8004b84:	2300      	movs	r3, #0
 8004b86:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8004b88:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004b8c:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8004b8e:	2300      	movs	r3, #0
 8004b90:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8004b92:	2300      	movs	r3, #0
 8004b94:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8004b96:	2300      	movs	r3, #0
 8004b98:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8004b9e:	2304      	movs	r3, #4
 8004ba0:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8004ba2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004ba6:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8004ba8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004bac:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8004bae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004bb2:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8004bb4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004bb8:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8004bba:	2380      	movs	r3, #128	; 0x80
 8004bbc:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004bce:	3318      	adds	r3, #24
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8004bd6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004bda:	4b3e      	ldr	r3, [pc, #248]	; (8004cd4 <ETH_MACDMAConfig+0x390>)
 8004bdc:	4013      	ands	r3, r2
 8004bde:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
=======
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	69db      	ldr	r3, [r3, #28]
 8004b6a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8004b6e:	2001      	movs	r0, #1
 8004b70:	f7fd faaa 	bl	80020c8 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004b7c:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8004b7e:	2300      	movs	r3, #0
 8004b80:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8004b82:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004b86:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8004b88:	2300      	movs	r3, #0
 8004b8a:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8004b8c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004b90:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8004b92:	2300      	movs	r3, #0
 8004b94:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8004b96:	2300      	movs	r3, #0
 8004b98:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8004ba2:	2304      	movs	r3, #4
 8004ba4:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8004ba6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004baa:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8004bac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004bb0:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8004bb2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004bb6:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8004bb8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004bbc:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8004bbe:	2380      	movs	r3, #128	; 0x80
 8004bc0:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004bd2:	3318      	adds	r3, #24
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8004bda:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004bde:	4b3e      	ldr	r3, [pc, #248]	; (8004cd8 <ETH_MACDMAConfig+0x390>)
 8004be0:	4013      	ands	r3, r2
 8004be2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
>>>>>>> Stashed changes
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
<<<<<<< Updated upstream
 8004be2:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8004be4:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8004be6:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8004be8:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8004bea:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8004bec:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8004bee:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8004bf0:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8004bf2:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8004bf4:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8004bf6:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8004bf8:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8004bfa:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8004bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8004bfe:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8004c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8004c02:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8004c04:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c16:	3318      	adds	r3, #24
 8004c18:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004c1c:	601a      	str	r2, [r3, #0]
=======
 8004be6:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8004be8:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8004bea:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8004bec:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8004bee:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8004bf0:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8004bf2:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8004bf4:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8004bf6:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8004bf8:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8004bfa:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8004bfc:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8004bfe:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8004c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8004c02:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8004c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8004c06:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8004c08:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c1a:	3318      	adds	r3, #24
 8004c1c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004c20:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
<<<<<<< Updated upstream
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c26:	3318      	adds	r3, #24
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8004c2e:	2001      	movs	r0, #1
 8004c30:	f7fd fa48 	bl	80020c4 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c3c:	3318      	adds	r3, #24
 8004c3e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004c42:	601a      	str	r2, [r3, #0]
=======
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c2a:	3318      	adds	r3, #24
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8004c32:	2001      	movs	r0, #1
 8004c34:	f7fd fa48 	bl	80020c8 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c40:	3318      	adds	r3, #24
 8004c42:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004c46:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
<<<<<<< Updated upstream
 8004c44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8004c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8004c48:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8004c4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8004c4c:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8004c4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8004c50:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8004c52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8004c54:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 8004c56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c58:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8004c5a:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8004c5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 8004c5e:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8004c68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c6c:	601a      	str	r2, [r3, #0]
=======
 8004c48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8004c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8004c4c:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8004c4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8004c50:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8004c52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8004c54:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8004c56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8004c58:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 8004c5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c5c:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8004c5e:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8004c60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 8004c62:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8004c6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c70:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
<<<<<<< Updated upstream
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8004c7c:	2001      	movs	r0, #1
 8004c7e:	f7fd fa21 	bl	80020c4 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c8a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004c8e:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	699b      	ldr	r3, [r3, #24]
 8004c94:	2b01      	cmp	r3, #1
 8004c96:	d10f      	bne.n	8004cb8 <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ca0:	331c      	adds	r3, #28
 8004ca2:	681a      	ldr	r2, [r3, #0]
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004cac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004cb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004cb4:	331c      	adds	r3, #28
 8004cb6:	601a      	str	r2, [r3, #0]
=======
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8004c80:	2001      	movs	r0, #1
 8004c82:	f7fd fa21 	bl	80020c8 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c8e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004c92:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	699b      	ldr	r3, [r3, #24]
 8004c98:	2b01      	cmp	r3, #1
 8004c9a:	d10f      	bne.n	8004cbc <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ca4:	331c      	adds	r3, #28
 8004ca6:	681a      	ldr	r2, [r3, #0]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004cb0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004cb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004cb8:	331c      	adds	r3, #28
 8004cba:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
<<<<<<< Updated upstream
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	695b      	ldr	r3, [r3, #20]
 8004cbc:	461a      	mov	r2, r3
 8004cbe:	2100      	movs	r1, #0
 8004cc0:	6878      	ldr	r0, [r7, #4]
 8004cc2:	f000 f809 	bl	8004cd8 <ETH_MACAddressConfig>
}
 8004cc6:	bf00      	nop
 8004cc8:	37c0      	adds	r7, #192	; 0xc0
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}
 8004cce:	bf00      	nop
 8004cd0:	ff20810f 	.word	0xff20810f
 8004cd4:	f8de3f23 	.word	0xf8de3f23

08004cd8 <ETH_MACAddressConfig>:
=======
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	695b      	ldr	r3, [r3, #20]
 8004cc0:	461a      	mov	r2, r3
 8004cc2:	2100      	movs	r1, #0
 8004cc4:	6878      	ldr	r0, [r7, #4]
 8004cc6:	f000 f809 	bl	8004cdc <ETH_MACAddressConfig>
}
 8004cca:	bf00      	nop
 8004ccc:	37c0      	adds	r7, #192	; 0xc0
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bd80      	pop	{r7, pc}
 8004cd2:	bf00      	nop
 8004cd4:	ff20810f 	.word	0xff20810f
 8004cd8:	f8de3f23 	.word	0xf8de3f23

08004cdc <ETH_MACAddressConfig>:
>>>>>>> Stashed changes
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
<<<<<<< Updated upstream
 8004cd8:	b480      	push	{r7}
 8004cda:	b087      	sub	sp, #28
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	60f8      	str	r0, [r7, #12]
 8004ce0:	60b9      	str	r1, [r7, #8]
 8004ce2:	607a      	str	r2, [r7, #4]
=======
 8004cdc:	b480      	push	{r7}
 8004cde:	b087      	sub	sp, #28
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	60f8      	str	r0, [r7, #12]
 8004ce4:	60b9      	str	r1, [r7, #8]
 8004ce6:	607a      	str	r2, [r7, #4]
>>>>>>> Stashed changes

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
<<<<<<< Updated upstream
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	3305      	adds	r3, #5
 8004ce8:	781b      	ldrb	r3, [r3, #0]
 8004cea:	021b      	lsls	r3, r3, #8
 8004cec:	687a      	ldr	r2, [r7, #4]
 8004cee:	3204      	adds	r2, #4
 8004cf0:	7812      	ldrb	r2, [r2, #0]
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8004cf6:	68ba      	ldr	r2, [r7, #8]
 8004cf8:	4b11      	ldr	r3, [pc, #68]	; (8004d40 <ETH_MACAddressConfig+0x68>)
 8004cfa:	4413      	add	r3, r2
 8004cfc:	461a      	mov	r2, r3
 8004cfe:	697b      	ldr	r3, [r7, #20]
 8004d00:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	3303      	adds	r3, #3
 8004d06:	781b      	ldrb	r3, [r3, #0]
 8004d08:	061a      	lsls	r2, r3, #24
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	3302      	adds	r3, #2
 8004d0e:	781b      	ldrb	r3, [r3, #0]
 8004d10:	041b      	lsls	r3, r3, #16
 8004d12:	431a      	orrs	r2, r3
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	3301      	adds	r3, #1
 8004d18:	781b      	ldrb	r3, [r3, #0]
 8004d1a:	021b      	lsls	r3, r3, #8
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	687a      	ldr	r2, [r7, #4]
 8004d20:	7812      	ldrb	r2, [r2, #0]
 8004d22:	4313      	orrs	r3, r2
 8004d24:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8004d26:	68ba      	ldr	r2, [r7, #8]
 8004d28:	4b06      	ldr	r3, [pc, #24]	; (8004d44 <ETH_MACAddressConfig+0x6c>)
 8004d2a:	4413      	add	r3, r2
 8004d2c:	461a      	mov	r2, r3
 8004d2e:	697b      	ldr	r3, [r7, #20]
 8004d30:	6013      	str	r3, [r2, #0]
}
 8004d32:	bf00      	nop
 8004d34:	371c      	adds	r7, #28
 8004d36:	46bd      	mov	sp, r7
 8004d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3c:	4770      	bx	lr
 8004d3e:	bf00      	nop
 8004d40:	40028040 	.word	0x40028040
 8004d44:	40028044 	.word	0x40028044

08004d48 <ETH_MACTransmissionEnable>:
=======
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	3305      	adds	r3, #5
 8004cec:	781b      	ldrb	r3, [r3, #0]
 8004cee:	021b      	lsls	r3, r3, #8
 8004cf0:	687a      	ldr	r2, [r7, #4]
 8004cf2:	3204      	adds	r2, #4
 8004cf4:	7812      	ldrb	r2, [r2, #0]
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8004cfa:	68ba      	ldr	r2, [r7, #8]
 8004cfc:	4b11      	ldr	r3, [pc, #68]	; (8004d44 <ETH_MACAddressConfig+0x68>)
 8004cfe:	4413      	add	r3, r2
 8004d00:	461a      	mov	r2, r3
 8004d02:	697b      	ldr	r3, [r7, #20]
 8004d04:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	3303      	adds	r3, #3
 8004d0a:	781b      	ldrb	r3, [r3, #0]
 8004d0c:	061a      	lsls	r2, r3, #24
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	3302      	adds	r3, #2
 8004d12:	781b      	ldrb	r3, [r3, #0]
 8004d14:	041b      	lsls	r3, r3, #16
 8004d16:	431a      	orrs	r2, r3
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	3301      	adds	r3, #1
 8004d1c:	781b      	ldrb	r3, [r3, #0]
 8004d1e:	021b      	lsls	r3, r3, #8
 8004d20:	4313      	orrs	r3, r2
 8004d22:	687a      	ldr	r2, [r7, #4]
 8004d24:	7812      	ldrb	r2, [r2, #0]
 8004d26:	4313      	orrs	r3, r2
 8004d28:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8004d2a:	68ba      	ldr	r2, [r7, #8]
 8004d2c:	4b06      	ldr	r3, [pc, #24]	; (8004d48 <ETH_MACAddressConfig+0x6c>)
 8004d2e:	4413      	add	r3, r2
 8004d30:	461a      	mov	r2, r3
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	6013      	str	r3, [r2, #0]
}
 8004d36:	bf00      	nop
 8004d38:	371c      	adds	r7, #28
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d40:	4770      	bx	lr
 8004d42:	bf00      	nop
 8004d44:	40028040 	.word	0x40028040
 8004d48:	40028044 	.word	0x40028044

08004d4c <ETH_MACTransmissionEnable>:
>>>>>>> Stashed changes
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
<<<<<<< Updated upstream
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b084      	sub	sp, #16
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8004d50:	2300      	movs	r3, #0
 8004d52:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	681a      	ldr	r2, [r3, #0]
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f042 0208 	orr.w	r2, r2, #8
 8004d62:	601a      	str	r2, [r3, #0]
=======
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b084      	sub	sp, #16
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8004d54:	2300      	movs	r3, #0
 8004d56:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	681a      	ldr	r2, [r3, #0]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f042 0208 	orr.w	r2, r2, #8
 8004d66:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
<<<<<<< Updated upstream
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8004d6c:	2001      	movs	r0, #1
 8004d6e:	f000 f8e9 	bl	8004f44 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	68fa      	ldr	r2, [r7, #12]
 8004d78:	601a      	str	r2, [r3, #0]
}
 8004d7a:	bf00      	nop
 8004d7c:	3710      	adds	r7, #16
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bd80      	pop	{r7, pc}

08004d82 <ETH_MACTransmissionDisable>:
=======
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8004d70:	2001      	movs	r0, #1
 8004d72:	f000 f8e9 	bl	8004f48 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	68fa      	ldr	r2, [r7, #12]
 8004d7c:	601a      	str	r2, [r3, #0]
}
 8004d7e:	bf00      	nop
 8004d80:	3710      	adds	r7, #16
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}

08004d86 <ETH_MACTransmissionDisable>:
>>>>>>> Stashed changes
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
<<<<<<< Updated upstream
 8004d82:	b580      	push	{r7, lr}
 8004d84:	b084      	sub	sp, #16
 8004d86:	af00      	add	r7, sp, #0
 8004d88:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	681a      	ldr	r2, [r3, #0]
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f022 0208 	bic.w	r2, r2, #8
 8004d9c:	601a      	str	r2, [r3, #0]
=======
 8004d86:	b580      	push	{r7, lr}
 8004d88:	b084      	sub	sp, #16
 8004d8a:	af00      	add	r7, sp, #0
 8004d8c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8004d8e:	2300      	movs	r3, #0
 8004d90:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	681a      	ldr	r2, [r3, #0]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f022 0208 	bic.w	r2, r2, #8
 8004da0:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
<<<<<<< Updated upstream
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8004da6:	2001      	movs	r0, #1
 8004da8:	f000 f8cc 	bl	8004f44 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	68fa      	ldr	r2, [r7, #12]
 8004db2:	601a      	str	r2, [r3, #0]
}
 8004db4:	bf00      	nop
 8004db6:	3710      	adds	r7, #16
 8004db8:	46bd      	mov	sp, r7
 8004dba:	bd80      	pop	{r7, pc}

08004dbc <ETH_MACReceptionEnable>:
=======
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8004daa:	2001      	movs	r0, #1
 8004dac:	f000 f8cc 	bl	8004f48 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	68fa      	ldr	r2, [r7, #12]
 8004db6:	601a      	str	r2, [r3, #0]
}
 8004db8:	bf00      	nop
 8004dba:	3710      	adds	r7, #16
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	bd80      	pop	{r7, pc}

08004dc0 <ETH_MACReceptionEnable>:
>>>>>>> Stashed changes
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
<<<<<<< Updated upstream
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b084      	sub	sp, #16
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	681a      	ldr	r2, [r3, #0]
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f042 0204 	orr.w	r2, r2, #4
 8004dd6:	601a      	str	r2, [r3, #0]
=======
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b084      	sub	sp, #16
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8004dc8:	2300      	movs	r3, #0
 8004dca:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	681a      	ldr	r2, [r3, #0]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f042 0204 	orr.w	r2, r2, #4
 8004dda:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
<<<<<<< Updated upstream
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8004de0:	2001      	movs	r0, #1
 8004de2:	f000 f8af 	bl	8004f44 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	68fa      	ldr	r2, [r7, #12]
 8004dec:	601a      	str	r2, [r3, #0]
}
 8004dee:	bf00      	nop
 8004df0:	3710      	adds	r7, #16
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bd80      	pop	{r7, pc}

08004df6 <ETH_MACReceptionDisable>:
=======
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8004de4:	2001      	movs	r0, #1
 8004de6:	f000 f8af 	bl	8004f48 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	68fa      	ldr	r2, [r7, #12]
 8004df0:	601a      	str	r2, [r3, #0]
}
 8004df2:	bf00      	nop
 8004df4:	3710      	adds	r7, #16
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bd80      	pop	{r7, pc}

08004dfa <ETH_MACReceptionDisable>:
>>>>>>> Stashed changes
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
<<<<<<< Updated upstream
 8004df6:	b580      	push	{r7, lr}
 8004df8:	b084      	sub	sp, #16
 8004dfa:	af00      	add	r7, sp, #0
 8004dfc:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8004dfe:	2300      	movs	r3, #0
 8004e00:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	681a      	ldr	r2, [r3, #0]
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f022 0204 	bic.w	r2, r2, #4
 8004e10:	601a      	str	r2, [r3, #0]
=======
 8004dfa:	b580      	push	{r7, lr}
 8004dfc:	b084      	sub	sp, #16
 8004dfe:	af00      	add	r7, sp, #0
 8004e00:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8004e02:	2300      	movs	r3, #0
 8004e04:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	681a      	ldr	r2, [r3, #0]
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f022 0204 	bic.w	r2, r2, #4
 8004e14:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
<<<<<<< Updated upstream
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8004e1a:	2001      	movs	r0, #1
 8004e1c:	f000 f892 	bl	8004f44 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	68fa      	ldr	r2, [r7, #12]
 8004e26:	601a      	str	r2, [r3, #0]
}
 8004e28:	bf00      	nop
 8004e2a:	3710      	adds	r7, #16
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	bd80      	pop	{r7, pc}

08004e30 <ETH_DMATransmissionEnable>:
=======
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8004e1e:	2001      	movs	r0, #1
 8004e20:	f000 f892 	bl	8004f48 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	68fa      	ldr	r2, [r7, #12]
 8004e2a:	601a      	str	r2, [r3, #0]
}
 8004e2c:	bf00      	nop
 8004e2e:	3710      	adds	r7, #16
 8004e30:	46bd      	mov	sp, r7
 8004e32:	bd80      	pop	{r7, pc}

08004e34 <ETH_DMATransmissionEnable>:
>>>>>>> Stashed changes
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
<<<<<<< Updated upstream
 8004e30:	b480      	push	{r7}
 8004e32:	b083      	sub	sp, #12
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e40:	3318      	adds	r3, #24
 8004e42:	681a      	ldr	r2, [r3, #0]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004e4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e50:	3318      	adds	r3, #24
 8004e52:	601a      	str	r2, [r3, #0]
}
 8004e54:	bf00      	nop
 8004e56:	370c      	adds	r7, #12
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5e:	4770      	bx	lr

08004e60 <ETH_DMATransmissionDisable>:
=======
 8004e34:	b480      	push	{r7}
 8004e36:	b083      	sub	sp, #12
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e44:	3318      	adds	r3, #24
 8004e46:	681a      	ldr	r2, [r3, #0]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004e50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e54:	3318      	adds	r3, #24
 8004e56:	601a      	str	r2, [r3, #0]
}
 8004e58:	bf00      	nop
 8004e5a:	370c      	adds	r7, #12
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e62:	4770      	bx	lr

08004e64 <ETH_DMATransmissionDisable>:
>>>>>>> Stashed changes
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
<<<<<<< Updated upstream
 8004e60:	b480      	push	{r7}
 8004e62:	b083      	sub	sp, #12
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e70:	3318      	adds	r3, #24
 8004e72:	681a      	ldr	r2, [r3, #0]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004e7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e80:	3318      	adds	r3, #24
 8004e82:	601a      	str	r2, [r3, #0]
}
 8004e84:	bf00      	nop
 8004e86:	370c      	adds	r7, #12
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8e:	4770      	bx	lr

08004e90 <ETH_DMAReceptionEnable>:
=======
 8004e64:	b480      	push	{r7}
 8004e66:	b083      	sub	sp, #12
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e74:	3318      	adds	r3, #24
 8004e76:	681a      	ldr	r2, [r3, #0]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004e80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e84:	3318      	adds	r3, #24
 8004e86:	601a      	str	r2, [r3, #0]
}
 8004e88:	bf00      	nop
 8004e8a:	370c      	adds	r7, #12
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e92:	4770      	bx	lr

08004e94 <ETH_DMAReceptionEnable>:
>>>>>>> Stashed changes
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
<<<<<<< Updated upstream
 8004e90:	b480      	push	{r7}
 8004e92:	b083      	sub	sp, #12
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ea0:	3318      	adds	r3, #24
 8004ea2:	681a      	ldr	r2, [r3, #0]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f042 0202 	orr.w	r2, r2, #2
 8004eac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004eb0:	3318      	adds	r3, #24
 8004eb2:	601a      	str	r2, [r3, #0]
}
 8004eb4:	bf00      	nop
 8004eb6:	370c      	adds	r7, #12
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebe:	4770      	bx	lr

08004ec0 <ETH_DMAReceptionDisable>:
=======
 8004e94:	b480      	push	{r7}
 8004e96:	b083      	sub	sp, #12
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ea4:	3318      	adds	r3, #24
 8004ea6:	681a      	ldr	r2, [r3, #0]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f042 0202 	orr.w	r2, r2, #2
 8004eb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004eb4:	3318      	adds	r3, #24
 8004eb6:	601a      	str	r2, [r3, #0]
}
 8004eb8:	bf00      	nop
 8004eba:	370c      	adds	r7, #12
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec2:	4770      	bx	lr

08004ec4 <ETH_DMAReceptionDisable>:
>>>>>>> Stashed changes
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
<<<<<<< Updated upstream
 8004ec0:	b480      	push	{r7}
 8004ec2:	b083      	sub	sp, #12
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ed0:	3318      	adds	r3, #24
 8004ed2:	681a      	ldr	r2, [r3, #0]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f022 0202 	bic.w	r2, r2, #2
 8004edc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ee0:	3318      	adds	r3, #24
 8004ee2:	601a      	str	r2, [r3, #0]
}
 8004ee4:	bf00      	nop
 8004ee6:	370c      	adds	r7, #12
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eee:	4770      	bx	lr

08004ef0 <ETH_FlushTransmitFIFO>:
=======
 8004ec4:	b480      	push	{r7}
 8004ec6:	b083      	sub	sp, #12
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ed4:	3318      	adds	r3, #24
 8004ed6:	681a      	ldr	r2, [r3, #0]
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f022 0202 	bic.w	r2, r2, #2
 8004ee0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ee4:	3318      	adds	r3, #24
 8004ee6:	601a      	str	r2, [r3, #0]
}
 8004ee8:	bf00      	nop
 8004eea:	370c      	adds	r7, #12
 8004eec:	46bd      	mov	sp, r7
 8004eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef2:	4770      	bx	lr

08004ef4 <ETH_FlushTransmitFIFO>:
>>>>>>> Stashed changes
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
<<<<<<< Updated upstream
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b084      	sub	sp, #16
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8004ef8:	2300      	movs	r3, #0
 8004efa:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f04:	3318      	adds	r3, #24
 8004f06:	681a      	ldr	r2, [r3, #0]
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8004f10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f14:	3318      	adds	r3, #24
 8004f16:	601a      	str	r2, [r3, #0]
=======
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b084      	sub	sp, #16
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8004efc:	2300      	movs	r3, #0
 8004efe:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f08:	3318      	adds	r3, #24
 8004f0a:	681a      	ldr	r2, [r3, #0]
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8004f14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f18:	3318      	adds	r3, #24
 8004f1a:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
<<<<<<< Updated upstream
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f20:	3318      	adds	r3, #24
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8004f26:	2001      	movs	r0, #1
 8004f28:	f000 f80c 	bl	8004f44 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	68fa      	ldr	r2, [r7, #12]
 8004f32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f36:	3318      	adds	r3, #24
 8004f38:	601a      	str	r2, [r3, #0]
}
 8004f3a:	bf00      	nop
 8004f3c:	3710      	adds	r7, #16
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bd80      	pop	{r7, pc}
	...

08004f44 <ETH_Delay>:
=======
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f24:	3318      	adds	r3, #24
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8004f2a:	2001      	movs	r0, #1
 8004f2c:	f000 f80c 	bl	8004f48 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	68fa      	ldr	r2, [r7, #12]
 8004f36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f3a:	3318      	adds	r3, #24
 8004f3c:	601a      	str	r2, [r3, #0]
}
 8004f3e:	bf00      	nop
 8004f40:	3710      	adds	r7, #16
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd80      	pop	{r7, pc}
	...

08004f48 <ETH_Delay>:
>>>>>>> Stashed changes
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
<<<<<<< Updated upstream
 8004f44:	b480      	push	{r7}
 8004f46:	b085      	sub	sp, #20
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004f4c:	4b0b      	ldr	r3, [pc, #44]	; (8004f7c <ETH_Delay+0x38>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a0b      	ldr	r2, [pc, #44]	; (8004f80 <ETH_Delay+0x3c>)
 8004f52:	fba2 2303 	umull	r2, r3, r2, r3
 8004f56:	0a5b      	lsrs	r3, r3, #9
 8004f58:	687a      	ldr	r2, [r7, #4]
 8004f5a:	fb02 f303 	mul.w	r3, r2, r3
 8004f5e:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 8004f60:	bf00      	nop
  } 
  while (Delay --);
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	1e5a      	subs	r2, r3, #1
 8004f66:	60fa      	str	r2, [r7, #12]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d1f9      	bne.n	8004f60 <ETH_Delay+0x1c>
}
 8004f6c:	bf00      	nop
 8004f6e:	bf00      	nop
 8004f70:	3714      	adds	r7, #20
 8004f72:	46bd      	mov	sp, r7
 8004f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f78:	4770      	bx	lr
 8004f7a:	bf00      	nop
 8004f7c:	20000000 	.word	0x20000000
 8004f80:	10624dd3 	.word	0x10624dd3

08004f84 <HAL_GPIO_Init>:
=======
 8004f48:	b480      	push	{r7}
 8004f4a:	b085      	sub	sp, #20
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004f50:	4b0b      	ldr	r3, [pc, #44]	; (8004f80 <ETH_Delay+0x38>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4a0b      	ldr	r2, [pc, #44]	; (8004f84 <ETH_Delay+0x3c>)
 8004f56:	fba2 2303 	umull	r2, r3, r2, r3
 8004f5a:	0a5b      	lsrs	r3, r3, #9
 8004f5c:	687a      	ldr	r2, [r7, #4]
 8004f5e:	fb02 f303 	mul.w	r3, r2, r3
 8004f62:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 8004f64:	bf00      	nop
  } 
  while (Delay --);
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	1e5a      	subs	r2, r3, #1
 8004f6a:	60fa      	str	r2, [r7, #12]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d1f9      	bne.n	8004f64 <ETH_Delay+0x1c>
}
 8004f70:	bf00      	nop
 8004f72:	bf00      	nop
 8004f74:	3714      	adds	r7, #20
 8004f76:	46bd      	mov	sp, r7
 8004f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7c:	4770      	bx	lr
 8004f7e:	bf00      	nop
 8004f80:	20000000 	.word	0x20000000
 8004f84:	10624dd3 	.word	0x10624dd3

08004f88 <HAL_GPIO_Init>:
>>>>>>> Stashed changes
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
<<<<<<< Updated upstream
 8004f84:	b480      	push	{r7}
 8004f86:	b089      	sub	sp, #36	; 0x24
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
 8004f8c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004f8e:	2300      	movs	r3, #0
 8004f90:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004f92:	2300      	movs	r3, #0
 8004f94:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004f96:	2300      	movs	r3, #0
 8004f98:	61bb      	str	r3, [r7, #24]
=======
 8004f88:	b480      	push	{r7}
 8004f8a:	b089      	sub	sp, #36	; 0x24
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
 8004f90:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004f92:	2300      	movs	r3, #0
 8004f94:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004f96:	2300      	movs	r3, #0
 8004f98:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	61bb      	str	r3, [r7, #24]
>>>>>>> Stashed changes
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
<<<<<<< Updated upstream
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	61fb      	str	r3, [r7, #28]
 8004f9e:	e177      	b.n	8005290 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004fa0:	2201      	movs	r2, #1
 8004fa2:	69fb      	ldr	r3, [r7, #28]
 8004fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8004fa8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	697a      	ldr	r2, [r7, #20]
 8004fb0:	4013      	ands	r3, r2
 8004fb2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004fb4:	693a      	ldr	r2, [r7, #16]
 8004fb6:	697b      	ldr	r3, [r7, #20]
 8004fb8:	429a      	cmp	r2, r3
 8004fba:	f040 8166 	bne.w	800528a <HAL_GPIO_Init+0x306>
=======
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	61fb      	str	r3, [r7, #28]
 8004fa2:	e177      	b.n	8005294 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004fa4:	2201      	movs	r2, #1
 8004fa6:	69fb      	ldr	r3, [r7, #28]
 8004fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8004fac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	697a      	ldr	r2, [r7, #20]
 8004fb4:	4013      	ands	r3, r2
 8004fb6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004fb8:	693a      	ldr	r2, [r7, #16]
 8004fba:	697b      	ldr	r3, [r7, #20]
 8004fbc:	429a      	cmp	r2, r3
 8004fbe:	f040 8166 	bne.w	800528e <HAL_GPIO_Init+0x306>
>>>>>>> Stashed changes
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
<<<<<<< Updated upstream
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	f003 0303 	and.w	r3, r3, #3
 8004fc6:	2b01      	cmp	r3, #1
 8004fc8:	d005      	beq.n	8004fd6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004fd2:	2b02      	cmp	r3, #2
 8004fd4:	d130      	bne.n	8005038 <HAL_GPIO_Init+0xb4>
=======
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	685b      	ldr	r3, [r3, #4]
 8004fc6:	f003 0303 	and.w	r3, r3, #3
 8004fca:	2b01      	cmp	r3, #1
 8004fcc:	d005      	beq.n	8004fda <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004fd6:	2b02      	cmp	r3, #2
 8004fd8:	d130      	bne.n	800503c <HAL_GPIO_Init+0xb4>
>>>>>>> Stashed changes
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
<<<<<<< Updated upstream
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	689b      	ldr	r3, [r3, #8]
 8004fda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004fdc:	69fb      	ldr	r3, [r7, #28]
 8004fde:	005b      	lsls	r3, r3, #1
 8004fe0:	2203      	movs	r2, #3
 8004fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8004fe6:	43db      	mvns	r3, r3
 8004fe8:	69ba      	ldr	r2, [r7, #24]
 8004fea:	4013      	ands	r3, r2
 8004fec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	68da      	ldr	r2, [r3, #12]
 8004ff2:	69fb      	ldr	r3, [r7, #28]
 8004ff4:	005b      	lsls	r3, r3, #1
 8004ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8004ffa:	69ba      	ldr	r2, [r7, #24]
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	69ba      	ldr	r2, [r7, #24]
 8005004:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	685b      	ldr	r3, [r3, #4]
 800500a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800500c:	2201      	movs	r2, #1
 800500e:	69fb      	ldr	r3, [r7, #28]
 8005010:	fa02 f303 	lsl.w	r3, r2, r3
 8005014:	43db      	mvns	r3, r3
 8005016:	69ba      	ldr	r2, [r7, #24]
 8005018:	4013      	ands	r3, r2
 800501a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	685b      	ldr	r3, [r3, #4]
 8005020:	091b      	lsrs	r3, r3, #4
 8005022:	f003 0201 	and.w	r2, r3, #1
 8005026:	69fb      	ldr	r3, [r7, #28]
 8005028:	fa02 f303 	lsl.w	r3, r2, r3
 800502c:	69ba      	ldr	r2, [r7, #24]
 800502e:	4313      	orrs	r3, r2
 8005030:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	69ba      	ldr	r2, [r7, #24]
 8005036:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	f003 0303 	and.w	r3, r3, #3
 8005040:	2b03      	cmp	r3, #3
 8005042:	d017      	beq.n	8005074 <HAL_GPIO_Init+0xf0>
=======
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	689b      	ldr	r3, [r3, #8]
 8004fde:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004fe0:	69fb      	ldr	r3, [r7, #28]
 8004fe2:	005b      	lsls	r3, r3, #1
 8004fe4:	2203      	movs	r2, #3
 8004fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8004fea:	43db      	mvns	r3, r3
 8004fec:	69ba      	ldr	r2, [r7, #24]
 8004fee:	4013      	ands	r3, r2
 8004ff0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	68da      	ldr	r2, [r3, #12]
 8004ff6:	69fb      	ldr	r3, [r7, #28]
 8004ff8:	005b      	lsls	r3, r3, #1
 8004ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8004ffe:	69ba      	ldr	r2, [r7, #24]
 8005000:	4313      	orrs	r3, r2
 8005002:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	69ba      	ldr	r2, [r7, #24]
 8005008:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005010:	2201      	movs	r2, #1
 8005012:	69fb      	ldr	r3, [r7, #28]
 8005014:	fa02 f303 	lsl.w	r3, r2, r3
 8005018:	43db      	mvns	r3, r3
 800501a:	69ba      	ldr	r2, [r7, #24]
 800501c:	4013      	ands	r3, r2
 800501e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	685b      	ldr	r3, [r3, #4]
 8005024:	091b      	lsrs	r3, r3, #4
 8005026:	f003 0201 	and.w	r2, r3, #1
 800502a:	69fb      	ldr	r3, [r7, #28]
 800502c:	fa02 f303 	lsl.w	r3, r2, r3
 8005030:	69ba      	ldr	r2, [r7, #24]
 8005032:	4313      	orrs	r3, r2
 8005034:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	69ba      	ldr	r2, [r7, #24]
 800503a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	685b      	ldr	r3, [r3, #4]
 8005040:	f003 0303 	and.w	r3, r3, #3
 8005044:	2b03      	cmp	r3, #3
 8005046:	d017      	beq.n	8005078 <HAL_GPIO_Init+0xf0>
>>>>>>> Stashed changes
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
<<<<<<< Updated upstream
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	68db      	ldr	r3, [r3, #12]
 8005048:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800504a:	69fb      	ldr	r3, [r7, #28]
 800504c:	005b      	lsls	r3, r3, #1
 800504e:	2203      	movs	r2, #3
 8005050:	fa02 f303 	lsl.w	r3, r2, r3
 8005054:	43db      	mvns	r3, r3
 8005056:	69ba      	ldr	r2, [r7, #24]
 8005058:	4013      	ands	r3, r2
 800505a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	689a      	ldr	r2, [r3, #8]
 8005060:	69fb      	ldr	r3, [r7, #28]
 8005062:	005b      	lsls	r3, r3, #1
 8005064:	fa02 f303 	lsl.w	r3, r2, r3
 8005068:	69ba      	ldr	r2, [r7, #24]
 800506a:	4313      	orrs	r3, r2
 800506c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	69ba      	ldr	r2, [r7, #24]
 8005072:	60da      	str	r2, [r3, #12]
=======
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	68db      	ldr	r3, [r3, #12]
 800504c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800504e:	69fb      	ldr	r3, [r7, #28]
 8005050:	005b      	lsls	r3, r3, #1
 8005052:	2203      	movs	r2, #3
 8005054:	fa02 f303 	lsl.w	r3, r2, r3
 8005058:	43db      	mvns	r3, r3
 800505a:	69ba      	ldr	r2, [r7, #24]
 800505c:	4013      	ands	r3, r2
 800505e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	689a      	ldr	r2, [r3, #8]
 8005064:	69fb      	ldr	r3, [r7, #28]
 8005066:	005b      	lsls	r3, r3, #1
 8005068:	fa02 f303 	lsl.w	r3, r2, r3
 800506c:	69ba      	ldr	r2, [r7, #24]
 800506e:	4313      	orrs	r3, r2
 8005070:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	69ba      	ldr	r2, [r7, #24]
 8005076:	60da      	str	r2, [r3, #12]
>>>>>>> Stashed changes
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
<<<<<<< Updated upstream
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	f003 0303 	and.w	r3, r3, #3
 800507c:	2b02      	cmp	r3, #2
 800507e:	d123      	bne.n	80050c8 <HAL_GPIO_Init+0x144>
=======
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	f003 0303 	and.w	r3, r3, #3
 8005080:	2b02      	cmp	r3, #2
 8005082:	d123      	bne.n	80050cc <HAL_GPIO_Init+0x144>
>>>>>>> Stashed changes
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
<<<<<<< Updated upstream
 8005080:	69fb      	ldr	r3, [r7, #28]
 8005082:	08da      	lsrs	r2, r3, #3
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	3208      	adds	r2, #8
 8005088:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800508c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800508e:	69fb      	ldr	r3, [r7, #28]
 8005090:	f003 0307 	and.w	r3, r3, #7
 8005094:	009b      	lsls	r3, r3, #2
 8005096:	220f      	movs	r2, #15
 8005098:	fa02 f303 	lsl.w	r3, r2, r3
 800509c:	43db      	mvns	r3, r3
 800509e:	69ba      	ldr	r2, [r7, #24]
 80050a0:	4013      	ands	r3, r2
 80050a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	691a      	ldr	r2, [r3, #16]
 80050a8:	69fb      	ldr	r3, [r7, #28]
 80050aa:	f003 0307 	and.w	r3, r3, #7
 80050ae:	009b      	lsls	r3, r3, #2
 80050b0:	fa02 f303 	lsl.w	r3, r2, r3
 80050b4:	69ba      	ldr	r2, [r7, #24]
 80050b6:	4313      	orrs	r3, r2
 80050b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80050ba:	69fb      	ldr	r3, [r7, #28]
 80050bc:	08da      	lsrs	r2, r3, #3
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	3208      	adds	r2, #8
 80050c2:	69b9      	ldr	r1, [r7, #24]
 80050c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
=======
 8005084:	69fb      	ldr	r3, [r7, #28]
 8005086:	08da      	lsrs	r2, r3, #3
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	3208      	adds	r2, #8
 800508c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005090:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005092:	69fb      	ldr	r3, [r7, #28]
 8005094:	f003 0307 	and.w	r3, r3, #7
 8005098:	009b      	lsls	r3, r3, #2
 800509a:	220f      	movs	r2, #15
 800509c:	fa02 f303 	lsl.w	r3, r2, r3
 80050a0:	43db      	mvns	r3, r3
 80050a2:	69ba      	ldr	r2, [r7, #24]
 80050a4:	4013      	ands	r3, r2
 80050a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	691a      	ldr	r2, [r3, #16]
 80050ac:	69fb      	ldr	r3, [r7, #28]
 80050ae:	f003 0307 	and.w	r3, r3, #7
 80050b2:	009b      	lsls	r3, r3, #2
 80050b4:	fa02 f303 	lsl.w	r3, r2, r3
 80050b8:	69ba      	ldr	r2, [r7, #24]
 80050ba:	4313      	orrs	r3, r2
 80050bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80050be:	69fb      	ldr	r3, [r7, #28]
 80050c0:	08da      	lsrs	r2, r3, #3
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	3208      	adds	r2, #8
 80050c6:	69b9      	ldr	r1, [r7, #24]
 80050c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
>>>>>>> Stashed changes
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
<<<<<<< Updated upstream
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80050ce:	69fb      	ldr	r3, [r7, #28]
 80050d0:	005b      	lsls	r3, r3, #1
 80050d2:	2203      	movs	r2, #3
 80050d4:	fa02 f303 	lsl.w	r3, r2, r3
 80050d8:	43db      	mvns	r3, r3
 80050da:	69ba      	ldr	r2, [r7, #24]
 80050dc:	4013      	ands	r3, r2
 80050de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	f003 0203 	and.w	r2, r3, #3
 80050e8:	69fb      	ldr	r3, [r7, #28]
 80050ea:	005b      	lsls	r3, r3, #1
 80050ec:	fa02 f303 	lsl.w	r3, r2, r3
 80050f0:	69ba      	ldr	r2, [r7, #24]
 80050f2:	4313      	orrs	r3, r2
 80050f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	69ba      	ldr	r2, [r7, #24]
 80050fa:	601a      	str	r2, [r3, #0]
=======
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80050d2:	69fb      	ldr	r3, [r7, #28]
 80050d4:	005b      	lsls	r3, r3, #1
 80050d6:	2203      	movs	r2, #3
 80050d8:	fa02 f303 	lsl.w	r3, r2, r3
 80050dc:	43db      	mvns	r3, r3
 80050de:	69ba      	ldr	r2, [r7, #24]
 80050e0:	4013      	ands	r3, r2
 80050e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	f003 0203 	and.w	r2, r3, #3
 80050ec:	69fb      	ldr	r3, [r7, #28]
 80050ee:	005b      	lsls	r3, r3, #1
 80050f0:	fa02 f303 	lsl.w	r3, r2, r3
 80050f4:	69ba      	ldr	r2, [r7, #24]
 80050f6:	4313      	orrs	r3, r2
 80050f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	69ba      	ldr	r2, [r7, #24]
 80050fe:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
<<<<<<< Updated upstream
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005104:	2b00      	cmp	r3, #0
 8005106:	f000 80c0 	beq.w	800528a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800510a:	2300      	movs	r3, #0
 800510c:	60fb      	str	r3, [r7, #12]
 800510e:	4b66      	ldr	r3, [pc, #408]	; (80052a8 <HAL_GPIO_Init+0x324>)
 8005110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005112:	4a65      	ldr	r2, [pc, #404]	; (80052a8 <HAL_GPIO_Init+0x324>)
 8005114:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005118:	6453      	str	r3, [r2, #68]	; 0x44
 800511a:	4b63      	ldr	r3, [pc, #396]	; (80052a8 <HAL_GPIO_Init+0x324>)
 800511c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800511e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005122:	60fb      	str	r3, [r7, #12]
 8005124:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005126:	4a61      	ldr	r2, [pc, #388]	; (80052ac <HAL_GPIO_Init+0x328>)
 8005128:	69fb      	ldr	r3, [r7, #28]
 800512a:	089b      	lsrs	r3, r3, #2
 800512c:	3302      	adds	r3, #2
 800512e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005132:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005134:	69fb      	ldr	r3, [r7, #28]
 8005136:	f003 0303 	and.w	r3, r3, #3
 800513a:	009b      	lsls	r3, r3, #2
 800513c:	220f      	movs	r2, #15
 800513e:	fa02 f303 	lsl.w	r3, r2, r3
 8005142:	43db      	mvns	r3, r3
 8005144:	69ba      	ldr	r2, [r7, #24]
 8005146:	4013      	ands	r3, r2
 8005148:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	4a58      	ldr	r2, [pc, #352]	; (80052b0 <HAL_GPIO_Init+0x32c>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d037      	beq.n	80051c2 <HAL_GPIO_Init+0x23e>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	4a57      	ldr	r2, [pc, #348]	; (80052b4 <HAL_GPIO_Init+0x330>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d031      	beq.n	80051be <HAL_GPIO_Init+0x23a>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	4a56      	ldr	r2, [pc, #344]	; (80052b8 <HAL_GPIO_Init+0x334>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d02b      	beq.n	80051ba <HAL_GPIO_Init+0x236>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	4a55      	ldr	r2, [pc, #340]	; (80052bc <HAL_GPIO_Init+0x338>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d025      	beq.n	80051b6 <HAL_GPIO_Init+0x232>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	4a54      	ldr	r2, [pc, #336]	; (80052c0 <HAL_GPIO_Init+0x33c>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d01f      	beq.n	80051b2 <HAL_GPIO_Init+0x22e>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	4a53      	ldr	r2, [pc, #332]	; (80052c4 <HAL_GPIO_Init+0x340>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d019      	beq.n	80051ae <HAL_GPIO_Init+0x22a>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	4a52      	ldr	r2, [pc, #328]	; (80052c8 <HAL_GPIO_Init+0x344>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d013      	beq.n	80051aa <HAL_GPIO_Init+0x226>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	4a51      	ldr	r2, [pc, #324]	; (80052cc <HAL_GPIO_Init+0x348>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d00d      	beq.n	80051a6 <HAL_GPIO_Init+0x222>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	4a50      	ldr	r2, [pc, #320]	; (80052d0 <HAL_GPIO_Init+0x34c>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d007      	beq.n	80051a2 <HAL_GPIO_Init+0x21e>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	4a4f      	ldr	r2, [pc, #316]	; (80052d4 <HAL_GPIO_Init+0x350>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d101      	bne.n	800519e <HAL_GPIO_Init+0x21a>
 800519a:	2309      	movs	r3, #9
 800519c:	e012      	b.n	80051c4 <HAL_GPIO_Init+0x240>
 800519e:	230a      	movs	r3, #10
 80051a0:	e010      	b.n	80051c4 <HAL_GPIO_Init+0x240>
 80051a2:	2308      	movs	r3, #8
 80051a4:	e00e      	b.n	80051c4 <HAL_GPIO_Init+0x240>
 80051a6:	2307      	movs	r3, #7
 80051a8:	e00c      	b.n	80051c4 <HAL_GPIO_Init+0x240>
 80051aa:	2306      	movs	r3, #6
 80051ac:	e00a      	b.n	80051c4 <HAL_GPIO_Init+0x240>
 80051ae:	2305      	movs	r3, #5
 80051b0:	e008      	b.n	80051c4 <HAL_GPIO_Init+0x240>
 80051b2:	2304      	movs	r3, #4
 80051b4:	e006      	b.n	80051c4 <HAL_GPIO_Init+0x240>
 80051b6:	2303      	movs	r3, #3
 80051b8:	e004      	b.n	80051c4 <HAL_GPIO_Init+0x240>
 80051ba:	2302      	movs	r3, #2
 80051bc:	e002      	b.n	80051c4 <HAL_GPIO_Init+0x240>
 80051be:	2301      	movs	r3, #1
 80051c0:	e000      	b.n	80051c4 <HAL_GPIO_Init+0x240>
 80051c2:	2300      	movs	r3, #0
 80051c4:	69fa      	ldr	r2, [r7, #28]
 80051c6:	f002 0203 	and.w	r2, r2, #3
 80051ca:	0092      	lsls	r2, r2, #2
 80051cc:	4093      	lsls	r3, r2
 80051ce:	69ba      	ldr	r2, [r7, #24]
 80051d0:	4313      	orrs	r3, r2
 80051d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80051d4:	4935      	ldr	r1, [pc, #212]	; (80052ac <HAL_GPIO_Init+0x328>)
 80051d6:	69fb      	ldr	r3, [r7, #28]
 80051d8:	089b      	lsrs	r3, r3, #2
 80051da:	3302      	adds	r3, #2
 80051dc:	69ba      	ldr	r2, [r7, #24]
 80051de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80051e2:	4b3d      	ldr	r3, [pc, #244]	; (80052d8 <HAL_GPIO_Init+0x354>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80051e8:	693b      	ldr	r3, [r7, #16]
 80051ea:	43db      	mvns	r3, r3
 80051ec:	69ba      	ldr	r2, [r7, #24]
 80051ee:	4013      	ands	r3, r2
 80051f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d003      	beq.n	8005206 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80051fe:	69ba      	ldr	r2, [r7, #24]
 8005200:	693b      	ldr	r3, [r7, #16]
 8005202:	4313      	orrs	r3, r2
 8005204:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005206:	4a34      	ldr	r2, [pc, #208]	; (80052d8 <HAL_GPIO_Init+0x354>)
 8005208:	69bb      	ldr	r3, [r7, #24]
 800520a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800520c:	4b32      	ldr	r3, [pc, #200]	; (80052d8 <HAL_GPIO_Init+0x354>)
 800520e:	685b      	ldr	r3, [r3, #4]
 8005210:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005212:	693b      	ldr	r3, [r7, #16]
 8005214:	43db      	mvns	r3, r3
 8005216:	69ba      	ldr	r2, [r7, #24]
 8005218:	4013      	ands	r3, r2
 800521a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005224:	2b00      	cmp	r3, #0
 8005226:	d003      	beq.n	8005230 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005228:	69ba      	ldr	r2, [r7, #24]
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	4313      	orrs	r3, r2
 800522e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005230:	4a29      	ldr	r2, [pc, #164]	; (80052d8 <HAL_GPIO_Init+0x354>)
 8005232:	69bb      	ldr	r3, [r7, #24]
 8005234:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005236:	4b28      	ldr	r3, [pc, #160]	; (80052d8 <HAL_GPIO_Init+0x354>)
 8005238:	689b      	ldr	r3, [r3, #8]
 800523a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800523c:	693b      	ldr	r3, [r7, #16]
 800523e:	43db      	mvns	r3, r3
 8005240:	69ba      	ldr	r2, [r7, #24]
 8005242:	4013      	ands	r3, r2
 8005244:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800524e:	2b00      	cmp	r3, #0
 8005250:	d003      	beq.n	800525a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005252:	69ba      	ldr	r2, [r7, #24]
 8005254:	693b      	ldr	r3, [r7, #16]
 8005256:	4313      	orrs	r3, r2
 8005258:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800525a:	4a1f      	ldr	r2, [pc, #124]	; (80052d8 <HAL_GPIO_Init+0x354>)
 800525c:	69bb      	ldr	r3, [r7, #24]
 800525e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005260:	4b1d      	ldr	r3, [pc, #116]	; (80052d8 <HAL_GPIO_Init+0x354>)
 8005262:	68db      	ldr	r3, [r3, #12]
 8005264:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005266:	693b      	ldr	r3, [r7, #16]
 8005268:	43db      	mvns	r3, r3
 800526a:	69ba      	ldr	r2, [r7, #24]
 800526c:	4013      	ands	r3, r2
 800526e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	685b      	ldr	r3, [r3, #4]
 8005274:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005278:	2b00      	cmp	r3, #0
 800527a:	d003      	beq.n	8005284 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800527c:	69ba      	ldr	r2, [r7, #24]
 800527e:	693b      	ldr	r3, [r7, #16]
 8005280:	4313      	orrs	r3, r2
 8005282:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005284:	4a14      	ldr	r2, [pc, #80]	; (80052d8 <HAL_GPIO_Init+0x354>)
 8005286:	69bb      	ldr	r3, [r7, #24]
 8005288:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800528a:	69fb      	ldr	r3, [r7, #28]
 800528c:	3301      	adds	r3, #1
 800528e:	61fb      	str	r3, [r7, #28]
 8005290:	69fb      	ldr	r3, [r7, #28]
 8005292:	2b0f      	cmp	r3, #15
 8005294:	f67f ae84 	bls.w	8004fa0 <HAL_GPIO_Init+0x1c>
=======
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	685b      	ldr	r3, [r3, #4]
 8005104:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005108:	2b00      	cmp	r3, #0
 800510a:	f000 80c0 	beq.w	800528e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800510e:	2300      	movs	r3, #0
 8005110:	60fb      	str	r3, [r7, #12]
 8005112:	4b66      	ldr	r3, [pc, #408]	; (80052ac <HAL_GPIO_Init+0x324>)
 8005114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005116:	4a65      	ldr	r2, [pc, #404]	; (80052ac <HAL_GPIO_Init+0x324>)
 8005118:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800511c:	6453      	str	r3, [r2, #68]	; 0x44
 800511e:	4b63      	ldr	r3, [pc, #396]	; (80052ac <HAL_GPIO_Init+0x324>)
 8005120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005122:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005126:	60fb      	str	r3, [r7, #12]
 8005128:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800512a:	4a61      	ldr	r2, [pc, #388]	; (80052b0 <HAL_GPIO_Init+0x328>)
 800512c:	69fb      	ldr	r3, [r7, #28]
 800512e:	089b      	lsrs	r3, r3, #2
 8005130:	3302      	adds	r3, #2
 8005132:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005136:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005138:	69fb      	ldr	r3, [r7, #28]
 800513a:	f003 0303 	and.w	r3, r3, #3
 800513e:	009b      	lsls	r3, r3, #2
 8005140:	220f      	movs	r2, #15
 8005142:	fa02 f303 	lsl.w	r3, r2, r3
 8005146:	43db      	mvns	r3, r3
 8005148:	69ba      	ldr	r2, [r7, #24]
 800514a:	4013      	ands	r3, r2
 800514c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	4a58      	ldr	r2, [pc, #352]	; (80052b4 <HAL_GPIO_Init+0x32c>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d037      	beq.n	80051c6 <HAL_GPIO_Init+0x23e>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	4a57      	ldr	r2, [pc, #348]	; (80052b8 <HAL_GPIO_Init+0x330>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d031      	beq.n	80051c2 <HAL_GPIO_Init+0x23a>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	4a56      	ldr	r2, [pc, #344]	; (80052bc <HAL_GPIO_Init+0x334>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d02b      	beq.n	80051be <HAL_GPIO_Init+0x236>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	4a55      	ldr	r2, [pc, #340]	; (80052c0 <HAL_GPIO_Init+0x338>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d025      	beq.n	80051ba <HAL_GPIO_Init+0x232>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	4a54      	ldr	r2, [pc, #336]	; (80052c4 <HAL_GPIO_Init+0x33c>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d01f      	beq.n	80051b6 <HAL_GPIO_Init+0x22e>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	4a53      	ldr	r2, [pc, #332]	; (80052c8 <HAL_GPIO_Init+0x340>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d019      	beq.n	80051b2 <HAL_GPIO_Init+0x22a>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	4a52      	ldr	r2, [pc, #328]	; (80052cc <HAL_GPIO_Init+0x344>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d013      	beq.n	80051ae <HAL_GPIO_Init+0x226>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	4a51      	ldr	r2, [pc, #324]	; (80052d0 <HAL_GPIO_Init+0x348>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d00d      	beq.n	80051aa <HAL_GPIO_Init+0x222>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	4a50      	ldr	r2, [pc, #320]	; (80052d4 <HAL_GPIO_Init+0x34c>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d007      	beq.n	80051a6 <HAL_GPIO_Init+0x21e>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	4a4f      	ldr	r2, [pc, #316]	; (80052d8 <HAL_GPIO_Init+0x350>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d101      	bne.n	80051a2 <HAL_GPIO_Init+0x21a>
 800519e:	2309      	movs	r3, #9
 80051a0:	e012      	b.n	80051c8 <HAL_GPIO_Init+0x240>
 80051a2:	230a      	movs	r3, #10
 80051a4:	e010      	b.n	80051c8 <HAL_GPIO_Init+0x240>
 80051a6:	2308      	movs	r3, #8
 80051a8:	e00e      	b.n	80051c8 <HAL_GPIO_Init+0x240>
 80051aa:	2307      	movs	r3, #7
 80051ac:	e00c      	b.n	80051c8 <HAL_GPIO_Init+0x240>
 80051ae:	2306      	movs	r3, #6
 80051b0:	e00a      	b.n	80051c8 <HAL_GPIO_Init+0x240>
 80051b2:	2305      	movs	r3, #5
 80051b4:	e008      	b.n	80051c8 <HAL_GPIO_Init+0x240>
 80051b6:	2304      	movs	r3, #4
 80051b8:	e006      	b.n	80051c8 <HAL_GPIO_Init+0x240>
 80051ba:	2303      	movs	r3, #3
 80051bc:	e004      	b.n	80051c8 <HAL_GPIO_Init+0x240>
 80051be:	2302      	movs	r3, #2
 80051c0:	e002      	b.n	80051c8 <HAL_GPIO_Init+0x240>
 80051c2:	2301      	movs	r3, #1
 80051c4:	e000      	b.n	80051c8 <HAL_GPIO_Init+0x240>
 80051c6:	2300      	movs	r3, #0
 80051c8:	69fa      	ldr	r2, [r7, #28]
 80051ca:	f002 0203 	and.w	r2, r2, #3
 80051ce:	0092      	lsls	r2, r2, #2
 80051d0:	4093      	lsls	r3, r2
 80051d2:	69ba      	ldr	r2, [r7, #24]
 80051d4:	4313      	orrs	r3, r2
 80051d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80051d8:	4935      	ldr	r1, [pc, #212]	; (80052b0 <HAL_GPIO_Init+0x328>)
 80051da:	69fb      	ldr	r3, [r7, #28]
 80051dc:	089b      	lsrs	r3, r3, #2
 80051de:	3302      	adds	r3, #2
 80051e0:	69ba      	ldr	r2, [r7, #24]
 80051e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80051e6:	4b3d      	ldr	r3, [pc, #244]	; (80052dc <HAL_GPIO_Init+0x354>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80051ec:	693b      	ldr	r3, [r7, #16]
 80051ee:	43db      	mvns	r3, r3
 80051f0:	69ba      	ldr	r2, [r7, #24]
 80051f2:	4013      	ands	r3, r2
 80051f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	685b      	ldr	r3, [r3, #4]
 80051fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d003      	beq.n	800520a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005202:	69ba      	ldr	r2, [r7, #24]
 8005204:	693b      	ldr	r3, [r7, #16]
 8005206:	4313      	orrs	r3, r2
 8005208:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800520a:	4a34      	ldr	r2, [pc, #208]	; (80052dc <HAL_GPIO_Init+0x354>)
 800520c:	69bb      	ldr	r3, [r7, #24]
 800520e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005210:	4b32      	ldr	r3, [pc, #200]	; (80052dc <HAL_GPIO_Init+0x354>)
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005216:	693b      	ldr	r3, [r7, #16]
 8005218:	43db      	mvns	r3, r3
 800521a:	69ba      	ldr	r2, [r7, #24]
 800521c:	4013      	ands	r3, r2
 800521e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	685b      	ldr	r3, [r3, #4]
 8005224:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005228:	2b00      	cmp	r3, #0
 800522a:	d003      	beq.n	8005234 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800522c:	69ba      	ldr	r2, [r7, #24]
 800522e:	693b      	ldr	r3, [r7, #16]
 8005230:	4313      	orrs	r3, r2
 8005232:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005234:	4a29      	ldr	r2, [pc, #164]	; (80052dc <HAL_GPIO_Init+0x354>)
 8005236:	69bb      	ldr	r3, [r7, #24]
 8005238:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800523a:	4b28      	ldr	r3, [pc, #160]	; (80052dc <HAL_GPIO_Init+0x354>)
 800523c:	689b      	ldr	r3, [r3, #8]
 800523e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005240:	693b      	ldr	r3, [r7, #16]
 8005242:	43db      	mvns	r3, r3
 8005244:	69ba      	ldr	r2, [r7, #24]
 8005246:	4013      	ands	r3, r2
 8005248:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005252:	2b00      	cmp	r3, #0
 8005254:	d003      	beq.n	800525e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005256:	69ba      	ldr	r2, [r7, #24]
 8005258:	693b      	ldr	r3, [r7, #16]
 800525a:	4313      	orrs	r3, r2
 800525c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800525e:	4a1f      	ldr	r2, [pc, #124]	; (80052dc <HAL_GPIO_Init+0x354>)
 8005260:	69bb      	ldr	r3, [r7, #24]
 8005262:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005264:	4b1d      	ldr	r3, [pc, #116]	; (80052dc <HAL_GPIO_Init+0x354>)
 8005266:	68db      	ldr	r3, [r3, #12]
 8005268:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800526a:	693b      	ldr	r3, [r7, #16]
 800526c:	43db      	mvns	r3, r3
 800526e:	69ba      	ldr	r2, [r7, #24]
 8005270:	4013      	ands	r3, r2
 8005272:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800527c:	2b00      	cmp	r3, #0
 800527e:	d003      	beq.n	8005288 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005280:	69ba      	ldr	r2, [r7, #24]
 8005282:	693b      	ldr	r3, [r7, #16]
 8005284:	4313      	orrs	r3, r2
 8005286:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005288:	4a14      	ldr	r2, [pc, #80]	; (80052dc <HAL_GPIO_Init+0x354>)
 800528a:	69bb      	ldr	r3, [r7, #24]
 800528c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800528e:	69fb      	ldr	r3, [r7, #28]
 8005290:	3301      	adds	r3, #1
 8005292:	61fb      	str	r3, [r7, #28]
 8005294:	69fb      	ldr	r3, [r7, #28]
 8005296:	2b0f      	cmp	r3, #15
 8005298:	f67f ae84 	bls.w	8004fa4 <HAL_GPIO_Init+0x1c>
>>>>>>> Stashed changes
      }
    }
  }
}
<<<<<<< Updated upstream
 8005298:	bf00      	nop
 800529a:	bf00      	nop
 800529c:	3724      	adds	r7, #36	; 0x24
 800529e:	46bd      	mov	sp, r7
 80052a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a4:	4770      	bx	lr
 80052a6:	bf00      	nop
 80052a8:	40023800 	.word	0x40023800
 80052ac:	40013800 	.word	0x40013800
 80052b0:	40020000 	.word	0x40020000
 80052b4:	40020400 	.word	0x40020400
 80052b8:	40020800 	.word	0x40020800
 80052bc:	40020c00 	.word	0x40020c00
 80052c0:	40021000 	.word	0x40021000
 80052c4:	40021400 	.word	0x40021400
 80052c8:	40021800 	.word	0x40021800
 80052cc:	40021c00 	.word	0x40021c00
 80052d0:	40022000 	.word	0x40022000
 80052d4:	40022400 	.word	0x40022400
 80052d8:	40013c00 	.word	0x40013c00

080052dc <HAL_GPIO_ReadPin>:
=======
 800529c:	bf00      	nop
 800529e:	bf00      	nop
 80052a0:	3724      	adds	r7, #36	; 0x24
 80052a2:	46bd      	mov	sp, r7
 80052a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a8:	4770      	bx	lr
 80052aa:	bf00      	nop
 80052ac:	40023800 	.word	0x40023800
 80052b0:	40013800 	.word	0x40013800
 80052b4:	40020000 	.word	0x40020000
 80052b8:	40020400 	.word	0x40020400
 80052bc:	40020800 	.word	0x40020800
 80052c0:	40020c00 	.word	0x40020c00
 80052c4:	40021000 	.word	0x40021000
 80052c8:	40021400 	.word	0x40021400
 80052cc:	40021800 	.word	0x40021800
 80052d0:	40021c00 	.word	0x40021c00
 80052d4:	40022000 	.word	0x40022000
 80052d8:	40022400 	.word	0x40022400
 80052dc:	40013c00 	.word	0x40013c00

080052e0 <HAL_GPIO_ReadPin>:
>>>>>>> Stashed changes
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
<<<<<<< Updated upstream
 80052dc:	b480      	push	{r7}
 80052de:	b085      	sub	sp, #20
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
 80052e4:	460b      	mov	r3, r1
 80052e6:	807b      	strh	r3, [r7, #2]
=======
 80052e0:	b480      	push	{r7}
 80052e2:	b085      	sub	sp, #20
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
 80052e8:	460b      	mov	r3, r1
 80052ea:	807b      	strh	r3, [r7, #2]
>>>>>>> Stashed changes
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
<<<<<<< Updated upstream
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	691a      	ldr	r2, [r3, #16]
 80052ec:	887b      	ldrh	r3, [r7, #2]
 80052ee:	4013      	ands	r3, r2
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d002      	beq.n	80052fa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80052f4:	2301      	movs	r3, #1
 80052f6:	73fb      	strb	r3, [r7, #15]
 80052f8:	e001      	b.n	80052fe <HAL_GPIO_ReadPin+0x22>
=======
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	691a      	ldr	r2, [r3, #16]
 80052f0:	887b      	ldrh	r3, [r7, #2]
 80052f2:	4013      	ands	r3, r2
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d002      	beq.n	80052fe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80052f8:	2301      	movs	r3, #1
 80052fa:	73fb      	strb	r3, [r7, #15]
 80052fc:	e001      	b.n	8005302 <HAL_GPIO_ReadPin+0x22>
>>>>>>> Stashed changes
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
<<<<<<< Updated upstream
 80052fa:	2300      	movs	r3, #0
 80052fc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80052fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005300:	4618      	mov	r0, r3
 8005302:	3714      	adds	r7, #20
 8005304:	46bd      	mov	sp, r7
 8005306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530a:	4770      	bx	lr

0800530c <HAL_GPIO_WritePin>:
=======
 80052fe:	2300      	movs	r3, #0
 8005300:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005302:	7bfb      	ldrb	r3, [r7, #15]
}
 8005304:	4618      	mov	r0, r3
 8005306:	3714      	adds	r7, #20
 8005308:	46bd      	mov	sp, r7
 800530a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530e:	4770      	bx	lr

08005310 <HAL_GPIO_WritePin>:
>>>>>>> Stashed changes
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
<<<<<<< Updated upstream
 800530c:	b480      	push	{r7}
 800530e:	b083      	sub	sp, #12
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
 8005314:	460b      	mov	r3, r1
 8005316:	807b      	strh	r3, [r7, #2]
 8005318:	4613      	mov	r3, r2
 800531a:	707b      	strb	r3, [r7, #1]
=======
 8005310:	b480      	push	{r7}
 8005312:	b083      	sub	sp, #12
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
 8005318:	460b      	mov	r3, r1
 800531a:	807b      	strh	r3, [r7, #2]
 800531c:	4613      	mov	r3, r2
 800531e:	707b      	strb	r3, [r7, #1]
>>>>>>> Stashed changes
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
<<<<<<< Updated upstream
 800531c:	787b      	ldrb	r3, [r7, #1]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d003      	beq.n	800532a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005322:	887a      	ldrh	r2, [r7, #2]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	619a      	str	r2, [r3, #24]
=======
 8005320:	787b      	ldrb	r3, [r7, #1]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d003      	beq.n	800532e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005326:	887a      	ldrh	r2, [r7, #2]
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	619a      	str	r2, [r3, #24]
>>>>>>> Stashed changes
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
<<<<<<< Updated upstream
 8005328:	e003      	b.n	8005332 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800532a:	887b      	ldrh	r3, [r7, #2]
 800532c:	041a      	lsls	r2, r3, #16
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	619a      	str	r2, [r3, #24]
}
 8005332:	bf00      	nop
 8005334:	370c      	adds	r7, #12
 8005336:	46bd      	mov	sp, r7
 8005338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533c:	4770      	bx	lr

0800533e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800533e:	b480      	push	{r7}
 8005340:	b085      	sub	sp, #20
 8005342:	af00      	add	r7, sp, #0
 8005344:	6078      	str	r0, [r7, #4]
 8005346:	460b      	mov	r3, r1
 8005348:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	695b      	ldr	r3, [r3, #20]
 800534e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005350:	887a      	ldrh	r2, [r7, #2]
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	4013      	ands	r3, r2
 8005356:	041a      	lsls	r2, r3, #16
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	43d9      	mvns	r1, r3
 800535c:	887b      	ldrh	r3, [r7, #2]
 800535e:	400b      	ands	r3, r1
 8005360:	431a      	orrs	r2, r3
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	619a      	str	r2, [r3, #24]
}
 8005366:	bf00      	nop
 8005368:	3714      	adds	r7, #20
 800536a:	46bd      	mov	sp, r7
 800536c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005370:	4770      	bx	lr
	...

08005374 <HAL_GPIO_EXTI_IRQHandler>:
=======
 800532c:	e003      	b.n	8005336 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800532e:	887b      	ldrh	r3, [r7, #2]
 8005330:	041a      	lsls	r2, r3, #16
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	619a      	str	r2, [r3, #24]
}
 8005336:	bf00      	nop
 8005338:	370c      	adds	r7, #12
 800533a:	46bd      	mov	sp, r7
 800533c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005340:	4770      	bx	lr
	...

08005344 <HAL_GPIO_EXTI_IRQHandler>:
>>>>>>> Stashed changes
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
<<<<<<< Updated upstream
 8005374:	b580      	push	{r7, lr}
 8005376:	b082      	sub	sp, #8
 8005378:	af00      	add	r7, sp, #0
 800537a:	4603      	mov	r3, r0
 800537c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800537e:	4b08      	ldr	r3, [pc, #32]	; (80053a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005380:	695a      	ldr	r2, [r3, #20]
 8005382:	88fb      	ldrh	r3, [r7, #6]
 8005384:	4013      	ands	r3, r2
 8005386:	2b00      	cmp	r3, #0
 8005388:	d006      	beq.n	8005398 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800538a:	4a05      	ldr	r2, [pc, #20]	; (80053a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800538c:	88fb      	ldrh	r3, [r7, #6]
 800538e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005390:	88fb      	ldrh	r3, [r7, #6]
 8005392:	4618      	mov	r0, r3
 8005394:	f7fb fe30 	bl	8000ff8 <HAL_GPIO_EXTI_Callback>
  }
}
 8005398:	bf00      	nop
 800539a:	3708      	adds	r7, #8
 800539c:	46bd      	mov	sp, r7
 800539e:	bd80      	pop	{r7, pc}
 80053a0:	40013c00 	.word	0x40013c00

080053a4 <HAL_I2C_Init>:
=======
 8005344:	b580      	push	{r7, lr}
 8005346:	b082      	sub	sp, #8
 8005348:	af00      	add	r7, sp, #0
 800534a:	4603      	mov	r3, r0
 800534c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800534e:	4b08      	ldr	r3, [pc, #32]	; (8005370 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005350:	695a      	ldr	r2, [r3, #20]
 8005352:	88fb      	ldrh	r3, [r7, #6]
 8005354:	4013      	ands	r3, r2
 8005356:	2b00      	cmp	r3, #0
 8005358:	d006      	beq.n	8005368 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800535a:	4a05      	ldr	r2, [pc, #20]	; (8005370 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800535c:	88fb      	ldrh	r3, [r7, #6]
 800535e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005360:	88fb      	ldrh	r3, [r7, #6]
 8005362:	4618      	mov	r0, r3
 8005364:	f7fb fe50 	bl	8001008 <HAL_GPIO_EXTI_Callback>
  }
}
 8005368:	bf00      	nop
 800536a:	3708      	adds	r7, #8
 800536c:	46bd      	mov	sp, r7
 800536e:	bd80      	pop	{r7, pc}
 8005370:	40013c00 	.word	0x40013c00

08005374 <HAL_I2C_Init>:
>>>>>>> Stashed changes
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
<<<<<<< Updated upstream
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b084      	sub	sp, #16
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
=======
 8005374:	b580      	push	{r7, lr}
 8005376:	b084      	sub	sp, #16
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
<<<<<<< Updated upstream
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d101      	bne.n	80053b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80053b2:	2301      	movs	r3, #1
 80053b4:	e12b      	b.n	800560e <HAL_I2C_Init+0x26a>
=======
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d101      	bne.n	8005386 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005382:	2301      	movs	r3, #1
 8005384:	e12b      	b.n	80055de <HAL_I2C_Init+0x26a>
>>>>>>> Stashed changes
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
<<<<<<< Updated upstream
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053bc:	b2db      	uxtb	r3, r3
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d106      	bne.n	80053d0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2200      	movs	r2, #0
 80053c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800538c:	b2db      	uxtb	r3, r3
 800538e:	2b00      	cmp	r3, #0
 8005390:	d106      	bne.n	80053a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2200      	movs	r2, #0
 8005396:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
>>>>>>> Stashed changes

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
<<<<<<< Updated upstream
 80053ca:	6878      	ldr	r0, [r7, #4]
 80053cc:	f7fb fc44 	bl	8000c58 <HAL_I2C_MspInit>
=======
 800539a:	6878      	ldr	r0, [r7, #4]
 800539c:	f7fb fc5c 	bl	8000c58 <HAL_I2C_MspInit>
>>>>>>> Stashed changes
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
<<<<<<< Updated upstream
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2224      	movs	r2, #36	; 0x24
 80053d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	681a      	ldr	r2, [r3, #0]
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f022 0201 	bic.w	r2, r2, #1
 80053e6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	681a      	ldr	r2, [r3, #0]
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80053f6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	681a      	ldr	r2, [r3, #0]
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005406:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005408:	f000 fe28 	bl	800605c <HAL_RCC_GetPCLK1Freq>
 800540c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	685b      	ldr	r3, [r3, #4]
 8005412:	4a81      	ldr	r2, [pc, #516]	; (8005618 <HAL_I2C_Init+0x274>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d807      	bhi.n	8005428 <HAL_I2C_Init+0x84>
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	4a80      	ldr	r2, [pc, #512]	; (800561c <HAL_I2C_Init+0x278>)
 800541c:	4293      	cmp	r3, r2
 800541e:	bf94      	ite	ls
 8005420:	2301      	movls	r3, #1
 8005422:	2300      	movhi	r3, #0
 8005424:	b2db      	uxtb	r3, r3
 8005426:	e006      	b.n	8005436 <HAL_I2C_Init+0x92>
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	4a7d      	ldr	r2, [pc, #500]	; (8005620 <HAL_I2C_Init+0x27c>)
 800542c:	4293      	cmp	r3, r2
 800542e:	bf94      	ite	ls
 8005430:	2301      	movls	r3, #1
 8005432:	2300      	movhi	r3, #0
 8005434:	b2db      	uxtb	r3, r3
 8005436:	2b00      	cmp	r3, #0
 8005438:	d001      	beq.n	800543e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800543a:	2301      	movs	r3, #1
 800543c:	e0e7      	b.n	800560e <HAL_I2C_Init+0x26a>
=======
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2224      	movs	r2, #36	; 0x24
 80053a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	681a      	ldr	r2, [r3, #0]
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f022 0201 	bic.w	r2, r2, #1
 80053b6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	681a      	ldr	r2, [r3, #0]
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80053c6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	681a      	ldr	r2, [r3, #0]
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80053d6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80053d8:	f000 fe28 	bl	800602c <HAL_RCC_GetPCLK1Freq>
 80053dc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	4a81      	ldr	r2, [pc, #516]	; (80055e8 <HAL_I2C_Init+0x274>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d807      	bhi.n	80053f8 <HAL_I2C_Init+0x84>
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	4a80      	ldr	r2, [pc, #512]	; (80055ec <HAL_I2C_Init+0x278>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	bf94      	ite	ls
 80053f0:	2301      	movls	r3, #1
 80053f2:	2300      	movhi	r3, #0
 80053f4:	b2db      	uxtb	r3, r3
 80053f6:	e006      	b.n	8005406 <HAL_I2C_Init+0x92>
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	4a7d      	ldr	r2, [pc, #500]	; (80055f0 <HAL_I2C_Init+0x27c>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	bf94      	ite	ls
 8005400:	2301      	movls	r3, #1
 8005402:	2300      	movhi	r3, #0
 8005404:	b2db      	uxtb	r3, r3
 8005406:	2b00      	cmp	r3, #0
 8005408:	d001      	beq.n	800540e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800540a:	2301      	movs	r3, #1
 800540c:	e0e7      	b.n	80055de <HAL_I2C_Init+0x26a>
>>>>>>> Stashed changes
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
<<<<<<< Updated upstream
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	4a78      	ldr	r2, [pc, #480]	; (8005624 <HAL_I2C_Init+0x280>)
 8005442:	fba2 2303 	umull	r2, r3, r2, r3
 8005446:	0c9b      	lsrs	r3, r3, #18
 8005448:	60bb      	str	r3, [r7, #8]
=======
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	4a78      	ldr	r2, [pc, #480]	; (80055f4 <HAL_I2C_Init+0x280>)
 8005412:	fba2 2303 	umull	r2, r3, r2, r3
 8005416:	0c9b      	lsrs	r3, r3, #18
 8005418:	60bb      	str	r3, [r7, #8]
>>>>>>> Stashed changes

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
<<<<<<< Updated upstream
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	68ba      	ldr	r2, [r7, #8]
 800545a:	430a      	orrs	r2, r1
 800545c:	605a      	str	r2, [r3, #4]
=======
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	685b      	ldr	r3, [r3, #4]
 8005420:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	68ba      	ldr	r2, [r7, #8]
 800542a:	430a      	orrs	r2, r1
 800542c:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
<<<<<<< Updated upstream
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	6a1b      	ldr	r3, [r3, #32]
 8005464:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	685b      	ldr	r3, [r3, #4]
 800546c:	4a6a      	ldr	r2, [pc, #424]	; (8005618 <HAL_I2C_Init+0x274>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d802      	bhi.n	8005478 <HAL_I2C_Init+0xd4>
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	3301      	adds	r3, #1
 8005476:	e009      	b.n	800548c <HAL_I2C_Init+0xe8>
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800547e:	fb02 f303 	mul.w	r3, r2, r3
 8005482:	4a69      	ldr	r2, [pc, #420]	; (8005628 <HAL_I2C_Init+0x284>)
 8005484:	fba2 2303 	umull	r2, r3, r2, r3
 8005488:	099b      	lsrs	r3, r3, #6
 800548a:	3301      	adds	r3, #1
 800548c:	687a      	ldr	r2, [r7, #4]
 800548e:	6812      	ldr	r2, [r2, #0]
 8005490:	430b      	orrs	r3, r1
 8005492:	6213      	str	r3, [r2, #32]
=======
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	6a1b      	ldr	r3, [r3, #32]
 8005434:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	685b      	ldr	r3, [r3, #4]
 800543c:	4a6a      	ldr	r2, [pc, #424]	; (80055e8 <HAL_I2C_Init+0x274>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d802      	bhi.n	8005448 <HAL_I2C_Init+0xd4>
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	3301      	adds	r3, #1
 8005446:	e009      	b.n	800545c <HAL_I2C_Init+0xe8>
 8005448:	68bb      	ldr	r3, [r7, #8]
 800544a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800544e:	fb02 f303 	mul.w	r3, r2, r3
 8005452:	4a69      	ldr	r2, [pc, #420]	; (80055f8 <HAL_I2C_Init+0x284>)
 8005454:	fba2 2303 	umull	r2, r3, r2, r3
 8005458:	099b      	lsrs	r3, r3, #6
 800545a:	3301      	adds	r3, #1
 800545c:	687a      	ldr	r2, [r7, #4]
 800545e:	6812      	ldr	r2, [r2, #0]
 8005460:	430b      	orrs	r3, r1
 8005462:	6213      	str	r3, [r2, #32]
>>>>>>> Stashed changes

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
<<<<<<< Updated upstream
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	69db      	ldr	r3, [r3, #28]
 800549a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800549e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	685b      	ldr	r3, [r3, #4]
 80054a6:	495c      	ldr	r1, [pc, #368]	; (8005618 <HAL_I2C_Init+0x274>)
 80054a8:	428b      	cmp	r3, r1
 80054aa:	d819      	bhi.n	80054e0 <HAL_I2C_Init+0x13c>
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	1e59      	subs	r1, r3, #1
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	685b      	ldr	r3, [r3, #4]
 80054b4:	005b      	lsls	r3, r3, #1
 80054b6:	fbb1 f3f3 	udiv	r3, r1, r3
 80054ba:	1c59      	adds	r1, r3, #1
 80054bc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80054c0:	400b      	ands	r3, r1
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d00a      	beq.n	80054dc <HAL_I2C_Init+0x138>
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	1e59      	subs	r1, r3, #1
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	685b      	ldr	r3, [r3, #4]
 80054ce:	005b      	lsls	r3, r3, #1
 80054d0:	fbb1 f3f3 	udiv	r3, r1, r3
 80054d4:	3301      	adds	r3, #1
 80054d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80054da:	e051      	b.n	8005580 <HAL_I2C_Init+0x1dc>
 80054dc:	2304      	movs	r3, #4
 80054de:	e04f      	b.n	8005580 <HAL_I2C_Init+0x1dc>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	689b      	ldr	r3, [r3, #8]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d111      	bne.n	800550c <HAL_I2C_Init+0x168>
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	1e58      	subs	r0, r3, #1
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6859      	ldr	r1, [r3, #4]
 80054f0:	460b      	mov	r3, r1
 80054f2:	005b      	lsls	r3, r3, #1
 80054f4:	440b      	add	r3, r1
 80054f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80054fa:	3301      	adds	r3, #1
 80054fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005500:	2b00      	cmp	r3, #0
 8005502:	bf0c      	ite	eq
 8005504:	2301      	moveq	r3, #1
 8005506:	2300      	movne	r3, #0
 8005508:	b2db      	uxtb	r3, r3
 800550a:	e012      	b.n	8005532 <HAL_I2C_Init+0x18e>
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	1e58      	subs	r0, r3, #1
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6859      	ldr	r1, [r3, #4]
 8005514:	460b      	mov	r3, r1
 8005516:	009b      	lsls	r3, r3, #2
 8005518:	440b      	add	r3, r1
 800551a:	0099      	lsls	r1, r3, #2
 800551c:	440b      	add	r3, r1
 800551e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005522:	3301      	adds	r3, #1
 8005524:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005528:	2b00      	cmp	r3, #0
 800552a:	bf0c      	ite	eq
 800552c:	2301      	moveq	r3, #1
 800552e:	2300      	movne	r3, #0
 8005530:	b2db      	uxtb	r3, r3
 8005532:	2b00      	cmp	r3, #0
 8005534:	d001      	beq.n	800553a <HAL_I2C_Init+0x196>
 8005536:	2301      	movs	r3, #1
 8005538:	e022      	b.n	8005580 <HAL_I2C_Init+0x1dc>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	689b      	ldr	r3, [r3, #8]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d10e      	bne.n	8005560 <HAL_I2C_Init+0x1bc>
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	1e58      	subs	r0, r3, #1
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6859      	ldr	r1, [r3, #4]
 800554a:	460b      	mov	r3, r1
 800554c:	005b      	lsls	r3, r3, #1
 800554e:	440b      	add	r3, r1
 8005550:	fbb0 f3f3 	udiv	r3, r0, r3
 8005554:	3301      	adds	r3, #1
 8005556:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800555a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800555e:	e00f      	b.n	8005580 <HAL_I2C_Init+0x1dc>
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	1e58      	subs	r0, r3, #1
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6859      	ldr	r1, [r3, #4]
 8005568:	460b      	mov	r3, r1
 800556a:	009b      	lsls	r3, r3, #2
 800556c:	440b      	add	r3, r1
 800556e:	0099      	lsls	r1, r3, #2
 8005570:	440b      	add	r3, r1
 8005572:	fbb0 f3f3 	udiv	r3, r0, r3
 8005576:	3301      	adds	r3, #1
 8005578:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800557c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005580:	6879      	ldr	r1, [r7, #4]
 8005582:	6809      	ldr	r1, [r1, #0]
 8005584:	4313      	orrs	r3, r2
 8005586:	61cb      	str	r3, [r1, #28]
=======
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	69db      	ldr	r3, [r3, #28]
 800546a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800546e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	685b      	ldr	r3, [r3, #4]
 8005476:	495c      	ldr	r1, [pc, #368]	; (80055e8 <HAL_I2C_Init+0x274>)
 8005478:	428b      	cmp	r3, r1
 800547a:	d819      	bhi.n	80054b0 <HAL_I2C_Init+0x13c>
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	1e59      	subs	r1, r3, #1
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	685b      	ldr	r3, [r3, #4]
 8005484:	005b      	lsls	r3, r3, #1
 8005486:	fbb1 f3f3 	udiv	r3, r1, r3
 800548a:	1c59      	adds	r1, r3, #1
 800548c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005490:	400b      	ands	r3, r1
 8005492:	2b00      	cmp	r3, #0
 8005494:	d00a      	beq.n	80054ac <HAL_I2C_Init+0x138>
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	1e59      	subs	r1, r3, #1
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	685b      	ldr	r3, [r3, #4]
 800549e:	005b      	lsls	r3, r3, #1
 80054a0:	fbb1 f3f3 	udiv	r3, r1, r3
 80054a4:	3301      	adds	r3, #1
 80054a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80054aa:	e051      	b.n	8005550 <HAL_I2C_Init+0x1dc>
 80054ac:	2304      	movs	r3, #4
 80054ae:	e04f      	b.n	8005550 <HAL_I2C_Init+0x1dc>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	689b      	ldr	r3, [r3, #8]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d111      	bne.n	80054dc <HAL_I2C_Init+0x168>
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	1e58      	subs	r0, r3, #1
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6859      	ldr	r1, [r3, #4]
 80054c0:	460b      	mov	r3, r1
 80054c2:	005b      	lsls	r3, r3, #1
 80054c4:	440b      	add	r3, r1
 80054c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80054ca:	3301      	adds	r3, #1
 80054cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	bf0c      	ite	eq
 80054d4:	2301      	moveq	r3, #1
 80054d6:	2300      	movne	r3, #0
 80054d8:	b2db      	uxtb	r3, r3
 80054da:	e012      	b.n	8005502 <HAL_I2C_Init+0x18e>
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	1e58      	subs	r0, r3, #1
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6859      	ldr	r1, [r3, #4]
 80054e4:	460b      	mov	r3, r1
 80054e6:	009b      	lsls	r3, r3, #2
 80054e8:	440b      	add	r3, r1
 80054ea:	0099      	lsls	r1, r3, #2
 80054ec:	440b      	add	r3, r1
 80054ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80054f2:	3301      	adds	r3, #1
 80054f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	bf0c      	ite	eq
 80054fc:	2301      	moveq	r3, #1
 80054fe:	2300      	movne	r3, #0
 8005500:	b2db      	uxtb	r3, r3
 8005502:	2b00      	cmp	r3, #0
 8005504:	d001      	beq.n	800550a <HAL_I2C_Init+0x196>
 8005506:	2301      	movs	r3, #1
 8005508:	e022      	b.n	8005550 <HAL_I2C_Init+0x1dc>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	689b      	ldr	r3, [r3, #8]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d10e      	bne.n	8005530 <HAL_I2C_Init+0x1bc>
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	1e58      	subs	r0, r3, #1
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6859      	ldr	r1, [r3, #4]
 800551a:	460b      	mov	r3, r1
 800551c:	005b      	lsls	r3, r3, #1
 800551e:	440b      	add	r3, r1
 8005520:	fbb0 f3f3 	udiv	r3, r0, r3
 8005524:	3301      	adds	r3, #1
 8005526:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800552a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800552e:	e00f      	b.n	8005550 <HAL_I2C_Init+0x1dc>
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	1e58      	subs	r0, r3, #1
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6859      	ldr	r1, [r3, #4]
 8005538:	460b      	mov	r3, r1
 800553a:	009b      	lsls	r3, r3, #2
 800553c:	440b      	add	r3, r1
 800553e:	0099      	lsls	r1, r3, #2
 8005540:	440b      	add	r3, r1
 8005542:	fbb0 f3f3 	udiv	r3, r0, r3
 8005546:	3301      	adds	r3, #1
 8005548:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800554c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005550:	6879      	ldr	r1, [r7, #4]
 8005552:	6809      	ldr	r1, [r1, #0]
 8005554:	4313      	orrs	r3, r2
 8005556:	61cb      	str	r3, [r1, #28]
>>>>>>> Stashed changes

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
<<<<<<< Updated upstream
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	69da      	ldr	r2, [r3, #28]
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6a1b      	ldr	r3, [r3, #32]
 800559a:	431a      	orrs	r2, r3
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	430a      	orrs	r2, r1
 80055a2:	601a      	str	r2, [r3, #0]
=======
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	69da      	ldr	r2, [r3, #28]
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6a1b      	ldr	r3, [r3, #32]
 800556a:	431a      	orrs	r2, r3
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	430a      	orrs	r2, r1
 8005572:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
<<<<<<< Updated upstream
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	689b      	ldr	r3, [r3, #8]
 80055aa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80055ae:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80055b2:	687a      	ldr	r2, [r7, #4]
 80055b4:	6911      	ldr	r1, [r2, #16]
 80055b6:	687a      	ldr	r2, [r7, #4]
 80055b8:	68d2      	ldr	r2, [r2, #12]
 80055ba:	4311      	orrs	r1, r2
 80055bc:	687a      	ldr	r2, [r7, #4]
 80055be:	6812      	ldr	r2, [r2, #0]
 80055c0:	430b      	orrs	r3, r1
 80055c2:	6093      	str	r3, [r2, #8]
=======
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	689b      	ldr	r3, [r3, #8]
 800557a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800557e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005582:	687a      	ldr	r2, [r7, #4]
 8005584:	6911      	ldr	r1, [r2, #16]
 8005586:	687a      	ldr	r2, [r7, #4]
 8005588:	68d2      	ldr	r2, [r2, #12]
 800558a:	4311      	orrs	r1, r2
 800558c:	687a      	ldr	r2, [r7, #4]
 800558e:	6812      	ldr	r2, [r2, #0]
 8005590:	430b      	orrs	r3, r1
 8005592:	6093      	str	r3, [r2, #8]
>>>>>>> Stashed changes

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
<<<<<<< Updated upstream
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	68db      	ldr	r3, [r3, #12]
 80055ca:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	695a      	ldr	r2, [r3, #20]
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	699b      	ldr	r3, [r3, #24]
 80055d6:	431a      	orrs	r2, r3
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	430a      	orrs	r2, r1
 80055de:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	681a      	ldr	r2, [r3, #0]
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f042 0201 	orr.w	r2, r2, #1
 80055ee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2200      	movs	r2, #0
 80055f4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2220      	movs	r2, #32
 80055fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2200      	movs	r2, #0
 8005602:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2200      	movs	r2, #0
 8005608:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800560c:	2300      	movs	r3, #0
}
 800560e:	4618      	mov	r0, r3
 8005610:	3710      	adds	r7, #16
 8005612:	46bd      	mov	sp, r7
 8005614:	bd80      	pop	{r7, pc}
 8005616:	bf00      	nop
 8005618:	000186a0 	.word	0x000186a0
 800561c:	001e847f 	.word	0x001e847f
 8005620:	003d08ff 	.word	0x003d08ff
 8005624:	431bde83 	.word	0x431bde83
 8005628:	10624dd3 	.word	0x10624dd3

0800562c <HAL_I2CEx_ConfigAnalogFilter>:
=======
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	68db      	ldr	r3, [r3, #12]
 800559a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	695a      	ldr	r2, [r3, #20]
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	699b      	ldr	r3, [r3, #24]
 80055a6:	431a      	orrs	r2, r3
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	430a      	orrs	r2, r1
 80055ae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	681a      	ldr	r2, [r3, #0]
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f042 0201 	orr.w	r2, r2, #1
 80055be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2200      	movs	r2, #0
 80055c4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2220      	movs	r2, #32
 80055ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2200      	movs	r2, #0
 80055d2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2200      	movs	r2, #0
 80055d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80055dc:	2300      	movs	r3, #0
}
 80055de:	4618      	mov	r0, r3
 80055e0:	3710      	adds	r7, #16
 80055e2:	46bd      	mov	sp, r7
 80055e4:	bd80      	pop	{r7, pc}
 80055e6:	bf00      	nop
 80055e8:	000186a0 	.word	0x000186a0
 80055ec:	001e847f 	.word	0x001e847f
 80055f0:	003d08ff 	.word	0x003d08ff
 80055f4:	431bde83 	.word	0x431bde83
 80055f8:	10624dd3 	.word	0x10624dd3

080055fc <HAL_I2CEx_ConfigAnalogFilter>:
>>>>>>> Stashed changes
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
<<<<<<< Updated upstream
 800562c:	b480      	push	{r7}
 800562e:	b083      	sub	sp, #12
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
 8005634:	6039      	str	r1, [r7, #0]
=======
 80055fc:	b480      	push	{r7}
 80055fe:	b083      	sub	sp, #12
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
 8005604:	6039      	str	r1, [r7, #0]
>>>>>>> Stashed changes
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
<<<<<<< Updated upstream
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800563c:	b2db      	uxtb	r3, r3
 800563e:	2b20      	cmp	r3, #32
 8005640:	d129      	bne.n	8005696 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2224      	movs	r2, #36	; 0x24
 8005646:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	681a      	ldr	r2, [r3, #0]
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f022 0201 	bic.w	r2, r2, #1
 8005658:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f022 0210 	bic.w	r2, r2, #16
 8005668:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	683a      	ldr	r2, [r7, #0]
 8005676:	430a      	orrs	r2, r1
 8005678:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	681a      	ldr	r2, [r3, #0]
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f042 0201 	orr.w	r2, r2, #1
 8005688:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2220      	movs	r2, #32
 800568e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005692:	2300      	movs	r3, #0
 8005694:	e000      	b.n	8005698 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
=======
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800560c:	b2db      	uxtb	r3, r3
 800560e:	2b20      	cmp	r3, #32
 8005610:	d129      	bne.n	8005666 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2224      	movs	r2, #36	; 0x24
 8005616:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	681a      	ldr	r2, [r3, #0]
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f022 0201 	bic.w	r2, r2, #1
 8005628:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f022 0210 	bic.w	r2, r2, #16
 8005638:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	683a      	ldr	r2, [r7, #0]
 8005646:	430a      	orrs	r2, r1
 8005648:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	681a      	ldr	r2, [r3, #0]
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f042 0201 	orr.w	r2, r2, #1
 8005658:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2220      	movs	r2, #32
 800565e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005662:	2300      	movs	r3, #0
 8005664:	e000      	b.n	8005668 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
>>>>>>> Stashed changes
  }
  else
  {
    return HAL_BUSY;
<<<<<<< Updated upstream
 8005696:	2302      	movs	r3, #2
  }
}
 8005698:	4618      	mov	r0, r3
 800569a:	370c      	adds	r7, #12
 800569c:	46bd      	mov	sp, r7
 800569e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a2:	4770      	bx	lr

080056a4 <HAL_I2CEx_ConfigDigitalFilter>:
=======
 8005666:	2302      	movs	r3, #2
  }
}
 8005668:	4618      	mov	r0, r3
 800566a:	370c      	adds	r7, #12
 800566c:	46bd      	mov	sp, r7
 800566e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005672:	4770      	bx	lr

08005674 <HAL_I2CEx_ConfigDigitalFilter>:
>>>>>>> Stashed changes
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
<<<<<<< Updated upstream
 80056a4:	b480      	push	{r7}
 80056a6:	b085      	sub	sp, #20
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
 80056ac:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80056ae:	2300      	movs	r3, #0
 80056b0:	81fb      	strh	r3, [r7, #14]
=======
 8005674:	b480      	push	{r7}
 8005676:	b085      	sub	sp, #20
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
 800567c:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800567e:	2300      	movs	r3, #0
 8005680:	81fb      	strh	r3, [r7, #14]
>>>>>>> Stashed changes

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
<<<<<<< Updated upstream
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056b8:	b2db      	uxtb	r3, r3
 80056ba:	2b20      	cmp	r3, #32
 80056bc:	d12a      	bne.n	8005714 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2224      	movs	r2, #36	; 0x24
 80056c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	681a      	ldr	r2, [r3, #0]
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f022 0201 	bic.w	r2, r2, #1
 80056d4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056dc:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80056de:	89fb      	ldrh	r3, [r7, #14]
 80056e0:	f023 030f 	bic.w	r3, r3, #15
 80056e4:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	b29a      	uxth	r2, r3
 80056ea:	89fb      	ldrh	r3, [r7, #14]
 80056ec:	4313      	orrs	r3, r2
 80056ee:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	89fa      	ldrh	r2, [r7, #14]
 80056f6:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	681a      	ldr	r2, [r3, #0]
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f042 0201 	orr.w	r2, r2, #1
 8005706:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2220      	movs	r2, #32
 800570c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005710:	2300      	movs	r3, #0
 8005712:	e000      	b.n	8005716 <HAL_I2CEx_ConfigDigitalFilter+0x72>
=======
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005688:	b2db      	uxtb	r3, r3
 800568a:	2b20      	cmp	r3, #32
 800568c:	d12a      	bne.n	80056e4 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2224      	movs	r2, #36	; 0x24
 8005692:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	681a      	ldr	r2, [r3, #0]
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f022 0201 	bic.w	r2, r2, #1
 80056a4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ac:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80056ae:	89fb      	ldrh	r3, [r7, #14]
 80056b0:	f023 030f 	bic.w	r3, r3, #15
 80056b4:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	b29a      	uxth	r2, r3
 80056ba:	89fb      	ldrh	r3, [r7, #14]
 80056bc:	4313      	orrs	r3, r2
 80056be:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	89fa      	ldrh	r2, [r7, #14]
 80056c6:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	681a      	ldr	r2, [r3, #0]
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f042 0201 	orr.w	r2, r2, #1
 80056d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2220      	movs	r2, #32
 80056dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80056e0:	2300      	movs	r3, #0
 80056e2:	e000      	b.n	80056e6 <HAL_I2CEx_ConfigDigitalFilter+0x72>
>>>>>>> Stashed changes
  }
  else
  {
    return HAL_BUSY;
<<<<<<< Updated upstream
 8005714:	2302      	movs	r3, #2
  }
}
 8005716:	4618      	mov	r0, r3
 8005718:	3714      	adds	r7, #20
 800571a:	46bd      	mov	sp, r7
 800571c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005720:	4770      	bx	lr
	...

08005724 <HAL_PWREx_EnableOverDrive>:
=======
 80056e4:	2302      	movs	r3, #2
  }
}
 80056e6:	4618      	mov	r0, r3
 80056e8:	3714      	adds	r7, #20
 80056ea:	46bd      	mov	sp, r7
 80056ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f0:	4770      	bx	lr
	...

080056f4 <HAL_PWREx_EnableOverDrive>:
>>>>>>> Stashed changes
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
<<<<<<< Updated upstream
 8005724:	b580      	push	{r7, lr}
 8005726:	b082      	sub	sp, #8
 8005728:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800572a:	2300      	movs	r3, #0
 800572c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800572e:	2300      	movs	r3, #0
 8005730:	603b      	str	r3, [r7, #0]
 8005732:	4b20      	ldr	r3, [pc, #128]	; (80057b4 <HAL_PWREx_EnableOverDrive+0x90>)
 8005734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005736:	4a1f      	ldr	r2, [pc, #124]	; (80057b4 <HAL_PWREx_EnableOverDrive+0x90>)
 8005738:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800573c:	6413      	str	r3, [r2, #64]	; 0x40
 800573e:	4b1d      	ldr	r3, [pc, #116]	; (80057b4 <HAL_PWREx_EnableOverDrive+0x90>)
 8005740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005742:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005746:	603b      	str	r3, [r7, #0]
 8005748:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800574a:	4b1b      	ldr	r3, [pc, #108]	; (80057b8 <HAL_PWREx_EnableOverDrive+0x94>)
 800574c:	2201      	movs	r2, #1
 800574e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005750:	f7fc fcac 	bl	80020ac <HAL_GetTick>
 8005754:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005756:	e009      	b.n	800576c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005758:	f7fc fca8 	bl	80020ac <HAL_GetTick>
 800575c:	4602      	mov	r2, r0
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	1ad3      	subs	r3, r2, r3
 8005762:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005766:	d901      	bls.n	800576c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8005768:	2303      	movs	r3, #3
 800576a:	e01f      	b.n	80057ac <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800576c:	4b13      	ldr	r3, [pc, #76]	; (80057bc <HAL_PWREx_EnableOverDrive+0x98>)
 800576e:	685b      	ldr	r3, [r3, #4]
 8005770:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005774:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005778:	d1ee      	bne.n	8005758 <HAL_PWREx_EnableOverDrive+0x34>
=======
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b082      	sub	sp, #8
 80056f8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80056fa:	2300      	movs	r3, #0
 80056fc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80056fe:	2300      	movs	r3, #0
 8005700:	603b      	str	r3, [r7, #0]
 8005702:	4b20      	ldr	r3, [pc, #128]	; (8005784 <HAL_PWREx_EnableOverDrive+0x90>)
 8005704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005706:	4a1f      	ldr	r2, [pc, #124]	; (8005784 <HAL_PWREx_EnableOverDrive+0x90>)
 8005708:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800570c:	6413      	str	r3, [r2, #64]	; 0x40
 800570e:	4b1d      	ldr	r3, [pc, #116]	; (8005784 <HAL_PWREx_EnableOverDrive+0x90>)
 8005710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005712:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005716:	603b      	str	r3, [r7, #0]
 8005718:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800571a:	4b1b      	ldr	r3, [pc, #108]	; (8005788 <HAL_PWREx_EnableOverDrive+0x94>)
 800571c:	2201      	movs	r2, #1
 800571e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005720:	f7fc fcc6 	bl	80020b0 <HAL_GetTick>
 8005724:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005726:	e009      	b.n	800573c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005728:	f7fc fcc2 	bl	80020b0 <HAL_GetTick>
 800572c:	4602      	mov	r2, r0
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	1ad3      	subs	r3, r2, r3
 8005732:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005736:	d901      	bls.n	800573c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8005738:	2303      	movs	r3, #3
 800573a:	e01f      	b.n	800577c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800573c:	4b13      	ldr	r3, [pc, #76]	; (800578c <HAL_PWREx_EnableOverDrive+0x98>)
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005744:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005748:	d1ee      	bne.n	8005728 <HAL_PWREx_EnableOverDrive+0x34>
>>>>>>> Stashed changes
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
<<<<<<< Updated upstream
 800577a:	4b11      	ldr	r3, [pc, #68]	; (80057c0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800577c:	2201      	movs	r2, #1
 800577e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005780:	f7fc fc94 	bl	80020ac <HAL_GetTick>
 8005784:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005786:	e009      	b.n	800579c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005788:	f7fc fc90 	bl	80020ac <HAL_GetTick>
 800578c:	4602      	mov	r2, r0
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	1ad3      	subs	r3, r2, r3
 8005792:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005796:	d901      	bls.n	800579c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8005798:	2303      	movs	r3, #3
 800579a:	e007      	b.n	80057ac <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800579c:	4b07      	ldr	r3, [pc, #28]	; (80057bc <HAL_PWREx_EnableOverDrive+0x98>)
 800579e:	685b      	ldr	r3, [r3, #4]
 80057a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80057a8:	d1ee      	bne.n	8005788 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80057aa:	2300      	movs	r3, #0
}
 80057ac:	4618      	mov	r0, r3
 80057ae:	3708      	adds	r7, #8
 80057b0:	46bd      	mov	sp, r7
 80057b2:	bd80      	pop	{r7, pc}
 80057b4:	40023800 	.word	0x40023800
 80057b8:	420e0040 	.word	0x420e0040
 80057bc:	40007000 	.word	0x40007000
 80057c0:	420e0044 	.word	0x420e0044

080057c4 <HAL_RCC_OscConfig>:
=======
 800574a:	4b11      	ldr	r3, [pc, #68]	; (8005790 <HAL_PWREx_EnableOverDrive+0x9c>)
 800574c:	2201      	movs	r2, #1
 800574e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005750:	f7fc fcae 	bl	80020b0 <HAL_GetTick>
 8005754:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005756:	e009      	b.n	800576c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005758:	f7fc fcaa 	bl	80020b0 <HAL_GetTick>
 800575c:	4602      	mov	r2, r0
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	1ad3      	subs	r3, r2, r3
 8005762:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005766:	d901      	bls.n	800576c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8005768:	2303      	movs	r3, #3
 800576a:	e007      	b.n	800577c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800576c:	4b07      	ldr	r3, [pc, #28]	; (800578c <HAL_PWREx_EnableOverDrive+0x98>)
 800576e:	685b      	ldr	r3, [r3, #4]
 8005770:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005774:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005778:	d1ee      	bne.n	8005758 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800577a:	2300      	movs	r3, #0
}
 800577c:	4618      	mov	r0, r3
 800577e:	3708      	adds	r7, #8
 8005780:	46bd      	mov	sp, r7
 8005782:	bd80      	pop	{r7, pc}
 8005784:	40023800 	.word	0x40023800
 8005788:	420e0040 	.word	0x420e0040
 800578c:	40007000 	.word	0x40007000
 8005790:	420e0044 	.word	0x420e0044

08005794 <HAL_RCC_OscConfig>:
>>>>>>> Stashed changes
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
<<<<<<< Updated upstream
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b086      	sub	sp, #24
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
=======
 8005794:	b580      	push	{r7, lr}
 8005796:	b086      	sub	sp, #24
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
<<<<<<< Updated upstream
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d101      	bne.n	80057d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80057d2:	2301      	movs	r3, #1
 80057d4:	e264      	b.n	8005ca0 <HAL_RCC_OscConfig+0x4dc>
=======
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d101      	bne.n	80057a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80057a2:	2301      	movs	r3, #1
 80057a4:	e264      	b.n	8005c70 <HAL_RCC_OscConfig+0x4dc>
>>>>>>> Stashed changes
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
<<<<<<< Updated upstream
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f003 0301 	and.w	r3, r3, #1
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d075      	beq.n	80058ce <HAL_RCC_OscConfig+0x10a>
=======
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f003 0301 	and.w	r3, r3, #1
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d075      	beq.n	800589e <HAL_RCC_OscConfig+0x10a>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
<<<<<<< Updated upstream
 80057e2:	4ba3      	ldr	r3, [pc, #652]	; (8005a70 <HAL_RCC_OscConfig+0x2ac>)
 80057e4:	689b      	ldr	r3, [r3, #8]
 80057e6:	f003 030c 	and.w	r3, r3, #12
 80057ea:	2b04      	cmp	r3, #4
 80057ec:	d00c      	beq.n	8005808 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80057ee:	4ba0      	ldr	r3, [pc, #640]	; (8005a70 <HAL_RCC_OscConfig+0x2ac>)
 80057f0:	689b      	ldr	r3, [r3, #8]
 80057f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80057f6:	2b08      	cmp	r3, #8
 80057f8:	d112      	bne.n	8005820 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80057fa:	4b9d      	ldr	r3, [pc, #628]	; (8005a70 <HAL_RCC_OscConfig+0x2ac>)
 80057fc:	685b      	ldr	r3, [r3, #4]
 80057fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005802:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005806:	d10b      	bne.n	8005820 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005808:	4b99      	ldr	r3, [pc, #612]	; (8005a70 <HAL_RCC_OscConfig+0x2ac>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005810:	2b00      	cmp	r3, #0
 8005812:	d05b      	beq.n	80058cc <HAL_RCC_OscConfig+0x108>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d157      	bne.n	80058cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800581c:	2301      	movs	r3, #1
 800581e:	e23f      	b.n	8005ca0 <HAL_RCC_OscConfig+0x4dc>
=======
 80057b2:	4ba3      	ldr	r3, [pc, #652]	; (8005a40 <HAL_RCC_OscConfig+0x2ac>)
 80057b4:	689b      	ldr	r3, [r3, #8]
 80057b6:	f003 030c 	and.w	r3, r3, #12
 80057ba:	2b04      	cmp	r3, #4
 80057bc:	d00c      	beq.n	80057d8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80057be:	4ba0      	ldr	r3, [pc, #640]	; (8005a40 <HAL_RCC_OscConfig+0x2ac>)
 80057c0:	689b      	ldr	r3, [r3, #8]
 80057c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80057c6:	2b08      	cmp	r3, #8
 80057c8:	d112      	bne.n	80057f0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80057ca:	4b9d      	ldr	r3, [pc, #628]	; (8005a40 <HAL_RCC_OscConfig+0x2ac>)
 80057cc:	685b      	ldr	r3, [r3, #4]
 80057ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80057d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80057d6:	d10b      	bne.n	80057f0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057d8:	4b99      	ldr	r3, [pc, #612]	; (8005a40 <HAL_RCC_OscConfig+0x2ac>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d05b      	beq.n	800589c <HAL_RCC_OscConfig+0x108>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	685b      	ldr	r3, [r3, #4]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d157      	bne.n	800589c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80057ec:	2301      	movs	r3, #1
 80057ee:	e23f      	b.n	8005c70 <HAL_RCC_OscConfig+0x4dc>
>>>>>>> Stashed changes
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
<<<<<<< Updated upstream
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	685b      	ldr	r3, [r3, #4]
 8005824:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005828:	d106      	bne.n	8005838 <HAL_RCC_OscConfig+0x74>
 800582a:	4b91      	ldr	r3, [pc, #580]	; (8005a70 <HAL_RCC_OscConfig+0x2ac>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	4a90      	ldr	r2, [pc, #576]	; (8005a70 <HAL_RCC_OscConfig+0x2ac>)
 8005830:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005834:	6013      	str	r3, [r2, #0]
 8005836:	e01d      	b.n	8005874 <HAL_RCC_OscConfig+0xb0>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	685b      	ldr	r3, [r3, #4]
 800583c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005840:	d10c      	bne.n	800585c <HAL_RCC_OscConfig+0x98>
 8005842:	4b8b      	ldr	r3, [pc, #556]	; (8005a70 <HAL_RCC_OscConfig+0x2ac>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4a8a      	ldr	r2, [pc, #552]	; (8005a70 <HAL_RCC_OscConfig+0x2ac>)
 8005848:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800584c:	6013      	str	r3, [r2, #0]
 800584e:	4b88      	ldr	r3, [pc, #544]	; (8005a70 <HAL_RCC_OscConfig+0x2ac>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4a87      	ldr	r2, [pc, #540]	; (8005a70 <HAL_RCC_OscConfig+0x2ac>)
 8005854:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005858:	6013      	str	r3, [r2, #0]
 800585a:	e00b      	b.n	8005874 <HAL_RCC_OscConfig+0xb0>
 800585c:	4b84      	ldr	r3, [pc, #528]	; (8005a70 <HAL_RCC_OscConfig+0x2ac>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4a83      	ldr	r2, [pc, #524]	; (8005a70 <HAL_RCC_OscConfig+0x2ac>)
 8005862:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005866:	6013      	str	r3, [r2, #0]
 8005868:	4b81      	ldr	r3, [pc, #516]	; (8005a70 <HAL_RCC_OscConfig+0x2ac>)
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4a80      	ldr	r2, [pc, #512]	; (8005a70 <HAL_RCC_OscConfig+0x2ac>)
 800586e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005872:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	685b      	ldr	r3, [r3, #4]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d013      	beq.n	80058a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800587c:	f7fc fc16 	bl	80020ac <HAL_GetTick>
 8005880:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005882:	e008      	b.n	8005896 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005884:	f7fc fc12 	bl	80020ac <HAL_GetTick>
 8005888:	4602      	mov	r2, r0
 800588a:	693b      	ldr	r3, [r7, #16]
 800588c:	1ad3      	subs	r3, r2, r3
 800588e:	2b64      	cmp	r3, #100	; 0x64
 8005890:	d901      	bls.n	8005896 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005892:	2303      	movs	r3, #3
 8005894:	e204      	b.n	8005ca0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005896:	4b76      	ldr	r3, [pc, #472]	; (8005a70 <HAL_RCC_OscConfig+0x2ac>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d0f0      	beq.n	8005884 <HAL_RCC_OscConfig+0xc0>
 80058a2:	e014      	b.n	80058ce <HAL_RCC_OscConfig+0x10a>
=======
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	685b      	ldr	r3, [r3, #4]
 80057f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057f8:	d106      	bne.n	8005808 <HAL_RCC_OscConfig+0x74>
 80057fa:	4b91      	ldr	r3, [pc, #580]	; (8005a40 <HAL_RCC_OscConfig+0x2ac>)
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	4a90      	ldr	r2, [pc, #576]	; (8005a40 <HAL_RCC_OscConfig+0x2ac>)
 8005800:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005804:	6013      	str	r3, [r2, #0]
 8005806:	e01d      	b.n	8005844 <HAL_RCC_OscConfig+0xb0>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	685b      	ldr	r3, [r3, #4]
 800580c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005810:	d10c      	bne.n	800582c <HAL_RCC_OscConfig+0x98>
 8005812:	4b8b      	ldr	r3, [pc, #556]	; (8005a40 <HAL_RCC_OscConfig+0x2ac>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4a8a      	ldr	r2, [pc, #552]	; (8005a40 <HAL_RCC_OscConfig+0x2ac>)
 8005818:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800581c:	6013      	str	r3, [r2, #0]
 800581e:	4b88      	ldr	r3, [pc, #544]	; (8005a40 <HAL_RCC_OscConfig+0x2ac>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4a87      	ldr	r2, [pc, #540]	; (8005a40 <HAL_RCC_OscConfig+0x2ac>)
 8005824:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005828:	6013      	str	r3, [r2, #0]
 800582a:	e00b      	b.n	8005844 <HAL_RCC_OscConfig+0xb0>
 800582c:	4b84      	ldr	r3, [pc, #528]	; (8005a40 <HAL_RCC_OscConfig+0x2ac>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4a83      	ldr	r2, [pc, #524]	; (8005a40 <HAL_RCC_OscConfig+0x2ac>)
 8005832:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005836:	6013      	str	r3, [r2, #0]
 8005838:	4b81      	ldr	r3, [pc, #516]	; (8005a40 <HAL_RCC_OscConfig+0x2ac>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4a80      	ldr	r2, [pc, #512]	; (8005a40 <HAL_RCC_OscConfig+0x2ac>)
 800583e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005842:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	685b      	ldr	r3, [r3, #4]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d013      	beq.n	8005874 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800584c:	f7fc fc30 	bl	80020b0 <HAL_GetTick>
 8005850:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005852:	e008      	b.n	8005866 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005854:	f7fc fc2c 	bl	80020b0 <HAL_GetTick>
 8005858:	4602      	mov	r2, r0
 800585a:	693b      	ldr	r3, [r7, #16]
 800585c:	1ad3      	subs	r3, r2, r3
 800585e:	2b64      	cmp	r3, #100	; 0x64
 8005860:	d901      	bls.n	8005866 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005862:	2303      	movs	r3, #3
 8005864:	e204      	b.n	8005c70 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005866:	4b76      	ldr	r3, [pc, #472]	; (8005a40 <HAL_RCC_OscConfig+0x2ac>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800586e:	2b00      	cmp	r3, #0
 8005870:	d0f0      	beq.n	8005854 <HAL_RCC_OscConfig+0xc0>
 8005872:	e014      	b.n	800589e <HAL_RCC_OscConfig+0x10a>
>>>>>>> Stashed changes
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
<<<<<<< Updated upstream
 80058a4:	f7fc fc02 	bl	80020ac <HAL_GetTick>
 80058a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80058aa:	e008      	b.n	80058be <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80058ac:	f7fc fbfe 	bl	80020ac <HAL_GetTick>
 80058b0:	4602      	mov	r2, r0
 80058b2:	693b      	ldr	r3, [r7, #16]
 80058b4:	1ad3      	subs	r3, r2, r3
 80058b6:	2b64      	cmp	r3, #100	; 0x64
 80058b8:	d901      	bls.n	80058be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80058ba:	2303      	movs	r3, #3
 80058bc:	e1f0      	b.n	8005ca0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80058be:	4b6c      	ldr	r3, [pc, #432]	; (8005a70 <HAL_RCC_OscConfig+0x2ac>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d1f0      	bne.n	80058ac <HAL_RCC_OscConfig+0xe8>
 80058ca:	e000      	b.n	80058ce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80058cc:	bf00      	nop
=======
 8005874:	f7fc fc1c 	bl	80020b0 <HAL_GetTick>
 8005878:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800587a:	e008      	b.n	800588e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800587c:	f7fc fc18 	bl	80020b0 <HAL_GetTick>
 8005880:	4602      	mov	r2, r0
 8005882:	693b      	ldr	r3, [r7, #16]
 8005884:	1ad3      	subs	r3, r2, r3
 8005886:	2b64      	cmp	r3, #100	; 0x64
 8005888:	d901      	bls.n	800588e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800588a:	2303      	movs	r3, #3
 800588c:	e1f0      	b.n	8005c70 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800588e:	4b6c      	ldr	r3, [pc, #432]	; (8005a40 <HAL_RCC_OscConfig+0x2ac>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005896:	2b00      	cmp	r3, #0
 8005898:	d1f0      	bne.n	800587c <HAL_RCC_OscConfig+0xe8>
 800589a:	e000      	b.n	800589e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800589c:	bf00      	nop
>>>>>>> Stashed changes
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
<<<<<<< Updated upstream
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f003 0302 	and.w	r3, r3, #2
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d063      	beq.n	80059a2 <HAL_RCC_OscConfig+0x1de>
=======
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f003 0302 	and.w	r3, r3, #2
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d063      	beq.n	8005972 <HAL_RCC_OscConfig+0x1de>
>>>>>>> Stashed changes
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
<<<<<<< Updated upstream
 80058da:	4b65      	ldr	r3, [pc, #404]	; (8005a70 <HAL_RCC_OscConfig+0x2ac>)
 80058dc:	689b      	ldr	r3, [r3, #8]
 80058de:	f003 030c 	and.w	r3, r3, #12
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d00b      	beq.n	80058fe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80058e6:	4b62      	ldr	r3, [pc, #392]	; (8005a70 <HAL_RCC_OscConfig+0x2ac>)
 80058e8:	689b      	ldr	r3, [r3, #8]
 80058ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80058ee:	2b08      	cmp	r3, #8
 80058f0:	d11c      	bne.n	800592c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80058f2:	4b5f      	ldr	r3, [pc, #380]	; (8005a70 <HAL_RCC_OscConfig+0x2ac>)
 80058f4:	685b      	ldr	r3, [r3, #4]
 80058f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d116      	bne.n	800592c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80058fe:	4b5c      	ldr	r3, [pc, #368]	; (8005a70 <HAL_RCC_OscConfig+0x2ac>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f003 0302 	and.w	r3, r3, #2
 8005906:	2b00      	cmp	r3, #0
 8005908:	d005      	beq.n	8005916 <HAL_RCC_OscConfig+0x152>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	68db      	ldr	r3, [r3, #12]
 800590e:	2b01      	cmp	r3, #1
 8005910:	d001      	beq.n	8005916 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005912:	2301      	movs	r3, #1
 8005914:	e1c4      	b.n	8005ca0 <HAL_RCC_OscConfig+0x4dc>
=======
 80058aa:	4b65      	ldr	r3, [pc, #404]	; (8005a40 <HAL_RCC_OscConfig+0x2ac>)
 80058ac:	689b      	ldr	r3, [r3, #8]
 80058ae:	f003 030c 	and.w	r3, r3, #12
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d00b      	beq.n	80058ce <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80058b6:	4b62      	ldr	r3, [pc, #392]	; (8005a40 <HAL_RCC_OscConfig+0x2ac>)
 80058b8:	689b      	ldr	r3, [r3, #8]
 80058ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80058be:	2b08      	cmp	r3, #8
 80058c0:	d11c      	bne.n	80058fc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80058c2:	4b5f      	ldr	r3, [pc, #380]	; (8005a40 <HAL_RCC_OscConfig+0x2ac>)
 80058c4:	685b      	ldr	r3, [r3, #4]
 80058c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d116      	bne.n	80058fc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80058ce:	4b5c      	ldr	r3, [pc, #368]	; (8005a40 <HAL_RCC_OscConfig+0x2ac>)
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f003 0302 	and.w	r3, r3, #2
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d005      	beq.n	80058e6 <HAL_RCC_OscConfig+0x152>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	68db      	ldr	r3, [r3, #12]
 80058de:	2b01      	cmp	r3, #1
 80058e0:	d001      	beq.n	80058e6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80058e2:	2301      	movs	r3, #1
 80058e4:	e1c4      	b.n	8005c70 <HAL_RCC_OscConfig+0x4dc>
>>>>>>> Stashed changes
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
<<<<<<< Updated upstream
 8005916:	4b56      	ldr	r3, [pc, #344]	; (8005a70 <HAL_RCC_OscConfig+0x2ac>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	691b      	ldr	r3, [r3, #16]
 8005922:	00db      	lsls	r3, r3, #3
 8005924:	4952      	ldr	r1, [pc, #328]	; (8005a70 <HAL_RCC_OscConfig+0x2ac>)
 8005926:	4313      	orrs	r3, r2
 8005928:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800592a:	e03a      	b.n	80059a2 <HAL_RCC_OscConfig+0x1de>
=======
 80058e6:	4b56      	ldr	r3, [pc, #344]	; (8005a40 <HAL_RCC_OscConfig+0x2ac>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	691b      	ldr	r3, [r3, #16]
 80058f2:	00db      	lsls	r3, r3, #3
 80058f4:	4952      	ldr	r1, [pc, #328]	; (8005a40 <HAL_RCC_OscConfig+0x2ac>)
 80058f6:	4313      	orrs	r3, r2
 80058f8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80058fa:	e03a      	b.n	8005972 <HAL_RCC_OscConfig+0x1de>
>>>>>>> Stashed changes
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
<<<<<<< Updated upstream
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	68db      	ldr	r3, [r3, #12]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d020      	beq.n	8005976 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005934:	4b4f      	ldr	r3, [pc, #316]	; (8005a74 <HAL_RCC_OscConfig+0x2b0>)
 8005936:	2201      	movs	r2, #1
 8005938:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800593a:	f7fc fbb7 	bl	80020ac <HAL_GetTick>
 800593e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005940:	e008      	b.n	8005954 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005942:	f7fc fbb3 	bl	80020ac <HAL_GetTick>
 8005946:	4602      	mov	r2, r0
 8005948:	693b      	ldr	r3, [r7, #16]
 800594a:	1ad3      	subs	r3, r2, r3
 800594c:	2b02      	cmp	r3, #2
 800594e:	d901      	bls.n	8005954 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005950:	2303      	movs	r3, #3
 8005952:	e1a5      	b.n	8005ca0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005954:	4b46      	ldr	r3, [pc, #280]	; (8005a70 <HAL_RCC_OscConfig+0x2ac>)
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f003 0302 	and.w	r3, r3, #2
 800595c:	2b00      	cmp	r3, #0
 800595e:	d0f0      	beq.n	8005942 <HAL_RCC_OscConfig+0x17e>
=======
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	68db      	ldr	r3, [r3, #12]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d020      	beq.n	8005946 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005904:	4b4f      	ldr	r3, [pc, #316]	; (8005a44 <HAL_RCC_OscConfig+0x2b0>)
 8005906:	2201      	movs	r2, #1
 8005908:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800590a:	f7fc fbd1 	bl	80020b0 <HAL_GetTick>
 800590e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005910:	e008      	b.n	8005924 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005912:	f7fc fbcd 	bl	80020b0 <HAL_GetTick>
 8005916:	4602      	mov	r2, r0
 8005918:	693b      	ldr	r3, [r7, #16]
 800591a:	1ad3      	subs	r3, r2, r3
 800591c:	2b02      	cmp	r3, #2
 800591e:	d901      	bls.n	8005924 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005920:	2303      	movs	r3, #3
 8005922:	e1a5      	b.n	8005c70 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005924:	4b46      	ldr	r3, [pc, #280]	; (8005a40 <HAL_RCC_OscConfig+0x2ac>)
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f003 0302 	and.w	r3, r3, #2
 800592c:	2b00      	cmp	r3, #0
 800592e:	d0f0      	beq.n	8005912 <HAL_RCC_OscConfig+0x17e>
>>>>>>> Stashed changes
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
<<<<<<< Updated upstream
 8005960:	4b43      	ldr	r3, [pc, #268]	; (8005a70 <HAL_RCC_OscConfig+0x2ac>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	691b      	ldr	r3, [r3, #16]
 800596c:	00db      	lsls	r3, r3, #3
 800596e:	4940      	ldr	r1, [pc, #256]	; (8005a70 <HAL_RCC_OscConfig+0x2ac>)
 8005970:	4313      	orrs	r3, r2
 8005972:	600b      	str	r3, [r1, #0]
 8005974:	e015      	b.n	80059a2 <HAL_RCC_OscConfig+0x1de>
=======
 8005930:	4b43      	ldr	r3, [pc, #268]	; (8005a40 <HAL_RCC_OscConfig+0x2ac>)
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	691b      	ldr	r3, [r3, #16]
 800593c:	00db      	lsls	r3, r3, #3
 800593e:	4940      	ldr	r1, [pc, #256]	; (8005a40 <HAL_RCC_OscConfig+0x2ac>)
 8005940:	4313      	orrs	r3, r2
 8005942:	600b      	str	r3, [r1, #0]
 8005944:	e015      	b.n	8005972 <HAL_RCC_OscConfig+0x1de>
>>>>>>> Stashed changes
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
<<<<<<< Updated upstream
 8005976:	4b3f      	ldr	r3, [pc, #252]	; (8005a74 <HAL_RCC_OscConfig+0x2b0>)
 8005978:	2200      	movs	r2, #0
 800597a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800597c:	f7fc fb96 	bl	80020ac <HAL_GetTick>
 8005980:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005982:	e008      	b.n	8005996 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005984:	f7fc fb92 	bl	80020ac <HAL_GetTick>
 8005988:	4602      	mov	r2, r0
 800598a:	693b      	ldr	r3, [r7, #16]
 800598c:	1ad3      	subs	r3, r2, r3
 800598e:	2b02      	cmp	r3, #2
 8005990:	d901      	bls.n	8005996 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005992:	2303      	movs	r3, #3
 8005994:	e184      	b.n	8005ca0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005996:	4b36      	ldr	r3, [pc, #216]	; (8005a70 <HAL_RCC_OscConfig+0x2ac>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f003 0302 	and.w	r3, r3, #2
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d1f0      	bne.n	8005984 <HAL_RCC_OscConfig+0x1c0>
=======
 8005946:	4b3f      	ldr	r3, [pc, #252]	; (8005a44 <HAL_RCC_OscConfig+0x2b0>)
 8005948:	2200      	movs	r2, #0
 800594a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800594c:	f7fc fbb0 	bl	80020b0 <HAL_GetTick>
 8005950:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005952:	e008      	b.n	8005966 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005954:	f7fc fbac 	bl	80020b0 <HAL_GetTick>
 8005958:	4602      	mov	r2, r0
 800595a:	693b      	ldr	r3, [r7, #16]
 800595c:	1ad3      	subs	r3, r2, r3
 800595e:	2b02      	cmp	r3, #2
 8005960:	d901      	bls.n	8005966 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005962:	2303      	movs	r3, #3
 8005964:	e184      	b.n	8005c70 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005966:	4b36      	ldr	r3, [pc, #216]	; (8005a40 <HAL_RCC_OscConfig+0x2ac>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f003 0302 	and.w	r3, r3, #2
 800596e:	2b00      	cmp	r3, #0
 8005970:	d1f0      	bne.n	8005954 <HAL_RCC_OscConfig+0x1c0>
>>>>>>> Stashed changes
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
<<<<<<< Updated upstream
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f003 0308 	and.w	r3, r3, #8
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d030      	beq.n	8005a10 <HAL_RCC_OscConfig+0x24c>
=======
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f003 0308 	and.w	r3, r3, #8
 800597a:	2b00      	cmp	r3, #0
 800597c:	d030      	beq.n	80059e0 <HAL_RCC_OscConfig+0x24c>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
<<<<<<< Updated upstream
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	695b      	ldr	r3, [r3, #20]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d016      	beq.n	80059e4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80059b6:	4b30      	ldr	r3, [pc, #192]	; (8005a78 <HAL_RCC_OscConfig+0x2b4>)
 80059b8:	2201      	movs	r2, #1
 80059ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059bc:	f7fc fb76 	bl	80020ac <HAL_GetTick>
 80059c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80059c2:	e008      	b.n	80059d6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80059c4:	f7fc fb72 	bl	80020ac <HAL_GetTick>
 80059c8:	4602      	mov	r2, r0
 80059ca:	693b      	ldr	r3, [r7, #16]
 80059cc:	1ad3      	subs	r3, r2, r3
 80059ce:	2b02      	cmp	r3, #2
 80059d0:	d901      	bls.n	80059d6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80059d2:	2303      	movs	r3, #3
 80059d4:	e164      	b.n	8005ca0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80059d6:	4b26      	ldr	r3, [pc, #152]	; (8005a70 <HAL_RCC_OscConfig+0x2ac>)
 80059d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059da:	f003 0302 	and.w	r3, r3, #2
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d0f0      	beq.n	80059c4 <HAL_RCC_OscConfig+0x200>
 80059e2:	e015      	b.n	8005a10 <HAL_RCC_OscConfig+0x24c>
=======
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	695b      	ldr	r3, [r3, #20]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d016      	beq.n	80059b4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005986:	4b30      	ldr	r3, [pc, #192]	; (8005a48 <HAL_RCC_OscConfig+0x2b4>)
 8005988:	2201      	movs	r2, #1
 800598a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800598c:	f7fc fb90 	bl	80020b0 <HAL_GetTick>
 8005990:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005992:	e008      	b.n	80059a6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005994:	f7fc fb8c 	bl	80020b0 <HAL_GetTick>
 8005998:	4602      	mov	r2, r0
 800599a:	693b      	ldr	r3, [r7, #16]
 800599c:	1ad3      	subs	r3, r2, r3
 800599e:	2b02      	cmp	r3, #2
 80059a0:	d901      	bls.n	80059a6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80059a2:	2303      	movs	r3, #3
 80059a4:	e164      	b.n	8005c70 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80059a6:	4b26      	ldr	r3, [pc, #152]	; (8005a40 <HAL_RCC_OscConfig+0x2ac>)
 80059a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059aa:	f003 0302 	and.w	r3, r3, #2
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d0f0      	beq.n	8005994 <HAL_RCC_OscConfig+0x200>
 80059b2:	e015      	b.n	80059e0 <HAL_RCC_OscConfig+0x24c>
>>>>>>> Stashed changes
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
<<<<<<< Updated upstream
 80059e4:	4b24      	ldr	r3, [pc, #144]	; (8005a78 <HAL_RCC_OscConfig+0x2b4>)
 80059e6:	2200      	movs	r2, #0
 80059e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80059ea:	f7fc fb5f 	bl	80020ac <HAL_GetTick>
 80059ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80059f0:	e008      	b.n	8005a04 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80059f2:	f7fc fb5b 	bl	80020ac <HAL_GetTick>
 80059f6:	4602      	mov	r2, r0
 80059f8:	693b      	ldr	r3, [r7, #16]
 80059fa:	1ad3      	subs	r3, r2, r3
 80059fc:	2b02      	cmp	r3, #2
 80059fe:	d901      	bls.n	8005a04 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005a00:	2303      	movs	r3, #3
 8005a02:	e14d      	b.n	8005ca0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a04:	4b1a      	ldr	r3, [pc, #104]	; (8005a70 <HAL_RCC_OscConfig+0x2ac>)
 8005a06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a08:	f003 0302 	and.w	r3, r3, #2
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d1f0      	bne.n	80059f2 <HAL_RCC_OscConfig+0x22e>
=======
 80059b4:	4b24      	ldr	r3, [pc, #144]	; (8005a48 <HAL_RCC_OscConfig+0x2b4>)
 80059b6:	2200      	movs	r2, #0
 80059b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80059ba:	f7fc fb79 	bl	80020b0 <HAL_GetTick>
 80059be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80059c0:	e008      	b.n	80059d4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80059c2:	f7fc fb75 	bl	80020b0 <HAL_GetTick>
 80059c6:	4602      	mov	r2, r0
 80059c8:	693b      	ldr	r3, [r7, #16]
 80059ca:	1ad3      	subs	r3, r2, r3
 80059cc:	2b02      	cmp	r3, #2
 80059ce:	d901      	bls.n	80059d4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80059d0:	2303      	movs	r3, #3
 80059d2:	e14d      	b.n	8005c70 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80059d4:	4b1a      	ldr	r3, [pc, #104]	; (8005a40 <HAL_RCC_OscConfig+0x2ac>)
 80059d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059d8:	f003 0302 	and.w	r3, r3, #2
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d1f0      	bne.n	80059c2 <HAL_RCC_OscConfig+0x22e>
>>>>>>> Stashed changes
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
<<<<<<< Updated upstream
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f003 0304 	and.w	r3, r3, #4
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	f000 80a0 	beq.w	8005b5e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005a1e:	2300      	movs	r3, #0
 8005a20:	75fb      	strb	r3, [r7, #23]
=======
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f003 0304 	and.w	r3, r3, #4
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	f000 80a0 	beq.w	8005b2e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80059ee:	2300      	movs	r3, #0
 80059f0:	75fb      	strb	r3, [r7, #23]
>>>>>>> Stashed changes
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
<<<<<<< Updated upstream
 8005a22:	4b13      	ldr	r3, [pc, #76]	; (8005a70 <HAL_RCC_OscConfig+0x2ac>)
 8005a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d10f      	bne.n	8005a4e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a2e:	2300      	movs	r3, #0
 8005a30:	60bb      	str	r3, [r7, #8]
 8005a32:	4b0f      	ldr	r3, [pc, #60]	; (8005a70 <HAL_RCC_OscConfig+0x2ac>)
 8005a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a36:	4a0e      	ldr	r2, [pc, #56]	; (8005a70 <HAL_RCC_OscConfig+0x2ac>)
 8005a38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a3c:	6413      	str	r3, [r2, #64]	; 0x40
 8005a3e:	4b0c      	ldr	r3, [pc, #48]	; (8005a70 <HAL_RCC_OscConfig+0x2ac>)
 8005a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a46:	60bb      	str	r3, [r7, #8]
 8005a48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a4e:	4b0b      	ldr	r3, [pc, #44]	; (8005a7c <HAL_RCC_OscConfig+0x2b8>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d121      	bne.n	8005a9e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005a5a:	4b08      	ldr	r3, [pc, #32]	; (8005a7c <HAL_RCC_OscConfig+0x2b8>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4a07      	ldr	r2, [pc, #28]	; (8005a7c <HAL_RCC_OscConfig+0x2b8>)
 8005a60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005a66:	f7fc fb21 	bl	80020ac <HAL_GetTick>
 8005a6a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a6c:	e011      	b.n	8005a92 <HAL_RCC_OscConfig+0x2ce>
 8005a6e:	bf00      	nop
 8005a70:	40023800 	.word	0x40023800
 8005a74:	42470000 	.word	0x42470000
 8005a78:	42470e80 	.word	0x42470e80
 8005a7c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a80:	f7fc fb14 	bl	80020ac <HAL_GetTick>
 8005a84:	4602      	mov	r2, r0
 8005a86:	693b      	ldr	r3, [r7, #16]
 8005a88:	1ad3      	subs	r3, r2, r3
 8005a8a:	2b02      	cmp	r3, #2
 8005a8c:	d901      	bls.n	8005a92 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005a8e:	2303      	movs	r3, #3
 8005a90:	e106      	b.n	8005ca0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a92:	4b85      	ldr	r3, [pc, #532]	; (8005ca8 <HAL_RCC_OscConfig+0x4e4>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d0f0      	beq.n	8005a80 <HAL_RCC_OscConfig+0x2bc>
=======
 80059f2:	4b13      	ldr	r3, [pc, #76]	; (8005a40 <HAL_RCC_OscConfig+0x2ac>)
 80059f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d10f      	bne.n	8005a1e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80059fe:	2300      	movs	r3, #0
 8005a00:	60bb      	str	r3, [r7, #8]
 8005a02:	4b0f      	ldr	r3, [pc, #60]	; (8005a40 <HAL_RCC_OscConfig+0x2ac>)
 8005a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a06:	4a0e      	ldr	r2, [pc, #56]	; (8005a40 <HAL_RCC_OscConfig+0x2ac>)
 8005a08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a0c:	6413      	str	r3, [r2, #64]	; 0x40
 8005a0e:	4b0c      	ldr	r3, [pc, #48]	; (8005a40 <HAL_RCC_OscConfig+0x2ac>)
 8005a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a16:	60bb      	str	r3, [r7, #8]
 8005a18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a1e:	4b0b      	ldr	r3, [pc, #44]	; (8005a4c <HAL_RCC_OscConfig+0x2b8>)
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d121      	bne.n	8005a6e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005a2a:	4b08      	ldr	r3, [pc, #32]	; (8005a4c <HAL_RCC_OscConfig+0x2b8>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	4a07      	ldr	r2, [pc, #28]	; (8005a4c <HAL_RCC_OscConfig+0x2b8>)
 8005a30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005a36:	f7fc fb3b 	bl	80020b0 <HAL_GetTick>
 8005a3a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a3c:	e011      	b.n	8005a62 <HAL_RCC_OscConfig+0x2ce>
 8005a3e:	bf00      	nop
 8005a40:	40023800 	.word	0x40023800
 8005a44:	42470000 	.word	0x42470000
 8005a48:	42470e80 	.word	0x42470e80
 8005a4c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a50:	f7fc fb2e 	bl	80020b0 <HAL_GetTick>
 8005a54:	4602      	mov	r2, r0
 8005a56:	693b      	ldr	r3, [r7, #16]
 8005a58:	1ad3      	subs	r3, r2, r3
 8005a5a:	2b02      	cmp	r3, #2
 8005a5c:	d901      	bls.n	8005a62 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005a5e:	2303      	movs	r3, #3
 8005a60:	e106      	b.n	8005c70 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a62:	4b85      	ldr	r3, [pc, #532]	; (8005c78 <HAL_RCC_OscConfig+0x4e4>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d0f0      	beq.n	8005a50 <HAL_RCC_OscConfig+0x2bc>
>>>>>>> Stashed changes
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
<<<<<<< Updated upstream
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	689b      	ldr	r3, [r3, #8]
 8005aa2:	2b01      	cmp	r3, #1
 8005aa4:	d106      	bne.n	8005ab4 <HAL_RCC_OscConfig+0x2f0>
 8005aa6:	4b81      	ldr	r3, [pc, #516]	; (8005cac <HAL_RCC_OscConfig+0x4e8>)
 8005aa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005aaa:	4a80      	ldr	r2, [pc, #512]	; (8005cac <HAL_RCC_OscConfig+0x4e8>)
 8005aac:	f043 0301 	orr.w	r3, r3, #1
 8005ab0:	6713      	str	r3, [r2, #112]	; 0x70
 8005ab2:	e01c      	b.n	8005aee <HAL_RCC_OscConfig+0x32a>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	689b      	ldr	r3, [r3, #8]
 8005ab8:	2b05      	cmp	r3, #5
 8005aba:	d10c      	bne.n	8005ad6 <HAL_RCC_OscConfig+0x312>
 8005abc:	4b7b      	ldr	r3, [pc, #492]	; (8005cac <HAL_RCC_OscConfig+0x4e8>)
 8005abe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ac0:	4a7a      	ldr	r2, [pc, #488]	; (8005cac <HAL_RCC_OscConfig+0x4e8>)
 8005ac2:	f043 0304 	orr.w	r3, r3, #4
 8005ac6:	6713      	str	r3, [r2, #112]	; 0x70
 8005ac8:	4b78      	ldr	r3, [pc, #480]	; (8005cac <HAL_RCC_OscConfig+0x4e8>)
 8005aca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005acc:	4a77      	ldr	r2, [pc, #476]	; (8005cac <HAL_RCC_OscConfig+0x4e8>)
 8005ace:	f043 0301 	orr.w	r3, r3, #1
 8005ad2:	6713      	str	r3, [r2, #112]	; 0x70
 8005ad4:	e00b      	b.n	8005aee <HAL_RCC_OscConfig+0x32a>
 8005ad6:	4b75      	ldr	r3, [pc, #468]	; (8005cac <HAL_RCC_OscConfig+0x4e8>)
 8005ad8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ada:	4a74      	ldr	r2, [pc, #464]	; (8005cac <HAL_RCC_OscConfig+0x4e8>)
 8005adc:	f023 0301 	bic.w	r3, r3, #1
 8005ae0:	6713      	str	r3, [r2, #112]	; 0x70
 8005ae2:	4b72      	ldr	r3, [pc, #456]	; (8005cac <HAL_RCC_OscConfig+0x4e8>)
 8005ae4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ae6:	4a71      	ldr	r2, [pc, #452]	; (8005cac <HAL_RCC_OscConfig+0x4e8>)
 8005ae8:	f023 0304 	bic.w	r3, r3, #4
 8005aec:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	689b      	ldr	r3, [r3, #8]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d015      	beq.n	8005b22 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005af6:	f7fc fad9 	bl	80020ac <HAL_GetTick>
 8005afa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005afc:	e00a      	b.n	8005b14 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005afe:	f7fc fad5 	bl	80020ac <HAL_GetTick>
 8005b02:	4602      	mov	r2, r0
 8005b04:	693b      	ldr	r3, [r7, #16]
 8005b06:	1ad3      	subs	r3, r2, r3
 8005b08:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d901      	bls.n	8005b14 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005b10:	2303      	movs	r3, #3
 8005b12:	e0c5      	b.n	8005ca0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b14:	4b65      	ldr	r3, [pc, #404]	; (8005cac <HAL_RCC_OscConfig+0x4e8>)
 8005b16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b18:	f003 0302 	and.w	r3, r3, #2
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d0ee      	beq.n	8005afe <HAL_RCC_OscConfig+0x33a>
 8005b20:	e014      	b.n	8005b4c <HAL_RCC_OscConfig+0x388>
=======
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	689b      	ldr	r3, [r3, #8]
 8005a72:	2b01      	cmp	r3, #1
 8005a74:	d106      	bne.n	8005a84 <HAL_RCC_OscConfig+0x2f0>
 8005a76:	4b81      	ldr	r3, [pc, #516]	; (8005c7c <HAL_RCC_OscConfig+0x4e8>)
 8005a78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a7a:	4a80      	ldr	r2, [pc, #512]	; (8005c7c <HAL_RCC_OscConfig+0x4e8>)
 8005a7c:	f043 0301 	orr.w	r3, r3, #1
 8005a80:	6713      	str	r3, [r2, #112]	; 0x70
 8005a82:	e01c      	b.n	8005abe <HAL_RCC_OscConfig+0x32a>
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	689b      	ldr	r3, [r3, #8]
 8005a88:	2b05      	cmp	r3, #5
 8005a8a:	d10c      	bne.n	8005aa6 <HAL_RCC_OscConfig+0x312>
 8005a8c:	4b7b      	ldr	r3, [pc, #492]	; (8005c7c <HAL_RCC_OscConfig+0x4e8>)
 8005a8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a90:	4a7a      	ldr	r2, [pc, #488]	; (8005c7c <HAL_RCC_OscConfig+0x4e8>)
 8005a92:	f043 0304 	orr.w	r3, r3, #4
 8005a96:	6713      	str	r3, [r2, #112]	; 0x70
 8005a98:	4b78      	ldr	r3, [pc, #480]	; (8005c7c <HAL_RCC_OscConfig+0x4e8>)
 8005a9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a9c:	4a77      	ldr	r2, [pc, #476]	; (8005c7c <HAL_RCC_OscConfig+0x4e8>)
 8005a9e:	f043 0301 	orr.w	r3, r3, #1
 8005aa2:	6713      	str	r3, [r2, #112]	; 0x70
 8005aa4:	e00b      	b.n	8005abe <HAL_RCC_OscConfig+0x32a>
 8005aa6:	4b75      	ldr	r3, [pc, #468]	; (8005c7c <HAL_RCC_OscConfig+0x4e8>)
 8005aa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005aaa:	4a74      	ldr	r2, [pc, #464]	; (8005c7c <HAL_RCC_OscConfig+0x4e8>)
 8005aac:	f023 0301 	bic.w	r3, r3, #1
 8005ab0:	6713      	str	r3, [r2, #112]	; 0x70
 8005ab2:	4b72      	ldr	r3, [pc, #456]	; (8005c7c <HAL_RCC_OscConfig+0x4e8>)
 8005ab4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ab6:	4a71      	ldr	r2, [pc, #452]	; (8005c7c <HAL_RCC_OscConfig+0x4e8>)
 8005ab8:	f023 0304 	bic.w	r3, r3, #4
 8005abc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	689b      	ldr	r3, [r3, #8]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d015      	beq.n	8005af2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ac6:	f7fc faf3 	bl	80020b0 <HAL_GetTick>
 8005aca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005acc:	e00a      	b.n	8005ae4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005ace:	f7fc faef 	bl	80020b0 <HAL_GetTick>
 8005ad2:	4602      	mov	r2, r0
 8005ad4:	693b      	ldr	r3, [r7, #16]
 8005ad6:	1ad3      	subs	r3, r2, r3
 8005ad8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d901      	bls.n	8005ae4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005ae0:	2303      	movs	r3, #3
 8005ae2:	e0c5      	b.n	8005c70 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ae4:	4b65      	ldr	r3, [pc, #404]	; (8005c7c <HAL_RCC_OscConfig+0x4e8>)
 8005ae6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ae8:	f003 0302 	and.w	r3, r3, #2
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d0ee      	beq.n	8005ace <HAL_RCC_OscConfig+0x33a>
 8005af0:	e014      	b.n	8005b1c <HAL_RCC_OscConfig+0x388>
>>>>>>> Stashed changes
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
<<<<<<< Updated upstream
 8005b22:	f7fc fac3 	bl	80020ac <HAL_GetTick>
 8005b26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b28:	e00a      	b.n	8005b40 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005b2a:	f7fc fabf 	bl	80020ac <HAL_GetTick>
 8005b2e:	4602      	mov	r2, r0
 8005b30:	693b      	ldr	r3, [r7, #16]
 8005b32:	1ad3      	subs	r3, r2, r3
 8005b34:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d901      	bls.n	8005b40 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005b3c:	2303      	movs	r3, #3
 8005b3e:	e0af      	b.n	8005ca0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b40:	4b5a      	ldr	r3, [pc, #360]	; (8005cac <HAL_RCC_OscConfig+0x4e8>)
 8005b42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b44:	f003 0302 	and.w	r3, r3, #2
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d1ee      	bne.n	8005b2a <HAL_RCC_OscConfig+0x366>
=======
 8005af2:	f7fc fadd 	bl	80020b0 <HAL_GetTick>
 8005af6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005af8:	e00a      	b.n	8005b10 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005afa:	f7fc fad9 	bl	80020b0 <HAL_GetTick>
 8005afe:	4602      	mov	r2, r0
 8005b00:	693b      	ldr	r3, [r7, #16]
 8005b02:	1ad3      	subs	r3, r2, r3
 8005b04:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d901      	bls.n	8005b10 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005b0c:	2303      	movs	r3, #3
 8005b0e:	e0af      	b.n	8005c70 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b10:	4b5a      	ldr	r3, [pc, #360]	; (8005c7c <HAL_RCC_OscConfig+0x4e8>)
 8005b12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b14:	f003 0302 	and.w	r3, r3, #2
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d1ee      	bne.n	8005afa <HAL_RCC_OscConfig+0x366>
>>>>>>> Stashed changes
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
<<<<<<< Updated upstream
 8005b4c:	7dfb      	ldrb	r3, [r7, #23]
 8005b4e:	2b01      	cmp	r3, #1
 8005b50:	d105      	bne.n	8005b5e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b52:	4b56      	ldr	r3, [pc, #344]	; (8005cac <HAL_RCC_OscConfig+0x4e8>)
 8005b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b56:	4a55      	ldr	r2, [pc, #340]	; (8005cac <HAL_RCC_OscConfig+0x4e8>)
 8005b58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b5c:	6413      	str	r3, [r2, #64]	; 0x40
=======
 8005b1c:	7dfb      	ldrb	r3, [r7, #23]
 8005b1e:	2b01      	cmp	r3, #1
 8005b20:	d105      	bne.n	8005b2e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b22:	4b56      	ldr	r3, [pc, #344]	; (8005c7c <HAL_RCC_OscConfig+0x4e8>)
 8005b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b26:	4a55      	ldr	r2, [pc, #340]	; (8005c7c <HAL_RCC_OscConfig+0x4e8>)
 8005b28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b2c:	6413      	str	r3, [r2, #64]	; 0x40
>>>>>>> Stashed changes
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
<<<<<<< Updated upstream
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	699b      	ldr	r3, [r3, #24]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	f000 809b 	beq.w	8005c9e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005b68:	4b50      	ldr	r3, [pc, #320]	; (8005cac <HAL_RCC_OscConfig+0x4e8>)
 8005b6a:	689b      	ldr	r3, [r3, #8]
 8005b6c:	f003 030c 	and.w	r3, r3, #12
 8005b70:	2b08      	cmp	r3, #8
 8005b72:	d05c      	beq.n	8005c2e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	699b      	ldr	r3, [r3, #24]
 8005b78:	2b02      	cmp	r3, #2
 8005b7a:	d141      	bne.n	8005c00 <HAL_RCC_OscConfig+0x43c>
=======
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	699b      	ldr	r3, [r3, #24]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	f000 809b 	beq.w	8005c6e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005b38:	4b50      	ldr	r3, [pc, #320]	; (8005c7c <HAL_RCC_OscConfig+0x4e8>)
 8005b3a:	689b      	ldr	r3, [r3, #8]
 8005b3c:	f003 030c 	and.w	r3, r3, #12
 8005b40:	2b08      	cmp	r3, #8
 8005b42:	d05c      	beq.n	8005bfe <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	699b      	ldr	r3, [r3, #24]
 8005b48:	2b02      	cmp	r3, #2
 8005b4a:	d141      	bne.n	8005bd0 <HAL_RCC_OscConfig+0x43c>
>>>>>>> Stashed changes
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
<<<<<<< Updated upstream
 8005b7c:	4b4c      	ldr	r3, [pc, #304]	; (8005cb0 <HAL_RCC_OscConfig+0x4ec>)
 8005b7e:	2200      	movs	r2, #0
 8005b80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b82:	f7fc fa93 	bl	80020ac <HAL_GetTick>
 8005b86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b88:	e008      	b.n	8005b9c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b8a:	f7fc fa8f 	bl	80020ac <HAL_GetTick>
 8005b8e:	4602      	mov	r2, r0
 8005b90:	693b      	ldr	r3, [r7, #16]
 8005b92:	1ad3      	subs	r3, r2, r3
 8005b94:	2b02      	cmp	r3, #2
 8005b96:	d901      	bls.n	8005b9c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005b98:	2303      	movs	r3, #3
 8005b9a:	e081      	b.n	8005ca0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b9c:	4b43      	ldr	r3, [pc, #268]	; (8005cac <HAL_RCC_OscConfig+0x4e8>)
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d1f0      	bne.n	8005b8a <HAL_RCC_OscConfig+0x3c6>
=======
 8005b4c:	4b4c      	ldr	r3, [pc, #304]	; (8005c80 <HAL_RCC_OscConfig+0x4ec>)
 8005b4e:	2200      	movs	r2, #0
 8005b50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b52:	f7fc faad 	bl	80020b0 <HAL_GetTick>
 8005b56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b58:	e008      	b.n	8005b6c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b5a:	f7fc faa9 	bl	80020b0 <HAL_GetTick>
 8005b5e:	4602      	mov	r2, r0
 8005b60:	693b      	ldr	r3, [r7, #16]
 8005b62:	1ad3      	subs	r3, r2, r3
 8005b64:	2b02      	cmp	r3, #2
 8005b66:	d901      	bls.n	8005b6c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005b68:	2303      	movs	r3, #3
 8005b6a:	e081      	b.n	8005c70 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b6c:	4b43      	ldr	r3, [pc, #268]	; (8005c7c <HAL_RCC_OscConfig+0x4e8>)
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d1f0      	bne.n	8005b5a <HAL_RCC_OscConfig+0x3c6>
>>>>>>> Stashed changes
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
<<<<<<< Updated upstream
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	69da      	ldr	r2, [r3, #28]
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6a1b      	ldr	r3, [r3, #32]
 8005bb0:	431a      	orrs	r2, r3
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bb6:	019b      	lsls	r3, r3, #6
 8005bb8:	431a      	orrs	r2, r3
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bbe:	085b      	lsrs	r3, r3, #1
 8005bc0:	3b01      	subs	r3, #1
 8005bc2:	041b      	lsls	r3, r3, #16
 8005bc4:	431a      	orrs	r2, r3
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bca:	061b      	lsls	r3, r3, #24
 8005bcc:	4937      	ldr	r1, [pc, #220]	; (8005cac <HAL_RCC_OscConfig+0x4e8>)
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	604b      	str	r3, [r1, #4]
=======
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	69da      	ldr	r2, [r3, #28]
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6a1b      	ldr	r3, [r3, #32]
 8005b80:	431a      	orrs	r2, r3
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b86:	019b      	lsls	r3, r3, #6
 8005b88:	431a      	orrs	r2, r3
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b8e:	085b      	lsrs	r3, r3, #1
 8005b90:	3b01      	subs	r3, #1
 8005b92:	041b      	lsls	r3, r3, #16
 8005b94:	431a      	orrs	r2, r3
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b9a:	061b      	lsls	r3, r3, #24
 8005b9c:	4937      	ldr	r1, [pc, #220]	; (8005c7c <HAL_RCC_OscConfig+0x4e8>)
 8005b9e:	4313      	orrs	r3, r2
 8005ba0:	604b      	str	r3, [r1, #4]
>>>>>>> Stashed changes
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
<<<<<<< Updated upstream
 8005bd2:	4b37      	ldr	r3, [pc, #220]	; (8005cb0 <HAL_RCC_OscConfig+0x4ec>)
 8005bd4:	2201      	movs	r2, #1
 8005bd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bd8:	f7fc fa68 	bl	80020ac <HAL_GetTick>
 8005bdc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005bde:	e008      	b.n	8005bf2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005be0:	f7fc fa64 	bl	80020ac <HAL_GetTick>
 8005be4:	4602      	mov	r2, r0
 8005be6:	693b      	ldr	r3, [r7, #16]
 8005be8:	1ad3      	subs	r3, r2, r3
 8005bea:	2b02      	cmp	r3, #2
 8005bec:	d901      	bls.n	8005bf2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005bee:	2303      	movs	r3, #3
 8005bf0:	e056      	b.n	8005ca0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005bf2:	4b2e      	ldr	r3, [pc, #184]	; (8005cac <HAL_RCC_OscConfig+0x4e8>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d0f0      	beq.n	8005be0 <HAL_RCC_OscConfig+0x41c>
 8005bfe:	e04e      	b.n	8005c9e <HAL_RCC_OscConfig+0x4da>
=======
 8005ba2:	4b37      	ldr	r3, [pc, #220]	; (8005c80 <HAL_RCC_OscConfig+0x4ec>)
 8005ba4:	2201      	movs	r2, #1
 8005ba6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ba8:	f7fc fa82 	bl	80020b0 <HAL_GetTick>
 8005bac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005bae:	e008      	b.n	8005bc2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005bb0:	f7fc fa7e 	bl	80020b0 <HAL_GetTick>
 8005bb4:	4602      	mov	r2, r0
 8005bb6:	693b      	ldr	r3, [r7, #16]
 8005bb8:	1ad3      	subs	r3, r2, r3
 8005bba:	2b02      	cmp	r3, #2
 8005bbc:	d901      	bls.n	8005bc2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005bbe:	2303      	movs	r3, #3
 8005bc0:	e056      	b.n	8005c70 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005bc2:	4b2e      	ldr	r3, [pc, #184]	; (8005c7c <HAL_RCC_OscConfig+0x4e8>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d0f0      	beq.n	8005bb0 <HAL_RCC_OscConfig+0x41c>
 8005bce:	e04e      	b.n	8005c6e <HAL_RCC_OscConfig+0x4da>
>>>>>>> Stashed changes
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
<<<<<<< Updated upstream
 8005c00:	4b2b      	ldr	r3, [pc, #172]	; (8005cb0 <HAL_RCC_OscConfig+0x4ec>)
 8005c02:	2200      	movs	r2, #0
 8005c04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c06:	f7fc fa51 	bl	80020ac <HAL_GetTick>
 8005c0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c0c:	e008      	b.n	8005c20 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c0e:	f7fc fa4d 	bl	80020ac <HAL_GetTick>
 8005c12:	4602      	mov	r2, r0
 8005c14:	693b      	ldr	r3, [r7, #16]
 8005c16:	1ad3      	subs	r3, r2, r3
 8005c18:	2b02      	cmp	r3, #2
 8005c1a:	d901      	bls.n	8005c20 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005c1c:	2303      	movs	r3, #3
 8005c1e:	e03f      	b.n	8005ca0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c20:	4b22      	ldr	r3, [pc, #136]	; (8005cac <HAL_RCC_OscConfig+0x4e8>)
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d1f0      	bne.n	8005c0e <HAL_RCC_OscConfig+0x44a>
 8005c2c:	e037      	b.n	8005c9e <HAL_RCC_OscConfig+0x4da>
=======
 8005bd0:	4b2b      	ldr	r3, [pc, #172]	; (8005c80 <HAL_RCC_OscConfig+0x4ec>)
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bd6:	f7fc fa6b 	bl	80020b0 <HAL_GetTick>
 8005bda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005bdc:	e008      	b.n	8005bf0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005bde:	f7fc fa67 	bl	80020b0 <HAL_GetTick>
 8005be2:	4602      	mov	r2, r0
 8005be4:	693b      	ldr	r3, [r7, #16]
 8005be6:	1ad3      	subs	r3, r2, r3
 8005be8:	2b02      	cmp	r3, #2
 8005bea:	d901      	bls.n	8005bf0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005bec:	2303      	movs	r3, #3
 8005bee:	e03f      	b.n	8005c70 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005bf0:	4b22      	ldr	r3, [pc, #136]	; (8005c7c <HAL_RCC_OscConfig+0x4e8>)
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d1f0      	bne.n	8005bde <HAL_RCC_OscConfig+0x44a>
 8005bfc:	e037      	b.n	8005c6e <HAL_RCC_OscConfig+0x4da>
>>>>>>> Stashed changes
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
<<<<<<< Updated upstream
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	699b      	ldr	r3, [r3, #24]
 8005c32:	2b01      	cmp	r3, #1
 8005c34:	d101      	bne.n	8005c3a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005c36:	2301      	movs	r3, #1
 8005c38:	e032      	b.n	8005ca0 <HAL_RCC_OscConfig+0x4dc>
=======
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	699b      	ldr	r3, [r3, #24]
 8005c02:	2b01      	cmp	r3, #1
 8005c04:	d101      	bne.n	8005c0a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005c06:	2301      	movs	r3, #1
 8005c08:	e032      	b.n	8005c70 <HAL_RCC_OscConfig+0x4dc>
>>>>>>> Stashed changes
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
<<<<<<< Updated upstream
 8005c3a:	4b1c      	ldr	r3, [pc, #112]	; (8005cac <HAL_RCC_OscConfig+0x4e8>)
 8005c3c:	685b      	ldr	r3, [r3, #4]
 8005c3e:	60fb      	str	r3, [r7, #12]
=======
 8005c0a:	4b1c      	ldr	r3, [pc, #112]	; (8005c7c <HAL_RCC_OscConfig+0x4e8>)
 8005c0c:	685b      	ldr	r3, [r3, #4]
 8005c0e:	60fb      	str	r3, [r7, #12]
>>>>>>> Stashed changes
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
<<<<<<< Updated upstream
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	699b      	ldr	r3, [r3, #24]
 8005c44:	2b01      	cmp	r3, #1
 8005c46:	d028      	beq.n	8005c9a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005c52:	429a      	cmp	r2, r3
 8005c54:	d121      	bne.n	8005c9a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c60:	429a      	cmp	r2, r3
 8005c62:	d11a      	bne.n	8005c9a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005c64:	68fa      	ldr	r2, [r7, #12]
 8005c66:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005c6a:	4013      	ands	r3, r2
 8005c6c:	687a      	ldr	r2, [r7, #4]
 8005c6e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005c70:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d111      	bne.n	8005c9a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c80:	085b      	lsrs	r3, r3, #1
 8005c82:	3b01      	subs	r3, #1
 8005c84:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005c86:	429a      	cmp	r2, r3
 8005c88:	d107      	bne.n	8005c9a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c94:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005c96:	429a      	cmp	r2, r3
 8005c98:	d001      	beq.n	8005c9e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	e000      	b.n	8005ca0 <HAL_RCC_OscConfig+0x4dc>
=======
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	699b      	ldr	r3, [r3, #24]
 8005c14:	2b01      	cmp	r3, #1
 8005c16:	d028      	beq.n	8005c6a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005c22:	429a      	cmp	r2, r3
 8005c24:	d121      	bne.n	8005c6a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c30:	429a      	cmp	r2, r3
 8005c32:	d11a      	bne.n	8005c6a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005c34:	68fa      	ldr	r2, [r7, #12]
 8005c36:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005c3a:	4013      	ands	r3, r2
 8005c3c:	687a      	ldr	r2, [r7, #4]
 8005c3e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005c40:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d111      	bne.n	8005c6a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c50:	085b      	lsrs	r3, r3, #1
 8005c52:	3b01      	subs	r3, #1
 8005c54:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005c56:	429a      	cmp	r2, r3
 8005c58:	d107      	bne.n	8005c6a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c64:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005c66:	429a      	cmp	r2, r3
 8005c68:	d001      	beq.n	8005c6e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	e000      	b.n	8005c70 <HAL_RCC_OscConfig+0x4dc>
>>>>>>> Stashed changes
        }
      }
    }
  }
  return HAL_OK;
<<<<<<< Updated upstream
 8005c9e:	2300      	movs	r3, #0
}
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	3718      	adds	r7, #24
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	bd80      	pop	{r7, pc}
 8005ca8:	40007000 	.word	0x40007000
 8005cac:	40023800 	.word	0x40023800
 8005cb0:	42470060 	.word	0x42470060

08005cb4 <HAL_RCC_ClockConfig>:
=======
 8005c6e:	2300      	movs	r3, #0
}
 8005c70:	4618      	mov	r0, r3
 8005c72:	3718      	adds	r7, #24
 8005c74:	46bd      	mov	sp, r7
 8005c76:	bd80      	pop	{r7, pc}
 8005c78:	40007000 	.word	0x40007000
 8005c7c:	40023800 	.word	0x40023800
 8005c80:	42470060 	.word	0x42470060

08005c84 <HAL_RCC_ClockConfig>:
>>>>>>> Stashed changes
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
<<<<<<< Updated upstream
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b084      	sub	sp, #16
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
 8005cbc:	6039      	str	r1, [r7, #0]
=======
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b084      	sub	sp, #16
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
 8005c8c:	6039      	str	r1, [r7, #0]
>>>>>>> Stashed changes
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
<<<<<<< Updated upstream
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d101      	bne.n	8005cc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	e0cc      	b.n	8005e62 <HAL_RCC_ClockConfig+0x1ae>
=======
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d101      	bne.n	8005c98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005c94:	2301      	movs	r3, #1
 8005c96:	e0cc      	b.n	8005e32 <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> Stashed changes
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
<<<<<<< Updated upstream
 8005cc8:	4b68      	ldr	r3, [pc, #416]	; (8005e6c <HAL_RCC_ClockConfig+0x1b8>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f003 030f 	and.w	r3, r3, #15
 8005cd0:	683a      	ldr	r2, [r7, #0]
 8005cd2:	429a      	cmp	r2, r3
 8005cd4:	d90c      	bls.n	8005cf0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005cd6:	4b65      	ldr	r3, [pc, #404]	; (8005e6c <HAL_RCC_ClockConfig+0x1b8>)
 8005cd8:	683a      	ldr	r2, [r7, #0]
 8005cda:	b2d2      	uxtb	r2, r2
 8005cdc:	701a      	strb	r2, [r3, #0]
=======
 8005c98:	4b68      	ldr	r3, [pc, #416]	; (8005e3c <HAL_RCC_ClockConfig+0x1b8>)
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f003 030f 	and.w	r3, r3, #15
 8005ca0:	683a      	ldr	r2, [r7, #0]
 8005ca2:	429a      	cmp	r2, r3
 8005ca4:	d90c      	bls.n	8005cc0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ca6:	4b65      	ldr	r3, [pc, #404]	; (8005e3c <HAL_RCC_ClockConfig+0x1b8>)
 8005ca8:	683a      	ldr	r2, [r7, #0]
 8005caa:	b2d2      	uxtb	r2, r2
 8005cac:	701a      	strb	r2, [r3, #0]
>>>>>>> Stashed changes

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
<<<<<<< Updated upstream
 8005cde:	4b63      	ldr	r3, [pc, #396]	; (8005e6c <HAL_RCC_ClockConfig+0x1b8>)
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f003 030f 	and.w	r3, r3, #15
 8005ce6:	683a      	ldr	r2, [r7, #0]
 8005ce8:	429a      	cmp	r2, r3
 8005cea:	d001      	beq.n	8005cf0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005cec:	2301      	movs	r3, #1
 8005cee:	e0b8      	b.n	8005e62 <HAL_RCC_ClockConfig+0x1ae>
=======
 8005cae:	4b63      	ldr	r3, [pc, #396]	; (8005e3c <HAL_RCC_ClockConfig+0x1b8>)
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f003 030f 	and.w	r3, r3, #15
 8005cb6:	683a      	ldr	r2, [r7, #0]
 8005cb8:	429a      	cmp	r2, r3
 8005cba:	d001      	beq.n	8005cc0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005cbc:	2301      	movs	r3, #1
 8005cbe:	e0b8      	b.n	8005e32 <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> Stashed changes
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
<<<<<<< Updated upstream
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f003 0302 	and.w	r3, r3, #2
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d020      	beq.n	8005d3e <HAL_RCC_ClockConfig+0x8a>
=======
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f003 0302 	and.w	r3, r3, #2
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d020      	beq.n	8005d0e <HAL_RCC_ClockConfig+0x8a>
>>>>>>> Stashed changes
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
<<<<<<< Updated upstream
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f003 0304 	and.w	r3, r3, #4
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d005      	beq.n	8005d14 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005d08:	4b59      	ldr	r3, [pc, #356]	; (8005e70 <HAL_RCC_ClockConfig+0x1bc>)
 8005d0a:	689b      	ldr	r3, [r3, #8]
 8005d0c:	4a58      	ldr	r2, [pc, #352]	; (8005e70 <HAL_RCC_ClockConfig+0x1bc>)
 8005d0e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005d12:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f003 0308 	and.w	r3, r3, #8
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d005      	beq.n	8005d2c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005d20:	4b53      	ldr	r3, [pc, #332]	; (8005e70 <HAL_RCC_ClockConfig+0x1bc>)
 8005d22:	689b      	ldr	r3, [r3, #8]
 8005d24:	4a52      	ldr	r2, [pc, #328]	; (8005e70 <HAL_RCC_ClockConfig+0x1bc>)
 8005d26:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005d2a:	6093      	str	r3, [r2, #8]
=======
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f003 0304 	and.w	r3, r3, #4
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d005      	beq.n	8005ce4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005cd8:	4b59      	ldr	r3, [pc, #356]	; (8005e40 <HAL_RCC_ClockConfig+0x1bc>)
 8005cda:	689b      	ldr	r3, [r3, #8]
 8005cdc:	4a58      	ldr	r2, [pc, #352]	; (8005e40 <HAL_RCC_ClockConfig+0x1bc>)
 8005cde:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005ce2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f003 0308 	and.w	r3, r3, #8
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d005      	beq.n	8005cfc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005cf0:	4b53      	ldr	r3, [pc, #332]	; (8005e40 <HAL_RCC_ClockConfig+0x1bc>)
 8005cf2:	689b      	ldr	r3, [r3, #8]
 8005cf4:	4a52      	ldr	r2, [pc, #328]	; (8005e40 <HAL_RCC_ClockConfig+0x1bc>)
 8005cf6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005cfa:	6093      	str	r3, [r2, #8]
>>>>>>> Stashed changes
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
<<<<<<< Updated upstream
 8005d2c:	4b50      	ldr	r3, [pc, #320]	; (8005e70 <HAL_RCC_ClockConfig+0x1bc>)
 8005d2e:	689b      	ldr	r3, [r3, #8]
 8005d30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	689b      	ldr	r3, [r3, #8]
 8005d38:	494d      	ldr	r1, [pc, #308]	; (8005e70 <HAL_RCC_ClockConfig+0x1bc>)
 8005d3a:	4313      	orrs	r3, r2
 8005d3c:	608b      	str	r3, [r1, #8]
=======
 8005cfc:	4b50      	ldr	r3, [pc, #320]	; (8005e40 <HAL_RCC_ClockConfig+0x1bc>)
 8005cfe:	689b      	ldr	r3, [r3, #8]
 8005d00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	689b      	ldr	r3, [r3, #8]
 8005d08:	494d      	ldr	r1, [pc, #308]	; (8005e40 <HAL_RCC_ClockConfig+0x1bc>)
 8005d0a:	4313      	orrs	r3, r2
 8005d0c:	608b      	str	r3, [r1, #8]
>>>>>>> Stashed changes
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
<<<<<<< Updated upstream
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f003 0301 	and.w	r3, r3, #1
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d044      	beq.n	8005dd4 <HAL_RCC_ClockConfig+0x120>
=======
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f003 0301 	and.w	r3, r3, #1
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d044      	beq.n	8005da4 <HAL_RCC_ClockConfig+0x120>
>>>>>>> Stashed changes
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
<<<<<<< Updated upstream
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	685b      	ldr	r3, [r3, #4]
 8005d4e:	2b01      	cmp	r3, #1
 8005d50:	d107      	bne.n	8005d62 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d52:	4b47      	ldr	r3, [pc, #284]	; (8005e70 <HAL_RCC_ClockConfig+0x1bc>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d119      	bne.n	8005d92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d5e:	2301      	movs	r3, #1
 8005d60:	e07f      	b.n	8005e62 <HAL_RCC_ClockConfig+0x1ae>
=======
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	685b      	ldr	r3, [r3, #4]
 8005d1e:	2b01      	cmp	r3, #1
 8005d20:	d107      	bne.n	8005d32 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d22:	4b47      	ldr	r3, [pc, #284]	; (8005e40 <HAL_RCC_ClockConfig+0x1bc>)
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d119      	bne.n	8005d62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d2e:	2301      	movs	r3, #1
 8005d30:	e07f      	b.n	8005e32 <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> Stashed changes
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
<<<<<<< Updated upstream
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	685b      	ldr	r3, [r3, #4]
 8005d66:	2b02      	cmp	r3, #2
 8005d68:	d003      	beq.n	8005d72 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005d6e:	2b03      	cmp	r3, #3
 8005d70:	d107      	bne.n	8005d82 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d72:	4b3f      	ldr	r3, [pc, #252]	; (8005e70 <HAL_RCC_ClockConfig+0x1bc>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d109      	bne.n	8005d92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d7e:	2301      	movs	r3, #1
 8005d80:	e06f      	b.n	8005e62 <HAL_RCC_ClockConfig+0x1ae>
=======
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	685b      	ldr	r3, [r3, #4]
 8005d36:	2b02      	cmp	r3, #2
 8005d38:	d003      	beq.n	8005d42 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005d3e:	2b03      	cmp	r3, #3
 8005d40:	d107      	bne.n	8005d52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d42:	4b3f      	ldr	r3, [pc, #252]	; (8005e40 <HAL_RCC_ClockConfig+0x1bc>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d109      	bne.n	8005d62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d4e:	2301      	movs	r3, #1
 8005d50:	e06f      	b.n	8005e32 <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> Stashed changes
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
<<<<<<< Updated upstream
 8005d82:	4b3b      	ldr	r3, [pc, #236]	; (8005e70 <HAL_RCC_ClockConfig+0x1bc>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f003 0302 	and.w	r3, r3, #2
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d101      	bne.n	8005d92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d8e:	2301      	movs	r3, #1
 8005d90:	e067      	b.n	8005e62 <HAL_RCC_ClockConfig+0x1ae>
=======
 8005d52:	4b3b      	ldr	r3, [pc, #236]	; (8005e40 <HAL_RCC_ClockConfig+0x1bc>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f003 0302 	and.w	r3, r3, #2
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d101      	bne.n	8005d62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d5e:	2301      	movs	r3, #1
 8005d60:	e067      	b.n	8005e32 <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> Stashed changes
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
<<<<<<< Updated upstream
 8005d92:	4b37      	ldr	r3, [pc, #220]	; (8005e70 <HAL_RCC_ClockConfig+0x1bc>)
 8005d94:	689b      	ldr	r3, [r3, #8]
 8005d96:	f023 0203 	bic.w	r2, r3, #3
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	685b      	ldr	r3, [r3, #4]
 8005d9e:	4934      	ldr	r1, [pc, #208]	; (8005e70 <HAL_RCC_ClockConfig+0x1bc>)
 8005da0:	4313      	orrs	r3, r2
 8005da2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005da4:	f7fc f982 	bl	80020ac <HAL_GetTick>
 8005da8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005daa:	e00a      	b.n	8005dc2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005dac:	f7fc f97e 	bl	80020ac <HAL_GetTick>
 8005db0:	4602      	mov	r2, r0
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	1ad3      	subs	r3, r2, r3
 8005db6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d901      	bls.n	8005dc2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005dbe:	2303      	movs	r3, #3
 8005dc0:	e04f      	b.n	8005e62 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005dc2:	4b2b      	ldr	r3, [pc, #172]	; (8005e70 <HAL_RCC_ClockConfig+0x1bc>)
 8005dc4:	689b      	ldr	r3, [r3, #8]
 8005dc6:	f003 020c 	and.w	r2, r3, #12
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	685b      	ldr	r3, [r3, #4]
 8005dce:	009b      	lsls	r3, r3, #2
 8005dd0:	429a      	cmp	r2, r3
 8005dd2:	d1eb      	bne.n	8005dac <HAL_RCC_ClockConfig+0xf8>
=======
 8005d62:	4b37      	ldr	r3, [pc, #220]	; (8005e40 <HAL_RCC_ClockConfig+0x1bc>)
 8005d64:	689b      	ldr	r3, [r3, #8]
 8005d66:	f023 0203 	bic.w	r2, r3, #3
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	685b      	ldr	r3, [r3, #4]
 8005d6e:	4934      	ldr	r1, [pc, #208]	; (8005e40 <HAL_RCC_ClockConfig+0x1bc>)
 8005d70:	4313      	orrs	r3, r2
 8005d72:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005d74:	f7fc f99c 	bl	80020b0 <HAL_GetTick>
 8005d78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d7a:	e00a      	b.n	8005d92 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d7c:	f7fc f998 	bl	80020b0 <HAL_GetTick>
 8005d80:	4602      	mov	r2, r0
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	1ad3      	subs	r3, r2, r3
 8005d86:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d901      	bls.n	8005d92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005d8e:	2303      	movs	r3, #3
 8005d90:	e04f      	b.n	8005e32 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d92:	4b2b      	ldr	r3, [pc, #172]	; (8005e40 <HAL_RCC_ClockConfig+0x1bc>)
 8005d94:	689b      	ldr	r3, [r3, #8]
 8005d96:	f003 020c 	and.w	r2, r3, #12
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	685b      	ldr	r3, [r3, #4]
 8005d9e:	009b      	lsls	r3, r3, #2
 8005da0:	429a      	cmp	r2, r3
 8005da2:	d1eb      	bne.n	8005d7c <HAL_RCC_ClockConfig+0xf8>
>>>>>>> Stashed changes
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
<<<<<<< Updated upstream
 8005dd4:	4b25      	ldr	r3, [pc, #148]	; (8005e6c <HAL_RCC_ClockConfig+0x1b8>)
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f003 030f 	and.w	r3, r3, #15
 8005ddc:	683a      	ldr	r2, [r7, #0]
 8005dde:	429a      	cmp	r2, r3
 8005de0:	d20c      	bcs.n	8005dfc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005de2:	4b22      	ldr	r3, [pc, #136]	; (8005e6c <HAL_RCC_ClockConfig+0x1b8>)
 8005de4:	683a      	ldr	r2, [r7, #0]
 8005de6:	b2d2      	uxtb	r2, r2
 8005de8:	701a      	strb	r2, [r3, #0]
=======
 8005da4:	4b25      	ldr	r3, [pc, #148]	; (8005e3c <HAL_RCC_ClockConfig+0x1b8>)
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f003 030f 	and.w	r3, r3, #15
 8005dac:	683a      	ldr	r2, [r7, #0]
 8005dae:	429a      	cmp	r2, r3
 8005db0:	d20c      	bcs.n	8005dcc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005db2:	4b22      	ldr	r3, [pc, #136]	; (8005e3c <HAL_RCC_ClockConfig+0x1b8>)
 8005db4:	683a      	ldr	r2, [r7, #0]
 8005db6:	b2d2      	uxtb	r2, r2
 8005db8:	701a      	strb	r2, [r3, #0]
>>>>>>> Stashed changes

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
<<<<<<< Updated upstream
 8005dea:	4b20      	ldr	r3, [pc, #128]	; (8005e6c <HAL_RCC_ClockConfig+0x1b8>)
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f003 030f 	and.w	r3, r3, #15
 8005df2:	683a      	ldr	r2, [r7, #0]
 8005df4:	429a      	cmp	r2, r3
 8005df6:	d001      	beq.n	8005dfc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005df8:	2301      	movs	r3, #1
 8005dfa:	e032      	b.n	8005e62 <HAL_RCC_ClockConfig+0x1ae>
=======
 8005dba:	4b20      	ldr	r3, [pc, #128]	; (8005e3c <HAL_RCC_ClockConfig+0x1b8>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f003 030f 	and.w	r3, r3, #15
 8005dc2:	683a      	ldr	r2, [r7, #0]
 8005dc4:	429a      	cmp	r2, r3
 8005dc6:	d001      	beq.n	8005dcc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005dc8:	2301      	movs	r3, #1
 8005dca:	e032      	b.n	8005e32 <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> Stashed changes
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
<<<<<<< Updated upstream
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f003 0304 	and.w	r3, r3, #4
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d008      	beq.n	8005e1a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005e08:	4b19      	ldr	r3, [pc, #100]	; (8005e70 <HAL_RCC_ClockConfig+0x1bc>)
 8005e0a:	689b      	ldr	r3, [r3, #8]
 8005e0c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	68db      	ldr	r3, [r3, #12]
 8005e14:	4916      	ldr	r1, [pc, #88]	; (8005e70 <HAL_RCC_ClockConfig+0x1bc>)
 8005e16:	4313      	orrs	r3, r2
 8005e18:	608b      	str	r3, [r1, #8]
=======
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f003 0304 	and.w	r3, r3, #4
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d008      	beq.n	8005dea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005dd8:	4b19      	ldr	r3, [pc, #100]	; (8005e40 <HAL_RCC_ClockConfig+0x1bc>)
 8005dda:	689b      	ldr	r3, [r3, #8]
 8005ddc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	68db      	ldr	r3, [r3, #12]
 8005de4:	4916      	ldr	r1, [pc, #88]	; (8005e40 <HAL_RCC_ClockConfig+0x1bc>)
 8005de6:	4313      	orrs	r3, r2
 8005de8:	608b      	str	r3, [r1, #8]
>>>>>>> Stashed changes
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
<<<<<<< Updated upstream
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f003 0308 	and.w	r3, r3, #8
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d009      	beq.n	8005e3a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005e26:	4b12      	ldr	r3, [pc, #72]	; (8005e70 <HAL_RCC_ClockConfig+0x1bc>)
 8005e28:	689b      	ldr	r3, [r3, #8]
 8005e2a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	691b      	ldr	r3, [r3, #16]
 8005e32:	00db      	lsls	r3, r3, #3
 8005e34:	490e      	ldr	r1, [pc, #56]	; (8005e70 <HAL_RCC_ClockConfig+0x1bc>)
 8005e36:	4313      	orrs	r3, r2
 8005e38:	608b      	str	r3, [r1, #8]
=======
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f003 0308 	and.w	r3, r3, #8
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d009      	beq.n	8005e0a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005df6:	4b12      	ldr	r3, [pc, #72]	; (8005e40 <HAL_RCC_ClockConfig+0x1bc>)
 8005df8:	689b      	ldr	r3, [r3, #8]
 8005dfa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	691b      	ldr	r3, [r3, #16]
 8005e02:	00db      	lsls	r3, r3, #3
 8005e04:	490e      	ldr	r1, [pc, #56]	; (8005e40 <HAL_RCC_ClockConfig+0x1bc>)
 8005e06:	4313      	orrs	r3, r2
 8005e08:	608b      	str	r3, [r1, #8]
>>>>>>> Stashed changes
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
<<<<<<< Updated upstream
 8005e3a:	f000 f821 	bl	8005e80 <HAL_RCC_GetSysClockFreq>
 8005e3e:	4602      	mov	r2, r0
 8005e40:	4b0b      	ldr	r3, [pc, #44]	; (8005e70 <HAL_RCC_ClockConfig+0x1bc>)
 8005e42:	689b      	ldr	r3, [r3, #8]
 8005e44:	091b      	lsrs	r3, r3, #4
 8005e46:	f003 030f 	and.w	r3, r3, #15
 8005e4a:	490a      	ldr	r1, [pc, #40]	; (8005e74 <HAL_RCC_ClockConfig+0x1c0>)
 8005e4c:	5ccb      	ldrb	r3, [r1, r3]
 8005e4e:	fa22 f303 	lsr.w	r3, r2, r3
 8005e52:	4a09      	ldr	r2, [pc, #36]	; (8005e78 <HAL_RCC_ClockConfig+0x1c4>)
 8005e54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005e56:	4b09      	ldr	r3, [pc, #36]	; (8005e7c <HAL_RCC_ClockConfig+0x1c8>)
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	f7fc f8e2 	bl	8002024 <HAL_InitTick>

  return HAL_OK;
 8005e60:	2300      	movs	r3, #0
}
 8005e62:	4618      	mov	r0, r3
 8005e64:	3710      	adds	r7, #16
 8005e66:	46bd      	mov	sp, r7
 8005e68:	bd80      	pop	{r7, pc}
 8005e6a:	bf00      	nop
 8005e6c:	40023c00 	.word	0x40023c00
 8005e70:	40023800 	.word	0x40023800
 8005e74:	0801833c 	.word	0x0801833c
 8005e78:	20000000 	.word	0x20000000
 8005e7c:	20000004 	.word	0x20000004

08005e80 <HAL_RCC_GetSysClockFreq>:
=======
 8005e0a:	f000 f821 	bl	8005e50 <HAL_RCC_GetSysClockFreq>
 8005e0e:	4602      	mov	r2, r0
 8005e10:	4b0b      	ldr	r3, [pc, #44]	; (8005e40 <HAL_RCC_ClockConfig+0x1bc>)
 8005e12:	689b      	ldr	r3, [r3, #8]
 8005e14:	091b      	lsrs	r3, r3, #4
 8005e16:	f003 030f 	and.w	r3, r3, #15
 8005e1a:	490a      	ldr	r1, [pc, #40]	; (8005e44 <HAL_RCC_ClockConfig+0x1c0>)
 8005e1c:	5ccb      	ldrb	r3, [r1, r3]
 8005e1e:	fa22 f303 	lsr.w	r3, r2, r3
 8005e22:	4a09      	ldr	r2, [pc, #36]	; (8005e48 <HAL_RCC_ClockConfig+0x1c4>)
 8005e24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005e26:	4b09      	ldr	r3, [pc, #36]	; (8005e4c <HAL_RCC_ClockConfig+0x1c8>)
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	f7fc f8fc 	bl	8002028 <HAL_InitTick>

  return HAL_OK;
 8005e30:	2300      	movs	r3, #0
}
 8005e32:	4618      	mov	r0, r3
 8005e34:	3710      	adds	r7, #16
 8005e36:	46bd      	mov	sp, r7
 8005e38:	bd80      	pop	{r7, pc}
 8005e3a:	bf00      	nop
 8005e3c:	40023c00 	.word	0x40023c00
 8005e40:	40023800 	.word	0x40023800
 8005e44:	08018320 	.word	0x08018320
 8005e48:	20000000 	.word	0x20000000
 8005e4c:	20000004 	.word	0x20000004

08005e50 <HAL_RCC_GetSysClockFreq>:
>>>>>>> Stashed changes
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
<<<<<<< Updated upstream
 8005e80:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005e84:	b084      	sub	sp, #16
 8005e86:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005e88:	2300      	movs	r3, #0
 8005e8a:	607b      	str	r3, [r7, #4]
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	60fb      	str	r3, [r7, #12]
 8005e90:	2300      	movs	r3, #0
 8005e92:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005e94:	2300      	movs	r3, #0
 8005e96:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005e98:	4b67      	ldr	r3, [pc, #412]	; (8006038 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005e9a:	689b      	ldr	r3, [r3, #8]
 8005e9c:	f003 030c 	and.w	r3, r3, #12
 8005ea0:	2b08      	cmp	r3, #8
 8005ea2:	d00d      	beq.n	8005ec0 <HAL_RCC_GetSysClockFreq+0x40>
 8005ea4:	2b08      	cmp	r3, #8
 8005ea6:	f200 80bd 	bhi.w	8006024 <HAL_RCC_GetSysClockFreq+0x1a4>
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d002      	beq.n	8005eb4 <HAL_RCC_GetSysClockFreq+0x34>
 8005eae:	2b04      	cmp	r3, #4
 8005eb0:	d003      	beq.n	8005eba <HAL_RCC_GetSysClockFreq+0x3a>
 8005eb2:	e0b7      	b.n	8006024 <HAL_RCC_GetSysClockFreq+0x1a4>
=======
 8005e50:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005e54:	b084      	sub	sp, #16
 8005e56:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005e58:	2300      	movs	r3, #0
 8005e5a:	607b      	str	r3, [r7, #4]
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	60fb      	str	r3, [r7, #12]
 8005e60:	2300      	movs	r3, #0
 8005e62:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005e64:	2300      	movs	r3, #0
 8005e66:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005e68:	4b67      	ldr	r3, [pc, #412]	; (8006008 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005e6a:	689b      	ldr	r3, [r3, #8]
 8005e6c:	f003 030c 	and.w	r3, r3, #12
 8005e70:	2b08      	cmp	r3, #8
 8005e72:	d00d      	beq.n	8005e90 <HAL_RCC_GetSysClockFreq+0x40>
 8005e74:	2b08      	cmp	r3, #8
 8005e76:	f200 80bd 	bhi.w	8005ff4 <HAL_RCC_GetSysClockFreq+0x1a4>
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d002      	beq.n	8005e84 <HAL_RCC_GetSysClockFreq+0x34>
 8005e7e:	2b04      	cmp	r3, #4
 8005e80:	d003      	beq.n	8005e8a <HAL_RCC_GetSysClockFreq+0x3a>
 8005e82:	e0b7      	b.n	8005ff4 <HAL_RCC_GetSysClockFreq+0x1a4>
>>>>>>> Stashed changes
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
<<<<<<< Updated upstream
 8005eb4:	4b61      	ldr	r3, [pc, #388]	; (800603c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005eb6:	60bb      	str	r3, [r7, #8]
       break;
 8005eb8:	e0b7      	b.n	800602a <HAL_RCC_GetSysClockFreq+0x1aa>
=======
 8005e84:	4b61      	ldr	r3, [pc, #388]	; (800600c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005e86:	60bb      	str	r3, [r7, #8]
       break;
 8005e88:	e0b7      	b.n	8005ffa <HAL_RCC_GetSysClockFreq+0x1aa>
>>>>>>> Stashed changes
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
<<<<<<< Updated upstream
 8005eba:	4b61      	ldr	r3, [pc, #388]	; (8006040 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8005ebc:	60bb      	str	r3, [r7, #8]
      break;
 8005ebe:	e0b4      	b.n	800602a <HAL_RCC_GetSysClockFreq+0x1aa>
=======
 8005e8a:	4b61      	ldr	r3, [pc, #388]	; (8006010 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8005e8c:	60bb      	str	r3, [r7, #8]
      break;
 8005e8e:	e0b4      	b.n	8005ffa <HAL_RCC_GetSysClockFreq+0x1aa>
>>>>>>> Stashed changes
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
<<<<<<< Updated upstream
 8005ec0:	4b5d      	ldr	r3, [pc, #372]	; (8006038 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005ec2:	685b      	ldr	r3, [r3, #4]
 8005ec4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005ec8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005eca:	4b5b      	ldr	r3, [pc, #364]	; (8006038 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005ecc:	685b      	ldr	r3, [r3, #4]
 8005ece:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d04d      	beq.n	8005f72 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005ed6:	4b58      	ldr	r3, [pc, #352]	; (8006038 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005ed8:	685b      	ldr	r3, [r3, #4]
 8005eda:	099b      	lsrs	r3, r3, #6
 8005edc:	461a      	mov	r2, r3
 8005ede:	f04f 0300 	mov.w	r3, #0
 8005ee2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005ee6:	f04f 0100 	mov.w	r1, #0
 8005eea:	ea02 0800 	and.w	r8, r2, r0
 8005eee:	ea03 0901 	and.w	r9, r3, r1
 8005ef2:	4640      	mov	r0, r8
 8005ef4:	4649      	mov	r1, r9
 8005ef6:	f04f 0200 	mov.w	r2, #0
 8005efa:	f04f 0300 	mov.w	r3, #0
 8005efe:	014b      	lsls	r3, r1, #5
 8005f00:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005f04:	0142      	lsls	r2, r0, #5
 8005f06:	4610      	mov	r0, r2
 8005f08:	4619      	mov	r1, r3
 8005f0a:	ebb0 0008 	subs.w	r0, r0, r8
 8005f0e:	eb61 0109 	sbc.w	r1, r1, r9
 8005f12:	f04f 0200 	mov.w	r2, #0
 8005f16:	f04f 0300 	mov.w	r3, #0
 8005f1a:	018b      	lsls	r3, r1, #6
 8005f1c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005f20:	0182      	lsls	r2, r0, #6
 8005f22:	1a12      	subs	r2, r2, r0
 8005f24:	eb63 0301 	sbc.w	r3, r3, r1
 8005f28:	f04f 0000 	mov.w	r0, #0
 8005f2c:	f04f 0100 	mov.w	r1, #0
 8005f30:	00d9      	lsls	r1, r3, #3
 8005f32:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005f36:	00d0      	lsls	r0, r2, #3
 8005f38:	4602      	mov	r2, r0
 8005f3a:	460b      	mov	r3, r1
 8005f3c:	eb12 0208 	adds.w	r2, r2, r8
 8005f40:	eb43 0309 	adc.w	r3, r3, r9
 8005f44:	f04f 0000 	mov.w	r0, #0
 8005f48:	f04f 0100 	mov.w	r1, #0
 8005f4c:	0259      	lsls	r1, r3, #9
 8005f4e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8005f52:	0250      	lsls	r0, r2, #9
 8005f54:	4602      	mov	r2, r0
 8005f56:	460b      	mov	r3, r1
 8005f58:	4610      	mov	r0, r2
 8005f5a:	4619      	mov	r1, r3
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	461a      	mov	r2, r3
 8005f60:	f04f 0300 	mov.w	r3, #0
 8005f64:	f7fa f994 	bl	8000290 <__aeabi_uldivmod>
 8005f68:	4602      	mov	r2, r0
 8005f6a:	460b      	mov	r3, r1
 8005f6c:	4613      	mov	r3, r2
 8005f6e:	60fb      	str	r3, [r7, #12]
 8005f70:	e04a      	b.n	8006008 <HAL_RCC_GetSysClockFreq+0x188>
=======
 8005e90:	4b5d      	ldr	r3, [pc, #372]	; (8006008 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005e92:	685b      	ldr	r3, [r3, #4]
 8005e94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005e98:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005e9a:	4b5b      	ldr	r3, [pc, #364]	; (8006008 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005e9c:	685b      	ldr	r3, [r3, #4]
 8005e9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d04d      	beq.n	8005f42 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005ea6:	4b58      	ldr	r3, [pc, #352]	; (8006008 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005ea8:	685b      	ldr	r3, [r3, #4]
 8005eaa:	099b      	lsrs	r3, r3, #6
 8005eac:	461a      	mov	r2, r3
 8005eae:	f04f 0300 	mov.w	r3, #0
 8005eb2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005eb6:	f04f 0100 	mov.w	r1, #0
 8005eba:	ea02 0800 	and.w	r8, r2, r0
 8005ebe:	ea03 0901 	and.w	r9, r3, r1
 8005ec2:	4640      	mov	r0, r8
 8005ec4:	4649      	mov	r1, r9
 8005ec6:	f04f 0200 	mov.w	r2, #0
 8005eca:	f04f 0300 	mov.w	r3, #0
 8005ece:	014b      	lsls	r3, r1, #5
 8005ed0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005ed4:	0142      	lsls	r2, r0, #5
 8005ed6:	4610      	mov	r0, r2
 8005ed8:	4619      	mov	r1, r3
 8005eda:	ebb0 0008 	subs.w	r0, r0, r8
 8005ede:	eb61 0109 	sbc.w	r1, r1, r9
 8005ee2:	f04f 0200 	mov.w	r2, #0
 8005ee6:	f04f 0300 	mov.w	r3, #0
 8005eea:	018b      	lsls	r3, r1, #6
 8005eec:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005ef0:	0182      	lsls	r2, r0, #6
 8005ef2:	1a12      	subs	r2, r2, r0
 8005ef4:	eb63 0301 	sbc.w	r3, r3, r1
 8005ef8:	f04f 0000 	mov.w	r0, #0
 8005efc:	f04f 0100 	mov.w	r1, #0
 8005f00:	00d9      	lsls	r1, r3, #3
 8005f02:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005f06:	00d0      	lsls	r0, r2, #3
 8005f08:	4602      	mov	r2, r0
 8005f0a:	460b      	mov	r3, r1
 8005f0c:	eb12 0208 	adds.w	r2, r2, r8
 8005f10:	eb43 0309 	adc.w	r3, r3, r9
 8005f14:	f04f 0000 	mov.w	r0, #0
 8005f18:	f04f 0100 	mov.w	r1, #0
 8005f1c:	0259      	lsls	r1, r3, #9
 8005f1e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8005f22:	0250      	lsls	r0, r2, #9
 8005f24:	4602      	mov	r2, r0
 8005f26:	460b      	mov	r3, r1
 8005f28:	4610      	mov	r0, r2
 8005f2a:	4619      	mov	r1, r3
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	461a      	mov	r2, r3
 8005f30:	f04f 0300 	mov.w	r3, #0
 8005f34:	f7fa f9ac 	bl	8000290 <__aeabi_uldivmod>
 8005f38:	4602      	mov	r2, r0
 8005f3a:	460b      	mov	r3, r1
 8005f3c:	4613      	mov	r3, r2
 8005f3e:	60fb      	str	r3, [r7, #12]
 8005f40:	e04a      	b.n	8005fd8 <HAL_RCC_GetSysClockFreq+0x188>
>>>>>>> Stashed changes
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
<<<<<<< Updated upstream
 8005f72:	4b31      	ldr	r3, [pc, #196]	; (8006038 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005f74:	685b      	ldr	r3, [r3, #4]
 8005f76:	099b      	lsrs	r3, r3, #6
 8005f78:	461a      	mov	r2, r3
 8005f7a:	f04f 0300 	mov.w	r3, #0
 8005f7e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005f82:	f04f 0100 	mov.w	r1, #0
 8005f86:	ea02 0400 	and.w	r4, r2, r0
 8005f8a:	ea03 0501 	and.w	r5, r3, r1
 8005f8e:	4620      	mov	r0, r4
 8005f90:	4629      	mov	r1, r5
 8005f92:	f04f 0200 	mov.w	r2, #0
 8005f96:	f04f 0300 	mov.w	r3, #0
 8005f9a:	014b      	lsls	r3, r1, #5
 8005f9c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005fa0:	0142      	lsls	r2, r0, #5
 8005fa2:	4610      	mov	r0, r2
 8005fa4:	4619      	mov	r1, r3
 8005fa6:	1b00      	subs	r0, r0, r4
 8005fa8:	eb61 0105 	sbc.w	r1, r1, r5
 8005fac:	f04f 0200 	mov.w	r2, #0
 8005fb0:	f04f 0300 	mov.w	r3, #0
 8005fb4:	018b      	lsls	r3, r1, #6
 8005fb6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005fba:	0182      	lsls	r2, r0, #6
 8005fbc:	1a12      	subs	r2, r2, r0
 8005fbe:	eb63 0301 	sbc.w	r3, r3, r1
 8005fc2:	f04f 0000 	mov.w	r0, #0
 8005fc6:	f04f 0100 	mov.w	r1, #0
 8005fca:	00d9      	lsls	r1, r3, #3
 8005fcc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005fd0:	00d0      	lsls	r0, r2, #3
 8005fd2:	4602      	mov	r2, r0
 8005fd4:	460b      	mov	r3, r1
 8005fd6:	1912      	adds	r2, r2, r4
 8005fd8:	eb45 0303 	adc.w	r3, r5, r3
 8005fdc:	f04f 0000 	mov.w	r0, #0
 8005fe0:	f04f 0100 	mov.w	r1, #0
 8005fe4:	0299      	lsls	r1, r3, #10
 8005fe6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005fea:	0290      	lsls	r0, r2, #10
 8005fec:	4602      	mov	r2, r0
 8005fee:	460b      	mov	r3, r1
 8005ff0:	4610      	mov	r0, r2
 8005ff2:	4619      	mov	r1, r3
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	461a      	mov	r2, r3
 8005ff8:	f04f 0300 	mov.w	r3, #0
 8005ffc:	f7fa f948 	bl	8000290 <__aeabi_uldivmod>
 8006000:	4602      	mov	r2, r0
 8006002:	460b      	mov	r3, r1
 8006004:	4613      	mov	r3, r2
 8006006:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006008:	4b0b      	ldr	r3, [pc, #44]	; (8006038 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800600a:	685b      	ldr	r3, [r3, #4]
 800600c:	0c1b      	lsrs	r3, r3, #16
 800600e:	f003 0303 	and.w	r3, r3, #3
 8006012:	3301      	adds	r3, #1
 8006014:	005b      	lsls	r3, r3, #1
 8006016:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006018:	68fa      	ldr	r2, [r7, #12]
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006020:	60bb      	str	r3, [r7, #8]
      break;
 8006022:	e002      	b.n	800602a <HAL_RCC_GetSysClockFreq+0x1aa>
=======
 8005f42:	4b31      	ldr	r3, [pc, #196]	; (8006008 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005f44:	685b      	ldr	r3, [r3, #4]
 8005f46:	099b      	lsrs	r3, r3, #6
 8005f48:	461a      	mov	r2, r3
 8005f4a:	f04f 0300 	mov.w	r3, #0
 8005f4e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005f52:	f04f 0100 	mov.w	r1, #0
 8005f56:	ea02 0400 	and.w	r4, r2, r0
 8005f5a:	ea03 0501 	and.w	r5, r3, r1
 8005f5e:	4620      	mov	r0, r4
 8005f60:	4629      	mov	r1, r5
 8005f62:	f04f 0200 	mov.w	r2, #0
 8005f66:	f04f 0300 	mov.w	r3, #0
 8005f6a:	014b      	lsls	r3, r1, #5
 8005f6c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005f70:	0142      	lsls	r2, r0, #5
 8005f72:	4610      	mov	r0, r2
 8005f74:	4619      	mov	r1, r3
 8005f76:	1b00      	subs	r0, r0, r4
 8005f78:	eb61 0105 	sbc.w	r1, r1, r5
 8005f7c:	f04f 0200 	mov.w	r2, #0
 8005f80:	f04f 0300 	mov.w	r3, #0
 8005f84:	018b      	lsls	r3, r1, #6
 8005f86:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005f8a:	0182      	lsls	r2, r0, #6
 8005f8c:	1a12      	subs	r2, r2, r0
 8005f8e:	eb63 0301 	sbc.w	r3, r3, r1
 8005f92:	f04f 0000 	mov.w	r0, #0
 8005f96:	f04f 0100 	mov.w	r1, #0
 8005f9a:	00d9      	lsls	r1, r3, #3
 8005f9c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005fa0:	00d0      	lsls	r0, r2, #3
 8005fa2:	4602      	mov	r2, r0
 8005fa4:	460b      	mov	r3, r1
 8005fa6:	1912      	adds	r2, r2, r4
 8005fa8:	eb45 0303 	adc.w	r3, r5, r3
 8005fac:	f04f 0000 	mov.w	r0, #0
 8005fb0:	f04f 0100 	mov.w	r1, #0
 8005fb4:	0299      	lsls	r1, r3, #10
 8005fb6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005fba:	0290      	lsls	r0, r2, #10
 8005fbc:	4602      	mov	r2, r0
 8005fbe:	460b      	mov	r3, r1
 8005fc0:	4610      	mov	r0, r2
 8005fc2:	4619      	mov	r1, r3
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	461a      	mov	r2, r3
 8005fc8:	f04f 0300 	mov.w	r3, #0
 8005fcc:	f7fa f960 	bl	8000290 <__aeabi_uldivmod>
 8005fd0:	4602      	mov	r2, r0
 8005fd2:	460b      	mov	r3, r1
 8005fd4:	4613      	mov	r3, r2
 8005fd6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005fd8:	4b0b      	ldr	r3, [pc, #44]	; (8006008 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005fda:	685b      	ldr	r3, [r3, #4]
 8005fdc:	0c1b      	lsrs	r3, r3, #16
 8005fde:	f003 0303 	and.w	r3, r3, #3
 8005fe2:	3301      	adds	r3, #1
 8005fe4:	005b      	lsls	r3, r3, #1
 8005fe6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005fe8:	68fa      	ldr	r2, [r7, #12]
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ff0:	60bb      	str	r3, [r7, #8]
      break;
 8005ff2:	e002      	b.n	8005ffa <HAL_RCC_GetSysClockFreq+0x1aa>
>>>>>>> Stashed changes
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
<<<<<<< Updated upstream
 8006024:	4b05      	ldr	r3, [pc, #20]	; (800603c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006026:	60bb      	str	r3, [r7, #8]
      break;
 8006028:	bf00      	nop
    }
  }
  return sysclockfreq;
 800602a:	68bb      	ldr	r3, [r7, #8]
}
 800602c:	4618      	mov	r0, r3
 800602e:	3710      	adds	r7, #16
 8006030:	46bd      	mov	sp, r7
 8006032:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8006036:	bf00      	nop
 8006038:	40023800 	.word	0x40023800
 800603c:	00f42400 	.word	0x00f42400
 8006040:	007a1200 	.word	0x007a1200

08006044 <HAL_RCC_GetHCLKFreq>:
=======
 8005ff4:	4b05      	ldr	r3, [pc, #20]	; (800600c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005ff6:	60bb      	str	r3, [r7, #8]
      break;
 8005ff8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005ffa:	68bb      	ldr	r3, [r7, #8]
}
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	3710      	adds	r7, #16
 8006000:	46bd      	mov	sp, r7
 8006002:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8006006:	bf00      	nop
 8006008:	40023800 	.word	0x40023800
 800600c:	00f42400 	.word	0x00f42400
 8006010:	007a1200 	.word	0x007a1200

08006014 <HAL_RCC_GetHCLKFreq>:
>>>>>>> Stashed changes
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
<<<<<<< Updated upstream
 8006044:	b480      	push	{r7}
 8006046:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006048:	4b03      	ldr	r3, [pc, #12]	; (8006058 <HAL_RCC_GetHCLKFreq+0x14>)
 800604a:	681b      	ldr	r3, [r3, #0]
}
 800604c:	4618      	mov	r0, r3
 800604e:	46bd      	mov	sp, r7
 8006050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006054:	4770      	bx	lr
 8006056:	bf00      	nop
 8006058:	20000000 	.word	0x20000000

0800605c <HAL_RCC_GetPCLK1Freq>:
=======
 8006014:	b480      	push	{r7}
 8006016:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006018:	4b03      	ldr	r3, [pc, #12]	; (8006028 <HAL_RCC_GetHCLKFreq+0x14>)
 800601a:	681b      	ldr	r3, [r3, #0]
}
 800601c:	4618      	mov	r0, r3
 800601e:	46bd      	mov	sp, r7
 8006020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006024:	4770      	bx	lr
 8006026:	bf00      	nop
 8006028:	20000000 	.word	0x20000000

0800602c <HAL_RCC_GetPCLK1Freq>:
>>>>>>> Stashed changes
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
<<<<<<< Updated upstream
 800605c:	b580      	push	{r7, lr}
 800605e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006060:	f7ff fff0 	bl	8006044 <HAL_RCC_GetHCLKFreq>
 8006064:	4602      	mov	r2, r0
 8006066:	4b05      	ldr	r3, [pc, #20]	; (800607c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006068:	689b      	ldr	r3, [r3, #8]
 800606a:	0a9b      	lsrs	r3, r3, #10
 800606c:	f003 0307 	and.w	r3, r3, #7
 8006070:	4903      	ldr	r1, [pc, #12]	; (8006080 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006072:	5ccb      	ldrb	r3, [r1, r3]
 8006074:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006078:	4618      	mov	r0, r3
 800607a:	bd80      	pop	{r7, pc}
 800607c:	40023800 	.word	0x40023800
 8006080:	0801834c 	.word	0x0801834c

08006084 <HAL_RCC_GetPCLK2Freq>:
=======
 800602c:	b580      	push	{r7, lr}
 800602e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006030:	f7ff fff0 	bl	8006014 <HAL_RCC_GetHCLKFreq>
 8006034:	4602      	mov	r2, r0
 8006036:	4b05      	ldr	r3, [pc, #20]	; (800604c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006038:	689b      	ldr	r3, [r3, #8]
 800603a:	0a9b      	lsrs	r3, r3, #10
 800603c:	f003 0307 	and.w	r3, r3, #7
 8006040:	4903      	ldr	r1, [pc, #12]	; (8006050 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006042:	5ccb      	ldrb	r3, [r1, r3]
 8006044:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006048:	4618      	mov	r0, r3
 800604a:	bd80      	pop	{r7, pc}
 800604c:	40023800 	.word	0x40023800
 8006050:	08018330 	.word	0x08018330

08006054 <HAL_RCC_GetPCLK2Freq>:
>>>>>>> Stashed changes
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
<<<<<<< Updated upstream
 8006084:	b580      	push	{r7, lr}
 8006086:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006088:	f7ff ffdc 	bl	8006044 <HAL_RCC_GetHCLKFreq>
 800608c:	4602      	mov	r2, r0
 800608e:	4b05      	ldr	r3, [pc, #20]	; (80060a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006090:	689b      	ldr	r3, [r3, #8]
 8006092:	0b5b      	lsrs	r3, r3, #13
 8006094:	f003 0307 	and.w	r3, r3, #7
 8006098:	4903      	ldr	r1, [pc, #12]	; (80060a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800609a:	5ccb      	ldrb	r3, [r1, r3]
 800609c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80060a0:	4618      	mov	r0, r3
 80060a2:	bd80      	pop	{r7, pc}
 80060a4:	40023800 	.word	0x40023800
 80060a8:	0801834c 	.word	0x0801834c

080060ac <HAL_SD_Init>:
=======
 8006054:	b580      	push	{r7, lr}
 8006056:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006058:	f7ff ffdc 	bl	8006014 <HAL_RCC_GetHCLKFreq>
 800605c:	4602      	mov	r2, r0
 800605e:	4b05      	ldr	r3, [pc, #20]	; (8006074 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006060:	689b      	ldr	r3, [r3, #8]
 8006062:	0b5b      	lsrs	r3, r3, #13
 8006064:	f003 0307 	and.w	r3, r3, #7
 8006068:	4903      	ldr	r1, [pc, #12]	; (8006078 <HAL_RCC_GetPCLK2Freq+0x24>)
 800606a:	5ccb      	ldrb	r3, [r1, r3]
 800606c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006070:	4618      	mov	r0, r3
 8006072:	bd80      	pop	{r7, pc}
 8006074:	40023800 	.word	0x40023800
 8006078:	08018330 	.word	0x08018330

0800607c <HAL_SD_Init>:
>>>>>>> Stashed changes
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
<<<<<<< Updated upstream
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b082      	sub	sp, #8
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d101      	bne.n	80060be <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80060ba:	2301      	movs	r3, #1
 80060bc:	e022      	b.n	8006104 <HAL_SD_Init+0x58>
=======
 800607c:	b580      	push	{r7, lr}
 800607e:	b082      	sub	sp, #8
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d101      	bne.n	800608e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800608a:	2301      	movs	r3, #1
 800608c:	e022      	b.n	80060d4 <HAL_SD_Init+0x58>
>>>>>>> Stashed changes
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
<<<<<<< Updated upstream
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80060c4:	b2db      	uxtb	r3, r3
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d105      	bne.n	80060d6 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	2200      	movs	r2, #0
 80060ce:	771a      	strb	r2, [r3, #28]
=======
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006094:	b2db      	uxtb	r3, r3
 8006096:	2b00      	cmp	r3, #0
 8006098:	d105      	bne.n	80060a6 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2200      	movs	r2, #0
 800609e:	771a      	strb	r2, [r3, #28]
>>>>>>> Stashed changes

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
<<<<<<< Updated upstream
 80060d0:	6878      	ldr	r0, [r7, #4]
 80060d2:	f7fb f811 	bl	80010f8 <HAL_SD_MspInit>
=======
 80060a0:	6878      	ldr	r0, [r7, #4]
 80060a2:	f7fb f82b 	bl	80010fc <HAL_SD_MspInit>
>>>>>>> Stashed changes
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
<<<<<<< Updated upstream
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2203      	movs	r2, #3
 80060da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80060de:	6878      	ldr	r0, [r7, #4]
 80060e0:	f000 f814 	bl	800610c <HAL_SD_InitCard>
 80060e4:	4603      	mov	r3, r0
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d001      	beq.n	80060ee <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80060ea:	2301      	movs	r3, #1
 80060ec:	e00a      	b.n	8006104 <HAL_SD_Init+0x58>
=======
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2203      	movs	r2, #3
 80060aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80060ae:	6878      	ldr	r0, [r7, #4]
 80060b0:	f000 f814 	bl	80060dc <HAL_SD_InitCard>
 80060b4:	4603      	mov	r3, r0
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d001      	beq.n	80060be <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80060ba:	2301      	movs	r3, #1
 80060bc:	e00a      	b.n	80060d4 <HAL_SD_Init+0x58>
>>>>>>> Stashed changes
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
<<<<<<< Updated upstream
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2200      	movs	r2, #0
 80060f2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2200      	movs	r2, #0
 80060f8:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2201      	movs	r2, #1
 80060fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006102:	2300      	movs	r3, #0
}
 8006104:	4618      	mov	r0, r3
 8006106:	3708      	adds	r7, #8
 8006108:	46bd      	mov	sp, r7
 800610a:	bd80      	pop	{r7, pc}

0800610c <HAL_SD_InitCard>:
=======
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2200      	movs	r2, #0
 80060c2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2200      	movs	r2, #0
 80060c8:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	2201      	movs	r2, #1
 80060ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80060d2:	2300      	movs	r3, #0
}
 80060d4:	4618      	mov	r0, r3
 80060d6:	3708      	adds	r7, #8
 80060d8:	46bd      	mov	sp, r7
 80060da:	bd80      	pop	{r7, pc}

080060dc <HAL_SD_InitCard>:
>>>>>>> Stashed changes
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
<<<<<<< Updated upstream
 800610c:	b5b0      	push	{r4, r5, r7, lr}
 800610e:	b08e      	sub	sp, #56	; 0x38
 8006110:	af04      	add	r7, sp, #16
 8006112:	6078      	str	r0, [r7, #4]
=======
 80060dc:	b5b0      	push	{r4, r5, r7, lr}
 80060de:	b08e      	sub	sp, #56	; 0x38
 80060e0:	af04      	add	r7, sp, #16
 80060e2:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
<<<<<<< Updated upstream
 8006114:	2300      	movs	r3, #0
 8006116:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8006118:	2300      	movs	r3, #0
 800611a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800611c:	2300      	movs	r3, #0
 800611e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8006120:	2300      	movs	r3, #0
 8006122:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8006124:	2300      	movs	r3, #0
 8006126:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8006128:	2376      	movs	r3, #118	; 0x76
 800612a:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681d      	ldr	r5, [r3, #0]
 8006130:	466c      	mov	r4, sp
 8006132:	f107 0314 	add.w	r3, r7, #20
 8006136:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800613a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800613e:	f107 0308 	add.w	r3, r7, #8
 8006142:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006144:	4628      	mov	r0, r5
 8006146:	f003 f9b7 	bl	80094b8 <SDIO_Init>
 800614a:	4603      	mov	r3, r0
 800614c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8006150:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006154:	2b00      	cmp	r3, #0
 8006156:	d001      	beq.n	800615c <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8006158:	2301      	movs	r3, #1
 800615a:	e04c      	b.n	80061f6 <HAL_SD_InitCard+0xea>
=======
 80060e4:	2300      	movs	r3, #0
 80060e6:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80060e8:	2300      	movs	r3, #0
 80060ea:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80060ec:	2300      	movs	r3, #0
 80060ee:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80060f0:	2300      	movs	r3, #0
 80060f2:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80060f4:	2300      	movs	r3, #0
 80060f6:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80060f8:	2376      	movs	r3, #118	; 0x76
 80060fa:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681d      	ldr	r5, [r3, #0]
 8006100:	466c      	mov	r4, sp
 8006102:	f107 0314 	add.w	r3, r7, #20
 8006106:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800610a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800610e:	f107 0308 	add.w	r3, r7, #8
 8006112:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006114:	4628      	mov	r0, r5
 8006116:	f003 f9b7 	bl	8009488 <SDIO_Init>
 800611a:	4603      	mov	r3, r0
 800611c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8006120:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006124:	2b00      	cmp	r3, #0
 8006126:	d001      	beq.n	800612c <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8006128:	2301      	movs	r3, #1
 800612a:	e04c      	b.n	80061c6 <HAL_SD_InitCard+0xea>
>>>>>>> Stashed changes
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
<<<<<<< Updated upstream
 800615c:	4b28      	ldr	r3, [pc, #160]	; (8006200 <HAL_SD_InitCard+0xf4>)
 800615e:	2200      	movs	r2, #0
 8006160:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	4618      	mov	r0, r3
 8006168:	f003 f9ef 	bl	800954a <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800616c:	4b24      	ldr	r3, [pc, #144]	; (8006200 <HAL_SD_InitCard+0xf4>)
 800616e:	2201      	movs	r2, #1
 8006170:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8006172:	6878      	ldr	r0, [r7, #4]
 8006174:	f001 f804 	bl	8007180 <SD_PowerON>
 8006178:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800617a:	6a3b      	ldr	r3, [r7, #32]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d00b      	beq.n	8006198 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2201      	movs	r2, #1
 8006184:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800618c:	6a3b      	ldr	r3, [r7, #32]
 800618e:	431a      	orrs	r2, r3
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006194:	2301      	movs	r3, #1
 8006196:	e02e      	b.n	80061f6 <HAL_SD_InitCard+0xea>
=======
 800612c:	4b28      	ldr	r3, [pc, #160]	; (80061d0 <HAL_SD_InitCard+0xf4>)
 800612e:	2200      	movs	r2, #0
 8006130:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	4618      	mov	r0, r3
 8006138:	f003 f9ef 	bl	800951a <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800613c:	4b24      	ldr	r3, [pc, #144]	; (80061d0 <HAL_SD_InitCard+0xf4>)
 800613e:	2201      	movs	r2, #1
 8006140:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8006142:	6878      	ldr	r0, [r7, #4]
 8006144:	f001 f804 	bl	8007150 <SD_PowerON>
 8006148:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800614a:	6a3b      	ldr	r3, [r7, #32]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d00b      	beq.n	8006168 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2201      	movs	r2, #1
 8006154:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800615c:	6a3b      	ldr	r3, [r7, #32]
 800615e:	431a      	orrs	r2, r3
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006164:	2301      	movs	r3, #1
 8006166:	e02e      	b.n	80061c6 <HAL_SD_InitCard+0xea>
>>>>>>> Stashed changes
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
<<<<<<< Updated upstream
 8006198:	6878      	ldr	r0, [r7, #4]
 800619a:	f000 ff25 	bl	8006fe8 <SD_InitCard>
 800619e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80061a0:	6a3b      	ldr	r3, [r7, #32]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d00b      	beq.n	80061be <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2201      	movs	r2, #1
 80061aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80061b2:	6a3b      	ldr	r3, [r7, #32]
 80061b4:	431a      	orrs	r2, r3
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80061ba:	2301      	movs	r3, #1
 80061bc:	e01b      	b.n	80061f6 <HAL_SD_InitCard+0xea>
=======
 8006168:	6878      	ldr	r0, [r7, #4]
 800616a:	f000 ff25 	bl	8006fb8 <SD_InitCard>
 800616e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006170:	6a3b      	ldr	r3, [r7, #32]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d00b      	beq.n	800618e <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2201      	movs	r2, #1
 800617a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006182:	6a3b      	ldr	r3, [r7, #32]
 8006184:	431a      	orrs	r2, r3
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800618a:	2301      	movs	r3, #1
 800618c:	e01b      	b.n	80061c6 <HAL_SD_InitCard+0xea>
>>>>>>> Stashed changes
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
<<<<<<< Updated upstream
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80061c6:	4618      	mov	r0, r3
 80061c8:	f003 fa52 	bl	8009670 <SDMMC_CmdBlockLength>
 80061cc:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80061ce:	6a3b      	ldr	r3, [r7, #32]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d00f      	beq.n	80061f4 <HAL_SD_InitCard+0xe8>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	4a0a      	ldr	r2, [pc, #40]	; (8006204 <HAL_SD_InitCard+0xf8>)
 80061da:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80061e0:	6a3b      	ldr	r3, [r7, #32]
 80061e2:	431a      	orrs	r2, r3
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2201      	movs	r2, #1
 80061ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80061f0:	2301      	movs	r3, #1
 80061f2:	e000      	b.n	80061f6 <HAL_SD_InitCard+0xea>
  }

  return HAL_OK;
 80061f4:	2300      	movs	r3, #0
}
 80061f6:	4618      	mov	r0, r3
 80061f8:	3728      	adds	r7, #40	; 0x28
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bdb0      	pop	{r4, r5, r7, pc}
 80061fe:	bf00      	nop
 8006200:	422580a0 	.word	0x422580a0
 8006204:	004005ff 	.word	0x004005ff

08006208 <HAL_SD_ReadBlocks_DMA>:
=======
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006196:	4618      	mov	r0, r3
 8006198:	f003 fa52 	bl	8009640 <SDMMC_CmdBlockLength>
 800619c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800619e:	6a3b      	ldr	r3, [r7, #32]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d00f      	beq.n	80061c4 <HAL_SD_InitCard+0xe8>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	4a0a      	ldr	r2, [pc, #40]	; (80061d4 <HAL_SD_InitCard+0xf8>)
 80061aa:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80061b0:	6a3b      	ldr	r3, [r7, #32]
 80061b2:	431a      	orrs	r2, r3
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2201      	movs	r2, #1
 80061bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80061c0:	2301      	movs	r3, #1
 80061c2:	e000      	b.n	80061c6 <HAL_SD_InitCard+0xea>
  }

  return HAL_OK;
 80061c4:	2300      	movs	r3, #0
}
 80061c6:	4618      	mov	r0, r3
 80061c8:	3728      	adds	r7, #40	; 0x28
 80061ca:	46bd      	mov	sp, r7
 80061cc:	bdb0      	pop	{r4, r5, r7, pc}
 80061ce:	bf00      	nop
 80061d0:	422580a0 	.word	0x422580a0
 80061d4:	004005ff 	.word	0x004005ff

080061d8 <HAL_SD_ReadBlocks_DMA>:
>>>>>>> Stashed changes
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
<<<<<<< Updated upstream
 8006208:	b580      	push	{r7, lr}
 800620a:	b08c      	sub	sp, #48	; 0x30
 800620c:	af00      	add	r7, sp, #0
 800620e:	60f8      	str	r0, [r7, #12]
 8006210:	60b9      	str	r1, [r7, #8]
 8006212:	607a      	str	r2, [r7, #4]
 8006214:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800621a:	68bb      	ldr	r3, [r7, #8]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d107      	bne.n	8006230 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006224:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800622c:	2301      	movs	r3, #1
 800622e:	e0c0      	b.n	80063b2 <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006236:	b2db      	uxtb	r3, r3
 8006238:	2b01      	cmp	r3, #1
 800623a:	f040 80b9 	bne.w	80063b0 <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	2200      	movs	r2, #0
 8006242:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006244:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	441a      	add	r2, r3
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800624e:	429a      	cmp	r2, r3
 8006250:	d907      	bls.n	8006262 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006256:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800625e:	2301      	movs	r3, #1
 8006260:	e0a7      	b.n	80063b2 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	2203      	movs	r2, #3
 8006266:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	2200      	movs	r2, #0
 8006270:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006278:	68fa      	ldr	r2, [r7, #12]
 800627a:	6812      	ldr	r2, [r2, #0]
 800627c:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 8006280:	f043 0302 	orr.w	r3, r3, #2
 8006284:	63d3      	str	r3, [r2, #60]	; 0x3c
=======
 80061d8:	b580      	push	{r7, lr}
 80061da:	b08c      	sub	sp, #48	; 0x30
 80061dc:	af00      	add	r7, sp, #0
 80061de:	60f8      	str	r0, [r7, #12]
 80061e0:	60b9      	str	r1, [r7, #8]
 80061e2:	607a      	str	r2, [r7, #4]
 80061e4:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80061ea:	68bb      	ldr	r3, [r7, #8]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d107      	bne.n	8006200 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061f4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80061fc:	2301      	movs	r3, #1
 80061fe:	e0c0      	b.n	8006382 <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006206:	b2db      	uxtb	r3, r3
 8006208:	2b01      	cmp	r3, #1
 800620a:	f040 80b9 	bne.w	8006380 <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	2200      	movs	r2, #0
 8006212:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006214:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	441a      	add	r2, r3
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800621e:	429a      	cmp	r2, r3
 8006220:	d907      	bls.n	8006232 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006226:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800622e:	2301      	movs	r3, #1
 8006230:	e0a7      	b.n	8006382 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	2203      	movs	r2, #3
 8006236:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	2200      	movs	r2, #0
 8006240:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006248:	68fa      	ldr	r2, [r7, #12]
 800624a:	6812      	ldr	r2, [r2, #0]
 800624c:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 8006250:	f043 0302 	orr.w	r3, r3, #2
 8006254:	63d3      	str	r3, [r2, #60]	; 0x3c
>>>>>>> Stashed changes
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
<<<<<<< Updated upstream
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800628a:	4a4c      	ldr	r2, [pc, #304]	; (80063bc <HAL_SD_ReadBlocks_DMA+0x1b4>)
 800628c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006292:	4a4b      	ldr	r2, [pc, #300]	; (80063c0 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8006294:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800629a:	2200      	movs	r2, #0
 800629c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062a2:	2200      	movs	r2, #0
 80062a4:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062b6:	689a      	ldr	r2, [r3, #8]
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	430a      	orrs	r2, r1
 80062c0:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	6c18      	ldr	r0, [r3, #64]	; 0x40
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	3380      	adds	r3, #128	; 0x80
 80062cc:	4619      	mov	r1, r3
 80062ce:	68ba      	ldr	r2, [r7, #8]
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	025b      	lsls	r3, r3, #9
 80062d4:	089b      	lsrs	r3, r3, #2
 80062d6:	f7fd fa53 	bl	8003780 <HAL_DMA_Start_IT>
 80062da:	4603      	mov	r3, r0
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d017      	beq.n	8006310 <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 80062ee:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	4a33      	ldr	r2, [pc, #204]	; (80063c4 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 80062f6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062fc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	2201      	movs	r2, #1
 8006308:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800630c:	2301      	movs	r3, #1
 800630e:	e050      	b.n	80063b2 <HAL_SD_ReadBlocks_DMA+0x1aa>
=======
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800625a:	4a4c      	ldr	r2, [pc, #304]	; (800638c <HAL_SD_ReadBlocks_DMA+0x1b4>)
 800625c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006262:	4a4b      	ldr	r2, [pc, #300]	; (8006390 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8006264:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800626a:	2200      	movs	r2, #0
 800626c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006272:	2200      	movs	r2, #0
 8006274:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006286:	689a      	ldr	r2, [r3, #8]
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	430a      	orrs	r2, r1
 8006290:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	3380      	adds	r3, #128	; 0x80
 800629c:	4619      	mov	r1, r3
 800629e:	68ba      	ldr	r2, [r7, #8]
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	025b      	lsls	r3, r3, #9
 80062a4:	089b      	lsrs	r3, r3, #2
 80062a6:	f7fd fa6d 	bl	8003784 <HAL_DMA_Start_IT>
 80062aa:	4603      	mov	r3, r0
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d017      	beq.n	80062e0 <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 80062be:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	4a33      	ldr	r2, [pc, #204]	; (8006394 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 80062c6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062cc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	2201      	movs	r2, #1
 80062d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80062dc:	2301      	movs	r3, #1
 80062de:	e050      	b.n	8006382 <HAL_SD_ReadBlocks_DMA+0x1aa>
>>>>>>> Stashed changes
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
<<<<<<< Updated upstream
 8006310:	4b2d      	ldr	r3, [pc, #180]	; (80063c8 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8006312:	2201      	movs	r2, #1
 8006314:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800631a:	2b01      	cmp	r3, #1
 800631c:	d002      	beq.n	8006324 <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 800631e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006320:	025b      	lsls	r3, r3, #9
 8006322:	62bb      	str	r3, [r7, #40]	; 0x28
=======
 80062e0:	4b2d      	ldr	r3, [pc, #180]	; (8006398 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 80062e2:	2201      	movs	r2, #1
 80062e4:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062ea:	2b01      	cmp	r3, #1
 80062ec:	d002      	beq.n	80062f4 <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 80062ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062f0:	025b      	lsls	r3, r3, #9
 80062f2:	62bb      	str	r3, [r7, #40]	; 0x28
>>>>>>> Stashed changes
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
<<<<<<< Updated upstream
 8006324:	f04f 33ff 	mov.w	r3, #4294967295
 8006328:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	025b      	lsls	r3, r3, #9
 800632e:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8006330:	2390      	movs	r3, #144	; 0x90
 8006332:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8006334:	2302      	movs	r3, #2
 8006336:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8006338:	2300      	movs	r3, #0
 800633a:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800633c:	2301      	movs	r3, #1
 800633e:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f107 0210 	add.w	r2, r7, #16
 8006348:	4611      	mov	r1, r2
 800634a:	4618      	mov	r0, r3
 800634c:	f003 f964 	bl	8009618 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	2b01      	cmp	r3, #1
 8006354:	d90a      	bls.n	800636c <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	2282      	movs	r2, #130	; 0x82
 800635a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006362:	4618      	mov	r0, r3
 8006364:	f003 f9c8 	bl	80096f8 <SDMMC_CmdReadMultiBlock>
 8006368:	62f8      	str	r0, [r7, #44]	; 0x2c
 800636a:	e009      	b.n	8006380 <HAL_SD_ReadBlocks_DMA+0x178>
=======
 80062f4:	f04f 33ff 	mov.w	r3, #4294967295
 80062f8:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	025b      	lsls	r3, r3, #9
 80062fe:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8006300:	2390      	movs	r3, #144	; 0x90
 8006302:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8006304:	2302      	movs	r3, #2
 8006306:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8006308:	2300      	movs	r3, #0
 800630a:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800630c:	2301      	movs	r3, #1
 800630e:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f107 0210 	add.w	r2, r7, #16
 8006318:	4611      	mov	r1, r2
 800631a:	4618      	mov	r0, r3
 800631c:	f003 f964 	bl	80095e8 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	2b01      	cmp	r3, #1
 8006324:	d90a      	bls.n	800633c <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	2282      	movs	r2, #130	; 0x82
 800632a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006332:	4618      	mov	r0, r3
 8006334:	f003 f9c8 	bl	80096c8 <SDMMC_CmdReadMultiBlock>
 8006338:	62f8      	str	r0, [r7, #44]	; 0x2c
 800633a:	e009      	b.n	8006350 <HAL_SD_ReadBlocks_DMA+0x178>
>>>>>>> Stashed changes
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
<<<<<<< Updated upstream
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	2281      	movs	r2, #129	; 0x81
 8006370:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006378:	4618      	mov	r0, r3
 800637a:	f003 f99b 	bl	80096b4 <SDMMC_CmdReadSingleBlock>
 800637e:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8006380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006382:	2b00      	cmp	r3, #0
 8006384:	d012      	beq.n	80063ac <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	4a0e      	ldr	r2, [pc, #56]	; (80063c4 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 800638c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006394:	431a      	orrs	r2, r3
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	2201      	movs	r2, #1
 800639e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	2200      	movs	r2, #0
 80063a6:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 80063a8:	2301      	movs	r3, #1
 80063aa:	e002      	b.n	80063b2 <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 80063ac:	2300      	movs	r3, #0
 80063ae:	e000      	b.n	80063b2 <HAL_SD_ReadBlocks_DMA+0x1aa>
=======
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	2281      	movs	r2, #129	; 0x81
 8006340:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006348:	4618      	mov	r0, r3
 800634a:	f003 f99b 	bl	8009684 <SDMMC_CmdReadSingleBlock>
 800634e:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8006350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006352:	2b00      	cmp	r3, #0
 8006354:	d012      	beq.n	800637c <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	4a0e      	ldr	r2, [pc, #56]	; (8006394 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 800635c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006364:	431a      	orrs	r2, r3
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	2201      	movs	r2, #1
 800636e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	2200      	movs	r2, #0
 8006376:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8006378:	2301      	movs	r3, #1
 800637a:	e002      	b.n	8006382 <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 800637c:	2300      	movs	r3, #0
 800637e:	e000      	b.n	8006382 <HAL_SD_ReadBlocks_DMA+0x1aa>
>>>>>>> Stashed changes
    }
  }
  else
  {
    return HAL_BUSY;
<<<<<<< Updated upstream
 80063b0:	2302      	movs	r3, #2
  }
}
 80063b2:	4618      	mov	r0, r3
 80063b4:	3730      	adds	r7, #48	; 0x30
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bd80      	pop	{r7, pc}
 80063ba:	bf00      	nop
 80063bc:	08006df7 	.word	0x08006df7
 80063c0:	08006e69 	.word	0x08006e69
 80063c4:	004005ff 	.word	0x004005ff
 80063c8:	4225858c 	.word	0x4225858c

080063cc <HAL_SD_WriteBlocks_DMA>:
=======
 8006380:	2302      	movs	r3, #2
  }
}
 8006382:	4618      	mov	r0, r3
 8006384:	3730      	adds	r7, #48	; 0x30
 8006386:	46bd      	mov	sp, r7
 8006388:	bd80      	pop	{r7, pc}
 800638a:	bf00      	nop
 800638c:	08006dc7 	.word	0x08006dc7
 8006390:	08006e39 	.word	0x08006e39
 8006394:	004005ff 	.word	0x004005ff
 8006398:	4225858c 	.word	0x4225858c

0800639c <HAL_SD_WriteBlocks_DMA>:
>>>>>>> Stashed changes
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
<<<<<<< Updated upstream
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b08c      	sub	sp, #48	; 0x30
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	60f8      	str	r0, [r7, #12]
 80063d4:	60b9      	str	r1, [r7, #8]
 80063d6:	607a      	str	r2, [r7, #4]
 80063d8:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80063de:	68bb      	ldr	r3, [r7, #8]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d107      	bne.n	80063f4 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063e8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80063f0:	2301      	movs	r3, #1
 80063f2:	e0c5      	b.n	8006580 <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80063fa:	b2db      	uxtb	r3, r3
 80063fc:	2b01      	cmp	r3, #1
 80063fe:	f040 80be 	bne.w	800657e <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	2200      	movs	r2, #0
 8006406:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006408:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	441a      	add	r2, r3
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006412:	429a      	cmp	r2, r3
 8006414:	d907      	bls.n	8006426 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800641a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8006422:	2301      	movs	r3, #1
 8006424:	e0ac      	b.n	8006580 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	2203      	movs	r2, #3
 800642a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	2200      	movs	r2, #0
 8006434:	62da      	str	r2, [r3, #44]	; 0x2c
=======
 800639c:	b580      	push	{r7, lr}
 800639e:	b08c      	sub	sp, #48	; 0x30
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	60f8      	str	r0, [r7, #12]
 80063a4:	60b9      	str	r1, [r7, #8]
 80063a6:	607a      	str	r2, [r7, #4]
 80063a8:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80063ae:	68bb      	ldr	r3, [r7, #8]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d107      	bne.n	80063c4 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063b8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80063c0:	2301      	movs	r3, #1
 80063c2:	e0c5      	b.n	8006550 <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80063ca:	b2db      	uxtb	r3, r3
 80063cc:	2b01      	cmp	r3, #1
 80063ce:	f040 80be 	bne.w	800654e <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	2200      	movs	r2, #0
 80063d6:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80063d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	441a      	add	r2, r3
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063e2:	429a      	cmp	r2, r3
 80063e4:	d907      	bls.n	80063f6 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063ea:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80063f2:	2301      	movs	r3, #1
 80063f4:	e0ac      	b.n	8006550 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	2203      	movs	r2, #3
 80063fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	2200      	movs	r2, #0
 8006404:	62da      	str	r2, [r3, #44]	; 0x2c
>>>>>>> Stashed changes

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
<<<<<<< Updated upstream
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800643c:	68fa      	ldr	r2, [r7, #12]
 800643e:	6812      	ldr	r2, [r2, #0]
 8006440:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 8006444:	f043 0302 	orr.w	r3, r3, #2
 8006448:	63d3      	str	r3, [r2, #60]	; 0x3c
=======
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800640c:	68fa      	ldr	r2, [r7, #12]
 800640e:	6812      	ldr	r2, [r2, #0]
 8006410:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 8006414:	f043 0302 	orr.w	r3, r3, #2
 8006418:	63d3      	str	r3, [r2, #60]	; 0x3c
>>>>>>> Stashed changes
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
<<<<<<< Updated upstream
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800644e:	4a4e      	ldr	r2, [pc, #312]	; (8006588 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 8006450:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006456:	4a4d      	ldr	r2, [pc, #308]	; (800658c <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8006458:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800645e:	2200      	movs	r2, #0
 8006460:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006466:	2b01      	cmp	r3, #1
 8006468:	d002      	beq.n	8006470 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 800646a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800646c:	025b      	lsls	r3, r3, #9
 800646e:	62bb      	str	r3, [r7, #40]	; 0x28
=======
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800641e:	4a4e      	ldr	r2, [pc, #312]	; (8006558 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 8006420:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006426:	4a4d      	ldr	r2, [pc, #308]	; (800655c <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8006428:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800642e:	2200      	movs	r2, #0
 8006430:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006436:	2b01      	cmp	r3, #1
 8006438:	d002      	beq.n	8006440 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 800643a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800643c:	025b      	lsls	r3, r3, #9
 800643e:	62bb      	str	r3, [r7, #40]	; 0x28
>>>>>>> Stashed changes
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
<<<<<<< Updated upstream
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	2b01      	cmp	r3, #1
 8006474:	d90a      	bls.n	800648c <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	22a0      	movs	r2, #160	; 0xa0
 800647a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006482:	4618      	mov	r0, r3
 8006484:	f003 f97c 	bl	8009780 <SDMMC_CmdWriteMultiBlock>
 8006488:	62f8      	str	r0, [r7, #44]	; 0x2c
 800648a:	e009      	b.n	80064a0 <HAL_SD_WriteBlocks_DMA+0xd4>
=======
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	2b01      	cmp	r3, #1
 8006444:	d90a      	bls.n	800645c <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	22a0      	movs	r2, #160	; 0xa0
 800644a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006452:	4618      	mov	r0, r3
 8006454:	f003 f97c 	bl	8009750 <SDMMC_CmdWriteMultiBlock>
 8006458:	62f8      	str	r0, [r7, #44]	; 0x2c
 800645a:	e009      	b.n	8006470 <HAL_SD_WriteBlocks_DMA+0xd4>
>>>>>>> Stashed changes
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
<<<<<<< Updated upstream
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	2290      	movs	r2, #144	; 0x90
 8006490:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006498:	4618      	mov	r0, r3
 800649a:	f003 f94f 	bl	800973c <SDMMC_CmdWriteSingleBlock>
 800649e:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80064a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d012      	beq.n	80064cc <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	4a39      	ldr	r2, [pc, #228]	; (8006590 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 80064ac:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80064b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064b4:	431a      	orrs	r2, r3
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	2201      	movs	r2, #1
 80064be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	2200      	movs	r2, #0
 80064c6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80064c8:	2301      	movs	r3, #1
 80064ca:	e059      	b.n	8006580 <HAL_SD_WriteBlocks_DMA+0x1b4>
=======
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	2290      	movs	r2, #144	; 0x90
 8006460:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006468:	4618      	mov	r0, r3
 800646a:	f003 f94f 	bl	800970c <SDMMC_CmdWriteSingleBlock>
 800646e:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8006470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006472:	2b00      	cmp	r3, #0
 8006474:	d012      	beq.n	800649c <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	4a39      	ldr	r2, [pc, #228]	; (8006560 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 800647c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006484:	431a      	orrs	r2, r3
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	2201      	movs	r2, #1
 800648e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	2200      	movs	r2, #0
 8006496:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006498:	2301      	movs	r3, #1
 800649a:	e059      	b.n	8006550 <HAL_SD_WriteBlocks_DMA+0x1b4>
>>>>>>> Stashed changes
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
<<<<<<< Updated upstream
 80064cc:	4b31      	ldr	r3, [pc, #196]	; (8006594 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 80064ce:	2201      	movs	r2, #1
 80064d0:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064d6:	2240      	movs	r2, #64	; 0x40
 80064d8:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064ea:	689a      	ldr	r2, [r3, #8]
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	430a      	orrs	r2, r1
 80064f4:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80064fa:	68b9      	ldr	r1, [r7, #8]
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	3380      	adds	r3, #128	; 0x80
 8006502:	461a      	mov	r2, r3
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	025b      	lsls	r3, r3, #9
 8006508:	089b      	lsrs	r3, r3, #2
 800650a:	f7fd f939 	bl	8003780 <HAL_DMA_Start_IT>
 800650e:	4603      	mov	r3, r0
 8006510:	2b00      	cmp	r3, #0
 8006512:	d01c      	beq.n	800654e <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800651a:	68fa      	ldr	r2, [r7, #12]
 800651c:	6812      	ldr	r2, [r2, #0]
 800651e:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 8006522:	f023 0302 	bic.w	r3, r3, #2
 8006526:	63d3      	str	r3, [r2, #60]	; 0x3c
=======
 800649c:	4b31      	ldr	r3, [pc, #196]	; (8006564 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800649e:	2201      	movs	r2, #1
 80064a0:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064a6:	2240      	movs	r2, #64	; 0x40
 80064a8:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064ba:	689a      	ldr	r2, [r3, #8]
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	430a      	orrs	r2, r1
 80064c4:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80064ca:	68b9      	ldr	r1, [r7, #8]
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	3380      	adds	r3, #128	; 0x80
 80064d2:	461a      	mov	r2, r3
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	025b      	lsls	r3, r3, #9
 80064d8:	089b      	lsrs	r3, r3, #2
 80064da:	f7fd f953 	bl	8003784 <HAL_DMA_Start_IT>
 80064de:	4603      	mov	r3, r0
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d01c      	beq.n	800651e <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064ea:	68fa      	ldr	r2, [r7, #12]
 80064ec:	6812      	ldr	r2, [r2, #0]
 80064ee:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 80064f2:	f023 0302 	bic.w	r3, r3, #2
 80064f6:	63d3      	str	r3, [r2, #60]	; 0x3c
>>>>>>> Stashed changes
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
<<<<<<< Updated upstream
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	4a18      	ldr	r2, [pc, #96]	; (8006590 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 800652e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006534:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	2201      	movs	r2, #1
 8006540:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	2200      	movs	r2, #0
 8006548:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800654a:	2301      	movs	r3, #1
 800654c:	e018      	b.n	8006580 <HAL_SD_WriteBlocks_DMA+0x1b4>
=======
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	4a18      	ldr	r2, [pc, #96]	; (8006560 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 80064fe:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006504:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	2201      	movs	r2, #1
 8006510:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	2200      	movs	r2, #0
 8006518:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800651a:	2301      	movs	r3, #1
 800651c:	e018      	b.n	8006550 <HAL_SD_WriteBlocks_DMA+0x1b4>
>>>>>>> Stashed changes
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
<<<<<<< Updated upstream
 800654e:	f04f 33ff 	mov.w	r3, #4294967295
 8006552:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	025b      	lsls	r3, r3, #9
 8006558:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800655a:	2390      	movs	r3, #144	; 0x90
 800655c:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800655e:	2300      	movs	r3, #0
 8006560:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8006562:	2300      	movs	r3, #0
 8006564:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8006566:	2301      	movs	r3, #1
 8006568:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f107 0210 	add.w	r2, r7, #16
 8006572:	4611      	mov	r1, r2
 8006574:	4618      	mov	r0, r3
 8006576:	f003 f84f 	bl	8009618 <SDIO_ConfigData>

      return HAL_OK;
 800657a:	2300      	movs	r3, #0
 800657c:	e000      	b.n	8006580 <HAL_SD_WriteBlocks_DMA+0x1b4>
=======
 800651e:	f04f 33ff 	mov.w	r3, #4294967295
 8006522:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	025b      	lsls	r3, r3, #9
 8006528:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800652a:	2390      	movs	r3, #144	; 0x90
 800652c:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800652e:	2300      	movs	r3, #0
 8006530:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8006532:	2300      	movs	r3, #0
 8006534:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8006536:	2301      	movs	r3, #1
 8006538:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f107 0210 	add.w	r2, r7, #16
 8006542:	4611      	mov	r1, r2
 8006544:	4618      	mov	r0, r3
 8006546:	f003 f84f 	bl	80095e8 <SDIO_ConfigData>

      return HAL_OK;
 800654a:	2300      	movs	r3, #0
 800654c:	e000      	b.n	8006550 <HAL_SD_WriteBlocks_DMA+0x1b4>
>>>>>>> Stashed changes
    }
  }
  else
  {
    return HAL_BUSY;
<<<<<<< Updated upstream
 800657e:	2302      	movs	r3, #2
  }
}
 8006580:	4618      	mov	r0, r3
 8006582:	3730      	adds	r7, #48	; 0x30
 8006584:	46bd      	mov	sp, r7
 8006586:	bd80      	pop	{r7, pc}
 8006588:	08006dcd 	.word	0x08006dcd
 800658c:	08006e69 	.word	0x08006e69
 8006590:	004005ff 	.word	0x004005ff
 8006594:	4225858c 	.word	0x4225858c

08006598 <HAL_SD_IRQHandler>:
=======
 800654e:	2302      	movs	r3, #2
  }
}
 8006550:	4618      	mov	r0, r3
 8006552:	3730      	adds	r7, #48	; 0x30
 8006554:	46bd      	mov	sp, r7
 8006556:	bd80      	pop	{r7, pc}
 8006558:	08006d9d 	.word	0x08006d9d
 800655c:	08006e39 	.word	0x08006e39
 8006560:	004005ff 	.word	0x004005ff
 8006564:	4225858c 	.word	0x4225858c

08006568 <HAL_SD_IRQHandler>:
>>>>>>> Stashed changes
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
<<<<<<< Updated upstream
 8006598:	b580      	push	{r7, lr}
 800659a:	b084      	sub	sp, #16
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065a4:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d008      	beq.n	80065c6 <HAL_SD_IRQHandler+0x2e>
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	f003 0308 	and.w	r3, r3, #8
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d003      	beq.n	80065c6 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 80065be:	6878      	ldr	r0, [r7, #4]
 80065c0:	f000 fffd 	bl	80075be <SD_Read_IT>
 80065c4:	e165      	b.n	8006892 <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	f000 808f 	beq.w	80066f4 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80065de:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065e6:	687a      	ldr	r2, [r7, #4]
 80065e8:	6812      	ldr	r2, [r2, #0]
 80065ea:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 80065ee:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 80065f2:	63d3      	str	r3, [r2, #60]	; 0x3c
=======
 8006568:	b580      	push	{r7, lr}
 800656a:	b084      	sub	sp, #16
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006574:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800657c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006580:	2b00      	cmp	r3, #0
 8006582:	d008      	beq.n	8006596 <HAL_SD_IRQHandler+0x2e>
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	f003 0308 	and.w	r3, r3, #8
 800658a:	2b00      	cmp	r3, #0
 800658c:	d003      	beq.n	8006596 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800658e:	6878      	ldr	r0, [r7, #4]
 8006590:	f000 fffd 	bl	800758e <SD_Read_IT>
 8006594:	e165      	b.n	8006862 <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800659c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	f000 808f 	beq.w	80066c4 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80065ae:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065b6:	687a      	ldr	r2, [r7, #4]
 80065b8:	6812      	ldr	r2, [r2, #0]
 80065ba:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 80065be:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 80065c2:	63d3      	str	r3, [r2, #60]	; 0x3c
>>>>>>> Stashed changes
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
<<<<<<< Updated upstream
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f022 0201 	bic.w	r2, r2, #1
 8006602:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	f003 0308 	and.w	r3, r3, #8
 800660a:	2b00      	cmp	r3, #0
 800660c:	d039      	beq.n	8006682 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	f003 0302 	and.w	r3, r3, #2
 8006614:	2b00      	cmp	r3, #0
 8006616:	d104      	bne.n	8006622 <HAL_SD_IRQHandler+0x8a>
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	f003 0320 	and.w	r3, r3, #32
 800661e:	2b00      	cmp	r3, #0
 8006620:	d011      	beq.n	8006646 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	4618      	mov	r0, r3
 8006628:	f003 f8cc 	bl	80097c4 <SDMMC_CmdStopTransfer>
 800662c:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800662e:	68bb      	ldr	r3, [r7, #8]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d008      	beq.n	8006646 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006638:	68bb      	ldr	r3, [r7, #8]
 800663a:	431a      	orrs	r2, r3
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	639a      	str	r2, [r3, #56]	; 0x38
=======
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f022 0201 	bic.w	r2, r2, #1
 80065d2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	f003 0308 	and.w	r3, r3, #8
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d039      	beq.n	8006652 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	f003 0302 	and.w	r3, r3, #2
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d104      	bne.n	80065f2 <HAL_SD_IRQHandler+0x8a>
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	f003 0320 	and.w	r3, r3, #32
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d011      	beq.n	8006616 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	4618      	mov	r0, r3
 80065f8:	f003 f8cc 	bl	8009794 <SDMMC_CmdStopTransfer>
 80065fc:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80065fe:	68bb      	ldr	r3, [r7, #8]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d008      	beq.n	8006616 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006608:	68bb      	ldr	r3, [r7, #8]
 800660a:	431a      	orrs	r2, r3
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	639a      	str	r2, [r3, #56]	; 0x38
>>>>>>> Stashed changes
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
<<<<<<< Updated upstream
 8006640:	6878      	ldr	r0, [r7, #4]
 8006642:	f000 f92f 	bl	80068a4 <HAL_SD_ErrorCallback>
=======
 8006610:	6878      	ldr	r0, [r7, #4]
 8006612:	f000 f92f 	bl	8006874 <HAL_SD_ErrorCallback>
>>>>>>> Stashed changes
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
<<<<<<< Updated upstream
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f240 523a 	movw	r2, #1338	; 0x53a
 800664e:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2201      	movs	r2, #1
 8006654:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2200      	movs	r2, #0
 800665c:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	f003 0301 	and.w	r3, r3, #1
 8006664:	2b00      	cmp	r3, #0
 8006666:	d104      	bne.n	8006672 <HAL_SD_IRQHandler+0xda>
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	f003 0302 	and.w	r3, r3, #2
 800666e:	2b00      	cmp	r3, #0
 8006670:	d003      	beq.n	800667a <HAL_SD_IRQHandler+0xe2>
=======
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f240 523a 	movw	r2, #1338	; 0x53a
 800661e:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2201      	movs	r2, #1
 8006624:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2200      	movs	r2, #0
 800662c:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	f003 0301 	and.w	r3, r3, #1
 8006634:	2b00      	cmp	r3, #0
 8006636:	d104      	bne.n	8006642 <HAL_SD_IRQHandler+0xda>
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	f003 0302 	and.w	r3, r3, #2
 800663e:	2b00      	cmp	r3, #0
 8006640:	d003      	beq.n	800664a <HAL_SD_IRQHandler+0xe2>
>>>>>>> Stashed changes
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
<<<<<<< Updated upstream
 8006672:	6878      	ldr	r0, [r7, #4]
 8006674:	f003 fd32 	bl	800a0dc <HAL_SD_RxCpltCallback>
 8006678:	e10b      	b.n	8006892 <HAL_SD_IRQHandler+0x2fa>
=======
 8006642:	6878      	ldr	r0, [r7, #4]
 8006644:	f003 fd32 	bl	800a0ac <HAL_SD_RxCpltCallback>
 8006648:	e10b      	b.n	8006862 <HAL_SD_IRQHandler+0x2fa>
>>>>>>> Stashed changes
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
<<<<<<< Updated upstream
 800667a:	6878      	ldr	r0, [r7, #4]
 800667c:	f003 fd24 	bl	800a0c8 <HAL_SD_TxCpltCallback>
=======
 800664a:	6878      	ldr	r0, [r7, #4]
 800664c:	f003 fd24 	bl	800a098 <HAL_SD_TxCpltCallback>
>>>>>>> Stashed changes
  }
  else
  {
    /* Nothing to do */
  }
}
<<<<<<< Updated upstream
 8006680:	e107      	b.n	8006892 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006688:	2b00      	cmp	r3, #0
 800668a:	f000 8102 	beq.w	8006892 <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	f003 0320 	and.w	r3, r3, #32
 8006694:	2b00      	cmp	r3, #0
 8006696:	d011      	beq.n	80066bc <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	4618      	mov	r0, r3
 800669e:	f003 f891 	bl	80097c4 <SDMMC_CmdStopTransfer>
 80066a2:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80066a4:	68bb      	ldr	r3, [r7, #8]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d008      	beq.n	80066bc <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80066ae:	68bb      	ldr	r3, [r7, #8]
 80066b0:	431a      	orrs	r2, r3
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 80066b6:	6878      	ldr	r0, [r7, #4]
 80066b8:	f000 f8f4 	bl	80068a4 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	f003 0301 	and.w	r3, r3, #1
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	f040 80e5 	bne.w	8006892 <HAL_SD_IRQHandler+0x2fa>
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	f003 0302 	and.w	r3, r3, #2
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	f040 80df 	bne.w	8006892 <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f022 0208 	bic.w	r2, r2, #8
 80066e2:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2201      	movs	r2, #1
 80066e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 80066ec:	6878      	ldr	r0, [r7, #4]
 80066ee:	f003 fceb 	bl	800a0c8 <HAL_SD_TxCpltCallback>
}
 80066f2:	e0ce      	b.n	8006892 <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d008      	beq.n	8006714 <HAL_SD_IRQHandler+0x17c>
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	f003 0308 	and.w	r3, r3, #8
 8006708:	2b00      	cmp	r3, #0
 800670a:	d003      	beq.n	8006714 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 800670c:	6878      	ldr	r0, [r7, #4]
 800670e:	f000 ffa7 	bl	8007660 <SD_Write_IT>
 8006712:	e0be      	b.n	8006892 <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800671a:	f240 233a 	movw	r3, #570	; 0x23a
 800671e:	4013      	ands	r3, r2
 8006720:	2b00      	cmp	r3, #0
 8006722:	f000 80b6 	beq.w	8006892 <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800672c:	f003 0302 	and.w	r3, r3, #2
 8006730:	2b00      	cmp	r3, #0
 8006732:	d005      	beq.n	8006740 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006738:	f043 0202 	orr.w	r2, r3, #2
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006746:	f003 0308 	and.w	r3, r3, #8
 800674a:	2b00      	cmp	r3, #0
 800674c:	d005      	beq.n	800675a <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006752:	f043 0208 	orr.w	r2, r3, #8
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006760:	f003 0320 	and.w	r3, r3, #32
 8006764:	2b00      	cmp	r3, #0
 8006766:	d005      	beq.n	8006774 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800676c:	f043 0220 	orr.w	r2, r3, #32
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800677a:	f003 0310 	and.w	r3, r3, #16
 800677e:	2b00      	cmp	r3, #0
 8006780:	d005      	beq.n	800678e <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006786:	f043 0210 	orr.w	r2, r3, #16
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006794:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006798:	2b00      	cmp	r3, #0
 800679a:	d005      	beq.n	80067a8 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067a0:	f043 0208 	orr.w	r2, r3, #8
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f240 723a 	movw	r2, #1850	; 0x73a
 80067b0:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067b8:	687a      	ldr	r2, [r7, #4]
 80067ba:	6812      	ldr	r2, [r2, #0]
 80067bc:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 80067c0:	f023 0302 	bic.w	r3, r3, #2
 80067c4:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	4618      	mov	r0, r3
 80067cc:	f002 fffa 	bl	80097c4 <SDMMC_CmdStopTransfer>
 80067d0:	4602      	mov	r2, r0
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067d6:	431a      	orrs	r2, r3
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	f003 0308 	and.w	r3, r3, #8
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d00a      	beq.n	80067fc <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	2201      	movs	r2, #1
 80067ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2200      	movs	r2, #0
 80067f2:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 80067f4:	6878      	ldr	r0, [r7, #4]
 80067f6:	f000 f855 	bl	80068a4 <HAL_SD_ErrorCallback>
}
 80067fa:	e04a      	b.n	8006892 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006802:	2b00      	cmp	r3, #0
 8006804:	d045      	beq.n	8006892 <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	f003 0310 	and.w	r3, r3, #16
 800680c:	2b00      	cmp	r3, #0
 800680e:	d104      	bne.n	800681a <HAL_SD_IRQHandler+0x282>
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	f003 0320 	and.w	r3, r3, #32
 8006816:	2b00      	cmp	r3, #0
 8006818:	d011      	beq.n	800683e <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800681e:	4a1f      	ldr	r2, [pc, #124]	; (800689c <HAL_SD_IRQHandler+0x304>)
 8006820:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006826:	4618      	mov	r0, r3
 8006828:	f7fd f872 	bl	8003910 <HAL_DMA_Abort_IT>
 800682c:	4603      	mov	r3, r0
 800682e:	2b00      	cmp	r3, #0
 8006830:	d02f      	beq.n	8006892 <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006836:	4618      	mov	r0, r3
 8006838:	f000 fb68 	bl	8006f0c <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800683c:	e029      	b.n	8006892 <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	f003 0301 	and.w	r3, r3, #1
 8006844:	2b00      	cmp	r3, #0
 8006846:	d104      	bne.n	8006852 <HAL_SD_IRQHandler+0x2ba>
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	f003 0302 	and.w	r3, r3, #2
 800684e:	2b00      	cmp	r3, #0
 8006850:	d011      	beq.n	8006876 <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006856:	4a12      	ldr	r2, [pc, #72]	; (80068a0 <HAL_SD_IRQHandler+0x308>)
 8006858:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800685e:	4618      	mov	r0, r3
 8006860:	f7fd f856 	bl	8003910 <HAL_DMA_Abort_IT>
 8006864:	4603      	mov	r3, r0
 8006866:	2b00      	cmp	r3, #0
 8006868:	d013      	beq.n	8006892 <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800686e:	4618      	mov	r0, r3
 8006870:	f000 fb83 	bl	8006f7a <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8006874:	e00d      	b.n	8006892 <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2200      	movs	r2, #0
 800687a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2201      	movs	r2, #1
 8006880:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2200      	movs	r2, #0
 8006888:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800688a:	6878      	ldr	r0, [r7, #4]
 800688c:	f003 fc12 	bl	800a0b4 <HAL_SD_AbortCallback>
}
 8006890:	e7ff      	b.n	8006892 <HAL_SD_IRQHandler+0x2fa>
 8006892:	bf00      	nop
 8006894:	3710      	adds	r7, #16
 8006896:	46bd      	mov	sp, r7
 8006898:	bd80      	pop	{r7, pc}
 800689a:	bf00      	nop
 800689c:	08006f0d 	.word	0x08006f0d
 80068a0:	08006f7b 	.word	0x08006f7b

080068a4 <HAL_SD_ErrorCallback>:
=======
 8006650:	e107      	b.n	8006862 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006658:	2b00      	cmp	r3, #0
 800665a:	f000 8102 	beq.w	8006862 <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	f003 0320 	and.w	r3, r3, #32
 8006664:	2b00      	cmp	r3, #0
 8006666:	d011      	beq.n	800668c <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	4618      	mov	r0, r3
 800666e:	f003 f891 	bl	8009794 <SDMMC_CmdStopTransfer>
 8006672:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8006674:	68bb      	ldr	r3, [r7, #8]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d008      	beq.n	800668c <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800667e:	68bb      	ldr	r3, [r7, #8]
 8006680:	431a      	orrs	r2, r3
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8006686:	6878      	ldr	r0, [r7, #4]
 8006688:	f000 f8f4 	bl	8006874 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	f003 0301 	and.w	r3, r3, #1
 8006692:	2b00      	cmp	r3, #0
 8006694:	f040 80e5 	bne.w	8006862 <HAL_SD_IRQHandler+0x2fa>
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	f003 0302 	and.w	r3, r3, #2
 800669e:	2b00      	cmp	r3, #0
 80066a0:	f040 80df 	bne.w	8006862 <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f022 0208 	bic.w	r2, r2, #8
 80066b2:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2201      	movs	r2, #1
 80066b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 80066bc:	6878      	ldr	r0, [r7, #4]
 80066be:	f003 fceb 	bl	800a098 <HAL_SD_TxCpltCallback>
}
 80066c2:	e0ce      	b.n	8006862 <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d008      	beq.n	80066e4 <HAL_SD_IRQHandler+0x17c>
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	f003 0308 	and.w	r3, r3, #8
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d003      	beq.n	80066e4 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 80066dc:	6878      	ldr	r0, [r7, #4]
 80066de:	f000 ffa7 	bl	8007630 <SD_Write_IT>
 80066e2:	e0be      	b.n	8006862 <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80066ea:	f240 233a 	movw	r3, #570	; 0x23a
 80066ee:	4013      	ands	r3, r2
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	f000 80b6 	beq.w	8006862 <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066fc:	f003 0302 	and.w	r3, r3, #2
 8006700:	2b00      	cmp	r3, #0
 8006702:	d005      	beq.n	8006710 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006708:	f043 0202 	orr.w	r2, r3, #2
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006716:	f003 0308 	and.w	r3, r3, #8
 800671a:	2b00      	cmp	r3, #0
 800671c:	d005      	beq.n	800672a <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006722:	f043 0208 	orr.w	r2, r3, #8
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006730:	f003 0320 	and.w	r3, r3, #32
 8006734:	2b00      	cmp	r3, #0
 8006736:	d005      	beq.n	8006744 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800673c:	f043 0220 	orr.w	r2, r3, #32
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800674a:	f003 0310 	and.w	r3, r3, #16
 800674e:	2b00      	cmp	r3, #0
 8006750:	d005      	beq.n	800675e <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006756:	f043 0210 	orr.w	r2, r3, #16
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006764:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006768:	2b00      	cmp	r3, #0
 800676a:	d005      	beq.n	8006778 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006770:	f043 0208 	orr.w	r2, r3, #8
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f240 723a 	movw	r2, #1850	; 0x73a
 8006780:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006788:	687a      	ldr	r2, [r7, #4]
 800678a:	6812      	ldr	r2, [r2, #0]
 800678c:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8006790:	f023 0302 	bic.w	r3, r3, #2
 8006794:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	4618      	mov	r0, r3
 800679c:	f002 fffa 	bl	8009794 <SDMMC_CmdStopTransfer>
 80067a0:	4602      	mov	r2, r0
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067a6:	431a      	orrs	r2, r3
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	f003 0308 	and.w	r3, r3, #8
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d00a      	beq.n	80067cc <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2201      	movs	r2, #1
 80067ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2200      	movs	r2, #0
 80067c2:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 80067c4:	6878      	ldr	r0, [r7, #4]
 80067c6:	f000 f855 	bl	8006874 <HAL_SD_ErrorCallback>
}
 80067ca:	e04a      	b.n	8006862 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d045      	beq.n	8006862 <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	f003 0310 	and.w	r3, r3, #16
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d104      	bne.n	80067ea <HAL_SD_IRQHandler+0x282>
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	f003 0320 	and.w	r3, r3, #32
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d011      	beq.n	800680e <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067ee:	4a1f      	ldr	r2, [pc, #124]	; (800686c <HAL_SD_IRQHandler+0x304>)
 80067f0:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067f6:	4618      	mov	r0, r3
 80067f8:	f7fd f88c 	bl	8003914 <HAL_DMA_Abort_IT>
 80067fc:	4603      	mov	r3, r0
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d02f      	beq.n	8006862 <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006806:	4618      	mov	r0, r3
 8006808:	f000 fb68 	bl	8006edc <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800680c:	e029      	b.n	8006862 <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	f003 0301 	and.w	r3, r3, #1
 8006814:	2b00      	cmp	r3, #0
 8006816:	d104      	bne.n	8006822 <HAL_SD_IRQHandler+0x2ba>
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	f003 0302 	and.w	r3, r3, #2
 800681e:	2b00      	cmp	r3, #0
 8006820:	d011      	beq.n	8006846 <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006826:	4a12      	ldr	r2, [pc, #72]	; (8006870 <HAL_SD_IRQHandler+0x308>)
 8006828:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800682e:	4618      	mov	r0, r3
 8006830:	f7fd f870 	bl	8003914 <HAL_DMA_Abort_IT>
 8006834:	4603      	mov	r3, r0
 8006836:	2b00      	cmp	r3, #0
 8006838:	d013      	beq.n	8006862 <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800683e:	4618      	mov	r0, r3
 8006840:	f000 fb83 	bl	8006f4a <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8006844:	e00d      	b.n	8006862 <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2200      	movs	r2, #0
 800684a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2201      	movs	r2, #1
 8006850:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2200      	movs	r2, #0
 8006858:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800685a:	6878      	ldr	r0, [r7, #4]
 800685c:	f003 fc12 	bl	800a084 <HAL_SD_AbortCallback>
}
 8006860:	e7ff      	b.n	8006862 <HAL_SD_IRQHandler+0x2fa>
 8006862:	bf00      	nop
 8006864:	3710      	adds	r7, #16
 8006866:	46bd      	mov	sp, r7
 8006868:	bd80      	pop	{r7, pc}
 800686a:	bf00      	nop
 800686c:	08006edd 	.word	0x08006edd
 8006870:	08006f4b 	.word	0x08006f4b

08006874 <HAL_SD_ErrorCallback>:
>>>>>>> Stashed changes
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
<<<<<<< Updated upstream
 80068a4:	b480      	push	{r7}
 80068a6:	b083      	sub	sp, #12
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
=======
 8006874:	b480      	push	{r7}
 8006876:	b083      	sub	sp, #12
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
<<<<<<< Updated upstream
 80068ac:	bf00      	nop
 80068ae:	370c      	adds	r7, #12
 80068b0:	46bd      	mov	sp, r7
 80068b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b6:	4770      	bx	lr

080068b8 <HAL_SD_GetCardCSD>:
=======
 800687c:	bf00      	nop
 800687e:	370c      	adds	r7, #12
 8006880:	46bd      	mov	sp, r7
 8006882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006886:	4770      	bx	lr

08006888 <HAL_SD_GetCardCSD>:
>>>>>>> Stashed changes
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
<<<<<<< Updated upstream
 80068b8:	b480      	push	{r7}
 80068ba:	b083      	sub	sp, #12
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
 80068c0:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80068c6:	0f9b      	lsrs	r3, r3, #30
 80068c8:	b2da      	uxtb	r2, r3
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80068d2:	0e9b      	lsrs	r3, r3, #26
 80068d4:	b2db      	uxtb	r3, r3
 80068d6:	f003 030f 	and.w	r3, r3, #15
 80068da:	b2da      	uxtb	r2, r3
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80068e4:	0e1b      	lsrs	r3, r3, #24
 80068e6:	b2db      	uxtb	r3, r3
 80068e8:	f003 0303 	and.w	r3, r3, #3
 80068ec:	b2da      	uxtb	r2, r3
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80068f6:	0c1b      	lsrs	r3, r3, #16
 80068f8:	b2da      	uxtb	r2, r3
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006902:	0a1b      	lsrs	r3, r3, #8
 8006904:	b2da      	uxtb	r2, r3
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800690e:	b2da      	uxtb	r2, r3
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006918:	0d1b      	lsrs	r3, r3, #20
 800691a:	b29a      	uxth	r2, r3
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006924:	0c1b      	lsrs	r3, r3, #16
 8006926:	b2db      	uxtb	r3, r3
 8006928:	f003 030f 	and.w	r3, r3, #15
 800692c:	b2da      	uxtb	r2, r3
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006936:	0bdb      	lsrs	r3, r3, #15
 8006938:	b2db      	uxtb	r3, r3
 800693a:	f003 0301 	and.w	r3, r3, #1
 800693e:	b2da      	uxtb	r2, r3
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006948:	0b9b      	lsrs	r3, r3, #14
 800694a:	b2db      	uxtb	r3, r3
 800694c:	f003 0301 	and.w	r3, r3, #1
 8006950:	b2da      	uxtb	r2, r3
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800695a:	0b5b      	lsrs	r3, r3, #13
 800695c:	b2db      	uxtb	r3, r3
 800695e:	f003 0301 	and.w	r3, r3, #1
 8006962:	b2da      	uxtb	r2, r3
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800696c:	0b1b      	lsrs	r3, r3, #12
 800696e:	b2db      	uxtb	r3, r3
 8006970:	f003 0301 	and.w	r3, r3, #1
 8006974:	b2da      	uxtb	r2, r3
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	2200      	movs	r2, #0
 800697e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006984:	2b00      	cmp	r3, #0
 8006986:	d163      	bne.n	8006a50 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800698c:	009a      	lsls	r2, r3, #2
 800698e:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006992:	4013      	ands	r3, r2
 8006994:	687a      	ldr	r2, [r7, #4]
 8006996:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8006998:	0f92      	lsrs	r2, r2, #30
 800699a:	431a      	orrs	r2, r3
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80069a4:	0edb      	lsrs	r3, r3, #27
 80069a6:	b2db      	uxtb	r3, r3
 80069a8:	f003 0307 	and.w	r3, r3, #7
 80069ac:	b2da      	uxtb	r2, r3
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80069b6:	0e1b      	lsrs	r3, r3, #24
 80069b8:	b2db      	uxtb	r3, r3
 80069ba:	f003 0307 	and.w	r3, r3, #7
 80069be:	b2da      	uxtb	r2, r3
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80069c8:	0d5b      	lsrs	r3, r3, #21
 80069ca:	b2db      	uxtb	r3, r3
 80069cc:	f003 0307 	and.w	r3, r3, #7
 80069d0:	b2da      	uxtb	r2, r3
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80069da:	0c9b      	lsrs	r3, r3, #18
 80069dc:	b2db      	uxtb	r3, r3
 80069de:	f003 0307 	and.w	r3, r3, #7
 80069e2:	b2da      	uxtb	r2, r3
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80069ec:	0bdb      	lsrs	r3, r3, #15
 80069ee:	b2db      	uxtb	r3, r3
 80069f0:	f003 0307 	and.w	r3, r3, #7
 80069f4:	b2da      	uxtb	r2, r3
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	691b      	ldr	r3, [r3, #16]
 80069fe:	1c5a      	adds	r2, r3, #1
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	7e1b      	ldrb	r3, [r3, #24]
 8006a08:	b2db      	uxtb	r3, r3
 8006a0a:	f003 0307 	and.w	r3, r3, #7
 8006a0e:	3302      	adds	r3, #2
 8006a10:	2201      	movs	r2, #1
 8006a12:	fa02 f303 	lsl.w	r3, r2, r3
 8006a16:	687a      	ldr	r2, [r7, #4]
 8006a18:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8006a1a:	fb02 f203 	mul.w	r2, r2, r3
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	7a1b      	ldrb	r3, [r3, #8]
 8006a26:	b2db      	uxtb	r3, r3
 8006a28:	f003 030f 	and.w	r3, r3, #15
 8006a2c:	2201      	movs	r2, #1
 8006a2e:	409a      	lsls	r2, r3
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a38:	687a      	ldr	r2, [r7, #4]
 8006a3a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8006a3c:	0a52      	lsrs	r2, r2, #9
 8006a3e:	fb02 f203 	mul.w	r2, r2, r3
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006a4c:	661a      	str	r2, [r3, #96]	; 0x60
 8006a4e:	e031      	b.n	8006ab4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a54:	2b01      	cmp	r3, #1
 8006a56:	d11d      	bne.n	8006a94 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006a5c:	041b      	lsls	r3, r3, #16
 8006a5e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a66:	0c1b      	lsrs	r3, r3, #16
 8006a68:	431a      	orrs	r2, r3
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	691b      	ldr	r3, [r3, #16]
 8006a72:	3301      	adds	r3, #1
 8006a74:	029a      	lsls	r2, r3, #10
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006a88:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	661a      	str	r2, [r3, #96]	; 0x60
 8006a92:	e00f      	b.n	8006ab4 <HAL_SD_GetCardCSD+0x1fc>
=======
 8006888:	b480      	push	{r7}
 800688a:	b083      	sub	sp, #12
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
 8006890:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006896:	0f9b      	lsrs	r3, r3, #30
 8006898:	b2da      	uxtb	r2, r3
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80068a2:	0e9b      	lsrs	r3, r3, #26
 80068a4:	b2db      	uxtb	r3, r3
 80068a6:	f003 030f 	and.w	r3, r3, #15
 80068aa:	b2da      	uxtb	r2, r3
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80068b4:	0e1b      	lsrs	r3, r3, #24
 80068b6:	b2db      	uxtb	r3, r3
 80068b8:	f003 0303 	and.w	r3, r3, #3
 80068bc:	b2da      	uxtb	r2, r3
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80068c6:	0c1b      	lsrs	r3, r3, #16
 80068c8:	b2da      	uxtb	r2, r3
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80068d2:	0a1b      	lsrs	r3, r3, #8
 80068d4:	b2da      	uxtb	r2, r3
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80068de:	b2da      	uxtb	r2, r3
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80068e8:	0d1b      	lsrs	r3, r3, #20
 80068ea:	b29a      	uxth	r2, r3
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80068f4:	0c1b      	lsrs	r3, r3, #16
 80068f6:	b2db      	uxtb	r3, r3
 80068f8:	f003 030f 	and.w	r3, r3, #15
 80068fc:	b2da      	uxtb	r2, r3
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006906:	0bdb      	lsrs	r3, r3, #15
 8006908:	b2db      	uxtb	r3, r3
 800690a:	f003 0301 	and.w	r3, r3, #1
 800690e:	b2da      	uxtb	r2, r3
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006918:	0b9b      	lsrs	r3, r3, #14
 800691a:	b2db      	uxtb	r3, r3
 800691c:	f003 0301 	and.w	r3, r3, #1
 8006920:	b2da      	uxtb	r2, r3
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800692a:	0b5b      	lsrs	r3, r3, #13
 800692c:	b2db      	uxtb	r3, r3
 800692e:	f003 0301 	and.w	r3, r3, #1
 8006932:	b2da      	uxtb	r2, r3
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800693c:	0b1b      	lsrs	r3, r3, #12
 800693e:	b2db      	uxtb	r3, r3
 8006940:	f003 0301 	and.w	r3, r3, #1
 8006944:	b2da      	uxtb	r2, r3
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	2200      	movs	r2, #0
 800694e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006954:	2b00      	cmp	r3, #0
 8006956:	d163      	bne.n	8006a20 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800695c:	009a      	lsls	r2, r3, #2
 800695e:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006962:	4013      	ands	r3, r2
 8006964:	687a      	ldr	r2, [r7, #4]
 8006966:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8006968:	0f92      	lsrs	r2, r2, #30
 800696a:	431a      	orrs	r2, r3
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006974:	0edb      	lsrs	r3, r3, #27
 8006976:	b2db      	uxtb	r3, r3
 8006978:	f003 0307 	and.w	r3, r3, #7
 800697c:	b2da      	uxtb	r2, r3
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006986:	0e1b      	lsrs	r3, r3, #24
 8006988:	b2db      	uxtb	r3, r3
 800698a:	f003 0307 	and.w	r3, r3, #7
 800698e:	b2da      	uxtb	r2, r3
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006998:	0d5b      	lsrs	r3, r3, #21
 800699a:	b2db      	uxtb	r3, r3
 800699c:	f003 0307 	and.w	r3, r3, #7
 80069a0:	b2da      	uxtb	r2, r3
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80069aa:	0c9b      	lsrs	r3, r3, #18
 80069ac:	b2db      	uxtb	r3, r3
 80069ae:	f003 0307 	and.w	r3, r3, #7
 80069b2:	b2da      	uxtb	r2, r3
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80069bc:	0bdb      	lsrs	r3, r3, #15
 80069be:	b2db      	uxtb	r3, r3
 80069c0:	f003 0307 	and.w	r3, r3, #7
 80069c4:	b2da      	uxtb	r2, r3
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	691b      	ldr	r3, [r3, #16]
 80069ce:	1c5a      	adds	r2, r3, #1
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	7e1b      	ldrb	r3, [r3, #24]
 80069d8:	b2db      	uxtb	r3, r3
 80069da:	f003 0307 	and.w	r3, r3, #7
 80069de:	3302      	adds	r3, #2
 80069e0:	2201      	movs	r2, #1
 80069e2:	fa02 f303 	lsl.w	r3, r2, r3
 80069e6:	687a      	ldr	r2, [r7, #4]
 80069e8:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80069ea:	fb02 f203 	mul.w	r2, r2, r3
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	7a1b      	ldrb	r3, [r3, #8]
 80069f6:	b2db      	uxtb	r3, r3
 80069f8:	f003 030f 	and.w	r3, r3, #15
 80069fc:	2201      	movs	r2, #1
 80069fe:	409a      	lsls	r2, r3
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a08:	687a      	ldr	r2, [r7, #4]
 8006a0a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8006a0c:	0a52      	lsrs	r2, r2, #9
 8006a0e:	fb02 f203 	mul.w	r2, r2, r3
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006a1c:	661a      	str	r2, [r3, #96]	; 0x60
 8006a1e:	e031      	b.n	8006a84 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a24:	2b01      	cmp	r3, #1
 8006a26:	d11d      	bne.n	8006a64 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006a2c:	041b      	lsls	r3, r3, #16
 8006a2e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a36:	0c1b      	lsrs	r3, r3, #16
 8006a38:	431a      	orrs	r2, r3
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	691b      	ldr	r3, [r3, #16]
 8006a42:	3301      	adds	r3, #1
 8006a44:	029a      	lsls	r2, r3, #10
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006a58:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	661a      	str	r2, [r3, #96]	; 0x60
 8006a62:	e00f      	b.n	8006a84 <HAL_SD_GetCardCSD+0x1fc>
>>>>>>> Stashed changes
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
<<<<<<< Updated upstream
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	4a58      	ldr	r2, [pc, #352]	; (8006bfc <HAL_SD_GetCardCSD+0x344>)
 8006a9a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aa0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2201      	movs	r2, #1
 8006aac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006ab0:	2301      	movs	r3, #1
 8006ab2:	e09d      	b.n	8006bf0 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ab8:	0b9b      	lsrs	r3, r3, #14
 8006aba:	b2db      	uxtb	r3, r3
 8006abc:	f003 0301 	and.w	r3, r3, #1
 8006ac0:	b2da      	uxtb	r2, r3
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006aca:	09db      	lsrs	r3, r3, #7
 8006acc:	b2db      	uxtb	r3, r3
 8006ace:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ad2:	b2da      	uxtb	r2, r3
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006adc:	b2db      	uxtb	r3, r3
 8006ade:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ae2:	b2da      	uxtb	r2, r3
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006aec:	0fdb      	lsrs	r3, r3, #31
 8006aee:	b2da      	uxtb	r2, r3
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006af8:	0f5b      	lsrs	r3, r3, #29
 8006afa:	b2db      	uxtb	r3, r3
 8006afc:	f003 0303 	and.w	r3, r3, #3
 8006b00:	b2da      	uxtb	r2, r3
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b0a:	0e9b      	lsrs	r3, r3, #26
 8006b0c:	b2db      	uxtb	r3, r3
 8006b0e:	f003 0307 	and.w	r3, r3, #7
 8006b12:	b2da      	uxtb	r2, r3
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b1c:	0d9b      	lsrs	r3, r3, #22
 8006b1e:	b2db      	uxtb	r3, r3
 8006b20:	f003 030f 	and.w	r3, r3, #15
 8006b24:	b2da      	uxtb	r2, r3
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b2e:	0d5b      	lsrs	r3, r3, #21
 8006b30:	b2db      	uxtb	r3, r3
 8006b32:	f003 0301 	and.w	r3, r3, #1
 8006b36:	b2da      	uxtb	r2, r3
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	2200      	movs	r2, #0
 8006b42:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b4a:	0c1b      	lsrs	r3, r3, #16
 8006b4c:	b2db      	uxtb	r3, r3
 8006b4e:	f003 0301 	and.w	r3, r3, #1
 8006b52:	b2da      	uxtb	r2, r3
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b5e:	0bdb      	lsrs	r3, r3, #15
 8006b60:	b2db      	uxtb	r3, r3
 8006b62:	f003 0301 	and.w	r3, r3, #1
 8006b66:	b2da      	uxtb	r2, r3
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b72:	0b9b      	lsrs	r3, r3, #14
 8006b74:	b2db      	uxtb	r3, r3
 8006b76:	f003 0301 	and.w	r3, r3, #1
 8006b7a:	b2da      	uxtb	r2, r3
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b86:	0b5b      	lsrs	r3, r3, #13
 8006b88:	b2db      	uxtb	r3, r3
 8006b8a:	f003 0301 	and.w	r3, r3, #1
 8006b8e:	b2da      	uxtb	r2, r3
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b9a:	0b1b      	lsrs	r3, r3, #12
 8006b9c:	b2db      	uxtb	r3, r3
 8006b9e:	f003 0301 	and.w	r3, r3, #1
 8006ba2:	b2da      	uxtb	r2, r3
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bae:	0a9b      	lsrs	r3, r3, #10
 8006bb0:	b2db      	uxtb	r3, r3
 8006bb2:	f003 0303 	and.w	r3, r3, #3
 8006bb6:	b2da      	uxtb	r2, r3
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bc2:	0a1b      	lsrs	r3, r3, #8
 8006bc4:	b2db      	uxtb	r3, r3
 8006bc6:	f003 0303 	and.w	r3, r3, #3
 8006bca:	b2da      	uxtb	r2, r3
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bd6:	085b      	lsrs	r3, r3, #1
 8006bd8:	b2db      	uxtb	r3, r3
 8006bda:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006bde:	b2da      	uxtb	r2, r3
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	2201      	movs	r2, #1
 8006bea:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8006bee:	2300      	movs	r3, #0
}
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	370c      	adds	r7, #12
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfa:	4770      	bx	lr
 8006bfc:	004005ff 	.word	0x004005ff

08006c00 <HAL_SD_GetCardInfo>:
=======
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	4a58      	ldr	r2, [pc, #352]	; (8006bcc <HAL_SD_GetCardCSD+0x344>)
 8006a6a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a70:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2201      	movs	r2, #1
 8006a7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006a80:	2301      	movs	r3, #1
 8006a82:	e09d      	b.n	8006bc0 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a88:	0b9b      	lsrs	r3, r3, #14
 8006a8a:	b2db      	uxtb	r3, r3
 8006a8c:	f003 0301 	and.w	r3, r3, #1
 8006a90:	b2da      	uxtb	r2, r3
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a9a:	09db      	lsrs	r3, r3, #7
 8006a9c:	b2db      	uxtb	r3, r3
 8006a9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006aa2:	b2da      	uxtb	r2, r3
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006aac:	b2db      	uxtb	r3, r3
 8006aae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ab2:	b2da      	uxtb	r2, r3
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006abc:	0fdb      	lsrs	r3, r3, #31
 8006abe:	b2da      	uxtb	r2, r3
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ac8:	0f5b      	lsrs	r3, r3, #29
 8006aca:	b2db      	uxtb	r3, r3
 8006acc:	f003 0303 	and.w	r3, r3, #3
 8006ad0:	b2da      	uxtb	r2, r3
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ada:	0e9b      	lsrs	r3, r3, #26
 8006adc:	b2db      	uxtb	r3, r3
 8006ade:	f003 0307 	and.w	r3, r3, #7
 8006ae2:	b2da      	uxtb	r2, r3
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006aec:	0d9b      	lsrs	r3, r3, #22
 8006aee:	b2db      	uxtb	r3, r3
 8006af0:	f003 030f 	and.w	r3, r3, #15
 8006af4:	b2da      	uxtb	r2, r3
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006afe:	0d5b      	lsrs	r3, r3, #21
 8006b00:	b2db      	uxtb	r3, r3
 8006b02:	f003 0301 	and.w	r3, r3, #1
 8006b06:	b2da      	uxtb	r2, r3
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	2200      	movs	r2, #0
 8006b12:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b1a:	0c1b      	lsrs	r3, r3, #16
 8006b1c:	b2db      	uxtb	r3, r3
 8006b1e:	f003 0301 	and.w	r3, r3, #1
 8006b22:	b2da      	uxtb	r2, r3
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b2e:	0bdb      	lsrs	r3, r3, #15
 8006b30:	b2db      	uxtb	r3, r3
 8006b32:	f003 0301 	and.w	r3, r3, #1
 8006b36:	b2da      	uxtb	r2, r3
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b42:	0b9b      	lsrs	r3, r3, #14
 8006b44:	b2db      	uxtb	r3, r3
 8006b46:	f003 0301 	and.w	r3, r3, #1
 8006b4a:	b2da      	uxtb	r2, r3
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b56:	0b5b      	lsrs	r3, r3, #13
 8006b58:	b2db      	uxtb	r3, r3
 8006b5a:	f003 0301 	and.w	r3, r3, #1
 8006b5e:	b2da      	uxtb	r2, r3
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b6a:	0b1b      	lsrs	r3, r3, #12
 8006b6c:	b2db      	uxtb	r3, r3
 8006b6e:	f003 0301 	and.w	r3, r3, #1
 8006b72:	b2da      	uxtb	r2, r3
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b7e:	0a9b      	lsrs	r3, r3, #10
 8006b80:	b2db      	uxtb	r3, r3
 8006b82:	f003 0303 	and.w	r3, r3, #3
 8006b86:	b2da      	uxtb	r2, r3
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b92:	0a1b      	lsrs	r3, r3, #8
 8006b94:	b2db      	uxtb	r3, r3
 8006b96:	f003 0303 	and.w	r3, r3, #3
 8006b9a:	b2da      	uxtb	r2, r3
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ba6:	085b      	lsrs	r3, r3, #1
 8006ba8:	b2db      	uxtb	r3, r3
 8006baa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006bae:	b2da      	uxtb	r2, r3
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	2201      	movs	r2, #1
 8006bba:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8006bbe:	2300      	movs	r3, #0
}
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	370c      	adds	r7, #12
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bca:	4770      	bx	lr
 8006bcc:	004005ff 	.word	0x004005ff

08006bd0 <HAL_SD_GetCardInfo>:
>>>>>>> Stashed changes
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
<<<<<<< Updated upstream
 8006c00:	b480      	push	{r7}
 8006c02:	b083      	sub	sp, #12
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
 8006c08:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8006c4a:	2300      	movs	r3, #0
}
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	370c      	adds	r7, #12
 8006c50:	46bd      	mov	sp, r7
 8006c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c56:	4770      	bx	lr

08006c58 <HAL_SD_ConfigWideBusOperation>:
=======
 8006bd0:	b480      	push	{r7}
 8006bd2:	b083      	sub	sp, #12
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
 8006bd8:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8006c1a:	2300      	movs	r3, #0
}
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	370c      	adds	r7, #12
 8006c20:	46bd      	mov	sp, r7
 8006c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c26:	4770      	bx	lr

08006c28 <HAL_SD_ConfigWideBusOperation>:
>>>>>>> Stashed changes
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
<<<<<<< Updated upstream
 8006c58:	b5b0      	push	{r4, r5, r7, lr}
 8006c5a:	b08e      	sub	sp, #56	; 0x38
 8006c5c:	af04      	add	r7, sp, #16
 8006c5e:	6078      	str	r0, [r7, #4]
 8006c60:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8006c62:	2300      	movs	r3, #0
 8006c64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
=======
 8006c28:	b5b0      	push	{r4, r5, r7, lr}
 8006c2a:	b08e      	sub	sp, #56	; 0x38
 8006c2c:	af04      	add	r7, sp, #16
 8006c2e:	6078      	str	r0, [r7, #4]
 8006c30:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8006c32:	2300      	movs	r3, #0
 8006c34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
>>>>>>> Stashed changes

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
<<<<<<< Updated upstream
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2203      	movs	r2, #3
 8006c6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c74:	2b03      	cmp	r3, #3
 8006c76:	d02e      	beq.n	8006cd6 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c7e:	d106      	bne.n	8006c8e <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c84:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	639a      	str	r2, [r3, #56]	; 0x38
 8006c8c:	e029      	b.n	8006ce2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c94:	d10a      	bne.n	8006cac <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8006c96:	6878      	ldr	r0, [r7, #4]
 8006c98:	f000 fb28 	bl	80072ec <SD_WideBus_Enable>
 8006c9c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ca2:	6a3b      	ldr	r3, [r7, #32]
 8006ca4:	431a      	orrs	r2, r3
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	639a      	str	r2, [r3, #56]	; 0x38
 8006caa:	e01a      	b.n	8006ce2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d10a      	bne.n	8006cc8 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8006cb2:	6878      	ldr	r0, [r7, #4]
 8006cb4:	f000 fb65 	bl	8007382 <SD_WideBus_Disable>
 8006cb8:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006cbe:	6a3b      	ldr	r3, [r7, #32]
 8006cc0:	431a      	orrs	r2, r3
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	639a      	str	r2, [r3, #56]	; 0x38
 8006cc6:	e00c      	b.n	8006ce2 <HAL_SD_ConfigWideBusOperation+0x8a>
=======
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2203      	movs	r2, #3
 8006c3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c44:	2b03      	cmp	r3, #3
 8006c46:	d02e      	beq.n	8006ca6 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c4e:	d106      	bne.n	8006c5e <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c54:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	639a      	str	r2, [r3, #56]	; 0x38
 8006c5c:	e029      	b.n	8006cb2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c64:	d10a      	bne.n	8006c7c <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8006c66:	6878      	ldr	r0, [r7, #4]
 8006c68:	f000 fb28 	bl	80072bc <SD_WideBus_Enable>
 8006c6c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c72:	6a3b      	ldr	r3, [r7, #32]
 8006c74:	431a      	orrs	r2, r3
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	639a      	str	r2, [r3, #56]	; 0x38
 8006c7a:	e01a      	b.n	8006cb2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d10a      	bne.n	8006c98 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8006c82:	6878      	ldr	r0, [r7, #4]
 8006c84:	f000 fb65 	bl	8007352 <SD_WideBus_Disable>
 8006c88:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c8e:	6a3b      	ldr	r3, [r7, #32]
 8006c90:	431a      	orrs	r2, r3
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	639a      	str	r2, [r3, #56]	; 0x38
 8006c96:	e00c      	b.n	8006cb2 <HAL_SD_ConfigWideBusOperation+0x8a>
>>>>>>> Stashed changes
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
<<<<<<< Updated upstream
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ccc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	639a      	str	r2, [r3, #56]	; 0x38
 8006cd4:	e005      	b.n	8006ce2 <HAL_SD_ConfigWideBusOperation+0x8a>
=======
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c9c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	639a      	str	r2, [r3, #56]	; 0x38
 8006ca4:	e005      	b.n	8006cb2 <HAL_SD_ConfigWideBusOperation+0x8a>
>>>>>>> Stashed changes
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
<<<<<<< Updated upstream
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cda:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d00b      	beq.n	8006d02 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	4a26      	ldr	r2, [pc, #152]	; (8006d88 <HAL_SD_ConfigWideBusOperation+0x130>)
 8006cf0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2201      	movs	r2, #1
 8006cf6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8006cfa:	2301      	movs	r3, #1
 8006cfc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006d00:	e01f      	b.n	8006d42 <HAL_SD_ConfigWideBusOperation+0xea>
=======
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006caa:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d00b      	beq.n	8006cd2 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	4a26      	ldr	r2, [pc, #152]	; (8006d58 <HAL_SD_ConfigWideBusOperation+0x130>)
 8006cc0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2201      	movs	r2, #1
 8006cc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8006cca:	2301      	movs	r3, #1
 8006ccc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006cd0:	e01f      	b.n	8006d12 <HAL_SD_ConfigWideBusOperation+0xea>
>>>>>>> Stashed changes
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
<<<<<<< Updated upstream
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	685b      	ldr	r3, [r3, #4]
 8006d06:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	689b      	ldr	r3, [r3, #8]
 8006d0c:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	68db      	ldr	r3, [r3, #12]
 8006d12:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	695b      	ldr	r3, [r3, #20]
 8006d1c:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	699b      	ldr	r3, [r3, #24]
 8006d22:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681d      	ldr	r5, [r3, #0]
 8006d28:	466c      	mov	r4, sp
 8006d2a:	f107 0314 	add.w	r3, r7, #20
 8006d2e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006d32:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006d36:	f107 0308 	add.w	r3, r7, #8
 8006d3a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006d3c:	4628      	mov	r0, r5
 8006d3e:	f002 fbbb 	bl	80094b8 <SDIO_Init>
=======
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	685b      	ldr	r3, [r3, #4]
 8006cd6:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	689b      	ldr	r3, [r3, #8]
 8006cdc:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	68db      	ldr	r3, [r3, #12]
 8006ce2:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	695b      	ldr	r3, [r3, #20]
 8006cec:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	699b      	ldr	r3, [r3, #24]
 8006cf2:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681d      	ldr	r5, [r3, #0]
 8006cf8:	466c      	mov	r4, sp
 8006cfa:	f107 0314 	add.w	r3, r7, #20
 8006cfe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006d02:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006d06:	f107 0308 	add.w	r3, r7, #8
 8006d0a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006d0c:	4628      	mov	r0, r5
 8006d0e:	f002 fbbb 	bl	8009488 <SDIO_Init>
>>>>>>> Stashed changes
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
<<<<<<< Updated upstream
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	f002 fc90 	bl	8009670 <SDMMC_CmdBlockLength>
 8006d50:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006d52:	6a3b      	ldr	r3, [r7, #32]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d00c      	beq.n	8006d72 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	4a0a      	ldr	r2, [pc, #40]	; (8006d88 <HAL_SD_ConfigWideBusOperation+0x130>)
 8006d5e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d64:	6a3b      	ldr	r3, [r7, #32]
 8006d66:	431a      	orrs	r2, r3
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8006d6c:	2301      	movs	r3, #1
 8006d6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
=======
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	f002 fc90 	bl	8009640 <SDMMC_CmdBlockLength>
 8006d20:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006d22:	6a3b      	ldr	r3, [r7, #32]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d00c      	beq.n	8006d42 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	4a0a      	ldr	r2, [pc, #40]	; (8006d58 <HAL_SD_ConfigWideBusOperation+0x130>)
 8006d2e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d34:	6a3b      	ldr	r3, [r7, #32]
 8006d36:	431a      	orrs	r2, r3
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8006d3c:	2301      	movs	r3, #1
 8006d3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
>>>>>>> Stashed changes
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
<<<<<<< Updated upstream
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2201      	movs	r2, #1
 8006d76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8006d7a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006d7e:	4618      	mov	r0, r3
 8006d80:	3728      	adds	r7, #40	; 0x28
 8006d82:	46bd      	mov	sp, r7
 8006d84:	bdb0      	pop	{r4, r5, r7, pc}
 8006d86:	bf00      	nop
 8006d88:	004005ff 	.word	0x004005ff

08006d8c <HAL_SD_GetCardState>:
=======
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2201      	movs	r2, #1
 8006d46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8006d4a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006d4e:	4618      	mov	r0, r3
 8006d50:	3728      	adds	r7, #40	; 0x28
 8006d52:	46bd      	mov	sp, r7
 8006d54:	bdb0      	pop	{r4, r5, r7, pc}
 8006d56:	bf00      	nop
 8006d58:	004005ff 	.word	0x004005ff

08006d5c <HAL_SD_GetCardState>:
>>>>>>> Stashed changes
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
<<<<<<< Updated upstream
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b086      	sub	sp, #24
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8006d94:	2300      	movs	r3, #0
 8006d96:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8006d98:	f107 030c 	add.w	r3, r7, #12
 8006d9c:	4619      	mov	r1, r3
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	f000 fa7c 	bl	800729c <SD_SendStatus>
 8006da4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006da6:	697b      	ldr	r3, [r7, #20]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d005      	beq.n	8006db8 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006db0:	697b      	ldr	r3, [r7, #20]
 8006db2:	431a      	orrs	r2, r3
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	0a5b      	lsrs	r3, r3, #9
 8006dbc:	f003 030f 	and.w	r3, r3, #15
 8006dc0:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8006dc2:	693b      	ldr	r3, [r7, #16]
}
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	3718      	adds	r7, #24
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	bd80      	pop	{r7, pc}

08006dcc <SD_DMATransmitCplt>:
=======
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b086      	sub	sp, #24
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8006d64:	2300      	movs	r3, #0
 8006d66:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8006d68:	f107 030c 	add.w	r3, r7, #12
 8006d6c:	4619      	mov	r1, r3
 8006d6e:	6878      	ldr	r0, [r7, #4]
 8006d70:	f000 fa7c 	bl	800726c <SD_SendStatus>
 8006d74:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006d76:	697b      	ldr	r3, [r7, #20]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d005      	beq.n	8006d88 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d80:	697b      	ldr	r3, [r7, #20]
 8006d82:	431a      	orrs	r2, r3
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	0a5b      	lsrs	r3, r3, #9
 8006d8c:	f003 030f 	and.w	r3, r3, #15
 8006d90:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8006d92:	693b      	ldr	r3, [r7, #16]
}
 8006d94:	4618      	mov	r0, r3
 8006d96:	3718      	adds	r7, #24
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	bd80      	pop	{r7, pc}

08006d9c <SD_DMATransmitCplt>:
>>>>>>> Stashed changes
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
<<<<<<< Updated upstream
 8006dcc:	b480      	push	{r7}
 8006dce:	b085      	sub	sp, #20
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dd8:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006de8:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8006dea:	bf00      	nop
 8006dec:	3714      	adds	r7, #20
 8006dee:	46bd      	mov	sp, r7
 8006df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df4:	4770      	bx	lr

08006df6 <SD_DMAReceiveCplt>:
=======
 8006d9c:	b480      	push	{r7}
 8006d9e:	b085      	sub	sp, #20
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006da8:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006db8:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8006dba:	bf00      	nop
 8006dbc:	3714      	adds	r7, #20
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc4:	4770      	bx	lr

08006dc6 <SD_DMAReceiveCplt>:
>>>>>>> Stashed changes
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
<<<<<<< Updated upstream
 8006df6:	b580      	push	{r7, lr}
 8006df8:	b084      	sub	sp, #16
 8006dfa:	af00      	add	r7, sp, #0
 8006dfc:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e02:	60fb      	str	r3, [r7, #12]
=======
 8006dc6:	b580      	push	{r7, lr}
 8006dc8:	b084      	sub	sp, #16
 8006dca:	af00      	add	r7, sp, #0
 8006dcc:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dd2:	60fb      	str	r3, [r7, #12]
>>>>>>> Stashed changes
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
<<<<<<< Updated upstream
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e08:	2b82      	cmp	r3, #130	; 0x82
 8006e0a:	d111      	bne.n	8006e30 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	4618      	mov	r0, r3
 8006e12:	f002 fcd7 	bl	80097c4 <SDMMC_CmdStopTransfer>
 8006e16:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d008      	beq.n	8006e30 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e22:	68bb      	ldr	r3, [r7, #8]
 8006e24:	431a      	orrs	r2, r3
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	639a      	str	r2, [r3, #56]	; 0x38
=======
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dd8:	2b82      	cmp	r3, #130	; 0x82
 8006dda:	d111      	bne.n	8006e00 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	4618      	mov	r0, r3
 8006de2:	f002 fcd7 	bl	8009794 <SDMMC_CmdStopTransfer>
 8006de6:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006de8:	68bb      	ldr	r3, [r7, #8]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d008      	beq.n	8006e00 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006df2:	68bb      	ldr	r3, [r7, #8]
 8006df4:	431a      	orrs	r2, r3
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	639a      	str	r2, [r3, #56]	; 0x38
>>>>>>> Stashed changes
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
<<<<<<< Updated upstream
 8006e2a:	68f8      	ldr	r0, [r7, #12]
 8006e2c:	f7ff fd3a 	bl	80068a4 <HAL_SD_ErrorCallback>
=======
 8006dfa:	68f8      	ldr	r0, [r7, #12]
 8006dfc:	f7ff fd3a 	bl	8006874 <HAL_SD_ErrorCallback>
>>>>>>> Stashed changes
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
<<<<<<< Updated upstream
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f022 0208 	bic.w	r2, r2, #8
 8006e3e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f240 523a 	movw	r2, #1338	; 0x53a
 8006e48:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	2201      	movs	r2, #1
 8006e4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	2200      	movs	r2, #0
 8006e56:	631a      	str	r2, [r3, #48]	; 0x30
=======
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f022 0208 	bic.w	r2, r2, #8
 8006e0e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f240 523a 	movw	r2, #1338	; 0x53a
 8006e18:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	2201      	movs	r2, #1
 8006e1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	2200      	movs	r2, #0
 8006e26:	631a      	str	r2, [r3, #48]	; 0x30
>>>>>>> Stashed changes

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
<<<<<<< Updated upstream
 8006e58:	68f8      	ldr	r0, [r7, #12]
 8006e5a:	f003 f93f 	bl	800a0dc <HAL_SD_RxCpltCallback>
#endif
}
 8006e5e:	bf00      	nop
 8006e60:	3710      	adds	r7, #16
 8006e62:	46bd      	mov	sp, r7
 8006e64:	bd80      	pop	{r7, pc}
	...

08006e68 <SD_DMAError>:
=======
 8006e28:	68f8      	ldr	r0, [r7, #12]
 8006e2a:	f003 f93f 	bl	800a0ac <HAL_SD_RxCpltCallback>
#endif
}
 8006e2e:	bf00      	nop
 8006e30:	3710      	adds	r7, #16
 8006e32:	46bd      	mov	sp, r7
 8006e34:	bd80      	pop	{r7, pc}
	...

08006e38 <SD_DMAError>:
>>>>>>> Stashed changes
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
<<<<<<< Updated upstream
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b086      	sub	sp, #24
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e74:	617b      	str	r3, [r7, #20]
=======
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b086      	sub	sp, #24
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e44:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
<<<<<<< Updated upstream
 8006e76:	6878      	ldr	r0, [r7, #4]
 8006e78:	f7fc fef6 	bl	8003c68 <HAL_DMA_GetError>
 8006e7c:	4603      	mov	r3, r0
 8006e7e:	2b02      	cmp	r3, #2
 8006e80:	d03e      	beq.n	8006f00 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8006e82:	697b      	ldr	r3, [r7, #20]
 8006e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e88:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8006e8a:	697b      	ldr	r3, [r7, #20]
 8006e8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e90:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8006e92:	693b      	ldr	r3, [r7, #16]
 8006e94:	2b01      	cmp	r3, #1
 8006e96:	d002      	beq.n	8006e9e <SD_DMAError+0x36>
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	2b01      	cmp	r3, #1
 8006e9c:	d12d      	bne.n	8006efa <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006e9e:	697b      	ldr	r3, [r7, #20]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	4a19      	ldr	r2, [pc, #100]	; (8006f08 <SD_DMAError+0xa0>)
 8006ea4:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8006ea6:	697b      	ldr	r3, [r7, #20]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006eac:	697b      	ldr	r3, [r7, #20]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8006eb4:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8006eb6:	697b      	ldr	r3, [r7, #20]
 8006eb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eba:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006ebe:	697b      	ldr	r3, [r7, #20]
 8006ec0:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8006ec2:	6978      	ldr	r0, [r7, #20]
 8006ec4:	f7ff ff62 	bl	8006d8c <HAL_SD_GetCardState>
 8006ec8:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8006eca:	68bb      	ldr	r3, [r7, #8]
 8006ecc:	2b06      	cmp	r3, #6
 8006ece:	d002      	beq.n	8006ed6 <SD_DMAError+0x6e>
 8006ed0:	68bb      	ldr	r3, [r7, #8]
 8006ed2:	2b05      	cmp	r3, #5
 8006ed4:	d10a      	bne.n	8006eec <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006ed6:	697b      	ldr	r3, [r7, #20]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	4618      	mov	r0, r3
 8006edc:	f002 fc72 	bl	80097c4 <SDMMC_CmdStopTransfer>
 8006ee0:	4602      	mov	r2, r0
 8006ee2:	697b      	ldr	r3, [r7, #20]
 8006ee4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ee6:	431a      	orrs	r2, r3
 8006ee8:	697b      	ldr	r3, [r7, #20]
 8006eea:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8006eec:	697b      	ldr	r3, [r7, #20]
 8006eee:	2201      	movs	r2, #1
 8006ef0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006ef4:	697b      	ldr	r3, [r7, #20]
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	631a      	str	r2, [r3, #48]	; 0x30
=======
 8006e46:	6878      	ldr	r0, [r7, #4]
 8006e48:	f7fc ff10 	bl	8003c6c <HAL_DMA_GetError>
 8006e4c:	4603      	mov	r3, r0
 8006e4e:	2b02      	cmp	r3, #2
 8006e50:	d03e      	beq.n	8006ed0 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8006e52:	697b      	ldr	r3, [r7, #20]
 8006e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e58:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8006e5a:	697b      	ldr	r3, [r7, #20]
 8006e5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e60:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8006e62:	693b      	ldr	r3, [r7, #16]
 8006e64:	2b01      	cmp	r3, #1
 8006e66:	d002      	beq.n	8006e6e <SD_DMAError+0x36>
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	2b01      	cmp	r3, #1
 8006e6c:	d12d      	bne.n	8006eca <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006e6e:	697b      	ldr	r3, [r7, #20]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	4a19      	ldr	r2, [pc, #100]	; (8006ed8 <SD_DMAError+0xa0>)
 8006e74:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8006e76:	697b      	ldr	r3, [r7, #20]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006e7c:	697b      	ldr	r3, [r7, #20]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8006e84:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8006e86:	697b      	ldr	r3, [r7, #20]
 8006e88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e8a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006e8e:	697b      	ldr	r3, [r7, #20]
 8006e90:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8006e92:	6978      	ldr	r0, [r7, #20]
 8006e94:	f7ff ff62 	bl	8006d5c <HAL_SD_GetCardState>
 8006e98:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8006e9a:	68bb      	ldr	r3, [r7, #8]
 8006e9c:	2b06      	cmp	r3, #6
 8006e9e:	d002      	beq.n	8006ea6 <SD_DMAError+0x6e>
 8006ea0:	68bb      	ldr	r3, [r7, #8]
 8006ea2:	2b05      	cmp	r3, #5
 8006ea4:	d10a      	bne.n	8006ebc <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006ea6:	697b      	ldr	r3, [r7, #20]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	4618      	mov	r0, r3
 8006eac:	f002 fc72 	bl	8009794 <SDMMC_CmdStopTransfer>
 8006eb0:	4602      	mov	r2, r0
 8006eb2:	697b      	ldr	r3, [r7, #20]
 8006eb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eb6:	431a      	orrs	r2, r3
 8006eb8:	697b      	ldr	r3, [r7, #20]
 8006eba:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8006ebc:	697b      	ldr	r3, [r7, #20]
 8006ebe:	2201      	movs	r2, #1
 8006ec0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006ec4:	697b      	ldr	r3, [r7, #20]
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	631a      	str	r2, [r3, #48]	; 0x30
>>>>>>> Stashed changes
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
<<<<<<< Updated upstream
 8006efa:	6978      	ldr	r0, [r7, #20]
 8006efc:	f7ff fcd2 	bl	80068a4 <HAL_SD_ErrorCallback>
#endif
  }
}
 8006f00:	bf00      	nop
 8006f02:	3718      	adds	r7, #24
 8006f04:	46bd      	mov	sp, r7
 8006f06:	bd80      	pop	{r7, pc}
 8006f08:	004005ff 	.word	0x004005ff

08006f0c <SD_DMATxAbort>:
=======
 8006eca:	6978      	ldr	r0, [r7, #20]
 8006ecc:	f7ff fcd2 	bl	8006874 <HAL_SD_ErrorCallback>
#endif
  }
}
 8006ed0:	bf00      	nop
 8006ed2:	3718      	adds	r7, #24
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	bd80      	pop	{r7, pc}
 8006ed8:	004005ff 	.word	0x004005ff

08006edc <SD_DMATxAbort>:
>>>>>>> Stashed changes
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
<<<<<<< Updated upstream
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b084      	sub	sp, #16
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f18:	60fb      	str	r3, [r7, #12]
=======
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b084      	sub	sp, #16
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ee8:	60fb      	str	r3, [r7, #12]
>>>>>>> Stashed changes
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
<<<<<<< Updated upstream
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	f240 523a 	movw	r2, #1338	; 0x53a
 8006f22:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8006f24:	68f8      	ldr	r0, [r7, #12]
 8006f26:	f7ff ff31 	bl	8006d8c <HAL_SD_GetCardState>
 8006f2a:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	2201      	movs	r2, #1
 8006f30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	2200      	movs	r2, #0
 8006f38:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8006f3a:	68bb      	ldr	r3, [r7, #8]
 8006f3c:	2b06      	cmp	r3, #6
 8006f3e:	d002      	beq.n	8006f46 <SD_DMATxAbort+0x3a>
 8006f40:	68bb      	ldr	r3, [r7, #8]
 8006f42:	2b05      	cmp	r3, #5
 8006f44:	d10a      	bne.n	8006f5c <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	f002 fc3a 	bl	80097c4 <SDMMC_CmdStopTransfer>
 8006f50:	4602      	mov	r2, r0
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f56:	431a      	orrs	r2, r3
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d103      	bne.n	8006f6c <SD_DMATxAbort+0x60>
=======
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f240 523a 	movw	r2, #1338	; 0x53a
 8006ef2:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8006ef4:	68f8      	ldr	r0, [r7, #12]
 8006ef6:	f7ff ff31 	bl	8006d5c <HAL_SD_GetCardState>
 8006efa:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	2201      	movs	r2, #1
 8006f00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	2200      	movs	r2, #0
 8006f08:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8006f0a:	68bb      	ldr	r3, [r7, #8]
 8006f0c:	2b06      	cmp	r3, #6
 8006f0e:	d002      	beq.n	8006f16 <SD_DMATxAbort+0x3a>
 8006f10:	68bb      	ldr	r3, [r7, #8]
 8006f12:	2b05      	cmp	r3, #5
 8006f14:	d10a      	bne.n	8006f2c <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	f002 fc3a 	bl	8009794 <SDMMC_CmdStopTransfer>
 8006f20:	4602      	mov	r2, r0
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f26:	431a      	orrs	r2, r3
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d103      	bne.n	8006f3c <SD_DMATxAbort+0x60>
>>>>>>> Stashed changes
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
<<<<<<< Updated upstream
 8006f64:	68f8      	ldr	r0, [r7, #12]
 8006f66:	f003 f8a5 	bl	800a0b4 <HAL_SD_AbortCallback>
=======
 8006f34:	68f8      	ldr	r0, [r7, #12]
 8006f36:	f003 f8a5 	bl	800a084 <HAL_SD_AbortCallback>
>>>>>>> Stashed changes
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
<<<<<<< Updated upstream
 8006f6a:	e002      	b.n	8006f72 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8006f6c:	68f8      	ldr	r0, [r7, #12]
 8006f6e:	f7ff fc99 	bl	80068a4 <HAL_SD_ErrorCallback>
}
 8006f72:	bf00      	nop
 8006f74:	3710      	adds	r7, #16
 8006f76:	46bd      	mov	sp, r7
 8006f78:	bd80      	pop	{r7, pc}

08006f7a <SD_DMARxAbort>:
=======
 8006f3a:	e002      	b.n	8006f42 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8006f3c:	68f8      	ldr	r0, [r7, #12]
 8006f3e:	f7ff fc99 	bl	8006874 <HAL_SD_ErrorCallback>
}
 8006f42:	bf00      	nop
 8006f44:	3710      	adds	r7, #16
 8006f46:	46bd      	mov	sp, r7
 8006f48:	bd80      	pop	{r7, pc}

08006f4a <SD_DMARxAbort>:
>>>>>>> Stashed changes
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
<<<<<<< Updated upstream
 8006f7a:	b580      	push	{r7, lr}
 8006f7c:	b084      	sub	sp, #16
 8006f7e:	af00      	add	r7, sp, #0
 8006f80:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f86:	60fb      	str	r3, [r7, #12]
=======
 8006f4a:	b580      	push	{r7, lr}
 8006f4c:	b084      	sub	sp, #16
 8006f4e:	af00      	add	r7, sp, #0
 8006f50:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f56:	60fb      	str	r3, [r7, #12]
>>>>>>> Stashed changes
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
<<<<<<< Updated upstream
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f240 523a 	movw	r2, #1338	; 0x53a
 8006f90:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8006f92:	68f8      	ldr	r0, [r7, #12]
 8006f94:	f7ff fefa 	bl	8006d8c <HAL_SD_GetCardState>
 8006f98:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	2201      	movs	r2, #1
 8006f9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8006fa8:	68bb      	ldr	r3, [r7, #8]
 8006faa:	2b06      	cmp	r3, #6
 8006fac:	d002      	beq.n	8006fb4 <SD_DMARxAbort+0x3a>
 8006fae:	68bb      	ldr	r3, [r7, #8]
 8006fb0:	2b05      	cmp	r3, #5
 8006fb2:	d10a      	bne.n	8006fca <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	4618      	mov	r0, r3
 8006fba:	f002 fc03 	bl	80097c4 <SDMMC_CmdStopTransfer>
 8006fbe:	4602      	mov	r2, r0
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fc4:	431a      	orrs	r2, r3
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d103      	bne.n	8006fda <SD_DMARxAbort+0x60>
=======
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f240 523a 	movw	r2, #1338	; 0x53a
 8006f60:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8006f62:	68f8      	ldr	r0, [r7, #12]
 8006f64:	f7ff fefa 	bl	8006d5c <HAL_SD_GetCardState>
 8006f68:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	2201      	movs	r2, #1
 8006f6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	2200      	movs	r2, #0
 8006f76:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8006f78:	68bb      	ldr	r3, [r7, #8]
 8006f7a:	2b06      	cmp	r3, #6
 8006f7c:	d002      	beq.n	8006f84 <SD_DMARxAbort+0x3a>
 8006f7e:	68bb      	ldr	r3, [r7, #8]
 8006f80:	2b05      	cmp	r3, #5
 8006f82:	d10a      	bne.n	8006f9a <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	4618      	mov	r0, r3
 8006f8a:	f002 fc03 	bl	8009794 <SDMMC_CmdStopTransfer>
 8006f8e:	4602      	mov	r2, r0
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f94:	431a      	orrs	r2, r3
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d103      	bne.n	8006faa <SD_DMARxAbort+0x60>
>>>>>>> Stashed changes
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
<<<<<<< Updated upstream
 8006fd2:	68f8      	ldr	r0, [r7, #12]
 8006fd4:	f003 f86e 	bl	800a0b4 <HAL_SD_AbortCallback>
=======
 8006fa2:	68f8      	ldr	r0, [r7, #12]
 8006fa4:	f003 f86e 	bl	800a084 <HAL_SD_AbortCallback>
>>>>>>> Stashed changes
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
<<<<<<< Updated upstream
 8006fd8:	e002      	b.n	8006fe0 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8006fda:	68f8      	ldr	r0, [r7, #12]
 8006fdc:	f7ff fc62 	bl	80068a4 <HAL_SD_ErrorCallback>
}
 8006fe0:	bf00      	nop
 8006fe2:	3710      	adds	r7, #16
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	bd80      	pop	{r7, pc}

08006fe8 <SD_InitCard>:
=======
 8006fa8:	e002      	b.n	8006fb0 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8006faa:	68f8      	ldr	r0, [r7, #12]
 8006fac:	f7ff fc62 	bl	8006874 <HAL_SD_ErrorCallback>
}
 8006fb0:	bf00      	nop
 8006fb2:	3710      	adds	r7, #16
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	bd80      	pop	{r7, pc}

08006fb8 <SD_InitCard>:
>>>>>>> Stashed changes
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
<<<<<<< Updated upstream
 8006fe8:	b5b0      	push	{r4, r5, r7, lr}
 8006fea:	b094      	sub	sp, #80	; 0x50
 8006fec:	af04      	add	r7, sp, #16
 8006fee:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8006ff0:	2301      	movs	r3, #1
 8006ff2:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	f002 fab5 	bl	8009568 <SDIO_GetPowerState>
 8006ffe:	4603      	mov	r3, r0
 8007000:	2b00      	cmp	r3, #0
 8007002:	d102      	bne.n	800700a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007004:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8007008:	e0b6      	b.n	8007178 <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800700e:	2b03      	cmp	r3, #3
 8007010:	d02f      	beq.n	8007072 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	4618      	mov	r0, r3
 8007018:	f002 fcde 	bl	80099d8 <SDMMC_CmdSendCID>
 800701c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800701e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007020:	2b00      	cmp	r3, #0
 8007022:	d001      	beq.n	8007028 <SD_InitCard+0x40>
    {
      return errorstate;
 8007024:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007026:	e0a7      	b.n	8007178 <SD_InitCard+0x190>
=======
 8006fb8:	b5b0      	push	{r4, r5, r7, lr}
 8006fba:	b094      	sub	sp, #80	; 0x50
 8006fbc:	af04      	add	r7, sp, #16
 8006fbe:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8006fc0:	2301      	movs	r3, #1
 8006fc2:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	4618      	mov	r0, r3
 8006fca:	f002 fab5 	bl	8009538 <SDIO_GetPowerState>
 8006fce:	4603      	mov	r3, r0
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d102      	bne.n	8006fda <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006fd4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006fd8:	e0b6      	b.n	8007148 <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fde:	2b03      	cmp	r3, #3
 8006fe0:	d02f      	beq.n	8007042 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	f002 fcde 	bl	80099a8 <SDMMC_CmdSendCID>
 8006fec:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006fee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d001      	beq.n	8006ff8 <SD_InitCard+0x40>
    {
      return errorstate;
 8006ff4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ff6:	e0a7      	b.n	8007148 <SD_InitCard+0x190>
>>>>>>> Stashed changes
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
<<<<<<< Updated upstream
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	2100      	movs	r1, #0
 800702e:	4618      	mov	r0, r3
 8007030:	f002 fadf 	bl	80095f2 <SDIO_GetResponse>
 8007034:	4602      	mov	r2, r0
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	2104      	movs	r1, #4
 8007040:	4618      	mov	r0, r3
 8007042:	f002 fad6 	bl	80095f2 <SDIO_GetResponse>
 8007046:	4602      	mov	r2, r0
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	2108      	movs	r1, #8
 8007052:	4618      	mov	r0, r3
 8007054:	f002 facd 	bl	80095f2 <SDIO_GetResponse>
 8007058:	4602      	mov	r2, r0
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	210c      	movs	r1, #12
 8007064:	4618      	mov	r0, r3
 8007066:	f002 fac4 	bl	80095f2 <SDIO_GetResponse>
 800706a:	4602      	mov	r2, r0
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
=======
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	2100      	movs	r1, #0
 8006ffe:	4618      	mov	r0, r3
 8007000:	f002 fadf 	bl	80095c2 <SDIO_GetResponse>
 8007004:	4602      	mov	r2, r0
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	2104      	movs	r1, #4
 8007010:	4618      	mov	r0, r3
 8007012:	f002 fad6 	bl	80095c2 <SDIO_GetResponse>
 8007016:	4602      	mov	r2, r0
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	2108      	movs	r1, #8
 8007022:	4618      	mov	r0, r3
 8007024:	f002 facd 	bl	80095c2 <SDIO_GetResponse>
 8007028:	4602      	mov	r2, r0
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	210c      	movs	r1, #12
 8007034:	4618      	mov	r0, r3
 8007036:	f002 fac4 	bl	80095c2 <SDIO_GetResponse>
 800703a:	4602      	mov	r2, r0
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
>>>>>>> Stashed changes
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
<<<<<<< Updated upstream
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007076:	2b03      	cmp	r3, #3
 8007078:	d00d      	beq.n	8007096 <SD_InitCard+0xae>
=======
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007046:	2b03      	cmp	r3, #3
 8007048:	d00d      	beq.n	8007066 <SD_InitCard+0xae>
>>>>>>> Stashed changes
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
<<<<<<< Updated upstream
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f107 020e 	add.w	r2, r7, #14
 8007082:	4611      	mov	r1, r2
 8007084:	4618      	mov	r0, r3
 8007086:	f002 fce4 	bl	8009a52 <SDMMC_CmdSetRelAdd>
 800708a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800708c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800708e:	2b00      	cmp	r3, #0
 8007090:	d001      	beq.n	8007096 <SD_InitCard+0xae>
    {
      return errorstate;
 8007092:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007094:	e070      	b.n	8007178 <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800709a:	2b03      	cmp	r3, #3
 800709c:	d036      	beq.n	800710c <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800709e:	89fb      	ldrh	r3, [r7, #14]
 80070a0:	461a      	mov	r2, r3
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681a      	ldr	r2, [r3, #0]
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070ae:	041b      	lsls	r3, r3, #16
 80070b0:	4619      	mov	r1, r3
 80070b2:	4610      	mov	r0, r2
 80070b4:	f002 fcae 	bl	8009a14 <SDMMC_CmdSendCSD>
 80070b8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80070ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d001      	beq.n	80070c4 <SD_InitCard+0xdc>
    {
      return errorstate;
 80070c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070c2:	e059      	b.n	8007178 <SD_InitCard+0x190>
=======
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f107 020e 	add.w	r2, r7, #14
 8007052:	4611      	mov	r1, r2
 8007054:	4618      	mov	r0, r3
 8007056:	f002 fce4 	bl	8009a22 <SDMMC_CmdSetRelAdd>
 800705a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800705c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800705e:	2b00      	cmp	r3, #0
 8007060:	d001      	beq.n	8007066 <SD_InitCard+0xae>
    {
      return errorstate;
 8007062:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007064:	e070      	b.n	8007148 <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800706a:	2b03      	cmp	r3, #3
 800706c:	d036      	beq.n	80070dc <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800706e:	89fb      	ldrh	r3, [r7, #14]
 8007070:	461a      	mov	r2, r3
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681a      	ldr	r2, [r3, #0]
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800707e:	041b      	lsls	r3, r3, #16
 8007080:	4619      	mov	r1, r3
 8007082:	4610      	mov	r0, r2
 8007084:	f002 fcae 	bl	80099e4 <SDMMC_CmdSendCSD>
 8007088:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800708a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800708c:	2b00      	cmp	r3, #0
 800708e:	d001      	beq.n	8007094 <SD_InitCard+0xdc>
    {
      return errorstate;
 8007090:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007092:	e059      	b.n	8007148 <SD_InitCard+0x190>
>>>>>>> Stashed changes
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
<<<<<<< Updated upstream
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	2100      	movs	r1, #0
 80070ca:	4618      	mov	r0, r3
 80070cc:	f002 fa91 	bl	80095f2 <SDIO_GetResponse>
 80070d0:	4602      	mov	r2, r0
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	2104      	movs	r1, #4
 80070dc:	4618      	mov	r0, r3
 80070de:	f002 fa88 	bl	80095f2 <SDIO_GetResponse>
 80070e2:	4602      	mov	r2, r0
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	2108      	movs	r1, #8
 80070ee:	4618      	mov	r0, r3
 80070f0:	f002 fa7f 	bl	80095f2 <SDIO_GetResponse>
 80070f4:	4602      	mov	r2, r0
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	210c      	movs	r1, #12
 8007100:	4618      	mov	r0, r3
 8007102:	f002 fa76 	bl	80095f2 <SDIO_GetResponse>
 8007106:	4602      	mov	r2, r0
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	671a      	str	r2, [r3, #112]	; 0x70
=======
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	2100      	movs	r1, #0
 800709a:	4618      	mov	r0, r3
 800709c:	f002 fa91 	bl	80095c2 <SDIO_GetResponse>
 80070a0:	4602      	mov	r2, r0
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	2104      	movs	r1, #4
 80070ac:	4618      	mov	r0, r3
 80070ae:	f002 fa88 	bl	80095c2 <SDIO_GetResponse>
 80070b2:	4602      	mov	r2, r0
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	2108      	movs	r1, #8
 80070be:	4618      	mov	r0, r3
 80070c0:	f002 fa7f 	bl	80095c2 <SDIO_GetResponse>
 80070c4:	4602      	mov	r2, r0
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	210c      	movs	r1, #12
 80070d0:	4618      	mov	r0, r3
 80070d2:	f002 fa76 	bl	80095c2 <SDIO_GetResponse>
 80070d6:	4602      	mov	r2, r0
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	671a      	str	r2, [r3, #112]	; 0x70
>>>>>>> Stashed changes
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
<<<<<<< Updated upstream
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	2104      	movs	r1, #4
 8007112:	4618      	mov	r0, r3
 8007114:	f002 fa6d 	bl	80095f2 <SDIO_GetResponse>
 8007118:	4603      	mov	r3, r0
 800711a:	0d1a      	lsrs	r2, r3, #20
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8007120:	f107 0310 	add.w	r3, r7, #16
 8007124:	4619      	mov	r1, r3
 8007126:	6878      	ldr	r0, [r7, #4]
 8007128:	f7ff fbc6 	bl	80068b8 <HAL_SD_GetCardCSD>
 800712c:	4603      	mov	r3, r0
 800712e:	2b00      	cmp	r3, #0
 8007130:	d002      	beq.n	8007138 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007132:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007136:	e01f      	b.n	8007178 <SD_InitCard+0x190>
=======
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	2104      	movs	r1, #4
 80070e2:	4618      	mov	r0, r3
 80070e4:	f002 fa6d 	bl	80095c2 <SDIO_GetResponse>
 80070e8:	4603      	mov	r3, r0
 80070ea:	0d1a      	lsrs	r2, r3, #20
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80070f0:	f107 0310 	add.w	r3, r7, #16
 80070f4:	4619      	mov	r1, r3
 80070f6:	6878      	ldr	r0, [r7, #4]
 80070f8:	f7ff fbc6 	bl	8006888 <HAL_SD_GetCardCSD>
 80070fc:	4603      	mov	r3, r0
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d002      	beq.n	8007108 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007102:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007106:	e01f      	b.n	8007148 <SD_InitCard+0x190>
>>>>>>> Stashed changes
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
<<<<<<< Updated upstream
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	6819      	ldr	r1, [r3, #0]
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007140:	041b      	lsls	r3, r3, #16
 8007142:	461a      	mov	r2, r3
 8007144:	f04f 0300 	mov.w	r3, #0
 8007148:	4608      	mov	r0, r1
 800714a:	f002 fb5d 	bl	8009808 <SDMMC_CmdSelDesel>
 800714e:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8007150:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007152:	2b00      	cmp	r3, #0
 8007154:	d001      	beq.n	800715a <SD_InitCard+0x172>
  {
    return errorstate;
 8007156:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007158:	e00e      	b.n	8007178 <SD_InitCard+0x190>
=======
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	6819      	ldr	r1, [r3, #0]
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007110:	041b      	lsls	r3, r3, #16
 8007112:	461a      	mov	r2, r3
 8007114:	f04f 0300 	mov.w	r3, #0
 8007118:	4608      	mov	r0, r1
 800711a:	f002 fb5d 	bl	80097d8 <SDMMC_CmdSelDesel>
 800711e:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8007120:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007122:	2b00      	cmp	r3, #0
 8007124:	d001      	beq.n	800712a <SD_InitCard+0x172>
  {
    return errorstate;
 8007126:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007128:	e00e      	b.n	8007148 <SD_InitCard+0x190>
>>>>>>> Stashed changes
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
<<<<<<< Updated upstream
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681d      	ldr	r5, [r3, #0]
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	466c      	mov	r4, sp
 8007162:	f103 0210 	add.w	r2, r3, #16
 8007166:	ca07      	ldmia	r2, {r0, r1, r2}
 8007168:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800716c:	3304      	adds	r3, #4
 800716e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007170:	4628      	mov	r0, r5
 8007172:	f002 f9a1 	bl	80094b8 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8007176:	2300      	movs	r3, #0
}
 8007178:	4618      	mov	r0, r3
 800717a:	3740      	adds	r7, #64	; 0x40
 800717c:	46bd      	mov	sp, r7
 800717e:	bdb0      	pop	{r4, r5, r7, pc}

08007180 <SD_PowerON>:
=======
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681d      	ldr	r5, [r3, #0]
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	466c      	mov	r4, sp
 8007132:	f103 0210 	add.w	r2, r3, #16
 8007136:	ca07      	ldmia	r2, {r0, r1, r2}
 8007138:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800713c:	3304      	adds	r3, #4
 800713e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007140:	4628      	mov	r0, r5
 8007142:	f002 f9a1 	bl	8009488 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8007146:	2300      	movs	r3, #0
}
 8007148:	4618      	mov	r0, r3
 800714a:	3740      	adds	r7, #64	; 0x40
 800714c:	46bd      	mov	sp, r7
 800714e:	bdb0      	pop	{r4, r5, r7, pc}

08007150 <SD_PowerON>:
>>>>>>> Stashed changes
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
<<<<<<< Updated upstream
 8007180:	b580      	push	{r7, lr}
 8007182:	b086      	sub	sp, #24
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007188:	2300      	movs	r3, #0
 800718a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800718c:	2300      	movs	r3, #0
 800718e:	617b      	str	r3, [r7, #20]
 8007190:	2300      	movs	r3, #0
 8007192:	613b      	str	r3, [r7, #16]
=======
 8007150:	b580      	push	{r7, lr}
 8007152:	b086      	sub	sp, #24
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007158:	2300      	movs	r3, #0
 800715a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800715c:	2300      	movs	r3, #0
 800715e:	617b      	str	r3, [r7, #20]
 8007160:	2300      	movs	r3, #0
 8007162:	613b      	str	r3, [r7, #16]
>>>>>>> Stashed changes
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
<<<<<<< Updated upstream
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	4618      	mov	r0, r3
 800719a:	f002 fb58 	bl	800984e <SDMMC_CmdGoIdleState>
 800719e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d001      	beq.n	80071aa <SD_PowerON+0x2a>
  {
    return errorstate;
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	e072      	b.n	8007290 <SD_PowerON+0x110>
=======
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	4618      	mov	r0, r3
 800716a:	f002 fb58 	bl	800981e <SDMMC_CmdGoIdleState>
 800716e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d001      	beq.n	800717a <SD_PowerON+0x2a>
  {
    return errorstate;
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	e072      	b.n	8007260 <SD_PowerON+0x110>
>>>>>>> Stashed changes
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
<<<<<<< Updated upstream
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	4618      	mov	r0, r3
 80071b0:	f002 fb6b 	bl	800988a <SDMMC_CmdOperCond>
 80071b4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d00d      	beq.n	80071d8 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2200      	movs	r2, #0
 80071c0:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	4618      	mov	r0, r3
 80071c8:	f002 fb41 	bl	800984e <SDMMC_CmdGoIdleState>
 80071cc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d004      	beq.n	80071de <SD_PowerON+0x5e>
    {
      return errorstate;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	e05b      	b.n	8007290 <SD_PowerON+0x110>
=======
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	4618      	mov	r0, r3
 8007180:	f002 fb6b 	bl	800985a <SDMMC_CmdOperCond>
 8007184:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d00d      	beq.n	80071a8 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2200      	movs	r2, #0
 8007190:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	4618      	mov	r0, r3
 8007198:	f002 fb41 	bl	800981e <SDMMC_CmdGoIdleState>
 800719c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d004      	beq.n	80071ae <SD_PowerON+0x5e>
    {
      return errorstate;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	e05b      	b.n	8007260 <SD_PowerON+0x110>
>>>>>>> Stashed changes
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
<<<<<<< Updated upstream
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2201      	movs	r2, #1
 80071dc:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071e2:	2b01      	cmp	r3, #1
 80071e4:	d137      	bne.n	8007256 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	2100      	movs	r1, #0
 80071ec:	4618      	mov	r0, r3
 80071ee:	f002 fb6b 	bl	80098c8 <SDMMC_CmdAppCommand>
 80071f2:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d02d      	beq.n	8007256 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80071fa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80071fe:	e047      	b.n	8007290 <SD_PowerON+0x110>
=======
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2201      	movs	r2, #1
 80071ac:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071b2:	2b01      	cmp	r3, #1
 80071b4:	d137      	bne.n	8007226 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	2100      	movs	r1, #0
 80071bc:	4618      	mov	r0, r3
 80071be:	f002 fb6b 	bl	8009898 <SDMMC_CmdAppCommand>
 80071c2:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d02d      	beq.n	8007226 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80071ca:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80071ce:	e047      	b.n	8007260 <SD_PowerON+0x110>
>>>>>>> Stashed changes
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
<<<<<<< Updated upstream
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	2100      	movs	r1, #0
 8007206:	4618      	mov	r0, r3
 8007208:	f002 fb5e 	bl	80098c8 <SDMMC_CmdAppCommand>
 800720c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d001      	beq.n	8007218 <SD_PowerON+0x98>
    {
      return errorstate;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	e03b      	b.n	8007290 <SD_PowerON+0x110>
=======
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	2100      	movs	r1, #0
 80071d6:	4618      	mov	r0, r3
 80071d8:	f002 fb5e 	bl	8009898 <SDMMC_CmdAppCommand>
 80071dc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d001      	beq.n	80071e8 <SD_PowerON+0x98>
    {
      return errorstate;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	e03b      	b.n	8007260 <SD_PowerON+0x110>
>>>>>>> Stashed changes
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
<<<<<<< Updated upstream
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	491e      	ldr	r1, [pc, #120]	; (8007298 <SD_PowerON+0x118>)
 800721e:	4618      	mov	r0, r3
 8007220:	f002 fb74 	bl	800990c <SDMMC_CmdAppOperCommand>
 8007224:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d002      	beq.n	8007232 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800722c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007230:	e02e      	b.n	8007290 <SD_PowerON+0x110>
=======
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	491e      	ldr	r1, [pc, #120]	; (8007268 <SD_PowerON+0x118>)
 80071ee:	4618      	mov	r0, r3
 80071f0:	f002 fb74 	bl	80098dc <SDMMC_CmdAppOperCommand>
 80071f4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d002      	beq.n	8007202 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80071fc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007200:	e02e      	b.n	8007260 <SD_PowerON+0x110>
>>>>>>> Stashed changes
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
<<<<<<< Updated upstream
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	2100      	movs	r1, #0
 8007238:	4618      	mov	r0, r3
 800723a:	f002 f9da 	bl	80095f2 <SDIO_GetResponse>
 800723e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8007240:	697b      	ldr	r3, [r7, #20]
 8007242:	0fdb      	lsrs	r3, r3, #31
 8007244:	2b01      	cmp	r3, #1
 8007246:	d101      	bne.n	800724c <SD_PowerON+0xcc>
 8007248:	2301      	movs	r3, #1
 800724a:	e000      	b.n	800724e <SD_PowerON+0xce>
 800724c:	2300      	movs	r3, #0
 800724e:	613b      	str	r3, [r7, #16]

    count++;
 8007250:	68bb      	ldr	r3, [r7, #8]
 8007252:	3301      	adds	r3, #1
 8007254:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8007256:	68bb      	ldr	r3, [r7, #8]
 8007258:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800725c:	4293      	cmp	r3, r2
 800725e:	d802      	bhi.n	8007266 <SD_PowerON+0xe6>
 8007260:	693b      	ldr	r3, [r7, #16]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d0cc      	beq.n	8007200 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8007266:	68bb      	ldr	r3, [r7, #8]
 8007268:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800726c:	4293      	cmp	r3, r2
 800726e:	d902      	bls.n	8007276 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8007270:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007274:	e00c      	b.n	8007290 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8007276:	697b      	ldr	r3, [r7, #20]
 8007278:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800727c:	2b00      	cmp	r3, #0
 800727e:	d003      	beq.n	8007288 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2201      	movs	r2, #1
 8007284:	645a      	str	r2, [r3, #68]	; 0x44
 8007286:	e002      	b.n	800728e <SD_PowerON+0x10e>
=======
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	2100      	movs	r1, #0
 8007208:	4618      	mov	r0, r3
 800720a:	f002 f9da 	bl	80095c2 <SDIO_GetResponse>
 800720e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8007210:	697b      	ldr	r3, [r7, #20]
 8007212:	0fdb      	lsrs	r3, r3, #31
 8007214:	2b01      	cmp	r3, #1
 8007216:	d101      	bne.n	800721c <SD_PowerON+0xcc>
 8007218:	2301      	movs	r3, #1
 800721a:	e000      	b.n	800721e <SD_PowerON+0xce>
 800721c:	2300      	movs	r3, #0
 800721e:	613b      	str	r3, [r7, #16]

    count++;
 8007220:	68bb      	ldr	r3, [r7, #8]
 8007222:	3301      	adds	r3, #1
 8007224:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8007226:	68bb      	ldr	r3, [r7, #8]
 8007228:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800722c:	4293      	cmp	r3, r2
 800722e:	d802      	bhi.n	8007236 <SD_PowerON+0xe6>
 8007230:	693b      	ldr	r3, [r7, #16]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d0cc      	beq.n	80071d0 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8007236:	68bb      	ldr	r3, [r7, #8]
 8007238:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800723c:	4293      	cmp	r3, r2
 800723e:	d902      	bls.n	8007246 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8007240:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007244:	e00c      	b.n	8007260 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8007246:	697b      	ldr	r3, [r7, #20]
 8007248:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800724c:	2b00      	cmp	r3, #0
 800724e:	d003      	beq.n	8007258 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2201      	movs	r2, #1
 8007254:	645a      	str	r2, [r3, #68]	; 0x44
 8007256:	e002      	b.n	800725e <SD_PowerON+0x10e>
>>>>>>> Stashed changes
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
<<<<<<< Updated upstream
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2200      	movs	r2, #0
 800728c:	645a      	str	r2, [r3, #68]	; 0x44
=======
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2200      	movs	r2, #0
 800725c:	645a      	str	r2, [r3, #68]	; 0x44
>>>>>>> Stashed changes
  }


  return HAL_SD_ERROR_NONE;
<<<<<<< Updated upstream
 800728e:	2300      	movs	r3, #0
}
 8007290:	4618      	mov	r0, r3
 8007292:	3718      	adds	r7, #24
 8007294:	46bd      	mov	sp, r7
 8007296:	bd80      	pop	{r7, pc}
 8007298:	c1100000 	.word	0xc1100000

0800729c <SD_SendStatus>:
=======
 800725e:	2300      	movs	r3, #0
}
 8007260:	4618      	mov	r0, r3
 8007262:	3718      	adds	r7, #24
 8007264:	46bd      	mov	sp, r7
 8007266:	bd80      	pop	{r7, pc}
 8007268:	c1100000 	.word	0xc1100000

0800726c <SD_SendStatus>:
>>>>>>> Stashed changes
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
<<<<<<< Updated upstream
 800729c:	b580      	push	{r7, lr}
 800729e:	b084      	sub	sp, #16
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
 80072a4:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d102      	bne.n	80072b2 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80072ac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80072b0:	e018      	b.n	80072e4 <SD_SendStatus+0x48>
=======
 800726c:	b580      	push	{r7, lr}
 800726e:	b084      	sub	sp, #16
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
 8007274:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8007276:	683b      	ldr	r3, [r7, #0]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d102      	bne.n	8007282 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800727c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007280:	e018      	b.n	80072b4 <SD_SendStatus+0x48>
>>>>>>> Stashed changes
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
<<<<<<< Updated upstream
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681a      	ldr	r2, [r3, #0]
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072ba:	041b      	lsls	r3, r3, #16
 80072bc:	4619      	mov	r1, r3
 80072be:	4610      	mov	r0, r2
 80072c0:	f002 fbe8 	bl	8009a94 <SDMMC_CmdSendStatus>
 80072c4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d001      	beq.n	80072d0 <SD_SendStatus+0x34>
  {
    return errorstate;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	e009      	b.n	80072e4 <SD_SendStatus+0x48>
=======
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681a      	ldr	r2, [r3, #0]
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800728a:	041b      	lsls	r3, r3, #16
 800728c:	4619      	mov	r1, r3
 800728e:	4610      	mov	r0, r2
 8007290:	f002 fbe8 	bl	8009a64 <SDMMC_CmdSendStatus>
 8007294:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d001      	beq.n	80072a0 <SD_SendStatus+0x34>
  {
    return errorstate;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	e009      	b.n	80072b4 <SD_SendStatus+0x48>
>>>>>>> Stashed changes
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
<<<<<<< Updated upstream
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	2100      	movs	r1, #0
 80072d6:	4618      	mov	r0, r3
 80072d8:	f002 f98b 	bl	80095f2 <SDIO_GetResponse>
 80072dc:	4602      	mov	r2, r0
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80072e2:	2300      	movs	r3, #0
}
 80072e4:	4618      	mov	r0, r3
 80072e6:	3710      	adds	r7, #16
 80072e8:	46bd      	mov	sp, r7
 80072ea:	bd80      	pop	{r7, pc}

080072ec <SD_WideBus_Enable>:
=======
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	2100      	movs	r1, #0
 80072a6:	4618      	mov	r0, r3
 80072a8:	f002 f98b 	bl	80095c2 <SDIO_GetResponse>
 80072ac:	4602      	mov	r2, r0
 80072ae:	683b      	ldr	r3, [r7, #0]
 80072b0:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80072b2:	2300      	movs	r3, #0
}
 80072b4:	4618      	mov	r0, r3
 80072b6:	3710      	adds	r7, #16
 80072b8:	46bd      	mov	sp, r7
 80072ba:	bd80      	pop	{r7, pc}

080072bc <SD_WideBus_Enable>:
>>>>>>> Stashed changes
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
<<<<<<< Updated upstream
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b086      	sub	sp, #24
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80072f4:	2300      	movs	r3, #0
 80072f6:	60fb      	str	r3, [r7, #12]
 80072f8:	2300      	movs	r3, #0
 80072fa:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	2100      	movs	r1, #0
 8007302:	4618      	mov	r0, r3
 8007304:	f002 f975 	bl	80095f2 <SDIO_GetResponse>
 8007308:	4603      	mov	r3, r0
 800730a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800730e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007312:	d102      	bne.n	800731a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007314:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007318:	e02f      	b.n	800737a <SD_WideBus_Enable+0x8e>
=======
 80072bc:	b580      	push	{r7, lr}
 80072be:	b086      	sub	sp, #24
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80072c4:	2300      	movs	r3, #0
 80072c6:	60fb      	str	r3, [r7, #12]
 80072c8:	2300      	movs	r3, #0
 80072ca:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	2100      	movs	r1, #0
 80072d2:	4618      	mov	r0, r3
 80072d4:	f002 f975 	bl	80095c2 <SDIO_GetResponse>
 80072d8:	4603      	mov	r3, r0
 80072da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072de:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80072e2:	d102      	bne.n	80072ea <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80072e4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80072e8:	e02f      	b.n	800734a <SD_WideBus_Enable+0x8e>
>>>>>>> Stashed changes
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
<<<<<<< Updated upstream
 800731a:	f107 030c 	add.w	r3, r7, #12
 800731e:	4619      	mov	r1, r3
 8007320:	6878      	ldr	r0, [r7, #4]
 8007322:	f000 f879 	bl	8007418 <SD_FindSCR>
 8007326:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007328:	697b      	ldr	r3, [r7, #20]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d001      	beq.n	8007332 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800732e:	697b      	ldr	r3, [r7, #20]
 8007330:	e023      	b.n	800737a <SD_WideBus_Enable+0x8e>
=======
 80072ea:	f107 030c 	add.w	r3, r7, #12
 80072ee:	4619      	mov	r1, r3
 80072f0:	6878      	ldr	r0, [r7, #4]
 80072f2:	f000 f879 	bl	80073e8 <SD_FindSCR>
 80072f6:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80072f8:	697b      	ldr	r3, [r7, #20]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d001      	beq.n	8007302 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80072fe:	697b      	ldr	r3, [r7, #20]
 8007300:	e023      	b.n	800734a <SD_WideBus_Enable+0x8e>
>>>>>>> Stashed changes
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
<<<<<<< Updated upstream
 8007332:	693b      	ldr	r3, [r7, #16]
 8007334:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007338:	2b00      	cmp	r3, #0
 800733a:	d01c      	beq.n	8007376 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681a      	ldr	r2, [r3, #0]
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007344:	041b      	lsls	r3, r3, #16
 8007346:	4619      	mov	r1, r3
 8007348:	4610      	mov	r0, r2
 800734a:	f002 fabd 	bl	80098c8 <SDMMC_CmdAppCommand>
 800734e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007350:	697b      	ldr	r3, [r7, #20]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d001      	beq.n	800735a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8007356:	697b      	ldr	r3, [r7, #20]
 8007358:	e00f      	b.n	800737a <SD_WideBus_Enable+0x8e>
=======
 8007302:	693b      	ldr	r3, [r7, #16]
 8007304:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007308:	2b00      	cmp	r3, #0
 800730a:	d01c      	beq.n	8007346 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681a      	ldr	r2, [r3, #0]
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007314:	041b      	lsls	r3, r3, #16
 8007316:	4619      	mov	r1, r3
 8007318:	4610      	mov	r0, r2
 800731a:	f002 fabd 	bl	8009898 <SDMMC_CmdAppCommand>
 800731e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007320:	697b      	ldr	r3, [r7, #20]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d001      	beq.n	800732a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8007326:	697b      	ldr	r3, [r7, #20]
 8007328:	e00f      	b.n	800734a <SD_WideBus_Enable+0x8e>
>>>>>>> Stashed changes
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
<<<<<<< Updated upstream
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	2102      	movs	r1, #2
 8007360:	4618      	mov	r0, r3
 8007362:	f002 faf6 	bl	8009952 <SDMMC_CmdBusWidth>
 8007366:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007368:	697b      	ldr	r3, [r7, #20]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d001      	beq.n	8007372 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800736e:	697b      	ldr	r3, [r7, #20]
 8007370:	e003      	b.n	800737a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007372:	2300      	movs	r3, #0
 8007374:	e001      	b.n	800737a <SD_WideBus_Enable+0x8e>
=======
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	2102      	movs	r1, #2
 8007330:	4618      	mov	r0, r3
 8007332:	f002 faf6 	bl	8009922 <SDMMC_CmdBusWidth>
 8007336:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007338:	697b      	ldr	r3, [r7, #20]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d001      	beq.n	8007342 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800733e:	697b      	ldr	r3, [r7, #20]
 8007340:	e003      	b.n	800734a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007342:	2300      	movs	r3, #0
 8007344:	e001      	b.n	800734a <SD_WideBus_Enable+0x8e>
>>>>>>> Stashed changes
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
<<<<<<< Updated upstream
 8007376:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800737a:	4618      	mov	r0, r3
 800737c:	3718      	adds	r7, #24
 800737e:	46bd      	mov	sp, r7
 8007380:	bd80      	pop	{r7, pc}

08007382 <SD_WideBus_Disable>:
=======
 8007346:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800734a:	4618      	mov	r0, r3
 800734c:	3718      	adds	r7, #24
 800734e:	46bd      	mov	sp, r7
 8007350:	bd80      	pop	{r7, pc}

08007352 <SD_WideBus_Disable>:
>>>>>>> Stashed changes
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
<<<<<<< Updated upstream
 8007382:	b580      	push	{r7, lr}
 8007384:	b086      	sub	sp, #24
 8007386:	af00      	add	r7, sp, #0
 8007388:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800738a:	2300      	movs	r3, #0
 800738c:	60fb      	str	r3, [r7, #12]
 800738e:	2300      	movs	r3, #0
 8007390:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	2100      	movs	r1, #0
 8007398:	4618      	mov	r0, r3
 800739a:	f002 f92a 	bl	80095f2 <SDIO_GetResponse>
 800739e:	4603      	mov	r3, r0
 80073a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073a4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80073a8:	d102      	bne.n	80073b0 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80073aa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80073ae:	e02f      	b.n	8007410 <SD_WideBus_Disable+0x8e>
=======
 8007352:	b580      	push	{r7, lr}
 8007354:	b086      	sub	sp, #24
 8007356:	af00      	add	r7, sp, #0
 8007358:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800735a:	2300      	movs	r3, #0
 800735c:	60fb      	str	r3, [r7, #12]
 800735e:	2300      	movs	r3, #0
 8007360:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	2100      	movs	r1, #0
 8007368:	4618      	mov	r0, r3
 800736a:	f002 f92a 	bl	80095c2 <SDIO_GetResponse>
 800736e:	4603      	mov	r3, r0
 8007370:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007374:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007378:	d102      	bne.n	8007380 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800737a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800737e:	e02f      	b.n	80073e0 <SD_WideBus_Disable+0x8e>
>>>>>>> Stashed changes
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
<<<<<<< Updated upstream
 80073b0:	f107 030c 	add.w	r3, r7, #12
 80073b4:	4619      	mov	r1, r3
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	f000 f82e 	bl	8007418 <SD_FindSCR>
 80073bc:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80073be:	697b      	ldr	r3, [r7, #20]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d001      	beq.n	80073c8 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80073c4:	697b      	ldr	r3, [r7, #20]
 80073c6:	e023      	b.n	8007410 <SD_WideBus_Disable+0x8e>
=======
 8007380:	f107 030c 	add.w	r3, r7, #12
 8007384:	4619      	mov	r1, r3
 8007386:	6878      	ldr	r0, [r7, #4]
 8007388:	f000 f82e 	bl	80073e8 <SD_FindSCR>
 800738c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800738e:	697b      	ldr	r3, [r7, #20]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d001      	beq.n	8007398 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8007394:	697b      	ldr	r3, [r7, #20]
 8007396:	e023      	b.n	80073e0 <SD_WideBus_Disable+0x8e>
>>>>>>> Stashed changes
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
<<<<<<< Updated upstream
 80073c8:	693b      	ldr	r3, [r7, #16]
 80073ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d01c      	beq.n	800740c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681a      	ldr	r2, [r3, #0]
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073da:	041b      	lsls	r3, r3, #16
 80073dc:	4619      	mov	r1, r3
 80073de:	4610      	mov	r0, r2
 80073e0:	f002 fa72 	bl	80098c8 <SDMMC_CmdAppCommand>
 80073e4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80073e6:	697b      	ldr	r3, [r7, #20]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d001      	beq.n	80073f0 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80073ec:	697b      	ldr	r3, [r7, #20]
 80073ee:	e00f      	b.n	8007410 <SD_WideBus_Disable+0x8e>
=======
 8007398:	693b      	ldr	r3, [r7, #16]
 800739a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d01c      	beq.n	80073dc <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681a      	ldr	r2, [r3, #0]
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073aa:	041b      	lsls	r3, r3, #16
 80073ac:	4619      	mov	r1, r3
 80073ae:	4610      	mov	r0, r2
 80073b0:	f002 fa72 	bl	8009898 <SDMMC_CmdAppCommand>
 80073b4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80073b6:	697b      	ldr	r3, [r7, #20]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d001      	beq.n	80073c0 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80073bc:	697b      	ldr	r3, [r7, #20]
 80073be:	e00f      	b.n	80073e0 <SD_WideBus_Disable+0x8e>
>>>>>>> Stashed changes
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
<<<<<<< Updated upstream
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	2100      	movs	r1, #0
 80073f6:	4618      	mov	r0, r3
 80073f8:	f002 faab 	bl	8009952 <SDMMC_CmdBusWidth>
 80073fc:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80073fe:	697b      	ldr	r3, [r7, #20]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d001      	beq.n	8007408 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8007404:	697b      	ldr	r3, [r7, #20]
 8007406:	e003      	b.n	8007410 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007408:	2300      	movs	r3, #0
 800740a:	e001      	b.n	8007410 <SD_WideBus_Disable+0x8e>
=======
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	2100      	movs	r1, #0
 80073c6:	4618      	mov	r0, r3
 80073c8:	f002 faab 	bl	8009922 <SDMMC_CmdBusWidth>
 80073cc:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80073ce:	697b      	ldr	r3, [r7, #20]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d001      	beq.n	80073d8 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80073d4:	697b      	ldr	r3, [r7, #20]
 80073d6:	e003      	b.n	80073e0 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80073d8:	2300      	movs	r3, #0
 80073da:	e001      	b.n	80073e0 <SD_WideBus_Disable+0x8e>
>>>>>>> Stashed changes
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
<<<<<<< Updated upstream
 800740c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8007410:	4618      	mov	r0, r3
 8007412:	3718      	adds	r7, #24
 8007414:	46bd      	mov	sp, r7
 8007416:	bd80      	pop	{r7, pc}

08007418 <SD_FindSCR>:
=======
 80073dc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80073e0:	4618      	mov	r0, r3
 80073e2:	3718      	adds	r7, #24
 80073e4:	46bd      	mov	sp, r7
 80073e6:	bd80      	pop	{r7, pc}

080073e8 <SD_FindSCR>:
>>>>>>> Stashed changes
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
<<<<<<< Updated upstream
 8007418:	b590      	push	{r4, r7, lr}
 800741a:	b08f      	sub	sp, #60	; 0x3c
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
 8007420:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007422:	f7fa fe43 	bl	80020ac <HAL_GetTick>
 8007426:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8007428:	2300      	movs	r3, #0
 800742a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800742c:	2300      	movs	r3, #0
 800742e:	60bb      	str	r3, [r7, #8]
 8007430:	2300      	movs	r3, #0
 8007432:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	2108      	movs	r1, #8
 800743e:	4618      	mov	r0, r3
 8007440:	f002 f916 	bl	8009670 <SDMMC_CmdBlockLength>
 8007444:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007448:	2b00      	cmp	r3, #0
 800744a:	d001      	beq.n	8007450 <SD_FindSCR+0x38>
  {
    return errorstate;
 800744c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800744e:	e0b2      	b.n	80075b6 <SD_FindSCR+0x19e>
=======
 80073e8:	b590      	push	{r4, r7, lr}
 80073ea:	b08f      	sub	sp, #60	; 0x3c
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
 80073f0:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80073f2:	f7fa fe5d 	bl	80020b0 <HAL_GetTick>
 80073f6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 80073f8:	2300      	movs	r3, #0
 80073fa:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 80073fc:	2300      	movs	r3, #0
 80073fe:	60bb      	str	r3, [r7, #8]
 8007400:	2300      	movs	r3, #0
 8007402:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8007404:	683b      	ldr	r3, [r7, #0]
 8007406:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	2108      	movs	r1, #8
 800740e:	4618      	mov	r0, r3
 8007410:	f002 f916 	bl	8009640 <SDMMC_CmdBlockLength>
 8007414:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007418:	2b00      	cmp	r3, #0
 800741a:	d001      	beq.n	8007420 <SD_FindSCR+0x38>
  {
    return errorstate;
 800741c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800741e:	e0b2      	b.n	8007586 <SD_FindSCR+0x19e>
>>>>>>> Stashed changes
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
<<<<<<< Updated upstream
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681a      	ldr	r2, [r3, #0]
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007458:	041b      	lsls	r3, r3, #16
 800745a:	4619      	mov	r1, r3
 800745c:	4610      	mov	r0, r2
 800745e:	f002 fa33 	bl	80098c8 <SDMMC_CmdAppCommand>
 8007462:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007466:	2b00      	cmp	r3, #0
 8007468:	d001      	beq.n	800746e <SD_FindSCR+0x56>
  {
    return errorstate;
 800746a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800746c:	e0a3      	b.n	80075b6 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800746e:	f04f 33ff 	mov.w	r3, #4294967295
 8007472:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8007474:	2308      	movs	r3, #8
 8007476:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8007478:	2330      	movs	r3, #48	; 0x30
 800747a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800747c:	2302      	movs	r3, #2
 800747e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8007480:	2300      	movs	r3, #0
 8007482:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8007484:	2301      	movs	r3, #1
 8007486:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f107 0210 	add.w	r2, r7, #16
 8007490:	4611      	mov	r1, r2
 8007492:	4618      	mov	r0, r3
 8007494:	f002 f8c0 	bl	8009618 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	4618      	mov	r0, r3
 800749e:	f002 fa7a 	bl	8009996 <SDMMC_CmdSendSCR>
 80074a2:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80074a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d02a      	beq.n	8007500 <SD_FindSCR+0xe8>
  {
    return errorstate;
 80074aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074ac:	e083      	b.n	80075b6 <SD_FindSCR+0x19e>
=======
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681a      	ldr	r2, [r3, #0]
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007428:	041b      	lsls	r3, r3, #16
 800742a:	4619      	mov	r1, r3
 800742c:	4610      	mov	r0, r2
 800742e:	f002 fa33 	bl	8009898 <SDMMC_CmdAppCommand>
 8007432:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007436:	2b00      	cmp	r3, #0
 8007438:	d001      	beq.n	800743e <SD_FindSCR+0x56>
  {
    return errorstate;
 800743a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800743c:	e0a3      	b.n	8007586 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800743e:	f04f 33ff 	mov.w	r3, #4294967295
 8007442:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8007444:	2308      	movs	r3, #8
 8007446:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8007448:	2330      	movs	r3, #48	; 0x30
 800744a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800744c:	2302      	movs	r3, #2
 800744e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8007450:	2300      	movs	r3, #0
 8007452:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8007454:	2301      	movs	r3, #1
 8007456:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	f107 0210 	add.w	r2, r7, #16
 8007460:	4611      	mov	r1, r2
 8007462:	4618      	mov	r0, r3
 8007464:	f002 f8c0 	bl	80095e8 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	4618      	mov	r0, r3
 800746e:	f002 fa7a 	bl	8009966 <SDMMC_CmdSendSCR>
 8007472:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007476:	2b00      	cmp	r3, #0
 8007478:	d02a      	beq.n	80074d0 <SD_FindSCR+0xe8>
  {
    return errorstate;
 800747a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800747c:	e083      	b.n	8007586 <SD_FindSCR+0x19e>
>>>>>>> Stashed changes
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
<<<<<<< Updated upstream
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d00f      	beq.n	80074dc <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	6819      	ldr	r1, [r3, #0]
 80074c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074c2:	009b      	lsls	r3, r3, #2
 80074c4:	f107 0208 	add.w	r2, r7, #8
 80074c8:	18d4      	adds	r4, r2, r3
 80074ca:	4608      	mov	r0, r1
 80074cc:	f002 f81f 	bl	800950e <SDIO_ReadFIFO>
 80074d0:	4603      	mov	r3, r0
 80074d2:	6023      	str	r3, [r4, #0]
      index++;
 80074d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074d6:	3301      	adds	r3, #1
 80074d8:	637b      	str	r3, [r7, #52]	; 0x34
 80074da:	e006      	b.n	80074ea <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d012      	beq.n	8007510 <SD_FindSCR+0xf8>
=======
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007484:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007488:	2b00      	cmp	r3, #0
 800748a:	d00f      	beq.n	80074ac <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	6819      	ldr	r1, [r3, #0]
 8007490:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007492:	009b      	lsls	r3, r3, #2
 8007494:	f107 0208 	add.w	r2, r7, #8
 8007498:	18d4      	adds	r4, r2, r3
 800749a:	4608      	mov	r0, r1
 800749c:	f002 f81f 	bl	80094de <SDIO_ReadFIFO>
 80074a0:	4603      	mov	r3, r0
 80074a2:	6023      	str	r3, [r4, #0]
      index++;
 80074a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074a6:	3301      	adds	r3, #1
 80074a8:	637b      	str	r3, [r7, #52]	; 0x34
 80074aa:	e006      	b.n	80074ba <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d012      	beq.n	80074e0 <SD_FindSCR+0xf8>
>>>>>>> Stashed changes
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
<<<<<<< Updated upstream
 80074ea:	f7fa fddf 	bl	80020ac <HAL_GetTick>
 80074ee:	4602      	mov	r2, r0
 80074f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074f2:	1ad3      	subs	r3, r2, r3
 80074f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074f8:	d102      	bne.n	8007500 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80074fa:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80074fe:	e05a      	b.n	80075b6 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007506:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 800750a:	2b00      	cmp	r3, #0
 800750c:	d0cf      	beq.n	80074ae <SD_FindSCR+0x96>
 800750e:	e000      	b.n	8007512 <SD_FindSCR+0xfa>
      break;
 8007510:	bf00      	nop
=======
 80074ba:	f7fa fdf9 	bl	80020b0 <HAL_GetTick>
 80074be:	4602      	mov	r2, r0
 80074c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074c2:	1ad3      	subs	r3, r2, r3
 80074c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074c8:	d102      	bne.n	80074d0 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80074ca:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80074ce:	e05a      	b.n	8007586 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074d6:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d0cf      	beq.n	800747e <SD_FindSCR+0x96>
 80074de:	e000      	b.n	80074e2 <SD_FindSCR+0xfa>
      break;
 80074e0:	bf00      	nop
>>>>>>> Stashed changes
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
<<<<<<< Updated upstream
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007518:	f003 0308 	and.w	r3, r3, #8
 800751c:	2b00      	cmp	r3, #0
 800751e:	d005      	beq.n	800752c <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	2208      	movs	r2, #8
 8007526:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8007528:	2308      	movs	r3, #8
 800752a:	e044      	b.n	80075b6 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007532:	f003 0302 	and.w	r3, r3, #2
 8007536:	2b00      	cmp	r3, #0
 8007538:	d005      	beq.n	8007546 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	2202      	movs	r2, #2
 8007540:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8007542:	2302      	movs	r3, #2
 8007544:	e037      	b.n	80075b6 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800754c:	f003 0320 	and.w	r3, r3, #32
 8007550:	2b00      	cmp	r3, #0
 8007552:	d005      	beq.n	8007560 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	2220      	movs	r2, #32
 800755a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800755c:	2320      	movs	r3, #32
 800755e:	e02a      	b.n	80075b6 <SD_FindSCR+0x19e>
=======
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074e8:	f003 0308 	and.w	r3, r3, #8
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d005      	beq.n	80074fc <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	2208      	movs	r2, #8
 80074f6:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80074f8:	2308      	movs	r3, #8
 80074fa:	e044      	b.n	8007586 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007502:	f003 0302 	and.w	r3, r3, #2
 8007506:	2b00      	cmp	r3, #0
 8007508:	d005      	beq.n	8007516 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	2202      	movs	r2, #2
 8007510:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8007512:	2302      	movs	r3, #2
 8007514:	e037      	b.n	8007586 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800751c:	f003 0320 	and.w	r3, r3, #32
 8007520:	2b00      	cmp	r3, #0
 8007522:	d005      	beq.n	8007530 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	2220      	movs	r2, #32
 800752a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800752c:	2320      	movs	r3, #32
 800752e:	e02a      	b.n	8007586 <SD_FindSCR+0x19e>
>>>>>>> Stashed changes
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
<<<<<<< Updated upstream
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	f240 523a 	movw	r2, #1338	; 0x53a
 8007568:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	061a      	lsls	r2, r3, #24
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	021b      	lsls	r3, r3, #8
 8007572:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007576:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	0a1b      	lsrs	r3, r3, #8
 800757c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007580:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	0e1b      	lsrs	r3, r3, #24
 8007586:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800758a:	601a      	str	r2, [r3, #0]
    scr++;
 800758c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800758e:	3304      	adds	r3, #4
 8007590:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007592:	68bb      	ldr	r3, [r7, #8]
 8007594:	061a      	lsls	r2, r3, #24
 8007596:	68bb      	ldr	r3, [r7, #8]
 8007598:	021b      	lsls	r3, r3, #8
 800759a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800759e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80075a0:	68bb      	ldr	r3, [r7, #8]
 80075a2:	0a1b      	lsrs	r3, r3, #8
 80075a4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80075a8:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80075aa:	68bb      	ldr	r3, [r7, #8]
 80075ac:	0e1b      	lsrs	r3, r3, #24
 80075ae:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80075b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075b2:	601a      	str	r2, [r3, #0]
=======
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	f240 523a 	movw	r2, #1338	; 0x53a
 8007538:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	061a      	lsls	r2, r3, #24
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	021b      	lsls	r3, r3, #8
 8007542:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007546:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	0a1b      	lsrs	r3, r3, #8
 800754c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007550:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	0e1b      	lsrs	r3, r3, #24
 8007556:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800755a:	601a      	str	r2, [r3, #0]
    scr++;
 800755c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800755e:	3304      	adds	r3, #4
 8007560:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007562:	68bb      	ldr	r3, [r7, #8]
 8007564:	061a      	lsls	r2, r3, #24
 8007566:	68bb      	ldr	r3, [r7, #8]
 8007568:	021b      	lsls	r3, r3, #8
 800756a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800756e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8007570:	68bb      	ldr	r3, [r7, #8]
 8007572:	0a1b      	lsrs	r3, r3, #8
 8007574:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007578:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800757a:	68bb      	ldr	r3, [r7, #8]
 800757c:	0e1b      	lsrs	r3, r3, #24
 800757e:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007582:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes

  }

  return HAL_SD_ERROR_NONE;
<<<<<<< Updated upstream
 80075b4:	2300      	movs	r3, #0
}
 80075b6:	4618      	mov	r0, r3
 80075b8:	373c      	adds	r7, #60	; 0x3c
 80075ba:	46bd      	mov	sp, r7
 80075bc:	bd90      	pop	{r4, r7, pc}

080075be <SD_Read_IT>:
=======
 8007584:	2300      	movs	r3, #0
}
 8007586:	4618      	mov	r0, r3
 8007588:	373c      	adds	r7, #60	; 0x3c
 800758a:	46bd      	mov	sp, r7
 800758c:	bd90      	pop	{r4, r7, pc}

0800758e <SD_Read_IT>:
>>>>>>> Stashed changes
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
<<<<<<< Updated upstream
 80075be:	b580      	push	{r7, lr}
 80075c0:	b086      	sub	sp, #24
 80075c2:	af00      	add	r7, sp, #0
 80075c4:	6078      	str	r0, [r7, #4]
=======
 800758e:	b580      	push	{r7, lr}
 8007590:	b086      	sub	sp, #24
 8007592:	af00      	add	r7, sp, #0
 8007594:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
<<<<<<< Updated upstream
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075ca:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075d0:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80075d2:	693b      	ldr	r3, [r7, #16]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d03f      	beq.n	8007658 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 80075d8:	2300      	movs	r3, #0
 80075da:	617b      	str	r3, [r7, #20]
 80075dc:	e033      	b.n	8007646 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	4618      	mov	r0, r3
 80075e4:	f001 ff93 	bl	800950e <SDIO_ReadFIFO>
 80075e8:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 80075ea:	68bb      	ldr	r3, [r7, #8]
 80075ec:	b2da      	uxtb	r2, r3
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	701a      	strb	r2, [r3, #0]
      tmp++;
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	3301      	adds	r3, #1
 80075f6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80075f8:	693b      	ldr	r3, [r7, #16]
 80075fa:	3b01      	subs	r3, #1
 80075fc:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80075fe:	68bb      	ldr	r3, [r7, #8]
 8007600:	0a1b      	lsrs	r3, r3, #8
 8007602:	b2da      	uxtb	r2, r3
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	3301      	adds	r3, #1
 800760c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800760e:	693b      	ldr	r3, [r7, #16]
 8007610:	3b01      	subs	r3, #1
 8007612:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8007614:	68bb      	ldr	r3, [r7, #8]
 8007616:	0c1b      	lsrs	r3, r3, #16
 8007618:	b2da      	uxtb	r2, r3
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	701a      	strb	r2, [r3, #0]
      tmp++;
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	3301      	adds	r3, #1
 8007622:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007624:	693b      	ldr	r3, [r7, #16]
 8007626:	3b01      	subs	r3, #1
 8007628:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800762a:	68bb      	ldr	r3, [r7, #8]
 800762c:	0e1b      	lsrs	r3, r3, #24
 800762e:	b2da      	uxtb	r2, r3
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	3301      	adds	r3, #1
 8007638:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800763a:	693b      	ldr	r3, [r7, #16]
 800763c:	3b01      	subs	r3, #1
 800763e:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8007640:	697b      	ldr	r3, [r7, #20]
 8007642:	3301      	adds	r3, #1
 8007644:	617b      	str	r3, [r7, #20]
 8007646:	697b      	ldr	r3, [r7, #20]
 8007648:	2b07      	cmp	r3, #7
 800764a:	d9c8      	bls.n	80075de <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	68fa      	ldr	r2, [r7, #12]
 8007650:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	693a      	ldr	r2, [r7, #16]
 8007656:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8007658:	bf00      	nop
 800765a:	3718      	adds	r7, #24
 800765c:	46bd      	mov	sp, r7
 800765e:	bd80      	pop	{r7, pc}

08007660 <SD_Write_IT>:
=======
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800759a:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075a0:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80075a2:	693b      	ldr	r3, [r7, #16]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d03f      	beq.n	8007628 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 80075a8:	2300      	movs	r3, #0
 80075aa:	617b      	str	r3, [r7, #20]
 80075ac:	e033      	b.n	8007616 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	4618      	mov	r0, r3
 80075b4:	f001 ff93 	bl	80094de <SDIO_ReadFIFO>
 80075b8:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 80075ba:	68bb      	ldr	r3, [r7, #8]
 80075bc:	b2da      	uxtb	r2, r3
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	701a      	strb	r2, [r3, #0]
      tmp++;
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	3301      	adds	r3, #1
 80075c6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80075c8:	693b      	ldr	r3, [r7, #16]
 80075ca:	3b01      	subs	r3, #1
 80075cc:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80075ce:	68bb      	ldr	r3, [r7, #8]
 80075d0:	0a1b      	lsrs	r3, r3, #8
 80075d2:	b2da      	uxtb	r2, r3
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	701a      	strb	r2, [r3, #0]
      tmp++;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	3301      	adds	r3, #1
 80075dc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80075de:	693b      	ldr	r3, [r7, #16]
 80075e0:	3b01      	subs	r3, #1
 80075e2:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80075e4:	68bb      	ldr	r3, [r7, #8]
 80075e6:	0c1b      	lsrs	r3, r3, #16
 80075e8:	b2da      	uxtb	r2, r3
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	701a      	strb	r2, [r3, #0]
      tmp++;
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	3301      	adds	r3, #1
 80075f2:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80075f4:	693b      	ldr	r3, [r7, #16]
 80075f6:	3b01      	subs	r3, #1
 80075f8:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 80075fa:	68bb      	ldr	r3, [r7, #8]
 80075fc:	0e1b      	lsrs	r3, r3, #24
 80075fe:	b2da      	uxtb	r2, r3
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	3301      	adds	r3, #1
 8007608:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800760a:	693b      	ldr	r3, [r7, #16]
 800760c:	3b01      	subs	r3, #1
 800760e:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8007610:	697b      	ldr	r3, [r7, #20]
 8007612:	3301      	adds	r3, #1
 8007614:	617b      	str	r3, [r7, #20]
 8007616:	697b      	ldr	r3, [r7, #20]
 8007618:	2b07      	cmp	r3, #7
 800761a:	d9c8      	bls.n	80075ae <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	68fa      	ldr	r2, [r7, #12]
 8007620:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	693a      	ldr	r2, [r7, #16]
 8007626:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8007628:	bf00      	nop
 800762a:	3718      	adds	r7, #24
 800762c:	46bd      	mov	sp, r7
 800762e:	bd80      	pop	{r7, pc}

08007630 <SD_Write_IT>:
>>>>>>> Stashed changes
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
<<<<<<< Updated upstream
 8007660:	b580      	push	{r7, lr}
 8007662:	b086      	sub	sp, #24
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
=======
 8007630:	b580      	push	{r7, lr}
 8007632:	b086      	sub	sp, #24
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
<<<<<<< Updated upstream
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	6a1b      	ldr	r3, [r3, #32]
 800766c:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007672:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8007674:	693b      	ldr	r3, [r7, #16]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d043      	beq.n	8007702 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800767a:	2300      	movs	r3, #0
 800767c:	617b      	str	r3, [r7, #20]
 800767e:	e037      	b.n	80076f0 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	781b      	ldrb	r3, [r3, #0]
 8007684:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	3301      	adds	r3, #1
 800768a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800768c:	693b      	ldr	r3, [r7, #16]
 800768e:	3b01      	subs	r3, #1
 8007690:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	781b      	ldrb	r3, [r3, #0]
 8007696:	021a      	lsls	r2, r3, #8
 8007698:	68bb      	ldr	r3, [r7, #8]
 800769a:	4313      	orrs	r3, r2
 800769c:	60bb      	str	r3, [r7, #8]
      tmp++;
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	3301      	adds	r3, #1
 80076a2:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80076a4:	693b      	ldr	r3, [r7, #16]
 80076a6:	3b01      	subs	r3, #1
 80076a8:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	781b      	ldrb	r3, [r3, #0]
 80076ae:	041a      	lsls	r2, r3, #16
 80076b0:	68bb      	ldr	r3, [r7, #8]
 80076b2:	4313      	orrs	r3, r2
 80076b4:	60bb      	str	r3, [r7, #8]
      tmp++;
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	3301      	adds	r3, #1
 80076ba:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80076bc:	693b      	ldr	r3, [r7, #16]
 80076be:	3b01      	subs	r3, #1
 80076c0:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	781b      	ldrb	r3, [r3, #0]
 80076c6:	061a      	lsls	r2, r3, #24
 80076c8:	68bb      	ldr	r3, [r7, #8]
 80076ca:	4313      	orrs	r3, r2
 80076cc:	60bb      	str	r3, [r7, #8]
      tmp++;
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	3301      	adds	r3, #1
 80076d2:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80076d4:	693b      	ldr	r3, [r7, #16]
 80076d6:	3b01      	subs	r3, #1
 80076d8:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	f107 0208 	add.w	r2, r7, #8
 80076e2:	4611      	mov	r1, r2
 80076e4:	4618      	mov	r0, r3
 80076e6:	f001 ff1f 	bl	8009528 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 80076ea:	697b      	ldr	r3, [r7, #20]
 80076ec:	3301      	adds	r3, #1
 80076ee:	617b      	str	r3, [r7, #20]
 80076f0:	697b      	ldr	r3, [r7, #20]
 80076f2:	2b07      	cmp	r3, #7
 80076f4:	d9c4      	bls.n	8007680 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	68fa      	ldr	r2, [r7, #12]
 80076fa:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	693a      	ldr	r2, [r7, #16]
 8007700:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8007702:	bf00      	nop
 8007704:	3718      	adds	r7, #24
 8007706:	46bd      	mov	sp, r7
 8007708:	bd80      	pop	{r7, pc}

0800770a <HAL_SPI_Init>:
=======
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	6a1b      	ldr	r3, [r3, #32]
 800763c:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007642:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8007644:	693b      	ldr	r3, [r7, #16]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d043      	beq.n	80076d2 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800764a:	2300      	movs	r3, #0
 800764c:	617b      	str	r3, [r7, #20]
 800764e:	e037      	b.n	80076c0 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	781b      	ldrb	r3, [r3, #0]
 8007654:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	3301      	adds	r3, #1
 800765a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800765c:	693b      	ldr	r3, [r7, #16]
 800765e:	3b01      	subs	r3, #1
 8007660:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	781b      	ldrb	r3, [r3, #0]
 8007666:	021a      	lsls	r2, r3, #8
 8007668:	68bb      	ldr	r3, [r7, #8]
 800766a:	4313      	orrs	r3, r2
 800766c:	60bb      	str	r3, [r7, #8]
      tmp++;
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	3301      	adds	r3, #1
 8007672:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007674:	693b      	ldr	r3, [r7, #16]
 8007676:	3b01      	subs	r3, #1
 8007678:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	781b      	ldrb	r3, [r3, #0]
 800767e:	041a      	lsls	r2, r3, #16
 8007680:	68bb      	ldr	r3, [r7, #8]
 8007682:	4313      	orrs	r3, r2
 8007684:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	3301      	adds	r3, #1
 800768a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800768c:	693b      	ldr	r3, [r7, #16]
 800768e:	3b01      	subs	r3, #1
 8007690:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	781b      	ldrb	r3, [r3, #0]
 8007696:	061a      	lsls	r2, r3, #24
 8007698:	68bb      	ldr	r3, [r7, #8]
 800769a:	4313      	orrs	r3, r2
 800769c:	60bb      	str	r3, [r7, #8]
      tmp++;
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	3301      	adds	r3, #1
 80076a2:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80076a4:	693b      	ldr	r3, [r7, #16]
 80076a6:	3b01      	subs	r3, #1
 80076a8:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	f107 0208 	add.w	r2, r7, #8
 80076b2:	4611      	mov	r1, r2
 80076b4:	4618      	mov	r0, r3
 80076b6:	f001 ff1f 	bl	80094f8 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 80076ba:	697b      	ldr	r3, [r7, #20]
 80076bc:	3301      	adds	r3, #1
 80076be:	617b      	str	r3, [r7, #20]
 80076c0:	697b      	ldr	r3, [r7, #20]
 80076c2:	2b07      	cmp	r3, #7
 80076c4:	d9c4      	bls.n	8007650 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	68fa      	ldr	r2, [r7, #12]
 80076ca:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	693a      	ldr	r2, [r7, #16]
 80076d0:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 80076d2:	bf00      	nop
 80076d4:	3718      	adds	r7, #24
 80076d6:	46bd      	mov	sp, r7
 80076d8:	bd80      	pop	{r7, pc}

080076da <HAL_SPI_Init>:
>>>>>>> Stashed changes
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
<<<<<<< Updated upstream
 800770a:	b580      	push	{r7, lr}
 800770c:	b082      	sub	sp, #8
 800770e:	af00      	add	r7, sp, #0
 8007710:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	2b00      	cmp	r3, #0
 8007716:	d101      	bne.n	800771c <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007718:	2301      	movs	r3, #1
 800771a:	e07b      	b.n	8007814 <HAL_SPI_Init+0x10a>
=======
 80076da:	b580      	push	{r7, lr}
 80076dc:	b082      	sub	sp, #8
 80076de:	af00      	add	r7, sp, #0
 80076e0:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d101      	bne.n	80076ec <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80076e8:	2301      	movs	r3, #1
 80076ea:	e07b      	b.n	80077e4 <HAL_SPI_Init+0x10a>
>>>>>>> Stashed changes
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
<<<<<<< Updated upstream
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007720:	2b00      	cmp	r3, #0
 8007722:	d108      	bne.n	8007736 <HAL_SPI_Init+0x2c>
=======
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d108      	bne.n	8007706 <HAL_SPI_Init+0x2c>
>>>>>>> Stashed changes
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
<<<<<<< Updated upstream
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	685b      	ldr	r3, [r3, #4]
 8007728:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800772c:	d009      	beq.n	8007742 <HAL_SPI_Init+0x38>
=======
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	685b      	ldr	r3, [r3, #4]
 80076f8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80076fc:	d009      	beq.n	8007712 <HAL_SPI_Init+0x38>
>>>>>>> Stashed changes
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
<<<<<<< Updated upstream
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	2200      	movs	r2, #0
 8007732:	61da      	str	r2, [r3, #28]
 8007734:	e005      	b.n	8007742 <HAL_SPI_Init+0x38>
=======
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	2200      	movs	r2, #0
 8007702:	61da      	str	r2, [r3, #28]
 8007704:	e005      	b.n	8007712 <HAL_SPI_Init+0x38>
>>>>>>> Stashed changes
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
<<<<<<< Updated upstream
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	2200      	movs	r2, #0
 800773a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2200      	movs	r2, #0
 8007740:	615a      	str	r2, [r3, #20]
=======
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	2200      	movs	r2, #0
 800770a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2200      	movs	r2, #0
 8007710:	615a      	str	r2, [r3, #20]
>>>>>>> Stashed changes
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
<<<<<<< Updated upstream
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	2200      	movs	r2, #0
 8007746:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800774e:	b2db      	uxtb	r3, r3
 8007750:	2b00      	cmp	r3, #0
 8007752:	d106      	bne.n	8007762 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2200      	movs	r2, #0
 8007758:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
=======
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	2200      	movs	r2, #0
 8007716:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800771e:	b2db      	uxtb	r3, r3
 8007720:	2b00      	cmp	r3, #0
 8007722:	d106      	bne.n	8007732 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2200      	movs	r2, #0
 8007728:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
>>>>>>> Stashed changes

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
<<<<<<< Updated upstream
 800775c:	6878      	ldr	r0, [r7, #4]
 800775e:	f7f9 fdf1 	bl	8001344 <HAL_SPI_MspInit>
=======
 800772c:	6878      	ldr	r0, [r7, #4]
 800772e:	f7f9 fe0b 	bl	8001348 <HAL_SPI_MspInit>
>>>>>>> Stashed changes
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
<<<<<<< Updated upstream
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2202      	movs	r2, #2
 8007766:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	681a      	ldr	r2, [r3, #0]
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007778:	601a      	str	r2, [r3, #0]
=======
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	2202      	movs	r2, #2
 8007736:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	681a      	ldr	r2, [r3, #0]
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007748:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
<<<<<<< Updated upstream
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	685b      	ldr	r3, [r3, #4]
 800777e:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	689b      	ldr	r3, [r3, #8]
 8007786:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800778a:	431a      	orrs	r2, r3
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	68db      	ldr	r3, [r3, #12]
 8007790:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007794:	431a      	orrs	r2, r3
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	691b      	ldr	r3, [r3, #16]
 800779a:	f003 0302 	and.w	r3, r3, #2
 800779e:	431a      	orrs	r2, r3
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	695b      	ldr	r3, [r3, #20]
 80077a4:	f003 0301 	and.w	r3, r3, #1
 80077a8:	431a      	orrs	r2, r3
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	699b      	ldr	r3, [r3, #24]
 80077ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80077b2:	431a      	orrs	r2, r3
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	69db      	ldr	r3, [r3, #28]
 80077b8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80077bc:	431a      	orrs	r2, r3
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	6a1b      	ldr	r3, [r3, #32]
 80077c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077c6:	ea42 0103 	orr.w	r1, r2, r3
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077ce:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	430a      	orrs	r2, r1
 80077d8:	601a      	str	r2, [r3, #0]
=======
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	685b      	ldr	r3, [r3, #4]
 800774e:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	689b      	ldr	r3, [r3, #8]
 8007756:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800775a:	431a      	orrs	r2, r3
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	68db      	ldr	r3, [r3, #12]
 8007760:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007764:	431a      	orrs	r2, r3
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	691b      	ldr	r3, [r3, #16]
 800776a:	f003 0302 	and.w	r3, r3, #2
 800776e:	431a      	orrs	r2, r3
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	695b      	ldr	r3, [r3, #20]
 8007774:	f003 0301 	and.w	r3, r3, #1
 8007778:	431a      	orrs	r2, r3
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	699b      	ldr	r3, [r3, #24]
 800777e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007782:	431a      	orrs	r2, r3
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	69db      	ldr	r3, [r3, #28]
 8007788:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800778c:	431a      	orrs	r2, r3
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	6a1b      	ldr	r3, [r3, #32]
 8007792:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007796:	ea42 0103 	orr.w	r1, r2, r3
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800779e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	430a      	orrs	r2, r1
 80077a8:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
<<<<<<< Updated upstream
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	699b      	ldr	r3, [r3, #24]
 80077de:	0c1b      	lsrs	r3, r3, #16
 80077e0:	f003 0104 	and.w	r1, r3, #4
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077e8:	f003 0210 	and.w	r2, r3, #16
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	430a      	orrs	r2, r1
 80077f2:	605a      	str	r2, [r3, #4]
=======
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	699b      	ldr	r3, [r3, #24]
 80077ae:	0c1b      	lsrs	r3, r3, #16
 80077b0:	f003 0104 	and.w	r1, r3, #4
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077b8:	f003 0210 	and.w	r2, r3, #16
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	430a      	orrs	r2, r1
 80077c2:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
<<<<<<< Updated upstream
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	69da      	ldr	r2, [r3, #28]
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007802:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2200      	movs	r2, #0
 8007808:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	2201      	movs	r2, #1
 800780e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007812:	2300      	movs	r3, #0
}
 8007814:	4618      	mov	r0, r3
 8007816:	3708      	adds	r7, #8
 8007818:	46bd      	mov	sp, r7
 800781a:	bd80      	pop	{r7, pc}

0800781c <HAL_TIM_Base_Init>:
=======
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	69da      	ldr	r2, [r3, #28]
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80077d2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2200      	movs	r2, #0
 80077d8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	2201      	movs	r2, #1
 80077de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80077e2:	2300      	movs	r3, #0
}
 80077e4:	4618      	mov	r0, r3
 80077e6:	3708      	adds	r7, #8
 80077e8:	46bd      	mov	sp, r7
 80077ea:	bd80      	pop	{r7, pc}

080077ec <HAL_TIM_Base_Init>:
>>>>>>> Stashed changes
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 800781c:	b580      	push	{r7, lr}
 800781e:	b082      	sub	sp, #8
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d101      	bne.n	800782e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800782a:	2301      	movs	r3, #1
 800782c:	e041      	b.n	80078b2 <HAL_TIM_Base_Init+0x96>
=======
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b082      	sub	sp, #8
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d101      	bne.n	80077fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80077fa:	2301      	movs	r3, #1
 80077fc:	e041      	b.n	8007882 <HAL_TIM_Base_Init+0x96>
>>>>>>> Stashed changes
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
<<<<<<< Updated upstream
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007834:	b2db      	uxtb	r3, r3
 8007836:	2b00      	cmp	r3, #0
 8007838:	d106      	bne.n	8007848 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	2200      	movs	r2, #0
 800783e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007804:	b2db      	uxtb	r3, r3
 8007806:	2b00      	cmp	r3, #0
 8007808:	d106      	bne.n	8007818 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	2200      	movs	r2, #0
 800780e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
>>>>>>> Stashed changes
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
<<<<<<< Updated upstream
 8007842:	6878      	ldr	r0, [r7, #4]
 8007844:	f7fa f9b6 	bl	8001bb4 <HAL_TIM_Base_MspInit>
=======
 8007812:	6878      	ldr	r0, [r7, #4]
 8007814:	f7fa f9d0 	bl	8001bb8 <HAL_TIM_Base_MspInit>
>>>>>>> Stashed changes
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
<<<<<<< Updated upstream
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2202      	movs	r2, #2
 800784c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681a      	ldr	r2, [r3, #0]
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	3304      	adds	r3, #4
 8007858:	4619      	mov	r1, r3
 800785a:	4610      	mov	r0, r2
 800785c:	f000 fb4a 	bl	8007ef4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2201      	movs	r2, #1
 8007864:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2201      	movs	r2, #1
 800786c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2201      	movs	r2, #1
 8007874:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2201      	movs	r2, #1
 800787c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2201      	movs	r2, #1
 8007884:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2201      	movs	r2, #1
 800788c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2201      	movs	r2, #1
 8007894:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	2201      	movs	r2, #1
 800789c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2201      	movs	r2, #1
 80078a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2201      	movs	r2, #1
 80078ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80078b0:	2300      	movs	r3, #0
}
 80078b2:	4618      	mov	r0, r3
 80078b4:	3708      	adds	r7, #8
 80078b6:	46bd      	mov	sp, r7
 80078b8:	bd80      	pop	{r7, pc}

080078ba <HAL_TIM_PWM_Init>:
=======
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2202      	movs	r2, #2
 800781c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681a      	ldr	r2, [r3, #0]
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	3304      	adds	r3, #4
 8007828:	4619      	mov	r1, r3
 800782a:	4610      	mov	r0, r2
 800782c:	f000 fb4a 	bl	8007ec4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2201      	movs	r2, #1
 8007834:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2201      	movs	r2, #1
 800783c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2201      	movs	r2, #1
 8007844:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2201      	movs	r2, #1
 800784c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2201      	movs	r2, #1
 8007854:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2201      	movs	r2, #1
 800785c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2201      	movs	r2, #1
 8007864:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2201      	movs	r2, #1
 800786c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2201      	movs	r2, #1
 8007874:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2201      	movs	r2, #1
 800787c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007880:	2300      	movs	r3, #0
}
 8007882:	4618      	mov	r0, r3
 8007884:	3708      	adds	r7, #8
 8007886:	46bd      	mov	sp, r7
 8007888:	bd80      	pop	{r7, pc}

0800788a <HAL_TIM_PWM_Init>:
>>>>>>> Stashed changes
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 80078ba:	b580      	push	{r7, lr}
 80078bc:	b082      	sub	sp, #8
 80078be:	af00      	add	r7, sp, #0
 80078c0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d101      	bne.n	80078cc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80078c8:	2301      	movs	r3, #1
 80078ca:	e041      	b.n	8007950 <HAL_TIM_PWM_Init+0x96>
=======
 800788a:	b580      	push	{r7, lr}
 800788c:	b082      	sub	sp, #8
 800788e:	af00      	add	r7, sp, #0
 8007890:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d101      	bne.n	800789c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007898:	2301      	movs	r3, #1
 800789a:	e041      	b.n	8007920 <HAL_TIM_PWM_Init+0x96>
>>>>>>> Stashed changes
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
<<<<<<< Updated upstream
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078d2:	b2db      	uxtb	r3, r3
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d106      	bne.n	80078e6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2200      	movs	r2, #0
 80078dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078a2:	b2db      	uxtb	r3, r3
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d106      	bne.n	80078b6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2200      	movs	r2, #0
 80078ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
>>>>>>> Stashed changes
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
<<<<<<< Updated upstream
 80078e0:	6878      	ldr	r0, [r7, #4]
 80078e2:	f000 f839 	bl	8007958 <HAL_TIM_PWM_MspInit>
=======
 80078b0:	6878      	ldr	r0, [r7, #4]
 80078b2:	f000 f839 	bl	8007928 <HAL_TIM_PWM_MspInit>
>>>>>>> Stashed changes
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
<<<<<<< Updated upstream
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	2202      	movs	r2, #2
 80078ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681a      	ldr	r2, [r3, #0]
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	3304      	adds	r3, #4
 80078f6:	4619      	mov	r1, r3
 80078f8:	4610      	mov	r0, r2
 80078fa:	f000 fafb 	bl	8007ef4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	2201      	movs	r2, #1
 8007902:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	2201      	movs	r2, #1
 800790a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	2201      	movs	r2, #1
 8007912:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	2201      	movs	r2, #1
 800791a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	2201      	movs	r2, #1
 8007922:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	2201      	movs	r2, #1
 800792a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	2201      	movs	r2, #1
 8007932:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	2201      	movs	r2, #1
 800793a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	2201      	movs	r2, #1
 8007942:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	2201      	movs	r2, #1
 800794a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800794e:	2300      	movs	r3, #0
}
 8007950:	4618      	mov	r0, r3
 8007952:	3708      	adds	r7, #8
 8007954:	46bd      	mov	sp, r7
 8007956:	bd80      	pop	{r7, pc}

08007958 <HAL_TIM_PWM_MspInit>:
=======
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	2202      	movs	r2, #2
 80078ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681a      	ldr	r2, [r3, #0]
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	3304      	adds	r3, #4
 80078c6:	4619      	mov	r1, r3
 80078c8:	4610      	mov	r0, r2
 80078ca:	f000 fafb 	bl	8007ec4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	2201      	movs	r2, #1
 80078d2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	2201      	movs	r2, #1
 80078da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	2201      	movs	r2, #1
 80078e2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	2201      	movs	r2, #1
 80078ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	2201      	movs	r2, #1
 80078f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	2201      	movs	r2, #1
 80078fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	2201      	movs	r2, #1
 8007902:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	2201      	movs	r2, #1
 800790a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	2201      	movs	r2, #1
 8007912:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	2201      	movs	r2, #1
 800791a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800791e:	2300      	movs	r3, #0
}
 8007920:	4618      	mov	r0, r3
 8007922:	3708      	adds	r7, #8
 8007924:	46bd      	mov	sp, r7
 8007926:	bd80      	pop	{r7, pc}

08007928 <HAL_TIM_PWM_MspInit>:
>>>>>>> Stashed changes
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 8007958:	b480      	push	{r7}
 800795a:	b083      	sub	sp, #12
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
=======
 8007928:	b480      	push	{r7}
 800792a:	b083      	sub	sp, #12
 800792c:	af00      	add	r7, sp, #0
 800792e:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
<<<<<<< Updated upstream
 8007960:	bf00      	nop
 8007962:	370c      	adds	r7, #12
 8007964:	46bd      	mov	sp, r7
 8007966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796a:	4770      	bx	lr

0800796c <HAL_TIM_IRQHandler>:
=======
 8007930:	bf00      	nop
 8007932:	370c      	adds	r7, #12
 8007934:	46bd      	mov	sp, r7
 8007936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793a:	4770      	bx	lr

0800793c <HAL_TIM_IRQHandler>:
>>>>>>> Stashed changes
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 800796c:	b580      	push	{r7, lr}
 800796e:	b082      	sub	sp, #8
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	691b      	ldr	r3, [r3, #16]
 800797a:	f003 0302 	and.w	r3, r3, #2
 800797e:	2b02      	cmp	r3, #2
 8007980:	d122      	bne.n	80079c8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	68db      	ldr	r3, [r3, #12]
 8007988:	f003 0302 	and.w	r3, r3, #2
 800798c:	2b02      	cmp	r3, #2
 800798e:	d11b      	bne.n	80079c8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	f06f 0202 	mvn.w	r2, #2
 8007998:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	2201      	movs	r2, #1
 800799e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	699b      	ldr	r3, [r3, #24]
 80079a6:	f003 0303 	and.w	r3, r3, #3
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d003      	beq.n	80079b6 <HAL_TIM_IRQHandler+0x4a>
=======
 800793c:	b580      	push	{r7, lr}
 800793e:	b082      	sub	sp, #8
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	691b      	ldr	r3, [r3, #16]
 800794a:	f003 0302 	and.w	r3, r3, #2
 800794e:	2b02      	cmp	r3, #2
 8007950:	d122      	bne.n	8007998 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	68db      	ldr	r3, [r3, #12]
 8007958:	f003 0302 	and.w	r3, r3, #2
 800795c:	2b02      	cmp	r3, #2
 800795e:	d11b      	bne.n	8007998 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	f06f 0202 	mvn.w	r2, #2
 8007968:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	2201      	movs	r2, #1
 800796e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	699b      	ldr	r3, [r3, #24]
 8007976:	f003 0303 	and.w	r3, r3, #3
 800797a:	2b00      	cmp	r3, #0
 800797c:	d003      	beq.n	8007986 <HAL_TIM_IRQHandler+0x4a>
>>>>>>> Stashed changes
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< Updated upstream
 80079ae:	6878      	ldr	r0, [r7, #4]
 80079b0:	f000 fa81 	bl	8007eb6 <HAL_TIM_IC_CaptureCallback>
 80079b4:	e005      	b.n	80079c2 <HAL_TIM_IRQHandler+0x56>
=======
 800797e:	6878      	ldr	r0, [r7, #4]
 8007980:	f000 fa81 	bl	8007e86 <HAL_TIM_IC_CaptureCallback>
 8007984:	e005      	b.n	8007992 <HAL_TIM_IRQHandler+0x56>
>>>>>>> Stashed changes
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< Updated upstream
 80079b6:	6878      	ldr	r0, [r7, #4]
 80079b8:	f000 fa73 	bl	8007ea2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80079bc:	6878      	ldr	r0, [r7, #4]
 80079be:	f000 fa84 	bl	8007eca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	2200      	movs	r2, #0
 80079c6:	771a      	strb	r2, [r3, #28]
=======
 8007986:	6878      	ldr	r0, [r7, #4]
 8007988:	f000 fa73 	bl	8007e72 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800798c:	6878      	ldr	r0, [r7, #4]
 800798e:	f000 fa84 	bl	8007e9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	2200      	movs	r2, #0
 8007996:	771a      	strb	r2, [r3, #28]
>>>>>>> Stashed changes
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
<<<<<<< Updated upstream
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	691b      	ldr	r3, [r3, #16]
 80079ce:	f003 0304 	and.w	r3, r3, #4
 80079d2:	2b04      	cmp	r3, #4
 80079d4:	d122      	bne.n	8007a1c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	68db      	ldr	r3, [r3, #12]
 80079dc:	f003 0304 	and.w	r3, r3, #4
 80079e0:	2b04      	cmp	r3, #4
 80079e2:	d11b      	bne.n	8007a1c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	f06f 0204 	mvn.w	r2, #4
 80079ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2202      	movs	r2, #2
 80079f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	699b      	ldr	r3, [r3, #24]
 80079fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d003      	beq.n	8007a0a <HAL_TIM_IRQHandler+0x9e>
=======
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	691b      	ldr	r3, [r3, #16]
 800799e:	f003 0304 	and.w	r3, r3, #4
 80079a2:	2b04      	cmp	r3, #4
 80079a4:	d122      	bne.n	80079ec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	68db      	ldr	r3, [r3, #12]
 80079ac:	f003 0304 	and.w	r3, r3, #4
 80079b0:	2b04      	cmp	r3, #4
 80079b2:	d11b      	bne.n	80079ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	f06f 0204 	mvn.w	r2, #4
 80079bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	2202      	movs	r2, #2
 80079c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	699b      	ldr	r3, [r3, #24]
 80079ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d003      	beq.n	80079da <HAL_TIM_IRQHandler+0x9e>
>>>>>>> Stashed changes
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< Updated upstream
 8007a02:	6878      	ldr	r0, [r7, #4]
 8007a04:	f000 fa57 	bl	8007eb6 <HAL_TIM_IC_CaptureCallback>
 8007a08:	e005      	b.n	8007a16 <HAL_TIM_IRQHandler+0xaa>
=======
 80079d2:	6878      	ldr	r0, [r7, #4]
 80079d4:	f000 fa57 	bl	8007e86 <HAL_TIM_IC_CaptureCallback>
 80079d8:	e005      	b.n	80079e6 <HAL_TIM_IRQHandler+0xaa>
>>>>>>> Stashed changes
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< Updated upstream
 8007a0a:	6878      	ldr	r0, [r7, #4]
 8007a0c:	f000 fa49 	bl	8007ea2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a10:	6878      	ldr	r0, [r7, #4]
 8007a12:	f000 fa5a 	bl	8007eca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	2200      	movs	r2, #0
 8007a1a:	771a      	strb	r2, [r3, #28]
=======
 80079da:	6878      	ldr	r0, [r7, #4]
 80079dc:	f000 fa49 	bl	8007e72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80079e0:	6878      	ldr	r0, [r7, #4]
 80079e2:	f000 fa5a 	bl	8007e9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	2200      	movs	r2, #0
 80079ea:	771a      	strb	r2, [r3, #28]
>>>>>>> Stashed changes
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
<<<<<<< Updated upstream
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	691b      	ldr	r3, [r3, #16]
 8007a22:	f003 0308 	and.w	r3, r3, #8
 8007a26:	2b08      	cmp	r3, #8
 8007a28:	d122      	bne.n	8007a70 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	68db      	ldr	r3, [r3, #12]
 8007a30:	f003 0308 	and.w	r3, r3, #8
 8007a34:	2b08      	cmp	r3, #8
 8007a36:	d11b      	bne.n	8007a70 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	f06f 0208 	mvn.w	r2, #8
 8007a40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	2204      	movs	r2, #4
 8007a46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	69db      	ldr	r3, [r3, #28]
 8007a4e:	f003 0303 	and.w	r3, r3, #3
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d003      	beq.n	8007a5e <HAL_TIM_IRQHandler+0xf2>
=======
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	691b      	ldr	r3, [r3, #16]
 80079f2:	f003 0308 	and.w	r3, r3, #8
 80079f6:	2b08      	cmp	r3, #8
 80079f8:	d122      	bne.n	8007a40 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	68db      	ldr	r3, [r3, #12]
 8007a00:	f003 0308 	and.w	r3, r3, #8
 8007a04:	2b08      	cmp	r3, #8
 8007a06:	d11b      	bne.n	8007a40 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	f06f 0208 	mvn.w	r2, #8
 8007a10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	2204      	movs	r2, #4
 8007a16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	69db      	ldr	r3, [r3, #28]
 8007a1e:	f003 0303 	and.w	r3, r3, #3
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d003      	beq.n	8007a2e <HAL_TIM_IRQHandler+0xf2>
>>>>>>> Stashed changes
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< Updated upstream
 8007a56:	6878      	ldr	r0, [r7, #4]
 8007a58:	f000 fa2d 	bl	8007eb6 <HAL_TIM_IC_CaptureCallback>
 8007a5c:	e005      	b.n	8007a6a <HAL_TIM_IRQHandler+0xfe>
=======
 8007a26:	6878      	ldr	r0, [r7, #4]
 8007a28:	f000 fa2d 	bl	8007e86 <HAL_TIM_IC_CaptureCallback>
 8007a2c:	e005      	b.n	8007a3a <HAL_TIM_IRQHandler+0xfe>
>>>>>>> Stashed changes
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< Updated upstream
 8007a5e:	6878      	ldr	r0, [r7, #4]
 8007a60:	f000 fa1f 	bl	8007ea2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a64:	6878      	ldr	r0, [r7, #4]
 8007a66:	f000 fa30 	bl	8007eca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	771a      	strb	r2, [r3, #28]
=======
 8007a2e:	6878      	ldr	r0, [r7, #4]
 8007a30:	f000 fa1f 	bl	8007e72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a34:	6878      	ldr	r0, [r7, #4]
 8007a36:	f000 fa30 	bl	8007e9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	771a      	strb	r2, [r3, #28]
>>>>>>> Stashed changes
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
<<<<<<< Updated upstream
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	691b      	ldr	r3, [r3, #16]
 8007a76:	f003 0310 	and.w	r3, r3, #16
 8007a7a:	2b10      	cmp	r3, #16
 8007a7c:	d122      	bne.n	8007ac4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	68db      	ldr	r3, [r3, #12]
 8007a84:	f003 0310 	and.w	r3, r3, #16
 8007a88:	2b10      	cmp	r3, #16
 8007a8a:	d11b      	bne.n	8007ac4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	f06f 0210 	mvn.w	r2, #16
 8007a94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	2208      	movs	r2, #8
 8007a9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	69db      	ldr	r3, [r3, #28]
 8007aa2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d003      	beq.n	8007ab2 <HAL_TIM_IRQHandler+0x146>
=======
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	691b      	ldr	r3, [r3, #16]
 8007a46:	f003 0310 	and.w	r3, r3, #16
 8007a4a:	2b10      	cmp	r3, #16
 8007a4c:	d122      	bne.n	8007a94 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	68db      	ldr	r3, [r3, #12]
 8007a54:	f003 0310 	and.w	r3, r3, #16
 8007a58:	2b10      	cmp	r3, #16
 8007a5a:	d11b      	bne.n	8007a94 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	f06f 0210 	mvn.w	r2, #16
 8007a64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	2208      	movs	r2, #8
 8007a6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	69db      	ldr	r3, [r3, #28]
 8007a72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d003      	beq.n	8007a82 <HAL_TIM_IRQHandler+0x146>
>>>>>>> Stashed changes
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< Updated upstream
 8007aaa:	6878      	ldr	r0, [r7, #4]
 8007aac:	f000 fa03 	bl	8007eb6 <HAL_TIM_IC_CaptureCallback>
 8007ab0:	e005      	b.n	8007abe <HAL_TIM_IRQHandler+0x152>
=======
 8007a7a:	6878      	ldr	r0, [r7, #4]
 8007a7c:	f000 fa03 	bl	8007e86 <HAL_TIM_IC_CaptureCallback>
 8007a80:	e005      	b.n	8007a8e <HAL_TIM_IRQHandler+0x152>
>>>>>>> Stashed changes
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< Updated upstream
 8007ab2:	6878      	ldr	r0, [r7, #4]
 8007ab4:	f000 f9f5 	bl	8007ea2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ab8:	6878      	ldr	r0, [r7, #4]
 8007aba:	f000 fa06 	bl	8007eca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	771a      	strb	r2, [r3, #28]
=======
 8007a82:	6878      	ldr	r0, [r7, #4]
 8007a84:	f000 f9f5 	bl	8007e72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a88:	6878      	ldr	r0, [r7, #4]
 8007a8a:	f000 fa06 	bl	8007e9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	2200      	movs	r2, #0
 8007a92:	771a      	strb	r2, [r3, #28]
>>>>>>> Stashed changes
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
<<<<<<< Updated upstream
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	691b      	ldr	r3, [r3, #16]
 8007aca:	f003 0301 	and.w	r3, r3, #1
 8007ace:	2b01      	cmp	r3, #1
 8007ad0:	d10e      	bne.n	8007af0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	68db      	ldr	r3, [r3, #12]
 8007ad8:	f003 0301 	and.w	r3, r3, #1
 8007adc:	2b01      	cmp	r3, #1
 8007ade:	d107      	bne.n	8007af0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	f06f 0201 	mvn.w	r2, #1
 8007ae8:	611a      	str	r2, [r3, #16]
=======
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	691b      	ldr	r3, [r3, #16]
 8007a9a:	f003 0301 	and.w	r3, r3, #1
 8007a9e:	2b01      	cmp	r3, #1
 8007aa0:	d10e      	bne.n	8007ac0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	68db      	ldr	r3, [r3, #12]
 8007aa8:	f003 0301 	and.w	r3, r3, #1
 8007aac:	2b01      	cmp	r3, #1
 8007aae:	d107      	bne.n	8007ac0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	f06f 0201 	mvn.w	r2, #1
 8007ab8:	611a      	str	r2, [r3, #16]
>>>>>>> Stashed changes
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
<<<<<<< Updated upstream
 8007aea:	6878      	ldr	r0, [r7, #4]
 8007aec:	f000 f9cf 	bl	8007e8e <HAL_TIM_PeriodElapsedCallback>
=======
 8007aba:	6878      	ldr	r0, [r7, #4]
 8007abc:	f000 f9cf 	bl	8007e5e <HAL_TIM_PeriodElapsedCallback>
>>>>>>> Stashed changes
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
<<<<<<< Updated upstream
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	691b      	ldr	r3, [r3, #16]
 8007af6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007afa:	2b80      	cmp	r3, #128	; 0x80
 8007afc:	d10e      	bne.n	8007b1c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	68db      	ldr	r3, [r3, #12]
 8007b04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b08:	2b80      	cmp	r3, #128	; 0x80
 8007b0a:	d107      	bne.n	8007b1c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007b14:	611a      	str	r2, [r3, #16]
=======
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	691b      	ldr	r3, [r3, #16]
 8007ac6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007aca:	2b80      	cmp	r3, #128	; 0x80
 8007acc:	d10e      	bne.n	8007aec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	68db      	ldr	r3, [r3, #12]
 8007ad4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ad8:	2b80      	cmp	r3, #128	; 0x80
 8007ada:	d107      	bne.n	8007aec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007ae4:	611a      	str	r2, [r3, #16]
>>>>>>> Stashed changes
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
<<<<<<< Updated upstream
 8007b16:	6878      	ldr	r0, [r7, #4]
 8007b18:	f000 fd5c 	bl	80085d4 <HAL_TIMEx_BreakCallback>
=======
 8007ae6:	6878      	ldr	r0, [r7, #4]
 8007ae8:	f000 fd5c 	bl	80085a4 <HAL_TIMEx_BreakCallback>
>>>>>>> Stashed changes
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
<<<<<<< Updated upstream
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	691b      	ldr	r3, [r3, #16]
 8007b22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b26:	2b40      	cmp	r3, #64	; 0x40
 8007b28:	d10e      	bne.n	8007b48 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	68db      	ldr	r3, [r3, #12]
 8007b30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b34:	2b40      	cmp	r3, #64	; 0x40
 8007b36:	d107      	bne.n	8007b48 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007b40:	611a      	str	r2, [r3, #16]
=======
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	691b      	ldr	r3, [r3, #16]
 8007af2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007af6:	2b40      	cmp	r3, #64	; 0x40
 8007af8:	d10e      	bne.n	8007b18 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	68db      	ldr	r3, [r3, #12]
 8007b00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b04:	2b40      	cmp	r3, #64	; 0x40
 8007b06:	d107      	bne.n	8007b18 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007b10:	611a      	str	r2, [r3, #16]
>>>>>>> Stashed changes
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
<<<<<<< Updated upstream
 8007b42:	6878      	ldr	r0, [r7, #4]
 8007b44:	f000 f9cb 	bl	8007ede <HAL_TIM_TriggerCallback>
=======
 8007b12:	6878      	ldr	r0, [r7, #4]
 8007b14:	f000 f9cb 	bl	8007eae <HAL_TIM_TriggerCallback>
>>>>>>> Stashed changes
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
<<<<<<< Updated upstream
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	691b      	ldr	r3, [r3, #16]
 8007b4e:	f003 0320 	and.w	r3, r3, #32
 8007b52:	2b20      	cmp	r3, #32
 8007b54:	d10e      	bne.n	8007b74 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	68db      	ldr	r3, [r3, #12]
 8007b5c:	f003 0320 	and.w	r3, r3, #32
 8007b60:	2b20      	cmp	r3, #32
 8007b62:	d107      	bne.n	8007b74 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	f06f 0220 	mvn.w	r2, #32
 8007b6c:	611a      	str	r2, [r3, #16]
=======
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	691b      	ldr	r3, [r3, #16]
 8007b1e:	f003 0320 	and.w	r3, r3, #32
 8007b22:	2b20      	cmp	r3, #32
 8007b24:	d10e      	bne.n	8007b44 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	68db      	ldr	r3, [r3, #12]
 8007b2c:	f003 0320 	and.w	r3, r3, #32
 8007b30:	2b20      	cmp	r3, #32
 8007b32:	d107      	bne.n	8007b44 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	f06f 0220 	mvn.w	r2, #32
 8007b3c:	611a      	str	r2, [r3, #16]
>>>>>>> Stashed changes
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
<<<<<<< Updated upstream
 8007b6e:	6878      	ldr	r0, [r7, #4]
 8007b70:	f000 fd26 	bl	80085c0 <HAL_TIMEx_CommutCallback>
=======
 8007b3e:	6878      	ldr	r0, [r7, #4]
 8007b40:	f000 fd26 	bl	8008590 <HAL_TIMEx_CommutCallback>
>>>>>>> Stashed changes
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
<<<<<<< Updated upstream
 8007b74:	bf00      	nop
 8007b76:	3708      	adds	r7, #8
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	bd80      	pop	{r7, pc}

08007b7c <HAL_TIM_PWM_ConfigChannel>:
=======
 8007b44:	bf00      	nop
 8007b46:	3708      	adds	r7, #8
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	bd80      	pop	{r7, pc}

08007b4c <HAL_TIM_PWM_ConfigChannel>:
>>>>>>> Stashed changes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
<<<<<<< Updated upstream
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	b086      	sub	sp, #24
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	60f8      	str	r0, [r7, #12]
 8007b84:	60b9      	str	r1, [r7, #8]
 8007b86:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007b88:	2300      	movs	r3, #0
 8007b8a:	75fb      	strb	r3, [r7, #23]
=======
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	b086      	sub	sp, #24
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	60f8      	str	r0, [r7, #12]
 8007b54:	60b9      	str	r1, [r7, #8]
 8007b56:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007b58:	2300      	movs	r3, #0
 8007b5a:	75fb      	strb	r3, [r7, #23]
>>>>>>> Stashed changes
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
<<<<<<< Updated upstream
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b92:	2b01      	cmp	r3, #1
 8007b94:	d101      	bne.n	8007b9a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007b96:	2302      	movs	r3, #2
 8007b98:	e0ae      	b.n	8007cf8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	2201      	movs	r2, #1
 8007b9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	2b0c      	cmp	r3, #12
 8007ba6:	f200 809f 	bhi.w	8007ce8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007baa:	a201      	add	r2, pc, #4	; (adr r2, 8007bb0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007bac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bb0:	08007be5 	.word	0x08007be5
 8007bb4:	08007ce9 	.word	0x08007ce9
 8007bb8:	08007ce9 	.word	0x08007ce9
 8007bbc:	08007ce9 	.word	0x08007ce9
 8007bc0:	08007c25 	.word	0x08007c25
 8007bc4:	08007ce9 	.word	0x08007ce9
 8007bc8:	08007ce9 	.word	0x08007ce9
 8007bcc:	08007ce9 	.word	0x08007ce9
 8007bd0:	08007c67 	.word	0x08007c67
 8007bd4:	08007ce9 	.word	0x08007ce9
 8007bd8:	08007ce9 	.word	0x08007ce9
 8007bdc:	08007ce9 	.word	0x08007ce9
 8007be0:	08007ca7 	.word	0x08007ca7
=======
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b62:	2b01      	cmp	r3, #1
 8007b64:	d101      	bne.n	8007b6a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007b66:	2302      	movs	r3, #2
 8007b68:	e0ae      	b.n	8007cc8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	2201      	movs	r2, #1
 8007b6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	2b0c      	cmp	r3, #12
 8007b76:	f200 809f 	bhi.w	8007cb8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007b7a:	a201      	add	r2, pc, #4	; (adr r2, 8007b80 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007b7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b80:	08007bb5 	.word	0x08007bb5
 8007b84:	08007cb9 	.word	0x08007cb9
 8007b88:	08007cb9 	.word	0x08007cb9
 8007b8c:	08007cb9 	.word	0x08007cb9
 8007b90:	08007bf5 	.word	0x08007bf5
 8007b94:	08007cb9 	.word	0x08007cb9
 8007b98:	08007cb9 	.word	0x08007cb9
 8007b9c:	08007cb9 	.word	0x08007cb9
 8007ba0:	08007c37 	.word	0x08007c37
 8007ba4:	08007cb9 	.word	0x08007cb9
 8007ba8:	08007cb9 	.word	0x08007cb9
 8007bac:	08007cb9 	.word	0x08007cb9
 8007bb0:	08007c77 	.word	0x08007c77
>>>>>>> Stashed changes
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
<<<<<<< Updated upstream
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	68b9      	ldr	r1, [r7, #8]
 8007bea:	4618      	mov	r0, r3
 8007bec:	f000 fa22 	bl	8008034 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	699a      	ldr	r2, [r3, #24]
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	f042 0208 	orr.w	r2, r2, #8
 8007bfe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
=======
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	68b9      	ldr	r1, [r7, #8]
 8007bba:	4618      	mov	r0, r3
 8007bbc:	f000 fa22 	bl	8008004 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	699a      	ldr	r2, [r3, #24]
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	f042 0208 	orr.w	r2, r2, #8
 8007bce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	699a      	ldr	r2, [r3, #24]
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	f022 0204 	bic.w	r2, r2, #4
 8007bde:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	6999      	ldr	r1, [r3, #24]
 8007be6:	68bb      	ldr	r3, [r7, #8]
 8007be8:	691a      	ldr	r2, [r3, #16]
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	430a      	orrs	r2, r1
 8007bf0:	619a      	str	r2, [r3, #24]
      break;
 8007bf2:	e064      	b.n	8007cbe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	68b9      	ldr	r1, [r7, #8]
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	f000 fa72 	bl	80080e4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
>>>>>>> Stashed changes
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	699a      	ldr	r2, [r3, #24]
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	681b      	ldr	r3, [r3, #0]
<<<<<<< Updated upstream
 8007c0a:	f022 0204 	bic.w	r2, r2, #4
 8007c0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	6999      	ldr	r1, [r3, #24]
 8007c16:	68bb      	ldr	r3, [r7, #8]
 8007c18:	691a      	ldr	r2, [r3, #16]
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	430a      	orrs	r2, r1
 8007c20:	619a      	str	r2, [r3, #24]
      break;
 8007c22:	e064      	b.n	8007cee <HAL_TIM_PWM_ConfigChannel+0x172>
=======
 8007c0a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007c0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	699a      	ldr	r2, [r3, #24]
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007c1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	6999      	ldr	r1, [r3, #24]
 8007c26:	68bb      	ldr	r3, [r7, #8]
 8007c28:	691b      	ldr	r3, [r3, #16]
 8007c2a:	021a      	lsls	r2, r3, #8
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	430a      	orrs	r2, r1
 8007c32:	619a      	str	r2, [r3, #24]
      break;
 8007c34:	e043      	b.n	8007cbe <HAL_TIM_PWM_ConfigChannel+0x172>
>>>>>>> Stashed changes
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

<<<<<<< Updated upstream
      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	68b9      	ldr	r1, [r7, #8]
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	f000 fa72 	bl	8008114 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	699a      	ldr	r2, [r3, #24]
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007c3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	699a      	ldr	r2, [r3, #24]
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007c4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	6999      	ldr	r1, [r3, #24]
 8007c56:	68bb      	ldr	r3, [r7, #8]
 8007c58:	691b      	ldr	r3, [r3, #16]
 8007c5a:	021a      	lsls	r2, r3, #8
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	430a      	orrs	r2, r1
 8007c62:	619a      	str	r2, [r3, #24]
      break;
 8007c64:	e043      	b.n	8007cee <HAL_TIM_PWM_ConfigChannel+0x172>
=======
      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	68b9      	ldr	r1, [r7, #8]
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	f000 fac7 	bl	80081d0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	69da      	ldr	r2, [r3, #28]
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	f042 0208 	orr.w	r2, r2, #8
 8007c50:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	69da      	ldr	r2, [r3, #28]
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	f022 0204 	bic.w	r2, r2, #4
 8007c60:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	69d9      	ldr	r1, [r3, #28]
 8007c68:	68bb      	ldr	r3, [r7, #8]
 8007c6a:	691a      	ldr	r2, [r3, #16]
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	430a      	orrs	r2, r1
 8007c72:	61da      	str	r2, [r3, #28]
      break;
 8007c74:	e023      	b.n	8007cbe <HAL_TIM_PWM_ConfigChannel+0x172>
>>>>>>> Stashed changes
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

<<<<<<< Updated upstream
      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	68b9      	ldr	r1, [r7, #8]
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	f000 fac7 	bl	8008200 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	69da      	ldr	r2, [r3, #28]
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	f042 0208 	orr.w	r2, r2, #8
 8007c80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
=======
      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	68b9      	ldr	r1, [r7, #8]
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	f000 fb1b 	bl	80082b8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
>>>>>>> Stashed changes
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	69da      	ldr	r2, [r3, #28]
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	681b      	ldr	r3, [r3, #0]
<<<<<<< Updated upstream
 8007c8c:	f022 0204 	bic.w	r2, r2, #4
 8007c90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	69d9      	ldr	r1, [r3, #28]
 8007c98:	68bb      	ldr	r3, [r7, #8]
 8007c9a:	691a      	ldr	r2, [r3, #16]
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	430a      	orrs	r2, r1
 8007ca2:	61da      	str	r2, [r3, #28]
      break;
 8007ca4:	e023      	b.n	8007cee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	68b9      	ldr	r1, [r7, #8]
 8007cac:	4618      	mov	r0, r3
 8007cae:	f000 fb1b 	bl	80082e8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	69da      	ldr	r2, [r3, #28]
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007cc0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	69da      	ldr	r2, [r3, #28]
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007cd0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	69d9      	ldr	r1, [r3, #28]
 8007cd8:	68bb      	ldr	r3, [r7, #8]
 8007cda:	691b      	ldr	r3, [r3, #16]
 8007cdc:	021a      	lsls	r2, r3, #8
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	430a      	orrs	r2, r1
 8007ce4:	61da      	str	r2, [r3, #28]
      break;
 8007ce6:	e002      	b.n	8007cee <HAL_TIM_PWM_ConfigChannel+0x172>
=======
 8007c8c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007c90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	69da      	ldr	r2, [r3, #28]
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007ca0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	69d9      	ldr	r1, [r3, #28]
 8007ca8:	68bb      	ldr	r3, [r7, #8]
 8007caa:	691b      	ldr	r3, [r3, #16]
 8007cac:	021a      	lsls	r2, r3, #8
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	430a      	orrs	r2, r1
 8007cb4:	61da      	str	r2, [r3, #28]
      break;
 8007cb6:	e002      	b.n	8007cbe <HAL_TIM_PWM_ConfigChannel+0x172>
>>>>>>> Stashed changes
    }

    default:
      status = HAL_ERROR;
<<<<<<< Updated upstream
 8007ce8:	2301      	movs	r3, #1
 8007cea:	75fb      	strb	r3, [r7, #23]
      break;
 8007cec:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	2200      	movs	r2, #0
 8007cf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007cf6:	7dfb      	ldrb	r3, [r7, #23]
}
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	3718      	adds	r7, #24
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	bd80      	pop	{r7, pc}

08007d00 <HAL_TIM_ConfigClockSource>:
=======
 8007cb8:	2301      	movs	r3, #1
 8007cba:	75fb      	strb	r3, [r7, #23]
      break;
 8007cbc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007cc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8007cc8:	4618      	mov	r0, r3
 8007cca:	3718      	adds	r7, #24
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	bd80      	pop	{r7, pc}

08007cd0 <HAL_TIM_ConfigClockSource>:
>>>>>>> Stashed changes
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
<<<<<<< Updated upstream
 8007d00:	b580      	push	{r7, lr}
 8007d02:	b084      	sub	sp, #16
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
 8007d08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	73fb      	strb	r3, [r7, #15]
=======
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b084      	sub	sp, #16
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
 8007cd8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007cda:	2300      	movs	r3, #0
 8007cdc:	73fb      	strb	r3, [r7, #15]
>>>>>>> Stashed changes
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
<<<<<<< Updated upstream
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d14:	2b01      	cmp	r3, #1
 8007d16:	d101      	bne.n	8007d1c <HAL_TIM_ConfigClockSource+0x1c>
 8007d18:	2302      	movs	r3, #2
 8007d1a:	e0b4      	b.n	8007e86 <HAL_TIM_ConfigClockSource+0x186>
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2201      	movs	r2, #1
 8007d20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2202      	movs	r2, #2
 8007d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
=======
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ce4:	2b01      	cmp	r3, #1
 8007ce6:	d101      	bne.n	8007cec <HAL_TIM_ConfigClockSource+0x1c>
 8007ce8:	2302      	movs	r3, #2
 8007cea:	e0b4      	b.n	8007e56 <HAL_TIM_ConfigClockSource+0x186>
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2201      	movs	r2, #1
 8007cf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2202      	movs	r2, #2
 8007cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
>>>>>>> Stashed changes

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
<<<<<<< Updated upstream
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	689b      	ldr	r3, [r3, #8]
 8007d32:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007d34:	68bb      	ldr	r3, [r7, #8]
 8007d36:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007d3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007d3c:	68bb      	ldr	r3, [r7, #8]
 8007d3e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007d42:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	68ba      	ldr	r2, [r7, #8]
 8007d4a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007d4c:	683b      	ldr	r3, [r7, #0]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d54:	d03e      	beq.n	8007dd4 <HAL_TIM_ConfigClockSource+0xd4>
 8007d56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d5a:	f200 8087 	bhi.w	8007e6c <HAL_TIM_ConfigClockSource+0x16c>
 8007d5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d62:	f000 8086 	beq.w	8007e72 <HAL_TIM_ConfigClockSource+0x172>
 8007d66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d6a:	d87f      	bhi.n	8007e6c <HAL_TIM_ConfigClockSource+0x16c>
 8007d6c:	2b70      	cmp	r3, #112	; 0x70
 8007d6e:	d01a      	beq.n	8007da6 <HAL_TIM_ConfigClockSource+0xa6>
 8007d70:	2b70      	cmp	r3, #112	; 0x70
 8007d72:	d87b      	bhi.n	8007e6c <HAL_TIM_ConfigClockSource+0x16c>
 8007d74:	2b60      	cmp	r3, #96	; 0x60
 8007d76:	d050      	beq.n	8007e1a <HAL_TIM_ConfigClockSource+0x11a>
 8007d78:	2b60      	cmp	r3, #96	; 0x60
 8007d7a:	d877      	bhi.n	8007e6c <HAL_TIM_ConfigClockSource+0x16c>
 8007d7c:	2b50      	cmp	r3, #80	; 0x50
 8007d7e:	d03c      	beq.n	8007dfa <HAL_TIM_ConfigClockSource+0xfa>
 8007d80:	2b50      	cmp	r3, #80	; 0x50
 8007d82:	d873      	bhi.n	8007e6c <HAL_TIM_ConfigClockSource+0x16c>
 8007d84:	2b40      	cmp	r3, #64	; 0x40
 8007d86:	d058      	beq.n	8007e3a <HAL_TIM_ConfigClockSource+0x13a>
 8007d88:	2b40      	cmp	r3, #64	; 0x40
 8007d8a:	d86f      	bhi.n	8007e6c <HAL_TIM_ConfigClockSource+0x16c>
 8007d8c:	2b30      	cmp	r3, #48	; 0x30
 8007d8e:	d064      	beq.n	8007e5a <HAL_TIM_ConfigClockSource+0x15a>
 8007d90:	2b30      	cmp	r3, #48	; 0x30
 8007d92:	d86b      	bhi.n	8007e6c <HAL_TIM_ConfigClockSource+0x16c>
 8007d94:	2b20      	cmp	r3, #32
 8007d96:	d060      	beq.n	8007e5a <HAL_TIM_ConfigClockSource+0x15a>
 8007d98:	2b20      	cmp	r3, #32
 8007d9a:	d867      	bhi.n	8007e6c <HAL_TIM_ConfigClockSource+0x16c>
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d05c      	beq.n	8007e5a <HAL_TIM_ConfigClockSource+0x15a>
 8007da0:	2b10      	cmp	r3, #16
 8007da2:	d05a      	beq.n	8007e5a <HAL_TIM_ConfigClockSource+0x15a>
 8007da4:	e062      	b.n	8007e6c <HAL_TIM_ConfigClockSource+0x16c>
=======
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	689b      	ldr	r3, [r3, #8]
 8007d02:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007d04:	68bb      	ldr	r3, [r7, #8]
 8007d06:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007d0a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007d0c:	68bb      	ldr	r3, [r7, #8]
 8007d0e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007d12:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	68ba      	ldr	r2, [r7, #8]
 8007d1a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007d1c:	683b      	ldr	r3, [r7, #0]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d24:	d03e      	beq.n	8007da4 <HAL_TIM_ConfigClockSource+0xd4>
 8007d26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d2a:	f200 8087 	bhi.w	8007e3c <HAL_TIM_ConfigClockSource+0x16c>
 8007d2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d32:	f000 8086 	beq.w	8007e42 <HAL_TIM_ConfigClockSource+0x172>
 8007d36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d3a:	d87f      	bhi.n	8007e3c <HAL_TIM_ConfigClockSource+0x16c>
 8007d3c:	2b70      	cmp	r3, #112	; 0x70
 8007d3e:	d01a      	beq.n	8007d76 <HAL_TIM_ConfigClockSource+0xa6>
 8007d40:	2b70      	cmp	r3, #112	; 0x70
 8007d42:	d87b      	bhi.n	8007e3c <HAL_TIM_ConfigClockSource+0x16c>
 8007d44:	2b60      	cmp	r3, #96	; 0x60
 8007d46:	d050      	beq.n	8007dea <HAL_TIM_ConfigClockSource+0x11a>
 8007d48:	2b60      	cmp	r3, #96	; 0x60
 8007d4a:	d877      	bhi.n	8007e3c <HAL_TIM_ConfigClockSource+0x16c>
 8007d4c:	2b50      	cmp	r3, #80	; 0x50
 8007d4e:	d03c      	beq.n	8007dca <HAL_TIM_ConfigClockSource+0xfa>
 8007d50:	2b50      	cmp	r3, #80	; 0x50
 8007d52:	d873      	bhi.n	8007e3c <HAL_TIM_ConfigClockSource+0x16c>
 8007d54:	2b40      	cmp	r3, #64	; 0x40
 8007d56:	d058      	beq.n	8007e0a <HAL_TIM_ConfigClockSource+0x13a>
 8007d58:	2b40      	cmp	r3, #64	; 0x40
 8007d5a:	d86f      	bhi.n	8007e3c <HAL_TIM_ConfigClockSource+0x16c>
 8007d5c:	2b30      	cmp	r3, #48	; 0x30
 8007d5e:	d064      	beq.n	8007e2a <HAL_TIM_ConfigClockSource+0x15a>
 8007d60:	2b30      	cmp	r3, #48	; 0x30
 8007d62:	d86b      	bhi.n	8007e3c <HAL_TIM_ConfigClockSource+0x16c>
 8007d64:	2b20      	cmp	r3, #32
 8007d66:	d060      	beq.n	8007e2a <HAL_TIM_ConfigClockSource+0x15a>
 8007d68:	2b20      	cmp	r3, #32
 8007d6a:	d867      	bhi.n	8007e3c <HAL_TIM_ConfigClockSource+0x16c>
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d05c      	beq.n	8007e2a <HAL_TIM_ConfigClockSource+0x15a>
 8007d70:	2b10      	cmp	r3, #16
 8007d72:	d05a      	beq.n	8007e2a <HAL_TIM_ConfigClockSource+0x15a>
 8007d74:	e062      	b.n	8007e3c <HAL_TIM_ConfigClockSource+0x16c>
>>>>>>> Stashed changes
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
<<<<<<< Updated upstream
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	6818      	ldr	r0, [r3, #0]
 8007daa:	683b      	ldr	r3, [r7, #0]
 8007dac:	6899      	ldr	r1, [r3, #8]
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	685a      	ldr	r2, [r3, #4]
 8007db2:	683b      	ldr	r3, [r7, #0]
 8007db4:	68db      	ldr	r3, [r3, #12]
 8007db6:	f000 fb67 	bl	8008488 <TIM_ETR_SetConfig>
=======
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	6818      	ldr	r0, [r3, #0]
 8007d7a:	683b      	ldr	r3, [r7, #0]
 8007d7c:	6899      	ldr	r1, [r3, #8]
 8007d7e:	683b      	ldr	r3, [r7, #0]
 8007d80:	685a      	ldr	r2, [r3, #4]
 8007d82:	683b      	ldr	r3, [r7, #0]
 8007d84:	68db      	ldr	r3, [r3, #12]
 8007d86:	f000 fb67 	bl	8008458 <TIM_ETR_SetConfig>
>>>>>>> Stashed changes
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
<<<<<<< Updated upstream
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	689b      	ldr	r3, [r3, #8]
 8007dc0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007dc2:	68bb      	ldr	r3, [r7, #8]
 8007dc4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007dc8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	68ba      	ldr	r2, [r7, #8]
 8007dd0:	609a      	str	r2, [r3, #8]
      break;
 8007dd2:	e04f      	b.n	8007e74 <HAL_TIM_ConfigClockSource+0x174>
=======
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	689b      	ldr	r3, [r3, #8]
 8007d90:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007d92:	68bb      	ldr	r3, [r7, #8]
 8007d94:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007d98:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	68ba      	ldr	r2, [r7, #8]
 8007da0:	609a      	str	r2, [r3, #8]
      break;
 8007da2:	e04f      	b.n	8007e44 <HAL_TIM_ConfigClockSource+0x174>
>>>>>>> Stashed changes
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
<<<<<<< Updated upstream
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	6818      	ldr	r0, [r3, #0]
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	6899      	ldr	r1, [r3, #8]
 8007ddc:	683b      	ldr	r3, [r7, #0]
 8007dde:	685a      	ldr	r2, [r3, #4]
 8007de0:	683b      	ldr	r3, [r7, #0]
 8007de2:	68db      	ldr	r3, [r3, #12]
 8007de4:	f000 fb50 	bl	8008488 <TIM_ETR_SetConfig>
=======
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	6818      	ldr	r0, [r3, #0]
 8007da8:	683b      	ldr	r3, [r7, #0]
 8007daa:	6899      	ldr	r1, [r3, #8]
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	685a      	ldr	r2, [r3, #4]
 8007db0:	683b      	ldr	r3, [r7, #0]
 8007db2:	68db      	ldr	r3, [r3, #12]
 8007db4:	f000 fb50 	bl	8008458 <TIM_ETR_SetConfig>
>>>>>>> Stashed changes
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
<<<<<<< Updated upstream
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	689a      	ldr	r2, [r3, #8]
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007df6:	609a      	str	r2, [r3, #8]
      break;
 8007df8:	e03c      	b.n	8007e74 <HAL_TIM_ConfigClockSource+0x174>
=======
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	689a      	ldr	r2, [r3, #8]
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007dc6:	609a      	str	r2, [r3, #8]
      break;
 8007dc8:	e03c      	b.n	8007e44 <HAL_TIM_ConfigClockSource+0x174>
>>>>>>> Stashed changes

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
<<<<<<< Updated upstream
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	6818      	ldr	r0, [r3, #0]
 8007dfe:	683b      	ldr	r3, [r7, #0]
 8007e00:	6859      	ldr	r1, [r3, #4]
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	68db      	ldr	r3, [r3, #12]
 8007e06:	461a      	mov	r2, r3
 8007e08:	f000 fac4 	bl	8008394 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	2150      	movs	r1, #80	; 0x50
 8007e12:	4618      	mov	r0, r3
 8007e14:	f000 fb1d 	bl	8008452 <TIM_ITRx_SetConfig>
      break;
 8007e18:	e02c      	b.n	8007e74 <HAL_TIM_ConfigClockSource+0x174>
=======
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	6818      	ldr	r0, [r3, #0]
 8007dce:	683b      	ldr	r3, [r7, #0]
 8007dd0:	6859      	ldr	r1, [r3, #4]
 8007dd2:	683b      	ldr	r3, [r7, #0]
 8007dd4:	68db      	ldr	r3, [r3, #12]
 8007dd6:	461a      	mov	r2, r3
 8007dd8:	f000 fac4 	bl	8008364 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	2150      	movs	r1, #80	; 0x50
 8007de2:	4618      	mov	r0, r3
 8007de4:	f000 fb1d 	bl	8008422 <TIM_ITRx_SetConfig>
      break;
 8007de8:	e02c      	b.n	8007e44 <HAL_TIM_ConfigClockSource+0x174>
>>>>>>> Stashed changes

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
<<<<<<< Updated upstream
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	6818      	ldr	r0, [r3, #0]
 8007e1e:	683b      	ldr	r3, [r7, #0]
 8007e20:	6859      	ldr	r1, [r3, #4]
 8007e22:	683b      	ldr	r3, [r7, #0]
 8007e24:	68db      	ldr	r3, [r3, #12]
 8007e26:	461a      	mov	r2, r3
 8007e28:	f000 fae3 	bl	80083f2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	2160      	movs	r1, #96	; 0x60
 8007e32:	4618      	mov	r0, r3
 8007e34:	f000 fb0d 	bl	8008452 <TIM_ITRx_SetConfig>
      break;
 8007e38:	e01c      	b.n	8007e74 <HAL_TIM_ConfigClockSource+0x174>
=======
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	6818      	ldr	r0, [r3, #0]
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	6859      	ldr	r1, [r3, #4]
 8007df2:	683b      	ldr	r3, [r7, #0]
 8007df4:	68db      	ldr	r3, [r3, #12]
 8007df6:	461a      	mov	r2, r3
 8007df8:	f000 fae3 	bl	80083c2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	2160      	movs	r1, #96	; 0x60
 8007e02:	4618      	mov	r0, r3
 8007e04:	f000 fb0d 	bl	8008422 <TIM_ITRx_SetConfig>
      break;
 8007e08:	e01c      	b.n	8007e44 <HAL_TIM_ConfigClockSource+0x174>
>>>>>>> Stashed changes

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
<<<<<<< Updated upstream
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	6818      	ldr	r0, [r3, #0]
 8007e3e:	683b      	ldr	r3, [r7, #0]
 8007e40:	6859      	ldr	r1, [r3, #4]
 8007e42:	683b      	ldr	r3, [r7, #0]
 8007e44:	68db      	ldr	r3, [r3, #12]
 8007e46:	461a      	mov	r2, r3
 8007e48:	f000 faa4 	bl	8008394 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	2140      	movs	r1, #64	; 0x40
 8007e52:	4618      	mov	r0, r3
 8007e54:	f000 fafd 	bl	8008452 <TIM_ITRx_SetConfig>
      break;
 8007e58:	e00c      	b.n	8007e74 <HAL_TIM_ConfigClockSource+0x174>
=======
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	6818      	ldr	r0, [r3, #0]
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	6859      	ldr	r1, [r3, #4]
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	68db      	ldr	r3, [r3, #12]
 8007e16:	461a      	mov	r2, r3
 8007e18:	f000 faa4 	bl	8008364 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	2140      	movs	r1, #64	; 0x40
 8007e22:	4618      	mov	r0, r3
 8007e24:	f000 fafd 	bl	8008422 <TIM_ITRx_SetConfig>
      break;
 8007e28:	e00c      	b.n	8007e44 <HAL_TIM_ConfigClockSource+0x174>
>>>>>>> Stashed changes
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
<<<<<<< Updated upstream
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681a      	ldr	r2, [r3, #0]
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	4619      	mov	r1, r3
 8007e64:	4610      	mov	r0, r2
 8007e66:	f000 faf4 	bl	8008452 <TIM_ITRx_SetConfig>
      break;
 8007e6a:	e003      	b.n	8007e74 <HAL_TIM_ConfigClockSource+0x174>
=======
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681a      	ldr	r2, [r3, #0]
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	4619      	mov	r1, r3
 8007e34:	4610      	mov	r0, r2
 8007e36:	f000 faf4 	bl	8008422 <TIM_ITRx_SetConfig>
      break;
 8007e3a:	e003      	b.n	8007e44 <HAL_TIM_ConfigClockSource+0x174>
>>>>>>> Stashed changes
    }

    default:
      status = HAL_ERROR;
<<<<<<< Updated upstream
 8007e6c:	2301      	movs	r3, #1
 8007e6e:	73fb      	strb	r3, [r7, #15]
      break;
 8007e70:	e000      	b.n	8007e74 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007e72:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2201      	movs	r2, #1
 8007e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	2200      	movs	r2, #0
 8007e80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007e84:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e86:	4618      	mov	r0, r3
 8007e88:	3710      	adds	r7, #16
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	bd80      	pop	{r7, pc}

08007e8e <HAL_TIM_PeriodElapsedCallback>:
=======
 8007e3c:	2301      	movs	r3, #1
 8007e3e:	73fb      	strb	r3, [r7, #15]
      break;
 8007e40:	e000      	b.n	8007e44 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007e42:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2201      	movs	r2, #1
 8007e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2200      	movs	r2, #0
 8007e50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007e54:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e56:	4618      	mov	r0, r3
 8007e58:	3710      	adds	r7, #16
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	bd80      	pop	{r7, pc}

08007e5e <HAL_TIM_PeriodElapsedCallback>:
>>>>>>> Stashed changes
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 8007e8e:	b480      	push	{r7}
 8007e90:	b083      	sub	sp, #12
 8007e92:	af00      	add	r7, sp, #0
 8007e94:	6078      	str	r0, [r7, #4]
=======
 8007e5e:	b480      	push	{r7}
 8007e60:	b083      	sub	sp, #12
 8007e62:	af00      	add	r7, sp, #0
 8007e64:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
<<<<<<< Updated upstream
 8007e96:	bf00      	nop
 8007e98:	370c      	adds	r7, #12
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea0:	4770      	bx	lr

08007ea2 <HAL_TIM_OC_DelayElapsedCallback>:
=======
 8007e66:	bf00      	nop
 8007e68:	370c      	adds	r7, #12
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e70:	4770      	bx	lr

08007e72 <HAL_TIM_OC_DelayElapsedCallback>:
>>>>>>> Stashed changes
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 8007ea2:	b480      	push	{r7}
 8007ea4:	b083      	sub	sp, #12
 8007ea6:	af00      	add	r7, sp, #0
 8007ea8:	6078      	str	r0, [r7, #4]
=======
 8007e72:	b480      	push	{r7}
 8007e74:	b083      	sub	sp, #12
 8007e76:	af00      	add	r7, sp, #0
 8007e78:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
<<<<<<< Updated upstream
 8007eaa:	bf00      	nop
 8007eac:	370c      	adds	r7, #12
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb4:	4770      	bx	lr

08007eb6 <HAL_TIM_IC_CaptureCallback>:
=======
 8007e7a:	bf00      	nop
 8007e7c:	370c      	adds	r7, #12
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e84:	4770      	bx	lr

08007e86 <HAL_TIM_IC_CaptureCallback>:
>>>>>>> Stashed changes
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 8007eb6:	b480      	push	{r7}
 8007eb8:	b083      	sub	sp, #12
 8007eba:	af00      	add	r7, sp, #0
 8007ebc:	6078      	str	r0, [r7, #4]
=======
 8007e86:	b480      	push	{r7}
 8007e88:	b083      	sub	sp, #12
 8007e8a:	af00      	add	r7, sp, #0
 8007e8c:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
<<<<<<< Updated upstream
 8007ebe:	bf00      	nop
 8007ec0:	370c      	adds	r7, #12
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec8:	4770      	bx	lr

08007eca <HAL_TIM_PWM_PulseFinishedCallback>:
=======
 8007e8e:	bf00      	nop
 8007e90:	370c      	adds	r7, #12
 8007e92:	46bd      	mov	sp, r7
 8007e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e98:	4770      	bx	lr

08007e9a <HAL_TIM_PWM_PulseFinishedCallback>:
>>>>>>> Stashed changes
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 8007eca:	b480      	push	{r7}
 8007ecc:	b083      	sub	sp, #12
 8007ece:	af00      	add	r7, sp, #0
 8007ed0:	6078      	str	r0, [r7, #4]
=======
 8007e9a:	b480      	push	{r7}
 8007e9c:	b083      	sub	sp, #12
 8007e9e:	af00      	add	r7, sp, #0
 8007ea0:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
<<<<<<< Updated upstream
 8007ed2:	bf00      	nop
 8007ed4:	370c      	adds	r7, #12
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007edc:	4770      	bx	lr

08007ede <HAL_TIM_TriggerCallback>:
=======
 8007ea2:	bf00      	nop
 8007ea4:	370c      	adds	r7, #12
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eac:	4770      	bx	lr

08007eae <HAL_TIM_TriggerCallback>:
>>>>>>> Stashed changes
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 8007ede:	b480      	push	{r7}
 8007ee0:	b083      	sub	sp, #12
 8007ee2:	af00      	add	r7, sp, #0
 8007ee4:	6078      	str	r0, [r7, #4]
=======
 8007eae:	b480      	push	{r7}
 8007eb0:	b083      	sub	sp, #12
 8007eb2:	af00      	add	r7, sp, #0
 8007eb4:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
<<<<<<< Updated upstream
 8007ee6:	bf00      	nop
 8007ee8:	370c      	adds	r7, #12
 8007eea:	46bd      	mov	sp, r7
 8007eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef0:	4770      	bx	lr
	...

08007ef4 <TIM_Base_SetConfig>:
=======
 8007eb6:	bf00      	nop
 8007eb8:	370c      	adds	r7, #12
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec0:	4770      	bx	lr
	...

08007ec4 <TIM_Base_SetConfig>:
>>>>>>> Stashed changes
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
<<<<<<< Updated upstream
 8007ef4:	b480      	push	{r7}
 8007ef6:	b085      	sub	sp, #20
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	6078      	str	r0, [r7, #4]
 8007efc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	4a40      	ldr	r2, [pc, #256]	; (8008008 <TIM_Base_SetConfig+0x114>)
 8007f08:	4293      	cmp	r3, r2
 8007f0a:	d013      	beq.n	8007f34 <TIM_Base_SetConfig+0x40>
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f12:	d00f      	beq.n	8007f34 <TIM_Base_SetConfig+0x40>
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	4a3d      	ldr	r2, [pc, #244]	; (800800c <TIM_Base_SetConfig+0x118>)
 8007f18:	4293      	cmp	r3, r2
 8007f1a:	d00b      	beq.n	8007f34 <TIM_Base_SetConfig+0x40>
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	4a3c      	ldr	r2, [pc, #240]	; (8008010 <TIM_Base_SetConfig+0x11c>)
 8007f20:	4293      	cmp	r3, r2
 8007f22:	d007      	beq.n	8007f34 <TIM_Base_SetConfig+0x40>
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	4a3b      	ldr	r2, [pc, #236]	; (8008014 <TIM_Base_SetConfig+0x120>)
 8007f28:	4293      	cmp	r3, r2
 8007f2a:	d003      	beq.n	8007f34 <TIM_Base_SetConfig+0x40>
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	4a3a      	ldr	r2, [pc, #232]	; (8008018 <TIM_Base_SetConfig+0x124>)
 8007f30:	4293      	cmp	r3, r2
 8007f32:	d108      	bne.n	8007f46 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007f3c:	683b      	ldr	r3, [r7, #0]
 8007f3e:	685b      	ldr	r3, [r3, #4]
 8007f40:	68fa      	ldr	r2, [r7, #12]
 8007f42:	4313      	orrs	r3, r2
 8007f44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	4a2f      	ldr	r2, [pc, #188]	; (8008008 <TIM_Base_SetConfig+0x114>)
 8007f4a:	4293      	cmp	r3, r2
 8007f4c:	d02b      	beq.n	8007fa6 <TIM_Base_SetConfig+0xb2>
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f54:	d027      	beq.n	8007fa6 <TIM_Base_SetConfig+0xb2>
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	4a2c      	ldr	r2, [pc, #176]	; (800800c <TIM_Base_SetConfig+0x118>)
 8007f5a:	4293      	cmp	r3, r2
 8007f5c:	d023      	beq.n	8007fa6 <TIM_Base_SetConfig+0xb2>
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	4a2b      	ldr	r2, [pc, #172]	; (8008010 <TIM_Base_SetConfig+0x11c>)
 8007f62:	4293      	cmp	r3, r2
 8007f64:	d01f      	beq.n	8007fa6 <TIM_Base_SetConfig+0xb2>
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	4a2a      	ldr	r2, [pc, #168]	; (8008014 <TIM_Base_SetConfig+0x120>)
 8007f6a:	4293      	cmp	r3, r2
 8007f6c:	d01b      	beq.n	8007fa6 <TIM_Base_SetConfig+0xb2>
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	4a29      	ldr	r2, [pc, #164]	; (8008018 <TIM_Base_SetConfig+0x124>)
 8007f72:	4293      	cmp	r3, r2
 8007f74:	d017      	beq.n	8007fa6 <TIM_Base_SetConfig+0xb2>
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	4a28      	ldr	r2, [pc, #160]	; (800801c <TIM_Base_SetConfig+0x128>)
 8007f7a:	4293      	cmp	r3, r2
 8007f7c:	d013      	beq.n	8007fa6 <TIM_Base_SetConfig+0xb2>
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	4a27      	ldr	r2, [pc, #156]	; (8008020 <TIM_Base_SetConfig+0x12c>)
 8007f82:	4293      	cmp	r3, r2
 8007f84:	d00f      	beq.n	8007fa6 <TIM_Base_SetConfig+0xb2>
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	4a26      	ldr	r2, [pc, #152]	; (8008024 <TIM_Base_SetConfig+0x130>)
 8007f8a:	4293      	cmp	r3, r2
 8007f8c:	d00b      	beq.n	8007fa6 <TIM_Base_SetConfig+0xb2>
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	4a25      	ldr	r2, [pc, #148]	; (8008028 <TIM_Base_SetConfig+0x134>)
 8007f92:	4293      	cmp	r3, r2
 8007f94:	d007      	beq.n	8007fa6 <TIM_Base_SetConfig+0xb2>
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	4a24      	ldr	r2, [pc, #144]	; (800802c <TIM_Base_SetConfig+0x138>)
 8007f9a:	4293      	cmp	r3, r2
 8007f9c:	d003      	beq.n	8007fa6 <TIM_Base_SetConfig+0xb2>
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	4a23      	ldr	r2, [pc, #140]	; (8008030 <TIM_Base_SetConfig+0x13c>)
 8007fa2:	4293      	cmp	r3, r2
 8007fa4:	d108      	bne.n	8007fb8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007fac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007fae:	683b      	ldr	r3, [r7, #0]
 8007fb0:	68db      	ldr	r3, [r3, #12]
 8007fb2:	68fa      	ldr	r2, [r7, #12]
 8007fb4:	4313      	orrs	r3, r2
 8007fb6:	60fb      	str	r3, [r7, #12]
=======
 8007ec4:	b480      	push	{r7}
 8007ec6:	b085      	sub	sp, #20
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
 8007ecc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	4a40      	ldr	r2, [pc, #256]	; (8007fd8 <TIM_Base_SetConfig+0x114>)
 8007ed8:	4293      	cmp	r3, r2
 8007eda:	d013      	beq.n	8007f04 <TIM_Base_SetConfig+0x40>
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ee2:	d00f      	beq.n	8007f04 <TIM_Base_SetConfig+0x40>
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	4a3d      	ldr	r2, [pc, #244]	; (8007fdc <TIM_Base_SetConfig+0x118>)
 8007ee8:	4293      	cmp	r3, r2
 8007eea:	d00b      	beq.n	8007f04 <TIM_Base_SetConfig+0x40>
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	4a3c      	ldr	r2, [pc, #240]	; (8007fe0 <TIM_Base_SetConfig+0x11c>)
 8007ef0:	4293      	cmp	r3, r2
 8007ef2:	d007      	beq.n	8007f04 <TIM_Base_SetConfig+0x40>
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	4a3b      	ldr	r2, [pc, #236]	; (8007fe4 <TIM_Base_SetConfig+0x120>)
 8007ef8:	4293      	cmp	r3, r2
 8007efa:	d003      	beq.n	8007f04 <TIM_Base_SetConfig+0x40>
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	4a3a      	ldr	r2, [pc, #232]	; (8007fe8 <TIM_Base_SetConfig+0x124>)
 8007f00:	4293      	cmp	r3, r2
 8007f02:	d108      	bne.n	8007f16 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007f0c:	683b      	ldr	r3, [r7, #0]
 8007f0e:	685b      	ldr	r3, [r3, #4]
 8007f10:	68fa      	ldr	r2, [r7, #12]
 8007f12:	4313      	orrs	r3, r2
 8007f14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	4a2f      	ldr	r2, [pc, #188]	; (8007fd8 <TIM_Base_SetConfig+0x114>)
 8007f1a:	4293      	cmp	r3, r2
 8007f1c:	d02b      	beq.n	8007f76 <TIM_Base_SetConfig+0xb2>
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f24:	d027      	beq.n	8007f76 <TIM_Base_SetConfig+0xb2>
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	4a2c      	ldr	r2, [pc, #176]	; (8007fdc <TIM_Base_SetConfig+0x118>)
 8007f2a:	4293      	cmp	r3, r2
 8007f2c:	d023      	beq.n	8007f76 <TIM_Base_SetConfig+0xb2>
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	4a2b      	ldr	r2, [pc, #172]	; (8007fe0 <TIM_Base_SetConfig+0x11c>)
 8007f32:	4293      	cmp	r3, r2
 8007f34:	d01f      	beq.n	8007f76 <TIM_Base_SetConfig+0xb2>
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	4a2a      	ldr	r2, [pc, #168]	; (8007fe4 <TIM_Base_SetConfig+0x120>)
 8007f3a:	4293      	cmp	r3, r2
 8007f3c:	d01b      	beq.n	8007f76 <TIM_Base_SetConfig+0xb2>
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	4a29      	ldr	r2, [pc, #164]	; (8007fe8 <TIM_Base_SetConfig+0x124>)
 8007f42:	4293      	cmp	r3, r2
 8007f44:	d017      	beq.n	8007f76 <TIM_Base_SetConfig+0xb2>
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	4a28      	ldr	r2, [pc, #160]	; (8007fec <TIM_Base_SetConfig+0x128>)
 8007f4a:	4293      	cmp	r3, r2
 8007f4c:	d013      	beq.n	8007f76 <TIM_Base_SetConfig+0xb2>
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	4a27      	ldr	r2, [pc, #156]	; (8007ff0 <TIM_Base_SetConfig+0x12c>)
 8007f52:	4293      	cmp	r3, r2
 8007f54:	d00f      	beq.n	8007f76 <TIM_Base_SetConfig+0xb2>
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	4a26      	ldr	r2, [pc, #152]	; (8007ff4 <TIM_Base_SetConfig+0x130>)
 8007f5a:	4293      	cmp	r3, r2
 8007f5c:	d00b      	beq.n	8007f76 <TIM_Base_SetConfig+0xb2>
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	4a25      	ldr	r2, [pc, #148]	; (8007ff8 <TIM_Base_SetConfig+0x134>)
 8007f62:	4293      	cmp	r3, r2
 8007f64:	d007      	beq.n	8007f76 <TIM_Base_SetConfig+0xb2>
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	4a24      	ldr	r2, [pc, #144]	; (8007ffc <TIM_Base_SetConfig+0x138>)
 8007f6a:	4293      	cmp	r3, r2
 8007f6c:	d003      	beq.n	8007f76 <TIM_Base_SetConfig+0xb2>
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	4a23      	ldr	r2, [pc, #140]	; (8008000 <TIM_Base_SetConfig+0x13c>)
 8007f72:	4293      	cmp	r3, r2
 8007f74:	d108      	bne.n	8007f88 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007f7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007f7e:	683b      	ldr	r3, [r7, #0]
 8007f80:	68db      	ldr	r3, [r3, #12]
 8007f82:	68fa      	ldr	r2, [r7, #12]
 8007f84:	4313      	orrs	r3, r2
 8007f86:	60fb      	str	r3, [r7, #12]
>>>>>>> Stashed changes
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
<<<<<<< Updated upstream
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007fbe:	683b      	ldr	r3, [r7, #0]
 8007fc0:	695b      	ldr	r3, [r3, #20]
 8007fc2:	4313      	orrs	r3, r2
 8007fc4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	68fa      	ldr	r2, [r7, #12]
 8007fca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007fcc:	683b      	ldr	r3, [r7, #0]
 8007fce:	689a      	ldr	r2, [r3, #8]
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007fd4:	683b      	ldr	r3, [r7, #0]
 8007fd6:	681a      	ldr	r2, [r3, #0]
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	4a0a      	ldr	r2, [pc, #40]	; (8008008 <TIM_Base_SetConfig+0x114>)
 8007fe0:	4293      	cmp	r3, r2
 8007fe2:	d003      	beq.n	8007fec <TIM_Base_SetConfig+0xf8>
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	4a0c      	ldr	r2, [pc, #48]	; (8008018 <TIM_Base_SetConfig+0x124>)
 8007fe8:	4293      	cmp	r3, r2
 8007fea:	d103      	bne.n	8007ff4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007fec:	683b      	ldr	r3, [r7, #0]
 8007fee:	691a      	ldr	r2, [r3, #16]
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	631a      	str	r2, [r3, #48]	; 0x30
=======
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007f8e:	683b      	ldr	r3, [r7, #0]
 8007f90:	695b      	ldr	r3, [r3, #20]
 8007f92:	4313      	orrs	r3, r2
 8007f94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	68fa      	ldr	r2, [r7, #12]
 8007f9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007f9c:	683b      	ldr	r3, [r7, #0]
 8007f9e:	689a      	ldr	r2, [r3, #8]
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007fa4:	683b      	ldr	r3, [r7, #0]
 8007fa6:	681a      	ldr	r2, [r3, #0]
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	4a0a      	ldr	r2, [pc, #40]	; (8007fd8 <TIM_Base_SetConfig+0x114>)
 8007fb0:	4293      	cmp	r3, r2
 8007fb2:	d003      	beq.n	8007fbc <TIM_Base_SetConfig+0xf8>
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	4a0c      	ldr	r2, [pc, #48]	; (8007fe8 <TIM_Base_SetConfig+0x124>)
 8007fb8:	4293      	cmp	r3, r2
 8007fba:	d103      	bne.n	8007fc4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007fbc:	683b      	ldr	r3, [r7, #0]
 8007fbe:	691a      	ldr	r2, [r3, #16]
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	631a      	str	r2, [r3, #48]	; 0x30
>>>>>>> Stashed changes
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
<<<<<<< Updated upstream
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2201      	movs	r2, #1
 8007ff8:	615a      	str	r2, [r3, #20]
}
 8007ffa:	bf00      	nop
 8007ffc:	3714      	adds	r7, #20
 8007ffe:	46bd      	mov	sp, r7
 8008000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008004:	4770      	bx	lr
 8008006:	bf00      	nop
 8008008:	40010000 	.word	0x40010000
 800800c:	40000400 	.word	0x40000400
 8008010:	40000800 	.word	0x40000800
 8008014:	40000c00 	.word	0x40000c00
 8008018:	40010400 	.word	0x40010400
 800801c:	40014000 	.word	0x40014000
 8008020:	40014400 	.word	0x40014400
 8008024:	40014800 	.word	0x40014800
 8008028:	40001800 	.word	0x40001800
 800802c:	40001c00 	.word	0x40001c00
 8008030:	40002000 	.word	0x40002000

08008034 <TIM_OC1_SetConfig>:
=======
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2201      	movs	r2, #1
 8007fc8:	615a      	str	r2, [r3, #20]
}
 8007fca:	bf00      	nop
 8007fcc:	3714      	adds	r7, #20
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd4:	4770      	bx	lr
 8007fd6:	bf00      	nop
 8007fd8:	40010000 	.word	0x40010000
 8007fdc:	40000400 	.word	0x40000400
 8007fe0:	40000800 	.word	0x40000800
 8007fe4:	40000c00 	.word	0x40000c00
 8007fe8:	40010400 	.word	0x40010400
 8007fec:	40014000 	.word	0x40014000
 8007ff0:	40014400 	.word	0x40014400
 8007ff4:	40014800 	.word	0x40014800
 8007ff8:	40001800 	.word	0x40001800
 8007ffc:	40001c00 	.word	0x40001c00
 8008000:	40002000 	.word	0x40002000

08008004 <TIM_OC1_SetConfig>:
>>>>>>> Stashed changes
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
<<<<<<< Updated upstream
 8008034:	b480      	push	{r7}
 8008036:	b087      	sub	sp, #28
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
 800803c:	6039      	str	r1, [r7, #0]
=======
 8008004:	b480      	push	{r7}
 8008006:	b087      	sub	sp, #28
 8008008:	af00      	add	r7, sp, #0
 800800a:	6078      	str	r0, [r7, #4]
 800800c:	6039      	str	r1, [r7, #0]
>>>>>>> Stashed changes
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
<<<<<<< Updated upstream
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	6a1b      	ldr	r3, [r3, #32]
 8008042:	f023 0201 	bic.w	r2, r3, #1
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	6a1b      	ldr	r3, [r3, #32]
 800804e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	685b      	ldr	r3, [r3, #4]
 8008054:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	699b      	ldr	r3, [r3, #24]
 800805a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008062:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	f023 0303 	bic.w	r3, r3, #3
 800806a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800806c:	683b      	ldr	r3, [r7, #0]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	68fa      	ldr	r2, [r7, #12]
 8008072:	4313      	orrs	r3, r2
 8008074:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008076:	697b      	ldr	r3, [r7, #20]
 8008078:	f023 0302 	bic.w	r3, r3, #2
 800807c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800807e:	683b      	ldr	r3, [r7, #0]
 8008080:	689b      	ldr	r3, [r3, #8]
 8008082:	697a      	ldr	r2, [r7, #20]
 8008084:	4313      	orrs	r3, r2
 8008086:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	4a20      	ldr	r2, [pc, #128]	; (800810c <TIM_OC1_SetConfig+0xd8>)
 800808c:	4293      	cmp	r3, r2
 800808e:	d003      	beq.n	8008098 <TIM_OC1_SetConfig+0x64>
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	4a1f      	ldr	r2, [pc, #124]	; (8008110 <TIM_OC1_SetConfig+0xdc>)
 8008094:	4293      	cmp	r3, r2
 8008096:	d10c      	bne.n	80080b2 <TIM_OC1_SetConfig+0x7e>
=======
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	6a1b      	ldr	r3, [r3, #32]
 8008012:	f023 0201 	bic.w	r2, r3, #1
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	6a1b      	ldr	r3, [r3, #32]
 800801e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	685b      	ldr	r3, [r3, #4]
 8008024:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	699b      	ldr	r3, [r3, #24]
 800802a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008032:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	f023 0303 	bic.w	r3, r3, #3
 800803a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800803c:	683b      	ldr	r3, [r7, #0]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	68fa      	ldr	r2, [r7, #12]
 8008042:	4313      	orrs	r3, r2
 8008044:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008046:	697b      	ldr	r3, [r7, #20]
 8008048:	f023 0302 	bic.w	r3, r3, #2
 800804c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800804e:	683b      	ldr	r3, [r7, #0]
 8008050:	689b      	ldr	r3, [r3, #8]
 8008052:	697a      	ldr	r2, [r7, #20]
 8008054:	4313      	orrs	r3, r2
 8008056:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	4a20      	ldr	r2, [pc, #128]	; (80080dc <TIM_OC1_SetConfig+0xd8>)
 800805c:	4293      	cmp	r3, r2
 800805e:	d003      	beq.n	8008068 <TIM_OC1_SetConfig+0x64>
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	4a1f      	ldr	r2, [pc, #124]	; (80080e0 <TIM_OC1_SetConfig+0xdc>)
 8008064:	4293      	cmp	r3, r2
 8008066:	d10c      	bne.n	8008082 <TIM_OC1_SetConfig+0x7e>
>>>>>>> Stashed changes
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
<<<<<<< Updated upstream
 8008098:	697b      	ldr	r3, [r7, #20]
 800809a:	f023 0308 	bic.w	r3, r3, #8
 800809e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80080a0:	683b      	ldr	r3, [r7, #0]
 80080a2:	68db      	ldr	r3, [r3, #12]
 80080a4:	697a      	ldr	r2, [r7, #20]
 80080a6:	4313      	orrs	r3, r2
 80080a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80080aa:	697b      	ldr	r3, [r7, #20]
 80080ac:	f023 0304 	bic.w	r3, r3, #4
 80080b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	4a15      	ldr	r2, [pc, #84]	; (800810c <TIM_OC1_SetConfig+0xd8>)
 80080b6:	4293      	cmp	r3, r2
 80080b8:	d003      	beq.n	80080c2 <TIM_OC1_SetConfig+0x8e>
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	4a14      	ldr	r2, [pc, #80]	; (8008110 <TIM_OC1_SetConfig+0xdc>)
 80080be:	4293      	cmp	r3, r2
 80080c0:	d111      	bne.n	80080e6 <TIM_OC1_SetConfig+0xb2>
=======
 8008068:	697b      	ldr	r3, [r7, #20]
 800806a:	f023 0308 	bic.w	r3, r3, #8
 800806e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008070:	683b      	ldr	r3, [r7, #0]
 8008072:	68db      	ldr	r3, [r3, #12]
 8008074:	697a      	ldr	r2, [r7, #20]
 8008076:	4313      	orrs	r3, r2
 8008078:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800807a:	697b      	ldr	r3, [r7, #20]
 800807c:	f023 0304 	bic.w	r3, r3, #4
 8008080:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	4a15      	ldr	r2, [pc, #84]	; (80080dc <TIM_OC1_SetConfig+0xd8>)
 8008086:	4293      	cmp	r3, r2
 8008088:	d003      	beq.n	8008092 <TIM_OC1_SetConfig+0x8e>
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	4a14      	ldr	r2, [pc, #80]	; (80080e0 <TIM_OC1_SetConfig+0xdc>)
 800808e:	4293      	cmp	r3, r2
 8008090:	d111      	bne.n	80080b6 <TIM_OC1_SetConfig+0xb2>
>>>>>>> Stashed changes
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
<<<<<<< Updated upstream
 80080c2:	693b      	ldr	r3, [r7, #16]
 80080c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80080c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80080ca:	693b      	ldr	r3, [r7, #16]
 80080cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80080d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80080d2:	683b      	ldr	r3, [r7, #0]
 80080d4:	695b      	ldr	r3, [r3, #20]
 80080d6:	693a      	ldr	r2, [r7, #16]
 80080d8:	4313      	orrs	r3, r2
 80080da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	699b      	ldr	r3, [r3, #24]
 80080e0:	693a      	ldr	r2, [r7, #16]
 80080e2:	4313      	orrs	r3, r2
 80080e4:	613b      	str	r3, [r7, #16]
=======
 8008092:	693b      	ldr	r3, [r7, #16]
 8008094:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008098:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800809a:	693b      	ldr	r3, [r7, #16]
 800809c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80080a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80080a2:	683b      	ldr	r3, [r7, #0]
 80080a4:	695b      	ldr	r3, [r3, #20]
 80080a6:	693a      	ldr	r2, [r7, #16]
 80080a8:	4313      	orrs	r3, r2
 80080aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80080ac:	683b      	ldr	r3, [r7, #0]
 80080ae:	699b      	ldr	r3, [r3, #24]
 80080b0:	693a      	ldr	r2, [r7, #16]
 80080b2:	4313      	orrs	r3, r2
 80080b4:	613b      	str	r3, [r7, #16]
>>>>>>> Stashed changes
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
<<<<<<< Updated upstream
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	693a      	ldr	r2, [r7, #16]
 80080ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	68fa      	ldr	r2, [r7, #12]
 80080f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80080f2:	683b      	ldr	r3, [r7, #0]
 80080f4:	685a      	ldr	r2, [r3, #4]
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	697a      	ldr	r2, [r7, #20]
 80080fe:	621a      	str	r2, [r3, #32]
}
 8008100:	bf00      	nop
 8008102:	371c      	adds	r7, #28
 8008104:	46bd      	mov	sp, r7
 8008106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810a:	4770      	bx	lr
 800810c:	40010000 	.word	0x40010000
 8008110:	40010400 	.word	0x40010400

08008114 <TIM_OC2_SetConfig>:
=======
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	693a      	ldr	r2, [r7, #16]
 80080ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	68fa      	ldr	r2, [r7, #12]
 80080c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80080c2:	683b      	ldr	r3, [r7, #0]
 80080c4:	685a      	ldr	r2, [r3, #4]
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	697a      	ldr	r2, [r7, #20]
 80080ce:	621a      	str	r2, [r3, #32]
}
 80080d0:	bf00      	nop
 80080d2:	371c      	adds	r7, #28
 80080d4:	46bd      	mov	sp, r7
 80080d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080da:	4770      	bx	lr
 80080dc:	40010000 	.word	0x40010000
 80080e0:	40010400 	.word	0x40010400

080080e4 <TIM_OC2_SetConfig>:
>>>>>>> Stashed changes
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
<<<<<<< Updated upstream
 8008114:	b480      	push	{r7}
 8008116:	b087      	sub	sp, #28
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
 800811c:	6039      	str	r1, [r7, #0]
=======
 80080e4:	b480      	push	{r7}
 80080e6:	b087      	sub	sp, #28
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]
 80080ec:	6039      	str	r1, [r7, #0]
>>>>>>> Stashed changes
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
<<<<<<< Updated upstream
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	6a1b      	ldr	r3, [r3, #32]
 8008122:	f023 0210 	bic.w	r2, r3, #16
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	6a1b      	ldr	r3, [r3, #32]
 800812e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	685b      	ldr	r3, [r3, #4]
 8008134:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	699b      	ldr	r3, [r3, #24]
 800813a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008142:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800814a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800814c:	683b      	ldr	r3, [r7, #0]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	021b      	lsls	r3, r3, #8
 8008152:	68fa      	ldr	r2, [r7, #12]
 8008154:	4313      	orrs	r3, r2
 8008156:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008158:	697b      	ldr	r3, [r7, #20]
 800815a:	f023 0320 	bic.w	r3, r3, #32
 800815e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008160:	683b      	ldr	r3, [r7, #0]
 8008162:	689b      	ldr	r3, [r3, #8]
 8008164:	011b      	lsls	r3, r3, #4
 8008166:	697a      	ldr	r2, [r7, #20]
 8008168:	4313      	orrs	r3, r2
 800816a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	4a22      	ldr	r2, [pc, #136]	; (80081f8 <TIM_OC2_SetConfig+0xe4>)
 8008170:	4293      	cmp	r3, r2
 8008172:	d003      	beq.n	800817c <TIM_OC2_SetConfig+0x68>
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	4a21      	ldr	r2, [pc, #132]	; (80081fc <TIM_OC2_SetConfig+0xe8>)
 8008178:	4293      	cmp	r3, r2
 800817a:	d10d      	bne.n	8008198 <TIM_OC2_SetConfig+0x84>
=======
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	6a1b      	ldr	r3, [r3, #32]
 80080f2:	f023 0210 	bic.w	r2, r3, #16
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	6a1b      	ldr	r3, [r3, #32]
 80080fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	685b      	ldr	r3, [r3, #4]
 8008104:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	699b      	ldr	r3, [r3, #24]
 800810a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008112:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800811a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800811c:	683b      	ldr	r3, [r7, #0]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	021b      	lsls	r3, r3, #8
 8008122:	68fa      	ldr	r2, [r7, #12]
 8008124:	4313      	orrs	r3, r2
 8008126:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008128:	697b      	ldr	r3, [r7, #20]
 800812a:	f023 0320 	bic.w	r3, r3, #32
 800812e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008130:	683b      	ldr	r3, [r7, #0]
 8008132:	689b      	ldr	r3, [r3, #8]
 8008134:	011b      	lsls	r3, r3, #4
 8008136:	697a      	ldr	r2, [r7, #20]
 8008138:	4313      	orrs	r3, r2
 800813a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	4a22      	ldr	r2, [pc, #136]	; (80081c8 <TIM_OC2_SetConfig+0xe4>)
 8008140:	4293      	cmp	r3, r2
 8008142:	d003      	beq.n	800814c <TIM_OC2_SetConfig+0x68>
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	4a21      	ldr	r2, [pc, #132]	; (80081cc <TIM_OC2_SetConfig+0xe8>)
 8008148:	4293      	cmp	r3, r2
 800814a:	d10d      	bne.n	8008168 <TIM_OC2_SetConfig+0x84>
>>>>>>> Stashed changes
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
<<<<<<< Updated upstream
 800817c:	697b      	ldr	r3, [r7, #20]
 800817e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008182:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008184:	683b      	ldr	r3, [r7, #0]
 8008186:	68db      	ldr	r3, [r3, #12]
 8008188:	011b      	lsls	r3, r3, #4
 800818a:	697a      	ldr	r2, [r7, #20]
 800818c:	4313      	orrs	r3, r2
 800818e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008190:	697b      	ldr	r3, [r7, #20]
 8008192:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008196:	617b      	str	r3, [r7, #20]
=======
 800814c:	697b      	ldr	r3, [r7, #20]
 800814e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008152:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008154:	683b      	ldr	r3, [r7, #0]
 8008156:	68db      	ldr	r3, [r3, #12]
 8008158:	011b      	lsls	r3, r3, #4
 800815a:	697a      	ldr	r2, [r7, #20]
 800815c:	4313      	orrs	r3, r2
 800815e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008160:	697b      	ldr	r3, [r7, #20]
 8008162:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008166:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
<<<<<<< Updated upstream
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	4a17      	ldr	r2, [pc, #92]	; (80081f8 <TIM_OC2_SetConfig+0xe4>)
 800819c:	4293      	cmp	r3, r2
 800819e:	d003      	beq.n	80081a8 <TIM_OC2_SetConfig+0x94>
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	4a16      	ldr	r2, [pc, #88]	; (80081fc <TIM_OC2_SetConfig+0xe8>)
 80081a4:	4293      	cmp	r3, r2
 80081a6:	d113      	bne.n	80081d0 <TIM_OC2_SetConfig+0xbc>
=======
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	4a17      	ldr	r2, [pc, #92]	; (80081c8 <TIM_OC2_SetConfig+0xe4>)
 800816c:	4293      	cmp	r3, r2
 800816e:	d003      	beq.n	8008178 <TIM_OC2_SetConfig+0x94>
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	4a16      	ldr	r2, [pc, #88]	; (80081cc <TIM_OC2_SetConfig+0xe8>)
 8008174:	4293      	cmp	r3, r2
 8008176:	d113      	bne.n	80081a0 <TIM_OC2_SetConfig+0xbc>
>>>>>>> Stashed changes
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
<<<<<<< Updated upstream
 80081a8:	693b      	ldr	r3, [r7, #16]
 80081aa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80081ae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80081b0:	693b      	ldr	r3, [r7, #16]
 80081b2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80081b6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80081b8:	683b      	ldr	r3, [r7, #0]
 80081ba:	695b      	ldr	r3, [r3, #20]
 80081bc:	009b      	lsls	r3, r3, #2
 80081be:	693a      	ldr	r2, [r7, #16]
 80081c0:	4313      	orrs	r3, r2
 80081c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80081c4:	683b      	ldr	r3, [r7, #0]
 80081c6:	699b      	ldr	r3, [r3, #24]
 80081c8:	009b      	lsls	r3, r3, #2
 80081ca:	693a      	ldr	r2, [r7, #16]
 80081cc:	4313      	orrs	r3, r2
 80081ce:	613b      	str	r3, [r7, #16]
=======
 8008178:	693b      	ldr	r3, [r7, #16]
 800817a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800817e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008180:	693b      	ldr	r3, [r7, #16]
 8008182:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008186:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008188:	683b      	ldr	r3, [r7, #0]
 800818a:	695b      	ldr	r3, [r3, #20]
 800818c:	009b      	lsls	r3, r3, #2
 800818e:	693a      	ldr	r2, [r7, #16]
 8008190:	4313      	orrs	r3, r2
 8008192:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008194:	683b      	ldr	r3, [r7, #0]
 8008196:	699b      	ldr	r3, [r3, #24]
 8008198:	009b      	lsls	r3, r3, #2
 800819a:	693a      	ldr	r2, [r7, #16]
 800819c:	4313      	orrs	r3, r2
 800819e:	613b      	str	r3, [r7, #16]
>>>>>>> Stashed changes
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
<<<<<<< Updated upstream
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	693a      	ldr	r2, [r7, #16]
 80081d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	68fa      	ldr	r2, [r7, #12]
 80081da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80081dc:	683b      	ldr	r3, [r7, #0]
 80081de:	685a      	ldr	r2, [r3, #4]
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	697a      	ldr	r2, [r7, #20]
 80081e8:	621a      	str	r2, [r3, #32]
}
 80081ea:	bf00      	nop
 80081ec:	371c      	adds	r7, #28
 80081ee:	46bd      	mov	sp, r7
 80081f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f4:	4770      	bx	lr
 80081f6:	bf00      	nop
 80081f8:	40010000 	.word	0x40010000
 80081fc:	40010400 	.word	0x40010400

08008200 <TIM_OC3_SetConfig>:
=======
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	693a      	ldr	r2, [r7, #16]
 80081a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	68fa      	ldr	r2, [r7, #12]
 80081aa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80081ac:	683b      	ldr	r3, [r7, #0]
 80081ae:	685a      	ldr	r2, [r3, #4]
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	697a      	ldr	r2, [r7, #20]
 80081b8:	621a      	str	r2, [r3, #32]
}
 80081ba:	bf00      	nop
 80081bc:	371c      	adds	r7, #28
 80081be:	46bd      	mov	sp, r7
 80081c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c4:	4770      	bx	lr
 80081c6:	bf00      	nop
 80081c8:	40010000 	.word	0x40010000
 80081cc:	40010400 	.word	0x40010400

080081d0 <TIM_OC3_SetConfig>:
>>>>>>> Stashed changes
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
<<<<<<< Updated upstream
 8008200:	b480      	push	{r7}
 8008202:	b087      	sub	sp, #28
 8008204:	af00      	add	r7, sp, #0
 8008206:	6078      	str	r0, [r7, #4]
 8008208:	6039      	str	r1, [r7, #0]
=======
 80081d0:	b480      	push	{r7}
 80081d2:	b087      	sub	sp, #28
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
 80081d8:	6039      	str	r1, [r7, #0]
>>>>>>> Stashed changes
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
<<<<<<< Updated upstream
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	6a1b      	ldr	r3, [r3, #32]
 800820e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	6a1b      	ldr	r3, [r3, #32]
 800821a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	685b      	ldr	r3, [r3, #4]
 8008220:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	69db      	ldr	r3, [r3, #28]
 8008226:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800822e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	f023 0303 	bic.w	r3, r3, #3
 8008236:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	68fa      	ldr	r2, [r7, #12]
 800823e:	4313      	orrs	r3, r2
 8008240:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008242:	697b      	ldr	r3, [r7, #20]
 8008244:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008248:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800824a:	683b      	ldr	r3, [r7, #0]
 800824c:	689b      	ldr	r3, [r3, #8]
 800824e:	021b      	lsls	r3, r3, #8
 8008250:	697a      	ldr	r2, [r7, #20]
 8008252:	4313      	orrs	r3, r2
 8008254:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	4a21      	ldr	r2, [pc, #132]	; (80082e0 <TIM_OC3_SetConfig+0xe0>)
 800825a:	4293      	cmp	r3, r2
 800825c:	d003      	beq.n	8008266 <TIM_OC3_SetConfig+0x66>
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	4a20      	ldr	r2, [pc, #128]	; (80082e4 <TIM_OC3_SetConfig+0xe4>)
 8008262:	4293      	cmp	r3, r2
 8008264:	d10d      	bne.n	8008282 <TIM_OC3_SetConfig+0x82>
=======
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	6a1b      	ldr	r3, [r3, #32]
 80081de:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	6a1b      	ldr	r3, [r3, #32]
 80081ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	685b      	ldr	r3, [r3, #4]
 80081f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	69db      	ldr	r3, [r3, #28]
 80081f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	f023 0303 	bic.w	r3, r3, #3
 8008206:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008208:	683b      	ldr	r3, [r7, #0]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	68fa      	ldr	r2, [r7, #12]
 800820e:	4313      	orrs	r3, r2
 8008210:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008212:	697b      	ldr	r3, [r7, #20]
 8008214:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008218:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800821a:	683b      	ldr	r3, [r7, #0]
 800821c:	689b      	ldr	r3, [r3, #8]
 800821e:	021b      	lsls	r3, r3, #8
 8008220:	697a      	ldr	r2, [r7, #20]
 8008222:	4313      	orrs	r3, r2
 8008224:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	4a21      	ldr	r2, [pc, #132]	; (80082b0 <TIM_OC3_SetConfig+0xe0>)
 800822a:	4293      	cmp	r3, r2
 800822c:	d003      	beq.n	8008236 <TIM_OC3_SetConfig+0x66>
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	4a20      	ldr	r2, [pc, #128]	; (80082b4 <TIM_OC3_SetConfig+0xe4>)
 8008232:	4293      	cmp	r3, r2
 8008234:	d10d      	bne.n	8008252 <TIM_OC3_SetConfig+0x82>
>>>>>>> Stashed changes
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
<<<<<<< Updated upstream
 8008266:	697b      	ldr	r3, [r7, #20]
 8008268:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800826c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800826e:	683b      	ldr	r3, [r7, #0]
 8008270:	68db      	ldr	r3, [r3, #12]
 8008272:	021b      	lsls	r3, r3, #8
 8008274:	697a      	ldr	r2, [r7, #20]
 8008276:	4313      	orrs	r3, r2
 8008278:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800827a:	697b      	ldr	r3, [r7, #20]
 800827c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008280:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	4a16      	ldr	r2, [pc, #88]	; (80082e0 <TIM_OC3_SetConfig+0xe0>)
 8008286:	4293      	cmp	r3, r2
 8008288:	d003      	beq.n	8008292 <TIM_OC3_SetConfig+0x92>
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	4a15      	ldr	r2, [pc, #84]	; (80082e4 <TIM_OC3_SetConfig+0xe4>)
 800828e:	4293      	cmp	r3, r2
 8008290:	d113      	bne.n	80082ba <TIM_OC3_SetConfig+0xba>
=======
 8008236:	697b      	ldr	r3, [r7, #20]
 8008238:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800823c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800823e:	683b      	ldr	r3, [r7, #0]
 8008240:	68db      	ldr	r3, [r3, #12]
 8008242:	021b      	lsls	r3, r3, #8
 8008244:	697a      	ldr	r2, [r7, #20]
 8008246:	4313      	orrs	r3, r2
 8008248:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800824a:	697b      	ldr	r3, [r7, #20]
 800824c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008250:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	4a16      	ldr	r2, [pc, #88]	; (80082b0 <TIM_OC3_SetConfig+0xe0>)
 8008256:	4293      	cmp	r3, r2
 8008258:	d003      	beq.n	8008262 <TIM_OC3_SetConfig+0x92>
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	4a15      	ldr	r2, [pc, #84]	; (80082b4 <TIM_OC3_SetConfig+0xe4>)
 800825e:	4293      	cmp	r3, r2
 8008260:	d113      	bne.n	800828a <TIM_OC3_SetConfig+0xba>
>>>>>>> Stashed changes
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
<<<<<<< Updated upstream
 8008292:	693b      	ldr	r3, [r7, #16]
 8008294:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008298:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800829a:	693b      	ldr	r3, [r7, #16]
 800829c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80082a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	695b      	ldr	r3, [r3, #20]
 80082a6:	011b      	lsls	r3, r3, #4
 80082a8:	693a      	ldr	r2, [r7, #16]
 80082aa:	4313      	orrs	r3, r2
 80082ac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80082ae:	683b      	ldr	r3, [r7, #0]
 80082b0:	699b      	ldr	r3, [r3, #24]
 80082b2:	011b      	lsls	r3, r3, #4
 80082b4:	693a      	ldr	r2, [r7, #16]
 80082b6:	4313      	orrs	r3, r2
 80082b8:	613b      	str	r3, [r7, #16]
=======
 8008262:	693b      	ldr	r3, [r7, #16]
 8008264:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008268:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800826a:	693b      	ldr	r3, [r7, #16]
 800826c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008270:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008272:	683b      	ldr	r3, [r7, #0]
 8008274:	695b      	ldr	r3, [r3, #20]
 8008276:	011b      	lsls	r3, r3, #4
 8008278:	693a      	ldr	r2, [r7, #16]
 800827a:	4313      	orrs	r3, r2
 800827c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800827e:	683b      	ldr	r3, [r7, #0]
 8008280:	699b      	ldr	r3, [r3, #24]
 8008282:	011b      	lsls	r3, r3, #4
 8008284:	693a      	ldr	r2, [r7, #16]
 8008286:	4313      	orrs	r3, r2
 8008288:	613b      	str	r3, [r7, #16]
>>>>>>> Stashed changes
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
<<<<<<< Updated upstream
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	693a      	ldr	r2, [r7, #16]
 80082be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	68fa      	ldr	r2, [r7, #12]
 80082c4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80082c6:	683b      	ldr	r3, [r7, #0]
 80082c8:	685a      	ldr	r2, [r3, #4]
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	697a      	ldr	r2, [r7, #20]
 80082d2:	621a      	str	r2, [r3, #32]
}
 80082d4:	bf00      	nop
 80082d6:	371c      	adds	r7, #28
 80082d8:	46bd      	mov	sp, r7
 80082da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082de:	4770      	bx	lr
 80082e0:	40010000 	.word	0x40010000
 80082e4:	40010400 	.word	0x40010400

080082e8 <TIM_OC4_SetConfig>:
=======
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	693a      	ldr	r2, [r7, #16]
 800828e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	68fa      	ldr	r2, [r7, #12]
 8008294:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008296:	683b      	ldr	r3, [r7, #0]
 8008298:	685a      	ldr	r2, [r3, #4]
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	697a      	ldr	r2, [r7, #20]
 80082a2:	621a      	str	r2, [r3, #32]
}
 80082a4:	bf00      	nop
 80082a6:	371c      	adds	r7, #28
 80082a8:	46bd      	mov	sp, r7
 80082aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ae:	4770      	bx	lr
 80082b0:	40010000 	.word	0x40010000
 80082b4:	40010400 	.word	0x40010400

080082b8 <TIM_OC4_SetConfig>:
>>>>>>> Stashed changes
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
<<<<<<< Updated upstream
 80082e8:	b480      	push	{r7}
 80082ea:	b087      	sub	sp, #28
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
 80082f0:	6039      	str	r1, [r7, #0]
=======
 80082b8:	b480      	push	{r7}
 80082ba:	b087      	sub	sp, #28
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
 80082c0:	6039      	str	r1, [r7, #0]
>>>>>>> Stashed changes
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
<<<<<<< Updated upstream
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	6a1b      	ldr	r3, [r3, #32]
 80082f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	6a1b      	ldr	r3, [r3, #32]
 8008302:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	685b      	ldr	r3, [r3, #4]
 8008308:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	69db      	ldr	r3, [r3, #28]
 800830e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008316:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800831e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008320:	683b      	ldr	r3, [r7, #0]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	021b      	lsls	r3, r3, #8
 8008326:	68fa      	ldr	r2, [r7, #12]
 8008328:	4313      	orrs	r3, r2
 800832a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800832c:	693b      	ldr	r3, [r7, #16]
 800832e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008332:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008334:	683b      	ldr	r3, [r7, #0]
 8008336:	689b      	ldr	r3, [r3, #8]
 8008338:	031b      	lsls	r3, r3, #12
 800833a:	693a      	ldr	r2, [r7, #16]
 800833c:	4313      	orrs	r3, r2
 800833e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	4a12      	ldr	r2, [pc, #72]	; (800838c <TIM_OC4_SetConfig+0xa4>)
 8008344:	4293      	cmp	r3, r2
 8008346:	d003      	beq.n	8008350 <TIM_OC4_SetConfig+0x68>
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	4a11      	ldr	r2, [pc, #68]	; (8008390 <TIM_OC4_SetConfig+0xa8>)
 800834c:	4293      	cmp	r3, r2
 800834e:	d109      	bne.n	8008364 <TIM_OC4_SetConfig+0x7c>
=======
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	6a1b      	ldr	r3, [r3, #32]
 80082c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	6a1b      	ldr	r3, [r3, #32]
 80082d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	685b      	ldr	r3, [r3, #4]
 80082d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	69db      	ldr	r3, [r3, #28]
 80082de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80082e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80082ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80082f0:	683b      	ldr	r3, [r7, #0]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	021b      	lsls	r3, r3, #8
 80082f6:	68fa      	ldr	r2, [r7, #12]
 80082f8:	4313      	orrs	r3, r2
 80082fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80082fc:	693b      	ldr	r3, [r7, #16]
 80082fe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008302:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008304:	683b      	ldr	r3, [r7, #0]
 8008306:	689b      	ldr	r3, [r3, #8]
 8008308:	031b      	lsls	r3, r3, #12
 800830a:	693a      	ldr	r2, [r7, #16]
 800830c:	4313      	orrs	r3, r2
 800830e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	4a12      	ldr	r2, [pc, #72]	; (800835c <TIM_OC4_SetConfig+0xa4>)
 8008314:	4293      	cmp	r3, r2
 8008316:	d003      	beq.n	8008320 <TIM_OC4_SetConfig+0x68>
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	4a11      	ldr	r2, [pc, #68]	; (8008360 <TIM_OC4_SetConfig+0xa8>)
 800831c:	4293      	cmp	r3, r2
 800831e:	d109      	bne.n	8008334 <TIM_OC4_SetConfig+0x7c>
>>>>>>> Stashed changes
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
<<<<<<< Updated upstream
 8008350:	697b      	ldr	r3, [r7, #20]
 8008352:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008356:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008358:	683b      	ldr	r3, [r7, #0]
 800835a:	695b      	ldr	r3, [r3, #20]
 800835c:	019b      	lsls	r3, r3, #6
 800835e:	697a      	ldr	r2, [r7, #20]
 8008360:	4313      	orrs	r3, r2
 8008362:	617b      	str	r3, [r7, #20]
=======
 8008320:	697b      	ldr	r3, [r7, #20]
 8008322:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008326:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008328:	683b      	ldr	r3, [r7, #0]
 800832a:	695b      	ldr	r3, [r3, #20]
 800832c:	019b      	lsls	r3, r3, #6
 800832e:	697a      	ldr	r2, [r7, #20]
 8008330:	4313      	orrs	r3, r2
 8008332:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
<<<<<<< Updated upstream
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	697a      	ldr	r2, [r7, #20]
 8008368:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	68fa      	ldr	r2, [r7, #12]
 800836e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008370:	683b      	ldr	r3, [r7, #0]
 8008372:	685a      	ldr	r2, [r3, #4]
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	693a      	ldr	r2, [r7, #16]
 800837c:	621a      	str	r2, [r3, #32]
}
 800837e:	bf00      	nop
 8008380:	371c      	adds	r7, #28
 8008382:	46bd      	mov	sp, r7
 8008384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008388:	4770      	bx	lr
 800838a:	bf00      	nop
 800838c:	40010000 	.word	0x40010000
 8008390:	40010400 	.word	0x40010400

08008394 <TIM_TI1_ConfigInputStage>:
=======
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	697a      	ldr	r2, [r7, #20]
 8008338:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	68fa      	ldr	r2, [r7, #12]
 800833e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008340:	683b      	ldr	r3, [r7, #0]
 8008342:	685a      	ldr	r2, [r3, #4]
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	693a      	ldr	r2, [r7, #16]
 800834c:	621a      	str	r2, [r3, #32]
}
 800834e:	bf00      	nop
 8008350:	371c      	adds	r7, #28
 8008352:	46bd      	mov	sp, r7
 8008354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008358:	4770      	bx	lr
 800835a:	bf00      	nop
 800835c:	40010000 	.word	0x40010000
 8008360:	40010400 	.word	0x40010400

08008364 <TIM_TI1_ConfigInputStage>:
>>>>>>> Stashed changes
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
<<<<<<< Updated upstream
 8008394:	b480      	push	{r7}
 8008396:	b087      	sub	sp, #28
 8008398:	af00      	add	r7, sp, #0
 800839a:	60f8      	str	r0, [r7, #12]
 800839c:	60b9      	str	r1, [r7, #8]
 800839e:	607a      	str	r2, [r7, #4]
=======
 8008364:	b480      	push	{r7}
 8008366:	b087      	sub	sp, #28
 8008368:	af00      	add	r7, sp, #0
 800836a:	60f8      	str	r0, [r7, #12]
 800836c:	60b9      	str	r1, [r7, #8]
 800836e:	607a      	str	r2, [r7, #4]
>>>>>>> Stashed changes
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
<<<<<<< Updated upstream
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	6a1b      	ldr	r3, [r3, #32]
 80083a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	6a1b      	ldr	r3, [r3, #32]
 80083aa:	f023 0201 	bic.w	r2, r3, #1
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	699b      	ldr	r3, [r3, #24]
 80083b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80083b8:	693b      	ldr	r3, [r7, #16]
 80083ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80083be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	011b      	lsls	r3, r3, #4
 80083c4:	693a      	ldr	r2, [r7, #16]
 80083c6:	4313      	orrs	r3, r2
 80083c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80083ca:	697b      	ldr	r3, [r7, #20]
 80083cc:	f023 030a 	bic.w	r3, r3, #10
 80083d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80083d2:	697a      	ldr	r2, [r7, #20]
 80083d4:	68bb      	ldr	r3, [r7, #8]
 80083d6:	4313      	orrs	r3, r2
 80083d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	693a      	ldr	r2, [r7, #16]
 80083de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	697a      	ldr	r2, [r7, #20]
 80083e4:	621a      	str	r2, [r3, #32]
}
 80083e6:	bf00      	nop
 80083e8:	371c      	adds	r7, #28
 80083ea:	46bd      	mov	sp, r7
 80083ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f0:	4770      	bx	lr

080083f2 <TIM_TI2_ConfigInputStage>:
=======
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	6a1b      	ldr	r3, [r3, #32]
 8008374:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	6a1b      	ldr	r3, [r3, #32]
 800837a:	f023 0201 	bic.w	r2, r3, #1
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	699b      	ldr	r3, [r3, #24]
 8008386:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008388:	693b      	ldr	r3, [r7, #16]
 800838a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800838e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	011b      	lsls	r3, r3, #4
 8008394:	693a      	ldr	r2, [r7, #16]
 8008396:	4313      	orrs	r3, r2
 8008398:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800839a:	697b      	ldr	r3, [r7, #20]
 800839c:	f023 030a 	bic.w	r3, r3, #10
 80083a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80083a2:	697a      	ldr	r2, [r7, #20]
 80083a4:	68bb      	ldr	r3, [r7, #8]
 80083a6:	4313      	orrs	r3, r2
 80083a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	693a      	ldr	r2, [r7, #16]
 80083ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	697a      	ldr	r2, [r7, #20]
 80083b4:	621a      	str	r2, [r3, #32]
}
 80083b6:	bf00      	nop
 80083b8:	371c      	adds	r7, #28
 80083ba:	46bd      	mov	sp, r7
 80083bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c0:	4770      	bx	lr

080083c2 <TIM_TI2_ConfigInputStage>:
>>>>>>> Stashed changes
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
<<<<<<< Updated upstream
 80083f2:	b480      	push	{r7}
 80083f4:	b087      	sub	sp, #28
 80083f6:	af00      	add	r7, sp, #0
 80083f8:	60f8      	str	r0, [r7, #12]
 80083fa:	60b9      	str	r1, [r7, #8]
 80083fc:	607a      	str	r2, [r7, #4]
=======
 80083c2:	b480      	push	{r7}
 80083c4:	b087      	sub	sp, #28
 80083c6:	af00      	add	r7, sp, #0
 80083c8:	60f8      	str	r0, [r7, #12]
 80083ca:	60b9      	str	r1, [r7, #8]
 80083cc:	607a      	str	r2, [r7, #4]
>>>>>>> Stashed changes
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
<<<<<<< Updated upstream
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	6a1b      	ldr	r3, [r3, #32]
 8008402:	f023 0210 	bic.w	r2, r3, #16
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	699b      	ldr	r3, [r3, #24]
 800840e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	6a1b      	ldr	r3, [r3, #32]
 8008414:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008416:	697b      	ldr	r3, [r7, #20]
 8008418:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800841c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	031b      	lsls	r3, r3, #12
 8008422:	697a      	ldr	r2, [r7, #20]
 8008424:	4313      	orrs	r3, r2
 8008426:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008428:	693b      	ldr	r3, [r7, #16]
 800842a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800842e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008430:	68bb      	ldr	r3, [r7, #8]
 8008432:	011b      	lsls	r3, r3, #4
 8008434:	693a      	ldr	r2, [r7, #16]
 8008436:	4313      	orrs	r3, r2
 8008438:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	697a      	ldr	r2, [r7, #20]
 800843e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	693a      	ldr	r2, [r7, #16]
 8008444:	621a      	str	r2, [r3, #32]
}
 8008446:	bf00      	nop
 8008448:	371c      	adds	r7, #28
 800844a:	46bd      	mov	sp, r7
 800844c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008450:	4770      	bx	lr

08008452 <TIM_ITRx_SetConfig>:
=======
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	6a1b      	ldr	r3, [r3, #32]
 80083d2:	f023 0210 	bic.w	r2, r3, #16
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	699b      	ldr	r3, [r3, #24]
 80083de:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	6a1b      	ldr	r3, [r3, #32]
 80083e4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80083e6:	697b      	ldr	r3, [r7, #20]
 80083e8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80083ec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	031b      	lsls	r3, r3, #12
 80083f2:	697a      	ldr	r2, [r7, #20]
 80083f4:	4313      	orrs	r3, r2
 80083f6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80083f8:	693b      	ldr	r3, [r7, #16]
 80083fa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80083fe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008400:	68bb      	ldr	r3, [r7, #8]
 8008402:	011b      	lsls	r3, r3, #4
 8008404:	693a      	ldr	r2, [r7, #16]
 8008406:	4313      	orrs	r3, r2
 8008408:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	697a      	ldr	r2, [r7, #20]
 800840e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	693a      	ldr	r2, [r7, #16]
 8008414:	621a      	str	r2, [r3, #32]
}
 8008416:	bf00      	nop
 8008418:	371c      	adds	r7, #28
 800841a:	46bd      	mov	sp, r7
 800841c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008420:	4770      	bx	lr

08008422 <TIM_ITRx_SetConfig>:
>>>>>>> Stashed changes
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
<<<<<<< Updated upstream
 8008452:	b480      	push	{r7}
 8008454:	b085      	sub	sp, #20
 8008456:	af00      	add	r7, sp, #0
 8008458:	6078      	str	r0, [r7, #4]
 800845a:	6039      	str	r1, [r7, #0]
=======
 8008422:	b480      	push	{r7}
 8008424:	b085      	sub	sp, #20
 8008426:	af00      	add	r7, sp, #0
 8008428:	6078      	str	r0, [r7, #4]
 800842a:	6039      	str	r1, [r7, #0]
>>>>>>> Stashed changes
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
<<<<<<< Updated upstream
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	689b      	ldr	r3, [r3, #8]
 8008460:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008468:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800846a:	683a      	ldr	r2, [r7, #0]
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	4313      	orrs	r3, r2
 8008470:	f043 0307 	orr.w	r3, r3, #7
 8008474:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	68fa      	ldr	r2, [r7, #12]
 800847a:	609a      	str	r2, [r3, #8]
}
 800847c:	bf00      	nop
 800847e:	3714      	adds	r7, #20
 8008480:	46bd      	mov	sp, r7
 8008482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008486:	4770      	bx	lr

08008488 <TIM_ETR_SetConfig>:
=======
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	689b      	ldr	r3, [r3, #8]
 8008430:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008438:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800843a:	683a      	ldr	r2, [r7, #0]
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	4313      	orrs	r3, r2
 8008440:	f043 0307 	orr.w	r3, r3, #7
 8008444:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	68fa      	ldr	r2, [r7, #12]
 800844a:	609a      	str	r2, [r3, #8]
}
 800844c:	bf00      	nop
 800844e:	3714      	adds	r7, #20
 8008450:	46bd      	mov	sp, r7
 8008452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008456:	4770      	bx	lr

08008458 <TIM_ETR_SetConfig>:
>>>>>>> Stashed changes
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
<<<<<<< Updated upstream
 8008488:	b480      	push	{r7}
 800848a:	b087      	sub	sp, #28
 800848c:	af00      	add	r7, sp, #0
 800848e:	60f8      	str	r0, [r7, #12]
 8008490:	60b9      	str	r1, [r7, #8]
 8008492:	607a      	str	r2, [r7, #4]
 8008494:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	689b      	ldr	r3, [r3, #8]
 800849a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800849c:	697b      	ldr	r3, [r7, #20]
 800849e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80084a2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80084a4:	683b      	ldr	r3, [r7, #0]
 80084a6:	021a      	lsls	r2, r3, #8
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	431a      	orrs	r2, r3
 80084ac:	68bb      	ldr	r3, [r7, #8]
 80084ae:	4313      	orrs	r3, r2
 80084b0:	697a      	ldr	r2, [r7, #20]
 80084b2:	4313      	orrs	r3, r2
 80084b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	697a      	ldr	r2, [r7, #20]
 80084ba:	609a      	str	r2, [r3, #8]
}
 80084bc:	bf00      	nop
 80084be:	371c      	adds	r7, #28
 80084c0:	46bd      	mov	sp, r7
 80084c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c6:	4770      	bx	lr

080084c8 <HAL_TIMEx_MasterConfigSynchronization>:
=======
 8008458:	b480      	push	{r7}
 800845a:	b087      	sub	sp, #28
 800845c:	af00      	add	r7, sp, #0
 800845e:	60f8      	str	r0, [r7, #12]
 8008460:	60b9      	str	r1, [r7, #8]
 8008462:	607a      	str	r2, [r7, #4]
 8008464:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	689b      	ldr	r3, [r3, #8]
 800846a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800846c:	697b      	ldr	r3, [r7, #20]
 800846e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008472:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008474:	683b      	ldr	r3, [r7, #0]
 8008476:	021a      	lsls	r2, r3, #8
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	431a      	orrs	r2, r3
 800847c:	68bb      	ldr	r3, [r7, #8]
 800847e:	4313      	orrs	r3, r2
 8008480:	697a      	ldr	r2, [r7, #20]
 8008482:	4313      	orrs	r3, r2
 8008484:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	697a      	ldr	r2, [r7, #20]
 800848a:	609a      	str	r2, [r3, #8]
}
 800848c:	bf00      	nop
 800848e:	371c      	adds	r7, #28
 8008490:	46bd      	mov	sp, r7
 8008492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008496:	4770      	bx	lr

08008498 <HAL_TIMEx_MasterConfigSynchronization>:
>>>>>>> Stashed changes
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
<<<<<<< Updated upstream
 80084c8:	b480      	push	{r7}
 80084ca:	b085      	sub	sp, #20
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]
 80084d0:	6039      	str	r1, [r7, #0]
=======
 8008498:	b480      	push	{r7}
 800849a:	b085      	sub	sp, #20
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]
 80084a0:	6039      	str	r1, [r7, #0]
>>>>>>> Stashed changes
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
<<<<<<< Updated upstream
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80084d8:	2b01      	cmp	r3, #1
 80084da:	d101      	bne.n	80084e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80084dc:	2302      	movs	r3, #2
 80084de:	e05a      	b.n	8008596 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	2201      	movs	r2, #1
 80084e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	2202      	movs	r2, #2
 80084ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	685b      	ldr	r3, [r3, #4]
 80084f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	689b      	ldr	r3, [r3, #8]
 80084fe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008506:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008508:	683b      	ldr	r3, [r7, #0]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	68fa      	ldr	r2, [r7, #12]
 800850e:	4313      	orrs	r3, r2
 8008510:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	68fa      	ldr	r2, [r7, #12]
 8008518:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	4a21      	ldr	r2, [pc, #132]	; (80085a4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008520:	4293      	cmp	r3, r2
 8008522:	d022      	beq.n	800856a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800852c:	d01d      	beq.n	800856a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	4a1d      	ldr	r2, [pc, #116]	; (80085a8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008534:	4293      	cmp	r3, r2
 8008536:	d018      	beq.n	800856a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	4a1b      	ldr	r2, [pc, #108]	; (80085ac <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800853e:	4293      	cmp	r3, r2
 8008540:	d013      	beq.n	800856a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	4a1a      	ldr	r2, [pc, #104]	; (80085b0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008548:	4293      	cmp	r3, r2
 800854a:	d00e      	beq.n	800856a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	4a18      	ldr	r2, [pc, #96]	; (80085b4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008552:	4293      	cmp	r3, r2
 8008554:	d009      	beq.n	800856a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	4a17      	ldr	r2, [pc, #92]	; (80085b8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800855c:	4293      	cmp	r3, r2
 800855e:	d004      	beq.n	800856a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	4a15      	ldr	r2, [pc, #84]	; (80085bc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008566:	4293      	cmp	r3, r2
 8008568:	d10c      	bne.n	8008584 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800856a:	68bb      	ldr	r3, [r7, #8]
 800856c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008570:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008572:	683b      	ldr	r3, [r7, #0]
 8008574:	685b      	ldr	r3, [r3, #4]
 8008576:	68ba      	ldr	r2, [r7, #8]
 8008578:	4313      	orrs	r3, r2
 800857a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	68ba      	ldr	r2, [r7, #8]
 8008582:	609a      	str	r2, [r3, #8]
=======
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80084a8:	2b01      	cmp	r3, #1
 80084aa:	d101      	bne.n	80084b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80084ac:	2302      	movs	r3, #2
 80084ae:	e05a      	b.n	8008566 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	2201      	movs	r2, #1
 80084b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	2202      	movs	r2, #2
 80084bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	685b      	ldr	r3, [r3, #4]
 80084c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	689b      	ldr	r3, [r3, #8]
 80084ce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80084d8:	683b      	ldr	r3, [r7, #0]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	68fa      	ldr	r2, [r7, #12]
 80084de:	4313      	orrs	r3, r2
 80084e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	68fa      	ldr	r2, [r7, #12]
 80084e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	4a21      	ldr	r2, [pc, #132]	; (8008574 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80084f0:	4293      	cmp	r3, r2
 80084f2:	d022      	beq.n	800853a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80084fc:	d01d      	beq.n	800853a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	4a1d      	ldr	r2, [pc, #116]	; (8008578 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008504:	4293      	cmp	r3, r2
 8008506:	d018      	beq.n	800853a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	4a1b      	ldr	r2, [pc, #108]	; (800857c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800850e:	4293      	cmp	r3, r2
 8008510:	d013      	beq.n	800853a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	4a1a      	ldr	r2, [pc, #104]	; (8008580 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008518:	4293      	cmp	r3, r2
 800851a:	d00e      	beq.n	800853a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	4a18      	ldr	r2, [pc, #96]	; (8008584 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008522:	4293      	cmp	r3, r2
 8008524:	d009      	beq.n	800853a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	4a17      	ldr	r2, [pc, #92]	; (8008588 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800852c:	4293      	cmp	r3, r2
 800852e:	d004      	beq.n	800853a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	4a15      	ldr	r2, [pc, #84]	; (800858c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008536:	4293      	cmp	r3, r2
 8008538:	d10c      	bne.n	8008554 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800853a:	68bb      	ldr	r3, [r7, #8]
 800853c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008540:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008542:	683b      	ldr	r3, [r7, #0]
 8008544:	685b      	ldr	r3, [r3, #4]
 8008546:	68ba      	ldr	r2, [r7, #8]
 8008548:	4313      	orrs	r3, r2
 800854a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	68ba      	ldr	r2, [r7, #8]
 8008552:	609a      	str	r2, [r3, #8]
>>>>>>> Stashed changes
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
<<<<<<< Updated upstream
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	2201      	movs	r2, #1
 8008588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	2200      	movs	r2, #0
 8008590:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008594:	2300      	movs	r3, #0
}
 8008596:	4618      	mov	r0, r3
 8008598:	3714      	adds	r7, #20
 800859a:	46bd      	mov	sp, r7
 800859c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a0:	4770      	bx	lr
 80085a2:	bf00      	nop
 80085a4:	40010000 	.word	0x40010000
 80085a8:	40000400 	.word	0x40000400
 80085ac:	40000800 	.word	0x40000800
 80085b0:	40000c00 	.word	0x40000c00
 80085b4:	40010400 	.word	0x40010400
 80085b8:	40014000 	.word	0x40014000
 80085bc:	40001800 	.word	0x40001800

080085c0 <HAL_TIMEx_CommutCallback>:
=======
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	2201      	movs	r2, #1
 8008558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	2200      	movs	r2, #0
 8008560:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008564:	2300      	movs	r3, #0
}
 8008566:	4618      	mov	r0, r3
 8008568:	3714      	adds	r7, #20
 800856a:	46bd      	mov	sp, r7
 800856c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008570:	4770      	bx	lr
 8008572:	bf00      	nop
 8008574:	40010000 	.word	0x40010000
 8008578:	40000400 	.word	0x40000400
 800857c:	40000800 	.word	0x40000800
 8008580:	40000c00 	.word	0x40000c00
 8008584:	40010400 	.word	0x40010400
 8008588:	40014000 	.word	0x40014000
 800858c:	40001800 	.word	0x40001800

08008590 <HAL_TIMEx_CommutCallback>:
>>>>>>> Stashed changes
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 80085c0:	b480      	push	{r7}
 80085c2:	b083      	sub	sp, #12
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
=======
 8008590:	b480      	push	{r7}
 8008592:	b083      	sub	sp, #12
 8008594:	af00      	add	r7, sp, #0
 8008596:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
<<<<<<< Updated upstream
 80085c8:	bf00      	nop
 80085ca:	370c      	adds	r7, #12
 80085cc:	46bd      	mov	sp, r7
 80085ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d2:	4770      	bx	lr

080085d4 <HAL_TIMEx_BreakCallback>:
=======
 8008598:	bf00      	nop
 800859a:	370c      	adds	r7, #12
 800859c:	46bd      	mov	sp, r7
 800859e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a2:	4770      	bx	lr

080085a4 <HAL_TIMEx_BreakCallback>:
>>>>>>> Stashed changes
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 80085d4:	b480      	push	{r7}
 80085d6:	b083      	sub	sp, #12
 80085d8:	af00      	add	r7, sp, #0
 80085da:	6078      	str	r0, [r7, #4]
=======
 80085a4:	b480      	push	{r7}
 80085a6:	b083      	sub	sp, #12
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
<<<<<<< Updated upstream
 80085dc:	bf00      	nop
 80085de:	370c      	adds	r7, #12
 80085e0:	46bd      	mov	sp, r7
 80085e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e6:	4770      	bx	lr

080085e8 <HAL_UART_Init>:
=======
 80085ac:	bf00      	nop
 80085ae:	370c      	adds	r7, #12
 80085b0:	46bd      	mov	sp, r7
 80085b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b6:	4770      	bx	lr

080085b8 <HAL_UART_Init>:
>>>>>>> Stashed changes
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b082      	sub	sp, #8
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d101      	bne.n	80085fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80085f6:	2301      	movs	r3, #1
 80085f8:	e03f      	b.n	800867a <HAL_UART_Init+0x92>
=======
 80085b8:	b580      	push	{r7, lr}
 80085ba:	b082      	sub	sp, #8
 80085bc:	af00      	add	r7, sp, #0
 80085be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d101      	bne.n	80085ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80085c6:	2301      	movs	r3, #1
 80085c8:	e03f      	b.n	800864a <HAL_UART_Init+0x92>
>>>>>>> Stashed changes
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
<<<<<<< Updated upstream
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008600:	b2db      	uxtb	r3, r3
 8008602:	2b00      	cmp	r3, #0
 8008604:	d106      	bne.n	8008614 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	2200      	movs	r2, #0
 800860a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80085d0:	b2db      	uxtb	r3, r3
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d106      	bne.n	80085e4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	2200      	movs	r2, #0
 80085da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
>>>>>>> Stashed changes

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
<<<<<<< Updated upstream
 800860e:	6878      	ldr	r0, [r7, #4]
 8008610:	f7f9 fc6c 	bl	8001eec <HAL_UART_MspInit>
=======
 80085de:	6878      	ldr	r0, [r7, #4]
 80085e0:	f7f9 fc86 	bl	8001ef0 <HAL_UART_MspInit>
>>>>>>> Stashed changes
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
<<<<<<< Updated upstream
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	2224      	movs	r2, #36	; 0x24
 8008618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	68da      	ldr	r2, [r3, #12]
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800862a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800862c:	6878      	ldr	r0, [r7, #4]
 800862e:	f000 fd7b 	bl	8009128 <UART_SetConfig>
=======
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	2224      	movs	r2, #36	; 0x24
 80085e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	68da      	ldr	r2, [r3, #12]
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80085fa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80085fc:	6878      	ldr	r0, [r7, #4]
 80085fe:	f000 fd7b 	bl	80090f8 <UART_SetConfig>
>>>>>>> Stashed changes

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
<<<<<<< Updated upstream
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	691a      	ldr	r2, [r3, #16]
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008640:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	695a      	ldr	r2, [r3, #20]
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008650:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	68da      	ldr	r2, [r3, #12]
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008660:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	2200      	movs	r2, #0
 8008666:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	2220      	movs	r2, #32
 800866c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	2220      	movs	r2, #32
 8008674:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008678:	2300      	movs	r3, #0
}
 800867a:	4618      	mov	r0, r3
 800867c:	3708      	adds	r7, #8
 800867e:	46bd      	mov	sp, r7
 8008680:	bd80      	pop	{r7, pc}

08008682 <HAL_UART_Transmit>:
=======
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	691a      	ldr	r2, [r3, #16]
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008610:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	695a      	ldr	r2, [r3, #20]
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008620:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	68da      	ldr	r2, [r3, #12]
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008630:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	2200      	movs	r2, #0
 8008636:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	2220      	movs	r2, #32
 800863c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	2220      	movs	r2, #32
 8008644:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008648:	2300      	movs	r3, #0
}
 800864a:	4618      	mov	r0, r3
 800864c:	3708      	adds	r7, #8
 800864e:	46bd      	mov	sp, r7
 8008650:	bd80      	pop	{r7, pc}

08008652 <HAL_UART_Transmit>:
>>>>>>> Stashed changes
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
<<<<<<< Updated upstream
 8008682:	b580      	push	{r7, lr}
 8008684:	b08a      	sub	sp, #40	; 0x28
 8008686:	af02      	add	r7, sp, #8
 8008688:	60f8      	str	r0, [r7, #12]
 800868a:	60b9      	str	r1, [r7, #8]
 800868c:	603b      	str	r3, [r7, #0]
 800868e:	4613      	mov	r3, r2
 8008690:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008692:	2300      	movs	r3, #0
 8008694:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800869c:	b2db      	uxtb	r3, r3
 800869e:	2b20      	cmp	r3, #32
 80086a0:	d17c      	bne.n	800879c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80086a2:	68bb      	ldr	r3, [r7, #8]
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d002      	beq.n	80086ae <HAL_UART_Transmit+0x2c>
 80086a8:	88fb      	ldrh	r3, [r7, #6]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d101      	bne.n	80086b2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80086ae:	2301      	movs	r3, #1
 80086b0:	e075      	b.n	800879e <HAL_UART_Transmit+0x11c>
=======
 8008652:	b580      	push	{r7, lr}
 8008654:	b08a      	sub	sp, #40	; 0x28
 8008656:	af02      	add	r7, sp, #8
 8008658:	60f8      	str	r0, [r7, #12]
 800865a:	60b9      	str	r1, [r7, #8]
 800865c:	603b      	str	r3, [r7, #0]
 800865e:	4613      	mov	r3, r2
 8008660:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008662:	2300      	movs	r3, #0
 8008664:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800866c:	b2db      	uxtb	r3, r3
 800866e:	2b20      	cmp	r3, #32
 8008670:	d17c      	bne.n	800876c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008672:	68bb      	ldr	r3, [r7, #8]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d002      	beq.n	800867e <HAL_UART_Transmit+0x2c>
 8008678:	88fb      	ldrh	r3, [r7, #6]
 800867a:	2b00      	cmp	r3, #0
 800867c:	d101      	bne.n	8008682 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800867e:	2301      	movs	r3, #1
 8008680:	e075      	b.n	800876e <HAL_UART_Transmit+0x11c>
>>>>>>> Stashed changes
    }

    /* Process Locked */
    __HAL_LOCK(huart);
<<<<<<< Updated upstream
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80086b8:	2b01      	cmp	r3, #1
 80086ba:	d101      	bne.n	80086c0 <HAL_UART_Transmit+0x3e>
 80086bc:	2302      	movs	r3, #2
 80086be:	e06e      	b.n	800879e <HAL_UART_Transmit+0x11c>
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	2201      	movs	r2, #1
 80086c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	2200      	movs	r2, #0
 80086cc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	2221      	movs	r2, #33	; 0x21
 80086d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80086d6:	f7f9 fce9 	bl	80020ac <HAL_GetTick>
 80086da:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	88fa      	ldrh	r2, [r7, #6]
 80086e0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	88fa      	ldrh	r2, [r7, #6]
 80086e6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	689b      	ldr	r3, [r3, #8]
 80086ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80086f0:	d108      	bne.n	8008704 <HAL_UART_Transmit+0x82>
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	691b      	ldr	r3, [r3, #16]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d104      	bne.n	8008704 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80086fa:	2300      	movs	r3, #0
 80086fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80086fe:	68bb      	ldr	r3, [r7, #8]
 8008700:	61bb      	str	r3, [r7, #24]
 8008702:	e003      	b.n	800870c <HAL_UART_Transmit+0x8a>
=======
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008688:	2b01      	cmp	r3, #1
 800868a:	d101      	bne.n	8008690 <HAL_UART_Transmit+0x3e>
 800868c:	2302      	movs	r3, #2
 800868e:	e06e      	b.n	800876e <HAL_UART_Transmit+0x11c>
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	2201      	movs	r2, #1
 8008694:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	2200      	movs	r2, #0
 800869c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	2221      	movs	r2, #33	; 0x21
 80086a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80086a6:	f7f9 fd03 	bl	80020b0 <HAL_GetTick>
 80086aa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	88fa      	ldrh	r2, [r7, #6]
 80086b0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	88fa      	ldrh	r2, [r7, #6]
 80086b6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	689b      	ldr	r3, [r3, #8]
 80086bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80086c0:	d108      	bne.n	80086d4 <HAL_UART_Transmit+0x82>
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	691b      	ldr	r3, [r3, #16]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d104      	bne.n	80086d4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80086ca:	2300      	movs	r3, #0
 80086cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80086ce:	68bb      	ldr	r3, [r7, #8]
 80086d0:	61bb      	str	r3, [r7, #24]
 80086d2:	e003      	b.n	80086dc <HAL_UART_Transmit+0x8a>
>>>>>>> Stashed changes
    }
    else
    {
      pdata8bits  = pData;
<<<<<<< Updated upstream
 8008704:	68bb      	ldr	r3, [r7, #8]
 8008706:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008708:	2300      	movs	r3, #0
 800870a:	61bb      	str	r3, [r7, #24]
=======
 80086d4:	68bb      	ldr	r3, [r7, #8]
 80086d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80086d8:	2300      	movs	r3, #0
 80086da:	61bb      	str	r3, [r7, #24]
>>>>>>> Stashed changes
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
<<<<<<< Updated upstream
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	2200      	movs	r2, #0
 8008710:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8008714:	e02a      	b.n	800876c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008716:	683b      	ldr	r3, [r7, #0]
 8008718:	9300      	str	r3, [sp, #0]
 800871a:	697b      	ldr	r3, [r7, #20]
 800871c:	2200      	movs	r2, #0
 800871e:	2180      	movs	r1, #128	; 0x80
 8008720:	68f8      	ldr	r0, [r7, #12]
 8008722:	f000 faf9 	bl	8008d18 <UART_WaitOnFlagUntilTimeout>
 8008726:	4603      	mov	r3, r0
 8008728:	2b00      	cmp	r3, #0
 800872a:	d001      	beq.n	8008730 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800872c:	2303      	movs	r3, #3
 800872e:	e036      	b.n	800879e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8008730:	69fb      	ldr	r3, [r7, #28]
 8008732:	2b00      	cmp	r3, #0
 8008734:	d10b      	bne.n	800874e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008736:	69bb      	ldr	r3, [r7, #24]
 8008738:	881b      	ldrh	r3, [r3, #0]
 800873a:	461a      	mov	r2, r3
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008744:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008746:	69bb      	ldr	r3, [r7, #24]
 8008748:	3302      	adds	r3, #2
 800874a:	61bb      	str	r3, [r7, #24]
 800874c:	e007      	b.n	800875e <HAL_UART_Transmit+0xdc>
=======
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	2200      	movs	r2, #0
 80086e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80086e4:	e02a      	b.n	800873c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80086e6:	683b      	ldr	r3, [r7, #0]
 80086e8:	9300      	str	r3, [sp, #0]
 80086ea:	697b      	ldr	r3, [r7, #20]
 80086ec:	2200      	movs	r2, #0
 80086ee:	2180      	movs	r1, #128	; 0x80
 80086f0:	68f8      	ldr	r0, [r7, #12]
 80086f2:	f000 faf9 	bl	8008ce8 <UART_WaitOnFlagUntilTimeout>
 80086f6:	4603      	mov	r3, r0
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d001      	beq.n	8008700 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80086fc:	2303      	movs	r3, #3
 80086fe:	e036      	b.n	800876e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8008700:	69fb      	ldr	r3, [r7, #28]
 8008702:	2b00      	cmp	r3, #0
 8008704:	d10b      	bne.n	800871e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008706:	69bb      	ldr	r3, [r7, #24]
 8008708:	881b      	ldrh	r3, [r3, #0]
 800870a:	461a      	mov	r2, r3
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008714:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008716:	69bb      	ldr	r3, [r7, #24]
 8008718:	3302      	adds	r3, #2
 800871a:	61bb      	str	r3, [r7, #24]
 800871c:	e007      	b.n	800872e <HAL_UART_Transmit+0xdc>
>>>>>>> Stashed changes
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
<<<<<<< Updated upstream
 800874e:	69fb      	ldr	r3, [r7, #28]
 8008750:	781a      	ldrb	r2, [r3, #0]
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008758:	69fb      	ldr	r3, [r7, #28]
 800875a:	3301      	adds	r3, #1
 800875c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008762:	b29b      	uxth	r3, r3
 8008764:	3b01      	subs	r3, #1
 8008766:	b29a      	uxth	r2, r3
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008770:	b29b      	uxth	r3, r3
 8008772:	2b00      	cmp	r3, #0
 8008774:	d1cf      	bne.n	8008716 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008776:	683b      	ldr	r3, [r7, #0]
 8008778:	9300      	str	r3, [sp, #0]
 800877a:	697b      	ldr	r3, [r7, #20]
 800877c:	2200      	movs	r2, #0
 800877e:	2140      	movs	r1, #64	; 0x40
 8008780:	68f8      	ldr	r0, [r7, #12]
 8008782:	f000 fac9 	bl	8008d18 <UART_WaitOnFlagUntilTimeout>
 8008786:	4603      	mov	r3, r0
 8008788:	2b00      	cmp	r3, #0
 800878a:	d001      	beq.n	8008790 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800878c:	2303      	movs	r3, #3
 800878e:	e006      	b.n	800879e <HAL_UART_Transmit+0x11c>
=======
 800871e:	69fb      	ldr	r3, [r7, #28]
 8008720:	781a      	ldrb	r2, [r3, #0]
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008728:	69fb      	ldr	r3, [r7, #28]
 800872a:	3301      	adds	r3, #1
 800872c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008732:	b29b      	uxth	r3, r3
 8008734:	3b01      	subs	r3, #1
 8008736:	b29a      	uxth	r2, r3
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008740:	b29b      	uxth	r3, r3
 8008742:	2b00      	cmp	r3, #0
 8008744:	d1cf      	bne.n	80086e6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008746:	683b      	ldr	r3, [r7, #0]
 8008748:	9300      	str	r3, [sp, #0]
 800874a:	697b      	ldr	r3, [r7, #20]
 800874c:	2200      	movs	r2, #0
 800874e:	2140      	movs	r1, #64	; 0x40
 8008750:	68f8      	ldr	r0, [r7, #12]
 8008752:	f000 fac9 	bl	8008ce8 <UART_WaitOnFlagUntilTimeout>
 8008756:	4603      	mov	r3, r0
 8008758:	2b00      	cmp	r3, #0
 800875a:	d001      	beq.n	8008760 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800875c:	2303      	movs	r3, #3
 800875e:	e006      	b.n	800876e <HAL_UART_Transmit+0x11c>
>>>>>>> Stashed changes
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
<<<<<<< Updated upstream
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	2220      	movs	r2, #32
 8008794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8008798:	2300      	movs	r3, #0
 800879a:	e000      	b.n	800879e <HAL_UART_Transmit+0x11c>
=======
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	2220      	movs	r2, #32
 8008764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8008768:	2300      	movs	r3, #0
 800876a:	e000      	b.n	800876e <HAL_UART_Transmit+0x11c>
>>>>>>> Stashed changes
  }
  else
  {
    return HAL_BUSY;
<<<<<<< Updated upstream
 800879c:	2302      	movs	r3, #2
  }
}
 800879e:	4618      	mov	r0, r3
 80087a0:	3720      	adds	r7, #32
 80087a2:	46bd      	mov	sp, r7
 80087a4:	bd80      	pop	{r7, pc}
	...

080087a8 <HAL_UART_IRQHandler>:
=======
 800876c:	2302      	movs	r3, #2
  }
}
 800876e:	4618      	mov	r0, r3
 8008770:	3720      	adds	r7, #32
 8008772:	46bd      	mov	sp, r7
 8008774:	bd80      	pop	{r7, pc}
	...

08008778 <HAL_UART_IRQHandler>:
>>>>>>> Stashed changes
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 80087a8:	b580      	push	{r7, lr}
 80087aa:	b0ba      	sub	sp, #232	; 0xe8
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	68db      	ldr	r3, [r3, #12]
 80087c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	695b      	ldr	r3, [r3, #20]
 80087ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80087ce:	2300      	movs	r3, #0
 80087d0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80087d4:	2300      	movs	r3, #0
 80087d6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80087da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80087de:	f003 030f 	and.w	r3, r3, #15
 80087e2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80087e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d10f      	bne.n	800880e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80087ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80087f2:	f003 0320 	and.w	r3, r3, #32
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d009      	beq.n	800880e <HAL_UART_IRQHandler+0x66>
 80087fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80087fe:	f003 0320 	and.w	r3, r3, #32
 8008802:	2b00      	cmp	r3, #0
 8008804:	d003      	beq.n	800880e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008806:	6878      	ldr	r0, [r7, #4]
 8008808:	f000 fbd3 	bl	8008fb2 <UART_Receive_IT>
      return;
 800880c:	e256      	b.n	8008cbc <HAL_UART_IRQHandler+0x514>
=======
 8008778:	b580      	push	{r7, lr}
 800877a:	b0ba      	sub	sp, #232	; 0xe8
 800877c:	af00      	add	r7, sp, #0
 800877e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	68db      	ldr	r3, [r3, #12]
 8008790:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	695b      	ldr	r3, [r3, #20]
 800879a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800879e:	2300      	movs	r3, #0
 80087a0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80087a4:	2300      	movs	r3, #0
 80087a6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80087aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80087ae:	f003 030f 	and.w	r3, r3, #15
 80087b2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80087b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d10f      	bne.n	80087de <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80087be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80087c2:	f003 0320 	and.w	r3, r3, #32
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d009      	beq.n	80087de <HAL_UART_IRQHandler+0x66>
 80087ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80087ce:	f003 0320 	and.w	r3, r3, #32
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d003      	beq.n	80087de <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80087d6:	6878      	ldr	r0, [r7, #4]
 80087d8:	f000 fbd3 	bl	8008f82 <UART_Receive_IT>
      return;
 80087dc:	e256      	b.n	8008c8c <HAL_UART_IRQHandler+0x514>
>>>>>>> Stashed changes
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
<<<<<<< Updated upstream
 800880e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008812:	2b00      	cmp	r3, #0
 8008814:	f000 80de 	beq.w	80089d4 <HAL_UART_IRQHandler+0x22c>
 8008818:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800881c:	f003 0301 	and.w	r3, r3, #1
 8008820:	2b00      	cmp	r3, #0
 8008822:	d106      	bne.n	8008832 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008824:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008828:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800882c:	2b00      	cmp	r3, #0
 800882e:	f000 80d1 	beq.w	80089d4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008832:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008836:	f003 0301 	and.w	r3, r3, #1
 800883a:	2b00      	cmp	r3, #0
 800883c:	d00b      	beq.n	8008856 <HAL_UART_IRQHandler+0xae>
 800883e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008842:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008846:	2b00      	cmp	r3, #0
 8008848:	d005      	beq.n	8008856 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800884e:	f043 0201 	orr.w	r2, r3, #1
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	641a      	str	r2, [r3, #64]	; 0x40
=======
 80087de:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	f000 80de 	beq.w	80089a4 <HAL_UART_IRQHandler+0x22c>
 80087e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80087ec:	f003 0301 	and.w	r3, r3, #1
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d106      	bne.n	8008802 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80087f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80087f8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	f000 80d1 	beq.w	80089a4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008802:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008806:	f003 0301 	and.w	r3, r3, #1
 800880a:	2b00      	cmp	r3, #0
 800880c:	d00b      	beq.n	8008826 <HAL_UART_IRQHandler+0xae>
 800880e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008812:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008816:	2b00      	cmp	r3, #0
 8008818:	d005      	beq.n	8008826 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800881e:	f043 0201 	orr.w	r2, r3, #1
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	641a      	str	r2, [r3, #64]	; 0x40
>>>>>>> Stashed changes
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
<<<<<<< Updated upstream
 8008856:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800885a:	f003 0304 	and.w	r3, r3, #4
 800885e:	2b00      	cmp	r3, #0
 8008860:	d00b      	beq.n	800887a <HAL_UART_IRQHandler+0xd2>
 8008862:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008866:	f003 0301 	and.w	r3, r3, #1
 800886a:	2b00      	cmp	r3, #0
 800886c:	d005      	beq.n	800887a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008872:	f043 0202 	orr.w	r2, r3, #2
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	641a      	str	r2, [r3, #64]	; 0x40
=======
 8008826:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800882a:	f003 0304 	and.w	r3, r3, #4
 800882e:	2b00      	cmp	r3, #0
 8008830:	d00b      	beq.n	800884a <HAL_UART_IRQHandler+0xd2>
 8008832:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008836:	f003 0301 	and.w	r3, r3, #1
 800883a:	2b00      	cmp	r3, #0
 800883c:	d005      	beq.n	800884a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008842:	f043 0202 	orr.w	r2, r3, #2
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	641a      	str	r2, [r3, #64]	; 0x40
>>>>>>> Stashed changes
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
<<<<<<< Updated upstream
 800887a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800887e:	f003 0302 	and.w	r3, r3, #2
 8008882:	2b00      	cmp	r3, #0
 8008884:	d00b      	beq.n	800889e <HAL_UART_IRQHandler+0xf6>
 8008886:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800888a:	f003 0301 	and.w	r3, r3, #1
 800888e:	2b00      	cmp	r3, #0
 8008890:	d005      	beq.n	800889e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008896:	f043 0204 	orr.w	r2, r3, #4
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	641a      	str	r2, [r3, #64]	; 0x40
=======
 800884a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800884e:	f003 0302 	and.w	r3, r3, #2
 8008852:	2b00      	cmp	r3, #0
 8008854:	d00b      	beq.n	800886e <HAL_UART_IRQHandler+0xf6>
 8008856:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800885a:	f003 0301 	and.w	r3, r3, #1
 800885e:	2b00      	cmp	r3, #0
 8008860:	d005      	beq.n	800886e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008866:	f043 0204 	orr.w	r2, r3, #4
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	641a      	str	r2, [r3, #64]	; 0x40
>>>>>>> Stashed changes
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
<<<<<<< Updated upstream
 800889e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80088a2:	f003 0308 	and.w	r3, r3, #8
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d011      	beq.n	80088ce <HAL_UART_IRQHandler+0x126>
 80088aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80088ae:	f003 0320 	and.w	r3, r3, #32
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d105      	bne.n	80088c2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80088b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80088ba:	f003 0301 	and.w	r3, r3, #1
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d005      	beq.n	80088ce <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088c6:	f043 0208 	orr.w	r2, r3, #8
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	641a      	str	r2, [r3, #64]	; 0x40
=======
 800886e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008872:	f003 0308 	and.w	r3, r3, #8
 8008876:	2b00      	cmp	r3, #0
 8008878:	d011      	beq.n	800889e <HAL_UART_IRQHandler+0x126>
 800887a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800887e:	f003 0320 	and.w	r3, r3, #32
 8008882:	2b00      	cmp	r3, #0
 8008884:	d105      	bne.n	8008892 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008886:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800888a:	f003 0301 	and.w	r3, r3, #1
 800888e:	2b00      	cmp	r3, #0
 8008890:	d005      	beq.n	800889e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008896:	f043 0208 	orr.w	r2, r3, #8
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	641a      	str	r2, [r3, #64]	; 0x40
>>>>>>> Stashed changes
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
<<<<<<< Updated upstream
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	f000 81ed 	beq.w	8008cb2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80088d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80088dc:	f003 0320 	and.w	r3, r3, #32
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d008      	beq.n	80088f6 <HAL_UART_IRQHandler+0x14e>
 80088e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80088e8:	f003 0320 	and.w	r3, r3, #32
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d002      	beq.n	80088f6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80088f0:	6878      	ldr	r0, [r7, #4]
 80088f2:	f000 fb5e 	bl	8008fb2 <UART_Receive_IT>
=======
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	f000 81ed 	beq.w	8008c82 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80088a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80088ac:	f003 0320 	and.w	r3, r3, #32
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d008      	beq.n	80088c6 <HAL_UART_IRQHandler+0x14e>
 80088b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80088b8:	f003 0320 	and.w	r3, r3, #32
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d002      	beq.n	80088c6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80088c0:	6878      	ldr	r0, [r7, #4]
 80088c2:	f000 fb5e 	bl	8008f82 <UART_Receive_IT>
>>>>>>> Stashed changes
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
<<<<<<< Updated upstream
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	695b      	ldr	r3, [r3, #20]
 80088fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008900:	2b40      	cmp	r3, #64	; 0x40
 8008902:	bf0c      	ite	eq
 8008904:	2301      	moveq	r3, #1
 8008906:	2300      	movne	r3, #0
 8008908:	b2db      	uxtb	r3, r3
 800890a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008912:	f003 0308 	and.w	r3, r3, #8
 8008916:	2b00      	cmp	r3, #0
 8008918:	d103      	bne.n	8008922 <HAL_UART_IRQHandler+0x17a>
 800891a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800891e:	2b00      	cmp	r3, #0
 8008920:	d04f      	beq.n	80089c2 <HAL_UART_IRQHandler+0x21a>
=======
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	695b      	ldr	r3, [r3, #20]
 80088cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088d0:	2b40      	cmp	r3, #64	; 0x40
 80088d2:	bf0c      	ite	eq
 80088d4:	2301      	moveq	r3, #1
 80088d6:	2300      	movne	r3, #0
 80088d8:	b2db      	uxtb	r3, r3
 80088da:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088e2:	f003 0308 	and.w	r3, r3, #8
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d103      	bne.n	80088f2 <HAL_UART_IRQHandler+0x17a>
 80088ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d04f      	beq.n	8008992 <HAL_UART_IRQHandler+0x21a>
>>>>>>> Stashed changes
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
<<<<<<< Updated upstream
 8008922:	6878      	ldr	r0, [r7, #4]
 8008924:	f000 fa66 	bl	8008df4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	695b      	ldr	r3, [r3, #20]
 800892e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008932:	2b40      	cmp	r3, #64	; 0x40
 8008934:	d141      	bne.n	80089ba <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	3314      	adds	r3, #20
 800893c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
=======
 80088f2:	6878      	ldr	r0, [r7, #4]
 80088f4:	f000 fa66 	bl	8008dc4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	695b      	ldr	r3, [r3, #20]
 80088fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008902:	2b40      	cmp	r3, #64	; 0x40
 8008904:	d141      	bne.n	800898a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	3314      	adds	r3, #20
 800890c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
>>>>>>> Stashed changes
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
<<<<<<< Updated upstream
 8008940:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008944:	e853 3f00 	ldrex	r3, [r3]
 8008948:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800894c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008950:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008954:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	3314      	adds	r3, #20
 800895e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008962:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008966:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
=======
 8008910:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008914:	e853 3f00 	ldrex	r3, [r3]
 8008918:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800891c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008920:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008924:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	3314      	adds	r3, #20
 800892e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008932:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008936:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
>>>>>>> Stashed changes
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
<<<<<<< Updated upstream
 800896a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800896e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008972:	e841 2300 	strex	r3, r2, [r1]
 8008976:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800897a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800897e:	2b00      	cmp	r3, #0
 8008980:	d1d9      	bne.n	8008936 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008986:	2b00      	cmp	r3, #0
 8008988:	d013      	beq.n	80089b2 <HAL_UART_IRQHandler+0x20a>
=======
 800893a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800893e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008942:	e841 2300 	strex	r3, r2, [r1]
 8008946:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800894a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800894e:	2b00      	cmp	r3, #0
 8008950:	d1d9      	bne.n	8008906 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008956:	2b00      	cmp	r3, #0
 8008958:	d013      	beq.n	8008982 <HAL_UART_IRQHandler+0x20a>
>>>>>>> Stashed changes
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
<<<<<<< Updated upstream
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800898e:	4a7d      	ldr	r2, [pc, #500]	; (8008b84 <HAL_UART_IRQHandler+0x3dc>)
 8008990:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008996:	4618      	mov	r0, r3
 8008998:	f7fa ffba 	bl	8003910 <HAL_DMA_Abort_IT>
 800899c:	4603      	mov	r3, r0
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d016      	beq.n	80089d0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80089a8:	687a      	ldr	r2, [r7, #4]
 80089aa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80089ac:	4610      	mov	r0, r2
 80089ae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80089b0:	e00e      	b.n	80089d0 <HAL_UART_IRQHandler+0x228>
=======
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800895e:	4a7d      	ldr	r2, [pc, #500]	; (8008b54 <HAL_UART_IRQHandler+0x3dc>)
 8008960:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008966:	4618      	mov	r0, r3
 8008968:	f7fa ffd4 	bl	8003914 <HAL_DMA_Abort_IT>
 800896c:	4603      	mov	r3, r0
 800896e:	2b00      	cmp	r3, #0
 8008970:	d016      	beq.n	80089a0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008976:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008978:	687a      	ldr	r2, [r7, #4]
 800897a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800897c:	4610      	mov	r0, r2
 800897e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008980:	e00e      	b.n	80089a0 <HAL_UART_IRQHandler+0x228>
>>>>>>> Stashed changes
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
<<<<<<< Updated upstream
 80089b2:	6878      	ldr	r0, [r7, #4]
 80089b4:	f000 f99a 	bl	8008cec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80089b8:	e00a      	b.n	80089d0 <HAL_UART_IRQHandler+0x228>
=======
 8008982:	6878      	ldr	r0, [r7, #4]
 8008984:	f000 f99a 	bl	8008cbc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008988:	e00a      	b.n	80089a0 <HAL_UART_IRQHandler+0x228>
>>>>>>> Stashed changes
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
<<<<<<< Updated upstream
 80089ba:	6878      	ldr	r0, [r7, #4]
 80089bc:	f000 f996 	bl	8008cec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80089c0:	e006      	b.n	80089d0 <HAL_UART_IRQHandler+0x228>
=======
 800898a:	6878      	ldr	r0, [r7, #4]
 800898c:	f000 f996 	bl	8008cbc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008990:	e006      	b.n	80089a0 <HAL_UART_IRQHandler+0x228>
>>>>>>> Stashed changes
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
<<<<<<< Updated upstream
 80089c2:	6878      	ldr	r0, [r7, #4]
 80089c4:	f000 f992 	bl	8008cec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	2200      	movs	r2, #0
 80089cc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80089ce:	e170      	b.n	8008cb2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80089d0:	bf00      	nop
    return;
 80089d2:	e16e      	b.n	8008cb2 <HAL_UART_IRQHandler+0x50a>
=======
 8008992:	6878      	ldr	r0, [r7, #4]
 8008994:	f000 f992 	bl	8008cbc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	2200      	movs	r2, #0
 800899c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800899e:	e170      	b.n	8008c82 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80089a0:	bf00      	nop
    return;
 80089a2:	e16e      	b.n	8008c82 <HAL_UART_IRQHandler+0x50a>
>>>>>>> Stashed changes
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
<<<<<<< Updated upstream
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089d8:	2b01      	cmp	r3, #1
 80089da:	f040 814a 	bne.w	8008c72 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80089de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80089e2:	f003 0310 	and.w	r3, r3, #16
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	f000 8143 	beq.w	8008c72 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80089ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80089f0:	f003 0310 	and.w	r3, r3, #16
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	f000 813c 	beq.w	8008c72 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80089fa:	2300      	movs	r3, #0
 80089fc:	60bb      	str	r3, [r7, #8]
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	60bb      	str	r3, [r7, #8]
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	685b      	ldr	r3, [r3, #4]
 8008a0c:	60bb      	str	r3, [r7, #8]
 8008a0e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	695b      	ldr	r3, [r3, #20]
 8008a16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a1a:	2b40      	cmp	r3, #64	; 0x40
 8008a1c:	f040 80b4 	bne.w	8008b88 <HAL_UART_IRQHandler+0x3e0>
=======
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089a8:	2b01      	cmp	r3, #1
 80089aa:	f040 814a 	bne.w	8008c42 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80089ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80089b2:	f003 0310 	and.w	r3, r3, #16
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	f000 8143 	beq.w	8008c42 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80089bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80089c0:	f003 0310 	and.w	r3, r3, #16
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	f000 813c 	beq.w	8008c42 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80089ca:	2300      	movs	r3, #0
 80089cc:	60bb      	str	r3, [r7, #8]
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	60bb      	str	r3, [r7, #8]
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	685b      	ldr	r3, [r3, #4]
 80089dc:	60bb      	str	r3, [r7, #8]
 80089de:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	695b      	ldr	r3, [r3, #20]
 80089e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089ea:	2b40      	cmp	r3, #64	; 0x40
 80089ec:	f040 80b4 	bne.w	8008b58 <HAL_UART_IRQHandler+0x3e0>
>>>>>>> Stashed changes
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
<<<<<<< Updated upstream
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	685b      	ldr	r3, [r3, #4]
 8008a28:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008a2c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	f000 8140 	beq.w	8008cb6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008a3a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008a3e:	429a      	cmp	r2, r3
 8008a40:	f080 8139 	bcs.w	8008cb6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008a4a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a50:	69db      	ldr	r3, [r3, #28]
 8008a52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a56:	f000 8088 	beq.w	8008b6a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	330c      	adds	r3, #12
 8008a60:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a64:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008a68:	e853 3f00 	ldrex	r3, [r3]
 8008a6c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008a70:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008a74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008a78:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	330c      	adds	r3, #12
 8008a82:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8008a86:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008a8a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a8e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008a92:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008a96:	e841 2300 	strex	r3, r2, [r1]
 8008a9a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008a9e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d1d9      	bne.n	8008a5a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	3314      	adds	r3, #20
 8008aac:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008aae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008ab0:	e853 3f00 	ldrex	r3, [r3]
 8008ab4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008ab6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008ab8:	f023 0301 	bic.w	r3, r3, #1
 8008abc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	3314      	adds	r3, #20
 8008ac6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008aca:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008ace:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ad0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008ad2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008ad6:	e841 2300 	strex	r3, r2, [r1]
 8008ada:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008adc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d1e1      	bne.n	8008aa6 <HAL_UART_IRQHandler+0x2fe>
=======
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	685b      	ldr	r3, [r3, #4]
 80089f8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80089fc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	f000 8140 	beq.w	8008c86 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008a0a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008a0e:	429a      	cmp	r2, r3
 8008a10:	f080 8139 	bcs.w	8008c86 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008a1a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a20:	69db      	ldr	r3, [r3, #28]
 8008a22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a26:	f000 8088 	beq.w	8008b3a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	330c      	adds	r3, #12
 8008a30:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a34:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008a38:	e853 3f00 	ldrex	r3, [r3]
 8008a3c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008a40:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008a44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008a48:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	330c      	adds	r3, #12
 8008a52:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8008a56:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008a5a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a5e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008a62:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008a66:	e841 2300 	strex	r3, r2, [r1]
 8008a6a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008a6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d1d9      	bne.n	8008a2a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	3314      	adds	r3, #20
 8008a7c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008a80:	e853 3f00 	ldrex	r3, [r3]
 8008a84:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008a86:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008a88:	f023 0301 	bic.w	r3, r3, #1
 8008a8c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	3314      	adds	r3, #20
 8008a96:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008a9a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008a9e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008aa0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008aa2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008aa6:	e841 2300 	strex	r3, r2, [r1]
 8008aaa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008aac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d1e1      	bne.n	8008a76 <HAL_UART_IRQHandler+0x2fe>
>>>>>>> Stashed changes

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
<<<<<<< Updated upstream
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	3314      	adds	r3, #20
 8008ae8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008aea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008aec:	e853 3f00 	ldrex	r3, [r3]
 8008af0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008af2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008af4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008af8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	3314      	adds	r3, #20
 8008b02:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008b06:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008b08:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b0a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008b0c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008b0e:	e841 2300 	strex	r3, r2, [r1]
 8008b12:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008b14:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d1e3      	bne.n	8008ae2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	2220      	movs	r2, #32
 8008b1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	2200      	movs	r2, #0
 8008b26:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	330c      	adds	r3, #12
 8008b2e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b32:	e853 3f00 	ldrex	r3, [r3]
 8008b36:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008b38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008b3a:	f023 0310 	bic.w	r3, r3, #16
 8008b3e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	330c      	adds	r3, #12
 8008b48:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008b4c:	65ba      	str	r2, [r7, #88]	; 0x58
 8008b4e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b50:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008b52:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008b54:	e841 2300 	strex	r3, r2, [r1]
 8008b58:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008b5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d1e3      	bne.n	8008b28 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b64:	4618      	mov	r0, r3
 8008b66:	f7fa fe63 	bl	8003830 <HAL_DMA_Abort>
=======
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	3314      	adds	r3, #20
 8008ab8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008aba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008abc:	e853 3f00 	ldrex	r3, [r3]
 8008ac0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008ac2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008ac4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008ac8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	3314      	adds	r3, #20
 8008ad2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008ad6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008ad8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ada:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008adc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008ade:	e841 2300 	strex	r3, r2, [r1]
 8008ae2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008ae4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d1e3      	bne.n	8008ab2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	2220      	movs	r2, #32
 8008aee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	2200      	movs	r2, #0
 8008af6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	330c      	adds	r3, #12
 8008afe:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b02:	e853 3f00 	ldrex	r3, [r3]
 8008b06:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008b08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008b0a:	f023 0310 	bic.w	r3, r3, #16
 8008b0e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	330c      	adds	r3, #12
 8008b18:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008b1c:	65ba      	str	r2, [r7, #88]	; 0x58
 8008b1e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b20:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008b22:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008b24:	e841 2300 	strex	r3, r2, [r1]
 8008b28:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008b2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d1e3      	bne.n	8008af8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b34:	4618      	mov	r0, r3
 8008b36:	f7fa fe7d 	bl	8003834 <HAL_DMA_Abort>
>>>>>>> Stashed changes
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
<<<<<<< Updated upstream
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008b72:	b29b      	uxth	r3, r3
 8008b74:	1ad3      	subs	r3, r2, r3
 8008b76:	b29b      	uxth	r3, r3
 8008b78:	4619      	mov	r1, r3
 8008b7a:	6878      	ldr	r0, [r7, #4]
 8008b7c:	f000 f8c0 	bl	8008d00 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008b80:	e099      	b.n	8008cb6 <HAL_UART_IRQHandler+0x50e>
 8008b82:	bf00      	nop
 8008b84:	08008ebb 	.word	0x08008ebb
=======
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008b42:	b29b      	uxth	r3, r3
 8008b44:	1ad3      	subs	r3, r2, r3
 8008b46:	b29b      	uxth	r3, r3
 8008b48:	4619      	mov	r1, r3
 8008b4a:	6878      	ldr	r0, [r7, #4]
 8008b4c:	f000 f8c0 	bl	8008cd0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008b50:	e099      	b.n	8008c86 <HAL_UART_IRQHandler+0x50e>
 8008b52:	bf00      	nop
 8008b54:	08008e8b 	.word	0x08008e8b
>>>>>>> Stashed changes
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
<<<<<<< Updated upstream
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008b90:	b29b      	uxth	r3, r3
 8008b92:	1ad3      	subs	r3, r2, r3
 8008b94:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008b9c:	b29b      	uxth	r3, r3
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	f000 808b 	beq.w	8008cba <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8008ba4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	f000 8086 	beq.w	8008cba <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	330c      	adds	r3, #12
 8008bb4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bb8:	e853 3f00 	ldrex	r3, [r3]
 8008bbc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008bbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bc0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008bc4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	330c      	adds	r3, #12
 8008bce:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8008bd2:	647a      	str	r2, [r7, #68]	; 0x44
 8008bd4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bd6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008bd8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008bda:	e841 2300 	strex	r3, r2, [r1]
 8008bde:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008be0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d1e3      	bne.n	8008bae <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	3314      	adds	r3, #20
 8008bec:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bf0:	e853 3f00 	ldrex	r3, [r3]
 8008bf4:	623b      	str	r3, [r7, #32]
   return(result);
 8008bf6:	6a3b      	ldr	r3, [r7, #32]
 8008bf8:	f023 0301 	bic.w	r3, r3, #1
 8008bfc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	3314      	adds	r3, #20
 8008c06:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008c0a:	633a      	str	r2, [r7, #48]	; 0x30
 8008c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c0e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008c10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c12:	e841 2300 	strex	r3, r2, [r1]
 8008c16:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d1e3      	bne.n	8008be6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	2220      	movs	r2, #32
 8008c22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	2200      	movs	r2, #0
 8008c2a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	330c      	adds	r3, #12
 8008c32:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c34:	693b      	ldr	r3, [r7, #16]
 8008c36:	e853 3f00 	ldrex	r3, [r3]
 8008c3a:	60fb      	str	r3, [r7, #12]
   return(result);
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	f023 0310 	bic.w	r3, r3, #16
 8008c42:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	330c      	adds	r3, #12
 8008c4c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008c50:	61fa      	str	r2, [r7, #28]
 8008c52:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c54:	69b9      	ldr	r1, [r7, #24]
 8008c56:	69fa      	ldr	r2, [r7, #28]
 8008c58:	e841 2300 	strex	r3, r2, [r1]
 8008c5c:	617b      	str	r3, [r7, #20]
   return(result);
 8008c5e:	697b      	ldr	r3, [r7, #20]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d1e3      	bne.n	8008c2c <HAL_UART_IRQHandler+0x484>
=======
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008b60:	b29b      	uxth	r3, r3
 8008b62:	1ad3      	subs	r3, r2, r3
 8008b64:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008b6c:	b29b      	uxth	r3, r3
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	f000 808b 	beq.w	8008c8a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8008b74:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	f000 8086 	beq.w	8008c8a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	330c      	adds	r3, #12
 8008b84:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b88:	e853 3f00 	ldrex	r3, [r3]
 8008b8c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008b8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b90:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008b94:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	330c      	adds	r3, #12
 8008b9e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8008ba2:	647a      	str	r2, [r7, #68]	; 0x44
 8008ba4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ba6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008ba8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008baa:	e841 2300 	strex	r3, r2, [r1]
 8008bae:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008bb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d1e3      	bne.n	8008b7e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	3314      	adds	r3, #20
 8008bbc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bc0:	e853 3f00 	ldrex	r3, [r3]
 8008bc4:	623b      	str	r3, [r7, #32]
   return(result);
 8008bc6:	6a3b      	ldr	r3, [r7, #32]
 8008bc8:	f023 0301 	bic.w	r3, r3, #1
 8008bcc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	3314      	adds	r3, #20
 8008bd6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008bda:	633a      	str	r2, [r7, #48]	; 0x30
 8008bdc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bde:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008be0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008be2:	e841 2300 	strex	r3, r2, [r1]
 8008be6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d1e3      	bne.n	8008bb6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	2220      	movs	r2, #32
 8008bf2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	2200      	movs	r2, #0
 8008bfa:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	330c      	adds	r3, #12
 8008c02:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c04:	693b      	ldr	r3, [r7, #16]
 8008c06:	e853 3f00 	ldrex	r3, [r3]
 8008c0a:	60fb      	str	r3, [r7, #12]
   return(result);
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	f023 0310 	bic.w	r3, r3, #16
 8008c12:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	330c      	adds	r3, #12
 8008c1c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008c20:	61fa      	str	r2, [r7, #28]
 8008c22:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c24:	69b9      	ldr	r1, [r7, #24]
 8008c26:	69fa      	ldr	r2, [r7, #28]
 8008c28:	e841 2300 	strex	r3, r2, [r1]
 8008c2c:	617b      	str	r3, [r7, #20]
   return(result);
 8008c2e:	697b      	ldr	r3, [r7, #20]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d1e3      	bne.n	8008bfc <HAL_UART_IRQHandler+0x484>
>>>>>>> Stashed changes
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
<<<<<<< Updated upstream
 8008c64:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008c68:	4619      	mov	r1, r3
 8008c6a:	6878      	ldr	r0, [r7, #4]
 8008c6c:	f000 f848 	bl	8008d00 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008c70:	e023      	b.n	8008cba <HAL_UART_IRQHandler+0x512>
=======
 8008c34:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008c38:	4619      	mov	r1, r3
 8008c3a:	6878      	ldr	r0, [r7, #4]
 8008c3c:	f000 f848 	bl	8008cd0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008c40:	e023      	b.n	8008c8a <HAL_UART_IRQHandler+0x512>
>>>>>>> Stashed changes
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
<<<<<<< Updated upstream
 8008c72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d009      	beq.n	8008c92 <HAL_UART_IRQHandler+0x4ea>
 8008c7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008c82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d003      	beq.n	8008c92 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8008c8a:	6878      	ldr	r0, [r7, #4]
 8008c8c:	f000 f929 	bl	8008ee2 <UART_Transmit_IT>
    return;
 8008c90:	e014      	b.n	8008cbc <HAL_UART_IRQHandler+0x514>
=======
 8008c42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d009      	beq.n	8008c62 <HAL_UART_IRQHandler+0x4ea>
 8008c4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008c52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d003      	beq.n	8008c62 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8008c5a:	6878      	ldr	r0, [r7, #4]
 8008c5c:	f000 f929 	bl	8008eb2 <UART_Transmit_IT>
    return;
 8008c60:	e014      	b.n	8008c8c <HAL_UART_IRQHandler+0x514>
>>>>>>> Stashed changes
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
<<<<<<< Updated upstream
 8008c92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d00e      	beq.n	8008cbc <HAL_UART_IRQHandler+0x514>
 8008c9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008ca2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d008      	beq.n	8008cbc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8008caa:	6878      	ldr	r0, [r7, #4]
 8008cac:	f000 f969 	bl	8008f82 <UART_EndTransmit_IT>
    return;
 8008cb0:	e004      	b.n	8008cbc <HAL_UART_IRQHandler+0x514>
    return;
 8008cb2:	bf00      	nop
 8008cb4:	e002      	b.n	8008cbc <HAL_UART_IRQHandler+0x514>
      return;
 8008cb6:	bf00      	nop
 8008cb8:	e000      	b.n	8008cbc <HAL_UART_IRQHandler+0x514>
      return;
 8008cba:	bf00      	nop
  }
}
 8008cbc:	37e8      	adds	r7, #232	; 0xe8
 8008cbe:	46bd      	mov	sp, r7
 8008cc0:	bd80      	pop	{r7, pc}
 8008cc2:	bf00      	nop

08008cc4 <HAL_UART_TxCpltCallback>:
=======
 8008c62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d00e      	beq.n	8008c8c <HAL_UART_IRQHandler+0x514>
 8008c6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008c72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d008      	beq.n	8008c8c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8008c7a:	6878      	ldr	r0, [r7, #4]
 8008c7c:	f000 f969 	bl	8008f52 <UART_EndTransmit_IT>
    return;
 8008c80:	e004      	b.n	8008c8c <HAL_UART_IRQHandler+0x514>
    return;
 8008c82:	bf00      	nop
 8008c84:	e002      	b.n	8008c8c <HAL_UART_IRQHandler+0x514>
      return;
 8008c86:	bf00      	nop
 8008c88:	e000      	b.n	8008c8c <HAL_UART_IRQHandler+0x514>
      return;
 8008c8a:	bf00      	nop
  }
}
 8008c8c:	37e8      	adds	r7, #232	; 0xe8
 8008c8e:	46bd      	mov	sp, r7
 8008c90:	bd80      	pop	{r7, pc}
 8008c92:	bf00      	nop

08008c94 <HAL_UART_TxCpltCallback>:
>>>>>>> Stashed changes
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 8008cc4:	b480      	push	{r7}
 8008cc6:	b083      	sub	sp, #12
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	6078      	str	r0, [r7, #4]
=======
 8008c94:	b480      	push	{r7}
 8008c96:	b083      	sub	sp, #12
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
<<<<<<< Updated upstream
 8008ccc:	bf00      	nop
 8008cce:	370c      	adds	r7, #12
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd6:	4770      	bx	lr

08008cd8 <HAL_UART_RxCpltCallback>:
=======
 8008c9c:	bf00      	nop
 8008c9e:	370c      	adds	r7, #12
 8008ca0:	46bd      	mov	sp, r7
 8008ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca6:	4770      	bx	lr

08008ca8 <HAL_UART_RxCpltCallback>:
>>>>>>> Stashed changes
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 8008cd8:	b480      	push	{r7}
 8008cda:	b083      	sub	sp, #12
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	6078      	str	r0, [r7, #4]
=======
 8008ca8:	b480      	push	{r7}
 8008caa:	b083      	sub	sp, #12
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
<<<<<<< Updated upstream
 8008ce0:	bf00      	nop
 8008ce2:	370c      	adds	r7, #12
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cea:	4770      	bx	lr

08008cec <HAL_UART_ErrorCallback>:
=======
 8008cb0:	bf00      	nop
 8008cb2:	370c      	adds	r7, #12
 8008cb4:	46bd      	mov	sp, r7
 8008cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cba:	4770      	bx	lr

08008cbc <HAL_UART_ErrorCallback>:
>>>>>>> Stashed changes
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 8008cec:	b480      	push	{r7}
 8008cee:	b083      	sub	sp, #12
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	6078      	str	r0, [r7, #4]
=======
 8008cbc:	b480      	push	{r7}
 8008cbe:	b083      	sub	sp, #12
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
<<<<<<< Updated upstream
 8008cf4:	bf00      	nop
 8008cf6:	370c      	adds	r7, #12
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfe:	4770      	bx	lr

08008d00 <HAL_UARTEx_RxEventCallback>:
=======
 8008cc4:	bf00      	nop
 8008cc6:	370c      	adds	r7, #12
 8008cc8:	46bd      	mov	sp, r7
 8008cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cce:	4770      	bx	lr

08008cd0 <HAL_UARTEx_RxEventCallback>:
>>>>>>> Stashed changes
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
<<<<<<< Updated upstream
 8008d00:	b480      	push	{r7}
 8008d02:	b083      	sub	sp, #12
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	6078      	str	r0, [r7, #4]
 8008d08:	460b      	mov	r3, r1
 8008d0a:	807b      	strh	r3, [r7, #2]
=======
 8008cd0:	b480      	push	{r7}
 8008cd2:	b083      	sub	sp, #12
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	6078      	str	r0, [r7, #4]
 8008cd8:	460b      	mov	r3, r1
 8008cda:	807b      	strh	r3, [r7, #2]
>>>>>>> Stashed changes
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
<<<<<<< Updated upstream
 8008d0c:	bf00      	nop
 8008d0e:	370c      	adds	r7, #12
 8008d10:	46bd      	mov	sp, r7
 8008d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d16:	4770      	bx	lr

08008d18 <UART_WaitOnFlagUntilTimeout>:
=======
 8008cdc:	bf00      	nop
 8008cde:	370c      	adds	r7, #12
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce6:	4770      	bx	lr

08008ce8 <UART_WaitOnFlagUntilTimeout>:
>>>>>>> Stashed changes
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
<<<<<<< Updated upstream
 8008d18:	b580      	push	{r7, lr}
 8008d1a:	b090      	sub	sp, #64	; 0x40
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	60f8      	str	r0, [r7, #12]
 8008d20:	60b9      	str	r1, [r7, #8]
 8008d22:	603b      	str	r3, [r7, #0]
 8008d24:	4613      	mov	r3, r2
 8008d26:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008d28:	e050      	b.n	8008dcc <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008d2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d30:	d04c      	beq.n	8008dcc <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008d32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d007      	beq.n	8008d48 <UART_WaitOnFlagUntilTimeout+0x30>
 8008d38:	f7f9 f9b8 	bl	80020ac <HAL_GetTick>
 8008d3c:	4602      	mov	r2, r0
 8008d3e:	683b      	ldr	r3, [r7, #0]
 8008d40:	1ad3      	subs	r3, r2, r3
 8008d42:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008d44:	429a      	cmp	r2, r3
 8008d46:	d241      	bcs.n	8008dcc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	330c      	adds	r3, #12
 8008d4e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d52:	e853 3f00 	ldrex	r3, [r3]
 8008d56:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d5a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008d5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	330c      	adds	r3, #12
 8008d66:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008d68:	637a      	str	r2, [r7, #52]	; 0x34
 8008d6a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d6c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008d6e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008d70:	e841 2300 	strex	r3, r2, [r1]
 8008d74:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008d76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d1e5      	bne.n	8008d48 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	3314      	adds	r3, #20
 8008d82:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d84:	697b      	ldr	r3, [r7, #20]
 8008d86:	e853 3f00 	ldrex	r3, [r3]
 8008d8a:	613b      	str	r3, [r7, #16]
   return(result);
 8008d8c:	693b      	ldr	r3, [r7, #16]
 8008d8e:	f023 0301 	bic.w	r3, r3, #1
 8008d92:	63bb      	str	r3, [r7, #56]	; 0x38
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	3314      	adds	r3, #20
 8008d9a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008d9c:	623a      	str	r2, [r7, #32]
 8008d9e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008da0:	69f9      	ldr	r1, [r7, #28]
 8008da2:	6a3a      	ldr	r2, [r7, #32]
 8008da4:	e841 2300 	strex	r3, r2, [r1]
 8008da8:	61bb      	str	r3, [r7, #24]
   return(result);
 8008daa:	69bb      	ldr	r3, [r7, #24]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d1e5      	bne.n	8008d7c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	2220      	movs	r2, #32
 8008db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	2220      	movs	r2, #32
 8008dbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	2200      	movs	r2, #0
 8008dc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008dc8:	2303      	movs	r3, #3
 8008dca:	e00f      	b.n	8008dec <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	681a      	ldr	r2, [r3, #0]
 8008dd2:	68bb      	ldr	r3, [r7, #8]
 8008dd4:	4013      	ands	r3, r2
 8008dd6:	68ba      	ldr	r2, [r7, #8]
 8008dd8:	429a      	cmp	r2, r3
 8008dda:	bf0c      	ite	eq
 8008ddc:	2301      	moveq	r3, #1
 8008dde:	2300      	movne	r3, #0
 8008de0:	b2db      	uxtb	r3, r3
 8008de2:	461a      	mov	r2, r3
 8008de4:	79fb      	ldrb	r3, [r7, #7]
 8008de6:	429a      	cmp	r2, r3
 8008de8:	d09f      	beq.n	8008d2a <UART_WaitOnFlagUntilTimeout+0x12>
=======
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	b090      	sub	sp, #64	; 0x40
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	60f8      	str	r0, [r7, #12]
 8008cf0:	60b9      	str	r1, [r7, #8]
 8008cf2:	603b      	str	r3, [r7, #0]
 8008cf4:	4613      	mov	r3, r2
 8008cf6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008cf8:	e050      	b.n	8008d9c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008cfa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008cfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d00:	d04c      	beq.n	8008d9c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008d02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d007      	beq.n	8008d18 <UART_WaitOnFlagUntilTimeout+0x30>
 8008d08:	f7f9 f9d2 	bl	80020b0 <HAL_GetTick>
 8008d0c:	4602      	mov	r2, r0
 8008d0e:	683b      	ldr	r3, [r7, #0]
 8008d10:	1ad3      	subs	r3, r2, r3
 8008d12:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008d14:	429a      	cmp	r2, r3
 8008d16:	d241      	bcs.n	8008d9c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	330c      	adds	r3, #12
 8008d1e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d22:	e853 3f00 	ldrex	r3, [r3]
 8008d26:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d2a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008d2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	330c      	adds	r3, #12
 8008d36:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008d38:	637a      	str	r2, [r7, #52]	; 0x34
 8008d3a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d3c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008d3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008d40:	e841 2300 	strex	r3, r2, [r1]
 8008d44:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d1e5      	bne.n	8008d18 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	3314      	adds	r3, #20
 8008d52:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d54:	697b      	ldr	r3, [r7, #20]
 8008d56:	e853 3f00 	ldrex	r3, [r3]
 8008d5a:	613b      	str	r3, [r7, #16]
   return(result);
 8008d5c:	693b      	ldr	r3, [r7, #16]
 8008d5e:	f023 0301 	bic.w	r3, r3, #1
 8008d62:	63bb      	str	r3, [r7, #56]	; 0x38
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	3314      	adds	r3, #20
 8008d6a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008d6c:	623a      	str	r2, [r7, #32]
 8008d6e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d70:	69f9      	ldr	r1, [r7, #28]
 8008d72:	6a3a      	ldr	r2, [r7, #32]
 8008d74:	e841 2300 	strex	r3, r2, [r1]
 8008d78:	61bb      	str	r3, [r7, #24]
   return(result);
 8008d7a:	69bb      	ldr	r3, [r7, #24]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d1e5      	bne.n	8008d4c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	2220      	movs	r2, #32
 8008d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	2220      	movs	r2, #32
 8008d8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	2200      	movs	r2, #0
 8008d94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008d98:	2303      	movs	r3, #3
 8008d9a:	e00f      	b.n	8008dbc <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	681a      	ldr	r2, [r3, #0]
 8008da2:	68bb      	ldr	r3, [r7, #8]
 8008da4:	4013      	ands	r3, r2
 8008da6:	68ba      	ldr	r2, [r7, #8]
 8008da8:	429a      	cmp	r2, r3
 8008daa:	bf0c      	ite	eq
 8008dac:	2301      	moveq	r3, #1
 8008dae:	2300      	movne	r3, #0
 8008db0:	b2db      	uxtb	r3, r3
 8008db2:	461a      	mov	r2, r3
 8008db4:	79fb      	ldrb	r3, [r7, #7]
 8008db6:	429a      	cmp	r2, r3
 8008db8:	d09f      	beq.n	8008cfa <UART_WaitOnFlagUntilTimeout+0x12>
>>>>>>> Stashed changes
      }
    }
  }
  return HAL_OK;
<<<<<<< Updated upstream
 8008dea:	2300      	movs	r3, #0
}
 8008dec:	4618      	mov	r0, r3
 8008dee:	3740      	adds	r7, #64	; 0x40
 8008df0:	46bd      	mov	sp, r7
 8008df2:	bd80      	pop	{r7, pc}

08008df4 <UART_EndRxTransfer>:
=======
 8008dba:	2300      	movs	r3, #0
}
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	3740      	adds	r7, #64	; 0x40
 8008dc0:	46bd      	mov	sp, r7
 8008dc2:	bd80      	pop	{r7, pc}

08008dc4 <UART_EndRxTransfer>:
>>>>>>> Stashed changes
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 8008df4:	b480      	push	{r7}
 8008df6:	b095      	sub	sp, #84	; 0x54
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	330c      	adds	r3, #12
 8008e02:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e06:	e853 3f00 	ldrex	r3, [r3]
 8008e0a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e0e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008e12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	330c      	adds	r3, #12
 8008e1a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008e1c:	643a      	str	r2, [r7, #64]	; 0x40
 8008e1e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e20:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008e22:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008e24:	e841 2300 	strex	r3, r2, [r1]
 8008e28:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008e2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d1e5      	bne.n	8008dfc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	3314      	adds	r3, #20
 8008e36:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e38:	6a3b      	ldr	r3, [r7, #32]
 8008e3a:	e853 3f00 	ldrex	r3, [r3]
 8008e3e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008e40:	69fb      	ldr	r3, [r7, #28]
 8008e42:	f023 0301 	bic.w	r3, r3, #1
 8008e46:	64bb      	str	r3, [r7, #72]	; 0x48
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	3314      	adds	r3, #20
 8008e4e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008e50:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008e52:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e54:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008e56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008e58:	e841 2300 	strex	r3, r2, [r1]
 8008e5c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d1e5      	bne.n	8008e30 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e68:	2b01      	cmp	r3, #1
 8008e6a:	d119      	bne.n	8008ea0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	330c      	adds	r3, #12
 8008e72:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	e853 3f00 	ldrex	r3, [r3]
 8008e7a:	60bb      	str	r3, [r7, #8]
   return(result);
 8008e7c:	68bb      	ldr	r3, [r7, #8]
 8008e7e:	f023 0310 	bic.w	r3, r3, #16
 8008e82:	647b      	str	r3, [r7, #68]	; 0x44
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	330c      	adds	r3, #12
 8008e8a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008e8c:	61ba      	str	r2, [r7, #24]
 8008e8e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e90:	6979      	ldr	r1, [r7, #20]
 8008e92:	69ba      	ldr	r2, [r7, #24]
 8008e94:	e841 2300 	strex	r3, r2, [r1]
 8008e98:	613b      	str	r3, [r7, #16]
   return(result);
 8008e9a:	693b      	ldr	r3, [r7, #16]
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d1e5      	bne.n	8008e6c <UART_EndRxTransfer+0x78>
=======
 8008dc4:	b480      	push	{r7}
 8008dc6:	b095      	sub	sp, #84	; 0x54
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	330c      	adds	r3, #12
 8008dd2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008dd6:	e853 3f00 	ldrex	r3, [r3]
 8008dda:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dde:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008de2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	330c      	adds	r3, #12
 8008dea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008dec:	643a      	str	r2, [r7, #64]	; 0x40
 8008dee:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008df0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008df2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008df4:	e841 2300 	strex	r3, r2, [r1]
 8008df8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008dfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d1e5      	bne.n	8008dcc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	3314      	adds	r3, #20
 8008e06:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e08:	6a3b      	ldr	r3, [r7, #32]
 8008e0a:	e853 3f00 	ldrex	r3, [r3]
 8008e0e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008e10:	69fb      	ldr	r3, [r7, #28]
 8008e12:	f023 0301 	bic.w	r3, r3, #1
 8008e16:	64bb      	str	r3, [r7, #72]	; 0x48
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	3314      	adds	r3, #20
 8008e1e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008e20:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008e22:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e24:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008e26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008e28:	e841 2300 	strex	r3, r2, [r1]
 8008e2c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d1e5      	bne.n	8008e00 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e38:	2b01      	cmp	r3, #1
 8008e3a:	d119      	bne.n	8008e70 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	330c      	adds	r3, #12
 8008e42:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	e853 3f00 	ldrex	r3, [r3]
 8008e4a:	60bb      	str	r3, [r7, #8]
   return(result);
 8008e4c:	68bb      	ldr	r3, [r7, #8]
 8008e4e:	f023 0310 	bic.w	r3, r3, #16
 8008e52:	647b      	str	r3, [r7, #68]	; 0x44
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	330c      	adds	r3, #12
 8008e5a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008e5c:	61ba      	str	r2, [r7, #24]
 8008e5e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e60:	6979      	ldr	r1, [r7, #20]
 8008e62:	69ba      	ldr	r2, [r7, #24]
 8008e64:	e841 2300 	strex	r3, r2, [r1]
 8008e68:	613b      	str	r3, [r7, #16]
   return(result);
 8008e6a:	693b      	ldr	r3, [r7, #16]
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d1e5      	bne.n	8008e3c <UART_EndRxTransfer+0x78>
>>>>>>> Stashed changes
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
<<<<<<< Updated upstream
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	2220      	movs	r2, #32
 8008ea4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	2200      	movs	r2, #0
 8008eac:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008eae:	bf00      	nop
 8008eb0:	3754      	adds	r7, #84	; 0x54
 8008eb2:	46bd      	mov	sp, r7
 8008eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb8:	4770      	bx	lr

08008eba <UART_DMAAbortOnError>:
=======
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	2220      	movs	r2, #32
 8008e74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008e7e:	bf00      	nop
 8008e80:	3754      	adds	r7, #84	; 0x54
 8008e82:	46bd      	mov	sp, r7
 8008e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e88:	4770      	bx	lr

08008e8a <UART_DMAAbortOnError>:
>>>>>>> Stashed changes
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
<<<<<<< Updated upstream
 8008eba:	b580      	push	{r7, lr}
 8008ebc:	b084      	sub	sp, #16
 8008ebe:	af00      	add	r7, sp, #0
 8008ec0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ec6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	2200      	movs	r2, #0
 8008ecc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	2200      	movs	r2, #0
 8008ed2:	84da      	strh	r2, [r3, #38]	; 0x26
=======
 8008e8a:	b580      	push	{r7, lr}
 8008e8c:	b084      	sub	sp, #16
 8008e8e:	af00      	add	r7, sp, #0
 8008e90:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e96:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	2200      	movs	r2, #0
 8008e9c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	2200      	movs	r2, #0
 8008ea2:	84da      	strh	r2, [r3, #38]	; 0x26
>>>>>>> Stashed changes
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
<<<<<<< Updated upstream
 8008ed4:	68f8      	ldr	r0, [r7, #12]
 8008ed6:	f7ff ff09 	bl	8008cec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008eda:	bf00      	nop
 8008edc:	3710      	adds	r7, #16
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	bd80      	pop	{r7, pc}

08008ee2 <UART_Transmit_IT>:
=======
 8008ea4:	68f8      	ldr	r0, [r7, #12]
 8008ea6:	f7ff ff09 	bl	8008cbc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008eaa:	bf00      	nop
 8008eac:	3710      	adds	r7, #16
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	bd80      	pop	{r7, pc}

08008eb2 <UART_Transmit_IT>:
>>>>>>> Stashed changes
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 8008ee2:	b480      	push	{r7}
 8008ee4:	b085      	sub	sp, #20
 8008ee6:	af00      	add	r7, sp, #0
 8008ee8:	6078      	str	r0, [r7, #4]
=======
 8008eb2:	b480      	push	{r7}
 8008eb4:	b085      	sub	sp, #20
 8008eb6:	af00      	add	r7, sp, #0
 8008eb8:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
<<<<<<< Updated upstream
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ef0:	b2db      	uxtb	r3, r3
 8008ef2:	2b21      	cmp	r3, #33	; 0x21
 8008ef4:	d13e      	bne.n	8008f74 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	689b      	ldr	r3, [r3, #8]
 8008efa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008efe:	d114      	bne.n	8008f2a <UART_Transmit_IT+0x48>
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	691b      	ldr	r3, [r3, #16]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d110      	bne.n	8008f2a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	6a1b      	ldr	r3, [r3, #32]
 8008f0c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	881b      	ldrh	r3, [r3, #0]
 8008f12:	461a      	mov	r2, r3
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008f1c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	6a1b      	ldr	r3, [r3, #32]
 8008f22:	1c9a      	adds	r2, r3, #2
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	621a      	str	r2, [r3, #32]
 8008f28:	e008      	b.n	8008f3c <UART_Transmit_IT+0x5a>
=======
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ec0:	b2db      	uxtb	r3, r3
 8008ec2:	2b21      	cmp	r3, #33	; 0x21
 8008ec4:	d13e      	bne.n	8008f44 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	689b      	ldr	r3, [r3, #8]
 8008eca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ece:	d114      	bne.n	8008efa <UART_Transmit_IT+0x48>
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	691b      	ldr	r3, [r3, #16]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d110      	bne.n	8008efa <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	6a1b      	ldr	r3, [r3, #32]
 8008edc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	881b      	ldrh	r3, [r3, #0]
 8008ee2:	461a      	mov	r2, r3
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008eec:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	6a1b      	ldr	r3, [r3, #32]
 8008ef2:	1c9a      	adds	r2, r3, #2
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	621a      	str	r2, [r3, #32]
 8008ef8:	e008      	b.n	8008f0c <UART_Transmit_IT+0x5a>
>>>>>>> Stashed changes
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
<<<<<<< Updated upstream
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	6a1b      	ldr	r3, [r3, #32]
 8008f2e:	1c59      	adds	r1, r3, #1
 8008f30:	687a      	ldr	r2, [r7, #4]
 8008f32:	6211      	str	r1, [r2, #32]
 8008f34:	781a      	ldrb	r2, [r3, #0]
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008f40:	b29b      	uxth	r3, r3
 8008f42:	3b01      	subs	r3, #1
 8008f44:	b29b      	uxth	r3, r3
 8008f46:	687a      	ldr	r2, [r7, #4]
 8008f48:	4619      	mov	r1, r3
 8008f4a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d10f      	bne.n	8008f70 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	68da      	ldr	r2, [r3, #12]
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008f5e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	68da      	ldr	r2, [r3, #12]
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008f6e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008f70:	2300      	movs	r3, #0
 8008f72:	e000      	b.n	8008f76 <UART_Transmit_IT+0x94>
=======
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	6a1b      	ldr	r3, [r3, #32]
 8008efe:	1c59      	adds	r1, r3, #1
 8008f00:	687a      	ldr	r2, [r7, #4]
 8008f02:	6211      	str	r1, [r2, #32]
 8008f04:	781a      	ldrb	r2, [r3, #0]
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008f10:	b29b      	uxth	r3, r3
 8008f12:	3b01      	subs	r3, #1
 8008f14:	b29b      	uxth	r3, r3
 8008f16:	687a      	ldr	r2, [r7, #4]
 8008f18:	4619      	mov	r1, r3
 8008f1a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d10f      	bne.n	8008f40 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	68da      	ldr	r2, [r3, #12]
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008f2e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	68da      	ldr	r2, [r3, #12]
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008f3e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008f40:	2300      	movs	r3, #0
 8008f42:	e000      	b.n	8008f46 <UART_Transmit_IT+0x94>
>>>>>>> Stashed changes
  }
  else
  {
    return HAL_BUSY;
<<<<<<< Updated upstream
 8008f74:	2302      	movs	r3, #2
  }
}
 8008f76:	4618      	mov	r0, r3
 8008f78:	3714      	adds	r7, #20
 8008f7a:	46bd      	mov	sp, r7
 8008f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f80:	4770      	bx	lr

08008f82 <UART_EndTransmit_IT>:
=======
 8008f44:	2302      	movs	r3, #2
  }
}
 8008f46:	4618      	mov	r0, r3
 8008f48:	3714      	adds	r7, #20
 8008f4a:	46bd      	mov	sp, r7
 8008f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f50:	4770      	bx	lr

08008f52 <UART_EndTransmit_IT>:
>>>>>>> Stashed changes
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 8008f82:	b580      	push	{r7, lr}
 8008f84:	b082      	sub	sp, #8
 8008f86:	af00      	add	r7, sp, #0
 8008f88:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	68da      	ldr	r2, [r3, #12]
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008f98:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	2220      	movs	r2, #32
 8008f9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
=======
 8008f52:	b580      	push	{r7, lr}
 8008f54:	b082      	sub	sp, #8
 8008f56:	af00      	add	r7, sp, #0
 8008f58:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	68da      	ldr	r2, [r3, #12]
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008f68:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	2220      	movs	r2, #32
 8008f6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
>>>>>>> Stashed changes
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
<<<<<<< Updated upstream
 8008fa2:	6878      	ldr	r0, [r7, #4]
 8008fa4:	f7ff fe8e 	bl	8008cc4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008fa8:	2300      	movs	r3, #0
}
 8008faa:	4618      	mov	r0, r3
 8008fac:	3708      	adds	r7, #8
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	bd80      	pop	{r7, pc}

08008fb2 <UART_Receive_IT>:
=======
 8008f72:	6878      	ldr	r0, [r7, #4]
 8008f74:	f7ff fe8e 	bl	8008c94 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008f78:	2300      	movs	r3, #0
}
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	3708      	adds	r7, #8
 8008f7e:	46bd      	mov	sp, r7
 8008f80:	bd80      	pop	{r7, pc}

08008f82 <UART_Receive_IT>:
>>>>>>> Stashed changes
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 8008fb2:	b580      	push	{r7, lr}
 8008fb4:	b08c      	sub	sp, #48	; 0x30
 8008fb6:	af00      	add	r7, sp, #0
 8008fb8:	6078      	str	r0, [r7, #4]
=======
 8008f82:	b580      	push	{r7, lr}
 8008f84:	b08c      	sub	sp, #48	; 0x30
 8008f86:	af00      	add	r7, sp, #0
 8008f88:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
<<<<<<< Updated upstream
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008fc0:	b2db      	uxtb	r3, r3
 8008fc2:	2b22      	cmp	r3, #34	; 0x22
 8008fc4:	f040 80ab 	bne.w	800911e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	689b      	ldr	r3, [r3, #8]
 8008fcc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008fd0:	d117      	bne.n	8009002 <UART_Receive_IT+0x50>
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	691b      	ldr	r3, [r3, #16]
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d113      	bne.n	8009002 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008fda:	2300      	movs	r3, #0
 8008fdc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fe2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	685b      	ldr	r3, [r3, #4]
 8008fea:	b29b      	uxth	r3, r3
 8008fec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ff0:	b29a      	uxth	r2, r3
 8008ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ff4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ffa:	1c9a      	adds	r2, r3, #2
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	629a      	str	r2, [r3, #40]	; 0x28
 8009000:	e026      	b.n	8009050 <UART_Receive_IT+0x9e>
=======
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008f90:	b2db      	uxtb	r3, r3
 8008f92:	2b22      	cmp	r3, #34	; 0x22
 8008f94:	f040 80ab 	bne.w	80090ee <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	689b      	ldr	r3, [r3, #8]
 8008f9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008fa0:	d117      	bne.n	8008fd2 <UART_Receive_IT+0x50>
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	691b      	ldr	r3, [r3, #16]
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d113      	bne.n	8008fd2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008faa:	2300      	movs	r3, #0
 8008fac:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fb2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	685b      	ldr	r3, [r3, #4]
 8008fba:	b29b      	uxth	r3, r3
 8008fbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008fc0:	b29a      	uxth	r2, r3
 8008fc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fc4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fca:	1c9a      	adds	r2, r3, #2
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	629a      	str	r2, [r3, #40]	; 0x28
 8008fd0:	e026      	b.n	8009020 <UART_Receive_IT+0x9e>
>>>>>>> Stashed changes
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
<<<<<<< Updated upstream
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009006:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8009008:	2300      	movs	r3, #0
 800900a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	689b      	ldr	r3, [r3, #8]
 8009010:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009014:	d007      	beq.n	8009026 <UART_Receive_IT+0x74>
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	689b      	ldr	r3, [r3, #8]
 800901a:	2b00      	cmp	r3, #0
 800901c:	d10a      	bne.n	8009034 <UART_Receive_IT+0x82>
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	691b      	ldr	r3, [r3, #16]
 8009022:	2b00      	cmp	r3, #0
 8009024:	d106      	bne.n	8009034 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	685b      	ldr	r3, [r3, #4]
 800902c:	b2da      	uxtb	r2, r3
 800902e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009030:	701a      	strb	r2, [r3, #0]
 8009032:	e008      	b.n	8009046 <UART_Receive_IT+0x94>
=======
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fd6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008fd8:	2300      	movs	r3, #0
 8008fda:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	689b      	ldr	r3, [r3, #8]
 8008fe0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008fe4:	d007      	beq.n	8008ff6 <UART_Receive_IT+0x74>
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	689b      	ldr	r3, [r3, #8]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d10a      	bne.n	8009004 <UART_Receive_IT+0x82>
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	691b      	ldr	r3, [r3, #16]
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d106      	bne.n	8009004 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	685b      	ldr	r3, [r3, #4]
 8008ffc:	b2da      	uxtb	r2, r3
 8008ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009000:	701a      	strb	r2, [r3, #0]
 8009002:	e008      	b.n	8009016 <UART_Receive_IT+0x94>
>>>>>>> Stashed changes
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
<<<<<<< Updated upstream
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	685b      	ldr	r3, [r3, #4]
 800903a:	b2db      	uxtb	r3, r3
 800903c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009040:	b2da      	uxtb	r2, r3
 8009042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009044:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800904a:	1c5a      	adds	r2, r3, #1
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009054:	b29b      	uxth	r3, r3
 8009056:	3b01      	subs	r3, #1
 8009058:	b29b      	uxth	r3, r3
 800905a:	687a      	ldr	r2, [r7, #4]
 800905c:	4619      	mov	r1, r3
 800905e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009060:	2b00      	cmp	r3, #0
 8009062:	d15a      	bne.n	800911a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	68da      	ldr	r2, [r3, #12]
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	f022 0220 	bic.w	r2, r2, #32
 8009072:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	68da      	ldr	r2, [r3, #12]
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009082:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	695a      	ldr	r2, [r3, #20]
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	f022 0201 	bic.w	r2, r2, #1
 8009092:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	2220      	movs	r2, #32
 8009098:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
=======
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	685b      	ldr	r3, [r3, #4]
 800900a:	b2db      	uxtb	r3, r3
 800900c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009010:	b2da      	uxtb	r2, r3
 8009012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009014:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800901a:	1c5a      	adds	r2, r3, #1
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009024:	b29b      	uxth	r3, r3
 8009026:	3b01      	subs	r3, #1
 8009028:	b29b      	uxth	r3, r3
 800902a:	687a      	ldr	r2, [r7, #4]
 800902c:	4619      	mov	r1, r3
 800902e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009030:	2b00      	cmp	r3, #0
 8009032:	d15a      	bne.n	80090ea <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	68da      	ldr	r2, [r3, #12]
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	f022 0220 	bic.w	r2, r2, #32
 8009042:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	68da      	ldr	r2, [r3, #12]
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009052:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	695a      	ldr	r2, [r3, #20]
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	f022 0201 	bic.w	r2, r2, #1
 8009062:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	2220      	movs	r2, #32
 8009068:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
>>>>>>> Stashed changes

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
<<<<<<< Updated upstream
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090a0:	2b01      	cmp	r3, #1
 80090a2:	d135      	bne.n	8009110 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	2200      	movs	r2, #0
 80090a8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	330c      	adds	r3, #12
 80090b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090b2:	697b      	ldr	r3, [r7, #20]
 80090b4:	e853 3f00 	ldrex	r3, [r3]
 80090b8:	613b      	str	r3, [r7, #16]
   return(result);
 80090ba:	693b      	ldr	r3, [r7, #16]
 80090bc:	f023 0310 	bic.w	r3, r3, #16
 80090c0:	627b      	str	r3, [r7, #36]	; 0x24
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	330c      	adds	r3, #12
 80090c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80090ca:	623a      	str	r2, [r7, #32]
 80090cc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090ce:	69f9      	ldr	r1, [r7, #28]
 80090d0:	6a3a      	ldr	r2, [r7, #32]
 80090d2:	e841 2300 	strex	r3, r2, [r1]
 80090d6:	61bb      	str	r3, [r7, #24]
   return(result);
 80090d8:	69bb      	ldr	r3, [r7, #24]
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d1e5      	bne.n	80090aa <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	f003 0310 	and.w	r3, r3, #16
 80090e8:	2b10      	cmp	r3, #16
 80090ea:	d10a      	bne.n	8009102 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80090ec:	2300      	movs	r3, #0
 80090ee:	60fb      	str	r3, [r7, #12]
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	60fb      	str	r3, [r7, #12]
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	685b      	ldr	r3, [r3, #4]
 80090fe:	60fb      	str	r3, [r7, #12]
 8009100:	68fb      	ldr	r3, [r7, #12]
=======
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009070:	2b01      	cmp	r3, #1
 8009072:	d135      	bne.n	80090e0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	2200      	movs	r2, #0
 8009078:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	330c      	adds	r3, #12
 8009080:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009082:	697b      	ldr	r3, [r7, #20]
 8009084:	e853 3f00 	ldrex	r3, [r3]
 8009088:	613b      	str	r3, [r7, #16]
   return(result);
 800908a:	693b      	ldr	r3, [r7, #16]
 800908c:	f023 0310 	bic.w	r3, r3, #16
 8009090:	627b      	str	r3, [r7, #36]	; 0x24
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	330c      	adds	r3, #12
 8009098:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800909a:	623a      	str	r2, [r7, #32]
 800909c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800909e:	69f9      	ldr	r1, [r7, #28]
 80090a0:	6a3a      	ldr	r2, [r7, #32]
 80090a2:	e841 2300 	strex	r3, r2, [r1]
 80090a6:	61bb      	str	r3, [r7, #24]
   return(result);
 80090a8:	69bb      	ldr	r3, [r7, #24]
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d1e5      	bne.n	800907a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	f003 0310 	and.w	r3, r3, #16
 80090b8:	2b10      	cmp	r3, #16
 80090ba:	d10a      	bne.n	80090d2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80090bc:	2300      	movs	r3, #0
 80090be:	60fb      	str	r3, [r7, #12]
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	60fb      	str	r3, [r7, #12]
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	685b      	ldr	r3, [r3, #4]
 80090ce:	60fb      	str	r3, [r7, #12]
 80090d0:	68fb      	ldr	r3, [r7, #12]
>>>>>>> Stashed changes
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
<<<<<<< Updated upstream
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009106:	4619      	mov	r1, r3
 8009108:	6878      	ldr	r0, [r7, #4]
 800910a:	f7ff fdf9 	bl	8008d00 <HAL_UARTEx_RxEventCallback>
 800910e:	e002      	b.n	8009116 <UART_Receive_IT+0x164>
=======
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80090d6:	4619      	mov	r1, r3
 80090d8:	6878      	ldr	r0, [r7, #4]
 80090da:	f7ff fdf9 	bl	8008cd0 <HAL_UARTEx_RxEventCallback>
 80090de:	e002      	b.n	80090e6 <UART_Receive_IT+0x164>
>>>>>>> Stashed changes
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
<<<<<<< Updated upstream
 8009110:	6878      	ldr	r0, [r7, #4]
 8009112:	f7ff fde1 	bl	8008cd8 <HAL_UART_RxCpltCallback>
=======
 80090e0:	6878      	ldr	r0, [r7, #4]
 80090e2:	f7ff fde1 	bl	8008ca8 <HAL_UART_RxCpltCallback>
>>>>>>> Stashed changes
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
<<<<<<< Updated upstream
 8009116:	2300      	movs	r3, #0
 8009118:	e002      	b.n	8009120 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800911a:	2300      	movs	r3, #0
 800911c:	e000      	b.n	8009120 <UART_Receive_IT+0x16e>
=======
 80090e6:	2300      	movs	r3, #0
 80090e8:	e002      	b.n	80090f0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80090ea:	2300      	movs	r3, #0
 80090ec:	e000      	b.n	80090f0 <UART_Receive_IT+0x16e>
>>>>>>> Stashed changes
  }
  else
  {
    return HAL_BUSY;
<<<<<<< Updated upstream
 800911e:	2302      	movs	r3, #2
  }
}
 8009120:	4618      	mov	r0, r3
 8009122:	3730      	adds	r7, #48	; 0x30
 8009124:	46bd      	mov	sp, r7
 8009126:	bd80      	pop	{r7, pc}

08009128 <UART_SetConfig>:
=======
 80090ee:	2302      	movs	r3, #2
  }
}
 80090f0:	4618      	mov	r0, r3
 80090f2:	3730      	adds	r7, #48	; 0x30
 80090f4:	46bd      	mov	sp, r7
 80090f6:	bd80      	pop	{r7, pc}

080090f8 <UART_SetConfig>:
>>>>>>> Stashed changes
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 8009128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800912c:	b09f      	sub	sp, #124	; 0x7c
 800912e:	af00      	add	r7, sp, #0
 8009130:	66f8      	str	r0, [r7, #108]	; 0x6c
=======
 80090f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090fc:	b09f      	sub	sp, #124	; 0x7c
 80090fe:	af00      	add	r7, sp, #0
 8009100:	66f8      	str	r0, [r7, #108]	; 0x6c
>>>>>>> Stashed changes
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
<<<<<<< Updated upstream
 8009132:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	691b      	ldr	r3, [r3, #16]
 8009138:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800913c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800913e:	68d9      	ldr	r1, [r3, #12]
 8009140:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009142:	681a      	ldr	r2, [r3, #0]
 8009144:	ea40 0301 	orr.w	r3, r0, r1
 8009148:	6113      	str	r3, [r2, #16]
=======
 8009102:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	691b      	ldr	r3, [r3, #16]
 8009108:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800910c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800910e:	68d9      	ldr	r1, [r3, #12]
 8009110:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009112:	681a      	ldr	r2, [r3, #0]
 8009114:	ea40 0301 	orr.w	r3, r0, r1
 8009118:	6113      	str	r3, [r2, #16]
>>>>>>> Stashed changes
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
<<<<<<< Updated upstream
 800914a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800914c:	689a      	ldr	r2, [r3, #8]
 800914e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009150:	691b      	ldr	r3, [r3, #16]
 8009152:	431a      	orrs	r2, r3
 8009154:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009156:	695b      	ldr	r3, [r3, #20]
 8009158:	431a      	orrs	r2, r3
 800915a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800915c:	69db      	ldr	r3, [r3, #28]
 800915e:	4313      	orrs	r3, r2
 8009160:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8009162:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	68db      	ldr	r3, [r3, #12]
 8009168:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800916c:	f021 010c 	bic.w	r1, r1, #12
 8009170:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009172:	681a      	ldr	r2, [r3, #0]
 8009174:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009176:	430b      	orrs	r3, r1
 8009178:	60d3      	str	r3, [r2, #12]
=======
 800911a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800911c:	689a      	ldr	r2, [r3, #8]
 800911e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009120:	691b      	ldr	r3, [r3, #16]
 8009122:	431a      	orrs	r2, r3
 8009124:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009126:	695b      	ldr	r3, [r3, #20]
 8009128:	431a      	orrs	r2, r3
 800912a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800912c:	69db      	ldr	r3, [r3, #28]
 800912e:	4313      	orrs	r3, r2
 8009130:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8009132:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	68db      	ldr	r3, [r3, #12]
 8009138:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800913c:	f021 010c 	bic.w	r1, r1, #12
 8009140:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009142:	681a      	ldr	r2, [r3, #0]
 8009144:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009146:	430b      	orrs	r3, r1
 8009148:	60d3      	str	r3, [r2, #12]
>>>>>>> Stashed changes
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
<<<<<<< Updated upstream
 800917a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	695b      	ldr	r3, [r3, #20]
 8009180:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009184:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009186:	6999      	ldr	r1, [r3, #24]
 8009188:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800918a:	681a      	ldr	r2, [r3, #0]
 800918c:	ea40 0301 	orr.w	r3, r0, r1
 8009190:	6153      	str	r3, [r2, #20]
=======
 800914a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	695b      	ldr	r3, [r3, #20]
 8009150:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009154:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009156:	6999      	ldr	r1, [r3, #24]
 8009158:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800915a:	681a      	ldr	r2, [r3, #0]
 800915c:	ea40 0301 	orr.w	r3, r0, r1
 8009160:	6153      	str	r3, [r2, #20]
>>>>>>> Stashed changes
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
<<<<<<< Updated upstream
 8009192:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009194:	681a      	ldr	r2, [r3, #0]
 8009196:	4bc5      	ldr	r3, [pc, #788]	; (80094ac <UART_SetConfig+0x384>)
 8009198:	429a      	cmp	r2, r3
 800919a:	d004      	beq.n	80091a6 <UART_SetConfig+0x7e>
 800919c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800919e:	681a      	ldr	r2, [r3, #0]
 80091a0:	4bc3      	ldr	r3, [pc, #780]	; (80094b0 <UART_SetConfig+0x388>)
 80091a2:	429a      	cmp	r2, r3
 80091a4:	d103      	bne.n	80091ae <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80091a6:	f7fc ff6d 	bl	8006084 <HAL_RCC_GetPCLK2Freq>
 80091aa:	6778      	str	r0, [r7, #116]	; 0x74
 80091ac:	e002      	b.n	80091b4 <UART_SetConfig+0x8c>
=======
 8009162:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009164:	681a      	ldr	r2, [r3, #0]
 8009166:	4bc5      	ldr	r3, [pc, #788]	; (800947c <UART_SetConfig+0x384>)
 8009168:	429a      	cmp	r2, r3
 800916a:	d004      	beq.n	8009176 <UART_SetConfig+0x7e>
 800916c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800916e:	681a      	ldr	r2, [r3, #0]
 8009170:	4bc3      	ldr	r3, [pc, #780]	; (8009480 <UART_SetConfig+0x388>)
 8009172:	429a      	cmp	r2, r3
 8009174:	d103      	bne.n	800917e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009176:	f7fc ff6d 	bl	8006054 <HAL_RCC_GetPCLK2Freq>
 800917a:	6778      	str	r0, [r7, #116]	; 0x74
 800917c:	e002      	b.n	8009184 <UART_SetConfig+0x8c>
>>>>>>> Stashed changes
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
<<<<<<< Updated upstream
 80091ae:	f7fc ff55 	bl	800605c <HAL_RCC_GetPCLK1Freq>
 80091b2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80091b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80091b6:	69db      	ldr	r3, [r3, #28]
 80091b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80091bc:	f040 80b6 	bne.w	800932c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80091c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80091c2:	461c      	mov	r4, r3
 80091c4:	f04f 0500 	mov.w	r5, #0
 80091c8:	4622      	mov	r2, r4
 80091ca:	462b      	mov	r3, r5
 80091cc:	1891      	adds	r1, r2, r2
 80091ce:	6439      	str	r1, [r7, #64]	; 0x40
 80091d0:	415b      	adcs	r3, r3
 80091d2:	647b      	str	r3, [r7, #68]	; 0x44
 80091d4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80091d8:	1912      	adds	r2, r2, r4
 80091da:	eb45 0303 	adc.w	r3, r5, r3
 80091de:	f04f 0000 	mov.w	r0, #0
 80091e2:	f04f 0100 	mov.w	r1, #0
 80091e6:	00d9      	lsls	r1, r3, #3
 80091e8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80091ec:	00d0      	lsls	r0, r2, #3
 80091ee:	4602      	mov	r2, r0
 80091f0:	460b      	mov	r3, r1
 80091f2:	1911      	adds	r1, r2, r4
 80091f4:	6639      	str	r1, [r7, #96]	; 0x60
 80091f6:	416b      	adcs	r3, r5
 80091f8:	667b      	str	r3, [r7, #100]	; 0x64
 80091fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80091fc:	685b      	ldr	r3, [r3, #4]
 80091fe:	461a      	mov	r2, r3
 8009200:	f04f 0300 	mov.w	r3, #0
 8009204:	1891      	adds	r1, r2, r2
 8009206:	63b9      	str	r1, [r7, #56]	; 0x38
 8009208:	415b      	adcs	r3, r3
 800920a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800920c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009210:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8009214:	f7f7 f83c 	bl	8000290 <__aeabi_uldivmod>
 8009218:	4602      	mov	r2, r0
 800921a:	460b      	mov	r3, r1
 800921c:	4ba5      	ldr	r3, [pc, #660]	; (80094b4 <UART_SetConfig+0x38c>)
 800921e:	fba3 2302 	umull	r2, r3, r3, r2
 8009222:	095b      	lsrs	r3, r3, #5
 8009224:	011e      	lsls	r6, r3, #4
 8009226:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009228:	461c      	mov	r4, r3
 800922a:	f04f 0500 	mov.w	r5, #0
 800922e:	4622      	mov	r2, r4
 8009230:	462b      	mov	r3, r5
 8009232:	1891      	adds	r1, r2, r2
 8009234:	6339      	str	r1, [r7, #48]	; 0x30
 8009236:	415b      	adcs	r3, r3
 8009238:	637b      	str	r3, [r7, #52]	; 0x34
 800923a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800923e:	1912      	adds	r2, r2, r4
 8009240:	eb45 0303 	adc.w	r3, r5, r3
 8009244:	f04f 0000 	mov.w	r0, #0
 8009248:	f04f 0100 	mov.w	r1, #0
 800924c:	00d9      	lsls	r1, r3, #3
 800924e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009252:	00d0      	lsls	r0, r2, #3
 8009254:	4602      	mov	r2, r0
 8009256:	460b      	mov	r3, r1
 8009258:	1911      	adds	r1, r2, r4
 800925a:	65b9      	str	r1, [r7, #88]	; 0x58
 800925c:	416b      	adcs	r3, r5
 800925e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009260:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009262:	685b      	ldr	r3, [r3, #4]
 8009264:	461a      	mov	r2, r3
 8009266:	f04f 0300 	mov.w	r3, #0
 800926a:	1891      	adds	r1, r2, r2
 800926c:	62b9      	str	r1, [r7, #40]	; 0x28
 800926e:	415b      	adcs	r3, r3
 8009270:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009272:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009276:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800927a:	f7f7 f809 	bl	8000290 <__aeabi_uldivmod>
 800927e:	4602      	mov	r2, r0
 8009280:	460b      	mov	r3, r1
 8009282:	4b8c      	ldr	r3, [pc, #560]	; (80094b4 <UART_SetConfig+0x38c>)
 8009284:	fba3 1302 	umull	r1, r3, r3, r2
 8009288:	095b      	lsrs	r3, r3, #5
 800928a:	2164      	movs	r1, #100	; 0x64
 800928c:	fb01 f303 	mul.w	r3, r1, r3
 8009290:	1ad3      	subs	r3, r2, r3
 8009292:	00db      	lsls	r3, r3, #3
 8009294:	3332      	adds	r3, #50	; 0x32
 8009296:	4a87      	ldr	r2, [pc, #540]	; (80094b4 <UART_SetConfig+0x38c>)
 8009298:	fba2 2303 	umull	r2, r3, r2, r3
 800929c:	095b      	lsrs	r3, r3, #5
 800929e:	005b      	lsls	r3, r3, #1
 80092a0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80092a4:	441e      	add	r6, r3
 80092a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80092a8:	4618      	mov	r0, r3
 80092aa:	f04f 0100 	mov.w	r1, #0
 80092ae:	4602      	mov	r2, r0
 80092b0:	460b      	mov	r3, r1
 80092b2:	1894      	adds	r4, r2, r2
 80092b4:	623c      	str	r4, [r7, #32]
 80092b6:	415b      	adcs	r3, r3
 80092b8:	627b      	str	r3, [r7, #36]	; 0x24
 80092ba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80092be:	1812      	adds	r2, r2, r0
 80092c0:	eb41 0303 	adc.w	r3, r1, r3
 80092c4:	f04f 0400 	mov.w	r4, #0
 80092c8:	f04f 0500 	mov.w	r5, #0
 80092cc:	00dd      	lsls	r5, r3, #3
 80092ce:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80092d2:	00d4      	lsls	r4, r2, #3
 80092d4:	4622      	mov	r2, r4
 80092d6:	462b      	mov	r3, r5
 80092d8:	1814      	adds	r4, r2, r0
 80092da:	653c      	str	r4, [r7, #80]	; 0x50
 80092dc:	414b      	adcs	r3, r1
 80092de:	657b      	str	r3, [r7, #84]	; 0x54
 80092e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80092e2:	685b      	ldr	r3, [r3, #4]
 80092e4:	461a      	mov	r2, r3
 80092e6:	f04f 0300 	mov.w	r3, #0
 80092ea:	1891      	adds	r1, r2, r2
 80092ec:	61b9      	str	r1, [r7, #24]
 80092ee:	415b      	adcs	r3, r3
 80092f0:	61fb      	str	r3, [r7, #28]
 80092f2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80092f6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80092fa:	f7f6 ffc9 	bl	8000290 <__aeabi_uldivmod>
 80092fe:	4602      	mov	r2, r0
 8009300:	460b      	mov	r3, r1
 8009302:	4b6c      	ldr	r3, [pc, #432]	; (80094b4 <UART_SetConfig+0x38c>)
 8009304:	fba3 1302 	umull	r1, r3, r3, r2
 8009308:	095b      	lsrs	r3, r3, #5
 800930a:	2164      	movs	r1, #100	; 0x64
 800930c:	fb01 f303 	mul.w	r3, r1, r3
 8009310:	1ad3      	subs	r3, r2, r3
 8009312:	00db      	lsls	r3, r3, #3
 8009314:	3332      	adds	r3, #50	; 0x32
 8009316:	4a67      	ldr	r2, [pc, #412]	; (80094b4 <UART_SetConfig+0x38c>)
 8009318:	fba2 2303 	umull	r2, r3, r2, r3
 800931c:	095b      	lsrs	r3, r3, #5
 800931e:	f003 0207 	and.w	r2, r3, #7
 8009322:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	4432      	add	r2, r6
 8009328:	609a      	str	r2, [r3, #8]
=======
 800917e:	f7fc ff55 	bl	800602c <HAL_RCC_GetPCLK1Freq>
 8009182:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009184:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009186:	69db      	ldr	r3, [r3, #28]
 8009188:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800918c:	f040 80b6 	bne.w	80092fc <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009190:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009192:	461c      	mov	r4, r3
 8009194:	f04f 0500 	mov.w	r5, #0
 8009198:	4622      	mov	r2, r4
 800919a:	462b      	mov	r3, r5
 800919c:	1891      	adds	r1, r2, r2
 800919e:	6439      	str	r1, [r7, #64]	; 0x40
 80091a0:	415b      	adcs	r3, r3
 80091a2:	647b      	str	r3, [r7, #68]	; 0x44
 80091a4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80091a8:	1912      	adds	r2, r2, r4
 80091aa:	eb45 0303 	adc.w	r3, r5, r3
 80091ae:	f04f 0000 	mov.w	r0, #0
 80091b2:	f04f 0100 	mov.w	r1, #0
 80091b6:	00d9      	lsls	r1, r3, #3
 80091b8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80091bc:	00d0      	lsls	r0, r2, #3
 80091be:	4602      	mov	r2, r0
 80091c0:	460b      	mov	r3, r1
 80091c2:	1911      	adds	r1, r2, r4
 80091c4:	6639      	str	r1, [r7, #96]	; 0x60
 80091c6:	416b      	adcs	r3, r5
 80091c8:	667b      	str	r3, [r7, #100]	; 0x64
 80091ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80091cc:	685b      	ldr	r3, [r3, #4]
 80091ce:	461a      	mov	r2, r3
 80091d0:	f04f 0300 	mov.w	r3, #0
 80091d4:	1891      	adds	r1, r2, r2
 80091d6:	63b9      	str	r1, [r7, #56]	; 0x38
 80091d8:	415b      	adcs	r3, r3
 80091da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80091dc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80091e0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80091e4:	f7f7 f854 	bl	8000290 <__aeabi_uldivmod>
 80091e8:	4602      	mov	r2, r0
 80091ea:	460b      	mov	r3, r1
 80091ec:	4ba5      	ldr	r3, [pc, #660]	; (8009484 <UART_SetConfig+0x38c>)
 80091ee:	fba3 2302 	umull	r2, r3, r3, r2
 80091f2:	095b      	lsrs	r3, r3, #5
 80091f4:	011e      	lsls	r6, r3, #4
 80091f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80091f8:	461c      	mov	r4, r3
 80091fa:	f04f 0500 	mov.w	r5, #0
 80091fe:	4622      	mov	r2, r4
 8009200:	462b      	mov	r3, r5
 8009202:	1891      	adds	r1, r2, r2
 8009204:	6339      	str	r1, [r7, #48]	; 0x30
 8009206:	415b      	adcs	r3, r3
 8009208:	637b      	str	r3, [r7, #52]	; 0x34
 800920a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800920e:	1912      	adds	r2, r2, r4
 8009210:	eb45 0303 	adc.w	r3, r5, r3
 8009214:	f04f 0000 	mov.w	r0, #0
 8009218:	f04f 0100 	mov.w	r1, #0
 800921c:	00d9      	lsls	r1, r3, #3
 800921e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009222:	00d0      	lsls	r0, r2, #3
 8009224:	4602      	mov	r2, r0
 8009226:	460b      	mov	r3, r1
 8009228:	1911      	adds	r1, r2, r4
 800922a:	65b9      	str	r1, [r7, #88]	; 0x58
 800922c:	416b      	adcs	r3, r5
 800922e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009230:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009232:	685b      	ldr	r3, [r3, #4]
 8009234:	461a      	mov	r2, r3
 8009236:	f04f 0300 	mov.w	r3, #0
 800923a:	1891      	adds	r1, r2, r2
 800923c:	62b9      	str	r1, [r7, #40]	; 0x28
 800923e:	415b      	adcs	r3, r3
 8009240:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009242:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009246:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800924a:	f7f7 f821 	bl	8000290 <__aeabi_uldivmod>
 800924e:	4602      	mov	r2, r0
 8009250:	460b      	mov	r3, r1
 8009252:	4b8c      	ldr	r3, [pc, #560]	; (8009484 <UART_SetConfig+0x38c>)
 8009254:	fba3 1302 	umull	r1, r3, r3, r2
 8009258:	095b      	lsrs	r3, r3, #5
 800925a:	2164      	movs	r1, #100	; 0x64
 800925c:	fb01 f303 	mul.w	r3, r1, r3
 8009260:	1ad3      	subs	r3, r2, r3
 8009262:	00db      	lsls	r3, r3, #3
 8009264:	3332      	adds	r3, #50	; 0x32
 8009266:	4a87      	ldr	r2, [pc, #540]	; (8009484 <UART_SetConfig+0x38c>)
 8009268:	fba2 2303 	umull	r2, r3, r2, r3
 800926c:	095b      	lsrs	r3, r3, #5
 800926e:	005b      	lsls	r3, r3, #1
 8009270:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009274:	441e      	add	r6, r3
 8009276:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009278:	4618      	mov	r0, r3
 800927a:	f04f 0100 	mov.w	r1, #0
 800927e:	4602      	mov	r2, r0
 8009280:	460b      	mov	r3, r1
 8009282:	1894      	adds	r4, r2, r2
 8009284:	623c      	str	r4, [r7, #32]
 8009286:	415b      	adcs	r3, r3
 8009288:	627b      	str	r3, [r7, #36]	; 0x24
 800928a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800928e:	1812      	adds	r2, r2, r0
 8009290:	eb41 0303 	adc.w	r3, r1, r3
 8009294:	f04f 0400 	mov.w	r4, #0
 8009298:	f04f 0500 	mov.w	r5, #0
 800929c:	00dd      	lsls	r5, r3, #3
 800929e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80092a2:	00d4      	lsls	r4, r2, #3
 80092a4:	4622      	mov	r2, r4
 80092a6:	462b      	mov	r3, r5
 80092a8:	1814      	adds	r4, r2, r0
 80092aa:	653c      	str	r4, [r7, #80]	; 0x50
 80092ac:	414b      	adcs	r3, r1
 80092ae:	657b      	str	r3, [r7, #84]	; 0x54
 80092b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80092b2:	685b      	ldr	r3, [r3, #4]
 80092b4:	461a      	mov	r2, r3
 80092b6:	f04f 0300 	mov.w	r3, #0
 80092ba:	1891      	adds	r1, r2, r2
 80092bc:	61b9      	str	r1, [r7, #24]
 80092be:	415b      	adcs	r3, r3
 80092c0:	61fb      	str	r3, [r7, #28]
 80092c2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80092c6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80092ca:	f7f6 ffe1 	bl	8000290 <__aeabi_uldivmod>
 80092ce:	4602      	mov	r2, r0
 80092d0:	460b      	mov	r3, r1
 80092d2:	4b6c      	ldr	r3, [pc, #432]	; (8009484 <UART_SetConfig+0x38c>)
 80092d4:	fba3 1302 	umull	r1, r3, r3, r2
 80092d8:	095b      	lsrs	r3, r3, #5
 80092da:	2164      	movs	r1, #100	; 0x64
 80092dc:	fb01 f303 	mul.w	r3, r1, r3
 80092e0:	1ad3      	subs	r3, r2, r3
 80092e2:	00db      	lsls	r3, r3, #3
 80092e4:	3332      	adds	r3, #50	; 0x32
 80092e6:	4a67      	ldr	r2, [pc, #412]	; (8009484 <UART_SetConfig+0x38c>)
 80092e8:	fba2 2303 	umull	r2, r3, r2, r3
 80092ec:	095b      	lsrs	r3, r3, #5
 80092ee:	f003 0207 	and.w	r2, r3, #7
 80092f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	4432      	add	r2, r6
 80092f8:	609a      	str	r2, [r3, #8]
>>>>>>> Stashed changes
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
<<<<<<< Updated upstream
 800932a:	e0b9      	b.n	80094a0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800932c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800932e:	461c      	mov	r4, r3
 8009330:	f04f 0500 	mov.w	r5, #0
 8009334:	4622      	mov	r2, r4
 8009336:	462b      	mov	r3, r5
 8009338:	1891      	adds	r1, r2, r2
 800933a:	6139      	str	r1, [r7, #16]
 800933c:	415b      	adcs	r3, r3
 800933e:	617b      	str	r3, [r7, #20]
 8009340:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009344:	1912      	adds	r2, r2, r4
 8009346:	eb45 0303 	adc.w	r3, r5, r3
 800934a:	f04f 0000 	mov.w	r0, #0
 800934e:	f04f 0100 	mov.w	r1, #0
 8009352:	00d9      	lsls	r1, r3, #3
 8009354:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009358:	00d0      	lsls	r0, r2, #3
 800935a:	4602      	mov	r2, r0
 800935c:	460b      	mov	r3, r1
 800935e:	eb12 0804 	adds.w	r8, r2, r4
 8009362:	eb43 0905 	adc.w	r9, r3, r5
 8009366:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009368:	685b      	ldr	r3, [r3, #4]
 800936a:	4618      	mov	r0, r3
 800936c:	f04f 0100 	mov.w	r1, #0
 8009370:	f04f 0200 	mov.w	r2, #0
 8009374:	f04f 0300 	mov.w	r3, #0
 8009378:	008b      	lsls	r3, r1, #2
 800937a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800937e:	0082      	lsls	r2, r0, #2
 8009380:	4640      	mov	r0, r8
 8009382:	4649      	mov	r1, r9
 8009384:	f7f6 ff84 	bl	8000290 <__aeabi_uldivmod>
 8009388:	4602      	mov	r2, r0
 800938a:	460b      	mov	r3, r1
 800938c:	4b49      	ldr	r3, [pc, #292]	; (80094b4 <UART_SetConfig+0x38c>)
 800938e:	fba3 2302 	umull	r2, r3, r3, r2
 8009392:	095b      	lsrs	r3, r3, #5
 8009394:	011e      	lsls	r6, r3, #4
 8009396:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009398:	4618      	mov	r0, r3
 800939a:	f04f 0100 	mov.w	r1, #0
 800939e:	4602      	mov	r2, r0
 80093a0:	460b      	mov	r3, r1
 80093a2:	1894      	adds	r4, r2, r2
 80093a4:	60bc      	str	r4, [r7, #8]
 80093a6:	415b      	adcs	r3, r3
 80093a8:	60fb      	str	r3, [r7, #12]
 80093aa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80093ae:	1812      	adds	r2, r2, r0
 80093b0:	eb41 0303 	adc.w	r3, r1, r3
 80093b4:	f04f 0400 	mov.w	r4, #0
 80093b8:	f04f 0500 	mov.w	r5, #0
 80093bc:	00dd      	lsls	r5, r3, #3
 80093be:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80093c2:	00d4      	lsls	r4, r2, #3
 80093c4:	4622      	mov	r2, r4
 80093c6:	462b      	mov	r3, r5
 80093c8:	1814      	adds	r4, r2, r0
 80093ca:	64bc      	str	r4, [r7, #72]	; 0x48
 80093cc:	414b      	adcs	r3, r1
 80093ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80093d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80093d2:	685b      	ldr	r3, [r3, #4]
 80093d4:	4618      	mov	r0, r3
 80093d6:	f04f 0100 	mov.w	r1, #0
 80093da:	f04f 0200 	mov.w	r2, #0
 80093de:	f04f 0300 	mov.w	r3, #0
 80093e2:	008b      	lsls	r3, r1, #2
 80093e4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80093e8:	0082      	lsls	r2, r0, #2
 80093ea:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80093ee:	f7f6 ff4f 	bl	8000290 <__aeabi_uldivmod>
 80093f2:	4602      	mov	r2, r0
 80093f4:	460b      	mov	r3, r1
 80093f6:	4b2f      	ldr	r3, [pc, #188]	; (80094b4 <UART_SetConfig+0x38c>)
 80093f8:	fba3 1302 	umull	r1, r3, r3, r2
 80093fc:	095b      	lsrs	r3, r3, #5
 80093fe:	2164      	movs	r1, #100	; 0x64
 8009400:	fb01 f303 	mul.w	r3, r1, r3
 8009404:	1ad3      	subs	r3, r2, r3
 8009406:	011b      	lsls	r3, r3, #4
 8009408:	3332      	adds	r3, #50	; 0x32
 800940a:	4a2a      	ldr	r2, [pc, #168]	; (80094b4 <UART_SetConfig+0x38c>)
 800940c:	fba2 2303 	umull	r2, r3, r2, r3
 8009410:	095b      	lsrs	r3, r3, #5
 8009412:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009416:	441e      	add	r6, r3
 8009418:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800941a:	4618      	mov	r0, r3
 800941c:	f04f 0100 	mov.w	r1, #0
 8009420:	4602      	mov	r2, r0
 8009422:	460b      	mov	r3, r1
 8009424:	1894      	adds	r4, r2, r2
 8009426:	603c      	str	r4, [r7, #0]
 8009428:	415b      	adcs	r3, r3
 800942a:	607b      	str	r3, [r7, #4]
 800942c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009430:	1812      	adds	r2, r2, r0
 8009432:	eb41 0303 	adc.w	r3, r1, r3
 8009436:	f04f 0400 	mov.w	r4, #0
 800943a:	f04f 0500 	mov.w	r5, #0
 800943e:	00dd      	lsls	r5, r3, #3
 8009440:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009444:	00d4      	lsls	r4, r2, #3
 8009446:	4622      	mov	r2, r4
 8009448:	462b      	mov	r3, r5
 800944a:	eb12 0a00 	adds.w	sl, r2, r0
 800944e:	eb43 0b01 	adc.w	fp, r3, r1
 8009452:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009454:	685b      	ldr	r3, [r3, #4]
 8009456:	4618      	mov	r0, r3
 8009458:	f04f 0100 	mov.w	r1, #0
 800945c:	f04f 0200 	mov.w	r2, #0
 8009460:	f04f 0300 	mov.w	r3, #0
 8009464:	008b      	lsls	r3, r1, #2
 8009466:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800946a:	0082      	lsls	r2, r0, #2
 800946c:	4650      	mov	r0, sl
 800946e:	4659      	mov	r1, fp
 8009470:	f7f6 ff0e 	bl	8000290 <__aeabi_uldivmod>
 8009474:	4602      	mov	r2, r0
 8009476:	460b      	mov	r3, r1
 8009478:	4b0e      	ldr	r3, [pc, #56]	; (80094b4 <UART_SetConfig+0x38c>)
 800947a:	fba3 1302 	umull	r1, r3, r3, r2
 800947e:	095b      	lsrs	r3, r3, #5
 8009480:	2164      	movs	r1, #100	; 0x64
 8009482:	fb01 f303 	mul.w	r3, r1, r3
 8009486:	1ad3      	subs	r3, r2, r3
 8009488:	011b      	lsls	r3, r3, #4
 800948a:	3332      	adds	r3, #50	; 0x32
 800948c:	4a09      	ldr	r2, [pc, #36]	; (80094b4 <UART_SetConfig+0x38c>)
 800948e:	fba2 2303 	umull	r2, r3, r2, r3
 8009492:	095b      	lsrs	r3, r3, #5
 8009494:	f003 020f 	and.w	r2, r3, #15
 8009498:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	4432      	add	r2, r6
 800949e:	609a      	str	r2, [r3, #8]
}
 80094a0:	bf00      	nop
 80094a2:	377c      	adds	r7, #124	; 0x7c
 80094a4:	46bd      	mov	sp, r7
 80094a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094aa:	bf00      	nop
 80094ac:	40011000 	.word	0x40011000
 80094b0:	40011400 	.word	0x40011400
 80094b4:	51eb851f 	.word	0x51eb851f

080094b8 <SDIO_Init>:
=======
 80092fa:	e0b9      	b.n	8009470 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80092fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80092fe:	461c      	mov	r4, r3
 8009300:	f04f 0500 	mov.w	r5, #0
 8009304:	4622      	mov	r2, r4
 8009306:	462b      	mov	r3, r5
 8009308:	1891      	adds	r1, r2, r2
 800930a:	6139      	str	r1, [r7, #16]
 800930c:	415b      	adcs	r3, r3
 800930e:	617b      	str	r3, [r7, #20]
 8009310:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009314:	1912      	adds	r2, r2, r4
 8009316:	eb45 0303 	adc.w	r3, r5, r3
 800931a:	f04f 0000 	mov.w	r0, #0
 800931e:	f04f 0100 	mov.w	r1, #0
 8009322:	00d9      	lsls	r1, r3, #3
 8009324:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009328:	00d0      	lsls	r0, r2, #3
 800932a:	4602      	mov	r2, r0
 800932c:	460b      	mov	r3, r1
 800932e:	eb12 0804 	adds.w	r8, r2, r4
 8009332:	eb43 0905 	adc.w	r9, r3, r5
 8009336:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009338:	685b      	ldr	r3, [r3, #4]
 800933a:	4618      	mov	r0, r3
 800933c:	f04f 0100 	mov.w	r1, #0
 8009340:	f04f 0200 	mov.w	r2, #0
 8009344:	f04f 0300 	mov.w	r3, #0
 8009348:	008b      	lsls	r3, r1, #2
 800934a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800934e:	0082      	lsls	r2, r0, #2
 8009350:	4640      	mov	r0, r8
 8009352:	4649      	mov	r1, r9
 8009354:	f7f6 ff9c 	bl	8000290 <__aeabi_uldivmod>
 8009358:	4602      	mov	r2, r0
 800935a:	460b      	mov	r3, r1
 800935c:	4b49      	ldr	r3, [pc, #292]	; (8009484 <UART_SetConfig+0x38c>)
 800935e:	fba3 2302 	umull	r2, r3, r3, r2
 8009362:	095b      	lsrs	r3, r3, #5
 8009364:	011e      	lsls	r6, r3, #4
 8009366:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009368:	4618      	mov	r0, r3
 800936a:	f04f 0100 	mov.w	r1, #0
 800936e:	4602      	mov	r2, r0
 8009370:	460b      	mov	r3, r1
 8009372:	1894      	adds	r4, r2, r2
 8009374:	60bc      	str	r4, [r7, #8]
 8009376:	415b      	adcs	r3, r3
 8009378:	60fb      	str	r3, [r7, #12]
 800937a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800937e:	1812      	adds	r2, r2, r0
 8009380:	eb41 0303 	adc.w	r3, r1, r3
 8009384:	f04f 0400 	mov.w	r4, #0
 8009388:	f04f 0500 	mov.w	r5, #0
 800938c:	00dd      	lsls	r5, r3, #3
 800938e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009392:	00d4      	lsls	r4, r2, #3
 8009394:	4622      	mov	r2, r4
 8009396:	462b      	mov	r3, r5
 8009398:	1814      	adds	r4, r2, r0
 800939a:	64bc      	str	r4, [r7, #72]	; 0x48
 800939c:	414b      	adcs	r3, r1
 800939e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80093a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80093a2:	685b      	ldr	r3, [r3, #4]
 80093a4:	4618      	mov	r0, r3
 80093a6:	f04f 0100 	mov.w	r1, #0
 80093aa:	f04f 0200 	mov.w	r2, #0
 80093ae:	f04f 0300 	mov.w	r3, #0
 80093b2:	008b      	lsls	r3, r1, #2
 80093b4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80093b8:	0082      	lsls	r2, r0, #2
 80093ba:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80093be:	f7f6 ff67 	bl	8000290 <__aeabi_uldivmod>
 80093c2:	4602      	mov	r2, r0
 80093c4:	460b      	mov	r3, r1
 80093c6:	4b2f      	ldr	r3, [pc, #188]	; (8009484 <UART_SetConfig+0x38c>)
 80093c8:	fba3 1302 	umull	r1, r3, r3, r2
 80093cc:	095b      	lsrs	r3, r3, #5
 80093ce:	2164      	movs	r1, #100	; 0x64
 80093d0:	fb01 f303 	mul.w	r3, r1, r3
 80093d4:	1ad3      	subs	r3, r2, r3
 80093d6:	011b      	lsls	r3, r3, #4
 80093d8:	3332      	adds	r3, #50	; 0x32
 80093da:	4a2a      	ldr	r2, [pc, #168]	; (8009484 <UART_SetConfig+0x38c>)
 80093dc:	fba2 2303 	umull	r2, r3, r2, r3
 80093e0:	095b      	lsrs	r3, r3, #5
 80093e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80093e6:	441e      	add	r6, r3
 80093e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80093ea:	4618      	mov	r0, r3
 80093ec:	f04f 0100 	mov.w	r1, #0
 80093f0:	4602      	mov	r2, r0
 80093f2:	460b      	mov	r3, r1
 80093f4:	1894      	adds	r4, r2, r2
 80093f6:	603c      	str	r4, [r7, #0]
 80093f8:	415b      	adcs	r3, r3
 80093fa:	607b      	str	r3, [r7, #4]
 80093fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009400:	1812      	adds	r2, r2, r0
 8009402:	eb41 0303 	adc.w	r3, r1, r3
 8009406:	f04f 0400 	mov.w	r4, #0
 800940a:	f04f 0500 	mov.w	r5, #0
 800940e:	00dd      	lsls	r5, r3, #3
 8009410:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009414:	00d4      	lsls	r4, r2, #3
 8009416:	4622      	mov	r2, r4
 8009418:	462b      	mov	r3, r5
 800941a:	eb12 0a00 	adds.w	sl, r2, r0
 800941e:	eb43 0b01 	adc.w	fp, r3, r1
 8009422:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009424:	685b      	ldr	r3, [r3, #4]
 8009426:	4618      	mov	r0, r3
 8009428:	f04f 0100 	mov.w	r1, #0
 800942c:	f04f 0200 	mov.w	r2, #0
 8009430:	f04f 0300 	mov.w	r3, #0
 8009434:	008b      	lsls	r3, r1, #2
 8009436:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800943a:	0082      	lsls	r2, r0, #2
 800943c:	4650      	mov	r0, sl
 800943e:	4659      	mov	r1, fp
 8009440:	f7f6 ff26 	bl	8000290 <__aeabi_uldivmod>
 8009444:	4602      	mov	r2, r0
 8009446:	460b      	mov	r3, r1
 8009448:	4b0e      	ldr	r3, [pc, #56]	; (8009484 <UART_SetConfig+0x38c>)
 800944a:	fba3 1302 	umull	r1, r3, r3, r2
 800944e:	095b      	lsrs	r3, r3, #5
 8009450:	2164      	movs	r1, #100	; 0x64
 8009452:	fb01 f303 	mul.w	r3, r1, r3
 8009456:	1ad3      	subs	r3, r2, r3
 8009458:	011b      	lsls	r3, r3, #4
 800945a:	3332      	adds	r3, #50	; 0x32
 800945c:	4a09      	ldr	r2, [pc, #36]	; (8009484 <UART_SetConfig+0x38c>)
 800945e:	fba2 2303 	umull	r2, r3, r2, r3
 8009462:	095b      	lsrs	r3, r3, #5
 8009464:	f003 020f 	and.w	r2, r3, #15
 8009468:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	4432      	add	r2, r6
 800946e:	609a      	str	r2, [r3, #8]
}
 8009470:	bf00      	nop
 8009472:	377c      	adds	r7, #124	; 0x7c
 8009474:	46bd      	mov	sp, r7
 8009476:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800947a:	bf00      	nop
 800947c:	40011000 	.word	0x40011000
 8009480:	40011400 	.word	0x40011400
 8009484:	51eb851f 	.word	0x51eb851f

08009488 <SDIO_Init>:
>>>>>>> Stashed changes
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
<<<<<<< Updated upstream
 80094b8:	b084      	sub	sp, #16
 80094ba:	b480      	push	{r7}
 80094bc:	b085      	sub	sp, #20
 80094be:	af00      	add	r7, sp, #0
 80094c0:	6078      	str	r0, [r7, #4]
 80094c2:	f107 001c 	add.w	r0, r7, #28
 80094c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80094ca:	2300      	movs	r3, #0
 80094cc:	60fb      	str	r3, [r7, #12]
=======
 8009488:	b084      	sub	sp, #16
 800948a:	b480      	push	{r7}
 800948c:	b085      	sub	sp, #20
 800948e:	af00      	add	r7, sp, #0
 8009490:	6078      	str	r0, [r7, #4]
 8009492:	f107 001c 	add.w	r0, r7, #28
 8009496:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800949a:	2300      	movs	r3, #0
 800949c:	60fb      	str	r3, [r7, #12]
>>>>>>> Stashed changes
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
<<<<<<< Updated upstream
 80094ce:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80094d0:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80094d2:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80094d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 80094d6:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80094d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 80094da:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80094dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 80094de:	431a      	orrs	r2, r3
             Init.ClockDiv
 80094e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 80094e2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80094e4:	68fa      	ldr	r2, [r7, #12]
 80094e6:	4313      	orrs	r3, r2
 80094e8:	60fb      	str	r3, [r7, #12]
=======
 800949e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80094a0:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80094a2:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80094a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 80094a6:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80094a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 80094aa:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80094ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 80094ae:	431a      	orrs	r2, r3
             Init.ClockDiv
 80094b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 80094b2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80094b4:	68fa      	ldr	r2, [r7, #12]
 80094b6:	4313      	orrs	r3, r2
 80094b8:	60fb      	str	r3, [r7, #12]
>>>>>>> Stashed changes
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
<<<<<<< Updated upstream
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	685b      	ldr	r3, [r3, #4]
 80094ee:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 80094f2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80094f6:	68fa      	ldr	r2, [r7, #12]
 80094f8:	431a      	orrs	r2, r3
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80094fe:	2300      	movs	r3, #0
}
 8009500:	4618      	mov	r0, r3
 8009502:	3714      	adds	r7, #20
 8009504:	46bd      	mov	sp, r7
 8009506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800950a:	b004      	add	sp, #16
 800950c:	4770      	bx	lr

0800950e <SDIO_ReadFIFO>:
=======
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	685b      	ldr	r3, [r3, #4]
 80094be:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 80094c2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80094c6:	68fa      	ldr	r2, [r7, #12]
 80094c8:	431a      	orrs	r2, r3
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80094ce:	2300      	movs	r3, #0
}
 80094d0:	4618      	mov	r0, r3
 80094d2:	3714      	adds	r7, #20
 80094d4:	46bd      	mov	sp, r7
 80094d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094da:	b004      	add	sp, #16
 80094dc:	4770      	bx	lr

080094de <SDIO_ReadFIFO>:
>>>>>>> Stashed changes
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
<<<<<<< Updated upstream
 800950e:	b480      	push	{r7}
 8009510:	b083      	sub	sp, #12
 8009512:	af00      	add	r7, sp, #0
 8009514:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800951c:	4618      	mov	r0, r3
 800951e:	370c      	adds	r7, #12
 8009520:	46bd      	mov	sp, r7
 8009522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009526:	4770      	bx	lr

08009528 <SDIO_WriteFIFO>:
=======
 80094de:	b480      	push	{r7}
 80094e0:	b083      	sub	sp, #12
 80094e2:	af00      	add	r7, sp, #0
 80094e4:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80094ec:	4618      	mov	r0, r3
 80094ee:	370c      	adds	r7, #12
 80094f0:	46bd      	mov	sp, r7
 80094f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f6:	4770      	bx	lr

080094f8 <SDIO_WriteFIFO>:
>>>>>>> Stashed changes
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
<<<<<<< Updated upstream
 8009528:	b480      	push	{r7}
 800952a:	b083      	sub	sp, #12
 800952c:	af00      	add	r7, sp, #0
 800952e:	6078      	str	r0, [r7, #4]
 8009530:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8009532:	683b      	ldr	r3, [r7, #0]
 8009534:	681a      	ldr	r2, [r3, #0]
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800953c:	2300      	movs	r3, #0
}
 800953e:	4618      	mov	r0, r3
 8009540:	370c      	adds	r7, #12
 8009542:	46bd      	mov	sp, r7
 8009544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009548:	4770      	bx	lr

0800954a <SDIO_PowerState_ON>:
=======
 80094f8:	b480      	push	{r7}
 80094fa:	b083      	sub	sp, #12
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
 8009500:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8009502:	683b      	ldr	r3, [r7, #0]
 8009504:	681a      	ldr	r2, [r3, #0]
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800950c:	2300      	movs	r3, #0
}
 800950e:	4618      	mov	r0, r3
 8009510:	370c      	adds	r7, #12
 8009512:	46bd      	mov	sp, r7
 8009514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009518:	4770      	bx	lr

0800951a <SDIO_PowerState_ON>:
>>>>>>> Stashed changes
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
<<<<<<< Updated upstream
 800954a:	b580      	push	{r7, lr}
 800954c:	b082      	sub	sp, #8
 800954e:	af00      	add	r7, sp, #0
 8009550:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	2203      	movs	r2, #3
 8009556:	601a      	str	r2, [r3, #0]
=======
 800951a:	b580      	push	{r7, lr}
 800951c:	b082      	sub	sp, #8
 800951e:	af00      	add	r7, sp, #0
 8009520:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	2203      	movs	r2, #3
 8009526:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
<<<<<<< Updated upstream
 8009558:	2002      	movs	r0, #2
 800955a:	f7f8 fdb3 	bl	80020c4 <HAL_Delay>
  
  return HAL_OK;
 800955e:	2300      	movs	r3, #0
}
 8009560:	4618      	mov	r0, r3
 8009562:	3708      	adds	r7, #8
 8009564:	46bd      	mov	sp, r7
 8009566:	bd80      	pop	{r7, pc}

08009568 <SDIO_GetPowerState>:
=======
 8009528:	2002      	movs	r0, #2
 800952a:	f7f8 fdcd 	bl	80020c8 <HAL_Delay>
  
  return HAL_OK;
 800952e:	2300      	movs	r3, #0
}
 8009530:	4618      	mov	r0, r3
 8009532:	3708      	adds	r7, #8
 8009534:	46bd      	mov	sp, r7
 8009536:	bd80      	pop	{r7, pc}

08009538 <SDIO_GetPowerState>:
>>>>>>> Stashed changes
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
<<<<<<< Updated upstream
 8009568:	b480      	push	{r7}
 800956a:	b083      	sub	sp, #12
 800956c:	af00      	add	r7, sp, #0
 800956e:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	f003 0303 	and.w	r3, r3, #3
}
 8009578:	4618      	mov	r0, r3
 800957a:	370c      	adds	r7, #12
 800957c:	46bd      	mov	sp, r7
 800957e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009582:	4770      	bx	lr

08009584 <SDIO_SendCommand>:
=======
 8009538:	b480      	push	{r7}
 800953a:	b083      	sub	sp, #12
 800953c:	af00      	add	r7, sp, #0
 800953e:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	f003 0303 	and.w	r3, r3, #3
}
 8009548:	4618      	mov	r0, r3
 800954a:	370c      	adds	r7, #12
 800954c:	46bd      	mov	sp, r7
 800954e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009552:	4770      	bx	lr

08009554 <SDIO_SendCommand>:
>>>>>>> Stashed changes
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
<<<<<<< Updated upstream
 8009584:	b480      	push	{r7}
 8009586:	b085      	sub	sp, #20
 8009588:	af00      	add	r7, sp, #0
 800958a:	6078      	str	r0, [r7, #4]
 800958c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800958e:	2300      	movs	r3, #0
 8009590:	60fb      	str	r3, [r7, #12]
=======
 8009554:	b480      	push	{r7}
 8009556:	b085      	sub	sp, #20
 8009558:	af00      	add	r7, sp, #0
 800955a:	6078      	str	r0, [r7, #4]
 800955c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800955e:	2300      	movs	r3, #0
 8009560:	60fb      	str	r3, [r7, #12]
>>>>>>> Stashed changes
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
<<<<<<< Updated upstream
 8009592:	683b      	ldr	r3, [r7, #0]
 8009594:	681a      	ldr	r2, [r3, #0]
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800959a:	683b      	ldr	r3, [r7, #0]
 800959c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800959e:	683b      	ldr	r3, [r7, #0]
 80095a0:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80095a2:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80095a4:	683b      	ldr	r3, [r7, #0]
 80095a6:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80095a8:	431a      	orrs	r2, r3
                       Command->CPSM);
 80095aa:	683b      	ldr	r3, [r7, #0]
 80095ac:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80095ae:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80095b0:	68fa      	ldr	r2, [r7, #12]
 80095b2:	4313      	orrs	r3, r2
 80095b4:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	68db      	ldr	r3, [r3, #12]
 80095ba:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80095be:	f023 030f 	bic.w	r3, r3, #15
 80095c2:	68fa      	ldr	r2, [r7, #12]
 80095c4:	431a      	orrs	r2, r3
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80095ca:	2300      	movs	r3, #0
}
 80095cc:	4618      	mov	r0, r3
 80095ce:	3714      	adds	r7, #20
 80095d0:	46bd      	mov	sp, r7
 80095d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d6:	4770      	bx	lr

080095d8 <SDIO_GetCommandResponse>:
=======
 8009562:	683b      	ldr	r3, [r7, #0]
 8009564:	681a      	ldr	r2, [r3, #0]
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800956a:	683b      	ldr	r3, [r7, #0]
 800956c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800956e:	683b      	ldr	r3, [r7, #0]
 8009570:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009572:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8009574:	683b      	ldr	r3, [r7, #0]
 8009576:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8009578:	431a      	orrs	r2, r3
                       Command->CPSM);
 800957a:	683b      	ldr	r3, [r7, #0]
 800957c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800957e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009580:	68fa      	ldr	r2, [r7, #12]
 8009582:	4313      	orrs	r3, r2
 8009584:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	68db      	ldr	r3, [r3, #12]
 800958a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800958e:	f023 030f 	bic.w	r3, r3, #15
 8009592:	68fa      	ldr	r2, [r7, #12]
 8009594:	431a      	orrs	r2, r3
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800959a:	2300      	movs	r3, #0
}
 800959c:	4618      	mov	r0, r3
 800959e:	3714      	adds	r7, #20
 80095a0:	46bd      	mov	sp, r7
 80095a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a6:	4770      	bx	lr

080095a8 <SDIO_GetCommandResponse>:
>>>>>>> Stashed changes
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
<<<<<<< Updated upstream
 80095d8:	b480      	push	{r7}
 80095da:	b083      	sub	sp, #12
 80095dc:	af00      	add	r7, sp, #0
 80095de:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	691b      	ldr	r3, [r3, #16]
 80095e4:	b2db      	uxtb	r3, r3
}
 80095e6:	4618      	mov	r0, r3
 80095e8:	370c      	adds	r7, #12
 80095ea:	46bd      	mov	sp, r7
 80095ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f0:	4770      	bx	lr

080095f2 <SDIO_GetResponse>:
=======
 80095a8:	b480      	push	{r7}
 80095aa:	b083      	sub	sp, #12
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	691b      	ldr	r3, [r3, #16]
 80095b4:	b2db      	uxtb	r3, r3
}
 80095b6:	4618      	mov	r0, r3
 80095b8:	370c      	adds	r7, #12
 80095ba:	46bd      	mov	sp, r7
 80095bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c0:	4770      	bx	lr

080095c2 <SDIO_GetResponse>:
>>>>>>> Stashed changes
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
<<<<<<< Updated upstream
 80095f2:	b480      	push	{r7}
 80095f4:	b085      	sub	sp, #20
 80095f6:	af00      	add	r7, sp, #0
 80095f8:	6078      	str	r0, [r7, #4]
 80095fa:	6039      	str	r1, [r7, #0]
=======
 80095c2:	b480      	push	{r7}
 80095c4:	b085      	sub	sp, #20
 80095c6:	af00      	add	r7, sp, #0
 80095c8:	6078      	str	r0, [r7, #4]
 80095ca:	6039      	str	r1, [r7, #0]
>>>>>>> Stashed changes

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
<<<<<<< Updated upstream
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	3314      	adds	r3, #20
 8009600:	461a      	mov	r2, r3
 8009602:	683b      	ldr	r3, [r7, #0]
 8009604:	4413      	add	r3, r2
 8009606:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	681b      	ldr	r3, [r3, #0]
}  
 800960c:	4618      	mov	r0, r3
 800960e:	3714      	adds	r7, #20
 8009610:	46bd      	mov	sp, r7
 8009612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009616:	4770      	bx	lr

08009618 <SDIO_ConfigData>:
=======
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	3314      	adds	r3, #20
 80095d0:	461a      	mov	r2, r3
 80095d2:	683b      	ldr	r3, [r7, #0]
 80095d4:	4413      	add	r3, r2
 80095d6:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	681b      	ldr	r3, [r3, #0]
}  
 80095dc:	4618      	mov	r0, r3
 80095de:	3714      	adds	r7, #20
 80095e0:	46bd      	mov	sp, r7
 80095e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e6:	4770      	bx	lr

080095e8 <SDIO_ConfigData>:
>>>>>>> Stashed changes
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
<<<<<<< Updated upstream
 8009618:	b480      	push	{r7}
 800961a:	b085      	sub	sp, #20
 800961c:	af00      	add	r7, sp, #0
 800961e:	6078      	str	r0, [r7, #4]
 8009620:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009622:	2300      	movs	r3, #0
 8009624:	60fb      	str	r3, [r7, #12]
=======
 80095e8:	b480      	push	{r7}
 80095ea:	b085      	sub	sp, #20
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	6078      	str	r0, [r7, #4]
 80095f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80095f2:	2300      	movs	r3, #0
 80095f4:	60fb      	str	r3, [r7, #12]
>>>>>>> Stashed changes
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
<<<<<<< Updated upstream
 8009626:	683b      	ldr	r3, [r7, #0]
 8009628:	681a      	ldr	r2, [r3, #0]
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800962e:	683b      	ldr	r3, [r7, #0]
 8009630:	685a      	ldr	r2, [r3, #4]
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009636:	683b      	ldr	r3, [r7, #0]
 8009638:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800963a:	683b      	ldr	r3, [r7, #0]
 800963c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800963e:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8009640:	683b      	ldr	r3, [r7, #0]
 8009642:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8009644:	431a      	orrs	r2, r3
                       Data->DPSM);
 8009646:	683b      	ldr	r3, [r7, #0]
 8009648:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800964a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800964c:	68fa      	ldr	r2, [r7, #12]
 800964e:	4313      	orrs	r3, r2
 8009650:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009656:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	431a      	orrs	r2, r3
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8009662:	2300      	movs	r3, #0

}
 8009664:	4618      	mov	r0, r3
 8009666:	3714      	adds	r7, #20
 8009668:	46bd      	mov	sp, r7
 800966a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800966e:	4770      	bx	lr

08009670 <SDMMC_CmdBlockLength>:
=======
 80095f6:	683b      	ldr	r3, [r7, #0]
 80095f8:	681a      	ldr	r2, [r3, #0]
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 80095fe:	683b      	ldr	r3, [r7, #0]
 8009600:	685a      	ldr	r2, [r3, #4]
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009606:	683b      	ldr	r3, [r7, #0]
 8009608:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800960a:	683b      	ldr	r3, [r7, #0]
 800960c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800960e:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8009610:	683b      	ldr	r3, [r7, #0]
 8009612:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8009614:	431a      	orrs	r2, r3
                       Data->DPSM);
 8009616:	683b      	ldr	r3, [r7, #0]
 8009618:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800961a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800961c:	68fa      	ldr	r2, [r7, #12]
 800961e:	4313      	orrs	r3, r2
 8009620:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009626:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	431a      	orrs	r2, r3
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8009632:	2300      	movs	r3, #0

}
 8009634:	4618      	mov	r0, r3
 8009636:	3714      	adds	r7, #20
 8009638:	46bd      	mov	sp, r7
 800963a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800963e:	4770      	bx	lr

08009640 <SDMMC_CmdBlockLength>:
>>>>>>> Stashed changes
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
<<<<<<< Updated upstream
 8009670:	b580      	push	{r7, lr}
 8009672:	b088      	sub	sp, #32
 8009674:	af00      	add	r7, sp, #0
 8009676:	6078      	str	r0, [r7, #4]
 8009678:	6039      	str	r1, [r7, #0]
=======
 8009640:	b580      	push	{r7, lr}
 8009642:	b088      	sub	sp, #32
 8009644:	af00      	add	r7, sp, #0
 8009646:	6078      	str	r0, [r7, #4]
 8009648:	6039      	str	r1, [r7, #0]
>>>>>>> Stashed changes
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
<<<<<<< Updated upstream
 800967a:	683b      	ldr	r3, [r7, #0]
 800967c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800967e:	2310      	movs	r3, #16
 8009680:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009682:	2340      	movs	r3, #64	; 0x40
 8009684:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009686:	2300      	movs	r3, #0
 8009688:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800968a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800968e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009690:	f107 0308 	add.w	r3, r7, #8
 8009694:	4619      	mov	r1, r3
 8009696:	6878      	ldr	r0, [r7, #4]
 8009698:	f7ff ff74 	bl	8009584 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800969c:	f241 3288 	movw	r2, #5000	; 0x1388
 80096a0:	2110      	movs	r1, #16
 80096a2:	6878      	ldr	r0, [r7, #4]
 80096a4:	f000 fa44 	bl	8009b30 <SDMMC_GetCmdResp1>
 80096a8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80096aa:	69fb      	ldr	r3, [r7, #28]
}
 80096ac:	4618      	mov	r0, r3
 80096ae:	3720      	adds	r7, #32
 80096b0:	46bd      	mov	sp, r7
 80096b2:	bd80      	pop	{r7, pc}

080096b4 <SDMMC_CmdReadSingleBlock>:
=======
 800964a:	683b      	ldr	r3, [r7, #0]
 800964c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800964e:	2310      	movs	r3, #16
 8009650:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009652:	2340      	movs	r3, #64	; 0x40
 8009654:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009656:	2300      	movs	r3, #0
 8009658:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800965a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800965e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009660:	f107 0308 	add.w	r3, r7, #8
 8009664:	4619      	mov	r1, r3
 8009666:	6878      	ldr	r0, [r7, #4]
 8009668:	f7ff ff74 	bl	8009554 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800966c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009670:	2110      	movs	r1, #16
 8009672:	6878      	ldr	r0, [r7, #4]
 8009674:	f000 fa44 	bl	8009b00 <SDMMC_GetCmdResp1>
 8009678:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800967a:	69fb      	ldr	r3, [r7, #28]
}
 800967c:	4618      	mov	r0, r3
 800967e:	3720      	adds	r7, #32
 8009680:	46bd      	mov	sp, r7
 8009682:	bd80      	pop	{r7, pc}

08009684 <SDMMC_CmdReadSingleBlock>:
>>>>>>> Stashed changes
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
<<<<<<< Updated upstream
 80096b4:	b580      	push	{r7, lr}
 80096b6:	b088      	sub	sp, #32
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	6078      	str	r0, [r7, #4]
 80096bc:	6039      	str	r1, [r7, #0]
=======
 8009684:	b580      	push	{r7, lr}
 8009686:	b088      	sub	sp, #32
 8009688:	af00      	add	r7, sp, #0
 800968a:	6078      	str	r0, [r7, #4]
 800968c:	6039      	str	r1, [r7, #0]
>>>>>>> Stashed changes
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
<<<<<<< Updated upstream
 80096be:	683b      	ldr	r3, [r7, #0]
 80096c0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80096c2:	2311      	movs	r3, #17
 80096c4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80096c6:	2340      	movs	r3, #64	; 0x40
 80096c8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80096ca:	2300      	movs	r3, #0
 80096cc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80096ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80096d2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80096d4:	f107 0308 	add.w	r3, r7, #8
 80096d8:	4619      	mov	r1, r3
 80096da:	6878      	ldr	r0, [r7, #4]
 80096dc:	f7ff ff52 	bl	8009584 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80096e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80096e4:	2111      	movs	r1, #17
 80096e6:	6878      	ldr	r0, [r7, #4]
 80096e8:	f000 fa22 	bl	8009b30 <SDMMC_GetCmdResp1>
 80096ec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80096ee:	69fb      	ldr	r3, [r7, #28]
}
 80096f0:	4618      	mov	r0, r3
 80096f2:	3720      	adds	r7, #32
 80096f4:	46bd      	mov	sp, r7
 80096f6:	bd80      	pop	{r7, pc}

080096f8 <SDMMC_CmdReadMultiBlock>:
=======
 800968e:	683b      	ldr	r3, [r7, #0]
 8009690:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8009692:	2311      	movs	r3, #17
 8009694:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009696:	2340      	movs	r3, #64	; 0x40
 8009698:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800969a:	2300      	movs	r3, #0
 800969c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800969e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80096a2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80096a4:	f107 0308 	add.w	r3, r7, #8
 80096a8:	4619      	mov	r1, r3
 80096aa:	6878      	ldr	r0, [r7, #4]
 80096ac:	f7ff ff52 	bl	8009554 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80096b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80096b4:	2111      	movs	r1, #17
 80096b6:	6878      	ldr	r0, [r7, #4]
 80096b8:	f000 fa22 	bl	8009b00 <SDMMC_GetCmdResp1>
 80096bc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80096be:	69fb      	ldr	r3, [r7, #28]
}
 80096c0:	4618      	mov	r0, r3
 80096c2:	3720      	adds	r7, #32
 80096c4:	46bd      	mov	sp, r7
 80096c6:	bd80      	pop	{r7, pc}

080096c8 <SDMMC_CmdReadMultiBlock>:
>>>>>>> Stashed changes
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
<<<<<<< Updated upstream
 80096f8:	b580      	push	{r7, lr}
 80096fa:	b088      	sub	sp, #32
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]
 8009700:	6039      	str	r1, [r7, #0]
=======
 80096c8:	b580      	push	{r7, lr}
 80096ca:	b088      	sub	sp, #32
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	6078      	str	r0, [r7, #4]
 80096d0:	6039      	str	r1, [r7, #0]
>>>>>>> Stashed changes
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
<<<<<<< Updated upstream
 8009702:	683b      	ldr	r3, [r7, #0]
 8009704:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8009706:	2312      	movs	r3, #18
 8009708:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800970a:	2340      	movs	r3, #64	; 0x40
 800970c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800970e:	2300      	movs	r3, #0
 8009710:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009712:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009716:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009718:	f107 0308 	add.w	r3, r7, #8
 800971c:	4619      	mov	r1, r3
 800971e:	6878      	ldr	r0, [r7, #4]
 8009720:	f7ff ff30 	bl	8009584 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8009724:	f241 3288 	movw	r2, #5000	; 0x1388
 8009728:	2112      	movs	r1, #18
 800972a:	6878      	ldr	r0, [r7, #4]
 800972c:	f000 fa00 	bl	8009b30 <SDMMC_GetCmdResp1>
 8009730:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009732:	69fb      	ldr	r3, [r7, #28]
}
 8009734:	4618      	mov	r0, r3
 8009736:	3720      	adds	r7, #32
 8009738:	46bd      	mov	sp, r7
 800973a:	bd80      	pop	{r7, pc}

0800973c <SDMMC_CmdWriteSingleBlock>:
=======
 80096d2:	683b      	ldr	r3, [r7, #0]
 80096d4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80096d6:	2312      	movs	r3, #18
 80096d8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80096da:	2340      	movs	r3, #64	; 0x40
 80096dc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80096de:	2300      	movs	r3, #0
 80096e0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80096e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80096e6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80096e8:	f107 0308 	add.w	r3, r7, #8
 80096ec:	4619      	mov	r1, r3
 80096ee:	6878      	ldr	r0, [r7, #4]
 80096f0:	f7ff ff30 	bl	8009554 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80096f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80096f8:	2112      	movs	r1, #18
 80096fa:	6878      	ldr	r0, [r7, #4]
 80096fc:	f000 fa00 	bl	8009b00 <SDMMC_GetCmdResp1>
 8009700:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009702:	69fb      	ldr	r3, [r7, #28]
}
 8009704:	4618      	mov	r0, r3
 8009706:	3720      	adds	r7, #32
 8009708:	46bd      	mov	sp, r7
 800970a:	bd80      	pop	{r7, pc}

0800970c <SDMMC_CmdWriteSingleBlock>:
>>>>>>> Stashed changes
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
<<<<<<< Updated upstream
 800973c:	b580      	push	{r7, lr}
 800973e:	b088      	sub	sp, #32
 8009740:	af00      	add	r7, sp, #0
 8009742:	6078      	str	r0, [r7, #4]
 8009744:	6039      	str	r1, [r7, #0]
=======
 800970c:	b580      	push	{r7, lr}
 800970e:	b088      	sub	sp, #32
 8009710:	af00      	add	r7, sp, #0
 8009712:	6078      	str	r0, [r7, #4]
 8009714:	6039      	str	r1, [r7, #0]
>>>>>>> Stashed changes
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
<<<<<<< Updated upstream
 8009746:	683b      	ldr	r3, [r7, #0]
 8009748:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800974a:	2318      	movs	r3, #24
 800974c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800974e:	2340      	movs	r3, #64	; 0x40
 8009750:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009752:	2300      	movs	r3, #0
 8009754:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009756:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800975a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800975c:	f107 0308 	add.w	r3, r7, #8
 8009760:	4619      	mov	r1, r3
 8009762:	6878      	ldr	r0, [r7, #4]
 8009764:	f7ff ff0e 	bl	8009584 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8009768:	f241 3288 	movw	r2, #5000	; 0x1388
 800976c:	2118      	movs	r1, #24
 800976e:	6878      	ldr	r0, [r7, #4]
 8009770:	f000 f9de 	bl	8009b30 <SDMMC_GetCmdResp1>
 8009774:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009776:	69fb      	ldr	r3, [r7, #28]
}
 8009778:	4618      	mov	r0, r3
 800977a:	3720      	adds	r7, #32
 800977c:	46bd      	mov	sp, r7
 800977e:	bd80      	pop	{r7, pc}

08009780 <SDMMC_CmdWriteMultiBlock>:
=======
 8009716:	683b      	ldr	r3, [r7, #0]
 8009718:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800971a:	2318      	movs	r3, #24
 800971c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800971e:	2340      	movs	r3, #64	; 0x40
 8009720:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009722:	2300      	movs	r3, #0
 8009724:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009726:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800972a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800972c:	f107 0308 	add.w	r3, r7, #8
 8009730:	4619      	mov	r1, r3
 8009732:	6878      	ldr	r0, [r7, #4]
 8009734:	f7ff ff0e 	bl	8009554 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8009738:	f241 3288 	movw	r2, #5000	; 0x1388
 800973c:	2118      	movs	r1, #24
 800973e:	6878      	ldr	r0, [r7, #4]
 8009740:	f000 f9de 	bl	8009b00 <SDMMC_GetCmdResp1>
 8009744:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009746:	69fb      	ldr	r3, [r7, #28]
}
 8009748:	4618      	mov	r0, r3
 800974a:	3720      	adds	r7, #32
 800974c:	46bd      	mov	sp, r7
 800974e:	bd80      	pop	{r7, pc}

08009750 <SDMMC_CmdWriteMultiBlock>:
>>>>>>> Stashed changes
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
<<<<<<< Updated upstream
 8009780:	b580      	push	{r7, lr}
 8009782:	b088      	sub	sp, #32
 8009784:	af00      	add	r7, sp, #0
 8009786:	6078      	str	r0, [r7, #4]
 8009788:	6039      	str	r1, [r7, #0]
=======
 8009750:	b580      	push	{r7, lr}
 8009752:	b088      	sub	sp, #32
 8009754:	af00      	add	r7, sp, #0
 8009756:	6078      	str	r0, [r7, #4]
 8009758:	6039      	str	r1, [r7, #0]
>>>>>>> Stashed changes
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
<<<<<<< Updated upstream
 800978a:	683b      	ldr	r3, [r7, #0]
 800978c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800978e:	2319      	movs	r3, #25
 8009790:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009792:	2340      	movs	r3, #64	; 0x40
 8009794:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009796:	2300      	movs	r3, #0
 8009798:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800979a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800979e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80097a0:	f107 0308 	add.w	r3, r7, #8
 80097a4:	4619      	mov	r1, r3
 80097a6:	6878      	ldr	r0, [r7, #4]
 80097a8:	f7ff feec 	bl	8009584 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80097ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80097b0:	2119      	movs	r1, #25
 80097b2:	6878      	ldr	r0, [r7, #4]
 80097b4:	f000 f9bc 	bl	8009b30 <SDMMC_GetCmdResp1>
 80097b8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80097ba:	69fb      	ldr	r3, [r7, #28]
}
 80097bc:	4618      	mov	r0, r3
 80097be:	3720      	adds	r7, #32
 80097c0:	46bd      	mov	sp, r7
 80097c2:	bd80      	pop	{r7, pc}

080097c4 <SDMMC_CmdStopTransfer>:
=======
 800975a:	683b      	ldr	r3, [r7, #0]
 800975c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800975e:	2319      	movs	r3, #25
 8009760:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009762:	2340      	movs	r3, #64	; 0x40
 8009764:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009766:	2300      	movs	r3, #0
 8009768:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800976a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800976e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009770:	f107 0308 	add.w	r3, r7, #8
 8009774:	4619      	mov	r1, r3
 8009776:	6878      	ldr	r0, [r7, #4]
 8009778:	f7ff feec 	bl	8009554 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800977c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009780:	2119      	movs	r1, #25
 8009782:	6878      	ldr	r0, [r7, #4]
 8009784:	f000 f9bc 	bl	8009b00 <SDMMC_GetCmdResp1>
 8009788:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800978a:	69fb      	ldr	r3, [r7, #28]
}
 800978c:	4618      	mov	r0, r3
 800978e:	3720      	adds	r7, #32
 8009790:	46bd      	mov	sp, r7
 8009792:	bd80      	pop	{r7, pc}

08009794 <SDMMC_CmdStopTransfer>:
>>>>>>> Stashed changes
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
<<<<<<< Updated upstream
 80097c4:	b580      	push	{r7, lr}
 80097c6:	b088      	sub	sp, #32
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	6078      	str	r0, [r7, #4]
=======
 8009794:	b580      	push	{r7, lr}
 8009796:	b088      	sub	sp, #32
 8009798:	af00      	add	r7, sp, #0
 800979a:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
<<<<<<< Updated upstream
 80097cc:	2300      	movs	r3, #0
 80097ce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80097d0:	230c      	movs	r3, #12
 80097d2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80097d4:	2340      	movs	r3, #64	; 0x40
 80097d6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80097d8:	2300      	movs	r3, #0
 80097da:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80097dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80097e0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80097e2:	f107 0308 	add.w	r3, r7, #8
 80097e6:	4619      	mov	r1, r3
 80097e8:	6878      	ldr	r0, [r7, #4]
 80097ea:	f7ff fecb 	bl	8009584 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 80097ee:	4a05      	ldr	r2, [pc, #20]	; (8009804 <SDMMC_CmdStopTransfer+0x40>)
 80097f0:	210c      	movs	r1, #12
 80097f2:	6878      	ldr	r0, [r7, #4]
 80097f4:	f000 f99c 	bl	8009b30 <SDMMC_GetCmdResp1>
 80097f8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80097fa:	69fb      	ldr	r3, [r7, #28]
}
 80097fc:	4618      	mov	r0, r3
 80097fe:	3720      	adds	r7, #32
 8009800:	46bd      	mov	sp, r7
 8009802:	bd80      	pop	{r7, pc}
 8009804:	05f5e100 	.word	0x05f5e100

08009808 <SDMMC_CmdSelDesel>:
=======
 800979c:	2300      	movs	r3, #0
 800979e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80097a0:	230c      	movs	r3, #12
 80097a2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80097a4:	2340      	movs	r3, #64	; 0x40
 80097a6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80097a8:	2300      	movs	r3, #0
 80097aa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80097ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80097b0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80097b2:	f107 0308 	add.w	r3, r7, #8
 80097b6:	4619      	mov	r1, r3
 80097b8:	6878      	ldr	r0, [r7, #4]
 80097ba:	f7ff fecb 	bl	8009554 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 80097be:	4a05      	ldr	r2, [pc, #20]	; (80097d4 <SDMMC_CmdStopTransfer+0x40>)
 80097c0:	210c      	movs	r1, #12
 80097c2:	6878      	ldr	r0, [r7, #4]
 80097c4:	f000 f99c 	bl	8009b00 <SDMMC_GetCmdResp1>
 80097c8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80097ca:	69fb      	ldr	r3, [r7, #28]
}
 80097cc:	4618      	mov	r0, r3
 80097ce:	3720      	adds	r7, #32
 80097d0:	46bd      	mov	sp, r7
 80097d2:	bd80      	pop	{r7, pc}
 80097d4:	05f5e100 	.word	0x05f5e100

080097d8 <SDMMC_CmdSelDesel>:
>>>>>>> Stashed changes
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
<<<<<<< Updated upstream
 8009808:	b580      	push	{r7, lr}
 800980a:	b08a      	sub	sp, #40	; 0x28
 800980c:	af00      	add	r7, sp, #0
 800980e:	60f8      	str	r0, [r7, #12]
 8009810:	e9c7 2300 	strd	r2, r3, [r7]
=======
 80097d8:	b580      	push	{r7, lr}
 80097da:	b08a      	sub	sp, #40	; 0x28
 80097dc:	af00      	add	r7, sp, #0
 80097de:	60f8      	str	r0, [r7, #12]
 80097e0:	e9c7 2300 	strd	r2, r3, [r7]
>>>>>>> Stashed changes
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
<<<<<<< Updated upstream
 8009814:	683b      	ldr	r3, [r7, #0]
 8009816:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8009818:	2307      	movs	r3, #7
 800981a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800981c:	2340      	movs	r3, #64	; 0x40
 800981e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009820:	2300      	movs	r3, #0
 8009822:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009824:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009828:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800982a:	f107 0310 	add.w	r3, r7, #16
 800982e:	4619      	mov	r1, r3
 8009830:	68f8      	ldr	r0, [r7, #12]
 8009832:	f7ff fea7 	bl	8009584 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8009836:	f241 3288 	movw	r2, #5000	; 0x1388
 800983a:	2107      	movs	r1, #7
 800983c:	68f8      	ldr	r0, [r7, #12]
 800983e:	f000 f977 	bl	8009b30 <SDMMC_GetCmdResp1>
 8009842:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8009844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009846:	4618      	mov	r0, r3
 8009848:	3728      	adds	r7, #40	; 0x28
 800984a:	46bd      	mov	sp, r7
 800984c:	bd80      	pop	{r7, pc}

0800984e <SDMMC_CmdGoIdleState>:
=======
 80097e4:	683b      	ldr	r3, [r7, #0]
 80097e6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80097e8:	2307      	movs	r3, #7
 80097ea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80097ec:	2340      	movs	r3, #64	; 0x40
 80097ee:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80097f0:	2300      	movs	r3, #0
 80097f2:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80097f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80097f8:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80097fa:	f107 0310 	add.w	r3, r7, #16
 80097fe:	4619      	mov	r1, r3
 8009800:	68f8      	ldr	r0, [r7, #12]
 8009802:	f7ff fea7 	bl	8009554 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8009806:	f241 3288 	movw	r2, #5000	; 0x1388
 800980a:	2107      	movs	r1, #7
 800980c:	68f8      	ldr	r0, [r7, #12]
 800980e:	f000 f977 	bl	8009b00 <SDMMC_GetCmdResp1>
 8009812:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8009814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009816:	4618      	mov	r0, r3
 8009818:	3728      	adds	r7, #40	; 0x28
 800981a:	46bd      	mov	sp, r7
 800981c:	bd80      	pop	{r7, pc}

0800981e <SDMMC_CmdGoIdleState>:
>>>>>>> Stashed changes
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
<<<<<<< Updated upstream
 800984e:	b580      	push	{r7, lr}
 8009850:	b088      	sub	sp, #32
 8009852:	af00      	add	r7, sp, #0
 8009854:	6078      	str	r0, [r7, #4]
=======
 800981e:	b580      	push	{r7, lr}
 8009820:	b088      	sub	sp, #32
 8009822:	af00      	add	r7, sp, #0
 8009824:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
<<<<<<< Updated upstream
 8009856:	2300      	movs	r3, #0
 8009858:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800985a:	2300      	movs	r3, #0
 800985c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800985e:	2300      	movs	r3, #0
 8009860:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009862:	2300      	movs	r3, #0
 8009864:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009866:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800986a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800986c:	f107 0308 	add.w	r3, r7, #8
 8009870:	4619      	mov	r1, r3
 8009872:	6878      	ldr	r0, [r7, #4]
 8009874:	f7ff fe86 	bl	8009584 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8009878:	6878      	ldr	r0, [r7, #4]
 800987a:	f000 f92d 	bl	8009ad8 <SDMMC_GetCmdError>
 800987e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009880:	69fb      	ldr	r3, [r7, #28]
}
 8009882:	4618      	mov	r0, r3
 8009884:	3720      	adds	r7, #32
 8009886:	46bd      	mov	sp, r7
 8009888:	bd80      	pop	{r7, pc}

0800988a <SDMMC_CmdOperCond>:
=======
 8009826:	2300      	movs	r3, #0
 8009828:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800982a:	2300      	movs	r3, #0
 800982c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800982e:	2300      	movs	r3, #0
 8009830:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009832:	2300      	movs	r3, #0
 8009834:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009836:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800983a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800983c:	f107 0308 	add.w	r3, r7, #8
 8009840:	4619      	mov	r1, r3
 8009842:	6878      	ldr	r0, [r7, #4]
 8009844:	f7ff fe86 	bl	8009554 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8009848:	6878      	ldr	r0, [r7, #4]
 800984a:	f000 f92d 	bl	8009aa8 <SDMMC_GetCmdError>
 800984e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009850:	69fb      	ldr	r3, [r7, #28]
}
 8009852:	4618      	mov	r0, r3
 8009854:	3720      	adds	r7, #32
 8009856:	46bd      	mov	sp, r7
 8009858:	bd80      	pop	{r7, pc}

0800985a <SDMMC_CmdOperCond>:
>>>>>>> Stashed changes
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
<<<<<<< Updated upstream
 800988a:	b580      	push	{r7, lr}
 800988c:	b088      	sub	sp, #32
 800988e:	af00      	add	r7, sp, #0
 8009890:	6078      	str	r0, [r7, #4]
=======
 800985a:	b580      	push	{r7, lr}
 800985c:	b088      	sub	sp, #32
 800985e:	af00      	add	r7, sp, #0
 8009860:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
<<<<<<< Updated upstream
 8009892:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8009896:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8009898:	2308      	movs	r3, #8
 800989a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800989c:	2340      	movs	r3, #64	; 0x40
 800989e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80098a0:	2300      	movs	r3, #0
 80098a2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80098a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80098a8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80098aa:	f107 0308 	add.w	r3, r7, #8
 80098ae:	4619      	mov	r1, r3
 80098b0:	6878      	ldr	r0, [r7, #4]
 80098b2:	f7ff fe67 	bl	8009584 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 80098b6:	6878      	ldr	r0, [r7, #4]
 80098b8:	f000 fb24 	bl	8009f04 <SDMMC_GetCmdResp7>
 80098bc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80098be:	69fb      	ldr	r3, [r7, #28]
}
 80098c0:	4618      	mov	r0, r3
 80098c2:	3720      	adds	r7, #32
 80098c4:	46bd      	mov	sp, r7
 80098c6:	bd80      	pop	{r7, pc}

080098c8 <SDMMC_CmdAppCommand>:
=======
 8009862:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8009866:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8009868:	2308      	movs	r3, #8
 800986a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800986c:	2340      	movs	r3, #64	; 0x40
 800986e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009870:	2300      	movs	r3, #0
 8009872:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009874:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009878:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800987a:	f107 0308 	add.w	r3, r7, #8
 800987e:	4619      	mov	r1, r3
 8009880:	6878      	ldr	r0, [r7, #4]
 8009882:	f7ff fe67 	bl	8009554 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8009886:	6878      	ldr	r0, [r7, #4]
 8009888:	f000 fb24 	bl	8009ed4 <SDMMC_GetCmdResp7>
 800988c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800988e:	69fb      	ldr	r3, [r7, #28]
}
 8009890:	4618      	mov	r0, r3
 8009892:	3720      	adds	r7, #32
 8009894:	46bd      	mov	sp, r7
 8009896:	bd80      	pop	{r7, pc}

08009898 <SDMMC_CmdAppCommand>:
>>>>>>> Stashed changes
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
<<<<<<< Updated upstream
 80098c8:	b580      	push	{r7, lr}
 80098ca:	b088      	sub	sp, #32
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	6078      	str	r0, [r7, #4]
 80098d0:	6039      	str	r1, [r7, #0]
=======
 8009898:	b580      	push	{r7, lr}
 800989a:	b088      	sub	sp, #32
 800989c:	af00      	add	r7, sp, #0
 800989e:	6078      	str	r0, [r7, #4]
 80098a0:	6039      	str	r1, [r7, #0]
>>>>>>> Stashed changes
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
<<<<<<< Updated upstream
 80098d2:	683b      	ldr	r3, [r7, #0]
 80098d4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80098d6:	2337      	movs	r3, #55	; 0x37
 80098d8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80098da:	2340      	movs	r3, #64	; 0x40
 80098dc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80098de:	2300      	movs	r3, #0
 80098e0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80098e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80098e6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80098e8:	f107 0308 	add.w	r3, r7, #8
 80098ec:	4619      	mov	r1, r3
 80098ee:	6878      	ldr	r0, [r7, #4]
 80098f0:	f7ff fe48 	bl	8009584 <SDIO_SendCommand>
=======
 80098a2:	683b      	ldr	r3, [r7, #0]
 80098a4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80098a6:	2337      	movs	r3, #55	; 0x37
 80098a8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80098aa:	2340      	movs	r3, #64	; 0x40
 80098ac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80098ae:	2300      	movs	r3, #0
 80098b0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80098b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80098b6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80098b8:	f107 0308 	add.w	r3, r7, #8
 80098bc:	4619      	mov	r1, r3
 80098be:	6878      	ldr	r0, [r7, #4]
 80098c0:	f7ff fe48 	bl	8009554 <SDIO_SendCommand>
>>>>>>> Stashed changes
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
<<<<<<< Updated upstream
 80098f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80098f8:	2137      	movs	r1, #55	; 0x37
 80098fa:	6878      	ldr	r0, [r7, #4]
 80098fc:	f000 f918 	bl	8009b30 <SDMMC_GetCmdResp1>
 8009900:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009902:	69fb      	ldr	r3, [r7, #28]
}
 8009904:	4618      	mov	r0, r3
 8009906:	3720      	adds	r7, #32
 8009908:	46bd      	mov	sp, r7
 800990a:	bd80      	pop	{r7, pc}

0800990c <SDMMC_CmdAppOperCommand>:
=======
 80098c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80098c8:	2137      	movs	r1, #55	; 0x37
 80098ca:	6878      	ldr	r0, [r7, #4]
 80098cc:	f000 f918 	bl	8009b00 <SDMMC_GetCmdResp1>
 80098d0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80098d2:	69fb      	ldr	r3, [r7, #28]
}
 80098d4:	4618      	mov	r0, r3
 80098d6:	3720      	adds	r7, #32
 80098d8:	46bd      	mov	sp, r7
 80098da:	bd80      	pop	{r7, pc}

080098dc <SDMMC_CmdAppOperCommand>:
>>>>>>> Stashed changes
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
<<<<<<< Updated upstream
 800990c:	b580      	push	{r7, lr}
 800990e:	b088      	sub	sp, #32
 8009910:	af00      	add	r7, sp, #0
 8009912:	6078      	str	r0, [r7, #4]
 8009914:	6039      	str	r1, [r7, #0]
=======
 80098dc:	b580      	push	{r7, lr}
 80098de:	b088      	sub	sp, #32
 80098e0:	af00      	add	r7, sp, #0
 80098e2:	6078      	str	r0, [r7, #4]
 80098e4:	6039      	str	r1, [r7, #0]
>>>>>>> Stashed changes
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
<<<<<<< Updated upstream
 8009916:	683b      	ldr	r3, [r7, #0]
 8009918:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800991c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009920:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8009922:	2329      	movs	r3, #41	; 0x29
 8009924:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009926:	2340      	movs	r3, #64	; 0x40
 8009928:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800992a:	2300      	movs	r3, #0
 800992c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800992e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009932:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009934:	f107 0308 	add.w	r3, r7, #8
 8009938:	4619      	mov	r1, r3
 800993a:	6878      	ldr	r0, [r7, #4]
 800993c:	f7ff fe22 	bl	8009584 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8009940:	6878      	ldr	r0, [r7, #4]
 8009942:	f000 fa2b 	bl	8009d9c <SDMMC_GetCmdResp3>
 8009946:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009948:	69fb      	ldr	r3, [r7, #28]
}
 800994a:	4618      	mov	r0, r3
 800994c:	3720      	adds	r7, #32
 800994e:	46bd      	mov	sp, r7
 8009950:	bd80      	pop	{r7, pc}

08009952 <SDMMC_CmdBusWidth>:
=======
 80098e6:	683b      	ldr	r3, [r7, #0]
 80098e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80098ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80098f0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80098f2:	2329      	movs	r3, #41	; 0x29
 80098f4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80098f6:	2340      	movs	r3, #64	; 0x40
 80098f8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80098fa:	2300      	movs	r3, #0
 80098fc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80098fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009902:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009904:	f107 0308 	add.w	r3, r7, #8
 8009908:	4619      	mov	r1, r3
 800990a:	6878      	ldr	r0, [r7, #4]
 800990c:	f7ff fe22 	bl	8009554 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8009910:	6878      	ldr	r0, [r7, #4]
 8009912:	f000 fa2b 	bl	8009d6c <SDMMC_GetCmdResp3>
 8009916:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009918:	69fb      	ldr	r3, [r7, #28]
}
 800991a:	4618      	mov	r0, r3
 800991c:	3720      	adds	r7, #32
 800991e:	46bd      	mov	sp, r7
 8009920:	bd80      	pop	{r7, pc}

08009922 <SDMMC_CmdBusWidth>:
>>>>>>> Stashed changes
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
<<<<<<< Updated upstream
 8009952:	b580      	push	{r7, lr}
 8009954:	b088      	sub	sp, #32
 8009956:	af00      	add	r7, sp, #0
 8009958:	6078      	str	r0, [r7, #4]
 800995a:	6039      	str	r1, [r7, #0]
=======
 8009922:	b580      	push	{r7, lr}
 8009924:	b088      	sub	sp, #32
 8009926:	af00      	add	r7, sp, #0
 8009928:	6078      	str	r0, [r7, #4]
 800992a:	6039      	str	r1, [r7, #0]
>>>>>>> Stashed changes
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
<<<<<<< Updated upstream
 800995c:	683b      	ldr	r3, [r7, #0]
 800995e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8009960:	2306      	movs	r3, #6
 8009962:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009964:	2340      	movs	r3, #64	; 0x40
 8009966:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009968:	2300      	movs	r3, #0
 800996a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800996c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009970:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009972:	f107 0308 	add.w	r3, r7, #8
 8009976:	4619      	mov	r1, r3
 8009978:	6878      	ldr	r0, [r7, #4]
 800997a:	f7ff fe03 	bl	8009584 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800997e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009982:	2106      	movs	r1, #6
 8009984:	6878      	ldr	r0, [r7, #4]
 8009986:	f000 f8d3 	bl	8009b30 <SDMMC_GetCmdResp1>
 800998a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800998c:	69fb      	ldr	r3, [r7, #28]
}
 800998e:	4618      	mov	r0, r3
 8009990:	3720      	adds	r7, #32
 8009992:	46bd      	mov	sp, r7
 8009994:	bd80      	pop	{r7, pc}

08009996 <SDMMC_CmdSendSCR>:
=======
 800992c:	683b      	ldr	r3, [r7, #0]
 800992e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8009930:	2306      	movs	r3, #6
 8009932:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009934:	2340      	movs	r3, #64	; 0x40
 8009936:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009938:	2300      	movs	r3, #0
 800993a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800993c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009940:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009942:	f107 0308 	add.w	r3, r7, #8
 8009946:	4619      	mov	r1, r3
 8009948:	6878      	ldr	r0, [r7, #4]
 800994a:	f7ff fe03 	bl	8009554 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800994e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009952:	2106      	movs	r1, #6
 8009954:	6878      	ldr	r0, [r7, #4]
 8009956:	f000 f8d3 	bl	8009b00 <SDMMC_GetCmdResp1>
 800995a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800995c:	69fb      	ldr	r3, [r7, #28]
}
 800995e:	4618      	mov	r0, r3
 8009960:	3720      	adds	r7, #32
 8009962:	46bd      	mov	sp, r7
 8009964:	bd80      	pop	{r7, pc}

08009966 <SDMMC_CmdSendSCR>:
>>>>>>> Stashed changes
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
<<<<<<< Updated upstream
 8009996:	b580      	push	{r7, lr}
 8009998:	b088      	sub	sp, #32
 800999a:	af00      	add	r7, sp, #0
 800999c:	6078      	str	r0, [r7, #4]
=======
 8009966:	b580      	push	{r7, lr}
 8009968:	b088      	sub	sp, #32
 800996a:	af00      	add	r7, sp, #0
 800996c:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
<<<<<<< Updated upstream
 800999e:	2300      	movs	r3, #0
 80099a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80099a2:	2333      	movs	r3, #51	; 0x33
 80099a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80099a6:	2340      	movs	r3, #64	; 0x40
 80099a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80099aa:	2300      	movs	r3, #0
 80099ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80099ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80099b2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80099b4:	f107 0308 	add.w	r3, r7, #8
 80099b8:	4619      	mov	r1, r3
 80099ba:	6878      	ldr	r0, [r7, #4]
 80099bc:	f7ff fde2 	bl	8009584 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 80099c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80099c4:	2133      	movs	r1, #51	; 0x33
 80099c6:	6878      	ldr	r0, [r7, #4]
 80099c8:	f000 f8b2 	bl	8009b30 <SDMMC_GetCmdResp1>
 80099cc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80099ce:	69fb      	ldr	r3, [r7, #28]
}
 80099d0:	4618      	mov	r0, r3
 80099d2:	3720      	adds	r7, #32
 80099d4:	46bd      	mov	sp, r7
 80099d6:	bd80      	pop	{r7, pc}

080099d8 <SDMMC_CmdSendCID>:
=======
 800996e:	2300      	movs	r3, #0
 8009970:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8009972:	2333      	movs	r3, #51	; 0x33
 8009974:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009976:	2340      	movs	r3, #64	; 0x40
 8009978:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800997a:	2300      	movs	r3, #0
 800997c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800997e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009982:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009984:	f107 0308 	add.w	r3, r7, #8
 8009988:	4619      	mov	r1, r3
 800998a:	6878      	ldr	r0, [r7, #4]
 800998c:	f7ff fde2 	bl	8009554 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8009990:	f241 3288 	movw	r2, #5000	; 0x1388
 8009994:	2133      	movs	r1, #51	; 0x33
 8009996:	6878      	ldr	r0, [r7, #4]
 8009998:	f000 f8b2 	bl	8009b00 <SDMMC_GetCmdResp1>
 800999c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800999e:	69fb      	ldr	r3, [r7, #28]
}
 80099a0:	4618      	mov	r0, r3
 80099a2:	3720      	adds	r7, #32
 80099a4:	46bd      	mov	sp, r7
 80099a6:	bd80      	pop	{r7, pc}

080099a8 <SDMMC_CmdSendCID>:
>>>>>>> Stashed changes
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
<<<<<<< Updated upstream
 80099d8:	b580      	push	{r7, lr}
 80099da:	b088      	sub	sp, #32
 80099dc:	af00      	add	r7, sp, #0
 80099de:	6078      	str	r0, [r7, #4]
=======
 80099a8:	b580      	push	{r7, lr}
 80099aa:	b088      	sub	sp, #32
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
<<<<<<< Updated upstream
 80099e0:	2300      	movs	r3, #0
 80099e2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80099e4:	2302      	movs	r3, #2
 80099e6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80099e8:	23c0      	movs	r3, #192	; 0xc0
 80099ea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80099ec:	2300      	movs	r3, #0
 80099ee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80099f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80099f4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80099f6:	f107 0308 	add.w	r3, r7, #8
 80099fa:	4619      	mov	r1, r3
 80099fc:	6878      	ldr	r0, [r7, #4]
 80099fe:	f7ff fdc1 	bl	8009584 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8009a02:	6878      	ldr	r0, [r7, #4]
 8009a04:	f000 f982 	bl	8009d0c <SDMMC_GetCmdResp2>
 8009a08:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009a0a:	69fb      	ldr	r3, [r7, #28]
}
 8009a0c:	4618      	mov	r0, r3
 8009a0e:	3720      	adds	r7, #32
 8009a10:	46bd      	mov	sp, r7
 8009a12:	bd80      	pop	{r7, pc}

08009a14 <SDMMC_CmdSendCSD>:
=======
 80099b0:	2300      	movs	r3, #0
 80099b2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80099b4:	2302      	movs	r3, #2
 80099b6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80099b8:	23c0      	movs	r3, #192	; 0xc0
 80099ba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80099bc:	2300      	movs	r3, #0
 80099be:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80099c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80099c4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80099c6:	f107 0308 	add.w	r3, r7, #8
 80099ca:	4619      	mov	r1, r3
 80099cc:	6878      	ldr	r0, [r7, #4]
 80099ce:	f7ff fdc1 	bl	8009554 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80099d2:	6878      	ldr	r0, [r7, #4]
 80099d4:	f000 f982 	bl	8009cdc <SDMMC_GetCmdResp2>
 80099d8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80099da:	69fb      	ldr	r3, [r7, #28]
}
 80099dc:	4618      	mov	r0, r3
 80099de:	3720      	adds	r7, #32
 80099e0:	46bd      	mov	sp, r7
 80099e2:	bd80      	pop	{r7, pc}

080099e4 <SDMMC_CmdSendCSD>:
>>>>>>> Stashed changes
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
<<<<<<< Updated upstream
 8009a14:	b580      	push	{r7, lr}
 8009a16:	b088      	sub	sp, #32
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	6078      	str	r0, [r7, #4]
 8009a1c:	6039      	str	r1, [r7, #0]
=======
 80099e4:	b580      	push	{r7, lr}
 80099e6:	b088      	sub	sp, #32
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	6078      	str	r0, [r7, #4]
 80099ec:	6039      	str	r1, [r7, #0]
>>>>>>> Stashed changes
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
<<<<<<< Updated upstream
 8009a1e:	683b      	ldr	r3, [r7, #0]
 8009a20:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8009a22:	2309      	movs	r3, #9
 8009a24:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8009a26:	23c0      	movs	r3, #192	; 0xc0
 8009a28:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009a2a:	2300      	movs	r3, #0
 8009a2c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009a2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009a32:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009a34:	f107 0308 	add.w	r3, r7, #8
 8009a38:	4619      	mov	r1, r3
 8009a3a:	6878      	ldr	r0, [r7, #4]
 8009a3c:	f7ff fda2 	bl	8009584 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8009a40:	6878      	ldr	r0, [r7, #4]
 8009a42:	f000 f963 	bl	8009d0c <SDMMC_GetCmdResp2>
 8009a46:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009a48:	69fb      	ldr	r3, [r7, #28]
}
 8009a4a:	4618      	mov	r0, r3
 8009a4c:	3720      	adds	r7, #32
 8009a4e:	46bd      	mov	sp, r7
 8009a50:	bd80      	pop	{r7, pc}

08009a52 <SDMMC_CmdSetRelAdd>:
=======
 80099ee:	683b      	ldr	r3, [r7, #0]
 80099f0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80099f2:	2309      	movs	r3, #9
 80099f4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80099f6:	23c0      	movs	r3, #192	; 0xc0
 80099f8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80099fa:	2300      	movs	r3, #0
 80099fc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80099fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009a02:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009a04:	f107 0308 	add.w	r3, r7, #8
 8009a08:	4619      	mov	r1, r3
 8009a0a:	6878      	ldr	r0, [r7, #4]
 8009a0c:	f7ff fda2 	bl	8009554 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8009a10:	6878      	ldr	r0, [r7, #4]
 8009a12:	f000 f963 	bl	8009cdc <SDMMC_GetCmdResp2>
 8009a16:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009a18:	69fb      	ldr	r3, [r7, #28]
}
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	3720      	adds	r7, #32
 8009a1e:	46bd      	mov	sp, r7
 8009a20:	bd80      	pop	{r7, pc}

08009a22 <SDMMC_CmdSetRelAdd>:
>>>>>>> Stashed changes
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
<<<<<<< Updated upstream
 8009a52:	b580      	push	{r7, lr}
 8009a54:	b088      	sub	sp, #32
 8009a56:	af00      	add	r7, sp, #0
 8009a58:	6078      	str	r0, [r7, #4]
 8009a5a:	6039      	str	r1, [r7, #0]
=======
 8009a22:	b580      	push	{r7, lr}
 8009a24:	b088      	sub	sp, #32
 8009a26:	af00      	add	r7, sp, #0
 8009a28:	6078      	str	r0, [r7, #4]
 8009a2a:	6039      	str	r1, [r7, #0]
>>>>>>> Stashed changes
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
<<<<<<< Updated upstream
 8009a5c:	2300      	movs	r3, #0
 8009a5e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8009a60:	2303      	movs	r3, #3
 8009a62:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009a64:	2340      	movs	r3, #64	; 0x40
 8009a66:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009a68:	2300      	movs	r3, #0
 8009a6a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009a6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009a70:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009a72:	f107 0308 	add.w	r3, r7, #8
 8009a76:	4619      	mov	r1, r3
 8009a78:	6878      	ldr	r0, [r7, #4]
 8009a7a:	f7ff fd83 	bl	8009584 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8009a7e:	683a      	ldr	r2, [r7, #0]
 8009a80:	2103      	movs	r1, #3
 8009a82:	6878      	ldr	r0, [r7, #4]
 8009a84:	f000 f9c8 	bl	8009e18 <SDMMC_GetCmdResp6>
 8009a88:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009a8a:	69fb      	ldr	r3, [r7, #28]
}
 8009a8c:	4618      	mov	r0, r3
 8009a8e:	3720      	adds	r7, #32
 8009a90:	46bd      	mov	sp, r7
 8009a92:	bd80      	pop	{r7, pc}

08009a94 <SDMMC_CmdSendStatus>:
=======
 8009a2c:	2300      	movs	r3, #0
 8009a2e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8009a30:	2303      	movs	r3, #3
 8009a32:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009a34:	2340      	movs	r3, #64	; 0x40
 8009a36:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009a38:	2300      	movs	r3, #0
 8009a3a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009a3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009a40:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009a42:	f107 0308 	add.w	r3, r7, #8
 8009a46:	4619      	mov	r1, r3
 8009a48:	6878      	ldr	r0, [r7, #4]
 8009a4a:	f7ff fd83 	bl	8009554 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8009a4e:	683a      	ldr	r2, [r7, #0]
 8009a50:	2103      	movs	r1, #3
 8009a52:	6878      	ldr	r0, [r7, #4]
 8009a54:	f000 f9c8 	bl	8009de8 <SDMMC_GetCmdResp6>
 8009a58:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009a5a:	69fb      	ldr	r3, [r7, #28]
}
 8009a5c:	4618      	mov	r0, r3
 8009a5e:	3720      	adds	r7, #32
 8009a60:	46bd      	mov	sp, r7
 8009a62:	bd80      	pop	{r7, pc}

08009a64 <SDMMC_CmdSendStatus>:
>>>>>>> Stashed changes
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
<<<<<<< Updated upstream
 8009a94:	b580      	push	{r7, lr}
 8009a96:	b088      	sub	sp, #32
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	6078      	str	r0, [r7, #4]
 8009a9c:	6039      	str	r1, [r7, #0]
=======
 8009a64:	b580      	push	{r7, lr}
 8009a66:	b088      	sub	sp, #32
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	6078      	str	r0, [r7, #4]
 8009a6c:	6039      	str	r1, [r7, #0]
>>>>>>> Stashed changes
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
<<<<<<< Updated upstream
 8009a9e:	683b      	ldr	r3, [r7, #0]
 8009aa0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8009aa2:	230d      	movs	r3, #13
 8009aa4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009aa6:	2340      	movs	r3, #64	; 0x40
 8009aa8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009aaa:	2300      	movs	r3, #0
 8009aac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009aae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009ab2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009ab4:	f107 0308 	add.w	r3, r7, #8
 8009ab8:	4619      	mov	r1, r3
 8009aba:	6878      	ldr	r0, [r7, #4]
 8009abc:	f7ff fd62 	bl	8009584 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8009ac0:	f241 3288 	movw	r2, #5000	; 0x1388
 8009ac4:	210d      	movs	r1, #13
 8009ac6:	6878      	ldr	r0, [r7, #4]
 8009ac8:	f000 f832 	bl	8009b30 <SDMMC_GetCmdResp1>
 8009acc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009ace:	69fb      	ldr	r3, [r7, #28]
}
 8009ad0:	4618      	mov	r0, r3
 8009ad2:	3720      	adds	r7, #32
 8009ad4:	46bd      	mov	sp, r7
 8009ad6:	bd80      	pop	{r7, pc}

08009ad8 <SDMMC_GetCmdError>:
=======
 8009a6e:	683b      	ldr	r3, [r7, #0]
 8009a70:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8009a72:	230d      	movs	r3, #13
 8009a74:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009a76:	2340      	movs	r3, #64	; 0x40
 8009a78:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009a7a:	2300      	movs	r3, #0
 8009a7c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009a7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009a82:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009a84:	f107 0308 	add.w	r3, r7, #8
 8009a88:	4619      	mov	r1, r3
 8009a8a:	6878      	ldr	r0, [r7, #4]
 8009a8c:	f7ff fd62 	bl	8009554 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8009a90:	f241 3288 	movw	r2, #5000	; 0x1388
 8009a94:	210d      	movs	r1, #13
 8009a96:	6878      	ldr	r0, [r7, #4]
 8009a98:	f000 f832 	bl	8009b00 <SDMMC_GetCmdResp1>
 8009a9c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009a9e:	69fb      	ldr	r3, [r7, #28]
}
 8009aa0:	4618      	mov	r0, r3
 8009aa2:	3720      	adds	r7, #32
 8009aa4:	46bd      	mov	sp, r7
 8009aa6:	bd80      	pop	{r7, pc}

08009aa8 <SDMMC_GetCmdError>:
>>>>>>> Stashed changes
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
<<<<<<< Updated upstream
 8009ad8:	b480      	push	{r7}
 8009ada:	b085      	sub	sp, #20
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009ae0:	4b11      	ldr	r3, [pc, #68]	; (8009b28 <SDMMC_GetCmdError+0x50>)
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	4a11      	ldr	r2, [pc, #68]	; (8009b2c <SDMMC_GetCmdError+0x54>)
 8009ae6:	fba2 2303 	umull	r2, r3, r2, r3
 8009aea:	0a5b      	lsrs	r3, r3, #9
 8009aec:	f241 3288 	movw	r2, #5000	; 0x1388
 8009af0:	fb02 f303 	mul.w	r3, r2, r3
 8009af4:	60fb      	str	r3, [r7, #12]
=======
 8009aa8:	b480      	push	{r7}
 8009aaa:	b085      	sub	sp, #20
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009ab0:	4b11      	ldr	r3, [pc, #68]	; (8009af8 <SDMMC_GetCmdError+0x50>)
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	4a11      	ldr	r2, [pc, #68]	; (8009afc <SDMMC_GetCmdError+0x54>)
 8009ab6:	fba2 2303 	umull	r2, r3, r2, r3
 8009aba:	0a5b      	lsrs	r3, r3, #9
 8009abc:	f241 3288 	movw	r2, #5000	; 0x1388
 8009ac0:	fb02 f303 	mul.w	r3, r2, r3
 8009ac4:	60fb      	str	r3, [r7, #12]
>>>>>>> Stashed changes
  
  do
  {
    if (count-- == 0U)
<<<<<<< Updated upstream
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	1e5a      	subs	r2, r3, #1
 8009afa:	60fa      	str	r2, [r7, #12]
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d102      	bne.n	8009b06 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009b00:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009b04:	e009      	b.n	8009b1a <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d0f1      	beq.n	8009af6 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	22c5      	movs	r2, #197	; 0xc5
 8009b16:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8009b18:	2300      	movs	r3, #0
}
 8009b1a:	4618      	mov	r0, r3
 8009b1c:	3714      	adds	r7, #20
 8009b1e:	46bd      	mov	sp, r7
 8009b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b24:	4770      	bx	lr
 8009b26:	bf00      	nop
 8009b28:	20000000 	.word	0x20000000
 8009b2c:	10624dd3 	.word	0x10624dd3

08009b30 <SDMMC_GetCmdResp1>:
=======
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	1e5a      	subs	r2, r3, #1
 8009aca:	60fa      	str	r2, [r7, #12]
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d102      	bne.n	8009ad6 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009ad0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009ad4:	e009      	b.n	8009aea <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ada:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d0f1      	beq.n	8009ac6 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	22c5      	movs	r2, #197	; 0xc5
 8009ae6:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8009ae8:	2300      	movs	r3, #0
}
 8009aea:	4618      	mov	r0, r3
 8009aec:	3714      	adds	r7, #20
 8009aee:	46bd      	mov	sp, r7
 8009af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af4:	4770      	bx	lr
 8009af6:	bf00      	nop
 8009af8:	20000000 	.word	0x20000000
 8009afc:	10624dd3 	.word	0x10624dd3

08009b00 <SDMMC_GetCmdResp1>:
>>>>>>> Stashed changes
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
<<<<<<< Updated upstream
 8009b30:	b580      	push	{r7, lr}
 8009b32:	b088      	sub	sp, #32
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	60f8      	str	r0, [r7, #12]
 8009b38:	460b      	mov	r3, r1
 8009b3a:	607a      	str	r2, [r7, #4]
 8009b3c:	72fb      	strb	r3, [r7, #11]
=======
 8009b00:	b580      	push	{r7, lr}
 8009b02:	b088      	sub	sp, #32
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	60f8      	str	r0, [r7, #12]
 8009b08:	460b      	mov	r3, r1
 8009b0a:	607a      	str	r2, [r7, #4]
 8009b0c:	72fb      	strb	r3, [r7, #11]
>>>>>>> Stashed changes
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
<<<<<<< Updated upstream
 8009b3e:	4b70      	ldr	r3, [pc, #448]	; (8009d00 <SDMMC_GetCmdResp1+0x1d0>)
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	4a70      	ldr	r2, [pc, #448]	; (8009d04 <SDMMC_GetCmdResp1+0x1d4>)
 8009b44:	fba2 2303 	umull	r2, r3, r2, r3
 8009b48:	0a5a      	lsrs	r2, r3, #9
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	fb02 f303 	mul.w	r3, r2, r3
 8009b50:	61fb      	str	r3, [r7, #28]
=======
 8009b0e:	4b70      	ldr	r3, [pc, #448]	; (8009cd0 <SDMMC_GetCmdResp1+0x1d0>)
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	4a70      	ldr	r2, [pc, #448]	; (8009cd4 <SDMMC_GetCmdResp1+0x1d4>)
 8009b14:	fba2 2303 	umull	r2, r3, r2, r3
 8009b18:	0a5a      	lsrs	r2, r3, #9
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	fb02 f303 	mul.w	r3, r2, r3
 8009b20:	61fb      	str	r3, [r7, #28]
>>>>>>> Stashed changes
  
  do
  {
    if (count-- == 0U)
<<<<<<< Updated upstream
 8009b52:	69fb      	ldr	r3, [r7, #28]
 8009b54:	1e5a      	subs	r2, r3, #1
 8009b56:	61fa      	str	r2, [r7, #28]
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d102      	bne.n	8009b62 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009b5c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009b60:	e0c9      	b.n	8009cf6 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b66:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009b68:	69bb      	ldr	r3, [r7, #24]
 8009b6a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d0ef      	beq.n	8009b52 <SDMMC_GetCmdResp1+0x22>
 8009b72:	69bb      	ldr	r3, [r7, #24]
 8009b74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d1ea      	bne.n	8009b52 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b80:	f003 0304 	and.w	r3, r3, #4
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d004      	beq.n	8009b92 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	2204      	movs	r2, #4
 8009b8c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009b8e:	2304      	movs	r3, #4
 8009b90:	e0b1      	b.n	8009cf6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b96:	f003 0301 	and.w	r3, r3, #1
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d004      	beq.n	8009ba8 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	2201      	movs	r2, #1
 8009ba2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009ba4:	2301      	movs	r3, #1
 8009ba6:	e0a6      	b.n	8009cf6 <SDMMC_GetCmdResp1+0x1c6>
=======
 8009b22:	69fb      	ldr	r3, [r7, #28]
 8009b24:	1e5a      	subs	r2, r3, #1
 8009b26:	61fa      	str	r2, [r7, #28]
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d102      	bne.n	8009b32 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009b2c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009b30:	e0c9      	b.n	8009cc6 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b36:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009b38:	69bb      	ldr	r3, [r7, #24]
 8009b3a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d0ef      	beq.n	8009b22 <SDMMC_GetCmdResp1+0x22>
 8009b42:	69bb      	ldr	r3, [r7, #24]
 8009b44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d1ea      	bne.n	8009b22 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b50:	f003 0304 	and.w	r3, r3, #4
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d004      	beq.n	8009b62 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	2204      	movs	r2, #4
 8009b5c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009b5e:	2304      	movs	r3, #4
 8009b60:	e0b1      	b.n	8009cc6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b66:	f003 0301 	and.w	r3, r3, #1
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d004      	beq.n	8009b78 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	2201      	movs	r2, #1
 8009b72:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009b74:	2301      	movs	r3, #1
 8009b76:	e0a6      	b.n	8009cc6 <SDMMC_GetCmdResp1+0x1c6>
>>>>>>> Stashed changes
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
<<<<<<< Updated upstream
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	22c5      	movs	r2, #197	; 0xc5
 8009bac:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8009bae:	68f8      	ldr	r0, [r7, #12]
 8009bb0:	f7ff fd12 	bl	80095d8 <SDIO_GetCommandResponse>
 8009bb4:	4603      	mov	r3, r0
 8009bb6:	461a      	mov	r2, r3
 8009bb8:	7afb      	ldrb	r3, [r7, #11]
 8009bba:	4293      	cmp	r3, r2
 8009bbc:	d001      	beq.n	8009bc2 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009bbe:	2301      	movs	r3, #1
 8009bc0:	e099      	b.n	8009cf6 <SDMMC_GetCmdResp1+0x1c6>
=======
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	22c5      	movs	r2, #197	; 0xc5
 8009b7c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8009b7e:	68f8      	ldr	r0, [r7, #12]
 8009b80:	f7ff fd12 	bl	80095a8 <SDIO_GetCommandResponse>
 8009b84:	4603      	mov	r3, r0
 8009b86:	461a      	mov	r2, r3
 8009b88:	7afb      	ldrb	r3, [r7, #11]
 8009b8a:	4293      	cmp	r3, r2
 8009b8c:	d001      	beq.n	8009b92 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009b8e:	2301      	movs	r3, #1
 8009b90:	e099      	b.n	8009cc6 <SDMMC_GetCmdResp1+0x1c6>
>>>>>>> Stashed changes
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
<<<<<<< Updated upstream
 8009bc2:	2100      	movs	r1, #0
 8009bc4:	68f8      	ldr	r0, [r7, #12]
 8009bc6:	f7ff fd14 	bl	80095f2 <SDIO_GetResponse>
 8009bca:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8009bcc:	697a      	ldr	r2, [r7, #20]
 8009bce:	4b4e      	ldr	r3, [pc, #312]	; (8009d08 <SDMMC_GetCmdResp1+0x1d8>)
 8009bd0:	4013      	ands	r3, r2
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d101      	bne.n	8009bda <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8009bd6:	2300      	movs	r3, #0
 8009bd8:	e08d      	b.n	8009cf6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8009bda:	697b      	ldr	r3, [r7, #20]
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	da02      	bge.n	8009be6 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8009be0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009be4:	e087      	b.n	8009cf6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8009be6:	697b      	ldr	r3, [r7, #20]
 8009be8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d001      	beq.n	8009bf4 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8009bf0:	2340      	movs	r3, #64	; 0x40
 8009bf2:	e080      	b.n	8009cf6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8009bf4:	697b      	ldr	r3, [r7, #20]
 8009bf6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d001      	beq.n	8009c02 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8009bfe:	2380      	movs	r3, #128	; 0x80
 8009c00:	e079      	b.n	8009cf6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8009c02:	697b      	ldr	r3, [r7, #20]
 8009c04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d002      	beq.n	8009c12 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8009c0c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009c10:	e071      	b.n	8009cf6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8009c12:	697b      	ldr	r3, [r7, #20]
 8009c14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d002      	beq.n	8009c22 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8009c1c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009c20:	e069      	b.n	8009cf6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8009c22:	697b      	ldr	r3, [r7, #20]
 8009c24:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d002      	beq.n	8009c32 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8009c2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009c30:	e061      	b.n	8009cf6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8009c32:	697b      	ldr	r3, [r7, #20]
 8009c34:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d002      	beq.n	8009c42 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8009c3c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009c40:	e059      	b.n	8009cf6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8009c42:	697b      	ldr	r3, [r7, #20]
 8009c44:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d002      	beq.n	8009c52 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009c4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009c50:	e051      	b.n	8009cf6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8009c52:	697b      	ldr	r3, [r7, #20]
 8009c54:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d002      	beq.n	8009c62 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009c5c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009c60:	e049      	b.n	8009cf6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8009c62:	697b      	ldr	r3, [r7, #20]
 8009c64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d002      	beq.n	8009c72 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8009c6c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009c70:	e041      	b.n	8009cf6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8009c72:	697b      	ldr	r3, [r7, #20]
 8009c74:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d002      	beq.n	8009c82 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8009c7c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009c80:	e039      	b.n	8009cf6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8009c82:	697b      	ldr	r3, [r7, #20]
 8009c84:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d002      	beq.n	8009c92 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8009c8c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009c90:	e031      	b.n	8009cf6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8009c92:	697b      	ldr	r3, [r7, #20]
 8009c94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d002      	beq.n	8009ca2 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8009c9c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009ca0:	e029      	b.n	8009cf6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8009ca2:	697b      	ldr	r3, [r7, #20]
 8009ca4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d002      	beq.n	8009cb2 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8009cac:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009cb0:	e021      	b.n	8009cf6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8009cb2:	697b      	ldr	r3, [r7, #20]
 8009cb4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d002      	beq.n	8009cc2 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8009cbc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009cc0:	e019      	b.n	8009cf6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8009cc2:	697b      	ldr	r3, [r7, #20]
 8009cc4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d002      	beq.n	8009cd2 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8009ccc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009cd0:	e011      	b.n	8009cf6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8009cd2:	697b      	ldr	r3, [r7, #20]
 8009cd4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d002      	beq.n	8009ce2 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8009cdc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009ce0:	e009      	b.n	8009cf6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8009ce2:	697b      	ldr	r3, [r7, #20]
 8009ce4:	f003 0308 	and.w	r3, r3, #8
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d002      	beq.n	8009cf2 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8009cec:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8009cf0:	e001      	b.n	8009cf6 <SDMMC_GetCmdResp1+0x1c6>
=======
 8009b92:	2100      	movs	r1, #0
 8009b94:	68f8      	ldr	r0, [r7, #12]
 8009b96:	f7ff fd14 	bl	80095c2 <SDIO_GetResponse>
 8009b9a:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8009b9c:	697a      	ldr	r2, [r7, #20]
 8009b9e:	4b4e      	ldr	r3, [pc, #312]	; (8009cd8 <SDMMC_GetCmdResp1+0x1d8>)
 8009ba0:	4013      	ands	r3, r2
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d101      	bne.n	8009baa <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8009ba6:	2300      	movs	r3, #0
 8009ba8:	e08d      	b.n	8009cc6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8009baa:	697b      	ldr	r3, [r7, #20]
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	da02      	bge.n	8009bb6 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8009bb0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009bb4:	e087      	b.n	8009cc6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8009bb6:	697b      	ldr	r3, [r7, #20]
 8009bb8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d001      	beq.n	8009bc4 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8009bc0:	2340      	movs	r3, #64	; 0x40
 8009bc2:	e080      	b.n	8009cc6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8009bc4:	697b      	ldr	r3, [r7, #20]
 8009bc6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d001      	beq.n	8009bd2 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8009bce:	2380      	movs	r3, #128	; 0x80
 8009bd0:	e079      	b.n	8009cc6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8009bd2:	697b      	ldr	r3, [r7, #20]
 8009bd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d002      	beq.n	8009be2 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8009bdc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009be0:	e071      	b.n	8009cc6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8009be2:	697b      	ldr	r3, [r7, #20]
 8009be4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d002      	beq.n	8009bf2 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8009bec:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009bf0:	e069      	b.n	8009cc6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8009bf2:	697b      	ldr	r3, [r7, #20]
 8009bf4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d002      	beq.n	8009c02 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8009bfc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009c00:	e061      	b.n	8009cc6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8009c02:	697b      	ldr	r3, [r7, #20]
 8009c04:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d002      	beq.n	8009c12 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8009c0c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009c10:	e059      	b.n	8009cc6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8009c12:	697b      	ldr	r3, [r7, #20]
 8009c14:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d002      	beq.n	8009c22 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009c1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009c20:	e051      	b.n	8009cc6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8009c22:	697b      	ldr	r3, [r7, #20]
 8009c24:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d002      	beq.n	8009c32 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009c2c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009c30:	e049      	b.n	8009cc6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8009c32:	697b      	ldr	r3, [r7, #20]
 8009c34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d002      	beq.n	8009c42 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8009c3c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009c40:	e041      	b.n	8009cc6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8009c42:	697b      	ldr	r3, [r7, #20]
 8009c44:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d002      	beq.n	8009c52 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8009c4c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009c50:	e039      	b.n	8009cc6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8009c52:	697b      	ldr	r3, [r7, #20]
 8009c54:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d002      	beq.n	8009c62 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8009c5c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009c60:	e031      	b.n	8009cc6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8009c62:	697b      	ldr	r3, [r7, #20]
 8009c64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d002      	beq.n	8009c72 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8009c6c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009c70:	e029      	b.n	8009cc6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8009c72:	697b      	ldr	r3, [r7, #20]
 8009c74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d002      	beq.n	8009c82 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8009c7c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009c80:	e021      	b.n	8009cc6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8009c82:	697b      	ldr	r3, [r7, #20]
 8009c84:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d002      	beq.n	8009c92 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8009c8c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009c90:	e019      	b.n	8009cc6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8009c92:	697b      	ldr	r3, [r7, #20]
 8009c94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d002      	beq.n	8009ca2 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8009c9c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009ca0:	e011      	b.n	8009cc6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8009ca2:	697b      	ldr	r3, [r7, #20]
 8009ca4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d002      	beq.n	8009cb2 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8009cac:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009cb0:	e009      	b.n	8009cc6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8009cb2:	697b      	ldr	r3, [r7, #20]
 8009cb4:	f003 0308 	and.w	r3, r3, #8
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d002      	beq.n	8009cc2 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8009cbc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8009cc0:	e001      	b.n	8009cc6 <SDMMC_GetCmdResp1+0x1c6>
>>>>>>> Stashed changes
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
<<<<<<< Updated upstream
 8009cf2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	3720      	adds	r7, #32
 8009cfa:	46bd      	mov	sp, r7
 8009cfc:	bd80      	pop	{r7, pc}
 8009cfe:	bf00      	nop
 8009d00:	20000000 	.word	0x20000000
 8009d04:	10624dd3 	.word	0x10624dd3
 8009d08:	fdffe008 	.word	0xfdffe008

08009d0c <SDMMC_GetCmdResp2>:
=======
 8009cc2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	3720      	adds	r7, #32
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	bd80      	pop	{r7, pc}
 8009cce:	bf00      	nop
 8009cd0:	20000000 	.word	0x20000000
 8009cd4:	10624dd3 	.word	0x10624dd3
 8009cd8:	fdffe008 	.word	0xfdffe008

08009cdc <SDMMC_GetCmdResp2>:
>>>>>>> Stashed changes
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
<<<<<<< Updated upstream
 8009d0c:	b480      	push	{r7}
 8009d0e:	b085      	sub	sp, #20
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	6078      	str	r0, [r7, #4]
=======
 8009cdc:	b480      	push	{r7}
 8009cde:	b085      	sub	sp, #20
 8009ce0:	af00      	add	r7, sp, #0
 8009ce2:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
<<<<<<< Updated upstream
 8009d14:	4b1f      	ldr	r3, [pc, #124]	; (8009d94 <SDMMC_GetCmdResp2+0x88>)
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	4a1f      	ldr	r2, [pc, #124]	; (8009d98 <SDMMC_GetCmdResp2+0x8c>)
 8009d1a:	fba2 2303 	umull	r2, r3, r2, r3
 8009d1e:	0a5b      	lsrs	r3, r3, #9
 8009d20:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d24:	fb02 f303 	mul.w	r3, r2, r3
 8009d28:	60fb      	str	r3, [r7, #12]
=======
 8009ce4:	4b1f      	ldr	r3, [pc, #124]	; (8009d64 <SDMMC_GetCmdResp2+0x88>)
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	4a1f      	ldr	r2, [pc, #124]	; (8009d68 <SDMMC_GetCmdResp2+0x8c>)
 8009cea:	fba2 2303 	umull	r2, r3, r2, r3
 8009cee:	0a5b      	lsrs	r3, r3, #9
 8009cf0:	f241 3288 	movw	r2, #5000	; 0x1388
 8009cf4:	fb02 f303 	mul.w	r3, r2, r3
 8009cf8:	60fb      	str	r3, [r7, #12]
>>>>>>> Stashed changes
  
  do
  {
    if (count-- == 0U)
<<<<<<< Updated upstream
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	1e5a      	subs	r2, r3, #1
 8009d2e:	60fa      	str	r2, [r7, #12]
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d102      	bne.n	8009d3a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009d34:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009d38:	e026      	b.n	8009d88 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d3e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009d40:	68bb      	ldr	r3, [r7, #8]
 8009d42:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d0ef      	beq.n	8009d2a <SDMMC_GetCmdResp2+0x1e>
 8009d4a:	68bb      	ldr	r3, [r7, #8]
 8009d4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d1ea      	bne.n	8009d2a <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d58:	f003 0304 	and.w	r3, r3, #4
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d004      	beq.n	8009d6a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	2204      	movs	r2, #4
 8009d64:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009d66:	2304      	movs	r3, #4
 8009d68:	e00e      	b.n	8009d88 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d6e:	f003 0301 	and.w	r3, r3, #1
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d004      	beq.n	8009d80 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	2201      	movs	r2, #1
 8009d7a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009d7c:	2301      	movs	r3, #1
 8009d7e:	e003      	b.n	8009d88 <SDMMC_GetCmdResp2+0x7c>
=======
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	1e5a      	subs	r2, r3, #1
 8009cfe:	60fa      	str	r2, [r7, #12]
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d102      	bne.n	8009d0a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009d04:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009d08:	e026      	b.n	8009d58 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d0e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009d10:	68bb      	ldr	r3, [r7, #8]
 8009d12:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d0ef      	beq.n	8009cfa <SDMMC_GetCmdResp2+0x1e>
 8009d1a:	68bb      	ldr	r3, [r7, #8]
 8009d1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d1ea      	bne.n	8009cfa <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d28:	f003 0304 	and.w	r3, r3, #4
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d004      	beq.n	8009d3a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	2204      	movs	r2, #4
 8009d34:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009d36:	2304      	movs	r3, #4
 8009d38:	e00e      	b.n	8009d58 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d3e:	f003 0301 	and.w	r3, r3, #1
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d004      	beq.n	8009d50 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	2201      	movs	r2, #1
 8009d4a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009d4c:	2301      	movs	r3, #1
 8009d4e:	e003      	b.n	8009d58 <SDMMC_GetCmdResp2+0x7c>
>>>>>>> Stashed changes
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
<<<<<<< Updated upstream
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	22c5      	movs	r2, #197	; 0xc5
 8009d84:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8009d86:	2300      	movs	r3, #0
}
 8009d88:	4618      	mov	r0, r3
 8009d8a:	3714      	adds	r7, #20
 8009d8c:	46bd      	mov	sp, r7
 8009d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d92:	4770      	bx	lr
 8009d94:	20000000 	.word	0x20000000
 8009d98:	10624dd3 	.word	0x10624dd3

08009d9c <SDMMC_GetCmdResp3>:
=======
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	22c5      	movs	r2, #197	; 0xc5
 8009d54:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8009d56:	2300      	movs	r3, #0
}
 8009d58:	4618      	mov	r0, r3
 8009d5a:	3714      	adds	r7, #20
 8009d5c:	46bd      	mov	sp, r7
 8009d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d62:	4770      	bx	lr
 8009d64:	20000000 	.word	0x20000000
 8009d68:	10624dd3 	.word	0x10624dd3

08009d6c <SDMMC_GetCmdResp3>:
>>>>>>> Stashed changes
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
<<<<<<< Updated upstream
 8009d9c:	b480      	push	{r7}
 8009d9e:	b085      	sub	sp, #20
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	6078      	str	r0, [r7, #4]
=======
 8009d6c:	b480      	push	{r7}
 8009d6e:	b085      	sub	sp, #20
 8009d70:	af00      	add	r7, sp, #0
 8009d72:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
<<<<<<< Updated upstream
 8009da4:	4b1a      	ldr	r3, [pc, #104]	; (8009e10 <SDMMC_GetCmdResp3+0x74>)
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	4a1a      	ldr	r2, [pc, #104]	; (8009e14 <SDMMC_GetCmdResp3+0x78>)
 8009daa:	fba2 2303 	umull	r2, r3, r2, r3
 8009dae:	0a5b      	lsrs	r3, r3, #9
 8009db0:	f241 3288 	movw	r2, #5000	; 0x1388
 8009db4:	fb02 f303 	mul.w	r3, r2, r3
 8009db8:	60fb      	str	r3, [r7, #12]
=======
 8009d74:	4b1a      	ldr	r3, [pc, #104]	; (8009de0 <SDMMC_GetCmdResp3+0x74>)
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	4a1a      	ldr	r2, [pc, #104]	; (8009de4 <SDMMC_GetCmdResp3+0x78>)
 8009d7a:	fba2 2303 	umull	r2, r3, r2, r3
 8009d7e:	0a5b      	lsrs	r3, r3, #9
 8009d80:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d84:	fb02 f303 	mul.w	r3, r2, r3
 8009d88:	60fb      	str	r3, [r7, #12]
>>>>>>> Stashed changes
  
  do
  {
    if (count-- == 0U)
<<<<<<< Updated upstream
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	1e5a      	subs	r2, r3, #1
 8009dbe:	60fa      	str	r2, [r7, #12]
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d102      	bne.n	8009dca <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009dc4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009dc8:	e01b      	b.n	8009e02 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009dce:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009dd0:	68bb      	ldr	r3, [r7, #8]
 8009dd2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d0ef      	beq.n	8009dba <SDMMC_GetCmdResp3+0x1e>
 8009dda:	68bb      	ldr	r3, [r7, #8]
 8009ddc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d1ea      	bne.n	8009dba <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009de8:	f003 0304 	and.w	r3, r3, #4
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d004      	beq.n	8009dfa <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	2204      	movs	r2, #4
 8009df4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009df6:	2304      	movs	r3, #4
 8009df8:	e003      	b.n	8009e02 <SDMMC_GetCmdResp3+0x66>
=======
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	1e5a      	subs	r2, r3, #1
 8009d8e:	60fa      	str	r2, [r7, #12]
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d102      	bne.n	8009d9a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009d94:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009d98:	e01b      	b.n	8009dd2 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d9e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009da0:	68bb      	ldr	r3, [r7, #8]
 8009da2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d0ef      	beq.n	8009d8a <SDMMC_GetCmdResp3+0x1e>
 8009daa:	68bb      	ldr	r3, [r7, #8]
 8009dac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d1ea      	bne.n	8009d8a <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009db8:	f003 0304 	and.w	r3, r3, #4
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d004      	beq.n	8009dca <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	2204      	movs	r2, #4
 8009dc4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009dc6:	2304      	movs	r3, #4
 8009dc8:	e003      	b.n	8009dd2 <SDMMC_GetCmdResp3+0x66>
>>>>>>> Stashed changes
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
<<<<<<< Updated upstream
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	22c5      	movs	r2, #197	; 0xc5
 8009dfe:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8009e00:	2300      	movs	r3, #0
}
 8009e02:	4618      	mov	r0, r3
 8009e04:	3714      	adds	r7, #20
 8009e06:	46bd      	mov	sp, r7
 8009e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e0c:	4770      	bx	lr
 8009e0e:	bf00      	nop
 8009e10:	20000000 	.word	0x20000000
 8009e14:	10624dd3 	.word	0x10624dd3

08009e18 <SDMMC_GetCmdResp6>:
=======
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	22c5      	movs	r2, #197	; 0xc5
 8009dce:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8009dd0:	2300      	movs	r3, #0
}
 8009dd2:	4618      	mov	r0, r3
 8009dd4:	3714      	adds	r7, #20
 8009dd6:	46bd      	mov	sp, r7
 8009dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ddc:	4770      	bx	lr
 8009dde:	bf00      	nop
 8009de0:	20000000 	.word	0x20000000
 8009de4:	10624dd3 	.word	0x10624dd3

08009de8 <SDMMC_GetCmdResp6>:
>>>>>>> Stashed changes
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
<<<<<<< Updated upstream
 8009e18:	b580      	push	{r7, lr}
 8009e1a:	b088      	sub	sp, #32
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	60f8      	str	r0, [r7, #12]
 8009e20:	460b      	mov	r3, r1
 8009e22:	607a      	str	r2, [r7, #4]
 8009e24:	72fb      	strb	r3, [r7, #11]
=======
 8009de8:	b580      	push	{r7, lr}
 8009dea:	b088      	sub	sp, #32
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	60f8      	str	r0, [r7, #12]
 8009df0:	460b      	mov	r3, r1
 8009df2:	607a      	str	r2, [r7, #4]
 8009df4:	72fb      	strb	r3, [r7, #11]
>>>>>>> Stashed changes
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
<<<<<<< Updated upstream
 8009e26:	4b35      	ldr	r3, [pc, #212]	; (8009efc <SDMMC_GetCmdResp6+0xe4>)
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	4a35      	ldr	r2, [pc, #212]	; (8009f00 <SDMMC_GetCmdResp6+0xe8>)
 8009e2c:	fba2 2303 	umull	r2, r3, r2, r3
 8009e30:	0a5b      	lsrs	r3, r3, #9
 8009e32:	f241 3288 	movw	r2, #5000	; 0x1388
 8009e36:	fb02 f303 	mul.w	r3, r2, r3
 8009e3a:	61fb      	str	r3, [r7, #28]
=======
 8009df6:	4b35      	ldr	r3, [pc, #212]	; (8009ecc <SDMMC_GetCmdResp6+0xe4>)
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	4a35      	ldr	r2, [pc, #212]	; (8009ed0 <SDMMC_GetCmdResp6+0xe8>)
 8009dfc:	fba2 2303 	umull	r2, r3, r2, r3
 8009e00:	0a5b      	lsrs	r3, r3, #9
 8009e02:	f241 3288 	movw	r2, #5000	; 0x1388
 8009e06:	fb02 f303 	mul.w	r3, r2, r3
 8009e0a:	61fb      	str	r3, [r7, #28]
>>>>>>> Stashed changes
  
  do
  {
    if (count-- == 0U)
<<<<<<< Updated upstream
 8009e3c:	69fb      	ldr	r3, [r7, #28]
 8009e3e:	1e5a      	subs	r2, r3, #1
 8009e40:	61fa      	str	r2, [r7, #28]
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d102      	bne.n	8009e4c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009e46:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009e4a:	e052      	b.n	8009ef2 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e50:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009e52:	69bb      	ldr	r3, [r7, #24]
 8009e54:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d0ef      	beq.n	8009e3c <SDMMC_GetCmdResp6+0x24>
 8009e5c:	69bb      	ldr	r3, [r7, #24]
 8009e5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d1ea      	bne.n	8009e3c <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e6a:	f003 0304 	and.w	r3, r3, #4
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d004      	beq.n	8009e7c <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	2204      	movs	r2, #4
 8009e76:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009e78:	2304      	movs	r3, #4
 8009e7a:	e03a      	b.n	8009ef2 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e80:	f003 0301 	and.w	r3, r3, #1
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d004      	beq.n	8009e92 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	2201      	movs	r2, #1
 8009e8c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009e8e:	2301      	movs	r3, #1
 8009e90:	e02f      	b.n	8009ef2 <SDMMC_GetCmdResp6+0xda>
=======
 8009e0c:	69fb      	ldr	r3, [r7, #28]
 8009e0e:	1e5a      	subs	r2, r3, #1
 8009e10:	61fa      	str	r2, [r7, #28]
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d102      	bne.n	8009e1c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009e16:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009e1a:	e052      	b.n	8009ec2 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e20:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009e22:	69bb      	ldr	r3, [r7, #24]
 8009e24:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d0ef      	beq.n	8009e0c <SDMMC_GetCmdResp6+0x24>
 8009e2c:	69bb      	ldr	r3, [r7, #24]
 8009e2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d1ea      	bne.n	8009e0c <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e3a:	f003 0304 	and.w	r3, r3, #4
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d004      	beq.n	8009e4c <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	2204      	movs	r2, #4
 8009e46:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009e48:	2304      	movs	r3, #4
 8009e4a:	e03a      	b.n	8009ec2 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e50:	f003 0301 	and.w	r3, r3, #1
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d004      	beq.n	8009e62 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	2201      	movs	r2, #1
 8009e5c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009e5e:	2301      	movs	r3, #1
 8009e60:	e02f      	b.n	8009ec2 <SDMMC_GetCmdResp6+0xda>
>>>>>>> Stashed changes
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
<<<<<<< Updated upstream
 8009e92:	68f8      	ldr	r0, [r7, #12]
 8009e94:	f7ff fba0 	bl	80095d8 <SDIO_GetCommandResponse>
 8009e98:	4603      	mov	r3, r0
 8009e9a:	461a      	mov	r2, r3
 8009e9c:	7afb      	ldrb	r3, [r7, #11]
 8009e9e:	4293      	cmp	r3, r2
 8009ea0:	d001      	beq.n	8009ea6 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009ea2:	2301      	movs	r3, #1
 8009ea4:	e025      	b.n	8009ef2 <SDMMC_GetCmdResp6+0xda>
=======
 8009e62:	68f8      	ldr	r0, [r7, #12]
 8009e64:	f7ff fba0 	bl	80095a8 <SDIO_GetCommandResponse>
 8009e68:	4603      	mov	r3, r0
 8009e6a:	461a      	mov	r2, r3
 8009e6c:	7afb      	ldrb	r3, [r7, #11]
 8009e6e:	4293      	cmp	r3, r2
 8009e70:	d001      	beq.n	8009e76 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009e72:	2301      	movs	r3, #1
 8009e74:	e025      	b.n	8009ec2 <SDMMC_GetCmdResp6+0xda>
>>>>>>> Stashed changes
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
<<<<<<< Updated upstream
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	22c5      	movs	r2, #197	; 0xc5
 8009eaa:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8009eac:	2100      	movs	r1, #0
 8009eae:	68f8      	ldr	r0, [r7, #12]
 8009eb0:	f7ff fb9f 	bl	80095f2 <SDIO_GetResponse>
 8009eb4:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8009eb6:	697b      	ldr	r3, [r7, #20]
 8009eb8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d106      	bne.n	8009ece <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8009ec0:	697b      	ldr	r3, [r7, #20]
 8009ec2:	0c1b      	lsrs	r3, r3, #16
 8009ec4:	b29a      	uxth	r2, r3
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8009eca:	2300      	movs	r3, #0
 8009ecc:	e011      	b.n	8009ef2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8009ece:	697b      	ldr	r3, [r7, #20]
 8009ed0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d002      	beq.n	8009ede <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009ed8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009edc:	e009      	b.n	8009ef2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8009ede:	697b      	ldr	r3, [r7, #20]
 8009ee0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d002      	beq.n	8009eee <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009ee8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009eec:	e001      	b.n	8009ef2 <SDMMC_GetCmdResp6+0xda>
=======
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	22c5      	movs	r2, #197	; 0xc5
 8009e7a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8009e7c:	2100      	movs	r1, #0
 8009e7e:	68f8      	ldr	r0, [r7, #12]
 8009e80:	f7ff fb9f 	bl	80095c2 <SDIO_GetResponse>
 8009e84:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8009e86:	697b      	ldr	r3, [r7, #20]
 8009e88:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d106      	bne.n	8009e9e <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8009e90:	697b      	ldr	r3, [r7, #20]
 8009e92:	0c1b      	lsrs	r3, r3, #16
 8009e94:	b29a      	uxth	r2, r3
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8009e9a:	2300      	movs	r3, #0
 8009e9c:	e011      	b.n	8009ec2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8009e9e:	697b      	ldr	r3, [r7, #20]
 8009ea0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d002      	beq.n	8009eae <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009ea8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009eac:	e009      	b.n	8009ec2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8009eae:	697b      	ldr	r3, [r7, #20]
 8009eb0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d002      	beq.n	8009ebe <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009eb8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009ebc:	e001      	b.n	8009ec2 <SDMMC_GetCmdResp6+0xda>
>>>>>>> Stashed changes
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
<<<<<<< Updated upstream
 8009eee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8009ef2:	4618      	mov	r0, r3
 8009ef4:	3720      	adds	r7, #32
 8009ef6:	46bd      	mov	sp, r7
 8009ef8:	bd80      	pop	{r7, pc}
 8009efa:	bf00      	nop
 8009efc:	20000000 	.word	0x20000000
 8009f00:	10624dd3 	.word	0x10624dd3

08009f04 <SDMMC_GetCmdResp7>:
=======
 8009ebe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	3720      	adds	r7, #32
 8009ec6:	46bd      	mov	sp, r7
 8009ec8:	bd80      	pop	{r7, pc}
 8009eca:	bf00      	nop
 8009ecc:	20000000 	.word	0x20000000
 8009ed0:	10624dd3 	.word	0x10624dd3

08009ed4 <SDMMC_GetCmdResp7>:
>>>>>>> Stashed changes
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
<<<<<<< Updated upstream
 8009f04:	b480      	push	{r7}
 8009f06:	b085      	sub	sp, #20
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	6078      	str	r0, [r7, #4]
=======
 8009ed4:	b480      	push	{r7}
 8009ed6:	b085      	sub	sp, #20
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
<<<<<<< Updated upstream
 8009f0c:	4b22      	ldr	r3, [pc, #136]	; (8009f98 <SDMMC_GetCmdResp7+0x94>)
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	4a22      	ldr	r2, [pc, #136]	; (8009f9c <SDMMC_GetCmdResp7+0x98>)
 8009f12:	fba2 2303 	umull	r2, r3, r2, r3
 8009f16:	0a5b      	lsrs	r3, r3, #9
 8009f18:	f241 3288 	movw	r2, #5000	; 0x1388
 8009f1c:	fb02 f303 	mul.w	r3, r2, r3
 8009f20:	60fb      	str	r3, [r7, #12]
=======
 8009edc:	4b22      	ldr	r3, [pc, #136]	; (8009f68 <SDMMC_GetCmdResp7+0x94>)
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	4a22      	ldr	r2, [pc, #136]	; (8009f6c <SDMMC_GetCmdResp7+0x98>)
 8009ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8009ee6:	0a5b      	lsrs	r3, r3, #9
 8009ee8:	f241 3288 	movw	r2, #5000	; 0x1388
 8009eec:	fb02 f303 	mul.w	r3, r2, r3
 8009ef0:	60fb      	str	r3, [r7, #12]
>>>>>>> Stashed changes
  
  do
  {
    if (count-- == 0U)
<<<<<<< Updated upstream
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	1e5a      	subs	r2, r3, #1
 8009f26:	60fa      	str	r2, [r7, #12]
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d102      	bne.n	8009f32 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009f2c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009f30:	e02c      	b.n	8009f8c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f36:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009f38:	68bb      	ldr	r3, [r7, #8]
 8009f3a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d0ef      	beq.n	8009f22 <SDMMC_GetCmdResp7+0x1e>
 8009f42:	68bb      	ldr	r3, [r7, #8]
 8009f44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d1ea      	bne.n	8009f22 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f50:	f003 0304 	and.w	r3, r3, #4
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d004      	beq.n	8009f62 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	2204      	movs	r2, #4
 8009f5c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009f5e:	2304      	movs	r3, #4
 8009f60:	e014      	b.n	8009f8c <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f66:	f003 0301 	and.w	r3, r3, #1
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d004      	beq.n	8009f78 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	2201      	movs	r2, #1
 8009f72:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009f74:	2301      	movs	r3, #1
 8009f76:	e009      	b.n	8009f8c <SDMMC_GetCmdResp7+0x88>
=======
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	1e5a      	subs	r2, r3, #1
 8009ef6:	60fa      	str	r2, [r7, #12]
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d102      	bne.n	8009f02 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009efc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009f00:	e02c      	b.n	8009f5c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f06:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009f08:	68bb      	ldr	r3, [r7, #8]
 8009f0a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d0ef      	beq.n	8009ef2 <SDMMC_GetCmdResp7+0x1e>
 8009f12:	68bb      	ldr	r3, [r7, #8]
 8009f14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d1ea      	bne.n	8009ef2 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f20:	f003 0304 	and.w	r3, r3, #4
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d004      	beq.n	8009f32 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	2204      	movs	r2, #4
 8009f2c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009f2e:	2304      	movs	r3, #4
 8009f30:	e014      	b.n	8009f5c <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f36:	f003 0301 	and.w	r3, r3, #1
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d004      	beq.n	8009f48 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	2201      	movs	r2, #1
 8009f42:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009f44:	2301      	movs	r3, #1
 8009f46:	e009      	b.n	8009f5c <SDMMC_GetCmdResp7+0x88>
>>>>>>> Stashed changes
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
<<<<<<< Updated upstream
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d002      	beq.n	8009f8a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	2240      	movs	r2, #64	; 0x40
 8009f88:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8009f8a:	2300      	movs	r3, #0
  
}
 8009f8c:	4618      	mov	r0, r3
 8009f8e:	3714      	adds	r7, #20
 8009f90:	46bd      	mov	sp, r7
 8009f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f96:	4770      	bx	lr
 8009f98:	20000000 	.word	0x20000000
 8009f9c:	10624dd3 	.word	0x10624dd3

08009fa0 <MX_FATFS_Init>:
=======
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d002      	beq.n	8009f5a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	2240      	movs	r2, #64	; 0x40
 8009f58:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8009f5a:	2300      	movs	r3, #0
  
}
 8009f5c:	4618      	mov	r0, r3
 8009f5e:	3714      	adds	r7, #20
 8009f60:	46bd      	mov	sp, r7
 8009f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f66:	4770      	bx	lr
 8009f68:	20000000 	.word	0x20000000
 8009f6c:	10624dd3 	.word	0x10624dd3

08009f70 <MX_FATFS_Init>:
>>>>>>> Stashed changes
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
<<<<<<< Updated upstream
 8009fa0:	b580      	push	{r7, lr}
 8009fa2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8009fa4:	4904      	ldr	r1, [pc, #16]	; (8009fb8 <MX_FATFS_Init+0x18>)
 8009fa6:	4805      	ldr	r0, [pc, #20]	; (8009fbc <MX_FATFS_Init+0x1c>)
 8009fa8:	f000 fe80 	bl	800acac <FATFS_LinkDriver>
 8009fac:	4603      	mov	r3, r0
 8009fae:	461a      	mov	r2, r3
 8009fb0:	4b03      	ldr	r3, [pc, #12]	; (8009fc0 <MX_FATFS_Init+0x20>)
 8009fb2:	701a      	strb	r2, [r3, #0]
=======
 8009f70:	b580      	push	{r7, lr}
 8009f72:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8009f74:	4904      	ldr	r1, [pc, #16]	; (8009f88 <MX_FATFS_Init+0x18>)
 8009f76:	4805      	ldr	r0, [pc, #20]	; (8009f8c <MX_FATFS_Init+0x1c>)
 8009f78:	f000 fe80 	bl	800ac7c <FATFS_LinkDriver>
 8009f7c:	4603      	mov	r3, r0
 8009f7e:	461a      	mov	r2, r3
 8009f80:	4b03      	ldr	r3, [pc, #12]	; (8009f90 <MX_FATFS_Init+0x20>)
 8009f82:	701a      	strb	r2, [r3, #0]
>>>>>>> Stashed changes

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
<<<<<<< Updated upstream
 8009fb4:	bf00      	nop
 8009fb6:	bd80      	pop	{r7, pc}
 8009fb8:	200007c0 	.word	0x200007c0
 8009fbc:	0801835c 	.word	0x0801835c
 8009fc0:	200007bc 	.word	0x200007bc

08009fc4 <BSP_SD_Init>:
=======
 8009f84:	bf00      	nop
 8009f86:	bd80      	pop	{r7, pc}
 8009f88:	200007c0 	.word	0x200007c0
 8009f8c:	08018340 	.word	0x08018340
 8009f90:	200007bc 	.word	0x200007bc

08009f94 <BSP_SD_Init>:
>>>>>>> Stashed changes
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
<<<<<<< Updated upstream
 8009fc4:	b580      	push	{r7, lr}
 8009fc6:	b082      	sub	sp, #8
 8009fc8:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8009fca:	2300      	movs	r3, #0
 8009fcc:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8009fce:	f000 f896 	bl	800a0fe <BSP_SD_IsDetected>
 8009fd2:	4603      	mov	r3, r0
 8009fd4:	2b01      	cmp	r3, #1
 8009fd6:	d001      	beq.n	8009fdc <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8009fd8:	2301      	movs	r3, #1
 8009fda:	e012      	b.n	800a002 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8009fdc:	480b      	ldr	r0, [pc, #44]	; (800a00c <BSP_SD_Init+0x48>)
 8009fde:	f7fc f865 	bl	80060ac <HAL_SD_Init>
 8009fe2:	4603      	mov	r3, r0
 8009fe4:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8009fe6:	79fb      	ldrb	r3, [r7, #7]
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d109      	bne.n	800a000 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8009fec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009ff0:	4806      	ldr	r0, [pc, #24]	; (800a00c <BSP_SD_Init+0x48>)
 8009ff2:	f7fc fe31 	bl	8006c58 <HAL_SD_ConfigWideBusOperation>
 8009ff6:	4603      	mov	r3, r0
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d001      	beq.n	800a000 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8009ffc:	2301      	movs	r3, #1
 8009ffe:	71fb      	strb	r3, [r7, #7]
=======
 8009f94:	b580      	push	{r7, lr}
 8009f96:	b082      	sub	sp, #8
 8009f98:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8009f9a:	2300      	movs	r3, #0
 8009f9c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8009f9e:	f000 f896 	bl	800a0ce <BSP_SD_IsDetected>
 8009fa2:	4603      	mov	r3, r0
 8009fa4:	2b01      	cmp	r3, #1
 8009fa6:	d001      	beq.n	8009fac <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8009fa8:	2301      	movs	r3, #1
 8009faa:	e012      	b.n	8009fd2 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8009fac:	480b      	ldr	r0, [pc, #44]	; (8009fdc <BSP_SD_Init+0x48>)
 8009fae:	f7fc f865 	bl	800607c <HAL_SD_Init>
 8009fb2:	4603      	mov	r3, r0
 8009fb4:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8009fb6:	79fb      	ldrb	r3, [r7, #7]
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d109      	bne.n	8009fd0 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8009fbc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009fc0:	4806      	ldr	r0, [pc, #24]	; (8009fdc <BSP_SD_Init+0x48>)
 8009fc2:	f7fc fe31 	bl	8006c28 <HAL_SD_ConfigWideBusOperation>
 8009fc6:	4603      	mov	r3, r0
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d001      	beq.n	8009fd0 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8009fcc:	2301      	movs	r3, #1
 8009fce:	71fb      	strb	r3, [r7, #7]
>>>>>>> Stashed changes
    }
  }

  return sd_state;
<<<<<<< Updated upstream
 800a000:	79fb      	ldrb	r3, [r7, #7]
}
 800a002:	4618      	mov	r0, r3
 800a004:	3708      	adds	r7, #8
 800a006:	46bd      	mov	sp, r7
 800a008:	bd80      	pop	{r7, pc}
 800a00a:	bf00      	nop
 800a00c:	200004e8 	.word	0x200004e8

0800a010 <BSP_SD_ReadBlocks_DMA>:
=======
 8009fd0:	79fb      	ldrb	r3, [r7, #7]
}
 8009fd2:	4618      	mov	r0, r3
 8009fd4:	3708      	adds	r7, #8
 8009fd6:	46bd      	mov	sp, r7
 8009fd8:	bd80      	pop	{r7, pc}
 8009fda:	bf00      	nop
 8009fdc:	200004e8 	.word	0x200004e8

08009fe0 <BSP_SD_ReadBlocks_DMA>:
>>>>>>> Stashed changes
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
<<<<<<< Updated upstream
 800a010:	b580      	push	{r7, lr}
 800a012:	b086      	sub	sp, #24
 800a014:	af00      	add	r7, sp, #0
 800a016:	60f8      	str	r0, [r7, #12]
 800a018:	60b9      	str	r1, [r7, #8]
 800a01a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800a01c:	2300      	movs	r3, #0
 800a01e:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	68ba      	ldr	r2, [r7, #8]
 800a024:	68f9      	ldr	r1, [r7, #12]
 800a026:	4806      	ldr	r0, [pc, #24]	; (800a040 <BSP_SD_ReadBlocks_DMA+0x30>)
 800a028:	f7fc f8ee 	bl	8006208 <HAL_SD_ReadBlocks_DMA>
 800a02c:	4603      	mov	r3, r0
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d001      	beq.n	800a036 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800a032:	2301      	movs	r3, #1
 800a034:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800a036:	7dfb      	ldrb	r3, [r7, #23]
}
 800a038:	4618      	mov	r0, r3
 800a03a:	3718      	adds	r7, #24
 800a03c:	46bd      	mov	sp, r7
 800a03e:	bd80      	pop	{r7, pc}
 800a040:	200004e8 	.word	0x200004e8

0800a044 <BSP_SD_WriteBlocks_DMA>:
=======
 8009fe0:	b580      	push	{r7, lr}
 8009fe2:	b086      	sub	sp, #24
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	60f8      	str	r0, [r7, #12]
 8009fe8:	60b9      	str	r1, [r7, #8]
 8009fea:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8009fec:	2300      	movs	r3, #0
 8009fee:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	68ba      	ldr	r2, [r7, #8]
 8009ff4:	68f9      	ldr	r1, [r7, #12]
 8009ff6:	4806      	ldr	r0, [pc, #24]	; (800a010 <BSP_SD_ReadBlocks_DMA+0x30>)
 8009ff8:	f7fc f8ee 	bl	80061d8 <HAL_SD_ReadBlocks_DMA>
 8009ffc:	4603      	mov	r3, r0
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d001      	beq.n	800a006 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800a002:	2301      	movs	r3, #1
 800a004:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800a006:	7dfb      	ldrb	r3, [r7, #23]
}
 800a008:	4618      	mov	r0, r3
 800a00a:	3718      	adds	r7, #24
 800a00c:	46bd      	mov	sp, r7
 800a00e:	bd80      	pop	{r7, pc}
 800a010:	200004e8 	.word	0x200004e8

0800a014 <BSP_SD_WriteBlocks_DMA>:
>>>>>>> Stashed changes
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
<<<<<<< Updated upstream
 800a044:	b580      	push	{r7, lr}
 800a046:	b086      	sub	sp, #24
 800a048:	af00      	add	r7, sp, #0
 800a04a:	60f8      	str	r0, [r7, #12]
 800a04c:	60b9      	str	r1, [r7, #8]
 800a04e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800a050:	2300      	movs	r3, #0
 800a052:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	68ba      	ldr	r2, [r7, #8]
 800a058:	68f9      	ldr	r1, [r7, #12]
 800a05a:	4806      	ldr	r0, [pc, #24]	; (800a074 <BSP_SD_WriteBlocks_DMA+0x30>)
 800a05c:	f7fc f9b6 	bl	80063cc <HAL_SD_WriteBlocks_DMA>
 800a060:	4603      	mov	r3, r0
 800a062:	2b00      	cmp	r3, #0
 800a064:	d001      	beq.n	800a06a <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800a066:	2301      	movs	r3, #1
 800a068:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800a06a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a06c:	4618      	mov	r0, r3
 800a06e:	3718      	adds	r7, #24
 800a070:	46bd      	mov	sp, r7
 800a072:	bd80      	pop	{r7, pc}
 800a074:	200004e8 	.word	0x200004e8

0800a078 <BSP_SD_GetCardState>:
=======
 800a014:	b580      	push	{r7, lr}
 800a016:	b086      	sub	sp, #24
 800a018:	af00      	add	r7, sp, #0
 800a01a:	60f8      	str	r0, [r7, #12]
 800a01c:	60b9      	str	r1, [r7, #8]
 800a01e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800a020:	2300      	movs	r3, #0
 800a022:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	68ba      	ldr	r2, [r7, #8]
 800a028:	68f9      	ldr	r1, [r7, #12]
 800a02a:	4806      	ldr	r0, [pc, #24]	; (800a044 <BSP_SD_WriteBlocks_DMA+0x30>)
 800a02c:	f7fc f9b6 	bl	800639c <HAL_SD_WriteBlocks_DMA>
 800a030:	4603      	mov	r3, r0
 800a032:	2b00      	cmp	r3, #0
 800a034:	d001      	beq.n	800a03a <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800a036:	2301      	movs	r3, #1
 800a038:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800a03a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a03c:	4618      	mov	r0, r3
 800a03e:	3718      	adds	r7, #24
 800a040:	46bd      	mov	sp, r7
 800a042:	bd80      	pop	{r7, pc}
 800a044:	200004e8 	.word	0x200004e8

0800a048 <BSP_SD_GetCardState>:
>>>>>>> Stashed changes
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
<<<<<<< Updated upstream
 800a078:	b580      	push	{r7, lr}
 800a07a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800a07c:	4805      	ldr	r0, [pc, #20]	; (800a094 <BSP_SD_GetCardState+0x1c>)
 800a07e:	f7fc fe85 	bl	8006d8c <HAL_SD_GetCardState>
 800a082:	4603      	mov	r3, r0
 800a084:	2b04      	cmp	r3, #4
 800a086:	bf14      	ite	ne
 800a088:	2301      	movne	r3, #1
 800a08a:	2300      	moveq	r3, #0
 800a08c:	b2db      	uxtb	r3, r3
}
 800a08e:	4618      	mov	r0, r3
 800a090:	bd80      	pop	{r7, pc}
 800a092:	bf00      	nop
 800a094:	200004e8 	.word	0x200004e8

0800a098 <BSP_SD_GetCardInfo>:
=======
 800a048:	b580      	push	{r7, lr}
 800a04a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800a04c:	4805      	ldr	r0, [pc, #20]	; (800a064 <BSP_SD_GetCardState+0x1c>)
 800a04e:	f7fc fe85 	bl	8006d5c <HAL_SD_GetCardState>
 800a052:	4603      	mov	r3, r0
 800a054:	2b04      	cmp	r3, #4
 800a056:	bf14      	ite	ne
 800a058:	2301      	movne	r3, #1
 800a05a:	2300      	moveq	r3, #0
 800a05c:	b2db      	uxtb	r3, r3
}
 800a05e:	4618      	mov	r0, r3
 800a060:	bd80      	pop	{r7, pc}
 800a062:	bf00      	nop
 800a064:	200004e8 	.word	0x200004e8

0800a068 <BSP_SD_GetCardInfo>:
>>>>>>> Stashed changes
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
<<<<<<< Updated upstream
 800a098:	b580      	push	{r7, lr}
 800a09a:	b082      	sub	sp, #8
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800a0a0:	6879      	ldr	r1, [r7, #4]
 800a0a2:	4803      	ldr	r0, [pc, #12]	; (800a0b0 <BSP_SD_GetCardInfo+0x18>)
 800a0a4:	f7fc fdac 	bl	8006c00 <HAL_SD_GetCardInfo>
}
 800a0a8:	bf00      	nop
 800a0aa:	3708      	adds	r7, #8
 800a0ac:	46bd      	mov	sp, r7
 800a0ae:	bd80      	pop	{r7, pc}
 800a0b0:	200004e8 	.word	0x200004e8

0800a0b4 <HAL_SD_AbortCallback>:
=======
 800a068:	b580      	push	{r7, lr}
 800a06a:	b082      	sub	sp, #8
 800a06c:	af00      	add	r7, sp, #0
 800a06e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800a070:	6879      	ldr	r1, [r7, #4]
 800a072:	4803      	ldr	r0, [pc, #12]	; (800a080 <BSP_SD_GetCardInfo+0x18>)
 800a074:	f7fc fdac 	bl	8006bd0 <HAL_SD_GetCardInfo>
}
 800a078:	bf00      	nop
 800a07a:	3708      	adds	r7, #8
 800a07c:	46bd      	mov	sp, r7
 800a07e:	bd80      	pop	{r7, pc}
 800a080:	200004e8 	.word	0x200004e8

0800a084 <HAL_SD_AbortCallback>:
>>>>>>> Stashed changes
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
<<<<<<< Updated upstream
 800a0b4:	b580      	push	{r7, lr}
 800a0b6:	b082      	sub	sp, #8
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800a0bc:	f000 f818 	bl	800a0f0 <BSP_SD_AbortCallback>
}
 800a0c0:	bf00      	nop
 800a0c2:	3708      	adds	r7, #8
 800a0c4:	46bd      	mov	sp, r7
 800a0c6:	bd80      	pop	{r7, pc}

0800a0c8 <HAL_SD_TxCpltCallback>:
=======
 800a084:	b580      	push	{r7, lr}
 800a086:	b082      	sub	sp, #8
 800a088:	af00      	add	r7, sp, #0
 800a08a:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800a08c:	f000 f818 	bl	800a0c0 <BSP_SD_AbortCallback>
}
 800a090:	bf00      	nop
 800a092:	3708      	adds	r7, #8
 800a094:	46bd      	mov	sp, r7
 800a096:	bd80      	pop	{r7, pc}

0800a098 <HAL_SD_TxCpltCallback>:
>>>>>>> Stashed changes
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
<<<<<<< Updated upstream
 800a0c8:	b580      	push	{r7, lr}
 800a0ca:	b082      	sub	sp, #8
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800a0d0:	f000 f9a8 	bl	800a424 <BSP_SD_WriteCpltCallback>
}
 800a0d4:	bf00      	nop
 800a0d6:	3708      	adds	r7, #8
 800a0d8:	46bd      	mov	sp, r7
 800a0da:	bd80      	pop	{r7, pc}

0800a0dc <HAL_SD_RxCpltCallback>:
=======
 800a098:	b580      	push	{r7, lr}
 800a09a:	b082      	sub	sp, #8
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800a0a0:	f000 f9a8 	bl	800a3f4 <BSP_SD_WriteCpltCallback>
}
 800a0a4:	bf00      	nop
 800a0a6:	3708      	adds	r7, #8
 800a0a8:	46bd      	mov	sp, r7
 800a0aa:	bd80      	pop	{r7, pc}

0800a0ac <HAL_SD_RxCpltCallback>:
>>>>>>> Stashed changes
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
<<<<<<< Updated upstream
 800a0dc:	b580      	push	{r7, lr}
 800a0de:	b082      	sub	sp, #8
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800a0e4:	f000 f9aa 	bl	800a43c <BSP_SD_ReadCpltCallback>
}
 800a0e8:	bf00      	nop
 800a0ea:	3708      	adds	r7, #8
 800a0ec:	46bd      	mov	sp, r7
 800a0ee:	bd80      	pop	{r7, pc}

0800a0f0 <BSP_SD_AbortCallback>:
=======
 800a0ac:	b580      	push	{r7, lr}
 800a0ae:	b082      	sub	sp, #8
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800a0b4:	f000 f9aa 	bl	800a40c <BSP_SD_ReadCpltCallback>
}
 800a0b8:	bf00      	nop
 800a0ba:	3708      	adds	r7, #8
 800a0bc:	46bd      	mov	sp, r7
 800a0be:	bd80      	pop	{r7, pc}

0800a0c0 <BSP_SD_AbortCallback>:
>>>>>>> Stashed changes
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
<<<<<<< Updated upstream
 800a0f0:	b480      	push	{r7}
 800a0f2:	af00      	add	r7, sp, #0

}
 800a0f4:	bf00      	nop
 800a0f6:	46bd      	mov	sp, r7
 800a0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0fc:	4770      	bx	lr

0800a0fe <BSP_SD_IsDetected>:
=======
 800a0c0:	b480      	push	{r7}
 800a0c2:	af00      	add	r7, sp, #0

}
 800a0c4:	bf00      	nop
 800a0c6:	46bd      	mov	sp, r7
 800a0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0cc:	4770      	bx	lr

0800a0ce <BSP_SD_IsDetected>:
>>>>>>> Stashed changes
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
<<<<<<< Updated upstream
 800a0fe:	b580      	push	{r7, lr}
 800a100:	b082      	sub	sp, #8
 800a102:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800a104:	2301      	movs	r3, #1
 800a106:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800a108:	f000 f80c 	bl	800a124 <BSP_PlatformIsDetected>
 800a10c:	4603      	mov	r3, r0
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d101      	bne.n	800a116 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800a112:	2300      	movs	r3, #0
 800a114:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800a116:	79fb      	ldrb	r3, [r7, #7]
 800a118:	b2db      	uxtb	r3, r3
}
 800a11a:	4618      	mov	r0, r3
 800a11c:	3708      	adds	r7, #8
 800a11e:	46bd      	mov	sp, r7
 800a120:	bd80      	pop	{r7, pc}
	...

0800a124 <BSP_PlatformIsDetected>:
=======
 800a0ce:	b580      	push	{r7, lr}
 800a0d0:	b082      	sub	sp, #8
 800a0d2:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800a0d4:	2301      	movs	r3, #1
 800a0d6:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800a0d8:	f000 f80c 	bl	800a0f4 <BSP_PlatformIsDetected>
 800a0dc:	4603      	mov	r3, r0
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d101      	bne.n	800a0e6 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800a0e2:	2300      	movs	r3, #0
 800a0e4:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800a0e6:	79fb      	ldrb	r3, [r7, #7]
 800a0e8:	b2db      	uxtb	r3, r3
}
 800a0ea:	4618      	mov	r0, r3
 800a0ec:	3708      	adds	r7, #8
 800a0ee:	46bd      	mov	sp, r7
 800a0f0:	bd80      	pop	{r7, pc}
	...

0800a0f4 <BSP_PlatformIsDetected>:
>>>>>>> Stashed changes
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
<<<<<<< Updated upstream
 800a124:	b580      	push	{r7, lr}
 800a126:	b082      	sub	sp, #8
 800a128:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800a12a:	2301      	movs	r3, #1
 800a12c:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800a12e:	2108      	movs	r1, #8
 800a130:	4806      	ldr	r0, [pc, #24]	; (800a14c <BSP_PlatformIsDetected+0x28>)
 800a132:	f7fb f8d3 	bl	80052dc <HAL_GPIO_ReadPin>
 800a136:	4603      	mov	r3, r0
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d001      	beq.n	800a140 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 800a13c:	2300      	movs	r3, #0
 800a13e:	71fb      	strb	r3, [r7, #7]
=======
 800a0f4:	b580      	push	{r7, lr}
 800a0f6:	b082      	sub	sp, #8
 800a0f8:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800a0fa:	2301      	movs	r3, #1
 800a0fc:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800a0fe:	2108      	movs	r1, #8
 800a100:	4806      	ldr	r0, [pc, #24]	; (800a11c <BSP_PlatformIsDetected+0x28>)
 800a102:	f7fb f8ed 	bl	80052e0 <HAL_GPIO_ReadPin>
 800a106:	4603      	mov	r3, r0
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d001      	beq.n	800a110 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 800a10c:	2300      	movs	r3, #0
 800a10e:	71fb      	strb	r3, [r7, #7]
>>>>>>> Stashed changes
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
<<<<<<< Updated upstream
 800a140:	79fb      	ldrb	r3, [r7, #7]
}
 800a142:	4618      	mov	r0, r3
 800a144:	3708      	adds	r7, #8
 800a146:	46bd      	mov	sp, r7
 800a148:	bd80      	pop	{r7, pc}
 800a14a:	bf00      	nop
 800a14c:	40020c00 	.word	0x40020c00

0800a150 <SD_CheckStatusWithTimeout>:
=======
 800a110:	79fb      	ldrb	r3, [r7, #7]
}
 800a112:	4618      	mov	r0, r3
 800a114:	3708      	adds	r7, #8
 800a116:	46bd      	mov	sp, r7
 800a118:	bd80      	pop	{r7, pc}
 800a11a:	bf00      	nop
 800a11c:	40020c00 	.word	0x40020c00

0800a120 <SD_CheckStatusWithTimeout>:
>>>>>>> Stashed changes
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
<<<<<<< Updated upstream
 800a150:	b580      	push	{r7, lr}
 800a152:	b084      	sub	sp, #16
 800a154:	af00      	add	r7, sp, #0
 800a156:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800a158:	f7f7 ffa8 	bl	80020ac <HAL_GetTick>
 800a15c:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800a15e:	e006      	b.n	800a16e <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800a160:	f7ff ff8a 	bl	800a078 <BSP_SD_GetCardState>
 800a164:	4603      	mov	r3, r0
 800a166:	2b00      	cmp	r3, #0
 800a168:	d101      	bne.n	800a16e <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800a16a:	2300      	movs	r3, #0
 800a16c:	e009      	b.n	800a182 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800a16e:	f7f7 ff9d 	bl	80020ac <HAL_GetTick>
 800a172:	4602      	mov	r2, r0
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	1ad3      	subs	r3, r2, r3
 800a178:	687a      	ldr	r2, [r7, #4]
 800a17a:	429a      	cmp	r2, r3
 800a17c:	d8f0      	bhi.n	800a160 <SD_CheckStatusWithTimeout+0x10>
=======
 800a120:	b580      	push	{r7, lr}
 800a122:	b084      	sub	sp, #16
 800a124:	af00      	add	r7, sp, #0
 800a126:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800a128:	f7f7 ffc2 	bl	80020b0 <HAL_GetTick>
 800a12c:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800a12e:	e006      	b.n	800a13e <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800a130:	f7ff ff8a 	bl	800a048 <BSP_SD_GetCardState>
 800a134:	4603      	mov	r3, r0
 800a136:	2b00      	cmp	r3, #0
 800a138:	d101      	bne.n	800a13e <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800a13a:	2300      	movs	r3, #0
 800a13c:	e009      	b.n	800a152 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800a13e:	f7f7 ffb7 	bl	80020b0 <HAL_GetTick>
 800a142:	4602      	mov	r2, r0
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	1ad3      	subs	r3, r2, r3
 800a148:	687a      	ldr	r2, [r7, #4]
 800a14a:	429a      	cmp	r2, r3
 800a14c:	d8f0      	bhi.n	800a130 <SD_CheckStatusWithTimeout+0x10>
>>>>>>> Stashed changes
    }
  }

  return -1;
<<<<<<< Updated upstream
 800a17e:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a182:	4618      	mov	r0, r3
 800a184:	3710      	adds	r7, #16
 800a186:	46bd      	mov	sp, r7
 800a188:	bd80      	pop	{r7, pc}
	...

0800a18c <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800a18c:	b580      	push	{r7, lr}
 800a18e:	b082      	sub	sp, #8
 800a190:	af00      	add	r7, sp, #0
 800a192:	4603      	mov	r3, r0
 800a194:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800a196:	4b0b      	ldr	r3, [pc, #44]	; (800a1c4 <SD_CheckStatus+0x38>)
 800a198:	2201      	movs	r2, #1
 800a19a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800a19c:	f7ff ff6c 	bl	800a078 <BSP_SD_GetCardState>
 800a1a0:	4603      	mov	r3, r0
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d107      	bne.n	800a1b6 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800a1a6:	4b07      	ldr	r3, [pc, #28]	; (800a1c4 <SD_CheckStatus+0x38>)
 800a1a8:	781b      	ldrb	r3, [r3, #0]
 800a1aa:	b2db      	uxtb	r3, r3
 800a1ac:	f023 0301 	bic.w	r3, r3, #1
 800a1b0:	b2da      	uxtb	r2, r3
 800a1b2:	4b04      	ldr	r3, [pc, #16]	; (800a1c4 <SD_CheckStatus+0x38>)
 800a1b4:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800a1b6:	4b03      	ldr	r3, [pc, #12]	; (800a1c4 <SD_CheckStatus+0x38>)
 800a1b8:	781b      	ldrb	r3, [r3, #0]
 800a1ba:	b2db      	uxtb	r3, r3
}
 800a1bc:	4618      	mov	r0, r3
 800a1be:	3708      	adds	r7, #8
 800a1c0:	46bd      	mov	sp, r7
 800a1c2:	bd80      	pop	{r7, pc}
 800a1c4:	20000009 	.word	0x20000009

0800a1c8 <SD_initialize>:
=======
 800a14e:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a152:	4618      	mov	r0, r3
 800a154:	3710      	adds	r7, #16
 800a156:	46bd      	mov	sp, r7
 800a158:	bd80      	pop	{r7, pc}
	...

0800a15c <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800a15c:	b580      	push	{r7, lr}
 800a15e:	b082      	sub	sp, #8
 800a160:	af00      	add	r7, sp, #0
 800a162:	4603      	mov	r3, r0
 800a164:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800a166:	4b0b      	ldr	r3, [pc, #44]	; (800a194 <SD_CheckStatus+0x38>)
 800a168:	2201      	movs	r2, #1
 800a16a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800a16c:	f7ff ff6c 	bl	800a048 <BSP_SD_GetCardState>
 800a170:	4603      	mov	r3, r0
 800a172:	2b00      	cmp	r3, #0
 800a174:	d107      	bne.n	800a186 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800a176:	4b07      	ldr	r3, [pc, #28]	; (800a194 <SD_CheckStatus+0x38>)
 800a178:	781b      	ldrb	r3, [r3, #0]
 800a17a:	b2db      	uxtb	r3, r3
 800a17c:	f023 0301 	bic.w	r3, r3, #1
 800a180:	b2da      	uxtb	r2, r3
 800a182:	4b04      	ldr	r3, [pc, #16]	; (800a194 <SD_CheckStatus+0x38>)
 800a184:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800a186:	4b03      	ldr	r3, [pc, #12]	; (800a194 <SD_CheckStatus+0x38>)
 800a188:	781b      	ldrb	r3, [r3, #0]
 800a18a:	b2db      	uxtb	r3, r3
}
 800a18c:	4618      	mov	r0, r3
 800a18e:	3708      	adds	r7, #8
 800a190:	46bd      	mov	sp, r7
 800a192:	bd80      	pop	{r7, pc}
 800a194:	20000009 	.word	0x20000009

0800a198 <SD_initialize>:
>>>>>>> Stashed changes
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
<<<<<<< Updated upstream
 800a1c8:	b580      	push	{r7, lr}
 800a1ca:	b082      	sub	sp, #8
 800a1cc:	af00      	add	r7, sp, #0
 800a1ce:	4603      	mov	r3, r0
 800a1d0:	71fb      	strb	r3, [r7, #7]
=======
 800a198:	b580      	push	{r7, lr}
 800a19a:	b082      	sub	sp, #8
 800a19c:	af00      	add	r7, sp, #0
 800a19e:	4603      	mov	r3, r0
 800a1a0:	71fb      	strb	r3, [r7, #7]
>>>>>>> Stashed changes

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
<<<<<<< Updated upstream
 800a1d2:	f7ff fef7 	bl	8009fc4 <BSP_SD_Init>
 800a1d6:	4603      	mov	r3, r0
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d107      	bne.n	800a1ec <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800a1dc:	79fb      	ldrb	r3, [r7, #7]
 800a1de:	4618      	mov	r0, r3
 800a1e0:	f7ff ffd4 	bl	800a18c <SD_CheckStatus>
 800a1e4:	4603      	mov	r3, r0
 800a1e6:	461a      	mov	r2, r3
 800a1e8:	4b04      	ldr	r3, [pc, #16]	; (800a1fc <SD_initialize+0x34>)
 800a1ea:	701a      	strb	r2, [r3, #0]
=======
 800a1a2:	f7ff fef7 	bl	8009f94 <BSP_SD_Init>
 800a1a6:	4603      	mov	r3, r0
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d107      	bne.n	800a1bc <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800a1ac:	79fb      	ldrb	r3, [r7, #7]
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	f7ff ffd4 	bl	800a15c <SD_CheckStatus>
 800a1b4:	4603      	mov	r3, r0
 800a1b6:	461a      	mov	r2, r3
 800a1b8:	4b04      	ldr	r3, [pc, #16]	; (800a1cc <SD_initialize+0x34>)
 800a1ba:	701a      	strb	r2, [r3, #0]
>>>>>>> Stashed changes

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
<<<<<<< Updated upstream
 800a1ec:	4b03      	ldr	r3, [pc, #12]	; (800a1fc <SD_initialize+0x34>)
 800a1ee:	781b      	ldrb	r3, [r3, #0]
 800a1f0:	b2db      	uxtb	r3, r3
}
 800a1f2:	4618      	mov	r0, r3
 800a1f4:	3708      	adds	r7, #8
 800a1f6:	46bd      	mov	sp, r7
 800a1f8:	bd80      	pop	{r7, pc}
 800a1fa:	bf00      	nop
 800a1fc:	20000009 	.word	0x20000009

0800a200 <SD_status>:
=======
 800a1bc:	4b03      	ldr	r3, [pc, #12]	; (800a1cc <SD_initialize+0x34>)
 800a1be:	781b      	ldrb	r3, [r3, #0]
 800a1c0:	b2db      	uxtb	r3, r3
}
 800a1c2:	4618      	mov	r0, r3
 800a1c4:	3708      	adds	r7, #8
 800a1c6:	46bd      	mov	sp, r7
 800a1c8:	bd80      	pop	{r7, pc}
 800a1ca:	bf00      	nop
 800a1cc:	20000009 	.word	0x20000009

0800a1d0 <SD_status>:
>>>>>>> Stashed changes
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
<<<<<<< Updated upstream
 800a200:	b580      	push	{r7, lr}
 800a202:	b082      	sub	sp, #8
 800a204:	af00      	add	r7, sp, #0
 800a206:	4603      	mov	r3, r0
 800a208:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800a20a:	79fb      	ldrb	r3, [r7, #7]
 800a20c:	4618      	mov	r0, r3
 800a20e:	f7ff ffbd 	bl	800a18c <SD_CheckStatus>
 800a212:	4603      	mov	r3, r0
}
 800a214:	4618      	mov	r0, r3
 800a216:	3708      	adds	r7, #8
 800a218:	46bd      	mov	sp, r7
 800a21a:	bd80      	pop	{r7, pc}

0800a21c <SD_read>:
=======
 800a1d0:	b580      	push	{r7, lr}
 800a1d2:	b082      	sub	sp, #8
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	4603      	mov	r3, r0
 800a1d8:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800a1da:	79fb      	ldrb	r3, [r7, #7]
 800a1dc:	4618      	mov	r0, r3
 800a1de:	f7ff ffbd 	bl	800a15c <SD_CheckStatus>
 800a1e2:	4603      	mov	r3, r0
}
 800a1e4:	4618      	mov	r0, r3
 800a1e6:	3708      	adds	r7, #8
 800a1e8:	46bd      	mov	sp, r7
 800a1ea:	bd80      	pop	{r7, pc}

0800a1ec <SD_read>:
>>>>>>> Stashed changes
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
<<<<<<< Updated upstream
 800a21c:	b580      	push	{r7, lr}
 800a21e:	b086      	sub	sp, #24
 800a220:	af00      	add	r7, sp, #0
 800a222:	60b9      	str	r1, [r7, #8]
 800a224:	607a      	str	r2, [r7, #4]
 800a226:	603b      	str	r3, [r7, #0]
 800a228:	4603      	mov	r3, r0
 800a22a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800a22c:	2301      	movs	r3, #1
 800a22e:	75fb      	strb	r3, [r7, #23]
=======
 800a1ec:	b580      	push	{r7, lr}
 800a1ee:	b086      	sub	sp, #24
 800a1f0:	af00      	add	r7, sp, #0
 800a1f2:	60b9      	str	r1, [r7, #8]
 800a1f4:	607a      	str	r2, [r7, #4]
 800a1f6:	603b      	str	r3, [r7, #0]
 800a1f8:	4603      	mov	r3, r0
 800a1fa:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800a1fc:	2301      	movs	r3, #1
 800a1fe:	75fb      	strb	r3, [r7, #23]
>>>>>>> Stashed changes

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
<<<<<<< Updated upstream
 800a230:	f247 5030 	movw	r0, #30000	; 0x7530
 800a234:	f7ff ff8c 	bl	800a150 <SD_CheckStatusWithTimeout>
 800a238:	4603      	mov	r3, r0
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	da01      	bge.n	800a242 <SD_read+0x26>
  {
    return res;
 800a23e:	7dfb      	ldrb	r3, [r7, #23]
 800a240:	e03b      	b.n	800a2ba <SD_read+0x9e>
=======
 800a200:	f247 5030 	movw	r0, #30000	; 0x7530
 800a204:	f7ff ff8c 	bl	800a120 <SD_CheckStatusWithTimeout>
 800a208:	4603      	mov	r3, r0
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	da01      	bge.n	800a212 <SD_read+0x26>
  {
    return res;
 800a20e:	7dfb      	ldrb	r3, [r7, #23]
 800a210:	e03b      	b.n	800a28a <SD_read+0x9e>
>>>>>>> Stashed changes

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
<<<<<<< Updated upstream
 800a242:	683a      	ldr	r2, [r7, #0]
 800a244:	6879      	ldr	r1, [r7, #4]
 800a246:	68b8      	ldr	r0, [r7, #8]
 800a248:	f7ff fee2 	bl	800a010 <BSP_SD_ReadBlocks_DMA>
 800a24c:	4603      	mov	r3, r0
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d132      	bne.n	800a2b8 <SD_read+0x9c>
=======
 800a212:	683a      	ldr	r2, [r7, #0]
 800a214:	6879      	ldr	r1, [r7, #4]
 800a216:	68b8      	ldr	r0, [r7, #8]
 800a218:	f7ff fee2 	bl	8009fe0 <BSP_SD_ReadBlocks_DMA>
 800a21c:	4603      	mov	r3, r0
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d132      	bne.n	800a288 <SD_read+0x9c>
>>>>>>> Stashed changes
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
<<<<<<< Updated upstream
 800a252:	4b1c      	ldr	r3, [pc, #112]	; (800a2c4 <SD_read+0xa8>)
 800a254:	2200      	movs	r2, #0
 800a256:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800a258:	f7f7 ff28 	bl	80020ac <HAL_GetTick>
 800a25c:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800a25e:	bf00      	nop
 800a260:	4b18      	ldr	r3, [pc, #96]	; (800a2c4 <SD_read+0xa8>)
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	2b00      	cmp	r3, #0
 800a266:	d108      	bne.n	800a27a <SD_read+0x5e>
 800a268:	f7f7 ff20 	bl	80020ac <HAL_GetTick>
 800a26c:	4602      	mov	r2, r0
 800a26e:	693b      	ldr	r3, [r7, #16]
 800a270:	1ad3      	subs	r3, r2, r3
 800a272:	f247 522f 	movw	r2, #29999	; 0x752f
 800a276:	4293      	cmp	r3, r2
 800a278:	d9f2      	bls.n	800a260 <SD_read+0x44>
=======
 800a222:	4b1c      	ldr	r3, [pc, #112]	; (800a294 <SD_read+0xa8>)
 800a224:	2200      	movs	r2, #0
 800a226:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800a228:	f7f7 ff42 	bl	80020b0 <HAL_GetTick>
 800a22c:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800a22e:	bf00      	nop
 800a230:	4b18      	ldr	r3, [pc, #96]	; (800a294 <SD_read+0xa8>)
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	2b00      	cmp	r3, #0
 800a236:	d108      	bne.n	800a24a <SD_read+0x5e>
 800a238:	f7f7 ff3a 	bl	80020b0 <HAL_GetTick>
 800a23c:	4602      	mov	r2, r0
 800a23e:	693b      	ldr	r3, [r7, #16]
 800a240:	1ad3      	subs	r3, r2, r3
 800a242:	f247 522f 	movw	r2, #29999	; 0x752f
 800a246:	4293      	cmp	r3, r2
 800a248:	d9f2      	bls.n	800a230 <SD_read+0x44>
>>>>>>> Stashed changes
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
<<<<<<< Updated upstream
 800a27a:	4b12      	ldr	r3, [pc, #72]	; (800a2c4 <SD_read+0xa8>)
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d102      	bne.n	800a288 <SD_read+0x6c>
      {
        res = RES_ERROR;
 800a282:	2301      	movs	r3, #1
 800a284:	75fb      	strb	r3, [r7, #23]
 800a286:	e017      	b.n	800a2b8 <SD_read+0x9c>
=======
 800a24a:	4b12      	ldr	r3, [pc, #72]	; (800a294 <SD_read+0xa8>)
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d102      	bne.n	800a258 <SD_read+0x6c>
      {
        res = RES_ERROR;
 800a252:	2301      	movs	r3, #1
 800a254:	75fb      	strb	r3, [r7, #23]
 800a256:	e017      	b.n	800a288 <SD_read+0x9c>
>>>>>>> Stashed changes
      }
      else
      {
        ReadStatus = 0;
<<<<<<< Updated upstream
 800a288:	4b0e      	ldr	r3, [pc, #56]	; (800a2c4 <SD_read+0xa8>)
 800a28a:	2200      	movs	r2, #0
 800a28c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800a28e:	f7f7 ff0d 	bl	80020ac <HAL_GetTick>
 800a292:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800a294:	e007      	b.n	800a2a6 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800a296:	f7ff feef 	bl	800a078 <BSP_SD_GetCardState>
 800a29a:	4603      	mov	r3, r0
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d102      	bne.n	800a2a6 <SD_read+0x8a>
          {
            res = RES_OK;
 800a2a0:	2300      	movs	r3, #0
 800a2a2:	75fb      	strb	r3, [r7, #23]
=======
 800a258:	4b0e      	ldr	r3, [pc, #56]	; (800a294 <SD_read+0xa8>)
 800a25a:	2200      	movs	r2, #0
 800a25c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800a25e:	f7f7 ff27 	bl	80020b0 <HAL_GetTick>
 800a262:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800a264:	e007      	b.n	800a276 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800a266:	f7ff feef 	bl	800a048 <BSP_SD_GetCardState>
 800a26a:	4603      	mov	r3, r0
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d102      	bne.n	800a276 <SD_read+0x8a>
          {
            res = RES_OK;
 800a270:	2300      	movs	r3, #0
 800a272:	75fb      	strb	r3, [r7, #23]
>>>>>>> Stashed changes
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
<<<<<<< Updated upstream
 800a2a4:	e008      	b.n	800a2b8 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800a2a6:	f7f7 ff01 	bl	80020ac <HAL_GetTick>
 800a2aa:	4602      	mov	r2, r0
 800a2ac:	693b      	ldr	r3, [r7, #16]
 800a2ae:	1ad3      	subs	r3, r2, r3
 800a2b0:	f247 522f 	movw	r2, #29999	; 0x752f
 800a2b4:	4293      	cmp	r3, r2
 800a2b6:	d9ee      	bls.n	800a296 <SD_read+0x7a>
=======
 800a274:	e008      	b.n	800a288 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800a276:	f7f7 ff1b 	bl	80020b0 <HAL_GetTick>
 800a27a:	4602      	mov	r2, r0
 800a27c:	693b      	ldr	r3, [r7, #16]
 800a27e:	1ad3      	subs	r3, r2, r3
 800a280:	f247 522f 	movw	r2, #29999	; 0x752f
 800a284:	4293      	cmp	r3, r2
 800a286:	d9ee      	bls.n	800a266 <SD_read+0x7a>
>>>>>>> Stashed changes
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
<<<<<<< Updated upstream
 800a2b8:	7dfb      	ldrb	r3, [r7, #23]
}
 800a2ba:	4618      	mov	r0, r3
 800a2bc:	3718      	adds	r7, #24
 800a2be:	46bd      	mov	sp, r7
 800a2c0:	bd80      	pop	{r7, pc}
 800a2c2:	bf00      	nop
 800a2c4:	200000a4 	.word	0x200000a4

0800a2c8 <SD_write>:
=======
 800a288:	7dfb      	ldrb	r3, [r7, #23]
}
 800a28a:	4618      	mov	r0, r3
 800a28c:	3718      	adds	r7, #24
 800a28e:	46bd      	mov	sp, r7
 800a290:	bd80      	pop	{r7, pc}
 800a292:	bf00      	nop
 800a294:	200000a4 	.word	0x200000a4

0800a298 <SD_write>:
>>>>>>> Stashed changes
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
<<<<<<< Updated upstream
 800a2c8:	b580      	push	{r7, lr}
 800a2ca:	b086      	sub	sp, #24
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	60b9      	str	r1, [r7, #8]
 800a2d0:	607a      	str	r2, [r7, #4]
 800a2d2:	603b      	str	r3, [r7, #0]
 800a2d4:	4603      	mov	r3, r0
 800a2d6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800a2d8:	2301      	movs	r3, #1
 800a2da:	75fb      	strb	r3, [r7, #23]
=======
 800a298:	b580      	push	{r7, lr}
 800a29a:	b086      	sub	sp, #24
 800a29c:	af00      	add	r7, sp, #0
 800a29e:	60b9      	str	r1, [r7, #8]
 800a2a0:	607a      	str	r2, [r7, #4]
 800a2a2:	603b      	str	r3, [r7, #0]
 800a2a4:	4603      	mov	r3, r0
 800a2a6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800a2a8:	2301      	movs	r3, #1
 800a2aa:	75fb      	strb	r3, [r7, #23]
>>>>>>> Stashed changes
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
<<<<<<< Updated upstream
 800a2dc:	4b24      	ldr	r3, [pc, #144]	; (800a370 <SD_write+0xa8>)
 800a2de:	2200      	movs	r2, #0
 800a2e0:	601a      	str	r2, [r3, #0]
=======
 800a2ac:	4b24      	ldr	r3, [pc, #144]	; (800a340 <SD_write+0xa8>)
 800a2ae:	2200      	movs	r2, #0
 800a2b0:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
<<<<<<< Updated upstream
 800a2e2:	f247 5030 	movw	r0, #30000	; 0x7530
 800a2e6:	f7ff ff33 	bl	800a150 <SD_CheckStatusWithTimeout>
 800a2ea:	4603      	mov	r3, r0
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	da01      	bge.n	800a2f4 <SD_write+0x2c>
  {
    return res;
 800a2f0:	7dfb      	ldrb	r3, [r7, #23]
 800a2f2:	e038      	b.n	800a366 <SD_write+0x9e>
=======
 800a2b2:	f247 5030 	movw	r0, #30000	; 0x7530
 800a2b6:	f7ff ff33 	bl	800a120 <SD_CheckStatusWithTimeout>
 800a2ba:	4603      	mov	r3, r0
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	da01      	bge.n	800a2c4 <SD_write+0x2c>
  {
    return res;
 800a2c0:	7dfb      	ldrb	r3, [r7, #23]
 800a2c2:	e038      	b.n	800a336 <SD_write+0x9e>
>>>>>>> Stashed changes
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
<<<<<<< Updated upstream
 800a2f4:	683a      	ldr	r2, [r7, #0]
 800a2f6:	6879      	ldr	r1, [r7, #4]
 800a2f8:	68b8      	ldr	r0, [r7, #8]
 800a2fa:	f7ff fea3 	bl	800a044 <BSP_SD_WriteBlocks_DMA>
 800a2fe:	4603      	mov	r3, r0
 800a300:	2b00      	cmp	r3, #0
 800a302:	d12f      	bne.n	800a364 <SD_write+0x9c>
=======
 800a2c4:	683a      	ldr	r2, [r7, #0]
 800a2c6:	6879      	ldr	r1, [r7, #4]
 800a2c8:	68b8      	ldr	r0, [r7, #8]
 800a2ca:	f7ff fea3 	bl	800a014 <BSP_SD_WriteBlocks_DMA>
 800a2ce:	4603      	mov	r3, r0
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d12f      	bne.n	800a334 <SD_write+0x9c>
>>>>>>> Stashed changes
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
<<<<<<< Updated upstream
 800a304:	f7f7 fed2 	bl	80020ac <HAL_GetTick>
 800a308:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800a30a:	bf00      	nop
 800a30c:	4b18      	ldr	r3, [pc, #96]	; (800a370 <SD_write+0xa8>)
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	2b00      	cmp	r3, #0
 800a312:	d108      	bne.n	800a326 <SD_write+0x5e>
 800a314:	f7f7 feca 	bl	80020ac <HAL_GetTick>
 800a318:	4602      	mov	r2, r0
 800a31a:	693b      	ldr	r3, [r7, #16]
 800a31c:	1ad3      	subs	r3, r2, r3
 800a31e:	f247 522f 	movw	r2, #29999	; 0x752f
 800a322:	4293      	cmp	r3, r2
 800a324:	d9f2      	bls.n	800a30c <SD_write+0x44>
=======
 800a2d4:	f7f7 feec 	bl	80020b0 <HAL_GetTick>
 800a2d8:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800a2da:	bf00      	nop
 800a2dc:	4b18      	ldr	r3, [pc, #96]	; (800a340 <SD_write+0xa8>)
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d108      	bne.n	800a2f6 <SD_write+0x5e>
 800a2e4:	f7f7 fee4 	bl	80020b0 <HAL_GetTick>
 800a2e8:	4602      	mov	r2, r0
 800a2ea:	693b      	ldr	r3, [r7, #16]
 800a2ec:	1ad3      	subs	r3, r2, r3
 800a2ee:	f247 522f 	movw	r2, #29999	; 0x752f
 800a2f2:	4293      	cmp	r3, r2
 800a2f4:	d9f2      	bls.n	800a2dc <SD_write+0x44>
>>>>>>> Stashed changes
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
<<<<<<< Updated upstream
 800a326:	4b12      	ldr	r3, [pc, #72]	; (800a370 <SD_write+0xa8>)
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d102      	bne.n	800a334 <SD_write+0x6c>
      {
        res = RES_ERROR;
 800a32e:	2301      	movs	r3, #1
 800a330:	75fb      	strb	r3, [r7, #23]
 800a332:	e017      	b.n	800a364 <SD_write+0x9c>
=======
 800a2f6:	4b12      	ldr	r3, [pc, #72]	; (800a340 <SD_write+0xa8>)
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d102      	bne.n	800a304 <SD_write+0x6c>
      {
        res = RES_ERROR;
 800a2fe:	2301      	movs	r3, #1
 800a300:	75fb      	strb	r3, [r7, #23]
 800a302:	e017      	b.n	800a334 <SD_write+0x9c>
>>>>>>> Stashed changes
      }
      else
      {
        WriteStatus = 0;
<<<<<<< Updated upstream
 800a334:	4b0e      	ldr	r3, [pc, #56]	; (800a370 <SD_write+0xa8>)
 800a336:	2200      	movs	r2, #0
 800a338:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800a33a:	f7f7 feb7 	bl	80020ac <HAL_GetTick>
 800a33e:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800a340:	e007      	b.n	800a352 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800a342:	f7ff fe99 	bl	800a078 <BSP_SD_GetCardState>
 800a346:	4603      	mov	r3, r0
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d102      	bne.n	800a352 <SD_write+0x8a>
          {
            res = RES_OK;
 800a34c:	2300      	movs	r3, #0
 800a34e:	75fb      	strb	r3, [r7, #23]
            break;
 800a350:	e008      	b.n	800a364 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800a352:	f7f7 feab 	bl	80020ac <HAL_GetTick>
 800a356:	4602      	mov	r2, r0
 800a358:	693b      	ldr	r3, [r7, #16]
 800a35a:	1ad3      	subs	r3, r2, r3
 800a35c:	f247 522f 	movw	r2, #29999	; 0x752f
 800a360:	4293      	cmp	r3, r2
 800a362:	d9ee      	bls.n	800a342 <SD_write+0x7a>
=======
 800a304:	4b0e      	ldr	r3, [pc, #56]	; (800a340 <SD_write+0xa8>)
 800a306:	2200      	movs	r2, #0
 800a308:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800a30a:	f7f7 fed1 	bl	80020b0 <HAL_GetTick>
 800a30e:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800a310:	e007      	b.n	800a322 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800a312:	f7ff fe99 	bl	800a048 <BSP_SD_GetCardState>
 800a316:	4603      	mov	r3, r0
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d102      	bne.n	800a322 <SD_write+0x8a>
          {
            res = RES_OK;
 800a31c:	2300      	movs	r3, #0
 800a31e:	75fb      	strb	r3, [r7, #23]
            break;
 800a320:	e008      	b.n	800a334 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800a322:	f7f7 fec5 	bl	80020b0 <HAL_GetTick>
 800a326:	4602      	mov	r2, r0
 800a328:	693b      	ldr	r3, [r7, #16]
 800a32a:	1ad3      	subs	r3, r2, r3
 800a32c:	f247 522f 	movw	r2, #29999	; 0x752f
 800a330:	4293      	cmp	r3, r2
 800a332:	d9ee      	bls.n	800a312 <SD_write+0x7a>
>>>>>>> Stashed changes
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
<<<<<<< Updated upstream
 800a364:	7dfb      	ldrb	r3, [r7, #23]
}
 800a366:	4618      	mov	r0, r3
 800a368:	3718      	adds	r7, #24
 800a36a:	46bd      	mov	sp, r7
 800a36c:	bd80      	pop	{r7, pc}
 800a36e:	bf00      	nop
 800a370:	200000a0 	.word	0x200000a0

0800a374 <SD_ioctl>:
=======
 800a334:	7dfb      	ldrb	r3, [r7, #23]
}
 800a336:	4618      	mov	r0, r3
 800a338:	3718      	adds	r7, #24
 800a33a:	46bd      	mov	sp, r7
 800a33c:	bd80      	pop	{r7, pc}
 800a33e:	bf00      	nop
 800a340:	200000a0 	.word	0x200000a0

0800a344 <SD_ioctl>:
>>>>>>> Stashed changes
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
<<<<<<< Updated upstream
 800a374:	b580      	push	{r7, lr}
 800a376:	b08c      	sub	sp, #48	; 0x30
 800a378:	af00      	add	r7, sp, #0
 800a37a:	4603      	mov	r3, r0
 800a37c:	603a      	str	r2, [r7, #0]
 800a37e:	71fb      	strb	r3, [r7, #7]
 800a380:	460b      	mov	r3, r1
 800a382:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800a384:	2301      	movs	r3, #1
 800a386:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800a38a:	4b25      	ldr	r3, [pc, #148]	; (800a420 <SD_ioctl+0xac>)
 800a38c:	781b      	ldrb	r3, [r3, #0]
 800a38e:	b2db      	uxtb	r3, r3
 800a390:	f003 0301 	and.w	r3, r3, #1
 800a394:	2b00      	cmp	r3, #0
 800a396:	d001      	beq.n	800a39c <SD_ioctl+0x28>
 800a398:	2303      	movs	r3, #3
 800a39a:	e03c      	b.n	800a416 <SD_ioctl+0xa2>

  switch (cmd)
 800a39c:	79bb      	ldrb	r3, [r7, #6]
 800a39e:	2b03      	cmp	r3, #3
 800a3a0:	d834      	bhi.n	800a40c <SD_ioctl+0x98>
 800a3a2:	a201      	add	r2, pc, #4	; (adr r2, 800a3a8 <SD_ioctl+0x34>)
 800a3a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3a8:	0800a3b9 	.word	0x0800a3b9
 800a3ac:	0800a3c1 	.word	0x0800a3c1
 800a3b0:	0800a3d9 	.word	0x0800a3d9
 800a3b4:	0800a3f3 	.word	0x0800a3f3
=======
 800a344:	b580      	push	{r7, lr}
 800a346:	b08c      	sub	sp, #48	; 0x30
 800a348:	af00      	add	r7, sp, #0
 800a34a:	4603      	mov	r3, r0
 800a34c:	603a      	str	r2, [r7, #0]
 800a34e:	71fb      	strb	r3, [r7, #7]
 800a350:	460b      	mov	r3, r1
 800a352:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800a354:	2301      	movs	r3, #1
 800a356:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800a35a:	4b25      	ldr	r3, [pc, #148]	; (800a3f0 <SD_ioctl+0xac>)
 800a35c:	781b      	ldrb	r3, [r3, #0]
 800a35e:	b2db      	uxtb	r3, r3
 800a360:	f003 0301 	and.w	r3, r3, #1
 800a364:	2b00      	cmp	r3, #0
 800a366:	d001      	beq.n	800a36c <SD_ioctl+0x28>
 800a368:	2303      	movs	r3, #3
 800a36a:	e03c      	b.n	800a3e6 <SD_ioctl+0xa2>

  switch (cmd)
 800a36c:	79bb      	ldrb	r3, [r7, #6]
 800a36e:	2b03      	cmp	r3, #3
 800a370:	d834      	bhi.n	800a3dc <SD_ioctl+0x98>
 800a372:	a201      	add	r2, pc, #4	; (adr r2, 800a378 <SD_ioctl+0x34>)
 800a374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a378:	0800a389 	.word	0x0800a389
 800a37c:	0800a391 	.word	0x0800a391
 800a380:	0800a3a9 	.word	0x0800a3a9
 800a384:	0800a3c3 	.word	0x0800a3c3
>>>>>>> Stashed changes
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
<<<<<<< Updated upstream
 800a3b8:	2300      	movs	r3, #0
 800a3ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a3be:	e028      	b.n	800a412 <SD_ioctl+0x9e>
=======
 800a388:	2300      	movs	r3, #0
 800a38a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a38e:	e028      	b.n	800a3e2 <SD_ioctl+0x9e>
>>>>>>> Stashed changes

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
<<<<<<< Updated upstream
 800a3c0:	f107 030c 	add.w	r3, r7, #12
 800a3c4:	4618      	mov	r0, r3
 800a3c6:	f7ff fe67 	bl	800a098 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800a3ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a3cc:	683b      	ldr	r3, [r7, #0]
 800a3ce:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800a3d0:	2300      	movs	r3, #0
 800a3d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a3d6:	e01c      	b.n	800a412 <SD_ioctl+0x9e>
=======
 800a390:	f107 030c 	add.w	r3, r7, #12
 800a394:	4618      	mov	r0, r3
 800a396:	f7ff fe67 	bl	800a068 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800a39a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a39c:	683b      	ldr	r3, [r7, #0]
 800a39e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800a3a0:	2300      	movs	r3, #0
 800a3a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a3a6:	e01c      	b.n	800a3e2 <SD_ioctl+0x9e>
>>>>>>> Stashed changes

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
<<<<<<< Updated upstream
 800a3d8:	f107 030c 	add.w	r3, r7, #12
 800a3dc:	4618      	mov	r0, r3
 800a3de:	f7ff fe5b 	bl	800a098 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800a3e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3e4:	b29a      	uxth	r2, r3
 800a3e6:	683b      	ldr	r3, [r7, #0]
 800a3e8:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800a3ea:	2300      	movs	r3, #0
 800a3ec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a3f0:	e00f      	b.n	800a412 <SD_ioctl+0x9e>
=======
 800a3a8:	f107 030c 	add.w	r3, r7, #12
 800a3ac:	4618      	mov	r0, r3
 800a3ae:	f7ff fe5b 	bl	800a068 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800a3b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3b4:	b29a      	uxth	r2, r3
 800a3b6:	683b      	ldr	r3, [r7, #0]
 800a3b8:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800a3ba:	2300      	movs	r3, #0
 800a3bc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a3c0:	e00f      	b.n	800a3e2 <SD_ioctl+0x9e>
>>>>>>> Stashed changes

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
<<<<<<< Updated upstream
 800a3f2:	f107 030c 	add.w	r3, r7, #12
 800a3f6:	4618      	mov	r0, r3
 800a3f8:	f7ff fe4e 	bl	800a098 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800a3fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3fe:	0a5a      	lsrs	r2, r3, #9
 800a400:	683b      	ldr	r3, [r7, #0]
 800a402:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800a404:	2300      	movs	r3, #0
 800a406:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a40a:	e002      	b.n	800a412 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800a40c:	2304      	movs	r3, #4
 800a40e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800a412:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800a416:	4618      	mov	r0, r3
 800a418:	3730      	adds	r7, #48	; 0x30
 800a41a:	46bd      	mov	sp, r7
 800a41c:	bd80      	pop	{r7, pc}
 800a41e:	bf00      	nop
 800a420:	20000009 	.word	0x20000009

0800a424 <BSP_SD_WriteCpltCallback>:
=======
 800a3c2:	f107 030c 	add.w	r3, r7, #12
 800a3c6:	4618      	mov	r0, r3
 800a3c8:	f7ff fe4e 	bl	800a068 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800a3cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3ce:	0a5a      	lsrs	r2, r3, #9
 800a3d0:	683b      	ldr	r3, [r7, #0]
 800a3d2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800a3d4:	2300      	movs	r3, #0
 800a3d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a3da:	e002      	b.n	800a3e2 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800a3dc:	2304      	movs	r3, #4
 800a3de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800a3e2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	3730      	adds	r7, #48	; 0x30
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	bd80      	pop	{r7, pc}
 800a3ee:	bf00      	nop
 800a3f0:	20000009 	.word	0x20000009

0800a3f4 <BSP_SD_WriteCpltCallback>:
>>>>>>> Stashed changes
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
<<<<<<< Updated upstream
 800a424:	b480      	push	{r7}
 800a426:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800a428:	4b03      	ldr	r3, [pc, #12]	; (800a438 <BSP_SD_WriteCpltCallback+0x14>)
 800a42a:	2201      	movs	r2, #1
 800a42c:	601a      	str	r2, [r3, #0]
}
 800a42e:	bf00      	nop
 800a430:	46bd      	mov	sp, r7
 800a432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a436:	4770      	bx	lr
 800a438:	200000a0 	.word	0x200000a0

0800a43c <BSP_SD_ReadCpltCallback>:
=======
 800a3f4:	b480      	push	{r7}
 800a3f6:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800a3f8:	4b03      	ldr	r3, [pc, #12]	; (800a408 <BSP_SD_WriteCpltCallback+0x14>)
 800a3fa:	2201      	movs	r2, #1
 800a3fc:	601a      	str	r2, [r3, #0]
}
 800a3fe:	bf00      	nop
 800a400:	46bd      	mov	sp, r7
 800a402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a406:	4770      	bx	lr
 800a408:	200000a0 	.word	0x200000a0

0800a40c <BSP_SD_ReadCpltCallback>:
>>>>>>> Stashed changes
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
<<<<<<< Updated upstream
 800a43c:	b480      	push	{r7}
 800a43e:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800a440:	4b03      	ldr	r3, [pc, #12]	; (800a450 <BSP_SD_ReadCpltCallback+0x14>)
 800a442:	2201      	movs	r2, #1
 800a444:	601a      	str	r2, [r3, #0]
}
 800a446:	bf00      	nop
 800a448:	46bd      	mov	sp, r7
 800a44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a44e:	4770      	bx	lr
 800a450:	200000a4 	.word	0x200000a4

0800a454 <MX_LWIP_Init>:
=======
 800a40c:	b480      	push	{r7}
 800a40e:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800a410:	4b03      	ldr	r3, [pc, #12]	; (800a420 <BSP_SD_ReadCpltCallback+0x14>)
 800a412:	2201      	movs	r2, #1
 800a414:	601a      	str	r2, [r3, #0]
}
 800a416:	bf00      	nop
 800a418:	46bd      	mov	sp, r7
 800a41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a41e:	4770      	bx	lr
 800a420:	200000a4 	.word	0x200000a4

0800a424 <MX_LWIP_Init>:
>>>>>>> Stashed changes

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
<<<<<<< Updated upstream
 800a454:	b580      	push	{r7, lr}
 800a456:	b084      	sub	sp, #16
 800a458:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800a45a:	4b8d      	ldr	r3, [pc, #564]	; (800a690 <MX_LWIP_Init+0x23c>)
 800a45c:	22c0      	movs	r2, #192	; 0xc0
 800a45e:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 800a460:	4b8b      	ldr	r3, [pc, #556]	; (800a690 <MX_LWIP_Init+0x23c>)
 800a462:	22a8      	movs	r2, #168	; 0xa8
 800a464:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 800a466:	4b8a      	ldr	r3, [pc, #552]	; (800a690 <MX_LWIP_Init+0x23c>)
 800a468:	2200      	movs	r2, #0
 800a46a:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 235;
 800a46c:	4b88      	ldr	r3, [pc, #544]	; (800a690 <MX_LWIP_Init+0x23c>)
 800a46e:	22eb      	movs	r2, #235	; 0xeb
 800a470:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800a472:	4b88      	ldr	r3, [pc, #544]	; (800a694 <MX_LWIP_Init+0x240>)
 800a474:	22ff      	movs	r2, #255	; 0xff
 800a476:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800a478:	4b86      	ldr	r3, [pc, #536]	; (800a694 <MX_LWIP_Init+0x240>)
 800a47a:	22ff      	movs	r2, #255	; 0xff
 800a47c:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800a47e:	4b85      	ldr	r3, [pc, #532]	; (800a694 <MX_LWIP_Init+0x240>)
 800a480:	22ff      	movs	r2, #255	; 0xff
 800a482:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800a484:	4b83      	ldr	r3, [pc, #524]	; (800a694 <MX_LWIP_Init+0x240>)
 800a486:	2200      	movs	r2, #0
 800a488:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 800a48a:	4b83      	ldr	r3, [pc, #524]	; (800a698 <MX_LWIP_Init+0x244>)
 800a48c:	22c0      	movs	r2, #192	; 0xc0
 800a48e:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 800a490:	4b81      	ldr	r3, [pc, #516]	; (800a698 <MX_LWIP_Init+0x244>)
 800a492:	22a8      	movs	r2, #168	; 0xa8
 800a494:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 800a496:	4b80      	ldr	r3, [pc, #512]	; (800a698 <MX_LWIP_Init+0x244>)
 800a498:	2200      	movs	r2, #0
 800a49a:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 800a49c:	4b7e      	ldr	r3, [pc, #504]	; (800a698 <MX_LWIP_Init+0x244>)
 800a49e:	2201      	movs	r2, #1
 800a4a0:	70da      	strb	r2, [r3, #3]
=======
 800a424:	b580      	push	{r7, lr}
 800a426:	b084      	sub	sp, #16
 800a428:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800a42a:	4b8d      	ldr	r3, [pc, #564]	; (800a660 <MX_LWIP_Init+0x23c>)
 800a42c:	22c0      	movs	r2, #192	; 0xc0
 800a42e:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 800a430:	4b8b      	ldr	r3, [pc, #556]	; (800a660 <MX_LWIP_Init+0x23c>)
 800a432:	22a8      	movs	r2, #168	; 0xa8
 800a434:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 800a436:	4b8a      	ldr	r3, [pc, #552]	; (800a660 <MX_LWIP_Init+0x23c>)
 800a438:	2200      	movs	r2, #0
 800a43a:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 235;
 800a43c:	4b88      	ldr	r3, [pc, #544]	; (800a660 <MX_LWIP_Init+0x23c>)
 800a43e:	22eb      	movs	r2, #235	; 0xeb
 800a440:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800a442:	4b88      	ldr	r3, [pc, #544]	; (800a664 <MX_LWIP_Init+0x240>)
 800a444:	22ff      	movs	r2, #255	; 0xff
 800a446:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800a448:	4b86      	ldr	r3, [pc, #536]	; (800a664 <MX_LWIP_Init+0x240>)
 800a44a:	22ff      	movs	r2, #255	; 0xff
 800a44c:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800a44e:	4b85      	ldr	r3, [pc, #532]	; (800a664 <MX_LWIP_Init+0x240>)
 800a450:	22ff      	movs	r2, #255	; 0xff
 800a452:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800a454:	4b83      	ldr	r3, [pc, #524]	; (800a664 <MX_LWIP_Init+0x240>)
 800a456:	2200      	movs	r2, #0
 800a458:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 800a45a:	4b83      	ldr	r3, [pc, #524]	; (800a668 <MX_LWIP_Init+0x244>)
 800a45c:	22c0      	movs	r2, #192	; 0xc0
 800a45e:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 800a460:	4b81      	ldr	r3, [pc, #516]	; (800a668 <MX_LWIP_Init+0x244>)
 800a462:	22a8      	movs	r2, #168	; 0xa8
 800a464:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 800a466:	4b80      	ldr	r3, [pc, #512]	; (800a668 <MX_LWIP_Init+0x244>)
 800a468:	2200      	movs	r2, #0
 800a46a:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 800a46c:	4b7e      	ldr	r3, [pc, #504]	; (800a668 <MX_LWIP_Init+0x244>)
 800a46e:	2201      	movs	r2, #1
 800a470:	70da      	strb	r2, [r3, #3]
>>>>>>> Stashed changes

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
<<<<<<< Updated upstream
 800a4a2:	f000 fc40 	bl	800ad26 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800a4a6:	4b7a      	ldr	r3, [pc, #488]	; (800a690 <MX_LWIP_Init+0x23c>)
 800a4a8:	781b      	ldrb	r3, [r3, #0]
 800a4aa:	061a      	lsls	r2, r3, #24
 800a4ac:	4b78      	ldr	r3, [pc, #480]	; (800a690 <MX_LWIP_Init+0x23c>)
 800a4ae:	785b      	ldrb	r3, [r3, #1]
 800a4b0:	041b      	lsls	r3, r3, #16
 800a4b2:	431a      	orrs	r2, r3
 800a4b4:	4b76      	ldr	r3, [pc, #472]	; (800a690 <MX_LWIP_Init+0x23c>)
 800a4b6:	789b      	ldrb	r3, [r3, #2]
 800a4b8:	021b      	lsls	r3, r3, #8
 800a4ba:	4313      	orrs	r3, r2
 800a4bc:	4a74      	ldr	r2, [pc, #464]	; (800a690 <MX_LWIP_Init+0x23c>)
 800a4be:	78d2      	ldrb	r2, [r2, #3]
 800a4c0:	4313      	orrs	r3, r2
 800a4c2:	061a      	lsls	r2, r3, #24
 800a4c4:	4b72      	ldr	r3, [pc, #456]	; (800a690 <MX_LWIP_Init+0x23c>)
 800a4c6:	781b      	ldrb	r3, [r3, #0]
 800a4c8:	0619      	lsls	r1, r3, #24
 800a4ca:	4b71      	ldr	r3, [pc, #452]	; (800a690 <MX_LWIP_Init+0x23c>)
 800a4cc:	785b      	ldrb	r3, [r3, #1]
 800a4ce:	041b      	lsls	r3, r3, #16
 800a4d0:	4319      	orrs	r1, r3
 800a4d2:	4b6f      	ldr	r3, [pc, #444]	; (800a690 <MX_LWIP_Init+0x23c>)
 800a4d4:	789b      	ldrb	r3, [r3, #2]
 800a4d6:	021b      	lsls	r3, r3, #8
 800a4d8:	430b      	orrs	r3, r1
 800a4da:	496d      	ldr	r1, [pc, #436]	; (800a690 <MX_LWIP_Init+0x23c>)
 800a4dc:	78c9      	ldrb	r1, [r1, #3]
 800a4de:	430b      	orrs	r3, r1
 800a4e0:	021b      	lsls	r3, r3, #8
 800a4e2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a4e6:	431a      	orrs	r2, r3
 800a4e8:	4b69      	ldr	r3, [pc, #420]	; (800a690 <MX_LWIP_Init+0x23c>)
 800a4ea:	781b      	ldrb	r3, [r3, #0]
 800a4ec:	0619      	lsls	r1, r3, #24
 800a4ee:	4b68      	ldr	r3, [pc, #416]	; (800a690 <MX_LWIP_Init+0x23c>)
 800a4f0:	785b      	ldrb	r3, [r3, #1]
 800a4f2:	041b      	lsls	r3, r3, #16
 800a4f4:	4319      	orrs	r1, r3
 800a4f6:	4b66      	ldr	r3, [pc, #408]	; (800a690 <MX_LWIP_Init+0x23c>)
 800a4f8:	789b      	ldrb	r3, [r3, #2]
 800a4fa:	021b      	lsls	r3, r3, #8
 800a4fc:	430b      	orrs	r3, r1
 800a4fe:	4964      	ldr	r1, [pc, #400]	; (800a690 <MX_LWIP_Init+0x23c>)
 800a500:	78c9      	ldrb	r1, [r1, #3]
 800a502:	430b      	orrs	r3, r1
 800a504:	0a1b      	lsrs	r3, r3, #8
 800a506:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800a50a:	431a      	orrs	r2, r3
 800a50c:	4b60      	ldr	r3, [pc, #384]	; (800a690 <MX_LWIP_Init+0x23c>)
 800a50e:	781b      	ldrb	r3, [r3, #0]
 800a510:	0619      	lsls	r1, r3, #24
 800a512:	4b5f      	ldr	r3, [pc, #380]	; (800a690 <MX_LWIP_Init+0x23c>)
 800a514:	785b      	ldrb	r3, [r3, #1]
 800a516:	041b      	lsls	r3, r3, #16
 800a518:	4319      	orrs	r1, r3
 800a51a:	4b5d      	ldr	r3, [pc, #372]	; (800a690 <MX_LWIP_Init+0x23c>)
 800a51c:	789b      	ldrb	r3, [r3, #2]
 800a51e:	021b      	lsls	r3, r3, #8
 800a520:	430b      	orrs	r3, r1
 800a522:	495b      	ldr	r1, [pc, #364]	; (800a690 <MX_LWIP_Init+0x23c>)
 800a524:	78c9      	ldrb	r1, [r1, #3]
 800a526:	430b      	orrs	r3, r1
 800a528:	0e1b      	lsrs	r3, r3, #24
 800a52a:	4313      	orrs	r3, r2
 800a52c:	4a5b      	ldr	r2, [pc, #364]	; (800a69c <MX_LWIP_Init+0x248>)
 800a52e:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800a530:	4b58      	ldr	r3, [pc, #352]	; (800a694 <MX_LWIP_Init+0x240>)
 800a532:	781b      	ldrb	r3, [r3, #0]
 800a534:	061a      	lsls	r2, r3, #24
 800a536:	4b57      	ldr	r3, [pc, #348]	; (800a694 <MX_LWIP_Init+0x240>)
 800a538:	785b      	ldrb	r3, [r3, #1]
 800a53a:	041b      	lsls	r3, r3, #16
 800a53c:	431a      	orrs	r2, r3
 800a53e:	4b55      	ldr	r3, [pc, #340]	; (800a694 <MX_LWIP_Init+0x240>)
 800a540:	789b      	ldrb	r3, [r3, #2]
 800a542:	021b      	lsls	r3, r3, #8
 800a544:	4313      	orrs	r3, r2
 800a546:	4a53      	ldr	r2, [pc, #332]	; (800a694 <MX_LWIP_Init+0x240>)
 800a548:	78d2      	ldrb	r2, [r2, #3]
 800a54a:	4313      	orrs	r3, r2
 800a54c:	061a      	lsls	r2, r3, #24
 800a54e:	4b51      	ldr	r3, [pc, #324]	; (800a694 <MX_LWIP_Init+0x240>)
 800a550:	781b      	ldrb	r3, [r3, #0]
 800a552:	0619      	lsls	r1, r3, #24
 800a554:	4b4f      	ldr	r3, [pc, #316]	; (800a694 <MX_LWIP_Init+0x240>)
 800a556:	785b      	ldrb	r3, [r3, #1]
 800a558:	041b      	lsls	r3, r3, #16
 800a55a:	4319      	orrs	r1, r3
 800a55c:	4b4d      	ldr	r3, [pc, #308]	; (800a694 <MX_LWIP_Init+0x240>)
 800a55e:	789b      	ldrb	r3, [r3, #2]
 800a560:	021b      	lsls	r3, r3, #8
 800a562:	430b      	orrs	r3, r1
 800a564:	494b      	ldr	r1, [pc, #300]	; (800a694 <MX_LWIP_Init+0x240>)
 800a566:	78c9      	ldrb	r1, [r1, #3]
 800a568:	430b      	orrs	r3, r1
 800a56a:	021b      	lsls	r3, r3, #8
 800a56c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a570:	431a      	orrs	r2, r3
 800a572:	4b48      	ldr	r3, [pc, #288]	; (800a694 <MX_LWIP_Init+0x240>)
 800a574:	781b      	ldrb	r3, [r3, #0]
 800a576:	0619      	lsls	r1, r3, #24
 800a578:	4b46      	ldr	r3, [pc, #280]	; (800a694 <MX_LWIP_Init+0x240>)
 800a57a:	785b      	ldrb	r3, [r3, #1]
 800a57c:	041b      	lsls	r3, r3, #16
 800a57e:	4319      	orrs	r1, r3
 800a580:	4b44      	ldr	r3, [pc, #272]	; (800a694 <MX_LWIP_Init+0x240>)
 800a582:	789b      	ldrb	r3, [r3, #2]
 800a584:	021b      	lsls	r3, r3, #8
 800a586:	430b      	orrs	r3, r1
 800a588:	4942      	ldr	r1, [pc, #264]	; (800a694 <MX_LWIP_Init+0x240>)
 800a58a:	78c9      	ldrb	r1, [r1, #3]
 800a58c:	430b      	orrs	r3, r1
 800a58e:	0a1b      	lsrs	r3, r3, #8
 800a590:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800a594:	431a      	orrs	r2, r3
 800a596:	4b3f      	ldr	r3, [pc, #252]	; (800a694 <MX_LWIP_Init+0x240>)
 800a598:	781b      	ldrb	r3, [r3, #0]
 800a59a:	0619      	lsls	r1, r3, #24
 800a59c:	4b3d      	ldr	r3, [pc, #244]	; (800a694 <MX_LWIP_Init+0x240>)
 800a59e:	785b      	ldrb	r3, [r3, #1]
 800a5a0:	041b      	lsls	r3, r3, #16
 800a5a2:	4319      	orrs	r1, r3
 800a5a4:	4b3b      	ldr	r3, [pc, #236]	; (800a694 <MX_LWIP_Init+0x240>)
 800a5a6:	789b      	ldrb	r3, [r3, #2]
 800a5a8:	021b      	lsls	r3, r3, #8
 800a5aa:	430b      	orrs	r3, r1
 800a5ac:	4939      	ldr	r1, [pc, #228]	; (800a694 <MX_LWIP_Init+0x240>)
 800a5ae:	78c9      	ldrb	r1, [r1, #3]
 800a5b0:	430b      	orrs	r3, r1
 800a5b2:	0e1b      	lsrs	r3, r3, #24
 800a5b4:	4313      	orrs	r3, r2
 800a5b6:	4a3a      	ldr	r2, [pc, #232]	; (800a6a0 <MX_LWIP_Init+0x24c>)
 800a5b8:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800a5ba:	4b37      	ldr	r3, [pc, #220]	; (800a698 <MX_LWIP_Init+0x244>)
 800a5bc:	781b      	ldrb	r3, [r3, #0]
 800a5be:	061a      	lsls	r2, r3, #24
 800a5c0:	4b35      	ldr	r3, [pc, #212]	; (800a698 <MX_LWIP_Init+0x244>)
 800a5c2:	785b      	ldrb	r3, [r3, #1]
 800a5c4:	041b      	lsls	r3, r3, #16
 800a5c6:	431a      	orrs	r2, r3
 800a5c8:	4b33      	ldr	r3, [pc, #204]	; (800a698 <MX_LWIP_Init+0x244>)
 800a5ca:	789b      	ldrb	r3, [r3, #2]
 800a5cc:	021b      	lsls	r3, r3, #8
 800a5ce:	4313      	orrs	r3, r2
 800a5d0:	4a31      	ldr	r2, [pc, #196]	; (800a698 <MX_LWIP_Init+0x244>)
 800a5d2:	78d2      	ldrb	r2, [r2, #3]
 800a5d4:	4313      	orrs	r3, r2
 800a5d6:	061a      	lsls	r2, r3, #24
 800a5d8:	4b2f      	ldr	r3, [pc, #188]	; (800a698 <MX_LWIP_Init+0x244>)
 800a5da:	781b      	ldrb	r3, [r3, #0]
 800a5dc:	0619      	lsls	r1, r3, #24
 800a5de:	4b2e      	ldr	r3, [pc, #184]	; (800a698 <MX_LWIP_Init+0x244>)
 800a5e0:	785b      	ldrb	r3, [r3, #1]
 800a5e2:	041b      	lsls	r3, r3, #16
 800a5e4:	4319      	orrs	r1, r3
 800a5e6:	4b2c      	ldr	r3, [pc, #176]	; (800a698 <MX_LWIP_Init+0x244>)
 800a5e8:	789b      	ldrb	r3, [r3, #2]
 800a5ea:	021b      	lsls	r3, r3, #8
 800a5ec:	430b      	orrs	r3, r1
 800a5ee:	492a      	ldr	r1, [pc, #168]	; (800a698 <MX_LWIP_Init+0x244>)
 800a5f0:	78c9      	ldrb	r1, [r1, #3]
 800a5f2:	430b      	orrs	r3, r1
 800a5f4:	021b      	lsls	r3, r3, #8
 800a5f6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a5fa:	431a      	orrs	r2, r3
 800a5fc:	4b26      	ldr	r3, [pc, #152]	; (800a698 <MX_LWIP_Init+0x244>)
 800a5fe:	781b      	ldrb	r3, [r3, #0]
 800a600:	0619      	lsls	r1, r3, #24
 800a602:	4b25      	ldr	r3, [pc, #148]	; (800a698 <MX_LWIP_Init+0x244>)
 800a604:	785b      	ldrb	r3, [r3, #1]
 800a606:	041b      	lsls	r3, r3, #16
 800a608:	4319      	orrs	r1, r3
 800a60a:	4b23      	ldr	r3, [pc, #140]	; (800a698 <MX_LWIP_Init+0x244>)
 800a60c:	789b      	ldrb	r3, [r3, #2]
 800a60e:	021b      	lsls	r3, r3, #8
 800a610:	430b      	orrs	r3, r1
 800a612:	4921      	ldr	r1, [pc, #132]	; (800a698 <MX_LWIP_Init+0x244>)
 800a614:	78c9      	ldrb	r1, [r1, #3]
 800a616:	430b      	orrs	r3, r1
 800a618:	0a1b      	lsrs	r3, r3, #8
 800a61a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800a61e:	431a      	orrs	r2, r3
 800a620:	4b1d      	ldr	r3, [pc, #116]	; (800a698 <MX_LWIP_Init+0x244>)
 800a622:	781b      	ldrb	r3, [r3, #0]
 800a624:	0619      	lsls	r1, r3, #24
 800a626:	4b1c      	ldr	r3, [pc, #112]	; (800a698 <MX_LWIP_Init+0x244>)
 800a628:	785b      	ldrb	r3, [r3, #1]
 800a62a:	041b      	lsls	r3, r3, #16
 800a62c:	4319      	orrs	r1, r3
 800a62e:	4b1a      	ldr	r3, [pc, #104]	; (800a698 <MX_LWIP_Init+0x244>)
 800a630:	789b      	ldrb	r3, [r3, #2]
 800a632:	021b      	lsls	r3, r3, #8
 800a634:	430b      	orrs	r3, r1
 800a636:	4918      	ldr	r1, [pc, #96]	; (800a698 <MX_LWIP_Init+0x244>)
 800a638:	78c9      	ldrb	r1, [r1, #3]
 800a63a:	430b      	orrs	r3, r1
 800a63c:	0e1b      	lsrs	r3, r3, #24
 800a63e:	4313      	orrs	r3, r2
 800a640:	4a18      	ldr	r2, [pc, #96]	; (800a6a4 <MX_LWIP_Init+0x250>)
 800a642:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 800a644:	4b18      	ldr	r3, [pc, #96]	; (800a6a8 <MX_LWIP_Init+0x254>)
 800a646:	9302      	str	r3, [sp, #8]
 800a648:	4b18      	ldr	r3, [pc, #96]	; (800a6ac <MX_LWIP_Init+0x258>)
 800a64a:	9301      	str	r3, [sp, #4]
 800a64c:	2300      	movs	r3, #0
 800a64e:	9300      	str	r3, [sp, #0]
 800a650:	4b14      	ldr	r3, [pc, #80]	; (800a6a4 <MX_LWIP_Init+0x250>)
 800a652:	4a13      	ldr	r2, [pc, #76]	; (800a6a0 <MX_LWIP_Init+0x24c>)
 800a654:	4911      	ldr	r1, [pc, #68]	; (800a69c <MX_LWIP_Init+0x248>)
 800a656:	4816      	ldr	r0, [pc, #88]	; (800a6b0 <MX_LWIP_Init+0x25c>)
 800a658:	f001 f80a 	bl	800b670 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800a65c:	4814      	ldr	r0, [pc, #80]	; (800a6b0 <MX_LWIP_Init+0x25c>)
 800a65e:	f001 f9b9 	bl	800b9d4 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800a662:	4b13      	ldr	r3, [pc, #76]	; (800a6b0 <MX_LWIP_Init+0x25c>)
 800a664:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a668:	089b      	lsrs	r3, r3, #2
 800a66a:	f003 0301 	and.w	r3, r3, #1
 800a66e:	b2db      	uxtb	r3, r3
 800a670:	2b00      	cmp	r3, #0
 800a672:	d003      	beq.n	800a67c <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800a674:	480e      	ldr	r0, [pc, #56]	; (800a6b0 <MX_LWIP_Init+0x25c>)
 800a676:	f001 f9bd 	bl	800b9f4 <netif_set_up>
 800a67a:	e002      	b.n	800a682 <MX_LWIP_Init+0x22e>
=======
 800a472:	f000 fc40 	bl	800acf6 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800a476:	4b7a      	ldr	r3, [pc, #488]	; (800a660 <MX_LWIP_Init+0x23c>)
 800a478:	781b      	ldrb	r3, [r3, #0]
 800a47a:	061a      	lsls	r2, r3, #24
 800a47c:	4b78      	ldr	r3, [pc, #480]	; (800a660 <MX_LWIP_Init+0x23c>)
 800a47e:	785b      	ldrb	r3, [r3, #1]
 800a480:	041b      	lsls	r3, r3, #16
 800a482:	431a      	orrs	r2, r3
 800a484:	4b76      	ldr	r3, [pc, #472]	; (800a660 <MX_LWIP_Init+0x23c>)
 800a486:	789b      	ldrb	r3, [r3, #2]
 800a488:	021b      	lsls	r3, r3, #8
 800a48a:	4313      	orrs	r3, r2
 800a48c:	4a74      	ldr	r2, [pc, #464]	; (800a660 <MX_LWIP_Init+0x23c>)
 800a48e:	78d2      	ldrb	r2, [r2, #3]
 800a490:	4313      	orrs	r3, r2
 800a492:	061a      	lsls	r2, r3, #24
 800a494:	4b72      	ldr	r3, [pc, #456]	; (800a660 <MX_LWIP_Init+0x23c>)
 800a496:	781b      	ldrb	r3, [r3, #0]
 800a498:	0619      	lsls	r1, r3, #24
 800a49a:	4b71      	ldr	r3, [pc, #452]	; (800a660 <MX_LWIP_Init+0x23c>)
 800a49c:	785b      	ldrb	r3, [r3, #1]
 800a49e:	041b      	lsls	r3, r3, #16
 800a4a0:	4319      	orrs	r1, r3
 800a4a2:	4b6f      	ldr	r3, [pc, #444]	; (800a660 <MX_LWIP_Init+0x23c>)
 800a4a4:	789b      	ldrb	r3, [r3, #2]
 800a4a6:	021b      	lsls	r3, r3, #8
 800a4a8:	430b      	orrs	r3, r1
 800a4aa:	496d      	ldr	r1, [pc, #436]	; (800a660 <MX_LWIP_Init+0x23c>)
 800a4ac:	78c9      	ldrb	r1, [r1, #3]
 800a4ae:	430b      	orrs	r3, r1
 800a4b0:	021b      	lsls	r3, r3, #8
 800a4b2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a4b6:	431a      	orrs	r2, r3
 800a4b8:	4b69      	ldr	r3, [pc, #420]	; (800a660 <MX_LWIP_Init+0x23c>)
 800a4ba:	781b      	ldrb	r3, [r3, #0]
 800a4bc:	0619      	lsls	r1, r3, #24
 800a4be:	4b68      	ldr	r3, [pc, #416]	; (800a660 <MX_LWIP_Init+0x23c>)
 800a4c0:	785b      	ldrb	r3, [r3, #1]
 800a4c2:	041b      	lsls	r3, r3, #16
 800a4c4:	4319      	orrs	r1, r3
 800a4c6:	4b66      	ldr	r3, [pc, #408]	; (800a660 <MX_LWIP_Init+0x23c>)
 800a4c8:	789b      	ldrb	r3, [r3, #2]
 800a4ca:	021b      	lsls	r3, r3, #8
 800a4cc:	430b      	orrs	r3, r1
 800a4ce:	4964      	ldr	r1, [pc, #400]	; (800a660 <MX_LWIP_Init+0x23c>)
 800a4d0:	78c9      	ldrb	r1, [r1, #3]
 800a4d2:	430b      	orrs	r3, r1
 800a4d4:	0a1b      	lsrs	r3, r3, #8
 800a4d6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800a4da:	431a      	orrs	r2, r3
 800a4dc:	4b60      	ldr	r3, [pc, #384]	; (800a660 <MX_LWIP_Init+0x23c>)
 800a4de:	781b      	ldrb	r3, [r3, #0]
 800a4e0:	0619      	lsls	r1, r3, #24
 800a4e2:	4b5f      	ldr	r3, [pc, #380]	; (800a660 <MX_LWIP_Init+0x23c>)
 800a4e4:	785b      	ldrb	r3, [r3, #1]
 800a4e6:	041b      	lsls	r3, r3, #16
 800a4e8:	4319      	orrs	r1, r3
 800a4ea:	4b5d      	ldr	r3, [pc, #372]	; (800a660 <MX_LWIP_Init+0x23c>)
 800a4ec:	789b      	ldrb	r3, [r3, #2]
 800a4ee:	021b      	lsls	r3, r3, #8
 800a4f0:	430b      	orrs	r3, r1
 800a4f2:	495b      	ldr	r1, [pc, #364]	; (800a660 <MX_LWIP_Init+0x23c>)
 800a4f4:	78c9      	ldrb	r1, [r1, #3]
 800a4f6:	430b      	orrs	r3, r1
 800a4f8:	0e1b      	lsrs	r3, r3, #24
 800a4fa:	4313      	orrs	r3, r2
 800a4fc:	4a5b      	ldr	r2, [pc, #364]	; (800a66c <MX_LWIP_Init+0x248>)
 800a4fe:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800a500:	4b58      	ldr	r3, [pc, #352]	; (800a664 <MX_LWIP_Init+0x240>)
 800a502:	781b      	ldrb	r3, [r3, #0]
 800a504:	061a      	lsls	r2, r3, #24
 800a506:	4b57      	ldr	r3, [pc, #348]	; (800a664 <MX_LWIP_Init+0x240>)
 800a508:	785b      	ldrb	r3, [r3, #1]
 800a50a:	041b      	lsls	r3, r3, #16
 800a50c:	431a      	orrs	r2, r3
 800a50e:	4b55      	ldr	r3, [pc, #340]	; (800a664 <MX_LWIP_Init+0x240>)
 800a510:	789b      	ldrb	r3, [r3, #2]
 800a512:	021b      	lsls	r3, r3, #8
 800a514:	4313      	orrs	r3, r2
 800a516:	4a53      	ldr	r2, [pc, #332]	; (800a664 <MX_LWIP_Init+0x240>)
 800a518:	78d2      	ldrb	r2, [r2, #3]
 800a51a:	4313      	orrs	r3, r2
 800a51c:	061a      	lsls	r2, r3, #24
 800a51e:	4b51      	ldr	r3, [pc, #324]	; (800a664 <MX_LWIP_Init+0x240>)
 800a520:	781b      	ldrb	r3, [r3, #0]
 800a522:	0619      	lsls	r1, r3, #24
 800a524:	4b4f      	ldr	r3, [pc, #316]	; (800a664 <MX_LWIP_Init+0x240>)
 800a526:	785b      	ldrb	r3, [r3, #1]
 800a528:	041b      	lsls	r3, r3, #16
 800a52a:	4319      	orrs	r1, r3
 800a52c:	4b4d      	ldr	r3, [pc, #308]	; (800a664 <MX_LWIP_Init+0x240>)
 800a52e:	789b      	ldrb	r3, [r3, #2]
 800a530:	021b      	lsls	r3, r3, #8
 800a532:	430b      	orrs	r3, r1
 800a534:	494b      	ldr	r1, [pc, #300]	; (800a664 <MX_LWIP_Init+0x240>)
 800a536:	78c9      	ldrb	r1, [r1, #3]
 800a538:	430b      	orrs	r3, r1
 800a53a:	021b      	lsls	r3, r3, #8
 800a53c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a540:	431a      	orrs	r2, r3
 800a542:	4b48      	ldr	r3, [pc, #288]	; (800a664 <MX_LWIP_Init+0x240>)
 800a544:	781b      	ldrb	r3, [r3, #0]
 800a546:	0619      	lsls	r1, r3, #24
 800a548:	4b46      	ldr	r3, [pc, #280]	; (800a664 <MX_LWIP_Init+0x240>)
 800a54a:	785b      	ldrb	r3, [r3, #1]
 800a54c:	041b      	lsls	r3, r3, #16
 800a54e:	4319      	orrs	r1, r3
 800a550:	4b44      	ldr	r3, [pc, #272]	; (800a664 <MX_LWIP_Init+0x240>)
 800a552:	789b      	ldrb	r3, [r3, #2]
 800a554:	021b      	lsls	r3, r3, #8
 800a556:	430b      	orrs	r3, r1
 800a558:	4942      	ldr	r1, [pc, #264]	; (800a664 <MX_LWIP_Init+0x240>)
 800a55a:	78c9      	ldrb	r1, [r1, #3]
 800a55c:	430b      	orrs	r3, r1
 800a55e:	0a1b      	lsrs	r3, r3, #8
 800a560:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800a564:	431a      	orrs	r2, r3
 800a566:	4b3f      	ldr	r3, [pc, #252]	; (800a664 <MX_LWIP_Init+0x240>)
 800a568:	781b      	ldrb	r3, [r3, #0]
 800a56a:	0619      	lsls	r1, r3, #24
 800a56c:	4b3d      	ldr	r3, [pc, #244]	; (800a664 <MX_LWIP_Init+0x240>)
 800a56e:	785b      	ldrb	r3, [r3, #1]
 800a570:	041b      	lsls	r3, r3, #16
 800a572:	4319      	orrs	r1, r3
 800a574:	4b3b      	ldr	r3, [pc, #236]	; (800a664 <MX_LWIP_Init+0x240>)
 800a576:	789b      	ldrb	r3, [r3, #2]
 800a578:	021b      	lsls	r3, r3, #8
 800a57a:	430b      	orrs	r3, r1
 800a57c:	4939      	ldr	r1, [pc, #228]	; (800a664 <MX_LWIP_Init+0x240>)
 800a57e:	78c9      	ldrb	r1, [r1, #3]
 800a580:	430b      	orrs	r3, r1
 800a582:	0e1b      	lsrs	r3, r3, #24
 800a584:	4313      	orrs	r3, r2
 800a586:	4a3a      	ldr	r2, [pc, #232]	; (800a670 <MX_LWIP_Init+0x24c>)
 800a588:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800a58a:	4b37      	ldr	r3, [pc, #220]	; (800a668 <MX_LWIP_Init+0x244>)
 800a58c:	781b      	ldrb	r3, [r3, #0]
 800a58e:	061a      	lsls	r2, r3, #24
 800a590:	4b35      	ldr	r3, [pc, #212]	; (800a668 <MX_LWIP_Init+0x244>)
 800a592:	785b      	ldrb	r3, [r3, #1]
 800a594:	041b      	lsls	r3, r3, #16
 800a596:	431a      	orrs	r2, r3
 800a598:	4b33      	ldr	r3, [pc, #204]	; (800a668 <MX_LWIP_Init+0x244>)
 800a59a:	789b      	ldrb	r3, [r3, #2]
 800a59c:	021b      	lsls	r3, r3, #8
 800a59e:	4313      	orrs	r3, r2
 800a5a0:	4a31      	ldr	r2, [pc, #196]	; (800a668 <MX_LWIP_Init+0x244>)
 800a5a2:	78d2      	ldrb	r2, [r2, #3]
 800a5a4:	4313      	orrs	r3, r2
 800a5a6:	061a      	lsls	r2, r3, #24
 800a5a8:	4b2f      	ldr	r3, [pc, #188]	; (800a668 <MX_LWIP_Init+0x244>)
 800a5aa:	781b      	ldrb	r3, [r3, #0]
 800a5ac:	0619      	lsls	r1, r3, #24
 800a5ae:	4b2e      	ldr	r3, [pc, #184]	; (800a668 <MX_LWIP_Init+0x244>)
 800a5b0:	785b      	ldrb	r3, [r3, #1]
 800a5b2:	041b      	lsls	r3, r3, #16
 800a5b4:	4319      	orrs	r1, r3
 800a5b6:	4b2c      	ldr	r3, [pc, #176]	; (800a668 <MX_LWIP_Init+0x244>)
 800a5b8:	789b      	ldrb	r3, [r3, #2]
 800a5ba:	021b      	lsls	r3, r3, #8
 800a5bc:	430b      	orrs	r3, r1
 800a5be:	492a      	ldr	r1, [pc, #168]	; (800a668 <MX_LWIP_Init+0x244>)
 800a5c0:	78c9      	ldrb	r1, [r1, #3]
 800a5c2:	430b      	orrs	r3, r1
 800a5c4:	021b      	lsls	r3, r3, #8
 800a5c6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a5ca:	431a      	orrs	r2, r3
 800a5cc:	4b26      	ldr	r3, [pc, #152]	; (800a668 <MX_LWIP_Init+0x244>)
 800a5ce:	781b      	ldrb	r3, [r3, #0]
 800a5d0:	0619      	lsls	r1, r3, #24
 800a5d2:	4b25      	ldr	r3, [pc, #148]	; (800a668 <MX_LWIP_Init+0x244>)
 800a5d4:	785b      	ldrb	r3, [r3, #1]
 800a5d6:	041b      	lsls	r3, r3, #16
 800a5d8:	4319      	orrs	r1, r3
 800a5da:	4b23      	ldr	r3, [pc, #140]	; (800a668 <MX_LWIP_Init+0x244>)
 800a5dc:	789b      	ldrb	r3, [r3, #2]
 800a5de:	021b      	lsls	r3, r3, #8
 800a5e0:	430b      	orrs	r3, r1
 800a5e2:	4921      	ldr	r1, [pc, #132]	; (800a668 <MX_LWIP_Init+0x244>)
 800a5e4:	78c9      	ldrb	r1, [r1, #3]
 800a5e6:	430b      	orrs	r3, r1
 800a5e8:	0a1b      	lsrs	r3, r3, #8
 800a5ea:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800a5ee:	431a      	orrs	r2, r3
 800a5f0:	4b1d      	ldr	r3, [pc, #116]	; (800a668 <MX_LWIP_Init+0x244>)
 800a5f2:	781b      	ldrb	r3, [r3, #0]
 800a5f4:	0619      	lsls	r1, r3, #24
 800a5f6:	4b1c      	ldr	r3, [pc, #112]	; (800a668 <MX_LWIP_Init+0x244>)
 800a5f8:	785b      	ldrb	r3, [r3, #1]
 800a5fa:	041b      	lsls	r3, r3, #16
 800a5fc:	4319      	orrs	r1, r3
 800a5fe:	4b1a      	ldr	r3, [pc, #104]	; (800a668 <MX_LWIP_Init+0x244>)
 800a600:	789b      	ldrb	r3, [r3, #2]
 800a602:	021b      	lsls	r3, r3, #8
 800a604:	430b      	orrs	r3, r1
 800a606:	4918      	ldr	r1, [pc, #96]	; (800a668 <MX_LWIP_Init+0x244>)
 800a608:	78c9      	ldrb	r1, [r1, #3]
 800a60a:	430b      	orrs	r3, r1
 800a60c:	0e1b      	lsrs	r3, r3, #24
 800a60e:	4313      	orrs	r3, r2
 800a610:	4a18      	ldr	r2, [pc, #96]	; (800a674 <MX_LWIP_Init+0x250>)
 800a612:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 800a614:	4b18      	ldr	r3, [pc, #96]	; (800a678 <MX_LWIP_Init+0x254>)
 800a616:	9302      	str	r3, [sp, #8]
 800a618:	4b18      	ldr	r3, [pc, #96]	; (800a67c <MX_LWIP_Init+0x258>)
 800a61a:	9301      	str	r3, [sp, #4]
 800a61c:	2300      	movs	r3, #0
 800a61e:	9300      	str	r3, [sp, #0]
 800a620:	4b14      	ldr	r3, [pc, #80]	; (800a674 <MX_LWIP_Init+0x250>)
 800a622:	4a13      	ldr	r2, [pc, #76]	; (800a670 <MX_LWIP_Init+0x24c>)
 800a624:	4911      	ldr	r1, [pc, #68]	; (800a66c <MX_LWIP_Init+0x248>)
 800a626:	4816      	ldr	r0, [pc, #88]	; (800a680 <MX_LWIP_Init+0x25c>)
 800a628:	f001 f80a 	bl	800b640 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800a62c:	4814      	ldr	r0, [pc, #80]	; (800a680 <MX_LWIP_Init+0x25c>)
 800a62e:	f001 f9b9 	bl	800b9a4 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800a632:	4b13      	ldr	r3, [pc, #76]	; (800a680 <MX_LWIP_Init+0x25c>)
 800a634:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a638:	089b      	lsrs	r3, r3, #2
 800a63a:	f003 0301 	and.w	r3, r3, #1
 800a63e:	b2db      	uxtb	r3, r3
 800a640:	2b00      	cmp	r3, #0
 800a642:	d003      	beq.n	800a64c <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800a644:	480e      	ldr	r0, [pc, #56]	; (800a680 <MX_LWIP_Init+0x25c>)
 800a646:	f001 f9bd 	bl	800b9c4 <netif_set_up>
 800a64a:	e002      	b.n	800a652 <MX_LWIP_Init+0x22e>
>>>>>>> Stashed changes
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
<<<<<<< Updated upstream
 800a67c:	480c      	ldr	r0, [pc, #48]	; (800a6b0 <MX_LWIP_Init+0x25c>)
 800a67e:	f001 fa25 	bl	800bacc <netif_set_down>
=======
 800a64c:	480c      	ldr	r0, [pc, #48]	; (800a680 <MX_LWIP_Init+0x25c>)
 800a64e:	f001 fa25 	bl	800ba9c <netif_set_down>
>>>>>>> Stashed changes
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
<<<<<<< Updated upstream
 800a682:	490c      	ldr	r1, [pc, #48]	; (800a6b4 <MX_LWIP_Init+0x260>)
 800a684:	480a      	ldr	r0, [pc, #40]	; (800a6b0 <MX_LWIP_Init+0x25c>)
 800a686:	f001 fa53 	bl	800bb30 <netif_set_link_callback>
=======
 800a652:	490c      	ldr	r1, [pc, #48]	; (800a684 <MX_LWIP_Init+0x260>)
 800a654:	480a      	ldr	r0, [pc, #40]	; (800a680 <MX_LWIP_Init+0x25c>)
 800a656:	f001 fa53 	bl	800bb00 <netif_set_link_callback>
>>>>>>> Stashed changes
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
<<<<<<< Updated upstream
 800a68a:	bf00      	nop
 800a68c:	46bd      	mov	sp, r7
 800a68e:	bd80      	pop	{r7, pc}
 800a690:	20000c68 	.word	0x20000c68
 800a694:	20000c64 	.word	0x20000c64
 800a698:	20000c28 	.word	0x20000c28
 800a69c:	20000c60 	.word	0x20000c60
 800a6a0:	20000c6c 	.word	0x20000c6c
 800a6a4:	20000c70 	.word	0x20000c70
 800a6a8:	08014315 	.word	0x08014315
 800a6ac:	0800aa9d 	.word	0x0800aa9d
 800a6b0:	20000c2c 	.word	0x20000c2c
 800a6b4:	0800ab09 	.word	0x0800ab09

0800a6b8 <HAL_ETH_MspInit>:
=======
 800a65a:	bf00      	nop
 800a65c:	46bd      	mov	sp, r7
 800a65e:	bd80      	pop	{r7, pc}
 800a660:	20000c68 	.word	0x20000c68
 800a664:	20000c64 	.word	0x20000c64
 800a668:	20000c28 	.word	0x20000c28
 800a66c:	20000c60 	.word	0x20000c60
 800a670:	20000c6c 	.word	0x20000c6c
 800a674:	20000c70 	.word	0x20000c70
 800a678:	080142e5 	.word	0x080142e5
 800a67c:	0800aa6d 	.word	0x0800aa6d
 800a680:	20000c2c 	.word	0x20000c2c
 800a684:	0800aad9 	.word	0x0800aad9

0800a688 <HAL_ETH_MspInit>:
>>>>>>> Stashed changes
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
<<<<<<< Updated upstream
 800a6b8:	b580      	push	{r7, lr}
 800a6ba:	b08e      	sub	sp, #56	; 0x38
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a6c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a6c4:	2200      	movs	r2, #0
 800a6c6:	601a      	str	r2, [r3, #0]
 800a6c8:	605a      	str	r2, [r3, #4]
 800a6ca:	609a      	str	r2, [r3, #8]
 800a6cc:	60da      	str	r2, [r3, #12]
 800a6ce:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	4a46      	ldr	r2, [pc, #280]	; (800a7f0 <HAL_ETH_MspInit+0x138>)
 800a6d6:	4293      	cmp	r3, r2
 800a6d8:	f040 8085 	bne.w	800a7e6 <HAL_ETH_MspInit+0x12e>
=======
 800a688:	b580      	push	{r7, lr}
 800a68a:	b08e      	sub	sp, #56	; 0x38
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a690:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a694:	2200      	movs	r2, #0
 800a696:	601a      	str	r2, [r3, #0]
 800a698:	605a      	str	r2, [r3, #4]
 800a69a:	609a      	str	r2, [r3, #8]
 800a69c:	60da      	str	r2, [r3, #12]
 800a69e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	4a46      	ldr	r2, [pc, #280]	; (800a7c0 <HAL_ETH_MspInit+0x138>)
 800a6a6:	4293      	cmp	r3, r2
 800a6a8:	f040 8085 	bne.w	800a7b6 <HAL_ETH_MspInit+0x12e>
>>>>>>> Stashed changes
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
<<<<<<< Updated upstream
 800a6dc:	2300      	movs	r3, #0
 800a6de:	623b      	str	r3, [r7, #32]
 800a6e0:	4b44      	ldr	r3, [pc, #272]	; (800a7f4 <HAL_ETH_MspInit+0x13c>)
 800a6e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6e4:	4a43      	ldr	r2, [pc, #268]	; (800a7f4 <HAL_ETH_MspInit+0x13c>)
 800a6e6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800a6ea:	6313      	str	r3, [r2, #48]	; 0x30
 800a6ec:	4b41      	ldr	r3, [pc, #260]	; (800a7f4 <HAL_ETH_MspInit+0x13c>)
 800a6ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a6f4:	623b      	str	r3, [r7, #32]
 800a6f6:	6a3b      	ldr	r3, [r7, #32]
 800a6f8:	2300      	movs	r3, #0
 800a6fa:	61fb      	str	r3, [r7, #28]
 800a6fc:	4b3d      	ldr	r3, [pc, #244]	; (800a7f4 <HAL_ETH_MspInit+0x13c>)
 800a6fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a700:	4a3c      	ldr	r2, [pc, #240]	; (800a7f4 <HAL_ETH_MspInit+0x13c>)
 800a702:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a706:	6313      	str	r3, [r2, #48]	; 0x30
 800a708:	4b3a      	ldr	r3, [pc, #232]	; (800a7f4 <HAL_ETH_MspInit+0x13c>)
 800a70a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a70c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a710:	61fb      	str	r3, [r7, #28]
 800a712:	69fb      	ldr	r3, [r7, #28]
 800a714:	2300      	movs	r3, #0
 800a716:	61bb      	str	r3, [r7, #24]
 800a718:	4b36      	ldr	r3, [pc, #216]	; (800a7f4 <HAL_ETH_MspInit+0x13c>)
 800a71a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a71c:	4a35      	ldr	r2, [pc, #212]	; (800a7f4 <HAL_ETH_MspInit+0x13c>)
 800a71e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a722:	6313      	str	r3, [r2, #48]	; 0x30
 800a724:	4b33      	ldr	r3, [pc, #204]	; (800a7f4 <HAL_ETH_MspInit+0x13c>)
 800a726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a728:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a72c:	61bb      	str	r3, [r7, #24]
 800a72e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a730:	2300      	movs	r3, #0
 800a732:	617b      	str	r3, [r7, #20]
 800a734:	4b2f      	ldr	r3, [pc, #188]	; (800a7f4 <HAL_ETH_MspInit+0x13c>)
 800a736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a738:	4a2e      	ldr	r2, [pc, #184]	; (800a7f4 <HAL_ETH_MspInit+0x13c>)
 800a73a:	f043 0304 	orr.w	r3, r3, #4
 800a73e:	6313      	str	r3, [r2, #48]	; 0x30
 800a740:	4b2c      	ldr	r3, [pc, #176]	; (800a7f4 <HAL_ETH_MspInit+0x13c>)
 800a742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a744:	f003 0304 	and.w	r3, r3, #4
 800a748:	617b      	str	r3, [r7, #20]
 800a74a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a74c:	2300      	movs	r3, #0
 800a74e:	613b      	str	r3, [r7, #16]
 800a750:	4b28      	ldr	r3, [pc, #160]	; (800a7f4 <HAL_ETH_MspInit+0x13c>)
 800a752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a754:	4a27      	ldr	r2, [pc, #156]	; (800a7f4 <HAL_ETH_MspInit+0x13c>)
 800a756:	f043 0301 	orr.w	r3, r3, #1
 800a75a:	6313      	str	r3, [r2, #48]	; 0x30
 800a75c:	4b25      	ldr	r3, [pc, #148]	; (800a7f4 <HAL_ETH_MspInit+0x13c>)
 800a75e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a760:	f003 0301 	and.w	r3, r3, #1
 800a764:	613b      	str	r3, [r7, #16]
 800a766:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a768:	2300      	movs	r3, #0
 800a76a:	60fb      	str	r3, [r7, #12]
 800a76c:	4b21      	ldr	r3, [pc, #132]	; (800a7f4 <HAL_ETH_MspInit+0x13c>)
 800a76e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a770:	4a20      	ldr	r2, [pc, #128]	; (800a7f4 <HAL_ETH_MspInit+0x13c>)
 800a772:	f043 0302 	orr.w	r3, r3, #2
 800a776:	6313      	str	r3, [r2, #48]	; 0x30
 800a778:	4b1e      	ldr	r3, [pc, #120]	; (800a7f4 <HAL_ETH_MspInit+0x13c>)
 800a77a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a77c:	f003 0302 	and.w	r3, r3, #2
 800a780:	60fb      	str	r3, [r7, #12]
 800a782:	68fb      	ldr	r3, [r7, #12]
=======
 800a6ac:	2300      	movs	r3, #0
 800a6ae:	623b      	str	r3, [r7, #32]
 800a6b0:	4b44      	ldr	r3, [pc, #272]	; (800a7c4 <HAL_ETH_MspInit+0x13c>)
 800a6b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6b4:	4a43      	ldr	r2, [pc, #268]	; (800a7c4 <HAL_ETH_MspInit+0x13c>)
 800a6b6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800a6ba:	6313      	str	r3, [r2, #48]	; 0x30
 800a6bc:	4b41      	ldr	r3, [pc, #260]	; (800a7c4 <HAL_ETH_MspInit+0x13c>)
 800a6be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a6c4:	623b      	str	r3, [r7, #32]
 800a6c6:	6a3b      	ldr	r3, [r7, #32]
 800a6c8:	2300      	movs	r3, #0
 800a6ca:	61fb      	str	r3, [r7, #28]
 800a6cc:	4b3d      	ldr	r3, [pc, #244]	; (800a7c4 <HAL_ETH_MspInit+0x13c>)
 800a6ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6d0:	4a3c      	ldr	r2, [pc, #240]	; (800a7c4 <HAL_ETH_MspInit+0x13c>)
 800a6d2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a6d6:	6313      	str	r3, [r2, #48]	; 0x30
 800a6d8:	4b3a      	ldr	r3, [pc, #232]	; (800a7c4 <HAL_ETH_MspInit+0x13c>)
 800a6da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6dc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a6e0:	61fb      	str	r3, [r7, #28]
 800a6e2:	69fb      	ldr	r3, [r7, #28]
 800a6e4:	2300      	movs	r3, #0
 800a6e6:	61bb      	str	r3, [r7, #24]
 800a6e8:	4b36      	ldr	r3, [pc, #216]	; (800a7c4 <HAL_ETH_MspInit+0x13c>)
 800a6ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6ec:	4a35      	ldr	r2, [pc, #212]	; (800a7c4 <HAL_ETH_MspInit+0x13c>)
 800a6ee:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a6f2:	6313      	str	r3, [r2, #48]	; 0x30
 800a6f4:	4b33      	ldr	r3, [pc, #204]	; (800a7c4 <HAL_ETH_MspInit+0x13c>)
 800a6f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a6fc:	61bb      	str	r3, [r7, #24]
 800a6fe:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a700:	2300      	movs	r3, #0
 800a702:	617b      	str	r3, [r7, #20]
 800a704:	4b2f      	ldr	r3, [pc, #188]	; (800a7c4 <HAL_ETH_MspInit+0x13c>)
 800a706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a708:	4a2e      	ldr	r2, [pc, #184]	; (800a7c4 <HAL_ETH_MspInit+0x13c>)
 800a70a:	f043 0304 	orr.w	r3, r3, #4
 800a70e:	6313      	str	r3, [r2, #48]	; 0x30
 800a710:	4b2c      	ldr	r3, [pc, #176]	; (800a7c4 <HAL_ETH_MspInit+0x13c>)
 800a712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a714:	f003 0304 	and.w	r3, r3, #4
 800a718:	617b      	str	r3, [r7, #20]
 800a71a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a71c:	2300      	movs	r3, #0
 800a71e:	613b      	str	r3, [r7, #16]
 800a720:	4b28      	ldr	r3, [pc, #160]	; (800a7c4 <HAL_ETH_MspInit+0x13c>)
 800a722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a724:	4a27      	ldr	r2, [pc, #156]	; (800a7c4 <HAL_ETH_MspInit+0x13c>)
 800a726:	f043 0301 	orr.w	r3, r3, #1
 800a72a:	6313      	str	r3, [r2, #48]	; 0x30
 800a72c:	4b25      	ldr	r3, [pc, #148]	; (800a7c4 <HAL_ETH_MspInit+0x13c>)
 800a72e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a730:	f003 0301 	and.w	r3, r3, #1
 800a734:	613b      	str	r3, [r7, #16]
 800a736:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a738:	2300      	movs	r3, #0
 800a73a:	60fb      	str	r3, [r7, #12]
 800a73c:	4b21      	ldr	r3, [pc, #132]	; (800a7c4 <HAL_ETH_MspInit+0x13c>)
 800a73e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a740:	4a20      	ldr	r2, [pc, #128]	; (800a7c4 <HAL_ETH_MspInit+0x13c>)
 800a742:	f043 0302 	orr.w	r3, r3, #2
 800a746:	6313      	str	r3, [r2, #48]	; 0x30
 800a748:	4b1e      	ldr	r3, [pc, #120]	; (800a7c4 <HAL_ETH_MspInit+0x13c>)
 800a74a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a74c:	f003 0302 	and.w	r3, r3, #2
 800a750:	60fb      	str	r3, [r7, #12]
 800a752:	68fb      	ldr	r3, [r7, #12]
>>>>>>> Stashed changes
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
<<<<<<< Updated upstream
 800a784:	2332      	movs	r3, #50	; 0x32
 800a786:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a788:	2302      	movs	r3, #2
 800a78a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a78c:	2300      	movs	r3, #0
 800a78e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a790:	2303      	movs	r3, #3
 800a792:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a794:	230b      	movs	r3, #11
 800a796:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a798:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a79c:	4619      	mov	r1, r3
 800a79e:	4816      	ldr	r0, [pc, #88]	; (800a7f8 <HAL_ETH_MspInit+0x140>)
 800a7a0:	f7fa fbf0 	bl	8004f84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800a7a4:	2386      	movs	r3, #134	; 0x86
 800a7a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a7a8:	2302      	movs	r3, #2
 800a7aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a7ac:	2300      	movs	r3, #0
 800a7ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a7b0:	2303      	movs	r3, #3
 800a7b2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a7b4:	230b      	movs	r3, #11
 800a7b6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a7b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a7bc:	4619      	mov	r1, r3
 800a7be:	480f      	ldr	r0, [pc, #60]	; (800a7fc <HAL_ETH_MspInit+0x144>)
 800a7c0:	f7fa fbe0 	bl	8004f84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 800a7c4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800a7c8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a7ca:	2302      	movs	r3, #2
 800a7cc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a7ce:	2300      	movs	r3, #0
 800a7d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a7d2:	2303      	movs	r3, #3
 800a7d4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a7d6:	230b      	movs	r3, #11
 800a7d8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a7da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a7de:	4619      	mov	r1, r3
 800a7e0:	4807      	ldr	r0, [pc, #28]	; (800a800 <HAL_ETH_MspInit+0x148>)
 800a7e2:	f7fa fbcf 	bl	8004f84 <HAL_GPIO_Init>
=======
 800a754:	2332      	movs	r3, #50	; 0x32
 800a756:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a758:	2302      	movs	r3, #2
 800a75a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a75c:	2300      	movs	r3, #0
 800a75e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a760:	2303      	movs	r3, #3
 800a762:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a764:	230b      	movs	r3, #11
 800a766:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a768:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a76c:	4619      	mov	r1, r3
 800a76e:	4816      	ldr	r0, [pc, #88]	; (800a7c8 <HAL_ETH_MspInit+0x140>)
 800a770:	f7fa fc0a 	bl	8004f88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800a774:	2386      	movs	r3, #134	; 0x86
 800a776:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a778:	2302      	movs	r3, #2
 800a77a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a77c:	2300      	movs	r3, #0
 800a77e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a780:	2303      	movs	r3, #3
 800a782:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a784:	230b      	movs	r3, #11
 800a786:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a788:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a78c:	4619      	mov	r1, r3
 800a78e:	480f      	ldr	r0, [pc, #60]	; (800a7cc <HAL_ETH_MspInit+0x144>)
 800a790:	f7fa fbfa 	bl	8004f88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 800a794:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800a798:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a79a:	2302      	movs	r3, #2
 800a79c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a79e:	2300      	movs	r3, #0
 800a7a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a7a2:	2303      	movs	r3, #3
 800a7a4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a7a6:	230b      	movs	r3, #11
 800a7a8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a7aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a7ae:	4619      	mov	r1, r3
 800a7b0:	4807      	ldr	r0, [pc, #28]	; (800a7d0 <HAL_ETH_MspInit+0x148>)
 800a7b2:	f7fa fbe9 	bl	8004f88 <HAL_GPIO_Init>
>>>>>>> Stashed changes

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
<<<<<<< Updated upstream
 800a7e6:	bf00      	nop
 800a7e8:	3738      	adds	r7, #56	; 0x38
 800a7ea:	46bd      	mov	sp, r7
 800a7ec:	bd80      	pop	{r7, pc}
 800a7ee:	bf00      	nop
 800a7f0:	40028000 	.word	0x40028000
 800a7f4:	40023800 	.word	0x40023800
 800a7f8:	40020800 	.word	0x40020800
 800a7fc:	40020000 	.word	0x40020000
 800a800:	40020400 	.word	0x40020400

0800a804 <low_level_init>:
=======
 800a7b6:	bf00      	nop
 800a7b8:	3738      	adds	r7, #56	; 0x38
 800a7ba:	46bd      	mov	sp, r7
 800a7bc:	bd80      	pop	{r7, pc}
 800a7be:	bf00      	nop
 800a7c0:	40028000 	.word	0x40028000
 800a7c4:	40023800 	.word	0x40023800
 800a7c8:	40020800 	.word	0x40020800
 800a7cc:	40020000 	.word	0x40020000
 800a7d0:	40020400 	.word	0x40020400

0800a7d4 <low_level_init>:
>>>>>>> Stashed changes
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
<<<<<<< Updated upstream
 800a804:	b580      	push	{r7, lr}
 800a806:	b086      	sub	sp, #24
 800a808:	af00      	add	r7, sp, #0
 800a80a:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 800a80c:	2300      	movs	r3, #0
 800a80e:	613b      	str	r3, [r7, #16]
=======
 800a7d4:	b580      	push	{r7, lr}
 800a7d6:	b086      	sub	sp, #24
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 800a7dc:	2300      	movs	r3, #0
 800a7de:	613b      	str	r3, [r7, #16]
>>>>>>> Stashed changes
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
<<<<<<< Updated upstream
 800a810:	4b4d      	ldr	r3, [pc, #308]	; (800a948 <low_level_init+0x144>)
 800a812:	4a4e      	ldr	r2, [pc, #312]	; (800a94c <low_level_init+0x148>)
 800a814:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800a816:	4b4c      	ldr	r3, [pc, #304]	; (800a948 <low_level_init+0x144>)
 800a818:	2201      	movs	r2, #1
 800a81a:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 800a81c:	4b4a      	ldr	r3, [pc, #296]	; (800a948 <low_level_init+0x144>)
 800a81e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800a822:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 800a824:	4b48      	ldr	r3, [pc, #288]	; (800a948 <low_level_init+0x144>)
 800a826:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a82a:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 800a82c:	4b46      	ldr	r3, [pc, #280]	; (800a948 <low_level_init+0x144>)
 800a82e:	2201      	movs	r2, #1
 800a830:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 800a832:	2300      	movs	r3, #0
 800a834:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800a836:	2380      	movs	r3, #128	; 0x80
 800a838:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 800a83a:	23e1      	movs	r3, #225	; 0xe1
 800a83c:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800a83e:	2300      	movs	r3, #0
 800a840:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800a842:	2300      	movs	r3, #0
 800a844:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800a846:	2300      	movs	r3, #0
 800a848:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800a84a:	4a3f      	ldr	r2, [pc, #252]	; (800a948 <low_level_init+0x144>)
 800a84c:	f107 0308 	add.w	r3, r7, #8
 800a850:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 800a852:	4b3d      	ldr	r3, [pc, #244]	; (800a948 <low_level_init+0x144>)
 800a854:	2200      	movs	r2, #0
 800a856:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 800a858:	4b3b      	ldr	r3, [pc, #236]	; (800a948 <low_level_init+0x144>)
 800a85a:	2200      	movs	r2, #0
 800a85c:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800a85e:	4b3a      	ldr	r3, [pc, #232]	; (800a948 <low_level_init+0x144>)
 800a860:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800a864:	621a      	str	r2, [r3, #32]
=======
 800a7e0:	4b4d      	ldr	r3, [pc, #308]	; (800a918 <low_level_init+0x144>)
 800a7e2:	4a4e      	ldr	r2, [pc, #312]	; (800a91c <low_level_init+0x148>)
 800a7e4:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800a7e6:	4b4c      	ldr	r3, [pc, #304]	; (800a918 <low_level_init+0x144>)
 800a7e8:	2201      	movs	r2, #1
 800a7ea:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 800a7ec:	4b4a      	ldr	r3, [pc, #296]	; (800a918 <low_level_init+0x144>)
 800a7ee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800a7f2:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 800a7f4:	4b48      	ldr	r3, [pc, #288]	; (800a918 <low_level_init+0x144>)
 800a7f6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a7fa:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 800a7fc:	4b46      	ldr	r3, [pc, #280]	; (800a918 <low_level_init+0x144>)
 800a7fe:	2201      	movs	r2, #1
 800a800:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 800a802:	2300      	movs	r3, #0
 800a804:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800a806:	2380      	movs	r3, #128	; 0x80
 800a808:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 800a80a:	23e1      	movs	r3, #225	; 0xe1
 800a80c:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800a80e:	2300      	movs	r3, #0
 800a810:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800a812:	2300      	movs	r3, #0
 800a814:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800a816:	2300      	movs	r3, #0
 800a818:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800a81a:	4a3f      	ldr	r2, [pc, #252]	; (800a918 <low_level_init+0x144>)
 800a81c:	f107 0308 	add.w	r3, r7, #8
 800a820:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 800a822:	4b3d      	ldr	r3, [pc, #244]	; (800a918 <low_level_init+0x144>)
 800a824:	2200      	movs	r2, #0
 800a826:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 800a828:	4b3b      	ldr	r3, [pc, #236]	; (800a918 <low_level_init+0x144>)
 800a82a:	2200      	movs	r2, #0
 800a82c:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800a82e:	4b3a      	ldr	r3, [pc, #232]	; (800a918 <low_level_init+0x144>)
 800a830:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800a834:	621a      	str	r2, [r3, #32]
>>>>>>> Stashed changes

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
<<<<<<< Updated upstream
 800a866:	4838      	ldr	r0, [pc, #224]	; (800a948 <low_level_init+0x144>)
 800a868:	f7f9 faea 	bl	8003e40 <HAL_ETH_Init>
 800a86c:	4603      	mov	r3, r0
 800a86e:	75fb      	strb	r3, [r7, #23]

  if (hal_eth_init_status == HAL_OK)
 800a870:	7dfb      	ldrb	r3, [r7, #23]
 800a872:	2b00      	cmp	r3, #0
 800a874:	d108      	bne.n	800a888 <low_level_init+0x84>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a87c:	f043 0304 	orr.w	r3, r3, #4
 800a880:	b2da      	uxtb	r2, r3
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 800a888:	2304      	movs	r3, #4
 800a88a:	4a31      	ldr	r2, [pc, #196]	; (800a950 <low_level_init+0x14c>)
 800a88c:	4931      	ldr	r1, [pc, #196]	; (800a954 <low_level_init+0x150>)
 800a88e:	482e      	ldr	r0, [pc, #184]	; (800a948 <low_level_init+0x144>)
 800a890:	f7f9 fc72 	bl	8004178 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 800a894:	2304      	movs	r3, #4
 800a896:	4a30      	ldr	r2, [pc, #192]	; (800a958 <low_level_init+0x154>)
 800a898:	4930      	ldr	r1, [pc, #192]	; (800a95c <low_level_init+0x158>)
 800a89a:	482b      	ldr	r0, [pc, #172]	; (800a948 <low_level_init+0x144>)
 800a89c:	f7f9 fcd5 	bl	800424a <HAL_ETH_DMARxDescListInit>
=======
 800a836:	4838      	ldr	r0, [pc, #224]	; (800a918 <low_level_init+0x144>)
 800a838:	f7f9 fb04 	bl	8003e44 <HAL_ETH_Init>
 800a83c:	4603      	mov	r3, r0
 800a83e:	75fb      	strb	r3, [r7, #23]

  if (hal_eth_init_status == HAL_OK)
 800a840:	7dfb      	ldrb	r3, [r7, #23]
 800a842:	2b00      	cmp	r3, #0
 800a844:	d108      	bne.n	800a858 <low_level_init+0x84>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a84c:	f043 0304 	orr.w	r3, r3, #4
 800a850:	b2da      	uxtb	r2, r3
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 800a858:	2304      	movs	r3, #4
 800a85a:	4a31      	ldr	r2, [pc, #196]	; (800a920 <low_level_init+0x14c>)
 800a85c:	4931      	ldr	r1, [pc, #196]	; (800a924 <low_level_init+0x150>)
 800a85e:	482e      	ldr	r0, [pc, #184]	; (800a918 <low_level_init+0x144>)
 800a860:	f7f9 fc8c 	bl	800417c <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 800a864:	2304      	movs	r3, #4
 800a866:	4a30      	ldr	r2, [pc, #192]	; (800a928 <low_level_init+0x154>)
 800a868:	4930      	ldr	r1, [pc, #192]	; (800a92c <low_level_init+0x158>)
 800a86a:	482b      	ldr	r0, [pc, #172]	; (800a918 <low_level_init+0x144>)
 800a86c:	f7f9 fcef 	bl	800424e <HAL_ETH_DMARxDescListInit>
>>>>>>> Stashed changes

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
<<<<<<< Updated upstream
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	2206      	movs	r2, #6
 800a8a4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800a8a8:	4b27      	ldr	r3, [pc, #156]	; (800a948 <low_level_init+0x144>)
 800a8aa:	695b      	ldr	r3, [r3, #20]
 800a8ac:	781a      	ldrb	r2, [r3, #0]
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800a8b4:	4b24      	ldr	r3, [pc, #144]	; (800a948 <low_level_init+0x144>)
 800a8b6:	695b      	ldr	r3, [r3, #20]
 800a8b8:	785a      	ldrb	r2, [r3, #1]
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800a8c0:	4b21      	ldr	r3, [pc, #132]	; (800a948 <low_level_init+0x144>)
 800a8c2:	695b      	ldr	r3, [r3, #20]
 800a8c4:	789a      	ldrb	r2, [r3, #2]
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800a8cc:	4b1e      	ldr	r3, [pc, #120]	; (800a948 <low_level_init+0x144>)
 800a8ce:	695b      	ldr	r3, [r3, #20]
 800a8d0:	78da      	ldrb	r2, [r3, #3]
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800a8d8:	4b1b      	ldr	r3, [pc, #108]	; (800a948 <low_level_init+0x144>)
 800a8da:	695b      	ldr	r3, [r3, #20]
 800a8dc:	791a      	ldrb	r2, [r3, #4]
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800a8e4:	4b18      	ldr	r3, [pc, #96]	; (800a948 <low_level_init+0x144>)
 800a8e6:	695b      	ldr	r3, [r3, #20]
 800a8e8:	795a      	ldrb	r2, [r3, #5]
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = 1500;
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800a8f6:	849a      	strh	r2, [r3, #36]	; 0x24
=======
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	2206      	movs	r2, #6
 800a874:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800a878:	4b27      	ldr	r3, [pc, #156]	; (800a918 <low_level_init+0x144>)
 800a87a:	695b      	ldr	r3, [r3, #20]
 800a87c:	781a      	ldrb	r2, [r3, #0]
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800a884:	4b24      	ldr	r3, [pc, #144]	; (800a918 <low_level_init+0x144>)
 800a886:	695b      	ldr	r3, [r3, #20]
 800a888:	785a      	ldrb	r2, [r3, #1]
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800a890:	4b21      	ldr	r3, [pc, #132]	; (800a918 <low_level_init+0x144>)
 800a892:	695b      	ldr	r3, [r3, #20]
 800a894:	789a      	ldrb	r2, [r3, #2]
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800a89c:	4b1e      	ldr	r3, [pc, #120]	; (800a918 <low_level_init+0x144>)
 800a89e:	695b      	ldr	r3, [r3, #20]
 800a8a0:	78da      	ldrb	r2, [r3, #3]
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800a8a8:	4b1b      	ldr	r3, [pc, #108]	; (800a918 <low_level_init+0x144>)
 800a8aa:	695b      	ldr	r3, [r3, #20]
 800a8ac:	791a      	ldrb	r2, [r3, #4]
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800a8b4:	4b18      	ldr	r3, [pc, #96]	; (800a918 <low_level_init+0x144>)
 800a8b6:	695b      	ldr	r3, [r3, #20]
 800a8b8:	795a      	ldrb	r2, [r3, #5]
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = 1500;
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800a8c6:	849a      	strh	r2, [r3, #36]	; 0x24
>>>>>>> Stashed changes

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
<<<<<<< Updated upstream
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a8fe:	f043 030a 	orr.w	r3, r3, #10
 800a902:	b2da      	uxtb	r2, r3
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
=======
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a8ce:	f043 030a 	orr.w	r3, r3, #10
 800a8d2:	b2da      	uxtb	r2, r3
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
>>>>>>> Stashed changes
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
<<<<<<< Updated upstream
 800a90a:	480f      	ldr	r0, [pc, #60]	; (800a948 <low_level_init+0x144>)
 800a90c:	f7f9 fec2 	bl	8004694 <HAL_ETH_Start>
=======
 800a8da:	480f      	ldr	r0, [pc, #60]	; (800a918 <low_level_init+0x144>)
 800a8dc:	f7f9 fedc 	bl	8004698 <HAL_ETH_Start>
>>>>>>> Stashed changes
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
<<<<<<< Updated upstream
 800a910:	f107 0310 	add.w	r3, r7, #16
 800a914:	461a      	mov	r2, r3
 800a916:	211d      	movs	r1, #29
 800a918:	480b      	ldr	r0, [pc, #44]	; (800a948 <low_level_init+0x144>)
 800a91a:	f7f9 fded 	bl	80044f8 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 800a91e:	693b      	ldr	r3, [r7, #16]
 800a920:	f043 030b 	orr.w	r3, r3, #11
 800a924:	613b      	str	r3, [r7, #16]

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 800a926:	693b      	ldr	r3, [r7, #16]
 800a928:	461a      	mov	r2, r3
 800a92a:	211d      	movs	r1, #29
 800a92c:	4806      	ldr	r0, [pc, #24]	; (800a948 <low_level_init+0x144>)
 800a92e:	f7f9 fe4b 	bl	80045c8 <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 800a932:	f107 0310 	add.w	r3, r7, #16
 800a936:	461a      	mov	r2, r3
 800a938:	211d      	movs	r1, #29
 800a93a:	4803      	ldr	r0, [pc, #12]	; (800a948 <low_level_init+0x144>)
 800a93c:	f7f9 fddc 	bl	80044f8 <HAL_ETH_ReadPHYRegister>
=======
 800a8e0:	f107 0310 	add.w	r3, r7, #16
 800a8e4:	461a      	mov	r2, r3
 800a8e6:	211d      	movs	r1, #29
 800a8e8:	480b      	ldr	r0, [pc, #44]	; (800a918 <low_level_init+0x144>)
 800a8ea:	f7f9 fe07 	bl	80044fc <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 800a8ee:	693b      	ldr	r3, [r7, #16]
 800a8f0:	f043 030b 	orr.w	r3, r3, #11
 800a8f4:	613b      	str	r3, [r7, #16]

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 800a8f6:	693b      	ldr	r3, [r7, #16]
 800a8f8:	461a      	mov	r2, r3
 800a8fa:	211d      	movs	r1, #29
 800a8fc:	4806      	ldr	r0, [pc, #24]	; (800a918 <low_level_init+0x144>)
 800a8fe:	f7f9 fe65 	bl	80045cc <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 800a902:	f107 0310 	add.w	r3, r7, #16
 800a906:	461a      	mov	r2, r3
 800a908:	211d      	movs	r1, #29
 800a90a:	4803      	ldr	r0, [pc, #12]	; (800a918 <low_level_init+0x144>)
 800a90c:	f7f9 fdf6 	bl	80044fc <HAL_ETH_ReadPHYRegister>
>>>>>>> Stashed changes
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
<<<<<<< Updated upstream
 800a940:	bf00      	nop
 800a942:	3718      	adds	r7, #24
 800a944:	46bd      	mov	sp, r7
 800a946:	bd80      	pop	{r7, pc}
 800a948:	20002544 	.word	0x20002544
 800a94c:	40028000 	.word	0x40028000
 800a950:	2000258c 	.word	0x2000258c
 800a954:	20000c74 	.word	0x20000c74
 800a958:	20000cf4 	.word	0x20000cf4
 800a95c:	200024c4 	.word	0x200024c4

0800a960 <low_level_output>:
=======
 800a910:	bf00      	nop
 800a912:	3718      	adds	r7, #24
 800a914:	46bd      	mov	sp, r7
 800a916:	bd80      	pop	{r7, pc}
 800a918:	20002544 	.word	0x20002544
 800a91c:	40028000 	.word	0x40028000
 800a920:	2000258c 	.word	0x2000258c
 800a924:	20000c74 	.word	0x20000c74
 800a928:	20000cf4 	.word	0x20000cf4
 800a92c:	200024c4 	.word	0x200024c4

0800a930 <low_level_output>:
>>>>>>> Stashed changes
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
<<<<<<< Updated upstream
 800a960:	b580      	push	{r7, lr}
 800a962:	b08a      	sub	sp, #40	; 0x28
 800a964:	af00      	add	r7, sp, #0
 800a966:	6078      	str	r0, [r7, #4]
 800a968:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800a96a:	4b4b      	ldr	r3, [pc, #300]	; (800aa98 <low_level_output+0x138>)
 800a96c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a96e:	689b      	ldr	r3, [r3, #8]
 800a970:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 800a972:	2300      	movs	r3, #0
 800a974:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 800a976:	2300      	movs	r3, #0
 800a978:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 800a97a:	2300      	movs	r3, #0
 800a97c:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 800a97e:	2300      	movs	r3, #0
 800a980:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 800a982:	4b45      	ldr	r3, [pc, #276]	; (800aa98 <low_level_output+0x138>)
 800a984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a986:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 800a988:	2300      	movs	r3, #0
 800a98a:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 800a98c:	683b      	ldr	r3, [r7, #0]
 800a98e:	623b      	str	r3, [r7, #32]
 800a990:	e05a      	b.n	800aa48 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800a992:	69bb      	ldr	r3, [r7, #24]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	2b00      	cmp	r3, #0
 800a998:	da03      	bge.n	800a9a2 <low_level_output+0x42>
      {
        errval = ERR_USE;
 800a99a:	23f8      	movs	r3, #248	; 0xf8
 800a99c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 800a9a0:	e05c      	b.n	800aa5c <low_level_output+0xfc>
=======
 800a930:	b580      	push	{r7, lr}
 800a932:	b08a      	sub	sp, #40	; 0x28
 800a934:	af00      	add	r7, sp, #0
 800a936:	6078      	str	r0, [r7, #4]
 800a938:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800a93a:	4b4b      	ldr	r3, [pc, #300]	; (800aa68 <low_level_output+0x138>)
 800a93c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a93e:	689b      	ldr	r3, [r3, #8]
 800a940:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 800a942:	2300      	movs	r3, #0
 800a944:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 800a946:	2300      	movs	r3, #0
 800a948:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 800a94a:	2300      	movs	r3, #0
 800a94c:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 800a94e:	2300      	movs	r3, #0
 800a950:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 800a952:	4b45      	ldr	r3, [pc, #276]	; (800aa68 <low_level_output+0x138>)
 800a954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a956:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 800a958:	2300      	movs	r3, #0
 800a95a:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 800a95c:	683b      	ldr	r3, [r7, #0]
 800a95e:	623b      	str	r3, [r7, #32]
 800a960:	e05a      	b.n	800aa18 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800a962:	69bb      	ldr	r3, [r7, #24]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	2b00      	cmp	r3, #0
 800a968:	da03      	bge.n	800a972 <low_level_output+0x42>
      {
        errval = ERR_USE;
 800a96a:	23f8      	movs	r3, #248	; 0xf8
 800a96c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 800a970:	e05c      	b.n	800aa2c <low_level_output+0xfc>
>>>>>>> Stashed changes
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
<<<<<<< Updated upstream
 800a9a2:	6a3b      	ldr	r3, [r7, #32]
 800a9a4:	895b      	ldrh	r3, [r3, #10]
 800a9a6:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 800a9a8:	2300      	movs	r3, #0
 800a9aa:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800a9ac:	e02f      	b.n	800aa0e <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 800a9ae:	69fa      	ldr	r2, [r7, #28]
 800a9b0:	693b      	ldr	r3, [r7, #16]
 800a9b2:	18d0      	adds	r0, r2, r3
 800a9b4:	6a3b      	ldr	r3, [r7, #32]
 800a9b6:	685a      	ldr	r2, [r3, #4]
 800a9b8:	68bb      	ldr	r3, [r7, #8]
 800a9ba:	18d1      	adds	r1, r2, r3
 800a9bc:	693b      	ldr	r3, [r7, #16]
 800a9be:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 800a9c2:	3304      	adds	r3, #4
 800a9c4:	461a      	mov	r2, r3
 800a9c6:	f009 fdad 	bl	8014524 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 800a9ca:	69bb      	ldr	r3, [r7, #24]
 800a9cc:	68db      	ldr	r3, [r3, #12]
 800a9ce:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800a9d0:	69bb      	ldr	r3, [r7, #24]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	da03      	bge.n	800a9e0 <low_level_output+0x80>
        {
          errval = ERR_USE;
 800a9d8:	23f8      	movs	r3, #248	; 0xf8
 800a9da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 800a9de:	e03d      	b.n	800aa5c <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 800a9e0:	69bb      	ldr	r3, [r7, #24]
 800a9e2:	689b      	ldr	r3, [r3, #8]
 800a9e4:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 800a9e6:	693a      	ldr	r2, [r7, #16]
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	4413      	add	r3, r2
 800a9ec:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 800a9f0:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 800a9f2:	68ba      	ldr	r2, [r7, #8]
 800a9f4:	693b      	ldr	r3, [r7, #16]
 800a9f6:	1ad3      	subs	r3, r2, r3
 800a9f8:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800a9fc:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 800a9fe:	697a      	ldr	r2, [r7, #20]
 800aa00:	693b      	ldr	r3, [r7, #16]
 800aa02:	1ad3      	subs	r3, r2, r3
 800aa04:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800aa08:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 800aa0a:	2300      	movs	r3, #0
 800aa0c:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800aa0e:	68fa      	ldr	r2, [r7, #12]
 800aa10:	693b      	ldr	r3, [r7, #16]
 800aa12:	4413      	add	r3, r2
 800aa14:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800aa18:	4293      	cmp	r3, r2
 800aa1a:	d8c8      	bhi.n	800a9ae <low_level_output+0x4e>
=======
 800a972:	6a3b      	ldr	r3, [r7, #32]
 800a974:	895b      	ldrh	r3, [r3, #10]
 800a976:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 800a978:	2300      	movs	r3, #0
 800a97a:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800a97c:	e02f      	b.n	800a9de <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 800a97e:	69fa      	ldr	r2, [r7, #28]
 800a980:	693b      	ldr	r3, [r7, #16]
 800a982:	18d0      	adds	r0, r2, r3
 800a984:	6a3b      	ldr	r3, [r7, #32]
 800a986:	685a      	ldr	r2, [r3, #4]
 800a988:	68bb      	ldr	r3, [r7, #8]
 800a98a:	18d1      	adds	r1, r2, r3
 800a98c:	693b      	ldr	r3, [r7, #16]
 800a98e:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 800a992:	3304      	adds	r3, #4
 800a994:	461a      	mov	r2, r3
 800a996:	f009 fdad 	bl	80144f4 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 800a99a:	69bb      	ldr	r3, [r7, #24]
 800a99c:	68db      	ldr	r3, [r3, #12]
 800a99e:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800a9a0:	69bb      	ldr	r3, [r7, #24]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	da03      	bge.n	800a9b0 <low_level_output+0x80>
        {
          errval = ERR_USE;
 800a9a8:	23f8      	movs	r3, #248	; 0xf8
 800a9aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 800a9ae:	e03d      	b.n	800aa2c <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 800a9b0:	69bb      	ldr	r3, [r7, #24]
 800a9b2:	689b      	ldr	r3, [r3, #8]
 800a9b4:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 800a9b6:	693a      	ldr	r2, [r7, #16]
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	4413      	add	r3, r2
 800a9bc:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 800a9c0:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 800a9c2:	68ba      	ldr	r2, [r7, #8]
 800a9c4:	693b      	ldr	r3, [r7, #16]
 800a9c6:	1ad3      	subs	r3, r2, r3
 800a9c8:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800a9cc:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 800a9ce:	697a      	ldr	r2, [r7, #20]
 800a9d0:	693b      	ldr	r3, [r7, #16]
 800a9d2:	1ad3      	subs	r3, r2, r3
 800a9d4:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800a9d8:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 800a9da:	2300      	movs	r3, #0
 800a9dc:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800a9de:	68fa      	ldr	r2, [r7, #12]
 800a9e0:	693b      	ldr	r3, [r7, #16]
 800a9e2:	4413      	add	r3, r2
 800a9e4:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800a9e8:	4293      	cmp	r3, r2
 800a9ea:	d8c8      	bhi.n	800a97e <low_level_output+0x4e>
>>>>>>> Stashed changes
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
<<<<<<< Updated upstream
 800aa1c:	69fa      	ldr	r2, [r7, #28]
 800aa1e:	693b      	ldr	r3, [r7, #16]
 800aa20:	18d0      	adds	r0, r2, r3
 800aa22:	6a3b      	ldr	r3, [r7, #32]
 800aa24:	685a      	ldr	r2, [r3, #4]
 800aa26:	68bb      	ldr	r3, [r7, #8]
 800aa28:	4413      	add	r3, r2
 800aa2a:	68fa      	ldr	r2, [r7, #12]
 800aa2c:	4619      	mov	r1, r3
 800aa2e:	f009 fd79 	bl	8014524 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800aa32:	693a      	ldr	r2, [r7, #16]
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	4413      	add	r3, r2
 800aa38:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 800aa3a:	697a      	ldr	r2, [r7, #20]
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	4413      	add	r3, r2
 800aa40:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 800aa42:	6a3b      	ldr	r3, [r7, #32]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	623b      	str	r3, [r7, #32]
 800aa48:	6a3b      	ldr	r3, [r7, #32]
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d1a1      	bne.n	800a992 <low_level_output+0x32>
=======
 800a9ec:	69fa      	ldr	r2, [r7, #28]
 800a9ee:	693b      	ldr	r3, [r7, #16]
 800a9f0:	18d0      	adds	r0, r2, r3
 800a9f2:	6a3b      	ldr	r3, [r7, #32]
 800a9f4:	685a      	ldr	r2, [r3, #4]
 800a9f6:	68bb      	ldr	r3, [r7, #8]
 800a9f8:	4413      	add	r3, r2
 800a9fa:	68fa      	ldr	r2, [r7, #12]
 800a9fc:	4619      	mov	r1, r3
 800a9fe:	f009 fd79 	bl	80144f4 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800aa02:	693a      	ldr	r2, [r7, #16]
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	4413      	add	r3, r2
 800aa08:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 800aa0a:	697a      	ldr	r2, [r7, #20]
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	4413      	add	r3, r2
 800aa10:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 800aa12:	6a3b      	ldr	r3, [r7, #32]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	623b      	str	r3, [r7, #32]
 800aa18:	6a3b      	ldr	r3, [r7, #32]
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d1a1      	bne.n	800a962 <low_level_output+0x32>
>>>>>>> Stashed changes
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
<<<<<<< Updated upstream
 800aa4e:	6979      	ldr	r1, [r7, #20]
 800aa50:	4811      	ldr	r0, [pc, #68]	; (800aa98 <low_level_output+0x138>)
 800aa52:	f7f9 fc67 	bl	8004324 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 800aa56:	2300      	movs	r3, #0
 800aa58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
=======
 800aa1e:	6979      	ldr	r1, [r7, #20]
 800aa20:	4811      	ldr	r0, [pc, #68]	; (800aa68 <low_level_output+0x138>)
 800aa22:	f7f9 fc81 	bl	8004328 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 800aa26:	2300      	movs	r3, #0
 800aa28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
>>>>>>> Stashed changes

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
<<<<<<< Updated upstream
 800aa5c:	4b0e      	ldr	r3, [pc, #56]	; (800aa98 <low_level_output+0x138>)
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aa64:	3314      	adds	r3, #20
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	f003 0320 	and.w	r3, r3, #32
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d00d      	beq.n	800aa8c <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 800aa70:	4b09      	ldr	r3, [pc, #36]	; (800aa98 <low_level_output+0x138>)
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aa78:	3314      	adds	r3, #20
 800aa7a:	2220      	movs	r2, #32
 800aa7c:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 800aa7e:	4b06      	ldr	r3, [pc, #24]	; (800aa98 <low_level_output+0x138>)
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aa86:	3304      	adds	r3, #4
 800aa88:	2200      	movs	r2, #0
 800aa8a:	601a      	str	r2, [r3, #0]
  }
  return errval;
 800aa8c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800aa90:	4618      	mov	r0, r3
 800aa92:	3728      	adds	r7, #40	; 0x28
 800aa94:	46bd      	mov	sp, r7
 800aa96:	bd80      	pop	{r7, pc}
 800aa98:	20002544 	.word	0x20002544

0800aa9c <ethernetif_init>:
=======
 800aa2c:	4b0e      	ldr	r3, [pc, #56]	; (800aa68 <low_level_output+0x138>)
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aa34:	3314      	adds	r3, #20
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	f003 0320 	and.w	r3, r3, #32
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d00d      	beq.n	800aa5c <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 800aa40:	4b09      	ldr	r3, [pc, #36]	; (800aa68 <low_level_output+0x138>)
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aa48:	3314      	adds	r3, #20
 800aa4a:	2220      	movs	r2, #32
 800aa4c:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 800aa4e:	4b06      	ldr	r3, [pc, #24]	; (800aa68 <low_level_output+0x138>)
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aa56:	3304      	adds	r3, #4
 800aa58:	2200      	movs	r2, #0
 800aa5a:	601a      	str	r2, [r3, #0]
  }
  return errval;
 800aa5c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800aa60:	4618      	mov	r0, r3
 800aa62:	3728      	adds	r7, #40	; 0x28
 800aa64:	46bd      	mov	sp, r7
 800aa66:	bd80      	pop	{r7, pc}
 800aa68:	20002544 	.word	0x20002544

0800aa6c <ethernetif_init>:
>>>>>>> Stashed changes
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
<<<<<<< Updated upstream
 800aa9c:	b580      	push	{r7, lr}
 800aa9e:	b082      	sub	sp, #8
 800aaa0:	af00      	add	r7, sp, #0
 800aaa2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d106      	bne.n	800aab8 <ethernetif_init+0x1c>
 800aaaa:	4b0e      	ldr	r3, [pc, #56]	; (800aae4 <ethernetif_init+0x48>)
 800aaac:	f44f 7202 	mov.w	r2, #520	; 0x208
 800aab0:	490d      	ldr	r1, [pc, #52]	; (800aae8 <ethernetif_init+0x4c>)
 800aab2:	480e      	ldr	r0, [pc, #56]	; (800aaec <ethernetif_init+0x50>)
 800aab4:	f009 fd66 	bl	8014584 <iprintf>
=======
 800aa6c:	b580      	push	{r7, lr}
 800aa6e:	b082      	sub	sp, #8
 800aa70:	af00      	add	r7, sp, #0
 800aa72:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d106      	bne.n	800aa88 <ethernetif_init+0x1c>
 800aa7a:	4b0e      	ldr	r3, [pc, #56]	; (800aab4 <ethernetif_init+0x48>)
 800aa7c:	f44f 7202 	mov.w	r2, #520	; 0x208
 800aa80:	490d      	ldr	r1, [pc, #52]	; (800aab8 <ethernetif_init+0x4c>)
 800aa82:	480e      	ldr	r0, [pc, #56]	; (800aabc <ethernetif_init+0x50>)
 800aa84:	f009 fd66 	bl	8014554 <iprintf>
>>>>>>> Stashed changes
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
<<<<<<< Updated upstream
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	2273      	movs	r2, #115	; 0x73
 800aabc:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	2274      	movs	r2, #116	; 0x74
 800aac4:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
=======
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	2273      	movs	r2, #115	; 0x73
 800aa8c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	2274      	movs	r2, #116	; 0x74
 800aa94:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
>>>>>>> Stashed changes
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
<<<<<<< Updated upstream
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	4a09      	ldr	r2, [pc, #36]	; (800aaf0 <ethernetif_init+0x54>)
 800aacc:	615a      	str	r2, [r3, #20]
=======
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	4a09      	ldr	r2, [pc, #36]	; (800aac0 <ethernetif_init+0x54>)
 800aa9c:	615a      	str	r2, [r3, #20]
>>>>>>> Stashed changes

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
<<<<<<< Updated upstream
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	4a08      	ldr	r2, [pc, #32]	; (800aaf4 <ethernetif_init+0x58>)
 800aad2:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800aad4:	6878      	ldr	r0, [r7, #4]
 800aad6:	f7ff fe95 	bl	800a804 <low_level_init>

  return ERR_OK;
 800aada:	2300      	movs	r3, #0
}
 800aadc:	4618      	mov	r0, r3
 800aade:	3708      	adds	r7, #8
 800aae0:	46bd      	mov	sp, r7
 800aae2:	bd80      	pop	{r7, pc}
 800aae4:	0801595c 	.word	0x0801595c
 800aae8:	08015978 	.word	0x08015978
 800aaec:	08015988 	.word	0x08015988
 800aaf0:	080127d9 	.word	0x080127d9
 800aaf4:	0800a961 	.word	0x0800a961

0800aaf8 <sys_now>:
=======
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	4a08      	ldr	r2, [pc, #32]	; (800aac4 <ethernetif_init+0x58>)
 800aaa2:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800aaa4:	6878      	ldr	r0, [r7, #4]
 800aaa6:	f7ff fe95 	bl	800a7d4 <low_level_init>

  return ERR_OK;
 800aaaa:	2300      	movs	r3, #0
}
 800aaac:	4618      	mov	r0, r3
 800aaae:	3708      	adds	r7, #8
 800aab0:	46bd      	mov	sp, r7
 800aab2:	bd80      	pop	{r7, pc}
 800aab4:	08015940 	.word	0x08015940
 800aab8:	0801595c 	.word	0x0801595c
 800aabc:	0801596c 	.word	0x0801596c
 800aac0:	080127a9 	.word	0x080127a9
 800aac4:	0800a931 	.word	0x0800a931

0800aac8 <sys_now>:
>>>>>>> Stashed changes
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
<<<<<<< Updated upstream
 800aaf8:	b580      	push	{r7, lr}
 800aafa:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800aafc:	f7f7 fad6 	bl	80020ac <HAL_GetTick>
 800ab00:	4603      	mov	r3, r0
}
 800ab02:	4618      	mov	r0, r3
 800ab04:	bd80      	pop	{r7, pc}
	...

0800ab08 <ethernetif_update_config>:
=======
 800aac8:	b580      	push	{r7, lr}
 800aaca:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800aacc:	f7f7 faf0 	bl	80020b0 <HAL_GetTick>
 800aad0:	4603      	mov	r3, r0
}
 800aad2:	4618      	mov	r0, r3
 800aad4:	bd80      	pop	{r7, pc}
	...

0800aad8 <ethernetif_update_config>:
>>>>>>> Stashed changes
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
<<<<<<< Updated upstream
 800ab08:	b580      	push	{r7, lr}
 800ab0a:	b084      	sub	sp, #16
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 800ab10:	2300      	movs	r3, #0
 800ab12:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 800ab14:	2300      	movs	r3, #0
 800ab16:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ab1e:	089b      	lsrs	r3, r3, #2
 800ab20:	f003 0301 	and.w	r3, r3, #1
 800ab24:	b2db      	uxtb	r3, r3
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d05d      	beq.n	800abe6 <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800ab2a:	4b34      	ldr	r3, [pc, #208]	; (800abfc <ethernetif_update_config+0xf4>)
 800ab2c:	685b      	ldr	r3, [r3, #4]
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d03f      	beq.n	800abb2 <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 800ab32:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800ab36:	2100      	movs	r1, #0
 800ab38:	4830      	ldr	r0, [pc, #192]	; (800abfc <ethernetif_update_config+0xf4>)
 800ab3a:	f7f9 fd45 	bl	80045c8 <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 800ab3e:	f7f7 fab5 	bl	80020ac <HAL_GetTick>
 800ab42:	4603      	mov	r3, r0
 800ab44:	60fb      	str	r3, [r7, #12]
=======
 800aad8:	b580      	push	{r7, lr}
 800aada:	b084      	sub	sp, #16
 800aadc:	af00      	add	r7, sp, #0
 800aade:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 800aae0:	2300      	movs	r3, #0
 800aae2:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 800aae4:	2300      	movs	r3, #0
 800aae6:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800aaee:	089b      	lsrs	r3, r3, #2
 800aaf0:	f003 0301 	and.w	r3, r3, #1
 800aaf4:	b2db      	uxtb	r3, r3
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d05d      	beq.n	800abb6 <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800aafa:	4b34      	ldr	r3, [pc, #208]	; (800abcc <ethernetif_update_config+0xf4>)
 800aafc:	685b      	ldr	r3, [r3, #4]
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d03f      	beq.n	800ab82 <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 800ab02:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800ab06:	2100      	movs	r1, #0
 800ab08:	4830      	ldr	r0, [pc, #192]	; (800abcc <ethernetif_update_config+0xf4>)
 800ab0a:	f7f9 fd5f 	bl	80045cc <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 800ab0e:	f7f7 facf 	bl	80020b0 <HAL_GetTick>
 800ab12:	4603      	mov	r3, r0
 800ab14:	60fb      	str	r3, [r7, #12]
>>>>>>> Stashed changes

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
<<<<<<< Updated upstream
 800ab46:	f107 0308 	add.w	r3, r7, #8
 800ab4a:	461a      	mov	r2, r3
 800ab4c:	2101      	movs	r1, #1
 800ab4e:	482b      	ldr	r0, [pc, #172]	; (800abfc <ethernetif_update_config+0xf4>)
 800ab50:	f7f9 fcd2 	bl	80044f8 <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 800ab54:	f7f7 faaa 	bl	80020ac <HAL_GetTick>
 800ab58:	4602      	mov	r2, r0
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	1ad3      	subs	r3, r2, r3
 800ab5e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ab62:	d828      	bhi.n	800abb6 <ethernetif_update_config+0xae>
=======
 800ab16:	f107 0308 	add.w	r3, r7, #8
 800ab1a:	461a      	mov	r2, r3
 800ab1c:	2101      	movs	r1, #1
 800ab1e:	482b      	ldr	r0, [pc, #172]	; (800abcc <ethernetif_update_config+0xf4>)
 800ab20:	f7f9 fcec 	bl	80044fc <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 800ab24:	f7f7 fac4 	bl	80020b0 <HAL_GetTick>
 800ab28:	4602      	mov	r2, r0
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	1ad3      	subs	r3, r2, r3
 800ab2e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ab32:	d828      	bhi.n	800ab86 <ethernetif_update_config+0xae>
>>>>>>> Stashed changes
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
<<<<<<< Updated upstream
 800ab64:	68bb      	ldr	r3, [r7, #8]
 800ab66:	f003 0320 	and.w	r3, r3, #32
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d0eb      	beq.n	800ab46 <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 800ab6e:	f107 0308 	add.w	r3, r7, #8
 800ab72:	461a      	mov	r2, r3
 800ab74:	2110      	movs	r1, #16
 800ab76:	4821      	ldr	r0, [pc, #132]	; (800abfc <ethernetif_update_config+0xf4>)
 800ab78:	f7f9 fcbe 	bl	80044f8 <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800ab7c:	68bb      	ldr	r3, [r7, #8]
 800ab7e:	f003 0304 	and.w	r3, r3, #4
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d004      	beq.n	800ab90 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 800ab86:	4b1d      	ldr	r3, [pc, #116]	; (800abfc <ethernetif_update_config+0xf4>)
 800ab88:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ab8c:	60da      	str	r2, [r3, #12]
 800ab8e:	e002      	b.n	800ab96 <ethernetif_update_config+0x8e>
=======
 800ab34:	68bb      	ldr	r3, [r7, #8]
 800ab36:	f003 0320 	and.w	r3, r3, #32
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d0eb      	beq.n	800ab16 <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 800ab3e:	f107 0308 	add.w	r3, r7, #8
 800ab42:	461a      	mov	r2, r3
 800ab44:	2110      	movs	r1, #16
 800ab46:	4821      	ldr	r0, [pc, #132]	; (800abcc <ethernetif_update_config+0xf4>)
 800ab48:	f7f9 fcd8 	bl	80044fc <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800ab4c:	68bb      	ldr	r3, [r7, #8]
 800ab4e:	f003 0304 	and.w	r3, r3, #4
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d004      	beq.n	800ab60 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 800ab56:	4b1d      	ldr	r3, [pc, #116]	; (800abcc <ethernetif_update_config+0xf4>)
 800ab58:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ab5c:	60da      	str	r2, [r3, #12]
 800ab5e:	e002      	b.n	800ab66 <ethernetif_update_config+0x8e>
>>>>>>> Stashed changes
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
<<<<<<< Updated upstream
 800ab90:	4b1a      	ldr	r3, [pc, #104]	; (800abfc <ethernetif_update_config+0xf4>)
 800ab92:	2200      	movs	r2, #0
 800ab94:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 800ab96:	68bb      	ldr	r3, [r7, #8]
 800ab98:	f003 0302 	and.w	r3, r3, #2
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d003      	beq.n	800aba8 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 800aba0:	4b16      	ldr	r3, [pc, #88]	; (800abfc <ethernetif_update_config+0xf4>)
 800aba2:	2200      	movs	r2, #0
 800aba4:	609a      	str	r2, [r3, #8]
 800aba6:	e016      	b.n	800abd6 <ethernetif_update_config+0xce>
=======
 800ab60:	4b1a      	ldr	r3, [pc, #104]	; (800abcc <ethernetif_update_config+0xf4>)
 800ab62:	2200      	movs	r2, #0
 800ab64:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 800ab66:	68bb      	ldr	r3, [r7, #8]
 800ab68:	f003 0302 	and.w	r3, r3, #2
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d003      	beq.n	800ab78 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 800ab70:	4b16      	ldr	r3, [pc, #88]	; (800abcc <ethernetif_update_config+0xf4>)
 800ab72:	2200      	movs	r2, #0
 800ab74:	609a      	str	r2, [r3, #8]
 800ab76:	e016      	b.n	800aba6 <ethernetif_update_config+0xce>
>>>>>>> Stashed changes
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
<<<<<<< Updated upstream
 800aba8:	4b14      	ldr	r3, [pc, #80]	; (800abfc <ethernetif_update_config+0xf4>)
 800abaa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800abae:	609a      	str	r2, [r3, #8]
 800abb0:	e011      	b.n	800abd6 <ethernetif_update_config+0xce>
=======
 800ab78:	4b14      	ldr	r3, [pc, #80]	; (800abcc <ethernetif_update_config+0xf4>)
 800ab7a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800ab7e:	609a      	str	r2, [r3, #8]
 800ab80:	e011      	b.n	800aba6 <ethernetif_update_config+0xce>
>>>>>>> Stashed changes
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
<<<<<<< Updated upstream
 800abb2:	bf00      	nop
 800abb4:	e000      	b.n	800abb8 <ethernetif_update_config+0xb0>
          goto error;
 800abb6:	bf00      	nop
=======
 800ab82:	bf00      	nop
 800ab84:	e000      	b.n	800ab88 <ethernetif_update_config+0xb0>
          goto error;
 800ab86:	bf00      	nop
>>>>>>> Stashed changes
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
<<<<<<< Updated upstream
 800abb8:	4b10      	ldr	r3, [pc, #64]	; (800abfc <ethernetif_update_config+0xf4>)
 800abba:	68db      	ldr	r3, [r3, #12]
 800abbc:	08db      	lsrs	r3, r3, #3
 800abbe:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 800abc0:	4b0e      	ldr	r3, [pc, #56]	; (800abfc <ethernetif_update_config+0xf4>)
 800abc2:	689b      	ldr	r3, [r3, #8]
 800abc4:	085b      	lsrs	r3, r3, #1
 800abc6:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 800abc8:	4313      	orrs	r3, r2
 800abca:	b29b      	uxth	r3, r3
 800abcc:	461a      	mov	r2, r3
 800abce:	2100      	movs	r1, #0
 800abd0:	480a      	ldr	r0, [pc, #40]	; (800abfc <ethernetif_update_config+0xf4>)
 800abd2:	f7f9 fcf9 	bl	80045c8 <HAL_ETH_WritePHYRegister>
=======
 800ab88:	4b10      	ldr	r3, [pc, #64]	; (800abcc <ethernetif_update_config+0xf4>)
 800ab8a:	68db      	ldr	r3, [r3, #12]
 800ab8c:	08db      	lsrs	r3, r3, #3
 800ab8e:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 800ab90:	4b0e      	ldr	r3, [pc, #56]	; (800abcc <ethernetif_update_config+0xf4>)
 800ab92:	689b      	ldr	r3, [r3, #8]
 800ab94:	085b      	lsrs	r3, r3, #1
 800ab96:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 800ab98:	4313      	orrs	r3, r2
 800ab9a:	b29b      	uxth	r3, r3
 800ab9c:	461a      	mov	r2, r3
 800ab9e:	2100      	movs	r1, #0
 800aba0:	480a      	ldr	r0, [pc, #40]	; (800abcc <ethernetif_update_config+0xf4>)
 800aba2:	f7f9 fd13 	bl	80045cc <HAL_ETH_WritePHYRegister>
>>>>>>> Stashed changes
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
<<<<<<< Updated upstream
 800abd6:	2100      	movs	r1, #0
 800abd8:	4808      	ldr	r0, [pc, #32]	; (800abfc <ethernetif_update_config+0xf4>)
 800abda:	f7f9 fdb9 	bl	8004750 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 800abde:	4807      	ldr	r0, [pc, #28]	; (800abfc <ethernetif_update_config+0xf4>)
 800abe0:	f7f9 fd58 	bl	8004694 <HAL_ETH_Start>
 800abe4:	e002      	b.n	800abec <ethernetif_update_config+0xe4>
=======
 800aba6:	2100      	movs	r1, #0
 800aba8:	4808      	ldr	r0, [pc, #32]	; (800abcc <ethernetif_update_config+0xf4>)
 800abaa:	f7f9 fdd3 	bl	8004754 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 800abae:	4807      	ldr	r0, [pc, #28]	; (800abcc <ethernetif_update_config+0xf4>)
 800abb0:	f7f9 fd72 	bl	8004698 <HAL_ETH_Start>
 800abb4:	e002      	b.n	800abbc <ethernetif_update_config+0xe4>
>>>>>>> Stashed changes
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
<<<<<<< Updated upstream
 800abe6:	4805      	ldr	r0, [pc, #20]	; (800abfc <ethernetif_update_config+0xf4>)
 800abe8:	f7f9 fd83 	bl	80046f2 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 800abec:	6878      	ldr	r0, [r7, #4]
 800abee:	f000 f807 	bl	800ac00 <ethernetif_notify_conn_changed>
}
 800abf2:	bf00      	nop
 800abf4:	3710      	adds	r7, #16
 800abf6:	46bd      	mov	sp, r7
 800abf8:	bd80      	pop	{r7, pc}
 800abfa:	bf00      	nop
 800abfc:	20002544 	.word	0x20002544

0800ac00 <ethernetif_notify_conn_changed>:
=======
 800abb6:	4805      	ldr	r0, [pc, #20]	; (800abcc <ethernetif_update_config+0xf4>)
 800abb8:	f7f9 fd9d 	bl	80046f6 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 800abbc:	6878      	ldr	r0, [r7, #4]
 800abbe:	f000 f807 	bl	800abd0 <ethernetif_notify_conn_changed>
}
 800abc2:	bf00      	nop
 800abc4:	3710      	adds	r7, #16
 800abc6:	46bd      	mov	sp, r7
 800abc8:	bd80      	pop	{r7, pc}
 800abca:	bf00      	nop
 800abcc:	20002544 	.word	0x20002544

0800abd0 <ethernetif_notify_conn_changed>:
>>>>>>> Stashed changes
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
<<<<<<< Updated upstream
 800ac00:	b480      	push	{r7}
 800ac02:	b083      	sub	sp, #12
 800ac04:	af00      	add	r7, sp, #0
 800ac06:	6078      	str	r0, [r7, #4]
=======
 800abd0:	b480      	push	{r7}
 800abd2:	b083      	sub	sp, #12
 800abd4:	af00      	add	r7, sp, #0
 800abd6:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
<<<<<<< Updated upstream
 800ac08:	bf00      	nop
 800ac0a:	370c      	adds	r7, #12
 800ac0c:	46bd      	mov	sp, r7
 800ac0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac12:	4770      	bx	lr

0800ac14 <FATFS_LinkDriverEx>:
=======
 800abd8:	bf00      	nop
 800abda:	370c      	adds	r7, #12
 800abdc:	46bd      	mov	sp, r7
 800abde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe2:	4770      	bx	lr

0800abe4 <FATFS_LinkDriverEx>:
>>>>>>> Stashed changes
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
<<<<<<< Updated upstream
 800ac14:	b480      	push	{r7}
 800ac16:	b087      	sub	sp, #28
 800ac18:	af00      	add	r7, sp, #0
 800ac1a:	60f8      	str	r0, [r7, #12]
 800ac1c:	60b9      	str	r1, [r7, #8]
 800ac1e:	4613      	mov	r3, r2
 800ac20:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800ac22:	2301      	movs	r3, #1
 800ac24:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800ac26:	2300      	movs	r3, #0
 800ac28:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800ac2a:	4b1f      	ldr	r3, [pc, #124]	; (800aca8 <FATFS_LinkDriverEx+0x94>)
 800ac2c:	7a5b      	ldrb	r3, [r3, #9]
 800ac2e:	b2db      	uxtb	r3, r3
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d131      	bne.n	800ac98 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800ac34:	4b1c      	ldr	r3, [pc, #112]	; (800aca8 <FATFS_LinkDriverEx+0x94>)
 800ac36:	7a5b      	ldrb	r3, [r3, #9]
 800ac38:	b2db      	uxtb	r3, r3
 800ac3a:	461a      	mov	r2, r3
 800ac3c:	4b1a      	ldr	r3, [pc, #104]	; (800aca8 <FATFS_LinkDriverEx+0x94>)
 800ac3e:	2100      	movs	r1, #0
 800ac40:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800ac42:	4b19      	ldr	r3, [pc, #100]	; (800aca8 <FATFS_LinkDriverEx+0x94>)
 800ac44:	7a5b      	ldrb	r3, [r3, #9]
 800ac46:	b2db      	uxtb	r3, r3
 800ac48:	4a17      	ldr	r2, [pc, #92]	; (800aca8 <FATFS_LinkDriverEx+0x94>)
 800ac4a:	009b      	lsls	r3, r3, #2
 800ac4c:	4413      	add	r3, r2
 800ac4e:	68fa      	ldr	r2, [r7, #12]
 800ac50:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800ac52:	4b15      	ldr	r3, [pc, #84]	; (800aca8 <FATFS_LinkDriverEx+0x94>)
 800ac54:	7a5b      	ldrb	r3, [r3, #9]
 800ac56:	b2db      	uxtb	r3, r3
 800ac58:	461a      	mov	r2, r3
 800ac5a:	4b13      	ldr	r3, [pc, #76]	; (800aca8 <FATFS_LinkDriverEx+0x94>)
 800ac5c:	4413      	add	r3, r2
 800ac5e:	79fa      	ldrb	r2, [r7, #7]
 800ac60:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800ac62:	4b11      	ldr	r3, [pc, #68]	; (800aca8 <FATFS_LinkDriverEx+0x94>)
 800ac64:	7a5b      	ldrb	r3, [r3, #9]
 800ac66:	b2db      	uxtb	r3, r3
 800ac68:	1c5a      	adds	r2, r3, #1
 800ac6a:	b2d1      	uxtb	r1, r2
 800ac6c:	4a0e      	ldr	r2, [pc, #56]	; (800aca8 <FATFS_LinkDriverEx+0x94>)
 800ac6e:	7251      	strb	r1, [r2, #9]
 800ac70:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800ac72:	7dbb      	ldrb	r3, [r7, #22]
 800ac74:	3330      	adds	r3, #48	; 0x30
 800ac76:	b2da      	uxtb	r2, r3
 800ac78:	68bb      	ldr	r3, [r7, #8]
 800ac7a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800ac7c:	68bb      	ldr	r3, [r7, #8]
 800ac7e:	3301      	adds	r3, #1
 800ac80:	223a      	movs	r2, #58	; 0x3a
 800ac82:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800ac84:	68bb      	ldr	r3, [r7, #8]
 800ac86:	3302      	adds	r3, #2
 800ac88:	222f      	movs	r2, #47	; 0x2f
 800ac8a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800ac8c:	68bb      	ldr	r3, [r7, #8]
 800ac8e:	3303      	adds	r3, #3
 800ac90:	2200      	movs	r2, #0
 800ac92:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800ac94:	2300      	movs	r3, #0
 800ac96:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800ac98:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac9a:	4618      	mov	r0, r3
 800ac9c:	371c      	adds	r7, #28
 800ac9e:	46bd      	mov	sp, r7
 800aca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca4:	4770      	bx	lr
 800aca6:	bf00      	nop
 800aca8:	200000a8 	.word	0x200000a8

0800acac <FATFS_LinkDriver>:
=======
 800abe4:	b480      	push	{r7}
 800abe6:	b087      	sub	sp, #28
 800abe8:	af00      	add	r7, sp, #0
 800abea:	60f8      	str	r0, [r7, #12]
 800abec:	60b9      	str	r1, [r7, #8]
 800abee:	4613      	mov	r3, r2
 800abf0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800abf2:	2301      	movs	r3, #1
 800abf4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800abf6:	2300      	movs	r3, #0
 800abf8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800abfa:	4b1f      	ldr	r3, [pc, #124]	; (800ac78 <FATFS_LinkDriverEx+0x94>)
 800abfc:	7a5b      	ldrb	r3, [r3, #9]
 800abfe:	b2db      	uxtb	r3, r3
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d131      	bne.n	800ac68 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800ac04:	4b1c      	ldr	r3, [pc, #112]	; (800ac78 <FATFS_LinkDriverEx+0x94>)
 800ac06:	7a5b      	ldrb	r3, [r3, #9]
 800ac08:	b2db      	uxtb	r3, r3
 800ac0a:	461a      	mov	r2, r3
 800ac0c:	4b1a      	ldr	r3, [pc, #104]	; (800ac78 <FATFS_LinkDriverEx+0x94>)
 800ac0e:	2100      	movs	r1, #0
 800ac10:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800ac12:	4b19      	ldr	r3, [pc, #100]	; (800ac78 <FATFS_LinkDriverEx+0x94>)
 800ac14:	7a5b      	ldrb	r3, [r3, #9]
 800ac16:	b2db      	uxtb	r3, r3
 800ac18:	4a17      	ldr	r2, [pc, #92]	; (800ac78 <FATFS_LinkDriverEx+0x94>)
 800ac1a:	009b      	lsls	r3, r3, #2
 800ac1c:	4413      	add	r3, r2
 800ac1e:	68fa      	ldr	r2, [r7, #12]
 800ac20:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800ac22:	4b15      	ldr	r3, [pc, #84]	; (800ac78 <FATFS_LinkDriverEx+0x94>)
 800ac24:	7a5b      	ldrb	r3, [r3, #9]
 800ac26:	b2db      	uxtb	r3, r3
 800ac28:	461a      	mov	r2, r3
 800ac2a:	4b13      	ldr	r3, [pc, #76]	; (800ac78 <FATFS_LinkDriverEx+0x94>)
 800ac2c:	4413      	add	r3, r2
 800ac2e:	79fa      	ldrb	r2, [r7, #7]
 800ac30:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800ac32:	4b11      	ldr	r3, [pc, #68]	; (800ac78 <FATFS_LinkDriverEx+0x94>)
 800ac34:	7a5b      	ldrb	r3, [r3, #9]
 800ac36:	b2db      	uxtb	r3, r3
 800ac38:	1c5a      	adds	r2, r3, #1
 800ac3a:	b2d1      	uxtb	r1, r2
 800ac3c:	4a0e      	ldr	r2, [pc, #56]	; (800ac78 <FATFS_LinkDriverEx+0x94>)
 800ac3e:	7251      	strb	r1, [r2, #9]
 800ac40:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800ac42:	7dbb      	ldrb	r3, [r7, #22]
 800ac44:	3330      	adds	r3, #48	; 0x30
 800ac46:	b2da      	uxtb	r2, r3
 800ac48:	68bb      	ldr	r3, [r7, #8]
 800ac4a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800ac4c:	68bb      	ldr	r3, [r7, #8]
 800ac4e:	3301      	adds	r3, #1
 800ac50:	223a      	movs	r2, #58	; 0x3a
 800ac52:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800ac54:	68bb      	ldr	r3, [r7, #8]
 800ac56:	3302      	adds	r3, #2
 800ac58:	222f      	movs	r2, #47	; 0x2f
 800ac5a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800ac5c:	68bb      	ldr	r3, [r7, #8]
 800ac5e:	3303      	adds	r3, #3
 800ac60:	2200      	movs	r2, #0
 800ac62:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800ac64:	2300      	movs	r3, #0
 800ac66:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800ac68:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac6a:	4618      	mov	r0, r3
 800ac6c:	371c      	adds	r7, #28
 800ac6e:	46bd      	mov	sp, r7
 800ac70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac74:	4770      	bx	lr
 800ac76:	bf00      	nop
 800ac78:	200000a8 	.word	0x200000a8

0800ac7c <FATFS_LinkDriver>:
>>>>>>> Stashed changes
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
<<<<<<< Updated upstream
 800acac:	b580      	push	{r7, lr}
 800acae:	b082      	sub	sp, #8
 800acb0:	af00      	add	r7, sp, #0
 800acb2:	6078      	str	r0, [r7, #4]
 800acb4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800acb6:	2200      	movs	r2, #0
 800acb8:	6839      	ldr	r1, [r7, #0]
 800acba:	6878      	ldr	r0, [r7, #4]
 800acbc:	f7ff ffaa 	bl	800ac14 <FATFS_LinkDriverEx>
 800acc0:	4603      	mov	r3, r0
}
 800acc2:	4618      	mov	r0, r3
 800acc4:	3708      	adds	r7, #8
 800acc6:	46bd      	mov	sp, r7
 800acc8:	bd80      	pop	{r7, pc}

0800acca <lwip_htons>:
=======
 800ac7c:	b580      	push	{r7, lr}
 800ac7e:	b082      	sub	sp, #8
 800ac80:	af00      	add	r7, sp, #0
 800ac82:	6078      	str	r0, [r7, #4]
 800ac84:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800ac86:	2200      	movs	r2, #0
 800ac88:	6839      	ldr	r1, [r7, #0]
 800ac8a:	6878      	ldr	r0, [r7, #4]
 800ac8c:	f7ff ffaa 	bl	800abe4 <FATFS_LinkDriverEx>
 800ac90:	4603      	mov	r3, r0
}
 800ac92:	4618      	mov	r0, r3
 800ac94:	3708      	adds	r7, #8
 800ac96:	46bd      	mov	sp, r7
 800ac98:	bd80      	pop	{r7, pc}

0800ac9a <lwip_htons>:
>>>>>>> Stashed changes
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
<<<<<<< Updated upstream
 800acca:	b480      	push	{r7}
 800accc:	b083      	sub	sp, #12
 800acce:	af00      	add	r7, sp, #0
 800acd0:	4603      	mov	r3, r0
 800acd2:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800acd4:	88fb      	ldrh	r3, [r7, #6]
 800acd6:	021b      	lsls	r3, r3, #8
 800acd8:	b21a      	sxth	r2, r3
 800acda:	88fb      	ldrh	r3, [r7, #6]
 800acdc:	0a1b      	lsrs	r3, r3, #8
 800acde:	b29b      	uxth	r3, r3
 800ace0:	b21b      	sxth	r3, r3
 800ace2:	4313      	orrs	r3, r2
 800ace4:	b21b      	sxth	r3, r3
 800ace6:	b29b      	uxth	r3, r3
}
 800ace8:	4618      	mov	r0, r3
 800acea:	370c      	adds	r7, #12
 800acec:	46bd      	mov	sp, r7
 800acee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf2:	4770      	bx	lr

0800acf4 <lwip_htonl>:
=======
 800ac9a:	b480      	push	{r7}
 800ac9c:	b083      	sub	sp, #12
 800ac9e:	af00      	add	r7, sp, #0
 800aca0:	4603      	mov	r3, r0
 800aca2:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800aca4:	88fb      	ldrh	r3, [r7, #6]
 800aca6:	021b      	lsls	r3, r3, #8
 800aca8:	b21a      	sxth	r2, r3
 800acaa:	88fb      	ldrh	r3, [r7, #6]
 800acac:	0a1b      	lsrs	r3, r3, #8
 800acae:	b29b      	uxth	r3, r3
 800acb0:	b21b      	sxth	r3, r3
 800acb2:	4313      	orrs	r3, r2
 800acb4:	b21b      	sxth	r3, r3
 800acb6:	b29b      	uxth	r3, r3
}
 800acb8:	4618      	mov	r0, r3
 800acba:	370c      	adds	r7, #12
 800acbc:	46bd      	mov	sp, r7
 800acbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc2:	4770      	bx	lr

0800acc4 <lwip_htonl>:
>>>>>>> Stashed changes
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
<<<<<<< Updated upstream
 800acf4:	b480      	push	{r7}
 800acf6:	b083      	sub	sp, #12
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	061a      	lsls	r2, r3, #24
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	021b      	lsls	r3, r3, #8
 800ad04:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ad08:	431a      	orrs	r2, r3
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	0a1b      	lsrs	r3, r3, #8
 800ad0e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800ad12:	431a      	orrs	r2, r3
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	0e1b      	lsrs	r3, r3, #24
 800ad18:	4313      	orrs	r3, r2
}
 800ad1a:	4618      	mov	r0, r3
 800ad1c:	370c      	adds	r7, #12
 800ad1e:	46bd      	mov	sp, r7
 800ad20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad24:	4770      	bx	lr

0800ad26 <lwip_init>:
=======
 800acc4:	b480      	push	{r7}
 800acc6:	b083      	sub	sp, #12
 800acc8:	af00      	add	r7, sp, #0
 800acca:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	061a      	lsls	r2, r3, #24
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	021b      	lsls	r3, r3, #8
 800acd4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800acd8:	431a      	orrs	r2, r3
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	0a1b      	lsrs	r3, r3, #8
 800acde:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800ace2:	431a      	orrs	r2, r3
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	0e1b      	lsrs	r3, r3, #24
 800ace8:	4313      	orrs	r3, r2
}
 800acea:	4618      	mov	r0, r3
 800acec:	370c      	adds	r7, #12
 800acee:	46bd      	mov	sp, r7
 800acf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf4:	4770      	bx	lr

0800acf6 <lwip_init>:
>>>>>>> Stashed changes
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
<<<<<<< Updated upstream
 800ad26:	b580      	push	{r7, lr}
 800ad28:	b082      	sub	sp, #8
 800ad2a:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800ad2c:	2300      	movs	r3, #0
 800ad2e:	607b      	str	r3, [r7, #4]
=======
 800acf6:	b580      	push	{r7, lr}
 800acf8:	b082      	sub	sp, #8
 800acfa:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800acfc:	2300      	movs	r3, #0
 800acfe:	607b      	str	r3, [r7, #4]
>>>>>>> Stashed changes
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
<<<<<<< Updated upstream
 800ad30:	f000 f8d4 	bl	800aedc <mem_init>
  memp_init();
 800ad34:	f000 fbda 	bl	800b4ec <memp_init>
  pbuf_init();
  netif_init();
 800ad38:	f000 fc92 	bl	800b660 <netif_init>
=======
 800ad00:	f000 f8d4 	bl	800aeac <mem_init>
  memp_init();
 800ad04:	f000 fbda 	bl	800b4bc <memp_init>
  pbuf_init();
  netif_init();
 800ad08:	f000 fc92 	bl	800b630 <netif_init>
>>>>>>> Stashed changes
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
<<<<<<< Updated upstream
 800ad3c:	f006 ff46 	bl	8011bcc <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800ad40:	f001 fce4 	bl	800c70c <tcp_init>
=======
 800ad0c:	f006 ff46 	bl	8011b9c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800ad10:	f001 fce4 	bl	800c6dc <tcp_init>
>>>>>>> Stashed changes
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
<<<<<<< Updated upstream
 800ad44:	f006 fefa 	bl	8011b3c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800ad48:	bf00      	nop
 800ad4a:	3708      	adds	r7, #8
 800ad4c:	46bd      	mov	sp, r7
 800ad4e:	bd80      	pop	{r7, pc}

0800ad50 <ptr_to_mem>:
=======
 800ad14:	f006 fefa 	bl	8011b0c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800ad18:	bf00      	nop
 800ad1a:	3708      	adds	r7, #8
 800ad1c:	46bd      	mov	sp, r7
 800ad1e:	bd80      	pop	{r7, pc}

0800ad20 <ptr_to_mem>:
>>>>>>> Stashed changes
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
<<<<<<< Updated upstream
 800ad50:	b480      	push	{r7}
 800ad52:	b083      	sub	sp, #12
 800ad54:	af00      	add	r7, sp, #0
 800ad56:	4603      	mov	r3, r0
 800ad58:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800ad5a:	4b05      	ldr	r3, [pc, #20]	; (800ad70 <ptr_to_mem+0x20>)
 800ad5c:	681a      	ldr	r2, [r3, #0]
 800ad5e:	88fb      	ldrh	r3, [r7, #6]
 800ad60:	4413      	add	r3, r2
}
 800ad62:	4618      	mov	r0, r3
 800ad64:	370c      	adds	r7, #12
 800ad66:	46bd      	mov	sp, r7
 800ad68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad6c:	4770      	bx	lr
 800ad6e:	bf00      	nop
 800ad70:	200000b4 	.word	0x200000b4

0800ad74 <mem_to_ptr>:
=======
 800ad20:	b480      	push	{r7}
 800ad22:	b083      	sub	sp, #12
 800ad24:	af00      	add	r7, sp, #0
 800ad26:	4603      	mov	r3, r0
 800ad28:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800ad2a:	4b05      	ldr	r3, [pc, #20]	; (800ad40 <ptr_to_mem+0x20>)
 800ad2c:	681a      	ldr	r2, [r3, #0]
 800ad2e:	88fb      	ldrh	r3, [r7, #6]
 800ad30:	4413      	add	r3, r2
}
 800ad32:	4618      	mov	r0, r3
 800ad34:	370c      	adds	r7, #12
 800ad36:	46bd      	mov	sp, r7
 800ad38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad3c:	4770      	bx	lr
 800ad3e:	bf00      	nop
 800ad40:	200000b4 	.word	0x200000b4

0800ad44 <mem_to_ptr>:
>>>>>>> Stashed changes

static mem_size_t
mem_to_ptr(void *mem)
{
<<<<<<< Updated upstream
 800ad74:	b480      	push	{r7}
 800ad76:	b083      	sub	sp, #12
 800ad78:	af00      	add	r7, sp, #0
 800ad7a:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800ad7c:	4b05      	ldr	r3, [pc, #20]	; (800ad94 <mem_to_ptr+0x20>)
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	687a      	ldr	r2, [r7, #4]
 800ad82:	1ad3      	subs	r3, r2, r3
 800ad84:	b29b      	uxth	r3, r3
}
 800ad86:	4618      	mov	r0, r3
 800ad88:	370c      	adds	r7, #12
 800ad8a:	46bd      	mov	sp, r7
 800ad8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad90:	4770      	bx	lr
 800ad92:	bf00      	nop
 800ad94:	200000b4 	.word	0x200000b4

0800ad98 <plug_holes>:
=======
 800ad44:	b480      	push	{r7}
 800ad46:	b083      	sub	sp, #12
 800ad48:	af00      	add	r7, sp, #0
 800ad4a:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800ad4c:	4b05      	ldr	r3, [pc, #20]	; (800ad64 <mem_to_ptr+0x20>)
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	687a      	ldr	r2, [r7, #4]
 800ad52:	1ad3      	subs	r3, r2, r3
 800ad54:	b29b      	uxth	r3, r3
}
 800ad56:	4618      	mov	r0, r3
 800ad58:	370c      	adds	r7, #12
 800ad5a:	46bd      	mov	sp, r7
 800ad5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad60:	4770      	bx	lr
 800ad62:	bf00      	nop
 800ad64:	200000b4 	.word	0x200000b4

0800ad68 <plug_holes>:
>>>>>>> Stashed changes
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
<<<<<<< Updated upstream
 800ad98:	b590      	push	{r4, r7, lr}
 800ad9a:	b085      	sub	sp, #20
 800ad9c:	af00      	add	r7, sp, #0
 800ad9e:	6078      	str	r0, [r7, #4]
=======
 800ad68:	b590      	push	{r4, r7, lr}
 800ad6a:	b085      	sub	sp, #20
 800ad6c:	af00      	add	r7, sp, #0
 800ad6e:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
<<<<<<< Updated upstream
 800ada0:	4b45      	ldr	r3, [pc, #276]	; (800aeb8 <plug_holes+0x120>)
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	687a      	ldr	r2, [r7, #4]
 800ada6:	429a      	cmp	r2, r3
 800ada8:	d206      	bcs.n	800adb8 <plug_holes+0x20>
 800adaa:	4b44      	ldr	r3, [pc, #272]	; (800aebc <plug_holes+0x124>)
 800adac:	f240 12df 	movw	r2, #479	; 0x1df
 800adb0:	4943      	ldr	r1, [pc, #268]	; (800aec0 <plug_holes+0x128>)
 800adb2:	4844      	ldr	r0, [pc, #272]	; (800aec4 <plug_holes+0x12c>)
 800adb4:	f009 fbe6 	bl	8014584 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800adb8:	4b43      	ldr	r3, [pc, #268]	; (800aec8 <plug_holes+0x130>)
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	687a      	ldr	r2, [r7, #4]
 800adbe:	429a      	cmp	r2, r3
 800adc0:	d306      	bcc.n	800add0 <plug_holes+0x38>
 800adc2:	4b3e      	ldr	r3, [pc, #248]	; (800aebc <plug_holes+0x124>)
 800adc4:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800adc8:	4940      	ldr	r1, [pc, #256]	; (800aecc <plug_holes+0x134>)
 800adca:	483e      	ldr	r0, [pc, #248]	; (800aec4 <plug_holes+0x12c>)
 800adcc:	f009 fbda 	bl	8014584 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	791b      	ldrb	r3, [r3, #4]
 800add4:	2b00      	cmp	r3, #0
 800add6:	d006      	beq.n	800ade6 <plug_holes+0x4e>
 800add8:	4b38      	ldr	r3, [pc, #224]	; (800aebc <plug_holes+0x124>)
 800adda:	f240 12e1 	movw	r2, #481	; 0x1e1
 800adde:	493c      	ldr	r1, [pc, #240]	; (800aed0 <plug_holes+0x138>)
 800ade0:	4838      	ldr	r0, [pc, #224]	; (800aec4 <plug_holes+0x12c>)
 800ade2:	f009 fbcf 	bl	8014584 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	881b      	ldrh	r3, [r3, #0]
 800adea:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800adee:	d906      	bls.n	800adfe <plug_holes+0x66>
 800adf0:	4b32      	ldr	r3, [pc, #200]	; (800aebc <plug_holes+0x124>)
 800adf2:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800adf6:	4937      	ldr	r1, [pc, #220]	; (800aed4 <plug_holes+0x13c>)
 800adf8:	4832      	ldr	r0, [pc, #200]	; (800aec4 <plug_holes+0x12c>)
 800adfa:	f009 fbc3 	bl	8014584 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	881b      	ldrh	r3, [r3, #0]
 800ae02:	4618      	mov	r0, r3
 800ae04:	f7ff ffa4 	bl	800ad50 <ptr_to_mem>
 800ae08:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800ae0a:	687a      	ldr	r2, [r7, #4]
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	429a      	cmp	r2, r3
 800ae10:	d024      	beq.n	800ae5c <plug_holes+0xc4>
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	791b      	ldrb	r3, [r3, #4]
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d120      	bne.n	800ae5c <plug_holes+0xc4>
 800ae1a:	4b2b      	ldr	r3, [pc, #172]	; (800aec8 <plug_holes+0x130>)
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	68fa      	ldr	r2, [r7, #12]
 800ae20:	429a      	cmp	r2, r3
 800ae22:	d01b      	beq.n	800ae5c <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800ae24:	4b2c      	ldr	r3, [pc, #176]	; (800aed8 <plug_holes+0x140>)
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	68fa      	ldr	r2, [r7, #12]
 800ae2a:	429a      	cmp	r2, r3
 800ae2c:	d102      	bne.n	800ae34 <plug_holes+0x9c>
      lfree = mem;
 800ae2e:	4a2a      	ldr	r2, [pc, #168]	; (800aed8 <plug_holes+0x140>)
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	881a      	ldrh	r2, [r3, #0]
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	881b      	ldrh	r3, [r3, #0]
 800ae40:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ae44:	d00a      	beq.n	800ae5c <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	881b      	ldrh	r3, [r3, #0]
 800ae4a:	4618      	mov	r0, r3
 800ae4c:	f7ff ff80 	bl	800ad50 <ptr_to_mem>
 800ae50:	4604      	mov	r4, r0
 800ae52:	6878      	ldr	r0, [r7, #4]
 800ae54:	f7ff ff8e 	bl	800ad74 <mem_to_ptr>
 800ae58:	4603      	mov	r3, r0
 800ae5a:	8063      	strh	r3, [r4, #2]
=======
 800ad70:	4b45      	ldr	r3, [pc, #276]	; (800ae88 <plug_holes+0x120>)
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	687a      	ldr	r2, [r7, #4]
 800ad76:	429a      	cmp	r2, r3
 800ad78:	d206      	bcs.n	800ad88 <plug_holes+0x20>
 800ad7a:	4b44      	ldr	r3, [pc, #272]	; (800ae8c <plug_holes+0x124>)
 800ad7c:	f240 12df 	movw	r2, #479	; 0x1df
 800ad80:	4943      	ldr	r1, [pc, #268]	; (800ae90 <plug_holes+0x128>)
 800ad82:	4844      	ldr	r0, [pc, #272]	; (800ae94 <plug_holes+0x12c>)
 800ad84:	f009 fbe6 	bl	8014554 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800ad88:	4b43      	ldr	r3, [pc, #268]	; (800ae98 <plug_holes+0x130>)
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	687a      	ldr	r2, [r7, #4]
 800ad8e:	429a      	cmp	r2, r3
 800ad90:	d306      	bcc.n	800ada0 <plug_holes+0x38>
 800ad92:	4b3e      	ldr	r3, [pc, #248]	; (800ae8c <plug_holes+0x124>)
 800ad94:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800ad98:	4940      	ldr	r1, [pc, #256]	; (800ae9c <plug_holes+0x134>)
 800ad9a:	483e      	ldr	r0, [pc, #248]	; (800ae94 <plug_holes+0x12c>)
 800ad9c:	f009 fbda 	bl	8014554 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	791b      	ldrb	r3, [r3, #4]
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d006      	beq.n	800adb6 <plug_holes+0x4e>
 800ada8:	4b38      	ldr	r3, [pc, #224]	; (800ae8c <plug_holes+0x124>)
 800adaa:	f240 12e1 	movw	r2, #481	; 0x1e1
 800adae:	493c      	ldr	r1, [pc, #240]	; (800aea0 <plug_holes+0x138>)
 800adb0:	4838      	ldr	r0, [pc, #224]	; (800ae94 <plug_holes+0x12c>)
 800adb2:	f009 fbcf 	bl	8014554 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	881b      	ldrh	r3, [r3, #0]
 800adba:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800adbe:	d906      	bls.n	800adce <plug_holes+0x66>
 800adc0:	4b32      	ldr	r3, [pc, #200]	; (800ae8c <plug_holes+0x124>)
 800adc2:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800adc6:	4937      	ldr	r1, [pc, #220]	; (800aea4 <plug_holes+0x13c>)
 800adc8:	4832      	ldr	r0, [pc, #200]	; (800ae94 <plug_holes+0x12c>)
 800adca:	f009 fbc3 	bl	8014554 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	881b      	ldrh	r3, [r3, #0]
 800add2:	4618      	mov	r0, r3
 800add4:	f7ff ffa4 	bl	800ad20 <ptr_to_mem>
 800add8:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800adda:	687a      	ldr	r2, [r7, #4]
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	429a      	cmp	r2, r3
 800ade0:	d024      	beq.n	800ae2c <plug_holes+0xc4>
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	791b      	ldrb	r3, [r3, #4]
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d120      	bne.n	800ae2c <plug_holes+0xc4>
 800adea:	4b2b      	ldr	r3, [pc, #172]	; (800ae98 <plug_holes+0x130>)
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	68fa      	ldr	r2, [r7, #12]
 800adf0:	429a      	cmp	r2, r3
 800adf2:	d01b      	beq.n	800ae2c <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800adf4:	4b2c      	ldr	r3, [pc, #176]	; (800aea8 <plug_holes+0x140>)
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	68fa      	ldr	r2, [r7, #12]
 800adfa:	429a      	cmp	r2, r3
 800adfc:	d102      	bne.n	800ae04 <plug_holes+0x9c>
      lfree = mem;
 800adfe:	4a2a      	ldr	r2, [pc, #168]	; (800aea8 <plug_holes+0x140>)
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	881a      	ldrh	r2, [r3, #0]
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	881b      	ldrh	r3, [r3, #0]
 800ae10:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ae14:	d00a      	beq.n	800ae2c <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	881b      	ldrh	r3, [r3, #0]
 800ae1a:	4618      	mov	r0, r3
 800ae1c:	f7ff ff80 	bl	800ad20 <ptr_to_mem>
 800ae20:	4604      	mov	r4, r0
 800ae22:	6878      	ldr	r0, [r7, #4]
 800ae24:	f7ff ff8e 	bl	800ad44 <mem_to_ptr>
 800ae28:	4603      	mov	r3, r0
 800ae2a:	8063      	strh	r3, [r4, #2]
>>>>>>> Stashed changes
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
<<<<<<< Updated upstream
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	885b      	ldrh	r3, [r3, #2]
 800ae60:	4618      	mov	r0, r3
 800ae62:	f7ff ff75 	bl	800ad50 <ptr_to_mem>
 800ae66:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800ae68:	68ba      	ldr	r2, [r7, #8]
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	429a      	cmp	r2, r3
 800ae6e:	d01f      	beq.n	800aeb0 <plug_holes+0x118>
 800ae70:	68bb      	ldr	r3, [r7, #8]
 800ae72:	791b      	ldrb	r3, [r3, #4]
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d11b      	bne.n	800aeb0 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800ae78:	4b17      	ldr	r3, [pc, #92]	; (800aed8 <plug_holes+0x140>)
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	687a      	ldr	r2, [r7, #4]
 800ae7e:	429a      	cmp	r2, r3
 800ae80:	d102      	bne.n	800ae88 <plug_holes+0xf0>
      lfree = pmem;
 800ae82:	4a15      	ldr	r2, [pc, #84]	; (800aed8 <plug_holes+0x140>)
 800ae84:	68bb      	ldr	r3, [r7, #8]
 800ae86:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	881a      	ldrh	r2, [r3, #0]
 800ae8c:	68bb      	ldr	r3, [r7, #8]
 800ae8e:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	881b      	ldrh	r3, [r3, #0]
 800ae94:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ae98:	d00a      	beq.n	800aeb0 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	881b      	ldrh	r3, [r3, #0]
 800ae9e:	4618      	mov	r0, r3
 800aea0:	f7ff ff56 	bl	800ad50 <ptr_to_mem>
 800aea4:	4604      	mov	r4, r0
 800aea6:	68b8      	ldr	r0, [r7, #8]
 800aea8:	f7ff ff64 	bl	800ad74 <mem_to_ptr>
 800aeac:	4603      	mov	r3, r0
 800aeae:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800aeb0:	bf00      	nop
 800aeb2:	3714      	adds	r7, #20
 800aeb4:	46bd      	mov	sp, r7
 800aeb6:	bd90      	pop	{r4, r7, pc}
 800aeb8:	200000b4 	.word	0x200000b4
 800aebc:	080159b0 	.word	0x080159b0
 800aec0:	080159e0 	.word	0x080159e0
 800aec4:	080159f8 	.word	0x080159f8
 800aec8:	200000b8 	.word	0x200000b8
 800aecc:	08015a20 	.word	0x08015a20
 800aed0:	08015a3c 	.word	0x08015a3c
 800aed4:	08015a58 	.word	0x08015a58
 800aed8:	200000bc 	.word	0x200000bc

0800aedc <mem_init>:
=======
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	885b      	ldrh	r3, [r3, #2]
 800ae30:	4618      	mov	r0, r3
 800ae32:	f7ff ff75 	bl	800ad20 <ptr_to_mem>
 800ae36:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800ae38:	68ba      	ldr	r2, [r7, #8]
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	429a      	cmp	r2, r3
 800ae3e:	d01f      	beq.n	800ae80 <plug_holes+0x118>
 800ae40:	68bb      	ldr	r3, [r7, #8]
 800ae42:	791b      	ldrb	r3, [r3, #4]
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d11b      	bne.n	800ae80 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800ae48:	4b17      	ldr	r3, [pc, #92]	; (800aea8 <plug_holes+0x140>)
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	687a      	ldr	r2, [r7, #4]
 800ae4e:	429a      	cmp	r2, r3
 800ae50:	d102      	bne.n	800ae58 <plug_holes+0xf0>
      lfree = pmem;
 800ae52:	4a15      	ldr	r2, [pc, #84]	; (800aea8 <plug_holes+0x140>)
 800ae54:	68bb      	ldr	r3, [r7, #8]
 800ae56:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	881a      	ldrh	r2, [r3, #0]
 800ae5c:	68bb      	ldr	r3, [r7, #8]
 800ae5e:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	881b      	ldrh	r3, [r3, #0]
 800ae64:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ae68:	d00a      	beq.n	800ae80 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	881b      	ldrh	r3, [r3, #0]
 800ae6e:	4618      	mov	r0, r3
 800ae70:	f7ff ff56 	bl	800ad20 <ptr_to_mem>
 800ae74:	4604      	mov	r4, r0
 800ae76:	68b8      	ldr	r0, [r7, #8]
 800ae78:	f7ff ff64 	bl	800ad44 <mem_to_ptr>
 800ae7c:	4603      	mov	r3, r0
 800ae7e:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800ae80:	bf00      	nop
 800ae82:	3714      	adds	r7, #20
 800ae84:	46bd      	mov	sp, r7
 800ae86:	bd90      	pop	{r4, r7, pc}
 800ae88:	200000b4 	.word	0x200000b4
 800ae8c:	08015994 	.word	0x08015994
 800ae90:	080159c4 	.word	0x080159c4
 800ae94:	080159dc 	.word	0x080159dc
 800ae98:	200000b8 	.word	0x200000b8
 800ae9c:	08015a04 	.word	0x08015a04
 800aea0:	08015a20 	.word	0x08015a20
 800aea4:	08015a3c 	.word	0x08015a3c
 800aea8:	200000bc 	.word	0x200000bc

0800aeac <mem_init>:
>>>>>>> Stashed changes
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
<<<<<<< Updated upstream
 800aedc:	b580      	push	{r7, lr}
 800aede:	b082      	sub	sp, #8
 800aee0:	af00      	add	r7, sp, #0
=======
 800aeac:	b580      	push	{r7, lr}
 800aeae:	b082      	sub	sp, #8
 800aeb0:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
<<<<<<< Updated upstream
 800aee2:	4b18      	ldr	r3, [pc, #96]	; (800af44 <mem_init+0x68>)
 800aee4:	3303      	adds	r3, #3
 800aee6:	f023 0303 	bic.w	r3, r3, #3
 800aeea:	461a      	mov	r2, r3
 800aeec:	4b16      	ldr	r3, [pc, #88]	; (800af48 <mem_init+0x6c>)
 800aeee:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800aef0:	4b15      	ldr	r3, [pc, #84]	; (800af48 <mem_init+0x6c>)
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800aefc:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	2200      	movs	r2, #0
 800af02:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	2200      	movs	r2, #0
 800af08:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800af0a:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800af0e:	f7ff ff1f 	bl	800ad50 <ptr_to_mem>
 800af12:	4603      	mov	r3, r0
 800af14:	4a0d      	ldr	r2, [pc, #52]	; (800af4c <mem_init+0x70>)
 800af16:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800af18:	4b0c      	ldr	r3, [pc, #48]	; (800af4c <mem_init+0x70>)
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	2201      	movs	r2, #1
 800af1e:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800af20:	4b0a      	ldr	r3, [pc, #40]	; (800af4c <mem_init+0x70>)
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800af28:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800af2a:	4b08      	ldr	r3, [pc, #32]	; (800af4c <mem_init+0x70>)
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800af32:	805a      	strh	r2, [r3, #2]
=======
 800aeb2:	4b18      	ldr	r3, [pc, #96]	; (800af14 <mem_init+0x68>)
 800aeb4:	3303      	adds	r3, #3
 800aeb6:	f023 0303 	bic.w	r3, r3, #3
 800aeba:	461a      	mov	r2, r3
 800aebc:	4b16      	ldr	r3, [pc, #88]	; (800af18 <mem_init+0x6c>)
 800aebe:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800aec0:	4b15      	ldr	r3, [pc, #84]	; (800af18 <mem_init+0x6c>)
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800aecc:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	2200      	movs	r2, #0
 800aed2:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	2200      	movs	r2, #0
 800aed8:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800aeda:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800aede:	f7ff ff1f 	bl	800ad20 <ptr_to_mem>
 800aee2:	4603      	mov	r3, r0
 800aee4:	4a0d      	ldr	r2, [pc, #52]	; (800af1c <mem_init+0x70>)
 800aee6:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800aee8:	4b0c      	ldr	r3, [pc, #48]	; (800af1c <mem_init+0x70>)
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	2201      	movs	r2, #1
 800aeee:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800aef0:	4b0a      	ldr	r3, [pc, #40]	; (800af1c <mem_init+0x70>)
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800aef8:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800aefa:	4b08      	ldr	r3, [pc, #32]	; (800af1c <mem_init+0x70>)
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800af02:	805a      	strh	r2, [r3, #2]
>>>>>>> Stashed changes
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
<<<<<<< Updated upstream
 800af34:	4b04      	ldr	r3, [pc, #16]	; (800af48 <mem_init+0x6c>)
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	4a05      	ldr	r2, [pc, #20]	; (800af50 <mem_init+0x74>)
 800af3a:	6013      	str	r3, [r2, #0]
=======
 800af04:	4b04      	ldr	r3, [pc, #16]	; (800af18 <mem_init+0x6c>)
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	4a05      	ldr	r2, [pc, #20]	; (800af20 <mem_init+0x74>)
 800af0a:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
<<<<<<< Updated upstream
 800af3c:	bf00      	nop
 800af3e:	3708      	adds	r7, #8
 800af40:	46bd      	mov	sp, r7
 800af42:	bd80      	pop	{r7, pc}
 800af44:	20003d74 	.word	0x20003d74
 800af48:	200000b4 	.word	0x200000b4
 800af4c:	200000b8 	.word	0x200000b8
 800af50:	200000bc 	.word	0x200000bc

0800af54 <mem_link_valid>:
=======
 800af0c:	bf00      	nop
 800af0e:	3708      	adds	r7, #8
 800af10:	46bd      	mov	sp, r7
 800af12:	bd80      	pop	{r7, pc}
 800af14:	20003d74 	.word	0x20003d74
 800af18:	200000b4 	.word	0x200000b4
 800af1c:	200000b8 	.word	0x200000b8
 800af20:	200000bc 	.word	0x200000bc

0800af24 <mem_link_valid>:
>>>>>>> Stashed changes
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
<<<<<<< Updated upstream
 800af54:	b580      	push	{r7, lr}
 800af56:	b086      	sub	sp, #24
 800af58:	af00      	add	r7, sp, #0
 800af5a:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800af5c:	6878      	ldr	r0, [r7, #4]
 800af5e:	f7ff ff09 	bl	800ad74 <mem_to_ptr>
 800af62:	4603      	mov	r3, r0
 800af64:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	881b      	ldrh	r3, [r3, #0]
 800af6a:	4618      	mov	r0, r3
 800af6c:	f7ff fef0 	bl	800ad50 <ptr_to_mem>
 800af70:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	885b      	ldrh	r3, [r3, #2]
 800af76:	4618      	mov	r0, r3
 800af78:	f7ff feea 	bl	800ad50 <ptr_to_mem>
 800af7c:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	881b      	ldrh	r3, [r3, #0]
 800af82:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800af86:	d818      	bhi.n	800afba <mem_link_valid+0x66>
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	885b      	ldrh	r3, [r3, #2]
 800af8c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800af90:	d813      	bhi.n	800afba <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800af96:	8afa      	ldrh	r2, [r7, #22]
 800af98:	429a      	cmp	r2, r3
 800af9a:	d004      	beq.n	800afa6 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	881b      	ldrh	r3, [r3, #0]
 800afa0:	8afa      	ldrh	r2, [r7, #22]
 800afa2:	429a      	cmp	r2, r3
 800afa4:	d109      	bne.n	800afba <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800afa6:	4b08      	ldr	r3, [pc, #32]	; (800afc8 <mem_link_valid+0x74>)
 800afa8:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800afaa:	693a      	ldr	r2, [r7, #16]
 800afac:	429a      	cmp	r2, r3
 800afae:	d006      	beq.n	800afbe <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800afb0:	693b      	ldr	r3, [r7, #16]
 800afb2:	885b      	ldrh	r3, [r3, #2]
 800afb4:	8afa      	ldrh	r2, [r7, #22]
 800afb6:	429a      	cmp	r2, r3
 800afb8:	d001      	beq.n	800afbe <mem_link_valid+0x6a>
    return 0;
 800afba:	2300      	movs	r3, #0
 800afbc:	e000      	b.n	800afc0 <mem_link_valid+0x6c>
  }
  return 1;
 800afbe:	2301      	movs	r3, #1
}
 800afc0:	4618      	mov	r0, r3
 800afc2:	3718      	adds	r7, #24
 800afc4:	46bd      	mov	sp, r7
 800afc6:	bd80      	pop	{r7, pc}
 800afc8:	200000b8 	.word	0x200000b8

0800afcc <mem_free>:
=======
 800af24:	b580      	push	{r7, lr}
 800af26:	b086      	sub	sp, #24
 800af28:	af00      	add	r7, sp, #0
 800af2a:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800af2c:	6878      	ldr	r0, [r7, #4]
 800af2e:	f7ff ff09 	bl	800ad44 <mem_to_ptr>
 800af32:	4603      	mov	r3, r0
 800af34:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	881b      	ldrh	r3, [r3, #0]
 800af3a:	4618      	mov	r0, r3
 800af3c:	f7ff fef0 	bl	800ad20 <ptr_to_mem>
 800af40:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	885b      	ldrh	r3, [r3, #2]
 800af46:	4618      	mov	r0, r3
 800af48:	f7ff feea 	bl	800ad20 <ptr_to_mem>
 800af4c:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	881b      	ldrh	r3, [r3, #0]
 800af52:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800af56:	d818      	bhi.n	800af8a <mem_link_valid+0x66>
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	885b      	ldrh	r3, [r3, #2]
 800af5c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800af60:	d813      	bhi.n	800af8a <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800af66:	8afa      	ldrh	r2, [r7, #22]
 800af68:	429a      	cmp	r2, r3
 800af6a:	d004      	beq.n	800af76 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	881b      	ldrh	r3, [r3, #0]
 800af70:	8afa      	ldrh	r2, [r7, #22]
 800af72:	429a      	cmp	r2, r3
 800af74:	d109      	bne.n	800af8a <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800af76:	4b08      	ldr	r3, [pc, #32]	; (800af98 <mem_link_valid+0x74>)
 800af78:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800af7a:	693a      	ldr	r2, [r7, #16]
 800af7c:	429a      	cmp	r2, r3
 800af7e:	d006      	beq.n	800af8e <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800af80:	693b      	ldr	r3, [r7, #16]
 800af82:	885b      	ldrh	r3, [r3, #2]
 800af84:	8afa      	ldrh	r2, [r7, #22]
 800af86:	429a      	cmp	r2, r3
 800af88:	d001      	beq.n	800af8e <mem_link_valid+0x6a>
    return 0;
 800af8a:	2300      	movs	r3, #0
 800af8c:	e000      	b.n	800af90 <mem_link_valid+0x6c>
  }
  return 1;
 800af8e:	2301      	movs	r3, #1
}
 800af90:	4618      	mov	r0, r3
 800af92:	3718      	adds	r7, #24
 800af94:	46bd      	mov	sp, r7
 800af96:	bd80      	pop	{r7, pc}
 800af98:	200000b8 	.word	0x200000b8

0800af9c <mem_free>:
>>>>>>> Stashed changes
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
<<<<<<< Updated upstream
 800afcc:	b580      	push	{r7, lr}
 800afce:	b084      	sub	sp, #16
 800afd0:	af00      	add	r7, sp, #0
 800afd2:	6078      	str	r0, [r7, #4]
=======
 800af9c:	b580      	push	{r7, lr}
 800af9e:	b084      	sub	sp, #16
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
<<<<<<< Updated upstream
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d04c      	beq.n	800b074 <mem_free+0xa8>
=======
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d04c      	beq.n	800b044 <mem_free+0xa8>
>>>>>>> Stashed changes
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
<<<<<<< Updated upstream
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	f003 0303 	and.w	r3, r3, #3
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d007      	beq.n	800aff4 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800afe4:	4b25      	ldr	r3, [pc, #148]	; (800b07c <mem_free+0xb0>)
 800afe6:	f240 2273 	movw	r2, #627	; 0x273
 800afea:	4925      	ldr	r1, [pc, #148]	; (800b080 <mem_free+0xb4>)
 800afec:	4825      	ldr	r0, [pc, #148]	; (800b084 <mem_free+0xb8>)
 800afee:	f009 fac9 	bl	8014584 <iprintf>
=======
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	f003 0303 	and.w	r3, r3, #3
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d007      	beq.n	800afc4 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800afb4:	4b25      	ldr	r3, [pc, #148]	; (800b04c <mem_free+0xb0>)
 800afb6:	f240 2273 	movw	r2, #627	; 0x273
 800afba:	4925      	ldr	r1, [pc, #148]	; (800b050 <mem_free+0xb4>)
 800afbc:	4825      	ldr	r0, [pc, #148]	; (800b054 <mem_free+0xb8>)
 800afbe:	f009 fac9 	bl	8014554 <iprintf>
>>>>>>> Stashed changes
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
<<<<<<< Updated upstream
 800aff2:	e040      	b.n	800b076 <mem_free+0xaa>
=======
 800afc2:	e040      	b.n	800b046 <mem_free+0xaa>
>>>>>>> Stashed changes
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
<<<<<<< Updated upstream
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	3b08      	subs	r3, #8
 800aff8:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800affa:	4b23      	ldr	r3, [pc, #140]	; (800b088 <mem_free+0xbc>)
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	68fa      	ldr	r2, [r7, #12]
 800b000:	429a      	cmp	r2, r3
 800b002:	d306      	bcc.n	800b012 <mem_free+0x46>
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	f103 020c 	add.w	r2, r3, #12
 800b00a:	4b20      	ldr	r3, [pc, #128]	; (800b08c <mem_free+0xc0>)
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	429a      	cmp	r2, r3
 800b010:	d907      	bls.n	800b022 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800b012:	4b1a      	ldr	r3, [pc, #104]	; (800b07c <mem_free+0xb0>)
 800b014:	f240 227f 	movw	r2, #639	; 0x27f
 800b018:	491d      	ldr	r1, [pc, #116]	; (800b090 <mem_free+0xc4>)
 800b01a:	481a      	ldr	r0, [pc, #104]	; (800b084 <mem_free+0xb8>)
 800b01c:	f009 fab2 	bl	8014584 <iprintf>
=======
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	3b08      	subs	r3, #8
 800afc8:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800afca:	4b23      	ldr	r3, [pc, #140]	; (800b058 <mem_free+0xbc>)
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	68fa      	ldr	r2, [r7, #12]
 800afd0:	429a      	cmp	r2, r3
 800afd2:	d306      	bcc.n	800afe2 <mem_free+0x46>
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	f103 020c 	add.w	r2, r3, #12
 800afda:	4b20      	ldr	r3, [pc, #128]	; (800b05c <mem_free+0xc0>)
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	429a      	cmp	r2, r3
 800afe0:	d907      	bls.n	800aff2 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800afe2:	4b1a      	ldr	r3, [pc, #104]	; (800b04c <mem_free+0xb0>)
 800afe4:	f240 227f 	movw	r2, #639	; 0x27f
 800afe8:	491d      	ldr	r1, [pc, #116]	; (800b060 <mem_free+0xc4>)
 800afea:	481a      	ldr	r0, [pc, #104]	; (800b054 <mem_free+0xb8>)
 800afec:	f009 fab2 	bl	8014554 <iprintf>
>>>>>>> Stashed changes
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
<<<<<<< Updated upstream
 800b020:	e029      	b.n	800b076 <mem_free+0xaa>
=======
 800aff0:	e029      	b.n	800b046 <mem_free+0xaa>
>>>>>>> Stashed changes
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
<<<<<<< Updated upstream
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	791b      	ldrb	r3, [r3, #4]
 800b026:	2b00      	cmp	r3, #0
 800b028:	d107      	bne.n	800b03a <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800b02a:	4b14      	ldr	r3, [pc, #80]	; (800b07c <mem_free+0xb0>)
 800b02c:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800b030:	4918      	ldr	r1, [pc, #96]	; (800b094 <mem_free+0xc8>)
 800b032:	4814      	ldr	r0, [pc, #80]	; (800b084 <mem_free+0xb8>)
 800b034:	f009 faa6 	bl	8014584 <iprintf>
=======
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	791b      	ldrb	r3, [r3, #4]
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d107      	bne.n	800b00a <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800affa:	4b14      	ldr	r3, [pc, #80]	; (800b04c <mem_free+0xb0>)
 800affc:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800b000:	4918      	ldr	r1, [pc, #96]	; (800b064 <mem_free+0xc8>)
 800b002:	4814      	ldr	r0, [pc, #80]	; (800b054 <mem_free+0xb8>)
 800b004:	f009 faa6 	bl	8014554 <iprintf>
>>>>>>> Stashed changes
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
<<<<<<< Updated upstream
 800b038:	e01d      	b.n	800b076 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 800b03a:	68f8      	ldr	r0, [r7, #12]
 800b03c:	f7ff ff8a 	bl	800af54 <mem_link_valid>
 800b040:	4603      	mov	r3, r0
 800b042:	2b00      	cmp	r3, #0
 800b044:	d107      	bne.n	800b056 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800b046:	4b0d      	ldr	r3, [pc, #52]	; (800b07c <mem_free+0xb0>)
 800b048:	f240 2295 	movw	r2, #661	; 0x295
 800b04c:	4912      	ldr	r1, [pc, #72]	; (800b098 <mem_free+0xcc>)
 800b04e:	480d      	ldr	r0, [pc, #52]	; (800b084 <mem_free+0xb8>)
 800b050:	f009 fa98 	bl	8014584 <iprintf>
=======
 800b008:	e01d      	b.n	800b046 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 800b00a:	68f8      	ldr	r0, [r7, #12]
 800b00c:	f7ff ff8a 	bl	800af24 <mem_link_valid>
 800b010:	4603      	mov	r3, r0
 800b012:	2b00      	cmp	r3, #0
 800b014:	d107      	bne.n	800b026 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800b016:	4b0d      	ldr	r3, [pc, #52]	; (800b04c <mem_free+0xb0>)
 800b018:	f240 2295 	movw	r2, #661	; 0x295
 800b01c:	4912      	ldr	r1, [pc, #72]	; (800b068 <mem_free+0xcc>)
 800b01e:	480d      	ldr	r0, [pc, #52]	; (800b054 <mem_free+0xb8>)
 800b020:	f009 fa98 	bl	8014554 <iprintf>
>>>>>>> Stashed changes
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
<<<<<<< Updated upstream
 800b054:	e00f      	b.n	800b076 <mem_free+0xaa>
=======
 800b024:	e00f      	b.n	800b046 <mem_free+0xaa>
>>>>>>> Stashed changes
  }

  /* mem is now unused. */
  mem->used = 0;
<<<<<<< Updated upstream
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	2200      	movs	r2, #0
 800b05a:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800b05c:	4b0f      	ldr	r3, [pc, #60]	; (800b09c <mem_free+0xd0>)
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	68fa      	ldr	r2, [r7, #12]
 800b062:	429a      	cmp	r2, r3
 800b064:	d202      	bcs.n	800b06c <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800b066:	4a0d      	ldr	r2, [pc, #52]	; (800b09c <mem_free+0xd0>)
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	6013      	str	r3, [r2, #0]
=======
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	2200      	movs	r2, #0
 800b02a:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800b02c:	4b0f      	ldr	r3, [pc, #60]	; (800b06c <mem_free+0xd0>)
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	68fa      	ldr	r2, [r7, #12]
 800b032:	429a      	cmp	r2, r3
 800b034:	d202      	bcs.n	800b03c <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800b036:	4a0d      	ldr	r2, [pc, #52]	; (800b06c <mem_free+0xd0>)
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
<<<<<<< Updated upstream
 800b06c:	68f8      	ldr	r0, [r7, #12]
 800b06e:	f7ff fe93 	bl	800ad98 <plug_holes>
 800b072:	e000      	b.n	800b076 <mem_free+0xaa>
    return;
 800b074:	bf00      	nop
=======
 800b03c:	68f8      	ldr	r0, [r7, #12]
 800b03e:	f7ff fe93 	bl	800ad68 <plug_holes>
 800b042:	e000      	b.n	800b046 <mem_free+0xaa>
    return;
 800b044:	bf00      	nop
>>>>>>> Stashed changes
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
<<<<<<< Updated upstream
 800b076:	3710      	adds	r7, #16
 800b078:	46bd      	mov	sp, r7
 800b07a:	bd80      	pop	{r7, pc}
 800b07c:	080159b0 	.word	0x080159b0
 800b080:	08015a84 	.word	0x08015a84
 800b084:	080159f8 	.word	0x080159f8
 800b088:	200000b4 	.word	0x200000b4
 800b08c:	200000b8 	.word	0x200000b8
 800b090:	08015aa8 	.word	0x08015aa8
 800b094:	08015ac4 	.word	0x08015ac4
 800b098:	08015aec 	.word	0x08015aec
 800b09c:	200000bc 	.word	0x200000bc

0800b0a0 <mem_trim>:
=======
 800b046:	3710      	adds	r7, #16
 800b048:	46bd      	mov	sp, r7
 800b04a:	bd80      	pop	{r7, pc}
 800b04c:	08015994 	.word	0x08015994
 800b050:	08015a68 	.word	0x08015a68
 800b054:	080159dc 	.word	0x080159dc
 800b058:	200000b4 	.word	0x200000b4
 800b05c:	200000b8 	.word	0x200000b8
 800b060:	08015a8c 	.word	0x08015a8c
 800b064:	08015aa8 	.word	0x08015aa8
 800b068:	08015ad0 	.word	0x08015ad0
 800b06c:	200000bc 	.word	0x200000bc

0800b070 <mem_trim>:
>>>>>>> Stashed changes
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
<<<<<<< Updated upstream
 800b0a0:	b580      	push	{r7, lr}
 800b0a2:	b088      	sub	sp, #32
 800b0a4:	af00      	add	r7, sp, #0
 800b0a6:	6078      	str	r0, [r7, #4]
 800b0a8:	460b      	mov	r3, r1
 800b0aa:	807b      	strh	r3, [r7, #2]
=======
 800b070:	b580      	push	{r7, lr}
 800b072:	b088      	sub	sp, #32
 800b074:	af00      	add	r7, sp, #0
 800b076:	6078      	str	r0, [r7, #4]
 800b078:	460b      	mov	r3, r1
 800b07a:	807b      	strh	r3, [r7, #2]
>>>>>>> Stashed changes
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
<<<<<<< Updated upstream
 800b0ac:	887b      	ldrh	r3, [r7, #2]
 800b0ae:	3303      	adds	r3, #3
 800b0b0:	b29b      	uxth	r3, r3
 800b0b2:	f023 0303 	bic.w	r3, r3, #3
 800b0b6:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800b0b8:	8bfb      	ldrh	r3, [r7, #30]
 800b0ba:	2b0b      	cmp	r3, #11
 800b0bc:	d801      	bhi.n	800b0c2 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800b0be:	230c      	movs	r3, #12
 800b0c0:	83fb      	strh	r3, [r7, #30]
=======
 800b07c:	887b      	ldrh	r3, [r7, #2]
 800b07e:	3303      	adds	r3, #3
 800b080:	b29b      	uxth	r3, r3
 800b082:	f023 0303 	bic.w	r3, r3, #3
 800b086:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800b088:	8bfb      	ldrh	r3, [r7, #30]
 800b08a:	2b0b      	cmp	r3, #11
 800b08c:	d801      	bhi.n	800b092 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800b08e:	230c      	movs	r3, #12
 800b090:	83fb      	strh	r3, [r7, #30]
>>>>>>> Stashed changes
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
<<<<<<< Updated upstream
 800b0c2:	8bfb      	ldrh	r3, [r7, #30]
 800b0c4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b0c8:	d803      	bhi.n	800b0d2 <mem_trim+0x32>
 800b0ca:	8bfa      	ldrh	r2, [r7, #30]
 800b0cc:	887b      	ldrh	r3, [r7, #2]
 800b0ce:	429a      	cmp	r2, r3
 800b0d0:	d201      	bcs.n	800b0d6 <mem_trim+0x36>
    return NULL;
 800b0d2:	2300      	movs	r3, #0
 800b0d4:	e0cc      	b.n	800b270 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800b0d6:	4b68      	ldr	r3, [pc, #416]	; (800b278 <mem_trim+0x1d8>)
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	687a      	ldr	r2, [r7, #4]
 800b0dc:	429a      	cmp	r2, r3
 800b0de:	d304      	bcc.n	800b0ea <mem_trim+0x4a>
 800b0e0:	4b66      	ldr	r3, [pc, #408]	; (800b27c <mem_trim+0x1dc>)
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	687a      	ldr	r2, [r7, #4]
 800b0e6:	429a      	cmp	r2, r3
 800b0e8:	d306      	bcc.n	800b0f8 <mem_trim+0x58>
 800b0ea:	4b65      	ldr	r3, [pc, #404]	; (800b280 <mem_trim+0x1e0>)
 800b0ec:	f240 22d1 	movw	r2, #721	; 0x2d1
 800b0f0:	4964      	ldr	r1, [pc, #400]	; (800b284 <mem_trim+0x1e4>)
 800b0f2:	4865      	ldr	r0, [pc, #404]	; (800b288 <mem_trim+0x1e8>)
 800b0f4:	f009 fa46 	bl	8014584 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800b0f8:	4b5f      	ldr	r3, [pc, #380]	; (800b278 <mem_trim+0x1d8>)
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	687a      	ldr	r2, [r7, #4]
 800b0fe:	429a      	cmp	r2, r3
 800b100:	d304      	bcc.n	800b10c <mem_trim+0x6c>
 800b102:	4b5e      	ldr	r3, [pc, #376]	; (800b27c <mem_trim+0x1dc>)
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	687a      	ldr	r2, [r7, #4]
 800b108:	429a      	cmp	r2, r3
 800b10a:	d301      	bcc.n	800b110 <mem_trim+0x70>
=======
 800b092:	8bfb      	ldrh	r3, [r7, #30]
 800b094:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b098:	d803      	bhi.n	800b0a2 <mem_trim+0x32>
 800b09a:	8bfa      	ldrh	r2, [r7, #30]
 800b09c:	887b      	ldrh	r3, [r7, #2]
 800b09e:	429a      	cmp	r2, r3
 800b0a0:	d201      	bcs.n	800b0a6 <mem_trim+0x36>
    return NULL;
 800b0a2:	2300      	movs	r3, #0
 800b0a4:	e0cc      	b.n	800b240 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800b0a6:	4b68      	ldr	r3, [pc, #416]	; (800b248 <mem_trim+0x1d8>)
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	687a      	ldr	r2, [r7, #4]
 800b0ac:	429a      	cmp	r2, r3
 800b0ae:	d304      	bcc.n	800b0ba <mem_trim+0x4a>
 800b0b0:	4b66      	ldr	r3, [pc, #408]	; (800b24c <mem_trim+0x1dc>)
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	687a      	ldr	r2, [r7, #4]
 800b0b6:	429a      	cmp	r2, r3
 800b0b8:	d306      	bcc.n	800b0c8 <mem_trim+0x58>
 800b0ba:	4b65      	ldr	r3, [pc, #404]	; (800b250 <mem_trim+0x1e0>)
 800b0bc:	f240 22d1 	movw	r2, #721	; 0x2d1
 800b0c0:	4964      	ldr	r1, [pc, #400]	; (800b254 <mem_trim+0x1e4>)
 800b0c2:	4865      	ldr	r0, [pc, #404]	; (800b258 <mem_trim+0x1e8>)
 800b0c4:	f009 fa46 	bl	8014554 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800b0c8:	4b5f      	ldr	r3, [pc, #380]	; (800b248 <mem_trim+0x1d8>)
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	687a      	ldr	r2, [r7, #4]
 800b0ce:	429a      	cmp	r2, r3
 800b0d0:	d304      	bcc.n	800b0dc <mem_trim+0x6c>
 800b0d2:	4b5e      	ldr	r3, [pc, #376]	; (800b24c <mem_trim+0x1dc>)
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	687a      	ldr	r2, [r7, #4]
 800b0d8:	429a      	cmp	r2, r3
 800b0da:	d301      	bcc.n	800b0e0 <mem_trim+0x70>
>>>>>>> Stashed changes
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
<<<<<<< Updated upstream
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	e0af      	b.n	800b270 <mem_trim+0x1d0>
=======
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	e0af      	b.n	800b240 <mem_trim+0x1d0>
>>>>>>> Stashed changes
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
<<<<<<< Updated upstream
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	3b08      	subs	r3, #8
 800b114:	61bb      	str	r3, [r7, #24]
=======
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	3b08      	subs	r3, #8
 800b0e4:	61bb      	str	r3, [r7, #24]
>>>>>>> Stashed changes
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
<<<<<<< Updated upstream
 800b116:	69b8      	ldr	r0, [r7, #24]
 800b118:	f7ff fe2c 	bl	800ad74 <mem_to_ptr>
 800b11c:	4603      	mov	r3, r0
 800b11e:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800b120:	69bb      	ldr	r3, [r7, #24]
 800b122:	881a      	ldrh	r2, [r3, #0]
 800b124:	8afb      	ldrh	r3, [r7, #22]
 800b126:	1ad3      	subs	r3, r2, r3
 800b128:	b29b      	uxth	r3, r3
 800b12a:	3b08      	subs	r3, #8
 800b12c:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800b12e:	8bfa      	ldrh	r2, [r7, #30]
 800b130:	8abb      	ldrh	r3, [r7, #20]
 800b132:	429a      	cmp	r2, r3
 800b134:	d906      	bls.n	800b144 <mem_trim+0xa4>
 800b136:	4b52      	ldr	r3, [pc, #328]	; (800b280 <mem_trim+0x1e0>)
 800b138:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800b13c:	4953      	ldr	r1, [pc, #332]	; (800b28c <mem_trim+0x1ec>)
 800b13e:	4852      	ldr	r0, [pc, #328]	; (800b288 <mem_trim+0x1e8>)
 800b140:	f009 fa20 	bl	8014584 <iprintf>
  if (newsize > size) {
 800b144:	8bfa      	ldrh	r2, [r7, #30]
 800b146:	8abb      	ldrh	r3, [r7, #20]
 800b148:	429a      	cmp	r2, r3
 800b14a:	d901      	bls.n	800b150 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 800b14c:	2300      	movs	r3, #0
 800b14e:	e08f      	b.n	800b270 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 800b150:	8bfa      	ldrh	r2, [r7, #30]
 800b152:	8abb      	ldrh	r3, [r7, #20]
 800b154:	429a      	cmp	r2, r3
 800b156:	d101      	bne.n	800b15c <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	e089      	b.n	800b270 <mem_trim+0x1d0>
=======
 800b0e6:	69b8      	ldr	r0, [r7, #24]
 800b0e8:	f7ff fe2c 	bl	800ad44 <mem_to_ptr>
 800b0ec:	4603      	mov	r3, r0
 800b0ee:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800b0f0:	69bb      	ldr	r3, [r7, #24]
 800b0f2:	881a      	ldrh	r2, [r3, #0]
 800b0f4:	8afb      	ldrh	r3, [r7, #22]
 800b0f6:	1ad3      	subs	r3, r2, r3
 800b0f8:	b29b      	uxth	r3, r3
 800b0fa:	3b08      	subs	r3, #8
 800b0fc:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800b0fe:	8bfa      	ldrh	r2, [r7, #30]
 800b100:	8abb      	ldrh	r3, [r7, #20]
 800b102:	429a      	cmp	r2, r3
 800b104:	d906      	bls.n	800b114 <mem_trim+0xa4>
 800b106:	4b52      	ldr	r3, [pc, #328]	; (800b250 <mem_trim+0x1e0>)
 800b108:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800b10c:	4953      	ldr	r1, [pc, #332]	; (800b25c <mem_trim+0x1ec>)
 800b10e:	4852      	ldr	r0, [pc, #328]	; (800b258 <mem_trim+0x1e8>)
 800b110:	f009 fa20 	bl	8014554 <iprintf>
  if (newsize > size) {
 800b114:	8bfa      	ldrh	r2, [r7, #30]
 800b116:	8abb      	ldrh	r3, [r7, #20]
 800b118:	429a      	cmp	r2, r3
 800b11a:	d901      	bls.n	800b120 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 800b11c:	2300      	movs	r3, #0
 800b11e:	e08f      	b.n	800b240 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 800b120:	8bfa      	ldrh	r2, [r7, #30]
 800b122:	8abb      	ldrh	r3, [r7, #20]
 800b124:	429a      	cmp	r2, r3
 800b126:	d101      	bne.n	800b12c <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	e089      	b.n	800b240 <mem_trim+0x1d0>
>>>>>>> Stashed changes
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
<<<<<<< Updated upstream
 800b15c:	69bb      	ldr	r3, [r7, #24]
 800b15e:	881b      	ldrh	r3, [r3, #0]
 800b160:	4618      	mov	r0, r3
 800b162:	f7ff fdf5 	bl	800ad50 <ptr_to_mem>
 800b166:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800b168:	693b      	ldr	r3, [r7, #16]
 800b16a:	791b      	ldrb	r3, [r3, #4]
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d13f      	bne.n	800b1f0 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800b170:	69bb      	ldr	r3, [r7, #24]
 800b172:	881b      	ldrh	r3, [r3, #0]
 800b174:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b178:	d106      	bne.n	800b188 <mem_trim+0xe8>
 800b17a:	4b41      	ldr	r3, [pc, #260]	; (800b280 <mem_trim+0x1e0>)
 800b17c:	f240 22f5 	movw	r2, #757	; 0x2f5
 800b180:	4943      	ldr	r1, [pc, #268]	; (800b290 <mem_trim+0x1f0>)
 800b182:	4841      	ldr	r0, [pc, #260]	; (800b288 <mem_trim+0x1e8>)
 800b184:	f009 f9fe 	bl	8014584 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800b188:	693b      	ldr	r3, [r7, #16]
 800b18a:	881b      	ldrh	r3, [r3, #0]
 800b18c:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800b18e:	8afa      	ldrh	r2, [r7, #22]
 800b190:	8bfb      	ldrh	r3, [r7, #30]
 800b192:	4413      	add	r3, r2
 800b194:	b29b      	uxth	r3, r3
 800b196:	3308      	adds	r3, #8
 800b198:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800b19a:	4b3e      	ldr	r3, [pc, #248]	; (800b294 <mem_trim+0x1f4>)
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	693a      	ldr	r2, [r7, #16]
 800b1a0:	429a      	cmp	r2, r3
 800b1a2:	d106      	bne.n	800b1b2 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 800b1a4:	89fb      	ldrh	r3, [r7, #14]
 800b1a6:	4618      	mov	r0, r3
 800b1a8:	f7ff fdd2 	bl	800ad50 <ptr_to_mem>
 800b1ac:	4603      	mov	r3, r0
 800b1ae:	4a39      	ldr	r2, [pc, #228]	; (800b294 <mem_trim+0x1f4>)
 800b1b0:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800b1b2:	89fb      	ldrh	r3, [r7, #14]
 800b1b4:	4618      	mov	r0, r3
 800b1b6:	f7ff fdcb 	bl	800ad50 <ptr_to_mem>
 800b1ba:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800b1bc:	693b      	ldr	r3, [r7, #16]
 800b1be:	2200      	movs	r2, #0
 800b1c0:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800b1c2:	693b      	ldr	r3, [r7, #16]
 800b1c4:	89ba      	ldrh	r2, [r7, #12]
 800b1c6:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800b1c8:	693b      	ldr	r3, [r7, #16]
 800b1ca:	8afa      	ldrh	r2, [r7, #22]
 800b1cc:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800b1ce:	69bb      	ldr	r3, [r7, #24]
 800b1d0:	89fa      	ldrh	r2, [r7, #14]
 800b1d2:	801a      	strh	r2, [r3, #0]
=======
 800b12c:	69bb      	ldr	r3, [r7, #24]
 800b12e:	881b      	ldrh	r3, [r3, #0]
 800b130:	4618      	mov	r0, r3
 800b132:	f7ff fdf5 	bl	800ad20 <ptr_to_mem>
 800b136:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800b138:	693b      	ldr	r3, [r7, #16]
 800b13a:	791b      	ldrb	r3, [r3, #4]
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d13f      	bne.n	800b1c0 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800b140:	69bb      	ldr	r3, [r7, #24]
 800b142:	881b      	ldrh	r3, [r3, #0]
 800b144:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b148:	d106      	bne.n	800b158 <mem_trim+0xe8>
 800b14a:	4b41      	ldr	r3, [pc, #260]	; (800b250 <mem_trim+0x1e0>)
 800b14c:	f240 22f5 	movw	r2, #757	; 0x2f5
 800b150:	4943      	ldr	r1, [pc, #268]	; (800b260 <mem_trim+0x1f0>)
 800b152:	4841      	ldr	r0, [pc, #260]	; (800b258 <mem_trim+0x1e8>)
 800b154:	f009 f9fe 	bl	8014554 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800b158:	693b      	ldr	r3, [r7, #16]
 800b15a:	881b      	ldrh	r3, [r3, #0]
 800b15c:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800b15e:	8afa      	ldrh	r2, [r7, #22]
 800b160:	8bfb      	ldrh	r3, [r7, #30]
 800b162:	4413      	add	r3, r2
 800b164:	b29b      	uxth	r3, r3
 800b166:	3308      	adds	r3, #8
 800b168:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800b16a:	4b3e      	ldr	r3, [pc, #248]	; (800b264 <mem_trim+0x1f4>)
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	693a      	ldr	r2, [r7, #16]
 800b170:	429a      	cmp	r2, r3
 800b172:	d106      	bne.n	800b182 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 800b174:	89fb      	ldrh	r3, [r7, #14]
 800b176:	4618      	mov	r0, r3
 800b178:	f7ff fdd2 	bl	800ad20 <ptr_to_mem>
 800b17c:	4603      	mov	r3, r0
 800b17e:	4a39      	ldr	r2, [pc, #228]	; (800b264 <mem_trim+0x1f4>)
 800b180:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800b182:	89fb      	ldrh	r3, [r7, #14]
 800b184:	4618      	mov	r0, r3
 800b186:	f7ff fdcb 	bl	800ad20 <ptr_to_mem>
 800b18a:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800b18c:	693b      	ldr	r3, [r7, #16]
 800b18e:	2200      	movs	r2, #0
 800b190:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800b192:	693b      	ldr	r3, [r7, #16]
 800b194:	89ba      	ldrh	r2, [r7, #12]
 800b196:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800b198:	693b      	ldr	r3, [r7, #16]
 800b19a:	8afa      	ldrh	r2, [r7, #22]
 800b19c:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800b19e:	69bb      	ldr	r3, [r7, #24]
 800b1a0:	89fa      	ldrh	r2, [r7, #14]
 800b1a2:	801a      	strh	r2, [r3, #0]
>>>>>>> Stashed changes
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
<<<<<<< Updated upstream
 800b1d4:	693b      	ldr	r3, [r7, #16]
 800b1d6:	881b      	ldrh	r3, [r3, #0]
 800b1d8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b1dc:	d047      	beq.n	800b26e <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800b1de:	693b      	ldr	r3, [r7, #16]
 800b1e0:	881b      	ldrh	r3, [r3, #0]
 800b1e2:	4618      	mov	r0, r3
 800b1e4:	f7ff fdb4 	bl	800ad50 <ptr_to_mem>
 800b1e8:	4602      	mov	r2, r0
 800b1ea:	89fb      	ldrh	r3, [r7, #14]
 800b1ec:	8053      	strh	r3, [r2, #2]
 800b1ee:	e03e      	b.n	800b26e <mem_trim+0x1ce>
=======
 800b1a4:	693b      	ldr	r3, [r7, #16]
 800b1a6:	881b      	ldrh	r3, [r3, #0]
 800b1a8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b1ac:	d047      	beq.n	800b23e <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800b1ae:	693b      	ldr	r3, [r7, #16]
 800b1b0:	881b      	ldrh	r3, [r3, #0]
 800b1b2:	4618      	mov	r0, r3
 800b1b4:	f7ff fdb4 	bl	800ad20 <ptr_to_mem>
 800b1b8:	4602      	mov	r2, r0
 800b1ba:	89fb      	ldrh	r3, [r7, #14]
 800b1bc:	8053      	strh	r3, [r2, #2]
 800b1be:	e03e      	b.n	800b23e <mem_trim+0x1ce>
>>>>>>> Stashed changes
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
<<<<<<< Updated upstream
 800b1f0:	8bfb      	ldrh	r3, [r7, #30]
 800b1f2:	f103 0214 	add.w	r2, r3, #20
 800b1f6:	8abb      	ldrh	r3, [r7, #20]
 800b1f8:	429a      	cmp	r2, r3
 800b1fa:	d838      	bhi.n	800b26e <mem_trim+0x1ce>
=======
 800b1c0:	8bfb      	ldrh	r3, [r7, #30]
 800b1c2:	f103 0214 	add.w	r2, r3, #20
 800b1c6:	8abb      	ldrh	r3, [r7, #20]
 800b1c8:	429a      	cmp	r2, r3
 800b1ca:	d838      	bhi.n	800b23e <mem_trim+0x1ce>
>>>>>>> Stashed changes
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
<<<<<<< Updated upstream
 800b1fc:	8afa      	ldrh	r2, [r7, #22]
 800b1fe:	8bfb      	ldrh	r3, [r7, #30]
 800b200:	4413      	add	r3, r2
 800b202:	b29b      	uxth	r3, r3
 800b204:	3308      	adds	r3, #8
 800b206:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800b208:	69bb      	ldr	r3, [r7, #24]
 800b20a:	881b      	ldrh	r3, [r3, #0]
 800b20c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b210:	d106      	bne.n	800b220 <mem_trim+0x180>
 800b212:	4b1b      	ldr	r3, [pc, #108]	; (800b280 <mem_trim+0x1e0>)
 800b214:	f240 3216 	movw	r2, #790	; 0x316
 800b218:	491d      	ldr	r1, [pc, #116]	; (800b290 <mem_trim+0x1f0>)
 800b21a:	481b      	ldr	r0, [pc, #108]	; (800b288 <mem_trim+0x1e8>)
 800b21c:	f009 f9b2 	bl	8014584 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800b220:	89fb      	ldrh	r3, [r7, #14]
 800b222:	4618      	mov	r0, r3
 800b224:	f7ff fd94 	bl	800ad50 <ptr_to_mem>
 800b228:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800b22a:	4b1a      	ldr	r3, [pc, #104]	; (800b294 <mem_trim+0x1f4>)
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	693a      	ldr	r2, [r7, #16]
 800b230:	429a      	cmp	r2, r3
 800b232:	d202      	bcs.n	800b23a <mem_trim+0x19a>
      lfree = mem2;
 800b234:	4a17      	ldr	r2, [pc, #92]	; (800b294 <mem_trim+0x1f4>)
 800b236:	693b      	ldr	r3, [r7, #16]
 800b238:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800b23a:	693b      	ldr	r3, [r7, #16]
 800b23c:	2200      	movs	r2, #0
 800b23e:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800b240:	69bb      	ldr	r3, [r7, #24]
 800b242:	881a      	ldrh	r2, [r3, #0]
 800b244:	693b      	ldr	r3, [r7, #16]
 800b246:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800b248:	693b      	ldr	r3, [r7, #16]
 800b24a:	8afa      	ldrh	r2, [r7, #22]
 800b24c:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800b24e:	69bb      	ldr	r3, [r7, #24]
 800b250:	89fa      	ldrh	r2, [r7, #14]
 800b252:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800b254:	693b      	ldr	r3, [r7, #16]
 800b256:	881b      	ldrh	r3, [r3, #0]
 800b258:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b25c:	d007      	beq.n	800b26e <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800b25e:	693b      	ldr	r3, [r7, #16]
 800b260:	881b      	ldrh	r3, [r3, #0]
 800b262:	4618      	mov	r0, r3
 800b264:	f7ff fd74 	bl	800ad50 <ptr_to_mem>
 800b268:	4602      	mov	r2, r0
 800b26a:	89fb      	ldrh	r3, [r7, #14]
 800b26c:	8053      	strh	r3, [r2, #2]
=======
 800b1cc:	8afa      	ldrh	r2, [r7, #22]
 800b1ce:	8bfb      	ldrh	r3, [r7, #30]
 800b1d0:	4413      	add	r3, r2
 800b1d2:	b29b      	uxth	r3, r3
 800b1d4:	3308      	adds	r3, #8
 800b1d6:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800b1d8:	69bb      	ldr	r3, [r7, #24]
 800b1da:	881b      	ldrh	r3, [r3, #0]
 800b1dc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b1e0:	d106      	bne.n	800b1f0 <mem_trim+0x180>
 800b1e2:	4b1b      	ldr	r3, [pc, #108]	; (800b250 <mem_trim+0x1e0>)
 800b1e4:	f240 3216 	movw	r2, #790	; 0x316
 800b1e8:	491d      	ldr	r1, [pc, #116]	; (800b260 <mem_trim+0x1f0>)
 800b1ea:	481b      	ldr	r0, [pc, #108]	; (800b258 <mem_trim+0x1e8>)
 800b1ec:	f009 f9b2 	bl	8014554 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800b1f0:	89fb      	ldrh	r3, [r7, #14]
 800b1f2:	4618      	mov	r0, r3
 800b1f4:	f7ff fd94 	bl	800ad20 <ptr_to_mem>
 800b1f8:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800b1fa:	4b1a      	ldr	r3, [pc, #104]	; (800b264 <mem_trim+0x1f4>)
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	693a      	ldr	r2, [r7, #16]
 800b200:	429a      	cmp	r2, r3
 800b202:	d202      	bcs.n	800b20a <mem_trim+0x19a>
      lfree = mem2;
 800b204:	4a17      	ldr	r2, [pc, #92]	; (800b264 <mem_trim+0x1f4>)
 800b206:	693b      	ldr	r3, [r7, #16]
 800b208:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800b20a:	693b      	ldr	r3, [r7, #16]
 800b20c:	2200      	movs	r2, #0
 800b20e:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800b210:	69bb      	ldr	r3, [r7, #24]
 800b212:	881a      	ldrh	r2, [r3, #0]
 800b214:	693b      	ldr	r3, [r7, #16]
 800b216:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800b218:	693b      	ldr	r3, [r7, #16]
 800b21a:	8afa      	ldrh	r2, [r7, #22]
 800b21c:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800b21e:	69bb      	ldr	r3, [r7, #24]
 800b220:	89fa      	ldrh	r2, [r7, #14]
 800b222:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800b224:	693b      	ldr	r3, [r7, #16]
 800b226:	881b      	ldrh	r3, [r3, #0]
 800b228:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b22c:	d007      	beq.n	800b23e <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800b22e:	693b      	ldr	r3, [r7, #16]
 800b230:	881b      	ldrh	r3, [r3, #0]
 800b232:	4618      	mov	r0, r3
 800b234:	f7ff fd74 	bl	800ad20 <ptr_to_mem>
 800b238:	4602      	mov	r2, r0
 800b23a:	89fb      	ldrh	r3, [r7, #14]
 800b23c:	8053      	strh	r3, [r2, #2]
>>>>>>> Stashed changes
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
<<<<<<< Updated upstream
 800b26e:	687b      	ldr	r3, [r7, #4]
}
 800b270:	4618      	mov	r0, r3
 800b272:	3720      	adds	r7, #32
 800b274:	46bd      	mov	sp, r7
 800b276:	bd80      	pop	{r7, pc}
 800b278:	200000b4 	.word	0x200000b4
 800b27c:	200000b8 	.word	0x200000b8
 800b280:	080159b0 	.word	0x080159b0
 800b284:	08015b20 	.word	0x08015b20
 800b288:	080159f8 	.word	0x080159f8
 800b28c:	08015b38 	.word	0x08015b38
 800b290:	08015b58 	.word	0x08015b58
 800b294:	200000bc 	.word	0x200000bc

0800b298 <mem_malloc>:
=======
 800b23e:	687b      	ldr	r3, [r7, #4]
}
 800b240:	4618      	mov	r0, r3
 800b242:	3720      	adds	r7, #32
 800b244:	46bd      	mov	sp, r7
 800b246:	bd80      	pop	{r7, pc}
 800b248:	200000b4 	.word	0x200000b4
 800b24c:	200000b8 	.word	0x200000b8
 800b250:	08015994 	.word	0x08015994
 800b254:	08015b04 	.word	0x08015b04
 800b258:	080159dc 	.word	0x080159dc
 800b25c:	08015b1c 	.word	0x08015b1c
 800b260:	08015b3c 	.word	0x08015b3c
 800b264:	200000bc 	.word	0x200000bc

0800b268 <mem_malloc>:
>>>>>>> Stashed changes
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
<<<<<<< Updated upstream
 800b298:	b580      	push	{r7, lr}
 800b29a:	b088      	sub	sp, #32
 800b29c:	af00      	add	r7, sp, #0
 800b29e:	4603      	mov	r3, r0
 800b2a0:	80fb      	strh	r3, [r7, #6]
=======
 800b268:	b580      	push	{r7, lr}
 800b26a:	b088      	sub	sp, #32
 800b26c:	af00      	add	r7, sp, #0
 800b26e:	4603      	mov	r3, r0
 800b270:	80fb      	strh	r3, [r7, #6]
>>>>>>> Stashed changes
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
<<<<<<< Updated upstream
 800b2a2:	88fb      	ldrh	r3, [r7, #6]
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d101      	bne.n	800b2ac <mem_malloc+0x14>
    return NULL;
 800b2a8:	2300      	movs	r3, #0
 800b2aa:	e0d9      	b.n	800b460 <mem_malloc+0x1c8>
=======
 800b272:	88fb      	ldrh	r3, [r7, #6]
 800b274:	2b00      	cmp	r3, #0
 800b276:	d101      	bne.n	800b27c <mem_malloc+0x14>
    return NULL;
 800b278:	2300      	movs	r3, #0
 800b27a:	e0d9      	b.n	800b430 <mem_malloc+0x1c8>
>>>>>>> Stashed changes
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
<<<<<<< Updated upstream
 800b2ac:	88fb      	ldrh	r3, [r7, #6]
 800b2ae:	3303      	adds	r3, #3
 800b2b0:	b29b      	uxth	r3, r3
 800b2b2:	f023 0303 	bic.w	r3, r3, #3
 800b2b6:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800b2b8:	8bbb      	ldrh	r3, [r7, #28]
 800b2ba:	2b0b      	cmp	r3, #11
 800b2bc:	d801      	bhi.n	800b2c2 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800b2be:	230c      	movs	r3, #12
 800b2c0:	83bb      	strh	r3, [r7, #28]
=======
 800b27c:	88fb      	ldrh	r3, [r7, #6]
 800b27e:	3303      	adds	r3, #3
 800b280:	b29b      	uxth	r3, r3
 800b282:	f023 0303 	bic.w	r3, r3, #3
 800b286:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800b288:	8bbb      	ldrh	r3, [r7, #28]
 800b28a:	2b0b      	cmp	r3, #11
 800b28c:	d801      	bhi.n	800b292 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800b28e:	230c      	movs	r3, #12
 800b290:	83bb      	strh	r3, [r7, #28]
>>>>>>> Stashed changes
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
<<<<<<< Updated upstream
 800b2c2:	8bbb      	ldrh	r3, [r7, #28]
 800b2c4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b2c8:	d803      	bhi.n	800b2d2 <mem_malloc+0x3a>
 800b2ca:	8bba      	ldrh	r2, [r7, #28]
 800b2cc:	88fb      	ldrh	r3, [r7, #6]
 800b2ce:	429a      	cmp	r2, r3
 800b2d0:	d201      	bcs.n	800b2d6 <mem_malloc+0x3e>
    return NULL;
 800b2d2:	2300      	movs	r3, #0
 800b2d4:	e0c4      	b.n	800b460 <mem_malloc+0x1c8>
=======
 800b292:	8bbb      	ldrh	r3, [r7, #28]
 800b294:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b298:	d803      	bhi.n	800b2a2 <mem_malloc+0x3a>
 800b29a:	8bba      	ldrh	r2, [r7, #28]
 800b29c:	88fb      	ldrh	r3, [r7, #6]
 800b29e:	429a      	cmp	r2, r3
 800b2a0:	d201      	bcs.n	800b2a6 <mem_malloc+0x3e>
    return NULL;
 800b2a2:	2300      	movs	r3, #0
 800b2a4:	e0c4      	b.n	800b430 <mem_malloc+0x1c8>
>>>>>>> Stashed changes
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
<<<<<<< Updated upstream
 800b2d6:	4b64      	ldr	r3, [pc, #400]	; (800b468 <mem_malloc+0x1d0>)
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	4618      	mov	r0, r3
 800b2dc:	f7ff fd4a 	bl	800ad74 <mem_to_ptr>
 800b2e0:	4603      	mov	r3, r0
 800b2e2:	83fb      	strh	r3, [r7, #30]
 800b2e4:	e0b4      	b.n	800b450 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800b2e6:	8bfb      	ldrh	r3, [r7, #30]
 800b2e8:	4618      	mov	r0, r3
 800b2ea:	f7ff fd31 	bl	800ad50 <ptr_to_mem>
 800b2ee:	6178      	str	r0, [r7, #20]
=======
 800b2a6:	4b64      	ldr	r3, [pc, #400]	; (800b438 <mem_malloc+0x1d0>)
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	4618      	mov	r0, r3
 800b2ac:	f7ff fd4a 	bl	800ad44 <mem_to_ptr>
 800b2b0:	4603      	mov	r3, r0
 800b2b2:	83fb      	strh	r3, [r7, #30]
 800b2b4:	e0b4      	b.n	800b420 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800b2b6:	8bfb      	ldrh	r3, [r7, #30]
 800b2b8:	4618      	mov	r0, r3
 800b2ba:	f7ff fd31 	bl	800ad20 <ptr_to_mem>
 800b2be:	6178      	str	r0, [r7, #20]
>>>>>>> Stashed changes
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
<<<<<<< Updated upstream
 800b2f0:	697b      	ldr	r3, [r7, #20]
 800b2f2:	791b      	ldrb	r3, [r3, #4]
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	f040 80a4 	bne.w	800b442 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800b2fa:	697b      	ldr	r3, [r7, #20]
 800b2fc:	881b      	ldrh	r3, [r3, #0]
 800b2fe:	461a      	mov	r2, r3
 800b300:	8bfb      	ldrh	r3, [r7, #30]
 800b302:	1ad3      	subs	r3, r2, r3
 800b304:	f1a3 0208 	sub.w	r2, r3, #8
 800b308:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800b30a:	429a      	cmp	r2, r3
 800b30c:	f0c0 8099 	bcc.w	800b442 <mem_malloc+0x1aa>
=======
 800b2c0:	697b      	ldr	r3, [r7, #20]
 800b2c2:	791b      	ldrb	r3, [r3, #4]
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	f040 80a4 	bne.w	800b412 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800b2ca:	697b      	ldr	r3, [r7, #20]
 800b2cc:	881b      	ldrh	r3, [r3, #0]
 800b2ce:	461a      	mov	r2, r3
 800b2d0:	8bfb      	ldrh	r3, [r7, #30]
 800b2d2:	1ad3      	subs	r3, r2, r3
 800b2d4:	f1a3 0208 	sub.w	r2, r3, #8
 800b2d8:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800b2da:	429a      	cmp	r2, r3
 800b2dc:	f0c0 8099 	bcc.w	800b412 <mem_malloc+0x1aa>
>>>>>>> Stashed changes
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
<<<<<<< Updated upstream
 800b310:	697b      	ldr	r3, [r7, #20]
 800b312:	881b      	ldrh	r3, [r3, #0]
 800b314:	461a      	mov	r2, r3
 800b316:	8bfb      	ldrh	r3, [r7, #30]
 800b318:	1ad3      	subs	r3, r2, r3
 800b31a:	f1a3 0208 	sub.w	r2, r3, #8
 800b31e:	8bbb      	ldrh	r3, [r7, #28]
 800b320:	3314      	adds	r3, #20
 800b322:	429a      	cmp	r2, r3
 800b324:	d333      	bcc.n	800b38e <mem_malloc+0xf6>
=======
 800b2e0:	697b      	ldr	r3, [r7, #20]
 800b2e2:	881b      	ldrh	r3, [r3, #0]
 800b2e4:	461a      	mov	r2, r3
 800b2e6:	8bfb      	ldrh	r3, [r7, #30]
 800b2e8:	1ad3      	subs	r3, r2, r3
 800b2ea:	f1a3 0208 	sub.w	r2, r3, #8
 800b2ee:	8bbb      	ldrh	r3, [r7, #28]
 800b2f0:	3314      	adds	r3, #20
 800b2f2:	429a      	cmp	r2, r3
 800b2f4:	d333      	bcc.n	800b35e <mem_malloc+0xf6>
>>>>>>> Stashed changes
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
<<<<<<< Updated upstream
 800b326:	8bfa      	ldrh	r2, [r7, #30]
 800b328:	8bbb      	ldrh	r3, [r7, #28]
 800b32a:	4413      	add	r3, r2
 800b32c:	b29b      	uxth	r3, r3
 800b32e:	3308      	adds	r3, #8
 800b330:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800b332:	8a7b      	ldrh	r3, [r7, #18]
 800b334:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b338:	d106      	bne.n	800b348 <mem_malloc+0xb0>
 800b33a:	4b4c      	ldr	r3, [pc, #304]	; (800b46c <mem_malloc+0x1d4>)
 800b33c:	f240 3287 	movw	r2, #903	; 0x387
 800b340:	494b      	ldr	r1, [pc, #300]	; (800b470 <mem_malloc+0x1d8>)
 800b342:	484c      	ldr	r0, [pc, #304]	; (800b474 <mem_malloc+0x1dc>)
 800b344:	f009 f91e 	bl	8014584 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800b348:	8a7b      	ldrh	r3, [r7, #18]
 800b34a:	4618      	mov	r0, r3
 800b34c:	f7ff fd00 	bl	800ad50 <ptr_to_mem>
 800b350:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	2200      	movs	r2, #0
 800b356:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800b358:	697b      	ldr	r3, [r7, #20]
 800b35a:	881a      	ldrh	r2, [r3, #0]
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	8bfa      	ldrh	r2, [r7, #30]
 800b364:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800b366:	697b      	ldr	r3, [r7, #20]
 800b368:	8a7a      	ldrh	r2, [r7, #18]
 800b36a:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800b36c:	697b      	ldr	r3, [r7, #20]
 800b36e:	2201      	movs	r2, #1
 800b370:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	881b      	ldrh	r3, [r3, #0]
 800b376:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b37a:	d00b      	beq.n	800b394 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	881b      	ldrh	r3, [r3, #0]
 800b380:	4618      	mov	r0, r3
 800b382:	f7ff fce5 	bl	800ad50 <ptr_to_mem>
 800b386:	4602      	mov	r2, r0
 800b388:	8a7b      	ldrh	r3, [r7, #18]
 800b38a:	8053      	strh	r3, [r2, #2]
 800b38c:	e002      	b.n	800b394 <mem_malloc+0xfc>
=======
 800b2f6:	8bfa      	ldrh	r2, [r7, #30]
 800b2f8:	8bbb      	ldrh	r3, [r7, #28]
 800b2fa:	4413      	add	r3, r2
 800b2fc:	b29b      	uxth	r3, r3
 800b2fe:	3308      	adds	r3, #8
 800b300:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800b302:	8a7b      	ldrh	r3, [r7, #18]
 800b304:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b308:	d106      	bne.n	800b318 <mem_malloc+0xb0>
 800b30a:	4b4c      	ldr	r3, [pc, #304]	; (800b43c <mem_malloc+0x1d4>)
 800b30c:	f240 3287 	movw	r2, #903	; 0x387
 800b310:	494b      	ldr	r1, [pc, #300]	; (800b440 <mem_malloc+0x1d8>)
 800b312:	484c      	ldr	r0, [pc, #304]	; (800b444 <mem_malloc+0x1dc>)
 800b314:	f009 f91e 	bl	8014554 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800b318:	8a7b      	ldrh	r3, [r7, #18]
 800b31a:	4618      	mov	r0, r3
 800b31c:	f7ff fd00 	bl	800ad20 <ptr_to_mem>
 800b320:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	2200      	movs	r2, #0
 800b326:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800b328:	697b      	ldr	r3, [r7, #20]
 800b32a:	881a      	ldrh	r2, [r3, #0]
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	8bfa      	ldrh	r2, [r7, #30]
 800b334:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800b336:	697b      	ldr	r3, [r7, #20]
 800b338:	8a7a      	ldrh	r2, [r7, #18]
 800b33a:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800b33c:	697b      	ldr	r3, [r7, #20]
 800b33e:	2201      	movs	r2, #1
 800b340:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	881b      	ldrh	r3, [r3, #0]
 800b346:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b34a:	d00b      	beq.n	800b364 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	881b      	ldrh	r3, [r3, #0]
 800b350:	4618      	mov	r0, r3
 800b352:	f7ff fce5 	bl	800ad20 <ptr_to_mem>
 800b356:	4602      	mov	r2, r0
 800b358:	8a7b      	ldrh	r3, [r7, #18]
 800b35a:	8053      	strh	r3, [r2, #2]
 800b35c:	e002      	b.n	800b364 <mem_malloc+0xfc>
>>>>>>> Stashed changes
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
<<<<<<< Updated upstream
 800b38e:	697b      	ldr	r3, [r7, #20]
 800b390:	2201      	movs	r2, #1
 800b392:	711a      	strb	r2, [r3, #4]
=======
 800b35e:	697b      	ldr	r3, [r7, #20]
 800b360:	2201      	movs	r2, #1
 800b362:	711a      	strb	r2, [r3, #4]
>>>>>>> Stashed changes
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
<<<<<<< Updated upstream
 800b394:	4b34      	ldr	r3, [pc, #208]	; (800b468 <mem_malloc+0x1d0>)
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	697a      	ldr	r2, [r7, #20]
 800b39a:	429a      	cmp	r2, r3
 800b39c:	d127      	bne.n	800b3ee <mem_malloc+0x156>
          struct mem *cur = lfree;
 800b39e:	4b32      	ldr	r3, [pc, #200]	; (800b468 <mem_malloc+0x1d0>)
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800b3a4:	e005      	b.n	800b3b2 <mem_malloc+0x11a>
=======
 800b364:	4b34      	ldr	r3, [pc, #208]	; (800b438 <mem_malloc+0x1d0>)
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	697a      	ldr	r2, [r7, #20]
 800b36a:	429a      	cmp	r2, r3
 800b36c:	d127      	bne.n	800b3be <mem_malloc+0x156>
          struct mem *cur = lfree;
 800b36e:	4b32      	ldr	r3, [pc, #200]	; (800b438 <mem_malloc+0x1d0>)
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800b374:	e005      	b.n	800b382 <mem_malloc+0x11a>
>>>>>>> Stashed changes
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
<<<<<<< Updated upstream
 800b3a6:	69bb      	ldr	r3, [r7, #24]
 800b3a8:	881b      	ldrh	r3, [r3, #0]
 800b3aa:	4618      	mov	r0, r3
 800b3ac:	f7ff fcd0 	bl	800ad50 <ptr_to_mem>
 800b3b0:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800b3b2:	69bb      	ldr	r3, [r7, #24]
 800b3b4:	791b      	ldrb	r3, [r3, #4]
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d004      	beq.n	800b3c4 <mem_malloc+0x12c>
 800b3ba:	4b2f      	ldr	r3, [pc, #188]	; (800b478 <mem_malloc+0x1e0>)
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	69ba      	ldr	r2, [r7, #24]
 800b3c0:	429a      	cmp	r2, r3
 800b3c2:	d1f0      	bne.n	800b3a6 <mem_malloc+0x10e>
          }
          lfree = cur;
 800b3c4:	4a28      	ldr	r2, [pc, #160]	; (800b468 <mem_malloc+0x1d0>)
 800b3c6:	69bb      	ldr	r3, [r7, #24]
 800b3c8:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800b3ca:	4b27      	ldr	r3, [pc, #156]	; (800b468 <mem_malloc+0x1d0>)
 800b3cc:	681a      	ldr	r2, [r3, #0]
 800b3ce:	4b2a      	ldr	r3, [pc, #168]	; (800b478 <mem_malloc+0x1e0>)
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	429a      	cmp	r2, r3
 800b3d4:	d00b      	beq.n	800b3ee <mem_malloc+0x156>
 800b3d6:	4b24      	ldr	r3, [pc, #144]	; (800b468 <mem_malloc+0x1d0>)
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	791b      	ldrb	r3, [r3, #4]
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d006      	beq.n	800b3ee <mem_malloc+0x156>
 800b3e0:	4b22      	ldr	r3, [pc, #136]	; (800b46c <mem_malloc+0x1d4>)
 800b3e2:	f240 32b5 	movw	r2, #949	; 0x3b5
 800b3e6:	4925      	ldr	r1, [pc, #148]	; (800b47c <mem_malloc+0x1e4>)
 800b3e8:	4822      	ldr	r0, [pc, #136]	; (800b474 <mem_malloc+0x1dc>)
 800b3ea:	f009 f8cb 	bl	8014584 <iprintf>
=======
 800b376:	69bb      	ldr	r3, [r7, #24]
 800b378:	881b      	ldrh	r3, [r3, #0]
 800b37a:	4618      	mov	r0, r3
 800b37c:	f7ff fcd0 	bl	800ad20 <ptr_to_mem>
 800b380:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800b382:	69bb      	ldr	r3, [r7, #24]
 800b384:	791b      	ldrb	r3, [r3, #4]
 800b386:	2b00      	cmp	r3, #0
 800b388:	d004      	beq.n	800b394 <mem_malloc+0x12c>
 800b38a:	4b2f      	ldr	r3, [pc, #188]	; (800b448 <mem_malloc+0x1e0>)
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	69ba      	ldr	r2, [r7, #24]
 800b390:	429a      	cmp	r2, r3
 800b392:	d1f0      	bne.n	800b376 <mem_malloc+0x10e>
          }
          lfree = cur;
 800b394:	4a28      	ldr	r2, [pc, #160]	; (800b438 <mem_malloc+0x1d0>)
 800b396:	69bb      	ldr	r3, [r7, #24]
 800b398:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800b39a:	4b27      	ldr	r3, [pc, #156]	; (800b438 <mem_malloc+0x1d0>)
 800b39c:	681a      	ldr	r2, [r3, #0]
 800b39e:	4b2a      	ldr	r3, [pc, #168]	; (800b448 <mem_malloc+0x1e0>)
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	429a      	cmp	r2, r3
 800b3a4:	d00b      	beq.n	800b3be <mem_malloc+0x156>
 800b3a6:	4b24      	ldr	r3, [pc, #144]	; (800b438 <mem_malloc+0x1d0>)
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	791b      	ldrb	r3, [r3, #4]
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d006      	beq.n	800b3be <mem_malloc+0x156>
 800b3b0:	4b22      	ldr	r3, [pc, #136]	; (800b43c <mem_malloc+0x1d4>)
 800b3b2:	f240 32b5 	movw	r2, #949	; 0x3b5
 800b3b6:	4925      	ldr	r1, [pc, #148]	; (800b44c <mem_malloc+0x1e4>)
 800b3b8:	4822      	ldr	r0, [pc, #136]	; (800b444 <mem_malloc+0x1dc>)
 800b3ba:	f009 f8cb 	bl	8014554 <iprintf>
>>>>>>> Stashed changes
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
<<<<<<< Updated upstream
 800b3ee:	8bba      	ldrh	r2, [r7, #28]
 800b3f0:	697b      	ldr	r3, [r7, #20]
 800b3f2:	4413      	add	r3, r2
 800b3f4:	3308      	adds	r3, #8
 800b3f6:	4a20      	ldr	r2, [pc, #128]	; (800b478 <mem_malloc+0x1e0>)
 800b3f8:	6812      	ldr	r2, [r2, #0]
 800b3fa:	4293      	cmp	r3, r2
 800b3fc:	d906      	bls.n	800b40c <mem_malloc+0x174>
 800b3fe:	4b1b      	ldr	r3, [pc, #108]	; (800b46c <mem_malloc+0x1d4>)
 800b400:	f240 32b9 	movw	r2, #953	; 0x3b9
 800b404:	491e      	ldr	r1, [pc, #120]	; (800b480 <mem_malloc+0x1e8>)
 800b406:	481b      	ldr	r0, [pc, #108]	; (800b474 <mem_malloc+0x1dc>)
 800b408:	f009 f8bc 	bl	8014584 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800b40c:	697b      	ldr	r3, [r7, #20]
 800b40e:	f003 0303 	and.w	r3, r3, #3
 800b412:	2b00      	cmp	r3, #0
 800b414:	d006      	beq.n	800b424 <mem_malloc+0x18c>
 800b416:	4b15      	ldr	r3, [pc, #84]	; (800b46c <mem_malloc+0x1d4>)
 800b418:	f240 32bb 	movw	r2, #955	; 0x3bb
 800b41c:	4919      	ldr	r1, [pc, #100]	; (800b484 <mem_malloc+0x1ec>)
 800b41e:	4815      	ldr	r0, [pc, #84]	; (800b474 <mem_malloc+0x1dc>)
 800b420:	f009 f8b0 	bl	8014584 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800b424:	697b      	ldr	r3, [r7, #20]
 800b426:	f003 0303 	and.w	r3, r3, #3
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d006      	beq.n	800b43c <mem_malloc+0x1a4>
 800b42e:	4b0f      	ldr	r3, [pc, #60]	; (800b46c <mem_malloc+0x1d4>)
 800b430:	f240 32bd 	movw	r2, #957	; 0x3bd
 800b434:	4914      	ldr	r1, [pc, #80]	; (800b488 <mem_malloc+0x1f0>)
 800b436:	480f      	ldr	r0, [pc, #60]	; (800b474 <mem_malloc+0x1dc>)
 800b438:	f009 f8a4 	bl	8014584 <iprintf>
=======
 800b3be:	8bba      	ldrh	r2, [r7, #28]
 800b3c0:	697b      	ldr	r3, [r7, #20]
 800b3c2:	4413      	add	r3, r2
 800b3c4:	3308      	adds	r3, #8
 800b3c6:	4a20      	ldr	r2, [pc, #128]	; (800b448 <mem_malloc+0x1e0>)
 800b3c8:	6812      	ldr	r2, [r2, #0]
 800b3ca:	4293      	cmp	r3, r2
 800b3cc:	d906      	bls.n	800b3dc <mem_malloc+0x174>
 800b3ce:	4b1b      	ldr	r3, [pc, #108]	; (800b43c <mem_malloc+0x1d4>)
 800b3d0:	f240 32b9 	movw	r2, #953	; 0x3b9
 800b3d4:	491e      	ldr	r1, [pc, #120]	; (800b450 <mem_malloc+0x1e8>)
 800b3d6:	481b      	ldr	r0, [pc, #108]	; (800b444 <mem_malloc+0x1dc>)
 800b3d8:	f009 f8bc 	bl	8014554 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800b3dc:	697b      	ldr	r3, [r7, #20]
 800b3de:	f003 0303 	and.w	r3, r3, #3
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d006      	beq.n	800b3f4 <mem_malloc+0x18c>
 800b3e6:	4b15      	ldr	r3, [pc, #84]	; (800b43c <mem_malloc+0x1d4>)
 800b3e8:	f240 32bb 	movw	r2, #955	; 0x3bb
 800b3ec:	4919      	ldr	r1, [pc, #100]	; (800b454 <mem_malloc+0x1ec>)
 800b3ee:	4815      	ldr	r0, [pc, #84]	; (800b444 <mem_malloc+0x1dc>)
 800b3f0:	f009 f8b0 	bl	8014554 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800b3f4:	697b      	ldr	r3, [r7, #20]
 800b3f6:	f003 0303 	and.w	r3, r3, #3
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d006      	beq.n	800b40c <mem_malloc+0x1a4>
 800b3fe:	4b0f      	ldr	r3, [pc, #60]	; (800b43c <mem_malloc+0x1d4>)
 800b400:	f240 32bd 	movw	r2, #957	; 0x3bd
 800b404:	4914      	ldr	r1, [pc, #80]	; (800b458 <mem_malloc+0x1f0>)
 800b406:	480f      	ldr	r0, [pc, #60]	; (800b444 <mem_malloc+0x1dc>)
 800b408:	f009 f8a4 	bl	8014554 <iprintf>
>>>>>>> Stashed changes

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
<<<<<<< Updated upstream
 800b43c:	697b      	ldr	r3, [r7, #20]
 800b43e:	3308      	adds	r3, #8
 800b440:	e00e      	b.n	800b460 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 800b442:	8bfb      	ldrh	r3, [r7, #30]
 800b444:	4618      	mov	r0, r3
 800b446:	f7ff fc83 	bl	800ad50 <ptr_to_mem>
 800b44a:	4603      	mov	r3, r0
 800b44c:	881b      	ldrh	r3, [r3, #0]
 800b44e:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800b450:	8bfa      	ldrh	r2, [r7, #30]
 800b452:	8bbb      	ldrh	r3, [r7, #28]
 800b454:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800b458:	429a      	cmp	r2, r3
 800b45a:	f4ff af44 	bcc.w	800b2e6 <mem_malloc+0x4e>
=======
 800b40c:	697b      	ldr	r3, [r7, #20]
 800b40e:	3308      	adds	r3, #8
 800b410:	e00e      	b.n	800b430 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 800b412:	8bfb      	ldrh	r3, [r7, #30]
 800b414:	4618      	mov	r0, r3
 800b416:	f7ff fc83 	bl	800ad20 <ptr_to_mem>
 800b41a:	4603      	mov	r3, r0
 800b41c:	881b      	ldrh	r3, [r3, #0]
 800b41e:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800b420:	8bfa      	ldrh	r2, [r7, #30]
 800b422:	8bbb      	ldrh	r3, [r7, #28]
 800b424:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800b428:	429a      	cmp	r2, r3
 800b42a:	f4ff af44 	bcc.w	800b2b6 <mem_malloc+0x4e>
>>>>>>> Stashed changes
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
<<<<<<< Updated upstream
 800b45e:	2300      	movs	r3, #0
}
 800b460:	4618      	mov	r0, r3
 800b462:	3720      	adds	r7, #32
 800b464:	46bd      	mov	sp, r7
 800b466:	bd80      	pop	{r7, pc}
 800b468:	200000bc 	.word	0x200000bc
 800b46c:	080159b0 	.word	0x080159b0
 800b470:	08015b58 	.word	0x08015b58
 800b474:	080159f8 	.word	0x080159f8
 800b478:	200000b8 	.word	0x200000b8
 800b47c:	08015b6c 	.word	0x08015b6c
 800b480:	08015b88 	.word	0x08015b88
 800b484:	08015bb8 	.word	0x08015bb8
 800b488:	08015be8 	.word	0x08015be8

0800b48c <memp_init_pool>:
=======
 800b42e:	2300      	movs	r3, #0
}
 800b430:	4618      	mov	r0, r3
 800b432:	3720      	adds	r7, #32
 800b434:	46bd      	mov	sp, r7
 800b436:	bd80      	pop	{r7, pc}
 800b438:	200000bc 	.word	0x200000bc
 800b43c:	08015994 	.word	0x08015994
 800b440:	08015b3c 	.word	0x08015b3c
 800b444:	080159dc 	.word	0x080159dc
 800b448:	200000b8 	.word	0x200000b8
 800b44c:	08015b50 	.word	0x08015b50
 800b450:	08015b6c 	.word	0x08015b6c
 800b454:	08015b9c 	.word	0x08015b9c
 800b458:	08015bcc 	.word	0x08015bcc

0800b45c <memp_init_pool>:
>>>>>>> Stashed changes
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
<<<<<<< Updated upstream
 800b48c:	b480      	push	{r7}
 800b48e:	b085      	sub	sp, #20
 800b490:	af00      	add	r7, sp, #0
 800b492:	6078      	str	r0, [r7, #4]
=======
 800b45c:	b480      	push	{r7}
 800b45e:	b085      	sub	sp, #20
 800b460:	af00      	add	r7, sp, #0
 800b462:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
<<<<<<< Updated upstream
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	689b      	ldr	r3, [r3, #8]
 800b498:	2200      	movs	r2, #0
 800b49a:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	685b      	ldr	r3, [r3, #4]
 800b4a0:	3303      	adds	r3, #3
 800b4a2:	f023 0303 	bic.w	r3, r3, #3
 800b4a6:	60bb      	str	r3, [r7, #8]
=======
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	689b      	ldr	r3, [r3, #8]
 800b468:	2200      	movs	r2, #0
 800b46a:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	685b      	ldr	r3, [r3, #4]
 800b470:	3303      	adds	r3, #3
 800b472:	f023 0303 	bic.w	r3, r3, #3
 800b476:	60bb      	str	r3, [r7, #8]
>>>>>>> Stashed changes
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
<<<<<<< Updated upstream
 800b4a8:	2300      	movs	r3, #0
 800b4aa:	60fb      	str	r3, [r7, #12]
 800b4ac:	e011      	b.n	800b4d2 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	689b      	ldr	r3, [r3, #8]
 800b4b2:	681a      	ldr	r2, [r3, #0]
 800b4b4:	68bb      	ldr	r3, [r7, #8]
 800b4b6:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	689b      	ldr	r3, [r3, #8]
 800b4bc:	68ba      	ldr	r2, [r7, #8]
 800b4be:	601a      	str	r2, [r3, #0]
=======
 800b478:	2300      	movs	r3, #0
 800b47a:	60fb      	str	r3, [r7, #12]
 800b47c:	e011      	b.n	800b4a2 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	689b      	ldr	r3, [r3, #8]
 800b482:	681a      	ldr	r2, [r3, #0]
 800b484:	68bb      	ldr	r3, [r7, #8]
 800b486:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	689b      	ldr	r3, [r3, #8]
 800b48c:	68ba      	ldr	r2, [r7, #8]
 800b48e:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
<<<<<<< Updated upstream
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	881b      	ldrh	r3, [r3, #0]
 800b4c4:	461a      	mov	r2, r3
 800b4c6:	68bb      	ldr	r3, [r7, #8]
 800b4c8:	4413      	add	r3, r2
 800b4ca:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	3301      	adds	r3, #1
 800b4d0:	60fb      	str	r3, [r7, #12]
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	885b      	ldrh	r3, [r3, #2]
 800b4d6:	461a      	mov	r2, r3
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	4293      	cmp	r3, r2
 800b4dc:	dbe7      	blt.n	800b4ae <memp_init_pool+0x22>
=======
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	881b      	ldrh	r3, [r3, #0]
 800b494:	461a      	mov	r2, r3
 800b496:	68bb      	ldr	r3, [r7, #8]
 800b498:	4413      	add	r3, r2
 800b49a:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	3301      	adds	r3, #1
 800b4a0:	60fb      	str	r3, [r7, #12]
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	885b      	ldrh	r3, [r3, #2]
 800b4a6:	461a      	mov	r2, r3
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	4293      	cmp	r3, r2
 800b4ac:	dbe7      	blt.n	800b47e <memp_init_pool+0x22>
>>>>>>> Stashed changes
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
<<<<<<< Updated upstream
 800b4de:	bf00      	nop
 800b4e0:	bf00      	nop
 800b4e2:	3714      	adds	r7, #20
 800b4e4:	46bd      	mov	sp, r7
 800b4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ea:	4770      	bx	lr

0800b4ec <memp_init>:
=======
 800b4ae:	bf00      	nop
 800b4b0:	bf00      	nop
 800b4b2:	3714      	adds	r7, #20
 800b4b4:	46bd      	mov	sp, r7
 800b4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ba:	4770      	bx	lr

0800b4bc <memp_init>:
>>>>>>> Stashed changes
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
<<<<<<< Updated upstream
 800b4ec:	b580      	push	{r7, lr}
 800b4ee:	b082      	sub	sp, #8
 800b4f0:	af00      	add	r7, sp, #0
=======
 800b4bc:	b580      	push	{r7, lr}
 800b4be:	b082      	sub	sp, #8
 800b4c0:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
<<<<<<< Updated upstream
 800b4f2:	2300      	movs	r3, #0
 800b4f4:	80fb      	strh	r3, [r7, #6]
 800b4f6:	e009      	b.n	800b50c <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800b4f8:	88fb      	ldrh	r3, [r7, #6]
 800b4fa:	4a08      	ldr	r2, [pc, #32]	; (800b51c <memp_init+0x30>)
 800b4fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b500:	4618      	mov	r0, r3
 800b502:	f7ff ffc3 	bl	800b48c <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800b506:	88fb      	ldrh	r3, [r7, #6]
 800b508:	3301      	adds	r3, #1
 800b50a:	80fb      	strh	r3, [r7, #6]
 800b50c:	88fb      	ldrh	r3, [r7, #6]
 800b50e:	2b08      	cmp	r3, #8
 800b510:	d9f2      	bls.n	800b4f8 <memp_init+0xc>
=======
 800b4c2:	2300      	movs	r3, #0
 800b4c4:	80fb      	strh	r3, [r7, #6]
 800b4c6:	e009      	b.n	800b4dc <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800b4c8:	88fb      	ldrh	r3, [r7, #6]
 800b4ca:	4a08      	ldr	r2, [pc, #32]	; (800b4ec <memp_init+0x30>)
 800b4cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b4d0:	4618      	mov	r0, r3
 800b4d2:	f7ff ffc3 	bl	800b45c <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800b4d6:	88fb      	ldrh	r3, [r7, #6]
 800b4d8:	3301      	adds	r3, #1
 800b4da:	80fb      	strh	r3, [r7, #6]
 800b4dc:	88fb      	ldrh	r3, [r7, #6]
 800b4de:	2b08      	cmp	r3, #8
 800b4e0:	d9f2      	bls.n	800b4c8 <memp_init+0xc>
>>>>>>> Stashed changes

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
<<<<<<< Updated upstream
 800b512:	bf00      	nop
 800b514:	bf00      	nop
 800b516:	3708      	adds	r7, #8
 800b518:	46bd      	mov	sp, r7
 800b51a:	bd80      	pop	{r7, pc}
 800b51c:	080183dc 	.word	0x080183dc

0800b520 <do_memp_malloc_pool>:
=======
 800b4e2:	bf00      	nop
 800b4e4:	bf00      	nop
 800b4e6:	3708      	adds	r7, #8
 800b4e8:	46bd      	mov	sp, r7
 800b4ea:	bd80      	pop	{r7, pc}
 800b4ec:	080183c0 	.word	0x080183c0

0800b4f0 <do_memp_malloc_pool>:
>>>>>>> Stashed changes
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
<<<<<<< Updated upstream
 800b520:	b580      	push	{r7, lr}
 800b522:	b084      	sub	sp, #16
 800b524:	af00      	add	r7, sp, #0
 800b526:	6078      	str	r0, [r7, #4]
=======
 800b4f0:	b580      	push	{r7, lr}
 800b4f2:	b084      	sub	sp, #16
 800b4f4:	af00      	add	r7, sp, #0
 800b4f6:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
<<<<<<< Updated upstream
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	689b      	ldr	r3, [r3, #8]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	2b00      	cmp	r3, #0
 800b534:	d012      	beq.n	800b55c <do_memp_malloc_pool+0x3c>
=======
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	689b      	ldr	r3, [r3, #8]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	2b00      	cmp	r3, #0
 800b504:	d012      	beq.n	800b52c <do_memp_malloc_pool+0x3c>
>>>>>>> Stashed changes
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
<<<<<<< Updated upstream
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	689b      	ldr	r3, [r3, #8]
 800b53a:	68fa      	ldr	r2, [r7, #12]
 800b53c:	6812      	ldr	r2, [r2, #0]
 800b53e:	601a      	str	r2, [r3, #0]
=======
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	689b      	ldr	r3, [r3, #8]
 800b50a:	68fa      	ldr	r2, [r7, #12]
 800b50c:	6812      	ldr	r2, [r2, #0]
 800b50e:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
<<<<<<< Updated upstream
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	f003 0303 	and.w	r3, r3, #3
 800b546:	2b00      	cmp	r3, #0
 800b548:	d006      	beq.n	800b558 <do_memp_malloc_pool+0x38>
 800b54a:	4b07      	ldr	r3, [pc, #28]	; (800b568 <do_memp_malloc_pool+0x48>)
 800b54c:	f44f 728c 	mov.w	r2, #280	; 0x118
 800b550:	4906      	ldr	r1, [pc, #24]	; (800b56c <do_memp_malloc_pool+0x4c>)
 800b552:	4807      	ldr	r0, [pc, #28]	; (800b570 <do_memp_malloc_pool+0x50>)
 800b554:	f009 f816 	bl	8014584 <iprintf>
=======
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	f003 0303 	and.w	r3, r3, #3
 800b516:	2b00      	cmp	r3, #0
 800b518:	d006      	beq.n	800b528 <do_memp_malloc_pool+0x38>
 800b51a:	4b07      	ldr	r3, [pc, #28]	; (800b538 <do_memp_malloc_pool+0x48>)
 800b51c:	f44f 728c 	mov.w	r2, #280	; 0x118
 800b520:	4906      	ldr	r1, [pc, #24]	; (800b53c <do_memp_malloc_pool+0x4c>)
 800b522:	4807      	ldr	r0, [pc, #28]	; (800b540 <do_memp_malloc_pool+0x50>)
 800b524:	f009 f816 	bl	8014554 <iprintf>
>>>>>>> Stashed changes
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
<<<<<<< Updated upstream
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	e000      	b.n	800b55e <do_memp_malloc_pool+0x3e>
=======
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	e000      	b.n	800b52e <do_memp_malloc_pool+0x3e>
>>>>>>> Stashed changes
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
<<<<<<< Updated upstream
 800b55c:	2300      	movs	r3, #0
}
 800b55e:	4618      	mov	r0, r3
 800b560:	3710      	adds	r7, #16
 800b562:	46bd      	mov	sp, r7
 800b564:	bd80      	pop	{r7, pc}
 800b566:	bf00      	nop
 800b568:	08015c0c 	.word	0x08015c0c
 800b56c:	08015c3c 	.word	0x08015c3c
 800b570:	08015c60 	.word	0x08015c60

0800b574 <memp_malloc>:
=======
 800b52c:	2300      	movs	r3, #0
}
 800b52e:	4618      	mov	r0, r3
 800b530:	3710      	adds	r7, #16
 800b532:	46bd      	mov	sp, r7
 800b534:	bd80      	pop	{r7, pc}
 800b536:	bf00      	nop
 800b538:	08015bf0 	.word	0x08015bf0
 800b53c:	08015c20 	.word	0x08015c20
 800b540:	08015c44 	.word	0x08015c44

0800b544 <memp_malloc>:
>>>>>>> Stashed changes
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
<<<<<<< Updated upstream
 800b574:	b580      	push	{r7, lr}
 800b576:	b084      	sub	sp, #16
 800b578:	af00      	add	r7, sp, #0
 800b57a:	4603      	mov	r3, r0
 800b57c:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800b57e:	79fb      	ldrb	r3, [r7, #7]
 800b580:	2b08      	cmp	r3, #8
 800b582:	d908      	bls.n	800b596 <memp_malloc+0x22>
 800b584:	4b0a      	ldr	r3, [pc, #40]	; (800b5b0 <memp_malloc+0x3c>)
 800b586:	f240 1257 	movw	r2, #343	; 0x157
 800b58a:	490a      	ldr	r1, [pc, #40]	; (800b5b4 <memp_malloc+0x40>)
 800b58c:	480a      	ldr	r0, [pc, #40]	; (800b5b8 <memp_malloc+0x44>)
 800b58e:	f008 fff9 	bl	8014584 <iprintf>
 800b592:	2300      	movs	r3, #0
 800b594:	e008      	b.n	800b5a8 <memp_malloc+0x34>
=======
 800b544:	b580      	push	{r7, lr}
 800b546:	b084      	sub	sp, #16
 800b548:	af00      	add	r7, sp, #0
 800b54a:	4603      	mov	r3, r0
 800b54c:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800b54e:	79fb      	ldrb	r3, [r7, #7]
 800b550:	2b08      	cmp	r3, #8
 800b552:	d908      	bls.n	800b566 <memp_malloc+0x22>
 800b554:	4b0a      	ldr	r3, [pc, #40]	; (800b580 <memp_malloc+0x3c>)
 800b556:	f240 1257 	movw	r2, #343	; 0x157
 800b55a:	490a      	ldr	r1, [pc, #40]	; (800b584 <memp_malloc+0x40>)
 800b55c:	480a      	ldr	r0, [pc, #40]	; (800b588 <memp_malloc+0x44>)
 800b55e:	f008 fff9 	bl	8014554 <iprintf>
 800b562:	2300      	movs	r3, #0
 800b564:	e008      	b.n	800b578 <memp_malloc+0x34>
>>>>>>> Stashed changes
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
<<<<<<< Updated upstream
 800b596:	79fb      	ldrb	r3, [r7, #7]
 800b598:	4a08      	ldr	r2, [pc, #32]	; (800b5bc <memp_malloc+0x48>)
 800b59a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b59e:	4618      	mov	r0, r3
 800b5a0:	f7ff ffbe 	bl	800b520 <do_memp_malloc_pool>
 800b5a4:	60f8      	str	r0, [r7, #12]
=======
 800b566:	79fb      	ldrb	r3, [r7, #7]
 800b568:	4a08      	ldr	r2, [pc, #32]	; (800b58c <memp_malloc+0x48>)
 800b56a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b56e:	4618      	mov	r0, r3
 800b570:	f7ff ffbe 	bl	800b4f0 <do_memp_malloc_pool>
 800b574:	60f8      	str	r0, [r7, #12]
>>>>>>> Stashed changes
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
<<<<<<< Updated upstream
 800b5a6:	68fb      	ldr	r3, [r7, #12]
}
 800b5a8:	4618      	mov	r0, r3
 800b5aa:	3710      	adds	r7, #16
 800b5ac:	46bd      	mov	sp, r7
 800b5ae:	bd80      	pop	{r7, pc}
 800b5b0:	08015c0c 	.word	0x08015c0c
 800b5b4:	08015c9c 	.word	0x08015c9c
 800b5b8:	08015c60 	.word	0x08015c60
 800b5bc:	080183dc 	.word	0x080183dc

0800b5c0 <do_memp_free_pool>:
=======
 800b576:	68fb      	ldr	r3, [r7, #12]
}
 800b578:	4618      	mov	r0, r3
 800b57a:	3710      	adds	r7, #16
 800b57c:	46bd      	mov	sp, r7
 800b57e:	bd80      	pop	{r7, pc}
 800b580:	08015bf0 	.word	0x08015bf0
 800b584:	08015c80 	.word	0x08015c80
 800b588:	08015c44 	.word	0x08015c44
 800b58c:	080183c0 	.word	0x080183c0

0800b590 <do_memp_free_pool>:
>>>>>>> Stashed changes

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
<<<<<<< Updated upstream
 800b5c0:	b580      	push	{r7, lr}
 800b5c2:	b084      	sub	sp, #16
 800b5c4:	af00      	add	r7, sp, #0
 800b5c6:	6078      	str	r0, [r7, #4]
 800b5c8:	6039      	str	r1, [r7, #0]
=======
 800b590:	b580      	push	{r7, lr}
 800b592:	b084      	sub	sp, #16
 800b594:	af00      	add	r7, sp, #0
 800b596:	6078      	str	r0, [r7, #4]
 800b598:	6039      	str	r1, [r7, #0]
>>>>>>> Stashed changes
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
<<<<<<< Updated upstream
 800b5ca:	683b      	ldr	r3, [r7, #0]
 800b5cc:	f003 0303 	and.w	r3, r3, #3
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d006      	beq.n	800b5e2 <do_memp_free_pool+0x22>
 800b5d4:	4b0a      	ldr	r3, [pc, #40]	; (800b600 <do_memp_free_pool+0x40>)
 800b5d6:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800b5da:	490a      	ldr	r1, [pc, #40]	; (800b604 <do_memp_free_pool+0x44>)
 800b5dc:	480a      	ldr	r0, [pc, #40]	; (800b608 <do_memp_free_pool+0x48>)
 800b5de:	f008 ffd1 	bl	8014584 <iprintf>
=======
 800b59a:	683b      	ldr	r3, [r7, #0]
 800b59c:	f003 0303 	and.w	r3, r3, #3
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d006      	beq.n	800b5b2 <do_memp_free_pool+0x22>
 800b5a4:	4b0a      	ldr	r3, [pc, #40]	; (800b5d0 <do_memp_free_pool+0x40>)
 800b5a6:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800b5aa:	490a      	ldr	r1, [pc, #40]	; (800b5d4 <do_memp_free_pool+0x44>)
 800b5ac:	480a      	ldr	r0, [pc, #40]	; (800b5d8 <do_memp_free_pool+0x48>)
 800b5ae:	f008 ffd1 	bl	8014554 <iprintf>
>>>>>>> Stashed changes
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
<<<<<<< Updated upstream
 800b5e2:	683b      	ldr	r3, [r7, #0]
 800b5e4:	60fb      	str	r3, [r7, #12]
=======
 800b5b2:	683b      	ldr	r3, [r7, #0]
 800b5b4:	60fb      	str	r3, [r7, #12]
>>>>>>> Stashed changes
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
<<<<<<< Updated upstream
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	689b      	ldr	r3, [r3, #8]
 800b5ea:	681a      	ldr	r2, [r3, #0]
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	689b      	ldr	r3, [r3, #8]
 800b5f4:	68fa      	ldr	r2, [r7, #12]
 800b5f6:	601a      	str	r2, [r3, #0]
=======
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	689b      	ldr	r3, [r3, #8]
 800b5ba:	681a      	ldr	r2, [r3, #0]
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	689b      	ldr	r3, [r3, #8]
 800b5c4:	68fa      	ldr	r2, [r7, #12]
 800b5c6:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
<<<<<<< Updated upstream
 800b5f8:	bf00      	nop
 800b5fa:	3710      	adds	r7, #16
 800b5fc:	46bd      	mov	sp, r7
 800b5fe:	bd80      	pop	{r7, pc}
 800b600:	08015c0c 	.word	0x08015c0c
 800b604:	08015cbc 	.word	0x08015cbc
 800b608:	08015c60 	.word	0x08015c60

0800b60c <memp_free>:
=======
 800b5c8:	bf00      	nop
 800b5ca:	3710      	adds	r7, #16
 800b5cc:	46bd      	mov	sp, r7
 800b5ce:	bd80      	pop	{r7, pc}
 800b5d0:	08015bf0 	.word	0x08015bf0
 800b5d4:	08015ca0 	.word	0x08015ca0
 800b5d8:	08015c44 	.word	0x08015c44

0800b5dc <memp_free>:
>>>>>>> Stashed changes
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
<<<<<<< Updated upstream
 800b60c:	b580      	push	{r7, lr}
 800b60e:	b082      	sub	sp, #8
 800b610:	af00      	add	r7, sp, #0
 800b612:	4603      	mov	r3, r0
 800b614:	6039      	str	r1, [r7, #0]
 800b616:	71fb      	strb	r3, [r7, #7]
=======
 800b5dc:	b580      	push	{r7, lr}
 800b5de:	b082      	sub	sp, #8
 800b5e0:	af00      	add	r7, sp, #0
 800b5e2:	4603      	mov	r3, r0
 800b5e4:	6039      	str	r1, [r7, #0]
 800b5e6:	71fb      	strb	r3, [r7, #7]
>>>>>>> Stashed changes
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
<<<<<<< Updated upstream
 800b618:	79fb      	ldrb	r3, [r7, #7]
 800b61a:	2b08      	cmp	r3, #8
 800b61c:	d907      	bls.n	800b62e <memp_free+0x22>
 800b61e:	4b0c      	ldr	r3, [pc, #48]	; (800b650 <memp_free+0x44>)
 800b620:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800b624:	490b      	ldr	r1, [pc, #44]	; (800b654 <memp_free+0x48>)
 800b626:	480c      	ldr	r0, [pc, #48]	; (800b658 <memp_free+0x4c>)
 800b628:	f008 ffac 	bl	8014584 <iprintf>
 800b62c:	e00c      	b.n	800b648 <memp_free+0x3c>

  if (mem == NULL) {
 800b62e:	683b      	ldr	r3, [r7, #0]
 800b630:	2b00      	cmp	r3, #0
 800b632:	d008      	beq.n	800b646 <memp_free+0x3a>
=======
 800b5e8:	79fb      	ldrb	r3, [r7, #7]
 800b5ea:	2b08      	cmp	r3, #8
 800b5ec:	d907      	bls.n	800b5fe <memp_free+0x22>
 800b5ee:	4b0c      	ldr	r3, [pc, #48]	; (800b620 <memp_free+0x44>)
 800b5f0:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800b5f4:	490b      	ldr	r1, [pc, #44]	; (800b624 <memp_free+0x48>)
 800b5f6:	480c      	ldr	r0, [pc, #48]	; (800b628 <memp_free+0x4c>)
 800b5f8:	f008 ffac 	bl	8014554 <iprintf>
 800b5fc:	e00c      	b.n	800b618 <memp_free+0x3c>

  if (mem == NULL) {
 800b5fe:	683b      	ldr	r3, [r7, #0]
 800b600:	2b00      	cmp	r3, #0
 800b602:	d008      	beq.n	800b616 <memp_free+0x3a>
>>>>>>> Stashed changes

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
<<<<<<< Updated upstream
 800b634:	79fb      	ldrb	r3, [r7, #7]
 800b636:	4a09      	ldr	r2, [pc, #36]	; (800b65c <memp_free+0x50>)
 800b638:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b63c:	6839      	ldr	r1, [r7, #0]
 800b63e:	4618      	mov	r0, r3
 800b640:	f7ff ffbe 	bl	800b5c0 <do_memp_free_pool>
 800b644:	e000      	b.n	800b648 <memp_free+0x3c>
    return;
 800b646:	bf00      	nop
=======
 800b604:	79fb      	ldrb	r3, [r7, #7]
 800b606:	4a09      	ldr	r2, [pc, #36]	; (800b62c <memp_free+0x50>)
 800b608:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b60c:	6839      	ldr	r1, [r7, #0]
 800b60e:	4618      	mov	r0, r3
 800b610:	f7ff ffbe 	bl	800b590 <do_memp_free_pool>
 800b614:	e000      	b.n	800b618 <memp_free+0x3c>
    return;
 800b616:	bf00      	nop
>>>>>>> Stashed changes
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
<<<<<<< Updated upstream
 800b648:	3708      	adds	r7, #8
 800b64a:	46bd      	mov	sp, r7
 800b64c:	bd80      	pop	{r7, pc}
 800b64e:	bf00      	nop
 800b650:	08015c0c 	.word	0x08015c0c
 800b654:	08015cdc 	.word	0x08015cdc
 800b658:	08015c60 	.word	0x08015c60
 800b65c:	080183dc 	.word	0x080183dc

0800b660 <netif_init>:
=======
 800b618:	3708      	adds	r7, #8
 800b61a:	46bd      	mov	sp, r7
 800b61c:	bd80      	pop	{r7, pc}
 800b61e:	bf00      	nop
 800b620:	08015bf0 	.word	0x08015bf0
 800b624:	08015cc0 	.word	0x08015cc0
 800b628:	08015c44 	.word	0x08015c44
 800b62c:	080183c0 	.word	0x080183c0

0800b630 <netif_init>:
>>>>>>> Stashed changes
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
<<<<<<< Updated upstream
 800b660:	b480      	push	{r7}
 800b662:	af00      	add	r7, sp, #0
=======
 800b630:	b480      	push	{r7}
 800b632:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
<<<<<<< Updated upstream
 800b664:	bf00      	nop
 800b666:	46bd      	mov	sp, r7
 800b668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b66c:	4770      	bx	lr
	...

0800b670 <netif_add>:
=======
 800b634:	bf00      	nop
 800b636:	46bd      	mov	sp, r7
 800b638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b63c:	4770      	bx	lr
	...

0800b640 <netif_add>:
>>>>>>> Stashed changes
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
<<<<<<< Updated upstream
 800b670:	b580      	push	{r7, lr}
 800b672:	b086      	sub	sp, #24
 800b674:	af00      	add	r7, sp, #0
 800b676:	60f8      	str	r0, [r7, #12]
 800b678:	60b9      	str	r1, [r7, #8]
 800b67a:	607a      	str	r2, [r7, #4]
 800b67c:	603b      	str	r3, [r7, #0]
=======
 800b640:	b580      	push	{r7, lr}
 800b642:	b086      	sub	sp, #24
 800b644:	af00      	add	r7, sp, #0
 800b646:	60f8      	str	r0, [r7, #12]
 800b648:	60b9      	str	r1, [r7, #8]
 800b64a:	607a      	str	r2, [r7, #4]
 800b64c:	603b      	str	r3, [r7, #0]
>>>>>>> Stashed changes
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
<<<<<<< Updated upstream
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	2b00      	cmp	r3, #0
 800b682:	d108      	bne.n	800b696 <netif_add+0x26>
 800b684:	4b57      	ldr	r3, [pc, #348]	; (800b7e4 <netif_add+0x174>)
 800b686:	f240 1227 	movw	r2, #295	; 0x127
 800b68a:	4957      	ldr	r1, [pc, #348]	; (800b7e8 <netif_add+0x178>)
 800b68c:	4857      	ldr	r0, [pc, #348]	; (800b7ec <netif_add+0x17c>)
 800b68e:	f008 ff79 	bl	8014584 <iprintf>
 800b692:	2300      	movs	r3, #0
 800b694:	e0a2      	b.n	800b7dc <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800b696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d108      	bne.n	800b6ae <netif_add+0x3e>
 800b69c:	4b51      	ldr	r3, [pc, #324]	; (800b7e4 <netif_add+0x174>)
 800b69e:	f44f 7294 	mov.w	r2, #296	; 0x128
 800b6a2:	4953      	ldr	r1, [pc, #332]	; (800b7f0 <netif_add+0x180>)
 800b6a4:	4851      	ldr	r0, [pc, #324]	; (800b7ec <netif_add+0x17c>)
 800b6a6:	f008 ff6d 	bl	8014584 <iprintf>
 800b6aa:	2300      	movs	r3, #0
 800b6ac:	e096      	b.n	800b7dc <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800b6ae:	68bb      	ldr	r3, [r7, #8]
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d101      	bne.n	800b6b8 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800b6b4:	4b4f      	ldr	r3, [pc, #316]	; (800b7f4 <netif_add+0x184>)
 800b6b6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d101      	bne.n	800b6c2 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800b6be:	4b4d      	ldr	r3, [pc, #308]	; (800b7f4 <netif_add+0x184>)
 800b6c0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800b6c2:	683b      	ldr	r3, [r7, #0]
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d101      	bne.n	800b6cc <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800b6c8:	4b4a      	ldr	r3, [pc, #296]	; (800b7f4 <netif_add+0x184>)
 800b6ca:	603b      	str	r3, [r7, #0]
=======
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	2b00      	cmp	r3, #0
 800b652:	d108      	bne.n	800b666 <netif_add+0x26>
 800b654:	4b57      	ldr	r3, [pc, #348]	; (800b7b4 <netif_add+0x174>)
 800b656:	f240 1227 	movw	r2, #295	; 0x127
 800b65a:	4957      	ldr	r1, [pc, #348]	; (800b7b8 <netif_add+0x178>)
 800b65c:	4857      	ldr	r0, [pc, #348]	; (800b7bc <netif_add+0x17c>)
 800b65e:	f008 ff79 	bl	8014554 <iprintf>
 800b662:	2300      	movs	r3, #0
 800b664:	e0a2      	b.n	800b7ac <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800b666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d108      	bne.n	800b67e <netif_add+0x3e>
 800b66c:	4b51      	ldr	r3, [pc, #324]	; (800b7b4 <netif_add+0x174>)
 800b66e:	f44f 7294 	mov.w	r2, #296	; 0x128
 800b672:	4953      	ldr	r1, [pc, #332]	; (800b7c0 <netif_add+0x180>)
 800b674:	4851      	ldr	r0, [pc, #324]	; (800b7bc <netif_add+0x17c>)
 800b676:	f008 ff6d 	bl	8014554 <iprintf>
 800b67a:	2300      	movs	r3, #0
 800b67c:	e096      	b.n	800b7ac <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800b67e:	68bb      	ldr	r3, [r7, #8]
 800b680:	2b00      	cmp	r3, #0
 800b682:	d101      	bne.n	800b688 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800b684:	4b4f      	ldr	r3, [pc, #316]	; (800b7c4 <netif_add+0x184>)
 800b686:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d101      	bne.n	800b692 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800b68e:	4b4d      	ldr	r3, [pc, #308]	; (800b7c4 <netif_add+0x184>)
 800b690:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800b692:	683b      	ldr	r3, [r7, #0]
 800b694:	2b00      	cmp	r3, #0
 800b696:	d101      	bne.n	800b69c <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800b698:	4b4a      	ldr	r3, [pc, #296]	; (800b7c4 <netif_add+0x184>)
 800b69a:	603b      	str	r3, [r7, #0]
>>>>>>> Stashed changes
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
<<<<<<< Updated upstream
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	2200      	movs	r2, #0
 800b6d0:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	2200      	movs	r2, #0
 800b6d6:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	2200      	movs	r2, #0
 800b6dc:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	4a45      	ldr	r2, [pc, #276]	; (800b7f8 <netif_add+0x188>)
 800b6e2:	615a      	str	r2, [r3, #20]
=======
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	2200      	movs	r2, #0
 800b6a0:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	2200      	movs	r2, #0
 800b6a6:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	2200      	movs	r2, #0
 800b6ac:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	4a45      	ldr	r2, [pc, #276]	; (800b7c8 <netif_add+0x188>)
 800b6b2:	615a      	str	r2, [r3, #20]
>>>>>>> Stashed changes
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
<<<<<<< Updated upstream
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	2200      	movs	r2, #0
 800b6e8:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	2200      	movs	r2, #0
 800b6ee:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
=======
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	2200      	movs	r2, #0
 800b6b8:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	2200      	movs	r2, #0
 800b6be:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
>>>>>>> Stashed changes
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
<<<<<<< Updated upstream
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	2200      	movs	r2, #0
 800b6f6:	61da      	str	r2, [r3, #28]
=======
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	2200      	movs	r2, #0
 800b6c6:	61da      	str	r2, [r3, #28]
>>>>>>> Stashed changes
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
<<<<<<< Updated upstream
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	6a3a      	ldr	r2, [r7, #32]
 800b6fc:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800b6fe:	4b3f      	ldr	r3, [pc, #252]	; (800b7fc <netif_add+0x18c>)
 800b700:	781a      	ldrb	r2, [r3, #0]
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b70c:	611a      	str	r2, [r3, #16]
=======
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	6a3a      	ldr	r2, [r7, #32]
 800b6cc:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800b6ce:	4b3f      	ldr	r3, [pc, #252]	; (800b7cc <netif_add+0x18c>)
 800b6d0:	781a      	ldrb	r2, [r3, #0]
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b6dc:	611a      	str	r2, [r3, #16]
>>>>>>> Stashed changes
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
<<<<<<< Updated upstream
 800b70e:	683b      	ldr	r3, [r7, #0]
 800b710:	687a      	ldr	r2, [r7, #4]
 800b712:	68b9      	ldr	r1, [r7, #8]
 800b714:	68f8      	ldr	r0, [r7, #12]
 800b716:	f000 f913 	bl	800b940 <netif_set_addr>
=======
 800b6de:	683b      	ldr	r3, [r7, #0]
 800b6e0:	687a      	ldr	r2, [r7, #4]
 800b6e2:	68b9      	ldr	r1, [r7, #8]
 800b6e4:	68f8      	ldr	r0, [r7, #12]
 800b6e6:	f000 f913 	bl	800b910 <netif_set_addr>
>>>>>>> Stashed changes
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
<<<<<<< Updated upstream
 800b71a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b71c:	68f8      	ldr	r0, [r7, #12]
 800b71e:	4798      	blx	r3
 800b720:	4603      	mov	r3, r0
 800b722:	2b00      	cmp	r3, #0
 800b724:	d001      	beq.n	800b72a <netif_add+0xba>
    return NULL;
 800b726:	2300      	movs	r3, #0
 800b728:	e058      	b.n	800b7dc <netif_add+0x16c>
=======
 800b6ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6ec:	68f8      	ldr	r0, [r7, #12]
 800b6ee:	4798      	blx	r3
 800b6f0:	4603      	mov	r3, r0
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d001      	beq.n	800b6fa <netif_add+0xba>
    return NULL;
 800b6f6:	2300      	movs	r3, #0
 800b6f8:	e058      	b.n	800b7ac <netif_add+0x16c>
>>>>>>> Stashed changes
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
<<<<<<< Updated upstream
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b730:	2bff      	cmp	r3, #255	; 0xff
 800b732:	d103      	bne.n	800b73c <netif_add+0xcc>
        netif->num = 0;
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	2200      	movs	r2, #0
 800b738:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800b73c:	2300      	movs	r3, #0
 800b73e:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800b740:	4b2f      	ldr	r3, [pc, #188]	; (800b800 <netif_add+0x190>)
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	617b      	str	r3, [r7, #20]
 800b746:	e02b      	b.n	800b7a0 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800b748:	697a      	ldr	r2, [r7, #20]
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	429a      	cmp	r2, r3
 800b74e:	d106      	bne.n	800b75e <netif_add+0xee>
 800b750:	4b24      	ldr	r3, [pc, #144]	; (800b7e4 <netif_add+0x174>)
 800b752:	f240 128b 	movw	r2, #395	; 0x18b
 800b756:	492b      	ldr	r1, [pc, #172]	; (800b804 <netif_add+0x194>)
 800b758:	4824      	ldr	r0, [pc, #144]	; (800b7ec <netif_add+0x17c>)
 800b75a:	f008 ff13 	bl	8014584 <iprintf>
        num_netifs++;
 800b75e:	693b      	ldr	r3, [r7, #16]
 800b760:	3301      	adds	r3, #1
 800b762:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800b764:	693b      	ldr	r3, [r7, #16]
 800b766:	2bff      	cmp	r3, #255	; 0xff
 800b768:	dd06      	ble.n	800b778 <netif_add+0x108>
 800b76a:	4b1e      	ldr	r3, [pc, #120]	; (800b7e4 <netif_add+0x174>)
 800b76c:	f240 128d 	movw	r2, #397	; 0x18d
 800b770:	4925      	ldr	r1, [pc, #148]	; (800b808 <netif_add+0x198>)
 800b772:	481e      	ldr	r0, [pc, #120]	; (800b7ec <netif_add+0x17c>)
 800b774:	f008 ff06 	bl	8014584 <iprintf>
        if (netif2->num == netif->num) {
 800b778:	697b      	ldr	r3, [r7, #20]
 800b77a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b784:	429a      	cmp	r2, r3
 800b786:	d108      	bne.n	800b79a <netif_add+0x12a>
          netif->num++;
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b78e:	3301      	adds	r3, #1
 800b790:	b2da      	uxtb	r2, r3
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800b798:	e005      	b.n	800b7a6 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800b79a:	697b      	ldr	r3, [r7, #20]
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	617b      	str	r3, [r7, #20]
 800b7a0:	697b      	ldr	r3, [r7, #20]
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d1d0      	bne.n	800b748 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800b7a6:	697b      	ldr	r3, [r7, #20]
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d1be      	bne.n	800b72a <netif_add+0xba>
  }
  if (netif->num == 254) {
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b7b2:	2bfe      	cmp	r3, #254	; 0xfe
 800b7b4:	d103      	bne.n	800b7be <netif_add+0x14e>
    netif_num = 0;
 800b7b6:	4b11      	ldr	r3, [pc, #68]	; (800b7fc <netif_add+0x18c>)
 800b7b8:	2200      	movs	r2, #0
 800b7ba:	701a      	strb	r2, [r3, #0]
 800b7bc:	e006      	b.n	800b7cc <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b7c4:	3301      	adds	r3, #1
 800b7c6:	b2da      	uxtb	r2, r3
 800b7c8:	4b0c      	ldr	r3, [pc, #48]	; (800b7fc <netif_add+0x18c>)
 800b7ca:	701a      	strb	r2, [r3, #0]
=======
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b700:	2bff      	cmp	r3, #255	; 0xff
 800b702:	d103      	bne.n	800b70c <netif_add+0xcc>
        netif->num = 0;
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	2200      	movs	r2, #0
 800b708:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800b70c:	2300      	movs	r3, #0
 800b70e:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800b710:	4b2f      	ldr	r3, [pc, #188]	; (800b7d0 <netif_add+0x190>)
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	617b      	str	r3, [r7, #20]
 800b716:	e02b      	b.n	800b770 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800b718:	697a      	ldr	r2, [r7, #20]
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	429a      	cmp	r2, r3
 800b71e:	d106      	bne.n	800b72e <netif_add+0xee>
 800b720:	4b24      	ldr	r3, [pc, #144]	; (800b7b4 <netif_add+0x174>)
 800b722:	f240 128b 	movw	r2, #395	; 0x18b
 800b726:	492b      	ldr	r1, [pc, #172]	; (800b7d4 <netif_add+0x194>)
 800b728:	4824      	ldr	r0, [pc, #144]	; (800b7bc <netif_add+0x17c>)
 800b72a:	f008 ff13 	bl	8014554 <iprintf>
        num_netifs++;
 800b72e:	693b      	ldr	r3, [r7, #16]
 800b730:	3301      	adds	r3, #1
 800b732:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800b734:	693b      	ldr	r3, [r7, #16]
 800b736:	2bff      	cmp	r3, #255	; 0xff
 800b738:	dd06      	ble.n	800b748 <netif_add+0x108>
 800b73a:	4b1e      	ldr	r3, [pc, #120]	; (800b7b4 <netif_add+0x174>)
 800b73c:	f240 128d 	movw	r2, #397	; 0x18d
 800b740:	4925      	ldr	r1, [pc, #148]	; (800b7d8 <netif_add+0x198>)
 800b742:	481e      	ldr	r0, [pc, #120]	; (800b7bc <netif_add+0x17c>)
 800b744:	f008 ff06 	bl	8014554 <iprintf>
        if (netif2->num == netif->num) {
 800b748:	697b      	ldr	r3, [r7, #20]
 800b74a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b754:	429a      	cmp	r2, r3
 800b756:	d108      	bne.n	800b76a <netif_add+0x12a>
          netif->num++;
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b75e:	3301      	adds	r3, #1
 800b760:	b2da      	uxtb	r2, r3
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800b768:	e005      	b.n	800b776 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800b76a:	697b      	ldr	r3, [r7, #20]
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	617b      	str	r3, [r7, #20]
 800b770:	697b      	ldr	r3, [r7, #20]
 800b772:	2b00      	cmp	r3, #0
 800b774:	d1d0      	bne.n	800b718 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800b776:	697b      	ldr	r3, [r7, #20]
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d1be      	bne.n	800b6fa <netif_add+0xba>
  }
  if (netif->num == 254) {
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b782:	2bfe      	cmp	r3, #254	; 0xfe
 800b784:	d103      	bne.n	800b78e <netif_add+0x14e>
    netif_num = 0;
 800b786:	4b11      	ldr	r3, [pc, #68]	; (800b7cc <netif_add+0x18c>)
 800b788:	2200      	movs	r2, #0
 800b78a:	701a      	strb	r2, [r3, #0]
 800b78c:	e006      	b.n	800b79c <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b794:	3301      	adds	r3, #1
 800b796:	b2da      	uxtb	r2, r3
 800b798:	4b0c      	ldr	r3, [pc, #48]	; (800b7cc <netif_add+0x18c>)
 800b79a:	701a      	strb	r2, [r3, #0]
>>>>>>> Stashed changes
  }

  /* add this netif to the list */
  netif->next = netif_list;
<<<<<<< Updated upstream
 800b7cc:	4b0c      	ldr	r3, [pc, #48]	; (800b800 <netif_add+0x190>)
 800b7ce:	681a      	ldr	r2, [r3, #0]
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800b7d4:	4a0a      	ldr	r2, [pc, #40]	; (800b800 <netif_add+0x190>)
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	6013      	str	r3, [r2, #0]
=======
 800b79c:	4b0c      	ldr	r3, [pc, #48]	; (800b7d0 <netif_add+0x190>)
 800b79e:	681a      	ldr	r2, [r3, #0]
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800b7a4:	4a0a      	ldr	r2, [pc, #40]	; (800b7d0 <netif_add+0x190>)
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
<<<<<<< Updated upstream
 800b7da:	68fb      	ldr	r3, [r7, #12]
}
 800b7dc:	4618      	mov	r0, r3
 800b7de:	3718      	adds	r7, #24
 800b7e0:	46bd      	mov	sp, r7
 800b7e2:	bd80      	pop	{r7, pc}
 800b7e4:	08015cf8 	.word	0x08015cf8
 800b7e8:	08015d8c 	.word	0x08015d8c
 800b7ec:	08015d48 	.word	0x08015d48
 800b7f0:	08015da8 	.word	0x08015da8
 800b7f4:	08018440 	.word	0x08018440
 800b7f8:	0800bb53 	.word	0x0800bb53
 800b7fc:	200000e4 	.word	0x200000e4
 800b800:	20007290 	.word	0x20007290
 800b804:	08015dcc 	.word	0x08015dcc
 800b808:	08015de0 	.word	0x08015de0

0800b80c <netif_do_ip_addr_changed>:
=======
 800b7aa:	68fb      	ldr	r3, [r7, #12]
}
 800b7ac:	4618      	mov	r0, r3
 800b7ae:	3718      	adds	r7, #24
 800b7b0:	46bd      	mov	sp, r7
 800b7b2:	bd80      	pop	{r7, pc}
 800b7b4:	08015cdc 	.word	0x08015cdc
 800b7b8:	08015d70 	.word	0x08015d70
 800b7bc:	08015d2c 	.word	0x08015d2c
 800b7c0:	08015d8c 	.word	0x08015d8c
 800b7c4:	08018424 	.word	0x08018424
 800b7c8:	0800bb23 	.word	0x0800bb23
 800b7cc:	200000e4 	.word	0x200000e4
 800b7d0:	20007290 	.word	0x20007290
 800b7d4:	08015db0 	.word	0x08015db0
 800b7d8:	08015dc4 	.word	0x08015dc4

0800b7dc <netif_do_ip_addr_changed>:
>>>>>>> Stashed changes

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
<<<<<<< Updated upstream
 800b80c:	b580      	push	{r7, lr}
 800b80e:	b082      	sub	sp, #8
 800b810:	af00      	add	r7, sp, #0
 800b812:	6078      	str	r0, [r7, #4]
 800b814:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800b816:	6839      	ldr	r1, [r7, #0]
 800b818:	6878      	ldr	r0, [r7, #4]
 800b81a:	f002 fabf 	bl	800dd9c <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800b81e:	6839      	ldr	r1, [r7, #0]
 800b820:	6878      	ldr	r0, [r7, #4]
 800b822:	f006 fb5d 	bl	8011ee0 <udp_netif_ip_addr_changed>
=======
 800b7dc:	b580      	push	{r7, lr}
 800b7de:	b082      	sub	sp, #8
 800b7e0:	af00      	add	r7, sp, #0
 800b7e2:	6078      	str	r0, [r7, #4]
 800b7e4:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800b7e6:	6839      	ldr	r1, [r7, #0]
 800b7e8:	6878      	ldr	r0, [r7, #4]
 800b7ea:	f002 fabf 	bl	800dd6c <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800b7ee:	6839      	ldr	r1, [r7, #0]
 800b7f0:	6878      	ldr	r0, [r7, #4]
 800b7f2:	f006 fb5d 	bl	8011eb0 <udp_netif_ip_addr_changed>
>>>>>>> Stashed changes
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
<<<<<<< Updated upstream
 800b826:	bf00      	nop
 800b828:	3708      	adds	r7, #8
 800b82a:	46bd      	mov	sp, r7
 800b82c:	bd80      	pop	{r7, pc}
	...

0800b830 <netif_do_set_ipaddr>:
=======
 800b7f6:	bf00      	nop
 800b7f8:	3708      	adds	r7, #8
 800b7fa:	46bd      	mov	sp, r7
 800b7fc:	bd80      	pop	{r7, pc}
	...

0800b800 <netif_do_set_ipaddr>:
>>>>>>> Stashed changes

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
<<<<<<< Updated upstream
 800b830:	b580      	push	{r7, lr}
 800b832:	b086      	sub	sp, #24
 800b834:	af00      	add	r7, sp, #0
 800b836:	60f8      	str	r0, [r7, #12]
 800b838:	60b9      	str	r1, [r7, #8]
 800b83a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800b83c:	68bb      	ldr	r3, [r7, #8]
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d106      	bne.n	800b850 <netif_do_set_ipaddr+0x20>
 800b842:	4b1d      	ldr	r3, [pc, #116]	; (800b8b8 <netif_do_set_ipaddr+0x88>)
 800b844:	f240 12cb 	movw	r2, #459	; 0x1cb
 800b848:	491c      	ldr	r1, [pc, #112]	; (800b8bc <netif_do_set_ipaddr+0x8c>)
 800b84a:	481d      	ldr	r0, [pc, #116]	; (800b8c0 <netif_do_set_ipaddr+0x90>)
 800b84c:	f008 fe9a 	bl	8014584 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	2b00      	cmp	r3, #0
 800b854:	d106      	bne.n	800b864 <netif_do_set_ipaddr+0x34>
 800b856:	4b18      	ldr	r3, [pc, #96]	; (800b8b8 <netif_do_set_ipaddr+0x88>)
 800b858:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800b85c:	4917      	ldr	r1, [pc, #92]	; (800b8bc <netif_do_set_ipaddr+0x8c>)
 800b85e:	4818      	ldr	r0, [pc, #96]	; (800b8c0 <netif_do_set_ipaddr+0x90>)
 800b860:	f008 fe90 	bl	8014584 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800b864:	68bb      	ldr	r3, [r7, #8]
 800b866:	681a      	ldr	r2, [r3, #0]
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	3304      	adds	r3, #4
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	429a      	cmp	r2, r3
 800b870:	d01c      	beq.n	800b8ac <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800b872:	68bb      	ldr	r3, [r7, #8]
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	3304      	adds	r3, #4
 800b87c:	681a      	ldr	r2, [r3, #0]
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800b882:	f107 0314 	add.w	r3, r7, #20
 800b886:	4619      	mov	r1, r3
 800b888:	6878      	ldr	r0, [r7, #4]
 800b88a:	f7ff ffbf 	bl	800b80c <netif_do_ip_addr_changed>
=======
 800b800:	b580      	push	{r7, lr}
 800b802:	b086      	sub	sp, #24
 800b804:	af00      	add	r7, sp, #0
 800b806:	60f8      	str	r0, [r7, #12]
 800b808:	60b9      	str	r1, [r7, #8]
 800b80a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800b80c:	68bb      	ldr	r3, [r7, #8]
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d106      	bne.n	800b820 <netif_do_set_ipaddr+0x20>
 800b812:	4b1d      	ldr	r3, [pc, #116]	; (800b888 <netif_do_set_ipaddr+0x88>)
 800b814:	f240 12cb 	movw	r2, #459	; 0x1cb
 800b818:	491c      	ldr	r1, [pc, #112]	; (800b88c <netif_do_set_ipaddr+0x8c>)
 800b81a:	481d      	ldr	r0, [pc, #116]	; (800b890 <netif_do_set_ipaddr+0x90>)
 800b81c:	f008 fe9a 	bl	8014554 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	2b00      	cmp	r3, #0
 800b824:	d106      	bne.n	800b834 <netif_do_set_ipaddr+0x34>
 800b826:	4b18      	ldr	r3, [pc, #96]	; (800b888 <netif_do_set_ipaddr+0x88>)
 800b828:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800b82c:	4917      	ldr	r1, [pc, #92]	; (800b88c <netif_do_set_ipaddr+0x8c>)
 800b82e:	4818      	ldr	r0, [pc, #96]	; (800b890 <netif_do_set_ipaddr+0x90>)
 800b830:	f008 fe90 	bl	8014554 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800b834:	68bb      	ldr	r3, [r7, #8]
 800b836:	681a      	ldr	r2, [r3, #0]
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	3304      	adds	r3, #4
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	429a      	cmp	r2, r3
 800b840:	d01c      	beq.n	800b87c <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800b842:	68bb      	ldr	r3, [r7, #8]
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	3304      	adds	r3, #4
 800b84c:	681a      	ldr	r2, [r3, #0]
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800b852:	f107 0314 	add.w	r3, r7, #20
 800b856:	4619      	mov	r1, r3
 800b858:	6878      	ldr	r0, [r7, #4]
 800b85a:	f7ff ffbf 	bl	800b7dc <netif_do_ip_addr_changed>
>>>>>>> Stashed changes

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
<<<<<<< Updated upstream
 800b88e:	68bb      	ldr	r3, [r7, #8]
 800b890:	2b00      	cmp	r3, #0
 800b892:	d002      	beq.n	800b89a <netif_do_set_ipaddr+0x6a>
 800b894:	68bb      	ldr	r3, [r7, #8]
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	e000      	b.n	800b89c <netif_do_set_ipaddr+0x6c>
 800b89a:	2300      	movs	r3, #0
 800b89c:	68fa      	ldr	r2, [r7, #12]
 800b89e:	6053      	str	r3, [r2, #4]
=======
 800b85e:	68bb      	ldr	r3, [r7, #8]
 800b860:	2b00      	cmp	r3, #0
 800b862:	d002      	beq.n	800b86a <netif_do_set_ipaddr+0x6a>
 800b864:	68bb      	ldr	r3, [r7, #8]
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	e000      	b.n	800b86c <netif_do_set_ipaddr+0x6c>
 800b86a:	2300      	movs	r3, #0
 800b86c:	68fa      	ldr	r2, [r7, #12]
 800b86e:	6053      	str	r3, [r2, #4]
>>>>>>> Stashed changes
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
<<<<<<< Updated upstream
 800b8a0:	2101      	movs	r1, #1
 800b8a2:	68f8      	ldr	r0, [r7, #12]
 800b8a4:	f000 f8d2 	bl	800ba4c <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800b8a8:	2301      	movs	r3, #1
 800b8aa:	e000      	b.n	800b8ae <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800b8ac:	2300      	movs	r3, #0
}
 800b8ae:	4618      	mov	r0, r3
 800b8b0:	3718      	adds	r7, #24
 800b8b2:	46bd      	mov	sp, r7
 800b8b4:	bd80      	pop	{r7, pc}
 800b8b6:	bf00      	nop
 800b8b8:	08015cf8 	.word	0x08015cf8
 800b8bc:	08015e10 	.word	0x08015e10
 800b8c0:	08015d48 	.word	0x08015d48

0800b8c4 <netif_do_set_netmask>:
=======
 800b870:	2101      	movs	r1, #1
 800b872:	68f8      	ldr	r0, [r7, #12]
 800b874:	f000 f8d2 	bl	800ba1c <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800b878:	2301      	movs	r3, #1
 800b87a:	e000      	b.n	800b87e <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800b87c:	2300      	movs	r3, #0
}
 800b87e:	4618      	mov	r0, r3
 800b880:	3718      	adds	r7, #24
 800b882:	46bd      	mov	sp, r7
 800b884:	bd80      	pop	{r7, pc}
 800b886:	bf00      	nop
 800b888:	08015cdc 	.word	0x08015cdc
 800b88c:	08015df4 	.word	0x08015df4
 800b890:	08015d2c 	.word	0x08015d2c

0800b894 <netif_do_set_netmask>:
>>>>>>> Stashed changes
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
<<<<<<< Updated upstream
 800b8c4:	b480      	push	{r7}
 800b8c6:	b085      	sub	sp, #20
 800b8c8:	af00      	add	r7, sp, #0
 800b8ca:	60f8      	str	r0, [r7, #12]
 800b8cc:	60b9      	str	r1, [r7, #8]
 800b8ce:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800b8d0:	68bb      	ldr	r3, [r7, #8]
 800b8d2:	681a      	ldr	r2, [r3, #0]
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	3308      	adds	r3, #8
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	429a      	cmp	r2, r3
 800b8dc:	d00a      	beq.n	800b8f4 <netif_do_set_netmask+0x30>
=======
 800b894:	b480      	push	{r7}
 800b896:	b085      	sub	sp, #20
 800b898:	af00      	add	r7, sp, #0
 800b89a:	60f8      	str	r0, [r7, #12]
 800b89c:	60b9      	str	r1, [r7, #8]
 800b89e:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800b8a0:	68bb      	ldr	r3, [r7, #8]
 800b8a2:	681a      	ldr	r2, [r3, #0]
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	3308      	adds	r3, #8
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	429a      	cmp	r2, r3
 800b8ac:	d00a      	beq.n	800b8c4 <netif_do_set_netmask+0x30>
>>>>>>> Stashed changes
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
<<<<<<< Updated upstream
 800b8de:	68bb      	ldr	r3, [r7, #8]
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d002      	beq.n	800b8ea <netif_do_set_netmask+0x26>
 800b8e4:	68bb      	ldr	r3, [r7, #8]
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	e000      	b.n	800b8ec <netif_do_set_netmask+0x28>
 800b8ea:	2300      	movs	r3, #0
 800b8ec:	68fa      	ldr	r2, [r7, #12]
 800b8ee:	6093      	str	r3, [r2, #8]
=======
 800b8ae:	68bb      	ldr	r3, [r7, #8]
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d002      	beq.n	800b8ba <netif_do_set_netmask+0x26>
 800b8b4:	68bb      	ldr	r3, [r7, #8]
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	e000      	b.n	800b8bc <netif_do_set_netmask+0x28>
 800b8ba:	2300      	movs	r3, #0
 800b8bc:	68fa      	ldr	r2, [r7, #12]
 800b8be:	6093      	str	r3, [r2, #8]
>>>>>>> Stashed changes
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
<<<<<<< Updated upstream
 800b8f0:	2301      	movs	r3, #1
 800b8f2:	e000      	b.n	800b8f6 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800b8f4:	2300      	movs	r3, #0
}
 800b8f6:	4618      	mov	r0, r3
 800b8f8:	3714      	adds	r7, #20
 800b8fa:	46bd      	mov	sp, r7
 800b8fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b900:	4770      	bx	lr

0800b902 <netif_do_set_gw>:
=======
 800b8c0:	2301      	movs	r3, #1
 800b8c2:	e000      	b.n	800b8c6 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800b8c4:	2300      	movs	r3, #0
}
 800b8c6:	4618      	mov	r0, r3
 800b8c8:	3714      	adds	r7, #20
 800b8ca:	46bd      	mov	sp, r7
 800b8cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8d0:	4770      	bx	lr

0800b8d2 <netif_do_set_gw>:
>>>>>>> Stashed changes
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
<<<<<<< Updated upstream
 800b902:	b480      	push	{r7}
 800b904:	b085      	sub	sp, #20
 800b906:	af00      	add	r7, sp, #0
 800b908:	60f8      	str	r0, [r7, #12]
 800b90a:	60b9      	str	r1, [r7, #8]
 800b90c:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800b90e:	68bb      	ldr	r3, [r7, #8]
 800b910:	681a      	ldr	r2, [r3, #0]
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	330c      	adds	r3, #12
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	429a      	cmp	r2, r3
 800b91a:	d00a      	beq.n	800b932 <netif_do_set_gw+0x30>
=======
 800b8d2:	b480      	push	{r7}
 800b8d4:	b085      	sub	sp, #20
 800b8d6:	af00      	add	r7, sp, #0
 800b8d8:	60f8      	str	r0, [r7, #12]
 800b8da:	60b9      	str	r1, [r7, #8]
 800b8dc:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800b8de:	68bb      	ldr	r3, [r7, #8]
 800b8e0:	681a      	ldr	r2, [r3, #0]
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	330c      	adds	r3, #12
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	429a      	cmp	r2, r3
 800b8ea:	d00a      	beq.n	800b902 <netif_do_set_gw+0x30>
>>>>>>> Stashed changes
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
<<<<<<< Updated upstream
 800b91c:	68bb      	ldr	r3, [r7, #8]
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d002      	beq.n	800b928 <netif_do_set_gw+0x26>
 800b922:	68bb      	ldr	r3, [r7, #8]
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	e000      	b.n	800b92a <netif_do_set_gw+0x28>
 800b928:	2300      	movs	r3, #0
 800b92a:	68fa      	ldr	r2, [r7, #12]
 800b92c:	60d3      	str	r3, [r2, #12]
=======
 800b8ec:	68bb      	ldr	r3, [r7, #8]
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d002      	beq.n	800b8f8 <netif_do_set_gw+0x26>
 800b8f2:	68bb      	ldr	r3, [r7, #8]
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	e000      	b.n	800b8fa <netif_do_set_gw+0x28>
 800b8f8:	2300      	movs	r3, #0
 800b8fa:	68fa      	ldr	r2, [r7, #12]
 800b8fc:	60d3      	str	r3, [r2, #12]
>>>>>>> Stashed changes
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
<<<<<<< Updated upstream
 800b92e:	2301      	movs	r3, #1
 800b930:	e000      	b.n	800b934 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800b932:	2300      	movs	r3, #0
}
 800b934:	4618      	mov	r0, r3
 800b936:	3714      	adds	r7, #20
 800b938:	46bd      	mov	sp, r7
 800b93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b93e:	4770      	bx	lr

0800b940 <netif_set_addr>:
=======
 800b8fe:	2301      	movs	r3, #1
 800b900:	e000      	b.n	800b904 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800b902:	2300      	movs	r3, #0
}
 800b904:	4618      	mov	r0, r3
 800b906:	3714      	adds	r7, #20
 800b908:	46bd      	mov	sp, r7
 800b90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b90e:	4770      	bx	lr

0800b910 <netif_set_addr>:
>>>>>>> Stashed changes
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
<<<<<<< Updated upstream
 800b940:	b580      	push	{r7, lr}
 800b942:	b088      	sub	sp, #32
 800b944:	af00      	add	r7, sp, #0
 800b946:	60f8      	str	r0, [r7, #12]
 800b948:	60b9      	str	r1, [r7, #8]
 800b94a:	607a      	str	r2, [r7, #4]
 800b94c:	603b      	str	r3, [r7, #0]
=======
 800b910:	b580      	push	{r7, lr}
 800b912:	b088      	sub	sp, #32
 800b914:	af00      	add	r7, sp, #0
 800b916:	60f8      	str	r0, [r7, #12]
 800b918:	60b9      	str	r1, [r7, #8]
 800b91a:	607a      	str	r2, [r7, #4]
 800b91c:	603b      	str	r3, [r7, #0]
>>>>>>> Stashed changes
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
<<<<<<< Updated upstream
 800b94e:	2300      	movs	r3, #0
 800b950:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800b952:	2300      	movs	r3, #0
 800b954:	61bb      	str	r3, [r7, #24]
=======
 800b91e:	2300      	movs	r3, #0
 800b920:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800b922:	2300      	movs	r3, #0
 800b924:	61bb      	str	r3, [r7, #24]
>>>>>>> Stashed changes
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
<<<<<<< Updated upstream
 800b956:	68bb      	ldr	r3, [r7, #8]
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d101      	bne.n	800b960 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800b95c:	4b1c      	ldr	r3, [pc, #112]	; (800b9d0 <netif_set_addr+0x90>)
 800b95e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	2b00      	cmp	r3, #0
 800b964:	d101      	bne.n	800b96a <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800b966:	4b1a      	ldr	r3, [pc, #104]	; (800b9d0 <netif_set_addr+0x90>)
 800b968:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800b96a:	683b      	ldr	r3, [r7, #0]
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d101      	bne.n	800b974 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800b970:	4b17      	ldr	r3, [pc, #92]	; (800b9d0 <netif_set_addr+0x90>)
 800b972:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800b974:	68bb      	ldr	r3, [r7, #8]
 800b976:	2b00      	cmp	r3, #0
 800b978:	d003      	beq.n	800b982 <netif_set_addr+0x42>
 800b97a:	68bb      	ldr	r3, [r7, #8]
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d101      	bne.n	800b986 <netif_set_addr+0x46>
 800b982:	2301      	movs	r3, #1
 800b984:	e000      	b.n	800b988 <netif_set_addr+0x48>
 800b986:	2300      	movs	r3, #0
 800b988:	617b      	str	r3, [r7, #20]
  if (remove) {
 800b98a:	697b      	ldr	r3, [r7, #20]
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d006      	beq.n	800b99e <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800b990:	f107 0310 	add.w	r3, r7, #16
 800b994:	461a      	mov	r2, r3
 800b996:	68b9      	ldr	r1, [r7, #8]
 800b998:	68f8      	ldr	r0, [r7, #12]
 800b99a:	f7ff ff49 	bl	800b830 <netif_do_set_ipaddr>
=======
 800b926:	68bb      	ldr	r3, [r7, #8]
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d101      	bne.n	800b930 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800b92c:	4b1c      	ldr	r3, [pc, #112]	; (800b9a0 <netif_set_addr+0x90>)
 800b92e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	2b00      	cmp	r3, #0
 800b934:	d101      	bne.n	800b93a <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800b936:	4b1a      	ldr	r3, [pc, #104]	; (800b9a0 <netif_set_addr+0x90>)
 800b938:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800b93a:	683b      	ldr	r3, [r7, #0]
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d101      	bne.n	800b944 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800b940:	4b17      	ldr	r3, [pc, #92]	; (800b9a0 <netif_set_addr+0x90>)
 800b942:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800b944:	68bb      	ldr	r3, [r7, #8]
 800b946:	2b00      	cmp	r3, #0
 800b948:	d003      	beq.n	800b952 <netif_set_addr+0x42>
 800b94a:	68bb      	ldr	r3, [r7, #8]
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d101      	bne.n	800b956 <netif_set_addr+0x46>
 800b952:	2301      	movs	r3, #1
 800b954:	e000      	b.n	800b958 <netif_set_addr+0x48>
 800b956:	2300      	movs	r3, #0
 800b958:	617b      	str	r3, [r7, #20]
  if (remove) {
 800b95a:	697b      	ldr	r3, [r7, #20]
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d006      	beq.n	800b96e <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800b960:	f107 0310 	add.w	r3, r7, #16
 800b964:	461a      	mov	r2, r3
 800b966:	68b9      	ldr	r1, [r7, #8]
 800b968:	68f8      	ldr	r0, [r7, #12]
 800b96a:	f7ff ff49 	bl	800b800 <netif_do_set_ipaddr>
>>>>>>> Stashed changes
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
<<<<<<< Updated upstream
 800b99e:	69fa      	ldr	r2, [r7, #28]
 800b9a0:	6879      	ldr	r1, [r7, #4]
 800b9a2:	68f8      	ldr	r0, [r7, #12]
 800b9a4:	f7ff ff8e 	bl	800b8c4 <netif_do_set_netmask>
=======
 800b96e:	69fa      	ldr	r2, [r7, #28]
 800b970:	6879      	ldr	r1, [r7, #4]
 800b972:	68f8      	ldr	r0, [r7, #12]
 800b974:	f7ff ff8e 	bl	800b894 <netif_do_set_netmask>
>>>>>>> Stashed changes
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
<<<<<<< Updated upstream
 800b9a8:	69ba      	ldr	r2, [r7, #24]
 800b9aa:	6839      	ldr	r1, [r7, #0]
 800b9ac:	68f8      	ldr	r0, [r7, #12]
 800b9ae:	f7ff ffa8 	bl	800b902 <netif_do_set_gw>
=======
 800b978:	69ba      	ldr	r2, [r7, #24]
 800b97a:	6839      	ldr	r1, [r7, #0]
 800b97c:	68f8      	ldr	r0, [r7, #12]
 800b97e:	f7ff ffa8 	bl	800b8d2 <netif_do_set_gw>
>>>>>>> Stashed changes
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
<<<<<<< Updated upstream
 800b9b2:	697b      	ldr	r3, [r7, #20]
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d106      	bne.n	800b9c6 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800b9b8:	f107 0310 	add.w	r3, r7, #16
 800b9bc:	461a      	mov	r2, r3
 800b9be:	68b9      	ldr	r1, [r7, #8]
 800b9c0:	68f8      	ldr	r0, [r7, #12]
 800b9c2:	f7ff ff35 	bl	800b830 <netif_do_set_ipaddr>
=======
 800b982:	697b      	ldr	r3, [r7, #20]
 800b984:	2b00      	cmp	r3, #0
 800b986:	d106      	bne.n	800b996 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800b988:	f107 0310 	add.w	r3, r7, #16
 800b98c:	461a      	mov	r2, r3
 800b98e:	68b9      	ldr	r1, [r7, #8]
 800b990:	68f8      	ldr	r0, [r7, #12]
 800b992:	f7ff ff35 	bl	800b800 <netif_do_set_ipaddr>
>>>>>>> Stashed changes
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
<<<<<<< Updated upstream
 800b9c6:	bf00      	nop
 800b9c8:	3720      	adds	r7, #32
 800b9ca:	46bd      	mov	sp, r7
 800b9cc:	bd80      	pop	{r7, pc}
 800b9ce:	bf00      	nop
 800b9d0:	08018440 	.word	0x08018440

0800b9d4 <netif_set_default>:
=======
 800b996:	bf00      	nop
 800b998:	3720      	adds	r7, #32
 800b99a:	46bd      	mov	sp, r7
 800b99c:	bd80      	pop	{r7, pc}
 800b99e:	bf00      	nop
 800b9a0:	08018424 	.word	0x08018424

0800b9a4 <netif_set_default>:
>>>>>>> Stashed changes
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
<<<<<<< Updated upstream
 800b9d4:	b480      	push	{r7}
 800b9d6:	b083      	sub	sp, #12
 800b9d8:	af00      	add	r7, sp, #0
 800b9da:	6078      	str	r0, [r7, #4]
=======
 800b9a4:	b480      	push	{r7}
 800b9a6:	b083      	sub	sp, #12
 800b9a8:	af00      	add	r7, sp, #0
 800b9aa:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
<<<<<<< Updated upstream
 800b9dc:	4a04      	ldr	r2, [pc, #16]	; (800b9f0 <netif_set_default+0x1c>)
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800b9e2:	bf00      	nop
 800b9e4:	370c      	adds	r7, #12
 800b9e6:	46bd      	mov	sp, r7
 800b9e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ec:	4770      	bx	lr
 800b9ee:	bf00      	nop
 800b9f0:	20007294 	.word	0x20007294

0800b9f4 <netif_set_up>:
=======
 800b9ac:	4a04      	ldr	r2, [pc, #16]	; (800b9c0 <netif_set_default+0x1c>)
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800b9b2:	bf00      	nop
 800b9b4:	370c      	adds	r7, #12
 800b9b6:	46bd      	mov	sp, r7
 800b9b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9bc:	4770      	bx	lr
 800b9be:	bf00      	nop
 800b9c0:	20007294 	.word	0x20007294

0800b9c4 <netif_set_up>:
>>>>>>> Stashed changes
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
<<<<<<< Updated upstream
 800b9f4:	b580      	push	{r7, lr}
 800b9f6:	b082      	sub	sp, #8
 800b9f8:	af00      	add	r7, sp, #0
 800b9fa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d107      	bne.n	800ba12 <netif_set_up+0x1e>
 800ba02:	4b0f      	ldr	r3, [pc, #60]	; (800ba40 <netif_set_up+0x4c>)
 800ba04:	f44f 7254 	mov.w	r2, #848	; 0x350
 800ba08:	490e      	ldr	r1, [pc, #56]	; (800ba44 <netif_set_up+0x50>)
 800ba0a:	480f      	ldr	r0, [pc, #60]	; (800ba48 <netif_set_up+0x54>)
 800ba0c:	f008 fdba 	bl	8014584 <iprintf>
 800ba10:	e013      	b.n	800ba3a <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ba18:	f003 0301 	and.w	r3, r3, #1
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d10c      	bne.n	800ba3a <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ba26:	f043 0301 	orr.w	r3, r3, #1
 800ba2a:	b2da      	uxtb	r2, r3
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
=======
 800b9c4:	b580      	push	{r7, lr}
 800b9c6:	b082      	sub	sp, #8
 800b9c8:	af00      	add	r7, sp, #0
 800b9ca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d107      	bne.n	800b9e2 <netif_set_up+0x1e>
 800b9d2:	4b0f      	ldr	r3, [pc, #60]	; (800ba10 <netif_set_up+0x4c>)
 800b9d4:	f44f 7254 	mov.w	r2, #848	; 0x350
 800b9d8:	490e      	ldr	r1, [pc, #56]	; (800ba14 <netif_set_up+0x50>)
 800b9da:	480f      	ldr	r0, [pc, #60]	; (800ba18 <netif_set_up+0x54>)
 800b9dc:	f008 fdba 	bl	8014554 <iprintf>
 800b9e0:	e013      	b.n	800ba0a <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b9e8:	f003 0301 	and.w	r3, r3, #1
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d10c      	bne.n	800ba0a <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b9f6:	f043 0301 	orr.w	r3, r3, #1
 800b9fa:	b2da      	uxtb	r2, r3
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
>>>>>>> Stashed changes
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
<<<<<<< Updated upstream
 800ba32:	2103      	movs	r1, #3
 800ba34:	6878      	ldr	r0, [r7, #4]
 800ba36:	f000 f809 	bl	800ba4c <netif_issue_reports>
=======
 800ba02:	2103      	movs	r1, #3
 800ba04:	6878      	ldr	r0, [r7, #4]
 800ba06:	f000 f809 	bl	800ba1c <netif_issue_reports>
>>>>>>> Stashed changes
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
<<<<<<< Updated upstream
 800ba3a:	3708      	adds	r7, #8
 800ba3c:	46bd      	mov	sp, r7
 800ba3e:	bd80      	pop	{r7, pc}
 800ba40:	08015cf8 	.word	0x08015cf8
 800ba44:	08015e80 	.word	0x08015e80
 800ba48:	08015d48 	.word	0x08015d48

0800ba4c <netif_issue_reports>:
=======
 800ba0a:	3708      	adds	r7, #8
 800ba0c:	46bd      	mov	sp, r7
 800ba0e:	bd80      	pop	{r7, pc}
 800ba10:	08015cdc 	.word	0x08015cdc
 800ba14:	08015e64 	.word	0x08015e64
 800ba18:	08015d2c 	.word	0x08015d2c

0800ba1c <netif_issue_reports>:
>>>>>>> Stashed changes

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
<<<<<<< Updated upstream
 800ba4c:	b580      	push	{r7, lr}
 800ba4e:	b082      	sub	sp, #8
 800ba50:	af00      	add	r7, sp, #0
 800ba52:	6078      	str	r0, [r7, #4]
 800ba54:	460b      	mov	r3, r1
 800ba56:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d106      	bne.n	800ba6c <netif_issue_reports+0x20>
 800ba5e:	4b18      	ldr	r3, [pc, #96]	; (800bac0 <netif_issue_reports+0x74>)
 800ba60:	f240 326d 	movw	r2, #877	; 0x36d
 800ba64:	4917      	ldr	r1, [pc, #92]	; (800bac4 <netif_issue_reports+0x78>)
 800ba66:	4818      	ldr	r0, [pc, #96]	; (800bac8 <netif_issue_reports+0x7c>)
 800ba68:	f008 fd8c 	bl	8014584 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ba72:	f003 0304 	and.w	r3, r3, #4
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d01e      	beq.n	800bab8 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ba80:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d017      	beq.n	800bab8 <netif_issue_reports+0x6c>
=======
 800ba1c:	b580      	push	{r7, lr}
 800ba1e:	b082      	sub	sp, #8
 800ba20:	af00      	add	r7, sp, #0
 800ba22:	6078      	str	r0, [r7, #4]
 800ba24:	460b      	mov	r3, r1
 800ba26:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d106      	bne.n	800ba3c <netif_issue_reports+0x20>
 800ba2e:	4b18      	ldr	r3, [pc, #96]	; (800ba90 <netif_issue_reports+0x74>)
 800ba30:	f240 326d 	movw	r2, #877	; 0x36d
 800ba34:	4917      	ldr	r1, [pc, #92]	; (800ba94 <netif_issue_reports+0x78>)
 800ba36:	4818      	ldr	r0, [pc, #96]	; (800ba98 <netif_issue_reports+0x7c>)
 800ba38:	f008 fd8c 	bl	8014554 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ba42:	f003 0304 	and.w	r3, r3, #4
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d01e      	beq.n	800ba88 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ba50:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d017      	beq.n	800ba88 <netif_issue_reports+0x6c>
>>>>>>> Stashed changes
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
<<<<<<< Updated upstream
 800ba88:	78fb      	ldrb	r3, [r7, #3]
 800ba8a:	f003 0301 	and.w	r3, r3, #1
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d013      	beq.n	800baba <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	3304      	adds	r3, #4
 800ba96:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d00e      	beq.n	800baba <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800baa2:	f003 0308 	and.w	r3, r3, #8
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d007      	beq.n	800baba <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	3304      	adds	r3, #4
 800baae:	4619      	mov	r1, r3
 800bab0:	6878      	ldr	r0, [r7, #4]
 800bab2:	f007 f97f 	bl	8012db4 <etharp_request>
 800bab6:	e000      	b.n	800baba <netif_issue_reports+0x6e>
    return;
 800bab8:	bf00      	nop
=======
 800ba58:	78fb      	ldrb	r3, [r7, #3]
 800ba5a:	f003 0301 	and.w	r3, r3, #1
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d013      	beq.n	800ba8a <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	3304      	adds	r3, #4
 800ba66:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d00e      	beq.n	800ba8a <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ba72:	f003 0308 	and.w	r3, r3, #8
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d007      	beq.n	800ba8a <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	3304      	adds	r3, #4
 800ba7e:	4619      	mov	r1, r3
 800ba80:	6878      	ldr	r0, [r7, #4]
 800ba82:	f007 f97f 	bl	8012d84 <etharp_request>
 800ba86:	e000      	b.n	800ba8a <netif_issue_reports+0x6e>
    return;
 800ba88:	bf00      	nop
>>>>>>> Stashed changes
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
<<<<<<< Updated upstream
 800baba:	3708      	adds	r7, #8
 800babc:	46bd      	mov	sp, r7
 800babe:	bd80      	pop	{r7, pc}
 800bac0:	08015cf8 	.word	0x08015cf8
 800bac4:	08015e9c 	.word	0x08015e9c
 800bac8:	08015d48 	.word	0x08015d48

0800bacc <netif_set_down>:
=======
 800ba8a:	3708      	adds	r7, #8
 800ba8c:	46bd      	mov	sp, r7
 800ba8e:	bd80      	pop	{r7, pc}
 800ba90:	08015cdc 	.word	0x08015cdc
 800ba94:	08015e80 	.word	0x08015e80
 800ba98:	08015d2c 	.word	0x08015d2c

0800ba9c <netif_set_down>:
>>>>>>> Stashed changes
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
<<<<<<< Updated upstream
 800bacc:	b580      	push	{r7, lr}
 800bace:	b082      	sub	sp, #8
 800bad0:	af00      	add	r7, sp, #0
 800bad2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d107      	bne.n	800baea <netif_set_down+0x1e>
 800bada:	4b12      	ldr	r3, [pc, #72]	; (800bb24 <netif_set_down+0x58>)
 800badc:	f240 329b 	movw	r2, #923	; 0x39b
 800bae0:	4911      	ldr	r1, [pc, #68]	; (800bb28 <netif_set_down+0x5c>)
 800bae2:	4812      	ldr	r0, [pc, #72]	; (800bb2c <netif_set_down+0x60>)
 800bae4:	f008 fd4e 	bl	8014584 <iprintf>
 800bae8:	e019      	b.n	800bb1e <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800baf0:	f003 0301 	and.w	r3, r3, #1
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d012      	beq.n	800bb1e <netif_set_down+0x52>
=======
 800ba9c:	b580      	push	{r7, lr}
 800ba9e:	b082      	sub	sp, #8
 800baa0:	af00      	add	r7, sp, #0
 800baa2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d107      	bne.n	800baba <netif_set_down+0x1e>
 800baaa:	4b12      	ldr	r3, [pc, #72]	; (800baf4 <netif_set_down+0x58>)
 800baac:	f240 329b 	movw	r2, #923	; 0x39b
 800bab0:	4911      	ldr	r1, [pc, #68]	; (800baf8 <netif_set_down+0x5c>)
 800bab2:	4812      	ldr	r0, [pc, #72]	; (800bafc <netif_set_down+0x60>)
 800bab4:	f008 fd4e 	bl	8014554 <iprintf>
 800bab8:	e019      	b.n	800baee <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800bac0:	f003 0301 	and.w	r3, r3, #1
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d012      	beq.n	800baee <netif_set_down+0x52>
>>>>>>> Stashed changes
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
<<<<<<< Updated upstream
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800bafe:	f023 0301 	bic.w	r3, r3, #1
 800bb02:	b2da      	uxtb	r2, r3
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
=======
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800bace:	f023 0301 	bic.w	r3, r3, #1
 800bad2:	b2da      	uxtb	r2, r3
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
>>>>>>> Stashed changes
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
<<<<<<< Updated upstream
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800bb10:	f003 0308 	and.w	r3, r3, #8
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d002      	beq.n	800bb1e <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800bb18:	6878      	ldr	r0, [r7, #4]
 800bb1a:	f006 fd09 	bl	8012530 <etharp_cleanup_netif>
=======
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800bae0:	f003 0308 	and.w	r3, r3, #8
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d002      	beq.n	800baee <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800bae8:	6878      	ldr	r0, [r7, #4]
 800baea:	f006 fd09 	bl	8012500 <etharp_cleanup_netif>
>>>>>>> Stashed changes
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
<<<<<<< Updated upstream
 800bb1e:	3708      	adds	r7, #8
 800bb20:	46bd      	mov	sp, r7
 800bb22:	bd80      	pop	{r7, pc}
 800bb24:	08015cf8 	.word	0x08015cf8
 800bb28:	08015ec0 	.word	0x08015ec0
 800bb2c:	08015d48 	.word	0x08015d48

0800bb30 <netif_set_link_callback>:
=======
 800baee:	3708      	adds	r7, #8
 800baf0:	46bd      	mov	sp, r7
 800baf2:	bd80      	pop	{r7, pc}
 800baf4:	08015cdc 	.word	0x08015cdc
 800baf8:	08015ea4 	.word	0x08015ea4
 800bafc:	08015d2c 	.word	0x08015d2c

0800bb00 <netif_set_link_callback>:
>>>>>>> Stashed changes
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
<<<<<<< Updated upstream
 800bb30:	b480      	push	{r7}
 800bb32:	b083      	sub	sp, #12
 800bb34:	af00      	add	r7, sp, #0
 800bb36:	6078      	str	r0, [r7, #4]
 800bb38:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d002      	beq.n	800bb46 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	683a      	ldr	r2, [r7, #0]
 800bb44:	61da      	str	r2, [r3, #28]
  }
}
 800bb46:	bf00      	nop
 800bb48:	370c      	adds	r7, #12
 800bb4a:	46bd      	mov	sp, r7
 800bb4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb50:	4770      	bx	lr

0800bb52 <netif_null_output_ip4>:
=======
 800bb00:	b480      	push	{r7}
 800bb02:	b083      	sub	sp, #12
 800bb04:	af00      	add	r7, sp, #0
 800bb06:	6078      	str	r0, [r7, #4]
 800bb08:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d002      	beq.n	800bb16 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	683a      	ldr	r2, [r7, #0]
 800bb14:	61da      	str	r2, [r3, #28]
  }
}
 800bb16:	bf00      	nop
 800bb18:	370c      	adds	r7, #12
 800bb1a:	46bd      	mov	sp, r7
 800bb1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb20:	4770      	bx	lr

0800bb22 <netif_null_output_ip4>:
>>>>>>> Stashed changes
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
<<<<<<< Updated upstream
 800bb52:	b480      	push	{r7}
 800bb54:	b085      	sub	sp, #20
 800bb56:	af00      	add	r7, sp, #0
 800bb58:	60f8      	str	r0, [r7, #12]
 800bb5a:	60b9      	str	r1, [r7, #8]
 800bb5c:	607a      	str	r2, [r7, #4]
=======
 800bb22:	b480      	push	{r7}
 800bb24:	b085      	sub	sp, #20
 800bb26:	af00      	add	r7, sp, #0
 800bb28:	60f8      	str	r0, [r7, #12]
 800bb2a:	60b9      	str	r1, [r7, #8]
 800bb2c:	607a      	str	r2, [r7, #4]
>>>>>>> Stashed changes
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
<<<<<<< Updated upstream
 800bb5e:	f06f 030b 	mvn.w	r3, #11
}
 800bb62:	4618      	mov	r0, r3
 800bb64:	3714      	adds	r7, #20
 800bb66:	46bd      	mov	sp, r7
 800bb68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb6c:	4770      	bx	lr
	...

0800bb70 <netif_get_by_index>:
=======
 800bb2e:	f06f 030b 	mvn.w	r3, #11
}
 800bb32:	4618      	mov	r0, r3
 800bb34:	3714      	adds	r7, #20
 800bb36:	46bd      	mov	sp, r7
 800bb38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb3c:	4770      	bx	lr
	...

0800bb40 <netif_get_by_index>:
>>>>>>> Stashed changes
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
<<<<<<< Updated upstream
 800bb70:	b480      	push	{r7}
 800bb72:	b085      	sub	sp, #20
 800bb74:	af00      	add	r7, sp, #0
 800bb76:	4603      	mov	r3, r0
 800bb78:	71fb      	strb	r3, [r7, #7]
=======
 800bb40:	b480      	push	{r7}
 800bb42:	b085      	sub	sp, #20
 800bb44:	af00      	add	r7, sp, #0
 800bb46:	4603      	mov	r3, r0
 800bb48:	71fb      	strb	r3, [r7, #7]
>>>>>>> Stashed changes
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
<<<<<<< Updated upstream
 800bb7a:	79fb      	ldrb	r3, [r7, #7]
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d013      	beq.n	800bba8 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800bb80:	4b0d      	ldr	r3, [pc, #52]	; (800bbb8 <netif_get_by_index+0x48>)
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	60fb      	str	r3, [r7, #12]
 800bb86:	e00c      	b.n	800bba2 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bb8e:	3301      	adds	r3, #1
 800bb90:	b2db      	uxtb	r3, r3
 800bb92:	79fa      	ldrb	r2, [r7, #7]
 800bb94:	429a      	cmp	r2, r3
 800bb96:	d101      	bne.n	800bb9c <netif_get_by_index+0x2c>
        return netif; /* found! */
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	e006      	b.n	800bbaa <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	60fb      	str	r3, [r7, #12]
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d1ef      	bne.n	800bb88 <netif_get_by_index+0x18>
=======
 800bb4a:	79fb      	ldrb	r3, [r7, #7]
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d013      	beq.n	800bb78 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800bb50:	4b0d      	ldr	r3, [pc, #52]	; (800bb88 <netif_get_by_index+0x48>)
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	60fb      	str	r3, [r7, #12]
 800bb56:	e00c      	b.n	800bb72 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bb5e:	3301      	adds	r3, #1
 800bb60:	b2db      	uxtb	r3, r3
 800bb62:	79fa      	ldrb	r2, [r7, #7]
 800bb64:	429a      	cmp	r2, r3
 800bb66:	d101      	bne.n	800bb6c <netif_get_by_index+0x2c>
        return netif; /* found! */
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	e006      	b.n	800bb7a <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	60fb      	str	r3, [r7, #12]
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d1ef      	bne.n	800bb58 <netif_get_by_index+0x18>
>>>>>>> Stashed changes
      }
    }
  }

  return NULL;
<<<<<<< Updated upstream
 800bba8:	2300      	movs	r3, #0
}
 800bbaa:	4618      	mov	r0, r3
 800bbac:	3714      	adds	r7, #20
 800bbae:	46bd      	mov	sp, r7
 800bbb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbb4:	4770      	bx	lr
 800bbb6:	bf00      	nop
 800bbb8:	20007290 	.word	0x20007290

0800bbbc <pbuf_pool_is_empty>:
=======
 800bb78:	2300      	movs	r3, #0
}
 800bb7a:	4618      	mov	r0, r3
 800bb7c:	3714      	adds	r7, #20
 800bb7e:	46bd      	mov	sp, r7
 800bb80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb84:	4770      	bx	lr
 800bb86:	bf00      	nop
 800bb88:	20007290 	.word	0x20007290

0800bb8c <pbuf_pool_is_empty>:
>>>>>>> Stashed changes
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
<<<<<<< Updated upstream
 800bbbc:	b480      	push	{r7}
 800bbbe:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 800bbc0:	4b03      	ldr	r3, [pc, #12]	; (800bbd0 <pbuf_pool_is_empty+0x14>)
 800bbc2:	2201      	movs	r2, #1
 800bbc4:	701a      	strb	r2, [r3, #0]
=======
 800bb8c:	b480      	push	{r7}
 800bb8e:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 800bb90:	4b03      	ldr	r3, [pc, #12]	; (800bba0 <pbuf_pool_is_empty+0x14>)
 800bb92:	2201      	movs	r2, #1
 800bb94:	701a      	strb	r2, [r3, #0]
>>>>>>> Stashed changes
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
<<<<<<< Updated upstream
 800bbc6:	bf00      	nop
 800bbc8:	46bd      	mov	sp, r7
 800bbca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbce:	4770      	bx	lr
 800bbd0:	20007298 	.word	0x20007298

0800bbd4 <pbuf_init_alloced_pbuf>:
=======
 800bb96:	bf00      	nop
 800bb98:	46bd      	mov	sp, r7
 800bb9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb9e:	4770      	bx	lr
 800bba0:	20007298 	.word	0x20007298

0800bba4 <pbuf_init_alloced_pbuf>:
>>>>>>> Stashed changes
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
<<<<<<< Updated upstream
 800bbd4:	b480      	push	{r7}
 800bbd6:	b085      	sub	sp, #20
 800bbd8:	af00      	add	r7, sp, #0
 800bbda:	60f8      	str	r0, [r7, #12]
 800bbdc:	60b9      	str	r1, [r7, #8]
 800bbde:	4611      	mov	r1, r2
 800bbe0:	461a      	mov	r2, r3
 800bbe2:	460b      	mov	r3, r1
 800bbe4:	80fb      	strh	r3, [r7, #6]
 800bbe6:	4613      	mov	r3, r2
 800bbe8:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	2200      	movs	r2, #0
 800bbee:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	68ba      	ldr	r2, [r7, #8]
 800bbf4:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	88fa      	ldrh	r2, [r7, #6]
 800bbfa:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	88ba      	ldrh	r2, [r7, #4]
 800bc00:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800bc02:	8b3b      	ldrh	r3, [r7, #24]
 800bc04:	b2da      	uxtb	r2, r3
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	7f3a      	ldrb	r2, [r7, #28]
 800bc0e:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	2201      	movs	r2, #1
 800bc14:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	2200      	movs	r2, #0
 800bc1a:	73da      	strb	r2, [r3, #15]
}
 800bc1c:	bf00      	nop
 800bc1e:	3714      	adds	r7, #20
 800bc20:	46bd      	mov	sp, r7
 800bc22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc26:	4770      	bx	lr

0800bc28 <pbuf_alloc>:
=======
 800bba4:	b480      	push	{r7}
 800bba6:	b085      	sub	sp, #20
 800bba8:	af00      	add	r7, sp, #0
 800bbaa:	60f8      	str	r0, [r7, #12]
 800bbac:	60b9      	str	r1, [r7, #8]
 800bbae:	4611      	mov	r1, r2
 800bbb0:	461a      	mov	r2, r3
 800bbb2:	460b      	mov	r3, r1
 800bbb4:	80fb      	strh	r3, [r7, #6]
 800bbb6:	4613      	mov	r3, r2
 800bbb8:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	2200      	movs	r2, #0
 800bbbe:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	68ba      	ldr	r2, [r7, #8]
 800bbc4:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	88fa      	ldrh	r2, [r7, #6]
 800bbca:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	88ba      	ldrh	r2, [r7, #4]
 800bbd0:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800bbd2:	8b3b      	ldrh	r3, [r7, #24]
 800bbd4:	b2da      	uxtb	r2, r3
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	7f3a      	ldrb	r2, [r7, #28]
 800bbde:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	2201      	movs	r2, #1
 800bbe4:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	2200      	movs	r2, #0
 800bbea:	73da      	strb	r2, [r3, #15]
}
 800bbec:	bf00      	nop
 800bbee:	3714      	adds	r7, #20
 800bbf0:	46bd      	mov	sp, r7
 800bbf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbf6:	4770      	bx	lr

0800bbf8 <pbuf_alloc>:
>>>>>>> Stashed changes
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
<<<<<<< Updated upstream
 800bc28:	b580      	push	{r7, lr}
 800bc2a:	b08c      	sub	sp, #48	; 0x30
 800bc2c:	af02      	add	r7, sp, #8
 800bc2e:	4603      	mov	r3, r0
 800bc30:	71fb      	strb	r3, [r7, #7]
 800bc32:	460b      	mov	r3, r1
 800bc34:	80bb      	strh	r3, [r7, #4]
 800bc36:	4613      	mov	r3, r2
 800bc38:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800bc3a:	79fb      	ldrb	r3, [r7, #7]
 800bc3c:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800bc3e:	887b      	ldrh	r3, [r7, #2]
 800bc40:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800bc44:	d07f      	beq.n	800bd46 <pbuf_alloc+0x11e>
 800bc46:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800bc4a:	f300 80c8 	bgt.w	800bdde <pbuf_alloc+0x1b6>
 800bc4e:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800bc52:	d010      	beq.n	800bc76 <pbuf_alloc+0x4e>
 800bc54:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800bc58:	f300 80c1 	bgt.w	800bdde <pbuf_alloc+0x1b6>
 800bc5c:	2b01      	cmp	r3, #1
 800bc5e:	d002      	beq.n	800bc66 <pbuf_alloc+0x3e>
 800bc60:	2b41      	cmp	r3, #65	; 0x41
 800bc62:	f040 80bc 	bne.w	800bdde <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800bc66:	887a      	ldrh	r2, [r7, #2]
 800bc68:	88bb      	ldrh	r3, [r7, #4]
 800bc6a:	4619      	mov	r1, r3
 800bc6c:	2000      	movs	r0, #0
 800bc6e:	f000 f8d1 	bl	800be14 <pbuf_alloc_reference>
 800bc72:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800bc74:	e0bd      	b.n	800bdf2 <pbuf_alloc+0x1ca>
=======
 800bbf8:	b580      	push	{r7, lr}
 800bbfa:	b08c      	sub	sp, #48	; 0x30
 800bbfc:	af02      	add	r7, sp, #8
 800bbfe:	4603      	mov	r3, r0
 800bc00:	71fb      	strb	r3, [r7, #7]
 800bc02:	460b      	mov	r3, r1
 800bc04:	80bb      	strh	r3, [r7, #4]
 800bc06:	4613      	mov	r3, r2
 800bc08:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800bc0a:	79fb      	ldrb	r3, [r7, #7]
 800bc0c:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800bc0e:	887b      	ldrh	r3, [r7, #2]
 800bc10:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800bc14:	d07f      	beq.n	800bd16 <pbuf_alloc+0x11e>
 800bc16:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800bc1a:	f300 80c8 	bgt.w	800bdae <pbuf_alloc+0x1b6>
 800bc1e:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800bc22:	d010      	beq.n	800bc46 <pbuf_alloc+0x4e>
 800bc24:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800bc28:	f300 80c1 	bgt.w	800bdae <pbuf_alloc+0x1b6>
 800bc2c:	2b01      	cmp	r3, #1
 800bc2e:	d002      	beq.n	800bc36 <pbuf_alloc+0x3e>
 800bc30:	2b41      	cmp	r3, #65	; 0x41
 800bc32:	f040 80bc 	bne.w	800bdae <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800bc36:	887a      	ldrh	r2, [r7, #2]
 800bc38:	88bb      	ldrh	r3, [r7, #4]
 800bc3a:	4619      	mov	r1, r3
 800bc3c:	2000      	movs	r0, #0
 800bc3e:	f000 f8d1 	bl	800bde4 <pbuf_alloc_reference>
 800bc42:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800bc44:	e0bd      	b.n	800bdc2 <pbuf_alloc+0x1ca>
>>>>>>> Stashed changes
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
<<<<<<< Updated upstream
 800bc76:	2300      	movs	r3, #0
 800bc78:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800bc7a:	2300      	movs	r3, #0
 800bc7c:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800bc7e:	88bb      	ldrh	r3, [r7, #4]
 800bc80:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800bc82:	2008      	movs	r0, #8
 800bc84:	f7ff fc76 	bl	800b574 <memp_malloc>
 800bc88:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800bc8a:	693b      	ldr	r3, [r7, #16]
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d109      	bne.n	800bca4 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800bc90:	f7ff ff94 	bl	800bbbc <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800bc94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d002      	beq.n	800bca0 <pbuf_alloc+0x78>
            pbuf_free(p);
 800bc9a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bc9c:	f000 faa8 	bl	800c1f0 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800bca0:	2300      	movs	r3, #0
 800bca2:	e0a7      	b.n	800bdf4 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800bca4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bca6:	3303      	adds	r3, #3
 800bca8:	b29b      	uxth	r3, r3
 800bcaa:	f023 0303 	bic.w	r3, r3, #3
 800bcae:	b29b      	uxth	r3, r3
 800bcb0:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800bcb4:	b29b      	uxth	r3, r3
 800bcb6:	8b7a      	ldrh	r2, [r7, #26]
 800bcb8:	4293      	cmp	r3, r2
 800bcba:	bf28      	it	cs
 800bcbc:	4613      	movcs	r3, r2
 800bcbe:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800bcc0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bcc2:	3310      	adds	r3, #16
 800bcc4:	693a      	ldr	r2, [r7, #16]
 800bcc6:	4413      	add	r3, r2
 800bcc8:	3303      	adds	r3, #3
 800bcca:	f023 0303 	bic.w	r3, r3, #3
 800bcce:	4618      	mov	r0, r3
 800bcd0:	89f9      	ldrh	r1, [r7, #14]
 800bcd2:	8b7a      	ldrh	r2, [r7, #26]
 800bcd4:	2300      	movs	r3, #0
 800bcd6:	9301      	str	r3, [sp, #4]
 800bcd8:	887b      	ldrh	r3, [r7, #2]
 800bcda:	9300      	str	r3, [sp, #0]
 800bcdc:	460b      	mov	r3, r1
 800bcde:	4601      	mov	r1, r0
 800bce0:	6938      	ldr	r0, [r7, #16]
 800bce2:	f7ff ff77 	bl	800bbd4 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800bce6:	693b      	ldr	r3, [r7, #16]
 800bce8:	685b      	ldr	r3, [r3, #4]
 800bcea:	f003 0303 	and.w	r3, r3, #3
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d006      	beq.n	800bd00 <pbuf_alloc+0xd8>
 800bcf2:	4b42      	ldr	r3, [pc, #264]	; (800bdfc <pbuf_alloc+0x1d4>)
 800bcf4:	f44f 7280 	mov.w	r2, #256	; 0x100
 800bcf8:	4941      	ldr	r1, [pc, #260]	; (800be00 <pbuf_alloc+0x1d8>)
 800bcfa:	4842      	ldr	r0, [pc, #264]	; (800be04 <pbuf_alloc+0x1dc>)
 800bcfc:	f008 fc42 	bl	8014584 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800bd00:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bd02:	3303      	adds	r3, #3
 800bd04:	f023 0303 	bic.w	r3, r3, #3
 800bd08:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800bd0c:	d106      	bne.n	800bd1c <pbuf_alloc+0xf4>
 800bd0e:	4b3b      	ldr	r3, [pc, #236]	; (800bdfc <pbuf_alloc+0x1d4>)
 800bd10:	f44f 7281 	mov.w	r2, #258	; 0x102
 800bd14:	493c      	ldr	r1, [pc, #240]	; (800be08 <pbuf_alloc+0x1e0>)
 800bd16:	483b      	ldr	r0, [pc, #236]	; (800be04 <pbuf_alloc+0x1dc>)
 800bd18:	f008 fc34 	bl	8014584 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800bd1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d102      	bne.n	800bd28 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800bd22:	693b      	ldr	r3, [r7, #16]
 800bd24:	627b      	str	r3, [r7, #36]	; 0x24
 800bd26:	e002      	b.n	800bd2e <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800bd28:	69fb      	ldr	r3, [r7, #28]
 800bd2a:	693a      	ldr	r2, [r7, #16]
 800bd2c:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800bd2e:	693b      	ldr	r3, [r7, #16]
 800bd30:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800bd32:	8b7a      	ldrh	r2, [r7, #26]
 800bd34:	89fb      	ldrh	r3, [r7, #14]
 800bd36:	1ad3      	subs	r3, r2, r3
 800bd38:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800bd3a:	2300      	movs	r3, #0
 800bd3c:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800bd3e:	8b7b      	ldrh	r3, [r7, #26]
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d19e      	bne.n	800bc82 <pbuf_alloc+0x5a>
      break;
 800bd44:	e055      	b.n	800bdf2 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800bd46:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bd48:	3303      	adds	r3, #3
 800bd4a:	b29b      	uxth	r3, r3
 800bd4c:	f023 0303 	bic.w	r3, r3, #3
 800bd50:	b29a      	uxth	r2, r3
 800bd52:	88bb      	ldrh	r3, [r7, #4]
 800bd54:	3303      	adds	r3, #3
 800bd56:	b29b      	uxth	r3, r3
 800bd58:	f023 0303 	bic.w	r3, r3, #3
 800bd5c:	b29b      	uxth	r3, r3
 800bd5e:	4413      	add	r3, r2
 800bd60:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800bd62:	8b3b      	ldrh	r3, [r7, #24]
 800bd64:	3310      	adds	r3, #16
 800bd66:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800bd68:	8b3a      	ldrh	r2, [r7, #24]
 800bd6a:	88bb      	ldrh	r3, [r7, #4]
 800bd6c:	3303      	adds	r3, #3
 800bd6e:	f023 0303 	bic.w	r3, r3, #3
 800bd72:	429a      	cmp	r2, r3
 800bd74:	d306      	bcc.n	800bd84 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800bd76:	8afa      	ldrh	r2, [r7, #22]
 800bd78:	88bb      	ldrh	r3, [r7, #4]
 800bd7a:	3303      	adds	r3, #3
 800bd7c:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800bd80:	429a      	cmp	r2, r3
 800bd82:	d201      	bcs.n	800bd88 <pbuf_alloc+0x160>
        return NULL;
 800bd84:	2300      	movs	r3, #0
 800bd86:	e035      	b.n	800bdf4 <pbuf_alloc+0x1cc>
=======
 800bc46:	2300      	movs	r3, #0
 800bc48:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800bc4a:	2300      	movs	r3, #0
 800bc4c:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800bc4e:	88bb      	ldrh	r3, [r7, #4]
 800bc50:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800bc52:	2008      	movs	r0, #8
 800bc54:	f7ff fc76 	bl	800b544 <memp_malloc>
 800bc58:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800bc5a:	693b      	ldr	r3, [r7, #16]
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d109      	bne.n	800bc74 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800bc60:	f7ff ff94 	bl	800bb8c <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800bc64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d002      	beq.n	800bc70 <pbuf_alloc+0x78>
            pbuf_free(p);
 800bc6a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bc6c:	f000 faa8 	bl	800c1c0 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800bc70:	2300      	movs	r3, #0
 800bc72:	e0a7      	b.n	800bdc4 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800bc74:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bc76:	3303      	adds	r3, #3
 800bc78:	b29b      	uxth	r3, r3
 800bc7a:	f023 0303 	bic.w	r3, r3, #3
 800bc7e:	b29b      	uxth	r3, r3
 800bc80:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800bc84:	b29b      	uxth	r3, r3
 800bc86:	8b7a      	ldrh	r2, [r7, #26]
 800bc88:	4293      	cmp	r3, r2
 800bc8a:	bf28      	it	cs
 800bc8c:	4613      	movcs	r3, r2
 800bc8e:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800bc90:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bc92:	3310      	adds	r3, #16
 800bc94:	693a      	ldr	r2, [r7, #16]
 800bc96:	4413      	add	r3, r2
 800bc98:	3303      	adds	r3, #3
 800bc9a:	f023 0303 	bic.w	r3, r3, #3
 800bc9e:	4618      	mov	r0, r3
 800bca0:	89f9      	ldrh	r1, [r7, #14]
 800bca2:	8b7a      	ldrh	r2, [r7, #26]
 800bca4:	2300      	movs	r3, #0
 800bca6:	9301      	str	r3, [sp, #4]
 800bca8:	887b      	ldrh	r3, [r7, #2]
 800bcaa:	9300      	str	r3, [sp, #0]
 800bcac:	460b      	mov	r3, r1
 800bcae:	4601      	mov	r1, r0
 800bcb0:	6938      	ldr	r0, [r7, #16]
 800bcb2:	f7ff ff77 	bl	800bba4 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800bcb6:	693b      	ldr	r3, [r7, #16]
 800bcb8:	685b      	ldr	r3, [r3, #4]
 800bcba:	f003 0303 	and.w	r3, r3, #3
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d006      	beq.n	800bcd0 <pbuf_alloc+0xd8>
 800bcc2:	4b42      	ldr	r3, [pc, #264]	; (800bdcc <pbuf_alloc+0x1d4>)
 800bcc4:	f44f 7280 	mov.w	r2, #256	; 0x100
 800bcc8:	4941      	ldr	r1, [pc, #260]	; (800bdd0 <pbuf_alloc+0x1d8>)
 800bcca:	4842      	ldr	r0, [pc, #264]	; (800bdd4 <pbuf_alloc+0x1dc>)
 800bccc:	f008 fc42 	bl	8014554 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800bcd0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bcd2:	3303      	adds	r3, #3
 800bcd4:	f023 0303 	bic.w	r3, r3, #3
 800bcd8:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800bcdc:	d106      	bne.n	800bcec <pbuf_alloc+0xf4>
 800bcde:	4b3b      	ldr	r3, [pc, #236]	; (800bdcc <pbuf_alloc+0x1d4>)
 800bce0:	f44f 7281 	mov.w	r2, #258	; 0x102
 800bce4:	493c      	ldr	r1, [pc, #240]	; (800bdd8 <pbuf_alloc+0x1e0>)
 800bce6:	483b      	ldr	r0, [pc, #236]	; (800bdd4 <pbuf_alloc+0x1dc>)
 800bce8:	f008 fc34 	bl	8014554 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800bcec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d102      	bne.n	800bcf8 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800bcf2:	693b      	ldr	r3, [r7, #16]
 800bcf4:	627b      	str	r3, [r7, #36]	; 0x24
 800bcf6:	e002      	b.n	800bcfe <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800bcf8:	69fb      	ldr	r3, [r7, #28]
 800bcfa:	693a      	ldr	r2, [r7, #16]
 800bcfc:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800bcfe:	693b      	ldr	r3, [r7, #16]
 800bd00:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800bd02:	8b7a      	ldrh	r2, [r7, #26]
 800bd04:	89fb      	ldrh	r3, [r7, #14]
 800bd06:	1ad3      	subs	r3, r2, r3
 800bd08:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800bd0a:	2300      	movs	r3, #0
 800bd0c:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800bd0e:	8b7b      	ldrh	r3, [r7, #26]
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d19e      	bne.n	800bc52 <pbuf_alloc+0x5a>
      break;
 800bd14:	e055      	b.n	800bdc2 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800bd16:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bd18:	3303      	adds	r3, #3
 800bd1a:	b29b      	uxth	r3, r3
 800bd1c:	f023 0303 	bic.w	r3, r3, #3
 800bd20:	b29a      	uxth	r2, r3
 800bd22:	88bb      	ldrh	r3, [r7, #4]
 800bd24:	3303      	adds	r3, #3
 800bd26:	b29b      	uxth	r3, r3
 800bd28:	f023 0303 	bic.w	r3, r3, #3
 800bd2c:	b29b      	uxth	r3, r3
 800bd2e:	4413      	add	r3, r2
 800bd30:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800bd32:	8b3b      	ldrh	r3, [r7, #24]
 800bd34:	3310      	adds	r3, #16
 800bd36:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800bd38:	8b3a      	ldrh	r2, [r7, #24]
 800bd3a:	88bb      	ldrh	r3, [r7, #4]
 800bd3c:	3303      	adds	r3, #3
 800bd3e:	f023 0303 	bic.w	r3, r3, #3
 800bd42:	429a      	cmp	r2, r3
 800bd44:	d306      	bcc.n	800bd54 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800bd46:	8afa      	ldrh	r2, [r7, #22]
 800bd48:	88bb      	ldrh	r3, [r7, #4]
 800bd4a:	3303      	adds	r3, #3
 800bd4c:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800bd50:	429a      	cmp	r2, r3
 800bd52:	d201      	bcs.n	800bd58 <pbuf_alloc+0x160>
        return NULL;
 800bd54:	2300      	movs	r3, #0
 800bd56:	e035      	b.n	800bdc4 <pbuf_alloc+0x1cc>
>>>>>>> Stashed changes
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
<<<<<<< Updated upstream
 800bd88:	8afb      	ldrh	r3, [r7, #22]
 800bd8a:	4618      	mov	r0, r3
 800bd8c:	f7ff fa84 	bl	800b298 <mem_malloc>
 800bd90:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800bd92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d101      	bne.n	800bd9c <pbuf_alloc+0x174>
        return NULL;
 800bd98:	2300      	movs	r3, #0
 800bd9a:	e02b      	b.n	800bdf4 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800bd9c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bd9e:	3310      	adds	r3, #16
 800bda0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bda2:	4413      	add	r3, r2
 800bda4:	3303      	adds	r3, #3
 800bda6:	f023 0303 	bic.w	r3, r3, #3
 800bdaa:	4618      	mov	r0, r3
 800bdac:	88b9      	ldrh	r1, [r7, #4]
 800bdae:	88ba      	ldrh	r2, [r7, #4]
 800bdb0:	2300      	movs	r3, #0
 800bdb2:	9301      	str	r3, [sp, #4]
 800bdb4:	887b      	ldrh	r3, [r7, #2]
 800bdb6:	9300      	str	r3, [sp, #0]
 800bdb8:	460b      	mov	r3, r1
 800bdba:	4601      	mov	r1, r0
 800bdbc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bdbe:	f7ff ff09 	bl	800bbd4 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800bdc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdc4:	685b      	ldr	r3, [r3, #4]
 800bdc6:	f003 0303 	and.w	r3, r3, #3
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d010      	beq.n	800bdf0 <pbuf_alloc+0x1c8>
 800bdce:	4b0b      	ldr	r3, [pc, #44]	; (800bdfc <pbuf_alloc+0x1d4>)
 800bdd0:	f44f 7291 	mov.w	r2, #290	; 0x122
 800bdd4:	490d      	ldr	r1, [pc, #52]	; (800be0c <pbuf_alloc+0x1e4>)
 800bdd6:	480b      	ldr	r0, [pc, #44]	; (800be04 <pbuf_alloc+0x1dc>)
 800bdd8:	f008 fbd4 	bl	8014584 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800bddc:	e008      	b.n	800bdf0 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800bdde:	4b07      	ldr	r3, [pc, #28]	; (800bdfc <pbuf_alloc+0x1d4>)
 800bde0:	f240 1227 	movw	r2, #295	; 0x127
 800bde4:	490a      	ldr	r1, [pc, #40]	; (800be10 <pbuf_alloc+0x1e8>)
 800bde6:	4807      	ldr	r0, [pc, #28]	; (800be04 <pbuf_alloc+0x1dc>)
 800bde8:	f008 fbcc 	bl	8014584 <iprintf>
      return NULL;
 800bdec:	2300      	movs	r3, #0
 800bdee:	e001      	b.n	800bdf4 <pbuf_alloc+0x1cc>
      break;
 800bdf0:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800bdf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bdf4:	4618      	mov	r0, r3
 800bdf6:	3728      	adds	r7, #40	; 0x28
 800bdf8:	46bd      	mov	sp, r7
 800bdfa:	bd80      	pop	{r7, pc}
 800bdfc:	08015f28 	.word	0x08015f28
 800be00:	08015f58 	.word	0x08015f58
 800be04:	08015f88 	.word	0x08015f88
 800be08:	08015fb0 	.word	0x08015fb0
 800be0c:	08015fe4 	.word	0x08015fe4
 800be10:	08016010 	.word	0x08016010

0800be14 <pbuf_alloc_reference>:
=======
 800bd58:	8afb      	ldrh	r3, [r7, #22]
 800bd5a:	4618      	mov	r0, r3
 800bd5c:	f7ff fa84 	bl	800b268 <mem_malloc>
 800bd60:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800bd62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d101      	bne.n	800bd6c <pbuf_alloc+0x174>
        return NULL;
 800bd68:	2300      	movs	r3, #0
 800bd6a:	e02b      	b.n	800bdc4 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800bd6c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bd6e:	3310      	adds	r3, #16
 800bd70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bd72:	4413      	add	r3, r2
 800bd74:	3303      	adds	r3, #3
 800bd76:	f023 0303 	bic.w	r3, r3, #3
 800bd7a:	4618      	mov	r0, r3
 800bd7c:	88b9      	ldrh	r1, [r7, #4]
 800bd7e:	88ba      	ldrh	r2, [r7, #4]
 800bd80:	2300      	movs	r3, #0
 800bd82:	9301      	str	r3, [sp, #4]
 800bd84:	887b      	ldrh	r3, [r7, #2]
 800bd86:	9300      	str	r3, [sp, #0]
 800bd88:	460b      	mov	r3, r1
 800bd8a:	4601      	mov	r1, r0
 800bd8c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bd8e:	f7ff ff09 	bl	800bba4 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800bd92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd94:	685b      	ldr	r3, [r3, #4]
 800bd96:	f003 0303 	and.w	r3, r3, #3
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d010      	beq.n	800bdc0 <pbuf_alloc+0x1c8>
 800bd9e:	4b0b      	ldr	r3, [pc, #44]	; (800bdcc <pbuf_alloc+0x1d4>)
 800bda0:	f44f 7291 	mov.w	r2, #290	; 0x122
 800bda4:	490d      	ldr	r1, [pc, #52]	; (800bddc <pbuf_alloc+0x1e4>)
 800bda6:	480b      	ldr	r0, [pc, #44]	; (800bdd4 <pbuf_alloc+0x1dc>)
 800bda8:	f008 fbd4 	bl	8014554 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800bdac:	e008      	b.n	800bdc0 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800bdae:	4b07      	ldr	r3, [pc, #28]	; (800bdcc <pbuf_alloc+0x1d4>)
 800bdb0:	f240 1227 	movw	r2, #295	; 0x127
 800bdb4:	490a      	ldr	r1, [pc, #40]	; (800bde0 <pbuf_alloc+0x1e8>)
 800bdb6:	4807      	ldr	r0, [pc, #28]	; (800bdd4 <pbuf_alloc+0x1dc>)
 800bdb8:	f008 fbcc 	bl	8014554 <iprintf>
      return NULL;
 800bdbc:	2300      	movs	r3, #0
 800bdbe:	e001      	b.n	800bdc4 <pbuf_alloc+0x1cc>
      break;
 800bdc0:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800bdc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bdc4:	4618      	mov	r0, r3
 800bdc6:	3728      	adds	r7, #40	; 0x28
 800bdc8:	46bd      	mov	sp, r7
 800bdca:	bd80      	pop	{r7, pc}
 800bdcc:	08015f0c 	.word	0x08015f0c
 800bdd0:	08015f3c 	.word	0x08015f3c
 800bdd4:	08015f6c 	.word	0x08015f6c
 800bdd8:	08015f94 	.word	0x08015f94
 800bddc:	08015fc8 	.word	0x08015fc8
 800bde0:	08015ff4 	.word	0x08015ff4

0800bde4 <pbuf_alloc_reference>:
>>>>>>> Stashed changes
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
<<<<<<< Updated upstream
 800be14:	b580      	push	{r7, lr}
 800be16:	b086      	sub	sp, #24
 800be18:	af02      	add	r7, sp, #8
 800be1a:	6078      	str	r0, [r7, #4]
 800be1c:	460b      	mov	r3, r1
 800be1e:	807b      	strh	r3, [r7, #2]
 800be20:	4613      	mov	r3, r2
 800be22:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800be24:	883b      	ldrh	r3, [r7, #0]
 800be26:	2b41      	cmp	r3, #65	; 0x41
 800be28:	d009      	beq.n	800be3e <pbuf_alloc_reference+0x2a>
 800be2a:	883b      	ldrh	r3, [r7, #0]
 800be2c:	2b01      	cmp	r3, #1
 800be2e:	d006      	beq.n	800be3e <pbuf_alloc_reference+0x2a>
 800be30:	4b0f      	ldr	r3, [pc, #60]	; (800be70 <pbuf_alloc_reference+0x5c>)
 800be32:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800be36:	490f      	ldr	r1, [pc, #60]	; (800be74 <pbuf_alloc_reference+0x60>)
 800be38:	480f      	ldr	r0, [pc, #60]	; (800be78 <pbuf_alloc_reference+0x64>)
 800be3a:	f008 fba3 	bl	8014584 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800be3e:	2007      	movs	r0, #7
 800be40:	f7ff fb98 	bl	800b574 <memp_malloc>
 800be44:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d101      	bne.n	800be50 <pbuf_alloc_reference+0x3c>
=======
 800bde4:	b580      	push	{r7, lr}
 800bde6:	b086      	sub	sp, #24
 800bde8:	af02      	add	r7, sp, #8
 800bdea:	6078      	str	r0, [r7, #4]
 800bdec:	460b      	mov	r3, r1
 800bdee:	807b      	strh	r3, [r7, #2]
 800bdf0:	4613      	mov	r3, r2
 800bdf2:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800bdf4:	883b      	ldrh	r3, [r7, #0]
 800bdf6:	2b41      	cmp	r3, #65	; 0x41
 800bdf8:	d009      	beq.n	800be0e <pbuf_alloc_reference+0x2a>
 800bdfa:	883b      	ldrh	r3, [r7, #0]
 800bdfc:	2b01      	cmp	r3, #1
 800bdfe:	d006      	beq.n	800be0e <pbuf_alloc_reference+0x2a>
 800be00:	4b0f      	ldr	r3, [pc, #60]	; (800be40 <pbuf_alloc_reference+0x5c>)
 800be02:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800be06:	490f      	ldr	r1, [pc, #60]	; (800be44 <pbuf_alloc_reference+0x60>)
 800be08:	480f      	ldr	r0, [pc, #60]	; (800be48 <pbuf_alloc_reference+0x64>)
 800be0a:	f008 fba3 	bl	8014554 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800be0e:	2007      	movs	r0, #7
 800be10:	f7ff fb98 	bl	800b544 <memp_malloc>
 800be14:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d101      	bne.n	800be20 <pbuf_alloc_reference+0x3c>
>>>>>>> Stashed changes
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
<<<<<<< Updated upstream
 800be4c:	2300      	movs	r3, #0
 800be4e:	e00b      	b.n	800be68 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800be50:	8879      	ldrh	r1, [r7, #2]
 800be52:	887a      	ldrh	r2, [r7, #2]
 800be54:	2300      	movs	r3, #0
 800be56:	9301      	str	r3, [sp, #4]
 800be58:	883b      	ldrh	r3, [r7, #0]
 800be5a:	9300      	str	r3, [sp, #0]
 800be5c:	460b      	mov	r3, r1
 800be5e:	6879      	ldr	r1, [r7, #4]
 800be60:	68f8      	ldr	r0, [r7, #12]
 800be62:	f7ff feb7 	bl	800bbd4 <pbuf_init_alloced_pbuf>
  return p;
 800be66:	68fb      	ldr	r3, [r7, #12]
}
 800be68:	4618      	mov	r0, r3
 800be6a:	3710      	adds	r7, #16
 800be6c:	46bd      	mov	sp, r7
 800be6e:	bd80      	pop	{r7, pc}
 800be70:	08015f28 	.word	0x08015f28
 800be74:	0801602c 	.word	0x0801602c
 800be78:	08015f88 	.word	0x08015f88

0800be7c <pbuf_alloced_custom>:
=======
 800be1c:	2300      	movs	r3, #0
 800be1e:	e00b      	b.n	800be38 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800be20:	8879      	ldrh	r1, [r7, #2]
 800be22:	887a      	ldrh	r2, [r7, #2]
 800be24:	2300      	movs	r3, #0
 800be26:	9301      	str	r3, [sp, #4]
 800be28:	883b      	ldrh	r3, [r7, #0]
 800be2a:	9300      	str	r3, [sp, #0]
 800be2c:	460b      	mov	r3, r1
 800be2e:	6879      	ldr	r1, [r7, #4]
 800be30:	68f8      	ldr	r0, [r7, #12]
 800be32:	f7ff feb7 	bl	800bba4 <pbuf_init_alloced_pbuf>
  return p;
 800be36:	68fb      	ldr	r3, [r7, #12]
}
 800be38:	4618      	mov	r0, r3
 800be3a:	3710      	adds	r7, #16
 800be3c:	46bd      	mov	sp, r7
 800be3e:	bd80      	pop	{r7, pc}
 800be40:	08015f0c 	.word	0x08015f0c
 800be44:	08016010 	.word	0x08016010
 800be48:	08015f6c 	.word	0x08015f6c

0800be4c <pbuf_alloced_custom>:
>>>>>>> Stashed changes
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
<<<<<<< Updated upstream
 800be7c:	b580      	push	{r7, lr}
 800be7e:	b088      	sub	sp, #32
 800be80:	af02      	add	r7, sp, #8
 800be82:	607b      	str	r3, [r7, #4]
 800be84:	4603      	mov	r3, r0
 800be86:	73fb      	strb	r3, [r7, #15]
 800be88:	460b      	mov	r3, r1
 800be8a:	81bb      	strh	r3, [r7, #12]
 800be8c:	4613      	mov	r3, r2
 800be8e:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800be90:	7bfb      	ldrb	r3, [r7, #15]
 800be92:	827b      	strh	r3, [r7, #18]
=======
 800be4c:	b580      	push	{r7, lr}
 800be4e:	b088      	sub	sp, #32
 800be50:	af02      	add	r7, sp, #8
 800be52:	607b      	str	r3, [r7, #4]
 800be54:	4603      	mov	r3, r0
 800be56:	73fb      	strb	r3, [r7, #15]
 800be58:	460b      	mov	r3, r1
 800be5a:	81bb      	strh	r3, [r7, #12]
 800be5c:	4613      	mov	r3, r2
 800be5e:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800be60:	7bfb      	ldrb	r3, [r7, #15]
 800be62:	827b      	strh	r3, [r7, #18]
>>>>>>> Stashed changes
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
<<<<<<< Updated upstream
 800be94:	8a7b      	ldrh	r3, [r7, #18]
 800be96:	3303      	adds	r3, #3
 800be98:	f023 0203 	bic.w	r2, r3, #3
 800be9c:	89bb      	ldrh	r3, [r7, #12]
 800be9e:	441a      	add	r2, r3
 800bea0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bea2:	429a      	cmp	r2, r3
 800bea4:	d901      	bls.n	800beaa <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800bea6:	2300      	movs	r3, #0
 800bea8:	e018      	b.n	800bedc <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800beaa:	6a3b      	ldr	r3, [r7, #32]
 800beac:	2b00      	cmp	r3, #0
 800beae:	d007      	beq.n	800bec0 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800beb0:	8a7b      	ldrh	r3, [r7, #18]
 800beb2:	3303      	adds	r3, #3
 800beb4:	f023 0303 	bic.w	r3, r3, #3
 800beb8:	6a3a      	ldr	r2, [r7, #32]
 800beba:	4413      	add	r3, r2
 800bebc:	617b      	str	r3, [r7, #20]
 800bebe:	e001      	b.n	800bec4 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800bec0:	2300      	movs	r3, #0
 800bec2:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800bec4:	6878      	ldr	r0, [r7, #4]
 800bec6:	89b9      	ldrh	r1, [r7, #12]
 800bec8:	89ba      	ldrh	r2, [r7, #12]
 800beca:	2302      	movs	r3, #2
 800becc:	9301      	str	r3, [sp, #4]
 800bece:	897b      	ldrh	r3, [r7, #10]
 800bed0:	9300      	str	r3, [sp, #0]
 800bed2:	460b      	mov	r3, r1
 800bed4:	6979      	ldr	r1, [r7, #20]
 800bed6:	f7ff fe7d 	bl	800bbd4 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800beda:	687b      	ldr	r3, [r7, #4]
}
 800bedc:	4618      	mov	r0, r3
 800bede:	3718      	adds	r7, #24
 800bee0:	46bd      	mov	sp, r7
 800bee2:	bd80      	pop	{r7, pc}

0800bee4 <pbuf_realloc>:
=======
 800be64:	8a7b      	ldrh	r3, [r7, #18]
 800be66:	3303      	adds	r3, #3
 800be68:	f023 0203 	bic.w	r2, r3, #3
 800be6c:	89bb      	ldrh	r3, [r7, #12]
 800be6e:	441a      	add	r2, r3
 800be70:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800be72:	429a      	cmp	r2, r3
 800be74:	d901      	bls.n	800be7a <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800be76:	2300      	movs	r3, #0
 800be78:	e018      	b.n	800beac <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800be7a:	6a3b      	ldr	r3, [r7, #32]
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d007      	beq.n	800be90 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800be80:	8a7b      	ldrh	r3, [r7, #18]
 800be82:	3303      	adds	r3, #3
 800be84:	f023 0303 	bic.w	r3, r3, #3
 800be88:	6a3a      	ldr	r2, [r7, #32]
 800be8a:	4413      	add	r3, r2
 800be8c:	617b      	str	r3, [r7, #20]
 800be8e:	e001      	b.n	800be94 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800be90:	2300      	movs	r3, #0
 800be92:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800be94:	6878      	ldr	r0, [r7, #4]
 800be96:	89b9      	ldrh	r1, [r7, #12]
 800be98:	89ba      	ldrh	r2, [r7, #12]
 800be9a:	2302      	movs	r3, #2
 800be9c:	9301      	str	r3, [sp, #4]
 800be9e:	897b      	ldrh	r3, [r7, #10]
 800bea0:	9300      	str	r3, [sp, #0]
 800bea2:	460b      	mov	r3, r1
 800bea4:	6979      	ldr	r1, [r7, #20]
 800bea6:	f7ff fe7d 	bl	800bba4 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800beaa:	687b      	ldr	r3, [r7, #4]
}
 800beac:	4618      	mov	r0, r3
 800beae:	3718      	adds	r7, #24
 800beb0:	46bd      	mov	sp, r7
 800beb2:	bd80      	pop	{r7, pc}

0800beb4 <pbuf_realloc>:
>>>>>>> Stashed changes
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
<<<<<<< Updated upstream
 800bee4:	b580      	push	{r7, lr}
 800bee6:	b084      	sub	sp, #16
 800bee8:	af00      	add	r7, sp, #0
 800beea:	6078      	str	r0, [r7, #4]
 800beec:	460b      	mov	r3, r1
 800beee:	807b      	strh	r3, [r7, #2]
=======
 800beb4:	b580      	push	{r7, lr}
 800beb6:	b084      	sub	sp, #16
 800beb8:	af00      	add	r7, sp, #0
 800beba:	6078      	str	r0, [r7, #4]
 800bebc:	460b      	mov	r3, r1
 800bebe:	807b      	strh	r3, [r7, #2]
>>>>>>> Stashed changes
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
<<<<<<< Updated upstream
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d106      	bne.n	800bf04 <pbuf_realloc+0x20>
 800bef6:	4b3a      	ldr	r3, [pc, #232]	; (800bfe0 <pbuf_realloc+0xfc>)
 800bef8:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800befc:	4939      	ldr	r1, [pc, #228]	; (800bfe4 <pbuf_realloc+0x100>)
 800befe:	483a      	ldr	r0, [pc, #232]	; (800bfe8 <pbuf_realloc+0x104>)
 800bf00:	f008 fb40 	bl	8014584 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	891b      	ldrh	r3, [r3, #8]
 800bf08:	887a      	ldrh	r2, [r7, #2]
 800bf0a:	429a      	cmp	r2, r3
 800bf0c:	d263      	bcs.n	800bfd6 <pbuf_realloc+0xf2>
=======
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d106      	bne.n	800bed4 <pbuf_realloc+0x20>
 800bec6:	4b3a      	ldr	r3, [pc, #232]	; (800bfb0 <pbuf_realloc+0xfc>)
 800bec8:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800becc:	4939      	ldr	r1, [pc, #228]	; (800bfb4 <pbuf_realloc+0x100>)
 800bece:	483a      	ldr	r0, [pc, #232]	; (800bfb8 <pbuf_realloc+0x104>)
 800bed0:	f008 fb40 	bl	8014554 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	891b      	ldrh	r3, [r3, #8]
 800bed8:	887a      	ldrh	r2, [r7, #2]
 800beda:	429a      	cmp	r2, r3
 800bedc:	d263      	bcs.n	800bfa6 <pbuf_realloc+0xf2>
>>>>>>> Stashed changes
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
<<<<<<< Updated upstream
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	891a      	ldrh	r2, [r3, #8]
 800bf12:	887b      	ldrh	r3, [r7, #2]
 800bf14:	1ad3      	subs	r3, r2, r3
 800bf16:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800bf18:	887b      	ldrh	r3, [r7, #2]
 800bf1a:	817b      	strh	r3, [r7, #10]
  q = p;
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800bf20:	e018      	b.n	800bf54 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	895b      	ldrh	r3, [r3, #10]
 800bf26:	897a      	ldrh	r2, [r7, #10]
 800bf28:	1ad3      	subs	r3, r2, r3
 800bf2a:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	891a      	ldrh	r2, [r3, #8]
 800bf30:	893b      	ldrh	r3, [r7, #8]
 800bf32:	1ad3      	subs	r3, r2, r3
 800bf34:	b29a      	uxth	r2, r3
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d106      	bne.n	800bf54 <pbuf_realloc+0x70>
 800bf46:	4b26      	ldr	r3, [pc, #152]	; (800bfe0 <pbuf_realloc+0xfc>)
 800bf48:	f240 12af 	movw	r2, #431	; 0x1af
 800bf4c:	4927      	ldr	r1, [pc, #156]	; (800bfec <pbuf_realloc+0x108>)
 800bf4e:	4826      	ldr	r0, [pc, #152]	; (800bfe8 <pbuf_realloc+0x104>)
 800bf50:	f008 fb18 	bl	8014584 <iprintf>
  while (rem_len > q->len) {
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	895b      	ldrh	r3, [r3, #10]
 800bf58:	897a      	ldrh	r2, [r7, #10]
 800bf5a:	429a      	cmp	r2, r3
 800bf5c:	d8e1      	bhi.n	800bf22 <pbuf_realloc+0x3e>
=======
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	891a      	ldrh	r2, [r3, #8]
 800bee2:	887b      	ldrh	r3, [r7, #2]
 800bee4:	1ad3      	subs	r3, r2, r3
 800bee6:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800bee8:	887b      	ldrh	r3, [r7, #2]
 800beea:	817b      	strh	r3, [r7, #10]
  q = p;
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800bef0:	e018      	b.n	800bf24 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	895b      	ldrh	r3, [r3, #10]
 800bef6:	897a      	ldrh	r2, [r7, #10]
 800bef8:	1ad3      	subs	r3, r2, r3
 800befa:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	891a      	ldrh	r2, [r3, #8]
 800bf00:	893b      	ldrh	r3, [r7, #8]
 800bf02:	1ad3      	subs	r3, r2, r3
 800bf04:	b29a      	uxth	r2, r3
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d106      	bne.n	800bf24 <pbuf_realloc+0x70>
 800bf16:	4b26      	ldr	r3, [pc, #152]	; (800bfb0 <pbuf_realloc+0xfc>)
 800bf18:	f240 12af 	movw	r2, #431	; 0x1af
 800bf1c:	4927      	ldr	r1, [pc, #156]	; (800bfbc <pbuf_realloc+0x108>)
 800bf1e:	4826      	ldr	r0, [pc, #152]	; (800bfb8 <pbuf_realloc+0x104>)
 800bf20:	f008 fb18 	bl	8014554 <iprintf>
  while (rem_len > q->len) {
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	895b      	ldrh	r3, [r3, #10]
 800bf28:	897a      	ldrh	r2, [r7, #10]
 800bf2a:	429a      	cmp	r2, r3
 800bf2c:	d8e1      	bhi.n	800bef2 <pbuf_realloc+0x3e>
>>>>>>> Stashed changes
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
<<<<<<< Updated upstream
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	7b1b      	ldrb	r3, [r3, #12]
 800bf62:	f003 030f 	and.w	r3, r3, #15
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d121      	bne.n	800bfae <pbuf_realloc+0xca>
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	895b      	ldrh	r3, [r3, #10]
 800bf6e:	897a      	ldrh	r2, [r7, #10]
 800bf70:	429a      	cmp	r2, r3
 800bf72:	d01c      	beq.n	800bfae <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	7b5b      	ldrb	r3, [r3, #13]
 800bf78:	f003 0302 	and.w	r3, r3, #2
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d116      	bne.n	800bfae <pbuf_realloc+0xca>
=======
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	7b1b      	ldrb	r3, [r3, #12]
 800bf32:	f003 030f 	and.w	r3, r3, #15
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d121      	bne.n	800bf7e <pbuf_realloc+0xca>
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	895b      	ldrh	r3, [r3, #10]
 800bf3e:	897a      	ldrh	r2, [r7, #10]
 800bf40:	429a      	cmp	r2, r3
 800bf42:	d01c      	beq.n	800bf7e <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	7b5b      	ldrb	r3, [r3, #13]
 800bf48:	f003 0302 	and.w	r3, r3, #2
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d116      	bne.n	800bf7e <pbuf_realloc+0xca>
>>>>>>> Stashed changes
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
<<<<<<< Updated upstream
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	685a      	ldr	r2, [r3, #4]
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	1ad3      	subs	r3, r2, r3
 800bf88:	b29a      	uxth	r2, r3
 800bf8a:	897b      	ldrh	r3, [r7, #10]
 800bf8c:	4413      	add	r3, r2
 800bf8e:	b29b      	uxth	r3, r3
 800bf90:	4619      	mov	r1, r3
 800bf92:	68f8      	ldr	r0, [r7, #12]
 800bf94:	f7ff f884 	bl	800b0a0 <mem_trim>
 800bf98:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d106      	bne.n	800bfae <pbuf_realloc+0xca>
 800bfa0:	4b0f      	ldr	r3, [pc, #60]	; (800bfe0 <pbuf_realloc+0xfc>)
 800bfa2:	f240 12bd 	movw	r2, #445	; 0x1bd
 800bfa6:	4912      	ldr	r1, [pc, #72]	; (800bff0 <pbuf_realloc+0x10c>)
 800bfa8:	480f      	ldr	r0, [pc, #60]	; (800bfe8 <pbuf_realloc+0x104>)
 800bfaa:	f008 faeb 	bl	8014584 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	897a      	ldrh	r2, [r7, #10]
 800bfb2:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	895a      	ldrh	r2, [r3, #10]
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d004      	beq.n	800bfce <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	4618      	mov	r0, r3
 800bfca:	f000 f911 	bl	800c1f0 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	2200      	movs	r2, #0
 800bfd2:	601a      	str	r2, [r3, #0]
 800bfd4:	e000      	b.n	800bfd8 <pbuf_realloc+0xf4>
    return;
 800bfd6:	bf00      	nop

}
 800bfd8:	3710      	adds	r7, #16
 800bfda:	46bd      	mov	sp, r7
 800bfdc:	bd80      	pop	{r7, pc}
 800bfde:	bf00      	nop
 800bfe0:	08015f28 	.word	0x08015f28
 800bfe4:	08016040 	.word	0x08016040
 800bfe8:	08015f88 	.word	0x08015f88
 800bfec:	08016058 	.word	0x08016058
 800bff0:	08016070 	.word	0x08016070

0800bff4 <pbuf_add_header_impl>:
=======
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	685a      	ldr	r2, [r3, #4]
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	1ad3      	subs	r3, r2, r3
 800bf58:	b29a      	uxth	r2, r3
 800bf5a:	897b      	ldrh	r3, [r7, #10]
 800bf5c:	4413      	add	r3, r2
 800bf5e:	b29b      	uxth	r3, r3
 800bf60:	4619      	mov	r1, r3
 800bf62:	68f8      	ldr	r0, [r7, #12]
 800bf64:	f7ff f884 	bl	800b070 <mem_trim>
 800bf68:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d106      	bne.n	800bf7e <pbuf_realloc+0xca>
 800bf70:	4b0f      	ldr	r3, [pc, #60]	; (800bfb0 <pbuf_realloc+0xfc>)
 800bf72:	f240 12bd 	movw	r2, #445	; 0x1bd
 800bf76:	4912      	ldr	r1, [pc, #72]	; (800bfc0 <pbuf_realloc+0x10c>)
 800bf78:	480f      	ldr	r0, [pc, #60]	; (800bfb8 <pbuf_realloc+0x104>)
 800bf7a:	f008 faeb 	bl	8014554 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	897a      	ldrh	r2, [r7, #10]
 800bf82:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	895a      	ldrh	r2, [r3, #10]
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d004      	beq.n	800bf9e <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	4618      	mov	r0, r3
 800bf9a:	f000 f911 	bl	800c1c0 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	2200      	movs	r2, #0
 800bfa2:	601a      	str	r2, [r3, #0]
 800bfa4:	e000      	b.n	800bfa8 <pbuf_realloc+0xf4>
    return;
 800bfa6:	bf00      	nop

}
 800bfa8:	3710      	adds	r7, #16
 800bfaa:	46bd      	mov	sp, r7
 800bfac:	bd80      	pop	{r7, pc}
 800bfae:	bf00      	nop
 800bfb0:	08015f0c 	.word	0x08015f0c
 800bfb4:	08016024 	.word	0x08016024
 800bfb8:	08015f6c 	.word	0x08015f6c
 800bfbc:	0801603c 	.word	0x0801603c
 800bfc0:	08016054 	.word	0x08016054

0800bfc4 <pbuf_add_header_impl>:
>>>>>>> Stashed changes
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
<<<<<<< Updated upstream
 800bff4:	b580      	push	{r7, lr}
 800bff6:	b086      	sub	sp, #24
 800bff8:	af00      	add	r7, sp, #0
 800bffa:	60f8      	str	r0, [r7, #12]
 800bffc:	60b9      	str	r1, [r7, #8]
 800bffe:	4613      	mov	r3, r2
 800c000:	71fb      	strb	r3, [r7, #7]
=======
 800bfc4:	b580      	push	{r7, lr}
 800bfc6:	b086      	sub	sp, #24
 800bfc8:	af00      	add	r7, sp, #0
 800bfca:	60f8      	str	r0, [r7, #12]
 800bfcc:	60b9      	str	r1, [r7, #8]
 800bfce:	4613      	mov	r3, r2
 800bfd0:	71fb      	strb	r3, [r7, #7]
>>>>>>> Stashed changes
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
<<<<<<< Updated upstream
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	2b00      	cmp	r3, #0
 800c006:	d106      	bne.n	800c016 <pbuf_add_header_impl+0x22>
 800c008:	4b2b      	ldr	r3, [pc, #172]	; (800c0b8 <pbuf_add_header_impl+0xc4>)
 800c00a:	f240 12df 	movw	r2, #479	; 0x1df
 800c00e:	492b      	ldr	r1, [pc, #172]	; (800c0bc <pbuf_add_header_impl+0xc8>)
 800c010:	482b      	ldr	r0, [pc, #172]	; (800c0c0 <pbuf_add_header_impl+0xcc>)
 800c012:	f008 fab7 	bl	8014584 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d003      	beq.n	800c024 <pbuf_add_header_impl+0x30>
 800c01c:	68bb      	ldr	r3, [r7, #8]
 800c01e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c022:	d301      	bcc.n	800c028 <pbuf_add_header_impl+0x34>
    return 1;
 800c024:	2301      	movs	r3, #1
 800c026:	e043      	b.n	800c0b0 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800c028:	68bb      	ldr	r3, [r7, #8]
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d101      	bne.n	800c032 <pbuf_add_header_impl+0x3e>
    return 0;
 800c02e:	2300      	movs	r3, #0
 800c030:	e03e      	b.n	800c0b0 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800c032:	68bb      	ldr	r3, [r7, #8]
 800c034:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	891a      	ldrh	r2, [r3, #8]
 800c03a:	8a7b      	ldrh	r3, [r7, #18]
 800c03c:	4413      	add	r3, r2
 800c03e:	b29b      	uxth	r3, r3
 800c040:	8a7a      	ldrh	r2, [r7, #18]
 800c042:	429a      	cmp	r2, r3
 800c044:	d901      	bls.n	800c04a <pbuf_add_header_impl+0x56>
    return 1;
 800c046:	2301      	movs	r3, #1
 800c048:	e032      	b.n	800c0b0 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800c04a:	68fb      	ldr	r3, [r7, #12]
 800c04c:	7b1b      	ldrb	r3, [r3, #12]
 800c04e:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800c050:	8a3b      	ldrh	r3, [r7, #16]
 800c052:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c056:	2b00      	cmp	r3, #0
 800c058:	d00c      	beq.n	800c074 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800c05a:	68fb      	ldr	r3, [r7, #12]
 800c05c:	685a      	ldr	r2, [r3, #4]
 800c05e:	68bb      	ldr	r3, [r7, #8]
 800c060:	425b      	negs	r3, r3
 800c062:	4413      	add	r3, r2
 800c064:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	3310      	adds	r3, #16
 800c06a:	697a      	ldr	r2, [r7, #20]
 800c06c:	429a      	cmp	r2, r3
 800c06e:	d20d      	bcs.n	800c08c <pbuf_add_header_impl+0x98>
=======
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d106      	bne.n	800bfe6 <pbuf_add_header_impl+0x22>
 800bfd8:	4b2b      	ldr	r3, [pc, #172]	; (800c088 <pbuf_add_header_impl+0xc4>)
 800bfda:	f240 12df 	movw	r2, #479	; 0x1df
 800bfde:	492b      	ldr	r1, [pc, #172]	; (800c08c <pbuf_add_header_impl+0xc8>)
 800bfe0:	482b      	ldr	r0, [pc, #172]	; (800c090 <pbuf_add_header_impl+0xcc>)
 800bfe2:	f008 fab7 	bl	8014554 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d003      	beq.n	800bff4 <pbuf_add_header_impl+0x30>
 800bfec:	68bb      	ldr	r3, [r7, #8]
 800bfee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bff2:	d301      	bcc.n	800bff8 <pbuf_add_header_impl+0x34>
    return 1;
 800bff4:	2301      	movs	r3, #1
 800bff6:	e043      	b.n	800c080 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800bff8:	68bb      	ldr	r3, [r7, #8]
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d101      	bne.n	800c002 <pbuf_add_header_impl+0x3e>
    return 0;
 800bffe:	2300      	movs	r3, #0
 800c000:	e03e      	b.n	800c080 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800c002:	68bb      	ldr	r3, [r7, #8]
 800c004:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	891a      	ldrh	r2, [r3, #8]
 800c00a:	8a7b      	ldrh	r3, [r7, #18]
 800c00c:	4413      	add	r3, r2
 800c00e:	b29b      	uxth	r3, r3
 800c010:	8a7a      	ldrh	r2, [r7, #18]
 800c012:	429a      	cmp	r2, r3
 800c014:	d901      	bls.n	800c01a <pbuf_add_header_impl+0x56>
    return 1;
 800c016:	2301      	movs	r3, #1
 800c018:	e032      	b.n	800c080 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	7b1b      	ldrb	r3, [r3, #12]
 800c01e:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800c020:	8a3b      	ldrh	r3, [r7, #16]
 800c022:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c026:	2b00      	cmp	r3, #0
 800c028:	d00c      	beq.n	800c044 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	685a      	ldr	r2, [r3, #4]
 800c02e:	68bb      	ldr	r3, [r7, #8]
 800c030:	425b      	negs	r3, r3
 800c032:	4413      	add	r3, r2
 800c034:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	3310      	adds	r3, #16
 800c03a:	697a      	ldr	r2, [r7, #20]
 800c03c:	429a      	cmp	r2, r3
 800c03e:	d20d      	bcs.n	800c05c <pbuf_add_header_impl+0x98>
>>>>>>> Stashed changes
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
<<<<<<< Updated upstream
 800c070:	2301      	movs	r3, #1
 800c072:	e01d      	b.n	800c0b0 <pbuf_add_header_impl+0xbc>
=======
 800c040:	2301      	movs	r3, #1
 800c042:	e01d      	b.n	800c080 <pbuf_add_header_impl+0xbc>
>>>>>>> Stashed changes
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
<<<<<<< Updated upstream
 800c074:	79fb      	ldrb	r3, [r7, #7]
 800c076:	2b00      	cmp	r3, #0
 800c078:	d006      	beq.n	800c088 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	685a      	ldr	r2, [r3, #4]
 800c07e:	68bb      	ldr	r3, [r7, #8]
 800c080:	425b      	negs	r3, r3
 800c082:	4413      	add	r3, r2
 800c084:	617b      	str	r3, [r7, #20]
 800c086:	e001      	b.n	800c08c <pbuf_add_header_impl+0x98>
=======
 800c044:	79fb      	ldrb	r3, [r7, #7]
 800c046:	2b00      	cmp	r3, #0
 800c048:	d006      	beq.n	800c058 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800c04a:	68fb      	ldr	r3, [r7, #12]
 800c04c:	685a      	ldr	r2, [r3, #4]
 800c04e:	68bb      	ldr	r3, [r7, #8]
 800c050:	425b      	negs	r3, r3
 800c052:	4413      	add	r3, r2
 800c054:	617b      	str	r3, [r7, #20]
 800c056:	e001      	b.n	800c05c <pbuf_add_header_impl+0x98>
>>>>>>> Stashed changes
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
<<<<<<< Updated upstream
 800c088:	2301      	movs	r3, #1
 800c08a:	e011      	b.n	800c0b0 <pbuf_add_header_impl+0xbc>
=======
 800c058:	2301      	movs	r3, #1
 800c05a:	e011      	b.n	800c080 <pbuf_add_header_impl+0xbc>
>>>>>>> Stashed changes
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
<<<<<<< Updated upstream
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	697a      	ldr	r2, [r7, #20]
 800c090:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	895a      	ldrh	r2, [r3, #10]
 800c096:	8a7b      	ldrh	r3, [r7, #18]
 800c098:	4413      	add	r3, r2
 800c09a:	b29a      	uxth	r2, r3
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	891a      	ldrh	r2, [r3, #8]
 800c0a4:	8a7b      	ldrh	r3, [r7, #18]
 800c0a6:	4413      	add	r3, r2
 800c0a8:	b29a      	uxth	r2, r3
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	811a      	strh	r2, [r3, #8]


  return 0;
 800c0ae:	2300      	movs	r3, #0
}
 800c0b0:	4618      	mov	r0, r3
 800c0b2:	3718      	adds	r7, #24
 800c0b4:	46bd      	mov	sp, r7
 800c0b6:	bd80      	pop	{r7, pc}
 800c0b8:	08015f28 	.word	0x08015f28
 800c0bc:	0801608c 	.word	0x0801608c
 800c0c0:	08015f88 	.word	0x08015f88

0800c0c4 <pbuf_add_header>:
=======
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	697a      	ldr	r2, [r7, #20]
 800c060:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	895a      	ldrh	r2, [r3, #10]
 800c066:	8a7b      	ldrh	r3, [r7, #18]
 800c068:	4413      	add	r3, r2
 800c06a:	b29a      	uxth	r2, r3
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	891a      	ldrh	r2, [r3, #8]
 800c074:	8a7b      	ldrh	r3, [r7, #18]
 800c076:	4413      	add	r3, r2
 800c078:	b29a      	uxth	r2, r3
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	811a      	strh	r2, [r3, #8]


  return 0;
 800c07e:	2300      	movs	r3, #0
}
 800c080:	4618      	mov	r0, r3
 800c082:	3718      	adds	r7, #24
 800c084:	46bd      	mov	sp, r7
 800c086:	bd80      	pop	{r7, pc}
 800c088:	08015f0c 	.word	0x08015f0c
 800c08c:	08016070 	.word	0x08016070
 800c090:	08015f6c 	.word	0x08015f6c

0800c094 <pbuf_add_header>:
>>>>>>> Stashed changes
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
<<<<<<< Updated upstream
 800c0c4:	b580      	push	{r7, lr}
 800c0c6:	b082      	sub	sp, #8
 800c0c8:	af00      	add	r7, sp, #0
 800c0ca:	6078      	str	r0, [r7, #4]
 800c0cc:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800c0ce:	2200      	movs	r2, #0
 800c0d0:	6839      	ldr	r1, [r7, #0]
 800c0d2:	6878      	ldr	r0, [r7, #4]
 800c0d4:	f7ff ff8e 	bl	800bff4 <pbuf_add_header_impl>
 800c0d8:	4603      	mov	r3, r0
}
 800c0da:	4618      	mov	r0, r3
 800c0dc:	3708      	adds	r7, #8
 800c0de:	46bd      	mov	sp, r7
 800c0e0:	bd80      	pop	{r7, pc}
	...

0800c0e4 <pbuf_remove_header>:
=======
 800c094:	b580      	push	{r7, lr}
 800c096:	b082      	sub	sp, #8
 800c098:	af00      	add	r7, sp, #0
 800c09a:	6078      	str	r0, [r7, #4]
 800c09c:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800c09e:	2200      	movs	r2, #0
 800c0a0:	6839      	ldr	r1, [r7, #0]
 800c0a2:	6878      	ldr	r0, [r7, #4]
 800c0a4:	f7ff ff8e 	bl	800bfc4 <pbuf_add_header_impl>
 800c0a8:	4603      	mov	r3, r0
}
 800c0aa:	4618      	mov	r0, r3
 800c0ac:	3708      	adds	r7, #8
 800c0ae:	46bd      	mov	sp, r7
 800c0b0:	bd80      	pop	{r7, pc}
	...

0800c0b4 <pbuf_remove_header>:
>>>>>>> Stashed changes
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
<<<<<<< Updated upstream
 800c0e4:	b580      	push	{r7, lr}
 800c0e6:	b084      	sub	sp, #16
 800c0e8:	af00      	add	r7, sp, #0
 800c0ea:	6078      	str	r0, [r7, #4]
 800c0ec:	6039      	str	r1, [r7, #0]
=======
 800c0b4:	b580      	push	{r7, lr}
 800c0b6:	b084      	sub	sp, #16
 800c0b8:	af00      	add	r7, sp, #0
 800c0ba:	6078      	str	r0, [r7, #4]
 800c0bc:	6039      	str	r1, [r7, #0]
>>>>>>> Stashed changes
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
<<<<<<< Updated upstream
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d106      	bne.n	800c102 <pbuf_remove_header+0x1e>
 800c0f4:	4b20      	ldr	r3, [pc, #128]	; (800c178 <pbuf_remove_header+0x94>)
 800c0f6:	f240 224b 	movw	r2, #587	; 0x24b
 800c0fa:	4920      	ldr	r1, [pc, #128]	; (800c17c <pbuf_remove_header+0x98>)
 800c0fc:	4820      	ldr	r0, [pc, #128]	; (800c180 <pbuf_remove_header+0x9c>)
 800c0fe:	f008 fa41 	bl	8014584 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	2b00      	cmp	r3, #0
 800c106:	d003      	beq.n	800c110 <pbuf_remove_header+0x2c>
 800c108:	683b      	ldr	r3, [r7, #0]
 800c10a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c10e:	d301      	bcc.n	800c114 <pbuf_remove_header+0x30>
    return 1;
 800c110:	2301      	movs	r3, #1
 800c112:	e02c      	b.n	800c16e <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800c114:	683b      	ldr	r3, [r7, #0]
 800c116:	2b00      	cmp	r3, #0
 800c118:	d101      	bne.n	800c11e <pbuf_remove_header+0x3a>
    return 0;
 800c11a:	2300      	movs	r3, #0
 800c11c:	e027      	b.n	800c16e <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800c11e:	683b      	ldr	r3, [r7, #0]
 800c120:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	895b      	ldrh	r3, [r3, #10]
 800c126:	89fa      	ldrh	r2, [r7, #14]
 800c128:	429a      	cmp	r2, r3
 800c12a:	d908      	bls.n	800c13e <pbuf_remove_header+0x5a>
 800c12c:	4b12      	ldr	r3, [pc, #72]	; (800c178 <pbuf_remove_header+0x94>)
 800c12e:	f240 2255 	movw	r2, #597	; 0x255
 800c132:	4914      	ldr	r1, [pc, #80]	; (800c184 <pbuf_remove_header+0xa0>)
 800c134:	4812      	ldr	r0, [pc, #72]	; (800c180 <pbuf_remove_header+0x9c>)
 800c136:	f008 fa25 	bl	8014584 <iprintf>
 800c13a:	2301      	movs	r3, #1
 800c13c:	e017      	b.n	800c16e <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	685b      	ldr	r3, [r3, #4]
 800c142:	60bb      	str	r3, [r7, #8]
=======
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d106      	bne.n	800c0d2 <pbuf_remove_header+0x1e>
 800c0c4:	4b20      	ldr	r3, [pc, #128]	; (800c148 <pbuf_remove_header+0x94>)
 800c0c6:	f240 224b 	movw	r2, #587	; 0x24b
 800c0ca:	4920      	ldr	r1, [pc, #128]	; (800c14c <pbuf_remove_header+0x98>)
 800c0cc:	4820      	ldr	r0, [pc, #128]	; (800c150 <pbuf_remove_header+0x9c>)
 800c0ce:	f008 fa41 	bl	8014554 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d003      	beq.n	800c0e0 <pbuf_remove_header+0x2c>
 800c0d8:	683b      	ldr	r3, [r7, #0]
 800c0da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c0de:	d301      	bcc.n	800c0e4 <pbuf_remove_header+0x30>
    return 1;
 800c0e0:	2301      	movs	r3, #1
 800c0e2:	e02c      	b.n	800c13e <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800c0e4:	683b      	ldr	r3, [r7, #0]
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d101      	bne.n	800c0ee <pbuf_remove_header+0x3a>
    return 0;
 800c0ea:	2300      	movs	r3, #0
 800c0ec:	e027      	b.n	800c13e <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800c0ee:	683b      	ldr	r3, [r7, #0]
 800c0f0:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	895b      	ldrh	r3, [r3, #10]
 800c0f6:	89fa      	ldrh	r2, [r7, #14]
 800c0f8:	429a      	cmp	r2, r3
 800c0fa:	d908      	bls.n	800c10e <pbuf_remove_header+0x5a>
 800c0fc:	4b12      	ldr	r3, [pc, #72]	; (800c148 <pbuf_remove_header+0x94>)
 800c0fe:	f240 2255 	movw	r2, #597	; 0x255
 800c102:	4914      	ldr	r1, [pc, #80]	; (800c154 <pbuf_remove_header+0xa0>)
 800c104:	4812      	ldr	r0, [pc, #72]	; (800c150 <pbuf_remove_header+0x9c>)
 800c106:	f008 fa25 	bl	8014554 <iprintf>
 800c10a:	2301      	movs	r3, #1
 800c10c:	e017      	b.n	800c13e <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	685b      	ldr	r3, [r3, #4]
 800c112:	60bb      	str	r3, [r7, #8]
>>>>>>> Stashed changes
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
<<<<<<< Updated upstream
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	685a      	ldr	r2, [r3, #4]
 800c148:	683b      	ldr	r3, [r7, #0]
 800c14a:	441a      	add	r2, r3
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	895a      	ldrh	r2, [r3, #10]
 800c154:	89fb      	ldrh	r3, [r7, #14]
 800c156:	1ad3      	subs	r3, r2, r3
 800c158:	b29a      	uxth	r2, r3
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	891a      	ldrh	r2, [r3, #8]
 800c162:	89fb      	ldrh	r3, [r7, #14]
 800c164:	1ad3      	subs	r3, r2, r3
 800c166:	b29a      	uxth	r2, r3
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	811a      	strh	r2, [r3, #8]
=======
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	685a      	ldr	r2, [r3, #4]
 800c118:	683b      	ldr	r3, [r7, #0]
 800c11a:	441a      	add	r2, r3
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	895a      	ldrh	r2, [r3, #10]
 800c124:	89fb      	ldrh	r3, [r7, #14]
 800c126:	1ad3      	subs	r3, r2, r3
 800c128:	b29a      	uxth	r2, r3
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	891a      	ldrh	r2, [r3, #8]
 800c132:	89fb      	ldrh	r3, [r7, #14]
 800c134:	1ad3      	subs	r3, r2, r3
 800c136:	b29a      	uxth	r2, r3
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	811a      	strh	r2, [r3, #8]
>>>>>>> Stashed changes

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
<<<<<<< Updated upstream
 800c16c:	2300      	movs	r3, #0
}
 800c16e:	4618      	mov	r0, r3
 800c170:	3710      	adds	r7, #16
 800c172:	46bd      	mov	sp, r7
 800c174:	bd80      	pop	{r7, pc}
 800c176:	bf00      	nop
 800c178:	08015f28 	.word	0x08015f28
 800c17c:	0801608c 	.word	0x0801608c
 800c180:	08015f88 	.word	0x08015f88
 800c184:	08016098 	.word	0x08016098

0800c188 <pbuf_header_impl>:
=======
 800c13c:	2300      	movs	r3, #0
}
 800c13e:	4618      	mov	r0, r3
 800c140:	3710      	adds	r7, #16
 800c142:	46bd      	mov	sp, r7
 800c144:	bd80      	pop	{r7, pc}
 800c146:	bf00      	nop
 800c148:	08015f0c 	.word	0x08015f0c
 800c14c:	08016070 	.word	0x08016070
 800c150:	08015f6c 	.word	0x08015f6c
 800c154:	0801607c 	.word	0x0801607c

0800c158 <pbuf_header_impl>:
>>>>>>> Stashed changes

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
<<<<<<< Updated upstream
 800c188:	b580      	push	{r7, lr}
 800c18a:	b082      	sub	sp, #8
 800c18c:	af00      	add	r7, sp, #0
 800c18e:	6078      	str	r0, [r7, #4]
 800c190:	460b      	mov	r3, r1
 800c192:	807b      	strh	r3, [r7, #2]
 800c194:	4613      	mov	r3, r2
 800c196:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800c198:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	da08      	bge.n	800c1b2 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800c1a0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c1a4:	425b      	negs	r3, r3
 800c1a6:	4619      	mov	r1, r3
 800c1a8:	6878      	ldr	r0, [r7, #4]
 800c1aa:	f7ff ff9b 	bl	800c0e4 <pbuf_remove_header>
 800c1ae:	4603      	mov	r3, r0
 800c1b0:	e007      	b.n	800c1c2 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800c1b2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c1b6:	787a      	ldrb	r2, [r7, #1]
 800c1b8:	4619      	mov	r1, r3
 800c1ba:	6878      	ldr	r0, [r7, #4]
 800c1bc:	f7ff ff1a 	bl	800bff4 <pbuf_add_header_impl>
 800c1c0:	4603      	mov	r3, r0
  }
}
 800c1c2:	4618      	mov	r0, r3
 800c1c4:	3708      	adds	r7, #8
 800c1c6:	46bd      	mov	sp, r7
 800c1c8:	bd80      	pop	{r7, pc}

0800c1ca <pbuf_header_force>:
=======
 800c158:	b580      	push	{r7, lr}
 800c15a:	b082      	sub	sp, #8
 800c15c:	af00      	add	r7, sp, #0
 800c15e:	6078      	str	r0, [r7, #4]
 800c160:	460b      	mov	r3, r1
 800c162:	807b      	strh	r3, [r7, #2]
 800c164:	4613      	mov	r3, r2
 800c166:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800c168:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	da08      	bge.n	800c182 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800c170:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c174:	425b      	negs	r3, r3
 800c176:	4619      	mov	r1, r3
 800c178:	6878      	ldr	r0, [r7, #4]
 800c17a:	f7ff ff9b 	bl	800c0b4 <pbuf_remove_header>
 800c17e:	4603      	mov	r3, r0
 800c180:	e007      	b.n	800c192 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800c182:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c186:	787a      	ldrb	r2, [r7, #1]
 800c188:	4619      	mov	r1, r3
 800c18a:	6878      	ldr	r0, [r7, #4]
 800c18c:	f7ff ff1a 	bl	800bfc4 <pbuf_add_header_impl>
 800c190:	4603      	mov	r3, r0
  }
}
 800c192:	4618      	mov	r0, r3
 800c194:	3708      	adds	r7, #8
 800c196:	46bd      	mov	sp, r7
 800c198:	bd80      	pop	{r7, pc}

0800c19a <pbuf_header_force>:
>>>>>>> Stashed changes
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
<<<<<<< Updated upstream
 800c1ca:	b580      	push	{r7, lr}
 800c1cc:	b082      	sub	sp, #8
 800c1ce:	af00      	add	r7, sp, #0
 800c1d0:	6078      	str	r0, [r7, #4]
 800c1d2:	460b      	mov	r3, r1
 800c1d4:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800c1d6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c1da:	2201      	movs	r2, #1
 800c1dc:	4619      	mov	r1, r3
 800c1de:	6878      	ldr	r0, [r7, #4]
 800c1e0:	f7ff ffd2 	bl	800c188 <pbuf_header_impl>
 800c1e4:	4603      	mov	r3, r0
}
 800c1e6:	4618      	mov	r0, r3
 800c1e8:	3708      	adds	r7, #8
 800c1ea:	46bd      	mov	sp, r7
 800c1ec:	bd80      	pop	{r7, pc}
	...

0800c1f0 <pbuf_free>:
=======
 800c19a:	b580      	push	{r7, lr}
 800c19c:	b082      	sub	sp, #8
 800c19e:	af00      	add	r7, sp, #0
 800c1a0:	6078      	str	r0, [r7, #4]
 800c1a2:	460b      	mov	r3, r1
 800c1a4:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800c1a6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c1aa:	2201      	movs	r2, #1
 800c1ac:	4619      	mov	r1, r3
 800c1ae:	6878      	ldr	r0, [r7, #4]
 800c1b0:	f7ff ffd2 	bl	800c158 <pbuf_header_impl>
 800c1b4:	4603      	mov	r3, r0
}
 800c1b6:	4618      	mov	r0, r3
 800c1b8:	3708      	adds	r7, #8
 800c1ba:	46bd      	mov	sp, r7
 800c1bc:	bd80      	pop	{r7, pc}
	...

0800c1c0 <pbuf_free>:
>>>>>>> Stashed changes
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
<<<<<<< Updated upstream
 800c1f0:	b580      	push	{r7, lr}
 800c1f2:	b086      	sub	sp, #24
 800c1f4:	af00      	add	r7, sp, #0
 800c1f6:	6078      	str	r0, [r7, #4]
=======
 800c1c0:	b580      	push	{r7, lr}
 800c1c2:	b086      	sub	sp, #24
 800c1c4:	af00      	add	r7, sp, #0
 800c1c6:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
<<<<<<< Updated upstream
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d10b      	bne.n	800c216 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	2b00      	cmp	r3, #0
 800c202:	d106      	bne.n	800c212 <pbuf_free+0x22>
 800c204:	4b38      	ldr	r3, [pc, #224]	; (800c2e8 <pbuf_free+0xf8>)
 800c206:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800c20a:	4938      	ldr	r1, [pc, #224]	; (800c2ec <pbuf_free+0xfc>)
 800c20c:	4838      	ldr	r0, [pc, #224]	; (800c2f0 <pbuf_free+0x100>)
 800c20e:	f008 f9b9 	bl	8014584 <iprintf>
=======
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d10b      	bne.n	800c1e6 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d106      	bne.n	800c1e2 <pbuf_free+0x22>
 800c1d4:	4b38      	ldr	r3, [pc, #224]	; (800c2b8 <pbuf_free+0xf8>)
 800c1d6:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800c1da:	4938      	ldr	r1, [pc, #224]	; (800c2bc <pbuf_free+0xfc>)
 800c1dc:	4838      	ldr	r0, [pc, #224]	; (800c2c0 <pbuf_free+0x100>)
 800c1de:	f008 f9b9 	bl	8014554 <iprintf>
>>>>>>> Stashed changes
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
<<<<<<< Updated upstream
 800c212:	2300      	movs	r3, #0
 800c214:	e063      	b.n	800c2de <pbuf_free+0xee>
=======
 800c1e2:	2300      	movs	r3, #0
 800c1e4:	e063      	b.n	800c2ae <pbuf_free+0xee>
>>>>>>> Stashed changes
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
<<<<<<< Updated upstream
 800c216:	2300      	movs	r3, #0
 800c218:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800c21a:	e05c      	b.n	800c2d6 <pbuf_free+0xe6>
=======
 800c1e6:	2300      	movs	r3, #0
 800c1e8:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800c1ea:	e05c      	b.n	800c2a6 <pbuf_free+0xe6>
>>>>>>> Stashed changes
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
<<<<<<< Updated upstream
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	7b9b      	ldrb	r3, [r3, #14]
 800c220:	2b00      	cmp	r3, #0
 800c222:	d106      	bne.n	800c232 <pbuf_free+0x42>
 800c224:	4b30      	ldr	r3, [pc, #192]	; (800c2e8 <pbuf_free+0xf8>)
 800c226:	f240 22f1 	movw	r2, #753	; 0x2f1
 800c22a:	4932      	ldr	r1, [pc, #200]	; (800c2f4 <pbuf_free+0x104>)
 800c22c:	4830      	ldr	r0, [pc, #192]	; (800c2f0 <pbuf_free+0x100>)
 800c22e:	f008 f9a9 	bl	8014584 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	7b9b      	ldrb	r3, [r3, #14]
 800c236:	3b01      	subs	r3, #1
 800c238:	b2da      	uxtb	r2, r3
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	739a      	strb	r2, [r3, #14]
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	7b9b      	ldrb	r3, [r3, #14]
 800c242:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800c244:	7dbb      	ldrb	r3, [r7, #22]
 800c246:	2b00      	cmp	r3, #0
 800c248:	d143      	bne.n	800c2d2 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	7b1b      	ldrb	r3, [r3, #12]
 800c254:	f003 030f 	and.w	r3, r3, #15
 800c258:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	7b5b      	ldrb	r3, [r3, #13]
 800c25e:	f003 0302 	and.w	r3, r3, #2
 800c262:	2b00      	cmp	r3, #0
 800c264:	d011      	beq.n	800c28a <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800c26a:	68bb      	ldr	r3, [r7, #8]
 800c26c:	691b      	ldr	r3, [r3, #16]
 800c26e:	2b00      	cmp	r3, #0
 800c270:	d106      	bne.n	800c280 <pbuf_free+0x90>
 800c272:	4b1d      	ldr	r3, [pc, #116]	; (800c2e8 <pbuf_free+0xf8>)
 800c274:	f240 22ff 	movw	r2, #767	; 0x2ff
 800c278:	491f      	ldr	r1, [pc, #124]	; (800c2f8 <pbuf_free+0x108>)
 800c27a:	481d      	ldr	r0, [pc, #116]	; (800c2f0 <pbuf_free+0x100>)
 800c27c:	f008 f982 	bl	8014584 <iprintf>
        pc->custom_free_function(p);
 800c280:	68bb      	ldr	r3, [r7, #8]
 800c282:	691b      	ldr	r3, [r3, #16]
 800c284:	6878      	ldr	r0, [r7, #4]
 800c286:	4798      	blx	r3
 800c288:	e01d      	b.n	800c2c6 <pbuf_free+0xd6>
=======
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	7b9b      	ldrb	r3, [r3, #14]
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d106      	bne.n	800c202 <pbuf_free+0x42>
 800c1f4:	4b30      	ldr	r3, [pc, #192]	; (800c2b8 <pbuf_free+0xf8>)
 800c1f6:	f240 22f1 	movw	r2, #753	; 0x2f1
 800c1fa:	4932      	ldr	r1, [pc, #200]	; (800c2c4 <pbuf_free+0x104>)
 800c1fc:	4830      	ldr	r0, [pc, #192]	; (800c2c0 <pbuf_free+0x100>)
 800c1fe:	f008 f9a9 	bl	8014554 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	7b9b      	ldrb	r3, [r3, #14]
 800c206:	3b01      	subs	r3, #1
 800c208:	b2da      	uxtb	r2, r3
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	739a      	strb	r2, [r3, #14]
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	7b9b      	ldrb	r3, [r3, #14]
 800c212:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800c214:	7dbb      	ldrb	r3, [r7, #22]
 800c216:	2b00      	cmp	r3, #0
 800c218:	d143      	bne.n	800c2a2 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	7b1b      	ldrb	r3, [r3, #12]
 800c224:	f003 030f 	and.w	r3, r3, #15
 800c228:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	7b5b      	ldrb	r3, [r3, #13]
 800c22e:	f003 0302 	and.w	r3, r3, #2
 800c232:	2b00      	cmp	r3, #0
 800c234:	d011      	beq.n	800c25a <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800c23a:	68bb      	ldr	r3, [r7, #8]
 800c23c:	691b      	ldr	r3, [r3, #16]
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d106      	bne.n	800c250 <pbuf_free+0x90>
 800c242:	4b1d      	ldr	r3, [pc, #116]	; (800c2b8 <pbuf_free+0xf8>)
 800c244:	f240 22ff 	movw	r2, #767	; 0x2ff
 800c248:	491f      	ldr	r1, [pc, #124]	; (800c2c8 <pbuf_free+0x108>)
 800c24a:	481d      	ldr	r0, [pc, #116]	; (800c2c0 <pbuf_free+0x100>)
 800c24c:	f008 f982 	bl	8014554 <iprintf>
        pc->custom_free_function(p);
 800c250:	68bb      	ldr	r3, [r7, #8]
 800c252:	691b      	ldr	r3, [r3, #16]
 800c254:	6878      	ldr	r0, [r7, #4]
 800c256:	4798      	blx	r3
 800c258:	e01d      	b.n	800c296 <pbuf_free+0xd6>
>>>>>>> Stashed changes
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
<<<<<<< Updated upstream
 800c28a:	7bfb      	ldrb	r3, [r7, #15]
 800c28c:	2b02      	cmp	r3, #2
 800c28e:	d104      	bne.n	800c29a <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 800c290:	6879      	ldr	r1, [r7, #4]
 800c292:	2008      	movs	r0, #8
 800c294:	f7ff f9ba 	bl	800b60c <memp_free>
 800c298:	e015      	b.n	800c2c6 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800c29a:	7bfb      	ldrb	r3, [r7, #15]
 800c29c:	2b01      	cmp	r3, #1
 800c29e:	d104      	bne.n	800c2aa <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 800c2a0:	6879      	ldr	r1, [r7, #4]
 800c2a2:	2007      	movs	r0, #7
 800c2a4:	f7ff f9b2 	bl	800b60c <memp_free>
 800c2a8:	e00d      	b.n	800c2c6 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800c2aa:	7bfb      	ldrb	r3, [r7, #15]
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d103      	bne.n	800c2b8 <pbuf_free+0xc8>
          mem_free(p);
 800c2b0:	6878      	ldr	r0, [r7, #4]
 800c2b2:	f7fe fe8b 	bl	800afcc <mem_free>
 800c2b6:	e006      	b.n	800c2c6 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800c2b8:	4b0b      	ldr	r3, [pc, #44]	; (800c2e8 <pbuf_free+0xf8>)
 800c2ba:	f240 320f 	movw	r2, #783	; 0x30f
 800c2be:	490f      	ldr	r1, [pc, #60]	; (800c2fc <pbuf_free+0x10c>)
 800c2c0:	480b      	ldr	r0, [pc, #44]	; (800c2f0 <pbuf_free+0x100>)
 800c2c2:	f008 f95f 	bl	8014584 <iprintf>
        }
      }
      count++;
 800c2c6:	7dfb      	ldrb	r3, [r7, #23]
 800c2c8:	3301      	adds	r3, #1
 800c2ca:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 800c2cc:	693b      	ldr	r3, [r7, #16]
 800c2ce:	607b      	str	r3, [r7, #4]
 800c2d0:	e001      	b.n	800c2d6 <pbuf_free+0xe6>
=======
 800c25a:	7bfb      	ldrb	r3, [r7, #15]
 800c25c:	2b02      	cmp	r3, #2
 800c25e:	d104      	bne.n	800c26a <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 800c260:	6879      	ldr	r1, [r7, #4]
 800c262:	2008      	movs	r0, #8
 800c264:	f7ff f9ba 	bl	800b5dc <memp_free>
 800c268:	e015      	b.n	800c296 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800c26a:	7bfb      	ldrb	r3, [r7, #15]
 800c26c:	2b01      	cmp	r3, #1
 800c26e:	d104      	bne.n	800c27a <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 800c270:	6879      	ldr	r1, [r7, #4]
 800c272:	2007      	movs	r0, #7
 800c274:	f7ff f9b2 	bl	800b5dc <memp_free>
 800c278:	e00d      	b.n	800c296 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800c27a:	7bfb      	ldrb	r3, [r7, #15]
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d103      	bne.n	800c288 <pbuf_free+0xc8>
          mem_free(p);
 800c280:	6878      	ldr	r0, [r7, #4]
 800c282:	f7fe fe8b 	bl	800af9c <mem_free>
 800c286:	e006      	b.n	800c296 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800c288:	4b0b      	ldr	r3, [pc, #44]	; (800c2b8 <pbuf_free+0xf8>)
 800c28a:	f240 320f 	movw	r2, #783	; 0x30f
 800c28e:	490f      	ldr	r1, [pc, #60]	; (800c2cc <pbuf_free+0x10c>)
 800c290:	480b      	ldr	r0, [pc, #44]	; (800c2c0 <pbuf_free+0x100>)
 800c292:	f008 f95f 	bl	8014554 <iprintf>
        }
      }
      count++;
 800c296:	7dfb      	ldrb	r3, [r7, #23]
 800c298:	3301      	adds	r3, #1
 800c29a:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 800c29c:	693b      	ldr	r3, [r7, #16]
 800c29e:	607b      	str	r3, [r7, #4]
 800c2a0:	e001      	b.n	800c2a6 <pbuf_free+0xe6>
>>>>>>> Stashed changes
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
<<<<<<< Updated upstream
 800c2d2:	2300      	movs	r3, #0
 800c2d4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d19f      	bne.n	800c21c <pbuf_free+0x2c>
=======
 800c2a2:	2300      	movs	r3, #0
 800c2a4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d19f      	bne.n	800c1ec <pbuf_free+0x2c>
>>>>>>> Stashed changes
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
<<<<<<< Updated upstream
 800c2dc:	7dfb      	ldrb	r3, [r7, #23]
}
 800c2de:	4618      	mov	r0, r3
 800c2e0:	3718      	adds	r7, #24
 800c2e2:	46bd      	mov	sp, r7
 800c2e4:	bd80      	pop	{r7, pc}
 800c2e6:	bf00      	nop
 800c2e8:	08015f28 	.word	0x08015f28
 800c2ec:	0801608c 	.word	0x0801608c
 800c2f0:	08015f88 	.word	0x08015f88
 800c2f4:	080160b8 	.word	0x080160b8
 800c2f8:	080160d0 	.word	0x080160d0
 800c2fc:	080160f4 	.word	0x080160f4

0800c300 <pbuf_clen>:
=======
 800c2ac:	7dfb      	ldrb	r3, [r7, #23]
}
 800c2ae:	4618      	mov	r0, r3
 800c2b0:	3718      	adds	r7, #24
 800c2b2:	46bd      	mov	sp, r7
 800c2b4:	bd80      	pop	{r7, pc}
 800c2b6:	bf00      	nop
 800c2b8:	08015f0c 	.word	0x08015f0c
 800c2bc:	08016070 	.word	0x08016070
 800c2c0:	08015f6c 	.word	0x08015f6c
 800c2c4:	0801609c 	.word	0x0801609c
 800c2c8:	080160b4 	.word	0x080160b4
 800c2cc:	080160d8 	.word	0x080160d8

0800c2d0 <pbuf_clen>:
>>>>>>> Stashed changes
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
<<<<<<< Updated upstream
 800c300:	b480      	push	{r7}
 800c302:	b085      	sub	sp, #20
 800c304:	af00      	add	r7, sp, #0
 800c306:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800c308:	2300      	movs	r3, #0
 800c30a:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800c30c:	e005      	b.n	800c31a <pbuf_clen+0x1a>
    ++len;
 800c30e:	89fb      	ldrh	r3, [r7, #14]
 800c310:	3301      	adds	r3, #1
 800c312:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d1f6      	bne.n	800c30e <pbuf_clen+0xe>
  }
  return len;
 800c320:	89fb      	ldrh	r3, [r7, #14]
}
 800c322:	4618      	mov	r0, r3
 800c324:	3714      	adds	r7, #20
 800c326:	46bd      	mov	sp, r7
 800c328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c32c:	4770      	bx	lr
	...

0800c330 <pbuf_ref>:
=======
 800c2d0:	b480      	push	{r7}
 800c2d2:	b085      	sub	sp, #20
 800c2d4:	af00      	add	r7, sp, #0
 800c2d6:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800c2d8:	2300      	movs	r3, #0
 800c2da:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800c2dc:	e005      	b.n	800c2ea <pbuf_clen+0x1a>
    ++len;
 800c2de:	89fb      	ldrh	r3, [r7, #14]
 800c2e0:	3301      	adds	r3, #1
 800c2e2:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d1f6      	bne.n	800c2de <pbuf_clen+0xe>
  }
  return len;
 800c2f0:	89fb      	ldrh	r3, [r7, #14]
}
 800c2f2:	4618      	mov	r0, r3
 800c2f4:	3714      	adds	r7, #20
 800c2f6:	46bd      	mov	sp, r7
 800c2f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2fc:	4770      	bx	lr
	...

0800c300 <pbuf_ref>:
>>>>>>> Stashed changes
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
<<<<<<< Updated upstream
 800c330:	b580      	push	{r7, lr}
 800c332:	b082      	sub	sp, #8
 800c334:	af00      	add	r7, sp, #0
 800c336:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d010      	beq.n	800c360 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	7b9b      	ldrb	r3, [r3, #14]
 800c342:	3301      	adds	r3, #1
 800c344:	b2da      	uxtb	r2, r3
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	7b9b      	ldrb	r3, [r3, #14]
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d106      	bne.n	800c360 <pbuf_ref+0x30>
 800c352:	4b05      	ldr	r3, [pc, #20]	; (800c368 <pbuf_ref+0x38>)
 800c354:	f240 3242 	movw	r2, #834	; 0x342
 800c358:	4904      	ldr	r1, [pc, #16]	; (800c36c <pbuf_ref+0x3c>)
 800c35a:	4805      	ldr	r0, [pc, #20]	; (800c370 <pbuf_ref+0x40>)
 800c35c:	f008 f912 	bl	8014584 <iprintf>
  }
}
 800c360:	bf00      	nop
 800c362:	3708      	adds	r7, #8
 800c364:	46bd      	mov	sp, r7
 800c366:	bd80      	pop	{r7, pc}
 800c368:	08015f28 	.word	0x08015f28
 800c36c:	08016108 	.word	0x08016108
 800c370:	08015f88 	.word	0x08015f88

0800c374 <pbuf_cat>:
=======
 800c300:	b580      	push	{r7, lr}
 800c302:	b082      	sub	sp, #8
 800c304:	af00      	add	r7, sp, #0
 800c306:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d010      	beq.n	800c330 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	7b9b      	ldrb	r3, [r3, #14]
 800c312:	3301      	adds	r3, #1
 800c314:	b2da      	uxtb	r2, r3
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	7b9b      	ldrb	r3, [r3, #14]
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d106      	bne.n	800c330 <pbuf_ref+0x30>
 800c322:	4b05      	ldr	r3, [pc, #20]	; (800c338 <pbuf_ref+0x38>)
 800c324:	f240 3242 	movw	r2, #834	; 0x342
 800c328:	4904      	ldr	r1, [pc, #16]	; (800c33c <pbuf_ref+0x3c>)
 800c32a:	4805      	ldr	r0, [pc, #20]	; (800c340 <pbuf_ref+0x40>)
 800c32c:	f008 f912 	bl	8014554 <iprintf>
  }
}
 800c330:	bf00      	nop
 800c332:	3708      	adds	r7, #8
 800c334:	46bd      	mov	sp, r7
 800c336:	bd80      	pop	{r7, pc}
 800c338:	08015f0c 	.word	0x08015f0c
 800c33c:	080160ec 	.word	0x080160ec
 800c340:	08015f6c 	.word	0x08015f6c

0800c344 <pbuf_cat>:
>>>>>>> Stashed changes
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
<<<<<<< Updated upstream
 800c374:	b580      	push	{r7, lr}
 800c376:	b084      	sub	sp, #16
 800c378:	af00      	add	r7, sp, #0
 800c37a:	6078      	str	r0, [r7, #4]
 800c37c:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	2b00      	cmp	r3, #0
 800c382:	d002      	beq.n	800c38a <pbuf_cat+0x16>
 800c384:	683b      	ldr	r3, [r7, #0]
 800c386:	2b00      	cmp	r3, #0
 800c388:	d107      	bne.n	800c39a <pbuf_cat+0x26>
 800c38a:	4b20      	ldr	r3, [pc, #128]	; (800c40c <pbuf_cat+0x98>)
 800c38c:	f240 3259 	movw	r2, #857	; 0x359
 800c390:	491f      	ldr	r1, [pc, #124]	; (800c410 <pbuf_cat+0x9c>)
 800c392:	4820      	ldr	r0, [pc, #128]	; (800c414 <pbuf_cat+0xa0>)
 800c394:	f008 f8f6 	bl	8014584 <iprintf>
 800c398:	e034      	b.n	800c404 <pbuf_cat+0x90>
=======
 800c344:	b580      	push	{r7, lr}
 800c346:	b084      	sub	sp, #16
 800c348:	af00      	add	r7, sp, #0
 800c34a:	6078      	str	r0, [r7, #4]
 800c34c:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	2b00      	cmp	r3, #0
 800c352:	d002      	beq.n	800c35a <pbuf_cat+0x16>
 800c354:	683b      	ldr	r3, [r7, #0]
 800c356:	2b00      	cmp	r3, #0
 800c358:	d107      	bne.n	800c36a <pbuf_cat+0x26>
 800c35a:	4b20      	ldr	r3, [pc, #128]	; (800c3dc <pbuf_cat+0x98>)
 800c35c:	f240 3259 	movw	r2, #857	; 0x359
 800c360:	491f      	ldr	r1, [pc, #124]	; (800c3e0 <pbuf_cat+0x9c>)
 800c362:	4820      	ldr	r0, [pc, #128]	; (800c3e4 <pbuf_cat+0xa0>)
 800c364:	f008 f8f6 	bl	8014554 <iprintf>
 800c368:	e034      	b.n	800c3d4 <pbuf_cat+0x90>
>>>>>>> Stashed changes
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
<<<<<<< Updated upstream
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	60fb      	str	r3, [r7, #12]
 800c39e:	e00a      	b.n	800c3b6 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	891a      	ldrh	r2, [r3, #8]
 800c3a4:	683b      	ldr	r3, [r7, #0]
 800c3a6:	891b      	ldrh	r3, [r3, #8]
 800c3a8:	4413      	add	r3, r2
 800c3aa:	b29a      	uxth	r2, r3
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800c3b0:	68fb      	ldr	r3, [r7, #12]
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	60fb      	str	r3, [r7, #12]
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d1f0      	bne.n	800c3a0 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	891a      	ldrh	r2, [r3, #8]
 800c3c2:	68fb      	ldr	r3, [r7, #12]
 800c3c4:	895b      	ldrh	r3, [r3, #10]
 800c3c6:	429a      	cmp	r2, r3
 800c3c8:	d006      	beq.n	800c3d8 <pbuf_cat+0x64>
 800c3ca:	4b10      	ldr	r3, [pc, #64]	; (800c40c <pbuf_cat+0x98>)
 800c3cc:	f240 3262 	movw	r2, #866	; 0x362
 800c3d0:	4911      	ldr	r1, [pc, #68]	; (800c418 <pbuf_cat+0xa4>)
 800c3d2:	4810      	ldr	r0, [pc, #64]	; (800c414 <pbuf_cat+0xa0>)
 800c3d4:	f008 f8d6 	bl	8014584 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d006      	beq.n	800c3ee <pbuf_cat+0x7a>
 800c3e0:	4b0a      	ldr	r3, [pc, #40]	; (800c40c <pbuf_cat+0x98>)
 800c3e2:	f240 3263 	movw	r2, #867	; 0x363
 800c3e6:	490d      	ldr	r1, [pc, #52]	; (800c41c <pbuf_cat+0xa8>)
 800c3e8:	480a      	ldr	r0, [pc, #40]	; (800c414 <pbuf_cat+0xa0>)
 800c3ea:	f008 f8cb 	bl	8014584 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	891a      	ldrh	r2, [r3, #8]
 800c3f2:	683b      	ldr	r3, [r7, #0]
 800c3f4:	891b      	ldrh	r3, [r3, #8]
 800c3f6:	4413      	add	r3, r2
 800c3f8:	b29a      	uxth	r2, r3
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	683a      	ldr	r2, [r7, #0]
 800c402:	601a      	str	r2, [r3, #0]
=======
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	60fb      	str	r3, [r7, #12]
 800c36e:	e00a      	b.n	800c386 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	891a      	ldrh	r2, [r3, #8]
 800c374:	683b      	ldr	r3, [r7, #0]
 800c376:	891b      	ldrh	r3, [r3, #8]
 800c378:	4413      	add	r3, r2
 800c37a:	b29a      	uxth	r2, r3
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800c380:	68fb      	ldr	r3, [r7, #12]
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	60fb      	str	r3, [r7, #12]
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d1f0      	bne.n	800c370 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	891a      	ldrh	r2, [r3, #8]
 800c392:	68fb      	ldr	r3, [r7, #12]
 800c394:	895b      	ldrh	r3, [r3, #10]
 800c396:	429a      	cmp	r2, r3
 800c398:	d006      	beq.n	800c3a8 <pbuf_cat+0x64>
 800c39a:	4b10      	ldr	r3, [pc, #64]	; (800c3dc <pbuf_cat+0x98>)
 800c39c:	f240 3262 	movw	r2, #866	; 0x362
 800c3a0:	4911      	ldr	r1, [pc, #68]	; (800c3e8 <pbuf_cat+0xa4>)
 800c3a2:	4810      	ldr	r0, [pc, #64]	; (800c3e4 <pbuf_cat+0xa0>)
 800c3a4:	f008 f8d6 	bl	8014554 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d006      	beq.n	800c3be <pbuf_cat+0x7a>
 800c3b0:	4b0a      	ldr	r3, [pc, #40]	; (800c3dc <pbuf_cat+0x98>)
 800c3b2:	f240 3263 	movw	r2, #867	; 0x363
 800c3b6:	490d      	ldr	r1, [pc, #52]	; (800c3ec <pbuf_cat+0xa8>)
 800c3b8:	480a      	ldr	r0, [pc, #40]	; (800c3e4 <pbuf_cat+0xa0>)
 800c3ba:	f008 f8cb 	bl	8014554 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	891a      	ldrh	r2, [r3, #8]
 800c3c2:	683b      	ldr	r3, [r7, #0]
 800c3c4:	891b      	ldrh	r3, [r3, #8]
 800c3c6:	4413      	add	r3, r2
 800c3c8:	b29a      	uxth	r2, r3
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	683a      	ldr	r2, [r7, #0]
 800c3d2:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
<<<<<<< Updated upstream
 800c404:	3710      	adds	r7, #16
 800c406:	46bd      	mov	sp, r7
 800c408:	bd80      	pop	{r7, pc}
 800c40a:	bf00      	nop
 800c40c:	08015f28 	.word	0x08015f28
 800c410:	0801611c 	.word	0x0801611c
 800c414:	08015f88 	.word	0x08015f88
 800c418:	08016154 	.word	0x08016154
 800c41c:	08016184 	.word	0x08016184

0800c420 <pbuf_copy>:
=======
 800c3d4:	3710      	adds	r7, #16
 800c3d6:	46bd      	mov	sp, r7
 800c3d8:	bd80      	pop	{r7, pc}
 800c3da:	bf00      	nop
 800c3dc:	08015f0c 	.word	0x08015f0c
 800c3e0:	08016100 	.word	0x08016100
 800c3e4:	08015f6c 	.word	0x08015f6c
 800c3e8:	08016138 	.word	0x08016138
 800c3ec:	08016168 	.word	0x08016168

0800c3f0 <pbuf_copy>:
>>>>>>> Stashed changes
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
<<<<<<< Updated upstream
 800c420:	b580      	push	{r7, lr}
 800c422:	b086      	sub	sp, #24
 800c424:	af00      	add	r7, sp, #0
 800c426:	6078      	str	r0, [r7, #4]
 800c428:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800c42a:	2300      	movs	r3, #0
 800c42c:	617b      	str	r3, [r7, #20]
 800c42e:	2300      	movs	r3, #0
 800c430:	613b      	str	r3, [r7, #16]
=======
 800c3f0:	b580      	push	{r7, lr}
 800c3f2:	b086      	sub	sp, #24
 800c3f4:	af00      	add	r7, sp, #0
 800c3f6:	6078      	str	r0, [r7, #4]
 800c3f8:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800c3fa:	2300      	movs	r3, #0
 800c3fc:	617b      	str	r3, [r7, #20]
 800c3fe:	2300      	movs	r3, #0
 800c400:	613b      	str	r3, [r7, #16]
>>>>>>> Stashed changes

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
<<<<<<< Updated upstream
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	2b00      	cmp	r3, #0
 800c436:	d008      	beq.n	800c44a <pbuf_copy+0x2a>
 800c438:	683b      	ldr	r3, [r7, #0]
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d005      	beq.n	800c44a <pbuf_copy+0x2a>
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	891a      	ldrh	r2, [r3, #8]
 800c442:	683b      	ldr	r3, [r7, #0]
 800c444:	891b      	ldrh	r3, [r3, #8]
 800c446:	429a      	cmp	r2, r3
 800c448:	d209      	bcs.n	800c45e <pbuf_copy+0x3e>
 800c44a:	4b57      	ldr	r3, [pc, #348]	; (800c5a8 <pbuf_copy+0x188>)
 800c44c:	f240 32c9 	movw	r2, #969	; 0x3c9
 800c450:	4956      	ldr	r1, [pc, #344]	; (800c5ac <pbuf_copy+0x18c>)
 800c452:	4857      	ldr	r0, [pc, #348]	; (800c5b0 <pbuf_copy+0x190>)
 800c454:	f008 f896 	bl	8014584 <iprintf>
 800c458:	f06f 030f 	mvn.w	r3, #15
 800c45c:	e09f      	b.n	800c59e <pbuf_copy+0x17e>
=======
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	2b00      	cmp	r3, #0
 800c406:	d008      	beq.n	800c41a <pbuf_copy+0x2a>
 800c408:	683b      	ldr	r3, [r7, #0]
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d005      	beq.n	800c41a <pbuf_copy+0x2a>
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	891a      	ldrh	r2, [r3, #8]
 800c412:	683b      	ldr	r3, [r7, #0]
 800c414:	891b      	ldrh	r3, [r3, #8]
 800c416:	429a      	cmp	r2, r3
 800c418:	d209      	bcs.n	800c42e <pbuf_copy+0x3e>
 800c41a:	4b57      	ldr	r3, [pc, #348]	; (800c578 <pbuf_copy+0x188>)
 800c41c:	f240 32c9 	movw	r2, #969	; 0x3c9
 800c420:	4956      	ldr	r1, [pc, #344]	; (800c57c <pbuf_copy+0x18c>)
 800c422:	4857      	ldr	r0, [pc, #348]	; (800c580 <pbuf_copy+0x190>)
 800c424:	f008 f896 	bl	8014554 <iprintf>
 800c428:	f06f 030f 	mvn.w	r3, #15
 800c42c:	e09f      	b.n	800c56e <pbuf_copy+0x17e>
>>>>>>> Stashed changes
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
<<<<<<< Updated upstream
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	895b      	ldrh	r3, [r3, #10]
 800c462:	461a      	mov	r2, r3
 800c464:	697b      	ldr	r3, [r7, #20]
 800c466:	1ad2      	subs	r2, r2, r3
 800c468:	683b      	ldr	r3, [r7, #0]
 800c46a:	895b      	ldrh	r3, [r3, #10]
 800c46c:	4619      	mov	r1, r3
 800c46e:	693b      	ldr	r3, [r7, #16]
 800c470:	1acb      	subs	r3, r1, r3
 800c472:	429a      	cmp	r2, r3
 800c474:	d306      	bcc.n	800c484 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800c476:	683b      	ldr	r3, [r7, #0]
 800c478:	895b      	ldrh	r3, [r3, #10]
 800c47a:	461a      	mov	r2, r3
 800c47c:	693b      	ldr	r3, [r7, #16]
 800c47e:	1ad3      	subs	r3, r2, r3
 800c480:	60fb      	str	r3, [r7, #12]
 800c482:	e005      	b.n	800c490 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	895b      	ldrh	r3, [r3, #10]
 800c488:	461a      	mov	r2, r3
 800c48a:	697b      	ldr	r3, [r7, #20]
 800c48c:	1ad3      	subs	r3, r2, r3
 800c48e:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	685a      	ldr	r2, [r3, #4]
 800c494:	697b      	ldr	r3, [r7, #20]
 800c496:	18d0      	adds	r0, r2, r3
 800c498:	683b      	ldr	r3, [r7, #0]
 800c49a:	685a      	ldr	r2, [r3, #4]
 800c49c:	693b      	ldr	r3, [r7, #16]
 800c49e:	4413      	add	r3, r2
 800c4a0:	68fa      	ldr	r2, [r7, #12]
 800c4a2:	4619      	mov	r1, r3
 800c4a4:	f008 f83e 	bl	8014524 <memcpy>
    offset_to += len;
 800c4a8:	697a      	ldr	r2, [r7, #20]
 800c4aa:	68fb      	ldr	r3, [r7, #12]
 800c4ac:	4413      	add	r3, r2
 800c4ae:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800c4b0:	693a      	ldr	r2, [r7, #16]
 800c4b2:	68fb      	ldr	r3, [r7, #12]
 800c4b4:	4413      	add	r3, r2
 800c4b6:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	895b      	ldrh	r3, [r3, #10]
 800c4bc:	461a      	mov	r2, r3
 800c4be:	697b      	ldr	r3, [r7, #20]
 800c4c0:	4293      	cmp	r3, r2
 800c4c2:	d906      	bls.n	800c4d2 <pbuf_copy+0xb2>
 800c4c4:	4b38      	ldr	r3, [pc, #224]	; (800c5a8 <pbuf_copy+0x188>)
 800c4c6:	f240 32d9 	movw	r2, #985	; 0x3d9
 800c4ca:	493a      	ldr	r1, [pc, #232]	; (800c5b4 <pbuf_copy+0x194>)
 800c4cc:	4838      	ldr	r0, [pc, #224]	; (800c5b0 <pbuf_copy+0x190>)
 800c4ce:	f008 f859 	bl	8014584 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800c4d2:	683b      	ldr	r3, [r7, #0]
 800c4d4:	895b      	ldrh	r3, [r3, #10]
 800c4d6:	461a      	mov	r2, r3
 800c4d8:	693b      	ldr	r3, [r7, #16]
 800c4da:	4293      	cmp	r3, r2
 800c4dc:	d906      	bls.n	800c4ec <pbuf_copy+0xcc>
 800c4de:	4b32      	ldr	r3, [pc, #200]	; (800c5a8 <pbuf_copy+0x188>)
 800c4e0:	f240 32da 	movw	r2, #986	; 0x3da
 800c4e4:	4934      	ldr	r1, [pc, #208]	; (800c5b8 <pbuf_copy+0x198>)
 800c4e6:	4832      	ldr	r0, [pc, #200]	; (800c5b0 <pbuf_copy+0x190>)
 800c4e8:	f008 f84c 	bl	8014584 <iprintf>
    if (offset_from >= p_from->len) {
 800c4ec:	683b      	ldr	r3, [r7, #0]
 800c4ee:	895b      	ldrh	r3, [r3, #10]
 800c4f0:	461a      	mov	r2, r3
 800c4f2:	693b      	ldr	r3, [r7, #16]
 800c4f4:	4293      	cmp	r3, r2
 800c4f6:	d304      	bcc.n	800c502 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800c4f8:	2300      	movs	r3, #0
 800c4fa:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800c4fc:	683b      	ldr	r3, [r7, #0]
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	895b      	ldrh	r3, [r3, #10]
 800c506:	461a      	mov	r2, r3
 800c508:	697b      	ldr	r3, [r7, #20]
 800c50a:	4293      	cmp	r3, r2
 800c50c:	d114      	bne.n	800c538 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800c50e:	2300      	movs	r3, #0
 800c510:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d10c      	bne.n	800c538 <pbuf_copy+0x118>
 800c51e:	683b      	ldr	r3, [r7, #0]
 800c520:	2b00      	cmp	r3, #0
 800c522:	d009      	beq.n	800c538 <pbuf_copy+0x118>
 800c524:	4b20      	ldr	r3, [pc, #128]	; (800c5a8 <pbuf_copy+0x188>)
 800c526:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800c52a:	4924      	ldr	r1, [pc, #144]	; (800c5bc <pbuf_copy+0x19c>)
 800c52c:	4820      	ldr	r0, [pc, #128]	; (800c5b0 <pbuf_copy+0x190>)
 800c52e:	f008 f829 	bl	8014584 <iprintf>
 800c532:	f06f 030f 	mvn.w	r3, #15
 800c536:	e032      	b.n	800c59e <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800c538:	683b      	ldr	r3, [r7, #0]
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d013      	beq.n	800c566 <pbuf_copy+0x146>
 800c53e:	683b      	ldr	r3, [r7, #0]
 800c540:	895a      	ldrh	r2, [r3, #10]
 800c542:	683b      	ldr	r3, [r7, #0]
 800c544:	891b      	ldrh	r3, [r3, #8]
 800c546:	429a      	cmp	r2, r3
 800c548:	d10d      	bne.n	800c566 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800c54a:	683b      	ldr	r3, [r7, #0]
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d009      	beq.n	800c566 <pbuf_copy+0x146>
 800c552:	4b15      	ldr	r3, [pc, #84]	; (800c5a8 <pbuf_copy+0x188>)
 800c554:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800c558:	4919      	ldr	r1, [pc, #100]	; (800c5c0 <pbuf_copy+0x1a0>)
 800c55a:	4815      	ldr	r0, [pc, #84]	; (800c5b0 <pbuf_copy+0x190>)
 800c55c:	f008 f812 	bl	8014584 <iprintf>
 800c560:	f06f 0305 	mvn.w	r3, #5
 800c564:	e01b      	b.n	800c59e <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d013      	beq.n	800c594 <pbuf_copy+0x174>
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	895a      	ldrh	r2, [r3, #10]
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	891b      	ldrh	r3, [r3, #8]
 800c574:	429a      	cmp	r2, r3
 800c576:	d10d      	bne.n	800c594 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d009      	beq.n	800c594 <pbuf_copy+0x174>
 800c580:	4b09      	ldr	r3, [pc, #36]	; (800c5a8 <pbuf_copy+0x188>)
 800c582:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800c586:	490e      	ldr	r1, [pc, #56]	; (800c5c0 <pbuf_copy+0x1a0>)
 800c588:	4809      	ldr	r0, [pc, #36]	; (800c5b0 <pbuf_copy+0x190>)
 800c58a:	f007 fffb 	bl	8014584 <iprintf>
 800c58e:	f06f 0305 	mvn.w	r3, #5
 800c592:	e004      	b.n	800c59e <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800c594:	683b      	ldr	r3, [r7, #0]
 800c596:	2b00      	cmp	r3, #0
 800c598:	f47f af61 	bne.w	800c45e <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800c59c:	2300      	movs	r3, #0
}
 800c59e:	4618      	mov	r0, r3
 800c5a0:	3718      	adds	r7, #24
 800c5a2:	46bd      	mov	sp, r7
 800c5a4:	bd80      	pop	{r7, pc}
 800c5a6:	bf00      	nop
 800c5a8:	08015f28 	.word	0x08015f28
 800c5ac:	080161d0 	.word	0x080161d0
 800c5b0:	08015f88 	.word	0x08015f88
 800c5b4:	08016200 	.word	0x08016200
 800c5b8:	08016218 	.word	0x08016218
 800c5bc:	08016234 	.word	0x08016234
 800c5c0:	08016244 	.word	0x08016244

0800c5c4 <pbuf_copy_partial>:
=======
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	895b      	ldrh	r3, [r3, #10]
 800c432:	461a      	mov	r2, r3
 800c434:	697b      	ldr	r3, [r7, #20]
 800c436:	1ad2      	subs	r2, r2, r3
 800c438:	683b      	ldr	r3, [r7, #0]
 800c43a:	895b      	ldrh	r3, [r3, #10]
 800c43c:	4619      	mov	r1, r3
 800c43e:	693b      	ldr	r3, [r7, #16]
 800c440:	1acb      	subs	r3, r1, r3
 800c442:	429a      	cmp	r2, r3
 800c444:	d306      	bcc.n	800c454 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800c446:	683b      	ldr	r3, [r7, #0]
 800c448:	895b      	ldrh	r3, [r3, #10]
 800c44a:	461a      	mov	r2, r3
 800c44c:	693b      	ldr	r3, [r7, #16]
 800c44e:	1ad3      	subs	r3, r2, r3
 800c450:	60fb      	str	r3, [r7, #12]
 800c452:	e005      	b.n	800c460 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	895b      	ldrh	r3, [r3, #10]
 800c458:	461a      	mov	r2, r3
 800c45a:	697b      	ldr	r3, [r7, #20]
 800c45c:	1ad3      	subs	r3, r2, r3
 800c45e:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	685a      	ldr	r2, [r3, #4]
 800c464:	697b      	ldr	r3, [r7, #20]
 800c466:	18d0      	adds	r0, r2, r3
 800c468:	683b      	ldr	r3, [r7, #0]
 800c46a:	685a      	ldr	r2, [r3, #4]
 800c46c:	693b      	ldr	r3, [r7, #16]
 800c46e:	4413      	add	r3, r2
 800c470:	68fa      	ldr	r2, [r7, #12]
 800c472:	4619      	mov	r1, r3
 800c474:	f008 f83e 	bl	80144f4 <memcpy>
    offset_to += len;
 800c478:	697a      	ldr	r2, [r7, #20]
 800c47a:	68fb      	ldr	r3, [r7, #12]
 800c47c:	4413      	add	r3, r2
 800c47e:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800c480:	693a      	ldr	r2, [r7, #16]
 800c482:	68fb      	ldr	r3, [r7, #12]
 800c484:	4413      	add	r3, r2
 800c486:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	895b      	ldrh	r3, [r3, #10]
 800c48c:	461a      	mov	r2, r3
 800c48e:	697b      	ldr	r3, [r7, #20]
 800c490:	4293      	cmp	r3, r2
 800c492:	d906      	bls.n	800c4a2 <pbuf_copy+0xb2>
 800c494:	4b38      	ldr	r3, [pc, #224]	; (800c578 <pbuf_copy+0x188>)
 800c496:	f240 32d9 	movw	r2, #985	; 0x3d9
 800c49a:	493a      	ldr	r1, [pc, #232]	; (800c584 <pbuf_copy+0x194>)
 800c49c:	4838      	ldr	r0, [pc, #224]	; (800c580 <pbuf_copy+0x190>)
 800c49e:	f008 f859 	bl	8014554 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800c4a2:	683b      	ldr	r3, [r7, #0]
 800c4a4:	895b      	ldrh	r3, [r3, #10]
 800c4a6:	461a      	mov	r2, r3
 800c4a8:	693b      	ldr	r3, [r7, #16]
 800c4aa:	4293      	cmp	r3, r2
 800c4ac:	d906      	bls.n	800c4bc <pbuf_copy+0xcc>
 800c4ae:	4b32      	ldr	r3, [pc, #200]	; (800c578 <pbuf_copy+0x188>)
 800c4b0:	f240 32da 	movw	r2, #986	; 0x3da
 800c4b4:	4934      	ldr	r1, [pc, #208]	; (800c588 <pbuf_copy+0x198>)
 800c4b6:	4832      	ldr	r0, [pc, #200]	; (800c580 <pbuf_copy+0x190>)
 800c4b8:	f008 f84c 	bl	8014554 <iprintf>
    if (offset_from >= p_from->len) {
 800c4bc:	683b      	ldr	r3, [r7, #0]
 800c4be:	895b      	ldrh	r3, [r3, #10]
 800c4c0:	461a      	mov	r2, r3
 800c4c2:	693b      	ldr	r3, [r7, #16]
 800c4c4:	4293      	cmp	r3, r2
 800c4c6:	d304      	bcc.n	800c4d2 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800c4c8:	2300      	movs	r3, #0
 800c4ca:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800c4cc:	683b      	ldr	r3, [r7, #0]
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	895b      	ldrh	r3, [r3, #10]
 800c4d6:	461a      	mov	r2, r3
 800c4d8:	697b      	ldr	r3, [r7, #20]
 800c4da:	4293      	cmp	r3, r2
 800c4dc:	d114      	bne.n	800c508 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800c4de:	2300      	movs	r3, #0
 800c4e0:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d10c      	bne.n	800c508 <pbuf_copy+0x118>
 800c4ee:	683b      	ldr	r3, [r7, #0]
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d009      	beq.n	800c508 <pbuf_copy+0x118>
 800c4f4:	4b20      	ldr	r3, [pc, #128]	; (800c578 <pbuf_copy+0x188>)
 800c4f6:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800c4fa:	4924      	ldr	r1, [pc, #144]	; (800c58c <pbuf_copy+0x19c>)
 800c4fc:	4820      	ldr	r0, [pc, #128]	; (800c580 <pbuf_copy+0x190>)
 800c4fe:	f008 f829 	bl	8014554 <iprintf>
 800c502:	f06f 030f 	mvn.w	r3, #15
 800c506:	e032      	b.n	800c56e <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800c508:	683b      	ldr	r3, [r7, #0]
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d013      	beq.n	800c536 <pbuf_copy+0x146>
 800c50e:	683b      	ldr	r3, [r7, #0]
 800c510:	895a      	ldrh	r2, [r3, #10]
 800c512:	683b      	ldr	r3, [r7, #0]
 800c514:	891b      	ldrh	r3, [r3, #8]
 800c516:	429a      	cmp	r2, r3
 800c518:	d10d      	bne.n	800c536 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800c51a:	683b      	ldr	r3, [r7, #0]
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d009      	beq.n	800c536 <pbuf_copy+0x146>
 800c522:	4b15      	ldr	r3, [pc, #84]	; (800c578 <pbuf_copy+0x188>)
 800c524:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800c528:	4919      	ldr	r1, [pc, #100]	; (800c590 <pbuf_copy+0x1a0>)
 800c52a:	4815      	ldr	r0, [pc, #84]	; (800c580 <pbuf_copy+0x190>)
 800c52c:	f008 f812 	bl	8014554 <iprintf>
 800c530:	f06f 0305 	mvn.w	r3, #5
 800c534:	e01b      	b.n	800c56e <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d013      	beq.n	800c564 <pbuf_copy+0x174>
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	895a      	ldrh	r2, [r3, #10]
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	891b      	ldrh	r3, [r3, #8]
 800c544:	429a      	cmp	r2, r3
 800c546:	d10d      	bne.n	800c564 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d009      	beq.n	800c564 <pbuf_copy+0x174>
 800c550:	4b09      	ldr	r3, [pc, #36]	; (800c578 <pbuf_copy+0x188>)
 800c552:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800c556:	490e      	ldr	r1, [pc, #56]	; (800c590 <pbuf_copy+0x1a0>)
 800c558:	4809      	ldr	r0, [pc, #36]	; (800c580 <pbuf_copy+0x190>)
 800c55a:	f007 fffb 	bl	8014554 <iprintf>
 800c55e:	f06f 0305 	mvn.w	r3, #5
 800c562:	e004      	b.n	800c56e <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800c564:	683b      	ldr	r3, [r7, #0]
 800c566:	2b00      	cmp	r3, #0
 800c568:	f47f af61 	bne.w	800c42e <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800c56c:	2300      	movs	r3, #0
}
 800c56e:	4618      	mov	r0, r3
 800c570:	3718      	adds	r7, #24
 800c572:	46bd      	mov	sp, r7
 800c574:	bd80      	pop	{r7, pc}
 800c576:	bf00      	nop
 800c578:	08015f0c 	.word	0x08015f0c
 800c57c:	080161b4 	.word	0x080161b4
 800c580:	08015f6c 	.word	0x08015f6c
 800c584:	080161e4 	.word	0x080161e4
 800c588:	080161fc 	.word	0x080161fc
 800c58c:	08016218 	.word	0x08016218
 800c590:	08016228 	.word	0x08016228

0800c594 <pbuf_copy_partial>:
>>>>>>> Stashed changes
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
<<<<<<< Updated upstream
 800c5c4:	b580      	push	{r7, lr}
 800c5c6:	b088      	sub	sp, #32
 800c5c8:	af00      	add	r7, sp, #0
 800c5ca:	60f8      	str	r0, [r7, #12]
 800c5cc:	60b9      	str	r1, [r7, #8]
 800c5ce:	4611      	mov	r1, r2
 800c5d0:	461a      	mov	r2, r3
 800c5d2:	460b      	mov	r3, r1
 800c5d4:	80fb      	strh	r3, [r7, #6]
 800c5d6:	4613      	mov	r3, r2
 800c5d8:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800c5da:	2300      	movs	r3, #0
 800c5dc:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800c5de:	2300      	movs	r3, #0
 800c5e0:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d108      	bne.n	800c5fa <pbuf_copy_partial+0x36>
 800c5e8:	4b2b      	ldr	r3, [pc, #172]	; (800c698 <pbuf_copy_partial+0xd4>)
 800c5ea:	f240 420a 	movw	r2, #1034	; 0x40a
 800c5ee:	492b      	ldr	r1, [pc, #172]	; (800c69c <pbuf_copy_partial+0xd8>)
 800c5f0:	482b      	ldr	r0, [pc, #172]	; (800c6a0 <pbuf_copy_partial+0xdc>)
 800c5f2:	f007 ffc7 	bl	8014584 <iprintf>
 800c5f6:	2300      	movs	r3, #0
 800c5f8:	e04a      	b.n	800c690 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800c5fa:	68bb      	ldr	r3, [r7, #8]
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d108      	bne.n	800c612 <pbuf_copy_partial+0x4e>
 800c600:	4b25      	ldr	r3, [pc, #148]	; (800c698 <pbuf_copy_partial+0xd4>)
 800c602:	f240 420b 	movw	r2, #1035	; 0x40b
 800c606:	4927      	ldr	r1, [pc, #156]	; (800c6a4 <pbuf_copy_partial+0xe0>)
 800c608:	4825      	ldr	r0, [pc, #148]	; (800c6a0 <pbuf_copy_partial+0xdc>)
 800c60a:	f007 ffbb 	bl	8014584 <iprintf>
 800c60e:	2300      	movs	r3, #0
 800c610:	e03e      	b.n	800c690 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800c612:	68fb      	ldr	r3, [r7, #12]
 800c614:	61fb      	str	r3, [r7, #28]
 800c616:	e034      	b.n	800c682 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800c618:	88bb      	ldrh	r3, [r7, #4]
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d00a      	beq.n	800c634 <pbuf_copy_partial+0x70>
 800c61e:	69fb      	ldr	r3, [r7, #28]
 800c620:	895b      	ldrh	r3, [r3, #10]
 800c622:	88ba      	ldrh	r2, [r7, #4]
 800c624:	429a      	cmp	r2, r3
 800c626:	d305      	bcc.n	800c634 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800c628:	69fb      	ldr	r3, [r7, #28]
 800c62a:	895b      	ldrh	r3, [r3, #10]
 800c62c:	88ba      	ldrh	r2, [r7, #4]
 800c62e:	1ad3      	subs	r3, r2, r3
 800c630:	80bb      	strh	r3, [r7, #4]
 800c632:	e023      	b.n	800c67c <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800c634:	69fb      	ldr	r3, [r7, #28]
 800c636:	895a      	ldrh	r2, [r3, #10]
 800c638:	88bb      	ldrh	r3, [r7, #4]
 800c63a:	1ad3      	subs	r3, r2, r3
 800c63c:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800c63e:	8b3a      	ldrh	r2, [r7, #24]
 800c640:	88fb      	ldrh	r3, [r7, #6]
 800c642:	429a      	cmp	r2, r3
 800c644:	d901      	bls.n	800c64a <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800c646:	88fb      	ldrh	r3, [r7, #6]
 800c648:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800c64a:	8b7b      	ldrh	r3, [r7, #26]
 800c64c:	68ba      	ldr	r2, [r7, #8]
 800c64e:	18d0      	adds	r0, r2, r3
 800c650:	69fb      	ldr	r3, [r7, #28]
 800c652:	685a      	ldr	r2, [r3, #4]
 800c654:	88bb      	ldrh	r3, [r7, #4]
 800c656:	4413      	add	r3, r2
 800c658:	8b3a      	ldrh	r2, [r7, #24]
 800c65a:	4619      	mov	r1, r3
 800c65c:	f007 ff62 	bl	8014524 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800c660:	8afa      	ldrh	r2, [r7, #22]
 800c662:	8b3b      	ldrh	r3, [r7, #24]
 800c664:	4413      	add	r3, r2
 800c666:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800c668:	8b7a      	ldrh	r2, [r7, #26]
 800c66a:	8b3b      	ldrh	r3, [r7, #24]
 800c66c:	4413      	add	r3, r2
 800c66e:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800c670:	88fa      	ldrh	r2, [r7, #6]
 800c672:	8b3b      	ldrh	r3, [r7, #24]
 800c674:	1ad3      	subs	r3, r2, r3
 800c676:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800c678:	2300      	movs	r3, #0
 800c67a:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800c67c:	69fb      	ldr	r3, [r7, #28]
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	61fb      	str	r3, [r7, #28]
 800c682:	88fb      	ldrh	r3, [r7, #6]
 800c684:	2b00      	cmp	r3, #0
 800c686:	d002      	beq.n	800c68e <pbuf_copy_partial+0xca>
 800c688:	69fb      	ldr	r3, [r7, #28]
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d1c4      	bne.n	800c618 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800c68e:	8afb      	ldrh	r3, [r7, #22]
}
 800c690:	4618      	mov	r0, r3
 800c692:	3720      	adds	r7, #32
 800c694:	46bd      	mov	sp, r7
 800c696:	bd80      	pop	{r7, pc}
 800c698:	08015f28 	.word	0x08015f28
 800c69c:	08016270 	.word	0x08016270
 800c6a0:	08015f88 	.word	0x08015f88
 800c6a4:	08016290 	.word	0x08016290

0800c6a8 <pbuf_clone>:
=======
 800c594:	b580      	push	{r7, lr}
 800c596:	b088      	sub	sp, #32
 800c598:	af00      	add	r7, sp, #0
 800c59a:	60f8      	str	r0, [r7, #12]
 800c59c:	60b9      	str	r1, [r7, #8]
 800c59e:	4611      	mov	r1, r2
 800c5a0:	461a      	mov	r2, r3
 800c5a2:	460b      	mov	r3, r1
 800c5a4:	80fb      	strh	r3, [r7, #6]
 800c5a6:	4613      	mov	r3, r2
 800c5a8:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800c5aa:	2300      	movs	r3, #0
 800c5ac:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800c5ae:	2300      	movs	r3, #0
 800c5b0:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d108      	bne.n	800c5ca <pbuf_copy_partial+0x36>
 800c5b8:	4b2b      	ldr	r3, [pc, #172]	; (800c668 <pbuf_copy_partial+0xd4>)
 800c5ba:	f240 420a 	movw	r2, #1034	; 0x40a
 800c5be:	492b      	ldr	r1, [pc, #172]	; (800c66c <pbuf_copy_partial+0xd8>)
 800c5c0:	482b      	ldr	r0, [pc, #172]	; (800c670 <pbuf_copy_partial+0xdc>)
 800c5c2:	f007 ffc7 	bl	8014554 <iprintf>
 800c5c6:	2300      	movs	r3, #0
 800c5c8:	e04a      	b.n	800c660 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800c5ca:	68bb      	ldr	r3, [r7, #8]
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d108      	bne.n	800c5e2 <pbuf_copy_partial+0x4e>
 800c5d0:	4b25      	ldr	r3, [pc, #148]	; (800c668 <pbuf_copy_partial+0xd4>)
 800c5d2:	f240 420b 	movw	r2, #1035	; 0x40b
 800c5d6:	4927      	ldr	r1, [pc, #156]	; (800c674 <pbuf_copy_partial+0xe0>)
 800c5d8:	4825      	ldr	r0, [pc, #148]	; (800c670 <pbuf_copy_partial+0xdc>)
 800c5da:	f007 ffbb 	bl	8014554 <iprintf>
 800c5de:	2300      	movs	r3, #0
 800c5e0:	e03e      	b.n	800c660 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	61fb      	str	r3, [r7, #28]
 800c5e6:	e034      	b.n	800c652 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800c5e8:	88bb      	ldrh	r3, [r7, #4]
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	d00a      	beq.n	800c604 <pbuf_copy_partial+0x70>
 800c5ee:	69fb      	ldr	r3, [r7, #28]
 800c5f0:	895b      	ldrh	r3, [r3, #10]
 800c5f2:	88ba      	ldrh	r2, [r7, #4]
 800c5f4:	429a      	cmp	r2, r3
 800c5f6:	d305      	bcc.n	800c604 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800c5f8:	69fb      	ldr	r3, [r7, #28]
 800c5fa:	895b      	ldrh	r3, [r3, #10]
 800c5fc:	88ba      	ldrh	r2, [r7, #4]
 800c5fe:	1ad3      	subs	r3, r2, r3
 800c600:	80bb      	strh	r3, [r7, #4]
 800c602:	e023      	b.n	800c64c <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800c604:	69fb      	ldr	r3, [r7, #28]
 800c606:	895a      	ldrh	r2, [r3, #10]
 800c608:	88bb      	ldrh	r3, [r7, #4]
 800c60a:	1ad3      	subs	r3, r2, r3
 800c60c:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800c60e:	8b3a      	ldrh	r2, [r7, #24]
 800c610:	88fb      	ldrh	r3, [r7, #6]
 800c612:	429a      	cmp	r2, r3
 800c614:	d901      	bls.n	800c61a <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800c616:	88fb      	ldrh	r3, [r7, #6]
 800c618:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800c61a:	8b7b      	ldrh	r3, [r7, #26]
 800c61c:	68ba      	ldr	r2, [r7, #8]
 800c61e:	18d0      	adds	r0, r2, r3
 800c620:	69fb      	ldr	r3, [r7, #28]
 800c622:	685a      	ldr	r2, [r3, #4]
 800c624:	88bb      	ldrh	r3, [r7, #4]
 800c626:	4413      	add	r3, r2
 800c628:	8b3a      	ldrh	r2, [r7, #24]
 800c62a:	4619      	mov	r1, r3
 800c62c:	f007 ff62 	bl	80144f4 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800c630:	8afa      	ldrh	r2, [r7, #22]
 800c632:	8b3b      	ldrh	r3, [r7, #24]
 800c634:	4413      	add	r3, r2
 800c636:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800c638:	8b7a      	ldrh	r2, [r7, #26]
 800c63a:	8b3b      	ldrh	r3, [r7, #24]
 800c63c:	4413      	add	r3, r2
 800c63e:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800c640:	88fa      	ldrh	r2, [r7, #6]
 800c642:	8b3b      	ldrh	r3, [r7, #24]
 800c644:	1ad3      	subs	r3, r2, r3
 800c646:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800c648:	2300      	movs	r3, #0
 800c64a:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800c64c:	69fb      	ldr	r3, [r7, #28]
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	61fb      	str	r3, [r7, #28]
 800c652:	88fb      	ldrh	r3, [r7, #6]
 800c654:	2b00      	cmp	r3, #0
 800c656:	d002      	beq.n	800c65e <pbuf_copy_partial+0xca>
 800c658:	69fb      	ldr	r3, [r7, #28]
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d1c4      	bne.n	800c5e8 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800c65e:	8afb      	ldrh	r3, [r7, #22]
}
 800c660:	4618      	mov	r0, r3
 800c662:	3720      	adds	r7, #32
 800c664:	46bd      	mov	sp, r7
 800c666:	bd80      	pop	{r7, pc}
 800c668:	08015f0c 	.word	0x08015f0c
 800c66c:	08016254 	.word	0x08016254
 800c670:	08015f6c 	.word	0x08015f6c
 800c674:	08016274 	.word	0x08016274

0800c678 <pbuf_clone>:
>>>>>>> Stashed changes
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
<<<<<<< Updated upstream
 800c6a8:	b580      	push	{r7, lr}
 800c6aa:	b084      	sub	sp, #16
 800c6ac:	af00      	add	r7, sp, #0
 800c6ae:	4603      	mov	r3, r0
 800c6b0:	603a      	str	r2, [r7, #0]
 800c6b2:	71fb      	strb	r3, [r7, #7]
 800c6b4:	460b      	mov	r3, r1
 800c6b6:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800c6b8:	683b      	ldr	r3, [r7, #0]
 800c6ba:	8919      	ldrh	r1, [r3, #8]
 800c6bc:	88ba      	ldrh	r2, [r7, #4]
 800c6be:	79fb      	ldrb	r3, [r7, #7]
 800c6c0:	4618      	mov	r0, r3
 800c6c2:	f7ff fab1 	bl	800bc28 <pbuf_alloc>
 800c6c6:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800c6c8:	68fb      	ldr	r3, [r7, #12]
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d101      	bne.n	800c6d2 <pbuf_clone+0x2a>
    return NULL;
 800c6ce:	2300      	movs	r3, #0
 800c6d0:	e011      	b.n	800c6f6 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800c6d2:	6839      	ldr	r1, [r7, #0]
 800c6d4:	68f8      	ldr	r0, [r7, #12]
 800c6d6:	f7ff fea3 	bl	800c420 <pbuf_copy>
 800c6da:	4603      	mov	r3, r0
 800c6dc:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800c6de:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d006      	beq.n	800c6f4 <pbuf_clone+0x4c>
 800c6e6:	4b06      	ldr	r3, [pc, #24]	; (800c700 <pbuf_clone+0x58>)
 800c6e8:	f240 5224 	movw	r2, #1316	; 0x524
 800c6ec:	4905      	ldr	r1, [pc, #20]	; (800c704 <pbuf_clone+0x5c>)
 800c6ee:	4806      	ldr	r0, [pc, #24]	; (800c708 <pbuf_clone+0x60>)
 800c6f0:	f007 ff48 	bl	8014584 <iprintf>
  return q;
 800c6f4:	68fb      	ldr	r3, [r7, #12]
}
 800c6f6:	4618      	mov	r0, r3
 800c6f8:	3710      	adds	r7, #16
 800c6fa:	46bd      	mov	sp, r7
 800c6fc:	bd80      	pop	{r7, pc}
 800c6fe:	bf00      	nop
 800c700:	08015f28 	.word	0x08015f28
 800c704:	0801639c 	.word	0x0801639c
 800c708:	08015f88 	.word	0x08015f88

0800c70c <tcp_init>:
=======
 800c678:	b580      	push	{r7, lr}
 800c67a:	b084      	sub	sp, #16
 800c67c:	af00      	add	r7, sp, #0
 800c67e:	4603      	mov	r3, r0
 800c680:	603a      	str	r2, [r7, #0]
 800c682:	71fb      	strb	r3, [r7, #7]
 800c684:	460b      	mov	r3, r1
 800c686:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800c688:	683b      	ldr	r3, [r7, #0]
 800c68a:	8919      	ldrh	r1, [r3, #8]
 800c68c:	88ba      	ldrh	r2, [r7, #4]
 800c68e:	79fb      	ldrb	r3, [r7, #7]
 800c690:	4618      	mov	r0, r3
 800c692:	f7ff fab1 	bl	800bbf8 <pbuf_alloc>
 800c696:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800c698:	68fb      	ldr	r3, [r7, #12]
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d101      	bne.n	800c6a2 <pbuf_clone+0x2a>
    return NULL;
 800c69e:	2300      	movs	r3, #0
 800c6a0:	e011      	b.n	800c6c6 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800c6a2:	6839      	ldr	r1, [r7, #0]
 800c6a4:	68f8      	ldr	r0, [r7, #12]
 800c6a6:	f7ff fea3 	bl	800c3f0 <pbuf_copy>
 800c6aa:	4603      	mov	r3, r0
 800c6ac:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800c6ae:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d006      	beq.n	800c6c4 <pbuf_clone+0x4c>
 800c6b6:	4b06      	ldr	r3, [pc, #24]	; (800c6d0 <pbuf_clone+0x58>)
 800c6b8:	f240 5224 	movw	r2, #1316	; 0x524
 800c6bc:	4905      	ldr	r1, [pc, #20]	; (800c6d4 <pbuf_clone+0x5c>)
 800c6be:	4806      	ldr	r0, [pc, #24]	; (800c6d8 <pbuf_clone+0x60>)
 800c6c0:	f007 ff48 	bl	8014554 <iprintf>
  return q;
 800c6c4:	68fb      	ldr	r3, [r7, #12]
}
 800c6c6:	4618      	mov	r0, r3
 800c6c8:	3710      	adds	r7, #16
 800c6ca:	46bd      	mov	sp, r7
 800c6cc:	bd80      	pop	{r7, pc}
 800c6ce:	bf00      	nop
 800c6d0:	08015f0c 	.word	0x08015f0c
 800c6d4:	08016380 	.word	0x08016380
 800c6d8:	08015f6c 	.word	0x08015f6c

0800c6dc <tcp_init>:
>>>>>>> Stashed changes
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
<<<<<<< Updated upstream
 800c70c:	b580      	push	{r7, lr}
 800c70e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800c710:	f007 ff50 	bl	80145b4 <rand>
 800c714:	4603      	mov	r3, r0
 800c716:	b29b      	uxth	r3, r3
 800c718:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800c71c:	b29b      	uxth	r3, r3
 800c71e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800c722:	b29a      	uxth	r2, r3
 800c724:	4b01      	ldr	r3, [pc, #4]	; (800c72c <tcp_init+0x20>)
 800c726:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800c728:	bf00      	nop
 800c72a:	bd80      	pop	{r7, pc}
 800c72c:	2000000a 	.word	0x2000000a

0800c730 <tcp_free>:
=======
 800c6dc:	b580      	push	{r7, lr}
 800c6de:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800c6e0:	f007 ff50 	bl	8014584 <rand>
 800c6e4:	4603      	mov	r3, r0
 800c6e6:	b29b      	uxth	r3, r3
 800c6e8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800c6ec:	b29b      	uxth	r3, r3
 800c6ee:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800c6f2:	b29a      	uxth	r2, r3
 800c6f4:	4b01      	ldr	r3, [pc, #4]	; (800c6fc <tcp_init+0x20>)
 800c6f6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800c6f8:	bf00      	nop
 800c6fa:	bd80      	pop	{r7, pc}
 800c6fc:	2000000a 	.word	0x2000000a

0800c700 <tcp_free>:
>>>>>>> Stashed changes

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
<<<<<<< Updated upstream
 800c730:	b580      	push	{r7, lr}
 800c732:	b082      	sub	sp, #8
 800c734:	af00      	add	r7, sp, #0
 800c736:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	7d1b      	ldrb	r3, [r3, #20]
 800c73c:	2b01      	cmp	r3, #1
 800c73e:	d105      	bne.n	800c74c <tcp_free+0x1c>
 800c740:	4b06      	ldr	r3, [pc, #24]	; (800c75c <tcp_free+0x2c>)
 800c742:	22d4      	movs	r2, #212	; 0xd4
 800c744:	4906      	ldr	r1, [pc, #24]	; (800c760 <tcp_free+0x30>)
 800c746:	4807      	ldr	r0, [pc, #28]	; (800c764 <tcp_free+0x34>)
 800c748:	f007 ff1c 	bl	8014584 <iprintf>
=======
 800c700:	b580      	push	{r7, lr}
 800c702:	b082      	sub	sp, #8
 800c704:	af00      	add	r7, sp, #0
 800c706:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	7d1b      	ldrb	r3, [r3, #20]
 800c70c:	2b01      	cmp	r3, #1
 800c70e:	d105      	bne.n	800c71c <tcp_free+0x1c>
 800c710:	4b06      	ldr	r3, [pc, #24]	; (800c72c <tcp_free+0x2c>)
 800c712:	22d4      	movs	r2, #212	; 0xd4
 800c714:	4906      	ldr	r1, [pc, #24]	; (800c730 <tcp_free+0x30>)
 800c716:	4807      	ldr	r0, [pc, #28]	; (800c734 <tcp_free+0x34>)
 800c718:	f007 ff1c 	bl	8014554 <iprintf>
>>>>>>> Stashed changes
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
<<<<<<< Updated upstream
 800c74c:	6879      	ldr	r1, [r7, #4]
 800c74e:	2001      	movs	r0, #1
 800c750:	f7fe ff5c 	bl	800b60c <memp_free>
}
 800c754:	bf00      	nop
 800c756:	3708      	adds	r7, #8
 800c758:	46bd      	mov	sp, r7
 800c75a:	bd80      	pop	{r7, pc}
 800c75c:	08016428 	.word	0x08016428
 800c760:	08016458 	.word	0x08016458
 800c764:	0801646c 	.word	0x0801646c

0800c768 <tcp_free_listen>:
=======
 800c71c:	6879      	ldr	r1, [r7, #4]
 800c71e:	2001      	movs	r0, #1
 800c720:	f7fe ff5c 	bl	800b5dc <memp_free>
}
 800c724:	bf00      	nop
 800c726:	3708      	adds	r7, #8
 800c728:	46bd      	mov	sp, r7
 800c72a:	bd80      	pop	{r7, pc}
 800c72c:	0801640c 	.word	0x0801640c
 800c730:	0801643c 	.word	0x0801643c
 800c734:	08016450 	.word	0x08016450

0800c738 <tcp_free_listen>:
>>>>>>> Stashed changes

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
<<<<<<< Updated upstream
 800c768:	b580      	push	{r7, lr}
 800c76a:	b082      	sub	sp, #8
 800c76c:	af00      	add	r7, sp, #0
 800c76e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	7d1b      	ldrb	r3, [r3, #20]
 800c774:	2b01      	cmp	r3, #1
 800c776:	d105      	bne.n	800c784 <tcp_free_listen+0x1c>
 800c778:	4b06      	ldr	r3, [pc, #24]	; (800c794 <tcp_free_listen+0x2c>)
 800c77a:	22df      	movs	r2, #223	; 0xdf
 800c77c:	4906      	ldr	r1, [pc, #24]	; (800c798 <tcp_free_listen+0x30>)
 800c77e:	4807      	ldr	r0, [pc, #28]	; (800c79c <tcp_free_listen+0x34>)
 800c780:	f007 ff00 	bl	8014584 <iprintf>
=======
 800c738:	b580      	push	{r7, lr}
 800c73a:	b082      	sub	sp, #8
 800c73c:	af00      	add	r7, sp, #0
 800c73e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	7d1b      	ldrb	r3, [r3, #20]
 800c744:	2b01      	cmp	r3, #1
 800c746:	d105      	bne.n	800c754 <tcp_free_listen+0x1c>
 800c748:	4b06      	ldr	r3, [pc, #24]	; (800c764 <tcp_free_listen+0x2c>)
 800c74a:	22df      	movs	r2, #223	; 0xdf
 800c74c:	4906      	ldr	r1, [pc, #24]	; (800c768 <tcp_free_listen+0x30>)
 800c74e:	4807      	ldr	r0, [pc, #28]	; (800c76c <tcp_free_listen+0x34>)
 800c750:	f007 ff00 	bl	8014554 <iprintf>
>>>>>>> Stashed changes
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
<<<<<<< Updated upstream
 800c784:	6879      	ldr	r1, [r7, #4]
 800c786:	2002      	movs	r0, #2
 800c788:	f7fe ff40 	bl	800b60c <memp_free>
}
 800c78c:	bf00      	nop
 800c78e:	3708      	adds	r7, #8
 800c790:	46bd      	mov	sp, r7
 800c792:	bd80      	pop	{r7, pc}
 800c794:	08016428 	.word	0x08016428
 800c798:	08016494 	.word	0x08016494
 800c79c:	0801646c 	.word	0x0801646c

0800c7a0 <tcp_tmr>:
=======
 800c754:	6879      	ldr	r1, [r7, #4]
 800c756:	2002      	movs	r0, #2
 800c758:	f7fe ff40 	bl	800b5dc <memp_free>
}
 800c75c:	bf00      	nop
 800c75e:	3708      	adds	r7, #8
 800c760:	46bd      	mov	sp, r7
 800c762:	bd80      	pop	{r7, pc}
 800c764:	0801640c 	.word	0x0801640c
 800c768:	08016478 	.word	0x08016478
 800c76c:	08016450 	.word	0x08016450

0800c770 <tcp_tmr>:
>>>>>>> Stashed changes
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
<<<<<<< Updated upstream
 800c7a0:	b580      	push	{r7, lr}
 800c7a2:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800c7a4:	f000 fea2 	bl	800d4ec <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800c7a8:	4b07      	ldr	r3, [pc, #28]	; (800c7c8 <tcp_tmr+0x28>)
 800c7aa:	781b      	ldrb	r3, [r3, #0]
 800c7ac:	3301      	adds	r3, #1
 800c7ae:	b2da      	uxtb	r2, r3
 800c7b0:	4b05      	ldr	r3, [pc, #20]	; (800c7c8 <tcp_tmr+0x28>)
 800c7b2:	701a      	strb	r2, [r3, #0]
 800c7b4:	4b04      	ldr	r3, [pc, #16]	; (800c7c8 <tcp_tmr+0x28>)
 800c7b6:	781b      	ldrb	r3, [r3, #0]
 800c7b8:	f003 0301 	and.w	r3, r3, #1
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d001      	beq.n	800c7c4 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800c7c0:	f000 fb54 	bl	800ce6c <tcp_slowtmr>
  }
}
 800c7c4:	bf00      	nop
 800c7c6:	bd80      	pop	{r7, pc}
 800c7c8:	200000e5 	.word	0x200000e5

0800c7cc <tcp_remove_listener>:
=======
 800c770:	b580      	push	{r7, lr}
 800c772:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800c774:	f000 fea2 	bl	800d4bc <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800c778:	4b07      	ldr	r3, [pc, #28]	; (800c798 <tcp_tmr+0x28>)
 800c77a:	781b      	ldrb	r3, [r3, #0]
 800c77c:	3301      	adds	r3, #1
 800c77e:	b2da      	uxtb	r2, r3
 800c780:	4b05      	ldr	r3, [pc, #20]	; (800c798 <tcp_tmr+0x28>)
 800c782:	701a      	strb	r2, [r3, #0]
 800c784:	4b04      	ldr	r3, [pc, #16]	; (800c798 <tcp_tmr+0x28>)
 800c786:	781b      	ldrb	r3, [r3, #0]
 800c788:	f003 0301 	and.w	r3, r3, #1
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d001      	beq.n	800c794 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800c790:	f000 fb54 	bl	800ce3c <tcp_slowtmr>
  }
}
 800c794:	bf00      	nop
 800c796:	bd80      	pop	{r7, pc}
 800c798:	200000e5 	.word	0x200000e5

0800c79c <tcp_remove_listener>:
>>>>>>> Stashed changes
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
<<<<<<< Updated upstream
 800c7cc:	b580      	push	{r7, lr}
 800c7ce:	b084      	sub	sp, #16
 800c7d0:	af00      	add	r7, sp, #0
 800c7d2:	6078      	str	r0, [r7, #4]
 800c7d4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800c7d6:	683b      	ldr	r3, [r7, #0]
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d105      	bne.n	800c7e8 <tcp_remove_listener+0x1c>
 800c7dc:	4b0d      	ldr	r3, [pc, #52]	; (800c814 <tcp_remove_listener+0x48>)
 800c7de:	22ff      	movs	r2, #255	; 0xff
 800c7e0:	490d      	ldr	r1, [pc, #52]	; (800c818 <tcp_remove_listener+0x4c>)
 800c7e2:	480e      	ldr	r0, [pc, #56]	; (800c81c <tcp_remove_listener+0x50>)
 800c7e4:	f007 fece 	bl	8014584 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	60fb      	str	r3, [r7, #12]
 800c7ec:	e00a      	b.n	800c804 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800c7ee:	68fb      	ldr	r3, [r7, #12]
 800c7f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c7f2:	683a      	ldr	r2, [r7, #0]
 800c7f4:	429a      	cmp	r2, r3
 800c7f6:	d102      	bne.n	800c7fe <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800c7f8:	68fb      	ldr	r3, [r7, #12]
 800c7fa:	2200      	movs	r2, #0
 800c7fc:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	68db      	ldr	r3, [r3, #12]
 800c802:	60fb      	str	r3, [r7, #12]
 800c804:	68fb      	ldr	r3, [r7, #12]
 800c806:	2b00      	cmp	r3, #0
 800c808:	d1f1      	bne.n	800c7ee <tcp_remove_listener+0x22>
    }
  }
}
 800c80a:	bf00      	nop
 800c80c:	bf00      	nop
 800c80e:	3710      	adds	r7, #16
 800c810:	46bd      	mov	sp, r7
 800c812:	bd80      	pop	{r7, pc}
 800c814:	08016428 	.word	0x08016428
 800c818:	080164b0 	.word	0x080164b0
 800c81c:	0801646c 	.word	0x0801646c

0800c820 <tcp_listen_closed>:
=======
 800c79c:	b580      	push	{r7, lr}
 800c79e:	b084      	sub	sp, #16
 800c7a0:	af00      	add	r7, sp, #0
 800c7a2:	6078      	str	r0, [r7, #4]
 800c7a4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800c7a6:	683b      	ldr	r3, [r7, #0]
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d105      	bne.n	800c7b8 <tcp_remove_listener+0x1c>
 800c7ac:	4b0d      	ldr	r3, [pc, #52]	; (800c7e4 <tcp_remove_listener+0x48>)
 800c7ae:	22ff      	movs	r2, #255	; 0xff
 800c7b0:	490d      	ldr	r1, [pc, #52]	; (800c7e8 <tcp_remove_listener+0x4c>)
 800c7b2:	480e      	ldr	r0, [pc, #56]	; (800c7ec <tcp_remove_listener+0x50>)
 800c7b4:	f007 fece 	bl	8014554 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	60fb      	str	r3, [r7, #12]
 800c7bc:	e00a      	b.n	800c7d4 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800c7be:	68fb      	ldr	r3, [r7, #12]
 800c7c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c7c2:	683a      	ldr	r2, [r7, #0]
 800c7c4:	429a      	cmp	r2, r3
 800c7c6:	d102      	bne.n	800c7ce <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	2200      	movs	r2, #0
 800c7cc:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	68db      	ldr	r3, [r3, #12]
 800c7d2:	60fb      	str	r3, [r7, #12]
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d1f1      	bne.n	800c7be <tcp_remove_listener+0x22>
    }
  }
}
 800c7da:	bf00      	nop
 800c7dc:	bf00      	nop
 800c7de:	3710      	adds	r7, #16
 800c7e0:	46bd      	mov	sp, r7
 800c7e2:	bd80      	pop	{r7, pc}
 800c7e4:	0801640c 	.word	0x0801640c
 800c7e8:	08016494 	.word	0x08016494
 800c7ec:	08016450 	.word	0x08016450

0800c7f0 <tcp_listen_closed>:
>>>>>>> Stashed changes
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
<<<<<<< Updated upstream
 800c820:	b580      	push	{r7, lr}
 800c822:	b084      	sub	sp, #16
 800c824:	af00      	add	r7, sp, #0
 800c826:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d106      	bne.n	800c83c <tcp_listen_closed+0x1c>
 800c82e:	4b14      	ldr	r3, [pc, #80]	; (800c880 <tcp_listen_closed+0x60>)
 800c830:	f240 1211 	movw	r2, #273	; 0x111
 800c834:	4913      	ldr	r1, [pc, #76]	; (800c884 <tcp_listen_closed+0x64>)
 800c836:	4814      	ldr	r0, [pc, #80]	; (800c888 <tcp_listen_closed+0x68>)
 800c838:	f007 fea4 	bl	8014584 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	7d1b      	ldrb	r3, [r3, #20]
 800c840:	2b01      	cmp	r3, #1
 800c842:	d006      	beq.n	800c852 <tcp_listen_closed+0x32>
 800c844:	4b0e      	ldr	r3, [pc, #56]	; (800c880 <tcp_listen_closed+0x60>)
 800c846:	f44f 7289 	mov.w	r2, #274	; 0x112
 800c84a:	4910      	ldr	r1, [pc, #64]	; (800c88c <tcp_listen_closed+0x6c>)
 800c84c:	480e      	ldr	r0, [pc, #56]	; (800c888 <tcp_listen_closed+0x68>)
 800c84e:	f007 fe99 	bl	8014584 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800c852:	2301      	movs	r3, #1
 800c854:	60fb      	str	r3, [r7, #12]
 800c856:	e00b      	b.n	800c870 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800c858:	4a0d      	ldr	r2, [pc, #52]	; (800c890 <tcp_listen_closed+0x70>)
 800c85a:	68fb      	ldr	r3, [r7, #12]
 800c85c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	6879      	ldr	r1, [r7, #4]
 800c864:	4618      	mov	r0, r3
 800c866:	f7ff ffb1 	bl	800c7cc <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	3301      	adds	r3, #1
 800c86e:	60fb      	str	r3, [r7, #12]
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	2b03      	cmp	r3, #3
 800c874:	d9f0      	bls.n	800c858 <tcp_listen_closed+0x38>
=======
 800c7f0:	b580      	push	{r7, lr}
 800c7f2:	b084      	sub	sp, #16
 800c7f4:	af00      	add	r7, sp, #0
 800c7f6:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d106      	bne.n	800c80c <tcp_listen_closed+0x1c>
 800c7fe:	4b14      	ldr	r3, [pc, #80]	; (800c850 <tcp_listen_closed+0x60>)
 800c800:	f240 1211 	movw	r2, #273	; 0x111
 800c804:	4913      	ldr	r1, [pc, #76]	; (800c854 <tcp_listen_closed+0x64>)
 800c806:	4814      	ldr	r0, [pc, #80]	; (800c858 <tcp_listen_closed+0x68>)
 800c808:	f007 fea4 	bl	8014554 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	7d1b      	ldrb	r3, [r3, #20]
 800c810:	2b01      	cmp	r3, #1
 800c812:	d006      	beq.n	800c822 <tcp_listen_closed+0x32>
 800c814:	4b0e      	ldr	r3, [pc, #56]	; (800c850 <tcp_listen_closed+0x60>)
 800c816:	f44f 7289 	mov.w	r2, #274	; 0x112
 800c81a:	4910      	ldr	r1, [pc, #64]	; (800c85c <tcp_listen_closed+0x6c>)
 800c81c:	480e      	ldr	r0, [pc, #56]	; (800c858 <tcp_listen_closed+0x68>)
 800c81e:	f007 fe99 	bl	8014554 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800c822:	2301      	movs	r3, #1
 800c824:	60fb      	str	r3, [r7, #12]
 800c826:	e00b      	b.n	800c840 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800c828:	4a0d      	ldr	r2, [pc, #52]	; (800c860 <tcp_listen_closed+0x70>)
 800c82a:	68fb      	ldr	r3, [r7, #12]
 800c82c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	6879      	ldr	r1, [r7, #4]
 800c834:	4618      	mov	r0, r3
 800c836:	f7ff ffb1 	bl	800c79c <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	3301      	adds	r3, #1
 800c83e:	60fb      	str	r3, [r7, #12]
 800c840:	68fb      	ldr	r3, [r7, #12]
 800c842:	2b03      	cmp	r3, #3
 800c844:	d9f0      	bls.n	800c828 <tcp_listen_closed+0x38>
>>>>>>> Stashed changes
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
<<<<<<< Updated upstream
 800c876:	bf00      	nop
 800c878:	bf00      	nop
 800c87a:	3710      	adds	r7, #16
 800c87c:	46bd      	mov	sp, r7
 800c87e:	bd80      	pop	{r7, pc}
 800c880:	08016428 	.word	0x08016428
 800c884:	080164d8 	.word	0x080164d8
 800c888:	0801646c 	.word	0x0801646c
 800c88c:	080164e4 	.word	0x080164e4
 800c890:	08018418 	.word	0x08018418

0800c894 <tcp_close_shutdown>:
=======
 800c846:	bf00      	nop
 800c848:	bf00      	nop
 800c84a:	3710      	adds	r7, #16
 800c84c:	46bd      	mov	sp, r7
 800c84e:	bd80      	pop	{r7, pc}
 800c850:	0801640c 	.word	0x0801640c
 800c854:	080164bc 	.word	0x080164bc
 800c858:	08016450 	.word	0x08016450
 800c85c:	080164c8 	.word	0x080164c8
 800c860:	080183fc 	.word	0x080183fc

0800c864 <tcp_close_shutdown>:
>>>>>>> Stashed changes
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
<<<<<<< Updated upstream
 800c894:	b5b0      	push	{r4, r5, r7, lr}
 800c896:	b088      	sub	sp, #32
 800c898:	af04      	add	r7, sp, #16
 800c89a:	6078      	str	r0, [r7, #4]
 800c89c:	460b      	mov	r3, r1
 800c89e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d106      	bne.n	800c8b4 <tcp_close_shutdown+0x20>
 800c8a6:	4b63      	ldr	r3, [pc, #396]	; (800ca34 <tcp_close_shutdown+0x1a0>)
 800c8a8:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800c8ac:	4962      	ldr	r1, [pc, #392]	; (800ca38 <tcp_close_shutdown+0x1a4>)
 800c8ae:	4863      	ldr	r0, [pc, #396]	; (800ca3c <tcp_close_shutdown+0x1a8>)
 800c8b0:	f007 fe68 	bl	8014584 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800c8b4:	78fb      	ldrb	r3, [r7, #3]
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d066      	beq.n	800c988 <tcp_close_shutdown+0xf4>
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	7d1b      	ldrb	r3, [r3, #20]
 800c8be:	2b04      	cmp	r3, #4
 800c8c0:	d003      	beq.n	800c8ca <tcp_close_shutdown+0x36>
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	7d1b      	ldrb	r3, [r3, #20]
 800c8c6:	2b07      	cmp	r3, #7
 800c8c8:	d15e      	bne.n	800c988 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d104      	bne.n	800c8dc <tcp_close_shutdown+0x48>
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c8d6:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800c8da:	d055      	beq.n	800c988 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	8b5b      	ldrh	r3, [r3, #26]
 800c8e0:	f003 0310 	and.w	r3, r3, #16
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d106      	bne.n	800c8f6 <tcp_close_shutdown+0x62>
 800c8e8:	4b52      	ldr	r3, [pc, #328]	; (800ca34 <tcp_close_shutdown+0x1a0>)
 800c8ea:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800c8ee:	4954      	ldr	r1, [pc, #336]	; (800ca40 <tcp_close_shutdown+0x1ac>)
 800c8f0:	4852      	ldr	r0, [pc, #328]	; (800ca3c <tcp_close_shutdown+0x1a8>)
 800c8f2:	f007 fe47 	bl	8014584 <iprintf>
=======
 800c864:	b5b0      	push	{r4, r5, r7, lr}
 800c866:	b088      	sub	sp, #32
 800c868:	af04      	add	r7, sp, #16
 800c86a:	6078      	str	r0, [r7, #4]
 800c86c:	460b      	mov	r3, r1
 800c86e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	2b00      	cmp	r3, #0
 800c874:	d106      	bne.n	800c884 <tcp_close_shutdown+0x20>
 800c876:	4b63      	ldr	r3, [pc, #396]	; (800ca04 <tcp_close_shutdown+0x1a0>)
 800c878:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800c87c:	4962      	ldr	r1, [pc, #392]	; (800ca08 <tcp_close_shutdown+0x1a4>)
 800c87e:	4863      	ldr	r0, [pc, #396]	; (800ca0c <tcp_close_shutdown+0x1a8>)
 800c880:	f007 fe68 	bl	8014554 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800c884:	78fb      	ldrb	r3, [r7, #3]
 800c886:	2b00      	cmp	r3, #0
 800c888:	d066      	beq.n	800c958 <tcp_close_shutdown+0xf4>
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	7d1b      	ldrb	r3, [r3, #20]
 800c88e:	2b04      	cmp	r3, #4
 800c890:	d003      	beq.n	800c89a <tcp_close_shutdown+0x36>
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	7d1b      	ldrb	r3, [r3, #20]
 800c896:	2b07      	cmp	r3, #7
 800c898:	d15e      	bne.n	800c958 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d104      	bne.n	800c8ac <tcp_close_shutdown+0x48>
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c8a6:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800c8aa:	d055      	beq.n	800c958 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	8b5b      	ldrh	r3, [r3, #26]
 800c8b0:	f003 0310 	and.w	r3, r3, #16
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d106      	bne.n	800c8c6 <tcp_close_shutdown+0x62>
 800c8b8:	4b52      	ldr	r3, [pc, #328]	; (800ca04 <tcp_close_shutdown+0x1a0>)
 800c8ba:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800c8be:	4954      	ldr	r1, [pc, #336]	; (800ca10 <tcp_close_shutdown+0x1ac>)
 800c8c0:	4852      	ldr	r0, [pc, #328]	; (800ca0c <tcp_close_shutdown+0x1a8>)
 800c8c2:	f007 fe47 	bl	8014554 <iprintf>
>>>>>>> Stashed changes

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
<<<<<<< Updated upstream
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800c8fe:	687d      	ldr	r5, [r7, #4]
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	3304      	adds	r3, #4
 800c904:	687a      	ldr	r2, [r7, #4]
 800c906:	8ad2      	ldrh	r2, [r2, #22]
 800c908:	6879      	ldr	r1, [r7, #4]
 800c90a:	8b09      	ldrh	r1, [r1, #24]
 800c90c:	9102      	str	r1, [sp, #8]
 800c90e:	9201      	str	r2, [sp, #4]
 800c910:	9300      	str	r3, [sp, #0]
 800c912:	462b      	mov	r3, r5
 800c914:	4622      	mov	r2, r4
 800c916:	4601      	mov	r1, r0
 800c918:	6878      	ldr	r0, [r7, #4]
 800c91a:	f004 fe8d 	bl	8011638 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800c91e:	6878      	ldr	r0, [r7, #4]
 800c920:	f001 f8c6 	bl	800dab0 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800c924:	4b47      	ldr	r3, [pc, #284]	; (800ca44 <tcp_close_shutdown+0x1b0>)
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	687a      	ldr	r2, [r7, #4]
 800c92a:	429a      	cmp	r2, r3
 800c92c:	d105      	bne.n	800c93a <tcp_close_shutdown+0xa6>
 800c92e:	4b45      	ldr	r3, [pc, #276]	; (800ca44 <tcp_close_shutdown+0x1b0>)
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	68db      	ldr	r3, [r3, #12]
 800c934:	4a43      	ldr	r2, [pc, #268]	; (800ca44 <tcp_close_shutdown+0x1b0>)
 800c936:	6013      	str	r3, [r2, #0]
 800c938:	e013      	b.n	800c962 <tcp_close_shutdown+0xce>
 800c93a:	4b42      	ldr	r3, [pc, #264]	; (800ca44 <tcp_close_shutdown+0x1b0>)
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	60fb      	str	r3, [r7, #12]
 800c940:	e00c      	b.n	800c95c <tcp_close_shutdown+0xc8>
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	68db      	ldr	r3, [r3, #12]
 800c946:	687a      	ldr	r2, [r7, #4]
 800c948:	429a      	cmp	r2, r3
 800c94a:	d104      	bne.n	800c956 <tcp_close_shutdown+0xc2>
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	68da      	ldr	r2, [r3, #12]
 800c950:	68fb      	ldr	r3, [r7, #12]
 800c952:	60da      	str	r2, [r3, #12]
 800c954:	e005      	b.n	800c962 <tcp_close_shutdown+0xce>
 800c956:	68fb      	ldr	r3, [r7, #12]
 800c958:	68db      	ldr	r3, [r3, #12]
 800c95a:	60fb      	str	r3, [r7, #12]
 800c95c:	68fb      	ldr	r3, [r7, #12]
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d1ef      	bne.n	800c942 <tcp_close_shutdown+0xae>
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	2200      	movs	r2, #0
 800c966:	60da      	str	r2, [r3, #12]
 800c968:	4b37      	ldr	r3, [pc, #220]	; (800ca48 <tcp_close_shutdown+0x1b4>)
 800c96a:	2201      	movs	r2, #1
 800c96c:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800c96e:	4b37      	ldr	r3, [pc, #220]	; (800ca4c <tcp_close_shutdown+0x1b8>)
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	687a      	ldr	r2, [r7, #4]
 800c974:	429a      	cmp	r2, r3
 800c976:	d102      	bne.n	800c97e <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800c978:	f003 fd5a 	bl	8010430 <tcp_trigger_input_pcb_close>
 800c97c:	e002      	b.n	800c984 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800c97e:	6878      	ldr	r0, [r7, #4]
 800c980:	f7ff fed6 	bl	800c730 <tcp_free>
      }
      return ERR_OK;
 800c984:	2300      	movs	r3, #0
 800c986:	e050      	b.n	800ca2a <tcp_close_shutdown+0x196>
=======
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800c8ce:	687d      	ldr	r5, [r7, #4]
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	3304      	adds	r3, #4
 800c8d4:	687a      	ldr	r2, [r7, #4]
 800c8d6:	8ad2      	ldrh	r2, [r2, #22]
 800c8d8:	6879      	ldr	r1, [r7, #4]
 800c8da:	8b09      	ldrh	r1, [r1, #24]
 800c8dc:	9102      	str	r1, [sp, #8]
 800c8de:	9201      	str	r2, [sp, #4]
 800c8e0:	9300      	str	r3, [sp, #0]
 800c8e2:	462b      	mov	r3, r5
 800c8e4:	4622      	mov	r2, r4
 800c8e6:	4601      	mov	r1, r0
 800c8e8:	6878      	ldr	r0, [r7, #4]
 800c8ea:	f004 fe8d 	bl	8011608 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800c8ee:	6878      	ldr	r0, [r7, #4]
 800c8f0:	f001 f8c6 	bl	800da80 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800c8f4:	4b47      	ldr	r3, [pc, #284]	; (800ca14 <tcp_close_shutdown+0x1b0>)
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	687a      	ldr	r2, [r7, #4]
 800c8fa:	429a      	cmp	r2, r3
 800c8fc:	d105      	bne.n	800c90a <tcp_close_shutdown+0xa6>
 800c8fe:	4b45      	ldr	r3, [pc, #276]	; (800ca14 <tcp_close_shutdown+0x1b0>)
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	68db      	ldr	r3, [r3, #12]
 800c904:	4a43      	ldr	r2, [pc, #268]	; (800ca14 <tcp_close_shutdown+0x1b0>)
 800c906:	6013      	str	r3, [r2, #0]
 800c908:	e013      	b.n	800c932 <tcp_close_shutdown+0xce>
 800c90a:	4b42      	ldr	r3, [pc, #264]	; (800ca14 <tcp_close_shutdown+0x1b0>)
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	60fb      	str	r3, [r7, #12]
 800c910:	e00c      	b.n	800c92c <tcp_close_shutdown+0xc8>
 800c912:	68fb      	ldr	r3, [r7, #12]
 800c914:	68db      	ldr	r3, [r3, #12]
 800c916:	687a      	ldr	r2, [r7, #4]
 800c918:	429a      	cmp	r2, r3
 800c91a:	d104      	bne.n	800c926 <tcp_close_shutdown+0xc2>
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	68da      	ldr	r2, [r3, #12]
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	60da      	str	r2, [r3, #12]
 800c924:	e005      	b.n	800c932 <tcp_close_shutdown+0xce>
 800c926:	68fb      	ldr	r3, [r7, #12]
 800c928:	68db      	ldr	r3, [r3, #12]
 800c92a:	60fb      	str	r3, [r7, #12]
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d1ef      	bne.n	800c912 <tcp_close_shutdown+0xae>
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	2200      	movs	r2, #0
 800c936:	60da      	str	r2, [r3, #12]
 800c938:	4b37      	ldr	r3, [pc, #220]	; (800ca18 <tcp_close_shutdown+0x1b4>)
 800c93a:	2201      	movs	r2, #1
 800c93c:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800c93e:	4b37      	ldr	r3, [pc, #220]	; (800ca1c <tcp_close_shutdown+0x1b8>)
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	687a      	ldr	r2, [r7, #4]
 800c944:	429a      	cmp	r2, r3
 800c946:	d102      	bne.n	800c94e <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800c948:	f003 fd5a 	bl	8010400 <tcp_trigger_input_pcb_close>
 800c94c:	e002      	b.n	800c954 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800c94e:	6878      	ldr	r0, [r7, #4]
 800c950:	f7ff fed6 	bl	800c700 <tcp_free>
      }
      return ERR_OK;
 800c954:	2300      	movs	r3, #0
 800c956:	e050      	b.n	800c9fa <tcp_close_shutdown+0x196>
>>>>>>> Stashed changes
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
<<<<<<< Updated upstream
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	7d1b      	ldrb	r3, [r3, #20]
 800c98c:	2b02      	cmp	r3, #2
 800c98e:	d03b      	beq.n	800ca08 <tcp_close_shutdown+0x174>
 800c990:	2b02      	cmp	r3, #2
 800c992:	dc44      	bgt.n	800ca1e <tcp_close_shutdown+0x18a>
 800c994:	2b00      	cmp	r3, #0
 800c996:	d002      	beq.n	800c99e <tcp_close_shutdown+0x10a>
 800c998:	2b01      	cmp	r3, #1
 800c99a:	d02a      	beq.n	800c9f2 <tcp_close_shutdown+0x15e>
 800c99c:	e03f      	b.n	800ca1e <tcp_close_shutdown+0x18a>
=======
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	7d1b      	ldrb	r3, [r3, #20]
 800c95c:	2b02      	cmp	r3, #2
 800c95e:	d03b      	beq.n	800c9d8 <tcp_close_shutdown+0x174>
 800c960:	2b02      	cmp	r3, #2
 800c962:	dc44      	bgt.n	800c9ee <tcp_close_shutdown+0x18a>
 800c964:	2b00      	cmp	r3, #0
 800c966:	d002      	beq.n	800c96e <tcp_close_shutdown+0x10a>
 800c968:	2b01      	cmp	r3, #1
 800c96a:	d02a      	beq.n	800c9c2 <tcp_close_shutdown+0x15e>
 800c96c:	e03f      	b.n	800c9ee <tcp_close_shutdown+0x18a>
>>>>>>> Stashed changes
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
<<<<<<< Updated upstream
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	8adb      	ldrh	r3, [r3, #22]
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d021      	beq.n	800c9ea <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800c9a6:	4b2a      	ldr	r3, [pc, #168]	; (800ca50 <tcp_close_shutdown+0x1bc>)
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	687a      	ldr	r2, [r7, #4]
 800c9ac:	429a      	cmp	r2, r3
 800c9ae:	d105      	bne.n	800c9bc <tcp_close_shutdown+0x128>
 800c9b0:	4b27      	ldr	r3, [pc, #156]	; (800ca50 <tcp_close_shutdown+0x1bc>)
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	68db      	ldr	r3, [r3, #12]
 800c9b6:	4a26      	ldr	r2, [pc, #152]	; (800ca50 <tcp_close_shutdown+0x1bc>)
 800c9b8:	6013      	str	r3, [r2, #0]
 800c9ba:	e013      	b.n	800c9e4 <tcp_close_shutdown+0x150>
 800c9bc:	4b24      	ldr	r3, [pc, #144]	; (800ca50 <tcp_close_shutdown+0x1bc>)
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	60bb      	str	r3, [r7, #8]
 800c9c2:	e00c      	b.n	800c9de <tcp_close_shutdown+0x14a>
 800c9c4:	68bb      	ldr	r3, [r7, #8]
 800c9c6:	68db      	ldr	r3, [r3, #12]
 800c9c8:	687a      	ldr	r2, [r7, #4]
 800c9ca:	429a      	cmp	r2, r3
 800c9cc:	d104      	bne.n	800c9d8 <tcp_close_shutdown+0x144>
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	68da      	ldr	r2, [r3, #12]
 800c9d2:	68bb      	ldr	r3, [r7, #8]
 800c9d4:	60da      	str	r2, [r3, #12]
 800c9d6:	e005      	b.n	800c9e4 <tcp_close_shutdown+0x150>
 800c9d8:	68bb      	ldr	r3, [r7, #8]
 800c9da:	68db      	ldr	r3, [r3, #12]
 800c9dc:	60bb      	str	r3, [r7, #8]
 800c9de:	68bb      	ldr	r3, [r7, #8]
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d1ef      	bne.n	800c9c4 <tcp_close_shutdown+0x130>
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	2200      	movs	r2, #0
 800c9e8:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800c9ea:	6878      	ldr	r0, [r7, #4]
 800c9ec:	f7ff fea0 	bl	800c730 <tcp_free>
      break;
 800c9f0:	e01a      	b.n	800ca28 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800c9f2:	6878      	ldr	r0, [r7, #4]
 800c9f4:	f7ff ff14 	bl	800c820 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800c9f8:	6879      	ldr	r1, [r7, #4]
 800c9fa:	4816      	ldr	r0, [pc, #88]	; (800ca54 <tcp_close_shutdown+0x1c0>)
 800c9fc:	f001 f8a8 	bl	800db50 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800ca00:	6878      	ldr	r0, [r7, #4]
 800ca02:	f7ff feb1 	bl	800c768 <tcp_free_listen>
      break;
 800ca06:	e00f      	b.n	800ca28 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800ca08:	6879      	ldr	r1, [r7, #4]
 800ca0a:	480e      	ldr	r0, [pc, #56]	; (800ca44 <tcp_close_shutdown+0x1b0>)
 800ca0c:	f001 f8a0 	bl	800db50 <tcp_pcb_remove>
 800ca10:	4b0d      	ldr	r3, [pc, #52]	; (800ca48 <tcp_close_shutdown+0x1b4>)
 800ca12:	2201      	movs	r2, #1
 800ca14:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800ca16:	6878      	ldr	r0, [r7, #4]
 800ca18:	f7ff fe8a 	bl	800c730 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800ca1c:	e004      	b.n	800ca28 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800ca1e:	6878      	ldr	r0, [r7, #4]
 800ca20:	f000 f81a 	bl	800ca58 <tcp_close_shutdown_fin>
 800ca24:	4603      	mov	r3, r0
 800ca26:	e000      	b.n	800ca2a <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800ca28:	2300      	movs	r3, #0
}
 800ca2a:	4618      	mov	r0, r3
 800ca2c:	3710      	adds	r7, #16
 800ca2e:	46bd      	mov	sp, r7
 800ca30:	bdb0      	pop	{r4, r5, r7, pc}
 800ca32:	bf00      	nop
 800ca34:	08016428 	.word	0x08016428
 800ca38:	080164fc 	.word	0x080164fc
 800ca3c:	0801646c 	.word	0x0801646c
 800ca40:	0801651c 	.word	0x0801651c
 800ca44:	200072a0 	.word	0x200072a0
 800ca48:	2000729c 	.word	0x2000729c
 800ca4c:	200072b4 	.word	0x200072b4
 800ca50:	200072ac 	.word	0x200072ac
 800ca54:	200072a8 	.word	0x200072a8

0800ca58 <tcp_close_shutdown_fin>:
=======
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	8adb      	ldrh	r3, [r3, #22]
 800c972:	2b00      	cmp	r3, #0
 800c974:	d021      	beq.n	800c9ba <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800c976:	4b2a      	ldr	r3, [pc, #168]	; (800ca20 <tcp_close_shutdown+0x1bc>)
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	687a      	ldr	r2, [r7, #4]
 800c97c:	429a      	cmp	r2, r3
 800c97e:	d105      	bne.n	800c98c <tcp_close_shutdown+0x128>
 800c980:	4b27      	ldr	r3, [pc, #156]	; (800ca20 <tcp_close_shutdown+0x1bc>)
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	68db      	ldr	r3, [r3, #12]
 800c986:	4a26      	ldr	r2, [pc, #152]	; (800ca20 <tcp_close_shutdown+0x1bc>)
 800c988:	6013      	str	r3, [r2, #0]
 800c98a:	e013      	b.n	800c9b4 <tcp_close_shutdown+0x150>
 800c98c:	4b24      	ldr	r3, [pc, #144]	; (800ca20 <tcp_close_shutdown+0x1bc>)
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	60bb      	str	r3, [r7, #8]
 800c992:	e00c      	b.n	800c9ae <tcp_close_shutdown+0x14a>
 800c994:	68bb      	ldr	r3, [r7, #8]
 800c996:	68db      	ldr	r3, [r3, #12]
 800c998:	687a      	ldr	r2, [r7, #4]
 800c99a:	429a      	cmp	r2, r3
 800c99c:	d104      	bne.n	800c9a8 <tcp_close_shutdown+0x144>
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	68da      	ldr	r2, [r3, #12]
 800c9a2:	68bb      	ldr	r3, [r7, #8]
 800c9a4:	60da      	str	r2, [r3, #12]
 800c9a6:	e005      	b.n	800c9b4 <tcp_close_shutdown+0x150>
 800c9a8:	68bb      	ldr	r3, [r7, #8]
 800c9aa:	68db      	ldr	r3, [r3, #12]
 800c9ac:	60bb      	str	r3, [r7, #8]
 800c9ae:	68bb      	ldr	r3, [r7, #8]
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d1ef      	bne.n	800c994 <tcp_close_shutdown+0x130>
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	2200      	movs	r2, #0
 800c9b8:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800c9ba:	6878      	ldr	r0, [r7, #4]
 800c9bc:	f7ff fea0 	bl	800c700 <tcp_free>
      break;
 800c9c0:	e01a      	b.n	800c9f8 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800c9c2:	6878      	ldr	r0, [r7, #4]
 800c9c4:	f7ff ff14 	bl	800c7f0 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800c9c8:	6879      	ldr	r1, [r7, #4]
 800c9ca:	4816      	ldr	r0, [pc, #88]	; (800ca24 <tcp_close_shutdown+0x1c0>)
 800c9cc:	f001 f8a8 	bl	800db20 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800c9d0:	6878      	ldr	r0, [r7, #4]
 800c9d2:	f7ff feb1 	bl	800c738 <tcp_free_listen>
      break;
 800c9d6:	e00f      	b.n	800c9f8 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800c9d8:	6879      	ldr	r1, [r7, #4]
 800c9da:	480e      	ldr	r0, [pc, #56]	; (800ca14 <tcp_close_shutdown+0x1b0>)
 800c9dc:	f001 f8a0 	bl	800db20 <tcp_pcb_remove>
 800c9e0:	4b0d      	ldr	r3, [pc, #52]	; (800ca18 <tcp_close_shutdown+0x1b4>)
 800c9e2:	2201      	movs	r2, #1
 800c9e4:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800c9e6:	6878      	ldr	r0, [r7, #4]
 800c9e8:	f7ff fe8a 	bl	800c700 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800c9ec:	e004      	b.n	800c9f8 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800c9ee:	6878      	ldr	r0, [r7, #4]
 800c9f0:	f000 f81a 	bl	800ca28 <tcp_close_shutdown_fin>
 800c9f4:	4603      	mov	r3, r0
 800c9f6:	e000      	b.n	800c9fa <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800c9f8:	2300      	movs	r3, #0
}
 800c9fa:	4618      	mov	r0, r3
 800c9fc:	3710      	adds	r7, #16
 800c9fe:	46bd      	mov	sp, r7
 800ca00:	bdb0      	pop	{r4, r5, r7, pc}
 800ca02:	bf00      	nop
 800ca04:	0801640c 	.word	0x0801640c
 800ca08:	080164e0 	.word	0x080164e0
 800ca0c:	08016450 	.word	0x08016450
 800ca10:	08016500 	.word	0x08016500
 800ca14:	200072a0 	.word	0x200072a0
 800ca18:	2000729c 	.word	0x2000729c
 800ca1c:	200072b4 	.word	0x200072b4
 800ca20:	200072ac 	.word	0x200072ac
 800ca24:	200072a8 	.word	0x200072a8

0800ca28 <tcp_close_shutdown_fin>:
>>>>>>> Stashed changes

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
<<<<<<< Updated upstream
 800ca58:	b580      	push	{r7, lr}
 800ca5a:	b084      	sub	sp, #16
 800ca5c:	af00      	add	r7, sp, #0
 800ca5e:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d106      	bne.n	800ca74 <tcp_close_shutdown_fin+0x1c>
 800ca66:	4b2e      	ldr	r3, [pc, #184]	; (800cb20 <tcp_close_shutdown_fin+0xc8>)
 800ca68:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800ca6c:	492d      	ldr	r1, [pc, #180]	; (800cb24 <tcp_close_shutdown_fin+0xcc>)
 800ca6e:	482e      	ldr	r0, [pc, #184]	; (800cb28 <tcp_close_shutdown_fin+0xd0>)
 800ca70:	f007 fd88 	bl	8014584 <iprintf>

  switch (pcb->state) {
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	7d1b      	ldrb	r3, [r3, #20]
 800ca78:	2b07      	cmp	r3, #7
 800ca7a:	d020      	beq.n	800cabe <tcp_close_shutdown_fin+0x66>
 800ca7c:	2b07      	cmp	r3, #7
 800ca7e:	dc2b      	bgt.n	800cad8 <tcp_close_shutdown_fin+0x80>
 800ca80:	2b03      	cmp	r3, #3
 800ca82:	d002      	beq.n	800ca8a <tcp_close_shutdown_fin+0x32>
 800ca84:	2b04      	cmp	r3, #4
 800ca86:	d00d      	beq.n	800caa4 <tcp_close_shutdown_fin+0x4c>
 800ca88:	e026      	b.n	800cad8 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800ca8a:	6878      	ldr	r0, [r7, #4]
 800ca8c:	f003 fee2 	bl	8010854 <tcp_send_fin>
 800ca90:	4603      	mov	r3, r0
 800ca92:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800ca94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d11f      	bne.n	800cadc <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	2205      	movs	r2, #5
 800caa0:	751a      	strb	r2, [r3, #20]
      }
      break;
 800caa2:	e01b      	b.n	800cadc <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800caa4:	6878      	ldr	r0, [r7, #4]
 800caa6:	f003 fed5 	bl	8010854 <tcp_send_fin>
 800caaa:	4603      	mov	r3, r0
 800caac:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800caae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d114      	bne.n	800cae0 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	2205      	movs	r2, #5
 800caba:	751a      	strb	r2, [r3, #20]
      }
      break;
 800cabc:	e010      	b.n	800cae0 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800cabe:	6878      	ldr	r0, [r7, #4]
 800cac0:	f003 fec8 	bl	8010854 <tcp_send_fin>
 800cac4:	4603      	mov	r3, r0
 800cac6:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800cac8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d109      	bne.n	800cae4 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	2209      	movs	r2, #9
 800cad4:	751a      	strb	r2, [r3, #20]
      }
      break;
 800cad6:	e005      	b.n	800cae4 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800cad8:	2300      	movs	r3, #0
 800cada:	e01c      	b.n	800cb16 <tcp_close_shutdown_fin+0xbe>
      break;
 800cadc:	bf00      	nop
 800cade:	e002      	b.n	800cae6 <tcp_close_shutdown_fin+0x8e>
      break;
 800cae0:	bf00      	nop
 800cae2:	e000      	b.n	800cae6 <tcp_close_shutdown_fin+0x8e>
      break;
 800cae4:	bf00      	nop
  }

  if (err == ERR_OK) {
 800cae6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800caea:	2b00      	cmp	r3, #0
 800caec:	d103      	bne.n	800caf6 <tcp_close_shutdown_fin+0x9e>
=======
 800ca28:	b580      	push	{r7, lr}
 800ca2a:	b084      	sub	sp, #16
 800ca2c:	af00      	add	r7, sp, #0
 800ca2e:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d106      	bne.n	800ca44 <tcp_close_shutdown_fin+0x1c>
 800ca36:	4b2e      	ldr	r3, [pc, #184]	; (800caf0 <tcp_close_shutdown_fin+0xc8>)
 800ca38:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800ca3c:	492d      	ldr	r1, [pc, #180]	; (800caf4 <tcp_close_shutdown_fin+0xcc>)
 800ca3e:	482e      	ldr	r0, [pc, #184]	; (800caf8 <tcp_close_shutdown_fin+0xd0>)
 800ca40:	f007 fd88 	bl	8014554 <iprintf>

  switch (pcb->state) {
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	7d1b      	ldrb	r3, [r3, #20]
 800ca48:	2b07      	cmp	r3, #7
 800ca4a:	d020      	beq.n	800ca8e <tcp_close_shutdown_fin+0x66>
 800ca4c:	2b07      	cmp	r3, #7
 800ca4e:	dc2b      	bgt.n	800caa8 <tcp_close_shutdown_fin+0x80>
 800ca50:	2b03      	cmp	r3, #3
 800ca52:	d002      	beq.n	800ca5a <tcp_close_shutdown_fin+0x32>
 800ca54:	2b04      	cmp	r3, #4
 800ca56:	d00d      	beq.n	800ca74 <tcp_close_shutdown_fin+0x4c>
 800ca58:	e026      	b.n	800caa8 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800ca5a:	6878      	ldr	r0, [r7, #4]
 800ca5c:	f003 fee2 	bl	8010824 <tcp_send_fin>
 800ca60:	4603      	mov	r3, r0
 800ca62:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800ca64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d11f      	bne.n	800caac <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	2205      	movs	r2, #5
 800ca70:	751a      	strb	r2, [r3, #20]
      }
      break;
 800ca72:	e01b      	b.n	800caac <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800ca74:	6878      	ldr	r0, [r7, #4]
 800ca76:	f003 fed5 	bl	8010824 <tcp_send_fin>
 800ca7a:	4603      	mov	r3, r0
 800ca7c:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800ca7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d114      	bne.n	800cab0 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	2205      	movs	r2, #5
 800ca8a:	751a      	strb	r2, [r3, #20]
      }
      break;
 800ca8c:	e010      	b.n	800cab0 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800ca8e:	6878      	ldr	r0, [r7, #4]
 800ca90:	f003 fec8 	bl	8010824 <tcp_send_fin>
 800ca94:	4603      	mov	r3, r0
 800ca96:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800ca98:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	d109      	bne.n	800cab4 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	2209      	movs	r2, #9
 800caa4:	751a      	strb	r2, [r3, #20]
      }
      break;
 800caa6:	e005      	b.n	800cab4 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800caa8:	2300      	movs	r3, #0
 800caaa:	e01c      	b.n	800cae6 <tcp_close_shutdown_fin+0xbe>
      break;
 800caac:	bf00      	nop
 800caae:	e002      	b.n	800cab6 <tcp_close_shutdown_fin+0x8e>
      break;
 800cab0:	bf00      	nop
 800cab2:	e000      	b.n	800cab6 <tcp_close_shutdown_fin+0x8e>
      break;
 800cab4:	bf00      	nop
  }

  if (err == ERR_OK) {
 800cab6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d103      	bne.n	800cac6 <tcp_close_shutdown_fin+0x9e>
>>>>>>> Stashed changes
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
<<<<<<< Updated upstream
 800caee:	6878      	ldr	r0, [r7, #4]
 800caf0:	f003 ffee 	bl	8010ad0 <tcp_output>
 800caf4:	e00d      	b.n	800cb12 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800caf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cafa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cafe:	d108      	bne.n	800cb12 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	8b5b      	ldrh	r3, [r3, #26]
 800cb04:	f043 0308 	orr.w	r3, r3, #8
 800cb08:	b29a      	uxth	r2, r3
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	835a      	strh	r2, [r3, #26]
=======
 800cabe:	6878      	ldr	r0, [r7, #4]
 800cac0:	f003 ffee 	bl	8010aa0 <tcp_output>
 800cac4:	e00d      	b.n	800cae2 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800cac6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800caca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cace:	d108      	bne.n	800cae2 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	8b5b      	ldrh	r3, [r3, #26]
 800cad4:	f043 0308 	orr.w	r3, r3, #8
 800cad8:	b29a      	uxth	r2, r3
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	835a      	strh	r2, [r3, #26]
>>>>>>> Stashed changes
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
<<<<<<< Updated upstream
 800cb0e:	2300      	movs	r3, #0
 800cb10:	e001      	b.n	800cb16 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800cb12:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800cb16:	4618      	mov	r0, r3
 800cb18:	3710      	adds	r7, #16
 800cb1a:	46bd      	mov	sp, r7
 800cb1c:	bd80      	pop	{r7, pc}
 800cb1e:	bf00      	nop
 800cb20:	08016428 	.word	0x08016428
 800cb24:	080164d8 	.word	0x080164d8
 800cb28:	0801646c 	.word	0x0801646c

0800cb2c <tcp_close>:
=======
 800cade:	2300      	movs	r3, #0
 800cae0:	e001      	b.n	800cae6 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800cae2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800cae6:	4618      	mov	r0, r3
 800cae8:	3710      	adds	r7, #16
 800caea:	46bd      	mov	sp, r7
 800caec:	bd80      	pop	{r7, pc}
 800caee:	bf00      	nop
 800caf0:	0801640c 	.word	0x0801640c
 800caf4:	080164bc 	.word	0x080164bc
 800caf8:	08016450 	.word	0x08016450

0800cafc <tcp_close>:
>>>>>>> Stashed changes
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
<<<<<<< Updated upstream
 800cb2c:	b580      	push	{r7, lr}
 800cb2e:	b082      	sub	sp, #8
 800cb30:	af00      	add	r7, sp, #0
 800cb32:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d109      	bne.n	800cb4e <tcp_close+0x22>
 800cb3a:	4b0f      	ldr	r3, [pc, #60]	; (800cb78 <tcp_close+0x4c>)
 800cb3c:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800cb40:	490e      	ldr	r1, [pc, #56]	; (800cb7c <tcp_close+0x50>)
 800cb42:	480f      	ldr	r0, [pc, #60]	; (800cb80 <tcp_close+0x54>)
 800cb44:	f007 fd1e 	bl	8014584 <iprintf>
 800cb48:	f06f 030f 	mvn.w	r3, #15
 800cb4c:	e00f      	b.n	800cb6e <tcp_close+0x42>
=======
 800cafc:	b580      	push	{r7, lr}
 800cafe:	b082      	sub	sp, #8
 800cb00:	af00      	add	r7, sp, #0
 800cb02:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d109      	bne.n	800cb1e <tcp_close+0x22>
 800cb0a:	4b0f      	ldr	r3, [pc, #60]	; (800cb48 <tcp_close+0x4c>)
 800cb0c:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800cb10:	490e      	ldr	r1, [pc, #56]	; (800cb4c <tcp_close+0x50>)
 800cb12:	480f      	ldr	r0, [pc, #60]	; (800cb50 <tcp_close+0x54>)
 800cb14:	f007 fd1e 	bl	8014554 <iprintf>
 800cb18:	f06f 030f 	mvn.w	r3, #15
 800cb1c:	e00f      	b.n	800cb3e <tcp_close+0x42>
>>>>>>> Stashed changes
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
<<<<<<< Updated upstream
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	7d1b      	ldrb	r3, [r3, #20]
 800cb52:	2b01      	cmp	r3, #1
 800cb54:	d006      	beq.n	800cb64 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	8b5b      	ldrh	r3, [r3, #26]
 800cb5a:	f043 0310 	orr.w	r3, r3, #16
 800cb5e:	b29a      	uxth	r2, r3
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800cb64:	2101      	movs	r1, #1
 800cb66:	6878      	ldr	r0, [r7, #4]
 800cb68:	f7ff fe94 	bl	800c894 <tcp_close_shutdown>
 800cb6c:	4603      	mov	r3, r0
}
 800cb6e:	4618      	mov	r0, r3
 800cb70:	3708      	adds	r7, #8
 800cb72:	46bd      	mov	sp, r7
 800cb74:	bd80      	pop	{r7, pc}
 800cb76:	bf00      	nop
 800cb78:	08016428 	.word	0x08016428
 800cb7c:	08016538 	.word	0x08016538
 800cb80:	0801646c 	.word	0x0801646c

0800cb84 <tcp_abandon>:
=======
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	7d1b      	ldrb	r3, [r3, #20]
 800cb22:	2b01      	cmp	r3, #1
 800cb24:	d006      	beq.n	800cb34 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	8b5b      	ldrh	r3, [r3, #26]
 800cb2a:	f043 0310 	orr.w	r3, r3, #16
 800cb2e:	b29a      	uxth	r2, r3
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800cb34:	2101      	movs	r1, #1
 800cb36:	6878      	ldr	r0, [r7, #4]
 800cb38:	f7ff fe94 	bl	800c864 <tcp_close_shutdown>
 800cb3c:	4603      	mov	r3, r0
}
 800cb3e:	4618      	mov	r0, r3
 800cb40:	3708      	adds	r7, #8
 800cb42:	46bd      	mov	sp, r7
 800cb44:	bd80      	pop	{r7, pc}
 800cb46:	bf00      	nop
 800cb48:	0801640c 	.word	0x0801640c
 800cb4c:	0801651c 	.word	0x0801651c
 800cb50:	08016450 	.word	0x08016450

0800cb54 <tcp_abandon>:
>>>>>>> Stashed changes
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
<<<<<<< Updated upstream
 800cb84:	b580      	push	{r7, lr}
 800cb86:	b08e      	sub	sp, #56	; 0x38
 800cb88:	af04      	add	r7, sp, #16
 800cb8a:	6078      	str	r0, [r7, #4]
 800cb8c:	6039      	str	r1, [r7, #0]
=======
 800cb54:	b580      	push	{r7, lr}
 800cb56:	b08e      	sub	sp, #56	; 0x38
 800cb58:	af04      	add	r7, sp, #16
 800cb5a:	6078      	str	r0, [r7, #4]
 800cb5c:	6039      	str	r1, [r7, #0]
>>>>>>> Stashed changes
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
<<<<<<< Updated upstream
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d107      	bne.n	800cba4 <tcp_abandon+0x20>
 800cb94:	4b52      	ldr	r3, [pc, #328]	; (800cce0 <tcp_abandon+0x15c>)
 800cb96:	f240 223d 	movw	r2, #573	; 0x23d
 800cb9a:	4952      	ldr	r1, [pc, #328]	; (800cce4 <tcp_abandon+0x160>)
 800cb9c:	4852      	ldr	r0, [pc, #328]	; (800cce8 <tcp_abandon+0x164>)
 800cb9e:	f007 fcf1 	bl	8014584 <iprintf>
 800cba2:	e099      	b.n	800ccd8 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	7d1b      	ldrb	r3, [r3, #20]
 800cba8:	2b01      	cmp	r3, #1
 800cbaa:	d106      	bne.n	800cbba <tcp_abandon+0x36>
 800cbac:	4b4c      	ldr	r3, [pc, #304]	; (800cce0 <tcp_abandon+0x15c>)
 800cbae:	f44f 7210 	mov.w	r2, #576	; 0x240
 800cbb2:	494e      	ldr	r1, [pc, #312]	; (800ccec <tcp_abandon+0x168>)
 800cbb4:	484c      	ldr	r0, [pc, #304]	; (800cce8 <tcp_abandon+0x164>)
 800cbb6:	f007 fce5 	bl	8014584 <iprintf>
=======
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d107      	bne.n	800cb74 <tcp_abandon+0x20>
 800cb64:	4b52      	ldr	r3, [pc, #328]	; (800ccb0 <tcp_abandon+0x15c>)
 800cb66:	f240 223d 	movw	r2, #573	; 0x23d
 800cb6a:	4952      	ldr	r1, [pc, #328]	; (800ccb4 <tcp_abandon+0x160>)
 800cb6c:	4852      	ldr	r0, [pc, #328]	; (800ccb8 <tcp_abandon+0x164>)
 800cb6e:	f007 fcf1 	bl	8014554 <iprintf>
 800cb72:	e099      	b.n	800cca8 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	7d1b      	ldrb	r3, [r3, #20]
 800cb78:	2b01      	cmp	r3, #1
 800cb7a:	d106      	bne.n	800cb8a <tcp_abandon+0x36>
 800cb7c:	4b4c      	ldr	r3, [pc, #304]	; (800ccb0 <tcp_abandon+0x15c>)
 800cb7e:	f44f 7210 	mov.w	r2, #576	; 0x240
 800cb82:	494e      	ldr	r1, [pc, #312]	; (800ccbc <tcp_abandon+0x168>)
 800cb84:	484c      	ldr	r0, [pc, #304]	; (800ccb8 <tcp_abandon+0x164>)
 800cb86:	f007 fce5 	bl	8014554 <iprintf>
>>>>>>> Stashed changes
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
<<<<<<< Updated upstream
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	7d1b      	ldrb	r3, [r3, #20]
 800cbbe:	2b0a      	cmp	r3, #10
 800cbc0:	d107      	bne.n	800cbd2 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800cbc2:	6879      	ldr	r1, [r7, #4]
 800cbc4:	484a      	ldr	r0, [pc, #296]	; (800ccf0 <tcp_abandon+0x16c>)
 800cbc6:	f000 ffc3 	bl	800db50 <tcp_pcb_remove>
    tcp_free(pcb);
 800cbca:	6878      	ldr	r0, [r7, #4]
 800cbcc:	f7ff fdb0 	bl	800c730 <tcp_free>
 800cbd0:	e082      	b.n	800ccd8 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800cbd2:	2300      	movs	r3, #0
 800cbd4:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800cbd6:	2300      	movs	r3, #0
 800cbd8:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cbde:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbe4:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cbec:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	691b      	ldr	r3, [r3, #16]
 800cbf2:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	7d1b      	ldrb	r3, [r3, #20]
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d126      	bne.n	800cc4a <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	8adb      	ldrh	r3, [r3, #22]
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d02e      	beq.n	800cc62 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800cc04:	4b3b      	ldr	r3, [pc, #236]	; (800ccf4 <tcp_abandon+0x170>)
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	687a      	ldr	r2, [r7, #4]
 800cc0a:	429a      	cmp	r2, r3
 800cc0c:	d105      	bne.n	800cc1a <tcp_abandon+0x96>
 800cc0e:	4b39      	ldr	r3, [pc, #228]	; (800ccf4 <tcp_abandon+0x170>)
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	68db      	ldr	r3, [r3, #12]
 800cc14:	4a37      	ldr	r2, [pc, #220]	; (800ccf4 <tcp_abandon+0x170>)
 800cc16:	6013      	str	r3, [r2, #0]
 800cc18:	e013      	b.n	800cc42 <tcp_abandon+0xbe>
 800cc1a:	4b36      	ldr	r3, [pc, #216]	; (800ccf4 <tcp_abandon+0x170>)
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	61fb      	str	r3, [r7, #28]
 800cc20:	e00c      	b.n	800cc3c <tcp_abandon+0xb8>
 800cc22:	69fb      	ldr	r3, [r7, #28]
 800cc24:	68db      	ldr	r3, [r3, #12]
 800cc26:	687a      	ldr	r2, [r7, #4]
 800cc28:	429a      	cmp	r2, r3
 800cc2a:	d104      	bne.n	800cc36 <tcp_abandon+0xb2>
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	68da      	ldr	r2, [r3, #12]
 800cc30:	69fb      	ldr	r3, [r7, #28]
 800cc32:	60da      	str	r2, [r3, #12]
 800cc34:	e005      	b.n	800cc42 <tcp_abandon+0xbe>
 800cc36:	69fb      	ldr	r3, [r7, #28]
 800cc38:	68db      	ldr	r3, [r3, #12]
 800cc3a:	61fb      	str	r3, [r7, #28]
 800cc3c:	69fb      	ldr	r3, [r7, #28]
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d1ef      	bne.n	800cc22 <tcp_abandon+0x9e>
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	2200      	movs	r2, #0
 800cc46:	60da      	str	r2, [r3, #12]
 800cc48:	e00b      	b.n	800cc62 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800cc4a:	683b      	ldr	r3, [r7, #0]
 800cc4c:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	8adb      	ldrh	r3, [r3, #22]
 800cc52:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800cc54:	6879      	ldr	r1, [r7, #4]
 800cc56:	4828      	ldr	r0, [pc, #160]	; (800ccf8 <tcp_abandon+0x174>)
 800cc58:	f000 ff7a 	bl	800db50 <tcp_pcb_remove>
 800cc5c:	4b27      	ldr	r3, [pc, #156]	; (800ccfc <tcp_abandon+0x178>)
 800cc5e:	2201      	movs	r2, #1
 800cc60:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d004      	beq.n	800cc74 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cc6e:	4618      	mov	r0, r3
 800cc70:	f000 fd1c 	bl	800d6ac <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	d004      	beq.n	800cc86 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cc80:	4618      	mov	r0, r3
 800cc82:	f000 fd13 	bl	800d6ac <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	d004      	beq.n	800cc98 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cc92:	4618      	mov	r0, r3
 800cc94:	f000 fd0a 	bl	800d6ac <tcp_segs_free>
=======
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	7d1b      	ldrb	r3, [r3, #20]
 800cb8e:	2b0a      	cmp	r3, #10
 800cb90:	d107      	bne.n	800cba2 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800cb92:	6879      	ldr	r1, [r7, #4]
 800cb94:	484a      	ldr	r0, [pc, #296]	; (800ccc0 <tcp_abandon+0x16c>)
 800cb96:	f000 ffc3 	bl	800db20 <tcp_pcb_remove>
    tcp_free(pcb);
 800cb9a:	6878      	ldr	r0, [r7, #4]
 800cb9c:	f7ff fdb0 	bl	800c700 <tcp_free>
 800cba0:	e082      	b.n	800cca8 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800cba2:	2300      	movs	r3, #0
 800cba4:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800cba6:	2300      	movs	r3, #0
 800cba8:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cbae:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbb4:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cbbc:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	691b      	ldr	r3, [r3, #16]
 800cbc2:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	7d1b      	ldrb	r3, [r3, #20]
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d126      	bne.n	800cc1a <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	8adb      	ldrh	r3, [r3, #22]
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d02e      	beq.n	800cc32 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800cbd4:	4b3b      	ldr	r3, [pc, #236]	; (800ccc4 <tcp_abandon+0x170>)
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	687a      	ldr	r2, [r7, #4]
 800cbda:	429a      	cmp	r2, r3
 800cbdc:	d105      	bne.n	800cbea <tcp_abandon+0x96>
 800cbde:	4b39      	ldr	r3, [pc, #228]	; (800ccc4 <tcp_abandon+0x170>)
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	68db      	ldr	r3, [r3, #12]
 800cbe4:	4a37      	ldr	r2, [pc, #220]	; (800ccc4 <tcp_abandon+0x170>)
 800cbe6:	6013      	str	r3, [r2, #0]
 800cbe8:	e013      	b.n	800cc12 <tcp_abandon+0xbe>
 800cbea:	4b36      	ldr	r3, [pc, #216]	; (800ccc4 <tcp_abandon+0x170>)
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	61fb      	str	r3, [r7, #28]
 800cbf0:	e00c      	b.n	800cc0c <tcp_abandon+0xb8>
 800cbf2:	69fb      	ldr	r3, [r7, #28]
 800cbf4:	68db      	ldr	r3, [r3, #12]
 800cbf6:	687a      	ldr	r2, [r7, #4]
 800cbf8:	429a      	cmp	r2, r3
 800cbfa:	d104      	bne.n	800cc06 <tcp_abandon+0xb2>
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	68da      	ldr	r2, [r3, #12]
 800cc00:	69fb      	ldr	r3, [r7, #28]
 800cc02:	60da      	str	r2, [r3, #12]
 800cc04:	e005      	b.n	800cc12 <tcp_abandon+0xbe>
 800cc06:	69fb      	ldr	r3, [r7, #28]
 800cc08:	68db      	ldr	r3, [r3, #12]
 800cc0a:	61fb      	str	r3, [r7, #28]
 800cc0c:	69fb      	ldr	r3, [r7, #28]
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d1ef      	bne.n	800cbf2 <tcp_abandon+0x9e>
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	2200      	movs	r2, #0
 800cc16:	60da      	str	r2, [r3, #12]
 800cc18:	e00b      	b.n	800cc32 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800cc1a:	683b      	ldr	r3, [r7, #0]
 800cc1c:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	8adb      	ldrh	r3, [r3, #22]
 800cc22:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800cc24:	6879      	ldr	r1, [r7, #4]
 800cc26:	4828      	ldr	r0, [pc, #160]	; (800ccc8 <tcp_abandon+0x174>)
 800cc28:	f000 ff7a 	bl	800db20 <tcp_pcb_remove>
 800cc2c:	4b27      	ldr	r3, [pc, #156]	; (800cccc <tcp_abandon+0x178>)
 800cc2e:	2201      	movs	r2, #1
 800cc30:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d004      	beq.n	800cc44 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cc3e:	4618      	mov	r0, r3
 800cc40:	f000 fd1c 	bl	800d67c <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d004      	beq.n	800cc56 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cc50:	4618      	mov	r0, r3
 800cc52:	f000 fd13 	bl	800d67c <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d004      	beq.n	800cc68 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cc62:	4618      	mov	r0, r3
 800cc64:	f000 fd0a 	bl	800d67c <tcp_segs_free>
>>>>>>> Stashed changes
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
<<<<<<< Updated upstream
 800cc98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d00e      	beq.n	800ccbc <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800cc9e:	6879      	ldr	r1, [r7, #4]
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	3304      	adds	r3, #4
 800cca4:	687a      	ldr	r2, [r7, #4]
 800cca6:	8b12      	ldrh	r2, [r2, #24]
 800cca8:	9202      	str	r2, [sp, #8]
 800ccaa:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800ccac:	9201      	str	r2, [sp, #4]
 800ccae:	9300      	str	r3, [sp, #0]
 800ccb0:	460b      	mov	r3, r1
 800ccb2:	697a      	ldr	r2, [r7, #20]
 800ccb4:	69b9      	ldr	r1, [r7, #24]
 800ccb6:	6878      	ldr	r0, [r7, #4]
 800ccb8:	f004 fcbe 	bl	8011638 <tcp_rst>
    }
    last_state = pcb->state;
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	7d1b      	ldrb	r3, [r3, #20]
 800ccc0:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800ccc2:	6878      	ldr	r0, [r7, #4]
 800ccc4:	f7ff fd34 	bl	800c730 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800ccc8:	693b      	ldr	r3, [r7, #16]
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d004      	beq.n	800ccd8 <tcp_abandon+0x154>
 800ccce:	693b      	ldr	r3, [r7, #16]
 800ccd0:	f06f 010c 	mvn.w	r1, #12
 800ccd4:	68f8      	ldr	r0, [r7, #12]
 800ccd6:	4798      	blx	r3
  }
}
 800ccd8:	3728      	adds	r7, #40	; 0x28
 800ccda:	46bd      	mov	sp, r7
 800ccdc:	bd80      	pop	{r7, pc}
 800ccde:	bf00      	nop
 800cce0:	08016428 	.word	0x08016428
 800cce4:	0801656c 	.word	0x0801656c
 800cce8:	0801646c 	.word	0x0801646c
 800ccec:	08016588 	.word	0x08016588
 800ccf0:	200072b0 	.word	0x200072b0
 800ccf4:	200072ac 	.word	0x200072ac
 800ccf8:	200072a0 	.word	0x200072a0
 800ccfc:	2000729c 	.word	0x2000729c

0800cd00 <tcp_abort>:
=======
 800cc68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	d00e      	beq.n	800cc8c <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800cc6e:	6879      	ldr	r1, [r7, #4]
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	3304      	adds	r3, #4
 800cc74:	687a      	ldr	r2, [r7, #4]
 800cc76:	8b12      	ldrh	r2, [r2, #24]
 800cc78:	9202      	str	r2, [sp, #8]
 800cc7a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800cc7c:	9201      	str	r2, [sp, #4]
 800cc7e:	9300      	str	r3, [sp, #0]
 800cc80:	460b      	mov	r3, r1
 800cc82:	697a      	ldr	r2, [r7, #20]
 800cc84:	69b9      	ldr	r1, [r7, #24]
 800cc86:	6878      	ldr	r0, [r7, #4]
 800cc88:	f004 fcbe 	bl	8011608 <tcp_rst>
    }
    last_state = pcb->state;
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	7d1b      	ldrb	r3, [r3, #20]
 800cc90:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800cc92:	6878      	ldr	r0, [r7, #4]
 800cc94:	f7ff fd34 	bl	800c700 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800cc98:	693b      	ldr	r3, [r7, #16]
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d004      	beq.n	800cca8 <tcp_abandon+0x154>
 800cc9e:	693b      	ldr	r3, [r7, #16]
 800cca0:	f06f 010c 	mvn.w	r1, #12
 800cca4:	68f8      	ldr	r0, [r7, #12]
 800cca6:	4798      	blx	r3
  }
}
 800cca8:	3728      	adds	r7, #40	; 0x28
 800ccaa:	46bd      	mov	sp, r7
 800ccac:	bd80      	pop	{r7, pc}
 800ccae:	bf00      	nop
 800ccb0:	0801640c 	.word	0x0801640c
 800ccb4:	08016550 	.word	0x08016550
 800ccb8:	08016450 	.word	0x08016450
 800ccbc:	0801656c 	.word	0x0801656c
 800ccc0:	200072b0 	.word	0x200072b0
 800ccc4:	200072ac 	.word	0x200072ac
 800ccc8:	200072a0 	.word	0x200072a0
 800cccc:	2000729c 	.word	0x2000729c

0800ccd0 <tcp_abort>:
>>>>>>> Stashed changes
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
<<<<<<< Updated upstream
 800cd00:	b580      	push	{r7, lr}
 800cd02:	b082      	sub	sp, #8
 800cd04:	af00      	add	r7, sp, #0
 800cd06:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800cd08:	2101      	movs	r1, #1
 800cd0a:	6878      	ldr	r0, [r7, #4]
 800cd0c:	f7ff ff3a 	bl	800cb84 <tcp_abandon>
}
 800cd10:	bf00      	nop
 800cd12:	3708      	adds	r7, #8
 800cd14:	46bd      	mov	sp, r7
 800cd16:	bd80      	pop	{r7, pc}

0800cd18 <tcp_update_rcv_ann_wnd>:
=======
 800ccd0:	b580      	push	{r7, lr}
 800ccd2:	b082      	sub	sp, #8
 800ccd4:	af00      	add	r7, sp, #0
 800ccd6:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800ccd8:	2101      	movs	r1, #1
 800ccda:	6878      	ldr	r0, [r7, #4]
 800ccdc:	f7ff ff3a 	bl	800cb54 <tcp_abandon>
}
 800cce0:	bf00      	nop
 800cce2:	3708      	adds	r7, #8
 800cce4:	46bd      	mov	sp, r7
 800cce6:	bd80      	pop	{r7, pc}

0800cce8 <tcp_update_rcv_ann_wnd>:
>>>>>>> Stashed changes
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
<<<<<<< Updated upstream
 800cd18:	b580      	push	{r7, lr}
 800cd1a:	b084      	sub	sp, #16
 800cd1c:	af00      	add	r7, sp, #0
 800cd1e:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	d106      	bne.n	800cd34 <tcp_update_rcv_ann_wnd+0x1c>
 800cd26:	4b25      	ldr	r3, [pc, #148]	; (800cdbc <tcp_update_rcv_ann_wnd+0xa4>)
 800cd28:	f240 32a6 	movw	r2, #934	; 0x3a6
 800cd2c:	4924      	ldr	r1, [pc, #144]	; (800cdc0 <tcp_update_rcv_ann_wnd+0xa8>)
 800cd2e:	4825      	ldr	r0, [pc, #148]	; (800cdc4 <tcp_update_rcv_ann_wnd+0xac>)
 800cd30:	f007 fc28 	bl	8014584 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd38:	687a      	ldr	r2, [r7, #4]
 800cd3a:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800cd3c:	4413      	add	r3, r2
 800cd3e:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd44:	687a      	ldr	r2, [r7, #4]
 800cd46:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800cd48:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800cd4c:	bf28      	it	cs
 800cd4e:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800cd52:	b292      	uxth	r2, r2
 800cd54:	4413      	add	r3, r2
 800cd56:	68fa      	ldr	r2, [r7, #12]
 800cd58:	1ad3      	subs	r3, r2, r3
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	db08      	blt.n	800cd70 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd6a:	68fa      	ldr	r2, [r7, #12]
 800cd6c:	1ad3      	subs	r3, r2, r3
 800cd6e:	e020      	b.n	800cdb2 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd78:	1ad3      	subs	r3, r2, r3
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	dd03      	ble.n	800cd86 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	2200      	movs	r2, #0
 800cd82:	855a      	strh	r2, [r3, #42]	; 0x2a
 800cd84:	e014      	b.n	800cdb0 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd8e:	1ad3      	subs	r3, r2, r3
 800cd90:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800cd92:	68bb      	ldr	r3, [r7, #8]
 800cd94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cd98:	d306      	bcc.n	800cda8 <tcp_update_rcv_ann_wnd+0x90>
 800cd9a:	4b08      	ldr	r3, [pc, #32]	; (800cdbc <tcp_update_rcv_ann_wnd+0xa4>)
 800cd9c:	f240 32b6 	movw	r2, #950	; 0x3b6
 800cda0:	4909      	ldr	r1, [pc, #36]	; (800cdc8 <tcp_update_rcv_ann_wnd+0xb0>)
 800cda2:	4808      	ldr	r0, [pc, #32]	; (800cdc4 <tcp_update_rcv_ann_wnd+0xac>)
 800cda4:	f007 fbee 	bl	8014584 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800cda8:	68bb      	ldr	r3, [r7, #8]
 800cdaa:	b29a      	uxth	r2, r3
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800cdb0:	2300      	movs	r3, #0
  }
}
 800cdb2:	4618      	mov	r0, r3
 800cdb4:	3710      	adds	r7, #16
 800cdb6:	46bd      	mov	sp, r7
 800cdb8:	bd80      	pop	{r7, pc}
 800cdba:	bf00      	nop
 800cdbc:	08016428 	.word	0x08016428
 800cdc0:	08016684 	.word	0x08016684
 800cdc4:	0801646c 	.word	0x0801646c
 800cdc8:	080166a8 	.word	0x080166a8

0800cdcc <tcp_recved>:
=======
 800cce8:	b580      	push	{r7, lr}
 800ccea:	b084      	sub	sp, #16
 800ccec:	af00      	add	r7, sp, #0
 800ccee:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d106      	bne.n	800cd04 <tcp_update_rcv_ann_wnd+0x1c>
 800ccf6:	4b25      	ldr	r3, [pc, #148]	; (800cd8c <tcp_update_rcv_ann_wnd+0xa4>)
 800ccf8:	f240 32a6 	movw	r2, #934	; 0x3a6
 800ccfc:	4924      	ldr	r1, [pc, #144]	; (800cd90 <tcp_update_rcv_ann_wnd+0xa8>)
 800ccfe:	4825      	ldr	r0, [pc, #148]	; (800cd94 <tcp_update_rcv_ann_wnd+0xac>)
 800cd00:	f007 fc28 	bl	8014554 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd08:	687a      	ldr	r2, [r7, #4]
 800cd0a:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800cd0c:	4413      	add	r3, r2
 800cd0e:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd14:	687a      	ldr	r2, [r7, #4]
 800cd16:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800cd18:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800cd1c:	bf28      	it	cs
 800cd1e:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800cd22:	b292      	uxth	r2, r2
 800cd24:	4413      	add	r3, r2
 800cd26:	68fa      	ldr	r2, [r7, #12]
 800cd28:	1ad3      	subs	r3, r2, r3
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	db08      	blt.n	800cd40 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd3a:	68fa      	ldr	r2, [r7, #12]
 800cd3c:	1ad3      	subs	r3, r2, r3
 800cd3e:	e020      	b.n	800cd82 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd48:	1ad3      	subs	r3, r2, r3
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	dd03      	ble.n	800cd56 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	2200      	movs	r2, #0
 800cd52:	855a      	strh	r2, [r3, #42]	; 0x2a
 800cd54:	e014      	b.n	800cd80 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd5e:	1ad3      	subs	r3, r2, r3
 800cd60:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800cd62:	68bb      	ldr	r3, [r7, #8]
 800cd64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cd68:	d306      	bcc.n	800cd78 <tcp_update_rcv_ann_wnd+0x90>
 800cd6a:	4b08      	ldr	r3, [pc, #32]	; (800cd8c <tcp_update_rcv_ann_wnd+0xa4>)
 800cd6c:	f240 32b6 	movw	r2, #950	; 0x3b6
 800cd70:	4909      	ldr	r1, [pc, #36]	; (800cd98 <tcp_update_rcv_ann_wnd+0xb0>)
 800cd72:	4808      	ldr	r0, [pc, #32]	; (800cd94 <tcp_update_rcv_ann_wnd+0xac>)
 800cd74:	f007 fbee 	bl	8014554 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800cd78:	68bb      	ldr	r3, [r7, #8]
 800cd7a:	b29a      	uxth	r2, r3
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800cd80:	2300      	movs	r3, #0
  }
}
 800cd82:	4618      	mov	r0, r3
 800cd84:	3710      	adds	r7, #16
 800cd86:	46bd      	mov	sp, r7
 800cd88:	bd80      	pop	{r7, pc}
 800cd8a:	bf00      	nop
 800cd8c:	0801640c 	.word	0x0801640c
 800cd90:	08016668 	.word	0x08016668
 800cd94:	08016450 	.word	0x08016450
 800cd98:	0801668c 	.word	0x0801668c

0800cd9c <tcp_recved>:
>>>>>>> Stashed changes
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
<<<<<<< Updated upstream
 800cdcc:	b580      	push	{r7, lr}
 800cdce:	b084      	sub	sp, #16
 800cdd0:	af00      	add	r7, sp, #0
 800cdd2:	6078      	str	r0, [r7, #4]
 800cdd4:	460b      	mov	r3, r1
 800cdd6:	807b      	strh	r3, [r7, #2]
=======
 800cd9c:	b580      	push	{r7, lr}
 800cd9e:	b084      	sub	sp, #16
 800cda0:	af00      	add	r7, sp, #0
 800cda2:	6078      	str	r0, [r7, #4]
 800cda4:	460b      	mov	r3, r1
 800cda6:	807b      	strh	r3, [r7, #2]
>>>>>>> Stashed changes
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
<<<<<<< Updated upstream
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	d107      	bne.n	800cdee <tcp_recved+0x22>
 800cdde:	4b1f      	ldr	r3, [pc, #124]	; (800ce5c <tcp_recved+0x90>)
 800cde0:	f240 32cf 	movw	r2, #975	; 0x3cf
 800cde4:	491e      	ldr	r1, [pc, #120]	; (800ce60 <tcp_recved+0x94>)
 800cde6:	481f      	ldr	r0, [pc, #124]	; (800ce64 <tcp_recved+0x98>)
 800cde8:	f007 fbcc 	bl	8014584 <iprintf>
 800cdec:	e032      	b.n	800ce54 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	7d1b      	ldrb	r3, [r3, #20]
 800cdf2:	2b01      	cmp	r3, #1
 800cdf4:	d106      	bne.n	800ce04 <tcp_recved+0x38>
 800cdf6:	4b19      	ldr	r3, [pc, #100]	; (800ce5c <tcp_recved+0x90>)
 800cdf8:	f240 32d2 	movw	r2, #978	; 0x3d2
 800cdfc:	491a      	ldr	r1, [pc, #104]	; (800ce68 <tcp_recved+0x9c>)
 800cdfe:	4819      	ldr	r0, [pc, #100]	; (800ce64 <tcp_recved+0x98>)
 800ce00:	f007 fbc0 	bl	8014584 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ce08:	887b      	ldrh	r3, [r7, #2]
 800ce0a:	4413      	add	r3, r2
 800ce0c:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800ce0e:	89fb      	ldrh	r3, [r7, #14]
 800ce10:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800ce14:	d804      	bhi.n	800ce20 <tcp_recved+0x54>
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ce1a:	89fa      	ldrh	r2, [r7, #14]
 800ce1c:	429a      	cmp	r2, r3
 800ce1e:	d204      	bcs.n	800ce2a <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800ce26:	851a      	strh	r2, [r3, #40]	; 0x28
 800ce28:	e002      	b.n	800ce30 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	89fa      	ldrh	r2, [r7, #14]
 800ce2e:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800ce30:	6878      	ldr	r0, [r7, #4]
 800ce32:	f7ff ff71 	bl	800cd18 <tcp_update_rcv_ann_wnd>
 800ce36:	60b8      	str	r0, [r7, #8]
=======
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d107      	bne.n	800cdbe <tcp_recved+0x22>
 800cdae:	4b1f      	ldr	r3, [pc, #124]	; (800ce2c <tcp_recved+0x90>)
 800cdb0:	f240 32cf 	movw	r2, #975	; 0x3cf
 800cdb4:	491e      	ldr	r1, [pc, #120]	; (800ce30 <tcp_recved+0x94>)
 800cdb6:	481f      	ldr	r0, [pc, #124]	; (800ce34 <tcp_recved+0x98>)
 800cdb8:	f007 fbcc 	bl	8014554 <iprintf>
 800cdbc:	e032      	b.n	800ce24 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	7d1b      	ldrb	r3, [r3, #20]
 800cdc2:	2b01      	cmp	r3, #1
 800cdc4:	d106      	bne.n	800cdd4 <tcp_recved+0x38>
 800cdc6:	4b19      	ldr	r3, [pc, #100]	; (800ce2c <tcp_recved+0x90>)
 800cdc8:	f240 32d2 	movw	r2, #978	; 0x3d2
 800cdcc:	491a      	ldr	r1, [pc, #104]	; (800ce38 <tcp_recved+0x9c>)
 800cdce:	4819      	ldr	r0, [pc, #100]	; (800ce34 <tcp_recved+0x98>)
 800cdd0:	f007 fbc0 	bl	8014554 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800cdd8:	887b      	ldrh	r3, [r7, #2]
 800cdda:	4413      	add	r3, r2
 800cddc:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800cdde:	89fb      	ldrh	r3, [r7, #14]
 800cde0:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800cde4:	d804      	bhi.n	800cdf0 <tcp_recved+0x54>
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cdea:	89fa      	ldrh	r2, [r7, #14]
 800cdec:	429a      	cmp	r2, r3
 800cdee:	d204      	bcs.n	800cdfa <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800cdf6:	851a      	strh	r2, [r3, #40]	; 0x28
 800cdf8:	e002      	b.n	800ce00 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	89fa      	ldrh	r2, [r7, #14]
 800cdfe:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800ce00:	6878      	ldr	r0, [r7, #4]
 800ce02:	f7ff ff71 	bl	800cce8 <tcp_update_rcv_ann_wnd>
 800ce06:	60b8      	str	r0, [r7, #8]
>>>>>>> Stashed changes

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
<<<<<<< Updated upstream
 800ce38:	68bb      	ldr	r3, [r7, #8]
 800ce3a:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800ce3e:	d309      	bcc.n	800ce54 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	8b5b      	ldrh	r3, [r3, #26]
 800ce44:	f043 0302 	orr.w	r3, r3, #2
 800ce48:	b29a      	uxth	r2, r3
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800ce4e:	6878      	ldr	r0, [r7, #4]
 800ce50:	f003 fe3e 	bl	8010ad0 <tcp_output>
=======
 800ce08:	68bb      	ldr	r3, [r7, #8]
 800ce0a:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800ce0e:	d309      	bcc.n	800ce24 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	8b5b      	ldrh	r3, [r3, #26]
 800ce14:	f043 0302 	orr.w	r3, r3, #2
 800ce18:	b29a      	uxth	r2, r3
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800ce1e:	6878      	ldr	r0, [r7, #4]
 800ce20:	f003 fe3e 	bl	8010aa0 <tcp_output>
>>>>>>> Stashed changes
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
<<<<<<< Updated upstream
 800ce54:	3710      	adds	r7, #16
 800ce56:	46bd      	mov	sp, r7
 800ce58:	bd80      	pop	{r7, pc}
 800ce5a:	bf00      	nop
 800ce5c:	08016428 	.word	0x08016428
 800ce60:	080166c4 	.word	0x080166c4
 800ce64:	0801646c 	.word	0x0801646c
 800ce68:	080166dc 	.word	0x080166dc

0800ce6c <tcp_slowtmr>:
=======
 800ce24:	3710      	adds	r7, #16
 800ce26:	46bd      	mov	sp, r7
 800ce28:	bd80      	pop	{r7, pc}
 800ce2a:	bf00      	nop
 800ce2c:	0801640c 	.word	0x0801640c
 800ce30:	080166a8 	.word	0x080166a8
 800ce34:	08016450 	.word	0x08016450
 800ce38:	080166c0 	.word	0x080166c0

0800ce3c <tcp_slowtmr>:
>>>>>>> Stashed changes
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
<<<<<<< Updated upstream
 800ce6c:	b5b0      	push	{r4, r5, r7, lr}
 800ce6e:	b090      	sub	sp, #64	; 0x40
 800ce70:	af04      	add	r7, sp, #16
=======
 800ce3c:	b5b0      	push	{r4, r5, r7, lr}
 800ce3e:	b090      	sub	sp, #64	; 0x40
 800ce40:	af04      	add	r7, sp, #16
>>>>>>> Stashed changes
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
<<<<<<< Updated upstream
 800ce72:	2300      	movs	r3, #0
 800ce74:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800ce78:	4b94      	ldr	r3, [pc, #592]	; (800d0cc <tcp_slowtmr+0x260>)
 800ce7a:	681b      	ldr	r3, [r3, #0]
 800ce7c:	3301      	adds	r3, #1
 800ce7e:	4a93      	ldr	r2, [pc, #588]	; (800d0cc <tcp_slowtmr+0x260>)
 800ce80:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800ce82:	4b93      	ldr	r3, [pc, #588]	; (800d0d0 <tcp_slowtmr+0x264>)
 800ce84:	781b      	ldrb	r3, [r3, #0]
 800ce86:	3301      	adds	r3, #1
 800ce88:	b2da      	uxtb	r2, r3
 800ce8a:	4b91      	ldr	r3, [pc, #580]	; (800d0d0 <tcp_slowtmr+0x264>)
 800ce8c:	701a      	strb	r2, [r3, #0]
=======
 800ce42:	2300      	movs	r3, #0
 800ce44:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800ce48:	4b94      	ldr	r3, [pc, #592]	; (800d09c <tcp_slowtmr+0x260>)
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	3301      	adds	r3, #1
 800ce4e:	4a93      	ldr	r2, [pc, #588]	; (800d09c <tcp_slowtmr+0x260>)
 800ce50:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800ce52:	4b93      	ldr	r3, [pc, #588]	; (800d0a0 <tcp_slowtmr+0x264>)
 800ce54:	781b      	ldrb	r3, [r3, #0]
 800ce56:	3301      	adds	r3, #1
 800ce58:	b2da      	uxtb	r2, r3
 800ce5a:	4b91      	ldr	r3, [pc, #580]	; (800d0a0 <tcp_slowtmr+0x264>)
 800ce5c:	701a      	strb	r2, [r3, #0]
>>>>>>> Stashed changes

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
<<<<<<< Updated upstream
 800ce8e:	2300      	movs	r3, #0
 800ce90:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800ce92:	4b90      	ldr	r3, [pc, #576]	; (800d0d4 <tcp_slowtmr+0x268>)
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	62fb      	str	r3, [r7, #44]	; 0x2c
=======
 800ce5e:	2300      	movs	r3, #0
 800ce60:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800ce62:	4b90      	ldr	r3, [pc, #576]	; (800d0a4 <tcp_slowtmr+0x268>)
 800ce64:	681b      	ldr	r3, [r3, #0]
 800ce66:	62fb      	str	r3, [r7, #44]	; 0x2c
>>>>>>> Stashed changes
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
<<<<<<< Updated upstream
 800ce98:	e29f      	b.n	800d3da <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800ce9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce9c:	7d1b      	ldrb	r3, [r3, #20]
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d106      	bne.n	800ceb0 <tcp_slowtmr+0x44>
 800cea2:	4b8d      	ldr	r3, [pc, #564]	; (800d0d8 <tcp_slowtmr+0x26c>)
 800cea4:	f240 42be 	movw	r2, #1214	; 0x4be
 800cea8:	498c      	ldr	r1, [pc, #560]	; (800d0dc <tcp_slowtmr+0x270>)
 800ceaa:	488d      	ldr	r0, [pc, #564]	; (800d0e0 <tcp_slowtmr+0x274>)
 800ceac:	f007 fb6a 	bl	8014584 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800ceb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ceb2:	7d1b      	ldrb	r3, [r3, #20]
 800ceb4:	2b01      	cmp	r3, #1
 800ceb6:	d106      	bne.n	800cec6 <tcp_slowtmr+0x5a>
 800ceb8:	4b87      	ldr	r3, [pc, #540]	; (800d0d8 <tcp_slowtmr+0x26c>)
 800ceba:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800cebe:	4989      	ldr	r1, [pc, #548]	; (800d0e4 <tcp_slowtmr+0x278>)
 800cec0:	4887      	ldr	r0, [pc, #540]	; (800d0e0 <tcp_slowtmr+0x274>)
 800cec2:	f007 fb5f 	bl	8014584 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800cec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cec8:	7d1b      	ldrb	r3, [r3, #20]
 800ceca:	2b0a      	cmp	r3, #10
 800cecc:	d106      	bne.n	800cedc <tcp_slowtmr+0x70>
 800cece:	4b82      	ldr	r3, [pc, #520]	; (800d0d8 <tcp_slowtmr+0x26c>)
 800ced0:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800ced4:	4984      	ldr	r1, [pc, #528]	; (800d0e8 <tcp_slowtmr+0x27c>)
 800ced6:	4882      	ldr	r0, [pc, #520]	; (800d0e0 <tcp_slowtmr+0x274>)
 800ced8:	f007 fb54 	bl	8014584 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800cedc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cede:	7f9a      	ldrb	r2, [r3, #30]
 800cee0:	4b7b      	ldr	r3, [pc, #492]	; (800d0d0 <tcp_slowtmr+0x264>)
 800cee2:	781b      	ldrb	r3, [r3, #0]
 800cee4:	429a      	cmp	r2, r3
 800cee6:	d105      	bne.n	800cef4 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800cee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ceea:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800ceec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ceee:	68db      	ldr	r3, [r3, #12]
 800cef0:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800cef2:	e272      	b.n	800d3da <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 800cef4:	4b76      	ldr	r3, [pc, #472]	; (800d0d0 <tcp_slowtmr+0x264>)
 800cef6:	781a      	ldrb	r2, [r3, #0]
 800cef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cefa:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800cefc:	2300      	movs	r3, #0
 800cefe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800cf02:	2300      	movs	r3, #0
 800cf04:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800cf08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf0a:	7d1b      	ldrb	r3, [r3, #20]
 800cf0c:	2b02      	cmp	r3, #2
 800cf0e:	d10a      	bne.n	800cf26 <tcp_slowtmr+0xba>
 800cf10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf12:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800cf16:	2b05      	cmp	r3, #5
 800cf18:	d905      	bls.n	800cf26 <tcp_slowtmr+0xba>
      ++pcb_remove;
 800cf1a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cf1e:	3301      	adds	r3, #1
 800cf20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cf24:	e11e      	b.n	800d164 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800cf26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf28:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800cf2c:	2b0b      	cmp	r3, #11
 800cf2e:	d905      	bls.n	800cf3c <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800cf30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cf34:	3301      	adds	r3, #1
 800cf36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cf3a:	e113      	b.n	800d164 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800cf3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf3e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d075      	beq.n	800d032 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800cf46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	d006      	beq.n	800cf5c <tcp_slowtmr+0xf0>
 800cf4e:	4b62      	ldr	r3, [pc, #392]	; (800d0d8 <tcp_slowtmr+0x26c>)
 800cf50:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800cf54:	4965      	ldr	r1, [pc, #404]	; (800d0ec <tcp_slowtmr+0x280>)
 800cf56:	4862      	ldr	r0, [pc, #392]	; (800d0e0 <tcp_slowtmr+0x274>)
 800cf58:	f007 fb14 	bl	8014584 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800cf5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	d106      	bne.n	800cf72 <tcp_slowtmr+0x106>
 800cf64:	4b5c      	ldr	r3, [pc, #368]	; (800d0d8 <tcp_slowtmr+0x26c>)
 800cf66:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800cf6a:	4961      	ldr	r1, [pc, #388]	; (800d0f0 <tcp_slowtmr+0x284>)
 800cf6c:	485c      	ldr	r0, [pc, #368]	; (800d0e0 <tcp_slowtmr+0x274>)
 800cf6e:	f007 fb09 	bl	8014584 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800cf72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf74:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800cf78:	2b0b      	cmp	r3, #11
 800cf7a:	d905      	bls.n	800cf88 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800cf7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cf80:	3301      	adds	r3, #1
 800cf82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cf86:	e0ed      	b.n	800d164 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800cf88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf8a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800cf8e:	3b01      	subs	r3, #1
 800cf90:	4a58      	ldr	r2, [pc, #352]	; (800d0f4 <tcp_slowtmr+0x288>)
 800cf92:	5cd3      	ldrb	r3, [r2, r3]
 800cf94:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800cf96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf98:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800cf9c:	7c7a      	ldrb	r2, [r7, #17]
 800cf9e:	429a      	cmp	r2, r3
 800cfa0:	d907      	bls.n	800cfb2 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800cfa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfa4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800cfa8:	3301      	adds	r3, #1
 800cfaa:	b2da      	uxtb	r2, r3
 800cfac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfae:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800cfb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfb4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800cfb8:	7c7a      	ldrb	r2, [r7, #17]
 800cfba:	429a      	cmp	r2, r3
 800cfbc:	f200 80d2 	bhi.w	800d164 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800cfc0:	2301      	movs	r3, #1
 800cfc2:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800cfc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfc6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d108      	bne.n	800cfe0 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800cfce:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cfd0:	f004 fc26 	bl	8011820 <tcp_zero_window_probe>
 800cfd4:	4603      	mov	r3, r0
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d014      	beq.n	800d004 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800cfda:	2300      	movs	r3, #0
 800cfdc:	623b      	str	r3, [r7, #32]
 800cfde:	e011      	b.n	800d004 <tcp_slowtmr+0x198>
=======
 800ce68:	e29f      	b.n	800d3aa <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800ce6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce6c:	7d1b      	ldrb	r3, [r3, #20]
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	d106      	bne.n	800ce80 <tcp_slowtmr+0x44>
 800ce72:	4b8d      	ldr	r3, [pc, #564]	; (800d0a8 <tcp_slowtmr+0x26c>)
 800ce74:	f240 42be 	movw	r2, #1214	; 0x4be
 800ce78:	498c      	ldr	r1, [pc, #560]	; (800d0ac <tcp_slowtmr+0x270>)
 800ce7a:	488d      	ldr	r0, [pc, #564]	; (800d0b0 <tcp_slowtmr+0x274>)
 800ce7c:	f007 fb6a 	bl	8014554 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800ce80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce82:	7d1b      	ldrb	r3, [r3, #20]
 800ce84:	2b01      	cmp	r3, #1
 800ce86:	d106      	bne.n	800ce96 <tcp_slowtmr+0x5a>
 800ce88:	4b87      	ldr	r3, [pc, #540]	; (800d0a8 <tcp_slowtmr+0x26c>)
 800ce8a:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800ce8e:	4989      	ldr	r1, [pc, #548]	; (800d0b4 <tcp_slowtmr+0x278>)
 800ce90:	4887      	ldr	r0, [pc, #540]	; (800d0b0 <tcp_slowtmr+0x274>)
 800ce92:	f007 fb5f 	bl	8014554 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800ce96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce98:	7d1b      	ldrb	r3, [r3, #20]
 800ce9a:	2b0a      	cmp	r3, #10
 800ce9c:	d106      	bne.n	800ceac <tcp_slowtmr+0x70>
 800ce9e:	4b82      	ldr	r3, [pc, #520]	; (800d0a8 <tcp_slowtmr+0x26c>)
 800cea0:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800cea4:	4984      	ldr	r1, [pc, #528]	; (800d0b8 <tcp_slowtmr+0x27c>)
 800cea6:	4882      	ldr	r0, [pc, #520]	; (800d0b0 <tcp_slowtmr+0x274>)
 800cea8:	f007 fb54 	bl	8014554 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800ceac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ceae:	7f9a      	ldrb	r2, [r3, #30]
 800ceb0:	4b7b      	ldr	r3, [pc, #492]	; (800d0a0 <tcp_slowtmr+0x264>)
 800ceb2:	781b      	ldrb	r3, [r3, #0]
 800ceb4:	429a      	cmp	r2, r3
 800ceb6:	d105      	bne.n	800cec4 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800ceb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ceba:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800cebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cebe:	68db      	ldr	r3, [r3, #12]
 800cec0:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800cec2:	e272      	b.n	800d3aa <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 800cec4:	4b76      	ldr	r3, [pc, #472]	; (800d0a0 <tcp_slowtmr+0x264>)
 800cec6:	781a      	ldrb	r2, [r3, #0]
 800cec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ceca:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800cecc:	2300      	movs	r3, #0
 800cece:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800ced2:	2300      	movs	r3, #0
 800ced4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800ced8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ceda:	7d1b      	ldrb	r3, [r3, #20]
 800cedc:	2b02      	cmp	r3, #2
 800cede:	d10a      	bne.n	800cef6 <tcp_slowtmr+0xba>
 800cee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cee2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800cee6:	2b05      	cmp	r3, #5
 800cee8:	d905      	bls.n	800cef6 <tcp_slowtmr+0xba>
      ++pcb_remove;
 800ceea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ceee:	3301      	adds	r3, #1
 800cef0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cef4:	e11e      	b.n	800d134 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800cef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cef8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800cefc:	2b0b      	cmp	r3, #11
 800cefe:	d905      	bls.n	800cf0c <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800cf00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cf04:	3301      	adds	r3, #1
 800cf06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cf0a:	e113      	b.n	800d134 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800cf0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf0e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	d075      	beq.n	800d002 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800cf16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	d006      	beq.n	800cf2c <tcp_slowtmr+0xf0>
 800cf1e:	4b62      	ldr	r3, [pc, #392]	; (800d0a8 <tcp_slowtmr+0x26c>)
 800cf20:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800cf24:	4965      	ldr	r1, [pc, #404]	; (800d0bc <tcp_slowtmr+0x280>)
 800cf26:	4862      	ldr	r0, [pc, #392]	; (800d0b0 <tcp_slowtmr+0x274>)
 800cf28:	f007 fb14 	bl	8014554 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800cf2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	d106      	bne.n	800cf42 <tcp_slowtmr+0x106>
 800cf34:	4b5c      	ldr	r3, [pc, #368]	; (800d0a8 <tcp_slowtmr+0x26c>)
 800cf36:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800cf3a:	4961      	ldr	r1, [pc, #388]	; (800d0c0 <tcp_slowtmr+0x284>)
 800cf3c:	485c      	ldr	r0, [pc, #368]	; (800d0b0 <tcp_slowtmr+0x274>)
 800cf3e:	f007 fb09 	bl	8014554 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800cf42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf44:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800cf48:	2b0b      	cmp	r3, #11
 800cf4a:	d905      	bls.n	800cf58 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800cf4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cf50:	3301      	adds	r3, #1
 800cf52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cf56:	e0ed      	b.n	800d134 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800cf58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf5a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800cf5e:	3b01      	subs	r3, #1
 800cf60:	4a58      	ldr	r2, [pc, #352]	; (800d0c4 <tcp_slowtmr+0x288>)
 800cf62:	5cd3      	ldrb	r3, [r2, r3]
 800cf64:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800cf66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf68:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800cf6c:	7c7a      	ldrb	r2, [r7, #17]
 800cf6e:	429a      	cmp	r2, r3
 800cf70:	d907      	bls.n	800cf82 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800cf72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf74:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800cf78:	3301      	adds	r3, #1
 800cf7a:	b2da      	uxtb	r2, r3
 800cf7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf7e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800cf82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf84:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800cf88:	7c7a      	ldrb	r2, [r7, #17]
 800cf8a:	429a      	cmp	r2, r3
 800cf8c:	f200 80d2 	bhi.w	800d134 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800cf90:	2301      	movs	r3, #1
 800cf92:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800cf94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf96:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	d108      	bne.n	800cfb0 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800cf9e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cfa0:	f004 fc26 	bl	80117f0 <tcp_zero_window_probe>
 800cfa4:	4603      	mov	r3, r0
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d014      	beq.n	800cfd4 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800cfaa:	2300      	movs	r3, #0
 800cfac:	623b      	str	r3, [r7, #32]
 800cfae:	e011      	b.n	800cfd4 <tcp_slowtmr+0x198>
>>>>>>> Stashed changes
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
<<<<<<< Updated upstream
 800cfe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfe2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800cfe6:	4619      	mov	r1, r3
 800cfe8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cfea:	f003 faeb 	bl	80105c4 <tcp_split_unsent_seg>
 800cfee:	4603      	mov	r3, r0
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	d107      	bne.n	800d004 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800cff4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cff6:	f003 fd6b 	bl	8010ad0 <tcp_output>
 800cffa:	4603      	mov	r3, r0
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d101      	bne.n	800d004 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800d000:	2300      	movs	r3, #0
 800d002:	623b      	str	r3, [r7, #32]
=======
 800cfb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfb2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800cfb6:	4619      	mov	r1, r3
 800cfb8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cfba:	f003 faeb 	bl	8010594 <tcp_split_unsent_seg>
 800cfbe:	4603      	mov	r3, r0
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d107      	bne.n	800cfd4 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800cfc4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cfc6:	f003 fd6b 	bl	8010aa0 <tcp_output>
 800cfca:	4603      	mov	r3, r0
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d101      	bne.n	800cfd4 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800cfd0:	2300      	movs	r3, #0
 800cfd2:	623b      	str	r3, [r7, #32]
>>>>>>> Stashed changes
                }
              }
            }
            if (next_slot) {
<<<<<<< Updated upstream
 800d004:	6a3b      	ldr	r3, [r7, #32]
 800d006:	2b00      	cmp	r3, #0
 800d008:	f000 80ac 	beq.w	800d164 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800d00c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d00e:	2200      	movs	r2, #0
 800d010:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800d014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d016:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800d01a:	2b06      	cmp	r3, #6
 800d01c:	f200 80a2 	bhi.w	800d164 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800d020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d022:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800d026:	3301      	adds	r3, #1
 800d028:	b2da      	uxtb	r2, r3
 800d02a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d02c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800d030:	e098      	b.n	800d164 <tcp_slowtmr+0x2f8>
=======
 800cfd4:	6a3b      	ldr	r3, [r7, #32]
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	f000 80ac 	beq.w	800d134 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800cfdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfde:	2200      	movs	r2, #0
 800cfe0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800cfe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfe6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800cfea:	2b06      	cmp	r3, #6
 800cfec:	f200 80a2 	bhi.w	800d134 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800cff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cff2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800cff6:	3301      	adds	r3, #1
 800cff8:	b2da      	uxtb	r2, r3
 800cffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cffc:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800d000:	e098      	b.n	800d134 <tcp_slowtmr+0x2f8>
>>>>>>> Stashed changes
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
<<<<<<< Updated upstream
 800d032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d034:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800d038:	2b00      	cmp	r3, #0
 800d03a:	db0f      	blt.n	800d05c <tcp_slowtmr+0x1f0>
 800d03c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d03e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800d042:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800d046:	4293      	cmp	r3, r2
 800d048:	d008      	beq.n	800d05c <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800d04a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d04c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800d050:	b29b      	uxth	r3, r3
 800d052:	3301      	adds	r3, #1
 800d054:	b29b      	uxth	r3, r3
 800d056:	b21a      	sxth	r2, r3
 800d058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d05a:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800d05c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d05e:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800d062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d064:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800d068:	429a      	cmp	r2, r3
 800d06a:	db7b      	blt.n	800d164 <tcp_slowtmr+0x2f8>
=======
 800d002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d004:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800d008:	2b00      	cmp	r3, #0
 800d00a:	db0f      	blt.n	800d02c <tcp_slowtmr+0x1f0>
 800d00c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d00e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800d012:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800d016:	4293      	cmp	r3, r2
 800d018:	d008      	beq.n	800d02c <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800d01a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d01c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800d020:	b29b      	uxth	r3, r3
 800d022:	3301      	adds	r3, #1
 800d024:	b29b      	uxth	r3, r3
 800d026:	b21a      	sxth	r2, r3
 800d028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d02a:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800d02c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d02e:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800d032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d034:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800d038:	429a      	cmp	r2, r3
 800d03a:	db7b      	blt.n	800d134 <tcp_slowtmr+0x2f8>
>>>>>>> Stashed changes
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
<<<<<<< Updated upstream
 800d06c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d06e:	f004 f821 	bl	80110b4 <tcp_rexmit_rto_prepare>
 800d072:	4603      	mov	r3, r0
 800d074:	2b00      	cmp	r3, #0
 800d076:	d007      	beq.n	800d088 <tcp_slowtmr+0x21c>
 800d078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d07a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	d171      	bne.n	800d164 <tcp_slowtmr+0x2f8>
 800d080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d082:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d084:	2b00      	cmp	r3, #0
 800d086:	d06d      	beq.n	800d164 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800d088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d08a:	7d1b      	ldrb	r3, [r3, #20]
 800d08c:	2b02      	cmp	r3, #2
 800d08e:	d03a      	beq.n	800d106 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800d090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d092:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d096:	2b0c      	cmp	r3, #12
 800d098:	bf28      	it	cs
 800d09a:	230c      	movcs	r3, #12
 800d09c:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800d09e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0a0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800d0a4:	10db      	asrs	r3, r3, #3
 800d0a6:	b21b      	sxth	r3, r3
 800d0a8:	461a      	mov	r2, r3
 800d0aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0ac:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800d0b0:	4413      	add	r3, r2
 800d0b2:	7efa      	ldrb	r2, [r7, #27]
 800d0b4:	4910      	ldr	r1, [pc, #64]	; (800d0f8 <tcp_slowtmr+0x28c>)
 800d0b6:	5c8a      	ldrb	r2, [r1, r2]
 800d0b8:	4093      	lsls	r3, r2
 800d0ba:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800d0bc:	697b      	ldr	r3, [r7, #20]
 800d0be:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800d0c2:	4293      	cmp	r3, r2
 800d0c4:	dc1a      	bgt.n	800d0fc <tcp_slowtmr+0x290>
 800d0c6:	697b      	ldr	r3, [r7, #20]
 800d0c8:	b21a      	sxth	r2, r3
 800d0ca:	e019      	b.n	800d100 <tcp_slowtmr+0x294>
 800d0cc:	200072a4 	.word	0x200072a4
 800d0d0:	200000e6 	.word	0x200000e6
 800d0d4:	200072a0 	.word	0x200072a0
 800d0d8:	08016428 	.word	0x08016428
 800d0dc:	0801676c 	.word	0x0801676c
 800d0e0:	0801646c 	.word	0x0801646c
 800d0e4:	08016798 	.word	0x08016798
 800d0e8:	080167c4 	.word	0x080167c4
 800d0ec:	080167f4 	.word	0x080167f4
 800d0f0:	08016828 	.word	0x08016828
 800d0f4:	08018410 	.word	0x08018410
 800d0f8:	08018400 	.word	0x08018400
 800d0fc:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800d100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d102:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
=======
 800d03c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d03e:	f004 f821 	bl	8011084 <tcp_rexmit_rto_prepare>
 800d042:	4603      	mov	r3, r0
 800d044:	2b00      	cmp	r3, #0
 800d046:	d007      	beq.n	800d058 <tcp_slowtmr+0x21c>
 800d048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d04a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d171      	bne.n	800d134 <tcp_slowtmr+0x2f8>
 800d050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d052:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d054:	2b00      	cmp	r3, #0
 800d056:	d06d      	beq.n	800d134 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800d058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d05a:	7d1b      	ldrb	r3, [r3, #20]
 800d05c:	2b02      	cmp	r3, #2
 800d05e:	d03a      	beq.n	800d0d6 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800d060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d062:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d066:	2b0c      	cmp	r3, #12
 800d068:	bf28      	it	cs
 800d06a:	230c      	movcs	r3, #12
 800d06c:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800d06e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d070:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800d074:	10db      	asrs	r3, r3, #3
 800d076:	b21b      	sxth	r3, r3
 800d078:	461a      	mov	r2, r3
 800d07a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d07c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800d080:	4413      	add	r3, r2
 800d082:	7efa      	ldrb	r2, [r7, #27]
 800d084:	4910      	ldr	r1, [pc, #64]	; (800d0c8 <tcp_slowtmr+0x28c>)
 800d086:	5c8a      	ldrb	r2, [r1, r2]
 800d088:	4093      	lsls	r3, r2
 800d08a:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800d08c:	697b      	ldr	r3, [r7, #20]
 800d08e:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800d092:	4293      	cmp	r3, r2
 800d094:	dc1a      	bgt.n	800d0cc <tcp_slowtmr+0x290>
 800d096:	697b      	ldr	r3, [r7, #20]
 800d098:	b21a      	sxth	r2, r3
 800d09a:	e019      	b.n	800d0d0 <tcp_slowtmr+0x294>
 800d09c:	200072a4 	.word	0x200072a4
 800d0a0:	200000e6 	.word	0x200000e6
 800d0a4:	200072a0 	.word	0x200072a0
 800d0a8:	0801640c 	.word	0x0801640c
 800d0ac:	08016750 	.word	0x08016750
 800d0b0:	08016450 	.word	0x08016450
 800d0b4:	0801677c 	.word	0x0801677c
 800d0b8:	080167a8 	.word	0x080167a8
 800d0bc:	080167d8 	.word	0x080167d8
 800d0c0:	0801680c 	.word	0x0801680c
 800d0c4:	080183f4 	.word	0x080183f4
 800d0c8:	080183e4 	.word	0x080183e4
 800d0cc:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800d0d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0d2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
>>>>>>> Stashed changes
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
<<<<<<< Updated upstream
 800d106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d108:	2200      	movs	r2, #0
 800d10a:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800d10c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d10e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800d112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d114:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d118:	4293      	cmp	r3, r2
 800d11a:	bf28      	it	cs
 800d11c:	4613      	movcs	r3, r2
 800d11e:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800d120:	8a7b      	ldrh	r3, [r7, #18]
 800d122:	085b      	lsrs	r3, r3, #1
 800d124:	b29a      	uxth	r2, r3
 800d126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d128:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800d12c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d12e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800d132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d134:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d136:	005b      	lsls	r3, r3, #1
 800d138:	b29b      	uxth	r3, r3
 800d13a:	429a      	cmp	r2, r3
 800d13c:	d206      	bcs.n	800d14c <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800d13e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d140:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d142:	005b      	lsls	r3, r3, #1
 800d144:	b29a      	uxth	r2, r3
 800d146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d148:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800d14c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d14e:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800d150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d152:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
=======
 800d0d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0d8:	2200      	movs	r2, #0
 800d0da:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800d0dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0de:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800d0e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0e4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d0e8:	4293      	cmp	r3, r2
 800d0ea:	bf28      	it	cs
 800d0ec:	4613      	movcs	r3, r2
 800d0ee:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800d0f0:	8a7b      	ldrh	r3, [r7, #18]
 800d0f2:	085b      	lsrs	r3, r3, #1
 800d0f4:	b29a      	uxth	r2, r3
 800d0f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0f8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800d0fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0fe:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800d102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d104:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d106:	005b      	lsls	r3, r3, #1
 800d108:	b29b      	uxth	r3, r3
 800d10a:	429a      	cmp	r2, r3
 800d10c:	d206      	bcs.n	800d11c <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800d10e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d110:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d112:	005b      	lsls	r3, r3, #1
 800d114:	b29a      	uxth	r2, r3
 800d116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d118:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800d11c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d11e:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800d120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d122:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
>>>>>>> Stashed changes
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
<<<<<<< Updated upstream
 800d156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d158:	2200      	movs	r2, #0
 800d15a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
=======
 800d126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d128:	2200      	movs	r2, #0
 800d12a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
>>>>>>> Stashed changes

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
<<<<<<< Updated upstream
 800d15e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d160:	f004 f818 	bl	8011194 <tcp_rexmit_rto_commit>
=======
 800d12e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d130:	f004 f818 	bl	8011164 <tcp_rexmit_rto_commit>
>>>>>>> Stashed changes
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
<<<<<<< Updated upstream
 800d164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d166:	7d1b      	ldrb	r3, [r3, #20]
 800d168:	2b06      	cmp	r3, #6
 800d16a:	d111      	bne.n	800d190 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800d16c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d16e:	8b5b      	ldrh	r3, [r3, #26]
 800d170:	f003 0310 	and.w	r3, r3, #16
 800d174:	2b00      	cmp	r3, #0
 800d176:	d00b      	beq.n	800d190 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d178:	4b9d      	ldr	r3, [pc, #628]	; (800d3f0 <tcp_slowtmr+0x584>)
 800d17a:	681a      	ldr	r2, [r3, #0]
 800d17c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d17e:	6a1b      	ldr	r3, [r3, #32]
 800d180:	1ad3      	subs	r3, r2, r3
 800d182:	2b28      	cmp	r3, #40	; 0x28
 800d184:	d904      	bls.n	800d190 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800d186:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d18a:	3301      	adds	r3, #1
 800d18c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
=======
 800d134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d136:	7d1b      	ldrb	r3, [r3, #20]
 800d138:	2b06      	cmp	r3, #6
 800d13a:	d111      	bne.n	800d160 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800d13c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d13e:	8b5b      	ldrh	r3, [r3, #26]
 800d140:	f003 0310 	and.w	r3, r3, #16
 800d144:	2b00      	cmp	r3, #0
 800d146:	d00b      	beq.n	800d160 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d148:	4b9d      	ldr	r3, [pc, #628]	; (800d3c0 <tcp_slowtmr+0x584>)
 800d14a:	681a      	ldr	r2, [r3, #0]
 800d14c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d14e:	6a1b      	ldr	r3, [r3, #32]
 800d150:	1ad3      	subs	r3, r2, r3
 800d152:	2b28      	cmp	r3, #40	; 0x28
 800d154:	d904      	bls.n	800d160 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800d156:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d15a:	3301      	adds	r3, #1
 800d15c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
>>>>>>> Stashed changes
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
<<<<<<< Updated upstream
 800d190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d192:	7a5b      	ldrb	r3, [r3, #9]
 800d194:	f003 0308 	and.w	r3, r3, #8
 800d198:	2b00      	cmp	r3, #0
 800d19a:	d04c      	beq.n	800d236 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800d19c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d19e:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800d1a0:	2b04      	cmp	r3, #4
 800d1a2:	d003      	beq.n	800d1ac <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800d1a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1a6:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800d1a8:	2b07      	cmp	r3, #7
 800d1aa:	d144      	bne.n	800d236 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d1ac:	4b90      	ldr	r3, [pc, #576]	; (800d3f0 <tcp_slowtmr+0x584>)
 800d1ae:	681a      	ldr	r2, [r3, #0]
 800d1b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1b2:	6a1b      	ldr	r3, [r3, #32]
 800d1b4:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800d1b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d1bc:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 800d1c0:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800d1c4:	498b      	ldr	r1, [pc, #556]	; (800d3f4 <tcp_slowtmr+0x588>)
 800d1c6:	fba1 1303 	umull	r1, r3, r1, r3
 800d1ca:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d1cc:	429a      	cmp	r2, r3
 800d1ce:	d90a      	bls.n	800d1e6 <tcp_slowtmr+0x37a>
=======
 800d160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d162:	7a5b      	ldrb	r3, [r3, #9]
 800d164:	f003 0308 	and.w	r3, r3, #8
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d04c      	beq.n	800d206 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800d16c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d16e:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800d170:	2b04      	cmp	r3, #4
 800d172:	d003      	beq.n	800d17c <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800d174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d176:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800d178:	2b07      	cmp	r3, #7
 800d17a:	d144      	bne.n	800d206 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d17c:	4b90      	ldr	r3, [pc, #576]	; (800d3c0 <tcp_slowtmr+0x584>)
 800d17e:	681a      	ldr	r2, [r3, #0]
 800d180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d182:	6a1b      	ldr	r3, [r3, #32]
 800d184:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800d186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d188:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d18c:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 800d190:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800d194:	498b      	ldr	r1, [pc, #556]	; (800d3c4 <tcp_slowtmr+0x588>)
 800d196:	fba1 1303 	umull	r1, r3, r1, r3
 800d19a:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d19c:	429a      	cmp	r2, r3
 800d19e:	d90a      	bls.n	800d1b6 <tcp_slowtmr+0x37a>
>>>>>>> Stashed changes
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
<<<<<<< Updated upstream
 800d1d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d1d4:	3301      	adds	r3, #1
 800d1d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800d1da:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d1de:	3301      	adds	r3, #1
 800d1e0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d1e4:	e027      	b.n	800d236 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d1e6:	4b82      	ldr	r3, [pc, #520]	; (800d3f0 <tcp_slowtmr+0x584>)
 800d1e8:	681a      	ldr	r2, [r3, #0]
 800d1ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1ec:	6a1b      	ldr	r3, [r3, #32]
 800d1ee:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800d1f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1f2:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800d1f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1f8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800d1fc:	4618      	mov	r0, r3
 800d1fe:	4b7e      	ldr	r3, [pc, #504]	; (800d3f8 <tcp_slowtmr+0x58c>)
 800d200:	fb03 f300 	mul.w	r3, r3, r0
 800d204:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800d206:	497b      	ldr	r1, [pc, #492]	; (800d3f4 <tcp_slowtmr+0x588>)
 800d208:	fba1 1303 	umull	r1, r3, r1, r3
 800d20c:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d20e:	429a      	cmp	r2, r3
 800d210:	d911      	bls.n	800d236 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800d212:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d214:	f004 fac4 	bl	80117a0 <tcp_keepalive>
 800d218:	4603      	mov	r3, r0
 800d21a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800d21e:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800d222:	2b00      	cmp	r3, #0
 800d224:	d107      	bne.n	800d236 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800d226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d228:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800d22c:	3301      	adds	r3, #1
 800d22e:	b2da      	uxtb	r2, r3
 800d230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d232:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
=======
 800d1a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d1a4:	3301      	adds	r3, #1
 800d1a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800d1aa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d1ae:	3301      	adds	r3, #1
 800d1b0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d1b4:	e027      	b.n	800d206 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d1b6:	4b82      	ldr	r3, [pc, #520]	; (800d3c0 <tcp_slowtmr+0x584>)
 800d1b8:	681a      	ldr	r2, [r3, #0]
 800d1ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1bc:	6a1b      	ldr	r3, [r3, #32]
 800d1be:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800d1c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1c2:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800d1c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1c8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800d1cc:	4618      	mov	r0, r3
 800d1ce:	4b7e      	ldr	r3, [pc, #504]	; (800d3c8 <tcp_slowtmr+0x58c>)
 800d1d0:	fb03 f300 	mul.w	r3, r3, r0
 800d1d4:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800d1d6:	497b      	ldr	r1, [pc, #492]	; (800d3c4 <tcp_slowtmr+0x588>)
 800d1d8:	fba1 1303 	umull	r1, r3, r1, r3
 800d1dc:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d1de:	429a      	cmp	r2, r3
 800d1e0:	d911      	bls.n	800d206 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800d1e2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d1e4:	f004 fac4 	bl	8011770 <tcp_keepalive>
 800d1e8:	4603      	mov	r3, r0
 800d1ea:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800d1ee:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	d107      	bne.n	800d206 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800d1f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1f8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800d1fc:	3301      	adds	r3, #1
 800d1fe:	b2da      	uxtb	r2, r3
 800d200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d202:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
>>>>>>> Stashed changes

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
<<<<<<< Updated upstream
 800d236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d238:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d23a:	2b00      	cmp	r3, #0
 800d23c:	d011      	beq.n	800d262 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800d23e:	4b6c      	ldr	r3, [pc, #432]	; (800d3f0 <tcp_slowtmr+0x584>)
 800d240:	681a      	ldr	r2, [r3, #0]
 800d242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d244:	6a1b      	ldr	r3, [r3, #32]
 800d246:	1ad2      	subs	r2, r2, r3
 800d248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d24a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800d24e:	4619      	mov	r1, r3
 800d250:	460b      	mov	r3, r1
 800d252:	005b      	lsls	r3, r3, #1
 800d254:	440b      	add	r3, r1
 800d256:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800d258:	429a      	cmp	r2, r3
 800d25a:	d302      	bcc.n	800d262 <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800d25c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d25e:	f000 fddb 	bl	800de18 <tcp_free_ooseq>
=======
 800d206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d208:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	d011      	beq.n	800d232 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800d20e:	4b6c      	ldr	r3, [pc, #432]	; (800d3c0 <tcp_slowtmr+0x584>)
 800d210:	681a      	ldr	r2, [r3, #0]
 800d212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d214:	6a1b      	ldr	r3, [r3, #32]
 800d216:	1ad2      	subs	r2, r2, r3
 800d218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d21a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800d21e:	4619      	mov	r1, r3
 800d220:	460b      	mov	r3, r1
 800d222:	005b      	lsls	r3, r3, #1
 800d224:	440b      	add	r3, r1
 800d226:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800d228:	429a      	cmp	r2, r3
 800d22a:	d302      	bcc.n	800d232 <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800d22c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d22e:	f000 fddb 	bl	800dde8 <tcp_free_ooseq>
>>>>>>> Stashed changes
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
<<<<<<< Updated upstream
 800d262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d264:	7d1b      	ldrb	r3, [r3, #20]
 800d266:	2b03      	cmp	r3, #3
 800d268:	d10b      	bne.n	800d282 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d26a:	4b61      	ldr	r3, [pc, #388]	; (800d3f0 <tcp_slowtmr+0x584>)
 800d26c:	681a      	ldr	r2, [r3, #0]
 800d26e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d270:	6a1b      	ldr	r3, [r3, #32]
 800d272:	1ad3      	subs	r3, r2, r3
 800d274:	2b28      	cmp	r3, #40	; 0x28
 800d276:	d904      	bls.n	800d282 <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800d278:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d27c:	3301      	adds	r3, #1
 800d27e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
=======
 800d232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d234:	7d1b      	ldrb	r3, [r3, #20]
 800d236:	2b03      	cmp	r3, #3
 800d238:	d10b      	bne.n	800d252 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d23a:	4b61      	ldr	r3, [pc, #388]	; (800d3c0 <tcp_slowtmr+0x584>)
 800d23c:	681a      	ldr	r2, [r3, #0]
 800d23e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d240:	6a1b      	ldr	r3, [r3, #32]
 800d242:	1ad3      	subs	r3, r2, r3
 800d244:	2b28      	cmp	r3, #40	; 0x28
 800d246:	d904      	bls.n	800d252 <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800d248:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d24c:	3301      	adds	r3, #1
 800d24e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
>>>>>>> Stashed changes
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
<<<<<<< Updated upstream
 800d282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d284:	7d1b      	ldrb	r3, [r3, #20]
 800d286:	2b09      	cmp	r3, #9
 800d288:	d10b      	bne.n	800d2a2 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800d28a:	4b59      	ldr	r3, [pc, #356]	; (800d3f0 <tcp_slowtmr+0x584>)
 800d28c:	681a      	ldr	r2, [r3, #0]
 800d28e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d290:	6a1b      	ldr	r3, [r3, #32]
 800d292:	1ad3      	subs	r3, r2, r3
 800d294:	2bf0      	cmp	r3, #240	; 0xf0
 800d296:	d904      	bls.n	800d2a2 <tcp_slowtmr+0x436>
        ++pcb_remove;
 800d298:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d29c:	3301      	adds	r3, #1
 800d29e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
=======
 800d252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d254:	7d1b      	ldrb	r3, [r3, #20]
 800d256:	2b09      	cmp	r3, #9
 800d258:	d10b      	bne.n	800d272 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800d25a:	4b59      	ldr	r3, [pc, #356]	; (800d3c0 <tcp_slowtmr+0x584>)
 800d25c:	681a      	ldr	r2, [r3, #0]
 800d25e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d260:	6a1b      	ldr	r3, [r3, #32]
 800d262:	1ad3      	subs	r3, r2, r3
 800d264:	2bf0      	cmp	r3, #240	; 0xf0
 800d266:	d904      	bls.n	800d272 <tcp_slowtmr+0x436>
        ++pcb_remove;
 800d268:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d26c:	3301      	adds	r3, #1
 800d26e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
>>>>>>> Stashed changes
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
<<<<<<< Updated upstream
 800d2a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	d060      	beq.n	800d36c <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800d2aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d2b0:	60fb      	str	r3, [r7, #12]
=======
 800d272:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d276:	2b00      	cmp	r3, #0
 800d278:	d060      	beq.n	800d33c <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800d27a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d27c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d280:	60fb      	str	r3, [r7, #12]
>>>>>>> Stashed changes
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
<<<<<<< Updated upstream
 800d2b2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d2b4:	f000 fbfc 	bl	800dab0 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800d2b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	d010      	beq.n	800d2e0 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800d2be:	4b4f      	ldr	r3, [pc, #316]	; (800d3fc <tcp_slowtmr+0x590>)
 800d2c0:	681b      	ldr	r3, [r3, #0]
 800d2c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d2c4:	429a      	cmp	r2, r3
 800d2c6:	d106      	bne.n	800d2d6 <tcp_slowtmr+0x46a>
 800d2c8:	4b4d      	ldr	r3, [pc, #308]	; (800d400 <tcp_slowtmr+0x594>)
 800d2ca:	f240 526d 	movw	r2, #1389	; 0x56d
 800d2ce:	494d      	ldr	r1, [pc, #308]	; (800d404 <tcp_slowtmr+0x598>)
 800d2d0:	484d      	ldr	r0, [pc, #308]	; (800d408 <tcp_slowtmr+0x59c>)
 800d2d2:	f007 f957 	bl	8014584 <iprintf>
        prev->next = pcb->next;
 800d2d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2d8:	68da      	ldr	r2, [r3, #12]
 800d2da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2dc:	60da      	str	r2, [r3, #12]
 800d2de:	e00f      	b.n	800d300 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800d2e0:	4b46      	ldr	r3, [pc, #280]	; (800d3fc <tcp_slowtmr+0x590>)
 800d2e2:	681b      	ldr	r3, [r3, #0]
 800d2e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d2e6:	429a      	cmp	r2, r3
 800d2e8:	d006      	beq.n	800d2f8 <tcp_slowtmr+0x48c>
 800d2ea:	4b45      	ldr	r3, [pc, #276]	; (800d400 <tcp_slowtmr+0x594>)
 800d2ec:	f240 5271 	movw	r2, #1393	; 0x571
 800d2f0:	4946      	ldr	r1, [pc, #280]	; (800d40c <tcp_slowtmr+0x5a0>)
 800d2f2:	4845      	ldr	r0, [pc, #276]	; (800d408 <tcp_slowtmr+0x59c>)
 800d2f4:	f007 f946 	bl	8014584 <iprintf>
        tcp_active_pcbs = pcb->next;
 800d2f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2fa:	68db      	ldr	r3, [r3, #12]
 800d2fc:	4a3f      	ldr	r2, [pc, #252]	; (800d3fc <tcp_slowtmr+0x590>)
 800d2fe:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800d300:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d304:	2b00      	cmp	r3, #0
 800d306:	d013      	beq.n	800d330 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800d308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d30a:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800d30c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d30e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800d310:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800d312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d314:	3304      	adds	r3, #4
 800d316:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d318:	8ad2      	ldrh	r2, [r2, #22]
 800d31a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d31c:	8b09      	ldrh	r1, [r1, #24]
 800d31e:	9102      	str	r1, [sp, #8]
 800d320:	9201      	str	r2, [sp, #4]
 800d322:	9300      	str	r3, [sp, #0]
 800d324:	462b      	mov	r3, r5
 800d326:	4622      	mov	r2, r4
 800d328:	4601      	mov	r1, r0
 800d32a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d32c:	f004 f984 	bl	8011638 <tcp_rst>
=======
 800d282:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d284:	f000 fbfc 	bl	800da80 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800d288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	d010      	beq.n	800d2b0 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800d28e:	4b4f      	ldr	r3, [pc, #316]	; (800d3cc <tcp_slowtmr+0x590>)
 800d290:	681b      	ldr	r3, [r3, #0]
 800d292:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d294:	429a      	cmp	r2, r3
 800d296:	d106      	bne.n	800d2a6 <tcp_slowtmr+0x46a>
 800d298:	4b4d      	ldr	r3, [pc, #308]	; (800d3d0 <tcp_slowtmr+0x594>)
 800d29a:	f240 526d 	movw	r2, #1389	; 0x56d
 800d29e:	494d      	ldr	r1, [pc, #308]	; (800d3d4 <tcp_slowtmr+0x598>)
 800d2a0:	484d      	ldr	r0, [pc, #308]	; (800d3d8 <tcp_slowtmr+0x59c>)
 800d2a2:	f007 f957 	bl	8014554 <iprintf>
        prev->next = pcb->next;
 800d2a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2a8:	68da      	ldr	r2, [r3, #12]
 800d2aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2ac:	60da      	str	r2, [r3, #12]
 800d2ae:	e00f      	b.n	800d2d0 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800d2b0:	4b46      	ldr	r3, [pc, #280]	; (800d3cc <tcp_slowtmr+0x590>)
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d2b6:	429a      	cmp	r2, r3
 800d2b8:	d006      	beq.n	800d2c8 <tcp_slowtmr+0x48c>
 800d2ba:	4b45      	ldr	r3, [pc, #276]	; (800d3d0 <tcp_slowtmr+0x594>)
 800d2bc:	f240 5271 	movw	r2, #1393	; 0x571
 800d2c0:	4946      	ldr	r1, [pc, #280]	; (800d3dc <tcp_slowtmr+0x5a0>)
 800d2c2:	4845      	ldr	r0, [pc, #276]	; (800d3d8 <tcp_slowtmr+0x59c>)
 800d2c4:	f007 f946 	bl	8014554 <iprintf>
        tcp_active_pcbs = pcb->next;
 800d2c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2ca:	68db      	ldr	r3, [r3, #12]
 800d2cc:	4a3f      	ldr	r2, [pc, #252]	; (800d3cc <tcp_slowtmr+0x590>)
 800d2ce:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800d2d0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	d013      	beq.n	800d300 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800d2d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2da:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800d2dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2de:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800d2e0:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800d2e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2e4:	3304      	adds	r3, #4
 800d2e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d2e8:	8ad2      	ldrh	r2, [r2, #22]
 800d2ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d2ec:	8b09      	ldrh	r1, [r1, #24]
 800d2ee:	9102      	str	r1, [sp, #8]
 800d2f0:	9201      	str	r2, [sp, #4]
 800d2f2:	9300      	str	r3, [sp, #0]
 800d2f4:	462b      	mov	r3, r5
 800d2f6:	4622      	mov	r2, r4
 800d2f8:	4601      	mov	r1, r0
 800d2fa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d2fc:	f004 f984 	bl	8011608 <tcp_rst>
>>>>>>> Stashed changes
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
<<<<<<< Updated upstream
 800d330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d332:	691b      	ldr	r3, [r3, #16]
 800d334:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800d336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d338:	7d1b      	ldrb	r3, [r3, #20]
 800d33a:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800d33c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d33e:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800d340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d342:	68db      	ldr	r3, [r3, #12]
 800d344:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800d346:	6838      	ldr	r0, [r7, #0]
 800d348:	f7ff f9f2 	bl	800c730 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800d34c:	4b30      	ldr	r3, [pc, #192]	; (800d410 <tcp_slowtmr+0x5a4>)
 800d34e:	2200      	movs	r2, #0
 800d350:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800d352:	68fb      	ldr	r3, [r7, #12]
 800d354:	2b00      	cmp	r3, #0
 800d356:	d004      	beq.n	800d362 <tcp_slowtmr+0x4f6>
 800d358:	68fb      	ldr	r3, [r7, #12]
 800d35a:	f06f 010c 	mvn.w	r1, #12
 800d35e:	68b8      	ldr	r0, [r7, #8]
 800d360:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800d362:	4b2b      	ldr	r3, [pc, #172]	; (800d410 <tcp_slowtmr+0x5a4>)
 800d364:	781b      	ldrb	r3, [r3, #0]
 800d366:	2b00      	cmp	r3, #0
 800d368:	d037      	beq.n	800d3da <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800d36a:	e590      	b.n	800ce8e <tcp_slowtmr+0x22>
=======
 800d300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d302:	691b      	ldr	r3, [r3, #16]
 800d304:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800d306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d308:	7d1b      	ldrb	r3, [r3, #20]
 800d30a:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800d30c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d30e:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800d310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d312:	68db      	ldr	r3, [r3, #12]
 800d314:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800d316:	6838      	ldr	r0, [r7, #0]
 800d318:	f7ff f9f2 	bl	800c700 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800d31c:	4b30      	ldr	r3, [pc, #192]	; (800d3e0 <tcp_slowtmr+0x5a4>)
 800d31e:	2200      	movs	r2, #0
 800d320:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800d322:	68fb      	ldr	r3, [r7, #12]
 800d324:	2b00      	cmp	r3, #0
 800d326:	d004      	beq.n	800d332 <tcp_slowtmr+0x4f6>
 800d328:	68fb      	ldr	r3, [r7, #12]
 800d32a:	f06f 010c 	mvn.w	r1, #12
 800d32e:	68b8      	ldr	r0, [r7, #8]
 800d330:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800d332:	4b2b      	ldr	r3, [pc, #172]	; (800d3e0 <tcp_slowtmr+0x5a4>)
 800d334:	781b      	ldrb	r3, [r3, #0]
 800d336:	2b00      	cmp	r3, #0
 800d338:	d037      	beq.n	800d3aa <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800d33a:	e590      	b.n	800ce5e <tcp_slowtmr+0x22>
>>>>>>> Stashed changes
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
<<<<<<< Updated upstream
 800d36c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d36e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800d370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d372:	68db      	ldr	r3, [r3, #12]
 800d374:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800d376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d378:	7f1b      	ldrb	r3, [r3, #28]
 800d37a:	3301      	adds	r3, #1
 800d37c:	b2da      	uxtb	r2, r3
 800d37e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d380:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800d382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d384:	7f1a      	ldrb	r2, [r3, #28]
 800d386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d388:	7f5b      	ldrb	r3, [r3, #29]
 800d38a:	429a      	cmp	r2, r3
 800d38c:	d325      	bcc.n	800d3da <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800d38e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d390:	2200      	movs	r2, #0
 800d392:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800d394:	4b1e      	ldr	r3, [pc, #120]	; (800d410 <tcp_slowtmr+0x5a4>)
 800d396:	2200      	movs	r2, #0
 800d398:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800d39a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d39c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	d00b      	beq.n	800d3bc <tcp_slowtmr+0x550>
 800d3a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d3aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d3ac:	6912      	ldr	r2, [r2, #16]
 800d3ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d3b0:	4610      	mov	r0, r2
 800d3b2:	4798      	blx	r3
 800d3b4:	4603      	mov	r3, r0
 800d3b6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800d3ba:	e002      	b.n	800d3c2 <tcp_slowtmr+0x556>
 800d3bc:	2300      	movs	r3, #0
 800d3be:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800d3c2:	4b13      	ldr	r3, [pc, #76]	; (800d410 <tcp_slowtmr+0x5a4>)
 800d3c4:	781b      	ldrb	r3, [r3, #0]
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	d000      	beq.n	800d3cc <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 800d3ca:	e560      	b.n	800ce8e <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800d3cc:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	d102      	bne.n	800d3da <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800d3d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d3d6:	f003 fb7b 	bl	8010ad0 <tcp_output>
  while (pcb != NULL) {
 800d3da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	f47f ad5c 	bne.w	800ce9a <tcp_slowtmr+0x2e>
=======
 800d33c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d33e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800d340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d342:	68db      	ldr	r3, [r3, #12]
 800d344:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800d346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d348:	7f1b      	ldrb	r3, [r3, #28]
 800d34a:	3301      	adds	r3, #1
 800d34c:	b2da      	uxtb	r2, r3
 800d34e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d350:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800d352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d354:	7f1a      	ldrb	r2, [r3, #28]
 800d356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d358:	7f5b      	ldrb	r3, [r3, #29]
 800d35a:	429a      	cmp	r2, r3
 800d35c:	d325      	bcc.n	800d3aa <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800d35e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d360:	2200      	movs	r2, #0
 800d362:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800d364:	4b1e      	ldr	r3, [pc, #120]	; (800d3e0 <tcp_slowtmr+0x5a4>)
 800d366:	2200      	movs	r2, #0
 800d368:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800d36a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d36c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d370:	2b00      	cmp	r3, #0
 800d372:	d00b      	beq.n	800d38c <tcp_slowtmr+0x550>
 800d374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d376:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d37a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d37c:	6912      	ldr	r2, [r2, #16]
 800d37e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d380:	4610      	mov	r0, r2
 800d382:	4798      	blx	r3
 800d384:	4603      	mov	r3, r0
 800d386:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800d38a:	e002      	b.n	800d392 <tcp_slowtmr+0x556>
 800d38c:	2300      	movs	r3, #0
 800d38e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800d392:	4b13      	ldr	r3, [pc, #76]	; (800d3e0 <tcp_slowtmr+0x5a4>)
 800d394:	781b      	ldrb	r3, [r3, #0]
 800d396:	2b00      	cmp	r3, #0
 800d398:	d000      	beq.n	800d39c <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 800d39a:	e560      	b.n	800ce5e <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800d39c:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	d102      	bne.n	800d3aa <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800d3a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d3a6:	f003 fb7b 	bl	8010aa0 <tcp_output>
  while (pcb != NULL) {
 800d3aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	f47f ad5c 	bne.w	800ce6a <tcp_slowtmr+0x2e>
>>>>>>> Stashed changes
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
<<<<<<< Updated upstream
 800d3e2:	2300      	movs	r3, #0
 800d3e4:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800d3e6:	4b0b      	ldr	r3, [pc, #44]	; (800d414 <tcp_slowtmr+0x5a8>)
 800d3e8:	681b      	ldr	r3, [r3, #0]
 800d3ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800d3ec:	e067      	b.n	800d4be <tcp_slowtmr+0x652>
 800d3ee:	bf00      	nop
 800d3f0:	200072a4 	.word	0x200072a4
 800d3f4:	10624dd3 	.word	0x10624dd3
 800d3f8:	000124f8 	.word	0x000124f8
 800d3fc:	200072a0 	.word	0x200072a0
 800d400:	08016428 	.word	0x08016428
 800d404:	08016860 	.word	0x08016860
 800d408:	0801646c 	.word	0x0801646c
 800d40c:	0801688c 	.word	0x0801688c
 800d410:	2000729c 	.word	0x2000729c
 800d414:	200072b0 	.word	0x200072b0
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800d418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d41a:	7d1b      	ldrb	r3, [r3, #20]
 800d41c:	2b0a      	cmp	r3, #10
 800d41e:	d006      	beq.n	800d42e <tcp_slowtmr+0x5c2>
 800d420:	4b2b      	ldr	r3, [pc, #172]	; (800d4d0 <tcp_slowtmr+0x664>)
 800d422:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800d426:	492b      	ldr	r1, [pc, #172]	; (800d4d4 <tcp_slowtmr+0x668>)
 800d428:	482b      	ldr	r0, [pc, #172]	; (800d4d8 <tcp_slowtmr+0x66c>)
 800d42a:	f007 f8ab 	bl	8014584 <iprintf>
    pcb_remove = 0;
 800d42e:	2300      	movs	r3, #0
 800d430:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800d434:	4b29      	ldr	r3, [pc, #164]	; (800d4dc <tcp_slowtmr+0x670>)
 800d436:	681a      	ldr	r2, [r3, #0]
 800d438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d43a:	6a1b      	ldr	r3, [r3, #32]
 800d43c:	1ad3      	subs	r3, r2, r3
 800d43e:	2bf0      	cmp	r3, #240	; 0xf0
 800d440:	d904      	bls.n	800d44c <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800d442:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d446:	3301      	adds	r3, #1
 800d448:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
=======
 800d3b2:	2300      	movs	r3, #0
 800d3b4:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800d3b6:	4b0b      	ldr	r3, [pc, #44]	; (800d3e4 <tcp_slowtmr+0x5a8>)
 800d3b8:	681b      	ldr	r3, [r3, #0]
 800d3ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800d3bc:	e067      	b.n	800d48e <tcp_slowtmr+0x652>
 800d3be:	bf00      	nop
 800d3c0:	200072a4 	.word	0x200072a4
 800d3c4:	10624dd3 	.word	0x10624dd3
 800d3c8:	000124f8 	.word	0x000124f8
 800d3cc:	200072a0 	.word	0x200072a0
 800d3d0:	0801640c 	.word	0x0801640c
 800d3d4:	08016844 	.word	0x08016844
 800d3d8:	08016450 	.word	0x08016450
 800d3dc:	08016870 	.word	0x08016870
 800d3e0:	2000729c 	.word	0x2000729c
 800d3e4:	200072b0 	.word	0x200072b0
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800d3e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3ea:	7d1b      	ldrb	r3, [r3, #20]
 800d3ec:	2b0a      	cmp	r3, #10
 800d3ee:	d006      	beq.n	800d3fe <tcp_slowtmr+0x5c2>
 800d3f0:	4b2b      	ldr	r3, [pc, #172]	; (800d4a0 <tcp_slowtmr+0x664>)
 800d3f2:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800d3f6:	492b      	ldr	r1, [pc, #172]	; (800d4a4 <tcp_slowtmr+0x668>)
 800d3f8:	482b      	ldr	r0, [pc, #172]	; (800d4a8 <tcp_slowtmr+0x66c>)
 800d3fa:	f007 f8ab 	bl	8014554 <iprintf>
    pcb_remove = 0;
 800d3fe:	2300      	movs	r3, #0
 800d400:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800d404:	4b29      	ldr	r3, [pc, #164]	; (800d4ac <tcp_slowtmr+0x670>)
 800d406:	681a      	ldr	r2, [r3, #0]
 800d408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d40a:	6a1b      	ldr	r3, [r3, #32]
 800d40c:	1ad3      	subs	r3, r2, r3
 800d40e:	2bf0      	cmp	r3, #240	; 0xf0
 800d410:	d904      	bls.n	800d41c <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800d412:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d416:	3301      	adds	r3, #1
 800d418:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
>>>>>>> Stashed changes
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
<<<<<<< Updated upstream
 800d44c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d450:	2b00      	cmp	r3, #0
 800d452:	d02f      	beq.n	800d4b4 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800d454:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d456:	f000 fb2b 	bl	800dab0 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800d45a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	d010      	beq.n	800d482 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800d460:	4b1f      	ldr	r3, [pc, #124]	; (800d4e0 <tcp_slowtmr+0x674>)
 800d462:	681b      	ldr	r3, [r3, #0]
 800d464:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d466:	429a      	cmp	r2, r3
 800d468:	d106      	bne.n	800d478 <tcp_slowtmr+0x60c>
 800d46a:	4b19      	ldr	r3, [pc, #100]	; (800d4d0 <tcp_slowtmr+0x664>)
 800d46c:	f240 52af 	movw	r2, #1455	; 0x5af
 800d470:	491c      	ldr	r1, [pc, #112]	; (800d4e4 <tcp_slowtmr+0x678>)
 800d472:	4819      	ldr	r0, [pc, #100]	; (800d4d8 <tcp_slowtmr+0x66c>)
 800d474:	f007 f886 	bl	8014584 <iprintf>
        prev->next = pcb->next;
 800d478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d47a:	68da      	ldr	r2, [r3, #12]
 800d47c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d47e:	60da      	str	r2, [r3, #12]
 800d480:	e00f      	b.n	800d4a2 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800d482:	4b17      	ldr	r3, [pc, #92]	; (800d4e0 <tcp_slowtmr+0x674>)
 800d484:	681b      	ldr	r3, [r3, #0]
 800d486:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d488:	429a      	cmp	r2, r3
 800d48a:	d006      	beq.n	800d49a <tcp_slowtmr+0x62e>
 800d48c:	4b10      	ldr	r3, [pc, #64]	; (800d4d0 <tcp_slowtmr+0x664>)
 800d48e:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800d492:	4915      	ldr	r1, [pc, #84]	; (800d4e8 <tcp_slowtmr+0x67c>)
 800d494:	4810      	ldr	r0, [pc, #64]	; (800d4d8 <tcp_slowtmr+0x66c>)
 800d496:	f007 f875 	bl	8014584 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800d49a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d49c:	68db      	ldr	r3, [r3, #12]
 800d49e:	4a10      	ldr	r2, [pc, #64]	; (800d4e0 <tcp_slowtmr+0x674>)
 800d4a0:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800d4a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4a4:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800d4a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4a8:	68db      	ldr	r3, [r3, #12]
 800d4aa:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800d4ac:	69f8      	ldr	r0, [r7, #28]
 800d4ae:	f7ff f93f 	bl	800c730 <tcp_free>
 800d4b2:	e004      	b.n	800d4be <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800d4b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4b6:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800d4b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4ba:	68db      	ldr	r3, [r3, #12]
 800d4bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800d4be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	d1a9      	bne.n	800d418 <tcp_slowtmr+0x5ac>
    }
  }
}
 800d4c4:	bf00      	nop
 800d4c6:	bf00      	nop
 800d4c8:	3730      	adds	r7, #48	; 0x30
 800d4ca:	46bd      	mov	sp, r7
 800d4cc:	bdb0      	pop	{r4, r5, r7, pc}
 800d4ce:	bf00      	nop
 800d4d0:	08016428 	.word	0x08016428
 800d4d4:	080168b8 	.word	0x080168b8
 800d4d8:	0801646c 	.word	0x0801646c
 800d4dc:	200072a4 	.word	0x200072a4
 800d4e0:	200072b0 	.word	0x200072b0
 800d4e4:	080168e8 	.word	0x080168e8
 800d4e8:	08016910 	.word	0x08016910

0800d4ec <tcp_fasttmr>:
=======
 800d41c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d420:	2b00      	cmp	r3, #0
 800d422:	d02f      	beq.n	800d484 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800d424:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d426:	f000 fb2b 	bl	800da80 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800d42a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	d010      	beq.n	800d452 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800d430:	4b1f      	ldr	r3, [pc, #124]	; (800d4b0 <tcp_slowtmr+0x674>)
 800d432:	681b      	ldr	r3, [r3, #0]
 800d434:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d436:	429a      	cmp	r2, r3
 800d438:	d106      	bne.n	800d448 <tcp_slowtmr+0x60c>
 800d43a:	4b19      	ldr	r3, [pc, #100]	; (800d4a0 <tcp_slowtmr+0x664>)
 800d43c:	f240 52af 	movw	r2, #1455	; 0x5af
 800d440:	491c      	ldr	r1, [pc, #112]	; (800d4b4 <tcp_slowtmr+0x678>)
 800d442:	4819      	ldr	r0, [pc, #100]	; (800d4a8 <tcp_slowtmr+0x66c>)
 800d444:	f007 f886 	bl	8014554 <iprintf>
        prev->next = pcb->next;
 800d448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d44a:	68da      	ldr	r2, [r3, #12]
 800d44c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d44e:	60da      	str	r2, [r3, #12]
 800d450:	e00f      	b.n	800d472 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800d452:	4b17      	ldr	r3, [pc, #92]	; (800d4b0 <tcp_slowtmr+0x674>)
 800d454:	681b      	ldr	r3, [r3, #0]
 800d456:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d458:	429a      	cmp	r2, r3
 800d45a:	d006      	beq.n	800d46a <tcp_slowtmr+0x62e>
 800d45c:	4b10      	ldr	r3, [pc, #64]	; (800d4a0 <tcp_slowtmr+0x664>)
 800d45e:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800d462:	4915      	ldr	r1, [pc, #84]	; (800d4b8 <tcp_slowtmr+0x67c>)
 800d464:	4810      	ldr	r0, [pc, #64]	; (800d4a8 <tcp_slowtmr+0x66c>)
 800d466:	f007 f875 	bl	8014554 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800d46a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d46c:	68db      	ldr	r3, [r3, #12]
 800d46e:	4a10      	ldr	r2, [pc, #64]	; (800d4b0 <tcp_slowtmr+0x674>)
 800d470:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800d472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d474:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800d476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d478:	68db      	ldr	r3, [r3, #12]
 800d47a:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800d47c:	69f8      	ldr	r0, [r7, #28]
 800d47e:	f7ff f93f 	bl	800c700 <tcp_free>
 800d482:	e004      	b.n	800d48e <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800d484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d486:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800d488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d48a:	68db      	ldr	r3, [r3, #12]
 800d48c:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800d48e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d490:	2b00      	cmp	r3, #0
 800d492:	d1a9      	bne.n	800d3e8 <tcp_slowtmr+0x5ac>
    }
  }
}
 800d494:	bf00      	nop
 800d496:	bf00      	nop
 800d498:	3730      	adds	r7, #48	; 0x30
 800d49a:	46bd      	mov	sp, r7
 800d49c:	bdb0      	pop	{r4, r5, r7, pc}
 800d49e:	bf00      	nop
 800d4a0:	0801640c 	.word	0x0801640c
 800d4a4:	0801689c 	.word	0x0801689c
 800d4a8:	08016450 	.word	0x08016450
 800d4ac:	200072a4 	.word	0x200072a4
 800d4b0:	200072b0 	.word	0x200072b0
 800d4b4:	080168cc 	.word	0x080168cc
 800d4b8:	080168f4 	.word	0x080168f4

0800d4bc <tcp_fasttmr>:
>>>>>>> Stashed changes
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
<<<<<<< Updated upstream
 800d4ec:	b580      	push	{r7, lr}
 800d4ee:	b082      	sub	sp, #8
 800d4f0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800d4f2:	4b2d      	ldr	r3, [pc, #180]	; (800d5a8 <tcp_fasttmr+0xbc>)
 800d4f4:	781b      	ldrb	r3, [r3, #0]
 800d4f6:	3301      	adds	r3, #1
 800d4f8:	b2da      	uxtb	r2, r3
 800d4fa:	4b2b      	ldr	r3, [pc, #172]	; (800d5a8 <tcp_fasttmr+0xbc>)
 800d4fc:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800d4fe:	4b2b      	ldr	r3, [pc, #172]	; (800d5ac <tcp_fasttmr+0xc0>)
 800d500:	681b      	ldr	r3, [r3, #0]
 800d502:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800d504:	e048      	b.n	800d598 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	7f9a      	ldrb	r2, [r3, #30]
 800d50a:	4b27      	ldr	r3, [pc, #156]	; (800d5a8 <tcp_fasttmr+0xbc>)
 800d50c:	781b      	ldrb	r3, [r3, #0]
 800d50e:	429a      	cmp	r2, r3
 800d510:	d03f      	beq.n	800d592 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800d512:	4b25      	ldr	r3, [pc, #148]	; (800d5a8 <tcp_fasttmr+0xbc>)
 800d514:	781a      	ldrb	r2, [r3, #0]
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	8b5b      	ldrh	r3, [r3, #26]
 800d51e:	f003 0301 	and.w	r3, r3, #1
 800d522:	2b00      	cmp	r3, #0
 800d524:	d010      	beq.n	800d548 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	8b5b      	ldrh	r3, [r3, #26]
 800d52a:	f043 0302 	orr.w	r3, r3, #2
 800d52e:	b29a      	uxth	r2, r3
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800d534:	6878      	ldr	r0, [r7, #4]
 800d536:	f003 facb 	bl	8010ad0 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	8b5b      	ldrh	r3, [r3, #26]
 800d53e:	f023 0303 	bic.w	r3, r3, #3
 800d542:	b29a      	uxth	r2, r3
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	8b5b      	ldrh	r3, [r3, #26]
 800d54c:	f003 0308 	and.w	r3, r3, #8
 800d550:	2b00      	cmp	r3, #0
 800d552:	d009      	beq.n	800d568 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	8b5b      	ldrh	r3, [r3, #26]
 800d558:	f023 0308 	bic.w	r3, r3, #8
 800d55c:	b29a      	uxth	r2, r3
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800d562:	6878      	ldr	r0, [r7, #4]
 800d564:	f7ff fa78 	bl	800ca58 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	68db      	ldr	r3, [r3, #12]
 800d56c:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d572:	2b00      	cmp	r3, #0
 800d574:	d00a      	beq.n	800d58c <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800d576:	4b0e      	ldr	r3, [pc, #56]	; (800d5b0 <tcp_fasttmr+0xc4>)
 800d578:	2200      	movs	r2, #0
 800d57a:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800d57c:	6878      	ldr	r0, [r7, #4]
 800d57e:	f000 f819 	bl	800d5b4 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800d582:	4b0b      	ldr	r3, [pc, #44]	; (800d5b0 <tcp_fasttmr+0xc4>)
 800d584:	781b      	ldrb	r3, [r3, #0]
 800d586:	2b00      	cmp	r3, #0
 800d588:	d000      	beq.n	800d58c <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800d58a:	e7b8      	b.n	800d4fe <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800d58c:	683b      	ldr	r3, [r7, #0]
 800d58e:	607b      	str	r3, [r7, #4]
 800d590:	e002      	b.n	800d598 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	68db      	ldr	r3, [r3, #12]
 800d596:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	d1b3      	bne.n	800d506 <tcp_fasttmr+0x1a>
    }
  }
}
 800d59e:	bf00      	nop
 800d5a0:	bf00      	nop
 800d5a2:	3708      	adds	r7, #8
 800d5a4:	46bd      	mov	sp, r7
 800d5a6:	bd80      	pop	{r7, pc}
 800d5a8:	200000e6 	.word	0x200000e6
 800d5ac:	200072a0 	.word	0x200072a0
 800d5b0:	2000729c 	.word	0x2000729c

0800d5b4 <tcp_process_refused_data>:
=======
 800d4bc:	b580      	push	{r7, lr}
 800d4be:	b082      	sub	sp, #8
 800d4c0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800d4c2:	4b2d      	ldr	r3, [pc, #180]	; (800d578 <tcp_fasttmr+0xbc>)
 800d4c4:	781b      	ldrb	r3, [r3, #0]
 800d4c6:	3301      	adds	r3, #1
 800d4c8:	b2da      	uxtb	r2, r3
 800d4ca:	4b2b      	ldr	r3, [pc, #172]	; (800d578 <tcp_fasttmr+0xbc>)
 800d4cc:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800d4ce:	4b2b      	ldr	r3, [pc, #172]	; (800d57c <tcp_fasttmr+0xc0>)
 800d4d0:	681b      	ldr	r3, [r3, #0]
 800d4d2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800d4d4:	e048      	b.n	800d568 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	7f9a      	ldrb	r2, [r3, #30]
 800d4da:	4b27      	ldr	r3, [pc, #156]	; (800d578 <tcp_fasttmr+0xbc>)
 800d4dc:	781b      	ldrb	r3, [r3, #0]
 800d4de:	429a      	cmp	r2, r3
 800d4e0:	d03f      	beq.n	800d562 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800d4e2:	4b25      	ldr	r3, [pc, #148]	; (800d578 <tcp_fasttmr+0xbc>)
 800d4e4:	781a      	ldrb	r2, [r3, #0]
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	8b5b      	ldrh	r3, [r3, #26]
 800d4ee:	f003 0301 	and.w	r3, r3, #1
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	d010      	beq.n	800d518 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	8b5b      	ldrh	r3, [r3, #26]
 800d4fa:	f043 0302 	orr.w	r3, r3, #2
 800d4fe:	b29a      	uxth	r2, r3
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800d504:	6878      	ldr	r0, [r7, #4]
 800d506:	f003 facb 	bl	8010aa0 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	8b5b      	ldrh	r3, [r3, #26]
 800d50e:	f023 0303 	bic.w	r3, r3, #3
 800d512:	b29a      	uxth	r2, r3
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	8b5b      	ldrh	r3, [r3, #26]
 800d51c:	f003 0308 	and.w	r3, r3, #8
 800d520:	2b00      	cmp	r3, #0
 800d522:	d009      	beq.n	800d538 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	8b5b      	ldrh	r3, [r3, #26]
 800d528:	f023 0308 	bic.w	r3, r3, #8
 800d52c:	b29a      	uxth	r2, r3
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800d532:	6878      	ldr	r0, [r7, #4]
 800d534:	f7ff fa78 	bl	800ca28 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	68db      	ldr	r3, [r3, #12]
 800d53c:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d542:	2b00      	cmp	r3, #0
 800d544:	d00a      	beq.n	800d55c <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800d546:	4b0e      	ldr	r3, [pc, #56]	; (800d580 <tcp_fasttmr+0xc4>)
 800d548:	2200      	movs	r2, #0
 800d54a:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800d54c:	6878      	ldr	r0, [r7, #4]
 800d54e:	f000 f819 	bl	800d584 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800d552:	4b0b      	ldr	r3, [pc, #44]	; (800d580 <tcp_fasttmr+0xc4>)
 800d554:	781b      	ldrb	r3, [r3, #0]
 800d556:	2b00      	cmp	r3, #0
 800d558:	d000      	beq.n	800d55c <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800d55a:	e7b8      	b.n	800d4ce <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800d55c:	683b      	ldr	r3, [r7, #0]
 800d55e:	607b      	str	r3, [r7, #4]
 800d560:	e002      	b.n	800d568 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	68db      	ldr	r3, [r3, #12]
 800d566:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	d1b3      	bne.n	800d4d6 <tcp_fasttmr+0x1a>
    }
  }
}
 800d56e:	bf00      	nop
 800d570:	bf00      	nop
 800d572:	3708      	adds	r7, #8
 800d574:	46bd      	mov	sp, r7
 800d576:	bd80      	pop	{r7, pc}
 800d578:	200000e6 	.word	0x200000e6
 800d57c:	200072a0 	.word	0x200072a0
 800d580:	2000729c 	.word	0x2000729c

0800d584 <tcp_process_refused_data>:
>>>>>>> Stashed changes
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
<<<<<<< Updated upstream
 800d5b4:	b590      	push	{r4, r7, lr}
 800d5b6:	b085      	sub	sp, #20
 800d5b8:	af00      	add	r7, sp, #0
 800d5ba:	6078      	str	r0, [r7, #4]
=======
 800d584:	b590      	push	{r4, r7, lr}
 800d586:	b085      	sub	sp, #20
 800d588:	af00      	add	r7, sp, #0
 800d58a:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
<<<<<<< Updated upstream
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d109      	bne.n	800d5d6 <tcp_process_refused_data+0x22>
 800d5c2:	4b37      	ldr	r3, [pc, #220]	; (800d6a0 <tcp_process_refused_data+0xec>)
 800d5c4:	f240 6209 	movw	r2, #1545	; 0x609
 800d5c8:	4936      	ldr	r1, [pc, #216]	; (800d6a4 <tcp_process_refused_data+0xf0>)
 800d5ca:	4837      	ldr	r0, [pc, #220]	; (800d6a8 <tcp_process_refused_data+0xf4>)
 800d5cc:	f006 ffda 	bl	8014584 <iprintf>
 800d5d0:	f06f 030f 	mvn.w	r3, #15
 800d5d4:	e060      	b.n	800d698 <tcp_process_refused_data+0xe4>
=======
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	2b00      	cmp	r3, #0
 800d590:	d109      	bne.n	800d5a6 <tcp_process_refused_data+0x22>
 800d592:	4b37      	ldr	r3, [pc, #220]	; (800d670 <tcp_process_refused_data+0xec>)
 800d594:	f240 6209 	movw	r2, #1545	; 0x609
 800d598:	4936      	ldr	r1, [pc, #216]	; (800d674 <tcp_process_refused_data+0xf0>)
 800d59a:	4837      	ldr	r0, [pc, #220]	; (800d678 <tcp_process_refused_data+0xf4>)
 800d59c:	f006 ffda 	bl	8014554 <iprintf>
 800d5a0:	f06f 030f 	mvn.w	r3, #15
 800d5a4:	e060      	b.n	800d668 <tcp_process_refused_data+0xe4>
>>>>>>> Stashed changes
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
<<<<<<< Updated upstream
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d5da:	7b5b      	ldrb	r3, [r3, #13]
 800d5dc:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d5e2:	60bb      	str	r3, [r7, #8]
=======
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d5aa:	7b5b      	ldrb	r3, [r3, #13]
 800d5ac:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d5b2:	60bb      	str	r3, [r7, #8]
>>>>>>> Stashed changes
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
<<<<<<< Updated upstream
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	2200      	movs	r2, #0
 800d5e8:	679a      	str	r2, [r3, #120]	; 0x78
=======
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	2200      	movs	r2, #0
 800d5b8:	679a      	str	r2, [r3, #120]	; 0x78
>>>>>>> Stashed changes
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
<<<<<<< Updated upstream
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	d00b      	beq.n	800d60c <tcp_process_refused_data+0x58>
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	6918      	ldr	r0, [r3, #16]
 800d5fe:	2300      	movs	r3, #0
 800d600:	68ba      	ldr	r2, [r7, #8]
 800d602:	6879      	ldr	r1, [r7, #4]
 800d604:	47a0      	blx	r4
 800d606:	4603      	mov	r3, r0
 800d608:	73fb      	strb	r3, [r7, #15]
 800d60a:	e007      	b.n	800d61c <tcp_process_refused_data+0x68>
 800d60c:	2300      	movs	r3, #0
 800d60e:	68ba      	ldr	r2, [r7, #8]
 800d610:	6879      	ldr	r1, [r7, #4]
 800d612:	2000      	movs	r0, #0
 800d614:	f000 f8a4 	bl	800d760 <tcp_recv_null>
 800d618:	4603      	mov	r3, r0
 800d61a:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800d61c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d620:	2b00      	cmp	r3, #0
 800d622:	d12a      	bne.n	800d67a <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800d624:	7bbb      	ldrb	r3, [r7, #14]
 800d626:	f003 0320 	and.w	r3, r3, #32
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	d033      	beq.n	800d696 <tcp_process_refused_data+0xe2>
=======
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	d00b      	beq.n	800d5dc <tcp_process_refused_data+0x58>
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	6918      	ldr	r0, [r3, #16]
 800d5ce:	2300      	movs	r3, #0
 800d5d0:	68ba      	ldr	r2, [r7, #8]
 800d5d2:	6879      	ldr	r1, [r7, #4]
 800d5d4:	47a0      	blx	r4
 800d5d6:	4603      	mov	r3, r0
 800d5d8:	73fb      	strb	r3, [r7, #15]
 800d5da:	e007      	b.n	800d5ec <tcp_process_refused_data+0x68>
 800d5dc:	2300      	movs	r3, #0
 800d5de:	68ba      	ldr	r2, [r7, #8]
 800d5e0:	6879      	ldr	r1, [r7, #4]
 800d5e2:	2000      	movs	r0, #0
 800d5e4:	f000 f8a4 	bl	800d730 <tcp_recv_null>
 800d5e8:	4603      	mov	r3, r0
 800d5ea:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800d5ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	d12a      	bne.n	800d64a <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800d5f4:	7bbb      	ldrb	r3, [r7, #14]
 800d5f6:	f003 0320 	and.w	r3, r3, #32
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	d033      	beq.n	800d666 <tcp_process_refused_data+0xe2>
>>>>>>> Stashed changes
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
<<<<<<< Updated upstream
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d632:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800d636:	d005      	beq.n	800d644 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d63c:	3301      	adds	r3, #1
 800d63e:	b29a      	uxth	r2, r3
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d64a:	2b00      	cmp	r3, #0
 800d64c:	d00b      	beq.n	800d666 <tcp_process_refused_data+0xb2>
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	6918      	ldr	r0, [r3, #16]
 800d658:	2300      	movs	r3, #0
 800d65a:	2200      	movs	r2, #0
 800d65c:	6879      	ldr	r1, [r7, #4]
 800d65e:	47a0      	blx	r4
 800d660:	4603      	mov	r3, r0
 800d662:	73fb      	strb	r3, [r7, #15]
 800d664:	e001      	b.n	800d66a <tcp_process_refused_data+0xb6>
 800d666:	2300      	movs	r3, #0
 800d668:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800d66a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d66e:	f113 0f0d 	cmn.w	r3, #13
 800d672:	d110      	bne.n	800d696 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800d674:	f06f 030c 	mvn.w	r3, #12
 800d678:	e00e      	b.n	800d698 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800d67a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d67e:	f113 0f0d 	cmn.w	r3, #13
 800d682:	d102      	bne.n	800d68a <tcp_process_refused_data+0xd6>
=======
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d602:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800d606:	d005      	beq.n	800d614 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d60c:	3301      	adds	r3, #1
 800d60e:	b29a      	uxth	r2, r3
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d61a:	2b00      	cmp	r3, #0
 800d61c:	d00b      	beq.n	800d636 <tcp_process_refused_data+0xb2>
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	6918      	ldr	r0, [r3, #16]
 800d628:	2300      	movs	r3, #0
 800d62a:	2200      	movs	r2, #0
 800d62c:	6879      	ldr	r1, [r7, #4]
 800d62e:	47a0      	blx	r4
 800d630:	4603      	mov	r3, r0
 800d632:	73fb      	strb	r3, [r7, #15]
 800d634:	e001      	b.n	800d63a <tcp_process_refused_data+0xb6>
 800d636:	2300      	movs	r3, #0
 800d638:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800d63a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d63e:	f113 0f0d 	cmn.w	r3, #13
 800d642:	d110      	bne.n	800d666 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800d644:	f06f 030c 	mvn.w	r3, #12
 800d648:	e00e      	b.n	800d668 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800d64a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d64e:	f113 0f0d 	cmn.w	r3, #13
 800d652:	d102      	bne.n	800d65a <tcp_process_refused_data+0xd6>
>>>>>>> Stashed changes
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
<<<<<<< Updated upstream
 800d684:	f06f 030c 	mvn.w	r3, #12
 800d688:	e006      	b.n	800d698 <tcp_process_refused_data+0xe4>
=======
 800d654:	f06f 030c 	mvn.w	r3, #12
 800d658:	e006      	b.n	800d668 <tcp_process_refused_data+0xe4>
>>>>>>> Stashed changes
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
<<<<<<< Updated upstream
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	68ba      	ldr	r2, [r7, #8]
 800d68e:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800d690:	f06f 0304 	mvn.w	r3, #4
 800d694:	e000      	b.n	800d698 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800d696:	2300      	movs	r3, #0
}
 800d698:	4618      	mov	r0, r3
 800d69a:	3714      	adds	r7, #20
 800d69c:	46bd      	mov	sp, r7
 800d69e:	bd90      	pop	{r4, r7, pc}
 800d6a0:	08016428 	.word	0x08016428
 800d6a4:	08016938 	.word	0x08016938
 800d6a8:	0801646c 	.word	0x0801646c

0800d6ac <tcp_segs_free>:
=======
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	68ba      	ldr	r2, [r7, #8]
 800d65e:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800d660:	f06f 0304 	mvn.w	r3, #4
 800d664:	e000      	b.n	800d668 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800d666:	2300      	movs	r3, #0
}
 800d668:	4618      	mov	r0, r3
 800d66a:	3714      	adds	r7, #20
 800d66c:	46bd      	mov	sp, r7
 800d66e:	bd90      	pop	{r4, r7, pc}
 800d670:	0801640c 	.word	0x0801640c
 800d674:	0801691c 	.word	0x0801691c
 800d678:	08016450 	.word	0x08016450

0800d67c <tcp_segs_free>:
>>>>>>> Stashed changes
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
<<<<<<< Updated upstream
 800d6ac:	b580      	push	{r7, lr}
 800d6ae:	b084      	sub	sp, #16
 800d6b0:	af00      	add	r7, sp, #0
 800d6b2:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800d6b4:	e007      	b.n	800d6c6 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	681b      	ldr	r3, [r3, #0]
 800d6ba:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800d6bc:	6878      	ldr	r0, [r7, #4]
 800d6be:	f000 f80a 	bl	800d6d6 <tcp_seg_free>
    seg = next;
 800d6c2:	68fb      	ldr	r3, [r7, #12]
 800d6c4:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d1f4      	bne.n	800d6b6 <tcp_segs_free+0xa>
  }
}
 800d6cc:	bf00      	nop
 800d6ce:	bf00      	nop
 800d6d0:	3710      	adds	r7, #16
 800d6d2:	46bd      	mov	sp, r7
 800d6d4:	bd80      	pop	{r7, pc}

0800d6d6 <tcp_seg_free>:
=======
 800d67c:	b580      	push	{r7, lr}
 800d67e:	b084      	sub	sp, #16
 800d680:	af00      	add	r7, sp, #0
 800d682:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800d684:	e007      	b.n	800d696 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	681b      	ldr	r3, [r3, #0]
 800d68a:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800d68c:	6878      	ldr	r0, [r7, #4]
 800d68e:	f000 f80a 	bl	800d6a6 <tcp_seg_free>
    seg = next;
 800d692:	68fb      	ldr	r3, [r7, #12]
 800d694:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	2b00      	cmp	r3, #0
 800d69a:	d1f4      	bne.n	800d686 <tcp_segs_free+0xa>
  }
}
 800d69c:	bf00      	nop
 800d69e:	bf00      	nop
 800d6a0:	3710      	adds	r7, #16
 800d6a2:	46bd      	mov	sp, r7
 800d6a4:	bd80      	pop	{r7, pc}

0800d6a6 <tcp_seg_free>:
>>>>>>> Stashed changes
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
<<<<<<< Updated upstream
 800d6d6:	b580      	push	{r7, lr}
 800d6d8:	b082      	sub	sp, #8
 800d6da:	af00      	add	r7, sp, #0
 800d6dc:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d00c      	beq.n	800d6fe <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	685b      	ldr	r3, [r3, #4]
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d004      	beq.n	800d6f6 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	685b      	ldr	r3, [r3, #4]
 800d6f0:	4618      	mov	r0, r3
 800d6f2:	f7fe fd7d 	bl	800c1f0 <pbuf_free>
=======
 800d6a6:	b580      	push	{r7, lr}
 800d6a8:	b082      	sub	sp, #8
 800d6aa:	af00      	add	r7, sp, #0
 800d6ac:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	d00c      	beq.n	800d6ce <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	685b      	ldr	r3, [r3, #4]
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	d004      	beq.n	800d6c6 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	685b      	ldr	r3, [r3, #4]
 800d6c0:	4618      	mov	r0, r3
 800d6c2:	f7fe fd7d 	bl	800c1c0 <pbuf_free>
>>>>>>> Stashed changes
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
<<<<<<< Updated upstream
 800d6f6:	6879      	ldr	r1, [r7, #4]
 800d6f8:	2003      	movs	r0, #3
 800d6fa:	f7fd ff87 	bl	800b60c <memp_free>
  }
}
 800d6fe:	bf00      	nop
 800d700:	3708      	adds	r7, #8
 800d702:	46bd      	mov	sp, r7
 800d704:	bd80      	pop	{r7, pc}
	...

0800d708 <tcp_seg_copy>:
=======
 800d6c6:	6879      	ldr	r1, [r7, #4]
 800d6c8:	2003      	movs	r0, #3
 800d6ca:	f7fd ff87 	bl	800b5dc <memp_free>
  }
}
 800d6ce:	bf00      	nop
 800d6d0:	3708      	adds	r7, #8
 800d6d2:	46bd      	mov	sp, r7
 800d6d4:	bd80      	pop	{r7, pc}
	...

0800d6d8 <tcp_seg_copy>:
>>>>>>> Stashed changes
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
<<<<<<< Updated upstream
 800d708:	b580      	push	{r7, lr}
 800d70a:	b084      	sub	sp, #16
 800d70c:	af00      	add	r7, sp, #0
 800d70e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	2b00      	cmp	r3, #0
 800d714:	d106      	bne.n	800d724 <tcp_seg_copy+0x1c>
 800d716:	4b0f      	ldr	r3, [pc, #60]	; (800d754 <tcp_seg_copy+0x4c>)
 800d718:	f240 6282 	movw	r2, #1666	; 0x682
 800d71c:	490e      	ldr	r1, [pc, #56]	; (800d758 <tcp_seg_copy+0x50>)
 800d71e:	480f      	ldr	r0, [pc, #60]	; (800d75c <tcp_seg_copy+0x54>)
 800d720:	f006 ff30 	bl	8014584 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800d724:	2003      	movs	r0, #3
 800d726:	f7fd ff25 	bl	800b574 <memp_malloc>
 800d72a:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800d72c:	68fb      	ldr	r3, [r7, #12]
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d101      	bne.n	800d736 <tcp_seg_copy+0x2e>
    return NULL;
 800d732:	2300      	movs	r3, #0
 800d734:	e00a      	b.n	800d74c <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800d736:	2210      	movs	r2, #16
 800d738:	6879      	ldr	r1, [r7, #4]
 800d73a:	68f8      	ldr	r0, [r7, #12]
 800d73c:	f006 fef2 	bl	8014524 <memcpy>
  pbuf_ref(cseg->p);
 800d740:	68fb      	ldr	r3, [r7, #12]
 800d742:	685b      	ldr	r3, [r3, #4]
 800d744:	4618      	mov	r0, r3
 800d746:	f7fe fdf3 	bl	800c330 <pbuf_ref>
  return cseg;
 800d74a:	68fb      	ldr	r3, [r7, #12]
}
 800d74c:	4618      	mov	r0, r3
 800d74e:	3710      	adds	r7, #16
 800d750:	46bd      	mov	sp, r7
 800d752:	bd80      	pop	{r7, pc}
 800d754:	08016428 	.word	0x08016428
 800d758:	0801697c 	.word	0x0801697c
 800d75c:	0801646c 	.word	0x0801646c

0800d760 <tcp_recv_null>:
=======
 800d6d8:	b580      	push	{r7, lr}
 800d6da:	b084      	sub	sp, #16
 800d6dc:	af00      	add	r7, sp, #0
 800d6de:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	d106      	bne.n	800d6f4 <tcp_seg_copy+0x1c>
 800d6e6:	4b0f      	ldr	r3, [pc, #60]	; (800d724 <tcp_seg_copy+0x4c>)
 800d6e8:	f240 6282 	movw	r2, #1666	; 0x682
 800d6ec:	490e      	ldr	r1, [pc, #56]	; (800d728 <tcp_seg_copy+0x50>)
 800d6ee:	480f      	ldr	r0, [pc, #60]	; (800d72c <tcp_seg_copy+0x54>)
 800d6f0:	f006 ff30 	bl	8014554 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800d6f4:	2003      	movs	r0, #3
 800d6f6:	f7fd ff25 	bl	800b544 <memp_malloc>
 800d6fa:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800d6fc:	68fb      	ldr	r3, [r7, #12]
 800d6fe:	2b00      	cmp	r3, #0
 800d700:	d101      	bne.n	800d706 <tcp_seg_copy+0x2e>
    return NULL;
 800d702:	2300      	movs	r3, #0
 800d704:	e00a      	b.n	800d71c <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800d706:	2210      	movs	r2, #16
 800d708:	6879      	ldr	r1, [r7, #4]
 800d70a:	68f8      	ldr	r0, [r7, #12]
 800d70c:	f006 fef2 	bl	80144f4 <memcpy>
  pbuf_ref(cseg->p);
 800d710:	68fb      	ldr	r3, [r7, #12]
 800d712:	685b      	ldr	r3, [r3, #4]
 800d714:	4618      	mov	r0, r3
 800d716:	f7fe fdf3 	bl	800c300 <pbuf_ref>
  return cseg;
 800d71a:	68fb      	ldr	r3, [r7, #12]
}
 800d71c:	4618      	mov	r0, r3
 800d71e:	3710      	adds	r7, #16
 800d720:	46bd      	mov	sp, r7
 800d722:	bd80      	pop	{r7, pc}
 800d724:	0801640c 	.word	0x0801640c
 800d728:	08016960 	.word	0x08016960
 800d72c:	08016450 	.word	0x08016450

0800d730 <tcp_recv_null>:
>>>>>>> Stashed changes
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
<<<<<<< Updated upstream
 800d760:	b580      	push	{r7, lr}
 800d762:	b084      	sub	sp, #16
 800d764:	af00      	add	r7, sp, #0
 800d766:	60f8      	str	r0, [r7, #12]
 800d768:	60b9      	str	r1, [r7, #8]
 800d76a:	607a      	str	r2, [r7, #4]
 800d76c:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800d76e:	68bb      	ldr	r3, [r7, #8]
 800d770:	2b00      	cmp	r3, #0
 800d772:	d109      	bne.n	800d788 <tcp_recv_null+0x28>
 800d774:	4b12      	ldr	r3, [pc, #72]	; (800d7c0 <tcp_recv_null+0x60>)
 800d776:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800d77a:	4912      	ldr	r1, [pc, #72]	; (800d7c4 <tcp_recv_null+0x64>)
 800d77c:	4812      	ldr	r0, [pc, #72]	; (800d7c8 <tcp_recv_null+0x68>)
 800d77e:	f006 ff01 	bl	8014584 <iprintf>
 800d782:	f06f 030f 	mvn.w	r3, #15
 800d786:	e016      	b.n	800d7b6 <tcp_recv_null+0x56>

  if (p != NULL) {
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d009      	beq.n	800d7a2 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	891b      	ldrh	r3, [r3, #8]
 800d792:	4619      	mov	r1, r3
 800d794:	68b8      	ldr	r0, [r7, #8]
 800d796:	f7ff fb19 	bl	800cdcc <tcp_recved>
    pbuf_free(p);
 800d79a:	6878      	ldr	r0, [r7, #4]
 800d79c:	f7fe fd28 	bl	800c1f0 <pbuf_free>
 800d7a0:	e008      	b.n	800d7b4 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800d7a2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d7a6:	2b00      	cmp	r3, #0
 800d7a8:	d104      	bne.n	800d7b4 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800d7aa:	68b8      	ldr	r0, [r7, #8]
 800d7ac:	f7ff f9be 	bl	800cb2c <tcp_close>
 800d7b0:	4603      	mov	r3, r0
 800d7b2:	e000      	b.n	800d7b6 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800d7b4:	2300      	movs	r3, #0
}
 800d7b6:	4618      	mov	r0, r3
 800d7b8:	3710      	adds	r7, #16
 800d7ba:	46bd      	mov	sp, r7
 800d7bc:	bd80      	pop	{r7, pc}
 800d7be:	bf00      	nop
 800d7c0:	08016428 	.word	0x08016428
 800d7c4:	08016998 	.word	0x08016998
 800d7c8:	0801646c 	.word	0x0801646c

0800d7cc <tcp_kill_prio>:
=======
 800d730:	b580      	push	{r7, lr}
 800d732:	b084      	sub	sp, #16
 800d734:	af00      	add	r7, sp, #0
 800d736:	60f8      	str	r0, [r7, #12]
 800d738:	60b9      	str	r1, [r7, #8]
 800d73a:	607a      	str	r2, [r7, #4]
 800d73c:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800d73e:	68bb      	ldr	r3, [r7, #8]
 800d740:	2b00      	cmp	r3, #0
 800d742:	d109      	bne.n	800d758 <tcp_recv_null+0x28>
 800d744:	4b12      	ldr	r3, [pc, #72]	; (800d790 <tcp_recv_null+0x60>)
 800d746:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800d74a:	4912      	ldr	r1, [pc, #72]	; (800d794 <tcp_recv_null+0x64>)
 800d74c:	4812      	ldr	r0, [pc, #72]	; (800d798 <tcp_recv_null+0x68>)
 800d74e:	f006 ff01 	bl	8014554 <iprintf>
 800d752:	f06f 030f 	mvn.w	r3, #15
 800d756:	e016      	b.n	800d786 <tcp_recv_null+0x56>

  if (p != NULL) {
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	d009      	beq.n	800d772 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	891b      	ldrh	r3, [r3, #8]
 800d762:	4619      	mov	r1, r3
 800d764:	68b8      	ldr	r0, [r7, #8]
 800d766:	f7ff fb19 	bl	800cd9c <tcp_recved>
    pbuf_free(p);
 800d76a:	6878      	ldr	r0, [r7, #4]
 800d76c:	f7fe fd28 	bl	800c1c0 <pbuf_free>
 800d770:	e008      	b.n	800d784 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800d772:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d776:	2b00      	cmp	r3, #0
 800d778:	d104      	bne.n	800d784 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800d77a:	68b8      	ldr	r0, [r7, #8]
 800d77c:	f7ff f9be 	bl	800cafc <tcp_close>
 800d780:	4603      	mov	r3, r0
 800d782:	e000      	b.n	800d786 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800d784:	2300      	movs	r3, #0
}
 800d786:	4618      	mov	r0, r3
 800d788:	3710      	adds	r7, #16
 800d78a:	46bd      	mov	sp, r7
 800d78c:	bd80      	pop	{r7, pc}
 800d78e:	bf00      	nop
 800d790:	0801640c 	.word	0x0801640c
 800d794:	0801697c 	.word	0x0801697c
 800d798:	08016450 	.word	0x08016450

0800d79c <tcp_kill_prio>:
>>>>>>> Stashed changes
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
<<<<<<< Updated upstream
 800d7cc:	b580      	push	{r7, lr}
 800d7ce:	b086      	sub	sp, #24
 800d7d0:	af00      	add	r7, sp, #0
 800d7d2:	4603      	mov	r3, r0
 800d7d4:	71fb      	strb	r3, [r7, #7]
=======
 800d79c:	b580      	push	{r7, lr}
 800d79e:	b086      	sub	sp, #24
 800d7a0:	af00      	add	r7, sp, #0
 800d7a2:	4603      	mov	r3, r0
 800d7a4:	71fb      	strb	r3, [r7, #7]
>>>>>>> Stashed changes
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
<<<<<<< Updated upstream
 800d7d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	db01      	blt.n	800d7e2 <tcp_kill_prio+0x16>
 800d7de:	79fb      	ldrb	r3, [r7, #7]
 800d7e0:	e000      	b.n	800d7e4 <tcp_kill_prio+0x18>
 800d7e2:	237f      	movs	r3, #127	; 0x7f
 800d7e4:	72fb      	strb	r3, [r7, #11]
=======
 800d7a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	db01      	blt.n	800d7b2 <tcp_kill_prio+0x16>
 800d7ae:	79fb      	ldrb	r3, [r7, #7]
 800d7b0:	e000      	b.n	800d7b4 <tcp_kill_prio+0x18>
 800d7b2:	237f      	movs	r3, #127	; 0x7f
 800d7b4:	72fb      	strb	r3, [r7, #11]
>>>>>>> Stashed changes

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
<<<<<<< Updated upstream
 800d7e6:	7afb      	ldrb	r3, [r7, #11]
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	d034      	beq.n	800d856 <tcp_kill_prio+0x8a>
=======
 800d7b6:	7afb      	ldrb	r3, [r7, #11]
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	d034      	beq.n	800d826 <tcp_kill_prio+0x8a>
>>>>>>> Stashed changes
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
<<<<<<< Updated upstream
 800d7ec:	7afb      	ldrb	r3, [r7, #11]
 800d7ee:	3b01      	subs	r3, #1
 800d7f0:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800d7f2:	2300      	movs	r3, #0
 800d7f4:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800d7f6:	2300      	movs	r3, #0
 800d7f8:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d7fa:	4b19      	ldr	r3, [pc, #100]	; (800d860 <tcp_kill_prio+0x94>)
 800d7fc:	681b      	ldr	r3, [r3, #0]
 800d7fe:	617b      	str	r3, [r7, #20]
 800d800:	e01f      	b.n	800d842 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800d802:	697b      	ldr	r3, [r7, #20]
 800d804:	7d5b      	ldrb	r3, [r3, #21]
 800d806:	7afa      	ldrb	r2, [r7, #11]
 800d808:	429a      	cmp	r2, r3
 800d80a:	d80c      	bhi.n	800d826 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800d80c:	697b      	ldr	r3, [r7, #20]
 800d80e:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800d810:	7afa      	ldrb	r2, [r7, #11]
 800d812:	429a      	cmp	r2, r3
 800d814:	d112      	bne.n	800d83c <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800d816:	4b13      	ldr	r3, [pc, #76]	; (800d864 <tcp_kill_prio+0x98>)
 800d818:	681a      	ldr	r2, [r3, #0]
 800d81a:	697b      	ldr	r3, [r7, #20]
 800d81c:	6a1b      	ldr	r3, [r3, #32]
 800d81e:	1ad3      	subs	r3, r2, r3
 800d820:	68fa      	ldr	r2, [r7, #12]
 800d822:	429a      	cmp	r2, r3
 800d824:	d80a      	bhi.n	800d83c <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800d826:	4b0f      	ldr	r3, [pc, #60]	; (800d864 <tcp_kill_prio+0x98>)
 800d828:	681a      	ldr	r2, [r3, #0]
 800d82a:	697b      	ldr	r3, [r7, #20]
 800d82c:	6a1b      	ldr	r3, [r3, #32]
 800d82e:	1ad3      	subs	r3, r2, r3
 800d830:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800d832:	697b      	ldr	r3, [r7, #20]
 800d834:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800d836:	697b      	ldr	r3, [r7, #20]
 800d838:	7d5b      	ldrb	r3, [r3, #21]
 800d83a:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d83c:	697b      	ldr	r3, [r7, #20]
 800d83e:	68db      	ldr	r3, [r3, #12]
 800d840:	617b      	str	r3, [r7, #20]
 800d842:	697b      	ldr	r3, [r7, #20]
 800d844:	2b00      	cmp	r3, #0
 800d846:	d1dc      	bne.n	800d802 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800d848:	693b      	ldr	r3, [r7, #16]
 800d84a:	2b00      	cmp	r3, #0
 800d84c:	d004      	beq.n	800d858 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800d84e:	6938      	ldr	r0, [r7, #16]
 800d850:	f7ff fa56 	bl	800cd00 <tcp_abort>
 800d854:	e000      	b.n	800d858 <tcp_kill_prio+0x8c>
    return;
 800d856:	bf00      	nop
  }
}
 800d858:	3718      	adds	r7, #24
 800d85a:	46bd      	mov	sp, r7
 800d85c:	bd80      	pop	{r7, pc}
 800d85e:	bf00      	nop
 800d860:	200072a0 	.word	0x200072a0
 800d864:	200072a4 	.word	0x200072a4

0800d868 <tcp_kill_state>:
=======
 800d7bc:	7afb      	ldrb	r3, [r7, #11]
 800d7be:	3b01      	subs	r3, #1
 800d7c0:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800d7c2:	2300      	movs	r3, #0
 800d7c4:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800d7c6:	2300      	movs	r3, #0
 800d7c8:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d7ca:	4b19      	ldr	r3, [pc, #100]	; (800d830 <tcp_kill_prio+0x94>)
 800d7cc:	681b      	ldr	r3, [r3, #0]
 800d7ce:	617b      	str	r3, [r7, #20]
 800d7d0:	e01f      	b.n	800d812 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800d7d2:	697b      	ldr	r3, [r7, #20]
 800d7d4:	7d5b      	ldrb	r3, [r3, #21]
 800d7d6:	7afa      	ldrb	r2, [r7, #11]
 800d7d8:	429a      	cmp	r2, r3
 800d7da:	d80c      	bhi.n	800d7f6 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800d7dc:	697b      	ldr	r3, [r7, #20]
 800d7de:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800d7e0:	7afa      	ldrb	r2, [r7, #11]
 800d7e2:	429a      	cmp	r2, r3
 800d7e4:	d112      	bne.n	800d80c <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800d7e6:	4b13      	ldr	r3, [pc, #76]	; (800d834 <tcp_kill_prio+0x98>)
 800d7e8:	681a      	ldr	r2, [r3, #0]
 800d7ea:	697b      	ldr	r3, [r7, #20]
 800d7ec:	6a1b      	ldr	r3, [r3, #32]
 800d7ee:	1ad3      	subs	r3, r2, r3
 800d7f0:	68fa      	ldr	r2, [r7, #12]
 800d7f2:	429a      	cmp	r2, r3
 800d7f4:	d80a      	bhi.n	800d80c <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800d7f6:	4b0f      	ldr	r3, [pc, #60]	; (800d834 <tcp_kill_prio+0x98>)
 800d7f8:	681a      	ldr	r2, [r3, #0]
 800d7fa:	697b      	ldr	r3, [r7, #20]
 800d7fc:	6a1b      	ldr	r3, [r3, #32]
 800d7fe:	1ad3      	subs	r3, r2, r3
 800d800:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800d802:	697b      	ldr	r3, [r7, #20]
 800d804:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800d806:	697b      	ldr	r3, [r7, #20]
 800d808:	7d5b      	ldrb	r3, [r3, #21]
 800d80a:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d80c:	697b      	ldr	r3, [r7, #20]
 800d80e:	68db      	ldr	r3, [r3, #12]
 800d810:	617b      	str	r3, [r7, #20]
 800d812:	697b      	ldr	r3, [r7, #20]
 800d814:	2b00      	cmp	r3, #0
 800d816:	d1dc      	bne.n	800d7d2 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800d818:	693b      	ldr	r3, [r7, #16]
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d004      	beq.n	800d828 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800d81e:	6938      	ldr	r0, [r7, #16]
 800d820:	f7ff fa56 	bl	800ccd0 <tcp_abort>
 800d824:	e000      	b.n	800d828 <tcp_kill_prio+0x8c>
    return;
 800d826:	bf00      	nop
  }
}
 800d828:	3718      	adds	r7, #24
 800d82a:	46bd      	mov	sp, r7
 800d82c:	bd80      	pop	{r7, pc}
 800d82e:	bf00      	nop
 800d830:	200072a0 	.word	0x200072a0
 800d834:	200072a4 	.word	0x200072a4

0800d838 <tcp_kill_state>:
>>>>>>> Stashed changes
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
<<<<<<< Updated upstream
 800d868:	b580      	push	{r7, lr}
 800d86a:	b086      	sub	sp, #24
 800d86c:	af00      	add	r7, sp, #0
 800d86e:	4603      	mov	r3, r0
 800d870:	71fb      	strb	r3, [r7, #7]
=======
 800d838:	b580      	push	{r7, lr}
 800d83a:	b086      	sub	sp, #24
 800d83c:	af00      	add	r7, sp, #0
 800d83e:	4603      	mov	r3, r0
 800d840:	71fb      	strb	r3, [r7, #7]
>>>>>>> Stashed changes
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
<<<<<<< Updated upstream
 800d872:	79fb      	ldrb	r3, [r7, #7]
 800d874:	2b08      	cmp	r3, #8
 800d876:	d009      	beq.n	800d88c <tcp_kill_state+0x24>
 800d878:	79fb      	ldrb	r3, [r7, #7]
 800d87a:	2b09      	cmp	r3, #9
 800d87c:	d006      	beq.n	800d88c <tcp_kill_state+0x24>
 800d87e:	4b1a      	ldr	r3, [pc, #104]	; (800d8e8 <tcp_kill_state+0x80>)
 800d880:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800d884:	4919      	ldr	r1, [pc, #100]	; (800d8ec <tcp_kill_state+0x84>)
 800d886:	481a      	ldr	r0, [pc, #104]	; (800d8f0 <tcp_kill_state+0x88>)
 800d888:	f006 fe7c 	bl	8014584 <iprintf>

  inactivity = 0;
 800d88c:	2300      	movs	r3, #0
 800d88e:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800d890:	2300      	movs	r3, #0
 800d892:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d894:	4b17      	ldr	r3, [pc, #92]	; (800d8f4 <tcp_kill_state+0x8c>)
 800d896:	681b      	ldr	r3, [r3, #0]
 800d898:	617b      	str	r3, [r7, #20]
 800d89a:	e017      	b.n	800d8cc <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800d89c:	697b      	ldr	r3, [r7, #20]
 800d89e:	7d1b      	ldrb	r3, [r3, #20]
 800d8a0:	79fa      	ldrb	r2, [r7, #7]
 800d8a2:	429a      	cmp	r2, r3
 800d8a4:	d10f      	bne.n	800d8c6 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800d8a6:	4b14      	ldr	r3, [pc, #80]	; (800d8f8 <tcp_kill_state+0x90>)
 800d8a8:	681a      	ldr	r2, [r3, #0]
 800d8aa:	697b      	ldr	r3, [r7, #20]
 800d8ac:	6a1b      	ldr	r3, [r3, #32]
 800d8ae:	1ad3      	subs	r3, r2, r3
 800d8b0:	68fa      	ldr	r2, [r7, #12]
 800d8b2:	429a      	cmp	r2, r3
 800d8b4:	d807      	bhi.n	800d8c6 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800d8b6:	4b10      	ldr	r3, [pc, #64]	; (800d8f8 <tcp_kill_state+0x90>)
 800d8b8:	681a      	ldr	r2, [r3, #0]
 800d8ba:	697b      	ldr	r3, [r7, #20]
 800d8bc:	6a1b      	ldr	r3, [r3, #32]
 800d8be:	1ad3      	subs	r3, r2, r3
 800d8c0:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800d8c2:	697b      	ldr	r3, [r7, #20]
 800d8c4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d8c6:	697b      	ldr	r3, [r7, #20]
 800d8c8:	68db      	ldr	r3, [r3, #12]
 800d8ca:	617b      	str	r3, [r7, #20]
 800d8cc:	697b      	ldr	r3, [r7, #20]
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	d1e4      	bne.n	800d89c <tcp_kill_state+0x34>
=======
 800d842:	79fb      	ldrb	r3, [r7, #7]
 800d844:	2b08      	cmp	r3, #8
 800d846:	d009      	beq.n	800d85c <tcp_kill_state+0x24>
 800d848:	79fb      	ldrb	r3, [r7, #7]
 800d84a:	2b09      	cmp	r3, #9
 800d84c:	d006      	beq.n	800d85c <tcp_kill_state+0x24>
 800d84e:	4b1a      	ldr	r3, [pc, #104]	; (800d8b8 <tcp_kill_state+0x80>)
 800d850:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800d854:	4919      	ldr	r1, [pc, #100]	; (800d8bc <tcp_kill_state+0x84>)
 800d856:	481a      	ldr	r0, [pc, #104]	; (800d8c0 <tcp_kill_state+0x88>)
 800d858:	f006 fe7c 	bl	8014554 <iprintf>

  inactivity = 0;
 800d85c:	2300      	movs	r3, #0
 800d85e:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800d860:	2300      	movs	r3, #0
 800d862:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d864:	4b17      	ldr	r3, [pc, #92]	; (800d8c4 <tcp_kill_state+0x8c>)
 800d866:	681b      	ldr	r3, [r3, #0]
 800d868:	617b      	str	r3, [r7, #20]
 800d86a:	e017      	b.n	800d89c <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800d86c:	697b      	ldr	r3, [r7, #20]
 800d86e:	7d1b      	ldrb	r3, [r3, #20]
 800d870:	79fa      	ldrb	r2, [r7, #7]
 800d872:	429a      	cmp	r2, r3
 800d874:	d10f      	bne.n	800d896 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800d876:	4b14      	ldr	r3, [pc, #80]	; (800d8c8 <tcp_kill_state+0x90>)
 800d878:	681a      	ldr	r2, [r3, #0]
 800d87a:	697b      	ldr	r3, [r7, #20]
 800d87c:	6a1b      	ldr	r3, [r3, #32]
 800d87e:	1ad3      	subs	r3, r2, r3
 800d880:	68fa      	ldr	r2, [r7, #12]
 800d882:	429a      	cmp	r2, r3
 800d884:	d807      	bhi.n	800d896 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800d886:	4b10      	ldr	r3, [pc, #64]	; (800d8c8 <tcp_kill_state+0x90>)
 800d888:	681a      	ldr	r2, [r3, #0]
 800d88a:	697b      	ldr	r3, [r7, #20]
 800d88c:	6a1b      	ldr	r3, [r3, #32]
 800d88e:	1ad3      	subs	r3, r2, r3
 800d890:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800d892:	697b      	ldr	r3, [r7, #20]
 800d894:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d896:	697b      	ldr	r3, [r7, #20]
 800d898:	68db      	ldr	r3, [r3, #12]
 800d89a:	617b      	str	r3, [r7, #20]
 800d89c:	697b      	ldr	r3, [r7, #20]
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d1e4      	bne.n	800d86c <tcp_kill_state+0x34>
>>>>>>> Stashed changes
      }
    }
  }
  if (inactive != NULL) {
<<<<<<< Updated upstream
 800d8d2:	693b      	ldr	r3, [r7, #16]
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d003      	beq.n	800d8e0 <tcp_kill_state+0x78>
=======
 800d8a2:	693b      	ldr	r3, [r7, #16]
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d003      	beq.n	800d8b0 <tcp_kill_state+0x78>
>>>>>>> Stashed changes
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
<<<<<<< Updated upstream
 800d8d8:	2100      	movs	r1, #0
 800d8da:	6938      	ldr	r0, [r7, #16]
 800d8dc:	f7ff f952 	bl	800cb84 <tcp_abandon>
  }
}
 800d8e0:	bf00      	nop
 800d8e2:	3718      	adds	r7, #24
 800d8e4:	46bd      	mov	sp, r7
 800d8e6:	bd80      	pop	{r7, pc}
 800d8e8:	08016428 	.word	0x08016428
 800d8ec:	080169b4 	.word	0x080169b4
 800d8f0:	0801646c 	.word	0x0801646c
 800d8f4:	200072a0 	.word	0x200072a0
 800d8f8:	200072a4 	.word	0x200072a4

0800d8fc <tcp_kill_timewait>:
=======
 800d8a8:	2100      	movs	r1, #0
 800d8aa:	6938      	ldr	r0, [r7, #16]
 800d8ac:	f7ff f952 	bl	800cb54 <tcp_abandon>
  }
}
 800d8b0:	bf00      	nop
 800d8b2:	3718      	adds	r7, #24
 800d8b4:	46bd      	mov	sp, r7
 800d8b6:	bd80      	pop	{r7, pc}
 800d8b8:	0801640c 	.word	0x0801640c
 800d8bc:	08016998 	.word	0x08016998
 800d8c0:	08016450 	.word	0x08016450
 800d8c4:	200072a0 	.word	0x200072a0
 800d8c8:	200072a4 	.word	0x200072a4

0800d8cc <tcp_kill_timewait>:
>>>>>>> Stashed changes
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
<<<<<<< Updated upstream
 800d8fc:	b580      	push	{r7, lr}
 800d8fe:	b084      	sub	sp, #16
 800d900:	af00      	add	r7, sp, #0
=======
 800d8cc:	b580      	push	{r7, lr}
 800d8ce:	b084      	sub	sp, #16
 800d8d0:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
<<<<<<< Updated upstream
 800d902:	2300      	movs	r3, #0
 800d904:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800d906:	2300      	movs	r3, #0
 800d908:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d90a:	4b12      	ldr	r3, [pc, #72]	; (800d954 <tcp_kill_timewait+0x58>)
 800d90c:	681b      	ldr	r3, [r3, #0]
 800d90e:	60fb      	str	r3, [r7, #12]
 800d910:	e012      	b.n	800d938 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800d912:	4b11      	ldr	r3, [pc, #68]	; (800d958 <tcp_kill_timewait+0x5c>)
 800d914:	681a      	ldr	r2, [r3, #0]
 800d916:	68fb      	ldr	r3, [r7, #12]
 800d918:	6a1b      	ldr	r3, [r3, #32]
 800d91a:	1ad3      	subs	r3, r2, r3
 800d91c:	687a      	ldr	r2, [r7, #4]
 800d91e:	429a      	cmp	r2, r3
 800d920:	d807      	bhi.n	800d932 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800d922:	4b0d      	ldr	r3, [pc, #52]	; (800d958 <tcp_kill_timewait+0x5c>)
 800d924:	681a      	ldr	r2, [r3, #0]
 800d926:	68fb      	ldr	r3, [r7, #12]
 800d928:	6a1b      	ldr	r3, [r3, #32]
 800d92a:	1ad3      	subs	r3, r2, r3
 800d92c:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800d92e:	68fb      	ldr	r3, [r7, #12]
 800d930:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d932:	68fb      	ldr	r3, [r7, #12]
 800d934:	68db      	ldr	r3, [r3, #12]
 800d936:	60fb      	str	r3, [r7, #12]
 800d938:	68fb      	ldr	r3, [r7, #12]
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d1e9      	bne.n	800d912 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800d93e:	68bb      	ldr	r3, [r7, #8]
 800d940:	2b00      	cmp	r3, #0
 800d942:	d002      	beq.n	800d94a <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800d944:	68b8      	ldr	r0, [r7, #8]
 800d946:	f7ff f9db 	bl	800cd00 <tcp_abort>
  }
}
 800d94a:	bf00      	nop
 800d94c:	3710      	adds	r7, #16
 800d94e:	46bd      	mov	sp, r7
 800d950:	bd80      	pop	{r7, pc}
 800d952:	bf00      	nop
 800d954:	200072b0 	.word	0x200072b0
 800d958:	200072a4 	.word	0x200072a4

0800d95c <tcp_handle_closepend>:
=======
 800d8d2:	2300      	movs	r3, #0
 800d8d4:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800d8d6:	2300      	movs	r3, #0
 800d8d8:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d8da:	4b12      	ldr	r3, [pc, #72]	; (800d924 <tcp_kill_timewait+0x58>)
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	60fb      	str	r3, [r7, #12]
 800d8e0:	e012      	b.n	800d908 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800d8e2:	4b11      	ldr	r3, [pc, #68]	; (800d928 <tcp_kill_timewait+0x5c>)
 800d8e4:	681a      	ldr	r2, [r3, #0]
 800d8e6:	68fb      	ldr	r3, [r7, #12]
 800d8e8:	6a1b      	ldr	r3, [r3, #32]
 800d8ea:	1ad3      	subs	r3, r2, r3
 800d8ec:	687a      	ldr	r2, [r7, #4]
 800d8ee:	429a      	cmp	r2, r3
 800d8f0:	d807      	bhi.n	800d902 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800d8f2:	4b0d      	ldr	r3, [pc, #52]	; (800d928 <tcp_kill_timewait+0x5c>)
 800d8f4:	681a      	ldr	r2, [r3, #0]
 800d8f6:	68fb      	ldr	r3, [r7, #12]
 800d8f8:	6a1b      	ldr	r3, [r3, #32]
 800d8fa:	1ad3      	subs	r3, r2, r3
 800d8fc:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800d8fe:	68fb      	ldr	r3, [r7, #12]
 800d900:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d902:	68fb      	ldr	r3, [r7, #12]
 800d904:	68db      	ldr	r3, [r3, #12]
 800d906:	60fb      	str	r3, [r7, #12]
 800d908:	68fb      	ldr	r3, [r7, #12]
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	d1e9      	bne.n	800d8e2 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800d90e:	68bb      	ldr	r3, [r7, #8]
 800d910:	2b00      	cmp	r3, #0
 800d912:	d002      	beq.n	800d91a <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800d914:	68b8      	ldr	r0, [r7, #8]
 800d916:	f7ff f9db 	bl	800ccd0 <tcp_abort>
  }
}
 800d91a:	bf00      	nop
 800d91c:	3710      	adds	r7, #16
 800d91e:	46bd      	mov	sp, r7
 800d920:	bd80      	pop	{r7, pc}
 800d922:	bf00      	nop
 800d924:	200072b0 	.word	0x200072b0
 800d928:	200072a4 	.word	0x200072a4

0800d92c <tcp_handle_closepend>:
>>>>>>> Stashed changes
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
<<<<<<< Updated upstream
 800d95c:	b580      	push	{r7, lr}
 800d95e:	b082      	sub	sp, #8
 800d960:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800d962:	4b10      	ldr	r3, [pc, #64]	; (800d9a4 <tcp_handle_closepend+0x48>)
 800d964:	681b      	ldr	r3, [r3, #0]
 800d966:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800d968:	e014      	b.n	800d994 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	68db      	ldr	r3, [r3, #12]
 800d96e:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	8b5b      	ldrh	r3, [r3, #26]
 800d974:	f003 0308 	and.w	r3, r3, #8
 800d978:	2b00      	cmp	r3, #0
 800d97a:	d009      	beq.n	800d990 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	8b5b      	ldrh	r3, [r3, #26]
 800d980:	f023 0308 	bic.w	r3, r3, #8
 800d984:	b29a      	uxth	r2, r3
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800d98a:	6878      	ldr	r0, [r7, #4]
 800d98c:	f7ff f864 	bl	800ca58 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800d990:	683b      	ldr	r3, [r7, #0]
 800d992:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	2b00      	cmp	r3, #0
 800d998:	d1e7      	bne.n	800d96a <tcp_handle_closepend+0xe>
  }
}
 800d99a:	bf00      	nop
 800d99c:	bf00      	nop
 800d99e:	3708      	adds	r7, #8
 800d9a0:	46bd      	mov	sp, r7
 800d9a2:	bd80      	pop	{r7, pc}
 800d9a4:	200072a0 	.word	0x200072a0

0800d9a8 <tcp_alloc>:
=======
 800d92c:	b580      	push	{r7, lr}
 800d92e:	b082      	sub	sp, #8
 800d930:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800d932:	4b10      	ldr	r3, [pc, #64]	; (800d974 <tcp_handle_closepend+0x48>)
 800d934:	681b      	ldr	r3, [r3, #0]
 800d936:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800d938:	e014      	b.n	800d964 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	68db      	ldr	r3, [r3, #12]
 800d93e:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	8b5b      	ldrh	r3, [r3, #26]
 800d944:	f003 0308 	and.w	r3, r3, #8
 800d948:	2b00      	cmp	r3, #0
 800d94a:	d009      	beq.n	800d960 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	8b5b      	ldrh	r3, [r3, #26]
 800d950:	f023 0308 	bic.w	r3, r3, #8
 800d954:	b29a      	uxth	r2, r3
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800d95a:	6878      	ldr	r0, [r7, #4]
 800d95c:	f7ff f864 	bl	800ca28 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800d960:	683b      	ldr	r3, [r7, #0]
 800d962:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	2b00      	cmp	r3, #0
 800d968:	d1e7      	bne.n	800d93a <tcp_handle_closepend+0xe>
  }
}
 800d96a:	bf00      	nop
 800d96c:	bf00      	nop
 800d96e:	3708      	adds	r7, #8
 800d970:	46bd      	mov	sp, r7
 800d972:	bd80      	pop	{r7, pc}
 800d974:	200072a0 	.word	0x200072a0

0800d978 <tcp_alloc>:
>>>>>>> Stashed changes
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
<<<<<<< Updated upstream
 800d9a8:	b580      	push	{r7, lr}
 800d9aa:	b084      	sub	sp, #16
 800d9ac:	af00      	add	r7, sp, #0
 800d9ae:	4603      	mov	r3, r0
 800d9b0:	71fb      	strb	r3, [r7, #7]
=======
 800d978:	b580      	push	{r7, lr}
 800d97a:	b084      	sub	sp, #16
 800d97c:	af00      	add	r7, sp, #0
 800d97e:	4603      	mov	r3, r0
 800d980:	71fb      	strb	r3, [r7, #7]
>>>>>>> Stashed changes
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
<<<<<<< Updated upstream
 800d9b2:	2001      	movs	r0, #1
 800d9b4:	f7fd fdde 	bl	800b574 <memp_malloc>
 800d9b8:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800d9ba:	68fb      	ldr	r3, [r7, #12]
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	d126      	bne.n	800da0e <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800d9c0:	f7ff ffcc 	bl	800d95c <tcp_handle_closepend>
=======
 800d982:	2001      	movs	r0, #1
 800d984:	f7fd fdde 	bl	800b544 <memp_malloc>
 800d988:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800d98a:	68fb      	ldr	r3, [r7, #12]
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d126      	bne.n	800d9de <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800d990:	f7ff ffcc 	bl	800d92c <tcp_handle_closepend>
>>>>>>> Stashed changes

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
<<<<<<< Updated upstream
 800d9c4:	f7ff ff9a 	bl	800d8fc <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d9c8:	2001      	movs	r0, #1
 800d9ca:	f7fd fdd3 	bl	800b574 <memp_malloc>
 800d9ce:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800d9d0:	68fb      	ldr	r3, [r7, #12]
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	d11b      	bne.n	800da0e <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800d9d6:	2009      	movs	r0, #9
 800d9d8:	f7ff ff46 	bl	800d868 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d9dc:	2001      	movs	r0, #1
 800d9de:	f7fd fdc9 	bl	800b574 <memp_malloc>
 800d9e2:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800d9e4:	68fb      	ldr	r3, [r7, #12]
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	d111      	bne.n	800da0e <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800d9ea:	2008      	movs	r0, #8
 800d9ec:	f7ff ff3c 	bl	800d868 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d9f0:	2001      	movs	r0, #1
 800d9f2:	f7fd fdbf 	bl	800b574 <memp_malloc>
 800d9f6:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800d9f8:	68fb      	ldr	r3, [r7, #12]
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	d107      	bne.n	800da0e <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800d9fe:	79fb      	ldrb	r3, [r7, #7]
 800da00:	4618      	mov	r0, r3
 800da02:	f7ff fee3 	bl	800d7cc <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800da06:	2001      	movs	r0, #1
 800da08:	f7fd fdb4 	bl	800b574 <memp_malloc>
 800da0c:	60f8      	str	r0, [r7, #12]
=======
 800d994:	f7ff ff9a 	bl	800d8cc <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d998:	2001      	movs	r0, #1
 800d99a:	f7fd fdd3 	bl	800b544 <memp_malloc>
 800d99e:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800d9a0:	68fb      	ldr	r3, [r7, #12]
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	d11b      	bne.n	800d9de <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800d9a6:	2009      	movs	r0, #9
 800d9a8:	f7ff ff46 	bl	800d838 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d9ac:	2001      	movs	r0, #1
 800d9ae:	f7fd fdc9 	bl	800b544 <memp_malloc>
 800d9b2:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800d9b4:	68fb      	ldr	r3, [r7, #12]
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d111      	bne.n	800d9de <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800d9ba:	2008      	movs	r0, #8
 800d9bc:	f7ff ff3c 	bl	800d838 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d9c0:	2001      	movs	r0, #1
 800d9c2:	f7fd fdbf 	bl	800b544 <memp_malloc>
 800d9c6:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800d9c8:	68fb      	ldr	r3, [r7, #12]
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	d107      	bne.n	800d9de <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800d9ce:	79fb      	ldrb	r3, [r7, #7]
 800d9d0:	4618      	mov	r0, r3
 800d9d2:	f7ff fee3 	bl	800d79c <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d9d6:	2001      	movs	r0, #1
 800d9d8:	f7fd fdb4 	bl	800b544 <memp_malloc>
 800d9dc:	60f8      	str	r0, [r7, #12]
>>>>>>> Stashed changes
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
<<<<<<< Updated upstream
 800da0e:	68fb      	ldr	r3, [r7, #12]
 800da10:	2b00      	cmp	r3, #0
 800da12:	d03f      	beq.n	800da94 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800da14:	229c      	movs	r2, #156	; 0x9c
 800da16:	2100      	movs	r1, #0
 800da18:	68f8      	ldr	r0, [r7, #12]
 800da1a:	f006 fdab 	bl	8014574 <memset>
    pcb->prio = prio;
 800da1e:	68fb      	ldr	r3, [r7, #12]
 800da20:	79fa      	ldrb	r2, [r7, #7]
 800da22:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800da24:	68fb      	ldr	r3, [r7, #12]
 800da26:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800da2a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800da2e:	68fb      	ldr	r3, [r7, #12]
 800da30:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800da34:	855a      	strh	r2, [r3, #42]	; 0x2a
 800da36:	68fb      	ldr	r3, [r7, #12]
 800da38:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800da3a:	68fb      	ldr	r3, [r7, #12]
 800da3c:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800da3e:	68fb      	ldr	r3, [r7, #12]
 800da40:	22ff      	movs	r2, #255	; 0xff
 800da42:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800da44:	68fb      	ldr	r3, [r7, #12]
 800da46:	f44f 7206 	mov.w	r2, #536	; 0x218
 800da4a:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800da4c:	68fb      	ldr	r3, [r7, #12]
 800da4e:	2206      	movs	r2, #6
 800da50:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800da54:	68fb      	ldr	r3, [r7, #12]
 800da56:	2206      	movs	r2, #6
 800da58:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800da5a:	68fb      	ldr	r3, [r7, #12]
 800da5c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800da60:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800da62:	68fb      	ldr	r3, [r7, #12]
 800da64:	2201      	movs	r2, #1
 800da66:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800da6a:	4b0d      	ldr	r3, [pc, #52]	; (800daa0 <tcp_alloc+0xf8>)
 800da6c:	681a      	ldr	r2, [r3, #0]
 800da6e:	68fb      	ldr	r3, [r7, #12]
 800da70:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800da72:	4b0c      	ldr	r3, [pc, #48]	; (800daa4 <tcp_alloc+0xfc>)
 800da74:	781a      	ldrb	r2, [r3, #0]
 800da76:	68fb      	ldr	r3, [r7, #12]
 800da78:	779a      	strb	r2, [r3, #30]
=======
 800d9de:	68fb      	ldr	r3, [r7, #12]
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d03f      	beq.n	800da64 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800d9e4:	229c      	movs	r2, #156	; 0x9c
 800d9e6:	2100      	movs	r1, #0
 800d9e8:	68f8      	ldr	r0, [r7, #12]
 800d9ea:	f006 fdab 	bl	8014544 <memset>
    pcb->prio = prio;
 800d9ee:	68fb      	ldr	r3, [r7, #12]
 800d9f0:	79fa      	ldrb	r2, [r7, #7]
 800d9f2:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800d9f4:	68fb      	ldr	r3, [r7, #12]
 800d9f6:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800d9fa:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800d9fe:	68fb      	ldr	r3, [r7, #12]
 800da00:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800da04:	855a      	strh	r2, [r3, #42]	; 0x2a
 800da06:	68fb      	ldr	r3, [r7, #12]
 800da08:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800da0a:	68fb      	ldr	r3, [r7, #12]
 800da0c:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800da0e:	68fb      	ldr	r3, [r7, #12]
 800da10:	22ff      	movs	r2, #255	; 0xff
 800da12:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800da14:	68fb      	ldr	r3, [r7, #12]
 800da16:	f44f 7206 	mov.w	r2, #536	; 0x218
 800da1a:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800da1c:	68fb      	ldr	r3, [r7, #12]
 800da1e:	2206      	movs	r2, #6
 800da20:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800da24:	68fb      	ldr	r3, [r7, #12]
 800da26:	2206      	movs	r2, #6
 800da28:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800da2a:	68fb      	ldr	r3, [r7, #12]
 800da2c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800da30:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800da32:	68fb      	ldr	r3, [r7, #12]
 800da34:	2201      	movs	r2, #1
 800da36:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800da3a:	4b0d      	ldr	r3, [pc, #52]	; (800da70 <tcp_alloc+0xf8>)
 800da3c:	681a      	ldr	r2, [r3, #0]
 800da3e:	68fb      	ldr	r3, [r7, #12]
 800da40:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800da42:	4b0c      	ldr	r3, [pc, #48]	; (800da74 <tcp_alloc+0xfc>)
 800da44:	781a      	ldrb	r2, [r3, #0]
 800da46:	68fb      	ldr	r3, [r7, #12]
 800da48:	779a      	strb	r2, [r3, #30]
>>>>>>> Stashed changes
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
<<<<<<< Updated upstream
 800da7a:	68fb      	ldr	r3, [r7, #12]
 800da7c:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800da80:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800da84:	68fb      	ldr	r3, [r7, #12]
 800da86:	4a08      	ldr	r2, [pc, #32]	; (800daa8 <tcp_alloc+0x100>)
 800da88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
=======
 800da4a:	68fb      	ldr	r3, [r7, #12]
 800da4c:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800da50:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800da54:	68fb      	ldr	r3, [r7, #12]
 800da56:	4a08      	ldr	r2, [pc, #32]	; (800da78 <tcp_alloc+0x100>)
 800da58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
>>>>>>> Stashed changes
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
<<<<<<< Updated upstream
 800da8c:	68fb      	ldr	r3, [r7, #12]
 800da8e:	4a07      	ldr	r2, [pc, #28]	; (800daac <tcp_alloc+0x104>)
 800da90:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
=======
 800da5c:	68fb      	ldr	r3, [r7, #12]
 800da5e:	4a07      	ldr	r2, [pc, #28]	; (800da7c <tcp_alloc+0x104>)
 800da60:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
>>>>>>> Stashed changes
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
<<<<<<< Updated upstream
 800da94:	68fb      	ldr	r3, [r7, #12]
}
 800da96:	4618      	mov	r0, r3
 800da98:	3710      	adds	r7, #16
 800da9a:	46bd      	mov	sp, r7
 800da9c:	bd80      	pop	{r7, pc}
 800da9e:	bf00      	nop
 800daa0:	200072a4 	.word	0x200072a4
 800daa4:	200000e6 	.word	0x200000e6
 800daa8:	0800d761 	.word	0x0800d761
 800daac:	006ddd00 	.word	0x006ddd00

0800dab0 <tcp_pcb_purge>:
=======
 800da64:	68fb      	ldr	r3, [r7, #12]
}
 800da66:	4618      	mov	r0, r3
 800da68:	3710      	adds	r7, #16
 800da6a:	46bd      	mov	sp, r7
 800da6c:	bd80      	pop	{r7, pc}
 800da6e:	bf00      	nop
 800da70:	200072a4 	.word	0x200072a4
 800da74:	200000e6 	.word	0x200000e6
 800da78:	0800d731 	.word	0x0800d731
 800da7c:	006ddd00 	.word	0x006ddd00

0800da80 <tcp_pcb_purge>:
>>>>>>> Stashed changes
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
<<<<<<< Updated upstream
 800dab0:	b580      	push	{r7, lr}
 800dab2:	b082      	sub	sp, #8
 800dab4:	af00      	add	r7, sp, #0
 800dab6:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	2b00      	cmp	r3, #0
 800dabc:	d107      	bne.n	800dace <tcp_pcb_purge+0x1e>
 800dabe:	4b21      	ldr	r3, [pc, #132]	; (800db44 <tcp_pcb_purge+0x94>)
 800dac0:	f640 0251 	movw	r2, #2129	; 0x851
 800dac4:	4920      	ldr	r1, [pc, #128]	; (800db48 <tcp_pcb_purge+0x98>)
 800dac6:	4821      	ldr	r0, [pc, #132]	; (800db4c <tcp_pcb_purge+0x9c>)
 800dac8:	f006 fd5c 	bl	8014584 <iprintf>
 800dacc:	e037      	b.n	800db3e <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	7d1b      	ldrb	r3, [r3, #20]
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	d033      	beq.n	800db3e <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800dada:	2b0a      	cmp	r3, #10
 800dadc:	d02f      	beq.n	800db3e <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800dae2:	2b01      	cmp	r3, #1
 800dae4:	d02b      	beq.n	800db3e <tcp_pcb_purge+0x8e>
=======
 800da80:	b580      	push	{r7, lr}
 800da82:	b082      	sub	sp, #8
 800da84:	af00      	add	r7, sp, #0
 800da86:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	d107      	bne.n	800da9e <tcp_pcb_purge+0x1e>
 800da8e:	4b21      	ldr	r3, [pc, #132]	; (800db14 <tcp_pcb_purge+0x94>)
 800da90:	f640 0251 	movw	r2, #2129	; 0x851
 800da94:	4920      	ldr	r1, [pc, #128]	; (800db18 <tcp_pcb_purge+0x98>)
 800da96:	4821      	ldr	r0, [pc, #132]	; (800db1c <tcp_pcb_purge+0x9c>)
 800da98:	f006 fd5c 	bl	8014554 <iprintf>
 800da9c:	e037      	b.n	800db0e <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	7d1b      	ldrb	r3, [r3, #20]
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	d033      	beq.n	800db0e <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800daaa:	2b0a      	cmp	r3, #10
 800daac:	d02f      	beq.n	800db0e <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800dab2:	2b01      	cmp	r3, #1
 800dab4:	d02b      	beq.n	800db0e <tcp_pcb_purge+0x8e>
>>>>>>> Stashed changes

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
<<<<<<< Updated upstream
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800daea:	2b00      	cmp	r3, #0
 800daec:	d007      	beq.n	800dafe <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800daf2:	4618      	mov	r0, r3
 800daf4:	f7fe fb7c 	bl	800c1f0 <pbuf_free>
      pcb->refused_data = NULL;
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	2200      	movs	r2, #0
 800dafc:	679a      	str	r2, [r3, #120]	; 0x78
=======
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800daba:	2b00      	cmp	r3, #0
 800dabc:	d007      	beq.n	800dace <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dac2:	4618      	mov	r0, r3
 800dac4:	f7fe fb7c 	bl	800c1c0 <pbuf_free>
      pcb->refused_data = NULL;
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	2200      	movs	r2, #0
 800dacc:	679a      	str	r2, [r3, #120]	; 0x78
>>>>>>> Stashed changes
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
<<<<<<< Updated upstream
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800db02:	2b00      	cmp	r3, #0
 800db04:	d002      	beq.n	800db0c <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800db06:	6878      	ldr	r0, [r7, #4]
 800db08:	f000 f986 	bl	800de18 <tcp_free_ooseq>
=======
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	d002      	beq.n	800dadc <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800dad6:	6878      	ldr	r0, [r7, #4]
 800dad8:	f000 f986 	bl	800dde8 <tcp_free_ooseq>
>>>>>>> Stashed changes
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
<<<<<<< Updated upstream
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800db12:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800db18:	4618      	mov	r0, r3
 800db1a:	f7ff fdc7 	bl	800d6ac <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800db22:	4618      	mov	r0, r3
 800db24:	f7ff fdc2 	bl	800d6ac <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	2200      	movs	r2, #0
 800db2c:	66da      	str	r2, [r3, #108]	; 0x6c
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	2200      	movs	r2, #0
 800db3a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800db3e:	3708      	adds	r7, #8
 800db40:	46bd      	mov	sp, r7
 800db42:	bd80      	pop	{r7, pc}
 800db44:	08016428 	.word	0x08016428
 800db48:	08016a74 	.word	0x08016a74
 800db4c:	0801646c 	.word	0x0801646c

0800db50 <tcp_pcb_remove>:
=======
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dae2:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dae8:	4618      	mov	r0, r3
 800daea:	f7ff fdc7 	bl	800d67c <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800daf2:	4618      	mov	r0, r3
 800daf4:	f7ff fdc2 	bl	800d67c <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	2200      	movs	r2, #0
 800dafc:	66da      	str	r2, [r3, #108]	; 0x6c
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	2200      	movs	r2, #0
 800db0a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800db0e:	3708      	adds	r7, #8
 800db10:	46bd      	mov	sp, r7
 800db12:	bd80      	pop	{r7, pc}
 800db14:	0801640c 	.word	0x0801640c
 800db18:	08016a58 	.word	0x08016a58
 800db1c:	08016450 	.word	0x08016450

0800db20 <tcp_pcb_remove>:
>>>>>>> Stashed changes
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
<<<<<<< Updated upstream
 800db50:	b580      	push	{r7, lr}
 800db52:	b084      	sub	sp, #16
 800db54:	af00      	add	r7, sp, #0
 800db56:	6078      	str	r0, [r7, #4]
 800db58:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800db5a:	683b      	ldr	r3, [r7, #0]
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d106      	bne.n	800db6e <tcp_pcb_remove+0x1e>
 800db60:	4b3e      	ldr	r3, [pc, #248]	; (800dc5c <tcp_pcb_remove+0x10c>)
 800db62:	f640 0283 	movw	r2, #2179	; 0x883
 800db66:	493e      	ldr	r1, [pc, #248]	; (800dc60 <tcp_pcb_remove+0x110>)
 800db68:	483e      	ldr	r0, [pc, #248]	; (800dc64 <tcp_pcb_remove+0x114>)
 800db6a:	f006 fd0b 	bl	8014584 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	2b00      	cmp	r3, #0
 800db72:	d106      	bne.n	800db82 <tcp_pcb_remove+0x32>
 800db74:	4b39      	ldr	r3, [pc, #228]	; (800dc5c <tcp_pcb_remove+0x10c>)
 800db76:	f640 0284 	movw	r2, #2180	; 0x884
 800db7a:	493b      	ldr	r1, [pc, #236]	; (800dc68 <tcp_pcb_remove+0x118>)
 800db7c:	4839      	ldr	r0, [pc, #228]	; (800dc64 <tcp_pcb_remove+0x114>)
 800db7e:	f006 fd01 	bl	8014584 <iprintf>

  TCP_RMV(pcblist, pcb);
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	681b      	ldr	r3, [r3, #0]
 800db86:	683a      	ldr	r2, [r7, #0]
 800db88:	429a      	cmp	r2, r3
 800db8a:	d105      	bne.n	800db98 <tcp_pcb_remove+0x48>
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	681b      	ldr	r3, [r3, #0]
 800db90:	68da      	ldr	r2, [r3, #12]
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	601a      	str	r2, [r3, #0]
 800db96:	e013      	b.n	800dbc0 <tcp_pcb_remove+0x70>
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	681b      	ldr	r3, [r3, #0]
 800db9c:	60fb      	str	r3, [r7, #12]
 800db9e:	e00c      	b.n	800dbba <tcp_pcb_remove+0x6a>
 800dba0:	68fb      	ldr	r3, [r7, #12]
 800dba2:	68db      	ldr	r3, [r3, #12]
 800dba4:	683a      	ldr	r2, [r7, #0]
 800dba6:	429a      	cmp	r2, r3
 800dba8:	d104      	bne.n	800dbb4 <tcp_pcb_remove+0x64>
 800dbaa:	683b      	ldr	r3, [r7, #0]
 800dbac:	68da      	ldr	r2, [r3, #12]
 800dbae:	68fb      	ldr	r3, [r7, #12]
 800dbb0:	60da      	str	r2, [r3, #12]
 800dbb2:	e005      	b.n	800dbc0 <tcp_pcb_remove+0x70>
 800dbb4:	68fb      	ldr	r3, [r7, #12]
 800dbb6:	68db      	ldr	r3, [r3, #12]
 800dbb8:	60fb      	str	r3, [r7, #12]
 800dbba:	68fb      	ldr	r3, [r7, #12]
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	d1ef      	bne.n	800dba0 <tcp_pcb_remove+0x50>
 800dbc0:	683b      	ldr	r3, [r7, #0]
 800dbc2:	2200      	movs	r2, #0
 800dbc4:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800dbc6:	6838      	ldr	r0, [r7, #0]
 800dbc8:	f7ff ff72 	bl	800dab0 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800dbcc:	683b      	ldr	r3, [r7, #0]
 800dbce:	7d1b      	ldrb	r3, [r3, #20]
 800dbd0:	2b0a      	cmp	r3, #10
 800dbd2:	d013      	beq.n	800dbfc <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800dbd4:	683b      	ldr	r3, [r7, #0]
 800dbd6:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800dbd8:	2b01      	cmp	r3, #1
 800dbda:	d00f      	beq.n	800dbfc <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800dbdc:	683b      	ldr	r3, [r7, #0]
 800dbde:	8b5b      	ldrh	r3, [r3, #26]
 800dbe0:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	d009      	beq.n	800dbfc <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800dbe8:	683b      	ldr	r3, [r7, #0]
 800dbea:	8b5b      	ldrh	r3, [r3, #26]
 800dbec:	f043 0302 	orr.w	r3, r3, #2
 800dbf0:	b29a      	uxth	r2, r3
 800dbf2:	683b      	ldr	r3, [r7, #0]
 800dbf4:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800dbf6:	6838      	ldr	r0, [r7, #0]
 800dbf8:	f002 ff6a 	bl	8010ad0 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800dbfc:	683b      	ldr	r3, [r7, #0]
 800dbfe:	7d1b      	ldrb	r3, [r3, #20]
 800dc00:	2b01      	cmp	r3, #1
 800dc02:	d020      	beq.n	800dc46 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800dc04:	683b      	ldr	r3, [r7, #0]
 800dc06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	d006      	beq.n	800dc1a <tcp_pcb_remove+0xca>
 800dc0c:	4b13      	ldr	r3, [pc, #76]	; (800dc5c <tcp_pcb_remove+0x10c>)
 800dc0e:	f640 0293 	movw	r2, #2195	; 0x893
 800dc12:	4916      	ldr	r1, [pc, #88]	; (800dc6c <tcp_pcb_remove+0x11c>)
 800dc14:	4813      	ldr	r0, [pc, #76]	; (800dc64 <tcp_pcb_remove+0x114>)
 800dc16:	f006 fcb5 	bl	8014584 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800dc1a:	683b      	ldr	r3, [r7, #0]
 800dc1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	d006      	beq.n	800dc30 <tcp_pcb_remove+0xe0>
 800dc22:	4b0e      	ldr	r3, [pc, #56]	; (800dc5c <tcp_pcb_remove+0x10c>)
 800dc24:	f640 0294 	movw	r2, #2196	; 0x894
 800dc28:	4911      	ldr	r1, [pc, #68]	; (800dc70 <tcp_pcb_remove+0x120>)
 800dc2a:	480e      	ldr	r0, [pc, #56]	; (800dc64 <tcp_pcb_remove+0x114>)
 800dc2c:	f006 fcaa 	bl	8014584 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800dc30:	683b      	ldr	r3, [r7, #0]
 800dc32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	d006      	beq.n	800dc46 <tcp_pcb_remove+0xf6>
 800dc38:	4b08      	ldr	r3, [pc, #32]	; (800dc5c <tcp_pcb_remove+0x10c>)
 800dc3a:	f640 0296 	movw	r2, #2198	; 0x896
 800dc3e:	490d      	ldr	r1, [pc, #52]	; (800dc74 <tcp_pcb_remove+0x124>)
 800dc40:	4808      	ldr	r0, [pc, #32]	; (800dc64 <tcp_pcb_remove+0x114>)
 800dc42:	f006 fc9f 	bl	8014584 <iprintf>
=======
 800db20:	b580      	push	{r7, lr}
 800db22:	b084      	sub	sp, #16
 800db24:	af00      	add	r7, sp, #0
 800db26:	6078      	str	r0, [r7, #4]
 800db28:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800db2a:	683b      	ldr	r3, [r7, #0]
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	d106      	bne.n	800db3e <tcp_pcb_remove+0x1e>
 800db30:	4b3e      	ldr	r3, [pc, #248]	; (800dc2c <tcp_pcb_remove+0x10c>)
 800db32:	f640 0283 	movw	r2, #2179	; 0x883
 800db36:	493e      	ldr	r1, [pc, #248]	; (800dc30 <tcp_pcb_remove+0x110>)
 800db38:	483e      	ldr	r0, [pc, #248]	; (800dc34 <tcp_pcb_remove+0x114>)
 800db3a:	f006 fd0b 	bl	8014554 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	2b00      	cmp	r3, #0
 800db42:	d106      	bne.n	800db52 <tcp_pcb_remove+0x32>
 800db44:	4b39      	ldr	r3, [pc, #228]	; (800dc2c <tcp_pcb_remove+0x10c>)
 800db46:	f640 0284 	movw	r2, #2180	; 0x884
 800db4a:	493b      	ldr	r1, [pc, #236]	; (800dc38 <tcp_pcb_remove+0x118>)
 800db4c:	4839      	ldr	r0, [pc, #228]	; (800dc34 <tcp_pcb_remove+0x114>)
 800db4e:	f006 fd01 	bl	8014554 <iprintf>

  TCP_RMV(pcblist, pcb);
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	681b      	ldr	r3, [r3, #0]
 800db56:	683a      	ldr	r2, [r7, #0]
 800db58:	429a      	cmp	r2, r3
 800db5a:	d105      	bne.n	800db68 <tcp_pcb_remove+0x48>
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	681b      	ldr	r3, [r3, #0]
 800db60:	68da      	ldr	r2, [r3, #12]
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	601a      	str	r2, [r3, #0]
 800db66:	e013      	b.n	800db90 <tcp_pcb_remove+0x70>
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	681b      	ldr	r3, [r3, #0]
 800db6c:	60fb      	str	r3, [r7, #12]
 800db6e:	e00c      	b.n	800db8a <tcp_pcb_remove+0x6a>
 800db70:	68fb      	ldr	r3, [r7, #12]
 800db72:	68db      	ldr	r3, [r3, #12]
 800db74:	683a      	ldr	r2, [r7, #0]
 800db76:	429a      	cmp	r2, r3
 800db78:	d104      	bne.n	800db84 <tcp_pcb_remove+0x64>
 800db7a:	683b      	ldr	r3, [r7, #0]
 800db7c:	68da      	ldr	r2, [r3, #12]
 800db7e:	68fb      	ldr	r3, [r7, #12]
 800db80:	60da      	str	r2, [r3, #12]
 800db82:	e005      	b.n	800db90 <tcp_pcb_remove+0x70>
 800db84:	68fb      	ldr	r3, [r7, #12]
 800db86:	68db      	ldr	r3, [r3, #12]
 800db88:	60fb      	str	r3, [r7, #12]
 800db8a:	68fb      	ldr	r3, [r7, #12]
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	d1ef      	bne.n	800db70 <tcp_pcb_remove+0x50>
 800db90:	683b      	ldr	r3, [r7, #0]
 800db92:	2200      	movs	r2, #0
 800db94:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800db96:	6838      	ldr	r0, [r7, #0]
 800db98:	f7ff ff72 	bl	800da80 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800db9c:	683b      	ldr	r3, [r7, #0]
 800db9e:	7d1b      	ldrb	r3, [r3, #20]
 800dba0:	2b0a      	cmp	r3, #10
 800dba2:	d013      	beq.n	800dbcc <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800dba4:	683b      	ldr	r3, [r7, #0]
 800dba6:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800dba8:	2b01      	cmp	r3, #1
 800dbaa:	d00f      	beq.n	800dbcc <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800dbac:	683b      	ldr	r3, [r7, #0]
 800dbae:	8b5b      	ldrh	r3, [r3, #26]
 800dbb0:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	d009      	beq.n	800dbcc <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800dbb8:	683b      	ldr	r3, [r7, #0]
 800dbba:	8b5b      	ldrh	r3, [r3, #26]
 800dbbc:	f043 0302 	orr.w	r3, r3, #2
 800dbc0:	b29a      	uxth	r2, r3
 800dbc2:	683b      	ldr	r3, [r7, #0]
 800dbc4:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800dbc6:	6838      	ldr	r0, [r7, #0]
 800dbc8:	f002 ff6a 	bl	8010aa0 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800dbcc:	683b      	ldr	r3, [r7, #0]
 800dbce:	7d1b      	ldrb	r3, [r3, #20]
 800dbd0:	2b01      	cmp	r3, #1
 800dbd2:	d020      	beq.n	800dc16 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800dbd4:	683b      	ldr	r3, [r7, #0]
 800dbd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	d006      	beq.n	800dbea <tcp_pcb_remove+0xca>
 800dbdc:	4b13      	ldr	r3, [pc, #76]	; (800dc2c <tcp_pcb_remove+0x10c>)
 800dbde:	f640 0293 	movw	r2, #2195	; 0x893
 800dbe2:	4916      	ldr	r1, [pc, #88]	; (800dc3c <tcp_pcb_remove+0x11c>)
 800dbe4:	4813      	ldr	r0, [pc, #76]	; (800dc34 <tcp_pcb_remove+0x114>)
 800dbe6:	f006 fcb5 	bl	8014554 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800dbea:	683b      	ldr	r3, [r7, #0]
 800dbec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	d006      	beq.n	800dc00 <tcp_pcb_remove+0xe0>
 800dbf2:	4b0e      	ldr	r3, [pc, #56]	; (800dc2c <tcp_pcb_remove+0x10c>)
 800dbf4:	f640 0294 	movw	r2, #2196	; 0x894
 800dbf8:	4911      	ldr	r1, [pc, #68]	; (800dc40 <tcp_pcb_remove+0x120>)
 800dbfa:	480e      	ldr	r0, [pc, #56]	; (800dc34 <tcp_pcb_remove+0x114>)
 800dbfc:	f006 fcaa 	bl	8014554 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800dc00:	683b      	ldr	r3, [r7, #0]
 800dc02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	d006      	beq.n	800dc16 <tcp_pcb_remove+0xf6>
 800dc08:	4b08      	ldr	r3, [pc, #32]	; (800dc2c <tcp_pcb_remove+0x10c>)
 800dc0a:	f640 0296 	movw	r2, #2198	; 0x896
 800dc0e:	490d      	ldr	r1, [pc, #52]	; (800dc44 <tcp_pcb_remove+0x124>)
 800dc10:	4808      	ldr	r0, [pc, #32]	; (800dc34 <tcp_pcb_remove+0x114>)
 800dc12:	f006 fc9f 	bl	8014554 <iprintf>
>>>>>>> Stashed changes
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
<<<<<<< Updated upstream
 800dc46:	683b      	ldr	r3, [r7, #0]
 800dc48:	2200      	movs	r2, #0
 800dc4a:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800dc4c:	683b      	ldr	r3, [r7, #0]
 800dc4e:	2200      	movs	r2, #0
 800dc50:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800dc52:	bf00      	nop
 800dc54:	3710      	adds	r7, #16
 800dc56:	46bd      	mov	sp, r7
 800dc58:	bd80      	pop	{r7, pc}
 800dc5a:	bf00      	nop
 800dc5c:	08016428 	.word	0x08016428
 800dc60:	08016a90 	.word	0x08016a90
 800dc64:	0801646c 	.word	0x0801646c
 800dc68:	08016aac 	.word	0x08016aac
 800dc6c:	08016acc 	.word	0x08016acc
 800dc70:	08016ae4 	.word	0x08016ae4
 800dc74:	08016b00 	.word	0x08016b00

0800dc78 <tcp_next_iss>:
=======
 800dc16:	683b      	ldr	r3, [r7, #0]
 800dc18:	2200      	movs	r2, #0
 800dc1a:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800dc1c:	683b      	ldr	r3, [r7, #0]
 800dc1e:	2200      	movs	r2, #0
 800dc20:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800dc22:	bf00      	nop
 800dc24:	3710      	adds	r7, #16
 800dc26:	46bd      	mov	sp, r7
 800dc28:	bd80      	pop	{r7, pc}
 800dc2a:	bf00      	nop
 800dc2c:	0801640c 	.word	0x0801640c
 800dc30:	08016a74 	.word	0x08016a74
 800dc34:	08016450 	.word	0x08016450
 800dc38:	08016a90 	.word	0x08016a90
 800dc3c:	08016ab0 	.word	0x08016ab0
 800dc40:	08016ac8 	.word	0x08016ac8
 800dc44:	08016ae4 	.word	0x08016ae4

0800dc48 <tcp_next_iss>:
>>>>>>> Stashed changes
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
<<<<<<< Updated upstream
 800dc78:	b580      	push	{r7, lr}
 800dc7a:	b082      	sub	sp, #8
 800dc7c:	af00      	add	r7, sp, #0
 800dc7e:	6078      	str	r0, [r7, #4]
=======
 800dc48:	b580      	push	{r7, lr}
 800dc4a:	b082      	sub	sp, #8
 800dc4c:	af00      	add	r7, sp, #0
 800dc4e:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
<<<<<<< Updated upstream
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d106      	bne.n	800dc94 <tcp_next_iss+0x1c>
 800dc86:	4b0a      	ldr	r3, [pc, #40]	; (800dcb0 <tcp_next_iss+0x38>)
 800dc88:	f640 02af 	movw	r2, #2223	; 0x8af
 800dc8c:	4909      	ldr	r1, [pc, #36]	; (800dcb4 <tcp_next_iss+0x3c>)
 800dc8e:	480a      	ldr	r0, [pc, #40]	; (800dcb8 <tcp_next_iss+0x40>)
 800dc90:	f006 fc78 	bl	8014584 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800dc94:	4b09      	ldr	r3, [pc, #36]	; (800dcbc <tcp_next_iss+0x44>)
 800dc96:	681a      	ldr	r2, [r3, #0]
 800dc98:	4b09      	ldr	r3, [pc, #36]	; (800dcc0 <tcp_next_iss+0x48>)
 800dc9a:	681b      	ldr	r3, [r3, #0]
 800dc9c:	4413      	add	r3, r2
 800dc9e:	4a07      	ldr	r2, [pc, #28]	; (800dcbc <tcp_next_iss+0x44>)
 800dca0:	6013      	str	r3, [r2, #0]
  return iss;
 800dca2:	4b06      	ldr	r3, [pc, #24]	; (800dcbc <tcp_next_iss+0x44>)
 800dca4:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800dca6:	4618      	mov	r0, r3
 800dca8:	3708      	adds	r7, #8
 800dcaa:	46bd      	mov	sp, r7
 800dcac:	bd80      	pop	{r7, pc}
 800dcae:	bf00      	nop
 800dcb0:	08016428 	.word	0x08016428
 800dcb4:	08016b18 	.word	0x08016b18
 800dcb8:	0801646c 	.word	0x0801646c
 800dcbc:	2000000c 	.word	0x2000000c
 800dcc0:	200072a4 	.word	0x200072a4

0800dcc4 <tcp_eff_send_mss_netif>:
=======
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	2b00      	cmp	r3, #0
 800dc54:	d106      	bne.n	800dc64 <tcp_next_iss+0x1c>
 800dc56:	4b0a      	ldr	r3, [pc, #40]	; (800dc80 <tcp_next_iss+0x38>)
 800dc58:	f640 02af 	movw	r2, #2223	; 0x8af
 800dc5c:	4909      	ldr	r1, [pc, #36]	; (800dc84 <tcp_next_iss+0x3c>)
 800dc5e:	480a      	ldr	r0, [pc, #40]	; (800dc88 <tcp_next_iss+0x40>)
 800dc60:	f006 fc78 	bl	8014554 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800dc64:	4b09      	ldr	r3, [pc, #36]	; (800dc8c <tcp_next_iss+0x44>)
 800dc66:	681a      	ldr	r2, [r3, #0]
 800dc68:	4b09      	ldr	r3, [pc, #36]	; (800dc90 <tcp_next_iss+0x48>)
 800dc6a:	681b      	ldr	r3, [r3, #0]
 800dc6c:	4413      	add	r3, r2
 800dc6e:	4a07      	ldr	r2, [pc, #28]	; (800dc8c <tcp_next_iss+0x44>)
 800dc70:	6013      	str	r3, [r2, #0]
  return iss;
 800dc72:	4b06      	ldr	r3, [pc, #24]	; (800dc8c <tcp_next_iss+0x44>)
 800dc74:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800dc76:	4618      	mov	r0, r3
 800dc78:	3708      	adds	r7, #8
 800dc7a:	46bd      	mov	sp, r7
 800dc7c:	bd80      	pop	{r7, pc}
 800dc7e:	bf00      	nop
 800dc80:	0801640c 	.word	0x0801640c
 800dc84:	08016afc 	.word	0x08016afc
 800dc88:	08016450 	.word	0x08016450
 800dc8c:	2000000c 	.word	0x2000000c
 800dc90:	200072a4 	.word	0x200072a4

0800dc94 <tcp_eff_send_mss_netif>:
>>>>>>> Stashed changes
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
<<<<<<< Updated upstream
 800dcc4:	b580      	push	{r7, lr}
 800dcc6:	b086      	sub	sp, #24
 800dcc8:	af00      	add	r7, sp, #0
 800dcca:	4603      	mov	r3, r0
 800dccc:	60b9      	str	r1, [r7, #8]
 800dcce:	607a      	str	r2, [r7, #4]
 800dcd0:	81fb      	strh	r3, [r7, #14]
=======
 800dc94:	b580      	push	{r7, lr}
 800dc96:	b086      	sub	sp, #24
 800dc98:	af00      	add	r7, sp, #0
 800dc9a:	4603      	mov	r3, r0
 800dc9c:	60b9      	str	r1, [r7, #8]
 800dc9e:	607a      	str	r2, [r7, #4]
 800dca0:	81fb      	strh	r3, [r7, #14]
>>>>>>> Stashed changes
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
<<<<<<< Updated upstream
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	2b00      	cmp	r3, #0
 800dcd6:	d106      	bne.n	800dce6 <tcp_eff_send_mss_netif+0x22>
 800dcd8:	4b14      	ldr	r3, [pc, #80]	; (800dd2c <tcp_eff_send_mss_netif+0x68>)
 800dcda:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800dcde:	4914      	ldr	r1, [pc, #80]	; (800dd30 <tcp_eff_send_mss_netif+0x6c>)
 800dce0:	4814      	ldr	r0, [pc, #80]	; (800dd34 <tcp_eff_send_mss_netif+0x70>)
 800dce2:	f006 fc4f 	bl	8014584 <iprintf>
=======
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	d106      	bne.n	800dcb6 <tcp_eff_send_mss_netif+0x22>
 800dca8:	4b14      	ldr	r3, [pc, #80]	; (800dcfc <tcp_eff_send_mss_netif+0x68>)
 800dcaa:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800dcae:	4914      	ldr	r1, [pc, #80]	; (800dd00 <tcp_eff_send_mss_netif+0x6c>)
 800dcb0:	4814      	ldr	r0, [pc, #80]	; (800dd04 <tcp_eff_send_mss_netif+0x70>)
 800dcb2:	f006 fc4f 	bl	8014554 <iprintf>
>>>>>>> Stashed changes
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
<<<<<<< Updated upstream
 800dce6:	68bb      	ldr	r3, [r7, #8]
 800dce8:	2b00      	cmp	r3, #0
 800dcea:	d101      	bne.n	800dcf0 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800dcec:	89fb      	ldrh	r3, [r7, #14]
 800dcee:	e019      	b.n	800dd24 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800dcf0:	68bb      	ldr	r3, [r7, #8]
 800dcf2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800dcf4:	82fb      	strh	r3, [r7, #22]
=======
 800dcb6:	68bb      	ldr	r3, [r7, #8]
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d101      	bne.n	800dcc0 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800dcbc:	89fb      	ldrh	r3, [r7, #14]
 800dcbe:	e019      	b.n	800dcf4 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800dcc0:	68bb      	ldr	r3, [r7, #8]
 800dcc2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800dcc4:	82fb      	strh	r3, [r7, #22]
>>>>>>> Stashed changes
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
<<<<<<< Updated upstream
 800dcf6:	8afb      	ldrh	r3, [r7, #22]
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	d012      	beq.n	800dd22 <tcp_eff_send_mss_netif+0x5e>
=======
 800dcc6:	8afb      	ldrh	r3, [r7, #22]
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	d012      	beq.n	800dcf2 <tcp_eff_send_mss_netif+0x5e>
>>>>>>> Stashed changes
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
<<<<<<< Updated upstream
 800dcfc:	2328      	movs	r3, #40	; 0x28
 800dcfe:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800dd00:	8afa      	ldrh	r2, [r7, #22]
 800dd02:	8abb      	ldrh	r3, [r7, #20]
 800dd04:	429a      	cmp	r2, r3
 800dd06:	d904      	bls.n	800dd12 <tcp_eff_send_mss_netif+0x4e>
 800dd08:	8afa      	ldrh	r2, [r7, #22]
 800dd0a:	8abb      	ldrh	r3, [r7, #20]
 800dd0c:	1ad3      	subs	r3, r2, r3
 800dd0e:	b29b      	uxth	r3, r3
 800dd10:	e000      	b.n	800dd14 <tcp_eff_send_mss_netif+0x50>
 800dd12:	2300      	movs	r3, #0
 800dd14:	827b      	strh	r3, [r7, #18]
=======
 800dccc:	2328      	movs	r3, #40	; 0x28
 800dcce:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800dcd0:	8afa      	ldrh	r2, [r7, #22]
 800dcd2:	8abb      	ldrh	r3, [r7, #20]
 800dcd4:	429a      	cmp	r2, r3
 800dcd6:	d904      	bls.n	800dce2 <tcp_eff_send_mss_netif+0x4e>
 800dcd8:	8afa      	ldrh	r2, [r7, #22]
 800dcda:	8abb      	ldrh	r3, [r7, #20]
 800dcdc:	1ad3      	subs	r3, r2, r3
 800dcde:	b29b      	uxth	r3, r3
 800dce0:	e000      	b.n	800dce4 <tcp_eff_send_mss_netif+0x50>
 800dce2:	2300      	movs	r3, #0
 800dce4:	827b      	strh	r3, [r7, #18]
>>>>>>> Stashed changes
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
<<<<<<< Updated upstream
 800dd16:	8a7a      	ldrh	r2, [r7, #18]
 800dd18:	89fb      	ldrh	r3, [r7, #14]
 800dd1a:	4293      	cmp	r3, r2
 800dd1c:	bf28      	it	cs
 800dd1e:	4613      	movcs	r3, r2
 800dd20:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800dd22:	89fb      	ldrh	r3, [r7, #14]
}
 800dd24:	4618      	mov	r0, r3
 800dd26:	3718      	adds	r7, #24
 800dd28:	46bd      	mov	sp, r7
 800dd2a:	bd80      	pop	{r7, pc}
 800dd2c:	08016428 	.word	0x08016428
 800dd30:	08016b34 	.word	0x08016b34
 800dd34:	0801646c 	.word	0x0801646c

0800dd38 <tcp_netif_ip_addr_changed_pcblist>:
=======
 800dce6:	8a7a      	ldrh	r2, [r7, #18]
 800dce8:	89fb      	ldrh	r3, [r7, #14]
 800dcea:	4293      	cmp	r3, r2
 800dcec:	bf28      	it	cs
 800dcee:	4613      	movcs	r3, r2
 800dcf0:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800dcf2:	89fb      	ldrh	r3, [r7, #14]
}
 800dcf4:	4618      	mov	r0, r3
 800dcf6:	3718      	adds	r7, #24
 800dcf8:	46bd      	mov	sp, r7
 800dcfa:	bd80      	pop	{r7, pc}
 800dcfc:	0801640c 	.word	0x0801640c
 800dd00:	08016b18 	.word	0x08016b18
 800dd04:	08016450 	.word	0x08016450

0800dd08 <tcp_netif_ip_addr_changed_pcblist>:
>>>>>>> Stashed changes
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
<<<<<<< Updated upstream
 800dd38:	b580      	push	{r7, lr}
 800dd3a:	b084      	sub	sp, #16
 800dd3c:	af00      	add	r7, sp, #0
 800dd3e:	6078      	str	r0, [r7, #4]
 800dd40:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800dd42:	683b      	ldr	r3, [r7, #0]
 800dd44:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	d119      	bne.n	800dd80 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800dd4c:	4b10      	ldr	r3, [pc, #64]	; (800dd90 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800dd4e:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800dd52:	4910      	ldr	r1, [pc, #64]	; (800dd94 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800dd54:	4810      	ldr	r0, [pc, #64]	; (800dd98 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800dd56:	f006 fc15 	bl	8014584 <iprintf>

  while (pcb != NULL) {
 800dd5a:	e011      	b.n	800dd80 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800dd5c:	68fb      	ldr	r3, [r7, #12]
 800dd5e:	681a      	ldr	r2, [r3, #0]
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	681b      	ldr	r3, [r3, #0]
 800dd64:	429a      	cmp	r2, r3
 800dd66:	d108      	bne.n	800dd7a <tcp_netif_ip_addr_changed_pcblist+0x42>
=======
 800dd08:	b580      	push	{r7, lr}
 800dd0a:	b084      	sub	sp, #16
 800dd0c:	af00      	add	r7, sp, #0
 800dd0e:	6078      	str	r0, [r7, #4]
 800dd10:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800dd12:	683b      	ldr	r3, [r7, #0]
 800dd14:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	d119      	bne.n	800dd50 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800dd1c:	4b10      	ldr	r3, [pc, #64]	; (800dd60 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800dd1e:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800dd22:	4910      	ldr	r1, [pc, #64]	; (800dd64 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800dd24:	4810      	ldr	r0, [pc, #64]	; (800dd68 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800dd26:	f006 fc15 	bl	8014554 <iprintf>

  while (pcb != NULL) {
 800dd2a:	e011      	b.n	800dd50 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800dd2c:	68fb      	ldr	r3, [r7, #12]
 800dd2e:	681a      	ldr	r2, [r3, #0]
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	681b      	ldr	r3, [r3, #0]
 800dd34:	429a      	cmp	r2, r3
 800dd36:	d108      	bne.n	800dd4a <tcp_netif_ip_addr_changed_pcblist+0x42>
>>>>>>> Stashed changes
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
<<<<<<< Updated upstream
 800dd68:	68fb      	ldr	r3, [r7, #12]
 800dd6a:	68db      	ldr	r3, [r3, #12]
 800dd6c:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800dd6e:	68f8      	ldr	r0, [r7, #12]
 800dd70:	f7fe ffc6 	bl	800cd00 <tcp_abort>
      pcb = next;
 800dd74:	68bb      	ldr	r3, [r7, #8]
 800dd76:	60fb      	str	r3, [r7, #12]
 800dd78:	e002      	b.n	800dd80 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800dd7a:	68fb      	ldr	r3, [r7, #12]
 800dd7c:	68db      	ldr	r3, [r3, #12]
 800dd7e:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800dd80:	68fb      	ldr	r3, [r7, #12]
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	d1ea      	bne.n	800dd5c <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800dd86:	bf00      	nop
 800dd88:	bf00      	nop
 800dd8a:	3710      	adds	r7, #16
 800dd8c:	46bd      	mov	sp, r7
 800dd8e:	bd80      	pop	{r7, pc}
 800dd90:	08016428 	.word	0x08016428
 800dd94:	08016b5c 	.word	0x08016b5c
 800dd98:	0801646c 	.word	0x0801646c

0800dd9c <tcp_netif_ip_addr_changed>:
=======
 800dd38:	68fb      	ldr	r3, [r7, #12]
 800dd3a:	68db      	ldr	r3, [r3, #12]
 800dd3c:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800dd3e:	68f8      	ldr	r0, [r7, #12]
 800dd40:	f7fe ffc6 	bl	800ccd0 <tcp_abort>
      pcb = next;
 800dd44:	68bb      	ldr	r3, [r7, #8]
 800dd46:	60fb      	str	r3, [r7, #12]
 800dd48:	e002      	b.n	800dd50 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800dd4a:	68fb      	ldr	r3, [r7, #12]
 800dd4c:	68db      	ldr	r3, [r3, #12]
 800dd4e:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800dd50:	68fb      	ldr	r3, [r7, #12]
 800dd52:	2b00      	cmp	r3, #0
 800dd54:	d1ea      	bne.n	800dd2c <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800dd56:	bf00      	nop
 800dd58:	bf00      	nop
 800dd5a:	3710      	adds	r7, #16
 800dd5c:	46bd      	mov	sp, r7
 800dd5e:	bd80      	pop	{r7, pc}
 800dd60:	0801640c 	.word	0x0801640c
 800dd64:	08016b40 	.word	0x08016b40
 800dd68:	08016450 	.word	0x08016450

0800dd6c <tcp_netif_ip_addr_changed>:
>>>>>>> Stashed changes
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
<<<<<<< Updated upstream
 800dd9c:	b580      	push	{r7, lr}
 800dd9e:	b084      	sub	sp, #16
 800dda0:	af00      	add	r7, sp, #0
 800dda2:	6078      	str	r0, [r7, #4]
 800dda4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	2b00      	cmp	r3, #0
 800ddaa:	d02a      	beq.n	800de02 <tcp_netif_ip_addr_changed+0x66>
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	681b      	ldr	r3, [r3, #0]
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	d026      	beq.n	800de02 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800ddb4:	4b15      	ldr	r3, [pc, #84]	; (800de0c <tcp_netif_ip_addr_changed+0x70>)
 800ddb6:	681b      	ldr	r3, [r3, #0]
 800ddb8:	4619      	mov	r1, r3
 800ddba:	6878      	ldr	r0, [r7, #4]
 800ddbc:	f7ff ffbc 	bl	800dd38 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800ddc0:	4b13      	ldr	r3, [pc, #76]	; (800de10 <tcp_netif_ip_addr_changed+0x74>)
 800ddc2:	681b      	ldr	r3, [r3, #0]
 800ddc4:	4619      	mov	r1, r3
 800ddc6:	6878      	ldr	r0, [r7, #4]
 800ddc8:	f7ff ffb6 	bl	800dd38 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800ddcc:	683b      	ldr	r3, [r7, #0]
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	d017      	beq.n	800de02 <tcp_netif_ip_addr_changed+0x66>
 800ddd2:	683b      	ldr	r3, [r7, #0]
 800ddd4:	681b      	ldr	r3, [r3, #0]
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	d013      	beq.n	800de02 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800ddda:	4b0e      	ldr	r3, [pc, #56]	; (800de14 <tcp_netif_ip_addr_changed+0x78>)
 800dddc:	681b      	ldr	r3, [r3, #0]
 800ddde:	60fb      	str	r3, [r7, #12]
 800dde0:	e00c      	b.n	800ddfc <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800dde2:	68fb      	ldr	r3, [r7, #12]
 800dde4:	681a      	ldr	r2, [r3, #0]
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	681b      	ldr	r3, [r3, #0]
 800ddea:	429a      	cmp	r2, r3
 800ddec:	d103      	bne.n	800ddf6 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800ddee:	683b      	ldr	r3, [r7, #0]
 800ddf0:	681a      	ldr	r2, [r3, #0]
 800ddf2:	68fb      	ldr	r3, [r7, #12]
 800ddf4:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800ddf6:	68fb      	ldr	r3, [r7, #12]
 800ddf8:	68db      	ldr	r3, [r3, #12]
 800ddfa:	60fb      	str	r3, [r7, #12]
 800ddfc:	68fb      	ldr	r3, [r7, #12]
 800ddfe:	2b00      	cmp	r3, #0
 800de00:	d1ef      	bne.n	800dde2 <tcp_netif_ip_addr_changed+0x46>
=======
 800dd6c:	b580      	push	{r7, lr}
 800dd6e:	b084      	sub	sp, #16
 800dd70:	af00      	add	r7, sp, #0
 800dd72:	6078      	str	r0, [r7, #4]
 800dd74:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	d02a      	beq.n	800ddd2 <tcp_netif_ip_addr_changed+0x66>
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	681b      	ldr	r3, [r3, #0]
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	d026      	beq.n	800ddd2 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800dd84:	4b15      	ldr	r3, [pc, #84]	; (800dddc <tcp_netif_ip_addr_changed+0x70>)
 800dd86:	681b      	ldr	r3, [r3, #0]
 800dd88:	4619      	mov	r1, r3
 800dd8a:	6878      	ldr	r0, [r7, #4]
 800dd8c:	f7ff ffbc 	bl	800dd08 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800dd90:	4b13      	ldr	r3, [pc, #76]	; (800dde0 <tcp_netif_ip_addr_changed+0x74>)
 800dd92:	681b      	ldr	r3, [r3, #0]
 800dd94:	4619      	mov	r1, r3
 800dd96:	6878      	ldr	r0, [r7, #4]
 800dd98:	f7ff ffb6 	bl	800dd08 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800dd9c:	683b      	ldr	r3, [r7, #0]
 800dd9e:	2b00      	cmp	r3, #0
 800dda0:	d017      	beq.n	800ddd2 <tcp_netif_ip_addr_changed+0x66>
 800dda2:	683b      	ldr	r3, [r7, #0]
 800dda4:	681b      	ldr	r3, [r3, #0]
 800dda6:	2b00      	cmp	r3, #0
 800dda8:	d013      	beq.n	800ddd2 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800ddaa:	4b0e      	ldr	r3, [pc, #56]	; (800dde4 <tcp_netif_ip_addr_changed+0x78>)
 800ddac:	681b      	ldr	r3, [r3, #0]
 800ddae:	60fb      	str	r3, [r7, #12]
 800ddb0:	e00c      	b.n	800ddcc <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800ddb2:	68fb      	ldr	r3, [r7, #12]
 800ddb4:	681a      	ldr	r2, [r3, #0]
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	681b      	ldr	r3, [r3, #0]
 800ddba:	429a      	cmp	r2, r3
 800ddbc:	d103      	bne.n	800ddc6 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800ddbe:	683b      	ldr	r3, [r7, #0]
 800ddc0:	681a      	ldr	r2, [r3, #0]
 800ddc2:	68fb      	ldr	r3, [r7, #12]
 800ddc4:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800ddc6:	68fb      	ldr	r3, [r7, #12]
 800ddc8:	68db      	ldr	r3, [r3, #12]
 800ddca:	60fb      	str	r3, [r7, #12]
 800ddcc:	68fb      	ldr	r3, [r7, #12]
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	d1ef      	bne.n	800ddb2 <tcp_netif_ip_addr_changed+0x46>
>>>>>>> Stashed changes
        }
      }
    }
  }
}
<<<<<<< Updated upstream
 800de02:	bf00      	nop
 800de04:	3710      	adds	r7, #16
 800de06:	46bd      	mov	sp, r7
 800de08:	bd80      	pop	{r7, pc}
 800de0a:	bf00      	nop
 800de0c:	200072a0 	.word	0x200072a0
 800de10:	200072ac 	.word	0x200072ac
 800de14:	200072a8 	.word	0x200072a8

0800de18 <tcp_free_ooseq>:
=======
 800ddd2:	bf00      	nop
 800ddd4:	3710      	adds	r7, #16
 800ddd6:	46bd      	mov	sp, r7
 800ddd8:	bd80      	pop	{r7, pc}
 800ddda:	bf00      	nop
 800dddc:	200072a0 	.word	0x200072a0
 800dde0:	200072ac 	.word	0x200072ac
 800dde4:	200072a8 	.word	0x200072a8

0800dde8 <tcp_free_ooseq>:
>>>>>>> Stashed changes

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
<<<<<<< Updated upstream
 800de18:	b580      	push	{r7, lr}
 800de1a:	b082      	sub	sp, #8
 800de1c:	af00      	add	r7, sp, #0
 800de1e:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800de24:	2b00      	cmp	r3, #0
 800de26:	d007      	beq.n	800de38 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800de2c:	4618      	mov	r0, r3
 800de2e:	f7ff fc3d 	bl	800d6ac <tcp_segs_free>
    pcb->ooseq = NULL;
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	2200      	movs	r2, #0
 800de36:	675a      	str	r2, [r3, #116]	; 0x74
=======
 800dde8:	b580      	push	{r7, lr}
 800ddea:	b082      	sub	sp, #8
 800ddec:	af00      	add	r7, sp, #0
 800ddee:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	d007      	beq.n	800de08 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ddfc:	4618      	mov	r0, r3
 800ddfe:	f7ff fc3d 	bl	800d67c <tcp_segs_free>
    pcb->ooseq = NULL;
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	2200      	movs	r2, #0
 800de06:	675a      	str	r2, [r3, #116]	; 0x74
>>>>>>> Stashed changes
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
<<<<<<< Updated upstream
 800de38:	bf00      	nop
 800de3a:	3708      	adds	r7, #8
 800de3c:	46bd      	mov	sp, r7
 800de3e:	bd80      	pop	{r7, pc}

0800de40 <tcp_input>:
=======
 800de08:	bf00      	nop
 800de0a:	3708      	adds	r7, #8
 800de0c:	46bd      	mov	sp, r7
 800de0e:	bd80      	pop	{r7, pc}

0800de10 <tcp_input>:
>>>>>>> Stashed changes
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
<<<<<<< Updated upstream
 800de40:	b590      	push	{r4, r7, lr}
 800de42:	b08d      	sub	sp, #52	; 0x34
 800de44:	af04      	add	r7, sp, #16
 800de46:	6078      	str	r0, [r7, #4]
 800de48:	6039      	str	r1, [r7, #0]
=======
 800de10:	b590      	push	{r4, r7, lr}
 800de12:	b08d      	sub	sp, #52	; 0x34
 800de14:	af04      	add	r7, sp, #16
 800de16:	6078      	str	r0, [r7, #4]
 800de18:	6039      	str	r1, [r7, #0]
>>>>>>> Stashed changes
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
<<<<<<< Updated upstream
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	d105      	bne.n	800de5c <tcp_input+0x1c>
 800de50:	4b9b      	ldr	r3, [pc, #620]	; (800e0c0 <tcp_input+0x280>)
 800de52:	2283      	movs	r2, #131	; 0x83
 800de54:	499b      	ldr	r1, [pc, #620]	; (800e0c4 <tcp_input+0x284>)
 800de56:	489c      	ldr	r0, [pc, #624]	; (800e0c8 <tcp_input+0x288>)
 800de58:	f006 fb94 	bl	8014584 <iprintf>
=======
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	d105      	bne.n	800de2c <tcp_input+0x1c>
 800de20:	4b9b      	ldr	r3, [pc, #620]	; (800e090 <tcp_input+0x280>)
 800de22:	2283      	movs	r2, #131	; 0x83
 800de24:	499b      	ldr	r1, [pc, #620]	; (800e094 <tcp_input+0x284>)
 800de26:	489c      	ldr	r0, [pc, #624]	; (800e098 <tcp_input+0x288>)
 800de28:	f006 fb94 	bl	8014554 <iprintf>
>>>>>>> Stashed changes
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
<<<<<<< Updated upstream
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	685b      	ldr	r3, [r3, #4]
 800de60:	4a9a      	ldr	r2, [pc, #616]	; (800e0cc <tcp_input+0x28c>)
 800de62:	6013      	str	r3, [r2, #0]
=======
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	685b      	ldr	r3, [r3, #4]
 800de30:	4a9a      	ldr	r2, [pc, #616]	; (800e09c <tcp_input+0x28c>)
 800de32:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
<<<<<<< Updated upstream
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	895b      	ldrh	r3, [r3, #10]
 800de68:	2b13      	cmp	r3, #19
 800de6a:	f240 83c4 	bls.w	800e5f6 <tcp_input+0x7b6>
=======
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	895b      	ldrh	r3, [r3, #10]
 800de38:	2b13      	cmp	r3, #19
 800de3a:	f240 83c4 	bls.w	800e5c6 <tcp_input+0x7b6>
>>>>>>> Stashed changes
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
<<<<<<< Updated upstream
 800de6e:	4b98      	ldr	r3, [pc, #608]	; (800e0d0 <tcp_input+0x290>)
 800de70:	695b      	ldr	r3, [r3, #20]
 800de72:	4a97      	ldr	r2, [pc, #604]	; (800e0d0 <tcp_input+0x290>)
 800de74:	6812      	ldr	r2, [r2, #0]
 800de76:	4611      	mov	r1, r2
 800de78:	4618      	mov	r0, r3
 800de7a:	f005 fbd1 	bl	8013620 <ip4_addr_isbroadcast_u32>
 800de7e:	4603      	mov	r3, r0
 800de80:	2b00      	cmp	r3, #0
 800de82:	f040 83ba 	bne.w	800e5fa <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800de86:	4b92      	ldr	r3, [pc, #584]	; (800e0d0 <tcp_input+0x290>)
 800de88:	695b      	ldr	r3, [r3, #20]
 800de8a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800de8e:	2be0      	cmp	r3, #224	; 0xe0
 800de90:	f000 83b3 	beq.w	800e5fa <tcp_input+0x7ba>
=======
 800de3e:	4b98      	ldr	r3, [pc, #608]	; (800e0a0 <tcp_input+0x290>)
 800de40:	695b      	ldr	r3, [r3, #20]
 800de42:	4a97      	ldr	r2, [pc, #604]	; (800e0a0 <tcp_input+0x290>)
 800de44:	6812      	ldr	r2, [r2, #0]
 800de46:	4611      	mov	r1, r2
 800de48:	4618      	mov	r0, r3
 800de4a:	f005 fbd1 	bl	80135f0 <ip4_addr_isbroadcast_u32>
 800de4e:	4603      	mov	r3, r0
 800de50:	2b00      	cmp	r3, #0
 800de52:	f040 83ba 	bne.w	800e5ca <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800de56:	4b92      	ldr	r3, [pc, #584]	; (800e0a0 <tcp_input+0x290>)
 800de58:	695b      	ldr	r3, [r3, #20]
 800de5a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800de5e:	2be0      	cmp	r3, #224	; 0xe0
 800de60:	f000 83b3 	beq.w	800e5ca <tcp_input+0x7ba>
>>>>>>> Stashed changes
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
<<<<<<< Updated upstream
 800de94:	4b8d      	ldr	r3, [pc, #564]	; (800e0cc <tcp_input+0x28c>)
 800de96:	681b      	ldr	r3, [r3, #0]
 800de98:	899b      	ldrh	r3, [r3, #12]
 800de9a:	b29b      	uxth	r3, r3
 800de9c:	4618      	mov	r0, r3
 800de9e:	f7fc ff14 	bl	800acca <lwip_htons>
 800dea2:	4603      	mov	r3, r0
 800dea4:	0b1b      	lsrs	r3, r3, #12
 800dea6:	b29b      	uxth	r3, r3
 800dea8:	b2db      	uxtb	r3, r3
 800deaa:	009b      	lsls	r3, r3, #2
 800deac:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800deae:	7cbb      	ldrb	r3, [r7, #18]
 800deb0:	2b13      	cmp	r3, #19
 800deb2:	f240 83a4 	bls.w	800e5fe <tcp_input+0x7be>
 800deb6:	7cbb      	ldrb	r3, [r7, #18]
 800deb8:	b29a      	uxth	r2, r3
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	891b      	ldrh	r3, [r3, #8]
 800debe:	429a      	cmp	r2, r3
 800dec0:	f200 839d 	bhi.w	800e5fe <tcp_input+0x7be>
=======
 800de64:	4b8d      	ldr	r3, [pc, #564]	; (800e09c <tcp_input+0x28c>)
 800de66:	681b      	ldr	r3, [r3, #0]
 800de68:	899b      	ldrh	r3, [r3, #12]
 800de6a:	b29b      	uxth	r3, r3
 800de6c:	4618      	mov	r0, r3
 800de6e:	f7fc ff14 	bl	800ac9a <lwip_htons>
 800de72:	4603      	mov	r3, r0
 800de74:	0b1b      	lsrs	r3, r3, #12
 800de76:	b29b      	uxth	r3, r3
 800de78:	b2db      	uxtb	r3, r3
 800de7a:	009b      	lsls	r3, r3, #2
 800de7c:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800de7e:	7cbb      	ldrb	r3, [r7, #18]
 800de80:	2b13      	cmp	r3, #19
 800de82:	f240 83a4 	bls.w	800e5ce <tcp_input+0x7be>
 800de86:	7cbb      	ldrb	r3, [r7, #18]
 800de88:	b29a      	uxth	r2, r3
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	891b      	ldrh	r3, [r3, #8]
 800de8e:	429a      	cmp	r2, r3
 800de90:	f200 839d 	bhi.w	800e5ce <tcp_input+0x7be>
>>>>>>> Stashed changes
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
<<<<<<< Updated upstream
 800dec4:	7cbb      	ldrb	r3, [r7, #18]
 800dec6:	b29b      	uxth	r3, r3
 800dec8:	3b14      	subs	r3, #20
 800deca:	b29a      	uxth	r2, r3
 800decc:	4b81      	ldr	r3, [pc, #516]	; (800e0d4 <tcp_input+0x294>)
 800dece:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800ded0:	4b81      	ldr	r3, [pc, #516]	; (800e0d8 <tcp_input+0x298>)
 800ded2:	2200      	movs	r2, #0
 800ded4:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	895a      	ldrh	r2, [r3, #10]
 800deda:	7cbb      	ldrb	r3, [r7, #18]
 800dedc:	b29b      	uxth	r3, r3
 800dede:	429a      	cmp	r2, r3
 800dee0:	d309      	bcc.n	800def6 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800dee2:	4b7c      	ldr	r3, [pc, #496]	; (800e0d4 <tcp_input+0x294>)
 800dee4:	881a      	ldrh	r2, [r3, #0]
 800dee6:	4b7d      	ldr	r3, [pc, #500]	; (800e0dc <tcp_input+0x29c>)
 800dee8:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800deea:	7cbb      	ldrb	r3, [r7, #18]
 800deec:	4619      	mov	r1, r3
 800deee:	6878      	ldr	r0, [r7, #4]
 800def0:	f7fe f8f8 	bl	800c0e4 <pbuf_remove_header>
 800def4:	e04e      	b.n	800df94 <tcp_input+0x154>
=======
 800de94:	7cbb      	ldrb	r3, [r7, #18]
 800de96:	b29b      	uxth	r3, r3
 800de98:	3b14      	subs	r3, #20
 800de9a:	b29a      	uxth	r2, r3
 800de9c:	4b81      	ldr	r3, [pc, #516]	; (800e0a4 <tcp_input+0x294>)
 800de9e:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800dea0:	4b81      	ldr	r3, [pc, #516]	; (800e0a8 <tcp_input+0x298>)
 800dea2:	2200      	movs	r2, #0
 800dea4:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	895a      	ldrh	r2, [r3, #10]
 800deaa:	7cbb      	ldrb	r3, [r7, #18]
 800deac:	b29b      	uxth	r3, r3
 800deae:	429a      	cmp	r2, r3
 800deb0:	d309      	bcc.n	800dec6 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800deb2:	4b7c      	ldr	r3, [pc, #496]	; (800e0a4 <tcp_input+0x294>)
 800deb4:	881a      	ldrh	r2, [r3, #0]
 800deb6:	4b7d      	ldr	r3, [pc, #500]	; (800e0ac <tcp_input+0x29c>)
 800deb8:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800deba:	7cbb      	ldrb	r3, [r7, #18]
 800debc:	4619      	mov	r1, r3
 800debe:	6878      	ldr	r0, [r7, #4]
 800dec0:	f7fe f8f8 	bl	800c0b4 <pbuf_remove_header>
 800dec4:	e04e      	b.n	800df64 <tcp_input+0x154>
>>>>>>> Stashed changes
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
<<<<<<< Updated upstream
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	681b      	ldr	r3, [r3, #0]
 800defa:	2b00      	cmp	r3, #0
 800defc:	d105      	bne.n	800df0a <tcp_input+0xca>
 800defe:	4b70      	ldr	r3, [pc, #448]	; (800e0c0 <tcp_input+0x280>)
 800df00:	22c2      	movs	r2, #194	; 0xc2
 800df02:	4977      	ldr	r1, [pc, #476]	; (800e0e0 <tcp_input+0x2a0>)
 800df04:	4870      	ldr	r0, [pc, #448]	; (800e0c8 <tcp_input+0x288>)
 800df06:	f006 fb3d 	bl	8014584 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800df0a:	2114      	movs	r1, #20
 800df0c:	6878      	ldr	r0, [r7, #4]
 800df0e:	f7fe f8e9 	bl	800c0e4 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	895a      	ldrh	r2, [r3, #10]
 800df16:	4b71      	ldr	r3, [pc, #452]	; (800e0dc <tcp_input+0x29c>)
 800df18:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800df1a:	4b6e      	ldr	r3, [pc, #440]	; (800e0d4 <tcp_input+0x294>)
 800df1c:	881a      	ldrh	r2, [r3, #0]
 800df1e:	4b6f      	ldr	r3, [pc, #444]	; (800e0dc <tcp_input+0x29c>)
 800df20:	881b      	ldrh	r3, [r3, #0]
 800df22:	1ad3      	subs	r3, r2, r3
 800df24:	823b      	strh	r3, [r7, #16]
=======
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	681b      	ldr	r3, [r3, #0]
 800deca:	2b00      	cmp	r3, #0
 800decc:	d105      	bne.n	800deda <tcp_input+0xca>
 800dece:	4b70      	ldr	r3, [pc, #448]	; (800e090 <tcp_input+0x280>)
 800ded0:	22c2      	movs	r2, #194	; 0xc2
 800ded2:	4977      	ldr	r1, [pc, #476]	; (800e0b0 <tcp_input+0x2a0>)
 800ded4:	4870      	ldr	r0, [pc, #448]	; (800e098 <tcp_input+0x288>)
 800ded6:	f006 fb3d 	bl	8014554 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800deda:	2114      	movs	r1, #20
 800dedc:	6878      	ldr	r0, [r7, #4]
 800dede:	f7fe f8e9 	bl	800c0b4 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	895a      	ldrh	r2, [r3, #10]
 800dee6:	4b71      	ldr	r3, [pc, #452]	; (800e0ac <tcp_input+0x29c>)
 800dee8:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800deea:	4b6e      	ldr	r3, [pc, #440]	; (800e0a4 <tcp_input+0x294>)
 800deec:	881a      	ldrh	r2, [r3, #0]
 800deee:	4b6f      	ldr	r3, [pc, #444]	; (800e0ac <tcp_input+0x29c>)
 800def0:	881b      	ldrh	r3, [r3, #0]
 800def2:	1ad3      	subs	r3, r2, r3
 800def4:	823b      	strh	r3, [r7, #16]
>>>>>>> Stashed changes

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
<<<<<<< Updated upstream
 800df26:	4b6d      	ldr	r3, [pc, #436]	; (800e0dc <tcp_input+0x29c>)
 800df28:	881b      	ldrh	r3, [r3, #0]
 800df2a:	4619      	mov	r1, r3
 800df2c:	6878      	ldr	r0, [r7, #4]
 800df2e:	f7fe f8d9 	bl	800c0e4 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	681b      	ldr	r3, [r3, #0]
 800df36:	895b      	ldrh	r3, [r3, #10]
 800df38:	8a3a      	ldrh	r2, [r7, #16]
 800df3a:	429a      	cmp	r2, r3
 800df3c:	f200 8361 	bhi.w	800e602 <tcp_input+0x7c2>
=======
 800def6:	4b6d      	ldr	r3, [pc, #436]	; (800e0ac <tcp_input+0x29c>)
 800def8:	881b      	ldrh	r3, [r3, #0]
 800defa:	4619      	mov	r1, r3
 800defc:	6878      	ldr	r0, [r7, #4]
 800defe:	f7fe f8d9 	bl	800c0b4 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	681b      	ldr	r3, [r3, #0]
 800df06:	895b      	ldrh	r3, [r3, #10]
 800df08:	8a3a      	ldrh	r2, [r7, #16]
 800df0a:	429a      	cmp	r2, r3
 800df0c:	f200 8361 	bhi.w	800e5d2 <tcp_input+0x7c2>
>>>>>>> Stashed changes
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
<<<<<<< Updated upstream
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	681b      	ldr	r3, [r3, #0]
 800df44:	685b      	ldr	r3, [r3, #4]
 800df46:	4a64      	ldr	r2, [pc, #400]	; (800e0d8 <tcp_input+0x298>)
 800df48:	6013      	str	r3, [r2, #0]
=======
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	681b      	ldr	r3, [r3, #0]
 800df14:	685b      	ldr	r3, [r3, #4]
 800df16:	4a64      	ldr	r2, [pc, #400]	; (800e0a8 <tcp_input+0x298>)
 800df18:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
<<<<<<< Updated upstream
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	681b      	ldr	r3, [r3, #0]
 800df4e:	8a3a      	ldrh	r2, [r7, #16]
 800df50:	4611      	mov	r1, r2
 800df52:	4618      	mov	r0, r3
 800df54:	f7fe f8c6 	bl	800c0e4 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	891a      	ldrh	r2, [r3, #8]
 800df5c:	8a3b      	ldrh	r3, [r7, #16]
 800df5e:	1ad3      	subs	r3, r2, r3
 800df60:	b29a      	uxth	r2, r3
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	895b      	ldrh	r3, [r3, #10]
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	d005      	beq.n	800df7a <tcp_input+0x13a>
 800df6e:	4b54      	ldr	r3, [pc, #336]	; (800e0c0 <tcp_input+0x280>)
 800df70:	22df      	movs	r2, #223	; 0xdf
 800df72:	495c      	ldr	r1, [pc, #368]	; (800e0e4 <tcp_input+0x2a4>)
 800df74:	4854      	ldr	r0, [pc, #336]	; (800e0c8 <tcp_input+0x288>)
 800df76:	f006 fb05 	bl	8014584 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	891a      	ldrh	r2, [r3, #8]
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	681b      	ldr	r3, [r3, #0]
 800df82:	891b      	ldrh	r3, [r3, #8]
 800df84:	429a      	cmp	r2, r3
 800df86:	d005      	beq.n	800df94 <tcp_input+0x154>
 800df88:	4b4d      	ldr	r3, [pc, #308]	; (800e0c0 <tcp_input+0x280>)
 800df8a:	22e0      	movs	r2, #224	; 0xe0
 800df8c:	4956      	ldr	r1, [pc, #344]	; (800e0e8 <tcp_input+0x2a8>)
 800df8e:	484e      	ldr	r0, [pc, #312]	; (800e0c8 <tcp_input+0x288>)
 800df90:	f006 faf8 	bl	8014584 <iprintf>
=======
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	681b      	ldr	r3, [r3, #0]
 800df1e:	8a3a      	ldrh	r2, [r7, #16]
 800df20:	4611      	mov	r1, r2
 800df22:	4618      	mov	r0, r3
 800df24:	f7fe f8c6 	bl	800c0b4 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	891a      	ldrh	r2, [r3, #8]
 800df2c:	8a3b      	ldrh	r3, [r7, #16]
 800df2e:	1ad3      	subs	r3, r2, r3
 800df30:	b29a      	uxth	r2, r3
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	895b      	ldrh	r3, [r3, #10]
 800df3a:	2b00      	cmp	r3, #0
 800df3c:	d005      	beq.n	800df4a <tcp_input+0x13a>
 800df3e:	4b54      	ldr	r3, [pc, #336]	; (800e090 <tcp_input+0x280>)
 800df40:	22df      	movs	r2, #223	; 0xdf
 800df42:	495c      	ldr	r1, [pc, #368]	; (800e0b4 <tcp_input+0x2a4>)
 800df44:	4854      	ldr	r0, [pc, #336]	; (800e098 <tcp_input+0x288>)
 800df46:	f006 fb05 	bl	8014554 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	891a      	ldrh	r2, [r3, #8]
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	681b      	ldr	r3, [r3, #0]
 800df52:	891b      	ldrh	r3, [r3, #8]
 800df54:	429a      	cmp	r2, r3
 800df56:	d005      	beq.n	800df64 <tcp_input+0x154>
 800df58:	4b4d      	ldr	r3, [pc, #308]	; (800e090 <tcp_input+0x280>)
 800df5a:	22e0      	movs	r2, #224	; 0xe0
 800df5c:	4956      	ldr	r1, [pc, #344]	; (800e0b8 <tcp_input+0x2a8>)
 800df5e:	484e      	ldr	r0, [pc, #312]	; (800e098 <tcp_input+0x288>)
 800df60:	f006 faf8 	bl	8014554 <iprintf>
>>>>>>> Stashed changes
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
<<<<<<< Updated upstream
 800df94:	4b4d      	ldr	r3, [pc, #308]	; (800e0cc <tcp_input+0x28c>)
 800df96:	681b      	ldr	r3, [r3, #0]
 800df98:	881b      	ldrh	r3, [r3, #0]
 800df9a:	b29b      	uxth	r3, r3
 800df9c:	4a4b      	ldr	r2, [pc, #300]	; (800e0cc <tcp_input+0x28c>)
 800df9e:	6814      	ldr	r4, [r2, #0]
 800dfa0:	4618      	mov	r0, r3
 800dfa2:	f7fc fe92 	bl	800acca <lwip_htons>
 800dfa6:	4603      	mov	r3, r0
 800dfa8:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800dfaa:	4b48      	ldr	r3, [pc, #288]	; (800e0cc <tcp_input+0x28c>)
 800dfac:	681b      	ldr	r3, [r3, #0]
 800dfae:	885b      	ldrh	r3, [r3, #2]
 800dfb0:	b29b      	uxth	r3, r3
 800dfb2:	4a46      	ldr	r2, [pc, #280]	; (800e0cc <tcp_input+0x28c>)
 800dfb4:	6814      	ldr	r4, [r2, #0]
 800dfb6:	4618      	mov	r0, r3
 800dfb8:	f7fc fe87 	bl	800acca <lwip_htons>
 800dfbc:	4603      	mov	r3, r0
 800dfbe:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800dfc0:	4b42      	ldr	r3, [pc, #264]	; (800e0cc <tcp_input+0x28c>)
 800dfc2:	681b      	ldr	r3, [r3, #0]
 800dfc4:	685b      	ldr	r3, [r3, #4]
 800dfc6:	4a41      	ldr	r2, [pc, #260]	; (800e0cc <tcp_input+0x28c>)
 800dfc8:	6814      	ldr	r4, [r2, #0]
 800dfca:	4618      	mov	r0, r3
 800dfcc:	f7fc fe92 	bl	800acf4 <lwip_htonl>
 800dfd0:	4603      	mov	r3, r0
 800dfd2:	6063      	str	r3, [r4, #4]
 800dfd4:	6863      	ldr	r3, [r4, #4]
 800dfd6:	4a45      	ldr	r2, [pc, #276]	; (800e0ec <tcp_input+0x2ac>)
 800dfd8:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800dfda:	4b3c      	ldr	r3, [pc, #240]	; (800e0cc <tcp_input+0x28c>)
 800dfdc:	681b      	ldr	r3, [r3, #0]
 800dfde:	689b      	ldr	r3, [r3, #8]
 800dfe0:	4a3a      	ldr	r2, [pc, #232]	; (800e0cc <tcp_input+0x28c>)
 800dfe2:	6814      	ldr	r4, [r2, #0]
 800dfe4:	4618      	mov	r0, r3
 800dfe6:	f7fc fe85 	bl	800acf4 <lwip_htonl>
 800dfea:	4603      	mov	r3, r0
 800dfec:	60a3      	str	r3, [r4, #8]
 800dfee:	68a3      	ldr	r3, [r4, #8]
 800dff0:	4a3f      	ldr	r2, [pc, #252]	; (800e0f0 <tcp_input+0x2b0>)
 800dff2:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800dff4:	4b35      	ldr	r3, [pc, #212]	; (800e0cc <tcp_input+0x28c>)
 800dff6:	681b      	ldr	r3, [r3, #0]
 800dff8:	89db      	ldrh	r3, [r3, #14]
 800dffa:	b29b      	uxth	r3, r3
 800dffc:	4a33      	ldr	r2, [pc, #204]	; (800e0cc <tcp_input+0x28c>)
 800dffe:	6814      	ldr	r4, [r2, #0]
 800e000:	4618      	mov	r0, r3
 800e002:	f7fc fe62 	bl	800acca <lwip_htons>
 800e006:	4603      	mov	r3, r0
 800e008:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800e00a:	4b30      	ldr	r3, [pc, #192]	; (800e0cc <tcp_input+0x28c>)
 800e00c:	681b      	ldr	r3, [r3, #0]
 800e00e:	899b      	ldrh	r3, [r3, #12]
 800e010:	b29b      	uxth	r3, r3
 800e012:	4618      	mov	r0, r3
 800e014:	f7fc fe59 	bl	800acca <lwip_htons>
 800e018:	4603      	mov	r3, r0
 800e01a:	b2db      	uxtb	r3, r3
 800e01c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e020:	b2da      	uxtb	r2, r3
 800e022:	4b34      	ldr	r3, [pc, #208]	; (800e0f4 <tcp_input+0x2b4>)
 800e024:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	891a      	ldrh	r2, [r3, #8]
 800e02a:	4b33      	ldr	r3, [pc, #204]	; (800e0f8 <tcp_input+0x2b8>)
 800e02c:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800e02e:	4b31      	ldr	r3, [pc, #196]	; (800e0f4 <tcp_input+0x2b4>)
 800e030:	781b      	ldrb	r3, [r3, #0]
 800e032:	f003 0303 	and.w	r3, r3, #3
 800e036:	2b00      	cmp	r3, #0
 800e038:	d00c      	beq.n	800e054 <tcp_input+0x214>
    tcplen++;
 800e03a:	4b2f      	ldr	r3, [pc, #188]	; (800e0f8 <tcp_input+0x2b8>)
 800e03c:	881b      	ldrh	r3, [r3, #0]
 800e03e:	3301      	adds	r3, #1
 800e040:	b29a      	uxth	r2, r3
 800e042:	4b2d      	ldr	r3, [pc, #180]	; (800e0f8 <tcp_input+0x2b8>)
 800e044:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	891a      	ldrh	r2, [r3, #8]
 800e04a:	4b2b      	ldr	r3, [pc, #172]	; (800e0f8 <tcp_input+0x2b8>)
 800e04c:	881b      	ldrh	r3, [r3, #0]
 800e04e:	429a      	cmp	r2, r3
 800e050:	f200 82d9 	bhi.w	800e606 <tcp_input+0x7c6>
=======
 800df64:	4b4d      	ldr	r3, [pc, #308]	; (800e09c <tcp_input+0x28c>)
 800df66:	681b      	ldr	r3, [r3, #0]
 800df68:	881b      	ldrh	r3, [r3, #0]
 800df6a:	b29b      	uxth	r3, r3
 800df6c:	4a4b      	ldr	r2, [pc, #300]	; (800e09c <tcp_input+0x28c>)
 800df6e:	6814      	ldr	r4, [r2, #0]
 800df70:	4618      	mov	r0, r3
 800df72:	f7fc fe92 	bl	800ac9a <lwip_htons>
 800df76:	4603      	mov	r3, r0
 800df78:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800df7a:	4b48      	ldr	r3, [pc, #288]	; (800e09c <tcp_input+0x28c>)
 800df7c:	681b      	ldr	r3, [r3, #0]
 800df7e:	885b      	ldrh	r3, [r3, #2]
 800df80:	b29b      	uxth	r3, r3
 800df82:	4a46      	ldr	r2, [pc, #280]	; (800e09c <tcp_input+0x28c>)
 800df84:	6814      	ldr	r4, [r2, #0]
 800df86:	4618      	mov	r0, r3
 800df88:	f7fc fe87 	bl	800ac9a <lwip_htons>
 800df8c:	4603      	mov	r3, r0
 800df8e:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800df90:	4b42      	ldr	r3, [pc, #264]	; (800e09c <tcp_input+0x28c>)
 800df92:	681b      	ldr	r3, [r3, #0]
 800df94:	685b      	ldr	r3, [r3, #4]
 800df96:	4a41      	ldr	r2, [pc, #260]	; (800e09c <tcp_input+0x28c>)
 800df98:	6814      	ldr	r4, [r2, #0]
 800df9a:	4618      	mov	r0, r3
 800df9c:	f7fc fe92 	bl	800acc4 <lwip_htonl>
 800dfa0:	4603      	mov	r3, r0
 800dfa2:	6063      	str	r3, [r4, #4]
 800dfa4:	6863      	ldr	r3, [r4, #4]
 800dfa6:	4a45      	ldr	r2, [pc, #276]	; (800e0bc <tcp_input+0x2ac>)
 800dfa8:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800dfaa:	4b3c      	ldr	r3, [pc, #240]	; (800e09c <tcp_input+0x28c>)
 800dfac:	681b      	ldr	r3, [r3, #0]
 800dfae:	689b      	ldr	r3, [r3, #8]
 800dfb0:	4a3a      	ldr	r2, [pc, #232]	; (800e09c <tcp_input+0x28c>)
 800dfb2:	6814      	ldr	r4, [r2, #0]
 800dfb4:	4618      	mov	r0, r3
 800dfb6:	f7fc fe85 	bl	800acc4 <lwip_htonl>
 800dfba:	4603      	mov	r3, r0
 800dfbc:	60a3      	str	r3, [r4, #8]
 800dfbe:	68a3      	ldr	r3, [r4, #8]
 800dfc0:	4a3f      	ldr	r2, [pc, #252]	; (800e0c0 <tcp_input+0x2b0>)
 800dfc2:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800dfc4:	4b35      	ldr	r3, [pc, #212]	; (800e09c <tcp_input+0x28c>)
 800dfc6:	681b      	ldr	r3, [r3, #0]
 800dfc8:	89db      	ldrh	r3, [r3, #14]
 800dfca:	b29b      	uxth	r3, r3
 800dfcc:	4a33      	ldr	r2, [pc, #204]	; (800e09c <tcp_input+0x28c>)
 800dfce:	6814      	ldr	r4, [r2, #0]
 800dfd0:	4618      	mov	r0, r3
 800dfd2:	f7fc fe62 	bl	800ac9a <lwip_htons>
 800dfd6:	4603      	mov	r3, r0
 800dfd8:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800dfda:	4b30      	ldr	r3, [pc, #192]	; (800e09c <tcp_input+0x28c>)
 800dfdc:	681b      	ldr	r3, [r3, #0]
 800dfde:	899b      	ldrh	r3, [r3, #12]
 800dfe0:	b29b      	uxth	r3, r3
 800dfe2:	4618      	mov	r0, r3
 800dfe4:	f7fc fe59 	bl	800ac9a <lwip_htons>
 800dfe8:	4603      	mov	r3, r0
 800dfea:	b2db      	uxtb	r3, r3
 800dfec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800dff0:	b2da      	uxtb	r2, r3
 800dff2:	4b34      	ldr	r3, [pc, #208]	; (800e0c4 <tcp_input+0x2b4>)
 800dff4:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	891a      	ldrh	r2, [r3, #8]
 800dffa:	4b33      	ldr	r3, [pc, #204]	; (800e0c8 <tcp_input+0x2b8>)
 800dffc:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800dffe:	4b31      	ldr	r3, [pc, #196]	; (800e0c4 <tcp_input+0x2b4>)
 800e000:	781b      	ldrb	r3, [r3, #0]
 800e002:	f003 0303 	and.w	r3, r3, #3
 800e006:	2b00      	cmp	r3, #0
 800e008:	d00c      	beq.n	800e024 <tcp_input+0x214>
    tcplen++;
 800e00a:	4b2f      	ldr	r3, [pc, #188]	; (800e0c8 <tcp_input+0x2b8>)
 800e00c:	881b      	ldrh	r3, [r3, #0]
 800e00e:	3301      	adds	r3, #1
 800e010:	b29a      	uxth	r2, r3
 800e012:	4b2d      	ldr	r3, [pc, #180]	; (800e0c8 <tcp_input+0x2b8>)
 800e014:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	891a      	ldrh	r2, [r3, #8]
 800e01a:	4b2b      	ldr	r3, [pc, #172]	; (800e0c8 <tcp_input+0x2b8>)
 800e01c:	881b      	ldrh	r3, [r3, #0]
 800e01e:	429a      	cmp	r2, r3
 800e020:	f200 82d9 	bhi.w	800e5d6 <tcp_input+0x7c6>
>>>>>>> Stashed changes
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
<<<<<<< Updated upstream
 800e054:	2300      	movs	r3, #0
 800e056:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e058:	4b28      	ldr	r3, [pc, #160]	; (800e0fc <tcp_input+0x2bc>)
 800e05a:	681b      	ldr	r3, [r3, #0]
 800e05c:	61fb      	str	r3, [r7, #28]
 800e05e:	e09d      	b.n	800e19c <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800e060:	69fb      	ldr	r3, [r7, #28]
 800e062:	7d1b      	ldrb	r3, [r3, #20]
 800e064:	2b00      	cmp	r3, #0
 800e066:	d105      	bne.n	800e074 <tcp_input+0x234>
 800e068:	4b15      	ldr	r3, [pc, #84]	; (800e0c0 <tcp_input+0x280>)
 800e06a:	22fb      	movs	r2, #251	; 0xfb
 800e06c:	4924      	ldr	r1, [pc, #144]	; (800e100 <tcp_input+0x2c0>)
 800e06e:	4816      	ldr	r0, [pc, #88]	; (800e0c8 <tcp_input+0x288>)
 800e070:	f006 fa88 	bl	8014584 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800e074:	69fb      	ldr	r3, [r7, #28]
 800e076:	7d1b      	ldrb	r3, [r3, #20]
 800e078:	2b0a      	cmp	r3, #10
 800e07a:	d105      	bne.n	800e088 <tcp_input+0x248>
 800e07c:	4b10      	ldr	r3, [pc, #64]	; (800e0c0 <tcp_input+0x280>)
 800e07e:	22fc      	movs	r2, #252	; 0xfc
 800e080:	4920      	ldr	r1, [pc, #128]	; (800e104 <tcp_input+0x2c4>)
 800e082:	4811      	ldr	r0, [pc, #68]	; (800e0c8 <tcp_input+0x288>)
 800e084:	f006 fa7e 	bl	8014584 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800e088:	69fb      	ldr	r3, [r7, #28]
 800e08a:	7d1b      	ldrb	r3, [r3, #20]
 800e08c:	2b01      	cmp	r3, #1
 800e08e:	d105      	bne.n	800e09c <tcp_input+0x25c>
 800e090:	4b0b      	ldr	r3, [pc, #44]	; (800e0c0 <tcp_input+0x280>)
 800e092:	22fd      	movs	r2, #253	; 0xfd
 800e094:	491c      	ldr	r1, [pc, #112]	; (800e108 <tcp_input+0x2c8>)
 800e096:	480c      	ldr	r0, [pc, #48]	; (800e0c8 <tcp_input+0x288>)
 800e098:	f006 fa74 	bl	8014584 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e09c:	69fb      	ldr	r3, [r7, #28]
 800e09e:	7a1b      	ldrb	r3, [r3, #8]
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	d033      	beq.n	800e10c <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e0a4:	69fb      	ldr	r3, [r7, #28]
 800e0a6:	7a1a      	ldrb	r2, [r3, #8]
 800e0a8:	4b09      	ldr	r3, [pc, #36]	; (800e0d0 <tcp_input+0x290>)
 800e0aa:	685b      	ldr	r3, [r3, #4]
 800e0ac:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e0b0:	3301      	adds	r3, #1
 800e0b2:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e0b4:	429a      	cmp	r2, r3
 800e0b6:	d029      	beq.n	800e10c <tcp_input+0x2cc>
      prev = pcb;
 800e0b8:	69fb      	ldr	r3, [r7, #28]
 800e0ba:	61bb      	str	r3, [r7, #24]
      continue;
 800e0bc:	e06b      	b.n	800e196 <tcp_input+0x356>
 800e0be:	bf00      	nop
 800e0c0:	08016b90 	.word	0x08016b90
 800e0c4:	08016bc4 	.word	0x08016bc4
 800e0c8:	08016bdc 	.word	0x08016bdc
 800e0cc:	200000f8 	.word	0x200000f8
 800e0d0:	20003d5c 	.word	0x20003d5c
 800e0d4:	200000fc 	.word	0x200000fc
 800e0d8:	20000100 	.word	0x20000100
 800e0dc:	200000fe 	.word	0x200000fe
 800e0e0:	08016c04 	.word	0x08016c04
 800e0e4:	08016c14 	.word	0x08016c14
 800e0e8:	08016c20 	.word	0x08016c20
 800e0ec:	20000108 	.word	0x20000108
 800e0f0:	2000010c 	.word	0x2000010c
 800e0f4:	20000114 	.word	0x20000114
 800e0f8:	20000112 	.word	0x20000112
 800e0fc:	200072a0 	.word	0x200072a0
 800e100:	08016c40 	.word	0x08016c40
 800e104:	08016c68 	.word	0x08016c68
 800e108:	08016c94 	.word	0x08016c94
    }

    if (pcb->remote_port == tcphdr->src &&
 800e10c:	69fb      	ldr	r3, [r7, #28]
 800e10e:	8b1a      	ldrh	r2, [r3, #24]
 800e110:	4b94      	ldr	r3, [pc, #592]	; (800e364 <tcp_input+0x524>)
 800e112:	681b      	ldr	r3, [r3, #0]
 800e114:	881b      	ldrh	r3, [r3, #0]
 800e116:	b29b      	uxth	r3, r3
 800e118:	429a      	cmp	r2, r3
 800e11a:	d13a      	bne.n	800e192 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800e11c:	69fb      	ldr	r3, [r7, #28]
 800e11e:	8ada      	ldrh	r2, [r3, #22]
 800e120:	4b90      	ldr	r3, [pc, #576]	; (800e364 <tcp_input+0x524>)
 800e122:	681b      	ldr	r3, [r3, #0]
 800e124:	885b      	ldrh	r3, [r3, #2]
 800e126:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800e128:	429a      	cmp	r2, r3
 800e12a:	d132      	bne.n	800e192 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e12c:	69fb      	ldr	r3, [r7, #28]
 800e12e:	685a      	ldr	r2, [r3, #4]
 800e130:	4b8d      	ldr	r3, [pc, #564]	; (800e368 <tcp_input+0x528>)
 800e132:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800e134:	429a      	cmp	r2, r3
 800e136:	d12c      	bne.n	800e192 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800e138:	69fb      	ldr	r3, [r7, #28]
 800e13a:	681a      	ldr	r2, [r3, #0]
 800e13c:	4b8a      	ldr	r3, [pc, #552]	; (800e368 <tcp_input+0x528>)
 800e13e:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e140:	429a      	cmp	r2, r3
 800e142:	d126      	bne.n	800e192 <tcp_input+0x352>
=======
 800e024:	2300      	movs	r3, #0
 800e026:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e028:	4b28      	ldr	r3, [pc, #160]	; (800e0cc <tcp_input+0x2bc>)
 800e02a:	681b      	ldr	r3, [r3, #0]
 800e02c:	61fb      	str	r3, [r7, #28]
 800e02e:	e09d      	b.n	800e16c <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800e030:	69fb      	ldr	r3, [r7, #28]
 800e032:	7d1b      	ldrb	r3, [r3, #20]
 800e034:	2b00      	cmp	r3, #0
 800e036:	d105      	bne.n	800e044 <tcp_input+0x234>
 800e038:	4b15      	ldr	r3, [pc, #84]	; (800e090 <tcp_input+0x280>)
 800e03a:	22fb      	movs	r2, #251	; 0xfb
 800e03c:	4924      	ldr	r1, [pc, #144]	; (800e0d0 <tcp_input+0x2c0>)
 800e03e:	4816      	ldr	r0, [pc, #88]	; (800e098 <tcp_input+0x288>)
 800e040:	f006 fa88 	bl	8014554 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800e044:	69fb      	ldr	r3, [r7, #28]
 800e046:	7d1b      	ldrb	r3, [r3, #20]
 800e048:	2b0a      	cmp	r3, #10
 800e04a:	d105      	bne.n	800e058 <tcp_input+0x248>
 800e04c:	4b10      	ldr	r3, [pc, #64]	; (800e090 <tcp_input+0x280>)
 800e04e:	22fc      	movs	r2, #252	; 0xfc
 800e050:	4920      	ldr	r1, [pc, #128]	; (800e0d4 <tcp_input+0x2c4>)
 800e052:	4811      	ldr	r0, [pc, #68]	; (800e098 <tcp_input+0x288>)
 800e054:	f006 fa7e 	bl	8014554 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800e058:	69fb      	ldr	r3, [r7, #28]
 800e05a:	7d1b      	ldrb	r3, [r3, #20]
 800e05c:	2b01      	cmp	r3, #1
 800e05e:	d105      	bne.n	800e06c <tcp_input+0x25c>
 800e060:	4b0b      	ldr	r3, [pc, #44]	; (800e090 <tcp_input+0x280>)
 800e062:	22fd      	movs	r2, #253	; 0xfd
 800e064:	491c      	ldr	r1, [pc, #112]	; (800e0d8 <tcp_input+0x2c8>)
 800e066:	480c      	ldr	r0, [pc, #48]	; (800e098 <tcp_input+0x288>)
 800e068:	f006 fa74 	bl	8014554 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e06c:	69fb      	ldr	r3, [r7, #28]
 800e06e:	7a1b      	ldrb	r3, [r3, #8]
 800e070:	2b00      	cmp	r3, #0
 800e072:	d033      	beq.n	800e0dc <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e074:	69fb      	ldr	r3, [r7, #28]
 800e076:	7a1a      	ldrb	r2, [r3, #8]
 800e078:	4b09      	ldr	r3, [pc, #36]	; (800e0a0 <tcp_input+0x290>)
 800e07a:	685b      	ldr	r3, [r3, #4]
 800e07c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e080:	3301      	adds	r3, #1
 800e082:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e084:	429a      	cmp	r2, r3
 800e086:	d029      	beq.n	800e0dc <tcp_input+0x2cc>
      prev = pcb;
 800e088:	69fb      	ldr	r3, [r7, #28]
 800e08a:	61bb      	str	r3, [r7, #24]
      continue;
 800e08c:	e06b      	b.n	800e166 <tcp_input+0x356>
 800e08e:	bf00      	nop
 800e090:	08016b74 	.word	0x08016b74
 800e094:	08016ba8 	.word	0x08016ba8
 800e098:	08016bc0 	.word	0x08016bc0
 800e09c:	200000f8 	.word	0x200000f8
 800e0a0:	20003d5c 	.word	0x20003d5c
 800e0a4:	200000fc 	.word	0x200000fc
 800e0a8:	20000100 	.word	0x20000100
 800e0ac:	200000fe 	.word	0x200000fe
 800e0b0:	08016be8 	.word	0x08016be8
 800e0b4:	08016bf8 	.word	0x08016bf8
 800e0b8:	08016c04 	.word	0x08016c04
 800e0bc:	20000108 	.word	0x20000108
 800e0c0:	2000010c 	.word	0x2000010c
 800e0c4:	20000114 	.word	0x20000114
 800e0c8:	20000112 	.word	0x20000112
 800e0cc:	200072a0 	.word	0x200072a0
 800e0d0:	08016c24 	.word	0x08016c24
 800e0d4:	08016c4c 	.word	0x08016c4c
 800e0d8:	08016c78 	.word	0x08016c78
    }

    if (pcb->remote_port == tcphdr->src &&
 800e0dc:	69fb      	ldr	r3, [r7, #28]
 800e0de:	8b1a      	ldrh	r2, [r3, #24]
 800e0e0:	4b94      	ldr	r3, [pc, #592]	; (800e334 <tcp_input+0x524>)
 800e0e2:	681b      	ldr	r3, [r3, #0]
 800e0e4:	881b      	ldrh	r3, [r3, #0]
 800e0e6:	b29b      	uxth	r3, r3
 800e0e8:	429a      	cmp	r2, r3
 800e0ea:	d13a      	bne.n	800e162 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800e0ec:	69fb      	ldr	r3, [r7, #28]
 800e0ee:	8ada      	ldrh	r2, [r3, #22]
 800e0f0:	4b90      	ldr	r3, [pc, #576]	; (800e334 <tcp_input+0x524>)
 800e0f2:	681b      	ldr	r3, [r3, #0]
 800e0f4:	885b      	ldrh	r3, [r3, #2]
 800e0f6:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800e0f8:	429a      	cmp	r2, r3
 800e0fa:	d132      	bne.n	800e162 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e0fc:	69fb      	ldr	r3, [r7, #28]
 800e0fe:	685a      	ldr	r2, [r3, #4]
 800e100:	4b8d      	ldr	r3, [pc, #564]	; (800e338 <tcp_input+0x528>)
 800e102:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800e104:	429a      	cmp	r2, r3
 800e106:	d12c      	bne.n	800e162 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800e108:	69fb      	ldr	r3, [r7, #28]
 800e10a:	681a      	ldr	r2, [r3, #0]
 800e10c:	4b8a      	ldr	r3, [pc, #552]	; (800e338 <tcp_input+0x528>)
 800e10e:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e110:	429a      	cmp	r2, r3
 800e112:	d126      	bne.n	800e162 <tcp_input+0x352>
>>>>>>> Stashed changes
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
<<<<<<< Updated upstream
 800e144:	69fb      	ldr	r3, [r7, #28]
 800e146:	68db      	ldr	r3, [r3, #12]
 800e148:	69fa      	ldr	r2, [r7, #28]
 800e14a:	429a      	cmp	r2, r3
 800e14c:	d106      	bne.n	800e15c <tcp_input+0x31c>
 800e14e:	4b87      	ldr	r3, [pc, #540]	; (800e36c <tcp_input+0x52c>)
 800e150:	f240 120d 	movw	r2, #269	; 0x10d
 800e154:	4986      	ldr	r1, [pc, #536]	; (800e370 <tcp_input+0x530>)
 800e156:	4887      	ldr	r0, [pc, #540]	; (800e374 <tcp_input+0x534>)
 800e158:	f006 fa14 	bl	8014584 <iprintf>
      if (prev != NULL) {
 800e15c:	69bb      	ldr	r3, [r7, #24]
 800e15e:	2b00      	cmp	r3, #0
 800e160:	d00a      	beq.n	800e178 <tcp_input+0x338>
        prev->next = pcb->next;
 800e162:	69fb      	ldr	r3, [r7, #28]
 800e164:	68da      	ldr	r2, [r3, #12]
 800e166:	69bb      	ldr	r3, [r7, #24]
 800e168:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800e16a:	4b83      	ldr	r3, [pc, #524]	; (800e378 <tcp_input+0x538>)
 800e16c:	681a      	ldr	r2, [r3, #0]
 800e16e:	69fb      	ldr	r3, [r7, #28]
 800e170:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800e172:	4a81      	ldr	r2, [pc, #516]	; (800e378 <tcp_input+0x538>)
 800e174:	69fb      	ldr	r3, [r7, #28]
 800e176:	6013      	str	r3, [r2, #0]
=======
 800e114:	69fb      	ldr	r3, [r7, #28]
 800e116:	68db      	ldr	r3, [r3, #12]
 800e118:	69fa      	ldr	r2, [r7, #28]
 800e11a:	429a      	cmp	r2, r3
 800e11c:	d106      	bne.n	800e12c <tcp_input+0x31c>
 800e11e:	4b87      	ldr	r3, [pc, #540]	; (800e33c <tcp_input+0x52c>)
 800e120:	f240 120d 	movw	r2, #269	; 0x10d
 800e124:	4986      	ldr	r1, [pc, #536]	; (800e340 <tcp_input+0x530>)
 800e126:	4887      	ldr	r0, [pc, #540]	; (800e344 <tcp_input+0x534>)
 800e128:	f006 fa14 	bl	8014554 <iprintf>
      if (prev != NULL) {
 800e12c:	69bb      	ldr	r3, [r7, #24]
 800e12e:	2b00      	cmp	r3, #0
 800e130:	d00a      	beq.n	800e148 <tcp_input+0x338>
        prev->next = pcb->next;
 800e132:	69fb      	ldr	r3, [r7, #28]
 800e134:	68da      	ldr	r2, [r3, #12]
 800e136:	69bb      	ldr	r3, [r7, #24]
 800e138:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800e13a:	4b83      	ldr	r3, [pc, #524]	; (800e348 <tcp_input+0x538>)
 800e13c:	681a      	ldr	r2, [r3, #0]
 800e13e:	69fb      	ldr	r3, [r7, #28]
 800e140:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800e142:	4a81      	ldr	r2, [pc, #516]	; (800e348 <tcp_input+0x538>)
 800e144:	69fb      	ldr	r3, [r7, #28]
 800e146:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
<<<<<<< Updated upstream
 800e178:	69fb      	ldr	r3, [r7, #28]
 800e17a:	68db      	ldr	r3, [r3, #12]
 800e17c:	69fa      	ldr	r2, [r7, #28]
 800e17e:	429a      	cmp	r2, r3
 800e180:	d111      	bne.n	800e1a6 <tcp_input+0x366>
 800e182:	4b7a      	ldr	r3, [pc, #488]	; (800e36c <tcp_input+0x52c>)
 800e184:	f240 1215 	movw	r2, #277	; 0x115
 800e188:	497c      	ldr	r1, [pc, #496]	; (800e37c <tcp_input+0x53c>)
 800e18a:	487a      	ldr	r0, [pc, #488]	; (800e374 <tcp_input+0x534>)
 800e18c:	f006 f9fa 	bl	8014584 <iprintf>
      break;
 800e190:	e009      	b.n	800e1a6 <tcp_input+0x366>
    }
    prev = pcb;
 800e192:	69fb      	ldr	r3, [r7, #28]
 800e194:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e196:	69fb      	ldr	r3, [r7, #28]
 800e198:	68db      	ldr	r3, [r3, #12]
 800e19a:	61fb      	str	r3, [r7, #28]
 800e19c:	69fb      	ldr	r3, [r7, #28]
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	f47f af5e 	bne.w	800e060 <tcp_input+0x220>
 800e1a4:	e000      	b.n	800e1a8 <tcp_input+0x368>
      break;
 800e1a6:	bf00      	nop
  }

  if (pcb == NULL) {
 800e1a8:	69fb      	ldr	r3, [r7, #28]
 800e1aa:	2b00      	cmp	r3, #0
 800e1ac:	f040 8095 	bne.w	800e2da <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e1b0:	4b73      	ldr	r3, [pc, #460]	; (800e380 <tcp_input+0x540>)
 800e1b2:	681b      	ldr	r3, [r3, #0]
 800e1b4:	61fb      	str	r3, [r7, #28]
 800e1b6:	e03f      	b.n	800e238 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800e1b8:	69fb      	ldr	r3, [r7, #28]
 800e1ba:	7d1b      	ldrb	r3, [r3, #20]
 800e1bc:	2b0a      	cmp	r3, #10
 800e1be:	d006      	beq.n	800e1ce <tcp_input+0x38e>
 800e1c0:	4b6a      	ldr	r3, [pc, #424]	; (800e36c <tcp_input+0x52c>)
 800e1c2:	f240 121f 	movw	r2, #287	; 0x11f
 800e1c6:	496f      	ldr	r1, [pc, #444]	; (800e384 <tcp_input+0x544>)
 800e1c8:	486a      	ldr	r0, [pc, #424]	; (800e374 <tcp_input+0x534>)
 800e1ca:	f006 f9db 	bl	8014584 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e1ce:	69fb      	ldr	r3, [r7, #28]
 800e1d0:	7a1b      	ldrb	r3, [r3, #8]
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	d009      	beq.n	800e1ea <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e1d6:	69fb      	ldr	r3, [r7, #28]
 800e1d8:	7a1a      	ldrb	r2, [r3, #8]
 800e1da:	4b63      	ldr	r3, [pc, #396]	; (800e368 <tcp_input+0x528>)
 800e1dc:	685b      	ldr	r3, [r3, #4]
 800e1de:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e1e2:	3301      	adds	r3, #1
 800e1e4:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e1e6:	429a      	cmp	r2, r3
 800e1e8:	d122      	bne.n	800e230 <tcp_input+0x3f0>
=======
 800e148:	69fb      	ldr	r3, [r7, #28]
 800e14a:	68db      	ldr	r3, [r3, #12]
 800e14c:	69fa      	ldr	r2, [r7, #28]
 800e14e:	429a      	cmp	r2, r3
 800e150:	d111      	bne.n	800e176 <tcp_input+0x366>
 800e152:	4b7a      	ldr	r3, [pc, #488]	; (800e33c <tcp_input+0x52c>)
 800e154:	f240 1215 	movw	r2, #277	; 0x115
 800e158:	497c      	ldr	r1, [pc, #496]	; (800e34c <tcp_input+0x53c>)
 800e15a:	487a      	ldr	r0, [pc, #488]	; (800e344 <tcp_input+0x534>)
 800e15c:	f006 f9fa 	bl	8014554 <iprintf>
      break;
 800e160:	e009      	b.n	800e176 <tcp_input+0x366>
    }
    prev = pcb;
 800e162:	69fb      	ldr	r3, [r7, #28]
 800e164:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e166:	69fb      	ldr	r3, [r7, #28]
 800e168:	68db      	ldr	r3, [r3, #12]
 800e16a:	61fb      	str	r3, [r7, #28]
 800e16c:	69fb      	ldr	r3, [r7, #28]
 800e16e:	2b00      	cmp	r3, #0
 800e170:	f47f af5e 	bne.w	800e030 <tcp_input+0x220>
 800e174:	e000      	b.n	800e178 <tcp_input+0x368>
      break;
 800e176:	bf00      	nop
  }

  if (pcb == NULL) {
 800e178:	69fb      	ldr	r3, [r7, #28]
 800e17a:	2b00      	cmp	r3, #0
 800e17c:	f040 8095 	bne.w	800e2aa <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e180:	4b73      	ldr	r3, [pc, #460]	; (800e350 <tcp_input+0x540>)
 800e182:	681b      	ldr	r3, [r3, #0]
 800e184:	61fb      	str	r3, [r7, #28]
 800e186:	e03f      	b.n	800e208 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800e188:	69fb      	ldr	r3, [r7, #28]
 800e18a:	7d1b      	ldrb	r3, [r3, #20]
 800e18c:	2b0a      	cmp	r3, #10
 800e18e:	d006      	beq.n	800e19e <tcp_input+0x38e>
 800e190:	4b6a      	ldr	r3, [pc, #424]	; (800e33c <tcp_input+0x52c>)
 800e192:	f240 121f 	movw	r2, #287	; 0x11f
 800e196:	496f      	ldr	r1, [pc, #444]	; (800e354 <tcp_input+0x544>)
 800e198:	486a      	ldr	r0, [pc, #424]	; (800e344 <tcp_input+0x534>)
 800e19a:	f006 f9db 	bl	8014554 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e19e:	69fb      	ldr	r3, [r7, #28]
 800e1a0:	7a1b      	ldrb	r3, [r3, #8]
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	d009      	beq.n	800e1ba <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e1a6:	69fb      	ldr	r3, [r7, #28]
 800e1a8:	7a1a      	ldrb	r2, [r3, #8]
 800e1aa:	4b63      	ldr	r3, [pc, #396]	; (800e338 <tcp_input+0x528>)
 800e1ac:	685b      	ldr	r3, [r3, #4]
 800e1ae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e1b2:	3301      	adds	r3, #1
 800e1b4:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e1b6:	429a      	cmp	r2, r3
 800e1b8:	d122      	bne.n	800e200 <tcp_input+0x3f0>
>>>>>>> Stashed changes
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
<<<<<<< Updated upstream
 800e1ea:	69fb      	ldr	r3, [r7, #28]
 800e1ec:	8b1a      	ldrh	r2, [r3, #24]
 800e1ee:	4b5d      	ldr	r3, [pc, #372]	; (800e364 <tcp_input+0x524>)
 800e1f0:	681b      	ldr	r3, [r3, #0]
 800e1f2:	881b      	ldrh	r3, [r3, #0]
 800e1f4:	b29b      	uxth	r3, r3
 800e1f6:	429a      	cmp	r2, r3
 800e1f8:	d11b      	bne.n	800e232 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800e1fa:	69fb      	ldr	r3, [r7, #28]
 800e1fc:	8ada      	ldrh	r2, [r3, #22]
 800e1fe:	4b59      	ldr	r3, [pc, #356]	; (800e364 <tcp_input+0x524>)
 800e200:	681b      	ldr	r3, [r3, #0]
 800e202:	885b      	ldrh	r3, [r3, #2]
 800e204:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800e206:	429a      	cmp	r2, r3
 800e208:	d113      	bne.n	800e232 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e20a:	69fb      	ldr	r3, [r7, #28]
 800e20c:	685a      	ldr	r2, [r3, #4]
 800e20e:	4b56      	ldr	r3, [pc, #344]	; (800e368 <tcp_input+0x528>)
 800e210:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800e212:	429a      	cmp	r2, r3
 800e214:	d10d      	bne.n	800e232 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800e216:	69fb      	ldr	r3, [r7, #28]
 800e218:	681a      	ldr	r2, [r3, #0]
 800e21a:	4b53      	ldr	r3, [pc, #332]	; (800e368 <tcp_input+0x528>)
 800e21c:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e21e:	429a      	cmp	r2, r3
 800e220:	d107      	bne.n	800e232 <tcp_input+0x3f2>
=======
 800e1ba:	69fb      	ldr	r3, [r7, #28]
 800e1bc:	8b1a      	ldrh	r2, [r3, #24]
 800e1be:	4b5d      	ldr	r3, [pc, #372]	; (800e334 <tcp_input+0x524>)
 800e1c0:	681b      	ldr	r3, [r3, #0]
 800e1c2:	881b      	ldrh	r3, [r3, #0]
 800e1c4:	b29b      	uxth	r3, r3
 800e1c6:	429a      	cmp	r2, r3
 800e1c8:	d11b      	bne.n	800e202 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800e1ca:	69fb      	ldr	r3, [r7, #28]
 800e1cc:	8ada      	ldrh	r2, [r3, #22]
 800e1ce:	4b59      	ldr	r3, [pc, #356]	; (800e334 <tcp_input+0x524>)
 800e1d0:	681b      	ldr	r3, [r3, #0]
 800e1d2:	885b      	ldrh	r3, [r3, #2]
 800e1d4:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800e1d6:	429a      	cmp	r2, r3
 800e1d8:	d113      	bne.n	800e202 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e1da:	69fb      	ldr	r3, [r7, #28]
 800e1dc:	685a      	ldr	r2, [r3, #4]
 800e1de:	4b56      	ldr	r3, [pc, #344]	; (800e338 <tcp_input+0x528>)
 800e1e0:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800e1e2:	429a      	cmp	r2, r3
 800e1e4:	d10d      	bne.n	800e202 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800e1e6:	69fb      	ldr	r3, [r7, #28]
 800e1e8:	681a      	ldr	r2, [r3, #0]
 800e1ea:	4b53      	ldr	r3, [pc, #332]	; (800e338 <tcp_input+0x528>)
 800e1ec:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e1ee:	429a      	cmp	r2, r3
 800e1f0:	d107      	bne.n	800e202 <tcp_input+0x3f2>
>>>>>>> Stashed changes
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
<<<<<<< Updated upstream
 800e222:	69f8      	ldr	r0, [r7, #28]
 800e224:	f000 fb54 	bl	800e8d0 <tcp_timewait_input>
        }
        pbuf_free(p);
 800e228:	6878      	ldr	r0, [r7, #4]
 800e22a:	f7fd ffe1 	bl	800c1f0 <pbuf_free>
        return;
 800e22e:	e1f0      	b.n	800e612 <tcp_input+0x7d2>
        continue;
 800e230:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e232:	69fb      	ldr	r3, [r7, #28]
 800e234:	68db      	ldr	r3, [r3, #12]
 800e236:	61fb      	str	r3, [r7, #28]
 800e238:	69fb      	ldr	r3, [r7, #28]
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	d1bc      	bne.n	800e1b8 <tcp_input+0x378>
=======
 800e1f2:	69f8      	ldr	r0, [r7, #28]
 800e1f4:	f000 fb54 	bl	800e8a0 <tcp_timewait_input>
        }
        pbuf_free(p);
 800e1f8:	6878      	ldr	r0, [r7, #4]
 800e1fa:	f7fd ffe1 	bl	800c1c0 <pbuf_free>
        return;
 800e1fe:	e1f0      	b.n	800e5e2 <tcp_input+0x7d2>
        continue;
 800e200:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e202:	69fb      	ldr	r3, [r7, #28]
 800e204:	68db      	ldr	r3, [r3, #12]
 800e206:	61fb      	str	r3, [r7, #28]
 800e208:	69fb      	ldr	r3, [r7, #28]
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	d1bc      	bne.n	800e188 <tcp_input+0x378>
>>>>>>> Stashed changes
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
<<<<<<< Updated upstream
 800e23e:	2300      	movs	r3, #0
 800e240:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e242:	4b51      	ldr	r3, [pc, #324]	; (800e388 <tcp_input+0x548>)
 800e244:	681b      	ldr	r3, [r3, #0]
 800e246:	617b      	str	r3, [r7, #20]
 800e248:	e02a      	b.n	800e2a0 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800e24a:	697b      	ldr	r3, [r7, #20]
 800e24c:	7a1b      	ldrb	r3, [r3, #8]
 800e24e:	2b00      	cmp	r3, #0
 800e250:	d00c      	beq.n	800e26c <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e252:	697b      	ldr	r3, [r7, #20]
 800e254:	7a1a      	ldrb	r2, [r3, #8]
 800e256:	4b44      	ldr	r3, [pc, #272]	; (800e368 <tcp_input+0x528>)
 800e258:	685b      	ldr	r3, [r3, #4]
 800e25a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e25e:	3301      	adds	r3, #1
 800e260:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800e262:	429a      	cmp	r2, r3
 800e264:	d002      	beq.n	800e26c <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800e266:	697b      	ldr	r3, [r7, #20]
 800e268:	61bb      	str	r3, [r7, #24]
        continue;
 800e26a:	e016      	b.n	800e29a <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800e26c:	697b      	ldr	r3, [r7, #20]
 800e26e:	8ada      	ldrh	r2, [r3, #22]
 800e270:	4b3c      	ldr	r3, [pc, #240]	; (800e364 <tcp_input+0x524>)
 800e272:	681b      	ldr	r3, [r3, #0]
 800e274:	885b      	ldrh	r3, [r3, #2]
 800e276:	b29b      	uxth	r3, r3
 800e278:	429a      	cmp	r2, r3
 800e27a:	d10c      	bne.n	800e296 <tcp_input+0x456>
=======
 800e20e:	2300      	movs	r3, #0
 800e210:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e212:	4b51      	ldr	r3, [pc, #324]	; (800e358 <tcp_input+0x548>)
 800e214:	681b      	ldr	r3, [r3, #0]
 800e216:	617b      	str	r3, [r7, #20]
 800e218:	e02a      	b.n	800e270 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800e21a:	697b      	ldr	r3, [r7, #20]
 800e21c:	7a1b      	ldrb	r3, [r3, #8]
 800e21e:	2b00      	cmp	r3, #0
 800e220:	d00c      	beq.n	800e23c <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e222:	697b      	ldr	r3, [r7, #20]
 800e224:	7a1a      	ldrb	r2, [r3, #8]
 800e226:	4b44      	ldr	r3, [pc, #272]	; (800e338 <tcp_input+0x528>)
 800e228:	685b      	ldr	r3, [r3, #4]
 800e22a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e22e:	3301      	adds	r3, #1
 800e230:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800e232:	429a      	cmp	r2, r3
 800e234:	d002      	beq.n	800e23c <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800e236:	697b      	ldr	r3, [r7, #20]
 800e238:	61bb      	str	r3, [r7, #24]
        continue;
 800e23a:	e016      	b.n	800e26a <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800e23c:	697b      	ldr	r3, [r7, #20]
 800e23e:	8ada      	ldrh	r2, [r3, #22]
 800e240:	4b3c      	ldr	r3, [pc, #240]	; (800e334 <tcp_input+0x524>)
 800e242:	681b      	ldr	r3, [r3, #0]
 800e244:	885b      	ldrh	r3, [r3, #2]
 800e246:	b29b      	uxth	r3, r3
 800e248:	429a      	cmp	r2, r3
 800e24a:	d10c      	bne.n	800e266 <tcp_input+0x456>
>>>>>>> Stashed changes
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
<<<<<<< Updated upstream
 800e27c:	697b      	ldr	r3, [r7, #20]
 800e27e:	681a      	ldr	r2, [r3, #0]
 800e280:	4b39      	ldr	r3, [pc, #228]	; (800e368 <tcp_input+0x528>)
 800e282:	695b      	ldr	r3, [r3, #20]
 800e284:	429a      	cmp	r2, r3
 800e286:	d00f      	beq.n	800e2a8 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800e288:	697b      	ldr	r3, [r7, #20]
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	d00d      	beq.n	800e2aa <tcp_input+0x46a>
 800e28e:	697b      	ldr	r3, [r7, #20]
 800e290:	681b      	ldr	r3, [r3, #0]
 800e292:	2b00      	cmp	r3, #0
 800e294:	d009      	beq.n	800e2aa <tcp_input+0x46a>
=======
 800e24c:	697b      	ldr	r3, [r7, #20]
 800e24e:	681a      	ldr	r2, [r3, #0]
 800e250:	4b39      	ldr	r3, [pc, #228]	; (800e338 <tcp_input+0x528>)
 800e252:	695b      	ldr	r3, [r3, #20]
 800e254:	429a      	cmp	r2, r3
 800e256:	d00f      	beq.n	800e278 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800e258:	697b      	ldr	r3, [r7, #20]
 800e25a:	2b00      	cmp	r3, #0
 800e25c:	d00d      	beq.n	800e27a <tcp_input+0x46a>
 800e25e:	697b      	ldr	r3, [r7, #20]
 800e260:	681b      	ldr	r3, [r3, #0]
 800e262:	2b00      	cmp	r3, #0
 800e264:	d009      	beq.n	800e27a <tcp_input+0x46a>
>>>>>>> Stashed changes
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
<<<<<<< Updated upstream
 800e296:	697b      	ldr	r3, [r7, #20]
 800e298:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e29a:	697b      	ldr	r3, [r7, #20]
 800e29c:	68db      	ldr	r3, [r3, #12]
 800e29e:	617b      	str	r3, [r7, #20]
 800e2a0:	697b      	ldr	r3, [r7, #20]
 800e2a2:	2b00      	cmp	r3, #0
 800e2a4:	d1d1      	bne.n	800e24a <tcp_input+0x40a>
 800e2a6:	e000      	b.n	800e2aa <tcp_input+0x46a>
            break;
 800e2a8:	bf00      	nop
=======
 800e266:	697b      	ldr	r3, [r7, #20]
 800e268:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e26a:	697b      	ldr	r3, [r7, #20]
 800e26c:	68db      	ldr	r3, [r3, #12]
 800e26e:	617b      	str	r3, [r7, #20]
 800e270:	697b      	ldr	r3, [r7, #20]
 800e272:	2b00      	cmp	r3, #0
 800e274:	d1d1      	bne.n	800e21a <tcp_input+0x40a>
 800e276:	e000      	b.n	800e27a <tcp_input+0x46a>
            break;
 800e278:	bf00      	nop
>>>>>>> Stashed changes
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
<<<<<<< Updated upstream
 800e2aa:	697b      	ldr	r3, [r7, #20]
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	d014      	beq.n	800e2da <tcp_input+0x49a>
=======
 800e27a:	697b      	ldr	r3, [r7, #20]
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	d014      	beq.n	800e2aa <tcp_input+0x49a>
>>>>>>> Stashed changes
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
<<<<<<< Updated upstream
 800e2b0:	69bb      	ldr	r3, [r7, #24]
 800e2b2:	2b00      	cmp	r3, #0
 800e2b4:	d00a      	beq.n	800e2cc <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800e2b6:	697b      	ldr	r3, [r7, #20]
 800e2b8:	68da      	ldr	r2, [r3, #12]
 800e2ba:	69bb      	ldr	r3, [r7, #24]
 800e2bc:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800e2be:	4b32      	ldr	r3, [pc, #200]	; (800e388 <tcp_input+0x548>)
 800e2c0:	681a      	ldr	r2, [r3, #0]
 800e2c2:	697b      	ldr	r3, [r7, #20]
 800e2c4:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800e2c6:	4a30      	ldr	r2, [pc, #192]	; (800e388 <tcp_input+0x548>)
 800e2c8:	697b      	ldr	r3, [r7, #20]
 800e2ca:	6013      	str	r3, [r2, #0]
=======
 800e280:	69bb      	ldr	r3, [r7, #24]
 800e282:	2b00      	cmp	r3, #0
 800e284:	d00a      	beq.n	800e29c <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800e286:	697b      	ldr	r3, [r7, #20]
 800e288:	68da      	ldr	r2, [r3, #12]
 800e28a:	69bb      	ldr	r3, [r7, #24]
 800e28c:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800e28e:	4b32      	ldr	r3, [pc, #200]	; (800e358 <tcp_input+0x548>)
 800e290:	681a      	ldr	r2, [r3, #0]
 800e292:	697b      	ldr	r3, [r7, #20]
 800e294:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800e296:	4a30      	ldr	r2, [pc, #192]	; (800e358 <tcp_input+0x548>)
 800e298:	697b      	ldr	r3, [r7, #20]
 800e29a:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
<<<<<<< Updated upstream
 800e2cc:	6978      	ldr	r0, [r7, #20]
 800e2ce:	f000 fa01 	bl	800e6d4 <tcp_listen_input>
      }
      pbuf_free(p);
 800e2d2:	6878      	ldr	r0, [r7, #4]
 800e2d4:	f7fd ff8c 	bl	800c1f0 <pbuf_free>
      return;
 800e2d8:	e19b      	b.n	800e612 <tcp_input+0x7d2>
=======
 800e29c:	6978      	ldr	r0, [r7, #20]
 800e29e:	f000 fa01 	bl	800e6a4 <tcp_listen_input>
      }
      pbuf_free(p);
 800e2a2:	6878      	ldr	r0, [r7, #4]
 800e2a4:	f7fd ff8c 	bl	800c1c0 <pbuf_free>
      return;
 800e2a8:	e19b      	b.n	800e5e2 <tcp_input+0x7d2>
>>>>>>> Stashed changes
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
<<<<<<< Updated upstream
 800e2da:	69fb      	ldr	r3, [r7, #28]
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	f000 8160 	beq.w	800e5a2 <tcp_input+0x762>
=======
 800e2aa:	69fb      	ldr	r3, [r7, #28]
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	f000 8160 	beq.w	800e572 <tcp_input+0x762>
>>>>>>> Stashed changes
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
<<<<<<< Updated upstream
 800e2e2:	4b2a      	ldr	r3, [pc, #168]	; (800e38c <tcp_input+0x54c>)
 800e2e4:	2200      	movs	r2, #0
 800e2e6:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	891a      	ldrh	r2, [r3, #8]
 800e2ec:	4b27      	ldr	r3, [pc, #156]	; (800e38c <tcp_input+0x54c>)
 800e2ee:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800e2f0:	4a26      	ldr	r2, [pc, #152]	; (800e38c <tcp_input+0x54c>)
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800e2f6:	4b1b      	ldr	r3, [pc, #108]	; (800e364 <tcp_input+0x524>)
 800e2f8:	681b      	ldr	r3, [r3, #0]
 800e2fa:	4a24      	ldr	r2, [pc, #144]	; (800e38c <tcp_input+0x54c>)
 800e2fc:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800e2fe:	4b24      	ldr	r3, [pc, #144]	; (800e390 <tcp_input+0x550>)
 800e300:	2200      	movs	r2, #0
 800e302:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800e304:	4b23      	ldr	r3, [pc, #140]	; (800e394 <tcp_input+0x554>)
 800e306:	2200      	movs	r2, #0
 800e308:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800e30a:	4b23      	ldr	r3, [pc, #140]	; (800e398 <tcp_input+0x558>)
 800e30c:	2200      	movs	r2, #0
 800e30e:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800e310:	4b22      	ldr	r3, [pc, #136]	; (800e39c <tcp_input+0x55c>)
 800e312:	781b      	ldrb	r3, [r3, #0]
 800e314:	f003 0308 	and.w	r3, r3, #8
 800e318:	2b00      	cmp	r3, #0
 800e31a:	d006      	beq.n	800e32a <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	7b5b      	ldrb	r3, [r3, #13]
 800e320:	f043 0301 	orr.w	r3, r3, #1
 800e324:	b2da      	uxtb	r2, r3
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	735a      	strb	r2, [r3, #13]
=======
 800e2b2:	4b2a      	ldr	r3, [pc, #168]	; (800e35c <tcp_input+0x54c>)
 800e2b4:	2200      	movs	r2, #0
 800e2b6:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	891a      	ldrh	r2, [r3, #8]
 800e2bc:	4b27      	ldr	r3, [pc, #156]	; (800e35c <tcp_input+0x54c>)
 800e2be:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800e2c0:	4a26      	ldr	r2, [pc, #152]	; (800e35c <tcp_input+0x54c>)
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800e2c6:	4b1b      	ldr	r3, [pc, #108]	; (800e334 <tcp_input+0x524>)
 800e2c8:	681b      	ldr	r3, [r3, #0]
 800e2ca:	4a24      	ldr	r2, [pc, #144]	; (800e35c <tcp_input+0x54c>)
 800e2cc:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800e2ce:	4b24      	ldr	r3, [pc, #144]	; (800e360 <tcp_input+0x550>)
 800e2d0:	2200      	movs	r2, #0
 800e2d2:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800e2d4:	4b23      	ldr	r3, [pc, #140]	; (800e364 <tcp_input+0x554>)
 800e2d6:	2200      	movs	r2, #0
 800e2d8:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800e2da:	4b23      	ldr	r3, [pc, #140]	; (800e368 <tcp_input+0x558>)
 800e2dc:	2200      	movs	r2, #0
 800e2de:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800e2e0:	4b22      	ldr	r3, [pc, #136]	; (800e36c <tcp_input+0x55c>)
 800e2e2:	781b      	ldrb	r3, [r3, #0]
 800e2e4:	f003 0308 	and.w	r3, r3, #8
 800e2e8:	2b00      	cmp	r3, #0
 800e2ea:	d006      	beq.n	800e2fa <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	7b5b      	ldrb	r3, [r3, #13]
 800e2f0:	f043 0301 	orr.w	r3, r3, #1
 800e2f4:	b2da      	uxtb	r2, r3
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	735a      	strb	r2, [r3, #13]
>>>>>>> Stashed changes
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
<<<<<<< Updated upstream
 800e32a:	69fb      	ldr	r3, [r7, #28]
 800e32c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e32e:	2b00      	cmp	r3, #0
 800e330:	d038      	beq.n	800e3a4 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800e332:	69f8      	ldr	r0, [r7, #28]
 800e334:	f7ff f93e 	bl	800d5b4 <tcp_process_refused_data>
 800e338:	4603      	mov	r3, r0
 800e33a:	f113 0f0d 	cmn.w	r3, #13
 800e33e:	d007      	beq.n	800e350 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800e340:	69fb      	ldr	r3, [r7, #28]
 800e342:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800e344:	2b00      	cmp	r3, #0
 800e346:	d02d      	beq.n	800e3a4 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800e348:	4b15      	ldr	r3, [pc, #84]	; (800e3a0 <tcp_input+0x560>)
 800e34a:	881b      	ldrh	r3, [r3, #0]
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	d029      	beq.n	800e3a4 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800e350:	69fb      	ldr	r3, [r7, #28]
 800e352:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e354:	2b00      	cmp	r3, #0
 800e356:	f040 8104 	bne.w	800e562 <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800e35a:	69f8      	ldr	r0, [r7, #28]
 800e35c:	f003 f9be 	bl	80116dc <tcp_send_empty_ack>
=======
 800e2fa:	69fb      	ldr	r3, [r7, #28]
 800e2fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	d038      	beq.n	800e374 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800e302:	69f8      	ldr	r0, [r7, #28]
 800e304:	f7ff f93e 	bl	800d584 <tcp_process_refused_data>
 800e308:	4603      	mov	r3, r0
 800e30a:	f113 0f0d 	cmn.w	r3, #13
 800e30e:	d007      	beq.n	800e320 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800e310:	69fb      	ldr	r3, [r7, #28]
 800e312:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800e314:	2b00      	cmp	r3, #0
 800e316:	d02d      	beq.n	800e374 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800e318:	4b15      	ldr	r3, [pc, #84]	; (800e370 <tcp_input+0x560>)
 800e31a:	881b      	ldrh	r3, [r3, #0]
 800e31c:	2b00      	cmp	r3, #0
 800e31e:	d029      	beq.n	800e374 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800e320:	69fb      	ldr	r3, [r7, #28]
 800e322:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e324:	2b00      	cmp	r3, #0
 800e326:	f040 8104 	bne.w	800e532 <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800e32a:	69f8      	ldr	r0, [r7, #28]
 800e32c:	f003 f9be 	bl	80116ac <tcp_send_empty_ack>
>>>>>>> Stashed changes
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
<<<<<<< Updated upstream
 800e360:	e0ff      	b.n	800e562 <tcp_input+0x722>
 800e362:	bf00      	nop
 800e364:	200000f8 	.word	0x200000f8
 800e368:	20003d5c 	.word	0x20003d5c
 800e36c:	08016b90 	.word	0x08016b90
 800e370:	08016cbc 	.word	0x08016cbc
 800e374:	08016bdc 	.word	0x08016bdc
 800e378:	200072a0 	.word	0x200072a0
 800e37c:	08016ce8 	.word	0x08016ce8
 800e380:	200072b0 	.word	0x200072b0
 800e384:	08016d14 	.word	0x08016d14
 800e388:	200072a8 	.word	0x200072a8
 800e38c:	200000e8 	.word	0x200000e8
 800e390:	20000118 	.word	0x20000118
 800e394:	20000115 	.word	0x20000115
 800e398:	20000110 	.word	0x20000110
 800e39c:	20000114 	.word	0x20000114
 800e3a0:	20000112 	.word	0x20000112
      }
    }
    tcp_input_pcb = pcb;
 800e3a4:	4a9c      	ldr	r2, [pc, #624]	; (800e618 <tcp_input+0x7d8>)
 800e3a6:	69fb      	ldr	r3, [r7, #28]
 800e3a8:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800e3aa:	69f8      	ldr	r0, [r7, #28]
 800e3ac:	f000 fb0a 	bl	800e9c4 <tcp_process>
 800e3b0:	4603      	mov	r3, r0
 800e3b2:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800e3b4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e3b8:	f113 0f0d 	cmn.w	r3, #13
 800e3bc:	f000 80d3 	beq.w	800e566 <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 800e3c0:	4b96      	ldr	r3, [pc, #600]	; (800e61c <tcp_input+0x7dc>)
 800e3c2:	781b      	ldrb	r3, [r3, #0]
 800e3c4:	f003 0308 	and.w	r3, r3, #8
 800e3c8:	2b00      	cmp	r3, #0
 800e3ca:	d015      	beq.n	800e3f8 <tcp_input+0x5b8>
=======
 800e330:	e0ff      	b.n	800e532 <tcp_input+0x722>
 800e332:	bf00      	nop
 800e334:	200000f8 	.word	0x200000f8
 800e338:	20003d5c 	.word	0x20003d5c
 800e33c:	08016b74 	.word	0x08016b74
 800e340:	08016ca0 	.word	0x08016ca0
 800e344:	08016bc0 	.word	0x08016bc0
 800e348:	200072a0 	.word	0x200072a0
 800e34c:	08016ccc 	.word	0x08016ccc
 800e350:	200072b0 	.word	0x200072b0
 800e354:	08016cf8 	.word	0x08016cf8
 800e358:	200072a8 	.word	0x200072a8
 800e35c:	200000e8 	.word	0x200000e8
 800e360:	20000118 	.word	0x20000118
 800e364:	20000115 	.word	0x20000115
 800e368:	20000110 	.word	0x20000110
 800e36c:	20000114 	.word	0x20000114
 800e370:	20000112 	.word	0x20000112
      }
    }
    tcp_input_pcb = pcb;
 800e374:	4a9c      	ldr	r2, [pc, #624]	; (800e5e8 <tcp_input+0x7d8>)
 800e376:	69fb      	ldr	r3, [r7, #28]
 800e378:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800e37a:	69f8      	ldr	r0, [r7, #28]
 800e37c:	f000 fb0a 	bl	800e994 <tcp_process>
 800e380:	4603      	mov	r3, r0
 800e382:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800e384:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e388:	f113 0f0d 	cmn.w	r3, #13
 800e38c:	f000 80d3 	beq.w	800e536 <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 800e390:	4b96      	ldr	r3, [pc, #600]	; (800e5ec <tcp_input+0x7dc>)
 800e392:	781b      	ldrb	r3, [r3, #0]
 800e394:	f003 0308 	and.w	r3, r3, #8
 800e398:	2b00      	cmp	r3, #0
 800e39a:	d015      	beq.n	800e3c8 <tcp_input+0x5b8>
>>>>>>> Stashed changes
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
<<<<<<< Updated upstream
 800e3cc:	69fb      	ldr	r3, [r7, #28]
 800e3ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e3d2:	2b00      	cmp	r3, #0
 800e3d4:	d008      	beq.n	800e3e8 <tcp_input+0x5a8>
 800e3d6:	69fb      	ldr	r3, [r7, #28]
 800e3d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e3dc:	69fa      	ldr	r2, [r7, #28]
 800e3de:	6912      	ldr	r2, [r2, #16]
 800e3e0:	f06f 010d 	mvn.w	r1, #13
 800e3e4:	4610      	mov	r0, r2
 800e3e6:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800e3e8:	69f9      	ldr	r1, [r7, #28]
 800e3ea:	488d      	ldr	r0, [pc, #564]	; (800e620 <tcp_input+0x7e0>)
 800e3ec:	f7ff fbb0 	bl	800db50 <tcp_pcb_remove>
        tcp_free(pcb);
 800e3f0:	69f8      	ldr	r0, [r7, #28]
 800e3f2:	f7fe f99d 	bl	800c730 <tcp_free>
 800e3f6:	e0c1      	b.n	800e57c <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 800e3f8:	2300      	movs	r3, #0
 800e3fa:	74fb      	strb	r3, [r7, #19]
=======
 800e39c:	69fb      	ldr	r3, [r7, #28]
 800e39e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e3a2:	2b00      	cmp	r3, #0
 800e3a4:	d008      	beq.n	800e3b8 <tcp_input+0x5a8>
 800e3a6:	69fb      	ldr	r3, [r7, #28]
 800e3a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e3ac:	69fa      	ldr	r2, [r7, #28]
 800e3ae:	6912      	ldr	r2, [r2, #16]
 800e3b0:	f06f 010d 	mvn.w	r1, #13
 800e3b4:	4610      	mov	r0, r2
 800e3b6:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800e3b8:	69f9      	ldr	r1, [r7, #28]
 800e3ba:	488d      	ldr	r0, [pc, #564]	; (800e5f0 <tcp_input+0x7e0>)
 800e3bc:	f7ff fbb0 	bl	800db20 <tcp_pcb_remove>
        tcp_free(pcb);
 800e3c0:	69f8      	ldr	r0, [r7, #28]
 800e3c2:	f7fe f99d 	bl	800c700 <tcp_free>
 800e3c6:	e0c1      	b.n	800e54c <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 800e3c8:	2300      	movs	r3, #0
 800e3ca:	74fb      	strb	r3, [r7, #19]
>>>>>>> Stashed changes
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
<<<<<<< Updated upstream
 800e3fc:	4b89      	ldr	r3, [pc, #548]	; (800e624 <tcp_input+0x7e4>)
 800e3fe:	881b      	ldrh	r3, [r3, #0]
 800e400:	2b00      	cmp	r3, #0
 800e402:	d01d      	beq.n	800e440 <tcp_input+0x600>
=======
 800e3cc:	4b89      	ldr	r3, [pc, #548]	; (800e5f4 <tcp_input+0x7e4>)
 800e3ce:	881b      	ldrh	r3, [r3, #0]
 800e3d0:	2b00      	cmp	r3, #0
 800e3d2:	d01d      	beq.n	800e410 <tcp_input+0x600>
>>>>>>> Stashed changes
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
<<<<<<< Updated upstream
 800e404:	4b87      	ldr	r3, [pc, #540]	; (800e624 <tcp_input+0x7e4>)
 800e406:	881b      	ldrh	r3, [r3, #0]
 800e408:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800e40a:	69fb      	ldr	r3, [r7, #28]
 800e40c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e410:	2b00      	cmp	r3, #0
 800e412:	d00a      	beq.n	800e42a <tcp_input+0x5ea>
 800e414:	69fb      	ldr	r3, [r7, #28]
 800e416:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e41a:	69fa      	ldr	r2, [r7, #28]
 800e41c:	6910      	ldr	r0, [r2, #16]
 800e41e:	89fa      	ldrh	r2, [r7, #14]
 800e420:	69f9      	ldr	r1, [r7, #28]
 800e422:	4798      	blx	r3
 800e424:	4603      	mov	r3, r0
 800e426:	74fb      	strb	r3, [r7, #19]
 800e428:	e001      	b.n	800e42e <tcp_input+0x5ee>
 800e42a:	2300      	movs	r3, #0
 800e42c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800e42e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e432:	f113 0f0d 	cmn.w	r3, #13
 800e436:	f000 8098 	beq.w	800e56a <tcp_input+0x72a>
=======
 800e3d4:	4b87      	ldr	r3, [pc, #540]	; (800e5f4 <tcp_input+0x7e4>)
 800e3d6:	881b      	ldrh	r3, [r3, #0]
 800e3d8:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800e3da:	69fb      	ldr	r3, [r7, #28]
 800e3dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	d00a      	beq.n	800e3fa <tcp_input+0x5ea>
 800e3e4:	69fb      	ldr	r3, [r7, #28]
 800e3e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e3ea:	69fa      	ldr	r2, [r7, #28]
 800e3ec:	6910      	ldr	r0, [r2, #16]
 800e3ee:	89fa      	ldrh	r2, [r7, #14]
 800e3f0:	69f9      	ldr	r1, [r7, #28]
 800e3f2:	4798      	blx	r3
 800e3f4:	4603      	mov	r3, r0
 800e3f6:	74fb      	strb	r3, [r7, #19]
 800e3f8:	e001      	b.n	800e3fe <tcp_input+0x5ee>
 800e3fa:	2300      	movs	r3, #0
 800e3fc:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800e3fe:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e402:	f113 0f0d 	cmn.w	r3, #13
 800e406:	f000 8098 	beq.w	800e53a <tcp_input+0x72a>
>>>>>>> Stashed changes
              goto aborted;
            }
          }
          recv_acked = 0;
<<<<<<< Updated upstream
 800e43a:	4b7a      	ldr	r3, [pc, #488]	; (800e624 <tcp_input+0x7e4>)
 800e43c:	2200      	movs	r2, #0
 800e43e:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800e440:	69f8      	ldr	r0, [r7, #28]
 800e442:	f000 f907 	bl	800e654 <tcp_input_delayed_close>
 800e446:	4603      	mov	r3, r0
 800e448:	2b00      	cmp	r3, #0
 800e44a:	f040 8090 	bne.w	800e56e <tcp_input+0x72e>
=======
 800e40a:	4b7a      	ldr	r3, [pc, #488]	; (800e5f4 <tcp_input+0x7e4>)
 800e40c:	2200      	movs	r2, #0
 800e40e:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800e410:	69f8      	ldr	r0, [r7, #28]
 800e412:	f000 f907 	bl	800e624 <tcp_input_delayed_close>
 800e416:	4603      	mov	r3, r0
 800e418:	2b00      	cmp	r3, #0
 800e41a:	f040 8090 	bne.w	800e53e <tcp_input+0x72e>
>>>>>>> Stashed changes
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
<<<<<<< Updated upstream
 800e44e:	4b76      	ldr	r3, [pc, #472]	; (800e628 <tcp_input+0x7e8>)
 800e450:	681b      	ldr	r3, [r3, #0]
 800e452:	2b00      	cmp	r3, #0
 800e454:	d041      	beq.n	800e4da <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800e456:	69fb      	ldr	r3, [r7, #28]
 800e458:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	d006      	beq.n	800e46c <tcp_input+0x62c>
 800e45e:	4b73      	ldr	r3, [pc, #460]	; (800e62c <tcp_input+0x7ec>)
 800e460:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800e464:	4972      	ldr	r1, [pc, #456]	; (800e630 <tcp_input+0x7f0>)
 800e466:	4873      	ldr	r0, [pc, #460]	; (800e634 <tcp_input+0x7f4>)
 800e468:	f006 f88c 	bl	8014584 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800e46c:	69fb      	ldr	r3, [r7, #28]
 800e46e:	8b5b      	ldrh	r3, [r3, #26]
 800e470:	f003 0310 	and.w	r3, r3, #16
 800e474:	2b00      	cmp	r3, #0
 800e476:	d008      	beq.n	800e48a <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800e478:	4b6b      	ldr	r3, [pc, #428]	; (800e628 <tcp_input+0x7e8>)
 800e47a:	681b      	ldr	r3, [r3, #0]
 800e47c:	4618      	mov	r0, r3
 800e47e:	f7fd feb7 	bl	800c1f0 <pbuf_free>
=======
 800e41e:	4b76      	ldr	r3, [pc, #472]	; (800e5f8 <tcp_input+0x7e8>)
 800e420:	681b      	ldr	r3, [r3, #0]
 800e422:	2b00      	cmp	r3, #0
 800e424:	d041      	beq.n	800e4aa <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800e426:	69fb      	ldr	r3, [r7, #28]
 800e428:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e42a:	2b00      	cmp	r3, #0
 800e42c:	d006      	beq.n	800e43c <tcp_input+0x62c>
 800e42e:	4b73      	ldr	r3, [pc, #460]	; (800e5fc <tcp_input+0x7ec>)
 800e430:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800e434:	4972      	ldr	r1, [pc, #456]	; (800e600 <tcp_input+0x7f0>)
 800e436:	4873      	ldr	r0, [pc, #460]	; (800e604 <tcp_input+0x7f4>)
 800e438:	f006 f88c 	bl	8014554 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800e43c:	69fb      	ldr	r3, [r7, #28]
 800e43e:	8b5b      	ldrh	r3, [r3, #26]
 800e440:	f003 0310 	and.w	r3, r3, #16
 800e444:	2b00      	cmp	r3, #0
 800e446:	d008      	beq.n	800e45a <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800e448:	4b6b      	ldr	r3, [pc, #428]	; (800e5f8 <tcp_input+0x7e8>)
 800e44a:	681b      	ldr	r3, [r3, #0]
 800e44c:	4618      	mov	r0, r3
 800e44e:	f7fd feb7 	bl	800c1c0 <pbuf_free>
>>>>>>> Stashed changes
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
<<<<<<< Updated upstream
 800e482:	69f8      	ldr	r0, [r7, #28]
 800e484:	f7fe fc3c 	bl	800cd00 <tcp_abort>
            goto aborted;
 800e488:	e078      	b.n	800e57c <tcp_input+0x73c>
=======
 800e452:	69f8      	ldr	r0, [r7, #28]
 800e454:	f7fe fc3c 	bl	800ccd0 <tcp_abort>
            goto aborted;
 800e458:	e078      	b.n	800e54c <tcp_input+0x73c>
>>>>>>> Stashed changes
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
<<<<<<< Updated upstream
 800e48a:	69fb      	ldr	r3, [r7, #28]
 800e48c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e490:	2b00      	cmp	r3, #0
 800e492:	d00c      	beq.n	800e4ae <tcp_input+0x66e>
 800e494:	69fb      	ldr	r3, [r7, #28]
 800e496:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800e49a:	69fb      	ldr	r3, [r7, #28]
 800e49c:	6918      	ldr	r0, [r3, #16]
 800e49e:	4b62      	ldr	r3, [pc, #392]	; (800e628 <tcp_input+0x7e8>)
 800e4a0:	681a      	ldr	r2, [r3, #0]
 800e4a2:	2300      	movs	r3, #0
 800e4a4:	69f9      	ldr	r1, [r7, #28]
 800e4a6:	47a0      	blx	r4
 800e4a8:	4603      	mov	r3, r0
 800e4aa:	74fb      	strb	r3, [r7, #19]
 800e4ac:	e008      	b.n	800e4c0 <tcp_input+0x680>
 800e4ae:	4b5e      	ldr	r3, [pc, #376]	; (800e628 <tcp_input+0x7e8>)
 800e4b0:	681a      	ldr	r2, [r3, #0]
 800e4b2:	2300      	movs	r3, #0
 800e4b4:	69f9      	ldr	r1, [r7, #28]
 800e4b6:	2000      	movs	r0, #0
 800e4b8:	f7ff f952 	bl	800d760 <tcp_recv_null>
 800e4bc:	4603      	mov	r3, r0
 800e4be:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800e4c0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e4c4:	f113 0f0d 	cmn.w	r3, #13
 800e4c8:	d053      	beq.n	800e572 <tcp_input+0x732>
=======
 800e45a:	69fb      	ldr	r3, [r7, #28]
 800e45c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e460:	2b00      	cmp	r3, #0
 800e462:	d00c      	beq.n	800e47e <tcp_input+0x66e>
 800e464:	69fb      	ldr	r3, [r7, #28]
 800e466:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800e46a:	69fb      	ldr	r3, [r7, #28]
 800e46c:	6918      	ldr	r0, [r3, #16]
 800e46e:	4b62      	ldr	r3, [pc, #392]	; (800e5f8 <tcp_input+0x7e8>)
 800e470:	681a      	ldr	r2, [r3, #0]
 800e472:	2300      	movs	r3, #0
 800e474:	69f9      	ldr	r1, [r7, #28]
 800e476:	47a0      	blx	r4
 800e478:	4603      	mov	r3, r0
 800e47a:	74fb      	strb	r3, [r7, #19]
 800e47c:	e008      	b.n	800e490 <tcp_input+0x680>
 800e47e:	4b5e      	ldr	r3, [pc, #376]	; (800e5f8 <tcp_input+0x7e8>)
 800e480:	681a      	ldr	r2, [r3, #0]
 800e482:	2300      	movs	r3, #0
 800e484:	69f9      	ldr	r1, [r7, #28]
 800e486:	2000      	movs	r0, #0
 800e488:	f7ff f952 	bl	800d730 <tcp_recv_null>
 800e48c:	4603      	mov	r3, r0
 800e48e:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800e490:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e494:	f113 0f0d 	cmn.w	r3, #13
 800e498:	d053      	beq.n	800e542 <tcp_input+0x732>
>>>>>>> Stashed changes
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
<<<<<<< Updated upstream
 800e4ca:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	d003      	beq.n	800e4da <tcp_input+0x69a>
=======
 800e49a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	d003      	beq.n	800e4aa <tcp_input+0x69a>
>>>>>>> Stashed changes
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
<<<<<<< Updated upstream
 800e4d2:	4b55      	ldr	r3, [pc, #340]	; (800e628 <tcp_input+0x7e8>)
 800e4d4:	681a      	ldr	r2, [r3, #0]
 800e4d6:	69fb      	ldr	r3, [r7, #28]
 800e4d8:	679a      	str	r2, [r3, #120]	; 0x78
=======
 800e4a2:	4b55      	ldr	r3, [pc, #340]	; (800e5f8 <tcp_input+0x7e8>)
 800e4a4:	681a      	ldr	r2, [r3, #0]
 800e4a6:	69fb      	ldr	r3, [r7, #28]
 800e4a8:	679a      	str	r2, [r3, #120]	; 0x78
>>>>>>> Stashed changes
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
<<<<<<< Updated upstream
 800e4da:	4b50      	ldr	r3, [pc, #320]	; (800e61c <tcp_input+0x7dc>)
 800e4dc:	781b      	ldrb	r3, [r3, #0]
 800e4de:	f003 0320 	and.w	r3, r3, #32
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	d030      	beq.n	800e548 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 800e4e6:	69fb      	ldr	r3, [r7, #28]
 800e4e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	d009      	beq.n	800e502 <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800e4ee:	69fb      	ldr	r3, [r7, #28]
 800e4f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e4f2:	7b5a      	ldrb	r2, [r3, #13]
 800e4f4:	69fb      	ldr	r3, [r7, #28]
 800e4f6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e4f8:	f042 0220 	orr.w	r2, r2, #32
 800e4fc:	b2d2      	uxtb	r2, r2
 800e4fe:	735a      	strb	r2, [r3, #13]
 800e500:	e022      	b.n	800e548 <tcp_input+0x708>
=======
 800e4aa:	4b50      	ldr	r3, [pc, #320]	; (800e5ec <tcp_input+0x7dc>)
 800e4ac:	781b      	ldrb	r3, [r3, #0]
 800e4ae:	f003 0320 	and.w	r3, r3, #32
 800e4b2:	2b00      	cmp	r3, #0
 800e4b4:	d030      	beq.n	800e518 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 800e4b6:	69fb      	ldr	r3, [r7, #28]
 800e4b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e4ba:	2b00      	cmp	r3, #0
 800e4bc:	d009      	beq.n	800e4d2 <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800e4be:	69fb      	ldr	r3, [r7, #28]
 800e4c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e4c2:	7b5a      	ldrb	r2, [r3, #13]
 800e4c4:	69fb      	ldr	r3, [r7, #28]
 800e4c6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e4c8:	f042 0220 	orr.w	r2, r2, #32
 800e4cc:	b2d2      	uxtb	r2, r2
 800e4ce:	735a      	strb	r2, [r3, #13]
 800e4d0:	e022      	b.n	800e518 <tcp_input+0x708>
>>>>>>> Stashed changes
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
<<<<<<< Updated upstream
 800e502:	69fb      	ldr	r3, [r7, #28]
 800e504:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e506:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800e50a:	d005      	beq.n	800e518 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 800e50c:	69fb      	ldr	r3, [r7, #28]
 800e50e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e510:	3301      	adds	r3, #1
 800e512:	b29a      	uxth	r2, r3
 800e514:	69fb      	ldr	r3, [r7, #28]
 800e516:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800e518:	69fb      	ldr	r3, [r7, #28]
 800e51a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e51e:	2b00      	cmp	r3, #0
 800e520:	d00b      	beq.n	800e53a <tcp_input+0x6fa>
 800e522:	69fb      	ldr	r3, [r7, #28]
 800e524:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800e528:	69fb      	ldr	r3, [r7, #28]
 800e52a:	6918      	ldr	r0, [r3, #16]
 800e52c:	2300      	movs	r3, #0
 800e52e:	2200      	movs	r2, #0
 800e530:	69f9      	ldr	r1, [r7, #28]
 800e532:	47a0      	blx	r4
 800e534:	4603      	mov	r3, r0
 800e536:	74fb      	strb	r3, [r7, #19]
 800e538:	e001      	b.n	800e53e <tcp_input+0x6fe>
 800e53a:	2300      	movs	r3, #0
 800e53c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800e53e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e542:	f113 0f0d 	cmn.w	r3, #13
 800e546:	d016      	beq.n	800e576 <tcp_input+0x736>
=======
 800e4d2:	69fb      	ldr	r3, [r7, #28]
 800e4d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e4d6:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800e4da:	d005      	beq.n	800e4e8 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 800e4dc:	69fb      	ldr	r3, [r7, #28]
 800e4de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e4e0:	3301      	adds	r3, #1
 800e4e2:	b29a      	uxth	r2, r3
 800e4e4:	69fb      	ldr	r3, [r7, #28]
 800e4e6:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800e4e8:	69fb      	ldr	r3, [r7, #28]
 800e4ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	d00b      	beq.n	800e50a <tcp_input+0x6fa>
 800e4f2:	69fb      	ldr	r3, [r7, #28]
 800e4f4:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800e4f8:	69fb      	ldr	r3, [r7, #28]
 800e4fa:	6918      	ldr	r0, [r3, #16]
 800e4fc:	2300      	movs	r3, #0
 800e4fe:	2200      	movs	r2, #0
 800e500:	69f9      	ldr	r1, [r7, #28]
 800e502:	47a0      	blx	r4
 800e504:	4603      	mov	r3, r0
 800e506:	74fb      	strb	r3, [r7, #19]
 800e508:	e001      	b.n	800e50e <tcp_input+0x6fe>
 800e50a:	2300      	movs	r3, #0
 800e50c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800e50e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e512:	f113 0f0d 	cmn.w	r3, #13
 800e516:	d016      	beq.n	800e546 <tcp_input+0x736>
>>>>>>> Stashed changes
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
<<<<<<< Updated upstream
 800e548:	4b33      	ldr	r3, [pc, #204]	; (800e618 <tcp_input+0x7d8>)
 800e54a:	2200      	movs	r2, #0
 800e54c:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800e54e:	69f8      	ldr	r0, [r7, #28]
 800e550:	f000 f880 	bl	800e654 <tcp_input_delayed_close>
 800e554:	4603      	mov	r3, r0
 800e556:	2b00      	cmp	r3, #0
 800e558:	d10f      	bne.n	800e57a <tcp_input+0x73a>
=======
 800e518:	4b33      	ldr	r3, [pc, #204]	; (800e5e8 <tcp_input+0x7d8>)
 800e51a:	2200      	movs	r2, #0
 800e51c:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800e51e:	69f8      	ldr	r0, [r7, #28]
 800e520:	f000 f880 	bl	800e624 <tcp_input_delayed_close>
 800e524:	4603      	mov	r3, r0
 800e526:	2b00      	cmp	r3, #0
 800e528:	d10f      	bne.n	800e54a <tcp_input+0x73a>
>>>>>>> Stashed changes
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
<<<<<<< Updated upstream
 800e55a:	69f8      	ldr	r0, [r7, #28]
 800e55c:	f002 fab8 	bl	8010ad0 <tcp_output>
 800e560:	e00c      	b.n	800e57c <tcp_input+0x73c>
        goto aborted;
 800e562:	bf00      	nop
 800e564:	e00a      	b.n	800e57c <tcp_input+0x73c>
=======
 800e52a:	69f8      	ldr	r0, [r7, #28]
 800e52c:	f002 fab8 	bl	8010aa0 <tcp_output>
 800e530:	e00c      	b.n	800e54c <tcp_input+0x73c>
        goto aborted;
 800e532:	bf00      	nop
 800e534:	e00a      	b.n	800e54c <tcp_input+0x73c>
>>>>>>> Stashed changes
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
<<<<<<< Updated upstream
 800e566:	bf00      	nop
 800e568:	e008      	b.n	800e57c <tcp_input+0x73c>
              goto aborted;
 800e56a:	bf00      	nop
 800e56c:	e006      	b.n	800e57c <tcp_input+0x73c>
          goto aborted;
 800e56e:	bf00      	nop
 800e570:	e004      	b.n	800e57c <tcp_input+0x73c>
            goto aborted;
 800e572:	bf00      	nop
 800e574:	e002      	b.n	800e57c <tcp_input+0x73c>
              goto aborted;
 800e576:	bf00      	nop
 800e578:	e000      	b.n	800e57c <tcp_input+0x73c>
          goto aborted;
 800e57a:	bf00      	nop
    tcp_input_pcb = NULL;
 800e57c:	4b26      	ldr	r3, [pc, #152]	; (800e618 <tcp_input+0x7d8>)
 800e57e:	2200      	movs	r2, #0
 800e580:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800e582:	4b29      	ldr	r3, [pc, #164]	; (800e628 <tcp_input+0x7e8>)
 800e584:	2200      	movs	r2, #0
 800e586:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800e588:	4b2b      	ldr	r3, [pc, #172]	; (800e638 <tcp_input+0x7f8>)
 800e58a:	685b      	ldr	r3, [r3, #4]
 800e58c:	2b00      	cmp	r3, #0
 800e58e:	d03f      	beq.n	800e610 <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 800e590:	4b29      	ldr	r3, [pc, #164]	; (800e638 <tcp_input+0x7f8>)
 800e592:	685b      	ldr	r3, [r3, #4]
 800e594:	4618      	mov	r0, r3
 800e596:	f7fd fe2b 	bl	800c1f0 <pbuf_free>
      inseg.p = NULL;
 800e59a:	4b27      	ldr	r3, [pc, #156]	; (800e638 <tcp_input+0x7f8>)
 800e59c:	2200      	movs	r2, #0
 800e59e:	605a      	str	r2, [r3, #4]
=======
 800e536:	bf00      	nop
 800e538:	e008      	b.n	800e54c <tcp_input+0x73c>
              goto aborted;
 800e53a:	bf00      	nop
 800e53c:	e006      	b.n	800e54c <tcp_input+0x73c>
          goto aborted;
 800e53e:	bf00      	nop
 800e540:	e004      	b.n	800e54c <tcp_input+0x73c>
            goto aborted;
 800e542:	bf00      	nop
 800e544:	e002      	b.n	800e54c <tcp_input+0x73c>
              goto aborted;
 800e546:	bf00      	nop
 800e548:	e000      	b.n	800e54c <tcp_input+0x73c>
          goto aborted;
 800e54a:	bf00      	nop
    tcp_input_pcb = NULL;
 800e54c:	4b26      	ldr	r3, [pc, #152]	; (800e5e8 <tcp_input+0x7d8>)
 800e54e:	2200      	movs	r2, #0
 800e550:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800e552:	4b29      	ldr	r3, [pc, #164]	; (800e5f8 <tcp_input+0x7e8>)
 800e554:	2200      	movs	r2, #0
 800e556:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800e558:	4b2b      	ldr	r3, [pc, #172]	; (800e608 <tcp_input+0x7f8>)
 800e55a:	685b      	ldr	r3, [r3, #4]
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	d03f      	beq.n	800e5e0 <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 800e560:	4b29      	ldr	r3, [pc, #164]	; (800e608 <tcp_input+0x7f8>)
 800e562:	685b      	ldr	r3, [r3, #4]
 800e564:	4618      	mov	r0, r3
 800e566:	f7fd fe2b 	bl	800c1c0 <pbuf_free>
      inseg.p = NULL;
 800e56a:	4b27      	ldr	r3, [pc, #156]	; (800e608 <tcp_input+0x7f8>)
 800e56c:	2200      	movs	r2, #0
 800e56e:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
<<<<<<< Updated upstream
 800e5a0:	e036      	b.n	800e610 <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800e5a2:	4b26      	ldr	r3, [pc, #152]	; (800e63c <tcp_input+0x7fc>)
 800e5a4:	681b      	ldr	r3, [r3, #0]
 800e5a6:	899b      	ldrh	r3, [r3, #12]
 800e5a8:	b29b      	uxth	r3, r3
 800e5aa:	4618      	mov	r0, r3
 800e5ac:	f7fc fb8d 	bl	800acca <lwip_htons>
 800e5b0:	4603      	mov	r3, r0
 800e5b2:	b2db      	uxtb	r3, r3
 800e5b4:	f003 0304 	and.w	r3, r3, #4
 800e5b8:	2b00      	cmp	r3, #0
 800e5ba:	d118      	bne.n	800e5ee <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e5bc:	4b20      	ldr	r3, [pc, #128]	; (800e640 <tcp_input+0x800>)
 800e5be:	6819      	ldr	r1, [r3, #0]
 800e5c0:	4b20      	ldr	r3, [pc, #128]	; (800e644 <tcp_input+0x804>)
 800e5c2:	881b      	ldrh	r3, [r3, #0]
 800e5c4:	461a      	mov	r2, r3
 800e5c6:	4b20      	ldr	r3, [pc, #128]	; (800e648 <tcp_input+0x808>)
 800e5c8:	681b      	ldr	r3, [r3, #0]
 800e5ca:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e5cc:	4b1b      	ldr	r3, [pc, #108]	; (800e63c <tcp_input+0x7fc>)
 800e5ce:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e5d0:	885b      	ldrh	r3, [r3, #2]
 800e5d2:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e5d4:	4a19      	ldr	r2, [pc, #100]	; (800e63c <tcp_input+0x7fc>)
 800e5d6:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e5d8:	8812      	ldrh	r2, [r2, #0]
 800e5da:	b292      	uxth	r2, r2
 800e5dc:	9202      	str	r2, [sp, #8]
 800e5de:	9301      	str	r3, [sp, #4]
 800e5e0:	4b1a      	ldr	r3, [pc, #104]	; (800e64c <tcp_input+0x80c>)
 800e5e2:	9300      	str	r3, [sp, #0]
 800e5e4:	4b1a      	ldr	r3, [pc, #104]	; (800e650 <tcp_input+0x810>)
 800e5e6:	4602      	mov	r2, r0
 800e5e8:	2000      	movs	r0, #0
 800e5ea:	f003 f825 	bl	8011638 <tcp_rst>
    pbuf_free(p);
 800e5ee:	6878      	ldr	r0, [r7, #4]
 800e5f0:	f7fd fdfe 	bl	800c1f0 <pbuf_free>
  return;
 800e5f4:	e00c      	b.n	800e610 <tcp_input+0x7d0>
    goto dropped;
 800e5f6:	bf00      	nop
 800e5f8:	e006      	b.n	800e608 <tcp_input+0x7c8>
    goto dropped;
 800e5fa:	bf00      	nop
 800e5fc:	e004      	b.n	800e608 <tcp_input+0x7c8>
    goto dropped;
 800e5fe:	bf00      	nop
 800e600:	e002      	b.n	800e608 <tcp_input+0x7c8>
      goto dropped;
 800e602:	bf00      	nop
 800e604:	e000      	b.n	800e608 <tcp_input+0x7c8>
      goto dropped;
 800e606:	bf00      	nop
=======
 800e570:	e036      	b.n	800e5e0 <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800e572:	4b26      	ldr	r3, [pc, #152]	; (800e60c <tcp_input+0x7fc>)
 800e574:	681b      	ldr	r3, [r3, #0]
 800e576:	899b      	ldrh	r3, [r3, #12]
 800e578:	b29b      	uxth	r3, r3
 800e57a:	4618      	mov	r0, r3
 800e57c:	f7fc fb8d 	bl	800ac9a <lwip_htons>
 800e580:	4603      	mov	r3, r0
 800e582:	b2db      	uxtb	r3, r3
 800e584:	f003 0304 	and.w	r3, r3, #4
 800e588:	2b00      	cmp	r3, #0
 800e58a:	d118      	bne.n	800e5be <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e58c:	4b20      	ldr	r3, [pc, #128]	; (800e610 <tcp_input+0x800>)
 800e58e:	6819      	ldr	r1, [r3, #0]
 800e590:	4b20      	ldr	r3, [pc, #128]	; (800e614 <tcp_input+0x804>)
 800e592:	881b      	ldrh	r3, [r3, #0]
 800e594:	461a      	mov	r2, r3
 800e596:	4b20      	ldr	r3, [pc, #128]	; (800e618 <tcp_input+0x808>)
 800e598:	681b      	ldr	r3, [r3, #0]
 800e59a:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e59c:	4b1b      	ldr	r3, [pc, #108]	; (800e60c <tcp_input+0x7fc>)
 800e59e:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e5a0:	885b      	ldrh	r3, [r3, #2]
 800e5a2:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e5a4:	4a19      	ldr	r2, [pc, #100]	; (800e60c <tcp_input+0x7fc>)
 800e5a6:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e5a8:	8812      	ldrh	r2, [r2, #0]
 800e5aa:	b292      	uxth	r2, r2
 800e5ac:	9202      	str	r2, [sp, #8]
 800e5ae:	9301      	str	r3, [sp, #4]
 800e5b0:	4b1a      	ldr	r3, [pc, #104]	; (800e61c <tcp_input+0x80c>)
 800e5b2:	9300      	str	r3, [sp, #0]
 800e5b4:	4b1a      	ldr	r3, [pc, #104]	; (800e620 <tcp_input+0x810>)
 800e5b6:	4602      	mov	r2, r0
 800e5b8:	2000      	movs	r0, #0
 800e5ba:	f003 f825 	bl	8011608 <tcp_rst>
    pbuf_free(p);
 800e5be:	6878      	ldr	r0, [r7, #4]
 800e5c0:	f7fd fdfe 	bl	800c1c0 <pbuf_free>
  return;
 800e5c4:	e00c      	b.n	800e5e0 <tcp_input+0x7d0>
    goto dropped;
 800e5c6:	bf00      	nop
 800e5c8:	e006      	b.n	800e5d8 <tcp_input+0x7c8>
    goto dropped;
 800e5ca:	bf00      	nop
 800e5cc:	e004      	b.n	800e5d8 <tcp_input+0x7c8>
    goto dropped;
 800e5ce:	bf00      	nop
 800e5d0:	e002      	b.n	800e5d8 <tcp_input+0x7c8>
      goto dropped;
 800e5d2:	bf00      	nop
 800e5d4:	e000      	b.n	800e5d8 <tcp_input+0x7c8>
      goto dropped;
 800e5d6:	bf00      	nop
>>>>>>> Stashed changes
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
<<<<<<< Updated upstream
 800e608:	6878      	ldr	r0, [r7, #4]
 800e60a:	f7fd fdf1 	bl	800c1f0 <pbuf_free>
 800e60e:	e000      	b.n	800e612 <tcp_input+0x7d2>
  return;
 800e610:	bf00      	nop
}
 800e612:	3724      	adds	r7, #36	; 0x24
 800e614:	46bd      	mov	sp, r7
 800e616:	bd90      	pop	{r4, r7, pc}
 800e618:	200072b4 	.word	0x200072b4
 800e61c:	20000115 	.word	0x20000115
 800e620:	200072a0 	.word	0x200072a0
 800e624:	20000110 	.word	0x20000110
 800e628:	20000118 	.word	0x20000118
 800e62c:	08016b90 	.word	0x08016b90
 800e630:	08016d44 	.word	0x08016d44
 800e634:	08016bdc 	.word	0x08016bdc
 800e638:	200000e8 	.word	0x200000e8
 800e63c:	200000f8 	.word	0x200000f8
 800e640:	2000010c 	.word	0x2000010c
 800e644:	20000112 	.word	0x20000112
 800e648:	20000108 	.word	0x20000108
 800e64c:	20003d6c 	.word	0x20003d6c
 800e650:	20003d70 	.word	0x20003d70

0800e654 <tcp_input_delayed_close>:
=======
 800e5d8:	6878      	ldr	r0, [r7, #4]
 800e5da:	f7fd fdf1 	bl	800c1c0 <pbuf_free>
 800e5de:	e000      	b.n	800e5e2 <tcp_input+0x7d2>
  return;
 800e5e0:	bf00      	nop
}
 800e5e2:	3724      	adds	r7, #36	; 0x24
 800e5e4:	46bd      	mov	sp, r7
 800e5e6:	bd90      	pop	{r4, r7, pc}
 800e5e8:	200072b4 	.word	0x200072b4
 800e5ec:	20000115 	.word	0x20000115
 800e5f0:	200072a0 	.word	0x200072a0
 800e5f4:	20000110 	.word	0x20000110
 800e5f8:	20000118 	.word	0x20000118
 800e5fc:	08016b74 	.word	0x08016b74
 800e600:	08016d28 	.word	0x08016d28
 800e604:	08016bc0 	.word	0x08016bc0
 800e608:	200000e8 	.word	0x200000e8
 800e60c:	200000f8 	.word	0x200000f8
 800e610:	2000010c 	.word	0x2000010c
 800e614:	20000112 	.word	0x20000112
 800e618:	20000108 	.word	0x20000108
 800e61c:	20003d6c 	.word	0x20003d6c
 800e620:	20003d70 	.word	0x20003d70

0800e624 <tcp_input_delayed_close>:
>>>>>>> Stashed changes
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
<<<<<<< Updated upstream
 800e654:	b580      	push	{r7, lr}
 800e656:	b082      	sub	sp, #8
 800e658:	af00      	add	r7, sp, #0
 800e65a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	2b00      	cmp	r3, #0
 800e660:	d106      	bne.n	800e670 <tcp_input_delayed_close+0x1c>
 800e662:	4b17      	ldr	r3, [pc, #92]	; (800e6c0 <tcp_input_delayed_close+0x6c>)
 800e664:	f240 225a 	movw	r2, #602	; 0x25a
 800e668:	4916      	ldr	r1, [pc, #88]	; (800e6c4 <tcp_input_delayed_close+0x70>)
 800e66a:	4817      	ldr	r0, [pc, #92]	; (800e6c8 <tcp_input_delayed_close+0x74>)
 800e66c:	f005 ff8a 	bl	8014584 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800e670:	4b16      	ldr	r3, [pc, #88]	; (800e6cc <tcp_input_delayed_close+0x78>)
 800e672:	781b      	ldrb	r3, [r3, #0]
 800e674:	f003 0310 	and.w	r3, r3, #16
 800e678:	2b00      	cmp	r3, #0
 800e67a:	d01c      	beq.n	800e6b6 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	8b5b      	ldrh	r3, [r3, #26]
 800e680:	f003 0310 	and.w	r3, r3, #16
 800e684:	2b00      	cmp	r3, #0
 800e686:	d10d      	bne.n	800e6a4 <tcp_input_delayed_close+0x50>
=======
 800e624:	b580      	push	{r7, lr}
 800e626:	b082      	sub	sp, #8
 800e628:	af00      	add	r7, sp, #0
 800e62a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	2b00      	cmp	r3, #0
 800e630:	d106      	bne.n	800e640 <tcp_input_delayed_close+0x1c>
 800e632:	4b17      	ldr	r3, [pc, #92]	; (800e690 <tcp_input_delayed_close+0x6c>)
 800e634:	f240 225a 	movw	r2, #602	; 0x25a
 800e638:	4916      	ldr	r1, [pc, #88]	; (800e694 <tcp_input_delayed_close+0x70>)
 800e63a:	4817      	ldr	r0, [pc, #92]	; (800e698 <tcp_input_delayed_close+0x74>)
 800e63c:	f005 ff8a 	bl	8014554 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800e640:	4b16      	ldr	r3, [pc, #88]	; (800e69c <tcp_input_delayed_close+0x78>)
 800e642:	781b      	ldrb	r3, [r3, #0]
 800e644:	f003 0310 	and.w	r3, r3, #16
 800e648:	2b00      	cmp	r3, #0
 800e64a:	d01c      	beq.n	800e686 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	8b5b      	ldrh	r3, [r3, #26]
 800e650:	f003 0310 	and.w	r3, r3, #16
 800e654:	2b00      	cmp	r3, #0
 800e656:	d10d      	bne.n	800e674 <tcp_input_delayed_close+0x50>
>>>>>>> Stashed changes
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
<<<<<<< Updated upstream
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e68e:	2b00      	cmp	r3, #0
 800e690:	d008      	beq.n	800e6a4 <tcp_input_delayed_close+0x50>
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e698:	687a      	ldr	r2, [r7, #4]
 800e69a:	6912      	ldr	r2, [r2, #16]
 800e69c:	f06f 010e 	mvn.w	r1, #14
 800e6a0:	4610      	mov	r0, r2
 800e6a2:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800e6a4:	6879      	ldr	r1, [r7, #4]
 800e6a6:	480a      	ldr	r0, [pc, #40]	; (800e6d0 <tcp_input_delayed_close+0x7c>)
 800e6a8:	f7ff fa52 	bl	800db50 <tcp_pcb_remove>
    tcp_free(pcb);
 800e6ac:	6878      	ldr	r0, [r7, #4]
 800e6ae:	f7fe f83f 	bl	800c730 <tcp_free>
    return 1;
 800e6b2:	2301      	movs	r3, #1
 800e6b4:	e000      	b.n	800e6b8 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800e6b6:	2300      	movs	r3, #0
}
 800e6b8:	4618      	mov	r0, r3
 800e6ba:	3708      	adds	r7, #8
 800e6bc:	46bd      	mov	sp, r7
 800e6be:	bd80      	pop	{r7, pc}
 800e6c0:	08016b90 	.word	0x08016b90
 800e6c4:	08016d60 	.word	0x08016d60
 800e6c8:	08016bdc 	.word	0x08016bdc
 800e6cc:	20000115 	.word	0x20000115
 800e6d0:	200072a0 	.word	0x200072a0

0800e6d4 <tcp_listen_input>:
=======
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e65e:	2b00      	cmp	r3, #0
 800e660:	d008      	beq.n	800e674 <tcp_input_delayed_close+0x50>
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e668:	687a      	ldr	r2, [r7, #4]
 800e66a:	6912      	ldr	r2, [r2, #16]
 800e66c:	f06f 010e 	mvn.w	r1, #14
 800e670:	4610      	mov	r0, r2
 800e672:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800e674:	6879      	ldr	r1, [r7, #4]
 800e676:	480a      	ldr	r0, [pc, #40]	; (800e6a0 <tcp_input_delayed_close+0x7c>)
 800e678:	f7ff fa52 	bl	800db20 <tcp_pcb_remove>
    tcp_free(pcb);
 800e67c:	6878      	ldr	r0, [r7, #4]
 800e67e:	f7fe f83f 	bl	800c700 <tcp_free>
    return 1;
 800e682:	2301      	movs	r3, #1
 800e684:	e000      	b.n	800e688 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800e686:	2300      	movs	r3, #0
}
 800e688:	4618      	mov	r0, r3
 800e68a:	3708      	adds	r7, #8
 800e68c:	46bd      	mov	sp, r7
 800e68e:	bd80      	pop	{r7, pc}
 800e690:	08016b74 	.word	0x08016b74
 800e694:	08016d44 	.word	0x08016d44
 800e698:	08016bc0 	.word	0x08016bc0
 800e69c:	20000115 	.word	0x20000115
 800e6a0:	200072a0 	.word	0x200072a0

0800e6a4 <tcp_listen_input>:
>>>>>>> Stashed changes
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
<<<<<<< Updated upstream
 800e6d4:	b590      	push	{r4, r7, lr}
 800e6d6:	b08b      	sub	sp, #44	; 0x2c
 800e6d8:	af04      	add	r7, sp, #16
 800e6da:	6078      	str	r0, [r7, #4]
=======
 800e6a4:	b590      	push	{r4, r7, lr}
 800e6a6:	b08b      	sub	sp, #44	; 0x2c
 800e6a8:	af04      	add	r7, sp, #16
 800e6aa:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
<<<<<<< Updated upstream
 800e6dc:	4b6f      	ldr	r3, [pc, #444]	; (800e89c <tcp_listen_input+0x1c8>)
 800e6de:	781b      	ldrb	r3, [r3, #0]
 800e6e0:	f003 0304 	and.w	r3, r3, #4
 800e6e4:	2b00      	cmp	r3, #0
 800e6e6:	f040 80d2 	bne.w	800e88e <tcp_listen_input+0x1ba>
=======
 800e6ac:	4b6f      	ldr	r3, [pc, #444]	; (800e86c <tcp_listen_input+0x1c8>)
 800e6ae:	781b      	ldrb	r3, [r3, #0]
 800e6b0:	f003 0304 	and.w	r3, r3, #4
 800e6b4:	2b00      	cmp	r3, #0
 800e6b6:	f040 80d2 	bne.w	800e85e <tcp_listen_input+0x1ba>
>>>>>>> Stashed changes
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
<<<<<<< Updated upstream
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	2b00      	cmp	r3, #0
 800e6ee:	d106      	bne.n	800e6fe <tcp_listen_input+0x2a>
 800e6f0:	4b6b      	ldr	r3, [pc, #428]	; (800e8a0 <tcp_listen_input+0x1cc>)
 800e6f2:	f240 2281 	movw	r2, #641	; 0x281
 800e6f6:	496b      	ldr	r1, [pc, #428]	; (800e8a4 <tcp_listen_input+0x1d0>)
 800e6f8:	486b      	ldr	r0, [pc, #428]	; (800e8a8 <tcp_listen_input+0x1d4>)
 800e6fa:	f005 ff43 	bl	8014584 <iprintf>
=======
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	d106      	bne.n	800e6ce <tcp_listen_input+0x2a>
 800e6c0:	4b6b      	ldr	r3, [pc, #428]	; (800e870 <tcp_listen_input+0x1cc>)
 800e6c2:	f240 2281 	movw	r2, #641	; 0x281
 800e6c6:	496b      	ldr	r1, [pc, #428]	; (800e874 <tcp_listen_input+0x1d0>)
 800e6c8:	486b      	ldr	r0, [pc, #428]	; (800e878 <tcp_listen_input+0x1d4>)
 800e6ca:	f005 ff43 	bl	8014554 <iprintf>
>>>>>>> Stashed changes

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
<<<<<<< Updated upstream
 800e6fe:	4b67      	ldr	r3, [pc, #412]	; (800e89c <tcp_listen_input+0x1c8>)
 800e700:	781b      	ldrb	r3, [r3, #0]
 800e702:	f003 0310 	and.w	r3, r3, #16
 800e706:	2b00      	cmp	r3, #0
 800e708:	d019      	beq.n	800e73e <tcp_listen_input+0x6a>
=======
 800e6ce:	4b67      	ldr	r3, [pc, #412]	; (800e86c <tcp_listen_input+0x1c8>)
 800e6d0:	781b      	ldrb	r3, [r3, #0]
 800e6d2:	f003 0310 	and.w	r3, r3, #16
 800e6d6:	2b00      	cmp	r3, #0
 800e6d8:	d019      	beq.n	800e70e <tcp_listen_input+0x6a>
>>>>>>> Stashed changes
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
<<<<<<< Updated upstream
 800e70a:	4b68      	ldr	r3, [pc, #416]	; (800e8ac <tcp_listen_input+0x1d8>)
 800e70c:	6819      	ldr	r1, [r3, #0]
 800e70e:	4b68      	ldr	r3, [pc, #416]	; (800e8b0 <tcp_listen_input+0x1dc>)
 800e710:	881b      	ldrh	r3, [r3, #0]
 800e712:	461a      	mov	r2, r3
 800e714:	4b67      	ldr	r3, [pc, #412]	; (800e8b4 <tcp_listen_input+0x1e0>)
 800e716:	681b      	ldr	r3, [r3, #0]
 800e718:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e71a:	4b67      	ldr	r3, [pc, #412]	; (800e8b8 <tcp_listen_input+0x1e4>)
 800e71c:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e71e:	885b      	ldrh	r3, [r3, #2]
 800e720:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e722:	4a65      	ldr	r2, [pc, #404]	; (800e8b8 <tcp_listen_input+0x1e4>)
 800e724:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e726:	8812      	ldrh	r2, [r2, #0]
 800e728:	b292      	uxth	r2, r2
 800e72a:	9202      	str	r2, [sp, #8]
 800e72c:	9301      	str	r3, [sp, #4]
 800e72e:	4b63      	ldr	r3, [pc, #396]	; (800e8bc <tcp_listen_input+0x1e8>)
 800e730:	9300      	str	r3, [sp, #0]
 800e732:	4b63      	ldr	r3, [pc, #396]	; (800e8c0 <tcp_listen_input+0x1ec>)
 800e734:	4602      	mov	r2, r0
 800e736:	6878      	ldr	r0, [r7, #4]
 800e738:	f002 ff7e 	bl	8011638 <tcp_rst>
=======
 800e6da:	4b68      	ldr	r3, [pc, #416]	; (800e87c <tcp_listen_input+0x1d8>)
 800e6dc:	6819      	ldr	r1, [r3, #0]
 800e6de:	4b68      	ldr	r3, [pc, #416]	; (800e880 <tcp_listen_input+0x1dc>)
 800e6e0:	881b      	ldrh	r3, [r3, #0]
 800e6e2:	461a      	mov	r2, r3
 800e6e4:	4b67      	ldr	r3, [pc, #412]	; (800e884 <tcp_listen_input+0x1e0>)
 800e6e6:	681b      	ldr	r3, [r3, #0]
 800e6e8:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e6ea:	4b67      	ldr	r3, [pc, #412]	; (800e888 <tcp_listen_input+0x1e4>)
 800e6ec:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e6ee:	885b      	ldrh	r3, [r3, #2]
 800e6f0:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e6f2:	4a65      	ldr	r2, [pc, #404]	; (800e888 <tcp_listen_input+0x1e4>)
 800e6f4:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e6f6:	8812      	ldrh	r2, [r2, #0]
 800e6f8:	b292      	uxth	r2, r2
 800e6fa:	9202      	str	r2, [sp, #8]
 800e6fc:	9301      	str	r3, [sp, #4]
 800e6fe:	4b63      	ldr	r3, [pc, #396]	; (800e88c <tcp_listen_input+0x1e8>)
 800e700:	9300      	str	r3, [sp, #0]
 800e702:	4b63      	ldr	r3, [pc, #396]	; (800e890 <tcp_listen_input+0x1ec>)
 800e704:	4602      	mov	r2, r0
 800e706:	6878      	ldr	r0, [r7, #4]
 800e708:	f002 ff7e 	bl	8011608 <tcp_rst>
>>>>>>> Stashed changes
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
<<<<<<< Updated upstream
 800e73c:	e0a9      	b.n	800e892 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800e73e:	4b57      	ldr	r3, [pc, #348]	; (800e89c <tcp_listen_input+0x1c8>)
 800e740:	781b      	ldrb	r3, [r3, #0]
 800e742:	f003 0302 	and.w	r3, r3, #2
 800e746:	2b00      	cmp	r3, #0
 800e748:	f000 80a3 	beq.w	800e892 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	7d5b      	ldrb	r3, [r3, #21]
 800e750:	4618      	mov	r0, r3
 800e752:	f7ff f929 	bl	800d9a8 <tcp_alloc>
 800e756:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800e758:	697b      	ldr	r3, [r7, #20]
 800e75a:	2b00      	cmp	r3, #0
 800e75c:	d111      	bne.n	800e782 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	699b      	ldr	r3, [r3, #24]
 800e762:	2b00      	cmp	r3, #0
 800e764:	d00a      	beq.n	800e77c <tcp_listen_input+0xa8>
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	699b      	ldr	r3, [r3, #24]
 800e76a:	687a      	ldr	r2, [r7, #4]
 800e76c:	6910      	ldr	r0, [r2, #16]
 800e76e:	f04f 32ff 	mov.w	r2, #4294967295
 800e772:	2100      	movs	r1, #0
 800e774:	4798      	blx	r3
 800e776:	4603      	mov	r3, r0
 800e778:	73bb      	strb	r3, [r7, #14]
      return;
 800e77a:	e08b      	b.n	800e894 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800e77c:	23f0      	movs	r3, #240	; 0xf0
 800e77e:	73bb      	strb	r3, [r7, #14]
      return;
 800e780:	e088      	b.n	800e894 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800e782:	4b50      	ldr	r3, [pc, #320]	; (800e8c4 <tcp_listen_input+0x1f0>)
 800e784:	695a      	ldr	r2, [r3, #20]
 800e786:	697b      	ldr	r3, [r7, #20]
 800e788:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800e78a:	4b4e      	ldr	r3, [pc, #312]	; (800e8c4 <tcp_listen_input+0x1f0>)
 800e78c:	691a      	ldr	r2, [r3, #16]
 800e78e:	697b      	ldr	r3, [r7, #20]
 800e790:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	8ada      	ldrh	r2, [r3, #22]
 800e796:	697b      	ldr	r3, [r7, #20]
 800e798:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800e79a:	4b47      	ldr	r3, [pc, #284]	; (800e8b8 <tcp_listen_input+0x1e4>)
 800e79c:	681b      	ldr	r3, [r3, #0]
 800e79e:	881b      	ldrh	r3, [r3, #0]
 800e7a0:	b29a      	uxth	r2, r3
 800e7a2:	697b      	ldr	r3, [r7, #20]
 800e7a4:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800e7a6:	697b      	ldr	r3, [r7, #20]
 800e7a8:	2203      	movs	r2, #3
 800e7aa:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800e7ac:	4b41      	ldr	r3, [pc, #260]	; (800e8b4 <tcp_listen_input+0x1e0>)
 800e7ae:	681b      	ldr	r3, [r3, #0]
 800e7b0:	1c5a      	adds	r2, r3, #1
 800e7b2:	697b      	ldr	r3, [r7, #20]
 800e7b4:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800e7b6:	697b      	ldr	r3, [r7, #20]
 800e7b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e7ba:	697b      	ldr	r3, [r7, #20]
 800e7bc:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800e7be:	6978      	ldr	r0, [r7, #20]
 800e7c0:	f7ff fa5a 	bl	800dc78 <tcp_next_iss>
 800e7c4:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800e7c6:	697b      	ldr	r3, [r7, #20]
 800e7c8:	693a      	ldr	r2, [r7, #16]
 800e7ca:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800e7cc:	697b      	ldr	r3, [r7, #20]
 800e7ce:	693a      	ldr	r2, [r7, #16]
 800e7d0:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800e7d2:	697b      	ldr	r3, [r7, #20]
 800e7d4:	693a      	ldr	r2, [r7, #16]
 800e7d6:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800e7d8:	697b      	ldr	r3, [r7, #20]
 800e7da:	693a      	ldr	r2, [r7, #16]
 800e7dc:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800e7de:	4b35      	ldr	r3, [pc, #212]	; (800e8b4 <tcp_listen_input+0x1e0>)
 800e7e0:	681b      	ldr	r3, [r3, #0]
 800e7e2:	1e5a      	subs	r2, r3, #1
 800e7e4:	697b      	ldr	r3, [r7, #20]
 800e7e6:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	691a      	ldr	r2, [r3, #16]
 800e7ec:	697b      	ldr	r3, [r7, #20]
 800e7ee:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800e7f0:	697b      	ldr	r3, [r7, #20]
 800e7f2:	687a      	ldr	r2, [r7, #4]
 800e7f4:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	7a5b      	ldrb	r3, [r3, #9]
 800e7fa:	f003 030c 	and.w	r3, r3, #12
 800e7fe:	b2da      	uxtb	r2, r3
 800e800:	697b      	ldr	r3, [r7, #20]
 800e802:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	7a1a      	ldrb	r2, [r3, #8]
 800e808:	697b      	ldr	r3, [r7, #20]
 800e80a:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800e80c:	4b2e      	ldr	r3, [pc, #184]	; (800e8c8 <tcp_listen_input+0x1f4>)
 800e80e:	681a      	ldr	r2, [r3, #0]
 800e810:	697b      	ldr	r3, [r7, #20]
 800e812:	60da      	str	r2, [r3, #12]
 800e814:	4a2c      	ldr	r2, [pc, #176]	; (800e8c8 <tcp_listen_input+0x1f4>)
 800e816:	697b      	ldr	r3, [r7, #20]
 800e818:	6013      	str	r3, [r2, #0]
 800e81a:	f003 f8cf 	bl	80119bc <tcp_timer_needed>
 800e81e:	4b2b      	ldr	r3, [pc, #172]	; (800e8cc <tcp_listen_input+0x1f8>)
 800e820:	2201      	movs	r2, #1
 800e822:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800e824:	6978      	ldr	r0, [r7, #20]
 800e826:	f001 fd8d 	bl	8010344 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800e82a:	4b23      	ldr	r3, [pc, #140]	; (800e8b8 <tcp_listen_input+0x1e4>)
 800e82c:	681b      	ldr	r3, [r3, #0]
 800e82e:	89db      	ldrh	r3, [r3, #14]
 800e830:	b29a      	uxth	r2, r3
 800e832:	697b      	ldr	r3, [r7, #20]
 800e834:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800e838:	697b      	ldr	r3, [r7, #20]
 800e83a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800e83e:	697b      	ldr	r3, [r7, #20]
 800e840:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800e844:	697b      	ldr	r3, [r7, #20]
 800e846:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800e848:	697b      	ldr	r3, [r7, #20]
 800e84a:	3304      	adds	r3, #4
 800e84c:	4618      	mov	r0, r3
 800e84e:	f004 fc51 	bl	80130f4 <ip4_route>
 800e852:	4601      	mov	r1, r0
 800e854:	697b      	ldr	r3, [r7, #20]
 800e856:	3304      	adds	r3, #4
 800e858:	461a      	mov	r2, r3
 800e85a:	4620      	mov	r0, r4
 800e85c:	f7ff fa32 	bl	800dcc4 <tcp_eff_send_mss_netif>
 800e860:	4603      	mov	r3, r0
 800e862:	461a      	mov	r2, r3
 800e864:	697b      	ldr	r3, [r7, #20]
 800e866:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800e868:	2112      	movs	r1, #18
 800e86a:	6978      	ldr	r0, [r7, #20]
 800e86c:	f002 f842 	bl	80108f4 <tcp_enqueue_flags>
 800e870:	4603      	mov	r3, r0
 800e872:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800e874:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e878:	2b00      	cmp	r3, #0
 800e87a:	d004      	beq.n	800e886 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800e87c:	2100      	movs	r1, #0
 800e87e:	6978      	ldr	r0, [r7, #20]
 800e880:	f7fe f980 	bl	800cb84 <tcp_abandon>
      return;
 800e884:	e006      	b.n	800e894 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800e886:	6978      	ldr	r0, [r7, #20]
 800e888:	f002 f922 	bl	8010ad0 <tcp_output>
  return;
 800e88c:	e001      	b.n	800e892 <tcp_listen_input+0x1be>
    return;
 800e88e:	bf00      	nop
 800e890:	e000      	b.n	800e894 <tcp_listen_input+0x1c0>
  return;
 800e892:	bf00      	nop
}
 800e894:	371c      	adds	r7, #28
 800e896:	46bd      	mov	sp, r7
 800e898:	bd90      	pop	{r4, r7, pc}
 800e89a:	bf00      	nop
 800e89c:	20000114 	.word	0x20000114
 800e8a0:	08016b90 	.word	0x08016b90
 800e8a4:	08016d88 	.word	0x08016d88
 800e8a8:	08016bdc 	.word	0x08016bdc
 800e8ac:	2000010c 	.word	0x2000010c
 800e8b0:	20000112 	.word	0x20000112
 800e8b4:	20000108 	.word	0x20000108
 800e8b8:	200000f8 	.word	0x200000f8
 800e8bc:	20003d6c 	.word	0x20003d6c
 800e8c0:	20003d70 	.word	0x20003d70
 800e8c4:	20003d5c 	.word	0x20003d5c
 800e8c8:	200072a0 	.word	0x200072a0
 800e8cc:	2000729c 	.word	0x2000729c

0800e8d0 <tcp_timewait_input>:
=======
 800e70c:	e0a9      	b.n	800e862 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800e70e:	4b57      	ldr	r3, [pc, #348]	; (800e86c <tcp_listen_input+0x1c8>)
 800e710:	781b      	ldrb	r3, [r3, #0]
 800e712:	f003 0302 	and.w	r3, r3, #2
 800e716:	2b00      	cmp	r3, #0
 800e718:	f000 80a3 	beq.w	800e862 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	7d5b      	ldrb	r3, [r3, #21]
 800e720:	4618      	mov	r0, r3
 800e722:	f7ff f929 	bl	800d978 <tcp_alloc>
 800e726:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800e728:	697b      	ldr	r3, [r7, #20]
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	d111      	bne.n	800e752 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	699b      	ldr	r3, [r3, #24]
 800e732:	2b00      	cmp	r3, #0
 800e734:	d00a      	beq.n	800e74c <tcp_listen_input+0xa8>
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	699b      	ldr	r3, [r3, #24]
 800e73a:	687a      	ldr	r2, [r7, #4]
 800e73c:	6910      	ldr	r0, [r2, #16]
 800e73e:	f04f 32ff 	mov.w	r2, #4294967295
 800e742:	2100      	movs	r1, #0
 800e744:	4798      	blx	r3
 800e746:	4603      	mov	r3, r0
 800e748:	73bb      	strb	r3, [r7, #14]
      return;
 800e74a:	e08b      	b.n	800e864 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800e74c:	23f0      	movs	r3, #240	; 0xf0
 800e74e:	73bb      	strb	r3, [r7, #14]
      return;
 800e750:	e088      	b.n	800e864 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800e752:	4b50      	ldr	r3, [pc, #320]	; (800e894 <tcp_listen_input+0x1f0>)
 800e754:	695a      	ldr	r2, [r3, #20]
 800e756:	697b      	ldr	r3, [r7, #20]
 800e758:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800e75a:	4b4e      	ldr	r3, [pc, #312]	; (800e894 <tcp_listen_input+0x1f0>)
 800e75c:	691a      	ldr	r2, [r3, #16]
 800e75e:	697b      	ldr	r3, [r7, #20]
 800e760:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	8ada      	ldrh	r2, [r3, #22]
 800e766:	697b      	ldr	r3, [r7, #20]
 800e768:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800e76a:	4b47      	ldr	r3, [pc, #284]	; (800e888 <tcp_listen_input+0x1e4>)
 800e76c:	681b      	ldr	r3, [r3, #0]
 800e76e:	881b      	ldrh	r3, [r3, #0]
 800e770:	b29a      	uxth	r2, r3
 800e772:	697b      	ldr	r3, [r7, #20]
 800e774:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800e776:	697b      	ldr	r3, [r7, #20]
 800e778:	2203      	movs	r2, #3
 800e77a:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800e77c:	4b41      	ldr	r3, [pc, #260]	; (800e884 <tcp_listen_input+0x1e0>)
 800e77e:	681b      	ldr	r3, [r3, #0]
 800e780:	1c5a      	adds	r2, r3, #1
 800e782:	697b      	ldr	r3, [r7, #20]
 800e784:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800e786:	697b      	ldr	r3, [r7, #20]
 800e788:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e78a:	697b      	ldr	r3, [r7, #20]
 800e78c:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800e78e:	6978      	ldr	r0, [r7, #20]
 800e790:	f7ff fa5a 	bl	800dc48 <tcp_next_iss>
 800e794:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800e796:	697b      	ldr	r3, [r7, #20]
 800e798:	693a      	ldr	r2, [r7, #16]
 800e79a:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800e79c:	697b      	ldr	r3, [r7, #20]
 800e79e:	693a      	ldr	r2, [r7, #16]
 800e7a0:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800e7a2:	697b      	ldr	r3, [r7, #20]
 800e7a4:	693a      	ldr	r2, [r7, #16]
 800e7a6:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800e7a8:	697b      	ldr	r3, [r7, #20]
 800e7aa:	693a      	ldr	r2, [r7, #16]
 800e7ac:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800e7ae:	4b35      	ldr	r3, [pc, #212]	; (800e884 <tcp_listen_input+0x1e0>)
 800e7b0:	681b      	ldr	r3, [r3, #0]
 800e7b2:	1e5a      	subs	r2, r3, #1
 800e7b4:	697b      	ldr	r3, [r7, #20]
 800e7b6:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	691a      	ldr	r2, [r3, #16]
 800e7bc:	697b      	ldr	r3, [r7, #20]
 800e7be:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800e7c0:	697b      	ldr	r3, [r7, #20]
 800e7c2:	687a      	ldr	r2, [r7, #4]
 800e7c4:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	7a5b      	ldrb	r3, [r3, #9]
 800e7ca:	f003 030c 	and.w	r3, r3, #12
 800e7ce:	b2da      	uxtb	r2, r3
 800e7d0:	697b      	ldr	r3, [r7, #20]
 800e7d2:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	7a1a      	ldrb	r2, [r3, #8]
 800e7d8:	697b      	ldr	r3, [r7, #20]
 800e7da:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800e7dc:	4b2e      	ldr	r3, [pc, #184]	; (800e898 <tcp_listen_input+0x1f4>)
 800e7de:	681a      	ldr	r2, [r3, #0]
 800e7e0:	697b      	ldr	r3, [r7, #20]
 800e7e2:	60da      	str	r2, [r3, #12]
 800e7e4:	4a2c      	ldr	r2, [pc, #176]	; (800e898 <tcp_listen_input+0x1f4>)
 800e7e6:	697b      	ldr	r3, [r7, #20]
 800e7e8:	6013      	str	r3, [r2, #0]
 800e7ea:	f003 f8cf 	bl	801198c <tcp_timer_needed>
 800e7ee:	4b2b      	ldr	r3, [pc, #172]	; (800e89c <tcp_listen_input+0x1f8>)
 800e7f0:	2201      	movs	r2, #1
 800e7f2:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800e7f4:	6978      	ldr	r0, [r7, #20]
 800e7f6:	f001 fd8d 	bl	8010314 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800e7fa:	4b23      	ldr	r3, [pc, #140]	; (800e888 <tcp_listen_input+0x1e4>)
 800e7fc:	681b      	ldr	r3, [r3, #0]
 800e7fe:	89db      	ldrh	r3, [r3, #14]
 800e800:	b29a      	uxth	r2, r3
 800e802:	697b      	ldr	r3, [r7, #20]
 800e804:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800e808:	697b      	ldr	r3, [r7, #20]
 800e80a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800e80e:	697b      	ldr	r3, [r7, #20]
 800e810:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800e814:	697b      	ldr	r3, [r7, #20]
 800e816:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800e818:	697b      	ldr	r3, [r7, #20]
 800e81a:	3304      	adds	r3, #4
 800e81c:	4618      	mov	r0, r3
 800e81e:	f004 fc51 	bl	80130c4 <ip4_route>
 800e822:	4601      	mov	r1, r0
 800e824:	697b      	ldr	r3, [r7, #20]
 800e826:	3304      	adds	r3, #4
 800e828:	461a      	mov	r2, r3
 800e82a:	4620      	mov	r0, r4
 800e82c:	f7ff fa32 	bl	800dc94 <tcp_eff_send_mss_netif>
 800e830:	4603      	mov	r3, r0
 800e832:	461a      	mov	r2, r3
 800e834:	697b      	ldr	r3, [r7, #20]
 800e836:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800e838:	2112      	movs	r1, #18
 800e83a:	6978      	ldr	r0, [r7, #20]
 800e83c:	f002 f842 	bl	80108c4 <tcp_enqueue_flags>
 800e840:	4603      	mov	r3, r0
 800e842:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800e844:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e848:	2b00      	cmp	r3, #0
 800e84a:	d004      	beq.n	800e856 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800e84c:	2100      	movs	r1, #0
 800e84e:	6978      	ldr	r0, [r7, #20]
 800e850:	f7fe f980 	bl	800cb54 <tcp_abandon>
      return;
 800e854:	e006      	b.n	800e864 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800e856:	6978      	ldr	r0, [r7, #20]
 800e858:	f002 f922 	bl	8010aa0 <tcp_output>
  return;
 800e85c:	e001      	b.n	800e862 <tcp_listen_input+0x1be>
    return;
 800e85e:	bf00      	nop
 800e860:	e000      	b.n	800e864 <tcp_listen_input+0x1c0>
  return;
 800e862:	bf00      	nop
}
 800e864:	371c      	adds	r7, #28
 800e866:	46bd      	mov	sp, r7
 800e868:	bd90      	pop	{r4, r7, pc}
 800e86a:	bf00      	nop
 800e86c:	20000114 	.word	0x20000114
 800e870:	08016b74 	.word	0x08016b74
 800e874:	08016d6c 	.word	0x08016d6c
 800e878:	08016bc0 	.word	0x08016bc0
 800e87c:	2000010c 	.word	0x2000010c
 800e880:	20000112 	.word	0x20000112
 800e884:	20000108 	.word	0x20000108
 800e888:	200000f8 	.word	0x200000f8
 800e88c:	20003d6c 	.word	0x20003d6c
 800e890:	20003d70 	.word	0x20003d70
 800e894:	20003d5c 	.word	0x20003d5c
 800e898:	200072a0 	.word	0x200072a0
 800e89c:	2000729c 	.word	0x2000729c

0800e8a0 <tcp_timewait_input>:
>>>>>>> Stashed changes
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
<<<<<<< Updated upstream
 800e8d0:	b580      	push	{r7, lr}
 800e8d2:	b086      	sub	sp, #24
 800e8d4:	af04      	add	r7, sp, #16
 800e8d6:	6078      	str	r0, [r7, #4]
=======
 800e8a0:	b580      	push	{r7, lr}
 800e8a2:	b086      	sub	sp, #24
 800e8a4:	af04      	add	r7, sp, #16
 800e8a6:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
<<<<<<< Updated upstream
 800e8d8:	4b2f      	ldr	r3, [pc, #188]	; (800e998 <tcp_timewait_input+0xc8>)
 800e8da:	781b      	ldrb	r3, [r3, #0]
 800e8dc:	f003 0304 	and.w	r3, r3, #4
 800e8e0:	2b00      	cmp	r3, #0
 800e8e2:	d153      	bne.n	800e98c <tcp_timewait_input+0xbc>
=======
 800e8a8:	4b2f      	ldr	r3, [pc, #188]	; (800e968 <tcp_timewait_input+0xc8>)
 800e8aa:	781b      	ldrb	r3, [r3, #0]
 800e8ac:	f003 0304 	and.w	r3, r3, #4
 800e8b0:	2b00      	cmp	r3, #0
 800e8b2:	d153      	bne.n	800e95c <tcp_timewait_input+0xbc>
>>>>>>> Stashed changes
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
<<<<<<< Updated upstream
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	2b00      	cmp	r3, #0
 800e8e8:	d106      	bne.n	800e8f8 <tcp_timewait_input+0x28>
 800e8ea:	4b2c      	ldr	r3, [pc, #176]	; (800e99c <tcp_timewait_input+0xcc>)
 800e8ec:	f240 22ee 	movw	r2, #750	; 0x2ee
 800e8f0:	492b      	ldr	r1, [pc, #172]	; (800e9a0 <tcp_timewait_input+0xd0>)
 800e8f2:	482c      	ldr	r0, [pc, #176]	; (800e9a4 <tcp_timewait_input+0xd4>)
 800e8f4:	f005 fe46 	bl	8014584 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800e8f8:	4b27      	ldr	r3, [pc, #156]	; (800e998 <tcp_timewait_input+0xc8>)
 800e8fa:	781b      	ldrb	r3, [r3, #0]
 800e8fc:	f003 0302 	and.w	r3, r3, #2
 800e900:	2b00      	cmp	r3, #0
 800e902:	d02a      	beq.n	800e95a <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800e904:	4b28      	ldr	r3, [pc, #160]	; (800e9a8 <tcp_timewait_input+0xd8>)
 800e906:	681a      	ldr	r2, [r3, #0]
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e90c:	1ad3      	subs	r3, r2, r3
 800e90e:	2b00      	cmp	r3, #0
 800e910:	db2d      	blt.n	800e96e <tcp_timewait_input+0x9e>
 800e912:	4b25      	ldr	r3, [pc, #148]	; (800e9a8 <tcp_timewait_input+0xd8>)
 800e914:	681a      	ldr	r2, [r3, #0]
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e91a:	6879      	ldr	r1, [r7, #4]
 800e91c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e91e:	440b      	add	r3, r1
 800e920:	1ad3      	subs	r3, r2, r3
 800e922:	2b00      	cmp	r3, #0
 800e924:	dc23      	bgt.n	800e96e <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e926:	4b21      	ldr	r3, [pc, #132]	; (800e9ac <tcp_timewait_input+0xdc>)
 800e928:	6819      	ldr	r1, [r3, #0]
 800e92a:	4b21      	ldr	r3, [pc, #132]	; (800e9b0 <tcp_timewait_input+0xe0>)
 800e92c:	881b      	ldrh	r3, [r3, #0]
 800e92e:	461a      	mov	r2, r3
 800e930:	4b1d      	ldr	r3, [pc, #116]	; (800e9a8 <tcp_timewait_input+0xd8>)
 800e932:	681b      	ldr	r3, [r3, #0]
 800e934:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e936:	4b1f      	ldr	r3, [pc, #124]	; (800e9b4 <tcp_timewait_input+0xe4>)
 800e938:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e93a:	885b      	ldrh	r3, [r3, #2]
 800e93c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e93e:	4a1d      	ldr	r2, [pc, #116]	; (800e9b4 <tcp_timewait_input+0xe4>)
 800e940:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e942:	8812      	ldrh	r2, [r2, #0]
 800e944:	b292      	uxth	r2, r2
 800e946:	9202      	str	r2, [sp, #8]
 800e948:	9301      	str	r3, [sp, #4]
 800e94a:	4b1b      	ldr	r3, [pc, #108]	; (800e9b8 <tcp_timewait_input+0xe8>)
 800e94c:	9300      	str	r3, [sp, #0]
 800e94e:	4b1b      	ldr	r3, [pc, #108]	; (800e9bc <tcp_timewait_input+0xec>)
 800e950:	4602      	mov	r2, r0
 800e952:	6878      	ldr	r0, [r7, #4]
 800e954:	f002 fe70 	bl	8011638 <tcp_rst>
      return;
 800e958:	e01b      	b.n	800e992 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800e95a:	4b0f      	ldr	r3, [pc, #60]	; (800e998 <tcp_timewait_input+0xc8>)
 800e95c:	781b      	ldrb	r3, [r3, #0]
 800e95e:	f003 0301 	and.w	r3, r3, #1
 800e962:	2b00      	cmp	r3, #0
 800e964:	d003      	beq.n	800e96e <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800e966:	4b16      	ldr	r3, [pc, #88]	; (800e9c0 <tcp_timewait_input+0xf0>)
 800e968:	681a      	ldr	r2, [r3, #0]
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800e96e:	4b10      	ldr	r3, [pc, #64]	; (800e9b0 <tcp_timewait_input+0xe0>)
 800e970:	881b      	ldrh	r3, [r3, #0]
 800e972:	2b00      	cmp	r3, #0
 800e974:	d00c      	beq.n	800e990 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	8b5b      	ldrh	r3, [r3, #26]
 800e97a:	f043 0302 	orr.w	r3, r3, #2
 800e97e:	b29a      	uxth	r2, r3
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800e984:	6878      	ldr	r0, [r7, #4]
 800e986:	f002 f8a3 	bl	8010ad0 <tcp_output>
  }
  return;
 800e98a:	e001      	b.n	800e990 <tcp_timewait_input+0xc0>
    return;
 800e98c:	bf00      	nop
 800e98e:	e000      	b.n	800e992 <tcp_timewait_input+0xc2>
  return;
 800e990:	bf00      	nop
}
 800e992:	3708      	adds	r7, #8
 800e994:	46bd      	mov	sp, r7
 800e996:	bd80      	pop	{r7, pc}
 800e998:	20000114 	.word	0x20000114
 800e99c:	08016b90 	.word	0x08016b90
 800e9a0:	08016da8 	.word	0x08016da8
 800e9a4:	08016bdc 	.word	0x08016bdc
 800e9a8:	20000108 	.word	0x20000108
 800e9ac:	2000010c 	.word	0x2000010c
 800e9b0:	20000112 	.word	0x20000112
 800e9b4:	200000f8 	.word	0x200000f8
 800e9b8:	20003d6c 	.word	0x20003d6c
 800e9bc:	20003d70 	.word	0x20003d70
 800e9c0:	200072a4 	.word	0x200072a4

0800e9c4 <tcp_process>:
=======
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	2b00      	cmp	r3, #0
 800e8b8:	d106      	bne.n	800e8c8 <tcp_timewait_input+0x28>
 800e8ba:	4b2c      	ldr	r3, [pc, #176]	; (800e96c <tcp_timewait_input+0xcc>)
 800e8bc:	f240 22ee 	movw	r2, #750	; 0x2ee
 800e8c0:	492b      	ldr	r1, [pc, #172]	; (800e970 <tcp_timewait_input+0xd0>)
 800e8c2:	482c      	ldr	r0, [pc, #176]	; (800e974 <tcp_timewait_input+0xd4>)
 800e8c4:	f005 fe46 	bl	8014554 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800e8c8:	4b27      	ldr	r3, [pc, #156]	; (800e968 <tcp_timewait_input+0xc8>)
 800e8ca:	781b      	ldrb	r3, [r3, #0]
 800e8cc:	f003 0302 	and.w	r3, r3, #2
 800e8d0:	2b00      	cmp	r3, #0
 800e8d2:	d02a      	beq.n	800e92a <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800e8d4:	4b28      	ldr	r3, [pc, #160]	; (800e978 <tcp_timewait_input+0xd8>)
 800e8d6:	681a      	ldr	r2, [r3, #0]
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8dc:	1ad3      	subs	r3, r2, r3
 800e8de:	2b00      	cmp	r3, #0
 800e8e0:	db2d      	blt.n	800e93e <tcp_timewait_input+0x9e>
 800e8e2:	4b25      	ldr	r3, [pc, #148]	; (800e978 <tcp_timewait_input+0xd8>)
 800e8e4:	681a      	ldr	r2, [r3, #0]
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8ea:	6879      	ldr	r1, [r7, #4]
 800e8ec:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e8ee:	440b      	add	r3, r1
 800e8f0:	1ad3      	subs	r3, r2, r3
 800e8f2:	2b00      	cmp	r3, #0
 800e8f4:	dc23      	bgt.n	800e93e <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e8f6:	4b21      	ldr	r3, [pc, #132]	; (800e97c <tcp_timewait_input+0xdc>)
 800e8f8:	6819      	ldr	r1, [r3, #0]
 800e8fa:	4b21      	ldr	r3, [pc, #132]	; (800e980 <tcp_timewait_input+0xe0>)
 800e8fc:	881b      	ldrh	r3, [r3, #0]
 800e8fe:	461a      	mov	r2, r3
 800e900:	4b1d      	ldr	r3, [pc, #116]	; (800e978 <tcp_timewait_input+0xd8>)
 800e902:	681b      	ldr	r3, [r3, #0]
 800e904:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e906:	4b1f      	ldr	r3, [pc, #124]	; (800e984 <tcp_timewait_input+0xe4>)
 800e908:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e90a:	885b      	ldrh	r3, [r3, #2]
 800e90c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e90e:	4a1d      	ldr	r2, [pc, #116]	; (800e984 <tcp_timewait_input+0xe4>)
 800e910:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e912:	8812      	ldrh	r2, [r2, #0]
 800e914:	b292      	uxth	r2, r2
 800e916:	9202      	str	r2, [sp, #8]
 800e918:	9301      	str	r3, [sp, #4]
 800e91a:	4b1b      	ldr	r3, [pc, #108]	; (800e988 <tcp_timewait_input+0xe8>)
 800e91c:	9300      	str	r3, [sp, #0]
 800e91e:	4b1b      	ldr	r3, [pc, #108]	; (800e98c <tcp_timewait_input+0xec>)
 800e920:	4602      	mov	r2, r0
 800e922:	6878      	ldr	r0, [r7, #4]
 800e924:	f002 fe70 	bl	8011608 <tcp_rst>
      return;
 800e928:	e01b      	b.n	800e962 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800e92a:	4b0f      	ldr	r3, [pc, #60]	; (800e968 <tcp_timewait_input+0xc8>)
 800e92c:	781b      	ldrb	r3, [r3, #0]
 800e92e:	f003 0301 	and.w	r3, r3, #1
 800e932:	2b00      	cmp	r3, #0
 800e934:	d003      	beq.n	800e93e <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800e936:	4b16      	ldr	r3, [pc, #88]	; (800e990 <tcp_timewait_input+0xf0>)
 800e938:	681a      	ldr	r2, [r3, #0]
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800e93e:	4b10      	ldr	r3, [pc, #64]	; (800e980 <tcp_timewait_input+0xe0>)
 800e940:	881b      	ldrh	r3, [r3, #0]
 800e942:	2b00      	cmp	r3, #0
 800e944:	d00c      	beq.n	800e960 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	8b5b      	ldrh	r3, [r3, #26]
 800e94a:	f043 0302 	orr.w	r3, r3, #2
 800e94e:	b29a      	uxth	r2, r3
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800e954:	6878      	ldr	r0, [r7, #4]
 800e956:	f002 f8a3 	bl	8010aa0 <tcp_output>
  }
  return;
 800e95a:	e001      	b.n	800e960 <tcp_timewait_input+0xc0>
    return;
 800e95c:	bf00      	nop
 800e95e:	e000      	b.n	800e962 <tcp_timewait_input+0xc2>
  return;
 800e960:	bf00      	nop
}
 800e962:	3708      	adds	r7, #8
 800e964:	46bd      	mov	sp, r7
 800e966:	bd80      	pop	{r7, pc}
 800e968:	20000114 	.word	0x20000114
 800e96c:	08016b74 	.word	0x08016b74
 800e970:	08016d8c 	.word	0x08016d8c
 800e974:	08016bc0 	.word	0x08016bc0
 800e978:	20000108 	.word	0x20000108
 800e97c:	2000010c 	.word	0x2000010c
 800e980:	20000112 	.word	0x20000112
 800e984:	200000f8 	.word	0x200000f8
 800e988:	20003d6c 	.word	0x20003d6c
 800e98c:	20003d70 	.word	0x20003d70
 800e990:	200072a4 	.word	0x200072a4

0800e994 <tcp_process>:
>>>>>>> Stashed changes
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
<<<<<<< Updated upstream
 800e9c4:	b590      	push	{r4, r7, lr}
 800e9c6:	b08d      	sub	sp, #52	; 0x34
 800e9c8:	af04      	add	r7, sp, #16
 800e9ca:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800e9cc:	2300      	movs	r3, #0
 800e9ce:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800e9d0:	2300      	movs	r3, #0
 800e9d2:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	2b00      	cmp	r3, #0
 800e9d8:	d106      	bne.n	800e9e8 <tcp_process+0x24>
 800e9da:	4ba5      	ldr	r3, [pc, #660]	; (800ec70 <tcp_process+0x2ac>)
 800e9dc:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800e9e0:	49a4      	ldr	r1, [pc, #656]	; (800ec74 <tcp_process+0x2b0>)
 800e9e2:	48a5      	ldr	r0, [pc, #660]	; (800ec78 <tcp_process+0x2b4>)
 800e9e4:	f005 fdce 	bl	8014584 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800e9e8:	4ba4      	ldr	r3, [pc, #656]	; (800ec7c <tcp_process+0x2b8>)
 800e9ea:	781b      	ldrb	r3, [r3, #0]
 800e9ec:	f003 0304 	and.w	r3, r3, #4
 800e9f0:	2b00      	cmp	r3, #0
 800e9f2:	d04e      	beq.n	800ea92 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	7d1b      	ldrb	r3, [r3, #20]
 800e9f8:	2b02      	cmp	r3, #2
 800e9fa:	d108      	bne.n	800ea0e <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ea00:	4b9f      	ldr	r3, [pc, #636]	; (800ec80 <tcp_process+0x2bc>)
 800ea02:	681b      	ldr	r3, [r3, #0]
 800ea04:	429a      	cmp	r2, r3
 800ea06:	d123      	bne.n	800ea50 <tcp_process+0x8c>
        acceptable = 1;
 800ea08:	2301      	movs	r3, #1
 800ea0a:	76fb      	strb	r3, [r7, #27]
 800ea0c:	e020      	b.n	800ea50 <tcp_process+0x8c>
=======
 800e994:	b590      	push	{r4, r7, lr}
 800e996:	b08d      	sub	sp, #52	; 0x34
 800e998:	af04      	add	r7, sp, #16
 800e99a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800e99c:	2300      	movs	r3, #0
 800e99e:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800e9a0:	2300      	movs	r3, #0
 800e9a2:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	d106      	bne.n	800e9b8 <tcp_process+0x24>
 800e9aa:	4ba5      	ldr	r3, [pc, #660]	; (800ec40 <tcp_process+0x2ac>)
 800e9ac:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800e9b0:	49a4      	ldr	r1, [pc, #656]	; (800ec44 <tcp_process+0x2b0>)
 800e9b2:	48a5      	ldr	r0, [pc, #660]	; (800ec48 <tcp_process+0x2b4>)
 800e9b4:	f005 fdce 	bl	8014554 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800e9b8:	4ba4      	ldr	r3, [pc, #656]	; (800ec4c <tcp_process+0x2b8>)
 800e9ba:	781b      	ldrb	r3, [r3, #0]
 800e9bc:	f003 0304 	and.w	r3, r3, #4
 800e9c0:	2b00      	cmp	r3, #0
 800e9c2:	d04e      	beq.n	800ea62 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	7d1b      	ldrb	r3, [r3, #20]
 800e9c8:	2b02      	cmp	r3, #2
 800e9ca:	d108      	bne.n	800e9de <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e9d0:	4b9f      	ldr	r3, [pc, #636]	; (800ec50 <tcp_process+0x2bc>)
 800e9d2:	681b      	ldr	r3, [r3, #0]
 800e9d4:	429a      	cmp	r2, r3
 800e9d6:	d123      	bne.n	800ea20 <tcp_process+0x8c>
        acceptable = 1;
 800e9d8:	2301      	movs	r3, #1
 800e9da:	76fb      	strb	r3, [r7, #27]
 800e9dc:	e020      	b.n	800ea20 <tcp_process+0x8c>
>>>>>>> Stashed changes
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
<<<<<<< Updated upstream
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ea12:	4b9c      	ldr	r3, [pc, #624]	; (800ec84 <tcp_process+0x2c0>)
 800ea14:	681b      	ldr	r3, [r3, #0]
 800ea16:	429a      	cmp	r2, r3
 800ea18:	d102      	bne.n	800ea20 <tcp_process+0x5c>
        acceptable = 1;
 800ea1a:	2301      	movs	r3, #1
 800ea1c:	76fb      	strb	r3, [r7, #27]
 800ea1e:	e017      	b.n	800ea50 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800ea20:	4b98      	ldr	r3, [pc, #608]	; (800ec84 <tcp_process+0x2c0>)
 800ea22:	681a      	ldr	r2, [r3, #0]
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea28:	1ad3      	subs	r3, r2, r3
 800ea2a:	2b00      	cmp	r3, #0
 800ea2c:	db10      	blt.n	800ea50 <tcp_process+0x8c>
 800ea2e:	4b95      	ldr	r3, [pc, #596]	; (800ec84 <tcp_process+0x2c0>)
 800ea30:	681a      	ldr	r2, [r3, #0]
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea36:	6879      	ldr	r1, [r7, #4]
 800ea38:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ea3a:	440b      	add	r3, r1
 800ea3c:	1ad3      	subs	r3, r2, r3
 800ea3e:	2b00      	cmp	r3, #0
 800ea40:	dc06      	bgt.n	800ea50 <tcp_process+0x8c>
=======
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e9e2:	4b9c      	ldr	r3, [pc, #624]	; (800ec54 <tcp_process+0x2c0>)
 800e9e4:	681b      	ldr	r3, [r3, #0]
 800e9e6:	429a      	cmp	r2, r3
 800e9e8:	d102      	bne.n	800e9f0 <tcp_process+0x5c>
        acceptable = 1;
 800e9ea:	2301      	movs	r3, #1
 800e9ec:	76fb      	strb	r3, [r7, #27]
 800e9ee:	e017      	b.n	800ea20 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800e9f0:	4b98      	ldr	r3, [pc, #608]	; (800ec54 <tcp_process+0x2c0>)
 800e9f2:	681a      	ldr	r2, [r3, #0]
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9f8:	1ad3      	subs	r3, r2, r3
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	db10      	blt.n	800ea20 <tcp_process+0x8c>
 800e9fe:	4b95      	ldr	r3, [pc, #596]	; (800ec54 <tcp_process+0x2c0>)
 800ea00:	681a      	ldr	r2, [r3, #0]
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea06:	6879      	ldr	r1, [r7, #4]
 800ea08:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ea0a:	440b      	add	r3, r1
 800ea0c:	1ad3      	subs	r3, r2, r3
 800ea0e:	2b00      	cmp	r3, #0
 800ea10:	dc06      	bgt.n	800ea20 <tcp_process+0x8c>
>>>>>>> Stashed changes
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
<<<<<<< Updated upstream
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	8b5b      	ldrh	r3, [r3, #26]
 800ea46:	f043 0302 	orr.w	r3, r3, #2
 800ea4a:	b29a      	uxth	r2, r3
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	835a      	strh	r2, [r3, #26]
=======
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	8b5b      	ldrh	r3, [r3, #26]
 800ea16:	f043 0302 	orr.w	r3, r3, #2
 800ea1a:	b29a      	uxth	r2, r3
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	835a      	strh	r2, [r3, #26]
>>>>>>> Stashed changes
      }
    }

    if (acceptable) {
<<<<<<< Updated upstream
 800ea50:	7efb      	ldrb	r3, [r7, #27]
 800ea52:	2b00      	cmp	r3, #0
 800ea54:	d01b      	beq.n	800ea8e <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	7d1b      	ldrb	r3, [r3, #20]
 800ea5a:	2b00      	cmp	r3, #0
 800ea5c:	d106      	bne.n	800ea6c <tcp_process+0xa8>
 800ea5e:	4b84      	ldr	r3, [pc, #528]	; (800ec70 <tcp_process+0x2ac>)
 800ea60:	f44f 724e 	mov.w	r2, #824	; 0x338
 800ea64:	4988      	ldr	r1, [pc, #544]	; (800ec88 <tcp_process+0x2c4>)
 800ea66:	4884      	ldr	r0, [pc, #528]	; (800ec78 <tcp_process+0x2b4>)
 800ea68:	f005 fd8c 	bl	8014584 <iprintf>
      recv_flags |= TF_RESET;
 800ea6c:	4b87      	ldr	r3, [pc, #540]	; (800ec8c <tcp_process+0x2c8>)
 800ea6e:	781b      	ldrb	r3, [r3, #0]
 800ea70:	f043 0308 	orr.w	r3, r3, #8
 800ea74:	b2da      	uxtb	r2, r3
 800ea76:	4b85      	ldr	r3, [pc, #532]	; (800ec8c <tcp_process+0x2c8>)
 800ea78:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	8b5b      	ldrh	r3, [r3, #26]
 800ea7e:	f023 0301 	bic.w	r3, r3, #1
 800ea82:	b29a      	uxth	r2, r3
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800ea88:	f06f 030d 	mvn.w	r3, #13
 800ea8c:	e37a      	b.n	800f184 <tcp_process+0x7c0>
=======
 800ea20:	7efb      	ldrb	r3, [r7, #27]
 800ea22:	2b00      	cmp	r3, #0
 800ea24:	d01b      	beq.n	800ea5e <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	7d1b      	ldrb	r3, [r3, #20]
 800ea2a:	2b00      	cmp	r3, #0
 800ea2c:	d106      	bne.n	800ea3c <tcp_process+0xa8>
 800ea2e:	4b84      	ldr	r3, [pc, #528]	; (800ec40 <tcp_process+0x2ac>)
 800ea30:	f44f 724e 	mov.w	r2, #824	; 0x338
 800ea34:	4988      	ldr	r1, [pc, #544]	; (800ec58 <tcp_process+0x2c4>)
 800ea36:	4884      	ldr	r0, [pc, #528]	; (800ec48 <tcp_process+0x2b4>)
 800ea38:	f005 fd8c 	bl	8014554 <iprintf>
      recv_flags |= TF_RESET;
 800ea3c:	4b87      	ldr	r3, [pc, #540]	; (800ec5c <tcp_process+0x2c8>)
 800ea3e:	781b      	ldrb	r3, [r3, #0]
 800ea40:	f043 0308 	orr.w	r3, r3, #8
 800ea44:	b2da      	uxtb	r2, r3
 800ea46:	4b85      	ldr	r3, [pc, #532]	; (800ec5c <tcp_process+0x2c8>)
 800ea48:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	8b5b      	ldrh	r3, [r3, #26]
 800ea4e:	f023 0301 	bic.w	r3, r3, #1
 800ea52:	b29a      	uxth	r2, r3
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800ea58:	f06f 030d 	mvn.w	r3, #13
 800ea5c:	e37a      	b.n	800f154 <tcp_process+0x7c0>
>>>>>>> Stashed changes
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
<<<<<<< Updated upstream
 800ea8e:	2300      	movs	r3, #0
 800ea90:	e378      	b.n	800f184 <tcp_process+0x7c0>
=======
 800ea5e:	2300      	movs	r3, #0
 800ea60:	e378      	b.n	800f154 <tcp_process+0x7c0>
>>>>>>> Stashed changes
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
<<<<<<< Updated upstream
 800ea92:	4b7a      	ldr	r3, [pc, #488]	; (800ec7c <tcp_process+0x2b8>)
 800ea94:	781b      	ldrb	r3, [r3, #0]
 800ea96:	f003 0302 	and.w	r3, r3, #2
 800ea9a:	2b00      	cmp	r3, #0
 800ea9c:	d010      	beq.n	800eac0 <tcp_process+0xfc>
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	7d1b      	ldrb	r3, [r3, #20]
 800eaa2:	2b02      	cmp	r3, #2
 800eaa4:	d00c      	beq.n	800eac0 <tcp_process+0xfc>
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	7d1b      	ldrb	r3, [r3, #20]
 800eaaa:	2b03      	cmp	r3, #3
 800eaac:	d008      	beq.n	800eac0 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	8b5b      	ldrh	r3, [r3, #26]
 800eab2:	f043 0302 	orr.w	r3, r3, #2
 800eab6:	b29a      	uxth	r2, r3
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800eabc:	2300      	movs	r3, #0
 800eabe:	e361      	b.n	800f184 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	8b5b      	ldrh	r3, [r3, #26]
 800eac4:	f003 0310 	and.w	r3, r3, #16
 800eac8:	2b00      	cmp	r3, #0
 800eaca:	d103      	bne.n	800ead4 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800eacc:	4b70      	ldr	r3, [pc, #448]	; (800ec90 <tcp_process+0x2cc>)
 800eace:	681a      	ldr	r2, [r3, #0]
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	2200      	movs	r2, #0
 800ead8:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	2200      	movs	r2, #0
 800eae0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800eae4:	6878      	ldr	r0, [r7, #4]
 800eae6:	f001 fc2d 	bl	8010344 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	7d1b      	ldrb	r3, [r3, #20]
 800eaee:	3b02      	subs	r3, #2
 800eaf0:	2b07      	cmp	r3, #7
 800eaf2:	f200 8337 	bhi.w	800f164 <tcp_process+0x7a0>
 800eaf6:	a201      	add	r2, pc, #4	; (adr r2, 800eafc <tcp_process+0x138>)
 800eaf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eafc:	0800eb1d 	.word	0x0800eb1d
 800eb00:	0800ed4d 	.word	0x0800ed4d
 800eb04:	0800eec5 	.word	0x0800eec5
 800eb08:	0800eeef 	.word	0x0800eeef
 800eb0c:	0800f013 	.word	0x0800f013
 800eb10:	0800eec5 	.word	0x0800eec5
 800eb14:	0800f09f 	.word	0x0800f09f
 800eb18:	0800f12f 	.word	0x0800f12f
=======
 800ea62:	4b7a      	ldr	r3, [pc, #488]	; (800ec4c <tcp_process+0x2b8>)
 800ea64:	781b      	ldrb	r3, [r3, #0]
 800ea66:	f003 0302 	and.w	r3, r3, #2
 800ea6a:	2b00      	cmp	r3, #0
 800ea6c:	d010      	beq.n	800ea90 <tcp_process+0xfc>
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	7d1b      	ldrb	r3, [r3, #20]
 800ea72:	2b02      	cmp	r3, #2
 800ea74:	d00c      	beq.n	800ea90 <tcp_process+0xfc>
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	7d1b      	ldrb	r3, [r3, #20]
 800ea7a:	2b03      	cmp	r3, #3
 800ea7c:	d008      	beq.n	800ea90 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	8b5b      	ldrh	r3, [r3, #26]
 800ea82:	f043 0302 	orr.w	r3, r3, #2
 800ea86:	b29a      	uxth	r2, r3
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800ea8c:	2300      	movs	r3, #0
 800ea8e:	e361      	b.n	800f154 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	8b5b      	ldrh	r3, [r3, #26]
 800ea94:	f003 0310 	and.w	r3, r3, #16
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	d103      	bne.n	800eaa4 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800ea9c:	4b70      	ldr	r3, [pc, #448]	; (800ec60 <tcp_process+0x2cc>)
 800ea9e:	681a      	ldr	r2, [r3, #0]
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	2200      	movs	r2, #0
 800eaa8:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	2200      	movs	r2, #0
 800eab0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800eab4:	6878      	ldr	r0, [r7, #4]
 800eab6:	f001 fc2d 	bl	8010314 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	7d1b      	ldrb	r3, [r3, #20]
 800eabe:	3b02      	subs	r3, #2
 800eac0:	2b07      	cmp	r3, #7
 800eac2:	f200 8337 	bhi.w	800f134 <tcp_process+0x7a0>
 800eac6:	a201      	add	r2, pc, #4	; (adr r2, 800eacc <tcp_process+0x138>)
 800eac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eacc:	0800eaed 	.word	0x0800eaed
 800ead0:	0800ed1d 	.word	0x0800ed1d
 800ead4:	0800ee95 	.word	0x0800ee95
 800ead8:	0800eebf 	.word	0x0800eebf
 800eadc:	0800efe3 	.word	0x0800efe3
 800eae0:	0800ee95 	.word	0x0800ee95
 800eae4:	0800f06f 	.word	0x0800f06f
 800eae8:	0800f0ff 	.word	0x0800f0ff
>>>>>>> Stashed changes
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
<<<<<<< Updated upstream
 800eb1c:	4b57      	ldr	r3, [pc, #348]	; (800ec7c <tcp_process+0x2b8>)
 800eb1e:	781b      	ldrb	r3, [r3, #0]
 800eb20:	f003 0310 	and.w	r3, r3, #16
 800eb24:	2b00      	cmp	r3, #0
 800eb26:	f000 80e4 	beq.w	800ecf2 <tcp_process+0x32e>
 800eb2a:	4b54      	ldr	r3, [pc, #336]	; (800ec7c <tcp_process+0x2b8>)
 800eb2c:	781b      	ldrb	r3, [r3, #0]
 800eb2e:	f003 0302 	and.w	r3, r3, #2
 800eb32:	2b00      	cmp	r3, #0
 800eb34:	f000 80dd 	beq.w	800ecf2 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eb3c:	1c5a      	adds	r2, r3, #1
 800eb3e:	4b50      	ldr	r3, [pc, #320]	; (800ec80 <tcp_process+0x2bc>)
 800eb40:	681b      	ldr	r3, [r3, #0]
 800eb42:	429a      	cmp	r2, r3
 800eb44:	f040 80d5 	bne.w	800ecf2 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800eb48:	4b4e      	ldr	r3, [pc, #312]	; (800ec84 <tcp_process+0x2c0>)
 800eb4a:	681b      	ldr	r3, [r3, #0]
 800eb4c:	1c5a      	adds	r2, r3, #1
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800eb5a:	4b49      	ldr	r3, [pc, #292]	; (800ec80 <tcp_process+0x2bc>)
 800eb5c:	681a      	ldr	r2, [r3, #0]
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800eb62:	4b4c      	ldr	r3, [pc, #304]	; (800ec94 <tcp_process+0x2d0>)
 800eb64:	681b      	ldr	r3, [r3, #0]
 800eb66:	89db      	ldrh	r3, [r3, #14]
 800eb68:	b29a      	uxth	r2, r3
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800eb7c:	4b41      	ldr	r3, [pc, #260]	; (800ec84 <tcp_process+0x2c0>)
 800eb7e:	681b      	ldr	r3, [r3, #0]
 800eb80:	1e5a      	subs	r2, r3, #1
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	2204      	movs	r2, #4
 800eb8a:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	3304      	adds	r3, #4
 800eb94:	4618      	mov	r0, r3
 800eb96:	f004 faad 	bl	80130f4 <ip4_route>
 800eb9a:	4601      	mov	r1, r0
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	3304      	adds	r3, #4
 800eba0:	461a      	mov	r2, r3
 800eba2:	4620      	mov	r0, r4
 800eba4:	f7ff f88e 	bl	800dcc4 <tcp_eff_send_mss_netif>
 800eba8:	4603      	mov	r3, r0
 800ebaa:	461a      	mov	r2, r3
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ebb4:	009a      	lsls	r2, r3, #2
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ebba:	005b      	lsls	r3, r3, #1
 800ebbc:	f241 111c 	movw	r1, #4380	; 0x111c
 800ebc0:	428b      	cmp	r3, r1
 800ebc2:	bf38      	it	cc
 800ebc4:	460b      	movcc	r3, r1
 800ebc6:	429a      	cmp	r2, r3
 800ebc8:	d204      	bcs.n	800ebd4 <tcp_process+0x210>
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ebce:	009b      	lsls	r3, r3, #2
 800ebd0:	b29b      	uxth	r3, r3
 800ebd2:	e00d      	b.n	800ebf0 <tcp_process+0x22c>
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ebd8:	005b      	lsls	r3, r3, #1
 800ebda:	f241 121c 	movw	r2, #4380	; 0x111c
 800ebde:	4293      	cmp	r3, r2
 800ebe0:	d904      	bls.n	800ebec <tcp_process+0x228>
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ebe6:	005b      	lsls	r3, r3, #1
 800ebe8:	b29b      	uxth	r3, r3
 800ebea:	e001      	b.n	800ebf0 <tcp_process+0x22c>
 800ebec:	f241 131c 	movw	r3, #4380	; 0x111c
 800ebf0:	687a      	ldr	r2, [r7, #4]
 800ebf2:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
=======
 800eaec:	4b57      	ldr	r3, [pc, #348]	; (800ec4c <tcp_process+0x2b8>)
 800eaee:	781b      	ldrb	r3, [r3, #0]
 800eaf0:	f003 0310 	and.w	r3, r3, #16
 800eaf4:	2b00      	cmp	r3, #0
 800eaf6:	f000 80e4 	beq.w	800ecc2 <tcp_process+0x32e>
 800eafa:	4b54      	ldr	r3, [pc, #336]	; (800ec4c <tcp_process+0x2b8>)
 800eafc:	781b      	ldrb	r3, [r3, #0]
 800eafe:	f003 0302 	and.w	r3, r3, #2
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	f000 80dd 	beq.w	800ecc2 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eb0c:	1c5a      	adds	r2, r3, #1
 800eb0e:	4b50      	ldr	r3, [pc, #320]	; (800ec50 <tcp_process+0x2bc>)
 800eb10:	681b      	ldr	r3, [r3, #0]
 800eb12:	429a      	cmp	r2, r3
 800eb14:	f040 80d5 	bne.w	800ecc2 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800eb18:	4b4e      	ldr	r3, [pc, #312]	; (800ec54 <tcp_process+0x2c0>)
 800eb1a:	681b      	ldr	r3, [r3, #0]
 800eb1c:	1c5a      	adds	r2, r3, #1
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800eb2a:	4b49      	ldr	r3, [pc, #292]	; (800ec50 <tcp_process+0x2bc>)
 800eb2c:	681a      	ldr	r2, [r3, #0]
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800eb32:	4b4c      	ldr	r3, [pc, #304]	; (800ec64 <tcp_process+0x2d0>)
 800eb34:	681b      	ldr	r3, [r3, #0]
 800eb36:	89db      	ldrh	r3, [r3, #14]
 800eb38:	b29a      	uxth	r2, r3
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800eb4c:	4b41      	ldr	r3, [pc, #260]	; (800ec54 <tcp_process+0x2c0>)
 800eb4e:	681b      	ldr	r3, [r3, #0]
 800eb50:	1e5a      	subs	r2, r3, #1
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	2204      	movs	r2, #4
 800eb5a:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	3304      	adds	r3, #4
 800eb64:	4618      	mov	r0, r3
 800eb66:	f004 faad 	bl	80130c4 <ip4_route>
 800eb6a:	4601      	mov	r1, r0
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	3304      	adds	r3, #4
 800eb70:	461a      	mov	r2, r3
 800eb72:	4620      	mov	r0, r4
 800eb74:	f7ff f88e 	bl	800dc94 <tcp_eff_send_mss_netif>
 800eb78:	4603      	mov	r3, r0
 800eb7a:	461a      	mov	r2, r3
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800eb84:	009a      	lsls	r2, r3, #2
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800eb8a:	005b      	lsls	r3, r3, #1
 800eb8c:	f241 111c 	movw	r1, #4380	; 0x111c
 800eb90:	428b      	cmp	r3, r1
 800eb92:	bf38      	it	cc
 800eb94:	460b      	movcc	r3, r1
 800eb96:	429a      	cmp	r2, r3
 800eb98:	d204      	bcs.n	800eba4 <tcp_process+0x210>
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800eb9e:	009b      	lsls	r3, r3, #2
 800eba0:	b29b      	uxth	r3, r3
 800eba2:	e00d      	b.n	800ebc0 <tcp_process+0x22c>
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800eba8:	005b      	lsls	r3, r3, #1
 800ebaa:	f241 121c 	movw	r2, #4380	; 0x111c
 800ebae:	4293      	cmp	r3, r2
 800ebb0:	d904      	bls.n	800ebbc <tcp_process+0x228>
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ebb6:	005b      	lsls	r3, r3, #1
 800ebb8:	b29b      	uxth	r3, r3
 800ebba:	e001      	b.n	800ebc0 <tcp_process+0x22c>
 800ebbc:	f241 131c 	movw	r3, #4380	; 0x111c
 800ebc0:	687a      	ldr	r2, [r7, #4]
 800ebc2:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
>>>>>>> Stashed changes
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
<<<<<<< Updated upstream
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ebfc:	2b00      	cmp	r3, #0
 800ebfe:	d106      	bne.n	800ec0e <tcp_process+0x24a>
 800ec00:	4b1b      	ldr	r3, [pc, #108]	; (800ec70 <tcp_process+0x2ac>)
 800ec02:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800ec06:	4924      	ldr	r1, [pc, #144]	; (800ec98 <tcp_process+0x2d4>)
 800ec08:	481b      	ldr	r0, [pc, #108]	; (800ec78 <tcp_process+0x2b4>)
 800ec0a:	f005 fcbb 	bl	8014584 <iprintf>
        --pcb->snd_queuelen;
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ec14:	3b01      	subs	r3, #1
 800ec16:	b29a      	uxth	r2, r3
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ec22:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800ec24:	69fb      	ldr	r3, [r7, #28]
 800ec26:	2b00      	cmp	r3, #0
 800ec28:	d111      	bne.n	800ec4e <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ec2e:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800ec30:	69fb      	ldr	r3, [r7, #28]
 800ec32:	2b00      	cmp	r3, #0
 800ec34:	d106      	bne.n	800ec44 <tcp_process+0x280>
 800ec36:	4b0e      	ldr	r3, [pc, #56]	; (800ec70 <tcp_process+0x2ac>)
 800ec38:	f44f 725d 	mov.w	r2, #884	; 0x374
 800ec3c:	4917      	ldr	r1, [pc, #92]	; (800ec9c <tcp_process+0x2d8>)
 800ec3e:	480e      	ldr	r0, [pc, #56]	; (800ec78 <tcp_process+0x2b4>)
 800ec40:	f005 fca0 	bl	8014584 <iprintf>
          pcb->unsent = rseg->next;
 800ec44:	69fb      	ldr	r3, [r7, #28]
 800ec46:	681a      	ldr	r2, [r3, #0]
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	66da      	str	r2, [r3, #108]	; 0x6c
 800ec4c:	e003      	b.n	800ec56 <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 800ec4e:	69fb      	ldr	r3, [r7, #28]
 800ec50:	681a      	ldr	r2, [r3, #0]
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800ec56:	69f8      	ldr	r0, [r7, #28]
 800ec58:	f7fe fd3d 	bl	800d6d6 <tcp_seg_free>
=======
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ebcc:	2b00      	cmp	r3, #0
 800ebce:	d106      	bne.n	800ebde <tcp_process+0x24a>
 800ebd0:	4b1b      	ldr	r3, [pc, #108]	; (800ec40 <tcp_process+0x2ac>)
 800ebd2:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800ebd6:	4924      	ldr	r1, [pc, #144]	; (800ec68 <tcp_process+0x2d4>)
 800ebd8:	481b      	ldr	r0, [pc, #108]	; (800ec48 <tcp_process+0x2b4>)
 800ebda:	f005 fcbb 	bl	8014554 <iprintf>
        --pcb->snd_queuelen;
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ebe4:	3b01      	subs	r3, #1
 800ebe6:	b29a      	uxth	r2, r3
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ebf2:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800ebf4:	69fb      	ldr	r3, [r7, #28]
 800ebf6:	2b00      	cmp	r3, #0
 800ebf8:	d111      	bne.n	800ec1e <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ebfe:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800ec00:	69fb      	ldr	r3, [r7, #28]
 800ec02:	2b00      	cmp	r3, #0
 800ec04:	d106      	bne.n	800ec14 <tcp_process+0x280>
 800ec06:	4b0e      	ldr	r3, [pc, #56]	; (800ec40 <tcp_process+0x2ac>)
 800ec08:	f44f 725d 	mov.w	r2, #884	; 0x374
 800ec0c:	4917      	ldr	r1, [pc, #92]	; (800ec6c <tcp_process+0x2d8>)
 800ec0e:	480e      	ldr	r0, [pc, #56]	; (800ec48 <tcp_process+0x2b4>)
 800ec10:	f005 fca0 	bl	8014554 <iprintf>
          pcb->unsent = rseg->next;
 800ec14:	69fb      	ldr	r3, [r7, #28]
 800ec16:	681a      	ldr	r2, [r3, #0]
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	66da      	str	r2, [r3, #108]	; 0x6c
 800ec1c:	e003      	b.n	800ec26 <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 800ec1e:	69fb      	ldr	r3, [r7, #28]
 800ec20:	681a      	ldr	r2, [r3, #0]
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800ec26:	69f8      	ldr	r0, [r7, #28]
 800ec28:	f7fe fd3d 	bl	800d6a6 <tcp_seg_free>
>>>>>>> Stashed changes

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
<<<<<<< Updated upstream
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ec60:	2b00      	cmp	r3, #0
 800ec62:	d11d      	bne.n	800eca0 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ec6a:	861a      	strh	r2, [r3, #48]	; 0x30
 800ec6c:	e01f      	b.n	800ecae <tcp_process+0x2ea>
 800ec6e:	bf00      	nop
 800ec70:	08016b90 	.word	0x08016b90
 800ec74:	08016dc8 	.word	0x08016dc8
 800ec78:	08016bdc 	.word	0x08016bdc
 800ec7c:	20000114 	.word	0x20000114
 800ec80:	2000010c 	.word	0x2000010c
 800ec84:	20000108 	.word	0x20000108
 800ec88:	08016de4 	.word	0x08016de4
 800ec8c:	20000115 	.word	0x20000115
 800ec90:	200072a4 	.word	0x200072a4
 800ec94:	200000f8 	.word	0x200000f8
 800ec98:	08016e04 	.word	0x08016e04
 800ec9c:	08016e1c 	.word	0x08016e1c
        } else {
          pcb->rtime = 0;
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	2200      	movs	r2, #0
 800eca4:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	2200      	movs	r2, #0
 800ecaa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
=======
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ec30:	2b00      	cmp	r3, #0
 800ec32:	d11d      	bne.n	800ec70 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ec3a:	861a      	strh	r2, [r3, #48]	; 0x30
 800ec3c:	e01f      	b.n	800ec7e <tcp_process+0x2ea>
 800ec3e:	bf00      	nop
 800ec40:	08016b74 	.word	0x08016b74
 800ec44:	08016dac 	.word	0x08016dac
 800ec48:	08016bc0 	.word	0x08016bc0
 800ec4c:	20000114 	.word	0x20000114
 800ec50:	2000010c 	.word	0x2000010c
 800ec54:	20000108 	.word	0x20000108
 800ec58:	08016dc8 	.word	0x08016dc8
 800ec5c:	20000115 	.word	0x20000115
 800ec60:	200072a4 	.word	0x200072a4
 800ec64:	200000f8 	.word	0x200000f8
 800ec68:	08016de8 	.word	0x08016de8
 800ec6c:	08016e00 	.word	0x08016e00
        } else {
          pcb->rtime = 0;
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	2200      	movs	r2, #0
 800ec74:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	2200      	movs	r2, #0
 800ec7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
>>>>>>> Stashed changes
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
<<<<<<< Updated upstream
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	d00a      	beq.n	800ecce <tcp_process+0x30a>
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ecbe:	687a      	ldr	r2, [r7, #4]
 800ecc0:	6910      	ldr	r0, [r2, #16]
 800ecc2:	2200      	movs	r2, #0
 800ecc4:	6879      	ldr	r1, [r7, #4]
 800ecc6:	4798      	blx	r3
 800ecc8:	4603      	mov	r3, r0
 800ecca:	76bb      	strb	r3, [r7, #26]
 800eccc:	e001      	b.n	800ecd2 <tcp_process+0x30e>
 800ecce:	2300      	movs	r3, #0
 800ecd0:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800ecd2:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800ecd6:	f113 0f0d 	cmn.w	r3, #13
 800ecda:	d102      	bne.n	800ece2 <tcp_process+0x31e>
          return ERR_ABRT;
 800ecdc:	f06f 030c 	mvn.w	r3, #12
 800ece0:	e250      	b.n	800f184 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	8b5b      	ldrh	r3, [r3, #26]
 800ece6:	f043 0302 	orr.w	r3, r3, #2
 800ecea:	b29a      	uxth	r2, r3
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	835a      	strh	r2, [r3, #26]
=======
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ec84:	2b00      	cmp	r3, #0
 800ec86:	d00a      	beq.n	800ec9e <tcp_process+0x30a>
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ec8e:	687a      	ldr	r2, [r7, #4]
 800ec90:	6910      	ldr	r0, [r2, #16]
 800ec92:	2200      	movs	r2, #0
 800ec94:	6879      	ldr	r1, [r7, #4]
 800ec96:	4798      	blx	r3
 800ec98:	4603      	mov	r3, r0
 800ec9a:	76bb      	strb	r3, [r7, #26]
 800ec9c:	e001      	b.n	800eca2 <tcp_process+0x30e>
 800ec9e:	2300      	movs	r3, #0
 800eca0:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800eca2:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800eca6:	f113 0f0d 	cmn.w	r3, #13
 800ecaa:	d102      	bne.n	800ecb2 <tcp_process+0x31e>
          return ERR_ABRT;
 800ecac:	f06f 030c 	mvn.w	r3, #12
 800ecb0:	e250      	b.n	800f154 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	8b5b      	ldrh	r3, [r3, #26]
 800ecb6:	f043 0302 	orr.w	r3, r3, #2
 800ecba:	b29a      	uxth	r2, r3
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	835a      	strh	r2, [r3, #26]
>>>>>>> Stashed changes
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
<<<<<<< Updated upstream
 800ecf0:	e23a      	b.n	800f168 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800ecf2:	4b9d      	ldr	r3, [pc, #628]	; (800ef68 <tcp_process+0x5a4>)
 800ecf4:	781b      	ldrb	r3, [r3, #0]
 800ecf6:	f003 0310 	and.w	r3, r3, #16
 800ecfa:	2b00      	cmp	r3, #0
 800ecfc:	f000 8234 	beq.w	800f168 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ed00:	4b9a      	ldr	r3, [pc, #616]	; (800ef6c <tcp_process+0x5a8>)
 800ed02:	6819      	ldr	r1, [r3, #0]
 800ed04:	4b9a      	ldr	r3, [pc, #616]	; (800ef70 <tcp_process+0x5ac>)
 800ed06:	881b      	ldrh	r3, [r3, #0]
 800ed08:	461a      	mov	r2, r3
 800ed0a:	4b9a      	ldr	r3, [pc, #616]	; (800ef74 <tcp_process+0x5b0>)
 800ed0c:	681b      	ldr	r3, [r3, #0]
 800ed0e:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ed10:	4b99      	ldr	r3, [pc, #612]	; (800ef78 <tcp_process+0x5b4>)
 800ed12:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ed14:	885b      	ldrh	r3, [r3, #2]
 800ed16:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ed18:	4a97      	ldr	r2, [pc, #604]	; (800ef78 <tcp_process+0x5b4>)
 800ed1a:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ed1c:	8812      	ldrh	r2, [r2, #0]
 800ed1e:	b292      	uxth	r2, r2
 800ed20:	9202      	str	r2, [sp, #8]
 800ed22:	9301      	str	r3, [sp, #4]
 800ed24:	4b95      	ldr	r3, [pc, #596]	; (800ef7c <tcp_process+0x5b8>)
 800ed26:	9300      	str	r3, [sp, #0]
 800ed28:	4b95      	ldr	r3, [pc, #596]	; (800ef80 <tcp_process+0x5bc>)
 800ed2a:	4602      	mov	r2, r0
 800ed2c:	6878      	ldr	r0, [r7, #4]
 800ed2e:	f002 fc83 	bl	8011638 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ed38:	2b05      	cmp	r3, #5
 800ed3a:	f200 8215 	bhi.w	800f168 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	2200      	movs	r2, #0
 800ed42:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800ed44:	6878      	ldr	r0, [r7, #4]
 800ed46:	f002 fa4d 	bl	80111e4 <tcp_rexmit_rto>
      break;
 800ed4a:	e20d      	b.n	800f168 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800ed4c:	4b86      	ldr	r3, [pc, #536]	; (800ef68 <tcp_process+0x5a4>)
 800ed4e:	781b      	ldrb	r3, [r3, #0]
 800ed50:	f003 0310 	and.w	r3, r3, #16
 800ed54:	2b00      	cmp	r3, #0
 800ed56:	f000 80a1 	beq.w	800ee9c <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800ed5a:	4b84      	ldr	r3, [pc, #528]	; (800ef6c <tcp_process+0x5a8>)
 800ed5c:	681a      	ldr	r2, [r3, #0]
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ed62:	1ad3      	subs	r3, r2, r3
 800ed64:	3b01      	subs	r3, #1
 800ed66:	2b00      	cmp	r3, #0
 800ed68:	db7e      	blt.n	800ee68 <tcp_process+0x4a4>
 800ed6a:	4b80      	ldr	r3, [pc, #512]	; (800ef6c <tcp_process+0x5a8>)
 800ed6c:	681a      	ldr	r2, [r3, #0]
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ed72:	1ad3      	subs	r3, r2, r3
 800ed74:	2b00      	cmp	r3, #0
 800ed76:	dc77      	bgt.n	800ee68 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	2204      	movs	r2, #4
 800ed7c:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ed82:	2b00      	cmp	r3, #0
 800ed84:	d102      	bne.n	800ed8c <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800ed86:	23fa      	movs	r3, #250	; 0xfa
 800ed88:	76bb      	strb	r3, [r7, #26]
 800ed8a:	e01d      	b.n	800edc8 <tcp_process+0x404>
=======
 800ecc0:	e23a      	b.n	800f138 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800ecc2:	4b9d      	ldr	r3, [pc, #628]	; (800ef38 <tcp_process+0x5a4>)
 800ecc4:	781b      	ldrb	r3, [r3, #0]
 800ecc6:	f003 0310 	and.w	r3, r3, #16
 800ecca:	2b00      	cmp	r3, #0
 800eccc:	f000 8234 	beq.w	800f138 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ecd0:	4b9a      	ldr	r3, [pc, #616]	; (800ef3c <tcp_process+0x5a8>)
 800ecd2:	6819      	ldr	r1, [r3, #0]
 800ecd4:	4b9a      	ldr	r3, [pc, #616]	; (800ef40 <tcp_process+0x5ac>)
 800ecd6:	881b      	ldrh	r3, [r3, #0]
 800ecd8:	461a      	mov	r2, r3
 800ecda:	4b9a      	ldr	r3, [pc, #616]	; (800ef44 <tcp_process+0x5b0>)
 800ecdc:	681b      	ldr	r3, [r3, #0]
 800ecde:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ece0:	4b99      	ldr	r3, [pc, #612]	; (800ef48 <tcp_process+0x5b4>)
 800ece2:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ece4:	885b      	ldrh	r3, [r3, #2]
 800ece6:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ece8:	4a97      	ldr	r2, [pc, #604]	; (800ef48 <tcp_process+0x5b4>)
 800ecea:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ecec:	8812      	ldrh	r2, [r2, #0]
 800ecee:	b292      	uxth	r2, r2
 800ecf0:	9202      	str	r2, [sp, #8]
 800ecf2:	9301      	str	r3, [sp, #4]
 800ecf4:	4b95      	ldr	r3, [pc, #596]	; (800ef4c <tcp_process+0x5b8>)
 800ecf6:	9300      	str	r3, [sp, #0]
 800ecf8:	4b95      	ldr	r3, [pc, #596]	; (800ef50 <tcp_process+0x5bc>)
 800ecfa:	4602      	mov	r2, r0
 800ecfc:	6878      	ldr	r0, [r7, #4]
 800ecfe:	f002 fc83 	bl	8011608 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ed08:	2b05      	cmp	r3, #5
 800ed0a:	f200 8215 	bhi.w	800f138 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	2200      	movs	r2, #0
 800ed12:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800ed14:	6878      	ldr	r0, [r7, #4]
 800ed16:	f002 fa4d 	bl	80111b4 <tcp_rexmit_rto>
      break;
 800ed1a:	e20d      	b.n	800f138 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800ed1c:	4b86      	ldr	r3, [pc, #536]	; (800ef38 <tcp_process+0x5a4>)
 800ed1e:	781b      	ldrb	r3, [r3, #0]
 800ed20:	f003 0310 	and.w	r3, r3, #16
 800ed24:	2b00      	cmp	r3, #0
 800ed26:	f000 80a1 	beq.w	800ee6c <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800ed2a:	4b84      	ldr	r3, [pc, #528]	; (800ef3c <tcp_process+0x5a8>)
 800ed2c:	681a      	ldr	r2, [r3, #0]
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ed32:	1ad3      	subs	r3, r2, r3
 800ed34:	3b01      	subs	r3, #1
 800ed36:	2b00      	cmp	r3, #0
 800ed38:	db7e      	blt.n	800ee38 <tcp_process+0x4a4>
 800ed3a:	4b80      	ldr	r3, [pc, #512]	; (800ef3c <tcp_process+0x5a8>)
 800ed3c:	681a      	ldr	r2, [r3, #0]
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ed42:	1ad3      	subs	r3, r2, r3
 800ed44:	2b00      	cmp	r3, #0
 800ed46:	dc77      	bgt.n	800ee38 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	2204      	movs	r2, #4
 800ed4c:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ed52:	2b00      	cmp	r3, #0
 800ed54:	d102      	bne.n	800ed5c <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800ed56:	23fa      	movs	r3, #250	; 0xfa
 800ed58:	76bb      	strb	r3, [r7, #26]
 800ed5a:	e01d      	b.n	800ed98 <tcp_process+0x404>
>>>>>>> Stashed changes
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
<<<<<<< Updated upstream
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ed90:	699b      	ldr	r3, [r3, #24]
 800ed92:	2b00      	cmp	r3, #0
 800ed94:	d106      	bne.n	800eda4 <tcp_process+0x3e0>
 800ed96:	4b7b      	ldr	r3, [pc, #492]	; (800ef84 <tcp_process+0x5c0>)
 800ed98:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800ed9c:	497a      	ldr	r1, [pc, #488]	; (800ef88 <tcp_process+0x5c4>)
 800ed9e:	487b      	ldr	r0, [pc, #492]	; (800ef8c <tcp_process+0x5c8>)
 800eda0:	f005 fbf0 	bl	8014584 <iprintf>
=======
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ed60:	699b      	ldr	r3, [r3, #24]
 800ed62:	2b00      	cmp	r3, #0
 800ed64:	d106      	bne.n	800ed74 <tcp_process+0x3e0>
 800ed66:	4b7b      	ldr	r3, [pc, #492]	; (800ef54 <tcp_process+0x5c0>)
 800ed68:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800ed6c:	497a      	ldr	r1, [pc, #488]	; (800ef58 <tcp_process+0x5c4>)
 800ed6e:	487b      	ldr	r0, [pc, #492]	; (800ef5c <tcp_process+0x5c8>)
 800ed70:	f005 fbf0 	bl	8014554 <iprintf>
>>>>>>> Stashed changes
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
<<<<<<< Updated upstream
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800eda8:	699b      	ldr	r3, [r3, #24]
 800edaa:	2b00      	cmp	r3, #0
 800edac:	d00a      	beq.n	800edc4 <tcp_process+0x400>
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800edb2:	699b      	ldr	r3, [r3, #24]
 800edb4:	687a      	ldr	r2, [r7, #4]
 800edb6:	6910      	ldr	r0, [r2, #16]
 800edb8:	2200      	movs	r2, #0
 800edba:	6879      	ldr	r1, [r7, #4]
 800edbc:	4798      	blx	r3
 800edbe:	4603      	mov	r3, r0
 800edc0:	76bb      	strb	r3, [r7, #26]
 800edc2:	e001      	b.n	800edc8 <tcp_process+0x404>
 800edc4:	23f0      	movs	r3, #240	; 0xf0
 800edc6:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800edc8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800edcc:	2b00      	cmp	r3, #0
 800edce:	d00a      	beq.n	800ede6 <tcp_process+0x422>
=======
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ed78:	699b      	ldr	r3, [r3, #24]
 800ed7a:	2b00      	cmp	r3, #0
 800ed7c:	d00a      	beq.n	800ed94 <tcp_process+0x400>
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ed82:	699b      	ldr	r3, [r3, #24]
 800ed84:	687a      	ldr	r2, [r7, #4]
 800ed86:	6910      	ldr	r0, [r2, #16]
 800ed88:	2200      	movs	r2, #0
 800ed8a:	6879      	ldr	r1, [r7, #4]
 800ed8c:	4798      	blx	r3
 800ed8e:	4603      	mov	r3, r0
 800ed90:	76bb      	strb	r3, [r7, #26]
 800ed92:	e001      	b.n	800ed98 <tcp_process+0x404>
 800ed94:	23f0      	movs	r3, #240	; 0xf0
 800ed96:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800ed98:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800ed9c:	2b00      	cmp	r3, #0
 800ed9e:	d00a      	beq.n	800edb6 <tcp_process+0x422>
>>>>>>> Stashed changes
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
<<<<<<< Updated upstream
 800edd0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800edd4:	f113 0f0d 	cmn.w	r3, #13
 800edd8:	d002      	beq.n	800ede0 <tcp_process+0x41c>
              tcp_abort(pcb);
 800edda:	6878      	ldr	r0, [r7, #4]
 800eddc:	f7fd ff90 	bl	800cd00 <tcp_abort>
            }
            return ERR_ABRT;
 800ede0:	f06f 030c 	mvn.w	r3, #12
 800ede4:	e1ce      	b.n	800f184 <tcp_process+0x7c0>
=======
 800eda0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800eda4:	f113 0f0d 	cmn.w	r3, #13
 800eda8:	d002      	beq.n	800edb0 <tcp_process+0x41c>
              tcp_abort(pcb);
 800edaa:	6878      	ldr	r0, [r7, #4]
 800edac:	f7fd ff90 	bl	800ccd0 <tcp_abort>
            }
            return ERR_ABRT;
 800edb0:	f06f 030c 	mvn.w	r3, #12
 800edb4:	e1ce      	b.n	800f154 <tcp_process+0x7c0>
>>>>>>> Stashed changes
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
<<<<<<< Updated upstream
 800ede6:	6878      	ldr	r0, [r7, #4]
 800ede8:	f000 fae0 	bl	800f3ac <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800edec:	4b68      	ldr	r3, [pc, #416]	; (800ef90 <tcp_process+0x5cc>)
 800edee:	881b      	ldrh	r3, [r3, #0]
 800edf0:	2b00      	cmp	r3, #0
 800edf2:	d005      	beq.n	800ee00 <tcp_process+0x43c>
            recv_acked--;
 800edf4:	4b66      	ldr	r3, [pc, #408]	; (800ef90 <tcp_process+0x5cc>)
 800edf6:	881b      	ldrh	r3, [r3, #0]
 800edf8:	3b01      	subs	r3, #1
 800edfa:	b29a      	uxth	r2, r3
 800edfc:	4b64      	ldr	r3, [pc, #400]	; (800ef90 <tcp_process+0x5cc>)
 800edfe:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ee04:	009a      	lsls	r2, r3, #2
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ee0a:	005b      	lsls	r3, r3, #1
 800ee0c:	f241 111c 	movw	r1, #4380	; 0x111c
 800ee10:	428b      	cmp	r3, r1
 800ee12:	bf38      	it	cc
 800ee14:	460b      	movcc	r3, r1
 800ee16:	429a      	cmp	r2, r3
 800ee18:	d204      	bcs.n	800ee24 <tcp_process+0x460>
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ee1e:	009b      	lsls	r3, r3, #2
 800ee20:	b29b      	uxth	r3, r3
 800ee22:	e00d      	b.n	800ee40 <tcp_process+0x47c>
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ee28:	005b      	lsls	r3, r3, #1
 800ee2a:	f241 121c 	movw	r2, #4380	; 0x111c
 800ee2e:	4293      	cmp	r3, r2
 800ee30:	d904      	bls.n	800ee3c <tcp_process+0x478>
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ee36:	005b      	lsls	r3, r3, #1
 800ee38:	b29b      	uxth	r3, r3
 800ee3a:	e001      	b.n	800ee40 <tcp_process+0x47c>
 800ee3c:	f241 131c 	movw	r3, #4380	; 0x111c
 800ee40:	687a      	ldr	r2, [r7, #4]
 800ee42:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
=======
 800edb6:	6878      	ldr	r0, [r7, #4]
 800edb8:	f000 fae0 	bl	800f37c <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800edbc:	4b68      	ldr	r3, [pc, #416]	; (800ef60 <tcp_process+0x5cc>)
 800edbe:	881b      	ldrh	r3, [r3, #0]
 800edc0:	2b00      	cmp	r3, #0
 800edc2:	d005      	beq.n	800edd0 <tcp_process+0x43c>
            recv_acked--;
 800edc4:	4b66      	ldr	r3, [pc, #408]	; (800ef60 <tcp_process+0x5cc>)
 800edc6:	881b      	ldrh	r3, [r3, #0]
 800edc8:	3b01      	subs	r3, #1
 800edca:	b29a      	uxth	r2, r3
 800edcc:	4b64      	ldr	r3, [pc, #400]	; (800ef60 <tcp_process+0x5cc>)
 800edce:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800edd4:	009a      	lsls	r2, r3, #2
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800edda:	005b      	lsls	r3, r3, #1
 800eddc:	f241 111c 	movw	r1, #4380	; 0x111c
 800ede0:	428b      	cmp	r3, r1
 800ede2:	bf38      	it	cc
 800ede4:	460b      	movcc	r3, r1
 800ede6:	429a      	cmp	r2, r3
 800ede8:	d204      	bcs.n	800edf4 <tcp_process+0x460>
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800edee:	009b      	lsls	r3, r3, #2
 800edf0:	b29b      	uxth	r3, r3
 800edf2:	e00d      	b.n	800ee10 <tcp_process+0x47c>
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800edf8:	005b      	lsls	r3, r3, #1
 800edfa:	f241 121c 	movw	r2, #4380	; 0x111c
 800edfe:	4293      	cmp	r3, r2
 800ee00:	d904      	bls.n	800ee0c <tcp_process+0x478>
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ee06:	005b      	lsls	r3, r3, #1
 800ee08:	b29b      	uxth	r3, r3
 800ee0a:	e001      	b.n	800ee10 <tcp_process+0x47c>
 800ee0c:	f241 131c 	movw	r3, #4380	; 0x111c
 800ee10:	687a      	ldr	r2, [r7, #4]
 800ee12:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
>>>>>>> Stashed changes
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
<<<<<<< Updated upstream
 800ee46:	4b53      	ldr	r3, [pc, #332]	; (800ef94 <tcp_process+0x5d0>)
 800ee48:	781b      	ldrb	r3, [r3, #0]
 800ee4a:	f003 0320 	and.w	r3, r3, #32
 800ee4e:	2b00      	cmp	r3, #0
 800ee50:	d037      	beq.n	800eec2 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	8b5b      	ldrh	r3, [r3, #26]
 800ee56:	f043 0302 	orr.w	r3, r3, #2
 800ee5a:	b29a      	uxth	r2, r3
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	2207      	movs	r2, #7
 800ee64:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800ee66:	e02c      	b.n	800eec2 <tcp_process+0x4fe>
=======
 800ee16:	4b53      	ldr	r3, [pc, #332]	; (800ef64 <tcp_process+0x5d0>)
 800ee18:	781b      	ldrb	r3, [r3, #0]
 800ee1a:	f003 0320 	and.w	r3, r3, #32
 800ee1e:	2b00      	cmp	r3, #0
 800ee20:	d037      	beq.n	800ee92 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	8b5b      	ldrh	r3, [r3, #26]
 800ee26:	f043 0302 	orr.w	r3, r3, #2
 800ee2a:	b29a      	uxth	r2, r3
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	2207      	movs	r2, #7
 800ee34:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800ee36:	e02c      	b.n	800ee92 <tcp_process+0x4fe>
>>>>>>> Stashed changes
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
<<<<<<< Updated upstream
 800ee68:	4b40      	ldr	r3, [pc, #256]	; (800ef6c <tcp_process+0x5a8>)
 800ee6a:	6819      	ldr	r1, [r3, #0]
 800ee6c:	4b40      	ldr	r3, [pc, #256]	; (800ef70 <tcp_process+0x5ac>)
 800ee6e:	881b      	ldrh	r3, [r3, #0]
 800ee70:	461a      	mov	r2, r3
 800ee72:	4b40      	ldr	r3, [pc, #256]	; (800ef74 <tcp_process+0x5b0>)
 800ee74:	681b      	ldr	r3, [r3, #0]
 800ee76:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ee78:	4b3f      	ldr	r3, [pc, #252]	; (800ef78 <tcp_process+0x5b4>)
 800ee7a:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ee7c:	885b      	ldrh	r3, [r3, #2]
 800ee7e:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ee80:	4a3d      	ldr	r2, [pc, #244]	; (800ef78 <tcp_process+0x5b4>)
 800ee82:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ee84:	8812      	ldrh	r2, [r2, #0]
 800ee86:	b292      	uxth	r2, r2
 800ee88:	9202      	str	r2, [sp, #8]
 800ee8a:	9301      	str	r3, [sp, #4]
 800ee8c:	4b3b      	ldr	r3, [pc, #236]	; (800ef7c <tcp_process+0x5b8>)
 800ee8e:	9300      	str	r3, [sp, #0]
 800ee90:	4b3b      	ldr	r3, [pc, #236]	; (800ef80 <tcp_process+0x5bc>)
 800ee92:	4602      	mov	r2, r0
 800ee94:	6878      	ldr	r0, [r7, #4]
 800ee96:	f002 fbcf 	bl	8011638 <tcp_rst>
=======
 800ee38:	4b40      	ldr	r3, [pc, #256]	; (800ef3c <tcp_process+0x5a8>)
 800ee3a:	6819      	ldr	r1, [r3, #0]
 800ee3c:	4b40      	ldr	r3, [pc, #256]	; (800ef40 <tcp_process+0x5ac>)
 800ee3e:	881b      	ldrh	r3, [r3, #0]
 800ee40:	461a      	mov	r2, r3
 800ee42:	4b40      	ldr	r3, [pc, #256]	; (800ef44 <tcp_process+0x5b0>)
 800ee44:	681b      	ldr	r3, [r3, #0]
 800ee46:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ee48:	4b3f      	ldr	r3, [pc, #252]	; (800ef48 <tcp_process+0x5b4>)
 800ee4a:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ee4c:	885b      	ldrh	r3, [r3, #2]
 800ee4e:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ee50:	4a3d      	ldr	r2, [pc, #244]	; (800ef48 <tcp_process+0x5b4>)
 800ee52:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ee54:	8812      	ldrh	r2, [r2, #0]
 800ee56:	b292      	uxth	r2, r2
 800ee58:	9202      	str	r2, [sp, #8]
 800ee5a:	9301      	str	r3, [sp, #4]
 800ee5c:	4b3b      	ldr	r3, [pc, #236]	; (800ef4c <tcp_process+0x5b8>)
 800ee5e:	9300      	str	r3, [sp, #0]
 800ee60:	4b3b      	ldr	r3, [pc, #236]	; (800ef50 <tcp_process+0x5bc>)
 800ee62:	4602      	mov	r2, r0
 800ee64:	6878      	ldr	r0, [r7, #4]
 800ee66:	f002 fbcf 	bl	8011608 <tcp_rst>
>>>>>>> Stashed changes
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
<<<<<<< Updated upstream
 800ee9a:	e167      	b.n	800f16c <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800ee9c:	4b32      	ldr	r3, [pc, #200]	; (800ef68 <tcp_process+0x5a4>)
 800ee9e:	781b      	ldrb	r3, [r3, #0]
 800eea0:	f003 0302 	and.w	r3, r3, #2
 800eea4:	2b00      	cmp	r3, #0
 800eea6:	f000 8161 	beq.w	800f16c <tcp_process+0x7a8>
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eeae:	1e5a      	subs	r2, r3, #1
 800eeb0:	4b30      	ldr	r3, [pc, #192]	; (800ef74 <tcp_process+0x5b0>)
 800eeb2:	681b      	ldr	r3, [r3, #0]
 800eeb4:	429a      	cmp	r2, r3
 800eeb6:	f040 8159 	bne.w	800f16c <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800eeba:	6878      	ldr	r0, [r7, #4]
 800eebc:	f002 f9b4 	bl	8011228 <tcp_rexmit>
      break;
 800eec0:	e154      	b.n	800f16c <tcp_process+0x7a8>
 800eec2:	e153      	b.n	800f16c <tcp_process+0x7a8>
=======
 800ee6a:	e167      	b.n	800f13c <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800ee6c:	4b32      	ldr	r3, [pc, #200]	; (800ef38 <tcp_process+0x5a4>)
 800ee6e:	781b      	ldrb	r3, [r3, #0]
 800ee70:	f003 0302 	and.w	r3, r3, #2
 800ee74:	2b00      	cmp	r3, #0
 800ee76:	f000 8161 	beq.w	800f13c <tcp_process+0x7a8>
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee7e:	1e5a      	subs	r2, r3, #1
 800ee80:	4b30      	ldr	r3, [pc, #192]	; (800ef44 <tcp_process+0x5b0>)
 800ee82:	681b      	ldr	r3, [r3, #0]
 800ee84:	429a      	cmp	r2, r3
 800ee86:	f040 8159 	bne.w	800f13c <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800ee8a:	6878      	ldr	r0, [r7, #4]
 800ee8c:	f002 f9b4 	bl	80111f8 <tcp_rexmit>
      break;
 800ee90:	e154      	b.n	800f13c <tcp_process+0x7a8>
 800ee92:	e153      	b.n	800f13c <tcp_process+0x7a8>
>>>>>>> Stashed changes
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
<<<<<<< Updated upstream
 800eec4:	6878      	ldr	r0, [r7, #4]
 800eec6:	f000 fa71 	bl	800f3ac <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800eeca:	4b32      	ldr	r3, [pc, #200]	; (800ef94 <tcp_process+0x5d0>)
 800eecc:	781b      	ldrb	r3, [r3, #0]
 800eece:	f003 0320 	and.w	r3, r3, #32
 800eed2:	2b00      	cmp	r3, #0
 800eed4:	f000 814c 	beq.w	800f170 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	8b5b      	ldrh	r3, [r3, #26]
 800eedc:	f043 0302 	orr.w	r3, r3, #2
 800eee0:	b29a      	uxth	r2, r3
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	2207      	movs	r2, #7
 800eeea:	751a      	strb	r2, [r3, #20]
      }
      break;
 800eeec:	e140      	b.n	800f170 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800eeee:	6878      	ldr	r0, [r7, #4]
 800eef0:	f000 fa5c 	bl	800f3ac <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800eef4:	4b27      	ldr	r3, [pc, #156]	; (800ef94 <tcp_process+0x5d0>)
 800eef6:	781b      	ldrb	r3, [r3, #0]
 800eef8:	f003 0320 	and.w	r3, r3, #32
 800eefc:	2b00      	cmp	r3, #0
 800eefe:	d071      	beq.n	800efe4 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ef00:	4b19      	ldr	r3, [pc, #100]	; (800ef68 <tcp_process+0x5a4>)
 800ef02:	781b      	ldrb	r3, [r3, #0]
 800ef04:	f003 0310 	and.w	r3, r3, #16
 800ef08:	2b00      	cmp	r3, #0
 800ef0a:	d060      	beq.n	800efce <tcp_process+0x60a>
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ef10:	4b16      	ldr	r3, [pc, #88]	; (800ef6c <tcp_process+0x5a8>)
 800ef12:	681b      	ldr	r3, [r3, #0]
 800ef14:	429a      	cmp	r2, r3
 800ef16:	d15a      	bne.n	800efce <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ef1c:	2b00      	cmp	r3, #0
 800ef1e:	d156      	bne.n	800efce <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	8b5b      	ldrh	r3, [r3, #26]
 800ef24:	f043 0302 	orr.w	r3, r3, #2
 800ef28:	b29a      	uxth	r2, r3
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800ef2e:	6878      	ldr	r0, [r7, #4]
 800ef30:	f7fe fdbe 	bl	800dab0 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800ef34:	4b18      	ldr	r3, [pc, #96]	; (800ef98 <tcp_process+0x5d4>)
 800ef36:	681b      	ldr	r3, [r3, #0]
 800ef38:	687a      	ldr	r2, [r7, #4]
 800ef3a:	429a      	cmp	r2, r3
 800ef3c:	d105      	bne.n	800ef4a <tcp_process+0x586>
 800ef3e:	4b16      	ldr	r3, [pc, #88]	; (800ef98 <tcp_process+0x5d4>)
 800ef40:	681b      	ldr	r3, [r3, #0]
 800ef42:	68db      	ldr	r3, [r3, #12]
 800ef44:	4a14      	ldr	r2, [pc, #80]	; (800ef98 <tcp_process+0x5d4>)
 800ef46:	6013      	str	r3, [r2, #0]
 800ef48:	e02e      	b.n	800efa8 <tcp_process+0x5e4>
 800ef4a:	4b13      	ldr	r3, [pc, #76]	; (800ef98 <tcp_process+0x5d4>)
 800ef4c:	681b      	ldr	r3, [r3, #0]
 800ef4e:	617b      	str	r3, [r7, #20]
 800ef50:	e027      	b.n	800efa2 <tcp_process+0x5de>
 800ef52:	697b      	ldr	r3, [r7, #20]
 800ef54:	68db      	ldr	r3, [r3, #12]
 800ef56:	687a      	ldr	r2, [r7, #4]
 800ef58:	429a      	cmp	r2, r3
 800ef5a:	d11f      	bne.n	800ef9c <tcp_process+0x5d8>
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	68da      	ldr	r2, [r3, #12]
 800ef60:	697b      	ldr	r3, [r7, #20]
 800ef62:	60da      	str	r2, [r3, #12]
 800ef64:	e020      	b.n	800efa8 <tcp_process+0x5e4>
 800ef66:	bf00      	nop
 800ef68:	20000114 	.word	0x20000114
 800ef6c:	2000010c 	.word	0x2000010c
 800ef70:	20000112 	.word	0x20000112
 800ef74:	20000108 	.word	0x20000108
 800ef78:	200000f8 	.word	0x200000f8
 800ef7c:	20003d6c 	.word	0x20003d6c
 800ef80:	20003d70 	.word	0x20003d70
 800ef84:	08016b90 	.word	0x08016b90
 800ef88:	08016e30 	.word	0x08016e30
 800ef8c:	08016bdc 	.word	0x08016bdc
 800ef90:	20000110 	.word	0x20000110
 800ef94:	20000115 	.word	0x20000115
 800ef98:	200072a0 	.word	0x200072a0
 800ef9c:	697b      	ldr	r3, [r7, #20]
 800ef9e:	68db      	ldr	r3, [r3, #12]
 800efa0:	617b      	str	r3, [r7, #20]
 800efa2:	697b      	ldr	r3, [r7, #20]
 800efa4:	2b00      	cmp	r3, #0
 800efa6:	d1d4      	bne.n	800ef52 <tcp_process+0x58e>
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	2200      	movs	r2, #0
 800efac:	60da      	str	r2, [r3, #12]
 800efae:	4b77      	ldr	r3, [pc, #476]	; (800f18c <tcp_process+0x7c8>)
 800efb0:	2201      	movs	r2, #1
 800efb2:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	220a      	movs	r2, #10
 800efb8:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800efba:	4b75      	ldr	r3, [pc, #468]	; (800f190 <tcp_process+0x7cc>)
 800efbc:	681a      	ldr	r2, [r3, #0]
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	60da      	str	r2, [r3, #12]
 800efc2:	4a73      	ldr	r2, [pc, #460]	; (800f190 <tcp_process+0x7cc>)
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	6013      	str	r3, [r2, #0]
 800efc8:	f002 fcf8 	bl	80119bc <tcp_timer_needed>
=======
 800ee94:	6878      	ldr	r0, [r7, #4]
 800ee96:	f000 fa71 	bl	800f37c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800ee9a:	4b32      	ldr	r3, [pc, #200]	; (800ef64 <tcp_process+0x5d0>)
 800ee9c:	781b      	ldrb	r3, [r3, #0]
 800ee9e:	f003 0320 	and.w	r3, r3, #32
 800eea2:	2b00      	cmp	r3, #0
 800eea4:	f000 814c 	beq.w	800f140 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	8b5b      	ldrh	r3, [r3, #26]
 800eeac:	f043 0302 	orr.w	r3, r3, #2
 800eeb0:	b29a      	uxth	r2, r3
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	2207      	movs	r2, #7
 800eeba:	751a      	strb	r2, [r3, #20]
      }
      break;
 800eebc:	e140      	b.n	800f140 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800eebe:	6878      	ldr	r0, [r7, #4]
 800eec0:	f000 fa5c 	bl	800f37c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800eec4:	4b27      	ldr	r3, [pc, #156]	; (800ef64 <tcp_process+0x5d0>)
 800eec6:	781b      	ldrb	r3, [r3, #0]
 800eec8:	f003 0320 	and.w	r3, r3, #32
 800eecc:	2b00      	cmp	r3, #0
 800eece:	d071      	beq.n	800efb4 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800eed0:	4b19      	ldr	r3, [pc, #100]	; (800ef38 <tcp_process+0x5a4>)
 800eed2:	781b      	ldrb	r3, [r3, #0]
 800eed4:	f003 0310 	and.w	r3, r3, #16
 800eed8:	2b00      	cmp	r3, #0
 800eeda:	d060      	beq.n	800ef9e <tcp_process+0x60a>
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800eee0:	4b16      	ldr	r3, [pc, #88]	; (800ef3c <tcp_process+0x5a8>)
 800eee2:	681b      	ldr	r3, [r3, #0]
 800eee4:	429a      	cmp	r2, r3
 800eee6:	d15a      	bne.n	800ef9e <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800eeec:	2b00      	cmp	r3, #0
 800eeee:	d156      	bne.n	800ef9e <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	8b5b      	ldrh	r3, [r3, #26]
 800eef4:	f043 0302 	orr.w	r3, r3, #2
 800eef8:	b29a      	uxth	r2, r3
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800eefe:	6878      	ldr	r0, [r7, #4]
 800ef00:	f7fe fdbe 	bl	800da80 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800ef04:	4b18      	ldr	r3, [pc, #96]	; (800ef68 <tcp_process+0x5d4>)
 800ef06:	681b      	ldr	r3, [r3, #0]
 800ef08:	687a      	ldr	r2, [r7, #4]
 800ef0a:	429a      	cmp	r2, r3
 800ef0c:	d105      	bne.n	800ef1a <tcp_process+0x586>
 800ef0e:	4b16      	ldr	r3, [pc, #88]	; (800ef68 <tcp_process+0x5d4>)
 800ef10:	681b      	ldr	r3, [r3, #0]
 800ef12:	68db      	ldr	r3, [r3, #12]
 800ef14:	4a14      	ldr	r2, [pc, #80]	; (800ef68 <tcp_process+0x5d4>)
 800ef16:	6013      	str	r3, [r2, #0]
 800ef18:	e02e      	b.n	800ef78 <tcp_process+0x5e4>
 800ef1a:	4b13      	ldr	r3, [pc, #76]	; (800ef68 <tcp_process+0x5d4>)
 800ef1c:	681b      	ldr	r3, [r3, #0]
 800ef1e:	617b      	str	r3, [r7, #20]
 800ef20:	e027      	b.n	800ef72 <tcp_process+0x5de>
 800ef22:	697b      	ldr	r3, [r7, #20]
 800ef24:	68db      	ldr	r3, [r3, #12]
 800ef26:	687a      	ldr	r2, [r7, #4]
 800ef28:	429a      	cmp	r2, r3
 800ef2a:	d11f      	bne.n	800ef6c <tcp_process+0x5d8>
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	68da      	ldr	r2, [r3, #12]
 800ef30:	697b      	ldr	r3, [r7, #20]
 800ef32:	60da      	str	r2, [r3, #12]
 800ef34:	e020      	b.n	800ef78 <tcp_process+0x5e4>
 800ef36:	bf00      	nop
 800ef38:	20000114 	.word	0x20000114
 800ef3c:	2000010c 	.word	0x2000010c
 800ef40:	20000112 	.word	0x20000112
 800ef44:	20000108 	.word	0x20000108
 800ef48:	200000f8 	.word	0x200000f8
 800ef4c:	20003d6c 	.word	0x20003d6c
 800ef50:	20003d70 	.word	0x20003d70
 800ef54:	08016b74 	.word	0x08016b74
 800ef58:	08016e14 	.word	0x08016e14
 800ef5c:	08016bc0 	.word	0x08016bc0
 800ef60:	20000110 	.word	0x20000110
 800ef64:	20000115 	.word	0x20000115
 800ef68:	200072a0 	.word	0x200072a0
 800ef6c:	697b      	ldr	r3, [r7, #20]
 800ef6e:	68db      	ldr	r3, [r3, #12]
 800ef70:	617b      	str	r3, [r7, #20]
 800ef72:	697b      	ldr	r3, [r7, #20]
 800ef74:	2b00      	cmp	r3, #0
 800ef76:	d1d4      	bne.n	800ef22 <tcp_process+0x58e>
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	2200      	movs	r2, #0
 800ef7c:	60da      	str	r2, [r3, #12]
 800ef7e:	4b77      	ldr	r3, [pc, #476]	; (800f15c <tcp_process+0x7c8>)
 800ef80:	2201      	movs	r2, #1
 800ef82:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	220a      	movs	r2, #10
 800ef88:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800ef8a:	4b75      	ldr	r3, [pc, #468]	; (800f160 <tcp_process+0x7cc>)
 800ef8c:	681a      	ldr	r2, [r3, #0]
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	60da      	str	r2, [r3, #12]
 800ef92:	4a73      	ldr	r2, [pc, #460]	; (800f160 <tcp_process+0x7cc>)
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	6013      	str	r3, [r2, #0]
 800ef98:	f002 fcf8 	bl	801198c <tcp_timer_needed>
>>>>>>> Stashed changes
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
<<<<<<< Updated upstream
 800efcc:	e0d2      	b.n	800f174 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	8b5b      	ldrh	r3, [r3, #26]
 800efd2:	f043 0302 	orr.w	r3, r3, #2
 800efd6:	b29a      	uxth	r2, r3
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	2208      	movs	r2, #8
 800efe0:	751a      	strb	r2, [r3, #20]
      break;
 800efe2:	e0c7      	b.n	800f174 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800efe4:	4b6b      	ldr	r3, [pc, #428]	; (800f194 <tcp_process+0x7d0>)
 800efe6:	781b      	ldrb	r3, [r3, #0]
 800efe8:	f003 0310 	and.w	r3, r3, #16
 800efec:	2b00      	cmp	r3, #0
 800efee:	f000 80c1 	beq.w	800f174 <tcp_process+0x7b0>
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800eff6:	4b68      	ldr	r3, [pc, #416]	; (800f198 <tcp_process+0x7d4>)
 800eff8:	681b      	ldr	r3, [r3, #0]
 800effa:	429a      	cmp	r2, r3
 800effc:	f040 80ba 	bne.w	800f174 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f004:	2b00      	cmp	r3, #0
 800f006:	f040 80b5 	bne.w	800f174 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	2206      	movs	r2, #6
 800f00e:	751a      	strb	r2, [r3, #20]
      break;
 800f010:	e0b0      	b.n	800f174 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800f012:	6878      	ldr	r0, [r7, #4]
 800f014:	f000 f9ca 	bl	800f3ac <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800f018:	4b60      	ldr	r3, [pc, #384]	; (800f19c <tcp_process+0x7d8>)
 800f01a:	781b      	ldrb	r3, [r3, #0]
 800f01c:	f003 0320 	and.w	r3, r3, #32
 800f020:	2b00      	cmp	r3, #0
 800f022:	f000 80a9 	beq.w	800f178 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	8b5b      	ldrh	r3, [r3, #26]
 800f02a:	f043 0302 	orr.w	r3, r3, #2
 800f02e:	b29a      	uxth	r2, r3
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800f034:	6878      	ldr	r0, [r7, #4]
 800f036:	f7fe fd3b 	bl	800dab0 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800f03a:	4b59      	ldr	r3, [pc, #356]	; (800f1a0 <tcp_process+0x7dc>)
 800f03c:	681b      	ldr	r3, [r3, #0]
 800f03e:	687a      	ldr	r2, [r7, #4]
 800f040:	429a      	cmp	r2, r3
 800f042:	d105      	bne.n	800f050 <tcp_process+0x68c>
 800f044:	4b56      	ldr	r3, [pc, #344]	; (800f1a0 <tcp_process+0x7dc>)
 800f046:	681b      	ldr	r3, [r3, #0]
 800f048:	68db      	ldr	r3, [r3, #12]
 800f04a:	4a55      	ldr	r2, [pc, #340]	; (800f1a0 <tcp_process+0x7dc>)
 800f04c:	6013      	str	r3, [r2, #0]
 800f04e:	e013      	b.n	800f078 <tcp_process+0x6b4>
 800f050:	4b53      	ldr	r3, [pc, #332]	; (800f1a0 <tcp_process+0x7dc>)
 800f052:	681b      	ldr	r3, [r3, #0]
 800f054:	613b      	str	r3, [r7, #16]
 800f056:	e00c      	b.n	800f072 <tcp_process+0x6ae>
 800f058:	693b      	ldr	r3, [r7, #16]
 800f05a:	68db      	ldr	r3, [r3, #12]
 800f05c:	687a      	ldr	r2, [r7, #4]
 800f05e:	429a      	cmp	r2, r3
 800f060:	d104      	bne.n	800f06c <tcp_process+0x6a8>
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	68da      	ldr	r2, [r3, #12]
 800f066:	693b      	ldr	r3, [r7, #16]
 800f068:	60da      	str	r2, [r3, #12]
 800f06a:	e005      	b.n	800f078 <tcp_process+0x6b4>
 800f06c:	693b      	ldr	r3, [r7, #16]
 800f06e:	68db      	ldr	r3, [r3, #12]
 800f070:	613b      	str	r3, [r7, #16]
 800f072:	693b      	ldr	r3, [r7, #16]
 800f074:	2b00      	cmp	r3, #0
 800f076:	d1ef      	bne.n	800f058 <tcp_process+0x694>
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	2200      	movs	r2, #0
 800f07c:	60da      	str	r2, [r3, #12]
 800f07e:	4b43      	ldr	r3, [pc, #268]	; (800f18c <tcp_process+0x7c8>)
 800f080:	2201      	movs	r2, #1
 800f082:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	220a      	movs	r2, #10
 800f088:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800f08a:	4b41      	ldr	r3, [pc, #260]	; (800f190 <tcp_process+0x7cc>)
 800f08c:	681a      	ldr	r2, [r3, #0]
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	60da      	str	r2, [r3, #12]
 800f092:	4a3f      	ldr	r2, [pc, #252]	; (800f190 <tcp_process+0x7cc>)
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	6013      	str	r3, [r2, #0]
 800f098:	f002 fc90 	bl	80119bc <tcp_timer_needed>
      }
      break;
 800f09c:	e06c      	b.n	800f178 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800f09e:	6878      	ldr	r0, [r7, #4]
 800f0a0:	f000 f984 	bl	800f3ac <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800f0a4:	4b3b      	ldr	r3, [pc, #236]	; (800f194 <tcp_process+0x7d0>)
 800f0a6:	781b      	ldrb	r3, [r3, #0]
 800f0a8:	f003 0310 	and.w	r3, r3, #16
 800f0ac:	2b00      	cmp	r3, #0
 800f0ae:	d065      	beq.n	800f17c <tcp_process+0x7b8>
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f0b4:	4b38      	ldr	r3, [pc, #224]	; (800f198 <tcp_process+0x7d4>)
 800f0b6:	681b      	ldr	r3, [r3, #0]
 800f0b8:	429a      	cmp	r2, r3
 800f0ba:	d15f      	bne.n	800f17c <tcp_process+0x7b8>
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f0c0:	2b00      	cmp	r3, #0
 800f0c2:	d15b      	bne.n	800f17c <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800f0c4:	6878      	ldr	r0, [r7, #4]
 800f0c6:	f7fe fcf3 	bl	800dab0 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800f0ca:	4b35      	ldr	r3, [pc, #212]	; (800f1a0 <tcp_process+0x7dc>)
 800f0cc:	681b      	ldr	r3, [r3, #0]
 800f0ce:	687a      	ldr	r2, [r7, #4]
 800f0d0:	429a      	cmp	r2, r3
 800f0d2:	d105      	bne.n	800f0e0 <tcp_process+0x71c>
 800f0d4:	4b32      	ldr	r3, [pc, #200]	; (800f1a0 <tcp_process+0x7dc>)
 800f0d6:	681b      	ldr	r3, [r3, #0]
 800f0d8:	68db      	ldr	r3, [r3, #12]
 800f0da:	4a31      	ldr	r2, [pc, #196]	; (800f1a0 <tcp_process+0x7dc>)
 800f0dc:	6013      	str	r3, [r2, #0]
 800f0de:	e013      	b.n	800f108 <tcp_process+0x744>
 800f0e0:	4b2f      	ldr	r3, [pc, #188]	; (800f1a0 <tcp_process+0x7dc>)
 800f0e2:	681b      	ldr	r3, [r3, #0]
 800f0e4:	60fb      	str	r3, [r7, #12]
 800f0e6:	e00c      	b.n	800f102 <tcp_process+0x73e>
 800f0e8:	68fb      	ldr	r3, [r7, #12]
 800f0ea:	68db      	ldr	r3, [r3, #12]
 800f0ec:	687a      	ldr	r2, [r7, #4]
 800f0ee:	429a      	cmp	r2, r3
 800f0f0:	d104      	bne.n	800f0fc <tcp_process+0x738>
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	68da      	ldr	r2, [r3, #12]
 800f0f6:	68fb      	ldr	r3, [r7, #12]
 800f0f8:	60da      	str	r2, [r3, #12]
 800f0fa:	e005      	b.n	800f108 <tcp_process+0x744>
 800f0fc:	68fb      	ldr	r3, [r7, #12]
 800f0fe:	68db      	ldr	r3, [r3, #12]
 800f100:	60fb      	str	r3, [r7, #12]
 800f102:	68fb      	ldr	r3, [r7, #12]
 800f104:	2b00      	cmp	r3, #0
 800f106:	d1ef      	bne.n	800f0e8 <tcp_process+0x724>
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	2200      	movs	r2, #0
 800f10c:	60da      	str	r2, [r3, #12]
 800f10e:	4b1f      	ldr	r3, [pc, #124]	; (800f18c <tcp_process+0x7c8>)
 800f110:	2201      	movs	r2, #1
 800f112:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	220a      	movs	r2, #10
 800f118:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800f11a:	4b1d      	ldr	r3, [pc, #116]	; (800f190 <tcp_process+0x7cc>)
 800f11c:	681a      	ldr	r2, [r3, #0]
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	60da      	str	r2, [r3, #12]
 800f122:	4a1b      	ldr	r2, [pc, #108]	; (800f190 <tcp_process+0x7cc>)
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	6013      	str	r3, [r2, #0]
 800f128:	f002 fc48 	bl	80119bc <tcp_timer_needed>
      }
      break;
 800f12c:	e026      	b.n	800f17c <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800f12e:	6878      	ldr	r0, [r7, #4]
 800f130:	f000 f93c 	bl	800f3ac <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800f134:	4b17      	ldr	r3, [pc, #92]	; (800f194 <tcp_process+0x7d0>)
 800f136:	781b      	ldrb	r3, [r3, #0]
 800f138:	f003 0310 	and.w	r3, r3, #16
 800f13c:	2b00      	cmp	r3, #0
 800f13e:	d01f      	beq.n	800f180 <tcp_process+0x7bc>
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f144:	4b14      	ldr	r3, [pc, #80]	; (800f198 <tcp_process+0x7d4>)
 800f146:	681b      	ldr	r3, [r3, #0]
 800f148:	429a      	cmp	r2, r3
 800f14a:	d119      	bne.n	800f180 <tcp_process+0x7bc>
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f150:	2b00      	cmp	r3, #0
 800f152:	d115      	bne.n	800f180 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800f154:	4b11      	ldr	r3, [pc, #68]	; (800f19c <tcp_process+0x7d8>)
 800f156:	781b      	ldrb	r3, [r3, #0]
 800f158:	f043 0310 	orr.w	r3, r3, #16
 800f15c:	b2da      	uxtb	r2, r3
 800f15e:	4b0f      	ldr	r3, [pc, #60]	; (800f19c <tcp_process+0x7d8>)
 800f160:	701a      	strb	r2, [r3, #0]
      }
      break;
 800f162:	e00d      	b.n	800f180 <tcp_process+0x7bc>
    default:
      break;
 800f164:	bf00      	nop
 800f166:	e00c      	b.n	800f182 <tcp_process+0x7be>
      break;
 800f168:	bf00      	nop
 800f16a:	e00a      	b.n	800f182 <tcp_process+0x7be>
      break;
 800f16c:	bf00      	nop
 800f16e:	e008      	b.n	800f182 <tcp_process+0x7be>
      break;
 800f170:	bf00      	nop
 800f172:	e006      	b.n	800f182 <tcp_process+0x7be>
      break;
 800f174:	bf00      	nop
 800f176:	e004      	b.n	800f182 <tcp_process+0x7be>
      break;
 800f178:	bf00      	nop
 800f17a:	e002      	b.n	800f182 <tcp_process+0x7be>
      break;
 800f17c:	bf00      	nop
 800f17e:	e000      	b.n	800f182 <tcp_process+0x7be>
      break;
 800f180:	bf00      	nop
  }
  return ERR_OK;
 800f182:	2300      	movs	r3, #0
}
 800f184:	4618      	mov	r0, r3
 800f186:	3724      	adds	r7, #36	; 0x24
 800f188:	46bd      	mov	sp, r7
 800f18a:	bd90      	pop	{r4, r7, pc}
 800f18c:	2000729c 	.word	0x2000729c
 800f190:	200072b0 	.word	0x200072b0
 800f194:	20000114 	.word	0x20000114
 800f198:	2000010c 	.word	0x2000010c
 800f19c:	20000115 	.word	0x20000115
 800f1a0:	200072a0 	.word	0x200072a0

0800f1a4 <tcp_oos_insert_segment>:
=======
 800ef9c:	e0d2      	b.n	800f144 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	8b5b      	ldrh	r3, [r3, #26]
 800efa2:	f043 0302 	orr.w	r3, r3, #2
 800efa6:	b29a      	uxth	r2, r3
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	2208      	movs	r2, #8
 800efb0:	751a      	strb	r2, [r3, #20]
      break;
 800efb2:	e0c7      	b.n	800f144 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800efb4:	4b6b      	ldr	r3, [pc, #428]	; (800f164 <tcp_process+0x7d0>)
 800efb6:	781b      	ldrb	r3, [r3, #0]
 800efb8:	f003 0310 	and.w	r3, r3, #16
 800efbc:	2b00      	cmp	r3, #0
 800efbe:	f000 80c1 	beq.w	800f144 <tcp_process+0x7b0>
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800efc6:	4b68      	ldr	r3, [pc, #416]	; (800f168 <tcp_process+0x7d4>)
 800efc8:	681b      	ldr	r3, [r3, #0]
 800efca:	429a      	cmp	r2, r3
 800efcc:	f040 80ba 	bne.w	800f144 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800efd4:	2b00      	cmp	r3, #0
 800efd6:	f040 80b5 	bne.w	800f144 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	2206      	movs	r2, #6
 800efde:	751a      	strb	r2, [r3, #20]
      break;
 800efe0:	e0b0      	b.n	800f144 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800efe2:	6878      	ldr	r0, [r7, #4]
 800efe4:	f000 f9ca 	bl	800f37c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800efe8:	4b60      	ldr	r3, [pc, #384]	; (800f16c <tcp_process+0x7d8>)
 800efea:	781b      	ldrb	r3, [r3, #0]
 800efec:	f003 0320 	and.w	r3, r3, #32
 800eff0:	2b00      	cmp	r3, #0
 800eff2:	f000 80a9 	beq.w	800f148 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	8b5b      	ldrh	r3, [r3, #26]
 800effa:	f043 0302 	orr.w	r3, r3, #2
 800effe:	b29a      	uxth	r2, r3
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800f004:	6878      	ldr	r0, [r7, #4]
 800f006:	f7fe fd3b 	bl	800da80 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800f00a:	4b59      	ldr	r3, [pc, #356]	; (800f170 <tcp_process+0x7dc>)
 800f00c:	681b      	ldr	r3, [r3, #0]
 800f00e:	687a      	ldr	r2, [r7, #4]
 800f010:	429a      	cmp	r2, r3
 800f012:	d105      	bne.n	800f020 <tcp_process+0x68c>
 800f014:	4b56      	ldr	r3, [pc, #344]	; (800f170 <tcp_process+0x7dc>)
 800f016:	681b      	ldr	r3, [r3, #0]
 800f018:	68db      	ldr	r3, [r3, #12]
 800f01a:	4a55      	ldr	r2, [pc, #340]	; (800f170 <tcp_process+0x7dc>)
 800f01c:	6013      	str	r3, [r2, #0]
 800f01e:	e013      	b.n	800f048 <tcp_process+0x6b4>
 800f020:	4b53      	ldr	r3, [pc, #332]	; (800f170 <tcp_process+0x7dc>)
 800f022:	681b      	ldr	r3, [r3, #0]
 800f024:	613b      	str	r3, [r7, #16]
 800f026:	e00c      	b.n	800f042 <tcp_process+0x6ae>
 800f028:	693b      	ldr	r3, [r7, #16]
 800f02a:	68db      	ldr	r3, [r3, #12]
 800f02c:	687a      	ldr	r2, [r7, #4]
 800f02e:	429a      	cmp	r2, r3
 800f030:	d104      	bne.n	800f03c <tcp_process+0x6a8>
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	68da      	ldr	r2, [r3, #12]
 800f036:	693b      	ldr	r3, [r7, #16]
 800f038:	60da      	str	r2, [r3, #12]
 800f03a:	e005      	b.n	800f048 <tcp_process+0x6b4>
 800f03c:	693b      	ldr	r3, [r7, #16]
 800f03e:	68db      	ldr	r3, [r3, #12]
 800f040:	613b      	str	r3, [r7, #16]
 800f042:	693b      	ldr	r3, [r7, #16]
 800f044:	2b00      	cmp	r3, #0
 800f046:	d1ef      	bne.n	800f028 <tcp_process+0x694>
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	2200      	movs	r2, #0
 800f04c:	60da      	str	r2, [r3, #12]
 800f04e:	4b43      	ldr	r3, [pc, #268]	; (800f15c <tcp_process+0x7c8>)
 800f050:	2201      	movs	r2, #1
 800f052:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	220a      	movs	r2, #10
 800f058:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800f05a:	4b41      	ldr	r3, [pc, #260]	; (800f160 <tcp_process+0x7cc>)
 800f05c:	681a      	ldr	r2, [r3, #0]
 800f05e:	687b      	ldr	r3, [r7, #4]
 800f060:	60da      	str	r2, [r3, #12]
 800f062:	4a3f      	ldr	r2, [pc, #252]	; (800f160 <tcp_process+0x7cc>)
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	6013      	str	r3, [r2, #0]
 800f068:	f002 fc90 	bl	801198c <tcp_timer_needed>
      }
      break;
 800f06c:	e06c      	b.n	800f148 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800f06e:	6878      	ldr	r0, [r7, #4]
 800f070:	f000 f984 	bl	800f37c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800f074:	4b3b      	ldr	r3, [pc, #236]	; (800f164 <tcp_process+0x7d0>)
 800f076:	781b      	ldrb	r3, [r3, #0]
 800f078:	f003 0310 	and.w	r3, r3, #16
 800f07c:	2b00      	cmp	r3, #0
 800f07e:	d065      	beq.n	800f14c <tcp_process+0x7b8>
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f084:	4b38      	ldr	r3, [pc, #224]	; (800f168 <tcp_process+0x7d4>)
 800f086:	681b      	ldr	r3, [r3, #0]
 800f088:	429a      	cmp	r2, r3
 800f08a:	d15f      	bne.n	800f14c <tcp_process+0x7b8>
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f090:	2b00      	cmp	r3, #0
 800f092:	d15b      	bne.n	800f14c <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800f094:	6878      	ldr	r0, [r7, #4]
 800f096:	f7fe fcf3 	bl	800da80 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800f09a:	4b35      	ldr	r3, [pc, #212]	; (800f170 <tcp_process+0x7dc>)
 800f09c:	681b      	ldr	r3, [r3, #0]
 800f09e:	687a      	ldr	r2, [r7, #4]
 800f0a0:	429a      	cmp	r2, r3
 800f0a2:	d105      	bne.n	800f0b0 <tcp_process+0x71c>
 800f0a4:	4b32      	ldr	r3, [pc, #200]	; (800f170 <tcp_process+0x7dc>)
 800f0a6:	681b      	ldr	r3, [r3, #0]
 800f0a8:	68db      	ldr	r3, [r3, #12]
 800f0aa:	4a31      	ldr	r2, [pc, #196]	; (800f170 <tcp_process+0x7dc>)
 800f0ac:	6013      	str	r3, [r2, #0]
 800f0ae:	e013      	b.n	800f0d8 <tcp_process+0x744>
 800f0b0:	4b2f      	ldr	r3, [pc, #188]	; (800f170 <tcp_process+0x7dc>)
 800f0b2:	681b      	ldr	r3, [r3, #0]
 800f0b4:	60fb      	str	r3, [r7, #12]
 800f0b6:	e00c      	b.n	800f0d2 <tcp_process+0x73e>
 800f0b8:	68fb      	ldr	r3, [r7, #12]
 800f0ba:	68db      	ldr	r3, [r3, #12]
 800f0bc:	687a      	ldr	r2, [r7, #4]
 800f0be:	429a      	cmp	r2, r3
 800f0c0:	d104      	bne.n	800f0cc <tcp_process+0x738>
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	68da      	ldr	r2, [r3, #12]
 800f0c6:	68fb      	ldr	r3, [r7, #12]
 800f0c8:	60da      	str	r2, [r3, #12]
 800f0ca:	e005      	b.n	800f0d8 <tcp_process+0x744>
 800f0cc:	68fb      	ldr	r3, [r7, #12]
 800f0ce:	68db      	ldr	r3, [r3, #12]
 800f0d0:	60fb      	str	r3, [r7, #12]
 800f0d2:	68fb      	ldr	r3, [r7, #12]
 800f0d4:	2b00      	cmp	r3, #0
 800f0d6:	d1ef      	bne.n	800f0b8 <tcp_process+0x724>
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	2200      	movs	r2, #0
 800f0dc:	60da      	str	r2, [r3, #12]
 800f0de:	4b1f      	ldr	r3, [pc, #124]	; (800f15c <tcp_process+0x7c8>)
 800f0e0:	2201      	movs	r2, #1
 800f0e2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	220a      	movs	r2, #10
 800f0e8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800f0ea:	4b1d      	ldr	r3, [pc, #116]	; (800f160 <tcp_process+0x7cc>)
 800f0ec:	681a      	ldr	r2, [r3, #0]
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	60da      	str	r2, [r3, #12]
 800f0f2:	4a1b      	ldr	r2, [pc, #108]	; (800f160 <tcp_process+0x7cc>)
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	6013      	str	r3, [r2, #0]
 800f0f8:	f002 fc48 	bl	801198c <tcp_timer_needed>
      }
      break;
 800f0fc:	e026      	b.n	800f14c <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800f0fe:	6878      	ldr	r0, [r7, #4]
 800f100:	f000 f93c 	bl	800f37c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800f104:	4b17      	ldr	r3, [pc, #92]	; (800f164 <tcp_process+0x7d0>)
 800f106:	781b      	ldrb	r3, [r3, #0]
 800f108:	f003 0310 	and.w	r3, r3, #16
 800f10c:	2b00      	cmp	r3, #0
 800f10e:	d01f      	beq.n	800f150 <tcp_process+0x7bc>
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f114:	4b14      	ldr	r3, [pc, #80]	; (800f168 <tcp_process+0x7d4>)
 800f116:	681b      	ldr	r3, [r3, #0]
 800f118:	429a      	cmp	r2, r3
 800f11a:	d119      	bne.n	800f150 <tcp_process+0x7bc>
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f120:	2b00      	cmp	r3, #0
 800f122:	d115      	bne.n	800f150 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800f124:	4b11      	ldr	r3, [pc, #68]	; (800f16c <tcp_process+0x7d8>)
 800f126:	781b      	ldrb	r3, [r3, #0]
 800f128:	f043 0310 	orr.w	r3, r3, #16
 800f12c:	b2da      	uxtb	r2, r3
 800f12e:	4b0f      	ldr	r3, [pc, #60]	; (800f16c <tcp_process+0x7d8>)
 800f130:	701a      	strb	r2, [r3, #0]
      }
      break;
 800f132:	e00d      	b.n	800f150 <tcp_process+0x7bc>
    default:
      break;
 800f134:	bf00      	nop
 800f136:	e00c      	b.n	800f152 <tcp_process+0x7be>
      break;
 800f138:	bf00      	nop
 800f13a:	e00a      	b.n	800f152 <tcp_process+0x7be>
      break;
 800f13c:	bf00      	nop
 800f13e:	e008      	b.n	800f152 <tcp_process+0x7be>
      break;
 800f140:	bf00      	nop
 800f142:	e006      	b.n	800f152 <tcp_process+0x7be>
      break;
 800f144:	bf00      	nop
 800f146:	e004      	b.n	800f152 <tcp_process+0x7be>
      break;
 800f148:	bf00      	nop
 800f14a:	e002      	b.n	800f152 <tcp_process+0x7be>
      break;
 800f14c:	bf00      	nop
 800f14e:	e000      	b.n	800f152 <tcp_process+0x7be>
      break;
 800f150:	bf00      	nop
  }
  return ERR_OK;
 800f152:	2300      	movs	r3, #0
}
 800f154:	4618      	mov	r0, r3
 800f156:	3724      	adds	r7, #36	; 0x24
 800f158:	46bd      	mov	sp, r7
 800f15a:	bd90      	pop	{r4, r7, pc}
 800f15c:	2000729c 	.word	0x2000729c
 800f160:	200072b0 	.word	0x200072b0
 800f164:	20000114 	.word	0x20000114
 800f168:	2000010c 	.word	0x2000010c
 800f16c:	20000115 	.word	0x20000115
 800f170:	200072a0 	.word	0x200072a0

0800f174 <tcp_oos_insert_segment>:
>>>>>>> Stashed changes
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
<<<<<<< Updated upstream
 800f1a4:	b590      	push	{r4, r7, lr}
 800f1a6:	b085      	sub	sp, #20
 800f1a8:	af00      	add	r7, sp, #0
 800f1aa:	6078      	str	r0, [r7, #4]
 800f1ac:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	2b00      	cmp	r3, #0
 800f1b2:	d106      	bne.n	800f1c2 <tcp_oos_insert_segment+0x1e>
 800f1b4:	4b3b      	ldr	r3, [pc, #236]	; (800f2a4 <tcp_oos_insert_segment+0x100>)
 800f1b6:	f240 421f 	movw	r2, #1055	; 0x41f
 800f1ba:	493b      	ldr	r1, [pc, #236]	; (800f2a8 <tcp_oos_insert_segment+0x104>)
 800f1bc:	483b      	ldr	r0, [pc, #236]	; (800f2ac <tcp_oos_insert_segment+0x108>)
 800f1be:	f005 f9e1 	bl	8014584 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	68db      	ldr	r3, [r3, #12]
 800f1c6:	899b      	ldrh	r3, [r3, #12]
 800f1c8:	b29b      	uxth	r3, r3
 800f1ca:	4618      	mov	r0, r3
 800f1cc:	f7fb fd7d 	bl	800acca <lwip_htons>
 800f1d0:	4603      	mov	r3, r0
 800f1d2:	b2db      	uxtb	r3, r3
 800f1d4:	f003 0301 	and.w	r3, r3, #1
 800f1d8:	2b00      	cmp	r3, #0
 800f1da:	d028      	beq.n	800f22e <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800f1dc:	6838      	ldr	r0, [r7, #0]
 800f1de:	f7fe fa65 	bl	800d6ac <tcp_segs_free>
    next = NULL;
 800f1e2:	2300      	movs	r3, #0
 800f1e4:	603b      	str	r3, [r7, #0]
 800f1e6:	e056      	b.n	800f296 <tcp_oos_insert_segment+0xf2>
=======
 800f174:	b590      	push	{r4, r7, lr}
 800f176:	b085      	sub	sp, #20
 800f178:	af00      	add	r7, sp, #0
 800f17a:	6078      	str	r0, [r7, #4]
 800f17c:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	2b00      	cmp	r3, #0
 800f182:	d106      	bne.n	800f192 <tcp_oos_insert_segment+0x1e>
 800f184:	4b3b      	ldr	r3, [pc, #236]	; (800f274 <tcp_oos_insert_segment+0x100>)
 800f186:	f240 421f 	movw	r2, #1055	; 0x41f
 800f18a:	493b      	ldr	r1, [pc, #236]	; (800f278 <tcp_oos_insert_segment+0x104>)
 800f18c:	483b      	ldr	r0, [pc, #236]	; (800f27c <tcp_oos_insert_segment+0x108>)
 800f18e:	f005 f9e1 	bl	8014554 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	68db      	ldr	r3, [r3, #12]
 800f196:	899b      	ldrh	r3, [r3, #12]
 800f198:	b29b      	uxth	r3, r3
 800f19a:	4618      	mov	r0, r3
 800f19c:	f7fb fd7d 	bl	800ac9a <lwip_htons>
 800f1a0:	4603      	mov	r3, r0
 800f1a2:	b2db      	uxtb	r3, r3
 800f1a4:	f003 0301 	and.w	r3, r3, #1
 800f1a8:	2b00      	cmp	r3, #0
 800f1aa:	d028      	beq.n	800f1fe <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800f1ac:	6838      	ldr	r0, [r7, #0]
 800f1ae:	f7fe fa65 	bl	800d67c <tcp_segs_free>
    next = NULL;
 800f1b2:	2300      	movs	r3, #0
 800f1b4:	603b      	str	r3, [r7, #0]
 800f1b6:	e056      	b.n	800f266 <tcp_oos_insert_segment+0xf2>
>>>>>>> Stashed changes
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
<<<<<<< Updated upstream
 800f1e8:	683b      	ldr	r3, [r7, #0]
 800f1ea:	68db      	ldr	r3, [r3, #12]
 800f1ec:	899b      	ldrh	r3, [r3, #12]
 800f1ee:	b29b      	uxth	r3, r3
 800f1f0:	4618      	mov	r0, r3
 800f1f2:	f7fb fd6a 	bl	800acca <lwip_htons>
 800f1f6:	4603      	mov	r3, r0
 800f1f8:	b2db      	uxtb	r3, r3
 800f1fa:	f003 0301 	and.w	r3, r3, #1
 800f1fe:	2b00      	cmp	r3, #0
 800f200:	d00d      	beq.n	800f21e <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	68db      	ldr	r3, [r3, #12]
 800f206:	899b      	ldrh	r3, [r3, #12]
 800f208:	b29c      	uxth	r4, r3
 800f20a:	2001      	movs	r0, #1
 800f20c:	f7fb fd5d 	bl	800acca <lwip_htons>
 800f210:	4603      	mov	r3, r0
 800f212:	461a      	mov	r2, r3
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	68db      	ldr	r3, [r3, #12]
 800f218:	4322      	orrs	r2, r4
 800f21a:	b292      	uxth	r2, r2
 800f21c:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800f21e:	683b      	ldr	r3, [r7, #0]
 800f220:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800f222:	683b      	ldr	r3, [r7, #0]
 800f224:	681b      	ldr	r3, [r3, #0]
 800f226:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800f228:	68f8      	ldr	r0, [r7, #12]
 800f22a:	f7fe fa54 	bl	800d6d6 <tcp_seg_free>
    while (next &&
 800f22e:	683b      	ldr	r3, [r7, #0]
 800f230:	2b00      	cmp	r3, #0
 800f232:	d00e      	beq.n	800f252 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	891b      	ldrh	r3, [r3, #8]
 800f238:	461a      	mov	r2, r3
 800f23a:	4b1d      	ldr	r3, [pc, #116]	; (800f2b0 <tcp_oos_insert_segment+0x10c>)
 800f23c:	681b      	ldr	r3, [r3, #0]
 800f23e:	441a      	add	r2, r3
 800f240:	683b      	ldr	r3, [r7, #0]
 800f242:	68db      	ldr	r3, [r3, #12]
 800f244:	685b      	ldr	r3, [r3, #4]
 800f246:	6839      	ldr	r1, [r7, #0]
 800f248:	8909      	ldrh	r1, [r1, #8]
 800f24a:	440b      	add	r3, r1
 800f24c:	1ad3      	subs	r3, r2, r3
    while (next &&
 800f24e:	2b00      	cmp	r3, #0
 800f250:	daca      	bge.n	800f1e8 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800f252:	683b      	ldr	r3, [r7, #0]
 800f254:	2b00      	cmp	r3, #0
 800f256:	d01e      	beq.n	800f296 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	891b      	ldrh	r3, [r3, #8]
 800f25c:	461a      	mov	r2, r3
 800f25e:	4b14      	ldr	r3, [pc, #80]	; (800f2b0 <tcp_oos_insert_segment+0x10c>)
 800f260:	681b      	ldr	r3, [r3, #0]
 800f262:	441a      	add	r2, r3
 800f264:	683b      	ldr	r3, [r7, #0]
 800f266:	68db      	ldr	r3, [r3, #12]
 800f268:	685b      	ldr	r3, [r3, #4]
 800f26a:	1ad3      	subs	r3, r2, r3
    if (next &&
 800f26c:	2b00      	cmp	r3, #0
 800f26e:	dd12      	ble.n	800f296 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800f270:	683b      	ldr	r3, [r7, #0]
 800f272:	68db      	ldr	r3, [r3, #12]
 800f274:	685b      	ldr	r3, [r3, #4]
 800f276:	b29a      	uxth	r2, r3
 800f278:	4b0d      	ldr	r3, [pc, #52]	; (800f2b0 <tcp_oos_insert_segment+0x10c>)
 800f27a:	681b      	ldr	r3, [r3, #0]
 800f27c:	b29b      	uxth	r3, r3
 800f27e:	1ad3      	subs	r3, r2, r3
 800f280:	b29a      	uxth	r2, r3
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	685a      	ldr	r2, [r3, #4]
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	891b      	ldrh	r3, [r3, #8]
 800f28e:	4619      	mov	r1, r3
 800f290:	4610      	mov	r0, r2
 800f292:	f7fc fe27 	bl	800bee4 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	683a      	ldr	r2, [r7, #0]
 800f29a:	601a      	str	r2, [r3, #0]
}
 800f29c:	bf00      	nop
 800f29e:	3714      	adds	r7, #20
 800f2a0:	46bd      	mov	sp, r7
 800f2a2:	bd90      	pop	{r4, r7, pc}
 800f2a4:	08016b90 	.word	0x08016b90
 800f2a8:	08016e50 	.word	0x08016e50
 800f2ac:	08016bdc 	.word	0x08016bdc
 800f2b0:	20000108 	.word	0x20000108

0800f2b4 <tcp_free_acked_segments>:
=======
 800f1b8:	683b      	ldr	r3, [r7, #0]
 800f1ba:	68db      	ldr	r3, [r3, #12]
 800f1bc:	899b      	ldrh	r3, [r3, #12]
 800f1be:	b29b      	uxth	r3, r3
 800f1c0:	4618      	mov	r0, r3
 800f1c2:	f7fb fd6a 	bl	800ac9a <lwip_htons>
 800f1c6:	4603      	mov	r3, r0
 800f1c8:	b2db      	uxtb	r3, r3
 800f1ca:	f003 0301 	and.w	r3, r3, #1
 800f1ce:	2b00      	cmp	r3, #0
 800f1d0:	d00d      	beq.n	800f1ee <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	68db      	ldr	r3, [r3, #12]
 800f1d6:	899b      	ldrh	r3, [r3, #12]
 800f1d8:	b29c      	uxth	r4, r3
 800f1da:	2001      	movs	r0, #1
 800f1dc:	f7fb fd5d 	bl	800ac9a <lwip_htons>
 800f1e0:	4603      	mov	r3, r0
 800f1e2:	461a      	mov	r2, r3
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	68db      	ldr	r3, [r3, #12]
 800f1e8:	4322      	orrs	r2, r4
 800f1ea:	b292      	uxth	r2, r2
 800f1ec:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800f1ee:	683b      	ldr	r3, [r7, #0]
 800f1f0:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800f1f2:	683b      	ldr	r3, [r7, #0]
 800f1f4:	681b      	ldr	r3, [r3, #0]
 800f1f6:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800f1f8:	68f8      	ldr	r0, [r7, #12]
 800f1fa:	f7fe fa54 	bl	800d6a6 <tcp_seg_free>
    while (next &&
 800f1fe:	683b      	ldr	r3, [r7, #0]
 800f200:	2b00      	cmp	r3, #0
 800f202:	d00e      	beq.n	800f222 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	891b      	ldrh	r3, [r3, #8]
 800f208:	461a      	mov	r2, r3
 800f20a:	4b1d      	ldr	r3, [pc, #116]	; (800f280 <tcp_oos_insert_segment+0x10c>)
 800f20c:	681b      	ldr	r3, [r3, #0]
 800f20e:	441a      	add	r2, r3
 800f210:	683b      	ldr	r3, [r7, #0]
 800f212:	68db      	ldr	r3, [r3, #12]
 800f214:	685b      	ldr	r3, [r3, #4]
 800f216:	6839      	ldr	r1, [r7, #0]
 800f218:	8909      	ldrh	r1, [r1, #8]
 800f21a:	440b      	add	r3, r1
 800f21c:	1ad3      	subs	r3, r2, r3
    while (next &&
 800f21e:	2b00      	cmp	r3, #0
 800f220:	daca      	bge.n	800f1b8 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800f222:	683b      	ldr	r3, [r7, #0]
 800f224:	2b00      	cmp	r3, #0
 800f226:	d01e      	beq.n	800f266 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	891b      	ldrh	r3, [r3, #8]
 800f22c:	461a      	mov	r2, r3
 800f22e:	4b14      	ldr	r3, [pc, #80]	; (800f280 <tcp_oos_insert_segment+0x10c>)
 800f230:	681b      	ldr	r3, [r3, #0]
 800f232:	441a      	add	r2, r3
 800f234:	683b      	ldr	r3, [r7, #0]
 800f236:	68db      	ldr	r3, [r3, #12]
 800f238:	685b      	ldr	r3, [r3, #4]
 800f23a:	1ad3      	subs	r3, r2, r3
    if (next &&
 800f23c:	2b00      	cmp	r3, #0
 800f23e:	dd12      	ble.n	800f266 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800f240:	683b      	ldr	r3, [r7, #0]
 800f242:	68db      	ldr	r3, [r3, #12]
 800f244:	685b      	ldr	r3, [r3, #4]
 800f246:	b29a      	uxth	r2, r3
 800f248:	4b0d      	ldr	r3, [pc, #52]	; (800f280 <tcp_oos_insert_segment+0x10c>)
 800f24a:	681b      	ldr	r3, [r3, #0]
 800f24c:	b29b      	uxth	r3, r3
 800f24e:	1ad3      	subs	r3, r2, r3
 800f250:	b29a      	uxth	r2, r3
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	685a      	ldr	r2, [r3, #4]
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	891b      	ldrh	r3, [r3, #8]
 800f25e:	4619      	mov	r1, r3
 800f260:	4610      	mov	r0, r2
 800f262:	f7fc fe27 	bl	800beb4 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	683a      	ldr	r2, [r7, #0]
 800f26a:	601a      	str	r2, [r3, #0]
}
 800f26c:	bf00      	nop
 800f26e:	3714      	adds	r7, #20
 800f270:	46bd      	mov	sp, r7
 800f272:	bd90      	pop	{r4, r7, pc}
 800f274:	08016b74 	.word	0x08016b74
 800f278:	08016e34 	.word	0x08016e34
 800f27c:	08016bc0 	.word	0x08016bc0
 800f280:	20000108 	.word	0x20000108

0800f284 <tcp_free_acked_segments>:
>>>>>>> Stashed changes

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
<<<<<<< Updated upstream
 800f2b4:	b5b0      	push	{r4, r5, r7, lr}
 800f2b6:	b086      	sub	sp, #24
 800f2b8:	af00      	add	r7, sp, #0
 800f2ba:	60f8      	str	r0, [r7, #12]
 800f2bc:	60b9      	str	r1, [r7, #8]
 800f2be:	607a      	str	r2, [r7, #4]
 800f2c0:	603b      	str	r3, [r7, #0]
=======
 800f284:	b5b0      	push	{r4, r5, r7, lr}
 800f286:	b086      	sub	sp, #24
 800f288:	af00      	add	r7, sp, #0
 800f28a:	60f8      	str	r0, [r7, #12]
 800f28c:	60b9      	str	r1, [r7, #8]
 800f28e:	607a      	str	r2, [r7, #4]
 800f290:	603b      	str	r3, [r7, #0]
>>>>>>> Stashed changes
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
<<<<<<< Updated upstream
 800f2c2:	e03e      	b.n	800f342 <tcp_free_acked_segments+0x8e>
=======
 800f292:	e03e      	b.n	800f312 <tcp_free_acked_segments+0x8e>
>>>>>>> Stashed changes
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
<<<<<<< Updated upstream
 800f2c4:	68bb      	ldr	r3, [r7, #8]
 800f2c6:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800f2c8:	68bb      	ldr	r3, [r7, #8]
 800f2ca:	681b      	ldr	r3, [r3, #0]
 800f2cc:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800f2ce:	697b      	ldr	r3, [r7, #20]
 800f2d0:	685b      	ldr	r3, [r3, #4]
 800f2d2:	4618      	mov	r0, r3
 800f2d4:	f7fd f814 	bl	800c300 <pbuf_clen>
 800f2d8:	4603      	mov	r3, r0
 800f2da:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800f2dc:	68fb      	ldr	r3, [r7, #12]
 800f2de:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f2e2:	8a7a      	ldrh	r2, [r7, #18]
 800f2e4:	429a      	cmp	r2, r3
 800f2e6:	d906      	bls.n	800f2f6 <tcp_free_acked_segments+0x42>
 800f2e8:	4b2a      	ldr	r3, [pc, #168]	; (800f394 <tcp_free_acked_segments+0xe0>)
 800f2ea:	f240 4257 	movw	r2, #1111	; 0x457
 800f2ee:	492a      	ldr	r1, [pc, #168]	; (800f398 <tcp_free_acked_segments+0xe4>)
 800f2f0:	482a      	ldr	r0, [pc, #168]	; (800f39c <tcp_free_acked_segments+0xe8>)
 800f2f2:	f005 f947 	bl	8014584 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800f2f6:	68fb      	ldr	r3, [r7, #12]
 800f2f8:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800f2fc:	8a7b      	ldrh	r3, [r7, #18]
 800f2fe:	1ad3      	subs	r3, r2, r3
 800f300:	b29a      	uxth	r2, r3
 800f302:	68fb      	ldr	r3, [r7, #12]
 800f304:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800f308:	697b      	ldr	r3, [r7, #20]
 800f30a:	891a      	ldrh	r2, [r3, #8]
 800f30c:	4b24      	ldr	r3, [pc, #144]	; (800f3a0 <tcp_free_acked_segments+0xec>)
 800f30e:	881b      	ldrh	r3, [r3, #0]
 800f310:	4413      	add	r3, r2
 800f312:	b29a      	uxth	r2, r3
 800f314:	4b22      	ldr	r3, [pc, #136]	; (800f3a0 <tcp_free_acked_segments+0xec>)
 800f316:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800f318:	6978      	ldr	r0, [r7, #20]
 800f31a:	f7fe f9dc 	bl	800d6d6 <tcp_seg_free>
=======
 800f294:	68bb      	ldr	r3, [r7, #8]
 800f296:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800f298:	68bb      	ldr	r3, [r7, #8]
 800f29a:	681b      	ldr	r3, [r3, #0]
 800f29c:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800f29e:	697b      	ldr	r3, [r7, #20]
 800f2a0:	685b      	ldr	r3, [r3, #4]
 800f2a2:	4618      	mov	r0, r3
 800f2a4:	f7fd f814 	bl	800c2d0 <pbuf_clen>
 800f2a8:	4603      	mov	r3, r0
 800f2aa:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800f2ac:	68fb      	ldr	r3, [r7, #12]
 800f2ae:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f2b2:	8a7a      	ldrh	r2, [r7, #18]
 800f2b4:	429a      	cmp	r2, r3
 800f2b6:	d906      	bls.n	800f2c6 <tcp_free_acked_segments+0x42>
 800f2b8:	4b2a      	ldr	r3, [pc, #168]	; (800f364 <tcp_free_acked_segments+0xe0>)
 800f2ba:	f240 4257 	movw	r2, #1111	; 0x457
 800f2be:	492a      	ldr	r1, [pc, #168]	; (800f368 <tcp_free_acked_segments+0xe4>)
 800f2c0:	482a      	ldr	r0, [pc, #168]	; (800f36c <tcp_free_acked_segments+0xe8>)
 800f2c2:	f005 f947 	bl	8014554 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800f2c6:	68fb      	ldr	r3, [r7, #12]
 800f2c8:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800f2cc:	8a7b      	ldrh	r3, [r7, #18]
 800f2ce:	1ad3      	subs	r3, r2, r3
 800f2d0:	b29a      	uxth	r2, r3
 800f2d2:	68fb      	ldr	r3, [r7, #12]
 800f2d4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800f2d8:	697b      	ldr	r3, [r7, #20]
 800f2da:	891a      	ldrh	r2, [r3, #8]
 800f2dc:	4b24      	ldr	r3, [pc, #144]	; (800f370 <tcp_free_acked_segments+0xec>)
 800f2de:	881b      	ldrh	r3, [r3, #0]
 800f2e0:	4413      	add	r3, r2
 800f2e2:	b29a      	uxth	r2, r3
 800f2e4:	4b22      	ldr	r3, [pc, #136]	; (800f370 <tcp_free_acked_segments+0xec>)
 800f2e6:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800f2e8:	6978      	ldr	r0, [r7, #20]
 800f2ea:	f7fe f9dc 	bl	800d6a6 <tcp_seg_free>
>>>>>>> Stashed changes

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
<<<<<<< Updated upstream
 800f31e:	68fb      	ldr	r3, [r7, #12]
 800f320:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f324:	2b00      	cmp	r3, #0
 800f326:	d00c      	beq.n	800f342 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800f328:	68bb      	ldr	r3, [r7, #8]
 800f32a:	2b00      	cmp	r3, #0
 800f32c:	d109      	bne.n	800f342 <tcp_free_acked_segments+0x8e>
 800f32e:	683b      	ldr	r3, [r7, #0]
 800f330:	2b00      	cmp	r3, #0
 800f332:	d106      	bne.n	800f342 <tcp_free_acked_segments+0x8e>
 800f334:	4b17      	ldr	r3, [pc, #92]	; (800f394 <tcp_free_acked_segments+0xe0>)
 800f336:	f240 4261 	movw	r2, #1121	; 0x461
 800f33a:	491a      	ldr	r1, [pc, #104]	; (800f3a4 <tcp_free_acked_segments+0xf0>)
 800f33c:	4817      	ldr	r0, [pc, #92]	; (800f39c <tcp_free_acked_segments+0xe8>)
 800f33e:	f005 f921 	bl	8014584 <iprintf>
  while (seg_list != NULL &&
 800f342:	68bb      	ldr	r3, [r7, #8]
 800f344:	2b00      	cmp	r3, #0
 800f346:	d020      	beq.n	800f38a <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800f348:	68bb      	ldr	r3, [r7, #8]
 800f34a:	68db      	ldr	r3, [r3, #12]
 800f34c:	685b      	ldr	r3, [r3, #4]
 800f34e:	4618      	mov	r0, r3
 800f350:	f7fb fcd0 	bl	800acf4 <lwip_htonl>
 800f354:	4604      	mov	r4, r0
 800f356:	68bb      	ldr	r3, [r7, #8]
 800f358:	891b      	ldrh	r3, [r3, #8]
 800f35a:	461d      	mov	r5, r3
 800f35c:	68bb      	ldr	r3, [r7, #8]
 800f35e:	68db      	ldr	r3, [r3, #12]
 800f360:	899b      	ldrh	r3, [r3, #12]
 800f362:	b29b      	uxth	r3, r3
 800f364:	4618      	mov	r0, r3
 800f366:	f7fb fcb0 	bl	800acca <lwip_htons>
 800f36a:	4603      	mov	r3, r0
 800f36c:	b2db      	uxtb	r3, r3
 800f36e:	f003 0303 	and.w	r3, r3, #3
 800f372:	2b00      	cmp	r3, #0
 800f374:	d001      	beq.n	800f37a <tcp_free_acked_segments+0xc6>
 800f376:	2301      	movs	r3, #1
 800f378:	e000      	b.n	800f37c <tcp_free_acked_segments+0xc8>
 800f37a:	2300      	movs	r3, #0
 800f37c:	442b      	add	r3, r5
 800f37e:	18e2      	adds	r2, r4, r3
 800f380:	4b09      	ldr	r3, [pc, #36]	; (800f3a8 <tcp_free_acked_segments+0xf4>)
 800f382:	681b      	ldr	r3, [r3, #0]
 800f384:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800f386:	2b00      	cmp	r3, #0
 800f388:	dd9c      	ble.n	800f2c4 <tcp_free_acked_segments+0x10>
=======
 800f2ee:	68fb      	ldr	r3, [r7, #12]
 800f2f0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f2f4:	2b00      	cmp	r3, #0
 800f2f6:	d00c      	beq.n	800f312 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800f2f8:	68bb      	ldr	r3, [r7, #8]
 800f2fa:	2b00      	cmp	r3, #0
 800f2fc:	d109      	bne.n	800f312 <tcp_free_acked_segments+0x8e>
 800f2fe:	683b      	ldr	r3, [r7, #0]
 800f300:	2b00      	cmp	r3, #0
 800f302:	d106      	bne.n	800f312 <tcp_free_acked_segments+0x8e>
 800f304:	4b17      	ldr	r3, [pc, #92]	; (800f364 <tcp_free_acked_segments+0xe0>)
 800f306:	f240 4261 	movw	r2, #1121	; 0x461
 800f30a:	491a      	ldr	r1, [pc, #104]	; (800f374 <tcp_free_acked_segments+0xf0>)
 800f30c:	4817      	ldr	r0, [pc, #92]	; (800f36c <tcp_free_acked_segments+0xe8>)
 800f30e:	f005 f921 	bl	8014554 <iprintf>
  while (seg_list != NULL &&
 800f312:	68bb      	ldr	r3, [r7, #8]
 800f314:	2b00      	cmp	r3, #0
 800f316:	d020      	beq.n	800f35a <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800f318:	68bb      	ldr	r3, [r7, #8]
 800f31a:	68db      	ldr	r3, [r3, #12]
 800f31c:	685b      	ldr	r3, [r3, #4]
 800f31e:	4618      	mov	r0, r3
 800f320:	f7fb fcd0 	bl	800acc4 <lwip_htonl>
 800f324:	4604      	mov	r4, r0
 800f326:	68bb      	ldr	r3, [r7, #8]
 800f328:	891b      	ldrh	r3, [r3, #8]
 800f32a:	461d      	mov	r5, r3
 800f32c:	68bb      	ldr	r3, [r7, #8]
 800f32e:	68db      	ldr	r3, [r3, #12]
 800f330:	899b      	ldrh	r3, [r3, #12]
 800f332:	b29b      	uxth	r3, r3
 800f334:	4618      	mov	r0, r3
 800f336:	f7fb fcb0 	bl	800ac9a <lwip_htons>
 800f33a:	4603      	mov	r3, r0
 800f33c:	b2db      	uxtb	r3, r3
 800f33e:	f003 0303 	and.w	r3, r3, #3
 800f342:	2b00      	cmp	r3, #0
 800f344:	d001      	beq.n	800f34a <tcp_free_acked_segments+0xc6>
 800f346:	2301      	movs	r3, #1
 800f348:	e000      	b.n	800f34c <tcp_free_acked_segments+0xc8>
 800f34a:	2300      	movs	r3, #0
 800f34c:	442b      	add	r3, r5
 800f34e:	18e2      	adds	r2, r4, r3
 800f350:	4b09      	ldr	r3, [pc, #36]	; (800f378 <tcp_free_acked_segments+0xf4>)
 800f352:	681b      	ldr	r3, [r3, #0]
 800f354:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800f356:	2b00      	cmp	r3, #0
 800f358:	dd9c      	ble.n	800f294 <tcp_free_acked_segments+0x10>
>>>>>>> Stashed changes
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
<<<<<<< Updated upstream
 800f38a:	68bb      	ldr	r3, [r7, #8]
}
 800f38c:	4618      	mov	r0, r3
 800f38e:	3718      	adds	r7, #24
 800f390:	46bd      	mov	sp, r7
 800f392:	bdb0      	pop	{r4, r5, r7, pc}
 800f394:	08016b90 	.word	0x08016b90
 800f398:	08016e78 	.word	0x08016e78
 800f39c:	08016bdc 	.word	0x08016bdc
 800f3a0:	20000110 	.word	0x20000110
 800f3a4:	08016ea0 	.word	0x08016ea0
 800f3a8:	2000010c 	.word	0x2000010c

0800f3ac <tcp_receive>:
=======
 800f35a:	68bb      	ldr	r3, [r7, #8]
}
 800f35c:	4618      	mov	r0, r3
 800f35e:	3718      	adds	r7, #24
 800f360:	46bd      	mov	sp, r7
 800f362:	bdb0      	pop	{r4, r5, r7, pc}
 800f364:	08016b74 	.word	0x08016b74
 800f368:	08016e5c 	.word	0x08016e5c
 800f36c:	08016bc0 	.word	0x08016bc0
 800f370:	20000110 	.word	0x20000110
 800f374:	08016e84 	.word	0x08016e84
 800f378:	2000010c 	.word	0x2000010c

0800f37c <tcp_receive>:
>>>>>>> Stashed changes
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
<<<<<<< Updated upstream
 800f3ac:	b5b0      	push	{r4, r5, r7, lr}
 800f3ae:	b094      	sub	sp, #80	; 0x50
 800f3b0:	af00      	add	r7, sp, #0
 800f3b2:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800f3b4:	2300      	movs	r3, #0
 800f3b6:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	2b00      	cmp	r3, #0
 800f3bc:	d106      	bne.n	800f3cc <tcp_receive+0x20>
 800f3be:	4ba6      	ldr	r3, [pc, #664]	; (800f658 <tcp_receive+0x2ac>)
 800f3c0:	f240 427b 	movw	r2, #1147	; 0x47b
 800f3c4:	49a5      	ldr	r1, [pc, #660]	; (800f65c <tcp_receive+0x2b0>)
 800f3c6:	48a6      	ldr	r0, [pc, #664]	; (800f660 <tcp_receive+0x2b4>)
 800f3c8:	f005 f8dc 	bl	8014584 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	7d1b      	ldrb	r3, [r3, #20]
 800f3d0:	2b03      	cmp	r3, #3
 800f3d2:	d806      	bhi.n	800f3e2 <tcp_receive+0x36>
 800f3d4:	4ba0      	ldr	r3, [pc, #640]	; (800f658 <tcp_receive+0x2ac>)
 800f3d6:	f240 427c 	movw	r2, #1148	; 0x47c
 800f3da:	49a2      	ldr	r1, [pc, #648]	; (800f664 <tcp_receive+0x2b8>)
 800f3dc:	48a0      	ldr	r0, [pc, #640]	; (800f660 <tcp_receive+0x2b4>)
 800f3de:	f005 f8d1 	bl	8014584 <iprintf>

  if (flags & TCP_ACK) {
 800f3e2:	4ba1      	ldr	r3, [pc, #644]	; (800f668 <tcp_receive+0x2bc>)
 800f3e4:	781b      	ldrb	r3, [r3, #0]
 800f3e6:	f003 0310 	and.w	r3, r3, #16
 800f3ea:	2b00      	cmp	r3, #0
 800f3ec:	f000 8263 	beq.w	800f8b6 <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f3f6:	461a      	mov	r2, r3
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f3fc:	4413      	add	r3, r2
 800f3fe:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f404:	4b99      	ldr	r3, [pc, #612]	; (800f66c <tcp_receive+0x2c0>)
 800f406:	681b      	ldr	r3, [r3, #0]
 800f408:	1ad3      	subs	r3, r2, r3
 800f40a:	2b00      	cmp	r3, #0
 800f40c:	db1b      	blt.n	800f446 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f412:	4b96      	ldr	r3, [pc, #600]	; (800f66c <tcp_receive+0x2c0>)
 800f414:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800f416:	429a      	cmp	r2, r3
 800f418:	d106      	bne.n	800f428 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800f41e:	4b94      	ldr	r3, [pc, #592]	; (800f670 <tcp_receive+0x2c4>)
 800f420:	681b      	ldr	r3, [r3, #0]
 800f422:	1ad3      	subs	r3, r2, r3
 800f424:	2b00      	cmp	r3, #0
 800f426:	db0e      	blt.n	800f446 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800f42c:	4b90      	ldr	r3, [pc, #576]	; (800f670 <tcp_receive+0x2c4>)
 800f42e:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f430:	429a      	cmp	r2, r3
 800f432:	d125      	bne.n	800f480 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800f434:	4b8f      	ldr	r3, [pc, #572]	; (800f674 <tcp_receive+0x2c8>)
 800f436:	681b      	ldr	r3, [r3, #0]
 800f438:	89db      	ldrh	r3, [r3, #14]
 800f43a:	b29a      	uxth	r2, r3
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f442:	429a      	cmp	r2, r3
 800f444:	d91c      	bls.n	800f480 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800f446:	4b8b      	ldr	r3, [pc, #556]	; (800f674 <tcp_receive+0x2c8>)
 800f448:	681b      	ldr	r3, [r3, #0]
 800f44a:	89db      	ldrh	r3, [r3, #14]
 800f44c:	b29a      	uxth	r2, r3
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f460:	429a      	cmp	r2, r3
 800f462:	d205      	bcs.n	800f470 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800f470:	4b7e      	ldr	r3, [pc, #504]	; (800f66c <tcp_receive+0x2c0>)
 800f472:	681a      	ldr	r2, [r3, #0]
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800f478:	4b7d      	ldr	r3, [pc, #500]	; (800f670 <tcp_receive+0x2c4>)
 800f47a:	681a      	ldr	r2, [r3, #0]
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	659a      	str	r2, [r3, #88]	; 0x58
=======
 800f37c:	b5b0      	push	{r4, r5, r7, lr}
 800f37e:	b094      	sub	sp, #80	; 0x50
 800f380:	af00      	add	r7, sp, #0
 800f382:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800f384:	2300      	movs	r3, #0
 800f386:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	2b00      	cmp	r3, #0
 800f38c:	d106      	bne.n	800f39c <tcp_receive+0x20>
 800f38e:	4ba6      	ldr	r3, [pc, #664]	; (800f628 <tcp_receive+0x2ac>)
 800f390:	f240 427b 	movw	r2, #1147	; 0x47b
 800f394:	49a5      	ldr	r1, [pc, #660]	; (800f62c <tcp_receive+0x2b0>)
 800f396:	48a6      	ldr	r0, [pc, #664]	; (800f630 <tcp_receive+0x2b4>)
 800f398:	f005 f8dc 	bl	8014554 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	7d1b      	ldrb	r3, [r3, #20]
 800f3a0:	2b03      	cmp	r3, #3
 800f3a2:	d806      	bhi.n	800f3b2 <tcp_receive+0x36>
 800f3a4:	4ba0      	ldr	r3, [pc, #640]	; (800f628 <tcp_receive+0x2ac>)
 800f3a6:	f240 427c 	movw	r2, #1148	; 0x47c
 800f3aa:	49a2      	ldr	r1, [pc, #648]	; (800f634 <tcp_receive+0x2b8>)
 800f3ac:	48a0      	ldr	r0, [pc, #640]	; (800f630 <tcp_receive+0x2b4>)
 800f3ae:	f005 f8d1 	bl	8014554 <iprintf>

  if (flags & TCP_ACK) {
 800f3b2:	4ba1      	ldr	r3, [pc, #644]	; (800f638 <tcp_receive+0x2bc>)
 800f3b4:	781b      	ldrb	r3, [r3, #0]
 800f3b6:	f003 0310 	and.w	r3, r3, #16
 800f3ba:	2b00      	cmp	r3, #0
 800f3bc:	f000 8263 	beq.w	800f886 <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f3c6:	461a      	mov	r2, r3
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f3cc:	4413      	add	r3, r2
 800f3ce:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f3d4:	4b99      	ldr	r3, [pc, #612]	; (800f63c <tcp_receive+0x2c0>)
 800f3d6:	681b      	ldr	r3, [r3, #0]
 800f3d8:	1ad3      	subs	r3, r2, r3
 800f3da:	2b00      	cmp	r3, #0
 800f3dc:	db1b      	blt.n	800f416 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f3e2:	4b96      	ldr	r3, [pc, #600]	; (800f63c <tcp_receive+0x2c0>)
 800f3e4:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800f3e6:	429a      	cmp	r2, r3
 800f3e8:	d106      	bne.n	800f3f8 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800f3ee:	4b94      	ldr	r3, [pc, #592]	; (800f640 <tcp_receive+0x2c4>)
 800f3f0:	681b      	ldr	r3, [r3, #0]
 800f3f2:	1ad3      	subs	r3, r2, r3
 800f3f4:	2b00      	cmp	r3, #0
 800f3f6:	db0e      	blt.n	800f416 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800f3fc:	4b90      	ldr	r3, [pc, #576]	; (800f640 <tcp_receive+0x2c4>)
 800f3fe:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f400:	429a      	cmp	r2, r3
 800f402:	d125      	bne.n	800f450 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800f404:	4b8f      	ldr	r3, [pc, #572]	; (800f644 <tcp_receive+0x2c8>)
 800f406:	681b      	ldr	r3, [r3, #0]
 800f408:	89db      	ldrh	r3, [r3, #14]
 800f40a:	b29a      	uxth	r2, r3
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f412:	429a      	cmp	r2, r3
 800f414:	d91c      	bls.n	800f450 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800f416:	4b8b      	ldr	r3, [pc, #556]	; (800f644 <tcp_receive+0x2c8>)
 800f418:	681b      	ldr	r3, [r3, #0]
 800f41a:	89db      	ldrh	r3, [r3, #14]
 800f41c:	b29a      	uxth	r2, r3
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f430:	429a      	cmp	r2, r3
 800f432:	d205      	bcs.n	800f440 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800f440:	4b7e      	ldr	r3, [pc, #504]	; (800f63c <tcp_receive+0x2c0>)
 800f442:	681a      	ldr	r2, [r3, #0]
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800f448:	4b7d      	ldr	r3, [pc, #500]	; (800f640 <tcp_receive+0x2c4>)
 800f44a:	681a      	ldr	r2, [r3, #0]
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	659a      	str	r2, [r3, #88]	; 0x58
>>>>>>> Stashed changes
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
<<<<<<< Updated upstream
 800f480:	4b7b      	ldr	r3, [pc, #492]	; (800f670 <tcp_receive+0x2c4>)
 800f482:	681a      	ldr	r2, [r3, #0]
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f488:	1ad3      	subs	r3, r2, r3
 800f48a:	2b00      	cmp	r3, #0
 800f48c:	dc58      	bgt.n	800f540 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800f48e:	4b7a      	ldr	r3, [pc, #488]	; (800f678 <tcp_receive+0x2cc>)
 800f490:	881b      	ldrh	r3, [r3, #0]
 800f492:	2b00      	cmp	r3, #0
 800f494:	d14b      	bne.n	800f52e <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f49a:	687a      	ldr	r2, [r7, #4]
 800f49c:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800f4a0:	4413      	add	r3, r2
 800f4a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f4a4:	429a      	cmp	r2, r3
 800f4a6:	d142      	bne.n	800f52e <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f4ae:	2b00      	cmp	r3, #0
 800f4b0:	db3d      	blt.n	800f52e <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f4b6:	4b6e      	ldr	r3, [pc, #440]	; (800f670 <tcp_receive+0x2c4>)
 800f4b8:	681b      	ldr	r3, [r3, #0]
 800f4ba:	429a      	cmp	r2, r3
 800f4bc:	d137      	bne.n	800f52e <tcp_receive+0x182>
              found_dupack = 1;
 800f4be:	2301      	movs	r3, #1
 800f4c0:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f4c8:	2bff      	cmp	r3, #255	; 0xff
 800f4ca:	d007      	beq.n	800f4dc <tcp_receive+0x130>
                ++pcb->dupacks;
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f4d2:	3301      	adds	r3, #1
 800f4d4:	b2da      	uxtb	r2, r3
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f4e2:	2b03      	cmp	r3, #3
 800f4e4:	d91b      	bls.n	800f51e <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f4f0:	4413      	add	r3, r2
 800f4f2:	b29a      	uxth	r2, r3
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f4fa:	429a      	cmp	r2, r3
 800f4fc:	d30a      	bcc.n	800f514 <tcp_receive+0x168>
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f508:	4413      	add	r3, r2
 800f50a:	b29a      	uxth	r2, r3
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800f512:	e004      	b.n	800f51e <tcp_receive+0x172>
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f51a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f524:	2b02      	cmp	r3, #2
 800f526:	d902      	bls.n	800f52e <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800f528:	6878      	ldr	r0, [r7, #4]
 800f52a:	f001 fee9 	bl	8011300 <tcp_rexmit_fast>
=======
 800f450:	4b7b      	ldr	r3, [pc, #492]	; (800f640 <tcp_receive+0x2c4>)
 800f452:	681a      	ldr	r2, [r3, #0]
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f458:	1ad3      	subs	r3, r2, r3
 800f45a:	2b00      	cmp	r3, #0
 800f45c:	dc58      	bgt.n	800f510 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800f45e:	4b7a      	ldr	r3, [pc, #488]	; (800f648 <tcp_receive+0x2cc>)
 800f460:	881b      	ldrh	r3, [r3, #0]
 800f462:	2b00      	cmp	r3, #0
 800f464:	d14b      	bne.n	800f4fe <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f46a:	687a      	ldr	r2, [r7, #4]
 800f46c:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800f470:	4413      	add	r3, r2
 800f472:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f474:	429a      	cmp	r2, r3
 800f476:	d142      	bne.n	800f4fe <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f47e:	2b00      	cmp	r3, #0
 800f480:	db3d      	blt.n	800f4fe <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f486:	4b6e      	ldr	r3, [pc, #440]	; (800f640 <tcp_receive+0x2c4>)
 800f488:	681b      	ldr	r3, [r3, #0]
 800f48a:	429a      	cmp	r2, r3
 800f48c:	d137      	bne.n	800f4fe <tcp_receive+0x182>
              found_dupack = 1;
 800f48e:	2301      	movs	r3, #1
 800f490:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f498:	2bff      	cmp	r3, #255	; 0xff
 800f49a:	d007      	beq.n	800f4ac <tcp_receive+0x130>
                ++pcb->dupacks;
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f4a2:	3301      	adds	r3, #1
 800f4a4:	b2da      	uxtb	r2, r3
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f4b2:	2b03      	cmp	r3, #3
 800f4b4:	d91b      	bls.n	800f4ee <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f4c0:	4413      	add	r3, r2
 800f4c2:	b29a      	uxth	r2, r3
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f4ca:	429a      	cmp	r2, r3
 800f4cc:	d30a      	bcc.n	800f4e4 <tcp_receive+0x168>
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f4d8:	4413      	add	r3, r2
 800f4da:	b29a      	uxth	r2, r3
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800f4e2:	e004      	b.n	800f4ee <tcp_receive+0x172>
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f4ea:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f4f4:	2b02      	cmp	r3, #2
 800f4f6:	d902      	bls.n	800f4fe <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800f4f8:	6878      	ldr	r0, [r7, #4]
 800f4fa:	f001 fee9 	bl	80112d0 <tcp_rexmit_fast>
>>>>>>> Stashed changes
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
<<<<<<< Updated upstream
 800f52e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f530:	2b00      	cmp	r3, #0
 800f532:	f040 8160 	bne.w	800f7f6 <tcp_receive+0x44a>
        pcb->dupacks = 0;
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	2200      	movs	r2, #0
 800f53a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f53e:	e15a      	b.n	800f7f6 <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f540:	4b4b      	ldr	r3, [pc, #300]	; (800f670 <tcp_receive+0x2c4>)
 800f542:	681a      	ldr	r2, [r3, #0]
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f548:	1ad3      	subs	r3, r2, r3
 800f54a:	3b01      	subs	r3, #1
 800f54c:	2b00      	cmp	r3, #0
 800f54e:	f2c0 814d 	blt.w	800f7ec <tcp_receive+0x440>
 800f552:	4b47      	ldr	r3, [pc, #284]	; (800f670 <tcp_receive+0x2c4>)
 800f554:	681a      	ldr	r2, [r3, #0]
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f55a:	1ad3      	subs	r3, r2, r3
 800f55c:	2b00      	cmp	r3, #0
 800f55e:	f300 8145 	bgt.w	800f7ec <tcp_receive+0x440>
=======
 800f4fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f500:	2b00      	cmp	r3, #0
 800f502:	f040 8160 	bne.w	800f7c6 <tcp_receive+0x44a>
        pcb->dupacks = 0;
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	2200      	movs	r2, #0
 800f50a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f50e:	e15a      	b.n	800f7c6 <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f510:	4b4b      	ldr	r3, [pc, #300]	; (800f640 <tcp_receive+0x2c4>)
 800f512:	681a      	ldr	r2, [r3, #0]
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f518:	1ad3      	subs	r3, r2, r3
 800f51a:	3b01      	subs	r3, #1
 800f51c:	2b00      	cmp	r3, #0
 800f51e:	f2c0 814d 	blt.w	800f7bc <tcp_receive+0x440>
 800f522:	4b47      	ldr	r3, [pc, #284]	; (800f640 <tcp_receive+0x2c4>)
 800f524:	681a      	ldr	r2, [r3, #0]
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f52a:	1ad3      	subs	r3, r2, r3
 800f52c:	2b00      	cmp	r3, #0
 800f52e:	f300 8145 	bgt.w	800f7bc <tcp_receive+0x440>
>>>>>>> Stashed changes
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
<<<<<<< Updated upstream
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	8b5b      	ldrh	r3, [r3, #26]
 800f566:	f003 0304 	and.w	r3, r3, #4
 800f56a:	2b00      	cmp	r3, #0
 800f56c:	d010      	beq.n	800f590 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	8b5b      	ldrh	r3, [r3, #26]
 800f572:	f023 0304 	bic.w	r3, r3, #4
 800f576:	b29a      	uxth	r2, r3
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800f582:	687b      	ldr	r3, [r7, #4]
 800f584:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	2200      	movs	r2, #0
 800f58c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
=======
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	8b5b      	ldrh	r3, [r3, #26]
 800f536:	f003 0304 	and.w	r3, r3, #4
 800f53a:	2b00      	cmp	r3, #0
 800f53c:	d010      	beq.n	800f560 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	8b5b      	ldrh	r3, [r3, #26]
 800f542:	f023 0304 	bic.w	r3, r3, #4
 800f546:	b29a      	uxth	r2, r3
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	2200      	movs	r2, #0
 800f55c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
>>>>>>> Stashed changes
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
<<<<<<< Updated upstream
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	2200      	movs	r2, #0
 800f594:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f59e:	10db      	asrs	r3, r3, #3
 800f5a0:	b21b      	sxth	r3, r3
 800f5a2:	b29a      	uxth	r2, r3
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f5aa:	b29b      	uxth	r3, r3
 800f5ac:	4413      	add	r3, r2
 800f5ae:	b29b      	uxth	r3, r3
 800f5b0:	b21a      	sxth	r2, r3
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800f5b8:	4b2d      	ldr	r3, [pc, #180]	; (800f670 <tcp_receive+0x2c4>)
 800f5ba:	681b      	ldr	r3, [r3, #0]
 800f5bc:	b29a      	uxth	r2, r3
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f5c2:	b29b      	uxth	r3, r3
 800f5c4:	1ad3      	subs	r3, r2, r3
 800f5c6:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	2200      	movs	r2, #0
 800f5cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800f5d0:	4b27      	ldr	r3, [pc, #156]	; (800f670 <tcp_receive+0x2c4>)
 800f5d2:	681a      	ldr	r2, [r3, #0]
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	645a      	str	r2, [r3, #68]	; 0x44
=======
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	2200      	movs	r2, #0
 800f564:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f56e:	10db      	asrs	r3, r3, #3
 800f570:	b21b      	sxth	r3, r3
 800f572:	b29a      	uxth	r2, r3
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f57a:	b29b      	uxth	r3, r3
 800f57c:	4413      	add	r3, r2
 800f57e:	b29b      	uxth	r3, r3
 800f580:	b21a      	sxth	r2, r3
 800f582:	687b      	ldr	r3, [r7, #4]
 800f584:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800f588:	4b2d      	ldr	r3, [pc, #180]	; (800f640 <tcp_receive+0x2c4>)
 800f58a:	681b      	ldr	r3, [r3, #0]
 800f58c:	b29a      	uxth	r2, r3
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f592:	b29b      	uxth	r3, r3
 800f594:	1ad3      	subs	r3, r2, r3
 800f596:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	2200      	movs	r2, #0
 800f59c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800f5a0:	4b27      	ldr	r3, [pc, #156]	; (800f640 <tcp_receive+0x2c4>)
 800f5a2:	681a      	ldr	r2, [r3, #0]
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	645a      	str	r2, [r3, #68]	; 0x44
>>>>>>> Stashed changes

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
<<<<<<< Updated upstream
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	7d1b      	ldrb	r3, [r3, #20]
 800f5dc:	2b03      	cmp	r3, #3
 800f5de:	f240 8096 	bls.w	800f70e <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800f5ee:	429a      	cmp	r2, r3
 800f5f0:	d244      	bcs.n	800f67c <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800f5f2:	687b      	ldr	r3, [r7, #4]
 800f5f4:	8b5b      	ldrh	r3, [r3, #26]
 800f5f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f5fa:	2b00      	cmp	r3, #0
 800f5fc:	d001      	beq.n	800f602 <tcp_receive+0x256>
 800f5fe:	2301      	movs	r3, #1
 800f600:	e000      	b.n	800f604 <tcp_receive+0x258>
 800f602:	2302      	movs	r3, #2
 800f604:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800f608:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800f60c:	b29a      	uxth	r2, r3
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f612:	fb12 f303 	smulbb	r3, r2, r3
 800f616:	b29b      	uxth	r3, r3
 800f618:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800f61a:	4293      	cmp	r3, r2
 800f61c:	bf28      	it	cs
 800f61e:	4613      	movcs	r3, r2
 800f620:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f628:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800f62a:	4413      	add	r3, r2
 800f62c:	b29a      	uxth	r2, r3
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f634:	429a      	cmp	r2, r3
 800f636:	d309      	bcc.n	800f64c <tcp_receive+0x2a0>
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f63e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800f640:	4413      	add	r3, r2
 800f642:	b29a      	uxth	r2, r3
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800f64a:	e060      	b.n	800f70e <tcp_receive+0x362>
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f652:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800f656:	e05a      	b.n	800f70e <tcp_receive+0x362>
 800f658:	08016b90 	.word	0x08016b90
 800f65c:	08016ec0 	.word	0x08016ec0
 800f660:	08016bdc 	.word	0x08016bdc
 800f664:	08016edc 	.word	0x08016edc
 800f668:	20000114 	.word	0x20000114
 800f66c:	20000108 	.word	0x20000108
 800f670:	2000010c 	.word	0x2000010c
 800f674:	200000f8 	.word	0x200000f8
 800f678:	20000112 	.word	0x20000112
=======
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	7d1b      	ldrb	r3, [r3, #20]
 800f5ac:	2b03      	cmp	r3, #3
 800f5ae:	f240 8096 	bls.w	800f6de <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800f5be:	429a      	cmp	r2, r3
 800f5c0:	d244      	bcs.n	800f64c <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	8b5b      	ldrh	r3, [r3, #26]
 800f5c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f5ca:	2b00      	cmp	r3, #0
 800f5cc:	d001      	beq.n	800f5d2 <tcp_receive+0x256>
 800f5ce:	2301      	movs	r3, #1
 800f5d0:	e000      	b.n	800f5d4 <tcp_receive+0x258>
 800f5d2:	2302      	movs	r3, #2
 800f5d4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800f5d8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800f5dc:	b29a      	uxth	r2, r3
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f5e2:	fb12 f303 	smulbb	r3, r2, r3
 800f5e6:	b29b      	uxth	r3, r3
 800f5e8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800f5ea:	4293      	cmp	r3, r2
 800f5ec:	bf28      	it	cs
 800f5ee:	4613      	movcs	r3, r2
 800f5f0:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800f5f2:	687b      	ldr	r3, [r7, #4]
 800f5f4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f5f8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800f5fa:	4413      	add	r3, r2
 800f5fc:	b29a      	uxth	r2, r3
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f604:	429a      	cmp	r2, r3
 800f606:	d309      	bcc.n	800f61c <tcp_receive+0x2a0>
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f60e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800f610:	4413      	add	r3, r2
 800f612:	b29a      	uxth	r2, r3
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800f61a:	e060      	b.n	800f6de <tcp_receive+0x362>
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f622:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800f626:	e05a      	b.n	800f6de <tcp_receive+0x362>
 800f628:	08016b74 	.word	0x08016b74
 800f62c:	08016ea4 	.word	0x08016ea4
 800f630:	08016bc0 	.word	0x08016bc0
 800f634:	08016ec0 	.word	0x08016ec0
 800f638:	20000114 	.word	0x20000114
 800f63c:	20000108 	.word	0x20000108
 800f640:	2000010c 	.word	0x2000010c
 800f644:	200000f8 	.word	0x200000f8
 800f648:	20000112 	.word	0x20000112
>>>>>>> Stashed changes
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
<<<<<<< Updated upstream
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800f682:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f684:	4413      	add	r3, r2
 800f686:	b29a      	uxth	r2, r3
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f68e:	429a      	cmp	r2, r3
 800f690:	d309      	bcc.n	800f6a6 <tcp_receive+0x2fa>
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800f698:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f69a:	4413      	add	r3, r2
 800f69c:	b29a      	uxth	r2, r3
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800f6a4:	e004      	b.n	800f6b0 <tcp_receive+0x304>
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f6ac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f6bc:	429a      	cmp	r2, r3
 800f6be:	d326      	bcc.n	800f70e <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f6cc:	1ad3      	subs	r3, r2, r3
 800f6ce:	b29a      	uxth	r2, r3
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f6e0:	4413      	add	r3, r2
 800f6e2:	b29a      	uxth	r2, r3
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f6ea:	429a      	cmp	r2, r3
 800f6ec:	d30a      	bcc.n	800f704 <tcp_receive+0x358>
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f6f8:	4413      	add	r3, r2
 800f6fa:	b29a      	uxth	r2, r3
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800f702:	e004      	b.n	800f70e <tcp_receive+0x362>
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f70a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
=======
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800f652:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f654:	4413      	add	r3, r2
 800f656:	b29a      	uxth	r2, r3
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f65e:	429a      	cmp	r2, r3
 800f660:	d309      	bcc.n	800f676 <tcp_receive+0x2fa>
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800f668:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f66a:	4413      	add	r3, r2
 800f66c:	b29a      	uxth	r2, r3
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800f674:	e004      	b.n	800f680 <tcp_receive+0x304>
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f67c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f68c:	429a      	cmp	r2, r3
 800f68e:	d326      	bcc.n	800f6de <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f69c:	1ad3      	subs	r3, r2, r3
 800f69e:	b29a      	uxth	r2, r3
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f6b0:	4413      	add	r3, r2
 800f6b2:	b29a      	uxth	r2, r3
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f6ba:	429a      	cmp	r2, r3
 800f6bc:	d30a      	bcc.n	800f6d4 <tcp_receive+0x358>
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f6c8:	4413      	add	r3, r2
 800f6ca:	b29a      	uxth	r2, r3
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800f6d2:	e004      	b.n	800f6de <tcp_receive+0x362>
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f6da:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
>>>>>>> Stashed changes
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
<<<<<<< Updated upstream
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f716:	4a98      	ldr	r2, [pc, #608]	; (800f978 <tcp_receive+0x5cc>)
 800f718:	6878      	ldr	r0, [r7, #4]
 800f71a:	f7ff fdcb 	bl	800f2b4 <tcp_free_acked_segments>
 800f71e:	4602      	mov	r2, r0
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	671a      	str	r2, [r3, #112]	; 0x70
=======
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f6e6:	4a98      	ldr	r2, [pc, #608]	; (800f948 <tcp_receive+0x5cc>)
 800f6e8:	6878      	ldr	r0, [r7, #4]
 800f6ea:	f7ff fdcb 	bl	800f284 <tcp_free_acked_segments>
 800f6ee:	4602      	mov	r2, r0
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	671a      	str	r2, [r3, #112]	; 0x70
>>>>>>> Stashed changes
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
<<<<<<< Updated upstream
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f72c:	4a93      	ldr	r2, [pc, #588]	; (800f97c <tcp_receive+0x5d0>)
 800f72e:	6878      	ldr	r0, [r7, #4]
 800f730:	f7ff fdc0 	bl	800f2b4 <tcp_free_acked_segments>
 800f734:	4602      	mov	r2, r0
 800f736:	687b      	ldr	r3, [r7, #4]
 800f738:	66da      	str	r2, [r3, #108]	; 0x6c
=======
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f6fc:	4a93      	ldr	r2, [pc, #588]	; (800f94c <tcp_receive+0x5d0>)
 800f6fe:	6878      	ldr	r0, [r7, #4]
 800f700:	f7ff fdc0 	bl	800f284 <tcp_free_acked_segments>
 800f704:	4602      	mov	r2, r0
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	66da      	str	r2, [r3, #108]	; 0x6c
>>>>>>> Stashed changes

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
<<<<<<< Updated upstream
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f73e:	2b00      	cmp	r3, #0
 800f740:	d104      	bne.n	800f74c <tcp_receive+0x3a0>
        pcb->rtime = -1;
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f748:	861a      	strh	r2, [r3, #48]	; 0x30
 800f74a:	e002      	b.n	800f752 <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	2200      	movs	r2, #0
 800f750:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	2200      	movs	r2, #0
 800f756:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f75c:	2b00      	cmp	r3, #0
 800f75e:	d103      	bne.n	800f768 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	2200      	movs	r2, #0
 800f764:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
=======
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f70e:	2b00      	cmp	r3, #0
 800f710:	d104      	bne.n	800f71c <tcp_receive+0x3a0>
        pcb->rtime = -1;
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f718:	861a      	strh	r2, [r3, #48]	; 0x30
 800f71a:	e002      	b.n	800f722 <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	2200      	movs	r2, #0
 800f720:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	2200      	movs	r2, #0
 800f726:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f72c:	2b00      	cmp	r3, #0
 800f72e:	d103      	bne.n	800f738 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	2200      	movs	r2, #0
 800f734:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
>>>>>>> Stashed changes
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
<<<<<<< Updated upstream
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800f76e:	4b84      	ldr	r3, [pc, #528]	; (800f980 <tcp_receive+0x5d4>)
 800f770:	881b      	ldrh	r3, [r3, #0]
 800f772:	4413      	add	r3, r2
 800f774:	b29a      	uxth	r2, r3
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	8b5b      	ldrh	r3, [r3, #26]
 800f780:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f784:	2b00      	cmp	r3, #0
 800f786:	d035      	beq.n	800f7f4 <tcp_receive+0x448>
=======
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800f73e:	4b84      	ldr	r3, [pc, #528]	; (800f950 <tcp_receive+0x5d4>)
 800f740:	881b      	ldrh	r3, [r3, #0]
 800f742:	4413      	add	r3, r2
 800f744:	b29a      	uxth	r2, r3
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	8b5b      	ldrh	r3, [r3, #26]
 800f750:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f754:	2b00      	cmp	r3, #0
 800f756:	d035      	beq.n	800f7c4 <tcp_receive+0x448>
>>>>>>> Stashed changes
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
<<<<<<< Updated upstream
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f78c:	2b00      	cmp	r3, #0
 800f78e:	d118      	bne.n	800f7c2 <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f794:	2b00      	cmp	r3, #0
 800f796:	d00c      	beq.n	800f7b2 <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f7a0:	68db      	ldr	r3, [r3, #12]
 800f7a2:	685b      	ldr	r3, [r3, #4]
 800f7a4:	4618      	mov	r0, r3
 800f7a6:	f7fb faa5 	bl	800acf4 <lwip_htonl>
 800f7aa:	4603      	mov	r3, r0
 800f7ac:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800f7ae:	2b00      	cmp	r3, #0
 800f7b0:	dc20      	bgt.n	800f7f4 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	8b5b      	ldrh	r3, [r3, #26]
 800f7b6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f7ba:	b29a      	uxth	r2, r3
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f7c0:	e018      	b.n	800f7f4 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f7ca:	68db      	ldr	r3, [r3, #12]
 800f7cc:	685b      	ldr	r3, [r3, #4]
 800f7ce:	4618      	mov	r0, r3
 800f7d0:	f7fb fa90 	bl	800acf4 <lwip_htonl>
 800f7d4:	4603      	mov	r3, r0
 800f7d6:	1ae3      	subs	r3, r4, r3
 800f7d8:	2b00      	cmp	r3, #0
 800f7da:	dc0b      	bgt.n	800f7f4 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	8b5b      	ldrh	r3, [r3, #26]
 800f7e0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f7e4:	b29a      	uxth	r2, r3
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f7ea:	e003      	b.n	800f7f4 <tcp_receive+0x448>
=======
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f75c:	2b00      	cmp	r3, #0
 800f75e:	d118      	bne.n	800f792 <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f764:	2b00      	cmp	r3, #0
 800f766:	d00c      	beq.n	800f782 <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f770:	68db      	ldr	r3, [r3, #12]
 800f772:	685b      	ldr	r3, [r3, #4]
 800f774:	4618      	mov	r0, r3
 800f776:	f7fb faa5 	bl	800acc4 <lwip_htonl>
 800f77a:	4603      	mov	r3, r0
 800f77c:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800f77e:	2b00      	cmp	r3, #0
 800f780:	dc20      	bgt.n	800f7c4 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	8b5b      	ldrh	r3, [r3, #26]
 800f786:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f78a:	b29a      	uxth	r2, r3
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f790:	e018      	b.n	800f7c4 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f79a:	68db      	ldr	r3, [r3, #12]
 800f79c:	685b      	ldr	r3, [r3, #4]
 800f79e:	4618      	mov	r0, r3
 800f7a0:	f7fb fa90 	bl	800acc4 <lwip_htonl>
 800f7a4:	4603      	mov	r3, r0
 800f7a6:	1ae3      	subs	r3, r4, r3
 800f7a8:	2b00      	cmp	r3, #0
 800f7aa:	dc0b      	bgt.n	800f7c4 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	8b5b      	ldrh	r3, [r3, #26]
 800f7b0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f7b4:	b29a      	uxth	r2, r3
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f7ba:	e003      	b.n	800f7c4 <tcp_receive+0x448>
>>>>>>> Stashed changes
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
<<<<<<< Updated upstream
 800f7ec:	6878      	ldr	r0, [r7, #4]
 800f7ee:	f001 ff75 	bl	80116dc <tcp_send_empty_ack>
 800f7f2:	e000      	b.n	800f7f6 <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f7f4:	bf00      	nop
=======
 800f7bc:	6878      	ldr	r0, [r7, #4]
 800f7be:	f001 ff75 	bl	80116ac <tcp_send_empty_ack>
 800f7c2:	e000      	b.n	800f7c6 <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f7c4:	bf00      	nop
>>>>>>> Stashed changes
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
<<<<<<< Updated upstream
 800f7f6:	687b      	ldr	r3, [r7, #4]
 800f7f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f7fa:	2b00      	cmp	r3, #0
 800f7fc:	d05b      	beq.n	800f8b6 <tcp_receive+0x50a>
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f802:	4b60      	ldr	r3, [pc, #384]	; (800f984 <tcp_receive+0x5d8>)
 800f804:	681b      	ldr	r3, [r3, #0]
 800f806:	1ad3      	subs	r3, r2, r3
 800f808:	2b00      	cmp	r3, #0
 800f80a:	da54      	bge.n	800f8b6 <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800f80c:	4b5e      	ldr	r3, [pc, #376]	; (800f988 <tcp_receive+0x5dc>)
 800f80e:	681b      	ldr	r3, [r3, #0]
 800f810:	b29a      	uxth	r2, r3
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f816:	b29b      	uxth	r3, r3
 800f818:	1ad3      	subs	r3, r2, r3
 800f81a:	b29b      	uxth	r3, r3
 800f81c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
=======
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f7ca:	2b00      	cmp	r3, #0
 800f7cc:	d05b      	beq.n	800f886 <tcp_receive+0x50a>
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f7d2:	4b60      	ldr	r3, [pc, #384]	; (800f954 <tcp_receive+0x5d8>)
 800f7d4:	681b      	ldr	r3, [r3, #0]
 800f7d6:	1ad3      	subs	r3, r2, r3
 800f7d8:	2b00      	cmp	r3, #0
 800f7da:	da54      	bge.n	800f886 <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800f7dc:	4b5e      	ldr	r3, [pc, #376]	; (800f958 <tcp_receive+0x5dc>)
 800f7de:	681b      	ldr	r3, [r3, #0]
 800f7e0:	b29a      	uxth	r2, r3
 800f7e2:	687b      	ldr	r3, [r7, #4]
 800f7e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f7e6:	b29b      	uxth	r3, r3
 800f7e8:	1ad3      	subs	r3, r2, r3
 800f7ea:	b29b      	uxth	r3, r3
 800f7ec:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
>>>>>>> Stashed changes

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
<<<<<<< Updated upstream
 800f820:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f82a:	10db      	asrs	r3, r3, #3
 800f82c:	b21b      	sxth	r3, r3
 800f82e:	b29b      	uxth	r3, r3
 800f830:	1ad3      	subs	r3, r2, r3
 800f832:	b29b      	uxth	r3, r3
 800f834:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f83e:	b29a      	uxth	r2, r3
 800f840:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800f844:	4413      	add	r3, r2
 800f846:	b29b      	uxth	r3, r3
 800f848:	b21a      	sxth	r2, r3
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800f84e:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800f852:	2b00      	cmp	r3, #0
 800f854:	da05      	bge.n	800f862 <tcp_receive+0x4b6>
        m = (s16_t) - m;
 800f856:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800f85a:	425b      	negs	r3, r3
 800f85c:	b29b      	uxth	r3, r3
 800f85e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800f862:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f86c:	109b      	asrs	r3, r3, #2
 800f86e:	b21b      	sxth	r3, r3
 800f870:	b29b      	uxth	r3, r3
 800f872:	1ad3      	subs	r3, r2, r3
 800f874:	b29b      	uxth	r3, r3
 800f876:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f880:	b29a      	uxth	r2, r3
 800f882:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800f886:	4413      	add	r3, r2
 800f888:	b29b      	uxth	r3, r3
 800f88a:	b21a      	sxth	r2, r3
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f896:	10db      	asrs	r3, r3, #3
 800f898:	b21b      	sxth	r3, r3
 800f89a:	b29a      	uxth	r2, r3
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f8a2:	b29b      	uxth	r3, r3
 800f8a4:	4413      	add	r3, r2
 800f8a6:	b29b      	uxth	r3, r3
 800f8a8:	b21a      	sxth	r2, r3
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
=======
 800f7f0:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f7fa:	10db      	asrs	r3, r3, #3
 800f7fc:	b21b      	sxth	r3, r3
 800f7fe:	b29b      	uxth	r3, r3
 800f800:	1ad3      	subs	r3, r2, r3
 800f802:	b29b      	uxth	r3, r3
 800f804:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f80e:	b29a      	uxth	r2, r3
 800f810:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800f814:	4413      	add	r3, r2
 800f816:	b29b      	uxth	r3, r3
 800f818:	b21a      	sxth	r2, r3
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800f81e:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800f822:	2b00      	cmp	r3, #0
 800f824:	da05      	bge.n	800f832 <tcp_receive+0x4b6>
        m = (s16_t) - m;
 800f826:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800f82a:	425b      	negs	r3, r3
 800f82c:	b29b      	uxth	r3, r3
 800f82e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800f832:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f83c:	109b      	asrs	r3, r3, #2
 800f83e:	b21b      	sxth	r3, r3
 800f840:	b29b      	uxth	r3, r3
 800f842:	1ad3      	subs	r3, r2, r3
 800f844:	b29b      	uxth	r3, r3
 800f846:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f850:	b29a      	uxth	r2, r3
 800f852:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800f856:	4413      	add	r3, r2
 800f858:	b29b      	uxth	r3, r3
 800f85a:	b21a      	sxth	r2, r3
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f866:	10db      	asrs	r3, r3, #3
 800f868:	b21b      	sxth	r3, r3
 800f86a:	b29a      	uxth	r2, r3
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f872:	b29b      	uxth	r3, r3
 800f874:	4413      	add	r3, r2
 800f876:	b29b      	uxth	r3, r3
 800f878:	b21a      	sxth	r2, r3
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
>>>>>>> Stashed changes

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
<<<<<<< Updated upstream
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	2200      	movs	r2, #0
 800f8b4:	635a      	str	r2, [r3, #52]	; 0x34
=======
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	2200      	movs	r2, #0
 800f884:	635a      	str	r2, [r3, #52]	; 0x34
>>>>>>> Stashed changes

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
<<<<<<< Updated upstream
 800f8b6:	4b35      	ldr	r3, [pc, #212]	; (800f98c <tcp_receive+0x5e0>)
 800f8b8:	881b      	ldrh	r3, [r3, #0]
 800f8ba:	2b00      	cmp	r3, #0
 800f8bc:	f000 84e1 	beq.w	8010282 <tcp_receive+0xed6>
 800f8c0:	687b      	ldr	r3, [r7, #4]
 800f8c2:	7d1b      	ldrb	r3, [r3, #20]
 800f8c4:	2b06      	cmp	r3, #6
 800f8c6:	f200 84dc 	bhi.w	8010282 <tcp_receive+0xed6>
=======
 800f886:	4b35      	ldr	r3, [pc, #212]	; (800f95c <tcp_receive+0x5e0>)
 800f888:	881b      	ldrh	r3, [r3, #0]
 800f88a:	2b00      	cmp	r3, #0
 800f88c:	f000 84e1 	beq.w	8010252 <tcp_receive+0xed6>
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	7d1b      	ldrb	r3, [r3, #20]
 800f894:	2b06      	cmp	r3, #6
 800f896:	f200 84dc 	bhi.w	8010252 <tcp_receive+0xed6>
>>>>>>> Stashed changes
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
<<<<<<< Updated upstream
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f8ce:	4b30      	ldr	r3, [pc, #192]	; (800f990 <tcp_receive+0x5e4>)
 800f8d0:	681b      	ldr	r3, [r3, #0]
 800f8d2:	1ad3      	subs	r3, r2, r3
 800f8d4:	3b01      	subs	r3, #1
 800f8d6:	2b00      	cmp	r3, #0
 800f8d8:	f2c0 808e 	blt.w	800f9f8 <tcp_receive+0x64c>
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f8e0:	4b2a      	ldr	r3, [pc, #168]	; (800f98c <tcp_receive+0x5e0>)
 800f8e2:	881b      	ldrh	r3, [r3, #0]
 800f8e4:	4619      	mov	r1, r3
 800f8e6:	4b2a      	ldr	r3, [pc, #168]	; (800f990 <tcp_receive+0x5e4>)
 800f8e8:	681b      	ldr	r3, [r3, #0]
 800f8ea:	440b      	add	r3, r1
 800f8ec:	1ad3      	subs	r3, r2, r3
 800f8ee:	3301      	adds	r3, #1
 800f8f0:	2b00      	cmp	r3, #0
 800f8f2:	f300 8081 	bgt.w	800f9f8 <tcp_receive+0x64c>
=======
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f89e:	4b30      	ldr	r3, [pc, #192]	; (800f960 <tcp_receive+0x5e4>)
 800f8a0:	681b      	ldr	r3, [r3, #0]
 800f8a2:	1ad3      	subs	r3, r2, r3
 800f8a4:	3b01      	subs	r3, #1
 800f8a6:	2b00      	cmp	r3, #0
 800f8a8:	f2c0 808e 	blt.w	800f9c8 <tcp_receive+0x64c>
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f8b0:	4b2a      	ldr	r3, [pc, #168]	; (800f95c <tcp_receive+0x5e0>)
 800f8b2:	881b      	ldrh	r3, [r3, #0]
 800f8b4:	4619      	mov	r1, r3
 800f8b6:	4b2a      	ldr	r3, [pc, #168]	; (800f960 <tcp_receive+0x5e4>)
 800f8b8:	681b      	ldr	r3, [r3, #0]
 800f8ba:	440b      	add	r3, r1
 800f8bc:	1ad3      	subs	r3, r2, r3
 800f8be:	3301      	adds	r3, #1
 800f8c0:	2b00      	cmp	r3, #0
 800f8c2:	f300 8081 	bgt.w	800f9c8 <tcp_receive+0x64c>
>>>>>>> Stashed changes

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
<<<<<<< Updated upstream
 800f8f6:	4b27      	ldr	r3, [pc, #156]	; (800f994 <tcp_receive+0x5e8>)
 800f8f8:	685b      	ldr	r3, [r3, #4]
 800f8fa:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f900:	4b23      	ldr	r3, [pc, #140]	; (800f990 <tcp_receive+0x5e4>)
 800f902:	681b      	ldr	r3, [r3, #0]
 800f904:	1ad3      	subs	r3, r2, r3
 800f906:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800f908:	4b22      	ldr	r3, [pc, #136]	; (800f994 <tcp_receive+0x5e8>)
 800f90a:	685b      	ldr	r3, [r3, #4]
 800f90c:	2b00      	cmp	r3, #0
 800f90e:	d106      	bne.n	800f91e <tcp_receive+0x572>
 800f910:	4b21      	ldr	r3, [pc, #132]	; (800f998 <tcp_receive+0x5ec>)
 800f912:	f240 5294 	movw	r2, #1428	; 0x594
 800f916:	4921      	ldr	r1, [pc, #132]	; (800f99c <tcp_receive+0x5f0>)
 800f918:	4821      	ldr	r0, [pc, #132]	; (800f9a0 <tcp_receive+0x5f4>)
 800f91a:	f004 fe33 	bl	8014584 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800f91e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f920:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800f924:	4293      	cmp	r3, r2
 800f926:	d906      	bls.n	800f936 <tcp_receive+0x58a>
 800f928:	4b1b      	ldr	r3, [pc, #108]	; (800f998 <tcp_receive+0x5ec>)
 800f92a:	f240 5295 	movw	r2, #1429	; 0x595
 800f92e:	491d      	ldr	r1, [pc, #116]	; (800f9a4 <tcp_receive+0x5f8>)
 800f930:	481b      	ldr	r0, [pc, #108]	; (800f9a0 <tcp_receive+0x5f4>)
 800f932:	f004 fe27 	bl	8014584 <iprintf>
      off = (u16_t)off32;
 800f936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f938:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800f93c:	4b15      	ldr	r3, [pc, #84]	; (800f994 <tcp_receive+0x5e8>)
 800f93e:	685b      	ldr	r3, [r3, #4]
 800f940:	891b      	ldrh	r3, [r3, #8]
 800f942:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f946:	429a      	cmp	r2, r3
 800f948:	d906      	bls.n	800f958 <tcp_receive+0x5ac>
 800f94a:	4b13      	ldr	r3, [pc, #76]	; (800f998 <tcp_receive+0x5ec>)
 800f94c:	f240 5297 	movw	r2, #1431	; 0x597
 800f950:	4915      	ldr	r1, [pc, #84]	; (800f9a8 <tcp_receive+0x5fc>)
 800f952:	4813      	ldr	r0, [pc, #76]	; (800f9a0 <tcp_receive+0x5f4>)
 800f954:	f004 fe16 	bl	8014584 <iprintf>
      inseg.len -= off;
 800f958:	4b0e      	ldr	r3, [pc, #56]	; (800f994 <tcp_receive+0x5e8>)
 800f95a:	891a      	ldrh	r2, [r3, #8]
 800f95c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f960:	1ad3      	subs	r3, r2, r3
 800f962:	b29a      	uxth	r2, r3
 800f964:	4b0b      	ldr	r3, [pc, #44]	; (800f994 <tcp_receive+0x5e8>)
 800f966:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800f968:	4b0a      	ldr	r3, [pc, #40]	; (800f994 <tcp_receive+0x5e8>)
 800f96a:	685b      	ldr	r3, [r3, #4]
 800f96c:	891a      	ldrh	r2, [r3, #8]
 800f96e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f972:	1ad3      	subs	r3, r2, r3
 800f974:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800f976:	e029      	b.n	800f9cc <tcp_receive+0x620>
 800f978:	08016ef8 	.word	0x08016ef8
 800f97c:	08016f00 	.word	0x08016f00
 800f980:	20000110 	.word	0x20000110
 800f984:	2000010c 	.word	0x2000010c
 800f988:	200072a4 	.word	0x200072a4
 800f98c:	20000112 	.word	0x20000112
 800f990:	20000108 	.word	0x20000108
 800f994:	200000e8 	.word	0x200000e8
 800f998:	08016b90 	.word	0x08016b90
 800f99c:	08016f08 	.word	0x08016f08
 800f9a0:	08016bdc 	.word	0x08016bdc
 800f9a4:	08016f18 	.word	0x08016f18
 800f9a8:	08016f28 	.word	0x08016f28
        off -= p->len;
 800f9ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f9ae:	895b      	ldrh	r3, [r3, #10]
 800f9b0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f9b4:	1ad3      	subs	r3, r2, r3
 800f9b6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800f9ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f9bc:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800f9be:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800f9c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f9c2:	2200      	movs	r2, #0
 800f9c4:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800f9c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f9c8:	681b      	ldr	r3, [r3, #0]
 800f9ca:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800f9cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f9ce:	895b      	ldrh	r3, [r3, #10]
 800f9d0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f9d4:	429a      	cmp	r2, r3
 800f9d6:	d8e9      	bhi.n	800f9ac <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800f9d8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f9dc:	4619      	mov	r1, r3
 800f9de:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800f9e0:	f7fc fb80 	bl	800c0e4 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f9e8:	4a91      	ldr	r2, [pc, #580]	; (800fc30 <tcp_receive+0x884>)
 800f9ea:	6013      	str	r3, [r2, #0]
 800f9ec:	4b91      	ldr	r3, [pc, #580]	; (800fc34 <tcp_receive+0x888>)
 800f9ee:	68db      	ldr	r3, [r3, #12]
 800f9f0:	4a8f      	ldr	r2, [pc, #572]	; (800fc30 <tcp_receive+0x884>)
 800f9f2:	6812      	ldr	r2, [r2, #0]
 800f9f4:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800f9f6:	e00d      	b.n	800fa14 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800f9f8:	4b8d      	ldr	r3, [pc, #564]	; (800fc30 <tcp_receive+0x884>)
 800f9fa:	681a      	ldr	r2, [r3, #0]
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa00:	1ad3      	subs	r3, r2, r3
 800fa02:	2b00      	cmp	r3, #0
 800fa04:	da06      	bge.n	800fa14 <tcp_receive+0x668>
=======
 800f8c6:	4b27      	ldr	r3, [pc, #156]	; (800f964 <tcp_receive+0x5e8>)
 800f8c8:	685b      	ldr	r3, [r3, #4]
 800f8ca:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f8d0:	4b23      	ldr	r3, [pc, #140]	; (800f960 <tcp_receive+0x5e4>)
 800f8d2:	681b      	ldr	r3, [r3, #0]
 800f8d4:	1ad3      	subs	r3, r2, r3
 800f8d6:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800f8d8:	4b22      	ldr	r3, [pc, #136]	; (800f964 <tcp_receive+0x5e8>)
 800f8da:	685b      	ldr	r3, [r3, #4]
 800f8dc:	2b00      	cmp	r3, #0
 800f8de:	d106      	bne.n	800f8ee <tcp_receive+0x572>
 800f8e0:	4b21      	ldr	r3, [pc, #132]	; (800f968 <tcp_receive+0x5ec>)
 800f8e2:	f240 5294 	movw	r2, #1428	; 0x594
 800f8e6:	4921      	ldr	r1, [pc, #132]	; (800f96c <tcp_receive+0x5f0>)
 800f8e8:	4821      	ldr	r0, [pc, #132]	; (800f970 <tcp_receive+0x5f4>)
 800f8ea:	f004 fe33 	bl	8014554 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800f8ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8f0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800f8f4:	4293      	cmp	r3, r2
 800f8f6:	d906      	bls.n	800f906 <tcp_receive+0x58a>
 800f8f8:	4b1b      	ldr	r3, [pc, #108]	; (800f968 <tcp_receive+0x5ec>)
 800f8fa:	f240 5295 	movw	r2, #1429	; 0x595
 800f8fe:	491d      	ldr	r1, [pc, #116]	; (800f974 <tcp_receive+0x5f8>)
 800f900:	481b      	ldr	r0, [pc, #108]	; (800f970 <tcp_receive+0x5f4>)
 800f902:	f004 fe27 	bl	8014554 <iprintf>
      off = (u16_t)off32;
 800f906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f908:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800f90c:	4b15      	ldr	r3, [pc, #84]	; (800f964 <tcp_receive+0x5e8>)
 800f90e:	685b      	ldr	r3, [r3, #4]
 800f910:	891b      	ldrh	r3, [r3, #8]
 800f912:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f916:	429a      	cmp	r2, r3
 800f918:	d906      	bls.n	800f928 <tcp_receive+0x5ac>
 800f91a:	4b13      	ldr	r3, [pc, #76]	; (800f968 <tcp_receive+0x5ec>)
 800f91c:	f240 5297 	movw	r2, #1431	; 0x597
 800f920:	4915      	ldr	r1, [pc, #84]	; (800f978 <tcp_receive+0x5fc>)
 800f922:	4813      	ldr	r0, [pc, #76]	; (800f970 <tcp_receive+0x5f4>)
 800f924:	f004 fe16 	bl	8014554 <iprintf>
      inseg.len -= off;
 800f928:	4b0e      	ldr	r3, [pc, #56]	; (800f964 <tcp_receive+0x5e8>)
 800f92a:	891a      	ldrh	r2, [r3, #8]
 800f92c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f930:	1ad3      	subs	r3, r2, r3
 800f932:	b29a      	uxth	r2, r3
 800f934:	4b0b      	ldr	r3, [pc, #44]	; (800f964 <tcp_receive+0x5e8>)
 800f936:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800f938:	4b0a      	ldr	r3, [pc, #40]	; (800f964 <tcp_receive+0x5e8>)
 800f93a:	685b      	ldr	r3, [r3, #4]
 800f93c:	891a      	ldrh	r2, [r3, #8]
 800f93e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f942:	1ad3      	subs	r3, r2, r3
 800f944:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800f946:	e029      	b.n	800f99c <tcp_receive+0x620>
 800f948:	08016edc 	.word	0x08016edc
 800f94c:	08016ee4 	.word	0x08016ee4
 800f950:	20000110 	.word	0x20000110
 800f954:	2000010c 	.word	0x2000010c
 800f958:	200072a4 	.word	0x200072a4
 800f95c:	20000112 	.word	0x20000112
 800f960:	20000108 	.word	0x20000108
 800f964:	200000e8 	.word	0x200000e8
 800f968:	08016b74 	.word	0x08016b74
 800f96c:	08016eec 	.word	0x08016eec
 800f970:	08016bc0 	.word	0x08016bc0
 800f974:	08016efc 	.word	0x08016efc
 800f978:	08016f0c 	.word	0x08016f0c
        off -= p->len;
 800f97c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f97e:	895b      	ldrh	r3, [r3, #10]
 800f980:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f984:	1ad3      	subs	r3, r2, r3
 800f986:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800f98a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f98c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800f98e:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800f990:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f992:	2200      	movs	r2, #0
 800f994:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800f996:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f998:	681b      	ldr	r3, [r3, #0]
 800f99a:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800f99c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f99e:	895b      	ldrh	r3, [r3, #10]
 800f9a0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f9a4:	429a      	cmp	r2, r3
 800f9a6:	d8e9      	bhi.n	800f97c <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800f9a8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f9ac:	4619      	mov	r1, r3
 800f9ae:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800f9b0:	f7fc fb80 	bl	800c0b4 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f9b8:	4a91      	ldr	r2, [pc, #580]	; (800fc00 <tcp_receive+0x884>)
 800f9ba:	6013      	str	r3, [r2, #0]
 800f9bc:	4b91      	ldr	r3, [pc, #580]	; (800fc04 <tcp_receive+0x888>)
 800f9be:	68db      	ldr	r3, [r3, #12]
 800f9c0:	4a8f      	ldr	r2, [pc, #572]	; (800fc00 <tcp_receive+0x884>)
 800f9c2:	6812      	ldr	r2, [r2, #0]
 800f9c4:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800f9c6:	e00d      	b.n	800f9e4 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800f9c8:	4b8d      	ldr	r3, [pc, #564]	; (800fc00 <tcp_receive+0x884>)
 800f9ca:	681a      	ldr	r2, [r3, #0]
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f9d0:	1ad3      	subs	r3, r2, r3
 800f9d2:	2b00      	cmp	r3, #0
 800f9d4:	da06      	bge.n	800f9e4 <tcp_receive+0x668>
>>>>>>> Stashed changes
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
<<<<<<< Updated upstream
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	8b5b      	ldrh	r3, [r3, #26]
 800fa0a:	f043 0302 	orr.w	r3, r3, #2
 800fa0e:	b29a      	uxth	r2, r3
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	835a      	strh	r2, [r3, #26]
=======
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	8b5b      	ldrh	r3, [r3, #26]
 800f9da:	f043 0302 	orr.w	r3, r3, #2
 800f9de:	b29a      	uxth	r2, r3
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	835a      	strh	r2, [r3, #26]
>>>>>>> Stashed changes
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
<<<<<<< Updated upstream
 800fa14:	4b86      	ldr	r3, [pc, #536]	; (800fc30 <tcp_receive+0x884>)
 800fa16:	681a      	ldr	r2, [r3, #0]
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa1c:	1ad3      	subs	r3, r2, r3
 800fa1e:	2b00      	cmp	r3, #0
 800fa20:	f2c0 842a 	blt.w	8010278 <tcp_receive+0xecc>
 800fa24:	4b82      	ldr	r3, [pc, #520]	; (800fc30 <tcp_receive+0x884>)
 800fa26:	681a      	ldr	r2, [r3, #0]
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa2c:	6879      	ldr	r1, [r7, #4]
 800fa2e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800fa30:	440b      	add	r3, r1
 800fa32:	1ad3      	subs	r3, r2, r3
 800fa34:	3301      	adds	r3, #1
 800fa36:	2b00      	cmp	r3, #0
 800fa38:	f300 841e 	bgt.w	8010278 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fa40:	4b7b      	ldr	r3, [pc, #492]	; (800fc30 <tcp_receive+0x884>)
 800fa42:	681b      	ldr	r3, [r3, #0]
 800fa44:	429a      	cmp	r2, r3
 800fa46:	f040 829a 	bne.w	800ff7e <tcp_receive+0xbd2>
=======
 800f9e4:	4b86      	ldr	r3, [pc, #536]	; (800fc00 <tcp_receive+0x884>)
 800f9e6:	681a      	ldr	r2, [r3, #0]
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f9ec:	1ad3      	subs	r3, r2, r3
 800f9ee:	2b00      	cmp	r3, #0
 800f9f0:	f2c0 842a 	blt.w	8010248 <tcp_receive+0xecc>
 800f9f4:	4b82      	ldr	r3, [pc, #520]	; (800fc00 <tcp_receive+0x884>)
 800f9f6:	681a      	ldr	r2, [r3, #0]
 800f9f8:	687b      	ldr	r3, [r7, #4]
 800f9fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f9fc:	6879      	ldr	r1, [r7, #4]
 800f9fe:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800fa00:	440b      	add	r3, r1
 800fa02:	1ad3      	subs	r3, r2, r3
 800fa04:	3301      	adds	r3, #1
 800fa06:	2b00      	cmp	r3, #0
 800fa08:	f300 841e 	bgt.w	8010248 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fa10:	4b7b      	ldr	r3, [pc, #492]	; (800fc00 <tcp_receive+0x884>)
 800fa12:	681b      	ldr	r3, [r3, #0]
 800fa14:	429a      	cmp	r2, r3
 800fa16:	f040 829a 	bne.w	800ff4e <tcp_receive+0xbd2>
>>>>>>> Stashed changes
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
<<<<<<< Updated upstream
 800fa4a:	4b7a      	ldr	r3, [pc, #488]	; (800fc34 <tcp_receive+0x888>)
 800fa4c:	891c      	ldrh	r4, [r3, #8]
 800fa4e:	4b79      	ldr	r3, [pc, #484]	; (800fc34 <tcp_receive+0x888>)
 800fa50:	68db      	ldr	r3, [r3, #12]
 800fa52:	899b      	ldrh	r3, [r3, #12]
 800fa54:	b29b      	uxth	r3, r3
 800fa56:	4618      	mov	r0, r3
 800fa58:	f7fb f937 	bl	800acca <lwip_htons>
 800fa5c:	4603      	mov	r3, r0
 800fa5e:	b2db      	uxtb	r3, r3
 800fa60:	f003 0303 	and.w	r3, r3, #3
 800fa64:	2b00      	cmp	r3, #0
 800fa66:	d001      	beq.n	800fa6c <tcp_receive+0x6c0>
 800fa68:	2301      	movs	r3, #1
 800fa6a:	e000      	b.n	800fa6e <tcp_receive+0x6c2>
 800fa6c:	2300      	movs	r3, #0
 800fa6e:	4423      	add	r3, r4
 800fa70:	b29a      	uxth	r2, r3
 800fa72:	4b71      	ldr	r3, [pc, #452]	; (800fc38 <tcp_receive+0x88c>)
 800fa74:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800fa7a:	4b6f      	ldr	r3, [pc, #444]	; (800fc38 <tcp_receive+0x88c>)
 800fa7c:	881b      	ldrh	r3, [r3, #0]
 800fa7e:	429a      	cmp	r2, r3
 800fa80:	d275      	bcs.n	800fb6e <tcp_receive+0x7c2>
=======
 800fa1a:	4b7a      	ldr	r3, [pc, #488]	; (800fc04 <tcp_receive+0x888>)
 800fa1c:	891c      	ldrh	r4, [r3, #8]
 800fa1e:	4b79      	ldr	r3, [pc, #484]	; (800fc04 <tcp_receive+0x888>)
 800fa20:	68db      	ldr	r3, [r3, #12]
 800fa22:	899b      	ldrh	r3, [r3, #12]
 800fa24:	b29b      	uxth	r3, r3
 800fa26:	4618      	mov	r0, r3
 800fa28:	f7fb f937 	bl	800ac9a <lwip_htons>
 800fa2c:	4603      	mov	r3, r0
 800fa2e:	b2db      	uxtb	r3, r3
 800fa30:	f003 0303 	and.w	r3, r3, #3
 800fa34:	2b00      	cmp	r3, #0
 800fa36:	d001      	beq.n	800fa3c <tcp_receive+0x6c0>
 800fa38:	2301      	movs	r3, #1
 800fa3a:	e000      	b.n	800fa3e <tcp_receive+0x6c2>
 800fa3c:	2300      	movs	r3, #0
 800fa3e:	4423      	add	r3, r4
 800fa40:	b29a      	uxth	r2, r3
 800fa42:	4b71      	ldr	r3, [pc, #452]	; (800fc08 <tcp_receive+0x88c>)
 800fa44:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800fa46:	687b      	ldr	r3, [r7, #4]
 800fa48:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800fa4a:	4b6f      	ldr	r3, [pc, #444]	; (800fc08 <tcp_receive+0x88c>)
 800fa4c:	881b      	ldrh	r3, [r3, #0]
 800fa4e:	429a      	cmp	r2, r3
 800fa50:	d275      	bcs.n	800fb3e <tcp_receive+0x7c2>
>>>>>>> Stashed changes
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
<<<<<<< Updated upstream
 800fa82:	4b6c      	ldr	r3, [pc, #432]	; (800fc34 <tcp_receive+0x888>)
 800fa84:	68db      	ldr	r3, [r3, #12]
 800fa86:	899b      	ldrh	r3, [r3, #12]
 800fa88:	b29b      	uxth	r3, r3
 800fa8a:	4618      	mov	r0, r3
 800fa8c:	f7fb f91d 	bl	800acca <lwip_htons>
 800fa90:	4603      	mov	r3, r0
 800fa92:	b2db      	uxtb	r3, r3
 800fa94:	f003 0301 	and.w	r3, r3, #1
 800fa98:	2b00      	cmp	r3, #0
 800fa9a:	d01f      	beq.n	800fadc <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800fa9c:	4b65      	ldr	r3, [pc, #404]	; (800fc34 <tcp_receive+0x888>)
 800fa9e:	68db      	ldr	r3, [r3, #12]
 800faa0:	899b      	ldrh	r3, [r3, #12]
 800faa2:	b29b      	uxth	r3, r3
 800faa4:	b21b      	sxth	r3, r3
 800faa6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800faaa:	b21c      	sxth	r4, r3
 800faac:	4b61      	ldr	r3, [pc, #388]	; (800fc34 <tcp_receive+0x888>)
 800faae:	68db      	ldr	r3, [r3, #12]
 800fab0:	899b      	ldrh	r3, [r3, #12]
 800fab2:	b29b      	uxth	r3, r3
 800fab4:	4618      	mov	r0, r3
 800fab6:	f7fb f908 	bl	800acca <lwip_htons>
 800faba:	4603      	mov	r3, r0
 800fabc:	b2db      	uxtb	r3, r3
 800fabe:	b29b      	uxth	r3, r3
 800fac0:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800fac4:	b29b      	uxth	r3, r3
 800fac6:	4618      	mov	r0, r3
 800fac8:	f7fb f8ff 	bl	800acca <lwip_htons>
 800facc:	4603      	mov	r3, r0
 800face:	b21b      	sxth	r3, r3
 800fad0:	4323      	orrs	r3, r4
 800fad2:	b21a      	sxth	r2, r3
 800fad4:	4b57      	ldr	r3, [pc, #348]	; (800fc34 <tcp_receive+0x888>)
 800fad6:	68db      	ldr	r3, [r3, #12]
 800fad8:	b292      	uxth	r2, r2
 800fada:	819a      	strh	r2, [r3, #12]
=======
 800fa52:	4b6c      	ldr	r3, [pc, #432]	; (800fc04 <tcp_receive+0x888>)
 800fa54:	68db      	ldr	r3, [r3, #12]
 800fa56:	899b      	ldrh	r3, [r3, #12]
 800fa58:	b29b      	uxth	r3, r3
 800fa5a:	4618      	mov	r0, r3
 800fa5c:	f7fb f91d 	bl	800ac9a <lwip_htons>
 800fa60:	4603      	mov	r3, r0
 800fa62:	b2db      	uxtb	r3, r3
 800fa64:	f003 0301 	and.w	r3, r3, #1
 800fa68:	2b00      	cmp	r3, #0
 800fa6a:	d01f      	beq.n	800faac <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800fa6c:	4b65      	ldr	r3, [pc, #404]	; (800fc04 <tcp_receive+0x888>)
 800fa6e:	68db      	ldr	r3, [r3, #12]
 800fa70:	899b      	ldrh	r3, [r3, #12]
 800fa72:	b29b      	uxth	r3, r3
 800fa74:	b21b      	sxth	r3, r3
 800fa76:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800fa7a:	b21c      	sxth	r4, r3
 800fa7c:	4b61      	ldr	r3, [pc, #388]	; (800fc04 <tcp_receive+0x888>)
 800fa7e:	68db      	ldr	r3, [r3, #12]
 800fa80:	899b      	ldrh	r3, [r3, #12]
 800fa82:	b29b      	uxth	r3, r3
 800fa84:	4618      	mov	r0, r3
 800fa86:	f7fb f908 	bl	800ac9a <lwip_htons>
 800fa8a:	4603      	mov	r3, r0
 800fa8c:	b2db      	uxtb	r3, r3
 800fa8e:	b29b      	uxth	r3, r3
 800fa90:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800fa94:	b29b      	uxth	r3, r3
 800fa96:	4618      	mov	r0, r3
 800fa98:	f7fb f8ff 	bl	800ac9a <lwip_htons>
 800fa9c:	4603      	mov	r3, r0
 800fa9e:	b21b      	sxth	r3, r3
 800faa0:	4323      	orrs	r3, r4
 800faa2:	b21a      	sxth	r2, r3
 800faa4:	4b57      	ldr	r3, [pc, #348]	; (800fc04 <tcp_receive+0x888>)
 800faa6:	68db      	ldr	r3, [r3, #12]
 800faa8:	b292      	uxth	r2, r2
 800faaa:	819a      	strh	r2, [r3, #12]
>>>>>>> Stashed changes
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
<<<<<<< Updated upstream
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800fae0:	4b54      	ldr	r3, [pc, #336]	; (800fc34 <tcp_receive+0x888>)
 800fae2:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800fae4:	4b53      	ldr	r3, [pc, #332]	; (800fc34 <tcp_receive+0x888>)
 800fae6:	68db      	ldr	r3, [r3, #12]
 800fae8:	899b      	ldrh	r3, [r3, #12]
 800faea:	b29b      	uxth	r3, r3
 800faec:	4618      	mov	r0, r3
 800faee:	f7fb f8ec 	bl	800acca <lwip_htons>
 800faf2:	4603      	mov	r3, r0
 800faf4:	b2db      	uxtb	r3, r3
 800faf6:	f003 0302 	and.w	r3, r3, #2
 800fafa:	2b00      	cmp	r3, #0
 800fafc:	d005      	beq.n	800fb0a <tcp_receive+0x75e>
            inseg.len -= 1;
 800fafe:	4b4d      	ldr	r3, [pc, #308]	; (800fc34 <tcp_receive+0x888>)
 800fb00:	891b      	ldrh	r3, [r3, #8]
 800fb02:	3b01      	subs	r3, #1
 800fb04:	b29a      	uxth	r2, r3
 800fb06:	4b4b      	ldr	r3, [pc, #300]	; (800fc34 <tcp_receive+0x888>)
 800fb08:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800fb0a:	4b4a      	ldr	r3, [pc, #296]	; (800fc34 <tcp_receive+0x888>)
 800fb0c:	685b      	ldr	r3, [r3, #4]
 800fb0e:	4a49      	ldr	r2, [pc, #292]	; (800fc34 <tcp_receive+0x888>)
 800fb10:	8912      	ldrh	r2, [r2, #8]
 800fb12:	4611      	mov	r1, r2
 800fb14:	4618      	mov	r0, r3
 800fb16:	f7fc f9e5 	bl	800bee4 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800fb1a:	4b46      	ldr	r3, [pc, #280]	; (800fc34 <tcp_receive+0x888>)
 800fb1c:	891c      	ldrh	r4, [r3, #8]
 800fb1e:	4b45      	ldr	r3, [pc, #276]	; (800fc34 <tcp_receive+0x888>)
 800fb20:	68db      	ldr	r3, [r3, #12]
 800fb22:	899b      	ldrh	r3, [r3, #12]
 800fb24:	b29b      	uxth	r3, r3
 800fb26:	4618      	mov	r0, r3
 800fb28:	f7fb f8cf 	bl	800acca <lwip_htons>
 800fb2c:	4603      	mov	r3, r0
 800fb2e:	b2db      	uxtb	r3, r3
 800fb30:	f003 0303 	and.w	r3, r3, #3
 800fb34:	2b00      	cmp	r3, #0
 800fb36:	d001      	beq.n	800fb3c <tcp_receive+0x790>
 800fb38:	2301      	movs	r3, #1
 800fb3a:	e000      	b.n	800fb3e <tcp_receive+0x792>
 800fb3c:	2300      	movs	r3, #0
 800fb3e:	4423      	add	r3, r4
 800fb40:	b29a      	uxth	r2, r3
 800fb42:	4b3d      	ldr	r3, [pc, #244]	; (800fc38 <tcp_receive+0x88c>)
 800fb44:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800fb46:	4b3c      	ldr	r3, [pc, #240]	; (800fc38 <tcp_receive+0x88c>)
 800fb48:	881b      	ldrh	r3, [r3, #0]
 800fb4a:	461a      	mov	r2, r3
 800fb4c:	4b38      	ldr	r3, [pc, #224]	; (800fc30 <tcp_receive+0x884>)
 800fb4e:	681b      	ldr	r3, [r3, #0]
 800fb50:	441a      	add	r2, r3
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb56:	6879      	ldr	r1, [r7, #4]
 800fb58:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800fb5a:	440b      	add	r3, r1
 800fb5c:	429a      	cmp	r2, r3
 800fb5e:	d006      	beq.n	800fb6e <tcp_receive+0x7c2>
 800fb60:	4b36      	ldr	r3, [pc, #216]	; (800fc3c <tcp_receive+0x890>)
 800fb62:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800fb66:	4936      	ldr	r1, [pc, #216]	; (800fc40 <tcp_receive+0x894>)
 800fb68:	4836      	ldr	r0, [pc, #216]	; (800fc44 <tcp_receive+0x898>)
 800fb6a:	f004 fd0b 	bl	8014584 <iprintf>
=======
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800fab0:	4b54      	ldr	r3, [pc, #336]	; (800fc04 <tcp_receive+0x888>)
 800fab2:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800fab4:	4b53      	ldr	r3, [pc, #332]	; (800fc04 <tcp_receive+0x888>)
 800fab6:	68db      	ldr	r3, [r3, #12]
 800fab8:	899b      	ldrh	r3, [r3, #12]
 800faba:	b29b      	uxth	r3, r3
 800fabc:	4618      	mov	r0, r3
 800fabe:	f7fb f8ec 	bl	800ac9a <lwip_htons>
 800fac2:	4603      	mov	r3, r0
 800fac4:	b2db      	uxtb	r3, r3
 800fac6:	f003 0302 	and.w	r3, r3, #2
 800faca:	2b00      	cmp	r3, #0
 800facc:	d005      	beq.n	800fada <tcp_receive+0x75e>
            inseg.len -= 1;
 800face:	4b4d      	ldr	r3, [pc, #308]	; (800fc04 <tcp_receive+0x888>)
 800fad0:	891b      	ldrh	r3, [r3, #8]
 800fad2:	3b01      	subs	r3, #1
 800fad4:	b29a      	uxth	r2, r3
 800fad6:	4b4b      	ldr	r3, [pc, #300]	; (800fc04 <tcp_receive+0x888>)
 800fad8:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800fada:	4b4a      	ldr	r3, [pc, #296]	; (800fc04 <tcp_receive+0x888>)
 800fadc:	685b      	ldr	r3, [r3, #4]
 800fade:	4a49      	ldr	r2, [pc, #292]	; (800fc04 <tcp_receive+0x888>)
 800fae0:	8912      	ldrh	r2, [r2, #8]
 800fae2:	4611      	mov	r1, r2
 800fae4:	4618      	mov	r0, r3
 800fae6:	f7fc f9e5 	bl	800beb4 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800faea:	4b46      	ldr	r3, [pc, #280]	; (800fc04 <tcp_receive+0x888>)
 800faec:	891c      	ldrh	r4, [r3, #8]
 800faee:	4b45      	ldr	r3, [pc, #276]	; (800fc04 <tcp_receive+0x888>)
 800faf0:	68db      	ldr	r3, [r3, #12]
 800faf2:	899b      	ldrh	r3, [r3, #12]
 800faf4:	b29b      	uxth	r3, r3
 800faf6:	4618      	mov	r0, r3
 800faf8:	f7fb f8cf 	bl	800ac9a <lwip_htons>
 800fafc:	4603      	mov	r3, r0
 800fafe:	b2db      	uxtb	r3, r3
 800fb00:	f003 0303 	and.w	r3, r3, #3
 800fb04:	2b00      	cmp	r3, #0
 800fb06:	d001      	beq.n	800fb0c <tcp_receive+0x790>
 800fb08:	2301      	movs	r3, #1
 800fb0a:	e000      	b.n	800fb0e <tcp_receive+0x792>
 800fb0c:	2300      	movs	r3, #0
 800fb0e:	4423      	add	r3, r4
 800fb10:	b29a      	uxth	r2, r3
 800fb12:	4b3d      	ldr	r3, [pc, #244]	; (800fc08 <tcp_receive+0x88c>)
 800fb14:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800fb16:	4b3c      	ldr	r3, [pc, #240]	; (800fc08 <tcp_receive+0x88c>)
 800fb18:	881b      	ldrh	r3, [r3, #0]
 800fb1a:	461a      	mov	r2, r3
 800fb1c:	4b38      	ldr	r3, [pc, #224]	; (800fc00 <tcp_receive+0x884>)
 800fb1e:	681b      	ldr	r3, [r3, #0]
 800fb20:	441a      	add	r2, r3
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb26:	6879      	ldr	r1, [r7, #4]
 800fb28:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800fb2a:	440b      	add	r3, r1
 800fb2c:	429a      	cmp	r2, r3
 800fb2e:	d006      	beq.n	800fb3e <tcp_receive+0x7c2>
 800fb30:	4b36      	ldr	r3, [pc, #216]	; (800fc0c <tcp_receive+0x890>)
 800fb32:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800fb36:	4936      	ldr	r1, [pc, #216]	; (800fc10 <tcp_receive+0x894>)
 800fb38:	4836      	ldr	r0, [pc, #216]	; (800fc14 <tcp_receive+0x898>)
 800fb3a:	f004 fd0b 	bl	8014554 <iprintf>
>>>>>>> Stashed changes
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
<<<<<<< Updated upstream
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fb72:	2b00      	cmp	r3, #0
 800fb74:	f000 80e7 	beq.w	800fd46 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800fb78:	4b2e      	ldr	r3, [pc, #184]	; (800fc34 <tcp_receive+0x888>)
 800fb7a:	68db      	ldr	r3, [r3, #12]
 800fb7c:	899b      	ldrh	r3, [r3, #12]
 800fb7e:	b29b      	uxth	r3, r3
 800fb80:	4618      	mov	r0, r3
 800fb82:	f7fb f8a2 	bl	800acca <lwip_htons>
 800fb86:	4603      	mov	r3, r0
 800fb88:	b2db      	uxtb	r3, r3
 800fb8a:	f003 0301 	and.w	r3, r3, #1
 800fb8e:	2b00      	cmp	r3, #0
 800fb90:	d010      	beq.n	800fbb4 <tcp_receive+0x808>
=======
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fb42:	2b00      	cmp	r3, #0
 800fb44:	f000 80e7 	beq.w	800fd16 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800fb48:	4b2e      	ldr	r3, [pc, #184]	; (800fc04 <tcp_receive+0x888>)
 800fb4a:	68db      	ldr	r3, [r3, #12]
 800fb4c:	899b      	ldrh	r3, [r3, #12]
 800fb4e:	b29b      	uxth	r3, r3
 800fb50:	4618      	mov	r0, r3
 800fb52:	f7fb f8a2 	bl	800ac9a <lwip_htons>
 800fb56:	4603      	mov	r3, r0
 800fb58:	b2db      	uxtb	r3, r3
 800fb5a:	f003 0301 	and.w	r3, r3, #1
 800fb5e:	2b00      	cmp	r3, #0
 800fb60:	d010      	beq.n	800fb84 <tcp_receive+0x808>
>>>>>>> Stashed changes
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
<<<<<<< Updated upstream
 800fb92:	e00a      	b.n	800fbaa <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fb98:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fb9e:	681a      	ldr	r2, [r3, #0]
 800fba0:	687b      	ldr	r3, [r7, #4]
 800fba2:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800fba4:	68f8      	ldr	r0, [r7, #12]
 800fba6:	f7fd fd96 	bl	800d6d6 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800fbaa:	687b      	ldr	r3, [r7, #4]
 800fbac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fbae:	2b00      	cmp	r3, #0
 800fbb0:	d1f0      	bne.n	800fb94 <tcp_receive+0x7e8>
 800fbb2:	e0c8      	b.n	800fd46 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fbb8:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800fbba:	e052      	b.n	800fc62 <tcp_receive+0x8b6>
=======
 800fb62:	e00a      	b.n	800fb7a <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fb68:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fb6e:	681a      	ldr	r2, [r3, #0]
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800fb74:	68f8      	ldr	r0, [r7, #12]
 800fb76:	f7fd fd96 	bl	800d6a6 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fb7e:	2b00      	cmp	r3, #0
 800fb80:	d1f0      	bne.n	800fb64 <tcp_receive+0x7e8>
 800fb82:	e0c8      	b.n	800fd16 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fb88:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800fb8a:	e052      	b.n	800fc32 <tcp_receive+0x8b6>
>>>>>>> Stashed changes
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
<<<<<<< Updated upstream
 800fbbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fbbe:	68db      	ldr	r3, [r3, #12]
 800fbc0:	899b      	ldrh	r3, [r3, #12]
 800fbc2:	b29b      	uxth	r3, r3
 800fbc4:	4618      	mov	r0, r3
 800fbc6:	f7fb f880 	bl	800acca <lwip_htons>
 800fbca:	4603      	mov	r3, r0
 800fbcc:	b2db      	uxtb	r3, r3
 800fbce:	f003 0301 	and.w	r3, r3, #1
 800fbd2:	2b00      	cmp	r3, #0
 800fbd4:	d03d      	beq.n	800fc52 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800fbd6:	4b17      	ldr	r3, [pc, #92]	; (800fc34 <tcp_receive+0x888>)
 800fbd8:	68db      	ldr	r3, [r3, #12]
 800fbda:	899b      	ldrh	r3, [r3, #12]
 800fbdc:	b29b      	uxth	r3, r3
 800fbde:	4618      	mov	r0, r3
 800fbe0:	f7fb f873 	bl	800acca <lwip_htons>
 800fbe4:	4603      	mov	r3, r0
 800fbe6:	b2db      	uxtb	r3, r3
 800fbe8:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800fbec:	2b00      	cmp	r3, #0
 800fbee:	d130      	bne.n	800fc52 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800fbf0:	4b10      	ldr	r3, [pc, #64]	; (800fc34 <tcp_receive+0x888>)
 800fbf2:	68db      	ldr	r3, [r3, #12]
 800fbf4:	899b      	ldrh	r3, [r3, #12]
 800fbf6:	b29c      	uxth	r4, r3
 800fbf8:	2001      	movs	r0, #1
 800fbfa:	f7fb f866 	bl	800acca <lwip_htons>
 800fbfe:	4603      	mov	r3, r0
 800fc00:	461a      	mov	r2, r3
 800fc02:	4b0c      	ldr	r3, [pc, #48]	; (800fc34 <tcp_receive+0x888>)
 800fc04:	68db      	ldr	r3, [r3, #12]
 800fc06:	4322      	orrs	r2, r4
 800fc08:	b292      	uxth	r2, r2
 800fc0a:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800fc0c:	4b09      	ldr	r3, [pc, #36]	; (800fc34 <tcp_receive+0x888>)
 800fc0e:	891c      	ldrh	r4, [r3, #8]
 800fc10:	4b08      	ldr	r3, [pc, #32]	; (800fc34 <tcp_receive+0x888>)
 800fc12:	68db      	ldr	r3, [r3, #12]
 800fc14:	899b      	ldrh	r3, [r3, #12]
 800fc16:	b29b      	uxth	r3, r3
 800fc18:	4618      	mov	r0, r3
 800fc1a:	f7fb f856 	bl	800acca <lwip_htons>
 800fc1e:	4603      	mov	r3, r0
 800fc20:	b2db      	uxtb	r3, r3
 800fc22:	f003 0303 	and.w	r3, r3, #3
 800fc26:	2b00      	cmp	r3, #0
 800fc28:	d00e      	beq.n	800fc48 <tcp_receive+0x89c>
 800fc2a:	2301      	movs	r3, #1
 800fc2c:	e00d      	b.n	800fc4a <tcp_receive+0x89e>
 800fc2e:	bf00      	nop
 800fc30:	20000108 	.word	0x20000108
 800fc34:	200000e8 	.word	0x200000e8
 800fc38:	20000112 	.word	0x20000112
 800fc3c:	08016b90 	.word	0x08016b90
 800fc40:	08016f38 	.word	0x08016f38
 800fc44:	08016bdc 	.word	0x08016bdc
 800fc48:	2300      	movs	r3, #0
 800fc4a:	4423      	add	r3, r4
 800fc4c:	b29a      	uxth	r2, r3
 800fc4e:	4b98      	ldr	r3, [pc, #608]	; (800feb0 <tcp_receive+0xb04>)
 800fc50:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800fc52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fc54:	613b      	str	r3, [r7, #16]
              next = next->next;
 800fc56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fc58:	681b      	ldr	r3, [r3, #0]
 800fc5a:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800fc5c:	6938      	ldr	r0, [r7, #16]
 800fc5e:	f7fd fd3a 	bl	800d6d6 <tcp_seg_free>
            while (next &&
 800fc62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fc64:	2b00      	cmp	r3, #0
 800fc66:	d00e      	beq.n	800fc86 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800fc68:	4b91      	ldr	r3, [pc, #580]	; (800feb0 <tcp_receive+0xb04>)
 800fc6a:	881b      	ldrh	r3, [r3, #0]
 800fc6c:	461a      	mov	r2, r3
 800fc6e:	4b91      	ldr	r3, [pc, #580]	; (800feb4 <tcp_receive+0xb08>)
 800fc70:	681b      	ldr	r3, [r3, #0]
 800fc72:	441a      	add	r2, r3
 800fc74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fc76:	68db      	ldr	r3, [r3, #12]
 800fc78:	685b      	ldr	r3, [r3, #4]
 800fc7a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800fc7c:	8909      	ldrh	r1, [r1, #8]
 800fc7e:	440b      	add	r3, r1
 800fc80:	1ad3      	subs	r3, r2, r3
            while (next &&
 800fc82:	2b00      	cmp	r3, #0
 800fc84:	da9a      	bge.n	800fbbc <tcp_receive+0x810>
=======
 800fb8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fb8e:	68db      	ldr	r3, [r3, #12]
 800fb90:	899b      	ldrh	r3, [r3, #12]
 800fb92:	b29b      	uxth	r3, r3
 800fb94:	4618      	mov	r0, r3
 800fb96:	f7fb f880 	bl	800ac9a <lwip_htons>
 800fb9a:	4603      	mov	r3, r0
 800fb9c:	b2db      	uxtb	r3, r3
 800fb9e:	f003 0301 	and.w	r3, r3, #1
 800fba2:	2b00      	cmp	r3, #0
 800fba4:	d03d      	beq.n	800fc22 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800fba6:	4b17      	ldr	r3, [pc, #92]	; (800fc04 <tcp_receive+0x888>)
 800fba8:	68db      	ldr	r3, [r3, #12]
 800fbaa:	899b      	ldrh	r3, [r3, #12]
 800fbac:	b29b      	uxth	r3, r3
 800fbae:	4618      	mov	r0, r3
 800fbb0:	f7fb f873 	bl	800ac9a <lwip_htons>
 800fbb4:	4603      	mov	r3, r0
 800fbb6:	b2db      	uxtb	r3, r3
 800fbb8:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800fbbc:	2b00      	cmp	r3, #0
 800fbbe:	d130      	bne.n	800fc22 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800fbc0:	4b10      	ldr	r3, [pc, #64]	; (800fc04 <tcp_receive+0x888>)
 800fbc2:	68db      	ldr	r3, [r3, #12]
 800fbc4:	899b      	ldrh	r3, [r3, #12]
 800fbc6:	b29c      	uxth	r4, r3
 800fbc8:	2001      	movs	r0, #1
 800fbca:	f7fb f866 	bl	800ac9a <lwip_htons>
 800fbce:	4603      	mov	r3, r0
 800fbd0:	461a      	mov	r2, r3
 800fbd2:	4b0c      	ldr	r3, [pc, #48]	; (800fc04 <tcp_receive+0x888>)
 800fbd4:	68db      	ldr	r3, [r3, #12]
 800fbd6:	4322      	orrs	r2, r4
 800fbd8:	b292      	uxth	r2, r2
 800fbda:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800fbdc:	4b09      	ldr	r3, [pc, #36]	; (800fc04 <tcp_receive+0x888>)
 800fbde:	891c      	ldrh	r4, [r3, #8]
 800fbe0:	4b08      	ldr	r3, [pc, #32]	; (800fc04 <tcp_receive+0x888>)
 800fbe2:	68db      	ldr	r3, [r3, #12]
 800fbe4:	899b      	ldrh	r3, [r3, #12]
 800fbe6:	b29b      	uxth	r3, r3
 800fbe8:	4618      	mov	r0, r3
 800fbea:	f7fb f856 	bl	800ac9a <lwip_htons>
 800fbee:	4603      	mov	r3, r0
 800fbf0:	b2db      	uxtb	r3, r3
 800fbf2:	f003 0303 	and.w	r3, r3, #3
 800fbf6:	2b00      	cmp	r3, #0
 800fbf8:	d00e      	beq.n	800fc18 <tcp_receive+0x89c>
 800fbfa:	2301      	movs	r3, #1
 800fbfc:	e00d      	b.n	800fc1a <tcp_receive+0x89e>
 800fbfe:	bf00      	nop
 800fc00:	20000108 	.word	0x20000108
 800fc04:	200000e8 	.word	0x200000e8
 800fc08:	20000112 	.word	0x20000112
 800fc0c:	08016b74 	.word	0x08016b74
 800fc10:	08016f1c 	.word	0x08016f1c
 800fc14:	08016bc0 	.word	0x08016bc0
 800fc18:	2300      	movs	r3, #0
 800fc1a:	4423      	add	r3, r4
 800fc1c:	b29a      	uxth	r2, r3
 800fc1e:	4b98      	ldr	r3, [pc, #608]	; (800fe80 <tcp_receive+0xb04>)
 800fc20:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800fc22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fc24:	613b      	str	r3, [r7, #16]
              next = next->next;
 800fc26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fc28:	681b      	ldr	r3, [r3, #0]
 800fc2a:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800fc2c:	6938      	ldr	r0, [r7, #16]
 800fc2e:	f7fd fd3a 	bl	800d6a6 <tcp_seg_free>
            while (next &&
 800fc32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fc34:	2b00      	cmp	r3, #0
 800fc36:	d00e      	beq.n	800fc56 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800fc38:	4b91      	ldr	r3, [pc, #580]	; (800fe80 <tcp_receive+0xb04>)
 800fc3a:	881b      	ldrh	r3, [r3, #0]
 800fc3c:	461a      	mov	r2, r3
 800fc3e:	4b91      	ldr	r3, [pc, #580]	; (800fe84 <tcp_receive+0xb08>)
 800fc40:	681b      	ldr	r3, [r3, #0]
 800fc42:	441a      	add	r2, r3
 800fc44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fc46:	68db      	ldr	r3, [r3, #12]
 800fc48:	685b      	ldr	r3, [r3, #4]
 800fc4a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800fc4c:	8909      	ldrh	r1, [r1, #8]
 800fc4e:	440b      	add	r3, r1
 800fc50:	1ad3      	subs	r3, r2, r3
            while (next &&
 800fc52:	2b00      	cmp	r3, #0
 800fc54:	da9a      	bge.n	800fb8c <tcp_receive+0x810>
>>>>>>> Stashed changes
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
<<<<<<< Updated upstream
 800fc86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fc88:	2b00      	cmp	r3, #0
 800fc8a:	d059      	beq.n	800fd40 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800fc8c:	4b88      	ldr	r3, [pc, #544]	; (800feb0 <tcp_receive+0xb04>)
 800fc8e:	881b      	ldrh	r3, [r3, #0]
 800fc90:	461a      	mov	r2, r3
 800fc92:	4b88      	ldr	r3, [pc, #544]	; (800feb4 <tcp_receive+0xb08>)
 800fc94:	681b      	ldr	r3, [r3, #0]
 800fc96:	441a      	add	r2, r3
 800fc98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fc9a:	68db      	ldr	r3, [r3, #12]
 800fc9c:	685b      	ldr	r3, [r3, #4]
 800fc9e:	1ad3      	subs	r3, r2, r3
            if (next &&
 800fca0:	2b00      	cmp	r3, #0
 800fca2:	dd4d      	ble.n	800fd40 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800fca4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fca6:	68db      	ldr	r3, [r3, #12]
 800fca8:	685b      	ldr	r3, [r3, #4]
 800fcaa:	b29a      	uxth	r2, r3
 800fcac:	4b81      	ldr	r3, [pc, #516]	; (800feb4 <tcp_receive+0xb08>)
 800fcae:	681b      	ldr	r3, [r3, #0]
 800fcb0:	b29b      	uxth	r3, r3
 800fcb2:	1ad3      	subs	r3, r2, r3
 800fcb4:	b29a      	uxth	r2, r3
 800fcb6:	4b80      	ldr	r3, [pc, #512]	; (800feb8 <tcp_receive+0xb0c>)
 800fcb8:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800fcba:	4b7f      	ldr	r3, [pc, #508]	; (800feb8 <tcp_receive+0xb0c>)
 800fcbc:	68db      	ldr	r3, [r3, #12]
 800fcbe:	899b      	ldrh	r3, [r3, #12]
 800fcc0:	b29b      	uxth	r3, r3
 800fcc2:	4618      	mov	r0, r3
 800fcc4:	f7fb f801 	bl	800acca <lwip_htons>
 800fcc8:	4603      	mov	r3, r0
 800fcca:	b2db      	uxtb	r3, r3
 800fccc:	f003 0302 	and.w	r3, r3, #2
 800fcd0:	2b00      	cmp	r3, #0
 800fcd2:	d005      	beq.n	800fce0 <tcp_receive+0x934>
                inseg.len -= 1;
 800fcd4:	4b78      	ldr	r3, [pc, #480]	; (800feb8 <tcp_receive+0xb0c>)
 800fcd6:	891b      	ldrh	r3, [r3, #8]
 800fcd8:	3b01      	subs	r3, #1
 800fcda:	b29a      	uxth	r2, r3
 800fcdc:	4b76      	ldr	r3, [pc, #472]	; (800feb8 <tcp_receive+0xb0c>)
 800fcde:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800fce0:	4b75      	ldr	r3, [pc, #468]	; (800feb8 <tcp_receive+0xb0c>)
 800fce2:	685b      	ldr	r3, [r3, #4]
 800fce4:	4a74      	ldr	r2, [pc, #464]	; (800feb8 <tcp_receive+0xb0c>)
 800fce6:	8912      	ldrh	r2, [r2, #8]
 800fce8:	4611      	mov	r1, r2
 800fcea:	4618      	mov	r0, r3
 800fcec:	f7fc f8fa 	bl	800bee4 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800fcf0:	4b71      	ldr	r3, [pc, #452]	; (800feb8 <tcp_receive+0xb0c>)
 800fcf2:	891c      	ldrh	r4, [r3, #8]
 800fcf4:	4b70      	ldr	r3, [pc, #448]	; (800feb8 <tcp_receive+0xb0c>)
 800fcf6:	68db      	ldr	r3, [r3, #12]
 800fcf8:	899b      	ldrh	r3, [r3, #12]
 800fcfa:	b29b      	uxth	r3, r3
 800fcfc:	4618      	mov	r0, r3
 800fcfe:	f7fa ffe4 	bl	800acca <lwip_htons>
 800fd02:	4603      	mov	r3, r0
 800fd04:	b2db      	uxtb	r3, r3
 800fd06:	f003 0303 	and.w	r3, r3, #3
 800fd0a:	2b00      	cmp	r3, #0
 800fd0c:	d001      	beq.n	800fd12 <tcp_receive+0x966>
 800fd0e:	2301      	movs	r3, #1
 800fd10:	e000      	b.n	800fd14 <tcp_receive+0x968>
 800fd12:	2300      	movs	r3, #0
 800fd14:	4423      	add	r3, r4
 800fd16:	b29a      	uxth	r2, r3
 800fd18:	4b65      	ldr	r3, [pc, #404]	; (800feb0 <tcp_receive+0xb04>)
 800fd1a:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800fd1c:	4b64      	ldr	r3, [pc, #400]	; (800feb0 <tcp_receive+0xb04>)
 800fd1e:	881b      	ldrh	r3, [r3, #0]
 800fd20:	461a      	mov	r2, r3
 800fd22:	4b64      	ldr	r3, [pc, #400]	; (800feb4 <tcp_receive+0xb08>)
 800fd24:	681b      	ldr	r3, [r3, #0]
 800fd26:	441a      	add	r2, r3
 800fd28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fd2a:	68db      	ldr	r3, [r3, #12]
 800fd2c:	685b      	ldr	r3, [r3, #4]
 800fd2e:	429a      	cmp	r2, r3
 800fd30:	d006      	beq.n	800fd40 <tcp_receive+0x994>
 800fd32:	4b62      	ldr	r3, [pc, #392]	; (800febc <tcp_receive+0xb10>)
 800fd34:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800fd38:	4961      	ldr	r1, [pc, #388]	; (800fec0 <tcp_receive+0xb14>)
 800fd3a:	4862      	ldr	r0, [pc, #392]	; (800fec4 <tcp_receive+0xb18>)
 800fd3c:	f004 fc22 	bl	8014584 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800fd44:	675a      	str	r2, [r3, #116]	; 0x74
=======
 800fc56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fc58:	2b00      	cmp	r3, #0
 800fc5a:	d059      	beq.n	800fd10 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800fc5c:	4b88      	ldr	r3, [pc, #544]	; (800fe80 <tcp_receive+0xb04>)
 800fc5e:	881b      	ldrh	r3, [r3, #0]
 800fc60:	461a      	mov	r2, r3
 800fc62:	4b88      	ldr	r3, [pc, #544]	; (800fe84 <tcp_receive+0xb08>)
 800fc64:	681b      	ldr	r3, [r3, #0]
 800fc66:	441a      	add	r2, r3
 800fc68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fc6a:	68db      	ldr	r3, [r3, #12]
 800fc6c:	685b      	ldr	r3, [r3, #4]
 800fc6e:	1ad3      	subs	r3, r2, r3
            if (next &&
 800fc70:	2b00      	cmp	r3, #0
 800fc72:	dd4d      	ble.n	800fd10 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800fc74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fc76:	68db      	ldr	r3, [r3, #12]
 800fc78:	685b      	ldr	r3, [r3, #4]
 800fc7a:	b29a      	uxth	r2, r3
 800fc7c:	4b81      	ldr	r3, [pc, #516]	; (800fe84 <tcp_receive+0xb08>)
 800fc7e:	681b      	ldr	r3, [r3, #0]
 800fc80:	b29b      	uxth	r3, r3
 800fc82:	1ad3      	subs	r3, r2, r3
 800fc84:	b29a      	uxth	r2, r3
 800fc86:	4b80      	ldr	r3, [pc, #512]	; (800fe88 <tcp_receive+0xb0c>)
 800fc88:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800fc8a:	4b7f      	ldr	r3, [pc, #508]	; (800fe88 <tcp_receive+0xb0c>)
 800fc8c:	68db      	ldr	r3, [r3, #12]
 800fc8e:	899b      	ldrh	r3, [r3, #12]
 800fc90:	b29b      	uxth	r3, r3
 800fc92:	4618      	mov	r0, r3
 800fc94:	f7fb f801 	bl	800ac9a <lwip_htons>
 800fc98:	4603      	mov	r3, r0
 800fc9a:	b2db      	uxtb	r3, r3
 800fc9c:	f003 0302 	and.w	r3, r3, #2
 800fca0:	2b00      	cmp	r3, #0
 800fca2:	d005      	beq.n	800fcb0 <tcp_receive+0x934>
                inseg.len -= 1;
 800fca4:	4b78      	ldr	r3, [pc, #480]	; (800fe88 <tcp_receive+0xb0c>)
 800fca6:	891b      	ldrh	r3, [r3, #8]
 800fca8:	3b01      	subs	r3, #1
 800fcaa:	b29a      	uxth	r2, r3
 800fcac:	4b76      	ldr	r3, [pc, #472]	; (800fe88 <tcp_receive+0xb0c>)
 800fcae:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800fcb0:	4b75      	ldr	r3, [pc, #468]	; (800fe88 <tcp_receive+0xb0c>)
 800fcb2:	685b      	ldr	r3, [r3, #4]
 800fcb4:	4a74      	ldr	r2, [pc, #464]	; (800fe88 <tcp_receive+0xb0c>)
 800fcb6:	8912      	ldrh	r2, [r2, #8]
 800fcb8:	4611      	mov	r1, r2
 800fcba:	4618      	mov	r0, r3
 800fcbc:	f7fc f8fa 	bl	800beb4 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800fcc0:	4b71      	ldr	r3, [pc, #452]	; (800fe88 <tcp_receive+0xb0c>)
 800fcc2:	891c      	ldrh	r4, [r3, #8]
 800fcc4:	4b70      	ldr	r3, [pc, #448]	; (800fe88 <tcp_receive+0xb0c>)
 800fcc6:	68db      	ldr	r3, [r3, #12]
 800fcc8:	899b      	ldrh	r3, [r3, #12]
 800fcca:	b29b      	uxth	r3, r3
 800fccc:	4618      	mov	r0, r3
 800fcce:	f7fa ffe4 	bl	800ac9a <lwip_htons>
 800fcd2:	4603      	mov	r3, r0
 800fcd4:	b2db      	uxtb	r3, r3
 800fcd6:	f003 0303 	and.w	r3, r3, #3
 800fcda:	2b00      	cmp	r3, #0
 800fcdc:	d001      	beq.n	800fce2 <tcp_receive+0x966>
 800fcde:	2301      	movs	r3, #1
 800fce0:	e000      	b.n	800fce4 <tcp_receive+0x968>
 800fce2:	2300      	movs	r3, #0
 800fce4:	4423      	add	r3, r4
 800fce6:	b29a      	uxth	r2, r3
 800fce8:	4b65      	ldr	r3, [pc, #404]	; (800fe80 <tcp_receive+0xb04>)
 800fcea:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800fcec:	4b64      	ldr	r3, [pc, #400]	; (800fe80 <tcp_receive+0xb04>)
 800fcee:	881b      	ldrh	r3, [r3, #0]
 800fcf0:	461a      	mov	r2, r3
 800fcf2:	4b64      	ldr	r3, [pc, #400]	; (800fe84 <tcp_receive+0xb08>)
 800fcf4:	681b      	ldr	r3, [r3, #0]
 800fcf6:	441a      	add	r2, r3
 800fcf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fcfa:	68db      	ldr	r3, [r3, #12]
 800fcfc:	685b      	ldr	r3, [r3, #4]
 800fcfe:	429a      	cmp	r2, r3
 800fd00:	d006      	beq.n	800fd10 <tcp_receive+0x994>
 800fd02:	4b62      	ldr	r3, [pc, #392]	; (800fe8c <tcp_receive+0xb10>)
 800fd04:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800fd08:	4961      	ldr	r1, [pc, #388]	; (800fe90 <tcp_receive+0xb14>)
 800fd0a:	4862      	ldr	r0, [pc, #392]	; (800fe94 <tcp_receive+0xb18>)
 800fd0c:	f004 fc22 	bl	8014554 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800fd14:	675a      	str	r2, [r3, #116]	; 0x74
>>>>>>> Stashed changes
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
<<<<<<< Updated upstream
 800fd46:	4b5a      	ldr	r3, [pc, #360]	; (800feb0 <tcp_receive+0xb04>)
 800fd48:	881b      	ldrh	r3, [r3, #0]
 800fd4a:	461a      	mov	r2, r3
 800fd4c:	4b59      	ldr	r3, [pc, #356]	; (800feb4 <tcp_receive+0xb08>)
 800fd4e:	681b      	ldr	r3, [r3, #0]
 800fd50:	441a      	add	r2, r3
 800fd52:	687b      	ldr	r3, [r7, #4]
 800fd54:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800fd5a:	4b55      	ldr	r3, [pc, #340]	; (800feb0 <tcp_receive+0xb04>)
 800fd5c:	881b      	ldrh	r3, [r3, #0]
 800fd5e:	429a      	cmp	r2, r3
 800fd60:	d206      	bcs.n	800fd70 <tcp_receive+0x9c4>
 800fd62:	4b56      	ldr	r3, [pc, #344]	; (800febc <tcp_receive+0xb10>)
 800fd64:	f240 6207 	movw	r2, #1543	; 0x607
 800fd68:	4957      	ldr	r1, [pc, #348]	; (800fec8 <tcp_receive+0xb1c>)
 800fd6a:	4856      	ldr	r0, [pc, #344]	; (800fec4 <tcp_receive+0xb18>)
 800fd6c:	f004 fc0a 	bl	8014584 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800fd74:	4b4e      	ldr	r3, [pc, #312]	; (800feb0 <tcp_receive+0xb04>)
 800fd76:	881b      	ldrh	r3, [r3, #0]
 800fd78:	1ad3      	subs	r3, r2, r3
 800fd7a:	b29a      	uxth	r2, r3
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800fd80:	6878      	ldr	r0, [r7, #4]
 800fd82:	f7fc ffc9 	bl	800cd18 <tcp_update_rcv_ann_wnd>
=======
 800fd16:	4b5a      	ldr	r3, [pc, #360]	; (800fe80 <tcp_receive+0xb04>)
 800fd18:	881b      	ldrh	r3, [r3, #0]
 800fd1a:	461a      	mov	r2, r3
 800fd1c:	4b59      	ldr	r3, [pc, #356]	; (800fe84 <tcp_receive+0xb08>)
 800fd1e:	681b      	ldr	r3, [r3, #0]
 800fd20:	441a      	add	r2, r3
 800fd22:	687b      	ldr	r3, [r7, #4]
 800fd24:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800fd26:	687b      	ldr	r3, [r7, #4]
 800fd28:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800fd2a:	4b55      	ldr	r3, [pc, #340]	; (800fe80 <tcp_receive+0xb04>)
 800fd2c:	881b      	ldrh	r3, [r3, #0]
 800fd2e:	429a      	cmp	r2, r3
 800fd30:	d206      	bcs.n	800fd40 <tcp_receive+0x9c4>
 800fd32:	4b56      	ldr	r3, [pc, #344]	; (800fe8c <tcp_receive+0xb10>)
 800fd34:	f240 6207 	movw	r2, #1543	; 0x607
 800fd38:	4957      	ldr	r1, [pc, #348]	; (800fe98 <tcp_receive+0xb1c>)
 800fd3a:	4856      	ldr	r0, [pc, #344]	; (800fe94 <tcp_receive+0xb18>)
 800fd3c:	f004 fc0a 	bl	8014554 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800fd44:	4b4e      	ldr	r3, [pc, #312]	; (800fe80 <tcp_receive+0xb04>)
 800fd46:	881b      	ldrh	r3, [r3, #0]
 800fd48:	1ad3      	subs	r3, r2, r3
 800fd4a:	b29a      	uxth	r2, r3
 800fd4c:	687b      	ldr	r3, [r7, #4]
 800fd4e:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800fd50:	6878      	ldr	r0, [r7, #4]
 800fd52:	f7fc ffc9 	bl	800cce8 <tcp_update_rcv_ann_wnd>
>>>>>>> Stashed changes
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
<<<<<<< Updated upstream
 800fd86:	4b4c      	ldr	r3, [pc, #304]	; (800feb8 <tcp_receive+0xb0c>)
 800fd88:	685b      	ldr	r3, [r3, #4]
 800fd8a:	891b      	ldrh	r3, [r3, #8]
 800fd8c:	2b00      	cmp	r3, #0
 800fd8e:	d006      	beq.n	800fd9e <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800fd90:	4b49      	ldr	r3, [pc, #292]	; (800feb8 <tcp_receive+0xb0c>)
 800fd92:	685b      	ldr	r3, [r3, #4]
 800fd94:	4a4d      	ldr	r2, [pc, #308]	; (800fecc <tcp_receive+0xb20>)
 800fd96:	6013      	str	r3, [r2, #0]
=======
 800fd56:	4b4c      	ldr	r3, [pc, #304]	; (800fe88 <tcp_receive+0xb0c>)
 800fd58:	685b      	ldr	r3, [r3, #4]
 800fd5a:	891b      	ldrh	r3, [r3, #8]
 800fd5c:	2b00      	cmp	r3, #0
 800fd5e:	d006      	beq.n	800fd6e <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800fd60:	4b49      	ldr	r3, [pc, #292]	; (800fe88 <tcp_receive+0xb0c>)
 800fd62:	685b      	ldr	r3, [r3, #4]
 800fd64:	4a4d      	ldr	r2, [pc, #308]	; (800fe9c <tcp_receive+0xb20>)
 800fd66:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
<<<<<<< Updated upstream
 800fd98:	4b47      	ldr	r3, [pc, #284]	; (800feb8 <tcp_receive+0xb0c>)
 800fd9a:	2200      	movs	r2, #0
 800fd9c:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800fd9e:	4b46      	ldr	r3, [pc, #280]	; (800feb8 <tcp_receive+0xb0c>)
 800fda0:	68db      	ldr	r3, [r3, #12]
 800fda2:	899b      	ldrh	r3, [r3, #12]
 800fda4:	b29b      	uxth	r3, r3
 800fda6:	4618      	mov	r0, r3
 800fda8:	f7fa ff8f 	bl	800acca <lwip_htons>
 800fdac:	4603      	mov	r3, r0
 800fdae:	b2db      	uxtb	r3, r3
 800fdb0:	f003 0301 	and.w	r3, r3, #1
 800fdb4:	2b00      	cmp	r3, #0
 800fdb6:	f000 80b8 	beq.w	800ff2a <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800fdba:	4b45      	ldr	r3, [pc, #276]	; (800fed0 <tcp_receive+0xb24>)
 800fdbc:	781b      	ldrb	r3, [r3, #0]
 800fdbe:	f043 0320 	orr.w	r3, r3, #32
 800fdc2:	b2da      	uxtb	r2, r3
 800fdc4:	4b42      	ldr	r3, [pc, #264]	; (800fed0 <tcp_receive+0xb24>)
 800fdc6:	701a      	strb	r2, [r3, #0]
=======
 800fd68:	4b47      	ldr	r3, [pc, #284]	; (800fe88 <tcp_receive+0xb0c>)
 800fd6a:	2200      	movs	r2, #0
 800fd6c:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800fd6e:	4b46      	ldr	r3, [pc, #280]	; (800fe88 <tcp_receive+0xb0c>)
 800fd70:	68db      	ldr	r3, [r3, #12]
 800fd72:	899b      	ldrh	r3, [r3, #12]
 800fd74:	b29b      	uxth	r3, r3
 800fd76:	4618      	mov	r0, r3
 800fd78:	f7fa ff8f 	bl	800ac9a <lwip_htons>
 800fd7c:	4603      	mov	r3, r0
 800fd7e:	b2db      	uxtb	r3, r3
 800fd80:	f003 0301 	and.w	r3, r3, #1
 800fd84:	2b00      	cmp	r3, #0
 800fd86:	f000 80b8 	beq.w	800fefa <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800fd8a:	4b45      	ldr	r3, [pc, #276]	; (800fea0 <tcp_receive+0xb24>)
 800fd8c:	781b      	ldrb	r3, [r3, #0]
 800fd8e:	f043 0320 	orr.w	r3, r3, #32
 800fd92:	b2da      	uxtb	r2, r3
 800fd94:	4b42      	ldr	r3, [pc, #264]	; (800fea0 <tcp_receive+0xb24>)
 800fd96:	701a      	strb	r2, [r3, #0]
>>>>>>> Stashed changes
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
<<<<<<< Updated upstream
 800fdc8:	e0af      	b.n	800ff2a <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800fdca:	687b      	ldr	r3, [r7, #4]
 800fdcc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fdce:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fdd4:	68db      	ldr	r3, [r3, #12]
 800fdd6:	685b      	ldr	r3, [r3, #4]
 800fdd8:	4a36      	ldr	r2, [pc, #216]	; (800feb4 <tcp_receive+0xb08>)
 800fdda:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800fddc:	68bb      	ldr	r3, [r7, #8]
 800fdde:	891b      	ldrh	r3, [r3, #8]
 800fde0:	461c      	mov	r4, r3
 800fde2:	68bb      	ldr	r3, [r7, #8]
 800fde4:	68db      	ldr	r3, [r3, #12]
 800fde6:	899b      	ldrh	r3, [r3, #12]
 800fde8:	b29b      	uxth	r3, r3
 800fdea:	4618      	mov	r0, r3
 800fdec:	f7fa ff6d 	bl	800acca <lwip_htons>
 800fdf0:	4603      	mov	r3, r0
 800fdf2:	b2db      	uxtb	r3, r3
 800fdf4:	f003 0303 	and.w	r3, r3, #3
 800fdf8:	2b00      	cmp	r3, #0
 800fdfa:	d001      	beq.n	800fe00 <tcp_receive+0xa54>
 800fdfc:	2301      	movs	r3, #1
 800fdfe:	e000      	b.n	800fe02 <tcp_receive+0xa56>
 800fe00:	2300      	movs	r3, #0
 800fe02:	191a      	adds	r2, r3, r4
 800fe04:	687b      	ldr	r3, [r7, #4]
 800fe06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe08:	441a      	add	r2, r3
 800fe0a:	687b      	ldr	r3, [r7, #4]
 800fe0c:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fe12:	461c      	mov	r4, r3
 800fe14:	68bb      	ldr	r3, [r7, #8]
 800fe16:	891b      	ldrh	r3, [r3, #8]
 800fe18:	461d      	mov	r5, r3
 800fe1a:	68bb      	ldr	r3, [r7, #8]
 800fe1c:	68db      	ldr	r3, [r3, #12]
 800fe1e:	899b      	ldrh	r3, [r3, #12]
 800fe20:	b29b      	uxth	r3, r3
 800fe22:	4618      	mov	r0, r3
 800fe24:	f7fa ff51 	bl	800acca <lwip_htons>
 800fe28:	4603      	mov	r3, r0
 800fe2a:	b2db      	uxtb	r3, r3
 800fe2c:	f003 0303 	and.w	r3, r3, #3
 800fe30:	2b00      	cmp	r3, #0
 800fe32:	d001      	beq.n	800fe38 <tcp_receive+0xa8c>
 800fe34:	2301      	movs	r3, #1
 800fe36:	e000      	b.n	800fe3a <tcp_receive+0xa8e>
 800fe38:	2300      	movs	r3, #0
 800fe3a:	442b      	add	r3, r5
 800fe3c:	429c      	cmp	r4, r3
 800fe3e:	d206      	bcs.n	800fe4e <tcp_receive+0xaa2>
 800fe40:	4b1e      	ldr	r3, [pc, #120]	; (800febc <tcp_receive+0xb10>)
 800fe42:	f240 622b 	movw	r2, #1579	; 0x62b
 800fe46:	4923      	ldr	r1, [pc, #140]	; (800fed4 <tcp_receive+0xb28>)
 800fe48:	481e      	ldr	r0, [pc, #120]	; (800fec4 <tcp_receive+0xb18>)
 800fe4a:	f004 fb9b 	bl	8014584 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800fe4e:	68bb      	ldr	r3, [r7, #8]
 800fe50:	891b      	ldrh	r3, [r3, #8]
 800fe52:	461c      	mov	r4, r3
 800fe54:	68bb      	ldr	r3, [r7, #8]
 800fe56:	68db      	ldr	r3, [r3, #12]
 800fe58:	899b      	ldrh	r3, [r3, #12]
 800fe5a:	b29b      	uxth	r3, r3
 800fe5c:	4618      	mov	r0, r3
 800fe5e:	f7fa ff34 	bl	800acca <lwip_htons>
 800fe62:	4603      	mov	r3, r0
 800fe64:	b2db      	uxtb	r3, r3
 800fe66:	f003 0303 	and.w	r3, r3, #3
 800fe6a:	2b00      	cmp	r3, #0
 800fe6c:	d001      	beq.n	800fe72 <tcp_receive+0xac6>
 800fe6e:	2301      	movs	r3, #1
 800fe70:	e000      	b.n	800fe74 <tcp_receive+0xac8>
 800fe72:	2300      	movs	r3, #0
 800fe74:	1919      	adds	r1, r3, r4
 800fe76:	687b      	ldr	r3, [r7, #4]
 800fe78:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800fe7a:	b28b      	uxth	r3, r1
 800fe7c:	1ad3      	subs	r3, r2, r3
 800fe7e:	b29a      	uxth	r2, r3
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800fe84:	6878      	ldr	r0, [r7, #4]
 800fe86:	f7fc ff47 	bl	800cd18 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800fe8a:	68bb      	ldr	r3, [r7, #8]
 800fe8c:	685b      	ldr	r3, [r3, #4]
 800fe8e:	891b      	ldrh	r3, [r3, #8]
 800fe90:	2b00      	cmp	r3, #0
 800fe92:	d028      	beq.n	800fee6 <tcp_receive+0xb3a>
=======
 800fd98:	e0af      	b.n	800fefa <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800fd9a:	687b      	ldr	r3, [r7, #4]
 800fd9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fd9e:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fda4:	68db      	ldr	r3, [r3, #12]
 800fda6:	685b      	ldr	r3, [r3, #4]
 800fda8:	4a36      	ldr	r2, [pc, #216]	; (800fe84 <tcp_receive+0xb08>)
 800fdaa:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800fdac:	68bb      	ldr	r3, [r7, #8]
 800fdae:	891b      	ldrh	r3, [r3, #8]
 800fdb0:	461c      	mov	r4, r3
 800fdb2:	68bb      	ldr	r3, [r7, #8]
 800fdb4:	68db      	ldr	r3, [r3, #12]
 800fdb6:	899b      	ldrh	r3, [r3, #12]
 800fdb8:	b29b      	uxth	r3, r3
 800fdba:	4618      	mov	r0, r3
 800fdbc:	f7fa ff6d 	bl	800ac9a <lwip_htons>
 800fdc0:	4603      	mov	r3, r0
 800fdc2:	b2db      	uxtb	r3, r3
 800fdc4:	f003 0303 	and.w	r3, r3, #3
 800fdc8:	2b00      	cmp	r3, #0
 800fdca:	d001      	beq.n	800fdd0 <tcp_receive+0xa54>
 800fdcc:	2301      	movs	r3, #1
 800fdce:	e000      	b.n	800fdd2 <tcp_receive+0xa56>
 800fdd0:	2300      	movs	r3, #0
 800fdd2:	191a      	adds	r2, r3, r4
 800fdd4:	687b      	ldr	r3, [r7, #4]
 800fdd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fdd8:	441a      	add	r2, r3
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fde2:	461c      	mov	r4, r3
 800fde4:	68bb      	ldr	r3, [r7, #8]
 800fde6:	891b      	ldrh	r3, [r3, #8]
 800fde8:	461d      	mov	r5, r3
 800fdea:	68bb      	ldr	r3, [r7, #8]
 800fdec:	68db      	ldr	r3, [r3, #12]
 800fdee:	899b      	ldrh	r3, [r3, #12]
 800fdf0:	b29b      	uxth	r3, r3
 800fdf2:	4618      	mov	r0, r3
 800fdf4:	f7fa ff51 	bl	800ac9a <lwip_htons>
 800fdf8:	4603      	mov	r3, r0
 800fdfa:	b2db      	uxtb	r3, r3
 800fdfc:	f003 0303 	and.w	r3, r3, #3
 800fe00:	2b00      	cmp	r3, #0
 800fe02:	d001      	beq.n	800fe08 <tcp_receive+0xa8c>
 800fe04:	2301      	movs	r3, #1
 800fe06:	e000      	b.n	800fe0a <tcp_receive+0xa8e>
 800fe08:	2300      	movs	r3, #0
 800fe0a:	442b      	add	r3, r5
 800fe0c:	429c      	cmp	r4, r3
 800fe0e:	d206      	bcs.n	800fe1e <tcp_receive+0xaa2>
 800fe10:	4b1e      	ldr	r3, [pc, #120]	; (800fe8c <tcp_receive+0xb10>)
 800fe12:	f240 622b 	movw	r2, #1579	; 0x62b
 800fe16:	4923      	ldr	r1, [pc, #140]	; (800fea4 <tcp_receive+0xb28>)
 800fe18:	481e      	ldr	r0, [pc, #120]	; (800fe94 <tcp_receive+0xb18>)
 800fe1a:	f004 fb9b 	bl	8014554 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800fe1e:	68bb      	ldr	r3, [r7, #8]
 800fe20:	891b      	ldrh	r3, [r3, #8]
 800fe22:	461c      	mov	r4, r3
 800fe24:	68bb      	ldr	r3, [r7, #8]
 800fe26:	68db      	ldr	r3, [r3, #12]
 800fe28:	899b      	ldrh	r3, [r3, #12]
 800fe2a:	b29b      	uxth	r3, r3
 800fe2c:	4618      	mov	r0, r3
 800fe2e:	f7fa ff34 	bl	800ac9a <lwip_htons>
 800fe32:	4603      	mov	r3, r0
 800fe34:	b2db      	uxtb	r3, r3
 800fe36:	f003 0303 	and.w	r3, r3, #3
 800fe3a:	2b00      	cmp	r3, #0
 800fe3c:	d001      	beq.n	800fe42 <tcp_receive+0xac6>
 800fe3e:	2301      	movs	r3, #1
 800fe40:	e000      	b.n	800fe44 <tcp_receive+0xac8>
 800fe42:	2300      	movs	r3, #0
 800fe44:	1919      	adds	r1, r3, r4
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800fe4a:	b28b      	uxth	r3, r1
 800fe4c:	1ad3      	subs	r3, r2, r3
 800fe4e:	b29a      	uxth	r2, r3
 800fe50:	687b      	ldr	r3, [r7, #4]
 800fe52:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800fe54:	6878      	ldr	r0, [r7, #4]
 800fe56:	f7fc ff47 	bl	800cce8 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800fe5a:	68bb      	ldr	r3, [r7, #8]
 800fe5c:	685b      	ldr	r3, [r3, #4]
 800fe5e:	891b      	ldrh	r3, [r3, #8]
 800fe60:	2b00      	cmp	r3, #0
 800fe62:	d028      	beq.n	800feb6 <tcp_receive+0xb3a>
>>>>>>> Stashed changes
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
<<<<<<< Updated upstream
 800fe94:	4b0d      	ldr	r3, [pc, #52]	; (800fecc <tcp_receive+0xb20>)
 800fe96:	681b      	ldr	r3, [r3, #0]
 800fe98:	2b00      	cmp	r3, #0
 800fe9a:	d01d      	beq.n	800fed8 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800fe9c:	4b0b      	ldr	r3, [pc, #44]	; (800fecc <tcp_receive+0xb20>)
 800fe9e:	681a      	ldr	r2, [r3, #0]
 800fea0:	68bb      	ldr	r3, [r7, #8]
 800fea2:	685b      	ldr	r3, [r3, #4]
 800fea4:	4619      	mov	r1, r3
 800fea6:	4610      	mov	r0, r2
 800fea8:	f7fc fa64 	bl	800c374 <pbuf_cat>
 800feac:	e018      	b.n	800fee0 <tcp_receive+0xb34>
 800feae:	bf00      	nop
 800feb0:	20000112 	.word	0x20000112
 800feb4:	20000108 	.word	0x20000108
 800feb8:	200000e8 	.word	0x200000e8
 800febc:	08016b90 	.word	0x08016b90
 800fec0:	08016f70 	.word	0x08016f70
 800fec4:	08016bdc 	.word	0x08016bdc
 800fec8:	08016fac 	.word	0x08016fac
 800fecc:	20000118 	.word	0x20000118
 800fed0:	20000115 	.word	0x20000115
 800fed4:	08016fcc 	.word	0x08016fcc
            } else {
              recv_data = cseg->p;
 800fed8:	68bb      	ldr	r3, [r7, #8]
 800feda:	685b      	ldr	r3, [r3, #4]
 800fedc:	4a70      	ldr	r2, [pc, #448]	; (80100a0 <tcp_receive+0xcf4>)
 800fede:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800fee0:	68bb      	ldr	r3, [r7, #8]
 800fee2:	2200      	movs	r2, #0
 800fee4:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800fee6:	68bb      	ldr	r3, [r7, #8]
 800fee8:	68db      	ldr	r3, [r3, #12]
 800feea:	899b      	ldrh	r3, [r3, #12]
 800feec:	b29b      	uxth	r3, r3
 800feee:	4618      	mov	r0, r3
 800fef0:	f7fa feeb 	bl	800acca <lwip_htons>
 800fef4:	4603      	mov	r3, r0
 800fef6:	b2db      	uxtb	r3, r3
 800fef8:	f003 0301 	and.w	r3, r3, #1
 800fefc:	2b00      	cmp	r3, #0
 800fefe:	d00d      	beq.n	800ff1c <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800ff00:	4b68      	ldr	r3, [pc, #416]	; (80100a4 <tcp_receive+0xcf8>)
 800ff02:	781b      	ldrb	r3, [r3, #0]
 800ff04:	f043 0320 	orr.w	r3, r3, #32
 800ff08:	b2da      	uxtb	r2, r3
 800ff0a:	4b66      	ldr	r3, [pc, #408]	; (80100a4 <tcp_receive+0xcf8>)
 800ff0c:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	7d1b      	ldrb	r3, [r3, #20]
 800ff12:	2b04      	cmp	r3, #4
 800ff14:	d102      	bne.n	800ff1c <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	2207      	movs	r2, #7
 800ff1a:	751a      	strb	r2, [r3, #20]
=======
 800fe64:	4b0d      	ldr	r3, [pc, #52]	; (800fe9c <tcp_receive+0xb20>)
 800fe66:	681b      	ldr	r3, [r3, #0]
 800fe68:	2b00      	cmp	r3, #0
 800fe6a:	d01d      	beq.n	800fea8 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800fe6c:	4b0b      	ldr	r3, [pc, #44]	; (800fe9c <tcp_receive+0xb20>)
 800fe6e:	681a      	ldr	r2, [r3, #0]
 800fe70:	68bb      	ldr	r3, [r7, #8]
 800fe72:	685b      	ldr	r3, [r3, #4]
 800fe74:	4619      	mov	r1, r3
 800fe76:	4610      	mov	r0, r2
 800fe78:	f7fc fa64 	bl	800c344 <pbuf_cat>
 800fe7c:	e018      	b.n	800feb0 <tcp_receive+0xb34>
 800fe7e:	bf00      	nop
 800fe80:	20000112 	.word	0x20000112
 800fe84:	20000108 	.word	0x20000108
 800fe88:	200000e8 	.word	0x200000e8
 800fe8c:	08016b74 	.word	0x08016b74
 800fe90:	08016f54 	.word	0x08016f54
 800fe94:	08016bc0 	.word	0x08016bc0
 800fe98:	08016f90 	.word	0x08016f90
 800fe9c:	20000118 	.word	0x20000118
 800fea0:	20000115 	.word	0x20000115
 800fea4:	08016fb0 	.word	0x08016fb0
            } else {
              recv_data = cseg->p;
 800fea8:	68bb      	ldr	r3, [r7, #8]
 800feaa:	685b      	ldr	r3, [r3, #4]
 800feac:	4a70      	ldr	r2, [pc, #448]	; (8010070 <tcp_receive+0xcf4>)
 800feae:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800feb0:	68bb      	ldr	r3, [r7, #8]
 800feb2:	2200      	movs	r2, #0
 800feb4:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800feb6:	68bb      	ldr	r3, [r7, #8]
 800feb8:	68db      	ldr	r3, [r3, #12]
 800feba:	899b      	ldrh	r3, [r3, #12]
 800febc:	b29b      	uxth	r3, r3
 800febe:	4618      	mov	r0, r3
 800fec0:	f7fa feeb 	bl	800ac9a <lwip_htons>
 800fec4:	4603      	mov	r3, r0
 800fec6:	b2db      	uxtb	r3, r3
 800fec8:	f003 0301 	and.w	r3, r3, #1
 800fecc:	2b00      	cmp	r3, #0
 800fece:	d00d      	beq.n	800feec <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800fed0:	4b68      	ldr	r3, [pc, #416]	; (8010074 <tcp_receive+0xcf8>)
 800fed2:	781b      	ldrb	r3, [r3, #0]
 800fed4:	f043 0320 	orr.w	r3, r3, #32
 800fed8:	b2da      	uxtb	r2, r3
 800feda:	4b66      	ldr	r3, [pc, #408]	; (8010074 <tcp_receive+0xcf8>)
 800fedc:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	7d1b      	ldrb	r3, [r3, #20]
 800fee2:	2b04      	cmp	r3, #4
 800fee4:	d102      	bne.n	800feec <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800fee6:	687b      	ldr	r3, [r7, #4]
 800fee8:	2207      	movs	r2, #7
 800feea:	751a      	strb	r2, [r3, #20]
>>>>>>> Stashed changes
            }
          }

          pcb->ooseq = cseg->next;
<<<<<<< Updated upstream
 800ff1c:	68bb      	ldr	r3, [r7, #8]
 800ff1e:	681a      	ldr	r2, [r3, #0]
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800ff24:	68b8      	ldr	r0, [r7, #8]
 800ff26:	f7fd fbd6 	bl	800d6d6 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ff2e:	2b00      	cmp	r3, #0
 800ff30:	d008      	beq.n	800ff44 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800ff32:	687b      	ldr	r3, [r7, #4]
 800ff34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ff36:	68db      	ldr	r3, [r3, #12]
 800ff38:	685a      	ldr	r2, [r3, #4]
 800ff3a:	687b      	ldr	r3, [r7, #4]
 800ff3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800ff3e:	429a      	cmp	r2, r3
 800ff40:	f43f af43 	beq.w	800fdca <tcp_receive+0xa1e>
=======
 800feec:	68bb      	ldr	r3, [r7, #8]
 800feee:	681a      	ldr	r2, [r3, #0]
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800fef4:	68b8      	ldr	r0, [r7, #8]
 800fef6:	f7fd fbd6 	bl	800d6a6 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fefe:	2b00      	cmp	r3, #0
 800ff00:	d008      	beq.n	800ff14 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ff06:	68db      	ldr	r3, [r3, #12]
 800ff08:	685a      	ldr	r2, [r3, #4]
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800ff0e:	429a      	cmp	r2, r3
 800ff10:	f43f af43 	beq.w	800fd9a <tcp_receive+0xa1e>
>>>>>>> Stashed changes
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
<<<<<<< Updated upstream
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	8b5b      	ldrh	r3, [r3, #26]
 800ff48:	f003 0301 	and.w	r3, r3, #1
 800ff4c:	2b00      	cmp	r3, #0
 800ff4e:	d00e      	beq.n	800ff6e <tcp_receive+0xbc2>
 800ff50:	687b      	ldr	r3, [r7, #4]
 800ff52:	8b5b      	ldrh	r3, [r3, #26]
 800ff54:	f023 0301 	bic.w	r3, r3, #1
 800ff58:	b29a      	uxth	r2, r3
 800ff5a:	687b      	ldr	r3, [r7, #4]
 800ff5c:	835a      	strh	r2, [r3, #26]
 800ff5e:	687b      	ldr	r3, [r7, #4]
 800ff60:	8b5b      	ldrh	r3, [r3, #26]
 800ff62:	f043 0302 	orr.w	r3, r3, #2
 800ff66:	b29a      	uxth	r2, r3
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800ff6c:	e188      	b.n	8010280 <tcp_receive+0xed4>
        tcp_ack(pcb);
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	8b5b      	ldrh	r3, [r3, #26]
 800ff72:	f043 0301 	orr.w	r3, r3, #1
 800ff76:	b29a      	uxth	r2, r3
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800ff7c:	e180      	b.n	8010280 <tcp_receive+0xed4>
=======
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	8b5b      	ldrh	r3, [r3, #26]
 800ff18:	f003 0301 	and.w	r3, r3, #1
 800ff1c:	2b00      	cmp	r3, #0
 800ff1e:	d00e      	beq.n	800ff3e <tcp_receive+0xbc2>
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	8b5b      	ldrh	r3, [r3, #26]
 800ff24:	f023 0301 	bic.w	r3, r3, #1
 800ff28:	b29a      	uxth	r2, r3
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	835a      	strh	r2, [r3, #26]
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	8b5b      	ldrh	r3, [r3, #26]
 800ff32:	f043 0302 	orr.w	r3, r3, #2
 800ff36:	b29a      	uxth	r2, r3
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800ff3c:	e188      	b.n	8010250 <tcp_receive+0xed4>
        tcp_ack(pcb);
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	8b5b      	ldrh	r3, [r3, #26]
 800ff42:	f043 0301 	orr.w	r3, r3, #1
 800ff46:	b29a      	uxth	r2, r3
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800ff4c:	e180      	b.n	8010250 <tcp_receive+0xed4>
>>>>>>> Stashed changes
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
<<<<<<< Updated upstream
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ff82:	2b00      	cmp	r3, #0
 800ff84:	d106      	bne.n	800ff94 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800ff86:	4848      	ldr	r0, [pc, #288]	; (80100a8 <tcp_receive+0xcfc>)
 800ff88:	f7fd fbbe 	bl	800d708 <tcp_seg_copy>
 800ff8c:	4602      	mov	r2, r0
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	675a      	str	r2, [r3, #116]	; 0x74
 800ff92:	e16d      	b.n	8010270 <tcp_receive+0xec4>
=======
 800ff4e:	687b      	ldr	r3, [r7, #4]
 800ff50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ff52:	2b00      	cmp	r3, #0
 800ff54:	d106      	bne.n	800ff64 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800ff56:	4848      	ldr	r0, [pc, #288]	; (8010078 <tcp_receive+0xcfc>)
 800ff58:	f7fd fbbe 	bl	800d6d8 <tcp_seg_copy>
 800ff5c:	4602      	mov	r2, r0
 800ff5e:	687b      	ldr	r3, [r7, #4]
 800ff60:	675a      	str	r2, [r3, #116]	; 0x74
 800ff62:	e16d      	b.n	8010240 <tcp_receive+0xec4>
>>>>>>> Stashed changes
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
<<<<<<< Updated upstream
 800ff94:	2300      	movs	r3, #0
 800ff96:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800ff98:	687b      	ldr	r3, [r7, #4]
 800ff9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ff9c:	63bb      	str	r3, [r7, #56]	; 0x38
 800ff9e:	e157      	b.n	8010250 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 800ffa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffa2:	68db      	ldr	r3, [r3, #12]
 800ffa4:	685a      	ldr	r2, [r3, #4]
 800ffa6:	4b41      	ldr	r3, [pc, #260]	; (80100ac <tcp_receive+0xd00>)
 800ffa8:	681b      	ldr	r3, [r3, #0]
 800ffaa:	429a      	cmp	r2, r3
 800ffac:	d11d      	bne.n	800ffea <tcp_receive+0xc3e>
=======
 800ff64:	2300      	movs	r3, #0
 800ff66:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ff6c:	63bb      	str	r3, [r7, #56]	; 0x38
 800ff6e:	e157      	b.n	8010220 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 800ff70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff72:	68db      	ldr	r3, [r3, #12]
 800ff74:	685a      	ldr	r2, [r3, #4]
 800ff76:	4b41      	ldr	r3, [pc, #260]	; (801007c <tcp_receive+0xd00>)
 800ff78:	681b      	ldr	r3, [r3, #0]
 800ff7a:	429a      	cmp	r2, r3
 800ff7c:	d11d      	bne.n	800ffba <tcp_receive+0xc3e>
>>>>>>> Stashed changes
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
<<<<<<< Updated upstream
 800ffae:	4b3e      	ldr	r3, [pc, #248]	; (80100a8 <tcp_receive+0xcfc>)
 800ffb0:	891a      	ldrh	r2, [r3, #8]
 800ffb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffb4:	891b      	ldrh	r3, [r3, #8]
 800ffb6:	429a      	cmp	r2, r3
 800ffb8:	f240 814f 	bls.w	801025a <tcp_receive+0xeae>
=======
 800ff7e:	4b3e      	ldr	r3, [pc, #248]	; (8010078 <tcp_receive+0xcfc>)
 800ff80:	891a      	ldrh	r2, [r3, #8]
 800ff82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff84:	891b      	ldrh	r3, [r3, #8]
 800ff86:	429a      	cmp	r2, r3
 800ff88:	f240 814f 	bls.w	801022a <tcp_receive+0xeae>
>>>>>>> Stashed changes
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
<<<<<<< Updated upstream
 800ffbc:	483a      	ldr	r0, [pc, #232]	; (80100a8 <tcp_receive+0xcfc>)
 800ffbe:	f7fd fba3 	bl	800d708 <tcp_seg_copy>
 800ffc2:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800ffc4:	697b      	ldr	r3, [r7, #20]
 800ffc6:	2b00      	cmp	r3, #0
 800ffc8:	f000 8149 	beq.w	801025e <tcp_receive+0xeb2>
                  if (prev != NULL) {
 800ffcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ffce:	2b00      	cmp	r3, #0
 800ffd0:	d003      	beq.n	800ffda <tcp_receive+0xc2e>
                    prev->next = cseg;
 800ffd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ffd4:	697a      	ldr	r2, [r7, #20]
 800ffd6:	601a      	str	r2, [r3, #0]
 800ffd8:	e002      	b.n	800ffe0 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800ffda:	687b      	ldr	r3, [r7, #4]
 800ffdc:	697a      	ldr	r2, [r7, #20]
 800ffde:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800ffe0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ffe2:	6978      	ldr	r0, [r7, #20]
 800ffe4:	f7ff f8de 	bl	800f1a4 <tcp_oos_insert_segment>
                }
                break;
 800ffe8:	e139      	b.n	801025e <tcp_receive+0xeb2>
=======
 800ff8c:	483a      	ldr	r0, [pc, #232]	; (8010078 <tcp_receive+0xcfc>)
 800ff8e:	f7fd fba3 	bl	800d6d8 <tcp_seg_copy>
 800ff92:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800ff94:	697b      	ldr	r3, [r7, #20]
 800ff96:	2b00      	cmp	r3, #0
 800ff98:	f000 8149 	beq.w	801022e <tcp_receive+0xeb2>
                  if (prev != NULL) {
 800ff9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ff9e:	2b00      	cmp	r3, #0
 800ffa0:	d003      	beq.n	800ffaa <tcp_receive+0xc2e>
                    prev->next = cseg;
 800ffa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ffa4:	697a      	ldr	r2, [r7, #20]
 800ffa6:	601a      	str	r2, [r3, #0]
 800ffa8:	e002      	b.n	800ffb0 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	697a      	ldr	r2, [r7, #20]
 800ffae:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800ffb0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ffb2:	6978      	ldr	r0, [r7, #20]
 800ffb4:	f7ff f8de 	bl	800f174 <tcp_oos_insert_segment>
                }
                break;
 800ffb8:	e139      	b.n	801022e <tcp_receive+0xeb2>
>>>>>>> Stashed changes
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
<<<<<<< Updated upstream
 800ffea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ffec:	2b00      	cmp	r3, #0
 800ffee:	d117      	bne.n	8010020 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800fff0:	4b2e      	ldr	r3, [pc, #184]	; (80100ac <tcp_receive+0xd00>)
 800fff2:	681a      	ldr	r2, [r3, #0]
 800fff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fff6:	68db      	ldr	r3, [r3, #12]
 800fff8:	685b      	ldr	r3, [r3, #4]
 800fffa:	1ad3      	subs	r3, r2, r3
 800fffc:	2b00      	cmp	r3, #0
 800fffe:	da57      	bge.n	80100b0 <tcp_receive+0xd04>
=======
 800ffba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ffbc:	2b00      	cmp	r3, #0
 800ffbe:	d117      	bne.n	800fff0 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800ffc0:	4b2e      	ldr	r3, [pc, #184]	; (801007c <tcp_receive+0xd00>)
 800ffc2:	681a      	ldr	r2, [r3, #0]
 800ffc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffc6:	68db      	ldr	r3, [r3, #12]
 800ffc8:	685b      	ldr	r3, [r3, #4]
 800ffca:	1ad3      	subs	r3, r2, r3
 800ffcc:	2b00      	cmp	r3, #0
 800ffce:	da57      	bge.n	8010080 <tcp_receive+0xd04>
>>>>>>> Stashed changes
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
<<<<<<< Updated upstream
 8010000:	4829      	ldr	r0, [pc, #164]	; (80100a8 <tcp_receive+0xcfc>)
 8010002:	f7fd fb81 	bl	800d708 <tcp_seg_copy>
 8010006:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8010008:	69bb      	ldr	r3, [r7, #24]
 801000a:	2b00      	cmp	r3, #0
 801000c:	f000 8129 	beq.w	8010262 <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 8010010:	687b      	ldr	r3, [r7, #4]
 8010012:	69ba      	ldr	r2, [r7, #24]
 8010014:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8010016:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010018:	69b8      	ldr	r0, [r7, #24]
 801001a:	f7ff f8c3 	bl	800f1a4 <tcp_oos_insert_segment>
                  }
                  break;
 801001e:	e120      	b.n	8010262 <tcp_receive+0xeb6>
=======
 800ffd0:	4829      	ldr	r0, [pc, #164]	; (8010078 <tcp_receive+0xcfc>)
 800ffd2:	f7fd fb81 	bl	800d6d8 <tcp_seg_copy>
 800ffd6:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800ffd8:	69bb      	ldr	r3, [r7, #24]
 800ffda:	2b00      	cmp	r3, #0
 800ffdc:	f000 8129 	beq.w	8010232 <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	69ba      	ldr	r2, [r7, #24]
 800ffe4:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800ffe6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ffe8:	69b8      	ldr	r0, [r7, #24]
 800ffea:	f7ff f8c3 	bl	800f174 <tcp_oos_insert_segment>
                  }
                  break;
 800ffee:	e120      	b.n	8010232 <tcp_receive+0xeb6>
>>>>>>> Stashed changes
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
<<<<<<< Updated upstream
 8010020:	4b22      	ldr	r3, [pc, #136]	; (80100ac <tcp_receive+0xd00>)
 8010022:	681a      	ldr	r2, [r3, #0]
 8010024:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010026:	68db      	ldr	r3, [r3, #12]
 8010028:	685b      	ldr	r3, [r3, #4]
 801002a:	1ad3      	subs	r3, r2, r3
 801002c:	3b01      	subs	r3, #1
 801002e:	2b00      	cmp	r3, #0
 8010030:	db3e      	blt.n	80100b0 <tcp_receive+0xd04>
 8010032:	4b1e      	ldr	r3, [pc, #120]	; (80100ac <tcp_receive+0xd00>)
 8010034:	681a      	ldr	r2, [r3, #0]
 8010036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010038:	68db      	ldr	r3, [r3, #12]
 801003a:	685b      	ldr	r3, [r3, #4]
 801003c:	1ad3      	subs	r3, r2, r3
 801003e:	3301      	adds	r3, #1
 8010040:	2b00      	cmp	r3, #0
 8010042:	dc35      	bgt.n	80100b0 <tcp_receive+0xd04>
=======
 800fff0:	4b22      	ldr	r3, [pc, #136]	; (801007c <tcp_receive+0xd00>)
 800fff2:	681a      	ldr	r2, [r3, #0]
 800fff4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fff6:	68db      	ldr	r3, [r3, #12]
 800fff8:	685b      	ldr	r3, [r3, #4]
 800fffa:	1ad3      	subs	r3, r2, r3
 800fffc:	3b01      	subs	r3, #1
 800fffe:	2b00      	cmp	r3, #0
 8010000:	db3e      	blt.n	8010080 <tcp_receive+0xd04>
 8010002:	4b1e      	ldr	r3, [pc, #120]	; (801007c <tcp_receive+0xd00>)
 8010004:	681a      	ldr	r2, [r3, #0]
 8010006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010008:	68db      	ldr	r3, [r3, #12]
 801000a:	685b      	ldr	r3, [r3, #4]
 801000c:	1ad3      	subs	r3, r2, r3
 801000e:	3301      	adds	r3, #1
 8010010:	2b00      	cmp	r3, #0
 8010012:	dc35      	bgt.n	8010080 <tcp_receive+0xd04>
>>>>>>> Stashed changes
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
<<<<<<< Updated upstream
 8010044:	4818      	ldr	r0, [pc, #96]	; (80100a8 <tcp_receive+0xcfc>)
 8010046:	f7fd fb5f 	bl	800d708 <tcp_seg_copy>
 801004a:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 801004c:	69fb      	ldr	r3, [r7, #28]
 801004e:	2b00      	cmp	r3, #0
 8010050:	f000 8109 	beq.w	8010266 <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8010054:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010056:	68db      	ldr	r3, [r3, #12]
 8010058:	685b      	ldr	r3, [r3, #4]
 801005a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801005c:	8912      	ldrh	r2, [r2, #8]
 801005e:	441a      	add	r2, r3
 8010060:	4b12      	ldr	r3, [pc, #72]	; (80100ac <tcp_receive+0xd00>)
 8010062:	681b      	ldr	r3, [r3, #0]
 8010064:	1ad3      	subs	r3, r2, r3
 8010066:	2b00      	cmp	r3, #0
 8010068:	dd12      	ble.n	8010090 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801006a:	4b10      	ldr	r3, [pc, #64]	; (80100ac <tcp_receive+0xd00>)
 801006c:	681b      	ldr	r3, [r3, #0]
 801006e:	b29a      	uxth	r2, r3
 8010070:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010072:	68db      	ldr	r3, [r3, #12]
 8010074:	685b      	ldr	r3, [r3, #4]
 8010076:	b29b      	uxth	r3, r3
 8010078:	1ad3      	subs	r3, r2, r3
 801007a:	b29a      	uxth	r2, r3
 801007c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801007e:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8010080:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010082:	685a      	ldr	r2, [r3, #4]
 8010084:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010086:	891b      	ldrh	r3, [r3, #8]
 8010088:	4619      	mov	r1, r3
 801008a:	4610      	mov	r0, r2
 801008c:	f7fb ff2a 	bl	800bee4 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8010090:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010092:	69fa      	ldr	r2, [r7, #28]
 8010094:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8010096:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010098:	69f8      	ldr	r0, [r7, #28]
 801009a:	f7ff f883 	bl	800f1a4 <tcp_oos_insert_segment>
                  }
                  break;
 801009e:	e0e2      	b.n	8010266 <tcp_receive+0xeba>
 80100a0:	20000118 	.word	0x20000118
 80100a4:	20000115 	.word	0x20000115
 80100a8:	200000e8 	.word	0x200000e8
 80100ac:	20000108 	.word	0x20000108
=======
 8010014:	4818      	ldr	r0, [pc, #96]	; (8010078 <tcp_receive+0xcfc>)
 8010016:	f7fd fb5f 	bl	800d6d8 <tcp_seg_copy>
 801001a:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 801001c:	69fb      	ldr	r3, [r7, #28]
 801001e:	2b00      	cmp	r3, #0
 8010020:	f000 8109 	beq.w	8010236 <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8010024:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010026:	68db      	ldr	r3, [r3, #12]
 8010028:	685b      	ldr	r3, [r3, #4]
 801002a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801002c:	8912      	ldrh	r2, [r2, #8]
 801002e:	441a      	add	r2, r3
 8010030:	4b12      	ldr	r3, [pc, #72]	; (801007c <tcp_receive+0xd00>)
 8010032:	681b      	ldr	r3, [r3, #0]
 8010034:	1ad3      	subs	r3, r2, r3
 8010036:	2b00      	cmp	r3, #0
 8010038:	dd12      	ble.n	8010060 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801003a:	4b10      	ldr	r3, [pc, #64]	; (801007c <tcp_receive+0xd00>)
 801003c:	681b      	ldr	r3, [r3, #0]
 801003e:	b29a      	uxth	r2, r3
 8010040:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010042:	68db      	ldr	r3, [r3, #12]
 8010044:	685b      	ldr	r3, [r3, #4]
 8010046:	b29b      	uxth	r3, r3
 8010048:	1ad3      	subs	r3, r2, r3
 801004a:	b29a      	uxth	r2, r3
 801004c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801004e:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8010050:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010052:	685a      	ldr	r2, [r3, #4]
 8010054:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010056:	891b      	ldrh	r3, [r3, #8]
 8010058:	4619      	mov	r1, r3
 801005a:	4610      	mov	r0, r2
 801005c:	f7fb ff2a 	bl	800beb4 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8010060:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010062:	69fa      	ldr	r2, [r7, #28]
 8010064:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8010066:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010068:	69f8      	ldr	r0, [r7, #28]
 801006a:	f7ff f883 	bl	800f174 <tcp_oos_insert_segment>
                  }
                  break;
 801006e:	e0e2      	b.n	8010236 <tcp_receive+0xeba>
 8010070:	20000118 	.word	0x20000118
 8010074:	20000115 	.word	0x20000115
 8010078:	200000e8 	.word	0x200000e8
 801007c:	20000108 	.word	0x20000108
>>>>>>> Stashed changes
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
<<<<<<< Updated upstream
 80100b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100b2:	637b      	str	r3, [r7, #52]	; 0x34
=======
 8010080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010082:	637b      	str	r3, [r7, #52]	; 0x34
>>>>>>> Stashed changes

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
<<<<<<< Updated upstream
 80100b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100b6:	681b      	ldr	r3, [r3, #0]
 80100b8:	2b00      	cmp	r3, #0
 80100ba:	f040 80c6 	bne.w	801024a <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 80100be:	4b80      	ldr	r3, [pc, #512]	; (80102c0 <tcp_receive+0xf14>)
 80100c0:	681a      	ldr	r2, [r3, #0]
 80100c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100c4:	68db      	ldr	r3, [r3, #12]
 80100c6:	685b      	ldr	r3, [r3, #4]
 80100c8:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 80100ca:	2b00      	cmp	r3, #0
 80100cc:	f340 80bd 	ble.w	801024a <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80100d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100d2:	68db      	ldr	r3, [r3, #12]
 80100d4:	899b      	ldrh	r3, [r3, #12]
 80100d6:	b29b      	uxth	r3, r3
 80100d8:	4618      	mov	r0, r3
 80100da:	f7fa fdf6 	bl	800acca <lwip_htons>
 80100de:	4603      	mov	r3, r0
 80100e0:	b2db      	uxtb	r3, r3
 80100e2:	f003 0301 	and.w	r3, r3, #1
 80100e6:	2b00      	cmp	r3, #0
 80100e8:	f040 80bf 	bne.w	801026a <tcp_receive+0xebe>
=======
 8010084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010086:	681b      	ldr	r3, [r3, #0]
 8010088:	2b00      	cmp	r3, #0
 801008a:	f040 80c6 	bne.w	801021a <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 801008e:	4b80      	ldr	r3, [pc, #512]	; (8010290 <tcp_receive+0xf14>)
 8010090:	681a      	ldr	r2, [r3, #0]
 8010092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010094:	68db      	ldr	r3, [r3, #12]
 8010096:	685b      	ldr	r3, [r3, #4]
 8010098:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 801009a:	2b00      	cmp	r3, #0
 801009c:	f340 80bd 	ble.w	801021a <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80100a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100a2:	68db      	ldr	r3, [r3, #12]
 80100a4:	899b      	ldrh	r3, [r3, #12]
 80100a6:	b29b      	uxth	r3, r3
 80100a8:	4618      	mov	r0, r3
 80100aa:	f7fa fdf6 	bl	800ac9a <lwip_htons>
 80100ae:	4603      	mov	r3, r0
 80100b0:	b2db      	uxtb	r3, r3
 80100b2:	f003 0301 	and.w	r3, r3, #1
 80100b6:	2b00      	cmp	r3, #0
 80100b8:	f040 80bf 	bne.w	801023a <tcp_receive+0xebe>
>>>>>>> Stashed changes
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
<<<<<<< Updated upstream
 80100ec:	4875      	ldr	r0, [pc, #468]	; (80102c4 <tcp_receive+0xf18>)
 80100ee:	f7fd fb0b 	bl	800d708 <tcp_seg_copy>
 80100f2:	4602      	mov	r2, r0
 80100f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100f6:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 80100f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100fa:	681b      	ldr	r3, [r3, #0]
 80100fc:	2b00      	cmp	r3, #0
 80100fe:	f000 80b6 	beq.w	801026e <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8010102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010104:	68db      	ldr	r3, [r3, #12]
 8010106:	685b      	ldr	r3, [r3, #4]
 8010108:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801010a:	8912      	ldrh	r2, [r2, #8]
 801010c:	441a      	add	r2, r3
 801010e:	4b6c      	ldr	r3, [pc, #432]	; (80102c0 <tcp_receive+0xf14>)
 8010110:	681b      	ldr	r3, [r3, #0]
 8010112:	1ad3      	subs	r3, r2, r3
 8010114:	2b00      	cmp	r3, #0
 8010116:	dd12      	ble.n	801013e <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8010118:	4b69      	ldr	r3, [pc, #420]	; (80102c0 <tcp_receive+0xf14>)
 801011a:	681b      	ldr	r3, [r3, #0]
 801011c:	b29a      	uxth	r2, r3
 801011e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010120:	68db      	ldr	r3, [r3, #12]
 8010122:	685b      	ldr	r3, [r3, #4]
 8010124:	b29b      	uxth	r3, r3
 8010126:	1ad3      	subs	r3, r2, r3
 8010128:	b29a      	uxth	r2, r3
 801012a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801012c:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 801012e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010130:	685a      	ldr	r2, [r3, #4]
 8010132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010134:	891b      	ldrh	r3, [r3, #8]
 8010136:	4619      	mov	r1, r3
 8010138:	4610      	mov	r0, r2
 801013a:	f7fb fed3 	bl	800bee4 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 801013e:	4b62      	ldr	r3, [pc, #392]	; (80102c8 <tcp_receive+0xf1c>)
 8010140:	881b      	ldrh	r3, [r3, #0]
 8010142:	461a      	mov	r2, r3
 8010144:	4b5e      	ldr	r3, [pc, #376]	; (80102c0 <tcp_receive+0xf14>)
 8010146:	681b      	ldr	r3, [r3, #0]
 8010148:	441a      	add	r2, r3
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801014e:	6879      	ldr	r1, [r7, #4]
 8010150:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010152:	440b      	add	r3, r1
 8010154:	1ad3      	subs	r3, r2, r3
 8010156:	2b00      	cmp	r3, #0
 8010158:	f340 8089 	ble.w	801026e <tcp_receive+0xec2>
=======
 80100bc:	4875      	ldr	r0, [pc, #468]	; (8010294 <tcp_receive+0xf18>)
 80100be:	f7fd fb0b 	bl	800d6d8 <tcp_seg_copy>
 80100c2:	4602      	mov	r2, r0
 80100c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100c6:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 80100c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100ca:	681b      	ldr	r3, [r3, #0]
 80100cc:	2b00      	cmp	r3, #0
 80100ce:	f000 80b6 	beq.w	801023e <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 80100d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100d4:	68db      	ldr	r3, [r3, #12]
 80100d6:	685b      	ldr	r3, [r3, #4]
 80100d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80100da:	8912      	ldrh	r2, [r2, #8]
 80100dc:	441a      	add	r2, r3
 80100de:	4b6c      	ldr	r3, [pc, #432]	; (8010290 <tcp_receive+0xf14>)
 80100e0:	681b      	ldr	r3, [r3, #0]
 80100e2:	1ad3      	subs	r3, r2, r3
 80100e4:	2b00      	cmp	r3, #0
 80100e6:	dd12      	ble.n	801010e <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 80100e8:	4b69      	ldr	r3, [pc, #420]	; (8010290 <tcp_receive+0xf14>)
 80100ea:	681b      	ldr	r3, [r3, #0]
 80100ec:	b29a      	uxth	r2, r3
 80100ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100f0:	68db      	ldr	r3, [r3, #12]
 80100f2:	685b      	ldr	r3, [r3, #4]
 80100f4:	b29b      	uxth	r3, r3
 80100f6:	1ad3      	subs	r3, r2, r3
 80100f8:	b29a      	uxth	r2, r3
 80100fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100fc:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 80100fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010100:	685a      	ldr	r2, [r3, #4]
 8010102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010104:	891b      	ldrh	r3, [r3, #8]
 8010106:	4619      	mov	r1, r3
 8010108:	4610      	mov	r0, r2
 801010a:	f7fb fed3 	bl	800beb4 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 801010e:	4b62      	ldr	r3, [pc, #392]	; (8010298 <tcp_receive+0xf1c>)
 8010110:	881b      	ldrh	r3, [r3, #0]
 8010112:	461a      	mov	r2, r3
 8010114:	4b5e      	ldr	r3, [pc, #376]	; (8010290 <tcp_receive+0xf14>)
 8010116:	681b      	ldr	r3, [r3, #0]
 8010118:	441a      	add	r2, r3
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801011e:	6879      	ldr	r1, [r7, #4]
 8010120:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010122:	440b      	add	r3, r1
 8010124:	1ad3      	subs	r3, r2, r3
 8010126:	2b00      	cmp	r3, #0
 8010128:	f340 8089 	ble.w	801023e <tcp_receive+0xec2>
>>>>>>> Stashed changes
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
<<<<<<< Updated upstream
 801015c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801015e:	681b      	ldr	r3, [r3, #0]
 8010160:	68db      	ldr	r3, [r3, #12]
 8010162:	899b      	ldrh	r3, [r3, #12]
 8010164:	b29b      	uxth	r3, r3
 8010166:	4618      	mov	r0, r3
 8010168:	f7fa fdaf 	bl	800acca <lwip_htons>
 801016c:	4603      	mov	r3, r0
 801016e:	b2db      	uxtb	r3, r3
 8010170:	f003 0301 	and.w	r3, r3, #1
 8010174:	2b00      	cmp	r3, #0
 8010176:	d022      	beq.n	80101be <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8010178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801017a:	681b      	ldr	r3, [r3, #0]
 801017c:	68db      	ldr	r3, [r3, #12]
 801017e:	899b      	ldrh	r3, [r3, #12]
 8010180:	b29b      	uxth	r3, r3
 8010182:	b21b      	sxth	r3, r3
 8010184:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8010188:	b21c      	sxth	r4, r3
 801018a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801018c:	681b      	ldr	r3, [r3, #0]
 801018e:	68db      	ldr	r3, [r3, #12]
 8010190:	899b      	ldrh	r3, [r3, #12]
 8010192:	b29b      	uxth	r3, r3
 8010194:	4618      	mov	r0, r3
 8010196:	f7fa fd98 	bl	800acca <lwip_htons>
 801019a:	4603      	mov	r3, r0
 801019c:	b2db      	uxtb	r3, r3
 801019e:	b29b      	uxth	r3, r3
 80101a0:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80101a4:	b29b      	uxth	r3, r3
 80101a6:	4618      	mov	r0, r3
 80101a8:	f7fa fd8f 	bl	800acca <lwip_htons>
 80101ac:	4603      	mov	r3, r0
 80101ae:	b21b      	sxth	r3, r3
 80101b0:	4323      	orrs	r3, r4
 80101b2:	b21a      	sxth	r2, r3
 80101b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101b6:	681b      	ldr	r3, [r3, #0]
 80101b8:	68db      	ldr	r3, [r3, #12]
 80101ba:	b292      	uxth	r2, r2
 80101bc:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80101c2:	b29a      	uxth	r2, r3
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80101c8:	4413      	add	r3, r2
 80101ca:	b299      	uxth	r1, r3
 80101cc:	4b3c      	ldr	r3, [pc, #240]	; (80102c0 <tcp_receive+0xf14>)
 80101ce:	681b      	ldr	r3, [r3, #0]
 80101d0:	b29a      	uxth	r2, r3
 80101d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101d4:	681b      	ldr	r3, [r3, #0]
 80101d6:	1a8a      	subs	r2, r1, r2
 80101d8:	b292      	uxth	r2, r2
 80101da:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 80101dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101de:	681b      	ldr	r3, [r3, #0]
 80101e0:	685a      	ldr	r2, [r3, #4]
 80101e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101e4:	681b      	ldr	r3, [r3, #0]
 80101e6:	891b      	ldrh	r3, [r3, #8]
 80101e8:	4619      	mov	r1, r3
 80101ea:	4610      	mov	r0, r2
 80101ec:	f7fb fe7a 	bl	800bee4 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 80101f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101f2:	681b      	ldr	r3, [r3, #0]
 80101f4:	891c      	ldrh	r4, [r3, #8]
 80101f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101f8:	681b      	ldr	r3, [r3, #0]
 80101fa:	68db      	ldr	r3, [r3, #12]
 80101fc:	899b      	ldrh	r3, [r3, #12]
 80101fe:	b29b      	uxth	r3, r3
 8010200:	4618      	mov	r0, r3
 8010202:	f7fa fd62 	bl	800acca <lwip_htons>
 8010206:	4603      	mov	r3, r0
 8010208:	b2db      	uxtb	r3, r3
 801020a:	f003 0303 	and.w	r3, r3, #3
 801020e:	2b00      	cmp	r3, #0
 8010210:	d001      	beq.n	8010216 <tcp_receive+0xe6a>
 8010212:	2301      	movs	r3, #1
 8010214:	e000      	b.n	8010218 <tcp_receive+0xe6c>
 8010216:	2300      	movs	r3, #0
 8010218:	4423      	add	r3, r4
 801021a:	b29a      	uxth	r2, r3
 801021c:	4b2a      	ldr	r3, [pc, #168]	; (80102c8 <tcp_receive+0xf1c>)
 801021e:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8010220:	4b29      	ldr	r3, [pc, #164]	; (80102c8 <tcp_receive+0xf1c>)
 8010222:	881b      	ldrh	r3, [r3, #0]
 8010224:	461a      	mov	r2, r3
 8010226:	4b26      	ldr	r3, [pc, #152]	; (80102c0 <tcp_receive+0xf14>)
 8010228:	681b      	ldr	r3, [r3, #0]
 801022a:	441a      	add	r2, r3
 801022c:	687b      	ldr	r3, [r7, #4]
 801022e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010230:	6879      	ldr	r1, [r7, #4]
 8010232:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010234:	440b      	add	r3, r1
 8010236:	429a      	cmp	r2, r3
 8010238:	d019      	beq.n	801026e <tcp_receive+0xec2>
 801023a:	4b24      	ldr	r3, [pc, #144]	; (80102cc <tcp_receive+0xf20>)
 801023c:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8010240:	4923      	ldr	r1, [pc, #140]	; (80102d0 <tcp_receive+0xf24>)
 8010242:	4824      	ldr	r0, [pc, #144]	; (80102d4 <tcp_receive+0xf28>)
 8010244:	f004 f99e 	bl	8014584 <iprintf>
=======
 801012c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801012e:	681b      	ldr	r3, [r3, #0]
 8010130:	68db      	ldr	r3, [r3, #12]
 8010132:	899b      	ldrh	r3, [r3, #12]
 8010134:	b29b      	uxth	r3, r3
 8010136:	4618      	mov	r0, r3
 8010138:	f7fa fdaf 	bl	800ac9a <lwip_htons>
 801013c:	4603      	mov	r3, r0
 801013e:	b2db      	uxtb	r3, r3
 8010140:	f003 0301 	and.w	r3, r3, #1
 8010144:	2b00      	cmp	r3, #0
 8010146:	d022      	beq.n	801018e <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8010148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801014a:	681b      	ldr	r3, [r3, #0]
 801014c:	68db      	ldr	r3, [r3, #12]
 801014e:	899b      	ldrh	r3, [r3, #12]
 8010150:	b29b      	uxth	r3, r3
 8010152:	b21b      	sxth	r3, r3
 8010154:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8010158:	b21c      	sxth	r4, r3
 801015a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801015c:	681b      	ldr	r3, [r3, #0]
 801015e:	68db      	ldr	r3, [r3, #12]
 8010160:	899b      	ldrh	r3, [r3, #12]
 8010162:	b29b      	uxth	r3, r3
 8010164:	4618      	mov	r0, r3
 8010166:	f7fa fd98 	bl	800ac9a <lwip_htons>
 801016a:	4603      	mov	r3, r0
 801016c:	b2db      	uxtb	r3, r3
 801016e:	b29b      	uxth	r3, r3
 8010170:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8010174:	b29b      	uxth	r3, r3
 8010176:	4618      	mov	r0, r3
 8010178:	f7fa fd8f 	bl	800ac9a <lwip_htons>
 801017c:	4603      	mov	r3, r0
 801017e:	b21b      	sxth	r3, r3
 8010180:	4323      	orrs	r3, r4
 8010182:	b21a      	sxth	r2, r3
 8010184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010186:	681b      	ldr	r3, [r3, #0]
 8010188:	68db      	ldr	r3, [r3, #12]
 801018a:	b292      	uxth	r2, r2
 801018c:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 801018e:	687b      	ldr	r3, [r7, #4]
 8010190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010192:	b29a      	uxth	r2, r3
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010198:	4413      	add	r3, r2
 801019a:	b299      	uxth	r1, r3
 801019c:	4b3c      	ldr	r3, [pc, #240]	; (8010290 <tcp_receive+0xf14>)
 801019e:	681b      	ldr	r3, [r3, #0]
 80101a0:	b29a      	uxth	r2, r3
 80101a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101a4:	681b      	ldr	r3, [r3, #0]
 80101a6:	1a8a      	subs	r2, r1, r2
 80101a8:	b292      	uxth	r2, r2
 80101aa:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 80101ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101ae:	681b      	ldr	r3, [r3, #0]
 80101b0:	685a      	ldr	r2, [r3, #4]
 80101b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101b4:	681b      	ldr	r3, [r3, #0]
 80101b6:	891b      	ldrh	r3, [r3, #8]
 80101b8:	4619      	mov	r1, r3
 80101ba:	4610      	mov	r0, r2
 80101bc:	f7fb fe7a 	bl	800beb4 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 80101c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101c2:	681b      	ldr	r3, [r3, #0]
 80101c4:	891c      	ldrh	r4, [r3, #8]
 80101c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101c8:	681b      	ldr	r3, [r3, #0]
 80101ca:	68db      	ldr	r3, [r3, #12]
 80101cc:	899b      	ldrh	r3, [r3, #12]
 80101ce:	b29b      	uxth	r3, r3
 80101d0:	4618      	mov	r0, r3
 80101d2:	f7fa fd62 	bl	800ac9a <lwip_htons>
 80101d6:	4603      	mov	r3, r0
 80101d8:	b2db      	uxtb	r3, r3
 80101da:	f003 0303 	and.w	r3, r3, #3
 80101de:	2b00      	cmp	r3, #0
 80101e0:	d001      	beq.n	80101e6 <tcp_receive+0xe6a>
 80101e2:	2301      	movs	r3, #1
 80101e4:	e000      	b.n	80101e8 <tcp_receive+0xe6c>
 80101e6:	2300      	movs	r3, #0
 80101e8:	4423      	add	r3, r4
 80101ea:	b29a      	uxth	r2, r3
 80101ec:	4b2a      	ldr	r3, [pc, #168]	; (8010298 <tcp_receive+0xf1c>)
 80101ee:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80101f0:	4b29      	ldr	r3, [pc, #164]	; (8010298 <tcp_receive+0xf1c>)
 80101f2:	881b      	ldrh	r3, [r3, #0]
 80101f4:	461a      	mov	r2, r3
 80101f6:	4b26      	ldr	r3, [pc, #152]	; (8010290 <tcp_receive+0xf14>)
 80101f8:	681b      	ldr	r3, [r3, #0]
 80101fa:	441a      	add	r2, r3
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010200:	6879      	ldr	r1, [r7, #4]
 8010202:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010204:	440b      	add	r3, r1
 8010206:	429a      	cmp	r2, r3
 8010208:	d019      	beq.n	801023e <tcp_receive+0xec2>
 801020a:	4b24      	ldr	r3, [pc, #144]	; (801029c <tcp_receive+0xf20>)
 801020c:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8010210:	4923      	ldr	r1, [pc, #140]	; (80102a0 <tcp_receive+0xf24>)
 8010212:	4824      	ldr	r0, [pc, #144]	; (80102a4 <tcp_receive+0xf28>)
 8010214:	f004 f99e 	bl	8014554 <iprintf>
>>>>>>> Stashed changes
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
<<<<<<< Updated upstream
 8010248:	e011      	b.n	801026e <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801024a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801024c:	681b      	ldr	r3, [r3, #0]
 801024e:	63bb      	str	r3, [r7, #56]	; 0x38
 8010250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010252:	2b00      	cmp	r3, #0
 8010254:	f47f aea4 	bne.w	800ffa0 <tcp_receive+0xbf4>
 8010258:	e00a      	b.n	8010270 <tcp_receive+0xec4>
                break;
 801025a:	bf00      	nop
 801025c:	e008      	b.n	8010270 <tcp_receive+0xec4>
                break;
 801025e:	bf00      	nop
 8010260:	e006      	b.n	8010270 <tcp_receive+0xec4>
                  break;
 8010262:	bf00      	nop
 8010264:	e004      	b.n	8010270 <tcp_receive+0xec4>
                  break;
 8010266:	bf00      	nop
 8010268:	e002      	b.n	8010270 <tcp_receive+0xec4>
                  break;
 801026a:	bf00      	nop
 801026c:	e000      	b.n	8010270 <tcp_receive+0xec4>
                break;
 801026e:	bf00      	nop
=======
 8010218:	e011      	b.n	801023e <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801021a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801021c:	681b      	ldr	r3, [r3, #0]
 801021e:	63bb      	str	r3, [r7, #56]	; 0x38
 8010220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010222:	2b00      	cmp	r3, #0
 8010224:	f47f aea4 	bne.w	800ff70 <tcp_receive+0xbf4>
 8010228:	e00a      	b.n	8010240 <tcp_receive+0xec4>
                break;
 801022a:	bf00      	nop
 801022c:	e008      	b.n	8010240 <tcp_receive+0xec4>
                break;
 801022e:	bf00      	nop
 8010230:	e006      	b.n	8010240 <tcp_receive+0xec4>
                  break;
 8010232:	bf00      	nop
 8010234:	e004      	b.n	8010240 <tcp_receive+0xec4>
                  break;
 8010236:	bf00      	nop
 8010238:	e002      	b.n	8010240 <tcp_receive+0xec4>
                  break;
 801023a:	bf00      	nop
 801023c:	e000      	b.n	8010240 <tcp_receive+0xec4>
                break;
 801023e:	bf00      	nop
>>>>>>> Stashed changes
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
<<<<<<< Updated upstream
 8010270:	6878      	ldr	r0, [r7, #4]
 8010272:	f001 fa33 	bl	80116dc <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8010276:	e003      	b.n	8010280 <tcp_receive+0xed4>
=======
 8010240:	6878      	ldr	r0, [r7, #4]
 8010242:	f001 fa33 	bl	80116ac <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8010246:	e003      	b.n	8010250 <tcp_receive+0xed4>
>>>>>>> Stashed changes
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
<<<<<<< Updated upstream
 8010278:	6878      	ldr	r0, [r7, #4]
 801027a:	f001 fa2f 	bl	80116dc <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801027e:	e01a      	b.n	80102b6 <tcp_receive+0xf0a>
 8010280:	e019      	b.n	80102b6 <tcp_receive+0xf0a>
=======
 8010248:	6878      	ldr	r0, [r7, #4]
 801024a:	f001 fa2f 	bl	80116ac <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801024e:	e01a      	b.n	8010286 <tcp_receive+0xf0a>
 8010250:	e019      	b.n	8010286 <tcp_receive+0xf0a>
>>>>>>> Stashed changes
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
<<<<<<< Updated upstream
 8010282:	4b0f      	ldr	r3, [pc, #60]	; (80102c0 <tcp_receive+0xf14>)
 8010284:	681a      	ldr	r2, [r3, #0]
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801028a:	1ad3      	subs	r3, r2, r3
 801028c:	2b00      	cmp	r3, #0
 801028e:	db0a      	blt.n	80102a6 <tcp_receive+0xefa>
 8010290:	4b0b      	ldr	r3, [pc, #44]	; (80102c0 <tcp_receive+0xf14>)
 8010292:	681a      	ldr	r2, [r3, #0]
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010298:	6879      	ldr	r1, [r7, #4]
 801029a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801029c:	440b      	add	r3, r1
 801029e:	1ad3      	subs	r3, r2, r3
 80102a0:	3301      	adds	r3, #1
 80102a2:	2b00      	cmp	r3, #0
 80102a4:	dd07      	ble.n	80102b6 <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	8b5b      	ldrh	r3, [r3, #26]
 80102aa:	f043 0302 	orr.w	r3, r3, #2
 80102ae:	b29a      	uxth	r2, r3
 80102b0:	687b      	ldr	r3, [r7, #4]
 80102b2:	835a      	strh	r2, [r3, #26]
    }
  }
}
 80102b4:	e7ff      	b.n	80102b6 <tcp_receive+0xf0a>
 80102b6:	bf00      	nop
 80102b8:	3750      	adds	r7, #80	; 0x50
 80102ba:	46bd      	mov	sp, r7
 80102bc:	bdb0      	pop	{r4, r5, r7, pc}
 80102be:	bf00      	nop
 80102c0:	20000108 	.word	0x20000108
 80102c4:	200000e8 	.word	0x200000e8
 80102c8:	20000112 	.word	0x20000112
 80102cc:	08016b90 	.word	0x08016b90
 80102d0:	08016f38 	.word	0x08016f38
 80102d4:	08016bdc 	.word	0x08016bdc

080102d8 <tcp_get_next_optbyte>:
=======
 8010252:	4b0f      	ldr	r3, [pc, #60]	; (8010290 <tcp_receive+0xf14>)
 8010254:	681a      	ldr	r2, [r3, #0]
 8010256:	687b      	ldr	r3, [r7, #4]
 8010258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801025a:	1ad3      	subs	r3, r2, r3
 801025c:	2b00      	cmp	r3, #0
 801025e:	db0a      	blt.n	8010276 <tcp_receive+0xefa>
 8010260:	4b0b      	ldr	r3, [pc, #44]	; (8010290 <tcp_receive+0xf14>)
 8010262:	681a      	ldr	r2, [r3, #0]
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010268:	6879      	ldr	r1, [r7, #4]
 801026a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801026c:	440b      	add	r3, r1
 801026e:	1ad3      	subs	r3, r2, r3
 8010270:	3301      	adds	r3, #1
 8010272:	2b00      	cmp	r3, #0
 8010274:	dd07      	ble.n	8010286 <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 8010276:	687b      	ldr	r3, [r7, #4]
 8010278:	8b5b      	ldrh	r3, [r3, #26]
 801027a:	f043 0302 	orr.w	r3, r3, #2
 801027e:	b29a      	uxth	r2, r3
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8010284:	e7ff      	b.n	8010286 <tcp_receive+0xf0a>
 8010286:	bf00      	nop
 8010288:	3750      	adds	r7, #80	; 0x50
 801028a:	46bd      	mov	sp, r7
 801028c:	bdb0      	pop	{r4, r5, r7, pc}
 801028e:	bf00      	nop
 8010290:	20000108 	.word	0x20000108
 8010294:	200000e8 	.word	0x200000e8
 8010298:	20000112 	.word	0x20000112
 801029c:	08016b74 	.word	0x08016b74
 80102a0:	08016f1c 	.word	0x08016f1c
 80102a4:	08016bc0 	.word	0x08016bc0

080102a8 <tcp_get_next_optbyte>:
>>>>>>> Stashed changes

static u8_t
tcp_get_next_optbyte(void)
{
<<<<<<< Updated upstream
 80102d8:	b480      	push	{r7}
 80102da:	b083      	sub	sp, #12
 80102dc:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 80102de:	4b15      	ldr	r3, [pc, #84]	; (8010334 <tcp_get_next_optbyte+0x5c>)
 80102e0:	881b      	ldrh	r3, [r3, #0]
 80102e2:	1c5a      	adds	r2, r3, #1
 80102e4:	b291      	uxth	r1, r2
 80102e6:	4a13      	ldr	r2, [pc, #76]	; (8010334 <tcp_get_next_optbyte+0x5c>)
 80102e8:	8011      	strh	r1, [r2, #0]
 80102ea:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 80102ec:	4b12      	ldr	r3, [pc, #72]	; (8010338 <tcp_get_next_optbyte+0x60>)
 80102ee:	681b      	ldr	r3, [r3, #0]
 80102f0:	2b00      	cmp	r3, #0
 80102f2:	d004      	beq.n	80102fe <tcp_get_next_optbyte+0x26>
 80102f4:	4b11      	ldr	r3, [pc, #68]	; (801033c <tcp_get_next_optbyte+0x64>)
 80102f6:	881b      	ldrh	r3, [r3, #0]
 80102f8:	88fa      	ldrh	r2, [r7, #6]
 80102fa:	429a      	cmp	r2, r3
 80102fc:	d208      	bcs.n	8010310 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 80102fe:	4b10      	ldr	r3, [pc, #64]	; (8010340 <tcp_get_next_optbyte+0x68>)
 8010300:	681b      	ldr	r3, [r3, #0]
 8010302:	3314      	adds	r3, #20
 8010304:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8010306:	88fb      	ldrh	r3, [r7, #6]
 8010308:	683a      	ldr	r2, [r7, #0]
 801030a:	4413      	add	r3, r2
 801030c:	781b      	ldrb	r3, [r3, #0]
 801030e:	e00b      	b.n	8010328 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8010310:	88fb      	ldrh	r3, [r7, #6]
 8010312:	b2da      	uxtb	r2, r3
 8010314:	4b09      	ldr	r3, [pc, #36]	; (801033c <tcp_get_next_optbyte+0x64>)
 8010316:	881b      	ldrh	r3, [r3, #0]
 8010318:	b2db      	uxtb	r3, r3
 801031a:	1ad3      	subs	r3, r2, r3
 801031c:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 801031e:	4b06      	ldr	r3, [pc, #24]	; (8010338 <tcp_get_next_optbyte+0x60>)
 8010320:	681a      	ldr	r2, [r3, #0]
 8010322:	797b      	ldrb	r3, [r7, #5]
 8010324:	4413      	add	r3, r2
 8010326:	781b      	ldrb	r3, [r3, #0]
  }
}
 8010328:	4618      	mov	r0, r3
 801032a:	370c      	adds	r7, #12
 801032c:	46bd      	mov	sp, r7
 801032e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010332:	4770      	bx	lr
 8010334:	20000104 	.word	0x20000104
 8010338:	20000100 	.word	0x20000100
 801033c:	200000fe 	.word	0x200000fe
 8010340:	200000f8 	.word	0x200000f8

08010344 <tcp_parseopt>:
=======
 80102a8:	b480      	push	{r7}
 80102aa:	b083      	sub	sp, #12
 80102ac:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 80102ae:	4b15      	ldr	r3, [pc, #84]	; (8010304 <tcp_get_next_optbyte+0x5c>)
 80102b0:	881b      	ldrh	r3, [r3, #0]
 80102b2:	1c5a      	adds	r2, r3, #1
 80102b4:	b291      	uxth	r1, r2
 80102b6:	4a13      	ldr	r2, [pc, #76]	; (8010304 <tcp_get_next_optbyte+0x5c>)
 80102b8:	8011      	strh	r1, [r2, #0]
 80102ba:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 80102bc:	4b12      	ldr	r3, [pc, #72]	; (8010308 <tcp_get_next_optbyte+0x60>)
 80102be:	681b      	ldr	r3, [r3, #0]
 80102c0:	2b00      	cmp	r3, #0
 80102c2:	d004      	beq.n	80102ce <tcp_get_next_optbyte+0x26>
 80102c4:	4b11      	ldr	r3, [pc, #68]	; (801030c <tcp_get_next_optbyte+0x64>)
 80102c6:	881b      	ldrh	r3, [r3, #0]
 80102c8:	88fa      	ldrh	r2, [r7, #6]
 80102ca:	429a      	cmp	r2, r3
 80102cc:	d208      	bcs.n	80102e0 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 80102ce:	4b10      	ldr	r3, [pc, #64]	; (8010310 <tcp_get_next_optbyte+0x68>)
 80102d0:	681b      	ldr	r3, [r3, #0]
 80102d2:	3314      	adds	r3, #20
 80102d4:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 80102d6:	88fb      	ldrh	r3, [r7, #6]
 80102d8:	683a      	ldr	r2, [r7, #0]
 80102da:	4413      	add	r3, r2
 80102dc:	781b      	ldrb	r3, [r3, #0]
 80102de:	e00b      	b.n	80102f8 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 80102e0:	88fb      	ldrh	r3, [r7, #6]
 80102e2:	b2da      	uxtb	r2, r3
 80102e4:	4b09      	ldr	r3, [pc, #36]	; (801030c <tcp_get_next_optbyte+0x64>)
 80102e6:	881b      	ldrh	r3, [r3, #0]
 80102e8:	b2db      	uxtb	r3, r3
 80102ea:	1ad3      	subs	r3, r2, r3
 80102ec:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 80102ee:	4b06      	ldr	r3, [pc, #24]	; (8010308 <tcp_get_next_optbyte+0x60>)
 80102f0:	681a      	ldr	r2, [r3, #0]
 80102f2:	797b      	ldrb	r3, [r7, #5]
 80102f4:	4413      	add	r3, r2
 80102f6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80102f8:	4618      	mov	r0, r3
 80102fa:	370c      	adds	r7, #12
 80102fc:	46bd      	mov	sp, r7
 80102fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010302:	4770      	bx	lr
 8010304:	20000104 	.word	0x20000104
 8010308:	20000100 	.word	0x20000100
 801030c:	200000fe 	.word	0x200000fe
 8010310:	200000f8 	.word	0x200000f8

08010314 <tcp_parseopt>:
>>>>>>> Stashed changes
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
<<<<<<< Updated upstream
 8010344:	b580      	push	{r7, lr}
 8010346:	b084      	sub	sp, #16
 8010348:	af00      	add	r7, sp, #0
 801034a:	6078      	str	r0, [r7, #4]
=======
 8010314:	b580      	push	{r7, lr}
 8010316:	b084      	sub	sp, #16
 8010318:	af00      	add	r7, sp, #0
 801031a:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
<<<<<<< Updated upstream
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	2b00      	cmp	r3, #0
 8010350:	d106      	bne.n	8010360 <tcp_parseopt+0x1c>
 8010352:	4b32      	ldr	r3, [pc, #200]	; (801041c <tcp_parseopt+0xd8>)
 8010354:	f240 727d 	movw	r2, #1917	; 0x77d
 8010358:	4931      	ldr	r1, [pc, #196]	; (8010420 <tcp_parseopt+0xdc>)
 801035a:	4832      	ldr	r0, [pc, #200]	; (8010424 <tcp_parseopt+0xe0>)
 801035c:	f004 f912 	bl	8014584 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8010360:	4b31      	ldr	r3, [pc, #196]	; (8010428 <tcp_parseopt+0xe4>)
 8010362:	881b      	ldrh	r3, [r3, #0]
 8010364:	2b00      	cmp	r3, #0
 8010366:	d055      	beq.n	8010414 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8010368:	4b30      	ldr	r3, [pc, #192]	; (801042c <tcp_parseopt+0xe8>)
 801036a:	2200      	movs	r2, #0
 801036c:	801a      	strh	r2, [r3, #0]
 801036e:	e045      	b.n	80103fc <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8010370:	f7ff ffb2 	bl	80102d8 <tcp_get_next_optbyte>
 8010374:	4603      	mov	r3, r0
 8010376:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8010378:	7bfb      	ldrb	r3, [r7, #15]
 801037a:	2b02      	cmp	r3, #2
 801037c:	d006      	beq.n	801038c <tcp_parseopt+0x48>
 801037e:	2b02      	cmp	r3, #2
 8010380:	dc2b      	bgt.n	80103da <tcp_parseopt+0x96>
 8010382:	2b00      	cmp	r3, #0
 8010384:	d041      	beq.n	801040a <tcp_parseopt+0xc6>
 8010386:	2b01      	cmp	r3, #1
 8010388:	d127      	bne.n	80103da <tcp_parseopt+0x96>
=======
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	2b00      	cmp	r3, #0
 8010320:	d106      	bne.n	8010330 <tcp_parseopt+0x1c>
 8010322:	4b32      	ldr	r3, [pc, #200]	; (80103ec <tcp_parseopt+0xd8>)
 8010324:	f240 727d 	movw	r2, #1917	; 0x77d
 8010328:	4931      	ldr	r1, [pc, #196]	; (80103f0 <tcp_parseopt+0xdc>)
 801032a:	4832      	ldr	r0, [pc, #200]	; (80103f4 <tcp_parseopt+0xe0>)
 801032c:	f004 f912 	bl	8014554 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8010330:	4b31      	ldr	r3, [pc, #196]	; (80103f8 <tcp_parseopt+0xe4>)
 8010332:	881b      	ldrh	r3, [r3, #0]
 8010334:	2b00      	cmp	r3, #0
 8010336:	d055      	beq.n	80103e4 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8010338:	4b30      	ldr	r3, [pc, #192]	; (80103fc <tcp_parseopt+0xe8>)
 801033a:	2200      	movs	r2, #0
 801033c:	801a      	strh	r2, [r3, #0]
 801033e:	e045      	b.n	80103cc <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8010340:	f7ff ffb2 	bl	80102a8 <tcp_get_next_optbyte>
 8010344:	4603      	mov	r3, r0
 8010346:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8010348:	7bfb      	ldrb	r3, [r7, #15]
 801034a:	2b02      	cmp	r3, #2
 801034c:	d006      	beq.n	801035c <tcp_parseopt+0x48>
 801034e:	2b02      	cmp	r3, #2
 8010350:	dc2b      	bgt.n	80103aa <tcp_parseopt+0x96>
 8010352:	2b00      	cmp	r3, #0
 8010354:	d041      	beq.n	80103da <tcp_parseopt+0xc6>
 8010356:	2b01      	cmp	r3, #1
 8010358:	d127      	bne.n	80103aa <tcp_parseopt+0x96>
>>>>>>> Stashed changes
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
<<<<<<< Updated upstream
 801038a:	e037      	b.n	80103fc <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 801038c:	f7ff ffa4 	bl	80102d8 <tcp_get_next_optbyte>
 8010390:	4603      	mov	r3, r0
 8010392:	2b04      	cmp	r3, #4
 8010394:	d13b      	bne.n	801040e <tcp_parseopt+0xca>
 8010396:	4b25      	ldr	r3, [pc, #148]	; (801042c <tcp_parseopt+0xe8>)
 8010398:	881b      	ldrh	r3, [r3, #0]
 801039a:	3301      	adds	r3, #1
 801039c:	4a22      	ldr	r2, [pc, #136]	; (8010428 <tcp_parseopt+0xe4>)
 801039e:	8812      	ldrh	r2, [r2, #0]
 80103a0:	4293      	cmp	r3, r2
 80103a2:	da34      	bge.n	801040e <tcp_parseopt+0xca>
=======
 801035a:	e037      	b.n	80103cc <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 801035c:	f7ff ffa4 	bl	80102a8 <tcp_get_next_optbyte>
 8010360:	4603      	mov	r3, r0
 8010362:	2b04      	cmp	r3, #4
 8010364:	d13b      	bne.n	80103de <tcp_parseopt+0xca>
 8010366:	4b25      	ldr	r3, [pc, #148]	; (80103fc <tcp_parseopt+0xe8>)
 8010368:	881b      	ldrh	r3, [r3, #0]
 801036a:	3301      	adds	r3, #1
 801036c:	4a22      	ldr	r2, [pc, #136]	; (80103f8 <tcp_parseopt+0xe4>)
 801036e:	8812      	ldrh	r2, [r2, #0]
 8010370:	4293      	cmp	r3, r2
 8010372:	da34      	bge.n	80103de <tcp_parseopt+0xca>
>>>>>>> Stashed changes
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
<<<<<<< Updated upstream
 80103a4:	f7ff ff98 	bl	80102d8 <tcp_get_next_optbyte>
 80103a8:	4603      	mov	r3, r0
 80103aa:	b29b      	uxth	r3, r3
 80103ac:	021b      	lsls	r3, r3, #8
 80103ae:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 80103b0:	f7ff ff92 	bl	80102d8 <tcp_get_next_optbyte>
 80103b4:	4603      	mov	r3, r0
 80103b6:	b29a      	uxth	r2, r3
 80103b8:	89bb      	ldrh	r3, [r7, #12]
 80103ba:	4313      	orrs	r3, r2
 80103bc:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 80103be:	89bb      	ldrh	r3, [r7, #12]
 80103c0:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 80103c4:	d804      	bhi.n	80103d0 <tcp_parseopt+0x8c>
 80103c6:	89bb      	ldrh	r3, [r7, #12]
 80103c8:	2b00      	cmp	r3, #0
 80103ca:	d001      	beq.n	80103d0 <tcp_parseopt+0x8c>
 80103cc:	89ba      	ldrh	r2, [r7, #12]
 80103ce:	e001      	b.n	80103d4 <tcp_parseopt+0x90>
 80103d0:	f44f 7206 	mov.w	r2, #536	; 0x218
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 80103d8:	e010      	b.n	80103fc <tcp_parseopt+0xb8>
=======
 8010374:	f7ff ff98 	bl	80102a8 <tcp_get_next_optbyte>
 8010378:	4603      	mov	r3, r0
 801037a:	b29b      	uxth	r3, r3
 801037c:	021b      	lsls	r3, r3, #8
 801037e:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8010380:	f7ff ff92 	bl	80102a8 <tcp_get_next_optbyte>
 8010384:	4603      	mov	r3, r0
 8010386:	b29a      	uxth	r2, r3
 8010388:	89bb      	ldrh	r3, [r7, #12]
 801038a:	4313      	orrs	r3, r2
 801038c:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 801038e:	89bb      	ldrh	r3, [r7, #12]
 8010390:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8010394:	d804      	bhi.n	80103a0 <tcp_parseopt+0x8c>
 8010396:	89bb      	ldrh	r3, [r7, #12]
 8010398:	2b00      	cmp	r3, #0
 801039a:	d001      	beq.n	80103a0 <tcp_parseopt+0x8c>
 801039c:	89ba      	ldrh	r2, [r7, #12]
 801039e:	e001      	b.n	80103a4 <tcp_parseopt+0x90>
 80103a0:	f44f 7206 	mov.w	r2, #536	; 0x218
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 80103a8:	e010      	b.n	80103cc <tcp_parseopt+0xb8>
>>>>>>> Stashed changes
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
<<<<<<< Updated upstream
 80103da:	f7ff ff7d 	bl	80102d8 <tcp_get_next_optbyte>
 80103de:	4603      	mov	r3, r0
 80103e0:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 80103e2:	7afb      	ldrb	r3, [r7, #11]
 80103e4:	2b01      	cmp	r3, #1
 80103e6:	d914      	bls.n	8010412 <tcp_parseopt+0xce>
=======
 80103aa:	f7ff ff7d 	bl	80102a8 <tcp_get_next_optbyte>
 80103ae:	4603      	mov	r3, r0
 80103b0:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 80103b2:	7afb      	ldrb	r3, [r7, #11]
 80103b4:	2b01      	cmp	r3, #1
 80103b6:	d914      	bls.n	80103e2 <tcp_parseopt+0xce>
>>>>>>> Stashed changes
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
<<<<<<< Updated upstream
 80103e8:	7afb      	ldrb	r3, [r7, #11]
 80103ea:	b29a      	uxth	r2, r3
 80103ec:	4b0f      	ldr	r3, [pc, #60]	; (801042c <tcp_parseopt+0xe8>)
 80103ee:	881b      	ldrh	r3, [r3, #0]
 80103f0:	4413      	add	r3, r2
 80103f2:	b29b      	uxth	r3, r3
 80103f4:	3b02      	subs	r3, #2
 80103f6:	b29a      	uxth	r2, r3
 80103f8:	4b0c      	ldr	r3, [pc, #48]	; (801042c <tcp_parseopt+0xe8>)
 80103fa:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80103fc:	4b0b      	ldr	r3, [pc, #44]	; (801042c <tcp_parseopt+0xe8>)
 80103fe:	881a      	ldrh	r2, [r3, #0]
 8010400:	4b09      	ldr	r3, [pc, #36]	; (8010428 <tcp_parseopt+0xe4>)
 8010402:	881b      	ldrh	r3, [r3, #0]
 8010404:	429a      	cmp	r2, r3
 8010406:	d3b3      	bcc.n	8010370 <tcp_parseopt+0x2c>
 8010408:	e004      	b.n	8010414 <tcp_parseopt+0xd0>
          return;
 801040a:	bf00      	nop
 801040c:	e002      	b.n	8010414 <tcp_parseopt+0xd0>
            return;
 801040e:	bf00      	nop
 8010410:	e000      	b.n	8010414 <tcp_parseopt+0xd0>
            return;
 8010412:	bf00      	nop
=======
 80103b8:	7afb      	ldrb	r3, [r7, #11]
 80103ba:	b29a      	uxth	r2, r3
 80103bc:	4b0f      	ldr	r3, [pc, #60]	; (80103fc <tcp_parseopt+0xe8>)
 80103be:	881b      	ldrh	r3, [r3, #0]
 80103c0:	4413      	add	r3, r2
 80103c2:	b29b      	uxth	r3, r3
 80103c4:	3b02      	subs	r3, #2
 80103c6:	b29a      	uxth	r2, r3
 80103c8:	4b0c      	ldr	r3, [pc, #48]	; (80103fc <tcp_parseopt+0xe8>)
 80103ca:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80103cc:	4b0b      	ldr	r3, [pc, #44]	; (80103fc <tcp_parseopt+0xe8>)
 80103ce:	881a      	ldrh	r2, [r3, #0]
 80103d0:	4b09      	ldr	r3, [pc, #36]	; (80103f8 <tcp_parseopt+0xe4>)
 80103d2:	881b      	ldrh	r3, [r3, #0]
 80103d4:	429a      	cmp	r2, r3
 80103d6:	d3b3      	bcc.n	8010340 <tcp_parseopt+0x2c>
 80103d8:	e004      	b.n	80103e4 <tcp_parseopt+0xd0>
          return;
 80103da:	bf00      	nop
 80103dc:	e002      	b.n	80103e4 <tcp_parseopt+0xd0>
            return;
 80103de:	bf00      	nop
 80103e0:	e000      	b.n	80103e4 <tcp_parseopt+0xd0>
            return;
 80103e2:	bf00      	nop
>>>>>>> Stashed changes
      }
    }
  }
}
<<<<<<< Updated upstream
 8010414:	3710      	adds	r7, #16
 8010416:	46bd      	mov	sp, r7
 8010418:	bd80      	pop	{r7, pc}
 801041a:	bf00      	nop
 801041c:	08016b90 	.word	0x08016b90
 8010420:	08016ff4 	.word	0x08016ff4
 8010424:	08016bdc 	.word	0x08016bdc
 8010428:	200000fc 	.word	0x200000fc
 801042c:	20000104 	.word	0x20000104

08010430 <tcp_trigger_input_pcb_close>:
=======
 80103e4:	3710      	adds	r7, #16
 80103e6:	46bd      	mov	sp, r7
 80103e8:	bd80      	pop	{r7, pc}
 80103ea:	bf00      	nop
 80103ec:	08016b74 	.word	0x08016b74
 80103f0:	08016fd8 	.word	0x08016fd8
 80103f4:	08016bc0 	.word	0x08016bc0
 80103f8:	200000fc 	.word	0x200000fc
 80103fc:	20000104 	.word	0x20000104

08010400 <tcp_trigger_input_pcb_close>:
>>>>>>> Stashed changes

void
tcp_trigger_input_pcb_close(void)
{
<<<<<<< Updated upstream
 8010430:	b480      	push	{r7}
 8010432:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8010434:	4b05      	ldr	r3, [pc, #20]	; (801044c <tcp_trigger_input_pcb_close+0x1c>)
 8010436:	781b      	ldrb	r3, [r3, #0]
 8010438:	f043 0310 	orr.w	r3, r3, #16
 801043c:	b2da      	uxtb	r2, r3
 801043e:	4b03      	ldr	r3, [pc, #12]	; (801044c <tcp_trigger_input_pcb_close+0x1c>)
 8010440:	701a      	strb	r2, [r3, #0]
}
 8010442:	bf00      	nop
 8010444:	46bd      	mov	sp, r7
 8010446:	f85d 7b04 	ldr.w	r7, [sp], #4
 801044a:	4770      	bx	lr
 801044c:	20000115 	.word	0x20000115

08010450 <tcp_route>:
=======
 8010400:	b480      	push	{r7}
 8010402:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8010404:	4b05      	ldr	r3, [pc, #20]	; (801041c <tcp_trigger_input_pcb_close+0x1c>)
 8010406:	781b      	ldrb	r3, [r3, #0]
 8010408:	f043 0310 	orr.w	r3, r3, #16
 801040c:	b2da      	uxtb	r2, r3
 801040e:	4b03      	ldr	r3, [pc, #12]	; (801041c <tcp_trigger_input_pcb_close+0x1c>)
 8010410:	701a      	strb	r2, [r3, #0]
}
 8010412:	bf00      	nop
 8010414:	46bd      	mov	sp, r7
 8010416:	f85d 7b04 	ldr.w	r7, [sp], #4
 801041a:	4770      	bx	lr
 801041c:	20000115 	.word	0x20000115

08010420 <tcp_route>:
>>>>>>> Stashed changes
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
<<<<<<< Updated upstream
 8010450:	b580      	push	{r7, lr}
 8010452:	b084      	sub	sp, #16
 8010454:	af00      	add	r7, sp, #0
 8010456:	60f8      	str	r0, [r7, #12]
 8010458:	60b9      	str	r1, [r7, #8]
 801045a:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 801045c:	68fb      	ldr	r3, [r7, #12]
 801045e:	2b00      	cmp	r3, #0
 8010460:	d00a      	beq.n	8010478 <tcp_route+0x28>
 8010462:	68fb      	ldr	r3, [r7, #12]
 8010464:	7a1b      	ldrb	r3, [r3, #8]
 8010466:	2b00      	cmp	r3, #0
 8010468:	d006      	beq.n	8010478 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 801046a:	68fb      	ldr	r3, [r7, #12]
 801046c:	7a1b      	ldrb	r3, [r3, #8]
 801046e:	4618      	mov	r0, r3
 8010470:	f7fb fb7e 	bl	800bb70 <netif_get_by_index>
 8010474:	4603      	mov	r3, r0
 8010476:	e003      	b.n	8010480 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8010478:	6878      	ldr	r0, [r7, #4]
 801047a:	f002 fe3b 	bl	80130f4 <ip4_route>
 801047e:	4603      	mov	r3, r0
  }
}
 8010480:	4618      	mov	r0, r3
 8010482:	3710      	adds	r7, #16
 8010484:	46bd      	mov	sp, r7
 8010486:	bd80      	pop	{r7, pc}

08010488 <tcp_create_segment>:
=======
 8010420:	b580      	push	{r7, lr}
 8010422:	b084      	sub	sp, #16
 8010424:	af00      	add	r7, sp, #0
 8010426:	60f8      	str	r0, [r7, #12]
 8010428:	60b9      	str	r1, [r7, #8]
 801042a:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 801042c:	68fb      	ldr	r3, [r7, #12]
 801042e:	2b00      	cmp	r3, #0
 8010430:	d00a      	beq.n	8010448 <tcp_route+0x28>
 8010432:	68fb      	ldr	r3, [r7, #12]
 8010434:	7a1b      	ldrb	r3, [r3, #8]
 8010436:	2b00      	cmp	r3, #0
 8010438:	d006      	beq.n	8010448 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 801043a:	68fb      	ldr	r3, [r7, #12]
 801043c:	7a1b      	ldrb	r3, [r3, #8]
 801043e:	4618      	mov	r0, r3
 8010440:	f7fb fb7e 	bl	800bb40 <netif_get_by_index>
 8010444:	4603      	mov	r3, r0
 8010446:	e003      	b.n	8010450 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8010448:	6878      	ldr	r0, [r7, #4]
 801044a:	f002 fe3b 	bl	80130c4 <ip4_route>
 801044e:	4603      	mov	r3, r0
  }
}
 8010450:	4618      	mov	r0, r3
 8010452:	3710      	adds	r7, #16
 8010454:	46bd      	mov	sp, r7
 8010456:	bd80      	pop	{r7, pc}

08010458 <tcp_create_segment>:
>>>>>>> Stashed changes
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
<<<<<<< Updated upstream
 8010488:	b590      	push	{r4, r7, lr}
 801048a:	b087      	sub	sp, #28
 801048c:	af00      	add	r7, sp, #0
 801048e:	60f8      	str	r0, [r7, #12]
 8010490:	60b9      	str	r1, [r7, #8]
 8010492:	603b      	str	r3, [r7, #0]
 8010494:	4613      	mov	r3, r2
 8010496:	71fb      	strb	r3, [r7, #7]
=======
 8010458:	b590      	push	{r4, r7, lr}
 801045a:	b087      	sub	sp, #28
 801045c:	af00      	add	r7, sp, #0
 801045e:	60f8      	str	r0, [r7, #12]
 8010460:	60b9      	str	r1, [r7, #8]
 8010462:	603b      	str	r3, [r7, #0]
 8010464:	4613      	mov	r3, r2
 8010466:	71fb      	strb	r3, [r7, #7]
>>>>>>> Stashed changes
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
<<<<<<< Updated upstream
 8010498:	68fb      	ldr	r3, [r7, #12]
 801049a:	2b00      	cmp	r3, #0
 801049c:	d105      	bne.n	80104aa <tcp_create_segment+0x22>
 801049e:	4b44      	ldr	r3, [pc, #272]	; (80105b0 <tcp_create_segment+0x128>)
 80104a0:	22a3      	movs	r2, #163	; 0xa3
 80104a2:	4944      	ldr	r1, [pc, #272]	; (80105b4 <tcp_create_segment+0x12c>)
 80104a4:	4844      	ldr	r0, [pc, #272]	; (80105b8 <tcp_create_segment+0x130>)
 80104a6:	f004 f86d 	bl	8014584 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 80104aa:	68bb      	ldr	r3, [r7, #8]
 80104ac:	2b00      	cmp	r3, #0
 80104ae:	d105      	bne.n	80104bc <tcp_create_segment+0x34>
 80104b0:	4b3f      	ldr	r3, [pc, #252]	; (80105b0 <tcp_create_segment+0x128>)
 80104b2:	22a4      	movs	r2, #164	; 0xa4
 80104b4:	4941      	ldr	r1, [pc, #260]	; (80105bc <tcp_create_segment+0x134>)
 80104b6:	4840      	ldr	r0, [pc, #256]	; (80105b8 <tcp_create_segment+0x130>)
 80104b8:	f004 f864 	bl	8014584 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80104bc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80104c0:	009b      	lsls	r3, r3, #2
 80104c2:	b2db      	uxtb	r3, r3
 80104c4:	f003 0304 	and.w	r3, r3, #4
 80104c8:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 80104ca:	2003      	movs	r0, #3
 80104cc:	f7fb f852 	bl	800b574 <memp_malloc>
 80104d0:	6138      	str	r0, [r7, #16]
 80104d2:	693b      	ldr	r3, [r7, #16]
 80104d4:	2b00      	cmp	r3, #0
 80104d6:	d104      	bne.n	80104e2 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 80104d8:	68b8      	ldr	r0, [r7, #8]
 80104da:	f7fb fe89 	bl	800c1f0 <pbuf_free>
    return NULL;
 80104de:	2300      	movs	r3, #0
 80104e0:	e061      	b.n	80105a6 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 80104e2:	693b      	ldr	r3, [r7, #16]
 80104e4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80104e8:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 80104ea:	693b      	ldr	r3, [r7, #16]
 80104ec:	2200      	movs	r2, #0
 80104ee:	601a      	str	r2, [r3, #0]
  seg->p = p;
 80104f0:	693b      	ldr	r3, [r7, #16]
 80104f2:	68ba      	ldr	r2, [r7, #8]
 80104f4:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 80104f6:	68bb      	ldr	r3, [r7, #8]
 80104f8:	891a      	ldrh	r2, [r3, #8]
 80104fa:	7dfb      	ldrb	r3, [r7, #23]
 80104fc:	b29b      	uxth	r3, r3
 80104fe:	429a      	cmp	r2, r3
 8010500:	d205      	bcs.n	801050e <tcp_create_segment+0x86>
 8010502:	4b2b      	ldr	r3, [pc, #172]	; (80105b0 <tcp_create_segment+0x128>)
 8010504:	22b0      	movs	r2, #176	; 0xb0
 8010506:	492e      	ldr	r1, [pc, #184]	; (80105c0 <tcp_create_segment+0x138>)
 8010508:	482b      	ldr	r0, [pc, #172]	; (80105b8 <tcp_create_segment+0x130>)
 801050a:	f004 f83b 	bl	8014584 <iprintf>
  seg->len = p->tot_len - optlen;
 801050e:	68bb      	ldr	r3, [r7, #8]
 8010510:	891a      	ldrh	r2, [r3, #8]
 8010512:	7dfb      	ldrb	r3, [r7, #23]
 8010514:	b29b      	uxth	r3, r3
 8010516:	1ad3      	subs	r3, r2, r3
 8010518:	b29a      	uxth	r2, r3
 801051a:	693b      	ldr	r3, [r7, #16]
 801051c:	811a      	strh	r2, [r3, #8]
=======
 8010468:	68fb      	ldr	r3, [r7, #12]
 801046a:	2b00      	cmp	r3, #0
 801046c:	d105      	bne.n	801047a <tcp_create_segment+0x22>
 801046e:	4b44      	ldr	r3, [pc, #272]	; (8010580 <tcp_create_segment+0x128>)
 8010470:	22a3      	movs	r2, #163	; 0xa3
 8010472:	4944      	ldr	r1, [pc, #272]	; (8010584 <tcp_create_segment+0x12c>)
 8010474:	4844      	ldr	r0, [pc, #272]	; (8010588 <tcp_create_segment+0x130>)
 8010476:	f004 f86d 	bl	8014554 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 801047a:	68bb      	ldr	r3, [r7, #8]
 801047c:	2b00      	cmp	r3, #0
 801047e:	d105      	bne.n	801048c <tcp_create_segment+0x34>
 8010480:	4b3f      	ldr	r3, [pc, #252]	; (8010580 <tcp_create_segment+0x128>)
 8010482:	22a4      	movs	r2, #164	; 0xa4
 8010484:	4941      	ldr	r1, [pc, #260]	; (801058c <tcp_create_segment+0x134>)
 8010486:	4840      	ldr	r0, [pc, #256]	; (8010588 <tcp_create_segment+0x130>)
 8010488:	f004 f864 	bl	8014554 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801048c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8010490:	009b      	lsls	r3, r3, #2
 8010492:	b2db      	uxtb	r3, r3
 8010494:	f003 0304 	and.w	r3, r3, #4
 8010498:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801049a:	2003      	movs	r0, #3
 801049c:	f7fb f852 	bl	800b544 <memp_malloc>
 80104a0:	6138      	str	r0, [r7, #16]
 80104a2:	693b      	ldr	r3, [r7, #16]
 80104a4:	2b00      	cmp	r3, #0
 80104a6:	d104      	bne.n	80104b2 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 80104a8:	68b8      	ldr	r0, [r7, #8]
 80104aa:	f7fb fe89 	bl	800c1c0 <pbuf_free>
    return NULL;
 80104ae:	2300      	movs	r3, #0
 80104b0:	e061      	b.n	8010576 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 80104b2:	693b      	ldr	r3, [r7, #16]
 80104b4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80104b8:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 80104ba:	693b      	ldr	r3, [r7, #16]
 80104bc:	2200      	movs	r2, #0
 80104be:	601a      	str	r2, [r3, #0]
  seg->p = p;
 80104c0:	693b      	ldr	r3, [r7, #16]
 80104c2:	68ba      	ldr	r2, [r7, #8]
 80104c4:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 80104c6:	68bb      	ldr	r3, [r7, #8]
 80104c8:	891a      	ldrh	r2, [r3, #8]
 80104ca:	7dfb      	ldrb	r3, [r7, #23]
 80104cc:	b29b      	uxth	r3, r3
 80104ce:	429a      	cmp	r2, r3
 80104d0:	d205      	bcs.n	80104de <tcp_create_segment+0x86>
 80104d2:	4b2b      	ldr	r3, [pc, #172]	; (8010580 <tcp_create_segment+0x128>)
 80104d4:	22b0      	movs	r2, #176	; 0xb0
 80104d6:	492e      	ldr	r1, [pc, #184]	; (8010590 <tcp_create_segment+0x138>)
 80104d8:	482b      	ldr	r0, [pc, #172]	; (8010588 <tcp_create_segment+0x130>)
 80104da:	f004 f83b 	bl	8014554 <iprintf>
  seg->len = p->tot_len - optlen;
 80104de:	68bb      	ldr	r3, [r7, #8]
 80104e0:	891a      	ldrh	r2, [r3, #8]
 80104e2:	7dfb      	ldrb	r3, [r7, #23]
 80104e4:	b29b      	uxth	r3, r3
 80104e6:	1ad3      	subs	r3, r2, r3
 80104e8:	b29a      	uxth	r2, r3
 80104ea:	693b      	ldr	r3, [r7, #16]
 80104ec:	811a      	strh	r2, [r3, #8]
>>>>>>> Stashed changes
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
<<<<<<< Updated upstream
 801051e:	2114      	movs	r1, #20
 8010520:	68b8      	ldr	r0, [r7, #8]
 8010522:	f7fb fdcf 	bl	800c0c4 <pbuf_add_header>
 8010526:	4603      	mov	r3, r0
 8010528:	2b00      	cmp	r3, #0
 801052a:	d004      	beq.n	8010536 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 801052c:	6938      	ldr	r0, [r7, #16]
 801052e:	f7fd f8d2 	bl	800d6d6 <tcp_seg_free>
    return NULL;
 8010532:	2300      	movs	r3, #0
 8010534:	e037      	b.n	80105a6 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8010536:	693b      	ldr	r3, [r7, #16]
 8010538:	685b      	ldr	r3, [r3, #4]
 801053a:	685a      	ldr	r2, [r3, #4]
 801053c:	693b      	ldr	r3, [r7, #16]
 801053e:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8010540:	68fb      	ldr	r3, [r7, #12]
 8010542:	8ada      	ldrh	r2, [r3, #22]
 8010544:	693b      	ldr	r3, [r7, #16]
 8010546:	68dc      	ldr	r4, [r3, #12]
 8010548:	4610      	mov	r0, r2
 801054a:	f7fa fbbe 	bl	800acca <lwip_htons>
 801054e:	4603      	mov	r3, r0
 8010550:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8010552:	68fb      	ldr	r3, [r7, #12]
 8010554:	8b1a      	ldrh	r2, [r3, #24]
 8010556:	693b      	ldr	r3, [r7, #16]
 8010558:	68dc      	ldr	r4, [r3, #12]
 801055a:	4610      	mov	r0, r2
 801055c:	f7fa fbb5 	bl	800acca <lwip_htons>
 8010560:	4603      	mov	r3, r0
 8010562:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8010564:	693b      	ldr	r3, [r7, #16]
 8010566:	68dc      	ldr	r4, [r3, #12]
 8010568:	6838      	ldr	r0, [r7, #0]
 801056a:	f7fa fbc3 	bl	800acf4 <lwip_htonl>
 801056e:	4603      	mov	r3, r0
 8010570:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8010572:	7dfb      	ldrb	r3, [r7, #23]
 8010574:	089b      	lsrs	r3, r3, #2
 8010576:	b2db      	uxtb	r3, r3
 8010578:	b29b      	uxth	r3, r3
 801057a:	3305      	adds	r3, #5
 801057c:	b29b      	uxth	r3, r3
 801057e:	031b      	lsls	r3, r3, #12
 8010580:	b29a      	uxth	r2, r3
 8010582:	79fb      	ldrb	r3, [r7, #7]
 8010584:	b29b      	uxth	r3, r3
 8010586:	4313      	orrs	r3, r2
 8010588:	b29a      	uxth	r2, r3
 801058a:	693b      	ldr	r3, [r7, #16]
 801058c:	68dc      	ldr	r4, [r3, #12]
 801058e:	4610      	mov	r0, r2
 8010590:	f7fa fb9b 	bl	800acca <lwip_htons>
 8010594:	4603      	mov	r3, r0
 8010596:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8010598:	693b      	ldr	r3, [r7, #16]
 801059a:	68db      	ldr	r3, [r3, #12]
 801059c:	2200      	movs	r2, #0
 801059e:	749a      	strb	r2, [r3, #18]
 80105a0:	2200      	movs	r2, #0
 80105a2:	74da      	strb	r2, [r3, #19]
  return seg;
 80105a4:	693b      	ldr	r3, [r7, #16]
}
 80105a6:	4618      	mov	r0, r3
 80105a8:	371c      	adds	r7, #28
 80105aa:	46bd      	mov	sp, r7
 80105ac:	bd90      	pop	{r4, r7, pc}
 80105ae:	bf00      	nop
 80105b0:	08017010 	.word	0x08017010
 80105b4:	08017044 	.word	0x08017044
 80105b8:	08017064 	.word	0x08017064
 80105bc:	0801708c 	.word	0x0801708c
 80105c0:	080170b0 	.word	0x080170b0

080105c4 <tcp_split_unsent_seg>:
=======
 80104ee:	2114      	movs	r1, #20
 80104f0:	68b8      	ldr	r0, [r7, #8]
 80104f2:	f7fb fdcf 	bl	800c094 <pbuf_add_header>
 80104f6:	4603      	mov	r3, r0
 80104f8:	2b00      	cmp	r3, #0
 80104fa:	d004      	beq.n	8010506 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 80104fc:	6938      	ldr	r0, [r7, #16]
 80104fe:	f7fd f8d2 	bl	800d6a6 <tcp_seg_free>
    return NULL;
 8010502:	2300      	movs	r3, #0
 8010504:	e037      	b.n	8010576 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8010506:	693b      	ldr	r3, [r7, #16]
 8010508:	685b      	ldr	r3, [r3, #4]
 801050a:	685a      	ldr	r2, [r3, #4]
 801050c:	693b      	ldr	r3, [r7, #16]
 801050e:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8010510:	68fb      	ldr	r3, [r7, #12]
 8010512:	8ada      	ldrh	r2, [r3, #22]
 8010514:	693b      	ldr	r3, [r7, #16]
 8010516:	68dc      	ldr	r4, [r3, #12]
 8010518:	4610      	mov	r0, r2
 801051a:	f7fa fbbe 	bl	800ac9a <lwip_htons>
 801051e:	4603      	mov	r3, r0
 8010520:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8010522:	68fb      	ldr	r3, [r7, #12]
 8010524:	8b1a      	ldrh	r2, [r3, #24]
 8010526:	693b      	ldr	r3, [r7, #16]
 8010528:	68dc      	ldr	r4, [r3, #12]
 801052a:	4610      	mov	r0, r2
 801052c:	f7fa fbb5 	bl	800ac9a <lwip_htons>
 8010530:	4603      	mov	r3, r0
 8010532:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8010534:	693b      	ldr	r3, [r7, #16]
 8010536:	68dc      	ldr	r4, [r3, #12]
 8010538:	6838      	ldr	r0, [r7, #0]
 801053a:	f7fa fbc3 	bl	800acc4 <lwip_htonl>
 801053e:	4603      	mov	r3, r0
 8010540:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8010542:	7dfb      	ldrb	r3, [r7, #23]
 8010544:	089b      	lsrs	r3, r3, #2
 8010546:	b2db      	uxtb	r3, r3
 8010548:	b29b      	uxth	r3, r3
 801054a:	3305      	adds	r3, #5
 801054c:	b29b      	uxth	r3, r3
 801054e:	031b      	lsls	r3, r3, #12
 8010550:	b29a      	uxth	r2, r3
 8010552:	79fb      	ldrb	r3, [r7, #7]
 8010554:	b29b      	uxth	r3, r3
 8010556:	4313      	orrs	r3, r2
 8010558:	b29a      	uxth	r2, r3
 801055a:	693b      	ldr	r3, [r7, #16]
 801055c:	68dc      	ldr	r4, [r3, #12]
 801055e:	4610      	mov	r0, r2
 8010560:	f7fa fb9b 	bl	800ac9a <lwip_htons>
 8010564:	4603      	mov	r3, r0
 8010566:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8010568:	693b      	ldr	r3, [r7, #16]
 801056a:	68db      	ldr	r3, [r3, #12]
 801056c:	2200      	movs	r2, #0
 801056e:	749a      	strb	r2, [r3, #18]
 8010570:	2200      	movs	r2, #0
 8010572:	74da      	strb	r2, [r3, #19]
  return seg;
 8010574:	693b      	ldr	r3, [r7, #16]
}
 8010576:	4618      	mov	r0, r3
 8010578:	371c      	adds	r7, #28
 801057a:	46bd      	mov	sp, r7
 801057c:	bd90      	pop	{r4, r7, pc}
 801057e:	bf00      	nop
 8010580:	08016ff4 	.word	0x08016ff4
 8010584:	08017028 	.word	0x08017028
 8010588:	08017048 	.word	0x08017048
 801058c:	08017070 	.word	0x08017070
 8010590:	08017094 	.word	0x08017094

08010594 <tcp_split_unsent_seg>:
>>>>>>> Stashed changes
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
<<<<<<< Updated upstream
 80105c4:	b590      	push	{r4, r7, lr}
 80105c6:	b08b      	sub	sp, #44	; 0x2c
 80105c8:	af02      	add	r7, sp, #8
 80105ca:	6078      	str	r0, [r7, #4]
 80105cc:	460b      	mov	r3, r1
 80105ce:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 80105d0:	2300      	movs	r3, #0
 80105d2:	61fb      	str	r3, [r7, #28]
 80105d4:	2300      	movs	r3, #0
 80105d6:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80105d8:	2300      	movs	r3, #0
 80105da:	613b      	str	r3, [r7, #16]
=======
 8010594:	b590      	push	{r4, r7, lr}
 8010596:	b08b      	sub	sp, #44	; 0x2c
 8010598:	af02      	add	r7, sp, #8
 801059a:	6078      	str	r0, [r7, #4]
 801059c:	460b      	mov	r3, r1
 801059e:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 80105a0:	2300      	movs	r3, #0
 80105a2:	61fb      	str	r3, [r7, #28]
 80105a4:	2300      	movs	r3, #0
 80105a6:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80105a8:	2300      	movs	r3, #0
 80105aa:	613b      	str	r3, [r7, #16]
>>>>>>> Stashed changes
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
<<<<<<< Updated upstream
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	2b00      	cmp	r3, #0
 80105e0:	d106      	bne.n	80105f0 <tcp_split_unsent_seg+0x2c>
 80105e2:	4b95      	ldr	r3, [pc, #596]	; (8010838 <tcp_split_unsent_seg+0x274>)
 80105e4:	f240 324b 	movw	r2, #843	; 0x34b
 80105e8:	4994      	ldr	r1, [pc, #592]	; (801083c <tcp_split_unsent_seg+0x278>)
 80105ea:	4895      	ldr	r0, [pc, #596]	; (8010840 <tcp_split_unsent_seg+0x27c>)
 80105ec:	f003 ffca 	bl	8014584 <iprintf>

  useg = pcb->unsent;
 80105f0:	687b      	ldr	r3, [r7, #4]
 80105f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80105f4:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 80105f6:	697b      	ldr	r3, [r7, #20]
 80105f8:	2b00      	cmp	r3, #0
 80105fa:	d102      	bne.n	8010602 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 80105fc:	f04f 33ff 	mov.w	r3, #4294967295
 8010600:	e116      	b.n	8010830 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8010602:	887b      	ldrh	r3, [r7, #2]
 8010604:	2b00      	cmp	r3, #0
 8010606:	d109      	bne.n	801061c <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8010608:	4b8b      	ldr	r3, [pc, #556]	; (8010838 <tcp_split_unsent_seg+0x274>)
 801060a:	f240 3253 	movw	r2, #851	; 0x353
 801060e:	498d      	ldr	r1, [pc, #564]	; (8010844 <tcp_split_unsent_seg+0x280>)
 8010610:	488b      	ldr	r0, [pc, #556]	; (8010840 <tcp_split_unsent_seg+0x27c>)
 8010612:	f003 ffb7 	bl	8014584 <iprintf>
    return ERR_VAL;
 8010616:	f06f 0305 	mvn.w	r3, #5
 801061a:	e109      	b.n	8010830 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 801061c:	697b      	ldr	r3, [r7, #20]
 801061e:	891b      	ldrh	r3, [r3, #8]
 8010620:	887a      	ldrh	r2, [r7, #2]
 8010622:	429a      	cmp	r2, r3
 8010624:	d301      	bcc.n	801062a <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8010626:	2300      	movs	r3, #0
 8010628:	e102      	b.n	8010830 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801062e:	887a      	ldrh	r2, [r7, #2]
 8010630:	429a      	cmp	r2, r3
 8010632:	d906      	bls.n	8010642 <tcp_split_unsent_seg+0x7e>
 8010634:	4b80      	ldr	r3, [pc, #512]	; (8010838 <tcp_split_unsent_seg+0x274>)
 8010636:	f240 325b 	movw	r2, #859	; 0x35b
 801063a:	4983      	ldr	r1, [pc, #524]	; (8010848 <tcp_split_unsent_seg+0x284>)
 801063c:	4880      	ldr	r0, [pc, #512]	; (8010840 <tcp_split_unsent_seg+0x27c>)
 801063e:	f003 ffa1 	bl	8014584 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8010642:	697b      	ldr	r3, [r7, #20]
 8010644:	891b      	ldrh	r3, [r3, #8]
 8010646:	2b00      	cmp	r3, #0
 8010648:	d106      	bne.n	8010658 <tcp_split_unsent_seg+0x94>
 801064a:	4b7b      	ldr	r3, [pc, #492]	; (8010838 <tcp_split_unsent_seg+0x274>)
 801064c:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8010650:	497e      	ldr	r1, [pc, #504]	; (801084c <tcp_split_unsent_seg+0x288>)
 8010652:	487b      	ldr	r0, [pc, #492]	; (8010840 <tcp_split_unsent_seg+0x27c>)
 8010654:	f003 ff96 	bl	8014584 <iprintf>
=======
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	2b00      	cmp	r3, #0
 80105b0:	d106      	bne.n	80105c0 <tcp_split_unsent_seg+0x2c>
 80105b2:	4b95      	ldr	r3, [pc, #596]	; (8010808 <tcp_split_unsent_seg+0x274>)
 80105b4:	f240 324b 	movw	r2, #843	; 0x34b
 80105b8:	4994      	ldr	r1, [pc, #592]	; (801080c <tcp_split_unsent_seg+0x278>)
 80105ba:	4895      	ldr	r0, [pc, #596]	; (8010810 <tcp_split_unsent_seg+0x27c>)
 80105bc:	f003 ffca 	bl	8014554 <iprintf>

  useg = pcb->unsent;
 80105c0:	687b      	ldr	r3, [r7, #4]
 80105c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80105c4:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 80105c6:	697b      	ldr	r3, [r7, #20]
 80105c8:	2b00      	cmp	r3, #0
 80105ca:	d102      	bne.n	80105d2 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 80105cc:	f04f 33ff 	mov.w	r3, #4294967295
 80105d0:	e116      	b.n	8010800 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 80105d2:	887b      	ldrh	r3, [r7, #2]
 80105d4:	2b00      	cmp	r3, #0
 80105d6:	d109      	bne.n	80105ec <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 80105d8:	4b8b      	ldr	r3, [pc, #556]	; (8010808 <tcp_split_unsent_seg+0x274>)
 80105da:	f240 3253 	movw	r2, #851	; 0x353
 80105de:	498d      	ldr	r1, [pc, #564]	; (8010814 <tcp_split_unsent_seg+0x280>)
 80105e0:	488b      	ldr	r0, [pc, #556]	; (8010810 <tcp_split_unsent_seg+0x27c>)
 80105e2:	f003 ffb7 	bl	8014554 <iprintf>
    return ERR_VAL;
 80105e6:	f06f 0305 	mvn.w	r3, #5
 80105ea:	e109      	b.n	8010800 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 80105ec:	697b      	ldr	r3, [r7, #20]
 80105ee:	891b      	ldrh	r3, [r3, #8]
 80105f0:	887a      	ldrh	r2, [r7, #2]
 80105f2:	429a      	cmp	r2, r3
 80105f4:	d301      	bcc.n	80105fa <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 80105f6:	2300      	movs	r3, #0
 80105f8:	e102      	b.n	8010800 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 80105fa:	687b      	ldr	r3, [r7, #4]
 80105fc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80105fe:	887a      	ldrh	r2, [r7, #2]
 8010600:	429a      	cmp	r2, r3
 8010602:	d906      	bls.n	8010612 <tcp_split_unsent_seg+0x7e>
 8010604:	4b80      	ldr	r3, [pc, #512]	; (8010808 <tcp_split_unsent_seg+0x274>)
 8010606:	f240 325b 	movw	r2, #859	; 0x35b
 801060a:	4983      	ldr	r1, [pc, #524]	; (8010818 <tcp_split_unsent_seg+0x284>)
 801060c:	4880      	ldr	r0, [pc, #512]	; (8010810 <tcp_split_unsent_seg+0x27c>)
 801060e:	f003 ffa1 	bl	8014554 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8010612:	697b      	ldr	r3, [r7, #20]
 8010614:	891b      	ldrh	r3, [r3, #8]
 8010616:	2b00      	cmp	r3, #0
 8010618:	d106      	bne.n	8010628 <tcp_split_unsent_seg+0x94>
 801061a:	4b7b      	ldr	r3, [pc, #492]	; (8010808 <tcp_split_unsent_seg+0x274>)
 801061c:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8010620:	497e      	ldr	r1, [pc, #504]	; (801081c <tcp_split_unsent_seg+0x288>)
 8010622:	487b      	ldr	r0, [pc, #492]	; (8010810 <tcp_split_unsent_seg+0x27c>)
 8010624:	f003 ff96 	bl	8014554 <iprintf>
>>>>>>> Stashed changes
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
<<<<<<< Updated upstream
 8010658:	697b      	ldr	r3, [r7, #20]
 801065a:	7a9b      	ldrb	r3, [r3, #10]
 801065c:	73fb      	strb	r3, [r7, #15]
=======
 8010628:	697b      	ldr	r3, [r7, #20]
 801062a:	7a9b      	ldrb	r3, [r3, #10]
 801062c:	73fb      	strb	r3, [r7, #15]
>>>>>>> Stashed changes
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
<<<<<<< Updated upstream
 801065e:	7bfb      	ldrb	r3, [r7, #15]
 8010660:	009b      	lsls	r3, r3, #2
 8010662:	b2db      	uxtb	r3, r3
 8010664:	f003 0304 	and.w	r3, r3, #4
 8010668:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 801066a:	697b      	ldr	r3, [r7, #20]
 801066c:	891a      	ldrh	r2, [r3, #8]
 801066e:	887b      	ldrh	r3, [r7, #2]
 8010670:	1ad3      	subs	r3, r2, r3
 8010672:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8010674:	7bbb      	ldrb	r3, [r7, #14]
 8010676:	b29a      	uxth	r2, r3
 8010678:	89bb      	ldrh	r3, [r7, #12]
 801067a:	4413      	add	r3, r2
 801067c:	b29b      	uxth	r3, r3
 801067e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010682:	4619      	mov	r1, r3
 8010684:	2036      	movs	r0, #54	; 0x36
 8010686:	f7fb facf 	bl	800bc28 <pbuf_alloc>
 801068a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801068c:	693b      	ldr	r3, [r7, #16]
 801068e:	2b00      	cmp	r3, #0
 8010690:	f000 80b7 	beq.w	8010802 <tcp_split_unsent_seg+0x23e>
=======
 801062e:	7bfb      	ldrb	r3, [r7, #15]
 8010630:	009b      	lsls	r3, r3, #2
 8010632:	b2db      	uxtb	r3, r3
 8010634:	f003 0304 	and.w	r3, r3, #4
 8010638:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 801063a:	697b      	ldr	r3, [r7, #20]
 801063c:	891a      	ldrh	r2, [r3, #8]
 801063e:	887b      	ldrh	r3, [r7, #2]
 8010640:	1ad3      	subs	r3, r2, r3
 8010642:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8010644:	7bbb      	ldrb	r3, [r7, #14]
 8010646:	b29a      	uxth	r2, r3
 8010648:	89bb      	ldrh	r3, [r7, #12]
 801064a:	4413      	add	r3, r2
 801064c:	b29b      	uxth	r3, r3
 801064e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010652:	4619      	mov	r1, r3
 8010654:	2036      	movs	r0, #54	; 0x36
 8010656:	f7fb facf 	bl	800bbf8 <pbuf_alloc>
 801065a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801065c:	693b      	ldr	r3, [r7, #16]
 801065e:	2b00      	cmp	r3, #0
 8010660:	f000 80b7 	beq.w	80107d2 <tcp_split_unsent_seg+0x23e>
>>>>>>> Stashed changes
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
<<<<<<< Updated upstream
 8010694:	697b      	ldr	r3, [r7, #20]
 8010696:	685b      	ldr	r3, [r3, #4]
 8010698:	891a      	ldrh	r2, [r3, #8]
 801069a:	697b      	ldr	r3, [r7, #20]
 801069c:	891b      	ldrh	r3, [r3, #8]
 801069e:	1ad3      	subs	r3, r2, r3
 80106a0:	b29a      	uxth	r2, r3
 80106a2:	887b      	ldrh	r3, [r7, #2]
 80106a4:	4413      	add	r3, r2
 80106a6:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 80106a8:	697b      	ldr	r3, [r7, #20]
 80106aa:	6858      	ldr	r0, [r3, #4]
 80106ac:	693b      	ldr	r3, [r7, #16]
 80106ae:	685a      	ldr	r2, [r3, #4]
 80106b0:	7bbb      	ldrb	r3, [r7, #14]
 80106b2:	18d1      	adds	r1, r2, r3
 80106b4:	897b      	ldrh	r3, [r7, #10]
 80106b6:	89ba      	ldrh	r2, [r7, #12]
 80106b8:	f7fb ff84 	bl	800c5c4 <pbuf_copy_partial>
 80106bc:	4603      	mov	r3, r0
 80106be:	461a      	mov	r2, r3
 80106c0:	89bb      	ldrh	r3, [r7, #12]
 80106c2:	4293      	cmp	r3, r2
 80106c4:	f040 809f 	bne.w	8010806 <tcp_split_unsent_seg+0x242>
=======
 8010664:	697b      	ldr	r3, [r7, #20]
 8010666:	685b      	ldr	r3, [r3, #4]
 8010668:	891a      	ldrh	r2, [r3, #8]
 801066a:	697b      	ldr	r3, [r7, #20]
 801066c:	891b      	ldrh	r3, [r3, #8]
 801066e:	1ad3      	subs	r3, r2, r3
 8010670:	b29a      	uxth	r2, r3
 8010672:	887b      	ldrh	r3, [r7, #2]
 8010674:	4413      	add	r3, r2
 8010676:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8010678:	697b      	ldr	r3, [r7, #20]
 801067a:	6858      	ldr	r0, [r3, #4]
 801067c:	693b      	ldr	r3, [r7, #16]
 801067e:	685a      	ldr	r2, [r3, #4]
 8010680:	7bbb      	ldrb	r3, [r7, #14]
 8010682:	18d1      	adds	r1, r2, r3
 8010684:	897b      	ldrh	r3, [r7, #10]
 8010686:	89ba      	ldrh	r2, [r7, #12]
 8010688:	f7fb ff84 	bl	800c594 <pbuf_copy_partial>
 801068c:	4603      	mov	r3, r0
 801068e:	461a      	mov	r2, r3
 8010690:	89bb      	ldrh	r3, [r7, #12]
 8010692:	4293      	cmp	r3, r2
 8010694:	f040 809f 	bne.w	80107d6 <tcp_split_unsent_seg+0x242>
>>>>>>> Stashed changes
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
<<<<<<< Updated upstream
 80106c8:	697b      	ldr	r3, [r7, #20]
 80106ca:	68db      	ldr	r3, [r3, #12]
 80106cc:	899b      	ldrh	r3, [r3, #12]
 80106ce:	b29b      	uxth	r3, r3
 80106d0:	4618      	mov	r0, r3
 80106d2:	f7fa fafa 	bl	800acca <lwip_htons>
 80106d6:	4603      	mov	r3, r0
 80106d8:	b2db      	uxtb	r3, r3
 80106da:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80106de:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 80106e0:	2300      	movs	r3, #0
 80106e2:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 80106e4:	7efb      	ldrb	r3, [r7, #27]
 80106e6:	f003 0308 	and.w	r3, r3, #8
 80106ea:	2b00      	cmp	r3, #0
 80106ec:	d007      	beq.n	80106fe <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 80106ee:	7efb      	ldrb	r3, [r7, #27]
 80106f0:	f023 0308 	bic.w	r3, r3, #8
 80106f4:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 80106f6:	7ebb      	ldrb	r3, [r7, #26]
 80106f8:	f043 0308 	orr.w	r3, r3, #8
 80106fc:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 80106fe:	7efb      	ldrb	r3, [r7, #27]
 8010700:	f003 0301 	and.w	r3, r3, #1
 8010704:	2b00      	cmp	r3, #0
 8010706:	d007      	beq.n	8010718 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8010708:	7efb      	ldrb	r3, [r7, #27]
 801070a:	f023 0301 	bic.w	r3, r3, #1
 801070e:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8010710:	7ebb      	ldrb	r3, [r7, #26]
 8010712:	f043 0301 	orr.w	r3, r3, #1
 8010716:	76bb      	strb	r3, [r7, #26]
=======
 8010698:	697b      	ldr	r3, [r7, #20]
 801069a:	68db      	ldr	r3, [r3, #12]
 801069c:	899b      	ldrh	r3, [r3, #12]
 801069e:	b29b      	uxth	r3, r3
 80106a0:	4618      	mov	r0, r3
 80106a2:	f7fa fafa 	bl	800ac9a <lwip_htons>
 80106a6:	4603      	mov	r3, r0
 80106a8:	b2db      	uxtb	r3, r3
 80106aa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80106ae:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 80106b0:	2300      	movs	r3, #0
 80106b2:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 80106b4:	7efb      	ldrb	r3, [r7, #27]
 80106b6:	f003 0308 	and.w	r3, r3, #8
 80106ba:	2b00      	cmp	r3, #0
 80106bc:	d007      	beq.n	80106ce <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 80106be:	7efb      	ldrb	r3, [r7, #27]
 80106c0:	f023 0308 	bic.w	r3, r3, #8
 80106c4:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 80106c6:	7ebb      	ldrb	r3, [r7, #26]
 80106c8:	f043 0308 	orr.w	r3, r3, #8
 80106cc:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 80106ce:	7efb      	ldrb	r3, [r7, #27]
 80106d0:	f003 0301 	and.w	r3, r3, #1
 80106d4:	2b00      	cmp	r3, #0
 80106d6:	d007      	beq.n	80106e8 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 80106d8:	7efb      	ldrb	r3, [r7, #27]
 80106da:	f023 0301 	bic.w	r3, r3, #1
 80106de:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 80106e0:	7ebb      	ldrb	r3, [r7, #26]
 80106e2:	f043 0301 	orr.w	r3, r3, #1
 80106e6:	76bb      	strb	r3, [r7, #26]
>>>>>>> Stashed changes
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
<<<<<<< Updated upstream
 8010718:	697b      	ldr	r3, [r7, #20]
 801071a:	68db      	ldr	r3, [r3, #12]
 801071c:	685b      	ldr	r3, [r3, #4]
 801071e:	4618      	mov	r0, r3
 8010720:	f7fa fae8 	bl	800acf4 <lwip_htonl>
 8010724:	4602      	mov	r2, r0
 8010726:	887b      	ldrh	r3, [r7, #2]
 8010728:	18d1      	adds	r1, r2, r3
 801072a:	7eba      	ldrb	r2, [r7, #26]
 801072c:	7bfb      	ldrb	r3, [r7, #15]
 801072e:	9300      	str	r3, [sp, #0]
 8010730:	460b      	mov	r3, r1
 8010732:	6939      	ldr	r1, [r7, #16]
 8010734:	6878      	ldr	r0, [r7, #4]
 8010736:	f7ff fea7 	bl	8010488 <tcp_create_segment>
 801073a:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 801073c:	69fb      	ldr	r3, [r7, #28]
 801073e:	2b00      	cmp	r3, #0
 8010740:	d063      	beq.n	801080a <tcp_split_unsent_seg+0x246>
=======
 80106e8:	697b      	ldr	r3, [r7, #20]
 80106ea:	68db      	ldr	r3, [r3, #12]
 80106ec:	685b      	ldr	r3, [r3, #4]
 80106ee:	4618      	mov	r0, r3
 80106f0:	f7fa fae8 	bl	800acc4 <lwip_htonl>
 80106f4:	4602      	mov	r2, r0
 80106f6:	887b      	ldrh	r3, [r7, #2]
 80106f8:	18d1      	adds	r1, r2, r3
 80106fa:	7eba      	ldrb	r2, [r7, #26]
 80106fc:	7bfb      	ldrb	r3, [r7, #15]
 80106fe:	9300      	str	r3, [sp, #0]
 8010700:	460b      	mov	r3, r1
 8010702:	6939      	ldr	r1, [r7, #16]
 8010704:	6878      	ldr	r0, [r7, #4]
 8010706:	f7ff fea7 	bl	8010458 <tcp_create_segment>
 801070a:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 801070c:	69fb      	ldr	r3, [r7, #28]
 801070e:	2b00      	cmp	r3, #0
 8010710:	d063      	beq.n	80107da <tcp_split_unsent_seg+0x246>
>>>>>>> Stashed changes
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
<<<<<<< Updated upstream
 8010742:	697b      	ldr	r3, [r7, #20]
 8010744:	685b      	ldr	r3, [r3, #4]
 8010746:	4618      	mov	r0, r3
 8010748:	f7fb fdda 	bl	800c300 <pbuf_clen>
 801074c:	4603      	mov	r3, r0
 801074e:	461a      	mov	r2, r3
 8010750:	687b      	ldr	r3, [r7, #4]
 8010752:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010756:	1a9b      	subs	r3, r3, r2
 8010758:	b29a      	uxth	r2, r3
 801075a:	687b      	ldr	r3, [r7, #4]
 801075c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
=======
 8010712:	697b      	ldr	r3, [r7, #20]
 8010714:	685b      	ldr	r3, [r3, #4]
 8010716:	4618      	mov	r0, r3
 8010718:	f7fb fdda 	bl	800c2d0 <pbuf_clen>
 801071c:	4603      	mov	r3, r0
 801071e:	461a      	mov	r2, r3
 8010720:	687b      	ldr	r3, [r7, #4]
 8010722:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010726:	1a9b      	subs	r3, r3, r2
 8010728:	b29a      	uxth	r2, r3
 801072a:	687b      	ldr	r3, [r7, #4]
 801072c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
>>>>>>> Stashed changes

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
<<<<<<< Updated upstream
 8010760:	697b      	ldr	r3, [r7, #20]
 8010762:	6858      	ldr	r0, [r3, #4]
 8010764:	697b      	ldr	r3, [r7, #20]
 8010766:	685b      	ldr	r3, [r3, #4]
 8010768:	891a      	ldrh	r2, [r3, #8]
 801076a:	89bb      	ldrh	r3, [r7, #12]
 801076c:	1ad3      	subs	r3, r2, r3
 801076e:	b29b      	uxth	r3, r3
 8010770:	4619      	mov	r1, r3
 8010772:	f7fb fbb7 	bl	800bee4 <pbuf_realloc>
  useg->len -= remainder;
 8010776:	697b      	ldr	r3, [r7, #20]
 8010778:	891a      	ldrh	r2, [r3, #8]
 801077a:	89bb      	ldrh	r3, [r7, #12]
 801077c:	1ad3      	subs	r3, r2, r3
 801077e:	b29a      	uxth	r2, r3
 8010780:	697b      	ldr	r3, [r7, #20]
 8010782:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8010784:	697b      	ldr	r3, [r7, #20]
 8010786:	68db      	ldr	r3, [r3, #12]
 8010788:	899b      	ldrh	r3, [r3, #12]
 801078a:	b29c      	uxth	r4, r3
 801078c:	7efb      	ldrb	r3, [r7, #27]
 801078e:	b29b      	uxth	r3, r3
 8010790:	4618      	mov	r0, r3
 8010792:	f7fa fa9a 	bl	800acca <lwip_htons>
 8010796:	4603      	mov	r3, r0
 8010798:	461a      	mov	r2, r3
 801079a:	697b      	ldr	r3, [r7, #20]
 801079c:	68db      	ldr	r3, [r3, #12]
 801079e:	4322      	orrs	r2, r4
 80107a0:	b292      	uxth	r2, r2
 80107a2:	819a      	strh	r2, [r3, #12]
=======
 8010730:	697b      	ldr	r3, [r7, #20]
 8010732:	6858      	ldr	r0, [r3, #4]
 8010734:	697b      	ldr	r3, [r7, #20]
 8010736:	685b      	ldr	r3, [r3, #4]
 8010738:	891a      	ldrh	r2, [r3, #8]
 801073a:	89bb      	ldrh	r3, [r7, #12]
 801073c:	1ad3      	subs	r3, r2, r3
 801073e:	b29b      	uxth	r3, r3
 8010740:	4619      	mov	r1, r3
 8010742:	f7fb fbb7 	bl	800beb4 <pbuf_realloc>
  useg->len -= remainder;
 8010746:	697b      	ldr	r3, [r7, #20]
 8010748:	891a      	ldrh	r2, [r3, #8]
 801074a:	89bb      	ldrh	r3, [r7, #12]
 801074c:	1ad3      	subs	r3, r2, r3
 801074e:	b29a      	uxth	r2, r3
 8010750:	697b      	ldr	r3, [r7, #20]
 8010752:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8010754:	697b      	ldr	r3, [r7, #20]
 8010756:	68db      	ldr	r3, [r3, #12]
 8010758:	899b      	ldrh	r3, [r3, #12]
 801075a:	b29c      	uxth	r4, r3
 801075c:	7efb      	ldrb	r3, [r7, #27]
 801075e:	b29b      	uxth	r3, r3
 8010760:	4618      	mov	r0, r3
 8010762:	f7fa fa9a 	bl	800ac9a <lwip_htons>
 8010766:	4603      	mov	r3, r0
 8010768:	461a      	mov	r2, r3
 801076a:	697b      	ldr	r3, [r7, #20]
 801076c:	68db      	ldr	r3, [r3, #12]
 801076e:	4322      	orrs	r2, r4
 8010770:	b292      	uxth	r2, r2
 8010772:	819a      	strh	r2, [r3, #12]
>>>>>>> Stashed changes
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
<<<<<<< Updated upstream
 80107a4:	697b      	ldr	r3, [r7, #20]
 80107a6:	685b      	ldr	r3, [r3, #4]
 80107a8:	4618      	mov	r0, r3
 80107aa:	f7fb fda9 	bl	800c300 <pbuf_clen>
 80107ae:	4603      	mov	r3, r0
 80107b0:	461a      	mov	r2, r3
 80107b2:	687b      	ldr	r3, [r7, #4]
 80107b4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80107b8:	4413      	add	r3, r2
 80107ba:	b29a      	uxth	r2, r3
 80107bc:	687b      	ldr	r3, [r7, #4]
 80107be:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
=======
 8010774:	697b      	ldr	r3, [r7, #20]
 8010776:	685b      	ldr	r3, [r3, #4]
 8010778:	4618      	mov	r0, r3
 801077a:	f7fb fda9 	bl	800c2d0 <pbuf_clen>
 801077e:	4603      	mov	r3, r0
 8010780:	461a      	mov	r2, r3
 8010782:	687b      	ldr	r3, [r7, #4]
 8010784:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010788:	4413      	add	r3, r2
 801078a:	b29a      	uxth	r2, r3
 801078c:	687b      	ldr	r3, [r7, #4]
 801078e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
>>>>>>> Stashed changes
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
<<<<<<< Updated upstream
 80107c2:	69fb      	ldr	r3, [r7, #28]
 80107c4:	685b      	ldr	r3, [r3, #4]
 80107c6:	4618      	mov	r0, r3
 80107c8:	f7fb fd9a 	bl	800c300 <pbuf_clen>
 80107cc:	4603      	mov	r3, r0
 80107ce:	461a      	mov	r2, r3
 80107d0:	687b      	ldr	r3, [r7, #4]
 80107d2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80107d6:	4413      	add	r3, r2
 80107d8:	b29a      	uxth	r2, r3
 80107da:	687b      	ldr	r3, [r7, #4]
 80107dc:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 80107e0:	697b      	ldr	r3, [r7, #20]
 80107e2:	681a      	ldr	r2, [r3, #0]
 80107e4:	69fb      	ldr	r3, [r7, #28]
 80107e6:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 80107e8:	697b      	ldr	r3, [r7, #20]
 80107ea:	69fa      	ldr	r2, [r7, #28]
 80107ec:	601a      	str	r2, [r3, #0]
=======
 8010792:	69fb      	ldr	r3, [r7, #28]
 8010794:	685b      	ldr	r3, [r3, #4]
 8010796:	4618      	mov	r0, r3
 8010798:	f7fb fd9a 	bl	800c2d0 <pbuf_clen>
 801079c:	4603      	mov	r3, r0
 801079e:	461a      	mov	r2, r3
 80107a0:	687b      	ldr	r3, [r7, #4]
 80107a2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80107a6:	4413      	add	r3, r2
 80107a8:	b29a      	uxth	r2, r3
 80107aa:	687b      	ldr	r3, [r7, #4]
 80107ac:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 80107b0:	697b      	ldr	r3, [r7, #20]
 80107b2:	681a      	ldr	r2, [r3, #0]
 80107b4:	69fb      	ldr	r3, [r7, #28]
 80107b6:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 80107b8:	697b      	ldr	r3, [r7, #20]
 80107ba:	69fa      	ldr	r2, [r7, #28]
 80107bc:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
<<<<<<< Updated upstream
 80107ee:	69fb      	ldr	r3, [r7, #28]
 80107f0:	681b      	ldr	r3, [r3, #0]
 80107f2:	2b00      	cmp	r3, #0
 80107f4:	d103      	bne.n	80107fe <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 80107f6:	687b      	ldr	r3, [r7, #4]
 80107f8:	2200      	movs	r2, #0
 80107fa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
=======
 80107be:	69fb      	ldr	r3, [r7, #28]
 80107c0:	681b      	ldr	r3, [r3, #0]
 80107c2:	2b00      	cmp	r3, #0
 80107c4:	d103      	bne.n	80107ce <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 80107c6:	687b      	ldr	r3, [r7, #4]
 80107c8:	2200      	movs	r2, #0
 80107ca:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
>>>>>>> Stashed changes
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
<<<<<<< Updated upstream
 80107fe:	2300      	movs	r3, #0
 8010800:	e016      	b.n	8010830 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8010802:	bf00      	nop
 8010804:	e002      	b.n	801080c <tcp_split_unsent_seg+0x248>
    goto memerr;
 8010806:	bf00      	nop
 8010808:	e000      	b.n	801080c <tcp_split_unsent_seg+0x248>
    goto memerr;
 801080a:	bf00      	nop
=======
 80107ce:	2300      	movs	r3, #0
 80107d0:	e016      	b.n	8010800 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 80107d2:	bf00      	nop
 80107d4:	e002      	b.n	80107dc <tcp_split_unsent_seg+0x248>
    goto memerr;
 80107d6:	bf00      	nop
 80107d8:	e000      	b.n	80107dc <tcp_split_unsent_seg+0x248>
    goto memerr;
 80107da:	bf00      	nop
>>>>>>> Stashed changes
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
<<<<<<< Updated upstream
 801080c:	69fb      	ldr	r3, [r7, #28]
 801080e:	2b00      	cmp	r3, #0
 8010810:	d006      	beq.n	8010820 <tcp_split_unsent_seg+0x25c>
 8010812:	4b09      	ldr	r3, [pc, #36]	; (8010838 <tcp_split_unsent_seg+0x274>)
 8010814:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8010818:	490d      	ldr	r1, [pc, #52]	; (8010850 <tcp_split_unsent_seg+0x28c>)
 801081a:	4809      	ldr	r0, [pc, #36]	; (8010840 <tcp_split_unsent_seg+0x27c>)
 801081c:	f003 feb2 	bl	8014584 <iprintf>
  if (p != NULL) {
 8010820:	693b      	ldr	r3, [r7, #16]
 8010822:	2b00      	cmp	r3, #0
 8010824:	d002      	beq.n	801082c <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8010826:	6938      	ldr	r0, [r7, #16]
 8010828:	f7fb fce2 	bl	800c1f0 <pbuf_free>
  }

  return ERR_MEM;
 801082c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8010830:	4618      	mov	r0, r3
 8010832:	3724      	adds	r7, #36	; 0x24
 8010834:	46bd      	mov	sp, r7
 8010836:	bd90      	pop	{r4, r7, pc}
 8010838:	08017010 	.word	0x08017010
 801083c:	080173a4 	.word	0x080173a4
 8010840:	08017064 	.word	0x08017064
 8010844:	080173c8 	.word	0x080173c8
 8010848:	080173ec 	.word	0x080173ec
 801084c:	080173fc 	.word	0x080173fc
 8010850:	0801740c 	.word	0x0801740c

08010854 <tcp_send_fin>:
=======
 80107dc:	69fb      	ldr	r3, [r7, #28]
 80107de:	2b00      	cmp	r3, #0
 80107e0:	d006      	beq.n	80107f0 <tcp_split_unsent_seg+0x25c>
 80107e2:	4b09      	ldr	r3, [pc, #36]	; (8010808 <tcp_split_unsent_seg+0x274>)
 80107e4:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 80107e8:	490d      	ldr	r1, [pc, #52]	; (8010820 <tcp_split_unsent_seg+0x28c>)
 80107ea:	4809      	ldr	r0, [pc, #36]	; (8010810 <tcp_split_unsent_seg+0x27c>)
 80107ec:	f003 feb2 	bl	8014554 <iprintf>
  if (p != NULL) {
 80107f0:	693b      	ldr	r3, [r7, #16]
 80107f2:	2b00      	cmp	r3, #0
 80107f4:	d002      	beq.n	80107fc <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 80107f6:	6938      	ldr	r0, [r7, #16]
 80107f8:	f7fb fce2 	bl	800c1c0 <pbuf_free>
  }

  return ERR_MEM;
 80107fc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8010800:	4618      	mov	r0, r3
 8010802:	3724      	adds	r7, #36	; 0x24
 8010804:	46bd      	mov	sp, r7
 8010806:	bd90      	pop	{r4, r7, pc}
 8010808:	08016ff4 	.word	0x08016ff4
 801080c:	08017388 	.word	0x08017388
 8010810:	08017048 	.word	0x08017048
 8010814:	080173ac 	.word	0x080173ac
 8010818:	080173d0 	.word	0x080173d0
 801081c:	080173e0 	.word	0x080173e0
 8010820:	080173f0 	.word	0x080173f0

08010824 <tcp_send_fin>:
>>>>>>> Stashed changes
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
<<<<<<< Updated upstream
 8010854:	b590      	push	{r4, r7, lr}
 8010856:	b085      	sub	sp, #20
 8010858:	af00      	add	r7, sp, #0
 801085a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 801085c:	687b      	ldr	r3, [r7, #4]
 801085e:	2b00      	cmp	r3, #0
 8010860:	d106      	bne.n	8010870 <tcp_send_fin+0x1c>
 8010862:	4b21      	ldr	r3, [pc, #132]	; (80108e8 <tcp_send_fin+0x94>)
 8010864:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8010868:	4920      	ldr	r1, [pc, #128]	; (80108ec <tcp_send_fin+0x98>)
 801086a:	4821      	ldr	r0, [pc, #132]	; (80108f0 <tcp_send_fin+0x9c>)
 801086c:	f003 fe8a 	bl	8014584 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8010870:	687b      	ldr	r3, [r7, #4]
 8010872:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010874:	2b00      	cmp	r3, #0
 8010876:	d02e      	beq.n	80108d6 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010878:	687b      	ldr	r3, [r7, #4]
 801087a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801087c:	60fb      	str	r3, [r7, #12]
 801087e:	e002      	b.n	8010886 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8010880:	68fb      	ldr	r3, [r7, #12]
 8010882:	681b      	ldr	r3, [r3, #0]
 8010884:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010886:	68fb      	ldr	r3, [r7, #12]
 8010888:	681b      	ldr	r3, [r3, #0]
 801088a:	2b00      	cmp	r3, #0
 801088c:	d1f8      	bne.n	8010880 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801088e:	68fb      	ldr	r3, [r7, #12]
 8010890:	68db      	ldr	r3, [r3, #12]
 8010892:	899b      	ldrh	r3, [r3, #12]
 8010894:	b29b      	uxth	r3, r3
 8010896:	4618      	mov	r0, r3
 8010898:	f7fa fa17 	bl	800acca <lwip_htons>
 801089c:	4603      	mov	r3, r0
 801089e:	b2db      	uxtb	r3, r3
 80108a0:	f003 0307 	and.w	r3, r3, #7
 80108a4:	2b00      	cmp	r3, #0
 80108a6:	d116      	bne.n	80108d6 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 80108a8:	68fb      	ldr	r3, [r7, #12]
 80108aa:	68db      	ldr	r3, [r3, #12]
 80108ac:	899b      	ldrh	r3, [r3, #12]
 80108ae:	b29c      	uxth	r4, r3
 80108b0:	2001      	movs	r0, #1
 80108b2:	f7fa fa0a 	bl	800acca <lwip_htons>
 80108b6:	4603      	mov	r3, r0
 80108b8:	461a      	mov	r2, r3
 80108ba:	68fb      	ldr	r3, [r7, #12]
 80108bc:	68db      	ldr	r3, [r3, #12]
 80108be:	4322      	orrs	r2, r4
 80108c0:	b292      	uxth	r2, r2
 80108c2:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 80108c4:	687b      	ldr	r3, [r7, #4]
 80108c6:	8b5b      	ldrh	r3, [r3, #26]
 80108c8:	f043 0320 	orr.w	r3, r3, #32
 80108cc:	b29a      	uxth	r2, r3
 80108ce:	687b      	ldr	r3, [r7, #4]
 80108d0:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 80108d2:	2300      	movs	r3, #0
 80108d4:	e004      	b.n	80108e0 <tcp_send_fin+0x8c>
=======
 8010824:	b590      	push	{r4, r7, lr}
 8010826:	b085      	sub	sp, #20
 8010828:	af00      	add	r7, sp, #0
 801082a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 801082c:	687b      	ldr	r3, [r7, #4]
 801082e:	2b00      	cmp	r3, #0
 8010830:	d106      	bne.n	8010840 <tcp_send_fin+0x1c>
 8010832:	4b21      	ldr	r3, [pc, #132]	; (80108b8 <tcp_send_fin+0x94>)
 8010834:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8010838:	4920      	ldr	r1, [pc, #128]	; (80108bc <tcp_send_fin+0x98>)
 801083a:	4821      	ldr	r0, [pc, #132]	; (80108c0 <tcp_send_fin+0x9c>)
 801083c:	f003 fe8a 	bl	8014554 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8010840:	687b      	ldr	r3, [r7, #4]
 8010842:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010844:	2b00      	cmp	r3, #0
 8010846:	d02e      	beq.n	80108a6 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010848:	687b      	ldr	r3, [r7, #4]
 801084a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801084c:	60fb      	str	r3, [r7, #12]
 801084e:	e002      	b.n	8010856 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8010850:	68fb      	ldr	r3, [r7, #12]
 8010852:	681b      	ldr	r3, [r3, #0]
 8010854:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010856:	68fb      	ldr	r3, [r7, #12]
 8010858:	681b      	ldr	r3, [r3, #0]
 801085a:	2b00      	cmp	r3, #0
 801085c:	d1f8      	bne.n	8010850 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801085e:	68fb      	ldr	r3, [r7, #12]
 8010860:	68db      	ldr	r3, [r3, #12]
 8010862:	899b      	ldrh	r3, [r3, #12]
 8010864:	b29b      	uxth	r3, r3
 8010866:	4618      	mov	r0, r3
 8010868:	f7fa fa17 	bl	800ac9a <lwip_htons>
 801086c:	4603      	mov	r3, r0
 801086e:	b2db      	uxtb	r3, r3
 8010870:	f003 0307 	and.w	r3, r3, #7
 8010874:	2b00      	cmp	r3, #0
 8010876:	d116      	bne.n	80108a6 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8010878:	68fb      	ldr	r3, [r7, #12]
 801087a:	68db      	ldr	r3, [r3, #12]
 801087c:	899b      	ldrh	r3, [r3, #12]
 801087e:	b29c      	uxth	r4, r3
 8010880:	2001      	movs	r0, #1
 8010882:	f7fa fa0a 	bl	800ac9a <lwip_htons>
 8010886:	4603      	mov	r3, r0
 8010888:	461a      	mov	r2, r3
 801088a:	68fb      	ldr	r3, [r7, #12]
 801088c:	68db      	ldr	r3, [r3, #12]
 801088e:	4322      	orrs	r2, r4
 8010890:	b292      	uxth	r2, r2
 8010892:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8010894:	687b      	ldr	r3, [r7, #4]
 8010896:	8b5b      	ldrh	r3, [r3, #26]
 8010898:	f043 0320 	orr.w	r3, r3, #32
 801089c:	b29a      	uxth	r2, r3
 801089e:	687b      	ldr	r3, [r7, #4]
 80108a0:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 80108a2:	2300      	movs	r3, #0
 80108a4:	e004      	b.n	80108b0 <tcp_send_fin+0x8c>
>>>>>>> Stashed changes
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
<<<<<<< Updated upstream
 80108d6:	2101      	movs	r1, #1
 80108d8:	6878      	ldr	r0, [r7, #4]
 80108da:	f000 f80b 	bl	80108f4 <tcp_enqueue_flags>
 80108de:	4603      	mov	r3, r0
}
 80108e0:	4618      	mov	r0, r3
 80108e2:	3714      	adds	r7, #20
 80108e4:	46bd      	mov	sp, r7
 80108e6:	bd90      	pop	{r4, r7, pc}
 80108e8:	08017010 	.word	0x08017010
 80108ec:	08017418 	.word	0x08017418
 80108f0:	08017064 	.word	0x08017064

080108f4 <tcp_enqueue_flags>:
=======
 80108a6:	2101      	movs	r1, #1
 80108a8:	6878      	ldr	r0, [r7, #4]
 80108aa:	f000 f80b 	bl	80108c4 <tcp_enqueue_flags>
 80108ae:	4603      	mov	r3, r0
}
 80108b0:	4618      	mov	r0, r3
 80108b2:	3714      	adds	r7, #20
 80108b4:	46bd      	mov	sp, r7
 80108b6:	bd90      	pop	{r4, r7, pc}
 80108b8:	08016ff4 	.word	0x08016ff4
 80108bc:	080173fc 	.word	0x080173fc
 80108c0:	08017048 	.word	0x08017048

080108c4 <tcp_enqueue_flags>:
>>>>>>> Stashed changes
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
<<<<<<< Updated upstream
 80108f4:	b580      	push	{r7, lr}
 80108f6:	b08a      	sub	sp, #40	; 0x28
 80108f8:	af02      	add	r7, sp, #8
 80108fa:	6078      	str	r0, [r7, #4]
 80108fc:	460b      	mov	r3, r1
 80108fe:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8010900:	2300      	movs	r3, #0
 8010902:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8010904:	2300      	movs	r3, #0
 8010906:	75fb      	strb	r3, [r7, #23]
=======
 80108c4:	b580      	push	{r7, lr}
 80108c6:	b08a      	sub	sp, #40	; 0x28
 80108c8:	af02      	add	r7, sp, #8
 80108ca:	6078      	str	r0, [r7, #4]
 80108cc:	460b      	mov	r3, r1
 80108ce:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 80108d0:	2300      	movs	r3, #0
 80108d2:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 80108d4:	2300      	movs	r3, #0
 80108d6:	75fb      	strb	r3, [r7, #23]
>>>>>>> Stashed changes

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
<<<<<<< Updated upstream
 8010908:	78fb      	ldrb	r3, [r7, #3]
 801090a:	f003 0303 	and.w	r3, r3, #3
 801090e:	2b00      	cmp	r3, #0
 8010910:	d106      	bne.n	8010920 <tcp_enqueue_flags+0x2c>
 8010912:	4b67      	ldr	r3, [pc, #412]	; (8010ab0 <tcp_enqueue_flags+0x1bc>)
 8010914:	f240 4211 	movw	r2, #1041	; 0x411
 8010918:	4966      	ldr	r1, [pc, #408]	; (8010ab4 <tcp_enqueue_flags+0x1c0>)
 801091a:	4867      	ldr	r0, [pc, #412]	; (8010ab8 <tcp_enqueue_flags+0x1c4>)
 801091c:	f003 fe32 	bl	8014584 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	2b00      	cmp	r3, #0
 8010924:	d106      	bne.n	8010934 <tcp_enqueue_flags+0x40>
 8010926:	4b62      	ldr	r3, [pc, #392]	; (8010ab0 <tcp_enqueue_flags+0x1bc>)
 8010928:	f240 4213 	movw	r2, #1043	; 0x413
 801092c:	4963      	ldr	r1, [pc, #396]	; (8010abc <tcp_enqueue_flags+0x1c8>)
 801092e:	4862      	ldr	r0, [pc, #392]	; (8010ab8 <tcp_enqueue_flags+0x1c4>)
 8010930:	f003 fe28 	bl	8014584 <iprintf>
=======
 80108d8:	78fb      	ldrb	r3, [r7, #3]
 80108da:	f003 0303 	and.w	r3, r3, #3
 80108de:	2b00      	cmp	r3, #0
 80108e0:	d106      	bne.n	80108f0 <tcp_enqueue_flags+0x2c>
 80108e2:	4b67      	ldr	r3, [pc, #412]	; (8010a80 <tcp_enqueue_flags+0x1bc>)
 80108e4:	f240 4211 	movw	r2, #1041	; 0x411
 80108e8:	4966      	ldr	r1, [pc, #408]	; (8010a84 <tcp_enqueue_flags+0x1c0>)
 80108ea:	4867      	ldr	r0, [pc, #412]	; (8010a88 <tcp_enqueue_flags+0x1c4>)
 80108ec:	f003 fe32 	bl	8014554 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	2b00      	cmp	r3, #0
 80108f4:	d106      	bne.n	8010904 <tcp_enqueue_flags+0x40>
 80108f6:	4b62      	ldr	r3, [pc, #392]	; (8010a80 <tcp_enqueue_flags+0x1bc>)
 80108f8:	f240 4213 	movw	r2, #1043	; 0x413
 80108fc:	4963      	ldr	r1, [pc, #396]	; (8010a8c <tcp_enqueue_flags+0x1c8>)
 80108fe:	4862      	ldr	r0, [pc, #392]	; (8010a88 <tcp_enqueue_flags+0x1c4>)
 8010900:	f003 fe28 	bl	8014554 <iprintf>
>>>>>>> Stashed changes

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
<<<<<<< Updated upstream
 8010934:	78fb      	ldrb	r3, [r7, #3]
 8010936:	f003 0302 	and.w	r3, r3, #2
 801093a:	2b00      	cmp	r3, #0
 801093c:	d001      	beq.n	8010942 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 801093e:	2301      	movs	r3, #1
 8010940:	77fb      	strb	r3, [r7, #31]
=======
 8010904:	78fb      	ldrb	r3, [r7, #3]
 8010906:	f003 0302 	and.w	r3, r3, #2
 801090a:	2b00      	cmp	r3, #0
 801090c:	d001      	beq.n	8010912 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 801090e:	2301      	movs	r3, #1
 8010910:	77fb      	strb	r3, [r7, #31]
>>>>>>> Stashed changes
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
<<<<<<< Updated upstream
 8010942:	7ffb      	ldrb	r3, [r7, #31]
 8010944:	009b      	lsls	r3, r3, #2
 8010946:	b2db      	uxtb	r3, r3
 8010948:	f003 0304 	and.w	r3, r3, #4
 801094c:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801094e:	7dfb      	ldrb	r3, [r7, #23]
 8010950:	b29b      	uxth	r3, r3
 8010952:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010956:	4619      	mov	r1, r3
 8010958:	2036      	movs	r0, #54	; 0x36
 801095a:	f7fb f965 	bl	800bc28 <pbuf_alloc>
 801095e:	6138      	str	r0, [r7, #16]
 8010960:	693b      	ldr	r3, [r7, #16]
 8010962:	2b00      	cmp	r3, #0
 8010964:	d109      	bne.n	801097a <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	8b5b      	ldrh	r3, [r3, #26]
 801096a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801096e:	b29a      	uxth	r2, r3
 8010970:	687b      	ldr	r3, [r7, #4]
 8010972:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8010974:	f04f 33ff 	mov.w	r3, #4294967295
 8010978:	e095      	b.n	8010aa6 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801097a:	693b      	ldr	r3, [r7, #16]
 801097c:	895a      	ldrh	r2, [r3, #10]
 801097e:	7dfb      	ldrb	r3, [r7, #23]
 8010980:	b29b      	uxth	r3, r3
 8010982:	429a      	cmp	r2, r3
 8010984:	d206      	bcs.n	8010994 <tcp_enqueue_flags+0xa0>
 8010986:	4b4a      	ldr	r3, [pc, #296]	; (8010ab0 <tcp_enqueue_flags+0x1bc>)
 8010988:	f240 4239 	movw	r2, #1081	; 0x439
 801098c:	494c      	ldr	r1, [pc, #304]	; (8010ac0 <tcp_enqueue_flags+0x1cc>)
 801098e:	484a      	ldr	r0, [pc, #296]	; (8010ab8 <tcp_enqueue_flags+0x1c4>)
 8010990:	f003 fdf8 	bl	8014584 <iprintf>
=======
 8010912:	7ffb      	ldrb	r3, [r7, #31]
 8010914:	009b      	lsls	r3, r3, #2
 8010916:	b2db      	uxtb	r3, r3
 8010918:	f003 0304 	and.w	r3, r3, #4
 801091c:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801091e:	7dfb      	ldrb	r3, [r7, #23]
 8010920:	b29b      	uxth	r3, r3
 8010922:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010926:	4619      	mov	r1, r3
 8010928:	2036      	movs	r0, #54	; 0x36
 801092a:	f7fb f965 	bl	800bbf8 <pbuf_alloc>
 801092e:	6138      	str	r0, [r7, #16]
 8010930:	693b      	ldr	r3, [r7, #16]
 8010932:	2b00      	cmp	r3, #0
 8010934:	d109      	bne.n	801094a <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010936:	687b      	ldr	r3, [r7, #4]
 8010938:	8b5b      	ldrh	r3, [r3, #26]
 801093a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801093e:	b29a      	uxth	r2, r3
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8010944:	f04f 33ff 	mov.w	r3, #4294967295
 8010948:	e095      	b.n	8010a76 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801094a:	693b      	ldr	r3, [r7, #16]
 801094c:	895a      	ldrh	r2, [r3, #10]
 801094e:	7dfb      	ldrb	r3, [r7, #23]
 8010950:	b29b      	uxth	r3, r3
 8010952:	429a      	cmp	r2, r3
 8010954:	d206      	bcs.n	8010964 <tcp_enqueue_flags+0xa0>
 8010956:	4b4a      	ldr	r3, [pc, #296]	; (8010a80 <tcp_enqueue_flags+0x1bc>)
 8010958:	f240 4239 	movw	r2, #1081	; 0x439
 801095c:	494c      	ldr	r1, [pc, #304]	; (8010a90 <tcp_enqueue_flags+0x1cc>)
 801095e:	484a      	ldr	r0, [pc, #296]	; (8010a88 <tcp_enqueue_flags+0x1c4>)
 8010960:	f003 fdf8 	bl	8014554 <iprintf>
>>>>>>> Stashed changes
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
<<<<<<< Updated upstream
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8010998:	78fa      	ldrb	r2, [r7, #3]
 801099a:	7ffb      	ldrb	r3, [r7, #31]
 801099c:	9300      	str	r3, [sp, #0]
 801099e:	460b      	mov	r3, r1
 80109a0:	6939      	ldr	r1, [r7, #16]
 80109a2:	6878      	ldr	r0, [r7, #4]
 80109a4:	f7ff fd70 	bl	8010488 <tcp_create_segment>
 80109a8:	60f8      	str	r0, [r7, #12]
 80109aa:	68fb      	ldr	r3, [r7, #12]
 80109ac:	2b00      	cmp	r3, #0
 80109ae:	d109      	bne.n	80109c4 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80109b0:	687b      	ldr	r3, [r7, #4]
 80109b2:	8b5b      	ldrh	r3, [r3, #26]
 80109b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80109b8:	b29a      	uxth	r2, r3
 80109ba:	687b      	ldr	r3, [r7, #4]
 80109bc:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80109be:	f04f 33ff 	mov.w	r3, #4294967295
 80109c2:	e070      	b.n	8010aa6 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 80109c4:	68fb      	ldr	r3, [r7, #12]
 80109c6:	68db      	ldr	r3, [r3, #12]
 80109c8:	f003 0303 	and.w	r3, r3, #3
 80109cc:	2b00      	cmp	r3, #0
 80109ce:	d006      	beq.n	80109de <tcp_enqueue_flags+0xea>
 80109d0:	4b37      	ldr	r3, [pc, #220]	; (8010ab0 <tcp_enqueue_flags+0x1bc>)
 80109d2:	f240 4242 	movw	r2, #1090	; 0x442
 80109d6:	493b      	ldr	r1, [pc, #236]	; (8010ac4 <tcp_enqueue_flags+0x1d0>)
 80109d8:	4837      	ldr	r0, [pc, #220]	; (8010ab8 <tcp_enqueue_flags+0x1c4>)
 80109da:	f003 fdd3 	bl	8014584 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 80109de:	68fb      	ldr	r3, [r7, #12]
 80109e0:	891b      	ldrh	r3, [r3, #8]
 80109e2:	2b00      	cmp	r3, #0
 80109e4:	d006      	beq.n	80109f4 <tcp_enqueue_flags+0x100>
 80109e6:	4b32      	ldr	r3, [pc, #200]	; (8010ab0 <tcp_enqueue_flags+0x1bc>)
 80109e8:	f240 4243 	movw	r2, #1091	; 0x443
 80109ec:	4936      	ldr	r1, [pc, #216]	; (8010ac8 <tcp_enqueue_flags+0x1d4>)
 80109ee:	4832      	ldr	r0, [pc, #200]	; (8010ab8 <tcp_enqueue_flags+0x1c4>)
 80109f0:	f003 fdc8 	bl	8014584 <iprintf>
=======
 8010964:	687b      	ldr	r3, [r7, #4]
 8010966:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8010968:	78fa      	ldrb	r2, [r7, #3]
 801096a:	7ffb      	ldrb	r3, [r7, #31]
 801096c:	9300      	str	r3, [sp, #0]
 801096e:	460b      	mov	r3, r1
 8010970:	6939      	ldr	r1, [r7, #16]
 8010972:	6878      	ldr	r0, [r7, #4]
 8010974:	f7ff fd70 	bl	8010458 <tcp_create_segment>
 8010978:	60f8      	str	r0, [r7, #12]
 801097a:	68fb      	ldr	r3, [r7, #12]
 801097c:	2b00      	cmp	r3, #0
 801097e:	d109      	bne.n	8010994 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	8b5b      	ldrh	r3, [r3, #26]
 8010984:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010988:	b29a      	uxth	r2, r3
 801098a:	687b      	ldr	r3, [r7, #4]
 801098c:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801098e:	f04f 33ff 	mov.w	r3, #4294967295
 8010992:	e070      	b.n	8010a76 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8010994:	68fb      	ldr	r3, [r7, #12]
 8010996:	68db      	ldr	r3, [r3, #12]
 8010998:	f003 0303 	and.w	r3, r3, #3
 801099c:	2b00      	cmp	r3, #0
 801099e:	d006      	beq.n	80109ae <tcp_enqueue_flags+0xea>
 80109a0:	4b37      	ldr	r3, [pc, #220]	; (8010a80 <tcp_enqueue_flags+0x1bc>)
 80109a2:	f240 4242 	movw	r2, #1090	; 0x442
 80109a6:	493b      	ldr	r1, [pc, #236]	; (8010a94 <tcp_enqueue_flags+0x1d0>)
 80109a8:	4837      	ldr	r0, [pc, #220]	; (8010a88 <tcp_enqueue_flags+0x1c4>)
 80109aa:	f003 fdd3 	bl	8014554 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 80109ae:	68fb      	ldr	r3, [r7, #12]
 80109b0:	891b      	ldrh	r3, [r3, #8]
 80109b2:	2b00      	cmp	r3, #0
 80109b4:	d006      	beq.n	80109c4 <tcp_enqueue_flags+0x100>
 80109b6:	4b32      	ldr	r3, [pc, #200]	; (8010a80 <tcp_enqueue_flags+0x1bc>)
 80109b8:	f240 4243 	movw	r2, #1091	; 0x443
 80109bc:	4936      	ldr	r1, [pc, #216]	; (8010a98 <tcp_enqueue_flags+0x1d4>)
 80109be:	4832      	ldr	r0, [pc, #200]	; (8010a88 <tcp_enqueue_flags+0x1c4>)
 80109c0:	f003 fdc8 	bl	8014554 <iprintf>
>>>>>>> Stashed changes
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
<<<<<<< Updated upstream
 80109f4:	687b      	ldr	r3, [r7, #4]
 80109f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80109f8:	2b00      	cmp	r3, #0
 80109fa:	d103      	bne.n	8010a04 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 80109fc:	687b      	ldr	r3, [r7, #4]
 80109fe:	68fa      	ldr	r2, [r7, #12]
 8010a00:	66da      	str	r2, [r3, #108]	; 0x6c
 8010a02:	e00d      	b.n	8010a20 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010a08:	61bb      	str	r3, [r7, #24]
 8010a0a:	e002      	b.n	8010a12 <tcp_enqueue_flags+0x11e>
 8010a0c:	69bb      	ldr	r3, [r7, #24]
 8010a0e:	681b      	ldr	r3, [r3, #0]
 8010a10:	61bb      	str	r3, [r7, #24]
 8010a12:	69bb      	ldr	r3, [r7, #24]
 8010a14:	681b      	ldr	r3, [r3, #0]
 8010a16:	2b00      	cmp	r3, #0
 8010a18:	d1f8      	bne.n	8010a0c <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8010a1a:	69bb      	ldr	r3, [r7, #24]
 8010a1c:	68fa      	ldr	r2, [r7, #12]
 8010a1e:	601a      	str	r2, [r3, #0]
=======
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80109c8:	2b00      	cmp	r3, #0
 80109ca:	d103      	bne.n	80109d4 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 80109cc:	687b      	ldr	r3, [r7, #4]
 80109ce:	68fa      	ldr	r2, [r7, #12]
 80109d0:	66da      	str	r2, [r3, #108]	; 0x6c
 80109d2:	e00d      	b.n	80109f0 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 80109d4:	687b      	ldr	r3, [r7, #4]
 80109d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80109d8:	61bb      	str	r3, [r7, #24]
 80109da:	e002      	b.n	80109e2 <tcp_enqueue_flags+0x11e>
 80109dc:	69bb      	ldr	r3, [r7, #24]
 80109de:	681b      	ldr	r3, [r3, #0]
 80109e0:	61bb      	str	r3, [r7, #24]
 80109e2:	69bb      	ldr	r3, [r7, #24]
 80109e4:	681b      	ldr	r3, [r3, #0]
 80109e6:	2b00      	cmp	r3, #0
 80109e8:	d1f8      	bne.n	80109dc <tcp_enqueue_flags+0x118>
    useg->next = seg;
 80109ea:	69bb      	ldr	r3, [r7, #24]
 80109ec:	68fa      	ldr	r2, [r7, #12]
 80109ee:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
<<<<<<< Updated upstream
 8010a20:	687b      	ldr	r3, [r7, #4]
 8010a22:	2200      	movs	r2, #0
 8010a24:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
=======
 80109f0:	687b      	ldr	r3, [r7, #4]
 80109f2:	2200      	movs	r2, #0
 80109f4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
>>>>>>> Stashed changes
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
<<<<<<< Updated upstream
 8010a28:	78fb      	ldrb	r3, [r7, #3]
 8010a2a:	f003 0302 	and.w	r3, r3, #2
 8010a2e:	2b00      	cmp	r3, #0
 8010a30:	d104      	bne.n	8010a3c <tcp_enqueue_flags+0x148>
 8010a32:	78fb      	ldrb	r3, [r7, #3]
 8010a34:	f003 0301 	and.w	r3, r3, #1
 8010a38:	2b00      	cmp	r3, #0
 8010a3a:	d004      	beq.n	8010a46 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010a40:	1c5a      	adds	r2, r3, #1
 8010a42:	687b      	ldr	r3, [r7, #4]
 8010a44:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8010a46:	78fb      	ldrb	r3, [r7, #3]
 8010a48:	f003 0301 	and.w	r3, r3, #1
 8010a4c:	2b00      	cmp	r3, #0
 8010a4e:	d006      	beq.n	8010a5e <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	8b5b      	ldrh	r3, [r3, #26]
 8010a54:	f043 0320 	orr.w	r3, r3, #32
 8010a58:	b29a      	uxth	r2, r3
 8010a5a:	687b      	ldr	r3, [r7, #4]
 8010a5c:	835a      	strh	r2, [r3, #26]
=======
 80109f8:	78fb      	ldrb	r3, [r7, #3]
 80109fa:	f003 0302 	and.w	r3, r3, #2
 80109fe:	2b00      	cmp	r3, #0
 8010a00:	d104      	bne.n	8010a0c <tcp_enqueue_flags+0x148>
 8010a02:	78fb      	ldrb	r3, [r7, #3]
 8010a04:	f003 0301 	and.w	r3, r3, #1
 8010a08:	2b00      	cmp	r3, #0
 8010a0a:	d004      	beq.n	8010a16 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8010a0c:	687b      	ldr	r3, [r7, #4]
 8010a0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010a10:	1c5a      	adds	r2, r3, #1
 8010a12:	687b      	ldr	r3, [r7, #4]
 8010a14:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8010a16:	78fb      	ldrb	r3, [r7, #3]
 8010a18:	f003 0301 	and.w	r3, r3, #1
 8010a1c:	2b00      	cmp	r3, #0
 8010a1e:	d006      	beq.n	8010a2e <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8010a20:	687b      	ldr	r3, [r7, #4]
 8010a22:	8b5b      	ldrh	r3, [r3, #26]
 8010a24:	f043 0320 	orr.w	r3, r3, #32
 8010a28:	b29a      	uxth	r2, r3
 8010a2a:	687b      	ldr	r3, [r7, #4]
 8010a2c:	835a      	strh	r2, [r3, #26]
>>>>>>> Stashed changes
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
<<<<<<< Updated upstream
 8010a5e:	68fb      	ldr	r3, [r7, #12]
 8010a60:	685b      	ldr	r3, [r3, #4]
 8010a62:	4618      	mov	r0, r3
 8010a64:	f7fb fc4c 	bl	800c300 <pbuf_clen>
 8010a68:	4603      	mov	r3, r0
 8010a6a:	461a      	mov	r2, r3
 8010a6c:	687b      	ldr	r3, [r7, #4]
 8010a6e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010a72:	4413      	add	r3, r2
 8010a74:	b29a      	uxth	r2, r3
 8010a76:	687b      	ldr	r3, [r7, #4]
 8010a78:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8010a7c:	687b      	ldr	r3, [r7, #4]
 8010a7e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010a82:	2b00      	cmp	r3, #0
 8010a84:	d00e      	beq.n	8010aa4 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8010a86:	687b      	ldr	r3, [r7, #4]
 8010a88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010a8a:	2b00      	cmp	r3, #0
 8010a8c:	d10a      	bne.n	8010aa4 <tcp_enqueue_flags+0x1b0>
 8010a8e:	687b      	ldr	r3, [r7, #4]
 8010a90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010a92:	2b00      	cmp	r3, #0
 8010a94:	d106      	bne.n	8010aa4 <tcp_enqueue_flags+0x1b0>
 8010a96:	4b06      	ldr	r3, [pc, #24]	; (8010ab0 <tcp_enqueue_flags+0x1bc>)
 8010a98:	f240 4265 	movw	r2, #1125	; 0x465
 8010a9c:	490b      	ldr	r1, [pc, #44]	; (8010acc <tcp_enqueue_flags+0x1d8>)
 8010a9e:	4806      	ldr	r0, [pc, #24]	; (8010ab8 <tcp_enqueue_flags+0x1c4>)
 8010aa0:	f003 fd70 	bl	8014584 <iprintf>
=======
 8010a2e:	68fb      	ldr	r3, [r7, #12]
 8010a30:	685b      	ldr	r3, [r3, #4]
 8010a32:	4618      	mov	r0, r3
 8010a34:	f7fb fc4c 	bl	800c2d0 <pbuf_clen>
 8010a38:	4603      	mov	r3, r0
 8010a3a:	461a      	mov	r2, r3
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010a42:	4413      	add	r3, r2
 8010a44:	b29a      	uxth	r2, r3
 8010a46:	687b      	ldr	r3, [r7, #4]
 8010a48:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8010a4c:	687b      	ldr	r3, [r7, #4]
 8010a4e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010a52:	2b00      	cmp	r3, #0
 8010a54:	d00e      	beq.n	8010a74 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8010a56:	687b      	ldr	r3, [r7, #4]
 8010a58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010a5a:	2b00      	cmp	r3, #0
 8010a5c:	d10a      	bne.n	8010a74 <tcp_enqueue_flags+0x1b0>
 8010a5e:	687b      	ldr	r3, [r7, #4]
 8010a60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010a62:	2b00      	cmp	r3, #0
 8010a64:	d106      	bne.n	8010a74 <tcp_enqueue_flags+0x1b0>
 8010a66:	4b06      	ldr	r3, [pc, #24]	; (8010a80 <tcp_enqueue_flags+0x1bc>)
 8010a68:	f240 4265 	movw	r2, #1125	; 0x465
 8010a6c:	490b      	ldr	r1, [pc, #44]	; (8010a9c <tcp_enqueue_flags+0x1d8>)
 8010a6e:	4806      	ldr	r0, [pc, #24]	; (8010a88 <tcp_enqueue_flags+0x1c4>)
 8010a70:	f003 fd70 	bl	8014554 <iprintf>
>>>>>>> Stashed changes
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
<<<<<<< Updated upstream
 8010aa4:	2300      	movs	r3, #0
}
 8010aa6:	4618      	mov	r0, r3
 8010aa8:	3720      	adds	r7, #32
 8010aaa:	46bd      	mov	sp, r7
 8010aac:	bd80      	pop	{r7, pc}
 8010aae:	bf00      	nop
 8010ab0:	08017010 	.word	0x08017010
 8010ab4:	08017434 	.word	0x08017434
 8010ab8:	08017064 	.word	0x08017064
 8010abc:	0801748c 	.word	0x0801748c
 8010ac0:	080174ac 	.word	0x080174ac
 8010ac4:	080174e8 	.word	0x080174e8
 8010ac8:	08017500 	.word	0x08017500
 8010acc:	0801752c 	.word	0x0801752c

08010ad0 <tcp_output>:
=======
 8010a74:	2300      	movs	r3, #0
}
 8010a76:	4618      	mov	r0, r3
 8010a78:	3720      	adds	r7, #32
 8010a7a:	46bd      	mov	sp, r7
 8010a7c:	bd80      	pop	{r7, pc}
 8010a7e:	bf00      	nop
 8010a80:	08016ff4 	.word	0x08016ff4
 8010a84:	08017418 	.word	0x08017418
 8010a88:	08017048 	.word	0x08017048
 8010a8c:	08017470 	.word	0x08017470
 8010a90:	08017490 	.word	0x08017490
 8010a94:	080174cc 	.word	0x080174cc
 8010a98:	080174e4 	.word	0x080174e4
 8010a9c:	08017510 	.word	0x08017510

08010aa0 <tcp_output>:
>>>>>>> Stashed changes
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
<<<<<<< Updated upstream
 8010ad0:	b5b0      	push	{r4, r5, r7, lr}
 8010ad2:	b08a      	sub	sp, #40	; 0x28
 8010ad4:	af00      	add	r7, sp, #0
 8010ad6:	6078      	str	r0, [r7, #4]
=======
 8010aa0:	b5b0      	push	{r4, r5, r7, lr}
 8010aa2:	b08a      	sub	sp, #40	; 0x28
 8010aa4:	af00      	add	r7, sp, #0
 8010aa6:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
<<<<<<< Updated upstream
 8010ad8:	687b      	ldr	r3, [r7, #4]
 8010ada:	2b00      	cmp	r3, #0
 8010adc:	d106      	bne.n	8010aec <tcp_output+0x1c>
 8010ade:	4b9e      	ldr	r3, [pc, #632]	; (8010d58 <tcp_output+0x288>)
 8010ae0:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8010ae4:	499d      	ldr	r1, [pc, #628]	; (8010d5c <tcp_output+0x28c>)
 8010ae6:	489e      	ldr	r0, [pc, #632]	; (8010d60 <tcp_output+0x290>)
 8010ae8:	f003 fd4c 	bl	8014584 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8010aec:	687b      	ldr	r3, [r7, #4]
 8010aee:	7d1b      	ldrb	r3, [r3, #20]
 8010af0:	2b01      	cmp	r3, #1
 8010af2:	d106      	bne.n	8010b02 <tcp_output+0x32>
 8010af4:	4b98      	ldr	r3, [pc, #608]	; (8010d58 <tcp_output+0x288>)
 8010af6:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8010afa:	499a      	ldr	r1, [pc, #616]	; (8010d64 <tcp_output+0x294>)
 8010afc:	4898      	ldr	r0, [pc, #608]	; (8010d60 <tcp_output+0x290>)
 8010afe:	f003 fd41 	bl	8014584 <iprintf>
=======
 8010aa8:	687b      	ldr	r3, [r7, #4]
 8010aaa:	2b00      	cmp	r3, #0
 8010aac:	d106      	bne.n	8010abc <tcp_output+0x1c>
 8010aae:	4b9e      	ldr	r3, [pc, #632]	; (8010d28 <tcp_output+0x288>)
 8010ab0:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8010ab4:	499d      	ldr	r1, [pc, #628]	; (8010d2c <tcp_output+0x28c>)
 8010ab6:	489e      	ldr	r0, [pc, #632]	; (8010d30 <tcp_output+0x290>)
 8010ab8:	f003 fd4c 	bl	8014554 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8010abc:	687b      	ldr	r3, [r7, #4]
 8010abe:	7d1b      	ldrb	r3, [r3, #20]
 8010ac0:	2b01      	cmp	r3, #1
 8010ac2:	d106      	bne.n	8010ad2 <tcp_output+0x32>
 8010ac4:	4b98      	ldr	r3, [pc, #608]	; (8010d28 <tcp_output+0x288>)
 8010ac6:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8010aca:	499a      	ldr	r1, [pc, #616]	; (8010d34 <tcp_output+0x294>)
 8010acc:	4898      	ldr	r0, [pc, #608]	; (8010d30 <tcp_output+0x290>)
 8010ace:	f003 fd41 	bl	8014554 <iprintf>
>>>>>>> Stashed changes

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
<<<<<<< Updated upstream
 8010b02:	4b99      	ldr	r3, [pc, #612]	; (8010d68 <tcp_output+0x298>)
 8010b04:	681b      	ldr	r3, [r3, #0]
 8010b06:	687a      	ldr	r2, [r7, #4]
 8010b08:	429a      	cmp	r2, r3
 8010b0a:	d101      	bne.n	8010b10 <tcp_output+0x40>
    return ERR_OK;
 8010b0c:	2300      	movs	r3, #0
 8010b0e:	e1ce      	b.n	8010eae <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8010b10:	687b      	ldr	r3, [r7, #4]
 8010b12:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010b16:	687b      	ldr	r3, [r7, #4]
 8010b18:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010b1c:	4293      	cmp	r3, r2
 8010b1e:	bf28      	it	cs
 8010b20:	4613      	movcs	r3, r2
 8010b22:	b29b      	uxth	r3, r3
 8010b24:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8010b26:	687b      	ldr	r3, [r7, #4]
 8010b28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010b2a:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8010b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b2e:	2b00      	cmp	r3, #0
 8010b30:	d10b      	bne.n	8010b4a <tcp_output+0x7a>
=======
 8010ad2:	4b99      	ldr	r3, [pc, #612]	; (8010d38 <tcp_output+0x298>)
 8010ad4:	681b      	ldr	r3, [r3, #0]
 8010ad6:	687a      	ldr	r2, [r7, #4]
 8010ad8:	429a      	cmp	r2, r3
 8010ada:	d101      	bne.n	8010ae0 <tcp_output+0x40>
    return ERR_OK;
 8010adc:	2300      	movs	r3, #0
 8010ade:	e1ce      	b.n	8010e7e <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8010ae0:	687b      	ldr	r3, [r7, #4]
 8010ae2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010ae6:	687b      	ldr	r3, [r7, #4]
 8010ae8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010aec:	4293      	cmp	r3, r2
 8010aee:	bf28      	it	cs
 8010af0:	4613      	movcs	r3, r2
 8010af2:	b29b      	uxth	r3, r3
 8010af4:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8010af6:	687b      	ldr	r3, [r7, #4]
 8010af8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010afa:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8010afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010afe:	2b00      	cmp	r3, #0
 8010b00:	d10b      	bne.n	8010b1a <tcp_output+0x7a>
>>>>>>> Stashed changes
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
<<<<<<< Updated upstream
 8010b32:	687b      	ldr	r3, [r7, #4]
 8010b34:	8b5b      	ldrh	r3, [r3, #26]
 8010b36:	f003 0302 	and.w	r3, r3, #2
 8010b3a:	2b00      	cmp	r3, #0
 8010b3c:	f000 81aa 	beq.w	8010e94 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8010b40:	6878      	ldr	r0, [r7, #4]
 8010b42:	f000 fdcb 	bl	80116dc <tcp_send_empty_ack>
 8010b46:	4603      	mov	r3, r0
 8010b48:	e1b1      	b.n	8010eae <tcp_output+0x3de>
=======
 8010b02:	687b      	ldr	r3, [r7, #4]
 8010b04:	8b5b      	ldrh	r3, [r3, #26]
 8010b06:	f003 0302 	and.w	r3, r3, #2
 8010b0a:	2b00      	cmp	r3, #0
 8010b0c:	f000 81aa 	beq.w	8010e64 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8010b10:	6878      	ldr	r0, [r7, #4]
 8010b12:	f000 fdcb 	bl	80116ac <tcp_send_empty_ack>
 8010b16:	4603      	mov	r3, r0
 8010b18:	e1b1      	b.n	8010e7e <tcp_output+0x3de>
>>>>>>> Stashed changes
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
<<<<<<< Updated upstream
 8010b4a:	6879      	ldr	r1, [r7, #4]
 8010b4c:	687b      	ldr	r3, [r7, #4]
 8010b4e:	3304      	adds	r3, #4
 8010b50:	461a      	mov	r2, r3
 8010b52:	6878      	ldr	r0, [r7, #4]
 8010b54:	f7ff fc7c 	bl	8010450 <tcp_route>
 8010b58:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8010b5a:	697b      	ldr	r3, [r7, #20]
 8010b5c:	2b00      	cmp	r3, #0
 8010b5e:	d102      	bne.n	8010b66 <tcp_output+0x96>
    return ERR_RTE;
 8010b60:	f06f 0303 	mvn.w	r3, #3
 8010b64:	e1a3      	b.n	8010eae <tcp_output+0x3de>
=======
 8010b1a:	6879      	ldr	r1, [r7, #4]
 8010b1c:	687b      	ldr	r3, [r7, #4]
 8010b1e:	3304      	adds	r3, #4
 8010b20:	461a      	mov	r2, r3
 8010b22:	6878      	ldr	r0, [r7, #4]
 8010b24:	f7ff fc7c 	bl	8010420 <tcp_route>
 8010b28:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8010b2a:	697b      	ldr	r3, [r7, #20]
 8010b2c:	2b00      	cmp	r3, #0
 8010b2e:	d102      	bne.n	8010b36 <tcp_output+0x96>
    return ERR_RTE;
 8010b30:	f06f 0303 	mvn.w	r3, #3
 8010b34:	e1a3      	b.n	8010e7e <tcp_output+0x3de>
>>>>>>> Stashed changes
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
<<<<<<< Updated upstream
 8010b66:	687b      	ldr	r3, [r7, #4]
 8010b68:	2b00      	cmp	r3, #0
 8010b6a:	d003      	beq.n	8010b74 <tcp_output+0xa4>
 8010b6c:	687b      	ldr	r3, [r7, #4]
 8010b6e:	681b      	ldr	r3, [r3, #0]
 8010b70:	2b00      	cmp	r3, #0
 8010b72:	d111      	bne.n	8010b98 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8010b74:	697b      	ldr	r3, [r7, #20]
 8010b76:	2b00      	cmp	r3, #0
 8010b78:	d002      	beq.n	8010b80 <tcp_output+0xb0>
 8010b7a:	697b      	ldr	r3, [r7, #20]
 8010b7c:	3304      	adds	r3, #4
 8010b7e:	e000      	b.n	8010b82 <tcp_output+0xb2>
 8010b80:	2300      	movs	r3, #0
 8010b82:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8010b84:	693b      	ldr	r3, [r7, #16]
 8010b86:	2b00      	cmp	r3, #0
 8010b88:	d102      	bne.n	8010b90 <tcp_output+0xc0>
      return ERR_RTE;
 8010b8a:	f06f 0303 	mvn.w	r3, #3
 8010b8e:	e18e      	b.n	8010eae <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8010b90:	693b      	ldr	r3, [r7, #16]
 8010b92:	681a      	ldr	r2, [r3, #0]
 8010b94:	687b      	ldr	r3, [r7, #4]
 8010b96:	601a      	str	r2, [r3, #0]
=======
 8010b36:	687b      	ldr	r3, [r7, #4]
 8010b38:	2b00      	cmp	r3, #0
 8010b3a:	d003      	beq.n	8010b44 <tcp_output+0xa4>
 8010b3c:	687b      	ldr	r3, [r7, #4]
 8010b3e:	681b      	ldr	r3, [r3, #0]
 8010b40:	2b00      	cmp	r3, #0
 8010b42:	d111      	bne.n	8010b68 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8010b44:	697b      	ldr	r3, [r7, #20]
 8010b46:	2b00      	cmp	r3, #0
 8010b48:	d002      	beq.n	8010b50 <tcp_output+0xb0>
 8010b4a:	697b      	ldr	r3, [r7, #20]
 8010b4c:	3304      	adds	r3, #4
 8010b4e:	e000      	b.n	8010b52 <tcp_output+0xb2>
 8010b50:	2300      	movs	r3, #0
 8010b52:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8010b54:	693b      	ldr	r3, [r7, #16]
 8010b56:	2b00      	cmp	r3, #0
 8010b58:	d102      	bne.n	8010b60 <tcp_output+0xc0>
      return ERR_RTE;
 8010b5a:	f06f 0303 	mvn.w	r3, #3
 8010b5e:	e18e      	b.n	8010e7e <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8010b60:	693b      	ldr	r3, [r7, #16]
 8010b62:	681a      	ldr	r2, [r3, #0]
 8010b64:	687b      	ldr	r3, [r7, #4]
 8010b66:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
<<<<<<< Updated upstream
 8010b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b9a:	68db      	ldr	r3, [r3, #12]
 8010b9c:	685b      	ldr	r3, [r3, #4]
 8010b9e:	4618      	mov	r0, r3
 8010ba0:	f7fa f8a8 	bl	800acf4 <lwip_htonl>
 8010ba4:	4602      	mov	r2, r0
 8010ba6:	687b      	ldr	r3, [r7, #4]
 8010ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010baa:	1ad3      	subs	r3, r2, r3
 8010bac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010bae:	8912      	ldrh	r2, [r2, #8]
 8010bb0:	4413      	add	r3, r2
 8010bb2:	69ba      	ldr	r2, [r7, #24]
 8010bb4:	429a      	cmp	r2, r3
 8010bb6:	d227      	bcs.n	8010c08 <tcp_output+0x138>
=======
 8010b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b6a:	68db      	ldr	r3, [r3, #12]
 8010b6c:	685b      	ldr	r3, [r3, #4]
 8010b6e:	4618      	mov	r0, r3
 8010b70:	f7fa f8a8 	bl	800acc4 <lwip_htonl>
 8010b74:	4602      	mov	r2, r0
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010b7a:	1ad3      	subs	r3, r2, r3
 8010b7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010b7e:	8912      	ldrh	r2, [r2, #8]
 8010b80:	4413      	add	r3, r2
 8010b82:	69ba      	ldr	r2, [r7, #24]
 8010b84:	429a      	cmp	r2, r3
 8010b86:	d227      	bcs.n	8010bd8 <tcp_output+0x138>
>>>>>>> Stashed changes
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
<<<<<<< Updated upstream
 8010bb8:	687b      	ldr	r3, [r7, #4]
 8010bba:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010bbe:	461a      	mov	r2, r3
 8010bc0:	69bb      	ldr	r3, [r7, #24]
 8010bc2:	4293      	cmp	r3, r2
 8010bc4:	d114      	bne.n	8010bf0 <tcp_output+0x120>
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010bca:	2b00      	cmp	r3, #0
 8010bcc:	d110      	bne.n	8010bf0 <tcp_output+0x120>
 8010bce:	687b      	ldr	r3, [r7, #4]
 8010bd0:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8010bd4:	2b00      	cmp	r3, #0
 8010bd6:	d10b      	bne.n	8010bf0 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8010bd8:	687b      	ldr	r3, [r7, #4]
 8010bda:	2200      	movs	r2, #0
 8010bdc:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8010be0:	687b      	ldr	r3, [r7, #4]
 8010be2:	2201      	movs	r2, #1
 8010be4:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	2200      	movs	r2, #0
 8010bec:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8010bf0:	687b      	ldr	r3, [r7, #4]
 8010bf2:	8b5b      	ldrh	r3, [r3, #26]
 8010bf4:	f003 0302 	and.w	r3, r3, #2
 8010bf8:	2b00      	cmp	r3, #0
 8010bfa:	f000 814d 	beq.w	8010e98 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8010bfe:	6878      	ldr	r0, [r7, #4]
 8010c00:	f000 fd6c 	bl	80116dc <tcp_send_empty_ack>
 8010c04:	4603      	mov	r3, r0
 8010c06:	e152      	b.n	8010eae <tcp_output+0x3de>
=======
 8010b88:	687b      	ldr	r3, [r7, #4]
 8010b8a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010b8e:	461a      	mov	r2, r3
 8010b90:	69bb      	ldr	r3, [r7, #24]
 8010b92:	4293      	cmp	r3, r2
 8010b94:	d114      	bne.n	8010bc0 <tcp_output+0x120>
 8010b96:	687b      	ldr	r3, [r7, #4]
 8010b98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010b9a:	2b00      	cmp	r3, #0
 8010b9c:	d110      	bne.n	8010bc0 <tcp_output+0x120>
 8010b9e:	687b      	ldr	r3, [r7, #4]
 8010ba0:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8010ba4:	2b00      	cmp	r3, #0
 8010ba6:	d10b      	bne.n	8010bc0 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	2200      	movs	r2, #0
 8010bac:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	2201      	movs	r2, #1
 8010bb4:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8010bb8:	687b      	ldr	r3, [r7, #4]
 8010bba:	2200      	movs	r2, #0
 8010bbc:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8010bc0:	687b      	ldr	r3, [r7, #4]
 8010bc2:	8b5b      	ldrh	r3, [r3, #26]
 8010bc4:	f003 0302 	and.w	r3, r3, #2
 8010bc8:	2b00      	cmp	r3, #0
 8010bca:	f000 814d 	beq.w	8010e68 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8010bce:	6878      	ldr	r0, [r7, #4]
 8010bd0:	f000 fd6c 	bl	80116ac <tcp_send_empty_ack>
 8010bd4:	4603      	mov	r3, r0
 8010bd6:	e152      	b.n	8010e7e <tcp_output+0x3de>
>>>>>>> Stashed changes
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
<<<<<<< Updated upstream
 8010c08:	687b      	ldr	r3, [r7, #4]
 8010c0a:	2200      	movs	r2, #0
 8010c0c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8010c10:	687b      	ldr	r3, [r7, #4]
 8010c12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010c14:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8010c16:	6a3b      	ldr	r3, [r7, #32]
 8010c18:	2b00      	cmp	r3, #0
 8010c1a:	f000 811c 	beq.w	8010e56 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8010c1e:	e002      	b.n	8010c26 <tcp_output+0x156>
 8010c20:	6a3b      	ldr	r3, [r7, #32]
 8010c22:	681b      	ldr	r3, [r3, #0]
 8010c24:	623b      	str	r3, [r7, #32]
 8010c26:	6a3b      	ldr	r3, [r7, #32]
 8010c28:	681b      	ldr	r3, [r3, #0]
 8010c2a:	2b00      	cmp	r3, #0
 8010c2c:	d1f8      	bne.n	8010c20 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8010c2e:	e112      	b.n	8010e56 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8010c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c32:	68db      	ldr	r3, [r3, #12]
 8010c34:	899b      	ldrh	r3, [r3, #12]
 8010c36:	b29b      	uxth	r3, r3
 8010c38:	4618      	mov	r0, r3
 8010c3a:	f7fa f846 	bl	800acca <lwip_htons>
 8010c3e:	4603      	mov	r3, r0
 8010c40:	b2db      	uxtb	r3, r3
 8010c42:	f003 0304 	and.w	r3, r3, #4
 8010c46:	2b00      	cmp	r3, #0
 8010c48:	d006      	beq.n	8010c58 <tcp_output+0x188>
 8010c4a:	4b43      	ldr	r3, [pc, #268]	; (8010d58 <tcp_output+0x288>)
 8010c4c:	f240 5236 	movw	r2, #1334	; 0x536
 8010c50:	4946      	ldr	r1, [pc, #280]	; (8010d6c <tcp_output+0x29c>)
 8010c52:	4843      	ldr	r0, [pc, #268]	; (8010d60 <tcp_output+0x290>)
 8010c54:	f003 fc96 	bl	8014584 <iprintf>
=======
 8010bd8:	687b      	ldr	r3, [r7, #4]
 8010bda:	2200      	movs	r2, #0
 8010bdc:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8010be0:	687b      	ldr	r3, [r7, #4]
 8010be2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010be4:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8010be6:	6a3b      	ldr	r3, [r7, #32]
 8010be8:	2b00      	cmp	r3, #0
 8010bea:	f000 811c 	beq.w	8010e26 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8010bee:	e002      	b.n	8010bf6 <tcp_output+0x156>
 8010bf0:	6a3b      	ldr	r3, [r7, #32]
 8010bf2:	681b      	ldr	r3, [r3, #0]
 8010bf4:	623b      	str	r3, [r7, #32]
 8010bf6:	6a3b      	ldr	r3, [r7, #32]
 8010bf8:	681b      	ldr	r3, [r3, #0]
 8010bfa:	2b00      	cmp	r3, #0
 8010bfc:	d1f8      	bne.n	8010bf0 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8010bfe:	e112      	b.n	8010e26 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8010c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c02:	68db      	ldr	r3, [r3, #12]
 8010c04:	899b      	ldrh	r3, [r3, #12]
 8010c06:	b29b      	uxth	r3, r3
 8010c08:	4618      	mov	r0, r3
 8010c0a:	f7fa f846 	bl	800ac9a <lwip_htons>
 8010c0e:	4603      	mov	r3, r0
 8010c10:	b2db      	uxtb	r3, r3
 8010c12:	f003 0304 	and.w	r3, r3, #4
 8010c16:	2b00      	cmp	r3, #0
 8010c18:	d006      	beq.n	8010c28 <tcp_output+0x188>
 8010c1a:	4b43      	ldr	r3, [pc, #268]	; (8010d28 <tcp_output+0x288>)
 8010c1c:	f240 5236 	movw	r2, #1334	; 0x536
 8010c20:	4946      	ldr	r1, [pc, #280]	; (8010d3c <tcp_output+0x29c>)
 8010c22:	4843      	ldr	r0, [pc, #268]	; (8010d30 <tcp_output+0x290>)
 8010c24:	f003 fc96 	bl	8014554 <iprintf>
>>>>>>> Stashed changes
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
<<<<<<< Updated upstream
 8010c58:	687b      	ldr	r3, [r7, #4]
 8010c5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010c5c:	2b00      	cmp	r3, #0
 8010c5e:	d01f      	beq.n	8010ca0 <tcp_output+0x1d0>
 8010c60:	687b      	ldr	r3, [r7, #4]
 8010c62:	8b5b      	ldrh	r3, [r3, #26]
 8010c64:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8010c68:	2b00      	cmp	r3, #0
 8010c6a:	d119      	bne.n	8010ca0 <tcp_output+0x1d0>
 8010c6c:	687b      	ldr	r3, [r7, #4]
 8010c6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010c70:	2b00      	cmp	r3, #0
 8010c72:	d00b      	beq.n	8010c8c <tcp_output+0x1bc>
 8010c74:	687b      	ldr	r3, [r7, #4]
 8010c76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010c78:	681b      	ldr	r3, [r3, #0]
 8010c7a:	2b00      	cmp	r3, #0
 8010c7c:	d110      	bne.n	8010ca0 <tcp_output+0x1d0>
 8010c7e:	687b      	ldr	r3, [r7, #4]
 8010c80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010c82:	891a      	ldrh	r2, [r3, #8]
 8010c84:	687b      	ldr	r3, [r7, #4]
 8010c86:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010c88:	429a      	cmp	r2, r3
 8010c8a:	d209      	bcs.n	8010ca0 <tcp_output+0x1d0>
 8010c8c:	687b      	ldr	r3, [r7, #4]
 8010c8e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8010c92:	2b00      	cmp	r3, #0
 8010c94:	d004      	beq.n	8010ca0 <tcp_output+0x1d0>
 8010c96:	687b      	ldr	r3, [r7, #4]
 8010c98:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010c9c:	2b08      	cmp	r3, #8
 8010c9e:	d901      	bls.n	8010ca4 <tcp_output+0x1d4>
 8010ca0:	2301      	movs	r3, #1
 8010ca2:	e000      	b.n	8010ca6 <tcp_output+0x1d6>
 8010ca4:	2300      	movs	r3, #0
 8010ca6:	2b00      	cmp	r3, #0
 8010ca8:	d106      	bne.n	8010cb8 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8010caa:	687b      	ldr	r3, [r7, #4]
 8010cac:	8b5b      	ldrh	r3, [r3, #26]
 8010cae:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8010cb2:	2b00      	cmp	r3, #0
 8010cb4:	f000 80e4 	beq.w	8010e80 <tcp_output+0x3b0>
=======
 8010c28:	687b      	ldr	r3, [r7, #4]
 8010c2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010c2c:	2b00      	cmp	r3, #0
 8010c2e:	d01f      	beq.n	8010c70 <tcp_output+0x1d0>
 8010c30:	687b      	ldr	r3, [r7, #4]
 8010c32:	8b5b      	ldrh	r3, [r3, #26]
 8010c34:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8010c38:	2b00      	cmp	r3, #0
 8010c3a:	d119      	bne.n	8010c70 <tcp_output+0x1d0>
 8010c3c:	687b      	ldr	r3, [r7, #4]
 8010c3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010c40:	2b00      	cmp	r3, #0
 8010c42:	d00b      	beq.n	8010c5c <tcp_output+0x1bc>
 8010c44:	687b      	ldr	r3, [r7, #4]
 8010c46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010c48:	681b      	ldr	r3, [r3, #0]
 8010c4a:	2b00      	cmp	r3, #0
 8010c4c:	d110      	bne.n	8010c70 <tcp_output+0x1d0>
 8010c4e:	687b      	ldr	r3, [r7, #4]
 8010c50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010c52:	891a      	ldrh	r2, [r3, #8]
 8010c54:	687b      	ldr	r3, [r7, #4]
 8010c56:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010c58:	429a      	cmp	r2, r3
 8010c5a:	d209      	bcs.n	8010c70 <tcp_output+0x1d0>
 8010c5c:	687b      	ldr	r3, [r7, #4]
 8010c5e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8010c62:	2b00      	cmp	r3, #0
 8010c64:	d004      	beq.n	8010c70 <tcp_output+0x1d0>
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010c6c:	2b08      	cmp	r3, #8
 8010c6e:	d901      	bls.n	8010c74 <tcp_output+0x1d4>
 8010c70:	2301      	movs	r3, #1
 8010c72:	e000      	b.n	8010c76 <tcp_output+0x1d6>
 8010c74:	2300      	movs	r3, #0
 8010c76:	2b00      	cmp	r3, #0
 8010c78:	d106      	bne.n	8010c88 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8010c7a:	687b      	ldr	r3, [r7, #4]
 8010c7c:	8b5b      	ldrh	r3, [r3, #26]
 8010c7e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8010c82:	2b00      	cmp	r3, #0
 8010c84:	f000 80e4 	beq.w	8010e50 <tcp_output+0x3b0>
>>>>>>> Stashed changes
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
<<<<<<< Updated upstream
 8010cb8:	687b      	ldr	r3, [r7, #4]
 8010cba:	7d1b      	ldrb	r3, [r3, #20]
 8010cbc:	2b02      	cmp	r3, #2
 8010cbe:	d00d      	beq.n	8010cdc <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8010cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cc2:	68db      	ldr	r3, [r3, #12]
 8010cc4:	899b      	ldrh	r3, [r3, #12]
 8010cc6:	b29c      	uxth	r4, r3
 8010cc8:	2010      	movs	r0, #16
 8010cca:	f7f9 fffe 	bl	800acca <lwip_htons>
 8010cce:	4603      	mov	r3, r0
 8010cd0:	461a      	mov	r2, r3
 8010cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cd4:	68db      	ldr	r3, [r3, #12]
 8010cd6:	4322      	orrs	r2, r4
 8010cd8:	b292      	uxth	r2, r2
 8010cda:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8010cdc:	697a      	ldr	r2, [r7, #20]
 8010cde:	6879      	ldr	r1, [r7, #4]
 8010ce0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010ce2:	f000 f909 	bl	8010ef8 <tcp_output_segment>
 8010ce6:	4603      	mov	r3, r0
 8010ce8:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8010cea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010cee:	2b00      	cmp	r3, #0
 8010cf0:	d009      	beq.n	8010d06 <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010cf2:	687b      	ldr	r3, [r7, #4]
 8010cf4:	8b5b      	ldrh	r3, [r3, #26]
 8010cf6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010cfa:	b29a      	uxth	r2, r3
 8010cfc:	687b      	ldr	r3, [r7, #4]
 8010cfe:	835a      	strh	r2, [r3, #26]
      return err;
 8010d00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010d04:	e0d3      	b.n	8010eae <tcp_output+0x3de>
=======
 8010c88:	687b      	ldr	r3, [r7, #4]
 8010c8a:	7d1b      	ldrb	r3, [r3, #20]
 8010c8c:	2b02      	cmp	r3, #2
 8010c8e:	d00d      	beq.n	8010cac <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8010c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c92:	68db      	ldr	r3, [r3, #12]
 8010c94:	899b      	ldrh	r3, [r3, #12]
 8010c96:	b29c      	uxth	r4, r3
 8010c98:	2010      	movs	r0, #16
 8010c9a:	f7f9 fffe 	bl	800ac9a <lwip_htons>
 8010c9e:	4603      	mov	r3, r0
 8010ca0:	461a      	mov	r2, r3
 8010ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ca4:	68db      	ldr	r3, [r3, #12]
 8010ca6:	4322      	orrs	r2, r4
 8010ca8:	b292      	uxth	r2, r2
 8010caa:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8010cac:	697a      	ldr	r2, [r7, #20]
 8010cae:	6879      	ldr	r1, [r7, #4]
 8010cb0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010cb2:	f000 f909 	bl	8010ec8 <tcp_output_segment>
 8010cb6:	4603      	mov	r3, r0
 8010cb8:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8010cba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010cbe:	2b00      	cmp	r3, #0
 8010cc0:	d009      	beq.n	8010cd6 <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010cc2:	687b      	ldr	r3, [r7, #4]
 8010cc4:	8b5b      	ldrh	r3, [r3, #26]
 8010cc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010cca:	b29a      	uxth	r2, r3
 8010ccc:	687b      	ldr	r3, [r7, #4]
 8010cce:	835a      	strh	r2, [r3, #26]
      return err;
 8010cd0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010cd4:	e0d3      	b.n	8010e7e <tcp_output+0x3de>
>>>>>>> Stashed changes
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
<<<<<<< Updated upstream
 8010d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d08:	681a      	ldr	r2, [r3, #0]
 8010d0a:	687b      	ldr	r3, [r7, #4]
 8010d0c:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8010d0e:	687b      	ldr	r3, [r7, #4]
 8010d10:	7d1b      	ldrb	r3, [r3, #20]
 8010d12:	2b02      	cmp	r3, #2
 8010d14:	d006      	beq.n	8010d24 <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8010d16:	687b      	ldr	r3, [r7, #4]
 8010d18:	8b5b      	ldrh	r3, [r3, #26]
 8010d1a:	f023 0303 	bic.w	r3, r3, #3
 8010d1e:	b29a      	uxth	r2, r3
 8010d20:	687b      	ldr	r3, [r7, #4]
 8010d22:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8010d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d26:	68db      	ldr	r3, [r3, #12]
 8010d28:	685b      	ldr	r3, [r3, #4]
 8010d2a:	4618      	mov	r0, r3
 8010d2c:	f7f9 ffe2 	bl	800acf4 <lwip_htonl>
 8010d30:	4604      	mov	r4, r0
 8010d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d34:	891b      	ldrh	r3, [r3, #8]
 8010d36:	461d      	mov	r5, r3
 8010d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d3a:	68db      	ldr	r3, [r3, #12]
 8010d3c:	899b      	ldrh	r3, [r3, #12]
 8010d3e:	b29b      	uxth	r3, r3
 8010d40:	4618      	mov	r0, r3
 8010d42:	f7f9 ffc2 	bl	800acca <lwip_htons>
 8010d46:	4603      	mov	r3, r0
 8010d48:	b2db      	uxtb	r3, r3
 8010d4a:	f003 0303 	and.w	r3, r3, #3
 8010d4e:	2b00      	cmp	r3, #0
 8010d50:	d00e      	beq.n	8010d70 <tcp_output+0x2a0>
 8010d52:	2301      	movs	r3, #1
 8010d54:	e00d      	b.n	8010d72 <tcp_output+0x2a2>
 8010d56:	bf00      	nop
 8010d58:	08017010 	.word	0x08017010
 8010d5c:	08017554 	.word	0x08017554
 8010d60:	08017064 	.word	0x08017064
 8010d64:	0801756c 	.word	0x0801756c
 8010d68:	200072b4 	.word	0x200072b4
 8010d6c:	08017594 	.word	0x08017594
 8010d70:	2300      	movs	r3, #0
 8010d72:	442b      	add	r3, r5
 8010d74:	4423      	add	r3, r4
 8010d76:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8010d78:	687b      	ldr	r3, [r7, #4]
 8010d7a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010d7c:	68bb      	ldr	r3, [r7, #8]
 8010d7e:	1ad3      	subs	r3, r2, r3
 8010d80:	2b00      	cmp	r3, #0
 8010d82:	da02      	bge.n	8010d8a <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8010d84:	687b      	ldr	r3, [r7, #4]
 8010d86:	68ba      	ldr	r2, [r7, #8]
 8010d88:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8010d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d8c:	891b      	ldrh	r3, [r3, #8]
 8010d8e:	461c      	mov	r4, r3
 8010d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d92:	68db      	ldr	r3, [r3, #12]
 8010d94:	899b      	ldrh	r3, [r3, #12]
 8010d96:	b29b      	uxth	r3, r3
 8010d98:	4618      	mov	r0, r3
 8010d9a:	f7f9 ff96 	bl	800acca <lwip_htons>
 8010d9e:	4603      	mov	r3, r0
 8010da0:	b2db      	uxtb	r3, r3
 8010da2:	f003 0303 	and.w	r3, r3, #3
 8010da6:	2b00      	cmp	r3, #0
 8010da8:	d001      	beq.n	8010dae <tcp_output+0x2de>
 8010daa:	2301      	movs	r3, #1
 8010dac:	e000      	b.n	8010db0 <tcp_output+0x2e0>
 8010dae:	2300      	movs	r3, #0
 8010db0:	4423      	add	r3, r4
 8010db2:	2b00      	cmp	r3, #0
 8010db4:	d049      	beq.n	8010e4a <tcp_output+0x37a>
      seg->next = NULL;
 8010db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010db8:	2200      	movs	r2, #0
 8010dba:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8010dbc:	687b      	ldr	r3, [r7, #4]
 8010dbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010dc0:	2b00      	cmp	r3, #0
 8010dc2:	d105      	bne.n	8010dd0 <tcp_output+0x300>
        pcb->unacked = seg;
 8010dc4:	687b      	ldr	r3, [r7, #4]
 8010dc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010dc8:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8010dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010dcc:	623b      	str	r3, [r7, #32]
 8010dce:	e03f      	b.n	8010e50 <tcp_output+0x380>
=======
 8010cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cd8:	681a      	ldr	r2, [r3, #0]
 8010cda:	687b      	ldr	r3, [r7, #4]
 8010cdc:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8010cde:	687b      	ldr	r3, [r7, #4]
 8010ce0:	7d1b      	ldrb	r3, [r3, #20]
 8010ce2:	2b02      	cmp	r3, #2
 8010ce4:	d006      	beq.n	8010cf4 <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8010ce6:	687b      	ldr	r3, [r7, #4]
 8010ce8:	8b5b      	ldrh	r3, [r3, #26]
 8010cea:	f023 0303 	bic.w	r3, r3, #3
 8010cee:	b29a      	uxth	r2, r3
 8010cf0:	687b      	ldr	r3, [r7, #4]
 8010cf2:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8010cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cf6:	68db      	ldr	r3, [r3, #12]
 8010cf8:	685b      	ldr	r3, [r3, #4]
 8010cfa:	4618      	mov	r0, r3
 8010cfc:	f7f9 ffe2 	bl	800acc4 <lwip_htonl>
 8010d00:	4604      	mov	r4, r0
 8010d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d04:	891b      	ldrh	r3, [r3, #8]
 8010d06:	461d      	mov	r5, r3
 8010d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d0a:	68db      	ldr	r3, [r3, #12]
 8010d0c:	899b      	ldrh	r3, [r3, #12]
 8010d0e:	b29b      	uxth	r3, r3
 8010d10:	4618      	mov	r0, r3
 8010d12:	f7f9 ffc2 	bl	800ac9a <lwip_htons>
 8010d16:	4603      	mov	r3, r0
 8010d18:	b2db      	uxtb	r3, r3
 8010d1a:	f003 0303 	and.w	r3, r3, #3
 8010d1e:	2b00      	cmp	r3, #0
 8010d20:	d00e      	beq.n	8010d40 <tcp_output+0x2a0>
 8010d22:	2301      	movs	r3, #1
 8010d24:	e00d      	b.n	8010d42 <tcp_output+0x2a2>
 8010d26:	bf00      	nop
 8010d28:	08016ff4 	.word	0x08016ff4
 8010d2c:	08017538 	.word	0x08017538
 8010d30:	08017048 	.word	0x08017048
 8010d34:	08017550 	.word	0x08017550
 8010d38:	200072b4 	.word	0x200072b4
 8010d3c:	08017578 	.word	0x08017578
 8010d40:	2300      	movs	r3, #0
 8010d42:	442b      	add	r3, r5
 8010d44:	4423      	add	r3, r4
 8010d46:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8010d48:	687b      	ldr	r3, [r7, #4]
 8010d4a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010d4c:	68bb      	ldr	r3, [r7, #8]
 8010d4e:	1ad3      	subs	r3, r2, r3
 8010d50:	2b00      	cmp	r3, #0
 8010d52:	da02      	bge.n	8010d5a <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8010d54:	687b      	ldr	r3, [r7, #4]
 8010d56:	68ba      	ldr	r2, [r7, #8]
 8010d58:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8010d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d5c:	891b      	ldrh	r3, [r3, #8]
 8010d5e:	461c      	mov	r4, r3
 8010d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d62:	68db      	ldr	r3, [r3, #12]
 8010d64:	899b      	ldrh	r3, [r3, #12]
 8010d66:	b29b      	uxth	r3, r3
 8010d68:	4618      	mov	r0, r3
 8010d6a:	f7f9 ff96 	bl	800ac9a <lwip_htons>
 8010d6e:	4603      	mov	r3, r0
 8010d70:	b2db      	uxtb	r3, r3
 8010d72:	f003 0303 	and.w	r3, r3, #3
 8010d76:	2b00      	cmp	r3, #0
 8010d78:	d001      	beq.n	8010d7e <tcp_output+0x2de>
 8010d7a:	2301      	movs	r3, #1
 8010d7c:	e000      	b.n	8010d80 <tcp_output+0x2e0>
 8010d7e:	2300      	movs	r3, #0
 8010d80:	4423      	add	r3, r4
 8010d82:	2b00      	cmp	r3, #0
 8010d84:	d049      	beq.n	8010e1a <tcp_output+0x37a>
      seg->next = NULL;
 8010d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d88:	2200      	movs	r2, #0
 8010d8a:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8010d8c:	687b      	ldr	r3, [r7, #4]
 8010d8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010d90:	2b00      	cmp	r3, #0
 8010d92:	d105      	bne.n	8010da0 <tcp_output+0x300>
        pcb->unacked = seg;
 8010d94:	687b      	ldr	r3, [r7, #4]
 8010d96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010d98:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8010d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d9c:	623b      	str	r3, [r7, #32]
 8010d9e:	e03f      	b.n	8010e20 <tcp_output+0x380>
>>>>>>> Stashed changes
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
<<<<<<< Updated upstream
 8010dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010dd2:	68db      	ldr	r3, [r3, #12]
 8010dd4:	685b      	ldr	r3, [r3, #4]
 8010dd6:	4618      	mov	r0, r3
 8010dd8:	f7f9 ff8c 	bl	800acf4 <lwip_htonl>
 8010ddc:	4604      	mov	r4, r0
 8010dde:	6a3b      	ldr	r3, [r7, #32]
 8010de0:	68db      	ldr	r3, [r3, #12]
 8010de2:	685b      	ldr	r3, [r3, #4]
 8010de4:	4618      	mov	r0, r3
 8010de6:	f7f9 ff85 	bl	800acf4 <lwip_htonl>
 8010dea:	4603      	mov	r3, r0
 8010dec:	1ae3      	subs	r3, r4, r3
 8010dee:	2b00      	cmp	r3, #0
 8010df0:	da24      	bge.n	8010e3c <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8010df2:	687b      	ldr	r3, [r7, #4]
 8010df4:	3370      	adds	r3, #112	; 0x70
 8010df6:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8010df8:	e002      	b.n	8010e00 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8010dfa:	69fb      	ldr	r3, [r7, #28]
 8010dfc:	681b      	ldr	r3, [r3, #0]
 8010dfe:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8010e00:	69fb      	ldr	r3, [r7, #28]
 8010e02:	681b      	ldr	r3, [r3, #0]
 8010e04:	2b00      	cmp	r3, #0
 8010e06:	d011      	beq.n	8010e2c <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8010e08:	69fb      	ldr	r3, [r7, #28]
 8010e0a:	681b      	ldr	r3, [r3, #0]
 8010e0c:	68db      	ldr	r3, [r3, #12]
 8010e0e:	685b      	ldr	r3, [r3, #4]
 8010e10:	4618      	mov	r0, r3
 8010e12:	f7f9 ff6f 	bl	800acf4 <lwip_htonl>
 8010e16:	4604      	mov	r4, r0
 8010e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e1a:	68db      	ldr	r3, [r3, #12]
 8010e1c:	685b      	ldr	r3, [r3, #4]
 8010e1e:	4618      	mov	r0, r3
 8010e20:	f7f9 ff68 	bl	800acf4 <lwip_htonl>
 8010e24:	4603      	mov	r3, r0
 8010e26:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8010e28:	2b00      	cmp	r3, #0
 8010e2a:	dbe6      	blt.n	8010dfa <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8010e2c:	69fb      	ldr	r3, [r7, #28]
 8010e2e:	681a      	ldr	r2, [r3, #0]
 8010e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e32:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8010e34:	69fb      	ldr	r3, [r7, #28]
 8010e36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010e38:	601a      	str	r2, [r3, #0]
 8010e3a:	e009      	b.n	8010e50 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8010e3c:	6a3b      	ldr	r3, [r7, #32]
 8010e3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010e40:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8010e42:	6a3b      	ldr	r3, [r7, #32]
 8010e44:	681b      	ldr	r3, [r3, #0]
 8010e46:	623b      	str	r3, [r7, #32]
 8010e48:	e002      	b.n	8010e50 <tcp_output+0x380>
=======
 8010da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010da2:	68db      	ldr	r3, [r3, #12]
 8010da4:	685b      	ldr	r3, [r3, #4]
 8010da6:	4618      	mov	r0, r3
 8010da8:	f7f9 ff8c 	bl	800acc4 <lwip_htonl>
 8010dac:	4604      	mov	r4, r0
 8010dae:	6a3b      	ldr	r3, [r7, #32]
 8010db0:	68db      	ldr	r3, [r3, #12]
 8010db2:	685b      	ldr	r3, [r3, #4]
 8010db4:	4618      	mov	r0, r3
 8010db6:	f7f9 ff85 	bl	800acc4 <lwip_htonl>
 8010dba:	4603      	mov	r3, r0
 8010dbc:	1ae3      	subs	r3, r4, r3
 8010dbe:	2b00      	cmp	r3, #0
 8010dc0:	da24      	bge.n	8010e0c <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8010dc2:	687b      	ldr	r3, [r7, #4]
 8010dc4:	3370      	adds	r3, #112	; 0x70
 8010dc6:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8010dc8:	e002      	b.n	8010dd0 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8010dca:	69fb      	ldr	r3, [r7, #28]
 8010dcc:	681b      	ldr	r3, [r3, #0]
 8010dce:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8010dd0:	69fb      	ldr	r3, [r7, #28]
 8010dd2:	681b      	ldr	r3, [r3, #0]
 8010dd4:	2b00      	cmp	r3, #0
 8010dd6:	d011      	beq.n	8010dfc <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8010dd8:	69fb      	ldr	r3, [r7, #28]
 8010dda:	681b      	ldr	r3, [r3, #0]
 8010ddc:	68db      	ldr	r3, [r3, #12]
 8010dde:	685b      	ldr	r3, [r3, #4]
 8010de0:	4618      	mov	r0, r3
 8010de2:	f7f9 ff6f 	bl	800acc4 <lwip_htonl>
 8010de6:	4604      	mov	r4, r0
 8010de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010dea:	68db      	ldr	r3, [r3, #12]
 8010dec:	685b      	ldr	r3, [r3, #4]
 8010dee:	4618      	mov	r0, r3
 8010df0:	f7f9 ff68 	bl	800acc4 <lwip_htonl>
 8010df4:	4603      	mov	r3, r0
 8010df6:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8010df8:	2b00      	cmp	r3, #0
 8010dfa:	dbe6      	blt.n	8010dca <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8010dfc:	69fb      	ldr	r3, [r7, #28]
 8010dfe:	681a      	ldr	r2, [r3, #0]
 8010e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e02:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8010e04:	69fb      	ldr	r3, [r7, #28]
 8010e06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010e08:	601a      	str	r2, [r3, #0]
 8010e0a:	e009      	b.n	8010e20 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8010e0c:	6a3b      	ldr	r3, [r7, #32]
 8010e0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010e10:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8010e12:	6a3b      	ldr	r3, [r7, #32]
 8010e14:	681b      	ldr	r3, [r3, #0]
 8010e16:	623b      	str	r3, [r7, #32]
 8010e18:	e002      	b.n	8010e20 <tcp_output+0x380>
>>>>>>> Stashed changes
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
<<<<<<< Updated upstream
 8010e4a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010e4c:	f7fc fc43 	bl	800d6d6 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8010e50:	687b      	ldr	r3, [r7, #4]
 8010e52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010e54:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8010e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e58:	2b00      	cmp	r3, #0
 8010e5a:	d012      	beq.n	8010e82 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8010e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e5e:	68db      	ldr	r3, [r3, #12]
 8010e60:	685b      	ldr	r3, [r3, #4]
 8010e62:	4618      	mov	r0, r3
 8010e64:	f7f9 ff46 	bl	800acf4 <lwip_htonl>
 8010e68:	4602      	mov	r2, r0
 8010e6a:	687b      	ldr	r3, [r7, #4]
 8010e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010e6e:	1ad3      	subs	r3, r2, r3
 8010e70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010e72:	8912      	ldrh	r2, [r2, #8]
 8010e74:	4413      	add	r3, r2
  while (seg != NULL &&
 8010e76:	69ba      	ldr	r2, [r7, #24]
 8010e78:	429a      	cmp	r2, r3
 8010e7a:	f4bf aed9 	bcs.w	8010c30 <tcp_output+0x160>
 8010e7e:	e000      	b.n	8010e82 <tcp_output+0x3b2>
      break;
 8010e80:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8010e82:	687b      	ldr	r3, [r7, #4]
 8010e84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010e86:	2b00      	cmp	r3, #0
 8010e88:	d108      	bne.n	8010e9c <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8010e8a:	687b      	ldr	r3, [r7, #4]
 8010e8c:	2200      	movs	r2, #0
 8010e8e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8010e92:	e004      	b.n	8010e9e <tcp_output+0x3ce>
    goto output_done;
 8010e94:	bf00      	nop
 8010e96:	e002      	b.n	8010e9e <tcp_output+0x3ce>
    goto output_done;
 8010e98:	bf00      	nop
 8010e9a:	e000      	b.n	8010e9e <tcp_output+0x3ce>
=======
 8010e1a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010e1c:	f7fc fc43 	bl	800d6a6 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8010e20:	687b      	ldr	r3, [r7, #4]
 8010e22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010e24:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8010e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e28:	2b00      	cmp	r3, #0
 8010e2a:	d012      	beq.n	8010e52 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8010e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e2e:	68db      	ldr	r3, [r3, #12]
 8010e30:	685b      	ldr	r3, [r3, #4]
 8010e32:	4618      	mov	r0, r3
 8010e34:	f7f9 ff46 	bl	800acc4 <lwip_htonl>
 8010e38:	4602      	mov	r2, r0
 8010e3a:	687b      	ldr	r3, [r7, #4]
 8010e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010e3e:	1ad3      	subs	r3, r2, r3
 8010e40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010e42:	8912      	ldrh	r2, [r2, #8]
 8010e44:	4413      	add	r3, r2
  while (seg != NULL &&
 8010e46:	69ba      	ldr	r2, [r7, #24]
 8010e48:	429a      	cmp	r2, r3
 8010e4a:	f4bf aed9 	bcs.w	8010c00 <tcp_output+0x160>
 8010e4e:	e000      	b.n	8010e52 <tcp_output+0x3b2>
      break;
 8010e50:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8010e52:	687b      	ldr	r3, [r7, #4]
 8010e54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010e56:	2b00      	cmp	r3, #0
 8010e58:	d108      	bne.n	8010e6c <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8010e5a:	687b      	ldr	r3, [r7, #4]
 8010e5c:	2200      	movs	r2, #0
 8010e5e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8010e62:	e004      	b.n	8010e6e <tcp_output+0x3ce>
    goto output_done;
 8010e64:	bf00      	nop
 8010e66:	e002      	b.n	8010e6e <tcp_output+0x3ce>
    goto output_done;
 8010e68:	bf00      	nop
 8010e6a:	e000      	b.n	8010e6e <tcp_output+0x3ce>
>>>>>>> Stashed changes
  }
#endif /* TCP_OVERSIZE */

output_done:
<<<<<<< Updated upstream
 8010e9c:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8010e9e:	687b      	ldr	r3, [r7, #4]
 8010ea0:	8b5b      	ldrh	r3, [r3, #26]
 8010ea2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010ea6:	b29a      	uxth	r2, r3
 8010ea8:	687b      	ldr	r3, [r7, #4]
 8010eaa:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8010eac:	2300      	movs	r3, #0
}
 8010eae:	4618      	mov	r0, r3
 8010eb0:	3728      	adds	r7, #40	; 0x28
 8010eb2:	46bd      	mov	sp, r7
 8010eb4:	bdb0      	pop	{r4, r5, r7, pc}
 8010eb6:	bf00      	nop

08010eb8 <tcp_output_segment_busy>:
=======
 8010e6c:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8010e6e:	687b      	ldr	r3, [r7, #4]
 8010e70:	8b5b      	ldrh	r3, [r3, #26]
 8010e72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010e76:	b29a      	uxth	r2, r3
 8010e78:	687b      	ldr	r3, [r7, #4]
 8010e7a:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8010e7c:	2300      	movs	r3, #0
}
 8010e7e:	4618      	mov	r0, r3
 8010e80:	3728      	adds	r7, #40	; 0x28
 8010e82:	46bd      	mov	sp, r7
 8010e84:	bdb0      	pop	{r4, r5, r7, pc}
 8010e86:	bf00      	nop

08010e88 <tcp_output_segment_busy>:
>>>>>>> Stashed changes
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
<<<<<<< Updated upstream
 8010eb8:	b580      	push	{r7, lr}
 8010eba:	b082      	sub	sp, #8
 8010ebc:	af00      	add	r7, sp, #0
 8010ebe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8010ec0:	687b      	ldr	r3, [r7, #4]
 8010ec2:	2b00      	cmp	r3, #0
 8010ec4:	d106      	bne.n	8010ed4 <tcp_output_segment_busy+0x1c>
 8010ec6:	4b09      	ldr	r3, [pc, #36]	; (8010eec <tcp_output_segment_busy+0x34>)
 8010ec8:	f240 529a 	movw	r2, #1434	; 0x59a
 8010ecc:	4908      	ldr	r1, [pc, #32]	; (8010ef0 <tcp_output_segment_busy+0x38>)
 8010ece:	4809      	ldr	r0, [pc, #36]	; (8010ef4 <tcp_output_segment_busy+0x3c>)
 8010ed0:	f003 fb58 	bl	8014584 <iprintf>
=======
 8010e88:	b580      	push	{r7, lr}
 8010e8a:	b082      	sub	sp, #8
 8010e8c:	af00      	add	r7, sp, #0
 8010e8e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8010e90:	687b      	ldr	r3, [r7, #4]
 8010e92:	2b00      	cmp	r3, #0
 8010e94:	d106      	bne.n	8010ea4 <tcp_output_segment_busy+0x1c>
 8010e96:	4b09      	ldr	r3, [pc, #36]	; (8010ebc <tcp_output_segment_busy+0x34>)
 8010e98:	f240 529a 	movw	r2, #1434	; 0x59a
 8010e9c:	4908      	ldr	r1, [pc, #32]	; (8010ec0 <tcp_output_segment_busy+0x38>)
 8010e9e:	4809      	ldr	r0, [pc, #36]	; (8010ec4 <tcp_output_segment_busy+0x3c>)
 8010ea0:	f003 fb58 	bl	8014554 <iprintf>
>>>>>>> Stashed changes

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
<<<<<<< Updated upstream
 8010ed4:	687b      	ldr	r3, [r7, #4]
 8010ed6:	685b      	ldr	r3, [r3, #4]
 8010ed8:	7b9b      	ldrb	r3, [r3, #14]
 8010eda:	2b01      	cmp	r3, #1
 8010edc:	d001      	beq.n	8010ee2 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8010ede:	2301      	movs	r3, #1
 8010ee0:	e000      	b.n	8010ee4 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8010ee2:	2300      	movs	r3, #0
}
 8010ee4:	4618      	mov	r0, r3
 8010ee6:	3708      	adds	r7, #8
 8010ee8:	46bd      	mov	sp, r7
 8010eea:	bd80      	pop	{r7, pc}
 8010eec:	08017010 	.word	0x08017010
 8010ef0:	080175ac 	.word	0x080175ac
 8010ef4:	08017064 	.word	0x08017064

08010ef8 <tcp_output_segment>:
=======
 8010ea4:	687b      	ldr	r3, [r7, #4]
 8010ea6:	685b      	ldr	r3, [r3, #4]
 8010ea8:	7b9b      	ldrb	r3, [r3, #14]
 8010eaa:	2b01      	cmp	r3, #1
 8010eac:	d001      	beq.n	8010eb2 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8010eae:	2301      	movs	r3, #1
 8010eb0:	e000      	b.n	8010eb4 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8010eb2:	2300      	movs	r3, #0
}
 8010eb4:	4618      	mov	r0, r3
 8010eb6:	3708      	adds	r7, #8
 8010eb8:	46bd      	mov	sp, r7
 8010eba:	bd80      	pop	{r7, pc}
 8010ebc:	08016ff4 	.word	0x08016ff4
 8010ec0:	08017590 	.word	0x08017590
 8010ec4:	08017048 	.word	0x08017048

08010ec8 <tcp_output_segment>:
>>>>>>> Stashed changes
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
<<<<<<< Updated upstream
 8010ef8:	b5b0      	push	{r4, r5, r7, lr}
 8010efa:	b08c      	sub	sp, #48	; 0x30
 8010efc:	af04      	add	r7, sp, #16
 8010efe:	60f8      	str	r0, [r7, #12]
 8010f00:	60b9      	str	r1, [r7, #8]
 8010f02:	607a      	str	r2, [r7, #4]
=======
 8010ec8:	b5b0      	push	{r4, r5, r7, lr}
 8010eca:	b08c      	sub	sp, #48	; 0x30
 8010ecc:	af04      	add	r7, sp, #16
 8010ece:	60f8      	str	r0, [r7, #12]
 8010ed0:	60b9      	str	r1, [r7, #8]
 8010ed2:	607a      	str	r2, [r7, #4]
>>>>>>> Stashed changes
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
<<<<<<< Updated upstream
 8010f04:	68fb      	ldr	r3, [r7, #12]
 8010f06:	2b00      	cmp	r3, #0
 8010f08:	d106      	bne.n	8010f18 <tcp_output_segment+0x20>
 8010f0a:	4b63      	ldr	r3, [pc, #396]	; (8011098 <tcp_output_segment+0x1a0>)
 8010f0c:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8010f10:	4962      	ldr	r1, [pc, #392]	; (801109c <tcp_output_segment+0x1a4>)
 8010f12:	4863      	ldr	r0, [pc, #396]	; (80110a0 <tcp_output_segment+0x1a8>)
 8010f14:	f003 fb36 	bl	8014584 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8010f18:	68bb      	ldr	r3, [r7, #8]
 8010f1a:	2b00      	cmp	r3, #0
 8010f1c:	d106      	bne.n	8010f2c <tcp_output_segment+0x34>
 8010f1e:	4b5e      	ldr	r3, [pc, #376]	; (8011098 <tcp_output_segment+0x1a0>)
 8010f20:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8010f24:	495f      	ldr	r1, [pc, #380]	; (80110a4 <tcp_output_segment+0x1ac>)
 8010f26:	485e      	ldr	r0, [pc, #376]	; (80110a0 <tcp_output_segment+0x1a8>)
 8010f28:	f003 fb2c 	bl	8014584 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8010f2c:	687b      	ldr	r3, [r7, #4]
 8010f2e:	2b00      	cmp	r3, #0
 8010f30:	d106      	bne.n	8010f40 <tcp_output_segment+0x48>
 8010f32:	4b59      	ldr	r3, [pc, #356]	; (8011098 <tcp_output_segment+0x1a0>)
 8010f34:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8010f38:	495b      	ldr	r1, [pc, #364]	; (80110a8 <tcp_output_segment+0x1b0>)
 8010f3a:	4859      	ldr	r0, [pc, #356]	; (80110a0 <tcp_output_segment+0x1a8>)
 8010f3c:	f003 fb22 	bl	8014584 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8010f40:	68f8      	ldr	r0, [r7, #12]
 8010f42:	f7ff ffb9 	bl	8010eb8 <tcp_output_segment_busy>
 8010f46:	4603      	mov	r3, r0
 8010f48:	2b00      	cmp	r3, #0
 8010f4a:	d001      	beq.n	8010f50 <tcp_output_segment+0x58>
=======
 8010ed4:	68fb      	ldr	r3, [r7, #12]
 8010ed6:	2b00      	cmp	r3, #0
 8010ed8:	d106      	bne.n	8010ee8 <tcp_output_segment+0x20>
 8010eda:	4b63      	ldr	r3, [pc, #396]	; (8011068 <tcp_output_segment+0x1a0>)
 8010edc:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8010ee0:	4962      	ldr	r1, [pc, #392]	; (801106c <tcp_output_segment+0x1a4>)
 8010ee2:	4863      	ldr	r0, [pc, #396]	; (8011070 <tcp_output_segment+0x1a8>)
 8010ee4:	f003 fb36 	bl	8014554 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8010ee8:	68bb      	ldr	r3, [r7, #8]
 8010eea:	2b00      	cmp	r3, #0
 8010eec:	d106      	bne.n	8010efc <tcp_output_segment+0x34>
 8010eee:	4b5e      	ldr	r3, [pc, #376]	; (8011068 <tcp_output_segment+0x1a0>)
 8010ef0:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8010ef4:	495f      	ldr	r1, [pc, #380]	; (8011074 <tcp_output_segment+0x1ac>)
 8010ef6:	485e      	ldr	r0, [pc, #376]	; (8011070 <tcp_output_segment+0x1a8>)
 8010ef8:	f003 fb2c 	bl	8014554 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8010efc:	687b      	ldr	r3, [r7, #4]
 8010efe:	2b00      	cmp	r3, #0
 8010f00:	d106      	bne.n	8010f10 <tcp_output_segment+0x48>
 8010f02:	4b59      	ldr	r3, [pc, #356]	; (8011068 <tcp_output_segment+0x1a0>)
 8010f04:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8010f08:	495b      	ldr	r1, [pc, #364]	; (8011078 <tcp_output_segment+0x1b0>)
 8010f0a:	4859      	ldr	r0, [pc, #356]	; (8011070 <tcp_output_segment+0x1a8>)
 8010f0c:	f003 fb22 	bl	8014554 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8010f10:	68f8      	ldr	r0, [r7, #12]
 8010f12:	f7ff ffb9 	bl	8010e88 <tcp_output_segment_busy>
 8010f16:	4603      	mov	r3, r0
 8010f18:	2b00      	cmp	r3, #0
 8010f1a:	d001      	beq.n	8010f20 <tcp_output_segment+0x58>
>>>>>>> Stashed changes
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
<<<<<<< Updated upstream
 8010f4c:	2300      	movs	r3, #0
 8010f4e:	e09f      	b.n	8011090 <tcp_output_segment+0x198>
=======
 8010f1c:	2300      	movs	r3, #0
 8010f1e:	e09f      	b.n	8011060 <tcp_output_segment+0x198>
>>>>>>> Stashed changes
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
<<<<<<< Updated upstream
 8010f50:	68bb      	ldr	r3, [r7, #8]
 8010f52:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010f54:	68fb      	ldr	r3, [r7, #12]
 8010f56:	68dc      	ldr	r4, [r3, #12]
 8010f58:	4610      	mov	r0, r2
 8010f5a:	f7f9 fecb 	bl	800acf4 <lwip_htonl>
 8010f5e:	4603      	mov	r3, r0
 8010f60:	60a3      	str	r3, [r4, #8]
=======
 8010f20:	68bb      	ldr	r3, [r7, #8]
 8010f22:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010f24:	68fb      	ldr	r3, [r7, #12]
 8010f26:	68dc      	ldr	r4, [r3, #12]
 8010f28:	4610      	mov	r0, r2
 8010f2a:	f7f9 fecb 	bl	800acc4 <lwip_htonl>
 8010f2e:	4603      	mov	r3, r0
 8010f30:	60a3      	str	r3, [r4, #8]
>>>>>>> Stashed changes
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
<<<<<<< Updated upstream
 8010f62:	68bb      	ldr	r3, [r7, #8]
 8010f64:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8010f66:	68fb      	ldr	r3, [r7, #12]
 8010f68:	68dc      	ldr	r4, [r3, #12]
 8010f6a:	4610      	mov	r0, r2
 8010f6c:	f7f9 fead 	bl	800acca <lwip_htons>
 8010f70:	4603      	mov	r3, r0
 8010f72:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8010f74:	68bb      	ldr	r3, [r7, #8]
 8010f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010f78:	68ba      	ldr	r2, [r7, #8]
 8010f7a:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8010f7c:	441a      	add	r2, r3
 8010f7e:	68bb      	ldr	r3, [r7, #8]
 8010f80:	62da      	str	r2, [r3, #44]	; 0x2c
=======
 8010f32:	68bb      	ldr	r3, [r7, #8]
 8010f34:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8010f36:	68fb      	ldr	r3, [r7, #12]
 8010f38:	68dc      	ldr	r4, [r3, #12]
 8010f3a:	4610      	mov	r0, r2
 8010f3c:	f7f9 fead 	bl	800ac9a <lwip_htons>
 8010f40:	4603      	mov	r3, r0
 8010f42:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8010f44:	68bb      	ldr	r3, [r7, #8]
 8010f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010f48:	68ba      	ldr	r2, [r7, #8]
 8010f4a:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8010f4c:	441a      	add	r2, r3
 8010f4e:	68bb      	ldr	r3, [r7, #8]
 8010f50:	62da      	str	r2, [r3, #44]	; 0x2c
>>>>>>> Stashed changes

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
<<<<<<< Updated upstream
 8010f82:	68fb      	ldr	r3, [r7, #12]
 8010f84:	68db      	ldr	r3, [r3, #12]
 8010f86:	3314      	adds	r3, #20
 8010f88:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8010f8a:	68fb      	ldr	r3, [r7, #12]
 8010f8c:	7a9b      	ldrb	r3, [r3, #10]
 8010f8e:	f003 0301 	and.w	r3, r3, #1
 8010f92:	2b00      	cmp	r3, #0
 8010f94:	d015      	beq.n	8010fc2 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8010f96:	68bb      	ldr	r3, [r7, #8]
 8010f98:	3304      	adds	r3, #4
 8010f9a:	461a      	mov	r2, r3
 8010f9c:	6879      	ldr	r1, [r7, #4]
 8010f9e:	f44f 7006 	mov.w	r0, #536	; 0x218
 8010fa2:	f7fc fe8f 	bl	800dcc4 <tcp_eff_send_mss_netif>
 8010fa6:	4603      	mov	r3, r0
 8010fa8:	837b      	strh	r3, [r7, #26]
=======
 8010f52:	68fb      	ldr	r3, [r7, #12]
 8010f54:	68db      	ldr	r3, [r3, #12]
 8010f56:	3314      	adds	r3, #20
 8010f58:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8010f5a:	68fb      	ldr	r3, [r7, #12]
 8010f5c:	7a9b      	ldrb	r3, [r3, #10]
 8010f5e:	f003 0301 	and.w	r3, r3, #1
 8010f62:	2b00      	cmp	r3, #0
 8010f64:	d015      	beq.n	8010f92 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8010f66:	68bb      	ldr	r3, [r7, #8]
 8010f68:	3304      	adds	r3, #4
 8010f6a:	461a      	mov	r2, r3
 8010f6c:	6879      	ldr	r1, [r7, #4]
 8010f6e:	f44f 7006 	mov.w	r0, #536	; 0x218
 8010f72:	f7fc fe8f 	bl	800dc94 <tcp_eff_send_mss_netif>
 8010f76:	4603      	mov	r3, r0
 8010f78:	837b      	strh	r3, [r7, #26]
>>>>>>> Stashed changes
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
<<<<<<< Updated upstream
 8010faa:	8b7b      	ldrh	r3, [r7, #26]
 8010fac:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8010fb0:	4618      	mov	r0, r3
 8010fb2:	f7f9 fe9f 	bl	800acf4 <lwip_htonl>
 8010fb6:	4602      	mov	r2, r0
 8010fb8:	69fb      	ldr	r3, [r7, #28]
 8010fba:	601a      	str	r2, [r3, #0]
    opts += 1;
 8010fbc:	69fb      	ldr	r3, [r7, #28]
 8010fbe:	3304      	adds	r3, #4
 8010fc0:	61fb      	str	r3, [r7, #28]
=======
 8010f7a:	8b7b      	ldrh	r3, [r7, #26]
 8010f7c:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8010f80:	4618      	mov	r0, r3
 8010f82:	f7f9 fe9f 	bl	800acc4 <lwip_htonl>
 8010f86:	4602      	mov	r2, r0
 8010f88:	69fb      	ldr	r3, [r7, #28]
 8010f8a:	601a      	str	r2, [r3, #0]
    opts += 1;
 8010f8c:	69fb      	ldr	r3, [r7, #28]
 8010f8e:	3304      	adds	r3, #4
 8010f90:	61fb      	str	r3, [r7, #28]
>>>>>>> Stashed changes
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
<<<<<<< Updated upstream
 8010fc2:	68bb      	ldr	r3, [r7, #8]
 8010fc4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8010fc8:	2b00      	cmp	r3, #0
 8010fca:	da02      	bge.n	8010fd2 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8010fcc:	68bb      	ldr	r3, [r7, #8]
 8010fce:	2200      	movs	r2, #0
 8010fd0:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8010fd2:	68bb      	ldr	r3, [r7, #8]
 8010fd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010fd6:	2b00      	cmp	r3, #0
 8010fd8:	d10c      	bne.n	8010ff4 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8010fda:	4b34      	ldr	r3, [pc, #208]	; (80110ac <tcp_output_segment+0x1b4>)
 8010fdc:	681a      	ldr	r2, [r3, #0]
 8010fde:	68bb      	ldr	r3, [r7, #8]
 8010fe0:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8010fe2:	68fb      	ldr	r3, [r7, #12]
 8010fe4:	68db      	ldr	r3, [r3, #12]
 8010fe6:	685b      	ldr	r3, [r3, #4]
 8010fe8:	4618      	mov	r0, r3
 8010fea:	f7f9 fe83 	bl	800acf4 <lwip_htonl>
 8010fee:	4602      	mov	r2, r0
 8010ff0:	68bb      	ldr	r3, [r7, #8]
 8010ff2:	639a      	str	r2, [r3, #56]	; 0x38
=======
 8010f92:	68bb      	ldr	r3, [r7, #8]
 8010f94:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8010f98:	2b00      	cmp	r3, #0
 8010f9a:	da02      	bge.n	8010fa2 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8010f9c:	68bb      	ldr	r3, [r7, #8]
 8010f9e:	2200      	movs	r2, #0
 8010fa0:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8010fa2:	68bb      	ldr	r3, [r7, #8]
 8010fa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010fa6:	2b00      	cmp	r3, #0
 8010fa8:	d10c      	bne.n	8010fc4 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8010faa:	4b34      	ldr	r3, [pc, #208]	; (801107c <tcp_output_segment+0x1b4>)
 8010fac:	681a      	ldr	r2, [r3, #0]
 8010fae:	68bb      	ldr	r3, [r7, #8]
 8010fb0:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8010fb2:	68fb      	ldr	r3, [r7, #12]
 8010fb4:	68db      	ldr	r3, [r3, #12]
 8010fb6:	685b      	ldr	r3, [r3, #4]
 8010fb8:	4618      	mov	r0, r3
 8010fba:	f7f9 fe83 	bl	800acc4 <lwip_htonl>
 8010fbe:	4602      	mov	r2, r0
 8010fc0:	68bb      	ldr	r3, [r7, #8]
 8010fc2:	639a      	str	r2, [r3, #56]	; 0x38
>>>>>>> Stashed changes
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
<<<<<<< Updated upstream
 8010ff4:	68fb      	ldr	r3, [r7, #12]
 8010ff6:	68da      	ldr	r2, [r3, #12]
 8010ff8:	68fb      	ldr	r3, [r7, #12]
 8010ffa:	685b      	ldr	r3, [r3, #4]
 8010ffc:	685b      	ldr	r3, [r3, #4]
 8010ffe:	1ad3      	subs	r3, r2, r3
 8011000:	833b      	strh	r3, [r7, #24]
=======
 8010fc4:	68fb      	ldr	r3, [r7, #12]
 8010fc6:	68da      	ldr	r2, [r3, #12]
 8010fc8:	68fb      	ldr	r3, [r7, #12]
 8010fca:	685b      	ldr	r3, [r3, #4]
 8010fcc:	685b      	ldr	r3, [r3, #4]
 8010fce:	1ad3      	subs	r3, r2, r3
 8010fd0:	833b      	strh	r3, [r7, #24]
>>>>>>> Stashed changes
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
<<<<<<< Updated upstream
 8011002:	68fb      	ldr	r3, [r7, #12]
 8011004:	685b      	ldr	r3, [r3, #4]
 8011006:	8959      	ldrh	r1, [r3, #10]
 8011008:	68fb      	ldr	r3, [r7, #12]
 801100a:	685b      	ldr	r3, [r3, #4]
 801100c:	8b3a      	ldrh	r2, [r7, #24]
 801100e:	1a8a      	subs	r2, r1, r2
 8011010:	b292      	uxth	r2, r2
 8011012:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8011014:	68fb      	ldr	r3, [r7, #12]
 8011016:	685b      	ldr	r3, [r3, #4]
 8011018:	8919      	ldrh	r1, [r3, #8]
 801101a:	68fb      	ldr	r3, [r7, #12]
 801101c:	685b      	ldr	r3, [r3, #4]
 801101e:	8b3a      	ldrh	r2, [r7, #24]
 8011020:	1a8a      	subs	r2, r1, r2
 8011022:	b292      	uxth	r2, r2
 8011024:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8011026:	68fb      	ldr	r3, [r7, #12]
 8011028:	685b      	ldr	r3, [r3, #4]
 801102a:	68fa      	ldr	r2, [r7, #12]
 801102c:	68d2      	ldr	r2, [r2, #12]
 801102e:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8011030:	68fb      	ldr	r3, [r7, #12]
 8011032:	68db      	ldr	r3, [r3, #12]
 8011034:	2200      	movs	r2, #0
 8011036:	741a      	strb	r2, [r3, #16]
 8011038:	2200      	movs	r2, #0
 801103a:	745a      	strb	r2, [r3, #17]
=======
 8010fd2:	68fb      	ldr	r3, [r7, #12]
 8010fd4:	685b      	ldr	r3, [r3, #4]
 8010fd6:	8959      	ldrh	r1, [r3, #10]
 8010fd8:	68fb      	ldr	r3, [r7, #12]
 8010fda:	685b      	ldr	r3, [r3, #4]
 8010fdc:	8b3a      	ldrh	r2, [r7, #24]
 8010fde:	1a8a      	subs	r2, r1, r2
 8010fe0:	b292      	uxth	r2, r2
 8010fe2:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8010fe4:	68fb      	ldr	r3, [r7, #12]
 8010fe6:	685b      	ldr	r3, [r3, #4]
 8010fe8:	8919      	ldrh	r1, [r3, #8]
 8010fea:	68fb      	ldr	r3, [r7, #12]
 8010fec:	685b      	ldr	r3, [r3, #4]
 8010fee:	8b3a      	ldrh	r2, [r7, #24]
 8010ff0:	1a8a      	subs	r2, r1, r2
 8010ff2:	b292      	uxth	r2, r2
 8010ff4:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8010ff6:	68fb      	ldr	r3, [r7, #12]
 8010ff8:	685b      	ldr	r3, [r3, #4]
 8010ffa:	68fa      	ldr	r2, [r7, #12]
 8010ffc:	68d2      	ldr	r2, [r2, #12]
 8010ffe:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8011000:	68fb      	ldr	r3, [r7, #12]
 8011002:	68db      	ldr	r3, [r3, #12]
 8011004:	2200      	movs	r2, #0
 8011006:	741a      	strb	r2, [r3, #16]
 8011008:	2200      	movs	r2, #0
 801100a:	745a      	strb	r2, [r3, #17]
>>>>>>> Stashed changes

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
<<<<<<< Updated upstream
 801103c:	68fb      	ldr	r3, [r7, #12]
 801103e:	68db      	ldr	r3, [r3, #12]
 8011040:	f103 0214 	add.w	r2, r3, #20
 8011044:	68fb      	ldr	r3, [r7, #12]
 8011046:	7a9b      	ldrb	r3, [r3, #10]
 8011048:	009b      	lsls	r3, r3, #2
 801104a:	f003 0304 	and.w	r3, r3, #4
 801104e:	4413      	add	r3, r2
 8011050:	69fa      	ldr	r2, [r7, #28]
 8011052:	429a      	cmp	r2, r3
 8011054:	d006      	beq.n	8011064 <tcp_output_segment+0x16c>
 8011056:	4b10      	ldr	r3, [pc, #64]	; (8011098 <tcp_output_segment+0x1a0>)
 8011058:	f240 621c 	movw	r2, #1564	; 0x61c
 801105c:	4914      	ldr	r1, [pc, #80]	; (80110b0 <tcp_output_segment+0x1b8>)
 801105e:	4810      	ldr	r0, [pc, #64]	; (80110a0 <tcp_output_segment+0x1a8>)
 8011060:	f003 fa90 	bl	8014584 <iprintf>
=======
 801100c:	68fb      	ldr	r3, [r7, #12]
 801100e:	68db      	ldr	r3, [r3, #12]
 8011010:	f103 0214 	add.w	r2, r3, #20
 8011014:	68fb      	ldr	r3, [r7, #12]
 8011016:	7a9b      	ldrb	r3, [r3, #10]
 8011018:	009b      	lsls	r3, r3, #2
 801101a:	f003 0304 	and.w	r3, r3, #4
 801101e:	4413      	add	r3, r2
 8011020:	69fa      	ldr	r2, [r7, #28]
 8011022:	429a      	cmp	r2, r3
 8011024:	d006      	beq.n	8011034 <tcp_output_segment+0x16c>
 8011026:	4b10      	ldr	r3, [pc, #64]	; (8011068 <tcp_output_segment+0x1a0>)
 8011028:	f240 621c 	movw	r2, #1564	; 0x61c
 801102c:	4914      	ldr	r1, [pc, #80]	; (8011080 <tcp_output_segment+0x1b8>)
 801102e:	4810      	ldr	r0, [pc, #64]	; (8011070 <tcp_output_segment+0x1a8>)
 8011030:	f003 fa90 	bl	8014554 <iprintf>
>>>>>>> Stashed changes
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
<<<<<<< Updated upstream
 8011064:	68fb      	ldr	r3, [r7, #12]
 8011066:	6858      	ldr	r0, [r3, #4]
 8011068:	68b9      	ldr	r1, [r7, #8]
 801106a:	68bb      	ldr	r3, [r7, #8]
 801106c:	1d1c      	adds	r4, r3, #4
 801106e:	68bb      	ldr	r3, [r7, #8]
 8011070:	7add      	ldrb	r5, [r3, #11]
 8011072:	68bb      	ldr	r3, [r7, #8]
 8011074:	7a9b      	ldrb	r3, [r3, #10]
 8011076:	687a      	ldr	r2, [r7, #4]
 8011078:	9202      	str	r2, [sp, #8]
 801107a:	2206      	movs	r2, #6
 801107c:	9201      	str	r2, [sp, #4]
 801107e:	9300      	str	r3, [sp, #0]
 8011080:	462b      	mov	r3, r5
 8011082:	4622      	mov	r2, r4
 8011084:	f002 f9f4 	bl	8013470 <ip4_output_if>
 8011088:	4603      	mov	r3, r0
 801108a:	75fb      	strb	r3, [r7, #23]
=======
 8011034:	68fb      	ldr	r3, [r7, #12]
 8011036:	6858      	ldr	r0, [r3, #4]
 8011038:	68b9      	ldr	r1, [r7, #8]
 801103a:	68bb      	ldr	r3, [r7, #8]
 801103c:	1d1c      	adds	r4, r3, #4
 801103e:	68bb      	ldr	r3, [r7, #8]
 8011040:	7add      	ldrb	r5, [r3, #11]
 8011042:	68bb      	ldr	r3, [r7, #8]
 8011044:	7a9b      	ldrb	r3, [r3, #10]
 8011046:	687a      	ldr	r2, [r7, #4]
 8011048:	9202      	str	r2, [sp, #8]
 801104a:	2206      	movs	r2, #6
 801104c:	9201      	str	r2, [sp, #4]
 801104e:	9300      	str	r3, [sp, #0]
 8011050:	462b      	mov	r3, r5
 8011052:	4622      	mov	r2, r4
 8011054:	f002 f9f4 	bl	8013440 <ip4_output_if>
 8011058:	4603      	mov	r3, r0
 801105a:	75fb      	strb	r3, [r7, #23]
>>>>>>> Stashed changes
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
<<<<<<< Updated upstream
 801108c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011090:	4618      	mov	r0, r3
 8011092:	3720      	adds	r7, #32
 8011094:	46bd      	mov	sp, r7
 8011096:	bdb0      	pop	{r4, r5, r7, pc}
 8011098:	08017010 	.word	0x08017010
 801109c:	080175d4 	.word	0x080175d4
 80110a0:	08017064 	.word	0x08017064
 80110a4:	080175f4 	.word	0x080175f4
 80110a8:	08017614 	.word	0x08017614
 80110ac:	200072a4 	.word	0x200072a4
 80110b0:	08017638 	.word	0x08017638

080110b4 <tcp_rexmit_rto_prepare>:
=======
 801105c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011060:	4618      	mov	r0, r3
 8011062:	3720      	adds	r7, #32
 8011064:	46bd      	mov	sp, r7
 8011066:	bdb0      	pop	{r4, r5, r7, pc}
 8011068:	08016ff4 	.word	0x08016ff4
 801106c:	080175b8 	.word	0x080175b8
 8011070:	08017048 	.word	0x08017048
 8011074:	080175d8 	.word	0x080175d8
 8011078:	080175f8 	.word	0x080175f8
 801107c:	200072a4 	.word	0x200072a4
 8011080:	0801761c 	.word	0x0801761c

08011084 <tcp_rexmit_rto_prepare>:
>>>>>>> Stashed changes
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
<<<<<<< Updated upstream
 80110b4:	b5b0      	push	{r4, r5, r7, lr}
 80110b6:	b084      	sub	sp, #16
 80110b8:	af00      	add	r7, sp, #0
 80110ba:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 80110bc:	687b      	ldr	r3, [r7, #4]
 80110be:	2b00      	cmp	r3, #0
 80110c0:	d106      	bne.n	80110d0 <tcp_rexmit_rto_prepare+0x1c>
 80110c2:	4b31      	ldr	r3, [pc, #196]	; (8011188 <tcp_rexmit_rto_prepare+0xd4>)
 80110c4:	f240 6263 	movw	r2, #1635	; 0x663
 80110c8:	4930      	ldr	r1, [pc, #192]	; (801118c <tcp_rexmit_rto_prepare+0xd8>)
 80110ca:	4831      	ldr	r0, [pc, #196]	; (8011190 <tcp_rexmit_rto_prepare+0xdc>)
 80110cc:	f003 fa5a 	bl	8014584 <iprintf>

  if (pcb->unacked == NULL) {
 80110d0:	687b      	ldr	r3, [r7, #4]
 80110d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80110d4:	2b00      	cmp	r3, #0
 80110d6:	d102      	bne.n	80110de <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 80110d8:	f06f 0305 	mvn.w	r3, #5
 80110dc:	e050      	b.n	8011180 <tcp_rexmit_rto_prepare+0xcc>
=======
 8011084:	b5b0      	push	{r4, r5, r7, lr}
 8011086:	b084      	sub	sp, #16
 8011088:	af00      	add	r7, sp, #0
 801108a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 801108c:	687b      	ldr	r3, [r7, #4]
 801108e:	2b00      	cmp	r3, #0
 8011090:	d106      	bne.n	80110a0 <tcp_rexmit_rto_prepare+0x1c>
 8011092:	4b31      	ldr	r3, [pc, #196]	; (8011158 <tcp_rexmit_rto_prepare+0xd4>)
 8011094:	f240 6263 	movw	r2, #1635	; 0x663
 8011098:	4930      	ldr	r1, [pc, #192]	; (801115c <tcp_rexmit_rto_prepare+0xd8>)
 801109a:	4831      	ldr	r0, [pc, #196]	; (8011160 <tcp_rexmit_rto_prepare+0xdc>)
 801109c:	f003 fa5a 	bl	8014554 <iprintf>

  if (pcb->unacked == NULL) {
 80110a0:	687b      	ldr	r3, [r7, #4]
 80110a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80110a4:	2b00      	cmp	r3, #0
 80110a6:	d102      	bne.n	80110ae <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 80110a8:	f06f 0305 	mvn.w	r3, #5
 80110ac:	e050      	b.n	8011150 <tcp_rexmit_rto_prepare+0xcc>
>>>>>>> Stashed changes

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
<<<<<<< Updated upstream
 80110de:	687b      	ldr	r3, [r7, #4]
 80110e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80110e2:	60fb      	str	r3, [r7, #12]
 80110e4:	e00b      	b.n	80110fe <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 80110e6:	68f8      	ldr	r0, [r7, #12]
 80110e8:	f7ff fee6 	bl	8010eb8 <tcp_output_segment_busy>
 80110ec:	4603      	mov	r3, r0
 80110ee:	2b00      	cmp	r3, #0
 80110f0:	d002      	beq.n	80110f8 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 80110f2:	f06f 0305 	mvn.w	r3, #5
 80110f6:	e043      	b.n	8011180 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80110f8:	68fb      	ldr	r3, [r7, #12]
 80110fa:	681b      	ldr	r3, [r3, #0]
 80110fc:	60fb      	str	r3, [r7, #12]
 80110fe:	68fb      	ldr	r3, [r7, #12]
 8011100:	681b      	ldr	r3, [r3, #0]
 8011102:	2b00      	cmp	r3, #0
 8011104:	d1ef      	bne.n	80110e6 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8011106:	68f8      	ldr	r0, [r7, #12]
 8011108:	f7ff fed6 	bl	8010eb8 <tcp_output_segment_busy>
 801110c:	4603      	mov	r3, r0
 801110e:	2b00      	cmp	r3, #0
 8011110:	d002      	beq.n	8011118 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8011112:	f06f 0305 	mvn.w	r3, #5
 8011116:	e033      	b.n	8011180 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8011118:	687b      	ldr	r3, [r7, #4]
 801111a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801111c:	68fb      	ldr	r3, [r7, #12]
 801111e:	601a      	str	r2, [r3, #0]
=======
 80110ae:	687b      	ldr	r3, [r7, #4]
 80110b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80110b2:	60fb      	str	r3, [r7, #12]
 80110b4:	e00b      	b.n	80110ce <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 80110b6:	68f8      	ldr	r0, [r7, #12]
 80110b8:	f7ff fee6 	bl	8010e88 <tcp_output_segment_busy>
 80110bc:	4603      	mov	r3, r0
 80110be:	2b00      	cmp	r3, #0
 80110c0:	d002      	beq.n	80110c8 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 80110c2:	f06f 0305 	mvn.w	r3, #5
 80110c6:	e043      	b.n	8011150 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80110c8:	68fb      	ldr	r3, [r7, #12]
 80110ca:	681b      	ldr	r3, [r3, #0]
 80110cc:	60fb      	str	r3, [r7, #12]
 80110ce:	68fb      	ldr	r3, [r7, #12]
 80110d0:	681b      	ldr	r3, [r3, #0]
 80110d2:	2b00      	cmp	r3, #0
 80110d4:	d1ef      	bne.n	80110b6 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 80110d6:	68f8      	ldr	r0, [r7, #12]
 80110d8:	f7ff fed6 	bl	8010e88 <tcp_output_segment_busy>
 80110dc:	4603      	mov	r3, r0
 80110de:	2b00      	cmp	r3, #0
 80110e0:	d002      	beq.n	80110e8 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 80110e2:	f06f 0305 	mvn.w	r3, #5
 80110e6:	e033      	b.n	8011150 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 80110e8:	687b      	ldr	r3, [r7, #4]
 80110ea:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80110ec:	68fb      	ldr	r3, [r7, #12]
 80110ee:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
<<<<<<< Updated upstream
 8011120:	687b      	ldr	r3, [r7, #4]
 8011122:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8011124:	687b      	ldr	r3, [r7, #4]
 8011126:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8011128:	687b      	ldr	r3, [r7, #4]
 801112a:	2200      	movs	r2, #0
 801112c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801112e:	687b      	ldr	r3, [r7, #4]
 8011130:	8b5b      	ldrh	r3, [r3, #26]
 8011132:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8011136:	b29a      	uxth	r2, r3
 8011138:	687b      	ldr	r3, [r7, #4]
 801113a:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801113c:	68fb      	ldr	r3, [r7, #12]
 801113e:	68db      	ldr	r3, [r3, #12]
 8011140:	685b      	ldr	r3, [r3, #4]
 8011142:	4618      	mov	r0, r3
 8011144:	f7f9 fdd6 	bl	800acf4 <lwip_htonl>
 8011148:	4604      	mov	r4, r0
 801114a:	68fb      	ldr	r3, [r7, #12]
 801114c:	891b      	ldrh	r3, [r3, #8]
 801114e:	461d      	mov	r5, r3
 8011150:	68fb      	ldr	r3, [r7, #12]
 8011152:	68db      	ldr	r3, [r3, #12]
 8011154:	899b      	ldrh	r3, [r3, #12]
 8011156:	b29b      	uxth	r3, r3
 8011158:	4618      	mov	r0, r3
 801115a:	f7f9 fdb6 	bl	800acca <lwip_htons>
 801115e:	4603      	mov	r3, r0
 8011160:	b2db      	uxtb	r3, r3
 8011162:	f003 0303 	and.w	r3, r3, #3
 8011166:	2b00      	cmp	r3, #0
 8011168:	d001      	beq.n	801116e <tcp_rexmit_rto_prepare+0xba>
 801116a:	2301      	movs	r3, #1
 801116c:	e000      	b.n	8011170 <tcp_rexmit_rto_prepare+0xbc>
 801116e:	2300      	movs	r3, #0
 8011170:	442b      	add	r3, r5
 8011172:	18e2      	adds	r2, r4, r3
 8011174:	687b      	ldr	r3, [r7, #4]
 8011176:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8011178:	687b      	ldr	r3, [r7, #4]
 801117a:	2200      	movs	r2, #0
 801117c:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 801117e:	2300      	movs	r3, #0
}
 8011180:	4618      	mov	r0, r3
 8011182:	3710      	adds	r7, #16
 8011184:	46bd      	mov	sp, r7
 8011186:	bdb0      	pop	{r4, r5, r7, pc}
 8011188:	08017010 	.word	0x08017010
 801118c:	0801764c 	.word	0x0801764c
 8011190:	08017064 	.word	0x08017064

08011194 <tcp_rexmit_rto_commit>:
=======
 80110f0:	687b      	ldr	r3, [r7, #4]
 80110f2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80110f4:	687b      	ldr	r3, [r7, #4]
 80110f6:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 80110f8:	687b      	ldr	r3, [r7, #4]
 80110fa:	2200      	movs	r2, #0
 80110fc:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 80110fe:	687b      	ldr	r3, [r7, #4]
 8011100:	8b5b      	ldrh	r3, [r3, #26]
 8011102:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8011106:	b29a      	uxth	r2, r3
 8011108:	687b      	ldr	r3, [r7, #4]
 801110a:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801110c:	68fb      	ldr	r3, [r7, #12]
 801110e:	68db      	ldr	r3, [r3, #12]
 8011110:	685b      	ldr	r3, [r3, #4]
 8011112:	4618      	mov	r0, r3
 8011114:	f7f9 fdd6 	bl	800acc4 <lwip_htonl>
 8011118:	4604      	mov	r4, r0
 801111a:	68fb      	ldr	r3, [r7, #12]
 801111c:	891b      	ldrh	r3, [r3, #8]
 801111e:	461d      	mov	r5, r3
 8011120:	68fb      	ldr	r3, [r7, #12]
 8011122:	68db      	ldr	r3, [r3, #12]
 8011124:	899b      	ldrh	r3, [r3, #12]
 8011126:	b29b      	uxth	r3, r3
 8011128:	4618      	mov	r0, r3
 801112a:	f7f9 fdb6 	bl	800ac9a <lwip_htons>
 801112e:	4603      	mov	r3, r0
 8011130:	b2db      	uxtb	r3, r3
 8011132:	f003 0303 	and.w	r3, r3, #3
 8011136:	2b00      	cmp	r3, #0
 8011138:	d001      	beq.n	801113e <tcp_rexmit_rto_prepare+0xba>
 801113a:	2301      	movs	r3, #1
 801113c:	e000      	b.n	8011140 <tcp_rexmit_rto_prepare+0xbc>
 801113e:	2300      	movs	r3, #0
 8011140:	442b      	add	r3, r5
 8011142:	18e2      	adds	r2, r4, r3
 8011144:	687b      	ldr	r3, [r7, #4]
 8011146:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8011148:	687b      	ldr	r3, [r7, #4]
 801114a:	2200      	movs	r2, #0
 801114c:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 801114e:	2300      	movs	r3, #0
}
 8011150:	4618      	mov	r0, r3
 8011152:	3710      	adds	r7, #16
 8011154:	46bd      	mov	sp, r7
 8011156:	bdb0      	pop	{r4, r5, r7, pc}
 8011158:	08016ff4 	.word	0x08016ff4
 801115c:	08017630 	.word	0x08017630
 8011160:	08017048 	.word	0x08017048

08011164 <tcp_rexmit_rto_commit>:
>>>>>>> Stashed changes
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
<<<<<<< Updated upstream
 8011194:	b580      	push	{r7, lr}
 8011196:	b082      	sub	sp, #8
 8011198:	af00      	add	r7, sp, #0
 801119a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 801119c:	687b      	ldr	r3, [r7, #4]
 801119e:	2b00      	cmp	r3, #0
 80111a0:	d106      	bne.n	80111b0 <tcp_rexmit_rto_commit+0x1c>
 80111a2:	4b0d      	ldr	r3, [pc, #52]	; (80111d8 <tcp_rexmit_rto_commit+0x44>)
 80111a4:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80111a8:	490c      	ldr	r1, [pc, #48]	; (80111dc <tcp_rexmit_rto_commit+0x48>)
 80111aa:	480d      	ldr	r0, [pc, #52]	; (80111e0 <tcp_rexmit_rto_commit+0x4c>)
 80111ac:	f003 f9ea 	bl	8014584 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 80111b0:	687b      	ldr	r3, [r7, #4]
 80111b2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80111b6:	2bff      	cmp	r3, #255	; 0xff
 80111b8:	d007      	beq.n	80111ca <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 80111ba:	687b      	ldr	r3, [r7, #4]
 80111bc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80111c0:	3301      	adds	r3, #1
 80111c2:	b2da      	uxtb	r2, r3
 80111c4:	687b      	ldr	r3, [r7, #4]
 80111c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 80111ca:	6878      	ldr	r0, [r7, #4]
 80111cc:	f7ff fc80 	bl	8010ad0 <tcp_output>
}
 80111d0:	bf00      	nop
 80111d2:	3708      	adds	r7, #8
 80111d4:	46bd      	mov	sp, r7
 80111d6:	bd80      	pop	{r7, pc}
 80111d8:	08017010 	.word	0x08017010
 80111dc:	08017670 	.word	0x08017670
 80111e0:	08017064 	.word	0x08017064

080111e4 <tcp_rexmit_rto>:
=======
 8011164:	b580      	push	{r7, lr}
 8011166:	b082      	sub	sp, #8
 8011168:	af00      	add	r7, sp, #0
 801116a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 801116c:	687b      	ldr	r3, [r7, #4]
 801116e:	2b00      	cmp	r3, #0
 8011170:	d106      	bne.n	8011180 <tcp_rexmit_rto_commit+0x1c>
 8011172:	4b0d      	ldr	r3, [pc, #52]	; (80111a8 <tcp_rexmit_rto_commit+0x44>)
 8011174:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8011178:	490c      	ldr	r1, [pc, #48]	; (80111ac <tcp_rexmit_rto_commit+0x48>)
 801117a:	480d      	ldr	r0, [pc, #52]	; (80111b0 <tcp_rexmit_rto_commit+0x4c>)
 801117c:	f003 f9ea 	bl	8014554 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8011180:	687b      	ldr	r3, [r7, #4]
 8011182:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011186:	2bff      	cmp	r3, #255	; 0xff
 8011188:	d007      	beq.n	801119a <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 801118a:	687b      	ldr	r3, [r7, #4]
 801118c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011190:	3301      	adds	r3, #1
 8011192:	b2da      	uxtb	r2, r3
 8011194:	687b      	ldr	r3, [r7, #4]
 8011196:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 801119a:	6878      	ldr	r0, [r7, #4]
 801119c:	f7ff fc80 	bl	8010aa0 <tcp_output>
}
 80111a0:	bf00      	nop
 80111a2:	3708      	adds	r7, #8
 80111a4:	46bd      	mov	sp, r7
 80111a6:	bd80      	pop	{r7, pc}
 80111a8:	08016ff4 	.word	0x08016ff4
 80111ac:	08017654 	.word	0x08017654
 80111b0:	08017048 	.word	0x08017048

080111b4 <tcp_rexmit_rto>:
>>>>>>> Stashed changes
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
<<<<<<< Updated upstream
 80111e4:	b580      	push	{r7, lr}
 80111e6:	b082      	sub	sp, #8
 80111e8:	af00      	add	r7, sp, #0
 80111ea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 80111ec:	687b      	ldr	r3, [r7, #4]
 80111ee:	2b00      	cmp	r3, #0
 80111f0:	d106      	bne.n	8011200 <tcp_rexmit_rto+0x1c>
 80111f2:	4b0a      	ldr	r3, [pc, #40]	; (801121c <tcp_rexmit_rto+0x38>)
 80111f4:	f240 62ad 	movw	r2, #1709	; 0x6ad
 80111f8:	4909      	ldr	r1, [pc, #36]	; (8011220 <tcp_rexmit_rto+0x3c>)
 80111fa:	480a      	ldr	r0, [pc, #40]	; (8011224 <tcp_rexmit_rto+0x40>)
 80111fc:	f003 f9c2 	bl	8014584 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8011200:	6878      	ldr	r0, [r7, #4]
 8011202:	f7ff ff57 	bl	80110b4 <tcp_rexmit_rto_prepare>
 8011206:	4603      	mov	r3, r0
 8011208:	2b00      	cmp	r3, #0
 801120a:	d102      	bne.n	8011212 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 801120c:	6878      	ldr	r0, [r7, #4]
 801120e:	f7ff ffc1 	bl	8011194 <tcp_rexmit_rto_commit>
  }
}
 8011212:	bf00      	nop
 8011214:	3708      	adds	r7, #8
 8011216:	46bd      	mov	sp, r7
 8011218:	bd80      	pop	{r7, pc}
 801121a:	bf00      	nop
 801121c:	08017010 	.word	0x08017010
 8011220:	08017694 	.word	0x08017694
 8011224:	08017064 	.word	0x08017064

08011228 <tcp_rexmit>:
=======
 80111b4:	b580      	push	{r7, lr}
 80111b6:	b082      	sub	sp, #8
 80111b8:	af00      	add	r7, sp, #0
 80111ba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 80111bc:	687b      	ldr	r3, [r7, #4]
 80111be:	2b00      	cmp	r3, #0
 80111c0:	d106      	bne.n	80111d0 <tcp_rexmit_rto+0x1c>
 80111c2:	4b0a      	ldr	r3, [pc, #40]	; (80111ec <tcp_rexmit_rto+0x38>)
 80111c4:	f240 62ad 	movw	r2, #1709	; 0x6ad
 80111c8:	4909      	ldr	r1, [pc, #36]	; (80111f0 <tcp_rexmit_rto+0x3c>)
 80111ca:	480a      	ldr	r0, [pc, #40]	; (80111f4 <tcp_rexmit_rto+0x40>)
 80111cc:	f003 f9c2 	bl	8014554 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 80111d0:	6878      	ldr	r0, [r7, #4]
 80111d2:	f7ff ff57 	bl	8011084 <tcp_rexmit_rto_prepare>
 80111d6:	4603      	mov	r3, r0
 80111d8:	2b00      	cmp	r3, #0
 80111da:	d102      	bne.n	80111e2 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 80111dc:	6878      	ldr	r0, [r7, #4]
 80111de:	f7ff ffc1 	bl	8011164 <tcp_rexmit_rto_commit>
  }
}
 80111e2:	bf00      	nop
 80111e4:	3708      	adds	r7, #8
 80111e6:	46bd      	mov	sp, r7
 80111e8:	bd80      	pop	{r7, pc}
 80111ea:	bf00      	nop
 80111ec:	08016ff4 	.word	0x08016ff4
 80111f0:	08017678 	.word	0x08017678
 80111f4:	08017048 	.word	0x08017048

080111f8 <tcp_rexmit>:
>>>>>>> Stashed changes
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
<<<<<<< Updated upstream
 8011228:	b590      	push	{r4, r7, lr}
 801122a:	b085      	sub	sp, #20
 801122c:	af00      	add	r7, sp, #0
 801122e:	6078      	str	r0, [r7, #4]
=======
 80111f8:	b590      	push	{r4, r7, lr}
 80111fa:	b085      	sub	sp, #20
 80111fc:	af00      	add	r7, sp, #0
 80111fe:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
<<<<<<< Updated upstream
 8011230:	687b      	ldr	r3, [r7, #4]
 8011232:	2b00      	cmp	r3, #0
 8011234:	d106      	bne.n	8011244 <tcp_rexmit+0x1c>
 8011236:	4b2f      	ldr	r3, [pc, #188]	; (80112f4 <tcp_rexmit+0xcc>)
 8011238:	f240 62c1 	movw	r2, #1729	; 0x6c1
 801123c:	492e      	ldr	r1, [pc, #184]	; (80112f8 <tcp_rexmit+0xd0>)
 801123e:	482f      	ldr	r0, [pc, #188]	; (80112fc <tcp_rexmit+0xd4>)
 8011240:	f003 f9a0 	bl	8014584 <iprintf>

  if (pcb->unacked == NULL) {
 8011244:	687b      	ldr	r3, [r7, #4]
 8011246:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011248:	2b00      	cmp	r3, #0
 801124a:	d102      	bne.n	8011252 <tcp_rexmit+0x2a>
    return ERR_VAL;
 801124c:	f06f 0305 	mvn.w	r3, #5
 8011250:	e04c      	b.n	80112ec <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8011252:	687b      	ldr	r3, [r7, #4]
 8011254:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011256:	60bb      	str	r3, [r7, #8]
=======
 8011200:	687b      	ldr	r3, [r7, #4]
 8011202:	2b00      	cmp	r3, #0
 8011204:	d106      	bne.n	8011214 <tcp_rexmit+0x1c>
 8011206:	4b2f      	ldr	r3, [pc, #188]	; (80112c4 <tcp_rexmit+0xcc>)
 8011208:	f240 62c1 	movw	r2, #1729	; 0x6c1
 801120c:	492e      	ldr	r1, [pc, #184]	; (80112c8 <tcp_rexmit+0xd0>)
 801120e:	482f      	ldr	r0, [pc, #188]	; (80112cc <tcp_rexmit+0xd4>)
 8011210:	f003 f9a0 	bl	8014554 <iprintf>

  if (pcb->unacked == NULL) {
 8011214:	687b      	ldr	r3, [r7, #4]
 8011216:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011218:	2b00      	cmp	r3, #0
 801121a:	d102      	bne.n	8011222 <tcp_rexmit+0x2a>
    return ERR_VAL;
 801121c:	f06f 0305 	mvn.w	r3, #5
 8011220:	e04c      	b.n	80112bc <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8011222:	687b      	ldr	r3, [r7, #4]
 8011224:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011226:	60bb      	str	r3, [r7, #8]
>>>>>>> Stashed changes

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
<<<<<<< Updated upstream
 8011258:	68b8      	ldr	r0, [r7, #8]
 801125a:	f7ff fe2d 	bl	8010eb8 <tcp_output_segment_busy>
 801125e:	4603      	mov	r3, r0
 8011260:	2b00      	cmp	r3, #0
 8011262:	d002      	beq.n	801126a <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8011264:	f06f 0305 	mvn.w	r3, #5
 8011268:	e040      	b.n	80112ec <tcp_rexmit+0xc4>
=======
 8011228:	68b8      	ldr	r0, [r7, #8]
 801122a:	f7ff fe2d 	bl	8010e88 <tcp_output_segment_busy>
 801122e:	4603      	mov	r3, r0
 8011230:	2b00      	cmp	r3, #0
 8011232:	d002      	beq.n	801123a <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8011234:	f06f 0305 	mvn.w	r3, #5
 8011238:	e040      	b.n	80112bc <tcp_rexmit+0xc4>
>>>>>>> Stashed changes
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
<<<<<<< Updated upstream
 801126a:	68bb      	ldr	r3, [r7, #8]
 801126c:	681a      	ldr	r2, [r3, #0]
 801126e:	687b      	ldr	r3, [r7, #4]
 8011270:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8011272:	687b      	ldr	r3, [r7, #4]
 8011274:	336c      	adds	r3, #108	; 0x6c
 8011276:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8011278:	e002      	b.n	8011280 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 801127a:	68fb      	ldr	r3, [r7, #12]
 801127c:	681b      	ldr	r3, [r3, #0]
 801127e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8011280:	68fb      	ldr	r3, [r7, #12]
 8011282:	681b      	ldr	r3, [r3, #0]
 8011284:	2b00      	cmp	r3, #0
 8011286:	d011      	beq.n	80112ac <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8011288:	68fb      	ldr	r3, [r7, #12]
 801128a:	681b      	ldr	r3, [r3, #0]
 801128c:	68db      	ldr	r3, [r3, #12]
 801128e:	685b      	ldr	r3, [r3, #4]
 8011290:	4618      	mov	r0, r3
 8011292:	f7f9 fd2f 	bl	800acf4 <lwip_htonl>
 8011296:	4604      	mov	r4, r0
 8011298:	68bb      	ldr	r3, [r7, #8]
 801129a:	68db      	ldr	r3, [r3, #12]
 801129c:	685b      	ldr	r3, [r3, #4]
 801129e:	4618      	mov	r0, r3
 80112a0:	f7f9 fd28 	bl	800acf4 <lwip_htonl>
 80112a4:	4603      	mov	r3, r0
 80112a6:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 80112a8:	2b00      	cmp	r3, #0
 80112aa:	dbe6      	blt.n	801127a <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 80112ac:	68fb      	ldr	r3, [r7, #12]
 80112ae:	681a      	ldr	r2, [r3, #0]
 80112b0:	68bb      	ldr	r3, [r7, #8]
 80112b2:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 80112b4:	68fb      	ldr	r3, [r7, #12]
 80112b6:	68ba      	ldr	r2, [r7, #8]
 80112b8:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 80112ba:	68bb      	ldr	r3, [r7, #8]
 80112bc:	681b      	ldr	r3, [r3, #0]
 80112be:	2b00      	cmp	r3, #0
 80112c0:	d103      	bne.n	80112ca <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80112c2:	687b      	ldr	r3, [r7, #4]
 80112c4:	2200      	movs	r2, #0
 80112c6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
=======
 801123a:	68bb      	ldr	r3, [r7, #8]
 801123c:	681a      	ldr	r2, [r3, #0]
 801123e:	687b      	ldr	r3, [r7, #4]
 8011240:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8011242:	687b      	ldr	r3, [r7, #4]
 8011244:	336c      	adds	r3, #108	; 0x6c
 8011246:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8011248:	e002      	b.n	8011250 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 801124a:	68fb      	ldr	r3, [r7, #12]
 801124c:	681b      	ldr	r3, [r3, #0]
 801124e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8011250:	68fb      	ldr	r3, [r7, #12]
 8011252:	681b      	ldr	r3, [r3, #0]
 8011254:	2b00      	cmp	r3, #0
 8011256:	d011      	beq.n	801127c <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8011258:	68fb      	ldr	r3, [r7, #12]
 801125a:	681b      	ldr	r3, [r3, #0]
 801125c:	68db      	ldr	r3, [r3, #12]
 801125e:	685b      	ldr	r3, [r3, #4]
 8011260:	4618      	mov	r0, r3
 8011262:	f7f9 fd2f 	bl	800acc4 <lwip_htonl>
 8011266:	4604      	mov	r4, r0
 8011268:	68bb      	ldr	r3, [r7, #8]
 801126a:	68db      	ldr	r3, [r3, #12]
 801126c:	685b      	ldr	r3, [r3, #4]
 801126e:	4618      	mov	r0, r3
 8011270:	f7f9 fd28 	bl	800acc4 <lwip_htonl>
 8011274:	4603      	mov	r3, r0
 8011276:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8011278:	2b00      	cmp	r3, #0
 801127a:	dbe6      	blt.n	801124a <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 801127c:	68fb      	ldr	r3, [r7, #12]
 801127e:	681a      	ldr	r2, [r3, #0]
 8011280:	68bb      	ldr	r3, [r7, #8]
 8011282:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8011284:	68fb      	ldr	r3, [r7, #12]
 8011286:	68ba      	ldr	r2, [r7, #8]
 8011288:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801128a:	68bb      	ldr	r3, [r7, #8]
 801128c:	681b      	ldr	r3, [r3, #0]
 801128e:	2b00      	cmp	r3, #0
 8011290:	d103      	bne.n	801129a <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8011292:	687b      	ldr	r3, [r7, #4]
 8011294:	2200      	movs	r2, #0
 8011296:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
>>>>>>> Stashed changes
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
<<<<<<< Updated upstream
 80112ca:	687b      	ldr	r3, [r7, #4]
 80112cc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80112d0:	2bff      	cmp	r3, #255	; 0xff
 80112d2:	d007      	beq.n	80112e4 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 80112d4:	687b      	ldr	r3, [r7, #4]
 80112d6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80112da:	3301      	adds	r3, #1
 80112dc:	b2da      	uxtb	r2, r3
 80112de:	687b      	ldr	r3, [r7, #4]
 80112e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
=======
 801129a:	687b      	ldr	r3, [r7, #4]
 801129c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80112a0:	2bff      	cmp	r3, #255	; 0xff
 80112a2:	d007      	beq.n	80112b4 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 80112a4:	687b      	ldr	r3, [r7, #4]
 80112a6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80112aa:	3301      	adds	r3, #1
 80112ac:	b2da      	uxtb	r2, r3
 80112ae:	687b      	ldr	r3, [r7, #4]
 80112b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
>>>>>>> Stashed changes
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
<<<<<<< Updated upstream
 80112e4:	687b      	ldr	r3, [r7, #4]
 80112e6:	2200      	movs	r2, #0
 80112e8:	635a      	str	r2, [r3, #52]	; 0x34
=======
 80112b4:	687b      	ldr	r3, [r7, #4]
 80112b6:	2200      	movs	r2, #0
 80112b8:	635a      	str	r2, [r3, #52]	; 0x34
>>>>>>> Stashed changes

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
<<<<<<< Updated upstream
 80112ea:	2300      	movs	r3, #0
}
 80112ec:	4618      	mov	r0, r3
 80112ee:	3714      	adds	r7, #20
 80112f0:	46bd      	mov	sp, r7
 80112f2:	bd90      	pop	{r4, r7, pc}
 80112f4:	08017010 	.word	0x08017010
 80112f8:	080176b0 	.word	0x080176b0
 80112fc:	08017064 	.word	0x08017064

08011300 <tcp_rexmit_fast>:
=======
 80112ba:	2300      	movs	r3, #0
}
 80112bc:	4618      	mov	r0, r3
 80112be:	3714      	adds	r7, #20
 80112c0:	46bd      	mov	sp, r7
 80112c2:	bd90      	pop	{r4, r7, pc}
 80112c4:	08016ff4 	.word	0x08016ff4
 80112c8:	08017694 	.word	0x08017694
 80112cc:	08017048 	.word	0x08017048

080112d0 <tcp_rexmit_fast>:
>>>>>>> Stashed changes
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
<<<<<<< Updated upstream
 8011300:	b580      	push	{r7, lr}
 8011302:	b082      	sub	sp, #8
 8011304:	af00      	add	r7, sp, #0
 8011306:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8011308:	687b      	ldr	r3, [r7, #4]
 801130a:	2b00      	cmp	r3, #0
 801130c:	d106      	bne.n	801131c <tcp_rexmit_fast+0x1c>
 801130e:	4b2a      	ldr	r3, [pc, #168]	; (80113b8 <tcp_rexmit_fast+0xb8>)
 8011310:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8011314:	4929      	ldr	r1, [pc, #164]	; (80113bc <tcp_rexmit_fast+0xbc>)
 8011316:	482a      	ldr	r0, [pc, #168]	; (80113c0 <tcp_rexmit_fast+0xc0>)
 8011318:	f003 f934 	bl	8014584 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 801131c:	687b      	ldr	r3, [r7, #4]
 801131e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011320:	2b00      	cmp	r3, #0
 8011322:	d044      	beq.n	80113ae <tcp_rexmit_fast+0xae>
 8011324:	687b      	ldr	r3, [r7, #4]
 8011326:	8b5b      	ldrh	r3, [r3, #26]
 8011328:	f003 0304 	and.w	r3, r3, #4
 801132c:	2b00      	cmp	r3, #0
 801132e:	d13e      	bne.n	80113ae <tcp_rexmit_fast+0xae>
=======
 80112d0:	b580      	push	{r7, lr}
 80112d2:	b082      	sub	sp, #8
 80112d4:	af00      	add	r7, sp, #0
 80112d6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 80112d8:	687b      	ldr	r3, [r7, #4]
 80112da:	2b00      	cmp	r3, #0
 80112dc:	d106      	bne.n	80112ec <tcp_rexmit_fast+0x1c>
 80112de:	4b2a      	ldr	r3, [pc, #168]	; (8011388 <tcp_rexmit_fast+0xb8>)
 80112e0:	f240 62f9 	movw	r2, #1785	; 0x6f9
 80112e4:	4929      	ldr	r1, [pc, #164]	; (801138c <tcp_rexmit_fast+0xbc>)
 80112e6:	482a      	ldr	r0, [pc, #168]	; (8011390 <tcp_rexmit_fast+0xc0>)
 80112e8:	f003 f934 	bl	8014554 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 80112ec:	687b      	ldr	r3, [r7, #4]
 80112ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80112f0:	2b00      	cmp	r3, #0
 80112f2:	d044      	beq.n	801137e <tcp_rexmit_fast+0xae>
 80112f4:	687b      	ldr	r3, [r7, #4]
 80112f6:	8b5b      	ldrh	r3, [r3, #26]
 80112f8:	f003 0304 	and.w	r3, r3, #4
 80112fc:	2b00      	cmp	r3, #0
 80112fe:	d13e      	bne.n	801137e <tcp_rexmit_fast+0xae>
>>>>>>> Stashed changes
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
<<<<<<< Updated upstream
 8011330:	6878      	ldr	r0, [r7, #4]
 8011332:	f7ff ff79 	bl	8011228 <tcp_rexmit>
 8011336:	4603      	mov	r3, r0
 8011338:	2b00      	cmp	r3, #0
 801133a:	d138      	bne.n	80113ae <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801133c:	687b      	ldr	r3, [r7, #4]
 801133e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8011342:	687b      	ldr	r3, [r7, #4]
 8011344:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011348:	4293      	cmp	r3, r2
 801134a:	bf28      	it	cs
 801134c:	4613      	movcs	r3, r2
 801134e:	b29b      	uxth	r3, r3
 8011350:	0fda      	lsrs	r2, r3, #31
 8011352:	4413      	add	r3, r2
 8011354:	105b      	asrs	r3, r3, #1
 8011356:	b29a      	uxth	r2, r3
 8011358:	687b      	ldr	r3, [r7, #4]
 801135a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801135e:	687b      	ldr	r3, [r7, #4]
 8011360:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8011364:	461a      	mov	r2, r3
 8011366:	687b      	ldr	r3, [r7, #4]
 8011368:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801136a:	005b      	lsls	r3, r3, #1
 801136c:	429a      	cmp	r2, r3
 801136e:	d206      	bcs.n	801137e <tcp_rexmit_fast+0x7e>
=======
 8011300:	6878      	ldr	r0, [r7, #4]
 8011302:	f7ff ff79 	bl	80111f8 <tcp_rexmit>
 8011306:	4603      	mov	r3, r0
 8011308:	2b00      	cmp	r3, #0
 801130a:	d138      	bne.n	801137e <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801130c:	687b      	ldr	r3, [r7, #4]
 801130e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8011312:	687b      	ldr	r3, [r7, #4]
 8011314:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011318:	4293      	cmp	r3, r2
 801131a:	bf28      	it	cs
 801131c:	4613      	movcs	r3, r2
 801131e:	b29b      	uxth	r3, r3
 8011320:	0fda      	lsrs	r2, r3, #31
 8011322:	4413      	add	r3, r2
 8011324:	105b      	asrs	r3, r3, #1
 8011326:	b29a      	uxth	r2, r3
 8011328:	687b      	ldr	r3, [r7, #4]
 801132a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801132e:	687b      	ldr	r3, [r7, #4]
 8011330:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8011334:	461a      	mov	r2, r3
 8011336:	687b      	ldr	r3, [r7, #4]
 8011338:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801133a:	005b      	lsls	r3, r3, #1
 801133c:	429a      	cmp	r2, r3
 801133e:	d206      	bcs.n	801134e <tcp_rexmit_fast+0x7e>
>>>>>>> Stashed changes
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
<<<<<<< Updated upstream
 8011370:	687b      	ldr	r3, [r7, #4]
 8011372:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011374:	005b      	lsls	r3, r3, #1
 8011376:	b29a      	uxth	r2, r3
 8011378:	687b      	ldr	r3, [r7, #4]
 801137a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801137e:	687b      	ldr	r3, [r7, #4]
 8011380:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8011384:	687b      	ldr	r3, [r7, #4]
 8011386:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011388:	4619      	mov	r1, r3
 801138a:	0049      	lsls	r1, r1, #1
 801138c:	440b      	add	r3, r1
 801138e:	b29b      	uxth	r3, r3
 8011390:	4413      	add	r3, r2
 8011392:	b29a      	uxth	r2, r3
 8011394:	687b      	ldr	r3, [r7, #4]
 8011396:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 801139a:	687b      	ldr	r3, [r7, #4]
 801139c:	8b5b      	ldrh	r3, [r3, #26]
 801139e:	f043 0304 	orr.w	r3, r3, #4
 80113a2:	b29a      	uxth	r2, r3
 80113a4:	687b      	ldr	r3, [r7, #4]
 80113a6:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 80113a8:	687b      	ldr	r3, [r7, #4]
 80113aa:	2200      	movs	r2, #0
 80113ac:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 80113ae:	bf00      	nop
 80113b0:	3708      	adds	r7, #8
 80113b2:	46bd      	mov	sp, r7
 80113b4:	bd80      	pop	{r7, pc}
 80113b6:	bf00      	nop
 80113b8:	08017010 	.word	0x08017010
 80113bc:	080176c8 	.word	0x080176c8
 80113c0:	08017064 	.word	0x08017064

080113c4 <tcp_output_alloc_header_common>:
=======
 8011340:	687b      	ldr	r3, [r7, #4]
 8011342:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011344:	005b      	lsls	r3, r3, #1
 8011346:	b29a      	uxth	r2, r3
 8011348:	687b      	ldr	r3, [r7, #4]
 801134a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801134e:	687b      	ldr	r3, [r7, #4]
 8011350:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8011354:	687b      	ldr	r3, [r7, #4]
 8011356:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011358:	4619      	mov	r1, r3
 801135a:	0049      	lsls	r1, r1, #1
 801135c:	440b      	add	r3, r1
 801135e:	b29b      	uxth	r3, r3
 8011360:	4413      	add	r3, r2
 8011362:	b29a      	uxth	r2, r3
 8011364:	687b      	ldr	r3, [r7, #4]
 8011366:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 801136a:	687b      	ldr	r3, [r7, #4]
 801136c:	8b5b      	ldrh	r3, [r3, #26]
 801136e:	f043 0304 	orr.w	r3, r3, #4
 8011372:	b29a      	uxth	r2, r3
 8011374:	687b      	ldr	r3, [r7, #4]
 8011376:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8011378:	687b      	ldr	r3, [r7, #4]
 801137a:	2200      	movs	r2, #0
 801137c:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 801137e:	bf00      	nop
 8011380:	3708      	adds	r7, #8
 8011382:	46bd      	mov	sp, r7
 8011384:	bd80      	pop	{r7, pc}
 8011386:	bf00      	nop
 8011388:	08016ff4 	.word	0x08016ff4
 801138c:	080176ac 	.word	0x080176ac
 8011390:	08017048 	.word	0x08017048

08011394 <tcp_output_alloc_header_common>:
>>>>>>> Stashed changes

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
<<<<<<< Updated upstream
 80113c4:	b580      	push	{r7, lr}
 80113c6:	b086      	sub	sp, #24
 80113c8:	af00      	add	r7, sp, #0
 80113ca:	60f8      	str	r0, [r7, #12]
 80113cc:	607b      	str	r3, [r7, #4]
 80113ce:	460b      	mov	r3, r1
 80113d0:	817b      	strh	r3, [r7, #10]
 80113d2:	4613      	mov	r3, r2
 80113d4:	813b      	strh	r3, [r7, #8]
=======
 8011394:	b580      	push	{r7, lr}
 8011396:	b086      	sub	sp, #24
 8011398:	af00      	add	r7, sp, #0
 801139a:	60f8      	str	r0, [r7, #12]
 801139c:	607b      	str	r3, [r7, #4]
 801139e:	460b      	mov	r3, r1
 80113a0:	817b      	strh	r3, [r7, #10]
 80113a2:	4613      	mov	r3, r2
 80113a4:	813b      	strh	r3, [r7, #8]
>>>>>>> Stashed changes
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
<<<<<<< Updated upstream
 80113d6:	897a      	ldrh	r2, [r7, #10]
 80113d8:	893b      	ldrh	r3, [r7, #8]
 80113da:	4413      	add	r3, r2
 80113dc:	b29b      	uxth	r3, r3
 80113de:	3314      	adds	r3, #20
 80113e0:	b29b      	uxth	r3, r3
 80113e2:	f44f 7220 	mov.w	r2, #640	; 0x280
 80113e6:	4619      	mov	r1, r3
 80113e8:	2022      	movs	r0, #34	; 0x22
 80113ea:	f7fa fc1d 	bl	800bc28 <pbuf_alloc>
 80113ee:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 80113f0:	697b      	ldr	r3, [r7, #20]
 80113f2:	2b00      	cmp	r3, #0
 80113f4:	d04d      	beq.n	8011492 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 80113f6:	897b      	ldrh	r3, [r7, #10]
 80113f8:	3313      	adds	r3, #19
 80113fa:	697a      	ldr	r2, [r7, #20]
 80113fc:	8952      	ldrh	r2, [r2, #10]
 80113fe:	4293      	cmp	r3, r2
 8011400:	db06      	blt.n	8011410 <tcp_output_alloc_header_common+0x4c>
 8011402:	4b26      	ldr	r3, [pc, #152]	; (801149c <tcp_output_alloc_header_common+0xd8>)
 8011404:	f240 7223 	movw	r2, #1827	; 0x723
 8011408:	4925      	ldr	r1, [pc, #148]	; (80114a0 <tcp_output_alloc_header_common+0xdc>)
 801140a:	4826      	ldr	r0, [pc, #152]	; (80114a4 <tcp_output_alloc_header_common+0xe0>)
 801140c:	f003 f8ba 	bl	8014584 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8011410:	697b      	ldr	r3, [r7, #20]
 8011412:	685b      	ldr	r3, [r3, #4]
 8011414:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8011416:	8c3b      	ldrh	r3, [r7, #32]
 8011418:	4618      	mov	r0, r3
 801141a:	f7f9 fc56 	bl	800acca <lwip_htons>
 801141e:	4603      	mov	r3, r0
 8011420:	461a      	mov	r2, r3
 8011422:	693b      	ldr	r3, [r7, #16]
 8011424:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8011426:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011428:	4618      	mov	r0, r3
 801142a:	f7f9 fc4e 	bl	800acca <lwip_htons>
 801142e:	4603      	mov	r3, r0
 8011430:	461a      	mov	r2, r3
 8011432:	693b      	ldr	r3, [r7, #16]
 8011434:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8011436:	693b      	ldr	r3, [r7, #16]
 8011438:	687a      	ldr	r2, [r7, #4]
 801143a:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 801143c:	68f8      	ldr	r0, [r7, #12]
 801143e:	f7f9 fc59 	bl	800acf4 <lwip_htonl>
 8011442:	4602      	mov	r2, r0
 8011444:	693b      	ldr	r3, [r7, #16]
 8011446:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8011448:	897b      	ldrh	r3, [r7, #10]
 801144a:	089b      	lsrs	r3, r3, #2
 801144c:	b29b      	uxth	r3, r3
 801144e:	3305      	adds	r3, #5
 8011450:	b29b      	uxth	r3, r3
 8011452:	031b      	lsls	r3, r3, #12
 8011454:	b29a      	uxth	r2, r3
 8011456:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801145a:	b29b      	uxth	r3, r3
 801145c:	4313      	orrs	r3, r2
 801145e:	b29b      	uxth	r3, r3
 8011460:	4618      	mov	r0, r3
 8011462:	f7f9 fc32 	bl	800acca <lwip_htons>
 8011466:	4603      	mov	r3, r0
 8011468:	461a      	mov	r2, r3
 801146a:	693b      	ldr	r3, [r7, #16]
 801146c:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801146e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8011470:	4618      	mov	r0, r3
 8011472:	f7f9 fc2a 	bl	800acca <lwip_htons>
 8011476:	4603      	mov	r3, r0
 8011478:	461a      	mov	r2, r3
 801147a:	693b      	ldr	r3, [r7, #16]
 801147c:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801147e:	693b      	ldr	r3, [r7, #16]
 8011480:	2200      	movs	r2, #0
 8011482:	741a      	strb	r2, [r3, #16]
 8011484:	2200      	movs	r2, #0
 8011486:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8011488:	693b      	ldr	r3, [r7, #16]
 801148a:	2200      	movs	r2, #0
 801148c:	749a      	strb	r2, [r3, #18]
 801148e:	2200      	movs	r2, #0
 8011490:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8011492:	697b      	ldr	r3, [r7, #20]
}
 8011494:	4618      	mov	r0, r3
 8011496:	3718      	adds	r7, #24
 8011498:	46bd      	mov	sp, r7
 801149a:	bd80      	pop	{r7, pc}
 801149c:	08017010 	.word	0x08017010
 80114a0:	080176e8 	.word	0x080176e8
 80114a4:	08017064 	.word	0x08017064

080114a8 <tcp_output_alloc_header>:
=======
 80113a6:	897a      	ldrh	r2, [r7, #10]
 80113a8:	893b      	ldrh	r3, [r7, #8]
 80113aa:	4413      	add	r3, r2
 80113ac:	b29b      	uxth	r3, r3
 80113ae:	3314      	adds	r3, #20
 80113b0:	b29b      	uxth	r3, r3
 80113b2:	f44f 7220 	mov.w	r2, #640	; 0x280
 80113b6:	4619      	mov	r1, r3
 80113b8:	2022      	movs	r0, #34	; 0x22
 80113ba:	f7fa fc1d 	bl	800bbf8 <pbuf_alloc>
 80113be:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 80113c0:	697b      	ldr	r3, [r7, #20]
 80113c2:	2b00      	cmp	r3, #0
 80113c4:	d04d      	beq.n	8011462 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 80113c6:	897b      	ldrh	r3, [r7, #10]
 80113c8:	3313      	adds	r3, #19
 80113ca:	697a      	ldr	r2, [r7, #20]
 80113cc:	8952      	ldrh	r2, [r2, #10]
 80113ce:	4293      	cmp	r3, r2
 80113d0:	db06      	blt.n	80113e0 <tcp_output_alloc_header_common+0x4c>
 80113d2:	4b26      	ldr	r3, [pc, #152]	; (801146c <tcp_output_alloc_header_common+0xd8>)
 80113d4:	f240 7223 	movw	r2, #1827	; 0x723
 80113d8:	4925      	ldr	r1, [pc, #148]	; (8011470 <tcp_output_alloc_header_common+0xdc>)
 80113da:	4826      	ldr	r0, [pc, #152]	; (8011474 <tcp_output_alloc_header_common+0xe0>)
 80113dc:	f003 f8ba 	bl	8014554 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 80113e0:	697b      	ldr	r3, [r7, #20]
 80113e2:	685b      	ldr	r3, [r3, #4]
 80113e4:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 80113e6:	8c3b      	ldrh	r3, [r7, #32]
 80113e8:	4618      	mov	r0, r3
 80113ea:	f7f9 fc56 	bl	800ac9a <lwip_htons>
 80113ee:	4603      	mov	r3, r0
 80113f0:	461a      	mov	r2, r3
 80113f2:	693b      	ldr	r3, [r7, #16]
 80113f4:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 80113f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80113f8:	4618      	mov	r0, r3
 80113fa:	f7f9 fc4e 	bl	800ac9a <lwip_htons>
 80113fe:	4603      	mov	r3, r0
 8011400:	461a      	mov	r2, r3
 8011402:	693b      	ldr	r3, [r7, #16]
 8011404:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8011406:	693b      	ldr	r3, [r7, #16]
 8011408:	687a      	ldr	r2, [r7, #4]
 801140a:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 801140c:	68f8      	ldr	r0, [r7, #12]
 801140e:	f7f9 fc59 	bl	800acc4 <lwip_htonl>
 8011412:	4602      	mov	r2, r0
 8011414:	693b      	ldr	r3, [r7, #16]
 8011416:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8011418:	897b      	ldrh	r3, [r7, #10]
 801141a:	089b      	lsrs	r3, r3, #2
 801141c:	b29b      	uxth	r3, r3
 801141e:	3305      	adds	r3, #5
 8011420:	b29b      	uxth	r3, r3
 8011422:	031b      	lsls	r3, r3, #12
 8011424:	b29a      	uxth	r2, r3
 8011426:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801142a:	b29b      	uxth	r3, r3
 801142c:	4313      	orrs	r3, r2
 801142e:	b29b      	uxth	r3, r3
 8011430:	4618      	mov	r0, r3
 8011432:	f7f9 fc32 	bl	800ac9a <lwip_htons>
 8011436:	4603      	mov	r3, r0
 8011438:	461a      	mov	r2, r3
 801143a:	693b      	ldr	r3, [r7, #16]
 801143c:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801143e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8011440:	4618      	mov	r0, r3
 8011442:	f7f9 fc2a 	bl	800ac9a <lwip_htons>
 8011446:	4603      	mov	r3, r0
 8011448:	461a      	mov	r2, r3
 801144a:	693b      	ldr	r3, [r7, #16]
 801144c:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801144e:	693b      	ldr	r3, [r7, #16]
 8011450:	2200      	movs	r2, #0
 8011452:	741a      	strb	r2, [r3, #16]
 8011454:	2200      	movs	r2, #0
 8011456:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8011458:	693b      	ldr	r3, [r7, #16]
 801145a:	2200      	movs	r2, #0
 801145c:	749a      	strb	r2, [r3, #18]
 801145e:	2200      	movs	r2, #0
 8011460:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8011462:	697b      	ldr	r3, [r7, #20]
}
 8011464:	4618      	mov	r0, r3
 8011466:	3718      	adds	r7, #24
 8011468:	46bd      	mov	sp, r7
 801146a:	bd80      	pop	{r7, pc}
 801146c:	08016ff4 	.word	0x08016ff4
 8011470:	080176cc 	.word	0x080176cc
 8011474:	08017048 	.word	0x08017048

08011478 <tcp_output_alloc_header>:
>>>>>>> Stashed changes
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
<<<<<<< Updated upstream
 80114a8:	b5b0      	push	{r4, r5, r7, lr}
 80114aa:	b08a      	sub	sp, #40	; 0x28
 80114ac:	af04      	add	r7, sp, #16
 80114ae:	60f8      	str	r0, [r7, #12]
 80114b0:	607b      	str	r3, [r7, #4]
 80114b2:	460b      	mov	r3, r1
 80114b4:	817b      	strh	r3, [r7, #10]
 80114b6:	4613      	mov	r3, r2
 80114b8:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 80114ba:	68fb      	ldr	r3, [r7, #12]
 80114bc:	2b00      	cmp	r3, #0
 80114be:	d106      	bne.n	80114ce <tcp_output_alloc_header+0x26>
 80114c0:	4b15      	ldr	r3, [pc, #84]	; (8011518 <tcp_output_alloc_header+0x70>)
 80114c2:	f240 7242 	movw	r2, #1858	; 0x742
 80114c6:	4915      	ldr	r1, [pc, #84]	; (801151c <tcp_output_alloc_header+0x74>)
 80114c8:	4815      	ldr	r0, [pc, #84]	; (8011520 <tcp_output_alloc_header+0x78>)
 80114ca:	f003 f85b 	bl	8014584 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 80114ce:	68fb      	ldr	r3, [r7, #12]
 80114d0:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80114d2:	68fb      	ldr	r3, [r7, #12]
 80114d4:	8adb      	ldrh	r3, [r3, #22]
 80114d6:	68fa      	ldr	r2, [r7, #12]
 80114d8:	8b12      	ldrh	r2, [r2, #24]
 80114da:	68f9      	ldr	r1, [r7, #12]
 80114dc:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 80114de:	893d      	ldrh	r5, [r7, #8]
 80114e0:	897c      	ldrh	r4, [r7, #10]
 80114e2:	9103      	str	r1, [sp, #12]
 80114e4:	2110      	movs	r1, #16
 80114e6:	9102      	str	r1, [sp, #8]
 80114e8:	9201      	str	r2, [sp, #4]
 80114ea:	9300      	str	r3, [sp, #0]
 80114ec:	687b      	ldr	r3, [r7, #4]
 80114ee:	462a      	mov	r2, r5
 80114f0:	4621      	mov	r1, r4
 80114f2:	f7ff ff67 	bl	80113c4 <tcp_output_alloc_header_common>
 80114f6:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 80114f8:	697b      	ldr	r3, [r7, #20]
 80114fa:	2b00      	cmp	r3, #0
 80114fc:	d006      	beq.n	801150c <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80114fe:	68fb      	ldr	r3, [r7, #12]
 8011500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011502:	68fa      	ldr	r2, [r7, #12]
 8011504:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8011506:	441a      	add	r2, r3
 8011508:	68fb      	ldr	r3, [r7, #12]
 801150a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 801150c:	697b      	ldr	r3, [r7, #20]
}
 801150e:	4618      	mov	r0, r3
 8011510:	3718      	adds	r7, #24
 8011512:	46bd      	mov	sp, r7
 8011514:	bdb0      	pop	{r4, r5, r7, pc}
 8011516:	bf00      	nop
 8011518:	08017010 	.word	0x08017010
 801151c:	08017718 	.word	0x08017718
 8011520:	08017064 	.word	0x08017064

08011524 <tcp_output_fill_options>:
=======
 8011478:	b5b0      	push	{r4, r5, r7, lr}
 801147a:	b08a      	sub	sp, #40	; 0x28
 801147c:	af04      	add	r7, sp, #16
 801147e:	60f8      	str	r0, [r7, #12]
 8011480:	607b      	str	r3, [r7, #4]
 8011482:	460b      	mov	r3, r1
 8011484:	817b      	strh	r3, [r7, #10]
 8011486:	4613      	mov	r3, r2
 8011488:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801148a:	68fb      	ldr	r3, [r7, #12]
 801148c:	2b00      	cmp	r3, #0
 801148e:	d106      	bne.n	801149e <tcp_output_alloc_header+0x26>
 8011490:	4b15      	ldr	r3, [pc, #84]	; (80114e8 <tcp_output_alloc_header+0x70>)
 8011492:	f240 7242 	movw	r2, #1858	; 0x742
 8011496:	4915      	ldr	r1, [pc, #84]	; (80114ec <tcp_output_alloc_header+0x74>)
 8011498:	4815      	ldr	r0, [pc, #84]	; (80114f0 <tcp_output_alloc_header+0x78>)
 801149a:	f003 f85b 	bl	8014554 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801149e:	68fb      	ldr	r3, [r7, #12]
 80114a0:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80114a2:	68fb      	ldr	r3, [r7, #12]
 80114a4:	8adb      	ldrh	r3, [r3, #22]
 80114a6:	68fa      	ldr	r2, [r7, #12]
 80114a8:	8b12      	ldrh	r2, [r2, #24]
 80114aa:	68f9      	ldr	r1, [r7, #12]
 80114ac:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 80114ae:	893d      	ldrh	r5, [r7, #8]
 80114b0:	897c      	ldrh	r4, [r7, #10]
 80114b2:	9103      	str	r1, [sp, #12]
 80114b4:	2110      	movs	r1, #16
 80114b6:	9102      	str	r1, [sp, #8]
 80114b8:	9201      	str	r2, [sp, #4]
 80114ba:	9300      	str	r3, [sp, #0]
 80114bc:	687b      	ldr	r3, [r7, #4]
 80114be:	462a      	mov	r2, r5
 80114c0:	4621      	mov	r1, r4
 80114c2:	f7ff ff67 	bl	8011394 <tcp_output_alloc_header_common>
 80114c6:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 80114c8:	697b      	ldr	r3, [r7, #20]
 80114ca:	2b00      	cmp	r3, #0
 80114cc:	d006      	beq.n	80114dc <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80114ce:	68fb      	ldr	r3, [r7, #12]
 80114d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80114d2:	68fa      	ldr	r2, [r7, #12]
 80114d4:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80114d6:	441a      	add	r2, r3
 80114d8:	68fb      	ldr	r3, [r7, #12]
 80114da:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 80114dc:	697b      	ldr	r3, [r7, #20]
}
 80114de:	4618      	mov	r0, r3
 80114e0:	3718      	adds	r7, #24
 80114e2:	46bd      	mov	sp, r7
 80114e4:	bdb0      	pop	{r4, r5, r7, pc}
 80114e6:	bf00      	nop
 80114e8:	08016ff4 	.word	0x08016ff4
 80114ec:	080176fc 	.word	0x080176fc
 80114f0:	08017048 	.word	0x08017048

080114f4 <tcp_output_fill_options>:
>>>>>>> Stashed changes

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
<<<<<<< Updated upstream
 8011524:	b580      	push	{r7, lr}
 8011526:	b088      	sub	sp, #32
 8011528:	af00      	add	r7, sp, #0
 801152a:	60f8      	str	r0, [r7, #12]
 801152c:	60b9      	str	r1, [r7, #8]
 801152e:	4611      	mov	r1, r2
 8011530:	461a      	mov	r2, r3
 8011532:	460b      	mov	r3, r1
 8011534:	71fb      	strb	r3, [r7, #7]
 8011536:	4613      	mov	r3, r2
 8011538:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 801153a:	2300      	movs	r3, #0
 801153c:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801153e:	68bb      	ldr	r3, [r7, #8]
 8011540:	2b00      	cmp	r3, #0
 8011542:	d106      	bne.n	8011552 <tcp_output_fill_options+0x2e>
 8011544:	4b13      	ldr	r3, [pc, #76]	; (8011594 <tcp_output_fill_options+0x70>)
 8011546:	f240 7256 	movw	r2, #1878	; 0x756
 801154a:	4913      	ldr	r1, [pc, #76]	; (8011598 <tcp_output_fill_options+0x74>)
 801154c:	4813      	ldr	r0, [pc, #76]	; (801159c <tcp_output_fill_options+0x78>)
 801154e:	f003 f819 	bl	8014584 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8011552:	68bb      	ldr	r3, [r7, #8]
 8011554:	685b      	ldr	r3, [r3, #4]
 8011556:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8011558:	69bb      	ldr	r3, [r7, #24]
 801155a:	3314      	adds	r3, #20
 801155c:	617b      	str	r3, [r7, #20]
=======
 80114f4:	b580      	push	{r7, lr}
 80114f6:	b088      	sub	sp, #32
 80114f8:	af00      	add	r7, sp, #0
 80114fa:	60f8      	str	r0, [r7, #12]
 80114fc:	60b9      	str	r1, [r7, #8]
 80114fe:	4611      	mov	r1, r2
 8011500:	461a      	mov	r2, r3
 8011502:	460b      	mov	r3, r1
 8011504:	71fb      	strb	r3, [r7, #7]
 8011506:	4613      	mov	r3, r2
 8011508:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 801150a:	2300      	movs	r3, #0
 801150c:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801150e:	68bb      	ldr	r3, [r7, #8]
 8011510:	2b00      	cmp	r3, #0
 8011512:	d106      	bne.n	8011522 <tcp_output_fill_options+0x2e>
 8011514:	4b13      	ldr	r3, [pc, #76]	; (8011564 <tcp_output_fill_options+0x70>)
 8011516:	f240 7256 	movw	r2, #1878	; 0x756
 801151a:	4913      	ldr	r1, [pc, #76]	; (8011568 <tcp_output_fill_options+0x74>)
 801151c:	4813      	ldr	r0, [pc, #76]	; (801156c <tcp_output_fill_options+0x78>)
 801151e:	f003 f819 	bl	8014554 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8011522:	68bb      	ldr	r3, [r7, #8]
 8011524:	685b      	ldr	r3, [r3, #4]
 8011526:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8011528:	69bb      	ldr	r3, [r7, #24]
 801152a:	3314      	adds	r3, #20
 801152c:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
<<<<<<< Updated upstream
 801155e:	69bb      	ldr	r3, [r7, #24]
 8011560:	f103 0214 	add.w	r2, r3, #20
 8011564:	8bfb      	ldrh	r3, [r7, #30]
 8011566:	009b      	lsls	r3, r3, #2
 8011568:	4619      	mov	r1, r3
 801156a:	79fb      	ldrb	r3, [r7, #7]
 801156c:	009b      	lsls	r3, r3, #2
 801156e:	f003 0304 	and.w	r3, r3, #4
 8011572:	440b      	add	r3, r1
 8011574:	4413      	add	r3, r2
 8011576:	697a      	ldr	r2, [r7, #20]
 8011578:	429a      	cmp	r2, r3
 801157a:	d006      	beq.n	801158a <tcp_output_fill_options+0x66>
 801157c:	4b05      	ldr	r3, [pc, #20]	; (8011594 <tcp_output_fill_options+0x70>)
 801157e:	f240 7275 	movw	r2, #1909	; 0x775
 8011582:	4907      	ldr	r1, [pc, #28]	; (80115a0 <tcp_output_fill_options+0x7c>)
 8011584:	4805      	ldr	r0, [pc, #20]	; (801159c <tcp_output_fill_options+0x78>)
 8011586:	f002 fffd 	bl	8014584 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 801158a:	bf00      	nop
 801158c:	3720      	adds	r7, #32
 801158e:	46bd      	mov	sp, r7
 8011590:	bd80      	pop	{r7, pc}
 8011592:	bf00      	nop
 8011594:	08017010 	.word	0x08017010
 8011598:	08017740 	.word	0x08017740
 801159c:	08017064 	.word	0x08017064
 80115a0:	08017638 	.word	0x08017638

080115a4 <tcp_output_control_segment>:
=======
 801152e:	69bb      	ldr	r3, [r7, #24]
 8011530:	f103 0214 	add.w	r2, r3, #20
 8011534:	8bfb      	ldrh	r3, [r7, #30]
 8011536:	009b      	lsls	r3, r3, #2
 8011538:	4619      	mov	r1, r3
 801153a:	79fb      	ldrb	r3, [r7, #7]
 801153c:	009b      	lsls	r3, r3, #2
 801153e:	f003 0304 	and.w	r3, r3, #4
 8011542:	440b      	add	r3, r1
 8011544:	4413      	add	r3, r2
 8011546:	697a      	ldr	r2, [r7, #20]
 8011548:	429a      	cmp	r2, r3
 801154a:	d006      	beq.n	801155a <tcp_output_fill_options+0x66>
 801154c:	4b05      	ldr	r3, [pc, #20]	; (8011564 <tcp_output_fill_options+0x70>)
 801154e:	f240 7275 	movw	r2, #1909	; 0x775
 8011552:	4907      	ldr	r1, [pc, #28]	; (8011570 <tcp_output_fill_options+0x7c>)
 8011554:	4805      	ldr	r0, [pc, #20]	; (801156c <tcp_output_fill_options+0x78>)
 8011556:	f002 fffd 	bl	8014554 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 801155a:	bf00      	nop
 801155c:	3720      	adds	r7, #32
 801155e:	46bd      	mov	sp, r7
 8011560:	bd80      	pop	{r7, pc}
 8011562:	bf00      	nop
 8011564:	08016ff4 	.word	0x08016ff4
 8011568:	08017724 	.word	0x08017724
 801156c:	08017048 	.word	0x08017048
 8011570:	0801761c 	.word	0x0801761c

08011574 <tcp_output_control_segment>:
>>>>>>> Stashed changes
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
<<<<<<< Updated upstream
 80115a4:	b580      	push	{r7, lr}
 80115a6:	b08a      	sub	sp, #40	; 0x28
 80115a8:	af04      	add	r7, sp, #16
 80115aa:	60f8      	str	r0, [r7, #12]
 80115ac:	60b9      	str	r1, [r7, #8]
 80115ae:	607a      	str	r2, [r7, #4]
 80115b0:	603b      	str	r3, [r7, #0]
=======
 8011574:	b580      	push	{r7, lr}
 8011576:	b08a      	sub	sp, #40	; 0x28
 8011578:	af04      	add	r7, sp, #16
 801157a:	60f8      	str	r0, [r7, #12]
 801157c:	60b9      	str	r1, [r7, #8]
 801157e:	607a      	str	r2, [r7, #4]
 8011580:	603b      	str	r3, [r7, #0]
>>>>>>> Stashed changes
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
<<<<<<< Updated upstream
 80115b2:	68bb      	ldr	r3, [r7, #8]
 80115b4:	2b00      	cmp	r3, #0
 80115b6:	d106      	bne.n	80115c6 <tcp_output_control_segment+0x22>
 80115b8:	4b1c      	ldr	r3, [pc, #112]	; (801162c <tcp_output_control_segment+0x88>)
 80115ba:	f240 7287 	movw	r2, #1927	; 0x787
 80115be:	491c      	ldr	r1, [pc, #112]	; (8011630 <tcp_output_control_segment+0x8c>)
 80115c0:	481c      	ldr	r0, [pc, #112]	; (8011634 <tcp_output_control_segment+0x90>)
 80115c2:	f002 ffdf 	bl	8014584 <iprintf>

  netif = tcp_route(pcb, src, dst);
 80115c6:	683a      	ldr	r2, [r7, #0]
 80115c8:	6879      	ldr	r1, [r7, #4]
 80115ca:	68f8      	ldr	r0, [r7, #12]
 80115cc:	f7fe ff40 	bl	8010450 <tcp_route>
 80115d0:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 80115d2:	693b      	ldr	r3, [r7, #16]
 80115d4:	2b00      	cmp	r3, #0
 80115d6:	d102      	bne.n	80115de <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 80115d8:	23fc      	movs	r3, #252	; 0xfc
 80115da:	75fb      	strb	r3, [r7, #23]
 80115dc:	e01c      	b.n	8011618 <tcp_output_control_segment+0x74>
=======
 8011582:	68bb      	ldr	r3, [r7, #8]
 8011584:	2b00      	cmp	r3, #0
 8011586:	d106      	bne.n	8011596 <tcp_output_control_segment+0x22>
 8011588:	4b1c      	ldr	r3, [pc, #112]	; (80115fc <tcp_output_control_segment+0x88>)
 801158a:	f240 7287 	movw	r2, #1927	; 0x787
 801158e:	491c      	ldr	r1, [pc, #112]	; (8011600 <tcp_output_control_segment+0x8c>)
 8011590:	481c      	ldr	r0, [pc, #112]	; (8011604 <tcp_output_control_segment+0x90>)
 8011592:	f002 ffdf 	bl	8014554 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8011596:	683a      	ldr	r2, [r7, #0]
 8011598:	6879      	ldr	r1, [r7, #4]
 801159a:	68f8      	ldr	r0, [r7, #12]
 801159c:	f7fe ff40 	bl	8010420 <tcp_route>
 80115a0:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 80115a2:	693b      	ldr	r3, [r7, #16]
 80115a4:	2b00      	cmp	r3, #0
 80115a6:	d102      	bne.n	80115ae <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 80115a8:	23fc      	movs	r3, #252	; 0xfc
 80115aa:	75fb      	strb	r3, [r7, #23]
 80115ac:	e01c      	b.n	80115e8 <tcp_output_control_segment+0x74>
>>>>>>> Stashed changes
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
<<<<<<< Updated upstream
 80115de:	68fb      	ldr	r3, [r7, #12]
 80115e0:	2b00      	cmp	r3, #0
 80115e2:	d006      	beq.n	80115f2 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 80115e4:	68fb      	ldr	r3, [r7, #12]
 80115e6:	7adb      	ldrb	r3, [r3, #11]
 80115e8:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 80115ea:	68fb      	ldr	r3, [r7, #12]
 80115ec:	7a9b      	ldrb	r3, [r3, #10]
 80115ee:	757b      	strb	r3, [r7, #21]
 80115f0:	e003      	b.n	80115fa <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 80115f2:	23ff      	movs	r3, #255	; 0xff
 80115f4:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 80115f6:	2300      	movs	r3, #0
 80115f8:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 80115fa:	7dba      	ldrb	r2, [r7, #22]
 80115fc:	693b      	ldr	r3, [r7, #16]
 80115fe:	9302      	str	r3, [sp, #8]
 8011600:	2306      	movs	r3, #6
 8011602:	9301      	str	r3, [sp, #4]
 8011604:	7d7b      	ldrb	r3, [r7, #21]
 8011606:	9300      	str	r3, [sp, #0]
 8011608:	4613      	mov	r3, r2
 801160a:	683a      	ldr	r2, [r7, #0]
 801160c:	6879      	ldr	r1, [r7, #4]
 801160e:	68b8      	ldr	r0, [r7, #8]
 8011610:	f001 ff2e 	bl	8013470 <ip4_output_if>
 8011614:	4603      	mov	r3, r0
 8011616:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8011618:	68b8      	ldr	r0, [r7, #8]
 801161a:	f7fa fde9 	bl	800c1f0 <pbuf_free>
  return err;
 801161e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011622:	4618      	mov	r0, r3
 8011624:	3718      	adds	r7, #24
 8011626:	46bd      	mov	sp, r7
 8011628:	bd80      	pop	{r7, pc}
 801162a:	bf00      	nop
 801162c:	08017010 	.word	0x08017010
 8011630:	08017768 	.word	0x08017768
 8011634:	08017064 	.word	0x08017064

08011638 <tcp_rst>:
=======
 80115ae:	68fb      	ldr	r3, [r7, #12]
 80115b0:	2b00      	cmp	r3, #0
 80115b2:	d006      	beq.n	80115c2 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 80115b4:	68fb      	ldr	r3, [r7, #12]
 80115b6:	7adb      	ldrb	r3, [r3, #11]
 80115b8:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 80115ba:	68fb      	ldr	r3, [r7, #12]
 80115bc:	7a9b      	ldrb	r3, [r3, #10]
 80115be:	757b      	strb	r3, [r7, #21]
 80115c0:	e003      	b.n	80115ca <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 80115c2:	23ff      	movs	r3, #255	; 0xff
 80115c4:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 80115c6:	2300      	movs	r3, #0
 80115c8:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 80115ca:	7dba      	ldrb	r2, [r7, #22]
 80115cc:	693b      	ldr	r3, [r7, #16]
 80115ce:	9302      	str	r3, [sp, #8]
 80115d0:	2306      	movs	r3, #6
 80115d2:	9301      	str	r3, [sp, #4]
 80115d4:	7d7b      	ldrb	r3, [r7, #21]
 80115d6:	9300      	str	r3, [sp, #0]
 80115d8:	4613      	mov	r3, r2
 80115da:	683a      	ldr	r2, [r7, #0]
 80115dc:	6879      	ldr	r1, [r7, #4]
 80115de:	68b8      	ldr	r0, [r7, #8]
 80115e0:	f001 ff2e 	bl	8013440 <ip4_output_if>
 80115e4:	4603      	mov	r3, r0
 80115e6:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 80115e8:	68b8      	ldr	r0, [r7, #8]
 80115ea:	f7fa fde9 	bl	800c1c0 <pbuf_free>
  return err;
 80115ee:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80115f2:	4618      	mov	r0, r3
 80115f4:	3718      	adds	r7, #24
 80115f6:	46bd      	mov	sp, r7
 80115f8:	bd80      	pop	{r7, pc}
 80115fa:	bf00      	nop
 80115fc:	08016ff4 	.word	0x08016ff4
 8011600:	0801774c 	.word	0x0801774c
 8011604:	08017048 	.word	0x08017048

08011608 <tcp_rst>:
>>>>>>> Stashed changes
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
<<<<<<< Updated upstream
 8011638:	b590      	push	{r4, r7, lr}
 801163a:	b08b      	sub	sp, #44	; 0x2c
 801163c:	af04      	add	r7, sp, #16
 801163e:	60f8      	str	r0, [r7, #12]
 8011640:	60b9      	str	r1, [r7, #8]
 8011642:	607a      	str	r2, [r7, #4]
 8011644:	603b      	str	r3, [r7, #0]
=======
 8011608:	b590      	push	{r4, r7, lr}
 801160a:	b08b      	sub	sp, #44	; 0x2c
 801160c:	af04      	add	r7, sp, #16
 801160e:	60f8      	str	r0, [r7, #12]
 8011610:	60b9      	str	r1, [r7, #8]
 8011612:	607a      	str	r2, [r7, #4]
 8011614:	603b      	str	r3, [r7, #0]
>>>>>>> Stashed changes
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
<<<<<<< Updated upstream
 8011646:	683b      	ldr	r3, [r7, #0]
 8011648:	2b00      	cmp	r3, #0
 801164a:	d106      	bne.n	801165a <tcp_rst+0x22>
 801164c:	4b1f      	ldr	r3, [pc, #124]	; (80116cc <tcp_rst+0x94>)
 801164e:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8011652:	491f      	ldr	r1, [pc, #124]	; (80116d0 <tcp_rst+0x98>)
 8011654:	481f      	ldr	r0, [pc, #124]	; (80116d4 <tcp_rst+0x9c>)
 8011656:	f002 ff95 	bl	8014584 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801165a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801165c:	2b00      	cmp	r3, #0
 801165e:	d106      	bne.n	801166e <tcp_rst+0x36>
 8011660:	4b1a      	ldr	r3, [pc, #104]	; (80116cc <tcp_rst+0x94>)
 8011662:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8011666:	491c      	ldr	r1, [pc, #112]	; (80116d8 <tcp_rst+0xa0>)
 8011668:	481a      	ldr	r0, [pc, #104]	; (80116d4 <tcp_rst+0x9c>)
 801166a:	f002 ff8b 	bl	8014584 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801166e:	2300      	movs	r3, #0
 8011670:	75fb      	strb	r3, [r7, #23]
=======
 8011616:	683b      	ldr	r3, [r7, #0]
 8011618:	2b00      	cmp	r3, #0
 801161a:	d106      	bne.n	801162a <tcp_rst+0x22>
 801161c:	4b1f      	ldr	r3, [pc, #124]	; (801169c <tcp_rst+0x94>)
 801161e:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8011622:	491f      	ldr	r1, [pc, #124]	; (80116a0 <tcp_rst+0x98>)
 8011624:	481f      	ldr	r0, [pc, #124]	; (80116a4 <tcp_rst+0x9c>)
 8011626:	f002 ff95 	bl	8014554 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801162a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801162c:	2b00      	cmp	r3, #0
 801162e:	d106      	bne.n	801163e <tcp_rst+0x36>
 8011630:	4b1a      	ldr	r3, [pc, #104]	; (801169c <tcp_rst+0x94>)
 8011632:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8011636:	491c      	ldr	r1, [pc, #112]	; (80116a8 <tcp_rst+0xa0>)
 8011638:	481a      	ldr	r0, [pc, #104]	; (80116a4 <tcp_rst+0x9c>)
 801163a:	f002 ff8b 	bl	8014554 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801163e:	2300      	movs	r3, #0
 8011640:	75fb      	strb	r3, [r7, #23]
>>>>>>> Stashed changes

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
<<<<<<< Updated upstream
 8011672:	f246 0308 	movw	r3, #24584	; 0x6008
 8011676:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8011678:	7dfb      	ldrb	r3, [r7, #23]
 801167a:	b29c      	uxth	r4, r3
 801167c:	68b8      	ldr	r0, [r7, #8]
 801167e:	f7f9 fb39 	bl	800acf4 <lwip_htonl>
 8011682:	4602      	mov	r2, r0
 8011684:	8abb      	ldrh	r3, [r7, #20]
 8011686:	9303      	str	r3, [sp, #12]
 8011688:	2314      	movs	r3, #20
 801168a:	9302      	str	r3, [sp, #8]
 801168c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801168e:	9301      	str	r3, [sp, #4]
 8011690:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8011692:	9300      	str	r3, [sp, #0]
 8011694:	4613      	mov	r3, r2
 8011696:	2200      	movs	r2, #0
 8011698:	4621      	mov	r1, r4
 801169a:	6878      	ldr	r0, [r7, #4]
 801169c:	f7ff fe92 	bl	80113c4 <tcp_output_alloc_header_common>
 80116a0:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 80116a2:	693b      	ldr	r3, [r7, #16]
 80116a4:	2b00      	cmp	r3, #0
 80116a6:	d00c      	beq.n	80116c2 <tcp_rst+0x8a>
=======
 8011642:	f246 0308 	movw	r3, #24584	; 0x6008
 8011646:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8011648:	7dfb      	ldrb	r3, [r7, #23]
 801164a:	b29c      	uxth	r4, r3
 801164c:	68b8      	ldr	r0, [r7, #8]
 801164e:	f7f9 fb39 	bl	800acc4 <lwip_htonl>
 8011652:	4602      	mov	r2, r0
 8011654:	8abb      	ldrh	r3, [r7, #20]
 8011656:	9303      	str	r3, [sp, #12]
 8011658:	2314      	movs	r3, #20
 801165a:	9302      	str	r3, [sp, #8]
 801165c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801165e:	9301      	str	r3, [sp, #4]
 8011660:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8011662:	9300      	str	r3, [sp, #0]
 8011664:	4613      	mov	r3, r2
 8011666:	2200      	movs	r2, #0
 8011668:	4621      	mov	r1, r4
 801166a:	6878      	ldr	r0, [r7, #4]
 801166c:	f7ff fe92 	bl	8011394 <tcp_output_alloc_header_common>
 8011670:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8011672:	693b      	ldr	r3, [r7, #16]
 8011674:	2b00      	cmp	r3, #0
 8011676:	d00c      	beq.n	8011692 <tcp_rst+0x8a>
>>>>>>> Stashed changes
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
<<<<<<< Updated upstream
 80116a8:	7dfb      	ldrb	r3, [r7, #23]
 80116aa:	2200      	movs	r2, #0
 80116ac:	6939      	ldr	r1, [r7, #16]
 80116ae:	68f8      	ldr	r0, [r7, #12]
 80116b0:	f7ff ff38 	bl	8011524 <tcp_output_fill_options>
=======
 8011678:	7dfb      	ldrb	r3, [r7, #23]
 801167a:	2200      	movs	r2, #0
 801167c:	6939      	ldr	r1, [r7, #16]
 801167e:	68f8      	ldr	r0, [r7, #12]
 8011680:	f7ff ff38 	bl	80114f4 <tcp_output_fill_options>
>>>>>>> Stashed changes

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
<<<<<<< Updated upstream
 80116b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80116b6:	683a      	ldr	r2, [r7, #0]
 80116b8:	6939      	ldr	r1, [r7, #16]
 80116ba:	68f8      	ldr	r0, [r7, #12]
 80116bc:	f7ff ff72 	bl	80115a4 <tcp_output_control_segment>
 80116c0:	e000      	b.n	80116c4 <tcp_rst+0x8c>
    return;
 80116c2:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 80116c4:	371c      	adds	r7, #28
 80116c6:	46bd      	mov	sp, r7
 80116c8:	bd90      	pop	{r4, r7, pc}
 80116ca:	bf00      	nop
 80116cc:	08017010 	.word	0x08017010
 80116d0:	08017794 	.word	0x08017794
 80116d4:	08017064 	.word	0x08017064
 80116d8:	080177b0 	.word	0x080177b0

080116dc <tcp_send_empty_ack>:
=======
 8011684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011686:	683a      	ldr	r2, [r7, #0]
 8011688:	6939      	ldr	r1, [r7, #16]
 801168a:	68f8      	ldr	r0, [r7, #12]
 801168c:	f7ff ff72 	bl	8011574 <tcp_output_control_segment>
 8011690:	e000      	b.n	8011694 <tcp_rst+0x8c>
    return;
 8011692:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8011694:	371c      	adds	r7, #28
 8011696:	46bd      	mov	sp, r7
 8011698:	bd90      	pop	{r4, r7, pc}
 801169a:	bf00      	nop
 801169c:	08016ff4 	.word	0x08016ff4
 80116a0:	08017778 	.word	0x08017778
 80116a4:	08017048 	.word	0x08017048
 80116a8:	08017794 	.word	0x08017794

080116ac <tcp_send_empty_ack>:
>>>>>>> Stashed changes
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
<<<<<<< Updated upstream
 80116dc:	b590      	push	{r4, r7, lr}
 80116de:	b087      	sub	sp, #28
 80116e0:	af00      	add	r7, sp, #0
 80116e2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 80116e4:	2300      	movs	r3, #0
 80116e6:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 80116e8:	2300      	movs	r3, #0
 80116ea:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 80116ec:	687b      	ldr	r3, [r7, #4]
 80116ee:	2b00      	cmp	r3, #0
 80116f0:	d106      	bne.n	8011700 <tcp_send_empty_ack+0x24>
 80116f2:	4b28      	ldr	r3, [pc, #160]	; (8011794 <tcp_send_empty_ack+0xb8>)
 80116f4:	f240 72ea 	movw	r2, #2026	; 0x7ea
 80116f8:	4927      	ldr	r1, [pc, #156]	; (8011798 <tcp_send_empty_ack+0xbc>)
 80116fa:	4828      	ldr	r0, [pc, #160]	; (801179c <tcp_send_empty_ack+0xc0>)
 80116fc:	f002 ff42 	bl	8014584 <iprintf>
=======
 80116ac:	b590      	push	{r4, r7, lr}
 80116ae:	b087      	sub	sp, #28
 80116b0:	af00      	add	r7, sp, #0
 80116b2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 80116b4:	2300      	movs	r3, #0
 80116b6:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 80116b8:	2300      	movs	r3, #0
 80116ba:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 80116bc:	687b      	ldr	r3, [r7, #4]
 80116be:	2b00      	cmp	r3, #0
 80116c0:	d106      	bne.n	80116d0 <tcp_send_empty_ack+0x24>
 80116c2:	4b28      	ldr	r3, [pc, #160]	; (8011764 <tcp_send_empty_ack+0xb8>)
 80116c4:	f240 72ea 	movw	r2, #2026	; 0x7ea
 80116c8:	4927      	ldr	r1, [pc, #156]	; (8011768 <tcp_send_empty_ack+0xbc>)
 80116ca:	4828      	ldr	r0, [pc, #160]	; (801176c <tcp_send_empty_ack+0xc0>)
 80116cc:	f002 ff42 	bl	8014554 <iprintf>
>>>>>>> Stashed changes
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
<<<<<<< Updated upstream
 8011700:	7dfb      	ldrb	r3, [r7, #23]
 8011702:	009b      	lsls	r3, r3, #2
 8011704:	b2db      	uxtb	r3, r3
 8011706:	f003 0304 	and.w	r3, r3, #4
 801170a:	757b      	strb	r3, [r7, #21]
=======
 80116d0:	7dfb      	ldrb	r3, [r7, #23]
 80116d2:	009b      	lsls	r3, r3, #2
 80116d4:	b2db      	uxtb	r3, r3
 80116d6:	f003 0304 	and.w	r3, r3, #4
 80116da:	757b      	strb	r3, [r7, #21]
>>>>>>> Stashed changes
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
<<<<<<< Updated upstream
 801170c:	7d7b      	ldrb	r3, [r7, #21]
 801170e:	b29c      	uxth	r4, r3
 8011710:	687b      	ldr	r3, [r7, #4]
 8011712:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011714:	4618      	mov	r0, r3
 8011716:	f7f9 faed 	bl	800acf4 <lwip_htonl>
 801171a:	4603      	mov	r3, r0
 801171c:	2200      	movs	r2, #0
 801171e:	4621      	mov	r1, r4
 8011720:	6878      	ldr	r0, [r7, #4]
 8011722:	f7ff fec1 	bl	80114a8 <tcp_output_alloc_header>
 8011726:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011728:	693b      	ldr	r3, [r7, #16]
 801172a:	2b00      	cmp	r3, #0
 801172c:	d109      	bne.n	8011742 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801172e:	687b      	ldr	r3, [r7, #4]
 8011730:	8b5b      	ldrh	r3, [r3, #26]
 8011732:	f043 0303 	orr.w	r3, r3, #3
 8011736:	b29a      	uxth	r2, r3
 8011738:	687b      	ldr	r3, [r7, #4]
 801173a:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 801173c:	f06f 0301 	mvn.w	r3, #1
 8011740:	e023      	b.n	801178a <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8011742:	7dbb      	ldrb	r3, [r7, #22]
 8011744:	7dfa      	ldrb	r2, [r7, #23]
 8011746:	6939      	ldr	r1, [r7, #16]
 8011748:	6878      	ldr	r0, [r7, #4]
 801174a:	f7ff feeb 	bl	8011524 <tcp_output_fill_options>
=======
 80116dc:	7d7b      	ldrb	r3, [r7, #21]
 80116de:	b29c      	uxth	r4, r3
 80116e0:	687b      	ldr	r3, [r7, #4]
 80116e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80116e4:	4618      	mov	r0, r3
 80116e6:	f7f9 faed 	bl	800acc4 <lwip_htonl>
 80116ea:	4603      	mov	r3, r0
 80116ec:	2200      	movs	r2, #0
 80116ee:	4621      	mov	r1, r4
 80116f0:	6878      	ldr	r0, [r7, #4]
 80116f2:	f7ff fec1 	bl	8011478 <tcp_output_alloc_header>
 80116f6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80116f8:	693b      	ldr	r3, [r7, #16]
 80116fa:	2b00      	cmp	r3, #0
 80116fc:	d109      	bne.n	8011712 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80116fe:	687b      	ldr	r3, [r7, #4]
 8011700:	8b5b      	ldrh	r3, [r3, #26]
 8011702:	f043 0303 	orr.w	r3, r3, #3
 8011706:	b29a      	uxth	r2, r3
 8011708:	687b      	ldr	r3, [r7, #4]
 801170a:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 801170c:	f06f 0301 	mvn.w	r3, #1
 8011710:	e023      	b.n	801175a <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8011712:	7dbb      	ldrb	r3, [r7, #22]
 8011714:	7dfa      	ldrb	r2, [r7, #23]
 8011716:	6939      	ldr	r1, [r7, #16]
 8011718:	6878      	ldr	r0, [r7, #4]
 801171a:	f7ff feeb 	bl	80114f4 <tcp_output_fill_options>
>>>>>>> Stashed changes
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
<<<<<<< Updated upstream
 801174e:	687a      	ldr	r2, [r7, #4]
 8011750:	687b      	ldr	r3, [r7, #4]
 8011752:	3304      	adds	r3, #4
 8011754:	6939      	ldr	r1, [r7, #16]
 8011756:	6878      	ldr	r0, [r7, #4]
 8011758:	f7ff ff24 	bl	80115a4 <tcp_output_control_segment>
 801175c:	4603      	mov	r3, r0
 801175e:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8011760:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011764:	2b00      	cmp	r3, #0
 8011766:	d007      	beq.n	8011778 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011768:	687b      	ldr	r3, [r7, #4]
 801176a:	8b5b      	ldrh	r3, [r3, #26]
 801176c:	f043 0303 	orr.w	r3, r3, #3
 8011770:	b29a      	uxth	r2, r3
 8011772:	687b      	ldr	r3, [r7, #4]
 8011774:	835a      	strh	r2, [r3, #26]
 8011776:	e006      	b.n	8011786 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011778:	687b      	ldr	r3, [r7, #4]
 801177a:	8b5b      	ldrh	r3, [r3, #26]
 801177c:	f023 0303 	bic.w	r3, r3, #3
 8011780:	b29a      	uxth	r2, r3
 8011782:	687b      	ldr	r3, [r7, #4]
 8011784:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8011786:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801178a:	4618      	mov	r0, r3
 801178c:	371c      	adds	r7, #28
 801178e:	46bd      	mov	sp, r7
 8011790:	bd90      	pop	{r4, r7, pc}
 8011792:	bf00      	nop
 8011794:	08017010 	.word	0x08017010
 8011798:	080177cc 	.word	0x080177cc
 801179c:	08017064 	.word	0x08017064

080117a0 <tcp_keepalive>:
=======
 801171e:	687a      	ldr	r2, [r7, #4]
 8011720:	687b      	ldr	r3, [r7, #4]
 8011722:	3304      	adds	r3, #4
 8011724:	6939      	ldr	r1, [r7, #16]
 8011726:	6878      	ldr	r0, [r7, #4]
 8011728:	f7ff ff24 	bl	8011574 <tcp_output_control_segment>
 801172c:	4603      	mov	r3, r0
 801172e:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8011730:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011734:	2b00      	cmp	r3, #0
 8011736:	d007      	beq.n	8011748 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011738:	687b      	ldr	r3, [r7, #4]
 801173a:	8b5b      	ldrh	r3, [r3, #26]
 801173c:	f043 0303 	orr.w	r3, r3, #3
 8011740:	b29a      	uxth	r2, r3
 8011742:	687b      	ldr	r3, [r7, #4]
 8011744:	835a      	strh	r2, [r3, #26]
 8011746:	e006      	b.n	8011756 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011748:	687b      	ldr	r3, [r7, #4]
 801174a:	8b5b      	ldrh	r3, [r3, #26]
 801174c:	f023 0303 	bic.w	r3, r3, #3
 8011750:	b29a      	uxth	r2, r3
 8011752:	687b      	ldr	r3, [r7, #4]
 8011754:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8011756:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801175a:	4618      	mov	r0, r3
 801175c:	371c      	adds	r7, #28
 801175e:	46bd      	mov	sp, r7
 8011760:	bd90      	pop	{r4, r7, pc}
 8011762:	bf00      	nop
 8011764:	08016ff4 	.word	0x08016ff4
 8011768:	080177b0 	.word	0x080177b0
 801176c:	08017048 	.word	0x08017048

08011770 <tcp_keepalive>:
>>>>>>> Stashed changes
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
<<<<<<< Updated upstream
 80117a0:	b590      	push	{r4, r7, lr}
 80117a2:	b087      	sub	sp, #28
 80117a4:	af00      	add	r7, sp, #0
 80117a6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80117a8:	2300      	movs	r3, #0
 80117aa:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 80117ac:	687b      	ldr	r3, [r7, #4]
 80117ae:	2b00      	cmp	r3, #0
 80117b0:	d106      	bne.n	80117c0 <tcp_keepalive+0x20>
 80117b2:	4b18      	ldr	r3, [pc, #96]	; (8011814 <tcp_keepalive+0x74>)
 80117b4:	f640 0224 	movw	r2, #2084	; 0x824
 80117b8:	4917      	ldr	r1, [pc, #92]	; (8011818 <tcp_keepalive+0x78>)
 80117ba:	4818      	ldr	r0, [pc, #96]	; (801181c <tcp_keepalive+0x7c>)
 80117bc:	f002 fee2 	bl	8014584 <iprintf>
=======
 8011770:	b590      	push	{r4, r7, lr}
 8011772:	b087      	sub	sp, #28
 8011774:	af00      	add	r7, sp, #0
 8011776:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8011778:	2300      	movs	r3, #0
 801177a:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 801177c:	687b      	ldr	r3, [r7, #4]
 801177e:	2b00      	cmp	r3, #0
 8011780:	d106      	bne.n	8011790 <tcp_keepalive+0x20>
 8011782:	4b18      	ldr	r3, [pc, #96]	; (80117e4 <tcp_keepalive+0x74>)
 8011784:	f640 0224 	movw	r2, #2084	; 0x824
 8011788:	4917      	ldr	r1, [pc, #92]	; (80117e8 <tcp_keepalive+0x78>)
 801178a:	4818      	ldr	r0, [pc, #96]	; (80117ec <tcp_keepalive+0x7c>)
 801178c:	f002 fee2 	bl	8014554 <iprintf>
>>>>>>> Stashed changes
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
<<<<<<< Updated upstream
 80117c0:	7dfb      	ldrb	r3, [r7, #23]
 80117c2:	b29c      	uxth	r4, r3
 80117c4:	687b      	ldr	r3, [r7, #4]
 80117c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80117c8:	3b01      	subs	r3, #1
 80117ca:	4618      	mov	r0, r3
 80117cc:	f7f9 fa92 	bl	800acf4 <lwip_htonl>
 80117d0:	4603      	mov	r3, r0
 80117d2:	2200      	movs	r2, #0
 80117d4:	4621      	mov	r1, r4
 80117d6:	6878      	ldr	r0, [r7, #4]
 80117d8:	f7ff fe66 	bl	80114a8 <tcp_output_alloc_header>
 80117dc:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80117de:	693b      	ldr	r3, [r7, #16]
 80117e0:	2b00      	cmp	r3, #0
 80117e2:	d102      	bne.n	80117ea <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 80117e4:	f04f 33ff 	mov.w	r3, #4294967295
 80117e8:	e010      	b.n	801180c <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80117ea:	7dfb      	ldrb	r3, [r7, #23]
 80117ec:	2200      	movs	r2, #0
 80117ee:	6939      	ldr	r1, [r7, #16]
 80117f0:	6878      	ldr	r0, [r7, #4]
 80117f2:	f7ff fe97 	bl	8011524 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80117f6:	687a      	ldr	r2, [r7, #4]
 80117f8:	687b      	ldr	r3, [r7, #4]
 80117fa:	3304      	adds	r3, #4
 80117fc:	6939      	ldr	r1, [r7, #16]
 80117fe:	6878      	ldr	r0, [r7, #4]
 8011800:	f7ff fed0 	bl	80115a4 <tcp_output_control_segment>
 8011804:	4603      	mov	r3, r0
 8011806:	73fb      	strb	r3, [r7, #15]
=======
 8011790:	7dfb      	ldrb	r3, [r7, #23]
 8011792:	b29c      	uxth	r4, r3
 8011794:	687b      	ldr	r3, [r7, #4]
 8011796:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011798:	3b01      	subs	r3, #1
 801179a:	4618      	mov	r0, r3
 801179c:	f7f9 fa92 	bl	800acc4 <lwip_htonl>
 80117a0:	4603      	mov	r3, r0
 80117a2:	2200      	movs	r2, #0
 80117a4:	4621      	mov	r1, r4
 80117a6:	6878      	ldr	r0, [r7, #4]
 80117a8:	f7ff fe66 	bl	8011478 <tcp_output_alloc_header>
 80117ac:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80117ae:	693b      	ldr	r3, [r7, #16]
 80117b0:	2b00      	cmp	r3, #0
 80117b2:	d102      	bne.n	80117ba <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 80117b4:	f04f 33ff 	mov.w	r3, #4294967295
 80117b8:	e010      	b.n	80117dc <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80117ba:	7dfb      	ldrb	r3, [r7, #23]
 80117bc:	2200      	movs	r2, #0
 80117be:	6939      	ldr	r1, [r7, #16]
 80117c0:	6878      	ldr	r0, [r7, #4]
 80117c2:	f7ff fe97 	bl	80114f4 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80117c6:	687a      	ldr	r2, [r7, #4]
 80117c8:	687b      	ldr	r3, [r7, #4]
 80117ca:	3304      	adds	r3, #4
 80117cc:	6939      	ldr	r1, [r7, #16]
 80117ce:	6878      	ldr	r0, [r7, #4]
 80117d0:	f7ff fed0 	bl	8011574 <tcp_output_control_segment>
 80117d4:	4603      	mov	r3, r0
 80117d6:	73fb      	strb	r3, [r7, #15]
>>>>>>> Stashed changes

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
<<<<<<< Updated upstream
 8011808:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801180c:	4618      	mov	r0, r3
 801180e:	371c      	adds	r7, #28
 8011810:	46bd      	mov	sp, r7
 8011812:	bd90      	pop	{r4, r7, pc}
 8011814:	08017010 	.word	0x08017010
 8011818:	080177ec 	.word	0x080177ec
 801181c:	08017064 	.word	0x08017064

08011820 <tcp_zero_window_probe>:
=======
 80117d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80117dc:	4618      	mov	r0, r3
 80117de:	371c      	adds	r7, #28
 80117e0:	46bd      	mov	sp, r7
 80117e2:	bd90      	pop	{r4, r7, pc}
 80117e4:	08016ff4 	.word	0x08016ff4
 80117e8:	080177d0 	.word	0x080177d0
 80117ec:	08017048 	.word	0x08017048

080117f0 <tcp_zero_window_probe>:
>>>>>>> Stashed changes
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
<<<<<<< Updated upstream
 8011820:	b590      	push	{r4, r7, lr}
 8011822:	b08b      	sub	sp, #44	; 0x2c
 8011824:	af00      	add	r7, sp, #0
 8011826:	6078      	str	r0, [r7, #4]
=======
 80117f0:	b590      	push	{r4, r7, lr}
 80117f2:	b08b      	sub	sp, #44	; 0x2c
 80117f4:	af00      	add	r7, sp, #0
 80117f6:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
<<<<<<< Updated upstream
 8011828:	2300      	movs	r3, #0
 801182a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801182e:	687b      	ldr	r3, [r7, #4]
 8011830:	2b00      	cmp	r3, #0
 8011832:	d106      	bne.n	8011842 <tcp_zero_window_probe+0x22>
 8011834:	4b4c      	ldr	r3, [pc, #304]	; (8011968 <tcp_zero_window_probe+0x148>)
 8011836:	f640 024f 	movw	r2, #2127	; 0x84f
 801183a:	494c      	ldr	r1, [pc, #304]	; (801196c <tcp_zero_window_probe+0x14c>)
 801183c:	484c      	ldr	r0, [pc, #304]	; (8011970 <tcp_zero_window_probe+0x150>)
 801183e:	f002 fea1 	bl	8014584 <iprintf>
=======
 80117f8:	2300      	movs	r3, #0
 80117fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 80117fe:	687b      	ldr	r3, [r7, #4]
 8011800:	2b00      	cmp	r3, #0
 8011802:	d106      	bne.n	8011812 <tcp_zero_window_probe+0x22>
 8011804:	4b4c      	ldr	r3, [pc, #304]	; (8011938 <tcp_zero_window_probe+0x148>)
 8011806:	f640 024f 	movw	r2, #2127	; 0x84f
 801180a:	494c      	ldr	r1, [pc, #304]	; (801193c <tcp_zero_window_probe+0x14c>)
 801180c:	484c      	ldr	r0, [pc, #304]	; (8011940 <tcp_zero_window_probe+0x150>)
 801180e:	f002 fea1 	bl	8014554 <iprintf>
>>>>>>> Stashed changes
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
<<<<<<< Updated upstream
 8011842:	687b      	ldr	r3, [r7, #4]
 8011844:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011846:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8011848:	6a3b      	ldr	r3, [r7, #32]
 801184a:	2b00      	cmp	r3, #0
 801184c:	d101      	bne.n	8011852 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801184e:	2300      	movs	r3, #0
 8011850:	e086      	b.n	8011960 <tcp_zero_window_probe+0x140>
=======
 8011812:	687b      	ldr	r3, [r7, #4]
 8011814:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011816:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8011818:	6a3b      	ldr	r3, [r7, #32]
 801181a:	2b00      	cmp	r3, #0
 801181c:	d101      	bne.n	8011822 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801181e:	2300      	movs	r3, #0
 8011820:	e086      	b.n	8011930 <tcp_zero_window_probe+0x140>
>>>>>>> Stashed changes

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
<<<<<<< Updated upstream
 8011852:	687b      	ldr	r3, [r7, #4]
 8011854:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8011858:	2bff      	cmp	r3, #255	; 0xff
 801185a:	d007      	beq.n	801186c <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 801185c:	687b      	ldr	r3, [r7, #4]
 801185e:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8011862:	3301      	adds	r3, #1
 8011864:	b2da      	uxtb	r2, r3
 8011866:	687b      	ldr	r3, [r7, #4]
 8011868:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 801186c:	6a3b      	ldr	r3, [r7, #32]
 801186e:	68db      	ldr	r3, [r3, #12]
 8011870:	899b      	ldrh	r3, [r3, #12]
 8011872:	b29b      	uxth	r3, r3
 8011874:	4618      	mov	r0, r3
 8011876:	f7f9 fa28 	bl	800acca <lwip_htons>
 801187a:	4603      	mov	r3, r0
 801187c:	b2db      	uxtb	r3, r3
 801187e:	f003 0301 	and.w	r3, r3, #1
 8011882:	2b00      	cmp	r3, #0
 8011884:	d005      	beq.n	8011892 <tcp_zero_window_probe+0x72>
 8011886:	6a3b      	ldr	r3, [r7, #32]
 8011888:	891b      	ldrh	r3, [r3, #8]
 801188a:	2b00      	cmp	r3, #0
 801188c:	d101      	bne.n	8011892 <tcp_zero_window_probe+0x72>
 801188e:	2301      	movs	r3, #1
 8011890:	e000      	b.n	8011894 <tcp_zero_window_probe+0x74>
 8011892:	2300      	movs	r3, #0
 8011894:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8011896:	7ffb      	ldrb	r3, [r7, #31]
 8011898:	2b00      	cmp	r3, #0
 801189a:	bf0c      	ite	eq
 801189c:	2301      	moveq	r3, #1
 801189e:	2300      	movne	r3, #0
 80118a0:	b2db      	uxtb	r3, r3
 80118a2:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 80118a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80118a8:	b299      	uxth	r1, r3
 80118aa:	6a3b      	ldr	r3, [r7, #32]
 80118ac:	68db      	ldr	r3, [r3, #12]
 80118ae:	685b      	ldr	r3, [r3, #4]
 80118b0:	8bba      	ldrh	r2, [r7, #28]
 80118b2:	6878      	ldr	r0, [r7, #4]
 80118b4:	f7ff fdf8 	bl	80114a8 <tcp_output_alloc_header>
 80118b8:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 80118ba:	69bb      	ldr	r3, [r7, #24]
 80118bc:	2b00      	cmp	r3, #0
 80118be:	d102      	bne.n	80118c6 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 80118c0:	f04f 33ff 	mov.w	r3, #4294967295
 80118c4:	e04c      	b.n	8011960 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 80118c6:	69bb      	ldr	r3, [r7, #24]
 80118c8:	685b      	ldr	r3, [r3, #4]
 80118ca:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 80118cc:	7ffb      	ldrb	r3, [r7, #31]
 80118ce:	2b00      	cmp	r3, #0
 80118d0:	d011      	beq.n	80118f6 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 80118d2:	697b      	ldr	r3, [r7, #20]
 80118d4:	899b      	ldrh	r3, [r3, #12]
 80118d6:	b29b      	uxth	r3, r3
 80118d8:	b21b      	sxth	r3, r3
 80118da:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80118de:	b21c      	sxth	r4, r3
 80118e0:	2011      	movs	r0, #17
 80118e2:	f7f9 f9f2 	bl	800acca <lwip_htons>
 80118e6:	4603      	mov	r3, r0
 80118e8:	b21b      	sxth	r3, r3
 80118ea:	4323      	orrs	r3, r4
 80118ec:	b21b      	sxth	r3, r3
 80118ee:	b29a      	uxth	r2, r3
 80118f0:	697b      	ldr	r3, [r7, #20]
 80118f2:	819a      	strh	r2, [r3, #12]
 80118f4:	e010      	b.n	8011918 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 80118f6:	69bb      	ldr	r3, [r7, #24]
 80118f8:	685b      	ldr	r3, [r3, #4]
 80118fa:	3314      	adds	r3, #20
 80118fc:	613b      	str	r3, [r7, #16]
=======
 8011822:	687b      	ldr	r3, [r7, #4]
 8011824:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8011828:	2bff      	cmp	r3, #255	; 0xff
 801182a:	d007      	beq.n	801183c <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 801182c:	687b      	ldr	r3, [r7, #4]
 801182e:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8011832:	3301      	adds	r3, #1
 8011834:	b2da      	uxtb	r2, r3
 8011836:	687b      	ldr	r3, [r7, #4]
 8011838:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 801183c:	6a3b      	ldr	r3, [r7, #32]
 801183e:	68db      	ldr	r3, [r3, #12]
 8011840:	899b      	ldrh	r3, [r3, #12]
 8011842:	b29b      	uxth	r3, r3
 8011844:	4618      	mov	r0, r3
 8011846:	f7f9 fa28 	bl	800ac9a <lwip_htons>
 801184a:	4603      	mov	r3, r0
 801184c:	b2db      	uxtb	r3, r3
 801184e:	f003 0301 	and.w	r3, r3, #1
 8011852:	2b00      	cmp	r3, #0
 8011854:	d005      	beq.n	8011862 <tcp_zero_window_probe+0x72>
 8011856:	6a3b      	ldr	r3, [r7, #32]
 8011858:	891b      	ldrh	r3, [r3, #8]
 801185a:	2b00      	cmp	r3, #0
 801185c:	d101      	bne.n	8011862 <tcp_zero_window_probe+0x72>
 801185e:	2301      	movs	r3, #1
 8011860:	e000      	b.n	8011864 <tcp_zero_window_probe+0x74>
 8011862:	2300      	movs	r3, #0
 8011864:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8011866:	7ffb      	ldrb	r3, [r7, #31]
 8011868:	2b00      	cmp	r3, #0
 801186a:	bf0c      	ite	eq
 801186c:	2301      	moveq	r3, #1
 801186e:	2300      	movne	r3, #0
 8011870:	b2db      	uxtb	r3, r3
 8011872:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8011874:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011878:	b299      	uxth	r1, r3
 801187a:	6a3b      	ldr	r3, [r7, #32]
 801187c:	68db      	ldr	r3, [r3, #12]
 801187e:	685b      	ldr	r3, [r3, #4]
 8011880:	8bba      	ldrh	r2, [r7, #28]
 8011882:	6878      	ldr	r0, [r7, #4]
 8011884:	f7ff fdf8 	bl	8011478 <tcp_output_alloc_header>
 8011888:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801188a:	69bb      	ldr	r3, [r7, #24]
 801188c:	2b00      	cmp	r3, #0
 801188e:	d102      	bne.n	8011896 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8011890:	f04f 33ff 	mov.w	r3, #4294967295
 8011894:	e04c      	b.n	8011930 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8011896:	69bb      	ldr	r3, [r7, #24]
 8011898:	685b      	ldr	r3, [r3, #4]
 801189a:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 801189c:	7ffb      	ldrb	r3, [r7, #31]
 801189e:	2b00      	cmp	r3, #0
 80118a0:	d011      	beq.n	80118c6 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 80118a2:	697b      	ldr	r3, [r7, #20]
 80118a4:	899b      	ldrh	r3, [r3, #12]
 80118a6:	b29b      	uxth	r3, r3
 80118a8:	b21b      	sxth	r3, r3
 80118aa:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80118ae:	b21c      	sxth	r4, r3
 80118b0:	2011      	movs	r0, #17
 80118b2:	f7f9 f9f2 	bl	800ac9a <lwip_htons>
 80118b6:	4603      	mov	r3, r0
 80118b8:	b21b      	sxth	r3, r3
 80118ba:	4323      	orrs	r3, r4
 80118bc:	b21b      	sxth	r3, r3
 80118be:	b29a      	uxth	r2, r3
 80118c0:	697b      	ldr	r3, [r7, #20]
 80118c2:	819a      	strh	r2, [r3, #12]
 80118c4:	e010      	b.n	80118e8 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 80118c6:	69bb      	ldr	r3, [r7, #24]
 80118c8:	685b      	ldr	r3, [r3, #4]
 80118ca:	3314      	adds	r3, #20
 80118cc:	613b      	str	r3, [r7, #16]
>>>>>>> Stashed changes
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
<<<<<<< Updated upstream
 80118fe:	6a3b      	ldr	r3, [r7, #32]
 8011900:	6858      	ldr	r0, [r3, #4]
 8011902:	6a3b      	ldr	r3, [r7, #32]
 8011904:	685b      	ldr	r3, [r3, #4]
 8011906:	891a      	ldrh	r2, [r3, #8]
 8011908:	6a3b      	ldr	r3, [r7, #32]
 801190a:	891b      	ldrh	r3, [r3, #8]
 801190c:	1ad3      	subs	r3, r2, r3
 801190e:	b29b      	uxth	r3, r3
 8011910:	2201      	movs	r2, #1
 8011912:	6939      	ldr	r1, [r7, #16]
 8011914:	f7fa fe56 	bl	800c5c4 <pbuf_copy_partial>
=======
 80118ce:	6a3b      	ldr	r3, [r7, #32]
 80118d0:	6858      	ldr	r0, [r3, #4]
 80118d2:	6a3b      	ldr	r3, [r7, #32]
 80118d4:	685b      	ldr	r3, [r3, #4]
 80118d6:	891a      	ldrh	r2, [r3, #8]
 80118d8:	6a3b      	ldr	r3, [r7, #32]
 80118da:	891b      	ldrh	r3, [r3, #8]
 80118dc:	1ad3      	subs	r3, r2, r3
 80118de:	b29b      	uxth	r3, r3
 80118e0:	2201      	movs	r2, #1
 80118e2:	6939      	ldr	r1, [r7, #16]
 80118e4:	f7fa fe56 	bl	800c594 <pbuf_copy_partial>
>>>>>>> Stashed changes
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
<<<<<<< Updated upstream
 8011918:	6a3b      	ldr	r3, [r7, #32]
 801191a:	68db      	ldr	r3, [r3, #12]
 801191c:	685b      	ldr	r3, [r3, #4]
 801191e:	4618      	mov	r0, r3
 8011920:	f7f9 f9e8 	bl	800acf4 <lwip_htonl>
 8011924:	4603      	mov	r3, r0
 8011926:	3301      	adds	r3, #1
 8011928:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801192a:	687b      	ldr	r3, [r7, #4]
 801192c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801192e:	68fb      	ldr	r3, [r7, #12]
 8011930:	1ad3      	subs	r3, r2, r3
 8011932:	2b00      	cmp	r3, #0
 8011934:	da02      	bge.n	801193c <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8011936:	687b      	ldr	r3, [r7, #4]
 8011938:	68fa      	ldr	r2, [r7, #12]
 801193a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801193c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011940:	2200      	movs	r2, #0
 8011942:	69b9      	ldr	r1, [r7, #24]
 8011944:	6878      	ldr	r0, [r7, #4]
 8011946:	f7ff fded 	bl	8011524 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801194a:	687a      	ldr	r2, [r7, #4]
 801194c:	687b      	ldr	r3, [r7, #4]
 801194e:	3304      	adds	r3, #4
 8011950:	69b9      	ldr	r1, [r7, #24]
 8011952:	6878      	ldr	r0, [r7, #4]
 8011954:	f7ff fe26 	bl	80115a4 <tcp_output_control_segment>
 8011958:	4603      	mov	r3, r0
 801195a:	72fb      	strb	r3, [r7, #11]
=======
 80118e8:	6a3b      	ldr	r3, [r7, #32]
 80118ea:	68db      	ldr	r3, [r3, #12]
 80118ec:	685b      	ldr	r3, [r3, #4]
 80118ee:	4618      	mov	r0, r3
 80118f0:	f7f9 f9e8 	bl	800acc4 <lwip_htonl>
 80118f4:	4603      	mov	r3, r0
 80118f6:	3301      	adds	r3, #1
 80118f8:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80118fa:	687b      	ldr	r3, [r7, #4]
 80118fc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80118fe:	68fb      	ldr	r3, [r7, #12]
 8011900:	1ad3      	subs	r3, r2, r3
 8011902:	2b00      	cmp	r3, #0
 8011904:	da02      	bge.n	801190c <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8011906:	687b      	ldr	r3, [r7, #4]
 8011908:	68fa      	ldr	r2, [r7, #12]
 801190a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801190c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011910:	2200      	movs	r2, #0
 8011912:	69b9      	ldr	r1, [r7, #24]
 8011914:	6878      	ldr	r0, [r7, #4]
 8011916:	f7ff fded 	bl	80114f4 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801191a:	687a      	ldr	r2, [r7, #4]
 801191c:	687b      	ldr	r3, [r7, #4]
 801191e:	3304      	adds	r3, #4
 8011920:	69b9      	ldr	r1, [r7, #24]
 8011922:	6878      	ldr	r0, [r7, #4]
 8011924:	f7ff fe26 	bl	8011574 <tcp_output_control_segment>
 8011928:	4603      	mov	r3, r0
 801192a:	72fb      	strb	r3, [r7, #11]
>>>>>>> Stashed changes

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
<<<<<<< Updated upstream
 801195c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8011960:	4618      	mov	r0, r3
 8011962:	372c      	adds	r7, #44	; 0x2c
 8011964:	46bd      	mov	sp, r7
 8011966:	bd90      	pop	{r4, r7, pc}
 8011968:	08017010 	.word	0x08017010
 801196c:	08017808 	.word	0x08017808
 8011970:	08017064 	.word	0x08017064

08011974 <tcpip_tcp_timer>:
=======
 801192c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8011930:	4618      	mov	r0, r3
 8011932:	372c      	adds	r7, #44	; 0x2c
 8011934:	46bd      	mov	sp, r7
 8011936:	bd90      	pop	{r4, r7, pc}
 8011938:	08016ff4 	.word	0x08016ff4
 801193c:	080177ec 	.word	0x080177ec
 8011940:	08017048 	.word	0x08017048

08011944 <tcpip_tcp_timer>:
>>>>>>> Stashed changes
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
<<<<<<< Updated upstream
 8011974:	b580      	push	{r7, lr}
 8011976:	b082      	sub	sp, #8
 8011978:	af00      	add	r7, sp, #0
 801197a:	6078      	str	r0, [r7, #4]
=======
 8011944:	b580      	push	{r7, lr}
 8011946:	b082      	sub	sp, #8
 8011948:	af00      	add	r7, sp, #0
 801194a:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
<<<<<<< Updated upstream
 801197c:	f7fa ff10 	bl	800c7a0 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8011980:	4b0a      	ldr	r3, [pc, #40]	; (80119ac <tcpip_tcp_timer+0x38>)
 8011982:	681b      	ldr	r3, [r3, #0]
 8011984:	2b00      	cmp	r3, #0
 8011986:	d103      	bne.n	8011990 <tcpip_tcp_timer+0x1c>
 8011988:	4b09      	ldr	r3, [pc, #36]	; (80119b0 <tcpip_tcp_timer+0x3c>)
 801198a:	681b      	ldr	r3, [r3, #0]
 801198c:	2b00      	cmp	r3, #0
 801198e:	d005      	beq.n	801199c <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8011990:	2200      	movs	r2, #0
 8011992:	4908      	ldr	r1, [pc, #32]	; (80119b4 <tcpip_tcp_timer+0x40>)
 8011994:	20fa      	movs	r0, #250	; 0xfa
 8011996:	f000 f8f3 	bl	8011b80 <sys_timeout>
 801199a:	e003      	b.n	80119a4 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 801199c:	4b06      	ldr	r3, [pc, #24]	; (80119b8 <tcpip_tcp_timer+0x44>)
 801199e:	2200      	movs	r2, #0
 80119a0:	601a      	str	r2, [r3, #0]
  }
}
 80119a2:	bf00      	nop
 80119a4:	bf00      	nop
 80119a6:	3708      	adds	r7, #8
 80119a8:	46bd      	mov	sp, r7
 80119aa:	bd80      	pop	{r7, pc}
 80119ac:	200072a0 	.word	0x200072a0
 80119b0:	200072b0 	.word	0x200072b0
 80119b4:	08011975 	.word	0x08011975
 80119b8:	20000124 	.word	0x20000124

080119bc <tcp_timer_needed>:
=======
 801194c:	f7fa ff10 	bl	800c770 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8011950:	4b0a      	ldr	r3, [pc, #40]	; (801197c <tcpip_tcp_timer+0x38>)
 8011952:	681b      	ldr	r3, [r3, #0]
 8011954:	2b00      	cmp	r3, #0
 8011956:	d103      	bne.n	8011960 <tcpip_tcp_timer+0x1c>
 8011958:	4b09      	ldr	r3, [pc, #36]	; (8011980 <tcpip_tcp_timer+0x3c>)
 801195a:	681b      	ldr	r3, [r3, #0]
 801195c:	2b00      	cmp	r3, #0
 801195e:	d005      	beq.n	801196c <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8011960:	2200      	movs	r2, #0
 8011962:	4908      	ldr	r1, [pc, #32]	; (8011984 <tcpip_tcp_timer+0x40>)
 8011964:	20fa      	movs	r0, #250	; 0xfa
 8011966:	f000 f8f3 	bl	8011b50 <sys_timeout>
 801196a:	e003      	b.n	8011974 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 801196c:	4b06      	ldr	r3, [pc, #24]	; (8011988 <tcpip_tcp_timer+0x44>)
 801196e:	2200      	movs	r2, #0
 8011970:	601a      	str	r2, [r3, #0]
  }
}
 8011972:	bf00      	nop
 8011974:	bf00      	nop
 8011976:	3708      	adds	r7, #8
 8011978:	46bd      	mov	sp, r7
 801197a:	bd80      	pop	{r7, pc}
 801197c:	200072a0 	.word	0x200072a0
 8011980:	200072b0 	.word	0x200072b0
 8011984:	08011945 	.word	0x08011945
 8011988:	20000124 	.word	0x20000124

0801198c <tcp_timer_needed>:
>>>>>>> Stashed changes
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
<<<<<<< Updated upstream
 80119bc:	b580      	push	{r7, lr}
 80119be:	af00      	add	r7, sp, #0
=======
 801198c:	b580      	push	{r7, lr}
 801198e:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
<<<<<<< Updated upstream
 80119c0:	4b0a      	ldr	r3, [pc, #40]	; (80119ec <tcp_timer_needed+0x30>)
 80119c2:	681b      	ldr	r3, [r3, #0]
 80119c4:	2b00      	cmp	r3, #0
 80119c6:	d10f      	bne.n	80119e8 <tcp_timer_needed+0x2c>
 80119c8:	4b09      	ldr	r3, [pc, #36]	; (80119f0 <tcp_timer_needed+0x34>)
 80119ca:	681b      	ldr	r3, [r3, #0]
 80119cc:	2b00      	cmp	r3, #0
 80119ce:	d103      	bne.n	80119d8 <tcp_timer_needed+0x1c>
 80119d0:	4b08      	ldr	r3, [pc, #32]	; (80119f4 <tcp_timer_needed+0x38>)
 80119d2:	681b      	ldr	r3, [r3, #0]
 80119d4:	2b00      	cmp	r3, #0
 80119d6:	d007      	beq.n	80119e8 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 80119d8:	4b04      	ldr	r3, [pc, #16]	; (80119ec <tcp_timer_needed+0x30>)
 80119da:	2201      	movs	r2, #1
 80119dc:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80119de:	2200      	movs	r2, #0
 80119e0:	4905      	ldr	r1, [pc, #20]	; (80119f8 <tcp_timer_needed+0x3c>)
 80119e2:	20fa      	movs	r0, #250	; 0xfa
 80119e4:	f000 f8cc 	bl	8011b80 <sys_timeout>
  }
}
 80119e8:	bf00      	nop
 80119ea:	bd80      	pop	{r7, pc}
 80119ec:	20000124 	.word	0x20000124
 80119f0:	200072a0 	.word	0x200072a0
 80119f4:	200072b0 	.word	0x200072b0
 80119f8:	08011975 	.word	0x08011975

080119fc <sys_timeout_abs>:
=======
 8011990:	4b0a      	ldr	r3, [pc, #40]	; (80119bc <tcp_timer_needed+0x30>)
 8011992:	681b      	ldr	r3, [r3, #0]
 8011994:	2b00      	cmp	r3, #0
 8011996:	d10f      	bne.n	80119b8 <tcp_timer_needed+0x2c>
 8011998:	4b09      	ldr	r3, [pc, #36]	; (80119c0 <tcp_timer_needed+0x34>)
 801199a:	681b      	ldr	r3, [r3, #0]
 801199c:	2b00      	cmp	r3, #0
 801199e:	d103      	bne.n	80119a8 <tcp_timer_needed+0x1c>
 80119a0:	4b08      	ldr	r3, [pc, #32]	; (80119c4 <tcp_timer_needed+0x38>)
 80119a2:	681b      	ldr	r3, [r3, #0]
 80119a4:	2b00      	cmp	r3, #0
 80119a6:	d007      	beq.n	80119b8 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 80119a8:	4b04      	ldr	r3, [pc, #16]	; (80119bc <tcp_timer_needed+0x30>)
 80119aa:	2201      	movs	r2, #1
 80119ac:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80119ae:	2200      	movs	r2, #0
 80119b0:	4905      	ldr	r1, [pc, #20]	; (80119c8 <tcp_timer_needed+0x3c>)
 80119b2:	20fa      	movs	r0, #250	; 0xfa
 80119b4:	f000 f8cc 	bl	8011b50 <sys_timeout>
  }
}
 80119b8:	bf00      	nop
 80119ba:	bd80      	pop	{r7, pc}
 80119bc:	20000124 	.word	0x20000124
 80119c0:	200072a0 	.word	0x200072a0
 80119c4:	200072b0 	.word	0x200072b0
 80119c8:	08011945 	.word	0x08011945

080119cc <sys_timeout_abs>:
>>>>>>> Stashed changes
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
<<<<<<< Updated upstream
 80119fc:	b580      	push	{r7, lr}
 80119fe:	b086      	sub	sp, #24
 8011a00:	af00      	add	r7, sp, #0
 8011a02:	60f8      	str	r0, [r7, #12]
 8011a04:	60b9      	str	r1, [r7, #8]
 8011a06:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8011a08:	2006      	movs	r0, #6
 8011a0a:	f7f9 fdb3 	bl	800b574 <memp_malloc>
 8011a0e:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8011a10:	693b      	ldr	r3, [r7, #16]
 8011a12:	2b00      	cmp	r3, #0
 8011a14:	d109      	bne.n	8011a2a <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8011a16:	693b      	ldr	r3, [r7, #16]
 8011a18:	2b00      	cmp	r3, #0
 8011a1a:	d151      	bne.n	8011ac0 <sys_timeout_abs+0xc4>
 8011a1c:	4b2a      	ldr	r3, [pc, #168]	; (8011ac8 <sys_timeout_abs+0xcc>)
 8011a1e:	22be      	movs	r2, #190	; 0xbe
 8011a20:	492a      	ldr	r1, [pc, #168]	; (8011acc <sys_timeout_abs+0xd0>)
 8011a22:	482b      	ldr	r0, [pc, #172]	; (8011ad0 <sys_timeout_abs+0xd4>)
 8011a24:	f002 fdae 	bl	8014584 <iprintf>
    return;
 8011a28:	e04a      	b.n	8011ac0 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8011a2a:	693b      	ldr	r3, [r7, #16]
 8011a2c:	2200      	movs	r2, #0
 8011a2e:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8011a30:	693b      	ldr	r3, [r7, #16]
 8011a32:	68ba      	ldr	r2, [r7, #8]
 8011a34:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8011a36:	693b      	ldr	r3, [r7, #16]
 8011a38:	687a      	ldr	r2, [r7, #4]
 8011a3a:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8011a3c:	693b      	ldr	r3, [r7, #16]
 8011a3e:	68fa      	ldr	r2, [r7, #12]
 8011a40:	605a      	str	r2, [r3, #4]
=======
 80119cc:	b580      	push	{r7, lr}
 80119ce:	b086      	sub	sp, #24
 80119d0:	af00      	add	r7, sp, #0
 80119d2:	60f8      	str	r0, [r7, #12]
 80119d4:	60b9      	str	r1, [r7, #8]
 80119d6:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 80119d8:	2006      	movs	r0, #6
 80119da:	f7f9 fdb3 	bl	800b544 <memp_malloc>
 80119de:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 80119e0:	693b      	ldr	r3, [r7, #16]
 80119e2:	2b00      	cmp	r3, #0
 80119e4:	d109      	bne.n	80119fa <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 80119e6:	693b      	ldr	r3, [r7, #16]
 80119e8:	2b00      	cmp	r3, #0
 80119ea:	d151      	bne.n	8011a90 <sys_timeout_abs+0xc4>
 80119ec:	4b2a      	ldr	r3, [pc, #168]	; (8011a98 <sys_timeout_abs+0xcc>)
 80119ee:	22be      	movs	r2, #190	; 0xbe
 80119f0:	492a      	ldr	r1, [pc, #168]	; (8011a9c <sys_timeout_abs+0xd0>)
 80119f2:	482b      	ldr	r0, [pc, #172]	; (8011aa0 <sys_timeout_abs+0xd4>)
 80119f4:	f002 fdae 	bl	8014554 <iprintf>
    return;
 80119f8:	e04a      	b.n	8011a90 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 80119fa:	693b      	ldr	r3, [r7, #16]
 80119fc:	2200      	movs	r2, #0
 80119fe:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8011a00:	693b      	ldr	r3, [r7, #16]
 8011a02:	68ba      	ldr	r2, [r7, #8]
 8011a04:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8011a06:	693b      	ldr	r3, [r7, #16]
 8011a08:	687a      	ldr	r2, [r7, #4]
 8011a0a:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8011a0c:	693b      	ldr	r3, [r7, #16]
 8011a0e:	68fa      	ldr	r2, [r7, #12]
 8011a10:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
<<<<<<< Updated upstream
 8011a42:	4b24      	ldr	r3, [pc, #144]	; (8011ad4 <sys_timeout_abs+0xd8>)
 8011a44:	681b      	ldr	r3, [r3, #0]
 8011a46:	2b00      	cmp	r3, #0
 8011a48:	d103      	bne.n	8011a52 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8011a4a:	4a22      	ldr	r2, [pc, #136]	; (8011ad4 <sys_timeout_abs+0xd8>)
 8011a4c:	693b      	ldr	r3, [r7, #16]
 8011a4e:	6013      	str	r3, [r2, #0]
    return;
 8011a50:	e037      	b.n	8011ac2 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8011a52:	693b      	ldr	r3, [r7, #16]
 8011a54:	685a      	ldr	r2, [r3, #4]
 8011a56:	4b1f      	ldr	r3, [pc, #124]	; (8011ad4 <sys_timeout_abs+0xd8>)
 8011a58:	681b      	ldr	r3, [r3, #0]
 8011a5a:	685b      	ldr	r3, [r3, #4]
 8011a5c:	1ad3      	subs	r3, r2, r3
 8011a5e:	0fdb      	lsrs	r3, r3, #31
 8011a60:	f003 0301 	and.w	r3, r3, #1
 8011a64:	b2db      	uxtb	r3, r3
 8011a66:	2b00      	cmp	r3, #0
 8011a68:	d007      	beq.n	8011a7a <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8011a6a:	4b1a      	ldr	r3, [pc, #104]	; (8011ad4 <sys_timeout_abs+0xd8>)
 8011a6c:	681a      	ldr	r2, [r3, #0]
 8011a6e:	693b      	ldr	r3, [r7, #16]
 8011a70:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8011a72:	4a18      	ldr	r2, [pc, #96]	; (8011ad4 <sys_timeout_abs+0xd8>)
 8011a74:	693b      	ldr	r3, [r7, #16]
 8011a76:	6013      	str	r3, [r2, #0]
 8011a78:	e023      	b.n	8011ac2 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8011a7a:	4b16      	ldr	r3, [pc, #88]	; (8011ad4 <sys_timeout_abs+0xd8>)
 8011a7c:	681b      	ldr	r3, [r3, #0]
 8011a7e:	617b      	str	r3, [r7, #20]
 8011a80:	e01a      	b.n	8011ab8 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8011a82:	697b      	ldr	r3, [r7, #20]
 8011a84:	681b      	ldr	r3, [r3, #0]
 8011a86:	2b00      	cmp	r3, #0
 8011a88:	d00b      	beq.n	8011aa2 <sys_timeout_abs+0xa6>
 8011a8a:	693b      	ldr	r3, [r7, #16]
 8011a8c:	685a      	ldr	r2, [r3, #4]
 8011a8e:	697b      	ldr	r3, [r7, #20]
 8011a90:	681b      	ldr	r3, [r3, #0]
 8011a92:	685b      	ldr	r3, [r3, #4]
 8011a94:	1ad3      	subs	r3, r2, r3
 8011a96:	0fdb      	lsrs	r3, r3, #31
 8011a98:	f003 0301 	and.w	r3, r3, #1
 8011a9c:	b2db      	uxtb	r3, r3
 8011a9e:	2b00      	cmp	r3, #0
 8011aa0:	d007      	beq.n	8011ab2 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8011aa2:	697b      	ldr	r3, [r7, #20]
 8011aa4:	681a      	ldr	r2, [r3, #0]
 8011aa6:	693b      	ldr	r3, [r7, #16]
 8011aa8:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8011aaa:	697b      	ldr	r3, [r7, #20]
 8011aac:	693a      	ldr	r2, [r7, #16]
 8011aae:	601a      	str	r2, [r3, #0]
        break;
 8011ab0:	e007      	b.n	8011ac2 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8011ab2:	697b      	ldr	r3, [r7, #20]
 8011ab4:	681b      	ldr	r3, [r3, #0]
 8011ab6:	617b      	str	r3, [r7, #20]
 8011ab8:	697b      	ldr	r3, [r7, #20]
 8011aba:	2b00      	cmp	r3, #0
 8011abc:	d1e1      	bne.n	8011a82 <sys_timeout_abs+0x86>
 8011abe:	e000      	b.n	8011ac2 <sys_timeout_abs+0xc6>
    return;
 8011ac0:	bf00      	nop
=======
 8011a12:	4b24      	ldr	r3, [pc, #144]	; (8011aa4 <sys_timeout_abs+0xd8>)
 8011a14:	681b      	ldr	r3, [r3, #0]
 8011a16:	2b00      	cmp	r3, #0
 8011a18:	d103      	bne.n	8011a22 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8011a1a:	4a22      	ldr	r2, [pc, #136]	; (8011aa4 <sys_timeout_abs+0xd8>)
 8011a1c:	693b      	ldr	r3, [r7, #16]
 8011a1e:	6013      	str	r3, [r2, #0]
    return;
 8011a20:	e037      	b.n	8011a92 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8011a22:	693b      	ldr	r3, [r7, #16]
 8011a24:	685a      	ldr	r2, [r3, #4]
 8011a26:	4b1f      	ldr	r3, [pc, #124]	; (8011aa4 <sys_timeout_abs+0xd8>)
 8011a28:	681b      	ldr	r3, [r3, #0]
 8011a2a:	685b      	ldr	r3, [r3, #4]
 8011a2c:	1ad3      	subs	r3, r2, r3
 8011a2e:	0fdb      	lsrs	r3, r3, #31
 8011a30:	f003 0301 	and.w	r3, r3, #1
 8011a34:	b2db      	uxtb	r3, r3
 8011a36:	2b00      	cmp	r3, #0
 8011a38:	d007      	beq.n	8011a4a <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8011a3a:	4b1a      	ldr	r3, [pc, #104]	; (8011aa4 <sys_timeout_abs+0xd8>)
 8011a3c:	681a      	ldr	r2, [r3, #0]
 8011a3e:	693b      	ldr	r3, [r7, #16]
 8011a40:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8011a42:	4a18      	ldr	r2, [pc, #96]	; (8011aa4 <sys_timeout_abs+0xd8>)
 8011a44:	693b      	ldr	r3, [r7, #16]
 8011a46:	6013      	str	r3, [r2, #0]
 8011a48:	e023      	b.n	8011a92 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8011a4a:	4b16      	ldr	r3, [pc, #88]	; (8011aa4 <sys_timeout_abs+0xd8>)
 8011a4c:	681b      	ldr	r3, [r3, #0]
 8011a4e:	617b      	str	r3, [r7, #20]
 8011a50:	e01a      	b.n	8011a88 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8011a52:	697b      	ldr	r3, [r7, #20]
 8011a54:	681b      	ldr	r3, [r3, #0]
 8011a56:	2b00      	cmp	r3, #0
 8011a58:	d00b      	beq.n	8011a72 <sys_timeout_abs+0xa6>
 8011a5a:	693b      	ldr	r3, [r7, #16]
 8011a5c:	685a      	ldr	r2, [r3, #4]
 8011a5e:	697b      	ldr	r3, [r7, #20]
 8011a60:	681b      	ldr	r3, [r3, #0]
 8011a62:	685b      	ldr	r3, [r3, #4]
 8011a64:	1ad3      	subs	r3, r2, r3
 8011a66:	0fdb      	lsrs	r3, r3, #31
 8011a68:	f003 0301 	and.w	r3, r3, #1
 8011a6c:	b2db      	uxtb	r3, r3
 8011a6e:	2b00      	cmp	r3, #0
 8011a70:	d007      	beq.n	8011a82 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8011a72:	697b      	ldr	r3, [r7, #20]
 8011a74:	681a      	ldr	r2, [r3, #0]
 8011a76:	693b      	ldr	r3, [r7, #16]
 8011a78:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8011a7a:	697b      	ldr	r3, [r7, #20]
 8011a7c:	693a      	ldr	r2, [r7, #16]
 8011a7e:	601a      	str	r2, [r3, #0]
        break;
 8011a80:	e007      	b.n	8011a92 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8011a82:	697b      	ldr	r3, [r7, #20]
 8011a84:	681b      	ldr	r3, [r3, #0]
 8011a86:	617b      	str	r3, [r7, #20]
 8011a88:	697b      	ldr	r3, [r7, #20]
 8011a8a:	2b00      	cmp	r3, #0
 8011a8c:	d1e1      	bne.n	8011a52 <sys_timeout_abs+0x86>
 8011a8e:	e000      	b.n	8011a92 <sys_timeout_abs+0xc6>
    return;
 8011a90:	bf00      	nop
>>>>>>> Stashed changes
      }
    }
  }
}
<<<<<<< Updated upstream
 8011ac2:	3718      	adds	r7, #24
 8011ac4:	46bd      	mov	sp, r7
 8011ac6:	bd80      	pop	{r7, pc}
 8011ac8:	0801782c 	.word	0x0801782c
 8011acc:	08017860 	.word	0x08017860
 8011ad0:	080178a0 	.word	0x080178a0
 8011ad4:	2000011c 	.word	0x2000011c

08011ad8 <lwip_cyclic_timer>:
=======
 8011a92:	3718      	adds	r7, #24
 8011a94:	46bd      	mov	sp, r7
 8011a96:	bd80      	pop	{r7, pc}
 8011a98:	08017810 	.word	0x08017810
 8011a9c:	08017844 	.word	0x08017844
 8011aa0:	08017884 	.word	0x08017884
 8011aa4:	2000011c 	.word	0x2000011c

08011aa8 <lwip_cyclic_timer>:
>>>>>>> Stashed changes
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
<<<<<<< Updated upstream
 8011ad8:	b580      	push	{r7, lr}
 8011ada:	b086      	sub	sp, #24
 8011adc:	af00      	add	r7, sp, #0
 8011ade:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8011ae0:	687b      	ldr	r3, [r7, #4]
 8011ae2:	617b      	str	r3, [r7, #20]
=======
 8011aa8:	b580      	push	{r7, lr}
 8011aaa:	b086      	sub	sp, #24
 8011aac:	af00      	add	r7, sp, #0
 8011aae:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8011ab0:	687b      	ldr	r3, [r7, #4]
 8011ab2:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
<<<<<<< Updated upstream
 8011ae4:	697b      	ldr	r3, [r7, #20]
 8011ae6:	685b      	ldr	r3, [r3, #4]
 8011ae8:	4798      	blx	r3

  now = sys_now();
 8011aea:	f7f9 f805 	bl	800aaf8 <sys_now>
 8011aee:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8011af0:	697b      	ldr	r3, [r7, #20]
 8011af2:	681a      	ldr	r2, [r3, #0]
 8011af4:	4b0f      	ldr	r3, [pc, #60]	; (8011b34 <lwip_cyclic_timer+0x5c>)
 8011af6:	681b      	ldr	r3, [r3, #0]
 8011af8:	4413      	add	r3, r2
 8011afa:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8011afc:	68fa      	ldr	r2, [r7, #12]
 8011afe:	693b      	ldr	r3, [r7, #16]
 8011b00:	1ad3      	subs	r3, r2, r3
 8011b02:	0fdb      	lsrs	r3, r3, #31
 8011b04:	f003 0301 	and.w	r3, r3, #1
 8011b08:	b2db      	uxtb	r3, r3
 8011b0a:	2b00      	cmp	r3, #0
 8011b0c:	d009      	beq.n	8011b22 <lwip_cyclic_timer+0x4a>
=======
 8011ab4:	697b      	ldr	r3, [r7, #20]
 8011ab6:	685b      	ldr	r3, [r3, #4]
 8011ab8:	4798      	blx	r3

  now = sys_now();
 8011aba:	f7f9 f805 	bl	800aac8 <sys_now>
 8011abe:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8011ac0:	697b      	ldr	r3, [r7, #20]
 8011ac2:	681a      	ldr	r2, [r3, #0]
 8011ac4:	4b0f      	ldr	r3, [pc, #60]	; (8011b04 <lwip_cyclic_timer+0x5c>)
 8011ac6:	681b      	ldr	r3, [r3, #0]
 8011ac8:	4413      	add	r3, r2
 8011aca:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8011acc:	68fa      	ldr	r2, [r7, #12]
 8011ace:	693b      	ldr	r3, [r7, #16]
 8011ad0:	1ad3      	subs	r3, r2, r3
 8011ad2:	0fdb      	lsrs	r3, r3, #31
 8011ad4:	f003 0301 	and.w	r3, r3, #1
 8011ad8:	b2db      	uxtb	r3, r3
 8011ada:	2b00      	cmp	r3, #0
 8011adc:	d009      	beq.n	8011af2 <lwip_cyclic_timer+0x4a>
>>>>>>> Stashed changes
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
<<<<<<< Updated upstream
 8011b0e:	697b      	ldr	r3, [r7, #20]
 8011b10:	681a      	ldr	r2, [r3, #0]
 8011b12:	693b      	ldr	r3, [r7, #16]
 8011b14:	4413      	add	r3, r2
 8011b16:	687a      	ldr	r2, [r7, #4]
 8011b18:	4907      	ldr	r1, [pc, #28]	; (8011b38 <lwip_cyclic_timer+0x60>)
 8011b1a:	4618      	mov	r0, r3
 8011b1c:	f7ff ff6e 	bl	80119fc <sys_timeout_abs>
=======
 8011ade:	697b      	ldr	r3, [r7, #20]
 8011ae0:	681a      	ldr	r2, [r3, #0]
 8011ae2:	693b      	ldr	r3, [r7, #16]
 8011ae4:	4413      	add	r3, r2
 8011ae6:	687a      	ldr	r2, [r7, #4]
 8011ae8:	4907      	ldr	r1, [pc, #28]	; (8011b08 <lwip_cyclic_timer+0x60>)
 8011aea:	4618      	mov	r0, r3
 8011aec:	f7ff ff6e 	bl	80119cc <sys_timeout_abs>
>>>>>>> Stashed changes
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
<<<<<<< Updated upstream
 8011b20:	e004      	b.n	8011b2c <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8011b22:	687a      	ldr	r2, [r7, #4]
 8011b24:	4904      	ldr	r1, [pc, #16]	; (8011b38 <lwip_cyclic_timer+0x60>)
 8011b26:	68f8      	ldr	r0, [r7, #12]
 8011b28:	f7ff ff68 	bl	80119fc <sys_timeout_abs>
}
 8011b2c:	bf00      	nop
 8011b2e:	3718      	adds	r7, #24
 8011b30:	46bd      	mov	sp, r7
 8011b32:	bd80      	pop	{r7, pc}
 8011b34:	20000120 	.word	0x20000120
 8011b38:	08011ad9 	.word	0x08011ad9

08011b3c <sys_timeouts_init>:
=======
 8011af0:	e004      	b.n	8011afc <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8011af2:	687a      	ldr	r2, [r7, #4]
 8011af4:	4904      	ldr	r1, [pc, #16]	; (8011b08 <lwip_cyclic_timer+0x60>)
 8011af6:	68f8      	ldr	r0, [r7, #12]
 8011af8:	f7ff ff68 	bl	80119cc <sys_timeout_abs>
}
 8011afc:	bf00      	nop
 8011afe:	3718      	adds	r7, #24
 8011b00:	46bd      	mov	sp, r7
 8011b02:	bd80      	pop	{r7, pc}
 8011b04:	20000120 	.word	0x20000120
 8011b08:	08011aa9 	.word	0x08011aa9

08011b0c <sys_timeouts_init>:
>>>>>>> Stashed changes

/** Initialize this module */
void sys_timeouts_init(void)
{
<<<<<<< Updated upstream
 8011b3c:	b580      	push	{r7, lr}
 8011b3e:	b082      	sub	sp, #8
 8011b40:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8011b42:	2301      	movs	r3, #1
 8011b44:	607b      	str	r3, [r7, #4]
 8011b46:	e00e      	b.n	8011b66 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8011b48:	4a0b      	ldr	r2, [pc, #44]	; (8011b78 <sys_timeouts_init+0x3c>)
 8011b4a:	687b      	ldr	r3, [r7, #4]
 8011b4c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8011b50:	687b      	ldr	r3, [r7, #4]
 8011b52:	00db      	lsls	r3, r3, #3
 8011b54:	4a08      	ldr	r2, [pc, #32]	; (8011b78 <sys_timeouts_init+0x3c>)
 8011b56:	4413      	add	r3, r2
 8011b58:	461a      	mov	r2, r3
 8011b5a:	4908      	ldr	r1, [pc, #32]	; (8011b7c <sys_timeouts_init+0x40>)
 8011b5c:	f000 f810 	bl	8011b80 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8011b60:	687b      	ldr	r3, [r7, #4]
 8011b62:	3301      	adds	r3, #1
 8011b64:	607b      	str	r3, [r7, #4]
 8011b66:	687b      	ldr	r3, [r7, #4]
 8011b68:	2b02      	cmp	r3, #2
 8011b6a:	d9ed      	bls.n	8011b48 <sys_timeouts_init+0xc>
  }
}
 8011b6c:	bf00      	nop
 8011b6e:	bf00      	nop
 8011b70:	3708      	adds	r7, #8
 8011b72:	46bd      	mov	sp, r7
 8011b74:	bd80      	pop	{r7, pc}
 8011b76:	bf00      	nop
 8011b78:	08018428 	.word	0x08018428
 8011b7c:	08011ad9 	.word	0x08011ad9

08011b80 <sys_timeout>:
=======
 8011b0c:	b580      	push	{r7, lr}
 8011b0e:	b082      	sub	sp, #8
 8011b10:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8011b12:	2301      	movs	r3, #1
 8011b14:	607b      	str	r3, [r7, #4]
 8011b16:	e00e      	b.n	8011b36 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8011b18:	4a0b      	ldr	r2, [pc, #44]	; (8011b48 <sys_timeouts_init+0x3c>)
 8011b1a:	687b      	ldr	r3, [r7, #4]
 8011b1c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8011b20:	687b      	ldr	r3, [r7, #4]
 8011b22:	00db      	lsls	r3, r3, #3
 8011b24:	4a08      	ldr	r2, [pc, #32]	; (8011b48 <sys_timeouts_init+0x3c>)
 8011b26:	4413      	add	r3, r2
 8011b28:	461a      	mov	r2, r3
 8011b2a:	4908      	ldr	r1, [pc, #32]	; (8011b4c <sys_timeouts_init+0x40>)
 8011b2c:	f000 f810 	bl	8011b50 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8011b30:	687b      	ldr	r3, [r7, #4]
 8011b32:	3301      	adds	r3, #1
 8011b34:	607b      	str	r3, [r7, #4]
 8011b36:	687b      	ldr	r3, [r7, #4]
 8011b38:	2b02      	cmp	r3, #2
 8011b3a:	d9ed      	bls.n	8011b18 <sys_timeouts_init+0xc>
  }
}
 8011b3c:	bf00      	nop
 8011b3e:	bf00      	nop
 8011b40:	3708      	adds	r7, #8
 8011b42:	46bd      	mov	sp, r7
 8011b44:	bd80      	pop	{r7, pc}
 8011b46:	bf00      	nop
 8011b48:	0801840c 	.word	0x0801840c
 8011b4c:	08011aa9 	.word	0x08011aa9

08011b50 <sys_timeout>:
>>>>>>> Stashed changes
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
<<<<<<< Updated upstream
 8011b80:	b580      	push	{r7, lr}
 8011b82:	b086      	sub	sp, #24
 8011b84:	af00      	add	r7, sp, #0
 8011b86:	60f8      	str	r0, [r7, #12]
 8011b88:	60b9      	str	r1, [r7, #8]
 8011b8a:	607a      	str	r2, [r7, #4]
=======
 8011b50:	b580      	push	{r7, lr}
 8011b52:	b086      	sub	sp, #24
 8011b54:	af00      	add	r7, sp, #0
 8011b56:	60f8      	str	r0, [r7, #12]
 8011b58:	60b9      	str	r1, [r7, #8]
 8011b5a:	607a      	str	r2, [r7, #4]
>>>>>>> Stashed changes
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
<<<<<<< Updated upstream
 8011b8c:	68fb      	ldr	r3, [r7, #12]
 8011b8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011b92:	d306      	bcc.n	8011ba2 <sys_timeout+0x22>
 8011b94:	4b0a      	ldr	r3, [pc, #40]	; (8011bc0 <sys_timeout+0x40>)
 8011b96:	f240 1229 	movw	r2, #297	; 0x129
 8011b9a:	490a      	ldr	r1, [pc, #40]	; (8011bc4 <sys_timeout+0x44>)
 8011b9c:	480a      	ldr	r0, [pc, #40]	; (8011bc8 <sys_timeout+0x48>)
 8011b9e:	f002 fcf1 	bl	8014584 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8011ba2:	f7f8 ffa9 	bl	800aaf8 <sys_now>
 8011ba6:	4602      	mov	r2, r0
 8011ba8:	68fb      	ldr	r3, [r7, #12]
 8011baa:	4413      	add	r3, r2
 8011bac:	617b      	str	r3, [r7, #20]
=======
 8011b5c:	68fb      	ldr	r3, [r7, #12]
 8011b5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011b62:	d306      	bcc.n	8011b72 <sys_timeout+0x22>
 8011b64:	4b0a      	ldr	r3, [pc, #40]	; (8011b90 <sys_timeout+0x40>)
 8011b66:	f240 1229 	movw	r2, #297	; 0x129
 8011b6a:	490a      	ldr	r1, [pc, #40]	; (8011b94 <sys_timeout+0x44>)
 8011b6c:	480a      	ldr	r0, [pc, #40]	; (8011b98 <sys_timeout+0x48>)
 8011b6e:	f002 fcf1 	bl	8014554 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8011b72:	f7f8 ffa9 	bl	800aac8 <sys_now>
 8011b76:	4602      	mov	r2, r0
 8011b78:	68fb      	ldr	r3, [r7, #12]
 8011b7a:	4413      	add	r3, r2
 8011b7c:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
<<<<<<< Updated upstream
 8011bae:	687a      	ldr	r2, [r7, #4]
 8011bb0:	68b9      	ldr	r1, [r7, #8]
 8011bb2:	6978      	ldr	r0, [r7, #20]
 8011bb4:	f7ff ff22 	bl	80119fc <sys_timeout_abs>
#endif
}
 8011bb8:	bf00      	nop
 8011bba:	3718      	adds	r7, #24
 8011bbc:	46bd      	mov	sp, r7
 8011bbe:	bd80      	pop	{r7, pc}
 8011bc0:	0801782c 	.word	0x0801782c
 8011bc4:	080178c8 	.word	0x080178c8
 8011bc8:	080178a0 	.word	0x080178a0

08011bcc <udp_init>:
=======
 8011b7e:	687a      	ldr	r2, [r7, #4]
 8011b80:	68b9      	ldr	r1, [r7, #8]
 8011b82:	6978      	ldr	r0, [r7, #20]
 8011b84:	f7ff ff22 	bl	80119cc <sys_timeout_abs>
#endif
}
 8011b88:	bf00      	nop
 8011b8a:	3718      	adds	r7, #24
 8011b8c:	46bd      	mov	sp, r7
 8011b8e:	bd80      	pop	{r7, pc}
 8011b90:	08017810 	.word	0x08017810
 8011b94:	080178ac 	.word	0x080178ac
 8011b98:	08017884 	.word	0x08017884

08011b9c <udp_init>:
>>>>>>> Stashed changes
/**
 * Initialize this module.
 */
void
udp_init(void)
{
<<<<<<< Updated upstream
 8011bcc:	b580      	push	{r7, lr}
 8011bce:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8011bd0:	f002 fcf0 	bl	80145b4 <rand>
 8011bd4:	4603      	mov	r3, r0
 8011bd6:	b29b      	uxth	r3, r3
 8011bd8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8011bdc:	b29b      	uxth	r3, r3
 8011bde:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8011be2:	b29a      	uxth	r2, r3
 8011be4:	4b01      	ldr	r3, [pc, #4]	; (8011bec <udp_init+0x20>)
 8011be6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8011be8:	bf00      	nop
 8011bea:	bd80      	pop	{r7, pc}
 8011bec:	20000010 	.word	0x20000010

08011bf0 <udp_input_local_match>:
=======
 8011b9c:	b580      	push	{r7, lr}
 8011b9e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8011ba0:	f002 fcf0 	bl	8014584 <rand>
 8011ba4:	4603      	mov	r3, r0
 8011ba6:	b29b      	uxth	r3, r3
 8011ba8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8011bac:	b29b      	uxth	r3, r3
 8011bae:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8011bb2:	b29a      	uxth	r2, r3
 8011bb4:	4b01      	ldr	r3, [pc, #4]	; (8011bbc <udp_init+0x20>)
 8011bb6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8011bb8:	bf00      	nop
 8011bba:	bd80      	pop	{r7, pc}
 8011bbc:	20000010 	.word	0x20000010

08011bc0 <udp_input_local_match>:
>>>>>>> Stashed changes
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
<<<<<<< Updated upstream
 8011bf0:	b580      	push	{r7, lr}
 8011bf2:	b084      	sub	sp, #16
 8011bf4:	af00      	add	r7, sp, #0
 8011bf6:	60f8      	str	r0, [r7, #12]
 8011bf8:	60b9      	str	r1, [r7, #8]
 8011bfa:	4613      	mov	r3, r2
 8011bfc:	71fb      	strb	r3, [r7, #7]
=======
 8011bc0:	b580      	push	{r7, lr}
 8011bc2:	b084      	sub	sp, #16
 8011bc4:	af00      	add	r7, sp, #0
 8011bc6:	60f8      	str	r0, [r7, #12]
 8011bc8:	60b9      	str	r1, [r7, #8]
 8011bca:	4613      	mov	r3, r2
 8011bcc:	71fb      	strb	r3, [r7, #7]
>>>>>>> Stashed changes
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
<<<<<<< Updated upstream
 8011bfe:	68fb      	ldr	r3, [r7, #12]
 8011c00:	2b00      	cmp	r3, #0
 8011c02:	d105      	bne.n	8011c10 <udp_input_local_match+0x20>
 8011c04:	4b27      	ldr	r3, [pc, #156]	; (8011ca4 <udp_input_local_match+0xb4>)
 8011c06:	2287      	movs	r2, #135	; 0x87
 8011c08:	4927      	ldr	r1, [pc, #156]	; (8011ca8 <udp_input_local_match+0xb8>)
 8011c0a:	4828      	ldr	r0, [pc, #160]	; (8011cac <udp_input_local_match+0xbc>)
 8011c0c:	f002 fcba 	bl	8014584 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8011c10:	68bb      	ldr	r3, [r7, #8]
 8011c12:	2b00      	cmp	r3, #0
 8011c14:	d105      	bne.n	8011c22 <udp_input_local_match+0x32>
 8011c16:	4b23      	ldr	r3, [pc, #140]	; (8011ca4 <udp_input_local_match+0xb4>)
 8011c18:	2288      	movs	r2, #136	; 0x88
 8011c1a:	4925      	ldr	r1, [pc, #148]	; (8011cb0 <udp_input_local_match+0xc0>)
 8011c1c:	4823      	ldr	r0, [pc, #140]	; (8011cac <udp_input_local_match+0xbc>)
 8011c1e:	f002 fcb1 	bl	8014584 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8011c22:	68fb      	ldr	r3, [r7, #12]
 8011c24:	7a1b      	ldrb	r3, [r3, #8]
 8011c26:	2b00      	cmp	r3, #0
 8011c28:	d00b      	beq.n	8011c42 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8011c2a:	68fb      	ldr	r3, [r7, #12]
 8011c2c:	7a1a      	ldrb	r2, [r3, #8]
 8011c2e:	4b21      	ldr	r3, [pc, #132]	; (8011cb4 <udp_input_local_match+0xc4>)
 8011c30:	685b      	ldr	r3, [r3, #4]
 8011c32:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011c36:	3301      	adds	r3, #1
 8011c38:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8011c3a:	429a      	cmp	r2, r3
 8011c3c:	d001      	beq.n	8011c42 <udp_input_local_match+0x52>
    return 0;
 8011c3e:	2300      	movs	r3, #0
 8011c40:	e02b      	b.n	8011c9a <udp_input_local_match+0xaa>
=======
 8011bce:	68fb      	ldr	r3, [r7, #12]
 8011bd0:	2b00      	cmp	r3, #0
 8011bd2:	d105      	bne.n	8011be0 <udp_input_local_match+0x20>
 8011bd4:	4b27      	ldr	r3, [pc, #156]	; (8011c74 <udp_input_local_match+0xb4>)
 8011bd6:	2287      	movs	r2, #135	; 0x87
 8011bd8:	4927      	ldr	r1, [pc, #156]	; (8011c78 <udp_input_local_match+0xb8>)
 8011bda:	4828      	ldr	r0, [pc, #160]	; (8011c7c <udp_input_local_match+0xbc>)
 8011bdc:	f002 fcba 	bl	8014554 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8011be0:	68bb      	ldr	r3, [r7, #8]
 8011be2:	2b00      	cmp	r3, #0
 8011be4:	d105      	bne.n	8011bf2 <udp_input_local_match+0x32>
 8011be6:	4b23      	ldr	r3, [pc, #140]	; (8011c74 <udp_input_local_match+0xb4>)
 8011be8:	2288      	movs	r2, #136	; 0x88
 8011bea:	4925      	ldr	r1, [pc, #148]	; (8011c80 <udp_input_local_match+0xc0>)
 8011bec:	4823      	ldr	r0, [pc, #140]	; (8011c7c <udp_input_local_match+0xbc>)
 8011bee:	f002 fcb1 	bl	8014554 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8011bf2:	68fb      	ldr	r3, [r7, #12]
 8011bf4:	7a1b      	ldrb	r3, [r3, #8]
 8011bf6:	2b00      	cmp	r3, #0
 8011bf8:	d00b      	beq.n	8011c12 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8011bfa:	68fb      	ldr	r3, [r7, #12]
 8011bfc:	7a1a      	ldrb	r2, [r3, #8]
 8011bfe:	4b21      	ldr	r3, [pc, #132]	; (8011c84 <udp_input_local_match+0xc4>)
 8011c00:	685b      	ldr	r3, [r3, #4]
 8011c02:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011c06:	3301      	adds	r3, #1
 8011c08:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8011c0a:	429a      	cmp	r2, r3
 8011c0c:	d001      	beq.n	8011c12 <udp_input_local_match+0x52>
    return 0;
 8011c0e:	2300      	movs	r3, #0
 8011c10:	e02b      	b.n	8011c6a <udp_input_local_match+0xaa>
>>>>>>> Stashed changes
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
<<<<<<< Updated upstream
 8011c42:	79fb      	ldrb	r3, [r7, #7]
 8011c44:	2b00      	cmp	r3, #0
 8011c46:	d018      	beq.n	8011c7a <udp_input_local_match+0x8a>
=======
 8011c12:	79fb      	ldrb	r3, [r7, #7]
 8011c14:	2b00      	cmp	r3, #0
 8011c16:	d018      	beq.n	8011c4a <udp_input_local_match+0x8a>
>>>>>>> Stashed changes
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
<<<<<<< Updated upstream
 8011c48:	68fb      	ldr	r3, [r7, #12]
 8011c4a:	2b00      	cmp	r3, #0
 8011c4c:	d013      	beq.n	8011c76 <udp_input_local_match+0x86>
 8011c4e:	68fb      	ldr	r3, [r7, #12]
 8011c50:	681b      	ldr	r3, [r3, #0]
 8011c52:	2b00      	cmp	r3, #0
 8011c54:	d00f      	beq.n	8011c76 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8011c56:	4b17      	ldr	r3, [pc, #92]	; (8011cb4 <udp_input_local_match+0xc4>)
 8011c58:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8011c5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011c5e:	d00a      	beq.n	8011c76 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8011c60:	68fb      	ldr	r3, [r7, #12]
 8011c62:	681a      	ldr	r2, [r3, #0]
 8011c64:	4b13      	ldr	r3, [pc, #76]	; (8011cb4 <udp_input_local_match+0xc4>)
 8011c66:	695b      	ldr	r3, [r3, #20]
 8011c68:	405a      	eors	r2, r3
 8011c6a:	68bb      	ldr	r3, [r7, #8]
 8011c6c:	3308      	adds	r3, #8
 8011c6e:	681b      	ldr	r3, [r3, #0]
 8011c70:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8011c72:	2b00      	cmp	r3, #0
 8011c74:	d110      	bne.n	8011c98 <udp_input_local_match+0xa8>
          return 1;
 8011c76:	2301      	movs	r3, #1
 8011c78:	e00f      	b.n	8011c9a <udp_input_local_match+0xaa>
=======
 8011c18:	68fb      	ldr	r3, [r7, #12]
 8011c1a:	2b00      	cmp	r3, #0
 8011c1c:	d013      	beq.n	8011c46 <udp_input_local_match+0x86>
 8011c1e:	68fb      	ldr	r3, [r7, #12]
 8011c20:	681b      	ldr	r3, [r3, #0]
 8011c22:	2b00      	cmp	r3, #0
 8011c24:	d00f      	beq.n	8011c46 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8011c26:	4b17      	ldr	r3, [pc, #92]	; (8011c84 <udp_input_local_match+0xc4>)
 8011c28:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8011c2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011c2e:	d00a      	beq.n	8011c46 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8011c30:	68fb      	ldr	r3, [r7, #12]
 8011c32:	681a      	ldr	r2, [r3, #0]
 8011c34:	4b13      	ldr	r3, [pc, #76]	; (8011c84 <udp_input_local_match+0xc4>)
 8011c36:	695b      	ldr	r3, [r3, #20]
 8011c38:	405a      	eors	r2, r3
 8011c3a:	68bb      	ldr	r3, [r7, #8]
 8011c3c:	3308      	adds	r3, #8
 8011c3e:	681b      	ldr	r3, [r3, #0]
 8011c40:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8011c42:	2b00      	cmp	r3, #0
 8011c44:	d110      	bne.n	8011c68 <udp_input_local_match+0xa8>
          return 1;
 8011c46:	2301      	movs	r3, #1
 8011c48:	e00f      	b.n	8011c6a <udp_input_local_match+0xaa>
>>>>>>> Stashed changes
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
<<<<<<< Updated upstream
 8011c7a:	68fb      	ldr	r3, [r7, #12]
 8011c7c:	2b00      	cmp	r3, #0
 8011c7e:	d009      	beq.n	8011c94 <udp_input_local_match+0xa4>
 8011c80:	68fb      	ldr	r3, [r7, #12]
 8011c82:	681b      	ldr	r3, [r3, #0]
 8011c84:	2b00      	cmp	r3, #0
 8011c86:	d005      	beq.n	8011c94 <udp_input_local_match+0xa4>
 8011c88:	68fb      	ldr	r3, [r7, #12]
 8011c8a:	681a      	ldr	r2, [r3, #0]
 8011c8c:	4b09      	ldr	r3, [pc, #36]	; (8011cb4 <udp_input_local_match+0xc4>)
 8011c8e:	695b      	ldr	r3, [r3, #20]
 8011c90:	429a      	cmp	r2, r3
 8011c92:	d101      	bne.n	8011c98 <udp_input_local_match+0xa8>
        return 1;
 8011c94:	2301      	movs	r3, #1
 8011c96:	e000      	b.n	8011c9a <udp_input_local_match+0xaa>
=======
 8011c4a:	68fb      	ldr	r3, [r7, #12]
 8011c4c:	2b00      	cmp	r3, #0
 8011c4e:	d009      	beq.n	8011c64 <udp_input_local_match+0xa4>
 8011c50:	68fb      	ldr	r3, [r7, #12]
 8011c52:	681b      	ldr	r3, [r3, #0]
 8011c54:	2b00      	cmp	r3, #0
 8011c56:	d005      	beq.n	8011c64 <udp_input_local_match+0xa4>
 8011c58:	68fb      	ldr	r3, [r7, #12]
 8011c5a:	681a      	ldr	r2, [r3, #0]
 8011c5c:	4b09      	ldr	r3, [pc, #36]	; (8011c84 <udp_input_local_match+0xc4>)
 8011c5e:	695b      	ldr	r3, [r3, #20]
 8011c60:	429a      	cmp	r2, r3
 8011c62:	d101      	bne.n	8011c68 <udp_input_local_match+0xa8>
        return 1;
 8011c64:	2301      	movs	r3, #1
 8011c66:	e000      	b.n	8011c6a <udp_input_local_match+0xaa>
>>>>>>> Stashed changes
      }
  }

  return 0;
<<<<<<< Updated upstream
 8011c98:	2300      	movs	r3, #0
}
 8011c9a:	4618      	mov	r0, r3
 8011c9c:	3710      	adds	r7, #16
 8011c9e:	46bd      	mov	sp, r7
 8011ca0:	bd80      	pop	{r7, pc}
 8011ca2:	bf00      	nop
 8011ca4:	08017914 	.word	0x08017914
 8011ca8:	08017944 	.word	0x08017944
 8011cac:	08017968 	.word	0x08017968
 8011cb0:	08017990 	.word	0x08017990
 8011cb4:	20003d5c 	.word	0x20003d5c

08011cb8 <udp_input>:
=======
 8011c68:	2300      	movs	r3, #0
}
 8011c6a:	4618      	mov	r0, r3
 8011c6c:	3710      	adds	r7, #16
 8011c6e:	46bd      	mov	sp, r7
 8011c70:	bd80      	pop	{r7, pc}
 8011c72:	bf00      	nop
 8011c74:	080178f8 	.word	0x080178f8
 8011c78:	08017928 	.word	0x08017928
 8011c7c:	0801794c 	.word	0x0801794c
 8011c80:	08017974 	.word	0x08017974
 8011c84:	20003d5c 	.word	0x20003d5c

08011c88 <udp_input>:
>>>>>>> Stashed changes
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
<<<<<<< Updated upstream
 8011cb8:	b590      	push	{r4, r7, lr}
 8011cba:	b08d      	sub	sp, #52	; 0x34
 8011cbc:	af02      	add	r7, sp, #8
 8011cbe:	6078      	str	r0, [r7, #4]
 8011cc0:	6039      	str	r1, [r7, #0]
=======
 8011c88:	b590      	push	{r4, r7, lr}
 8011c8a:	b08d      	sub	sp, #52	; 0x34
 8011c8c:	af02      	add	r7, sp, #8
 8011c8e:	6078      	str	r0, [r7, #4]
 8011c90:	6039      	str	r1, [r7, #0]
>>>>>>> Stashed changes
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
<<<<<<< Updated upstream
 8011cc2:	2300      	movs	r3, #0
 8011cc4:	76fb      	strb	r3, [r7, #27]
=======
 8011c92:	2300      	movs	r3, #0
 8011c94:	76fb      	strb	r3, [r7, #27]
>>>>>>> Stashed changes

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
<<<<<<< Updated upstream
 8011cc6:	687b      	ldr	r3, [r7, #4]
 8011cc8:	2b00      	cmp	r3, #0
 8011cca:	d105      	bne.n	8011cd8 <udp_input+0x20>
 8011ccc:	4b7c      	ldr	r3, [pc, #496]	; (8011ec0 <udp_input+0x208>)
 8011cce:	22cf      	movs	r2, #207	; 0xcf
 8011cd0:	497c      	ldr	r1, [pc, #496]	; (8011ec4 <udp_input+0x20c>)
 8011cd2:	487d      	ldr	r0, [pc, #500]	; (8011ec8 <udp_input+0x210>)
 8011cd4:	f002 fc56 	bl	8014584 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8011cd8:	683b      	ldr	r3, [r7, #0]
 8011cda:	2b00      	cmp	r3, #0
 8011cdc:	d105      	bne.n	8011cea <udp_input+0x32>
 8011cde:	4b78      	ldr	r3, [pc, #480]	; (8011ec0 <udp_input+0x208>)
 8011ce0:	22d0      	movs	r2, #208	; 0xd0
 8011ce2:	497a      	ldr	r1, [pc, #488]	; (8011ecc <udp_input+0x214>)
 8011ce4:	4878      	ldr	r0, [pc, #480]	; (8011ec8 <udp_input+0x210>)
 8011ce6:	f002 fc4d 	bl	8014584 <iprintf>
=======
 8011c96:	687b      	ldr	r3, [r7, #4]
 8011c98:	2b00      	cmp	r3, #0
 8011c9a:	d105      	bne.n	8011ca8 <udp_input+0x20>
 8011c9c:	4b7c      	ldr	r3, [pc, #496]	; (8011e90 <udp_input+0x208>)
 8011c9e:	22cf      	movs	r2, #207	; 0xcf
 8011ca0:	497c      	ldr	r1, [pc, #496]	; (8011e94 <udp_input+0x20c>)
 8011ca2:	487d      	ldr	r0, [pc, #500]	; (8011e98 <udp_input+0x210>)
 8011ca4:	f002 fc56 	bl	8014554 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8011ca8:	683b      	ldr	r3, [r7, #0]
 8011caa:	2b00      	cmp	r3, #0
 8011cac:	d105      	bne.n	8011cba <udp_input+0x32>
 8011cae:	4b78      	ldr	r3, [pc, #480]	; (8011e90 <udp_input+0x208>)
 8011cb0:	22d0      	movs	r2, #208	; 0xd0
 8011cb2:	497a      	ldr	r1, [pc, #488]	; (8011e9c <udp_input+0x214>)
 8011cb4:	4878      	ldr	r0, [pc, #480]	; (8011e98 <udp_input+0x210>)
 8011cb6:	f002 fc4d 	bl	8014554 <iprintf>
>>>>>>> Stashed changes
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
<<<<<<< Updated upstream
 8011cea:	687b      	ldr	r3, [r7, #4]
 8011cec:	895b      	ldrh	r3, [r3, #10]
 8011cee:	2b07      	cmp	r3, #7
 8011cf0:	d803      	bhi.n	8011cfa <udp_input+0x42>
=======
 8011cba:	687b      	ldr	r3, [r7, #4]
 8011cbc:	895b      	ldrh	r3, [r3, #10]
 8011cbe:	2b07      	cmp	r3, #7
 8011cc0:	d803      	bhi.n	8011cca <udp_input+0x42>
>>>>>>> Stashed changes
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
<<<<<<< Updated upstream
 8011cf2:	6878      	ldr	r0, [r7, #4]
 8011cf4:	f7fa fa7c 	bl	800c1f0 <pbuf_free>
    goto end;
 8011cf8:	e0de      	b.n	8011eb8 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8011cfa:	687b      	ldr	r3, [r7, #4]
 8011cfc:	685b      	ldr	r3, [r3, #4]
 8011cfe:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8011d00:	4b73      	ldr	r3, [pc, #460]	; (8011ed0 <udp_input+0x218>)
 8011d02:	695b      	ldr	r3, [r3, #20]
 8011d04:	4a72      	ldr	r2, [pc, #456]	; (8011ed0 <udp_input+0x218>)
 8011d06:	6812      	ldr	r2, [r2, #0]
 8011d08:	4611      	mov	r1, r2
 8011d0a:	4618      	mov	r0, r3
 8011d0c:	f001 fc88 	bl	8013620 <ip4_addr_isbroadcast_u32>
 8011d10:	4603      	mov	r3, r0
 8011d12:	74fb      	strb	r3, [r7, #19]
=======
 8011cc2:	6878      	ldr	r0, [r7, #4]
 8011cc4:	f7fa fa7c 	bl	800c1c0 <pbuf_free>
    goto end;
 8011cc8:	e0de      	b.n	8011e88 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8011cca:	687b      	ldr	r3, [r7, #4]
 8011ccc:	685b      	ldr	r3, [r3, #4]
 8011cce:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8011cd0:	4b73      	ldr	r3, [pc, #460]	; (8011ea0 <udp_input+0x218>)
 8011cd2:	695b      	ldr	r3, [r3, #20]
 8011cd4:	4a72      	ldr	r2, [pc, #456]	; (8011ea0 <udp_input+0x218>)
 8011cd6:	6812      	ldr	r2, [r2, #0]
 8011cd8:	4611      	mov	r1, r2
 8011cda:	4618      	mov	r0, r3
 8011cdc:	f001 fc88 	bl	80135f0 <ip4_addr_isbroadcast_u32>
 8011ce0:	4603      	mov	r3, r0
 8011ce2:	74fb      	strb	r3, [r7, #19]
>>>>>>> Stashed changes

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
<<<<<<< Updated upstream
 8011d14:	697b      	ldr	r3, [r7, #20]
 8011d16:	881b      	ldrh	r3, [r3, #0]
 8011d18:	b29b      	uxth	r3, r3
 8011d1a:	4618      	mov	r0, r3
 8011d1c:	f7f8 ffd5 	bl	800acca <lwip_htons>
 8011d20:	4603      	mov	r3, r0
 8011d22:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8011d24:	697b      	ldr	r3, [r7, #20]
 8011d26:	885b      	ldrh	r3, [r3, #2]
 8011d28:	b29b      	uxth	r3, r3
 8011d2a:	4618      	mov	r0, r3
 8011d2c:	f7f8 ffcd 	bl	800acca <lwip_htons>
 8011d30:	4603      	mov	r3, r0
 8011d32:	81fb      	strh	r3, [r7, #14]
=======
 8011ce4:	697b      	ldr	r3, [r7, #20]
 8011ce6:	881b      	ldrh	r3, [r3, #0]
 8011ce8:	b29b      	uxth	r3, r3
 8011cea:	4618      	mov	r0, r3
 8011cec:	f7f8 ffd5 	bl	800ac9a <lwip_htons>
 8011cf0:	4603      	mov	r3, r0
 8011cf2:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8011cf4:	697b      	ldr	r3, [r7, #20]
 8011cf6:	885b      	ldrh	r3, [r3, #2]
 8011cf8:	b29b      	uxth	r3, r3
 8011cfa:	4618      	mov	r0, r3
 8011cfc:	f7f8 ffcd 	bl	800ac9a <lwip_htons>
 8011d00:	4603      	mov	r3, r0
 8011d02:	81fb      	strh	r3, [r7, #14]
>>>>>>> Stashed changes
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
<<<<<<< Updated upstream
 8011d34:	2300      	movs	r3, #0
 8011d36:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8011d38:	2300      	movs	r3, #0
 8011d3a:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8011d3c:	2300      	movs	r3, #0
 8011d3e:	61fb      	str	r3, [r7, #28]
=======
 8011d04:	2300      	movs	r3, #0
 8011d06:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8011d08:	2300      	movs	r3, #0
 8011d0a:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8011d0c:	2300      	movs	r3, #0
 8011d0e:	61fb      	str	r3, [r7, #28]
>>>>>>> Stashed changes
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
<<<<<<< Updated upstream
 8011d40:	4b64      	ldr	r3, [pc, #400]	; (8011ed4 <udp_input+0x21c>)
 8011d42:	681b      	ldr	r3, [r3, #0]
 8011d44:	627b      	str	r3, [r7, #36]	; 0x24
 8011d46:	e054      	b.n	8011df2 <udp_input+0x13a>
=======
 8011d10:	4b64      	ldr	r3, [pc, #400]	; (8011ea4 <udp_input+0x21c>)
 8011d12:	681b      	ldr	r3, [r3, #0]
 8011d14:	627b      	str	r3, [r7, #36]	; 0x24
 8011d16:	e054      	b.n	8011dc2 <udp_input+0x13a>
>>>>>>> Stashed changes
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
<<<<<<< Updated upstream
 8011d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d4a:	8a5b      	ldrh	r3, [r3, #18]
 8011d4c:	89fa      	ldrh	r2, [r7, #14]
 8011d4e:	429a      	cmp	r2, r3
 8011d50:	d14a      	bne.n	8011de8 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8011d52:	7cfb      	ldrb	r3, [r7, #19]
 8011d54:	461a      	mov	r2, r3
 8011d56:	6839      	ldr	r1, [r7, #0]
 8011d58:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011d5a:	f7ff ff49 	bl	8011bf0 <udp_input_local_match>
 8011d5e:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8011d60:	2b00      	cmp	r3, #0
 8011d62:	d041      	beq.n	8011de8 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8011d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d66:	7c1b      	ldrb	r3, [r3, #16]
 8011d68:	f003 0304 	and.w	r3, r3, #4
 8011d6c:	2b00      	cmp	r3, #0
 8011d6e:	d11d      	bne.n	8011dac <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8011d70:	69fb      	ldr	r3, [r7, #28]
 8011d72:	2b00      	cmp	r3, #0
 8011d74:	d102      	bne.n	8011d7c <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8011d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d78:	61fb      	str	r3, [r7, #28]
 8011d7a:	e017      	b.n	8011dac <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8011d7c:	7cfb      	ldrb	r3, [r7, #19]
 8011d7e:	2b00      	cmp	r3, #0
 8011d80:	d014      	beq.n	8011dac <udp_input+0xf4>
 8011d82:	4b53      	ldr	r3, [pc, #332]	; (8011ed0 <udp_input+0x218>)
 8011d84:	695b      	ldr	r3, [r3, #20]
 8011d86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011d8a:	d10f      	bne.n	8011dac <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8011d8c:	69fb      	ldr	r3, [r7, #28]
 8011d8e:	681a      	ldr	r2, [r3, #0]
 8011d90:	683b      	ldr	r3, [r7, #0]
 8011d92:	3304      	adds	r3, #4
 8011d94:	681b      	ldr	r3, [r3, #0]
 8011d96:	429a      	cmp	r2, r3
 8011d98:	d008      	beq.n	8011dac <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8011d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d9c:	681a      	ldr	r2, [r3, #0]
 8011d9e:	683b      	ldr	r3, [r7, #0]
 8011da0:	3304      	adds	r3, #4
 8011da2:	681b      	ldr	r3, [r3, #0]
 8011da4:	429a      	cmp	r2, r3
 8011da6:	d101      	bne.n	8011dac <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8011da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011daa:	61fb      	str	r3, [r7, #28]
=======
 8011d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d1a:	8a5b      	ldrh	r3, [r3, #18]
 8011d1c:	89fa      	ldrh	r2, [r7, #14]
 8011d1e:	429a      	cmp	r2, r3
 8011d20:	d14a      	bne.n	8011db8 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8011d22:	7cfb      	ldrb	r3, [r7, #19]
 8011d24:	461a      	mov	r2, r3
 8011d26:	6839      	ldr	r1, [r7, #0]
 8011d28:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011d2a:	f7ff ff49 	bl	8011bc0 <udp_input_local_match>
 8011d2e:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8011d30:	2b00      	cmp	r3, #0
 8011d32:	d041      	beq.n	8011db8 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8011d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d36:	7c1b      	ldrb	r3, [r3, #16]
 8011d38:	f003 0304 	and.w	r3, r3, #4
 8011d3c:	2b00      	cmp	r3, #0
 8011d3e:	d11d      	bne.n	8011d7c <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8011d40:	69fb      	ldr	r3, [r7, #28]
 8011d42:	2b00      	cmp	r3, #0
 8011d44:	d102      	bne.n	8011d4c <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8011d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d48:	61fb      	str	r3, [r7, #28]
 8011d4a:	e017      	b.n	8011d7c <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8011d4c:	7cfb      	ldrb	r3, [r7, #19]
 8011d4e:	2b00      	cmp	r3, #0
 8011d50:	d014      	beq.n	8011d7c <udp_input+0xf4>
 8011d52:	4b53      	ldr	r3, [pc, #332]	; (8011ea0 <udp_input+0x218>)
 8011d54:	695b      	ldr	r3, [r3, #20]
 8011d56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011d5a:	d10f      	bne.n	8011d7c <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8011d5c:	69fb      	ldr	r3, [r7, #28]
 8011d5e:	681a      	ldr	r2, [r3, #0]
 8011d60:	683b      	ldr	r3, [r7, #0]
 8011d62:	3304      	adds	r3, #4
 8011d64:	681b      	ldr	r3, [r3, #0]
 8011d66:	429a      	cmp	r2, r3
 8011d68:	d008      	beq.n	8011d7c <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8011d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d6c:	681a      	ldr	r2, [r3, #0]
 8011d6e:	683b      	ldr	r3, [r7, #0]
 8011d70:	3304      	adds	r3, #4
 8011d72:	681b      	ldr	r3, [r3, #0]
 8011d74:	429a      	cmp	r2, r3
 8011d76:	d101      	bne.n	8011d7c <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8011d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d7a:	61fb      	str	r3, [r7, #28]
>>>>>>> Stashed changes
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
<<<<<<< Updated upstream
 8011dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011dae:	8a9b      	ldrh	r3, [r3, #20]
 8011db0:	8a3a      	ldrh	r2, [r7, #16]
 8011db2:	429a      	cmp	r2, r3
 8011db4:	d118      	bne.n	8011de8 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8011db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011db8:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8011dba:	2b00      	cmp	r3, #0
 8011dbc:	d005      	beq.n	8011dca <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8011dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011dc0:	685a      	ldr	r2, [r3, #4]
 8011dc2:	4b43      	ldr	r3, [pc, #268]	; (8011ed0 <udp_input+0x218>)
 8011dc4:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8011dc6:	429a      	cmp	r2, r3
 8011dc8:	d10e      	bne.n	8011de8 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8011dca:	6a3b      	ldr	r3, [r7, #32]
 8011dcc:	2b00      	cmp	r3, #0
 8011dce:	d014      	beq.n	8011dfa <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8011dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011dd2:	68da      	ldr	r2, [r3, #12]
 8011dd4:	6a3b      	ldr	r3, [r7, #32]
 8011dd6:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8011dd8:	4b3e      	ldr	r3, [pc, #248]	; (8011ed4 <udp_input+0x21c>)
 8011dda:	681a      	ldr	r2, [r3, #0]
 8011ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011dde:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8011de0:	4a3c      	ldr	r2, [pc, #240]	; (8011ed4 <udp_input+0x21c>)
 8011de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011de4:	6013      	str	r3, [r2, #0]
=======
 8011d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d7e:	8a9b      	ldrh	r3, [r3, #20]
 8011d80:	8a3a      	ldrh	r2, [r7, #16]
 8011d82:	429a      	cmp	r2, r3
 8011d84:	d118      	bne.n	8011db8 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8011d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d88:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8011d8a:	2b00      	cmp	r3, #0
 8011d8c:	d005      	beq.n	8011d9a <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8011d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d90:	685a      	ldr	r2, [r3, #4]
 8011d92:	4b43      	ldr	r3, [pc, #268]	; (8011ea0 <udp_input+0x218>)
 8011d94:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8011d96:	429a      	cmp	r2, r3
 8011d98:	d10e      	bne.n	8011db8 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8011d9a:	6a3b      	ldr	r3, [r7, #32]
 8011d9c:	2b00      	cmp	r3, #0
 8011d9e:	d014      	beq.n	8011dca <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8011da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011da2:	68da      	ldr	r2, [r3, #12]
 8011da4:	6a3b      	ldr	r3, [r7, #32]
 8011da6:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8011da8:	4b3e      	ldr	r3, [pc, #248]	; (8011ea4 <udp_input+0x21c>)
 8011daa:	681a      	ldr	r2, [r3, #0]
 8011dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011dae:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8011db0:	4a3c      	ldr	r2, [pc, #240]	; (8011ea4 <udp_input+0x21c>)
 8011db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011db4:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
<<<<<<< Updated upstream
 8011de6:	e008      	b.n	8011dfa <udp_input+0x142>
=======
 8011db6:	e008      	b.n	8011dca <udp_input+0x142>
>>>>>>> Stashed changes
      }
    }

    prev = pcb;
<<<<<<< Updated upstream
 8011de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011dea:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8011dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011dee:	68db      	ldr	r3, [r3, #12]
 8011df0:	627b      	str	r3, [r7, #36]	; 0x24
 8011df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011df4:	2b00      	cmp	r3, #0
 8011df6:	d1a7      	bne.n	8011d48 <udp_input+0x90>
 8011df8:	e000      	b.n	8011dfc <udp_input+0x144>
        break;
 8011dfa:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8011dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011dfe:	2b00      	cmp	r3, #0
 8011e00:	d101      	bne.n	8011e06 <udp_input+0x14e>
    pcb = uncon_pcb;
 8011e02:	69fb      	ldr	r3, [r7, #28]
 8011e04:	627b      	str	r3, [r7, #36]	; 0x24
=======
 8011db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011dba:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8011dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011dbe:	68db      	ldr	r3, [r3, #12]
 8011dc0:	627b      	str	r3, [r7, #36]	; 0x24
 8011dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011dc4:	2b00      	cmp	r3, #0
 8011dc6:	d1a7      	bne.n	8011d18 <udp_input+0x90>
 8011dc8:	e000      	b.n	8011dcc <udp_input+0x144>
        break;
 8011dca:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8011dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011dce:	2b00      	cmp	r3, #0
 8011dd0:	d101      	bne.n	8011dd6 <udp_input+0x14e>
    pcb = uncon_pcb;
 8011dd2:	69fb      	ldr	r3, [r7, #28]
 8011dd4:	627b      	str	r3, [r7, #36]	; 0x24
>>>>>>> Stashed changes
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
<<<<<<< Updated upstream
 8011e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e08:	2b00      	cmp	r3, #0
 8011e0a:	d002      	beq.n	8011e12 <udp_input+0x15a>
    for_us = 1;
 8011e0c:	2301      	movs	r3, #1
 8011e0e:	76fb      	strb	r3, [r7, #27]
 8011e10:	e00a      	b.n	8011e28 <udp_input+0x170>
=======
 8011dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011dd8:	2b00      	cmp	r3, #0
 8011dda:	d002      	beq.n	8011de2 <udp_input+0x15a>
    for_us = 1;
 8011ddc:	2301      	movs	r3, #1
 8011dde:	76fb      	strb	r3, [r7, #27]
 8011de0:	e00a      	b.n	8011df8 <udp_input+0x170>
>>>>>>> Stashed changes
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
<<<<<<< Updated upstream
 8011e12:	683b      	ldr	r3, [r7, #0]
 8011e14:	3304      	adds	r3, #4
 8011e16:	681a      	ldr	r2, [r3, #0]
 8011e18:	4b2d      	ldr	r3, [pc, #180]	; (8011ed0 <udp_input+0x218>)
 8011e1a:	695b      	ldr	r3, [r3, #20]
 8011e1c:	429a      	cmp	r2, r3
 8011e1e:	bf0c      	ite	eq
 8011e20:	2301      	moveq	r3, #1
 8011e22:	2300      	movne	r3, #0
 8011e24:	b2db      	uxtb	r3, r3
 8011e26:	76fb      	strb	r3, [r7, #27]
=======
 8011de2:	683b      	ldr	r3, [r7, #0]
 8011de4:	3304      	adds	r3, #4
 8011de6:	681a      	ldr	r2, [r3, #0]
 8011de8:	4b2d      	ldr	r3, [pc, #180]	; (8011ea0 <udp_input+0x218>)
 8011dea:	695b      	ldr	r3, [r3, #20]
 8011dec:	429a      	cmp	r2, r3
 8011dee:	bf0c      	ite	eq
 8011df0:	2301      	moveq	r3, #1
 8011df2:	2300      	movne	r3, #0
 8011df4:	b2db      	uxtb	r3, r3
 8011df6:	76fb      	strb	r3, [r7, #27]
>>>>>>> Stashed changes
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
<<<<<<< Updated upstream
 8011e28:	7efb      	ldrb	r3, [r7, #27]
 8011e2a:	2b00      	cmp	r3, #0
 8011e2c:	d041      	beq.n	8011eb2 <udp_input+0x1fa>
=======
 8011df8:	7efb      	ldrb	r3, [r7, #27]
 8011dfa:	2b00      	cmp	r3, #0
 8011dfc:	d041      	beq.n	8011e82 <udp_input+0x1fa>
>>>>>>> Stashed changes
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
<<<<<<< Updated upstream
 8011e2e:	2108      	movs	r1, #8
 8011e30:	6878      	ldr	r0, [r7, #4]
 8011e32:	f7fa f957 	bl	800c0e4 <pbuf_remove_header>
 8011e36:	4603      	mov	r3, r0
 8011e38:	2b00      	cmp	r3, #0
 8011e3a:	d00a      	beq.n	8011e52 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8011e3c:	4b20      	ldr	r3, [pc, #128]	; (8011ec0 <udp_input+0x208>)
 8011e3e:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8011e42:	4925      	ldr	r1, [pc, #148]	; (8011ed8 <udp_input+0x220>)
 8011e44:	4820      	ldr	r0, [pc, #128]	; (8011ec8 <udp_input+0x210>)
 8011e46:	f002 fb9d 	bl	8014584 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8011e4a:	6878      	ldr	r0, [r7, #4]
 8011e4c:	f7fa f9d0 	bl	800c1f0 <pbuf_free>
      goto end;
 8011e50:	e032      	b.n	8011eb8 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8011e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e54:	2b00      	cmp	r3, #0
 8011e56:	d012      	beq.n	8011e7e <udp_input+0x1c6>
=======
 8011dfe:	2108      	movs	r1, #8
 8011e00:	6878      	ldr	r0, [r7, #4]
 8011e02:	f7fa f957 	bl	800c0b4 <pbuf_remove_header>
 8011e06:	4603      	mov	r3, r0
 8011e08:	2b00      	cmp	r3, #0
 8011e0a:	d00a      	beq.n	8011e22 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8011e0c:	4b20      	ldr	r3, [pc, #128]	; (8011e90 <udp_input+0x208>)
 8011e0e:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8011e12:	4925      	ldr	r1, [pc, #148]	; (8011ea8 <udp_input+0x220>)
 8011e14:	4820      	ldr	r0, [pc, #128]	; (8011e98 <udp_input+0x210>)
 8011e16:	f002 fb9d 	bl	8014554 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8011e1a:	6878      	ldr	r0, [r7, #4]
 8011e1c:	f7fa f9d0 	bl	800c1c0 <pbuf_free>
      goto end;
 8011e20:	e032      	b.n	8011e88 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8011e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e24:	2b00      	cmp	r3, #0
 8011e26:	d012      	beq.n	8011e4e <udp_input+0x1c6>
>>>>>>> Stashed changes
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
<<<<<<< Updated upstream
 8011e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e5a:	699b      	ldr	r3, [r3, #24]
 8011e5c:	2b00      	cmp	r3, #0
 8011e5e:	d00a      	beq.n	8011e76 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8011e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e62:	699c      	ldr	r4, [r3, #24]
 8011e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e66:	69d8      	ldr	r0, [r3, #28]
 8011e68:	8a3b      	ldrh	r3, [r7, #16]
 8011e6a:	9300      	str	r3, [sp, #0]
 8011e6c:	4b1b      	ldr	r3, [pc, #108]	; (8011edc <udp_input+0x224>)
 8011e6e:	687a      	ldr	r2, [r7, #4]
 8011e70:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011e72:	47a0      	blx	r4
=======
 8011e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e2a:	699b      	ldr	r3, [r3, #24]
 8011e2c:	2b00      	cmp	r3, #0
 8011e2e:	d00a      	beq.n	8011e46 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8011e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e32:	699c      	ldr	r4, [r3, #24]
 8011e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e36:	69d8      	ldr	r0, [r3, #28]
 8011e38:	8a3b      	ldrh	r3, [r7, #16]
 8011e3a:	9300      	str	r3, [sp, #0]
 8011e3c:	4b1b      	ldr	r3, [pc, #108]	; (8011eac <udp_input+0x224>)
 8011e3e:	687a      	ldr	r2, [r7, #4]
 8011e40:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011e42:	47a0      	blx	r4
>>>>>>> Stashed changes
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
<<<<<<< Updated upstream
 8011e74:	e021      	b.n	8011eba <udp_input+0x202>
        pbuf_free(p);
 8011e76:	6878      	ldr	r0, [r7, #4]
 8011e78:	f7fa f9ba 	bl	800c1f0 <pbuf_free>
        goto end;
 8011e7c:	e01c      	b.n	8011eb8 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8011e7e:	7cfb      	ldrb	r3, [r7, #19]
 8011e80:	2b00      	cmp	r3, #0
 8011e82:	d112      	bne.n	8011eaa <udp_input+0x1f2>
 8011e84:	4b12      	ldr	r3, [pc, #72]	; (8011ed0 <udp_input+0x218>)
 8011e86:	695b      	ldr	r3, [r3, #20]
 8011e88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011e8c:	2be0      	cmp	r3, #224	; 0xe0
 8011e8e:	d00c      	beq.n	8011eaa <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8011e90:	4b0f      	ldr	r3, [pc, #60]	; (8011ed0 <udp_input+0x218>)
 8011e92:	899b      	ldrh	r3, [r3, #12]
 8011e94:	3308      	adds	r3, #8
 8011e96:	b29b      	uxth	r3, r3
 8011e98:	b21b      	sxth	r3, r3
 8011e9a:	4619      	mov	r1, r3
 8011e9c:	6878      	ldr	r0, [r7, #4]
 8011e9e:	f7fa f994 	bl	800c1ca <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8011ea2:	2103      	movs	r1, #3
 8011ea4:	6878      	ldr	r0, [r7, #4]
 8011ea6:	f001 f89b 	bl	8012fe0 <icmp_dest_unreach>
      pbuf_free(p);
 8011eaa:	6878      	ldr	r0, [r7, #4]
 8011eac:	f7fa f9a0 	bl	800c1f0 <pbuf_free>
  return;
 8011eb0:	e003      	b.n	8011eba <udp_input+0x202>
    pbuf_free(p);
 8011eb2:	6878      	ldr	r0, [r7, #4]
 8011eb4:	f7fa f99c 	bl	800c1f0 <pbuf_free>
  return;
 8011eb8:	bf00      	nop
=======
 8011e44:	e021      	b.n	8011e8a <udp_input+0x202>
        pbuf_free(p);
 8011e46:	6878      	ldr	r0, [r7, #4]
 8011e48:	f7fa f9ba 	bl	800c1c0 <pbuf_free>
        goto end;
 8011e4c:	e01c      	b.n	8011e88 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8011e4e:	7cfb      	ldrb	r3, [r7, #19]
 8011e50:	2b00      	cmp	r3, #0
 8011e52:	d112      	bne.n	8011e7a <udp_input+0x1f2>
 8011e54:	4b12      	ldr	r3, [pc, #72]	; (8011ea0 <udp_input+0x218>)
 8011e56:	695b      	ldr	r3, [r3, #20]
 8011e58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011e5c:	2be0      	cmp	r3, #224	; 0xe0
 8011e5e:	d00c      	beq.n	8011e7a <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8011e60:	4b0f      	ldr	r3, [pc, #60]	; (8011ea0 <udp_input+0x218>)
 8011e62:	899b      	ldrh	r3, [r3, #12]
 8011e64:	3308      	adds	r3, #8
 8011e66:	b29b      	uxth	r3, r3
 8011e68:	b21b      	sxth	r3, r3
 8011e6a:	4619      	mov	r1, r3
 8011e6c:	6878      	ldr	r0, [r7, #4]
 8011e6e:	f7fa f994 	bl	800c19a <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8011e72:	2103      	movs	r1, #3
 8011e74:	6878      	ldr	r0, [r7, #4]
 8011e76:	f001 f89b 	bl	8012fb0 <icmp_dest_unreach>
      pbuf_free(p);
 8011e7a:	6878      	ldr	r0, [r7, #4]
 8011e7c:	f7fa f9a0 	bl	800c1c0 <pbuf_free>
  return;
 8011e80:	e003      	b.n	8011e8a <udp_input+0x202>
    pbuf_free(p);
 8011e82:	6878      	ldr	r0, [r7, #4]
 8011e84:	f7fa f99c 	bl	800c1c0 <pbuf_free>
  return;
 8011e88:	bf00      	nop
>>>>>>> Stashed changes
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
<<<<<<< Updated upstream
 8011eba:	372c      	adds	r7, #44	; 0x2c
 8011ebc:	46bd      	mov	sp, r7
 8011ebe:	bd90      	pop	{r4, r7, pc}
 8011ec0:	08017914 	.word	0x08017914
 8011ec4:	080179b8 	.word	0x080179b8
 8011ec8:	08017968 	.word	0x08017968
 8011ecc:	080179d0 	.word	0x080179d0
 8011ed0:	20003d5c 	.word	0x20003d5c
 8011ed4:	200072b8 	.word	0x200072b8
 8011ed8:	080179ec 	.word	0x080179ec
 8011edc:	20003d6c 	.word	0x20003d6c

08011ee0 <udp_netif_ip_addr_changed>:
=======
 8011e8a:	372c      	adds	r7, #44	; 0x2c
 8011e8c:	46bd      	mov	sp, r7
 8011e8e:	bd90      	pop	{r4, r7, pc}
 8011e90:	080178f8 	.word	0x080178f8
 8011e94:	0801799c 	.word	0x0801799c
 8011e98:	0801794c 	.word	0x0801794c
 8011e9c:	080179b4 	.word	0x080179b4
 8011ea0:	20003d5c 	.word	0x20003d5c
 8011ea4:	200072b8 	.word	0x200072b8
 8011ea8:	080179d0 	.word	0x080179d0
 8011eac:	20003d6c 	.word	0x20003d6c

08011eb0 <udp_netif_ip_addr_changed>:
>>>>>>> Stashed changes
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
<<<<<<< Updated upstream
 8011ee0:	b480      	push	{r7}
 8011ee2:	b085      	sub	sp, #20
 8011ee4:	af00      	add	r7, sp, #0
 8011ee6:	6078      	str	r0, [r7, #4]
 8011ee8:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8011eea:	687b      	ldr	r3, [r7, #4]
 8011eec:	2b00      	cmp	r3, #0
 8011eee:	d01e      	beq.n	8011f2e <udp_netif_ip_addr_changed+0x4e>
 8011ef0:	687b      	ldr	r3, [r7, #4]
 8011ef2:	681b      	ldr	r3, [r3, #0]
 8011ef4:	2b00      	cmp	r3, #0
 8011ef6:	d01a      	beq.n	8011f2e <udp_netif_ip_addr_changed+0x4e>
 8011ef8:	683b      	ldr	r3, [r7, #0]
 8011efa:	2b00      	cmp	r3, #0
 8011efc:	d017      	beq.n	8011f2e <udp_netif_ip_addr_changed+0x4e>
 8011efe:	683b      	ldr	r3, [r7, #0]
 8011f00:	681b      	ldr	r3, [r3, #0]
 8011f02:	2b00      	cmp	r3, #0
 8011f04:	d013      	beq.n	8011f2e <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8011f06:	4b0d      	ldr	r3, [pc, #52]	; (8011f3c <udp_netif_ip_addr_changed+0x5c>)
 8011f08:	681b      	ldr	r3, [r3, #0]
 8011f0a:	60fb      	str	r3, [r7, #12]
 8011f0c:	e00c      	b.n	8011f28 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8011f0e:	68fb      	ldr	r3, [r7, #12]
 8011f10:	681a      	ldr	r2, [r3, #0]
 8011f12:	687b      	ldr	r3, [r7, #4]
 8011f14:	681b      	ldr	r3, [r3, #0]
 8011f16:	429a      	cmp	r2, r3
 8011f18:	d103      	bne.n	8011f22 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8011f1a:	683b      	ldr	r3, [r7, #0]
 8011f1c:	681a      	ldr	r2, [r3, #0]
 8011f1e:	68fb      	ldr	r3, [r7, #12]
 8011f20:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8011f22:	68fb      	ldr	r3, [r7, #12]
 8011f24:	68db      	ldr	r3, [r3, #12]
 8011f26:	60fb      	str	r3, [r7, #12]
 8011f28:	68fb      	ldr	r3, [r7, #12]
 8011f2a:	2b00      	cmp	r3, #0
 8011f2c:	d1ef      	bne.n	8011f0e <udp_netif_ip_addr_changed+0x2e>
=======
 8011eb0:	b480      	push	{r7}
 8011eb2:	b085      	sub	sp, #20
 8011eb4:	af00      	add	r7, sp, #0
 8011eb6:	6078      	str	r0, [r7, #4]
 8011eb8:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8011eba:	687b      	ldr	r3, [r7, #4]
 8011ebc:	2b00      	cmp	r3, #0
 8011ebe:	d01e      	beq.n	8011efe <udp_netif_ip_addr_changed+0x4e>
 8011ec0:	687b      	ldr	r3, [r7, #4]
 8011ec2:	681b      	ldr	r3, [r3, #0]
 8011ec4:	2b00      	cmp	r3, #0
 8011ec6:	d01a      	beq.n	8011efe <udp_netif_ip_addr_changed+0x4e>
 8011ec8:	683b      	ldr	r3, [r7, #0]
 8011eca:	2b00      	cmp	r3, #0
 8011ecc:	d017      	beq.n	8011efe <udp_netif_ip_addr_changed+0x4e>
 8011ece:	683b      	ldr	r3, [r7, #0]
 8011ed0:	681b      	ldr	r3, [r3, #0]
 8011ed2:	2b00      	cmp	r3, #0
 8011ed4:	d013      	beq.n	8011efe <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8011ed6:	4b0d      	ldr	r3, [pc, #52]	; (8011f0c <udp_netif_ip_addr_changed+0x5c>)
 8011ed8:	681b      	ldr	r3, [r3, #0]
 8011eda:	60fb      	str	r3, [r7, #12]
 8011edc:	e00c      	b.n	8011ef8 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8011ede:	68fb      	ldr	r3, [r7, #12]
 8011ee0:	681a      	ldr	r2, [r3, #0]
 8011ee2:	687b      	ldr	r3, [r7, #4]
 8011ee4:	681b      	ldr	r3, [r3, #0]
 8011ee6:	429a      	cmp	r2, r3
 8011ee8:	d103      	bne.n	8011ef2 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8011eea:	683b      	ldr	r3, [r7, #0]
 8011eec:	681a      	ldr	r2, [r3, #0]
 8011eee:	68fb      	ldr	r3, [r7, #12]
 8011ef0:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8011ef2:	68fb      	ldr	r3, [r7, #12]
 8011ef4:	68db      	ldr	r3, [r3, #12]
 8011ef6:	60fb      	str	r3, [r7, #12]
 8011ef8:	68fb      	ldr	r3, [r7, #12]
 8011efa:	2b00      	cmp	r3, #0
 8011efc:	d1ef      	bne.n	8011ede <udp_netif_ip_addr_changed+0x2e>
>>>>>>> Stashed changes
      }
    }
  }
}
<<<<<<< Updated upstream
 8011f2e:	bf00      	nop
 8011f30:	3714      	adds	r7, #20
 8011f32:	46bd      	mov	sp, r7
 8011f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f38:	4770      	bx	lr
 8011f3a:	bf00      	nop
 8011f3c:	200072b8 	.word	0x200072b8

08011f40 <etharp_free_entry>:
=======
 8011efe:	bf00      	nop
 8011f00:	3714      	adds	r7, #20
 8011f02:	46bd      	mov	sp, r7
 8011f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f08:	4770      	bx	lr
 8011f0a:	bf00      	nop
 8011f0c:	200072b8 	.word	0x200072b8

08011f10 <etharp_free_entry>:
>>>>>>> Stashed changes
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
<<<<<<< Updated upstream
 8011f40:	b580      	push	{r7, lr}
 8011f42:	b082      	sub	sp, #8
 8011f44:	af00      	add	r7, sp, #0
 8011f46:	6078      	str	r0, [r7, #4]
=======
 8011f10:	b580      	push	{r7, lr}
 8011f12:	b082      	sub	sp, #8
 8011f14:	af00      	add	r7, sp, #0
 8011f16:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
<<<<<<< Updated upstream
 8011f48:	4915      	ldr	r1, [pc, #84]	; (8011fa0 <etharp_free_entry+0x60>)
 8011f4a:	687a      	ldr	r2, [r7, #4]
 8011f4c:	4613      	mov	r3, r2
 8011f4e:	005b      	lsls	r3, r3, #1
 8011f50:	4413      	add	r3, r2
 8011f52:	00db      	lsls	r3, r3, #3
 8011f54:	440b      	add	r3, r1
 8011f56:	681b      	ldr	r3, [r3, #0]
 8011f58:	2b00      	cmp	r3, #0
 8011f5a:	d013      	beq.n	8011f84 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8011f5c:	4910      	ldr	r1, [pc, #64]	; (8011fa0 <etharp_free_entry+0x60>)
 8011f5e:	687a      	ldr	r2, [r7, #4]
 8011f60:	4613      	mov	r3, r2
 8011f62:	005b      	lsls	r3, r3, #1
 8011f64:	4413      	add	r3, r2
 8011f66:	00db      	lsls	r3, r3, #3
 8011f68:	440b      	add	r3, r1
 8011f6a:	681b      	ldr	r3, [r3, #0]
 8011f6c:	4618      	mov	r0, r3
 8011f6e:	f7fa f93f 	bl	800c1f0 <pbuf_free>
    arp_table[i].q = NULL;
 8011f72:	490b      	ldr	r1, [pc, #44]	; (8011fa0 <etharp_free_entry+0x60>)
 8011f74:	687a      	ldr	r2, [r7, #4]
 8011f76:	4613      	mov	r3, r2
 8011f78:	005b      	lsls	r3, r3, #1
 8011f7a:	4413      	add	r3, r2
 8011f7c:	00db      	lsls	r3, r3, #3
 8011f7e:	440b      	add	r3, r1
 8011f80:	2200      	movs	r2, #0
 8011f82:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8011f84:	4906      	ldr	r1, [pc, #24]	; (8011fa0 <etharp_free_entry+0x60>)
 8011f86:	687a      	ldr	r2, [r7, #4]
 8011f88:	4613      	mov	r3, r2
 8011f8a:	005b      	lsls	r3, r3, #1
 8011f8c:	4413      	add	r3, r2
 8011f8e:	00db      	lsls	r3, r3, #3
 8011f90:	440b      	add	r3, r1
 8011f92:	3314      	adds	r3, #20
 8011f94:	2200      	movs	r2, #0
 8011f96:	701a      	strb	r2, [r3, #0]
=======
 8011f18:	4915      	ldr	r1, [pc, #84]	; (8011f70 <etharp_free_entry+0x60>)
 8011f1a:	687a      	ldr	r2, [r7, #4]
 8011f1c:	4613      	mov	r3, r2
 8011f1e:	005b      	lsls	r3, r3, #1
 8011f20:	4413      	add	r3, r2
 8011f22:	00db      	lsls	r3, r3, #3
 8011f24:	440b      	add	r3, r1
 8011f26:	681b      	ldr	r3, [r3, #0]
 8011f28:	2b00      	cmp	r3, #0
 8011f2a:	d013      	beq.n	8011f54 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8011f2c:	4910      	ldr	r1, [pc, #64]	; (8011f70 <etharp_free_entry+0x60>)
 8011f2e:	687a      	ldr	r2, [r7, #4]
 8011f30:	4613      	mov	r3, r2
 8011f32:	005b      	lsls	r3, r3, #1
 8011f34:	4413      	add	r3, r2
 8011f36:	00db      	lsls	r3, r3, #3
 8011f38:	440b      	add	r3, r1
 8011f3a:	681b      	ldr	r3, [r3, #0]
 8011f3c:	4618      	mov	r0, r3
 8011f3e:	f7fa f93f 	bl	800c1c0 <pbuf_free>
    arp_table[i].q = NULL;
 8011f42:	490b      	ldr	r1, [pc, #44]	; (8011f70 <etharp_free_entry+0x60>)
 8011f44:	687a      	ldr	r2, [r7, #4]
 8011f46:	4613      	mov	r3, r2
 8011f48:	005b      	lsls	r3, r3, #1
 8011f4a:	4413      	add	r3, r2
 8011f4c:	00db      	lsls	r3, r3, #3
 8011f4e:	440b      	add	r3, r1
 8011f50:	2200      	movs	r2, #0
 8011f52:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8011f54:	4906      	ldr	r1, [pc, #24]	; (8011f70 <etharp_free_entry+0x60>)
 8011f56:	687a      	ldr	r2, [r7, #4]
 8011f58:	4613      	mov	r3, r2
 8011f5a:	005b      	lsls	r3, r3, #1
 8011f5c:	4413      	add	r3, r2
 8011f5e:	00db      	lsls	r3, r3, #3
 8011f60:	440b      	add	r3, r1
 8011f62:	3314      	adds	r3, #20
 8011f64:	2200      	movs	r2, #0
 8011f66:	701a      	strb	r2, [r3, #0]
>>>>>>> Stashed changes
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
<<<<<<< Updated upstream
 8011f98:	bf00      	nop
 8011f9a:	3708      	adds	r7, #8
 8011f9c:	46bd      	mov	sp, r7
 8011f9e:	bd80      	pop	{r7, pc}
 8011fa0:	20000128 	.word	0x20000128

08011fa4 <etharp_tmr>:
=======
 8011f68:	bf00      	nop
 8011f6a:	3708      	adds	r7, #8
 8011f6c:	46bd      	mov	sp, r7
 8011f6e:	bd80      	pop	{r7, pc}
 8011f70:	20000128 	.word	0x20000128

08011f74 <etharp_tmr>:
>>>>>>> Stashed changes
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
<<<<<<< Updated upstream
 8011fa4:	b580      	push	{r7, lr}
 8011fa6:	b082      	sub	sp, #8
 8011fa8:	af00      	add	r7, sp, #0
=======
 8011f74:	b580      	push	{r7, lr}
 8011f76:	b082      	sub	sp, #8
 8011f78:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
<<<<<<< Updated upstream
 8011faa:	2300      	movs	r3, #0
 8011fac:	607b      	str	r3, [r7, #4]
 8011fae:	e096      	b.n	80120de <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8011fb0:	494f      	ldr	r1, [pc, #316]	; (80120f0 <etharp_tmr+0x14c>)
 8011fb2:	687a      	ldr	r2, [r7, #4]
 8011fb4:	4613      	mov	r3, r2
 8011fb6:	005b      	lsls	r3, r3, #1
 8011fb8:	4413      	add	r3, r2
 8011fba:	00db      	lsls	r3, r3, #3
 8011fbc:	440b      	add	r3, r1
 8011fbe:	3314      	adds	r3, #20
 8011fc0:	781b      	ldrb	r3, [r3, #0]
 8011fc2:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8011fc4:	78fb      	ldrb	r3, [r7, #3]
 8011fc6:	2b00      	cmp	r3, #0
 8011fc8:	f000 8086 	beq.w	80120d8 <etharp_tmr+0x134>
=======
 8011f7a:	2300      	movs	r3, #0
 8011f7c:	607b      	str	r3, [r7, #4]
 8011f7e:	e096      	b.n	80120ae <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8011f80:	494f      	ldr	r1, [pc, #316]	; (80120c0 <etharp_tmr+0x14c>)
 8011f82:	687a      	ldr	r2, [r7, #4]
 8011f84:	4613      	mov	r3, r2
 8011f86:	005b      	lsls	r3, r3, #1
 8011f88:	4413      	add	r3, r2
 8011f8a:	00db      	lsls	r3, r3, #3
 8011f8c:	440b      	add	r3, r1
 8011f8e:	3314      	adds	r3, #20
 8011f90:	781b      	ldrb	r3, [r3, #0]
 8011f92:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8011f94:	78fb      	ldrb	r3, [r7, #3]
 8011f96:	2b00      	cmp	r3, #0
 8011f98:	f000 8086 	beq.w	80120a8 <etharp_tmr+0x134>
>>>>>>> Stashed changes
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
<<<<<<< Updated upstream
 8011fcc:	4948      	ldr	r1, [pc, #288]	; (80120f0 <etharp_tmr+0x14c>)
 8011fce:	687a      	ldr	r2, [r7, #4]
 8011fd0:	4613      	mov	r3, r2
 8011fd2:	005b      	lsls	r3, r3, #1
 8011fd4:	4413      	add	r3, r2
 8011fd6:	00db      	lsls	r3, r3, #3
 8011fd8:	440b      	add	r3, r1
 8011fda:	3312      	adds	r3, #18
 8011fdc:	881b      	ldrh	r3, [r3, #0]
 8011fde:	3301      	adds	r3, #1
 8011fe0:	b298      	uxth	r0, r3
 8011fe2:	4943      	ldr	r1, [pc, #268]	; (80120f0 <etharp_tmr+0x14c>)
 8011fe4:	687a      	ldr	r2, [r7, #4]
 8011fe6:	4613      	mov	r3, r2
 8011fe8:	005b      	lsls	r3, r3, #1
 8011fea:	4413      	add	r3, r2
 8011fec:	00db      	lsls	r3, r3, #3
 8011fee:	440b      	add	r3, r1
 8011ff0:	3312      	adds	r3, #18
 8011ff2:	4602      	mov	r2, r0
 8011ff4:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8011ff6:	493e      	ldr	r1, [pc, #248]	; (80120f0 <etharp_tmr+0x14c>)
 8011ff8:	687a      	ldr	r2, [r7, #4]
 8011ffa:	4613      	mov	r3, r2
 8011ffc:	005b      	lsls	r3, r3, #1
 8011ffe:	4413      	add	r3, r2
 8012000:	00db      	lsls	r3, r3, #3
 8012002:	440b      	add	r3, r1
 8012004:	3312      	adds	r3, #18
 8012006:	881b      	ldrh	r3, [r3, #0]
 8012008:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 801200c:	d215      	bcs.n	801203a <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801200e:	4938      	ldr	r1, [pc, #224]	; (80120f0 <etharp_tmr+0x14c>)
 8012010:	687a      	ldr	r2, [r7, #4]
 8012012:	4613      	mov	r3, r2
 8012014:	005b      	lsls	r3, r3, #1
 8012016:	4413      	add	r3, r2
 8012018:	00db      	lsls	r3, r3, #3
 801201a:	440b      	add	r3, r1
 801201c:	3314      	adds	r3, #20
 801201e:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8012020:	2b01      	cmp	r3, #1
 8012022:	d10e      	bne.n	8012042 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8012024:	4932      	ldr	r1, [pc, #200]	; (80120f0 <etharp_tmr+0x14c>)
 8012026:	687a      	ldr	r2, [r7, #4]
 8012028:	4613      	mov	r3, r2
 801202a:	005b      	lsls	r3, r3, #1
 801202c:	4413      	add	r3, r2
 801202e:	00db      	lsls	r3, r3, #3
 8012030:	440b      	add	r3, r1
 8012032:	3312      	adds	r3, #18
 8012034:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8012036:	2b04      	cmp	r3, #4
 8012038:	d903      	bls.n	8012042 <etharp_tmr+0x9e>
=======
 8011f9c:	4948      	ldr	r1, [pc, #288]	; (80120c0 <etharp_tmr+0x14c>)
 8011f9e:	687a      	ldr	r2, [r7, #4]
 8011fa0:	4613      	mov	r3, r2
 8011fa2:	005b      	lsls	r3, r3, #1
 8011fa4:	4413      	add	r3, r2
 8011fa6:	00db      	lsls	r3, r3, #3
 8011fa8:	440b      	add	r3, r1
 8011faa:	3312      	adds	r3, #18
 8011fac:	881b      	ldrh	r3, [r3, #0]
 8011fae:	3301      	adds	r3, #1
 8011fb0:	b298      	uxth	r0, r3
 8011fb2:	4943      	ldr	r1, [pc, #268]	; (80120c0 <etharp_tmr+0x14c>)
 8011fb4:	687a      	ldr	r2, [r7, #4]
 8011fb6:	4613      	mov	r3, r2
 8011fb8:	005b      	lsls	r3, r3, #1
 8011fba:	4413      	add	r3, r2
 8011fbc:	00db      	lsls	r3, r3, #3
 8011fbe:	440b      	add	r3, r1
 8011fc0:	3312      	adds	r3, #18
 8011fc2:	4602      	mov	r2, r0
 8011fc4:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8011fc6:	493e      	ldr	r1, [pc, #248]	; (80120c0 <etharp_tmr+0x14c>)
 8011fc8:	687a      	ldr	r2, [r7, #4]
 8011fca:	4613      	mov	r3, r2
 8011fcc:	005b      	lsls	r3, r3, #1
 8011fce:	4413      	add	r3, r2
 8011fd0:	00db      	lsls	r3, r3, #3
 8011fd2:	440b      	add	r3, r1
 8011fd4:	3312      	adds	r3, #18
 8011fd6:	881b      	ldrh	r3, [r3, #0]
 8011fd8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8011fdc:	d215      	bcs.n	801200a <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8011fde:	4938      	ldr	r1, [pc, #224]	; (80120c0 <etharp_tmr+0x14c>)
 8011fe0:	687a      	ldr	r2, [r7, #4]
 8011fe2:	4613      	mov	r3, r2
 8011fe4:	005b      	lsls	r3, r3, #1
 8011fe6:	4413      	add	r3, r2
 8011fe8:	00db      	lsls	r3, r3, #3
 8011fea:	440b      	add	r3, r1
 8011fec:	3314      	adds	r3, #20
 8011fee:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8011ff0:	2b01      	cmp	r3, #1
 8011ff2:	d10e      	bne.n	8012012 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8011ff4:	4932      	ldr	r1, [pc, #200]	; (80120c0 <etharp_tmr+0x14c>)
 8011ff6:	687a      	ldr	r2, [r7, #4]
 8011ff8:	4613      	mov	r3, r2
 8011ffa:	005b      	lsls	r3, r3, #1
 8011ffc:	4413      	add	r3, r2
 8011ffe:	00db      	lsls	r3, r3, #3
 8012000:	440b      	add	r3, r1
 8012002:	3312      	adds	r3, #18
 8012004:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8012006:	2b04      	cmp	r3, #4
 8012008:	d903      	bls.n	8012012 <etharp_tmr+0x9e>
>>>>>>> Stashed changes
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
<<<<<<< Updated upstream
 801203a:	6878      	ldr	r0, [r7, #4]
 801203c:	f7ff ff80 	bl	8011f40 <etharp_free_entry>
 8012040:	e04a      	b.n	80120d8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8012042:	492b      	ldr	r1, [pc, #172]	; (80120f0 <etharp_tmr+0x14c>)
 8012044:	687a      	ldr	r2, [r7, #4]
 8012046:	4613      	mov	r3, r2
 8012048:	005b      	lsls	r3, r3, #1
 801204a:	4413      	add	r3, r2
 801204c:	00db      	lsls	r3, r3, #3
 801204e:	440b      	add	r3, r1
 8012050:	3314      	adds	r3, #20
 8012052:	781b      	ldrb	r3, [r3, #0]
 8012054:	2b03      	cmp	r3, #3
 8012056:	d10a      	bne.n	801206e <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8012058:	4925      	ldr	r1, [pc, #148]	; (80120f0 <etharp_tmr+0x14c>)
 801205a:	687a      	ldr	r2, [r7, #4]
 801205c:	4613      	mov	r3, r2
 801205e:	005b      	lsls	r3, r3, #1
 8012060:	4413      	add	r3, r2
 8012062:	00db      	lsls	r3, r3, #3
 8012064:	440b      	add	r3, r1
 8012066:	3314      	adds	r3, #20
 8012068:	2204      	movs	r2, #4
 801206a:	701a      	strb	r2, [r3, #0]
 801206c:	e034      	b.n	80120d8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801206e:	4920      	ldr	r1, [pc, #128]	; (80120f0 <etharp_tmr+0x14c>)
 8012070:	687a      	ldr	r2, [r7, #4]
 8012072:	4613      	mov	r3, r2
 8012074:	005b      	lsls	r3, r3, #1
 8012076:	4413      	add	r3, r2
 8012078:	00db      	lsls	r3, r3, #3
 801207a:	440b      	add	r3, r1
 801207c:	3314      	adds	r3, #20
 801207e:	781b      	ldrb	r3, [r3, #0]
 8012080:	2b04      	cmp	r3, #4
 8012082:	d10a      	bne.n	801209a <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8012084:	491a      	ldr	r1, [pc, #104]	; (80120f0 <etharp_tmr+0x14c>)
 8012086:	687a      	ldr	r2, [r7, #4]
 8012088:	4613      	mov	r3, r2
 801208a:	005b      	lsls	r3, r3, #1
 801208c:	4413      	add	r3, r2
 801208e:	00db      	lsls	r3, r3, #3
 8012090:	440b      	add	r3, r1
 8012092:	3314      	adds	r3, #20
 8012094:	2202      	movs	r2, #2
 8012096:	701a      	strb	r2, [r3, #0]
 8012098:	e01e      	b.n	80120d8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801209a:	4915      	ldr	r1, [pc, #84]	; (80120f0 <etharp_tmr+0x14c>)
 801209c:	687a      	ldr	r2, [r7, #4]
 801209e:	4613      	mov	r3, r2
 80120a0:	005b      	lsls	r3, r3, #1
 80120a2:	4413      	add	r3, r2
 80120a4:	00db      	lsls	r3, r3, #3
 80120a6:	440b      	add	r3, r1
 80120a8:	3314      	adds	r3, #20
 80120aa:	781b      	ldrb	r3, [r3, #0]
 80120ac:	2b01      	cmp	r3, #1
 80120ae:	d113      	bne.n	80120d8 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80120b0:	490f      	ldr	r1, [pc, #60]	; (80120f0 <etharp_tmr+0x14c>)
 80120b2:	687a      	ldr	r2, [r7, #4]
 80120b4:	4613      	mov	r3, r2
 80120b6:	005b      	lsls	r3, r3, #1
 80120b8:	4413      	add	r3, r2
 80120ba:	00db      	lsls	r3, r3, #3
 80120bc:	440b      	add	r3, r1
 80120be:	3308      	adds	r3, #8
 80120c0:	6818      	ldr	r0, [r3, #0]
 80120c2:	687a      	ldr	r2, [r7, #4]
 80120c4:	4613      	mov	r3, r2
 80120c6:	005b      	lsls	r3, r3, #1
 80120c8:	4413      	add	r3, r2
 80120ca:	00db      	lsls	r3, r3, #3
 80120cc:	4a08      	ldr	r2, [pc, #32]	; (80120f0 <etharp_tmr+0x14c>)
 80120ce:	4413      	add	r3, r2
 80120d0:	3304      	adds	r3, #4
 80120d2:	4619      	mov	r1, r3
 80120d4:	f000 fe6e 	bl	8012db4 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80120d8:	687b      	ldr	r3, [r7, #4]
 80120da:	3301      	adds	r3, #1
 80120dc:	607b      	str	r3, [r7, #4]
 80120de:	687b      	ldr	r3, [r7, #4]
 80120e0:	2b09      	cmp	r3, #9
 80120e2:	f77f af65 	ble.w	8011fb0 <etharp_tmr+0xc>
=======
 801200a:	6878      	ldr	r0, [r7, #4]
 801200c:	f7ff ff80 	bl	8011f10 <etharp_free_entry>
 8012010:	e04a      	b.n	80120a8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8012012:	492b      	ldr	r1, [pc, #172]	; (80120c0 <etharp_tmr+0x14c>)
 8012014:	687a      	ldr	r2, [r7, #4]
 8012016:	4613      	mov	r3, r2
 8012018:	005b      	lsls	r3, r3, #1
 801201a:	4413      	add	r3, r2
 801201c:	00db      	lsls	r3, r3, #3
 801201e:	440b      	add	r3, r1
 8012020:	3314      	adds	r3, #20
 8012022:	781b      	ldrb	r3, [r3, #0]
 8012024:	2b03      	cmp	r3, #3
 8012026:	d10a      	bne.n	801203e <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8012028:	4925      	ldr	r1, [pc, #148]	; (80120c0 <etharp_tmr+0x14c>)
 801202a:	687a      	ldr	r2, [r7, #4]
 801202c:	4613      	mov	r3, r2
 801202e:	005b      	lsls	r3, r3, #1
 8012030:	4413      	add	r3, r2
 8012032:	00db      	lsls	r3, r3, #3
 8012034:	440b      	add	r3, r1
 8012036:	3314      	adds	r3, #20
 8012038:	2204      	movs	r2, #4
 801203a:	701a      	strb	r2, [r3, #0]
 801203c:	e034      	b.n	80120a8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801203e:	4920      	ldr	r1, [pc, #128]	; (80120c0 <etharp_tmr+0x14c>)
 8012040:	687a      	ldr	r2, [r7, #4]
 8012042:	4613      	mov	r3, r2
 8012044:	005b      	lsls	r3, r3, #1
 8012046:	4413      	add	r3, r2
 8012048:	00db      	lsls	r3, r3, #3
 801204a:	440b      	add	r3, r1
 801204c:	3314      	adds	r3, #20
 801204e:	781b      	ldrb	r3, [r3, #0]
 8012050:	2b04      	cmp	r3, #4
 8012052:	d10a      	bne.n	801206a <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8012054:	491a      	ldr	r1, [pc, #104]	; (80120c0 <etharp_tmr+0x14c>)
 8012056:	687a      	ldr	r2, [r7, #4]
 8012058:	4613      	mov	r3, r2
 801205a:	005b      	lsls	r3, r3, #1
 801205c:	4413      	add	r3, r2
 801205e:	00db      	lsls	r3, r3, #3
 8012060:	440b      	add	r3, r1
 8012062:	3314      	adds	r3, #20
 8012064:	2202      	movs	r2, #2
 8012066:	701a      	strb	r2, [r3, #0]
 8012068:	e01e      	b.n	80120a8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801206a:	4915      	ldr	r1, [pc, #84]	; (80120c0 <etharp_tmr+0x14c>)
 801206c:	687a      	ldr	r2, [r7, #4]
 801206e:	4613      	mov	r3, r2
 8012070:	005b      	lsls	r3, r3, #1
 8012072:	4413      	add	r3, r2
 8012074:	00db      	lsls	r3, r3, #3
 8012076:	440b      	add	r3, r1
 8012078:	3314      	adds	r3, #20
 801207a:	781b      	ldrb	r3, [r3, #0]
 801207c:	2b01      	cmp	r3, #1
 801207e:	d113      	bne.n	80120a8 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8012080:	490f      	ldr	r1, [pc, #60]	; (80120c0 <etharp_tmr+0x14c>)
 8012082:	687a      	ldr	r2, [r7, #4]
 8012084:	4613      	mov	r3, r2
 8012086:	005b      	lsls	r3, r3, #1
 8012088:	4413      	add	r3, r2
 801208a:	00db      	lsls	r3, r3, #3
 801208c:	440b      	add	r3, r1
 801208e:	3308      	adds	r3, #8
 8012090:	6818      	ldr	r0, [r3, #0]
 8012092:	687a      	ldr	r2, [r7, #4]
 8012094:	4613      	mov	r3, r2
 8012096:	005b      	lsls	r3, r3, #1
 8012098:	4413      	add	r3, r2
 801209a:	00db      	lsls	r3, r3, #3
 801209c:	4a08      	ldr	r2, [pc, #32]	; (80120c0 <etharp_tmr+0x14c>)
 801209e:	4413      	add	r3, r2
 80120a0:	3304      	adds	r3, #4
 80120a2:	4619      	mov	r1, r3
 80120a4:	f000 fe6e 	bl	8012d84 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80120a8:	687b      	ldr	r3, [r7, #4]
 80120aa:	3301      	adds	r3, #1
 80120ac:	607b      	str	r3, [r7, #4]
 80120ae:	687b      	ldr	r3, [r7, #4]
 80120b0:	2b09      	cmp	r3, #9
 80120b2:	f77f af65 	ble.w	8011f80 <etharp_tmr+0xc>
>>>>>>> Stashed changes
      }
    }
  }
}
<<<<<<< Updated upstream
 80120e6:	bf00      	nop
 80120e8:	bf00      	nop
 80120ea:	3708      	adds	r7, #8
 80120ec:	46bd      	mov	sp, r7
 80120ee:	bd80      	pop	{r7, pc}
 80120f0:	20000128 	.word	0x20000128

080120f4 <etharp_find_entry>:
=======
 80120b6:	bf00      	nop
 80120b8:	bf00      	nop
 80120ba:	3708      	adds	r7, #8
 80120bc:	46bd      	mov	sp, r7
 80120be:	bd80      	pop	{r7, pc}
 80120c0:	20000128 	.word	0x20000128

080120c4 <etharp_find_entry>:
>>>>>>> Stashed changes
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
<<<<<<< Updated upstream
 80120f4:	b580      	push	{r7, lr}
 80120f6:	b08a      	sub	sp, #40	; 0x28
 80120f8:	af00      	add	r7, sp, #0
 80120fa:	60f8      	str	r0, [r7, #12]
 80120fc:	460b      	mov	r3, r1
 80120fe:	607a      	str	r2, [r7, #4]
 8012100:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8012102:	230a      	movs	r3, #10
 8012104:	84fb      	strh	r3, [r7, #38]	; 0x26
 8012106:	230a      	movs	r3, #10
 8012108:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801210a:	230a      	movs	r3, #10
 801210c:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 801210e:	2300      	movs	r3, #0
 8012110:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8012112:	230a      	movs	r3, #10
 8012114:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8012116:	2300      	movs	r3, #0
 8012118:	83bb      	strh	r3, [r7, #28]
 801211a:	2300      	movs	r3, #0
 801211c:	837b      	strh	r3, [r7, #26]
 801211e:	2300      	movs	r3, #0
 8012120:	833b      	strh	r3, [r7, #24]
=======
 80120c4:	b580      	push	{r7, lr}
 80120c6:	b08a      	sub	sp, #40	; 0x28
 80120c8:	af00      	add	r7, sp, #0
 80120ca:	60f8      	str	r0, [r7, #12]
 80120cc:	460b      	mov	r3, r1
 80120ce:	607a      	str	r2, [r7, #4]
 80120d0:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80120d2:	230a      	movs	r3, #10
 80120d4:	84fb      	strh	r3, [r7, #38]	; 0x26
 80120d6:	230a      	movs	r3, #10
 80120d8:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 80120da:	230a      	movs	r3, #10
 80120dc:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 80120de:	2300      	movs	r3, #0
 80120e0:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 80120e2:	230a      	movs	r3, #10
 80120e4:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 80120e6:	2300      	movs	r3, #0
 80120e8:	83bb      	strh	r3, [r7, #28]
 80120ea:	2300      	movs	r3, #0
 80120ec:	837b      	strh	r3, [r7, #26]
 80120ee:	2300      	movs	r3, #0
 80120f0:	833b      	strh	r3, [r7, #24]
>>>>>>> Stashed changes
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
<<<<<<< Updated upstream
 8012122:	2300      	movs	r3, #0
 8012124:	843b      	strh	r3, [r7, #32]
 8012126:	e0ae      	b.n	8012286 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8012128:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801212c:	49a6      	ldr	r1, [pc, #664]	; (80123c8 <etharp_find_entry+0x2d4>)
 801212e:	4613      	mov	r3, r2
 8012130:	005b      	lsls	r3, r3, #1
 8012132:	4413      	add	r3, r2
 8012134:	00db      	lsls	r3, r3, #3
 8012136:	440b      	add	r3, r1
 8012138:	3314      	adds	r3, #20
 801213a:	781b      	ldrb	r3, [r3, #0]
 801213c:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801213e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8012142:	2b0a      	cmp	r3, #10
 8012144:	d105      	bne.n	8012152 <etharp_find_entry+0x5e>
 8012146:	7dfb      	ldrb	r3, [r7, #23]
 8012148:	2b00      	cmp	r3, #0
 801214a:	d102      	bne.n	8012152 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 801214c:	8c3b      	ldrh	r3, [r7, #32]
 801214e:	847b      	strh	r3, [r7, #34]	; 0x22
 8012150:	e095      	b.n	801227e <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8012152:	7dfb      	ldrb	r3, [r7, #23]
 8012154:	2b00      	cmp	r3, #0
 8012156:	f000 8092 	beq.w	801227e <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801215a:	7dfb      	ldrb	r3, [r7, #23]
 801215c:	2b01      	cmp	r3, #1
 801215e:	d009      	beq.n	8012174 <etharp_find_entry+0x80>
 8012160:	7dfb      	ldrb	r3, [r7, #23]
 8012162:	2b01      	cmp	r3, #1
 8012164:	d806      	bhi.n	8012174 <etharp_find_entry+0x80>
 8012166:	4b99      	ldr	r3, [pc, #612]	; (80123cc <etharp_find_entry+0x2d8>)
 8012168:	f240 1223 	movw	r2, #291	; 0x123
 801216c:	4998      	ldr	r1, [pc, #608]	; (80123d0 <etharp_find_entry+0x2dc>)
 801216e:	4899      	ldr	r0, [pc, #612]	; (80123d4 <etharp_find_entry+0x2e0>)
 8012170:	f002 fa08 	bl	8014584 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8012174:	68fb      	ldr	r3, [r7, #12]
 8012176:	2b00      	cmp	r3, #0
 8012178:	d020      	beq.n	80121bc <etharp_find_entry+0xc8>
 801217a:	68fb      	ldr	r3, [r7, #12]
 801217c:	6819      	ldr	r1, [r3, #0]
 801217e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012182:	4891      	ldr	r0, [pc, #580]	; (80123c8 <etharp_find_entry+0x2d4>)
 8012184:	4613      	mov	r3, r2
 8012186:	005b      	lsls	r3, r3, #1
 8012188:	4413      	add	r3, r2
 801218a:	00db      	lsls	r3, r3, #3
 801218c:	4403      	add	r3, r0
 801218e:	3304      	adds	r3, #4
 8012190:	681b      	ldr	r3, [r3, #0]
 8012192:	4299      	cmp	r1, r3
 8012194:	d112      	bne.n	80121bc <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8012196:	687b      	ldr	r3, [r7, #4]
 8012198:	2b00      	cmp	r3, #0
 801219a:	d00c      	beq.n	80121b6 <etharp_find_entry+0xc2>
 801219c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80121a0:	4989      	ldr	r1, [pc, #548]	; (80123c8 <etharp_find_entry+0x2d4>)
 80121a2:	4613      	mov	r3, r2
 80121a4:	005b      	lsls	r3, r3, #1
 80121a6:	4413      	add	r3, r2
 80121a8:	00db      	lsls	r3, r3, #3
 80121aa:	440b      	add	r3, r1
 80121ac:	3308      	adds	r3, #8
 80121ae:	681b      	ldr	r3, [r3, #0]
 80121b0:	687a      	ldr	r2, [r7, #4]
 80121b2:	429a      	cmp	r2, r3
 80121b4:	d102      	bne.n	80121bc <etharp_find_entry+0xc8>
=======
 80120f2:	2300      	movs	r3, #0
 80120f4:	843b      	strh	r3, [r7, #32]
 80120f6:	e0ae      	b.n	8012256 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 80120f8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80120fc:	49a6      	ldr	r1, [pc, #664]	; (8012398 <etharp_find_entry+0x2d4>)
 80120fe:	4613      	mov	r3, r2
 8012100:	005b      	lsls	r3, r3, #1
 8012102:	4413      	add	r3, r2
 8012104:	00db      	lsls	r3, r3, #3
 8012106:	440b      	add	r3, r1
 8012108:	3314      	adds	r3, #20
 801210a:	781b      	ldrb	r3, [r3, #0]
 801210c:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801210e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8012112:	2b0a      	cmp	r3, #10
 8012114:	d105      	bne.n	8012122 <etharp_find_entry+0x5e>
 8012116:	7dfb      	ldrb	r3, [r7, #23]
 8012118:	2b00      	cmp	r3, #0
 801211a:	d102      	bne.n	8012122 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 801211c:	8c3b      	ldrh	r3, [r7, #32]
 801211e:	847b      	strh	r3, [r7, #34]	; 0x22
 8012120:	e095      	b.n	801224e <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8012122:	7dfb      	ldrb	r3, [r7, #23]
 8012124:	2b00      	cmp	r3, #0
 8012126:	f000 8092 	beq.w	801224e <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801212a:	7dfb      	ldrb	r3, [r7, #23]
 801212c:	2b01      	cmp	r3, #1
 801212e:	d009      	beq.n	8012144 <etharp_find_entry+0x80>
 8012130:	7dfb      	ldrb	r3, [r7, #23]
 8012132:	2b01      	cmp	r3, #1
 8012134:	d806      	bhi.n	8012144 <etharp_find_entry+0x80>
 8012136:	4b99      	ldr	r3, [pc, #612]	; (801239c <etharp_find_entry+0x2d8>)
 8012138:	f240 1223 	movw	r2, #291	; 0x123
 801213c:	4998      	ldr	r1, [pc, #608]	; (80123a0 <etharp_find_entry+0x2dc>)
 801213e:	4899      	ldr	r0, [pc, #612]	; (80123a4 <etharp_find_entry+0x2e0>)
 8012140:	f002 fa08 	bl	8014554 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8012144:	68fb      	ldr	r3, [r7, #12]
 8012146:	2b00      	cmp	r3, #0
 8012148:	d020      	beq.n	801218c <etharp_find_entry+0xc8>
 801214a:	68fb      	ldr	r3, [r7, #12]
 801214c:	6819      	ldr	r1, [r3, #0]
 801214e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012152:	4891      	ldr	r0, [pc, #580]	; (8012398 <etharp_find_entry+0x2d4>)
 8012154:	4613      	mov	r3, r2
 8012156:	005b      	lsls	r3, r3, #1
 8012158:	4413      	add	r3, r2
 801215a:	00db      	lsls	r3, r3, #3
 801215c:	4403      	add	r3, r0
 801215e:	3304      	adds	r3, #4
 8012160:	681b      	ldr	r3, [r3, #0]
 8012162:	4299      	cmp	r1, r3
 8012164:	d112      	bne.n	801218c <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8012166:	687b      	ldr	r3, [r7, #4]
 8012168:	2b00      	cmp	r3, #0
 801216a:	d00c      	beq.n	8012186 <etharp_find_entry+0xc2>
 801216c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012170:	4989      	ldr	r1, [pc, #548]	; (8012398 <etharp_find_entry+0x2d4>)
 8012172:	4613      	mov	r3, r2
 8012174:	005b      	lsls	r3, r3, #1
 8012176:	4413      	add	r3, r2
 8012178:	00db      	lsls	r3, r3, #3
 801217a:	440b      	add	r3, r1
 801217c:	3308      	adds	r3, #8
 801217e:	681b      	ldr	r3, [r3, #0]
 8012180:	687a      	ldr	r2, [r7, #4]
 8012182:	429a      	cmp	r2, r3
 8012184:	d102      	bne.n	801218c <etharp_find_entry+0xc8>
>>>>>>> Stashed changes
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
<<<<<<< Updated upstream
 80121b6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80121ba:	e100      	b.n	80123be <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 80121bc:	7dfb      	ldrb	r3, [r7, #23]
 80121be:	2b01      	cmp	r3, #1
 80121c0:	d140      	bne.n	8012244 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 80121c2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80121c6:	4980      	ldr	r1, [pc, #512]	; (80123c8 <etharp_find_entry+0x2d4>)
 80121c8:	4613      	mov	r3, r2
 80121ca:	005b      	lsls	r3, r3, #1
 80121cc:	4413      	add	r3, r2
 80121ce:	00db      	lsls	r3, r3, #3
 80121d0:	440b      	add	r3, r1
 80121d2:	681b      	ldr	r3, [r3, #0]
 80121d4:	2b00      	cmp	r3, #0
 80121d6:	d01a      	beq.n	801220e <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 80121d8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80121dc:	497a      	ldr	r1, [pc, #488]	; (80123c8 <etharp_find_entry+0x2d4>)
 80121de:	4613      	mov	r3, r2
 80121e0:	005b      	lsls	r3, r3, #1
 80121e2:	4413      	add	r3, r2
 80121e4:	00db      	lsls	r3, r3, #3
 80121e6:	440b      	add	r3, r1
 80121e8:	3312      	adds	r3, #18
 80121ea:	881b      	ldrh	r3, [r3, #0]
 80121ec:	8bba      	ldrh	r2, [r7, #28]
 80121ee:	429a      	cmp	r2, r3
 80121f0:	d845      	bhi.n	801227e <etharp_find_entry+0x18a>
            old_queue = i;
 80121f2:	8c3b      	ldrh	r3, [r7, #32]
 80121f4:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 80121f6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80121fa:	4973      	ldr	r1, [pc, #460]	; (80123c8 <etharp_find_entry+0x2d4>)
 80121fc:	4613      	mov	r3, r2
 80121fe:	005b      	lsls	r3, r3, #1
 8012200:	4413      	add	r3, r2
 8012202:	00db      	lsls	r3, r3, #3
 8012204:	440b      	add	r3, r1
 8012206:	3312      	adds	r3, #18
 8012208:	881b      	ldrh	r3, [r3, #0]
 801220a:	83bb      	strh	r3, [r7, #28]
 801220c:	e037      	b.n	801227e <etharp_find_entry+0x18a>
=======
 8012186:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801218a:	e100      	b.n	801238e <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 801218c:	7dfb      	ldrb	r3, [r7, #23]
 801218e:	2b01      	cmp	r3, #1
 8012190:	d140      	bne.n	8012214 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8012192:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012196:	4980      	ldr	r1, [pc, #512]	; (8012398 <etharp_find_entry+0x2d4>)
 8012198:	4613      	mov	r3, r2
 801219a:	005b      	lsls	r3, r3, #1
 801219c:	4413      	add	r3, r2
 801219e:	00db      	lsls	r3, r3, #3
 80121a0:	440b      	add	r3, r1
 80121a2:	681b      	ldr	r3, [r3, #0]
 80121a4:	2b00      	cmp	r3, #0
 80121a6:	d01a      	beq.n	80121de <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 80121a8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80121ac:	497a      	ldr	r1, [pc, #488]	; (8012398 <etharp_find_entry+0x2d4>)
 80121ae:	4613      	mov	r3, r2
 80121b0:	005b      	lsls	r3, r3, #1
 80121b2:	4413      	add	r3, r2
 80121b4:	00db      	lsls	r3, r3, #3
 80121b6:	440b      	add	r3, r1
 80121b8:	3312      	adds	r3, #18
 80121ba:	881b      	ldrh	r3, [r3, #0]
 80121bc:	8bba      	ldrh	r2, [r7, #28]
 80121be:	429a      	cmp	r2, r3
 80121c0:	d845      	bhi.n	801224e <etharp_find_entry+0x18a>
            old_queue = i;
 80121c2:	8c3b      	ldrh	r3, [r7, #32]
 80121c4:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 80121c6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80121ca:	4973      	ldr	r1, [pc, #460]	; (8012398 <etharp_find_entry+0x2d4>)
 80121cc:	4613      	mov	r3, r2
 80121ce:	005b      	lsls	r3, r3, #1
 80121d0:	4413      	add	r3, r2
 80121d2:	00db      	lsls	r3, r3, #3
 80121d4:	440b      	add	r3, r1
 80121d6:	3312      	adds	r3, #18
 80121d8:	881b      	ldrh	r3, [r3, #0]
 80121da:	83bb      	strh	r3, [r7, #28]
 80121dc:	e037      	b.n	801224e <etharp_find_entry+0x18a>
>>>>>>> Stashed changes
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
<<<<<<< Updated upstream
 801220e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012212:	496d      	ldr	r1, [pc, #436]	; (80123c8 <etharp_find_entry+0x2d4>)
 8012214:	4613      	mov	r3, r2
 8012216:	005b      	lsls	r3, r3, #1
 8012218:	4413      	add	r3, r2
 801221a:	00db      	lsls	r3, r3, #3
 801221c:	440b      	add	r3, r1
 801221e:	3312      	adds	r3, #18
 8012220:	881b      	ldrh	r3, [r3, #0]
 8012222:	8b7a      	ldrh	r2, [r7, #26]
 8012224:	429a      	cmp	r2, r3
 8012226:	d82a      	bhi.n	801227e <etharp_find_entry+0x18a>
            old_pending = i;
 8012228:	8c3b      	ldrh	r3, [r7, #32]
 801222a:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 801222c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012230:	4965      	ldr	r1, [pc, #404]	; (80123c8 <etharp_find_entry+0x2d4>)
 8012232:	4613      	mov	r3, r2
 8012234:	005b      	lsls	r3, r3, #1
 8012236:	4413      	add	r3, r2
 8012238:	00db      	lsls	r3, r3, #3
 801223a:	440b      	add	r3, r1
 801223c:	3312      	adds	r3, #18
 801223e:	881b      	ldrh	r3, [r3, #0]
 8012240:	837b      	strh	r3, [r7, #26]
 8012242:	e01c      	b.n	801227e <etharp_find_entry+0x18a>
=======
 80121de:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80121e2:	496d      	ldr	r1, [pc, #436]	; (8012398 <etharp_find_entry+0x2d4>)
 80121e4:	4613      	mov	r3, r2
 80121e6:	005b      	lsls	r3, r3, #1
 80121e8:	4413      	add	r3, r2
 80121ea:	00db      	lsls	r3, r3, #3
 80121ec:	440b      	add	r3, r1
 80121ee:	3312      	adds	r3, #18
 80121f0:	881b      	ldrh	r3, [r3, #0]
 80121f2:	8b7a      	ldrh	r2, [r7, #26]
 80121f4:	429a      	cmp	r2, r3
 80121f6:	d82a      	bhi.n	801224e <etharp_find_entry+0x18a>
            old_pending = i;
 80121f8:	8c3b      	ldrh	r3, [r7, #32]
 80121fa:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 80121fc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012200:	4965      	ldr	r1, [pc, #404]	; (8012398 <etharp_find_entry+0x2d4>)
 8012202:	4613      	mov	r3, r2
 8012204:	005b      	lsls	r3, r3, #1
 8012206:	4413      	add	r3, r2
 8012208:	00db      	lsls	r3, r3, #3
 801220a:	440b      	add	r3, r1
 801220c:	3312      	adds	r3, #18
 801220e:	881b      	ldrh	r3, [r3, #0]
 8012210:	837b      	strh	r3, [r7, #26]
 8012212:	e01c      	b.n	801224e <etharp_find_entry+0x18a>
>>>>>>> Stashed changes
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
<<<<<<< Updated upstream
 8012244:	7dfb      	ldrb	r3, [r7, #23]
 8012246:	2b01      	cmp	r3, #1
 8012248:	d919      	bls.n	801227e <etharp_find_entry+0x18a>
=======
 8012214:	7dfb      	ldrb	r3, [r7, #23]
 8012216:	2b01      	cmp	r3, #1
 8012218:	d919      	bls.n	801224e <etharp_find_entry+0x18a>
>>>>>>> Stashed changes
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
<<<<<<< Updated upstream
 801224a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801224e:	495e      	ldr	r1, [pc, #376]	; (80123c8 <etharp_find_entry+0x2d4>)
 8012250:	4613      	mov	r3, r2
 8012252:	005b      	lsls	r3, r3, #1
 8012254:	4413      	add	r3, r2
 8012256:	00db      	lsls	r3, r3, #3
 8012258:	440b      	add	r3, r1
 801225a:	3312      	adds	r3, #18
 801225c:	881b      	ldrh	r3, [r3, #0]
 801225e:	8b3a      	ldrh	r2, [r7, #24]
 8012260:	429a      	cmp	r2, r3
 8012262:	d80c      	bhi.n	801227e <etharp_find_entry+0x18a>
            old_stable = i;
 8012264:	8c3b      	ldrh	r3, [r7, #32]
 8012266:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8012268:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801226c:	4956      	ldr	r1, [pc, #344]	; (80123c8 <etharp_find_entry+0x2d4>)
 801226e:	4613      	mov	r3, r2
 8012270:	005b      	lsls	r3, r3, #1
 8012272:	4413      	add	r3, r2
 8012274:	00db      	lsls	r3, r3, #3
 8012276:	440b      	add	r3, r1
 8012278:	3312      	adds	r3, #18
 801227a:	881b      	ldrh	r3, [r3, #0]
 801227c:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801227e:	8c3b      	ldrh	r3, [r7, #32]
 8012280:	3301      	adds	r3, #1
 8012282:	b29b      	uxth	r3, r3
 8012284:	843b      	strh	r3, [r7, #32]
 8012286:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801228a:	2b09      	cmp	r3, #9
 801228c:	f77f af4c 	ble.w	8012128 <etharp_find_entry+0x34>
=======
 801221a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801221e:	495e      	ldr	r1, [pc, #376]	; (8012398 <etharp_find_entry+0x2d4>)
 8012220:	4613      	mov	r3, r2
 8012222:	005b      	lsls	r3, r3, #1
 8012224:	4413      	add	r3, r2
 8012226:	00db      	lsls	r3, r3, #3
 8012228:	440b      	add	r3, r1
 801222a:	3312      	adds	r3, #18
 801222c:	881b      	ldrh	r3, [r3, #0]
 801222e:	8b3a      	ldrh	r2, [r7, #24]
 8012230:	429a      	cmp	r2, r3
 8012232:	d80c      	bhi.n	801224e <etharp_find_entry+0x18a>
            old_stable = i;
 8012234:	8c3b      	ldrh	r3, [r7, #32]
 8012236:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8012238:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801223c:	4956      	ldr	r1, [pc, #344]	; (8012398 <etharp_find_entry+0x2d4>)
 801223e:	4613      	mov	r3, r2
 8012240:	005b      	lsls	r3, r3, #1
 8012242:	4413      	add	r3, r2
 8012244:	00db      	lsls	r3, r3, #3
 8012246:	440b      	add	r3, r1
 8012248:	3312      	adds	r3, #18
 801224a:	881b      	ldrh	r3, [r3, #0]
 801224c:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801224e:	8c3b      	ldrh	r3, [r7, #32]
 8012250:	3301      	adds	r3, #1
 8012252:	b29b      	uxth	r3, r3
 8012254:	843b      	strh	r3, [r7, #32]
 8012256:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801225a:	2b09      	cmp	r3, #9
 801225c:	f77f af4c 	ble.w	80120f8 <etharp_find_entry+0x34>
>>>>>>> Stashed changes
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
<<<<<<< Updated upstream
 8012290:	7afb      	ldrb	r3, [r7, #11]
 8012292:	f003 0302 	and.w	r3, r3, #2
 8012296:	2b00      	cmp	r3, #0
 8012298:	d108      	bne.n	80122ac <etharp_find_entry+0x1b8>
 801229a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801229e:	2b0a      	cmp	r3, #10
 80122a0:	d107      	bne.n	80122b2 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 80122a2:	7afb      	ldrb	r3, [r7, #11]
 80122a4:	f003 0301 	and.w	r3, r3, #1
 80122a8:	2b00      	cmp	r3, #0
 80122aa:	d102      	bne.n	80122b2 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 80122ac:	f04f 33ff 	mov.w	r3, #4294967295
 80122b0:	e085      	b.n	80123be <etharp_find_entry+0x2ca>
=======
 8012260:	7afb      	ldrb	r3, [r7, #11]
 8012262:	f003 0302 	and.w	r3, r3, #2
 8012266:	2b00      	cmp	r3, #0
 8012268:	d108      	bne.n	801227c <etharp_find_entry+0x1b8>
 801226a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801226e:	2b0a      	cmp	r3, #10
 8012270:	d107      	bne.n	8012282 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8012272:	7afb      	ldrb	r3, [r7, #11]
 8012274:	f003 0301 	and.w	r3, r3, #1
 8012278:	2b00      	cmp	r3, #0
 801227a:	d102      	bne.n	8012282 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 801227c:	f04f 33ff 	mov.w	r3, #4294967295
 8012280:	e085      	b.n	801238e <etharp_find_entry+0x2ca>
>>>>>>> Stashed changes
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
<<<<<<< Updated upstream
 80122b2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80122b6:	2b09      	cmp	r3, #9
 80122b8:	dc02      	bgt.n	80122c0 <etharp_find_entry+0x1cc>
    i = empty;
 80122ba:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80122bc:	843b      	strh	r3, [r7, #32]
 80122be:	e039      	b.n	8012334 <etharp_find_entry+0x240>
=======
 8012282:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8012286:	2b09      	cmp	r3, #9
 8012288:	dc02      	bgt.n	8012290 <etharp_find_entry+0x1cc>
    i = empty;
 801228a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801228c:	843b      	strh	r3, [r7, #32]
 801228e:	e039      	b.n	8012304 <etharp_find_entry+0x240>
>>>>>>> Stashed changes
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
<<<<<<< Updated upstream
 80122c0:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80122c4:	2b09      	cmp	r3, #9
 80122c6:	dc14      	bgt.n	80122f2 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 80122c8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80122ca:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 80122cc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80122d0:	493d      	ldr	r1, [pc, #244]	; (80123c8 <etharp_find_entry+0x2d4>)
 80122d2:	4613      	mov	r3, r2
 80122d4:	005b      	lsls	r3, r3, #1
 80122d6:	4413      	add	r3, r2
 80122d8:	00db      	lsls	r3, r3, #3
 80122da:	440b      	add	r3, r1
 80122dc:	681b      	ldr	r3, [r3, #0]
 80122de:	2b00      	cmp	r3, #0
 80122e0:	d018      	beq.n	8012314 <etharp_find_entry+0x220>
 80122e2:	4b3a      	ldr	r3, [pc, #232]	; (80123cc <etharp_find_entry+0x2d8>)
 80122e4:	f240 126d 	movw	r2, #365	; 0x16d
 80122e8:	493b      	ldr	r1, [pc, #236]	; (80123d8 <etharp_find_entry+0x2e4>)
 80122ea:	483a      	ldr	r0, [pc, #232]	; (80123d4 <etharp_find_entry+0x2e0>)
 80122ec:	f002 f94a 	bl	8014584 <iprintf>
 80122f0:	e010      	b.n	8012314 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 80122f2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80122f6:	2b09      	cmp	r3, #9
 80122f8:	dc02      	bgt.n	8012300 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 80122fa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80122fc:	843b      	strh	r3, [r7, #32]
 80122fe:	e009      	b.n	8012314 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8012300:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8012304:	2b09      	cmp	r3, #9
 8012306:	dc02      	bgt.n	801230e <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8012308:	8bfb      	ldrh	r3, [r7, #30]
 801230a:	843b      	strh	r3, [r7, #32]
 801230c:	e002      	b.n	8012314 <etharp_find_entry+0x220>
=======
 8012290:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8012294:	2b09      	cmp	r3, #9
 8012296:	dc14      	bgt.n	80122c2 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8012298:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801229a:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 801229c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80122a0:	493d      	ldr	r1, [pc, #244]	; (8012398 <etharp_find_entry+0x2d4>)
 80122a2:	4613      	mov	r3, r2
 80122a4:	005b      	lsls	r3, r3, #1
 80122a6:	4413      	add	r3, r2
 80122a8:	00db      	lsls	r3, r3, #3
 80122aa:	440b      	add	r3, r1
 80122ac:	681b      	ldr	r3, [r3, #0]
 80122ae:	2b00      	cmp	r3, #0
 80122b0:	d018      	beq.n	80122e4 <etharp_find_entry+0x220>
 80122b2:	4b3a      	ldr	r3, [pc, #232]	; (801239c <etharp_find_entry+0x2d8>)
 80122b4:	f240 126d 	movw	r2, #365	; 0x16d
 80122b8:	493b      	ldr	r1, [pc, #236]	; (80123a8 <etharp_find_entry+0x2e4>)
 80122ba:	483a      	ldr	r0, [pc, #232]	; (80123a4 <etharp_find_entry+0x2e0>)
 80122bc:	f002 f94a 	bl	8014554 <iprintf>
 80122c0:	e010      	b.n	80122e4 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 80122c2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80122c6:	2b09      	cmp	r3, #9
 80122c8:	dc02      	bgt.n	80122d0 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 80122ca:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80122cc:	843b      	strh	r3, [r7, #32]
 80122ce:	e009      	b.n	80122e4 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 80122d0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80122d4:	2b09      	cmp	r3, #9
 80122d6:	dc02      	bgt.n	80122de <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 80122d8:	8bfb      	ldrh	r3, [r7, #30]
 80122da:	843b      	strh	r3, [r7, #32]
 80122dc:	e002      	b.n	80122e4 <etharp_find_entry+0x220>
>>>>>>> Stashed changes
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
<<<<<<< Updated upstream
 801230e:	f04f 33ff 	mov.w	r3, #4294967295
 8012312:	e054      	b.n	80123be <etharp_find_entry+0x2ca>
=======
 80122de:	f04f 33ff 	mov.w	r3, #4294967295
 80122e2:	e054      	b.n	801238e <etharp_find_entry+0x2ca>
>>>>>>> Stashed changes
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
<<<<<<< Updated upstream
 8012314:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012318:	2b09      	cmp	r3, #9
 801231a:	dd06      	ble.n	801232a <etharp_find_entry+0x236>
 801231c:	4b2b      	ldr	r3, [pc, #172]	; (80123cc <etharp_find_entry+0x2d8>)
 801231e:	f240 127f 	movw	r2, #383	; 0x17f
 8012322:	492e      	ldr	r1, [pc, #184]	; (80123dc <etharp_find_entry+0x2e8>)
 8012324:	482b      	ldr	r0, [pc, #172]	; (80123d4 <etharp_find_entry+0x2e0>)
 8012326:	f002 f92d 	bl	8014584 <iprintf>
    etharp_free_entry(i);
 801232a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801232e:	4618      	mov	r0, r3
 8012330:	f7ff fe06 	bl	8011f40 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8012334:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012338:	2b09      	cmp	r3, #9
 801233a:	dd06      	ble.n	801234a <etharp_find_entry+0x256>
 801233c:	4b23      	ldr	r3, [pc, #140]	; (80123cc <etharp_find_entry+0x2d8>)
 801233e:	f240 1283 	movw	r2, #387	; 0x183
 8012342:	4926      	ldr	r1, [pc, #152]	; (80123dc <etharp_find_entry+0x2e8>)
 8012344:	4823      	ldr	r0, [pc, #140]	; (80123d4 <etharp_find_entry+0x2e0>)
 8012346:	f002 f91d 	bl	8014584 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801234a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801234e:	491e      	ldr	r1, [pc, #120]	; (80123c8 <etharp_find_entry+0x2d4>)
 8012350:	4613      	mov	r3, r2
 8012352:	005b      	lsls	r3, r3, #1
 8012354:	4413      	add	r3, r2
 8012356:	00db      	lsls	r3, r3, #3
 8012358:	440b      	add	r3, r1
 801235a:	3314      	adds	r3, #20
 801235c:	781b      	ldrb	r3, [r3, #0]
 801235e:	2b00      	cmp	r3, #0
 8012360:	d006      	beq.n	8012370 <etharp_find_entry+0x27c>
 8012362:	4b1a      	ldr	r3, [pc, #104]	; (80123cc <etharp_find_entry+0x2d8>)
 8012364:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8012368:	491d      	ldr	r1, [pc, #116]	; (80123e0 <etharp_find_entry+0x2ec>)
 801236a:	481a      	ldr	r0, [pc, #104]	; (80123d4 <etharp_find_entry+0x2e0>)
 801236c:	f002 f90a 	bl	8014584 <iprintf>
=======
 80122e4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80122e8:	2b09      	cmp	r3, #9
 80122ea:	dd06      	ble.n	80122fa <etharp_find_entry+0x236>
 80122ec:	4b2b      	ldr	r3, [pc, #172]	; (801239c <etharp_find_entry+0x2d8>)
 80122ee:	f240 127f 	movw	r2, #383	; 0x17f
 80122f2:	492e      	ldr	r1, [pc, #184]	; (80123ac <etharp_find_entry+0x2e8>)
 80122f4:	482b      	ldr	r0, [pc, #172]	; (80123a4 <etharp_find_entry+0x2e0>)
 80122f6:	f002 f92d 	bl	8014554 <iprintf>
    etharp_free_entry(i);
 80122fa:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80122fe:	4618      	mov	r0, r3
 8012300:	f7ff fe06 	bl	8011f10 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8012304:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012308:	2b09      	cmp	r3, #9
 801230a:	dd06      	ble.n	801231a <etharp_find_entry+0x256>
 801230c:	4b23      	ldr	r3, [pc, #140]	; (801239c <etharp_find_entry+0x2d8>)
 801230e:	f240 1283 	movw	r2, #387	; 0x183
 8012312:	4926      	ldr	r1, [pc, #152]	; (80123ac <etharp_find_entry+0x2e8>)
 8012314:	4823      	ldr	r0, [pc, #140]	; (80123a4 <etharp_find_entry+0x2e0>)
 8012316:	f002 f91d 	bl	8014554 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801231a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801231e:	491e      	ldr	r1, [pc, #120]	; (8012398 <etharp_find_entry+0x2d4>)
 8012320:	4613      	mov	r3, r2
 8012322:	005b      	lsls	r3, r3, #1
 8012324:	4413      	add	r3, r2
 8012326:	00db      	lsls	r3, r3, #3
 8012328:	440b      	add	r3, r1
 801232a:	3314      	adds	r3, #20
 801232c:	781b      	ldrb	r3, [r3, #0]
 801232e:	2b00      	cmp	r3, #0
 8012330:	d006      	beq.n	8012340 <etharp_find_entry+0x27c>
 8012332:	4b1a      	ldr	r3, [pc, #104]	; (801239c <etharp_find_entry+0x2d8>)
 8012334:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8012338:	491d      	ldr	r1, [pc, #116]	; (80123b0 <etharp_find_entry+0x2ec>)
 801233a:	481a      	ldr	r0, [pc, #104]	; (80123a4 <etharp_find_entry+0x2e0>)
 801233c:	f002 f90a 	bl	8014554 <iprintf>
>>>>>>> Stashed changes
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
<<<<<<< Updated upstream
 8012370:	68fb      	ldr	r3, [r7, #12]
 8012372:	2b00      	cmp	r3, #0
 8012374:	d00b      	beq.n	801238e <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8012376:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801237a:	68fb      	ldr	r3, [r7, #12]
 801237c:	6819      	ldr	r1, [r3, #0]
 801237e:	4812      	ldr	r0, [pc, #72]	; (80123c8 <etharp_find_entry+0x2d4>)
 8012380:	4613      	mov	r3, r2
 8012382:	005b      	lsls	r3, r3, #1
 8012384:	4413      	add	r3, r2
 8012386:	00db      	lsls	r3, r3, #3
 8012388:	4403      	add	r3, r0
 801238a:	3304      	adds	r3, #4
 801238c:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801238e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012392:	490d      	ldr	r1, [pc, #52]	; (80123c8 <etharp_find_entry+0x2d4>)
 8012394:	4613      	mov	r3, r2
 8012396:	005b      	lsls	r3, r3, #1
 8012398:	4413      	add	r3, r2
 801239a:	00db      	lsls	r3, r3, #3
 801239c:	440b      	add	r3, r1
 801239e:	3312      	adds	r3, #18
 80123a0:	2200      	movs	r2, #0
 80123a2:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 80123a4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80123a8:	4907      	ldr	r1, [pc, #28]	; (80123c8 <etharp_find_entry+0x2d4>)
 80123aa:	4613      	mov	r3, r2
 80123ac:	005b      	lsls	r3, r3, #1
 80123ae:	4413      	add	r3, r2
 80123b0:	00db      	lsls	r3, r3, #3
 80123b2:	440b      	add	r3, r1
 80123b4:	3308      	adds	r3, #8
 80123b6:	687a      	ldr	r2, [r7, #4]
 80123b8:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 80123ba:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 80123be:	4618      	mov	r0, r3
 80123c0:	3728      	adds	r7, #40	; 0x28
 80123c2:	46bd      	mov	sp, r7
 80123c4:	bd80      	pop	{r7, pc}
 80123c6:	bf00      	nop
 80123c8:	20000128 	.word	0x20000128
 80123cc:	08017c78 	.word	0x08017c78
 80123d0:	08017cb0 	.word	0x08017cb0
 80123d4:	08017cf0 	.word	0x08017cf0
 80123d8:	08017d18 	.word	0x08017d18
 80123dc:	08017d30 	.word	0x08017d30
 80123e0:	08017d44 	.word	0x08017d44

080123e4 <etharp_update_arp_entry>:
=======
 8012340:	68fb      	ldr	r3, [r7, #12]
 8012342:	2b00      	cmp	r3, #0
 8012344:	d00b      	beq.n	801235e <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8012346:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801234a:	68fb      	ldr	r3, [r7, #12]
 801234c:	6819      	ldr	r1, [r3, #0]
 801234e:	4812      	ldr	r0, [pc, #72]	; (8012398 <etharp_find_entry+0x2d4>)
 8012350:	4613      	mov	r3, r2
 8012352:	005b      	lsls	r3, r3, #1
 8012354:	4413      	add	r3, r2
 8012356:	00db      	lsls	r3, r3, #3
 8012358:	4403      	add	r3, r0
 801235a:	3304      	adds	r3, #4
 801235c:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801235e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012362:	490d      	ldr	r1, [pc, #52]	; (8012398 <etharp_find_entry+0x2d4>)
 8012364:	4613      	mov	r3, r2
 8012366:	005b      	lsls	r3, r3, #1
 8012368:	4413      	add	r3, r2
 801236a:	00db      	lsls	r3, r3, #3
 801236c:	440b      	add	r3, r1
 801236e:	3312      	adds	r3, #18
 8012370:	2200      	movs	r2, #0
 8012372:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8012374:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012378:	4907      	ldr	r1, [pc, #28]	; (8012398 <etharp_find_entry+0x2d4>)
 801237a:	4613      	mov	r3, r2
 801237c:	005b      	lsls	r3, r3, #1
 801237e:	4413      	add	r3, r2
 8012380:	00db      	lsls	r3, r3, #3
 8012382:	440b      	add	r3, r1
 8012384:	3308      	adds	r3, #8
 8012386:	687a      	ldr	r2, [r7, #4]
 8012388:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801238a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 801238e:	4618      	mov	r0, r3
 8012390:	3728      	adds	r7, #40	; 0x28
 8012392:	46bd      	mov	sp, r7
 8012394:	bd80      	pop	{r7, pc}
 8012396:	bf00      	nop
 8012398:	20000128 	.word	0x20000128
 801239c:	08017c5c 	.word	0x08017c5c
 80123a0:	08017c94 	.word	0x08017c94
 80123a4:	08017cd4 	.word	0x08017cd4
 80123a8:	08017cfc 	.word	0x08017cfc
 80123ac:	08017d14 	.word	0x08017d14
 80123b0:	08017d28 	.word	0x08017d28

080123b4 <etharp_update_arp_entry>:
>>>>>>> Stashed changes
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
<<<<<<< Updated upstream
 80123e4:	b580      	push	{r7, lr}
 80123e6:	b088      	sub	sp, #32
 80123e8:	af02      	add	r7, sp, #8
 80123ea:	60f8      	str	r0, [r7, #12]
 80123ec:	60b9      	str	r1, [r7, #8]
 80123ee:	607a      	str	r2, [r7, #4]
 80123f0:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 80123f2:	68fb      	ldr	r3, [r7, #12]
 80123f4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80123f8:	2b06      	cmp	r3, #6
 80123fa:	d006      	beq.n	801240a <etharp_update_arp_entry+0x26>
 80123fc:	4b48      	ldr	r3, [pc, #288]	; (8012520 <etharp_update_arp_entry+0x13c>)
 80123fe:	f240 12a9 	movw	r2, #425	; 0x1a9
 8012402:	4948      	ldr	r1, [pc, #288]	; (8012524 <etharp_update_arp_entry+0x140>)
 8012404:	4848      	ldr	r0, [pc, #288]	; (8012528 <etharp_update_arp_entry+0x144>)
 8012406:	f002 f8bd 	bl	8014584 <iprintf>
=======
 80123b4:	b580      	push	{r7, lr}
 80123b6:	b088      	sub	sp, #32
 80123b8:	af02      	add	r7, sp, #8
 80123ba:	60f8      	str	r0, [r7, #12]
 80123bc:	60b9      	str	r1, [r7, #8]
 80123be:	607a      	str	r2, [r7, #4]
 80123c0:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 80123c2:	68fb      	ldr	r3, [r7, #12]
 80123c4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80123c8:	2b06      	cmp	r3, #6
 80123ca:	d006      	beq.n	80123da <etharp_update_arp_entry+0x26>
 80123cc:	4b48      	ldr	r3, [pc, #288]	; (80124f0 <etharp_update_arp_entry+0x13c>)
 80123ce:	f240 12a9 	movw	r2, #425	; 0x1a9
 80123d2:	4948      	ldr	r1, [pc, #288]	; (80124f4 <etharp_update_arp_entry+0x140>)
 80123d4:	4848      	ldr	r0, [pc, #288]	; (80124f8 <etharp_update_arp_entry+0x144>)
 80123d6:	f002 f8bd 	bl	8014554 <iprintf>
>>>>>>> Stashed changes
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
<<<<<<< Updated upstream
 801240a:	68bb      	ldr	r3, [r7, #8]
 801240c:	2b00      	cmp	r3, #0
 801240e:	d012      	beq.n	8012436 <etharp_update_arp_entry+0x52>
 8012410:	68bb      	ldr	r3, [r7, #8]
 8012412:	681b      	ldr	r3, [r3, #0]
 8012414:	2b00      	cmp	r3, #0
 8012416:	d00e      	beq.n	8012436 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8012418:	68bb      	ldr	r3, [r7, #8]
 801241a:	681b      	ldr	r3, [r3, #0]
 801241c:	68f9      	ldr	r1, [r7, #12]
 801241e:	4618      	mov	r0, r3
 8012420:	f001 f8fe 	bl	8013620 <ip4_addr_isbroadcast_u32>
 8012424:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8012426:	2b00      	cmp	r3, #0
 8012428:	d105      	bne.n	8012436 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801242a:	68bb      	ldr	r3, [r7, #8]
 801242c:	681b      	ldr	r3, [r3, #0]
 801242e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8012432:	2be0      	cmp	r3, #224	; 0xe0
 8012434:	d102      	bne.n	801243c <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8012436:	f06f 030f 	mvn.w	r3, #15
 801243a:	e06c      	b.n	8012516 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 801243c:	78fb      	ldrb	r3, [r7, #3]
 801243e:	68fa      	ldr	r2, [r7, #12]
 8012440:	4619      	mov	r1, r3
 8012442:	68b8      	ldr	r0, [r7, #8]
 8012444:	f7ff fe56 	bl	80120f4 <etharp_find_entry>
 8012448:	4603      	mov	r3, r0
 801244a:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 801244c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8012450:	2b00      	cmp	r3, #0
 8012452:	da02      	bge.n	801245a <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8012454:	8afb      	ldrh	r3, [r7, #22]
 8012456:	b25b      	sxtb	r3, r3
 8012458:	e05d      	b.n	8012516 <etharp_update_arp_entry+0x132>
=======
 80123da:	68bb      	ldr	r3, [r7, #8]
 80123dc:	2b00      	cmp	r3, #0
 80123de:	d012      	beq.n	8012406 <etharp_update_arp_entry+0x52>
 80123e0:	68bb      	ldr	r3, [r7, #8]
 80123e2:	681b      	ldr	r3, [r3, #0]
 80123e4:	2b00      	cmp	r3, #0
 80123e6:	d00e      	beq.n	8012406 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80123e8:	68bb      	ldr	r3, [r7, #8]
 80123ea:	681b      	ldr	r3, [r3, #0]
 80123ec:	68f9      	ldr	r1, [r7, #12]
 80123ee:	4618      	mov	r0, r3
 80123f0:	f001 f8fe 	bl	80135f0 <ip4_addr_isbroadcast_u32>
 80123f4:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 80123f6:	2b00      	cmp	r3, #0
 80123f8:	d105      	bne.n	8012406 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 80123fa:	68bb      	ldr	r3, [r7, #8]
 80123fc:	681b      	ldr	r3, [r3, #0]
 80123fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8012402:	2be0      	cmp	r3, #224	; 0xe0
 8012404:	d102      	bne.n	801240c <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8012406:	f06f 030f 	mvn.w	r3, #15
 801240a:	e06c      	b.n	80124e6 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 801240c:	78fb      	ldrb	r3, [r7, #3]
 801240e:	68fa      	ldr	r2, [r7, #12]
 8012410:	4619      	mov	r1, r3
 8012412:	68b8      	ldr	r0, [r7, #8]
 8012414:	f7ff fe56 	bl	80120c4 <etharp_find_entry>
 8012418:	4603      	mov	r3, r0
 801241a:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 801241c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8012420:	2b00      	cmp	r3, #0
 8012422:	da02      	bge.n	801242a <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8012424:	8afb      	ldrh	r3, [r7, #22]
 8012426:	b25b      	sxtb	r3, r3
 8012428:	e05d      	b.n	80124e6 <etharp_update_arp_entry+0x132>
>>>>>>> Stashed changes
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
<<<<<<< Updated upstream
 801245a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801245e:	4933      	ldr	r1, [pc, #204]	; (801252c <etharp_update_arp_entry+0x148>)
 8012460:	4613      	mov	r3, r2
 8012462:	005b      	lsls	r3, r3, #1
 8012464:	4413      	add	r3, r2
 8012466:	00db      	lsls	r3, r3, #3
 8012468:	440b      	add	r3, r1
 801246a:	3314      	adds	r3, #20
 801246c:	2202      	movs	r2, #2
 801246e:	701a      	strb	r2, [r3, #0]
=======
 801242a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801242e:	4933      	ldr	r1, [pc, #204]	; (80124fc <etharp_update_arp_entry+0x148>)
 8012430:	4613      	mov	r3, r2
 8012432:	005b      	lsls	r3, r3, #1
 8012434:	4413      	add	r3, r2
 8012436:	00db      	lsls	r3, r3, #3
 8012438:	440b      	add	r3, r1
 801243a:	3314      	adds	r3, #20
 801243c:	2202      	movs	r2, #2
 801243e:	701a      	strb	r2, [r3, #0]
>>>>>>> Stashed changes
  }

  /* record network interface */
  arp_table[i].netif = netif;
<<<<<<< Updated upstream
 8012470:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012474:	492d      	ldr	r1, [pc, #180]	; (801252c <etharp_update_arp_entry+0x148>)
 8012476:	4613      	mov	r3, r2
 8012478:	005b      	lsls	r3, r3, #1
 801247a:	4413      	add	r3, r2
 801247c:	00db      	lsls	r3, r3, #3
 801247e:	440b      	add	r3, r1
 8012480:	3308      	adds	r3, #8
 8012482:	68fa      	ldr	r2, [r7, #12]
 8012484:	601a      	str	r2, [r3, #0]
=======
 8012440:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012444:	492d      	ldr	r1, [pc, #180]	; (80124fc <etharp_update_arp_entry+0x148>)
 8012446:	4613      	mov	r3, r2
 8012448:	005b      	lsls	r3, r3, #1
 801244a:	4413      	add	r3, r2
 801244c:	00db      	lsls	r3, r3, #3
 801244e:	440b      	add	r3, r1
 8012450:	3308      	adds	r3, #8
 8012452:	68fa      	ldr	r2, [r7, #12]
 8012454:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
<<<<<<< Updated upstream
 8012486:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801248a:	4613      	mov	r3, r2
 801248c:	005b      	lsls	r3, r3, #1
 801248e:	4413      	add	r3, r2
 8012490:	00db      	lsls	r3, r3, #3
 8012492:	3308      	adds	r3, #8
 8012494:	4a25      	ldr	r2, [pc, #148]	; (801252c <etharp_update_arp_entry+0x148>)
 8012496:	4413      	add	r3, r2
 8012498:	3304      	adds	r3, #4
 801249a:	2206      	movs	r2, #6
 801249c:	6879      	ldr	r1, [r7, #4]
 801249e:	4618      	mov	r0, r3
 80124a0:	f002 f840 	bl	8014524 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 80124a4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80124a8:	4920      	ldr	r1, [pc, #128]	; (801252c <etharp_update_arp_entry+0x148>)
 80124aa:	4613      	mov	r3, r2
 80124ac:	005b      	lsls	r3, r3, #1
 80124ae:	4413      	add	r3, r2
 80124b0:	00db      	lsls	r3, r3, #3
 80124b2:	440b      	add	r3, r1
 80124b4:	3312      	adds	r3, #18
 80124b6:	2200      	movs	r2, #0
 80124b8:	801a      	strh	r2, [r3, #0]
=======
 8012456:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801245a:	4613      	mov	r3, r2
 801245c:	005b      	lsls	r3, r3, #1
 801245e:	4413      	add	r3, r2
 8012460:	00db      	lsls	r3, r3, #3
 8012462:	3308      	adds	r3, #8
 8012464:	4a25      	ldr	r2, [pc, #148]	; (80124fc <etharp_update_arp_entry+0x148>)
 8012466:	4413      	add	r3, r2
 8012468:	3304      	adds	r3, #4
 801246a:	2206      	movs	r2, #6
 801246c:	6879      	ldr	r1, [r7, #4]
 801246e:	4618      	mov	r0, r3
 8012470:	f002 f840 	bl	80144f4 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8012474:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012478:	4920      	ldr	r1, [pc, #128]	; (80124fc <etharp_update_arp_entry+0x148>)
 801247a:	4613      	mov	r3, r2
 801247c:	005b      	lsls	r3, r3, #1
 801247e:	4413      	add	r3, r2
 8012480:	00db      	lsls	r3, r3, #3
 8012482:	440b      	add	r3, r1
 8012484:	3312      	adds	r3, #18
 8012486:	2200      	movs	r2, #0
 8012488:	801a      	strh	r2, [r3, #0]
>>>>>>> Stashed changes
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
<<<<<<< Updated upstream
 80124ba:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80124be:	491b      	ldr	r1, [pc, #108]	; (801252c <etharp_update_arp_entry+0x148>)
 80124c0:	4613      	mov	r3, r2
 80124c2:	005b      	lsls	r3, r3, #1
 80124c4:	4413      	add	r3, r2
 80124c6:	00db      	lsls	r3, r3, #3
 80124c8:	440b      	add	r3, r1
 80124ca:	681b      	ldr	r3, [r3, #0]
 80124cc:	2b00      	cmp	r3, #0
 80124ce:	d021      	beq.n	8012514 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 80124d0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80124d4:	4915      	ldr	r1, [pc, #84]	; (801252c <etharp_update_arp_entry+0x148>)
 80124d6:	4613      	mov	r3, r2
 80124d8:	005b      	lsls	r3, r3, #1
 80124da:	4413      	add	r3, r2
 80124dc:	00db      	lsls	r3, r3, #3
 80124de:	440b      	add	r3, r1
 80124e0:	681b      	ldr	r3, [r3, #0]
 80124e2:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 80124e4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80124e8:	4910      	ldr	r1, [pc, #64]	; (801252c <etharp_update_arp_entry+0x148>)
 80124ea:	4613      	mov	r3, r2
 80124ec:	005b      	lsls	r3, r3, #1
 80124ee:	4413      	add	r3, r2
 80124f0:	00db      	lsls	r3, r3, #3
 80124f2:	440b      	add	r3, r1
 80124f4:	2200      	movs	r2, #0
 80124f6:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80124f8:	68fb      	ldr	r3, [r7, #12]
 80124fa:	f103 0226 	add.w	r2, r3, #38	; 0x26
 80124fe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8012502:	9300      	str	r3, [sp, #0]
 8012504:	687b      	ldr	r3, [r7, #4]
 8012506:	6939      	ldr	r1, [r7, #16]
 8012508:	68f8      	ldr	r0, [r7, #12]
 801250a:	f001 ff91 	bl	8014430 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801250e:	6938      	ldr	r0, [r7, #16]
 8012510:	f7f9 fe6e 	bl	800c1f0 <pbuf_free>
  }
  return ERR_OK;
 8012514:	2300      	movs	r3, #0
}
 8012516:	4618      	mov	r0, r3
 8012518:	3718      	adds	r7, #24
 801251a:	46bd      	mov	sp, r7
 801251c:	bd80      	pop	{r7, pc}
 801251e:	bf00      	nop
 8012520:	08017c78 	.word	0x08017c78
 8012524:	08017d70 	.word	0x08017d70
 8012528:	08017cf0 	.word	0x08017cf0
 801252c:	20000128 	.word	0x20000128

08012530 <etharp_cleanup_netif>:
=======
 801248a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801248e:	491b      	ldr	r1, [pc, #108]	; (80124fc <etharp_update_arp_entry+0x148>)
 8012490:	4613      	mov	r3, r2
 8012492:	005b      	lsls	r3, r3, #1
 8012494:	4413      	add	r3, r2
 8012496:	00db      	lsls	r3, r3, #3
 8012498:	440b      	add	r3, r1
 801249a:	681b      	ldr	r3, [r3, #0]
 801249c:	2b00      	cmp	r3, #0
 801249e:	d021      	beq.n	80124e4 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 80124a0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80124a4:	4915      	ldr	r1, [pc, #84]	; (80124fc <etharp_update_arp_entry+0x148>)
 80124a6:	4613      	mov	r3, r2
 80124a8:	005b      	lsls	r3, r3, #1
 80124aa:	4413      	add	r3, r2
 80124ac:	00db      	lsls	r3, r3, #3
 80124ae:	440b      	add	r3, r1
 80124b0:	681b      	ldr	r3, [r3, #0]
 80124b2:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 80124b4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80124b8:	4910      	ldr	r1, [pc, #64]	; (80124fc <etharp_update_arp_entry+0x148>)
 80124ba:	4613      	mov	r3, r2
 80124bc:	005b      	lsls	r3, r3, #1
 80124be:	4413      	add	r3, r2
 80124c0:	00db      	lsls	r3, r3, #3
 80124c2:	440b      	add	r3, r1
 80124c4:	2200      	movs	r2, #0
 80124c6:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80124c8:	68fb      	ldr	r3, [r7, #12]
 80124ca:	f103 0226 	add.w	r2, r3, #38	; 0x26
 80124ce:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80124d2:	9300      	str	r3, [sp, #0]
 80124d4:	687b      	ldr	r3, [r7, #4]
 80124d6:	6939      	ldr	r1, [r7, #16]
 80124d8:	68f8      	ldr	r0, [r7, #12]
 80124da:	f001 ff91 	bl	8014400 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 80124de:	6938      	ldr	r0, [r7, #16]
 80124e0:	f7f9 fe6e 	bl	800c1c0 <pbuf_free>
  }
  return ERR_OK;
 80124e4:	2300      	movs	r3, #0
}
 80124e6:	4618      	mov	r0, r3
 80124e8:	3718      	adds	r7, #24
 80124ea:	46bd      	mov	sp, r7
 80124ec:	bd80      	pop	{r7, pc}
 80124ee:	bf00      	nop
 80124f0:	08017c5c 	.word	0x08017c5c
 80124f4:	08017d54 	.word	0x08017d54
 80124f8:	08017cd4 	.word	0x08017cd4
 80124fc:	20000128 	.word	0x20000128

08012500 <etharp_cleanup_netif>:
>>>>>>> Stashed changes
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
<<<<<<< Updated upstream
 8012530:	b580      	push	{r7, lr}
 8012532:	b084      	sub	sp, #16
 8012534:	af00      	add	r7, sp, #0
 8012536:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012538:	2300      	movs	r3, #0
 801253a:	60fb      	str	r3, [r7, #12]
 801253c:	e01e      	b.n	801257c <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801253e:	4913      	ldr	r1, [pc, #76]	; (801258c <etharp_cleanup_netif+0x5c>)
 8012540:	68fa      	ldr	r2, [r7, #12]
 8012542:	4613      	mov	r3, r2
 8012544:	005b      	lsls	r3, r3, #1
 8012546:	4413      	add	r3, r2
 8012548:	00db      	lsls	r3, r3, #3
 801254a:	440b      	add	r3, r1
 801254c:	3314      	adds	r3, #20
 801254e:	781b      	ldrb	r3, [r3, #0]
 8012550:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8012552:	7afb      	ldrb	r3, [r7, #11]
 8012554:	2b00      	cmp	r3, #0
 8012556:	d00e      	beq.n	8012576 <etharp_cleanup_netif+0x46>
 8012558:	490c      	ldr	r1, [pc, #48]	; (801258c <etharp_cleanup_netif+0x5c>)
 801255a:	68fa      	ldr	r2, [r7, #12]
 801255c:	4613      	mov	r3, r2
 801255e:	005b      	lsls	r3, r3, #1
 8012560:	4413      	add	r3, r2
 8012562:	00db      	lsls	r3, r3, #3
 8012564:	440b      	add	r3, r1
 8012566:	3308      	adds	r3, #8
 8012568:	681b      	ldr	r3, [r3, #0]
 801256a:	687a      	ldr	r2, [r7, #4]
 801256c:	429a      	cmp	r2, r3
 801256e:	d102      	bne.n	8012576 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8012570:	68f8      	ldr	r0, [r7, #12]
 8012572:	f7ff fce5 	bl	8011f40 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012576:	68fb      	ldr	r3, [r7, #12]
 8012578:	3301      	adds	r3, #1
 801257a:	60fb      	str	r3, [r7, #12]
 801257c:	68fb      	ldr	r3, [r7, #12]
 801257e:	2b09      	cmp	r3, #9
 8012580:	dddd      	ble.n	801253e <etharp_cleanup_netif+0xe>
    }
  }
}
 8012582:	bf00      	nop
 8012584:	bf00      	nop
 8012586:	3710      	adds	r7, #16
 8012588:	46bd      	mov	sp, r7
 801258a:	bd80      	pop	{r7, pc}
 801258c:	20000128 	.word	0x20000128

08012590 <etharp_input>:
=======
 8012500:	b580      	push	{r7, lr}
 8012502:	b084      	sub	sp, #16
 8012504:	af00      	add	r7, sp, #0
 8012506:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012508:	2300      	movs	r3, #0
 801250a:	60fb      	str	r3, [r7, #12]
 801250c:	e01e      	b.n	801254c <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801250e:	4913      	ldr	r1, [pc, #76]	; (801255c <etharp_cleanup_netif+0x5c>)
 8012510:	68fa      	ldr	r2, [r7, #12]
 8012512:	4613      	mov	r3, r2
 8012514:	005b      	lsls	r3, r3, #1
 8012516:	4413      	add	r3, r2
 8012518:	00db      	lsls	r3, r3, #3
 801251a:	440b      	add	r3, r1
 801251c:	3314      	adds	r3, #20
 801251e:	781b      	ldrb	r3, [r3, #0]
 8012520:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8012522:	7afb      	ldrb	r3, [r7, #11]
 8012524:	2b00      	cmp	r3, #0
 8012526:	d00e      	beq.n	8012546 <etharp_cleanup_netif+0x46>
 8012528:	490c      	ldr	r1, [pc, #48]	; (801255c <etharp_cleanup_netif+0x5c>)
 801252a:	68fa      	ldr	r2, [r7, #12]
 801252c:	4613      	mov	r3, r2
 801252e:	005b      	lsls	r3, r3, #1
 8012530:	4413      	add	r3, r2
 8012532:	00db      	lsls	r3, r3, #3
 8012534:	440b      	add	r3, r1
 8012536:	3308      	adds	r3, #8
 8012538:	681b      	ldr	r3, [r3, #0]
 801253a:	687a      	ldr	r2, [r7, #4]
 801253c:	429a      	cmp	r2, r3
 801253e:	d102      	bne.n	8012546 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8012540:	68f8      	ldr	r0, [r7, #12]
 8012542:	f7ff fce5 	bl	8011f10 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012546:	68fb      	ldr	r3, [r7, #12]
 8012548:	3301      	adds	r3, #1
 801254a:	60fb      	str	r3, [r7, #12]
 801254c:	68fb      	ldr	r3, [r7, #12]
 801254e:	2b09      	cmp	r3, #9
 8012550:	dddd      	ble.n	801250e <etharp_cleanup_netif+0xe>
    }
  }
}
 8012552:	bf00      	nop
 8012554:	bf00      	nop
 8012556:	3710      	adds	r7, #16
 8012558:	46bd      	mov	sp, r7
 801255a:	bd80      	pop	{r7, pc}
 801255c:	20000128 	.word	0x20000128

08012560 <etharp_input>:
>>>>>>> Stashed changes
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
<<<<<<< Updated upstream
 8012590:	b5b0      	push	{r4, r5, r7, lr}
 8012592:	b08a      	sub	sp, #40	; 0x28
 8012594:	af04      	add	r7, sp, #16
 8012596:	6078      	str	r0, [r7, #4]
 8012598:	6039      	str	r1, [r7, #0]
=======
 8012560:	b5b0      	push	{r4, r5, r7, lr}
 8012562:	b08a      	sub	sp, #40	; 0x28
 8012564:	af04      	add	r7, sp, #16
 8012566:	6078      	str	r0, [r7, #4]
 8012568:	6039      	str	r1, [r7, #0]
>>>>>>> Stashed changes
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
<<<<<<< Updated upstream
 801259a:	683b      	ldr	r3, [r7, #0]
 801259c:	2b00      	cmp	r3, #0
 801259e:	d107      	bne.n	80125b0 <etharp_input+0x20>
 80125a0:	4b3d      	ldr	r3, [pc, #244]	; (8012698 <etharp_input+0x108>)
 80125a2:	f240 228a 	movw	r2, #650	; 0x28a
 80125a6:	493d      	ldr	r1, [pc, #244]	; (801269c <etharp_input+0x10c>)
 80125a8:	483d      	ldr	r0, [pc, #244]	; (80126a0 <etharp_input+0x110>)
 80125aa:	f001 ffeb 	bl	8014584 <iprintf>
 80125ae:	e06f      	b.n	8012690 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 80125b0:	687b      	ldr	r3, [r7, #4]
 80125b2:	685b      	ldr	r3, [r3, #4]
 80125b4:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80125b6:	693b      	ldr	r3, [r7, #16]
 80125b8:	881b      	ldrh	r3, [r3, #0]
 80125ba:	b29b      	uxth	r3, r3
 80125bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80125c0:	d10c      	bne.n	80125dc <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80125c2:	693b      	ldr	r3, [r7, #16]
 80125c4:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80125c6:	2b06      	cmp	r3, #6
 80125c8:	d108      	bne.n	80125dc <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80125ca:	693b      	ldr	r3, [r7, #16]
 80125cc:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80125ce:	2b04      	cmp	r3, #4
 80125d0:	d104      	bne.n	80125dc <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 80125d2:	693b      	ldr	r3, [r7, #16]
 80125d4:	885b      	ldrh	r3, [r3, #2]
 80125d6:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80125d8:	2b08      	cmp	r3, #8
 80125da:	d003      	beq.n	80125e4 <etharp_input+0x54>
=======
 801256a:	683b      	ldr	r3, [r7, #0]
 801256c:	2b00      	cmp	r3, #0
 801256e:	d107      	bne.n	8012580 <etharp_input+0x20>
 8012570:	4b3d      	ldr	r3, [pc, #244]	; (8012668 <etharp_input+0x108>)
 8012572:	f240 228a 	movw	r2, #650	; 0x28a
 8012576:	493d      	ldr	r1, [pc, #244]	; (801266c <etharp_input+0x10c>)
 8012578:	483d      	ldr	r0, [pc, #244]	; (8012670 <etharp_input+0x110>)
 801257a:	f001 ffeb 	bl	8014554 <iprintf>
 801257e:	e06f      	b.n	8012660 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8012580:	687b      	ldr	r3, [r7, #4]
 8012582:	685b      	ldr	r3, [r3, #4]
 8012584:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8012586:	693b      	ldr	r3, [r7, #16]
 8012588:	881b      	ldrh	r3, [r3, #0]
 801258a:	b29b      	uxth	r3, r3
 801258c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012590:	d10c      	bne.n	80125ac <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8012592:	693b      	ldr	r3, [r7, #16]
 8012594:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8012596:	2b06      	cmp	r3, #6
 8012598:	d108      	bne.n	80125ac <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801259a:	693b      	ldr	r3, [r7, #16]
 801259c:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801259e:	2b04      	cmp	r3, #4
 80125a0:	d104      	bne.n	80125ac <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 80125a2:	693b      	ldr	r3, [r7, #16]
 80125a4:	885b      	ldrh	r3, [r3, #2]
 80125a6:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80125a8:	2b08      	cmp	r3, #8
 80125aa:	d003      	beq.n	80125b4 <etharp_input+0x54>
>>>>>>> Stashed changes
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
<<<<<<< Updated upstream
 80125dc:	6878      	ldr	r0, [r7, #4]
 80125de:	f7f9 fe07 	bl	800c1f0 <pbuf_free>
    return;
 80125e2:	e055      	b.n	8012690 <etharp_input+0x100>
=======
 80125ac:	6878      	ldr	r0, [r7, #4]
 80125ae:	f7f9 fe07 	bl	800c1c0 <pbuf_free>
    return;
 80125b2:	e055      	b.n	8012660 <etharp_input+0x100>
>>>>>>> Stashed changes
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
<<<<<<< Updated upstream
 80125e4:	693b      	ldr	r3, [r7, #16]
 80125e6:	330e      	adds	r3, #14
 80125e8:	681b      	ldr	r3, [r3, #0]
 80125ea:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 80125ec:	693b      	ldr	r3, [r7, #16]
 80125ee:	3318      	adds	r3, #24
 80125f0:	681b      	ldr	r3, [r3, #0]
 80125f2:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80125f4:	683b      	ldr	r3, [r7, #0]
 80125f6:	3304      	adds	r3, #4
 80125f8:	681b      	ldr	r3, [r3, #0]
 80125fa:	2b00      	cmp	r3, #0
 80125fc:	d102      	bne.n	8012604 <etharp_input+0x74>
    for_us = 0;
 80125fe:	2300      	movs	r3, #0
 8012600:	75fb      	strb	r3, [r7, #23]
 8012602:	e009      	b.n	8012618 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8012604:	68ba      	ldr	r2, [r7, #8]
 8012606:	683b      	ldr	r3, [r7, #0]
 8012608:	3304      	adds	r3, #4
 801260a:	681b      	ldr	r3, [r3, #0]
 801260c:	429a      	cmp	r2, r3
 801260e:	bf0c      	ite	eq
 8012610:	2301      	moveq	r3, #1
 8012612:	2300      	movne	r3, #0
 8012614:	b2db      	uxtb	r3, r3
 8012616:	75fb      	strb	r3, [r7, #23]
=======
 80125b4:	693b      	ldr	r3, [r7, #16]
 80125b6:	330e      	adds	r3, #14
 80125b8:	681b      	ldr	r3, [r3, #0]
 80125ba:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 80125bc:	693b      	ldr	r3, [r7, #16]
 80125be:	3318      	adds	r3, #24
 80125c0:	681b      	ldr	r3, [r3, #0]
 80125c2:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80125c4:	683b      	ldr	r3, [r7, #0]
 80125c6:	3304      	adds	r3, #4
 80125c8:	681b      	ldr	r3, [r3, #0]
 80125ca:	2b00      	cmp	r3, #0
 80125cc:	d102      	bne.n	80125d4 <etharp_input+0x74>
    for_us = 0;
 80125ce:	2300      	movs	r3, #0
 80125d0:	75fb      	strb	r3, [r7, #23]
 80125d2:	e009      	b.n	80125e8 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 80125d4:	68ba      	ldr	r2, [r7, #8]
 80125d6:	683b      	ldr	r3, [r7, #0]
 80125d8:	3304      	adds	r3, #4
 80125da:	681b      	ldr	r3, [r3, #0]
 80125dc:	429a      	cmp	r2, r3
 80125de:	bf0c      	ite	eq
 80125e0:	2301      	moveq	r3, #1
 80125e2:	2300      	movne	r3, #0
 80125e4:	b2db      	uxtb	r3, r3
 80125e6:	75fb      	strb	r3, [r7, #23]
>>>>>>> Stashed changes
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
<<<<<<< Updated upstream
 8012618:	693b      	ldr	r3, [r7, #16]
 801261a:	f103 0208 	add.w	r2, r3, #8
 801261e:	7dfb      	ldrb	r3, [r7, #23]
 8012620:	2b00      	cmp	r3, #0
 8012622:	d001      	beq.n	8012628 <etharp_input+0x98>
 8012624:	2301      	movs	r3, #1
 8012626:	e000      	b.n	801262a <etharp_input+0x9a>
 8012628:	2302      	movs	r3, #2
 801262a:	f107 010c 	add.w	r1, r7, #12
 801262e:	6838      	ldr	r0, [r7, #0]
 8012630:	f7ff fed8 	bl	80123e4 <etharp_update_arp_entry>
=======
 80125e8:	693b      	ldr	r3, [r7, #16]
 80125ea:	f103 0208 	add.w	r2, r3, #8
 80125ee:	7dfb      	ldrb	r3, [r7, #23]
 80125f0:	2b00      	cmp	r3, #0
 80125f2:	d001      	beq.n	80125f8 <etharp_input+0x98>
 80125f4:	2301      	movs	r3, #1
 80125f6:	e000      	b.n	80125fa <etharp_input+0x9a>
 80125f8:	2302      	movs	r3, #2
 80125fa:	f107 010c 	add.w	r1, r7, #12
 80125fe:	6838      	ldr	r0, [r7, #0]
 8012600:	f7ff fed8 	bl	80123b4 <etharp_update_arp_entry>
>>>>>>> Stashed changes
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
<<<<<<< Updated upstream
 8012634:	693b      	ldr	r3, [r7, #16]
 8012636:	88db      	ldrh	r3, [r3, #6]
 8012638:	b29b      	uxth	r3, r3
 801263a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801263e:	d003      	beq.n	8012648 <etharp_input+0xb8>
 8012640:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012644:	d01e      	beq.n	8012684 <etharp_input+0xf4>
=======
 8012604:	693b      	ldr	r3, [r7, #16]
 8012606:	88db      	ldrh	r3, [r3, #6]
 8012608:	b29b      	uxth	r3, r3
 801260a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801260e:	d003      	beq.n	8012618 <etharp_input+0xb8>
 8012610:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012614:	d01e      	beq.n	8012654 <etharp_input+0xf4>
>>>>>>> Stashed changes
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
<<<<<<< Updated upstream
 8012646:	e020      	b.n	801268a <etharp_input+0xfa>
      if (for_us) {
 8012648:	7dfb      	ldrb	r3, [r7, #23]
 801264a:	2b00      	cmp	r3, #0
 801264c:	d01c      	beq.n	8012688 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801264e:	683b      	ldr	r3, [r7, #0]
 8012650:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8012654:	693b      	ldr	r3, [r7, #16]
 8012656:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801265a:	683b      	ldr	r3, [r7, #0]
 801265c:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8012660:	683b      	ldr	r3, [r7, #0]
 8012662:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8012664:	693a      	ldr	r2, [r7, #16]
 8012666:	3208      	adds	r2, #8
        etharp_raw(netif,
 8012668:	2102      	movs	r1, #2
 801266a:	9103      	str	r1, [sp, #12]
 801266c:	f107 010c 	add.w	r1, r7, #12
 8012670:	9102      	str	r1, [sp, #8]
 8012672:	9201      	str	r2, [sp, #4]
 8012674:	9300      	str	r3, [sp, #0]
 8012676:	462b      	mov	r3, r5
 8012678:	4622      	mov	r2, r4
 801267a:	4601      	mov	r1, r0
 801267c:	6838      	ldr	r0, [r7, #0]
 801267e:	f000 faeb 	bl	8012c58 <etharp_raw>
      break;
 8012682:	e001      	b.n	8012688 <etharp_input+0xf8>
      break;
 8012684:	bf00      	nop
 8012686:	e000      	b.n	801268a <etharp_input+0xfa>
      break;
 8012688:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801268a:	6878      	ldr	r0, [r7, #4]
 801268c:	f7f9 fdb0 	bl	800c1f0 <pbuf_free>
}
 8012690:	3718      	adds	r7, #24
 8012692:	46bd      	mov	sp, r7
 8012694:	bdb0      	pop	{r4, r5, r7, pc}
 8012696:	bf00      	nop
 8012698:	08017c78 	.word	0x08017c78
 801269c:	08017dc8 	.word	0x08017dc8
 80126a0:	08017cf0 	.word	0x08017cf0

080126a4 <etharp_output_to_arp_index>:
=======
 8012616:	e020      	b.n	801265a <etharp_input+0xfa>
      if (for_us) {
 8012618:	7dfb      	ldrb	r3, [r7, #23]
 801261a:	2b00      	cmp	r3, #0
 801261c:	d01c      	beq.n	8012658 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801261e:	683b      	ldr	r3, [r7, #0]
 8012620:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8012624:	693b      	ldr	r3, [r7, #16]
 8012626:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801262a:	683b      	ldr	r3, [r7, #0]
 801262c:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8012630:	683b      	ldr	r3, [r7, #0]
 8012632:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8012634:	693a      	ldr	r2, [r7, #16]
 8012636:	3208      	adds	r2, #8
        etharp_raw(netif,
 8012638:	2102      	movs	r1, #2
 801263a:	9103      	str	r1, [sp, #12]
 801263c:	f107 010c 	add.w	r1, r7, #12
 8012640:	9102      	str	r1, [sp, #8]
 8012642:	9201      	str	r2, [sp, #4]
 8012644:	9300      	str	r3, [sp, #0]
 8012646:	462b      	mov	r3, r5
 8012648:	4622      	mov	r2, r4
 801264a:	4601      	mov	r1, r0
 801264c:	6838      	ldr	r0, [r7, #0]
 801264e:	f000 faeb 	bl	8012c28 <etharp_raw>
      break;
 8012652:	e001      	b.n	8012658 <etharp_input+0xf8>
      break;
 8012654:	bf00      	nop
 8012656:	e000      	b.n	801265a <etharp_input+0xfa>
      break;
 8012658:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801265a:	6878      	ldr	r0, [r7, #4]
 801265c:	f7f9 fdb0 	bl	800c1c0 <pbuf_free>
}
 8012660:	3718      	adds	r7, #24
 8012662:	46bd      	mov	sp, r7
 8012664:	bdb0      	pop	{r4, r5, r7, pc}
 8012666:	bf00      	nop
 8012668:	08017c5c 	.word	0x08017c5c
 801266c:	08017dac 	.word	0x08017dac
 8012670:	08017cd4 	.word	0x08017cd4

08012674 <etharp_output_to_arp_index>:
>>>>>>> Stashed changes
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
<<<<<<< Updated upstream
 80126a4:	b580      	push	{r7, lr}
 80126a6:	b086      	sub	sp, #24
 80126a8:	af02      	add	r7, sp, #8
 80126aa:	60f8      	str	r0, [r7, #12]
 80126ac:	60b9      	str	r1, [r7, #8]
 80126ae:	4613      	mov	r3, r2
 80126b0:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80126b2:	79fa      	ldrb	r2, [r7, #7]
 80126b4:	4944      	ldr	r1, [pc, #272]	; (80127c8 <etharp_output_to_arp_index+0x124>)
 80126b6:	4613      	mov	r3, r2
 80126b8:	005b      	lsls	r3, r3, #1
 80126ba:	4413      	add	r3, r2
 80126bc:	00db      	lsls	r3, r3, #3
 80126be:	440b      	add	r3, r1
 80126c0:	3314      	adds	r3, #20
 80126c2:	781b      	ldrb	r3, [r3, #0]
 80126c4:	2b01      	cmp	r3, #1
 80126c6:	d806      	bhi.n	80126d6 <etharp_output_to_arp_index+0x32>
 80126c8:	4b40      	ldr	r3, [pc, #256]	; (80127cc <etharp_output_to_arp_index+0x128>)
 80126ca:	f240 22ee 	movw	r2, #750	; 0x2ee
 80126ce:	4940      	ldr	r1, [pc, #256]	; (80127d0 <etharp_output_to_arp_index+0x12c>)
 80126d0:	4840      	ldr	r0, [pc, #256]	; (80127d4 <etharp_output_to_arp_index+0x130>)
 80126d2:	f001 ff57 	bl	8014584 <iprintf>
=======
 8012674:	b580      	push	{r7, lr}
 8012676:	b086      	sub	sp, #24
 8012678:	af02      	add	r7, sp, #8
 801267a:	60f8      	str	r0, [r7, #12]
 801267c:	60b9      	str	r1, [r7, #8]
 801267e:	4613      	mov	r3, r2
 8012680:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8012682:	79fa      	ldrb	r2, [r7, #7]
 8012684:	4944      	ldr	r1, [pc, #272]	; (8012798 <etharp_output_to_arp_index+0x124>)
 8012686:	4613      	mov	r3, r2
 8012688:	005b      	lsls	r3, r3, #1
 801268a:	4413      	add	r3, r2
 801268c:	00db      	lsls	r3, r3, #3
 801268e:	440b      	add	r3, r1
 8012690:	3314      	adds	r3, #20
 8012692:	781b      	ldrb	r3, [r3, #0]
 8012694:	2b01      	cmp	r3, #1
 8012696:	d806      	bhi.n	80126a6 <etharp_output_to_arp_index+0x32>
 8012698:	4b40      	ldr	r3, [pc, #256]	; (801279c <etharp_output_to_arp_index+0x128>)
 801269a:	f240 22ee 	movw	r2, #750	; 0x2ee
 801269e:	4940      	ldr	r1, [pc, #256]	; (80127a0 <etharp_output_to_arp_index+0x12c>)
 80126a0:	4840      	ldr	r0, [pc, #256]	; (80127a4 <etharp_output_to_arp_index+0x130>)
 80126a2:	f001 ff57 	bl	8014554 <iprintf>
>>>>>>> Stashed changes
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
<<<<<<< Updated upstream
 80126d6:	79fa      	ldrb	r2, [r7, #7]
 80126d8:	493b      	ldr	r1, [pc, #236]	; (80127c8 <etharp_output_to_arp_index+0x124>)
 80126da:	4613      	mov	r3, r2
 80126dc:	005b      	lsls	r3, r3, #1
 80126de:	4413      	add	r3, r2
 80126e0:	00db      	lsls	r3, r3, #3
 80126e2:	440b      	add	r3, r1
 80126e4:	3314      	adds	r3, #20
 80126e6:	781b      	ldrb	r3, [r3, #0]
 80126e8:	2b02      	cmp	r3, #2
 80126ea:	d153      	bne.n	8012794 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80126ec:	79fa      	ldrb	r2, [r7, #7]
 80126ee:	4936      	ldr	r1, [pc, #216]	; (80127c8 <etharp_output_to_arp_index+0x124>)
 80126f0:	4613      	mov	r3, r2
 80126f2:	005b      	lsls	r3, r3, #1
 80126f4:	4413      	add	r3, r2
 80126f6:	00db      	lsls	r3, r3, #3
 80126f8:	440b      	add	r3, r1
 80126fa:	3312      	adds	r3, #18
 80126fc:	881b      	ldrh	r3, [r3, #0]
 80126fe:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8012702:	d919      	bls.n	8012738 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8012704:	79fa      	ldrb	r2, [r7, #7]
 8012706:	4613      	mov	r3, r2
 8012708:	005b      	lsls	r3, r3, #1
 801270a:	4413      	add	r3, r2
 801270c:	00db      	lsls	r3, r3, #3
 801270e:	4a2e      	ldr	r2, [pc, #184]	; (80127c8 <etharp_output_to_arp_index+0x124>)
 8012710:	4413      	add	r3, r2
 8012712:	3304      	adds	r3, #4
 8012714:	4619      	mov	r1, r3
 8012716:	68f8      	ldr	r0, [r7, #12]
 8012718:	f000 fb4c 	bl	8012db4 <etharp_request>
 801271c:	4603      	mov	r3, r0
 801271e:	2b00      	cmp	r3, #0
 8012720:	d138      	bne.n	8012794 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8012722:	79fa      	ldrb	r2, [r7, #7]
 8012724:	4928      	ldr	r1, [pc, #160]	; (80127c8 <etharp_output_to_arp_index+0x124>)
 8012726:	4613      	mov	r3, r2
 8012728:	005b      	lsls	r3, r3, #1
 801272a:	4413      	add	r3, r2
 801272c:	00db      	lsls	r3, r3, #3
 801272e:	440b      	add	r3, r1
 8012730:	3314      	adds	r3, #20
 8012732:	2203      	movs	r2, #3
 8012734:	701a      	strb	r2, [r3, #0]
 8012736:	e02d      	b.n	8012794 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8012738:	79fa      	ldrb	r2, [r7, #7]
 801273a:	4923      	ldr	r1, [pc, #140]	; (80127c8 <etharp_output_to_arp_index+0x124>)
 801273c:	4613      	mov	r3, r2
 801273e:	005b      	lsls	r3, r3, #1
 8012740:	4413      	add	r3, r2
 8012742:	00db      	lsls	r3, r3, #3
 8012744:	440b      	add	r3, r1
 8012746:	3312      	adds	r3, #18
 8012748:	881b      	ldrh	r3, [r3, #0]
 801274a:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 801274e:	d321      	bcc.n	8012794 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8012750:	79fa      	ldrb	r2, [r7, #7]
 8012752:	4613      	mov	r3, r2
 8012754:	005b      	lsls	r3, r3, #1
 8012756:	4413      	add	r3, r2
 8012758:	00db      	lsls	r3, r3, #3
 801275a:	4a1b      	ldr	r2, [pc, #108]	; (80127c8 <etharp_output_to_arp_index+0x124>)
 801275c:	4413      	add	r3, r2
 801275e:	1d19      	adds	r1, r3, #4
 8012760:	79fa      	ldrb	r2, [r7, #7]
 8012762:	4613      	mov	r3, r2
 8012764:	005b      	lsls	r3, r3, #1
 8012766:	4413      	add	r3, r2
 8012768:	00db      	lsls	r3, r3, #3
 801276a:	3308      	adds	r3, #8
 801276c:	4a16      	ldr	r2, [pc, #88]	; (80127c8 <etharp_output_to_arp_index+0x124>)
 801276e:	4413      	add	r3, r2
 8012770:	3304      	adds	r3, #4
 8012772:	461a      	mov	r2, r3
 8012774:	68f8      	ldr	r0, [r7, #12]
 8012776:	f000 fafb 	bl	8012d70 <etharp_request_dst>
 801277a:	4603      	mov	r3, r0
 801277c:	2b00      	cmp	r3, #0
 801277e:	d109      	bne.n	8012794 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8012780:	79fa      	ldrb	r2, [r7, #7]
 8012782:	4911      	ldr	r1, [pc, #68]	; (80127c8 <etharp_output_to_arp_index+0x124>)
 8012784:	4613      	mov	r3, r2
 8012786:	005b      	lsls	r3, r3, #1
 8012788:	4413      	add	r3, r2
 801278a:	00db      	lsls	r3, r3, #3
 801278c:	440b      	add	r3, r1
 801278e:	3314      	adds	r3, #20
 8012790:	2203      	movs	r2, #3
 8012792:	701a      	strb	r2, [r3, #0]
=======
 80126a6:	79fa      	ldrb	r2, [r7, #7]
 80126a8:	493b      	ldr	r1, [pc, #236]	; (8012798 <etharp_output_to_arp_index+0x124>)
 80126aa:	4613      	mov	r3, r2
 80126ac:	005b      	lsls	r3, r3, #1
 80126ae:	4413      	add	r3, r2
 80126b0:	00db      	lsls	r3, r3, #3
 80126b2:	440b      	add	r3, r1
 80126b4:	3314      	adds	r3, #20
 80126b6:	781b      	ldrb	r3, [r3, #0]
 80126b8:	2b02      	cmp	r3, #2
 80126ba:	d153      	bne.n	8012764 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80126bc:	79fa      	ldrb	r2, [r7, #7]
 80126be:	4936      	ldr	r1, [pc, #216]	; (8012798 <etharp_output_to_arp_index+0x124>)
 80126c0:	4613      	mov	r3, r2
 80126c2:	005b      	lsls	r3, r3, #1
 80126c4:	4413      	add	r3, r2
 80126c6:	00db      	lsls	r3, r3, #3
 80126c8:	440b      	add	r3, r1
 80126ca:	3312      	adds	r3, #18
 80126cc:	881b      	ldrh	r3, [r3, #0]
 80126ce:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 80126d2:	d919      	bls.n	8012708 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 80126d4:	79fa      	ldrb	r2, [r7, #7]
 80126d6:	4613      	mov	r3, r2
 80126d8:	005b      	lsls	r3, r3, #1
 80126da:	4413      	add	r3, r2
 80126dc:	00db      	lsls	r3, r3, #3
 80126de:	4a2e      	ldr	r2, [pc, #184]	; (8012798 <etharp_output_to_arp_index+0x124>)
 80126e0:	4413      	add	r3, r2
 80126e2:	3304      	adds	r3, #4
 80126e4:	4619      	mov	r1, r3
 80126e6:	68f8      	ldr	r0, [r7, #12]
 80126e8:	f000 fb4c 	bl	8012d84 <etharp_request>
 80126ec:	4603      	mov	r3, r0
 80126ee:	2b00      	cmp	r3, #0
 80126f0:	d138      	bne.n	8012764 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80126f2:	79fa      	ldrb	r2, [r7, #7]
 80126f4:	4928      	ldr	r1, [pc, #160]	; (8012798 <etharp_output_to_arp_index+0x124>)
 80126f6:	4613      	mov	r3, r2
 80126f8:	005b      	lsls	r3, r3, #1
 80126fa:	4413      	add	r3, r2
 80126fc:	00db      	lsls	r3, r3, #3
 80126fe:	440b      	add	r3, r1
 8012700:	3314      	adds	r3, #20
 8012702:	2203      	movs	r2, #3
 8012704:	701a      	strb	r2, [r3, #0]
 8012706:	e02d      	b.n	8012764 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8012708:	79fa      	ldrb	r2, [r7, #7]
 801270a:	4923      	ldr	r1, [pc, #140]	; (8012798 <etharp_output_to_arp_index+0x124>)
 801270c:	4613      	mov	r3, r2
 801270e:	005b      	lsls	r3, r3, #1
 8012710:	4413      	add	r3, r2
 8012712:	00db      	lsls	r3, r3, #3
 8012714:	440b      	add	r3, r1
 8012716:	3312      	adds	r3, #18
 8012718:	881b      	ldrh	r3, [r3, #0]
 801271a:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 801271e:	d321      	bcc.n	8012764 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8012720:	79fa      	ldrb	r2, [r7, #7]
 8012722:	4613      	mov	r3, r2
 8012724:	005b      	lsls	r3, r3, #1
 8012726:	4413      	add	r3, r2
 8012728:	00db      	lsls	r3, r3, #3
 801272a:	4a1b      	ldr	r2, [pc, #108]	; (8012798 <etharp_output_to_arp_index+0x124>)
 801272c:	4413      	add	r3, r2
 801272e:	1d19      	adds	r1, r3, #4
 8012730:	79fa      	ldrb	r2, [r7, #7]
 8012732:	4613      	mov	r3, r2
 8012734:	005b      	lsls	r3, r3, #1
 8012736:	4413      	add	r3, r2
 8012738:	00db      	lsls	r3, r3, #3
 801273a:	3308      	adds	r3, #8
 801273c:	4a16      	ldr	r2, [pc, #88]	; (8012798 <etharp_output_to_arp_index+0x124>)
 801273e:	4413      	add	r3, r2
 8012740:	3304      	adds	r3, #4
 8012742:	461a      	mov	r2, r3
 8012744:	68f8      	ldr	r0, [r7, #12]
 8012746:	f000 fafb 	bl	8012d40 <etharp_request_dst>
 801274a:	4603      	mov	r3, r0
 801274c:	2b00      	cmp	r3, #0
 801274e:	d109      	bne.n	8012764 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8012750:	79fa      	ldrb	r2, [r7, #7]
 8012752:	4911      	ldr	r1, [pc, #68]	; (8012798 <etharp_output_to_arp_index+0x124>)
 8012754:	4613      	mov	r3, r2
 8012756:	005b      	lsls	r3, r3, #1
 8012758:	4413      	add	r3, r2
 801275a:	00db      	lsls	r3, r3, #3
 801275c:	440b      	add	r3, r1
 801275e:	3314      	adds	r3, #20
 8012760:	2203      	movs	r2, #3
 8012762:	701a      	strb	r2, [r3, #0]
>>>>>>> Stashed changes
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
<<<<<<< Updated upstream
 8012794:	68fb      	ldr	r3, [r7, #12]
 8012796:	f103 0126 	add.w	r1, r3, #38	; 0x26
 801279a:	79fa      	ldrb	r2, [r7, #7]
 801279c:	4613      	mov	r3, r2
 801279e:	005b      	lsls	r3, r3, #1
 80127a0:	4413      	add	r3, r2
 80127a2:	00db      	lsls	r3, r3, #3
 80127a4:	3308      	adds	r3, #8
 80127a6:	4a08      	ldr	r2, [pc, #32]	; (80127c8 <etharp_output_to_arp_index+0x124>)
 80127a8:	4413      	add	r3, r2
 80127aa:	3304      	adds	r3, #4
 80127ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80127b0:	9200      	str	r2, [sp, #0]
 80127b2:	460a      	mov	r2, r1
 80127b4:	68b9      	ldr	r1, [r7, #8]
 80127b6:	68f8      	ldr	r0, [r7, #12]
 80127b8:	f001 fe3a 	bl	8014430 <ethernet_output>
 80127bc:	4603      	mov	r3, r0
}
 80127be:	4618      	mov	r0, r3
 80127c0:	3710      	adds	r7, #16
 80127c2:	46bd      	mov	sp, r7
 80127c4:	bd80      	pop	{r7, pc}
 80127c6:	bf00      	nop
 80127c8:	20000128 	.word	0x20000128
 80127cc:	08017c78 	.word	0x08017c78
 80127d0:	08017de8 	.word	0x08017de8
 80127d4:	08017cf0 	.word	0x08017cf0

080127d8 <etharp_output>:
=======
 8012764:	68fb      	ldr	r3, [r7, #12]
 8012766:	f103 0126 	add.w	r1, r3, #38	; 0x26
 801276a:	79fa      	ldrb	r2, [r7, #7]
 801276c:	4613      	mov	r3, r2
 801276e:	005b      	lsls	r3, r3, #1
 8012770:	4413      	add	r3, r2
 8012772:	00db      	lsls	r3, r3, #3
 8012774:	3308      	adds	r3, #8
 8012776:	4a08      	ldr	r2, [pc, #32]	; (8012798 <etharp_output_to_arp_index+0x124>)
 8012778:	4413      	add	r3, r2
 801277a:	3304      	adds	r3, #4
 801277c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8012780:	9200      	str	r2, [sp, #0]
 8012782:	460a      	mov	r2, r1
 8012784:	68b9      	ldr	r1, [r7, #8]
 8012786:	68f8      	ldr	r0, [r7, #12]
 8012788:	f001 fe3a 	bl	8014400 <ethernet_output>
 801278c:	4603      	mov	r3, r0
}
 801278e:	4618      	mov	r0, r3
 8012790:	3710      	adds	r7, #16
 8012792:	46bd      	mov	sp, r7
 8012794:	bd80      	pop	{r7, pc}
 8012796:	bf00      	nop
 8012798:	20000128 	.word	0x20000128
 801279c:	08017c5c 	.word	0x08017c5c
 80127a0:	08017dcc 	.word	0x08017dcc
 80127a4:	08017cd4 	.word	0x08017cd4

080127a8 <etharp_output>:
>>>>>>> Stashed changes
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
<<<<<<< Updated upstream
 80127d8:	b580      	push	{r7, lr}
 80127da:	b08a      	sub	sp, #40	; 0x28
 80127dc:	af02      	add	r7, sp, #8
 80127de:	60f8      	str	r0, [r7, #12]
 80127e0:	60b9      	str	r1, [r7, #8]
 80127e2:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 80127e4:	687b      	ldr	r3, [r7, #4]
 80127e6:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80127e8:	68fb      	ldr	r3, [r7, #12]
 80127ea:	2b00      	cmp	r3, #0
 80127ec:	d106      	bne.n	80127fc <etharp_output+0x24>
 80127ee:	4b73      	ldr	r3, [pc, #460]	; (80129bc <etharp_output+0x1e4>)
 80127f0:	f240 321e 	movw	r2, #798	; 0x31e
 80127f4:	4972      	ldr	r1, [pc, #456]	; (80129c0 <etharp_output+0x1e8>)
 80127f6:	4873      	ldr	r0, [pc, #460]	; (80129c4 <etharp_output+0x1ec>)
 80127f8:	f001 fec4 	bl	8014584 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 80127fc:	68bb      	ldr	r3, [r7, #8]
 80127fe:	2b00      	cmp	r3, #0
 8012800:	d106      	bne.n	8012810 <etharp_output+0x38>
 8012802:	4b6e      	ldr	r3, [pc, #440]	; (80129bc <etharp_output+0x1e4>)
 8012804:	f240 321f 	movw	r2, #799	; 0x31f
 8012808:	496f      	ldr	r1, [pc, #444]	; (80129c8 <etharp_output+0x1f0>)
 801280a:	486e      	ldr	r0, [pc, #440]	; (80129c4 <etharp_output+0x1ec>)
 801280c:	f001 feba 	bl	8014584 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8012810:	687b      	ldr	r3, [r7, #4]
 8012812:	2b00      	cmp	r3, #0
 8012814:	d106      	bne.n	8012824 <etharp_output+0x4c>
 8012816:	4b69      	ldr	r3, [pc, #420]	; (80129bc <etharp_output+0x1e4>)
 8012818:	f44f 7248 	mov.w	r2, #800	; 0x320
 801281c:	496b      	ldr	r1, [pc, #428]	; (80129cc <etharp_output+0x1f4>)
 801281e:	4869      	ldr	r0, [pc, #420]	; (80129c4 <etharp_output+0x1ec>)
 8012820:	f001 feb0 	bl	8014584 <iprintf>
=======
 80127a8:	b580      	push	{r7, lr}
 80127aa:	b08a      	sub	sp, #40	; 0x28
 80127ac:	af02      	add	r7, sp, #8
 80127ae:	60f8      	str	r0, [r7, #12]
 80127b0:	60b9      	str	r1, [r7, #8]
 80127b2:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 80127b4:	687b      	ldr	r3, [r7, #4]
 80127b6:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80127b8:	68fb      	ldr	r3, [r7, #12]
 80127ba:	2b00      	cmp	r3, #0
 80127bc:	d106      	bne.n	80127cc <etharp_output+0x24>
 80127be:	4b73      	ldr	r3, [pc, #460]	; (801298c <etharp_output+0x1e4>)
 80127c0:	f240 321e 	movw	r2, #798	; 0x31e
 80127c4:	4972      	ldr	r1, [pc, #456]	; (8012990 <etharp_output+0x1e8>)
 80127c6:	4873      	ldr	r0, [pc, #460]	; (8012994 <etharp_output+0x1ec>)
 80127c8:	f001 fec4 	bl	8014554 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 80127cc:	68bb      	ldr	r3, [r7, #8]
 80127ce:	2b00      	cmp	r3, #0
 80127d0:	d106      	bne.n	80127e0 <etharp_output+0x38>
 80127d2:	4b6e      	ldr	r3, [pc, #440]	; (801298c <etharp_output+0x1e4>)
 80127d4:	f240 321f 	movw	r2, #799	; 0x31f
 80127d8:	496f      	ldr	r1, [pc, #444]	; (8012998 <etharp_output+0x1f0>)
 80127da:	486e      	ldr	r0, [pc, #440]	; (8012994 <etharp_output+0x1ec>)
 80127dc:	f001 feba 	bl	8014554 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 80127e0:	687b      	ldr	r3, [r7, #4]
 80127e2:	2b00      	cmp	r3, #0
 80127e4:	d106      	bne.n	80127f4 <etharp_output+0x4c>
 80127e6:	4b69      	ldr	r3, [pc, #420]	; (801298c <etharp_output+0x1e4>)
 80127e8:	f44f 7248 	mov.w	r2, #800	; 0x320
 80127ec:	496b      	ldr	r1, [pc, #428]	; (801299c <etharp_output+0x1f4>)
 80127ee:	4869      	ldr	r0, [pc, #420]	; (8012994 <etharp_output+0x1ec>)
 80127f0:	f001 feb0 	bl	8014554 <iprintf>
>>>>>>> Stashed changes

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
<<<<<<< Updated upstream
 8012824:	687b      	ldr	r3, [r7, #4]
 8012826:	681b      	ldr	r3, [r3, #0]
 8012828:	68f9      	ldr	r1, [r7, #12]
 801282a:	4618      	mov	r0, r3
 801282c:	f000 fef8 	bl	8013620 <ip4_addr_isbroadcast_u32>
 8012830:	4603      	mov	r3, r0
 8012832:	2b00      	cmp	r3, #0
 8012834:	d002      	beq.n	801283c <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8012836:	4b66      	ldr	r3, [pc, #408]	; (80129d0 <etharp_output+0x1f8>)
 8012838:	61fb      	str	r3, [r7, #28]
 801283a:	e0af      	b.n	801299c <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 801283c:	687b      	ldr	r3, [r7, #4]
 801283e:	681b      	ldr	r3, [r3, #0]
 8012840:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012844:	2be0      	cmp	r3, #224	; 0xe0
 8012846:	d118      	bne.n	801287a <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8012848:	2301      	movs	r3, #1
 801284a:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 801284c:	2300      	movs	r3, #0
 801284e:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8012850:	235e      	movs	r3, #94	; 0x5e
 8012852:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8012854:	687b      	ldr	r3, [r7, #4]
 8012856:	3301      	adds	r3, #1
 8012858:	781b      	ldrb	r3, [r3, #0]
 801285a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801285e:	b2db      	uxtb	r3, r3
 8012860:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8012862:	687b      	ldr	r3, [r7, #4]
 8012864:	3302      	adds	r3, #2
 8012866:	781b      	ldrb	r3, [r3, #0]
 8012868:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801286a:	687b      	ldr	r3, [r7, #4]
 801286c:	3303      	adds	r3, #3
 801286e:	781b      	ldrb	r3, [r3, #0]
 8012870:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8012872:	f107 0310 	add.w	r3, r7, #16
 8012876:	61fb      	str	r3, [r7, #28]
 8012878:	e090      	b.n	801299c <etharp_output+0x1c4>
=======
 80127f4:	687b      	ldr	r3, [r7, #4]
 80127f6:	681b      	ldr	r3, [r3, #0]
 80127f8:	68f9      	ldr	r1, [r7, #12]
 80127fa:	4618      	mov	r0, r3
 80127fc:	f000 fef8 	bl	80135f0 <ip4_addr_isbroadcast_u32>
 8012800:	4603      	mov	r3, r0
 8012802:	2b00      	cmp	r3, #0
 8012804:	d002      	beq.n	801280c <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8012806:	4b66      	ldr	r3, [pc, #408]	; (80129a0 <etharp_output+0x1f8>)
 8012808:	61fb      	str	r3, [r7, #28]
 801280a:	e0af      	b.n	801296c <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 801280c:	687b      	ldr	r3, [r7, #4]
 801280e:	681b      	ldr	r3, [r3, #0]
 8012810:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012814:	2be0      	cmp	r3, #224	; 0xe0
 8012816:	d118      	bne.n	801284a <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8012818:	2301      	movs	r3, #1
 801281a:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 801281c:	2300      	movs	r3, #0
 801281e:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8012820:	235e      	movs	r3, #94	; 0x5e
 8012822:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8012824:	687b      	ldr	r3, [r7, #4]
 8012826:	3301      	adds	r3, #1
 8012828:	781b      	ldrb	r3, [r3, #0]
 801282a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801282e:	b2db      	uxtb	r3, r3
 8012830:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8012832:	687b      	ldr	r3, [r7, #4]
 8012834:	3302      	adds	r3, #2
 8012836:	781b      	ldrb	r3, [r3, #0]
 8012838:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801283a:	687b      	ldr	r3, [r7, #4]
 801283c:	3303      	adds	r3, #3
 801283e:	781b      	ldrb	r3, [r3, #0]
 8012840:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8012842:	f107 0310 	add.w	r3, r7, #16
 8012846:	61fb      	str	r3, [r7, #28]
 8012848:	e090      	b.n	801296c <etharp_output+0x1c4>
>>>>>>> Stashed changes
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
<<<<<<< Updated upstream
 801287a:	687b      	ldr	r3, [r7, #4]
 801287c:	681a      	ldr	r2, [r3, #0]
 801287e:	68fb      	ldr	r3, [r7, #12]
 8012880:	3304      	adds	r3, #4
 8012882:	681b      	ldr	r3, [r3, #0]
 8012884:	405a      	eors	r2, r3
 8012886:	68fb      	ldr	r3, [r7, #12]
 8012888:	3308      	adds	r3, #8
 801288a:	681b      	ldr	r3, [r3, #0]
 801288c:	4013      	ands	r3, r2
 801288e:	2b00      	cmp	r3, #0
 8012890:	d012      	beq.n	80128b8 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8012892:	687b      	ldr	r3, [r7, #4]
 8012894:	681b      	ldr	r3, [r3, #0]
 8012896:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8012898:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 801289c:	4293      	cmp	r3, r2
 801289e:	d00b      	beq.n	80128b8 <etharp_output+0xe0>
=======
 801284a:	687b      	ldr	r3, [r7, #4]
 801284c:	681a      	ldr	r2, [r3, #0]
 801284e:	68fb      	ldr	r3, [r7, #12]
 8012850:	3304      	adds	r3, #4
 8012852:	681b      	ldr	r3, [r3, #0]
 8012854:	405a      	eors	r2, r3
 8012856:	68fb      	ldr	r3, [r7, #12]
 8012858:	3308      	adds	r3, #8
 801285a:	681b      	ldr	r3, [r3, #0]
 801285c:	4013      	ands	r3, r2
 801285e:	2b00      	cmp	r3, #0
 8012860:	d012      	beq.n	8012888 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8012862:	687b      	ldr	r3, [r7, #4]
 8012864:	681b      	ldr	r3, [r3, #0]
 8012866:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8012868:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 801286c:	4293      	cmp	r3, r2
 801286e:	d00b      	beq.n	8012888 <etharp_output+0xe0>
>>>>>>> Stashed changes
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
<<<<<<< Updated upstream
 80128a0:	68fb      	ldr	r3, [r7, #12]
 80128a2:	330c      	adds	r3, #12
 80128a4:	681b      	ldr	r3, [r3, #0]
 80128a6:	2b00      	cmp	r3, #0
 80128a8:	d003      	beq.n	80128b2 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 80128aa:	68fb      	ldr	r3, [r7, #12]
 80128ac:	330c      	adds	r3, #12
 80128ae:	61bb      	str	r3, [r7, #24]
 80128b0:	e002      	b.n	80128b8 <etharp_output+0xe0>
=======
 8012870:	68fb      	ldr	r3, [r7, #12]
 8012872:	330c      	adds	r3, #12
 8012874:	681b      	ldr	r3, [r3, #0]
 8012876:	2b00      	cmp	r3, #0
 8012878:	d003      	beq.n	8012882 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801287a:	68fb      	ldr	r3, [r7, #12]
 801287c:	330c      	adds	r3, #12
 801287e:	61bb      	str	r3, [r7, #24]
 8012880:	e002      	b.n	8012888 <etharp_output+0xe0>
>>>>>>> Stashed changes
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
<<<<<<< Updated upstream
 80128b2:	f06f 0303 	mvn.w	r3, #3
 80128b6:	e07d      	b.n	80129b4 <etharp_output+0x1dc>
=======
 8012882:	f06f 0303 	mvn.w	r3, #3
 8012886:	e07d      	b.n	8012984 <etharp_output+0x1dc>
>>>>>>> Stashed changes
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
<<<<<<< Updated upstream
 80128b8:	4b46      	ldr	r3, [pc, #280]	; (80129d4 <etharp_output+0x1fc>)
 80128ba:	781b      	ldrb	r3, [r3, #0]
 80128bc:	4619      	mov	r1, r3
 80128be:	4a46      	ldr	r2, [pc, #280]	; (80129d8 <etharp_output+0x200>)
 80128c0:	460b      	mov	r3, r1
 80128c2:	005b      	lsls	r3, r3, #1
 80128c4:	440b      	add	r3, r1
 80128c6:	00db      	lsls	r3, r3, #3
 80128c8:	4413      	add	r3, r2
 80128ca:	3314      	adds	r3, #20
 80128cc:	781b      	ldrb	r3, [r3, #0]
 80128ce:	2b01      	cmp	r3, #1
 80128d0:	d925      	bls.n	801291e <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 80128d2:	4b40      	ldr	r3, [pc, #256]	; (80129d4 <etharp_output+0x1fc>)
 80128d4:	781b      	ldrb	r3, [r3, #0]
 80128d6:	4619      	mov	r1, r3
 80128d8:	4a3f      	ldr	r2, [pc, #252]	; (80129d8 <etharp_output+0x200>)
 80128da:	460b      	mov	r3, r1
 80128dc:	005b      	lsls	r3, r3, #1
 80128de:	440b      	add	r3, r1
 80128e0:	00db      	lsls	r3, r3, #3
 80128e2:	4413      	add	r3, r2
 80128e4:	3308      	adds	r3, #8
 80128e6:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80128e8:	68fa      	ldr	r2, [r7, #12]
 80128ea:	429a      	cmp	r2, r3
 80128ec:	d117      	bne.n	801291e <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80128ee:	69bb      	ldr	r3, [r7, #24]
 80128f0:	681a      	ldr	r2, [r3, #0]
 80128f2:	4b38      	ldr	r3, [pc, #224]	; (80129d4 <etharp_output+0x1fc>)
 80128f4:	781b      	ldrb	r3, [r3, #0]
 80128f6:	4618      	mov	r0, r3
 80128f8:	4937      	ldr	r1, [pc, #220]	; (80129d8 <etharp_output+0x200>)
 80128fa:	4603      	mov	r3, r0
 80128fc:	005b      	lsls	r3, r3, #1
 80128fe:	4403      	add	r3, r0
 8012900:	00db      	lsls	r3, r3, #3
 8012902:	440b      	add	r3, r1
 8012904:	3304      	adds	r3, #4
 8012906:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8012908:	429a      	cmp	r2, r3
 801290a:	d108      	bne.n	801291e <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 801290c:	4b31      	ldr	r3, [pc, #196]	; (80129d4 <etharp_output+0x1fc>)
 801290e:	781b      	ldrb	r3, [r3, #0]
 8012910:	461a      	mov	r2, r3
 8012912:	68b9      	ldr	r1, [r7, #8]
 8012914:	68f8      	ldr	r0, [r7, #12]
 8012916:	f7ff fec5 	bl	80126a4 <etharp_output_to_arp_index>
 801291a:	4603      	mov	r3, r0
 801291c:	e04a      	b.n	80129b4 <etharp_output+0x1dc>
=======
 8012888:	4b46      	ldr	r3, [pc, #280]	; (80129a4 <etharp_output+0x1fc>)
 801288a:	781b      	ldrb	r3, [r3, #0]
 801288c:	4619      	mov	r1, r3
 801288e:	4a46      	ldr	r2, [pc, #280]	; (80129a8 <etharp_output+0x200>)
 8012890:	460b      	mov	r3, r1
 8012892:	005b      	lsls	r3, r3, #1
 8012894:	440b      	add	r3, r1
 8012896:	00db      	lsls	r3, r3, #3
 8012898:	4413      	add	r3, r2
 801289a:	3314      	adds	r3, #20
 801289c:	781b      	ldrb	r3, [r3, #0]
 801289e:	2b01      	cmp	r3, #1
 80128a0:	d925      	bls.n	80128ee <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 80128a2:	4b40      	ldr	r3, [pc, #256]	; (80129a4 <etharp_output+0x1fc>)
 80128a4:	781b      	ldrb	r3, [r3, #0]
 80128a6:	4619      	mov	r1, r3
 80128a8:	4a3f      	ldr	r2, [pc, #252]	; (80129a8 <etharp_output+0x200>)
 80128aa:	460b      	mov	r3, r1
 80128ac:	005b      	lsls	r3, r3, #1
 80128ae:	440b      	add	r3, r1
 80128b0:	00db      	lsls	r3, r3, #3
 80128b2:	4413      	add	r3, r2
 80128b4:	3308      	adds	r3, #8
 80128b6:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80128b8:	68fa      	ldr	r2, [r7, #12]
 80128ba:	429a      	cmp	r2, r3
 80128bc:	d117      	bne.n	80128ee <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80128be:	69bb      	ldr	r3, [r7, #24]
 80128c0:	681a      	ldr	r2, [r3, #0]
 80128c2:	4b38      	ldr	r3, [pc, #224]	; (80129a4 <etharp_output+0x1fc>)
 80128c4:	781b      	ldrb	r3, [r3, #0]
 80128c6:	4618      	mov	r0, r3
 80128c8:	4937      	ldr	r1, [pc, #220]	; (80129a8 <etharp_output+0x200>)
 80128ca:	4603      	mov	r3, r0
 80128cc:	005b      	lsls	r3, r3, #1
 80128ce:	4403      	add	r3, r0
 80128d0:	00db      	lsls	r3, r3, #3
 80128d2:	440b      	add	r3, r1
 80128d4:	3304      	adds	r3, #4
 80128d6:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 80128d8:	429a      	cmp	r2, r3
 80128da:	d108      	bne.n	80128ee <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 80128dc:	4b31      	ldr	r3, [pc, #196]	; (80129a4 <etharp_output+0x1fc>)
 80128de:	781b      	ldrb	r3, [r3, #0]
 80128e0:	461a      	mov	r2, r3
 80128e2:	68b9      	ldr	r1, [r7, #8]
 80128e4:	68f8      	ldr	r0, [r7, #12]
 80128e6:	f7ff fec5 	bl	8012674 <etharp_output_to_arp_index>
 80128ea:	4603      	mov	r3, r0
 80128ec:	e04a      	b.n	8012984 <etharp_output+0x1dc>
>>>>>>> Stashed changes
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
<<<<<<< Updated upstream
 801291e:	2300      	movs	r3, #0
 8012920:	75fb      	strb	r3, [r7, #23]
 8012922:	e031      	b.n	8012988 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8012924:	7dfa      	ldrb	r2, [r7, #23]
 8012926:	492c      	ldr	r1, [pc, #176]	; (80129d8 <etharp_output+0x200>)
 8012928:	4613      	mov	r3, r2
 801292a:	005b      	lsls	r3, r3, #1
 801292c:	4413      	add	r3, r2
 801292e:	00db      	lsls	r3, r3, #3
 8012930:	440b      	add	r3, r1
 8012932:	3314      	adds	r3, #20
 8012934:	781b      	ldrb	r3, [r3, #0]
 8012936:	2b01      	cmp	r3, #1
 8012938:	d923      	bls.n	8012982 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801293a:	7dfa      	ldrb	r2, [r7, #23]
 801293c:	4926      	ldr	r1, [pc, #152]	; (80129d8 <etharp_output+0x200>)
 801293e:	4613      	mov	r3, r2
 8012940:	005b      	lsls	r3, r3, #1
 8012942:	4413      	add	r3, r2
 8012944:	00db      	lsls	r3, r3, #3
 8012946:	440b      	add	r3, r1
 8012948:	3308      	adds	r3, #8
 801294a:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801294c:	68fa      	ldr	r2, [r7, #12]
 801294e:	429a      	cmp	r2, r3
 8012950:	d117      	bne.n	8012982 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8012952:	69bb      	ldr	r3, [r7, #24]
 8012954:	6819      	ldr	r1, [r3, #0]
 8012956:	7dfa      	ldrb	r2, [r7, #23]
 8012958:	481f      	ldr	r0, [pc, #124]	; (80129d8 <etharp_output+0x200>)
 801295a:	4613      	mov	r3, r2
 801295c:	005b      	lsls	r3, r3, #1
 801295e:	4413      	add	r3, r2
 8012960:	00db      	lsls	r3, r3, #3
 8012962:	4403      	add	r3, r0
 8012964:	3304      	adds	r3, #4
 8012966:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8012968:	4299      	cmp	r1, r3
 801296a:	d10a      	bne.n	8012982 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 801296c:	4a19      	ldr	r2, [pc, #100]	; (80129d4 <etharp_output+0x1fc>)
 801296e:	7dfb      	ldrb	r3, [r7, #23]
 8012970:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8012972:	7dfb      	ldrb	r3, [r7, #23]
 8012974:	461a      	mov	r2, r3
 8012976:	68b9      	ldr	r1, [r7, #8]
 8012978:	68f8      	ldr	r0, [r7, #12]
 801297a:	f7ff fe93 	bl	80126a4 <etharp_output_to_arp_index>
 801297e:	4603      	mov	r3, r0
 8012980:	e018      	b.n	80129b4 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8012982:	7dfb      	ldrb	r3, [r7, #23]
 8012984:	3301      	adds	r3, #1
 8012986:	75fb      	strb	r3, [r7, #23]
 8012988:	7dfb      	ldrb	r3, [r7, #23]
 801298a:	2b09      	cmp	r3, #9
 801298c:	d9ca      	bls.n	8012924 <etharp_output+0x14c>
=======
 80128ee:	2300      	movs	r3, #0
 80128f0:	75fb      	strb	r3, [r7, #23]
 80128f2:	e031      	b.n	8012958 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80128f4:	7dfa      	ldrb	r2, [r7, #23]
 80128f6:	492c      	ldr	r1, [pc, #176]	; (80129a8 <etharp_output+0x200>)
 80128f8:	4613      	mov	r3, r2
 80128fa:	005b      	lsls	r3, r3, #1
 80128fc:	4413      	add	r3, r2
 80128fe:	00db      	lsls	r3, r3, #3
 8012900:	440b      	add	r3, r1
 8012902:	3314      	adds	r3, #20
 8012904:	781b      	ldrb	r3, [r3, #0]
 8012906:	2b01      	cmp	r3, #1
 8012908:	d923      	bls.n	8012952 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801290a:	7dfa      	ldrb	r2, [r7, #23]
 801290c:	4926      	ldr	r1, [pc, #152]	; (80129a8 <etharp_output+0x200>)
 801290e:	4613      	mov	r3, r2
 8012910:	005b      	lsls	r3, r3, #1
 8012912:	4413      	add	r3, r2
 8012914:	00db      	lsls	r3, r3, #3
 8012916:	440b      	add	r3, r1
 8012918:	3308      	adds	r3, #8
 801291a:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801291c:	68fa      	ldr	r2, [r7, #12]
 801291e:	429a      	cmp	r2, r3
 8012920:	d117      	bne.n	8012952 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8012922:	69bb      	ldr	r3, [r7, #24]
 8012924:	6819      	ldr	r1, [r3, #0]
 8012926:	7dfa      	ldrb	r2, [r7, #23]
 8012928:	481f      	ldr	r0, [pc, #124]	; (80129a8 <etharp_output+0x200>)
 801292a:	4613      	mov	r3, r2
 801292c:	005b      	lsls	r3, r3, #1
 801292e:	4413      	add	r3, r2
 8012930:	00db      	lsls	r3, r3, #3
 8012932:	4403      	add	r3, r0
 8012934:	3304      	adds	r3, #4
 8012936:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8012938:	4299      	cmp	r1, r3
 801293a:	d10a      	bne.n	8012952 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 801293c:	4a19      	ldr	r2, [pc, #100]	; (80129a4 <etharp_output+0x1fc>)
 801293e:	7dfb      	ldrb	r3, [r7, #23]
 8012940:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8012942:	7dfb      	ldrb	r3, [r7, #23]
 8012944:	461a      	mov	r2, r3
 8012946:	68b9      	ldr	r1, [r7, #8]
 8012948:	68f8      	ldr	r0, [r7, #12]
 801294a:	f7ff fe93 	bl	8012674 <etharp_output_to_arp_index>
 801294e:	4603      	mov	r3, r0
 8012950:	e018      	b.n	8012984 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8012952:	7dfb      	ldrb	r3, [r7, #23]
 8012954:	3301      	adds	r3, #1
 8012956:	75fb      	strb	r3, [r7, #23]
 8012958:	7dfb      	ldrb	r3, [r7, #23]
 801295a:	2b09      	cmp	r3, #9
 801295c:	d9ca      	bls.n	80128f4 <etharp_output+0x14c>
>>>>>>> Stashed changes
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
<<<<<<< Updated upstream
 801298e:	68ba      	ldr	r2, [r7, #8]
 8012990:	69b9      	ldr	r1, [r7, #24]
 8012992:	68f8      	ldr	r0, [r7, #12]
 8012994:	f000 f822 	bl	80129dc <etharp_query>
 8012998:	4603      	mov	r3, r0
 801299a:	e00b      	b.n	80129b4 <etharp_output+0x1dc>
=======
 801295e:	68ba      	ldr	r2, [r7, #8]
 8012960:	69b9      	ldr	r1, [r7, #24]
 8012962:	68f8      	ldr	r0, [r7, #12]
 8012964:	f000 f822 	bl	80129ac <etharp_query>
 8012968:	4603      	mov	r3, r0
 801296a:	e00b      	b.n	8012984 <etharp_output+0x1dc>
>>>>>>> Stashed changes
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
<<<<<<< Updated upstream
 801299c:	68fb      	ldr	r3, [r7, #12]
 801299e:	f103 0226 	add.w	r2, r3, #38	; 0x26
 80129a2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80129a6:	9300      	str	r3, [sp, #0]
 80129a8:	69fb      	ldr	r3, [r7, #28]
 80129aa:	68b9      	ldr	r1, [r7, #8]
 80129ac:	68f8      	ldr	r0, [r7, #12]
 80129ae:	f001 fd3f 	bl	8014430 <ethernet_output>
 80129b2:	4603      	mov	r3, r0
}
 80129b4:	4618      	mov	r0, r3
 80129b6:	3720      	adds	r7, #32
 80129b8:	46bd      	mov	sp, r7
 80129ba:	bd80      	pop	{r7, pc}
 80129bc:	08017c78 	.word	0x08017c78
 80129c0:	08017dc8 	.word	0x08017dc8
 80129c4:	08017cf0 	.word	0x08017cf0
 80129c8:	08017e18 	.word	0x08017e18
 80129cc:	08017db8 	.word	0x08017db8
 80129d0:	08018444 	.word	0x08018444
 80129d4:	20000218 	.word	0x20000218
 80129d8:	20000128 	.word	0x20000128

080129dc <etharp_query>:
=======
 801296c:	68fb      	ldr	r3, [r7, #12]
 801296e:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8012972:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8012976:	9300      	str	r3, [sp, #0]
 8012978:	69fb      	ldr	r3, [r7, #28]
 801297a:	68b9      	ldr	r1, [r7, #8]
 801297c:	68f8      	ldr	r0, [r7, #12]
 801297e:	f001 fd3f 	bl	8014400 <ethernet_output>
 8012982:	4603      	mov	r3, r0
}
 8012984:	4618      	mov	r0, r3
 8012986:	3720      	adds	r7, #32
 8012988:	46bd      	mov	sp, r7
 801298a:	bd80      	pop	{r7, pc}
 801298c:	08017c5c 	.word	0x08017c5c
 8012990:	08017dac 	.word	0x08017dac
 8012994:	08017cd4 	.word	0x08017cd4
 8012998:	08017dfc 	.word	0x08017dfc
 801299c:	08017d9c 	.word	0x08017d9c
 80129a0:	08018428 	.word	0x08018428
 80129a4:	20000218 	.word	0x20000218
 80129a8:	20000128 	.word	0x20000128

080129ac <etharp_query>:
>>>>>>> Stashed changes
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
<<<<<<< Updated upstream
 80129dc:	b580      	push	{r7, lr}
 80129de:	b08c      	sub	sp, #48	; 0x30
 80129e0:	af02      	add	r7, sp, #8
 80129e2:	60f8      	str	r0, [r7, #12]
 80129e4:	60b9      	str	r1, [r7, #8]
 80129e6:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 80129e8:	68fb      	ldr	r3, [r7, #12]
 80129ea:	3326      	adds	r3, #38	; 0x26
 80129ec:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 80129ee:	23ff      	movs	r3, #255	; 0xff
 80129f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 80129f4:	2300      	movs	r3, #0
 80129f6:	623b      	str	r3, [r7, #32]
=======
 80129ac:	b580      	push	{r7, lr}
 80129ae:	b08c      	sub	sp, #48	; 0x30
 80129b0:	af02      	add	r7, sp, #8
 80129b2:	60f8      	str	r0, [r7, #12]
 80129b4:	60b9      	str	r1, [r7, #8]
 80129b6:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 80129b8:	68fb      	ldr	r3, [r7, #12]
 80129ba:	3326      	adds	r3, #38	; 0x26
 80129bc:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 80129be:	23ff      	movs	r3, #255	; 0xff
 80129c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 80129c4:	2300      	movs	r3, #0
 80129c6:	623b      	str	r3, [r7, #32]
>>>>>>> Stashed changes
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
<<<<<<< Updated upstream
 80129f8:	68bb      	ldr	r3, [r7, #8]
 80129fa:	681b      	ldr	r3, [r3, #0]
 80129fc:	68f9      	ldr	r1, [r7, #12]
 80129fe:	4618      	mov	r0, r3
 8012a00:	f000 fe0e 	bl	8013620 <ip4_addr_isbroadcast_u32>
 8012a04:	4603      	mov	r3, r0
 8012a06:	2b00      	cmp	r3, #0
 8012a08:	d10c      	bne.n	8012a24 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8012a0a:	68bb      	ldr	r3, [r7, #8]
 8012a0c:	681b      	ldr	r3, [r3, #0]
 8012a0e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8012a12:	2be0      	cmp	r3, #224	; 0xe0
 8012a14:	d006      	beq.n	8012a24 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8012a16:	68bb      	ldr	r3, [r7, #8]
 8012a18:	2b00      	cmp	r3, #0
 8012a1a:	d003      	beq.n	8012a24 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8012a1c:	68bb      	ldr	r3, [r7, #8]
 8012a1e:	681b      	ldr	r3, [r3, #0]
 8012a20:	2b00      	cmp	r3, #0
 8012a22:	d102      	bne.n	8012a2a <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8012a24:	f06f 030f 	mvn.w	r3, #15
 8012a28:	e101      	b.n	8012c2e <etharp_query+0x252>
=======
 80129c8:	68bb      	ldr	r3, [r7, #8]
 80129ca:	681b      	ldr	r3, [r3, #0]
 80129cc:	68f9      	ldr	r1, [r7, #12]
 80129ce:	4618      	mov	r0, r3
 80129d0:	f000 fe0e 	bl	80135f0 <ip4_addr_isbroadcast_u32>
 80129d4:	4603      	mov	r3, r0
 80129d6:	2b00      	cmp	r3, #0
 80129d8:	d10c      	bne.n	80129f4 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80129da:	68bb      	ldr	r3, [r7, #8]
 80129dc:	681b      	ldr	r3, [r3, #0]
 80129de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80129e2:	2be0      	cmp	r3, #224	; 0xe0
 80129e4:	d006      	beq.n	80129f4 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80129e6:	68bb      	ldr	r3, [r7, #8]
 80129e8:	2b00      	cmp	r3, #0
 80129ea:	d003      	beq.n	80129f4 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 80129ec:	68bb      	ldr	r3, [r7, #8]
 80129ee:	681b      	ldr	r3, [r3, #0]
 80129f0:	2b00      	cmp	r3, #0
 80129f2:	d102      	bne.n	80129fa <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80129f4:	f06f 030f 	mvn.w	r3, #15
 80129f8:	e101      	b.n	8012bfe <etharp_query+0x252>
>>>>>>> Stashed changes
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
<<<<<<< Updated upstream
 8012a2a:	68fa      	ldr	r2, [r7, #12]
 8012a2c:	2101      	movs	r1, #1
 8012a2e:	68b8      	ldr	r0, [r7, #8]
 8012a30:	f7ff fb60 	bl	80120f4 <etharp_find_entry>
 8012a34:	4603      	mov	r3, r0
 8012a36:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8012a38:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8012a3c:	2b00      	cmp	r3, #0
 8012a3e:	da02      	bge.n	8012a46 <etharp_query+0x6a>
=======
 80129fa:	68fa      	ldr	r2, [r7, #12]
 80129fc:	2101      	movs	r1, #1
 80129fe:	68b8      	ldr	r0, [r7, #8]
 8012a00:	f7ff fb60 	bl	80120c4 <etharp_find_entry>
 8012a04:	4603      	mov	r3, r0
 8012a06:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8012a08:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8012a0c:	2b00      	cmp	r3, #0
 8012a0e:	da02      	bge.n	8012a16 <etharp_query+0x6a>
>>>>>>> Stashed changes
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
<<<<<<< Updated upstream
 8012a40:	8a7b      	ldrh	r3, [r7, #18]
 8012a42:	b25b      	sxtb	r3, r3
 8012a44:	e0f3      	b.n	8012c2e <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8012a46:	8a7b      	ldrh	r3, [r7, #18]
 8012a48:	2b7e      	cmp	r3, #126	; 0x7e
 8012a4a:	d906      	bls.n	8012a5a <etharp_query+0x7e>
 8012a4c:	4b7a      	ldr	r3, [pc, #488]	; (8012c38 <etharp_query+0x25c>)
 8012a4e:	f240 32c1 	movw	r2, #961	; 0x3c1
 8012a52:	497a      	ldr	r1, [pc, #488]	; (8012c3c <etharp_query+0x260>)
 8012a54:	487a      	ldr	r0, [pc, #488]	; (8012c40 <etharp_query+0x264>)
 8012a56:	f001 fd95 	bl	8014584 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8012a5a:	8a7b      	ldrh	r3, [r7, #18]
 8012a5c:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8012a5e:	7c7a      	ldrb	r2, [r7, #17]
 8012a60:	4978      	ldr	r1, [pc, #480]	; (8012c44 <etharp_query+0x268>)
 8012a62:	4613      	mov	r3, r2
 8012a64:	005b      	lsls	r3, r3, #1
 8012a66:	4413      	add	r3, r2
 8012a68:	00db      	lsls	r3, r3, #3
 8012a6a:	440b      	add	r3, r1
 8012a6c:	3314      	adds	r3, #20
 8012a6e:	781b      	ldrb	r3, [r3, #0]
 8012a70:	2b00      	cmp	r3, #0
 8012a72:	d115      	bne.n	8012aa0 <etharp_query+0xc4>
    is_new_entry = 1;
 8012a74:	2301      	movs	r3, #1
 8012a76:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8012a78:	7c7a      	ldrb	r2, [r7, #17]
 8012a7a:	4972      	ldr	r1, [pc, #456]	; (8012c44 <etharp_query+0x268>)
 8012a7c:	4613      	mov	r3, r2
 8012a7e:	005b      	lsls	r3, r3, #1
 8012a80:	4413      	add	r3, r2
 8012a82:	00db      	lsls	r3, r3, #3
 8012a84:	440b      	add	r3, r1
 8012a86:	3314      	adds	r3, #20
 8012a88:	2201      	movs	r2, #1
 8012a8a:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8012a8c:	7c7a      	ldrb	r2, [r7, #17]
 8012a8e:	496d      	ldr	r1, [pc, #436]	; (8012c44 <etharp_query+0x268>)
 8012a90:	4613      	mov	r3, r2
 8012a92:	005b      	lsls	r3, r3, #1
 8012a94:	4413      	add	r3, r2
 8012a96:	00db      	lsls	r3, r3, #3
 8012a98:	440b      	add	r3, r1
 8012a9a:	3308      	adds	r3, #8
 8012a9c:	68fa      	ldr	r2, [r7, #12]
 8012a9e:	601a      	str	r2, [r3, #0]
=======
 8012a10:	8a7b      	ldrh	r3, [r7, #18]
 8012a12:	b25b      	sxtb	r3, r3
 8012a14:	e0f3      	b.n	8012bfe <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8012a16:	8a7b      	ldrh	r3, [r7, #18]
 8012a18:	2b7e      	cmp	r3, #126	; 0x7e
 8012a1a:	d906      	bls.n	8012a2a <etharp_query+0x7e>
 8012a1c:	4b7a      	ldr	r3, [pc, #488]	; (8012c08 <etharp_query+0x25c>)
 8012a1e:	f240 32c1 	movw	r2, #961	; 0x3c1
 8012a22:	497a      	ldr	r1, [pc, #488]	; (8012c0c <etharp_query+0x260>)
 8012a24:	487a      	ldr	r0, [pc, #488]	; (8012c10 <etharp_query+0x264>)
 8012a26:	f001 fd95 	bl	8014554 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8012a2a:	8a7b      	ldrh	r3, [r7, #18]
 8012a2c:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8012a2e:	7c7a      	ldrb	r2, [r7, #17]
 8012a30:	4978      	ldr	r1, [pc, #480]	; (8012c14 <etharp_query+0x268>)
 8012a32:	4613      	mov	r3, r2
 8012a34:	005b      	lsls	r3, r3, #1
 8012a36:	4413      	add	r3, r2
 8012a38:	00db      	lsls	r3, r3, #3
 8012a3a:	440b      	add	r3, r1
 8012a3c:	3314      	adds	r3, #20
 8012a3e:	781b      	ldrb	r3, [r3, #0]
 8012a40:	2b00      	cmp	r3, #0
 8012a42:	d115      	bne.n	8012a70 <etharp_query+0xc4>
    is_new_entry = 1;
 8012a44:	2301      	movs	r3, #1
 8012a46:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8012a48:	7c7a      	ldrb	r2, [r7, #17]
 8012a4a:	4972      	ldr	r1, [pc, #456]	; (8012c14 <etharp_query+0x268>)
 8012a4c:	4613      	mov	r3, r2
 8012a4e:	005b      	lsls	r3, r3, #1
 8012a50:	4413      	add	r3, r2
 8012a52:	00db      	lsls	r3, r3, #3
 8012a54:	440b      	add	r3, r1
 8012a56:	3314      	adds	r3, #20
 8012a58:	2201      	movs	r2, #1
 8012a5a:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8012a5c:	7c7a      	ldrb	r2, [r7, #17]
 8012a5e:	496d      	ldr	r1, [pc, #436]	; (8012c14 <etharp_query+0x268>)
 8012a60:	4613      	mov	r3, r2
 8012a62:	005b      	lsls	r3, r3, #1
 8012a64:	4413      	add	r3, r2
 8012a66:	00db      	lsls	r3, r3, #3
 8012a68:	440b      	add	r3, r1
 8012a6a:	3308      	adds	r3, #8
 8012a6c:	68fa      	ldr	r2, [r7, #12]
 8012a6e:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
<<<<<<< Updated upstream
 8012aa0:	7c7a      	ldrb	r2, [r7, #17]
 8012aa2:	4968      	ldr	r1, [pc, #416]	; (8012c44 <etharp_query+0x268>)
 8012aa4:	4613      	mov	r3, r2
 8012aa6:	005b      	lsls	r3, r3, #1
 8012aa8:	4413      	add	r3, r2
 8012aaa:	00db      	lsls	r3, r3, #3
 8012aac:	440b      	add	r3, r1
 8012aae:	3314      	adds	r3, #20
 8012ab0:	781b      	ldrb	r3, [r3, #0]
 8012ab2:	2b01      	cmp	r3, #1
 8012ab4:	d011      	beq.n	8012ada <etharp_query+0xfe>
 8012ab6:	7c7a      	ldrb	r2, [r7, #17]
 8012ab8:	4962      	ldr	r1, [pc, #392]	; (8012c44 <etharp_query+0x268>)
 8012aba:	4613      	mov	r3, r2
 8012abc:	005b      	lsls	r3, r3, #1
 8012abe:	4413      	add	r3, r2
 8012ac0:	00db      	lsls	r3, r3, #3
 8012ac2:	440b      	add	r3, r1
 8012ac4:	3314      	adds	r3, #20
 8012ac6:	781b      	ldrb	r3, [r3, #0]
 8012ac8:	2b01      	cmp	r3, #1
 8012aca:	d806      	bhi.n	8012ada <etharp_query+0xfe>
 8012acc:	4b5a      	ldr	r3, [pc, #360]	; (8012c38 <etharp_query+0x25c>)
 8012ace:	f240 32cd 	movw	r2, #973	; 0x3cd
 8012ad2:	495d      	ldr	r1, [pc, #372]	; (8012c48 <etharp_query+0x26c>)
 8012ad4:	485a      	ldr	r0, [pc, #360]	; (8012c40 <etharp_query+0x264>)
 8012ad6:	f001 fd55 	bl	8014584 <iprintf>
=======
 8012a70:	7c7a      	ldrb	r2, [r7, #17]
 8012a72:	4968      	ldr	r1, [pc, #416]	; (8012c14 <etharp_query+0x268>)
 8012a74:	4613      	mov	r3, r2
 8012a76:	005b      	lsls	r3, r3, #1
 8012a78:	4413      	add	r3, r2
 8012a7a:	00db      	lsls	r3, r3, #3
 8012a7c:	440b      	add	r3, r1
 8012a7e:	3314      	adds	r3, #20
 8012a80:	781b      	ldrb	r3, [r3, #0]
 8012a82:	2b01      	cmp	r3, #1
 8012a84:	d011      	beq.n	8012aaa <etharp_query+0xfe>
 8012a86:	7c7a      	ldrb	r2, [r7, #17]
 8012a88:	4962      	ldr	r1, [pc, #392]	; (8012c14 <etharp_query+0x268>)
 8012a8a:	4613      	mov	r3, r2
 8012a8c:	005b      	lsls	r3, r3, #1
 8012a8e:	4413      	add	r3, r2
 8012a90:	00db      	lsls	r3, r3, #3
 8012a92:	440b      	add	r3, r1
 8012a94:	3314      	adds	r3, #20
 8012a96:	781b      	ldrb	r3, [r3, #0]
 8012a98:	2b01      	cmp	r3, #1
 8012a9a:	d806      	bhi.n	8012aaa <etharp_query+0xfe>
 8012a9c:	4b5a      	ldr	r3, [pc, #360]	; (8012c08 <etharp_query+0x25c>)
 8012a9e:	f240 32cd 	movw	r2, #973	; 0x3cd
 8012aa2:	495d      	ldr	r1, [pc, #372]	; (8012c18 <etharp_query+0x26c>)
 8012aa4:	485a      	ldr	r0, [pc, #360]	; (8012c10 <etharp_query+0x264>)
 8012aa6:	f001 fd55 	bl	8014554 <iprintf>
>>>>>>> Stashed changes
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
<<<<<<< Updated upstream
 8012ada:	6a3b      	ldr	r3, [r7, #32]
 8012adc:	2b00      	cmp	r3, #0
 8012ade:	d102      	bne.n	8012ae6 <etharp_query+0x10a>
 8012ae0:	687b      	ldr	r3, [r7, #4]
 8012ae2:	2b00      	cmp	r3, #0
 8012ae4:	d10c      	bne.n	8012b00 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8012ae6:	68b9      	ldr	r1, [r7, #8]
 8012ae8:	68f8      	ldr	r0, [r7, #12]
 8012aea:	f000 f963 	bl	8012db4 <etharp_request>
 8012aee:	4603      	mov	r3, r0
 8012af0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
=======
 8012aaa:	6a3b      	ldr	r3, [r7, #32]
 8012aac:	2b00      	cmp	r3, #0
 8012aae:	d102      	bne.n	8012ab6 <etharp_query+0x10a>
 8012ab0:	687b      	ldr	r3, [r7, #4]
 8012ab2:	2b00      	cmp	r3, #0
 8012ab4:	d10c      	bne.n	8012ad0 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8012ab6:	68b9      	ldr	r1, [r7, #8]
 8012ab8:	68f8      	ldr	r0, [r7, #12]
 8012aba:	f000 f963 	bl	8012d84 <etharp_request>
 8012abe:	4603      	mov	r3, r0
 8012ac0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
>>>>>>> Stashed changes
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
<<<<<<< Updated upstream
 8012af4:	687b      	ldr	r3, [r7, #4]
 8012af6:	2b00      	cmp	r3, #0
 8012af8:	d102      	bne.n	8012b00 <etharp_query+0x124>
      return result;
 8012afa:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8012afe:	e096      	b.n	8012c2e <etharp_query+0x252>
=======
 8012ac4:	687b      	ldr	r3, [r7, #4]
 8012ac6:	2b00      	cmp	r3, #0
 8012ac8:	d102      	bne.n	8012ad0 <etharp_query+0x124>
      return result;
 8012aca:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8012ace:	e096      	b.n	8012bfe <etharp_query+0x252>
>>>>>>> Stashed changes
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
<<<<<<< Updated upstream
 8012b00:	687b      	ldr	r3, [r7, #4]
 8012b02:	2b00      	cmp	r3, #0
 8012b04:	d106      	bne.n	8012b14 <etharp_query+0x138>
 8012b06:	4b4c      	ldr	r3, [pc, #304]	; (8012c38 <etharp_query+0x25c>)
 8012b08:	f240 32e1 	movw	r2, #993	; 0x3e1
 8012b0c:	494f      	ldr	r1, [pc, #316]	; (8012c4c <etharp_query+0x270>)
 8012b0e:	484c      	ldr	r0, [pc, #304]	; (8012c40 <etharp_query+0x264>)
 8012b10:	f001 fd38 	bl	8014584 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8012b14:	7c7a      	ldrb	r2, [r7, #17]
 8012b16:	494b      	ldr	r1, [pc, #300]	; (8012c44 <etharp_query+0x268>)
 8012b18:	4613      	mov	r3, r2
 8012b1a:	005b      	lsls	r3, r3, #1
 8012b1c:	4413      	add	r3, r2
 8012b1e:	00db      	lsls	r3, r3, #3
 8012b20:	440b      	add	r3, r1
 8012b22:	3314      	adds	r3, #20
 8012b24:	781b      	ldrb	r3, [r3, #0]
 8012b26:	2b01      	cmp	r3, #1
 8012b28:	d917      	bls.n	8012b5a <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8012b2a:	4a49      	ldr	r2, [pc, #292]	; (8012c50 <etharp_query+0x274>)
 8012b2c:	7c7b      	ldrb	r3, [r7, #17]
 8012b2e:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8012b30:	7c7a      	ldrb	r2, [r7, #17]
 8012b32:	4613      	mov	r3, r2
 8012b34:	005b      	lsls	r3, r3, #1
 8012b36:	4413      	add	r3, r2
 8012b38:	00db      	lsls	r3, r3, #3
 8012b3a:	3308      	adds	r3, #8
 8012b3c:	4a41      	ldr	r2, [pc, #260]	; (8012c44 <etharp_query+0x268>)
 8012b3e:	4413      	add	r3, r2
 8012b40:	3304      	adds	r3, #4
 8012b42:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8012b46:	9200      	str	r2, [sp, #0]
 8012b48:	697a      	ldr	r2, [r7, #20]
 8012b4a:	6879      	ldr	r1, [r7, #4]
 8012b4c:	68f8      	ldr	r0, [r7, #12]
 8012b4e:	f001 fc6f 	bl	8014430 <ethernet_output>
 8012b52:	4603      	mov	r3, r0
 8012b54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012b58:	e067      	b.n	8012c2a <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8012b5a:	7c7a      	ldrb	r2, [r7, #17]
 8012b5c:	4939      	ldr	r1, [pc, #228]	; (8012c44 <etharp_query+0x268>)
 8012b5e:	4613      	mov	r3, r2
 8012b60:	005b      	lsls	r3, r3, #1
 8012b62:	4413      	add	r3, r2
 8012b64:	00db      	lsls	r3, r3, #3
 8012b66:	440b      	add	r3, r1
 8012b68:	3314      	adds	r3, #20
 8012b6a:	781b      	ldrb	r3, [r3, #0]
 8012b6c:	2b01      	cmp	r3, #1
 8012b6e:	d15c      	bne.n	8012c2a <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8012b70:	2300      	movs	r3, #0
 8012b72:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8012b74:	687b      	ldr	r3, [r7, #4]
 8012b76:	61fb      	str	r3, [r7, #28]
    while (p) {
 8012b78:	e01c      	b.n	8012bb4 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8012b7a:	69fb      	ldr	r3, [r7, #28]
 8012b7c:	895a      	ldrh	r2, [r3, #10]
 8012b7e:	69fb      	ldr	r3, [r7, #28]
 8012b80:	891b      	ldrh	r3, [r3, #8]
 8012b82:	429a      	cmp	r2, r3
 8012b84:	d10a      	bne.n	8012b9c <etharp_query+0x1c0>
 8012b86:	69fb      	ldr	r3, [r7, #28]
 8012b88:	681b      	ldr	r3, [r3, #0]
 8012b8a:	2b00      	cmp	r3, #0
 8012b8c:	d006      	beq.n	8012b9c <etharp_query+0x1c0>
 8012b8e:	4b2a      	ldr	r3, [pc, #168]	; (8012c38 <etharp_query+0x25c>)
 8012b90:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8012b94:	492f      	ldr	r1, [pc, #188]	; (8012c54 <etharp_query+0x278>)
 8012b96:	482a      	ldr	r0, [pc, #168]	; (8012c40 <etharp_query+0x264>)
 8012b98:	f001 fcf4 	bl	8014584 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8012b9c:	69fb      	ldr	r3, [r7, #28]
 8012b9e:	7b1b      	ldrb	r3, [r3, #12]
 8012ba0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012ba4:	2b00      	cmp	r3, #0
 8012ba6:	d002      	beq.n	8012bae <etharp_query+0x1d2>
        copy_needed = 1;
 8012ba8:	2301      	movs	r3, #1
 8012baa:	61bb      	str	r3, [r7, #24]
        break;
 8012bac:	e005      	b.n	8012bba <etharp_query+0x1de>
      }
      p = p->next;
 8012bae:	69fb      	ldr	r3, [r7, #28]
 8012bb0:	681b      	ldr	r3, [r3, #0]
 8012bb2:	61fb      	str	r3, [r7, #28]
    while (p) {
 8012bb4:	69fb      	ldr	r3, [r7, #28]
 8012bb6:	2b00      	cmp	r3, #0
 8012bb8:	d1df      	bne.n	8012b7a <etharp_query+0x19e>
    }
    if (copy_needed) {
 8012bba:	69bb      	ldr	r3, [r7, #24]
 8012bbc:	2b00      	cmp	r3, #0
 8012bbe:	d007      	beq.n	8012bd0 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8012bc0:	687a      	ldr	r2, [r7, #4]
 8012bc2:	f44f 7120 	mov.w	r1, #640	; 0x280
 8012bc6:	200e      	movs	r0, #14
 8012bc8:	f7f9 fd6e 	bl	800c6a8 <pbuf_clone>
 8012bcc:	61f8      	str	r0, [r7, #28]
 8012bce:	e004      	b.n	8012bda <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8012bd0:	687b      	ldr	r3, [r7, #4]
 8012bd2:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8012bd4:	69f8      	ldr	r0, [r7, #28]
 8012bd6:	f7f9 fbab 	bl	800c330 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8012bda:	69fb      	ldr	r3, [r7, #28]
 8012bdc:	2b00      	cmp	r3, #0
 8012bde:	d021      	beq.n	8012c24 <etharp_query+0x248>
=======
 8012ad0:	687b      	ldr	r3, [r7, #4]
 8012ad2:	2b00      	cmp	r3, #0
 8012ad4:	d106      	bne.n	8012ae4 <etharp_query+0x138>
 8012ad6:	4b4c      	ldr	r3, [pc, #304]	; (8012c08 <etharp_query+0x25c>)
 8012ad8:	f240 32e1 	movw	r2, #993	; 0x3e1
 8012adc:	494f      	ldr	r1, [pc, #316]	; (8012c1c <etharp_query+0x270>)
 8012ade:	484c      	ldr	r0, [pc, #304]	; (8012c10 <etharp_query+0x264>)
 8012ae0:	f001 fd38 	bl	8014554 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8012ae4:	7c7a      	ldrb	r2, [r7, #17]
 8012ae6:	494b      	ldr	r1, [pc, #300]	; (8012c14 <etharp_query+0x268>)
 8012ae8:	4613      	mov	r3, r2
 8012aea:	005b      	lsls	r3, r3, #1
 8012aec:	4413      	add	r3, r2
 8012aee:	00db      	lsls	r3, r3, #3
 8012af0:	440b      	add	r3, r1
 8012af2:	3314      	adds	r3, #20
 8012af4:	781b      	ldrb	r3, [r3, #0]
 8012af6:	2b01      	cmp	r3, #1
 8012af8:	d917      	bls.n	8012b2a <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8012afa:	4a49      	ldr	r2, [pc, #292]	; (8012c20 <etharp_query+0x274>)
 8012afc:	7c7b      	ldrb	r3, [r7, #17]
 8012afe:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8012b00:	7c7a      	ldrb	r2, [r7, #17]
 8012b02:	4613      	mov	r3, r2
 8012b04:	005b      	lsls	r3, r3, #1
 8012b06:	4413      	add	r3, r2
 8012b08:	00db      	lsls	r3, r3, #3
 8012b0a:	3308      	adds	r3, #8
 8012b0c:	4a41      	ldr	r2, [pc, #260]	; (8012c14 <etharp_query+0x268>)
 8012b0e:	4413      	add	r3, r2
 8012b10:	3304      	adds	r3, #4
 8012b12:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8012b16:	9200      	str	r2, [sp, #0]
 8012b18:	697a      	ldr	r2, [r7, #20]
 8012b1a:	6879      	ldr	r1, [r7, #4]
 8012b1c:	68f8      	ldr	r0, [r7, #12]
 8012b1e:	f001 fc6f 	bl	8014400 <ethernet_output>
 8012b22:	4603      	mov	r3, r0
 8012b24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012b28:	e067      	b.n	8012bfa <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8012b2a:	7c7a      	ldrb	r2, [r7, #17]
 8012b2c:	4939      	ldr	r1, [pc, #228]	; (8012c14 <etharp_query+0x268>)
 8012b2e:	4613      	mov	r3, r2
 8012b30:	005b      	lsls	r3, r3, #1
 8012b32:	4413      	add	r3, r2
 8012b34:	00db      	lsls	r3, r3, #3
 8012b36:	440b      	add	r3, r1
 8012b38:	3314      	adds	r3, #20
 8012b3a:	781b      	ldrb	r3, [r3, #0]
 8012b3c:	2b01      	cmp	r3, #1
 8012b3e:	d15c      	bne.n	8012bfa <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8012b40:	2300      	movs	r3, #0
 8012b42:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8012b44:	687b      	ldr	r3, [r7, #4]
 8012b46:	61fb      	str	r3, [r7, #28]
    while (p) {
 8012b48:	e01c      	b.n	8012b84 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8012b4a:	69fb      	ldr	r3, [r7, #28]
 8012b4c:	895a      	ldrh	r2, [r3, #10]
 8012b4e:	69fb      	ldr	r3, [r7, #28]
 8012b50:	891b      	ldrh	r3, [r3, #8]
 8012b52:	429a      	cmp	r2, r3
 8012b54:	d10a      	bne.n	8012b6c <etharp_query+0x1c0>
 8012b56:	69fb      	ldr	r3, [r7, #28]
 8012b58:	681b      	ldr	r3, [r3, #0]
 8012b5a:	2b00      	cmp	r3, #0
 8012b5c:	d006      	beq.n	8012b6c <etharp_query+0x1c0>
 8012b5e:	4b2a      	ldr	r3, [pc, #168]	; (8012c08 <etharp_query+0x25c>)
 8012b60:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8012b64:	492f      	ldr	r1, [pc, #188]	; (8012c24 <etharp_query+0x278>)
 8012b66:	482a      	ldr	r0, [pc, #168]	; (8012c10 <etharp_query+0x264>)
 8012b68:	f001 fcf4 	bl	8014554 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8012b6c:	69fb      	ldr	r3, [r7, #28]
 8012b6e:	7b1b      	ldrb	r3, [r3, #12]
 8012b70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012b74:	2b00      	cmp	r3, #0
 8012b76:	d002      	beq.n	8012b7e <etharp_query+0x1d2>
        copy_needed = 1;
 8012b78:	2301      	movs	r3, #1
 8012b7a:	61bb      	str	r3, [r7, #24]
        break;
 8012b7c:	e005      	b.n	8012b8a <etharp_query+0x1de>
      }
      p = p->next;
 8012b7e:	69fb      	ldr	r3, [r7, #28]
 8012b80:	681b      	ldr	r3, [r3, #0]
 8012b82:	61fb      	str	r3, [r7, #28]
    while (p) {
 8012b84:	69fb      	ldr	r3, [r7, #28]
 8012b86:	2b00      	cmp	r3, #0
 8012b88:	d1df      	bne.n	8012b4a <etharp_query+0x19e>
    }
    if (copy_needed) {
 8012b8a:	69bb      	ldr	r3, [r7, #24]
 8012b8c:	2b00      	cmp	r3, #0
 8012b8e:	d007      	beq.n	8012ba0 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8012b90:	687a      	ldr	r2, [r7, #4]
 8012b92:	f44f 7120 	mov.w	r1, #640	; 0x280
 8012b96:	200e      	movs	r0, #14
 8012b98:	f7f9 fd6e 	bl	800c678 <pbuf_clone>
 8012b9c:	61f8      	str	r0, [r7, #28]
 8012b9e:	e004      	b.n	8012baa <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8012ba0:	687b      	ldr	r3, [r7, #4]
 8012ba2:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8012ba4:	69f8      	ldr	r0, [r7, #28]
 8012ba6:	f7f9 fbab 	bl	800c300 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8012baa:	69fb      	ldr	r3, [r7, #28]
 8012bac:	2b00      	cmp	r3, #0
 8012bae:	d021      	beq.n	8012bf4 <etharp_query+0x248>
>>>>>>> Stashed changes
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
<<<<<<< Updated upstream
 8012be0:	7c7a      	ldrb	r2, [r7, #17]
 8012be2:	4918      	ldr	r1, [pc, #96]	; (8012c44 <etharp_query+0x268>)
 8012be4:	4613      	mov	r3, r2
 8012be6:	005b      	lsls	r3, r3, #1
 8012be8:	4413      	add	r3, r2
 8012bea:	00db      	lsls	r3, r3, #3
 8012bec:	440b      	add	r3, r1
 8012bee:	681b      	ldr	r3, [r3, #0]
 8012bf0:	2b00      	cmp	r3, #0
 8012bf2:	d00a      	beq.n	8012c0a <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8012bf4:	7c7a      	ldrb	r2, [r7, #17]
 8012bf6:	4913      	ldr	r1, [pc, #76]	; (8012c44 <etharp_query+0x268>)
 8012bf8:	4613      	mov	r3, r2
 8012bfa:	005b      	lsls	r3, r3, #1
 8012bfc:	4413      	add	r3, r2
 8012bfe:	00db      	lsls	r3, r3, #3
 8012c00:	440b      	add	r3, r1
 8012c02:	681b      	ldr	r3, [r3, #0]
 8012c04:	4618      	mov	r0, r3
 8012c06:	f7f9 faf3 	bl	800c1f0 <pbuf_free>
      }
      arp_table[i].q = p;
 8012c0a:	7c7a      	ldrb	r2, [r7, #17]
 8012c0c:	490d      	ldr	r1, [pc, #52]	; (8012c44 <etharp_query+0x268>)
 8012c0e:	4613      	mov	r3, r2
 8012c10:	005b      	lsls	r3, r3, #1
 8012c12:	4413      	add	r3, r2
 8012c14:	00db      	lsls	r3, r3, #3
 8012c16:	440b      	add	r3, r1
 8012c18:	69fa      	ldr	r2, [r7, #28]
 8012c1a:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8012c1c:	2300      	movs	r3, #0
 8012c1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012c22:	e002      	b.n	8012c2a <etharp_query+0x24e>
=======
 8012bb0:	7c7a      	ldrb	r2, [r7, #17]
 8012bb2:	4918      	ldr	r1, [pc, #96]	; (8012c14 <etharp_query+0x268>)
 8012bb4:	4613      	mov	r3, r2
 8012bb6:	005b      	lsls	r3, r3, #1
 8012bb8:	4413      	add	r3, r2
 8012bba:	00db      	lsls	r3, r3, #3
 8012bbc:	440b      	add	r3, r1
 8012bbe:	681b      	ldr	r3, [r3, #0]
 8012bc0:	2b00      	cmp	r3, #0
 8012bc2:	d00a      	beq.n	8012bda <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8012bc4:	7c7a      	ldrb	r2, [r7, #17]
 8012bc6:	4913      	ldr	r1, [pc, #76]	; (8012c14 <etharp_query+0x268>)
 8012bc8:	4613      	mov	r3, r2
 8012bca:	005b      	lsls	r3, r3, #1
 8012bcc:	4413      	add	r3, r2
 8012bce:	00db      	lsls	r3, r3, #3
 8012bd0:	440b      	add	r3, r1
 8012bd2:	681b      	ldr	r3, [r3, #0]
 8012bd4:	4618      	mov	r0, r3
 8012bd6:	f7f9 faf3 	bl	800c1c0 <pbuf_free>
      }
      arp_table[i].q = p;
 8012bda:	7c7a      	ldrb	r2, [r7, #17]
 8012bdc:	490d      	ldr	r1, [pc, #52]	; (8012c14 <etharp_query+0x268>)
 8012bde:	4613      	mov	r3, r2
 8012be0:	005b      	lsls	r3, r3, #1
 8012be2:	4413      	add	r3, r2
 8012be4:	00db      	lsls	r3, r3, #3
 8012be6:	440b      	add	r3, r1
 8012be8:	69fa      	ldr	r2, [r7, #28]
 8012bea:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8012bec:	2300      	movs	r3, #0
 8012bee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012bf2:	e002      	b.n	8012bfa <etharp_query+0x24e>
>>>>>>> Stashed changes
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
<<<<<<< Updated upstream
 8012c24:	23ff      	movs	r3, #255	; 0xff
 8012c26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8012c2a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8012c2e:	4618      	mov	r0, r3
 8012c30:	3728      	adds	r7, #40	; 0x28
 8012c32:	46bd      	mov	sp, r7
 8012c34:	bd80      	pop	{r7, pc}
 8012c36:	bf00      	nop
 8012c38:	08017c78 	.word	0x08017c78
 8012c3c:	08017e24 	.word	0x08017e24
 8012c40:	08017cf0 	.word	0x08017cf0
 8012c44:	20000128 	.word	0x20000128
 8012c48:	08017e34 	.word	0x08017e34
 8012c4c:	08017e18 	.word	0x08017e18
 8012c50:	20000218 	.word	0x20000218
 8012c54:	08017e5c 	.word	0x08017e5c

08012c58 <etharp_raw>:
=======
 8012bf4:	23ff      	movs	r3, #255	; 0xff
 8012bf6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8012bfa:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8012bfe:	4618      	mov	r0, r3
 8012c00:	3728      	adds	r7, #40	; 0x28
 8012c02:	46bd      	mov	sp, r7
 8012c04:	bd80      	pop	{r7, pc}
 8012c06:	bf00      	nop
 8012c08:	08017c5c 	.word	0x08017c5c
 8012c0c:	08017e08 	.word	0x08017e08
 8012c10:	08017cd4 	.word	0x08017cd4
 8012c14:	20000128 	.word	0x20000128
 8012c18:	08017e18 	.word	0x08017e18
 8012c1c:	08017dfc 	.word	0x08017dfc
 8012c20:	20000218 	.word	0x20000218
 8012c24:	08017e40 	.word	0x08017e40

08012c28 <etharp_raw>:
>>>>>>> Stashed changes
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
<<<<<<< Updated upstream
 8012c58:	b580      	push	{r7, lr}
 8012c5a:	b08a      	sub	sp, #40	; 0x28
 8012c5c:	af02      	add	r7, sp, #8
 8012c5e:	60f8      	str	r0, [r7, #12]
 8012c60:	60b9      	str	r1, [r7, #8]
 8012c62:	607a      	str	r2, [r7, #4]
 8012c64:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8012c66:	2300      	movs	r3, #0
 8012c68:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8012c6a:	68fb      	ldr	r3, [r7, #12]
 8012c6c:	2b00      	cmp	r3, #0
 8012c6e:	d106      	bne.n	8012c7e <etharp_raw+0x26>
 8012c70:	4b3a      	ldr	r3, [pc, #232]	; (8012d5c <etharp_raw+0x104>)
 8012c72:	f240 4257 	movw	r2, #1111	; 0x457
 8012c76:	493a      	ldr	r1, [pc, #232]	; (8012d60 <etharp_raw+0x108>)
 8012c78:	483a      	ldr	r0, [pc, #232]	; (8012d64 <etharp_raw+0x10c>)
 8012c7a:	f001 fc83 	bl	8014584 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8012c7e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012c82:	211c      	movs	r1, #28
 8012c84:	200e      	movs	r0, #14
 8012c86:	f7f8 ffcf 	bl	800bc28 <pbuf_alloc>
 8012c8a:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8012c8c:	69bb      	ldr	r3, [r7, #24]
 8012c8e:	2b00      	cmp	r3, #0
 8012c90:	d102      	bne.n	8012c98 <etharp_raw+0x40>
=======
 8012c28:	b580      	push	{r7, lr}
 8012c2a:	b08a      	sub	sp, #40	; 0x28
 8012c2c:	af02      	add	r7, sp, #8
 8012c2e:	60f8      	str	r0, [r7, #12]
 8012c30:	60b9      	str	r1, [r7, #8]
 8012c32:	607a      	str	r2, [r7, #4]
 8012c34:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8012c36:	2300      	movs	r3, #0
 8012c38:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8012c3a:	68fb      	ldr	r3, [r7, #12]
 8012c3c:	2b00      	cmp	r3, #0
 8012c3e:	d106      	bne.n	8012c4e <etharp_raw+0x26>
 8012c40:	4b3a      	ldr	r3, [pc, #232]	; (8012d2c <etharp_raw+0x104>)
 8012c42:	f240 4257 	movw	r2, #1111	; 0x457
 8012c46:	493a      	ldr	r1, [pc, #232]	; (8012d30 <etharp_raw+0x108>)
 8012c48:	483a      	ldr	r0, [pc, #232]	; (8012d34 <etharp_raw+0x10c>)
 8012c4a:	f001 fc83 	bl	8014554 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8012c4e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012c52:	211c      	movs	r1, #28
 8012c54:	200e      	movs	r0, #14
 8012c56:	f7f8 ffcf 	bl	800bbf8 <pbuf_alloc>
 8012c5a:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8012c5c:	69bb      	ldr	r3, [r7, #24]
 8012c5e:	2b00      	cmp	r3, #0
 8012c60:	d102      	bne.n	8012c68 <etharp_raw+0x40>
>>>>>>> Stashed changes
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
<<<<<<< Updated upstream
 8012c92:	f04f 33ff 	mov.w	r3, #4294967295
 8012c96:	e05d      	b.n	8012d54 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8012c98:	69bb      	ldr	r3, [r7, #24]
 8012c9a:	895b      	ldrh	r3, [r3, #10]
 8012c9c:	2b1b      	cmp	r3, #27
 8012c9e:	d806      	bhi.n	8012cae <etharp_raw+0x56>
 8012ca0:	4b2e      	ldr	r3, [pc, #184]	; (8012d5c <etharp_raw+0x104>)
 8012ca2:	f240 4262 	movw	r2, #1122	; 0x462
 8012ca6:	4930      	ldr	r1, [pc, #192]	; (8012d68 <etharp_raw+0x110>)
 8012ca8:	482e      	ldr	r0, [pc, #184]	; (8012d64 <etharp_raw+0x10c>)
 8012caa:	f001 fc6b 	bl	8014584 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8012cae:	69bb      	ldr	r3, [r7, #24]
 8012cb0:	685b      	ldr	r3, [r3, #4]
 8012cb2:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8012cb4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8012cb6:	4618      	mov	r0, r3
 8012cb8:	f7f8 f807 	bl	800acca <lwip_htons>
 8012cbc:	4603      	mov	r3, r0
 8012cbe:	461a      	mov	r2, r3
 8012cc0:	697b      	ldr	r3, [r7, #20]
 8012cc2:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8012cc4:	68fb      	ldr	r3, [r7, #12]
 8012cc6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8012cca:	2b06      	cmp	r3, #6
 8012ccc:	d006      	beq.n	8012cdc <etharp_raw+0x84>
 8012cce:	4b23      	ldr	r3, [pc, #140]	; (8012d5c <etharp_raw+0x104>)
 8012cd0:	f240 4269 	movw	r2, #1129	; 0x469
 8012cd4:	4925      	ldr	r1, [pc, #148]	; (8012d6c <etharp_raw+0x114>)
 8012cd6:	4823      	ldr	r0, [pc, #140]	; (8012d64 <etharp_raw+0x10c>)
 8012cd8:	f001 fc54 	bl	8014584 <iprintf>
=======
 8012c62:	f04f 33ff 	mov.w	r3, #4294967295
 8012c66:	e05d      	b.n	8012d24 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8012c68:	69bb      	ldr	r3, [r7, #24]
 8012c6a:	895b      	ldrh	r3, [r3, #10]
 8012c6c:	2b1b      	cmp	r3, #27
 8012c6e:	d806      	bhi.n	8012c7e <etharp_raw+0x56>
 8012c70:	4b2e      	ldr	r3, [pc, #184]	; (8012d2c <etharp_raw+0x104>)
 8012c72:	f240 4262 	movw	r2, #1122	; 0x462
 8012c76:	4930      	ldr	r1, [pc, #192]	; (8012d38 <etharp_raw+0x110>)
 8012c78:	482e      	ldr	r0, [pc, #184]	; (8012d34 <etharp_raw+0x10c>)
 8012c7a:	f001 fc6b 	bl	8014554 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8012c7e:	69bb      	ldr	r3, [r7, #24]
 8012c80:	685b      	ldr	r3, [r3, #4]
 8012c82:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8012c84:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8012c86:	4618      	mov	r0, r3
 8012c88:	f7f8 f807 	bl	800ac9a <lwip_htons>
 8012c8c:	4603      	mov	r3, r0
 8012c8e:	461a      	mov	r2, r3
 8012c90:	697b      	ldr	r3, [r7, #20]
 8012c92:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8012c94:	68fb      	ldr	r3, [r7, #12]
 8012c96:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8012c9a:	2b06      	cmp	r3, #6
 8012c9c:	d006      	beq.n	8012cac <etharp_raw+0x84>
 8012c9e:	4b23      	ldr	r3, [pc, #140]	; (8012d2c <etharp_raw+0x104>)
 8012ca0:	f240 4269 	movw	r2, #1129	; 0x469
 8012ca4:	4925      	ldr	r1, [pc, #148]	; (8012d3c <etharp_raw+0x114>)
 8012ca6:	4823      	ldr	r0, [pc, #140]	; (8012d34 <etharp_raw+0x10c>)
 8012ca8:	f001 fc54 	bl	8014554 <iprintf>
>>>>>>> Stashed changes
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
<<<<<<< Updated upstream
 8012cdc:	697b      	ldr	r3, [r7, #20]
 8012cde:	3308      	adds	r3, #8
 8012ce0:	2206      	movs	r2, #6
 8012ce2:	6839      	ldr	r1, [r7, #0]
 8012ce4:	4618      	mov	r0, r3
 8012ce6:	f001 fc1d 	bl	8014524 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8012cea:	697b      	ldr	r3, [r7, #20]
 8012cec:	3312      	adds	r3, #18
 8012cee:	2206      	movs	r2, #6
 8012cf0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012cf2:	4618      	mov	r0, r3
 8012cf4:	f001 fc16 	bl	8014524 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8012cf8:	697b      	ldr	r3, [r7, #20]
 8012cfa:	330e      	adds	r3, #14
 8012cfc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012cfe:	6812      	ldr	r2, [r2, #0]
 8012d00:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8012d02:	697b      	ldr	r3, [r7, #20]
 8012d04:	3318      	adds	r3, #24
 8012d06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012d08:	6812      	ldr	r2, [r2, #0]
 8012d0a:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8012d0c:	697b      	ldr	r3, [r7, #20]
 8012d0e:	2200      	movs	r2, #0
 8012d10:	701a      	strb	r2, [r3, #0]
 8012d12:	2200      	movs	r2, #0
 8012d14:	f042 0201 	orr.w	r2, r2, #1
 8012d18:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8012d1a:	697b      	ldr	r3, [r7, #20]
 8012d1c:	2200      	movs	r2, #0
 8012d1e:	f042 0208 	orr.w	r2, r2, #8
 8012d22:	709a      	strb	r2, [r3, #2]
 8012d24:	2200      	movs	r2, #0
 8012d26:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8012d28:	697b      	ldr	r3, [r7, #20]
 8012d2a:	2206      	movs	r2, #6
 8012d2c:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8012d2e:	697b      	ldr	r3, [r7, #20]
 8012d30:	2204      	movs	r2, #4
 8012d32:	715a      	strb	r2, [r3, #5]
=======
 8012cac:	697b      	ldr	r3, [r7, #20]
 8012cae:	3308      	adds	r3, #8
 8012cb0:	2206      	movs	r2, #6
 8012cb2:	6839      	ldr	r1, [r7, #0]
 8012cb4:	4618      	mov	r0, r3
 8012cb6:	f001 fc1d 	bl	80144f4 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8012cba:	697b      	ldr	r3, [r7, #20]
 8012cbc:	3312      	adds	r3, #18
 8012cbe:	2206      	movs	r2, #6
 8012cc0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012cc2:	4618      	mov	r0, r3
 8012cc4:	f001 fc16 	bl	80144f4 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8012cc8:	697b      	ldr	r3, [r7, #20]
 8012cca:	330e      	adds	r3, #14
 8012ccc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012cce:	6812      	ldr	r2, [r2, #0]
 8012cd0:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8012cd2:	697b      	ldr	r3, [r7, #20]
 8012cd4:	3318      	adds	r3, #24
 8012cd6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012cd8:	6812      	ldr	r2, [r2, #0]
 8012cda:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8012cdc:	697b      	ldr	r3, [r7, #20]
 8012cde:	2200      	movs	r2, #0
 8012ce0:	701a      	strb	r2, [r3, #0]
 8012ce2:	2200      	movs	r2, #0
 8012ce4:	f042 0201 	orr.w	r2, r2, #1
 8012ce8:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8012cea:	697b      	ldr	r3, [r7, #20]
 8012cec:	2200      	movs	r2, #0
 8012cee:	f042 0208 	orr.w	r2, r2, #8
 8012cf2:	709a      	strb	r2, [r3, #2]
 8012cf4:	2200      	movs	r2, #0
 8012cf6:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8012cf8:	697b      	ldr	r3, [r7, #20]
 8012cfa:	2206      	movs	r2, #6
 8012cfc:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8012cfe:	697b      	ldr	r3, [r7, #20]
 8012d00:	2204      	movs	r2, #4
 8012d02:	715a      	strb	r2, [r3, #5]
>>>>>>> Stashed changes
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
<<<<<<< Updated upstream
 8012d34:	f640 0306 	movw	r3, #2054	; 0x806
 8012d38:	9300      	str	r3, [sp, #0]
 8012d3a:	687b      	ldr	r3, [r7, #4]
 8012d3c:	68ba      	ldr	r2, [r7, #8]
 8012d3e:	69b9      	ldr	r1, [r7, #24]
 8012d40:	68f8      	ldr	r0, [r7, #12]
 8012d42:	f001 fb75 	bl	8014430 <ethernet_output>
=======
 8012d04:	f640 0306 	movw	r3, #2054	; 0x806
 8012d08:	9300      	str	r3, [sp, #0]
 8012d0a:	687b      	ldr	r3, [r7, #4]
 8012d0c:	68ba      	ldr	r2, [r7, #8]
 8012d0e:	69b9      	ldr	r1, [r7, #24]
 8012d10:	68f8      	ldr	r0, [r7, #12]
 8012d12:	f001 fb75 	bl	8014400 <ethernet_output>
>>>>>>> Stashed changes
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
<<<<<<< Updated upstream
 8012d46:	69b8      	ldr	r0, [r7, #24]
 8012d48:	f7f9 fa52 	bl	800c1f0 <pbuf_free>
  p = NULL;
 8012d4c:	2300      	movs	r3, #0
 8012d4e:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8012d50:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8012d54:	4618      	mov	r0, r3
 8012d56:	3720      	adds	r7, #32
 8012d58:	46bd      	mov	sp, r7
 8012d5a:	bd80      	pop	{r7, pc}
 8012d5c:	08017c78 	.word	0x08017c78
 8012d60:	08017dc8 	.word	0x08017dc8
 8012d64:	08017cf0 	.word	0x08017cf0
 8012d68:	08017e78 	.word	0x08017e78
 8012d6c:	08017eac 	.word	0x08017eac

08012d70 <etharp_request_dst>:
=======
 8012d16:	69b8      	ldr	r0, [r7, #24]
 8012d18:	f7f9 fa52 	bl	800c1c0 <pbuf_free>
  p = NULL;
 8012d1c:	2300      	movs	r3, #0
 8012d1e:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8012d20:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8012d24:	4618      	mov	r0, r3
 8012d26:	3720      	adds	r7, #32
 8012d28:	46bd      	mov	sp, r7
 8012d2a:	bd80      	pop	{r7, pc}
 8012d2c:	08017c5c 	.word	0x08017c5c
 8012d30:	08017dac 	.word	0x08017dac
 8012d34:	08017cd4 	.word	0x08017cd4
 8012d38:	08017e5c 	.word	0x08017e5c
 8012d3c:	08017e90 	.word	0x08017e90

08012d40 <etharp_request_dst>:
>>>>>>> Stashed changes
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
<<<<<<< Updated upstream
 8012d70:	b580      	push	{r7, lr}
 8012d72:	b088      	sub	sp, #32
 8012d74:	af04      	add	r7, sp, #16
 8012d76:	60f8      	str	r0, [r7, #12]
 8012d78:	60b9      	str	r1, [r7, #8]
 8012d7a:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8012d7c:	68fb      	ldr	r3, [r7, #12]
 8012d7e:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8012d82:	68fb      	ldr	r3, [r7, #12]
 8012d84:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8012d88:	68fb      	ldr	r3, [r7, #12]
 8012d8a:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8012d8c:	2201      	movs	r2, #1
 8012d8e:	9203      	str	r2, [sp, #12]
 8012d90:	68ba      	ldr	r2, [r7, #8]
 8012d92:	9202      	str	r2, [sp, #8]
 8012d94:	4a06      	ldr	r2, [pc, #24]	; (8012db0 <etharp_request_dst+0x40>)
 8012d96:	9201      	str	r2, [sp, #4]
 8012d98:	9300      	str	r3, [sp, #0]
 8012d9a:	4603      	mov	r3, r0
 8012d9c:	687a      	ldr	r2, [r7, #4]
 8012d9e:	68f8      	ldr	r0, [r7, #12]
 8012da0:	f7ff ff5a 	bl	8012c58 <etharp_raw>
 8012da4:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8012da6:	4618      	mov	r0, r3
 8012da8:	3710      	adds	r7, #16
 8012daa:	46bd      	mov	sp, r7
 8012dac:	bd80      	pop	{r7, pc}
 8012dae:	bf00      	nop
 8012db0:	0801844c 	.word	0x0801844c

08012db4 <etharp_request>:
=======
 8012d40:	b580      	push	{r7, lr}
 8012d42:	b088      	sub	sp, #32
 8012d44:	af04      	add	r7, sp, #16
 8012d46:	60f8      	str	r0, [r7, #12]
 8012d48:	60b9      	str	r1, [r7, #8]
 8012d4a:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8012d4c:	68fb      	ldr	r3, [r7, #12]
 8012d4e:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8012d52:	68fb      	ldr	r3, [r7, #12]
 8012d54:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8012d58:	68fb      	ldr	r3, [r7, #12]
 8012d5a:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8012d5c:	2201      	movs	r2, #1
 8012d5e:	9203      	str	r2, [sp, #12]
 8012d60:	68ba      	ldr	r2, [r7, #8]
 8012d62:	9202      	str	r2, [sp, #8]
 8012d64:	4a06      	ldr	r2, [pc, #24]	; (8012d80 <etharp_request_dst+0x40>)
 8012d66:	9201      	str	r2, [sp, #4]
 8012d68:	9300      	str	r3, [sp, #0]
 8012d6a:	4603      	mov	r3, r0
 8012d6c:	687a      	ldr	r2, [r7, #4]
 8012d6e:	68f8      	ldr	r0, [r7, #12]
 8012d70:	f7ff ff5a 	bl	8012c28 <etharp_raw>
 8012d74:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8012d76:	4618      	mov	r0, r3
 8012d78:	3710      	adds	r7, #16
 8012d7a:	46bd      	mov	sp, r7
 8012d7c:	bd80      	pop	{r7, pc}
 8012d7e:	bf00      	nop
 8012d80:	08018430 	.word	0x08018430

08012d84 <etharp_request>:
>>>>>>> Stashed changes
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
<<<<<<< Updated upstream
 8012db4:	b580      	push	{r7, lr}
 8012db6:	b082      	sub	sp, #8
 8012db8:	af00      	add	r7, sp, #0
 8012dba:	6078      	str	r0, [r7, #4]
 8012dbc:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8012dbe:	4a05      	ldr	r2, [pc, #20]	; (8012dd4 <etharp_request+0x20>)
 8012dc0:	6839      	ldr	r1, [r7, #0]
 8012dc2:	6878      	ldr	r0, [r7, #4]
 8012dc4:	f7ff ffd4 	bl	8012d70 <etharp_request_dst>
 8012dc8:	4603      	mov	r3, r0
}
 8012dca:	4618      	mov	r0, r3
 8012dcc:	3708      	adds	r7, #8
 8012dce:	46bd      	mov	sp, r7
 8012dd0:	bd80      	pop	{r7, pc}
 8012dd2:	bf00      	nop
 8012dd4:	08018444 	.word	0x08018444

08012dd8 <icmp_input>:
=======
 8012d84:	b580      	push	{r7, lr}
 8012d86:	b082      	sub	sp, #8
 8012d88:	af00      	add	r7, sp, #0
 8012d8a:	6078      	str	r0, [r7, #4]
 8012d8c:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8012d8e:	4a05      	ldr	r2, [pc, #20]	; (8012da4 <etharp_request+0x20>)
 8012d90:	6839      	ldr	r1, [r7, #0]
 8012d92:	6878      	ldr	r0, [r7, #4]
 8012d94:	f7ff ffd4 	bl	8012d40 <etharp_request_dst>
 8012d98:	4603      	mov	r3, r0
}
 8012d9a:	4618      	mov	r0, r3
 8012d9c:	3708      	adds	r7, #8
 8012d9e:	46bd      	mov	sp, r7
 8012da0:	bd80      	pop	{r7, pc}
 8012da2:	bf00      	nop
 8012da4:	08018428 	.word	0x08018428

08012da8 <icmp_input>:
>>>>>>> Stashed changes
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
<<<<<<< Updated upstream
 8012dd8:	b580      	push	{r7, lr}
 8012dda:	b08e      	sub	sp, #56	; 0x38
 8012ddc:	af04      	add	r7, sp, #16
 8012dde:	6078      	str	r0, [r7, #4]
 8012de0:	6039      	str	r1, [r7, #0]
=======
 8012da8:	b580      	push	{r7, lr}
 8012daa:	b08e      	sub	sp, #56	; 0x38
 8012dac:	af04      	add	r7, sp, #16
 8012dae:	6078      	str	r0, [r7, #4]
 8012db0:	6039      	str	r1, [r7, #0]
>>>>>>> Stashed changes
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
<<<<<<< Updated upstream
 8012de2:	4b79      	ldr	r3, [pc, #484]	; (8012fc8 <icmp_input+0x1f0>)
 8012de4:	689b      	ldr	r3, [r3, #8]
 8012de6:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8012de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012dea:	781b      	ldrb	r3, [r3, #0]
 8012dec:	f003 030f 	and.w	r3, r3, #15
 8012df0:	b2db      	uxtb	r3, r3
 8012df2:	009b      	lsls	r3, r3, #2
 8012df4:	b2db      	uxtb	r3, r3
 8012df6:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8012df8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012dfa:	2b13      	cmp	r3, #19
 8012dfc:	f240 80cd 	bls.w	8012f9a <icmp_input+0x1c2>
=======
 8012db2:	4b79      	ldr	r3, [pc, #484]	; (8012f98 <icmp_input+0x1f0>)
 8012db4:	689b      	ldr	r3, [r3, #8]
 8012db6:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8012db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012dba:	781b      	ldrb	r3, [r3, #0]
 8012dbc:	f003 030f 	and.w	r3, r3, #15
 8012dc0:	b2db      	uxtb	r3, r3
 8012dc2:	009b      	lsls	r3, r3, #2
 8012dc4:	b2db      	uxtb	r3, r3
 8012dc6:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8012dc8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012dca:	2b13      	cmp	r3, #19
 8012dcc:	f240 80cd 	bls.w	8012f6a <icmp_input+0x1c2>
>>>>>>> Stashed changes
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
<<<<<<< Updated upstream
 8012e00:	687b      	ldr	r3, [r7, #4]
 8012e02:	895b      	ldrh	r3, [r3, #10]
 8012e04:	2b03      	cmp	r3, #3
 8012e06:	f240 80ca 	bls.w	8012f9e <icmp_input+0x1c6>
=======
 8012dd0:	687b      	ldr	r3, [r7, #4]
 8012dd2:	895b      	ldrh	r3, [r3, #10]
 8012dd4:	2b03      	cmp	r3, #3
 8012dd6:	f240 80ca 	bls.w	8012f6e <icmp_input+0x1c6>
>>>>>>> Stashed changes
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
<<<<<<< Updated upstream
 8012e0a:	687b      	ldr	r3, [r7, #4]
 8012e0c:	685b      	ldr	r3, [r3, #4]
 8012e0e:	781b      	ldrb	r3, [r3, #0]
 8012e10:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
=======
 8012dda:	687b      	ldr	r3, [r7, #4]
 8012ddc:	685b      	ldr	r3, [r3, #4]
 8012dde:	781b      	ldrb	r3, [r3, #0]
 8012de0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
>>>>>>> Stashed changes
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
<<<<<<< Updated upstream
 8012e14:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8012e18:	2b00      	cmp	r3, #0
 8012e1a:	f000 80b7 	beq.w	8012f8c <icmp_input+0x1b4>
 8012e1e:	2b08      	cmp	r3, #8
 8012e20:	f040 80b7 	bne.w	8012f92 <icmp_input+0x1ba>
=======
 8012de4:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8012de8:	2b00      	cmp	r3, #0
 8012dea:	f000 80b7 	beq.w	8012f5c <icmp_input+0x1b4>
 8012dee:	2b08      	cmp	r3, #8
 8012df0:	f040 80b7 	bne.w	8012f62 <icmp_input+0x1ba>
>>>>>>> Stashed changes
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
<<<<<<< Updated upstream
 8012e24:	4b69      	ldr	r3, [pc, #420]	; (8012fcc <icmp_input+0x1f4>)
 8012e26:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8012e28:	4b67      	ldr	r3, [pc, #412]	; (8012fc8 <icmp_input+0x1f0>)
 8012e2a:	695b      	ldr	r3, [r3, #20]
 8012e2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012e30:	2be0      	cmp	r3, #224	; 0xe0
 8012e32:	f000 80bb 	beq.w	8012fac <icmp_input+0x1d4>
=======
 8012df4:	4b69      	ldr	r3, [pc, #420]	; (8012f9c <icmp_input+0x1f4>)
 8012df6:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8012df8:	4b67      	ldr	r3, [pc, #412]	; (8012f98 <icmp_input+0x1f0>)
 8012dfa:	695b      	ldr	r3, [r3, #20]
 8012dfc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012e00:	2be0      	cmp	r3, #224	; 0xe0
 8012e02:	f000 80bb 	beq.w	8012f7c <icmp_input+0x1d4>
>>>>>>> Stashed changes
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
<<<<<<< Updated upstream
 8012e36:	4b64      	ldr	r3, [pc, #400]	; (8012fc8 <icmp_input+0x1f0>)
 8012e38:	695b      	ldr	r3, [r3, #20]
 8012e3a:	4a63      	ldr	r2, [pc, #396]	; (8012fc8 <icmp_input+0x1f0>)
 8012e3c:	6812      	ldr	r2, [r2, #0]
 8012e3e:	4611      	mov	r1, r2
 8012e40:	4618      	mov	r0, r3
 8012e42:	f000 fbed 	bl	8013620 <ip4_addr_isbroadcast_u32>
 8012e46:	4603      	mov	r3, r0
 8012e48:	2b00      	cmp	r3, #0
 8012e4a:	f040 80b1 	bne.w	8012fb0 <icmp_input+0x1d8>
=======
 8012e06:	4b64      	ldr	r3, [pc, #400]	; (8012f98 <icmp_input+0x1f0>)
 8012e08:	695b      	ldr	r3, [r3, #20]
 8012e0a:	4a63      	ldr	r2, [pc, #396]	; (8012f98 <icmp_input+0x1f0>)
 8012e0c:	6812      	ldr	r2, [r2, #0]
 8012e0e:	4611      	mov	r1, r2
 8012e10:	4618      	mov	r0, r3
 8012e12:	f000 fbed 	bl	80135f0 <ip4_addr_isbroadcast_u32>
 8012e16:	4603      	mov	r3, r0
 8012e18:	2b00      	cmp	r3, #0
 8012e1a:	f040 80b1 	bne.w	8012f80 <icmp_input+0x1d8>
>>>>>>> Stashed changes
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
<<<<<<< Updated upstream
 8012e4e:	687b      	ldr	r3, [r7, #4]
 8012e50:	891b      	ldrh	r3, [r3, #8]
 8012e52:	2b07      	cmp	r3, #7
 8012e54:	f240 80a5 	bls.w	8012fa2 <icmp_input+0x1ca>
=======
 8012e1e:	687b      	ldr	r3, [r7, #4]
 8012e20:	891b      	ldrh	r3, [r3, #8]
 8012e22:	2b07      	cmp	r3, #7
 8012e24:	f240 80a5 	bls.w	8012f72 <icmp_input+0x1ca>
>>>>>>> Stashed changes
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
<<<<<<< Updated upstream
 8012e58:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012e5a:	330e      	adds	r3, #14
 8012e5c:	4619      	mov	r1, r3
 8012e5e:	6878      	ldr	r0, [r7, #4]
 8012e60:	f7f9 f930 	bl	800c0c4 <pbuf_add_header>
 8012e64:	4603      	mov	r3, r0
 8012e66:	2b00      	cmp	r3, #0
 8012e68:	d04b      	beq.n	8012f02 <icmp_input+0x12a>
=======
 8012e28:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012e2a:	330e      	adds	r3, #14
 8012e2c:	4619      	mov	r1, r3
 8012e2e:	6878      	ldr	r0, [r7, #4]
 8012e30:	f7f9 f930 	bl	800c094 <pbuf_add_header>
 8012e34:	4603      	mov	r3, r0
 8012e36:	2b00      	cmp	r3, #0
 8012e38:	d04b      	beq.n	8012ed2 <icmp_input+0x12a>
>>>>>>> Stashed changes
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
<<<<<<< Updated upstream
 8012e6a:	687b      	ldr	r3, [r7, #4]
 8012e6c:	891a      	ldrh	r2, [r3, #8]
 8012e6e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012e70:	4413      	add	r3, r2
 8012e72:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8012e74:	687b      	ldr	r3, [r7, #4]
 8012e76:	891b      	ldrh	r3, [r3, #8]
 8012e78:	8b7a      	ldrh	r2, [r7, #26]
 8012e7a:	429a      	cmp	r2, r3
 8012e7c:	f0c0 809a 	bcc.w	8012fb4 <icmp_input+0x1dc>
=======
 8012e3a:	687b      	ldr	r3, [r7, #4]
 8012e3c:	891a      	ldrh	r2, [r3, #8]
 8012e3e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012e40:	4413      	add	r3, r2
 8012e42:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8012e44:	687b      	ldr	r3, [r7, #4]
 8012e46:	891b      	ldrh	r3, [r3, #8]
 8012e48:	8b7a      	ldrh	r2, [r7, #26]
 8012e4a:	429a      	cmp	r2, r3
 8012e4c:	f0c0 809a 	bcc.w	8012f84 <icmp_input+0x1dc>
>>>>>>> Stashed changes
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
<<<<<<< Updated upstream
 8012e80:	8b7b      	ldrh	r3, [r7, #26]
 8012e82:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012e86:	4619      	mov	r1, r3
 8012e88:	200e      	movs	r0, #14
 8012e8a:	f7f8 fecd 	bl	800bc28 <pbuf_alloc>
 8012e8e:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8012e90:	697b      	ldr	r3, [r7, #20]
 8012e92:	2b00      	cmp	r3, #0
 8012e94:	f000 8090 	beq.w	8012fb8 <icmp_input+0x1e0>
=======
 8012e50:	8b7b      	ldrh	r3, [r7, #26]
 8012e52:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012e56:	4619      	mov	r1, r3
 8012e58:	200e      	movs	r0, #14
 8012e5a:	f7f8 fecd 	bl	800bbf8 <pbuf_alloc>
 8012e5e:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8012e60:	697b      	ldr	r3, [r7, #20]
 8012e62:	2b00      	cmp	r3, #0
 8012e64:	f000 8090 	beq.w	8012f88 <icmp_input+0x1e0>
>>>>>>> Stashed changes
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
<<<<<<< Updated upstream
 8012e98:	697b      	ldr	r3, [r7, #20]
 8012e9a:	895b      	ldrh	r3, [r3, #10]
 8012e9c:	461a      	mov	r2, r3
 8012e9e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012ea0:	3308      	adds	r3, #8
 8012ea2:	429a      	cmp	r2, r3
 8012ea4:	d203      	bcs.n	8012eae <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8012ea6:	6978      	ldr	r0, [r7, #20]
 8012ea8:	f7f9 f9a2 	bl	800c1f0 <pbuf_free>
          goto icmperr;
 8012eac:	e085      	b.n	8012fba <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8012eae:	697b      	ldr	r3, [r7, #20]
 8012eb0:	685b      	ldr	r3, [r3, #4]
 8012eb2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8012eb4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012eb6:	4618      	mov	r0, r3
 8012eb8:	f001 fb34 	bl	8014524 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8012ebc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012ebe:	4619      	mov	r1, r3
 8012ec0:	6978      	ldr	r0, [r7, #20]
 8012ec2:	f7f9 f90f 	bl	800c0e4 <pbuf_remove_header>
 8012ec6:	4603      	mov	r3, r0
 8012ec8:	2b00      	cmp	r3, #0
 8012eca:	d009      	beq.n	8012ee0 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8012ecc:	4b40      	ldr	r3, [pc, #256]	; (8012fd0 <icmp_input+0x1f8>)
 8012ece:	22b6      	movs	r2, #182	; 0xb6
 8012ed0:	4940      	ldr	r1, [pc, #256]	; (8012fd4 <icmp_input+0x1fc>)
 8012ed2:	4841      	ldr	r0, [pc, #260]	; (8012fd8 <icmp_input+0x200>)
 8012ed4:	f001 fb56 	bl	8014584 <iprintf>
          pbuf_free(r);
 8012ed8:	6978      	ldr	r0, [r7, #20]
 8012eda:	f7f9 f989 	bl	800c1f0 <pbuf_free>
          goto icmperr;
 8012ede:	e06c      	b.n	8012fba <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8012ee0:	6879      	ldr	r1, [r7, #4]
 8012ee2:	6978      	ldr	r0, [r7, #20]
 8012ee4:	f7f9 fa9c 	bl	800c420 <pbuf_copy>
 8012ee8:	4603      	mov	r3, r0
 8012eea:	2b00      	cmp	r3, #0
 8012eec:	d003      	beq.n	8012ef6 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8012eee:	6978      	ldr	r0, [r7, #20]
 8012ef0:	f7f9 f97e 	bl	800c1f0 <pbuf_free>
          goto icmperr;
 8012ef4:	e061      	b.n	8012fba <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8012ef6:	6878      	ldr	r0, [r7, #4]
 8012ef8:	f7f9 f97a 	bl	800c1f0 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8012efc:	697b      	ldr	r3, [r7, #20]
 8012efe:	607b      	str	r3, [r7, #4]
 8012f00:	e00f      	b.n	8012f22 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8012f02:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012f04:	330e      	adds	r3, #14
 8012f06:	4619      	mov	r1, r3
 8012f08:	6878      	ldr	r0, [r7, #4]
 8012f0a:	f7f9 f8eb 	bl	800c0e4 <pbuf_remove_header>
 8012f0e:	4603      	mov	r3, r0
 8012f10:	2b00      	cmp	r3, #0
 8012f12:	d006      	beq.n	8012f22 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8012f14:	4b2e      	ldr	r3, [pc, #184]	; (8012fd0 <icmp_input+0x1f8>)
 8012f16:	22c7      	movs	r2, #199	; 0xc7
 8012f18:	4930      	ldr	r1, [pc, #192]	; (8012fdc <icmp_input+0x204>)
 8012f1a:	482f      	ldr	r0, [pc, #188]	; (8012fd8 <icmp_input+0x200>)
 8012f1c:	f001 fb32 	bl	8014584 <iprintf>
          goto icmperr;
 8012f20:	e04b      	b.n	8012fba <icmp_input+0x1e2>
=======
 8012e68:	697b      	ldr	r3, [r7, #20]
 8012e6a:	895b      	ldrh	r3, [r3, #10]
 8012e6c:	461a      	mov	r2, r3
 8012e6e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012e70:	3308      	adds	r3, #8
 8012e72:	429a      	cmp	r2, r3
 8012e74:	d203      	bcs.n	8012e7e <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8012e76:	6978      	ldr	r0, [r7, #20]
 8012e78:	f7f9 f9a2 	bl	800c1c0 <pbuf_free>
          goto icmperr;
 8012e7c:	e085      	b.n	8012f8a <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8012e7e:	697b      	ldr	r3, [r7, #20]
 8012e80:	685b      	ldr	r3, [r3, #4]
 8012e82:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8012e84:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012e86:	4618      	mov	r0, r3
 8012e88:	f001 fb34 	bl	80144f4 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8012e8c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012e8e:	4619      	mov	r1, r3
 8012e90:	6978      	ldr	r0, [r7, #20]
 8012e92:	f7f9 f90f 	bl	800c0b4 <pbuf_remove_header>
 8012e96:	4603      	mov	r3, r0
 8012e98:	2b00      	cmp	r3, #0
 8012e9a:	d009      	beq.n	8012eb0 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8012e9c:	4b40      	ldr	r3, [pc, #256]	; (8012fa0 <icmp_input+0x1f8>)
 8012e9e:	22b6      	movs	r2, #182	; 0xb6
 8012ea0:	4940      	ldr	r1, [pc, #256]	; (8012fa4 <icmp_input+0x1fc>)
 8012ea2:	4841      	ldr	r0, [pc, #260]	; (8012fa8 <icmp_input+0x200>)
 8012ea4:	f001 fb56 	bl	8014554 <iprintf>
          pbuf_free(r);
 8012ea8:	6978      	ldr	r0, [r7, #20]
 8012eaa:	f7f9 f989 	bl	800c1c0 <pbuf_free>
          goto icmperr;
 8012eae:	e06c      	b.n	8012f8a <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8012eb0:	6879      	ldr	r1, [r7, #4]
 8012eb2:	6978      	ldr	r0, [r7, #20]
 8012eb4:	f7f9 fa9c 	bl	800c3f0 <pbuf_copy>
 8012eb8:	4603      	mov	r3, r0
 8012eba:	2b00      	cmp	r3, #0
 8012ebc:	d003      	beq.n	8012ec6 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8012ebe:	6978      	ldr	r0, [r7, #20]
 8012ec0:	f7f9 f97e 	bl	800c1c0 <pbuf_free>
          goto icmperr;
 8012ec4:	e061      	b.n	8012f8a <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8012ec6:	6878      	ldr	r0, [r7, #4]
 8012ec8:	f7f9 f97a 	bl	800c1c0 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8012ecc:	697b      	ldr	r3, [r7, #20]
 8012ece:	607b      	str	r3, [r7, #4]
 8012ed0:	e00f      	b.n	8012ef2 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8012ed2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012ed4:	330e      	adds	r3, #14
 8012ed6:	4619      	mov	r1, r3
 8012ed8:	6878      	ldr	r0, [r7, #4]
 8012eda:	f7f9 f8eb 	bl	800c0b4 <pbuf_remove_header>
 8012ede:	4603      	mov	r3, r0
 8012ee0:	2b00      	cmp	r3, #0
 8012ee2:	d006      	beq.n	8012ef2 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8012ee4:	4b2e      	ldr	r3, [pc, #184]	; (8012fa0 <icmp_input+0x1f8>)
 8012ee6:	22c7      	movs	r2, #199	; 0xc7
 8012ee8:	4930      	ldr	r1, [pc, #192]	; (8012fac <icmp_input+0x204>)
 8012eea:	482f      	ldr	r0, [pc, #188]	; (8012fa8 <icmp_input+0x200>)
 8012eec:	f001 fb32 	bl	8014554 <iprintf>
          goto icmperr;
 8012ef0:	e04b      	b.n	8012f8a <icmp_input+0x1e2>
>>>>>>> Stashed changes
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
<<<<<<< Updated upstream
 8012f22:	687b      	ldr	r3, [r7, #4]
 8012f24:	685b      	ldr	r3, [r3, #4]
 8012f26:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8012f28:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012f2a:	4619      	mov	r1, r3
 8012f2c:	6878      	ldr	r0, [r7, #4]
 8012f2e:	f7f9 f8c9 	bl	800c0c4 <pbuf_add_header>
 8012f32:	4603      	mov	r3, r0
 8012f34:	2b00      	cmp	r3, #0
 8012f36:	d12b      	bne.n	8012f90 <icmp_input+0x1b8>
=======
 8012ef2:	687b      	ldr	r3, [r7, #4]
 8012ef4:	685b      	ldr	r3, [r3, #4]
 8012ef6:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8012ef8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012efa:	4619      	mov	r1, r3
 8012efc:	6878      	ldr	r0, [r7, #4]
 8012efe:	f7f9 f8c9 	bl	800c094 <pbuf_add_header>
 8012f02:	4603      	mov	r3, r0
 8012f04:	2b00      	cmp	r3, #0
 8012f06:	d12b      	bne.n	8012f60 <icmp_input+0x1b8>
>>>>>>> Stashed changes
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
<<<<<<< Updated upstream
 8012f38:	687b      	ldr	r3, [r7, #4]
 8012f3a:	685b      	ldr	r3, [r3, #4]
 8012f3c:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8012f3e:	69fb      	ldr	r3, [r7, #28]
 8012f40:	681a      	ldr	r2, [r3, #0]
 8012f42:	68fb      	ldr	r3, [r7, #12]
 8012f44:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8012f46:	4b20      	ldr	r3, [pc, #128]	; (8012fc8 <icmp_input+0x1f0>)
 8012f48:	691a      	ldr	r2, [r3, #16]
 8012f4a:	68fb      	ldr	r3, [r7, #12]
 8012f4c:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8012f4e:	693b      	ldr	r3, [r7, #16]
 8012f50:	2200      	movs	r2, #0
 8012f52:	701a      	strb	r2, [r3, #0]
=======
 8012f08:	687b      	ldr	r3, [r7, #4]
 8012f0a:	685b      	ldr	r3, [r3, #4]
 8012f0c:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8012f0e:	69fb      	ldr	r3, [r7, #28]
 8012f10:	681a      	ldr	r2, [r3, #0]
 8012f12:	68fb      	ldr	r3, [r7, #12]
 8012f14:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8012f16:	4b20      	ldr	r3, [pc, #128]	; (8012f98 <icmp_input+0x1f0>)
 8012f18:	691a      	ldr	r2, [r3, #16]
 8012f1a:	68fb      	ldr	r3, [r7, #12]
 8012f1c:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8012f1e:	693b      	ldr	r3, [r7, #16]
 8012f20:	2200      	movs	r2, #0
 8012f22:	701a      	strb	r2, [r3, #0]
>>>>>>> Stashed changes
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
<<<<<<< Updated upstream
 8012f54:	693b      	ldr	r3, [r7, #16]
 8012f56:	2200      	movs	r2, #0
 8012f58:	709a      	strb	r2, [r3, #2]
 8012f5a:	2200      	movs	r2, #0
 8012f5c:	70da      	strb	r2, [r3, #3]
=======
 8012f24:	693b      	ldr	r3, [r7, #16]
 8012f26:	2200      	movs	r2, #0
 8012f28:	709a      	strb	r2, [r3, #2]
 8012f2a:	2200      	movs	r2, #0
 8012f2c:	70da      	strb	r2, [r3, #3]
>>>>>>> Stashed changes
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
<<<<<<< Updated upstream
 8012f5e:	68fb      	ldr	r3, [r7, #12]
 8012f60:	22ff      	movs	r2, #255	; 0xff
 8012f62:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8012f64:	68fb      	ldr	r3, [r7, #12]
 8012f66:	2200      	movs	r2, #0
 8012f68:	729a      	strb	r2, [r3, #10]
 8012f6a:	2200      	movs	r2, #0
 8012f6c:	72da      	strb	r2, [r3, #11]
=======
 8012f2e:	68fb      	ldr	r3, [r7, #12]
 8012f30:	22ff      	movs	r2, #255	; 0xff
 8012f32:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8012f34:	68fb      	ldr	r3, [r7, #12]
 8012f36:	2200      	movs	r2, #0
 8012f38:	729a      	strb	r2, [r3, #10]
 8012f3a:	2200      	movs	r2, #0
 8012f3c:	72da      	strb	r2, [r3, #11]
>>>>>>> Stashed changes
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
<<<<<<< Updated upstream
 8012f6e:	683b      	ldr	r3, [r7, #0]
 8012f70:	9302      	str	r3, [sp, #8]
 8012f72:	2301      	movs	r3, #1
 8012f74:	9301      	str	r3, [sp, #4]
 8012f76:	2300      	movs	r3, #0
 8012f78:	9300      	str	r3, [sp, #0]
 8012f7a:	23ff      	movs	r3, #255	; 0xff
 8012f7c:	2200      	movs	r2, #0
 8012f7e:	69f9      	ldr	r1, [r7, #28]
 8012f80:	6878      	ldr	r0, [r7, #4]
 8012f82:	f000 fa75 	bl	8013470 <ip4_output_if>
 8012f86:	4603      	mov	r3, r0
 8012f88:	72fb      	strb	r3, [r7, #11]
=======
 8012f3e:	683b      	ldr	r3, [r7, #0]
 8012f40:	9302      	str	r3, [sp, #8]
 8012f42:	2301      	movs	r3, #1
 8012f44:	9301      	str	r3, [sp, #4]
 8012f46:	2300      	movs	r3, #0
 8012f48:	9300      	str	r3, [sp, #0]
 8012f4a:	23ff      	movs	r3, #255	; 0xff
 8012f4c:	2200      	movs	r2, #0
 8012f4e:	69f9      	ldr	r1, [r7, #28]
 8012f50:	6878      	ldr	r0, [r7, #4]
 8012f52:	f000 fa75 	bl	8013440 <ip4_output_if>
 8012f56:	4603      	mov	r3, r0
 8012f58:	72fb      	strb	r3, [r7, #11]
>>>>>>> Stashed changes
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
<<<<<<< Updated upstream
 8012f8a:	e001      	b.n	8012f90 <icmp_input+0x1b8>
      break;
 8012f8c:	bf00      	nop
 8012f8e:	e000      	b.n	8012f92 <icmp_input+0x1ba>
      break;
 8012f90:	bf00      	nop
=======
 8012f5a:	e001      	b.n	8012f60 <icmp_input+0x1b8>
      break;
 8012f5c:	bf00      	nop
 8012f5e:	e000      	b.n	8012f62 <icmp_input+0x1ba>
      break;
 8012f60:	bf00      	nop
>>>>>>> Stashed changes
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
<<<<<<< Updated upstream
 8012f92:	6878      	ldr	r0, [r7, #4]
 8012f94:	f7f9 f92c 	bl	800c1f0 <pbuf_free>
  return;
 8012f98:	e013      	b.n	8012fc2 <icmp_input+0x1ea>
    goto lenerr;
 8012f9a:	bf00      	nop
 8012f9c:	e002      	b.n	8012fa4 <icmp_input+0x1cc>
    goto lenerr;
 8012f9e:	bf00      	nop
 8012fa0:	e000      	b.n	8012fa4 <icmp_input+0x1cc>
        goto lenerr;
 8012fa2:	bf00      	nop
lenerr:
  pbuf_free(p);
 8012fa4:	6878      	ldr	r0, [r7, #4]
 8012fa6:	f7f9 f923 	bl	800c1f0 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8012faa:	e00a      	b.n	8012fc2 <icmp_input+0x1ea>
        goto icmperr;
 8012fac:	bf00      	nop
 8012fae:	e004      	b.n	8012fba <icmp_input+0x1e2>
        goto icmperr;
 8012fb0:	bf00      	nop
 8012fb2:	e002      	b.n	8012fba <icmp_input+0x1e2>
          goto icmperr;
 8012fb4:	bf00      	nop
 8012fb6:	e000      	b.n	8012fba <icmp_input+0x1e2>
          goto icmperr;
 8012fb8:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8012fba:	6878      	ldr	r0, [r7, #4]
 8012fbc:	f7f9 f918 	bl	800c1f0 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8012fc0:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8012fc2:	3728      	adds	r7, #40	; 0x28
 8012fc4:	46bd      	mov	sp, r7
 8012fc6:	bd80      	pop	{r7, pc}
 8012fc8:	20003d5c 	.word	0x20003d5c
 8012fcc:	20003d70 	.word	0x20003d70
 8012fd0:	08017ef0 	.word	0x08017ef0
 8012fd4:	08017f28 	.word	0x08017f28
 8012fd8:	08017f60 	.word	0x08017f60
 8012fdc:	08017f88 	.word	0x08017f88

08012fe0 <icmp_dest_unreach>:
=======
 8012f62:	6878      	ldr	r0, [r7, #4]
 8012f64:	f7f9 f92c 	bl	800c1c0 <pbuf_free>
  return;
 8012f68:	e013      	b.n	8012f92 <icmp_input+0x1ea>
    goto lenerr;
 8012f6a:	bf00      	nop
 8012f6c:	e002      	b.n	8012f74 <icmp_input+0x1cc>
    goto lenerr;
 8012f6e:	bf00      	nop
 8012f70:	e000      	b.n	8012f74 <icmp_input+0x1cc>
        goto lenerr;
 8012f72:	bf00      	nop
lenerr:
  pbuf_free(p);
 8012f74:	6878      	ldr	r0, [r7, #4]
 8012f76:	f7f9 f923 	bl	800c1c0 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8012f7a:	e00a      	b.n	8012f92 <icmp_input+0x1ea>
        goto icmperr;
 8012f7c:	bf00      	nop
 8012f7e:	e004      	b.n	8012f8a <icmp_input+0x1e2>
        goto icmperr;
 8012f80:	bf00      	nop
 8012f82:	e002      	b.n	8012f8a <icmp_input+0x1e2>
          goto icmperr;
 8012f84:	bf00      	nop
 8012f86:	e000      	b.n	8012f8a <icmp_input+0x1e2>
          goto icmperr;
 8012f88:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8012f8a:	6878      	ldr	r0, [r7, #4]
 8012f8c:	f7f9 f918 	bl	800c1c0 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8012f90:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8012f92:	3728      	adds	r7, #40	; 0x28
 8012f94:	46bd      	mov	sp, r7
 8012f96:	bd80      	pop	{r7, pc}
 8012f98:	20003d5c 	.word	0x20003d5c
 8012f9c:	20003d70 	.word	0x20003d70
 8012fa0:	08017ed4 	.word	0x08017ed4
 8012fa4:	08017f0c 	.word	0x08017f0c
 8012fa8:	08017f44 	.word	0x08017f44
 8012fac:	08017f6c 	.word	0x08017f6c

08012fb0 <icmp_dest_unreach>:
>>>>>>> Stashed changes
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
<<<<<<< Updated upstream
 8012fe0:	b580      	push	{r7, lr}
 8012fe2:	b082      	sub	sp, #8
 8012fe4:	af00      	add	r7, sp, #0
 8012fe6:	6078      	str	r0, [r7, #4]
 8012fe8:	460b      	mov	r3, r1
 8012fea:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8012fec:	78fb      	ldrb	r3, [r7, #3]
 8012fee:	461a      	mov	r2, r3
 8012ff0:	2103      	movs	r1, #3
 8012ff2:	6878      	ldr	r0, [r7, #4]
 8012ff4:	f000 f814 	bl	8013020 <icmp_send_response>
}
 8012ff8:	bf00      	nop
 8012ffa:	3708      	adds	r7, #8
 8012ffc:	46bd      	mov	sp, r7
 8012ffe:	bd80      	pop	{r7, pc}

08013000 <icmp_time_exceeded>:
=======
 8012fb0:	b580      	push	{r7, lr}
 8012fb2:	b082      	sub	sp, #8
 8012fb4:	af00      	add	r7, sp, #0
 8012fb6:	6078      	str	r0, [r7, #4]
 8012fb8:	460b      	mov	r3, r1
 8012fba:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8012fbc:	78fb      	ldrb	r3, [r7, #3]
 8012fbe:	461a      	mov	r2, r3
 8012fc0:	2103      	movs	r1, #3
 8012fc2:	6878      	ldr	r0, [r7, #4]
 8012fc4:	f000 f814 	bl	8012ff0 <icmp_send_response>
}
 8012fc8:	bf00      	nop
 8012fca:	3708      	adds	r7, #8
 8012fcc:	46bd      	mov	sp, r7
 8012fce:	bd80      	pop	{r7, pc}

08012fd0 <icmp_time_exceeded>:
>>>>>>> Stashed changes
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
<<<<<<< Updated upstream
 8013000:	b580      	push	{r7, lr}
 8013002:	b082      	sub	sp, #8
 8013004:	af00      	add	r7, sp, #0
 8013006:	6078      	str	r0, [r7, #4]
 8013008:	460b      	mov	r3, r1
 801300a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 801300c:	78fb      	ldrb	r3, [r7, #3]
 801300e:	461a      	mov	r2, r3
 8013010:	210b      	movs	r1, #11
 8013012:	6878      	ldr	r0, [r7, #4]
 8013014:	f000 f804 	bl	8013020 <icmp_send_response>
}
 8013018:	bf00      	nop
 801301a:	3708      	adds	r7, #8
 801301c:	46bd      	mov	sp, r7
 801301e:	bd80      	pop	{r7, pc}

08013020 <icmp_send_response>:
=======
 8012fd0:	b580      	push	{r7, lr}
 8012fd2:	b082      	sub	sp, #8
 8012fd4:	af00      	add	r7, sp, #0
 8012fd6:	6078      	str	r0, [r7, #4]
 8012fd8:	460b      	mov	r3, r1
 8012fda:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8012fdc:	78fb      	ldrb	r3, [r7, #3]
 8012fde:	461a      	mov	r2, r3
 8012fe0:	210b      	movs	r1, #11
 8012fe2:	6878      	ldr	r0, [r7, #4]
 8012fe4:	f000 f804 	bl	8012ff0 <icmp_send_response>
}
 8012fe8:	bf00      	nop
 8012fea:	3708      	adds	r7, #8
 8012fec:	46bd      	mov	sp, r7
 8012fee:	bd80      	pop	{r7, pc}

08012ff0 <icmp_send_response>:
>>>>>>> Stashed changes
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
<<<<<<< Updated upstream
 8013020:	b580      	push	{r7, lr}
 8013022:	b08c      	sub	sp, #48	; 0x30
 8013024:	af04      	add	r7, sp, #16
 8013026:	6078      	str	r0, [r7, #4]
 8013028:	460b      	mov	r3, r1
 801302a:	70fb      	strb	r3, [r7, #3]
 801302c:	4613      	mov	r3, r2
 801302e:	70bb      	strb	r3, [r7, #2]
=======
 8012ff0:	b580      	push	{r7, lr}
 8012ff2:	b08c      	sub	sp, #48	; 0x30
 8012ff4:	af04      	add	r7, sp, #16
 8012ff6:	6078      	str	r0, [r7, #4]
 8012ff8:	460b      	mov	r3, r1
 8012ffa:	70fb      	strb	r3, [r7, #3]
 8012ffc:	4613      	mov	r3, r2
 8012ffe:	70bb      	strb	r3, [r7, #2]
>>>>>>> Stashed changes

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
<<<<<<< Updated upstream
 8013030:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013034:	2124      	movs	r1, #36	; 0x24
 8013036:	2022      	movs	r0, #34	; 0x22
 8013038:	f7f8 fdf6 	bl	800bc28 <pbuf_alloc>
 801303c:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801303e:	69fb      	ldr	r3, [r7, #28]
 8013040:	2b00      	cmp	r3, #0
 8013042:	d04c      	beq.n	80130de <icmp_send_response+0xbe>
=======
 8013000:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013004:	2124      	movs	r1, #36	; 0x24
 8013006:	2022      	movs	r0, #34	; 0x22
 8013008:	f7f8 fdf6 	bl	800bbf8 <pbuf_alloc>
 801300c:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801300e:	69fb      	ldr	r3, [r7, #28]
 8013010:	2b00      	cmp	r3, #0
 8013012:	d04c      	beq.n	80130ae <icmp_send_response+0xbe>
>>>>>>> Stashed changes
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
<<<<<<< Updated upstream
 8013044:	69fb      	ldr	r3, [r7, #28]
 8013046:	895b      	ldrh	r3, [r3, #10]
 8013048:	2b23      	cmp	r3, #35	; 0x23
 801304a:	d806      	bhi.n	801305a <icmp_send_response+0x3a>
 801304c:	4b26      	ldr	r3, [pc, #152]	; (80130e8 <icmp_send_response+0xc8>)
 801304e:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8013052:	4926      	ldr	r1, [pc, #152]	; (80130ec <icmp_send_response+0xcc>)
 8013054:	4826      	ldr	r0, [pc, #152]	; (80130f0 <icmp_send_response+0xd0>)
 8013056:	f001 fa95 	bl	8014584 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801305a:	687b      	ldr	r3, [r7, #4]
 801305c:	685b      	ldr	r3, [r3, #4]
 801305e:	61bb      	str	r3, [r7, #24]
=======
 8013014:	69fb      	ldr	r3, [r7, #28]
 8013016:	895b      	ldrh	r3, [r3, #10]
 8013018:	2b23      	cmp	r3, #35	; 0x23
 801301a:	d806      	bhi.n	801302a <icmp_send_response+0x3a>
 801301c:	4b26      	ldr	r3, [pc, #152]	; (80130b8 <icmp_send_response+0xc8>)
 801301e:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8013022:	4926      	ldr	r1, [pc, #152]	; (80130bc <icmp_send_response+0xcc>)
 8013024:	4826      	ldr	r0, [pc, #152]	; (80130c0 <icmp_send_response+0xd0>)
 8013026:	f001 fa95 	bl	8014554 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801302a:	687b      	ldr	r3, [r7, #4]
 801302c:	685b      	ldr	r3, [r3, #4]
 801302e:	61bb      	str	r3, [r7, #24]
>>>>>>> Stashed changes
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
<<<<<<< Updated upstream
 8013060:	69fb      	ldr	r3, [r7, #28]
 8013062:	685b      	ldr	r3, [r3, #4]
 8013064:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8013066:	697b      	ldr	r3, [r7, #20]
 8013068:	78fa      	ldrb	r2, [r7, #3]
 801306a:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801306c:	697b      	ldr	r3, [r7, #20]
 801306e:	78ba      	ldrb	r2, [r7, #2]
 8013070:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8013072:	697b      	ldr	r3, [r7, #20]
 8013074:	2200      	movs	r2, #0
 8013076:	711a      	strb	r2, [r3, #4]
 8013078:	2200      	movs	r2, #0
 801307a:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801307c:	697b      	ldr	r3, [r7, #20]
 801307e:	2200      	movs	r2, #0
 8013080:	719a      	strb	r2, [r3, #6]
 8013082:	2200      	movs	r2, #0
 8013084:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8013086:	69fb      	ldr	r3, [r7, #28]
 8013088:	685b      	ldr	r3, [r3, #4]
 801308a:	f103 0008 	add.w	r0, r3, #8
 801308e:	687b      	ldr	r3, [r7, #4]
 8013090:	685b      	ldr	r3, [r3, #4]
 8013092:	221c      	movs	r2, #28
 8013094:	4619      	mov	r1, r3
 8013096:	f001 fa45 	bl	8014524 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801309a:	69bb      	ldr	r3, [r7, #24]
 801309c:	68db      	ldr	r3, [r3, #12]
 801309e:	60fb      	str	r3, [r7, #12]
=======
 8013030:	69fb      	ldr	r3, [r7, #28]
 8013032:	685b      	ldr	r3, [r3, #4]
 8013034:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8013036:	697b      	ldr	r3, [r7, #20]
 8013038:	78fa      	ldrb	r2, [r7, #3]
 801303a:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801303c:	697b      	ldr	r3, [r7, #20]
 801303e:	78ba      	ldrb	r2, [r7, #2]
 8013040:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8013042:	697b      	ldr	r3, [r7, #20]
 8013044:	2200      	movs	r2, #0
 8013046:	711a      	strb	r2, [r3, #4]
 8013048:	2200      	movs	r2, #0
 801304a:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801304c:	697b      	ldr	r3, [r7, #20]
 801304e:	2200      	movs	r2, #0
 8013050:	719a      	strb	r2, [r3, #6]
 8013052:	2200      	movs	r2, #0
 8013054:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8013056:	69fb      	ldr	r3, [r7, #28]
 8013058:	685b      	ldr	r3, [r3, #4]
 801305a:	f103 0008 	add.w	r0, r3, #8
 801305e:	687b      	ldr	r3, [r7, #4]
 8013060:	685b      	ldr	r3, [r3, #4]
 8013062:	221c      	movs	r2, #28
 8013064:	4619      	mov	r1, r3
 8013066:	f001 fa45 	bl	80144f4 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801306a:	69bb      	ldr	r3, [r7, #24]
 801306c:	68db      	ldr	r3, [r3, #12]
 801306e:	60fb      	str	r3, [r7, #12]
>>>>>>> Stashed changes
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
<<<<<<< Updated upstream
 80130a0:	f107 030c 	add.w	r3, r7, #12
 80130a4:	4618      	mov	r0, r3
 80130a6:	f000 f825 	bl	80130f4 <ip4_route>
 80130aa:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 80130ac:	693b      	ldr	r3, [r7, #16]
 80130ae:	2b00      	cmp	r3, #0
 80130b0:	d011      	beq.n	80130d6 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80130b2:	697b      	ldr	r3, [r7, #20]
 80130b4:	2200      	movs	r2, #0
 80130b6:	709a      	strb	r2, [r3, #2]
 80130b8:	2200      	movs	r2, #0
 80130ba:	70da      	strb	r2, [r3, #3]
=======
 8013070:	f107 030c 	add.w	r3, r7, #12
 8013074:	4618      	mov	r0, r3
 8013076:	f000 f825 	bl	80130c4 <ip4_route>
 801307a:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 801307c:	693b      	ldr	r3, [r7, #16]
 801307e:	2b00      	cmp	r3, #0
 8013080:	d011      	beq.n	80130a6 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8013082:	697b      	ldr	r3, [r7, #20]
 8013084:	2200      	movs	r2, #0
 8013086:	709a      	strb	r2, [r3, #2]
 8013088:	2200      	movs	r2, #0
 801308a:	70da      	strb	r2, [r3, #3]
>>>>>>> Stashed changes
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
<<<<<<< Updated upstream
 80130bc:	f107 020c 	add.w	r2, r7, #12
 80130c0:	693b      	ldr	r3, [r7, #16]
 80130c2:	9302      	str	r3, [sp, #8]
 80130c4:	2301      	movs	r3, #1
 80130c6:	9301      	str	r3, [sp, #4]
 80130c8:	2300      	movs	r3, #0
 80130ca:	9300      	str	r3, [sp, #0]
 80130cc:	23ff      	movs	r3, #255	; 0xff
 80130ce:	2100      	movs	r1, #0
 80130d0:	69f8      	ldr	r0, [r7, #28]
 80130d2:	f000 f9cd 	bl	8013470 <ip4_output_if>
  }
  pbuf_free(q);
 80130d6:	69f8      	ldr	r0, [r7, #28]
 80130d8:	f7f9 f88a 	bl	800c1f0 <pbuf_free>
 80130dc:	e000      	b.n	80130e0 <icmp_send_response+0xc0>
    return;
 80130de:	bf00      	nop
}
 80130e0:	3720      	adds	r7, #32
 80130e2:	46bd      	mov	sp, r7
 80130e4:	bd80      	pop	{r7, pc}
 80130e6:	bf00      	nop
 80130e8:	08017ef0 	.word	0x08017ef0
 80130ec:	08017fbc 	.word	0x08017fbc
 80130f0:	08017f60 	.word	0x08017f60

080130f4 <ip4_route>:
=======
 801308c:	f107 020c 	add.w	r2, r7, #12
 8013090:	693b      	ldr	r3, [r7, #16]
 8013092:	9302      	str	r3, [sp, #8]
 8013094:	2301      	movs	r3, #1
 8013096:	9301      	str	r3, [sp, #4]
 8013098:	2300      	movs	r3, #0
 801309a:	9300      	str	r3, [sp, #0]
 801309c:	23ff      	movs	r3, #255	; 0xff
 801309e:	2100      	movs	r1, #0
 80130a0:	69f8      	ldr	r0, [r7, #28]
 80130a2:	f000 f9cd 	bl	8013440 <ip4_output_if>
  }
  pbuf_free(q);
 80130a6:	69f8      	ldr	r0, [r7, #28]
 80130a8:	f7f9 f88a 	bl	800c1c0 <pbuf_free>
 80130ac:	e000      	b.n	80130b0 <icmp_send_response+0xc0>
    return;
 80130ae:	bf00      	nop
}
 80130b0:	3720      	adds	r7, #32
 80130b2:	46bd      	mov	sp, r7
 80130b4:	bd80      	pop	{r7, pc}
 80130b6:	bf00      	nop
 80130b8:	08017ed4 	.word	0x08017ed4
 80130bc:	08017fa0 	.word	0x08017fa0
 80130c0:	08017f44 	.word	0x08017f44

080130c4 <ip4_route>:
>>>>>>> Stashed changes
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
<<<<<<< Updated upstream
 80130f4:	b480      	push	{r7}
 80130f6:	b085      	sub	sp, #20
 80130f8:	af00      	add	r7, sp, #0
 80130fa:	6078      	str	r0, [r7, #4]
=======
 80130c4:	b480      	push	{r7}
 80130c6:	b085      	sub	sp, #20
 80130c8:	af00      	add	r7, sp, #0
 80130ca:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
<<<<<<< Updated upstream
 80130fc:	4b33      	ldr	r3, [pc, #204]	; (80131cc <ip4_route+0xd8>)
 80130fe:	681b      	ldr	r3, [r3, #0]
 8013100:	60fb      	str	r3, [r7, #12]
 8013102:	e036      	b.n	8013172 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8013104:	68fb      	ldr	r3, [r7, #12]
 8013106:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801310a:	f003 0301 	and.w	r3, r3, #1
 801310e:	b2db      	uxtb	r3, r3
 8013110:	2b00      	cmp	r3, #0
 8013112:	d02b      	beq.n	801316c <ip4_route+0x78>
 8013114:	68fb      	ldr	r3, [r7, #12]
 8013116:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801311a:	089b      	lsrs	r3, r3, #2
 801311c:	f003 0301 	and.w	r3, r3, #1
 8013120:	b2db      	uxtb	r3, r3
 8013122:	2b00      	cmp	r3, #0
 8013124:	d022      	beq.n	801316c <ip4_route+0x78>
 8013126:	68fb      	ldr	r3, [r7, #12]
 8013128:	3304      	adds	r3, #4
 801312a:	681b      	ldr	r3, [r3, #0]
 801312c:	2b00      	cmp	r3, #0
 801312e:	d01d      	beq.n	801316c <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8013130:	687b      	ldr	r3, [r7, #4]
 8013132:	681a      	ldr	r2, [r3, #0]
 8013134:	68fb      	ldr	r3, [r7, #12]
 8013136:	3304      	adds	r3, #4
 8013138:	681b      	ldr	r3, [r3, #0]
 801313a:	405a      	eors	r2, r3
 801313c:	68fb      	ldr	r3, [r7, #12]
 801313e:	3308      	adds	r3, #8
 8013140:	681b      	ldr	r3, [r3, #0]
 8013142:	4013      	ands	r3, r2
 8013144:	2b00      	cmp	r3, #0
 8013146:	d101      	bne.n	801314c <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8013148:	68fb      	ldr	r3, [r7, #12]
 801314a:	e038      	b.n	80131be <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801314c:	68fb      	ldr	r3, [r7, #12]
 801314e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013152:	f003 0302 	and.w	r3, r3, #2
 8013156:	2b00      	cmp	r3, #0
 8013158:	d108      	bne.n	801316c <ip4_route+0x78>
 801315a:	687b      	ldr	r3, [r7, #4]
 801315c:	681a      	ldr	r2, [r3, #0]
 801315e:	68fb      	ldr	r3, [r7, #12]
 8013160:	330c      	adds	r3, #12
 8013162:	681b      	ldr	r3, [r3, #0]
 8013164:	429a      	cmp	r2, r3
 8013166:	d101      	bne.n	801316c <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8013168:	68fb      	ldr	r3, [r7, #12]
 801316a:	e028      	b.n	80131be <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 801316c:	68fb      	ldr	r3, [r7, #12]
 801316e:	681b      	ldr	r3, [r3, #0]
 8013170:	60fb      	str	r3, [r7, #12]
 8013172:	68fb      	ldr	r3, [r7, #12]
 8013174:	2b00      	cmp	r3, #0
 8013176:	d1c5      	bne.n	8013104 <ip4_route+0x10>
=======
 80130cc:	4b33      	ldr	r3, [pc, #204]	; (801319c <ip4_route+0xd8>)
 80130ce:	681b      	ldr	r3, [r3, #0]
 80130d0:	60fb      	str	r3, [r7, #12]
 80130d2:	e036      	b.n	8013142 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80130d4:	68fb      	ldr	r3, [r7, #12]
 80130d6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80130da:	f003 0301 	and.w	r3, r3, #1
 80130de:	b2db      	uxtb	r3, r3
 80130e0:	2b00      	cmp	r3, #0
 80130e2:	d02b      	beq.n	801313c <ip4_route+0x78>
 80130e4:	68fb      	ldr	r3, [r7, #12]
 80130e6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80130ea:	089b      	lsrs	r3, r3, #2
 80130ec:	f003 0301 	and.w	r3, r3, #1
 80130f0:	b2db      	uxtb	r3, r3
 80130f2:	2b00      	cmp	r3, #0
 80130f4:	d022      	beq.n	801313c <ip4_route+0x78>
 80130f6:	68fb      	ldr	r3, [r7, #12]
 80130f8:	3304      	adds	r3, #4
 80130fa:	681b      	ldr	r3, [r3, #0]
 80130fc:	2b00      	cmp	r3, #0
 80130fe:	d01d      	beq.n	801313c <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8013100:	687b      	ldr	r3, [r7, #4]
 8013102:	681a      	ldr	r2, [r3, #0]
 8013104:	68fb      	ldr	r3, [r7, #12]
 8013106:	3304      	adds	r3, #4
 8013108:	681b      	ldr	r3, [r3, #0]
 801310a:	405a      	eors	r2, r3
 801310c:	68fb      	ldr	r3, [r7, #12]
 801310e:	3308      	adds	r3, #8
 8013110:	681b      	ldr	r3, [r3, #0]
 8013112:	4013      	ands	r3, r2
 8013114:	2b00      	cmp	r3, #0
 8013116:	d101      	bne.n	801311c <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8013118:	68fb      	ldr	r3, [r7, #12]
 801311a:	e038      	b.n	801318e <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801311c:	68fb      	ldr	r3, [r7, #12]
 801311e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013122:	f003 0302 	and.w	r3, r3, #2
 8013126:	2b00      	cmp	r3, #0
 8013128:	d108      	bne.n	801313c <ip4_route+0x78>
 801312a:	687b      	ldr	r3, [r7, #4]
 801312c:	681a      	ldr	r2, [r3, #0]
 801312e:	68fb      	ldr	r3, [r7, #12]
 8013130:	330c      	adds	r3, #12
 8013132:	681b      	ldr	r3, [r3, #0]
 8013134:	429a      	cmp	r2, r3
 8013136:	d101      	bne.n	801313c <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8013138:	68fb      	ldr	r3, [r7, #12]
 801313a:	e028      	b.n	801318e <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 801313c:	68fb      	ldr	r3, [r7, #12]
 801313e:	681b      	ldr	r3, [r3, #0]
 8013140:	60fb      	str	r3, [r7, #12]
 8013142:	68fb      	ldr	r3, [r7, #12]
 8013144:	2b00      	cmp	r3, #0
 8013146:	d1c5      	bne.n	80130d4 <ip4_route+0x10>
>>>>>>> Stashed changes
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
<<<<<<< Updated upstream
 8013178:	4b15      	ldr	r3, [pc, #84]	; (80131d0 <ip4_route+0xdc>)
 801317a:	681b      	ldr	r3, [r3, #0]
 801317c:	2b00      	cmp	r3, #0
 801317e:	d01a      	beq.n	80131b6 <ip4_route+0xc2>
 8013180:	4b13      	ldr	r3, [pc, #76]	; (80131d0 <ip4_route+0xdc>)
 8013182:	681b      	ldr	r3, [r3, #0]
 8013184:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013188:	f003 0301 	and.w	r3, r3, #1
 801318c:	2b00      	cmp	r3, #0
 801318e:	d012      	beq.n	80131b6 <ip4_route+0xc2>
 8013190:	4b0f      	ldr	r3, [pc, #60]	; (80131d0 <ip4_route+0xdc>)
 8013192:	681b      	ldr	r3, [r3, #0]
 8013194:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013198:	f003 0304 	and.w	r3, r3, #4
 801319c:	2b00      	cmp	r3, #0
 801319e:	d00a      	beq.n	80131b6 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80131a0:	4b0b      	ldr	r3, [pc, #44]	; (80131d0 <ip4_route+0xdc>)
 80131a2:	681b      	ldr	r3, [r3, #0]
 80131a4:	3304      	adds	r3, #4
 80131a6:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80131a8:	2b00      	cmp	r3, #0
 80131aa:	d004      	beq.n	80131b6 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80131ac:	687b      	ldr	r3, [r7, #4]
 80131ae:	681b      	ldr	r3, [r3, #0]
 80131b0:	b2db      	uxtb	r3, r3
 80131b2:	2b7f      	cmp	r3, #127	; 0x7f
 80131b4:	d101      	bne.n	80131ba <ip4_route+0xc6>
=======
 8013148:	4b15      	ldr	r3, [pc, #84]	; (80131a0 <ip4_route+0xdc>)
 801314a:	681b      	ldr	r3, [r3, #0]
 801314c:	2b00      	cmp	r3, #0
 801314e:	d01a      	beq.n	8013186 <ip4_route+0xc2>
 8013150:	4b13      	ldr	r3, [pc, #76]	; (80131a0 <ip4_route+0xdc>)
 8013152:	681b      	ldr	r3, [r3, #0]
 8013154:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013158:	f003 0301 	and.w	r3, r3, #1
 801315c:	2b00      	cmp	r3, #0
 801315e:	d012      	beq.n	8013186 <ip4_route+0xc2>
 8013160:	4b0f      	ldr	r3, [pc, #60]	; (80131a0 <ip4_route+0xdc>)
 8013162:	681b      	ldr	r3, [r3, #0]
 8013164:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013168:	f003 0304 	and.w	r3, r3, #4
 801316c:	2b00      	cmp	r3, #0
 801316e:	d00a      	beq.n	8013186 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8013170:	4b0b      	ldr	r3, [pc, #44]	; (80131a0 <ip4_route+0xdc>)
 8013172:	681b      	ldr	r3, [r3, #0]
 8013174:	3304      	adds	r3, #4
 8013176:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8013178:	2b00      	cmp	r3, #0
 801317a:	d004      	beq.n	8013186 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801317c:	687b      	ldr	r3, [r7, #4]
 801317e:	681b      	ldr	r3, [r3, #0]
 8013180:	b2db      	uxtb	r3, r3
 8013182:	2b7f      	cmp	r3, #127	; 0x7f
 8013184:	d101      	bne.n	801318a <ip4_route+0xc6>
>>>>>>> Stashed changes
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
<<<<<<< Updated upstream
 80131b6:	2300      	movs	r3, #0
 80131b8:	e001      	b.n	80131be <ip4_route+0xca>
  }

  return netif_default;
 80131ba:	4b05      	ldr	r3, [pc, #20]	; (80131d0 <ip4_route+0xdc>)
 80131bc:	681b      	ldr	r3, [r3, #0]
}
 80131be:	4618      	mov	r0, r3
 80131c0:	3714      	adds	r7, #20
 80131c2:	46bd      	mov	sp, r7
 80131c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131c8:	4770      	bx	lr
 80131ca:	bf00      	nop
 80131cc:	20007290 	.word	0x20007290
 80131d0:	20007294 	.word	0x20007294

080131d4 <ip4_input_accept>:
=======
 8013186:	2300      	movs	r3, #0
 8013188:	e001      	b.n	801318e <ip4_route+0xca>
  }

  return netif_default;
 801318a:	4b05      	ldr	r3, [pc, #20]	; (80131a0 <ip4_route+0xdc>)
 801318c:	681b      	ldr	r3, [r3, #0]
}
 801318e:	4618      	mov	r0, r3
 8013190:	3714      	adds	r7, #20
 8013192:	46bd      	mov	sp, r7
 8013194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013198:	4770      	bx	lr
 801319a:	bf00      	nop
 801319c:	20007290 	.word	0x20007290
 80131a0:	20007294 	.word	0x20007294

080131a4 <ip4_input_accept>:
>>>>>>> Stashed changes
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
<<<<<<< Updated upstream
 80131d4:	b580      	push	{r7, lr}
 80131d6:	b082      	sub	sp, #8
 80131d8:	af00      	add	r7, sp, #0
 80131da:	6078      	str	r0, [r7, #4]
=======
 80131a4:	b580      	push	{r7, lr}
 80131a6:	b082      	sub	sp, #8
 80131a8:	af00      	add	r7, sp, #0
 80131aa:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
<<<<<<< Updated upstream
 80131dc:	687b      	ldr	r3, [r7, #4]
 80131de:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80131e2:	f003 0301 	and.w	r3, r3, #1
 80131e6:	b2db      	uxtb	r3, r3
 80131e8:	2b00      	cmp	r3, #0
 80131ea:	d016      	beq.n	801321a <ip4_input_accept+0x46>
 80131ec:	687b      	ldr	r3, [r7, #4]
 80131ee:	3304      	adds	r3, #4
 80131f0:	681b      	ldr	r3, [r3, #0]
 80131f2:	2b00      	cmp	r3, #0
 80131f4:	d011      	beq.n	801321a <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80131f6:	4b0b      	ldr	r3, [pc, #44]	; (8013224 <ip4_input_accept+0x50>)
 80131f8:	695a      	ldr	r2, [r3, #20]
 80131fa:	687b      	ldr	r3, [r7, #4]
 80131fc:	3304      	adds	r3, #4
 80131fe:	681b      	ldr	r3, [r3, #0]
 8013200:	429a      	cmp	r2, r3
 8013202:	d008      	beq.n	8013216 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8013204:	4b07      	ldr	r3, [pc, #28]	; (8013224 <ip4_input_accept+0x50>)
 8013206:	695b      	ldr	r3, [r3, #20]
 8013208:	6879      	ldr	r1, [r7, #4]
 801320a:	4618      	mov	r0, r3
 801320c:	f000 fa08 	bl	8013620 <ip4_addr_isbroadcast_u32>
 8013210:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8013212:	2b00      	cmp	r3, #0
 8013214:	d001      	beq.n	801321a <ip4_input_accept+0x46>
=======
 80131ac:	687b      	ldr	r3, [r7, #4]
 80131ae:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80131b2:	f003 0301 	and.w	r3, r3, #1
 80131b6:	b2db      	uxtb	r3, r3
 80131b8:	2b00      	cmp	r3, #0
 80131ba:	d016      	beq.n	80131ea <ip4_input_accept+0x46>
 80131bc:	687b      	ldr	r3, [r7, #4]
 80131be:	3304      	adds	r3, #4
 80131c0:	681b      	ldr	r3, [r3, #0]
 80131c2:	2b00      	cmp	r3, #0
 80131c4:	d011      	beq.n	80131ea <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80131c6:	4b0b      	ldr	r3, [pc, #44]	; (80131f4 <ip4_input_accept+0x50>)
 80131c8:	695a      	ldr	r2, [r3, #20]
 80131ca:	687b      	ldr	r3, [r7, #4]
 80131cc:	3304      	adds	r3, #4
 80131ce:	681b      	ldr	r3, [r3, #0]
 80131d0:	429a      	cmp	r2, r3
 80131d2:	d008      	beq.n	80131e6 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 80131d4:	4b07      	ldr	r3, [pc, #28]	; (80131f4 <ip4_input_accept+0x50>)
 80131d6:	695b      	ldr	r3, [r3, #20]
 80131d8:	6879      	ldr	r1, [r7, #4]
 80131da:	4618      	mov	r0, r3
 80131dc:	f000 fa08 	bl	80135f0 <ip4_addr_isbroadcast_u32>
 80131e0:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80131e2:	2b00      	cmp	r3, #0
 80131e4:	d001      	beq.n	80131ea <ip4_input_accept+0x46>
>>>>>>> Stashed changes
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
<<<<<<< Updated upstream
 8013216:	2301      	movs	r3, #1
 8013218:	e000      	b.n	801321c <ip4_input_accept+0x48>
=======
 80131e6:	2301      	movs	r3, #1
 80131e8:	e000      	b.n	80131ec <ip4_input_accept+0x48>
>>>>>>> Stashed changes
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
<<<<<<< Updated upstream
 801321a:	2300      	movs	r3, #0
}
 801321c:	4618      	mov	r0, r3
 801321e:	3708      	adds	r7, #8
 8013220:	46bd      	mov	sp, r7
 8013222:	bd80      	pop	{r7, pc}
 8013224:	20003d5c 	.word	0x20003d5c

08013228 <ip4_input>:
=======
 80131ea:	2300      	movs	r3, #0
}
 80131ec:	4618      	mov	r0, r3
 80131ee:	3708      	adds	r7, #8
 80131f0:	46bd      	mov	sp, r7
 80131f2:	bd80      	pop	{r7, pc}
 80131f4:	20003d5c 	.word	0x20003d5c

080131f8 <ip4_input>:
>>>>>>> Stashed changes
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
<<<<<<< Updated upstream
 8013228:	b580      	push	{r7, lr}
 801322a:	b086      	sub	sp, #24
 801322c:	af00      	add	r7, sp, #0
 801322e:	6078      	str	r0, [r7, #4]
 8013230:	6039      	str	r1, [r7, #0]
=======
 80131f8:	b580      	push	{r7, lr}
 80131fa:	b086      	sub	sp, #24
 80131fc:	af00      	add	r7, sp, #0
 80131fe:	6078      	str	r0, [r7, #4]
 8013200:	6039      	str	r1, [r7, #0]
>>>>>>> Stashed changes

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
<<<<<<< Updated upstream
 8013232:	687b      	ldr	r3, [r7, #4]
 8013234:	685b      	ldr	r3, [r3, #4]
 8013236:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8013238:	697b      	ldr	r3, [r7, #20]
 801323a:	781b      	ldrb	r3, [r3, #0]
 801323c:	091b      	lsrs	r3, r3, #4
 801323e:	b2db      	uxtb	r3, r3
 8013240:	2b04      	cmp	r3, #4
 8013242:	d004      	beq.n	801324e <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8013244:	6878      	ldr	r0, [r7, #4]
 8013246:	f7f8 ffd3 	bl	800c1f0 <pbuf_free>
=======
 8013202:	687b      	ldr	r3, [r7, #4]
 8013204:	685b      	ldr	r3, [r3, #4]
 8013206:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8013208:	697b      	ldr	r3, [r7, #20]
 801320a:	781b      	ldrb	r3, [r3, #0]
 801320c:	091b      	lsrs	r3, r3, #4
 801320e:	b2db      	uxtb	r3, r3
 8013210:	2b04      	cmp	r3, #4
 8013212:	d004      	beq.n	801321e <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8013214:	6878      	ldr	r0, [r7, #4]
 8013216:	f7f8 ffd3 	bl	800c1c0 <pbuf_free>
>>>>>>> Stashed changes
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
<<<<<<< Updated upstream
 801324a:	2300      	movs	r3, #0
 801324c:	e107      	b.n	801345e <ip4_input+0x236>
=======
 801321a:	2300      	movs	r3, #0
 801321c:	e107      	b.n	801342e <ip4_input+0x236>
>>>>>>> Stashed changes
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
<<<<<<< Updated upstream
 801324e:	697b      	ldr	r3, [r7, #20]
 8013250:	781b      	ldrb	r3, [r3, #0]
 8013252:	f003 030f 	and.w	r3, r3, #15
 8013256:	b2db      	uxtb	r3, r3
 8013258:	009b      	lsls	r3, r3, #2
 801325a:	b2db      	uxtb	r3, r3
 801325c:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801325e:	697b      	ldr	r3, [r7, #20]
 8013260:	885b      	ldrh	r3, [r3, #2]
 8013262:	b29b      	uxth	r3, r3
 8013264:	4618      	mov	r0, r3
 8013266:	f7f7 fd30 	bl	800acca <lwip_htons>
 801326a:	4603      	mov	r3, r0
 801326c:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801326e:	687b      	ldr	r3, [r7, #4]
 8013270:	891b      	ldrh	r3, [r3, #8]
 8013272:	89ba      	ldrh	r2, [r7, #12]
 8013274:	429a      	cmp	r2, r3
 8013276:	d204      	bcs.n	8013282 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8013278:	89bb      	ldrh	r3, [r7, #12]
 801327a:	4619      	mov	r1, r3
 801327c:	6878      	ldr	r0, [r7, #4]
 801327e:	f7f8 fe31 	bl	800bee4 <pbuf_realloc>
=======
 801321e:	697b      	ldr	r3, [r7, #20]
 8013220:	781b      	ldrb	r3, [r3, #0]
 8013222:	f003 030f 	and.w	r3, r3, #15
 8013226:	b2db      	uxtb	r3, r3
 8013228:	009b      	lsls	r3, r3, #2
 801322a:	b2db      	uxtb	r3, r3
 801322c:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801322e:	697b      	ldr	r3, [r7, #20]
 8013230:	885b      	ldrh	r3, [r3, #2]
 8013232:	b29b      	uxth	r3, r3
 8013234:	4618      	mov	r0, r3
 8013236:	f7f7 fd30 	bl	800ac9a <lwip_htons>
 801323a:	4603      	mov	r3, r0
 801323c:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801323e:	687b      	ldr	r3, [r7, #4]
 8013240:	891b      	ldrh	r3, [r3, #8]
 8013242:	89ba      	ldrh	r2, [r7, #12]
 8013244:	429a      	cmp	r2, r3
 8013246:	d204      	bcs.n	8013252 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8013248:	89bb      	ldrh	r3, [r7, #12]
 801324a:	4619      	mov	r1, r3
 801324c:	6878      	ldr	r0, [r7, #4]
 801324e:	f7f8 fe31 	bl	800beb4 <pbuf_realloc>
>>>>>>> Stashed changes
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
<<<<<<< Updated upstream
 8013282:	687b      	ldr	r3, [r7, #4]
 8013284:	895b      	ldrh	r3, [r3, #10]
 8013286:	89fa      	ldrh	r2, [r7, #14]
 8013288:	429a      	cmp	r2, r3
 801328a:	d807      	bhi.n	801329c <ip4_input+0x74>
 801328c:	687b      	ldr	r3, [r7, #4]
 801328e:	891b      	ldrh	r3, [r3, #8]
 8013290:	89ba      	ldrh	r2, [r7, #12]
 8013292:	429a      	cmp	r2, r3
 8013294:	d802      	bhi.n	801329c <ip4_input+0x74>
 8013296:	89fb      	ldrh	r3, [r7, #14]
 8013298:	2b13      	cmp	r3, #19
 801329a:	d804      	bhi.n	80132a6 <ip4_input+0x7e>
=======
 8013252:	687b      	ldr	r3, [r7, #4]
 8013254:	895b      	ldrh	r3, [r3, #10]
 8013256:	89fa      	ldrh	r2, [r7, #14]
 8013258:	429a      	cmp	r2, r3
 801325a:	d807      	bhi.n	801326c <ip4_input+0x74>
 801325c:	687b      	ldr	r3, [r7, #4]
 801325e:	891b      	ldrh	r3, [r3, #8]
 8013260:	89ba      	ldrh	r2, [r7, #12]
 8013262:	429a      	cmp	r2, r3
 8013264:	d802      	bhi.n	801326c <ip4_input+0x74>
 8013266:	89fb      	ldrh	r3, [r7, #14]
 8013268:	2b13      	cmp	r3, #19
 801326a:	d804      	bhi.n	8013276 <ip4_input+0x7e>
>>>>>>> Stashed changes
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
<<<<<<< Updated upstream
 801329c:	6878      	ldr	r0, [r7, #4]
 801329e:	f7f8 ffa7 	bl	800c1f0 <pbuf_free>
=======
 801326c:	6878      	ldr	r0, [r7, #4]
 801326e:	f7f8 ffa7 	bl	800c1c0 <pbuf_free>
>>>>>>> Stashed changes
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
<<<<<<< Updated upstream
 80132a2:	2300      	movs	r3, #0
 80132a4:	e0db      	b.n	801345e <ip4_input+0x236>
=======
 8013272:	2300      	movs	r3, #0
 8013274:	e0db      	b.n	801342e <ip4_input+0x236>
>>>>>>> Stashed changes
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
<<<<<<< Updated upstream
 80132a6:	697b      	ldr	r3, [r7, #20]
 80132a8:	691b      	ldr	r3, [r3, #16]
 80132aa:	4a6f      	ldr	r2, [pc, #444]	; (8013468 <ip4_input+0x240>)
 80132ac:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80132ae:	697b      	ldr	r3, [r7, #20]
 80132b0:	68db      	ldr	r3, [r3, #12]
 80132b2:	4a6d      	ldr	r2, [pc, #436]	; (8013468 <ip4_input+0x240>)
 80132b4:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80132b6:	4b6c      	ldr	r3, [pc, #432]	; (8013468 <ip4_input+0x240>)
 80132b8:	695b      	ldr	r3, [r3, #20]
 80132ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80132be:	2be0      	cmp	r3, #224	; 0xe0
 80132c0:	d112      	bne.n	80132e8 <ip4_input+0xc0>
=======
 8013276:	697b      	ldr	r3, [r7, #20]
 8013278:	691b      	ldr	r3, [r3, #16]
 801327a:	4a6f      	ldr	r2, [pc, #444]	; (8013438 <ip4_input+0x240>)
 801327c:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801327e:	697b      	ldr	r3, [r7, #20]
 8013280:	68db      	ldr	r3, [r3, #12]
 8013282:	4a6d      	ldr	r2, [pc, #436]	; (8013438 <ip4_input+0x240>)
 8013284:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8013286:	4b6c      	ldr	r3, [pc, #432]	; (8013438 <ip4_input+0x240>)
 8013288:	695b      	ldr	r3, [r3, #20]
 801328a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801328e:	2be0      	cmp	r3, #224	; 0xe0
 8013290:	d112      	bne.n	80132b8 <ip4_input+0xc0>
>>>>>>> Stashed changes
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
<<<<<<< Updated upstream
 80132c2:	683b      	ldr	r3, [r7, #0]
 80132c4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80132c8:	f003 0301 	and.w	r3, r3, #1
 80132cc:	b2db      	uxtb	r3, r3
 80132ce:	2b00      	cmp	r3, #0
 80132d0:	d007      	beq.n	80132e2 <ip4_input+0xba>
 80132d2:	683b      	ldr	r3, [r7, #0]
 80132d4:	3304      	adds	r3, #4
 80132d6:	681b      	ldr	r3, [r3, #0]
 80132d8:	2b00      	cmp	r3, #0
 80132da:	d002      	beq.n	80132e2 <ip4_input+0xba>
      netif = inp;
 80132dc:	683b      	ldr	r3, [r7, #0]
 80132de:	613b      	str	r3, [r7, #16]
 80132e0:	e02a      	b.n	8013338 <ip4_input+0x110>
    } else {
      netif = NULL;
 80132e2:	2300      	movs	r3, #0
 80132e4:	613b      	str	r3, [r7, #16]
 80132e6:	e027      	b.n	8013338 <ip4_input+0x110>
=======
 8013292:	683b      	ldr	r3, [r7, #0]
 8013294:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013298:	f003 0301 	and.w	r3, r3, #1
 801329c:	b2db      	uxtb	r3, r3
 801329e:	2b00      	cmp	r3, #0
 80132a0:	d007      	beq.n	80132b2 <ip4_input+0xba>
 80132a2:	683b      	ldr	r3, [r7, #0]
 80132a4:	3304      	adds	r3, #4
 80132a6:	681b      	ldr	r3, [r3, #0]
 80132a8:	2b00      	cmp	r3, #0
 80132aa:	d002      	beq.n	80132b2 <ip4_input+0xba>
      netif = inp;
 80132ac:	683b      	ldr	r3, [r7, #0]
 80132ae:	613b      	str	r3, [r7, #16]
 80132b0:	e02a      	b.n	8013308 <ip4_input+0x110>
    } else {
      netif = NULL;
 80132b2:	2300      	movs	r3, #0
 80132b4:	613b      	str	r3, [r7, #16]
 80132b6:	e027      	b.n	8013308 <ip4_input+0x110>
>>>>>>> Stashed changes
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
<<<<<<< Updated upstream
 80132e8:	6838      	ldr	r0, [r7, #0]
 80132ea:	f7ff ff73 	bl	80131d4 <ip4_input_accept>
 80132ee:	4603      	mov	r3, r0
 80132f0:	2b00      	cmp	r3, #0
 80132f2:	d002      	beq.n	80132fa <ip4_input+0xd2>
      netif = inp;
 80132f4:	683b      	ldr	r3, [r7, #0]
 80132f6:	613b      	str	r3, [r7, #16]
 80132f8:	e01e      	b.n	8013338 <ip4_input+0x110>
    } else {
      netif = NULL;
 80132fa:	2300      	movs	r3, #0
 80132fc:	613b      	str	r3, [r7, #16]
=======
 80132b8:	6838      	ldr	r0, [r7, #0]
 80132ba:	f7ff ff73 	bl	80131a4 <ip4_input_accept>
 80132be:	4603      	mov	r3, r0
 80132c0:	2b00      	cmp	r3, #0
 80132c2:	d002      	beq.n	80132ca <ip4_input+0xd2>
      netif = inp;
 80132c4:	683b      	ldr	r3, [r7, #0]
 80132c6:	613b      	str	r3, [r7, #16]
 80132c8:	e01e      	b.n	8013308 <ip4_input+0x110>
    } else {
      netif = NULL;
 80132ca:	2300      	movs	r3, #0
 80132cc:	613b      	str	r3, [r7, #16]
>>>>>>> Stashed changes
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
<<<<<<< Updated upstream
 80132fe:	4b5a      	ldr	r3, [pc, #360]	; (8013468 <ip4_input+0x240>)
 8013300:	695b      	ldr	r3, [r3, #20]
 8013302:	b2db      	uxtb	r3, r3
 8013304:	2b7f      	cmp	r3, #127	; 0x7f
 8013306:	d017      	beq.n	8013338 <ip4_input+0x110>
=======
 80132ce:	4b5a      	ldr	r3, [pc, #360]	; (8013438 <ip4_input+0x240>)
 80132d0:	695b      	ldr	r3, [r3, #20]
 80132d2:	b2db      	uxtb	r3, r3
 80132d4:	2b7f      	cmp	r3, #127	; 0x7f
 80132d6:	d017      	beq.n	8013308 <ip4_input+0x110>
>>>>>>> Stashed changes
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
<<<<<<< Updated upstream
 8013308:	4b58      	ldr	r3, [pc, #352]	; (801346c <ip4_input+0x244>)
 801330a:	681b      	ldr	r3, [r3, #0]
 801330c:	613b      	str	r3, [r7, #16]
 801330e:	e00e      	b.n	801332e <ip4_input+0x106>
          if (netif == inp) {
 8013310:	693a      	ldr	r2, [r7, #16]
 8013312:	683b      	ldr	r3, [r7, #0]
 8013314:	429a      	cmp	r2, r3
 8013316:	d006      	beq.n	8013326 <ip4_input+0xfe>
=======
 80132d8:	4b58      	ldr	r3, [pc, #352]	; (801343c <ip4_input+0x244>)
 80132da:	681b      	ldr	r3, [r3, #0]
 80132dc:	613b      	str	r3, [r7, #16]
 80132de:	e00e      	b.n	80132fe <ip4_input+0x106>
          if (netif == inp) {
 80132e0:	693a      	ldr	r2, [r7, #16]
 80132e2:	683b      	ldr	r3, [r7, #0]
 80132e4:	429a      	cmp	r2, r3
 80132e6:	d006      	beq.n	80132f6 <ip4_input+0xfe>
>>>>>>> Stashed changes
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
<<<<<<< Updated upstream
 8013318:	6938      	ldr	r0, [r7, #16]
 801331a:	f7ff ff5b 	bl	80131d4 <ip4_input_accept>
 801331e:	4603      	mov	r3, r0
 8013320:	2b00      	cmp	r3, #0
 8013322:	d108      	bne.n	8013336 <ip4_input+0x10e>
 8013324:	e000      	b.n	8013328 <ip4_input+0x100>
            continue;
 8013326:	bf00      	nop
        NETIF_FOREACH(netif) {
 8013328:	693b      	ldr	r3, [r7, #16]
 801332a:	681b      	ldr	r3, [r3, #0]
 801332c:	613b      	str	r3, [r7, #16]
 801332e:	693b      	ldr	r3, [r7, #16]
 8013330:	2b00      	cmp	r3, #0
 8013332:	d1ed      	bne.n	8013310 <ip4_input+0xe8>
 8013334:	e000      	b.n	8013338 <ip4_input+0x110>
            break;
 8013336:	bf00      	nop
=======
 80132e8:	6938      	ldr	r0, [r7, #16]
 80132ea:	f7ff ff5b 	bl	80131a4 <ip4_input_accept>
 80132ee:	4603      	mov	r3, r0
 80132f0:	2b00      	cmp	r3, #0
 80132f2:	d108      	bne.n	8013306 <ip4_input+0x10e>
 80132f4:	e000      	b.n	80132f8 <ip4_input+0x100>
            continue;
 80132f6:	bf00      	nop
        NETIF_FOREACH(netif) {
 80132f8:	693b      	ldr	r3, [r7, #16]
 80132fa:	681b      	ldr	r3, [r3, #0]
 80132fc:	613b      	str	r3, [r7, #16]
 80132fe:	693b      	ldr	r3, [r7, #16]
 8013300:	2b00      	cmp	r3, #0
 8013302:	d1ed      	bne.n	80132e0 <ip4_input+0xe8>
 8013304:	e000      	b.n	8013308 <ip4_input+0x110>
            break;
 8013306:	bf00      	nop
>>>>>>> Stashed changes
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
<<<<<<< Updated upstream
 8013338:	4b4b      	ldr	r3, [pc, #300]	; (8013468 <ip4_input+0x240>)
 801333a:	691b      	ldr	r3, [r3, #16]
 801333c:	6839      	ldr	r1, [r7, #0]
 801333e:	4618      	mov	r0, r3
 8013340:	f000 f96e 	bl	8013620 <ip4_addr_isbroadcast_u32>
 8013344:	4603      	mov	r3, r0
 8013346:	2b00      	cmp	r3, #0
 8013348:	d105      	bne.n	8013356 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801334a:	4b47      	ldr	r3, [pc, #284]	; (8013468 <ip4_input+0x240>)
 801334c:	691b      	ldr	r3, [r3, #16]
 801334e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8013352:	2be0      	cmp	r3, #224	; 0xe0
 8013354:	d104      	bne.n	8013360 <ip4_input+0x138>
=======
 8013308:	4b4b      	ldr	r3, [pc, #300]	; (8013438 <ip4_input+0x240>)
 801330a:	691b      	ldr	r3, [r3, #16]
 801330c:	6839      	ldr	r1, [r7, #0]
 801330e:	4618      	mov	r0, r3
 8013310:	f000 f96e 	bl	80135f0 <ip4_addr_isbroadcast_u32>
 8013314:	4603      	mov	r3, r0
 8013316:	2b00      	cmp	r3, #0
 8013318:	d105      	bne.n	8013326 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801331a:	4b47      	ldr	r3, [pc, #284]	; (8013438 <ip4_input+0x240>)
 801331c:	691b      	ldr	r3, [r3, #16]
 801331e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8013322:	2be0      	cmp	r3, #224	; 0xe0
 8013324:	d104      	bne.n	8013330 <ip4_input+0x138>
>>>>>>> Stashed changes
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
<<<<<<< Updated upstream
 8013356:	6878      	ldr	r0, [r7, #4]
 8013358:	f7f8 ff4a 	bl	800c1f0 <pbuf_free>
=======
 8013326:	6878      	ldr	r0, [r7, #4]
 8013328:	f7f8 ff4a 	bl	800c1c0 <pbuf_free>
>>>>>>> Stashed changes
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
<<<<<<< Updated upstream
 801335c:	2300      	movs	r3, #0
 801335e:	e07e      	b.n	801345e <ip4_input+0x236>
=======
 801332c:	2300      	movs	r3, #0
 801332e:	e07e      	b.n	801342e <ip4_input+0x236>
>>>>>>> Stashed changes
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
<<<<<<< Updated upstream
 8013360:	693b      	ldr	r3, [r7, #16]
 8013362:	2b00      	cmp	r3, #0
 8013364:	d104      	bne.n	8013370 <ip4_input+0x148>
=======
 8013330:	693b      	ldr	r3, [r7, #16]
 8013332:	2b00      	cmp	r3, #0
 8013334:	d104      	bne.n	8013340 <ip4_input+0x148>
>>>>>>> Stashed changes
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
<<<<<<< Updated upstream
 8013366:	6878      	ldr	r0, [r7, #4]
 8013368:	f7f8 ff42 	bl	800c1f0 <pbuf_free>
    return ERR_OK;
 801336c:	2300      	movs	r3, #0
 801336e:	e076      	b.n	801345e <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8013370:	697b      	ldr	r3, [r7, #20]
 8013372:	88db      	ldrh	r3, [r3, #6]
 8013374:	b29b      	uxth	r3, r3
 8013376:	461a      	mov	r2, r3
 8013378:	f64f 733f 	movw	r3, #65343	; 0xff3f
 801337c:	4013      	ands	r3, r2
 801337e:	2b00      	cmp	r3, #0
 8013380:	d00b      	beq.n	801339a <ip4_input+0x172>
=======
 8013336:	6878      	ldr	r0, [r7, #4]
 8013338:	f7f8 ff42 	bl	800c1c0 <pbuf_free>
    return ERR_OK;
 801333c:	2300      	movs	r3, #0
 801333e:	e076      	b.n	801342e <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8013340:	697b      	ldr	r3, [r7, #20]
 8013342:	88db      	ldrh	r3, [r3, #6]
 8013344:	b29b      	uxth	r3, r3
 8013346:	461a      	mov	r2, r3
 8013348:	f64f 733f 	movw	r3, #65343	; 0xff3f
 801334c:	4013      	ands	r3, r2
 801334e:	2b00      	cmp	r3, #0
 8013350:	d00b      	beq.n	801336a <ip4_input+0x172>
>>>>>>> Stashed changes
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
<<<<<<< Updated upstream
 8013382:	6878      	ldr	r0, [r7, #4]
 8013384:	f000 fc92 	bl	8013cac <ip4_reass>
 8013388:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801338a:	687b      	ldr	r3, [r7, #4]
 801338c:	2b00      	cmp	r3, #0
 801338e:	d101      	bne.n	8013394 <ip4_input+0x16c>
      return ERR_OK;
 8013390:	2300      	movs	r3, #0
 8013392:	e064      	b.n	801345e <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8013394:	687b      	ldr	r3, [r7, #4]
 8013396:	685b      	ldr	r3, [r3, #4]
 8013398:	617b      	str	r3, [r7, #20]
=======
 8013352:	6878      	ldr	r0, [r7, #4]
 8013354:	f000 fc92 	bl	8013c7c <ip4_reass>
 8013358:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801335a:	687b      	ldr	r3, [r7, #4]
 801335c:	2b00      	cmp	r3, #0
 801335e:	d101      	bne.n	8013364 <ip4_input+0x16c>
      return ERR_OK;
 8013360:	2300      	movs	r3, #0
 8013362:	e064      	b.n	801342e <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8013364:	687b      	ldr	r3, [r7, #4]
 8013366:	685b      	ldr	r3, [r3, #4]
 8013368:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
<<<<<<< Updated upstream
 801339a:	4a33      	ldr	r2, [pc, #204]	; (8013468 <ip4_input+0x240>)
 801339c:	693b      	ldr	r3, [r7, #16]
 801339e:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 80133a0:	4a31      	ldr	r2, [pc, #196]	; (8013468 <ip4_input+0x240>)
 80133a2:	683b      	ldr	r3, [r7, #0]
 80133a4:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 80133a6:	4a30      	ldr	r2, [pc, #192]	; (8013468 <ip4_input+0x240>)
 80133a8:	697b      	ldr	r3, [r7, #20]
 80133aa:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 80133ac:	697b      	ldr	r3, [r7, #20]
 80133ae:	781b      	ldrb	r3, [r3, #0]
 80133b0:	f003 030f 	and.w	r3, r3, #15
 80133b4:	b2db      	uxtb	r3, r3
 80133b6:	009b      	lsls	r3, r3, #2
 80133b8:	b2db      	uxtb	r3, r3
 80133ba:	b29a      	uxth	r2, r3
 80133bc:	4b2a      	ldr	r3, [pc, #168]	; (8013468 <ip4_input+0x240>)
 80133be:	819a      	strh	r2, [r3, #12]
=======
 801336a:	4a33      	ldr	r2, [pc, #204]	; (8013438 <ip4_input+0x240>)
 801336c:	693b      	ldr	r3, [r7, #16]
 801336e:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8013370:	4a31      	ldr	r2, [pc, #196]	; (8013438 <ip4_input+0x240>)
 8013372:	683b      	ldr	r3, [r7, #0]
 8013374:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8013376:	4a30      	ldr	r2, [pc, #192]	; (8013438 <ip4_input+0x240>)
 8013378:	697b      	ldr	r3, [r7, #20]
 801337a:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 801337c:	697b      	ldr	r3, [r7, #20]
 801337e:	781b      	ldrb	r3, [r3, #0]
 8013380:	f003 030f 	and.w	r3, r3, #15
 8013384:	b2db      	uxtb	r3, r3
 8013386:	009b      	lsls	r3, r3, #2
 8013388:	b2db      	uxtb	r3, r3
 801338a:	b29a      	uxth	r2, r3
 801338c:	4b2a      	ldr	r3, [pc, #168]	; (8013438 <ip4_input+0x240>)
 801338e:	819a      	strh	r2, [r3, #12]
>>>>>>> Stashed changes
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
<<<<<<< Updated upstream
 80133c0:	89fb      	ldrh	r3, [r7, #14]
 80133c2:	4619      	mov	r1, r3
 80133c4:	6878      	ldr	r0, [r7, #4]
 80133c6:	f7f8 fe8d 	bl	800c0e4 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 80133ca:	697b      	ldr	r3, [r7, #20]
 80133cc:	7a5b      	ldrb	r3, [r3, #9]
 80133ce:	2b11      	cmp	r3, #17
 80133d0:	d006      	beq.n	80133e0 <ip4_input+0x1b8>
 80133d2:	2b11      	cmp	r3, #17
 80133d4:	dc13      	bgt.n	80133fe <ip4_input+0x1d6>
 80133d6:	2b01      	cmp	r3, #1
 80133d8:	d00c      	beq.n	80133f4 <ip4_input+0x1cc>
 80133da:	2b06      	cmp	r3, #6
 80133dc:	d005      	beq.n	80133ea <ip4_input+0x1c2>
 80133de:	e00e      	b.n	80133fe <ip4_input+0x1d6>
=======
 8013390:	89fb      	ldrh	r3, [r7, #14]
 8013392:	4619      	mov	r1, r3
 8013394:	6878      	ldr	r0, [r7, #4]
 8013396:	f7f8 fe8d 	bl	800c0b4 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801339a:	697b      	ldr	r3, [r7, #20]
 801339c:	7a5b      	ldrb	r3, [r3, #9]
 801339e:	2b11      	cmp	r3, #17
 80133a0:	d006      	beq.n	80133b0 <ip4_input+0x1b8>
 80133a2:	2b11      	cmp	r3, #17
 80133a4:	dc13      	bgt.n	80133ce <ip4_input+0x1d6>
 80133a6:	2b01      	cmp	r3, #1
 80133a8:	d00c      	beq.n	80133c4 <ip4_input+0x1cc>
 80133aa:	2b06      	cmp	r3, #6
 80133ac:	d005      	beq.n	80133ba <ip4_input+0x1c2>
 80133ae:	e00e      	b.n	80133ce <ip4_input+0x1d6>
>>>>>>> Stashed changes
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
<<<<<<< Updated upstream
 80133e0:	6839      	ldr	r1, [r7, #0]
 80133e2:	6878      	ldr	r0, [r7, #4]
 80133e4:	f7fe fc68 	bl	8011cb8 <udp_input>
        break;
 80133e8:	e026      	b.n	8013438 <ip4_input+0x210>
=======
 80133b0:	6839      	ldr	r1, [r7, #0]
 80133b2:	6878      	ldr	r0, [r7, #4]
 80133b4:	f7fe fc68 	bl	8011c88 <udp_input>
        break;
 80133b8:	e026      	b.n	8013408 <ip4_input+0x210>
>>>>>>> Stashed changes
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
<<<<<<< Updated upstream
 80133ea:	6839      	ldr	r1, [r7, #0]
 80133ec:	6878      	ldr	r0, [r7, #4]
 80133ee:	f7fa fd27 	bl	800de40 <tcp_input>
        break;
 80133f2:	e021      	b.n	8013438 <ip4_input+0x210>
=======
 80133ba:	6839      	ldr	r1, [r7, #0]
 80133bc:	6878      	ldr	r0, [r7, #4]
 80133be:	f7fa fd27 	bl	800de10 <tcp_input>
        break;
 80133c2:	e021      	b.n	8013408 <ip4_input+0x210>
>>>>>>> Stashed changes
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
<<<<<<< Updated upstream
 80133f4:	6839      	ldr	r1, [r7, #0]
 80133f6:	6878      	ldr	r0, [r7, #4]
 80133f8:	f7ff fcee 	bl	8012dd8 <icmp_input>
        break;
 80133fc:	e01c      	b.n	8013438 <ip4_input+0x210>
=======
 80133c4:	6839      	ldr	r1, [r7, #0]
 80133c6:	6878      	ldr	r0, [r7, #4]
 80133c8:	f7ff fcee 	bl	8012da8 <icmp_input>
        break;
 80133cc:	e01c      	b.n	8013408 <ip4_input+0x210>
>>>>>>> Stashed changes
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
<<<<<<< Updated upstream
 80133fe:	4b1a      	ldr	r3, [pc, #104]	; (8013468 <ip4_input+0x240>)
 8013400:	695b      	ldr	r3, [r3, #20]
 8013402:	6939      	ldr	r1, [r7, #16]
 8013404:	4618      	mov	r0, r3
 8013406:	f000 f90b 	bl	8013620 <ip4_addr_isbroadcast_u32>
 801340a:	4603      	mov	r3, r0
 801340c:	2b00      	cmp	r3, #0
 801340e:	d10f      	bne.n	8013430 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8013410:	4b15      	ldr	r3, [pc, #84]	; (8013468 <ip4_input+0x240>)
 8013412:	695b      	ldr	r3, [r3, #20]
 8013414:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8013418:	2be0      	cmp	r3, #224	; 0xe0
 801341a:	d009      	beq.n	8013430 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 801341c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8013420:	4619      	mov	r1, r3
 8013422:	6878      	ldr	r0, [r7, #4]
 8013424:	f7f8 fed1 	bl	800c1ca <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8013428:	2102      	movs	r1, #2
 801342a:	6878      	ldr	r0, [r7, #4]
 801342c:	f7ff fdd8 	bl	8012fe0 <icmp_dest_unreach>
=======
 80133ce:	4b1a      	ldr	r3, [pc, #104]	; (8013438 <ip4_input+0x240>)
 80133d0:	695b      	ldr	r3, [r3, #20]
 80133d2:	6939      	ldr	r1, [r7, #16]
 80133d4:	4618      	mov	r0, r3
 80133d6:	f000 f90b 	bl	80135f0 <ip4_addr_isbroadcast_u32>
 80133da:	4603      	mov	r3, r0
 80133dc:	2b00      	cmp	r3, #0
 80133de:	d10f      	bne.n	8013400 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80133e0:	4b15      	ldr	r3, [pc, #84]	; (8013438 <ip4_input+0x240>)
 80133e2:	695b      	ldr	r3, [r3, #20]
 80133e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80133e8:	2be0      	cmp	r3, #224	; 0xe0
 80133ea:	d009      	beq.n	8013400 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 80133ec:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80133f0:	4619      	mov	r1, r3
 80133f2:	6878      	ldr	r0, [r7, #4]
 80133f4:	f7f8 fed1 	bl	800c19a <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 80133f8:	2102      	movs	r1, #2
 80133fa:	6878      	ldr	r0, [r7, #4]
 80133fc:	f7ff fdd8 	bl	8012fb0 <icmp_dest_unreach>
>>>>>>> Stashed changes

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
<<<<<<< Updated upstream
 8013430:	6878      	ldr	r0, [r7, #4]
 8013432:	f7f8 fedd 	bl	800c1f0 <pbuf_free>
        break;
 8013436:	bf00      	nop
=======
 8013400:	6878      	ldr	r0, [r7, #4]
 8013402:	f7f8 fedd 	bl	800c1c0 <pbuf_free>
        break;
 8013406:	bf00      	nop
>>>>>>> Stashed changes
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
<<<<<<< Updated upstream
 8013438:	4b0b      	ldr	r3, [pc, #44]	; (8013468 <ip4_input+0x240>)
 801343a:	2200      	movs	r2, #0
 801343c:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801343e:	4b0a      	ldr	r3, [pc, #40]	; (8013468 <ip4_input+0x240>)
 8013440:	2200      	movs	r2, #0
 8013442:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8013444:	4b08      	ldr	r3, [pc, #32]	; (8013468 <ip4_input+0x240>)
 8013446:	2200      	movs	r2, #0
 8013448:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801344a:	4b07      	ldr	r3, [pc, #28]	; (8013468 <ip4_input+0x240>)
 801344c:	2200      	movs	r2, #0
 801344e:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8013450:	4b05      	ldr	r3, [pc, #20]	; (8013468 <ip4_input+0x240>)
 8013452:	2200      	movs	r2, #0
 8013454:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8013456:	4b04      	ldr	r3, [pc, #16]	; (8013468 <ip4_input+0x240>)
 8013458:	2200      	movs	r2, #0
 801345a:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 801345c:	2300      	movs	r3, #0
}
 801345e:	4618      	mov	r0, r3
 8013460:	3718      	adds	r7, #24
 8013462:	46bd      	mov	sp, r7
 8013464:	bd80      	pop	{r7, pc}
 8013466:	bf00      	nop
 8013468:	20003d5c 	.word	0x20003d5c
 801346c:	20007290 	.word	0x20007290

08013470 <ip4_output_if>:
=======
 8013408:	4b0b      	ldr	r3, [pc, #44]	; (8013438 <ip4_input+0x240>)
 801340a:	2200      	movs	r2, #0
 801340c:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801340e:	4b0a      	ldr	r3, [pc, #40]	; (8013438 <ip4_input+0x240>)
 8013410:	2200      	movs	r2, #0
 8013412:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8013414:	4b08      	ldr	r3, [pc, #32]	; (8013438 <ip4_input+0x240>)
 8013416:	2200      	movs	r2, #0
 8013418:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801341a:	4b07      	ldr	r3, [pc, #28]	; (8013438 <ip4_input+0x240>)
 801341c:	2200      	movs	r2, #0
 801341e:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8013420:	4b05      	ldr	r3, [pc, #20]	; (8013438 <ip4_input+0x240>)
 8013422:	2200      	movs	r2, #0
 8013424:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8013426:	4b04      	ldr	r3, [pc, #16]	; (8013438 <ip4_input+0x240>)
 8013428:	2200      	movs	r2, #0
 801342a:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 801342c:	2300      	movs	r3, #0
}
 801342e:	4618      	mov	r0, r3
 8013430:	3718      	adds	r7, #24
 8013432:	46bd      	mov	sp, r7
 8013434:	bd80      	pop	{r7, pc}
 8013436:	bf00      	nop
 8013438:	20003d5c 	.word	0x20003d5c
 801343c:	20007290 	.word	0x20007290

08013440 <ip4_output_if>:
>>>>>>> Stashed changes
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
<<<<<<< Updated upstream
 8013470:	b580      	push	{r7, lr}
 8013472:	b08a      	sub	sp, #40	; 0x28
 8013474:	af04      	add	r7, sp, #16
 8013476:	60f8      	str	r0, [r7, #12]
 8013478:	60b9      	str	r1, [r7, #8]
 801347a:	607a      	str	r2, [r7, #4]
 801347c:	70fb      	strb	r3, [r7, #3]
=======
 8013440:	b580      	push	{r7, lr}
 8013442:	b08a      	sub	sp, #40	; 0x28
 8013444:	af04      	add	r7, sp, #16
 8013446:	60f8      	str	r0, [r7, #12]
 8013448:	60b9      	str	r1, [r7, #8]
 801344a:	607a      	str	r2, [r7, #4]
 801344c:	70fb      	strb	r3, [r7, #3]
>>>>>>> Stashed changes
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
<<<<<<< Updated upstream
 801347e:	68bb      	ldr	r3, [r7, #8]
 8013480:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8013482:	687b      	ldr	r3, [r7, #4]
 8013484:	2b00      	cmp	r3, #0
 8013486:	d009      	beq.n	801349c <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8013488:	68bb      	ldr	r3, [r7, #8]
 801348a:	2b00      	cmp	r3, #0
 801348c:	d003      	beq.n	8013496 <ip4_output_if+0x26>
 801348e:	68bb      	ldr	r3, [r7, #8]
 8013490:	681b      	ldr	r3, [r3, #0]
 8013492:	2b00      	cmp	r3, #0
 8013494:	d102      	bne.n	801349c <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8013496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013498:	3304      	adds	r3, #4
 801349a:	617b      	str	r3, [r7, #20]
=======
 801344e:	68bb      	ldr	r3, [r7, #8]
 8013450:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8013452:	687b      	ldr	r3, [r7, #4]
 8013454:	2b00      	cmp	r3, #0
 8013456:	d009      	beq.n	801346c <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8013458:	68bb      	ldr	r3, [r7, #8]
 801345a:	2b00      	cmp	r3, #0
 801345c:	d003      	beq.n	8013466 <ip4_output_if+0x26>
 801345e:	68bb      	ldr	r3, [r7, #8]
 8013460:	681b      	ldr	r3, [r3, #0]
 8013462:	2b00      	cmp	r3, #0
 8013464:	d102      	bne.n	801346c <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8013466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013468:	3304      	adds	r3, #4
 801346a:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
<<<<<<< Updated upstream
 801349c:	78fa      	ldrb	r2, [r7, #3]
 801349e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80134a0:	9302      	str	r3, [sp, #8]
 80134a2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80134a6:	9301      	str	r3, [sp, #4]
 80134a8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80134ac:	9300      	str	r3, [sp, #0]
 80134ae:	4613      	mov	r3, r2
 80134b0:	687a      	ldr	r2, [r7, #4]
 80134b2:	6979      	ldr	r1, [r7, #20]
 80134b4:	68f8      	ldr	r0, [r7, #12]
 80134b6:	f000 f805 	bl	80134c4 <ip4_output_if_src>
 80134ba:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 80134bc:	4618      	mov	r0, r3
 80134be:	3718      	adds	r7, #24
 80134c0:	46bd      	mov	sp, r7
 80134c2:	bd80      	pop	{r7, pc}

080134c4 <ip4_output_if_src>:
=======
 801346c:	78fa      	ldrb	r2, [r7, #3]
 801346e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013470:	9302      	str	r3, [sp, #8]
 8013472:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8013476:	9301      	str	r3, [sp, #4]
 8013478:	f897 3020 	ldrb.w	r3, [r7, #32]
 801347c:	9300      	str	r3, [sp, #0]
 801347e:	4613      	mov	r3, r2
 8013480:	687a      	ldr	r2, [r7, #4]
 8013482:	6979      	ldr	r1, [r7, #20]
 8013484:	68f8      	ldr	r0, [r7, #12]
 8013486:	f000 f805 	bl	8013494 <ip4_output_if_src>
 801348a:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 801348c:	4618      	mov	r0, r3
 801348e:	3718      	adds	r7, #24
 8013490:	46bd      	mov	sp, r7
 8013492:	bd80      	pop	{r7, pc}

08013494 <ip4_output_if_src>:
>>>>>>> Stashed changes
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
<<<<<<< Updated upstream
 80134c4:	b580      	push	{r7, lr}
 80134c6:	b088      	sub	sp, #32
 80134c8:	af00      	add	r7, sp, #0
 80134ca:	60f8      	str	r0, [r7, #12]
 80134cc:	60b9      	str	r1, [r7, #8]
 80134ce:	607a      	str	r2, [r7, #4]
 80134d0:	70fb      	strb	r3, [r7, #3]
=======
 8013494:	b580      	push	{r7, lr}
 8013496:	b088      	sub	sp, #32
 8013498:	af00      	add	r7, sp, #0
 801349a:	60f8      	str	r0, [r7, #12]
 801349c:	60b9      	str	r1, [r7, #8]
 801349e:	607a      	str	r2, [r7, #4]
 80134a0:	70fb      	strb	r3, [r7, #3]
>>>>>>> Stashed changes
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
<<<<<<< Updated upstream
 80134d2:	68fb      	ldr	r3, [r7, #12]
 80134d4:	7b9b      	ldrb	r3, [r3, #14]
 80134d6:	2b01      	cmp	r3, #1
 80134d8:	d006      	beq.n	80134e8 <ip4_output_if_src+0x24>
 80134da:	4b4b      	ldr	r3, [pc, #300]	; (8013608 <ip4_output_if_src+0x144>)
 80134dc:	f44f 7255 	mov.w	r2, #852	; 0x354
 80134e0:	494a      	ldr	r1, [pc, #296]	; (801360c <ip4_output_if_src+0x148>)
 80134e2:	484b      	ldr	r0, [pc, #300]	; (8013610 <ip4_output_if_src+0x14c>)
 80134e4:	f001 f84e 	bl	8014584 <iprintf>
=======
 80134a2:	68fb      	ldr	r3, [r7, #12]
 80134a4:	7b9b      	ldrb	r3, [r3, #14]
 80134a6:	2b01      	cmp	r3, #1
 80134a8:	d006      	beq.n	80134b8 <ip4_output_if_src+0x24>
 80134aa:	4b4b      	ldr	r3, [pc, #300]	; (80135d8 <ip4_output_if_src+0x144>)
 80134ac:	f44f 7255 	mov.w	r2, #852	; 0x354
 80134b0:	494a      	ldr	r1, [pc, #296]	; (80135dc <ip4_output_if_src+0x148>)
 80134b2:	484b      	ldr	r0, [pc, #300]	; (80135e0 <ip4_output_if_src+0x14c>)
 80134b4:	f001 f84e 	bl	8014554 <iprintf>
>>>>>>> Stashed changes

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
<<<<<<< Updated upstream
 80134e8:	687b      	ldr	r3, [r7, #4]
 80134ea:	2b00      	cmp	r3, #0
 80134ec:	d060      	beq.n	80135b0 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 80134ee:	2314      	movs	r3, #20
 80134f0:	837b      	strh	r3, [r7, #26]
=======
 80134b8:	687b      	ldr	r3, [r7, #4]
 80134ba:	2b00      	cmp	r3, #0
 80134bc:	d060      	beq.n	8013580 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 80134be:	2314      	movs	r3, #20
 80134c0:	837b      	strh	r3, [r7, #26]
>>>>>>> Stashed changes
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
<<<<<<< Updated upstream
 80134f2:	2114      	movs	r1, #20
 80134f4:	68f8      	ldr	r0, [r7, #12]
 80134f6:	f7f8 fde5 	bl	800c0c4 <pbuf_add_header>
 80134fa:	4603      	mov	r3, r0
 80134fc:	2b00      	cmp	r3, #0
 80134fe:	d002      	beq.n	8013506 <ip4_output_if_src+0x42>
=======
 80134c2:	2114      	movs	r1, #20
 80134c4:	68f8      	ldr	r0, [r7, #12]
 80134c6:	f7f8 fde5 	bl	800c094 <pbuf_add_header>
 80134ca:	4603      	mov	r3, r0
 80134cc:	2b00      	cmp	r3, #0
 80134ce:	d002      	beq.n	80134d6 <ip4_output_if_src+0x42>
>>>>>>> Stashed changes
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
<<<<<<< Updated upstream
 8013500:	f06f 0301 	mvn.w	r3, #1
 8013504:	e07c      	b.n	8013600 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8013506:	68fb      	ldr	r3, [r7, #12]
 8013508:	685b      	ldr	r3, [r3, #4]
 801350a:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801350c:	68fb      	ldr	r3, [r7, #12]
 801350e:	895b      	ldrh	r3, [r3, #10]
 8013510:	2b13      	cmp	r3, #19
 8013512:	d806      	bhi.n	8013522 <ip4_output_if_src+0x5e>
 8013514:	4b3c      	ldr	r3, [pc, #240]	; (8013608 <ip4_output_if_src+0x144>)
 8013516:	f44f 7262 	mov.w	r2, #904	; 0x388
 801351a:	493e      	ldr	r1, [pc, #248]	; (8013614 <ip4_output_if_src+0x150>)
 801351c:	483c      	ldr	r0, [pc, #240]	; (8013610 <ip4_output_if_src+0x14c>)
 801351e:	f001 f831 	bl	8014584 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8013522:	69fb      	ldr	r3, [r7, #28]
 8013524:	78fa      	ldrb	r2, [r7, #3]
 8013526:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8013528:	69fb      	ldr	r3, [r7, #28]
 801352a:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801352e:	725a      	strb	r2, [r3, #9]
=======
 80134d0:	f06f 0301 	mvn.w	r3, #1
 80134d4:	e07c      	b.n	80135d0 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 80134d6:	68fb      	ldr	r3, [r7, #12]
 80134d8:	685b      	ldr	r3, [r3, #4]
 80134da:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 80134dc:	68fb      	ldr	r3, [r7, #12]
 80134de:	895b      	ldrh	r3, [r3, #10]
 80134e0:	2b13      	cmp	r3, #19
 80134e2:	d806      	bhi.n	80134f2 <ip4_output_if_src+0x5e>
 80134e4:	4b3c      	ldr	r3, [pc, #240]	; (80135d8 <ip4_output_if_src+0x144>)
 80134e6:	f44f 7262 	mov.w	r2, #904	; 0x388
 80134ea:	493e      	ldr	r1, [pc, #248]	; (80135e4 <ip4_output_if_src+0x150>)
 80134ec:	483c      	ldr	r0, [pc, #240]	; (80135e0 <ip4_output_if_src+0x14c>)
 80134ee:	f001 f831 	bl	8014554 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 80134f2:	69fb      	ldr	r3, [r7, #28]
 80134f4:	78fa      	ldrb	r2, [r7, #3]
 80134f6:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 80134f8:	69fb      	ldr	r3, [r7, #28]
 80134fa:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80134fe:	725a      	strb	r2, [r3, #9]
>>>>>>> Stashed changes
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
<<<<<<< Updated upstream
 8013530:	687b      	ldr	r3, [r7, #4]
 8013532:	681a      	ldr	r2, [r3, #0]
 8013534:	69fb      	ldr	r3, [r7, #28]
 8013536:	611a      	str	r2, [r3, #16]
=======
 8013500:	687b      	ldr	r3, [r7, #4]
 8013502:	681a      	ldr	r2, [r3, #0]
 8013504:	69fb      	ldr	r3, [r7, #28]
 8013506:	611a      	str	r2, [r3, #16]
>>>>>>> Stashed changes
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
<<<<<<< Updated upstream
 8013538:	8b7b      	ldrh	r3, [r7, #26]
 801353a:	089b      	lsrs	r3, r3, #2
 801353c:	b29b      	uxth	r3, r3
 801353e:	b2db      	uxtb	r3, r3
 8013540:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013544:	b2da      	uxtb	r2, r3
 8013546:	69fb      	ldr	r3, [r7, #28]
 8013548:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801354a:	69fb      	ldr	r3, [r7, #28]
 801354c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8013550:	705a      	strb	r2, [r3, #1]
=======
 8013508:	8b7b      	ldrh	r3, [r7, #26]
 801350a:	089b      	lsrs	r3, r3, #2
 801350c:	b29b      	uxth	r3, r3
 801350e:	b2db      	uxtb	r3, r3
 8013510:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013514:	b2da      	uxtb	r2, r3
 8013516:	69fb      	ldr	r3, [r7, #28]
 8013518:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801351a:	69fb      	ldr	r3, [r7, #28]
 801351c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8013520:	705a      	strb	r2, [r3, #1]
>>>>>>> Stashed changes
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
<<<<<<< Updated upstream
 8013552:	68fb      	ldr	r3, [r7, #12]
 8013554:	891b      	ldrh	r3, [r3, #8]
 8013556:	4618      	mov	r0, r3
 8013558:	f7f7 fbb7 	bl	800acca <lwip_htons>
 801355c:	4603      	mov	r3, r0
 801355e:	461a      	mov	r2, r3
 8013560:	69fb      	ldr	r3, [r7, #28]
 8013562:	805a      	strh	r2, [r3, #2]
=======
 8013522:	68fb      	ldr	r3, [r7, #12]
 8013524:	891b      	ldrh	r3, [r3, #8]
 8013526:	4618      	mov	r0, r3
 8013528:	f7f7 fbb7 	bl	800ac9a <lwip_htons>
 801352c:	4603      	mov	r3, r0
 801352e:	461a      	mov	r2, r3
 8013530:	69fb      	ldr	r3, [r7, #28]
 8013532:	805a      	strh	r2, [r3, #2]
>>>>>>> Stashed changes
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
<<<<<<< Updated upstream
 8013564:	69fb      	ldr	r3, [r7, #28]
 8013566:	2200      	movs	r2, #0
 8013568:	719a      	strb	r2, [r3, #6]
 801356a:	2200      	movs	r2, #0
 801356c:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801356e:	4b2a      	ldr	r3, [pc, #168]	; (8013618 <ip4_output_if_src+0x154>)
 8013570:	881b      	ldrh	r3, [r3, #0]
 8013572:	4618      	mov	r0, r3
 8013574:	f7f7 fba9 	bl	800acca <lwip_htons>
 8013578:	4603      	mov	r3, r0
 801357a:	461a      	mov	r2, r3
 801357c:	69fb      	ldr	r3, [r7, #28]
 801357e:	809a      	strh	r2, [r3, #4]
=======
 8013534:	69fb      	ldr	r3, [r7, #28]
 8013536:	2200      	movs	r2, #0
 8013538:	719a      	strb	r2, [r3, #6]
 801353a:	2200      	movs	r2, #0
 801353c:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801353e:	4b2a      	ldr	r3, [pc, #168]	; (80135e8 <ip4_output_if_src+0x154>)
 8013540:	881b      	ldrh	r3, [r3, #0]
 8013542:	4618      	mov	r0, r3
 8013544:	f7f7 fba9 	bl	800ac9a <lwip_htons>
 8013548:	4603      	mov	r3, r0
 801354a:	461a      	mov	r2, r3
 801354c:	69fb      	ldr	r3, [r7, #28]
 801354e:	809a      	strh	r2, [r3, #4]
>>>>>>> Stashed changes
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
<<<<<<< Updated upstream
 8013580:	4b25      	ldr	r3, [pc, #148]	; (8013618 <ip4_output_if_src+0x154>)
 8013582:	881b      	ldrh	r3, [r3, #0]
 8013584:	3301      	adds	r3, #1
 8013586:	b29a      	uxth	r2, r3
 8013588:	4b23      	ldr	r3, [pc, #140]	; (8013618 <ip4_output_if_src+0x154>)
 801358a:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801358c:	68bb      	ldr	r3, [r7, #8]
 801358e:	2b00      	cmp	r3, #0
 8013590:	d104      	bne.n	801359c <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8013592:	4b22      	ldr	r3, [pc, #136]	; (801361c <ip4_output_if_src+0x158>)
 8013594:	681a      	ldr	r2, [r3, #0]
 8013596:	69fb      	ldr	r3, [r7, #28]
 8013598:	60da      	str	r2, [r3, #12]
 801359a:	e003      	b.n	80135a4 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801359c:	68bb      	ldr	r3, [r7, #8]
 801359e:	681a      	ldr	r2, [r3, #0]
 80135a0:	69fb      	ldr	r3, [r7, #28]
 80135a2:	60da      	str	r2, [r3, #12]
=======
 8013550:	4b25      	ldr	r3, [pc, #148]	; (80135e8 <ip4_output_if_src+0x154>)
 8013552:	881b      	ldrh	r3, [r3, #0]
 8013554:	3301      	adds	r3, #1
 8013556:	b29a      	uxth	r2, r3
 8013558:	4b23      	ldr	r3, [pc, #140]	; (80135e8 <ip4_output_if_src+0x154>)
 801355a:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801355c:	68bb      	ldr	r3, [r7, #8]
 801355e:	2b00      	cmp	r3, #0
 8013560:	d104      	bne.n	801356c <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8013562:	4b22      	ldr	r3, [pc, #136]	; (80135ec <ip4_output_if_src+0x158>)
 8013564:	681a      	ldr	r2, [r3, #0]
 8013566:	69fb      	ldr	r3, [r7, #28]
 8013568:	60da      	str	r2, [r3, #12]
 801356a:	e003      	b.n	8013574 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801356c:	68bb      	ldr	r3, [r7, #8]
 801356e:	681a      	ldr	r2, [r3, #0]
 8013570:	69fb      	ldr	r3, [r7, #28]
 8013572:	60da      	str	r2, [r3, #12]
>>>>>>> Stashed changes
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
<<<<<<< Updated upstream
 80135a4:	69fb      	ldr	r3, [r7, #28]
 80135a6:	2200      	movs	r2, #0
 80135a8:	729a      	strb	r2, [r3, #10]
 80135aa:	2200      	movs	r2, #0
 80135ac:	72da      	strb	r2, [r3, #11]
 80135ae:	e00f      	b.n	80135d0 <ip4_output_if_src+0x10c>
=======
 8013574:	69fb      	ldr	r3, [r7, #28]
 8013576:	2200      	movs	r2, #0
 8013578:	729a      	strb	r2, [r3, #10]
 801357a:	2200      	movs	r2, #0
 801357c:	72da      	strb	r2, [r3, #11]
 801357e:	e00f      	b.n	80135a0 <ip4_output_if_src+0x10c>
>>>>>>> Stashed changes
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
<<<<<<< Updated upstream
 80135b0:	68fb      	ldr	r3, [r7, #12]
 80135b2:	895b      	ldrh	r3, [r3, #10]
 80135b4:	2b13      	cmp	r3, #19
 80135b6:	d802      	bhi.n	80135be <ip4_output_if_src+0xfa>
=======
 8013580:	68fb      	ldr	r3, [r7, #12]
 8013582:	895b      	ldrh	r3, [r3, #10]
 8013584:	2b13      	cmp	r3, #19
 8013586:	d802      	bhi.n	801358e <ip4_output_if_src+0xfa>
>>>>>>> Stashed changes
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
<<<<<<< Updated upstream
 80135b8:	f06f 0301 	mvn.w	r3, #1
 80135bc:	e020      	b.n	8013600 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 80135be:	68fb      	ldr	r3, [r7, #12]
 80135c0:	685b      	ldr	r3, [r3, #4]
 80135c2:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 80135c4:	69fb      	ldr	r3, [r7, #28]
 80135c6:	691b      	ldr	r3, [r3, #16]
 80135c8:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 80135ca:	f107 0314 	add.w	r3, r7, #20
 80135ce:	607b      	str	r3, [r7, #4]
=======
 8013588:	f06f 0301 	mvn.w	r3, #1
 801358c:	e020      	b.n	80135d0 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801358e:	68fb      	ldr	r3, [r7, #12]
 8013590:	685b      	ldr	r3, [r3, #4]
 8013592:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8013594:	69fb      	ldr	r3, [r7, #28]
 8013596:	691b      	ldr	r3, [r3, #16]
 8013598:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801359a:	f107 0314 	add.w	r3, r7, #20
 801359e:	607b      	str	r3, [r7, #4]
>>>>>>> Stashed changes
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
<<<<<<< Updated upstream
 80135d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80135d2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80135d4:	2b00      	cmp	r3, #0
 80135d6:	d00c      	beq.n	80135f2 <ip4_output_if_src+0x12e>
 80135d8:	68fb      	ldr	r3, [r7, #12]
 80135da:	891a      	ldrh	r2, [r3, #8]
 80135dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80135de:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80135e0:	429a      	cmp	r2, r3
 80135e2:	d906      	bls.n	80135f2 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 80135e4:	687a      	ldr	r2, [r7, #4]
 80135e6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80135e8:	68f8      	ldr	r0, [r7, #12]
 80135ea:	f000 fd4d 	bl	8014088 <ip4_frag>
 80135ee:	4603      	mov	r3, r0
 80135f0:	e006      	b.n	8013600 <ip4_output_if_src+0x13c>
=======
 80135a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80135a2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80135a4:	2b00      	cmp	r3, #0
 80135a6:	d00c      	beq.n	80135c2 <ip4_output_if_src+0x12e>
 80135a8:	68fb      	ldr	r3, [r7, #12]
 80135aa:	891a      	ldrh	r2, [r3, #8]
 80135ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80135ae:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80135b0:	429a      	cmp	r2, r3
 80135b2:	d906      	bls.n	80135c2 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 80135b4:	687a      	ldr	r2, [r7, #4]
 80135b6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80135b8:	68f8      	ldr	r0, [r7, #12]
 80135ba:	f000 fd4d 	bl	8014058 <ip4_frag>
 80135be:	4603      	mov	r3, r0
 80135c0:	e006      	b.n	80135d0 <ip4_output_if_src+0x13c>
>>>>>>> Stashed changes
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
<<<<<<< Updated upstream
 80135f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80135f4:	695b      	ldr	r3, [r3, #20]
 80135f6:	687a      	ldr	r2, [r7, #4]
 80135f8:	68f9      	ldr	r1, [r7, #12]
 80135fa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80135fc:	4798      	blx	r3
 80135fe:	4603      	mov	r3, r0
}
 8013600:	4618      	mov	r0, r3
 8013602:	3720      	adds	r7, #32
 8013604:	46bd      	mov	sp, r7
 8013606:	bd80      	pop	{r7, pc}
 8013608:	08017fe8 	.word	0x08017fe8
 801360c:	0801801c 	.word	0x0801801c
 8013610:	08018028 	.word	0x08018028
 8013614:	08018050 	.word	0x08018050
 8013618:	2000021a 	.word	0x2000021a
 801361c:	08018440 	.word	0x08018440

08013620 <ip4_addr_isbroadcast_u32>:
=======
 80135c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80135c4:	695b      	ldr	r3, [r3, #20]
 80135c6:	687a      	ldr	r2, [r7, #4]
 80135c8:	68f9      	ldr	r1, [r7, #12]
 80135ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80135cc:	4798      	blx	r3
 80135ce:	4603      	mov	r3, r0
}
 80135d0:	4618      	mov	r0, r3
 80135d2:	3720      	adds	r7, #32
 80135d4:	46bd      	mov	sp, r7
 80135d6:	bd80      	pop	{r7, pc}
 80135d8:	08017fcc 	.word	0x08017fcc
 80135dc:	08018000 	.word	0x08018000
 80135e0:	0801800c 	.word	0x0801800c
 80135e4:	08018034 	.word	0x08018034
 80135e8:	2000021a 	.word	0x2000021a
 80135ec:	08018424 	.word	0x08018424

080135f0 <ip4_addr_isbroadcast_u32>:
>>>>>>> Stashed changes
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
<<<<<<< Updated upstream
 8013620:	b480      	push	{r7}
 8013622:	b085      	sub	sp, #20
 8013624:	af00      	add	r7, sp, #0
 8013626:	6078      	str	r0, [r7, #4]
 8013628:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801362a:	687b      	ldr	r3, [r7, #4]
 801362c:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801362e:	687b      	ldr	r3, [r7, #4]
 8013630:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013634:	d002      	beq.n	801363c <ip4_addr_isbroadcast_u32+0x1c>
 8013636:	687b      	ldr	r3, [r7, #4]
 8013638:	2b00      	cmp	r3, #0
 801363a:	d101      	bne.n	8013640 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801363c:	2301      	movs	r3, #1
 801363e:	e02a      	b.n	8013696 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8013640:	683b      	ldr	r3, [r7, #0]
 8013642:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013646:	f003 0302 	and.w	r3, r3, #2
 801364a:	2b00      	cmp	r3, #0
 801364c:	d101      	bne.n	8013652 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801364e:	2300      	movs	r3, #0
 8013650:	e021      	b.n	8013696 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8013652:	683b      	ldr	r3, [r7, #0]
 8013654:	3304      	adds	r3, #4
 8013656:	681b      	ldr	r3, [r3, #0]
 8013658:	687a      	ldr	r2, [r7, #4]
 801365a:	429a      	cmp	r2, r3
 801365c:	d101      	bne.n	8013662 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801365e:	2300      	movs	r3, #0
 8013660:	e019      	b.n	8013696 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8013662:	68fa      	ldr	r2, [r7, #12]
 8013664:	683b      	ldr	r3, [r7, #0]
 8013666:	3304      	adds	r3, #4
 8013668:	681b      	ldr	r3, [r3, #0]
 801366a:	405a      	eors	r2, r3
 801366c:	683b      	ldr	r3, [r7, #0]
 801366e:	3308      	adds	r3, #8
 8013670:	681b      	ldr	r3, [r3, #0]
 8013672:	4013      	ands	r3, r2
 8013674:	2b00      	cmp	r3, #0
 8013676:	d10d      	bne.n	8013694 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8013678:	683b      	ldr	r3, [r7, #0]
 801367a:	3308      	adds	r3, #8
 801367c:	681b      	ldr	r3, [r3, #0]
 801367e:	43da      	mvns	r2, r3
 8013680:	687b      	ldr	r3, [r7, #4]
 8013682:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8013684:	683b      	ldr	r3, [r7, #0]
 8013686:	3308      	adds	r3, #8
 8013688:	681b      	ldr	r3, [r3, #0]
 801368a:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801368c:	429a      	cmp	r2, r3
 801368e:	d101      	bne.n	8013694 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8013690:	2301      	movs	r3, #1
 8013692:	e000      	b.n	8013696 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8013694:	2300      	movs	r3, #0
  }
}
 8013696:	4618      	mov	r0, r3
 8013698:	3714      	adds	r7, #20
 801369a:	46bd      	mov	sp, r7
 801369c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136a0:	4770      	bx	lr
	...

080136a4 <ip_reass_tmr>:
=======
 80135f0:	b480      	push	{r7}
 80135f2:	b085      	sub	sp, #20
 80135f4:	af00      	add	r7, sp, #0
 80135f6:	6078      	str	r0, [r7, #4]
 80135f8:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 80135fa:	687b      	ldr	r3, [r7, #4]
 80135fc:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 80135fe:	687b      	ldr	r3, [r7, #4]
 8013600:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013604:	d002      	beq.n	801360c <ip4_addr_isbroadcast_u32+0x1c>
 8013606:	687b      	ldr	r3, [r7, #4]
 8013608:	2b00      	cmp	r3, #0
 801360a:	d101      	bne.n	8013610 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801360c:	2301      	movs	r3, #1
 801360e:	e02a      	b.n	8013666 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8013610:	683b      	ldr	r3, [r7, #0]
 8013612:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013616:	f003 0302 	and.w	r3, r3, #2
 801361a:	2b00      	cmp	r3, #0
 801361c:	d101      	bne.n	8013622 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801361e:	2300      	movs	r3, #0
 8013620:	e021      	b.n	8013666 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8013622:	683b      	ldr	r3, [r7, #0]
 8013624:	3304      	adds	r3, #4
 8013626:	681b      	ldr	r3, [r3, #0]
 8013628:	687a      	ldr	r2, [r7, #4]
 801362a:	429a      	cmp	r2, r3
 801362c:	d101      	bne.n	8013632 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801362e:	2300      	movs	r3, #0
 8013630:	e019      	b.n	8013666 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8013632:	68fa      	ldr	r2, [r7, #12]
 8013634:	683b      	ldr	r3, [r7, #0]
 8013636:	3304      	adds	r3, #4
 8013638:	681b      	ldr	r3, [r3, #0]
 801363a:	405a      	eors	r2, r3
 801363c:	683b      	ldr	r3, [r7, #0]
 801363e:	3308      	adds	r3, #8
 8013640:	681b      	ldr	r3, [r3, #0]
 8013642:	4013      	ands	r3, r2
 8013644:	2b00      	cmp	r3, #0
 8013646:	d10d      	bne.n	8013664 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8013648:	683b      	ldr	r3, [r7, #0]
 801364a:	3308      	adds	r3, #8
 801364c:	681b      	ldr	r3, [r3, #0]
 801364e:	43da      	mvns	r2, r3
 8013650:	687b      	ldr	r3, [r7, #4]
 8013652:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8013654:	683b      	ldr	r3, [r7, #0]
 8013656:	3308      	adds	r3, #8
 8013658:	681b      	ldr	r3, [r3, #0]
 801365a:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801365c:	429a      	cmp	r2, r3
 801365e:	d101      	bne.n	8013664 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8013660:	2301      	movs	r3, #1
 8013662:	e000      	b.n	8013666 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8013664:	2300      	movs	r3, #0
  }
}
 8013666:	4618      	mov	r0, r3
 8013668:	3714      	adds	r7, #20
 801366a:	46bd      	mov	sp, r7
 801366c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013670:	4770      	bx	lr
	...

08013674 <ip_reass_tmr>:
>>>>>>> Stashed changes
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
<<<<<<< Updated upstream
 80136a4:	b580      	push	{r7, lr}
 80136a6:	b084      	sub	sp, #16
 80136a8:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 80136aa:	2300      	movs	r3, #0
 80136ac:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 80136ae:	4b12      	ldr	r3, [pc, #72]	; (80136f8 <ip_reass_tmr+0x54>)
 80136b0:	681b      	ldr	r3, [r3, #0]
 80136b2:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 80136b4:	e018      	b.n	80136e8 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 80136b6:	68fb      	ldr	r3, [r7, #12]
 80136b8:	7fdb      	ldrb	r3, [r3, #31]
 80136ba:	2b00      	cmp	r3, #0
 80136bc:	d00b      	beq.n	80136d6 <ip_reass_tmr+0x32>
      r->timer--;
 80136be:	68fb      	ldr	r3, [r7, #12]
 80136c0:	7fdb      	ldrb	r3, [r3, #31]
 80136c2:	3b01      	subs	r3, #1
 80136c4:	b2da      	uxtb	r2, r3
 80136c6:	68fb      	ldr	r3, [r7, #12]
 80136c8:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 80136ca:	68fb      	ldr	r3, [r7, #12]
 80136cc:	60bb      	str	r3, [r7, #8]
      r = r->next;
 80136ce:	68fb      	ldr	r3, [r7, #12]
 80136d0:	681b      	ldr	r3, [r3, #0]
 80136d2:	60fb      	str	r3, [r7, #12]
 80136d4:	e008      	b.n	80136e8 <ip_reass_tmr+0x44>
=======
 8013674:	b580      	push	{r7, lr}
 8013676:	b084      	sub	sp, #16
 8013678:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801367a:	2300      	movs	r3, #0
 801367c:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801367e:	4b12      	ldr	r3, [pc, #72]	; (80136c8 <ip_reass_tmr+0x54>)
 8013680:	681b      	ldr	r3, [r3, #0]
 8013682:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8013684:	e018      	b.n	80136b8 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8013686:	68fb      	ldr	r3, [r7, #12]
 8013688:	7fdb      	ldrb	r3, [r3, #31]
 801368a:	2b00      	cmp	r3, #0
 801368c:	d00b      	beq.n	80136a6 <ip_reass_tmr+0x32>
      r->timer--;
 801368e:	68fb      	ldr	r3, [r7, #12]
 8013690:	7fdb      	ldrb	r3, [r3, #31]
 8013692:	3b01      	subs	r3, #1
 8013694:	b2da      	uxtb	r2, r3
 8013696:	68fb      	ldr	r3, [r7, #12]
 8013698:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801369a:	68fb      	ldr	r3, [r7, #12]
 801369c:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801369e:	68fb      	ldr	r3, [r7, #12]
 80136a0:	681b      	ldr	r3, [r3, #0]
 80136a2:	60fb      	str	r3, [r7, #12]
 80136a4:	e008      	b.n	80136b8 <ip_reass_tmr+0x44>
>>>>>>> Stashed changes
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
<<<<<<< Updated upstream
 80136d6:	68fb      	ldr	r3, [r7, #12]
 80136d8:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 80136da:	68fb      	ldr	r3, [r7, #12]
 80136dc:	681b      	ldr	r3, [r3, #0]
 80136de:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 80136e0:	68b9      	ldr	r1, [r7, #8]
 80136e2:	6878      	ldr	r0, [r7, #4]
 80136e4:	f000 f80a 	bl	80136fc <ip_reass_free_complete_datagram>
  while (r != NULL) {
 80136e8:	68fb      	ldr	r3, [r7, #12]
 80136ea:	2b00      	cmp	r3, #0
 80136ec:	d1e3      	bne.n	80136b6 <ip_reass_tmr+0x12>
    }
  }
}
 80136ee:	bf00      	nop
 80136f0:	bf00      	nop
 80136f2:	3710      	adds	r7, #16
 80136f4:	46bd      	mov	sp, r7
 80136f6:	bd80      	pop	{r7, pc}
 80136f8:	2000021c 	.word	0x2000021c

080136fc <ip_reass_free_complete_datagram>:
=======
 80136a6:	68fb      	ldr	r3, [r7, #12]
 80136a8:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 80136aa:	68fb      	ldr	r3, [r7, #12]
 80136ac:	681b      	ldr	r3, [r3, #0]
 80136ae:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 80136b0:	68b9      	ldr	r1, [r7, #8]
 80136b2:	6878      	ldr	r0, [r7, #4]
 80136b4:	f000 f80a 	bl	80136cc <ip_reass_free_complete_datagram>
  while (r != NULL) {
 80136b8:	68fb      	ldr	r3, [r7, #12]
 80136ba:	2b00      	cmp	r3, #0
 80136bc:	d1e3      	bne.n	8013686 <ip_reass_tmr+0x12>
    }
  }
}
 80136be:	bf00      	nop
 80136c0:	bf00      	nop
 80136c2:	3710      	adds	r7, #16
 80136c4:	46bd      	mov	sp, r7
 80136c6:	bd80      	pop	{r7, pc}
 80136c8:	2000021c 	.word	0x2000021c

080136cc <ip_reass_free_complete_datagram>:
>>>>>>> Stashed changes
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
<<<<<<< Updated upstream
 80136fc:	b580      	push	{r7, lr}
 80136fe:	b088      	sub	sp, #32
 8013700:	af00      	add	r7, sp, #0
 8013702:	6078      	str	r0, [r7, #4]
 8013704:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8013706:	2300      	movs	r3, #0
 8013708:	83fb      	strh	r3, [r7, #30]
=======
 80136cc:	b580      	push	{r7, lr}
 80136ce:	b088      	sub	sp, #32
 80136d0:	af00      	add	r7, sp, #0
 80136d2:	6078      	str	r0, [r7, #4]
 80136d4:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 80136d6:	2300      	movs	r3, #0
 80136d8:	83fb      	strh	r3, [r7, #30]
>>>>>>> Stashed changes
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
<<<<<<< Updated upstream
 801370a:	683a      	ldr	r2, [r7, #0]
 801370c:	687b      	ldr	r3, [r7, #4]
 801370e:	429a      	cmp	r2, r3
 8013710:	d105      	bne.n	801371e <ip_reass_free_complete_datagram+0x22>
 8013712:	4b45      	ldr	r3, [pc, #276]	; (8013828 <ip_reass_free_complete_datagram+0x12c>)
 8013714:	22ab      	movs	r2, #171	; 0xab
 8013716:	4945      	ldr	r1, [pc, #276]	; (801382c <ip_reass_free_complete_datagram+0x130>)
 8013718:	4845      	ldr	r0, [pc, #276]	; (8013830 <ip_reass_free_complete_datagram+0x134>)
 801371a:	f000 ff33 	bl	8014584 <iprintf>
  if (prev != NULL) {
 801371e:	683b      	ldr	r3, [r7, #0]
 8013720:	2b00      	cmp	r3, #0
 8013722:	d00a      	beq.n	801373a <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8013724:	683b      	ldr	r3, [r7, #0]
 8013726:	681b      	ldr	r3, [r3, #0]
 8013728:	687a      	ldr	r2, [r7, #4]
 801372a:	429a      	cmp	r2, r3
 801372c:	d005      	beq.n	801373a <ip_reass_free_complete_datagram+0x3e>
 801372e:	4b3e      	ldr	r3, [pc, #248]	; (8013828 <ip_reass_free_complete_datagram+0x12c>)
 8013730:	22ad      	movs	r2, #173	; 0xad
 8013732:	4940      	ldr	r1, [pc, #256]	; (8013834 <ip_reass_free_complete_datagram+0x138>)
 8013734:	483e      	ldr	r0, [pc, #248]	; (8013830 <ip_reass_free_complete_datagram+0x134>)
 8013736:	f000 ff25 	bl	8014584 <iprintf>
=======
 80136da:	683a      	ldr	r2, [r7, #0]
 80136dc:	687b      	ldr	r3, [r7, #4]
 80136de:	429a      	cmp	r2, r3
 80136e0:	d105      	bne.n	80136ee <ip_reass_free_complete_datagram+0x22>
 80136e2:	4b45      	ldr	r3, [pc, #276]	; (80137f8 <ip_reass_free_complete_datagram+0x12c>)
 80136e4:	22ab      	movs	r2, #171	; 0xab
 80136e6:	4945      	ldr	r1, [pc, #276]	; (80137fc <ip_reass_free_complete_datagram+0x130>)
 80136e8:	4845      	ldr	r0, [pc, #276]	; (8013800 <ip_reass_free_complete_datagram+0x134>)
 80136ea:	f000 ff33 	bl	8014554 <iprintf>
  if (prev != NULL) {
 80136ee:	683b      	ldr	r3, [r7, #0]
 80136f0:	2b00      	cmp	r3, #0
 80136f2:	d00a      	beq.n	801370a <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 80136f4:	683b      	ldr	r3, [r7, #0]
 80136f6:	681b      	ldr	r3, [r3, #0]
 80136f8:	687a      	ldr	r2, [r7, #4]
 80136fa:	429a      	cmp	r2, r3
 80136fc:	d005      	beq.n	801370a <ip_reass_free_complete_datagram+0x3e>
 80136fe:	4b3e      	ldr	r3, [pc, #248]	; (80137f8 <ip_reass_free_complete_datagram+0x12c>)
 8013700:	22ad      	movs	r2, #173	; 0xad
 8013702:	4940      	ldr	r1, [pc, #256]	; (8013804 <ip_reass_free_complete_datagram+0x138>)
 8013704:	483e      	ldr	r0, [pc, #248]	; (8013800 <ip_reass_free_complete_datagram+0x134>)
 8013706:	f000 ff25 	bl	8014554 <iprintf>
>>>>>>> Stashed changes
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
<<<<<<< Updated upstream
 801373a:	687b      	ldr	r3, [r7, #4]
 801373c:	685b      	ldr	r3, [r3, #4]
 801373e:	685b      	ldr	r3, [r3, #4]
 8013740:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8013742:	697b      	ldr	r3, [r7, #20]
 8013744:	889b      	ldrh	r3, [r3, #4]
 8013746:	b29b      	uxth	r3, r3
 8013748:	2b00      	cmp	r3, #0
 801374a:	d12a      	bne.n	80137a2 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801374c:	687b      	ldr	r3, [r7, #4]
 801374e:	685b      	ldr	r3, [r3, #4]
 8013750:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8013752:	697b      	ldr	r3, [r7, #20]
 8013754:	681a      	ldr	r2, [r3, #0]
 8013756:	687b      	ldr	r3, [r7, #4]
 8013758:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801375a:	69bb      	ldr	r3, [r7, #24]
 801375c:	6858      	ldr	r0, [r3, #4]
 801375e:	687b      	ldr	r3, [r7, #4]
 8013760:	3308      	adds	r3, #8
 8013762:	2214      	movs	r2, #20
 8013764:	4619      	mov	r1, r3
 8013766:	f000 fedd 	bl	8014524 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801376a:	2101      	movs	r1, #1
 801376c:	69b8      	ldr	r0, [r7, #24]
 801376e:	f7ff fc47 	bl	8013000 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8013772:	69b8      	ldr	r0, [r7, #24]
 8013774:	f7f8 fdc4 	bl	800c300 <pbuf_clen>
 8013778:	4603      	mov	r3, r0
 801377a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801377c:	8bfa      	ldrh	r2, [r7, #30]
 801377e:	8a7b      	ldrh	r3, [r7, #18]
 8013780:	4413      	add	r3, r2
 8013782:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013786:	db05      	blt.n	8013794 <ip_reass_free_complete_datagram+0x98>
 8013788:	4b27      	ldr	r3, [pc, #156]	; (8013828 <ip_reass_free_complete_datagram+0x12c>)
 801378a:	22bc      	movs	r2, #188	; 0xbc
 801378c:	492a      	ldr	r1, [pc, #168]	; (8013838 <ip_reass_free_complete_datagram+0x13c>)
 801378e:	4828      	ldr	r0, [pc, #160]	; (8013830 <ip_reass_free_complete_datagram+0x134>)
 8013790:	f000 fef8 	bl	8014584 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8013794:	8bfa      	ldrh	r2, [r7, #30]
 8013796:	8a7b      	ldrh	r3, [r7, #18]
 8013798:	4413      	add	r3, r2
 801379a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801379c:	69b8      	ldr	r0, [r7, #24]
 801379e:	f7f8 fd27 	bl	800c1f0 <pbuf_free>
=======
 801370a:	687b      	ldr	r3, [r7, #4]
 801370c:	685b      	ldr	r3, [r3, #4]
 801370e:	685b      	ldr	r3, [r3, #4]
 8013710:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8013712:	697b      	ldr	r3, [r7, #20]
 8013714:	889b      	ldrh	r3, [r3, #4]
 8013716:	b29b      	uxth	r3, r3
 8013718:	2b00      	cmp	r3, #0
 801371a:	d12a      	bne.n	8013772 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801371c:	687b      	ldr	r3, [r7, #4]
 801371e:	685b      	ldr	r3, [r3, #4]
 8013720:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8013722:	697b      	ldr	r3, [r7, #20]
 8013724:	681a      	ldr	r2, [r3, #0]
 8013726:	687b      	ldr	r3, [r7, #4]
 8013728:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801372a:	69bb      	ldr	r3, [r7, #24]
 801372c:	6858      	ldr	r0, [r3, #4]
 801372e:	687b      	ldr	r3, [r7, #4]
 8013730:	3308      	adds	r3, #8
 8013732:	2214      	movs	r2, #20
 8013734:	4619      	mov	r1, r3
 8013736:	f000 fedd 	bl	80144f4 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801373a:	2101      	movs	r1, #1
 801373c:	69b8      	ldr	r0, [r7, #24]
 801373e:	f7ff fc47 	bl	8012fd0 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8013742:	69b8      	ldr	r0, [r7, #24]
 8013744:	f7f8 fdc4 	bl	800c2d0 <pbuf_clen>
 8013748:	4603      	mov	r3, r0
 801374a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801374c:	8bfa      	ldrh	r2, [r7, #30]
 801374e:	8a7b      	ldrh	r3, [r7, #18]
 8013750:	4413      	add	r3, r2
 8013752:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013756:	db05      	blt.n	8013764 <ip_reass_free_complete_datagram+0x98>
 8013758:	4b27      	ldr	r3, [pc, #156]	; (80137f8 <ip_reass_free_complete_datagram+0x12c>)
 801375a:	22bc      	movs	r2, #188	; 0xbc
 801375c:	492a      	ldr	r1, [pc, #168]	; (8013808 <ip_reass_free_complete_datagram+0x13c>)
 801375e:	4828      	ldr	r0, [pc, #160]	; (8013800 <ip_reass_free_complete_datagram+0x134>)
 8013760:	f000 fef8 	bl	8014554 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8013764:	8bfa      	ldrh	r2, [r7, #30]
 8013766:	8a7b      	ldrh	r3, [r7, #18]
 8013768:	4413      	add	r3, r2
 801376a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801376c:	69b8      	ldr	r0, [r7, #24]
 801376e:	f7f8 fd27 	bl	800c1c0 <pbuf_free>
>>>>>>> Stashed changes
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
<<<<<<< Updated upstream
 80137a2:	687b      	ldr	r3, [r7, #4]
 80137a4:	685b      	ldr	r3, [r3, #4]
 80137a6:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 80137a8:	e01f      	b.n	80137ea <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 80137aa:	69bb      	ldr	r3, [r7, #24]
 80137ac:	685b      	ldr	r3, [r3, #4]
 80137ae:	617b      	str	r3, [r7, #20]
    pcur = p;
 80137b0:	69bb      	ldr	r3, [r7, #24]
 80137b2:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 80137b4:	697b      	ldr	r3, [r7, #20]
 80137b6:	681b      	ldr	r3, [r3, #0]
 80137b8:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 80137ba:	68f8      	ldr	r0, [r7, #12]
 80137bc:	f7f8 fda0 	bl	800c300 <pbuf_clen>
 80137c0:	4603      	mov	r3, r0
 80137c2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80137c4:	8bfa      	ldrh	r2, [r7, #30]
 80137c6:	8a7b      	ldrh	r3, [r7, #18]
 80137c8:	4413      	add	r3, r2
 80137ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80137ce:	db05      	blt.n	80137dc <ip_reass_free_complete_datagram+0xe0>
 80137d0:	4b15      	ldr	r3, [pc, #84]	; (8013828 <ip_reass_free_complete_datagram+0x12c>)
 80137d2:	22cc      	movs	r2, #204	; 0xcc
 80137d4:	4918      	ldr	r1, [pc, #96]	; (8013838 <ip_reass_free_complete_datagram+0x13c>)
 80137d6:	4816      	ldr	r0, [pc, #88]	; (8013830 <ip_reass_free_complete_datagram+0x134>)
 80137d8:	f000 fed4 	bl	8014584 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80137dc:	8bfa      	ldrh	r2, [r7, #30]
 80137de:	8a7b      	ldrh	r3, [r7, #18]
 80137e0:	4413      	add	r3, r2
 80137e2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 80137e4:	68f8      	ldr	r0, [r7, #12]
 80137e6:	f7f8 fd03 	bl	800c1f0 <pbuf_free>
  while (p != NULL) {
 80137ea:	69bb      	ldr	r3, [r7, #24]
 80137ec:	2b00      	cmp	r3, #0
 80137ee:	d1dc      	bne.n	80137aa <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 80137f0:	6839      	ldr	r1, [r7, #0]
 80137f2:	6878      	ldr	r0, [r7, #4]
 80137f4:	f000 f8c2 	bl	801397c <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 80137f8:	4b10      	ldr	r3, [pc, #64]	; (801383c <ip_reass_free_complete_datagram+0x140>)
 80137fa:	881b      	ldrh	r3, [r3, #0]
 80137fc:	8bfa      	ldrh	r2, [r7, #30]
 80137fe:	429a      	cmp	r2, r3
 8013800:	d905      	bls.n	801380e <ip_reass_free_complete_datagram+0x112>
 8013802:	4b09      	ldr	r3, [pc, #36]	; (8013828 <ip_reass_free_complete_datagram+0x12c>)
 8013804:	22d2      	movs	r2, #210	; 0xd2
 8013806:	490e      	ldr	r1, [pc, #56]	; (8013840 <ip_reass_free_complete_datagram+0x144>)
 8013808:	4809      	ldr	r0, [pc, #36]	; (8013830 <ip_reass_free_complete_datagram+0x134>)
 801380a:	f000 febb 	bl	8014584 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801380e:	4b0b      	ldr	r3, [pc, #44]	; (801383c <ip_reass_free_complete_datagram+0x140>)
 8013810:	881a      	ldrh	r2, [r3, #0]
 8013812:	8bfb      	ldrh	r3, [r7, #30]
 8013814:	1ad3      	subs	r3, r2, r3
 8013816:	b29a      	uxth	r2, r3
 8013818:	4b08      	ldr	r3, [pc, #32]	; (801383c <ip_reass_free_complete_datagram+0x140>)
 801381a:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801381c:	8bfb      	ldrh	r3, [r7, #30]
}
 801381e:	4618      	mov	r0, r3
 8013820:	3720      	adds	r7, #32
 8013822:	46bd      	mov	sp, r7
 8013824:	bd80      	pop	{r7, pc}
 8013826:	bf00      	nop
 8013828:	08018080 	.word	0x08018080
 801382c:	080180bc 	.word	0x080180bc
 8013830:	080180c8 	.word	0x080180c8
 8013834:	080180f0 	.word	0x080180f0
 8013838:	08018104 	.word	0x08018104
 801383c:	20000220 	.word	0x20000220
 8013840:	08018124 	.word	0x08018124

08013844 <ip_reass_remove_oldest_datagram>:
=======
 8013772:	687b      	ldr	r3, [r7, #4]
 8013774:	685b      	ldr	r3, [r3, #4]
 8013776:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8013778:	e01f      	b.n	80137ba <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801377a:	69bb      	ldr	r3, [r7, #24]
 801377c:	685b      	ldr	r3, [r3, #4]
 801377e:	617b      	str	r3, [r7, #20]
    pcur = p;
 8013780:	69bb      	ldr	r3, [r7, #24]
 8013782:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8013784:	697b      	ldr	r3, [r7, #20]
 8013786:	681b      	ldr	r3, [r3, #0]
 8013788:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801378a:	68f8      	ldr	r0, [r7, #12]
 801378c:	f7f8 fda0 	bl	800c2d0 <pbuf_clen>
 8013790:	4603      	mov	r3, r0
 8013792:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8013794:	8bfa      	ldrh	r2, [r7, #30]
 8013796:	8a7b      	ldrh	r3, [r7, #18]
 8013798:	4413      	add	r3, r2
 801379a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801379e:	db05      	blt.n	80137ac <ip_reass_free_complete_datagram+0xe0>
 80137a0:	4b15      	ldr	r3, [pc, #84]	; (80137f8 <ip_reass_free_complete_datagram+0x12c>)
 80137a2:	22cc      	movs	r2, #204	; 0xcc
 80137a4:	4918      	ldr	r1, [pc, #96]	; (8013808 <ip_reass_free_complete_datagram+0x13c>)
 80137a6:	4816      	ldr	r0, [pc, #88]	; (8013800 <ip_reass_free_complete_datagram+0x134>)
 80137a8:	f000 fed4 	bl	8014554 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80137ac:	8bfa      	ldrh	r2, [r7, #30]
 80137ae:	8a7b      	ldrh	r3, [r7, #18]
 80137b0:	4413      	add	r3, r2
 80137b2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 80137b4:	68f8      	ldr	r0, [r7, #12]
 80137b6:	f7f8 fd03 	bl	800c1c0 <pbuf_free>
  while (p != NULL) {
 80137ba:	69bb      	ldr	r3, [r7, #24]
 80137bc:	2b00      	cmp	r3, #0
 80137be:	d1dc      	bne.n	801377a <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 80137c0:	6839      	ldr	r1, [r7, #0]
 80137c2:	6878      	ldr	r0, [r7, #4]
 80137c4:	f000 f8c2 	bl	801394c <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 80137c8:	4b10      	ldr	r3, [pc, #64]	; (801380c <ip_reass_free_complete_datagram+0x140>)
 80137ca:	881b      	ldrh	r3, [r3, #0]
 80137cc:	8bfa      	ldrh	r2, [r7, #30]
 80137ce:	429a      	cmp	r2, r3
 80137d0:	d905      	bls.n	80137de <ip_reass_free_complete_datagram+0x112>
 80137d2:	4b09      	ldr	r3, [pc, #36]	; (80137f8 <ip_reass_free_complete_datagram+0x12c>)
 80137d4:	22d2      	movs	r2, #210	; 0xd2
 80137d6:	490e      	ldr	r1, [pc, #56]	; (8013810 <ip_reass_free_complete_datagram+0x144>)
 80137d8:	4809      	ldr	r0, [pc, #36]	; (8013800 <ip_reass_free_complete_datagram+0x134>)
 80137da:	f000 febb 	bl	8014554 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 80137de:	4b0b      	ldr	r3, [pc, #44]	; (801380c <ip_reass_free_complete_datagram+0x140>)
 80137e0:	881a      	ldrh	r2, [r3, #0]
 80137e2:	8bfb      	ldrh	r3, [r7, #30]
 80137e4:	1ad3      	subs	r3, r2, r3
 80137e6:	b29a      	uxth	r2, r3
 80137e8:	4b08      	ldr	r3, [pc, #32]	; (801380c <ip_reass_free_complete_datagram+0x140>)
 80137ea:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 80137ec:	8bfb      	ldrh	r3, [r7, #30]
}
 80137ee:	4618      	mov	r0, r3
 80137f0:	3720      	adds	r7, #32
 80137f2:	46bd      	mov	sp, r7
 80137f4:	bd80      	pop	{r7, pc}
 80137f6:	bf00      	nop
 80137f8:	08018064 	.word	0x08018064
 80137fc:	080180a0 	.word	0x080180a0
 8013800:	080180ac 	.word	0x080180ac
 8013804:	080180d4 	.word	0x080180d4
 8013808:	080180e8 	.word	0x080180e8
 801380c:	20000220 	.word	0x20000220
 8013810:	08018108 	.word	0x08018108

08013814 <ip_reass_remove_oldest_datagram>:
>>>>>>> Stashed changes
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
<<<<<<< Updated upstream
 8013844:	b580      	push	{r7, lr}
 8013846:	b08a      	sub	sp, #40	; 0x28
 8013848:	af00      	add	r7, sp, #0
 801384a:	6078      	str	r0, [r7, #4]
 801384c:	6039      	str	r1, [r7, #0]
=======
 8013814:	b580      	push	{r7, lr}
 8013816:	b08a      	sub	sp, #40	; 0x28
 8013818:	af00      	add	r7, sp, #0
 801381a:	6078      	str	r0, [r7, #4]
 801381c:	6039      	str	r1, [r7, #0]
>>>>>>> Stashed changes
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
<<<<<<< Updated upstream
 801384e:	2300      	movs	r3, #0
 8013850:	617b      	str	r3, [r7, #20]
=======
 801381e:	2300      	movs	r3, #0
 8013820:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
<<<<<<< Updated upstream
 8013852:	2300      	movs	r3, #0
 8013854:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8013856:	2300      	movs	r3, #0
 8013858:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801385a:	2300      	movs	r3, #0
 801385c:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801385e:	2300      	movs	r3, #0
 8013860:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8013862:	4b28      	ldr	r3, [pc, #160]	; (8013904 <ip_reass_remove_oldest_datagram+0xc0>)
 8013864:	681b      	ldr	r3, [r3, #0]
 8013866:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8013868:	e030      	b.n	80138cc <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801386a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801386c:	695a      	ldr	r2, [r3, #20]
 801386e:	687b      	ldr	r3, [r7, #4]
 8013870:	68db      	ldr	r3, [r3, #12]
 8013872:	429a      	cmp	r2, r3
 8013874:	d10c      	bne.n	8013890 <ip_reass_remove_oldest_datagram+0x4c>
 8013876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013878:	699a      	ldr	r2, [r3, #24]
 801387a:	687b      	ldr	r3, [r7, #4]
 801387c:	691b      	ldr	r3, [r3, #16]
 801387e:	429a      	cmp	r2, r3
 8013880:	d106      	bne.n	8013890 <ip_reass_remove_oldest_datagram+0x4c>
 8013882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013884:	899a      	ldrh	r2, [r3, #12]
 8013886:	687b      	ldr	r3, [r7, #4]
 8013888:	889b      	ldrh	r3, [r3, #4]
 801388a:	b29b      	uxth	r3, r3
 801388c:	429a      	cmp	r2, r3
 801388e:	d014      	beq.n	80138ba <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8013890:	693b      	ldr	r3, [r7, #16]
 8013892:	3301      	adds	r3, #1
 8013894:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8013896:	6a3b      	ldr	r3, [r7, #32]
 8013898:	2b00      	cmp	r3, #0
 801389a:	d104      	bne.n	80138a6 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801389c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801389e:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80138a0:	69fb      	ldr	r3, [r7, #28]
 80138a2:	61bb      	str	r3, [r7, #24]
 80138a4:	e009      	b.n	80138ba <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 80138a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80138a8:	7fda      	ldrb	r2, [r3, #31]
 80138aa:	6a3b      	ldr	r3, [r7, #32]
 80138ac:	7fdb      	ldrb	r3, [r3, #31]
 80138ae:	429a      	cmp	r2, r3
 80138b0:	d803      	bhi.n	80138ba <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 80138b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80138b4:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80138b6:	69fb      	ldr	r3, [r7, #28]
 80138b8:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 80138ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80138bc:	681b      	ldr	r3, [r3, #0]
 80138be:	2b00      	cmp	r3, #0
 80138c0:	d001      	beq.n	80138c6 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 80138c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80138c4:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 80138c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80138c8:	681b      	ldr	r3, [r3, #0]
 80138ca:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80138cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80138ce:	2b00      	cmp	r3, #0
 80138d0:	d1cb      	bne.n	801386a <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 80138d2:	6a3b      	ldr	r3, [r7, #32]
 80138d4:	2b00      	cmp	r3, #0
 80138d6:	d008      	beq.n	80138ea <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80138d8:	69b9      	ldr	r1, [r7, #24]
 80138da:	6a38      	ldr	r0, [r7, #32]
 80138dc:	f7ff ff0e 	bl	80136fc <ip_reass_free_complete_datagram>
 80138e0:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 80138e2:	697a      	ldr	r2, [r7, #20]
 80138e4:	68fb      	ldr	r3, [r7, #12]
 80138e6:	4413      	add	r3, r2
 80138e8:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80138ea:	697a      	ldr	r2, [r7, #20]
 80138ec:	683b      	ldr	r3, [r7, #0]
 80138ee:	429a      	cmp	r2, r3
 80138f0:	da02      	bge.n	80138f8 <ip_reass_remove_oldest_datagram+0xb4>
 80138f2:	693b      	ldr	r3, [r7, #16]
 80138f4:	2b01      	cmp	r3, #1
 80138f6:	dcac      	bgt.n	8013852 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 80138f8:	697b      	ldr	r3, [r7, #20]
}
 80138fa:	4618      	mov	r0, r3
 80138fc:	3728      	adds	r7, #40	; 0x28
 80138fe:	46bd      	mov	sp, r7
 8013900:	bd80      	pop	{r7, pc}
 8013902:	bf00      	nop
 8013904:	2000021c 	.word	0x2000021c

08013908 <ip_reass_enqueue_new_datagram>:
=======
 8013822:	2300      	movs	r3, #0
 8013824:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8013826:	2300      	movs	r3, #0
 8013828:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801382a:	2300      	movs	r3, #0
 801382c:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801382e:	2300      	movs	r3, #0
 8013830:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8013832:	4b28      	ldr	r3, [pc, #160]	; (80138d4 <ip_reass_remove_oldest_datagram+0xc0>)
 8013834:	681b      	ldr	r3, [r3, #0]
 8013836:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8013838:	e030      	b.n	801389c <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801383a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801383c:	695a      	ldr	r2, [r3, #20]
 801383e:	687b      	ldr	r3, [r7, #4]
 8013840:	68db      	ldr	r3, [r3, #12]
 8013842:	429a      	cmp	r2, r3
 8013844:	d10c      	bne.n	8013860 <ip_reass_remove_oldest_datagram+0x4c>
 8013846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013848:	699a      	ldr	r2, [r3, #24]
 801384a:	687b      	ldr	r3, [r7, #4]
 801384c:	691b      	ldr	r3, [r3, #16]
 801384e:	429a      	cmp	r2, r3
 8013850:	d106      	bne.n	8013860 <ip_reass_remove_oldest_datagram+0x4c>
 8013852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013854:	899a      	ldrh	r2, [r3, #12]
 8013856:	687b      	ldr	r3, [r7, #4]
 8013858:	889b      	ldrh	r3, [r3, #4]
 801385a:	b29b      	uxth	r3, r3
 801385c:	429a      	cmp	r2, r3
 801385e:	d014      	beq.n	801388a <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8013860:	693b      	ldr	r3, [r7, #16]
 8013862:	3301      	adds	r3, #1
 8013864:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8013866:	6a3b      	ldr	r3, [r7, #32]
 8013868:	2b00      	cmp	r3, #0
 801386a:	d104      	bne.n	8013876 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801386c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801386e:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8013870:	69fb      	ldr	r3, [r7, #28]
 8013872:	61bb      	str	r3, [r7, #24]
 8013874:	e009      	b.n	801388a <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8013876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013878:	7fda      	ldrb	r2, [r3, #31]
 801387a:	6a3b      	ldr	r3, [r7, #32]
 801387c:	7fdb      	ldrb	r3, [r3, #31]
 801387e:	429a      	cmp	r2, r3
 8013880:	d803      	bhi.n	801388a <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8013882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013884:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8013886:	69fb      	ldr	r3, [r7, #28]
 8013888:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801388a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801388c:	681b      	ldr	r3, [r3, #0]
 801388e:	2b00      	cmp	r3, #0
 8013890:	d001      	beq.n	8013896 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8013892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013894:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8013896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013898:	681b      	ldr	r3, [r3, #0]
 801389a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801389c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801389e:	2b00      	cmp	r3, #0
 80138a0:	d1cb      	bne.n	801383a <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 80138a2:	6a3b      	ldr	r3, [r7, #32]
 80138a4:	2b00      	cmp	r3, #0
 80138a6:	d008      	beq.n	80138ba <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80138a8:	69b9      	ldr	r1, [r7, #24]
 80138aa:	6a38      	ldr	r0, [r7, #32]
 80138ac:	f7ff ff0e 	bl	80136cc <ip_reass_free_complete_datagram>
 80138b0:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 80138b2:	697a      	ldr	r2, [r7, #20]
 80138b4:	68fb      	ldr	r3, [r7, #12]
 80138b6:	4413      	add	r3, r2
 80138b8:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80138ba:	697a      	ldr	r2, [r7, #20]
 80138bc:	683b      	ldr	r3, [r7, #0]
 80138be:	429a      	cmp	r2, r3
 80138c0:	da02      	bge.n	80138c8 <ip_reass_remove_oldest_datagram+0xb4>
 80138c2:	693b      	ldr	r3, [r7, #16]
 80138c4:	2b01      	cmp	r3, #1
 80138c6:	dcac      	bgt.n	8013822 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 80138c8:	697b      	ldr	r3, [r7, #20]
}
 80138ca:	4618      	mov	r0, r3
 80138cc:	3728      	adds	r7, #40	; 0x28
 80138ce:	46bd      	mov	sp, r7
 80138d0:	bd80      	pop	{r7, pc}
 80138d2:	bf00      	nop
 80138d4:	2000021c 	.word	0x2000021c

080138d8 <ip_reass_enqueue_new_datagram>:
>>>>>>> Stashed changes
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
<<<<<<< Updated upstream
 8013908:	b580      	push	{r7, lr}
 801390a:	b084      	sub	sp, #16
 801390c:	af00      	add	r7, sp, #0
 801390e:	6078      	str	r0, [r7, #4]
 8013910:	6039      	str	r1, [r7, #0]
=======
 80138d8:	b580      	push	{r7, lr}
 80138da:	b084      	sub	sp, #16
 80138dc:	af00      	add	r7, sp, #0
 80138de:	6078      	str	r0, [r7, #4]
 80138e0:	6039      	str	r1, [r7, #0]
>>>>>>> Stashed changes
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
<<<<<<< Updated upstream
 8013912:	2004      	movs	r0, #4
 8013914:	f7f7 fe2e 	bl	800b574 <memp_malloc>
 8013918:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801391a:	68fb      	ldr	r3, [r7, #12]
 801391c:	2b00      	cmp	r3, #0
 801391e:	d110      	bne.n	8013942 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8013920:	6839      	ldr	r1, [r7, #0]
 8013922:	6878      	ldr	r0, [r7, #4]
 8013924:	f7ff ff8e 	bl	8013844 <ip_reass_remove_oldest_datagram>
 8013928:	4602      	mov	r2, r0
 801392a:	683b      	ldr	r3, [r7, #0]
 801392c:	4293      	cmp	r3, r2
 801392e:	dc03      	bgt.n	8013938 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8013930:	2004      	movs	r0, #4
 8013932:	f7f7 fe1f 	bl	800b574 <memp_malloc>
 8013936:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8013938:	68fb      	ldr	r3, [r7, #12]
 801393a:	2b00      	cmp	r3, #0
 801393c:	d101      	bne.n	8013942 <ip_reass_enqueue_new_datagram+0x3a>
=======
 80138e2:	2004      	movs	r0, #4
 80138e4:	f7f7 fe2e 	bl	800b544 <memp_malloc>
 80138e8:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 80138ea:	68fb      	ldr	r3, [r7, #12]
 80138ec:	2b00      	cmp	r3, #0
 80138ee:	d110      	bne.n	8013912 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 80138f0:	6839      	ldr	r1, [r7, #0]
 80138f2:	6878      	ldr	r0, [r7, #4]
 80138f4:	f7ff ff8e 	bl	8013814 <ip_reass_remove_oldest_datagram>
 80138f8:	4602      	mov	r2, r0
 80138fa:	683b      	ldr	r3, [r7, #0]
 80138fc:	4293      	cmp	r3, r2
 80138fe:	dc03      	bgt.n	8013908 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8013900:	2004      	movs	r0, #4
 8013902:	f7f7 fe1f 	bl	800b544 <memp_malloc>
 8013906:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8013908:	68fb      	ldr	r3, [r7, #12]
 801390a:	2b00      	cmp	r3, #0
 801390c:	d101      	bne.n	8013912 <ip_reass_enqueue_new_datagram+0x3a>
>>>>>>> Stashed changes
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
<<<<<<< Updated upstream
 801393e:	2300      	movs	r3, #0
 8013940:	e016      	b.n	8013970 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8013942:	2220      	movs	r2, #32
 8013944:	2100      	movs	r1, #0
 8013946:	68f8      	ldr	r0, [r7, #12]
 8013948:	f000 fe14 	bl	8014574 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801394c:	68fb      	ldr	r3, [r7, #12]
 801394e:	220f      	movs	r2, #15
 8013950:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8013952:	4b09      	ldr	r3, [pc, #36]	; (8013978 <ip_reass_enqueue_new_datagram+0x70>)
 8013954:	681a      	ldr	r2, [r3, #0]
 8013956:	68fb      	ldr	r3, [r7, #12]
 8013958:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801395a:	4a07      	ldr	r2, [pc, #28]	; (8013978 <ip_reass_enqueue_new_datagram+0x70>)
 801395c:	68fb      	ldr	r3, [r7, #12]
 801395e:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8013960:	68fb      	ldr	r3, [r7, #12]
 8013962:	3308      	adds	r3, #8
 8013964:	2214      	movs	r2, #20
 8013966:	6879      	ldr	r1, [r7, #4]
 8013968:	4618      	mov	r0, r3
 801396a:	f000 fddb 	bl	8014524 <memcpy>
  return ipr;
 801396e:	68fb      	ldr	r3, [r7, #12]
}
 8013970:	4618      	mov	r0, r3
 8013972:	3710      	adds	r7, #16
 8013974:	46bd      	mov	sp, r7
 8013976:	bd80      	pop	{r7, pc}
 8013978:	2000021c 	.word	0x2000021c

0801397c <ip_reass_dequeue_datagram>:
=======
 801390e:	2300      	movs	r3, #0
 8013910:	e016      	b.n	8013940 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8013912:	2220      	movs	r2, #32
 8013914:	2100      	movs	r1, #0
 8013916:	68f8      	ldr	r0, [r7, #12]
 8013918:	f000 fe14 	bl	8014544 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801391c:	68fb      	ldr	r3, [r7, #12]
 801391e:	220f      	movs	r2, #15
 8013920:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8013922:	4b09      	ldr	r3, [pc, #36]	; (8013948 <ip_reass_enqueue_new_datagram+0x70>)
 8013924:	681a      	ldr	r2, [r3, #0]
 8013926:	68fb      	ldr	r3, [r7, #12]
 8013928:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801392a:	4a07      	ldr	r2, [pc, #28]	; (8013948 <ip_reass_enqueue_new_datagram+0x70>)
 801392c:	68fb      	ldr	r3, [r7, #12]
 801392e:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8013930:	68fb      	ldr	r3, [r7, #12]
 8013932:	3308      	adds	r3, #8
 8013934:	2214      	movs	r2, #20
 8013936:	6879      	ldr	r1, [r7, #4]
 8013938:	4618      	mov	r0, r3
 801393a:	f000 fddb 	bl	80144f4 <memcpy>
  return ipr;
 801393e:	68fb      	ldr	r3, [r7, #12]
}
 8013940:	4618      	mov	r0, r3
 8013942:	3710      	adds	r7, #16
 8013944:	46bd      	mov	sp, r7
 8013946:	bd80      	pop	{r7, pc}
 8013948:	2000021c 	.word	0x2000021c

0801394c <ip_reass_dequeue_datagram>:
>>>>>>> Stashed changes
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
<<<<<<< Updated upstream
 801397c:	b580      	push	{r7, lr}
 801397e:	b082      	sub	sp, #8
 8013980:	af00      	add	r7, sp, #0
 8013982:	6078      	str	r0, [r7, #4]
 8013984:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8013986:	4b10      	ldr	r3, [pc, #64]	; (80139c8 <ip_reass_dequeue_datagram+0x4c>)
 8013988:	681b      	ldr	r3, [r3, #0]
 801398a:	687a      	ldr	r2, [r7, #4]
 801398c:	429a      	cmp	r2, r3
 801398e:	d104      	bne.n	801399a <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8013990:	687b      	ldr	r3, [r7, #4]
 8013992:	681b      	ldr	r3, [r3, #0]
 8013994:	4a0c      	ldr	r2, [pc, #48]	; (80139c8 <ip_reass_dequeue_datagram+0x4c>)
 8013996:	6013      	str	r3, [r2, #0]
 8013998:	e00d      	b.n	80139b6 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801399a:	683b      	ldr	r3, [r7, #0]
 801399c:	2b00      	cmp	r3, #0
 801399e:	d106      	bne.n	80139ae <ip_reass_dequeue_datagram+0x32>
 80139a0:	4b0a      	ldr	r3, [pc, #40]	; (80139cc <ip_reass_dequeue_datagram+0x50>)
 80139a2:	f240 1245 	movw	r2, #325	; 0x145
 80139a6:	490a      	ldr	r1, [pc, #40]	; (80139d0 <ip_reass_dequeue_datagram+0x54>)
 80139a8:	480a      	ldr	r0, [pc, #40]	; (80139d4 <ip_reass_dequeue_datagram+0x58>)
 80139aa:	f000 fdeb 	bl	8014584 <iprintf>
    prev->next = ipr->next;
 80139ae:	687b      	ldr	r3, [r7, #4]
 80139b0:	681a      	ldr	r2, [r3, #0]
 80139b2:	683b      	ldr	r3, [r7, #0]
 80139b4:	601a      	str	r2, [r3, #0]
=======
 801394c:	b580      	push	{r7, lr}
 801394e:	b082      	sub	sp, #8
 8013950:	af00      	add	r7, sp, #0
 8013952:	6078      	str	r0, [r7, #4]
 8013954:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8013956:	4b10      	ldr	r3, [pc, #64]	; (8013998 <ip_reass_dequeue_datagram+0x4c>)
 8013958:	681b      	ldr	r3, [r3, #0]
 801395a:	687a      	ldr	r2, [r7, #4]
 801395c:	429a      	cmp	r2, r3
 801395e:	d104      	bne.n	801396a <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8013960:	687b      	ldr	r3, [r7, #4]
 8013962:	681b      	ldr	r3, [r3, #0]
 8013964:	4a0c      	ldr	r2, [pc, #48]	; (8013998 <ip_reass_dequeue_datagram+0x4c>)
 8013966:	6013      	str	r3, [r2, #0]
 8013968:	e00d      	b.n	8013986 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801396a:	683b      	ldr	r3, [r7, #0]
 801396c:	2b00      	cmp	r3, #0
 801396e:	d106      	bne.n	801397e <ip_reass_dequeue_datagram+0x32>
 8013970:	4b0a      	ldr	r3, [pc, #40]	; (801399c <ip_reass_dequeue_datagram+0x50>)
 8013972:	f240 1245 	movw	r2, #325	; 0x145
 8013976:	490a      	ldr	r1, [pc, #40]	; (80139a0 <ip_reass_dequeue_datagram+0x54>)
 8013978:	480a      	ldr	r0, [pc, #40]	; (80139a4 <ip_reass_dequeue_datagram+0x58>)
 801397a:	f000 fdeb 	bl	8014554 <iprintf>
    prev->next = ipr->next;
 801397e:	687b      	ldr	r3, [r7, #4]
 8013980:	681a      	ldr	r2, [r3, #0]
 8013982:	683b      	ldr	r3, [r7, #0]
 8013984:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
<<<<<<< Updated upstream
 80139b6:	6879      	ldr	r1, [r7, #4]
 80139b8:	2004      	movs	r0, #4
 80139ba:	f7f7 fe27 	bl	800b60c <memp_free>
}
 80139be:	bf00      	nop
 80139c0:	3708      	adds	r7, #8
 80139c2:	46bd      	mov	sp, r7
 80139c4:	bd80      	pop	{r7, pc}
 80139c6:	bf00      	nop
 80139c8:	2000021c 	.word	0x2000021c
 80139cc:	08018080 	.word	0x08018080
 80139d0:	08018148 	.word	0x08018148
 80139d4:	080180c8 	.word	0x080180c8

080139d8 <ip_reass_chain_frag_into_datagram_and_validate>:
=======
 8013986:	6879      	ldr	r1, [r7, #4]
 8013988:	2004      	movs	r0, #4
 801398a:	f7f7 fe27 	bl	800b5dc <memp_free>
}
 801398e:	bf00      	nop
 8013990:	3708      	adds	r7, #8
 8013992:	46bd      	mov	sp, r7
 8013994:	bd80      	pop	{r7, pc}
 8013996:	bf00      	nop
 8013998:	2000021c 	.word	0x2000021c
 801399c:	08018064 	.word	0x08018064
 80139a0:	0801812c 	.word	0x0801812c
 80139a4:	080180ac 	.word	0x080180ac

080139a8 <ip_reass_chain_frag_into_datagram_and_validate>:
>>>>>>> Stashed changes
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
<<<<<<< Updated upstream
 80139d8:	b580      	push	{r7, lr}
 80139da:	b08c      	sub	sp, #48	; 0x30
 80139dc:	af00      	add	r7, sp, #0
 80139de:	60f8      	str	r0, [r7, #12]
 80139e0:	60b9      	str	r1, [r7, #8]
 80139e2:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 80139e4:	2300      	movs	r3, #0
 80139e6:	62bb      	str	r3, [r7, #40]	; 0x28
=======
 80139a8:	b580      	push	{r7, lr}
 80139aa:	b08c      	sub	sp, #48	; 0x30
 80139ac:	af00      	add	r7, sp, #0
 80139ae:	60f8      	str	r0, [r7, #12]
 80139b0:	60b9      	str	r1, [r7, #8]
 80139b2:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 80139b4:	2300      	movs	r3, #0
 80139b6:	62bb      	str	r3, [r7, #40]	; 0x28
>>>>>>> Stashed changes
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
<<<<<<< Updated upstream
 80139e8:	2301      	movs	r3, #1
 80139ea:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 80139ec:	68bb      	ldr	r3, [r7, #8]
 80139ee:	685b      	ldr	r3, [r3, #4]
 80139f0:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80139f2:	69fb      	ldr	r3, [r7, #28]
 80139f4:	885b      	ldrh	r3, [r3, #2]
 80139f6:	b29b      	uxth	r3, r3
 80139f8:	4618      	mov	r0, r3
 80139fa:	f7f7 f966 	bl	800acca <lwip_htons>
 80139fe:	4603      	mov	r3, r0
 8013a00:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8013a02:	69fb      	ldr	r3, [r7, #28]
 8013a04:	781b      	ldrb	r3, [r3, #0]
 8013a06:	f003 030f 	and.w	r3, r3, #15
 8013a0a:	b2db      	uxtb	r3, r3
 8013a0c:	009b      	lsls	r3, r3, #2
 8013a0e:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8013a10:	7e7b      	ldrb	r3, [r7, #25]
 8013a12:	b29b      	uxth	r3, r3
 8013a14:	8b7a      	ldrh	r2, [r7, #26]
 8013a16:	429a      	cmp	r2, r3
 8013a18:	d202      	bcs.n	8013a20 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013a1a:	f04f 33ff 	mov.w	r3, #4294967295
 8013a1e:	e135      	b.n	8013c8c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8013a20:	7e7b      	ldrb	r3, [r7, #25]
 8013a22:	b29b      	uxth	r3, r3
 8013a24:	8b7a      	ldrh	r2, [r7, #26]
 8013a26:	1ad3      	subs	r3, r2, r3
 8013a28:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8013a2a:	69fb      	ldr	r3, [r7, #28]
 8013a2c:	88db      	ldrh	r3, [r3, #6]
 8013a2e:	b29b      	uxth	r3, r3
 8013a30:	4618      	mov	r0, r3
 8013a32:	f7f7 f94a 	bl	800acca <lwip_htons>
 8013a36:	4603      	mov	r3, r0
 8013a38:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013a3c:	b29b      	uxth	r3, r3
 8013a3e:	00db      	lsls	r3, r3, #3
 8013a40:	82fb      	strh	r3, [r7, #22]
=======
 80139b8:	2301      	movs	r3, #1
 80139ba:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 80139bc:	68bb      	ldr	r3, [r7, #8]
 80139be:	685b      	ldr	r3, [r3, #4]
 80139c0:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80139c2:	69fb      	ldr	r3, [r7, #28]
 80139c4:	885b      	ldrh	r3, [r3, #2]
 80139c6:	b29b      	uxth	r3, r3
 80139c8:	4618      	mov	r0, r3
 80139ca:	f7f7 f966 	bl	800ac9a <lwip_htons>
 80139ce:	4603      	mov	r3, r0
 80139d0:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 80139d2:	69fb      	ldr	r3, [r7, #28]
 80139d4:	781b      	ldrb	r3, [r3, #0]
 80139d6:	f003 030f 	and.w	r3, r3, #15
 80139da:	b2db      	uxtb	r3, r3
 80139dc:	009b      	lsls	r3, r3, #2
 80139de:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 80139e0:	7e7b      	ldrb	r3, [r7, #25]
 80139e2:	b29b      	uxth	r3, r3
 80139e4:	8b7a      	ldrh	r2, [r7, #26]
 80139e6:	429a      	cmp	r2, r3
 80139e8:	d202      	bcs.n	80139f0 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80139ea:	f04f 33ff 	mov.w	r3, #4294967295
 80139ee:	e135      	b.n	8013c5c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 80139f0:	7e7b      	ldrb	r3, [r7, #25]
 80139f2:	b29b      	uxth	r3, r3
 80139f4:	8b7a      	ldrh	r2, [r7, #26]
 80139f6:	1ad3      	subs	r3, r2, r3
 80139f8:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 80139fa:	69fb      	ldr	r3, [r7, #28]
 80139fc:	88db      	ldrh	r3, [r3, #6]
 80139fe:	b29b      	uxth	r3, r3
 8013a00:	4618      	mov	r0, r3
 8013a02:	f7f7 f94a 	bl	800ac9a <lwip_htons>
 8013a06:	4603      	mov	r3, r0
 8013a08:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013a0c:	b29b      	uxth	r3, r3
 8013a0e:	00db      	lsls	r3, r3, #3
 8013a10:	82fb      	strh	r3, [r7, #22]
>>>>>>> Stashed changes
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
<<<<<<< Updated upstream
 8013a42:	68bb      	ldr	r3, [r7, #8]
 8013a44:	685b      	ldr	r3, [r3, #4]
 8013a46:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8013a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a4a:	2200      	movs	r2, #0
 8013a4c:	701a      	strb	r2, [r3, #0]
 8013a4e:	2200      	movs	r2, #0
 8013a50:	705a      	strb	r2, [r3, #1]
 8013a52:	2200      	movs	r2, #0
 8013a54:	709a      	strb	r2, [r3, #2]
 8013a56:	2200      	movs	r2, #0
 8013a58:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8013a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a5c:	8afa      	ldrh	r2, [r7, #22]
 8013a5e:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8013a60:	8afa      	ldrh	r2, [r7, #22]
 8013a62:	8b7b      	ldrh	r3, [r7, #26]
 8013a64:	4413      	add	r3, r2
 8013a66:	b29a      	uxth	r2, r3
 8013a68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a6a:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8013a6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a6e:	88db      	ldrh	r3, [r3, #6]
 8013a70:	b29b      	uxth	r3, r3
 8013a72:	8afa      	ldrh	r2, [r7, #22]
 8013a74:	429a      	cmp	r2, r3
 8013a76:	d902      	bls.n	8013a7e <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013a78:	f04f 33ff 	mov.w	r3, #4294967295
 8013a7c:	e106      	b.n	8013c8c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
=======
 8013a12:	68bb      	ldr	r3, [r7, #8]
 8013a14:	685b      	ldr	r3, [r3, #4]
 8013a16:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8013a18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a1a:	2200      	movs	r2, #0
 8013a1c:	701a      	strb	r2, [r3, #0]
 8013a1e:	2200      	movs	r2, #0
 8013a20:	705a      	strb	r2, [r3, #1]
 8013a22:	2200      	movs	r2, #0
 8013a24:	709a      	strb	r2, [r3, #2]
 8013a26:	2200      	movs	r2, #0
 8013a28:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8013a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a2c:	8afa      	ldrh	r2, [r7, #22]
 8013a2e:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8013a30:	8afa      	ldrh	r2, [r7, #22]
 8013a32:	8b7b      	ldrh	r3, [r7, #26]
 8013a34:	4413      	add	r3, r2
 8013a36:	b29a      	uxth	r2, r3
 8013a38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a3a:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8013a3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a3e:	88db      	ldrh	r3, [r3, #6]
 8013a40:	b29b      	uxth	r3, r3
 8013a42:	8afa      	ldrh	r2, [r7, #22]
 8013a44:	429a      	cmp	r2, r3
 8013a46:	d902      	bls.n	8013a4e <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013a48:	f04f 33ff 	mov.w	r3, #4294967295
 8013a4c:	e106      	b.n	8013c5c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
>>>>>>> Stashed changes
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
<<<<<<< Updated upstream
 8013a7e:	68fb      	ldr	r3, [r7, #12]
 8013a80:	685b      	ldr	r3, [r3, #4]
 8013a82:	627b      	str	r3, [r7, #36]	; 0x24
 8013a84:	e068      	b.n	8013b58 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8013a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a88:	685b      	ldr	r3, [r3, #4]
 8013a8a:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8013a8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a8e:	889b      	ldrh	r3, [r3, #4]
 8013a90:	b29a      	uxth	r2, r3
 8013a92:	693b      	ldr	r3, [r7, #16]
 8013a94:	889b      	ldrh	r3, [r3, #4]
 8013a96:	b29b      	uxth	r3, r3
 8013a98:	429a      	cmp	r2, r3
 8013a9a:	d235      	bcs.n	8013b08 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8013a9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013aa0:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8013aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013aa4:	2b00      	cmp	r3, #0
 8013aa6:	d020      	beq.n	8013aea <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8013aa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013aaa:	889b      	ldrh	r3, [r3, #4]
 8013aac:	b29a      	uxth	r2, r3
 8013aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ab0:	88db      	ldrh	r3, [r3, #6]
 8013ab2:	b29b      	uxth	r3, r3
 8013ab4:	429a      	cmp	r2, r3
 8013ab6:	d307      	bcc.n	8013ac8 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8013ab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013aba:	88db      	ldrh	r3, [r3, #6]
 8013abc:	b29a      	uxth	r2, r3
 8013abe:	693b      	ldr	r3, [r7, #16]
 8013ac0:	889b      	ldrh	r3, [r3, #4]
 8013ac2:	b29b      	uxth	r3, r3
 8013ac4:	429a      	cmp	r2, r3
 8013ac6:	d902      	bls.n	8013ace <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013ac8:	f04f 33ff 	mov.w	r3, #4294967295
 8013acc:	e0de      	b.n	8013c8c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8013ace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ad0:	68ba      	ldr	r2, [r7, #8]
 8013ad2:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8013ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ad6:	88db      	ldrh	r3, [r3, #6]
 8013ad8:	b29a      	uxth	r2, r3
 8013ada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013adc:	889b      	ldrh	r3, [r3, #4]
 8013ade:	b29b      	uxth	r3, r3
 8013ae0:	429a      	cmp	r2, r3
 8013ae2:	d03d      	beq.n	8013b60 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8013ae4:	2300      	movs	r3, #0
 8013ae6:	623b      	str	r3, [r7, #32]
=======
 8013a4e:	68fb      	ldr	r3, [r7, #12]
 8013a50:	685b      	ldr	r3, [r3, #4]
 8013a52:	627b      	str	r3, [r7, #36]	; 0x24
 8013a54:	e068      	b.n	8013b28 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8013a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a58:	685b      	ldr	r3, [r3, #4]
 8013a5a:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8013a5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a5e:	889b      	ldrh	r3, [r3, #4]
 8013a60:	b29a      	uxth	r2, r3
 8013a62:	693b      	ldr	r3, [r7, #16]
 8013a64:	889b      	ldrh	r3, [r3, #4]
 8013a66:	b29b      	uxth	r3, r3
 8013a68:	429a      	cmp	r2, r3
 8013a6a:	d235      	bcs.n	8013ad8 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8013a6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013a70:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8013a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a74:	2b00      	cmp	r3, #0
 8013a76:	d020      	beq.n	8013aba <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8013a78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a7a:	889b      	ldrh	r3, [r3, #4]
 8013a7c:	b29a      	uxth	r2, r3
 8013a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a80:	88db      	ldrh	r3, [r3, #6]
 8013a82:	b29b      	uxth	r3, r3
 8013a84:	429a      	cmp	r2, r3
 8013a86:	d307      	bcc.n	8013a98 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8013a88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a8a:	88db      	ldrh	r3, [r3, #6]
 8013a8c:	b29a      	uxth	r2, r3
 8013a8e:	693b      	ldr	r3, [r7, #16]
 8013a90:	889b      	ldrh	r3, [r3, #4]
 8013a92:	b29b      	uxth	r3, r3
 8013a94:	429a      	cmp	r2, r3
 8013a96:	d902      	bls.n	8013a9e <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013a98:	f04f 33ff 	mov.w	r3, #4294967295
 8013a9c:	e0de      	b.n	8013c5c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8013a9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013aa0:	68ba      	ldr	r2, [r7, #8]
 8013aa2:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8013aa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013aa6:	88db      	ldrh	r3, [r3, #6]
 8013aa8:	b29a      	uxth	r2, r3
 8013aaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013aac:	889b      	ldrh	r3, [r3, #4]
 8013aae:	b29b      	uxth	r3, r3
 8013ab0:	429a      	cmp	r2, r3
 8013ab2:	d03d      	beq.n	8013b30 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8013ab4:	2300      	movs	r3, #0
 8013ab6:	623b      	str	r3, [r7, #32]
>>>>>>> Stashed changes
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
<<<<<<< Updated upstream
 8013ae8:	e03a      	b.n	8013b60 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8013aea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013aec:	88db      	ldrh	r3, [r3, #6]
 8013aee:	b29a      	uxth	r2, r3
 8013af0:	693b      	ldr	r3, [r7, #16]
 8013af2:	889b      	ldrh	r3, [r3, #4]
 8013af4:	b29b      	uxth	r3, r3
 8013af6:	429a      	cmp	r2, r3
 8013af8:	d902      	bls.n	8013b00 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013afa:	f04f 33ff 	mov.w	r3, #4294967295
 8013afe:	e0c5      	b.n	8013c8c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8013b00:	68fb      	ldr	r3, [r7, #12]
 8013b02:	68ba      	ldr	r2, [r7, #8]
 8013b04:	605a      	str	r2, [r3, #4]
      break;
 8013b06:	e02b      	b.n	8013b60 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8013b08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b0a:	889b      	ldrh	r3, [r3, #4]
 8013b0c:	b29a      	uxth	r2, r3
 8013b0e:	693b      	ldr	r3, [r7, #16]
 8013b10:	889b      	ldrh	r3, [r3, #4]
 8013b12:	b29b      	uxth	r3, r3
 8013b14:	429a      	cmp	r2, r3
 8013b16:	d102      	bne.n	8013b1e <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013b18:	f04f 33ff 	mov.w	r3, #4294967295
 8013b1c:	e0b6      	b.n	8013c8c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8013b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b20:	889b      	ldrh	r3, [r3, #4]
 8013b22:	b29a      	uxth	r2, r3
 8013b24:	693b      	ldr	r3, [r7, #16]
 8013b26:	88db      	ldrh	r3, [r3, #6]
 8013b28:	b29b      	uxth	r3, r3
 8013b2a:	429a      	cmp	r2, r3
 8013b2c:	d202      	bcs.n	8013b34 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013b2e:	f04f 33ff 	mov.w	r3, #4294967295
 8013b32:	e0ab      	b.n	8013c8c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
=======
 8013ab8:	e03a      	b.n	8013b30 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8013aba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013abc:	88db      	ldrh	r3, [r3, #6]
 8013abe:	b29a      	uxth	r2, r3
 8013ac0:	693b      	ldr	r3, [r7, #16]
 8013ac2:	889b      	ldrh	r3, [r3, #4]
 8013ac4:	b29b      	uxth	r3, r3
 8013ac6:	429a      	cmp	r2, r3
 8013ac8:	d902      	bls.n	8013ad0 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013aca:	f04f 33ff 	mov.w	r3, #4294967295
 8013ace:	e0c5      	b.n	8013c5c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8013ad0:	68fb      	ldr	r3, [r7, #12]
 8013ad2:	68ba      	ldr	r2, [r7, #8]
 8013ad4:	605a      	str	r2, [r3, #4]
      break;
 8013ad6:	e02b      	b.n	8013b30 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8013ad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ada:	889b      	ldrh	r3, [r3, #4]
 8013adc:	b29a      	uxth	r2, r3
 8013ade:	693b      	ldr	r3, [r7, #16]
 8013ae0:	889b      	ldrh	r3, [r3, #4]
 8013ae2:	b29b      	uxth	r3, r3
 8013ae4:	429a      	cmp	r2, r3
 8013ae6:	d102      	bne.n	8013aee <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013ae8:	f04f 33ff 	mov.w	r3, #4294967295
 8013aec:	e0b6      	b.n	8013c5c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8013aee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013af0:	889b      	ldrh	r3, [r3, #4]
 8013af2:	b29a      	uxth	r2, r3
 8013af4:	693b      	ldr	r3, [r7, #16]
 8013af6:	88db      	ldrh	r3, [r3, #6]
 8013af8:	b29b      	uxth	r3, r3
 8013afa:	429a      	cmp	r2, r3
 8013afc:	d202      	bcs.n	8013b04 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013afe:	f04f 33ff 	mov.w	r3, #4294967295
 8013b02:	e0ab      	b.n	8013c5c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
>>>>>>> Stashed changes
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
<<<<<<< Updated upstream
 8013b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b36:	2b00      	cmp	r3, #0
 8013b38:	d009      	beq.n	8013b4e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8013b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b3c:	88db      	ldrh	r3, [r3, #6]
 8013b3e:	b29a      	uxth	r2, r3
 8013b40:	693b      	ldr	r3, [r7, #16]
 8013b42:	889b      	ldrh	r3, [r3, #4]
 8013b44:	b29b      	uxth	r3, r3
 8013b46:	429a      	cmp	r2, r3
 8013b48:	d001      	beq.n	8013b4e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8013b4a:	2300      	movs	r3, #0
 8013b4c:	623b      	str	r3, [r7, #32]
=======
 8013b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b06:	2b00      	cmp	r3, #0
 8013b08:	d009      	beq.n	8013b1e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8013b0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b0c:	88db      	ldrh	r3, [r3, #6]
 8013b0e:	b29a      	uxth	r2, r3
 8013b10:	693b      	ldr	r3, [r7, #16]
 8013b12:	889b      	ldrh	r3, [r3, #4]
 8013b14:	b29b      	uxth	r3, r3
 8013b16:	429a      	cmp	r2, r3
 8013b18:	d001      	beq.n	8013b1e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8013b1a:	2300      	movs	r3, #0
 8013b1c:	623b      	str	r3, [r7, #32]
>>>>>>> Stashed changes
        }
      }
    }
    q = iprh_tmp->next_pbuf;
<<<<<<< Updated upstream
 8013b4e:	693b      	ldr	r3, [r7, #16]
 8013b50:	681b      	ldr	r3, [r3, #0]
 8013b52:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8013b54:	693b      	ldr	r3, [r7, #16]
 8013b56:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8013b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b5a:	2b00      	cmp	r3, #0
 8013b5c:	d193      	bne.n	8013a86 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8013b5e:	e000      	b.n	8013b62 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8013b60:	bf00      	nop
=======
 8013b1e:	693b      	ldr	r3, [r7, #16]
 8013b20:	681b      	ldr	r3, [r3, #0]
 8013b22:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8013b24:	693b      	ldr	r3, [r7, #16]
 8013b26:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8013b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b2a:	2b00      	cmp	r3, #0
 8013b2c:	d193      	bne.n	8013a56 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8013b2e:	e000      	b.n	8013b32 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8013b30:	bf00      	nop
>>>>>>> Stashed changes
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
<<<<<<< Updated upstream
 8013b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b64:	2b00      	cmp	r3, #0
 8013b66:	d12d      	bne.n	8013bc4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8013b68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b6a:	2b00      	cmp	r3, #0
 8013b6c:	d01c      	beq.n	8013ba8 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
=======
 8013b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b34:	2b00      	cmp	r3, #0
 8013b36:	d12d      	bne.n	8013b94 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8013b38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b3a:	2b00      	cmp	r3, #0
 8013b3c:	d01c      	beq.n	8013b78 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
>>>>>>> Stashed changes
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
<<<<<<< Updated upstream
 8013b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b70:	88db      	ldrh	r3, [r3, #6]
 8013b72:	b29a      	uxth	r2, r3
 8013b74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b76:	889b      	ldrh	r3, [r3, #4]
 8013b78:	b29b      	uxth	r3, r3
 8013b7a:	429a      	cmp	r2, r3
 8013b7c:	d906      	bls.n	8013b8c <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8013b7e:	4b45      	ldr	r3, [pc, #276]	; (8013c94 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013b80:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8013b84:	4944      	ldr	r1, [pc, #272]	; (8013c98 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8013b86:	4845      	ldr	r0, [pc, #276]	; (8013c9c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013b88:	f000 fcfc 	bl	8014584 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8013b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b8e:	68ba      	ldr	r2, [r7, #8]
 8013b90:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8013b92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b94:	88db      	ldrh	r3, [r3, #6]
 8013b96:	b29a      	uxth	r2, r3
 8013b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b9a:	889b      	ldrh	r3, [r3, #4]
 8013b9c:	b29b      	uxth	r3, r3
 8013b9e:	429a      	cmp	r2, r3
 8013ba0:	d010      	beq.n	8013bc4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8013ba2:	2300      	movs	r3, #0
 8013ba4:	623b      	str	r3, [r7, #32]
 8013ba6:	e00d      	b.n	8013bc4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
=======
 8013b3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b40:	88db      	ldrh	r3, [r3, #6]
 8013b42:	b29a      	uxth	r2, r3
 8013b44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b46:	889b      	ldrh	r3, [r3, #4]
 8013b48:	b29b      	uxth	r3, r3
 8013b4a:	429a      	cmp	r2, r3
 8013b4c:	d906      	bls.n	8013b5c <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8013b4e:	4b45      	ldr	r3, [pc, #276]	; (8013c64 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013b50:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8013b54:	4944      	ldr	r1, [pc, #272]	; (8013c68 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8013b56:	4845      	ldr	r0, [pc, #276]	; (8013c6c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013b58:	f000 fcfc 	bl	8014554 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8013b5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b5e:	68ba      	ldr	r2, [r7, #8]
 8013b60:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8013b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b64:	88db      	ldrh	r3, [r3, #6]
 8013b66:	b29a      	uxth	r2, r3
 8013b68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b6a:	889b      	ldrh	r3, [r3, #4]
 8013b6c:	b29b      	uxth	r3, r3
 8013b6e:	429a      	cmp	r2, r3
 8013b70:	d010      	beq.n	8013b94 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8013b72:	2300      	movs	r3, #0
 8013b74:	623b      	str	r3, [r7, #32]
 8013b76:	e00d      	b.n	8013b94 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
>>>>>>> Stashed changes
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
<<<<<<< Updated upstream
 8013ba8:	68fb      	ldr	r3, [r7, #12]
 8013baa:	685b      	ldr	r3, [r3, #4]
 8013bac:	2b00      	cmp	r3, #0
 8013bae:	d006      	beq.n	8013bbe <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8013bb0:	4b38      	ldr	r3, [pc, #224]	; (8013c94 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013bb2:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8013bb6:	493a      	ldr	r1, [pc, #232]	; (8013ca0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8013bb8:	4838      	ldr	r0, [pc, #224]	; (8013c9c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013bba:	f000 fce3 	bl	8014584 <iprintf>
=======
 8013b78:	68fb      	ldr	r3, [r7, #12]
 8013b7a:	685b      	ldr	r3, [r3, #4]
 8013b7c:	2b00      	cmp	r3, #0
 8013b7e:	d006      	beq.n	8013b8e <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8013b80:	4b38      	ldr	r3, [pc, #224]	; (8013c64 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013b82:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8013b86:	493a      	ldr	r1, [pc, #232]	; (8013c70 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8013b88:	4838      	ldr	r0, [pc, #224]	; (8013c6c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013b8a:	f000 fce3 	bl	8014554 <iprintf>
>>>>>>> Stashed changes
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
<<<<<<< Updated upstream
 8013bbe:	68fb      	ldr	r3, [r7, #12]
 8013bc0:	68ba      	ldr	r2, [r7, #8]
 8013bc2:	605a      	str	r2, [r3, #4]
=======
 8013b8e:	68fb      	ldr	r3, [r7, #12]
 8013b90:	68ba      	ldr	r2, [r7, #8]
 8013b92:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
<<<<<<< Updated upstream
 8013bc4:	687b      	ldr	r3, [r7, #4]
 8013bc6:	2b00      	cmp	r3, #0
 8013bc8:	d105      	bne.n	8013bd6 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8013bca:	68fb      	ldr	r3, [r7, #12]
 8013bcc:	7f9b      	ldrb	r3, [r3, #30]
 8013bce:	f003 0301 	and.w	r3, r3, #1
 8013bd2:	2b00      	cmp	r3, #0
 8013bd4:	d059      	beq.n	8013c8a <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8013bd6:	6a3b      	ldr	r3, [r7, #32]
 8013bd8:	2b00      	cmp	r3, #0
 8013bda:	d04f      	beq.n	8013c7c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8013bdc:	68fb      	ldr	r3, [r7, #12]
 8013bde:	685b      	ldr	r3, [r3, #4]
 8013be0:	2b00      	cmp	r3, #0
 8013be2:	d006      	beq.n	8013bf2 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8013be4:	68fb      	ldr	r3, [r7, #12]
 8013be6:	685b      	ldr	r3, [r3, #4]
 8013be8:	685b      	ldr	r3, [r3, #4]
 8013bea:	889b      	ldrh	r3, [r3, #4]
 8013bec:	b29b      	uxth	r3, r3
 8013bee:	2b00      	cmp	r3, #0
 8013bf0:	d002      	beq.n	8013bf8 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8013bf2:	2300      	movs	r3, #0
 8013bf4:	623b      	str	r3, [r7, #32]
 8013bf6:	e041      	b.n	8013c7c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8013bf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013bfa:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8013bfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013bfe:	681b      	ldr	r3, [r3, #0]
 8013c00:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8013c02:	e012      	b.n	8013c2a <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8013c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c06:	685b      	ldr	r3, [r3, #4]
 8013c08:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8013c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c0c:	88db      	ldrh	r3, [r3, #6]
 8013c0e:	b29a      	uxth	r2, r3
 8013c10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c12:	889b      	ldrh	r3, [r3, #4]
 8013c14:	b29b      	uxth	r3, r3
 8013c16:	429a      	cmp	r2, r3
 8013c18:	d002      	beq.n	8013c20 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8013c1a:	2300      	movs	r3, #0
 8013c1c:	623b      	str	r3, [r7, #32]
            break;
 8013c1e:	e007      	b.n	8013c30 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8013c20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c22:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8013c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c26:	681b      	ldr	r3, [r3, #0]
 8013c28:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8013c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c2c:	2b00      	cmp	r3, #0
 8013c2e:	d1e9      	bne.n	8013c04 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
=======
 8013b94:	687b      	ldr	r3, [r7, #4]
 8013b96:	2b00      	cmp	r3, #0
 8013b98:	d105      	bne.n	8013ba6 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8013b9a:	68fb      	ldr	r3, [r7, #12]
 8013b9c:	7f9b      	ldrb	r3, [r3, #30]
 8013b9e:	f003 0301 	and.w	r3, r3, #1
 8013ba2:	2b00      	cmp	r3, #0
 8013ba4:	d059      	beq.n	8013c5a <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8013ba6:	6a3b      	ldr	r3, [r7, #32]
 8013ba8:	2b00      	cmp	r3, #0
 8013baa:	d04f      	beq.n	8013c4c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8013bac:	68fb      	ldr	r3, [r7, #12]
 8013bae:	685b      	ldr	r3, [r3, #4]
 8013bb0:	2b00      	cmp	r3, #0
 8013bb2:	d006      	beq.n	8013bc2 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8013bb4:	68fb      	ldr	r3, [r7, #12]
 8013bb6:	685b      	ldr	r3, [r3, #4]
 8013bb8:	685b      	ldr	r3, [r3, #4]
 8013bba:	889b      	ldrh	r3, [r3, #4]
 8013bbc:	b29b      	uxth	r3, r3
 8013bbe:	2b00      	cmp	r3, #0
 8013bc0:	d002      	beq.n	8013bc8 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8013bc2:	2300      	movs	r3, #0
 8013bc4:	623b      	str	r3, [r7, #32]
 8013bc6:	e041      	b.n	8013c4c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8013bc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013bca:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8013bcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013bce:	681b      	ldr	r3, [r3, #0]
 8013bd0:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8013bd2:	e012      	b.n	8013bfa <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8013bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013bd6:	685b      	ldr	r3, [r3, #4]
 8013bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8013bda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013bdc:	88db      	ldrh	r3, [r3, #6]
 8013bde:	b29a      	uxth	r2, r3
 8013be0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013be2:	889b      	ldrh	r3, [r3, #4]
 8013be4:	b29b      	uxth	r3, r3
 8013be6:	429a      	cmp	r2, r3
 8013be8:	d002      	beq.n	8013bf0 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8013bea:	2300      	movs	r3, #0
 8013bec:	623b      	str	r3, [r7, #32]
            break;
 8013bee:	e007      	b.n	8013c00 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8013bf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013bf2:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8013bf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013bf6:	681b      	ldr	r3, [r3, #0]
 8013bf8:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8013bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013bfc:	2b00      	cmp	r3, #0
 8013bfe:	d1e9      	bne.n	8013bd4 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
>>>>>>> Stashed changes
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
<<<<<<< Updated upstream
 8013c30:	6a3b      	ldr	r3, [r7, #32]
 8013c32:	2b00      	cmp	r3, #0
 8013c34:	d022      	beq.n	8013c7c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8013c36:	68fb      	ldr	r3, [r7, #12]
 8013c38:	685b      	ldr	r3, [r3, #4]
 8013c3a:	2b00      	cmp	r3, #0
 8013c3c:	d106      	bne.n	8013c4c <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8013c3e:	4b15      	ldr	r3, [pc, #84]	; (8013c94 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013c40:	f240 12df 	movw	r2, #479	; 0x1df
 8013c44:	4917      	ldr	r1, [pc, #92]	; (8013ca4 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8013c46:	4815      	ldr	r0, [pc, #84]	; (8013c9c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013c48:	f000 fc9c 	bl	8014584 <iprintf>
          LWIP_ASSERT("sanity check",
 8013c4c:	68fb      	ldr	r3, [r7, #12]
 8013c4e:	685b      	ldr	r3, [r3, #4]
 8013c50:	685b      	ldr	r3, [r3, #4]
 8013c52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013c54:	429a      	cmp	r2, r3
 8013c56:	d106      	bne.n	8013c66 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8013c58:	4b0e      	ldr	r3, [pc, #56]	; (8013c94 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013c5a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8013c5e:	4911      	ldr	r1, [pc, #68]	; (8013ca4 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8013c60:	480e      	ldr	r0, [pc, #56]	; (8013c9c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013c62:	f000 fc8f 	bl	8014584 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8013c66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c68:	681b      	ldr	r3, [r3, #0]
 8013c6a:	2b00      	cmp	r3, #0
 8013c6c:	d006      	beq.n	8013c7c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8013c6e:	4b09      	ldr	r3, [pc, #36]	; (8013c94 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013c70:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8013c74:	490c      	ldr	r1, [pc, #48]	; (8013ca8 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8013c76:	4809      	ldr	r0, [pc, #36]	; (8013c9c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013c78:	f000 fc84 	bl	8014584 <iprintf>
=======
 8013c00:	6a3b      	ldr	r3, [r7, #32]
 8013c02:	2b00      	cmp	r3, #0
 8013c04:	d022      	beq.n	8013c4c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8013c06:	68fb      	ldr	r3, [r7, #12]
 8013c08:	685b      	ldr	r3, [r3, #4]
 8013c0a:	2b00      	cmp	r3, #0
 8013c0c:	d106      	bne.n	8013c1c <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8013c0e:	4b15      	ldr	r3, [pc, #84]	; (8013c64 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013c10:	f240 12df 	movw	r2, #479	; 0x1df
 8013c14:	4917      	ldr	r1, [pc, #92]	; (8013c74 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8013c16:	4815      	ldr	r0, [pc, #84]	; (8013c6c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013c18:	f000 fc9c 	bl	8014554 <iprintf>
          LWIP_ASSERT("sanity check",
 8013c1c:	68fb      	ldr	r3, [r7, #12]
 8013c1e:	685b      	ldr	r3, [r3, #4]
 8013c20:	685b      	ldr	r3, [r3, #4]
 8013c22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013c24:	429a      	cmp	r2, r3
 8013c26:	d106      	bne.n	8013c36 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8013c28:	4b0e      	ldr	r3, [pc, #56]	; (8013c64 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013c2a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8013c2e:	4911      	ldr	r1, [pc, #68]	; (8013c74 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8013c30:	480e      	ldr	r0, [pc, #56]	; (8013c6c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013c32:	f000 fc8f 	bl	8014554 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8013c36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c38:	681b      	ldr	r3, [r3, #0]
 8013c3a:	2b00      	cmp	r3, #0
 8013c3c:	d006      	beq.n	8013c4c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8013c3e:	4b09      	ldr	r3, [pc, #36]	; (8013c64 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013c40:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8013c44:	490c      	ldr	r1, [pc, #48]	; (8013c78 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8013c46:	4809      	ldr	r0, [pc, #36]	; (8013c6c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013c48:	f000 fc84 	bl	8014554 <iprintf>
>>>>>>> Stashed changes
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
<<<<<<< Updated upstream
 8013c7c:	6a3b      	ldr	r3, [r7, #32]
 8013c7e:	2b00      	cmp	r3, #0
 8013c80:	bf14      	ite	ne
 8013c82:	2301      	movne	r3, #1
 8013c84:	2300      	moveq	r3, #0
 8013c86:	b2db      	uxtb	r3, r3
 8013c88:	e000      	b.n	8013c8c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8013c8a:	2300      	movs	r3, #0
}
 8013c8c:	4618      	mov	r0, r3
 8013c8e:	3730      	adds	r7, #48	; 0x30
 8013c90:	46bd      	mov	sp, r7
 8013c92:	bd80      	pop	{r7, pc}
 8013c94:	08018080 	.word	0x08018080
 8013c98:	08018164 	.word	0x08018164
 8013c9c:	080180c8 	.word	0x080180c8
 8013ca0:	08018184 	.word	0x08018184
 8013ca4:	080181bc 	.word	0x080181bc
 8013ca8:	080181cc 	.word	0x080181cc

08013cac <ip4_reass>:
=======
 8013c4c:	6a3b      	ldr	r3, [r7, #32]
 8013c4e:	2b00      	cmp	r3, #0
 8013c50:	bf14      	ite	ne
 8013c52:	2301      	movne	r3, #1
 8013c54:	2300      	moveq	r3, #0
 8013c56:	b2db      	uxtb	r3, r3
 8013c58:	e000      	b.n	8013c5c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8013c5a:	2300      	movs	r3, #0
}
 8013c5c:	4618      	mov	r0, r3
 8013c5e:	3730      	adds	r7, #48	; 0x30
 8013c60:	46bd      	mov	sp, r7
 8013c62:	bd80      	pop	{r7, pc}
 8013c64:	08018064 	.word	0x08018064
 8013c68:	08018148 	.word	0x08018148
 8013c6c:	080180ac 	.word	0x080180ac
 8013c70:	08018168 	.word	0x08018168
 8013c74:	080181a0 	.word	0x080181a0
 8013c78:	080181b0 	.word	0x080181b0

08013c7c <ip4_reass>:
>>>>>>> Stashed changes
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
<<<<<<< Updated upstream
 8013cac:	b580      	push	{r7, lr}
 8013cae:	b08e      	sub	sp, #56	; 0x38
 8013cb0:	af00      	add	r7, sp, #0
 8013cb2:	6078      	str	r0, [r7, #4]
=======
 8013c7c:	b580      	push	{r7, lr}
 8013c7e:	b08e      	sub	sp, #56	; 0x38
 8013c80:	af00      	add	r7, sp, #0
 8013c82:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
<<<<<<< Updated upstream
 8013cb4:	687b      	ldr	r3, [r7, #4]
 8013cb6:	685b      	ldr	r3, [r3, #4]
 8013cb8:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8013cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013cbc:	781b      	ldrb	r3, [r3, #0]
 8013cbe:	f003 030f 	and.w	r3, r3, #15
 8013cc2:	b2db      	uxtb	r3, r3
 8013cc4:	009b      	lsls	r3, r3, #2
 8013cc6:	b2db      	uxtb	r3, r3
 8013cc8:	2b14      	cmp	r3, #20
 8013cca:	f040 8167 	bne.w	8013f9c <ip4_reass+0x2f0>
=======
 8013c84:	687b      	ldr	r3, [r7, #4]
 8013c86:	685b      	ldr	r3, [r3, #4]
 8013c88:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8013c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c8c:	781b      	ldrb	r3, [r3, #0]
 8013c8e:	f003 030f 	and.w	r3, r3, #15
 8013c92:	b2db      	uxtb	r3, r3
 8013c94:	009b      	lsls	r3, r3, #2
 8013c96:	b2db      	uxtb	r3, r3
 8013c98:	2b14      	cmp	r3, #20
 8013c9a:	f040 8167 	bne.w	8013f6c <ip4_reass+0x2f0>
>>>>>>> Stashed changes
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
<<<<<<< Updated upstream
 8013cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013cd0:	88db      	ldrh	r3, [r3, #6]
 8013cd2:	b29b      	uxth	r3, r3
 8013cd4:	4618      	mov	r0, r3
 8013cd6:	f7f6 fff8 	bl	800acca <lwip_htons>
 8013cda:	4603      	mov	r3, r0
 8013cdc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013ce0:	b29b      	uxth	r3, r3
 8013ce2:	00db      	lsls	r3, r3, #3
 8013ce4:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8013ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ce8:	885b      	ldrh	r3, [r3, #2]
 8013cea:	b29b      	uxth	r3, r3
 8013cec:	4618      	mov	r0, r3
 8013cee:	f7f6 ffec 	bl	800acca <lwip_htons>
 8013cf2:	4603      	mov	r3, r0
 8013cf4:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8013cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013cf8:	781b      	ldrb	r3, [r3, #0]
 8013cfa:	f003 030f 	and.w	r3, r3, #15
 8013cfe:	b2db      	uxtb	r3, r3
 8013d00:	009b      	lsls	r3, r3, #2
 8013d02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8013d06:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8013d0a:	b29b      	uxth	r3, r3
 8013d0c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8013d0e:	429a      	cmp	r2, r3
 8013d10:	f0c0 8146 	bcc.w	8013fa0 <ip4_reass+0x2f4>
=======
 8013c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ca0:	88db      	ldrh	r3, [r3, #6]
 8013ca2:	b29b      	uxth	r3, r3
 8013ca4:	4618      	mov	r0, r3
 8013ca6:	f7f6 fff8 	bl	800ac9a <lwip_htons>
 8013caa:	4603      	mov	r3, r0
 8013cac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013cb0:	b29b      	uxth	r3, r3
 8013cb2:	00db      	lsls	r3, r3, #3
 8013cb4:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8013cb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013cb8:	885b      	ldrh	r3, [r3, #2]
 8013cba:	b29b      	uxth	r3, r3
 8013cbc:	4618      	mov	r0, r3
 8013cbe:	f7f6 ffec 	bl	800ac9a <lwip_htons>
 8013cc2:	4603      	mov	r3, r0
 8013cc4:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8013cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013cc8:	781b      	ldrb	r3, [r3, #0]
 8013cca:	f003 030f 	and.w	r3, r3, #15
 8013cce:	b2db      	uxtb	r3, r3
 8013cd0:	009b      	lsls	r3, r3, #2
 8013cd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8013cd6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8013cda:	b29b      	uxth	r3, r3
 8013cdc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8013cde:	429a      	cmp	r2, r3
 8013ce0:	f0c0 8146 	bcc.w	8013f70 <ip4_reass+0x2f4>
>>>>>>> Stashed changes
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
<<<<<<< Updated upstream
 8013d14:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8013d18:	b29b      	uxth	r3, r3
 8013d1a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8013d1c:	1ad3      	subs	r3, r2, r3
 8013d1e:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8013d20:	6878      	ldr	r0, [r7, #4]
 8013d22:	f7f8 faed 	bl	800c300 <pbuf_clen>
 8013d26:	4603      	mov	r3, r0
 8013d28:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8013d2a:	4b9f      	ldr	r3, [pc, #636]	; (8013fa8 <ip4_reass+0x2fc>)
 8013d2c:	881b      	ldrh	r3, [r3, #0]
 8013d2e:	461a      	mov	r2, r3
 8013d30:	8c3b      	ldrh	r3, [r7, #32]
 8013d32:	4413      	add	r3, r2
 8013d34:	2b0a      	cmp	r3, #10
 8013d36:	dd10      	ble.n	8013d5a <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8013d38:	8c3b      	ldrh	r3, [r7, #32]
 8013d3a:	4619      	mov	r1, r3
 8013d3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013d3e:	f7ff fd81 	bl	8013844 <ip_reass_remove_oldest_datagram>
 8013d42:	4603      	mov	r3, r0
 8013d44:	2b00      	cmp	r3, #0
 8013d46:	f000 812d 	beq.w	8013fa4 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8013d4a:	4b97      	ldr	r3, [pc, #604]	; (8013fa8 <ip4_reass+0x2fc>)
 8013d4c:	881b      	ldrh	r3, [r3, #0]
 8013d4e:	461a      	mov	r2, r3
 8013d50:	8c3b      	ldrh	r3, [r7, #32]
 8013d52:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8013d54:	2b0a      	cmp	r3, #10
 8013d56:	f300 8125 	bgt.w	8013fa4 <ip4_reass+0x2f8>
=======
 8013ce4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8013ce8:	b29b      	uxth	r3, r3
 8013cea:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8013cec:	1ad3      	subs	r3, r2, r3
 8013cee:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8013cf0:	6878      	ldr	r0, [r7, #4]
 8013cf2:	f7f8 faed 	bl	800c2d0 <pbuf_clen>
 8013cf6:	4603      	mov	r3, r0
 8013cf8:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8013cfa:	4b9f      	ldr	r3, [pc, #636]	; (8013f78 <ip4_reass+0x2fc>)
 8013cfc:	881b      	ldrh	r3, [r3, #0]
 8013cfe:	461a      	mov	r2, r3
 8013d00:	8c3b      	ldrh	r3, [r7, #32]
 8013d02:	4413      	add	r3, r2
 8013d04:	2b0a      	cmp	r3, #10
 8013d06:	dd10      	ble.n	8013d2a <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8013d08:	8c3b      	ldrh	r3, [r7, #32]
 8013d0a:	4619      	mov	r1, r3
 8013d0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013d0e:	f7ff fd81 	bl	8013814 <ip_reass_remove_oldest_datagram>
 8013d12:	4603      	mov	r3, r0
 8013d14:	2b00      	cmp	r3, #0
 8013d16:	f000 812d 	beq.w	8013f74 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8013d1a:	4b97      	ldr	r3, [pc, #604]	; (8013f78 <ip4_reass+0x2fc>)
 8013d1c:	881b      	ldrh	r3, [r3, #0]
 8013d1e:	461a      	mov	r2, r3
 8013d20:	8c3b      	ldrh	r3, [r7, #32]
 8013d22:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8013d24:	2b0a      	cmp	r3, #10
 8013d26:	f300 8125 	bgt.w	8013f74 <ip4_reass+0x2f8>
>>>>>>> Stashed changes
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
<<<<<<< Updated upstream
 8013d5a:	4b94      	ldr	r3, [pc, #592]	; (8013fac <ip4_reass+0x300>)
 8013d5c:	681b      	ldr	r3, [r3, #0]
 8013d5e:	633b      	str	r3, [r7, #48]	; 0x30
 8013d60:	e015      	b.n	8013d8e <ip4_reass+0xe2>
=======
 8013d2a:	4b94      	ldr	r3, [pc, #592]	; (8013f7c <ip4_reass+0x300>)
 8013d2c:	681b      	ldr	r3, [r3, #0]
 8013d2e:	633b      	str	r3, [r7, #48]	; 0x30
 8013d30:	e015      	b.n	8013d5e <ip4_reass+0xe2>
>>>>>>> Stashed changes
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
<<<<<<< Updated upstream
 8013d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d64:	695a      	ldr	r2, [r3, #20]
 8013d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d68:	68db      	ldr	r3, [r3, #12]
 8013d6a:	429a      	cmp	r2, r3
 8013d6c:	d10c      	bne.n	8013d88 <ip4_reass+0xdc>
 8013d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d70:	699a      	ldr	r2, [r3, #24]
 8013d72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d74:	691b      	ldr	r3, [r3, #16]
 8013d76:	429a      	cmp	r2, r3
 8013d78:	d106      	bne.n	8013d88 <ip4_reass+0xdc>
 8013d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d7c:	899a      	ldrh	r2, [r3, #12]
 8013d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d80:	889b      	ldrh	r3, [r3, #4]
 8013d82:	b29b      	uxth	r3, r3
 8013d84:	429a      	cmp	r2, r3
 8013d86:	d006      	beq.n	8013d96 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8013d88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d8a:	681b      	ldr	r3, [r3, #0]
 8013d8c:	633b      	str	r3, [r7, #48]	; 0x30
 8013d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d90:	2b00      	cmp	r3, #0
 8013d92:	d1e6      	bne.n	8013d62 <ip4_reass+0xb6>
 8013d94:	e000      	b.n	8013d98 <ip4_reass+0xec>
=======
 8013d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d34:	695a      	ldr	r2, [r3, #20]
 8013d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d38:	68db      	ldr	r3, [r3, #12]
 8013d3a:	429a      	cmp	r2, r3
 8013d3c:	d10c      	bne.n	8013d58 <ip4_reass+0xdc>
 8013d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d40:	699a      	ldr	r2, [r3, #24]
 8013d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d44:	691b      	ldr	r3, [r3, #16]
 8013d46:	429a      	cmp	r2, r3
 8013d48:	d106      	bne.n	8013d58 <ip4_reass+0xdc>
 8013d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d4c:	899a      	ldrh	r2, [r3, #12]
 8013d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d50:	889b      	ldrh	r3, [r3, #4]
 8013d52:	b29b      	uxth	r3, r3
 8013d54:	429a      	cmp	r2, r3
 8013d56:	d006      	beq.n	8013d66 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8013d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d5a:	681b      	ldr	r3, [r3, #0]
 8013d5c:	633b      	str	r3, [r7, #48]	; 0x30
 8013d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d60:	2b00      	cmp	r3, #0
 8013d62:	d1e6      	bne.n	8013d32 <ip4_reass+0xb6>
 8013d64:	e000      	b.n	8013d68 <ip4_reass+0xec>
>>>>>>> Stashed changes
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
<<<<<<< Updated upstream
 8013d96:	bf00      	nop
=======
 8013d66:	bf00      	nop
>>>>>>> Stashed changes
    }
  }

  if (ipr == NULL) {
<<<<<<< Updated upstream
 8013d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d9a:	2b00      	cmp	r3, #0
 8013d9c:	d109      	bne.n	8013db2 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8013d9e:	8c3b      	ldrh	r3, [r7, #32]
 8013da0:	4619      	mov	r1, r3
 8013da2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013da4:	f7ff fdb0 	bl	8013908 <ip_reass_enqueue_new_datagram>
 8013da8:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8013daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013dac:	2b00      	cmp	r3, #0
 8013dae:	d11c      	bne.n	8013dea <ip4_reass+0x13e>
      goto nullreturn;
 8013db0:	e109      	b.n	8013fc6 <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8013db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013db4:	88db      	ldrh	r3, [r3, #6]
 8013db6:	b29b      	uxth	r3, r3
 8013db8:	4618      	mov	r0, r3
 8013dba:	f7f6 ff86 	bl	800acca <lwip_htons>
 8013dbe:	4603      	mov	r3, r0
 8013dc0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013dc4:	2b00      	cmp	r3, #0
 8013dc6:	d110      	bne.n	8013dea <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8013dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013dca:	89db      	ldrh	r3, [r3, #14]
 8013dcc:	4618      	mov	r0, r3
 8013dce:	f7f6 ff7c 	bl	800acca <lwip_htons>
 8013dd2:	4603      	mov	r3, r0
 8013dd4:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8013dd8:	2b00      	cmp	r3, #0
 8013dda:	d006      	beq.n	8013dea <ip4_reass+0x13e>
=======
 8013d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d6a:	2b00      	cmp	r3, #0
 8013d6c:	d109      	bne.n	8013d82 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8013d6e:	8c3b      	ldrh	r3, [r7, #32]
 8013d70:	4619      	mov	r1, r3
 8013d72:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013d74:	f7ff fdb0 	bl	80138d8 <ip_reass_enqueue_new_datagram>
 8013d78:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8013d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d7c:	2b00      	cmp	r3, #0
 8013d7e:	d11c      	bne.n	8013dba <ip4_reass+0x13e>
      goto nullreturn;
 8013d80:	e109      	b.n	8013f96 <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8013d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d84:	88db      	ldrh	r3, [r3, #6]
 8013d86:	b29b      	uxth	r3, r3
 8013d88:	4618      	mov	r0, r3
 8013d8a:	f7f6 ff86 	bl	800ac9a <lwip_htons>
 8013d8e:	4603      	mov	r3, r0
 8013d90:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013d94:	2b00      	cmp	r3, #0
 8013d96:	d110      	bne.n	8013dba <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8013d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d9a:	89db      	ldrh	r3, [r3, #14]
 8013d9c:	4618      	mov	r0, r3
 8013d9e:	f7f6 ff7c 	bl	800ac9a <lwip_htons>
 8013da2:	4603      	mov	r3, r0
 8013da4:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8013da8:	2b00      	cmp	r3, #0
 8013daa:	d006      	beq.n	8013dba <ip4_reass+0x13e>
>>>>>>> Stashed changes
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
<<<<<<< Updated upstream
 8013ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013dde:	3308      	adds	r3, #8
 8013de0:	2214      	movs	r2, #20
 8013de2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8013de4:	4618      	mov	r0, r3
 8013de6:	f000 fb9d 	bl	8014524 <memcpy>
=======
 8013dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013dae:	3308      	adds	r3, #8
 8013db0:	2214      	movs	r2, #20
 8013db2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8013db4:	4618      	mov	r0, r3
 8013db6:	f000 fb9d 	bl	80144f4 <memcpy>
>>>>>>> Stashed changes

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
<<<<<<< Updated upstream
 8013dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013dec:	88db      	ldrh	r3, [r3, #6]
 8013dee:	b29b      	uxth	r3, r3
 8013df0:	f003 0320 	and.w	r3, r3, #32
 8013df4:	2b00      	cmp	r3, #0
 8013df6:	bf0c      	ite	eq
 8013df8:	2301      	moveq	r3, #1
 8013dfa:	2300      	movne	r3, #0
 8013dfc:	b2db      	uxtb	r3, r3
 8013dfe:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8013e00:	69fb      	ldr	r3, [r7, #28]
 8013e02:	2b00      	cmp	r3, #0
 8013e04:	d00e      	beq.n	8013e24 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8013e06:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8013e08:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013e0a:	4413      	add	r3, r2
 8013e0c:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8013e0e:	8b7a      	ldrh	r2, [r7, #26]
 8013e10:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8013e12:	429a      	cmp	r2, r3
 8013e14:	f0c0 80a0 	bcc.w	8013f58 <ip4_reass+0x2ac>
 8013e18:	8b7b      	ldrh	r3, [r7, #26]
 8013e1a:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8013e1e:	4293      	cmp	r3, r2
 8013e20:	f200 809a 	bhi.w	8013f58 <ip4_reass+0x2ac>
=======
 8013dba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013dbc:	88db      	ldrh	r3, [r3, #6]
 8013dbe:	b29b      	uxth	r3, r3
 8013dc0:	f003 0320 	and.w	r3, r3, #32
 8013dc4:	2b00      	cmp	r3, #0
 8013dc6:	bf0c      	ite	eq
 8013dc8:	2301      	moveq	r3, #1
 8013dca:	2300      	movne	r3, #0
 8013dcc:	b2db      	uxtb	r3, r3
 8013dce:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8013dd0:	69fb      	ldr	r3, [r7, #28]
 8013dd2:	2b00      	cmp	r3, #0
 8013dd4:	d00e      	beq.n	8013df4 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8013dd6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8013dd8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013dda:	4413      	add	r3, r2
 8013ddc:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8013dde:	8b7a      	ldrh	r2, [r7, #26]
 8013de0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8013de2:	429a      	cmp	r2, r3
 8013de4:	f0c0 80a0 	bcc.w	8013f28 <ip4_reass+0x2ac>
 8013de8:	8b7b      	ldrh	r3, [r7, #26]
 8013dea:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8013dee:	4293      	cmp	r3, r2
 8013df0:	f200 809a 	bhi.w	8013f28 <ip4_reass+0x2ac>
>>>>>>> Stashed changes
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
<<<<<<< Updated upstream
 8013e24:	69fa      	ldr	r2, [r7, #28]
 8013e26:	6879      	ldr	r1, [r7, #4]
 8013e28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013e2a:	f7ff fdd5 	bl	80139d8 <ip_reass_chain_frag_into_datagram_and_validate>
 8013e2e:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8013e30:	697b      	ldr	r3, [r7, #20]
 8013e32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013e36:	f000 8091 	beq.w	8013f5c <ip4_reass+0x2b0>
=======
 8013df4:	69fa      	ldr	r2, [r7, #28]
 8013df6:	6879      	ldr	r1, [r7, #4]
 8013df8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013dfa:	f7ff fdd5 	bl	80139a8 <ip_reass_chain_frag_into_datagram_and_validate>
 8013dfe:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8013e00:	697b      	ldr	r3, [r7, #20]
 8013e02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013e06:	f000 8091 	beq.w	8013f2c <ip4_reass+0x2b0>
>>>>>>> Stashed changes
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
<<<<<<< Updated upstream
 8013e3a:	4b5b      	ldr	r3, [pc, #364]	; (8013fa8 <ip4_reass+0x2fc>)
 8013e3c:	881a      	ldrh	r2, [r3, #0]
 8013e3e:	8c3b      	ldrh	r3, [r7, #32]
 8013e40:	4413      	add	r3, r2
 8013e42:	b29a      	uxth	r2, r3
 8013e44:	4b58      	ldr	r3, [pc, #352]	; (8013fa8 <ip4_reass+0x2fc>)
 8013e46:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8013e48:	69fb      	ldr	r3, [r7, #28]
 8013e4a:	2b00      	cmp	r3, #0
 8013e4c:	d00d      	beq.n	8013e6a <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8013e4e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8013e50:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013e52:	4413      	add	r3, r2
 8013e54:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8013e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e58:	8a7a      	ldrh	r2, [r7, #18]
 8013e5a:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8013e5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e5e:	7f9b      	ldrb	r3, [r3, #30]
 8013e60:	f043 0301 	orr.w	r3, r3, #1
 8013e64:	b2da      	uxtb	r2, r3
 8013e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e68:	779a      	strb	r2, [r3, #30]
=======
 8013e0a:	4b5b      	ldr	r3, [pc, #364]	; (8013f78 <ip4_reass+0x2fc>)
 8013e0c:	881a      	ldrh	r2, [r3, #0]
 8013e0e:	8c3b      	ldrh	r3, [r7, #32]
 8013e10:	4413      	add	r3, r2
 8013e12:	b29a      	uxth	r2, r3
 8013e14:	4b58      	ldr	r3, [pc, #352]	; (8013f78 <ip4_reass+0x2fc>)
 8013e16:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8013e18:	69fb      	ldr	r3, [r7, #28]
 8013e1a:	2b00      	cmp	r3, #0
 8013e1c:	d00d      	beq.n	8013e3a <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8013e1e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8013e20:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013e22:	4413      	add	r3, r2
 8013e24:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8013e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e28:	8a7a      	ldrh	r2, [r7, #18]
 8013e2a:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8013e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e2e:	7f9b      	ldrb	r3, [r3, #30]
 8013e30:	f043 0301 	orr.w	r3, r3, #1
 8013e34:	b2da      	uxtb	r2, r3
 8013e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e38:	779a      	strb	r2, [r3, #30]
>>>>>>> Stashed changes
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
<<<<<<< Updated upstream
 8013e6a:	697b      	ldr	r3, [r7, #20]
 8013e6c:	2b01      	cmp	r3, #1
 8013e6e:	d171      	bne.n	8013f54 <ip4_reass+0x2a8>
=======
 8013e3a:	697b      	ldr	r3, [r7, #20]
 8013e3c:	2b01      	cmp	r3, #1
 8013e3e:	d171      	bne.n	8013f24 <ip4_reass+0x2a8>
>>>>>>> Stashed changes
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
<<<<<<< Updated upstream
 8013e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e72:	8b9b      	ldrh	r3, [r3, #28]
 8013e74:	3314      	adds	r3, #20
 8013e76:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8013e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e7a:	685b      	ldr	r3, [r3, #4]
 8013e7c:	685b      	ldr	r3, [r3, #4]
 8013e7e:	681b      	ldr	r3, [r3, #0]
 8013e80:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8013e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e84:	685b      	ldr	r3, [r3, #4]
 8013e86:	685b      	ldr	r3, [r3, #4]
 8013e88:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8013e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e8c:	3308      	adds	r3, #8
 8013e8e:	2214      	movs	r2, #20
 8013e90:	4619      	mov	r1, r3
 8013e92:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013e94:	f000 fb46 	bl	8014524 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8013e98:	8a3b      	ldrh	r3, [r7, #16]
 8013e9a:	4618      	mov	r0, r3
 8013e9c:	f7f6 ff15 	bl	800acca <lwip_htons>
 8013ea0:	4603      	mov	r3, r0
 8013ea2:	461a      	mov	r2, r3
 8013ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ea6:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8013ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013eaa:	2200      	movs	r2, #0
 8013eac:	719a      	strb	r2, [r3, #6]
 8013eae:	2200      	movs	r2, #0
 8013eb0:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8013eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013eb4:	2200      	movs	r2, #0
 8013eb6:	729a      	strb	r2, [r3, #10]
 8013eb8:	2200      	movs	r2, #0
 8013eba:	72da      	strb	r2, [r3, #11]
=======
 8013e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e42:	8b9b      	ldrh	r3, [r3, #28]
 8013e44:	3314      	adds	r3, #20
 8013e46:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8013e48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e4a:	685b      	ldr	r3, [r3, #4]
 8013e4c:	685b      	ldr	r3, [r3, #4]
 8013e4e:	681b      	ldr	r3, [r3, #0]
 8013e50:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8013e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e54:	685b      	ldr	r3, [r3, #4]
 8013e56:	685b      	ldr	r3, [r3, #4]
 8013e58:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8013e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e5c:	3308      	adds	r3, #8
 8013e5e:	2214      	movs	r2, #20
 8013e60:	4619      	mov	r1, r3
 8013e62:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013e64:	f000 fb46 	bl	80144f4 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8013e68:	8a3b      	ldrh	r3, [r7, #16]
 8013e6a:	4618      	mov	r0, r3
 8013e6c:	f7f6 ff15 	bl	800ac9a <lwip_htons>
 8013e70:	4603      	mov	r3, r0
 8013e72:	461a      	mov	r2, r3
 8013e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e76:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8013e78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e7a:	2200      	movs	r2, #0
 8013e7c:	719a      	strb	r2, [r3, #6]
 8013e7e:	2200      	movs	r2, #0
 8013e80:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8013e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e84:	2200      	movs	r2, #0
 8013e86:	729a      	strb	r2, [r3, #10]
 8013e88:	2200      	movs	r2, #0
 8013e8a:	72da      	strb	r2, [r3, #11]
>>>>>>> Stashed changes
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
<<<<<<< Updated upstream
 8013ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ebe:	685b      	ldr	r3, [r3, #4]
 8013ec0:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8013ec2:	e00d      	b.n	8013ee0 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8013ec4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013ec6:	685b      	ldr	r3, [r3, #4]
 8013ec8:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8013eca:	2114      	movs	r1, #20
 8013ecc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8013ece:	f7f8 f909 	bl	800c0e4 <pbuf_remove_header>
      pbuf_cat(p, r);
 8013ed2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8013ed4:	6878      	ldr	r0, [r7, #4]
 8013ed6:	f7f8 fa4d 	bl	800c374 <pbuf_cat>
      r = iprh->next_pbuf;
 8013eda:	68fb      	ldr	r3, [r7, #12]
 8013edc:	681b      	ldr	r3, [r3, #0]
 8013ede:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8013ee0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013ee2:	2b00      	cmp	r3, #0
 8013ee4:	d1ee      	bne.n	8013ec4 <ip4_reass+0x218>
=======
 8013e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e8e:	685b      	ldr	r3, [r3, #4]
 8013e90:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8013e92:	e00d      	b.n	8013eb0 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8013e94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013e96:	685b      	ldr	r3, [r3, #4]
 8013e98:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8013e9a:	2114      	movs	r1, #20
 8013e9c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8013e9e:	f7f8 f909 	bl	800c0b4 <pbuf_remove_header>
      pbuf_cat(p, r);
 8013ea2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8013ea4:	6878      	ldr	r0, [r7, #4]
 8013ea6:	f7f8 fa4d 	bl	800c344 <pbuf_cat>
      r = iprh->next_pbuf;
 8013eaa:	68fb      	ldr	r3, [r7, #12]
 8013eac:	681b      	ldr	r3, [r3, #0]
 8013eae:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8013eb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013eb2:	2b00      	cmp	r3, #0
 8013eb4:	d1ee      	bne.n	8013e94 <ip4_reass+0x218>
>>>>>>> Stashed changes
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
<<<<<<< Updated upstream
 8013ee6:	4b31      	ldr	r3, [pc, #196]	; (8013fac <ip4_reass+0x300>)
 8013ee8:	681b      	ldr	r3, [r3, #0]
 8013eea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013eec:	429a      	cmp	r2, r3
 8013eee:	d102      	bne.n	8013ef6 <ip4_reass+0x24a>
      ipr_prev = NULL;
 8013ef0:	2300      	movs	r3, #0
 8013ef2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013ef4:	e010      	b.n	8013f18 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8013ef6:	4b2d      	ldr	r3, [pc, #180]	; (8013fac <ip4_reass+0x300>)
 8013ef8:	681b      	ldr	r3, [r3, #0]
 8013efa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013efc:	e007      	b.n	8013f0e <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8013efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f00:	681b      	ldr	r3, [r3, #0]
 8013f02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013f04:	429a      	cmp	r2, r3
 8013f06:	d006      	beq.n	8013f16 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8013f08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f0a:	681b      	ldr	r3, [r3, #0]
 8013f0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013f0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f10:	2b00      	cmp	r3, #0
 8013f12:	d1f4      	bne.n	8013efe <ip4_reass+0x252>
 8013f14:	e000      	b.n	8013f18 <ip4_reass+0x26c>
          break;
 8013f16:	bf00      	nop
=======
 8013eb6:	4b31      	ldr	r3, [pc, #196]	; (8013f7c <ip4_reass+0x300>)
 8013eb8:	681b      	ldr	r3, [r3, #0]
 8013eba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013ebc:	429a      	cmp	r2, r3
 8013ebe:	d102      	bne.n	8013ec6 <ip4_reass+0x24a>
      ipr_prev = NULL;
 8013ec0:	2300      	movs	r3, #0
 8013ec2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013ec4:	e010      	b.n	8013ee8 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8013ec6:	4b2d      	ldr	r3, [pc, #180]	; (8013f7c <ip4_reass+0x300>)
 8013ec8:	681b      	ldr	r3, [r3, #0]
 8013eca:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013ecc:	e007      	b.n	8013ede <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8013ece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ed0:	681b      	ldr	r3, [r3, #0]
 8013ed2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013ed4:	429a      	cmp	r2, r3
 8013ed6:	d006      	beq.n	8013ee6 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8013ed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013eda:	681b      	ldr	r3, [r3, #0]
 8013edc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013ede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ee0:	2b00      	cmp	r3, #0
 8013ee2:	d1f4      	bne.n	8013ece <ip4_reass+0x252>
 8013ee4:	e000      	b.n	8013ee8 <ip4_reass+0x26c>
          break;
 8013ee6:	bf00      	nop
>>>>>>> Stashed changes
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
<<<<<<< Updated upstream
 8013f18:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013f1a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013f1c:	f7ff fd2e 	bl	801397c <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8013f20:	6878      	ldr	r0, [r7, #4]
 8013f22:	f7f8 f9ed 	bl	800c300 <pbuf_clen>
 8013f26:	4603      	mov	r3, r0
 8013f28:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8013f2a:	4b1f      	ldr	r3, [pc, #124]	; (8013fa8 <ip4_reass+0x2fc>)
 8013f2c:	881b      	ldrh	r3, [r3, #0]
 8013f2e:	8c3a      	ldrh	r2, [r7, #32]
 8013f30:	429a      	cmp	r2, r3
 8013f32:	d906      	bls.n	8013f42 <ip4_reass+0x296>
 8013f34:	4b1e      	ldr	r3, [pc, #120]	; (8013fb0 <ip4_reass+0x304>)
 8013f36:	f240 229b 	movw	r2, #667	; 0x29b
 8013f3a:	491e      	ldr	r1, [pc, #120]	; (8013fb4 <ip4_reass+0x308>)
 8013f3c:	481e      	ldr	r0, [pc, #120]	; (8013fb8 <ip4_reass+0x30c>)
 8013f3e:	f000 fb21 	bl	8014584 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8013f42:	4b19      	ldr	r3, [pc, #100]	; (8013fa8 <ip4_reass+0x2fc>)
 8013f44:	881a      	ldrh	r2, [r3, #0]
 8013f46:	8c3b      	ldrh	r3, [r7, #32]
 8013f48:	1ad3      	subs	r3, r2, r3
 8013f4a:	b29a      	uxth	r2, r3
 8013f4c:	4b16      	ldr	r3, [pc, #88]	; (8013fa8 <ip4_reass+0x2fc>)
 8013f4e:	801a      	strh	r2, [r3, #0]
=======
 8013ee8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013eea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013eec:	f7ff fd2e 	bl	801394c <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8013ef0:	6878      	ldr	r0, [r7, #4]
 8013ef2:	f7f8 f9ed 	bl	800c2d0 <pbuf_clen>
 8013ef6:	4603      	mov	r3, r0
 8013ef8:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8013efa:	4b1f      	ldr	r3, [pc, #124]	; (8013f78 <ip4_reass+0x2fc>)
 8013efc:	881b      	ldrh	r3, [r3, #0]
 8013efe:	8c3a      	ldrh	r2, [r7, #32]
 8013f00:	429a      	cmp	r2, r3
 8013f02:	d906      	bls.n	8013f12 <ip4_reass+0x296>
 8013f04:	4b1e      	ldr	r3, [pc, #120]	; (8013f80 <ip4_reass+0x304>)
 8013f06:	f240 229b 	movw	r2, #667	; 0x29b
 8013f0a:	491e      	ldr	r1, [pc, #120]	; (8013f84 <ip4_reass+0x308>)
 8013f0c:	481e      	ldr	r0, [pc, #120]	; (8013f88 <ip4_reass+0x30c>)
 8013f0e:	f000 fb21 	bl	8014554 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8013f12:	4b19      	ldr	r3, [pc, #100]	; (8013f78 <ip4_reass+0x2fc>)
 8013f14:	881a      	ldrh	r2, [r3, #0]
 8013f16:	8c3b      	ldrh	r3, [r7, #32]
 8013f18:	1ad3      	subs	r3, r2, r3
 8013f1a:	b29a      	uxth	r2, r3
 8013f1c:	4b16      	ldr	r3, [pc, #88]	; (8013f78 <ip4_reass+0x2fc>)
 8013f1e:	801a      	strh	r2, [r3, #0]
>>>>>>> Stashed changes

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
<<<<<<< Updated upstream
 8013f50:	687b      	ldr	r3, [r7, #4]
 8013f52:	e03c      	b.n	8013fce <ip4_reass+0x322>
=======
 8013f20:	687b      	ldr	r3, [r7, #4]
 8013f22:	e03c      	b.n	8013f9e <ip4_reass+0x322>
>>>>>>> Stashed changes
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
<<<<<<< Updated upstream
 8013f54:	2300      	movs	r3, #0
 8013f56:	e03a      	b.n	8013fce <ip4_reass+0x322>
      goto nullreturn_ipr;
 8013f58:	bf00      	nop
 8013f5a:	e000      	b.n	8013f5e <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 8013f5c:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8013f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f60:	2b00      	cmp	r3, #0
 8013f62:	d106      	bne.n	8013f72 <ip4_reass+0x2c6>
 8013f64:	4b12      	ldr	r3, [pc, #72]	; (8013fb0 <ip4_reass+0x304>)
 8013f66:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8013f6a:	4914      	ldr	r1, [pc, #80]	; (8013fbc <ip4_reass+0x310>)
 8013f6c:	4812      	ldr	r0, [pc, #72]	; (8013fb8 <ip4_reass+0x30c>)
 8013f6e:	f000 fb09 	bl	8014584 <iprintf>
  if (ipr->p == NULL) {
 8013f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f74:	685b      	ldr	r3, [r3, #4]
 8013f76:	2b00      	cmp	r3, #0
 8013f78:	d124      	bne.n	8013fc4 <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8013f7a:	4b0c      	ldr	r3, [pc, #48]	; (8013fac <ip4_reass+0x300>)
 8013f7c:	681b      	ldr	r3, [r3, #0]
 8013f7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013f80:	429a      	cmp	r2, r3
 8013f82:	d006      	beq.n	8013f92 <ip4_reass+0x2e6>
 8013f84:	4b0a      	ldr	r3, [pc, #40]	; (8013fb0 <ip4_reass+0x304>)
 8013f86:	f240 22ab 	movw	r2, #683	; 0x2ab
 8013f8a:	490d      	ldr	r1, [pc, #52]	; (8013fc0 <ip4_reass+0x314>)
 8013f8c:	480a      	ldr	r0, [pc, #40]	; (8013fb8 <ip4_reass+0x30c>)
 8013f8e:	f000 faf9 	bl	8014584 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8013f92:	2100      	movs	r1, #0
 8013f94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013f96:	f7ff fcf1 	bl	801397c <ip_reass_dequeue_datagram>
 8013f9a:	e014      	b.n	8013fc6 <ip4_reass+0x31a>
    goto nullreturn;
 8013f9c:	bf00      	nop
 8013f9e:	e012      	b.n	8013fc6 <ip4_reass+0x31a>
    goto nullreturn;
 8013fa0:	bf00      	nop
 8013fa2:	e010      	b.n	8013fc6 <ip4_reass+0x31a>
      goto nullreturn;
 8013fa4:	bf00      	nop
 8013fa6:	e00e      	b.n	8013fc6 <ip4_reass+0x31a>
 8013fa8:	20000220 	.word	0x20000220
 8013fac:	2000021c 	.word	0x2000021c
 8013fb0:	08018080 	.word	0x08018080
 8013fb4:	080181f0 	.word	0x080181f0
 8013fb8:	080180c8 	.word	0x080180c8
 8013fbc:	0801820c 	.word	0x0801820c
 8013fc0:	08018218 	.word	0x08018218
  }

nullreturn:
 8013fc4:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8013fc6:	6878      	ldr	r0, [r7, #4]
 8013fc8:	f7f8 f912 	bl	800c1f0 <pbuf_free>
  return NULL;
 8013fcc:	2300      	movs	r3, #0
}
 8013fce:	4618      	mov	r0, r3
 8013fd0:	3738      	adds	r7, #56	; 0x38
 8013fd2:	46bd      	mov	sp, r7
 8013fd4:	bd80      	pop	{r7, pc}
 8013fd6:	bf00      	nop

08013fd8 <ip_frag_alloc_pbuf_custom_ref>:
=======
 8013f24:	2300      	movs	r3, #0
 8013f26:	e03a      	b.n	8013f9e <ip4_reass+0x322>
      goto nullreturn_ipr;
 8013f28:	bf00      	nop
 8013f2a:	e000      	b.n	8013f2e <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 8013f2c:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8013f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f30:	2b00      	cmp	r3, #0
 8013f32:	d106      	bne.n	8013f42 <ip4_reass+0x2c6>
 8013f34:	4b12      	ldr	r3, [pc, #72]	; (8013f80 <ip4_reass+0x304>)
 8013f36:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8013f3a:	4914      	ldr	r1, [pc, #80]	; (8013f8c <ip4_reass+0x310>)
 8013f3c:	4812      	ldr	r0, [pc, #72]	; (8013f88 <ip4_reass+0x30c>)
 8013f3e:	f000 fb09 	bl	8014554 <iprintf>
  if (ipr->p == NULL) {
 8013f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f44:	685b      	ldr	r3, [r3, #4]
 8013f46:	2b00      	cmp	r3, #0
 8013f48:	d124      	bne.n	8013f94 <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8013f4a:	4b0c      	ldr	r3, [pc, #48]	; (8013f7c <ip4_reass+0x300>)
 8013f4c:	681b      	ldr	r3, [r3, #0]
 8013f4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013f50:	429a      	cmp	r2, r3
 8013f52:	d006      	beq.n	8013f62 <ip4_reass+0x2e6>
 8013f54:	4b0a      	ldr	r3, [pc, #40]	; (8013f80 <ip4_reass+0x304>)
 8013f56:	f240 22ab 	movw	r2, #683	; 0x2ab
 8013f5a:	490d      	ldr	r1, [pc, #52]	; (8013f90 <ip4_reass+0x314>)
 8013f5c:	480a      	ldr	r0, [pc, #40]	; (8013f88 <ip4_reass+0x30c>)
 8013f5e:	f000 faf9 	bl	8014554 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8013f62:	2100      	movs	r1, #0
 8013f64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013f66:	f7ff fcf1 	bl	801394c <ip_reass_dequeue_datagram>
 8013f6a:	e014      	b.n	8013f96 <ip4_reass+0x31a>
    goto nullreturn;
 8013f6c:	bf00      	nop
 8013f6e:	e012      	b.n	8013f96 <ip4_reass+0x31a>
    goto nullreturn;
 8013f70:	bf00      	nop
 8013f72:	e010      	b.n	8013f96 <ip4_reass+0x31a>
      goto nullreturn;
 8013f74:	bf00      	nop
 8013f76:	e00e      	b.n	8013f96 <ip4_reass+0x31a>
 8013f78:	20000220 	.word	0x20000220
 8013f7c:	2000021c 	.word	0x2000021c
 8013f80:	08018064 	.word	0x08018064
 8013f84:	080181d4 	.word	0x080181d4
 8013f88:	080180ac 	.word	0x080180ac
 8013f8c:	080181f0 	.word	0x080181f0
 8013f90:	080181fc 	.word	0x080181fc
  }

nullreturn:
 8013f94:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8013f96:	6878      	ldr	r0, [r7, #4]
 8013f98:	f7f8 f912 	bl	800c1c0 <pbuf_free>
  return NULL;
 8013f9c:	2300      	movs	r3, #0
}
 8013f9e:	4618      	mov	r0, r3
 8013fa0:	3738      	adds	r7, #56	; 0x38
 8013fa2:	46bd      	mov	sp, r7
 8013fa4:	bd80      	pop	{r7, pc}
 8013fa6:	bf00      	nop

08013fa8 <ip_frag_alloc_pbuf_custom_ref>:
>>>>>>> Stashed changes
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
<<<<<<< Updated upstream
 8013fd8:	b580      	push	{r7, lr}
 8013fda:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8013fdc:	2005      	movs	r0, #5
 8013fde:	f7f7 fac9 	bl	800b574 <memp_malloc>
 8013fe2:	4603      	mov	r3, r0
}
 8013fe4:	4618      	mov	r0, r3
 8013fe6:	bd80      	pop	{r7, pc}

08013fe8 <ip_frag_free_pbuf_custom_ref>:
=======
 8013fa8:	b580      	push	{r7, lr}
 8013faa:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8013fac:	2005      	movs	r0, #5
 8013fae:	f7f7 fac9 	bl	800b544 <memp_malloc>
 8013fb2:	4603      	mov	r3, r0
}
 8013fb4:	4618      	mov	r0, r3
 8013fb6:	bd80      	pop	{r7, pc}

08013fb8 <ip_frag_free_pbuf_custom_ref>:
>>>>>>> Stashed changes

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
<<<<<<< Updated upstream
 8013fe8:	b580      	push	{r7, lr}
 8013fea:	b082      	sub	sp, #8
 8013fec:	af00      	add	r7, sp, #0
 8013fee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8013ff0:	687b      	ldr	r3, [r7, #4]
 8013ff2:	2b00      	cmp	r3, #0
 8013ff4:	d106      	bne.n	8014004 <ip_frag_free_pbuf_custom_ref+0x1c>
 8013ff6:	4b07      	ldr	r3, [pc, #28]	; (8014014 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8013ff8:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8013ffc:	4906      	ldr	r1, [pc, #24]	; (8014018 <ip_frag_free_pbuf_custom_ref+0x30>)
 8013ffe:	4807      	ldr	r0, [pc, #28]	; (801401c <ip_frag_free_pbuf_custom_ref+0x34>)
 8014000:	f000 fac0 	bl	8014584 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8014004:	6879      	ldr	r1, [r7, #4]
 8014006:	2005      	movs	r0, #5
 8014008:	f7f7 fb00 	bl	800b60c <memp_free>
}
 801400c:	bf00      	nop
 801400e:	3708      	adds	r7, #8
 8014010:	46bd      	mov	sp, r7
 8014012:	bd80      	pop	{r7, pc}
 8014014:	08018080 	.word	0x08018080
 8014018:	08018238 	.word	0x08018238
 801401c:	080180c8 	.word	0x080180c8

08014020 <ipfrag_free_pbuf_custom>:
=======
 8013fb8:	b580      	push	{r7, lr}
 8013fba:	b082      	sub	sp, #8
 8013fbc:	af00      	add	r7, sp, #0
 8013fbe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8013fc0:	687b      	ldr	r3, [r7, #4]
 8013fc2:	2b00      	cmp	r3, #0
 8013fc4:	d106      	bne.n	8013fd4 <ip_frag_free_pbuf_custom_ref+0x1c>
 8013fc6:	4b07      	ldr	r3, [pc, #28]	; (8013fe4 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8013fc8:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8013fcc:	4906      	ldr	r1, [pc, #24]	; (8013fe8 <ip_frag_free_pbuf_custom_ref+0x30>)
 8013fce:	4807      	ldr	r0, [pc, #28]	; (8013fec <ip_frag_free_pbuf_custom_ref+0x34>)
 8013fd0:	f000 fac0 	bl	8014554 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8013fd4:	6879      	ldr	r1, [r7, #4]
 8013fd6:	2005      	movs	r0, #5
 8013fd8:	f7f7 fb00 	bl	800b5dc <memp_free>
}
 8013fdc:	bf00      	nop
 8013fde:	3708      	adds	r7, #8
 8013fe0:	46bd      	mov	sp, r7
 8013fe2:	bd80      	pop	{r7, pc}
 8013fe4:	08018064 	.word	0x08018064
 8013fe8:	0801821c 	.word	0x0801821c
 8013fec:	080180ac 	.word	0x080180ac

08013ff0 <ipfrag_free_pbuf_custom>:
>>>>>>> Stashed changes

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
<<<<<<< Updated upstream
 8014020:	b580      	push	{r7, lr}
 8014022:	b084      	sub	sp, #16
 8014024:	af00      	add	r7, sp, #0
 8014026:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8014028:	687b      	ldr	r3, [r7, #4]
 801402a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801402c:	68fb      	ldr	r3, [r7, #12]
 801402e:	2b00      	cmp	r3, #0
 8014030:	d106      	bne.n	8014040 <ipfrag_free_pbuf_custom+0x20>
 8014032:	4b11      	ldr	r3, [pc, #68]	; (8014078 <ipfrag_free_pbuf_custom+0x58>)
 8014034:	f240 22ce 	movw	r2, #718	; 0x2ce
 8014038:	4910      	ldr	r1, [pc, #64]	; (801407c <ipfrag_free_pbuf_custom+0x5c>)
 801403a:	4811      	ldr	r0, [pc, #68]	; (8014080 <ipfrag_free_pbuf_custom+0x60>)
 801403c:	f000 faa2 	bl	8014584 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8014040:	68fa      	ldr	r2, [r7, #12]
 8014042:	687b      	ldr	r3, [r7, #4]
 8014044:	429a      	cmp	r2, r3
 8014046:	d006      	beq.n	8014056 <ipfrag_free_pbuf_custom+0x36>
 8014048:	4b0b      	ldr	r3, [pc, #44]	; (8014078 <ipfrag_free_pbuf_custom+0x58>)
 801404a:	f240 22cf 	movw	r2, #719	; 0x2cf
 801404e:	490d      	ldr	r1, [pc, #52]	; (8014084 <ipfrag_free_pbuf_custom+0x64>)
 8014050:	480b      	ldr	r0, [pc, #44]	; (8014080 <ipfrag_free_pbuf_custom+0x60>)
 8014052:	f000 fa97 	bl	8014584 <iprintf>
  if (pcr->original != NULL) {
 8014056:	68fb      	ldr	r3, [r7, #12]
 8014058:	695b      	ldr	r3, [r3, #20]
 801405a:	2b00      	cmp	r3, #0
 801405c:	d004      	beq.n	8014068 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801405e:	68fb      	ldr	r3, [r7, #12]
 8014060:	695b      	ldr	r3, [r3, #20]
 8014062:	4618      	mov	r0, r3
 8014064:	f7f8 f8c4 	bl	800c1f0 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8014068:	68f8      	ldr	r0, [r7, #12]
 801406a:	f7ff ffbd 	bl	8013fe8 <ip_frag_free_pbuf_custom_ref>
}
 801406e:	bf00      	nop
 8014070:	3710      	adds	r7, #16
 8014072:	46bd      	mov	sp, r7
 8014074:	bd80      	pop	{r7, pc}
 8014076:	bf00      	nop
 8014078:	08018080 	.word	0x08018080
 801407c:	08018244 	.word	0x08018244
 8014080:	080180c8 	.word	0x080180c8
 8014084:	08018250 	.word	0x08018250

08014088 <ip4_frag>:
=======
 8013ff0:	b580      	push	{r7, lr}
 8013ff2:	b084      	sub	sp, #16
 8013ff4:	af00      	add	r7, sp, #0
 8013ff6:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8013ff8:	687b      	ldr	r3, [r7, #4]
 8013ffa:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8013ffc:	68fb      	ldr	r3, [r7, #12]
 8013ffe:	2b00      	cmp	r3, #0
 8014000:	d106      	bne.n	8014010 <ipfrag_free_pbuf_custom+0x20>
 8014002:	4b11      	ldr	r3, [pc, #68]	; (8014048 <ipfrag_free_pbuf_custom+0x58>)
 8014004:	f240 22ce 	movw	r2, #718	; 0x2ce
 8014008:	4910      	ldr	r1, [pc, #64]	; (801404c <ipfrag_free_pbuf_custom+0x5c>)
 801400a:	4811      	ldr	r0, [pc, #68]	; (8014050 <ipfrag_free_pbuf_custom+0x60>)
 801400c:	f000 faa2 	bl	8014554 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8014010:	68fa      	ldr	r2, [r7, #12]
 8014012:	687b      	ldr	r3, [r7, #4]
 8014014:	429a      	cmp	r2, r3
 8014016:	d006      	beq.n	8014026 <ipfrag_free_pbuf_custom+0x36>
 8014018:	4b0b      	ldr	r3, [pc, #44]	; (8014048 <ipfrag_free_pbuf_custom+0x58>)
 801401a:	f240 22cf 	movw	r2, #719	; 0x2cf
 801401e:	490d      	ldr	r1, [pc, #52]	; (8014054 <ipfrag_free_pbuf_custom+0x64>)
 8014020:	480b      	ldr	r0, [pc, #44]	; (8014050 <ipfrag_free_pbuf_custom+0x60>)
 8014022:	f000 fa97 	bl	8014554 <iprintf>
  if (pcr->original != NULL) {
 8014026:	68fb      	ldr	r3, [r7, #12]
 8014028:	695b      	ldr	r3, [r3, #20]
 801402a:	2b00      	cmp	r3, #0
 801402c:	d004      	beq.n	8014038 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801402e:	68fb      	ldr	r3, [r7, #12]
 8014030:	695b      	ldr	r3, [r3, #20]
 8014032:	4618      	mov	r0, r3
 8014034:	f7f8 f8c4 	bl	800c1c0 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8014038:	68f8      	ldr	r0, [r7, #12]
 801403a:	f7ff ffbd 	bl	8013fb8 <ip_frag_free_pbuf_custom_ref>
}
 801403e:	bf00      	nop
 8014040:	3710      	adds	r7, #16
 8014042:	46bd      	mov	sp, r7
 8014044:	bd80      	pop	{r7, pc}
 8014046:	bf00      	nop
 8014048:	08018064 	.word	0x08018064
 801404c:	08018228 	.word	0x08018228
 8014050:	080180ac 	.word	0x080180ac
 8014054:	08018234 	.word	0x08018234

08014058 <ip4_frag>:
>>>>>>> Stashed changes
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
<<<<<<< Updated upstream
 8014088:	b580      	push	{r7, lr}
 801408a:	b094      	sub	sp, #80	; 0x50
 801408c:	af02      	add	r7, sp, #8
 801408e:	60f8      	str	r0, [r7, #12]
 8014090:	60b9      	str	r1, [r7, #8]
 8014092:	607a      	str	r2, [r7, #4]
=======
 8014058:	b580      	push	{r7, lr}
 801405a:	b094      	sub	sp, #80	; 0x50
 801405c:	af02      	add	r7, sp, #8
 801405e:	60f8      	str	r0, [r7, #12]
 8014060:	60b9      	str	r1, [r7, #8]
 8014062:	607a      	str	r2, [r7, #4]
>>>>>>> Stashed changes
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
<<<<<<< Updated upstream
 8014094:	2300      	movs	r3, #0
 8014096:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
=======
 8014064:	2300      	movs	r3, #0
 8014066:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
>>>>>>> Stashed changes
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
<<<<<<< Updated upstream
 801409a:	68bb      	ldr	r3, [r7, #8]
 801409c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801409e:	3b14      	subs	r3, #20
 80140a0:	2b00      	cmp	r3, #0
 80140a2:	da00      	bge.n	80140a6 <ip4_frag+0x1e>
 80140a4:	3307      	adds	r3, #7
 80140a6:	10db      	asrs	r3, r3, #3
 80140a8:	877b      	strh	r3, [r7, #58]	; 0x3a
=======
 801406a:	68bb      	ldr	r3, [r7, #8]
 801406c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801406e:	3b14      	subs	r3, #20
 8014070:	2b00      	cmp	r3, #0
 8014072:	da00      	bge.n	8014076 <ip4_frag+0x1e>
 8014074:	3307      	adds	r3, #7
 8014076:	10db      	asrs	r3, r3, #3
 8014078:	877b      	strh	r3, [r7, #58]	; 0x3a
>>>>>>> Stashed changes
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
<<<<<<< Updated upstream
 80140aa:	2314      	movs	r3, #20
 80140ac:	87fb      	strh	r3, [r7, #62]	; 0x3e
=======
 801407a:	2314      	movs	r3, #20
 801407c:	87fb      	strh	r3, [r7, #62]	; 0x3e
>>>>>>> Stashed changes
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
<<<<<<< Updated upstream
 80140ae:	68fb      	ldr	r3, [r7, #12]
 80140b0:	685b      	ldr	r3, [r3, #4]
 80140b2:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 80140b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80140b6:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 80140b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80140ba:	781b      	ldrb	r3, [r3, #0]
 80140bc:	f003 030f 	and.w	r3, r3, #15
 80140c0:	b2db      	uxtb	r3, r3
 80140c2:	009b      	lsls	r3, r3, #2
 80140c4:	b2db      	uxtb	r3, r3
 80140c6:	2b14      	cmp	r3, #20
 80140c8:	d002      	beq.n	80140d0 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 80140ca:	f06f 0305 	mvn.w	r3, #5
 80140ce:	e110      	b.n	80142f2 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 80140d0:	68fb      	ldr	r3, [r7, #12]
 80140d2:	895b      	ldrh	r3, [r3, #10]
 80140d4:	2b13      	cmp	r3, #19
 80140d6:	d809      	bhi.n	80140ec <ip4_frag+0x64>
 80140d8:	4b88      	ldr	r3, [pc, #544]	; (80142fc <ip4_frag+0x274>)
 80140da:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 80140de:	4988      	ldr	r1, [pc, #544]	; (8014300 <ip4_frag+0x278>)
 80140e0:	4888      	ldr	r0, [pc, #544]	; (8014304 <ip4_frag+0x27c>)
 80140e2:	f000 fa4f 	bl	8014584 <iprintf>
 80140e6:	f06f 0305 	mvn.w	r3, #5
 80140ea:	e102      	b.n	80142f2 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80140ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80140ee:	88db      	ldrh	r3, [r3, #6]
 80140f0:	b29b      	uxth	r3, r3
 80140f2:	4618      	mov	r0, r3
 80140f4:	f7f6 fde9 	bl	800acca <lwip_htons>
 80140f8:	4603      	mov	r3, r0
 80140fa:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 80140fc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80140fe:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014102:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8014106:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8014108:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801410c:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801410e:	68fb      	ldr	r3, [r7, #12]
 8014110:	891b      	ldrh	r3, [r3, #8]
 8014112:	3b14      	subs	r3, #20
 8014114:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8014118:	e0e1      	b.n	80142de <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801411a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801411c:	00db      	lsls	r3, r3, #3
 801411e:	b29b      	uxth	r3, r3
 8014120:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8014124:	4293      	cmp	r3, r2
 8014126:	bf28      	it	cs
 8014128:	4613      	movcs	r3, r2
 801412a:	857b      	strh	r3, [r7, #42]	; 0x2a
=======
 801407e:	68fb      	ldr	r3, [r7, #12]
 8014080:	685b      	ldr	r3, [r3, #4]
 8014082:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8014084:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014086:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8014088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801408a:	781b      	ldrb	r3, [r3, #0]
 801408c:	f003 030f 	and.w	r3, r3, #15
 8014090:	b2db      	uxtb	r3, r3
 8014092:	009b      	lsls	r3, r3, #2
 8014094:	b2db      	uxtb	r3, r3
 8014096:	2b14      	cmp	r3, #20
 8014098:	d002      	beq.n	80140a0 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801409a:	f06f 0305 	mvn.w	r3, #5
 801409e:	e110      	b.n	80142c2 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 80140a0:	68fb      	ldr	r3, [r7, #12]
 80140a2:	895b      	ldrh	r3, [r3, #10]
 80140a4:	2b13      	cmp	r3, #19
 80140a6:	d809      	bhi.n	80140bc <ip4_frag+0x64>
 80140a8:	4b88      	ldr	r3, [pc, #544]	; (80142cc <ip4_frag+0x274>)
 80140aa:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 80140ae:	4988      	ldr	r1, [pc, #544]	; (80142d0 <ip4_frag+0x278>)
 80140b0:	4888      	ldr	r0, [pc, #544]	; (80142d4 <ip4_frag+0x27c>)
 80140b2:	f000 fa4f 	bl	8014554 <iprintf>
 80140b6:	f06f 0305 	mvn.w	r3, #5
 80140ba:	e102      	b.n	80142c2 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80140bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80140be:	88db      	ldrh	r3, [r3, #6]
 80140c0:	b29b      	uxth	r3, r3
 80140c2:	4618      	mov	r0, r3
 80140c4:	f7f6 fde9 	bl	800ac9a <lwip_htons>
 80140c8:	4603      	mov	r3, r0
 80140ca:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 80140cc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80140ce:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80140d2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 80140d6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80140d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80140dc:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 80140de:	68fb      	ldr	r3, [r7, #12]
 80140e0:	891b      	ldrh	r3, [r3, #8]
 80140e2:	3b14      	subs	r3, #20
 80140e4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 80140e8:	e0e1      	b.n	80142ae <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 80140ea:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80140ec:	00db      	lsls	r3, r3, #3
 80140ee:	b29b      	uxth	r3, r3
 80140f0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80140f4:	4293      	cmp	r3, r2
 80140f6:	bf28      	it	cs
 80140f8:	4613      	movcs	r3, r2
 80140fa:	857b      	strh	r3, [r7, #42]	; 0x2a
>>>>>>> Stashed changes
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
<<<<<<< Updated upstream
 801412c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014130:	2114      	movs	r1, #20
 8014132:	200e      	movs	r0, #14
 8014134:	f7f7 fd78 	bl	800bc28 <pbuf_alloc>
 8014138:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 801413a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801413c:	2b00      	cmp	r3, #0
 801413e:	f000 80d5 	beq.w	80142ec <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8014142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014144:	895b      	ldrh	r3, [r3, #10]
 8014146:	2b13      	cmp	r3, #19
 8014148:	d806      	bhi.n	8014158 <ip4_frag+0xd0>
 801414a:	4b6c      	ldr	r3, [pc, #432]	; (80142fc <ip4_frag+0x274>)
 801414c:	f44f 7249 	mov.w	r2, #804	; 0x324
 8014150:	496d      	ldr	r1, [pc, #436]	; (8014308 <ip4_frag+0x280>)
 8014152:	486c      	ldr	r0, [pc, #432]	; (8014304 <ip4_frag+0x27c>)
 8014154:	f000 fa16 	bl	8014584 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8014158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801415a:	685b      	ldr	r3, [r3, #4]
 801415c:	2214      	movs	r2, #20
 801415e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8014160:	4618      	mov	r0, r3
 8014162:	f000 f9df 	bl	8014524 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8014166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014168:	685b      	ldr	r3, [r3, #4]
 801416a:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 801416c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801416e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8014172:	e064      	b.n	801423e <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8014174:	68fb      	ldr	r3, [r7, #12]
 8014176:	895a      	ldrh	r2, [r3, #10]
 8014178:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801417a:	1ad3      	subs	r3, r2, r3
 801417c:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801417e:	68fb      	ldr	r3, [r7, #12]
 8014180:	895b      	ldrh	r3, [r3, #10]
 8014182:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8014184:	429a      	cmp	r2, r3
 8014186:	d906      	bls.n	8014196 <ip4_frag+0x10e>
 8014188:	4b5c      	ldr	r3, [pc, #368]	; (80142fc <ip4_frag+0x274>)
 801418a:	f240 322d 	movw	r2, #813	; 0x32d
 801418e:	495f      	ldr	r1, [pc, #380]	; (801430c <ip4_frag+0x284>)
 8014190:	485c      	ldr	r0, [pc, #368]	; (8014304 <ip4_frag+0x27c>)
 8014192:	f000 f9f7 	bl	8014584 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8014196:	8bfa      	ldrh	r2, [r7, #30]
 8014198:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801419c:	4293      	cmp	r3, r2
 801419e:	bf28      	it	cs
 80141a0:	4613      	movcs	r3, r2
 80141a2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 80141a6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80141aa:	2b00      	cmp	r3, #0
 80141ac:	d105      	bne.n	80141ba <ip4_frag+0x132>
        poff = 0;
 80141ae:	2300      	movs	r3, #0
 80141b0:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80141b2:	68fb      	ldr	r3, [r7, #12]
 80141b4:	681b      	ldr	r3, [r3, #0]
 80141b6:	60fb      	str	r3, [r7, #12]
        continue;
 80141b8:	e041      	b.n	801423e <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 80141ba:	f7ff ff0d 	bl	8013fd8 <ip_frag_alloc_pbuf_custom_ref>
 80141be:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 80141c0:	69bb      	ldr	r3, [r7, #24]
 80141c2:	2b00      	cmp	r3, #0
 80141c4:	d103      	bne.n	80141ce <ip4_frag+0x146>
        pbuf_free(rambuf);
 80141c6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80141c8:	f7f8 f812 	bl	800c1f0 <pbuf_free>
        goto memerr;
 80141cc:	e08f      	b.n	80142ee <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80141ce:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 80141d0:	68fb      	ldr	r3, [r7, #12]
 80141d2:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80141d4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80141d6:	4413      	add	r3, r2
 80141d8:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 80141dc:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80141e0:	9201      	str	r2, [sp, #4]
 80141e2:	9300      	str	r3, [sp, #0]
 80141e4:	4603      	mov	r3, r0
 80141e6:	2241      	movs	r2, #65	; 0x41
 80141e8:	2000      	movs	r0, #0
 80141ea:	f7f7 fe47 	bl	800be7c <pbuf_alloced_custom>
 80141ee:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 80141f0:	697b      	ldr	r3, [r7, #20]
 80141f2:	2b00      	cmp	r3, #0
 80141f4:	d106      	bne.n	8014204 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 80141f6:	69b8      	ldr	r0, [r7, #24]
 80141f8:	f7ff fef6 	bl	8013fe8 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 80141fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80141fe:	f7f7 fff7 	bl	800c1f0 <pbuf_free>
        goto memerr;
 8014202:	e074      	b.n	80142ee <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8014204:	68f8      	ldr	r0, [r7, #12]
 8014206:	f7f8 f893 	bl	800c330 <pbuf_ref>
      pcr->original = p;
 801420a:	69bb      	ldr	r3, [r7, #24]
 801420c:	68fa      	ldr	r2, [r7, #12]
 801420e:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8014210:	69bb      	ldr	r3, [r7, #24]
 8014212:	4a3f      	ldr	r2, [pc, #252]	; (8014310 <ip4_frag+0x288>)
 8014214:	611a      	str	r2, [r3, #16]
=======
 80140fc:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014100:	2114      	movs	r1, #20
 8014102:	200e      	movs	r0, #14
 8014104:	f7f7 fd78 	bl	800bbf8 <pbuf_alloc>
 8014108:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 801410a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801410c:	2b00      	cmp	r3, #0
 801410e:	f000 80d5 	beq.w	80142bc <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8014112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014114:	895b      	ldrh	r3, [r3, #10]
 8014116:	2b13      	cmp	r3, #19
 8014118:	d806      	bhi.n	8014128 <ip4_frag+0xd0>
 801411a:	4b6c      	ldr	r3, [pc, #432]	; (80142cc <ip4_frag+0x274>)
 801411c:	f44f 7249 	mov.w	r2, #804	; 0x324
 8014120:	496d      	ldr	r1, [pc, #436]	; (80142d8 <ip4_frag+0x280>)
 8014122:	486c      	ldr	r0, [pc, #432]	; (80142d4 <ip4_frag+0x27c>)
 8014124:	f000 fa16 	bl	8014554 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8014128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801412a:	685b      	ldr	r3, [r3, #4]
 801412c:	2214      	movs	r2, #20
 801412e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8014130:	4618      	mov	r0, r3
 8014132:	f000 f9df 	bl	80144f4 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8014136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014138:	685b      	ldr	r3, [r3, #4]
 801413a:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 801413c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801413e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8014142:	e064      	b.n	801420e <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8014144:	68fb      	ldr	r3, [r7, #12]
 8014146:	895a      	ldrh	r2, [r3, #10]
 8014148:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801414a:	1ad3      	subs	r3, r2, r3
 801414c:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801414e:	68fb      	ldr	r3, [r7, #12]
 8014150:	895b      	ldrh	r3, [r3, #10]
 8014152:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8014154:	429a      	cmp	r2, r3
 8014156:	d906      	bls.n	8014166 <ip4_frag+0x10e>
 8014158:	4b5c      	ldr	r3, [pc, #368]	; (80142cc <ip4_frag+0x274>)
 801415a:	f240 322d 	movw	r2, #813	; 0x32d
 801415e:	495f      	ldr	r1, [pc, #380]	; (80142dc <ip4_frag+0x284>)
 8014160:	485c      	ldr	r0, [pc, #368]	; (80142d4 <ip4_frag+0x27c>)
 8014162:	f000 f9f7 	bl	8014554 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8014166:	8bfa      	ldrh	r2, [r7, #30]
 8014168:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801416c:	4293      	cmp	r3, r2
 801416e:	bf28      	it	cs
 8014170:	4613      	movcs	r3, r2
 8014172:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8014176:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801417a:	2b00      	cmp	r3, #0
 801417c:	d105      	bne.n	801418a <ip4_frag+0x132>
        poff = 0;
 801417e:	2300      	movs	r3, #0
 8014180:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8014182:	68fb      	ldr	r3, [r7, #12]
 8014184:	681b      	ldr	r3, [r3, #0]
 8014186:	60fb      	str	r3, [r7, #12]
        continue;
 8014188:	e041      	b.n	801420e <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801418a:	f7ff ff0d 	bl	8013fa8 <ip_frag_alloc_pbuf_custom_ref>
 801418e:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8014190:	69bb      	ldr	r3, [r7, #24]
 8014192:	2b00      	cmp	r3, #0
 8014194:	d103      	bne.n	801419e <ip4_frag+0x146>
        pbuf_free(rambuf);
 8014196:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014198:	f7f8 f812 	bl	800c1c0 <pbuf_free>
        goto memerr;
 801419c:	e08f      	b.n	80142be <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801419e:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 80141a0:	68fb      	ldr	r3, [r7, #12]
 80141a2:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80141a4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80141a6:	4413      	add	r3, r2
 80141a8:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 80141ac:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80141b0:	9201      	str	r2, [sp, #4]
 80141b2:	9300      	str	r3, [sp, #0]
 80141b4:	4603      	mov	r3, r0
 80141b6:	2241      	movs	r2, #65	; 0x41
 80141b8:	2000      	movs	r0, #0
 80141ba:	f7f7 fe47 	bl	800be4c <pbuf_alloced_custom>
 80141be:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 80141c0:	697b      	ldr	r3, [r7, #20]
 80141c2:	2b00      	cmp	r3, #0
 80141c4:	d106      	bne.n	80141d4 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 80141c6:	69b8      	ldr	r0, [r7, #24]
 80141c8:	f7ff fef6 	bl	8013fb8 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 80141cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80141ce:	f7f7 fff7 	bl	800c1c0 <pbuf_free>
        goto memerr;
 80141d2:	e074      	b.n	80142be <ip4_frag+0x266>
      }
      pbuf_ref(p);
 80141d4:	68f8      	ldr	r0, [r7, #12]
 80141d6:	f7f8 f893 	bl	800c300 <pbuf_ref>
      pcr->original = p;
 80141da:	69bb      	ldr	r3, [r7, #24]
 80141dc:	68fa      	ldr	r2, [r7, #12]
 80141de:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 80141e0:	69bb      	ldr	r3, [r7, #24]
 80141e2:	4a3f      	ldr	r2, [pc, #252]	; (80142e0 <ip4_frag+0x288>)
 80141e4:	611a      	str	r2, [r3, #16]
>>>>>>> Stashed changes

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
<<<<<<< Updated upstream
 8014216:	6979      	ldr	r1, [r7, #20]
 8014218:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801421a:	f7f8 f8ab 	bl	800c374 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801421e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8014222:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8014226:	1ad3      	subs	r3, r2, r3
 8014228:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 801422c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8014230:	2b00      	cmp	r3, #0
 8014232:	d004      	beq.n	801423e <ip4_frag+0x1b6>
        poff = 0;
 8014234:	2300      	movs	r3, #0
 8014236:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8014238:	68fb      	ldr	r3, [r7, #12]
 801423a:	681b      	ldr	r3, [r3, #0]
 801423c:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801423e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8014242:	2b00      	cmp	r3, #0
 8014244:	d196      	bne.n	8014174 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8014246:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8014248:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801424c:	4413      	add	r3, r2
 801424e:	87fb      	strh	r3, [r7, #62]	; 0x3e
=======
 80141e6:	6979      	ldr	r1, [r7, #20]
 80141e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80141ea:	f7f8 f8ab 	bl	800c344 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 80141ee:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 80141f2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80141f6:	1ad3      	subs	r3, r2, r3
 80141f8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 80141fc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8014200:	2b00      	cmp	r3, #0
 8014202:	d004      	beq.n	801420e <ip4_frag+0x1b6>
        poff = 0;
 8014204:	2300      	movs	r3, #0
 8014206:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8014208:	68fb      	ldr	r3, [r7, #12]
 801420a:	681b      	ldr	r3, [r3, #0]
 801420c:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801420e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8014212:	2b00      	cmp	r3, #0
 8014214:	d196      	bne.n	8014144 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8014216:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8014218:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801421c:	4413      	add	r3, r2
 801421e:	87fb      	strh	r3, [r7, #62]	; 0x3e
>>>>>>> Stashed changes
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
<<<<<<< Updated upstream
 8014250:	68bb      	ldr	r3, [r7, #8]
 8014252:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8014254:	f1a3 0213 	sub.w	r2, r3, #19
 8014258:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801425c:	429a      	cmp	r2, r3
 801425e:	bfcc      	ite	gt
 8014260:	2301      	movgt	r3, #1
 8014262:	2300      	movle	r3, #0
 8014264:	b2db      	uxtb	r3, r3
 8014266:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8014268:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801426c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014270:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8014272:	6a3b      	ldr	r3, [r7, #32]
 8014274:	2b00      	cmp	r3, #0
 8014276:	d002      	beq.n	801427e <ip4_frag+0x1f6>
 8014278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801427a:	2b00      	cmp	r3, #0
 801427c:	d003      	beq.n	8014286 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801427e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8014280:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8014284:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8014286:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8014288:	4618      	mov	r0, r3
 801428a:	f7f6 fd1e 	bl	800acca <lwip_htons>
 801428e:	4603      	mov	r3, r0
 8014290:	461a      	mov	r2, r3
 8014292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014294:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8014296:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8014298:	3314      	adds	r3, #20
 801429a:	b29b      	uxth	r3, r3
 801429c:	4618      	mov	r0, r3
 801429e:	f7f6 fd14 	bl	800acca <lwip_htons>
 80142a2:	4603      	mov	r3, r0
 80142a4:	461a      	mov	r2, r3
 80142a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80142a8:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 80142aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80142ac:	2200      	movs	r2, #0
 80142ae:	729a      	strb	r2, [r3, #10]
 80142b0:	2200      	movs	r2, #0
 80142b2:	72da      	strb	r2, [r3, #11]
=======
 8014220:	68bb      	ldr	r3, [r7, #8]
 8014222:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8014224:	f1a3 0213 	sub.w	r2, r3, #19
 8014228:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801422c:	429a      	cmp	r2, r3
 801422e:	bfcc      	ite	gt
 8014230:	2301      	movgt	r3, #1
 8014232:	2300      	movle	r3, #0
 8014234:	b2db      	uxtb	r3, r3
 8014236:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8014238:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801423c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014240:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8014242:	6a3b      	ldr	r3, [r7, #32]
 8014244:	2b00      	cmp	r3, #0
 8014246:	d002      	beq.n	801424e <ip4_frag+0x1f6>
 8014248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801424a:	2b00      	cmp	r3, #0
 801424c:	d003      	beq.n	8014256 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801424e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8014250:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8014254:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8014256:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8014258:	4618      	mov	r0, r3
 801425a:	f7f6 fd1e 	bl	800ac9a <lwip_htons>
 801425e:	4603      	mov	r3, r0
 8014260:	461a      	mov	r2, r3
 8014262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014264:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8014266:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8014268:	3314      	adds	r3, #20
 801426a:	b29b      	uxth	r3, r3
 801426c:	4618      	mov	r0, r3
 801426e:	f7f6 fd14 	bl	800ac9a <lwip_htons>
 8014272:	4603      	mov	r3, r0
 8014274:	461a      	mov	r2, r3
 8014276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014278:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801427a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801427c:	2200      	movs	r2, #0
 801427e:	729a      	strb	r2, [r3, #10]
 8014280:	2200      	movs	r2, #0
 8014282:	72da      	strb	r2, [r3, #11]
>>>>>>> Stashed changes
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
<<<<<<< Updated upstream
 80142b4:	68bb      	ldr	r3, [r7, #8]
 80142b6:	695b      	ldr	r3, [r3, #20]
 80142b8:	687a      	ldr	r2, [r7, #4]
 80142ba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80142bc:	68b8      	ldr	r0, [r7, #8]
 80142be:	4798      	blx	r3
=======
 8014284:	68bb      	ldr	r3, [r7, #8]
 8014286:	695b      	ldr	r3, [r3, #20]
 8014288:	687a      	ldr	r2, [r7, #4]
 801428a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801428c:	68b8      	ldr	r0, [r7, #8]
 801428e:	4798      	blx	r3
>>>>>>> Stashed changes
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
<<<<<<< Updated upstream
 80142c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80142c2:	f7f7 ff95 	bl	800c1f0 <pbuf_free>
    left = (u16_t)(left - fragsize);
 80142c6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80142ca:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80142cc:	1ad3      	subs	r3, r2, r3
 80142ce:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 80142d2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80142d6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80142d8:	4413      	add	r3, r2
 80142da:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 80142de:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80142e2:	2b00      	cmp	r3, #0
 80142e4:	f47f af19 	bne.w	801411a <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 80142e8:	2300      	movs	r3, #0
 80142ea:	e002      	b.n	80142f2 <ip4_frag+0x26a>
      goto memerr;
 80142ec:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 80142ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 80142f2:	4618      	mov	r0, r3
 80142f4:	3748      	adds	r7, #72	; 0x48
 80142f6:	46bd      	mov	sp, r7
 80142f8:	bd80      	pop	{r7, pc}
 80142fa:	bf00      	nop
 80142fc:	08018080 	.word	0x08018080
 8014300:	0801825c 	.word	0x0801825c
 8014304:	080180c8 	.word	0x080180c8
 8014308:	08018278 	.word	0x08018278
 801430c:	08018298 	.word	0x08018298
 8014310:	08014021 	.word	0x08014021

08014314 <ethernet_input>:
=======
 8014290:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014292:	f7f7 ff95 	bl	800c1c0 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8014296:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801429a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801429c:	1ad3      	subs	r3, r2, r3
 801429e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 80142a2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80142a6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80142a8:	4413      	add	r3, r2
 80142aa:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 80142ae:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80142b2:	2b00      	cmp	r3, #0
 80142b4:	f47f af19 	bne.w	80140ea <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 80142b8:	2300      	movs	r3, #0
 80142ba:	e002      	b.n	80142c2 <ip4_frag+0x26a>
      goto memerr;
 80142bc:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 80142be:	f04f 33ff 	mov.w	r3, #4294967295
}
 80142c2:	4618      	mov	r0, r3
 80142c4:	3748      	adds	r7, #72	; 0x48
 80142c6:	46bd      	mov	sp, r7
 80142c8:	bd80      	pop	{r7, pc}
 80142ca:	bf00      	nop
 80142cc:	08018064 	.word	0x08018064
 80142d0:	08018240 	.word	0x08018240
 80142d4:	080180ac 	.word	0x080180ac
 80142d8:	0801825c 	.word	0x0801825c
 80142dc:	0801827c 	.word	0x0801827c
 80142e0:	08013ff1 	.word	0x08013ff1

080142e4 <ethernet_input>:
>>>>>>> Stashed changes
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
<<<<<<< Updated upstream
 8014314:	b580      	push	{r7, lr}
 8014316:	b086      	sub	sp, #24
 8014318:	af00      	add	r7, sp, #0
 801431a:	6078      	str	r0, [r7, #4]
 801431c:	6039      	str	r1, [r7, #0]
=======
 80142e4:	b580      	push	{r7, lr}
 80142e6:	b086      	sub	sp, #24
 80142e8:	af00      	add	r7, sp, #0
 80142ea:	6078      	str	r0, [r7, #4]
 80142ec:	6039      	str	r1, [r7, #0]
>>>>>>> Stashed changes
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
<<<<<<< Updated upstream
 801431e:	230e      	movs	r3, #14
 8014320:	82fb      	strh	r3, [r7, #22]
=======
 80142ee:	230e      	movs	r3, #14
 80142f0:	82fb      	strh	r3, [r7, #22]
>>>>>>> Stashed changes
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
<<<<<<< Updated upstream
 8014322:	687b      	ldr	r3, [r7, #4]
 8014324:	895b      	ldrh	r3, [r3, #10]
 8014326:	2b0e      	cmp	r3, #14
 8014328:	d96e      	bls.n	8014408 <ethernet_input+0xf4>
=======
 80142f2:	687b      	ldr	r3, [r7, #4]
 80142f4:	895b      	ldrh	r3, [r3, #10]
 80142f6:	2b0e      	cmp	r3, #14
 80142f8:	d96e      	bls.n	80143d8 <ethernet_input+0xf4>
>>>>>>> Stashed changes
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
<<<<<<< Updated upstream
 801432a:	687b      	ldr	r3, [r7, #4]
 801432c:	7bdb      	ldrb	r3, [r3, #15]
 801432e:	2b00      	cmp	r3, #0
 8014330:	d106      	bne.n	8014340 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8014332:	683b      	ldr	r3, [r7, #0]
 8014334:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8014338:	3301      	adds	r3, #1
 801433a:	b2da      	uxtb	r2, r3
 801433c:	687b      	ldr	r3, [r7, #4]
 801433e:	73da      	strb	r2, [r3, #15]
=======
 80142fa:	687b      	ldr	r3, [r7, #4]
 80142fc:	7bdb      	ldrb	r3, [r3, #15]
 80142fe:	2b00      	cmp	r3, #0
 8014300:	d106      	bne.n	8014310 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8014302:	683b      	ldr	r3, [r7, #0]
 8014304:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8014308:	3301      	adds	r3, #1
 801430a:	b2da      	uxtb	r2, r3
 801430c:	687b      	ldr	r3, [r7, #4]
 801430e:	73da      	strb	r2, [r3, #15]
>>>>>>> Stashed changes
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
<<<<<<< Updated upstream
 8014340:	687b      	ldr	r3, [r7, #4]
 8014342:	685b      	ldr	r3, [r3, #4]
 8014344:	613b      	str	r3, [r7, #16]
=======
 8014310:	687b      	ldr	r3, [r7, #4]
 8014312:	685b      	ldr	r3, [r3, #4]
 8014314:	613b      	str	r3, [r7, #16]
>>>>>>> Stashed changes
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
<<<<<<< Updated upstream
 8014346:	693b      	ldr	r3, [r7, #16]
 8014348:	7b1a      	ldrb	r2, [r3, #12]
 801434a:	7b5b      	ldrb	r3, [r3, #13]
 801434c:	021b      	lsls	r3, r3, #8
 801434e:	4313      	orrs	r3, r2
 8014350:	81fb      	strh	r3, [r7, #14]
=======
 8014316:	693b      	ldr	r3, [r7, #16]
 8014318:	7b1a      	ldrb	r2, [r3, #12]
 801431a:	7b5b      	ldrb	r3, [r3, #13]
 801431c:	021b      	lsls	r3, r3, #8
 801431e:	4313      	orrs	r3, r2
 8014320:	81fb      	strh	r3, [r7, #14]
>>>>>>> Stashed changes

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
<<<<<<< Updated upstream
 8014352:	693b      	ldr	r3, [r7, #16]
 8014354:	781b      	ldrb	r3, [r3, #0]
 8014356:	f003 0301 	and.w	r3, r3, #1
 801435a:	2b00      	cmp	r3, #0
 801435c:	d023      	beq.n	80143a6 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801435e:	693b      	ldr	r3, [r7, #16]
 8014360:	781b      	ldrb	r3, [r3, #0]
 8014362:	2b01      	cmp	r3, #1
 8014364:	d10f      	bne.n	8014386 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8014366:	693b      	ldr	r3, [r7, #16]
 8014368:	785b      	ldrb	r3, [r3, #1]
 801436a:	2b00      	cmp	r3, #0
 801436c:	d11b      	bne.n	80143a6 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801436e:	693b      	ldr	r3, [r7, #16]
 8014370:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8014372:	2b5e      	cmp	r3, #94	; 0x5e
 8014374:	d117      	bne.n	80143a6 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8014376:	687b      	ldr	r3, [r7, #4]
 8014378:	7b5b      	ldrb	r3, [r3, #13]
 801437a:	f043 0310 	orr.w	r3, r3, #16
 801437e:	b2da      	uxtb	r2, r3
 8014380:	687b      	ldr	r3, [r7, #4]
 8014382:	735a      	strb	r2, [r3, #13]
 8014384:	e00f      	b.n	80143a6 <ethernet_input+0x92>
=======
 8014322:	693b      	ldr	r3, [r7, #16]
 8014324:	781b      	ldrb	r3, [r3, #0]
 8014326:	f003 0301 	and.w	r3, r3, #1
 801432a:	2b00      	cmp	r3, #0
 801432c:	d023      	beq.n	8014376 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801432e:	693b      	ldr	r3, [r7, #16]
 8014330:	781b      	ldrb	r3, [r3, #0]
 8014332:	2b01      	cmp	r3, #1
 8014334:	d10f      	bne.n	8014356 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8014336:	693b      	ldr	r3, [r7, #16]
 8014338:	785b      	ldrb	r3, [r3, #1]
 801433a:	2b00      	cmp	r3, #0
 801433c:	d11b      	bne.n	8014376 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801433e:	693b      	ldr	r3, [r7, #16]
 8014340:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8014342:	2b5e      	cmp	r3, #94	; 0x5e
 8014344:	d117      	bne.n	8014376 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8014346:	687b      	ldr	r3, [r7, #4]
 8014348:	7b5b      	ldrb	r3, [r3, #13]
 801434a:	f043 0310 	orr.w	r3, r3, #16
 801434e:	b2da      	uxtb	r2, r3
 8014350:	687b      	ldr	r3, [r7, #4]
 8014352:	735a      	strb	r2, [r3, #13]
 8014354:	e00f      	b.n	8014376 <ethernet_input+0x92>
>>>>>>> Stashed changes
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
<<<<<<< Updated upstream
 8014386:	693b      	ldr	r3, [r7, #16]
 8014388:	2206      	movs	r2, #6
 801438a:	4928      	ldr	r1, [pc, #160]	; (801442c <ethernet_input+0x118>)
 801438c:	4618      	mov	r0, r3
 801438e:	f000 f8bb 	bl	8014508 <memcmp>
 8014392:	4603      	mov	r3, r0
 8014394:	2b00      	cmp	r3, #0
 8014396:	d106      	bne.n	80143a6 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8014398:	687b      	ldr	r3, [r7, #4]
 801439a:	7b5b      	ldrb	r3, [r3, #13]
 801439c:	f043 0308 	orr.w	r3, r3, #8
 80143a0:	b2da      	uxtb	r2, r3
 80143a2:	687b      	ldr	r3, [r7, #4]
 80143a4:	735a      	strb	r2, [r3, #13]
=======
 8014356:	693b      	ldr	r3, [r7, #16]
 8014358:	2206      	movs	r2, #6
 801435a:	4928      	ldr	r1, [pc, #160]	; (80143fc <ethernet_input+0x118>)
 801435c:	4618      	mov	r0, r3
 801435e:	f000 f8bb 	bl	80144d8 <memcmp>
 8014362:	4603      	mov	r3, r0
 8014364:	2b00      	cmp	r3, #0
 8014366:	d106      	bne.n	8014376 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8014368:	687b      	ldr	r3, [r7, #4]
 801436a:	7b5b      	ldrb	r3, [r3, #13]
 801436c:	f043 0308 	orr.w	r3, r3, #8
 8014370:	b2da      	uxtb	r2, r3
 8014372:	687b      	ldr	r3, [r7, #4]
 8014374:	735a      	strb	r2, [r3, #13]
>>>>>>> Stashed changes
    }
  }

  switch (type) {
<<<<<<< Updated upstream
 80143a6:	89fb      	ldrh	r3, [r7, #14]
 80143a8:	2b08      	cmp	r3, #8
 80143aa:	d003      	beq.n	80143b4 <ethernet_input+0xa0>
 80143ac:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 80143b0:	d014      	beq.n	80143dc <ethernet_input+0xc8>
=======
 8014376:	89fb      	ldrh	r3, [r7, #14]
 8014378:	2b08      	cmp	r3, #8
 801437a:	d003      	beq.n	8014384 <ethernet_input+0xa0>
 801437c:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8014380:	d014      	beq.n	80143ac <ethernet_input+0xc8>
>>>>>>> Stashed changes
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
<<<<<<< Updated upstream
 80143b2:	e032      	b.n	801441a <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80143b4:	683b      	ldr	r3, [r7, #0]
 80143b6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80143ba:	f003 0308 	and.w	r3, r3, #8
 80143be:	2b00      	cmp	r3, #0
 80143c0:	d024      	beq.n	801440c <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80143c2:	8afb      	ldrh	r3, [r7, #22]
 80143c4:	4619      	mov	r1, r3
 80143c6:	6878      	ldr	r0, [r7, #4]
 80143c8:	f7f7 fe8c 	bl	800c0e4 <pbuf_remove_header>
 80143cc:	4603      	mov	r3, r0
 80143ce:	2b00      	cmp	r3, #0
 80143d0:	d11e      	bne.n	8014410 <ethernet_input+0xfc>
        ip4_input(p, netif);
 80143d2:	6839      	ldr	r1, [r7, #0]
 80143d4:	6878      	ldr	r0, [r7, #4]
 80143d6:	f7fe ff27 	bl	8013228 <ip4_input>
      break;
 80143da:	e013      	b.n	8014404 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80143dc:	683b      	ldr	r3, [r7, #0]
 80143de:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80143e2:	f003 0308 	and.w	r3, r3, #8
 80143e6:	2b00      	cmp	r3, #0
 80143e8:	d014      	beq.n	8014414 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80143ea:	8afb      	ldrh	r3, [r7, #22]
 80143ec:	4619      	mov	r1, r3
 80143ee:	6878      	ldr	r0, [r7, #4]
 80143f0:	f7f7 fe78 	bl	800c0e4 <pbuf_remove_header>
 80143f4:	4603      	mov	r3, r0
 80143f6:	2b00      	cmp	r3, #0
 80143f8:	d10e      	bne.n	8014418 <ethernet_input+0x104>
        etharp_input(p, netif);
 80143fa:	6839      	ldr	r1, [r7, #0]
 80143fc:	6878      	ldr	r0, [r7, #4]
 80143fe:	f7fe f8c7 	bl	8012590 <etharp_input>
      break;
 8014402:	bf00      	nop
=======
 8014382:	e032      	b.n	80143ea <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8014384:	683b      	ldr	r3, [r7, #0]
 8014386:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801438a:	f003 0308 	and.w	r3, r3, #8
 801438e:	2b00      	cmp	r3, #0
 8014390:	d024      	beq.n	80143dc <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8014392:	8afb      	ldrh	r3, [r7, #22]
 8014394:	4619      	mov	r1, r3
 8014396:	6878      	ldr	r0, [r7, #4]
 8014398:	f7f7 fe8c 	bl	800c0b4 <pbuf_remove_header>
 801439c:	4603      	mov	r3, r0
 801439e:	2b00      	cmp	r3, #0
 80143a0:	d11e      	bne.n	80143e0 <ethernet_input+0xfc>
        ip4_input(p, netif);
 80143a2:	6839      	ldr	r1, [r7, #0]
 80143a4:	6878      	ldr	r0, [r7, #4]
 80143a6:	f7fe ff27 	bl	80131f8 <ip4_input>
      break;
 80143aa:	e013      	b.n	80143d4 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80143ac:	683b      	ldr	r3, [r7, #0]
 80143ae:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80143b2:	f003 0308 	and.w	r3, r3, #8
 80143b6:	2b00      	cmp	r3, #0
 80143b8:	d014      	beq.n	80143e4 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80143ba:	8afb      	ldrh	r3, [r7, #22]
 80143bc:	4619      	mov	r1, r3
 80143be:	6878      	ldr	r0, [r7, #4]
 80143c0:	f7f7 fe78 	bl	800c0b4 <pbuf_remove_header>
 80143c4:	4603      	mov	r3, r0
 80143c6:	2b00      	cmp	r3, #0
 80143c8:	d10e      	bne.n	80143e8 <ethernet_input+0x104>
        etharp_input(p, netif);
 80143ca:	6839      	ldr	r1, [r7, #0]
 80143cc:	6878      	ldr	r0, [r7, #4]
 80143ce:	f7fe f8c7 	bl	8012560 <etharp_input>
      break;
 80143d2:	bf00      	nop
>>>>>>> Stashed changes
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
<<<<<<< Updated upstream
 8014404:	2300      	movs	r3, #0
 8014406:	e00c      	b.n	8014422 <ethernet_input+0x10e>
    goto free_and_return;
 8014408:	bf00      	nop
 801440a:	e006      	b.n	801441a <ethernet_input+0x106>
        goto free_and_return;
 801440c:	bf00      	nop
 801440e:	e004      	b.n	801441a <ethernet_input+0x106>
        goto free_and_return;
 8014410:	bf00      	nop
 8014412:	e002      	b.n	801441a <ethernet_input+0x106>
        goto free_and_return;
 8014414:	bf00      	nop
 8014416:	e000      	b.n	801441a <ethernet_input+0x106>
        goto free_and_return;
 8014418:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801441a:	6878      	ldr	r0, [r7, #4]
 801441c:	f7f7 fee8 	bl	800c1f0 <pbuf_free>
  return ERR_OK;
 8014420:	2300      	movs	r3, #0
}
 8014422:	4618      	mov	r0, r3
 8014424:	3718      	adds	r7, #24
 8014426:	46bd      	mov	sp, r7
 8014428:	bd80      	pop	{r7, pc}
 801442a:	bf00      	nop
 801442c:	08018444 	.word	0x08018444

08014430 <ethernet_output>:
=======
 80143d4:	2300      	movs	r3, #0
 80143d6:	e00c      	b.n	80143f2 <ethernet_input+0x10e>
    goto free_and_return;
 80143d8:	bf00      	nop
 80143da:	e006      	b.n	80143ea <ethernet_input+0x106>
        goto free_and_return;
 80143dc:	bf00      	nop
 80143de:	e004      	b.n	80143ea <ethernet_input+0x106>
        goto free_and_return;
 80143e0:	bf00      	nop
 80143e2:	e002      	b.n	80143ea <ethernet_input+0x106>
        goto free_and_return;
 80143e4:	bf00      	nop
 80143e6:	e000      	b.n	80143ea <ethernet_input+0x106>
        goto free_and_return;
 80143e8:	bf00      	nop

free_and_return:
  pbuf_free(p);
 80143ea:	6878      	ldr	r0, [r7, #4]
 80143ec:	f7f7 fee8 	bl	800c1c0 <pbuf_free>
  return ERR_OK;
 80143f0:	2300      	movs	r3, #0
}
 80143f2:	4618      	mov	r0, r3
 80143f4:	3718      	adds	r7, #24
 80143f6:	46bd      	mov	sp, r7
 80143f8:	bd80      	pop	{r7, pc}
 80143fa:	bf00      	nop
 80143fc:	08018428 	.word	0x08018428

08014400 <ethernet_output>:
>>>>>>> Stashed changes
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
<<<<<<< Updated upstream
 8014430:	b580      	push	{r7, lr}
 8014432:	b086      	sub	sp, #24
 8014434:	af00      	add	r7, sp, #0
 8014436:	60f8      	str	r0, [r7, #12]
 8014438:	60b9      	str	r1, [r7, #8]
 801443a:	607a      	str	r2, [r7, #4]
 801443c:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801443e:	8c3b      	ldrh	r3, [r7, #32]
 8014440:	4618      	mov	r0, r3
 8014442:	f7f6 fc42 	bl	800acca <lwip_htons>
 8014446:	4603      	mov	r3, r0
 8014448:	82fb      	strh	r3, [r7, #22]
=======
 8014400:	b580      	push	{r7, lr}
 8014402:	b086      	sub	sp, #24
 8014404:	af00      	add	r7, sp, #0
 8014406:	60f8      	str	r0, [r7, #12]
 8014408:	60b9      	str	r1, [r7, #8]
 801440a:	607a      	str	r2, [r7, #4]
 801440c:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801440e:	8c3b      	ldrh	r3, [r7, #32]
 8014410:	4618      	mov	r0, r3
 8014412:	f7f6 fc42 	bl	800ac9a <lwip_htons>
 8014416:	4603      	mov	r3, r0
 8014418:	82fb      	strh	r3, [r7, #22]
>>>>>>> Stashed changes

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
<<<<<<< Updated upstream
 801444a:	210e      	movs	r1, #14
 801444c:	68b8      	ldr	r0, [r7, #8]
 801444e:	f7f7 fe39 	bl	800c0c4 <pbuf_add_header>
 8014452:	4603      	mov	r3, r0
 8014454:	2b00      	cmp	r3, #0
 8014456:	d125      	bne.n	80144a4 <ethernet_output+0x74>
=======
 801441a:	210e      	movs	r1, #14
 801441c:	68b8      	ldr	r0, [r7, #8]
 801441e:	f7f7 fe39 	bl	800c094 <pbuf_add_header>
 8014422:	4603      	mov	r3, r0
 8014424:	2b00      	cmp	r3, #0
 8014426:	d125      	bne.n	8014474 <ethernet_output+0x74>
>>>>>>> Stashed changes
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
<<<<<<< Updated upstream
 8014458:	68bb      	ldr	r3, [r7, #8]
 801445a:	685b      	ldr	r3, [r3, #4]
 801445c:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801445e:	693b      	ldr	r3, [r7, #16]
 8014460:	8afa      	ldrh	r2, [r7, #22]
 8014462:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8014464:	693b      	ldr	r3, [r7, #16]
 8014466:	2206      	movs	r2, #6
 8014468:	6839      	ldr	r1, [r7, #0]
 801446a:	4618      	mov	r0, r3
 801446c:	f000 f85a 	bl	8014524 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8014470:	693b      	ldr	r3, [r7, #16]
 8014472:	3306      	adds	r3, #6
 8014474:	2206      	movs	r2, #6
 8014476:	6879      	ldr	r1, [r7, #4]
 8014478:	4618      	mov	r0, r3
 801447a:	f000 f853 	bl	8014524 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801447e:	68fb      	ldr	r3, [r7, #12]
 8014480:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8014484:	2b06      	cmp	r3, #6
 8014486:	d006      	beq.n	8014496 <ethernet_output+0x66>
 8014488:	4b0a      	ldr	r3, [pc, #40]	; (80144b4 <ethernet_output+0x84>)
 801448a:	f44f 7299 	mov.w	r2, #306	; 0x132
 801448e:	490a      	ldr	r1, [pc, #40]	; (80144b8 <ethernet_output+0x88>)
 8014490:	480a      	ldr	r0, [pc, #40]	; (80144bc <ethernet_output+0x8c>)
 8014492:	f000 f877 	bl	8014584 <iprintf>
=======
 8014428:	68bb      	ldr	r3, [r7, #8]
 801442a:	685b      	ldr	r3, [r3, #4]
 801442c:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801442e:	693b      	ldr	r3, [r7, #16]
 8014430:	8afa      	ldrh	r2, [r7, #22]
 8014432:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8014434:	693b      	ldr	r3, [r7, #16]
 8014436:	2206      	movs	r2, #6
 8014438:	6839      	ldr	r1, [r7, #0]
 801443a:	4618      	mov	r0, r3
 801443c:	f000 f85a 	bl	80144f4 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8014440:	693b      	ldr	r3, [r7, #16]
 8014442:	3306      	adds	r3, #6
 8014444:	2206      	movs	r2, #6
 8014446:	6879      	ldr	r1, [r7, #4]
 8014448:	4618      	mov	r0, r3
 801444a:	f000 f853 	bl	80144f4 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801444e:	68fb      	ldr	r3, [r7, #12]
 8014450:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8014454:	2b06      	cmp	r3, #6
 8014456:	d006      	beq.n	8014466 <ethernet_output+0x66>
 8014458:	4b0a      	ldr	r3, [pc, #40]	; (8014484 <ethernet_output+0x84>)
 801445a:	f44f 7299 	mov.w	r2, #306	; 0x132
 801445e:	490a      	ldr	r1, [pc, #40]	; (8014488 <ethernet_output+0x88>)
 8014460:	480a      	ldr	r0, [pc, #40]	; (801448c <ethernet_output+0x8c>)
 8014462:	f000 f877 	bl	8014554 <iprintf>
>>>>>>> Stashed changes
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
<<<<<<< Updated upstream
 8014496:	68fb      	ldr	r3, [r7, #12]
 8014498:	699b      	ldr	r3, [r3, #24]
 801449a:	68b9      	ldr	r1, [r7, #8]
 801449c:	68f8      	ldr	r0, [r7, #12]
 801449e:	4798      	blx	r3
 80144a0:	4603      	mov	r3, r0
 80144a2:	e002      	b.n	80144aa <ethernet_output+0x7a>
      goto pbuf_header_failed;
 80144a4:	bf00      	nop
=======
 8014466:	68fb      	ldr	r3, [r7, #12]
 8014468:	699b      	ldr	r3, [r3, #24]
 801446a:	68b9      	ldr	r1, [r7, #8]
 801446c:	68f8      	ldr	r0, [r7, #12]
 801446e:	4798      	blx	r3
 8014470:	4603      	mov	r3, r0
 8014472:	e002      	b.n	801447a <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8014474:	bf00      	nop
>>>>>>> Stashed changes

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
<<<<<<< Updated upstream
 80144a6:	f06f 0301 	mvn.w	r3, #1
}
 80144aa:	4618      	mov	r0, r3
 80144ac:	3718      	adds	r7, #24
 80144ae:	46bd      	mov	sp, r7
 80144b0:	bd80      	pop	{r7, pc}
 80144b2:	bf00      	nop
 80144b4:	080182a8 	.word	0x080182a8
 80144b8:	080182e0 	.word	0x080182e0
 80144bc:	08018314 	.word	0x08018314

080144c0 <__libc_init_array>:
 80144c0:	b570      	push	{r4, r5, r6, lr}
 80144c2:	4d0d      	ldr	r5, [pc, #52]	; (80144f8 <__libc_init_array+0x38>)
 80144c4:	4c0d      	ldr	r4, [pc, #52]	; (80144fc <__libc_init_array+0x3c>)
 80144c6:	1b64      	subs	r4, r4, r5
 80144c8:	10a4      	asrs	r4, r4, #2
 80144ca:	2600      	movs	r6, #0
 80144cc:	42a6      	cmp	r6, r4
 80144ce:	d109      	bne.n	80144e4 <__libc_init_array+0x24>
 80144d0:	4d0b      	ldr	r5, [pc, #44]	; (8014500 <__libc_init_array+0x40>)
 80144d2:	4c0c      	ldr	r4, [pc, #48]	; (8014504 <__libc_init_array+0x44>)
 80144d4:	f001 fa1a 	bl	801590c <_init>
 80144d8:	1b64      	subs	r4, r4, r5
 80144da:	10a4      	asrs	r4, r4, #2
 80144dc:	2600      	movs	r6, #0
 80144de:	42a6      	cmp	r6, r4
 80144e0:	d105      	bne.n	80144ee <__libc_init_array+0x2e>
 80144e2:	bd70      	pop	{r4, r5, r6, pc}
 80144e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80144e8:	4798      	blx	r3
 80144ea:	3601      	adds	r6, #1
 80144ec:	e7ee      	b.n	80144cc <__libc_init_array+0xc>
 80144ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80144f2:	4798      	blx	r3
 80144f4:	3601      	adds	r6, #1
 80144f6:	e7f2      	b.n	80144de <__libc_init_array+0x1e>
 80144f8:	080185a8 	.word	0x080185a8
 80144fc:	080185a8 	.word	0x080185a8
 8014500:	080185a8 	.word	0x080185a8
 8014504:	080185ac 	.word	0x080185ac

08014508 <memcmp>:
 8014508:	b530      	push	{r4, r5, lr}
 801450a:	3901      	subs	r1, #1
 801450c:	2400      	movs	r4, #0
 801450e:	42a2      	cmp	r2, r4
 8014510:	d101      	bne.n	8014516 <memcmp+0xe>
 8014512:	2000      	movs	r0, #0
 8014514:	e005      	b.n	8014522 <memcmp+0x1a>
 8014516:	5d03      	ldrb	r3, [r0, r4]
 8014518:	3401      	adds	r4, #1
 801451a:	5d0d      	ldrb	r5, [r1, r4]
 801451c:	42ab      	cmp	r3, r5
 801451e:	d0f6      	beq.n	801450e <memcmp+0x6>
 8014520:	1b58      	subs	r0, r3, r5
 8014522:	bd30      	pop	{r4, r5, pc}

08014524 <memcpy>:
 8014524:	440a      	add	r2, r1
 8014526:	4291      	cmp	r1, r2
 8014528:	f100 33ff 	add.w	r3, r0, #4294967295
 801452c:	d100      	bne.n	8014530 <memcpy+0xc>
 801452e:	4770      	bx	lr
 8014530:	b510      	push	{r4, lr}
 8014532:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014536:	f803 4f01 	strb.w	r4, [r3, #1]!
 801453a:	4291      	cmp	r1, r2
 801453c:	d1f9      	bne.n	8014532 <memcpy+0xe>
 801453e:	bd10      	pop	{r4, pc}

08014540 <memmove>:
 8014540:	4288      	cmp	r0, r1
 8014542:	b510      	push	{r4, lr}
 8014544:	eb01 0402 	add.w	r4, r1, r2
 8014548:	d902      	bls.n	8014550 <memmove+0x10>
 801454a:	4284      	cmp	r4, r0
 801454c:	4623      	mov	r3, r4
 801454e:	d807      	bhi.n	8014560 <memmove+0x20>
 8014550:	1e43      	subs	r3, r0, #1
 8014552:	42a1      	cmp	r1, r4
 8014554:	d008      	beq.n	8014568 <memmove+0x28>
 8014556:	f811 2b01 	ldrb.w	r2, [r1], #1
 801455a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801455e:	e7f8      	b.n	8014552 <memmove+0x12>
 8014560:	4402      	add	r2, r0
 8014562:	4601      	mov	r1, r0
 8014564:	428a      	cmp	r2, r1
 8014566:	d100      	bne.n	801456a <memmove+0x2a>
 8014568:	bd10      	pop	{r4, pc}
 801456a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801456e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8014572:	e7f7      	b.n	8014564 <memmove+0x24>

08014574 <memset>:
 8014574:	4402      	add	r2, r0
 8014576:	4603      	mov	r3, r0
 8014578:	4293      	cmp	r3, r2
 801457a:	d100      	bne.n	801457e <memset+0xa>
 801457c:	4770      	bx	lr
 801457e:	f803 1b01 	strb.w	r1, [r3], #1
 8014582:	e7f9      	b.n	8014578 <memset+0x4>

08014584 <iprintf>:
 8014584:	b40f      	push	{r0, r1, r2, r3}
 8014586:	4b0a      	ldr	r3, [pc, #40]	; (80145b0 <iprintf+0x2c>)
 8014588:	b513      	push	{r0, r1, r4, lr}
 801458a:	681c      	ldr	r4, [r3, #0]
 801458c:	b124      	cbz	r4, 8014598 <iprintf+0x14>
 801458e:	69a3      	ldr	r3, [r4, #24]
 8014590:	b913      	cbnz	r3, 8014598 <iprintf+0x14>
 8014592:	4620      	mov	r0, r4
 8014594:	f000 f8e4 	bl	8014760 <__sinit>
 8014598:	ab05      	add	r3, sp, #20
 801459a:	9a04      	ldr	r2, [sp, #16]
 801459c:	68a1      	ldr	r1, [r4, #8]
 801459e:	9301      	str	r3, [sp, #4]
 80145a0:	4620      	mov	r0, r4
 80145a2:	f000 fbc7 	bl	8014d34 <_vfiprintf_r>
 80145a6:	b002      	add	sp, #8
 80145a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80145ac:	b004      	add	sp, #16
 80145ae:	4770      	bx	lr
 80145b0:	20000014 	.word	0x20000014

080145b4 <rand>:
 80145b4:	4b17      	ldr	r3, [pc, #92]	; (8014614 <rand+0x60>)
 80145b6:	b510      	push	{r4, lr}
 80145b8:	681c      	ldr	r4, [r3, #0]
 80145ba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80145bc:	b9b3      	cbnz	r3, 80145ec <rand+0x38>
 80145be:	2018      	movs	r0, #24
 80145c0:	f000 f980 	bl	80148c4 <malloc>
 80145c4:	63a0      	str	r0, [r4, #56]	; 0x38
 80145c6:	b928      	cbnz	r0, 80145d4 <rand+0x20>
 80145c8:	4602      	mov	r2, r0
 80145ca:	4b13      	ldr	r3, [pc, #76]	; (8014618 <rand+0x64>)
 80145cc:	4813      	ldr	r0, [pc, #76]	; (801461c <rand+0x68>)
 80145ce:	214e      	movs	r1, #78	; 0x4e
 80145d0:	f000 f850 	bl	8014674 <__assert_func>
 80145d4:	4a12      	ldr	r2, [pc, #72]	; (8014620 <rand+0x6c>)
 80145d6:	4b13      	ldr	r3, [pc, #76]	; (8014624 <rand+0x70>)
 80145d8:	e9c0 2300 	strd	r2, r3, [r0]
 80145dc:	4b12      	ldr	r3, [pc, #72]	; (8014628 <rand+0x74>)
 80145de:	6083      	str	r3, [r0, #8]
 80145e0:	230b      	movs	r3, #11
 80145e2:	8183      	strh	r3, [r0, #12]
 80145e4:	2201      	movs	r2, #1
 80145e6:	2300      	movs	r3, #0
 80145e8:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80145ec:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80145ee:	480f      	ldr	r0, [pc, #60]	; (801462c <rand+0x78>)
 80145f0:	690a      	ldr	r2, [r1, #16]
 80145f2:	694b      	ldr	r3, [r1, #20]
 80145f4:	4c0e      	ldr	r4, [pc, #56]	; (8014630 <rand+0x7c>)
 80145f6:	4350      	muls	r0, r2
 80145f8:	fb04 0003 	mla	r0, r4, r3, r0
 80145fc:	fba2 3404 	umull	r3, r4, r2, r4
 8014600:	1c5a      	adds	r2, r3, #1
 8014602:	4404      	add	r4, r0
 8014604:	f144 0000 	adc.w	r0, r4, #0
 8014608:	e9c1 2004 	strd	r2, r0, [r1, #16]
 801460c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8014610:	bd10      	pop	{r4, pc}
 8014612:	bf00      	nop
 8014614:	20000014 	.word	0x20000014
 8014618:	08018458 	.word	0x08018458
 801461c:	0801846f 	.word	0x0801846f
 8014620:	abcd330e 	.word	0xabcd330e
 8014624:	e66d1234 	.word	0xe66d1234
 8014628:	0005deec 	.word	0x0005deec
 801462c:	5851f42d 	.word	0x5851f42d
 8014630:	4c957f2d 	.word	0x4c957f2d

08014634 <siprintf>:
 8014634:	b40e      	push	{r1, r2, r3}
 8014636:	b500      	push	{lr}
 8014638:	b09c      	sub	sp, #112	; 0x70
 801463a:	ab1d      	add	r3, sp, #116	; 0x74
 801463c:	9002      	str	r0, [sp, #8]
 801463e:	9006      	str	r0, [sp, #24]
 8014640:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8014644:	4809      	ldr	r0, [pc, #36]	; (801466c <siprintf+0x38>)
 8014646:	9107      	str	r1, [sp, #28]
 8014648:	9104      	str	r1, [sp, #16]
 801464a:	4909      	ldr	r1, [pc, #36]	; (8014670 <siprintf+0x3c>)
 801464c:	f853 2b04 	ldr.w	r2, [r3], #4
 8014650:	9105      	str	r1, [sp, #20]
 8014652:	6800      	ldr	r0, [r0, #0]
 8014654:	9301      	str	r3, [sp, #4]
 8014656:	a902      	add	r1, sp, #8
 8014658:	f000 fa42 	bl	8014ae0 <_svfiprintf_r>
 801465c:	9b02      	ldr	r3, [sp, #8]
 801465e:	2200      	movs	r2, #0
 8014660:	701a      	strb	r2, [r3, #0]
 8014662:	b01c      	add	sp, #112	; 0x70
 8014664:	f85d eb04 	ldr.w	lr, [sp], #4
 8014668:	b003      	add	sp, #12
 801466a:	4770      	bx	lr
 801466c:	20000014 	.word	0x20000014
 8014670:	ffff0208 	.word	0xffff0208

08014674 <__assert_func>:
 8014674:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014676:	4614      	mov	r4, r2
 8014678:	461a      	mov	r2, r3
 801467a:	4b09      	ldr	r3, [pc, #36]	; (80146a0 <__assert_func+0x2c>)
 801467c:	681b      	ldr	r3, [r3, #0]
 801467e:	4605      	mov	r5, r0
 8014680:	68d8      	ldr	r0, [r3, #12]
 8014682:	b14c      	cbz	r4, 8014698 <__assert_func+0x24>
 8014684:	4b07      	ldr	r3, [pc, #28]	; (80146a4 <__assert_func+0x30>)
 8014686:	9100      	str	r1, [sp, #0]
 8014688:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801468c:	4906      	ldr	r1, [pc, #24]	; (80146a8 <__assert_func+0x34>)
 801468e:	462b      	mov	r3, r5
 8014690:	f000 f8e4 	bl	801485c <fiprintf>
 8014694:	f000 ff38 	bl	8015508 <abort>
 8014698:	4b04      	ldr	r3, [pc, #16]	; (80146ac <__assert_func+0x38>)
 801469a:	461c      	mov	r4, r3
 801469c:	e7f3      	b.n	8014686 <__assert_func+0x12>
 801469e:	bf00      	nop
 80146a0:	20000014 	.word	0x20000014
 80146a4:	080184ce 	.word	0x080184ce
 80146a8:	080184db 	.word	0x080184db
 80146ac:	08018509 	.word	0x08018509

080146b0 <std>:
 80146b0:	2300      	movs	r3, #0
 80146b2:	b510      	push	{r4, lr}
 80146b4:	4604      	mov	r4, r0
 80146b6:	e9c0 3300 	strd	r3, r3, [r0]
 80146ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80146be:	6083      	str	r3, [r0, #8]
 80146c0:	8181      	strh	r1, [r0, #12]
 80146c2:	6643      	str	r3, [r0, #100]	; 0x64
 80146c4:	81c2      	strh	r2, [r0, #14]
 80146c6:	6183      	str	r3, [r0, #24]
 80146c8:	4619      	mov	r1, r3
 80146ca:	2208      	movs	r2, #8
 80146cc:	305c      	adds	r0, #92	; 0x5c
 80146ce:	f7ff ff51 	bl	8014574 <memset>
 80146d2:	4b05      	ldr	r3, [pc, #20]	; (80146e8 <std+0x38>)
 80146d4:	6263      	str	r3, [r4, #36]	; 0x24
 80146d6:	4b05      	ldr	r3, [pc, #20]	; (80146ec <std+0x3c>)
 80146d8:	62a3      	str	r3, [r4, #40]	; 0x28
 80146da:	4b05      	ldr	r3, [pc, #20]	; (80146f0 <std+0x40>)
 80146dc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80146de:	4b05      	ldr	r3, [pc, #20]	; (80146f4 <std+0x44>)
 80146e0:	6224      	str	r4, [r4, #32]
 80146e2:	6323      	str	r3, [r4, #48]	; 0x30
 80146e4:	bd10      	pop	{r4, pc}
 80146e6:	bf00      	nop
 80146e8:	080152dd 	.word	0x080152dd
 80146ec:	080152ff 	.word	0x080152ff
 80146f0:	08015337 	.word	0x08015337
 80146f4:	0801535b 	.word	0x0801535b

080146f8 <_cleanup_r>:
 80146f8:	4901      	ldr	r1, [pc, #4]	; (8014700 <_cleanup_r+0x8>)
 80146fa:	f000 b8c1 	b.w	8014880 <_fwalk_reent>
 80146fe:	bf00      	nop
 8014700:	08015645 	.word	0x08015645

08014704 <__sfmoreglue>:
 8014704:	b570      	push	{r4, r5, r6, lr}
 8014706:	1e4a      	subs	r2, r1, #1
 8014708:	2568      	movs	r5, #104	; 0x68
 801470a:	4355      	muls	r5, r2
 801470c:	460e      	mov	r6, r1
 801470e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8014712:	f000 f92f 	bl	8014974 <_malloc_r>
 8014716:	4604      	mov	r4, r0
 8014718:	b140      	cbz	r0, 801472c <__sfmoreglue+0x28>
 801471a:	2100      	movs	r1, #0
 801471c:	e9c0 1600 	strd	r1, r6, [r0]
 8014720:	300c      	adds	r0, #12
 8014722:	60a0      	str	r0, [r4, #8]
 8014724:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8014728:	f7ff ff24 	bl	8014574 <memset>
 801472c:	4620      	mov	r0, r4
 801472e:	bd70      	pop	{r4, r5, r6, pc}

08014730 <__sfp_lock_acquire>:
 8014730:	4801      	ldr	r0, [pc, #4]	; (8014738 <__sfp_lock_acquire+0x8>)
 8014732:	f000 b8c5 	b.w	80148c0 <__retarget_lock_acquire_recursive>
 8014736:	bf00      	nop
 8014738:	200072c8 	.word	0x200072c8

0801473c <__sfp_lock_release>:
 801473c:	4801      	ldr	r0, [pc, #4]	; (8014744 <__sfp_lock_release+0x8>)
 801473e:	f000 b8c0 	b.w	80148c2 <__retarget_lock_release_recursive>
 8014742:	bf00      	nop
 8014744:	200072c8 	.word	0x200072c8

08014748 <__sinit_lock_acquire>:
 8014748:	4801      	ldr	r0, [pc, #4]	; (8014750 <__sinit_lock_acquire+0x8>)
 801474a:	f000 b8b9 	b.w	80148c0 <__retarget_lock_acquire_recursive>
 801474e:	bf00      	nop
 8014750:	200072c3 	.word	0x200072c3

08014754 <__sinit_lock_release>:
 8014754:	4801      	ldr	r0, [pc, #4]	; (801475c <__sinit_lock_release+0x8>)
 8014756:	f000 b8b4 	b.w	80148c2 <__retarget_lock_release_recursive>
 801475a:	bf00      	nop
 801475c:	200072c3 	.word	0x200072c3

08014760 <__sinit>:
 8014760:	b510      	push	{r4, lr}
 8014762:	4604      	mov	r4, r0
 8014764:	f7ff fff0 	bl	8014748 <__sinit_lock_acquire>
 8014768:	69a3      	ldr	r3, [r4, #24]
 801476a:	b11b      	cbz	r3, 8014774 <__sinit+0x14>
 801476c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014770:	f7ff bff0 	b.w	8014754 <__sinit_lock_release>
 8014774:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8014778:	6523      	str	r3, [r4, #80]	; 0x50
 801477a:	4b13      	ldr	r3, [pc, #76]	; (80147c8 <__sinit+0x68>)
 801477c:	4a13      	ldr	r2, [pc, #76]	; (80147cc <__sinit+0x6c>)
 801477e:	681b      	ldr	r3, [r3, #0]
 8014780:	62a2      	str	r2, [r4, #40]	; 0x28
 8014782:	42a3      	cmp	r3, r4
 8014784:	bf04      	itt	eq
 8014786:	2301      	moveq	r3, #1
 8014788:	61a3      	streq	r3, [r4, #24]
 801478a:	4620      	mov	r0, r4
 801478c:	f000 f820 	bl	80147d0 <__sfp>
 8014790:	6060      	str	r0, [r4, #4]
 8014792:	4620      	mov	r0, r4
 8014794:	f000 f81c 	bl	80147d0 <__sfp>
 8014798:	60a0      	str	r0, [r4, #8]
 801479a:	4620      	mov	r0, r4
 801479c:	f000 f818 	bl	80147d0 <__sfp>
 80147a0:	2200      	movs	r2, #0
 80147a2:	60e0      	str	r0, [r4, #12]
 80147a4:	2104      	movs	r1, #4
 80147a6:	6860      	ldr	r0, [r4, #4]
 80147a8:	f7ff ff82 	bl	80146b0 <std>
 80147ac:	68a0      	ldr	r0, [r4, #8]
 80147ae:	2201      	movs	r2, #1
 80147b0:	2109      	movs	r1, #9
 80147b2:	f7ff ff7d 	bl	80146b0 <std>
 80147b6:	68e0      	ldr	r0, [r4, #12]
 80147b8:	2202      	movs	r2, #2
 80147ba:	2112      	movs	r1, #18
 80147bc:	f7ff ff78 	bl	80146b0 <std>
 80147c0:	2301      	movs	r3, #1
 80147c2:	61a3      	str	r3, [r4, #24]
 80147c4:	e7d2      	b.n	801476c <__sinit+0xc>
 80147c6:	bf00      	nop
 80147c8:	08018454 	.word	0x08018454
 80147cc:	080146f9 	.word	0x080146f9

080147d0 <__sfp>:
 80147d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80147d2:	4607      	mov	r7, r0
 80147d4:	f7ff ffac 	bl	8014730 <__sfp_lock_acquire>
 80147d8:	4b1e      	ldr	r3, [pc, #120]	; (8014854 <__sfp+0x84>)
 80147da:	681e      	ldr	r6, [r3, #0]
 80147dc:	69b3      	ldr	r3, [r6, #24]
 80147de:	b913      	cbnz	r3, 80147e6 <__sfp+0x16>
 80147e0:	4630      	mov	r0, r6
 80147e2:	f7ff ffbd 	bl	8014760 <__sinit>
 80147e6:	3648      	adds	r6, #72	; 0x48
 80147e8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80147ec:	3b01      	subs	r3, #1
 80147ee:	d503      	bpl.n	80147f8 <__sfp+0x28>
 80147f0:	6833      	ldr	r3, [r6, #0]
 80147f2:	b30b      	cbz	r3, 8014838 <__sfp+0x68>
 80147f4:	6836      	ldr	r6, [r6, #0]
 80147f6:	e7f7      	b.n	80147e8 <__sfp+0x18>
 80147f8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80147fc:	b9d5      	cbnz	r5, 8014834 <__sfp+0x64>
 80147fe:	4b16      	ldr	r3, [pc, #88]	; (8014858 <__sfp+0x88>)
 8014800:	60e3      	str	r3, [r4, #12]
 8014802:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8014806:	6665      	str	r5, [r4, #100]	; 0x64
 8014808:	f000 f859 	bl	80148be <__retarget_lock_init_recursive>
 801480c:	f7ff ff96 	bl	801473c <__sfp_lock_release>
 8014810:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8014814:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8014818:	6025      	str	r5, [r4, #0]
 801481a:	61a5      	str	r5, [r4, #24]
 801481c:	2208      	movs	r2, #8
 801481e:	4629      	mov	r1, r5
 8014820:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8014824:	f7ff fea6 	bl	8014574 <memset>
 8014828:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801482c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8014830:	4620      	mov	r0, r4
 8014832:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014834:	3468      	adds	r4, #104	; 0x68
 8014836:	e7d9      	b.n	80147ec <__sfp+0x1c>
 8014838:	2104      	movs	r1, #4
 801483a:	4638      	mov	r0, r7
 801483c:	f7ff ff62 	bl	8014704 <__sfmoreglue>
 8014840:	4604      	mov	r4, r0
 8014842:	6030      	str	r0, [r6, #0]
 8014844:	2800      	cmp	r0, #0
 8014846:	d1d5      	bne.n	80147f4 <__sfp+0x24>
 8014848:	f7ff ff78 	bl	801473c <__sfp_lock_release>
 801484c:	230c      	movs	r3, #12
 801484e:	603b      	str	r3, [r7, #0]
 8014850:	e7ee      	b.n	8014830 <__sfp+0x60>
 8014852:	bf00      	nop
 8014854:	08018454 	.word	0x08018454
 8014858:	ffff0001 	.word	0xffff0001

0801485c <fiprintf>:
 801485c:	b40e      	push	{r1, r2, r3}
 801485e:	b503      	push	{r0, r1, lr}
 8014860:	4601      	mov	r1, r0
 8014862:	ab03      	add	r3, sp, #12
 8014864:	4805      	ldr	r0, [pc, #20]	; (801487c <fiprintf+0x20>)
 8014866:	f853 2b04 	ldr.w	r2, [r3], #4
 801486a:	6800      	ldr	r0, [r0, #0]
 801486c:	9301      	str	r3, [sp, #4]
 801486e:	f000 fa61 	bl	8014d34 <_vfiprintf_r>
 8014872:	b002      	add	sp, #8
 8014874:	f85d eb04 	ldr.w	lr, [sp], #4
 8014878:	b003      	add	sp, #12
 801487a:	4770      	bx	lr
 801487c:	20000014 	.word	0x20000014

08014880 <_fwalk_reent>:
 8014880:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014884:	4606      	mov	r6, r0
 8014886:	4688      	mov	r8, r1
 8014888:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801488c:	2700      	movs	r7, #0
 801488e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8014892:	f1b9 0901 	subs.w	r9, r9, #1
 8014896:	d505      	bpl.n	80148a4 <_fwalk_reent+0x24>
 8014898:	6824      	ldr	r4, [r4, #0]
 801489a:	2c00      	cmp	r4, #0
 801489c:	d1f7      	bne.n	801488e <_fwalk_reent+0xe>
 801489e:	4638      	mov	r0, r7
 80148a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80148a4:	89ab      	ldrh	r3, [r5, #12]
 80148a6:	2b01      	cmp	r3, #1
 80148a8:	d907      	bls.n	80148ba <_fwalk_reent+0x3a>
 80148aa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80148ae:	3301      	adds	r3, #1
 80148b0:	d003      	beq.n	80148ba <_fwalk_reent+0x3a>
 80148b2:	4629      	mov	r1, r5
 80148b4:	4630      	mov	r0, r6
 80148b6:	47c0      	blx	r8
 80148b8:	4307      	orrs	r7, r0
 80148ba:	3568      	adds	r5, #104	; 0x68
 80148bc:	e7e9      	b.n	8014892 <_fwalk_reent+0x12>

080148be <__retarget_lock_init_recursive>:
 80148be:	4770      	bx	lr

080148c0 <__retarget_lock_acquire_recursive>:
 80148c0:	4770      	bx	lr

080148c2 <__retarget_lock_release_recursive>:
 80148c2:	4770      	bx	lr

080148c4 <malloc>:
 80148c4:	4b02      	ldr	r3, [pc, #8]	; (80148d0 <malloc+0xc>)
 80148c6:	4601      	mov	r1, r0
 80148c8:	6818      	ldr	r0, [r3, #0]
 80148ca:	f000 b853 	b.w	8014974 <_malloc_r>
 80148ce:	bf00      	nop
 80148d0:	20000014 	.word	0x20000014

080148d4 <_free_r>:
 80148d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80148d6:	2900      	cmp	r1, #0
 80148d8:	d048      	beq.n	801496c <_free_r+0x98>
 80148da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80148de:	9001      	str	r0, [sp, #4]
 80148e0:	2b00      	cmp	r3, #0
 80148e2:	f1a1 0404 	sub.w	r4, r1, #4
 80148e6:	bfb8      	it	lt
 80148e8:	18e4      	addlt	r4, r4, r3
 80148ea:	f000 ff5d 	bl	80157a8 <__malloc_lock>
 80148ee:	4a20      	ldr	r2, [pc, #128]	; (8014970 <_free_r+0x9c>)
 80148f0:	9801      	ldr	r0, [sp, #4]
 80148f2:	6813      	ldr	r3, [r2, #0]
 80148f4:	4615      	mov	r5, r2
 80148f6:	b933      	cbnz	r3, 8014906 <_free_r+0x32>
 80148f8:	6063      	str	r3, [r4, #4]
 80148fa:	6014      	str	r4, [r2, #0]
 80148fc:	b003      	add	sp, #12
 80148fe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014902:	f000 bf57 	b.w	80157b4 <__malloc_unlock>
 8014906:	42a3      	cmp	r3, r4
 8014908:	d90b      	bls.n	8014922 <_free_r+0x4e>
 801490a:	6821      	ldr	r1, [r4, #0]
 801490c:	1862      	adds	r2, r4, r1
 801490e:	4293      	cmp	r3, r2
 8014910:	bf04      	itt	eq
 8014912:	681a      	ldreq	r2, [r3, #0]
 8014914:	685b      	ldreq	r3, [r3, #4]
 8014916:	6063      	str	r3, [r4, #4]
 8014918:	bf04      	itt	eq
 801491a:	1852      	addeq	r2, r2, r1
 801491c:	6022      	streq	r2, [r4, #0]
 801491e:	602c      	str	r4, [r5, #0]
 8014920:	e7ec      	b.n	80148fc <_free_r+0x28>
 8014922:	461a      	mov	r2, r3
 8014924:	685b      	ldr	r3, [r3, #4]
 8014926:	b10b      	cbz	r3, 801492c <_free_r+0x58>
 8014928:	42a3      	cmp	r3, r4
 801492a:	d9fa      	bls.n	8014922 <_free_r+0x4e>
 801492c:	6811      	ldr	r1, [r2, #0]
 801492e:	1855      	adds	r5, r2, r1
 8014930:	42a5      	cmp	r5, r4
 8014932:	d10b      	bne.n	801494c <_free_r+0x78>
 8014934:	6824      	ldr	r4, [r4, #0]
 8014936:	4421      	add	r1, r4
 8014938:	1854      	adds	r4, r2, r1
 801493a:	42a3      	cmp	r3, r4
 801493c:	6011      	str	r1, [r2, #0]
 801493e:	d1dd      	bne.n	80148fc <_free_r+0x28>
 8014940:	681c      	ldr	r4, [r3, #0]
 8014942:	685b      	ldr	r3, [r3, #4]
 8014944:	6053      	str	r3, [r2, #4]
 8014946:	4421      	add	r1, r4
 8014948:	6011      	str	r1, [r2, #0]
 801494a:	e7d7      	b.n	80148fc <_free_r+0x28>
 801494c:	d902      	bls.n	8014954 <_free_r+0x80>
 801494e:	230c      	movs	r3, #12
 8014950:	6003      	str	r3, [r0, #0]
 8014952:	e7d3      	b.n	80148fc <_free_r+0x28>
 8014954:	6825      	ldr	r5, [r4, #0]
 8014956:	1961      	adds	r1, r4, r5
 8014958:	428b      	cmp	r3, r1
 801495a:	bf04      	itt	eq
 801495c:	6819      	ldreq	r1, [r3, #0]
 801495e:	685b      	ldreq	r3, [r3, #4]
 8014960:	6063      	str	r3, [r4, #4]
 8014962:	bf04      	itt	eq
 8014964:	1949      	addeq	r1, r1, r5
 8014966:	6021      	streq	r1, [r4, #0]
 8014968:	6054      	str	r4, [r2, #4]
 801496a:	e7c7      	b.n	80148fc <_free_r+0x28>
 801496c:	b003      	add	sp, #12
 801496e:	bd30      	pop	{r4, r5, pc}
 8014970:	20000224 	.word	0x20000224

08014974 <_malloc_r>:
 8014974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014976:	1ccd      	adds	r5, r1, #3
 8014978:	f025 0503 	bic.w	r5, r5, #3
 801497c:	3508      	adds	r5, #8
 801497e:	2d0c      	cmp	r5, #12
 8014980:	bf38      	it	cc
 8014982:	250c      	movcc	r5, #12
 8014984:	2d00      	cmp	r5, #0
 8014986:	4606      	mov	r6, r0
 8014988:	db01      	blt.n	801498e <_malloc_r+0x1a>
 801498a:	42a9      	cmp	r1, r5
 801498c:	d903      	bls.n	8014996 <_malloc_r+0x22>
 801498e:	230c      	movs	r3, #12
 8014990:	6033      	str	r3, [r6, #0]
 8014992:	2000      	movs	r0, #0
 8014994:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014996:	f000 ff07 	bl	80157a8 <__malloc_lock>
 801499a:	4921      	ldr	r1, [pc, #132]	; (8014a20 <_malloc_r+0xac>)
 801499c:	680a      	ldr	r2, [r1, #0]
 801499e:	4614      	mov	r4, r2
 80149a0:	b99c      	cbnz	r4, 80149ca <_malloc_r+0x56>
 80149a2:	4f20      	ldr	r7, [pc, #128]	; (8014a24 <_malloc_r+0xb0>)
 80149a4:	683b      	ldr	r3, [r7, #0]
 80149a6:	b923      	cbnz	r3, 80149b2 <_malloc_r+0x3e>
 80149a8:	4621      	mov	r1, r4
 80149aa:	4630      	mov	r0, r6
 80149ac:	f000 fc86 	bl	80152bc <_sbrk_r>
 80149b0:	6038      	str	r0, [r7, #0]
 80149b2:	4629      	mov	r1, r5
 80149b4:	4630      	mov	r0, r6
 80149b6:	f000 fc81 	bl	80152bc <_sbrk_r>
 80149ba:	1c43      	adds	r3, r0, #1
 80149bc:	d123      	bne.n	8014a06 <_malloc_r+0x92>
 80149be:	230c      	movs	r3, #12
 80149c0:	6033      	str	r3, [r6, #0]
 80149c2:	4630      	mov	r0, r6
 80149c4:	f000 fef6 	bl	80157b4 <__malloc_unlock>
 80149c8:	e7e3      	b.n	8014992 <_malloc_r+0x1e>
 80149ca:	6823      	ldr	r3, [r4, #0]
 80149cc:	1b5b      	subs	r3, r3, r5
 80149ce:	d417      	bmi.n	8014a00 <_malloc_r+0x8c>
 80149d0:	2b0b      	cmp	r3, #11
 80149d2:	d903      	bls.n	80149dc <_malloc_r+0x68>
 80149d4:	6023      	str	r3, [r4, #0]
 80149d6:	441c      	add	r4, r3
 80149d8:	6025      	str	r5, [r4, #0]
 80149da:	e004      	b.n	80149e6 <_malloc_r+0x72>
 80149dc:	6863      	ldr	r3, [r4, #4]
 80149de:	42a2      	cmp	r2, r4
 80149e0:	bf0c      	ite	eq
 80149e2:	600b      	streq	r3, [r1, #0]
 80149e4:	6053      	strne	r3, [r2, #4]
 80149e6:	4630      	mov	r0, r6
 80149e8:	f000 fee4 	bl	80157b4 <__malloc_unlock>
 80149ec:	f104 000b 	add.w	r0, r4, #11
 80149f0:	1d23      	adds	r3, r4, #4
 80149f2:	f020 0007 	bic.w	r0, r0, #7
 80149f6:	1ac2      	subs	r2, r0, r3
 80149f8:	d0cc      	beq.n	8014994 <_malloc_r+0x20>
 80149fa:	1a1b      	subs	r3, r3, r0
 80149fc:	50a3      	str	r3, [r4, r2]
 80149fe:	e7c9      	b.n	8014994 <_malloc_r+0x20>
 8014a00:	4622      	mov	r2, r4
 8014a02:	6864      	ldr	r4, [r4, #4]
 8014a04:	e7cc      	b.n	80149a0 <_malloc_r+0x2c>
 8014a06:	1cc4      	adds	r4, r0, #3
 8014a08:	f024 0403 	bic.w	r4, r4, #3
 8014a0c:	42a0      	cmp	r0, r4
 8014a0e:	d0e3      	beq.n	80149d8 <_malloc_r+0x64>
 8014a10:	1a21      	subs	r1, r4, r0
 8014a12:	4630      	mov	r0, r6
 8014a14:	f000 fc52 	bl	80152bc <_sbrk_r>
 8014a18:	3001      	adds	r0, #1
 8014a1a:	d1dd      	bne.n	80149d8 <_malloc_r+0x64>
 8014a1c:	e7cf      	b.n	80149be <_malloc_r+0x4a>
 8014a1e:	bf00      	nop
 8014a20:	20000224 	.word	0x20000224
 8014a24:	20000228 	.word	0x20000228

08014a28 <__ssputs_r>:
 8014a28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014a2c:	688e      	ldr	r6, [r1, #8]
 8014a2e:	429e      	cmp	r6, r3
 8014a30:	4682      	mov	sl, r0
 8014a32:	460c      	mov	r4, r1
 8014a34:	4690      	mov	r8, r2
 8014a36:	461f      	mov	r7, r3
 8014a38:	d838      	bhi.n	8014aac <__ssputs_r+0x84>
 8014a3a:	898a      	ldrh	r2, [r1, #12]
 8014a3c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8014a40:	d032      	beq.n	8014aa8 <__ssputs_r+0x80>
 8014a42:	6825      	ldr	r5, [r4, #0]
 8014a44:	6909      	ldr	r1, [r1, #16]
 8014a46:	eba5 0901 	sub.w	r9, r5, r1
 8014a4a:	6965      	ldr	r5, [r4, #20]
 8014a4c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014a50:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8014a54:	3301      	adds	r3, #1
 8014a56:	444b      	add	r3, r9
 8014a58:	106d      	asrs	r5, r5, #1
 8014a5a:	429d      	cmp	r5, r3
 8014a5c:	bf38      	it	cc
 8014a5e:	461d      	movcc	r5, r3
 8014a60:	0553      	lsls	r3, r2, #21
 8014a62:	d531      	bpl.n	8014ac8 <__ssputs_r+0xa0>
 8014a64:	4629      	mov	r1, r5
 8014a66:	f7ff ff85 	bl	8014974 <_malloc_r>
 8014a6a:	4606      	mov	r6, r0
 8014a6c:	b950      	cbnz	r0, 8014a84 <__ssputs_r+0x5c>
 8014a6e:	230c      	movs	r3, #12
 8014a70:	f8ca 3000 	str.w	r3, [sl]
 8014a74:	89a3      	ldrh	r3, [r4, #12]
 8014a76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014a7a:	81a3      	strh	r3, [r4, #12]
 8014a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8014a80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014a84:	6921      	ldr	r1, [r4, #16]
 8014a86:	464a      	mov	r2, r9
 8014a88:	f7ff fd4c 	bl	8014524 <memcpy>
 8014a8c:	89a3      	ldrh	r3, [r4, #12]
 8014a8e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8014a92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014a96:	81a3      	strh	r3, [r4, #12]
 8014a98:	6126      	str	r6, [r4, #16]
 8014a9a:	6165      	str	r5, [r4, #20]
 8014a9c:	444e      	add	r6, r9
 8014a9e:	eba5 0509 	sub.w	r5, r5, r9
 8014aa2:	6026      	str	r6, [r4, #0]
 8014aa4:	60a5      	str	r5, [r4, #8]
 8014aa6:	463e      	mov	r6, r7
 8014aa8:	42be      	cmp	r6, r7
 8014aaa:	d900      	bls.n	8014aae <__ssputs_r+0x86>
 8014aac:	463e      	mov	r6, r7
 8014aae:	4632      	mov	r2, r6
 8014ab0:	6820      	ldr	r0, [r4, #0]
 8014ab2:	4641      	mov	r1, r8
 8014ab4:	f7ff fd44 	bl	8014540 <memmove>
 8014ab8:	68a3      	ldr	r3, [r4, #8]
 8014aba:	6822      	ldr	r2, [r4, #0]
 8014abc:	1b9b      	subs	r3, r3, r6
 8014abe:	4432      	add	r2, r6
 8014ac0:	60a3      	str	r3, [r4, #8]
 8014ac2:	6022      	str	r2, [r4, #0]
 8014ac4:	2000      	movs	r0, #0
 8014ac6:	e7db      	b.n	8014a80 <__ssputs_r+0x58>
 8014ac8:	462a      	mov	r2, r5
 8014aca:	f000 fe79 	bl	80157c0 <_realloc_r>
 8014ace:	4606      	mov	r6, r0
 8014ad0:	2800      	cmp	r0, #0
 8014ad2:	d1e1      	bne.n	8014a98 <__ssputs_r+0x70>
 8014ad4:	6921      	ldr	r1, [r4, #16]
 8014ad6:	4650      	mov	r0, sl
 8014ad8:	f7ff fefc 	bl	80148d4 <_free_r>
 8014adc:	e7c7      	b.n	8014a6e <__ssputs_r+0x46>
	...

08014ae0 <_svfiprintf_r>:
 8014ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014ae4:	4698      	mov	r8, r3
 8014ae6:	898b      	ldrh	r3, [r1, #12]
 8014ae8:	061b      	lsls	r3, r3, #24
 8014aea:	b09d      	sub	sp, #116	; 0x74
 8014aec:	4607      	mov	r7, r0
 8014aee:	460d      	mov	r5, r1
 8014af0:	4614      	mov	r4, r2
 8014af2:	d50e      	bpl.n	8014b12 <_svfiprintf_r+0x32>
 8014af4:	690b      	ldr	r3, [r1, #16]
 8014af6:	b963      	cbnz	r3, 8014b12 <_svfiprintf_r+0x32>
 8014af8:	2140      	movs	r1, #64	; 0x40
 8014afa:	f7ff ff3b 	bl	8014974 <_malloc_r>
 8014afe:	6028      	str	r0, [r5, #0]
 8014b00:	6128      	str	r0, [r5, #16]
 8014b02:	b920      	cbnz	r0, 8014b0e <_svfiprintf_r+0x2e>
 8014b04:	230c      	movs	r3, #12
 8014b06:	603b      	str	r3, [r7, #0]
 8014b08:	f04f 30ff 	mov.w	r0, #4294967295
 8014b0c:	e0d1      	b.n	8014cb2 <_svfiprintf_r+0x1d2>
 8014b0e:	2340      	movs	r3, #64	; 0x40
 8014b10:	616b      	str	r3, [r5, #20]
 8014b12:	2300      	movs	r3, #0
 8014b14:	9309      	str	r3, [sp, #36]	; 0x24
 8014b16:	2320      	movs	r3, #32
 8014b18:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014b1c:	f8cd 800c 	str.w	r8, [sp, #12]
 8014b20:	2330      	movs	r3, #48	; 0x30
 8014b22:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8014ccc <_svfiprintf_r+0x1ec>
 8014b26:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014b2a:	f04f 0901 	mov.w	r9, #1
 8014b2e:	4623      	mov	r3, r4
 8014b30:	469a      	mov	sl, r3
 8014b32:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014b36:	b10a      	cbz	r2, 8014b3c <_svfiprintf_r+0x5c>
 8014b38:	2a25      	cmp	r2, #37	; 0x25
 8014b3a:	d1f9      	bne.n	8014b30 <_svfiprintf_r+0x50>
 8014b3c:	ebba 0b04 	subs.w	fp, sl, r4
 8014b40:	d00b      	beq.n	8014b5a <_svfiprintf_r+0x7a>
 8014b42:	465b      	mov	r3, fp
 8014b44:	4622      	mov	r2, r4
 8014b46:	4629      	mov	r1, r5
 8014b48:	4638      	mov	r0, r7
 8014b4a:	f7ff ff6d 	bl	8014a28 <__ssputs_r>
 8014b4e:	3001      	adds	r0, #1
 8014b50:	f000 80aa 	beq.w	8014ca8 <_svfiprintf_r+0x1c8>
 8014b54:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014b56:	445a      	add	r2, fp
 8014b58:	9209      	str	r2, [sp, #36]	; 0x24
 8014b5a:	f89a 3000 	ldrb.w	r3, [sl]
 8014b5e:	2b00      	cmp	r3, #0
 8014b60:	f000 80a2 	beq.w	8014ca8 <_svfiprintf_r+0x1c8>
 8014b64:	2300      	movs	r3, #0
 8014b66:	f04f 32ff 	mov.w	r2, #4294967295
 8014b6a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014b6e:	f10a 0a01 	add.w	sl, sl, #1
 8014b72:	9304      	str	r3, [sp, #16]
 8014b74:	9307      	str	r3, [sp, #28]
 8014b76:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014b7a:	931a      	str	r3, [sp, #104]	; 0x68
 8014b7c:	4654      	mov	r4, sl
 8014b7e:	2205      	movs	r2, #5
 8014b80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014b84:	4851      	ldr	r0, [pc, #324]	; (8014ccc <_svfiprintf_r+0x1ec>)
 8014b86:	f7eb fb33 	bl	80001f0 <memchr>
 8014b8a:	9a04      	ldr	r2, [sp, #16]
 8014b8c:	b9d8      	cbnz	r0, 8014bc6 <_svfiprintf_r+0xe6>
 8014b8e:	06d0      	lsls	r0, r2, #27
 8014b90:	bf44      	itt	mi
 8014b92:	2320      	movmi	r3, #32
 8014b94:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014b98:	0711      	lsls	r1, r2, #28
 8014b9a:	bf44      	itt	mi
 8014b9c:	232b      	movmi	r3, #43	; 0x2b
 8014b9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014ba2:	f89a 3000 	ldrb.w	r3, [sl]
 8014ba6:	2b2a      	cmp	r3, #42	; 0x2a
 8014ba8:	d015      	beq.n	8014bd6 <_svfiprintf_r+0xf6>
 8014baa:	9a07      	ldr	r2, [sp, #28]
 8014bac:	4654      	mov	r4, sl
 8014bae:	2000      	movs	r0, #0
 8014bb0:	f04f 0c0a 	mov.w	ip, #10
 8014bb4:	4621      	mov	r1, r4
 8014bb6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014bba:	3b30      	subs	r3, #48	; 0x30
 8014bbc:	2b09      	cmp	r3, #9
 8014bbe:	d94e      	bls.n	8014c5e <_svfiprintf_r+0x17e>
 8014bc0:	b1b0      	cbz	r0, 8014bf0 <_svfiprintf_r+0x110>
 8014bc2:	9207      	str	r2, [sp, #28]
 8014bc4:	e014      	b.n	8014bf0 <_svfiprintf_r+0x110>
 8014bc6:	eba0 0308 	sub.w	r3, r0, r8
 8014bca:	fa09 f303 	lsl.w	r3, r9, r3
 8014bce:	4313      	orrs	r3, r2
 8014bd0:	9304      	str	r3, [sp, #16]
 8014bd2:	46a2      	mov	sl, r4
 8014bd4:	e7d2      	b.n	8014b7c <_svfiprintf_r+0x9c>
 8014bd6:	9b03      	ldr	r3, [sp, #12]
 8014bd8:	1d19      	adds	r1, r3, #4
 8014bda:	681b      	ldr	r3, [r3, #0]
 8014bdc:	9103      	str	r1, [sp, #12]
 8014bde:	2b00      	cmp	r3, #0
 8014be0:	bfbb      	ittet	lt
 8014be2:	425b      	neglt	r3, r3
 8014be4:	f042 0202 	orrlt.w	r2, r2, #2
 8014be8:	9307      	strge	r3, [sp, #28]
 8014bea:	9307      	strlt	r3, [sp, #28]
 8014bec:	bfb8      	it	lt
 8014bee:	9204      	strlt	r2, [sp, #16]
 8014bf0:	7823      	ldrb	r3, [r4, #0]
 8014bf2:	2b2e      	cmp	r3, #46	; 0x2e
 8014bf4:	d10c      	bne.n	8014c10 <_svfiprintf_r+0x130>
 8014bf6:	7863      	ldrb	r3, [r4, #1]
 8014bf8:	2b2a      	cmp	r3, #42	; 0x2a
 8014bfa:	d135      	bne.n	8014c68 <_svfiprintf_r+0x188>
 8014bfc:	9b03      	ldr	r3, [sp, #12]
 8014bfe:	1d1a      	adds	r2, r3, #4
 8014c00:	681b      	ldr	r3, [r3, #0]
 8014c02:	9203      	str	r2, [sp, #12]
 8014c04:	2b00      	cmp	r3, #0
 8014c06:	bfb8      	it	lt
 8014c08:	f04f 33ff 	movlt.w	r3, #4294967295
 8014c0c:	3402      	adds	r4, #2
 8014c0e:	9305      	str	r3, [sp, #20]
 8014c10:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8014cdc <_svfiprintf_r+0x1fc>
 8014c14:	7821      	ldrb	r1, [r4, #0]
 8014c16:	2203      	movs	r2, #3
 8014c18:	4650      	mov	r0, sl
 8014c1a:	f7eb fae9 	bl	80001f0 <memchr>
 8014c1e:	b140      	cbz	r0, 8014c32 <_svfiprintf_r+0x152>
 8014c20:	2340      	movs	r3, #64	; 0x40
 8014c22:	eba0 000a 	sub.w	r0, r0, sl
 8014c26:	fa03 f000 	lsl.w	r0, r3, r0
 8014c2a:	9b04      	ldr	r3, [sp, #16]
 8014c2c:	4303      	orrs	r3, r0
 8014c2e:	3401      	adds	r4, #1
 8014c30:	9304      	str	r3, [sp, #16]
 8014c32:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014c36:	4826      	ldr	r0, [pc, #152]	; (8014cd0 <_svfiprintf_r+0x1f0>)
 8014c38:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014c3c:	2206      	movs	r2, #6
 8014c3e:	f7eb fad7 	bl	80001f0 <memchr>
 8014c42:	2800      	cmp	r0, #0
 8014c44:	d038      	beq.n	8014cb8 <_svfiprintf_r+0x1d8>
 8014c46:	4b23      	ldr	r3, [pc, #140]	; (8014cd4 <_svfiprintf_r+0x1f4>)
 8014c48:	bb1b      	cbnz	r3, 8014c92 <_svfiprintf_r+0x1b2>
 8014c4a:	9b03      	ldr	r3, [sp, #12]
 8014c4c:	3307      	adds	r3, #7
 8014c4e:	f023 0307 	bic.w	r3, r3, #7
 8014c52:	3308      	adds	r3, #8
 8014c54:	9303      	str	r3, [sp, #12]
 8014c56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014c58:	4433      	add	r3, r6
 8014c5a:	9309      	str	r3, [sp, #36]	; 0x24
 8014c5c:	e767      	b.n	8014b2e <_svfiprintf_r+0x4e>
 8014c5e:	fb0c 3202 	mla	r2, ip, r2, r3
 8014c62:	460c      	mov	r4, r1
 8014c64:	2001      	movs	r0, #1
 8014c66:	e7a5      	b.n	8014bb4 <_svfiprintf_r+0xd4>
 8014c68:	2300      	movs	r3, #0
 8014c6a:	3401      	adds	r4, #1
 8014c6c:	9305      	str	r3, [sp, #20]
 8014c6e:	4619      	mov	r1, r3
 8014c70:	f04f 0c0a 	mov.w	ip, #10
 8014c74:	4620      	mov	r0, r4
 8014c76:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014c7a:	3a30      	subs	r2, #48	; 0x30
 8014c7c:	2a09      	cmp	r2, #9
 8014c7e:	d903      	bls.n	8014c88 <_svfiprintf_r+0x1a8>
 8014c80:	2b00      	cmp	r3, #0
 8014c82:	d0c5      	beq.n	8014c10 <_svfiprintf_r+0x130>
 8014c84:	9105      	str	r1, [sp, #20]
 8014c86:	e7c3      	b.n	8014c10 <_svfiprintf_r+0x130>
 8014c88:	fb0c 2101 	mla	r1, ip, r1, r2
 8014c8c:	4604      	mov	r4, r0
 8014c8e:	2301      	movs	r3, #1
 8014c90:	e7f0      	b.n	8014c74 <_svfiprintf_r+0x194>
 8014c92:	ab03      	add	r3, sp, #12
 8014c94:	9300      	str	r3, [sp, #0]
 8014c96:	462a      	mov	r2, r5
 8014c98:	4b0f      	ldr	r3, [pc, #60]	; (8014cd8 <_svfiprintf_r+0x1f8>)
 8014c9a:	a904      	add	r1, sp, #16
 8014c9c:	4638      	mov	r0, r7
 8014c9e:	f3af 8000 	nop.w
 8014ca2:	1c42      	adds	r2, r0, #1
 8014ca4:	4606      	mov	r6, r0
 8014ca6:	d1d6      	bne.n	8014c56 <_svfiprintf_r+0x176>
 8014ca8:	89ab      	ldrh	r3, [r5, #12]
 8014caa:	065b      	lsls	r3, r3, #25
 8014cac:	f53f af2c 	bmi.w	8014b08 <_svfiprintf_r+0x28>
 8014cb0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014cb2:	b01d      	add	sp, #116	; 0x74
 8014cb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014cb8:	ab03      	add	r3, sp, #12
 8014cba:	9300      	str	r3, [sp, #0]
 8014cbc:	462a      	mov	r2, r5
 8014cbe:	4b06      	ldr	r3, [pc, #24]	; (8014cd8 <_svfiprintf_r+0x1f8>)
 8014cc0:	a904      	add	r1, sp, #16
 8014cc2:	4638      	mov	r0, r7
 8014cc4:	f000 f9d4 	bl	8015070 <_printf_i>
 8014cc8:	e7eb      	b.n	8014ca2 <_svfiprintf_r+0x1c2>
 8014cca:	bf00      	nop
 8014ccc:	0801856c 	.word	0x0801856c
 8014cd0:	08018576 	.word	0x08018576
 8014cd4:	00000000 	.word	0x00000000
 8014cd8:	08014a29 	.word	0x08014a29
 8014cdc:	08018572 	.word	0x08018572

08014ce0 <__sfputc_r>:
 8014ce0:	6893      	ldr	r3, [r2, #8]
 8014ce2:	3b01      	subs	r3, #1
 8014ce4:	2b00      	cmp	r3, #0
 8014ce6:	b410      	push	{r4}
 8014ce8:	6093      	str	r3, [r2, #8]
 8014cea:	da08      	bge.n	8014cfe <__sfputc_r+0x1e>
 8014cec:	6994      	ldr	r4, [r2, #24]
 8014cee:	42a3      	cmp	r3, r4
 8014cf0:	db01      	blt.n	8014cf6 <__sfputc_r+0x16>
 8014cf2:	290a      	cmp	r1, #10
 8014cf4:	d103      	bne.n	8014cfe <__sfputc_r+0x1e>
 8014cf6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014cfa:	f000 bb33 	b.w	8015364 <__swbuf_r>
 8014cfe:	6813      	ldr	r3, [r2, #0]
 8014d00:	1c58      	adds	r0, r3, #1
 8014d02:	6010      	str	r0, [r2, #0]
 8014d04:	7019      	strb	r1, [r3, #0]
 8014d06:	4608      	mov	r0, r1
 8014d08:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014d0c:	4770      	bx	lr

08014d0e <__sfputs_r>:
 8014d0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014d10:	4606      	mov	r6, r0
 8014d12:	460f      	mov	r7, r1
 8014d14:	4614      	mov	r4, r2
 8014d16:	18d5      	adds	r5, r2, r3
 8014d18:	42ac      	cmp	r4, r5
 8014d1a:	d101      	bne.n	8014d20 <__sfputs_r+0x12>
 8014d1c:	2000      	movs	r0, #0
 8014d1e:	e007      	b.n	8014d30 <__sfputs_r+0x22>
 8014d20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014d24:	463a      	mov	r2, r7
 8014d26:	4630      	mov	r0, r6
 8014d28:	f7ff ffda 	bl	8014ce0 <__sfputc_r>
 8014d2c:	1c43      	adds	r3, r0, #1
 8014d2e:	d1f3      	bne.n	8014d18 <__sfputs_r+0xa>
 8014d30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014d34 <_vfiprintf_r>:
 8014d34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d38:	460d      	mov	r5, r1
 8014d3a:	b09d      	sub	sp, #116	; 0x74
 8014d3c:	4614      	mov	r4, r2
 8014d3e:	4698      	mov	r8, r3
 8014d40:	4606      	mov	r6, r0
 8014d42:	b118      	cbz	r0, 8014d4c <_vfiprintf_r+0x18>
 8014d44:	6983      	ldr	r3, [r0, #24]
 8014d46:	b90b      	cbnz	r3, 8014d4c <_vfiprintf_r+0x18>
 8014d48:	f7ff fd0a 	bl	8014760 <__sinit>
 8014d4c:	4b89      	ldr	r3, [pc, #548]	; (8014f74 <_vfiprintf_r+0x240>)
 8014d4e:	429d      	cmp	r5, r3
 8014d50:	d11b      	bne.n	8014d8a <_vfiprintf_r+0x56>
 8014d52:	6875      	ldr	r5, [r6, #4]
 8014d54:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014d56:	07d9      	lsls	r1, r3, #31
 8014d58:	d405      	bmi.n	8014d66 <_vfiprintf_r+0x32>
 8014d5a:	89ab      	ldrh	r3, [r5, #12]
 8014d5c:	059a      	lsls	r2, r3, #22
 8014d5e:	d402      	bmi.n	8014d66 <_vfiprintf_r+0x32>
 8014d60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014d62:	f7ff fdad 	bl	80148c0 <__retarget_lock_acquire_recursive>
 8014d66:	89ab      	ldrh	r3, [r5, #12]
 8014d68:	071b      	lsls	r3, r3, #28
 8014d6a:	d501      	bpl.n	8014d70 <_vfiprintf_r+0x3c>
 8014d6c:	692b      	ldr	r3, [r5, #16]
 8014d6e:	b9eb      	cbnz	r3, 8014dac <_vfiprintf_r+0x78>
 8014d70:	4629      	mov	r1, r5
 8014d72:	4630      	mov	r0, r6
 8014d74:	f000 fb5a 	bl	801542c <__swsetup_r>
 8014d78:	b1c0      	cbz	r0, 8014dac <_vfiprintf_r+0x78>
 8014d7a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014d7c:	07dc      	lsls	r4, r3, #31
 8014d7e:	d50e      	bpl.n	8014d9e <_vfiprintf_r+0x6a>
 8014d80:	f04f 30ff 	mov.w	r0, #4294967295
 8014d84:	b01d      	add	sp, #116	; 0x74
 8014d86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014d8a:	4b7b      	ldr	r3, [pc, #492]	; (8014f78 <_vfiprintf_r+0x244>)
 8014d8c:	429d      	cmp	r5, r3
 8014d8e:	d101      	bne.n	8014d94 <_vfiprintf_r+0x60>
 8014d90:	68b5      	ldr	r5, [r6, #8]
 8014d92:	e7df      	b.n	8014d54 <_vfiprintf_r+0x20>
 8014d94:	4b79      	ldr	r3, [pc, #484]	; (8014f7c <_vfiprintf_r+0x248>)
 8014d96:	429d      	cmp	r5, r3
 8014d98:	bf08      	it	eq
 8014d9a:	68f5      	ldreq	r5, [r6, #12]
 8014d9c:	e7da      	b.n	8014d54 <_vfiprintf_r+0x20>
 8014d9e:	89ab      	ldrh	r3, [r5, #12]
 8014da0:	0598      	lsls	r0, r3, #22
 8014da2:	d4ed      	bmi.n	8014d80 <_vfiprintf_r+0x4c>
 8014da4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014da6:	f7ff fd8c 	bl	80148c2 <__retarget_lock_release_recursive>
 8014daa:	e7e9      	b.n	8014d80 <_vfiprintf_r+0x4c>
 8014dac:	2300      	movs	r3, #0
 8014dae:	9309      	str	r3, [sp, #36]	; 0x24
 8014db0:	2320      	movs	r3, #32
 8014db2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014db6:	f8cd 800c 	str.w	r8, [sp, #12]
 8014dba:	2330      	movs	r3, #48	; 0x30
 8014dbc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8014f80 <_vfiprintf_r+0x24c>
 8014dc0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014dc4:	f04f 0901 	mov.w	r9, #1
 8014dc8:	4623      	mov	r3, r4
 8014dca:	469a      	mov	sl, r3
 8014dcc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014dd0:	b10a      	cbz	r2, 8014dd6 <_vfiprintf_r+0xa2>
 8014dd2:	2a25      	cmp	r2, #37	; 0x25
 8014dd4:	d1f9      	bne.n	8014dca <_vfiprintf_r+0x96>
 8014dd6:	ebba 0b04 	subs.w	fp, sl, r4
 8014dda:	d00b      	beq.n	8014df4 <_vfiprintf_r+0xc0>
 8014ddc:	465b      	mov	r3, fp
 8014dde:	4622      	mov	r2, r4
 8014de0:	4629      	mov	r1, r5
 8014de2:	4630      	mov	r0, r6
 8014de4:	f7ff ff93 	bl	8014d0e <__sfputs_r>
 8014de8:	3001      	adds	r0, #1
 8014dea:	f000 80aa 	beq.w	8014f42 <_vfiprintf_r+0x20e>
 8014dee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014df0:	445a      	add	r2, fp
 8014df2:	9209      	str	r2, [sp, #36]	; 0x24
 8014df4:	f89a 3000 	ldrb.w	r3, [sl]
 8014df8:	2b00      	cmp	r3, #0
 8014dfa:	f000 80a2 	beq.w	8014f42 <_vfiprintf_r+0x20e>
 8014dfe:	2300      	movs	r3, #0
 8014e00:	f04f 32ff 	mov.w	r2, #4294967295
 8014e04:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014e08:	f10a 0a01 	add.w	sl, sl, #1
 8014e0c:	9304      	str	r3, [sp, #16]
 8014e0e:	9307      	str	r3, [sp, #28]
 8014e10:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014e14:	931a      	str	r3, [sp, #104]	; 0x68
 8014e16:	4654      	mov	r4, sl
 8014e18:	2205      	movs	r2, #5
 8014e1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014e1e:	4858      	ldr	r0, [pc, #352]	; (8014f80 <_vfiprintf_r+0x24c>)
 8014e20:	f7eb f9e6 	bl	80001f0 <memchr>
 8014e24:	9a04      	ldr	r2, [sp, #16]
 8014e26:	b9d8      	cbnz	r0, 8014e60 <_vfiprintf_r+0x12c>
 8014e28:	06d1      	lsls	r1, r2, #27
 8014e2a:	bf44      	itt	mi
 8014e2c:	2320      	movmi	r3, #32
 8014e2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014e32:	0713      	lsls	r3, r2, #28
 8014e34:	bf44      	itt	mi
 8014e36:	232b      	movmi	r3, #43	; 0x2b
 8014e38:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014e3c:	f89a 3000 	ldrb.w	r3, [sl]
 8014e40:	2b2a      	cmp	r3, #42	; 0x2a
 8014e42:	d015      	beq.n	8014e70 <_vfiprintf_r+0x13c>
 8014e44:	9a07      	ldr	r2, [sp, #28]
 8014e46:	4654      	mov	r4, sl
 8014e48:	2000      	movs	r0, #0
 8014e4a:	f04f 0c0a 	mov.w	ip, #10
 8014e4e:	4621      	mov	r1, r4
 8014e50:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014e54:	3b30      	subs	r3, #48	; 0x30
 8014e56:	2b09      	cmp	r3, #9
 8014e58:	d94e      	bls.n	8014ef8 <_vfiprintf_r+0x1c4>
 8014e5a:	b1b0      	cbz	r0, 8014e8a <_vfiprintf_r+0x156>
 8014e5c:	9207      	str	r2, [sp, #28]
 8014e5e:	e014      	b.n	8014e8a <_vfiprintf_r+0x156>
 8014e60:	eba0 0308 	sub.w	r3, r0, r8
 8014e64:	fa09 f303 	lsl.w	r3, r9, r3
 8014e68:	4313      	orrs	r3, r2
 8014e6a:	9304      	str	r3, [sp, #16]
 8014e6c:	46a2      	mov	sl, r4
 8014e6e:	e7d2      	b.n	8014e16 <_vfiprintf_r+0xe2>
 8014e70:	9b03      	ldr	r3, [sp, #12]
 8014e72:	1d19      	adds	r1, r3, #4
 8014e74:	681b      	ldr	r3, [r3, #0]
 8014e76:	9103      	str	r1, [sp, #12]
 8014e78:	2b00      	cmp	r3, #0
 8014e7a:	bfbb      	ittet	lt
 8014e7c:	425b      	neglt	r3, r3
 8014e7e:	f042 0202 	orrlt.w	r2, r2, #2
 8014e82:	9307      	strge	r3, [sp, #28]
 8014e84:	9307      	strlt	r3, [sp, #28]
 8014e86:	bfb8      	it	lt
 8014e88:	9204      	strlt	r2, [sp, #16]
 8014e8a:	7823      	ldrb	r3, [r4, #0]
 8014e8c:	2b2e      	cmp	r3, #46	; 0x2e
 8014e8e:	d10c      	bne.n	8014eaa <_vfiprintf_r+0x176>
 8014e90:	7863      	ldrb	r3, [r4, #1]
 8014e92:	2b2a      	cmp	r3, #42	; 0x2a
 8014e94:	d135      	bne.n	8014f02 <_vfiprintf_r+0x1ce>
 8014e96:	9b03      	ldr	r3, [sp, #12]
 8014e98:	1d1a      	adds	r2, r3, #4
 8014e9a:	681b      	ldr	r3, [r3, #0]
 8014e9c:	9203      	str	r2, [sp, #12]
 8014e9e:	2b00      	cmp	r3, #0
 8014ea0:	bfb8      	it	lt
 8014ea2:	f04f 33ff 	movlt.w	r3, #4294967295
 8014ea6:	3402      	adds	r4, #2
 8014ea8:	9305      	str	r3, [sp, #20]
 8014eaa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8014f90 <_vfiprintf_r+0x25c>
 8014eae:	7821      	ldrb	r1, [r4, #0]
 8014eb0:	2203      	movs	r2, #3
 8014eb2:	4650      	mov	r0, sl
 8014eb4:	f7eb f99c 	bl	80001f0 <memchr>
 8014eb8:	b140      	cbz	r0, 8014ecc <_vfiprintf_r+0x198>
 8014eba:	2340      	movs	r3, #64	; 0x40
 8014ebc:	eba0 000a 	sub.w	r0, r0, sl
 8014ec0:	fa03 f000 	lsl.w	r0, r3, r0
 8014ec4:	9b04      	ldr	r3, [sp, #16]
 8014ec6:	4303      	orrs	r3, r0
 8014ec8:	3401      	adds	r4, #1
 8014eca:	9304      	str	r3, [sp, #16]
 8014ecc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014ed0:	482c      	ldr	r0, [pc, #176]	; (8014f84 <_vfiprintf_r+0x250>)
 8014ed2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014ed6:	2206      	movs	r2, #6
 8014ed8:	f7eb f98a 	bl	80001f0 <memchr>
 8014edc:	2800      	cmp	r0, #0
 8014ede:	d03f      	beq.n	8014f60 <_vfiprintf_r+0x22c>
 8014ee0:	4b29      	ldr	r3, [pc, #164]	; (8014f88 <_vfiprintf_r+0x254>)
 8014ee2:	bb1b      	cbnz	r3, 8014f2c <_vfiprintf_r+0x1f8>
 8014ee4:	9b03      	ldr	r3, [sp, #12]
 8014ee6:	3307      	adds	r3, #7
 8014ee8:	f023 0307 	bic.w	r3, r3, #7
 8014eec:	3308      	adds	r3, #8
 8014eee:	9303      	str	r3, [sp, #12]
 8014ef0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014ef2:	443b      	add	r3, r7
 8014ef4:	9309      	str	r3, [sp, #36]	; 0x24
 8014ef6:	e767      	b.n	8014dc8 <_vfiprintf_r+0x94>
 8014ef8:	fb0c 3202 	mla	r2, ip, r2, r3
 8014efc:	460c      	mov	r4, r1
 8014efe:	2001      	movs	r0, #1
 8014f00:	e7a5      	b.n	8014e4e <_vfiprintf_r+0x11a>
 8014f02:	2300      	movs	r3, #0
 8014f04:	3401      	adds	r4, #1
 8014f06:	9305      	str	r3, [sp, #20]
 8014f08:	4619      	mov	r1, r3
 8014f0a:	f04f 0c0a 	mov.w	ip, #10
 8014f0e:	4620      	mov	r0, r4
 8014f10:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014f14:	3a30      	subs	r2, #48	; 0x30
 8014f16:	2a09      	cmp	r2, #9
 8014f18:	d903      	bls.n	8014f22 <_vfiprintf_r+0x1ee>
 8014f1a:	2b00      	cmp	r3, #0
 8014f1c:	d0c5      	beq.n	8014eaa <_vfiprintf_r+0x176>
 8014f1e:	9105      	str	r1, [sp, #20]
 8014f20:	e7c3      	b.n	8014eaa <_vfiprintf_r+0x176>
 8014f22:	fb0c 2101 	mla	r1, ip, r1, r2
 8014f26:	4604      	mov	r4, r0
 8014f28:	2301      	movs	r3, #1
 8014f2a:	e7f0      	b.n	8014f0e <_vfiprintf_r+0x1da>
 8014f2c:	ab03      	add	r3, sp, #12
 8014f2e:	9300      	str	r3, [sp, #0]
 8014f30:	462a      	mov	r2, r5
 8014f32:	4b16      	ldr	r3, [pc, #88]	; (8014f8c <_vfiprintf_r+0x258>)
 8014f34:	a904      	add	r1, sp, #16
 8014f36:	4630      	mov	r0, r6
 8014f38:	f3af 8000 	nop.w
 8014f3c:	4607      	mov	r7, r0
 8014f3e:	1c78      	adds	r0, r7, #1
 8014f40:	d1d6      	bne.n	8014ef0 <_vfiprintf_r+0x1bc>
 8014f42:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014f44:	07d9      	lsls	r1, r3, #31
 8014f46:	d405      	bmi.n	8014f54 <_vfiprintf_r+0x220>
 8014f48:	89ab      	ldrh	r3, [r5, #12]
 8014f4a:	059a      	lsls	r2, r3, #22
 8014f4c:	d402      	bmi.n	8014f54 <_vfiprintf_r+0x220>
 8014f4e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014f50:	f7ff fcb7 	bl	80148c2 <__retarget_lock_release_recursive>
 8014f54:	89ab      	ldrh	r3, [r5, #12]
 8014f56:	065b      	lsls	r3, r3, #25
 8014f58:	f53f af12 	bmi.w	8014d80 <_vfiprintf_r+0x4c>
 8014f5c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014f5e:	e711      	b.n	8014d84 <_vfiprintf_r+0x50>
 8014f60:	ab03      	add	r3, sp, #12
 8014f62:	9300      	str	r3, [sp, #0]
 8014f64:	462a      	mov	r2, r5
 8014f66:	4b09      	ldr	r3, [pc, #36]	; (8014f8c <_vfiprintf_r+0x258>)
 8014f68:	a904      	add	r1, sp, #16
 8014f6a:	4630      	mov	r0, r6
 8014f6c:	f000 f880 	bl	8015070 <_printf_i>
 8014f70:	e7e4      	b.n	8014f3c <_vfiprintf_r+0x208>
 8014f72:	bf00      	nop
 8014f74:	0801852c 	.word	0x0801852c
 8014f78:	0801854c 	.word	0x0801854c
 8014f7c:	0801850c 	.word	0x0801850c
 8014f80:	0801856c 	.word	0x0801856c
 8014f84:	08018576 	.word	0x08018576
 8014f88:	00000000 	.word	0x00000000
 8014f8c:	08014d0f 	.word	0x08014d0f
 8014f90:	08018572 	.word	0x08018572

08014f94 <_printf_common>:
 8014f94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014f98:	4616      	mov	r6, r2
 8014f9a:	4699      	mov	r9, r3
 8014f9c:	688a      	ldr	r2, [r1, #8]
 8014f9e:	690b      	ldr	r3, [r1, #16]
 8014fa0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8014fa4:	4293      	cmp	r3, r2
 8014fa6:	bfb8      	it	lt
 8014fa8:	4613      	movlt	r3, r2
 8014faa:	6033      	str	r3, [r6, #0]
 8014fac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8014fb0:	4607      	mov	r7, r0
 8014fb2:	460c      	mov	r4, r1
 8014fb4:	b10a      	cbz	r2, 8014fba <_printf_common+0x26>
 8014fb6:	3301      	adds	r3, #1
 8014fb8:	6033      	str	r3, [r6, #0]
 8014fba:	6823      	ldr	r3, [r4, #0]
 8014fbc:	0699      	lsls	r1, r3, #26
 8014fbe:	bf42      	ittt	mi
 8014fc0:	6833      	ldrmi	r3, [r6, #0]
 8014fc2:	3302      	addmi	r3, #2
 8014fc4:	6033      	strmi	r3, [r6, #0]
 8014fc6:	6825      	ldr	r5, [r4, #0]
 8014fc8:	f015 0506 	ands.w	r5, r5, #6
 8014fcc:	d106      	bne.n	8014fdc <_printf_common+0x48>
 8014fce:	f104 0a19 	add.w	sl, r4, #25
 8014fd2:	68e3      	ldr	r3, [r4, #12]
 8014fd4:	6832      	ldr	r2, [r6, #0]
 8014fd6:	1a9b      	subs	r3, r3, r2
 8014fd8:	42ab      	cmp	r3, r5
 8014fda:	dc26      	bgt.n	801502a <_printf_common+0x96>
 8014fdc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8014fe0:	1e13      	subs	r3, r2, #0
 8014fe2:	6822      	ldr	r2, [r4, #0]
 8014fe4:	bf18      	it	ne
 8014fe6:	2301      	movne	r3, #1
 8014fe8:	0692      	lsls	r2, r2, #26
 8014fea:	d42b      	bmi.n	8015044 <_printf_common+0xb0>
 8014fec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8014ff0:	4649      	mov	r1, r9
 8014ff2:	4638      	mov	r0, r7
 8014ff4:	47c0      	blx	r8
 8014ff6:	3001      	adds	r0, #1
 8014ff8:	d01e      	beq.n	8015038 <_printf_common+0xa4>
 8014ffa:	6823      	ldr	r3, [r4, #0]
 8014ffc:	68e5      	ldr	r5, [r4, #12]
 8014ffe:	6832      	ldr	r2, [r6, #0]
 8015000:	f003 0306 	and.w	r3, r3, #6
 8015004:	2b04      	cmp	r3, #4
 8015006:	bf08      	it	eq
 8015008:	1aad      	subeq	r5, r5, r2
 801500a:	68a3      	ldr	r3, [r4, #8]
 801500c:	6922      	ldr	r2, [r4, #16]
 801500e:	bf0c      	ite	eq
 8015010:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8015014:	2500      	movne	r5, #0
 8015016:	4293      	cmp	r3, r2
 8015018:	bfc4      	itt	gt
 801501a:	1a9b      	subgt	r3, r3, r2
 801501c:	18ed      	addgt	r5, r5, r3
 801501e:	2600      	movs	r6, #0
 8015020:	341a      	adds	r4, #26
 8015022:	42b5      	cmp	r5, r6
 8015024:	d11a      	bne.n	801505c <_printf_common+0xc8>
 8015026:	2000      	movs	r0, #0
 8015028:	e008      	b.n	801503c <_printf_common+0xa8>
 801502a:	2301      	movs	r3, #1
 801502c:	4652      	mov	r2, sl
 801502e:	4649      	mov	r1, r9
 8015030:	4638      	mov	r0, r7
 8015032:	47c0      	blx	r8
 8015034:	3001      	adds	r0, #1
 8015036:	d103      	bne.n	8015040 <_printf_common+0xac>
 8015038:	f04f 30ff 	mov.w	r0, #4294967295
 801503c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015040:	3501      	adds	r5, #1
 8015042:	e7c6      	b.n	8014fd2 <_printf_common+0x3e>
 8015044:	18e1      	adds	r1, r4, r3
 8015046:	1c5a      	adds	r2, r3, #1
 8015048:	2030      	movs	r0, #48	; 0x30
 801504a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801504e:	4422      	add	r2, r4
 8015050:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8015054:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8015058:	3302      	adds	r3, #2
 801505a:	e7c7      	b.n	8014fec <_printf_common+0x58>
 801505c:	2301      	movs	r3, #1
 801505e:	4622      	mov	r2, r4
 8015060:	4649      	mov	r1, r9
 8015062:	4638      	mov	r0, r7
 8015064:	47c0      	blx	r8
 8015066:	3001      	adds	r0, #1
 8015068:	d0e6      	beq.n	8015038 <_printf_common+0xa4>
 801506a:	3601      	adds	r6, #1
 801506c:	e7d9      	b.n	8015022 <_printf_common+0x8e>
	...

08015070 <_printf_i>:
 8015070:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015074:	460c      	mov	r4, r1
 8015076:	4691      	mov	r9, r2
 8015078:	7e27      	ldrb	r7, [r4, #24]
 801507a:	990c      	ldr	r1, [sp, #48]	; 0x30
 801507c:	2f78      	cmp	r7, #120	; 0x78
 801507e:	4680      	mov	r8, r0
 8015080:	469a      	mov	sl, r3
 8015082:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8015086:	d807      	bhi.n	8015098 <_printf_i+0x28>
 8015088:	2f62      	cmp	r7, #98	; 0x62
 801508a:	d80a      	bhi.n	80150a2 <_printf_i+0x32>
 801508c:	2f00      	cmp	r7, #0
 801508e:	f000 80d8 	beq.w	8015242 <_printf_i+0x1d2>
 8015092:	2f58      	cmp	r7, #88	; 0x58
 8015094:	f000 80a3 	beq.w	80151de <_printf_i+0x16e>
 8015098:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801509c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80150a0:	e03a      	b.n	8015118 <_printf_i+0xa8>
 80150a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80150a6:	2b15      	cmp	r3, #21
 80150a8:	d8f6      	bhi.n	8015098 <_printf_i+0x28>
 80150aa:	a001      	add	r0, pc, #4	; (adr r0, 80150b0 <_printf_i+0x40>)
 80150ac:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80150b0:	08015109 	.word	0x08015109
 80150b4:	0801511d 	.word	0x0801511d
 80150b8:	08015099 	.word	0x08015099
 80150bc:	08015099 	.word	0x08015099
 80150c0:	08015099 	.word	0x08015099
 80150c4:	08015099 	.word	0x08015099
 80150c8:	0801511d 	.word	0x0801511d
 80150cc:	08015099 	.word	0x08015099
 80150d0:	08015099 	.word	0x08015099
 80150d4:	08015099 	.word	0x08015099
 80150d8:	08015099 	.word	0x08015099
 80150dc:	08015229 	.word	0x08015229
 80150e0:	0801514d 	.word	0x0801514d
 80150e4:	0801520b 	.word	0x0801520b
 80150e8:	08015099 	.word	0x08015099
 80150ec:	08015099 	.word	0x08015099
 80150f0:	0801524b 	.word	0x0801524b
 80150f4:	08015099 	.word	0x08015099
 80150f8:	0801514d 	.word	0x0801514d
 80150fc:	08015099 	.word	0x08015099
 8015100:	08015099 	.word	0x08015099
 8015104:	08015213 	.word	0x08015213
 8015108:	680b      	ldr	r3, [r1, #0]
 801510a:	1d1a      	adds	r2, r3, #4
 801510c:	681b      	ldr	r3, [r3, #0]
 801510e:	600a      	str	r2, [r1, #0]
 8015110:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8015114:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015118:	2301      	movs	r3, #1
 801511a:	e0a3      	b.n	8015264 <_printf_i+0x1f4>
 801511c:	6825      	ldr	r5, [r4, #0]
 801511e:	6808      	ldr	r0, [r1, #0]
 8015120:	062e      	lsls	r6, r5, #24
 8015122:	f100 0304 	add.w	r3, r0, #4
 8015126:	d50a      	bpl.n	801513e <_printf_i+0xce>
 8015128:	6805      	ldr	r5, [r0, #0]
 801512a:	600b      	str	r3, [r1, #0]
 801512c:	2d00      	cmp	r5, #0
 801512e:	da03      	bge.n	8015138 <_printf_i+0xc8>
 8015130:	232d      	movs	r3, #45	; 0x2d
 8015132:	426d      	negs	r5, r5
 8015134:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015138:	485e      	ldr	r0, [pc, #376]	; (80152b4 <_printf_i+0x244>)
 801513a:	230a      	movs	r3, #10
 801513c:	e019      	b.n	8015172 <_printf_i+0x102>
 801513e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8015142:	6805      	ldr	r5, [r0, #0]
 8015144:	600b      	str	r3, [r1, #0]
 8015146:	bf18      	it	ne
 8015148:	b22d      	sxthne	r5, r5
 801514a:	e7ef      	b.n	801512c <_printf_i+0xbc>
 801514c:	680b      	ldr	r3, [r1, #0]
 801514e:	6825      	ldr	r5, [r4, #0]
 8015150:	1d18      	adds	r0, r3, #4
 8015152:	6008      	str	r0, [r1, #0]
 8015154:	0628      	lsls	r0, r5, #24
 8015156:	d501      	bpl.n	801515c <_printf_i+0xec>
 8015158:	681d      	ldr	r5, [r3, #0]
 801515a:	e002      	b.n	8015162 <_printf_i+0xf2>
 801515c:	0669      	lsls	r1, r5, #25
 801515e:	d5fb      	bpl.n	8015158 <_printf_i+0xe8>
 8015160:	881d      	ldrh	r5, [r3, #0]
 8015162:	4854      	ldr	r0, [pc, #336]	; (80152b4 <_printf_i+0x244>)
 8015164:	2f6f      	cmp	r7, #111	; 0x6f
 8015166:	bf0c      	ite	eq
 8015168:	2308      	moveq	r3, #8
 801516a:	230a      	movne	r3, #10
 801516c:	2100      	movs	r1, #0
 801516e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8015172:	6866      	ldr	r6, [r4, #4]
 8015174:	60a6      	str	r6, [r4, #8]
 8015176:	2e00      	cmp	r6, #0
 8015178:	bfa2      	ittt	ge
 801517a:	6821      	ldrge	r1, [r4, #0]
 801517c:	f021 0104 	bicge.w	r1, r1, #4
 8015180:	6021      	strge	r1, [r4, #0]
 8015182:	b90d      	cbnz	r5, 8015188 <_printf_i+0x118>
 8015184:	2e00      	cmp	r6, #0
 8015186:	d04d      	beq.n	8015224 <_printf_i+0x1b4>
 8015188:	4616      	mov	r6, r2
 801518a:	fbb5 f1f3 	udiv	r1, r5, r3
 801518e:	fb03 5711 	mls	r7, r3, r1, r5
 8015192:	5dc7      	ldrb	r7, [r0, r7]
 8015194:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8015198:	462f      	mov	r7, r5
 801519a:	42bb      	cmp	r3, r7
 801519c:	460d      	mov	r5, r1
 801519e:	d9f4      	bls.n	801518a <_printf_i+0x11a>
 80151a0:	2b08      	cmp	r3, #8
 80151a2:	d10b      	bne.n	80151bc <_printf_i+0x14c>
 80151a4:	6823      	ldr	r3, [r4, #0]
 80151a6:	07df      	lsls	r7, r3, #31
 80151a8:	d508      	bpl.n	80151bc <_printf_i+0x14c>
 80151aa:	6923      	ldr	r3, [r4, #16]
 80151ac:	6861      	ldr	r1, [r4, #4]
 80151ae:	4299      	cmp	r1, r3
 80151b0:	bfde      	ittt	le
 80151b2:	2330      	movle	r3, #48	; 0x30
 80151b4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80151b8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80151bc:	1b92      	subs	r2, r2, r6
 80151be:	6122      	str	r2, [r4, #16]
 80151c0:	f8cd a000 	str.w	sl, [sp]
 80151c4:	464b      	mov	r3, r9
 80151c6:	aa03      	add	r2, sp, #12
 80151c8:	4621      	mov	r1, r4
 80151ca:	4640      	mov	r0, r8
 80151cc:	f7ff fee2 	bl	8014f94 <_printf_common>
 80151d0:	3001      	adds	r0, #1
 80151d2:	d14c      	bne.n	801526e <_printf_i+0x1fe>
 80151d4:	f04f 30ff 	mov.w	r0, #4294967295
 80151d8:	b004      	add	sp, #16
 80151da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80151de:	4835      	ldr	r0, [pc, #212]	; (80152b4 <_printf_i+0x244>)
 80151e0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80151e4:	6823      	ldr	r3, [r4, #0]
 80151e6:	680e      	ldr	r6, [r1, #0]
 80151e8:	061f      	lsls	r7, r3, #24
 80151ea:	f856 5b04 	ldr.w	r5, [r6], #4
 80151ee:	600e      	str	r6, [r1, #0]
 80151f0:	d514      	bpl.n	801521c <_printf_i+0x1ac>
 80151f2:	07d9      	lsls	r1, r3, #31
 80151f4:	bf44      	itt	mi
 80151f6:	f043 0320 	orrmi.w	r3, r3, #32
 80151fa:	6023      	strmi	r3, [r4, #0]
 80151fc:	b91d      	cbnz	r5, 8015206 <_printf_i+0x196>
 80151fe:	6823      	ldr	r3, [r4, #0]
 8015200:	f023 0320 	bic.w	r3, r3, #32
 8015204:	6023      	str	r3, [r4, #0]
 8015206:	2310      	movs	r3, #16
 8015208:	e7b0      	b.n	801516c <_printf_i+0xfc>
 801520a:	6823      	ldr	r3, [r4, #0]
 801520c:	f043 0320 	orr.w	r3, r3, #32
 8015210:	6023      	str	r3, [r4, #0]
 8015212:	2378      	movs	r3, #120	; 0x78
 8015214:	4828      	ldr	r0, [pc, #160]	; (80152b8 <_printf_i+0x248>)
 8015216:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801521a:	e7e3      	b.n	80151e4 <_printf_i+0x174>
 801521c:	065e      	lsls	r6, r3, #25
 801521e:	bf48      	it	mi
 8015220:	b2ad      	uxthmi	r5, r5
 8015222:	e7e6      	b.n	80151f2 <_printf_i+0x182>
 8015224:	4616      	mov	r6, r2
 8015226:	e7bb      	b.n	80151a0 <_printf_i+0x130>
 8015228:	680b      	ldr	r3, [r1, #0]
 801522a:	6826      	ldr	r6, [r4, #0]
 801522c:	6960      	ldr	r0, [r4, #20]
 801522e:	1d1d      	adds	r5, r3, #4
 8015230:	600d      	str	r5, [r1, #0]
 8015232:	0635      	lsls	r5, r6, #24
 8015234:	681b      	ldr	r3, [r3, #0]
 8015236:	d501      	bpl.n	801523c <_printf_i+0x1cc>
 8015238:	6018      	str	r0, [r3, #0]
 801523a:	e002      	b.n	8015242 <_printf_i+0x1d2>
 801523c:	0671      	lsls	r1, r6, #25
 801523e:	d5fb      	bpl.n	8015238 <_printf_i+0x1c8>
 8015240:	8018      	strh	r0, [r3, #0]
 8015242:	2300      	movs	r3, #0
 8015244:	6123      	str	r3, [r4, #16]
 8015246:	4616      	mov	r6, r2
 8015248:	e7ba      	b.n	80151c0 <_printf_i+0x150>
 801524a:	680b      	ldr	r3, [r1, #0]
 801524c:	1d1a      	adds	r2, r3, #4
 801524e:	600a      	str	r2, [r1, #0]
 8015250:	681e      	ldr	r6, [r3, #0]
 8015252:	6862      	ldr	r2, [r4, #4]
 8015254:	2100      	movs	r1, #0
 8015256:	4630      	mov	r0, r6
 8015258:	f7ea ffca 	bl	80001f0 <memchr>
 801525c:	b108      	cbz	r0, 8015262 <_printf_i+0x1f2>
 801525e:	1b80      	subs	r0, r0, r6
 8015260:	6060      	str	r0, [r4, #4]
 8015262:	6863      	ldr	r3, [r4, #4]
 8015264:	6123      	str	r3, [r4, #16]
 8015266:	2300      	movs	r3, #0
 8015268:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801526c:	e7a8      	b.n	80151c0 <_printf_i+0x150>
 801526e:	6923      	ldr	r3, [r4, #16]
 8015270:	4632      	mov	r2, r6
 8015272:	4649      	mov	r1, r9
 8015274:	4640      	mov	r0, r8
 8015276:	47d0      	blx	sl
 8015278:	3001      	adds	r0, #1
 801527a:	d0ab      	beq.n	80151d4 <_printf_i+0x164>
 801527c:	6823      	ldr	r3, [r4, #0]
 801527e:	079b      	lsls	r3, r3, #30
 8015280:	d413      	bmi.n	80152aa <_printf_i+0x23a>
 8015282:	68e0      	ldr	r0, [r4, #12]
 8015284:	9b03      	ldr	r3, [sp, #12]
 8015286:	4298      	cmp	r0, r3
 8015288:	bfb8      	it	lt
 801528a:	4618      	movlt	r0, r3
 801528c:	e7a4      	b.n	80151d8 <_printf_i+0x168>
 801528e:	2301      	movs	r3, #1
 8015290:	4632      	mov	r2, r6
 8015292:	4649      	mov	r1, r9
 8015294:	4640      	mov	r0, r8
 8015296:	47d0      	blx	sl
 8015298:	3001      	adds	r0, #1
 801529a:	d09b      	beq.n	80151d4 <_printf_i+0x164>
 801529c:	3501      	adds	r5, #1
 801529e:	68e3      	ldr	r3, [r4, #12]
 80152a0:	9903      	ldr	r1, [sp, #12]
 80152a2:	1a5b      	subs	r3, r3, r1
 80152a4:	42ab      	cmp	r3, r5
 80152a6:	dcf2      	bgt.n	801528e <_printf_i+0x21e>
 80152a8:	e7eb      	b.n	8015282 <_printf_i+0x212>
 80152aa:	2500      	movs	r5, #0
 80152ac:	f104 0619 	add.w	r6, r4, #25
 80152b0:	e7f5      	b.n	801529e <_printf_i+0x22e>
 80152b2:	bf00      	nop
 80152b4:	0801857d 	.word	0x0801857d
 80152b8:	0801858e 	.word	0x0801858e

080152bc <_sbrk_r>:
 80152bc:	b538      	push	{r3, r4, r5, lr}
 80152be:	4d06      	ldr	r5, [pc, #24]	; (80152d8 <_sbrk_r+0x1c>)
 80152c0:	2300      	movs	r3, #0
 80152c2:	4604      	mov	r4, r0
 80152c4:	4608      	mov	r0, r1
 80152c6:	602b      	str	r3, [r5, #0]
 80152c8:	f7ec f9a4 	bl	8001614 <_sbrk>
 80152cc:	1c43      	adds	r3, r0, #1
 80152ce:	d102      	bne.n	80152d6 <_sbrk_r+0x1a>
 80152d0:	682b      	ldr	r3, [r5, #0]
 80152d2:	b103      	cbz	r3, 80152d6 <_sbrk_r+0x1a>
 80152d4:	6023      	str	r3, [r4, #0]
 80152d6:	bd38      	pop	{r3, r4, r5, pc}
 80152d8:	200072bc 	.word	0x200072bc

080152dc <__sread>:
 80152dc:	b510      	push	{r4, lr}
 80152de:	460c      	mov	r4, r1
 80152e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80152e4:	f000 fa92 	bl	801580c <_read_r>
 80152e8:	2800      	cmp	r0, #0
 80152ea:	bfab      	itete	ge
 80152ec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80152ee:	89a3      	ldrhlt	r3, [r4, #12]
 80152f0:	181b      	addge	r3, r3, r0
 80152f2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80152f6:	bfac      	ite	ge
 80152f8:	6563      	strge	r3, [r4, #84]	; 0x54
 80152fa:	81a3      	strhlt	r3, [r4, #12]
 80152fc:	bd10      	pop	{r4, pc}

080152fe <__swrite>:
 80152fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015302:	461f      	mov	r7, r3
 8015304:	898b      	ldrh	r3, [r1, #12]
 8015306:	05db      	lsls	r3, r3, #23
 8015308:	4605      	mov	r5, r0
 801530a:	460c      	mov	r4, r1
 801530c:	4616      	mov	r6, r2
 801530e:	d505      	bpl.n	801531c <__swrite+0x1e>
 8015310:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015314:	2302      	movs	r3, #2
 8015316:	2200      	movs	r2, #0
 8015318:	f000 f9d0 	bl	80156bc <_lseek_r>
 801531c:	89a3      	ldrh	r3, [r4, #12]
 801531e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015322:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8015326:	81a3      	strh	r3, [r4, #12]
 8015328:	4632      	mov	r2, r6
 801532a:	463b      	mov	r3, r7
 801532c:	4628      	mov	r0, r5
 801532e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015332:	f000 b869 	b.w	8015408 <_write_r>

08015336 <__sseek>:
 8015336:	b510      	push	{r4, lr}
 8015338:	460c      	mov	r4, r1
 801533a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801533e:	f000 f9bd 	bl	80156bc <_lseek_r>
 8015342:	1c43      	adds	r3, r0, #1
 8015344:	89a3      	ldrh	r3, [r4, #12]
 8015346:	bf15      	itete	ne
 8015348:	6560      	strne	r0, [r4, #84]	; 0x54
 801534a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801534e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8015352:	81a3      	strheq	r3, [r4, #12]
 8015354:	bf18      	it	ne
 8015356:	81a3      	strhne	r3, [r4, #12]
 8015358:	bd10      	pop	{r4, pc}

0801535a <__sclose>:
 801535a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801535e:	f000 b8db 	b.w	8015518 <_close_r>
	...

08015364 <__swbuf_r>:
 8015364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015366:	460e      	mov	r6, r1
 8015368:	4614      	mov	r4, r2
 801536a:	4605      	mov	r5, r0
 801536c:	b118      	cbz	r0, 8015376 <__swbuf_r+0x12>
 801536e:	6983      	ldr	r3, [r0, #24]
 8015370:	b90b      	cbnz	r3, 8015376 <__swbuf_r+0x12>
 8015372:	f7ff f9f5 	bl	8014760 <__sinit>
 8015376:	4b21      	ldr	r3, [pc, #132]	; (80153fc <__swbuf_r+0x98>)
 8015378:	429c      	cmp	r4, r3
 801537a:	d12b      	bne.n	80153d4 <__swbuf_r+0x70>
 801537c:	686c      	ldr	r4, [r5, #4]
 801537e:	69a3      	ldr	r3, [r4, #24]
 8015380:	60a3      	str	r3, [r4, #8]
 8015382:	89a3      	ldrh	r3, [r4, #12]
 8015384:	071a      	lsls	r2, r3, #28
 8015386:	d52f      	bpl.n	80153e8 <__swbuf_r+0x84>
 8015388:	6923      	ldr	r3, [r4, #16]
 801538a:	b36b      	cbz	r3, 80153e8 <__swbuf_r+0x84>
 801538c:	6923      	ldr	r3, [r4, #16]
 801538e:	6820      	ldr	r0, [r4, #0]
 8015390:	1ac0      	subs	r0, r0, r3
 8015392:	6963      	ldr	r3, [r4, #20]
 8015394:	b2f6      	uxtb	r6, r6
 8015396:	4283      	cmp	r3, r0
 8015398:	4637      	mov	r7, r6
 801539a:	dc04      	bgt.n	80153a6 <__swbuf_r+0x42>
 801539c:	4621      	mov	r1, r4
 801539e:	4628      	mov	r0, r5
 80153a0:	f000 f950 	bl	8015644 <_fflush_r>
 80153a4:	bb30      	cbnz	r0, 80153f4 <__swbuf_r+0x90>
 80153a6:	68a3      	ldr	r3, [r4, #8]
 80153a8:	3b01      	subs	r3, #1
 80153aa:	60a3      	str	r3, [r4, #8]
 80153ac:	6823      	ldr	r3, [r4, #0]
 80153ae:	1c5a      	adds	r2, r3, #1
 80153b0:	6022      	str	r2, [r4, #0]
 80153b2:	701e      	strb	r6, [r3, #0]
 80153b4:	6963      	ldr	r3, [r4, #20]
 80153b6:	3001      	adds	r0, #1
 80153b8:	4283      	cmp	r3, r0
 80153ba:	d004      	beq.n	80153c6 <__swbuf_r+0x62>
 80153bc:	89a3      	ldrh	r3, [r4, #12]
 80153be:	07db      	lsls	r3, r3, #31
 80153c0:	d506      	bpl.n	80153d0 <__swbuf_r+0x6c>
 80153c2:	2e0a      	cmp	r6, #10
 80153c4:	d104      	bne.n	80153d0 <__swbuf_r+0x6c>
 80153c6:	4621      	mov	r1, r4
 80153c8:	4628      	mov	r0, r5
 80153ca:	f000 f93b 	bl	8015644 <_fflush_r>
 80153ce:	b988      	cbnz	r0, 80153f4 <__swbuf_r+0x90>
 80153d0:	4638      	mov	r0, r7
 80153d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80153d4:	4b0a      	ldr	r3, [pc, #40]	; (8015400 <__swbuf_r+0x9c>)
 80153d6:	429c      	cmp	r4, r3
 80153d8:	d101      	bne.n	80153de <__swbuf_r+0x7a>
 80153da:	68ac      	ldr	r4, [r5, #8]
 80153dc:	e7cf      	b.n	801537e <__swbuf_r+0x1a>
 80153de:	4b09      	ldr	r3, [pc, #36]	; (8015404 <__swbuf_r+0xa0>)
 80153e0:	429c      	cmp	r4, r3
 80153e2:	bf08      	it	eq
 80153e4:	68ec      	ldreq	r4, [r5, #12]
 80153e6:	e7ca      	b.n	801537e <__swbuf_r+0x1a>
 80153e8:	4621      	mov	r1, r4
 80153ea:	4628      	mov	r0, r5
 80153ec:	f000 f81e 	bl	801542c <__swsetup_r>
 80153f0:	2800      	cmp	r0, #0
 80153f2:	d0cb      	beq.n	801538c <__swbuf_r+0x28>
 80153f4:	f04f 37ff 	mov.w	r7, #4294967295
 80153f8:	e7ea      	b.n	80153d0 <__swbuf_r+0x6c>
 80153fa:	bf00      	nop
 80153fc:	0801852c 	.word	0x0801852c
 8015400:	0801854c 	.word	0x0801854c
 8015404:	0801850c 	.word	0x0801850c

08015408 <_write_r>:
 8015408:	b538      	push	{r3, r4, r5, lr}
 801540a:	4d07      	ldr	r5, [pc, #28]	; (8015428 <_write_r+0x20>)
 801540c:	4604      	mov	r4, r0
 801540e:	4608      	mov	r0, r1
 8015410:	4611      	mov	r1, r2
 8015412:	2200      	movs	r2, #0
 8015414:	602a      	str	r2, [r5, #0]
 8015416:	461a      	mov	r2, r3
 8015418:	f7eb fc9c 	bl	8000d54 <_write>
 801541c:	1c43      	adds	r3, r0, #1
 801541e:	d102      	bne.n	8015426 <_write_r+0x1e>
 8015420:	682b      	ldr	r3, [r5, #0]
 8015422:	b103      	cbz	r3, 8015426 <_write_r+0x1e>
 8015424:	6023      	str	r3, [r4, #0]
 8015426:	bd38      	pop	{r3, r4, r5, pc}
 8015428:	200072bc 	.word	0x200072bc

0801542c <__swsetup_r>:
 801542c:	4b32      	ldr	r3, [pc, #200]	; (80154f8 <__swsetup_r+0xcc>)
 801542e:	b570      	push	{r4, r5, r6, lr}
 8015430:	681d      	ldr	r5, [r3, #0]
 8015432:	4606      	mov	r6, r0
 8015434:	460c      	mov	r4, r1
 8015436:	b125      	cbz	r5, 8015442 <__swsetup_r+0x16>
 8015438:	69ab      	ldr	r3, [r5, #24]
 801543a:	b913      	cbnz	r3, 8015442 <__swsetup_r+0x16>
 801543c:	4628      	mov	r0, r5
 801543e:	f7ff f98f 	bl	8014760 <__sinit>
 8015442:	4b2e      	ldr	r3, [pc, #184]	; (80154fc <__swsetup_r+0xd0>)
 8015444:	429c      	cmp	r4, r3
 8015446:	d10f      	bne.n	8015468 <__swsetup_r+0x3c>
 8015448:	686c      	ldr	r4, [r5, #4]
 801544a:	89a3      	ldrh	r3, [r4, #12]
 801544c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015450:	0719      	lsls	r1, r3, #28
 8015452:	d42c      	bmi.n	80154ae <__swsetup_r+0x82>
 8015454:	06dd      	lsls	r5, r3, #27
 8015456:	d411      	bmi.n	801547c <__swsetup_r+0x50>
 8015458:	2309      	movs	r3, #9
 801545a:	6033      	str	r3, [r6, #0]
 801545c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8015460:	81a3      	strh	r3, [r4, #12]
 8015462:	f04f 30ff 	mov.w	r0, #4294967295
 8015466:	e03e      	b.n	80154e6 <__swsetup_r+0xba>
 8015468:	4b25      	ldr	r3, [pc, #148]	; (8015500 <__swsetup_r+0xd4>)
 801546a:	429c      	cmp	r4, r3
 801546c:	d101      	bne.n	8015472 <__swsetup_r+0x46>
 801546e:	68ac      	ldr	r4, [r5, #8]
 8015470:	e7eb      	b.n	801544a <__swsetup_r+0x1e>
 8015472:	4b24      	ldr	r3, [pc, #144]	; (8015504 <__swsetup_r+0xd8>)
 8015474:	429c      	cmp	r4, r3
 8015476:	bf08      	it	eq
 8015478:	68ec      	ldreq	r4, [r5, #12]
 801547a:	e7e6      	b.n	801544a <__swsetup_r+0x1e>
 801547c:	0758      	lsls	r0, r3, #29
 801547e:	d512      	bpl.n	80154a6 <__swsetup_r+0x7a>
 8015480:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015482:	b141      	cbz	r1, 8015496 <__swsetup_r+0x6a>
 8015484:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015488:	4299      	cmp	r1, r3
 801548a:	d002      	beq.n	8015492 <__swsetup_r+0x66>
 801548c:	4630      	mov	r0, r6
 801548e:	f7ff fa21 	bl	80148d4 <_free_r>
 8015492:	2300      	movs	r3, #0
 8015494:	6363      	str	r3, [r4, #52]	; 0x34
 8015496:	89a3      	ldrh	r3, [r4, #12]
 8015498:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801549c:	81a3      	strh	r3, [r4, #12]
 801549e:	2300      	movs	r3, #0
 80154a0:	6063      	str	r3, [r4, #4]
 80154a2:	6923      	ldr	r3, [r4, #16]
 80154a4:	6023      	str	r3, [r4, #0]
 80154a6:	89a3      	ldrh	r3, [r4, #12]
 80154a8:	f043 0308 	orr.w	r3, r3, #8
 80154ac:	81a3      	strh	r3, [r4, #12]
 80154ae:	6923      	ldr	r3, [r4, #16]
 80154b0:	b94b      	cbnz	r3, 80154c6 <__swsetup_r+0x9a>
 80154b2:	89a3      	ldrh	r3, [r4, #12]
 80154b4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80154b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80154bc:	d003      	beq.n	80154c6 <__swsetup_r+0x9a>
 80154be:	4621      	mov	r1, r4
 80154c0:	4630      	mov	r0, r6
 80154c2:	f000 f931 	bl	8015728 <__smakebuf_r>
 80154c6:	89a0      	ldrh	r0, [r4, #12]
 80154c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80154cc:	f010 0301 	ands.w	r3, r0, #1
 80154d0:	d00a      	beq.n	80154e8 <__swsetup_r+0xbc>
 80154d2:	2300      	movs	r3, #0
 80154d4:	60a3      	str	r3, [r4, #8]
 80154d6:	6963      	ldr	r3, [r4, #20]
 80154d8:	425b      	negs	r3, r3
 80154da:	61a3      	str	r3, [r4, #24]
 80154dc:	6923      	ldr	r3, [r4, #16]
 80154de:	b943      	cbnz	r3, 80154f2 <__swsetup_r+0xc6>
 80154e0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80154e4:	d1ba      	bne.n	801545c <__swsetup_r+0x30>
 80154e6:	bd70      	pop	{r4, r5, r6, pc}
 80154e8:	0781      	lsls	r1, r0, #30
 80154ea:	bf58      	it	pl
 80154ec:	6963      	ldrpl	r3, [r4, #20]
 80154ee:	60a3      	str	r3, [r4, #8]
 80154f0:	e7f4      	b.n	80154dc <__swsetup_r+0xb0>
 80154f2:	2000      	movs	r0, #0
 80154f4:	e7f7      	b.n	80154e6 <__swsetup_r+0xba>
 80154f6:	bf00      	nop
 80154f8:	20000014 	.word	0x20000014
 80154fc:	0801852c 	.word	0x0801852c
 8015500:	0801854c 	.word	0x0801854c
 8015504:	0801850c 	.word	0x0801850c

08015508 <abort>:
 8015508:	b508      	push	{r3, lr}
 801550a:	2006      	movs	r0, #6
 801550c:	f000 f9b8 	bl	8015880 <raise>
 8015510:	2001      	movs	r0, #1
 8015512:	f7ec f823 	bl	800155c <_exit>
	...

08015518 <_close_r>:
 8015518:	b538      	push	{r3, r4, r5, lr}
 801551a:	4d06      	ldr	r5, [pc, #24]	; (8015534 <_close_r+0x1c>)
 801551c:	2300      	movs	r3, #0
 801551e:	4604      	mov	r4, r0
 8015520:	4608      	mov	r0, r1
 8015522:	602b      	str	r3, [r5, #0]
 8015524:	f7ec f841 	bl	80015aa <_close>
 8015528:	1c43      	adds	r3, r0, #1
 801552a:	d102      	bne.n	8015532 <_close_r+0x1a>
 801552c:	682b      	ldr	r3, [r5, #0]
 801552e:	b103      	cbz	r3, 8015532 <_close_r+0x1a>
 8015530:	6023      	str	r3, [r4, #0]
 8015532:	bd38      	pop	{r3, r4, r5, pc}
 8015534:	200072bc 	.word	0x200072bc

08015538 <__sflush_r>:
 8015538:	898a      	ldrh	r2, [r1, #12]
 801553a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801553e:	4605      	mov	r5, r0
 8015540:	0710      	lsls	r0, r2, #28
 8015542:	460c      	mov	r4, r1
 8015544:	d458      	bmi.n	80155f8 <__sflush_r+0xc0>
 8015546:	684b      	ldr	r3, [r1, #4]
 8015548:	2b00      	cmp	r3, #0
 801554a:	dc05      	bgt.n	8015558 <__sflush_r+0x20>
 801554c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801554e:	2b00      	cmp	r3, #0
 8015550:	dc02      	bgt.n	8015558 <__sflush_r+0x20>
 8015552:	2000      	movs	r0, #0
 8015554:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015558:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801555a:	2e00      	cmp	r6, #0
 801555c:	d0f9      	beq.n	8015552 <__sflush_r+0x1a>
 801555e:	2300      	movs	r3, #0
 8015560:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8015564:	682f      	ldr	r7, [r5, #0]
 8015566:	602b      	str	r3, [r5, #0]
 8015568:	d032      	beq.n	80155d0 <__sflush_r+0x98>
 801556a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801556c:	89a3      	ldrh	r3, [r4, #12]
 801556e:	075a      	lsls	r2, r3, #29
 8015570:	d505      	bpl.n	801557e <__sflush_r+0x46>
 8015572:	6863      	ldr	r3, [r4, #4]
 8015574:	1ac0      	subs	r0, r0, r3
 8015576:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8015578:	b10b      	cbz	r3, 801557e <__sflush_r+0x46>
 801557a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801557c:	1ac0      	subs	r0, r0, r3
 801557e:	2300      	movs	r3, #0
 8015580:	4602      	mov	r2, r0
 8015582:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015584:	6a21      	ldr	r1, [r4, #32]
 8015586:	4628      	mov	r0, r5
 8015588:	47b0      	blx	r6
 801558a:	1c43      	adds	r3, r0, #1
 801558c:	89a3      	ldrh	r3, [r4, #12]
 801558e:	d106      	bne.n	801559e <__sflush_r+0x66>
 8015590:	6829      	ldr	r1, [r5, #0]
 8015592:	291d      	cmp	r1, #29
 8015594:	d82c      	bhi.n	80155f0 <__sflush_r+0xb8>
 8015596:	4a2a      	ldr	r2, [pc, #168]	; (8015640 <__sflush_r+0x108>)
 8015598:	40ca      	lsrs	r2, r1
 801559a:	07d6      	lsls	r6, r2, #31
 801559c:	d528      	bpl.n	80155f0 <__sflush_r+0xb8>
 801559e:	2200      	movs	r2, #0
 80155a0:	6062      	str	r2, [r4, #4]
 80155a2:	04d9      	lsls	r1, r3, #19
 80155a4:	6922      	ldr	r2, [r4, #16]
 80155a6:	6022      	str	r2, [r4, #0]
 80155a8:	d504      	bpl.n	80155b4 <__sflush_r+0x7c>
 80155aa:	1c42      	adds	r2, r0, #1
 80155ac:	d101      	bne.n	80155b2 <__sflush_r+0x7a>
 80155ae:	682b      	ldr	r3, [r5, #0]
 80155b0:	b903      	cbnz	r3, 80155b4 <__sflush_r+0x7c>
 80155b2:	6560      	str	r0, [r4, #84]	; 0x54
 80155b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80155b6:	602f      	str	r7, [r5, #0]
 80155b8:	2900      	cmp	r1, #0
 80155ba:	d0ca      	beq.n	8015552 <__sflush_r+0x1a>
 80155bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80155c0:	4299      	cmp	r1, r3
 80155c2:	d002      	beq.n	80155ca <__sflush_r+0x92>
 80155c4:	4628      	mov	r0, r5
 80155c6:	f7ff f985 	bl	80148d4 <_free_r>
 80155ca:	2000      	movs	r0, #0
 80155cc:	6360      	str	r0, [r4, #52]	; 0x34
 80155ce:	e7c1      	b.n	8015554 <__sflush_r+0x1c>
 80155d0:	6a21      	ldr	r1, [r4, #32]
 80155d2:	2301      	movs	r3, #1
 80155d4:	4628      	mov	r0, r5
 80155d6:	47b0      	blx	r6
 80155d8:	1c41      	adds	r1, r0, #1
 80155da:	d1c7      	bne.n	801556c <__sflush_r+0x34>
 80155dc:	682b      	ldr	r3, [r5, #0]
 80155de:	2b00      	cmp	r3, #0
 80155e0:	d0c4      	beq.n	801556c <__sflush_r+0x34>
 80155e2:	2b1d      	cmp	r3, #29
 80155e4:	d001      	beq.n	80155ea <__sflush_r+0xb2>
 80155e6:	2b16      	cmp	r3, #22
 80155e8:	d101      	bne.n	80155ee <__sflush_r+0xb6>
 80155ea:	602f      	str	r7, [r5, #0]
 80155ec:	e7b1      	b.n	8015552 <__sflush_r+0x1a>
 80155ee:	89a3      	ldrh	r3, [r4, #12]
 80155f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80155f4:	81a3      	strh	r3, [r4, #12]
 80155f6:	e7ad      	b.n	8015554 <__sflush_r+0x1c>
 80155f8:	690f      	ldr	r7, [r1, #16]
 80155fa:	2f00      	cmp	r7, #0
 80155fc:	d0a9      	beq.n	8015552 <__sflush_r+0x1a>
 80155fe:	0793      	lsls	r3, r2, #30
 8015600:	680e      	ldr	r6, [r1, #0]
 8015602:	bf08      	it	eq
 8015604:	694b      	ldreq	r3, [r1, #20]
 8015606:	600f      	str	r7, [r1, #0]
 8015608:	bf18      	it	ne
 801560a:	2300      	movne	r3, #0
 801560c:	eba6 0807 	sub.w	r8, r6, r7
 8015610:	608b      	str	r3, [r1, #8]
 8015612:	f1b8 0f00 	cmp.w	r8, #0
 8015616:	dd9c      	ble.n	8015552 <__sflush_r+0x1a>
 8015618:	6a21      	ldr	r1, [r4, #32]
 801561a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801561c:	4643      	mov	r3, r8
 801561e:	463a      	mov	r2, r7
 8015620:	4628      	mov	r0, r5
 8015622:	47b0      	blx	r6
 8015624:	2800      	cmp	r0, #0
 8015626:	dc06      	bgt.n	8015636 <__sflush_r+0xfe>
 8015628:	89a3      	ldrh	r3, [r4, #12]
 801562a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801562e:	81a3      	strh	r3, [r4, #12]
 8015630:	f04f 30ff 	mov.w	r0, #4294967295
 8015634:	e78e      	b.n	8015554 <__sflush_r+0x1c>
 8015636:	4407      	add	r7, r0
 8015638:	eba8 0800 	sub.w	r8, r8, r0
 801563c:	e7e9      	b.n	8015612 <__sflush_r+0xda>
 801563e:	bf00      	nop
 8015640:	20400001 	.word	0x20400001

08015644 <_fflush_r>:
 8015644:	b538      	push	{r3, r4, r5, lr}
 8015646:	690b      	ldr	r3, [r1, #16]
 8015648:	4605      	mov	r5, r0
 801564a:	460c      	mov	r4, r1
 801564c:	b913      	cbnz	r3, 8015654 <_fflush_r+0x10>
 801564e:	2500      	movs	r5, #0
 8015650:	4628      	mov	r0, r5
 8015652:	bd38      	pop	{r3, r4, r5, pc}
 8015654:	b118      	cbz	r0, 801565e <_fflush_r+0x1a>
 8015656:	6983      	ldr	r3, [r0, #24]
 8015658:	b90b      	cbnz	r3, 801565e <_fflush_r+0x1a>
 801565a:	f7ff f881 	bl	8014760 <__sinit>
 801565e:	4b14      	ldr	r3, [pc, #80]	; (80156b0 <_fflush_r+0x6c>)
 8015660:	429c      	cmp	r4, r3
 8015662:	d11b      	bne.n	801569c <_fflush_r+0x58>
 8015664:	686c      	ldr	r4, [r5, #4]
 8015666:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801566a:	2b00      	cmp	r3, #0
 801566c:	d0ef      	beq.n	801564e <_fflush_r+0xa>
 801566e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8015670:	07d0      	lsls	r0, r2, #31
 8015672:	d404      	bmi.n	801567e <_fflush_r+0x3a>
 8015674:	0599      	lsls	r1, r3, #22
 8015676:	d402      	bmi.n	801567e <_fflush_r+0x3a>
 8015678:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801567a:	f7ff f921 	bl	80148c0 <__retarget_lock_acquire_recursive>
 801567e:	4628      	mov	r0, r5
 8015680:	4621      	mov	r1, r4
 8015682:	f7ff ff59 	bl	8015538 <__sflush_r>
 8015686:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015688:	07da      	lsls	r2, r3, #31
 801568a:	4605      	mov	r5, r0
 801568c:	d4e0      	bmi.n	8015650 <_fflush_r+0xc>
 801568e:	89a3      	ldrh	r3, [r4, #12]
 8015690:	059b      	lsls	r3, r3, #22
 8015692:	d4dd      	bmi.n	8015650 <_fflush_r+0xc>
 8015694:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015696:	f7ff f914 	bl	80148c2 <__retarget_lock_release_recursive>
 801569a:	e7d9      	b.n	8015650 <_fflush_r+0xc>
 801569c:	4b05      	ldr	r3, [pc, #20]	; (80156b4 <_fflush_r+0x70>)
 801569e:	429c      	cmp	r4, r3
 80156a0:	d101      	bne.n	80156a6 <_fflush_r+0x62>
 80156a2:	68ac      	ldr	r4, [r5, #8]
 80156a4:	e7df      	b.n	8015666 <_fflush_r+0x22>
 80156a6:	4b04      	ldr	r3, [pc, #16]	; (80156b8 <_fflush_r+0x74>)
 80156a8:	429c      	cmp	r4, r3
 80156aa:	bf08      	it	eq
 80156ac:	68ec      	ldreq	r4, [r5, #12]
 80156ae:	e7da      	b.n	8015666 <_fflush_r+0x22>
 80156b0:	0801852c 	.word	0x0801852c
 80156b4:	0801854c 	.word	0x0801854c
 80156b8:	0801850c 	.word	0x0801850c

080156bc <_lseek_r>:
 80156bc:	b538      	push	{r3, r4, r5, lr}
 80156be:	4d07      	ldr	r5, [pc, #28]	; (80156dc <_lseek_r+0x20>)
 80156c0:	4604      	mov	r4, r0
 80156c2:	4608      	mov	r0, r1
 80156c4:	4611      	mov	r1, r2
 80156c6:	2200      	movs	r2, #0
 80156c8:	602a      	str	r2, [r5, #0]
 80156ca:	461a      	mov	r2, r3
 80156cc:	f7eb ff94 	bl	80015f8 <_lseek>
 80156d0:	1c43      	adds	r3, r0, #1
 80156d2:	d102      	bne.n	80156da <_lseek_r+0x1e>
 80156d4:	682b      	ldr	r3, [r5, #0]
 80156d6:	b103      	cbz	r3, 80156da <_lseek_r+0x1e>
 80156d8:	6023      	str	r3, [r4, #0]
 80156da:	bd38      	pop	{r3, r4, r5, pc}
 80156dc:	200072bc 	.word	0x200072bc

080156e0 <__swhatbuf_r>:
 80156e0:	b570      	push	{r4, r5, r6, lr}
 80156e2:	460e      	mov	r6, r1
 80156e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80156e8:	2900      	cmp	r1, #0
 80156ea:	b096      	sub	sp, #88	; 0x58
 80156ec:	4614      	mov	r4, r2
 80156ee:	461d      	mov	r5, r3
 80156f0:	da07      	bge.n	8015702 <__swhatbuf_r+0x22>
 80156f2:	2300      	movs	r3, #0
 80156f4:	602b      	str	r3, [r5, #0]
 80156f6:	89b3      	ldrh	r3, [r6, #12]
 80156f8:	061a      	lsls	r2, r3, #24
 80156fa:	d410      	bmi.n	801571e <__swhatbuf_r+0x3e>
 80156fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015700:	e00e      	b.n	8015720 <__swhatbuf_r+0x40>
 8015702:	466a      	mov	r2, sp
 8015704:	f000 f8d8 	bl	80158b8 <_fstat_r>
 8015708:	2800      	cmp	r0, #0
 801570a:	dbf2      	blt.n	80156f2 <__swhatbuf_r+0x12>
 801570c:	9a01      	ldr	r2, [sp, #4]
 801570e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8015712:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8015716:	425a      	negs	r2, r3
 8015718:	415a      	adcs	r2, r3
 801571a:	602a      	str	r2, [r5, #0]
 801571c:	e7ee      	b.n	80156fc <__swhatbuf_r+0x1c>
 801571e:	2340      	movs	r3, #64	; 0x40
 8015720:	2000      	movs	r0, #0
 8015722:	6023      	str	r3, [r4, #0]
 8015724:	b016      	add	sp, #88	; 0x58
 8015726:	bd70      	pop	{r4, r5, r6, pc}

08015728 <__smakebuf_r>:
 8015728:	898b      	ldrh	r3, [r1, #12]
 801572a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801572c:	079d      	lsls	r5, r3, #30
 801572e:	4606      	mov	r6, r0
 8015730:	460c      	mov	r4, r1
 8015732:	d507      	bpl.n	8015744 <__smakebuf_r+0x1c>
 8015734:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8015738:	6023      	str	r3, [r4, #0]
 801573a:	6123      	str	r3, [r4, #16]
 801573c:	2301      	movs	r3, #1
 801573e:	6163      	str	r3, [r4, #20]
 8015740:	b002      	add	sp, #8
 8015742:	bd70      	pop	{r4, r5, r6, pc}
 8015744:	ab01      	add	r3, sp, #4
 8015746:	466a      	mov	r2, sp
 8015748:	f7ff ffca 	bl	80156e0 <__swhatbuf_r>
 801574c:	9900      	ldr	r1, [sp, #0]
 801574e:	4605      	mov	r5, r0
 8015750:	4630      	mov	r0, r6
 8015752:	f7ff f90f 	bl	8014974 <_malloc_r>
 8015756:	b948      	cbnz	r0, 801576c <__smakebuf_r+0x44>
 8015758:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801575c:	059a      	lsls	r2, r3, #22
 801575e:	d4ef      	bmi.n	8015740 <__smakebuf_r+0x18>
 8015760:	f023 0303 	bic.w	r3, r3, #3
 8015764:	f043 0302 	orr.w	r3, r3, #2
 8015768:	81a3      	strh	r3, [r4, #12]
 801576a:	e7e3      	b.n	8015734 <__smakebuf_r+0xc>
 801576c:	4b0d      	ldr	r3, [pc, #52]	; (80157a4 <__smakebuf_r+0x7c>)
 801576e:	62b3      	str	r3, [r6, #40]	; 0x28
 8015770:	89a3      	ldrh	r3, [r4, #12]
 8015772:	6020      	str	r0, [r4, #0]
 8015774:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015778:	81a3      	strh	r3, [r4, #12]
 801577a:	9b00      	ldr	r3, [sp, #0]
 801577c:	6163      	str	r3, [r4, #20]
 801577e:	9b01      	ldr	r3, [sp, #4]
 8015780:	6120      	str	r0, [r4, #16]
 8015782:	b15b      	cbz	r3, 801579c <__smakebuf_r+0x74>
 8015784:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015788:	4630      	mov	r0, r6
 801578a:	f000 f8a7 	bl	80158dc <_isatty_r>
 801578e:	b128      	cbz	r0, 801579c <__smakebuf_r+0x74>
 8015790:	89a3      	ldrh	r3, [r4, #12]
 8015792:	f023 0303 	bic.w	r3, r3, #3
 8015796:	f043 0301 	orr.w	r3, r3, #1
 801579a:	81a3      	strh	r3, [r4, #12]
 801579c:	89a0      	ldrh	r0, [r4, #12]
 801579e:	4305      	orrs	r5, r0
 80157a0:	81a5      	strh	r5, [r4, #12]
 80157a2:	e7cd      	b.n	8015740 <__smakebuf_r+0x18>
 80157a4:	080146f9 	.word	0x080146f9

080157a8 <__malloc_lock>:
 80157a8:	4801      	ldr	r0, [pc, #4]	; (80157b0 <__malloc_lock+0x8>)
 80157aa:	f7ff b889 	b.w	80148c0 <__retarget_lock_acquire_recursive>
 80157ae:	bf00      	nop
 80157b0:	200072c4 	.word	0x200072c4

080157b4 <__malloc_unlock>:
 80157b4:	4801      	ldr	r0, [pc, #4]	; (80157bc <__malloc_unlock+0x8>)
 80157b6:	f7ff b884 	b.w	80148c2 <__retarget_lock_release_recursive>
 80157ba:	bf00      	nop
 80157bc:	200072c4 	.word	0x200072c4

080157c0 <_realloc_r>:
 80157c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80157c2:	4607      	mov	r7, r0
 80157c4:	4614      	mov	r4, r2
 80157c6:	460e      	mov	r6, r1
 80157c8:	b921      	cbnz	r1, 80157d4 <_realloc_r+0x14>
 80157ca:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80157ce:	4611      	mov	r1, r2
 80157d0:	f7ff b8d0 	b.w	8014974 <_malloc_r>
 80157d4:	b922      	cbnz	r2, 80157e0 <_realloc_r+0x20>
 80157d6:	f7ff f87d 	bl	80148d4 <_free_r>
 80157da:	4625      	mov	r5, r4
 80157dc:	4628      	mov	r0, r5
 80157de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80157e0:	f000 f88c 	bl	80158fc <_malloc_usable_size_r>
 80157e4:	42a0      	cmp	r0, r4
 80157e6:	d20f      	bcs.n	8015808 <_realloc_r+0x48>
 80157e8:	4621      	mov	r1, r4
 80157ea:	4638      	mov	r0, r7
 80157ec:	f7ff f8c2 	bl	8014974 <_malloc_r>
 80157f0:	4605      	mov	r5, r0
 80157f2:	2800      	cmp	r0, #0
 80157f4:	d0f2      	beq.n	80157dc <_realloc_r+0x1c>
 80157f6:	4631      	mov	r1, r6
 80157f8:	4622      	mov	r2, r4
 80157fa:	f7fe fe93 	bl	8014524 <memcpy>
 80157fe:	4631      	mov	r1, r6
 8015800:	4638      	mov	r0, r7
 8015802:	f7ff f867 	bl	80148d4 <_free_r>
 8015806:	e7e9      	b.n	80157dc <_realloc_r+0x1c>
 8015808:	4635      	mov	r5, r6
 801580a:	e7e7      	b.n	80157dc <_realloc_r+0x1c>

0801580c <_read_r>:
 801580c:	b538      	push	{r3, r4, r5, lr}
 801580e:	4d07      	ldr	r5, [pc, #28]	; (801582c <_read_r+0x20>)
 8015810:	4604      	mov	r4, r0
 8015812:	4608      	mov	r0, r1
 8015814:	4611      	mov	r1, r2
 8015816:	2200      	movs	r2, #0
 8015818:	602a      	str	r2, [r5, #0]
 801581a:	461a      	mov	r2, r3
 801581c:	f7eb fea8 	bl	8001570 <_read>
 8015820:	1c43      	adds	r3, r0, #1
 8015822:	d102      	bne.n	801582a <_read_r+0x1e>
 8015824:	682b      	ldr	r3, [r5, #0]
 8015826:	b103      	cbz	r3, 801582a <_read_r+0x1e>
 8015828:	6023      	str	r3, [r4, #0]
 801582a:	bd38      	pop	{r3, r4, r5, pc}
 801582c:	200072bc 	.word	0x200072bc

08015830 <_raise_r>:
 8015830:	291f      	cmp	r1, #31
 8015832:	b538      	push	{r3, r4, r5, lr}
 8015834:	4604      	mov	r4, r0
 8015836:	460d      	mov	r5, r1
 8015838:	d904      	bls.n	8015844 <_raise_r+0x14>
 801583a:	2316      	movs	r3, #22
 801583c:	6003      	str	r3, [r0, #0]
 801583e:	f04f 30ff 	mov.w	r0, #4294967295
 8015842:	bd38      	pop	{r3, r4, r5, pc}
 8015844:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8015846:	b112      	cbz	r2, 801584e <_raise_r+0x1e>
 8015848:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801584c:	b94b      	cbnz	r3, 8015862 <_raise_r+0x32>
 801584e:	4620      	mov	r0, r4
 8015850:	f000 f830 	bl	80158b4 <_getpid_r>
 8015854:	462a      	mov	r2, r5
 8015856:	4601      	mov	r1, r0
 8015858:	4620      	mov	r0, r4
 801585a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801585e:	f000 b817 	b.w	8015890 <_kill_r>
 8015862:	2b01      	cmp	r3, #1
 8015864:	d00a      	beq.n	801587c <_raise_r+0x4c>
 8015866:	1c59      	adds	r1, r3, #1
 8015868:	d103      	bne.n	8015872 <_raise_r+0x42>
 801586a:	2316      	movs	r3, #22
 801586c:	6003      	str	r3, [r0, #0]
 801586e:	2001      	movs	r0, #1
 8015870:	e7e7      	b.n	8015842 <_raise_r+0x12>
 8015872:	2400      	movs	r4, #0
 8015874:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8015878:	4628      	mov	r0, r5
 801587a:	4798      	blx	r3
 801587c:	2000      	movs	r0, #0
 801587e:	e7e0      	b.n	8015842 <_raise_r+0x12>

08015880 <raise>:
 8015880:	4b02      	ldr	r3, [pc, #8]	; (801588c <raise+0xc>)
 8015882:	4601      	mov	r1, r0
 8015884:	6818      	ldr	r0, [r3, #0]
 8015886:	f7ff bfd3 	b.w	8015830 <_raise_r>
 801588a:	bf00      	nop
 801588c:	20000014 	.word	0x20000014

08015890 <_kill_r>:
 8015890:	b538      	push	{r3, r4, r5, lr}
 8015892:	4d07      	ldr	r5, [pc, #28]	; (80158b0 <_kill_r+0x20>)
 8015894:	2300      	movs	r3, #0
 8015896:	4604      	mov	r4, r0
 8015898:	4608      	mov	r0, r1
 801589a:	4611      	mov	r1, r2
 801589c:	602b      	str	r3, [r5, #0]
 801589e:	f7eb fe4b 	bl	8001538 <_kill>
 80158a2:	1c43      	adds	r3, r0, #1
 80158a4:	d102      	bne.n	80158ac <_kill_r+0x1c>
 80158a6:	682b      	ldr	r3, [r5, #0]
 80158a8:	b103      	cbz	r3, 80158ac <_kill_r+0x1c>
 80158aa:	6023      	str	r3, [r4, #0]
 80158ac:	bd38      	pop	{r3, r4, r5, pc}
 80158ae:	bf00      	nop
 80158b0:	200072bc 	.word	0x200072bc

080158b4 <_getpid_r>:
 80158b4:	f7eb be38 	b.w	8001528 <_getpid>

080158b8 <_fstat_r>:
 80158b8:	b538      	push	{r3, r4, r5, lr}
 80158ba:	4d07      	ldr	r5, [pc, #28]	; (80158d8 <_fstat_r+0x20>)
 80158bc:	2300      	movs	r3, #0
 80158be:	4604      	mov	r4, r0
 80158c0:	4608      	mov	r0, r1
 80158c2:	4611      	mov	r1, r2
 80158c4:	602b      	str	r3, [r5, #0]
 80158c6:	f7eb fe7c 	bl	80015c2 <_fstat>
 80158ca:	1c43      	adds	r3, r0, #1
 80158cc:	d102      	bne.n	80158d4 <_fstat_r+0x1c>
 80158ce:	682b      	ldr	r3, [r5, #0]
 80158d0:	b103      	cbz	r3, 80158d4 <_fstat_r+0x1c>
 80158d2:	6023      	str	r3, [r4, #0]
 80158d4:	bd38      	pop	{r3, r4, r5, pc}
 80158d6:	bf00      	nop
 80158d8:	200072bc 	.word	0x200072bc

080158dc <_isatty_r>:
 80158dc:	b538      	push	{r3, r4, r5, lr}
 80158de:	4d06      	ldr	r5, [pc, #24]	; (80158f8 <_isatty_r+0x1c>)
 80158e0:	2300      	movs	r3, #0
 80158e2:	4604      	mov	r4, r0
 80158e4:	4608      	mov	r0, r1
 80158e6:	602b      	str	r3, [r5, #0]
 80158e8:	f7eb fe7b 	bl	80015e2 <_isatty>
 80158ec:	1c43      	adds	r3, r0, #1
 80158ee:	d102      	bne.n	80158f6 <_isatty_r+0x1a>
 80158f0:	682b      	ldr	r3, [r5, #0]
 80158f2:	b103      	cbz	r3, 80158f6 <_isatty_r+0x1a>
 80158f4:	6023      	str	r3, [r4, #0]
 80158f6:	bd38      	pop	{r3, r4, r5, pc}
 80158f8:	200072bc 	.word	0x200072bc

080158fc <_malloc_usable_size_r>:
 80158fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015900:	1f18      	subs	r0, r3, #4
 8015902:	2b00      	cmp	r3, #0
 8015904:	bfbc      	itt	lt
 8015906:	580b      	ldrlt	r3, [r1, r0]
 8015908:	18c0      	addlt	r0, r0, r3
 801590a:	4770      	bx	lr

0801590c <_init>:
 801590c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801590e:	bf00      	nop
 8015910:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015912:	bc08      	pop	{r3}
 8015914:	469e      	mov	lr, r3
 8015916:	4770      	bx	lr

08015918 <_fini>:
 8015918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801591a:	bf00      	nop
 801591c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801591e:	bc08      	pop	{r3}
 8015920:	469e      	mov	lr, r3
 8015922:	4770      	bx	lr
=======
 8014476:	f06f 0301 	mvn.w	r3, #1
}
 801447a:	4618      	mov	r0, r3
 801447c:	3718      	adds	r7, #24
 801447e:	46bd      	mov	sp, r7
 8014480:	bd80      	pop	{r7, pc}
 8014482:	bf00      	nop
 8014484:	0801828c 	.word	0x0801828c
 8014488:	080182c4 	.word	0x080182c4
 801448c:	080182f8 	.word	0x080182f8

08014490 <__libc_init_array>:
 8014490:	b570      	push	{r4, r5, r6, lr}
 8014492:	4d0d      	ldr	r5, [pc, #52]	; (80144c8 <__libc_init_array+0x38>)
 8014494:	4c0d      	ldr	r4, [pc, #52]	; (80144cc <__libc_init_array+0x3c>)
 8014496:	1b64      	subs	r4, r4, r5
 8014498:	10a4      	asrs	r4, r4, #2
 801449a:	2600      	movs	r6, #0
 801449c:	42a6      	cmp	r6, r4
 801449e:	d109      	bne.n	80144b4 <__libc_init_array+0x24>
 80144a0:	4d0b      	ldr	r5, [pc, #44]	; (80144d0 <__libc_init_array+0x40>)
 80144a2:	4c0c      	ldr	r4, [pc, #48]	; (80144d4 <__libc_init_array+0x44>)
 80144a4:	f001 fa1a 	bl	80158dc <_init>
 80144a8:	1b64      	subs	r4, r4, r5
 80144aa:	10a4      	asrs	r4, r4, #2
 80144ac:	2600      	movs	r6, #0
 80144ae:	42a6      	cmp	r6, r4
 80144b0:	d105      	bne.n	80144be <__libc_init_array+0x2e>
 80144b2:	bd70      	pop	{r4, r5, r6, pc}
 80144b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80144b8:	4798      	blx	r3
 80144ba:	3601      	adds	r6, #1
 80144bc:	e7ee      	b.n	801449c <__libc_init_array+0xc>
 80144be:	f855 3b04 	ldr.w	r3, [r5], #4
 80144c2:	4798      	blx	r3
 80144c4:	3601      	adds	r6, #1
 80144c6:	e7f2      	b.n	80144ae <__libc_init_array+0x1e>
 80144c8:	0801858c 	.word	0x0801858c
 80144cc:	0801858c 	.word	0x0801858c
 80144d0:	0801858c 	.word	0x0801858c
 80144d4:	08018590 	.word	0x08018590

080144d8 <memcmp>:
 80144d8:	b530      	push	{r4, r5, lr}
 80144da:	3901      	subs	r1, #1
 80144dc:	2400      	movs	r4, #0
 80144de:	42a2      	cmp	r2, r4
 80144e0:	d101      	bne.n	80144e6 <memcmp+0xe>
 80144e2:	2000      	movs	r0, #0
 80144e4:	e005      	b.n	80144f2 <memcmp+0x1a>
 80144e6:	5d03      	ldrb	r3, [r0, r4]
 80144e8:	3401      	adds	r4, #1
 80144ea:	5d0d      	ldrb	r5, [r1, r4]
 80144ec:	42ab      	cmp	r3, r5
 80144ee:	d0f6      	beq.n	80144de <memcmp+0x6>
 80144f0:	1b58      	subs	r0, r3, r5
 80144f2:	bd30      	pop	{r4, r5, pc}

080144f4 <memcpy>:
 80144f4:	440a      	add	r2, r1
 80144f6:	4291      	cmp	r1, r2
 80144f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80144fc:	d100      	bne.n	8014500 <memcpy+0xc>
 80144fe:	4770      	bx	lr
 8014500:	b510      	push	{r4, lr}
 8014502:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014506:	f803 4f01 	strb.w	r4, [r3, #1]!
 801450a:	4291      	cmp	r1, r2
 801450c:	d1f9      	bne.n	8014502 <memcpy+0xe>
 801450e:	bd10      	pop	{r4, pc}

08014510 <memmove>:
 8014510:	4288      	cmp	r0, r1
 8014512:	b510      	push	{r4, lr}
 8014514:	eb01 0402 	add.w	r4, r1, r2
 8014518:	d902      	bls.n	8014520 <memmove+0x10>
 801451a:	4284      	cmp	r4, r0
 801451c:	4623      	mov	r3, r4
 801451e:	d807      	bhi.n	8014530 <memmove+0x20>
 8014520:	1e43      	subs	r3, r0, #1
 8014522:	42a1      	cmp	r1, r4
 8014524:	d008      	beq.n	8014538 <memmove+0x28>
 8014526:	f811 2b01 	ldrb.w	r2, [r1], #1
 801452a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801452e:	e7f8      	b.n	8014522 <memmove+0x12>
 8014530:	4402      	add	r2, r0
 8014532:	4601      	mov	r1, r0
 8014534:	428a      	cmp	r2, r1
 8014536:	d100      	bne.n	801453a <memmove+0x2a>
 8014538:	bd10      	pop	{r4, pc}
 801453a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801453e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8014542:	e7f7      	b.n	8014534 <memmove+0x24>

08014544 <memset>:
 8014544:	4402      	add	r2, r0
 8014546:	4603      	mov	r3, r0
 8014548:	4293      	cmp	r3, r2
 801454a:	d100      	bne.n	801454e <memset+0xa>
 801454c:	4770      	bx	lr
 801454e:	f803 1b01 	strb.w	r1, [r3], #1
 8014552:	e7f9      	b.n	8014548 <memset+0x4>

08014554 <iprintf>:
 8014554:	b40f      	push	{r0, r1, r2, r3}
 8014556:	4b0a      	ldr	r3, [pc, #40]	; (8014580 <iprintf+0x2c>)
 8014558:	b513      	push	{r0, r1, r4, lr}
 801455a:	681c      	ldr	r4, [r3, #0]
 801455c:	b124      	cbz	r4, 8014568 <iprintf+0x14>
 801455e:	69a3      	ldr	r3, [r4, #24]
 8014560:	b913      	cbnz	r3, 8014568 <iprintf+0x14>
 8014562:	4620      	mov	r0, r4
 8014564:	f000 f8e4 	bl	8014730 <__sinit>
 8014568:	ab05      	add	r3, sp, #20
 801456a:	9a04      	ldr	r2, [sp, #16]
 801456c:	68a1      	ldr	r1, [r4, #8]
 801456e:	9301      	str	r3, [sp, #4]
 8014570:	4620      	mov	r0, r4
 8014572:	f000 fbc7 	bl	8014d04 <_vfiprintf_r>
 8014576:	b002      	add	sp, #8
 8014578:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801457c:	b004      	add	sp, #16
 801457e:	4770      	bx	lr
 8014580:	20000014 	.word	0x20000014

08014584 <rand>:
 8014584:	4b17      	ldr	r3, [pc, #92]	; (80145e4 <rand+0x60>)
 8014586:	b510      	push	{r4, lr}
 8014588:	681c      	ldr	r4, [r3, #0]
 801458a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801458c:	b9b3      	cbnz	r3, 80145bc <rand+0x38>
 801458e:	2018      	movs	r0, #24
 8014590:	f000 f980 	bl	8014894 <malloc>
 8014594:	63a0      	str	r0, [r4, #56]	; 0x38
 8014596:	b928      	cbnz	r0, 80145a4 <rand+0x20>
 8014598:	4602      	mov	r2, r0
 801459a:	4b13      	ldr	r3, [pc, #76]	; (80145e8 <rand+0x64>)
 801459c:	4813      	ldr	r0, [pc, #76]	; (80145ec <rand+0x68>)
 801459e:	214e      	movs	r1, #78	; 0x4e
 80145a0:	f000 f850 	bl	8014644 <__assert_func>
 80145a4:	4a12      	ldr	r2, [pc, #72]	; (80145f0 <rand+0x6c>)
 80145a6:	4b13      	ldr	r3, [pc, #76]	; (80145f4 <rand+0x70>)
 80145a8:	e9c0 2300 	strd	r2, r3, [r0]
 80145ac:	4b12      	ldr	r3, [pc, #72]	; (80145f8 <rand+0x74>)
 80145ae:	6083      	str	r3, [r0, #8]
 80145b0:	230b      	movs	r3, #11
 80145b2:	8183      	strh	r3, [r0, #12]
 80145b4:	2201      	movs	r2, #1
 80145b6:	2300      	movs	r3, #0
 80145b8:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80145bc:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80145be:	480f      	ldr	r0, [pc, #60]	; (80145fc <rand+0x78>)
 80145c0:	690a      	ldr	r2, [r1, #16]
 80145c2:	694b      	ldr	r3, [r1, #20]
 80145c4:	4c0e      	ldr	r4, [pc, #56]	; (8014600 <rand+0x7c>)
 80145c6:	4350      	muls	r0, r2
 80145c8:	fb04 0003 	mla	r0, r4, r3, r0
 80145cc:	fba2 3404 	umull	r3, r4, r2, r4
 80145d0:	1c5a      	adds	r2, r3, #1
 80145d2:	4404      	add	r4, r0
 80145d4:	f144 0000 	adc.w	r0, r4, #0
 80145d8:	e9c1 2004 	strd	r2, r0, [r1, #16]
 80145dc:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80145e0:	bd10      	pop	{r4, pc}
 80145e2:	bf00      	nop
 80145e4:	20000014 	.word	0x20000014
 80145e8:	0801843c 	.word	0x0801843c
 80145ec:	08018453 	.word	0x08018453
 80145f0:	abcd330e 	.word	0xabcd330e
 80145f4:	e66d1234 	.word	0xe66d1234
 80145f8:	0005deec 	.word	0x0005deec
 80145fc:	5851f42d 	.word	0x5851f42d
 8014600:	4c957f2d 	.word	0x4c957f2d

08014604 <siprintf>:
 8014604:	b40e      	push	{r1, r2, r3}
 8014606:	b500      	push	{lr}
 8014608:	b09c      	sub	sp, #112	; 0x70
 801460a:	ab1d      	add	r3, sp, #116	; 0x74
 801460c:	9002      	str	r0, [sp, #8]
 801460e:	9006      	str	r0, [sp, #24]
 8014610:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8014614:	4809      	ldr	r0, [pc, #36]	; (801463c <siprintf+0x38>)
 8014616:	9107      	str	r1, [sp, #28]
 8014618:	9104      	str	r1, [sp, #16]
 801461a:	4909      	ldr	r1, [pc, #36]	; (8014640 <siprintf+0x3c>)
 801461c:	f853 2b04 	ldr.w	r2, [r3], #4
 8014620:	9105      	str	r1, [sp, #20]
 8014622:	6800      	ldr	r0, [r0, #0]
 8014624:	9301      	str	r3, [sp, #4]
 8014626:	a902      	add	r1, sp, #8
 8014628:	f000 fa42 	bl	8014ab0 <_svfiprintf_r>
 801462c:	9b02      	ldr	r3, [sp, #8]
 801462e:	2200      	movs	r2, #0
 8014630:	701a      	strb	r2, [r3, #0]
 8014632:	b01c      	add	sp, #112	; 0x70
 8014634:	f85d eb04 	ldr.w	lr, [sp], #4
 8014638:	b003      	add	sp, #12
 801463a:	4770      	bx	lr
 801463c:	20000014 	.word	0x20000014
 8014640:	ffff0208 	.word	0xffff0208

08014644 <__assert_func>:
 8014644:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014646:	4614      	mov	r4, r2
 8014648:	461a      	mov	r2, r3
 801464a:	4b09      	ldr	r3, [pc, #36]	; (8014670 <__assert_func+0x2c>)
 801464c:	681b      	ldr	r3, [r3, #0]
 801464e:	4605      	mov	r5, r0
 8014650:	68d8      	ldr	r0, [r3, #12]
 8014652:	b14c      	cbz	r4, 8014668 <__assert_func+0x24>
 8014654:	4b07      	ldr	r3, [pc, #28]	; (8014674 <__assert_func+0x30>)
 8014656:	9100      	str	r1, [sp, #0]
 8014658:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801465c:	4906      	ldr	r1, [pc, #24]	; (8014678 <__assert_func+0x34>)
 801465e:	462b      	mov	r3, r5
 8014660:	f000 f8e4 	bl	801482c <fiprintf>
 8014664:	f000 ff38 	bl	80154d8 <abort>
 8014668:	4b04      	ldr	r3, [pc, #16]	; (801467c <__assert_func+0x38>)
 801466a:	461c      	mov	r4, r3
 801466c:	e7f3      	b.n	8014656 <__assert_func+0x12>
 801466e:	bf00      	nop
 8014670:	20000014 	.word	0x20000014
 8014674:	080184b2 	.word	0x080184b2
 8014678:	080184bf 	.word	0x080184bf
 801467c:	080184ed 	.word	0x080184ed

08014680 <std>:
 8014680:	2300      	movs	r3, #0
 8014682:	b510      	push	{r4, lr}
 8014684:	4604      	mov	r4, r0
 8014686:	e9c0 3300 	strd	r3, r3, [r0]
 801468a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801468e:	6083      	str	r3, [r0, #8]
 8014690:	8181      	strh	r1, [r0, #12]
 8014692:	6643      	str	r3, [r0, #100]	; 0x64
 8014694:	81c2      	strh	r2, [r0, #14]
 8014696:	6183      	str	r3, [r0, #24]
 8014698:	4619      	mov	r1, r3
 801469a:	2208      	movs	r2, #8
 801469c:	305c      	adds	r0, #92	; 0x5c
 801469e:	f7ff ff51 	bl	8014544 <memset>
 80146a2:	4b05      	ldr	r3, [pc, #20]	; (80146b8 <std+0x38>)
 80146a4:	6263      	str	r3, [r4, #36]	; 0x24
 80146a6:	4b05      	ldr	r3, [pc, #20]	; (80146bc <std+0x3c>)
 80146a8:	62a3      	str	r3, [r4, #40]	; 0x28
 80146aa:	4b05      	ldr	r3, [pc, #20]	; (80146c0 <std+0x40>)
 80146ac:	62e3      	str	r3, [r4, #44]	; 0x2c
 80146ae:	4b05      	ldr	r3, [pc, #20]	; (80146c4 <std+0x44>)
 80146b0:	6224      	str	r4, [r4, #32]
 80146b2:	6323      	str	r3, [r4, #48]	; 0x30
 80146b4:	bd10      	pop	{r4, pc}
 80146b6:	bf00      	nop
 80146b8:	080152ad 	.word	0x080152ad
 80146bc:	080152cf 	.word	0x080152cf
 80146c0:	08015307 	.word	0x08015307
 80146c4:	0801532b 	.word	0x0801532b

080146c8 <_cleanup_r>:
 80146c8:	4901      	ldr	r1, [pc, #4]	; (80146d0 <_cleanup_r+0x8>)
 80146ca:	f000 b8c1 	b.w	8014850 <_fwalk_reent>
 80146ce:	bf00      	nop
 80146d0:	08015615 	.word	0x08015615

080146d4 <__sfmoreglue>:
 80146d4:	b570      	push	{r4, r5, r6, lr}
 80146d6:	1e4a      	subs	r2, r1, #1
 80146d8:	2568      	movs	r5, #104	; 0x68
 80146da:	4355      	muls	r5, r2
 80146dc:	460e      	mov	r6, r1
 80146de:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80146e2:	f000 f92f 	bl	8014944 <_malloc_r>
 80146e6:	4604      	mov	r4, r0
 80146e8:	b140      	cbz	r0, 80146fc <__sfmoreglue+0x28>
 80146ea:	2100      	movs	r1, #0
 80146ec:	e9c0 1600 	strd	r1, r6, [r0]
 80146f0:	300c      	adds	r0, #12
 80146f2:	60a0      	str	r0, [r4, #8]
 80146f4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80146f8:	f7ff ff24 	bl	8014544 <memset>
 80146fc:	4620      	mov	r0, r4
 80146fe:	bd70      	pop	{r4, r5, r6, pc}

08014700 <__sfp_lock_acquire>:
 8014700:	4801      	ldr	r0, [pc, #4]	; (8014708 <__sfp_lock_acquire+0x8>)
 8014702:	f000 b8c5 	b.w	8014890 <__retarget_lock_acquire_recursive>
 8014706:	bf00      	nop
 8014708:	200072c8 	.word	0x200072c8

0801470c <__sfp_lock_release>:
 801470c:	4801      	ldr	r0, [pc, #4]	; (8014714 <__sfp_lock_release+0x8>)
 801470e:	f000 b8c0 	b.w	8014892 <__retarget_lock_release_recursive>
 8014712:	bf00      	nop
 8014714:	200072c8 	.word	0x200072c8

08014718 <__sinit_lock_acquire>:
 8014718:	4801      	ldr	r0, [pc, #4]	; (8014720 <__sinit_lock_acquire+0x8>)
 801471a:	f000 b8b9 	b.w	8014890 <__retarget_lock_acquire_recursive>
 801471e:	bf00      	nop
 8014720:	200072c3 	.word	0x200072c3

08014724 <__sinit_lock_release>:
 8014724:	4801      	ldr	r0, [pc, #4]	; (801472c <__sinit_lock_release+0x8>)
 8014726:	f000 b8b4 	b.w	8014892 <__retarget_lock_release_recursive>
 801472a:	bf00      	nop
 801472c:	200072c3 	.word	0x200072c3

08014730 <__sinit>:
 8014730:	b510      	push	{r4, lr}
 8014732:	4604      	mov	r4, r0
 8014734:	f7ff fff0 	bl	8014718 <__sinit_lock_acquire>
 8014738:	69a3      	ldr	r3, [r4, #24]
 801473a:	b11b      	cbz	r3, 8014744 <__sinit+0x14>
 801473c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014740:	f7ff bff0 	b.w	8014724 <__sinit_lock_release>
 8014744:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8014748:	6523      	str	r3, [r4, #80]	; 0x50
 801474a:	4b13      	ldr	r3, [pc, #76]	; (8014798 <__sinit+0x68>)
 801474c:	4a13      	ldr	r2, [pc, #76]	; (801479c <__sinit+0x6c>)
 801474e:	681b      	ldr	r3, [r3, #0]
 8014750:	62a2      	str	r2, [r4, #40]	; 0x28
 8014752:	42a3      	cmp	r3, r4
 8014754:	bf04      	itt	eq
 8014756:	2301      	moveq	r3, #1
 8014758:	61a3      	streq	r3, [r4, #24]
 801475a:	4620      	mov	r0, r4
 801475c:	f000 f820 	bl	80147a0 <__sfp>
 8014760:	6060      	str	r0, [r4, #4]
 8014762:	4620      	mov	r0, r4
 8014764:	f000 f81c 	bl	80147a0 <__sfp>
 8014768:	60a0      	str	r0, [r4, #8]
 801476a:	4620      	mov	r0, r4
 801476c:	f000 f818 	bl	80147a0 <__sfp>
 8014770:	2200      	movs	r2, #0
 8014772:	60e0      	str	r0, [r4, #12]
 8014774:	2104      	movs	r1, #4
 8014776:	6860      	ldr	r0, [r4, #4]
 8014778:	f7ff ff82 	bl	8014680 <std>
 801477c:	68a0      	ldr	r0, [r4, #8]
 801477e:	2201      	movs	r2, #1
 8014780:	2109      	movs	r1, #9
 8014782:	f7ff ff7d 	bl	8014680 <std>
 8014786:	68e0      	ldr	r0, [r4, #12]
 8014788:	2202      	movs	r2, #2
 801478a:	2112      	movs	r1, #18
 801478c:	f7ff ff78 	bl	8014680 <std>
 8014790:	2301      	movs	r3, #1
 8014792:	61a3      	str	r3, [r4, #24]
 8014794:	e7d2      	b.n	801473c <__sinit+0xc>
 8014796:	bf00      	nop
 8014798:	08018438 	.word	0x08018438
 801479c:	080146c9 	.word	0x080146c9

080147a0 <__sfp>:
 80147a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80147a2:	4607      	mov	r7, r0
 80147a4:	f7ff ffac 	bl	8014700 <__sfp_lock_acquire>
 80147a8:	4b1e      	ldr	r3, [pc, #120]	; (8014824 <__sfp+0x84>)
 80147aa:	681e      	ldr	r6, [r3, #0]
 80147ac:	69b3      	ldr	r3, [r6, #24]
 80147ae:	b913      	cbnz	r3, 80147b6 <__sfp+0x16>
 80147b0:	4630      	mov	r0, r6
 80147b2:	f7ff ffbd 	bl	8014730 <__sinit>
 80147b6:	3648      	adds	r6, #72	; 0x48
 80147b8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80147bc:	3b01      	subs	r3, #1
 80147be:	d503      	bpl.n	80147c8 <__sfp+0x28>
 80147c0:	6833      	ldr	r3, [r6, #0]
 80147c2:	b30b      	cbz	r3, 8014808 <__sfp+0x68>
 80147c4:	6836      	ldr	r6, [r6, #0]
 80147c6:	e7f7      	b.n	80147b8 <__sfp+0x18>
 80147c8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80147cc:	b9d5      	cbnz	r5, 8014804 <__sfp+0x64>
 80147ce:	4b16      	ldr	r3, [pc, #88]	; (8014828 <__sfp+0x88>)
 80147d0:	60e3      	str	r3, [r4, #12]
 80147d2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80147d6:	6665      	str	r5, [r4, #100]	; 0x64
 80147d8:	f000 f859 	bl	801488e <__retarget_lock_init_recursive>
 80147dc:	f7ff ff96 	bl	801470c <__sfp_lock_release>
 80147e0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80147e4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80147e8:	6025      	str	r5, [r4, #0]
 80147ea:	61a5      	str	r5, [r4, #24]
 80147ec:	2208      	movs	r2, #8
 80147ee:	4629      	mov	r1, r5
 80147f0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80147f4:	f7ff fea6 	bl	8014544 <memset>
 80147f8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80147fc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8014800:	4620      	mov	r0, r4
 8014802:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014804:	3468      	adds	r4, #104	; 0x68
 8014806:	e7d9      	b.n	80147bc <__sfp+0x1c>
 8014808:	2104      	movs	r1, #4
 801480a:	4638      	mov	r0, r7
 801480c:	f7ff ff62 	bl	80146d4 <__sfmoreglue>
 8014810:	4604      	mov	r4, r0
 8014812:	6030      	str	r0, [r6, #0]
 8014814:	2800      	cmp	r0, #0
 8014816:	d1d5      	bne.n	80147c4 <__sfp+0x24>
 8014818:	f7ff ff78 	bl	801470c <__sfp_lock_release>
 801481c:	230c      	movs	r3, #12
 801481e:	603b      	str	r3, [r7, #0]
 8014820:	e7ee      	b.n	8014800 <__sfp+0x60>
 8014822:	bf00      	nop
 8014824:	08018438 	.word	0x08018438
 8014828:	ffff0001 	.word	0xffff0001

0801482c <fiprintf>:
 801482c:	b40e      	push	{r1, r2, r3}
 801482e:	b503      	push	{r0, r1, lr}
 8014830:	4601      	mov	r1, r0
 8014832:	ab03      	add	r3, sp, #12
 8014834:	4805      	ldr	r0, [pc, #20]	; (801484c <fiprintf+0x20>)
 8014836:	f853 2b04 	ldr.w	r2, [r3], #4
 801483a:	6800      	ldr	r0, [r0, #0]
 801483c:	9301      	str	r3, [sp, #4]
 801483e:	f000 fa61 	bl	8014d04 <_vfiprintf_r>
 8014842:	b002      	add	sp, #8
 8014844:	f85d eb04 	ldr.w	lr, [sp], #4
 8014848:	b003      	add	sp, #12
 801484a:	4770      	bx	lr
 801484c:	20000014 	.word	0x20000014

08014850 <_fwalk_reent>:
 8014850:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014854:	4606      	mov	r6, r0
 8014856:	4688      	mov	r8, r1
 8014858:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801485c:	2700      	movs	r7, #0
 801485e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8014862:	f1b9 0901 	subs.w	r9, r9, #1
 8014866:	d505      	bpl.n	8014874 <_fwalk_reent+0x24>
 8014868:	6824      	ldr	r4, [r4, #0]
 801486a:	2c00      	cmp	r4, #0
 801486c:	d1f7      	bne.n	801485e <_fwalk_reent+0xe>
 801486e:	4638      	mov	r0, r7
 8014870:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014874:	89ab      	ldrh	r3, [r5, #12]
 8014876:	2b01      	cmp	r3, #1
 8014878:	d907      	bls.n	801488a <_fwalk_reent+0x3a>
 801487a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801487e:	3301      	adds	r3, #1
 8014880:	d003      	beq.n	801488a <_fwalk_reent+0x3a>
 8014882:	4629      	mov	r1, r5
 8014884:	4630      	mov	r0, r6
 8014886:	47c0      	blx	r8
 8014888:	4307      	orrs	r7, r0
 801488a:	3568      	adds	r5, #104	; 0x68
 801488c:	e7e9      	b.n	8014862 <_fwalk_reent+0x12>

0801488e <__retarget_lock_init_recursive>:
 801488e:	4770      	bx	lr

08014890 <__retarget_lock_acquire_recursive>:
 8014890:	4770      	bx	lr

08014892 <__retarget_lock_release_recursive>:
 8014892:	4770      	bx	lr

08014894 <malloc>:
 8014894:	4b02      	ldr	r3, [pc, #8]	; (80148a0 <malloc+0xc>)
 8014896:	4601      	mov	r1, r0
 8014898:	6818      	ldr	r0, [r3, #0]
 801489a:	f000 b853 	b.w	8014944 <_malloc_r>
 801489e:	bf00      	nop
 80148a0:	20000014 	.word	0x20000014

080148a4 <_free_r>:
 80148a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80148a6:	2900      	cmp	r1, #0
 80148a8:	d048      	beq.n	801493c <_free_r+0x98>
 80148aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80148ae:	9001      	str	r0, [sp, #4]
 80148b0:	2b00      	cmp	r3, #0
 80148b2:	f1a1 0404 	sub.w	r4, r1, #4
 80148b6:	bfb8      	it	lt
 80148b8:	18e4      	addlt	r4, r4, r3
 80148ba:	f000 ff5d 	bl	8015778 <__malloc_lock>
 80148be:	4a20      	ldr	r2, [pc, #128]	; (8014940 <_free_r+0x9c>)
 80148c0:	9801      	ldr	r0, [sp, #4]
 80148c2:	6813      	ldr	r3, [r2, #0]
 80148c4:	4615      	mov	r5, r2
 80148c6:	b933      	cbnz	r3, 80148d6 <_free_r+0x32>
 80148c8:	6063      	str	r3, [r4, #4]
 80148ca:	6014      	str	r4, [r2, #0]
 80148cc:	b003      	add	sp, #12
 80148ce:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80148d2:	f000 bf57 	b.w	8015784 <__malloc_unlock>
 80148d6:	42a3      	cmp	r3, r4
 80148d8:	d90b      	bls.n	80148f2 <_free_r+0x4e>
 80148da:	6821      	ldr	r1, [r4, #0]
 80148dc:	1862      	adds	r2, r4, r1
 80148de:	4293      	cmp	r3, r2
 80148e0:	bf04      	itt	eq
 80148e2:	681a      	ldreq	r2, [r3, #0]
 80148e4:	685b      	ldreq	r3, [r3, #4]
 80148e6:	6063      	str	r3, [r4, #4]
 80148e8:	bf04      	itt	eq
 80148ea:	1852      	addeq	r2, r2, r1
 80148ec:	6022      	streq	r2, [r4, #0]
 80148ee:	602c      	str	r4, [r5, #0]
 80148f0:	e7ec      	b.n	80148cc <_free_r+0x28>
 80148f2:	461a      	mov	r2, r3
 80148f4:	685b      	ldr	r3, [r3, #4]
 80148f6:	b10b      	cbz	r3, 80148fc <_free_r+0x58>
 80148f8:	42a3      	cmp	r3, r4
 80148fa:	d9fa      	bls.n	80148f2 <_free_r+0x4e>
 80148fc:	6811      	ldr	r1, [r2, #0]
 80148fe:	1855      	adds	r5, r2, r1
 8014900:	42a5      	cmp	r5, r4
 8014902:	d10b      	bne.n	801491c <_free_r+0x78>
 8014904:	6824      	ldr	r4, [r4, #0]
 8014906:	4421      	add	r1, r4
 8014908:	1854      	adds	r4, r2, r1
 801490a:	42a3      	cmp	r3, r4
 801490c:	6011      	str	r1, [r2, #0]
 801490e:	d1dd      	bne.n	80148cc <_free_r+0x28>
 8014910:	681c      	ldr	r4, [r3, #0]
 8014912:	685b      	ldr	r3, [r3, #4]
 8014914:	6053      	str	r3, [r2, #4]
 8014916:	4421      	add	r1, r4
 8014918:	6011      	str	r1, [r2, #0]
 801491a:	e7d7      	b.n	80148cc <_free_r+0x28>
 801491c:	d902      	bls.n	8014924 <_free_r+0x80>
 801491e:	230c      	movs	r3, #12
 8014920:	6003      	str	r3, [r0, #0]
 8014922:	e7d3      	b.n	80148cc <_free_r+0x28>
 8014924:	6825      	ldr	r5, [r4, #0]
 8014926:	1961      	adds	r1, r4, r5
 8014928:	428b      	cmp	r3, r1
 801492a:	bf04      	itt	eq
 801492c:	6819      	ldreq	r1, [r3, #0]
 801492e:	685b      	ldreq	r3, [r3, #4]
 8014930:	6063      	str	r3, [r4, #4]
 8014932:	bf04      	itt	eq
 8014934:	1949      	addeq	r1, r1, r5
 8014936:	6021      	streq	r1, [r4, #0]
 8014938:	6054      	str	r4, [r2, #4]
 801493a:	e7c7      	b.n	80148cc <_free_r+0x28>
 801493c:	b003      	add	sp, #12
 801493e:	bd30      	pop	{r4, r5, pc}
 8014940:	20000224 	.word	0x20000224

08014944 <_malloc_r>:
 8014944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014946:	1ccd      	adds	r5, r1, #3
 8014948:	f025 0503 	bic.w	r5, r5, #3
 801494c:	3508      	adds	r5, #8
 801494e:	2d0c      	cmp	r5, #12
 8014950:	bf38      	it	cc
 8014952:	250c      	movcc	r5, #12
 8014954:	2d00      	cmp	r5, #0
 8014956:	4606      	mov	r6, r0
 8014958:	db01      	blt.n	801495e <_malloc_r+0x1a>
 801495a:	42a9      	cmp	r1, r5
 801495c:	d903      	bls.n	8014966 <_malloc_r+0x22>
 801495e:	230c      	movs	r3, #12
 8014960:	6033      	str	r3, [r6, #0]
 8014962:	2000      	movs	r0, #0
 8014964:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014966:	f000 ff07 	bl	8015778 <__malloc_lock>
 801496a:	4921      	ldr	r1, [pc, #132]	; (80149f0 <_malloc_r+0xac>)
 801496c:	680a      	ldr	r2, [r1, #0]
 801496e:	4614      	mov	r4, r2
 8014970:	b99c      	cbnz	r4, 801499a <_malloc_r+0x56>
 8014972:	4f20      	ldr	r7, [pc, #128]	; (80149f4 <_malloc_r+0xb0>)
 8014974:	683b      	ldr	r3, [r7, #0]
 8014976:	b923      	cbnz	r3, 8014982 <_malloc_r+0x3e>
 8014978:	4621      	mov	r1, r4
 801497a:	4630      	mov	r0, r6
 801497c:	f000 fc86 	bl	801528c <_sbrk_r>
 8014980:	6038      	str	r0, [r7, #0]
 8014982:	4629      	mov	r1, r5
 8014984:	4630      	mov	r0, r6
 8014986:	f000 fc81 	bl	801528c <_sbrk_r>
 801498a:	1c43      	adds	r3, r0, #1
 801498c:	d123      	bne.n	80149d6 <_malloc_r+0x92>
 801498e:	230c      	movs	r3, #12
 8014990:	6033      	str	r3, [r6, #0]
 8014992:	4630      	mov	r0, r6
 8014994:	f000 fef6 	bl	8015784 <__malloc_unlock>
 8014998:	e7e3      	b.n	8014962 <_malloc_r+0x1e>
 801499a:	6823      	ldr	r3, [r4, #0]
 801499c:	1b5b      	subs	r3, r3, r5
 801499e:	d417      	bmi.n	80149d0 <_malloc_r+0x8c>
 80149a0:	2b0b      	cmp	r3, #11
 80149a2:	d903      	bls.n	80149ac <_malloc_r+0x68>
 80149a4:	6023      	str	r3, [r4, #0]
 80149a6:	441c      	add	r4, r3
 80149a8:	6025      	str	r5, [r4, #0]
 80149aa:	e004      	b.n	80149b6 <_malloc_r+0x72>
 80149ac:	6863      	ldr	r3, [r4, #4]
 80149ae:	42a2      	cmp	r2, r4
 80149b0:	bf0c      	ite	eq
 80149b2:	600b      	streq	r3, [r1, #0]
 80149b4:	6053      	strne	r3, [r2, #4]
 80149b6:	4630      	mov	r0, r6
 80149b8:	f000 fee4 	bl	8015784 <__malloc_unlock>
 80149bc:	f104 000b 	add.w	r0, r4, #11
 80149c0:	1d23      	adds	r3, r4, #4
 80149c2:	f020 0007 	bic.w	r0, r0, #7
 80149c6:	1ac2      	subs	r2, r0, r3
 80149c8:	d0cc      	beq.n	8014964 <_malloc_r+0x20>
 80149ca:	1a1b      	subs	r3, r3, r0
 80149cc:	50a3      	str	r3, [r4, r2]
 80149ce:	e7c9      	b.n	8014964 <_malloc_r+0x20>
 80149d0:	4622      	mov	r2, r4
 80149d2:	6864      	ldr	r4, [r4, #4]
 80149d4:	e7cc      	b.n	8014970 <_malloc_r+0x2c>
 80149d6:	1cc4      	adds	r4, r0, #3
 80149d8:	f024 0403 	bic.w	r4, r4, #3
 80149dc:	42a0      	cmp	r0, r4
 80149de:	d0e3      	beq.n	80149a8 <_malloc_r+0x64>
 80149e0:	1a21      	subs	r1, r4, r0
 80149e2:	4630      	mov	r0, r6
 80149e4:	f000 fc52 	bl	801528c <_sbrk_r>
 80149e8:	3001      	adds	r0, #1
 80149ea:	d1dd      	bne.n	80149a8 <_malloc_r+0x64>
 80149ec:	e7cf      	b.n	801498e <_malloc_r+0x4a>
 80149ee:	bf00      	nop
 80149f0:	20000224 	.word	0x20000224
 80149f4:	20000228 	.word	0x20000228

080149f8 <__ssputs_r>:
 80149f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80149fc:	688e      	ldr	r6, [r1, #8]
 80149fe:	429e      	cmp	r6, r3
 8014a00:	4682      	mov	sl, r0
 8014a02:	460c      	mov	r4, r1
 8014a04:	4690      	mov	r8, r2
 8014a06:	461f      	mov	r7, r3
 8014a08:	d838      	bhi.n	8014a7c <__ssputs_r+0x84>
 8014a0a:	898a      	ldrh	r2, [r1, #12]
 8014a0c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8014a10:	d032      	beq.n	8014a78 <__ssputs_r+0x80>
 8014a12:	6825      	ldr	r5, [r4, #0]
 8014a14:	6909      	ldr	r1, [r1, #16]
 8014a16:	eba5 0901 	sub.w	r9, r5, r1
 8014a1a:	6965      	ldr	r5, [r4, #20]
 8014a1c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014a20:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8014a24:	3301      	adds	r3, #1
 8014a26:	444b      	add	r3, r9
 8014a28:	106d      	asrs	r5, r5, #1
 8014a2a:	429d      	cmp	r5, r3
 8014a2c:	bf38      	it	cc
 8014a2e:	461d      	movcc	r5, r3
 8014a30:	0553      	lsls	r3, r2, #21
 8014a32:	d531      	bpl.n	8014a98 <__ssputs_r+0xa0>
 8014a34:	4629      	mov	r1, r5
 8014a36:	f7ff ff85 	bl	8014944 <_malloc_r>
 8014a3a:	4606      	mov	r6, r0
 8014a3c:	b950      	cbnz	r0, 8014a54 <__ssputs_r+0x5c>
 8014a3e:	230c      	movs	r3, #12
 8014a40:	f8ca 3000 	str.w	r3, [sl]
 8014a44:	89a3      	ldrh	r3, [r4, #12]
 8014a46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014a4a:	81a3      	strh	r3, [r4, #12]
 8014a4c:	f04f 30ff 	mov.w	r0, #4294967295
 8014a50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014a54:	6921      	ldr	r1, [r4, #16]
 8014a56:	464a      	mov	r2, r9
 8014a58:	f7ff fd4c 	bl	80144f4 <memcpy>
 8014a5c:	89a3      	ldrh	r3, [r4, #12]
 8014a5e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8014a62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014a66:	81a3      	strh	r3, [r4, #12]
 8014a68:	6126      	str	r6, [r4, #16]
 8014a6a:	6165      	str	r5, [r4, #20]
 8014a6c:	444e      	add	r6, r9
 8014a6e:	eba5 0509 	sub.w	r5, r5, r9
 8014a72:	6026      	str	r6, [r4, #0]
 8014a74:	60a5      	str	r5, [r4, #8]
 8014a76:	463e      	mov	r6, r7
 8014a78:	42be      	cmp	r6, r7
 8014a7a:	d900      	bls.n	8014a7e <__ssputs_r+0x86>
 8014a7c:	463e      	mov	r6, r7
 8014a7e:	4632      	mov	r2, r6
 8014a80:	6820      	ldr	r0, [r4, #0]
 8014a82:	4641      	mov	r1, r8
 8014a84:	f7ff fd44 	bl	8014510 <memmove>
 8014a88:	68a3      	ldr	r3, [r4, #8]
 8014a8a:	6822      	ldr	r2, [r4, #0]
 8014a8c:	1b9b      	subs	r3, r3, r6
 8014a8e:	4432      	add	r2, r6
 8014a90:	60a3      	str	r3, [r4, #8]
 8014a92:	6022      	str	r2, [r4, #0]
 8014a94:	2000      	movs	r0, #0
 8014a96:	e7db      	b.n	8014a50 <__ssputs_r+0x58>
 8014a98:	462a      	mov	r2, r5
 8014a9a:	f000 fe79 	bl	8015790 <_realloc_r>
 8014a9e:	4606      	mov	r6, r0
 8014aa0:	2800      	cmp	r0, #0
 8014aa2:	d1e1      	bne.n	8014a68 <__ssputs_r+0x70>
 8014aa4:	6921      	ldr	r1, [r4, #16]
 8014aa6:	4650      	mov	r0, sl
 8014aa8:	f7ff fefc 	bl	80148a4 <_free_r>
 8014aac:	e7c7      	b.n	8014a3e <__ssputs_r+0x46>
	...

08014ab0 <_svfiprintf_r>:
 8014ab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014ab4:	4698      	mov	r8, r3
 8014ab6:	898b      	ldrh	r3, [r1, #12]
 8014ab8:	061b      	lsls	r3, r3, #24
 8014aba:	b09d      	sub	sp, #116	; 0x74
 8014abc:	4607      	mov	r7, r0
 8014abe:	460d      	mov	r5, r1
 8014ac0:	4614      	mov	r4, r2
 8014ac2:	d50e      	bpl.n	8014ae2 <_svfiprintf_r+0x32>
 8014ac4:	690b      	ldr	r3, [r1, #16]
 8014ac6:	b963      	cbnz	r3, 8014ae2 <_svfiprintf_r+0x32>
 8014ac8:	2140      	movs	r1, #64	; 0x40
 8014aca:	f7ff ff3b 	bl	8014944 <_malloc_r>
 8014ace:	6028      	str	r0, [r5, #0]
 8014ad0:	6128      	str	r0, [r5, #16]
 8014ad2:	b920      	cbnz	r0, 8014ade <_svfiprintf_r+0x2e>
 8014ad4:	230c      	movs	r3, #12
 8014ad6:	603b      	str	r3, [r7, #0]
 8014ad8:	f04f 30ff 	mov.w	r0, #4294967295
 8014adc:	e0d1      	b.n	8014c82 <_svfiprintf_r+0x1d2>
 8014ade:	2340      	movs	r3, #64	; 0x40
 8014ae0:	616b      	str	r3, [r5, #20]
 8014ae2:	2300      	movs	r3, #0
 8014ae4:	9309      	str	r3, [sp, #36]	; 0x24
 8014ae6:	2320      	movs	r3, #32
 8014ae8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014aec:	f8cd 800c 	str.w	r8, [sp, #12]
 8014af0:	2330      	movs	r3, #48	; 0x30
 8014af2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8014c9c <_svfiprintf_r+0x1ec>
 8014af6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014afa:	f04f 0901 	mov.w	r9, #1
 8014afe:	4623      	mov	r3, r4
 8014b00:	469a      	mov	sl, r3
 8014b02:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014b06:	b10a      	cbz	r2, 8014b0c <_svfiprintf_r+0x5c>
 8014b08:	2a25      	cmp	r2, #37	; 0x25
 8014b0a:	d1f9      	bne.n	8014b00 <_svfiprintf_r+0x50>
 8014b0c:	ebba 0b04 	subs.w	fp, sl, r4
 8014b10:	d00b      	beq.n	8014b2a <_svfiprintf_r+0x7a>
 8014b12:	465b      	mov	r3, fp
 8014b14:	4622      	mov	r2, r4
 8014b16:	4629      	mov	r1, r5
 8014b18:	4638      	mov	r0, r7
 8014b1a:	f7ff ff6d 	bl	80149f8 <__ssputs_r>
 8014b1e:	3001      	adds	r0, #1
 8014b20:	f000 80aa 	beq.w	8014c78 <_svfiprintf_r+0x1c8>
 8014b24:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014b26:	445a      	add	r2, fp
 8014b28:	9209      	str	r2, [sp, #36]	; 0x24
 8014b2a:	f89a 3000 	ldrb.w	r3, [sl]
 8014b2e:	2b00      	cmp	r3, #0
 8014b30:	f000 80a2 	beq.w	8014c78 <_svfiprintf_r+0x1c8>
 8014b34:	2300      	movs	r3, #0
 8014b36:	f04f 32ff 	mov.w	r2, #4294967295
 8014b3a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014b3e:	f10a 0a01 	add.w	sl, sl, #1
 8014b42:	9304      	str	r3, [sp, #16]
 8014b44:	9307      	str	r3, [sp, #28]
 8014b46:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014b4a:	931a      	str	r3, [sp, #104]	; 0x68
 8014b4c:	4654      	mov	r4, sl
 8014b4e:	2205      	movs	r2, #5
 8014b50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014b54:	4851      	ldr	r0, [pc, #324]	; (8014c9c <_svfiprintf_r+0x1ec>)
 8014b56:	f7eb fb4b 	bl	80001f0 <memchr>
 8014b5a:	9a04      	ldr	r2, [sp, #16]
 8014b5c:	b9d8      	cbnz	r0, 8014b96 <_svfiprintf_r+0xe6>
 8014b5e:	06d0      	lsls	r0, r2, #27
 8014b60:	bf44      	itt	mi
 8014b62:	2320      	movmi	r3, #32
 8014b64:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014b68:	0711      	lsls	r1, r2, #28
 8014b6a:	bf44      	itt	mi
 8014b6c:	232b      	movmi	r3, #43	; 0x2b
 8014b6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014b72:	f89a 3000 	ldrb.w	r3, [sl]
 8014b76:	2b2a      	cmp	r3, #42	; 0x2a
 8014b78:	d015      	beq.n	8014ba6 <_svfiprintf_r+0xf6>
 8014b7a:	9a07      	ldr	r2, [sp, #28]
 8014b7c:	4654      	mov	r4, sl
 8014b7e:	2000      	movs	r0, #0
 8014b80:	f04f 0c0a 	mov.w	ip, #10
 8014b84:	4621      	mov	r1, r4
 8014b86:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014b8a:	3b30      	subs	r3, #48	; 0x30
 8014b8c:	2b09      	cmp	r3, #9
 8014b8e:	d94e      	bls.n	8014c2e <_svfiprintf_r+0x17e>
 8014b90:	b1b0      	cbz	r0, 8014bc0 <_svfiprintf_r+0x110>
 8014b92:	9207      	str	r2, [sp, #28]
 8014b94:	e014      	b.n	8014bc0 <_svfiprintf_r+0x110>
 8014b96:	eba0 0308 	sub.w	r3, r0, r8
 8014b9a:	fa09 f303 	lsl.w	r3, r9, r3
 8014b9e:	4313      	orrs	r3, r2
 8014ba0:	9304      	str	r3, [sp, #16]
 8014ba2:	46a2      	mov	sl, r4
 8014ba4:	e7d2      	b.n	8014b4c <_svfiprintf_r+0x9c>
 8014ba6:	9b03      	ldr	r3, [sp, #12]
 8014ba8:	1d19      	adds	r1, r3, #4
 8014baa:	681b      	ldr	r3, [r3, #0]
 8014bac:	9103      	str	r1, [sp, #12]
 8014bae:	2b00      	cmp	r3, #0
 8014bb0:	bfbb      	ittet	lt
 8014bb2:	425b      	neglt	r3, r3
 8014bb4:	f042 0202 	orrlt.w	r2, r2, #2
 8014bb8:	9307      	strge	r3, [sp, #28]
 8014bba:	9307      	strlt	r3, [sp, #28]
 8014bbc:	bfb8      	it	lt
 8014bbe:	9204      	strlt	r2, [sp, #16]
 8014bc0:	7823      	ldrb	r3, [r4, #0]
 8014bc2:	2b2e      	cmp	r3, #46	; 0x2e
 8014bc4:	d10c      	bne.n	8014be0 <_svfiprintf_r+0x130>
 8014bc6:	7863      	ldrb	r3, [r4, #1]
 8014bc8:	2b2a      	cmp	r3, #42	; 0x2a
 8014bca:	d135      	bne.n	8014c38 <_svfiprintf_r+0x188>
 8014bcc:	9b03      	ldr	r3, [sp, #12]
 8014bce:	1d1a      	adds	r2, r3, #4
 8014bd0:	681b      	ldr	r3, [r3, #0]
 8014bd2:	9203      	str	r2, [sp, #12]
 8014bd4:	2b00      	cmp	r3, #0
 8014bd6:	bfb8      	it	lt
 8014bd8:	f04f 33ff 	movlt.w	r3, #4294967295
 8014bdc:	3402      	adds	r4, #2
 8014bde:	9305      	str	r3, [sp, #20]
 8014be0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8014cac <_svfiprintf_r+0x1fc>
 8014be4:	7821      	ldrb	r1, [r4, #0]
 8014be6:	2203      	movs	r2, #3
 8014be8:	4650      	mov	r0, sl
 8014bea:	f7eb fb01 	bl	80001f0 <memchr>
 8014bee:	b140      	cbz	r0, 8014c02 <_svfiprintf_r+0x152>
 8014bf0:	2340      	movs	r3, #64	; 0x40
 8014bf2:	eba0 000a 	sub.w	r0, r0, sl
 8014bf6:	fa03 f000 	lsl.w	r0, r3, r0
 8014bfa:	9b04      	ldr	r3, [sp, #16]
 8014bfc:	4303      	orrs	r3, r0
 8014bfe:	3401      	adds	r4, #1
 8014c00:	9304      	str	r3, [sp, #16]
 8014c02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014c06:	4826      	ldr	r0, [pc, #152]	; (8014ca0 <_svfiprintf_r+0x1f0>)
 8014c08:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014c0c:	2206      	movs	r2, #6
 8014c0e:	f7eb faef 	bl	80001f0 <memchr>
 8014c12:	2800      	cmp	r0, #0
 8014c14:	d038      	beq.n	8014c88 <_svfiprintf_r+0x1d8>
 8014c16:	4b23      	ldr	r3, [pc, #140]	; (8014ca4 <_svfiprintf_r+0x1f4>)
 8014c18:	bb1b      	cbnz	r3, 8014c62 <_svfiprintf_r+0x1b2>
 8014c1a:	9b03      	ldr	r3, [sp, #12]
 8014c1c:	3307      	adds	r3, #7
 8014c1e:	f023 0307 	bic.w	r3, r3, #7
 8014c22:	3308      	adds	r3, #8
 8014c24:	9303      	str	r3, [sp, #12]
 8014c26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014c28:	4433      	add	r3, r6
 8014c2a:	9309      	str	r3, [sp, #36]	; 0x24
 8014c2c:	e767      	b.n	8014afe <_svfiprintf_r+0x4e>
 8014c2e:	fb0c 3202 	mla	r2, ip, r2, r3
 8014c32:	460c      	mov	r4, r1
 8014c34:	2001      	movs	r0, #1
 8014c36:	e7a5      	b.n	8014b84 <_svfiprintf_r+0xd4>
 8014c38:	2300      	movs	r3, #0
 8014c3a:	3401      	adds	r4, #1
 8014c3c:	9305      	str	r3, [sp, #20]
 8014c3e:	4619      	mov	r1, r3
 8014c40:	f04f 0c0a 	mov.w	ip, #10
 8014c44:	4620      	mov	r0, r4
 8014c46:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014c4a:	3a30      	subs	r2, #48	; 0x30
 8014c4c:	2a09      	cmp	r2, #9
 8014c4e:	d903      	bls.n	8014c58 <_svfiprintf_r+0x1a8>
 8014c50:	2b00      	cmp	r3, #0
 8014c52:	d0c5      	beq.n	8014be0 <_svfiprintf_r+0x130>
 8014c54:	9105      	str	r1, [sp, #20]
 8014c56:	e7c3      	b.n	8014be0 <_svfiprintf_r+0x130>
 8014c58:	fb0c 2101 	mla	r1, ip, r1, r2
 8014c5c:	4604      	mov	r4, r0
 8014c5e:	2301      	movs	r3, #1
 8014c60:	e7f0      	b.n	8014c44 <_svfiprintf_r+0x194>
 8014c62:	ab03      	add	r3, sp, #12
 8014c64:	9300      	str	r3, [sp, #0]
 8014c66:	462a      	mov	r2, r5
 8014c68:	4b0f      	ldr	r3, [pc, #60]	; (8014ca8 <_svfiprintf_r+0x1f8>)
 8014c6a:	a904      	add	r1, sp, #16
 8014c6c:	4638      	mov	r0, r7
 8014c6e:	f3af 8000 	nop.w
 8014c72:	1c42      	adds	r2, r0, #1
 8014c74:	4606      	mov	r6, r0
 8014c76:	d1d6      	bne.n	8014c26 <_svfiprintf_r+0x176>
 8014c78:	89ab      	ldrh	r3, [r5, #12]
 8014c7a:	065b      	lsls	r3, r3, #25
 8014c7c:	f53f af2c 	bmi.w	8014ad8 <_svfiprintf_r+0x28>
 8014c80:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014c82:	b01d      	add	sp, #116	; 0x74
 8014c84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014c88:	ab03      	add	r3, sp, #12
 8014c8a:	9300      	str	r3, [sp, #0]
 8014c8c:	462a      	mov	r2, r5
 8014c8e:	4b06      	ldr	r3, [pc, #24]	; (8014ca8 <_svfiprintf_r+0x1f8>)
 8014c90:	a904      	add	r1, sp, #16
 8014c92:	4638      	mov	r0, r7
 8014c94:	f000 f9d4 	bl	8015040 <_printf_i>
 8014c98:	e7eb      	b.n	8014c72 <_svfiprintf_r+0x1c2>
 8014c9a:	bf00      	nop
 8014c9c:	08018550 	.word	0x08018550
 8014ca0:	0801855a 	.word	0x0801855a
 8014ca4:	00000000 	.word	0x00000000
 8014ca8:	080149f9 	.word	0x080149f9
 8014cac:	08018556 	.word	0x08018556

08014cb0 <__sfputc_r>:
 8014cb0:	6893      	ldr	r3, [r2, #8]
 8014cb2:	3b01      	subs	r3, #1
 8014cb4:	2b00      	cmp	r3, #0
 8014cb6:	b410      	push	{r4}
 8014cb8:	6093      	str	r3, [r2, #8]
 8014cba:	da08      	bge.n	8014cce <__sfputc_r+0x1e>
 8014cbc:	6994      	ldr	r4, [r2, #24]
 8014cbe:	42a3      	cmp	r3, r4
 8014cc0:	db01      	blt.n	8014cc6 <__sfputc_r+0x16>
 8014cc2:	290a      	cmp	r1, #10
 8014cc4:	d103      	bne.n	8014cce <__sfputc_r+0x1e>
 8014cc6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014cca:	f000 bb33 	b.w	8015334 <__swbuf_r>
 8014cce:	6813      	ldr	r3, [r2, #0]
 8014cd0:	1c58      	adds	r0, r3, #1
 8014cd2:	6010      	str	r0, [r2, #0]
 8014cd4:	7019      	strb	r1, [r3, #0]
 8014cd6:	4608      	mov	r0, r1
 8014cd8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014cdc:	4770      	bx	lr

08014cde <__sfputs_r>:
 8014cde:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014ce0:	4606      	mov	r6, r0
 8014ce2:	460f      	mov	r7, r1
 8014ce4:	4614      	mov	r4, r2
 8014ce6:	18d5      	adds	r5, r2, r3
 8014ce8:	42ac      	cmp	r4, r5
 8014cea:	d101      	bne.n	8014cf0 <__sfputs_r+0x12>
 8014cec:	2000      	movs	r0, #0
 8014cee:	e007      	b.n	8014d00 <__sfputs_r+0x22>
 8014cf0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014cf4:	463a      	mov	r2, r7
 8014cf6:	4630      	mov	r0, r6
 8014cf8:	f7ff ffda 	bl	8014cb0 <__sfputc_r>
 8014cfc:	1c43      	adds	r3, r0, #1
 8014cfe:	d1f3      	bne.n	8014ce8 <__sfputs_r+0xa>
 8014d00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014d04 <_vfiprintf_r>:
 8014d04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d08:	460d      	mov	r5, r1
 8014d0a:	b09d      	sub	sp, #116	; 0x74
 8014d0c:	4614      	mov	r4, r2
 8014d0e:	4698      	mov	r8, r3
 8014d10:	4606      	mov	r6, r0
 8014d12:	b118      	cbz	r0, 8014d1c <_vfiprintf_r+0x18>
 8014d14:	6983      	ldr	r3, [r0, #24]
 8014d16:	b90b      	cbnz	r3, 8014d1c <_vfiprintf_r+0x18>
 8014d18:	f7ff fd0a 	bl	8014730 <__sinit>
 8014d1c:	4b89      	ldr	r3, [pc, #548]	; (8014f44 <_vfiprintf_r+0x240>)
 8014d1e:	429d      	cmp	r5, r3
 8014d20:	d11b      	bne.n	8014d5a <_vfiprintf_r+0x56>
 8014d22:	6875      	ldr	r5, [r6, #4]
 8014d24:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014d26:	07d9      	lsls	r1, r3, #31
 8014d28:	d405      	bmi.n	8014d36 <_vfiprintf_r+0x32>
 8014d2a:	89ab      	ldrh	r3, [r5, #12]
 8014d2c:	059a      	lsls	r2, r3, #22
 8014d2e:	d402      	bmi.n	8014d36 <_vfiprintf_r+0x32>
 8014d30:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014d32:	f7ff fdad 	bl	8014890 <__retarget_lock_acquire_recursive>
 8014d36:	89ab      	ldrh	r3, [r5, #12]
 8014d38:	071b      	lsls	r3, r3, #28
 8014d3a:	d501      	bpl.n	8014d40 <_vfiprintf_r+0x3c>
 8014d3c:	692b      	ldr	r3, [r5, #16]
 8014d3e:	b9eb      	cbnz	r3, 8014d7c <_vfiprintf_r+0x78>
 8014d40:	4629      	mov	r1, r5
 8014d42:	4630      	mov	r0, r6
 8014d44:	f000 fb5a 	bl	80153fc <__swsetup_r>
 8014d48:	b1c0      	cbz	r0, 8014d7c <_vfiprintf_r+0x78>
 8014d4a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014d4c:	07dc      	lsls	r4, r3, #31
 8014d4e:	d50e      	bpl.n	8014d6e <_vfiprintf_r+0x6a>
 8014d50:	f04f 30ff 	mov.w	r0, #4294967295
 8014d54:	b01d      	add	sp, #116	; 0x74
 8014d56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014d5a:	4b7b      	ldr	r3, [pc, #492]	; (8014f48 <_vfiprintf_r+0x244>)
 8014d5c:	429d      	cmp	r5, r3
 8014d5e:	d101      	bne.n	8014d64 <_vfiprintf_r+0x60>
 8014d60:	68b5      	ldr	r5, [r6, #8]
 8014d62:	e7df      	b.n	8014d24 <_vfiprintf_r+0x20>
 8014d64:	4b79      	ldr	r3, [pc, #484]	; (8014f4c <_vfiprintf_r+0x248>)
 8014d66:	429d      	cmp	r5, r3
 8014d68:	bf08      	it	eq
 8014d6a:	68f5      	ldreq	r5, [r6, #12]
 8014d6c:	e7da      	b.n	8014d24 <_vfiprintf_r+0x20>
 8014d6e:	89ab      	ldrh	r3, [r5, #12]
 8014d70:	0598      	lsls	r0, r3, #22
 8014d72:	d4ed      	bmi.n	8014d50 <_vfiprintf_r+0x4c>
 8014d74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014d76:	f7ff fd8c 	bl	8014892 <__retarget_lock_release_recursive>
 8014d7a:	e7e9      	b.n	8014d50 <_vfiprintf_r+0x4c>
 8014d7c:	2300      	movs	r3, #0
 8014d7e:	9309      	str	r3, [sp, #36]	; 0x24
 8014d80:	2320      	movs	r3, #32
 8014d82:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014d86:	f8cd 800c 	str.w	r8, [sp, #12]
 8014d8a:	2330      	movs	r3, #48	; 0x30
 8014d8c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8014f50 <_vfiprintf_r+0x24c>
 8014d90:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014d94:	f04f 0901 	mov.w	r9, #1
 8014d98:	4623      	mov	r3, r4
 8014d9a:	469a      	mov	sl, r3
 8014d9c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014da0:	b10a      	cbz	r2, 8014da6 <_vfiprintf_r+0xa2>
 8014da2:	2a25      	cmp	r2, #37	; 0x25
 8014da4:	d1f9      	bne.n	8014d9a <_vfiprintf_r+0x96>
 8014da6:	ebba 0b04 	subs.w	fp, sl, r4
 8014daa:	d00b      	beq.n	8014dc4 <_vfiprintf_r+0xc0>
 8014dac:	465b      	mov	r3, fp
 8014dae:	4622      	mov	r2, r4
 8014db0:	4629      	mov	r1, r5
 8014db2:	4630      	mov	r0, r6
 8014db4:	f7ff ff93 	bl	8014cde <__sfputs_r>
 8014db8:	3001      	adds	r0, #1
 8014dba:	f000 80aa 	beq.w	8014f12 <_vfiprintf_r+0x20e>
 8014dbe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014dc0:	445a      	add	r2, fp
 8014dc2:	9209      	str	r2, [sp, #36]	; 0x24
 8014dc4:	f89a 3000 	ldrb.w	r3, [sl]
 8014dc8:	2b00      	cmp	r3, #0
 8014dca:	f000 80a2 	beq.w	8014f12 <_vfiprintf_r+0x20e>
 8014dce:	2300      	movs	r3, #0
 8014dd0:	f04f 32ff 	mov.w	r2, #4294967295
 8014dd4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014dd8:	f10a 0a01 	add.w	sl, sl, #1
 8014ddc:	9304      	str	r3, [sp, #16]
 8014dde:	9307      	str	r3, [sp, #28]
 8014de0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014de4:	931a      	str	r3, [sp, #104]	; 0x68
 8014de6:	4654      	mov	r4, sl
 8014de8:	2205      	movs	r2, #5
 8014dea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014dee:	4858      	ldr	r0, [pc, #352]	; (8014f50 <_vfiprintf_r+0x24c>)
 8014df0:	f7eb f9fe 	bl	80001f0 <memchr>
 8014df4:	9a04      	ldr	r2, [sp, #16]
 8014df6:	b9d8      	cbnz	r0, 8014e30 <_vfiprintf_r+0x12c>
 8014df8:	06d1      	lsls	r1, r2, #27
 8014dfa:	bf44      	itt	mi
 8014dfc:	2320      	movmi	r3, #32
 8014dfe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014e02:	0713      	lsls	r3, r2, #28
 8014e04:	bf44      	itt	mi
 8014e06:	232b      	movmi	r3, #43	; 0x2b
 8014e08:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014e0c:	f89a 3000 	ldrb.w	r3, [sl]
 8014e10:	2b2a      	cmp	r3, #42	; 0x2a
 8014e12:	d015      	beq.n	8014e40 <_vfiprintf_r+0x13c>
 8014e14:	9a07      	ldr	r2, [sp, #28]
 8014e16:	4654      	mov	r4, sl
 8014e18:	2000      	movs	r0, #0
 8014e1a:	f04f 0c0a 	mov.w	ip, #10
 8014e1e:	4621      	mov	r1, r4
 8014e20:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014e24:	3b30      	subs	r3, #48	; 0x30
 8014e26:	2b09      	cmp	r3, #9
 8014e28:	d94e      	bls.n	8014ec8 <_vfiprintf_r+0x1c4>
 8014e2a:	b1b0      	cbz	r0, 8014e5a <_vfiprintf_r+0x156>
 8014e2c:	9207      	str	r2, [sp, #28]
 8014e2e:	e014      	b.n	8014e5a <_vfiprintf_r+0x156>
 8014e30:	eba0 0308 	sub.w	r3, r0, r8
 8014e34:	fa09 f303 	lsl.w	r3, r9, r3
 8014e38:	4313      	orrs	r3, r2
 8014e3a:	9304      	str	r3, [sp, #16]
 8014e3c:	46a2      	mov	sl, r4
 8014e3e:	e7d2      	b.n	8014de6 <_vfiprintf_r+0xe2>
 8014e40:	9b03      	ldr	r3, [sp, #12]
 8014e42:	1d19      	adds	r1, r3, #4
 8014e44:	681b      	ldr	r3, [r3, #0]
 8014e46:	9103      	str	r1, [sp, #12]
 8014e48:	2b00      	cmp	r3, #0
 8014e4a:	bfbb      	ittet	lt
 8014e4c:	425b      	neglt	r3, r3
 8014e4e:	f042 0202 	orrlt.w	r2, r2, #2
 8014e52:	9307      	strge	r3, [sp, #28]
 8014e54:	9307      	strlt	r3, [sp, #28]
 8014e56:	bfb8      	it	lt
 8014e58:	9204      	strlt	r2, [sp, #16]
 8014e5a:	7823      	ldrb	r3, [r4, #0]
 8014e5c:	2b2e      	cmp	r3, #46	; 0x2e
 8014e5e:	d10c      	bne.n	8014e7a <_vfiprintf_r+0x176>
 8014e60:	7863      	ldrb	r3, [r4, #1]
 8014e62:	2b2a      	cmp	r3, #42	; 0x2a
 8014e64:	d135      	bne.n	8014ed2 <_vfiprintf_r+0x1ce>
 8014e66:	9b03      	ldr	r3, [sp, #12]
 8014e68:	1d1a      	adds	r2, r3, #4
 8014e6a:	681b      	ldr	r3, [r3, #0]
 8014e6c:	9203      	str	r2, [sp, #12]
 8014e6e:	2b00      	cmp	r3, #0
 8014e70:	bfb8      	it	lt
 8014e72:	f04f 33ff 	movlt.w	r3, #4294967295
 8014e76:	3402      	adds	r4, #2
 8014e78:	9305      	str	r3, [sp, #20]
 8014e7a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8014f60 <_vfiprintf_r+0x25c>
 8014e7e:	7821      	ldrb	r1, [r4, #0]
 8014e80:	2203      	movs	r2, #3
 8014e82:	4650      	mov	r0, sl
 8014e84:	f7eb f9b4 	bl	80001f0 <memchr>
 8014e88:	b140      	cbz	r0, 8014e9c <_vfiprintf_r+0x198>
 8014e8a:	2340      	movs	r3, #64	; 0x40
 8014e8c:	eba0 000a 	sub.w	r0, r0, sl
 8014e90:	fa03 f000 	lsl.w	r0, r3, r0
 8014e94:	9b04      	ldr	r3, [sp, #16]
 8014e96:	4303      	orrs	r3, r0
 8014e98:	3401      	adds	r4, #1
 8014e9a:	9304      	str	r3, [sp, #16]
 8014e9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014ea0:	482c      	ldr	r0, [pc, #176]	; (8014f54 <_vfiprintf_r+0x250>)
 8014ea2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014ea6:	2206      	movs	r2, #6
 8014ea8:	f7eb f9a2 	bl	80001f0 <memchr>
 8014eac:	2800      	cmp	r0, #0
 8014eae:	d03f      	beq.n	8014f30 <_vfiprintf_r+0x22c>
 8014eb0:	4b29      	ldr	r3, [pc, #164]	; (8014f58 <_vfiprintf_r+0x254>)
 8014eb2:	bb1b      	cbnz	r3, 8014efc <_vfiprintf_r+0x1f8>
 8014eb4:	9b03      	ldr	r3, [sp, #12]
 8014eb6:	3307      	adds	r3, #7
 8014eb8:	f023 0307 	bic.w	r3, r3, #7
 8014ebc:	3308      	adds	r3, #8
 8014ebe:	9303      	str	r3, [sp, #12]
 8014ec0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014ec2:	443b      	add	r3, r7
 8014ec4:	9309      	str	r3, [sp, #36]	; 0x24
 8014ec6:	e767      	b.n	8014d98 <_vfiprintf_r+0x94>
 8014ec8:	fb0c 3202 	mla	r2, ip, r2, r3
 8014ecc:	460c      	mov	r4, r1
 8014ece:	2001      	movs	r0, #1
 8014ed0:	e7a5      	b.n	8014e1e <_vfiprintf_r+0x11a>
 8014ed2:	2300      	movs	r3, #0
 8014ed4:	3401      	adds	r4, #1
 8014ed6:	9305      	str	r3, [sp, #20]
 8014ed8:	4619      	mov	r1, r3
 8014eda:	f04f 0c0a 	mov.w	ip, #10
 8014ede:	4620      	mov	r0, r4
 8014ee0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014ee4:	3a30      	subs	r2, #48	; 0x30
 8014ee6:	2a09      	cmp	r2, #9
 8014ee8:	d903      	bls.n	8014ef2 <_vfiprintf_r+0x1ee>
 8014eea:	2b00      	cmp	r3, #0
 8014eec:	d0c5      	beq.n	8014e7a <_vfiprintf_r+0x176>
 8014eee:	9105      	str	r1, [sp, #20]
 8014ef0:	e7c3      	b.n	8014e7a <_vfiprintf_r+0x176>
 8014ef2:	fb0c 2101 	mla	r1, ip, r1, r2
 8014ef6:	4604      	mov	r4, r0
 8014ef8:	2301      	movs	r3, #1
 8014efa:	e7f0      	b.n	8014ede <_vfiprintf_r+0x1da>
 8014efc:	ab03      	add	r3, sp, #12
 8014efe:	9300      	str	r3, [sp, #0]
 8014f00:	462a      	mov	r2, r5
 8014f02:	4b16      	ldr	r3, [pc, #88]	; (8014f5c <_vfiprintf_r+0x258>)
 8014f04:	a904      	add	r1, sp, #16
 8014f06:	4630      	mov	r0, r6
 8014f08:	f3af 8000 	nop.w
 8014f0c:	4607      	mov	r7, r0
 8014f0e:	1c78      	adds	r0, r7, #1
 8014f10:	d1d6      	bne.n	8014ec0 <_vfiprintf_r+0x1bc>
 8014f12:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014f14:	07d9      	lsls	r1, r3, #31
 8014f16:	d405      	bmi.n	8014f24 <_vfiprintf_r+0x220>
 8014f18:	89ab      	ldrh	r3, [r5, #12]
 8014f1a:	059a      	lsls	r2, r3, #22
 8014f1c:	d402      	bmi.n	8014f24 <_vfiprintf_r+0x220>
 8014f1e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014f20:	f7ff fcb7 	bl	8014892 <__retarget_lock_release_recursive>
 8014f24:	89ab      	ldrh	r3, [r5, #12]
 8014f26:	065b      	lsls	r3, r3, #25
 8014f28:	f53f af12 	bmi.w	8014d50 <_vfiprintf_r+0x4c>
 8014f2c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014f2e:	e711      	b.n	8014d54 <_vfiprintf_r+0x50>
 8014f30:	ab03      	add	r3, sp, #12
 8014f32:	9300      	str	r3, [sp, #0]
 8014f34:	462a      	mov	r2, r5
 8014f36:	4b09      	ldr	r3, [pc, #36]	; (8014f5c <_vfiprintf_r+0x258>)
 8014f38:	a904      	add	r1, sp, #16
 8014f3a:	4630      	mov	r0, r6
 8014f3c:	f000 f880 	bl	8015040 <_printf_i>
 8014f40:	e7e4      	b.n	8014f0c <_vfiprintf_r+0x208>
 8014f42:	bf00      	nop
 8014f44:	08018510 	.word	0x08018510
 8014f48:	08018530 	.word	0x08018530
 8014f4c:	080184f0 	.word	0x080184f0
 8014f50:	08018550 	.word	0x08018550
 8014f54:	0801855a 	.word	0x0801855a
 8014f58:	00000000 	.word	0x00000000
 8014f5c:	08014cdf 	.word	0x08014cdf
 8014f60:	08018556 	.word	0x08018556

08014f64 <_printf_common>:
 8014f64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014f68:	4616      	mov	r6, r2
 8014f6a:	4699      	mov	r9, r3
 8014f6c:	688a      	ldr	r2, [r1, #8]
 8014f6e:	690b      	ldr	r3, [r1, #16]
 8014f70:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8014f74:	4293      	cmp	r3, r2
 8014f76:	bfb8      	it	lt
 8014f78:	4613      	movlt	r3, r2
 8014f7a:	6033      	str	r3, [r6, #0]
 8014f7c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8014f80:	4607      	mov	r7, r0
 8014f82:	460c      	mov	r4, r1
 8014f84:	b10a      	cbz	r2, 8014f8a <_printf_common+0x26>
 8014f86:	3301      	adds	r3, #1
 8014f88:	6033      	str	r3, [r6, #0]
 8014f8a:	6823      	ldr	r3, [r4, #0]
 8014f8c:	0699      	lsls	r1, r3, #26
 8014f8e:	bf42      	ittt	mi
 8014f90:	6833      	ldrmi	r3, [r6, #0]
 8014f92:	3302      	addmi	r3, #2
 8014f94:	6033      	strmi	r3, [r6, #0]
 8014f96:	6825      	ldr	r5, [r4, #0]
 8014f98:	f015 0506 	ands.w	r5, r5, #6
 8014f9c:	d106      	bne.n	8014fac <_printf_common+0x48>
 8014f9e:	f104 0a19 	add.w	sl, r4, #25
 8014fa2:	68e3      	ldr	r3, [r4, #12]
 8014fa4:	6832      	ldr	r2, [r6, #0]
 8014fa6:	1a9b      	subs	r3, r3, r2
 8014fa8:	42ab      	cmp	r3, r5
 8014faa:	dc26      	bgt.n	8014ffa <_printf_common+0x96>
 8014fac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8014fb0:	1e13      	subs	r3, r2, #0
 8014fb2:	6822      	ldr	r2, [r4, #0]
 8014fb4:	bf18      	it	ne
 8014fb6:	2301      	movne	r3, #1
 8014fb8:	0692      	lsls	r2, r2, #26
 8014fba:	d42b      	bmi.n	8015014 <_printf_common+0xb0>
 8014fbc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8014fc0:	4649      	mov	r1, r9
 8014fc2:	4638      	mov	r0, r7
 8014fc4:	47c0      	blx	r8
 8014fc6:	3001      	adds	r0, #1
 8014fc8:	d01e      	beq.n	8015008 <_printf_common+0xa4>
 8014fca:	6823      	ldr	r3, [r4, #0]
 8014fcc:	68e5      	ldr	r5, [r4, #12]
 8014fce:	6832      	ldr	r2, [r6, #0]
 8014fd0:	f003 0306 	and.w	r3, r3, #6
 8014fd4:	2b04      	cmp	r3, #4
 8014fd6:	bf08      	it	eq
 8014fd8:	1aad      	subeq	r5, r5, r2
 8014fda:	68a3      	ldr	r3, [r4, #8]
 8014fdc:	6922      	ldr	r2, [r4, #16]
 8014fde:	bf0c      	ite	eq
 8014fe0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014fe4:	2500      	movne	r5, #0
 8014fe6:	4293      	cmp	r3, r2
 8014fe8:	bfc4      	itt	gt
 8014fea:	1a9b      	subgt	r3, r3, r2
 8014fec:	18ed      	addgt	r5, r5, r3
 8014fee:	2600      	movs	r6, #0
 8014ff0:	341a      	adds	r4, #26
 8014ff2:	42b5      	cmp	r5, r6
 8014ff4:	d11a      	bne.n	801502c <_printf_common+0xc8>
 8014ff6:	2000      	movs	r0, #0
 8014ff8:	e008      	b.n	801500c <_printf_common+0xa8>
 8014ffa:	2301      	movs	r3, #1
 8014ffc:	4652      	mov	r2, sl
 8014ffe:	4649      	mov	r1, r9
 8015000:	4638      	mov	r0, r7
 8015002:	47c0      	blx	r8
 8015004:	3001      	adds	r0, #1
 8015006:	d103      	bne.n	8015010 <_printf_common+0xac>
 8015008:	f04f 30ff 	mov.w	r0, #4294967295
 801500c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015010:	3501      	adds	r5, #1
 8015012:	e7c6      	b.n	8014fa2 <_printf_common+0x3e>
 8015014:	18e1      	adds	r1, r4, r3
 8015016:	1c5a      	adds	r2, r3, #1
 8015018:	2030      	movs	r0, #48	; 0x30
 801501a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801501e:	4422      	add	r2, r4
 8015020:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8015024:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8015028:	3302      	adds	r3, #2
 801502a:	e7c7      	b.n	8014fbc <_printf_common+0x58>
 801502c:	2301      	movs	r3, #1
 801502e:	4622      	mov	r2, r4
 8015030:	4649      	mov	r1, r9
 8015032:	4638      	mov	r0, r7
 8015034:	47c0      	blx	r8
 8015036:	3001      	adds	r0, #1
 8015038:	d0e6      	beq.n	8015008 <_printf_common+0xa4>
 801503a:	3601      	adds	r6, #1
 801503c:	e7d9      	b.n	8014ff2 <_printf_common+0x8e>
	...

08015040 <_printf_i>:
 8015040:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015044:	460c      	mov	r4, r1
 8015046:	4691      	mov	r9, r2
 8015048:	7e27      	ldrb	r7, [r4, #24]
 801504a:	990c      	ldr	r1, [sp, #48]	; 0x30
 801504c:	2f78      	cmp	r7, #120	; 0x78
 801504e:	4680      	mov	r8, r0
 8015050:	469a      	mov	sl, r3
 8015052:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8015056:	d807      	bhi.n	8015068 <_printf_i+0x28>
 8015058:	2f62      	cmp	r7, #98	; 0x62
 801505a:	d80a      	bhi.n	8015072 <_printf_i+0x32>
 801505c:	2f00      	cmp	r7, #0
 801505e:	f000 80d8 	beq.w	8015212 <_printf_i+0x1d2>
 8015062:	2f58      	cmp	r7, #88	; 0x58
 8015064:	f000 80a3 	beq.w	80151ae <_printf_i+0x16e>
 8015068:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801506c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8015070:	e03a      	b.n	80150e8 <_printf_i+0xa8>
 8015072:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8015076:	2b15      	cmp	r3, #21
 8015078:	d8f6      	bhi.n	8015068 <_printf_i+0x28>
 801507a:	a001      	add	r0, pc, #4	; (adr r0, 8015080 <_printf_i+0x40>)
 801507c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8015080:	080150d9 	.word	0x080150d9
 8015084:	080150ed 	.word	0x080150ed
 8015088:	08015069 	.word	0x08015069
 801508c:	08015069 	.word	0x08015069
 8015090:	08015069 	.word	0x08015069
 8015094:	08015069 	.word	0x08015069
 8015098:	080150ed 	.word	0x080150ed
 801509c:	08015069 	.word	0x08015069
 80150a0:	08015069 	.word	0x08015069
 80150a4:	08015069 	.word	0x08015069
 80150a8:	08015069 	.word	0x08015069
 80150ac:	080151f9 	.word	0x080151f9
 80150b0:	0801511d 	.word	0x0801511d
 80150b4:	080151db 	.word	0x080151db
 80150b8:	08015069 	.word	0x08015069
 80150bc:	08015069 	.word	0x08015069
 80150c0:	0801521b 	.word	0x0801521b
 80150c4:	08015069 	.word	0x08015069
 80150c8:	0801511d 	.word	0x0801511d
 80150cc:	08015069 	.word	0x08015069
 80150d0:	08015069 	.word	0x08015069
 80150d4:	080151e3 	.word	0x080151e3
 80150d8:	680b      	ldr	r3, [r1, #0]
 80150da:	1d1a      	adds	r2, r3, #4
 80150dc:	681b      	ldr	r3, [r3, #0]
 80150de:	600a      	str	r2, [r1, #0]
 80150e0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80150e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80150e8:	2301      	movs	r3, #1
 80150ea:	e0a3      	b.n	8015234 <_printf_i+0x1f4>
 80150ec:	6825      	ldr	r5, [r4, #0]
 80150ee:	6808      	ldr	r0, [r1, #0]
 80150f0:	062e      	lsls	r6, r5, #24
 80150f2:	f100 0304 	add.w	r3, r0, #4
 80150f6:	d50a      	bpl.n	801510e <_printf_i+0xce>
 80150f8:	6805      	ldr	r5, [r0, #0]
 80150fa:	600b      	str	r3, [r1, #0]
 80150fc:	2d00      	cmp	r5, #0
 80150fe:	da03      	bge.n	8015108 <_printf_i+0xc8>
 8015100:	232d      	movs	r3, #45	; 0x2d
 8015102:	426d      	negs	r5, r5
 8015104:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015108:	485e      	ldr	r0, [pc, #376]	; (8015284 <_printf_i+0x244>)
 801510a:	230a      	movs	r3, #10
 801510c:	e019      	b.n	8015142 <_printf_i+0x102>
 801510e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8015112:	6805      	ldr	r5, [r0, #0]
 8015114:	600b      	str	r3, [r1, #0]
 8015116:	bf18      	it	ne
 8015118:	b22d      	sxthne	r5, r5
 801511a:	e7ef      	b.n	80150fc <_printf_i+0xbc>
 801511c:	680b      	ldr	r3, [r1, #0]
 801511e:	6825      	ldr	r5, [r4, #0]
 8015120:	1d18      	adds	r0, r3, #4
 8015122:	6008      	str	r0, [r1, #0]
 8015124:	0628      	lsls	r0, r5, #24
 8015126:	d501      	bpl.n	801512c <_printf_i+0xec>
 8015128:	681d      	ldr	r5, [r3, #0]
 801512a:	e002      	b.n	8015132 <_printf_i+0xf2>
 801512c:	0669      	lsls	r1, r5, #25
 801512e:	d5fb      	bpl.n	8015128 <_printf_i+0xe8>
 8015130:	881d      	ldrh	r5, [r3, #0]
 8015132:	4854      	ldr	r0, [pc, #336]	; (8015284 <_printf_i+0x244>)
 8015134:	2f6f      	cmp	r7, #111	; 0x6f
 8015136:	bf0c      	ite	eq
 8015138:	2308      	moveq	r3, #8
 801513a:	230a      	movne	r3, #10
 801513c:	2100      	movs	r1, #0
 801513e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8015142:	6866      	ldr	r6, [r4, #4]
 8015144:	60a6      	str	r6, [r4, #8]
 8015146:	2e00      	cmp	r6, #0
 8015148:	bfa2      	ittt	ge
 801514a:	6821      	ldrge	r1, [r4, #0]
 801514c:	f021 0104 	bicge.w	r1, r1, #4
 8015150:	6021      	strge	r1, [r4, #0]
 8015152:	b90d      	cbnz	r5, 8015158 <_printf_i+0x118>
 8015154:	2e00      	cmp	r6, #0
 8015156:	d04d      	beq.n	80151f4 <_printf_i+0x1b4>
 8015158:	4616      	mov	r6, r2
 801515a:	fbb5 f1f3 	udiv	r1, r5, r3
 801515e:	fb03 5711 	mls	r7, r3, r1, r5
 8015162:	5dc7      	ldrb	r7, [r0, r7]
 8015164:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8015168:	462f      	mov	r7, r5
 801516a:	42bb      	cmp	r3, r7
 801516c:	460d      	mov	r5, r1
 801516e:	d9f4      	bls.n	801515a <_printf_i+0x11a>
 8015170:	2b08      	cmp	r3, #8
 8015172:	d10b      	bne.n	801518c <_printf_i+0x14c>
 8015174:	6823      	ldr	r3, [r4, #0]
 8015176:	07df      	lsls	r7, r3, #31
 8015178:	d508      	bpl.n	801518c <_printf_i+0x14c>
 801517a:	6923      	ldr	r3, [r4, #16]
 801517c:	6861      	ldr	r1, [r4, #4]
 801517e:	4299      	cmp	r1, r3
 8015180:	bfde      	ittt	le
 8015182:	2330      	movle	r3, #48	; 0x30
 8015184:	f806 3c01 	strble.w	r3, [r6, #-1]
 8015188:	f106 36ff 	addle.w	r6, r6, #4294967295
 801518c:	1b92      	subs	r2, r2, r6
 801518e:	6122      	str	r2, [r4, #16]
 8015190:	f8cd a000 	str.w	sl, [sp]
 8015194:	464b      	mov	r3, r9
 8015196:	aa03      	add	r2, sp, #12
 8015198:	4621      	mov	r1, r4
 801519a:	4640      	mov	r0, r8
 801519c:	f7ff fee2 	bl	8014f64 <_printf_common>
 80151a0:	3001      	adds	r0, #1
 80151a2:	d14c      	bne.n	801523e <_printf_i+0x1fe>
 80151a4:	f04f 30ff 	mov.w	r0, #4294967295
 80151a8:	b004      	add	sp, #16
 80151aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80151ae:	4835      	ldr	r0, [pc, #212]	; (8015284 <_printf_i+0x244>)
 80151b0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80151b4:	6823      	ldr	r3, [r4, #0]
 80151b6:	680e      	ldr	r6, [r1, #0]
 80151b8:	061f      	lsls	r7, r3, #24
 80151ba:	f856 5b04 	ldr.w	r5, [r6], #4
 80151be:	600e      	str	r6, [r1, #0]
 80151c0:	d514      	bpl.n	80151ec <_printf_i+0x1ac>
 80151c2:	07d9      	lsls	r1, r3, #31
 80151c4:	bf44      	itt	mi
 80151c6:	f043 0320 	orrmi.w	r3, r3, #32
 80151ca:	6023      	strmi	r3, [r4, #0]
 80151cc:	b91d      	cbnz	r5, 80151d6 <_printf_i+0x196>
 80151ce:	6823      	ldr	r3, [r4, #0]
 80151d0:	f023 0320 	bic.w	r3, r3, #32
 80151d4:	6023      	str	r3, [r4, #0]
 80151d6:	2310      	movs	r3, #16
 80151d8:	e7b0      	b.n	801513c <_printf_i+0xfc>
 80151da:	6823      	ldr	r3, [r4, #0]
 80151dc:	f043 0320 	orr.w	r3, r3, #32
 80151e0:	6023      	str	r3, [r4, #0]
 80151e2:	2378      	movs	r3, #120	; 0x78
 80151e4:	4828      	ldr	r0, [pc, #160]	; (8015288 <_printf_i+0x248>)
 80151e6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80151ea:	e7e3      	b.n	80151b4 <_printf_i+0x174>
 80151ec:	065e      	lsls	r6, r3, #25
 80151ee:	bf48      	it	mi
 80151f0:	b2ad      	uxthmi	r5, r5
 80151f2:	e7e6      	b.n	80151c2 <_printf_i+0x182>
 80151f4:	4616      	mov	r6, r2
 80151f6:	e7bb      	b.n	8015170 <_printf_i+0x130>
 80151f8:	680b      	ldr	r3, [r1, #0]
 80151fa:	6826      	ldr	r6, [r4, #0]
 80151fc:	6960      	ldr	r0, [r4, #20]
 80151fe:	1d1d      	adds	r5, r3, #4
 8015200:	600d      	str	r5, [r1, #0]
 8015202:	0635      	lsls	r5, r6, #24
 8015204:	681b      	ldr	r3, [r3, #0]
 8015206:	d501      	bpl.n	801520c <_printf_i+0x1cc>
 8015208:	6018      	str	r0, [r3, #0]
 801520a:	e002      	b.n	8015212 <_printf_i+0x1d2>
 801520c:	0671      	lsls	r1, r6, #25
 801520e:	d5fb      	bpl.n	8015208 <_printf_i+0x1c8>
 8015210:	8018      	strh	r0, [r3, #0]
 8015212:	2300      	movs	r3, #0
 8015214:	6123      	str	r3, [r4, #16]
 8015216:	4616      	mov	r6, r2
 8015218:	e7ba      	b.n	8015190 <_printf_i+0x150>
 801521a:	680b      	ldr	r3, [r1, #0]
 801521c:	1d1a      	adds	r2, r3, #4
 801521e:	600a      	str	r2, [r1, #0]
 8015220:	681e      	ldr	r6, [r3, #0]
 8015222:	6862      	ldr	r2, [r4, #4]
 8015224:	2100      	movs	r1, #0
 8015226:	4630      	mov	r0, r6
 8015228:	f7ea ffe2 	bl	80001f0 <memchr>
 801522c:	b108      	cbz	r0, 8015232 <_printf_i+0x1f2>
 801522e:	1b80      	subs	r0, r0, r6
 8015230:	6060      	str	r0, [r4, #4]
 8015232:	6863      	ldr	r3, [r4, #4]
 8015234:	6123      	str	r3, [r4, #16]
 8015236:	2300      	movs	r3, #0
 8015238:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801523c:	e7a8      	b.n	8015190 <_printf_i+0x150>
 801523e:	6923      	ldr	r3, [r4, #16]
 8015240:	4632      	mov	r2, r6
 8015242:	4649      	mov	r1, r9
 8015244:	4640      	mov	r0, r8
 8015246:	47d0      	blx	sl
 8015248:	3001      	adds	r0, #1
 801524a:	d0ab      	beq.n	80151a4 <_printf_i+0x164>
 801524c:	6823      	ldr	r3, [r4, #0]
 801524e:	079b      	lsls	r3, r3, #30
 8015250:	d413      	bmi.n	801527a <_printf_i+0x23a>
 8015252:	68e0      	ldr	r0, [r4, #12]
 8015254:	9b03      	ldr	r3, [sp, #12]
 8015256:	4298      	cmp	r0, r3
 8015258:	bfb8      	it	lt
 801525a:	4618      	movlt	r0, r3
 801525c:	e7a4      	b.n	80151a8 <_printf_i+0x168>
 801525e:	2301      	movs	r3, #1
 8015260:	4632      	mov	r2, r6
 8015262:	4649      	mov	r1, r9
 8015264:	4640      	mov	r0, r8
 8015266:	47d0      	blx	sl
 8015268:	3001      	adds	r0, #1
 801526a:	d09b      	beq.n	80151a4 <_printf_i+0x164>
 801526c:	3501      	adds	r5, #1
 801526e:	68e3      	ldr	r3, [r4, #12]
 8015270:	9903      	ldr	r1, [sp, #12]
 8015272:	1a5b      	subs	r3, r3, r1
 8015274:	42ab      	cmp	r3, r5
 8015276:	dcf2      	bgt.n	801525e <_printf_i+0x21e>
 8015278:	e7eb      	b.n	8015252 <_printf_i+0x212>
 801527a:	2500      	movs	r5, #0
 801527c:	f104 0619 	add.w	r6, r4, #25
 8015280:	e7f5      	b.n	801526e <_printf_i+0x22e>
 8015282:	bf00      	nop
 8015284:	08018561 	.word	0x08018561
 8015288:	08018572 	.word	0x08018572

0801528c <_sbrk_r>:
 801528c:	b538      	push	{r3, r4, r5, lr}
 801528e:	4d06      	ldr	r5, [pc, #24]	; (80152a8 <_sbrk_r+0x1c>)
 8015290:	2300      	movs	r3, #0
 8015292:	4604      	mov	r4, r0
 8015294:	4608      	mov	r0, r1
 8015296:	602b      	str	r3, [r5, #0]
 8015298:	f7ec f9be 	bl	8001618 <_sbrk>
 801529c:	1c43      	adds	r3, r0, #1
 801529e:	d102      	bne.n	80152a6 <_sbrk_r+0x1a>
 80152a0:	682b      	ldr	r3, [r5, #0]
 80152a2:	b103      	cbz	r3, 80152a6 <_sbrk_r+0x1a>
 80152a4:	6023      	str	r3, [r4, #0]
 80152a6:	bd38      	pop	{r3, r4, r5, pc}
 80152a8:	200072bc 	.word	0x200072bc

080152ac <__sread>:
 80152ac:	b510      	push	{r4, lr}
 80152ae:	460c      	mov	r4, r1
 80152b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80152b4:	f000 fa92 	bl	80157dc <_read_r>
 80152b8:	2800      	cmp	r0, #0
 80152ba:	bfab      	itete	ge
 80152bc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80152be:	89a3      	ldrhlt	r3, [r4, #12]
 80152c0:	181b      	addge	r3, r3, r0
 80152c2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80152c6:	bfac      	ite	ge
 80152c8:	6563      	strge	r3, [r4, #84]	; 0x54
 80152ca:	81a3      	strhlt	r3, [r4, #12]
 80152cc:	bd10      	pop	{r4, pc}

080152ce <__swrite>:
 80152ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80152d2:	461f      	mov	r7, r3
 80152d4:	898b      	ldrh	r3, [r1, #12]
 80152d6:	05db      	lsls	r3, r3, #23
 80152d8:	4605      	mov	r5, r0
 80152da:	460c      	mov	r4, r1
 80152dc:	4616      	mov	r6, r2
 80152de:	d505      	bpl.n	80152ec <__swrite+0x1e>
 80152e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80152e4:	2302      	movs	r3, #2
 80152e6:	2200      	movs	r2, #0
 80152e8:	f000 f9d0 	bl	801568c <_lseek_r>
 80152ec:	89a3      	ldrh	r3, [r4, #12]
 80152ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80152f2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80152f6:	81a3      	strh	r3, [r4, #12]
 80152f8:	4632      	mov	r2, r6
 80152fa:	463b      	mov	r3, r7
 80152fc:	4628      	mov	r0, r5
 80152fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015302:	f000 b869 	b.w	80153d8 <_write_r>

08015306 <__sseek>:
 8015306:	b510      	push	{r4, lr}
 8015308:	460c      	mov	r4, r1
 801530a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801530e:	f000 f9bd 	bl	801568c <_lseek_r>
 8015312:	1c43      	adds	r3, r0, #1
 8015314:	89a3      	ldrh	r3, [r4, #12]
 8015316:	bf15      	itete	ne
 8015318:	6560      	strne	r0, [r4, #84]	; 0x54
 801531a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801531e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8015322:	81a3      	strheq	r3, [r4, #12]
 8015324:	bf18      	it	ne
 8015326:	81a3      	strhne	r3, [r4, #12]
 8015328:	bd10      	pop	{r4, pc}

0801532a <__sclose>:
 801532a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801532e:	f000 b8db 	b.w	80154e8 <_close_r>
	...

08015334 <__swbuf_r>:
 8015334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015336:	460e      	mov	r6, r1
 8015338:	4614      	mov	r4, r2
 801533a:	4605      	mov	r5, r0
 801533c:	b118      	cbz	r0, 8015346 <__swbuf_r+0x12>
 801533e:	6983      	ldr	r3, [r0, #24]
 8015340:	b90b      	cbnz	r3, 8015346 <__swbuf_r+0x12>
 8015342:	f7ff f9f5 	bl	8014730 <__sinit>
 8015346:	4b21      	ldr	r3, [pc, #132]	; (80153cc <__swbuf_r+0x98>)
 8015348:	429c      	cmp	r4, r3
 801534a:	d12b      	bne.n	80153a4 <__swbuf_r+0x70>
 801534c:	686c      	ldr	r4, [r5, #4]
 801534e:	69a3      	ldr	r3, [r4, #24]
 8015350:	60a3      	str	r3, [r4, #8]
 8015352:	89a3      	ldrh	r3, [r4, #12]
 8015354:	071a      	lsls	r2, r3, #28
 8015356:	d52f      	bpl.n	80153b8 <__swbuf_r+0x84>
 8015358:	6923      	ldr	r3, [r4, #16]
 801535a:	b36b      	cbz	r3, 80153b8 <__swbuf_r+0x84>
 801535c:	6923      	ldr	r3, [r4, #16]
 801535e:	6820      	ldr	r0, [r4, #0]
 8015360:	1ac0      	subs	r0, r0, r3
 8015362:	6963      	ldr	r3, [r4, #20]
 8015364:	b2f6      	uxtb	r6, r6
 8015366:	4283      	cmp	r3, r0
 8015368:	4637      	mov	r7, r6
 801536a:	dc04      	bgt.n	8015376 <__swbuf_r+0x42>
 801536c:	4621      	mov	r1, r4
 801536e:	4628      	mov	r0, r5
 8015370:	f000 f950 	bl	8015614 <_fflush_r>
 8015374:	bb30      	cbnz	r0, 80153c4 <__swbuf_r+0x90>
 8015376:	68a3      	ldr	r3, [r4, #8]
 8015378:	3b01      	subs	r3, #1
 801537a:	60a3      	str	r3, [r4, #8]
 801537c:	6823      	ldr	r3, [r4, #0]
 801537e:	1c5a      	adds	r2, r3, #1
 8015380:	6022      	str	r2, [r4, #0]
 8015382:	701e      	strb	r6, [r3, #0]
 8015384:	6963      	ldr	r3, [r4, #20]
 8015386:	3001      	adds	r0, #1
 8015388:	4283      	cmp	r3, r0
 801538a:	d004      	beq.n	8015396 <__swbuf_r+0x62>
 801538c:	89a3      	ldrh	r3, [r4, #12]
 801538e:	07db      	lsls	r3, r3, #31
 8015390:	d506      	bpl.n	80153a0 <__swbuf_r+0x6c>
 8015392:	2e0a      	cmp	r6, #10
 8015394:	d104      	bne.n	80153a0 <__swbuf_r+0x6c>
 8015396:	4621      	mov	r1, r4
 8015398:	4628      	mov	r0, r5
 801539a:	f000 f93b 	bl	8015614 <_fflush_r>
 801539e:	b988      	cbnz	r0, 80153c4 <__swbuf_r+0x90>
 80153a0:	4638      	mov	r0, r7
 80153a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80153a4:	4b0a      	ldr	r3, [pc, #40]	; (80153d0 <__swbuf_r+0x9c>)
 80153a6:	429c      	cmp	r4, r3
 80153a8:	d101      	bne.n	80153ae <__swbuf_r+0x7a>
 80153aa:	68ac      	ldr	r4, [r5, #8]
 80153ac:	e7cf      	b.n	801534e <__swbuf_r+0x1a>
 80153ae:	4b09      	ldr	r3, [pc, #36]	; (80153d4 <__swbuf_r+0xa0>)
 80153b0:	429c      	cmp	r4, r3
 80153b2:	bf08      	it	eq
 80153b4:	68ec      	ldreq	r4, [r5, #12]
 80153b6:	e7ca      	b.n	801534e <__swbuf_r+0x1a>
 80153b8:	4621      	mov	r1, r4
 80153ba:	4628      	mov	r0, r5
 80153bc:	f000 f81e 	bl	80153fc <__swsetup_r>
 80153c0:	2800      	cmp	r0, #0
 80153c2:	d0cb      	beq.n	801535c <__swbuf_r+0x28>
 80153c4:	f04f 37ff 	mov.w	r7, #4294967295
 80153c8:	e7ea      	b.n	80153a0 <__swbuf_r+0x6c>
 80153ca:	bf00      	nop
 80153cc:	08018510 	.word	0x08018510
 80153d0:	08018530 	.word	0x08018530
 80153d4:	080184f0 	.word	0x080184f0

080153d8 <_write_r>:
 80153d8:	b538      	push	{r3, r4, r5, lr}
 80153da:	4d07      	ldr	r5, [pc, #28]	; (80153f8 <_write_r+0x20>)
 80153dc:	4604      	mov	r4, r0
 80153de:	4608      	mov	r0, r1
 80153e0:	4611      	mov	r1, r2
 80153e2:	2200      	movs	r2, #0
 80153e4:	602a      	str	r2, [r5, #0]
 80153e6:	461a      	mov	r2, r3
 80153e8:	f7eb fcb4 	bl	8000d54 <_write>
 80153ec:	1c43      	adds	r3, r0, #1
 80153ee:	d102      	bne.n	80153f6 <_write_r+0x1e>
 80153f0:	682b      	ldr	r3, [r5, #0]
 80153f2:	b103      	cbz	r3, 80153f6 <_write_r+0x1e>
 80153f4:	6023      	str	r3, [r4, #0]
 80153f6:	bd38      	pop	{r3, r4, r5, pc}
 80153f8:	200072bc 	.word	0x200072bc

080153fc <__swsetup_r>:
 80153fc:	4b32      	ldr	r3, [pc, #200]	; (80154c8 <__swsetup_r+0xcc>)
 80153fe:	b570      	push	{r4, r5, r6, lr}
 8015400:	681d      	ldr	r5, [r3, #0]
 8015402:	4606      	mov	r6, r0
 8015404:	460c      	mov	r4, r1
 8015406:	b125      	cbz	r5, 8015412 <__swsetup_r+0x16>
 8015408:	69ab      	ldr	r3, [r5, #24]
 801540a:	b913      	cbnz	r3, 8015412 <__swsetup_r+0x16>
 801540c:	4628      	mov	r0, r5
 801540e:	f7ff f98f 	bl	8014730 <__sinit>
 8015412:	4b2e      	ldr	r3, [pc, #184]	; (80154cc <__swsetup_r+0xd0>)
 8015414:	429c      	cmp	r4, r3
 8015416:	d10f      	bne.n	8015438 <__swsetup_r+0x3c>
 8015418:	686c      	ldr	r4, [r5, #4]
 801541a:	89a3      	ldrh	r3, [r4, #12]
 801541c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015420:	0719      	lsls	r1, r3, #28
 8015422:	d42c      	bmi.n	801547e <__swsetup_r+0x82>
 8015424:	06dd      	lsls	r5, r3, #27
 8015426:	d411      	bmi.n	801544c <__swsetup_r+0x50>
 8015428:	2309      	movs	r3, #9
 801542a:	6033      	str	r3, [r6, #0]
 801542c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8015430:	81a3      	strh	r3, [r4, #12]
 8015432:	f04f 30ff 	mov.w	r0, #4294967295
 8015436:	e03e      	b.n	80154b6 <__swsetup_r+0xba>
 8015438:	4b25      	ldr	r3, [pc, #148]	; (80154d0 <__swsetup_r+0xd4>)
 801543a:	429c      	cmp	r4, r3
 801543c:	d101      	bne.n	8015442 <__swsetup_r+0x46>
 801543e:	68ac      	ldr	r4, [r5, #8]
 8015440:	e7eb      	b.n	801541a <__swsetup_r+0x1e>
 8015442:	4b24      	ldr	r3, [pc, #144]	; (80154d4 <__swsetup_r+0xd8>)
 8015444:	429c      	cmp	r4, r3
 8015446:	bf08      	it	eq
 8015448:	68ec      	ldreq	r4, [r5, #12]
 801544a:	e7e6      	b.n	801541a <__swsetup_r+0x1e>
 801544c:	0758      	lsls	r0, r3, #29
 801544e:	d512      	bpl.n	8015476 <__swsetup_r+0x7a>
 8015450:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015452:	b141      	cbz	r1, 8015466 <__swsetup_r+0x6a>
 8015454:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015458:	4299      	cmp	r1, r3
 801545a:	d002      	beq.n	8015462 <__swsetup_r+0x66>
 801545c:	4630      	mov	r0, r6
 801545e:	f7ff fa21 	bl	80148a4 <_free_r>
 8015462:	2300      	movs	r3, #0
 8015464:	6363      	str	r3, [r4, #52]	; 0x34
 8015466:	89a3      	ldrh	r3, [r4, #12]
 8015468:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801546c:	81a3      	strh	r3, [r4, #12]
 801546e:	2300      	movs	r3, #0
 8015470:	6063      	str	r3, [r4, #4]
 8015472:	6923      	ldr	r3, [r4, #16]
 8015474:	6023      	str	r3, [r4, #0]
 8015476:	89a3      	ldrh	r3, [r4, #12]
 8015478:	f043 0308 	orr.w	r3, r3, #8
 801547c:	81a3      	strh	r3, [r4, #12]
 801547e:	6923      	ldr	r3, [r4, #16]
 8015480:	b94b      	cbnz	r3, 8015496 <__swsetup_r+0x9a>
 8015482:	89a3      	ldrh	r3, [r4, #12]
 8015484:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8015488:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801548c:	d003      	beq.n	8015496 <__swsetup_r+0x9a>
 801548e:	4621      	mov	r1, r4
 8015490:	4630      	mov	r0, r6
 8015492:	f000 f931 	bl	80156f8 <__smakebuf_r>
 8015496:	89a0      	ldrh	r0, [r4, #12]
 8015498:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801549c:	f010 0301 	ands.w	r3, r0, #1
 80154a0:	d00a      	beq.n	80154b8 <__swsetup_r+0xbc>
 80154a2:	2300      	movs	r3, #0
 80154a4:	60a3      	str	r3, [r4, #8]
 80154a6:	6963      	ldr	r3, [r4, #20]
 80154a8:	425b      	negs	r3, r3
 80154aa:	61a3      	str	r3, [r4, #24]
 80154ac:	6923      	ldr	r3, [r4, #16]
 80154ae:	b943      	cbnz	r3, 80154c2 <__swsetup_r+0xc6>
 80154b0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80154b4:	d1ba      	bne.n	801542c <__swsetup_r+0x30>
 80154b6:	bd70      	pop	{r4, r5, r6, pc}
 80154b8:	0781      	lsls	r1, r0, #30
 80154ba:	bf58      	it	pl
 80154bc:	6963      	ldrpl	r3, [r4, #20]
 80154be:	60a3      	str	r3, [r4, #8]
 80154c0:	e7f4      	b.n	80154ac <__swsetup_r+0xb0>
 80154c2:	2000      	movs	r0, #0
 80154c4:	e7f7      	b.n	80154b6 <__swsetup_r+0xba>
 80154c6:	bf00      	nop
 80154c8:	20000014 	.word	0x20000014
 80154cc:	08018510 	.word	0x08018510
 80154d0:	08018530 	.word	0x08018530
 80154d4:	080184f0 	.word	0x080184f0

080154d8 <abort>:
 80154d8:	b508      	push	{r3, lr}
 80154da:	2006      	movs	r0, #6
 80154dc:	f000 f9b8 	bl	8015850 <raise>
 80154e0:	2001      	movs	r0, #1
 80154e2:	f7ec f83d 	bl	8001560 <_exit>
	...

080154e8 <_close_r>:
 80154e8:	b538      	push	{r3, r4, r5, lr}
 80154ea:	4d06      	ldr	r5, [pc, #24]	; (8015504 <_close_r+0x1c>)
 80154ec:	2300      	movs	r3, #0
 80154ee:	4604      	mov	r4, r0
 80154f0:	4608      	mov	r0, r1
 80154f2:	602b      	str	r3, [r5, #0]
 80154f4:	f7ec f85b 	bl	80015ae <_close>
 80154f8:	1c43      	adds	r3, r0, #1
 80154fa:	d102      	bne.n	8015502 <_close_r+0x1a>
 80154fc:	682b      	ldr	r3, [r5, #0]
 80154fe:	b103      	cbz	r3, 8015502 <_close_r+0x1a>
 8015500:	6023      	str	r3, [r4, #0]
 8015502:	bd38      	pop	{r3, r4, r5, pc}
 8015504:	200072bc 	.word	0x200072bc

08015508 <__sflush_r>:
 8015508:	898a      	ldrh	r2, [r1, #12]
 801550a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801550e:	4605      	mov	r5, r0
 8015510:	0710      	lsls	r0, r2, #28
 8015512:	460c      	mov	r4, r1
 8015514:	d458      	bmi.n	80155c8 <__sflush_r+0xc0>
 8015516:	684b      	ldr	r3, [r1, #4]
 8015518:	2b00      	cmp	r3, #0
 801551a:	dc05      	bgt.n	8015528 <__sflush_r+0x20>
 801551c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801551e:	2b00      	cmp	r3, #0
 8015520:	dc02      	bgt.n	8015528 <__sflush_r+0x20>
 8015522:	2000      	movs	r0, #0
 8015524:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015528:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801552a:	2e00      	cmp	r6, #0
 801552c:	d0f9      	beq.n	8015522 <__sflush_r+0x1a>
 801552e:	2300      	movs	r3, #0
 8015530:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8015534:	682f      	ldr	r7, [r5, #0]
 8015536:	602b      	str	r3, [r5, #0]
 8015538:	d032      	beq.n	80155a0 <__sflush_r+0x98>
 801553a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801553c:	89a3      	ldrh	r3, [r4, #12]
 801553e:	075a      	lsls	r2, r3, #29
 8015540:	d505      	bpl.n	801554e <__sflush_r+0x46>
 8015542:	6863      	ldr	r3, [r4, #4]
 8015544:	1ac0      	subs	r0, r0, r3
 8015546:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8015548:	b10b      	cbz	r3, 801554e <__sflush_r+0x46>
 801554a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801554c:	1ac0      	subs	r0, r0, r3
 801554e:	2300      	movs	r3, #0
 8015550:	4602      	mov	r2, r0
 8015552:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015554:	6a21      	ldr	r1, [r4, #32]
 8015556:	4628      	mov	r0, r5
 8015558:	47b0      	blx	r6
 801555a:	1c43      	adds	r3, r0, #1
 801555c:	89a3      	ldrh	r3, [r4, #12]
 801555e:	d106      	bne.n	801556e <__sflush_r+0x66>
 8015560:	6829      	ldr	r1, [r5, #0]
 8015562:	291d      	cmp	r1, #29
 8015564:	d82c      	bhi.n	80155c0 <__sflush_r+0xb8>
 8015566:	4a2a      	ldr	r2, [pc, #168]	; (8015610 <__sflush_r+0x108>)
 8015568:	40ca      	lsrs	r2, r1
 801556a:	07d6      	lsls	r6, r2, #31
 801556c:	d528      	bpl.n	80155c0 <__sflush_r+0xb8>
 801556e:	2200      	movs	r2, #0
 8015570:	6062      	str	r2, [r4, #4]
 8015572:	04d9      	lsls	r1, r3, #19
 8015574:	6922      	ldr	r2, [r4, #16]
 8015576:	6022      	str	r2, [r4, #0]
 8015578:	d504      	bpl.n	8015584 <__sflush_r+0x7c>
 801557a:	1c42      	adds	r2, r0, #1
 801557c:	d101      	bne.n	8015582 <__sflush_r+0x7a>
 801557e:	682b      	ldr	r3, [r5, #0]
 8015580:	b903      	cbnz	r3, 8015584 <__sflush_r+0x7c>
 8015582:	6560      	str	r0, [r4, #84]	; 0x54
 8015584:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015586:	602f      	str	r7, [r5, #0]
 8015588:	2900      	cmp	r1, #0
 801558a:	d0ca      	beq.n	8015522 <__sflush_r+0x1a>
 801558c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015590:	4299      	cmp	r1, r3
 8015592:	d002      	beq.n	801559a <__sflush_r+0x92>
 8015594:	4628      	mov	r0, r5
 8015596:	f7ff f985 	bl	80148a4 <_free_r>
 801559a:	2000      	movs	r0, #0
 801559c:	6360      	str	r0, [r4, #52]	; 0x34
 801559e:	e7c1      	b.n	8015524 <__sflush_r+0x1c>
 80155a0:	6a21      	ldr	r1, [r4, #32]
 80155a2:	2301      	movs	r3, #1
 80155a4:	4628      	mov	r0, r5
 80155a6:	47b0      	blx	r6
 80155a8:	1c41      	adds	r1, r0, #1
 80155aa:	d1c7      	bne.n	801553c <__sflush_r+0x34>
 80155ac:	682b      	ldr	r3, [r5, #0]
 80155ae:	2b00      	cmp	r3, #0
 80155b0:	d0c4      	beq.n	801553c <__sflush_r+0x34>
 80155b2:	2b1d      	cmp	r3, #29
 80155b4:	d001      	beq.n	80155ba <__sflush_r+0xb2>
 80155b6:	2b16      	cmp	r3, #22
 80155b8:	d101      	bne.n	80155be <__sflush_r+0xb6>
 80155ba:	602f      	str	r7, [r5, #0]
 80155bc:	e7b1      	b.n	8015522 <__sflush_r+0x1a>
 80155be:	89a3      	ldrh	r3, [r4, #12]
 80155c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80155c4:	81a3      	strh	r3, [r4, #12]
 80155c6:	e7ad      	b.n	8015524 <__sflush_r+0x1c>
 80155c8:	690f      	ldr	r7, [r1, #16]
 80155ca:	2f00      	cmp	r7, #0
 80155cc:	d0a9      	beq.n	8015522 <__sflush_r+0x1a>
 80155ce:	0793      	lsls	r3, r2, #30
 80155d0:	680e      	ldr	r6, [r1, #0]
 80155d2:	bf08      	it	eq
 80155d4:	694b      	ldreq	r3, [r1, #20]
 80155d6:	600f      	str	r7, [r1, #0]
 80155d8:	bf18      	it	ne
 80155da:	2300      	movne	r3, #0
 80155dc:	eba6 0807 	sub.w	r8, r6, r7
 80155e0:	608b      	str	r3, [r1, #8]
 80155e2:	f1b8 0f00 	cmp.w	r8, #0
 80155e6:	dd9c      	ble.n	8015522 <__sflush_r+0x1a>
 80155e8:	6a21      	ldr	r1, [r4, #32]
 80155ea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80155ec:	4643      	mov	r3, r8
 80155ee:	463a      	mov	r2, r7
 80155f0:	4628      	mov	r0, r5
 80155f2:	47b0      	blx	r6
 80155f4:	2800      	cmp	r0, #0
 80155f6:	dc06      	bgt.n	8015606 <__sflush_r+0xfe>
 80155f8:	89a3      	ldrh	r3, [r4, #12]
 80155fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80155fe:	81a3      	strh	r3, [r4, #12]
 8015600:	f04f 30ff 	mov.w	r0, #4294967295
 8015604:	e78e      	b.n	8015524 <__sflush_r+0x1c>
 8015606:	4407      	add	r7, r0
 8015608:	eba8 0800 	sub.w	r8, r8, r0
 801560c:	e7e9      	b.n	80155e2 <__sflush_r+0xda>
 801560e:	bf00      	nop
 8015610:	20400001 	.word	0x20400001

08015614 <_fflush_r>:
 8015614:	b538      	push	{r3, r4, r5, lr}
 8015616:	690b      	ldr	r3, [r1, #16]
 8015618:	4605      	mov	r5, r0
 801561a:	460c      	mov	r4, r1
 801561c:	b913      	cbnz	r3, 8015624 <_fflush_r+0x10>
 801561e:	2500      	movs	r5, #0
 8015620:	4628      	mov	r0, r5
 8015622:	bd38      	pop	{r3, r4, r5, pc}
 8015624:	b118      	cbz	r0, 801562e <_fflush_r+0x1a>
 8015626:	6983      	ldr	r3, [r0, #24]
 8015628:	b90b      	cbnz	r3, 801562e <_fflush_r+0x1a>
 801562a:	f7ff f881 	bl	8014730 <__sinit>
 801562e:	4b14      	ldr	r3, [pc, #80]	; (8015680 <_fflush_r+0x6c>)
 8015630:	429c      	cmp	r4, r3
 8015632:	d11b      	bne.n	801566c <_fflush_r+0x58>
 8015634:	686c      	ldr	r4, [r5, #4]
 8015636:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801563a:	2b00      	cmp	r3, #0
 801563c:	d0ef      	beq.n	801561e <_fflush_r+0xa>
 801563e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8015640:	07d0      	lsls	r0, r2, #31
 8015642:	d404      	bmi.n	801564e <_fflush_r+0x3a>
 8015644:	0599      	lsls	r1, r3, #22
 8015646:	d402      	bmi.n	801564e <_fflush_r+0x3a>
 8015648:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801564a:	f7ff f921 	bl	8014890 <__retarget_lock_acquire_recursive>
 801564e:	4628      	mov	r0, r5
 8015650:	4621      	mov	r1, r4
 8015652:	f7ff ff59 	bl	8015508 <__sflush_r>
 8015656:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015658:	07da      	lsls	r2, r3, #31
 801565a:	4605      	mov	r5, r0
 801565c:	d4e0      	bmi.n	8015620 <_fflush_r+0xc>
 801565e:	89a3      	ldrh	r3, [r4, #12]
 8015660:	059b      	lsls	r3, r3, #22
 8015662:	d4dd      	bmi.n	8015620 <_fflush_r+0xc>
 8015664:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015666:	f7ff f914 	bl	8014892 <__retarget_lock_release_recursive>
 801566a:	e7d9      	b.n	8015620 <_fflush_r+0xc>
 801566c:	4b05      	ldr	r3, [pc, #20]	; (8015684 <_fflush_r+0x70>)
 801566e:	429c      	cmp	r4, r3
 8015670:	d101      	bne.n	8015676 <_fflush_r+0x62>
 8015672:	68ac      	ldr	r4, [r5, #8]
 8015674:	e7df      	b.n	8015636 <_fflush_r+0x22>
 8015676:	4b04      	ldr	r3, [pc, #16]	; (8015688 <_fflush_r+0x74>)
 8015678:	429c      	cmp	r4, r3
 801567a:	bf08      	it	eq
 801567c:	68ec      	ldreq	r4, [r5, #12]
 801567e:	e7da      	b.n	8015636 <_fflush_r+0x22>
 8015680:	08018510 	.word	0x08018510
 8015684:	08018530 	.word	0x08018530
 8015688:	080184f0 	.word	0x080184f0

0801568c <_lseek_r>:
 801568c:	b538      	push	{r3, r4, r5, lr}
 801568e:	4d07      	ldr	r5, [pc, #28]	; (80156ac <_lseek_r+0x20>)
 8015690:	4604      	mov	r4, r0
 8015692:	4608      	mov	r0, r1
 8015694:	4611      	mov	r1, r2
 8015696:	2200      	movs	r2, #0
 8015698:	602a      	str	r2, [r5, #0]
 801569a:	461a      	mov	r2, r3
 801569c:	f7eb ffae 	bl	80015fc <_lseek>
 80156a0:	1c43      	adds	r3, r0, #1
 80156a2:	d102      	bne.n	80156aa <_lseek_r+0x1e>
 80156a4:	682b      	ldr	r3, [r5, #0]
 80156a6:	b103      	cbz	r3, 80156aa <_lseek_r+0x1e>
 80156a8:	6023      	str	r3, [r4, #0]
 80156aa:	bd38      	pop	{r3, r4, r5, pc}
 80156ac:	200072bc 	.word	0x200072bc

080156b0 <__swhatbuf_r>:
 80156b0:	b570      	push	{r4, r5, r6, lr}
 80156b2:	460e      	mov	r6, r1
 80156b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80156b8:	2900      	cmp	r1, #0
 80156ba:	b096      	sub	sp, #88	; 0x58
 80156bc:	4614      	mov	r4, r2
 80156be:	461d      	mov	r5, r3
 80156c0:	da07      	bge.n	80156d2 <__swhatbuf_r+0x22>
 80156c2:	2300      	movs	r3, #0
 80156c4:	602b      	str	r3, [r5, #0]
 80156c6:	89b3      	ldrh	r3, [r6, #12]
 80156c8:	061a      	lsls	r2, r3, #24
 80156ca:	d410      	bmi.n	80156ee <__swhatbuf_r+0x3e>
 80156cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80156d0:	e00e      	b.n	80156f0 <__swhatbuf_r+0x40>
 80156d2:	466a      	mov	r2, sp
 80156d4:	f000 f8d8 	bl	8015888 <_fstat_r>
 80156d8:	2800      	cmp	r0, #0
 80156da:	dbf2      	blt.n	80156c2 <__swhatbuf_r+0x12>
 80156dc:	9a01      	ldr	r2, [sp, #4]
 80156de:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80156e2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80156e6:	425a      	negs	r2, r3
 80156e8:	415a      	adcs	r2, r3
 80156ea:	602a      	str	r2, [r5, #0]
 80156ec:	e7ee      	b.n	80156cc <__swhatbuf_r+0x1c>
 80156ee:	2340      	movs	r3, #64	; 0x40
 80156f0:	2000      	movs	r0, #0
 80156f2:	6023      	str	r3, [r4, #0]
 80156f4:	b016      	add	sp, #88	; 0x58
 80156f6:	bd70      	pop	{r4, r5, r6, pc}

080156f8 <__smakebuf_r>:
 80156f8:	898b      	ldrh	r3, [r1, #12]
 80156fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80156fc:	079d      	lsls	r5, r3, #30
 80156fe:	4606      	mov	r6, r0
 8015700:	460c      	mov	r4, r1
 8015702:	d507      	bpl.n	8015714 <__smakebuf_r+0x1c>
 8015704:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8015708:	6023      	str	r3, [r4, #0]
 801570a:	6123      	str	r3, [r4, #16]
 801570c:	2301      	movs	r3, #1
 801570e:	6163      	str	r3, [r4, #20]
 8015710:	b002      	add	sp, #8
 8015712:	bd70      	pop	{r4, r5, r6, pc}
 8015714:	ab01      	add	r3, sp, #4
 8015716:	466a      	mov	r2, sp
 8015718:	f7ff ffca 	bl	80156b0 <__swhatbuf_r>
 801571c:	9900      	ldr	r1, [sp, #0]
 801571e:	4605      	mov	r5, r0
 8015720:	4630      	mov	r0, r6
 8015722:	f7ff f90f 	bl	8014944 <_malloc_r>
 8015726:	b948      	cbnz	r0, 801573c <__smakebuf_r+0x44>
 8015728:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801572c:	059a      	lsls	r2, r3, #22
 801572e:	d4ef      	bmi.n	8015710 <__smakebuf_r+0x18>
 8015730:	f023 0303 	bic.w	r3, r3, #3
 8015734:	f043 0302 	orr.w	r3, r3, #2
 8015738:	81a3      	strh	r3, [r4, #12]
 801573a:	e7e3      	b.n	8015704 <__smakebuf_r+0xc>
 801573c:	4b0d      	ldr	r3, [pc, #52]	; (8015774 <__smakebuf_r+0x7c>)
 801573e:	62b3      	str	r3, [r6, #40]	; 0x28
 8015740:	89a3      	ldrh	r3, [r4, #12]
 8015742:	6020      	str	r0, [r4, #0]
 8015744:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015748:	81a3      	strh	r3, [r4, #12]
 801574a:	9b00      	ldr	r3, [sp, #0]
 801574c:	6163      	str	r3, [r4, #20]
 801574e:	9b01      	ldr	r3, [sp, #4]
 8015750:	6120      	str	r0, [r4, #16]
 8015752:	b15b      	cbz	r3, 801576c <__smakebuf_r+0x74>
 8015754:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015758:	4630      	mov	r0, r6
 801575a:	f000 f8a7 	bl	80158ac <_isatty_r>
 801575e:	b128      	cbz	r0, 801576c <__smakebuf_r+0x74>
 8015760:	89a3      	ldrh	r3, [r4, #12]
 8015762:	f023 0303 	bic.w	r3, r3, #3
 8015766:	f043 0301 	orr.w	r3, r3, #1
 801576a:	81a3      	strh	r3, [r4, #12]
 801576c:	89a0      	ldrh	r0, [r4, #12]
 801576e:	4305      	orrs	r5, r0
 8015770:	81a5      	strh	r5, [r4, #12]
 8015772:	e7cd      	b.n	8015710 <__smakebuf_r+0x18>
 8015774:	080146c9 	.word	0x080146c9

08015778 <__malloc_lock>:
 8015778:	4801      	ldr	r0, [pc, #4]	; (8015780 <__malloc_lock+0x8>)
 801577a:	f7ff b889 	b.w	8014890 <__retarget_lock_acquire_recursive>
 801577e:	bf00      	nop
 8015780:	200072c4 	.word	0x200072c4

08015784 <__malloc_unlock>:
 8015784:	4801      	ldr	r0, [pc, #4]	; (801578c <__malloc_unlock+0x8>)
 8015786:	f7ff b884 	b.w	8014892 <__retarget_lock_release_recursive>
 801578a:	bf00      	nop
 801578c:	200072c4 	.word	0x200072c4

08015790 <_realloc_r>:
 8015790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015792:	4607      	mov	r7, r0
 8015794:	4614      	mov	r4, r2
 8015796:	460e      	mov	r6, r1
 8015798:	b921      	cbnz	r1, 80157a4 <_realloc_r+0x14>
 801579a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801579e:	4611      	mov	r1, r2
 80157a0:	f7ff b8d0 	b.w	8014944 <_malloc_r>
 80157a4:	b922      	cbnz	r2, 80157b0 <_realloc_r+0x20>
 80157a6:	f7ff f87d 	bl	80148a4 <_free_r>
 80157aa:	4625      	mov	r5, r4
 80157ac:	4628      	mov	r0, r5
 80157ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80157b0:	f000 f88c 	bl	80158cc <_malloc_usable_size_r>
 80157b4:	42a0      	cmp	r0, r4
 80157b6:	d20f      	bcs.n	80157d8 <_realloc_r+0x48>
 80157b8:	4621      	mov	r1, r4
 80157ba:	4638      	mov	r0, r7
 80157bc:	f7ff f8c2 	bl	8014944 <_malloc_r>
 80157c0:	4605      	mov	r5, r0
 80157c2:	2800      	cmp	r0, #0
 80157c4:	d0f2      	beq.n	80157ac <_realloc_r+0x1c>
 80157c6:	4631      	mov	r1, r6
 80157c8:	4622      	mov	r2, r4
 80157ca:	f7fe fe93 	bl	80144f4 <memcpy>
 80157ce:	4631      	mov	r1, r6
 80157d0:	4638      	mov	r0, r7
 80157d2:	f7ff f867 	bl	80148a4 <_free_r>
 80157d6:	e7e9      	b.n	80157ac <_realloc_r+0x1c>
 80157d8:	4635      	mov	r5, r6
 80157da:	e7e7      	b.n	80157ac <_realloc_r+0x1c>

080157dc <_read_r>:
 80157dc:	b538      	push	{r3, r4, r5, lr}
 80157de:	4d07      	ldr	r5, [pc, #28]	; (80157fc <_read_r+0x20>)
 80157e0:	4604      	mov	r4, r0
 80157e2:	4608      	mov	r0, r1
 80157e4:	4611      	mov	r1, r2
 80157e6:	2200      	movs	r2, #0
 80157e8:	602a      	str	r2, [r5, #0]
 80157ea:	461a      	mov	r2, r3
 80157ec:	f7eb fec2 	bl	8001574 <_read>
 80157f0:	1c43      	adds	r3, r0, #1
 80157f2:	d102      	bne.n	80157fa <_read_r+0x1e>
 80157f4:	682b      	ldr	r3, [r5, #0]
 80157f6:	b103      	cbz	r3, 80157fa <_read_r+0x1e>
 80157f8:	6023      	str	r3, [r4, #0]
 80157fa:	bd38      	pop	{r3, r4, r5, pc}
 80157fc:	200072bc 	.word	0x200072bc

08015800 <_raise_r>:
 8015800:	291f      	cmp	r1, #31
 8015802:	b538      	push	{r3, r4, r5, lr}
 8015804:	4604      	mov	r4, r0
 8015806:	460d      	mov	r5, r1
 8015808:	d904      	bls.n	8015814 <_raise_r+0x14>
 801580a:	2316      	movs	r3, #22
 801580c:	6003      	str	r3, [r0, #0]
 801580e:	f04f 30ff 	mov.w	r0, #4294967295
 8015812:	bd38      	pop	{r3, r4, r5, pc}
 8015814:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8015816:	b112      	cbz	r2, 801581e <_raise_r+0x1e>
 8015818:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801581c:	b94b      	cbnz	r3, 8015832 <_raise_r+0x32>
 801581e:	4620      	mov	r0, r4
 8015820:	f000 f830 	bl	8015884 <_getpid_r>
 8015824:	462a      	mov	r2, r5
 8015826:	4601      	mov	r1, r0
 8015828:	4620      	mov	r0, r4
 801582a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801582e:	f000 b817 	b.w	8015860 <_kill_r>
 8015832:	2b01      	cmp	r3, #1
 8015834:	d00a      	beq.n	801584c <_raise_r+0x4c>
 8015836:	1c59      	adds	r1, r3, #1
 8015838:	d103      	bne.n	8015842 <_raise_r+0x42>
 801583a:	2316      	movs	r3, #22
 801583c:	6003      	str	r3, [r0, #0]
 801583e:	2001      	movs	r0, #1
 8015840:	e7e7      	b.n	8015812 <_raise_r+0x12>
 8015842:	2400      	movs	r4, #0
 8015844:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8015848:	4628      	mov	r0, r5
 801584a:	4798      	blx	r3
 801584c:	2000      	movs	r0, #0
 801584e:	e7e0      	b.n	8015812 <_raise_r+0x12>

08015850 <raise>:
 8015850:	4b02      	ldr	r3, [pc, #8]	; (801585c <raise+0xc>)
 8015852:	4601      	mov	r1, r0
 8015854:	6818      	ldr	r0, [r3, #0]
 8015856:	f7ff bfd3 	b.w	8015800 <_raise_r>
 801585a:	bf00      	nop
 801585c:	20000014 	.word	0x20000014

08015860 <_kill_r>:
 8015860:	b538      	push	{r3, r4, r5, lr}
 8015862:	4d07      	ldr	r5, [pc, #28]	; (8015880 <_kill_r+0x20>)
 8015864:	2300      	movs	r3, #0
 8015866:	4604      	mov	r4, r0
 8015868:	4608      	mov	r0, r1
 801586a:	4611      	mov	r1, r2
 801586c:	602b      	str	r3, [r5, #0]
 801586e:	f7eb fe65 	bl	800153c <_kill>
 8015872:	1c43      	adds	r3, r0, #1
 8015874:	d102      	bne.n	801587c <_kill_r+0x1c>
 8015876:	682b      	ldr	r3, [r5, #0]
 8015878:	b103      	cbz	r3, 801587c <_kill_r+0x1c>
 801587a:	6023      	str	r3, [r4, #0]
 801587c:	bd38      	pop	{r3, r4, r5, pc}
 801587e:	bf00      	nop
 8015880:	200072bc 	.word	0x200072bc

08015884 <_getpid_r>:
 8015884:	f7eb be52 	b.w	800152c <_getpid>

08015888 <_fstat_r>:
 8015888:	b538      	push	{r3, r4, r5, lr}
 801588a:	4d07      	ldr	r5, [pc, #28]	; (80158a8 <_fstat_r+0x20>)
 801588c:	2300      	movs	r3, #0
 801588e:	4604      	mov	r4, r0
 8015890:	4608      	mov	r0, r1
 8015892:	4611      	mov	r1, r2
 8015894:	602b      	str	r3, [r5, #0]
 8015896:	f7eb fe96 	bl	80015c6 <_fstat>
 801589a:	1c43      	adds	r3, r0, #1
 801589c:	d102      	bne.n	80158a4 <_fstat_r+0x1c>
 801589e:	682b      	ldr	r3, [r5, #0]
 80158a0:	b103      	cbz	r3, 80158a4 <_fstat_r+0x1c>
 80158a2:	6023      	str	r3, [r4, #0]
 80158a4:	bd38      	pop	{r3, r4, r5, pc}
 80158a6:	bf00      	nop
 80158a8:	200072bc 	.word	0x200072bc

080158ac <_isatty_r>:
 80158ac:	b538      	push	{r3, r4, r5, lr}
 80158ae:	4d06      	ldr	r5, [pc, #24]	; (80158c8 <_isatty_r+0x1c>)
 80158b0:	2300      	movs	r3, #0
 80158b2:	4604      	mov	r4, r0
 80158b4:	4608      	mov	r0, r1
 80158b6:	602b      	str	r3, [r5, #0]
 80158b8:	f7eb fe95 	bl	80015e6 <_isatty>
 80158bc:	1c43      	adds	r3, r0, #1
 80158be:	d102      	bne.n	80158c6 <_isatty_r+0x1a>
 80158c0:	682b      	ldr	r3, [r5, #0]
 80158c2:	b103      	cbz	r3, 80158c6 <_isatty_r+0x1a>
 80158c4:	6023      	str	r3, [r4, #0]
 80158c6:	bd38      	pop	{r3, r4, r5, pc}
 80158c8:	200072bc 	.word	0x200072bc

080158cc <_malloc_usable_size_r>:
 80158cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80158d0:	1f18      	subs	r0, r3, #4
 80158d2:	2b00      	cmp	r3, #0
 80158d4:	bfbc      	itt	lt
 80158d6:	580b      	ldrlt	r3, [r1, r0]
 80158d8:	18c0      	addlt	r0, r0, r3
 80158da:	4770      	bx	lr

080158dc <_init>:
 80158dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80158de:	bf00      	nop
 80158e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80158e2:	bc08      	pop	{r3}
 80158e4:	469e      	mov	lr, r3
 80158e6:	4770      	bx	lr

080158e8 <_fini>:
 80158e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80158ea:	bf00      	nop
 80158ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80158ee:	bc08      	pop	{r3}
 80158f0:	469e      	mov	lr, r3
 80158f2:	4770      	bx	lr
>>>>>>> Stashed changes
