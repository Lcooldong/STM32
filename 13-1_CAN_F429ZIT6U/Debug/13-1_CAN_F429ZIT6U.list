
13-1_CAN_F429ZIT6U.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015734  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002c7c  080158e4  080158e4  000258e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08018560  08018560  00030078  2**0
                  CONTENTS
  4 .ARM          00000008  08018560  08018560  00028560  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08018568  08018568  00030078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08018568  08018568  00028568  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801856c  0801856c  0002856c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08018570  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030078  2**0
                  CONTENTS
 10 .bss          00007254  20000078  20000078  00030078  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200072cc  200072cc  00030078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030078  2**0
                  CONTENTS, READONLY
 13 .debug_info   00047931  00000000  00000000  000300a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00008aaa  00000000  00000000  000779d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002620  00000000  00000000  00080488  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002438  00000000  00000000  00082aa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003717a  00000000  00000000  00084ee0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003f1e7  00000000  00000000  000bc05a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010e075  00000000  00000000  000fb241  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  002092b6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000a6c8  00000000  00000000  0020930c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000078 	.word	0x20000078
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080158cc 	.word	0x080158cc

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000007c 	.word	0x2000007c
 80001ec:	080158cc 	.word	0x080158cc

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96e 	b.w	8000584 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468c      	mov	ip, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	f040 8083 	bne.w	80003d6 <__udivmoddi4+0x116>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d947      	bls.n	8000366 <__udivmoddi4+0xa6>
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	b142      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002dc:	f1c2 0020 	rsb	r0, r2, #32
 80002e0:	fa24 f000 	lsr.w	r0, r4, r0
 80002e4:	4091      	lsls	r1, r2
 80002e6:	4097      	lsls	r7, r2
 80002e8:	ea40 0c01 	orr.w	ip, r0, r1
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbbc f6f8 	udiv	r6, ip, r8
 80002f8:	fa1f fe87 	uxth.w	lr, r7
 80002fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb06 f10e 	mul.w	r1, r6, lr
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18fb      	adds	r3, r7, r3
 800030e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000312:	f080 8119 	bcs.w	8000548 <__udivmoddi4+0x288>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8116 	bls.w	8000548 <__udivmoddi4+0x288>
 800031c:	3e02      	subs	r6, #2
 800031e:	443b      	add	r3, r7
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0f8 	udiv	r0, r3, r8
 8000328:	fb08 3310 	mls	r3, r8, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fe0e 	mul.w	lr, r0, lr
 8000334:	45a6      	cmp	lr, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	193c      	adds	r4, r7, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8105 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f240 8102 	bls.w	800054c <__udivmoddi4+0x28c>
 8000348:	3802      	subs	r0, #2
 800034a:	443c      	add	r4, r7
 800034c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000350:	eba4 040e 	sub.w	r4, r4, lr
 8000354:	2600      	movs	r6, #0
 8000356:	b11d      	cbz	r5, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c5 4300 	strd	r4, r3, [r5]
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	b902      	cbnz	r2, 800036a <__udivmoddi4+0xaa>
 8000368:	deff      	udf	#255	; 0xff
 800036a:	fab2 f282 	clz	r2, r2
 800036e:	2a00      	cmp	r2, #0
 8000370:	d150      	bne.n	8000414 <__udivmoddi4+0x154>
 8000372:	1bcb      	subs	r3, r1, r7
 8000374:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	2601      	movs	r6, #1
 800037e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000382:	0c21      	lsrs	r1, r4, #16
 8000384:	fb0e 331c 	mls	r3, lr, ip, r3
 8000388:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800038c:	fb08 f30c 	mul.w	r3, r8, ip
 8000390:	428b      	cmp	r3, r1
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0xe4>
 8000394:	1879      	adds	r1, r7, r1
 8000396:	f10c 30ff 	add.w	r0, ip, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0xe2>
 800039c:	428b      	cmp	r3, r1
 800039e:	f200 80e9 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003a2:	4684      	mov	ip, r0
 80003a4:	1ac9      	subs	r1, r1, r3
 80003a6:	b2a3      	uxth	r3, r4
 80003a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80003b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003b4:	fb08 f800 	mul.w	r8, r8, r0
 80003b8:	45a0      	cmp	r8, r4
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x10c>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x10a>
 80003c4:	45a0      	cmp	r8, r4
 80003c6:	f200 80d9 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003ca:	4618      	mov	r0, r3
 80003cc:	eba4 0408 	sub.w	r4, r4, r8
 80003d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003d4:	e7bf      	b.n	8000356 <__udivmoddi4+0x96>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0x12e>
 80003da:	2d00      	cmp	r5, #0
 80003dc:	f000 80b1 	beq.w	8000542 <__udivmoddi4+0x282>
 80003e0:	2600      	movs	r6, #0
 80003e2:	e9c5 0100 	strd	r0, r1, [r5]
 80003e6:	4630      	mov	r0, r6
 80003e8:	4631      	mov	r1, r6
 80003ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ee:	fab3 f683 	clz	r6, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d14a      	bne.n	800048c <__udivmoddi4+0x1cc>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d302      	bcc.n	8000400 <__udivmoddi4+0x140>
 80003fa:	4282      	cmp	r2, r0
 80003fc:	f200 80b8 	bhi.w	8000570 <__udivmoddi4+0x2b0>
 8000400:	1a84      	subs	r4, r0, r2
 8000402:	eb61 0103 	sbc.w	r1, r1, r3
 8000406:	2001      	movs	r0, #1
 8000408:	468c      	mov	ip, r1
 800040a:	2d00      	cmp	r5, #0
 800040c:	d0a8      	beq.n	8000360 <__udivmoddi4+0xa0>
 800040e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000412:	e7a5      	b.n	8000360 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f603 	lsr.w	r6, r0, r3
 800041c:	4097      	lsls	r7, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000426:	40d9      	lsrs	r1, r3
 8000428:	4330      	orrs	r0, r6
 800042a:	0c03      	lsrs	r3, r0, #16
 800042c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000430:	fa1f f887 	uxth.w	r8, r7
 8000434:	fb0e 1116 	mls	r1, lr, r6, r1
 8000438:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043c:	fb06 f108 	mul.w	r1, r6, r8
 8000440:	4299      	cmp	r1, r3
 8000442:	fa04 f402 	lsl.w	r4, r4, r2
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x19c>
 8000448:	18fb      	adds	r3, r7, r3
 800044a:	f106 3cff 	add.w	ip, r6, #4294967295
 800044e:	f080 808d 	bcs.w	800056c <__udivmoddi4+0x2ac>
 8000452:	4299      	cmp	r1, r3
 8000454:	f240 808a 	bls.w	800056c <__udivmoddi4+0x2ac>
 8000458:	3e02      	subs	r6, #2
 800045a:	443b      	add	r3, r7
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b281      	uxth	r1, r0
 8000460:	fbb3 f0fe 	udiv	r0, r3, lr
 8000464:	fb0e 3310 	mls	r3, lr, r0, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb00 f308 	mul.w	r3, r0, r8
 8000470:	428b      	cmp	r3, r1
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x1c4>
 8000474:	1879      	adds	r1, r7, r1
 8000476:	f100 3cff 	add.w	ip, r0, #4294967295
 800047a:	d273      	bcs.n	8000564 <__udivmoddi4+0x2a4>
 800047c:	428b      	cmp	r3, r1
 800047e:	d971      	bls.n	8000564 <__udivmoddi4+0x2a4>
 8000480:	3802      	subs	r0, #2
 8000482:	4439      	add	r1, r7
 8000484:	1acb      	subs	r3, r1, r3
 8000486:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800048a:	e778      	b.n	800037e <__udivmoddi4+0xbe>
 800048c:	f1c6 0c20 	rsb	ip, r6, #32
 8000490:	fa03 f406 	lsl.w	r4, r3, r6
 8000494:	fa22 f30c 	lsr.w	r3, r2, ip
 8000498:	431c      	orrs	r4, r3
 800049a:	fa20 f70c 	lsr.w	r7, r0, ip
 800049e:	fa01 f306 	lsl.w	r3, r1, r6
 80004a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004aa:	431f      	orrs	r7, r3
 80004ac:	0c3b      	lsrs	r3, r7, #16
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fa1f f884 	uxth.w	r8, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004be:	fb09 fa08 	mul.w	sl, r9, r8
 80004c2:	458a      	cmp	sl, r1
 80004c4:	fa02 f206 	lsl.w	r2, r2, r6
 80004c8:	fa00 f306 	lsl.w	r3, r0, r6
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x220>
 80004ce:	1861      	adds	r1, r4, r1
 80004d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d4:	d248      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 80004d6:	458a      	cmp	sl, r1
 80004d8:	d946      	bls.n	8000568 <__udivmoddi4+0x2a8>
 80004da:	f1a9 0902 	sub.w	r9, r9, #2
 80004de:	4421      	add	r1, r4
 80004e0:	eba1 010a 	sub.w	r1, r1, sl
 80004e4:	b2bf      	uxth	r7, r7
 80004e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004f2:	fb00 f808 	mul.w	r8, r0, r8
 80004f6:	45b8      	cmp	r8, r7
 80004f8:	d907      	bls.n	800050a <__udivmoddi4+0x24a>
 80004fa:	19e7      	adds	r7, r4, r7
 80004fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000500:	d22e      	bcs.n	8000560 <__udivmoddi4+0x2a0>
 8000502:	45b8      	cmp	r8, r7
 8000504:	d92c      	bls.n	8000560 <__udivmoddi4+0x2a0>
 8000506:	3802      	subs	r0, #2
 8000508:	4427      	add	r7, r4
 800050a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800050e:	eba7 0708 	sub.w	r7, r7, r8
 8000512:	fba0 8902 	umull	r8, r9, r0, r2
 8000516:	454f      	cmp	r7, r9
 8000518:	46c6      	mov	lr, r8
 800051a:	4649      	mov	r1, r9
 800051c:	d31a      	bcc.n	8000554 <__udivmoddi4+0x294>
 800051e:	d017      	beq.n	8000550 <__udivmoddi4+0x290>
 8000520:	b15d      	cbz	r5, 800053a <__udivmoddi4+0x27a>
 8000522:	ebb3 020e 	subs.w	r2, r3, lr
 8000526:	eb67 0701 	sbc.w	r7, r7, r1
 800052a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800052e:	40f2      	lsrs	r2, r6
 8000530:	ea4c 0202 	orr.w	r2, ip, r2
 8000534:	40f7      	lsrs	r7, r6
 8000536:	e9c5 2700 	strd	r2, r7, [r5]
 800053a:	2600      	movs	r6, #0
 800053c:	4631      	mov	r1, r6
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e70b      	b.n	8000360 <__udivmoddi4+0xa0>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e9      	b.n	8000320 <__udivmoddi4+0x60>
 800054c:	4618      	mov	r0, r3
 800054e:	e6fd      	b.n	800034c <__udivmoddi4+0x8c>
 8000550:	4543      	cmp	r3, r8
 8000552:	d2e5      	bcs.n	8000520 <__udivmoddi4+0x260>
 8000554:	ebb8 0e02 	subs.w	lr, r8, r2
 8000558:	eb69 0104 	sbc.w	r1, r9, r4
 800055c:	3801      	subs	r0, #1
 800055e:	e7df      	b.n	8000520 <__udivmoddi4+0x260>
 8000560:	4608      	mov	r0, r1
 8000562:	e7d2      	b.n	800050a <__udivmoddi4+0x24a>
 8000564:	4660      	mov	r0, ip
 8000566:	e78d      	b.n	8000484 <__udivmoddi4+0x1c4>
 8000568:	4681      	mov	r9, r0
 800056a:	e7b9      	b.n	80004e0 <__udivmoddi4+0x220>
 800056c:	4666      	mov	r6, ip
 800056e:	e775      	b.n	800045c <__udivmoddi4+0x19c>
 8000570:	4630      	mov	r0, r6
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14a>
 8000574:	f1ac 0c02 	sub.w	ip, ip, #2
 8000578:	4439      	add	r1, r7
 800057a:	e713      	b.n	80003a4 <__udivmoddi4+0xe4>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	e724      	b.n	80003cc <__udivmoddi4+0x10c>
 8000582:	bf00      	nop

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b084      	sub	sp, #16
 800058c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800058e:	463b      	mov	r3, r7
 8000590:	2200      	movs	r2, #0
 8000592:	601a      	str	r2, [r3, #0]
 8000594:	605a      	str	r2, [r3, #4]
 8000596:	609a      	str	r2, [r3, #8]
 8000598:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800059a:	4b36      	ldr	r3, [pc, #216]	; (8000674 <MX_ADC1_Init+0xec>)
 800059c:	4a36      	ldr	r2, [pc, #216]	; (8000678 <MX_ADC1_Init+0xf0>)
 800059e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005a0:	4b34      	ldr	r3, [pc, #208]	; (8000674 <MX_ADC1_Init+0xec>)
 80005a2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80005a6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005a8:	4b32      	ldr	r3, [pc, #200]	; (8000674 <MX_ADC1_Init+0xec>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80005ae:	4b31      	ldr	r3, [pc, #196]	; (8000674 <MX_ADC1_Init+0xec>)
 80005b0:	2201      	movs	r2, #1
 80005b2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80005b4:	4b2f      	ldr	r3, [pc, #188]	; (8000674 <MX_ADC1_Init+0xec>)
 80005b6:	2201      	movs	r2, #1
 80005b8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005ba:	4b2e      	ldr	r3, [pc, #184]	; (8000674 <MX_ADC1_Init+0xec>)
 80005bc:	2200      	movs	r2, #0
 80005be:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005c2:	4b2c      	ldr	r3, [pc, #176]	; (8000674 <MX_ADC1_Init+0xec>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005c8:	4b2a      	ldr	r3, [pc, #168]	; (8000674 <MX_ADC1_Init+0xec>)
 80005ca:	4a2c      	ldr	r2, [pc, #176]	; (800067c <MX_ADC1_Init+0xf4>)
 80005cc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005ce:	4b29      	ldr	r3, [pc, #164]	; (8000674 <MX_ADC1_Init+0xec>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 80005d4:	4b27      	ldr	r3, [pc, #156]	; (8000674 <MX_ADC1_Init+0xec>)
 80005d6:	2204      	movs	r2, #4
 80005d8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80005da:	4b26      	ldr	r3, [pc, #152]	; (8000674 <MX_ADC1_Init+0xec>)
 80005dc:	2201      	movs	r2, #1
 80005de:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005e2:	4b24      	ldr	r3, [pc, #144]	; (8000674 <MX_ADC1_Init+0xec>)
 80005e4:	2201      	movs	r2, #1
 80005e6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005e8:	4822      	ldr	r0, [pc, #136]	; (8000674 <MX_ADC1_Init+0xec>)
 80005ea:	f001 fd89 	bl	8002100 <HAL_ADC_Init>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d001      	beq.n	80005f8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80005f4:	f000 fd54 	bl	80010a0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80005f8:	230a      	movs	r3, #10
 80005fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80005fc:	2301      	movs	r3, #1
 80005fe:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 8000600:	2304      	movs	r3, #4
 8000602:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000604:	463b      	mov	r3, r7
 8000606:	4619      	mov	r1, r3
 8000608:	481a      	ldr	r0, [pc, #104]	; (8000674 <MX_ADC1_Init+0xec>)
 800060a:	f001 fdbd 	bl	8002188 <HAL_ADC_ConfigChannel>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d001      	beq.n	8000618 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000614:	f000 fd44 	bl	80010a0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000618:	230c      	movs	r3, #12
 800061a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800061c:	2302      	movs	r3, #2
 800061e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000620:	463b      	mov	r3, r7
 8000622:	4619      	mov	r1, r3
 8000624:	4813      	ldr	r0, [pc, #76]	; (8000674 <MX_ADC1_Init+0xec>)
 8000626:	f001 fdaf 	bl	8002188 <HAL_ADC_ConfigChannel>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000630:	f000 fd36 	bl	80010a0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000634:	230d      	movs	r3, #13
 8000636:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000638:	2303      	movs	r3, #3
 800063a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800063c:	463b      	mov	r3, r7
 800063e:	4619      	mov	r1, r3
 8000640:	480c      	ldr	r0, [pc, #48]	; (8000674 <MX_ADC1_Init+0xec>)
 8000642:	f001 fda1 	bl	8002188 <HAL_ADC_ConfigChannel>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 800064c:	f000 fd28 	bl	80010a0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000650:	2309      	movs	r3, #9
 8000652:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000654:	2304      	movs	r3, #4
 8000656:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000658:	463b      	mov	r3, r7
 800065a:	4619      	mov	r1, r3
 800065c:	4805      	ldr	r0, [pc, #20]	; (8000674 <MX_ADC1_Init+0xec>)
 800065e:	f001 fd93 	bl	8002188 <HAL_ADC_ConfigChannel>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8000668:	f000 fd1a 	bl	80010a0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800066c:	bf00      	nop
 800066e:	3710      	adds	r7, #16
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	2000022c 	.word	0x2000022c
 8000678:	40012000 	.word	0x40012000
 800067c:	0f000001 	.word	0x0f000001

08000680 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b08a      	sub	sp, #40	; 0x28
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000688:	f107 0314 	add.w	r3, r7, #20
 800068c:	2200      	movs	r2, #0
 800068e:	601a      	str	r2, [r3, #0]
 8000690:	605a      	str	r2, [r3, #4]
 8000692:	609a      	str	r2, [r3, #8]
 8000694:	60da      	str	r2, [r3, #12]
 8000696:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4a3c      	ldr	r2, [pc, #240]	; (8000790 <HAL_ADC_MspInit+0x110>)
 800069e:	4293      	cmp	r3, r2
 80006a0:	d171      	bne.n	8000786 <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80006a2:	2300      	movs	r3, #0
 80006a4:	613b      	str	r3, [r7, #16]
 80006a6:	4b3b      	ldr	r3, [pc, #236]	; (8000794 <HAL_ADC_MspInit+0x114>)
 80006a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006aa:	4a3a      	ldr	r2, [pc, #232]	; (8000794 <HAL_ADC_MspInit+0x114>)
 80006ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006b0:	6453      	str	r3, [r2, #68]	; 0x44
 80006b2:	4b38      	ldr	r3, [pc, #224]	; (8000794 <HAL_ADC_MspInit+0x114>)
 80006b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80006ba:	613b      	str	r3, [r7, #16]
 80006bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80006be:	2300      	movs	r3, #0
 80006c0:	60fb      	str	r3, [r7, #12]
 80006c2:	4b34      	ldr	r3, [pc, #208]	; (8000794 <HAL_ADC_MspInit+0x114>)
 80006c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c6:	4a33      	ldr	r2, [pc, #204]	; (8000794 <HAL_ADC_MspInit+0x114>)
 80006c8:	f043 0304 	orr.w	r3, r3, #4
 80006cc:	6313      	str	r3, [r2, #48]	; 0x30
 80006ce:	4b31      	ldr	r3, [pc, #196]	; (8000794 <HAL_ADC_MspInit+0x114>)
 80006d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d2:	f003 0304 	and.w	r3, r3, #4
 80006d6:	60fb      	str	r3, [r7, #12]
 80006d8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006da:	2300      	movs	r3, #0
 80006dc:	60bb      	str	r3, [r7, #8]
 80006de:	4b2d      	ldr	r3, [pc, #180]	; (8000794 <HAL_ADC_MspInit+0x114>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e2:	4a2c      	ldr	r2, [pc, #176]	; (8000794 <HAL_ADC_MspInit+0x114>)
 80006e4:	f043 0302 	orr.w	r3, r3, #2
 80006e8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ea:	4b2a      	ldr	r3, [pc, #168]	; (8000794 <HAL_ADC_MspInit+0x114>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ee:	f003 0302 	and.w	r3, r3, #2
 80006f2:	60bb      	str	r3, [r7, #8]
 80006f4:	68bb      	ldr	r3, [r7, #8]
    PC0     ------> ADC1_IN10
    PC2     ------> ADC1_IN12
    PC3     ------> ADC1_IN13
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 80006f6:	230d      	movs	r3, #13
 80006f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006fa:	2303      	movs	r3, #3
 80006fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fe:	2300      	movs	r3, #0
 8000700:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000702:	f107 0314 	add.w	r3, r7, #20
 8000706:	4619      	mov	r1, r3
 8000708:	4823      	ldr	r0, [pc, #140]	; (8000798 <HAL_ADC_MspInit+0x118>)
 800070a:	f004 fc35 	bl	8004f78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800070e:	2302      	movs	r3, #2
 8000710:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000712:	2303      	movs	r3, #3
 8000714:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000716:	2300      	movs	r3, #0
 8000718:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800071a:	f107 0314 	add.w	r3, r7, #20
 800071e:	4619      	mov	r1, r3
 8000720:	481e      	ldr	r0, [pc, #120]	; (800079c <HAL_ADC_MspInit+0x11c>)
 8000722:	f004 fc29 	bl	8004f78 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000726:	4b1e      	ldr	r3, [pc, #120]	; (80007a0 <HAL_ADC_MspInit+0x120>)
 8000728:	4a1e      	ldr	r2, [pc, #120]	; (80007a4 <HAL_ADC_MspInit+0x124>)
 800072a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800072c:	4b1c      	ldr	r3, [pc, #112]	; (80007a0 <HAL_ADC_MspInit+0x120>)
 800072e:	2200      	movs	r2, #0
 8000730:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000732:	4b1b      	ldr	r3, [pc, #108]	; (80007a0 <HAL_ADC_MspInit+0x120>)
 8000734:	2200      	movs	r2, #0
 8000736:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000738:	4b19      	ldr	r3, [pc, #100]	; (80007a0 <HAL_ADC_MspInit+0x120>)
 800073a:	2200      	movs	r2, #0
 800073c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800073e:	4b18      	ldr	r3, [pc, #96]	; (80007a0 <HAL_ADC_MspInit+0x120>)
 8000740:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000744:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000746:	4b16      	ldr	r3, [pc, #88]	; (80007a0 <HAL_ADC_MspInit+0x120>)
 8000748:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800074c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800074e:	4b14      	ldr	r3, [pc, #80]	; (80007a0 <HAL_ADC_MspInit+0x120>)
 8000750:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000754:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000756:	4b12      	ldr	r3, [pc, #72]	; (80007a0 <HAL_ADC_MspInit+0x120>)
 8000758:	f44f 7280 	mov.w	r2, #256	; 0x100
 800075c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800075e:	4b10      	ldr	r3, [pc, #64]	; (80007a0 <HAL_ADC_MspInit+0x120>)
 8000760:	2200      	movs	r2, #0
 8000762:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000764:	4b0e      	ldr	r3, [pc, #56]	; (80007a0 <HAL_ADC_MspInit+0x120>)
 8000766:	2200      	movs	r2, #0
 8000768:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800076a:	480d      	ldr	r0, [pc, #52]	; (80007a0 <HAL_ADC_MspInit+0x120>)
 800076c:	f002 ff54 	bl	8003618 <HAL_DMA_Init>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8000776:	f000 fc93 	bl	80010a0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	4a08      	ldr	r2, [pc, #32]	; (80007a0 <HAL_ADC_MspInit+0x120>)
 800077e:	639a      	str	r2, [r3, #56]	; 0x38
 8000780:	4a07      	ldr	r2, [pc, #28]	; (80007a0 <HAL_ADC_MspInit+0x120>)
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000786:	bf00      	nop
 8000788:	3728      	adds	r7, #40	; 0x28
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	40012000 	.word	0x40012000
 8000794:	40023800 	.word	0x40023800
 8000798:	40020800 	.word	0x40020800
 800079c:	40020400 	.word	0x40020400
 80007a0:	20000274 	.word	0x20000274
 80007a4:	40026410 	.word	0x40026410

080007a8 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80007ac:	4b17      	ldr	r3, [pc, #92]	; (800080c <MX_CAN1_Init+0x64>)
 80007ae:	4a18      	ldr	r2, [pc, #96]	; (8000810 <MX_CAN1_Init+0x68>)
 80007b0:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 9;
 80007b2:	4b16      	ldr	r3, [pc, #88]	; (800080c <MX_CAN1_Init+0x64>)
 80007b4:	2209      	movs	r2, #9
 80007b6:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80007b8:	4b14      	ldr	r3, [pc, #80]	; (800080c <MX_CAN1_Init+0x64>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80007be:	4b13      	ldr	r3, [pc, #76]	; (800080c <MX_CAN1_Init+0x64>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_6TQ;
 80007c4:	4b11      	ldr	r3, [pc, #68]	; (800080c <MX_CAN1_Init+0x64>)
 80007c6:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 80007ca:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 80007cc:	4b0f      	ldr	r3, [pc, #60]	; (800080c <MX_CAN1_Init+0x64>)
 80007ce:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80007d2:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80007d4:	4b0d      	ldr	r3, [pc, #52]	; (800080c <MX_CAN1_Init+0x64>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80007da:	4b0c      	ldr	r3, [pc, #48]	; (800080c <MX_CAN1_Init+0x64>)
 80007dc:	2200      	movs	r2, #0
 80007de:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80007e0:	4b0a      	ldr	r3, [pc, #40]	; (800080c <MX_CAN1_Init+0x64>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80007e6:	4b09      	ldr	r3, [pc, #36]	; (800080c <MX_CAN1_Init+0x64>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80007ec:	4b07      	ldr	r3, [pc, #28]	; (800080c <MX_CAN1_Init+0x64>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80007f2:	4b06      	ldr	r3, [pc, #24]	; (800080c <MX_CAN1_Init+0x64>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80007f8:	4804      	ldr	r0, [pc, #16]	; (800080c <MX_CAN1_Init+0x64>)
 80007fa:	f001 fef3 	bl	80025e4 <HAL_CAN_Init>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000804:	f000 fc4c 	bl	80010a0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000808:	bf00      	nop
 800080a:	bd80      	pop	{r7, pc}
 800080c:	20000344 	.word	0x20000344
 8000810:	40006400 	.word	0x40006400

08000814 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b08a      	sub	sp, #40	; 0x28
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800081c:	f107 0314 	add.w	r3, r7, #20
 8000820:	2200      	movs	r2, #0
 8000822:	601a      	str	r2, [r3, #0]
 8000824:	605a      	str	r2, [r3, #4]
 8000826:	609a      	str	r2, [r3, #8]
 8000828:	60da      	str	r2, [r3, #12]
 800082a:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	4a1d      	ldr	r2, [pc, #116]	; (80008a8 <HAL_CAN_MspInit+0x94>)
 8000832:	4293      	cmp	r3, r2
 8000834:	d133      	bne.n	800089e <HAL_CAN_MspInit+0x8a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000836:	2300      	movs	r3, #0
 8000838:	613b      	str	r3, [r7, #16]
 800083a:	4b1c      	ldr	r3, [pc, #112]	; (80008ac <HAL_CAN_MspInit+0x98>)
 800083c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800083e:	4a1b      	ldr	r2, [pc, #108]	; (80008ac <HAL_CAN_MspInit+0x98>)
 8000840:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000844:	6413      	str	r3, [r2, #64]	; 0x40
 8000846:	4b19      	ldr	r3, [pc, #100]	; (80008ac <HAL_CAN_MspInit+0x98>)
 8000848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800084a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800084e:	613b      	str	r3, [r7, #16]
 8000850:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000852:	2300      	movs	r3, #0
 8000854:	60fb      	str	r3, [r7, #12]
 8000856:	4b15      	ldr	r3, [pc, #84]	; (80008ac <HAL_CAN_MspInit+0x98>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	4a14      	ldr	r2, [pc, #80]	; (80008ac <HAL_CAN_MspInit+0x98>)
 800085c:	f043 0308 	orr.w	r3, r3, #8
 8000860:	6313      	str	r3, [r2, #48]	; 0x30
 8000862:	4b12      	ldr	r3, [pc, #72]	; (80008ac <HAL_CAN_MspInit+0x98>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	f003 0308 	and.w	r3, r3, #8
 800086a:	60fb      	str	r3, [r7, #12]
 800086c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800086e:	2303      	movs	r3, #3
 8000870:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000872:	2302      	movs	r3, #2
 8000874:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000876:	2300      	movs	r3, #0
 8000878:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800087a:	2303      	movs	r3, #3
 800087c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800087e:	2309      	movs	r3, #9
 8000880:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000882:	f107 0314 	add.w	r3, r7, #20
 8000886:	4619      	mov	r1, r3
 8000888:	4809      	ldr	r0, [pc, #36]	; (80008b0 <HAL_CAN_MspInit+0x9c>)
 800088a:	f004 fb75 	bl	8004f78 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 800088e:	2200      	movs	r2, #0
 8000890:	2100      	movs	r1, #0
 8000892:	2014      	movs	r0, #20
 8000894:	f002 fe19 	bl	80034ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000898:	2014      	movs	r0, #20
 800089a:	f002 fe32 	bl	8003502 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 800089e:	bf00      	nop
 80008a0:	3728      	adds	r7, #40	; 0x28
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	40006400 	.word	0x40006400
 80008ac:	40023800 	.word	0x40023800
 80008b0:	40020c00 	.word	0x40020c00

080008b4 <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80008ba:	463b      	mov	r3, r7
 80008bc:	2200      	movs	r2, #0
 80008be:	601a      	str	r2, [r3, #0]
 80008c0:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80008c2:	4b0f      	ldr	r3, [pc, #60]	; (8000900 <MX_DAC_Init+0x4c>)
 80008c4:	4a0f      	ldr	r2, [pc, #60]	; (8000904 <MX_DAC_Init+0x50>)
 80008c6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80008c8:	480d      	ldr	r0, [pc, #52]	; (8000900 <MX_DAC_Init+0x4c>)
 80008ca:	f002 fe34 	bl	8003536 <HAL_DAC_Init>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d001      	beq.n	80008d8 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80008d4:	f000 fbe4 	bl	80010a0 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80008d8:	2300      	movs	r3, #0
 80008da:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80008dc:	2300      	movs	r3, #0
 80008de:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80008e0:	463b      	mov	r3, r7
 80008e2:	2200      	movs	r2, #0
 80008e4:	4619      	mov	r1, r3
 80008e6:	4806      	ldr	r0, [pc, #24]	; (8000900 <MX_DAC_Init+0x4c>)
 80008e8:	f002 fe47 	bl	800357a <HAL_DAC_ConfigChannel>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80008f2:	f000 fbd5 	bl	80010a0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80008f6:	bf00      	nop
 80008f8:	3708      	adds	r7, #8
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	2000036c 	.word	0x2000036c
 8000904:	40007400 	.word	0x40007400

08000908 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b08a      	sub	sp, #40	; 0x28
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000910:	f107 0314 	add.w	r3, r7, #20
 8000914:	2200      	movs	r2, #0
 8000916:	601a      	str	r2, [r3, #0]
 8000918:	605a      	str	r2, [r3, #4]
 800091a:	609a      	str	r2, [r3, #8]
 800091c:	60da      	str	r2, [r3, #12]
 800091e:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	4a17      	ldr	r2, [pc, #92]	; (8000984 <HAL_DAC_MspInit+0x7c>)
 8000926:	4293      	cmp	r3, r2
 8000928:	d127      	bne.n	800097a <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800092a:	2300      	movs	r3, #0
 800092c:	613b      	str	r3, [r7, #16]
 800092e:	4b16      	ldr	r3, [pc, #88]	; (8000988 <HAL_DAC_MspInit+0x80>)
 8000930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000932:	4a15      	ldr	r2, [pc, #84]	; (8000988 <HAL_DAC_MspInit+0x80>)
 8000934:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000938:	6413      	str	r3, [r2, #64]	; 0x40
 800093a:	4b13      	ldr	r3, [pc, #76]	; (8000988 <HAL_DAC_MspInit+0x80>)
 800093c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800093e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000942:	613b      	str	r3, [r7, #16]
 8000944:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000946:	2300      	movs	r3, #0
 8000948:	60fb      	str	r3, [r7, #12]
 800094a:	4b0f      	ldr	r3, [pc, #60]	; (8000988 <HAL_DAC_MspInit+0x80>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094e:	4a0e      	ldr	r2, [pc, #56]	; (8000988 <HAL_DAC_MspInit+0x80>)
 8000950:	f043 0301 	orr.w	r3, r3, #1
 8000954:	6313      	str	r3, [r2, #48]	; 0x30
 8000956:	4b0c      	ldr	r3, [pc, #48]	; (8000988 <HAL_DAC_MspInit+0x80>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095a:	f003 0301 	and.w	r3, r3, #1
 800095e:	60fb      	str	r3, [r7, #12]
 8000960:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000962:	2310      	movs	r3, #16
 8000964:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000966:	2303      	movs	r3, #3
 8000968:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096a:	2300      	movs	r3, #0
 800096c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800096e:	f107 0314 	add.w	r3, r7, #20
 8000972:	4619      	mov	r1, r3
 8000974:	4805      	ldr	r0, [pc, #20]	; (800098c <HAL_DAC_MspInit+0x84>)
 8000976:	f004 faff 	bl	8004f78 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 800097a:	bf00      	nop
 800097c:	3728      	adds	r7, #40	; 0x28
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	40007400 	.word	0x40007400
 8000988:	40023800 	.word	0x40023800
 800098c:	40020000 	.word	0x40020000

08000990 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000996:	2300      	movs	r3, #0
 8000998:	607b      	str	r3, [r7, #4]
 800099a:	4b14      	ldr	r3, [pc, #80]	; (80009ec <MX_DMA_Init+0x5c>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099e:	4a13      	ldr	r2, [pc, #76]	; (80009ec <MX_DMA_Init+0x5c>)
 80009a0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80009a4:	6313      	str	r3, [r2, #48]	; 0x30
 80009a6:	4b11      	ldr	r3, [pc, #68]	; (80009ec <MX_DMA_Init+0x5c>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80009ae:	607b      	str	r3, [r7, #4]
 80009b0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80009b2:	2200      	movs	r2, #0
 80009b4:	2100      	movs	r1, #0
 80009b6:	2038      	movs	r0, #56	; 0x38
 80009b8:	f002 fd87 	bl	80034ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80009bc:	2038      	movs	r0, #56	; 0x38
 80009be:	f002 fda0 	bl	8003502 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80009c2:	2200      	movs	r2, #0
 80009c4:	2100      	movs	r1, #0
 80009c6:	203b      	movs	r0, #59	; 0x3b
 80009c8:	f002 fd7f 	bl	80034ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80009cc:	203b      	movs	r0, #59	; 0x3b
 80009ce:	f002 fd98 	bl	8003502 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 80009d2:	2200      	movs	r2, #0
 80009d4:	2100      	movs	r1, #0
 80009d6:	2045      	movs	r0, #69	; 0x45
 80009d8:	f002 fd77 	bl	80034ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80009dc:	2045      	movs	r0, #69	; 0x45
 80009de:	f002 fd90 	bl	8003502 <HAL_NVIC_EnableIRQ>

}
 80009e2:	bf00      	nop
 80009e4:	3708      	adds	r7, #8
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	40023800 	.word	0x40023800

080009f0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b08c      	sub	sp, #48	; 0x30
 80009f4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f6:	f107 031c 	add.w	r3, r7, #28
 80009fa:	2200      	movs	r2, #0
 80009fc:	601a      	str	r2, [r3, #0]
 80009fe:	605a      	str	r2, [r3, #4]
 8000a00:	609a      	str	r2, [r3, #8]
 8000a02:	60da      	str	r2, [r3, #12]
 8000a04:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a06:	2300      	movs	r3, #0
 8000a08:	61bb      	str	r3, [r7, #24]
 8000a0a:	4b4f      	ldr	r3, [pc, #316]	; (8000b48 <MX_GPIO_Init+0x158>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	4a4e      	ldr	r2, [pc, #312]	; (8000b48 <MX_GPIO_Init+0x158>)
 8000a10:	f043 0320 	orr.w	r3, r3, #32
 8000a14:	6313      	str	r3, [r2, #48]	; 0x30
 8000a16:	4b4c      	ldr	r3, [pc, #304]	; (8000b48 <MX_GPIO_Init+0x158>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	f003 0320 	and.w	r3, r3, #32
 8000a1e:	61bb      	str	r3, [r7, #24]
 8000a20:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a22:	2300      	movs	r3, #0
 8000a24:	617b      	str	r3, [r7, #20]
 8000a26:	4b48      	ldr	r3, [pc, #288]	; (8000b48 <MX_GPIO_Init+0x158>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2a:	4a47      	ldr	r2, [pc, #284]	; (8000b48 <MX_GPIO_Init+0x158>)
 8000a2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a30:	6313      	str	r3, [r2, #48]	; 0x30
 8000a32:	4b45      	ldr	r3, [pc, #276]	; (8000b48 <MX_GPIO_Init+0x158>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a3a:	617b      	str	r3, [r7, #20]
 8000a3c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a3e:	2300      	movs	r3, #0
 8000a40:	613b      	str	r3, [r7, #16]
 8000a42:	4b41      	ldr	r3, [pc, #260]	; (8000b48 <MX_GPIO_Init+0x158>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a46:	4a40      	ldr	r2, [pc, #256]	; (8000b48 <MX_GPIO_Init+0x158>)
 8000a48:	f043 0304 	orr.w	r3, r3, #4
 8000a4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a4e:	4b3e      	ldr	r3, [pc, #248]	; (8000b48 <MX_GPIO_Init+0x158>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a52:	f003 0304 	and.w	r3, r3, #4
 8000a56:	613b      	str	r3, [r7, #16]
 8000a58:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	60fb      	str	r3, [r7, #12]
 8000a5e:	4b3a      	ldr	r3, [pc, #232]	; (8000b48 <MX_GPIO_Init+0x158>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a62:	4a39      	ldr	r2, [pc, #228]	; (8000b48 <MX_GPIO_Init+0x158>)
 8000a64:	f043 0301 	orr.w	r3, r3, #1
 8000a68:	6313      	str	r3, [r2, #48]	; 0x30
 8000a6a:	4b37      	ldr	r3, [pc, #220]	; (8000b48 <MX_GPIO_Init+0x158>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	f003 0301 	and.w	r3, r3, #1
 8000a72:	60fb      	str	r3, [r7, #12]
 8000a74:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a76:	2300      	movs	r3, #0
 8000a78:	60bb      	str	r3, [r7, #8]
 8000a7a:	4b33      	ldr	r3, [pc, #204]	; (8000b48 <MX_GPIO_Init+0x158>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7e:	4a32      	ldr	r2, [pc, #200]	; (8000b48 <MX_GPIO_Init+0x158>)
 8000a80:	f043 0302 	orr.w	r3, r3, #2
 8000a84:	6313      	str	r3, [r2, #48]	; 0x30
 8000a86:	4b30      	ldr	r3, [pc, #192]	; (8000b48 <MX_GPIO_Init+0x158>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	f003 0302 	and.w	r3, r3, #2
 8000a8e:	60bb      	str	r3, [r7, #8]
 8000a90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a92:	2300      	movs	r3, #0
 8000a94:	607b      	str	r3, [r7, #4]
 8000a96:	4b2c      	ldr	r3, [pc, #176]	; (8000b48 <MX_GPIO_Init+0x158>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9a:	4a2b      	ldr	r2, [pc, #172]	; (8000b48 <MX_GPIO_Init+0x158>)
 8000a9c:	f043 0308 	orr.w	r3, r3, #8
 8000aa0:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa2:	4b29      	ldr	r3, [pc, #164]	; (8000b48 <MX_GPIO_Init+0x158>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa6:	f003 0308 	and.w	r3, r3, #8
 8000aaa:	607b      	str	r3, [r7, #4]
 8000aac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8000aae:	2200      	movs	r2, #0
 8000ab0:	2140      	movs	r1, #64	; 0x40
 8000ab2:	4826      	ldr	r0, [pc, #152]	; (8000b4c <MX_GPIO_Init+0x15c>)
 8000ab4:	f004 fc24 	bl	8005300 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_7, GPIO_PIN_RESET);
 8000ab8:	2200      	movs	r2, #0
 8000aba:	2181      	movs	r1, #129	; 0x81
 8000abc:	4824      	ldr	r0, [pc, #144]	; (8000b50 <MX_GPIO_Init+0x160>)
 8000abe:	f004 fc1f 	bl	8005300 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000ac2:	2340      	movs	r3, #64	; 0x40
 8000ac4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aca:	2300      	movs	r3, #0
 8000acc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ad2:	f107 031c 	add.w	r3, r7, #28
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	481c      	ldr	r0, [pc, #112]	; (8000b4c <MX_GPIO_Init+0x15c>)
 8000ada:	f004 fa4d 	bl	8004f78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_7;
 8000ade:	2381      	movs	r3, #129	; 0x81
 8000ae0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aea:	2300      	movs	r3, #0
 8000aec:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aee:	f107 031c 	add.w	r3, r7, #28
 8000af2:	4619      	mov	r1, r3
 8000af4:	4816      	ldr	r0, [pc, #88]	; (8000b50 <MX_GPIO_Init+0x160>)
 8000af6:	f004 fa3f 	bl	8004f78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000afa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000afe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b00:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b06:	2301      	movs	r3, #1
 8000b08:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b0a:	f107 031c 	add.w	r3, r7, #28
 8000b0e:	4619      	mov	r1, r3
 8000b10:	4810      	ldr	r0, [pc, #64]	; (8000b54 <MX_GPIO_Init+0x164>)
 8000b12:	f004 fa31 	bl	8004f78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000b16:	2308      	movs	r3, #8
 8000b18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b22:	f107 031c 	add.w	r3, r7, #28
 8000b26:	4619      	mov	r1, r3
 8000b28:	480a      	ldr	r0, [pc, #40]	; (8000b54 <MX_GPIO_Init+0x164>)
 8000b2a:	f004 fa25 	bl	8004f78 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000b2e:	2200      	movs	r2, #0
 8000b30:	2100      	movs	r1, #0
 8000b32:	2028      	movs	r0, #40	; 0x28
 8000b34:	f002 fcc9 	bl	80034ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000b38:	2028      	movs	r0, #40	; 0x28
 8000b3a:	f002 fce2 	bl	8003502 <HAL_NVIC_EnableIRQ>

}
 8000b3e:	bf00      	nop
 8000b40:	3730      	adds	r7, #48	; 0x30
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	40023800 	.word	0x40023800
 8000b4c:	40020000 	.word	0x40020000
 8000b50:	40020400 	.word	0x40020400
 8000b54:	40020c00 	.word	0x40020c00

08000b58 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b5c:	4b1b      	ldr	r3, [pc, #108]	; (8000bcc <MX_I2C1_Init+0x74>)
 8000b5e:	4a1c      	ldr	r2, [pc, #112]	; (8000bd0 <MX_I2C1_Init+0x78>)
 8000b60:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000b62:	4b1a      	ldr	r3, [pc, #104]	; (8000bcc <MX_I2C1_Init+0x74>)
 8000b64:	4a1b      	ldr	r2, [pc, #108]	; (8000bd4 <MX_I2C1_Init+0x7c>)
 8000b66:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b68:	4b18      	ldr	r3, [pc, #96]	; (8000bcc <MX_I2C1_Init+0x74>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000b6e:	4b17      	ldr	r3, [pc, #92]	; (8000bcc <MX_I2C1_Init+0x74>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b74:	4b15      	ldr	r3, [pc, #84]	; (8000bcc <MX_I2C1_Init+0x74>)
 8000b76:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b7a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b7c:	4b13      	ldr	r3, [pc, #76]	; (8000bcc <MX_I2C1_Init+0x74>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000b82:	4b12      	ldr	r3, [pc, #72]	; (8000bcc <MX_I2C1_Init+0x74>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b88:	4b10      	ldr	r3, [pc, #64]	; (8000bcc <MX_I2C1_Init+0x74>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b8e:	4b0f      	ldr	r3, [pc, #60]	; (8000bcc <MX_I2C1_Init+0x74>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b94:	480d      	ldr	r0, [pc, #52]	; (8000bcc <MX_I2C1_Init+0x74>)
 8000b96:	f004 fbe5 	bl	8005364 <HAL_I2C_Init>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d001      	beq.n	8000ba4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000ba0:	f000 fa7e 	bl	80010a0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ba4:	2100      	movs	r1, #0
 8000ba6:	4809      	ldr	r0, [pc, #36]	; (8000bcc <MX_I2C1_Init+0x74>)
 8000ba8:	f004 fd20 	bl	80055ec <HAL_I2CEx_ConfigAnalogFilter>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d001      	beq.n	8000bb6 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000bb2:	f000 fa75 	bl	80010a0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000bb6:	2100      	movs	r1, #0
 8000bb8:	4804      	ldr	r0, [pc, #16]	; (8000bcc <MX_I2C1_Init+0x74>)
 8000bba:	f004 fd53 	bl	8005664 <HAL_I2CEx_ConfigDigitalFilter>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000bc4:	f000 fa6c 	bl	80010a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000bc8:	bf00      	nop
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	20000380 	.word	0x20000380
 8000bd0:	40005400 	.word	0x40005400
 8000bd4:	00061a80 	.word	0x00061a80

08000bd8 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000bdc:	4b1b      	ldr	r3, [pc, #108]	; (8000c4c <MX_I2C2_Init+0x74>)
 8000bde:	4a1c      	ldr	r2, [pc, #112]	; (8000c50 <MX_I2C2_Init+0x78>)
 8000be0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000be2:	4b1a      	ldr	r3, [pc, #104]	; (8000c4c <MX_I2C2_Init+0x74>)
 8000be4:	4a1b      	ldr	r2, [pc, #108]	; (8000c54 <MX_I2C2_Init+0x7c>)
 8000be6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000be8:	4b18      	ldr	r3, [pc, #96]	; (8000c4c <MX_I2C2_Init+0x74>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000bee:	4b17      	ldr	r3, [pc, #92]	; (8000c4c <MX_I2C2_Init+0x74>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000bf4:	4b15      	ldr	r3, [pc, #84]	; (8000c4c <MX_I2C2_Init+0x74>)
 8000bf6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000bfa:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bfc:	4b13      	ldr	r3, [pc, #76]	; (8000c4c <MX_I2C2_Init+0x74>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000c02:	4b12      	ldr	r3, [pc, #72]	; (8000c4c <MX_I2C2_Init+0x74>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c08:	4b10      	ldr	r3, [pc, #64]	; (8000c4c <MX_I2C2_Init+0x74>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c0e:	4b0f      	ldr	r3, [pc, #60]	; (8000c4c <MX_I2C2_Init+0x74>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000c14:	480d      	ldr	r0, [pc, #52]	; (8000c4c <MX_I2C2_Init+0x74>)
 8000c16:	f004 fba5 	bl	8005364 <HAL_I2C_Init>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d001      	beq.n	8000c24 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000c20:	f000 fa3e 	bl	80010a0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c24:	2100      	movs	r1, #0
 8000c26:	4809      	ldr	r0, [pc, #36]	; (8000c4c <MX_I2C2_Init+0x74>)
 8000c28:	f004 fce0 	bl	80055ec <HAL_I2CEx_ConfigAnalogFilter>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8000c32:	f000 fa35 	bl	80010a0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000c36:	2100      	movs	r1, #0
 8000c38:	4804      	ldr	r0, [pc, #16]	; (8000c4c <MX_I2C2_Init+0x74>)
 8000c3a:	f004 fd13 	bl	8005664 <HAL_I2CEx_ConfigDigitalFilter>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d001      	beq.n	8000c48 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8000c44:	f000 fa2c 	bl	80010a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000c48:	bf00      	nop
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	200003d4 	.word	0x200003d4
 8000c50:	40005800 	.word	0x40005800
 8000c54:	000186a0 	.word	0x000186a0

08000c58 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b08c      	sub	sp, #48	; 0x30
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c60:	f107 031c 	add.w	r3, r7, #28
 8000c64:	2200      	movs	r2, #0
 8000c66:	601a      	str	r2, [r3, #0]
 8000c68:	605a      	str	r2, [r3, #4]
 8000c6a:	609a      	str	r2, [r3, #8]
 8000c6c:	60da      	str	r2, [r3, #12]
 8000c6e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4a32      	ldr	r2, [pc, #200]	; (8000d40 <HAL_I2C_MspInit+0xe8>)
 8000c76:	4293      	cmp	r3, r2
 8000c78:	d12d      	bne.n	8000cd6 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	61bb      	str	r3, [r7, #24]
 8000c7e:	4b31      	ldr	r3, [pc, #196]	; (8000d44 <HAL_I2C_MspInit+0xec>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c82:	4a30      	ldr	r2, [pc, #192]	; (8000d44 <HAL_I2C_MspInit+0xec>)
 8000c84:	f043 0302 	orr.w	r3, r3, #2
 8000c88:	6313      	str	r3, [r2, #48]	; 0x30
 8000c8a:	4b2e      	ldr	r3, [pc, #184]	; (8000d44 <HAL_I2C_MspInit+0xec>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8e:	f003 0302 	and.w	r3, r3, #2
 8000c92:	61bb      	str	r3, [r7, #24]
 8000c94:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000c96:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c9c:	2312      	movs	r3, #18
 8000c9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ca4:	2303      	movs	r3, #3
 8000ca6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ca8:	2304      	movs	r3, #4
 8000caa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cac:	f107 031c 	add.w	r3, r7, #28
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	4825      	ldr	r0, [pc, #148]	; (8000d48 <HAL_I2C_MspInit+0xf0>)
 8000cb4:	f004 f960 	bl	8004f78 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000cb8:	2300      	movs	r3, #0
 8000cba:	617b      	str	r3, [r7, #20]
 8000cbc:	4b21      	ldr	r3, [pc, #132]	; (8000d44 <HAL_I2C_MspInit+0xec>)
 8000cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc0:	4a20      	ldr	r2, [pc, #128]	; (8000d44 <HAL_I2C_MspInit+0xec>)
 8000cc2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000cc6:	6413      	str	r3, [r2, #64]	; 0x40
 8000cc8:	4b1e      	ldr	r3, [pc, #120]	; (8000d44 <HAL_I2C_MspInit+0xec>)
 8000cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ccc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cd0:	617b      	str	r3, [r7, #20]
 8000cd2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000cd4:	e030      	b.n	8000d38 <HAL_I2C_MspInit+0xe0>
  else if(i2cHandle->Instance==I2C2)
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	4a1c      	ldr	r2, [pc, #112]	; (8000d4c <HAL_I2C_MspInit+0xf4>)
 8000cdc:	4293      	cmp	r3, r2
 8000cde:	d12b      	bne.n	8000d38 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	613b      	str	r3, [r7, #16]
 8000ce4:	4b17      	ldr	r3, [pc, #92]	; (8000d44 <HAL_I2C_MspInit+0xec>)
 8000ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce8:	4a16      	ldr	r2, [pc, #88]	; (8000d44 <HAL_I2C_MspInit+0xec>)
 8000cea:	f043 0320 	orr.w	r3, r3, #32
 8000cee:	6313      	str	r3, [r2, #48]	; 0x30
 8000cf0:	4b14      	ldr	r3, [pc, #80]	; (8000d44 <HAL_I2C_MspInit+0xec>)
 8000cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf4:	f003 0320 	and.w	r3, r3, #32
 8000cf8:	613b      	str	r3, [r7, #16]
 8000cfa:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000cfc:	2303      	movs	r3, #3
 8000cfe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d00:	2312      	movs	r3, #18
 8000d02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d04:	2300      	movs	r3, #0
 8000d06:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d08:	2303      	movs	r3, #3
 8000d0a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000d0c:	2304      	movs	r3, #4
 8000d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000d10:	f107 031c 	add.w	r3, r7, #28
 8000d14:	4619      	mov	r1, r3
 8000d16:	480e      	ldr	r0, [pc, #56]	; (8000d50 <HAL_I2C_MspInit+0xf8>)
 8000d18:	f004 f92e 	bl	8004f78 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	60fb      	str	r3, [r7, #12]
 8000d20:	4b08      	ldr	r3, [pc, #32]	; (8000d44 <HAL_I2C_MspInit+0xec>)
 8000d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d24:	4a07      	ldr	r2, [pc, #28]	; (8000d44 <HAL_I2C_MspInit+0xec>)
 8000d26:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000d2a:	6413      	str	r3, [r2, #64]	; 0x40
 8000d2c:	4b05      	ldr	r3, [pc, #20]	; (8000d44 <HAL_I2C_MspInit+0xec>)
 8000d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d30:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d34:	60fb      	str	r3, [r7, #12]
 8000d36:	68fb      	ldr	r3, [r7, #12]
}
 8000d38:	bf00      	nop
 8000d3a:	3730      	adds	r7, #48	; 0x30
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	40005400 	.word	0x40005400
 8000d44:	40023800 	.word	0x40023800
 8000d48:	40020400 	.word	0x40020400
 8000d4c:	40005800 	.word	0x40005800
 8000d50:	40021400 	.word	0x40021400

08000d54 <_write>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

int _write(int file, char* p, int len)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b084      	sub	sp, #16
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	60f8      	str	r0, [r7, #12]
 8000d5c:	60b9      	str	r1, [r7, #8]
 8000d5e:	607a      	str	r2, [r7, #4]
	if(HAL_UART_Transmit(&huart3, (uint8_t*)p, len, 10) == HAL_OK) return len;
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	b29a      	uxth	r2, r3
 8000d64:	230a      	movs	r3, #10
 8000d66:	68b9      	ldr	r1, [r7, #8]
 8000d68:	4806      	ldr	r0, [pc, #24]	; (8000d84 <_write+0x30>)
 8000d6a:	f007 fc6a 	bl	8008642 <HAL_UART_Transmit>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d101      	bne.n	8000d78 <_write+0x24>
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	e000      	b.n	8000d7a <_write+0x26>
	else return 0;
 8000d78:	2300      	movs	r3, #0
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	3710      	adds	r7, #16
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	20000774 	.word	0x20000774

08000d88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b086      	sub	sp, #24
 8000d8c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d8e:	f001 f921 	bl	8001fd4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d92:	f000 f8c1 	bl	8000f18 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d96:	f7ff fe2b 	bl	80009f0 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000d9a:	f001 f877 	bl	8001e8c <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8000d9e:	f7ff fedb 	bl	8000b58 <MX_I2C1_Init>
  MX_TIM7_Init();
 8000da2:	f000 fe7d 	bl	8001aa0 <MX_TIM7_Init>
  MX_TIM3_Init();
 8000da6:	f000 fcef 	bl	8001788 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000daa:	f000 fd63 	bl	8001874 <MX_TIM4_Init>
  MX_TIM10_Init();
 8000dae:	f000 fead 	bl	8001b0c <MX_TIM10_Init>
  MX_TIM2_Init();
 8000db2:	f000 fc73 	bl	800169c <MX_TIM2_Init>
  MX_DMA_Init();
 8000db6:	f7ff fdeb 	bl	8000990 <MX_DMA_Init>
  MX_ADC1_Init();
 8000dba:	f7ff fbe5 	bl	8000588 <MX_ADC1_Init>
  MX_TIM5_Init();
 8000dbe:	f000 fded 	bl	800199c <MX_TIM5_Init>
  MX_DAC_Init();
 8000dc2:	f7ff fd77 	bl	80008b4 <MX_DAC_Init>
  MX_I2C2_Init();
 8000dc6:	f7ff ff07 	bl	8000bd8 <MX_I2C2_Init>
  MX_SPI2_Init();
 8000dca:	f000 fa7f 	bl	80012cc <MX_SPI2_Init>
  MX_SDIO_SD_Init();
 8000dce:	f000 f96d 	bl	80010ac <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8000dd2:	f009 f8c5 	bl	8009f60 <MX_FATFS_Init>
  MX_LWIP_Init();
 8000dd6:	f009 fb1d 	bl	800a414 <MX_LWIP_Init>
  MX_CAN1_Init();
 8000dda:	f7ff fce5 	bl	80007a8 <MX_CAN1_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  canFilter1.FilterMaskIdHigh = 0x7E7 << 5;
 8000dde:	4b42      	ldr	r3, [pc, #264]	; (8000ee8 <main+0x160>)
 8000de0:	f64f 42e0 	movw	r2, #64736	; 0xfce0
 8000de4:	609a      	str	r2, [r3, #8]
  canFilter1.FilterIdHigh = 0x1EF << 5;
 8000de6:	4b40      	ldr	r3, [pc, #256]	; (8000ee8 <main+0x160>)
 8000de8:	f643 52e0 	movw	r2, #15840	; 0x3de0
 8000dec:	601a      	str	r2, [r3, #0]

  canFilter1.FilterMaskIdLow = 0x7E7 << 5;
 8000dee:	4b3e      	ldr	r3, [pc, #248]	; (8000ee8 <main+0x160>)
 8000df0:	f64f 42e0 	movw	r2, #64736	; 0xfce0
 8000df4:	60da      	str	r2, [r3, #12]
  canFilter1.FilterIdLow = 0x1EF << 5;
 8000df6:	4b3c      	ldr	r3, [pc, #240]	; (8000ee8 <main+0x160>)
 8000df8:	f643 52e0 	movw	r2, #15840	; 0x3de0
 8000dfc:	605a      	str	r2, [r3, #4]

  canFilter1.FilterMode = CAN_FILTERMODE_IDMASK;
 8000dfe:	4b3a      	ldr	r3, [pc, #232]	; (8000ee8 <main+0x160>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	619a      	str	r2, [r3, #24]
  canFilter1.FilterScale = CAN_FILTERSCALE_16BIT;
 8000e04:	4b38      	ldr	r3, [pc, #224]	; (8000ee8 <main+0x160>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	61da      	str	r2, [r3, #28]

  canFilter1.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000e0a:	4b37      	ldr	r3, [pc, #220]	; (8000ee8 <main+0x160>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	611a      	str	r2, [r3, #16]
  canFilter1.FilterBank = 0;
 8000e10:	4b35      	ldr	r3, [pc, #212]	; (8000ee8 <main+0x160>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	615a      	str	r2, [r3, #20]
  canFilter1.FilterActivation = ENABLE;
 8000e16:	4b34      	ldr	r3, [pc, #208]	; (8000ee8 <main+0x160>)
 8000e18:	2201      	movs	r2, #1
 8000e1a:	621a      	str	r2, [r3, #32]

  HAL_CAN_ConfigFilter(&hcan1, &canFilter1);
 8000e1c:	4932      	ldr	r1, [pc, #200]	; (8000ee8 <main+0x160>)
 8000e1e:	4833      	ldr	r0, [pc, #204]	; (8000eec <main+0x164>)
 8000e20:	f001 fcdc 	bl	80027dc <HAL_CAN_ConfigFilter>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000e24:	2102      	movs	r1, #2
 8000e26:	4831      	ldr	r0, [pc, #196]	; (8000eec <main+0x164>)
 8000e28:	f002 f81e 	bl	8002e68 <HAL_CAN_ActivateNotification>

  HAL_CAN_Start(&hcan1);
 8000e2c:	482f      	ldr	r0, [pc, #188]	; (8000eec <main+0x164>)
 8000e2e:	f001 fdb5 	bl	800299c <HAL_CAN_Start>
  uint8_t str[20];
  while (1)
  {
	  if(buttonFlag == 1)
 8000e32:	4b2f      	ldr	r3, [pc, #188]	; (8000ef0 <main+0x168>)
 8000e34:	781b      	ldrb	r3, [r3, #0]
 8000e36:	b2db      	uxtb	r3, r3
 8000e38:	2b01      	cmp	r3, #1
 8000e3a:	d133      	bne.n	8000ea4 <main+0x11c>
	  {
		  buttonFlag = 0;
 8000e3c:	4b2c      	ldr	r3, [pc, #176]	; (8000ef0 <main+0x168>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	701a      	strb	r2, [r3, #0]

		  canTxHeader.StdId = 0x1EF;
 8000e42:	4b2c      	ldr	r3, [pc, #176]	; (8000ef4 <main+0x16c>)
 8000e44:	f240 12ef 	movw	r2, #495	; 0x1ef
 8000e48:	601a      	str	r2, [r3, #0]
		  canTxHeader.RTR = CAN_RTR_DATA;
 8000e4a:	4b2a      	ldr	r3, [pc, #168]	; (8000ef4 <main+0x16c>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	60da      	str	r2, [r3, #12]
		  canTxHeader.IDE = CAN_ID_STD;
 8000e50:	4b28      	ldr	r3, [pc, #160]	; (8000ef4 <main+0x16c>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	609a      	str	r2, [r3, #8]
		  canTxHeader.DLC = 8;
 8000e56:	4b27      	ldr	r3, [pc, #156]	; (8000ef4 <main+0x16c>)
 8000e58:	2208      	movs	r2, #8
 8000e5a:	611a      	str	r2, [r3, #16]

		  can1Tx0Data[0] = 0;
 8000e5c:	4b26      	ldr	r3, [pc, #152]	; (8000ef8 <main+0x170>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	701a      	strb	r2, [r3, #0]
		  for(int i=0; i<8; i++) can1Tx0Data[i]++;
 8000e62:	2300      	movs	r3, #0
 8000e64:	617b      	str	r3, [r7, #20]
 8000e66:	e00d      	b.n	8000e84 <main+0xfc>
 8000e68:	4a23      	ldr	r2, [pc, #140]	; (8000ef8 <main+0x170>)
 8000e6a:	697b      	ldr	r3, [r7, #20]
 8000e6c:	4413      	add	r3, r2
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	3301      	adds	r3, #1
 8000e72:	b2d9      	uxtb	r1, r3
 8000e74:	4a20      	ldr	r2, [pc, #128]	; (8000ef8 <main+0x170>)
 8000e76:	697b      	ldr	r3, [r7, #20]
 8000e78:	4413      	add	r3, r2
 8000e7a:	460a      	mov	r2, r1
 8000e7c:	701a      	strb	r2, [r3, #0]
 8000e7e:	697b      	ldr	r3, [r7, #20]
 8000e80:	3301      	adds	r3, #1
 8000e82:	617b      	str	r3, [r7, #20]
 8000e84:	697b      	ldr	r3, [r7, #20]
 8000e86:	2b07      	cmp	r3, #7
 8000e88:	ddee      	ble.n	8000e68 <main+0xe0>

		  TxMailBox = HAL_CAN_GetTxMailboxesFreeLevel(&hcan1);
 8000e8a:	4818      	ldr	r0, [pc, #96]	; (8000eec <main+0x164>)
 8000e8c:	f001 fea5 	bl	8002bda <HAL_CAN_GetTxMailboxesFreeLevel>
 8000e90:	4603      	mov	r3, r0
 8000e92:	4a1a      	ldr	r2, [pc, #104]	; (8000efc <main+0x174>)
 8000e94:	6013      	str	r3, [r2, #0]
		  HAL_CAN_AddTxMessage(&hcan1, &canTxHeader, &can1Tx0Data[0], TxMailBox);
 8000e96:	4b19      	ldr	r3, [pc, #100]	; (8000efc <main+0x174>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	4a17      	ldr	r2, [pc, #92]	; (8000ef8 <main+0x170>)
 8000e9c:	4915      	ldr	r1, [pc, #84]	; (8000ef4 <main+0x16c>)
 8000e9e:	4813      	ldr	r0, [pc, #76]	; (8000eec <main+0x164>)
 8000ea0:	f001 fdc0 	bl	8002a24 <HAL_CAN_AddTxMessage>

	  }

	  if(can1_rx0_flag == 1)
 8000ea4:	4b16      	ldr	r3, [pc, #88]	; (8000f00 <main+0x178>)
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	b2db      	uxtb	r3, r3
 8000eaa:	2b01      	cmp	r3, #1
 8000eac:	d1c1      	bne.n	8000e32 <main+0xaa>
	  {
		  can1_rx0_flag = 0;
 8000eae:	4b14      	ldr	r3, [pc, #80]	; (8000f00 <main+0x178>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	701a      	strb	r2, [r3, #0]
		  sprintf((char*)str, "Rx ID : 0x%3X", (unsigned)canRxHeader.StdId);
 8000eb4:	4b13      	ldr	r3, [pc, #76]	; (8000f04 <main+0x17c>)
 8000eb6:	681a      	ldr	r2, [r3, #0]
 8000eb8:	463b      	mov	r3, r7
 8000eba:	4913      	ldr	r1, [pc, #76]	; (8000f08 <main+0x180>)
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f013 fb99 	bl	80145f4 <siprintf>
		  printf("%s\r\n", str);
 8000ec2:	463b      	mov	r3, r7
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	4811      	ldr	r0, [pc, #68]	; (8000f0c <main+0x184>)
 8000ec8:	f013 fb3c 	bl	8014544 <iprintf>
		  sprintf((char*)str, "Rx Data : 0x%2X", can1Rx0Data[0]);	// 1 byte
 8000ecc:	4b10      	ldr	r3, [pc, #64]	; (8000f10 <main+0x188>)
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	461a      	mov	r2, r3
 8000ed2:	463b      	mov	r3, r7
 8000ed4:	490f      	ldr	r1, [pc, #60]	; (8000f14 <main+0x18c>)
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f013 fb8c 	bl	80145f4 <siprintf>
		  printf("%s\r\n", str);
 8000edc:	463b      	mov	r3, r7
 8000ede:	4619      	mov	r1, r3
 8000ee0:	480a      	ldr	r0, [pc, #40]	; (8000f0c <main+0x184>)
 8000ee2:	f013 fb2f 	bl	8014544 <iprintf>
	  if(buttonFlag == 1)
 8000ee6:	e7a4      	b.n	8000e32 <main+0xaa>
 8000ee8:	200002f0 	.word	0x200002f0
 8000eec:	20000344 	.word	0x20000344
 8000ef0:	20000094 	.word	0x20000094
 8000ef4:	200002d4 	.word	0x200002d4
 8000ef8:	2000033c 	.word	0x2000033c
 8000efc:	200002ec 	.word	0x200002ec
 8000f00:	20000095 	.word	0x20000095
 8000f04:	20000320 	.word	0x20000320
 8000f08:	080158e4 	.word	0x080158e4
 8000f0c:	080158f4 	.word	0x080158f4
 8000f10:	20000318 	.word	0x20000318
 8000f14:	080158fc 	.word	0x080158fc

08000f18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b094      	sub	sp, #80	; 0x50
 8000f1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f1e:	f107 0320 	add.w	r3, r7, #32
 8000f22:	2230      	movs	r2, #48	; 0x30
 8000f24:	2100      	movs	r1, #0
 8000f26:	4618      	mov	r0, r3
 8000f28:	f013 fb04 	bl	8014534 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f2c:	f107 030c 	add.w	r3, r7, #12
 8000f30:	2200      	movs	r2, #0
 8000f32:	601a      	str	r2, [r3, #0]
 8000f34:	605a      	str	r2, [r3, #4]
 8000f36:	609a      	str	r2, [r3, #8]
 8000f38:	60da      	str	r2, [r3, #12]
 8000f3a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	60bb      	str	r3, [r7, #8]
 8000f40:	4b2b      	ldr	r3, [pc, #172]	; (8000ff0 <SystemClock_Config+0xd8>)
 8000f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f44:	4a2a      	ldr	r2, [pc, #168]	; (8000ff0 <SystemClock_Config+0xd8>)
 8000f46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f4a:	6413      	str	r3, [r2, #64]	; 0x40
 8000f4c:	4b28      	ldr	r3, [pc, #160]	; (8000ff0 <SystemClock_Config+0xd8>)
 8000f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f54:	60bb      	str	r3, [r7, #8]
 8000f56:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f58:	2300      	movs	r3, #0
 8000f5a:	607b      	str	r3, [r7, #4]
 8000f5c:	4b25      	ldr	r3, [pc, #148]	; (8000ff4 <SystemClock_Config+0xdc>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4a24      	ldr	r2, [pc, #144]	; (8000ff4 <SystemClock_Config+0xdc>)
 8000f62:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f66:	6013      	str	r3, [r2, #0]
 8000f68:	4b22      	ldr	r3, [pc, #136]	; (8000ff4 <SystemClock_Config+0xdc>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f70:	607b      	str	r3, [r7, #4]
 8000f72:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f74:	2301      	movs	r3, #1
 8000f76:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f78:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f7c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f7e:	2302      	movs	r3, #2
 8000f80:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f82:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f86:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000f88:	2304      	movs	r3, #4
 8000f8a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000f8c:	23b4      	movs	r3, #180	; 0xb4
 8000f8e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f90:	2302      	movs	r3, #2
 8000f92:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000f94:	2308      	movs	r3, #8
 8000f96:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f98:	f107 0320 	add.w	r3, r7, #32
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f004 fbf1 	bl	8005784 <HAL_RCC_OscConfig>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d001      	beq.n	8000fac <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000fa8:	f000 f87a 	bl	80010a0 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000fac:	f004 fb9a 	bl	80056e4 <HAL_PWREx_EnableOverDrive>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d001      	beq.n	8000fba <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000fb6:	f000 f873 	bl	80010a0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fba:	230f      	movs	r3, #15
 8000fbc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fbe:	2302      	movs	r3, #2
 8000fc0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000fc6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000fca:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000fcc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fd0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000fd2:	f107 030c 	add.w	r3, r7, #12
 8000fd6:	2105      	movs	r1, #5
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f004 fe4b 	bl	8005c74 <HAL_RCC_ClockConfig>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d001      	beq.n	8000fe8 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000fe4:	f000 f85c 	bl	80010a0 <Error_Handler>
  }
}
 8000fe8:	bf00      	nop
 8000fea:	3750      	adds	r7, #80	; 0x50
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	40023800 	.word	0x40023800
 8000ff4:	40007000 	.word	0x40007000

08000ff8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	4603      	mov	r3, r0
 8001000:	80fb      	strh	r3, [r7, #6]
	static uint32_t temp;
	if(GPIO_Pin == GPIO_PIN_10)	// PIN_3 Pressed
 8001002:	88fb      	ldrh	r3, [r7, #6]
 8001004:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001008:	d11c      	bne.n	8001044 <HAL_GPIO_EXTI_Callback+0x4c>
	{
		if(HAL_GetTick() - temp > 100){
 800100a:	f001 f849 	bl	80020a0 <HAL_GetTick>
 800100e:	4602      	mov	r2, r0
 8001010:	4b0e      	ldr	r3, [pc, #56]	; (800104c <HAL_GPIO_EXTI_Callback+0x54>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	1ad3      	subs	r3, r2, r3
 8001016:	2b64      	cmp	r3, #100	; 0x64
 8001018:	d906      	bls.n	8001028 <HAL_GPIO_EXTI_Callback+0x30>
			printf("%s\r\n", "PIN_3 Pressed");
 800101a:	490d      	ldr	r1, [pc, #52]	; (8001050 <HAL_GPIO_EXTI_Callback+0x58>)
 800101c:	480d      	ldr	r0, [pc, #52]	; (8001054 <HAL_GPIO_EXTI_Callback+0x5c>)
 800101e:	f013 fa91 	bl	8014544 <iprintf>
			buttonFlag = 1;
 8001022:	4b0d      	ldr	r3, [pc, #52]	; (8001058 <HAL_GPIO_EXTI_Callback+0x60>)
 8001024:	2201      	movs	r2, #1
 8001026:	701a      	strb	r2, [r3, #0]
			//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
		}
		//while(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_3) == GPIO_PIN_RESET);
		while(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_10) == GPIO_PIN_RESET){
 8001028:	bf00      	nop
 800102a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800102e:	480b      	ldr	r0, [pc, #44]	; (800105c <HAL_GPIO_EXTI_Callback+0x64>)
 8001030:	f004 f94e 	bl	80052d0 <HAL_GPIO_ReadPin>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d0f7      	beq.n	800102a <HAL_GPIO_EXTI_Callback+0x32>
			//printf("%s\r\n", "wait for reset");
		}	// button -> 0
		temp = HAL_GetTick();	// check last time
 800103a:	f001 f831 	bl	80020a0 <HAL_GetTick>
 800103e:	4603      	mov	r3, r0
 8001040:	4a02      	ldr	r2, [pc, #8]	; (800104c <HAL_GPIO_EXTI_Callback+0x54>)
 8001042:	6013      	str	r3, [r2, #0]
	}

}
 8001044:	bf00      	nop
 8001046:	3708      	adds	r7, #8
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	20000098 	.word	0x20000098
 8001050:	0801590c 	.word	0x0801590c
 8001054:	080158f4 	.word	0x080158f4
 8001058:	20000094 	.word	0x20000094
 800105c:	40020c00 	.word	0x40020c00

08001060 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
	if(hcan->Instance == CAN1)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a07      	ldr	r2, [pc, #28]	; (800108c <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d108      	bne.n	8001084 <HAL_CAN_RxFifo0MsgPendingCallback+0x24>
	{
		HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &canRxHeader, &can1Rx0Data[0]);
 8001072:	4b07      	ldr	r3, [pc, #28]	; (8001090 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8001074:	4a07      	ldr	r2, [pc, #28]	; (8001094 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8001076:	2100      	movs	r1, #0
 8001078:	4807      	ldr	r0, [pc, #28]	; (8001098 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 800107a:	f001 fde3 	bl	8002c44 <HAL_CAN_GetRxMessage>
		can1_rx0_flag = 1;
 800107e:	4b07      	ldr	r3, [pc, #28]	; (800109c <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 8001080:	2201      	movs	r2, #1
 8001082:	701a      	strb	r2, [r3, #0]
	}
}
 8001084:	bf00      	nop
 8001086:	3708      	adds	r7, #8
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	40006400 	.word	0x40006400
 8001090:	20000318 	.word	0x20000318
 8001094:	20000320 	.word	0x20000320
 8001098:	20000344 	.word	0x20000344
 800109c:	20000095 	.word	0x20000095

080010a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010a4:	b672      	cpsid	i
}
 80010a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010a8:	e7fe      	b.n	80010a8 <Error_Handler+0x8>
	...

080010ac <MX_SDIO_SD_Init>:
DMA_HandleTypeDef hdma_sdio_rx;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80010b0:	4b0c      	ldr	r3, [pc, #48]	; (80010e4 <MX_SDIO_SD_Init+0x38>)
 80010b2:	4a0d      	ldr	r2, [pc, #52]	; (80010e8 <MX_SDIO_SD_Init+0x3c>)
 80010b4:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80010b6:	4b0b      	ldr	r3, [pc, #44]	; (80010e4 <MX_SDIO_SD_Init+0x38>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80010bc:	4b09      	ldr	r3, [pc, #36]	; (80010e4 <MX_SDIO_SD_Init+0x38>)
 80010be:	2200      	movs	r2, #0
 80010c0:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80010c2:	4b08      	ldr	r3, [pc, #32]	; (80010e4 <MX_SDIO_SD_Init+0x38>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80010c8:	4b06      	ldr	r3, [pc, #24]	; (80010e4 <MX_SDIO_SD_Init+0x38>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80010ce:	4b05      	ldr	r3, [pc, #20]	; (80010e4 <MX_SDIO_SD_Init+0x38>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 80010d4:	4b03      	ldr	r3, [pc, #12]	; (80010e4 <MX_SDIO_SD_Init+0x38>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 80010da:	bf00      	nop
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr
 80010e4:	200004e8 	.word	0x200004e8
 80010e8:	40012c00 	.word	0x40012c00

080010ec <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b08a      	sub	sp, #40	; 0x28
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f4:	f107 0314 	add.w	r3, r7, #20
 80010f8:	2200      	movs	r2, #0
 80010fa:	601a      	str	r2, [r3, #0]
 80010fc:	605a      	str	r2, [r3, #4]
 80010fe:	609a      	str	r2, [r3, #8]
 8001100:	60da      	str	r2, [r3, #12]
 8001102:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDIO)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4a68      	ldr	r2, [pc, #416]	; (80012ac <HAL_SD_MspInit+0x1c0>)
 800110a:	4293      	cmp	r3, r2
 800110c:	f040 80c9 	bne.w	80012a2 <HAL_SD_MspInit+0x1b6>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8001110:	2300      	movs	r3, #0
 8001112:	613b      	str	r3, [r7, #16]
 8001114:	4b66      	ldr	r3, [pc, #408]	; (80012b0 <HAL_SD_MspInit+0x1c4>)
 8001116:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001118:	4a65      	ldr	r2, [pc, #404]	; (80012b0 <HAL_SD_MspInit+0x1c4>)
 800111a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800111e:	6453      	str	r3, [r2, #68]	; 0x44
 8001120:	4b63      	ldr	r3, [pc, #396]	; (80012b0 <HAL_SD_MspInit+0x1c4>)
 8001122:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001124:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001128:	613b      	str	r3, [r7, #16]
 800112a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800112c:	2300      	movs	r3, #0
 800112e:	60fb      	str	r3, [r7, #12]
 8001130:	4b5f      	ldr	r3, [pc, #380]	; (80012b0 <HAL_SD_MspInit+0x1c4>)
 8001132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001134:	4a5e      	ldr	r2, [pc, #376]	; (80012b0 <HAL_SD_MspInit+0x1c4>)
 8001136:	f043 0304 	orr.w	r3, r3, #4
 800113a:	6313      	str	r3, [r2, #48]	; 0x30
 800113c:	4b5c      	ldr	r3, [pc, #368]	; (80012b0 <HAL_SD_MspInit+0x1c4>)
 800113e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001140:	f003 0304 	and.w	r3, r3, #4
 8001144:	60fb      	str	r3, [r7, #12]
 8001146:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001148:	2300      	movs	r3, #0
 800114a:	60bb      	str	r3, [r7, #8]
 800114c:	4b58      	ldr	r3, [pc, #352]	; (80012b0 <HAL_SD_MspInit+0x1c4>)
 800114e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001150:	4a57      	ldr	r2, [pc, #348]	; (80012b0 <HAL_SD_MspInit+0x1c4>)
 8001152:	f043 0308 	orr.w	r3, r3, #8
 8001156:	6313      	str	r3, [r2, #48]	; 0x30
 8001158:	4b55      	ldr	r3, [pc, #340]	; (80012b0 <HAL_SD_MspInit+0x1c4>)
 800115a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115c:	f003 0308 	and.w	r3, r3, #8
 8001160:	60bb      	str	r3, [r7, #8]
 8001162:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001164:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001168:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800116a:	2302      	movs	r3, #2
 800116c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116e:	2300      	movs	r3, #0
 8001170:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001172:	2303      	movs	r3, #3
 8001174:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001176:	230c      	movs	r3, #12
 8001178:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800117a:	f107 0314 	add.w	r3, r7, #20
 800117e:	4619      	mov	r1, r3
 8001180:	484c      	ldr	r0, [pc, #304]	; (80012b4 <HAL_SD_MspInit+0x1c8>)
 8001182:	f003 fef9 	bl	8004f78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001186:	2304      	movs	r3, #4
 8001188:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800118a:	2302      	movs	r3, #2
 800118c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118e:	2300      	movs	r3, #0
 8001190:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001192:	2303      	movs	r3, #3
 8001194:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001196:	230c      	movs	r3, #12
 8001198:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800119a:	f107 0314 	add.w	r3, r7, #20
 800119e:	4619      	mov	r1, r3
 80011a0:	4845      	ldr	r0, [pc, #276]	; (80012b8 <HAL_SD_MspInit+0x1cc>)
 80011a2:	f003 fee9 	bl	8004f78 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream3;
 80011a6:	4b45      	ldr	r3, [pc, #276]	; (80012bc <HAL_SD_MspInit+0x1d0>)
 80011a8:	4a45      	ldr	r2, [pc, #276]	; (80012c0 <HAL_SD_MspInit+0x1d4>)
 80011aa:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 80011ac:	4b43      	ldr	r3, [pc, #268]	; (80012bc <HAL_SD_MspInit+0x1d0>)
 80011ae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80011b2:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80011b4:	4b41      	ldr	r3, [pc, #260]	; (80012bc <HAL_SD_MspInit+0x1d0>)
 80011b6:	2240      	movs	r2, #64	; 0x40
 80011b8:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80011ba:	4b40      	ldr	r3, [pc, #256]	; (80012bc <HAL_SD_MspInit+0x1d0>)
 80011bc:	2200      	movs	r2, #0
 80011be:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 80011c0:	4b3e      	ldr	r3, [pc, #248]	; (80012bc <HAL_SD_MspInit+0x1d0>)
 80011c2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011c6:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80011c8:	4b3c      	ldr	r3, [pc, #240]	; (80012bc <HAL_SD_MspInit+0x1d0>)
 80011ca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80011ce:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80011d0:	4b3a      	ldr	r3, [pc, #232]	; (80012bc <HAL_SD_MspInit+0x1d0>)
 80011d2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80011d6:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 80011d8:	4b38      	ldr	r3, [pc, #224]	; (80012bc <HAL_SD_MspInit+0x1d0>)
 80011da:	2220      	movs	r2, #32
 80011dc:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 80011de:	4b37      	ldr	r3, [pc, #220]	; (80012bc <HAL_SD_MspInit+0x1d0>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80011e4:	4b35      	ldr	r3, [pc, #212]	; (80012bc <HAL_SD_MspInit+0x1d0>)
 80011e6:	2204      	movs	r2, #4
 80011e8:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80011ea:	4b34      	ldr	r3, [pc, #208]	; (80012bc <HAL_SD_MspInit+0x1d0>)
 80011ec:	2203      	movs	r2, #3
 80011ee:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 80011f0:	4b32      	ldr	r3, [pc, #200]	; (80012bc <HAL_SD_MspInit+0x1d0>)
 80011f2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80011f6:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 80011f8:	4b30      	ldr	r3, [pc, #192]	; (80012bc <HAL_SD_MspInit+0x1d0>)
 80011fa:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80011fe:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8001200:	482e      	ldr	r0, [pc, #184]	; (80012bc <HAL_SD_MspInit+0x1d0>)
 8001202:	f002 fa09 	bl	8003618 <HAL_DMA_Init>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <HAL_SD_MspInit+0x124>
    {
      Error_Handler();
 800120c:	f7ff ff48 	bl	80010a0 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdio_tx);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	4a2a      	ldr	r2, [pc, #168]	; (80012bc <HAL_SD_MspInit+0x1d0>)
 8001214:	63da      	str	r2, [r3, #60]	; 0x3c
 8001216:	4a29      	ldr	r2, [pc, #164]	; (80012bc <HAL_SD_MspInit+0x1d0>)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream6;
 800121c:	4b29      	ldr	r3, [pc, #164]	; (80012c4 <HAL_SD_MspInit+0x1d8>)
 800121e:	4a2a      	ldr	r2, [pc, #168]	; (80012c8 <HAL_SD_MspInit+0x1dc>)
 8001220:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8001222:	4b28      	ldr	r3, [pc, #160]	; (80012c4 <HAL_SD_MspInit+0x1d8>)
 8001224:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001228:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800122a:	4b26      	ldr	r3, [pc, #152]	; (80012c4 <HAL_SD_MspInit+0x1d8>)
 800122c:	2200      	movs	r2, #0
 800122e:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001230:	4b24      	ldr	r3, [pc, #144]	; (80012c4 <HAL_SD_MspInit+0x1d8>)
 8001232:	2200      	movs	r2, #0
 8001234:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001236:	4b23      	ldr	r3, [pc, #140]	; (80012c4 <HAL_SD_MspInit+0x1d8>)
 8001238:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800123c:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800123e:	4b21      	ldr	r3, [pc, #132]	; (80012c4 <HAL_SD_MspInit+0x1d8>)
 8001240:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001244:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001246:	4b1f      	ldr	r3, [pc, #124]	; (80012c4 <HAL_SD_MspInit+0x1d8>)
 8001248:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800124c:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 800124e:	4b1d      	ldr	r3, [pc, #116]	; (80012c4 <HAL_SD_MspInit+0x1d8>)
 8001250:	2220      	movs	r2, #32
 8001252:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001254:	4b1b      	ldr	r3, [pc, #108]	; (80012c4 <HAL_SD_MspInit+0x1d8>)
 8001256:	2200      	movs	r2, #0
 8001258:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800125a:	4b1a      	ldr	r3, [pc, #104]	; (80012c4 <HAL_SD_MspInit+0x1d8>)
 800125c:	2204      	movs	r2, #4
 800125e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001260:	4b18      	ldr	r3, [pc, #96]	; (80012c4 <HAL_SD_MspInit+0x1d8>)
 8001262:	2203      	movs	r2, #3
 8001264:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8001266:	4b17      	ldr	r3, [pc, #92]	; (80012c4 <HAL_SD_MspInit+0x1d8>)
 8001268:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800126c:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 800126e:	4b15      	ldr	r3, [pc, #84]	; (80012c4 <HAL_SD_MspInit+0x1d8>)
 8001270:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001274:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8001276:	4813      	ldr	r0, [pc, #76]	; (80012c4 <HAL_SD_MspInit+0x1d8>)
 8001278:	f002 f9ce 	bl	8003618 <HAL_DMA_Init>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <HAL_SD_MspInit+0x19a>
    {
      Error_Handler();
 8001282:	f7ff ff0d 	bl	80010a0 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdio_rx);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	4a0e      	ldr	r2, [pc, #56]	; (80012c4 <HAL_SD_MspInit+0x1d8>)
 800128a:	641a      	str	r2, [r3, #64]	; 0x40
 800128c:	4a0d      	ldr	r2, [pc, #52]	; (80012c4 <HAL_SD_MspInit+0x1d8>)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8001292:	2200      	movs	r2, #0
 8001294:	2100      	movs	r1, #0
 8001296:	2031      	movs	r0, #49	; 0x31
 8001298:	f002 f917 	bl	80034ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 800129c:	2031      	movs	r0, #49	; 0x31
 800129e:	f002 f930 	bl	8003502 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 80012a2:	bf00      	nop
 80012a4:	3728      	adds	r7, #40	; 0x28
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	40012c00 	.word	0x40012c00
 80012b0:	40023800 	.word	0x40023800
 80012b4:	40020800 	.word	0x40020800
 80012b8:	40020c00 	.word	0x40020c00
 80012bc:	20000488 	.word	0x20000488
 80012c0:	40026458 	.word	0x40026458
 80012c4:	20000428 	.word	0x20000428
 80012c8:	400264a0 	.word	0x400264a0

080012cc <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80012d0:	4b17      	ldr	r3, [pc, #92]	; (8001330 <MX_SPI2_Init+0x64>)
 80012d2:	4a18      	ldr	r2, [pc, #96]	; (8001334 <MX_SPI2_Init+0x68>)
 80012d4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80012d6:	4b16      	ldr	r3, [pc, #88]	; (8001330 <MX_SPI2_Init+0x64>)
 80012d8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80012dc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80012de:	4b14      	ldr	r3, [pc, #80]	; (8001330 <MX_SPI2_Init+0x64>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80012e4:	4b12      	ldr	r3, [pc, #72]	; (8001330 <MX_SPI2_Init+0x64>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80012ea:	4b11      	ldr	r3, [pc, #68]	; (8001330 <MX_SPI2_Init+0x64>)
 80012ec:	2202      	movs	r2, #2
 80012ee:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 80012f0:	4b0f      	ldr	r3, [pc, #60]	; (8001330 <MX_SPI2_Init+0x64>)
 80012f2:	2201      	movs	r2, #1
 80012f4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80012f6:	4b0e      	ldr	r3, [pc, #56]	; (8001330 <MX_SPI2_Init+0x64>)
 80012f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012fc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80012fe:	4b0c      	ldr	r3, [pc, #48]	; (8001330 <MX_SPI2_Init+0x64>)
 8001300:	2210      	movs	r2, #16
 8001302:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001304:	4b0a      	ldr	r3, [pc, #40]	; (8001330 <MX_SPI2_Init+0x64>)
 8001306:	2200      	movs	r2, #0
 8001308:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800130a:	4b09      	ldr	r3, [pc, #36]	; (8001330 <MX_SPI2_Init+0x64>)
 800130c:	2200      	movs	r2, #0
 800130e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001310:	4b07      	ldr	r3, [pc, #28]	; (8001330 <MX_SPI2_Init+0x64>)
 8001312:	2200      	movs	r2, #0
 8001314:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001316:	4b06      	ldr	r3, [pc, #24]	; (8001330 <MX_SPI2_Init+0x64>)
 8001318:	220a      	movs	r2, #10
 800131a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800131c:	4804      	ldr	r0, [pc, #16]	; (8001330 <MX_SPI2_Init+0x64>)
 800131e:	f006 f9d4 	bl	80076ca <HAL_SPI_Init>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d001      	beq.n	800132c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001328:	f7ff feba 	bl	80010a0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800132c:	bf00      	nop
 800132e:	bd80      	pop	{r7, pc}
 8001330:	2000056c 	.word	0x2000056c
 8001334:	40003800 	.word	0x40003800

08001338 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b08a      	sub	sp, #40	; 0x28
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001340:	f107 0314 	add.w	r3, r7, #20
 8001344:	2200      	movs	r2, #0
 8001346:	601a      	str	r2, [r3, #0]
 8001348:	605a      	str	r2, [r3, #4]
 800134a:	609a      	str	r2, [r3, #8]
 800134c:	60da      	str	r2, [r3, #12]
 800134e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a19      	ldr	r2, [pc, #100]	; (80013bc <HAL_SPI_MspInit+0x84>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d12c      	bne.n	80013b4 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800135a:	2300      	movs	r3, #0
 800135c:	613b      	str	r3, [r7, #16]
 800135e:	4b18      	ldr	r3, [pc, #96]	; (80013c0 <HAL_SPI_MspInit+0x88>)
 8001360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001362:	4a17      	ldr	r2, [pc, #92]	; (80013c0 <HAL_SPI_MspInit+0x88>)
 8001364:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001368:	6413      	str	r3, [r2, #64]	; 0x40
 800136a:	4b15      	ldr	r3, [pc, #84]	; (80013c0 <HAL_SPI_MspInit+0x88>)
 800136c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001372:	613b      	str	r3, [r7, #16]
 8001374:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001376:	2300      	movs	r3, #0
 8001378:	60fb      	str	r3, [r7, #12]
 800137a:	4b11      	ldr	r3, [pc, #68]	; (80013c0 <HAL_SPI_MspInit+0x88>)
 800137c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137e:	4a10      	ldr	r2, [pc, #64]	; (80013c0 <HAL_SPI_MspInit+0x88>)
 8001380:	f043 0302 	orr.w	r3, r3, #2
 8001384:	6313      	str	r3, [r2, #48]	; 0x30
 8001386:	4b0e      	ldr	r3, [pc, #56]	; (80013c0 <HAL_SPI_MspInit+0x88>)
 8001388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138a:	f003 0302 	and.w	r3, r3, #2
 800138e:	60fb      	str	r3, [r7, #12]
 8001390:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB10     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 8001392:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 8001396:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001398:	2302      	movs	r3, #2
 800139a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139c:	2300      	movs	r3, #0
 800139e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013a0:	2303      	movs	r3, #3
 80013a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80013a4:	2305      	movs	r3, #5
 80013a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013a8:	f107 0314 	add.w	r3, r7, #20
 80013ac:	4619      	mov	r1, r3
 80013ae:	4805      	ldr	r0, [pc, #20]	; (80013c4 <HAL_SPI_MspInit+0x8c>)
 80013b0:	f003 fde2 	bl	8004f78 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80013b4:	bf00      	nop
 80013b6:	3728      	adds	r7, #40	; 0x28
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	40003800 	.word	0x40003800
 80013c0:	40023800 	.word	0x40023800
 80013c4:	40020400 	.word	0x40020400

080013c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b083      	sub	sp, #12
 80013cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ce:	2300      	movs	r3, #0
 80013d0:	607b      	str	r3, [r7, #4]
 80013d2:	4b10      	ldr	r3, [pc, #64]	; (8001414 <HAL_MspInit+0x4c>)
 80013d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013d6:	4a0f      	ldr	r2, [pc, #60]	; (8001414 <HAL_MspInit+0x4c>)
 80013d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013dc:	6453      	str	r3, [r2, #68]	; 0x44
 80013de:	4b0d      	ldr	r3, [pc, #52]	; (8001414 <HAL_MspInit+0x4c>)
 80013e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013e6:	607b      	str	r3, [r7, #4]
 80013e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013ea:	2300      	movs	r3, #0
 80013ec:	603b      	str	r3, [r7, #0]
 80013ee:	4b09      	ldr	r3, [pc, #36]	; (8001414 <HAL_MspInit+0x4c>)
 80013f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f2:	4a08      	ldr	r2, [pc, #32]	; (8001414 <HAL_MspInit+0x4c>)
 80013f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013f8:	6413      	str	r3, [r2, #64]	; 0x40
 80013fa:	4b06      	ldr	r3, [pc, #24]	; (8001414 <HAL_MspInit+0x4c>)
 80013fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001402:	603b      	str	r3, [r7, #0]
 8001404:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001406:	bf00      	nop
 8001408:	370c      	adds	r7, #12
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr
 8001412:	bf00      	nop
 8001414:	40023800 	.word	0x40023800

08001418 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800141c:	e7fe      	b.n	800141c <NMI_Handler+0x4>

0800141e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800141e:	b480      	push	{r7}
 8001420:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001422:	e7fe      	b.n	8001422 <HardFault_Handler+0x4>

08001424 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001428:	e7fe      	b.n	8001428 <MemManage_Handler+0x4>

0800142a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800142a:	b480      	push	{r7}
 800142c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800142e:	e7fe      	b.n	800142e <BusFault_Handler+0x4>

08001430 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001434:	e7fe      	b.n	8001434 <UsageFault_Handler+0x4>

08001436 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001436:	b480      	push	{r7}
 8001438:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800143a:	bf00      	nop
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr

08001444 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001448:	bf00      	nop
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr

08001452 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001452:	b480      	push	{r7}
 8001454:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001456:	bf00      	nop
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr

08001460 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001464:	f000 fe08 	bl	8002078 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001468:	bf00      	nop
 800146a:	bd80      	pop	{r7, pc}

0800146c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001470:	4802      	ldr	r0, [pc, #8]	; (800147c <CAN1_RX0_IRQHandler+0x10>)
 8001472:	f001 fd1f 	bl	8002eb4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001476:	bf00      	nop
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	20000344 	.word	0x20000344

08001480 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001484:	4802      	ldr	r0, [pc, #8]	; (8001490 <TIM4_IRQHandler+0x10>)
 8001486:	f006 fa51 	bl	800792c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800148a:	bf00      	nop
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	200005c4 	.word	0x200005c4

08001494 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001498:	4802      	ldr	r0, [pc, #8]	; (80014a4 <USART3_IRQHandler+0x10>)
 800149a:	f007 f965 	bl	8008768 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800149e:	bf00      	nop
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	20000774 	.word	0x20000774

080014a8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80014ac:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80014b0:	f003 ff40 	bl	8005334 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80014b4:	bf00      	nop
 80014b6:	bd80      	pop	{r7, pc}

080014b8 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 80014bc:	4802      	ldr	r0, [pc, #8]	; (80014c8 <SDIO_IRQHandler+0x10>)
 80014be:	f005 f84b 	bl	8006558 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 80014c2:	bf00      	nop
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	200004e8 	.word	0x200004e8

080014cc <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80014d0:	4802      	ldr	r0, [pc, #8]	; (80014dc <TIM7_IRQHandler+0x10>)
 80014d2:	f006 fa2b 	bl	800792c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80014d6:	bf00      	nop
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	2000072c 	.word	0x2000072c

080014e0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80014e4:	4802      	ldr	r0, [pc, #8]	; (80014f0 <DMA2_Stream0_IRQHandler+0x10>)
 80014e6:	f002 fa2f 	bl	8003948 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80014ea:	bf00      	nop
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	20000274 	.word	0x20000274

080014f4 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 80014f8:	4802      	ldr	r0, [pc, #8]	; (8001504 <DMA2_Stream3_IRQHandler+0x10>)
 80014fa:	f002 fa25 	bl	8003948 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80014fe:	bf00      	nop
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	20000488 	.word	0x20000488

08001508 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 800150c:	4802      	ldr	r0, [pc, #8]	; (8001518 <DMA2_Stream6_IRQHandler+0x10>)
 800150e:	f002 fa1b 	bl	8003948 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8001512:	bf00      	nop
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	20000428 	.word	0x20000428

0800151c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
	return 1;
 8001520:	2301      	movs	r3, #1
}
 8001522:	4618      	mov	r0, r3
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr

0800152c <_kill>:

int _kill(int pid, int sig)
{
 800152c:	b480      	push	{r7}
 800152e:	b083      	sub	sp, #12
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
 8001534:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001536:	4b05      	ldr	r3, [pc, #20]	; (800154c <_kill+0x20>)
 8001538:	2216      	movs	r2, #22
 800153a:	601a      	str	r2, [r3, #0]
	return -1;
 800153c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001540:	4618      	mov	r0, r3
 8001542:	370c      	adds	r7, #12
 8001544:	46bd      	mov	sp, r7
 8001546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154a:	4770      	bx	lr
 800154c:	200072bc 	.word	0x200072bc

08001550 <_exit>:

void _exit (int status)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001558:	f04f 31ff 	mov.w	r1, #4294967295
 800155c:	6878      	ldr	r0, [r7, #4]
 800155e:	f7ff ffe5 	bl	800152c <_kill>
	while (1) {}		/* Make sure we hang here */
 8001562:	e7fe      	b.n	8001562 <_exit+0x12>

08001564 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b086      	sub	sp, #24
 8001568:	af00      	add	r7, sp, #0
 800156a:	60f8      	str	r0, [r7, #12]
 800156c:	60b9      	str	r1, [r7, #8]
 800156e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001570:	2300      	movs	r3, #0
 8001572:	617b      	str	r3, [r7, #20]
 8001574:	e00a      	b.n	800158c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001576:	f3af 8000 	nop.w
 800157a:	4601      	mov	r1, r0
 800157c:	68bb      	ldr	r3, [r7, #8]
 800157e:	1c5a      	adds	r2, r3, #1
 8001580:	60ba      	str	r2, [r7, #8]
 8001582:	b2ca      	uxtb	r2, r1
 8001584:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	3301      	adds	r3, #1
 800158a:	617b      	str	r3, [r7, #20]
 800158c:	697a      	ldr	r2, [r7, #20]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	429a      	cmp	r2, r3
 8001592:	dbf0      	blt.n	8001576 <_read+0x12>
	}

return len;
 8001594:	687b      	ldr	r3, [r7, #4]
}
 8001596:	4618      	mov	r0, r3
 8001598:	3718      	adds	r7, #24
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}

0800159e <_close>:
	}
	return len;
}

int _close(int file)
{
 800159e:	b480      	push	{r7}
 80015a0:	b083      	sub	sp, #12
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	6078      	str	r0, [r7, #4]
	return -1;
 80015a6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	370c      	adds	r7, #12
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr

080015b6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015b6:	b480      	push	{r7}
 80015b8:	b083      	sub	sp, #12
 80015ba:	af00      	add	r7, sp, #0
 80015bc:	6078      	str	r0, [r7, #4]
 80015be:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015c6:	605a      	str	r2, [r3, #4]
	return 0;
 80015c8:	2300      	movs	r3, #0
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	370c      	adds	r7, #12
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr

080015d6 <_isatty>:

int _isatty(int file)
{
 80015d6:	b480      	push	{r7}
 80015d8:	b083      	sub	sp, #12
 80015da:	af00      	add	r7, sp, #0
 80015dc:	6078      	str	r0, [r7, #4]
	return 1;
 80015de:	2301      	movs	r3, #1
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	370c      	adds	r7, #12
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr

080015ec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b085      	sub	sp, #20
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	60f8      	str	r0, [r7, #12]
 80015f4:	60b9      	str	r1, [r7, #8]
 80015f6:	607a      	str	r2, [r7, #4]
	return 0;
 80015f8:	2300      	movs	r3, #0
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	3714      	adds	r7, #20
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr
	...

08001608 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001608:	b480      	push	{r7}
 800160a:	b087      	sub	sp, #28
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001610:	4a14      	ldr	r2, [pc, #80]	; (8001664 <_sbrk+0x5c>)
 8001612:	4b15      	ldr	r3, [pc, #84]	; (8001668 <_sbrk+0x60>)
 8001614:	1ad3      	subs	r3, r2, r3
 8001616:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800161c:	4b13      	ldr	r3, [pc, #76]	; (800166c <_sbrk+0x64>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d102      	bne.n	800162a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001624:	4b11      	ldr	r3, [pc, #68]	; (800166c <_sbrk+0x64>)
 8001626:	4a12      	ldr	r2, [pc, #72]	; (8001670 <_sbrk+0x68>)
 8001628:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800162a:	4b10      	ldr	r3, [pc, #64]	; (800166c <_sbrk+0x64>)
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	4413      	add	r3, r2
 8001632:	693a      	ldr	r2, [r7, #16]
 8001634:	429a      	cmp	r2, r3
 8001636:	d205      	bcs.n	8001644 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001638:	4b0e      	ldr	r3, [pc, #56]	; (8001674 <_sbrk+0x6c>)
 800163a:	220c      	movs	r2, #12
 800163c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800163e:	f04f 33ff 	mov.w	r3, #4294967295
 8001642:	e009      	b.n	8001658 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001644:	4b09      	ldr	r3, [pc, #36]	; (800166c <_sbrk+0x64>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800164a:	4b08      	ldr	r3, [pc, #32]	; (800166c <_sbrk+0x64>)
 800164c:	681a      	ldr	r2, [r3, #0]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	4413      	add	r3, r2
 8001652:	4a06      	ldr	r2, [pc, #24]	; (800166c <_sbrk+0x64>)
 8001654:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001656:	68fb      	ldr	r3, [r7, #12]
}
 8001658:	4618      	mov	r0, r3
 800165a:	371c      	adds	r7, #28
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr
 8001664:	20030000 	.word	0x20030000
 8001668:	00000400 	.word	0x00000400
 800166c:	2000009c 	.word	0x2000009c
 8001670:	200072d0 	.word	0x200072d0
 8001674:	200072bc 	.word	0x200072bc

08001678 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800167c:	4b06      	ldr	r3, [pc, #24]	; (8001698 <SystemInit+0x20>)
 800167e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001682:	4a05      	ldr	r2, [pc, #20]	; (8001698 <SystemInit+0x20>)
 8001684:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001688:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800168c:	bf00      	nop
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
 8001696:	bf00      	nop
 8001698:	e000ed00 	.word	0xe000ed00

0800169c <MX_TIM2_Init>:
TIM_HandleTypeDef htim7;
TIM_HandleTypeDef htim10;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b08e      	sub	sp, #56	; 0x38
 80016a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016a6:	2200      	movs	r2, #0
 80016a8:	601a      	str	r2, [r3, #0]
 80016aa:	605a      	str	r2, [r3, #4]
 80016ac:	609a      	str	r2, [r3, #8]
 80016ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016b0:	f107 0320 	add.w	r3, r7, #32
 80016b4:	2200      	movs	r2, #0
 80016b6:	601a      	str	r2, [r3, #0]
 80016b8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016ba:	1d3b      	adds	r3, r7, #4
 80016bc:	2200      	movs	r2, #0
 80016be:	601a      	str	r2, [r3, #0]
 80016c0:	605a      	str	r2, [r3, #4]
 80016c2:	609a      	str	r2, [r3, #8]
 80016c4:	60da      	str	r2, [r3, #12]
 80016c6:	611a      	str	r2, [r3, #16]
 80016c8:	615a      	str	r2, [r3, #20]
 80016ca:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80016cc:	4b2d      	ldr	r3, [pc, #180]	; (8001784 <MX_TIM2_Init+0xe8>)
 80016ce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016d2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 180-1;
 80016d4:	4b2b      	ldr	r3, [pc, #172]	; (8001784 <MX_TIM2_Init+0xe8>)
 80016d6:	22b3      	movs	r2, #179	; 0xb3
 80016d8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016da:	4b2a      	ldr	r3, [pc, #168]	; (8001784 <MX_TIM2_Init+0xe8>)
 80016dc:	2200      	movs	r2, #0
 80016de:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 80016e0:	4b28      	ldr	r3, [pc, #160]	; (8001784 <MX_TIM2_Init+0xe8>)
 80016e2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80016e6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016e8:	4b26      	ldr	r3, [pc, #152]	; (8001784 <MX_TIM2_Init+0xe8>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016ee:	4b25      	ldr	r3, [pc, #148]	; (8001784 <MX_TIM2_Init+0xe8>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80016f4:	4823      	ldr	r0, [pc, #140]	; (8001784 <MX_TIM2_Init+0xe8>)
 80016f6:	f006 f871 	bl	80077dc <HAL_TIM_Base_Init>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d001      	beq.n	8001704 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001700:	f7ff fcce 	bl	80010a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001704:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001708:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800170a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800170e:	4619      	mov	r1, r3
 8001710:	481c      	ldr	r0, [pc, #112]	; (8001784 <MX_TIM2_Init+0xe8>)
 8001712:	f006 fad5 	bl	8007cc0 <HAL_TIM_ConfigClockSource>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d001      	beq.n	8001720 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800171c:	f7ff fcc0 	bl	80010a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001720:	4818      	ldr	r0, [pc, #96]	; (8001784 <MX_TIM2_Init+0xe8>)
 8001722:	f006 f8aa 	bl	800787a <HAL_TIM_PWM_Init>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d001      	beq.n	8001730 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800172c:	f7ff fcb8 	bl	80010a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001730:	2300      	movs	r3, #0
 8001732:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001734:	2300      	movs	r3, #0
 8001736:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001738:	f107 0320 	add.w	r3, r7, #32
 800173c:	4619      	mov	r1, r3
 800173e:	4811      	ldr	r0, [pc, #68]	; (8001784 <MX_TIM2_Init+0xe8>)
 8001740:	f006 fea2 	bl	8008488 <HAL_TIMEx_MasterConfigSynchronization>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d001      	beq.n	800174e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800174a:	f7ff fca9 	bl	80010a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800174e:	2360      	movs	r3, #96	; 0x60
 8001750:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 8001752:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001756:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001758:	2300      	movs	r3, #0
 800175a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800175c:	2300      	movs	r3, #0
 800175e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001760:	1d3b      	adds	r3, r7, #4
 8001762:	2200      	movs	r2, #0
 8001764:	4619      	mov	r1, r3
 8001766:	4807      	ldr	r0, [pc, #28]	; (8001784 <MX_TIM2_Init+0xe8>)
 8001768:	f006 f9e8 	bl	8007b3c <HAL_TIM_PWM_ConfigChannel>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001772:	f7ff fc95 	bl	80010a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001776:	4803      	ldr	r0, [pc, #12]	; (8001784 <MX_TIM2_Init+0xe8>)
 8001778:	f000 fab2 	bl	8001ce0 <HAL_TIM_MspPostInit>

}
 800177c:	bf00      	nop
 800177e:	3738      	adds	r7, #56	; 0x38
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	200006e4 	.word	0x200006e4

08001788 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b08e      	sub	sp, #56	; 0x38
 800178c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800178e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001792:	2200      	movs	r2, #0
 8001794:	601a      	str	r2, [r3, #0]
 8001796:	605a      	str	r2, [r3, #4]
 8001798:	609a      	str	r2, [r3, #8]
 800179a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800179c:	f107 0320 	add.w	r3, r7, #32
 80017a0:	2200      	movs	r2, #0
 80017a2:	601a      	str	r2, [r3, #0]
 80017a4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017a6:	1d3b      	adds	r3, r7, #4
 80017a8:	2200      	movs	r2, #0
 80017aa:	601a      	str	r2, [r3, #0]
 80017ac:	605a      	str	r2, [r3, #4]
 80017ae:	609a      	str	r2, [r3, #8]
 80017b0:	60da      	str	r2, [r3, #12]
 80017b2:	611a      	str	r2, [r3, #16]
 80017b4:	615a      	str	r2, [r3, #20]
 80017b6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80017b8:	4b2c      	ldr	r3, [pc, #176]	; (800186c <MX_TIM3_Init+0xe4>)
 80017ba:	4a2d      	ldr	r2, [pc, #180]	; (8001870 <MX_TIM3_Init+0xe8>)
 80017bc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9-1;
 80017be:	4b2b      	ldr	r3, [pc, #172]	; (800186c <MX_TIM3_Init+0xe4>)
 80017c0:	2208      	movs	r2, #8
 80017c2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017c4:	4b29      	ldr	r3, [pc, #164]	; (800186c <MX_TIM3_Init+0xe4>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 50000-1;
 80017ca:	4b28      	ldr	r3, [pc, #160]	; (800186c <MX_TIM3_Init+0xe4>)
 80017cc:	f24c 324f 	movw	r2, #49999	; 0xc34f
 80017d0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017d2:	4b26      	ldr	r3, [pc, #152]	; (800186c <MX_TIM3_Init+0xe4>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017d8:	4b24      	ldr	r3, [pc, #144]	; (800186c <MX_TIM3_Init+0xe4>)
 80017da:	2200      	movs	r2, #0
 80017dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80017de:	4823      	ldr	r0, [pc, #140]	; (800186c <MX_TIM3_Init+0xe4>)
 80017e0:	f005 fffc 	bl	80077dc <HAL_TIM_Base_Init>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d001      	beq.n	80017ee <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80017ea:	f7ff fc59 	bl	80010a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017f2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80017f4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017f8:	4619      	mov	r1, r3
 80017fa:	481c      	ldr	r0, [pc, #112]	; (800186c <MX_TIM3_Init+0xe4>)
 80017fc:	f006 fa60 	bl	8007cc0 <HAL_TIM_ConfigClockSource>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d001      	beq.n	800180a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001806:	f7ff fc4b 	bl	80010a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800180a:	4818      	ldr	r0, [pc, #96]	; (800186c <MX_TIM3_Init+0xe4>)
 800180c:	f006 f835 	bl	800787a <HAL_TIM_PWM_Init>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001816:	f7ff fc43 	bl	80010a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800181a:	2300      	movs	r3, #0
 800181c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800181e:	2300      	movs	r3, #0
 8001820:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001822:	f107 0320 	add.w	r3, r7, #32
 8001826:	4619      	mov	r1, r3
 8001828:	4810      	ldr	r0, [pc, #64]	; (800186c <MX_TIM3_Init+0xe4>)
 800182a:	f006 fe2d 	bl	8008488 <HAL_TIMEx_MasterConfigSynchronization>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d001      	beq.n	8001838 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001834:	f7ff fc34 	bl	80010a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001838:	2360      	movs	r3, #96	; 0x60
 800183a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800183c:	2300      	movs	r3, #0
 800183e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001840:	2300      	movs	r3, #0
 8001842:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001844:	2300      	movs	r3, #0
 8001846:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001848:	1d3b      	adds	r3, r7, #4
 800184a:	2200      	movs	r2, #0
 800184c:	4619      	mov	r1, r3
 800184e:	4807      	ldr	r0, [pc, #28]	; (800186c <MX_TIM3_Init+0xe4>)
 8001850:	f006 f974 	bl	8007b3c <HAL_TIM_PWM_ConfigChannel>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d001      	beq.n	800185e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800185a:	f7ff fc21 	bl	80010a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800185e:	4803      	ldr	r0, [pc, #12]	; (800186c <MX_TIM3_Init+0xe4>)
 8001860:	f000 fa3e 	bl	8001ce0 <HAL_TIM_MspPostInit>

}
 8001864:	bf00      	nop
 8001866:	3738      	adds	r7, #56	; 0x38
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	2000069c 	.word	0x2000069c
 8001870:	40000400 	.word	0x40000400

08001874 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b08e      	sub	sp, #56	; 0x38
 8001878:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800187a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800187e:	2200      	movs	r2, #0
 8001880:	601a      	str	r2, [r3, #0]
 8001882:	605a      	str	r2, [r3, #4]
 8001884:	609a      	str	r2, [r3, #8]
 8001886:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001888:	f107 0320 	add.w	r3, r7, #32
 800188c:	2200      	movs	r2, #0
 800188e:	601a      	str	r2, [r3, #0]
 8001890:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001892:	1d3b      	adds	r3, r7, #4
 8001894:	2200      	movs	r2, #0
 8001896:	601a      	str	r2, [r3, #0]
 8001898:	605a      	str	r2, [r3, #4]
 800189a:	609a      	str	r2, [r3, #8]
 800189c:	60da      	str	r2, [r3, #12]
 800189e:	611a      	str	r2, [r3, #16]
 80018a0:	615a      	str	r2, [r3, #20]
 80018a2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80018a4:	4b3b      	ldr	r3, [pc, #236]	; (8001994 <MX_TIM4_Init+0x120>)
 80018a6:	4a3c      	ldr	r2, [pc, #240]	; (8001998 <MX_TIM4_Init+0x124>)
 80018a8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 18-1;
 80018aa:	4b3a      	ldr	r3, [pc, #232]	; (8001994 <MX_TIM4_Init+0x120>)
 80018ac:	2211      	movs	r2, #17
 80018ae:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018b0:	4b38      	ldr	r3, [pc, #224]	; (8001994 <MX_TIM4_Init+0x120>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 50000-1;
 80018b6:	4b37      	ldr	r3, [pc, #220]	; (8001994 <MX_TIM4_Init+0x120>)
 80018b8:	f24c 324f 	movw	r2, #49999	; 0xc34f
 80018bc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018be:	4b35      	ldr	r3, [pc, #212]	; (8001994 <MX_TIM4_Init+0x120>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018c4:	4b33      	ldr	r3, [pc, #204]	; (8001994 <MX_TIM4_Init+0x120>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80018ca:	4832      	ldr	r0, [pc, #200]	; (8001994 <MX_TIM4_Init+0x120>)
 80018cc:	f005 ff86 	bl	80077dc <HAL_TIM_Base_Init>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d001      	beq.n	80018da <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 80018d6:	f7ff fbe3 	bl	80010a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018de:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80018e0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018e4:	4619      	mov	r1, r3
 80018e6:	482b      	ldr	r0, [pc, #172]	; (8001994 <MX_TIM4_Init+0x120>)
 80018e8:	f006 f9ea 	bl	8007cc0 <HAL_TIM_ConfigClockSource>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d001      	beq.n	80018f6 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 80018f2:	f7ff fbd5 	bl	80010a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80018f6:	4827      	ldr	r0, [pc, #156]	; (8001994 <MX_TIM4_Init+0x120>)
 80018f8:	f005 ffbf 	bl	800787a <HAL_TIM_PWM_Init>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d001      	beq.n	8001906 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001902:	f7ff fbcd 	bl	80010a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001906:	2300      	movs	r3, #0
 8001908:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800190a:	2300      	movs	r3, #0
 800190c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800190e:	f107 0320 	add.w	r3, r7, #32
 8001912:	4619      	mov	r1, r3
 8001914:	481f      	ldr	r0, [pc, #124]	; (8001994 <MX_TIM4_Init+0x120>)
 8001916:	f006 fdb7 	bl	8008488 <HAL_TIMEx_MasterConfigSynchronization>
 800191a:	4603      	mov	r3, r0
 800191c:	2b00      	cmp	r3, #0
 800191e:	d001      	beq.n	8001924 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001920:	f7ff fbbe 	bl	80010a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001924:	2360      	movs	r3, #96	; 0x60
 8001926:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 25000-1;
 8001928:	f246 13a7 	movw	r3, #24999	; 0x61a7
 800192c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800192e:	2300      	movs	r3, #0
 8001930:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001932:	2300      	movs	r3, #0
 8001934:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001936:	1d3b      	adds	r3, r7, #4
 8001938:	2200      	movs	r2, #0
 800193a:	4619      	mov	r1, r3
 800193c:	4815      	ldr	r0, [pc, #84]	; (8001994 <MX_TIM4_Init+0x120>)
 800193e:	f006 f8fd 	bl	8007b3c <HAL_TIM_PWM_ConfigChannel>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d001      	beq.n	800194c <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8001948:	f7ff fbaa 	bl	80010a0 <Error_Handler>
  }
  sConfigOC.Pulse = 12500-1;
 800194c:	f243 03d3 	movw	r3, #12499	; 0x30d3
 8001950:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001952:	1d3b      	adds	r3, r7, #4
 8001954:	2204      	movs	r2, #4
 8001956:	4619      	mov	r1, r3
 8001958:	480e      	ldr	r0, [pc, #56]	; (8001994 <MX_TIM4_Init+0x120>)
 800195a:	f006 f8ef 	bl	8007b3c <HAL_TIM_PWM_ConfigChannel>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d001      	beq.n	8001968 <MX_TIM4_Init+0xf4>
  {
    Error_Handler();
 8001964:	f7ff fb9c 	bl	80010a0 <Error_Handler>
  }
  sConfigOC.Pulse = 7250-1;
 8001968:	f641 4351 	movw	r3, #7249	; 0x1c51
 800196c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800196e:	1d3b      	adds	r3, r7, #4
 8001970:	2208      	movs	r2, #8
 8001972:	4619      	mov	r1, r3
 8001974:	4807      	ldr	r0, [pc, #28]	; (8001994 <MX_TIM4_Init+0x120>)
 8001976:	f006 f8e1 	bl	8007b3c <HAL_TIM_PWM_ConfigChannel>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d001      	beq.n	8001984 <MX_TIM4_Init+0x110>
  {
    Error_Handler();
 8001980:	f7ff fb8e 	bl	80010a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001984:	4803      	ldr	r0, [pc, #12]	; (8001994 <MX_TIM4_Init+0x120>)
 8001986:	f000 f9ab 	bl	8001ce0 <HAL_TIM_MspPostInit>

}
 800198a:	bf00      	nop
 800198c:	3738      	adds	r7, #56	; 0x38
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	200005c4 	.word	0x200005c4
 8001998:	40000800 	.word	0x40000800

0800199c <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b08e      	sub	sp, #56	; 0x38
 80019a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019a6:	2200      	movs	r2, #0
 80019a8:	601a      	str	r2, [r3, #0]
 80019aa:	605a      	str	r2, [r3, #4]
 80019ac:	609a      	str	r2, [r3, #8]
 80019ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019b0:	f107 0320 	add.w	r3, r7, #32
 80019b4:	2200      	movs	r2, #0
 80019b6:	601a      	str	r2, [r3, #0]
 80019b8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019ba:	1d3b      	adds	r3, r7, #4
 80019bc:	2200      	movs	r2, #0
 80019be:	601a      	str	r2, [r3, #0]
 80019c0:	605a      	str	r2, [r3, #4]
 80019c2:	609a      	str	r2, [r3, #8]
 80019c4:	60da      	str	r2, [r3, #12]
 80019c6:	611a      	str	r2, [r3, #16]
 80019c8:	615a      	str	r2, [r3, #20]
 80019ca:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80019cc:	4b31      	ldr	r3, [pc, #196]	; (8001a94 <MX_TIM5_Init+0xf8>)
 80019ce:	4a32      	ldr	r2, [pc, #200]	; (8001a98 <MX_TIM5_Init+0xfc>)
 80019d0:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 9;
 80019d2:	4b30      	ldr	r3, [pc, #192]	; (8001a94 <MX_TIM5_Init+0xf8>)
 80019d4:	2209      	movs	r2, #9
 80019d6:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019d8:	4b2e      	ldr	r3, [pc, #184]	; (8001a94 <MX_TIM5_Init+0xf8>)
 80019da:	2200      	movs	r2, #0
 80019dc:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 100000-1;
 80019de:	4b2d      	ldr	r3, [pc, #180]	; (8001a94 <MX_TIM5_Init+0xf8>)
 80019e0:	4a2e      	ldr	r2, [pc, #184]	; (8001a9c <MX_TIM5_Init+0x100>)
 80019e2:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019e4:	4b2b      	ldr	r3, [pc, #172]	; (8001a94 <MX_TIM5_Init+0xf8>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019ea:	4b2a      	ldr	r3, [pc, #168]	; (8001a94 <MX_TIM5_Init+0xf8>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80019f0:	4828      	ldr	r0, [pc, #160]	; (8001a94 <MX_TIM5_Init+0xf8>)
 80019f2:	f005 fef3 	bl	80077dc <HAL_TIM_Base_Init>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d001      	beq.n	8001a00 <MX_TIM5_Init+0x64>
  {
    Error_Handler();
 80019fc:	f7ff fb50 	bl	80010a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a04:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001a06:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	4821      	ldr	r0, [pc, #132]	; (8001a94 <MX_TIM5_Init+0xf8>)
 8001a0e:	f006 f957 	bl	8007cc0 <HAL_TIM_ConfigClockSource>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d001      	beq.n	8001a1c <MX_TIM5_Init+0x80>
  {
    Error_Handler();
 8001a18:	f7ff fb42 	bl	80010a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001a1c:	481d      	ldr	r0, [pc, #116]	; (8001a94 <MX_TIM5_Init+0xf8>)
 8001a1e:	f005 ff2c 	bl	800787a <HAL_TIM_PWM_Init>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d001      	beq.n	8001a2c <MX_TIM5_Init+0x90>
  {
    Error_Handler();
 8001a28:	f7ff fb3a 	bl	80010a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a30:	2300      	movs	r3, #0
 8001a32:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001a34:	f107 0320 	add.w	r3, r7, #32
 8001a38:	4619      	mov	r1, r3
 8001a3a:	4816      	ldr	r0, [pc, #88]	; (8001a94 <MX_TIM5_Init+0xf8>)
 8001a3c:	f006 fd24 	bl	8008488 <HAL_TIMEx_MasterConfigSynchronization>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d001      	beq.n	8001a4a <MX_TIM5_Init+0xae>
  {
    Error_Handler();
 8001a46:	f7ff fb2b 	bl	80010a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a4a:	2360      	movs	r3, #96	; 0x60
 8001a4c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a52:	2300      	movs	r3, #0
 8001a54:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a56:	2300      	movs	r3, #0
 8001a58:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a5a:	1d3b      	adds	r3, r7, #4
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	4619      	mov	r1, r3
 8001a60:	480c      	ldr	r0, [pc, #48]	; (8001a94 <MX_TIM5_Init+0xf8>)
 8001a62:	f006 f86b 	bl	8007b3c <HAL_TIM_PWM_ConfigChannel>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d001      	beq.n	8001a70 <MX_TIM5_Init+0xd4>
  {
    Error_Handler();
 8001a6c:	f7ff fb18 	bl	80010a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001a70:	1d3b      	adds	r3, r7, #4
 8001a72:	220c      	movs	r2, #12
 8001a74:	4619      	mov	r1, r3
 8001a76:	4807      	ldr	r0, [pc, #28]	; (8001a94 <MX_TIM5_Init+0xf8>)
 8001a78:	f006 f860 	bl	8007b3c <HAL_TIM_PWM_ConfigChannel>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d001      	beq.n	8001a86 <MX_TIM5_Init+0xea>
  {
    Error_Handler();
 8001a82:	f7ff fb0d 	bl	80010a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001a86:	4803      	ldr	r0, [pc, #12]	; (8001a94 <MX_TIM5_Init+0xf8>)
 8001a88:	f000 f92a 	bl	8001ce0 <HAL_TIM_MspPostInit>

}
 8001a8c:	bf00      	nop
 8001a8e:	3738      	adds	r7, #56	; 0x38
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	20000654 	.word	0x20000654
 8001a98:	40000c00 	.word	0x40000c00
 8001a9c:	0001869f 	.word	0x0001869f

08001aa0 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001aa6:	463b      	mov	r3, r7
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	601a      	str	r2, [r3, #0]
 8001aac:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001aae:	4b15      	ldr	r3, [pc, #84]	; (8001b04 <MX_TIM7_Init+0x64>)
 8001ab0:	4a15      	ldr	r2, [pc, #84]	; (8001b08 <MX_TIM7_Init+0x68>)
 8001ab2:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 8;
 8001ab4:	4b13      	ldr	r3, [pc, #76]	; (8001b04 <MX_TIM7_Init+0x64>)
 8001ab6:	2208      	movs	r2, #8
 8001ab8:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001aba:	4b12      	ldr	r3, [pc, #72]	; (8001b04 <MX_TIM7_Init+0x64>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9999;
 8001ac0:	4b10      	ldr	r3, [pc, #64]	; (8001b04 <MX_TIM7_Init+0x64>)
 8001ac2:	f242 720f 	movw	r2, #9999	; 0x270f
 8001ac6:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001ac8:	4b0e      	ldr	r3, [pc, #56]	; (8001b04 <MX_TIM7_Init+0x64>)
 8001aca:	2280      	movs	r2, #128	; 0x80
 8001acc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001ace:	480d      	ldr	r0, [pc, #52]	; (8001b04 <MX_TIM7_Init+0x64>)
 8001ad0:	f005 fe84 	bl	80077dc <HAL_TIM_Base_Init>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d001      	beq.n	8001ade <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8001ada:	f7ff fae1 	bl	80010a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001ae6:	463b      	mov	r3, r7
 8001ae8:	4619      	mov	r1, r3
 8001aea:	4806      	ldr	r0, [pc, #24]	; (8001b04 <MX_TIM7_Init+0x64>)
 8001aec:	f006 fccc 	bl	8008488 <HAL_TIMEx_MasterConfigSynchronization>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d001      	beq.n	8001afa <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8001af6:	f7ff fad3 	bl	80010a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001afa:	bf00      	nop
 8001afc:	3708      	adds	r7, #8
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	2000072c 	.word	0x2000072c
 8001b08:	40001400 	.word	0x40001400

08001b0c <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b088      	sub	sp, #32
 8001b10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b12:	1d3b      	adds	r3, r7, #4
 8001b14:	2200      	movs	r2, #0
 8001b16:	601a      	str	r2, [r3, #0]
 8001b18:	605a      	str	r2, [r3, #4]
 8001b1a:	609a      	str	r2, [r3, #8]
 8001b1c:	60da      	str	r2, [r3, #12]
 8001b1e:	611a      	str	r2, [r3, #16]
 8001b20:	615a      	str	r2, [r3, #20]
 8001b22:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001b24:	4b1e      	ldr	r3, [pc, #120]	; (8001ba0 <MX_TIM10_Init+0x94>)
 8001b26:	4a1f      	ldr	r2, [pc, #124]	; (8001ba4 <MX_TIM10_Init+0x98>)
 8001b28:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 72-1;
 8001b2a:	4b1d      	ldr	r3, [pc, #116]	; (8001ba0 <MX_TIM10_Init+0x94>)
 8001b2c:	2247      	movs	r2, #71	; 0x47
 8001b2e:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b30:	4b1b      	ldr	r3, [pc, #108]	; (8001ba0 <MX_TIM10_Init+0x94>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 50000-1;
 8001b36:	4b1a      	ldr	r3, [pc, #104]	; (8001ba0 <MX_TIM10_Init+0x94>)
 8001b38:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8001b3c:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b3e:	4b18      	ldr	r3, [pc, #96]	; (8001ba0 <MX_TIM10_Init+0x94>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b44:	4b16      	ldr	r3, [pc, #88]	; (8001ba0 <MX_TIM10_Init+0x94>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001b4a:	4815      	ldr	r0, [pc, #84]	; (8001ba0 <MX_TIM10_Init+0x94>)
 8001b4c:	f005 fe46 	bl	80077dc <HAL_TIM_Base_Init>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d001      	beq.n	8001b5a <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 8001b56:	f7ff faa3 	bl	80010a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8001b5a:	4811      	ldr	r0, [pc, #68]	; (8001ba0 <MX_TIM10_Init+0x94>)
 8001b5c:	f005 fe8d 	bl	800787a <HAL_TIM_PWM_Init>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d001      	beq.n	8001b6a <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 8001b66:	f7ff fa9b 	bl	80010a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b6a:	2360      	movs	r3, #96	; 0x60
 8001b6c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 8001b6e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001b72:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b74:	2300      	movs	r3, #0
 8001b76:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b7c:	1d3b      	adds	r3, r7, #4
 8001b7e:	2200      	movs	r2, #0
 8001b80:	4619      	mov	r1, r3
 8001b82:	4807      	ldr	r0, [pc, #28]	; (8001ba0 <MX_TIM10_Init+0x94>)
 8001b84:	f005 ffda 	bl	8007b3c <HAL_TIM_PWM_ConfigChannel>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d001      	beq.n	8001b92 <MX_TIM10_Init+0x86>
  {
    Error_Handler();
 8001b8e:	f7ff fa87 	bl	80010a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8001b92:	4803      	ldr	r0, [pc, #12]	; (8001ba0 <MX_TIM10_Init+0x94>)
 8001b94:	f000 f8a4 	bl	8001ce0 <HAL_TIM_MspPostInit>

}
 8001b98:	bf00      	nop
 8001b9a:	3720      	adds	r7, #32
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	2000060c 	.word	0x2000060c
 8001ba4:	40014400 	.word	0x40014400

08001ba8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b088      	sub	sp, #32
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bb8:	d10e      	bne.n	8001bd8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001bba:	2300      	movs	r3, #0
 8001bbc:	61fb      	str	r3, [r7, #28]
 8001bbe:	4b42      	ldr	r3, [pc, #264]	; (8001cc8 <HAL_TIM_Base_MspInit+0x120>)
 8001bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc2:	4a41      	ldr	r2, [pc, #260]	; (8001cc8 <HAL_TIM_Base_MspInit+0x120>)
 8001bc4:	f043 0301 	orr.w	r3, r3, #1
 8001bc8:	6413      	str	r3, [r2, #64]	; 0x40
 8001bca:	4b3f      	ldr	r3, [pc, #252]	; (8001cc8 <HAL_TIM_Base_MspInit+0x120>)
 8001bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bce:	f003 0301 	and.w	r3, r3, #1
 8001bd2:	61fb      	str	r3, [r7, #28]
 8001bd4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_TIM10_CLK_ENABLE();
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 8001bd6:	e072      	b.n	8001cbe <HAL_TIM_Base_MspInit+0x116>
  else if(tim_baseHandle->Instance==TIM3)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a3b      	ldr	r2, [pc, #236]	; (8001ccc <HAL_TIM_Base_MspInit+0x124>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d10e      	bne.n	8001c00 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001be2:	2300      	movs	r3, #0
 8001be4:	61bb      	str	r3, [r7, #24]
 8001be6:	4b38      	ldr	r3, [pc, #224]	; (8001cc8 <HAL_TIM_Base_MspInit+0x120>)
 8001be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bea:	4a37      	ldr	r2, [pc, #220]	; (8001cc8 <HAL_TIM_Base_MspInit+0x120>)
 8001bec:	f043 0302 	orr.w	r3, r3, #2
 8001bf0:	6413      	str	r3, [r2, #64]	; 0x40
 8001bf2:	4b35      	ldr	r3, [pc, #212]	; (8001cc8 <HAL_TIM_Base_MspInit+0x120>)
 8001bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf6:	f003 0302 	and.w	r3, r3, #2
 8001bfa:	61bb      	str	r3, [r7, #24]
 8001bfc:	69bb      	ldr	r3, [r7, #24]
}
 8001bfe:	e05e      	b.n	8001cbe <HAL_TIM_Base_MspInit+0x116>
  else if(tim_baseHandle->Instance==TIM4)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a32      	ldr	r2, [pc, #200]	; (8001cd0 <HAL_TIM_Base_MspInit+0x128>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d116      	bne.n	8001c38 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	617b      	str	r3, [r7, #20]
 8001c0e:	4b2e      	ldr	r3, [pc, #184]	; (8001cc8 <HAL_TIM_Base_MspInit+0x120>)
 8001c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c12:	4a2d      	ldr	r2, [pc, #180]	; (8001cc8 <HAL_TIM_Base_MspInit+0x120>)
 8001c14:	f043 0304 	orr.w	r3, r3, #4
 8001c18:	6413      	str	r3, [r2, #64]	; 0x40
 8001c1a:	4b2b      	ldr	r3, [pc, #172]	; (8001cc8 <HAL_TIM_Base_MspInit+0x120>)
 8001c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1e:	f003 0304 	and.w	r3, r3, #4
 8001c22:	617b      	str	r3, [r7, #20]
 8001c24:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001c26:	2200      	movs	r2, #0
 8001c28:	2100      	movs	r1, #0
 8001c2a:	201e      	movs	r0, #30
 8001c2c:	f001 fc4d 	bl	80034ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001c30:	201e      	movs	r0, #30
 8001c32:	f001 fc66 	bl	8003502 <HAL_NVIC_EnableIRQ>
}
 8001c36:	e042      	b.n	8001cbe <HAL_TIM_Base_MspInit+0x116>
  else if(tim_baseHandle->Instance==TIM5)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a25      	ldr	r2, [pc, #148]	; (8001cd4 <HAL_TIM_Base_MspInit+0x12c>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d10e      	bne.n	8001c60 <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001c42:	2300      	movs	r3, #0
 8001c44:	613b      	str	r3, [r7, #16]
 8001c46:	4b20      	ldr	r3, [pc, #128]	; (8001cc8 <HAL_TIM_Base_MspInit+0x120>)
 8001c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4a:	4a1f      	ldr	r2, [pc, #124]	; (8001cc8 <HAL_TIM_Base_MspInit+0x120>)
 8001c4c:	f043 0308 	orr.w	r3, r3, #8
 8001c50:	6413      	str	r3, [r2, #64]	; 0x40
 8001c52:	4b1d      	ldr	r3, [pc, #116]	; (8001cc8 <HAL_TIM_Base_MspInit+0x120>)
 8001c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c56:	f003 0308 	and.w	r3, r3, #8
 8001c5a:	613b      	str	r3, [r7, #16]
 8001c5c:	693b      	ldr	r3, [r7, #16]
}
 8001c5e:	e02e      	b.n	8001cbe <HAL_TIM_Base_MspInit+0x116>
  else if(tim_baseHandle->Instance==TIM7)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a1c      	ldr	r2, [pc, #112]	; (8001cd8 <HAL_TIM_Base_MspInit+0x130>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d116      	bne.n	8001c98 <HAL_TIM_Base_MspInit+0xf0>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	60fb      	str	r3, [r7, #12]
 8001c6e:	4b16      	ldr	r3, [pc, #88]	; (8001cc8 <HAL_TIM_Base_MspInit+0x120>)
 8001c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c72:	4a15      	ldr	r2, [pc, #84]	; (8001cc8 <HAL_TIM_Base_MspInit+0x120>)
 8001c74:	f043 0320 	orr.w	r3, r3, #32
 8001c78:	6413      	str	r3, [r2, #64]	; 0x40
 8001c7a:	4b13      	ldr	r3, [pc, #76]	; (8001cc8 <HAL_TIM_Base_MspInit+0x120>)
 8001c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7e:	f003 0320 	and.w	r3, r3, #32
 8001c82:	60fb      	str	r3, [r7, #12]
 8001c84:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001c86:	2200      	movs	r2, #0
 8001c88:	2100      	movs	r1, #0
 8001c8a:	2037      	movs	r0, #55	; 0x37
 8001c8c:	f001 fc1d 	bl	80034ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001c90:	2037      	movs	r0, #55	; 0x37
 8001c92:	f001 fc36 	bl	8003502 <HAL_NVIC_EnableIRQ>
}
 8001c96:	e012      	b.n	8001cbe <HAL_TIM_Base_MspInit+0x116>
  else if(tim_baseHandle->Instance==TIM10)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a0f      	ldr	r2, [pc, #60]	; (8001cdc <HAL_TIM_Base_MspInit+0x134>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d10d      	bne.n	8001cbe <HAL_TIM_Base_MspInit+0x116>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	60bb      	str	r3, [r7, #8]
 8001ca6:	4b08      	ldr	r3, [pc, #32]	; (8001cc8 <HAL_TIM_Base_MspInit+0x120>)
 8001ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001caa:	4a07      	ldr	r2, [pc, #28]	; (8001cc8 <HAL_TIM_Base_MspInit+0x120>)
 8001cac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cb0:	6453      	str	r3, [r2, #68]	; 0x44
 8001cb2:	4b05      	ldr	r3, [pc, #20]	; (8001cc8 <HAL_TIM_Base_MspInit+0x120>)
 8001cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cba:	60bb      	str	r3, [r7, #8]
 8001cbc:	68bb      	ldr	r3, [r7, #8]
}
 8001cbe:	bf00      	nop
 8001cc0:	3720      	adds	r7, #32
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	40023800 	.word	0x40023800
 8001ccc:	40000400 	.word	0x40000400
 8001cd0:	40000800 	.word	0x40000800
 8001cd4:	40000c00 	.word	0x40000c00
 8001cd8:	40001400 	.word	0x40001400
 8001cdc:	40014400 	.word	0x40014400

08001ce0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b08c      	sub	sp, #48	; 0x30
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ce8:	f107 031c 	add.w	r3, r7, #28
 8001cec:	2200      	movs	r2, #0
 8001cee:	601a      	str	r2, [r3, #0]
 8001cf0:	605a      	str	r2, [r3, #4]
 8001cf2:	609a      	str	r2, [r3, #8]
 8001cf4:	60da      	str	r2, [r3, #12]
 8001cf6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d00:	d11e      	bne.n	8001d40 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d02:	2300      	movs	r3, #0
 8001d04:	61bb      	str	r3, [r7, #24]
 8001d06:	4b58      	ldr	r3, [pc, #352]	; (8001e68 <HAL_TIM_MspPostInit+0x188>)
 8001d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0a:	4a57      	ldr	r2, [pc, #348]	; (8001e68 <HAL_TIM_MspPostInit+0x188>)
 8001d0c:	f043 0301 	orr.w	r3, r3, #1
 8001d10:	6313      	str	r3, [r2, #48]	; 0x30
 8001d12:	4b55      	ldr	r3, [pc, #340]	; (8001e68 <HAL_TIM_MspPostInit+0x188>)
 8001d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d16:	f003 0301 	and.w	r3, r3, #1
 8001d1a:	61bb      	str	r3, [r7, #24]
 8001d1c:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001d1e:	2320      	movs	r3, #32
 8001d20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d22:	2302      	movs	r3, #2
 8001d24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d26:	2300      	movs	r3, #0
 8001d28:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d32:	f107 031c 	add.w	r3, r7, #28
 8001d36:	4619      	mov	r1, r3
 8001d38:	484c      	ldr	r0, [pc, #304]	; (8001e6c <HAL_TIM_MspPostInit+0x18c>)
 8001d3a:	f003 f91d 	bl	8004f78 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM10_MspPostInit 1 */

  /* USER CODE END TIM10_MspPostInit 1 */
  }

}
 8001d3e:	e08f      	b.n	8001e60 <HAL_TIM_MspPostInit+0x180>
  else if(timHandle->Instance==TIM3)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a4a      	ldr	r2, [pc, #296]	; (8001e70 <HAL_TIM_MspPostInit+0x190>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d11e      	bne.n	8001d88 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	617b      	str	r3, [r7, #20]
 8001d4e:	4b46      	ldr	r3, [pc, #280]	; (8001e68 <HAL_TIM_MspPostInit+0x188>)
 8001d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d52:	4a45      	ldr	r2, [pc, #276]	; (8001e68 <HAL_TIM_MspPostInit+0x188>)
 8001d54:	f043 0304 	orr.w	r3, r3, #4
 8001d58:	6313      	str	r3, [r2, #48]	; 0x30
 8001d5a:	4b43      	ldr	r3, [pc, #268]	; (8001e68 <HAL_TIM_MspPostInit+0x188>)
 8001d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5e:	f003 0304 	and.w	r3, r3, #4
 8001d62:	617b      	str	r3, [r7, #20]
 8001d64:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001d66:	2340      	movs	r3, #64	; 0x40
 8001d68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d6a:	2302      	movs	r3, #2
 8001d6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d72:	2300      	movs	r3, #0
 8001d74:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001d76:	2302      	movs	r3, #2
 8001d78:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d7a:	f107 031c 	add.w	r3, r7, #28
 8001d7e:	4619      	mov	r1, r3
 8001d80:	483c      	ldr	r0, [pc, #240]	; (8001e74 <HAL_TIM_MspPostInit+0x194>)
 8001d82:	f003 f8f9 	bl	8004f78 <HAL_GPIO_Init>
}
 8001d86:	e06b      	b.n	8001e60 <HAL_TIM_MspPostInit+0x180>
  else if(timHandle->Instance==TIM4)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a3a      	ldr	r2, [pc, #232]	; (8001e78 <HAL_TIM_MspPostInit+0x198>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d11f      	bne.n	8001dd2 <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d92:	2300      	movs	r3, #0
 8001d94:	613b      	str	r3, [r7, #16]
 8001d96:	4b34      	ldr	r3, [pc, #208]	; (8001e68 <HAL_TIM_MspPostInit+0x188>)
 8001d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d9a:	4a33      	ldr	r2, [pc, #204]	; (8001e68 <HAL_TIM_MspPostInit+0x188>)
 8001d9c:	f043 0308 	orr.w	r3, r3, #8
 8001da0:	6313      	str	r3, [r2, #48]	; 0x30
 8001da2:	4b31      	ldr	r3, [pc, #196]	; (8001e68 <HAL_TIM_MspPostInit+0x188>)
 8001da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da6:	f003 0308 	and.w	r3, r3, #8
 8001daa:	613b      	str	r3, [r7, #16]
 8001dac:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8001dae:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8001db2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001db4:	2302      	movs	r3, #2
 8001db6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db8:	2300      	movs	r3, #0
 8001dba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001dc0:	2302      	movs	r3, #2
 8001dc2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001dc4:	f107 031c 	add.w	r3, r7, #28
 8001dc8:	4619      	mov	r1, r3
 8001dca:	482c      	ldr	r0, [pc, #176]	; (8001e7c <HAL_TIM_MspPostInit+0x19c>)
 8001dcc:	f003 f8d4 	bl	8004f78 <HAL_GPIO_Init>
}
 8001dd0:	e046      	b.n	8001e60 <HAL_TIM_MspPostInit+0x180>
  else if(timHandle->Instance==TIM5)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a2a      	ldr	r2, [pc, #168]	; (8001e80 <HAL_TIM_MspPostInit+0x1a0>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d11e      	bne.n	8001e1a <HAL_TIM_MspPostInit+0x13a>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ddc:	2300      	movs	r3, #0
 8001dde:	60fb      	str	r3, [r7, #12]
 8001de0:	4b21      	ldr	r3, [pc, #132]	; (8001e68 <HAL_TIM_MspPostInit+0x188>)
 8001de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de4:	4a20      	ldr	r2, [pc, #128]	; (8001e68 <HAL_TIM_MspPostInit+0x188>)
 8001de6:	f043 0301 	orr.w	r3, r3, #1
 8001dea:	6313      	str	r3, [r2, #48]	; 0x30
 8001dec:	4b1e      	ldr	r3, [pc, #120]	; (8001e68 <HAL_TIM_MspPostInit+0x188>)
 8001dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df0:	f003 0301 	and.w	r3, r3, #1
 8001df4:	60fb      	str	r3, [r7, #12]
 8001df6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8001df8:	2309      	movs	r3, #9
 8001dfa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dfc:	2302      	movs	r3, #2
 8001dfe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e00:	2300      	movs	r3, #0
 8001e02:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e04:	2300      	movs	r3, #0
 8001e06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001e08:	2302      	movs	r3, #2
 8001e0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e0c:	f107 031c 	add.w	r3, r7, #28
 8001e10:	4619      	mov	r1, r3
 8001e12:	4816      	ldr	r0, [pc, #88]	; (8001e6c <HAL_TIM_MspPostInit+0x18c>)
 8001e14:	f003 f8b0 	bl	8004f78 <HAL_GPIO_Init>
}
 8001e18:	e022      	b.n	8001e60 <HAL_TIM_MspPostInit+0x180>
  else if(timHandle->Instance==TIM10)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a19      	ldr	r2, [pc, #100]	; (8001e84 <HAL_TIM_MspPostInit+0x1a4>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d11d      	bne.n	8001e60 <HAL_TIM_MspPostInit+0x180>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001e24:	2300      	movs	r3, #0
 8001e26:	60bb      	str	r3, [r7, #8]
 8001e28:	4b0f      	ldr	r3, [pc, #60]	; (8001e68 <HAL_TIM_MspPostInit+0x188>)
 8001e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2c:	4a0e      	ldr	r2, [pc, #56]	; (8001e68 <HAL_TIM_MspPostInit+0x188>)
 8001e2e:	f043 0320 	orr.w	r3, r3, #32
 8001e32:	6313      	str	r3, [r2, #48]	; 0x30
 8001e34:	4b0c      	ldr	r3, [pc, #48]	; (8001e68 <HAL_TIM_MspPostInit+0x188>)
 8001e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e38:	f003 0320 	and.w	r3, r3, #32
 8001e3c:	60bb      	str	r3, [r7, #8]
 8001e3e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001e40:	2340      	movs	r3, #64	; 0x40
 8001e42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e44:	2302      	movs	r3, #2
 8001e46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8001e50:	2303      	movs	r3, #3
 8001e52:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001e54:	f107 031c 	add.w	r3, r7, #28
 8001e58:	4619      	mov	r1, r3
 8001e5a:	480b      	ldr	r0, [pc, #44]	; (8001e88 <HAL_TIM_MspPostInit+0x1a8>)
 8001e5c:	f003 f88c 	bl	8004f78 <HAL_GPIO_Init>
}
 8001e60:	bf00      	nop
 8001e62:	3730      	adds	r7, #48	; 0x30
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	40023800 	.word	0x40023800
 8001e6c:	40020000 	.word	0x40020000
 8001e70:	40000400 	.word	0x40000400
 8001e74:	40020800 	.word	0x40020800
 8001e78:	40000800 	.word	0x40000800
 8001e7c:	40020c00 	.word	0x40020c00
 8001e80:	40000c00 	.word	0x40000c00
 8001e84:	40014400 	.word	0x40014400
 8001e88:	40021400 	.word	0x40021400

08001e8c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001e90:	4b11      	ldr	r3, [pc, #68]	; (8001ed8 <MX_USART3_UART_Init+0x4c>)
 8001e92:	4a12      	ldr	r2, [pc, #72]	; (8001edc <MX_USART3_UART_Init+0x50>)
 8001e94:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001e96:	4b10      	ldr	r3, [pc, #64]	; (8001ed8 <MX_USART3_UART_Init+0x4c>)
 8001e98:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e9c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001e9e:	4b0e      	ldr	r3, [pc, #56]	; (8001ed8 <MX_USART3_UART_Init+0x4c>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001ea4:	4b0c      	ldr	r3, [pc, #48]	; (8001ed8 <MX_USART3_UART_Init+0x4c>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001eaa:	4b0b      	ldr	r3, [pc, #44]	; (8001ed8 <MX_USART3_UART_Init+0x4c>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001eb0:	4b09      	ldr	r3, [pc, #36]	; (8001ed8 <MX_USART3_UART_Init+0x4c>)
 8001eb2:	220c      	movs	r2, #12
 8001eb4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001eb6:	4b08      	ldr	r3, [pc, #32]	; (8001ed8 <MX_USART3_UART_Init+0x4c>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ebc:	4b06      	ldr	r3, [pc, #24]	; (8001ed8 <MX_USART3_UART_Init+0x4c>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001ec2:	4805      	ldr	r0, [pc, #20]	; (8001ed8 <MX_USART3_UART_Init+0x4c>)
 8001ec4:	f006 fb70 	bl	80085a8 <HAL_UART_Init>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d001      	beq.n	8001ed2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001ece:	f7ff f8e7 	bl	80010a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001ed2:	bf00      	nop
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	20000774 	.word	0x20000774
 8001edc:	40004800 	.word	0x40004800

08001ee0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b08a      	sub	sp, #40	; 0x28
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ee8:	f107 0314 	add.w	r3, r7, #20
 8001eec:	2200      	movs	r2, #0
 8001eee:	601a      	str	r2, [r3, #0]
 8001ef0:	605a      	str	r2, [r3, #4]
 8001ef2:	609a      	str	r2, [r3, #8]
 8001ef4:	60da      	str	r2, [r3, #12]
 8001ef6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a1d      	ldr	r2, [pc, #116]	; (8001f74 <HAL_UART_MspInit+0x94>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d134      	bne.n	8001f6c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001f02:	2300      	movs	r3, #0
 8001f04:	613b      	str	r3, [r7, #16]
 8001f06:	4b1c      	ldr	r3, [pc, #112]	; (8001f78 <HAL_UART_MspInit+0x98>)
 8001f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f0a:	4a1b      	ldr	r2, [pc, #108]	; (8001f78 <HAL_UART_MspInit+0x98>)
 8001f0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f10:	6413      	str	r3, [r2, #64]	; 0x40
 8001f12:	4b19      	ldr	r3, [pc, #100]	; (8001f78 <HAL_UART_MspInit+0x98>)
 8001f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f1a:	613b      	str	r3, [r7, #16]
 8001f1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f1e:	2300      	movs	r3, #0
 8001f20:	60fb      	str	r3, [r7, #12]
 8001f22:	4b15      	ldr	r3, [pc, #84]	; (8001f78 <HAL_UART_MspInit+0x98>)
 8001f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f26:	4a14      	ldr	r2, [pc, #80]	; (8001f78 <HAL_UART_MspInit+0x98>)
 8001f28:	f043 0308 	orr.w	r3, r3, #8
 8001f2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f2e:	4b12      	ldr	r3, [pc, #72]	; (8001f78 <HAL_UART_MspInit+0x98>)
 8001f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f32:	f003 0308 	and.w	r3, r3, #8
 8001f36:	60fb      	str	r3, [r7, #12]
 8001f38:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001f3a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001f3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f40:	2302      	movs	r3, #2
 8001f42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f44:	2300      	movs	r3, #0
 8001f46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f48:	2303      	movs	r3, #3
 8001f4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001f4c:	2307      	movs	r3, #7
 8001f4e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f50:	f107 0314 	add.w	r3, r7, #20
 8001f54:	4619      	mov	r1, r3
 8001f56:	4809      	ldr	r0, [pc, #36]	; (8001f7c <HAL_UART_MspInit+0x9c>)
 8001f58:	f003 f80e 	bl	8004f78 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	2100      	movs	r1, #0
 8001f60:	2027      	movs	r0, #39	; 0x27
 8001f62:	f001 fab2 	bl	80034ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001f66:	2027      	movs	r0, #39	; 0x27
 8001f68:	f001 facb 	bl	8003502 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001f6c:	bf00      	nop
 8001f6e:	3728      	adds	r7, #40	; 0x28
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	40004800 	.word	0x40004800
 8001f78:	40023800 	.word	0x40023800
 8001f7c:	40020c00 	.word	0x40020c00

08001f80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001f80:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001fb8 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f84:	480d      	ldr	r0, [pc, #52]	; (8001fbc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001f86:	490e      	ldr	r1, [pc, #56]	; (8001fc0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001f88:	4a0e      	ldr	r2, [pc, #56]	; (8001fc4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001f8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f8c:	e002      	b.n	8001f94 <LoopCopyDataInit>

08001f8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f92:	3304      	adds	r3, #4

08001f94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f98:	d3f9      	bcc.n	8001f8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f9a:	4a0b      	ldr	r2, [pc, #44]	; (8001fc8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001f9c:	4c0b      	ldr	r4, [pc, #44]	; (8001fcc <LoopFillZerobss+0x26>)
  movs r3, #0
 8001f9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fa0:	e001      	b.n	8001fa6 <LoopFillZerobss>

08001fa2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fa2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fa4:	3204      	adds	r2, #4

08001fa6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fa6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fa8:	d3fb      	bcc.n	8001fa2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001faa:	f7ff fb65 	bl	8001678 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001fae:	f012 fa67 	bl	8014480 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001fb2:	f7fe fee9 	bl	8000d88 <main>
  bx  lr    
 8001fb6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001fb8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001fbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fc0:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001fc4:	08018570 	.word	0x08018570
  ldr r2, =_sbss
 8001fc8:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001fcc:	200072cc 	.word	0x200072cc

08001fd0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001fd0:	e7fe      	b.n	8001fd0 <ADC_IRQHandler>
	...

08001fd4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001fd8:	4b0e      	ldr	r3, [pc, #56]	; (8002014 <HAL_Init+0x40>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a0d      	ldr	r2, [pc, #52]	; (8002014 <HAL_Init+0x40>)
 8001fde:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001fe2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001fe4:	4b0b      	ldr	r3, [pc, #44]	; (8002014 <HAL_Init+0x40>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a0a      	ldr	r2, [pc, #40]	; (8002014 <HAL_Init+0x40>)
 8001fea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001fee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ff0:	4b08      	ldr	r3, [pc, #32]	; (8002014 <HAL_Init+0x40>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a07      	ldr	r2, [pc, #28]	; (8002014 <HAL_Init+0x40>)
 8001ff6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ffa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ffc:	2003      	movs	r0, #3
 8001ffe:	f001 fa59 	bl	80034b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002002:	200f      	movs	r0, #15
 8002004:	f000 f808 	bl	8002018 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002008:	f7ff f9de 	bl	80013c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800200c:	2300      	movs	r3, #0
}
 800200e:	4618      	mov	r0, r3
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	40023c00 	.word	0x40023c00

08002018 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b082      	sub	sp, #8
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002020:	4b12      	ldr	r3, [pc, #72]	; (800206c <HAL_InitTick+0x54>)
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	4b12      	ldr	r3, [pc, #72]	; (8002070 <HAL_InitTick+0x58>)
 8002026:	781b      	ldrb	r3, [r3, #0]
 8002028:	4619      	mov	r1, r3
 800202a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800202e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002032:	fbb2 f3f3 	udiv	r3, r2, r3
 8002036:	4618      	mov	r0, r3
 8002038:	f001 fa71 	bl	800351e <HAL_SYSTICK_Config>
 800203c:	4603      	mov	r3, r0
 800203e:	2b00      	cmp	r3, #0
 8002040:	d001      	beq.n	8002046 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	e00e      	b.n	8002064 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2b0f      	cmp	r3, #15
 800204a:	d80a      	bhi.n	8002062 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800204c:	2200      	movs	r2, #0
 800204e:	6879      	ldr	r1, [r7, #4]
 8002050:	f04f 30ff 	mov.w	r0, #4294967295
 8002054:	f001 fa39 	bl	80034ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002058:	4a06      	ldr	r2, [pc, #24]	; (8002074 <HAL_InitTick+0x5c>)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800205e:	2300      	movs	r3, #0
 8002060:	e000      	b.n	8002064 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
}
 8002064:	4618      	mov	r0, r3
 8002066:	3708      	adds	r7, #8
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}
 800206c:	20000000 	.word	0x20000000
 8002070:	20000008 	.word	0x20000008
 8002074:	20000004 	.word	0x20000004

08002078 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002078:	b480      	push	{r7}
 800207a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800207c:	4b06      	ldr	r3, [pc, #24]	; (8002098 <HAL_IncTick+0x20>)
 800207e:	781b      	ldrb	r3, [r3, #0]
 8002080:	461a      	mov	r2, r3
 8002082:	4b06      	ldr	r3, [pc, #24]	; (800209c <HAL_IncTick+0x24>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4413      	add	r3, r2
 8002088:	4a04      	ldr	r2, [pc, #16]	; (800209c <HAL_IncTick+0x24>)
 800208a:	6013      	str	r3, [r2, #0]
}
 800208c:	bf00      	nop
 800208e:	46bd      	mov	sp, r7
 8002090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002094:	4770      	bx	lr
 8002096:	bf00      	nop
 8002098:	20000008 	.word	0x20000008
 800209c:	200007b8 	.word	0x200007b8

080020a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020a0:	b480      	push	{r7}
 80020a2:	af00      	add	r7, sp, #0
  return uwTick;
 80020a4:	4b03      	ldr	r3, [pc, #12]	; (80020b4 <HAL_GetTick+0x14>)
 80020a6:	681b      	ldr	r3, [r3, #0]
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr
 80020b2:	bf00      	nop
 80020b4:	200007b8 	.word	0x200007b8

080020b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b084      	sub	sp, #16
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020c0:	f7ff ffee 	bl	80020a0 <HAL_GetTick>
 80020c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020d0:	d005      	beq.n	80020de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80020d2:	4b0a      	ldr	r3, [pc, #40]	; (80020fc <HAL_Delay+0x44>)
 80020d4:	781b      	ldrb	r3, [r3, #0]
 80020d6:	461a      	mov	r2, r3
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	4413      	add	r3, r2
 80020dc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80020de:	bf00      	nop
 80020e0:	f7ff ffde 	bl	80020a0 <HAL_GetTick>
 80020e4:	4602      	mov	r2, r0
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	1ad3      	subs	r3, r2, r3
 80020ea:	68fa      	ldr	r2, [r7, #12]
 80020ec:	429a      	cmp	r2, r3
 80020ee:	d8f7      	bhi.n	80020e0 <HAL_Delay+0x28>
  {
  }
}
 80020f0:	bf00      	nop
 80020f2:	bf00      	nop
 80020f4:	3710      	adds	r7, #16
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	20000008 	.word	0x20000008

08002100 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b084      	sub	sp, #16
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002108:	2300      	movs	r3, #0
 800210a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d101      	bne.n	8002116 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	e033      	b.n	800217e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800211a:	2b00      	cmp	r3, #0
 800211c:	d109      	bne.n	8002132 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800211e:	6878      	ldr	r0, [r7, #4]
 8002120:	f7fe faae 	bl	8000680 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2200      	movs	r2, #0
 8002128:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2200      	movs	r2, #0
 800212e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002136:	f003 0310 	and.w	r3, r3, #16
 800213a:	2b00      	cmp	r3, #0
 800213c:	d118      	bne.n	8002170 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002142:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002146:	f023 0302 	bic.w	r3, r3, #2
 800214a:	f043 0202 	orr.w	r2, r3, #2
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002152:	6878      	ldr	r0, [r7, #4]
 8002154:	f000 f94a 	bl	80023ec <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2200      	movs	r2, #0
 800215c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002162:	f023 0303 	bic.w	r3, r3, #3
 8002166:	f043 0201 	orr.w	r2, r3, #1
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	641a      	str	r2, [r3, #64]	; 0x40
 800216e:	e001      	b.n	8002174 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002170:	2301      	movs	r3, #1
 8002172:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2200      	movs	r2, #0
 8002178:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800217c:	7bfb      	ldrb	r3, [r7, #15]
}
 800217e:	4618      	mov	r0, r3
 8002180:	3710      	adds	r7, #16
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
	...

08002188 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002188:	b480      	push	{r7}
 800218a:	b085      	sub	sp, #20
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
 8002190:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002192:	2300      	movs	r3, #0
 8002194:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800219c:	2b01      	cmp	r3, #1
 800219e:	d101      	bne.n	80021a4 <HAL_ADC_ConfigChannel+0x1c>
 80021a0:	2302      	movs	r3, #2
 80021a2:	e113      	b.n	80023cc <HAL_ADC_ConfigChannel+0x244>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2201      	movs	r2, #1
 80021a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	2b09      	cmp	r3, #9
 80021b2:	d925      	bls.n	8002200 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	68d9      	ldr	r1, [r3, #12]
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	b29b      	uxth	r3, r3
 80021c0:	461a      	mov	r2, r3
 80021c2:	4613      	mov	r3, r2
 80021c4:	005b      	lsls	r3, r3, #1
 80021c6:	4413      	add	r3, r2
 80021c8:	3b1e      	subs	r3, #30
 80021ca:	2207      	movs	r2, #7
 80021cc:	fa02 f303 	lsl.w	r3, r2, r3
 80021d0:	43da      	mvns	r2, r3
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	400a      	ands	r2, r1
 80021d8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	68d9      	ldr	r1, [r3, #12]
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	689a      	ldr	r2, [r3, #8]
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	b29b      	uxth	r3, r3
 80021ea:	4618      	mov	r0, r3
 80021ec:	4603      	mov	r3, r0
 80021ee:	005b      	lsls	r3, r3, #1
 80021f0:	4403      	add	r3, r0
 80021f2:	3b1e      	subs	r3, #30
 80021f4:	409a      	lsls	r2, r3
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	430a      	orrs	r2, r1
 80021fc:	60da      	str	r2, [r3, #12]
 80021fe:	e022      	b.n	8002246 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	6919      	ldr	r1, [r3, #16]
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	b29b      	uxth	r3, r3
 800220c:	461a      	mov	r2, r3
 800220e:	4613      	mov	r3, r2
 8002210:	005b      	lsls	r3, r3, #1
 8002212:	4413      	add	r3, r2
 8002214:	2207      	movs	r2, #7
 8002216:	fa02 f303 	lsl.w	r3, r2, r3
 800221a:	43da      	mvns	r2, r3
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	400a      	ands	r2, r1
 8002222:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	6919      	ldr	r1, [r3, #16]
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	689a      	ldr	r2, [r3, #8]
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	b29b      	uxth	r3, r3
 8002234:	4618      	mov	r0, r3
 8002236:	4603      	mov	r3, r0
 8002238:	005b      	lsls	r3, r3, #1
 800223a:	4403      	add	r3, r0
 800223c:	409a      	lsls	r2, r3
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	430a      	orrs	r2, r1
 8002244:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	2b06      	cmp	r3, #6
 800224c:	d824      	bhi.n	8002298 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	685a      	ldr	r2, [r3, #4]
 8002258:	4613      	mov	r3, r2
 800225a:	009b      	lsls	r3, r3, #2
 800225c:	4413      	add	r3, r2
 800225e:	3b05      	subs	r3, #5
 8002260:	221f      	movs	r2, #31
 8002262:	fa02 f303 	lsl.w	r3, r2, r3
 8002266:	43da      	mvns	r2, r3
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	400a      	ands	r2, r1
 800226e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	b29b      	uxth	r3, r3
 800227c:	4618      	mov	r0, r3
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	685a      	ldr	r2, [r3, #4]
 8002282:	4613      	mov	r3, r2
 8002284:	009b      	lsls	r3, r3, #2
 8002286:	4413      	add	r3, r2
 8002288:	3b05      	subs	r3, #5
 800228a:	fa00 f203 	lsl.w	r2, r0, r3
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	430a      	orrs	r2, r1
 8002294:	635a      	str	r2, [r3, #52]	; 0x34
 8002296:	e04c      	b.n	8002332 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	2b0c      	cmp	r3, #12
 800229e:	d824      	bhi.n	80022ea <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	685a      	ldr	r2, [r3, #4]
 80022aa:	4613      	mov	r3, r2
 80022ac:	009b      	lsls	r3, r3, #2
 80022ae:	4413      	add	r3, r2
 80022b0:	3b23      	subs	r3, #35	; 0x23
 80022b2:	221f      	movs	r2, #31
 80022b4:	fa02 f303 	lsl.w	r3, r2, r3
 80022b8:	43da      	mvns	r2, r3
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	400a      	ands	r2, r1
 80022c0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	b29b      	uxth	r3, r3
 80022ce:	4618      	mov	r0, r3
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	685a      	ldr	r2, [r3, #4]
 80022d4:	4613      	mov	r3, r2
 80022d6:	009b      	lsls	r3, r3, #2
 80022d8:	4413      	add	r3, r2
 80022da:	3b23      	subs	r3, #35	; 0x23
 80022dc:	fa00 f203 	lsl.w	r2, r0, r3
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	430a      	orrs	r2, r1
 80022e6:	631a      	str	r2, [r3, #48]	; 0x30
 80022e8:	e023      	b.n	8002332 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	685a      	ldr	r2, [r3, #4]
 80022f4:	4613      	mov	r3, r2
 80022f6:	009b      	lsls	r3, r3, #2
 80022f8:	4413      	add	r3, r2
 80022fa:	3b41      	subs	r3, #65	; 0x41
 80022fc:	221f      	movs	r2, #31
 80022fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002302:	43da      	mvns	r2, r3
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	400a      	ands	r2, r1
 800230a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	b29b      	uxth	r3, r3
 8002318:	4618      	mov	r0, r3
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	685a      	ldr	r2, [r3, #4]
 800231e:	4613      	mov	r3, r2
 8002320:	009b      	lsls	r3, r3, #2
 8002322:	4413      	add	r3, r2
 8002324:	3b41      	subs	r3, #65	; 0x41
 8002326:	fa00 f203 	lsl.w	r2, r0, r3
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	430a      	orrs	r2, r1
 8002330:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002332:	4b29      	ldr	r3, [pc, #164]	; (80023d8 <HAL_ADC_ConfigChannel+0x250>)
 8002334:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a28      	ldr	r2, [pc, #160]	; (80023dc <HAL_ADC_ConfigChannel+0x254>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d10f      	bne.n	8002360 <HAL_ADC_ConfigChannel+0x1d8>
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	2b12      	cmp	r3, #18
 8002346:	d10b      	bne.n	8002360 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a1d      	ldr	r2, [pc, #116]	; (80023dc <HAL_ADC_ConfigChannel+0x254>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d12b      	bne.n	80023c2 <HAL_ADC_ConfigChannel+0x23a>
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a1c      	ldr	r2, [pc, #112]	; (80023e0 <HAL_ADC_ConfigChannel+0x258>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d003      	beq.n	800237c <HAL_ADC_ConfigChannel+0x1f4>
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	2b11      	cmp	r3, #17
 800237a:	d122      	bne.n	80023c2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a11      	ldr	r2, [pc, #68]	; (80023e0 <HAL_ADC_ConfigChannel+0x258>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d111      	bne.n	80023c2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800239e:	4b11      	ldr	r3, [pc, #68]	; (80023e4 <HAL_ADC_ConfigChannel+0x25c>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a11      	ldr	r2, [pc, #68]	; (80023e8 <HAL_ADC_ConfigChannel+0x260>)
 80023a4:	fba2 2303 	umull	r2, r3, r2, r3
 80023a8:	0c9a      	lsrs	r2, r3, #18
 80023aa:	4613      	mov	r3, r2
 80023ac:	009b      	lsls	r3, r3, #2
 80023ae:	4413      	add	r3, r2
 80023b0:	005b      	lsls	r3, r3, #1
 80023b2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80023b4:	e002      	b.n	80023bc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	3b01      	subs	r3, #1
 80023ba:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d1f9      	bne.n	80023b6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2200      	movs	r2, #0
 80023c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80023ca:	2300      	movs	r3, #0
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	3714      	adds	r7, #20
 80023d0:	46bd      	mov	sp, r7
 80023d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d6:	4770      	bx	lr
 80023d8:	40012300 	.word	0x40012300
 80023dc:	40012000 	.word	0x40012000
 80023e0:	10000012 	.word	0x10000012
 80023e4:	20000000 	.word	0x20000000
 80023e8:	431bde83 	.word	0x431bde83

080023ec <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b085      	sub	sp, #20
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80023f4:	4b79      	ldr	r3, [pc, #484]	; (80025dc <ADC_Init+0x1f0>)
 80023f6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	685a      	ldr	r2, [r3, #4]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	431a      	orrs	r2, r3
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	685a      	ldr	r2, [r3, #4]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002420:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	6859      	ldr	r1, [r3, #4]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	691b      	ldr	r3, [r3, #16]
 800242c:	021a      	lsls	r2, r3, #8
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	430a      	orrs	r2, r1
 8002434:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	685a      	ldr	r2, [r3, #4]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002444:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	6859      	ldr	r1, [r3, #4]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	689a      	ldr	r2, [r3, #8]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	430a      	orrs	r2, r1
 8002456:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	689a      	ldr	r2, [r3, #8]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002466:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	6899      	ldr	r1, [r3, #8]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	68da      	ldr	r2, [r3, #12]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	430a      	orrs	r2, r1
 8002478:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800247e:	4a58      	ldr	r2, [pc, #352]	; (80025e0 <ADC_Init+0x1f4>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d022      	beq.n	80024ca <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	689a      	ldr	r2, [r3, #8]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002492:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	6899      	ldr	r1, [r3, #8]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	430a      	orrs	r2, r1
 80024a4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	689a      	ldr	r2, [r3, #8]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80024b4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	6899      	ldr	r1, [r3, #8]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	430a      	orrs	r2, r1
 80024c6:	609a      	str	r2, [r3, #8]
 80024c8:	e00f      	b.n	80024ea <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	689a      	ldr	r2, [r3, #8]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80024d8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	689a      	ldr	r2, [r3, #8]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80024e8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	689a      	ldr	r2, [r3, #8]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f022 0202 	bic.w	r2, r2, #2
 80024f8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	6899      	ldr	r1, [r3, #8]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	7e1b      	ldrb	r3, [r3, #24]
 8002504:	005a      	lsls	r2, r3, #1
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	430a      	orrs	r2, r1
 800250c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d01b      	beq.n	8002550 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	685a      	ldr	r2, [r3, #4]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002526:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	685a      	ldr	r2, [r3, #4]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002536:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	6859      	ldr	r1, [r3, #4]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002542:	3b01      	subs	r3, #1
 8002544:	035a      	lsls	r2, r3, #13
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	430a      	orrs	r2, r1
 800254c:	605a      	str	r2, [r3, #4]
 800254e:	e007      	b.n	8002560 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	685a      	ldr	r2, [r3, #4]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800255e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800256e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	69db      	ldr	r3, [r3, #28]
 800257a:	3b01      	subs	r3, #1
 800257c:	051a      	lsls	r2, r3, #20
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	430a      	orrs	r2, r1
 8002584:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	689a      	ldr	r2, [r3, #8]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002594:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	6899      	ldr	r1, [r3, #8]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80025a2:	025a      	lsls	r2, r3, #9
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	430a      	orrs	r2, r1
 80025aa:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	689a      	ldr	r2, [r3, #8]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025ba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	6899      	ldr	r1, [r3, #8]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	695b      	ldr	r3, [r3, #20]
 80025c6:	029a      	lsls	r2, r3, #10
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	430a      	orrs	r2, r1
 80025ce:	609a      	str	r2, [r3, #8]
}
 80025d0:	bf00      	nop
 80025d2:	3714      	adds	r7, #20
 80025d4:	46bd      	mov	sp, r7
 80025d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025da:	4770      	bx	lr
 80025dc:	40012300 	.word	0x40012300
 80025e0:	0f000001 	.word	0x0f000001

080025e4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b084      	sub	sp, #16
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d101      	bne.n	80025f6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e0ed      	b.n	80027d2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d102      	bne.n	8002608 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f7fe f906 	bl	8000814 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f042 0201 	orr.w	r2, r2, #1
 8002616:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002618:	f7ff fd42 	bl	80020a0 <HAL_GetTick>
 800261c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800261e:	e012      	b.n	8002646 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002620:	f7ff fd3e 	bl	80020a0 <HAL_GetTick>
 8002624:	4602      	mov	r2, r0
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	1ad3      	subs	r3, r2, r3
 800262a:	2b0a      	cmp	r3, #10
 800262c:	d90b      	bls.n	8002646 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002632:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2205      	movs	r2, #5
 800263e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	e0c5      	b.n	80027d2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	f003 0301 	and.w	r3, r3, #1
 8002650:	2b00      	cmp	r3, #0
 8002652:	d0e5      	beq.n	8002620 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	681a      	ldr	r2, [r3, #0]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f022 0202 	bic.w	r2, r2, #2
 8002662:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002664:	f7ff fd1c 	bl	80020a0 <HAL_GetTick>
 8002668:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800266a:	e012      	b.n	8002692 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800266c:	f7ff fd18 	bl	80020a0 <HAL_GetTick>
 8002670:	4602      	mov	r2, r0
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	1ad3      	subs	r3, r2, r3
 8002676:	2b0a      	cmp	r3, #10
 8002678:	d90b      	bls.n	8002692 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800267e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2205      	movs	r2, #5
 800268a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e09f      	b.n	80027d2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	f003 0302 	and.w	r3, r3, #2
 800269c:	2b00      	cmp	r3, #0
 800269e:	d1e5      	bne.n	800266c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	7e1b      	ldrb	r3, [r3, #24]
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	d108      	bne.n	80026ba <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80026b6:	601a      	str	r2, [r3, #0]
 80026b8:	e007      	b.n	80026ca <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80026c8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	7e5b      	ldrb	r3, [r3, #25]
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d108      	bne.n	80026e4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80026e0:	601a      	str	r2, [r3, #0]
 80026e2:	e007      	b.n	80026f4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80026f2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	7e9b      	ldrb	r3, [r3, #26]
 80026f8:	2b01      	cmp	r3, #1
 80026fa:	d108      	bne.n	800270e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	681a      	ldr	r2, [r3, #0]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f042 0220 	orr.w	r2, r2, #32
 800270a:	601a      	str	r2, [r3, #0]
 800270c:	e007      	b.n	800271e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	681a      	ldr	r2, [r3, #0]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f022 0220 	bic.w	r2, r2, #32
 800271c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	7edb      	ldrb	r3, [r3, #27]
 8002722:	2b01      	cmp	r3, #1
 8002724:	d108      	bne.n	8002738 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f022 0210 	bic.w	r2, r2, #16
 8002734:	601a      	str	r2, [r3, #0]
 8002736:	e007      	b.n	8002748 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f042 0210 	orr.w	r2, r2, #16
 8002746:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	7f1b      	ldrb	r3, [r3, #28]
 800274c:	2b01      	cmp	r3, #1
 800274e:	d108      	bne.n	8002762 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f042 0208 	orr.w	r2, r2, #8
 800275e:	601a      	str	r2, [r3, #0]
 8002760:	e007      	b.n	8002772 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f022 0208 	bic.w	r2, r2, #8
 8002770:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	7f5b      	ldrb	r3, [r3, #29]
 8002776:	2b01      	cmp	r3, #1
 8002778:	d108      	bne.n	800278c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	681a      	ldr	r2, [r3, #0]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f042 0204 	orr.w	r2, r2, #4
 8002788:	601a      	str	r2, [r3, #0]
 800278a:	e007      	b.n	800279c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	681a      	ldr	r2, [r3, #0]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f022 0204 	bic.w	r2, r2, #4
 800279a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	689a      	ldr	r2, [r3, #8]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	68db      	ldr	r3, [r3, #12]
 80027a4:	431a      	orrs	r2, r3
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	691b      	ldr	r3, [r3, #16]
 80027aa:	431a      	orrs	r2, r3
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	695b      	ldr	r3, [r3, #20]
 80027b0:	ea42 0103 	orr.w	r1, r2, r3
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	1e5a      	subs	r2, r3, #1
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	430a      	orrs	r2, r1
 80027c0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2200      	movs	r2, #0
 80027c6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2201      	movs	r2, #1
 80027cc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80027d0:	2300      	movs	r3, #0
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	3710      	adds	r7, #16
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}
	...

080027dc <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80027dc:	b480      	push	{r7}
 80027de:	b087      	sub	sp, #28
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
 80027e4:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027f2:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80027f4:	7cfb      	ldrb	r3, [r7, #19]
 80027f6:	2b01      	cmp	r3, #1
 80027f8:	d003      	beq.n	8002802 <HAL_CAN_ConfigFilter+0x26>
 80027fa:	7cfb      	ldrb	r3, [r7, #19]
 80027fc:	2b02      	cmp	r3, #2
 80027fe:	f040 80be 	bne.w	800297e <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8002802:	4b65      	ldr	r3, [pc, #404]	; (8002998 <HAL_CAN_ConfigFilter+0x1bc>)
 8002804:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800280c:	f043 0201 	orr.w	r2, r3, #1
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800281c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002830:	021b      	lsls	r3, r3, #8
 8002832:	431a      	orrs	r2, r3
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	695b      	ldr	r3, [r3, #20]
 800283e:	f003 031f 	and.w	r3, r3, #31
 8002842:	2201      	movs	r2, #1
 8002844:	fa02 f303 	lsl.w	r3, r2, r3
 8002848:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	43db      	mvns	r3, r3
 8002854:	401a      	ands	r2, r3
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	69db      	ldr	r3, [r3, #28]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d123      	bne.n	80028ac <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	43db      	mvns	r3, r3
 800286e:	401a      	ands	r2, r3
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	68db      	ldr	r3, [r3, #12]
 800287a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002882:	683a      	ldr	r2, [r7, #0]
 8002884:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002886:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	3248      	adds	r2, #72	; 0x48
 800288c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80028a0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80028a2:	6979      	ldr	r1, [r7, #20]
 80028a4:	3348      	adds	r3, #72	; 0x48
 80028a6:	00db      	lsls	r3, r3, #3
 80028a8:	440b      	add	r3, r1
 80028aa:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	69db      	ldr	r3, [r3, #28]
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	d122      	bne.n	80028fa <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	431a      	orrs	r2, r3
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80028d0:	683a      	ldr	r2, [r7, #0]
 80028d2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80028d4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	3248      	adds	r2, #72	; 0x48
 80028da:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	68db      	ldr	r3, [r3, #12]
 80028e8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80028ee:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80028f0:	6979      	ldr	r1, [r7, #20]
 80028f2:	3348      	adds	r3, #72	; 0x48
 80028f4:	00db      	lsls	r3, r3, #3
 80028f6:	440b      	add	r3, r1
 80028f8:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	699b      	ldr	r3, [r3, #24]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d109      	bne.n	8002916 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	43db      	mvns	r3, r3
 800290c:	401a      	ands	r2, r3
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002914:	e007      	b.n	8002926 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	431a      	orrs	r2, r3
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	691b      	ldr	r3, [r3, #16]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d109      	bne.n	8002942 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	43db      	mvns	r3, r3
 8002938:	401a      	ands	r2, r3
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002940:	e007      	b.n	8002952 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	431a      	orrs	r2, r3
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	6a1b      	ldr	r3, [r3, #32]
 8002956:	2b01      	cmp	r3, #1
 8002958:	d107      	bne.n	800296a <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	431a      	orrs	r2, r3
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002970:	f023 0201 	bic.w	r2, r3, #1
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800297a:	2300      	movs	r3, #0
 800297c:	e006      	b.n	800298c <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002982:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800298a:	2301      	movs	r3, #1
  }
}
 800298c:	4618      	mov	r0, r3
 800298e:	371c      	adds	r7, #28
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr
 8002998:	40006400 	.word	0x40006400

0800299c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b084      	sub	sp, #16
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029aa:	b2db      	uxtb	r3, r3
 80029ac:	2b01      	cmp	r3, #1
 80029ae:	d12e      	bne.n	8002a0e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2202      	movs	r2, #2
 80029b4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	681a      	ldr	r2, [r3, #0]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f022 0201 	bic.w	r2, r2, #1
 80029c6:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80029c8:	f7ff fb6a 	bl	80020a0 <HAL_GetTick>
 80029cc:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80029ce:	e012      	b.n	80029f6 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80029d0:	f7ff fb66 	bl	80020a0 <HAL_GetTick>
 80029d4:	4602      	mov	r2, r0
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	1ad3      	subs	r3, r2, r3
 80029da:	2b0a      	cmp	r3, #10
 80029dc:	d90b      	bls.n	80029f6 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2205      	movs	r2, #5
 80029ee:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	e012      	b.n	8002a1c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	f003 0301 	and.w	r3, r3, #1
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d1e5      	bne.n	80029d0 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2200      	movs	r2, #0
 8002a08:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	e006      	b.n	8002a1c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a12:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
  }
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	3710      	adds	r7, #16
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}

08002a24 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b089      	sub	sp, #36	; 0x24
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	60f8      	str	r0, [r7, #12]
 8002a2c:	60b9      	str	r1, [r7, #8]
 8002a2e:	607a      	str	r2, [r7, #4]
 8002a30:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a38:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002a42:	7ffb      	ldrb	r3, [r7, #31]
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	d003      	beq.n	8002a50 <HAL_CAN_AddTxMessage+0x2c>
 8002a48:	7ffb      	ldrb	r3, [r7, #31]
 8002a4a:	2b02      	cmp	r3, #2
 8002a4c:	f040 80b8 	bne.w	8002bc0 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002a50:	69bb      	ldr	r3, [r7, #24]
 8002a52:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d10a      	bne.n	8002a70 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002a5a:	69bb      	ldr	r3, [r7, #24]
 8002a5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d105      	bne.n	8002a70 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002a64:	69bb      	ldr	r3, [r7, #24]
 8002a66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	f000 80a0 	beq.w	8002bb0 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002a70:	69bb      	ldr	r3, [r7, #24]
 8002a72:	0e1b      	lsrs	r3, r3, #24
 8002a74:	f003 0303 	and.w	r3, r3, #3
 8002a78:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	2b02      	cmp	r3, #2
 8002a7e:	d907      	bls.n	8002a90 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a84:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	e09e      	b.n	8002bce <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002a90:	2201      	movs	r2, #1
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	409a      	lsls	r2, r3
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d10d      	bne.n	8002abe <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002aac:	68f9      	ldr	r1, [r7, #12]
 8002aae:	6809      	ldr	r1, [r1, #0]
 8002ab0:	431a      	orrs	r2, r3
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	3318      	adds	r3, #24
 8002ab6:	011b      	lsls	r3, r3, #4
 8002ab8:	440b      	add	r3, r1
 8002aba:	601a      	str	r2, [r3, #0]
 8002abc:	e00f      	b.n	8002ade <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002abe:	68bb      	ldr	r3, [r7, #8]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002ac8:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002ace:	68f9      	ldr	r1, [r7, #12]
 8002ad0:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002ad2:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	3318      	adds	r3, #24
 8002ad8:	011b      	lsls	r3, r3, #4
 8002ada:	440b      	add	r3, r1
 8002adc:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	6819      	ldr	r1, [r3, #0]
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	691a      	ldr	r2, [r3, #16]
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	3318      	adds	r3, #24
 8002aea:	011b      	lsls	r3, r3, #4
 8002aec:	440b      	add	r3, r1
 8002aee:	3304      	adds	r3, #4
 8002af0:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	7d1b      	ldrb	r3, [r3, #20]
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d111      	bne.n	8002b1e <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	3318      	adds	r3, #24
 8002b02:	011b      	lsls	r3, r3, #4
 8002b04:	4413      	add	r3, r2
 8002b06:	3304      	adds	r3, #4
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	68fa      	ldr	r2, [r7, #12]
 8002b0c:	6811      	ldr	r1, [r2, #0]
 8002b0e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	3318      	adds	r3, #24
 8002b16:	011b      	lsls	r3, r3, #4
 8002b18:	440b      	add	r3, r1
 8002b1a:	3304      	adds	r3, #4
 8002b1c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	3307      	adds	r3, #7
 8002b22:	781b      	ldrb	r3, [r3, #0]
 8002b24:	061a      	lsls	r2, r3, #24
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	3306      	adds	r3, #6
 8002b2a:	781b      	ldrb	r3, [r3, #0]
 8002b2c:	041b      	lsls	r3, r3, #16
 8002b2e:	431a      	orrs	r2, r3
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	3305      	adds	r3, #5
 8002b34:	781b      	ldrb	r3, [r3, #0]
 8002b36:	021b      	lsls	r3, r3, #8
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	687a      	ldr	r2, [r7, #4]
 8002b3c:	3204      	adds	r2, #4
 8002b3e:	7812      	ldrb	r2, [r2, #0]
 8002b40:	4610      	mov	r0, r2
 8002b42:	68fa      	ldr	r2, [r7, #12]
 8002b44:	6811      	ldr	r1, [r2, #0]
 8002b46:	ea43 0200 	orr.w	r2, r3, r0
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	011b      	lsls	r3, r3, #4
 8002b4e:	440b      	add	r3, r1
 8002b50:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002b54:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	3303      	adds	r3, #3
 8002b5a:	781b      	ldrb	r3, [r3, #0]
 8002b5c:	061a      	lsls	r2, r3, #24
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	3302      	adds	r3, #2
 8002b62:	781b      	ldrb	r3, [r3, #0]
 8002b64:	041b      	lsls	r3, r3, #16
 8002b66:	431a      	orrs	r2, r3
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	3301      	adds	r3, #1
 8002b6c:	781b      	ldrb	r3, [r3, #0]
 8002b6e:	021b      	lsls	r3, r3, #8
 8002b70:	4313      	orrs	r3, r2
 8002b72:	687a      	ldr	r2, [r7, #4]
 8002b74:	7812      	ldrb	r2, [r2, #0]
 8002b76:	4610      	mov	r0, r2
 8002b78:	68fa      	ldr	r2, [r7, #12]
 8002b7a:	6811      	ldr	r1, [r2, #0]
 8002b7c:	ea43 0200 	orr.w	r2, r3, r0
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	011b      	lsls	r3, r3, #4
 8002b84:	440b      	add	r3, r1
 8002b86:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002b8a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681a      	ldr	r2, [r3, #0]
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	3318      	adds	r3, #24
 8002b94:	011b      	lsls	r3, r3, #4
 8002b96:	4413      	add	r3, r2
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	68fa      	ldr	r2, [r7, #12]
 8002b9c:	6811      	ldr	r1, [r2, #0]
 8002b9e:	f043 0201 	orr.w	r2, r3, #1
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	3318      	adds	r3, #24
 8002ba6:	011b      	lsls	r3, r3, #4
 8002ba8:	440b      	add	r3, r1
 8002baa:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002bac:	2300      	movs	r3, #0
 8002bae:	e00e      	b.n	8002bce <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	e006      	b.n	8002bce <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002bcc:	2301      	movs	r3, #1
  }
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3724      	adds	r7, #36	; 0x24
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd8:	4770      	bx	lr

08002bda <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8002bda:	b480      	push	{r7}
 8002bdc:	b085      	sub	sp, #20
 8002bde:	af00      	add	r7, sp, #0
 8002be0:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8002be2:	2300      	movs	r3, #0
 8002be4:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002bec:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8002bee:	7afb      	ldrb	r3, [r7, #11]
 8002bf0:	2b01      	cmp	r3, #1
 8002bf2:	d002      	beq.n	8002bfa <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8002bf4:	7afb      	ldrb	r3, [r7, #11]
 8002bf6:	2b02      	cmp	r3, #2
 8002bf8:	d11d      	bne.n	8002c36 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d002      	beq.n	8002c0e <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	3301      	adds	r3, #1
 8002c0c:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d002      	beq.n	8002c22 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	3301      	adds	r3, #1
 8002c20:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d002      	beq.n	8002c36 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	3301      	adds	r3, #1
 8002c34:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8002c36:	68fb      	ldr	r3, [r7, #12]
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	3714      	adds	r7, #20
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c42:	4770      	bx	lr

08002c44 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002c44:	b480      	push	{r7}
 8002c46:	b087      	sub	sp, #28
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	60f8      	str	r0, [r7, #12]
 8002c4c:	60b9      	str	r1, [r7, #8]
 8002c4e:	607a      	str	r2, [r7, #4]
 8002c50:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c58:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002c5a:	7dfb      	ldrb	r3, [r7, #23]
 8002c5c:	2b01      	cmp	r3, #1
 8002c5e:	d003      	beq.n	8002c68 <HAL_CAN_GetRxMessage+0x24>
 8002c60:	7dfb      	ldrb	r3, [r7, #23]
 8002c62:	2b02      	cmp	r3, #2
 8002c64:	f040 80f3 	bne.w	8002e4e <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d10e      	bne.n	8002c8c <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	68db      	ldr	r3, [r3, #12]
 8002c74:	f003 0303 	and.w	r3, r3, #3
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d116      	bne.n	8002caa <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c80:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	e0e7      	b.n	8002e5c <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	691b      	ldr	r3, [r3, #16]
 8002c92:	f003 0303 	and.w	r3, r3, #3
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d107      	bne.n	8002caa <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c9e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e0d8      	b.n	8002e5c <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	331b      	adds	r3, #27
 8002cb2:	011b      	lsls	r3, r3, #4
 8002cb4:	4413      	add	r3, r2
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f003 0204 	and.w	r2, r3, #4
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d10c      	bne.n	8002ce2 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	331b      	adds	r3, #27
 8002cd0:	011b      	lsls	r3, r3, #4
 8002cd2:	4413      	add	r3, r2
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	0d5b      	lsrs	r3, r3, #21
 8002cd8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	601a      	str	r2, [r3, #0]
 8002ce0:	e00b      	b.n	8002cfa <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	331b      	adds	r3, #27
 8002cea:	011b      	lsls	r3, r3, #4
 8002cec:	4413      	add	r3, r2
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	08db      	lsrs	r3, r3, #3
 8002cf2:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	331b      	adds	r3, #27
 8002d02:	011b      	lsls	r3, r3, #4
 8002d04:	4413      	add	r3, r2
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f003 0202 	and.w	r2, r3, #2
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	331b      	adds	r3, #27
 8002d18:	011b      	lsls	r3, r3, #4
 8002d1a:	4413      	add	r3, r2
 8002d1c:	3304      	adds	r3, #4
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f003 020f 	and.w	r2, r3, #15
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681a      	ldr	r2, [r3, #0]
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	331b      	adds	r3, #27
 8002d30:	011b      	lsls	r3, r3, #4
 8002d32:	4413      	add	r3, r2
 8002d34:	3304      	adds	r3, #4
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	0a1b      	lsrs	r3, r3, #8
 8002d3a:	b2da      	uxtb	r2, r3
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	331b      	adds	r3, #27
 8002d48:	011b      	lsls	r3, r3, #4
 8002d4a:	4413      	add	r3, r2
 8002d4c:	3304      	adds	r3, #4
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	0c1b      	lsrs	r3, r3, #16
 8002d52:	b29a      	uxth	r2, r3
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681a      	ldr	r2, [r3, #0]
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	011b      	lsls	r3, r3, #4
 8002d60:	4413      	add	r3, r2
 8002d62:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	b2da      	uxtb	r2, r3
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	011b      	lsls	r3, r3, #4
 8002d76:	4413      	add	r3, r2
 8002d78:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	0a1a      	lsrs	r2, r3, #8
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	3301      	adds	r3, #1
 8002d84:	b2d2      	uxtb	r2, r2
 8002d86:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681a      	ldr	r2, [r3, #0]
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	011b      	lsls	r3, r3, #4
 8002d90:	4413      	add	r3, r2
 8002d92:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	0c1a      	lsrs	r2, r3, #16
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	3302      	adds	r3, #2
 8002d9e:	b2d2      	uxtb	r2, r2
 8002da0:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	68bb      	ldr	r3, [r7, #8]
 8002da8:	011b      	lsls	r3, r3, #4
 8002daa:	4413      	add	r3, r2
 8002dac:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	0e1a      	lsrs	r2, r3, #24
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	3303      	adds	r3, #3
 8002db8:	b2d2      	uxtb	r2, r2
 8002dba:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	011b      	lsls	r3, r3, #4
 8002dc4:	4413      	add	r3, r2
 8002dc6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	3304      	adds	r3, #4
 8002dd0:	b2d2      	uxtb	r2, r2
 8002dd2:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681a      	ldr	r2, [r3, #0]
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	011b      	lsls	r3, r3, #4
 8002ddc:	4413      	add	r3, r2
 8002dde:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	0a1a      	lsrs	r2, r3, #8
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	3305      	adds	r3, #5
 8002dea:	b2d2      	uxtb	r2, r2
 8002dec:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681a      	ldr	r2, [r3, #0]
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	011b      	lsls	r3, r3, #4
 8002df6:	4413      	add	r3, r2
 8002df8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	0c1a      	lsrs	r2, r3, #16
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	3306      	adds	r3, #6
 8002e04:	b2d2      	uxtb	r2, r2
 8002e06:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681a      	ldr	r2, [r3, #0]
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	011b      	lsls	r3, r3, #4
 8002e10:	4413      	add	r3, r2
 8002e12:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	0e1a      	lsrs	r2, r3, #24
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	3307      	adds	r3, #7
 8002e1e:	b2d2      	uxtb	r2, r2
 8002e20:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d108      	bne.n	8002e3a <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	68da      	ldr	r2, [r3, #12]
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f042 0220 	orr.w	r2, r2, #32
 8002e36:	60da      	str	r2, [r3, #12]
 8002e38:	e007      	b.n	8002e4a <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	691a      	ldr	r2, [r3, #16]
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f042 0220 	orr.w	r2, r2, #32
 8002e48:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	e006      	b.n	8002e5c <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e52:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
  }
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	371c      	adds	r7, #28
 8002e60:	46bd      	mov	sp, r7
 8002e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e66:	4770      	bx	lr

08002e68 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b085      	sub	sp, #20
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
 8002e70:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e78:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002e7a:	7bfb      	ldrb	r3, [r7, #15]
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d002      	beq.n	8002e86 <HAL_CAN_ActivateNotification+0x1e>
 8002e80:	7bfb      	ldrb	r3, [r7, #15]
 8002e82:	2b02      	cmp	r3, #2
 8002e84:	d109      	bne.n	8002e9a <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	6959      	ldr	r1, [r3, #20]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	683a      	ldr	r2, [r7, #0]
 8002e92:	430a      	orrs	r2, r1
 8002e94:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002e96:	2300      	movs	r3, #0
 8002e98:	e006      	b.n	8002ea8 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e9e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
  }
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	3714      	adds	r7, #20
 8002eac:	46bd      	mov	sp, r7
 8002eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb2:	4770      	bx	lr

08002eb4 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b08a      	sub	sp, #40	; 0x28
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	695b      	ldr	r3, [r3, #20]
 8002ec6:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	689b      	ldr	r3, [r3, #8]
 8002ed6:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	68db      	ldr	r3, [r3, #12]
 8002ede:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	691b      	ldr	r3, [r3, #16]
 8002ee6:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	699b      	ldr	r3, [r3, #24]
 8002eee:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002ef0:	6a3b      	ldr	r3, [r7, #32]
 8002ef2:	f003 0301 	and.w	r3, r3, #1
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d07c      	beq.n	8002ff4 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002efa:	69bb      	ldr	r3, [r7, #24]
 8002efc:	f003 0301 	and.w	r3, r3, #1
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d023      	beq.n	8002f4c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	2201      	movs	r2, #1
 8002f0a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002f0c:	69bb      	ldr	r3, [r7, #24]
 8002f0e:	f003 0302 	and.w	r3, r3, #2
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d003      	beq.n	8002f1e <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002f16:	6878      	ldr	r0, [r7, #4]
 8002f18:	f000 f983 	bl	8003222 <HAL_CAN_TxMailbox0CompleteCallback>
 8002f1c:	e016      	b.n	8002f4c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002f1e:	69bb      	ldr	r3, [r7, #24]
 8002f20:	f003 0304 	and.w	r3, r3, #4
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d004      	beq.n	8002f32 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f2a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002f2e:	627b      	str	r3, [r7, #36]	; 0x24
 8002f30:	e00c      	b.n	8002f4c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002f32:	69bb      	ldr	r3, [r7, #24]
 8002f34:	f003 0308 	and.w	r3, r3, #8
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d004      	beq.n	8002f46 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f3e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002f42:	627b      	str	r3, [r7, #36]	; 0x24
 8002f44:	e002      	b.n	8002f4c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	f000 f989 	bl	800325e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002f4c:	69bb      	ldr	r3, [r7, #24]
 8002f4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d024      	beq.n	8002fa0 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f5e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002f60:	69bb      	ldr	r3, [r7, #24]
 8002f62:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d003      	beq.n	8002f72 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002f6a:	6878      	ldr	r0, [r7, #4]
 8002f6c:	f000 f963 	bl	8003236 <HAL_CAN_TxMailbox1CompleteCallback>
 8002f70:	e016      	b.n	8002fa0 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002f72:	69bb      	ldr	r3, [r7, #24]
 8002f74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d004      	beq.n	8002f86 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f7e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002f82:	627b      	str	r3, [r7, #36]	; 0x24
 8002f84:	e00c      	b.n	8002fa0 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002f86:	69bb      	ldr	r3, [r7, #24]
 8002f88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d004      	beq.n	8002f9a <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f92:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f96:	627b      	str	r3, [r7, #36]	; 0x24
 8002f98:	e002      	b.n	8002fa0 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002f9a:	6878      	ldr	r0, [r7, #4]
 8002f9c:	f000 f969 	bl	8003272 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002fa0:	69bb      	ldr	r3, [r7, #24]
 8002fa2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d024      	beq.n	8002ff4 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002fb2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002fb4:	69bb      	ldr	r3, [r7, #24]
 8002fb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d003      	beq.n	8002fc6 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	f000 f943 	bl	800324a <HAL_CAN_TxMailbox2CompleteCallback>
 8002fc4:	e016      	b.n	8002ff4 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002fc6:	69bb      	ldr	r3, [r7, #24]
 8002fc8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d004      	beq.n	8002fda <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002fd6:	627b      	str	r3, [r7, #36]	; 0x24
 8002fd8:	e00c      	b.n	8002ff4 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002fda:	69bb      	ldr	r3, [r7, #24]
 8002fdc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d004      	beq.n	8002fee <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fea:	627b      	str	r3, [r7, #36]	; 0x24
 8002fec:	e002      	b.n	8002ff4 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f000 f949 	bl	8003286 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002ff4:	6a3b      	ldr	r3, [r7, #32]
 8002ff6:	f003 0308 	and.w	r3, r3, #8
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d00c      	beq.n	8003018 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	f003 0310 	and.w	r3, r3, #16
 8003004:	2b00      	cmp	r3, #0
 8003006:	d007      	beq.n	8003018 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800300a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800300e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	2210      	movs	r2, #16
 8003016:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003018:	6a3b      	ldr	r3, [r7, #32]
 800301a:	f003 0304 	and.w	r3, r3, #4
 800301e:	2b00      	cmp	r3, #0
 8003020:	d00b      	beq.n	800303a <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	f003 0308 	and.w	r3, r3, #8
 8003028:	2b00      	cmp	r3, #0
 800302a:	d006      	beq.n	800303a <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	2208      	movs	r2, #8
 8003032:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003034:	6878      	ldr	r0, [r7, #4]
 8003036:	f000 f930 	bl	800329a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800303a:	6a3b      	ldr	r3, [r7, #32]
 800303c:	f003 0302 	and.w	r3, r3, #2
 8003040:	2b00      	cmp	r3, #0
 8003042:	d009      	beq.n	8003058 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	68db      	ldr	r3, [r3, #12]
 800304a:	f003 0303 	and.w	r3, r3, #3
 800304e:	2b00      	cmp	r3, #0
 8003050:	d002      	beq.n	8003058 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003052:	6878      	ldr	r0, [r7, #4]
 8003054:	f7fe f804 	bl	8001060 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003058:	6a3b      	ldr	r3, [r7, #32]
 800305a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800305e:	2b00      	cmp	r3, #0
 8003060:	d00c      	beq.n	800307c <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	f003 0310 	and.w	r3, r3, #16
 8003068:	2b00      	cmp	r3, #0
 800306a:	d007      	beq.n	800307c <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800306c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800306e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003072:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	2210      	movs	r2, #16
 800307a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800307c:	6a3b      	ldr	r3, [r7, #32]
 800307e:	f003 0320 	and.w	r3, r3, #32
 8003082:	2b00      	cmp	r3, #0
 8003084:	d00b      	beq.n	800309e <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	f003 0308 	and.w	r3, r3, #8
 800308c:	2b00      	cmp	r3, #0
 800308e:	d006      	beq.n	800309e <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	2208      	movs	r2, #8
 8003096:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003098:	6878      	ldr	r0, [r7, #4]
 800309a:	f000 f912 	bl	80032c2 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800309e:	6a3b      	ldr	r3, [r7, #32]
 80030a0:	f003 0310 	and.w	r3, r3, #16
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d009      	beq.n	80030bc <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	691b      	ldr	r3, [r3, #16]
 80030ae:	f003 0303 	and.w	r3, r3, #3
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d002      	beq.n	80030bc <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	f000 f8f9 	bl	80032ae <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80030bc:	6a3b      	ldr	r3, [r7, #32]
 80030be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d00b      	beq.n	80030de <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80030c6:	69fb      	ldr	r3, [r7, #28]
 80030c8:	f003 0310 	and.w	r3, r3, #16
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d006      	beq.n	80030de <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	2210      	movs	r2, #16
 80030d6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80030d8:	6878      	ldr	r0, [r7, #4]
 80030da:	f000 f8fc 	bl	80032d6 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80030de:	6a3b      	ldr	r3, [r7, #32]
 80030e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d00b      	beq.n	8003100 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80030e8:	69fb      	ldr	r3, [r7, #28]
 80030ea:	f003 0308 	and.w	r3, r3, #8
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d006      	beq.n	8003100 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	2208      	movs	r2, #8
 80030f8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f000 f8f5 	bl	80032ea <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003100:	6a3b      	ldr	r3, [r7, #32]
 8003102:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003106:	2b00      	cmp	r3, #0
 8003108:	d07b      	beq.n	8003202 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800310a:	69fb      	ldr	r3, [r7, #28]
 800310c:	f003 0304 	and.w	r3, r3, #4
 8003110:	2b00      	cmp	r3, #0
 8003112:	d072      	beq.n	80031fa <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003114:	6a3b      	ldr	r3, [r7, #32]
 8003116:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800311a:	2b00      	cmp	r3, #0
 800311c:	d008      	beq.n	8003130 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003124:	2b00      	cmp	r3, #0
 8003126:	d003      	beq.n	8003130 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800312a:	f043 0301 	orr.w	r3, r3, #1
 800312e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003130:	6a3b      	ldr	r3, [r7, #32]
 8003132:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003136:	2b00      	cmp	r3, #0
 8003138:	d008      	beq.n	800314c <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003140:	2b00      	cmp	r3, #0
 8003142:	d003      	beq.n	800314c <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003146:	f043 0302 	orr.w	r3, r3, #2
 800314a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800314c:	6a3b      	ldr	r3, [r7, #32]
 800314e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003152:	2b00      	cmp	r3, #0
 8003154:	d008      	beq.n	8003168 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800315c:	2b00      	cmp	r3, #0
 800315e:	d003      	beq.n	8003168 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003162:	f043 0304 	orr.w	r3, r3, #4
 8003166:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003168:	6a3b      	ldr	r3, [r7, #32]
 800316a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800316e:	2b00      	cmp	r3, #0
 8003170:	d043      	beq.n	80031fa <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003178:	2b00      	cmp	r3, #0
 800317a:	d03e      	beq.n	80031fa <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003182:	2b60      	cmp	r3, #96	; 0x60
 8003184:	d02b      	beq.n	80031de <HAL_CAN_IRQHandler+0x32a>
 8003186:	2b60      	cmp	r3, #96	; 0x60
 8003188:	d82e      	bhi.n	80031e8 <HAL_CAN_IRQHandler+0x334>
 800318a:	2b50      	cmp	r3, #80	; 0x50
 800318c:	d022      	beq.n	80031d4 <HAL_CAN_IRQHandler+0x320>
 800318e:	2b50      	cmp	r3, #80	; 0x50
 8003190:	d82a      	bhi.n	80031e8 <HAL_CAN_IRQHandler+0x334>
 8003192:	2b40      	cmp	r3, #64	; 0x40
 8003194:	d019      	beq.n	80031ca <HAL_CAN_IRQHandler+0x316>
 8003196:	2b40      	cmp	r3, #64	; 0x40
 8003198:	d826      	bhi.n	80031e8 <HAL_CAN_IRQHandler+0x334>
 800319a:	2b30      	cmp	r3, #48	; 0x30
 800319c:	d010      	beq.n	80031c0 <HAL_CAN_IRQHandler+0x30c>
 800319e:	2b30      	cmp	r3, #48	; 0x30
 80031a0:	d822      	bhi.n	80031e8 <HAL_CAN_IRQHandler+0x334>
 80031a2:	2b10      	cmp	r3, #16
 80031a4:	d002      	beq.n	80031ac <HAL_CAN_IRQHandler+0x2f8>
 80031a6:	2b20      	cmp	r3, #32
 80031a8:	d005      	beq.n	80031b6 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80031aa:	e01d      	b.n	80031e8 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80031ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ae:	f043 0308 	orr.w	r3, r3, #8
 80031b2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80031b4:	e019      	b.n	80031ea <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80031b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b8:	f043 0310 	orr.w	r3, r3, #16
 80031bc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80031be:	e014      	b.n	80031ea <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80031c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c2:	f043 0320 	orr.w	r3, r3, #32
 80031c6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80031c8:	e00f      	b.n	80031ea <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80031ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80031d0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80031d2:	e00a      	b.n	80031ea <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80031d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031da:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80031dc:	e005      	b.n	80031ea <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80031de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031e4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80031e6:	e000      	b.n	80031ea <HAL_CAN_IRQHandler+0x336>
            break;
 80031e8:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	699a      	ldr	r2, [r3, #24]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80031f8:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	2204      	movs	r2, #4
 8003200:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003204:	2b00      	cmp	r3, #0
 8003206:	d008      	beq.n	800321a <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800320c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800320e:	431a      	orrs	r2, r3
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003214:	6878      	ldr	r0, [r7, #4]
 8003216:	f000 f872 	bl	80032fe <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800321a:	bf00      	nop
 800321c:	3728      	adds	r7, #40	; 0x28
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}

08003222 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003222:	b480      	push	{r7}
 8003224:	b083      	sub	sp, #12
 8003226:	af00      	add	r7, sp, #0
 8003228:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800322a:	bf00      	nop
 800322c:	370c      	adds	r7, #12
 800322e:	46bd      	mov	sp, r7
 8003230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003234:	4770      	bx	lr

08003236 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003236:	b480      	push	{r7}
 8003238:	b083      	sub	sp, #12
 800323a:	af00      	add	r7, sp, #0
 800323c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800323e:	bf00      	nop
 8003240:	370c      	adds	r7, #12
 8003242:	46bd      	mov	sp, r7
 8003244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003248:	4770      	bx	lr

0800324a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800324a:	b480      	push	{r7}
 800324c:	b083      	sub	sp, #12
 800324e:	af00      	add	r7, sp, #0
 8003250:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003252:	bf00      	nop
 8003254:	370c      	adds	r7, #12
 8003256:	46bd      	mov	sp, r7
 8003258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325c:	4770      	bx	lr

0800325e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800325e:	b480      	push	{r7}
 8003260:	b083      	sub	sp, #12
 8003262:	af00      	add	r7, sp, #0
 8003264:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003266:	bf00      	nop
 8003268:	370c      	adds	r7, #12
 800326a:	46bd      	mov	sp, r7
 800326c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003270:	4770      	bx	lr

08003272 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003272:	b480      	push	{r7}
 8003274:	b083      	sub	sp, #12
 8003276:	af00      	add	r7, sp, #0
 8003278:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800327a:	bf00      	nop
 800327c:	370c      	adds	r7, #12
 800327e:	46bd      	mov	sp, r7
 8003280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003284:	4770      	bx	lr

08003286 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003286:	b480      	push	{r7}
 8003288:	b083      	sub	sp, #12
 800328a:	af00      	add	r7, sp, #0
 800328c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800328e:	bf00      	nop
 8003290:	370c      	adds	r7, #12
 8003292:	46bd      	mov	sp, r7
 8003294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003298:	4770      	bx	lr

0800329a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800329a:	b480      	push	{r7}
 800329c:	b083      	sub	sp, #12
 800329e:	af00      	add	r7, sp, #0
 80032a0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80032a2:	bf00      	nop
 80032a4:	370c      	adds	r7, #12
 80032a6:	46bd      	mov	sp, r7
 80032a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ac:	4770      	bx	lr

080032ae <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80032ae:	b480      	push	{r7}
 80032b0:	b083      	sub	sp, #12
 80032b2:	af00      	add	r7, sp, #0
 80032b4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80032b6:	bf00      	nop
 80032b8:	370c      	adds	r7, #12
 80032ba:	46bd      	mov	sp, r7
 80032bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c0:	4770      	bx	lr

080032c2 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80032c2:	b480      	push	{r7}
 80032c4:	b083      	sub	sp, #12
 80032c6:	af00      	add	r7, sp, #0
 80032c8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80032ca:	bf00      	nop
 80032cc:	370c      	adds	r7, #12
 80032ce:	46bd      	mov	sp, r7
 80032d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d4:	4770      	bx	lr

080032d6 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80032d6:	b480      	push	{r7}
 80032d8:	b083      	sub	sp, #12
 80032da:	af00      	add	r7, sp, #0
 80032dc:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80032de:	bf00      	nop
 80032e0:	370c      	adds	r7, #12
 80032e2:	46bd      	mov	sp, r7
 80032e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e8:	4770      	bx	lr

080032ea <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80032ea:	b480      	push	{r7}
 80032ec:	b083      	sub	sp, #12
 80032ee:	af00      	add	r7, sp, #0
 80032f0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80032f2:	bf00      	nop
 80032f4:	370c      	adds	r7, #12
 80032f6:	46bd      	mov	sp, r7
 80032f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fc:	4770      	bx	lr

080032fe <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80032fe:	b480      	push	{r7}
 8003300:	b083      	sub	sp, #12
 8003302:	af00      	add	r7, sp, #0
 8003304:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003306:	bf00      	nop
 8003308:	370c      	adds	r7, #12
 800330a:	46bd      	mov	sp, r7
 800330c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003310:	4770      	bx	lr
	...

08003314 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003314:	b480      	push	{r7}
 8003316:	b085      	sub	sp, #20
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	f003 0307 	and.w	r3, r3, #7
 8003322:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003324:	4b0c      	ldr	r3, [pc, #48]	; (8003358 <__NVIC_SetPriorityGrouping+0x44>)
 8003326:	68db      	ldr	r3, [r3, #12]
 8003328:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800332a:	68ba      	ldr	r2, [r7, #8]
 800332c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003330:	4013      	ands	r3, r2
 8003332:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800333c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003340:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003344:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003346:	4a04      	ldr	r2, [pc, #16]	; (8003358 <__NVIC_SetPriorityGrouping+0x44>)
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	60d3      	str	r3, [r2, #12]
}
 800334c:	bf00      	nop
 800334e:	3714      	adds	r7, #20
 8003350:	46bd      	mov	sp, r7
 8003352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003356:	4770      	bx	lr
 8003358:	e000ed00 	.word	0xe000ed00

0800335c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800335c:	b480      	push	{r7}
 800335e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003360:	4b04      	ldr	r3, [pc, #16]	; (8003374 <__NVIC_GetPriorityGrouping+0x18>)
 8003362:	68db      	ldr	r3, [r3, #12]
 8003364:	0a1b      	lsrs	r3, r3, #8
 8003366:	f003 0307 	and.w	r3, r3, #7
}
 800336a:	4618      	mov	r0, r3
 800336c:	46bd      	mov	sp, r7
 800336e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003372:	4770      	bx	lr
 8003374:	e000ed00 	.word	0xe000ed00

08003378 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003378:	b480      	push	{r7}
 800337a:	b083      	sub	sp, #12
 800337c:	af00      	add	r7, sp, #0
 800337e:	4603      	mov	r3, r0
 8003380:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003382:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003386:	2b00      	cmp	r3, #0
 8003388:	db0b      	blt.n	80033a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800338a:	79fb      	ldrb	r3, [r7, #7]
 800338c:	f003 021f 	and.w	r2, r3, #31
 8003390:	4907      	ldr	r1, [pc, #28]	; (80033b0 <__NVIC_EnableIRQ+0x38>)
 8003392:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003396:	095b      	lsrs	r3, r3, #5
 8003398:	2001      	movs	r0, #1
 800339a:	fa00 f202 	lsl.w	r2, r0, r2
 800339e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80033a2:	bf00      	nop
 80033a4:	370c      	adds	r7, #12
 80033a6:	46bd      	mov	sp, r7
 80033a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ac:	4770      	bx	lr
 80033ae:	bf00      	nop
 80033b0:	e000e100 	.word	0xe000e100

080033b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b083      	sub	sp, #12
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	4603      	mov	r3, r0
 80033bc:	6039      	str	r1, [r7, #0]
 80033be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	db0a      	blt.n	80033de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	b2da      	uxtb	r2, r3
 80033cc:	490c      	ldr	r1, [pc, #48]	; (8003400 <__NVIC_SetPriority+0x4c>)
 80033ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033d2:	0112      	lsls	r2, r2, #4
 80033d4:	b2d2      	uxtb	r2, r2
 80033d6:	440b      	add	r3, r1
 80033d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80033dc:	e00a      	b.n	80033f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	b2da      	uxtb	r2, r3
 80033e2:	4908      	ldr	r1, [pc, #32]	; (8003404 <__NVIC_SetPriority+0x50>)
 80033e4:	79fb      	ldrb	r3, [r7, #7]
 80033e6:	f003 030f 	and.w	r3, r3, #15
 80033ea:	3b04      	subs	r3, #4
 80033ec:	0112      	lsls	r2, r2, #4
 80033ee:	b2d2      	uxtb	r2, r2
 80033f0:	440b      	add	r3, r1
 80033f2:	761a      	strb	r2, [r3, #24]
}
 80033f4:	bf00      	nop
 80033f6:	370c      	adds	r7, #12
 80033f8:	46bd      	mov	sp, r7
 80033fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fe:	4770      	bx	lr
 8003400:	e000e100 	.word	0xe000e100
 8003404:	e000ed00 	.word	0xe000ed00

08003408 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003408:	b480      	push	{r7}
 800340a:	b089      	sub	sp, #36	; 0x24
 800340c:	af00      	add	r7, sp, #0
 800340e:	60f8      	str	r0, [r7, #12]
 8003410:	60b9      	str	r1, [r7, #8]
 8003412:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	f003 0307 	and.w	r3, r3, #7
 800341a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800341c:	69fb      	ldr	r3, [r7, #28]
 800341e:	f1c3 0307 	rsb	r3, r3, #7
 8003422:	2b04      	cmp	r3, #4
 8003424:	bf28      	it	cs
 8003426:	2304      	movcs	r3, #4
 8003428:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800342a:	69fb      	ldr	r3, [r7, #28]
 800342c:	3304      	adds	r3, #4
 800342e:	2b06      	cmp	r3, #6
 8003430:	d902      	bls.n	8003438 <NVIC_EncodePriority+0x30>
 8003432:	69fb      	ldr	r3, [r7, #28]
 8003434:	3b03      	subs	r3, #3
 8003436:	e000      	b.n	800343a <NVIC_EncodePriority+0x32>
 8003438:	2300      	movs	r3, #0
 800343a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800343c:	f04f 32ff 	mov.w	r2, #4294967295
 8003440:	69bb      	ldr	r3, [r7, #24]
 8003442:	fa02 f303 	lsl.w	r3, r2, r3
 8003446:	43da      	mvns	r2, r3
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	401a      	ands	r2, r3
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003450:	f04f 31ff 	mov.w	r1, #4294967295
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	fa01 f303 	lsl.w	r3, r1, r3
 800345a:	43d9      	mvns	r1, r3
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003460:	4313      	orrs	r3, r2
         );
}
 8003462:	4618      	mov	r0, r3
 8003464:	3724      	adds	r7, #36	; 0x24
 8003466:	46bd      	mov	sp, r7
 8003468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346c:	4770      	bx	lr
	...

08003470 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b082      	sub	sp, #8
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	3b01      	subs	r3, #1
 800347c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003480:	d301      	bcc.n	8003486 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003482:	2301      	movs	r3, #1
 8003484:	e00f      	b.n	80034a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003486:	4a0a      	ldr	r2, [pc, #40]	; (80034b0 <SysTick_Config+0x40>)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	3b01      	subs	r3, #1
 800348c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800348e:	210f      	movs	r1, #15
 8003490:	f04f 30ff 	mov.w	r0, #4294967295
 8003494:	f7ff ff8e 	bl	80033b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003498:	4b05      	ldr	r3, [pc, #20]	; (80034b0 <SysTick_Config+0x40>)
 800349a:	2200      	movs	r2, #0
 800349c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800349e:	4b04      	ldr	r3, [pc, #16]	; (80034b0 <SysTick_Config+0x40>)
 80034a0:	2207      	movs	r2, #7
 80034a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80034a4:	2300      	movs	r3, #0
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	3708      	adds	r7, #8
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}
 80034ae:	bf00      	nop
 80034b0:	e000e010 	.word	0xe000e010

080034b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b082      	sub	sp, #8
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80034bc:	6878      	ldr	r0, [r7, #4]
 80034be:	f7ff ff29 	bl	8003314 <__NVIC_SetPriorityGrouping>
}
 80034c2:	bf00      	nop
 80034c4:	3708      	adds	r7, #8
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}

080034ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80034ca:	b580      	push	{r7, lr}
 80034cc:	b086      	sub	sp, #24
 80034ce:	af00      	add	r7, sp, #0
 80034d0:	4603      	mov	r3, r0
 80034d2:	60b9      	str	r1, [r7, #8]
 80034d4:	607a      	str	r2, [r7, #4]
 80034d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80034d8:	2300      	movs	r3, #0
 80034da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80034dc:	f7ff ff3e 	bl	800335c <__NVIC_GetPriorityGrouping>
 80034e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034e2:	687a      	ldr	r2, [r7, #4]
 80034e4:	68b9      	ldr	r1, [r7, #8]
 80034e6:	6978      	ldr	r0, [r7, #20]
 80034e8:	f7ff ff8e 	bl	8003408 <NVIC_EncodePriority>
 80034ec:	4602      	mov	r2, r0
 80034ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034f2:	4611      	mov	r1, r2
 80034f4:	4618      	mov	r0, r3
 80034f6:	f7ff ff5d 	bl	80033b4 <__NVIC_SetPriority>
}
 80034fa:	bf00      	nop
 80034fc:	3718      	adds	r7, #24
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}

08003502 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003502:	b580      	push	{r7, lr}
 8003504:	b082      	sub	sp, #8
 8003506:	af00      	add	r7, sp, #0
 8003508:	4603      	mov	r3, r0
 800350a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800350c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003510:	4618      	mov	r0, r3
 8003512:	f7ff ff31 	bl	8003378 <__NVIC_EnableIRQ>
}
 8003516:	bf00      	nop
 8003518:	3708      	adds	r7, #8
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}

0800351e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800351e:	b580      	push	{r7, lr}
 8003520:	b082      	sub	sp, #8
 8003522:	af00      	add	r7, sp, #0
 8003524:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	f7ff ffa2 	bl	8003470 <SysTick_Config>
 800352c:	4603      	mov	r3, r0
}
 800352e:	4618      	mov	r0, r3
 8003530:	3708      	adds	r7, #8
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}

08003536 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003536:	b580      	push	{r7, lr}
 8003538:	b082      	sub	sp, #8
 800353a:	af00      	add	r7, sp, #0
 800353c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d101      	bne.n	8003548 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003544:	2301      	movs	r3, #1
 8003546:	e014      	b.n	8003572 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	791b      	ldrb	r3, [r3, #4]
 800354c:	b2db      	uxtb	r3, r3
 800354e:	2b00      	cmp	r3, #0
 8003550:	d105      	bne.n	800355e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2200      	movs	r2, #0
 8003556:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003558:	6878      	ldr	r0, [r7, #4]
 800355a:	f7fd f9d5 	bl	8000908 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2202      	movs	r2, #2
 8003562:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2200      	movs	r2, #0
 8003568:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2201      	movs	r2, #1
 800356e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003570:	2300      	movs	r3, #0
}
 8003572:	4618      	mov	r0, r3
 8003574:	3708      	adds	r7, #8
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}

0800357a <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800357a:	b480      	push	{r7}
 800357c:	b087      	sub	sp, #28
 800357e:	af00      	add	r7, sp, #0
 8003580:	60f8      	str	r0, [r7, #12]
 8003582:	60b9      	str	r1, [r7, #8]
 8003584:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	795b      	ldrb	r3, [r3, #5]
 800358a:	2b01      	cmp	r3, #1
 800358c:	d101      	bne.n	8003592 <HAL_DAC_ConfigChannel+0x18>
 800358e:	2302      	movs	r3, #2
 8003590:	e03c      	b.n	800360c <HAL_DAC_ConfigChannel+0x92>
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	2201      	movs	r2, #1
 8003596:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	2202      	movs	r2, #2
 800359c:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	f003 0310 	and.w	r3, r3, #16
 80035ac:	f640 72fe 	movw	r2, #4094	; 0xffe
 80035b0:	fa02 f303 	lsl.w	r3, r2, r3
 80035b4:	43db      	mvns	r3, r3
 80035b6:	697a      	ldr	r2, [r7, #20]
 80035b8:	4013      	ands	r3, r2
 80035ba:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	681a      	ldr	r2, [r3, #0]
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	4313      	orrs	r3, r2
 80035c6:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	f003 0310 	and.w	r3, r3, #16
 80035ce:	693a      	ldr	r2, [r7, #16]
 80035d0:	fa02 f303 	lsl.w	r3, r2, r3
 80035d4:	697a      	ldr	r2, [r7, #20]
 80035d6:	4313      	orrs	r3, r2
 80035d8:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	697a      	ldr	r2, [r7, #20]
 80035e0:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	6819      	ldr	r1, [r3, #0]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	f003 0310 	and.w	r3, r3, #16
 80035ee:	22c0      	movs	r2, #192	; 0xc0
 80035f0:	fa02 f303 	lsl.w	r3, r2, r3
 80035f4:	43da      	mvns	r2, r3
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	400a      	ands	r2, r1
 80035fc:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	2201      	movs	r2, #1
 8003602:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2200      	movs	r2, #0
 8003608:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800360a:	2300      	movs	r3, #0
}
 800360c:	4618      	mov	r0, r3
 800360e:	371c      	adds	r7, #28
 8003610:	46bd      	mov	sp, r7
 8003612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003616:	4770      	bx	lr

08003618 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b086      	sub	sp, #24
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003620:	2300      	movs	r3, #0
 8003622:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003624:	f7fe fd3c 	bl	80020a0 <HAL_GetTick>
 8003628:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d101      	bne.n	8003634 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003630:	2301      	movs	r3, #1
 8003632:	e099      	b.n	8003768 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2202      	movs	r2, #2
 8003638:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2200      	movs	r2, #0
 8003640:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f022 0201 	bic.w	r2, r2, #1
 8003652:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003654:	e00f      	b.n	8003676 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003656:	f7fe fd23 	bl	80020a0 <HAL_GetTick>
 800365a:	4602      	mov	r2, r0
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	1ad3      	subs	r3, r2, r3
 8003660:	2b05      	cmp	r3, #5
 8003662:	d908      	bls.n	8003676 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2220      	movs	r2, #32
 8003668:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2203      	movs	r2, #3
 800366e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003672:	2303      	movs	r3, #3
 8003674:	e078      	b.n	8003768 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f003 0301 	and.w	r3, r3, #1
 8003680:	2b00      	cmp	r3, #0
 8003682:	d1e8      	bne.n	8003656 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800368c:	697a      	ldr	r2, [r7, #20]
 800368e:	4b38      	ldr	r3, [pc, #224]	; (8003770 <HAL_DMA_Init+0x158>)
 8003690:	4013      	ands	r3, r2
 8003692:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	685a      	ldr	r2, [r3, #4]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80036a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	691b      	ldr	r3, [r3, #16]
 80036a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	699b      	ldr	r3, [r3, #24]
 80036b4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036ba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6a1b      	ldr	r3, [r3, #32]
 80036c0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80036c2:	697a      	ldr	r2, [r7, #20]
 80036c4:	4313      	orrs	r3, r2
 80036c6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036cc:	2b04      	cmp	r3, #4
 80036ce:	d107      	bne.n	80036e0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d8:	4313      	orrs	r3, r2
 80036da:	697a      	ldr	r2, [r7, #20]
 80036dc:	4313      	orrs	r3, r2
 80036de:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	697a      	ldr	r2, [r7, #20]
 80036e6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	695b      	ldr	r3, [r3, #20]
 80036ee:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	f023 0307 	bic.w	r3, r3, #7
 80036f6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036fc:	697a      	ldr	r2, [r7, #20]
 80036fe:	4313      	orrs	r3, r2
 8003700:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003706:	2b04      	cmp	r3, #4
 8003708:	d117      	bne.n	800373a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800370e:	697a      	ldr	r2, [r7, #20]
 8003710:	4313      	orrs	r3, r2
 8003712:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003718:	2b00      	cmp	r3, #0
 800371a:	d00e      	beq.n	800373a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800371c:	6878      	ldr	r0, [r7, #4]
 800371e:	f000 fb0d 	bl	8003d3c <DMA_CheckFifoParam>
 8003722:	4603      	mov	r3, r0
 8003724:	2b00      	cmp	r3, #0
 8003726:	d008      	beq.n	800373a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2240      	movs	r2, #64	; 0x40
 800372c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2201      	movs	r2, #1
 8003732:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003736:	2301      	movs	r3, #1
 8003738:	e016      	b.n	8003768 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	697a      	ldr	r2, [r7, #20]
 8003740:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	f000 fac4 	bl	8003cd0 <DMA_CalcBaseAndBitshift>
 8003748:	4603      	mov	r3, r0
 800374a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003750:	223f      	movs	r2, #63	; 0x3f
 8003752:	409a      	lsls	r2, r3
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2200      	movs	r2, #0
 800375c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2201      	movs	r2, #1
 8003762:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003766:	2300      	movs	r3, #0
}
 8003768:	4618      	mov	r0, r3
 800376a:	3718      	adds	r7, #24
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}
 8003770:	f010803f 	.word	0xf010803f

08003774 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b086      	sub	sp, #24
 8003778:	af00      	add	r7, sp, #0
 800377a:	60f8      	str	r0, [r7, #12]
 800377c:	60b9      	str	r1, [r7, #8]
 800377e:	607a      	str	r2, [r7, #4]
 8003780:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003782:	2300      	movs	r3, #0
 8003784:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800378a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003792:	2b01      	cmp	r3, #1
 8003794:	d101      	bne.n	800379a <HAL_DMA_Start_IT+0x26>
 8003796:	2302      	movs	r3, #2
 8003798:	e040      	b.n	800381c <HAL_DMA_Start_IT+0xa8>
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	2201      	movs	r2, #1
 800379e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	2b01      	cmp	r3, #1
 80037ac:	d12f      	bne.n	800380e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	2202      	movs	r2, #2
 80037b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	2200      	movs	r2, #0
 80037ba:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	687a      	ldr	r2, [r7, #4]
 80037c0:	68b9      	ldr	r1, [r7, #8]
 80037c2:	68f8      	ldr	r0, [r7, #12]
 80037c4:	f000 fa56 	bl	8003c74 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037cc:	223f      	movs	r2, #63	; 0x3f
 80037ce:	409a      	lsls	r2, r3
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	681a      	ldr	r2, [r3, #0]
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f042 0216 	orr.w	r2, r2, #22
 80037e2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d007      	beq.n	80037fc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	681a      	ldr	r2, [r3, #0]
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f042 0208 	orr.w	r2, r2, #8
 80037fa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f042 0201 	orr.w	r2, r2, #1
 800380a:	601a      	str	r2, [r3, #0]
 800380c:	e005      	b.n	800381a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	2200      	movs	r2, #0
 8003812:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003816:	2302      	movs	r3, #2
 8003818:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800381a:	7dfb      	ldrb	r3, [r7, #23]
}
 800381c:	4618      	mov	r0, r3
 800381e:	3718      	adds	r7, #24
 8003820:	46bd      	mov	sp, r7
 8003822:	bd80      	pop	{r7, pc}

08003824 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b084      	sub	sp, #16
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003830:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003832:	f7fe fc35 	bl	80020a0 <HAL_GetTick>
 8003836:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800383e:	b2db      	uxtb	r3, r3
 8003840:	2b02      	cmp	r3, #2
 8003842:	d008      	beq.n	8003856 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2280      	movs	r2, #128	; 0x80
 8003848:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2200      	movs	r2, #0
 800384e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003852:	2301      	movs	r3, #1
 8003854:	e052      	b.n	80038fc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	681a      	ldr	r2, [r3, #0]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f022 0216 	bic.w	r2, r2, #22
 8003864:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	695a      	ldr	r2, [r3, #20]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003874:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800387a:	2b00      	cmp	r3, #0
 800387c:	d103      	bne.n	8003886 <HAL_DMA_Abort+0x62>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003882:	2b00      	cmp	r3, #0
 8003884:	d007      	beq.n	8003896 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	681a      	ldr	r2, [r3, #0]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f022 0208 	bic.w	r2, r2, #8
 8003894:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	681a      	ldr	r2, [r3, #0]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f022 0201 	bic.w	r2, r2, #1
 80038a4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80038a6:	e013      	b.n	80038d0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80038a8:	f7fe fbfa 	bl	80020a0 <HAL_GetTick>
 80038ac:	4602      	mov	r2, r0
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	1ad3      	subs	r3, r2, r3
 80038b2:	2b05      	cmp	r3, #5
 80038b4:	d90c      	bls.n	80038d0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2220      	movs	r2, #32
 80038ba:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2203      	movs	r2, #3
 80038c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2200      	movs	r2, #0
 80038c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80038cc:	2303      	movs	r3, #3
 80038ce:	e015      	b.n	80038fc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f003 0301 	and.w	r3, r3, #1
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d1e4      	bne.n	80038a8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038e2:	223f      	movs	r2, #63	; 0x3f
 80038e4:	409a      	lsls	r2, r3
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2201      	movs	r2, #1
 80038ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2200      	movs	r2, #0
 80038f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80038fa:	2300      	movs	r3, #0
}
 80038fc:	4618      	mov	r0, r3
 80038fe:	3710      	adds	r7, #16
 8003900:	46bd      	mov	sp, r7
 8003902:	bd80      	pop	{r7, pc}

08003904 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003904:	b480      	push	{r7}
 8003906:	b083      	sub	sp, #12
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003912:	b2db      	uxtb	r3, r3
 8003914:	2b02      	cmp	r3, #2
 8003916:	d004      	beq.n	8003922 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2280      	movs	r2, #128	; 0x80
 800391c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	e00c      	b.n	800393c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2205      	movs	r2, #5
 8003926:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	681a      	ldr	r2, [r3, #0]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f022 0201 	bic.w	r2, r2, #1
 8003938:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800393a:	2300      	movs	r3, #0
}
 800393c:	4618      	mov	r0, r3
 800393e:	370c      	adds	r7, #12
 8003940:	46bd      	mov	sp, r7
 8003942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003946:	4770      	bx	lr

08003948 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b086      	sub	sp, #24
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003950:	2300      	movs	r3, #0
 8003952:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003954:	4b92      	ldr	r3, [pc, #584]	; (8003ba0 <HAL_DMA_IRQHandler+0x258>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a92      	ldr	r2, [pc, #584]	; (8003ba4 <HAL_DMA_IRQHandler+0x25c>)
 800395a:	fba2 2303 	umull	r2, r3, r2, r3
 800395e:	0a9b      	lsrs	r3, r3, #10
 8003960:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003966:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003968:	693b      	ldr	r3, [r7, #16]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003972:	2208      	movs	r2, #8
 8003974:	409a      	lsls	r2, r3
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	4013      	ands	r3, r2
 800397a:	2b00      	cmp	r3, #0
 800397c:	d01a      	beq.n	80039b4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f003 0304 	and.w	r3, r3, #4
 8003988:	2b00      	cmp	r3, #0
 800398a:	d013      	beq.n	80039b4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	681a      	ldr	r2, [r3, #0]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f022 0204 	bic.w	r2, r2, #4
 800399a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039a0:	2208      	movs	r2, #8
 80039a2:	409a      	lsls	r2, r3
 80039a4:	693b      	ldr	r3, [r7, #16]
 80039a6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039ac:	f043 0201 	orr.w	r2, r3, #1
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039b8:	2201      	movs	r2, #1
 80039ba:	409a      	lsls	r2, r3
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	4013      	ands	r3, r2
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d012      	beq.n	80039ea <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	695b      	ldr	r3, [r3, #20]
 80039ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d00b      	beq.n	80039ea <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039d6:	2201      	movs	r2, #1
 80039d8:	409a      	lsls	r2, r3
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039e2:	f043 0202 	orr.w	r2, r3, #2
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039ee:	2204      	movs	r2, #4
 80039f0:	409a      	lsls	r2, r3
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	4013      	ands	r3, r2
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d012      	beq.n	8003a20 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f003 0302 	and.w	r3, r3, #2
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d00b      	beq.n	8003a20 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a0c:	2204      	movs	r2, #4
 8003a0e:	409a      	lsls	r2, r3
 8003a10:	693b      	ldr	r3, [r7, #16]
 8003a12:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a18:	f043 0204 	orr.w	r2, r3, #4
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a24:	2210      	movs	r2, #16
 8003a26:	409a      	lsls	r2, r3
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	4013      	ands	r3, r2
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d043      	beq.n	8003ab8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f003 0308 	and.w	r3, r3, #8
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d03c      	beq.n	8003ab8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a42:	2210      	movs	r2, #16
 8003a44:	409a      	lsls	r2, r3
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d018      	beq.n	8003a8a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d108      	bne.n	8003a78 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d024      	beq.n	8003ab8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a72:	6878      	ldr	r0, [r7, #4]
 8003a74:	4798      	blx	r3
 8003a76:	e01f      	b.n	8003ab8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d01b      	beq.n	8003ab8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a84:	6878      	ldr	r0, [r7, #4]
 8003a86:	4798      	blx	r3
 8003a88:	e016      	b.n	8003ab8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d107      	bne.n	8003aa8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	681a      	ldr	r2, [r3, #0]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f022 0208 	bic.w	r2, r2, #8
 8003aa6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d003      	beq.n	8003ab8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab4:	6878      	ldr	r0, [r7, #4]
 8003ab6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003abc:	2220      	movs	r2, #32
 8003abe:	409a      	lsls	r2, r3
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	4013      	ands	r3, r2
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	f000 808e 	beq.w	8003be6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f003 0310 	and.w	r3, r3, #16
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	f000 8086 	beq.w	8003be6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ade:	2220      	movs	r2, #32
 8003ae0:	409a      	lsls	r2, r3
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003aec:	b2db      	uxtb	r3, r3
 8003aee:	2b05      	cmp	r3, #5
 8003af0:	d136      	bne.n	8003b60 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	681a      	ldr	r2, [r3, #0]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f022 0216 	bic.w	r2, r2, #22
 8003b00:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	695a      	ldr	r2, [r3, #20]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003b10:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d103      	bne.n	8003b22 <HAL_DMA_IRQHandler+0x1da>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d007      	beq.n	8003b32 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	681a      	ldr	r2, [r3, #0]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f022 0208 	bic.w	r2, r2, #8
 8003b30:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b36:	223f      	movs	r2, #63	; 0x3f
 8003b38:	409a      	lsls	r2, r3
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2201      	movs	r2, #1
 8003b42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d07d      	beq.n	8003c52 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	4798      	blx	r3
        }
        return;
 8003b5e:	e078      	b.n	8003c52 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d01c      	beq.n	8003ba8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d108      	bne.n	8003b8e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d030      	beq.n	8003be6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b88:	6878      	ldr	r0, [r7, #4]
 8003b8a:	4798      	blx	r3
 8003b8c:	e02b      	b.n	8003be6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d027      	beq.n	8003be6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	4798      	blx	r3
 8003b9e:	e022      	b.n	8003be6 <HAL_DMA_IRQHandler+0x29e>
 8003ba0:	20000000 	.word	0x20000000
 8003ba4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d10f      	bne.n	8003bd6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	681a      	ldr	r2, [r3, #0]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f022 0210 	bic.w	r2, r2, #16
 8003bc4:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2201      	movs	r2, #1
 8003bca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d003      	beq.n	8003be6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d032      	beq.n	8003c54 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bf2:	f003 0301 	and.w	r3, r3, #1
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d022      	beq.n	8003c40 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2205      	movs	r2, #5
 8003bfe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	681a      	ldr	r2, [r3, #0]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f022 0201 	bic.w	r2, r2, #1
 8003c10:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	3301      	adds	r3, #1
 8003c16:	60bb      	str	r3, [r7, #8]
 8003c18:	697a      	ldr	r2, [r7, #20]
 8003c1a:	429a      	cmp	r2, r3
 8003c1c:	d307      	bcc.n	8003c2e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f003 0301 	and.w	r3, r3, #1
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d1f2      	bne.n	8003c12 <HAL_DMA_IRQHandler+0x2ca>
 8003c2c:	e000      	b.n	8003c30 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003c2e:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2201      	movs	r2, #1
 8003c34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d005      	beq.n	8003c54 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c4c:	6878      	ldr	r0, [r7, #4]
 8003c4e:	4798      	blx	r3
 8003c50:	e000      	b.n	8003c54 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003c52:	bf00      	nop
    }
  }
}
 8003c54:	3718      	adds	r7, #24
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}
 8003c5a:	bf00      	nop

08003c5c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b083      	sub	sp, #12
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	370c      	adds	r7, #12
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c72:	4770      	bx	lr

08003c74 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b085      	sub	sp, #20
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	60f8      	str	r0, [r7, #12]
 8003c7c:	60b9      	str	r1, [r7, #8]
 8003c7e:	607a      	str	r2, [r7, #4]
 8003c80:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	681a      	ldr	r2, [r3, #0]
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003c90:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	683a      	ldr	r2, [r7, #0]
 8003c98:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	2b40      	cmp	r3, #64	; 0x40
 8003ca0:	d108      	bne.n	8003cb4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	687a      	ldr	r2, [r7, #4]
 8003ca8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	68ba      	ldr	r2, [r7, #8]
 8003cb0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003cb2:	e007      	b.n	8003cc4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	68ba      	ldr	r2, [r7, #8]
 8003cba:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	687a      	ldr	r2, [r7, #4]
 8003cc2:	60da      	str	r2, [r3, #12]
}
 8003cc4:	bf00      	nop
 8003cc6:	3714      	adds	r7, #20
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cce:	4770      	bx	lr

08003cd0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b085      	sub	sp, #20
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	b2db      	uxtb	r3, r3
 8003cde:	3b10      	subs	r3, #16
 8003ce0:	4a14      	ldr	r2, [pc, #80]	; (8003d34 <DMA_CalcBaseAndBitshift+0x64>)
 8003ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ce6:	091b      	lsrs	r3, r3, #4
 8003ce8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003cea:	4a13      	ldr	r2, [pc, #76]	; (8003d38 <DMA_CalcBaseAndBitshift+0x68>)
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	4413      	add	r3, r2
 8003cf0:	781b      	ldrb	r3, [r3, #0]
 8003cf2:	461a      	mov	r2, r3
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	2b03      	cmp	r3, #3
 8003cfc:	d909      	bls.n	8003d12 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003d06:	f023 0303 	bic.w	r3, r3, #3
 8003d0a:	1d1a      	adds	r2, r3, #4
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	659a      	str	r2, [r3, #88]	; 0x58
 8003d10:	e007      	b.n	8003d22 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003d1a:	f023 0303 	bic.w	r3, r3, #3
 8003d1e:	687a      	ldr	r2, [r7, #4]
 8003d20:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003d26:	4618      	mov	r0, r3
 8003d28:	3714      	adds	r7, #20
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d30:	4770      	bx	lr
 8003d32:	bf00      	nop
 8003d34:	aaaaaaab 	.word	0xaaaaaaab
 8003d38:	08018314 	.word	0x08018314

08003d3c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b085      	sub	sp, #20
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d44:	2300      	movs	r3, #0
 8003d46:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d4c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	699b      	ldr	r3, [r3, #24]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d11f      	bne.n	8003d96 <DMA_CheckFifoParam+0x5a>
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	2b03      	cmp	r3, #3
 8003d5a:	d856      	bhi.n	8003e0a <DMA_CheckFifoParam+0xce>
 8003d5c:	a201      	add	r2, pc, #4	; (adr r2, 8003d64 <DMA_CheckFifoParam+0x28>)
 8003d5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d62:	bf00      	nop
 8003d64:	08003d75 	.word	0x08003d75
 8003d68:	08003d87 	.word	0x08003d87
 8003d6c:	08003d75 	.word	0x08003d75
 8003d70:	08003e0b 	.word	0x08003e0b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d78:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d046      	beq.n	8003e0e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003d80:	2301      	movs	r3, #1
 8003d82:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d84:	e043      	b.n	8003e0e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d8a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003d8e:	d140      	bne.n	8003e12 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003d90:	2301      	movs	r3, #1
 8003d92:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d94:	e03d      	b.n	8003e12 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	699b      	ldr	r3, [r3, #24]
 8003d9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d9e:	d121      	bne.n	8003de4 <DMA_CheckFifoParam+0xa8>
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	2b03      	cmp	r3, #3
 8003da4:	d837      	bhi.n	8003e16 <DMA_CheckFifoParam+0xda>
 8003da6:	a201      	add	r2, pc, #4	; (adr r2, 8003dac <DMA_CheckFifoParam+0x70>)
 8003da8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dac:	08003dbd 	.word	0x08003dbd
 8003db0:	08003dc3 	.word	0x08003dc3
 8003db4:	08003dbd 	.word	0x08003dbd
 8003db8:	08003dd5 	.word	0x08003dd5
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	73fb      	strb	r3, [r7, #15]
      break;
 8003dc0:	e030      	b.n	8003e24 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dc6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d025      	beq.n	8003e1a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003dd2:	e022      	b.n	8003e1a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dd8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003ddc:	d11f      	bne.n	8003e1e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003de2:	e01c      	b.n	8003e1e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	2b02      	cmp	r3, #2
 8003de8:	d903      	bls.n	8003df2 <DMA_CheckFifoParam+0xb6>
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	2b03      	cmp	r3, #3
 8003dee:	d003      	beq.n	8003df8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003df0:	e018      	b.n	8003e24 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	73fb      	strb	r3, [r7, #15]
      break;
 8003df6:	e015      	b.n	8003e24 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dfc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d00e      	beq.n	8003e22 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003e04:	2301      	movs	r3, #1
 8003e06:	73fb      	strb	r3, [r7, #15]
      break;
 8003e08:	e00b      	b.n	8003e22 <DMA_CheckFifoParam+0xe6>
      break;
 8003e0a:	bf00      	nop
 8003e0c:	e00a      	b.n	8003e24 <DMA_CheckFifoParam+0xe8>
      break;
 8003e0e:	bf00      	nop
 8003e10:	e008      	b.n	8003e24 <DMA_CheckFifoParam+0xe8>
      break;
 8003e12:	bf00      	nop
 8003e14:	e006      	b.n	8003e24 <DMA_CheckFifoParam+0xe8>
      break;
 8003e16:	bf00      	nop
 8003e18:	e004      	b.n	8003e24 <DMA_CheckFifoParam+0xe8>
      break;
 8003e1a:	bf00      	nop
 8003e1c:	e002      	b.n	8003e24 <DMA_CheckFifoParam+0xe8>
      break;   
 8003e1e:	bf00      	nop
 8003e20:	e000      	b.n	8003e24 <DMA_CheckFifoParam+0xe8>
      break;
 8003e22:	bf00      	nop
    }
  } 
  
  return status; 
 8003e24:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	3714      	adds	r7, #20
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e30:	4770      	bx	lr
 8003e32:	bf00      	nop

08003e34 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b088      	sub	sp, #32
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	61fb      	str	r3, [r7, #28]
 8003e40:	2300      	movs	r3, #0
 8003e42:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8003e44:	4baa      	ldr	r3, [pc, #680]	; (80040f0 <HAL_ETH_Init+0x2bc>)
 8003e46:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8003e48:	2300      	movs	r3, #0
 8003e4a:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d101      	bne.n	8003e5a <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	e183      	b.n	8004162 <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003e60:	b2db      	uxtb	r3, r3
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d106      	bne.n	8003e74 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	f006 fc02 	bl	800a678 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e74:	2300      	movs	r3, #0
 8003e76:	60bb      	str	r3, [r7, #8]
 8003e78:	4b9e      	ldr	r3, [pc, #632]	; (80040f4 <HAL_ETH_Init+0x2c0>)
 8003e7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e7c:	4a9d      	ldr	r2, [pc, #628]	; (80040f4 <HAL_ETH_Init+0x2c0>)
 8003e7e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e82:	6453      	str	r3, [r2, #68]	; 0x44
 8003e84:	4b9b      	ldr	r3, [pc, #620]	; (80040f4 <HAL_ETH_Init+0x2c0>)
 8003e86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e8c:	60bb      	str	r3, [r7, #8]
 8003e8e:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8003e90:	4b99      	ldr	r3, [pc, #612]	; (80040f8 <HAL_ETH_Init+0x2c4>)
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	4a98      	ldr	r2, [pc, #608]	; (80040f8 <HAL_ETH_Init+0x2c4>)
 8003e96:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003e9a:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8003e9c:	4b96      	ldr	r3, [pc, #600]	; (80040f8 <HAL_ETH_Init+0x2c4>)
 8003e9e:	685a      	ldr	r2, [r3, #4]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6a1b      	ldr	r3, [r3, #32]
 8003ea4:	4994      	ldr	r1, [pc, #592]	; (80040f8 <HAL_ETH_Init+0x2c4>)
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003eb2:	681a      	ldr	r2, [r3, #0]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f042 0201 	orr.w	r2, r2, #1
 8003ebc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ec0:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8003ec2:	f7fe f8ed 	bl	80020a0 <HAL_GetTick>
 8003ec6:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8003ec8:	e011      	b.n	8003eee <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8003eca:	f7fe f8e9 	bl	80020a0 <HAL_GetTick>
 8003ece:	4602      	mov	r2, r0
 8003ed0:	697b      	ldr	r3, [r7, #20]
 8003ed2:	1ad3      	subs	r3, r2, r3
 8003ed4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003ed8:	d909      	bls.n	8003eee <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2203      	movs	r2, #3
 8003ede:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 8003eea:	2303      	movs	r3, #3
 8003eec:	e139      	b.n	8004162 <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f003 0301 	and.w	r3, r3, #1
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d1e4      	bne.n	8003eca <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	691b      	ldr	r3, [r3, #16]
 8003f06:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8003f08:	69fb      	ldr	r3, [r7, #28]
 8003f0a:	f023 031c 	bic.w	r3, r3, #28
 8003f0e:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8003f10:	f002 f878 	bl	8006004 <HAL_RCC_GetHCLKFreq>
 8003f14:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8003f16:	69bb      	ldr	r3, [r7, #24]
 8003f18:	4a78      	ldr	r2, [pc, #480]	; (80040fc <HAL_ETH_Init+0x2c8>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d908      	bls.n	8003f30 <HAL_ETH_Init+0xfc>
 8003f1e:	69bb      	ldr	r3, [r7, #24]
 8003f20:	4a77      	ldr	r2, [pc, #476]	; (8004100 <HAL_ETH_Init+0x2cc>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d804      	bhi.n	8003f30 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8003f26:	69fb      	ldr	r3, [r7, #28]
 8003f28:	f043 0308 	orr.w	r3, r3, #8
 8003f2c:	61fb      	str	r3, [r7, #28]
 8003f2e:	e027      	b.n	8003f80 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8003f30:	69bb      	ldr	r3, [r7, #24]
 8003f32:	4a73      	ldr	r2, [pc, #460]	; (8004100 <HAL_ETH_Init+0x2cc>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d908      	bls.n	8003f4a <HAL_ETH_Init+0x116>
 8003f38:	69bb      	ldr	r3, [r7, #24]
 8003f3a:	4a6d      	ldr	r2, [pc, #436]	; (80040f0 <HAL_ETH_Init+0x2bc>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d204      	bcs.n	8003f4a <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8003f40:	69fb      	ldr	r3, [r7, #28]
 8003f42:	f043 030c 	orr.w	r3, r3, #12
 8003f46:	61fb      	str	r3, [r7, #28]
 8003f48:	e01a      	b.n	8003f80 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8003f4a:	69bb      	ldr	r3, [r7, #24]
 8003f4c:	4a68      	ldr	r2, [pc, #416]	; (80040f0 <HAL_ETH_Init+0x2bc>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d303      	bcc.n	8003f5a <HAL_ETH_Init+0x126>
 8003f52:	69bb      	ldr	r3, [r7, #24]
 8003f54:	4a6b      	ldr	r2, [pc, #428]	; (8004104 <HAL_ETH_Init+0x2d0>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d911      	bls.n	8003f7e <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8003f5a:	69bb      	ldr	r3, [r7, #24]
 8003f5c:	4a69      	ldr	r2, [pc, #420]	; (8004104 <HAL_ETH_Init+0x2d0>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d908      	bls.n	8003f74 <HAL_ETH_Init+0x140>
 8003f62:	69bb      	ldr	r3, [r7, #24]
 8003f64:	4a68      	ldr	r2, [pc, #416]	; (8004108 <HAL_ETH_Init+0x2d4>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d804      	bhi.n	8003f74 <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8003f6a:	69fb      	ldr	r3, [r7, #28]
 8003f6c:	f043 0304 	orr.w	r3, r3, #4
 8003f70:	61fb      	str	r3, [r7, #28]
 8003f72:	e005      	b.n	8003f80 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8003f74:	69fb      	ldr	r3, [r7, #28]
 8003f76:	f043 0310 	orr.w	r3, r3, #16
 8003f7a:	61fb      	str	r3, [r7, #28]
 8003f7c:	e000      	b.n	8003f80 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8003f7e:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	69fa      	ldr	r2, [r7, #28]
 8003f86:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8003f88:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003f8c:	2100      	movs	r1, #0
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f000 fb14 	bl	80045bc <HAL_ETH_WritePHYRegister>
 8003f94:	4603      	mov	r3, r0
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d00b      	beq.n	8003fb2 <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8003f9e:	6939      	ldr	r1, [r7, #16]
 8003fa0:	6878      	ldr	r0, [r7, #4]
 8003fa2:	f000 fcc9 	bl	8004938 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2201      	movs	r2, #1
 8003faa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	e0d7      	b.n	8004162 <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8003fb2:	20ff      	movs	r0, #255	; 0xff
 8003fb4:	f7fe f880 	bl	80020b8 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	f000 80a5 	beq.w	800410c <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8003fc2:	f7fe f86d 	bl	80020a0 <HAL_GetTick>
 8003fc6:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8003fc8:	f107 030c 	add.w	r3, r7, #12
 8003fcc:	461a      	mov	r2, r3
 8003fce:	2101      	movs	r1, #1
 8003fd0:	6878      	ldr	r0, [r7, #4]
 8003fd2:	f000 fa8b 	bl	80044ec <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8003fd6:	f7fe f863 	bl	80020a0 <HAL_GetTick>
 8003fda:	4602      	mov	r2, r0
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	1ad3      	subs	r3, r2, r3
 8003fe0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d90f      	bls.n	8004008 <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8003fec:	6939      	ldr	r1, [r7, #16]
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	f000 fca2 	bl	8004938 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2200      	movs	r2, #0
 8004000:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8004004:	2303      	movs	r3, #3
 8004006:	e0ac      	b.n	8004162 <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	f003 0304 	and.w	r3, r3, #4
 800400e:	2b00      	cmp	r3, #0
 8004010:	d0da      	beq.n	8003fc8 <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8004012:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004016:	2100      	movs	r1, #0
 8004018:	6878      	ldr	r0, [r7, #4]
 800401a:	f000 facf 	bl	80045bc <HAL_ETH_WritePHYRegister>
 800401e:	4603      	mov	r3, r0
 8004020:	2b00      	cmp	r3, #0
 8004022:	d00b      	beq.n	800403c <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8004024:	2301      	movs	r3, #1
 8004026:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8004028:	6939      	ldr	r1, [r7, #16]
 800402a:	6878      	ldr	r0, [r7, #4]
 800402c:	f000 fc84 	bl	8004938 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2201      	movs	r2, #1
 8004034:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8004038:	2301      	movs	r3, #1
 800403a:	e092      	b.n	8004162 <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 800403c:	f7fe f830 	bl	80020a0 <HAL_GetTick>
 8004040:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8004042:	f107 030c 	add.w	r3, r7, #12
 8004046:	461a      	mov	r2, r3
 8004048:	2101      	movs	r1, #1
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	f000 fa4e 	bl	80044ec <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8004050:	f7fe f826 	bl	80020a0 <HAL_GetTick>
 8004054:	4602      	mov	r2, r0
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	1ad3      	subs	r3, r2, r3
 800405a:	f241 3288 	movw	r2, #5000	; 0x1388
 800405e:	4293      	cmp	r3, r2
 8004060:	d90f      	bls.n	8004082 <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8004062:	2301      	movs	r3, #1
 8004064:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8004066:	6939      	ldr	r1, [r7, #16]
 8004068:	6878      	ldr	r0, [r7, #4]
 800406a:	f000 fc65 	bl	8004938 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2201      	movs	r2, #1
 8004072:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2200      	movs	r2, #0
 800407a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 800407e:	2303      	movs	r3, #3
 8004080:	e06f      	b.n	8004162 <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	f003 0320 	and.w	r3, r3, #32
 8004088:	2b00      	cmp	r3, #0
 800408a:	d0da      	beq.n	8004042 <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 800408c:	f107 030c 	add.w	r3, r7, #12
 8004090:	461a      	mov	r2, r3
 8004092:	2110      	movs	r1, #16
 8004094:	6878      	ldr	r0, [r7, #4]
 8004096:	f000 fa29 	bl	80044ec <HAL_ETH_ReadPHYRegister>
 800409a:	4603      	mov	r3, r0
 800409c:	2b00      	cmp	r3, #0
 800409e:	d00b      	beq.n	80040b8 <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80040a0:	2301      	movs	r3, #1
 80040a2:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80040a4:	6939      	ldr	r1, [r7, #16]
 80040a6:	6878      	ldr	r0, [r7, #4]
 80040a8:	f000 fc46 	bl	8004938 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2201      	movs	r2, #1
 80040b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80040b4:	2301      	movs	r3, #1
 80040b6:	e054      	b.n	8004162 <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	f003 0304 	and.w	r3, r3, #4
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d004      	beq.n	80040cc <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80040c8:	60da      	str	r2, [r3, #12]
 80040ca:	e002      	b.n	80040d2 <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2200      	movs	r2, #0
 80040d0:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	f003 0302 	and.w	r3, r3, #2
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d003      	beq.n	80040e4 <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2200      	movs	r2, #0
 80040e0:	609a      	str	r2, [r3, #8]
 80040e2:	e035      	b.n	8004150 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80040ea:	609a      	str	r2, [r3, #8]
 80040ec:	e030      	b.n	8004150 <HAL_ETH_Init+0x31c>
 80040ee:	bf00      	nop
 80040f0:	03938700 	.word	0x03938700
 80040f4:	40023800 	.word	0x40023800
 80040f8:	40013800 	.word	0x40013800
 80040fc:	01312cff 	.word	0x01312cff
 8004100:	02160ebf 	.word	0x02160ebf
 8004104:	05f5e0ff 	.word	0x05f5e0ff
 8004108:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	68db      	ldr	r3, [r3, #12]
 8004110:	08db      	lsrs	r3, r3, #3
 8004112:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	085b      	lsrs	r3, r3, #1
 800411a:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 800411c:	4313      	orrs	r3, r2
 800411e:	b29b      	uxth	r3, r3
 8004120:	461a      	mov	r2, r3
 8004122:	2100      	movs	r1, #0
 8004124:	6878      	ldr	r0, [r7, #4]
 8004126:	f000 fa49 	bl	80045bc <HAL_ETH_WritePHYRegister>
 800412a:	4603      	mov	r3, r0
 800412c:	2b00      	cmp	r3, #0
 800412e:	d00b      	beq.n	8004148 <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8004130:	2301      	movs	r3, #1
 8004132:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8004134:	6939      	ldr	r1, [r7, #16]
 8004136:	6878      	ldr	r0, [r7, #4]
 8004138:	f000 fbfe 	bl	8004938 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2201      	movs	r2, #1
 8004140:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8004144:	2301      	movs	r3, #1
 8004146:	e00c      	b.n	8004162 <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8004148:	f640 70ff 	movw	r0, #4095	; 0xfff
 800414c:	f7fd ffb4 	bl	80020b8 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8004150:	6939      	ldr	r1, [r7, #16]
 8004152:	6878      	ldr	r0, [r7, #4]
 8004154:	f000 fbf0 	bl	8004938 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2201      	movs	r2, #1
 800415c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8004160:	2300      	movs	r3, #0
}
 8004162:	4618      	mov	r0, r3
 8004164:	3720      	adds	r7, #32
 8004166:	46bd      	mov	sp, r7
 8004168:	bd80      	pop	{r7, pc}
 800416a:	bf00      	nop

0800416c <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 800416c:	b480      	push	{r7}
 800416e:	b087      	sub	sp, #28
 8004170:	af00      	add	r7, sp, #0
 8004172:	60f8      	str	r0, [r7, #12]
 8004174:	60b9      	str	r1, [r7, #8]
 8004176:	607a      	str	r2, [r7, #4]
 8004178:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 800417a:	2300      	movs	r3, #0
 800417c:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004184:	2b01      	cmp	r3, #1
 8004186:	d101      	bne.n	800418c <HAL_ETH_DMATxDescListInit+0x20>
 8004188:	2302      	movs	r3, #2
 800418a:	e052      	b.n	8004232 <HAL_ETH_DMATxDescListInit+0xc6>
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2201      	movs	r2, #1
 8004190:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2202      	movs	r2, #2
 8004198:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	68ba      	ldr	r2, [r7, #8]
 80041a0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 80041a2:	2300      	movs	r3, #0
 80041a4:	617b      	str	r3, [r7, #20]
 80041a6:	e030      	b.n	800420a <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	015b      	lsls	r3, r3, #5
 80041ac:	68ba      	ldr	r2, [r7, #8]
 80041ae:	4413      	add	r3, r2
 80041b0:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 80041b2:	693b      	ldr	r3, [r7, #16]
 80041b4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80041b8:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80041c0:	fb02 f303 	mul.w	r3, r2, r3
 80041c4:	687a      	ldr	r2, [r7, #4]
 80041c6:	4413      	add	r3, r2
 80041c8:	461a      	mov	r2, r3
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	69db      	ldr	r3, [r3, #28]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d105      	bne.n	80041e2 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	3b01      	subs	r3, #1
 80041e6:	697a      	ldr	r2, [r7, #20]
 80041e8:	429a      	cmp	r2, r3
 80041ea:	d208      	bcs.n	80041fe <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	3301      	adds	r3, #1
 80041f0:	015b      	lsls	r3, r3, #5
 80041f2:	68ba      	ldr	r2, [r7, #8]
 80041f4:	4413      	add	r3, r2
 80041f6:	461a      	mov	r2, r3
 80041f8:	693b      	ldr	r3, [r7, #16]
 80041fa:	60da      	str	r2, [r3, #12]
 80041fc:	e002      	b.n	8004204 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 80041fe:	68ba      	ldr	r2, [r7, #8]
 8004200:	693b      	ldr	r3, [r7, #16]
 8004202:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	3301      	adds	r3, #1
 8004208:	617b      	str	r3, [r7, #20]
 800420a:	697a      	ldr	r2, [r7, #20]
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	429a      	cmp	r2, r3
 8004210:	d3ca      	bcc.n	80041a8 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	68ba      	ldr	r2, [r7, #8]
 8004218:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800421c:	3310      	adds	r3, #16
 800421e:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	2201      	movs	r2, #1
 8004224:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	2200      	movs	r2, #0
 800422c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8004230:	2300      	movs	r3, #0
}
 8004232:	4618      	mov	r0, r3
 8004234:	371c      	adds	r7, #28
 8004236:	46bd      	mov	sp, r7
 8004238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423c:	4770      	bx	lr

0800423e <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 800423e:	b480      	push	{r7}
 8004240:	b087      	sub	sp, #28
 8004242:	af00      	add	r7, sp, #0
 8004244:	60f8      	str	r0, [r7, #12]
 8004246:	60b9      	str	r1, [r7, #8]
 8004248:	607a      	str	r2, [r7, #4]
 800424a:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 800424c:	2300      	movs	r3, #0
 800424e:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004256:	2b01      	cmp	r3, #1
 8004258:	d101      	bne.n	800425e <HAL_ETH_DMARxDescListInit+0x20>
 800425a:	2302      	movs	r3, #2
 800425c:	e056      	b.n	800430c <HAL_ETH_DMARxDescListInit+0xce>
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	2201      	movs	r2, #1
 8004262:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	2202      	movs	r2, #2
 800426a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	68ba      	ldr	r2, [r7, #8]
 8004272:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 8004274:	2300      	movs	r3, #0
 8004276:	617b      	str	r3, [r7, #20]
 8004278:	e034      	b.n	80042e4 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	015b      	lsls	r3, r3, #5
 800427e:	68ba      	ldr	r2, [r7, #8]
 8004280:	4413      	add	r3, r2
 8004282:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8004284:	693b      	ldr	r3, [r7, #16]
 8004286:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800428a:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 800428c:	693b      	ldr	r3, [r7, #16]
 800428e:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8004292:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800429a:	fb02 f303 	mul.w	r3, r2, r3
 800429e:	687a      	ldr	r2, [r7, #4]
 80042a0:	4413      	add	r3, r2
 80042a2:	461a      	mov	r2, r3
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	699b      	ldr	r3, [r3, #24]
 80042ac:	2b01      	cmp	r3, #1
 80042ae:	d105      	bne.n	80042bc <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	3b01      	subs	r3, #1
 80042c0:	697a      	ldr	r2, [r7, #20]
 80042c2:	429a      	cmp	r2, r3
 80042c4:	d208      	bcs.n	80042d8 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	3301      	adds	r3, #1
 80042ca:	015b      	lsls	r3, r3, #5
 80042cc:	68ba      	ldr	r2, [r7, #8]
 80042ce:	4413      	add	r3, r2
 80042d0:	461a      	mov	r2, r3
 80042d2:	693b      	ldr	r3, [r7, #16]
 80042d4:	60da      	str	r2, [r3, #12]
 80042d6:	e002      	b.n	80042de <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 80042d8:	68ba      	ldr	r2, [r7, #8]
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	3301      	adds	r3, #1
 80042e2:	617b      	str	r3, [r7, #20]
 80042e4:	697a      	ldr	r2, [r7, #20]
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	429a      	cmp	r2, r3
 80042ea:	d3c6      	bcc.n	800427a <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	68ba      	ldr	r2, [r7, #8]
 80042f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042f6:	330c      	adds	r3, #12
 80042f8:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	2201      	movs	r2, #1
 80042fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	2200      	movs	r2, #0
 8004306:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800430a:	2300      	movs	r3, #0
}
 800430c:	4618      	mov	r0, r3
 800430e:	371c      	adds	r7, #28
 8004310:	46bd      	mov	sp, r7
 8004312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004316:	4770      	bx	lr

08004318 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8004318:	b480      	push	{r7}
 800431a:	b087      	sub	sp, #28
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
 8004320:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 8004322:	2300      	movs	r3, #0
 8004324:	617b      	str	r3, [r7, #20]
 8004326:	2300      	movs	r3, #0
 8004328:	60fb      	str	r3, [r7, #12]
 800432a:	2300      	movs	r3, #0
 800432c:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004334:	2b01      	cmp	r3, #1
 8004336:	d101      	bne.n	800433c <HAL_ETH_TransmitFrame+0x24>
 8004338:	2302      	movs	r3, #2
 800433a:	e0cd      	b.n	80044d8 <HAL_ETH_TransmitFrame+0x1c0>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2201      	movs	r2, #1
 8004340:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2202      	movs	r2, #2
 8004348:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d109      	bne.n	8004366 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2201      	movs	r2, #1
 8004356:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2200      	movs	r2, #0
 800435e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 8004362:	2301      	movs	r3, #1
 8004364:	e0b8      	b.n	80044d8 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	2b00      	cmp	r3, #0
 800436e:	da09      	bge.n	8004384 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2212      	movs	r2, #18
 8004374:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2200      	movs	r2, #0
 800437c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8004380:	2301      	movs	r3, #1
 8004382:	e0a9      	b.n	80044d8 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800438a:	4293      	cmp	r3, r2
 800438c:	d915      	bls.n	80043ba <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	4a54      	ldr	r2, [pc, #336]	; (80044e4 <HAL_ETH_TransmitFrame+0x1cc>)
 8004392:	fba2 2303 	umull	r2, r3, r2, r3
 8004396:	0a9b      	lsrs	r3, r3, #10
 8004398:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 800439a:	683a      	ldr	r2, [r7, #0]
 800439c:	4b51      	ldr	r3, [pc, #324]	; (80044e4 <HAL_ETH_TransmitFrame+0x1cc>)
 800439e:	fba3 1302 	umull	r1, r3, r3, r2
 80043a2:	0a9b      	lsrs	r3, r3, #10
 80043a4:	f240 51f4 	movw	r1, #1524	; 0x5f4
 80043a8:	fb01 f303 	mul.w	r3, r1, r3
 80043ac:	1ad3      	subs	r3, r2, r3
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d005      	beq.n	80043be <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 80043b2:	697b      	ldr	r3, [r7, #20]
 80043b4:	3301      	adds	r3, #1
 80043b6:	617b      	str	r3, [r7, #20]
 80043b8:	e001      	b.n	80043be <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 80043ba:	2301      	movs	r3, #1
 80043bc:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 80043be:	697b      	ldr	r3, [r7, #20]
 80043c0:	2b01      	cmp	r3, #1
 80043c2:	d11c      	bne.n	80043fe <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043c8:	681a      	ldr	r2, [r3, #0]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ce:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 80043d2:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043d8:	683a      	ldr	r2, [r7, #0]
 80043da:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80043de:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043e4:	681a      	ldr	r2, [r3, #0]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ea:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80043ee:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043f4:	68db      	ldr	r3, [r3, #12]
 80043f6:	461a      	mov	r2, r3
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	62da      	str	r2, [r3, #44]	; 0x2c
 80043fc:	e04b      	b.n	8004496 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 80043fe:	2300      	movs	r3, #0
 8004400:	613b      	str	r3, [r7, #16]
 8004402:	e044      	b.n	800448e <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004408:	681a      	ldr	r2, [r3, #0]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800440e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004412:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d107      	bne.n	800442a <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800441e:	681a      	ldr	r2, [r3, #0]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004424:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004428:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800442e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8004432:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 8004434:	697b      	ldr	r3, [r7, #20]
 8004436:	3b01      	subs	r3, #1
 8004438:	693a      	ldr	r2, [r7, #16]
 800443a:	429a      	cmp	r2, r3
 800443c:	d116      	bne.n	800446c <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004442:	681a      	ldr	r2, [r3, #0]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004448:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800444c:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	4a25      	ldr	r2, [pc, #148]	; (80044e8 <HAL_ETH_TransmitFrame+0x1d0>)
 8004452:	fb02 f203 	mul.w	r2, r2, r3
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	4413      	add	r3, r2
 800445a:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800445e:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004464:	68fa      	ldr	r2, [r7, #12]
 8004466:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800446a:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004470:	681a      	ldr	r2, [r3, #0]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004476:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800447a:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004480:	68db      	ldr	r3, [r3, #12]
 8004482:	461a      	mov	r2, r3
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	3301      	adds	r3, #1
 800448c:	613b      	str	r3, [r7, #16]
 800448e:	693a      	ldr	r2, [r7, #16]
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	429a      	cmp	r2, r3
 8004494:	d3b6      	bcc.n	8004404 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800449e:	3314      	adds	r3, #20
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f003 0304 	and.w	r3, r3, #4
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d00d      	beq.n	80044c6 <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044b2:	3314      	adds	r3, #20
 80044b4:	2204      	movs	r2, #4
 80044b6:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044c0:	3304      	adds	r3, #4
 80044c2:	2200      	movs	r2, #0
 80044c4:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2201      	movs	r2, #1
 80044ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2200      	movs	r2, #0
 80044d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80044d6:	2300      	movs	r3, #0
}
 80044d8:	4618      	mov	r0, r3
 80044da:	371c      	adds	r7, #28
 80044dc:	46bd      	mov	sp, r7
 80044de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e2:	4770      	bx	lr
 80044e4:	ac02b00b 	.word	0xac02b00b
 80044e8:	fffffa0c 	.word	0xfffffa0c

080044ec <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b086      	sub	sp, #24
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	60f8      	str	r0, [r7, #12]
 80044f4:	460b      	mov	r3, r1
 80044f6:	607a      	str	r2, [r7, #4]
 80044f8:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 80044fa:	2300      	movs	r3, #0
 80044fc:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80044fe:	2300      	movs	r3, #0
 8004500:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004508:	b2db      	uxtb	r3, r3
 800450a:	2b82      	cmp	r3, #130	; 0x82
 800450c:	d101      	bne.n	8004512 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 800450e:	2302      	movs	r3, #2
 8004510:	e050      	b.n	80045b4 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	2282      	movs	r2, #130	; 0x82
 8004516:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	691b      	ldr	r3, [r3, #16]
 8004520:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8004522:	697b      	ldr	r3, [r7, #20]
 8004524:	f003 031c 	and.w	r3, r3, #28
 8004528:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	8a1b      	ldrh	r3, [r3, #16]
 800452e:	02db      	lsls	r3, r3, #11
 8004530:	b29b      	uxth	r3, r3
 8004532:	697a      	ldr	r2, [r7, #20]
 8004534:	4313      	orrs	r3, r2
 8004536:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8004538:	897b      	ldrh	r3, [r7, #10]
 800453a:	019b      	lsls	r3, r3, #6
 800453c:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8004540:	697a      	ldr	r2, [r7, #20]
 8004542:	4313      	orrs	r3, r2
 8004544:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	f023 0302 	bic.w	r3, r3, #2
 800454c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	f043 0301 	orr.w	r3, r3, #1
 8004554:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	697a      	ldr	r2, [r7, #20]
 800455c:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800455e:	f7fd fd9f 	bl	80020a0 <HAL_GetTick>
 8004562:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004564:	e015      	b.n	8004592 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8004566:	f7fd fd9b 	bl	80020a0 <HAL_GetTick>
 800456a:	4602      	mov	r2, r0
 800456c:	693b      	ldr	r3, [r7, #16]
 800456e:	1ad3      	subs	r3, r2, r3
 8004570:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004574:	d309      	bcc.n	800458a <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	2201      	movs	r2, #1
 800457a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	2200      	movs	r2, #0
 8004582:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8004586:	2303      	movs	r3, #3
 8004588:	e014      	b.n	80045b4 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	691b      	ldr	r3, [r3, #16]
 8004590:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	f003 0301 	and.w	r3, r3, #1
 8004598:	2b00      	cmp	r3, #0
 800459a:	d1e4      	bne.n	8004566 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	695b      	ldr	r3, [r3, #20]
 80045a2:	b29b      	uxth	r3, r3
 80045a4:	461a      	mov	r2, r3
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	2201      	movs	r2, #1
 80045ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80045b2:	2300      	movs	r3, #0
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	3718      	adds	r7, #24
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bd80      	pop	{r7, pc}

080045bc <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b086      	sub	sp, #24
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	60f8      	str	r0, [r7, #12]
 80045c4:	460b      	mov	r3, r1
 80045c6:	607a      	str	r2, [r7, #4]
 80045c8:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 80045ca:	2300      	movs	r3, #0
 80045cc:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80045ce:	2300      	movs	r3, #0
 80045d0:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80045d8:	b2db      	uxtb	r3, r3
 80045da:	2b42      	cmp	r3, #66	; 0x42
 80045dc:	d101      	bne.n	80045e2 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 80045de:	2302      	movs	r3, #2
 80045e0:	e04e      	b.n	8004680 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	2242      	movs	r2, #66	; 0x42
 80045e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	691b      	ldr	r3, [r3, #16]
 80045f0:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80045f2:	697b      	ldr	r3, [r7, #20]
 80045f4:	f003 031c 	and.w	r3, r3, #28
 80045f8:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	8a1b      	ldrh	r3, [r3, #16]
 80045fe:	02db      	lsls	r3, r3, #11
 8004600:	b29b      	uxth	r3, r3
 8004602:	697a      	ldr	r2, [r7, #20]
 8004604:	4313      	orrs	r3, r2
 8004606:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8004608:	897b      	ldrh	r3, [r7, #10]
 800460a:	019b      	lsls	r3, r3, #6
 800460c:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8004610:	697a      	ldr	r2, [r7, #20]
 8004612:	4313      	orrs	r3, r2
 8004614:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	f043 0302 	orr.w	r3, r3, #2
 800461c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 800461e:	697b      	ldr	r3, [r7, #20]
 8004620:	f043 0301 	orr.w	r3, r3, #1
 8004624:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	b29a      	uxth	r2, r3
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	697a      	ldr	r2, [r7, #20]
 8004636:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8004638:	f7fd fd32 	bl	80020a0 <HAL_GetTick>
 800463c:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800463e:	e015      	b.n	800466c <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8004640:	f7fd fd2e 	bl	80020a0 <HAL_GetTick>
 8004644:	4602      	mov	r2, r0
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	1ad3      	subs	r3, r2, r3
 800464a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800464e:	d309      	bcc.n	8004664 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	2201      	movs	r2, #1
 8004654:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	2200      	movs	r2, #0
 800465c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8004660:	2303      	movs	r3, #3
 8004662:	e00d      	b.n	8004680 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	691b      	ldr	r3, [r3, #16]
 800466a:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	f003 0301 	and.w	r3, r3, #1
 8004672:	2b00      	cmp	r3, #0
 8004674:	d1e4      	bne.n	8004640 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	2201      	movs	r2, #1
 800467a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 800467e:	2300      	movs	r3, #0
}
 8004680:	4618      	mov	r0, r3
 8004682:	3718      	adds	r7, #24
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}

08004688 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8004688:	b580      	push	{r7, lr}
 800468a:	b082      	sub	sp, #8
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004696:	2b01      	cmp	r3, #1
 8004698:	d101      	bne.n	800469e <HAL_ETH_Start+0x16>
 800469a:	2302      	movs	r3, #2
 800469c:	e01f      	b.n	80046de <HAL_ETH_Start+0x56>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2201      	movs	r2, #1
 80046a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2202      	movs	r2, #2
 80046aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 80046ae:	6878      	ldr	r0, [r7, #4]
 80046b0:	f000 fb44 	bl	8004d3c <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 80046b4:	6878      	ldr	r0, [r7, #4]
 80046b6:	f000 fb7b 	bl	8004db0 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 80046ba:	6878      	ldr	r0, [r7, #4]
 80046bc:	f000 fc12 	bl	8004ee4 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 80046c0:	6878      	ldr	r0, [r7, #4]
 80046c2:	f000 fbaf 	bl	8004e24 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 80046c6:	6878      	ldr	r0, [r7, #4]
 80046c8:	f000 fbdc 	bl	8004e84 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2201      	movs	r2, #1
 80046d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2200      	movs	r2, #0
 80046d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80046dc:	2300      	movs	r3, #0
}
 80046de:	4618      	mov	r0, r3
 80046e0:	3708      	adds	r7, #8
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}

080046e6 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 80046e6:	b580      	push	{r7, lr}
 80046e8:	b082      	sub	sp, #8
 80046ea:	af00      	add	r7, sp, #0
 80046ec:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80046f4:	2b01      	cmp	r3, #1
 80046f6:	d101      	bne.n	80046fc <HAL_ETH_Stop+0x16>
 80046f8:	2302      	movs	r3, #2
 80046fa:	e01f      	b.n	800473c <HAL_ETH_Stop+0x56>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2201      	movs	r2, #1
 8004700:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2202      	movs	r2, #2
 8004708:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 800470c:	6878      	ldr	r0, [r7, #4]
 800470e:	f000 fba1 	bl	8004e54 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8004712:	6878      	ldr	r0, [r7, #4]
 8004714:	f000 fbce 	bl	8004eb4 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8004718:	6878      	ldr	r0, [r7, #4]
 800471a:	f000 fb66 	bl	8004dea <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 800471e:	6878      	ldr	r0, [r7, #4]
 8004720:	f000 fbe0 	bl	8004ee4 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8004724:	6878      	ldr	r0, [r7, #4]
 8004726:	f000 fb26 	bl	8004d76 <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2201      	movs	r2, #1
 800472e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2200      	movs	r2, #0
 8004736:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800473a:	2300      	movs	r3, #0
}
 800473c:	4618      	mov	r0, r3
 800473e:	3708      	adds	r7, #8
 8004740:	46bd      	mov	sp, r7
 8004742:	bd80      	pop	{r7, pc}

08004744 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b084      	sub	sp, #16
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
 800474c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 800474e:	2300      	movs	r3, #0
 8004750:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004758:	2b01      	cmp	r3, #1
 800475a:	d101      	bne.n	8004760 <HAL_ETH_ConfigMAC+0x1c>
 800475c:	2302      	movs	r3, #2
 800475e:	e0e4      	b.n	800492a <HAL_ETH_ConfigMAC+0x1e6>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2201      	movs	r2, #1
 8004764:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2202      	movs	r2, #2
 800476c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	2b00      	cmp	r3, #0
 8004774:	f000 80b1 	beq.w	80048da <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8004780:	68fa      	ldr	r2, [r7, #12]
 8004782:	4b6c      	ldr	r3, [pc, #432]	; (8004934 <HAL_ETH_ConfigMAC+0x1f0>)
 8004784:	4013      	ands	r3, r2
 8004786:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8004790:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 8004796:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 800479c:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 80047a2:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 80047a8:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 80047ae:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 80047b4:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 80047ba:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 80047c0:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 80047c6:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 80047cc:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 80047d2:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 80047d4:	68fa      	ldr	r2, [r7, #12]
 80047d6:	4313      	orrs	r3, r2
 80047d8:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	68fa      	ldr	r2, [r7, #12]
 80047e0:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80047ea:	2001      	movs	r0, #1
 80047ec:	f7fd fc64 	bl	80020b8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1; 
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	68fa      	ldr	r2, [r7, #12]
 80047f6:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8004800:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 8004806:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 800480c:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 8004812:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8004818:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 800481e:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 800482a:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800482c:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFFR;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8004836:	2001      	movs	r0, #1
 8004838:	f7fd fc3e 	bl	80020b8 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg1;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	68fa      	ldr	r2, [r7, #12]
 8004842:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	683a      	ldr	r2, [r7, #0]
 800484a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800484c:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	683a      	ldr	r2, [r7, #0]
 8004854:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004856:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg1 = (heth->Instance)->MACFCR;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	699b      	ldr	r3, [r3, #24]
 800485e:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8004860:	68fa      	ldr	r2, [r7, #12]
 8004862:	f64f 7341 	movw	r3, #65345	; 0xff41
 8004866:	4013      	ands	r3, r2
 8004868:	60fb      	str	r3, [r7, #12]
     
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800486e:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8004874:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 800487a:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8004880:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 8004886:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 800488c:	4313      	orrs	r3, r2
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 800488e:	68fa      	ldr	r2, [r7, #12]
 8004890:	4313      	orrs	r3, r2
 8004892:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	68fa      	ldr	r2, [r7, #12]
 800489a:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFCR;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	699b      	ldr	r3, [r3, #24]
 80048a2:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80048a4:	2001      	movs	r0, #1
 80048a6:	f7fd fc07 	bl	80020b8 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg1;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	68fa      	ldr	r2, [r7, #12]
 80048b0:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	430a      	orrs	r2, r1
 80048c0:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg1 = (heth->Instance)->MACVLANTR;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	69db      	ldr	r3, [r3, #28]
 80048c8:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 80048ca:	2001      	movs	r0, #1
 80048cc:	f7fd fbf4 	bl	80020b8 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg1;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	68fa      	ldr	r2, [r7, #12]
 80048d6:	61da      	str	r2, [r3, #28]
 80048d8:	e01e      	b.n	8004918 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80048e8:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	689a      	ldr	r2, [r3, #8]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	68db      	ldr	r3, [r3, #12]
 80048f2:	4313      	orrs	r3, r2
 80048f4:	68fa      	ldr	r2, [r7, #12]
 80048f6:	4313      	orrs	r3, r2
 80048f8:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	68fa      	ldr	r2, [r7, #12]
 8004900:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800490a:	2001      	movs	r0, #1
 800490c:	f7fd fbd4 	bl	80020b8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	68fa      	ldr	r2, [r7, #12]
 8004916:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2201      	movs	r2, #1
 800491c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2200      	movs	r2, #0
 8004924:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 8004928:	2300      	movs	r3, #0
}
 800492a:	4618      	mov	r0, r3
 800492c:	3710      	adds	r7, #16
 800492e:	46bd      	mov	sp, r7
 8004930:	bd80      	pop	{r7, pc}
 8004932:	bf00      	nop
 8004934:	ff20810f 	.word	0xff20810f

08004938 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b0b0      	sub	sp, #192	; 0xc0
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
 8004940:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 8004942:	2300      	movs	r3, #0
 8004944:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d007      	beq.n	800495e <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004954:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800495c:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 800495e:	2300      	movs	r3, #0
 8004960:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8004962:	2300      	movs	r3, #0
 8004964:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8004966:	2300      	movs	r3, #0
 8004968:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 800496a:	2300      	movs	r3, #0
 800496c:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 800496e:	2300      	movs	r3, #0
 8004970:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8004972:	2300      	movs	r3, #0
 8004974:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	69db      	ldr	r3, [r3, #28]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d103      	bne.n	8004986 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 800497e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004982:	663b      	str	r3, [r7, #96]	; 0x60
 8004984:	e001      	b.n	800498a <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8004986:	2300      	movs	r3, #0
 8004988:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 800498a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800498e:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8004990:	2300      	movs	r3, #0
 8004992:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8004994:	2300      	movs	r3, #0
 8004996:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8004998:	2300      	movs	r3, #0
 800499a:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 800499c:	2300      	movs	r3, #0
 800499e:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 80049a0:	2300      	movs	r3, #0
 80049a2:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 80049a4:	2340      	movs	r3, #64	; 0x40
 80049a6:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 80049a8:	2300      	movs	r3, #0
 80049aa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 80049ae:	2300      	movs	r3, #0
 80049b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 80049b4:	2300      	movs	r3, #0
 80049b6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 80049ba:	2300      	movs	r3, #0
 80049bc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 80049c0:	2300      	movs	r3, #0
 80049c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 80049c6:	2300      	movs	r3, #0
 80049c8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 80049cc:	2300      	movs	r3, #0
 80049ce:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 80049d2:	2300      	movs	r3, #0
 80049d4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 80049d8:	2380      	movs	r3, #128	; 0x80
 80049da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80049de:	2300      	movs	r3, #0
 80049e0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 80049e4:	2300      	movs	r3, #0
 80049e6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 80049ea:	2300      	movs	r3, #0
 80049ec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 80049f0:	2300      	movs	r3, #0
 80049f2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 80049f6:	2300      	movs	r3, #0
 80049f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 80049fc:	2300      	movs	r3, #0
 80049fe:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8004a0c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004a10:	4bac      	ldr	r3, [pc, #688]	; (8004cc4 <ETH_MACDMAConfig+0x38c>)
 8004a12:	4013      	ands	r3, r2
 8004a14:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8004a18:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8004a1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8004a1c:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8004a1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8004a20:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8004a22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8004a24:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8004a2a:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8004a2c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8004a2e:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8004a30:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8004a32:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8004a38:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8004a3a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8004a3c:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8004a3e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8004a40:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8004a42:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8004a44:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8004a46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8004a48:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8004a4a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8004a4c:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8004a4e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004a52:	4313      	orrs	r3, r2
 8004a54:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004a60:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004a6c:	2001      	movs	r0, #1
 8004a6e:	f7fd fb23 	bl	80020b8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004a7a:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8004a7c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8004a7e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8004a80:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8004a82:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8004a84:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8004a86:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8004a8a:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8004a8c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8004a90:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8004a92:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8004a96:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8004a98:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8004a9c:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8004aa0:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8004aa8:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8004aaa:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8004ab6:	2001      	movs	r0, #1
 8004ab8:	f7fd fafe 	bl	80020b8 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004ac4:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004ace:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8004ad8:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	699b      	ldr	r3, [r3, #24]
 8004ae0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8004ae4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004ae8:	f64f 7341 	movw	r3, #65345	; 0xff41
 8004aec:	4013      	ands	r3, r2
 8004aee:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8004af2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004af6:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8004af8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8004afc:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8004afe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8004b02:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8004b04:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8004b08:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8004b0a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8004b0e:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8004b10:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8004b14:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8004b16:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004b28:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	699b      	ldr	r3, [r3, #24]
 8004b30:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8004b34:	2001      	movs	r0, #1
 8004b36:	f7fd fabf 	bl	80020b8 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004b42:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8004b44:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8004b48:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	430a      	orrs	r2, r1
 8004b52:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	69db      	ldr	r3, [r3, #28]
 8004b5a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8004b5e:	2001      	movs	r0, #1
 8004b60:	f7fd faaa 	bl	80020b8 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004b6c:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8004b6e:	2300      	movs	r3, #0
 8004b70:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8004b72:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004b76:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8004b78:	2300      	movs	r3, #0
 8004b7a:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8004b7c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004b80:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8004b82:	2300      	movs	r3, #0
 8004b84:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8004b86:	2300      	movs	r3, #0
 8004b88:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8004b8e:	2300      	movs	r3, #0
 8004b90:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8004b92:	2304      	movs	r3, #4
 8004b94:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8004b96:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004b9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8004b9c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004ba0:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8004ba2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004ba6:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8004ba8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004bac:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8004bae:	2380      	movs	r3, #128	; 0x80
 8004bb0:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004bc2:	3318      	adds	r3, #24
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8004bca:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004bce:	4b3e      	ldr	r3, [pc, #248]	; (8004cc8 <ETH_MACDMAConfig+0x390>)
 8004bd0:	4013      	ands	r3, r2
 8004bd2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8004bd6:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8004bd8:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8004bda:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8004bdc:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8004bde:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8004be0:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8004be2:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8004be4:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8004be6:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8004be8:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8004bea:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8004bec:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8004bee:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8004bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8004bf2:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8004bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8004bf6:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8004bf8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c0a:	3318      	adds	r3, #24
 8004c0c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004c10:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c1a:	3318      	adds	r3, #24
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8004c22:	2001      	movs	r0, #1
 8004c24:	f7fd fa48 	bl	80020b8 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c30:	3318      	adds	r3, #24
 8004c32:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004c36:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8004c38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8004c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8004c3c:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8004c3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8004c40:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8004c42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8004c44:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8004c46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8004c48:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 8004c4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c4c:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8004c4e:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8004c50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 8004c52:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8004c5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c60:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8004c70:	2001      	movs	r0, #1
 8004c72:	f7fd fa21 	bl	80020b8 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c7e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004c82:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	699b      	ldr	r3, [r3, #24]
 8004c88:	2b01      	cmp	r3, #1
 8004c8a:	d10f      	bne.n	8004cac <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c94:	331c      	adds	r3, #28
 8004c96:	681a      	ldr	r2, [r3, #0]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004ca0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ca4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ca8:	331c      	adds	r3, #28
 8004caa:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	695b      	ldr	r3, [r3, #20]
 8004cb0:	461a      	mov	r2, r3
 8004cb2:	2100      	movs	r1, #0
 8004cb4:	6878      	ldr	r0, [r7, #4]
 8004cb6:	f000 f809 	bl	8004ccc <ETH_MACAddressConfig>
}
 8004cba:	bf00      	nop
 8004cbc:	37c0      	adds	r7, #192	; 0xc0
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bd80      	pop	{r7, pc}
 8004cc2:	bf00      	nop
 8004cc4:	ff20810f 	.word	0xff20810f
 8004cc8:	f8de3f23 	.word	0xf8de3f23

08004ccc <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b087      	sub	sp, #28
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	60f8      	str	r0, [r7, #12]
 8004cd4:	60b9      	str	r1, [r7, #8]
 8004cd6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	3305      	adds	r3, #5
 8004cdc:	781b      	ldrb	r3, [r3, #0]
 8004cde:	021b      	lsls	r3, r3, #8
 8004ce0:	687a      	ldr	r2, [r7, #4]
 8004ce2:	3204      	adds	r2, #4
 8004ce4:	7812      	ldrb	r2, [r2, #0]
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8004cea:	68ba      	ldr	r2, [r7, #8]
 8004cec:	4b11      	ldr	r3, [pc, #68]	; (8004d34 <ETH_MACAddressConfig+0x68>)
 8004cee:	4413      	add	r3, r2
 8004cf0:	461a      	mov	r2, r3
 8004cf2:	697b      	ldr	r3, [r7, #20]
 8004cf4:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	3303      	adds	r3, #3
 8004cfa:	781b      	ldrb	r3, [r3, #0]
 8004cfc:	061a      	lsls	r2, r3, #24
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	3302      	adds	r3, #2
 8004d02:	781b      	ldrb	r3, [r3, #0]
 8004d04:	041b      	lsls	r3, r3, #16
 8004d06:	431a      	orrs	r2, r3
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	3301      	adds	r3, #1
 8004d0c:	781b      	ldrb	r3, [r3, #0]
 8004d0e:	021b      	lsls	r3, r3, #8
 8004d10:	4313      	orrs	r3, r2
 8004d12:	687a      	ldr	r2, [r7, #4]
 8004d14:	7812      	ldrb	r2, [r2, #0]
 8004d16:	4313      	orrs	r3, r2
 8004d18:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8004d1a:	68ba      	ldr	r2, [r7, #8]
 8004d1c:	4b06      	ldr	r3, [pc, #24]	; (8004d38 <ETH_MACAddressConfig+0x6c>)
 8004d1e:	4413      	add	r3, r2
 8004d20:	461a      	mov	r2, r3
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	6013      	str	r3, [r2, #0]
}
 8004d26:	bf00      	nop
 8004d28:	371c      	adds	r7, #28
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d30:	4770      	bx	lr
 8004d32:	bf00      	nop
 8004d34:	40028040 	.word	0x40028040
 8004d38:	40028044 	.word	0x40028044

08004d3c <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b084      	sub	sp, #16
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8004d44:	2300      	movs	r3, #0
 8004d46:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	681a      	ldr	r2, [r3, #0]
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f042 0208 	orr.w	r2, r2, #8
 8004d56:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8004d60:	2001      	movs	r0, #1
 8004d62:	f000 f8e9 	bl	8004f38 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	68fa      	ldr	r2, [r7, #12]
 8004d6c:	601a      	str	r2, [r3, #0]
}
 8004d6e:	bf00      	nop
 8004d70:	3710      	adds	r7, #16
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}

08004d76 <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8004d76:	b580      	push	{r7, lr}
 8004d78:	b084      	sub	sp, #16
 8004d7a:	af00      	add	r7, sp, #0
 8004d7c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8004d7e:	2300      	movs	r3, #0
 8004d80:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	681a      	ldr	r2, [r3, #0]
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f022 0208 	bic.w	r2, r2, #8
 8004d90:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8004d9a:	2001      	movs	r0, #1
 8004d9c:	f000 f8cc 	bl	8004f38 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	68fa      	ldr	r2, [r7, #12]
 8004da6:	601a      	str	r2, [r3, #0]
}
 8004da8:	bf00      	nop
 8004daa:	3710      	adds	r7, #16
 8004dac:	46bd      	mov	sp, r7
 8004dae:	bd80      	pop	{r7, pc}

08004db0 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b084      	sub	sp, #16
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8004db8:	2300      	movs	r3, #0
 8004dba:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	681a      	ldr	r2, [r3, #0]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f042 0204 	orr.w	r2, r2, #4
 8004dca:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8004dd4:	2001      	movs	r0, #1
 8004dd6:	f000 f8af 	bl	8004f38 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	68fa      	ldr	r2, [r7, #12]
 8004de0:	601a      	str	r2, [r3, #0]
}
 8004de2:	bf00      	nop
 8004de4:	3710      	adds	r7, #16
 8004de6:	46bd      	mov	sp, r7
 8004de8:	bd80      	pop	{r7, pc}

08004dea <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8004dea:	b580      	push	{r7, lr}
 8004dec:	b084      	sub	sp, #16
 8004dee:	af00      	add	r7, sp, #0
 8004df0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8004df2:	2300      	movs	r3, #0
 8004df4:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	681a      	ldr	r2, [r3, #0]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f022 0204 	bic.w	r2, r2, #4
 8004e04:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8004e0e:	2001      	movs	r0, #1
 8004e10:	f000 f892 	bl	8004f38 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	68fa      	ldr	r2, [r7, #12]
 8004e1a:	601a      	str	r2, [r3, #0]
}
 8004e1c:	bf00      	nop
 8004e1e:	3710      	adds	r7, #16
 8004e20:	46bd      	mov	sp, r7
 8004e22:	bd80      	pop	{r7, pc}

08004e24 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8004e24:	b480      	push	{r7}
 8004e26:	b083      	sub	sp, #12
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e34:	3318      	adds	r3, #24
 8004e36:	681a      	ldr	r2, [r3, #0]
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004e40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e44:	3318      	adds	r3, #24
 8004e46:	601a      	str	r2, [r3, #0]
}
 8004e48:	bf00      	nop
 8004e4a:	370c      	adds	r7, #12
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e52:	4770      	bx	lr

08004e54 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8004e54:	b480      	push	{r7}
 8004e56:	b083      	sub	sp, #12
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e64:	3318      	adds	r3, #24
 8004e66:	681a      	ldr	r2, [r3, #0]
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004e70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e74:	3318      	adds	r3, #24
 8004e76:	601a      	str	r2, [r3, #0]
}
 8004e78:	bf00      	nop
 8004e7a:	370c      	adds	r7, #12
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e82:	4770      	bx	lr

08004e84 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8004e84:	b480      	push	{r7}
 8004e86:	b083      	sub	sp, #12
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e94:	3318      	adds	r3, #24
 8004e96:	681a      	ldr	r2, [r3, #0]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f042 0202 	orr.w	r2, r2, #2
 8004ea0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ea4:	3318      	adds	r3, #24
 8004ea6:	601a      	str	r2, [r3, #0]
}
 8004ea8:	bf00      	nop
 8004eaa:	370c      	adds	r7, #12
 8004eac:	46bd      	mov	sp, r7
 8004eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb2:	4770      	bx	lr

08004eb4 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8004eb4:	b480      	push	{r7}
 8004eb6:	b083      	sub	sp, #12
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ec4:	3318      	adds	r3, #24
 8004ec6:	681a      	ldr	r2, [r3, #0]
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f022 0202 	bic.w	r2, r2, #2
 8004ed0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ed4:	3318      	adds	r3, #24
 8004ed6:	601a      	str	r2, [r3, #0]
}
 8004ed8:	bf00      	nop
 8004eda:	370c      	adds	r7, #12
 8004edc:	46bd      	mov	sp, r7
 8004ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee2:	4770      	bx	lr

08004ee4 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b084      	sub	sp, #16
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8004eec:	2300      	movs	r3, #0
 8004eee:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ef8:	3318      	adds	r3, #24
 8004efa:	681a      	ldr	r2, [r3, #0]
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8004f04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f08:	3318      	adds	r3, #24
 8004f0a:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f14:	3318      	adds	r3, #24
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8004f1a:	2001      	movs	r0, #1
 8004f1c:	f000 f80c 	bl	8004f38 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	68fa      	ldr	r2, [r7, #12]
 8004f26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f2a:	3318      	adds	r3, #24
 8004f2c:	601a      	str	r2, [r3, #0]
}
 8004f2e:	bf00      	nop
 8004f30:	3710      	adds	r7, #16
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bd80      	pop	{r7, pc}
	...

08004f38 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b085      	sub	sp, #20
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004f40:	4b0b      	ldr	r3, [pc, #44]	; (8004f70 <ETH_Delay+0x38>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a0b      	ldr	r2, [pc, #44]	; (8004f74 <ETH_Delay+0x3c>)
 8004f46:	fba2 2303 	umull	r2, r3, r2, r3
 8004f4a:	0a5b      	lsrs	r3, r3, #9
 8004f4c:	687a      	ldr	r2, [r7, #4]
 8004f4e:	fb02 f303 	mul.w	r3, r2, r3
 8004f52:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 8004f54:	bf00      	nop
  } 
  while (Delay --);
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	1e5a      	subs	r2, r3, #1
 8004f5a:	60fa      	str	r2, [r7, #12]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d1f9      	bne.n	8004f54 <ETH_Delay+0x1c>
}
 8004f60:	bf00      	nop
 8004f62:	bf00      	nop
 8004f64:	3714      	adds	r7, #20
 8004f66:	46bd      	mov	sp, r7
 8004f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6c:	4770      	bx	lr
 8004f6e:	bf00      	nop
 8004f70:	20000000 	.word	0x20000000
 8004f74:	10624dd3 	.word	0x10624dd3

08004f78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004f78:	b480      	push	{r7}
 8004f7a:	b089      	sub	sp, #36	; 0x24
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
 8004f80:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004f82:	2300      	movs	r3, #0
 8004f84:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004f86:	2300      	movs	r3, #0
 8004f88:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004f8e:	2300      	movs	r3, #0
 8004f90:	61fb      	str	r3, [r7, #28]
 8004f92:	e177      	b.n	8005284 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004f94:	2201      	movs	r2, #1
 8004f96:	69fb      	ldr	r3, [r7, #28]
 8004f98:	fa02 f303 	lsl.w	r3, r2, r3
 8004f9c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	697a      	ldr	r2, [r7, #20]
 8004fa4:	4013      	ands	r3, r2
 8004fa6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004fa8:	693a      	ldr	r2, [r7, #16]
 8004faa:	697b      	ldr	r3, [r7, #20]
 8004fac:	429a      	cmp	r2, r3
 8004fae:	f040 8166 	bne.w	800527e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	f003 0303 	and.w	r3, r3, #3
 8004fba:	2b01      	cmp	r3, #1
 8004fbc:	d005      	beq.n	8004fca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004fc6:	2b02      	cmp	r3, #2
 8004fc8:	d130      	bne.n	800502c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	689b      	ldr	r3, [r3, #8]
 8004fce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004fd0:	69fb      	ldr	r3, [r7, #28]
 8004fd2:	005b      	lsls	r3, r3, #1
 8004fd4:	2203      	movs	r2, #3
 8004fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8004fda:	43db      	mvns	r3, r3
 8004fdc:	69ba      	ldr	r2, [r7, #24]
 8004fde:	4013      	ands	r3, r2
 8004fe0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	68da      	ldr	r2, [r3, #12]
 8004fe6:	69fb      	ldr	r3, [r7, #28]
 8004fe8:	005b      	lsls	r3, r3, #1
 8004fea:	fa02 f303 	lsl.w	r3, r2, r3
 8004fee:	69ba      	ldr	r2, [r7, #24]
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	69ba      	ldr	r2, [r7, #24]
 8004ff8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005000:	2201      	movs	r2, #1
 8005002:	69fb      	ldr	r3, [r7, #28]
 8005004:	fa02 f303 	lsl.w	r3, r2, r3
 8005008:	43db      	mvns	r3, r3
 800500a:	69ba      	ldr	r2, [r7, #24]
 800500c:	4013      	ands	r3, r2
 800500e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	685b      	ldr	r3, [r3, #4]
 8005014:	091b      	lsrs	r3, r3, #4
 8005016:	f003 0201 	and.w	r2, r3, #1
 800501a:	69fb      	ldr	r3, [r7, #28]
 800501c:	fa02 f303 	lsl.w	r3, r2, r3
 8005020:	69ba      	ldr	r2, [r7, #24]
 8005022:	4313      	orrs	r3, r2
 8005024:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	69ba      	ldr	r2, [r7, #24]
 800502a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	685b      	ldr	r3, [r3, #4]
 8005030:	f003 0303 	and.w	r3, r3, #3
 8005034:	2b03      	cmp	r3, #3
 8005036:	d017      	beq.n	8005068 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	68db      	ldr	r3, [r3, #12]
 800503c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800503e:	69fb      	ldr	r3, [r7, #28]
 8005040:	005b      	lsls	r3, r3, #1
 8005042:	2203      	movs	r2, #3
 8005044:	fa02 f303 	lsl.w	r3, r2, r3
 8005048:	43db      	mvns	r3, r3
 800504a:	69ba      	ldr	r2, [r7, #24]
 800504c:	4013      	ands	r3, r2
 800504e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	689a      	ldr	r2, [r3, #8]
 8005054:	69fb      	ldr	r3, [r7, #28]
 8005056:	005b      	lsls	r3, r3, #1
 8005058:	fa02 f303 	lsl.w	r3, r2, r3
 800505c:	69ba      	ldr	r2, [r7, #24]
 800505e:	4313      	orrs	r3, r2
 8005060:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	69ba      	ldr	r2, [r7, #24]
 8005066:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	685b      	ldr	r3, [r3, #4]
 800506c:	f003 0303 	and.w	r3, r3, #3
 8005070:	2b02      	cmp	r3, #2
 8005072:	d123      	bne.n	80050bc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005074:	69fb      	ldr	r3, [r7, #28]
 8005076:	08da      	lsrs	r2, r3, #3
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	3208      	adds	r2, #8
 800507c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005080:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005082:	69fb      	ldr	r3, [r7, #28]
 8005084:	f003 0307 	and.w	r3, r3, #7
 8005088:	009b      	lsls	r3, r3, #2
 800508a:	220f      	movs	r2, #15
 800508c:	fa02 f303 	lsl.w	r3, r2, r3
 8005090:	43db      	mvns	r3, r3
 8005092:	69ba      	ldr	r2, [r7, #24]
 8005094:	4013      	ands	r3, r2
 8005096:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	691a      	ldr	r2, [r3, #16]
 800509c:	69fb      	ldr	r3, [r7, #28]
 800509e:	f003 0307 	and.w	r3, r3, #7
 80050a2:	009b      	lsls	r3, r3, #2
 80050a4:	fa02 f303 	lsl.w	r3, r2, r3
 80050a8:	69ba      	ldr	r2, [r7, #24]
 80050aa:	4313      	orrs	r3, r2
 80050ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80050ae:	69fb      	ldr	r3, [r7, #28]
 80050b0:	08da      	lsrs	r2, r3, #3
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	3208      	adds	r2, #8
 80050b6:	69b9      	ldr	r1, [r7, #24]
 80050b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80050c2:	69fb      	ldr	r3, [r7, #28]
 80050c4:	005b      	lsls	r3, r3, #1
 80050c6:	2203      	movs	r2, #3
 80050c8:	fa02 f303 	lsl.w	r3, r2, r3
 80050cc:	43db      	mvns	r3, r3
 80050ce:	69ba      	ldr	r2, [r7, #24]
 80050d0:	4013      	ands	r3, r2
 80050d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	685b      	ldr	r3, [r3, #4]
 80050d8:	f003 0203 	and.w	r2, r3, #3
 80050dc:	69fb      	ldr	r3, [r7, #28]
 80050de:	005b      	lsls	r3, r3, #1
 80050e0:	fa02 f303 	lsl.w	r3, r2, r3
 80050e4:	69ba      	ldr	r2, [r7, #24]
 80050e6:	4313      	orrs	r3, r2
 80050e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	69ba      	ldr	r2, [r7, #24]
 80050ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	685b      	ldr	r3, [r3, #4]
 80050f4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	f000 80c0 	beq.w	800527e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80050fe:	2300      	movs	r3, #0
 8005100:	60fb      	str	r3, [r7, #12]
 8005102:	4b66      	ldr	r3, [pc, #408]	; (800529c <HAL_GPIO_Init+0x324>)
 8005104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005106:	4a65      	ldr	r2, [pc, #404]	; (800529c <HAL_GPIO_Init+0x324>)
 8005108:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800510c:	6453      	str	r3, [r2, #68]	; 0x44
 800510e:	4b63      	ldr	r3, [pc, #396]	; (800529c <HAL_GPIO_Init+0x324>)
 8005110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005112:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005116:	60fb      	str	r3, [r7, #12]
 8005118:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800511a:	4a61      	ldr	r2, [pc, #388]	; (80052a0 <HAL_GPIO_Init+0x328>)
 800511c:	69fb      	ldr	r3, [r7, #28]
 800511e:	089b      	lsrs	r3, r3, #2
 8005120:	3302      	adds	r3, #2
 8005122:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005126:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005128:	69fb      	ldr	r3, [r7, #28]
 800512a:	f003 0303 	and.w	r3, r3, #3
 800512e:	009b      	lsls	r3, r3, #2
 8005130:	220f      	movs	r2, #15
 8005132:	fa02 f303 	lsl.w	r3, r2, r3
 8005136:	43db      	mvns	r3, r3
 8005138:	69ba      	ldr	r2, [r7, #24]
 800513a:	4013      	ands	r3, r2
 800513c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	4a58      	ldr	r2, [pc, #352]	; (80052a4 <HAL_GPIO_Init+0x32c>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d037      	beq.n	80051b6 <HAL_GPIO_Init+0x23e>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	4a57      	ldr	r2, [pc, #348]	; (80052a8 <HAL_GPIO_Init+0x330>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d031      	beq.n	80051b2 <HAL_GPIO_Init+0x23a>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	4a56      	ldr	r2, [pc, #344]	; (80052ac <HAL_GPIO_Init+0x334>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d02b      	beq.n	80051ae <HAL_GPIO_Init+0x236>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	4a55      	ldr	r2, [pc, #340]	; (80052b0 <HAL_GPIO_Init+0x338>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d025      	beq.n	80051aa <HAL_GPIO_Init+0x232>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	4a54      	ldr	r2, [pc, #336]	; (80052b4 <HAL_GPIO_Init+0x33c>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d01f      	beq.n	80051a6 <HAL_GPIO_Init+0x22e>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	4a53      	ldr	r2, [pc, #332]	; (80052b8 <HAL_GPIO_Init+0x340>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d019      	beq.n	80051a2 <HAL_GPIO_Init+0x22a>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	4a52      	ldr	r2, [pc, #328]	; (80052bc <HAL_GPIO_Init+0x344>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d013      	beq.n	800519e <HAL_GPIO_Init+0x226>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	4a51      	ldr	r2, [pc, #324]	; (80052c0 <HAL_GPIO_Init+0x348>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d00d      	beq.n	800519a <HAL_GPIO_Init+0x222>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	4a50      	ldr	r2, [pc, #320]	; (80052c4 <HAL_GPIO_Init+0x34c>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d007      	beq.n	8005196 <HAL_GPIO_Init+0x21e>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	4a4f      	ldr	r2, [pc, #316]	; (80052c8 <HAL_GPIO_Init+0x350>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d101      	bne.n	8005192 <HAL_GPIO_Init+0x21a>
 800518e:	2309      	movs	r3, #9
 8005190:	e012      	b.n	80051b8 <HAL_GPIO_Init+0x240>
 8005192:	230a      	movs	r3, #10
 8005194:	e010      	b.n	80051b8 <HAL_GPIO_Init+0x240>
 8005196:	2308      	movs	r3, #8
 8005198:	e00e      	b.n	80051b8 <HAL_GPIO_Init+0x240>
 800519a:	2307      	movs	r3, #7
 800519c:	e00c      	b.n	80051b8 <HAL_GPIO_Init+0x240>
 800519e:	2306      	movs	r3, #6
 80051a0:	e00a      	b.n	80051b8 <HAL_GPIO_Init+0x240>
 80051a2:	2305      	movs	r3, #5
 80051a4:	e008      	b.n	80051b8 <HAL_GPIO_Init+0x240>
 80051a6:	2304      	movs	r3, #4
 80051a8:	e006      	b.n	80051b8 <HAL_GPIO_Init+0x240>
 80051aa:	2303      	movs	r3, #3
 80051ac:	e004      	b.n	80051b8 <HAL_GPIO_Init+0x240>
 80051ae:	2302      	movs	r3, #2
 80051b0:	e002      	b.n	80051b8 <HAL_GPIO_Init+0x240>
 80051b2:	2301      	movs	r3, #1
 80051b4:	e000      	b.n	80051b8 <HAL_GPIO_Init+0x240>
 80051b6:	2300      	movs	r3, #0
 80051b8:	69fa      	ldr	r2, [r7, #28]
 80051ba:	f002 0203 	and.w	r2, r2, #3
 80051be:	0092      	lsls	r2, r2, #2
 80051c0:	4093      	lsls	r3, r2
 80051c2:	69ba      	ldr	r2, [r7, #24]
 80051c4:	4313      	orrs	r3, r2
 80051c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80051c8:	4935      	ldr	r1, [pc, #212]	; (80052a0 <HAL_GPIO_Init+0x328>)
 80051ca:	69fb      	ldr	r3, [r7, #28]
 80051cc:	089b      	lsrs	r3, r3, #2
 80051ce:	3302      	adds	r3, #2
 80051d0:	69ba      	ldr	r2, [r7, #24]
 80051d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80051d6:	4b3d      	ldr	r3, [pc, #244]	; (80052cc <HAL_GPIO_Init+0x354>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80051dc:	693b      	ldr	r3, [r7, #16]
 80051de:	43db      	mvns	r3, r3
 80051e0:	69ba      	ldr	r2, [r7, #24]
 80051e2:	4013      	ands	r3, r2
 80051e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	685b      	ldr	r3, [r3, #4]
 80051ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d003      	beq.n	80051fa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80051f2:	69ba      	ldr	r2, [r7, #24]
 80051f4:	693b      	ldr	r3, [r7, #16]
 80051f6:	4313      	orrs	r3, r2
 80051f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80051fa:	4a34      	ldr	r2, [pc, #208]	; (80052cc <HAL_GPIO_Init+0x354>)
 80051fc:	69bb      	ldr	r3, [r7, #24]
 80051fe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005200:	4b32      	ldr	r3, [pc, #200]	; (80052cc <HAL_GPIO_Init+0x354>)
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005206:	693b      	ldr	r3, [r7, #16]
 8005208:	43db      	mvns	r3, r3
 800520a:	69ba      	ldr	r2, [r7, #24]
 800520c:	4013      	ands	r3, r2
 800520e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005218:	2b00      	cmp	r3, #0
 800521a:	d003      	beq.n	8005224 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800521c:	69ba      	ldr	r2, [r7, #24]
 800521e:	693b      	ldr	r3, [r7, #16]
 8005220:	4313      	orrs	r3, r2
 8005222:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005224:	4a29      	ldr	r2, [pc, #164]	; (80052cc <HAL_GPIO_Init+0x354>)
 8005226:	69bb      	ldr	r3, [r7, #24]
 8005228:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800522a:	4b28      	ldr	r3, [pc, #160]	; (80052cc <HAL_GPIO_Init+0x354>)
 800522c:	689b      	ldr	r3, [r3, #8]
 800522e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005230:	693b      	ldr	r3, [r7, #16]
 8005232:	43db      	mvns	r3, r3
 8005234:	69ba      	ldr	r2, [r7, #24]
 8005236:	4013      	ands	r3, r2
 8005238:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	685b      	ldr	r3, [r3, #4]
 800523e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005242:	2b00      	cmp	r3, #0
 8005244:	d003      	beq.n	800524e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005246:	69ba      	ldr	r2, [r7, #24]
 8005248:	693b      	ldr	r3, [r7, #16]
 800524a:	4313      	orrs	r3, r2
 800524c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800524e:	4a1f      	ldr	r2, [pc, #124]	; (80052cc <HAL_GPIO_Init+0x354>)
 8005250:	69bb      	ldr	r3, [r7, #24]
 8005252:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005254:	4b1d      	ldr	r3, [pc, #116]	; (80052cc <HAL_GPIO_Init+0x354>)
 8005256:	68db      	ldr	r3, [r3, #12]
 8005258:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800525a:	693b      	ldr	r3, [r7, #16]
 800525c:	43db      	mvns	r3, r3
 800525e:	69ba      	ldr	r2, [r7, #24]
 8005260:	4013      	ands	r3, r2
 8005262:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	685b      	ldr	r3, [r3, #4]
 8005268:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800526c:	2b00      	cmp	r3, #0
 800526e:	d003      	beq.n	8005278 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005270:	69ba      	ldr	r2, [r7, #24]
 8005272:	693b      	ldr	r3, [r7, #16]
 8005274:	4313      	orrs	r3, r2
 8005276:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005278:	4a14      	ldr	r2, [pc, #80]	; (80052cc <HAL_GPIO_Init+0x354>)
 800527a:	69bb      	ldr	r3, [r7, #24]
 800527c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800527e:	69fb      	ldr	r3, [r7, #28]
 8005280:	3301      	adds	r3, #1
 8005282:	61fb      	str	r3, [r7, #28]
 8005284:	69fb      	ldr	r3, [r7, #28]
 8005286:	2b0f      	cmp	r3, #15
 8005288:	f67f ae84 	bls.w	8004f94 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800528c:	bf00      	nop
 800528e:	bf00      	nop
 8005290:	3724      	adds	r7, #36	; 0x24
 8005292:	46bd      	mov	sp, r7
 8005294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005298:	4770      	bx	lr
 800529a:	bf00      	nop
 800529c:	40023800 	.word	0x40023800
 80052a0:	40013800 	.word	0x40013800
 80052a4:	40020000 	.word	0x40020000
 80052a8:	40020400 	.word	0x40020400
 80052ac:	40020800 	.word	0x40020800
 80052b0:	40020c00 	.word	0x40020c00
 80052b4:	40021000 	.word	0x40021000
 80052b8:	40021400 	.word	0x40021400
 80052bc:	40021800 	.word	0x40021800
 80052c0:	40021c00 	.word	0x40021c00
 80052c4:	40022000 	.word	0x40022000
 80052c8:	40022400 	.word	0x40022400
 80052cc:	40013c00 	.word	0x40013c00

080052d0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80052d0:	b480      	push	{r7}
 80052d2:	b085      	sub	sp, #20
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
 80052d8:	460b      	mov	r3, r1
 80052da:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	691a      	ldr	r2, [r3, #16]
 80052e0:	887b      	ldrh	r3, [r7, #2]
 80052e2:	4013      	ands	r3, r2
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d002      	beq.n	80052ee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80052e8:	2301      	movs	r3, #1
 80052ea:	73fb      	strb	r3, [r7, #15]
 80052ec:	e001      	b.n	80052f2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80052ee:	2300      	movs	r3, #0
 80052f0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80052f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80052f4:	4618      	mov	r0, r3
 80052f6:	3714      	adds	r7, #20
 80052f8:	46bd      	mov	sp, r7
 80052fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fe:	4770      	bx	lr

08005300 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005300:	b480      	push	{r7}
 8005302:	b083      	sub	sp, #12
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
 8005308:	460b      	mov	r3, r1
 800530a:	807b      	strh	r3, [r7, #2]
 800530c:	4613      	mov	r3, r2
 800530e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005310:	787b      	ldrb	r3, [r7, #1]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d003      	beq.n	800531e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005316:	887a      	ldrh	r2, [r7, #2]
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800531c:	e003      	b.n	8005326 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800531e:	887b      	ldrh	r3, [r7, #2]
 8005320:	041a      	lsls	r2, r3, #16
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	619a      	str	r2, [r3, #24]
}
 8005326:	bf00      	nop
 8005328:	370c      	adds	r7, #12
 800532a:	46bd      	mov	sp, r7
 800532c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005330:	4770      	bx	lr
	...

08005334 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b082      	sub	sp, #8
 8005338:	af00      	add	r7, sp, #0
 800533a:	4603      	mov	r3, r0
 800533c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800533e:	4b08      	ldr	r3, [pc, #32]	; (8005360 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005340:	695a      	ldr	r2, [r3, #20]
 8005342:	88fb      	ldrh	r3, [r7, #6]
 8005344:	4013      	ands	r3, r2
 8005346:	2b00      	cmp	r3, #0
 8005348:	d006      	beq.n	8005358 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800534a:	4a05      	ldr	r2, [pc, #20]	; (8005360 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800534c:	88fb      	ldrh	r3, [r7, #6]
 800534e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005350:	88fb      	ldrh	r3, [r7, #6]
 8005352:	4618      	mov	r0, r3
 8005354:	f7fb fe50 	bl	8000ff8 <HAL_GPIO_EXTI_Callback>
  }
}
 8005358:	bf00      	nop
 800535a:	3708      	adds	r7, #8
 800535c:	46bd      	mov	sp, r7
 800535e:	bd80      	pop	{r7, pc}
 8005360:	40013c00 	.word	0x40013c00

08005364 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b084      	sub	sp, #16
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d101      	bne.n	8005376 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005372:	2301      	movs	r3, #1
 8005374:	e12b      	b.n	80055ce <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800537c:	b2db      	uxtb	r3, r3
 800537e:	2b00      	cmp	r3, #0
 8005380:	d106      	bne.n	8005390 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2200      	movs	r2, #0
 8005386:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800538a:	6878      	ldr	r0, [r7, #4]
 800538c:	f7fb fc64 	bl	8000c58 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2224      	movs	r2, #36	; 0x24
 8005394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	681a      	ldr	r2, [r3, #0]
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f022 0201 	bic.w	r2, r2, #1
 80053a6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	681a      	ldr	r2, [r3, #0]
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80053b6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	681a      	ldr	r2, [r3, #0]
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80053c6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80053c8:	f000 fe28 	bl	800601c <HAL_RCC_GetPCLK1Freq>
 80053cc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	685b      	ldr	r3, [r3, #4]
 80053d2:	4a81      	ldr	r2, [pc, #516]	; (80055d8 <HAL_I2C_Init+0x274>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d807      	bhi.n	80053e8 <HAL_I2C_Init+0x84>
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	4a80      	ldr	r2, [pc, #512]	; (80055dc <HAL_I2C_Init+0x278>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	bf94      	ite	ls
 80053e0:	2301      	movls	r3, #1
 80053e2:	2300      	movhi	r3, #0
 80053e4:	b2db      	uxtb	r3, r3
 80053e6:	e006      	b.n	80053f6 <HAL_I2C_Init+0x92>
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	4a7d      	ldr	r2, [pc, #500]	; (80055e0 <HAL_I2C_Init+0x27c>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	bf94      	ite	ls
 80053f0:	2301      	movls	r3, #1
 80053f2:	2300      	movhi	r3, #0
 80053f4:	b2db      	uxtb	r3, r3
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d001      	beq.n	80053fe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80053fa:	2301      	movs	r3, #1
 80053fc:	e0e7      	b.n	80055ce <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	4a78      	ldr	r2, [pc, #480]	; (80055e4 <HAL_I2C_Init+0x280>)
 8005402:	fba2 2303 	umull	r2, r3, r2, r3
 8005406:	0c9b      	lsrs	r3, r3, #18
 8005408:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	685b      	ldr	r3, [r3, #4]
 8005410:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	68ba      	ldr	r2, [r7, #8]
 800541a:	430a      	orrs	r2, r1
 800541c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	6a1b      	ldr	r3, [r3, #32]
 8005424:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	685b      	ldr	r3, [r3, #4]
 800542c:	4a6a      	ldr	r2, [pc, #424]	; (80055d8 <HAL_I2C_Init+0x274>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d802      	bhi.n	8005438 <HAL_I2C_Init+0xd4>
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	3301      	adds	r3, #1
 8005436:	e009      	b.n	800544c <HAL_I2C_Init+0xe8>
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800543e:	fb02 f303 	mul.w	r3, r2, r3
 8005442:	4a69      	ldr	r2, [pc, #420]	; (80055e8 <HAL_I2C_Init+0x284>)
 8005444:	fba2 2303 	umull	r2, r3, r2, r3
 8005448:	099b      	lsrs	r3, r3, #6
 800544a:	3301      	adds	r3, #1
 800544c:	687a      	ldr	r2, [r7, #4]
 800544e:	6812      	ldr	r2, [r2, #0]
 8005450:	430b      	orrs	r3, r1
 8005452:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	69db      	ldr	r3, [r3, #28]
 800545a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800545e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	495c      	ldr	r1, [pc, #368]	; (80055d8 <HAL_I2C_Init+0x274>)
 8005468:	428b      	cmp	r3, r1
 800546a:	d819      	bhi.n	80054a0 <HAL_I2C_Init+0x13c>
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	1e59      	subs	r1, r3, #1
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	685b      	ldr	r3, [r3, #4]
 8005474:	005b      	lsls	r3, r3, #1
 8005476:	fbb1 f3f3 	udiv	r3, r1, r3
 800547a:	1c59      	adds	r1, r3, #1
 800547c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005480:	400b      	ands	r3, r1
 8005482:	2b00      	cmp	r3, #0
 8005484:	d00a      	beq.n	800549c <HAL_I2C_Init+0x138>
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	1e59      	subs	r1, r3, #1
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	685b      	ldr	r3, [r3, #4]
 800548e:	005b      	lsls	r3, r3, #1
 8005490:	fbb1 f3f3 	udiv	r3, r1, r3
 8005494:	3301      	adds	r3, #1
 8005496:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800549a:	e051      	b.n	8005540 <HAL_I2C_Init+0x1dc>
 800549c:	2304      	movs	r3, #4
 800549e:	e04f      	b.n	8005540 <HAL_I2C_Init+0x1dc>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	689b      	ldr	r3, [r3, #8]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d111      	bne.n	80054cc <HAL_I2C_Init+0x168>
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	1e58      	subs	r0, r3, #1
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6859      	ldr	r1, [r3, #4]
 80054b0:	460b      	mov	r3, r1
 80054b2:	005b      	lsls	r3, r3, #1
 80054b4:	440b      	add	r3, r1
 80054b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80054ba:	3301      	adds	r3, #1
 80054bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	bf0c      	ite	eq
 80054c4:	2301      	moveq	r3, #1
 80054c6:	2300      	movne	r3, #0
 80054c8:	b2db      	uxtb	r3, r3
 80054ca:	e012      	b.n	80054f2 <HAL_I2C_Init+0x18e>
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	1e58      	subs	r0, r3, #1
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6859      	ldr	r1, [r3, #4]
 80054d4:	460b      	mov	r3, r1
 80054d6:	009b      	lsls	r3, r3, #2
 80054d8:	440b      	add	r3, r1
 80054da:	0099      	lsls	r1, r3, #2
 80054dc:	440b      	add	r3, r1
 80054de:	fbb0 f3f3 	udiv	r3, r0, r3
 80054e2:	3301      	adds	r3, #1
 80054e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	bf0c      	ite	eq
 80054ec:	2301      	moveq	r3, #1
 80054ee:	2300      	movne	r3, #0
 80054f0:	b2db      	uxtb	r3, r3
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d001      	beq.n	80054fa <HAL_I2C_Init+0x196>
 80054f6:	2301      	movs	r3, #1
 80054f8:	e022      	b.n	8005540 <HAL_I2C_Init+0x1dc>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	689b      	ldr	r3, [r3, #8]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d10e      	bne.n	8005520 <HAL_I2C_Init+0x1bc>
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	1e58      	subs	r0, r3, #1
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6859      	ldr	r1, [r3, #4]
 800550a:	460b      	mov	r3, r1
 800550c:	005b      	lsls	r3, r3, #1
 800550e:	440b      	add	r3, r1
 8005510:	fbb0 f3f3 	udiv	r3, r0, r3
 8005514:	3301      	adds	r3, #1
 8005516:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800551a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800551e:	e00f      	b.n	8005540 <HAL_I2C_Init+0x1dc>
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	1e58      	subs	r0, r3, #1
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6859      	ldr	r1, [r3, #4]
 8005528:	460b      	mov	r3, r1
 800552a:	009b      	lsls	r3, r3, #2
 800552c:	440b      	add	r3, r1
 800552e:	0099      	lsls	r1, r3, #2
 8005530:	440b      	add	r3, r1
 8005532:	fbb0 f3f3 	udiv	r3, r0, r3
 8005536:	3301      	adds	r3, #1
 8005538:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800553c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005540:	6879      	ldr	r1, [r7, #4]
 8005542:	6809      	ldr	r1, [r1, #0]
 8005544:	4313      	orrs	r3, r2
 8005546:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	69da      	ldr	r2, [r3, #28]
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6a1b      	ldr	r3, [r3, #32]
 800555a:	431a      	orrs	r2, r3
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	430a      	orrs	r2, r1
 8005562:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	689b      	ldr	r3, [r3, #8]
 800556a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800556e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005572:	687a      	ldr	r2, [r7, #4]
 8005574:	6911      	ldr	r1, [r2, #16]
 8005576:	687a      	ldr	r2, [r7, #4]
 8005578:	68d2      	ldr	r2, [r2, #12]
 800557a:	4311      	orrs	r1, r2
 800557c:	687a      	ldr	r2, [r7, #4]
 800557e:	6812      	ldr	r2, [r2, #0]
 8005580:	430b      	orrs	r3, r1
 8005582:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	68db      	ldr	r3, [r3, #12]
 800558a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	695a      	ldr	r2, [r3, #20]
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	699b      	ldr	r3, [r3, #24]
 8005596:	431a      	orrs	r2, r3
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	430a      	orrs	r2, r1
 800559e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	681a      	ldr	r2, [r3, #0]
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f042 0201 	orr.w	r2, r2, #1
 80055ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2200      	movs	r2, #0
 80055b4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2220      	movs	r2, #32
 80055ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2200      	movs	r2, #0
 80055c2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2200      	movs	r2, #0
 80055c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80055cc:	2300      	movs	r3, #0
}
 80055ce:	4618      	mov	r0, r3
 80055d0:	3710      	adds	r7, #16
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bd80      	pop	{r7, pc}
 80055d6:	bf00      	nop
 80055d8:	000186a0 	.word	0x000186a0
 80055dc:	001e847f 	.word	0x001e847f
 80055e0:	003d08ff 	.word	0x003d08ff
 80055e4:	431bde83 	.word	0x431bde83
 80055e8:	10624dd3 	.word	0x10624dd3

080055ec <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80055ec:	b480      	push	{r7}
 80055ee:	b083      	sub	sp, #12
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
 80055f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055fc:	b2db      	uxtb	r3, r3
 80055fe:	2b20      	cmp	r3, #32
 8005600:	d129      	bne.n	8005656 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2224      	movs	r2, #36	; 0x24
 8005606:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	681a      	ldr	r2, [r3, #0]
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f022 0201 	bic.w	r2, r2, #1
 8005618:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f022 0210 	bic.w	r2, r2, #16
 8005628:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	683a      	ldr	r2, [r7, #0]
 8005636:	430a      	orrs	r2, r1
 8005638:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	681a      	ldr	r2, [r3, #0]
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f042 0201 	orr.w	r2, r2, #1
 8005648:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2220      	movs	r2, #32
 800564e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005652:	2300      	movs	r3, #0
 8005654:	e000      	b.n	8005658 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8005656:	2302      	movs	r3, #2
  }
}
 8005658:	4618      	mov	r0, r3
 800565a:	370c      	adds	r7, #12
 800565c:	46bd      	mov	sp, r7
 800565e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005662:	4770      	bx	lr

08005664 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005664:	b480      	push	{r7}
 8005666:	b085      	sub	sp, #20
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
 800566c:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800566e:	2300      	movs	r3, #0
 8005670:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005678:	b2db      	uxtb	r3, r3
 800567a:	2b20      	cmp	r3, #32
 800567c:	d12a      	bne.n	80056d4 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2224      	movs	r2, #36	; 0x24
 8005682:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	681a      	ldr	r2, [r3, #0]
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f022 0201 	bic.w	r2, r2, #1
 8005694:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800569c:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 800569e:	89fb      	ldrh	r3, [r7, #14]
 80056a0:	f023 030f 	bic.w	r3, r3, #15
 80056a4:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	b29a      	uxth	r2, r3
 80056aa:	89fb      	ldrh	r3, [r7, #14]
 80056ac:	4313      	orrs	r3, r2
 80056ae:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	89fa      	ldrh	r2, [r7, #14]
 80056b6:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	681a      	ldr	r2, [r3, #0]
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f042 0201 	orr.w	r2, r2, #1
 80056c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2220      	movs	r2, #32
 80056cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80056d0:	2300      	movs	r3, #0
 80056d2:	e000      	b.n	80056d6 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80056d4:	2302      	movs	r3, #2
  }
}
 80056d6:	4618      	mov	r0, r3
 80056d8:	3714      	adds	r7, #20
 80056da:	46bd      	mov	sp, r7
 80056dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e0:	4770      	bx	lr
	...

080056e4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b082      	sub	sp, #8
 80056e8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80056ea:	2300      	movs	r3, #0
 80056ec:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80056ee:	2300      	movs	r3, #0
 80056f0:	603b      	str	r3, [r7, #0]
 80056f2:	4b20      	ldr	r3, [pc, #128]	; (8005774 <HAL_PWREx_EnableOverDrive+0x90>)
 80056f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056f6:	4a1f      	ldr	r2, [pc, #124]	; (8005774 <HAL_PWREx_EnableOverDrive+0x90>)
 80056f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056fc:	6413      	str	r3, [r2, #64]	; 0x40
 80056fe:	4b1d      	ldr	r3, [pc, #116]	; (8005774 <HAL_PWREx_EnableOverDrive+0x90>)
 8005700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005702:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005706:	603b      	str	r3, [r7, #0]
 8005708:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800570a:	4b1b      	ldr	r3, [pc, #108]	; (8005778 <HAL_PWREx_EnableOverDrive+0x94>)
 800570c:	2201      	movs	r2, #1
 800570e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005710:	f7fc fcc6 	bl	80020a0 <HAL_GetTick>
 8005714:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005716:	e009      	b.n	800572c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005718:	f7fc fcc2 	bl	80020a0 <HAL_GetTick>
 800571c:	4602      	mov	r2, r0
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	1ad3      	subs	r3, r2, r3
 8005722:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005726:	d901      	bls.n	800572c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8005728:	2303      	movs	r3, #3
 800572a:	e01f      	b.n	800576c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800572c:	4b13      	ldr	r3, [pc, #76]	; (800577c <HAL_PWREx_EnableOverDrive+0x98>)
 800572e:	685b      	ldr	r3, [r3, #4]
 8005730:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005734:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005738:	d1ee      	bne.n	8005718 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800573a:	4b11      	ldr	r3, [pc, #68]	; (8005780 <HAL_PWREx_EnableOverDrive+0x9c>)
 800573c:	2201      	movs	r2, #1
 800573e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005740:	f7fc fcae 	bl	80020a0 <HAL_GetTick>
 8005744:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005746:	e009      	b.n	800575c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005748:	f7fc fcaa 	bl	80020a0 <HAL_GetTick>
 800574c:	4602      	mov	r2, r0
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	1ad3      	subs	r3, r2, r3
 8005752:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005756:	d901      	bls.n	800575c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8005758:	2303      	movs	r3, #3
 800575a:	e007      	b.n	800576c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800575c:	4b07      	ldr	r3, [pc, #28]	; (800577c <HAL_PWREx_EnableOverDrive+0x98>)
 800575e:	685b      	ldr	r3, [r3, #4]
 8005760:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005764:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005768:	d1ee      	bne.n	8005748 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800576a:	2300      	movs	r3, #0
}
 800576c:	4618      	mov	r0, r3
 800576e:	3708      	adds	r7, #8
 8005770:	46bd      	mov	sp, r7
 8005772:	bd80      	pop	{r7, pc}
 8005774:	40023800 	.word	0x40023800
 8005778:	420e0040 	.word	0x420e0040
 800577c:	40007000 	.word	0x40007000
 8005780:	420e0044 	.word	0x420e0044

08005784 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b086      	sub	sp, #24
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d101      	bne.n	8005796 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005792:	2301      	movs	r3, #1
 8005794:	e264      	b.n	8005c60 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f003 0301 	and.w	r3, r3, #1
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d075      	beq.n	800588e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80057a2:	4ba3      	ldr	r3, [pc, #652]	; (8005a30 <HAL_RCC_OscConfig+0x2ac>)
 80057a4:	689b      	ldr	r3, [r3, #8]
 80057a6:	f003 030c 	and.w	r3, r3, #12
 80057aa:	2b04      	cmp	r3, #4
 80057ac:	d00c      	beq.n	80057c8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80057ae:	4ba0      	ldr	r3, [pc, #640]	; (8005a30 <HAL_RCC_OscConfig+0x2ac>)
 80057b0:	689b      	ldr	r3, [r3, #8]
 80057b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80057b6:	2b08      	cmp	r3, #8
 80057b8:	d112      	bne.n	80057e0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80057ba:	4b9d      	ldr	r3, [pc, #628]	; (8005a30 <HAL_RCC_OscConfig+0x2ac>)
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80057c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80057c6:	d10b      	bne.n	80057e0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057c8:	4b99      	ldr	r3, [pc, #612]	; (8005a30 <HAL_RCC_OscConfig+0x2ac>)
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d05b      	beq.n	800588c <HAL_RCC_OscConfig+0x108>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	685b      	ldr	r3, [r3, #4]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d157      	bne.n	800588c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80057dc:	2301      	movs	r3, #1
 80057de:	e23f      	b.n	8005c60 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057e8:	d106      	bne.n	80057f8 <HAL_RCC_OscConfig+0x74>
 80057ea:	4b91      	ldr	r3, [pc, #580]	; (8005a30 <HAL_RCC_OscConfig+0x2ac>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4a90      	ldr	r2, [pc, #576]	; (8005a30 <HAL_RCC_OscConfig+0x2ac>)
 80057f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057f4:	6013      	str	r3, [r2, #0]
 80057f6:	e01d      	b.n	8005834 <HAL_RCC_OscConfig+0xb0>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	685b      	ldr	r3, [r3, #4]
 80057fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005800:	d10c      	bne.n	800581c <HAL_RCC_OscConfig+0x98>
 8005802:	4b8b      	ldr	r3, [pc, #556]	; (8005a30 <HAL_RCC_OscConfig+0x2ac>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	4a8a      	ldr	r2, [pc, #552]	; (8005a30 <HAL_RCC_OscConfig+0x2ac>)
 8005808:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800580c:	6013      	str	r3, [r2, #0]
 800580e:	4b88      	ldr	r3, [pc, #544]	; (8005a30 <HAL_RCC_OscConfig+0x2ac>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4a87      	ldr	r2, [pc, #540]	; (8005a30 <HAL_RCC_OscConfig+0x2ac>)
 8005814:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005818:	6013      	str	r3, [r2, #0]
 800581a:	e00b      	b.n	8005834 <HAL_RCC_OscConfig+0xb0>
 800581c:	4b84      	ldr	r3, [pc, #528]	; (8005a30 <HAL_RCC_OscConfig+0x2ac>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4a83      	ldr	r2, [pc, #524]	; (8005a30 <HAL_RCC_OscConfig+0x2ac>)
 8005822:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005826:	6013      	str	r3, [r2, #0]
 8005828:	4b81      	ldr	r3, [pc, #516]	; (8005a30 <HAL_RCC_OscConfig+0x2ac>)
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4a80      	ldr	r2, [pc, #512]	; (8005a30 <HAL_RCC_OscConfig+0x2ac>)
 800582e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005832:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	685b      	ldr	r3, [r3, #4]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d013      	beq.n	8005864 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800583c:	f7fc fc30 	bl	80020a0 <HAL_GetTick>
 8005840:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005842:	e008      	b.n	8005856 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005844:	f7fc fc2c 	bl	80020a0 <HAL_GetTick>
 8005848:	4602      	mov	r2, r0
 800584a:	693b      	ldr	r3, [r7, #16]
 800584c:	1ad3      	subs	r3, r2, r3
 800584e:	2b64      	cmp	r3, #100	; 0x64
 8005850:	d901      	bls.n	8005856 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005852:	2303      	movs	r3, #3
 8005854:	e204      	b.n	8005c60 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005856:	4b76      	ldr	r3, [pc, #472]	; (8005a30 <HAL_RCC_OscConfig+0x2ac>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800585e:	2b00      	cmp	r3, #0
 8005860:	d0f0      	beq.n	8005844 <HAL_RCC_OscConfig+0xc0>
 8005862:	e014      	b.n	800588e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005864:	f7fc fc1c 	bl	80020a0 <HAL_GetTick>
 8005868:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800586a:	e008      	b.n	800587e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800586c:	f7fc fc18 	bl	80020a0 <HAL_GetTick>
 8005870:	4602      	mov	r2, r0
 8005872:	693b      	ldr	r3, [r7, #16]
 8005874:	1ad3      	subs	r3, r2, r3
 8005876:	2b64      	cmp	r3, #100	; 0x64
 8005878:	d901      	bls.n	800587e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800587a:	2303      	movs	r3, #3
 800587c:	e1f0      	b.n	8005c60 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800587e:	4b6c      	ldr	r3, [pc, #432]	; (8005a30 <HAL_RCC_OscConfig+0x2ac>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005886:	2b00      	cmp	r3, #0
 8005888:	d1f0      	bne.n	800586c <HAL_RCC_OscConfig+0xe8>
 800588a:	e000      	b.n	800588e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800588c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f003 0302 	and.w	r3, r3, #2
 8005896:	2b00      	cmp	r3, #0
 8005898:	d063      	beq.n	8005962 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800589a:	4b65      	ldr	r3, [pc, #404]	; (8005a30 <HAL_RCC_OscConfig+0x2ac>)
 800589c:	689b      	ldr	r3, [r3, #8]
 800589e:	f003 030c 	and.w	r3, r3, #12
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d00b      	beq.n	80058be <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80058a6:	4b62      	ldr	r3, [pc, #392]	; (8005a30 <HAL_RCC_OscConfig+0x2ac>)
 80058a8:	689b      	ldr	r3, [r3, #8]
 80058aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80058ae:	2b08      	cmp	r3, #8
 80058b0:	d11c      	bne.n	80058ec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80058b2:	4b5f      	ldr	r3, [pc, #380]	; (8005a30 <HAL_RCC_OscConfig+0x2ac>)
 80058b4:	685b      	ldr	r3, [r3, #4]
 80058b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d116      	bne.n	80058ec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80058be:	4b5c      	ldr	r3, [pc, #368]	; (8005a30 <HAL_RCC_OscConfig+0x2ac>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f003 0302 	and.w	r3, r3, #2
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d005      	beq.n	80058d6 <HAL_RCC_OscConfig+0x152>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	68db      	ldr	r3, [r3, #12]
 80058ce:	2b01      	cmp	r3, #1
 80058d0:	d001      	beq.n	80058d6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80058d2:	2301      	movs	r3, #1
 80058d4:	e1c4      	b.n	8005c60 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058d6:	4b56      	ldr	r3, [pc, #344]	; (8005a30 <HAL_RCC_OscConfig+0x2ac>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	691b      	ldr	r3, [r3, #16]
 80058e2:	00db      	lsls	r3, r3, #3
 80058e4:	4952      	ldr	r1, [pc, #328]	; (8005a30 <HAL_RCC_OscConfig+0x2ac>)
 80058e6:	4313      	orrs	r3, r2
 80058e8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80058ea:	e03a      	b.n	8005962 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	68db      	ldr	r3, [r3, #12]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d020      	beq.n	8005936 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80058f4:	4b4f      	ldr	r3, [pc, #316]	; (8005a34 <HAL_RCC_OscConfig+0x2b0>)
 80058f6:	2201      	movs	r2, #1
 80058f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058fa:	f7fc fbd1 	bl	80020a0 <HAL_GetTick>
 80058fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005900:	e008      	b.n	8005914 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005902:	f7fc fbcd 	bl	80020a0 <HAL_GetTick>
 8005906:	4602      	mov	r2, r0
 8005908:	693b      	ldr	r3, [r7, #16]
 800590a:	1ad3      	subs	r3, r2, r3
 800590c:	2b02      	cmp	r3, #2
 800590e:	d901      	bls.n	8005914 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005910:	2303      	movs	r3, #3
 8005912:	e1a5      	b.n	8005c60 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005914:	4b46      	ldr	r3, [pc, #280]	; (8005a30 <HAL_RCC_OscConfig+0x2ac>)
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f003 0302 	and.w	r3, r3, #2
 800591c:	2b00      	cmp	r3, #0
 800591e:	d0f0      	beq.n	8005902 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005920:	4b43      	ldr	r3, [pc, #268]	; (8005a30 <HAL_RCC_OscConfig+0x2ac>)
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	691b      	ldr	r3, [r3, #16]
 800592c:	00db      	lsls	r3, r3, #3
 800592e:	4940      	ldr	r1, [pc, #256]	; (8005a30 <HAL_RCC_OscConfig+0x2ac>)
 8005930:	4313      	orrs	r3, r2
 8005932:	600b      	str	r3, [r1, #0]
 8005934:	e015      	b.n	8005962 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005936:	4b3f      	ldr	r3, [pc, #252]	; (8005a34 <HAL_RCC_OscConfig+0x2b0>)
 8005938:	2200      	movs	r2, #0
 800593a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800593c:	f7fc fbb0 	bl	80020a0 <HAL_GetTick>
 8005940:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005942:	e008      	b.n	8005956 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005944:	f7fc fbac 	bl	80020a0 <HAL_GetTick>
 8005948:	4602      	mov	r2, r0
 800594a:	693b      	ldr	r3, [r7, #16]
 800594c:	1ad3      	subs	r3, r2, r3
 800594e:	2b02      	cmp	r3, #2
 8005950:	d901      	bls.n	8005956 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005952:	2303      	movs	r3, #3
 8005954:	e184      	b.n	8005c60 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005956:	4b36      	ldr	r3, [pc, #216]	; (8005a30 <HAL_RCC_OscConfig+0x2ac>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f003 0302 	and.w	r3, r3, #2
 800595e:	2b00      	cmp	r3, #0
 8005960:	d1f0      	bne.n	8005944 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f003 0308 	and.w	r3, r3, #8
 800596a:	2b00      	cmp	r3, #0
 800596c:	d030      	beq.n	80059d0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	695b      	ldr	r3, [r3, #20]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d016      	beq.n	80059a4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005976:	4b30      	ldr	r3, [pc, #192]	; (8005a38 <HAL_RCC_OscConfig+0x2b4>)
 8005978:	2201      	movs	r2, #1
 800597a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800597c:	f7fc fb90 	bl	80020a0 <HAL_GetTick>
 8005980:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005982:	e008      	b.n	8005996 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005984:	f7fc fb8c 	bl	80020a0 <HAL_GetTick>
 8005988:	4602      	mov	r2, r0
 800598a:	693b      	ldr	r3, [r7, #16]
 800598c:	1ad3      	subs	r3, r2, r3
 800598e:	2b02      	cmp	r3, #2
 8005990:	d901      	bls.n	8005996 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005992:	2303      	movs	r3, #3
 8005994:	e164      	b.n	8005c60 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005996:	4b26      	ldr	r3, [pc, #152]	; (8005a30 <HAL_RCC_OscConfig+0x2ac>)
 8005998:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800599a:	f003 0302 	and.w	r3, r3, #2
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d0f0      	beq.n	8005984 <HAL_RCC_OscConfig+0x200>
 80059a2:	e015      	b.n	80059d0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80059a4:	4b24      	ldr	r3, [pc, #144]	; (8005a38 <HAL_RCC_OscConfig+0x2b4>)
 80059a6:	2200      	movs	r2, #0
 80059a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80059aa:	f7fc fb79 	bl	80020a0 <HAL_GetTick>
 80059ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80059b0:	e008      	b.n	80059c4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80059b2:	f7fc fb75 	bl	80020a0 <HAL_GetTick>
 80059b6:	4602      	mov	r2, r0
 80059b8:	693b      	ldr	r3, [r7, #16]
 80059ba:	1ad3      	subs	r3, r2, r3
 80059bc:	2b02      	cmp	r3, #2
 80059be:	d901      	bls.n	80059c4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80059c0:	2303      	movs	r3, #3
 80059c2:	e14d      	b.n	8005c60 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80059c4:	4b1a      	ldr	r3, [pc, #104]	; (8005a30 <HAL_RCC_OscConfig+0x2ac>)
 80059c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059c8:	f003 0302 	and.w	r3, r3, #2
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d1f0      	bne.n	80059b2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f003 0304 	and.w	r3, r3, #4
 80059d8:	2b00      	cmp	r3, #0
 80059da:	f000 80a0 	beq.w	8005b1e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80059de:	2300      	movs	r3, #0
 80059e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80059e2:	4b13      	ldr	r3, [pc, #76]	; (8005a30 <HAL_RCC_OscConfig+0x2ac>)
 80059e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d10f      	bne.n	8005a0e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80059ee:	2300      	movs	r3, #0
 80059f0:	60bb      	str	r3, [r7, #8]
 80059f2:	4b0f      	ldr	r3, [pc, #60]	; (8005a30 <HAL_RCC_OscConfig+0x2ac>)
 80059f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059f6:	4a0e      	ldr	r2, [pc, #56]	; (8005a30 <HAL_RCC_OscConfig+0x2ac>)
 80059f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059fc:	6413      	str	r3, [r2, #64]	; 0x40
 80059fe:	4b0c      	ldr	r3, [pc, #48]	; (8005a30 <HAL_RCC_OscConfig+0x2ac>)
 8005a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a06:	60bb      	str	r3, [r7, #8]
 8005a08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a0e:	4b0b      	ldr	r3, [pc, #44]	; (8005a3c <HAL_RCC_OscConfig+0x2b8>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d121      	bne.n	8005a5e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005a1a:	4b08      	ldr	r3, [pc, #32]	; (8005a3c <HAL_RCC_OscConfig+0x2b8>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	4a07      	ldr	r2, [pc, #28]	; (8005a3c <HAL_RCC_OscConfig+0x2b8>)
 8005a20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005a26:	f7fc fb3b 	bl	80020a0 <HAL_GetTick>
 8005a2a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a2c:	e011      	b.n	8005a52 <HAL_RCC_OscConfig+0x2ce>
 8005a2e:	bf00      	nop
 8005a30:	40023800 	.word	0x40023800
 8005a34:	42470000 	.word	0x42470000
 8005a38:	42470e80 	.word	0x42470e80
 8005a3c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a40:	f7fc fb2e 	bl	80020a0 <HAL_GetTick>
 8005a44:	4602      	mov	r2, r0
 8005a46:	693b      	ldr	r3, [r7, #16]
 8005a48:	1ad3      	subs	r3, r2, r3
 8005a4a:	2b02      	cmp	r3, #2
 8005a4c:	d901      	bls.n	8005a52 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005a4e:	2303      	movs	r3, #3
 8005a50:	e106      	b.n	8005c60 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a52:	4b85      	ldr	r3, [pc, #532]	; (8005c68 <HAL_RCC_OscConfig+0x4e4>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d0f0      	beq.n	8005a40 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	689b      	ldr	r3, [r3, #8]
 8005a62:	2b01      	cmp	r3, #1
 8005a64:	d106      	bne.n	8005a74 <HAL_RCC_OscConfig+0x2f0>
 8005a66:	4b81      	ldr	r3, [pc, #516]	; (8005c6c <HAL_RCC_OscConfig+0x4e8>)
 8005a68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a6a:	4a80      	ldr	r2, [pc, #512]	; (8005c6c <HAL_RCC_OscConfig+0x4e8>)
 8005a6c:	f043 0301 	orr.w	r3, r3, #1
 8005a70:	6713      	str	r3, [r2, #112]	; 0x70
 8005a72:	e01c      	b.n	8005aae <HAL_RCC_OscConfig+0x32a>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	689b      	ldr	r3, [r3, #8]
 8005a78:	2b05      	cmp	r3, #5
 8005a7a:	d10c      	bne.n	8005a96 <HAL_RCC_OscConfig+0x312>
 8005a7c:	4b7b      	ldr	r3, [pc, #492]	; (8005c6c <HAL_RCC_OscConfig+0x4e8>)
 8005a7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a80:	4a7a      	ldr	r2, [pc, #488]	; (8005c6c <HAL_RCC_OscConfig+0x4e8>)
 8005a82:	f043 0304 	orr.w	r3, r3, #4
 8005a86:	6713      	str	r3, [r2, #112]	; 0x70
 8005a88:	4b78      	ldr	r3, [pc, #480]	; (8005c6c <HAL_RCC_OscConfig+0x4e8>)
 8005a8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a8c:	4a77      	ldr	r2, [pc, #476]	; (8005c6c <HAL_RCC_OscConfig+0x4e8>)
 8005a8e:	f043 0301 	orr.w	r3, r3, #1
 8005a92:	6713      	str	r3, [r2, #112]	; 0x70
 8005a94:	e00b      	b.n	8005aae <HAL_RCC_OscConfig+0x32a>
 8005a96:	4b75      	ldr	r3, [pc, #468]	; (8005c6c <HAL_RCC_OscConfig+0x4e8>)
 8005a98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a9a:	4a74      	ldr	r2, [pc, #464]	; (8005c6c <HAL_RCC_OscConfig+0x4e8>)
 8005a9c:	f023 0301 	bic.w	r3, r3, #1
 8005aa0:	6713      	str	r3, [r2, #112]	; 0x70
 8005aa2:	4b72      	ldr	r3, [pc, #456]	; (8005c6c <HAL_RCC_OscConfig+0x4e8>)
 8005aa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005aa6:	4a71      	ldr	r2, [pc, #452]	; (8005c6c <HAL_RCC_OscConfig+0x4e8>)
 8005aa8:	f023 0304 	bic.w	r3, r3, #4
 8005aac:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	689b      	ldr	r3, [r3, #8]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d015      	beq.n	8005ae2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ab6:	f7fc faf3 	bl	80020a0 <HAL_GetTick>
 8005aba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005abc:	e00a      	b.n	8005ad4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005abe:	f7fc faef 	bl	80020a0 <HAL_GetTick>
 8005ac2:	4602      	mov	r2, r0
 8005ac4:	693b      	ldr	r3, [r7, #16]
 8005ac6:	1ad3      	subs	r3, r2, r3
 8005ac8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d901      	bls.n	8005ad4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005ad0:	2303      	movs	r3, #3
 8005ad2:	e0c5      	b.n	8005c60 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ad4:	4b65      	ldr	r3, [pc, #404]	; (8005c6c <HAL_RCC_OscConfig+0x4e8>)
 8005ad6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ad8:	f003 0302 	and.w	r3, r3, #2
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d0ee      	beq.n	8005abe <HAL_RCC_OscConfig+0x33a>
 8005ae0:	e014      	b.n	8005b0c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ae2:	f7fc fadd 	bl	80020a0 <HAL_GetTick>
 8005ae6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ae8:	e00a      	b.n	8005b00 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005aea:	f7fc fad9 	bl	80020a0 <HAL_GetTick>
 8005aee:	4602      	mov	r2, r0
 8005af0:	693b      	ldr	r3, [r7, #16]
 8005af2:	1ad3      	subs	r3, r2, r3
 8005af4:	f241 3288 	movw	r2, #5000	; 0x1388
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d901      	bls.n	8005b00 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005afc:	2303      	movs	r3, #3
 8005afe:	e0af      	b.n	8005c60 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b00:	4b5a      	ldr	r3, [pc, #360]	; (8005c6c <HAL_RCC_OscConfig+0x4e8>)
 8005b02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b04:	f003 0302 	and.w	r3, r3, #2
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d1ee      	bne.n	8005aea <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005b0c:	7dfb      	ldrb	r3, [r7, #23]
 8005b0e:	2b01      	cmp	r3, #1
 8005b10:	d105      	bne.n	8005b1e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b12:	4b56      	ldr	r3, [pc, #344]	; (8005c6c <HAL_RCC_OscConfig+0x4e8>)
 8005b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b16:	4a55      	ldr	r2, [pc, #340]	; (8005c6c <HAL_RCC_OscConfig+0x4e8>)
 8005b18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b1c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	699b      	ldr	r3, [r3, #24]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	f000 809b 	beq.w	8005c5e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005b28:	4b50      	ldr	r3, [pc, #320]	; (8005c6c <HAL_RCC_OscConfig+0x4e8>)
 8005b2a:	689b      	ldr	r3, [r3, #8]
 8005b2c:	f003 030c 	and.w	r3, r3, #12
 8005b30:	2b08      	cmp	r3, #8
 8005b32:	d05c      	beq.n	8005bee <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	699b      	ldr	r3, [r3, #24]
 8005b38:	2b02      	cmp	r3, #2
 8005b3a:	d141      	bne.n	8005bc0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b3c:	4b4c      	ldr	r3, [pc, #304]	; (8005c70 <HAL_RCC_OscConfig+0x4ec>)
 8005b3e:	2200      	movs	r2, #0
 8005b40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b42:	f7fc faad 	bl	80020a0 <HAL_GetTick>
 8005b46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b48:	e008      	b.n	8005b5c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b4a:	f7fc faa9 	bl	80020a0 <HAL_GetTick>
 8005b4e:	4602      	mov	r2, r0
 8005b50:	693b      	ldr	r3, [r7, #16]
 8005b52:	1ad3      	subs	r3, r2, r3
 8005b54:	2b02      	cmp	r3, #2
 8005b56:	d901      	bls.n	8005b5c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005b58:	2303      	movs	r3, #3
 8005b5a:	e081      	b.n	8005c60 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b5c:	4b43      	ldr	r3, [pc, #268]	; (8005c6c <HAL_RCC_OscConfig+0x4e8>)
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d1f0      	bne.n	8005b4a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	69da      	ldr	r2, [r3, #28]
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6a1b      	ldr	r3, [r3, #32]
 8005b70:	431a      	orrs	r2, r3
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b76:	019b      	lsls	r3, r3, #6
 8005b78:	431a      	orrs	r2, r3
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b7e:	085b      	lsrs	r3, r3, #1
 8005b80:	3b01      	subs	r3, #1
 8005b82:	041b      	lsls	r3, r3, #16
 8005b84:	431a      	orrs	r2, r3
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b8a:	061b      	lsls	r3, r3, #24
 8005b8c:	4937      	ldr	r1, [pc, #220]	; (8005c6c <HAL_RCC_OscConfig+0x4e8>)
 8005b8e:	4313      	orrs	r3, r2
 8005b90:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005b92:	4b37      	ldr	r3, [pc, #220]	; (8005c70 <HAL_RCC_OscConfig+0x4ec>)
 8005b94:	2201      	movs	r2, #1
 8005b96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b98:	f7fc fa82 	bl	80020a0 <HAL_GetTick>
 8005b9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b9e:	e008      	b.n	8005bb2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ba0:	f7fc fa7e 	bl	80020a0 <HAL_GetTick>
 8005ba4:	4602      	mov	r2, r0
 8005ba6:	693b      	ldr	r3, [r7, #16]
 8005ba8:	1ad3      	subs	r3, r2, r3
 8005baa:	2b02      	cmp	r3, #2
 8005bac:	d901      	bls.n	8005bb2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005bae:	2303      	movs	r3, #3
 8005bb0:	e056      	b.n	8005c60 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005bb2:	4b2e      	ldr	r3, [pc, #184]	; (8005c6c <HAL_RCC_OscConfig+0x4e8>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d0f0      	beq.n	8005ba0 <HAL_RCC_OscConfig+0x41c>
 8005bbe:	e04e      	b.n	8005c5e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005bc0:	4b2b      	ldr	r3, [pc, #172]	; (8005c70 <HAL_RCC_OscConfig+0x4ec>)
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bc6:	f7fc fa6b 	bl	80020a0 <HAL_GetTick>
 8005bca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005bcc:	e008      	b.n	8005be0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005bce:	f7fc fa67 	bl	80020a0 <HAL_GetTick>
 8005bd2:	4602      	mov	r2, r0
 8005bd4:	693b      	ldr	r3, [r7, #16]
 8005bd6:	1ad3      	subs	r3, r2, r3
 8005bd8:	2b02      	cmp	r3, #2
 8005bda:	d901      	bls.n	8005be0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005bdc:	2303      	movs	r3, #3
 8005bde:	e03f      	b.n	8005c60 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005be0:	4b22      	ldr	r3, [pc, #136]	; (8005c6c <HAL_RCC_OscConfig+0x4e8>)
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d1f0      	bne.n	8005bce <HAL_RCC_OscConfig+0x44a>
 8005bec:	e037      	b.n	8005c5e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	699b      	ldr	r3, [r3, #24]
 8005bf2:	2b01      	cmp	r3, #1
 8005bf4:	d101      	bne.n	8005bfa <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	e032      	b.n	8005c60 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005bfa:	4b1c      	ldr	r3, [pc, #112]	; (8005c6c <HAL_RCC_OscConfig+0x4e8>)
 8005bfc:	685b      	ldr	r3, [r3, #4]
 8005bfe:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	699b      	ldr	r3, [r3, #24]
 8005c04:	2b01      	cmp	r3, #1
 8005c06:	d028      	beq.n	8005c5a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005c12:	429a      	cmp	r2, r3
 8005c14:	d121      	bne.n	8005c5a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c20:	429a      	cmp	r2, r3
 8005c22:	d11a      	bne.n	8005c5a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005c24:	68fa      	ldr	r2, [r7, #12]
 8005c26:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005c2a:	4013      	ands	r3, r2
 8005c2c:	687a      	ldr	r2, [r7, #4]
 8005c2e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005c30:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d111      	bne.n	8005c5a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c40:	085b      	lsrs	r3, r3, #1
 8005c42:	3b01      	subs	r3, #1
 8005c44:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005c46:	429a      	cmp	r2, r3
 8005c48:	d107      	bne.n	8005c5a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c54:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005c56:	429a      	cmp	r2, r3
 8005c58:	d001      	beq.n	8005c5e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	e000      	b.n	8005c60 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8005c5e:	2300      	movs	r3, #0
}
 8005c60:	4618      	mov	r0, r3
 8005c62:	3718      	adds	r7, #24
 8005c64:	46bd      	mov	sp, r7
 8005c66:	bd80      	pop	{r7, pc}
 8005c68:	40007000 	.word	0x40007000
 8005c6c:	40023800 	.word	0x40023800
 8005c70:	42470060 	.word	0x42470060

08005c74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b084      	sub	sp, #16
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
 8005c7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d101      	bne.n	8005c88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005c84:	2301      	movs	r3, #1
 8005c86:	e0cc      	b.n	8005e22 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005c88:	4b68      	ldr	r3, [pc, #416]	; (8005e2c <HAL_RCC_ClockConfig+0x1b8>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f003 030f 	and.w	r3, r3, #15
 8005c90:	683a      	ldr	r2, [r7, #0]
 8005c92:	429a      	cmp	r2, r3
 8005c94:	d90c      	bls.n	8005cb0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c96:	4b65      	ldr	r3, [pc, #404]	; (8005e2c <HAL_RCC_ClockConfig+0x1b8>)
 8005c98:	683a      	ldr	r2, [r7, #0]
 8005c9a:	b2d2      	uxtb	r2, r2
 8005c9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c9e:	4b63      	ldr	r3, [pc, #396]	; (8005e2c <HAL_RCC_ClockConfig+0x1b8>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f003 030f 	and.w	r3, r3, #15
 8005ca6:	683a      	ldr	r2, [r7, #0]
 8005ca8:	429a      	cmp	r2, r3
 8005caa:	d001      	beq.n	8005cb0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005cac:	2301      	movs	r3, #1
 8005cae:	e0b8      	b.n	8005e22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f003 0302 	and.w	r3, r3, #2
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d020      	beq.n	8005cfe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f003 0304 	and.w	r3, r3, #4
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d005      	beq.n	8005cd4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005cc8:	4b59      	ldr	r3, [pc, #356]	; (8005e30 <HAL_RCC_ClockConfig+0x1bc>)
 8005cca:	689b      	ldr	r3, [r3, #8]
 8005ccc:	4a58      	ldr	r2, [pc, #352]	; (8005e30 <HAL_RCC_ClockConfig+0x1bc>)
 8005cce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005cd2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f003 0308 	and.w	r3, r3, #8
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d005      	beq.n	8005cec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005ce0:	4b53      	ldr	r3, [pc, #332]	; (8005e30 <HAL_RCC_ClockConfig+0x1bc>)
 8005ce2:	689b      	ldr	r3, [r3, #8]
 8005ce4:	4a52      	ldr	r2, [pc, #328]	; (8005e30 <HAL_RCC_ClockConfig+0x1bc>)
 8005ce6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005cea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005cec:	4b50      	ldr	r3, [pc, #320]	; (8005e30 <HAL_RCC_ClockConfig+0x1bc>)
 8005cee:	689b      	ldr	r3, [r3, #8]
 8005cf0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	689b      	ldr	r3, [r3, #8]
 8005cf8:	494d      	ldr	r1, [pc, #308]	; (8005e30 <HAL_RCC_ClockConfig+0x1bc>)
 8005cfa:	4313      	orrs	r3, r2
 8005cfc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f003 0301 	and.w	r3, r3, #1
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d044      	beq.n	8005d94 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	685b      	ldr	r3, [r3, #4]
 8005d0e:	2b01      	cmp	r3, #1
 8005d10:	d107      	bne.n	8005d22 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d12:	4b47      	ldr	r3, [pc, #284]	; (8005e30 <HAL_RCC_ClockConfig+0x1bc>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d119      	bne.n	8005d52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d1e:	2301      	movs	r3, #1
 8005d20:	e07f      	b.n	8005e22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	685b      	ldr	r3, [r3, #4]
 8005d26:	2b02      	cmp	r3, #2
 8005d28:	d003      	beq.n	8005d32 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005d2e:	2b03      	cmp	r3, #3
 8005d30:	d107      	bne.n	8005d42 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d32:	4b3f      	ldr	r3, [pc, #252]	; (8005e30 <HAL_RCC_ClockConfig+0x1bc>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d109      	bne.n	8005d52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d3e:	2301      	movs	r3, #1
 8005d40:	e06f      	b.n	8005e22 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d42:	4b3b      	ldr	r3, [pc, #236]	; (8005e30 <HAL_RCC_ClockConfig+0x1bc>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f003 0302 	and.w	r3, r3, #2
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d101      	bne.n	8005d52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d4e:	2301      	movs	r3, #1
 8005d50:	e067      	b.n	8005e22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005d52:	4b37      	ldr	r3, [pc, #220]	; (8005e30 <HAL_RCC_ClockConfig+0x1bc>)
 8005d54:	689b      	ldr	r3, [r3, #8]
 8005d56:	f023 0203 	bic.w	r2, r3, #3
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	685b      	ldr	r3, [r3, #4]
 8005d5e:	4934      	ldr	r1, [pc, #208]	; (8005e30 <HAL_RCC_ClockConfig+0x1bc>)
 8005d60:	4313      	orrs	r3, r2
 8005d62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005d64:	f7fc f99c 	bl	80020a0 <HAL_GetTick>
 8005d68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d6a:	e00a      	b.n	8005d82 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d6c:	f7fc f998 	bl	80020a0 <HAL_GetTick>
 8005d70:	4602      	mov	r2, r0
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	1ad3      	subs	r3, r2, r3
 8005d76:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d901      	bls.n	8005d82 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005d7e:	2303      	movs	r3, #3
 8005d80:	e04f      	b.n	8005e22 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d82:	4b2b      	ldr	r3, [pc, #172]	; (8005e30 <HAL_RCC_ClockConfig+0x1bc>)
 8005d84:	689b      	ldr	r3, [r3, #8]
 8005d86:	f003 020c 	and.w	r2, r3, #12
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	685b      	ldr	r3, [r3, #4]
 8005d8e:	009b      	lsls	r3, r3, #2
 8005d90:	429a      	cmp	r2, r3
 8005d92:	d1eb      	bne.n	8005d6c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005d94:	4b25      	ldr	r3, [pc, #148]	; (8005e2c <HAL_RCC_ClockConfig+0x1b8>)
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f003 030f 	and.w	r3, r3, #15
 8005d9c:	683a      	ldr	r2, [r7, #0]
 8005d9e:	429a      	cmp	r2, r3
 8005da0:	d20c      	bcs.n	8005dbc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005da2:	4b22      	ldr	r3, [pc, #136]	; (8005e2c <HAL_RCC_ClockConfig+0x1b8>)
 8005da4:	683a      	ldr	r2, [r7, #0]
 8005da6:	b2d2      	uxtb	r2, r2
 8005da8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005daa:	4b20      	ldr	r3, [pc, #128]	; (8005e2c <HAL_RCC_ClockConfig+0x1b8>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f003 030f 	and.w	r3, r3, #15
 8005db2:	683a      	ldr	r2, [r7, #0]
 8005db4:	429a      	cmp	r2, r3
 8005db6:	d001      	beq.n	8005dbc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005db8:	2301      	movs	r3, #1
 8005dba:	e032      	b.n	8005e22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f003 0304 	and.w	r3, r3, #4
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d008      	beq.n	8005dda <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005dc8:	4b19      	ldr	r3, [pc, #100]	; (8005e30 <HAL_RCC_ClockConfig+0x1bc>)
 8005dca:	689b      	ldr	r3, [r3, #8]
 8005dcc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	68db      	ldr	r3, [r3, #12]
 8005dd4:	4916      	ldr	r1, [pc, #88]	; (8005e30 <HAL_RCC_ClockConfig+0x1bc>)
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f003 0308 	and.w	r3, r3, #8
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d009      	beq.n	8005dfa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005de6:	4b12      	ldr	r3, [pc, #72]	; (8005e30 <HAL_RCC_ClockConfig+0x1bc>)
 8005de8:	689b      	ldr	r3, [r3, #8]
 8005dea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	691b      	ldr	r3, [r3, #16]
 8005df2:	00db      	lsls	r3, r3, #3
 8005df4:	490e      	ldr	r1, [pc, #56]	; (8005e30 <HAL_RCC_ClockConfig+0x1bc>)
 8005df6:	4313      	orrs	r3, r2
 8005df8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005dfa:	f000 f821 	bl	8005e40 <HAL_RCC_GetSysClockFreq>
 8005dfe:	4602      	mov	r2, r0
 8005e00:	4b0b      	ldr	r3, [pc, #44]	; (8005e30 <HAL_RCC_ClockConfig+0x1bc>)
 8005e02:	689b      	ldr	r3, [r3, #8]
 8005e04:	091b      	lsrs	r3, r3, #4
 8005e06:	f003 030f 	and.w	r3, r3, #15
 8005e0a:	490a      	ldr	r1, [pc, #40]	; (8005e34 <HAL_RCC_ClockConfig+0x1c0>)
 8005e0c:	5ccb      	ldrb	r3, [r1, r3]
 8005e0e:	fa22 f303 	lsr.w	r3, r2, r3
 8005e12:	4a09      	ldr	r2, [pc, #36]	; (8005e38 <HAL_RCC_ClockConfig+0x1c4>)
 8005e14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005e16:	4b09      	ldr	r3, [pc, #36]	; (8005e3c <HAL_RCC_ClockConfig+0x1c8>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	f7fc f8fc 	bl	8002018 <HAL_InitTick>

  return HAL_OK;
 8005e20:	2300      	movs	r3, #0
}
 8005e22:	4618      	mov	r0, r3
 8005e24:	3710      	adds	r7, #16
 8005e26:	46bd      	mov	sp, r7
 8005e28:	bd80      	pop	{r7, pc}
 8005e2a:	bf00      	nop
 8005e2c:	40023c00 	.word	0x40023c00
 8005e30:	40023800 	.word	0x40023800
 8005e34:	080182fc 	.word	0x080182fc
 8005e38:	20000000 	.word	0x20000000
 8005e3c:	20000004 	.word	0x20000004

08005e40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e40:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005e44:	b084      	sub	sp, #16
 8005e46:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005e48:	2300      	movs	r3, #0
 8005e4a:	607b      	str	r3, [r7, #4]
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	60fb      	str	r3, [r7, #12]
 8005e50:	2300      	movs	r3, #0
 8005e52:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005e54:	2300      	movs	r3, #0
 8005e56:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005e58:	4b67      	ldr	r3, [pc, #412]	; (8005ff8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005e5a:	689b      	ldr	r3, [r3, #8]
 8005e5c:	f003 030c 	and.w	r3, r3, #12
 8005e60:	2b08      	cmp	r3, #8
 8005e62:	d00d      	beq.n	8005e80 <HAL_RCC_GetSysClockFreq+0x40>
 8005e64:	2b08      	cmp	r3, #8
 8005e66:	f200 80bd 	bhi.w	8005fe4 <HAL_RCC_GetSysClockFreq+0x1a4>
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d002      	beq.n	8005e74 <HAL_RCC_GetSysClockFreq+0x34>
 8005e6e:	2b04      	cmp	r3, #4
 8005e70:	d003      	beq.n	8005e7a <HAL_RCC_GetSysClockFreq+0x3a>
 8005e72:	e0b7      	b.n	8005fe4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005e74:	4b61      	ldr	r3, [pc, #388]	; (8005ffc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005e76:	60bb      	str	r3, [r7, #8]
       break;
 8005e78:	e0b7      	b.n	8005fea <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005e7a:	4b61      	ldr	r3, [pc, #388]	; (8006000 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8005e7c:	60bb      	str	r3, [r7, #8]
      break;
 8005e7e:	e0b4      	b.n	8005fea <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005e80:	4b5d      	ldr	r3, [pc, #372]	; (8005ff8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005e82:	685b      	ldr	r3, [r3, #4]
 8005e84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005e88:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005e8a:	4b5b      	ldr	r3, [pc, #364]	; (8005ff8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005e8c:	685b      	ldr	r3, [r3, #4]
 8005e8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d04d      	beq.n	8005f32 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005e96:	4b58      	ldr	r3, [pc, #352]	; (8005ff8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005e98:	685b      	ldr	r3, [r3, #4]
 8005e9a:	099b      	lsrs	r3, r3, #6
 8005e9c:	461a      	mov	r2, r3
 8005e9e:	f04f 0300 	mov.w	r3, #0
 8005ea2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005ea6:	f04f 0100 	mov.w	r1, #0
 8005eaa:	ea02 0800 	and.w	r8, r2, r0
 8005eae:	ea03 0901 	and.w	r9, r3, r1
 8005eb2:	4640      	mov	r0, r8
 8005eb4:	4649      	mov	r1, r9
 8005eb6:	f04f 0200 	mov.w	r2, #0
 8005eba:	f04f 0300 	mov.w	r3, #0
 8005ebe:	014b      	lsls	r3, r1, #5
 8005ec0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005ec4:	0142      	lsls	r2, r0, #5
 8005ec6:	4610      	mov	r0, r2
 8005ec8:	4619      	mov	r1, r3
 8005eca:	ebb0 0008 	subs.w	r0, r0, r8
 8005ece:	eb61 0109 	sbc.w	r1, r1, r9
 8005ed2:	f04f 0200 	mov.w	r2, #0
 8005ed6:	f04f 0300 	mov.w	r3, #0
 8005eda:	018b      	lsls	r3, r1, #6
 8005edc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005ee0:	0182      	lsls	r2, r0, #6
 8005ee2:	1a12      	subs	r2, r2, r0
 8005ee4:	eb63 0301 	sbc.w	r3, r3, r1
 8005ee8:	f04f 0000 	mov.w	r0, #0
 8005eec:	f04f 0100 	mov.w	r1, #0
 8005ef0:	00d9      	lsls	r1, r3, #3
 8005ef2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005ef6:	00d0      	lsls	r0, r2, #3
 8005ef8:	4602      	mov	r2, r0
 8005efa:	460b      	mov	r3, r1
 8005efc:	eb12 0208 	adds.w	r2, r2, r8
 8005f00:	eb43 0309 	adc.w	r3, r3, r9
 8005f04:	f04f 0000 	mov.w	r0, #0
 8005f08:	f04f 0100 	mov.w	r1, #0
 8005f0c:	0259      	lsls	r1, r3, #9
 8005f0e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8005f12:	0250      	lsls	r0, r2, #9
 8005f14:	4602      	mov	r2, r0
 8005f16:	460b      	mov	r3, r1
 8005f18:	4610      	mov	r0, r2
 8005f1a:	4619      	mov	r1, r3
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	461a      	mov	r2, r3
 8005f20:	f04f 0300 	mov.w	r3, #0
 8005f24:	f7fa f9b4 	bl	8000290 <__aeabi_uldivmod>
 8005f28:	4602      	mov	r2, r0
 8005f2a:	460b      	mov	r3, r1
 8005f2c:	4613      	mov	r3, r2
 8005f2e:	60fb      	str	r3, [r7, #12]
 8005f30:	e04a      	b.n	8005fc8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005f32:	4b31      	ldr	r3, [pc, #196]	; (8005ff8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005f34:	685b      	ldr	r3, [r3, #4]
 8005f36:	099b      	lsrs	r3, r3, #6
 8005f38:	461a      	mov	r2, r3
 8005f3a:	f04f 0300 	mov.w	r3, #0
 8005f3e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005f42:	f04f 0100 	mov.w	r1, #0
 8005f46:	ea02 0400 	and.w	r4, r2, r0
 8005f4a:	ea03 0501 	and.w	r5, r3, r1
 8005f4e:	4620      	mov	r0, r4
 8005f50:	4629      	mov	r1, r5
 8005f52:	f04f 0200 	mov.w	r2, #0
 8005f56:	f04f 0300 	mov.w	r3, #0
 8005f5a:	014b      	lsls	r3, r1, #5
 8005f5c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005f60:	0142      	lsls	r2, r0, #5
 8005f62:	4610      	mov	r0, r2
 8005f64:	4619      	mov	r1, r3
 8005f66:	1b00      	subs	r0, r0, r4
 8005f68:	eb61 0105 	sbc.w	r1, r1, r5
 8005f6c:	f04f 0200 	mov.w	r2, #0
 8005f70:	f04f 0300 	mov.w	r3, #0
 8005f74:	018b      	lsls	r3, r1, #6
 8005f76:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005f7a:	0182      	lsls	r2, r0, #6
 8005f7c:	1a12      	subs	r2, r2, r0
 8005f7e:	eb63 0301 	sbc.w	r3, r3, r1
 8005f82:	f04f 0000 	mov.w	r0, #0
 8005f86:	f04f 0100 	mov.w	r1, #0
 8005f8a:	00d9      	lsls	r1, r3, #3
 8005f8c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005f90:	00d0      	lsls	r0, r2, #3
 8005f92:	4602      	mov	r2, r0
 8005f94:	460b      	mov	r3, r1
 8005f96:	1912      	adds	r2, r2, r4
 8005f98:	eb45 0303 	adc.w	r3, r5, r3
 8005f9c:	f04f 0000 	mov.w	r0, #0
 8005fa0:	f04f 0100 	mov.w	r1, #0
 8005fa4:	0299      	lsls	r1, r3, #10
 8005fa6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005faa:	0290      	lsls	r0, r2, #10
 8005fac:	4602      	mov	r2, r0
 8005fae:	460b      	mov	r3, r1
 8005fb0:	4610      	mov	r0, r2
 8005fb2:	4619      	mov	r1, r3
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	461a      	mov	r2, r3
 8005fb8:	f04f 0300 	mov.w	r3, #0
 8005fbc:	f7fa f968 	bl	8000290 <__aeabi_uldivmod>
 8005fc0:	4602      	mov	r2, r0
 8005fc2:	460b      	mov	r3, r1
 8005fc4:	4613      	mov	r3, r2
 8005fc6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005fc8:	4b0b      	ldr	r3, [pc, #44]	; (8005ff8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005fca:	685b      	ldr	r3, [r3, #4]
 8005fcc:	0c1b      	lsrs	r3, r3, #16
 8005fce:	f003 0303 	and.w	r3, r3, #3
 8005fd2:	3301      	adds	r3, #1
 8005fd4:	005b      	lsls	r3, r3, #1
 8005fd6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005fd8:	68fa      	ldr	r2, [r7, #12]
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fe0:	60bb      	str	r3, [r7, #8]
      break;
 8005fe2:	e002      	b.n	8005fea <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005fe4:	4b05      	ldr	r3, [pc, #20]	; (8005ffc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005fe6:	60bb      	str	r3, [r7, #8]
      break;
 8005fe8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005fea:	68bb      	ldr	r3, [r7, #8]
}
 8005fec:	4618      	mov	r0, r3
 8005fee:	3710      	adds	r7, #16
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005ff6:	bf00      	nop
 8005ff8:	40023800 	.word	0x40023800
 8005ffc:	00f42400 	.word	0x00f42400
 8006000:	007a1200 	.word	0x007a1200

08006004 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006004:	b480      	push	{r7}
 8006006:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006008:	4b03      	ldr	r3, [pc, #12]	; (8006018 <HAL_RCC_GetHCLKFreq+0x14>)
 800600a:	681b      	ldr	r3, [r3, #0]
}
 800600c:	4618      	mov	r0, r3
 800600e:	46bd      	mov	sp, r7
 8006010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006014:	4770      	bx	lr
 8006016:	bf00      	nop
 8006018:	20000000 	.word	0x20000000

0800601c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006020:	f7ff fff0 	bl	8006004 <HAL_RCC_GetHCLKFreq>
 8006024:	4602      	mov	r2, r0
 8006026:	4b05      	ldr	r3, [pc, #20]	; (800603c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006028:	689b      	ldr	r3, [r3, #8]
 800602a:	0a9b      	lsrs	r3, r3, #10
 800602c:	f003 0307 	and.w	r3, r3, #7
 8006030:	4903      	ldr	r1, [pc, #12]	; (8006040 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006032:	5ccb      	ldrb	r3, [r1, r3]
 8006034:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006038:	4618      	mov	r0, r3
 800603a:	bd80      	pop	{r7, pc}
 800603c:	40023800 	.word	0x40023800
 8006040:	0801830c 	.word	0x0801830c

08006044 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006044:	b580      	push	{r7, lr}
 8006046:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006048:	f7ff ffdc 	bl	8006004 <HAL_RCC_GetHCLKFreq>
 800604c:	4602      	mov	r2, r0
 800604e:	4b05      	ldr	r3, [pc, #20]	; (8006064 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006050:	689b      	ldr	r3, [r3, #8]
 8006052:	0b5b      	lsrs	r3, r3, #13
 8006054:	f003 0307 	and.w	r3, r3, #7
 8006058:	4903      	ldr	r1, [pc, #12]	; (8006068 <HAL_RCC_GetPCLK2Freq+0x24>)
 800605a:	5ccb      	ldrb	r3, [r1, r3]
 800605c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006060:	4618      	mov	r0, r3
 8006062:	bd80      	pop	{r7, pc}
 8006064:	40023800 	.word	0x40023800
 8006068:	0801830c 	.word	0x0801830c

0800606c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b082      	sub	sp, #8
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d101      	bne.n	800607e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800607a:	2301      	movs	r3, #1
 800607c:	e022      	b.n	80060c4 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006084:	b2db      	uxtb	r3, r3
 8006086:	2b00      	cmp	r3, #0
 8006088:	d105      	bne.n	8006096 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2200      	movs	r2, #0
 800608e:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8006090:	6878      	ldr	r0, [r7, #4]
 8006092:	f7fb f82b 	bl	80010ec <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2203      	movs	r2, #3
 800609a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800609e:	6878      	ldr	r0, [r7, #4]
 80060a0:	f000 f814 	bl	80060cc <HAL_SD_InitCard>
 80060a4:	4603      	mov	r3, r0
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d001      	beq.n	80060ae <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80060aa:	2301      	movs	r3, #1
 80060ac:	e00a      	b.n	80060c4 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2200      	movs	r2, #0
 80060b2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2200      	movs	r2, #0
 80060b8:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2201      	movs	r2, #1
 80060be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80060c2:	2300      	movs	r3, #0
}
 80060c4:	4618      	mov	r0, r3
 80060c6:	3708      	adds	r7, #8
 80060c8:	46bd      	mov	sp, r7
 80060ca:	bd80      	pop	{r7, pc}

080060cc <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80060cc:	b5b0      	push	{r4, r5, r7, lr}
 80060ce:	b08e      	sub	sp, #56	; 0x38
 80060d0:	af04      	add	r7, sp, #16
 80060d2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80060d4:	2300      	movs	r3, #0
 80060d6:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80060d8:	2300      	movs	r3, #0
 80060da:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80060dc:	2300      	movs	r3, #0
 80060de:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80060e0:	2300      	movs	r3, #0
 80060e2:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80060e4:	2300      	movs	r3, #0
 80060e6:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80060e8:	2376      	movs	r3, #118	; 0x76
 80060ea:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681d      	ldr	r5, [r3, #0]
 80060f0:	466c      	mov	r4, sp
 80060f2:	f107 0314 	add.w	r3, r7, #20
 80060f6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80060fa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80060fe:	f107 0308 	add.w	r3, r7, #8
 8006102:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006104:	4628      	mov	r0, r5
 8006106:	f003 f9b7 	bl	8009478 <SDIO_Init>
 800610a:	4603      	mov	r3, r0
 800610c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8006110:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006114:	2b00      	cmp	r3, #0
 8006116:	d001      	beq.n	800611c <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8006118:	2301      	movs	r3, #1
 800611a:	e04c      	b.n	80061b6 <HAL_SD_InitCard+0xea>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800611c:	4b28      	ldr	r3, [pc, #160]	; (80061c0 <HAL_SD_InitCard+0xf4>)
 800611e:	2200      	movs	r2, #0
 8006120:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	4618      	mov	r0, r3
 8006128:	f003 f9ef 	bl	800950a <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800612c:	4b24      	ldr	r3, [pc, #144]	; (80061c0 <HAL_SD_InitCard+0xf4>)
 800612e:	2201      	movs	r2, #1
 8006130:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8006132:	6878      	ldr	r0, [r7, #4]
 8006134:	f001 f804 	bl	8007140 <SD_PowerON>
 8006138:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800613a:	6a3b      	ldr	r3, [r7, #32]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d00b      	beq.n	8006158 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2201      	movs	r2, #1
 8006144:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800614c:	6a3b      	ldr	r3, [r7, #32]
 800614e:	431a      	orrs	r2, r3
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006154:	2301      	movs	r3, #1
 8006156:	e02e      	b.n	80061b6 <HAL_SD_InitCard+0xea>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8006158:	6878      	ldr	r0, [r7, #4]
 800615a:	f000 ff25 	bl	8006fa8 <SD_InitCard>
 800615e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006160:	6a3b      	ldr	r3, [r7, #32]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d00b      	beq.n	800617e <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2201      	movs	r2, #1
 800616a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006172:	6a3b      	ldr	r3, [r7, #32]
 8006174:	431a      	orrs	r2, r3
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800617a:	2301      	movs	r3, #1
 800617c:	e01b      	b.n	80061b6 <HAL_SD_InitCard+0xea>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006186:	4618      	mov	r0, r3
 8006188:	f003 fa52 	bl	8009630 <SDMMC_CmdBlockLength>
 800618c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800618e:	6a3b      	ldr	r3, [r7, #32]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d00f      	beq.n	80061b4 <HAL_SD_InitCard+0xe8>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	4a0a      	ldr	r2, [pc, #40]	; (80061c4 <HAL_SD_InitCard+0xf8>)
 800619a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80061a0:	6a3b      	ldr	r3, [r7, #32]
 80061a2:	431a      	orrs	r2, r3
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2201      	movs	r2, #1
 80061ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80061b0:	2301      	movs	r3, #1
 80061b2:	e000      	b.n	80061b6 <HAL_SD_InitCard+0xea>
  }

  return HAL_OK;
 80061b4:	2300      	movs	r3, #0
}
 80061b6:	4618      	mov	r0, r3
 80061b8:	3728      	adds	r7, #40	; 0x28
 80061ba:	46bd      	mov	sp, r7
 80061bc:	bdb0      	pop	{r4, r5, r7, pc}
 80061be:	bf00      	nop
 80061c0:	422580a0 	.word	0x422580a0
 80061c4:	004005ff 	.word	0x004005ff

080061c8 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b08c      	sub	sp, #48	; 0x30
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	60f8      	str	r0, [r7, #12]
 80061d0:	60b9      	str	r1, [r7, #8]
 80061d2:	607a      	str	r2, [r7, #4]
 80061d4:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80061da:	68bb      	ldr	r3, [r7, #8]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d107      	bne.n	80061f0 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061e4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80061ec:	2301      	movs	r3, #1
 80061ee:	e0c0      	b.n	8006372 <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80061f6:	b2db      	uxtb	r3, r3
 80061f8:	2b01      	cmp	r3, #1
 80061fa:	f040 80b9 	bne.w	8006370 <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	2200      	movs	r2, #0
 8006202:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006204:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	441a      	add	r2, r3
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800620e:	429a      	cmp	r2, r3
 8006210:	d907      	bls.n	8006222 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006216:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800621e:	2301      	movs	r3, #1
 8006220:	e0a7      	b.n	8006372 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	2203      	movs	r2, #3
 8006226:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	2200      	movs	r2, #0
 8006230:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006238:	68fa      	ldr	r2, [r7, #12]
 800623a:	6812      	ldr	r2, [r2, #0]
 800623c:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 8006240:	f043 0302 	orr.w	r3, r3, #2
 8006244:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800624a:	4a4c      	ldr	r2, [pc, #304]	; (800637c <HAL_SD_ReadBlocks_DMA+0x1b4>)
 800624c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006252:	4a4b      	ldr	r2, [pc, #300]	; (8006380 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8006254:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800625a:	2200      	movs	r2, #0
 800625c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006262:	2200      	movs	r2, #0
 8006264:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006276:	689a      	ldr	r2, [r3, #8]
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	430a      	orrs	r2, r1
 8006280:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	3380      	adds	r3, #128	; 0x80
 800628c:	4619      	mov	r1, r3
 800628e:	68ba      	ldr	r2, [r7, #8]
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	025b      	lsls	r3, r3, #9
 8006294:	089b      	lsrs	r3, r3, #2
 8006296:	f7fd fa6d 	bl	8003774 <HAL_DMA_Start_IT>
 800629a:	4603      	mov	r3, r0
 800629c:	2b00      	cmp	r3, #0
 800629e:	d017      	beq.n	80062d0 <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 80062ae:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4a33      	ldr	r2, [pc, #204]	; (8006384 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 80062b6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062bc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	2201      	movs	r2, #1
 80062c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80062cc:	2301      	movs	r3, #1
 80062ce:	e050      	b.n	8006372 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 80062d0:	4b2d      	ldr	r3, [pc, #180]	; (8006388 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 80062d2:	2201      	movs	r2, #1
 80062d4:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062da:	2b01      	cmp	r3, #1
 80062dc:	d002      	beq.n	80062e4 <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 80062de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062e0:	025b      	lsls	r3, r3, #9
 80062e2:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80062e4:	f04f 33ff 	mov.w	r3, #4294967295
 80062e8:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	025b      	lsls	r3, r3, #9
 80062ee:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80062f0:	2390      	movs	r3, #144	; 0x90
 80062f2:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80062f4:	2302      	movs	r3, #2
 80062f6:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80062f8:	2300      	movs	r3, #0
 80062fa:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 80062fc:	2301      	movs	r3, #1
 80062fe:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f107 0210 	add.w	r2, r7, #16
 8006308:	4611      	mov	r1, r2
 800630a:	4618      	mov	r0, r3
 800630c:	f003 f964 	bl	80095d8 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	2b01      	cmp	r3, #1
 8006314:	d90a      	bls.n	800632c <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	2282      	movs	r2, #130	; 0x82
 800631a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006322:	4618      	mov	r0, r3
 8006324:	f003 f9c8 	bl	80096b8 <SDMMC_CmdReadMultiBlock>
 8006328:	62f8      	str	r0, [r7, #44]	; 0x2c
 800632a:	e009      	b.n	8006340 <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	2281      	movs	r2, #129	; 0x81
 8006330:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006338:	4618      	mov	r0, r3
 800633a:	f003 f99b 	bl	8009674 <SDMMC_CmdReadSingleBlock>
 800633e:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8006340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006342:	2b00      	cmp	r3, #0
 8006344:	d012      	beq.n	800636c <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	4a0e      	ldr	r2, [pc, #56]	; (8006384 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 800634c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006354:	431a      	orrs	r2, r3
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	2201      	movs	r2, #1
 800635e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	2200      	movs	r2, #0
 8006366:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8006368:	2301      	movs	r3, #1
 800636a:	e002      	b.n	8006372 <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 800636c:	2300      	movs	r3, #0
 800636e:	e000      	b.n	8006372 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 8006370:	2302      	movs	r3, #2
  }
}
 8006372:	4618      	mov	r0, r3
 8006374:	3730      	adds	r7, #48	; 0x30
 8006376:	46bd      	mov	sp, r7
 8006378:	bd80      	pop	{r7, pc}
 800637a:	bf00      	nop
 800637c:	08006db7 	.word	0x08006db7
 8006380:	08006e29 	.word	0x08006e29
 8006384:	004005ff 	.word	0x004005ff
 8006388:	4225858c 	.word	0x4225858c

0800638c <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b08c      	sub	sp, #48	; 0x30
 8006390:	af00      	add	r7, sp, #0
 8006392:	60f8      	str	r0, [r7, #12]
 8006394:	60b9      	str	r1, [r7, #8]
 8006396:	607a      	str	r2, [r7, #4]
 8006398:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800639e:	68bb      	ldr	r3, [r7, #8]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d107      	bne.n	80063b4 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063a8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80063b0:	2301      	movs	r3, #1
 80063b2:	e0c5      	b.n	8006540 <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80063ba:	b2db      	uxtb	r3, r3
 80063bc:	2b01      	cmp	r3, #1
 80063be:	f040 80be 	bne.w	800653e <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	2200      	movs	r2, #0
 80063c6:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80063c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	441a      	add	r2, r3
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063d2:	429a      	cmp	r2, r3
 80063d4:	d907      	bls.n	80063e6 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063da:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80063e2:	2301      	movs	r3, #1
 80063e4:	e0ac      	b.n	8006540 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	2203      	movs	r2, #3
 80063ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	2200      	movs	r2, #0
 80063f4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063fc:	68fa      	ldr	r2, [r7, #12]
 80063fe:	6812      	ldr	r2, [r2, #0]
 8006400:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 8006404:	f043 0302 	orr.w	r3, r3, #2
 8006408:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800640e:	4a4e      	ldr	r2, [pc, #312]	; (8006548 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 8006410:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006416:	4a4d      	ldr	r2, [pc, #308]	; (800654c <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8006418:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800641e:	2200      	movs	r2, #0
 8006420:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006426:	2b01      	cmp	r3, #1
 8006428:	d002      	beq.n	8006430 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 800642a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800642c:	025b      	lsls	r3, r3, #9
 800642e:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	2b01      	cmp	r3, #1
 8006434:	d90a      	bls.n	800644c <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	22a0      	movs	r2, #160	; 0xa0
 800643a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006442:	4618      	mov	r0, r3
 8006444:	f003 f97c 	bl	8009740 <SDMMC_CmdWriteMultiBlock>
 8006448:	62f8      	str	r0, [r7, #44]	; 0x2c
 800644a:	e009      	b.n	8006460 <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	2290      	movs	r2, #144	; 0x90
 8006450:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006458:	4618      	mov	r0, r3
 800645a:	f003 f94f 	bl	80096fc <SDMMC_CmdWriteSingleBlock>
 800645e:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8006460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006462:	2b00      	cmp	r3, #0
 8006464:	d012      	beq.n	800648c <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	4a39      	ldr	r2, [pc, #228]	; (8006550 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 800646c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006474:	431a      	orrs	r2, r3
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	2201      	movs	r2, #1
 800647e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	2200      	movs	r2, #0
 8006486:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006488:	2301      	movs	r3, #1
 800648a:	e059      	b.n	8006540 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800648c:	4b31      	ldr	r3, [pc, #196]	; (8006554 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800648e:	2201      	movs	r2, #1
 8006490:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006496:	2240      	movs	r2, #64	; 0x40
 8006498:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064aa:	689a      	ldr	r2, [r3, #8]
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	430a      	orrs	r2, r1
 80064b4:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80064ba:	68b9      	ldr	r1, [r7, #8]
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	3380      	adds	r3, #128	; 0x80
 80064c2:	461a      	mov	r2, r3
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	025b      	lsls	r3, r3, #9
 80064c8:	089b      	lsrs	r3, r3, #2
 80064ca:	f7fd f953 	bl	8003774 <HAL_DMA_Start_IT>
 80064ce:	4603      	mov	r3, r0
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d01c      	beq.n	800650e <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064da:	68fa      	ldr	r2, [r7, #12]
 80064dc:	6812      	ldr	r2, [r2, #0]
 80064de:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 80064e2:	f023 0302 	bic.w	r3, r3, #2
 80064e6:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	4a18      	ldr	r2, [pc, #96]	; (8006550 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 80064ee:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064f4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	2201      	movs	r2, #1
 8006500:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	2200      	movs	r2, #0
 8006508:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800650a:	2301      	movs	r3, #1
 800650c:	e018      	b.n	8006540 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800650e:	f04f 33ff 	mov.w	r3, #4294967295
 8006512:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	025b      	lsls	r3, r3, #9
 8006518:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800651a:	2390      	movs	r3, #144	; 0x90
 800651c:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800651e:	2300      	movs	r3, #0
 8006520:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8006522:	2300      	movs	r3, #0
 8006524:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8006526:	2301      	movs	r3, #1
 8006528:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f107 0210 	add.w	r2, r7, #16
 8006532:	4611      	mov	r1, r2
 8006534:	4618      	mov	r0, r3
 8006536:	f003 f84f 	bl	80095d8 <SDIO_ConfigData>

      return HAL_OK;
 800653a:	2300      	movs	r3, #0
 800653c:	e000      	b.n	8006540 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 800653e:	2302      	movs	r3, #2
  }
}
 8006540:	4618      	mov	r0, r3
 8006542:	3730      	adds	r7, #48	; 0x30
 8006544:	46bd      	mov	sp, r7
 8006546:	bd80      	pop	{r7, pc}
 8006548:	08006d8d 	.word	0x08006d8d
 800654c:	08006e29 	.word	0x08006e29
 8006550:	004005ff 	.word	0x004005ff
 8006554:	4225858c 	.word	0x4225858c

08006558 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b084      	sub	sp, #16
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006564:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800656c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006570:	2b00      	cmp	r3, #0
 8006572:	d008      	beq.n	8006586 <HAL_SD_IRQHandler+0x2e>
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	f003 0308 	and.w	r3, r3, #8
 800657a:	2b00      	cmp	r3, #0
 800657c:	d003      	beq.n	8006586 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800657e:	6878      	ldr	r0, [r7, #4]
 8006580:	f000 fffd 	bl	800757e <SD_Read_IT>
 8006584:	e165      	b.n	8006852 <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800658c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006590:	2b00      	cmp	r3, #0
 8006592:	f000 808f 	beq.w	80066b4 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800659e:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065a6:	687a      	ldr	r2, [r7, #4]
 80065a8:	6812      	ldr	r2, [r2, #0]
 80065aa:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 80065ae:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 80065b2:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f022 0201 	bic.w	r2, r2, #1
 80065c2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	f003 0308 	and.w	r3, r3, #8
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d039      	beq.n	8006642 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	f003 0302 	and.w	r3, r3, #2
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d104      	bne.n	80065e2 <HAL_SD_IRQHandler+0x8a>
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	f003 0320 	and.w	r3, r3, #32
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d011      	beq.n	8006606 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	4618      	mov	r0, r3
 80065e8:	f003 f8cc 	bl	8009784 <SDMMC_CmdStopTransfer>
 80065ec:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80065ee:	68bb      	ldr	r3, [r7, #8]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d008      	beq.n	8006606 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80065f8:	68bb      	ldr	r3, [r7, #8]
 80065fa:	431a      	orrs	r2, r3
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8006600:	6878      	ldr	r0, [r7, #4]
 8006602:	f000 f92f 	bl	8006864 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f240 523a 	movw	r2, #1338	; 0x53a
 800660e:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2201      	movs	r2, #1
 8006614:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2200      	movs	r2, #0
 800661c:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	f003 0301 	and.w	r3, r3, #1
 8006624:	2b00      	cmp	r3, #0
 8006626:	d104      	bne.n	8006632 <HAL_SD_IRQHandler+0xda>
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	f003 0302 	and.w	r3, r3, #2
 800662e:	2b00      	cmp	r3, #0
 8006630:	d003      	beq.n	800663a <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8006632:	6878      	ldr	r0, [r7, #4]
 8006634:	f003 fd32 	bl	800a09c <HAL_SD_RxCpltCallback>
 8006638:	e10b      	b.n	8006852 <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800663a:	6878      	ldr	r0, [r7, #4]
 800663c:	f003 fd24 	bl	800a088 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006640:	e107      	b.n	8006852 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006648:	2b00      	cmp	r3, #0
 800664a:	f000 8102 	beq.w	8006852 <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	f003 0320 	and.w	r3, r3, #32
 8006654:	2b00      	cmp	r3, #0
 8006656:	d011      	beq.n	800667c <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	4618      	mov	r0, r3
 800665e:	f003 f891 	bl	8009784 <SDMMC_CmdStopTransfer>
 8006662:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8006664:	68bb      	ldr	r3, [r7, #8]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d008      	beq.n	800667c <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800666e:	68bb      	ldr	r3, [r7, #8]
 8006670:	431a      	orrs	r2, r3
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8006676:	6878      	ldr	r0, [r7, #4]
 8006678:	f000 f8f4 	bl	8006864 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	f003 0301 	and.w	r3, r3, #1
 8006682:	2b00      	cmp	r3, #0
 8006684:	f040 80e5 	bne.w	8006852 <HAL_SD_IRQHandler+0x2fa>
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	f003 0302 	and.w	r3, r3, #2
 800668e:	2b00      	cmp	r3, #0
 8006690:	f040 80df 	bne.w	8006852 <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f022 0208 	bic.w	r2, r2, #8
 80066a2:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2201      	movs	r2, #1
 80066a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 80066ac:	6878      	ldr	r0, [r7, #4]
 80066ae:	f003 fceb 	bl	800a088 <HAL_SD_TxCpltCallback>
}
 80066b2:	e0ce      	b.n	8006852 <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d008      	beq.n	80066d4 <HAL_SD_IRQHandler+0x17c>
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	f003 0308 	and.w	r3, r3, #8
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d003      	beq.n	80066d4 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 80066cc:	6878      	ldr	r0, [r7, #4]
 80066ce:	f000 ffa7 	bl	8007620 <SD_Write_IT>
 80066d2:	e0be      	b.n	8006852 <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80066da:	f240 233a 	movw	r3, #570	; 0x23a
 80066de:	4013      	ands	r3, r2
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	f000 80b6 	beq.w	8006852 <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066ec:	f003 0302 	and.w	r3, r3, #2
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d005      	beq.n	8006700 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066f8:	f043 0202 	orr.w	r2, r3, #2
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006706:	f003 0308 	and.w	r3, r3, #8
 800670a:	2b00      	cmp	r3, #0
 800670c:	d005      	beq.n	800671a <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006712:	f043 0208 	orr.w	r2, r3, #8
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006720:	f003 0320 	and.w	r3, r3, #32
 8006724:	2b00      	cmp	r3, #0
 8006726:	d005      	beq.n	8006734 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800672c:	f043 0220 	orr.w	r2, r3, #32
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800673a:	f003 0310 	and.w	r3, r3, #16
 800673e:	2b00      	cmp	r3, #0
 8006740:	d005      	beq.n	800674e <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006746:	f043 0210 	orr.w	r2, r3, #16
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006754:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006758:	2b00      	cmp	r3, #0
 800675a:	d005      	beq.n	8006768 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006760:	f043 0208 	orr.w	r2, r3, #8
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f240 723a 	movw	r2, #1850	; 0x73a
 8006770:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006778:	687a      	ldr	r2, [r7, #4]
 800677a:	6812      	ldr	r2, [r2, #0]
 800677c:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8006780:	f023 0302 	bic.w	r3, r3, #2
 8006784:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	4618      	mov	r0, r3
 800678c:	f002 fffa 	bl	8009784 <SDMMC_CmdStopTransfer>
 8006790:	4602      	mov	r2, r0
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006796:	431a      	orrs	r2, r3
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	f003 0308 	and.w	r3, r3, #8
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d00a      	beq.n	80067bc <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	2201      	movs	r2, #1
 80067aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2200      	movs	r2, #0
 80067b2:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 80067b4:	6878      	ldr	r0, [r7, #4]
 80067b6:	f000 f855 	bl	8006864 <HAL_SD_ErrorCallback>
}
 80067ba:	e04a      	b.n	8006852 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d045      	beq.n	8006852 <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	f003 0310 	and.w	r3, r3, #16
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d104      	bne.n	80067da <HAL_SD_IRQHandler+0x282>
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	f003 0320 	and.w	r3, r3, #32
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d011      	beq.n	80067fe <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067de:	4a1f      	ldr	r2, [pc, #124]	; (800685c <HAL_SD_IRQHandler+0x304>)
 80067e0:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067e6:	4618      	mov	r0, r3
 80067e8:	f7fd f88c 	bl	8003904 <HAL_DMA_Abort_IT>
 80067ec:	4603      	mov	r3, r0
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d02f      	beq.n	8006852 <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067f6:	4618      	mov	r0, r3
 80067f8:	f000 fb68 	bl	8006ecc <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80067fc:	e029      	b.n	8006852 <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	f003 0301 	and.w	r3, r3, #1
 8006804:	2b00      	cmp	r3, #0
 8006806:	d104      	bne.n	8006812 <HAL_SD_IRQHandler+0x2ba>
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	f003 0302 	and.w	r3, r3, #2
 800680e:	2b00      	cmp	r3, #0
 8006810:	d011      	beq.n	8006836 <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006816:	4a12      	ldr	r2, [pc, #72]	; (8006860 <HAL_SD_IRQHandler+0x308>)
 8006818:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800681e:	4618      	mov	r0, r3
 8006820:	f7fd f870 	bl	8003904 <HAL_DMA_Abort_IT>
 8006824:	4603      	mov	r3, r0
 8006826:	2b00      	cmp	r3, #0
 8006828:	d013      	beq.n	8006852 <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800682e:	4618      	mov	r0, r3
 8006830:	f000 fb83 	bl	8006f3a <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8006834:	e00d      	b.n	8006852 <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2200      	movs	r2, #0
 800683a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2201      	movs	r2, #1
 8006840:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2200      	movs	r2, #0
 8006848:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800684a:	6878      	ldr	r0, [r7, #4]
 800684c:	f003 fc12 	bl	800a074 <HAL_SD_AbortCallback>
}
 8006850:	e7ff      	b.n	8006852 <HAL_SD_IRQHandler+0x2fa>
 8006852:	bf00      	nop
 8006854:	3710      	adds	r7, #16
 8006856:	46bd      	mov	sp, r7
 8006858:	bd80      	pop	{r7, pc}
 800685a:	bf00      	nop
 800685c:	08006ecd 	.word	0x08006ecd
 8006860:	08006f3b 	.word	0x08006f3b

08006864 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8006864:	b480      	push	{r7}
 8006866:	b083      	sub	sp, #12
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800686c:	bf00      	nop
 800686e:	370c      	adds	r7, #12
 8006870:	46bd      	mov	sp, r7
 8006872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006876:	4770      	bx	lr

08006878 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8006878:	b480      	push	{r7}
 800687a:	b083      	sub	sp, #12
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
 8006880:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006886:	0f9b      	lsrs	r3, r3, #30
 8006888:	b2da      	uxtb	r2, r3
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006892:	0e9b      	lsrs	r3, r3, #26
 8006894:	b2db      	uxtb	r3, r3
 8006896:	f003 030f 	and.w	r3, r3, #15
 800689a:	b2da      	uxtb	r2, r3
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80068a4:	0e1b      	lsrs	r3, r3, #24
 80068a6:	b2db      	uxtb	r3, r3
 80068a8:	f003 0303 	and.w	r3, r3, #3
 80068ac:	b2da      	uxtb	r2, r3
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80068b6:	0c1b      	lsrs	r3, r3, #16
 80068b8:	b2da      	uxtb	r2, r3
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80068c2:	0a1b      	lsrs	r3, r3, #8
 80068c4:	b2da      	uxtb	r2, r3
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80068ce:	b2da      	uxtb	r2, r3
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80068d8:	0d1b      	lsrs	r3, r3, #20
 80068da:	b29a      	uxth	r2, r3
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80068e4:	0c1b      	lsrs	r3, r3, #16
 80068e6:	b2db      	uxtb	r3, r3
 80068e8:	f003 030f 	and.w	r3, r3, #15
 80068ec:	b2da      	uxtb	r2, r3
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80068f6:	0bdb      	lsrs	r3, r3, #15
 80068f8:	b2db      	uxtb	r3, r3
 80068fa:	f003 0301 	and.w	r3, r3, #1
 80068fe:	b2da      	uxtb	r2, r3
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006908:	0b9b      	lsrs	r3, r3, #14
 800690a:	b2db      	uxtb	r3, r3
 800690c:	f003 0301 	and.w	r3, r3, #1
 8006910:	b2da      	uxtb	r2, r3
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800691a:	0b5b      	lsrs	r3, r3, #13
 800691c:	b2db      	uxtb	r3, r3
 800691e:	f003 0301 	and.w	r3, r3, #1
 8006922:	b2da      	uxtb	r2, r3
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800692c:	0b1b      	lsrs	r3, r3, #12
 800692e:	b2db      	uxtb	r3, r3
 8006930:	f003 0301 	and.w	r3, r3, #1
 8006934:	b2da      	uxtb	r2, r3
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	2200      	movs	r2, #0
 800693e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006944:	2b00      	cmp	r3, #0
 8006946:	d163      	bne.n	8006a10 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800694c:	009a      	lsls	r2, r3, #2
 800694e:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006952:	4013      	ands	r3, r2
 8006954:	687a      	ldr	r2, [r7, #4]
 8006956:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8006958:	0f92      	lsrs	r2, r2, #30
 800695a:	431a      	orrs	r2, r3
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006964:	0edb      	lsrs	r3, r3, #27
 8006966:	b2db      	uxtb	r3, r3
 8006968:	f003 0307 	and.w	r3, r3, #7
 800696c:	b2da      	uxtb	r2, r3
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006976:	0e1b      	lsrs	r3, r3, #24
 8006978:	b2db      	uxtb	r3, r3
 800697a:	f003 0307 	and.w	r3, r3, #7
 800697e:	b2da      	uxtb	r2, r3
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006988:	0d5b      	lsrs	r3, r3, #21
 800698a:	b2db      	uxtb	r3, r3
 800698c:	f003 0307 	and.w	r3, r3, #7
 8006990:	b2da      	uxtb	r2, r3
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800699a:	0c9b      	lsrs	r3, r3, #18
 800699c:	b2db      	uxtb	r3, r3
 800699e:	f003 0307 	and.w	r3, r3, #7
 80069a2:	b2da      	uxtb	r2, r3
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80069ac:	0bdb      	lsrs	r3, r3, #15
 80069ae:	b2db      	uxtb	r3, r3
 80069b0:	f003 0307 	and.w	r3, r3, #7
 80069b4:	b2da      	uxtb	r2, r3
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	691b      	ldr	r3, [r3, #16]
 80069be:	1c5a      	adds	r2, r3, #1
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	7e1b      	ldrb	r3, [r3, #24]
 80069c8:	b2db      	uxtb	r3, r3
 80069ca:	f003 0307 	and.w	r3, r3, #7
 80069ce:	3302      	adds	r3, #2
 80069d0:	2201      	movs	r2, #1
 80069d2:	fa02 f303 	lsl.w	r3, r2, r3
 80069d6:	687a      	ldr	r2, [r7, #4]
 80069d8:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80069da:	fb02 f203 	mul.w	r2, r2, r3
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	7a1b      	ldrb	r3, [r3, #8]
 80069e6:	b2db      	uxtb	r3, r3
 80069e8:	f003 030f 	and.w	r3, r3, #15
 80069ec:	2201      	movs	r2, #1
 80069ee:	409a      	lsls	r2, r3
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069f8:	687a      	ldr	r2, [r7, #4]
 80069fa:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80069fc:	0a52      	lsrs	r2, r2, #9
 80069fe:	fb02 f203 	mul.w	r2, r2, r3
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006a0c:	661a      	str	r2, [r3, #96]	; 0x60
 8006a0e:	e031      	b.n	8006a74 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a14:	2b01      	cmp	r3, #1
 8006a16:	d11d      	bne.n	8006a54 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006a1c:	041b      	lsls	r3, r3, #16
 8006a1e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a26:	0c1b      	lsrs	r3, r3, #16
 8006a28:	431a      	orrs	r2, r3
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	691b      	ldr	r3, [r3, #16]
 8006a32:	3301      	adds	r3, #1
 8006a34:	029a      	lsls	r2, r3, #10
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006a48:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	661a      	str	r2, [r3, #96]	; 0x60
 8006a52:	e00f      	b.n	8006a74 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	4a58      	ldr	r2, [pc, #352]	; (8006bbc <HAL_SD_GetCardCSD+0x344>)
 8006a5a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a60:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2201      	movs	r2, #1
 8006a6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006a70:	2301      	movs	r3, #1
 8006a72:	e09d      	b.n	8006bb0 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a78:	0b9b      	lsrs	r3, r3, #14
 8006a7a:	b2db      	uxtb	r3, r3
 8006a7c:	f003 0301 	and.w	r3, r3, #1
 8006a80:	b2da      	uxtb	r2, r3
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a8a:	09db      	lsrs	r3, r3, #7
 8006a8c:	b2db      	uxtb	r3, r3
 8006a8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a92:	b2da      	uxtb	r2, r3
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a9c:	b2db      	uxtb	r3, r3
 8006a9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006aa2:	b2da      	uxtb	r2, r3
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006aac:	0fdb      	lsrs	r3, r3, #31
 8006aae:	b2da      	uxtb	r2, r3
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ab8:	0f5b      	lsrs	r3, r3, #29
 8006aba:	b2db      	uxtb	r3, r3
 8006abc:	f003 0303 	and.w	r3, r3, #3
 8006ac0:	b2da      	uxtb	r2, r3
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006aca:	0e9b      	lsrs	r3, r3, #26
 8006acc:	b2db      	uxtb	r3, r3
 8006ace:	f003 0307 	and.w	r3, r3, #7
 8006ad2:	b2da      	uxtb	r2, r3
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006adc:	0d9b      	lsrs	r3, r3, #22
 8006ade:	b2db      	uxtb	r3, r3
 8006ae0:	f003 030f 	and.w	r3, r3, #15
 8006ae4:	b2da      	uxtb	r2, r3
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006aee:	0d5b      	lsrs	r3, r3, #21
 8006af0:	b2db      	uxtb	r3, r3
 8006af2:	f003 0301 	and.w	r3, r3, #1
 8006af6:	b2da      	uxtb	r2, r3
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	2200      	movs	r2, #0
 8006b02:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b0a:	0c1b      	lsrs	r3, r3, #16
 8006b0c:	b2db      	uxtb	r3, r3
 8006b0e:	f003 0301 	and.w	r3, r3, #1
 8006b12:	b2da      	uxtb	r2, r3
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b1e:	0bdb      	lsrs	r3, r3, #15
 8006b20:	b2db      	uxtb	r3, r3
 8006b22:	f003 0301 	and.w	r3, r3, #1
 8006b26:	b2da      	uxtb	r2, r3
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b32:	0b9b      	lsrs	r3, r3, #14
 8006b34:	b2db      	uxtb	r3, r3
 8006b36:	f003 0301 	and.w	r3, r3, #1
 8006b3a:	b2da      	uxtb	r2, r3
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b46:	0b5b      	lsrs	r3, r3, #13
 8006b48:	b2db      	uxtb	r3, r3
 8006b4a:	f003 0301 	and.w	r3, r3, #1
 8006b4e:	b2da      	uxtb	r2, r3
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b5a:	0b1b      	lsrs	r3, r3, #12
 8006b5c:	b2db      	uxtb	r3, r3
 8006b5e:	f003 0301 	and.w	r3, r3, #1
 8006b62:	b2da      	uxtb	r2, r3
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b6e:	0a9b      	lsrs	r3, r3, #10
 8006b70:	b2db      	uxtb	r3, r3
 8006b72:	f003 0303 	and.w	r3, r3, #3
 8006b76:	b2da      	uxtb	r2, r3
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b82:	0a1b      	lsrs	r3, r3, #8
 8006b84:	b2db      	uxtb	r3, r3
 8006b86:	f003 0303 	and.w	r3, r3, #3
 8006b8a:	b2da      	uxtb	r2, r3
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b96:	085b      	lsrs	r3, r3, #1
 8006b98:	b2db      	uxtb	r3, r3
 8006b9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b9e:	b2da      	uxtb	r2, r3
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	2201      	movs	r2, #1
 8006baa:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8006bae:	2300      	movs	r3, #0
}
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	370c      	adds	r7, #12
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bba:	4770      	bx	lr
 8006bbc:	004005ff 	.word	0x004005ff

08006bc0 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8006bc0:	b480      	push	{r7}
 8006bc2:	b083      	sub	sp, #12
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
 8006bc8:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8006c0a:	2300      	movs	r3, #0
}
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	370c      	adds	r7, #12
 8006c10:	46bd      	mov	sp, r7
 8006c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c16:	4770      	bx	lr

08006c18 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8006c18:	b5b0      	push	{r4, r5, r7, lr}
 8006c1a:	b08e      	sub	sp, #56	; 0x38
 8006c1c:	af04      	add	r7, sp, #16
 8006c1e:	6078      	str	r0, [r7, #4]
 8006c20:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8006c22:	2300      	movs	r3, #0
 8006c24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2203      	movs	r2, #3
 8006c2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c34:	2b03      	cmp	r3, #3
 8006c36:	d02e      	beq.n	8006c96 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c3e:	d106      	bne.n	8006c4e <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c44:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	639a      	str	r2, [r3, #56]	; 0x38
 8006c4c:	e029      	b.n	8006ca2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c54:	d10a      	bne.n	8006c6c <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8006c56:	6878      	ldr	r0, [r7, #4]
 8006c58:	f000 fb28 	bl	80072ac <SD_WideBus_Enable>
 8006c5c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c62:	6a3b      	ldr	r3, [r7, #32]
 8006c64:	431a      	orrs	r2, r3
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	639a      	str	r2, [r3, #56]	; 0x38
 8006c6a:	e01a      	b.n	8006ca2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d10a      	bne.n	8006c88 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	f000 fb65 	bl	8007342 <SD_WideBus_Disable>
 8006c78:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c7e:	6a3b      	ldr	r3, [r7, #32]
 8006c80:	431a      	orrs	r2, r3
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	639a      	str	r2, [r3, #56]	; 0x38
 8006c86:	e00c      	b.n	8006ca2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c8c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	639a      	str	r2, [r3, #56]	; 0x38
 8006c94:	e005      	b.n	8006ca2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c9a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d00b      	beq.n	8006cc2 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	4a26      	ldr	r2, [pc, #152]	; (8006d48 <HAL_SD_ConfigWideBusOperation+0x130>)
 8006cb0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2201      	movs	r2, #1
 8006cb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8006cba:	2301      	movs	r3, #1
 8006cbc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006cc0:	e01f      	b.n	8006d02 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	685b      	ldr	r3, [r3, #4]
 8006cc6:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	689b      	ldr	r3, [r3, #8]
 8006ccc:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	68db      	ldr	r3, [r3, #12]
 8006cd2:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	695b      	ldr	r3, [r3, #20]
 8006cdc:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	699b      	ldr	r3, [r3, #24]
 8006ce2:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681d      	ldr	r5, [r3, #0]
 8006ce8:	466c      	mov	r4, sp
 8006cea:	f107 0314 	add.w	r3, r7, #20
 8006cee:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006cf2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006cf6:	f107 0308 	add.w	r3, r7, #8
 8006cfa:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006cfc:	4628      	mov	r0, r5
 8006cfe:	f002 fbbb 	bl	8009478 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	f002 fc90 	bl	8009630 <SDMMC_CmdBlockLength>
 8006d10:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006d12:	6a3b      	ldr	r3, [r7, #32]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d00c      	beq.n	8006d32 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	4a0a      	ldr	r2, [pc, #40]	; (8006d48 <HAL_SD_ConfigWideBusOperation+0x130>)
 8006d1e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d24:	6a3b      	ldr	r3, [r7, #32]
 8006d26:	431a      	orrs	r2, r3
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8006d2c:	2301      	movs	r3, #1
 8006d2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	2201      	movs	r2, #1
 8006d36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8006d3a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006d3e:	4618      	mov	r0, r3
 8006d40:	3728      	adds	r7, #40	; 0x28
 8006d42:	46bd      	mov	sp, r7
 8006d44:	bdb0      	pop	{r4, r5, r7, pc}
 8006d46:	bf00      	nop
 8006d48:	004005ff 	.word	0x004005ff

08006d4c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b086      	sub	sp, #24
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8006d54:	2300      	movs	r3, #0
 8006d56:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8006d58:	f107 030c 	add.w	r3, r7, #12
 8006d5c:	4619      	mov	r1, r3
 8006d5e:	6878      	ldr	r0, [r7, #4]
 8006d60:	f000 fa7c 	bl	800725c <SD_SendStatus>
 8006d64:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006d66:	697b      	ldr	r3, [r7, #20]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d005      	beq.n	8006d78 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d70:	697b      	ldr	r3, [r7, #20]
 8006d72:	431a      	orrs	r2, r3
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	0a5b      	lsrs	r3, r3, #9
 8006d7c:	f003 030f 	and.w	r3, r3, #15
 8006d80:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8006d82:	693b      	ldr	r3, [r7, #16]
}
 8006d84:	4618      	mov	r0, r3
 8006d86:	3718      	adds	r7, #24
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	bd80      	pop	{r7, pc}

08006d8c <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006d8c:	b480      	push	{r7}
 8006d8e:	b085      	sub	sp, #20
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d98:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006da8:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8006daa:	bf00      	nop
 8006dac:	3714      	adds	r7, #20
 8006dae:	46bd      	mov	sp, r7
 8006db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db4:	4770      	bx	lr

08006db6 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006db6:	b580      	push	{r7, lr}
 8006db8:	b084      	sub	sp, #16
 8006dba:	af00      	add	r7, sp, #0
 8006dbc:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dc2:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dc8:	2b82      	cmp	r3, #130	; 0x82
 8006dca:	d111      	bne.n	8006df0 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	f002 fcd7 	bl	8009784 <SDMMC_CmdStopTransfer>
 8006dd6:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006dd8:	68bb      	ldr	r3, [r7, #8]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d008      	beq.n	8006df0 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006de2:	68bb      	ldr	r3, [r7, #8]
 8006de4:	431a      	orrs	r2, r3
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8006dea:	68f8      	ldr	r0, [r7, #12]
 8006dec:	f7ff fd3a 	bl	8006864 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f022 0208 	bic.w	r2, r2, #8
 8006dfe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f240 523a 	movw	r2, #1338	; 0x53a
 8006e08:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	2201      	movs	r2, #1
 8006e0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	2200      	movs	r2, #0
 8006e16:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8006e18:	68f8      	ldr	r0, [r7, #12]
 8006e1a:	f003 f93f 	bl	800a09c <HAL_SD_RxCpltCallback>
#endif
}
 8006e1e:	bf00      	nop
 8006e20:	3710      	adds	r7, #16
 8006e22:	46bd      	mov	sp, r7
 8006e24:	bd80      	pop	{r7, pc}
	...

08006e28 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b086      	sub	sp, #24
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e34:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8006e36:	6878      	ldr	r0, [r7, #4]
 8006e38:	f7fc ff10 	bl	8003c5c <HAL_DMA_GetError>
 8006e3c:	4603      	mov	r3, r0
 8006e3e:	2b02      	cmp	r3, #2
 8006e40:	d03e      	beq.n	8006ec0 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8006e42:	697b      	ldr	r3, [r7, #20]
 8006e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e48:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8006e4a:	697b      	ldr	r3, [r7, #20]
 8006e4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e50:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8006e52:	693b      	ldr	r3, [r7, #16]
 8006e54:	2b01      	cmp	r3, #1
 8006e56:	d002      	beq.n	8006e5e <SD_DMAError+0x36>
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	2b01      	cmp	r3, #1
 8006e5c:	d12d      	bne.n	8006eba <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006e5e:	697b      	ldr	r3, [r7, #20]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	4a19      	ldr	r2, [pc, #100]	; (8006ec8 <SD_DMAError+0xa0>)
 8006e64:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8006e66:	697b      	ldr	r3, [r7, #20]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006e6c:	697b      	ldr	r3, [r7, #20]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8006e74:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8006e76:	697b      	ldr	r3, [r7, #20]
 8006e78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e7a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006e7e:	697b      	ldr	r3, [r7, #20]
 8006e80:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8006e82:	6978      	ldr	r0, [r7, #20]
 8006e84:	f7ff ff62 	bl	8006d4c <HAL_SD_GetCardState>
 8006e88:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8006e8a:	68bb      	ldr	r3, [r7, #8]
 8006e8c:	2b06      	cmp	r3, #6
 8006e8e:	d002      	beq.n	8006e96 <SD_DMAError+0x6e>
 8006e90:	68bb      	ldr	r3, [r7, #8]
 8006e92:	2b05      	cmp	r3, #5
 8006e94:	d10a      	bne.n	8006eac <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006e96:	697b      	ldr	r3, [r7, #20]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	f002 fc72 	bl	8009784 <SDMMC_CmdStopTransfer>
 8006ea0:	4602      	mov	r2, r0
 8006ea2:	697b      	ldr	r3, [r7, #20]
 8006ea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ea6:	431a      	orrs	r2, r3
 8006ea8:	697b      	ldr	r3, [r7, #20]
 8006eaa:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8006eac:	697b      	ldr	r3, [r7, #20]
 8006eae:	2201      	movs	r2, #1
 8006eb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006eb4:	697b      	ldr	r3, [r7, #20]
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8006eba:	6978      	ldr	r0, [r7, #20]
 8006ebc:	f7ff fcd2 	bl	8006864 <HAL_SD_ErrorCallback>
#endif
  }
}
 8006ec0:	bf00      	nop
 8006ec2:	3718      	adds	r7, #24
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	bd80      	pop	{r7, pc}
 8006ec8:	004005ff 	.word	0x004005ff

08006ecc <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b084      	sub	sp, #16
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ed8:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f240 523a 	movw	r2, #1338	; 0x53a
 8006ee2:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8006ee4:	68f8      	ldr	r0, [r7, #12]
 8006ee6:	f7ff ff31 	bl	8006d4c <HAL_SD_GetCardState>
 8006eea:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	2201      	movs	r2, #1
 8006ef0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8006efa:	68bb      	ldr	r3, [r7, #8]
 8006efc:	2b06      	cmp	r3, #6
 8006efe:	d002      	beq.n	8006f06 <SD_DMATxAbort+0x3a>
 8006f00:	68bb      	ldr	r3, [r7, #8]
 8006f02:	2b05      	cmp	r3, #5
 8006f04:	d10a      	bne.n	8006f1c <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	f002 fc3a 	bl	8009784 <SDMMC_CmdStopTransfer>
 8006f10:	4602      	mov	r2, r0
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f16:	431a      	orrs	r2, r3
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d103      	bne.n	8006f2c <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8006f24:	68f8      	ldr	r0, [r7, #12]
 8006f26:	f003 f8a5 	bl	800a074 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8006f2a:	e002      	b.n	8006f32 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8006f2c:	68f8      	ldr	r0, [r7, #12]
 8006f2e:	f7ff fc99 	bl	8006864 <HAL_SD_ErrorCallback>
}
 8006f32:	bf00      	nop
 8006f34:	3710      	adds	r7, #16
 8006f36:	46bd      	mov	sp, r7
 8006f38:	bd80      	pop	{r7, pc}

08006f3a <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8006f3a:	b580      	push	{r7, lr}
 8006f3c:	b084      	sub	sp, #16
 8006f3e:	af00      	add	r7, sp, #0
 8006f40:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f46:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f240 523a 	movw	r2, #1338	; 0x53a
 8006f50:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8006f52:	68f8      	ldr	r0, [r7, #12]
 8006f54:	f7ff fefa 	bl	8006d4c <HAL_SD_GetCardState>
 8006f58:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	2201      	movs	r2, #1
 8006f5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	2200      	movs	r2, #0
 8006f66:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8006f68:	68bb      	ldr	r3, [r7, #8]
 8006f6a:	2b06      	cmp	r3, #6
 8006f6c:	d002      	beq.n	8006f74 <SD_DMARxAbort+0x3a>
 8006f6e:	68bb      	ldr	r3, [r7, #8]
 8006f70:	2b05      	cmp	r3, #5
 8006f72:	d10a      	bne.n	8006f8a <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	4618      	mov	r0, r3
 8006f7a:	f002 fc03 	bl	8009784 <SDMMC_CmdStopTransfer>
 8006f7e:	4602      	mov	r2, r0
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f84:	431a      	orrs	r2, r3
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d103      	bne.n	8006f9a <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8006f92:	68f8      	ldr	r0, [r7, #12]
 8006f94:	f003 f86e 	bl	800a074 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8006f98:	e002      	b.n	8006fa0 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8006f9a:	68f8      	ldr	r0, [r7, #12]
 8006f9c:	f7ff fc62 	bl	8006864 <HAL_SD_ErrorCallback>
}
 8006fa0:	bf00      	nop
 8006fa2:	3710      	adds	r7, #16
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	bd80      	pop	{r7, pc}

08006fa8 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006fa8:	b5b0      	push	{r4, r5, r7, lr}
 8006faa:	b094      	sub	sp, #80	; 0x50
 8006fac:	af04      	add	r7, sp, #16
 8006fae:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8006fb0:	2301      	movs	r3, #1
 8006fb2:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	4618      	mov	r0, r3
 8006fba:	f002 fab5 	bl	8009528 <SDIO_GetPowerState>
 8006fbe:	4603      	mov	r3, r0
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d102      	bne.n	8006fca <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006fc4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006fc8:	e0b6      	b.n	8007138 <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fce:	2b03      	cmp	r3, #3
 8006fd0:	d02f      	beq.n	8007032 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	f002 fcde 	bl	8009998 <SDMMC_CmdSendCID>
 8006fdc:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006fde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d001      	beq.n	8006fe8 <SD_InitCard+0x40>
    {
      return errorstate;
 8006fe4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fe6:	e0a7      	b.n	8007138 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	2100      	movs	r1, #0
 8006fee:	4618      	mov	r0, r3
 8006ff0:	f002 fadf 	bl	80095b2 <SDIO_GetResponse>
 8006ff4:	4602      	mov	r2, r0
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	2104      	movs	r1, #4
 8007000:	4618      	mov	r0, r3
 8007002:	f002 fad6 	bl	80095b2 <SDIO_GetResponse>
 8007006:	4602      	mov	r2, r0
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	2108      	movs	r1, #8
 8007012:	4618      	mov	r0, r3
 8007014:	f002 facd 	bl	80095b2 <SDIO_GetResponse>
 8007018:	4602      	mov	r2, r0
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	210c      	movs	r1, #12
 8007024:	4618      	mov	r0, r3
 8007026:	f002 fac4 	bl	80095b2 <SDIO_GetResponse>
 800702a:	4602      	mov	r2, r0
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007036:	2b03      	cmp	r3, #3
 8007038:	d00d      	beq.n	8007056 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f107 020e 	add.w	r2, r7, #14
 8007042:	4611      	mov	r1, r2
 8007044:	4618      	mov	r0, r3
 8007046:	f002 fce4 	bl	8009a12 <SDMMC_CmdSetRelAdd>
 800704a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800704c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800704e:	2b00      	cmp	r3, #0
 8007050:	d001      	beq.n	8007056 <SD_InitCard+0xae>
    {
      return errorstate;
 8007052:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007054:	e070      	b.n	8007138 <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800705a:	2b03      	cmp	r3, #3
 800705c:	d036      	beq.n	80070cc <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800705e:	89fb      	ldrh	r3, [r7, #14]
 8007060:	461a      	mov	r2, r3
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681a      	ldr	r2, [r3, #0]
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800706e:	041b      	lsls	r3, r3, #16
 8007070:	4619      	mov	r1, r3
 8007072:	4610      	mov	r0, r2
 8007074:	f002 fcae 	bl	80099d4 <SDMMC_CmdSendCSD>
 8007078:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800707a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800707c:	2b00      	cmp	r3, #0
 800707e:	d001      	beq.n	8007084 <SD_InitCard+0xdc>
    {
      return errorstate;
 8007080:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007082:	e059      	b.n	8007138 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	2100      	movs	r1, #0
 800708a:	4618      	mov	r0, r3
 800708c:	f002 fa91 	bl	80095b2 <SDIO_GetResponse>
 8007090:	4602      	mov	r2, r0
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	2104      	movs	r1, #4
 800709c:	4618      	mov	r0, r3
 800709e:	f002 fa88 	bl	80095b2 <SDIO_GetResponse>
 80070a2:	4602      	mov	r2, r0
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	2108      	movs	r1, #8
 80070ae:	4618      	mov	r0, r3
 80070b0:	f002 fa7f 	bl	80095b2 <SDIO_GetResponse>
 80070b4:	4602      	mov	r2, r0
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	210c      	movs	r1, #12
 80070c0:	4618      	mov	r0, r3
 80070c2:	f002 fa76 	bl	80095b2 <SDIO_GetResponse>
 80070c6:	4602      	mov	r2, r0
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	2104      	movs	r1, #4
 80070d2:	4618      	mov	r0, r3
 80070d4:	f002 fa6d 	bl	80095b2 <SDIO_GetResponse>
 80070d8:	4603      	mov	r3, r0
 80070da:	0d1a      	lsrs	r2, r3, #20
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80070e0:	f107 0310 	add.w	r3, r7, #16
 80070e4:	4619      	mov	r1, r3
 80070e6:	6878      	ldr	r0, [r7, #4]
 80070e8:	f7ff fbc6 	bl	8006878 <HAL_SD_GetCardCSD>
 80070ec:	4603      	mov	r3, r0
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d002      	beq.n	80070f8 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80070f2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80070f6:	e01f      	b.n	8007138 <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	6819      	ldr	r1, [r3, #0]
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007100:	041b      	lsls	r3, r3, #16
 8007102:	461a      	mov	r2, r3
 8007104:	f04f 0300 	mov.w	r3, #0
 8007108:	4608      	mov	r0, r1
 800710a:	f002 fb5d 	bl	80097c8 <SDMMC_CmdSelDesel>
 800710e:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8007110:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007112:	2b00      	cmp	r3, #0
 8007114:	d001      	beq.n	800711a <SD_InitCard+0x172>
  {
    return errorstate;
 8007116:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007118:	e00e      	b.n	8007138 <SD_InitCard+0x190>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681d      	ldr	r5, [r3, #0]
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	466c      	mov	r4, sp
 8007122:	f103 0210 	add.w	r2, r3, #16
 8007126:	ca07      	ldmia	r2, {r0, r1, r2}
 8007128:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800712c:	3304      	adds	r3, #4
 800712e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007130:	4628      	mov	r0, r5
 8007132:	f002 f9a1 	bl	8009478 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8007136:	2300      	movs	r3, #0
}
 8007138:	4618      	mov	r0, r3
 800713a:	3740      	adds	r7, #64	; 0x40
 800713c:	46bd      	mov	sp, r7
 800713e:	bdb0      	pop	{r4, r5, r7, pc}

08007140 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8007140:	b580      	push	{r7, lr}
 8007142:	b086      	sub	sp, #24
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007148:	2300      	movs	r3, #0
 800714a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800714c:	2300      	movs	r3, #0
 800714e:	617b      	str	r3, [r7, #20]
 8007150:	2300      	movs	r3, #0
 8007152:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	4618      	mov	r0, r3
 800715a:	f002 fb58 	bl	800980e <SDMMC_CmdGoIdleState>
 800715e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d001      	beq.n	800716a <SD_PowerON+0x2a>
  {
    return errorstate;
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	e072      	b.n	8007250 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	4618      	mov	r0, r3
 8007170:	f002 fb6b 	bl	800984a <SDMMC_CmdOperCond>
 8007174:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d00d      	beq.n	8007198 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2200      	movs	r2, #0
 8007180:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	4618      	mov	r0, r3
 8007188:	f002 fb41 	bl	800980e <SDMMC_CmdGoIdleState>
 800718c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d004      	beq.n	800719e <SD_PowerON+0x5e>
    {
      return errorstate;
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	e05b      	b.n	8007250 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2201      	movs	r2, #1
 800719c:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071a2:	2b01      	cmp	r3, #1
 80071a4:	d137      	bne.n	8007216 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	2100      	movs	r1, #0
 80071ac:	4618      	mov	r0, r3
 80071ae:	f002 fb6b 	bl	8009888 <SDMMC_CmdAppCommand>
 80071b2:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d02d      	beq.n	8007216 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80071ba:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80071be:	e047      	b.n	8007250 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	2100      	movs	r1, #0
 80071c6:	4618      	mov	r0, r3
 80071c8:	f002 fb5e 	bl	8009888 <SDMMC_CmdAppCommand>
 80071cc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d001      	beq.n	80071d8 <SD_PowerON+0x98>
    {
      return errorstate;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	e03b      	b.n	8007250 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	491e      	ldr	r1, [pc, #120]	; (8007258 <SD_PowerON+0x118>)
 80071de:	4618      	mov	r0, r3
 80071e0:	f002 fb74 	bl	80098cc <SDMMC_CmdAppOperCommand>
 80071e4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d002      	beq.n	80071f2 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80071ec:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80071f0:	e02e      	b.n	8007250 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	2100      	movs	r1, #0
 80071f8:	4618      	mov	r0, r3
 80071fa:	f002 f9da 	bl	80095b2 <SDIO_GetResponse>
 80071fe:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8007200:	697b      	ldr	r3, [r7, #20]
 8007202:	0fdb      	lsrs	r3, r3, #31
 8007204:	2b01      	cmp	r3, #1
 8007206:	d101      	bne.n	800720c <SD_PowerON+0xcc>
 8007208:	2301      	movs	r3, #1
 800720a:	e000      	b.n	800720e <SD_PowerON+0xce>
 800720c:	2300      	movs	r3, #0
 800720e:	613b      	str	r3, [r7, #16]

    count++;
 8007210:	68bb      	ldr	r3, [r7, #8]
 8007212:	3301      	adds	r3, #1
 8007214:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8007216:	68bb      	ldr	r3, [r7, #8]
 8007218:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800721c:	4293      	cmp	r3, r2
 800721e:	d802      	bhi.n	8007226 <SD_PowerON+0xe6>
 8007220:	693b      	ldr	r3, [r7, #16]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d0cc      	beq.n	80071c0 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8007226:	68bb      	ldr	r3, [r7, #8]
 8007228:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800722c:	4293      	cmp	r3, r2
 800722e:	d902      	bls.n	8007236 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8007230:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007234:	e00c      	b.n	8007250 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8007236:	697b      	ldr	r3, [r7, #20]
 8007238:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800723c:	2b00      	cmp	r3, #0
 800723e:	d003      	beq.n	8007248 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2201      	movs	r2, #1
 8007244:	645a      	str	r2, [r3, #68]	; 0x44
 8007246:	e002      	b.n	800724e <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2200      	movs	r2, #0
 800724c:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800724e:	2300      	movs	r3, #0
}
 8007250:	4618      	mov	r0, r3
 8007252:	3718      	adds	r7, #24
 8007254:	46bd      	mov	sp, r7
 8007256:	bd80      	pop	{r7, pc}
 8007258:	c1100000 	.word	0xc1100000

0800725c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800725c:	b580      	push	{r7, lr}
 800725e:	b084      	sub	sp, #16
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
 8007264:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d102      	bne.n	8007272 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800726c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007270:	e018      	b.n	80072a4 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681a      	ldr	r2, [r3, #0]
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800727a:	041b      	lsls	r3, r3, #16
 800727c:	4619      	mov	r1, r3
 800727e:	4610      	mov	r0, r2
 8007280:	f002 fbe8 	bl	8009a54 <SDMMC_CmdSendStatus>
 8007284:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d001      	beq.n	8007290 <SD_SendStatus+0x34>
  {
    return errorstate;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	e009      	b.n	80072a4 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	2100      	movs	r1, #0
 8007296:	4618      	mov	r0, r3
 8007298:	f002 f98b 	bl	80095b2 <SDIO_GetResponse>
 800729c:	4602      	mov	r2, r0
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80072a2:	2300      	movs	r3, #0
}
 80072a4:	4618      	mov	r0, r3
 80072a6:	3710      	adds	r7, #16
 80072a8:	46bd      	mov	sp, r7
 80072aa:	bd80      	pop	{r7, pc}

080072ac <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b086      	sub	sp, #24
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80072b4:	2300      	movs	r3, #0
 80072b6:	60fb      	str	r3, [r7, #12]
 80072b8:	2300      	movs	r3, #0
 80072ba:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	2100      	movs	r1, #0
 80072c2:	4618      	mov	r0, r3
 80072c4:	f002 f975 	bl	80095b2 <SDIO_GetResponse>
 80072c8:	4603      	mov	r3, r0
 80072ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072ce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80072d2:	d102      	bne.n	80072da <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80072d4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80072d8:	e02f      	b.n	800733a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80072da:	f107 030c 	add.w	r3, r7, #12
 80072de:	4619      	mov	r1, r3
 80072e0:	6878      	ldr	r0, [r7, #4]
 80072e2:	f000 f879 	bl	80073d8 <SD_FindSCR>
 80072e6:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80072e8:	697b      	ldr	r3, [r7, #20]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d001      	beq.n	80072f2 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80072ee:	697b      	ldr	r3, [r7, #20]
 80072f0:	e023      	b.n	800733a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80072f2:	693b      	ldr	r3, [r7, #16]
 80072f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d01c      	beq.n	8007336 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681a      	ldr	r2, [r3, #0]
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007304:	041b      	lsls	r3, r3, #16
 8007306:	4619      	mov	r1, r3
 8007308:	4610      	mov	r0, r2
 800730a:	f002 fabd 	bl	8009888 <SDMMC_CmdAppCommand>
 800730e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007310:	697b      	ldr	r3, [r7, #20]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d001      	beq.n	800731a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8007316:	697b      	ldr	r3, [r7, #20]
 8007318:	e00f      	b.n	800733a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	2102      	movs	r1, #2
 8007320:	4618      	mov	r0, r3
 8007322:	f002 faf6 	bl	8009912 <SDMMC_CmdBusWidth>
 8007326:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007328:	697b      	ldr	r3, [r7, #20]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d001      	beq.n	8007332 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800732e:	697b      	ldr	r3, [r7, #20]
 8007330:	e003      	b.n	800733a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007332:	2300      	movs	r3, #0
 8007334:	e001      	b.n	800733a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007336:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800733a:	4618      	mov	r0, r3
 800733c:	3718      	adds	r7, #24
 800733e:	46bd      	mov	sp, r7
 8007340:	bd80      	pop	{r7, pc}

08007342 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8007342:	b580      	push	{r7, lr}
 8007344:	b086      	sub	sp, #24
 8007346:	af00      	add	r7, sp, #0
 8007348:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800734a:	2300      	movs	r3, #0
 800734c:	60fb      	str	r3, [r7, #12]
 800734e:	2300      	movs	r3, #0
 8007350:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	2100      	movs	r1, #0
 8007358:	4618      	mov	r0, r3
 800735a:	f002 f92a 	bl	80095b2 <SDIO_GetResponse>
 800735e:	4603      	mov	r3, r0
 8007360:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007364:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007368:	d102      	bne.n	8007370 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800736a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800736e:	e02f      	b.n	80073d0 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007370:	f107 030c 	add.w	r3, r7, #12
 8007374:	4619      	mov	r1, r3
 8007376:	6878      	ldr	r0, [r7, #4]
 8007378:	f000 f82e 	bl	80073d8 <SD_FindSCR>
 800737c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800737e:	697b      	ldr	r3, [r7, #20]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d001      	beq.n	8007388 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8007384:	697b      	ldr	r3, [r7, #20]
 8007386:	e023      	b.n	80073d0 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007388:	693b      	ldr	r3, [r7, #16]
 800738a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800738e:	2b00      	cmp	r3, #0
 8007390:	d01c      	beq.n	80073cc <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681a      	ldr	r2, [r3, #0]
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800739a:	041b      	lsls	r3, r3, #16
 800739c:	4619      	mov	r1, r3
 800739e:	4610      	mov	r0, r2
 80073a0:	f002 fa72 	bl	8009888 <SDMMC_CmdAppCommand>
 80073a4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80073a6:	697b      	ldr	r3, [r7, #20]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d001      	beq.n	80073b0 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80073ac:	697b      	ldr	r3, [r7, #20]
 80073ae:	e00f      	b.n	80073d0 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	2100      	movs	r1, #0
 80073b6:	4618      	mov	r0, r3
 80073b8:	f002 faab 	bl	8009912 <SDMMC_CmdBusWidth>
 80073bc:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80073be:	697b      	ldr	r3, [r7, #20]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d001      	beq.n	80073c8 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80073c4:	697b      	ldr	r3, [r7, #20]
 80073c6:	e003      	b.n	80073d0 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80073c8:	2300      	movs	r3, #0
 80073ca:	e001      	b.n	80073d0 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80073cc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80073d0:	4618      	mov	r0, r3
 80073d2:	3718      	adds	r7, #24
 80073d4:	46bd      	mov	sp, r7
 80073d6:	bd80      	pop	{r7, pc}

080073d8 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80073d8:	b590      	push	{r4, r7, lr}
 80073da:	b08f      	sub	sp, #60	; 0x3c
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
 80073e0:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80073e2:	f7fa fe5d 	bl	80020a0 <HAL_GetTick>
 80073e6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 80073e8:	2300      	movs	r3, #0
 80073ea:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 80073ec:	2300      	movs	r3, #0
 80073ee:	60bb      	str	r3, [r7, #8]
 80073f0:	2300      	movs	r3, #0
 80073f2:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	2108      	movs	r1, #8
 80073fe:	4618      	mov	r0, r3
 8007400:	f002 f916 	bl	8009630 <SDMMC_CmdBlockLength>
 8007404:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007408:	2b00      	cmp	r3, #0
 800740a:	d001      	beq.n	8007410 <SD_FindSCR+0x38>
  {
    return errorstate;
 800740c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800740e:	e0b2      	b.n	8007576 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681a      	ldr	r2, [r3, #0]
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007418:	041b      	lsls	r3, r3, #16
 800741a:	4619      	mov	r1, r3
 800741c:	4610      	mov	r0, r2
 800741e:	f002 fa33 	bl	8009888 <SDMMC_CmdAppCommand>
 8007422:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007426:	2b00      	cmp	r3, #0
 8007428:	d001      	beq.n	800742e <SD_FindSCR+0x56>
  {
    return errorstate;
 800742a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800742c:	e0a3      	b.n	8007576 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800742e:	f04f 33ff 	mov.w	r3, #4294967295
 8007432:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8007434:	2308      	movs	r3, #8
 8007436:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8007438:	2330      	movs	r3, #48	; 0x30
 800743a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800743c:	2302      	movs	r3, #2
 800743e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8007440:	2300      	movs	r3, #0
 8007442:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8007444:	2301      	movs	r3, #1
 8007446:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	f107 0210 	add.w	r2, r7, #16
 8007450:	4611      	mov	r1, r2
 8007452:	4618      	mov	r0, r3
 8007454:	f002 f8c0 	bl	80095d8 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	4618      	mov	r0, r3
 800745e:	f002 fa7a 	bl	8009956 <SDMMC_CmdSendSCR>
 8007462:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007466:	2b00      	cmp	r3, #0
 8007468:	d02a      	beq.n	80074c0 <SD_FindSCR+0xe8>
  {
    return errorstate;
 800746a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800746c:	e083      	b.n	8007576 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007474:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007478:	2b00      	cmp	r3, #0
 800747a:	d00f      	beq.n	800749c <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	6819      	ldr	r1, [r3, #0]
 8007480:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007482:	009b      	lsls	r3, r3, #2
 8007484:	f107 0208 	add.w	r2, r7, #8
 8007488:	18d4      	adds	r4, r2, r3
 800748a:	4608      	mov	r0, r1
 800748c:	f002 f81f 	bl	80094ce <SDIO_ReadFIFO>
 8007490:	4603      	mov	r3, r0
 8007492:	6023      	str	r3, [r4, #0]
      index++;
 8007494:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007496:	3301      	adds	r3, #1
 8007498:	637b      	str	r3, [r7, #52]	; 0x34
 800749a:	e006      	b.n	80074aa <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d012      	beq.n	80074d0 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80074aa:	f7fa fdf9 	bl	80020a0 <HAL_GetTick>
 80074ae:	4602      	mov	r2, r0
 80074b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074b2:	1ad3      	subs	r3, r2, r3
 80074b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074b8:	d102      	bne.n	80074c0 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80074ba:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80074be:	e05a      	b.n	8007576 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074c6:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d0cf      	beq.n	800746e <SD_FindSCR+0x96>
 80074ce:	e000      	b.n	80074d2 <SD_FindSCR+0xfa>
      break;
 80074d0:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074d8:	f003 0308 	and.w	r3, r3, #8
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d005      	beq.n	80074ec <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	2208      	movs	r2, #8
 80074e6:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80074e8:	2308      	movs	r3, #8
 80074ea:	e044      	b.n	8007576 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074f2:	f003 0302 	and.w	r3, r3, #2
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d005      	beq.n	8007506 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	2202      	movs	r2, #2
 8007500:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8007502:	2302      	movs	r3, #2
 8007504:	e037      	b.n	8007576 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800750c:	f003 0320 	and.w	r3, r3, #32
 8007510:	2b00      	cmp	r3, #0
 8007512:	d005      	beq.n	8007520 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	2220      	movs	r2, #32
 800751a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800751c:	2320      	movs	r3, #32
 800751e:	e02a      	b.n	8007576 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	f240 523a 	movw	r2, #1338	; 0x53a
 8007528:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	061a      	lsls	r2, r3, #24
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	021b      	lsls	r3, r3, #8
 8007532:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007536:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	0a1b      	lsrs	r3, r3, #8
 800753c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007540:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	0e1b      	lsrs	r3, r3, #24
 8007546:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800754a:	601a      	str	r2, [r3, #0]
    scr++;
 800754c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800754e:	3304      	adds	r3, #4
 8007550:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007552:	68bb      	ldr	r3, [r7, #8]
 8007554:	061a      	lsls	r2, r3, #24
 8007556:	68bb      	ldr	r3, [r7, #8]
 8007558:	021b      	lsls	r3, r3, #8
 800755a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800755e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8007560:	68bb      	ldr	r3, [r7, #8]
 8007562:	0a1b      	lsrs	r3, r3, #8
 8007564:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007568:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800756a:	68bb      	ldr	r3, [r7, #8]
 800756c:	0e1b      	lsrs	r3, r3, #24
 800756e:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007572:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8007574:	2300      	movs	r3, #0
}
 8007576:	4618      	mov	r0, r3
 8007578:	373c      	adds	r7, #60	; 0x3c
 800757a:	46bd      	mov	sp, r7
 800757c:	bd90      	pop	{r4, r7, pc}

0800757e <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800757e:	b580      	push	{r7, lr}
 8007580:	b086      	sub	sp, #24
 8007582:	af00      	add	r7, sp, #0
 8007584:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800758a:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007590:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8007592:	693b      	ldr	r3, [r7, #16]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d03f      	beq.n	8007618 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8007598:	2300      	movs	r3, #0
 800759a:	617b      	str	r3, [r7, #20]
 800759c:	e033      	b.n	8007606 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	4618      	mov	r0, r3
 80075a4:	f001 ff93 	bl	80094ce <SDIO_ReadFIFO>
 80075a8:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 80075aa:	68bb      	ldr	r3, [r7, #8]
 80075ac:	b2da      	uxtb	r2, r3
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	701a      	strb	r2, [r3, #0]
      tmp++;
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	3301      	adds	r3, #1
 80075b6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80075b8:	693b      	ldr	r3, [r7, #16]
 80075ba:	3b01      	subs	r3, #1
 80075bc:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80075be:	68bb      	ldr	r3, [r7, #8]
 80075c0:	0a1b      	lsrs	r3, r3, #8
 80075c2:	b2da      	uxtb	r2, r3
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	701a      	strb	r2, [r3, #0]
      tmp++;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	3301      	adds	r3, #1
 80075cc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80075ce:	693b      	ldr	r3, [r7, #16]
 80075d0:	3b01      	subs	r3, #1
 80075d2:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80075d4:	68bb      	ldr	r3, [r7, #8]
 80075d6:	0c1b      	lsrs	r3, r3, #16
 80075d8:	b2da      	uxtb	r2, r3
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	701a      	strb	r2, [r3, #0]
      tmp++;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	3301      	adds	r3, #1
 80075e2:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80075e4:	693b      	ldr	r3, [r7, #16]
 80075e6:	3b01      	subs	r3, #1
 80075e8:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 80075ea:	68bb      	ldr	r3, [r7, #8]
 80075ec:	0e1b      	lsrs	r3, r3, #24
 80075ee:	b2da      	uxtb	r2, r3
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	701a      	strb	r2, [r3, #0]
      tmp++;
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	3301      	adds	r3, #1
 80075f8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80075fa:	693b      	ldr	r3, [r7, #16]
 80075fc:	3b01      	subs	r3, #1
 80075fe:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8007600:	697b      	ldr	r3, [r7, #20]
 8007602:	3301      	adds	r3, #1
 8007604:	617b      	str	r3, [r7, #20]
 8007606:	697b      	ldr	r3, [r7, #20]
 8007608:	2b07      	cmp	r3, #7
 800760a:	d9c8      	bls.n	800759e <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	68fa      	ldr	r2, [r7, #12]
 8007610:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	693a      	ldr	r2, [r7, #16]
 8007616:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8007618:	bf00      	nop
 800761a:	3718      	adds	r7, #24
 800761c:	46bd      	mov	sp, r7
 800761e:	bd80      	pop	{r7, pc}

08007620 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8007620:	b580      	push	{r7, lr}
 8007622:	b086      	sub	sp, #24
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	6a1b      	ldr	r3, [r3, #32]
 800762c:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007632:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8007634:	693b      	ldr	r3, [r7, #16]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d043      	beq.n	80076c2 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800763a:	2300      	movs	r3, #0
 800763c:	617b      	str	r3, [r7, #20]
 800763e:	e037      	b.n	80076b0 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	781b      	ldrb	r3, [r3, #0]
 8007644:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	3301      	adds	r3, #1
 800764a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800764c:	693b      	ldr	r3, [r7, #16]
 800764e:	3b01      	subs	r3, #1
 8007650:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	781b      	ldrb	r3, [r3, #0]
 8007656:	021a      	lsls	r2, r3, #8
 8007658:	68bb      	ldr	r3, [r7, #8]
 800765a:	4313      	orrs	r3, r2
 800765c:	60bb      	str	r3, [r7, #8]
      tmp++;
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	3301      	adds	r3, #1
 8007662:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007664:	693b      	ldr	r3, [r7, #16]
 8007666:	3b01      	subs	r3, #1
 8007668:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	781b      	ldrb	r3, [r3, #0]
 800766e:	041a      	lsls	r2, r3, #16
 8007670:	68bb      	ldr	r3, [r7, #8]
 8007672:	4313      	orrs	r3, r2
 8007674:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	3301      	adds	r3, #1
 800767a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800767c:	693b      	ldr	r3, [r7, #16]
 800767e:	3b01      	subs	r3, #1
 8007680:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	781b      	ldrb	r3, [r3, #0]
 8007686:	061a      	lsls	r2, r3, #24
 8007688:	68bb      	ldr	r3, [r7, #8]
 800768a:	4313      	orrs	r3, r2
 800768c:	60bb      	str	r3, [r7, #8]
      tmp++;
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	3301      	adds	r3, #1
 8007692:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007694:	693b      	ldr	r3, [r7, #16]
 8007696:	3b01      	subs	r3, #1
 8007698:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	f107 0208 	add.w	r2, r7, #8
 80076a2:	4611      	mov	r1, r2
 80076a4:	4618      	mov	r0, r3
 80076a6:	f001 ff1f 	bl	80094e8 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 80076aa:	697b      	ldr	r3, [r7, #20]
 80076ac:	3301      	adds	r3, #1
 80076ae:	617b      	str	r3, [r7, #20]
 80076b0:	697b      	ldr	r3, [r7, #20]
 80076b2:	2b07      	cmp	r3, #7
 80076b4:	d9c4      	bls.n	8007640 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	68fa      	ldr	r2, [r7, #12]
 80076ba:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	693a      	ldr	r2, [r7, #16]
 80076c0:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 80076c2:	bf00      	nop
 80076c4:	3718      	adds	r7, #24
 80076c6:	46bd      	mov	sp, r7
 80076c8:	bd80      	pop	{r7, pc}

080076ca <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80076ca:	b580      	push	{r7, lr}
 80076cc:	b082      	sub	sp, #8
 80076ce:	af00      	add	r7, sp, #0
 80076d0:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d101      	bne.n	80076dc <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80076d8:	2301      	movs	r3, #1
 80076da:	e07b      	b.n	80077d4 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d108      	bne.n	80076f6 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	685b      	ldr	r3, [r3, #4]
 80076e8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80076ec:	d009      	beq.n	8007702 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	2200      	movs	r2, #0
 80076f2:	61da      	str	r2, [r3, #28]
 80076f4:	e005      	b.n	8007702 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	2200      	movs	r2, #0
 80076fa:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2200      	movs	r2, #0
 8007700:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	2200      	movs	r2, #0
 8007706:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800770e:	b2db      	uxtb	r3, r3
 8007710:	2b00      	cmp	r3, #0
 8007712:	d106      	bne.n	8007722 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2200      	movs	r2, #0
 8007718:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800771c:	6878      	ldr	r0, [r7, #4]
 800771e:	f7f9 fe0b 	bl	8001338 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	2202      	movs	r2, #2
 8007726:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	681a      	ldr	r2, [r3, #0]
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007738:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	685b      	ldr	r3, [r3, #4]
 800773e:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	689b      	ldr	r3, [r3, #8]
 8007746:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800774a:	431a      	orrs	r2, r3
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	68db      	ldr	r3, [r3, #12]
 8007750:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007754:	431a      	orrs	r2, r3
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	691b      	ldr	r3, [r3, #16]
 800775a:	f003 0302 	and.w	r3, r3, #2
 800775e:	431a      	orrs	r2, r3
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	695b      	ldr	r3, [r3, #20]
 8007764:	f003 0301 	and.w	r3, r3, #1
 8007768:	431a      	orrs	r2, r3
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	699b      	ldr	r3, [r3, #24]
 800776e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007772:	431a      	orrs	r2, r3
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	69db      	ldr	r3, [r3, #28]
 8007778:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800777c:	431a      	orrs	r2, r3
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	6a1b      	ldr	r3, [r3, #32]
 8007782:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007786:	ea42 0103 	orr.w	r1, r2, r3
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800778e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	430a      	orrs	r2, r1
 8007798:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	699b      	ldr	r3, [r3, #24]
 800779e:	0c1b      	lsrs	r3, r3, #16
 80077a0:	f003 0104 	and.w	r1, r3, #4
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077a8:	f003 0210 	and.w	r2, r3, #16
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	430a      	orrs	r2, r1
 80077b2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	69da      	ldr	r2, [r3, #28]
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80077c2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2200      	movs	r2, #0
 80077c8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	2201      	movs	r2, #1
 80077ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80077d2:	2300      	movs	r3, #0
}
 80077d4:	4618      	mov	r0, r3
 80077d6:	3708      	adds	r7, #8
 80077d8:	46bd      	mov	sp, r7
 80077da:	bd80      	pop	{r7, pc}

080077dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b082      	sub	sp, #8
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d101      	bne.n	80077ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80077ea:	2301      	movs	r3, #1
 80077ec:	e041      	b.n	8007872 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077f4:	b2db      	uxtb	r3, r3
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d106      	bne.n	8007808 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	2200      	movs	r2, #0
 80077fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007802:	6878      	ldr	r0, [r7, #4]
 8007804:	f7fa f9d0 	bl	8001ba8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2202      	movs	r2, #2
 800780c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681a      	ldr	r2, [r3, #0]
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	3304      	adds	r3, #4
 8007818:	4619      	mov	r1, r3
 800781a:	4610      	mov	r0, r2
 800781c:	f000 fb4a 	bl	8007eb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2201      	movs	r2, #1
 8007824:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2201      	movs	r2, #1
 800782c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2201      	movs	r2, #1
 8007834:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2201      	movs	r2, #1
 800783c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2201      	movs	r2, #1
 8007844:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2201      	movs	r2, #1
 800784c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2201      	movs	r2, #1
 8007854:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2201      	movs	r2, #1
 800785c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2201      	movs	r2, #1
 8007864:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2201      	movs	r2, #1
 800786c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007870:	2300      	movs	r3, #0
}
 8007872:	4618      	mov	r0, r3
 8007874:	3708      	adds	r7, #8
 8007876:	46bd      	mov	sp, r7
 8007878:	bd80      	pop	{r7, pc}

0800787a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800787a:	b580      	push	{r7, lr}
 800787c:	b082      	sub	sp, #8
 800787e:	af00      	add	r7, sp, #0
 8007880:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d101      	bne.n	800788c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007888:	2301      	movs	r3, #1
 800788a:	e041      	b.n	8007910 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007892:	b2db      	uxtb	r3, r3
 8007894:	2b00      	cmp	r3, #0
 8007896:	d106      	bne.n	80078a6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	2200      	movs	r2, #0
 800789c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80078a0:	6878      	ldr	r0, [r7, #4]
 80078a2:	f000 f839 	bl	8007918 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	2202      	movs	r2, #2
 80078aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681a      	ldr	r2, [r3, #0]
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	3304      	adds	r3, #4
 80078b6:	4619      	mov	r1, r3
 80078b8:	4610      	mov	r0, r2
 80078ba:	f000 fafb 	bl	8007eb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	2201      	movs	r2, #1
 80078c2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2201      	movs	r2, #1
 80078ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	2201      	movs	r2, #1
 80078d2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	2201      	movs	r2, #1
 80078da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	2201      	movs	r2, #1
 80078e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	2201      	movs	r2, #1
 80078ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	2201      	movs	r2, #1
 80078f2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	2201      	movs	r2, #1
 80078fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	2201      	movs	r2, #1
 8007902:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	2201      	movs	r2, #1
 800790a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800790e:	2300      	movs	r3, #0
}
 8007910:	4618      	mov	r0, r3
 8007912:	3708      	adds	r7, #8
 8007914:	46bd      	mov	sp, r7
 8007916:	bd80      	pop	{r7, pc}

08007918 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007918:	b480      	push	{r7}
 800791a:	b083      	sub	sp, #12
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007920:	bf00      	nop
 8007922:	370c      	adds	r7, #12
 8007924:	46bd      	mov	sp, r7
 8007926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792a:	4770      	bx	lr

0800792c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800792c:	b580      	push	{r7, lr}
 800792e:	b082      	sub	sp, #8
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	691b      	ldr	r3, [r3, #16]
 800793a:	f003 0302 	and.w	r3, r3, #2
 800793e:	2b02      	cmp	r3, #2
 8007940:	d122      	bne.n	8007988 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	68db      	ldr	r3, [r3, #12]
 8007948:	f003 0302 	and.w	r3, r3, #2
 800794c:	2b02      	cmp	r3, #2
 800794e:	d11b      	bne.n	8007988 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	f06f 0202 	mvn.w	r2, #2
 8007958:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	2201      	movs	r2, #1
 800795e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	699b      	ldr	r3, [r3, #24]
 8007966:	f003 0303 	and.w	r3, r3, #3
 800796a:	2b00      	cmp	r3, #0
 800796c:	d003      	beq.n	8007976 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800796e:	6878      	ldr	r0, [r7, #4]
 8007970:	f000 fa81 	bl	8007e76 <HAL_TIM_IC_CaptureCallback>
 8007974:	e005      	b.n	8007982 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007976:	6878      	ldr	r0, [r7, #4]
 8007978:	f000 fa73 	bl	8007e62 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800797c:	6878      	ldr	r0, [r7, #4]
 800797e:	f000 fa84 	bl	8007e8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	2200      	movs	r2, #0
 8007986:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	691b      	ldr	r3, [r3, #16]
 800798e:	f003 0304 	and.w	r3, r3, #4
 8007992:	2b04      	cmp	r3, #4
 8007994:	d122      	bne.n	80079dc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	68db      	ldr	r3, [r3, #12]
 800799c:	f003 0304 	and.w	r3, r3, #4
 80079a0:	2b04      	cmp	r3, #4
 80079a2:	d11b      	bne.n	80079dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f06f 0204 	mvn.w	r2, #4
 80079ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	2202      	movs	r2, #2
 80079b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	699b      	ldr	r3, [r3, #24]
 80079ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d003      	beq.n	80079ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80079c2:	6878      	ldr	r0, [r7, #4]
 80079c4:	f000 fa57 	bl	8007e76 <HAL_TIM_IC_CaptureCallback>
 80079c8:	e005      	b.n	80079d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80079ca:	6878      	ldr	r0, [r7, #4]
 80079cc:	f000 fa49 	bl	8007e62 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80079d0:	6878      	ldr	r0, [r7, #4]
 80079d2:	f000 fa5a 	bl	8007e8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	2200      	movs	r2, #0
 80079da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	691b      	ldr	r3, [r3, #16]
 80079e2:	f003 0308 	and.w	r3, r3, #8
 80079e6:	2b08      	cmp	r3, #8
 80079e8:	d122      	bne.n	8007a30 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	68db      	ldr	r3, [r3, #12]
 80079f0:	f003 0308 	and.w	r3, r3, #8
 80079f4:	2b08      	cmp	r3, #8
 80079f6:	d11b      	bne.n	8007a30 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	f06f 0208 	mvn.w	r2, #8
 8007a00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	2204      	movs	r2, #4
 8007a06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	69db      	ldr	r3, [r3, #28]
 8007a0e:	f003 0303 	and.w	r3, r3, #3
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d003      	beq.n	8007a1e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a16:	6878      	ldr	r0, [r7, #4]
 8007a18:	f000 fa2d 	bl	8007e76 <HAL_TIM_IC_CaptureCallback>
 8007a1c:	e005      	b.n	8007a2a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a1e:	6878      	ldr	r0, [r7, #4]
 8007a20:	f000 fa1f 	bl	8007e62 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a24:	6878      	ldr	r0, [r7, #4]
 8007a26:	f000 fa30 	bl	8007e8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	691b      	ldr	r3, [r3, #16]
 8007a36:	f003 0310 	and.w	r3, r3, #16
 8007a3a:	2b10      	cmp	r3, #16
 8007a3c:	d122      	bne.n	8007a84 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	68db      	ldr	r3, [r3, #12]
 8007a44:	f003 0310 	and.w	r3, r3, #16
 8007a48:	2b10      	cmp	r3, #16
 8007a4a:	d11b      	bne.n	8007a84 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	f06f 0210 	mvn.w	r2, #16
 8007a54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	2208      	movs	r2, #8
 8007a5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	69db      	ldr	r3, [r3, #28]
 8007a62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d003      	beq.n	8007a72 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a6a:	6878      	ldr	r0, [r7, #4]
 8007a6c:	f000 fa03 	bl	8007e76 <HAL_TIM_IC_CaptureCallback>
 8007a70:	e005      	b.n	8007a7e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a72:	6878      	ldr	r0, [r7, #4]
 8007a74:	f000 f9f5 	bl	8007e62 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a78:	6878      	ldr	r0, [r7, #4]
 8007a7a:	f000 fa06 	bl	8007e8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	2200      	movs	r2, #0
 8007a82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	691b      	ldr	r3, [r3, #16]
 8007a8a:	f003 0301 	and.w	r3, r3, #1
 8007a8e:	2b01      	cmp	r3, #1
 8007a90:	d10e      	bne.n	8007ab0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	68db      	ldr	r3, [r3, #12]
 8007a98:	f003 0301 	and.w	r3, r3, #1
 8007a9c:	2b01      	cmp	r3, #1
 8007a9e:	d107      	bne.n	8007ab0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	f06f 0201 	mvn.w	r2, #1
 8007aa8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007aaa:	6878      	ldr	r0, [r7, #4]
 8007aac:	f000 f9cf 	bl	8007e4e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	691b      	ldr	r3, [r3, #16]
 8007ab6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007aba:	2b80      	cmp	r3, #128	; 0x80
 8007abc:	d10e      	bne.n	8007adc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	68db      	ldr	r3, [r3, #12]
 8007ac4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ac8:	2b80      	cmp	r3, #128	; 0x80
 8007aca:	d107      	bne.n	8007adc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007ad4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007ad6:	6878      	ldr	r0, [r7, #4]
 8007ad8:	f000 fd5c 	bl	8008594 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	691b      	ldr	r3, [r3, #16]
 8007ae2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ae6:	2b40      	cmp	r3, #64	; 0x40
 8007ae8:	d10e      	bne.n	8007b08 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	68db      	ldr	r3, [r3, #12]
 8007af0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007af4:	2b40      	cmp	r3, #64	; 0x40
 8007af6:	d107      	bne.n	8007b08 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007b00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007b02:	6878      	ldr	r0, [r7, #4]
 8007b04:	f000 f9cb 	bl	8007e9e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	691b      	ldr	r3, [r3, #16]
 8007b0e:	f003 0320 	and.w	r3, r3, #32
 8007b12:	2b20      	cmp	r3, #32
 8007b14:	d10e      	bne.n	8007b34 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	68db      	ldr	r3, [r3, #12]
 8007b1c:	f003 0320 	and.w	r3, r3, #32
 8007b20:	2b20      	cmp	r3, #32
 8007b22:	d107      	bne.n	8007b34 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	f06f 0220 	mvn.w	r2, #32
 8007b2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007b2e:	6878      	ldr	r0, [r7, #4]
 8007b30:	f000 fd26 	bl	8008580 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007b34:	bf00      	nop
 8007b36:	3708      	adds	r7, #8
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	bd80      	pop	{r7, pc}

08007b3c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b086      	sub	sp, #24
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	60f8      	str	r0, [r7, #12]
 8007b44:	60b9      	str	r1, [r7, #8]
 8007b46:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007b48:	2300      	movs	r3, #0
 8007b4a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b52:	2b01      	cmp	r3, #1
 8007b54:	d101      	bne.n	8007b5a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007b56:	2302      	movs	r3, #2
 8007b58:	e0ae      	b.n	8007cb8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	2201      	movs	r2, #1
 8007b5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	2b0c      	cmp	r3, #12
 8007b66:	f200 809f 	bhi.w	8007ca8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007b6a:	a201      	add	r2, pc, #4	; (adr r2, 8007b70 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007b6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b70:	08007ba5 	.word	0x08007ba5
 8007b74:	08007ca9 	.word	0x08007ca9
 8007b78:	08007ca9 	.word	0x08007ca9
 8007b7c:	08007ca9 	.word	0x08007ca9
 8007b80:	08007be5 	.word	0x08007be5
 8007b84:	08007ca9 	.word	0x08007ca9
 8007b88:	08007ca9 	.word	0x08007ca9
 8007b8c:	08007ca9 	.word	0x08007ca9
 8007b90:	08007c27 	.word	0x08007c27
 8007b94:	08007ca9 	.word	0x08007ca9
 8007b98:	08007ca9 	.word	0x08007ca9
 8007b9c:	08007ca9 	.word	0x08007ca9
 8007ba0:	08007c67 	.word	0x08007c67
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	68b9      	ldr	r1, [r7, #8]
 8007baa:	4618      	mov	r0, r3
 8007bac:	f000 fa22 	bl	8007ff4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	699a      	ldr	r2, [r3, #24]
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	f042 0208 	orr.w	r2, r2, #8
 8007bbe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	699a      	ldr	r2, [r3, #24]
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	f022 0204 	bic.w	r2, r2, #4
 8007bce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	6999      	ldr	r1, [r3, #24]
 8007bd6:	68bb      	ldr	r3, [r7, #8]
 8007bd8:	691a      	ldr	r2, [r3, #16]
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	430a      	orrs	r2, r1
 8007be0:	619a      	str	r2, [r3, #24]
      break;
 8007be2:	e064      	b.n	8007cae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	68b9      	ldr	r1, [r7, #8]
 8007bea:	4618      	mov	r0, r3
 8007bec:	f000 fa72 	bl	80080d4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	699a      	ldr	r2, [r3, #24]
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007bfe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	699a      	ldr	r2, [r3, #24]
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007c0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	6999      	ldr	r1, [r3, #24]
 8007c16:	68bb      	ldr	r3, [r7, #8]
 8007c18:	691b      	ldr	r3, [r3, #16]
 8007c1a:	021a      	lsls	r2, r3, #8
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	430a      	orrs	r2, r1
 8007c22:	619a      	str	r2, [r3, #24]
      break;
 8007c24:	e043      	b.n	8007cae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	68b9      	ldr	r1, [r7, #8]
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	f000 fac7 	bl	80081c0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	69da      	ldr	r2, [r3, #28]
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	f042 0208 	orr.w	r2, r2, #8
 8007c40:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	69da      	ldr	r2, [r3, #28]
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	f022 0204 	bic.w	r2, r2, #4
 8007c50:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	69d9      	ldr	r1, [r3, #28]
 8007c58:	68bb      	ldr	r3, [r7, #8]
 8007c5a:	691a      	ldr	r2, [r3, #16]
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	430a      	orrs	r2, r1
 8007c62:	61da      	str	r2, [r3, #28]
      break;
 8007c64:	e023      	b.n	8007cae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	68b9      	ldr	r1, [r7, #8]
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	f000 fb1b 	bl	80082a8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	69da      	ldr	r2, [r3, #28]
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007c80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	69da      	ldr	r2, [r3, #28]
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007c90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	69d9      	ldr	r1, [r3, #28]
 8007c98:	68bb      	ldr	r3, [r7, #8]
 8007c9a:	691b      	ldr	r3, [r3, #16]
 8007c9c:	021a      	lsls	r2, r3, #8
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	430a      	orrs	r2, r1
 8007ca4:	61da      	str	r2, [r3, #28]
      break;
 8007ca6:	e002      	b.n	8007cae <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007ca8:	2301      	movs	r3, #1
 8007caa:	75fb      	strb	r3, [r7, #23]
      break;
 8007cac:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007cb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8007cb8:	4618      	mov	r0, r3
 8007cba:	3718      	adds	r7, #24
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	bd80      	pop	{r7, pc}

08007cc0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b084      	sub	sp, #16
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
 8007cc8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007cca:	2300      	movs	r3, #0
 8007ccc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007cd4:	2b01      	cmp	r3, #1
 8007cd6:	d101      	bne.n	8007cdc <HAL_TIM_ConfigClockSource+0x1c>
 8007cd8:	2302      	movs	r3, #2
 8007cda:	e0b4      	b.n	8007e46 <HAL_TIM_ConfigClockSource+0x186>
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2201      	movs	r2, #1
 8007ce0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2202      	movs	r2, #2
 8007ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	689b      	ldr	r3, [r3, #8]
 8007cf2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007cf4:	68bb      	ldr	r3, [r7, #8]
 8007cf6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007cfa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007cfc:	68bb      	ldr	r3, [r7, #8]
 8007cfe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007d02:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	68ba      	ldr	r2, [r7, #8]
 8007d0a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007d0c:	683b      	ldr	r3, [r7, #0]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d14:	d03e      	beq.n	8007d94 <HAL_TIM_ConfigClockSource+0xd4>
 8007d16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d1a:	f200 8087 	bhi.w	8007e2c <HAL_TIM_ConfigClockSource+0x16c>
 8007d1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d22:	f000 8086 	beq.w	8007e32 <HAL_TIM_ConfigClockSource+0x172>
 8007d26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d2a:	d87f      	bhi.n	8007e2c <HAL_TIM_ConfigClockSource+0x16c>
 8007d2c:	2b70      	cmp	r3, #112	; 0x70
 8007d2e:	d01a      	beq.n	8007d66 <HAL_TIM_ConfigClockSource+0xa6>
 8007d30:	2b70      	cmp	r3, #112	; 0x70
 8007d32:	d87b      	bhi.n	8007e2c <HAL_TIM_ConfigClockSource+0x16c>
 8007d34:	2b60      	cmp	r3, #96	; 0x60
 8007d36:	d050      	beq.n	8007dda <HAL_TIM_ConfigClockSource+0x11a>
 8007d38:	2b60      	cmp	r3, #96	; 0x60
 8007d3a:	d877      	bhi.n	8007e2c <HAL_TIM_ConfigClockSource+0x16c>
 8007d3c:	2b50      	cmp	r3, #80	; 0x50
 8007d3e:	d03c      	beq.n	8007dba <HAL_TIM_ConfigClockSource+0xfa>
 8007d40:	2b50      	cmp	r3, #80	; 0x50
 8007d42:	d873      	bhi.n	8007e2c <HAL_TIM_ConfigClockSource+0x16c>
 8007d44:	2b40      	cmp	r3, #64	; 0x40
 8007d46:	d058      	beq.n	8007dfa <HAL_TIM_ConfigClockSource+0x13a>
 8007d48:	2b40      	cmp	r3, #64	; 0x40
 8007d4a:	d86f      	bhi.n	8007e2c <HAL_TIM_ConfigClockSource+0x16c>
 8007d4c:	2b30      	cmp	r3, #48	; 0x30
 8007d4e:	d064      	beq.n	8007e1a <HAL_TIM_ConfigClockSource+0x15a>
 8007d50:	2b30      	cmp	r3, #48	; 0x30
 8007d52:	d86b      	bhi.n	8007e2c <HAL_TIM_ConfigClockSource+0x16c>
 8007d54:	2b20      	cmp	r3, #32
 8007d56:	d060      	beq.n	8007e1a <HAL_TIM_ConfigClockSource+0x15a>
 8007d58:	2b20      	cmp	r3, #32
 8007d5a:	d867      	bhi.n	8007e2c <HAL_TIM_ConfigClockSource+0x16c>
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d05c      	beq.n	8007e1a <HAL_TIM_ConfigClockSource+0x15a>
 8007d60:	2b10      	cmp	r3, #16
 8007d62:	d05a      	beq.n	8007e1a <HAL_TIM_ConfigClockSource+0x15a>
 8007d64:	e062      	b.n	8007e2c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	6818      	ldr	r0, [r3, #0]
 8007d6a:	683b      	ldr	r3, [r7, #0]
 8007d6c:	6899      	ldr	r1, [r3, #8]
 8007d6e:	683b      	ldr	r3, [r7, #0]
 8007d70:	685a      	ldr	r2, [r3, #4]
 8007d72:	683b      	ldr	r3, [r7, #0]
 8007d74:	68db      	ldr	r3, [r3, #12]
 8007d76:	f000 fb67 	bl	8008448 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	689b      	ldr	r3, [r3, #8]
 8007d80:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007d82:	68bb      	ldr	r3, [r7, #8]
 8007d84:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007d88:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	68ba      	ldr	r2, [r7, #8]
 8007d90:	609a      	str	r2, [r3, #8]
      break;
 8007d92:	e04f      	b.n	8007e34 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	6818      	ldr	r0, [r3, #0]
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	6899      	ldr	r1, [r3, #8]
 8007d9c:	683b      	ldr	r3, [r7, #0]
 8007d9e:	685a      	ldr	r2, [r3, #4]
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	68db      	ldr	r3, [r3, #12]
 8007da4:	f000 fb50 	bl	8008448 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	689a      	ldr	r2, [r3, #8]
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007db6:	609a      	str	r2, [r3, #8]
      break;
 8007db8:	e03c      	b.n	8007e34 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	6818      	ldr	r0, [r3, #0]
 8007dbe:	683b      	ldr	r3, [r7, #0]
 8007dc0:	6859      	ldr	r1, [r3, #4]
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	68db      	ldr	r3, [r3, #12]
 8007dc6:	461a      	mov	r2, r3
 8007dc8:	f000 fac4 	bl	8008354 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	2150      	movs	r1, #80	; 0x50
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	f000 fb1d 	bl	8008412 <TIM_ITRx_SetConfig>
      break;
 8007dd8:	e02c      	b.n	8007e34 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	6818      	ldr	r0, [r3, #0]
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	6859      	ldr	r1, [r3, #4]
 8007de2:	683b      	ldr	r3, [r7, #0]
 8007de4:	68db      	ldr	r3, [r3, #12]
 8007de6:	461a      	mov	r2, r3
 8007de8:	f000 fae3 	bl	80083b2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	2160      	movs	r1, #96	; 0x60
 8007df2:	4618      	mov	r0, r3
 8007df4:	f000 fb0d 	bl	8008412 <TIM_ITRx_SetConfig>
      break;
 8007df8:	e01c      	b.n	8007e34 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	6818      	ldr	r0, [r3, #0]
 8007dfe:	683b      	ldr	r3, [r7, #0]
 8007e00:	6859      	ldr	r1, [r3, #4]
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	68db      	ldr	r3, [r3, #12]
 8007e06:	461a      	mov	r2, r3
 8007e08:	f000 faa4 	bl	8008354 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	2140      	movs	r1, #64	; 0x40
 8007e12:	4618      	mov	r0, r3
 8007e14:	f000 fafd 	bl	8008412 <TIM_ITRx_SetConfig>
      break;
 8007e18:	e00c      	b.n	8007e34 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681a      	ldr	r2, [r3, #0]
 8007e1e:	683b      	ldr	r3, [r7, #0]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	4619      	mov	r1, r3
 8007e24:	4610      	mov	r0, r2
 8007e26:	f000 faf4 	bl	8008412 <TIM_ITRx_SetConfig>
      break;
 8007e2a:	e003      	b.n	8007e34 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007e2c:	2301      	movs	r3, #1
 8007e2e:	73fb      	strb	r3, [r7, #15]
      break;
 8007e30:	e000      	b.n	8007e34 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007e32:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2201      	movs	r2, #1
 8007e38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	2200      	movs	r2, #0
 8007e40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007e44:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e46:	4618      	mov	r0, r3
 8007e48:	3710      	adds	r7, #16
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	bd80      	pop	{r7, pc}

08007e4e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007e4e:	b480      	push	{r7}
 8007e50:	b083      	sub	sp, #12
 8007e52:	af00      	add	r7, sp, #0
 8007e54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007e56:	bf00      	nop
 8007e58:	370c      	adds	r7, #12
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e60:	4770      	bx	lr

08007e62 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007e62:	b480      	push	{r7}
 8007e64:	b083      	sub	sp, #12
 8007e66:	af00      	add	r7, sp, #0
 8007e68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007e6a:	bf00      	nop
 8007e6c:	370c      	adds	r7, #12
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e74:	4770      	bx	lr

08007e76 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007e76:	b480      	push	{r7}
 8007e78:	b083      	sub	sp, #12
 8007e7a:	af00      	add	r7, sp, #0
 8007e7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007e7e:	bf00      	nop
 8007e80:	370c      	adds	r7, #12
 8007e82:	46bd      	mov	sp, r7
 8007e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e88:	4770      	bx	lr

08007e8a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007e8a:	b480      	push	{r7}
 8007e8c:	b083      	sub	sp, #12
 8007e8e:	af00      	add	r7, sp, #0
 8007e90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007e92:	bf00      	nop
 8007e94:	370c      	adds	r7, #12
 8007e96:	46bd      	mov	sp, r7
 8007e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9c:	4770      	bx	lr

08007e9e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007e9e:	b480      	push	{r7}
 8007ea0:	b083      	sub	sp, #12
 8007ea2:	af00      	add	r7, sp, #0
 8007ea4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007ea6:	bf00      	nop
 8007ea8:	370c      	adds	r7, #12
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb0:	4770      	bx	lr
	...

08007eb4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007eb4:	b480      	push	{r7}
 8007eb6:	b085      	sub	sp, #20
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
 8007ebc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	4a40      	ldr	r2, [pc, #256]	; (8007fc8 <TIM_Base_SetConfig+0x114>)
 8007ec8:	4293      	cmp	r3, r2
 8007eca:	d013      	beq.n	8007ef4 <TIM_Base_SetConfig+0x40>
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ed2:	d00f      	beq.n	8007ef4 <TIM_Base_SetConfig+0x40>
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	4a3d      	ldr	r2, [pc, #244]	; (8007fcc <TIM_Base_SetConfig+0x118>)
 8007ed8:	4293      	cmp	r3, r2
 8007eda:	d00b      	beq.n	8007ef4 <TIM_Base_SetConfig+0x40>
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	4a3c      	ldr	r2, [pc, #240]	; (8007fd0 <TIM_Base_SetConfig+0x11c>)
 8007ee0:	4293      	cmp	r3, r2
 8007ee2:	d007      	beq.n	8007ef4 <TIM_Base_SetConfig+0x40>
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	4a3b      	ldr	r2, [pc, #236]	; (8007fd4 <TIM_Base_SetConfig+0x120>)
 8007ee8:	4293      	cmp	r3, r2
 8007eea:	d003      	beq.n	8007ef4 <TIM_Base_SetConfig+0x40>
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	4a3a      	ldr	r2, [pc, #232]	; (8007fd8 <TIM_Base_SetConfig+0x124>)
 8007ef0:	4293      	cmp	r3, r2
 8007ef2:	d108      	bne.n	8007f06 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007efa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007efc:	683b      	ldr	r3, [r7, #0]
 8007efe:	685b      	ldr	r3, [r3, #4]
 8007f00:	68fa      	ldr	r2, [r7, #12]
 8007f02:	4313      	orrs	r3, r2
 8007f04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	4a2f      	ldr	r2, [pc, #188]	; (8007fc8 <TIM_Base_SetConfig+0x114>)
 8007f0a:	4293      	cmp	r3, r2
 8007f0c:	d02b      	beq.n	8007f66 <TIM_Base_SetConfig+0xb2>
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f14:	d027      	beq.n	8007f66 <TIM_Base_SetConfig+0xb2>
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	4a2c      	ldr	r2, [pc, #176]	; (8007fcc <TIM_Base_SetConfig+0x118>)
 8007f1a:	4293      	cmp	r3, r2
 8007f1c:	d023      	beq.n	8007f66 <TIM_Base_SetConfig+0xb2>
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	4a2b      	ldr	r2, [pc, #172]	; (8007fd0 <TIM_Base_SetConfig+0x11c>)
 8007f22:	4293      	cmp	r3, r2
 8007f24:	d01f      	beq.n	8007f66 <TIM_Base_SetConfig+0xb2>
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	4a2a      	ldr	r2, [pc, #168]	; (8007fd4 <TIM_Base_SetConfig+0x120>)
 8007f2a:	4293      	cmp	r3, r2
 8007f2c:	d01b      	beq.n	8007f66 <TIM_Base_SetConfig+0xb2>
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	4a29      	ldr	r2, [pc, #164]	; (8007fd8 <TIM_Base_SetConfig+0x124>)
 8007f32:	4293      	cmp	r3, r2
 8007f34:	d017      	beq.n	8007f66 <TIM_Base_SetConfig+0xb2>
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	4a28      	ldr	r2, [pc, #160]	; (8007fdc <TIM_Base_SetConfig+0x128>)
 8007f3a:	4293      	cmp	r3, r2
 8007f3c:	d013      	beq.n	8007f66 <TIM_Base_SetConfig+0xb2>
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	4a27      	ldr	r2, [pc, #156]	; (8007fe0 <TIM_Base_SetConfig+0x12c>)
 8007f42:	4293      	cmp	r3, r2
 8007f44:	d00f      	beq.n	8007f66 <TIM_Base_SetConfig+0xb2>
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	4a26      	ldr	r2, [pc, #152]	; (8007fe4 <TIM_Base_SetConfig+0x130>)
 8007f4a:	4293      	cmp	r3, r2
 8007f4c:	d00b      	beq.n	8007f66 <TIM_Base_SetConfig+0xb2>
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	4a25      	ldr	r2, [pc, #148]	; (8007fe8 <TIM_Base_SetConfig+0x134>)
 8007f52:	4293      	cmp	r3, r2
 8007f54:	d007      	beq.n	8007f66 <TIM_Base_SetConfig+0xb2>
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	4a24      	ldr	r2, [pc, #144]	; (8007fec <TIM_Base_SetConfig+0x138>)
 8007f5a:	4293      	cmp	r3, r2
 8007f5c:	d003      	beq.n	8007f66 <TIM_Base_SetConfig+0xb2>
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	4a23      	ldr	r2, [pc, #140]	; (8007ff0 <TIM_Base_SetConfig+0x13c>)
 8007f62:	4293      	cmp	r3, r2
 8007f64:	d108      	bne.n	8007f78 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007f6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007f6e:	683b      	ldr	r3, [r7, #0]
 8007f70:	68db      	ldr	r3, [r3, #12]
 8007f72:	68fa      	ldr	r2, [r7, #12]
 8007f74:	4313      	orrs	r3, r2
 8007f76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007f7e:	683b      	ldr	r3, [r7, #0]
 8007f80:	695b      	ldr	r3, [r3, #20]
 8007f82:	4313      	orrs	r3, r2
 8007f84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	68fa      	ldr	r2, [r7, #12]
 8007f8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	689a      	ldr	r2, [r3, #8]
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007f94:	683b      	ldr	r3, [r7, #0]
 8007f96:	681a      	ldr	r2, [r3, #0]
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	4a0a      	ldr	r2, [pc, #40]	; (8007fc8 <TIM_Base_SetConfig+0x114>)
 8007fa0:	4293      	cmp	r3, r2
 8007fa2:	d003      	beq.n	8007fac <TIM_Base_SetConfig+0xf8>
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	4a0c      	ldr	r2, [pc, #48]	; (8007fd8 <TIM_Base_SetConfig+0x124>)
 8007fa8:	4293      	cmp	r3, r2
 8007faa:	d103      	bne.n	8007fb4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007fac:	683b      	ldr	r3, [r7, #0]
 8007fae:	691a      	ldr	r2, [r3, #16]
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2201      	movs	r2, #1
 8007fb8:	615a      	str	r2, [r3, #20]
}
 8007fba:	bf00      	nop
 8007fbc:	3714      	adds	r7, #20
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc4:	4770      	bx	lr
 8007fc6:	bf00      	nop
 8007fc8:	40010000 	.word	0x40010000
 8007fcc:	40000400 	.word	0x40000400
 8007fd0:	40000800 	.word	0x40000800
 8007fd4:	40000c00 	.word	0x40000c00
 8007fd8:	40010400 	.word	0x40010400
 8007fdc:	40014000 	.word	0x40014000
 8007fe0:	40014400 	.word	0x40014400
 8007fe4:	40014800 	.word	0x40014800
 8007fe8:	40001800 	.word	0x40001800
 8007fec:	40001c00 	.word	0x40001c00
 8007ff0:	40002000 	.word	0x40002000

08007ff4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007ff4:	b480      	push	{r7}
 8007ff6:	b087      	sub	sp, #28
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
 8007ffc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	6a1b      	ldr	r3, [r3, #32]
 8008002:	f023 0201 	bic.w	r2, r3, #1
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	6a1b      	ldr	r3, [r3, #32]
 800800e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	685b      	ldr	r3, [r3, #4]
 8008014:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	699b      	ldr	r3, [r3, #24]
 800801a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008022:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	f023 0303 	bic.w	r3, r3, #3
 800802a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800802c:	683b      	ldr	r3, [r7, #0]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	68fa      	ldr	r2, [r7, #12]
 8008032:	4313      	orrs	r3, r2
 8008034:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008036:	697b      	ldr	r3, [r7, #20]
 8008038:	f023 0302 	bic.w	r3, r3, #2
 800803c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800803e:	683b      	ldr	r3, [r7, #0]
 8008040:	689b      	ldr	r3, [r3, #8]
 8008042:	697a      	ldr	r2, [r7, #20]
 8008044:	4313      	orrs	r3, r2
 8008046:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	4a20      	ldr	r2, [pc, #128]	; (80080cc <TIM_OC1_SetConfig+0xd8>)
 800804c:	4293      	cmp	r3, r2
 800804e:	d003      	beq.n	8008058 <TIM_OC1_SetConfig+0x64>
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	4a1f      	ldr	r2, [pc, #124]	; (80080d0 <TIM_OC1_SetConfig+0xdc>)
 8008054:	4293      	cmp	r3, r2
 8008056:	d10c      	bne.n	8008072 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008058:	697b      	ldr	r3, [r7, #20]
 800805a:	f023 0308 	bic.w	r3, r3, #8
 800805e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	68db      	ldr	r3, [r3, #12]
 8008064:	697a      	ldr	r2, [r7, #20]
 8008066:	4313      	orrs	r3, r2
 8008068:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800806a:	697b      	ldr	r3, [r7, #20]
 800806c:	f023 0304 	bic.w	r3, r3, #4
 8008070:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	4a15      	ldr	r2, [pc, #84]	; (80080cc <TIM_OC1_SetConfig+0xd8>)
 8008076:	4293      	cmp	r3, r2
 8008078:	d003      	beq.n	8008082 <TIM_OC1_SetConfig+0x8e>
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	4a14      	ldr	r2, [pc, #80]	; (80080d0 <TIM_OC1_SetConfig+0xdc>)
 800807e:	4293      	cmp	r3, r2
 8008080:	d111      	bne.n	80080a6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008082:	693b      	ldr	r3, [r7, #16]
 8008084:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008088:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800808a:	693b      	ldr	r3, [r7, #16]
 800808c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008090:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008092:	683b      	ldr	r3, [r7, #0]
 8008094:	695b      	ldr	r3, [r3, #20]
 8008096:	693a      	ldr	r2, [r7, #16]
 8008098:	4313      	orrs	r3, r2
 800809a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800809c:	683b      	ldr	r3, [r7, #0]
 800809e:	699b      	ldr	r3, [r3, #24]
 80080a0:	693a      	ldr	r2, [r7, #16]
 80080a2:	4313      	orrs	r3, r2
 80080a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	693a      	ldr	r2, [r7, #16]
 80080aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	68fa      	ldr	r2, [r7, #12]
 80080b0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80080b2:	683b      	ldr	r3, [r7, #0]
 80080b4:	685a      	ldr	r2, [r3, #4]
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	697a      	ldr	r2, [r7, #20]
 80080be:	621a      	str	r2, [r3, #32]
}
 80080c0:	bf00      	nop
 80080c2:	371c      	adds	r7, #28
 80080c4:	46bd      	mov	sp, r7
 80080c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ca:	4770      	bx	lr
 80080cc:	40010000 	.word	0x40010000
 80080d0:	40010400 	.word	0x40010400

080080d4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80080d4:	b480      	push	{r7}
 80080d6:	b087      	sub	sp, #28
 80080d8:	af00      	add	r7, sp, #0
 80080da:	6078      	str	r0, [r7, #4]
 80080dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	6a1b      	ldr	r3, [r3, #32]
 80080e2:	f023 0210 	bic.w	r2, r3, #16
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	6a1b      	ldr	r3, [r3, #32]
 80080ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	685b      	ldr	r3, [r3, #4]
 80080f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	699b      	ldr	r3, [r3, #24]
 80080fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008102:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800810a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800810c:	683b      	ldr	r3, [r7, #0]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	021b      	lsls	r3, r3, #8
 8008112:	68fa      	ldr	r2, [r7, #12]
 8008114:	4313      	orrs	r3, r2
 8008116:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008118:	697b      	ldr	r3, [r7, #20]
 800811a:	f023 0320 	bic.w	r3, r3, #32
 800811e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008120:	683b      	ldr	r3, [r7, #0]
 8008122:	689b      	ldr	r3, [r3, #8]
 8008124:	011b      	lsls	r3, r3, #4
 8008126:	697a      	ldr	r2, [r7, #20]
 8008128:	4313      	orrs	r3, r2
 800812a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	4a22      	ldr	r2, [pc, #136]	; (80081b8 <TIM_OC2_SetConfig+0xe4>)
 8008130:	4293      	cmp	r3, r2
 8008132:	d003      	beq.n	800813c <TIM_OC2_SetConfig+0x68>
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	4a21      	ldr	r2, [pc, #132]	; (80081bc <TIM_OC2_SetConfig+0xe8>)
 8008138:	4293      	cmp	r3, r2
 800813a:	d10d      	bne.n	8008158 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800813c:	697b      	ldr	r3, [r7, #20]
 800813e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008142:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	68db      	ldr	r3, [r3, #12]
 8008148:	011b      	lsls	r3, r3, #4
 800814a:	697a      	ldr	r2, [r7, #20]
 800814c:	4313      	orrs	r3, r2
 800814e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008150:	697b      	ldr	r3, [r7, #20]
 8008152:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008156:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	4a17      	ldr	r2, [pc, #92]	; (80081b8 <TIM_OC2_SetConfig+0xe4>)
 800815c:	4293      	cmp	r3, r2
 800815e:	d003      	beq.n	8008168 <TIM_OC2_SetConfig+0x94>
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	4a16      	ldr	r2, [pc, #88]	; (80081bc <TIM_OC2_SetConfig+0xe8>)
 8008164:	4293      	cmp	r3, r2
 8008166:	d113      	bne.n	8008190 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008168:	693b      	ldr	r3, [r7, #16]
 800816a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800816e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008170:	693b      	ldr	r3, [r7, #16]
 8008172:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008176:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008178:	683b      	ldr	r3, [r7, #0]
 800817a:	695b      	ldr	r3, [r3, #20]
 800817c:	009b      	lsls	r3, r3, #2
 800817e:	693a      	ldr	r2, [r7, #16]
 8008180:	4313      	orrs	r3, r2
 8008182:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008184:	683b      	ldr	r3, [r7, #0]
 8008186:	699b      	ldr	r3, [r3, #24]
 8008188:	009b      	lsls	r3, r3, #2
 800818a:	693a      	ldr	r2, [r7, #16]
 800818c:	4313      	orrs	r3, r2
 800818e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	693a      	ldr	r2, [r7, #16]
 8008194:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	68fa      	ldr	r2, [r7, #12]
 800819a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800819c:	683b      	ldr	r3, [r7, #0]
 800819e:	685a      	ldr	r2, [r3, #4]
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	697a      	ldr	r2, [r7, #20]
 80081a8:	621a      	str	r2, [r3, #32]
}
 80081aa:	bf00      	nop
 80081ac:	371c      	adds	r7, #28
 80081ae:	46bd      	mov	sp, r7
 80081b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b4:	4770      	bx	lr
 80081b6:	bf00      	nop
 80081b8:	40010000 	.word	0x40010000
 80081bc:	40010400 	.word	0x40010400

080081c0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80081c0:	b480      	push	{r7}
 80081c2:	b087      	sub	sp, #28
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]
 80081c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	6a1b      	ldr	r3, [r3, #32]
 80081ce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	6a1b      	ldr	r3, [r3, #32]
 80081da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	685b      	ldr	r3, [r3, #4]
 80081e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	69db      	ldr	r3, [r3, #28]
 80081e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	f023 0303 	bic.w	r3, r3, #3
 80081f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	68fa      	ldr	r2, [r7, #12]
 80081fe:	4313      	orrs	r3, r2
 8008200:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008202:	697b      	ldr	r3, [r7, #20]
 8008204:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008208:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800820a:	683b      	ldr	r3, [r7, #0]
 800820c:	689b      	ldr	r3, [r3, #8]
 800820e:	021b      	lsls	r3, r3, #8
 8008210:	697a      	ldr	r2, [r7, #20]
 8008212:	4313      	orrs	r3, r2
 8008214:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	4a21      	ldr	r2, [pc, #132]	; (80082a0 <TIM_OC3_SetConfig+0xe0>)
 800821a:	4293      	cmp	r3, r2
 800821c:	d003      	beq.n	8008226 <TIM_OC3_SetConfig+0x66>
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	4a20      	ldr	r2, [pc, #128]	; (80082a4 <TIM_OC3_SetConfig+0xe4>)
 8008222:	4293      	cmp	r3, r2
 8008224:	d10d      	bne.n	8008242 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008226:	697b      	ldr	r3, [r7, #20]
 8008228:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800822c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800822e:	683b      	ldr	r3, [r7, #0]
 8008230:	68db      	ldr	r3, [r3, #12]
 8008232:	021b      	lsls	r3, r3, #8
 8008234:	697a      	ldr	r2, [r7, #20]
 8008236:	4313      	orrs	r3, r2
 8008238:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800823a:	697b      	ldr	r3, [r7, #20]
 800823c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008240:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	4a16      	ldr	r2, [pc, #88]	; (80082a0 <TIM_OC3_SetConfig+0xe0>)
 8008246:	4293      	cmp	r3, r2
 8008248:	d003      	beq.n	8008252 <TIM_OC3_SetConfig+0x92>
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	4a15      	ldr	r2, [pc, #84]	; (80082a4 <TIM_OC3_SetConfig+0xe4>)
 800824e:	4293      	cmp	r3, r2
 8008250:	d113      	bne.n	800827a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008252:	693b      	ldr	r3, [r7, #16]
 8008254:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008258:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800825a:	693b      	ldr	r3, [r7, #16]
 800825c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008260:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008262:	683b      	ldr	r3, [r7, #0]
 8008264:	695b      	ldr	r3, [r3, #20]
 8008266:	011b      	lsls	r3, r3, #4
 8008268:	693a      	ldr	r2, [r7, #16]
 800826a:	4313      	orrs	r3, r2
 800826c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800826e:	683b      	ldr	r3, [r7, #0]
 8008270:	699b      	ldr	r3, [r3, #24]
 8008272:	011b      	lsls	r3, r3, #4
 8008274:	693a      	ldr	r2, [r7, #16]
 8008276:	4313      	orrs	r3, r2
 8008278:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	693a      	ldr	r2, [r7, #16]
 800827e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	68fa      	ldr	r2, [r7, #12]
 8008284:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008286:	683b      	ldr	r3, [r7, #0]
 8008288:	685a      	ldr	r2, [r3, #4]
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	697a      	ldr	r2, [r7, #20]
 8008292:	621a      	str	r2, [r3, #32]
}
 8008294:	bf00      	nop
 8008296:	371c      	adds	r7, #28
 8008298:	46bd      	mov	sp, r7
 800829a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829e:	4770      	bx	lr
 80082a0:	40010000 	.word	0x40010000
 80082a4:	40010400 	.word	0x40010400

080082a8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80082a8:	b480      	push	{r7}
 80082aa:	b087      	sub	sp, #28
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]
 80082b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	6a1b      	ldr	r3, [r3, #32]
 80082b6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	6a1b      	ldr	r3, [r3, #32]
 80082c2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	685b      	ldr	r3, [r3, #4]
 80082c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	69db      	ldr	r3, [r3, #28]
 80082ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80082d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80082de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80082e0:	683b      	ldr	r3, [r7, #0]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	021b      	lsls	r3, r3, #8
 80082e6:	68fa      	ldr	r2, [r7, #12]
 80082e8:	4313      	orrs	r3, r2
 80082ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80082ec:	693b      	ldr	r3, [r7, #16]
 80082ee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80082f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80082f4:	683b      	ldr	r3, [r7, #0]
 80082f6:	689b      	ldr	r3, [r3, #8]
 80082f8:	031b      	lsls	r3, r3, #12
 80082fa:	693a      	ldr	r2, [r7, #16]
 80082fc:	4313      	orrs	r3, r2
 80082fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	4a12      	ldr	r2, [pc, #72]	; (800834c <TIM_OC4_SetConfig+0xa4>)
 8008304:	4293      	cmp	r3, r2
 8008306:	d003      	beq.n	8008310 <TIM_OC4_SetConfig+0x68>
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	4a11      	ldr	r2, [pc, #68]	; (8008350 <TIM_OC4_SetConfig+0xa8>)
 800830c:	4293      	cmp	r3, r2
 800830e:	d109      	bne.n	8008324 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008310:	697b      	ldr	r3, [r7, #20]
 8008312:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008316:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008318:	683b      	ldr	r3, [r7, #0]
 800831a:	695b      	ldr	r3, [r3, #20]
 800831c:	019b      	lsls	r3, r3, #6
 800831e:	697a      	ldr	r2, [r7, #20]
 8008320:	4313      	orrs	r3, r2
 8008322:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	697a      	ldr	r2, [r7, #20]
 8008328:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	68fa      	ldr	r2, [r7, #12]
 800832e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008330:	683b      	ldr	r3, [r7, #0]
 8008332:	685a      	ldr	r2, [r3, #4]
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	693a      	ldr	r2, [r7, #16]
 800833c:	621a      	str	r2, [r3, #32]
}
 800833e:	bf00      	nop
 8008340:	371c      	adds	r7, #28
 8008342:	46bd      	mov	sp, r7
 8008344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008348:	4770      	bx	lr
 800834a:	bf00      	nop
 800834c:	40010000 	.word	0x40010000
 8008350:	40010400 	.word	0x40010400

08008354 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008354:	b480      	push	{r7}
 8008356:	b087      	sub	sp, #28
 8008358:	af00      	add	r7, sp, #0
 800835a:	60f8      	str	r0, [r7, #12]
 800835c:	60b9      	str	r1, [r7, #8]
 800835e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	6a1b      	ldr	r3, [r3, #32]
 8008364:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	6a1b      	ldr	r3, [r3, #32]
 800836a:	f023 0201 	bic.w	r2, r3, #1
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	699b      	ldr	r3, [r3, #24]
 8008376:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008378:	693b      	ldr	r3, [r7, #16]
 800837a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800837e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	011b      	lsls	r3, r3, #4
 8008384:	693a      	ldr	r2, [r7, #16]
 8008386:	4313      	orrs	r3, r2
 8008388:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800838a:	697b      	ldr	r3, [r7, #20]
 800838c:	f023 030a 	bic.w	r3, r3, #10
 8008390:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008392:	697a      	ldr	r2, [r7, #20]
 8008394:	68bb      	ldr	r3, [r7, #8]
 8008396:	4313      	orrs	r3, r2
 8008398:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	693a      	ldr	r2, [r7, #16]
 800839e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	697a      	ldr	r2, [r7, #20]
 80083a4:	621a      	str	r2, [r3, #32]
}
 80083a6:	bf00      	nop
 80083a8:	371c      	adds	r7, #28
 80083aa:	46bd      	mov	sp, r7
 80083ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b0:	4770      	bx	lr

080083b2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80083b2:	b480      	push	{r7}
 80083b4:	b087      	sub	sp, #28
 80083b6:	af00      	add	r7, sp, #0
 80083b8:	60f8      	str	r0, [r7, #12]
 80083ba:	60b9      	str	r1, [r7, #8]
 80083bc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	6a1b      	ldr	r3, [r3, #32]
 80083c2:	f023 0210 	bic.w	r2, r3, #16
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	699b      	ldr	r3, [r3, #24]
 80083ce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	6a1b      	ldr	r3, [r3, #32]
 80083d4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80083d6:	697b      	ldr	r3, [r7, #20]
 80083d8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80083dc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	031b      	lsls	r3, r3, #12
 80083e2:	697a      	ldr	r2, [r7, #20]
 80083e4:	4313      	orrs	r3, r2
 80083e6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80083e8:	693b      	ldr	r3, [r7, #16]
 80083ea:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80083ee:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80083f0:	68bb      	ldr	r3, [r7, #8]
 80083f2:	011b      	lsls	r3, r3, #4
 80083f4:	693a      	ldr	r2, [r7, #16]
 80083f6:	4313      	orrs	r3, r2
 80083f8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	697a      	ldr	r2, [r7, #20]
 80083fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	693a      	ldr	r2, [r7, #16]
 8008404:	621a      	str	r2, [r3, #32]
}
 8008406:	bf00      	nop
 8008408:	371c      	adds	r7, #28
 800840a:	46bd      	mov	sp, r7
 800840c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008410:	4770      	bx	lr

08008412 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008412:	b480      	push	{r7}
 8008414:	b085      	sub	sp, #20
 8008416:	af00      	add	r7, sp, #0
 8008418:	6078      	str	r0, [r7, #4]
 800841a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	689b      	ldr	r3, [r3, #8]
 8008420:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008428:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800842a:	683a      	ldr	r2, [r7, #0]
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	4313      	orrs	r3, r2
 8008430:	f043 0307 	orr.w	r3, r3, #7
 8008434:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	68fa      	ldr	r2, [r7, #12]
 800843a:	609a      	str	r2, [r3, #8]
}
 800843c:	bf00      	nop
 800843e:	3714      	adds	r7, #20
 8008440:	46bd      	mov	sp, r7
 8008442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008446:	4770      	bx	lr

08008448 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008448:	b480      	push	{r7}
 800844a:	b087      	sub	sp, #28
 800844c:	af00      	add	r7, sp, #0
 800844e:	60f8      	str	r0, [r7, #12]
 8008450:	60b9      	str	r1, [r7, #8]
 8008452:	607a      	str	r2, [r7, #4]
 8008454:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	689b      	ldr	r3, [r3, #8]
 800845a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800845c:	697b      	ldr	r3, [r7, #20]
 800845e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008462:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008464:	683b      	ldr	r3, [r7, #0]
 8008466:	021a      	lsls	r2, r3, #8
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	431a      	orrs	r2, r3
 800846c:	68bb      	ldr	r3, [r7, #8]
 800846e:	4313      	orrs	r3, r2
 8008470:	697a      	ldr	r2, [r7, #20]
 8008472:	4313      	orrs	r3, r2
 8008474:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	697a      	ldr	r2, [r7, #20]
 800847a:	609a      	str	r2, [r3, #8]
}
 800847c:	bf00      	nop
 800847e:	371c      	adds	r7, #28
 8008480:	46bd      	mov	sp, r7
 8008482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008486:	4770      	bx	lr

08008488 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008488:	b480      	push	{r7}
 800848a:	b085      	sub	sp, #20
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
 8008490:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008498:	2b01      	cmp	r3, #1
 800849a:	d101      	bne.n	80084a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800849c:	2302      	movs	r3, #2
 800849e:	e05a      	b.n	8008556 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	2201      	movs	r2, #1
 80084a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	2202      	movs	r2, #2
 80084ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	685b      	ldr	r3, [r3, #4]
 80084b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	689b      	ldr	r3, [r3, #8]
 80084be:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084c6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80084c8:	683b      	ldr	r3, [r7, #0]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	68fa      	ldr	r2, [r7, #12]
 80084ce:	4313      	orrs	r3, r2
 80084d0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	68fa      	ldr	r2, [r7, #12]
 80084d8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	4a21      	ldr	r2, [pc, #132]	; (8008564 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80084e0:	4293      	cmp	r3, r2
 80084e2:	d022      	beq.n	800852a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80084ec:	d01d      	beq.n	800852a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	4a1d      	ldr	r2, [pc, #116]	; (8008568 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80084f4:	4293      	cmp	r3, r2
 80084f6:	d018      	beq.n	800852a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	4a1b      	ldr	r2, [pc, #108]	; (800856c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80084fe:	4293      	cmp	r3, r2
 8008500:	d013      	beq.n	800852a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	4a1a      	ldr	r2, [pc, #104]	; (8008570 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008508:	4293      	cmp	r3, r2
 800850a:	d00e      	beq.n	800852a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	4a18      	ldr	r2, [pc, #96]	; (8008574 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008512:	4293      	cmp	r3, r2
 8008514:	d009      	beq.n	800852a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	4a17      	ldr	r2, [pc, #92]	; (8008578 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800851c:	4293      	cmp	r3, r2
 800851e:	d004      	beq.n	800852a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	4a15      	ldr	r2, [pc, #84]	; (800857c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008526:	4293      	cmp	r3, r2
 8008528:	d10c      	bne.n	8008544 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800852a:	68bb      	ldr	r3, [r7, #8]
 800852c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008530:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008532:	683b      	ldr	r3, [r7, #0]
 8008534:	685b      	ldr	r3, [r3, #4]
 8008536:	68ba      	ldr	r2, [r7, #8]
 8008538:	4313      	orrs	r3, r2
 800853a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	68ba      	ldr	r2, [r7, #8]
 8008542:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	2201      	movs	r2, #1
 8008548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	2200      	movs	r2, #0
 8008550:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008554:	2300      	movs	r3, #0
}
 8008556:	4618      	mov	r0, r3
 8008558:	3714      	adds	r7, #20
 800855a:	46bd      	mov	sp, r7
 800855c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008560:	4770      	bx	lr
 8008562:	bf00      	nop
 8008564:	40010000 	.word	0x40010000
 8008568:	40000400 	.word	0x40000400
 800856c:	40000800 	.word	0x40000800
 8008570:	40000c00 	.word	0x40000c00
 8008574:	40010400 	.word	0x40010400
 8008578:	40014000 	.word	0x40014000
 800857c:	40001800 	.word	0x40001800

08008580 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008580:	b480      	push	{r7}
 8008582:	b083      	sub	sp, #12
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008588:	bf00      	nop
 800858a:	370c      	adds	r7, #12
 800858c:	46bd      	mov	sp, r7
 800858e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008592:	4770      	bx	lr

08008594 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008594:	b480      	push	{r7}
 8008596:	b083      	sub	sp, #12
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800859c:	bf00      	nop
 800859e:	370c      	adds	r7, #12
 80085a0:	46bd      	mov	sp, r7
 80085a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a6:	4770      	bx	lr

080085a8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80085a8:	b580      	push	{r7, lr}
 80085aa:	b082      	sub	sp, #8
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d101      	bne.n	80085ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80085b6:	2301      	movs	r3, #1
 80085b8:	e03f      	b.n	800863a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80085c0:	b2db      	uxtb	r3, r3
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d106      	bne.n	80085d4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	2200      	movs	r2, #0
 80085ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80085ce:	6878      	ldr	r0, [r7, #4]
 80085d0:	f7f9 fc86 	bl	8001ee0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	2224      	movs	r2, #36	; 0x24
 80085d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	68da      	ldr	r2, [r3, #12]
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80085ea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80085ec:	6878      	ldr	r0, [r7, #4]
 80085ee:	f000 fd7b 	bl	80090e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	691a      	ldr	r2, [r3, #16]
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008600:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	695a      	ldr	r2, [r3, #20]
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008610:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	68da      	ldr	r2, [r3, #12]
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008620:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	2200      	movs	r2, #0
 8008626:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	2220      	movs	r2, #32
 800862c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	2220      	movs	r2, #32
 8008634:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008638:	2300      	movs	r3, #0
}
 800863a:	4618      	mov	r0, r3
 800863c:	3708      	adds	r7, #8
 800863e:	46bd      	mov	sp, r7
 8008640:	bd80      	pop	{r7, pc}

08008642 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008642:	b580      	push	{r7, lr}
 8008644:	b08a      	sub	sp, #40	; 0x28
 8008646:	af02      	add	r7, sp, #8
 8008648:	60f8      	str	r0, [r7, #12]
 800864a:	60b9      	str	r1, [r7, #8]
 800864c:	603b      	str	r3, [r7, #0]
 800864e:	4613      	mov	r3, r2
 8008650:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008652:	2300      	movs	r3, #0
 8008654:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800865c:	b2db      	uxtb	r3, r3
 800865e:	2b20      	cmp	r3, #32
 8008660:	d17c      	bne.n	800875c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008662:	68bb      	ldr	r3, [r7, #8]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d002      	beq.n	800866e <HAL_UART_Transmit+0x2c>
 8008668:	88fb      	ldrh	r3, [r7, #6]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d101      	bne.n	8008672 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800866e:	2301      	movs	r3, #1
 8008670:	e075      	b.n	800875e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008678:	2b01      	cmp	r3, #1
 800867a:	d101      	bne.n	8008680 <HAL_UART_Transmit+0x3e>
 800867c:	2302      	movs	r3, #2
 800867e:	e06e      	b.n	800875e <HAL_UART_Transmit+0x11c>
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	2201      	movs	r2, #1
 8008684:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	2200      	movs	r2, #0
 800868c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	2221      	movs	r2, #33	; 0x21
 8008692:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008696:	f7f9 fd03 	bl	80020a0 <HAL_GetTick>
 800869a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	88fa      	ldrh	r2, [r7, #6]
 80086a0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	88fa      	ldrh	r2, [r7, #6]
 80086a6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	689b      	ldr	r3, [r3, #8]
 80086ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80086b0:	d108      	bne.n	80086c4 <HAL_UART_Transmit+0x82>
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	691b      	ldr	r3, [r3, #16]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d104      	bne.n	80086c4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80086ba:	2300      	movs	r3, #0
 80086bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80086be:	68bb      	ldr	r3, [r7, #8]
 80086c0:	61bb      	str	r3, [r7, #24]
 80086c2:	e003      	b.n	80086cc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80086c4:	68bb      	ldr	r3, [r7, #8]
 80086c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80086c8:	2300      	movs	r3, #0
 80086ca:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	2200      	movs	r2, #0
 80086d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80086d4:	e02a      	b.n	800872c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80086d6:	683b      	ldr	r3, [r7, #0]
 80086d8:	9300      	str	r3, [sp, #0]
 80086da:	697b      	ldr	r3, [r7, #20]
 80086dc:	2200      	movs	r2, #0
 80086de:	2180      	movs	r1, #128	; 0x80
 80086e0:	68f8      	ldr	r0, [r7, #12]
 80086e2:	f000 faf9 	bl	8008cd8 <UART_WaitOnFlagUntilTimeout>
 80086e6:	4603      	mov	r3, r0
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d001      	beq.n	80086f0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80086ec:	2303      	movs	r3, #3
 80086ee:	e036      	b.n	800875e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80086f0:	69fb      	ldr	r3, [r7, #28]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d10b      	bne.n	800870e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80086f6:	69bb      	ldr	r3, [r7, #24]
 80086f8:	881b      	ldrh	r3, [r3, #0]
 80086fa:	461a      	mov	r2, r3
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008704:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008706:	69bb      	ldr	r3, [r7, #24]
 8008708:	3302      	adds	r3, #2
 800870a:	61bb      	str	r3, [r7, #24]
 800870c:	e007      	b.n	800871e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800870e:	69fb      	ldr	r3, [r7, #28]
 8008710:	781a      	ldrb	r2, [r3, #0]
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008718:	69fb      	ldr	r3, [r7, #28]
 800871a:	3301      	adds	r3, #1
 800871c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008722:	b29b      	uxth	r3, r3
 8008724:	3b01      	subs	r3, #1
 8008726:	b29a      	uxth	r2, r3
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008730:	b29b      	uxth	r3, r3
 8008732:	2b00      	cmp	r3, #0
 8008734:	d1cf      	bne.n	80086d6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008736:	683b      	ldr	r3, [r7, #0]
 8008738:	9300      	str	r3, [sp, #0]
 800873a:	697b      	ldr	r3, [r7, #20]
 800873c:	2200      	movs	r2, #0
 800873e:	2140      	movs	r1, #64	; 0x40
 8008740:	68f8      	ldr	r0, [r7, #12]
 8008742:	f000 fac9 	bl	8008cd8 <UART_WaitOnFlagUntilTimeout>
 8008746:	4603      	mov	r3, r0
 8008748:	2b00      	cmp	r3, #0
 800874a:	d001      	beq.n	8008750 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800874c:	2303      	movs	r3, #3
 800874e:	e006      	b.n	800875e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	2220      	movs	r2, #32
 8008754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8008758:	2300      	movs	r3, #0
 800875a:	e000      	b.n	800875e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800875c:	2302      	movs	r3, #2
  }
}
 800875e:	4618      	mov	r0, r3
 8008760:	3720      	adds	r7, #32
 8008762:	46bd      	mov	sp, r7
 8008764:	bd80      	pop	{r7, pc}
	...

08008768 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008768:	b580      	push	{r7, lr}
 800876a:	b0ba      	sub	sp, #232	; 0xe8
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	68db      	ldr	r3, [r3, #12]
 8008780:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	695b      	ldr	r3, [r3, #20]
 800878a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800878e:	2300      	movs	r3, #0
 8008790:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008794:	2300      	movs	r3, #0
 8008796:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800879a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800879e:	f003 030f 	and.w	r3, r3, #15
 80087a2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80087a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d10f      	bne.n	80087ce <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80087ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80087b2:	f003 0320 	and.w	r3, r3, #32
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d009      	beq.n	80087ce <HAL_UART_IRQHandler+0x66>
 80087ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80087be:	f003 0320 	and.w	r3, r3, #32
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d003      	beq.n	80087ce <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80087c6:	6878      	ldr	r0, [r7, #4]
 80087c8:	f000 fbd3 	bl	8008f72 <UART_Receive_IT>
      return;
 80087cc:	e256      	b.n	8008c7c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80087ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	f000 80de 	beq.w	8008994 <HAL_UART_IRQHandler+0x22c>
 80087d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80087dc:	f003 0301 	and.w	r3, r3, #1
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d106      	bne.n	80087f2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80087e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80087e8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	f000 80d1 	beq.w	8008994 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80087f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80087f6:	f003 0301 	and.w	r3, r3, #1
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d00b      	beq.n	8008816 <HAL_UART_IRQHandler+0xae>
 80087fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008802:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008806:	2b00      	cmp	r3, #0
 8008808:	d005      	beq.n	8008816 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800880e:	f043 0201 	orr.w	r2, r3, #1
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008816:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800881a:	f003 0304 	and.w	r3, r3, #4
 800881e:	2b00      	cmp	r3, #0
 8008820:	d00b      	beq.n	800883a <HAL_UART_IRQHandler+0xd2>
 8008822:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008826:	f003 0301 	and.w	r3, r3, #1
 800882a:	2b00      	cmp	r3, #0
 800882c:	d005      	beq.n	800883a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008832:	f043 0202 	orr.w	r2, r3, #2
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800883a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800883e:	f003 0302 	and.w	r3, r3, #2
 8008842:	2b00      	cmp	r3, #0
 8008844:	d00b      	beq.n	800885e <HAL_UART_IRQHandler+0xf6>
 8008846:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800884a:	f003 0301 	and.w	r3, r3, #1
 800884e:	2b00      	cmp	r3, #0
 8008850:	d005      	beq.n	800885e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008856:	f043 0204 	orr.w	r2, r3, #4
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800885e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008862:	f003 0308 	and.w	r3, r3, #8
 8008866:	2b00      	cmp	r3, #0
 8008868:	d011      	beq.n	800888e <HAL_UART_IRQHandler+0x126>
 800886a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800886e:	f003 0320 	and.w	r3, r3, #32
 8008872:	2b00      	cmp	r3, #0
 8008874:	d105      	bne.n	8008882 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008876:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800887a:	f003 0301 	and.w	r3, r3, #1
 800887e:	2b00      	cmp	r3, #0
 8008880:	d005      	beq.n	800888e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008886:	f043 0208 	orr.w	r2, r3, #8
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008892:	2b00      	cmp	r3, #0
 8008894:	f000 81ed 	beq.w	8008c72 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008898:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800889c:	f003 0320 	and.w	r3, r3, #32
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d008      	beq.n	80088b6 <HAL_UART_IRQHandler+0x14e>
 80088a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80088a8:	f003 0320 	and.w	r3, r3, #32
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d002      	beq.n	80088b6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80088b0:	6878      	ldr	r0, [r7, #4]
 80088b2:	f000 fb5e 	bl	8008f72 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	695b      	ldr	r3, [r3, #20]
 80088bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088c0:	2b40      	cmp	r3, #64	; 0x40
 80088c2:	bf0c      	ite	eq
 80088c4:	2301      	moveq	r3, #1
 80088c6:	2300      	movne	r3, #0
 80088c8:	b2db      	uxtb	r3, r3
 80088ca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088d2:	f003 0308 	and.w	r3, r3, #8
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d103      	bne.n	80088e2 <HAL_UART_IRQHandler+0x17a>
 80088da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d04f      	beq.n	8008982 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80088e2:	6878      	ldr	r0, [r7, #4]
 80088e4:	f000 fa66 	bl	8008db4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	695b      	ldr	r3, [r3, #20]
 80088ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088f2:	2b40      	cmp	r3, #64	; 0x40
 80088f4:	d141      	bne.n	800897a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	3314      	adds	r3, #20
 80088fc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008900:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008904:	e853 3f00 	ldrex	r3, [r3]
 8008908:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800890c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008910:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008914:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	3314      	adds	r3, #20
 800891e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008922:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008926:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800892a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800892e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008932:	e841 2300 	strex	r3, r2, [r1]
 8008936:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800893a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800893e:	2b00      	cmp	r3, #0
 8008940:	d1d9      	bne.n	80088f6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008946:	2b00      	cmp	r3, #0
 8008948:	d013      	beq.n	8008972 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800894e:	4a7d      	ldr	r2, [pc, #500]	; (8008b44 <HAL_UART_IRQHandler+0x3dc>)
 8008950:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008956:	4618      	mov	r0, r3
 8008958:	f7fa ffd4 	bl	8003904 <HAL_DMA_Abort_IT>
 800895c:	4603      	mov	r3, r0
 800895e:	2b00      	cmp	r3, #0
 8008960:	d016      	beq.n	8008990 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008966:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008968:	687a      	ldr	r2, [r7, #4]
 800896a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800896c:	4610      	mov	r0, r2
 800896e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008970:	e00e      	b.n	8008990 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008972:	6878      	ldr	r0, [r7, #4]
 8008974:	f000 f99a 	bl	8008cac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008978:	e00a      	b.n	8008990 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800897a:	6878      	ldr	r0, [r7, #4]
 800897c:	f000 f996 	bl	8008cac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008980:	e006      	b.n	8008990 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008982:	6878      	ldr	r0, [r7, #4]
 8008984:	f000 f992 	bl	8008cac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	2200      	movs	r2, #0
 800898c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800898e:	e170      	b.n	8008c72 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008990:	bf00      	nop
    return;
 8008992:	e16e      	b.n	8008c72 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008998:	2b01      	cmp	r3, #1
 800899a:	f040 814a 	bne.w	8008c32 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800899e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80089a2:	f003 0310 	and.w	r3, r3, #16
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	f000 8143 	beq.w	8008c32 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80089ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80089b0:	f003 0310 	and.w	r3, r3, #16
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	f000 813c 	beq.w	8008c32 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80089ba:	2300      	movs	r3, #0
 80089bc:	60bb      	str	r3, [r7, #8]
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	60bb      	str	r3, [r7, #8]
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	685b      	ldr	r3, [r3, #4]
 80089cc:	60bb      	str	r3, [r7, #8]
 80089ce:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	695b      	ldr	r3, [r3, #20]
 80089d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089da:	2b40      	cmp	r3, #64	; 0x40
 80089dc:	f040 80b4 	bne.w	8008b48 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	685b      	ldr	r3, [r3, #4]
 80089e8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80089ec:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	f000 8140 	beq.w	8008c76 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80089fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80089fe:	429a      	cmp	r2, r3
 8008a00:	f080 8139 	bcs.w	8008c76 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008a0a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a10:	69db      	ldr	r3, [r3, #28]
 8008a12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a16:	f000 8088 	beq.w	8008b2a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	330c      	adds	r3, #12
 8008a20:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a24:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008a28:	e853 3f00 	ldrex	r3, [r3]
 8008a2c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008a30:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008a34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008a38:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	330c      	adds	r3, #12
 8008a42:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8008a46:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008a4a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a4e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008a52:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008a56:	e841 2300 	strex	r3, r2, [r1]
 8008a5a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008a5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d1d9      	bne.n	8008a1a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	3314      	adds	r3, #20
 8008a6c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008a70:	e853 3f00 	ldrex	r3, [r3]
 8008a74:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008a76:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008a78:	f023 0301 	bic.w	r3, r3, #1
 8008a7c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	3314      	adds	r3, #20
 8008a86:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008a8a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008a8e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a90:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008a92:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008a96:	e841 2300 	strex	r3, r2, [r1]
 8008a9a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008a9c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d1e1      	bne.n	8008a66 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	3314      	adds	r3, #20
 8008aa8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008aaa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008aac:	e853 3f00 	ldrex	r3, [r3]
 8008ab0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008ab2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008ab4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008ab8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	3314      	adds	r3, #20
 8008ac2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008ac6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008ac8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008aca:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008acc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008ace:	e841 2300 	strex	r3, r2, [r1]
 8008ad2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008ad4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d1e3      	bne.n	8008aa2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	2220      	movs	r2, #32
 8008ade:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	2200      	movs	r2, #0
 8008ae6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	330c      	adds	r3, #12
 8008aee:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008af0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008af2:	e853 3f00 	ldrex	r3, [r3]
 8008af6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008af8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008afa:	f023 0310 	bic.w	r3, r3, #16
 8008afe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	330c      	adds	r3, #12
 8008b08:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008b0c:	65ba      	str	r2, [r7, #88]	; 0x58
 8008b0e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b10:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008b12:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008b14:	e841 2300 	strex	r3, r2, [r1]
 8008b18:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008b1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d1e3      	bne.n	8008ae8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b24:	4618      	mov	r0, r3
 8008b26:	f7fa fe7d 	bl	8003824 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008b32:	b29b      	uxth	r3, r3
 8008b34:	1ad3      	subs	r3, r2, r3
 8008b36:	b29b      	uxth	r3, r3
 8008b38:	4619      	mov	r1, r3
 8008b3a:	6878      	ldr	r0, [r7, #4]
 8008b3c:	f000 f8c0 	bl	8008cc0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008b40:	e099      	b.n	8008c76 <HAL_UART_IRQHandler+0x50e>
 8008b42:	bf00      	nop
 8008b44:	08008e7b 	.word	0x08008e7b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008b50:	b29b      	uxth	r3, r3
 8008b52:	1ad3      	subs	r3, r2, r3
 8008b54:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008b5c:	b29b      	uxth	r3, r3
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	f000 808b 	beq.w	8008c7a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8008b64:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	f000 8086 	beq.w	8008c7a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	330c      	adds	r3, #12
 8008b74:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b78:	e853 3f00 	ldrex	r3, [r3]
 8008b7c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008b7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b80:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008b84:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	330c      	adds	r3, #12
 8008b8e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8008b92:	647a      	str	r2, [r7, #68]	; 0x44
 8008b94:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b96:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008b98:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008b9a:	e841 2300 	strex	r3, r2, [r1]
 8008b9e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008ba0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d1e3      	bne.n	8008b6e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	3314      	adds	r3, #20
 8008bac:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bb0:	e853 3f00 	ldrex	r3, [r3]
 8008bb4:	623b      	str	r3, [r7, #32]
   return(result);
 8008bb6:	6a3b      	ldr	r3, [r7, #32]
 8008bb8:	f023 0301 	bic.w	r3, r3, #1
 8008bbc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	3314      	adds	r3, #20
 8008bc6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008bca:	633a      	str	r2, [r7, #48]	; 0x30
 8008bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008bd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008bd2:	e841 2300 	strex	r3, r2, [r1]
 8008bd6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d1e3      	bne.n	8008ba6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	2220      	movs	r2, #32
 8008be2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	2200      	movs	r2, #0
 8008bea:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	330c      	adds	r3, #12
 8008bf2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bf4:	693b      	ldr	r3, [r7, #16]
 8008bf6:	e853 3f00 	ldrex	r3, [r3]
 8008bfa:	60fb      	str	r3, [r7, #12]
   return(result);
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	f023 0310 	bic.w	r3, r3, #16
 8008c02:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	330c      	adds	r3, #12
 8008c0c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008c10:	61fa      	str	r2, [r7, #28]
 8008c12:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c14:	69b9      	ldr	r1, [r7, #24]
 8008c16:	69fa      	ldr	r2, [r7, #28]
 8008c18:	e841 2300 	strex	r3, r2, [r1]
 8008c1c:	617b      	str	r3, [r7, #20]
   return(result);
 8008c1e:	697b      	ldr	r3, [r7, #20]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d1e3      	bne.n	8008bec <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008c24:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008c28:	4619      	mov	r1, r3
 8008c2a:	6878      	ldr	r0, [r7, #4]
 8008c2c:	f000 f848 	bl	8008cc0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008c30:	e023      	b.n	8008c7a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008c32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d009      	beq.n	8008c52 <HAL_UART_IRQHandler+0x4ea>
 8008c3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008c42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d003      	beq.n	8008c52 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8008c4a:	6878      	ldr	r0, [r7, #4]
 8008c4c:	f000 f929 	bl	8008ea2 <UART_Transmit_IT>
    return;
 8008c50:	e014      	b.n	8008c7c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008c52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d00e      	beq.n	8008c7c <HAL_UART_IRQHandler+0x514>
 8008c5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008c62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d008      	beq.n	8008c7c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8008c6a:	6878      	ldr	r0, [r7, #4]
 8008c6c:	f000 f969 	bl	8008f42 <UART_EndTransmit_IT>
    return;
 8008c70:	e004      	b.n	8008c7c <HAL_UART_IRQHandler+0x514>
    return;
 8008c72:	bf00      	nop
 8008c74:	e002      	b.n	8008c7c <HAL_UART_IRQHandler+0x514>
      return;
 8008c76:	bf00      	nop
 8008c78:	e000      	b.n	8008c7c <HAL_UART_IRQHandler+0x514>
      return;
 8008c7a:	bf00      	nop
  }
}
 8008c7c:	37e8      	adds	r7, #232	; 0xe8
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	bd80      	pop	{r7, pc}
 8008c82:	bf00      	nop

08008c84 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008c84:	b480      	push	{r7}
 8008c86:	b083      	sub	sp, #12
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008c8c:	bf00      	nop
 8008c8e:	370c      	adds	r7, #12
 8008c90:	46bd      	mov	sp, r7
 8008c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c96:	4770      	bx	lr

08008c98 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008c98:	b480      	push	{r7}
 8008c9a:	b083      	sub	sp, #12
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8008ca0:	bf00      	nop
 8008ca2:	370c      	adds	r7, #12
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008caa:	4770      	bx	lr

08008cac <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008cac:	b480      	push	{r7}
 8008cae:	b083      	sub	sp, #12
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008cb4:	bf00      	nop
 8008cb6:	370c      	adds	r7, #12
 8008cb8:	46bd      	mov	sp, r7
 8008cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cbe:	4770      	bx	lr

08008cc0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008cc0:	b480      	push	{r7}
 8008cc2:	b083      	sub	sp, #12
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	6078      	str	r0, [r7, #4]
 8008cc8:	460b      	mov	r3, r1
 8008cca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008ccc:	bf00      	nop
 8008cce:	370c      	adds	r7, #12
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd6:	4770      	bx	lr

08008cd8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008cd8:	b580      	push	{r7, lr}
 8008cda:	b090      	sub	sp, #64	; 0x40
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	60f8      	str	r0, [r7, #12]
 8008ce0:	60b9      	str	r1, [r7, #8]
 8008ce2:	603b      	str	r3, [r7, #0]
 8008ce4:	4613      	mov	r3, r2
 8008ce6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008ce8:	e050      	b.n	8008d8c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008cea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008cec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cf0:	d04c      	beq.n	8008d8c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008cf2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d007      	beq.n	8008d08 <UART_WaitOnFlagUntilTimeout+0x30>
 8008cf8:	f7f9 f9d2 	bl	80020a0 <HAL_GetTick>
 8008cfc:	4602      	mov	r2, r0
 8008cfe:	683b      	ldr	r3, [r7, #0]
 8008d00:	1ad3      	subs	r3, r2, r3
 8008d02:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008d04:	429a      	cmp	r2, r3
 8008d06:	d241      	bcs.n	8008d8c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	330c      	adds	r3, #12
 8008d0e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d12:	e853 3f00 	ldrex	r3, [r3]
 8008d16:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d1a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008d1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	330c      	adds	r3, #12
 8008d26:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008d28:	637a      	str	r2, [r7, #52]	; 0x34
 8008d2a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d2c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008d2e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008d30:	e841 2300 	strex	r3, r2, [r1]
 8008d34:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008d36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d1e5      	bne.n	8008d08 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	3314      	adds	r3, #20
 8008d42:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d44:	697b      	ldr	r3, [r7, #20]
 8008d46:	e853 3f00 	ldrex	r3, [r3]
 8008d4a:	613b      	str	r3, [r7, #16]
   return(result);
 8008d4c:	693b      	ldr	r3, [r7, #16]
 8008d4e:	f023 0301 	bic.w	r3, r3, #1
 8008d52:	63bb      	str	r3, [r7, #56]	; 0x38
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	3314      	adds	r3, #20
 8008d5a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008d5c:	623a      	str	r2, [r7, #32]
 8008d5e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d60:	69f9      	ldr	r1, [r7, #28]
 8008d62:	6a3a      	ldr	r2, [r7, #32]
 8008d64:	e841 2300 	strex	r3, r2, [r1]
 8008d68:	61bb      	str	r3, [r7, #24]
   return(result);
 8008d6a:	69bb      	ldr	r3, [r7, #24]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d1e5      	bne.n	8008d3c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	2220      	movs	r2, #32
 8008d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	2220      	movs	r2, #32
 8008d7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	2200      	movs	r2, #0
 8008d84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008d88:	2303      	movs	r3, #3
 8008d8a:	e00f      	b.n	8008dac <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	681a      	ldr	r2, [r3, #0]
 8008d92:	68bb      	ldr	r3, [r7, #8]
 8008d94:	4013      	ands	r3, r2
 8008d96:	68ba      	ldr	r2, [r7, #8]
 8008d98:	429a      	cmp	r2, r3
 8008d9a:	bf0c      	ite	eq
 8008d9c:	2301      	moveq	r3, #1
 8008d9e:	2300      	movne	r3, #0
 8008da0:	b2db      	uxtb	r3, r3
 8008da2:	461a      	mov	r2, r3
 8008da4:	79fb      	ldrb	r3, [r7, #7]
 8008da6:	429a      	cmp	r2, r3
 8008da8:	d09f      	beq.n	8008cea <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008daa:	2300      	movs	r3, #0
}
 8008dac:	4618      	mov	r0, r3
 8008dae:	3740      	adds	r7, #64	; 0x40
 8008db0:	46bd      	mov	sp, r7
 8008db2:	bd80      	pop	{r7, pc}

08008db4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008db4:	b480      	push	{r7}
 8008db6:	b095      	sub	sp, #84	; 0x54
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	330c      	adds	r3, #12
 8008dc2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008dc6:	e853 3f00 	ldrex	r3, [r3]
 8008dca:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dce:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008dd2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	330c      	adds	r3, #12
 8008dda:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008ddc:	643a      	str	r2, [r7, #64]	; 0x40
 8008dde:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008de0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008de2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008de4:	e841 2300 	strex	r3, r2, [r1]
 8008de8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008dea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d1e5      	bne.n	8008dbc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	3314      	adds	r3, #20
 8008df6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008df8:	6a3b      	ldr	r3, [r7, #32]
 8008dfa:	e853 3f00 	ldrex	r3, [r3]
 8008dfe:	61fb      	str	r3, [r7, #28]
   return(result);
 8008e00:	69fb      	ldr	r3, [r7, #28]
 8008e02:	f023 0301 	bic.w	r3, r3, #1
 8008e06:	64bb      	str	r3, [r7, #72]	; 0x48
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	3314      	adds	r3, #20
 8008e0e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008e10:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008e12:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e14:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008e16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008e18:	e841 2300 	strex	r3, r2, [r1]
 8008e1c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d1e5      	bne.n	8008df0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e28:	2b01      	cmp	r3, #1
 8008e2a:	d119      	bne.n	8008e60 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	330c      	adds	r3, #12
 8008e32:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	e853 3f00 	ldrex	r3, [r3]
 8008e3a:	60bb      	str	r3, [r7, #8]
   return(result);
 8008e3c:	68bb      	ldr	r3, [r7, #8]
 8008e3e:	f023 0310 	bic.w	r3, r3, #16
 8008e42:	647b      	str	r3, [r7, #68]	; 0x44
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	330c      	adds	r3, #12
 8008e4a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008e4c:	61ba      	str	r2, [r7, #24]
 8008e4e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e50:	6979      	ldr	r1, [r7, #20]
 8008e52:	69ba      	ldr	r2, [r7, #24]
 8008e54:	e841 2300 	strex	r3, r2, [r1]
 8008e58:	613b      	str	r3, [r7, #16]
   return(result);
 8008e5a:	693b      	ldr	r3, [r7, #16]
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d1e5      	bne.n	8008e2c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	2220      	movs	r2, #32
 8008e64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	2200      	movs	r2, #0
 8008e6c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008e6e:	bf00      	nop
 8008e70:	3754      	adds	r7, #84	; 0x54
 8008e72:	46bd      	mov	sp, r7
 8008e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e78:	4770      	bx	lr

08008e7a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008e7a:	b580      	push	{r7, lr}
 8008e7c:	b084      	sub	sp, #16
 8008e7e:	af00      	add	r7, sp, #0
 8008e80:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e86:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	2200      	movs	r2, #0
 8008e92:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008e94:	68f8      	ldr	r0, [r7, #12]
 8008e96:	f7ff ff09 	bl	8008cac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008e9a:	bf00      	nop
 8008e9c:	3710      	adds	r7, #16
 8008e9e:	46bd      	mov	sp, r7
 8008ea0:	bd80      	pop	{r7, pc}

08008ea2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008ea2:	b480      	push	{r7}
 8008ea4:	b085      	sub	sp, #20
 8008ea6:	af00      	add	r7, sp, #0
 8008ea8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008eb0:	b2db      	uxtb	r3, r3
 8008eb2:	2b21      	cmp	r3, #33	; 0x21
 8008eb4:	d13e      	bne.n	8008f34 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	689b      	ldr	r3, [r3, #8]
 8008eba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ebe:	d114      	bne.n	8008eea <UART_Transmit_IT+0x48>
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	691b      	ldr	r3, [r3, #16]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d110      	bne.n	8008eea <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	6a1b      	ldr	r3, [r3, #32]
 8008ecc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	881b      	ldrh	r3, [r3, #0]
 8008ed2:	461a      	mov	r2, r3
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008edc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	6a1b      	ldr	r3, [r3, #32]
 8008ee2:	1c9a      	adds	r2, r3, #2
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	621a      	str	r2, [r3, #32]
 8008ee8:	e008      	b.n	8008efc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	6a1b      	ldr	r3, [r3, #32]
 8008eee:	1c59      	adds	r1, r3, #1
 8008ef0:	687a      	ldr	r2, [r7, #4]
 8008ef2:	6211      	str	r1, [r2, #32]
 8008ef4:	781a      	ldrb	r2, [r3, #0]
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008f00:	b29b      	uxth	r3, r3
 8008f02:	3b01      	subs	r3, #1
 8008f04:	b29b      	uxth	r3, r3
 8008f06:	687a      	ldr	r2, [r7, #4]
 8008f08:	4619      	mov	r1, r3
 8008f0a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d10f      	bne.n	8008f30 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	68da      	ldr	r2, [r3, #12]
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008f1e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	68da      	ldr	r2, [r3, #12]
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008f2e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008f30:	2300      	movs	r3, #0
 8008f32:	e000      	b.n	8008f36 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008f34:	2302      	movs	r3, #2
  }
}
 8008f36:	4618      	mov	r0, r3
 8008f38:	3714      	adds	r7, #20
 8008f3a:	46bd      	mov	sp, r7
 8008f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f40:	4770      	bx	lr

08008f42 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008f42:	b580      	push	{r7, lr}
 8008f44:	b082      	sub	sp, #8
 8008f46:	af00      	add	r7, sp, #0
 8008f48:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	68da      	ldr	r2, [r3, #12]
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008f58:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	2220      	movs	r2, #32
 8008f5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008f62:	6878      	ldr	r0, [r7, #4]
 8008f64:	f7ff fe8e 	bl	8008c84 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008f68:	2300      	movs	r3, #0
}
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	3708      	adds	r7, #8
 8008f6e:	46bd      	mov	sp, r7
 8008f70:	bd80      	pop	{r7, pc}

08008f72 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008f72:	b580      	push	{r7, lr}
 8008f74:	b08c      	sub	sp, #48	; 0x30
 8008f76:	af00      	add	r7, sp, #0
 8008f78:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008f80:	b2db      	uxtb	r3, r3
 8008f82:	2b22      	cmp	r3, #34	; 0x22
 8008f84:	f040 80ab 	bne.w	80090de <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	689b      	ldr	r3, [r3, #8]
 8008f8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f90:	d117      	bne.n	8008fc2 <UART_Receive_IT+0x50>
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	691b      	ldr	r3, [r3, #16]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d113      	bne.n	8008fc2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008f9a:	2300      	movs	r3, #0
 8008f9c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fa2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	685b      	ldr	r3, [r3, #4]
 8008faa:	b29b      	uxth	r3, r3
 8008fac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008fb0:	b29a      	uxth	r2, r3
 8008fb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fb4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fba:	1c9a      	adds	r2, r3, #2
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	629a      	str	r2, [r3, #40]	; 0x28
 8008fc0:	e026      	b.n	8009010 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fc6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008fc8:	2300      	movs	r3, #0
 8008fca:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	689b      	ldr	r3, [r3, #8]
 8008fd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008fd4:	d007      	beq.n	8008fe6 <UART_Receive_IT+0x74>
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	689b      	ldr	r3, [r3, #8]
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d10a      	bne.n	8008ff4 <UART_Receive_IT+0x82>
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	691b      	ldr	r3, [r3, #16]
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d106      	bne.n	8008ff4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	685b      	ldr	r3, [r3, #4]
 8008fec:	b2da      	uxtb	r2, r3
 8008fee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ff0:	701a      	strb	r2, [r3, #0]
 8008ff2:	e008      	b.n	8009006 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	685b      	ldr	r3, [r3, #4]
 8008ffa:	b2db      	uxtb	r3, r3
 8008ffc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009000:	b2da      	uxtb	r2, r3
 8009002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009004:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800900a:	1c5a      	adds	r2, r3, #1
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009014:	b29b      	uxth	r3, r3
 8009016:	3b01      	subs	r3, #1
 8009018:	b29b      	uxth	r3, r3
 800901a:	687a      	ldr	r2, [r7, #4]
 800901c:	4619      	mov	r1, r3
 800901e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009020:	2b00      	cmp	r3, #0
 8009022:	d15a      	bne.n	80090da <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	68da      	ldr	r2, [r3, #12]
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	f022 0220 	bic.w	r2, r2, #32
 8009032:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	68da      	ldr	r2, [r3, #12]
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009042:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	695a      	ldr	r2, [r3, #20]
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	f022 0201 	bic.w	r2, r2, #1
 8009052:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	2220      	movs	r2, #32
 8009058:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009060:	2b01      	cmp	r3, #1
 8009062:	d135      	bne.n	80090d0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	2200      	movs	r2, #0
 8009068:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	330c      	adds	r3, #12
 8009070:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009072:	697b      	ldr	r3, [r7, #20]
 8009074:	e853 3f00 	ldrex	r3, [r3]
 8009078:	613b      	str	r3, [r7, #16]
   return(result);
 800907a:	693b      	ldr	r3, [r7, #16]
 800907c:	f023 0310 	bic.w	r3, r3, #16
 8009080:	627b      	str	r3, [r7, #36]	; 0x24
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	330c      	adds	r3, #12
 8009088:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800908a:	623a      	str	r2, [r7, #32]
 800908c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800908e:	69f9      	ldr	r1, [r7, #28]
 8009090:	6a3a      	ldr	r2, [r7, #32]
 8009092:	e841 2300 	strex	r3, r2, [r1]
 8009096:	61bb      	str	r3, [r7, #24]
   return(result);
 8009098:	69bb      	ldr	r3, [r7, #24]
 800909a:	2b00      	cmp	r3, #0
 800909c:	d1e5      	bne.n	800906a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	f003 0310 	and.w	r3, r3, #16
 80090a8:	2b10      	cmp	r3, #16
 80090aa:	d10a      	bne.n	80090c2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80090ac:	2300      	movs	r3, #0
 80090ae:	60fb      	str	r3, [r7, #12]
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	60fb      	str	r3, [r7, #12]
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	685b      	ldr	r3, [r3, #4]
 80090be:	60fb      	str	r3, [r7, #12]
 80090c0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80090c6:	4619      	mov	r1, r3
 80090c8:	6878      	ldr	r0, [r7, #4]
 80090ca:	f7ff fdf9 	bl	8008cc0 <HAL_UARTEx_RxEventCallback>
 80090ce:	e002      	b.n	80090d6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80090d0:	6878      	ldr	r0, [r7, #4]
 80090d2:	f7ff fde1 	bl	8008c98 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80090d6:	2300      	movs	r3, #0
 80090d8:	e002      	b.n	80090e0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80090da:	2300      	movs	r3, #0
 80090dc:	e000      	b.n	80090e0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80090de:	2302      	movs	r3, #2
  }
}
 80090e0:	4618      	mov	r0, r3
 80090e2:	3730      	adds	r7, #48	; 0x30
 80090e4:	46bd      	mov	sp, r7
 80090e6:	bd80      	pop	{r7, pc}

080090e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80090e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090ec:	b09f      	sub	sp, #124	; 0x7c
 80090ee:	af00      	add	r7, sp, #0
 80090f0:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80090f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	691b      	ldr	r3, [r3, #16]
 80090f8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80090fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80090fe:	68d9      	ldr	r1, [r3, #12]
 8009100:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009102:	681a      	ldr	r2, [r3, #0]
 8009104:	ea40 0301 	orr.w	r3, r0, r1
 8009108:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800910a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800910c:	689a      	ldr	r2, [r3, #8]
 800910e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009110:	691b      	ldr	r3, [r3, #16]
 8009112:	431a      	orrs	r2, r3
 8009114:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009116:	695b      	ldr	r3, [r3, #20]
 8009118:	431a      	orrs	r2, r3
 800911a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800911c:	69db      	ldr	r3, [r3, #28]
 800911e:	4313      	orrs	r3, r2
 8009120:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8009122:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	68db      	ldr	r3, [r3, #12]
 8009128:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800912c:	f021 010c 	bic.w	r1, r1, #12
 8009130:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009132:	681a      	ldr	r2, [r3, #0]
 8009134:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009136:	430b      	orrs	r3, r1
 8009138:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800913a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	695b      	ldr	r3, [r3, #20]
 8009140:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009144:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009146:	6999      	ldr	r1, [r3, #24]
 8009148:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800914a:	681a      	ldr	r2, [r3, #0]
 800914c:	ea40 0301 	orr.w	r3, r0, r1
 8009150:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009152:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009154:	681a      	ldr	r2, [r3, #0]
 8009156:	4bc5      	ldr	r3, [pc, #788]	; (800946c <UART_SetConfig+0x384>)
 8009158:	429a      	cmp	r2, r3
 800915a:	d004      	beq.n	8009166 <UART_SetConfig+0x7e>
 800915c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800915e:	681a      	ldr	r2, [r3, #0]
 8009160:	4bc3      	ldr	r3, [pc, #780]	; (8009470 <UART_SetConfig+0x388>)
 8009162:	429a      	cmp	r2, r3
 8009164:	d103      	bne.n	800916e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009166:	f7fc ff6d 	bl	8006044 <HAL_RCC_GetPCLK2Freq>
 800916a:	6778      	str	r0, [r7, #116]	; 0x74
 800916c:	e002      	b.n	8009174 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800916e:	f7fc ff55 	bl	800601c <HAL_RCC_GetPCLK1Freq>
 8009172:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009174:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009176:	69db      	ldr	r3, [r3, #28]
 8009178:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800917c:	f040 80b6 	bne.w	80092ec <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009180:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009182:	461c      	mov	r4, r3
 8009184:	f04f 0500 	mov.w	r5, #0
 8009188:	4622      	mov	r2, r4
 800918a:	462b      	mov	r3, r5
 800918c:	1891      	adds	r1, r2, r2
 800918e:	6439      	str	r1, [r7, #64]	; 0x40
 8009190:	415b      	adcs	r3, r3
 8009192:	647b      	str	r3, [r7, #68]	; 0x44
 8009194:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009198:	1912      	adds	r2, r2, r4
 800919a:	eb45 0303 	adc.w	r3, r5, r3
 800919e:	f04f 0000 	mov.w	r0, #0
 80091a2:	f04f 0100 	mov.w	r1, #0
 80091a6:	00d9      	lsls	r1, r3, #3
 80091a8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80091ac:	00d0      	lsls	r0, r2, #3
 80091ae:	4602      	mov	r2, r0
 80091b0:	460b      	mov	r3, r1
 80091b2:	1911      	adds	r1, r2, r4
 80091b4:	6639      	str	r1, [r7, #96]	; 0x60
 80091b6:	416b      	adcs	r3, r5
 80091b8:	667b      	str	r3, [r7, #100]	; 0x64
 80091ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80091bc:	685b      	ldr	r3, [r3, #4]
 80091be:	461a      	mov	r2, r3
 80091c0:	f04f 0300 	mov.w	r3, #0
 80091c4:	1891      	adds	r1, r2, r2
 80091c6:	63b9      	str	r1, [r7, #56]	; 0x38
 80091c8:	415b      	adcs	r3, r3
 80091ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80091cc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80091d0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80091d4:	f7f7 f85c 	bl	8000290 <__aeabi_uldivmod>
 80091d8:	4602      	mov	r2, r0
 80091da:	460b      	mov	r3, r1
 80091dc:	4ba5      	ldr	r3, [pc, #660]	; (8009474 <UART_SetConfig+0x38c>)
 80091de:	fba3 2302 	umull	r2, r3, r3, r2
 80091e2:	095b      	lsrs	r3, r3, #5
 80091e4:	011e      	lsls	r6, r3, #4
 80091e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80091e8:	461c      	mov	r4, r3
 80091ea:	f04f 0500 	mov.w	r5, #0
 80091ee:	4622      	mov	r2, r4
 80091f0:	462b      	mov	r3, r5
 80091f2:	1891      	adds	r1, r2, r2
 80091f4:	6339      	str	r1, [r7, #48]	; 0x30
 80091f6:	415b      	adcs	r3, r3
 80091f8:	637b      	str	r3, [r7, #52]	; 0x34
 80091fa:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80091fe:	1912      	adds	r2, r2, r4
 8009200:	eb45 0303 	adc.w	r3, r5, r3
 8009204:	f04f 0000 	mov.w	r0, #0
 8009208:	f04f 0100 	mov.w	r1, #0
 800920c:	00d9      	lsls	r1, r3, #3
 800920e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009212:	00d0      	lsls	r0, r2, #3
 8009214:	4602      	mov	r2, r0
 8009216:	460b      	mov	r3, r1
 8009218:	1911      	adds	r1, r2, r4
 800921a:	65b9      	str	r1, [r7, #88]	; 0x58
 800921c:	416b      	adcs	r3, r5
 800921e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009220:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009222:	685b      	ldr	r3, [r3, #4]
 8009224:	461a      	mov	r2, r3
 8009226:	f04f 0300 	mov.w	r3, #0
 800922a:	1891      	adds	r1, r2, r2
 800922c:	62b9      	str	r1, [r7, #40]	; 0x28
 800922e:	415b      	adcs	r3, r3
 8009230:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009232:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009236:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800923a:	f7f7 f829 	bl	8000290 <__aeabi_uldivmod>
 800923e:	4602      	mov	r2, r0
 8009240:	460b      	mov	r3, r1
 8009242:	4b8c      	ldr	r3, [pc, #560]	; (8009474 <UART_SetConfig+0x38c>)
 8009244:	fba3 1302 	umull	r1, r3, r3, r2
 8009248:	095b      	lsrs	r3, r3, #5
 800924a:	2164      	movs	r1, #100	; 0x64
 800924c:	fb01 f303 	mul.w	r3, r1, r3
 8009250:	1ad3      	subs	r3, r2, r3
 8009252:	00db      	lsls	r3, r3, #3
 8009254:	3332      	adds	r3, #50	; 0x32
 8009256:	4a87      	ldr	r2, [pc, #540]	; (8009474 <UART_SetConfig+0x38c>)
 8009258:	fba2 2303 	umull	r2, r3, r2, r3
 800925c:	095b      	lsrs	r3, r3, #5
 800925e:	005b      	lsls	r3, r3, #1
 8009260:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009264:	441e      	add	r6, r3
 8009266:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009268:	4618      	mov	r0, r3
 800926a:	f04f 0100 	mov.w	r1, #0
 800926e:	4602      	mov	r2, r0
 8009270:	460b      	mov	r3, r1
 8009272:	1894      	adds	r4, r2, r2
 8009274:	623c      	str	r4, [r7, #32]
 8009276:	415b      	adcs	r3, r3
 8009278:	627b      	str	r3, [r7, #36]	; 0x24
 800927a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800927e:	1812      	adds	r2, r2, r0
 8009280:	eb41 0303 	adc.w	r3, r1, r3
 8009284:	f04f 0400 	mov.w	r4, #0
 8009288:	f04f 0500 	mov.w	r5, #0
 800928c:	00dd      	lsls	r5, r3, #3
 800928e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009292:	00d4      	lsls	r4, r2, #3
 8009294:	4622      	mov	r2, r4
 8009296:	462b      	mov	r3, r5
 8009298:	1814      	adds	r4, r2, r0
 800929a:	653c      	str	r4, [r7, #80]	; 0x50
 800929c:	414b      	adcs	r3, r1
 800929e:	657b      	str	r3, [r7, #84]	; 0x54
 80092a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80092a2:	685b      	ldr	r3, [r3, #4]
 80092a4:	461a      	mov	r2, r3
 80092a6:	f04f 0300 	mov.w	r3, #0
 80092aa:	1891      	adds	r1, r2, r2
 80092ac:	61b9      	str	r1, [r7, #24]
 80092ae:	415b      	adcs	r3, r3
 80092b0:	61fb      	str	r3, [r7, #28]
 80092b2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80092b6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80092ba:	f7f6 ffe9 	bl	8000290 <__aeabi_uldivmod>
 80092be:	4602      	mov	r2, r0
 80092c0:	460b      	mov	r3, r1
 80092c2:	4b6c      	ldr	r3, [pc, #432]	; (8009474 <UART_SetConfig+0x38c>)
 80092c4:	fba3 1302 	umull	r1, r3, r3, r2
 80092c8:	095b      	lsrs	r3, r3, #5
 80092ca:	2164      	movs	r1, #100	; 0x64
 80092cc:	fb01 f303 	mul.w	r3, r1, r3
 80092d0:	1ad3      	subs	r3, r2, r3
 80092d2:	00db      	lsls	r3, r3, #3
 80092d4:	3332      	adds	r3, #50	; 0x32
 80092d6:	4a67      	ldr	r2, [pc, #412]	; (8009474 <UART_SetConfig+0x38c>)
 80092d8:	fba2 2303 	umull	r2, r3, r2, r3
 80092dc:	095b      	lsrs	r3, r3, #5
 80092de:	f003 0207 	and.w	r2, r3, #7
 80092e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	4432      	add	r2, r6
 80092e8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80092ea:	e0b9      	b.n	8009460 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80092ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80092ee:	461c      	mov	r4, r3
 80092f0:	f04f 0500 	mov.w	r5, #0
 80092f4:	4622      	mov	r2, r4
 80092f6:	462b      	mov	r3, r5
 80092f8:	1891      	adds	r1, r2, r2
 80092fa:	6139      	str	r1, [r7, #16]
 80092fc:	415b      	adcs	r3, r3
 80092fe:	617b      	str	r3, [r7, #20]
 8009300:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009304:	1912      	adds	r2, r2, r4
 8009306:	eb45 0303 	adc.w	r3, r5, r3
 800930a:	f04f 0000 	mov.w	r0, #0
 800930e:	f04f 0100 	mov.w	r1, #0
 8009312:	00d9      	lsls	r1, r3, #3
 8009314:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009318:	00d0      	lsls	r0, r2, #3
 800931a:	4602      	mov	r2, r0
 800931c:	460b      	mov	r3, r1
 800931e:	eb12 0804 	adds.w	r8, r2, r4
 8009322:	eb43 0905 	adc.w	r9, r3, r5
 8009326:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009328:	685b      	ldr	r3, [r3, #4]
 800932a:	4618      	mov	r0, r3
 800932c:	f04f 0100 	mov.w	r1, #0
 8009330:	f04f 0200 	mov.w	r2, #0
 8009334:	f04f 0300 	mov.w	r3, #0
 8009338:	008b      	lsls	r3, r1, #2
 800933a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800933e:	0082      	lsls	r2, r0, #2
 8009340:	4640      	mov	r0, r8
 8009342:	4649      	mov	r1, r9
 8009344:	f7f6 ffa4 	bl	8000290 <__aeabi_uldivmod>
 8009348:	4602      	mov	r2, r0
 800934a:	460b      	mov	r3, r1
 800934c:	4b49      	ldr	r3, [pc, #292]	; (8009474 <UART_SetConfig+0x38c>)
 800934e:	fba3 2302 	umull	r2, r3, r3, r2
 8009352:	095b      	lsrs	r3, r3, #5
 8009354:	011e      	lsls	r6, r3, #4
 8009356:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009358:	4618      	mov	r0, r3
 800935a:	f04f 0100 	mov.w	r1, #0
 800935e:	4602      	mov	r2, r0
 8009360:	460b      	mov	r3, r1
 8009362:	1894      	adds	r4, r2, r2
 8009364:	60bc      	str	r4, [r7, #8]
 8009366:	415b      	adcs	r3, r3
 8009368:	60fb      	str	r3, [r7, #12]
 800936a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800936e:	1812      	adds	r2, r2, r0
 8009370:	eb41 0303 	adc.w	r3, r1, r3
 8009374:	f04f 0400 	mov.w	r4, #0
 8009378:	f04f 0500 	mov.w	r5, #0
 800937c:	00dd      	lsls	r5, r3, #3
 800937e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009382:	00d4      	lsls	r4, r2, #3
 8009384:	4622      	mov	r2, r4
 8009386:	462b      	mov	r3, r5
 8009388:	1814      	adds	r4, r2, r0
 800938a:	64bc      	str	r4, [r7, #72]	; 0x48
 800938c:	414b      	adcs	r3, r1
 800938e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009390:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009392:	685b      	ldr	r3, [r3, #4]
 8009394:	4618      	mov	r0, r3
 8009396:	f04f 0100 	mov.w	r1, #0
 800939a:	f04f 0200 	mov.w	r2, #0
 800939e:	f04f 0300 	mov.w	r3, #0
 80093a2:	008b      	lsls	r3, r1, #2
 80093a4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80093a8:	0082      	lsls	r2, r0, #2
 80093aa:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80093ae:	f7f6 ff6f 	bl	8000290 <__aeabi_uldivmod>
 80093b2:	4602      	mov	r2, r0
 80093b4:	460b      	mov	r3, r1
 80093b6:	4b2f      	ldr	r3, [pc, #188]	; (8009474 <UART_SetConfig+0x38c>)
 80093b8:	fba3 1302 	umull	r1, r3, r3, r2
 80093bc:	095b      	lsrs	r3, r3, #5
 80093be:	2164      	movs	r1, #100	; 0x64
 80093c0:	fb01 f303 	mul.w	r3, r1, r3
 80093c4:	1ad3      	subs	r3, r2, r3
 80093c6:	011b      	lsls	r3, r3, #4
 80093c8:	3332      	adds	r3, #50	; 0x32
 80093ca:	4a2a      	ldr	r2, [pc, #168]	; (8009474 <UART_SetConfig+0x38c>)
 80093cc:	fba2 2303 	umull	r2, r3, r2, r3
 80093d0:	095b      	lsrs	r3, r3, #5
 80093d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80093d6:	441e      	add	r6, r3
 80093d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80093da:	4618      	mov	r0, r3
 80093dc:	f04f 0100 	mov.w	r1, #0
 80093e0:	4602      	mov	r2, r0
 80093e2:	460b      	mov	r3, r1
 80093e4:	1894      	adds	r4, r2, r2
 80093e6:	603c      	str	r4, [r7, #0]
 80093e8:	415b      	adcs	r3, r3
 80093ea:	607b      	str	r3, [r7, #4]
 80093ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80093f0:	1812      	adds	r2, r2, r0
 80093f2:	eb41 0303 	adc.w	r3, r1, r3
 80093f6:	f04f 0400 	mov.w	r4, #0
 80093fa:	f04f 0500 	mov.w	r5, #0
 80093fe:	00dd      	lsls	r5, r3, #3
 8009400:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009404:	00d4      	lsls	r4, r2, #3
 8009406:	4622      	mov	r2, r4
 8009408:	462b      	mov	r3, r5
 800940a:	eb12 0a00 	adds.w	sl, r2, r0
 800940e:	eb43 0b01 	adc.w	fp, r3, r1
 8009412:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009414:	685b      	ldr	r3, [r3, #4]
 8009416:	4618      	mov	r0, r3
 8009418:	f04f 0100 	mov.w	r1, #0
 800941c:	f04f 0200 	mov.w	r2, #0
 8009420:	f04f 0300 	mov.w	r3, #0
 8009424:	008b      	lsls	r3, r1, #2
 8009426:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800942a:	0082      	lsls	r2, r0, #2
 800942c:	4650      	mov	r0, sl
 800942e:	4659      	mov	r1, fp
 8009430:	f7f6 ff2e 	bl	8000290 <__aeabi_uldivmod>
 8009434:	4602      	mov	r2, r0
 8009436:	460b      	mov	r3, r1
 8009438:	4b0e      	ldr	r3, [pc, #56]	; (8009474 <UART_SetConfig+0x38c>)
 800943a:	fba3 1302 	umull	r1, r3, r3, r2
 800943e:	095b      	lsrs	r3, r3, #5
 8009440:	2164      	movs	r1, #100	; 0x64
 8009442:	fb01 f303 	mul.w	r3, r1, r3
 8009446:	1ad3      	subs	r3, r2, r3
 8009448:	011b      	lsls	r3, r3, #4
 800944a:	3332      	adds	r3, #50	; 0x32
 800944c:	4a09      	ldr	r2, [pc, #36]	; (8009474 <UART_SetConfig+0x38c>)
 800944e:	fba2 2303 	umull	r2, r3, r2, r3
 8009452:	095b      	lsrs	r3, r3, #5
 8009454:	f003 020f 	and.w	r2, r3, #15
 8009458:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	4432      	add	r2, r6
 800945e:	609a      	str	r2, [r3, #8]
}
 8009460:	bf00      	nop
 8009462:	377c      	adds	r7, #124	; 0x7c
 8009464:	46bd      	mov	sp, r7
 8009466:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800946a:	bf00      	nop
 800946c:	40011000 	.word	0x40011000
 8009470:	40011400 	.word	0x40011400
 8009474:	51eb851f 	.word	0x51eb851f

08009478 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8009478:	b084      	sub	sp, #16
 800947a:	b480      	push	{r7}
 800947c:	b085      	sub	sp, #20
 800947e:	af00      	add	r7, sp, #0
 8009480:	6078      	str	r0, [r7, #4]
 8009482:	f107 001c 	add.w	r0, r7, #28
 8009486:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800948a:	2300      	movs	r3, #0
 800948c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800948e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8009490:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8009492:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8009494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8009496:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8009498:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800949a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800949c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800949e:	431a      	orrs	r2, r3
             Init.ClockDiv
 80094a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 80094a2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80094a4:	68fa      	ldr	r2, [r7, #12]
 80094a6:	4313      	orrs	r3, r2
 80094a8:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	685b      	ldr	r3, [r3, #4]
 80094ae:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 80094b2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80094b6:	68fa      	ldr	r2, [r7, #12]
 80094b8:	431a      	orrs	r2, r3
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80094be:	2300      	movs	r3, #0
}
 80094c0:	4618      	mov	r0, r3
 80094c2:	3714      	adds	r7, #20
 80094c4:	46bd      	mov	sp, r7
 80094c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ca:	b004      	add	sp, #16
 80094cc:	4770      	bx	lr

080094ce <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 80094ce:	b480      	push	{r7}
 80094d0:	b083      	sub	sp, #12
 80094d2:	af00      	add	r7, sp, #0
 80094d4:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80094dc:	4618      	mov	r0, r3
 80094de:	370c      	adds	r7, #12
 80094e0:	46bd      	mov	sp, r7
 80094e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e6:	4770      	bx	lr

080094e8 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 80094e8:	b480      	push	{r7}
 80094ea:	b083      	sub	sp, #12
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	6078      	str	r0, [r7, #4]
 80094f0:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 80094f2:	683b      	ldr	r3, [r7, #0]
 80094f4:	681a      	ldr	r2, [r3, #0]
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80094fc:	2300      	movs	r3, #0
}
 80094fe:	4618      	mov	r0, r3
 8009500:	370c      	adds	r7, #12
 8009502:	46bd      	mov	sp, r7
 8009504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009508:	4770      	bx	lr

0800950a <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800950a:	b580      	push	{r7, lr}
 800950c:	b082      	sub	sp, #8
 800950e:	af00      	add	r7, sp, #0
 8009510:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	2203      	movs	r2, #3
 8009516:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8009518:	2002      	movs	r0, #2
 800951a:	f7f8 fdcd 	bl	80020b8 <HAL_Delay>
  
  return HAL_OK;
 800951e:	2300      	movs	r3, #0
}
 8009520:	4618      	mov	r0, r3
 8009522:	3708      	adds	r7, #8
 8009524:	46bd      	mov	sp, r7
 8009526:	bd80      	pop	{r7, pc}

08009528 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8009528:	b480      	push	{r7}
 800952a:	b083      	sub	sp, #12
 800952c:	af00      	add	r7, sp, #0
 800952e:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	f003 0303 	and.w	r3, r3, #3
}
 8009538:	4618      	mov	r0, r3
 800953a:	370c      	adds	r7, #12
 800953c:	46bd      	mov	sp, r7
 800953e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009542:	4770      	bx	lr

08009544 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8009544:	b480      	push	{r7}
 8009546:	b085      	sub	sp, #20
 8009548:	af00      	add	r7, sp, #0
 800954a:	6078      	str	r0, [r7, #4]
 800954c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800954e:	2300      	movs	r3, #0
 8009550:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8009552:	683b      	ldr	r3, [r7, #0]
 8009554:	681a      	ldr	r2, [r3, #0]
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800955a:	683b      	ldr	r3, [r7, #0]
 800955c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800955e:	683b      	ldr	r3, [r7, #0]
 8009560:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009562:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8009564:	683b      	ldr	r3, [r7, #0]
 8009566:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8009568:	431a      	orrs	r2, r3
                       Command->CPSM);
 800956a:	683b      	ldr	r3, [r7, #0]
 800956c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800956e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009570:	68fa      	ldr	r2, [r7, #12]
 8009572:	4313      	orrs	r3, r2
 8009574:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	68db      	ldr	r3, [r3, #12]
 800957a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800957e:	f023 030f 	bic.w	r3, r3, #15
 8009582:	68fa      	ldr	r2, [r7, #12]
 8009584:	431a      	orrs	r2, r3
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800958a:	2300      	movs	r3, #0
}
 800958c:	4618      	mov	r0, r3
 800958e:	3714      	adds	r7, #20
 8009590:	46bd      	mov	sp, r7
 8009592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009596:	4770      	bx	lr

08009598 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8009598:	b480      	push	{r7}
 800959a:	b083      	sub	sp, #12
 800959c:	af00      	add	r7, sp, #0
 800959e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	691b      	ldr	r3, [r3, #16]
 80095a4:	b2db      	uxtb	r3, r3
}
 80095a6:	4618      	mov	r0, r3
 80095a8:	370c      	adds	r7, #12
 80095aa:	46bd      	mov	sp, r7
 80095ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b0:	4770      	bx	lr

080095b2 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 80095b2:	b480      	push	{r7}
 80095b4:	b085      	sub	sp, #20
 80095b6:	af00      	add	r7, sp, #0
 80095b8:	6078      	str	r0, [r7, #4]
 80095ba:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	3314      	adds	r3, #20
 80095c0:	461a      	mov	r2, r3
 80095c2:	683b      	ldr	r3, [r7, #0]
 80095c4:	4413      	add	r3, r2
 80095c6:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	681b      	ldr	r3, [r3, #0]
}  
 80095cc:	4618      	mov	r0, r3
 80095ce:	3714      	adds	r7, #20
 80095d0:	46bd      	mov	sp, r7
 80095d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d6:	4770      	bx	lr

080095d8 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 80095d8:	b480      	push	{r7}
 80095da:	b085      	sub	sp, #20
 80095dc:	af00      	add	r7, sp, #0
 80095de:	6078      	str	r0, [r7, #4]
 80095e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80095e2:	2300      	movs	r3, #0
 80095e4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 80095e6:	683b      	ldr	r3, [r7, #0]
 80095e8:	681a      	ldr	r2, [r3, #0]
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 80095ee:	683b      	ldr	r3, [r7, #0]
 80095f0:	685a      	ldr	r2, [r3, #4]
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80095f6:	683b      	ldr	r3, [r7, #0]
 80095f8:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80095fa:	683b      	ldr	r3, [r7, #0]
 80095fc:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80095fe:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8009600:	683b      	ldr	r3, [r7, #0]
 8009602:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8009604:	431a      	orrs	r2, r3
                       Data->DPSM);
 8009606:	683b      	ldr	r3, [r7, #0]
 8009608:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800960a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800960c:	68fa      	ldr	r2, [r7, #12]
 800960e:	4313      	orrs	r3, r2
 8009610:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009616:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	431a      	orrs	r2, r3
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8009622:	2300      	movs	r3, #0

}
 8009624:	4618      	mov	r0, r3
 8009626:	3714      	adds	r7, #20
 8009628:	46bd      	mov	sp, r7
 800962a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800962e:	4770      	bx	lr

08009630 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8009630:	b580      	push	{r7, lr}
 8009632:	b088      	sub	sp, #32
 8009634:	af00      	add	r7, sp, #0
 8009636:	6078      	str	r0, [r7, #4]
 8009638:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800963a:	683b      	ldr	r3, [r7, #0]
 800963c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800963e:	2310      	movs	r3, #16
 8009640:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009642:	2340      	movs	r3, #64	; 0x40
 8009644:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009646:	2300      	movs	r3, #0
 8009648:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800964a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800964e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009650:	f107 0308 	add.w	r3, r7, #8
 8009654:	4619      	mov	r1, r3
 8009656:	6878      	ldr	r0, [r7, #4]
 8009658:	f7ff ff74 	bl	8009544 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800965c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009660:	2110      	movs	r1, #16
 8009662:	6878      	ldr	r0, [r7, #4]
 8009664:	f000 fa44 	bl	8009af0 <SDMMC_GetCmdResp1>
 8009668:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800966a:	69fb      	ldr	r3, [r7, #28]
}
 800966c:	4618      	mov	r0, r3
 800966e:	3720      	adds	r7, #32
 8009670:	46bd      	mov	sp, r7
 8009672:	bd80      	pop	{r7, pc}

08009674 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8009674:	b580      	push	{r7, lr}
 8009676:	b088      	sub	sp, #32
 8009678:	af00      	add	r7, sp, #0
 800967a:	6078      	str	r0, [r7, #4]
 800967c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800967e:	683b      	ldr	r3, [r7, #0]
 8009680:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8009682:	2311      	movs	r3, #17
 8009684:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009686:	2340      	movs	r3, #64	; 0x40
 8009688:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800968a:	2300      	movs	r3, #0
 800968c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800968e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009692:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009694:	f107 0308 	add.w	r3, r7, #8
 8009698:	4619      	mov	r1, r3
 800969a:	6878      	ldr	r0, [r7, #4]
 800969c:	f7ff ff52 	bl	8009544 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80096a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80096a4:	2111      	movs	r1, #17
 80096a6:	6878      	ldr	r0, [r7, #4]
 80096a8:	f000 fa22 	bl	8009af0 <SDMMC_GetCmdResp1>
 80096ac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80096ae:	69fb      	ldr	r3, [r7, #28]
}
 80096b0:	4618      	mov	r0, r3
 80096b2:	3720      	adds	r7, #32
 80096b4:	46bd      	mov	sp, r7
 80096b6:	bd80      	pop	{r7, pc}

080096b8 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80096b8:	b580      	push	{r7, lr}
 80096ba:	b088      	sub	sp, #32
 80096bc:	af00      	add	r7, sp, #0
 80096be:	6078      	str	r0, [r7, #4]
 80096c0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80096c2:	683b      	ldr	r3, [r7, #0]
 80096c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80096c6:	2312      	movs	r3, #18
 80096c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80096ca:	2340      	movs	r3, #64	; 0x40
 80096cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80096ce:	2300      	movs	r3, #0
 80096d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80096d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80096d6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80096d8:	f107 0308 	add.w	r3, r7, #8
 80096dc:	4619      	mov	r1, r3
 80096de:	6878      	ldr	r0, [r7, #4]
 80096e0:	f7ff ff30 	bl	8009544 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80096e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80096e8:	2112      	movs	r1, #18
 80096ea:	6878      	ldr	r0, [r7, #4]
 80096ec:	f000 fa00 	bl	8009af0 <SDMMC_GetCmdResp1>
 80096f0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80096f2:	69fb      	ldr	r3, [r7, #28]
}
 80096f4:	4618      	mov	r0, r3
 80096f6:	3720      	adds	r7, #32
 80096f8:	46bd      	mov	sp, r7
 80096fa:	bd80      	pop	{r7, pc}

080096fc <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80096fc:	b580      	push	{r7, lr}
 80096fe:	b088      	sub	sp, #32
 8009700:	af00      	add	r7, sp, #0
 8009702:	6078      	str	r0, [r7, #4]
 8009704:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009706:	683b      	ldr	r3, [r7, #0]
 8009708:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800970a:	2318      	movs	r3, #24
 800970c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800970e:	2340      	movs	r3, #64	; 0x40
 8009710:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009712:	2300      	movs	r3, #0
 8009714:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009716:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800971a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800971c:	f107 0308 	add.w	r3, r7, #8
 8009720:	4619      	mov	r1, r3
 8009722:	6878      	ldr	r0, [r7, #4]
 8009724:	f7ff ff0e 	bl	8009544 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8009728:	f241 3288 	movw	r2, #5000	; 0x1388
 800972c:	2118      	movs	r1, #24
 800972e:	6878      	ldr	r0, [r7, #4]
 8009730:	f000 f9de 	bl	8009af0 <SDMMC_GetCmdResp1>
 8009734:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009736:	69fb      	ldr	r3, [r7, #28]
}
 8009738:	4618      	mov	r0, r3
 800973a:	3720      	adds	r7, #32
 800973c:	46bd      	mov	sp, r7
 800973e:	bd80      	pop	{r7, pc}

08009740 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8009740:	b580      	push	{r7, lr}
 8009742:	b088      	sub	sp, #32
 8009744:	af00      	add	r7, sp, #0
 8009746:	6078      	str	r0, [r7, #4]
 8009748:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800974a:	683b      	ldr	r3, [r7, #0]
 800974c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800974e:	2319      	movs	r3, #25
 8009750:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009752:	2340      	movs	r3, #64	; 0x40
 8009754:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009756:	2300      	movs	r3, #0
 8009758:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800975a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800975e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009760:	f107 0308 	add.w	r3, r7, #8
 8009764:	4619      	mov	r1, r3
 8009766:	6878      	ldr	r0, [r7, #4]
 8009768:	f7ff feec 	bl	8009544 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800976c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009770:	2119      	movs	r1, #25
 8009772:	6878      	ldr	r0, [r7, #4]
 8009774:	f000 f9bc 	bl	8009af0 <SDMMC_GetCmdResp1>
 8009778:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800977a:	69fb      	ldr	r3, [r7, #28]
}
 800977c:	4618      	mov	r0, r3
 800977e:	3720      	adds	r7, #32
 8009780:	46bd      	mov	sp, r7
 8009782:	bd80      	pop	{r7, pc}

08009784 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8009784:	b580      	push	{r7, lr}
 8009786:	b088      	sub	sp, #32
 8009788:	af00      	add	r7, sp, #0
 800978a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800978c:	2300      	movs	r3, #0
 800978e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8009790:	230c      	movs	r3, #12
 8009792:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009794:	2340      	movs	r3, #64	; 0x40
 8009796:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009798:	2300      	movs	r3, #0
 800979a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800979c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80097a0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80097a2:	f107 0308 	add.w	r3, r7, #8
 80097a6:	4619      	mov	r1, r3
 80097a8:	6878      	ldr	r0, [r7, #4]
 80097aa:	f7ff fecb 	bl	8009544 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 80097ae:	4a05      	ldr	r2, [pc, #20]	; (80097c4 <SDMMC_CmdStopTransfer+0x40>)
 80097b0:	210c      	movs	r1, #12
 80097b2:	6878      	ldr	r0, [r7, #4]
 80097b4:	f000 f99c 	bl	8009af0 <SDMMC_GetCmdResp1>
 80097b8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80097ba:	69fb      	ldr	r3, [r7, #28]
}
 80097bc:	4618      	mov	r0, r3
 80097be:	3720      	adds	r7, #32
 80097c0:	46bd      	mov	sp, r7
 80097c2:	bd80      	pop	{r7, pc}
 80097c4:	05f5e100 	.word	0x05f5e100

080097c8 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 80097c8:	b580      	push	{r7, lr}
 80097ca:	b08a      	sub	sp, #40	; 0x28
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	60f8      	str	r0, [r7, #12]
 80097d0:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80097d4:	683b      	ldr	r3, [r7, #0]
 80097d6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80097d8:	2307      	movs	r3, #7
 80097da:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80097dc:	2340      	movs	r3, #64	; 0x40
 80097de:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80097e0:	2300      	movs	r3, #0
 80097e2:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80097e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80097e8:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80097ea:	f107 0310 	add.w	r3, r7, #16
 80097ee:	4619      	mov	r1, r3
 80097f0:	68f8      	ldr	r0, [r7, #12]
 80097f2:	f7ff fea7 	bl	8009544 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 80097f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80097fa:	2107      	movs	r1, #7
 80097fc:	68f8      	ldr	r0, [r7, #12]
 80097fe:	f000 f977 	bl	8009af0 <SDMMC_GetCmdResp1>
 8009802:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8009804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009806:	4618      	mov	r0, r3
 8009808:	3728      	adds	r7, #40	; 0x28
 800980a:	46bd      	mov	sp, r7
 800980c:	bd80      	pop	{r7, pc}

0800980e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800980e:	b580      	push	{r7, lr}
 8009810:	b088      	sub	sp, #32
 8009812:	af00      	add	r7, sp, #0
 8009814:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8009816:	2300      	movs	r3, #0
 8009818:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800981a:	2300      	movs	r3, #0
 800981c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800981e:	2300      	movs	r3, #0
 8009820:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009822:	2300      	movs	r3, #0
 8009824:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009826:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800982a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800982c:	f107 0308 	add.w	r3, r7, #8
 8009830:	4619      	mov	r1, r3
 8009832:	6878      	ldr	r0, [r7, #4]
 8009834:	f7ff fe86 	bl	8009544 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8009838:	6878      	ldr	r0, [r7, #4]
 800983a:	f000 f92d 	bl	8009a98 <SDMMC_GetCmdError>
 800983e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009840:	69fb      	ldr	r3, [r7, #28]
}
 8009842:	4618      	mov	r0, r3
 8009844:	3720      	adds	r7, #32
 8009846:	46bd      	mov	sp, r7
 8009848:	bd80      	pop	{r7, pc}

0800984a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800984a:	b580      	push	{r7, lr}
 800984c:	b088      	sub	sp, #32
 800984e:	af00      	add	r7, sp, #0
 8009850:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8009852:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8009856:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8009858:	2308      	movs	r3, #8
 800985a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800985c:	2340      	movs	r3, #64	; 0x40
 800985e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009860:	2300      	movs	r3, #0
 8009862:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009864:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009868:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800986a:	f107 0308 	add.w	r3, r7, #8
 800986e:	4619      	mov	r1, r3
 8009870:	6878      	ldr	r0, [r7, #4]
 8009872:	f7ff fe67 	bl	8009544 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8009876:	6878      	ldr	r0, [r7, #4]
 8009878:	f000 fb24 	bl	8009ec4 <SDMMC_GetCmdResp7>
 800987c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800987e:	69fb      	ldr	r3, [r7, #28]
}
 8009880:	4618      	mov	r0, r3
 8009882:	3720      	adds	r7, #32
 8009884:	46bd      	mov	sp, r7
 8009886:	bd80      	pop	{r7, pc}

08009888 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009888:	b580      	push	{r7, lr}
 800988a:	b088      	sub	sp, #32
 800988c:	af00      	add	r7, sp, #0
 800988e:	6078      	str	r0, [r7, #4]
 8009890:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8009892:	683b      	ldr	r3, [r7, #0]
 8009894:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8009896:	2337      	movs	r3, #55	; 0x37
 8009898:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800989a:	2340      	movs	r3, #64	; 0x40
 800989c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800989e:	2300      	movs	r3, #0
 80098a0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80098a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80098a6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80098a8:	f107 0308 	add.w	r3, r7, #8
 80098ac:	4619      	mov	r1, r3
 80098ae:	6878      	ldr	r0, [r7, #4]
 80098b0:	f7ff fe48 	bl	8009544 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 80098b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80098b8:	2137      	movs	r1, #55	; 0x37
 80098ba:	6878      	ldr	r0, [r7, #4]
 80098bc:	f000 f918 	bl	8009af0 <SDMMC_GetCmdResp1>
 80098c0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80098c2:	69fb      	ldr	r3, [r7, #28]
}
 80098c4:	4618      	mov	r0, r3
 80098c6:	3720      	adds	r7, #32
 80098c8:	46bd      	mov	sp, r7
 80098ca:	bd80      	pop	{r7, pc}

080098cc <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80098cc:	b580      	push	{r7, lr}
 80098ce:	b088      	sub	sp, #32
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	6078      	str	r0, [r7, #4]
 80098d4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80098d6:	683b      	ldr	r3, [r7, #0]
 80098d8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80098dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80098e0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80098e2:	2329      	movs	r3, #41	; 0x29
 80098e4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80098e6:	2340      	movs	r3, #64	; 0x40
 80098e8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80098ea:	2300      	movs	r3, #0
 80098ec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80098ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80098f2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80098f4:	f107 0308 	add.w	r3, r7, #8
 80098f8:	4619      	mov	r1, r3
 80098fa:	6878      	ldr	r0, [r7, #4]
 80098fc:	f7ff fe22 	bl	8009544 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8009900:	6878      	ldr	r0, [r7, #4]
 8009902:	f000 fa2b 	bl	8009d5c <SDMMC_GetCmdResp3>
 8009906:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009908:	69fb      	ldr	r3, [r7, #28]
}
 800990a:	4618      	mov	r0, r3
 800990c:	3720      	adds	r7, #32
 800990e:	46bd      	mov	sp, r7
 8009910:	bd80      	pop	{r7, pc}

08009912 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8009912:	b580      	push	{r7, lr}
 8009914:	b088      	sub	sp, #32
 8009916:	af00      	add	r7, sp, #0
 8009918:	6078      	str	r0, [r7, #4]
 800991a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800991c:	683b      	ldr	r3, [r7, #0]
 800991e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8009920:	2306      	movs	r3, #6
 8009922:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009924:	2340      	movs	r3, #64	; 0x40
 8009926:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009928:	2300      	movs	r3, #0
 800992a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800992c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009930:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009932:	f107 0308 	add.w	r3, r7, #8
 8009936:	4619      	mov	r1, r3
 8009938:	6878      	ldr	r0, [r7, #4]
 800993a:	f7ff fe03 	bl	8009544 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800993e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009942:	2106      	movs	r1, #6
 8009944:	6878      	ldr	r0, [r7, #4]
 8009946:	f000 f8d3 	bl	8009af0 <SDMMC_GetCmdResp1>
 800994a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800994c:	69fb      	ldr	r3, [r7, #28]
}
 800994e:	4618      	mov	r0, r3
 8009950:	3720      	adds	r7, #32
 8009952:	46bd      	mov	sp, r7
 8009954:	bd80      	pop	{r7, pc}

08009956 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8009956:	b580      	push	{r7, lr}
 8009958:	b088      	sub	sp, #32
 800995a:	af00      	add	r7, sp, #0
 800995c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800995e:	2300      	movs	r3, #0
 8009960:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8009962:	2333      	movs	r3, #51	; 0x33
 8009964:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009966:	2340      	movs	r3, #64	; 0x40
 8009968:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800996a:	2300      	movs	r3, #0
 800996c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800996e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009972:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009974:	f107 0308 	add.w	r3, r7, #8
 8009978:	4619      	mov	r1, r3
 800997a:	6878      	ldr	r0, [r7, #4]
 800997c:	f7ff fde2 	bl	8009544 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8009980:	f241 3288 	movw	r2, #5000	; 0x1388
 8009984:	2133      	movs	r1, #51	; 0x33
 8009986:	6878      	ldr	r0, [r7, #4]
 8009988:	f000 f8b2 	bl	8009af0 <SDMMC_GetCmdResp1>
 800998c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800998e:	69fb      	ldr	r3, [r7, #28]
}
 8009990:	4618      	mov	r0, r3
 8009992:	3720      	adds	r7, #32
 8009994:	46bd      	mov	sp, r7
 8009996:	bd80      	pop	{r7, pc}

08009998 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8009998:	b580      	push	{r7, lr}
 800999a:	b088      	sub	sp, #32
 800999c:	af00      	add	r7, sp, #0
 800999e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80099a0:	2300      	movs	r3, #0
 80099a2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80099a4:	2302      	movs	r3, #2
 80099a6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80099a8:	23c0      	movs	r3, #192	; 0xc0
 80099aa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80099ac:	2300      	movs	r3, #0
 80099ae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80099b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80099b4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80099b6:	f107 0308 	add.w	r3, r7, #8
 80099ba:	4619      	mov	r1, r3
 80099bc:	6878      	ldr	r0, [r7, #4]
 80099be:	f7ff fdc1 	bl	8009544 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80099c2:	6878      	ldr	r0, [r7, #4]
 80099c4:	f000 f982 	bl	8009ccc <SDMMC_GetCmdResp2>
 80099c8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80099ca:	69fb      	ldr	r3, [r7, #28]
}
 80099cc:	4618      	mov	r0, r3
 80099ce:	3720      	adds	r7, #32
 80099d0:	46bd      	mov	sp, r7
 80099d2:	bd80      	pop	{r7, pc}

080099d4 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80099d4:	b580      	push	{r7, lr}
 80099d6:	b088      	sub	sp, #32
 80099d8:	af00      	add	r7, sp, #0
 80099da:	6078      	str	r0, [r7, #4]
 80099dc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80099de:	683b      	ldr	r3, [r7, #0]
 80099e0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80099e2:	2309      	movs	r3, #9
 80099e4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80099e6:	23c0      	movs	r3, #192	; 0xc0
 80099e8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80099ea:	2300      	movs	r3, #0
 80099ec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80099ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80099f2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80099f4:	f107 0308 	add.w	r3, r7, #8
 80099f8:	4619      	mov	r1, r3
 80099fa:	6878      	ldr	r0, [r7, #4]
 80099fc:	f7ff fda2 	bl	8009544 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8009a00:	6878      	ldr	r0, [r7, #4]
 8009a02:	f000 f963 	bl	8009ccc <SDMMC_GetCmdResp2>
 8009a06:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009a08:	69fb      	ldr	r3, [r7, #28]
}
 8009a0a:	4618      	mov	r0, r3
 8009a0c:	3720      	adds	r7, #32
 8009a0e:	46bd      	mov	sp, r7
 8009a10:	bd80      	pop	{r7, pc}

08009a12 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8009a12:	b580      	push	{r7, lr}
 8009a14:	b088      	sub	sp, #32
 8009a16:	af00      	add	r7, sp, #0
 8009a18:	6078      	str	r0, [r7, #4]
 8009a1a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8009a1c:	2300      	movs	r3, #0
 8009a1e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8009a20:	2303      	movs	r3, #3
 8009a22:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009a24:	2340      	movs	r3, #64	; 0x40
 8009a26:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009a28:	2300      	movs	r3, #0
 8009a2a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009a2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009a30:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009a32:	f107 0308 	add.w	r3, r7, #8
 8009a36:	4619      	mov	r1, r3
 8009a38:	6878      	ldr	r0, [r7, #4]
 8009a3a:	f7ff fd83 	bl	8009544 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8009a3e:	683a      	ldr	r2, [r7, #0]
 8009a40:	2103      	movs	r1, #3
 8009a42:	6878      	ldr	r0, [r7, #4]
 8009a44:	f000 f9c8 	bl	8009dd8 <SDMMC_GetCmdResp6>
 8009a48:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009a4a:	69fb      	ldr	r3, [r7, #28]
}
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	3720      	adds	r7, #32
 8009a50:	46bd      	mov	sp, r7
 8009a52:	bd80      	pop	{r7, pc}

08009a54 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009a54:	b580      	push	{r7, lr}
 8009a56:	b088      	sub	sp, #32
 8009a58:	af00      	add	r7, sp, #0
 8009a5a:	6078      	str	r0, [r7, #4]
 8009a5c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8009a5e:	683b      	ldr	r3, [r7, #0]
 8009a60:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8009a62:	230d      	movs	r3, #13
 8009a64:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009a66:	2340      	movs	r3, #64	; 0x40
 8009a68:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009a6a:	2300      	movs	r3, #0
 8009a6c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009a6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009a72:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009a74:	f107 0308 	add.w	r3, r7, #8
 8009a78:	4619      	mov	r1, r3
 8009a7a:	6878      	ldr	r0, [r7, #4]
 8009a7c:	f7ff fd62 	bl	8009544 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8009a80:	f241 3288 	movw	r2, #5000	; 0x1388
 8009a84:	210d      	movs	r1, #13
 8009a86:	6878      	ldr	r0, [r7, #4]
 8009a88:	f000 f832 	bl	8009af0 <SDMMC_GetCmdResp1>
 8009a8c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009a8e:	69fb      	ldr	r3, [r7, #28]
}
 8009a90:	4618      	mov	r0, r3
 8009a92:	3720      	adds	r7, #32
 8009a94:	46bd      	mov	sp, r7
 8009a96:	bd80      	pop	{r7, pc}

08009a98 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8009a98:	b480      	push	{r7}
 8009a9a:	b085      	sub	sp, #20
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009aa0:	4b11      	ldr	r3, [pc, #68]	; (8009ae8 <SDMMC_GetCmdError+0x50>)
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	4a11      	ldr	r2, [pc, #68]	; (8009aec <SDMMC_GetCmdError+0x54>)
 8009aa6:	fba2 2303 	umull	r2, r3, r2, r3
 8009aaa:	0a5b      	lsrs	r3, r3, #9
 8009aac:	f241 3288 	movw	r2, #5000	; 0x1388
 8009ab0:	fb02 f303 	mul.w	r3, r2, r3
 8009ab4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	1e5a      	subs	r2, r3, #1
 8009aba:	60fa      	str	r2, [r7, #12]
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d102      	bne.n	8009ac6 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009ac0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009ac4:	e009      	b.n	8009ada <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009aca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d0f1      	beq.n	8009ab6 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	22c5      	movs	r2, #197	; 0xc5
 8009ad6:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8009ad8:	2300      	movs	r3, #0
}
 8009ada:	4618      	mov	r0, r3
 8009adc:	3714      	adds	r7, #20
 8009ade:	46bd      	mov	sp, r7
 8009ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae4:	4770      	bx	lr
 8009ae6:	bf00      	nop
 8009ae8:	20000000 	.word	0x20000000
 8009aec:	10624dd3 	.word	0x10624dd3

08009af0 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8009af0:	b580      	push	{r7, lr}
 8009af2:	b088      	sub	sp, #32
 8009af4:	af00      	add	r7, sp, #0
 8009af6:	60f8      	str	r0, [r7, #12]
 8009af8:	460b      	mov	r3, r1
 8009afa:	607a      	str	r2, [r7, #4]
 8009afc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8009afe:	4b70      	ldr	r3, [pc, #448]	; (8009cc0 <SDMMC_GetCmdResp1+0x1d0>)
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	4a70      	ldr	r2, [pc, #448]	; (8009cc4 <SDMMC_GetCmdResp1+0x1d4>)
 8009b04:	fba2 2303 	umull	r2, r3, r2, r3
 8009b08:	0a5a      	lsrs	r2, r3, #9
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	fb02 f303 	mul.w	r3, r2, r3
 8009b10:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8009b12:	69fb      	ldr	r3, [r7, #28]
 8009b14:	1e5a      	subs	r2, r3, #1
 8009b16:	61fa      	str	r2, [r7, #28]
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d102      	bne.n	8009b22 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009b1c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009b20:	e0c9      	b.n	8009cb6 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b26:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009b28:	69bb      	ldr	r3, [r7, #24]
 8009b2a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d0ef      	beq.n	8009b12 <SDMMC_GetCmdResp1+0x22>
 8009b32:	69bb      	ldr	r3, [r7, #24]
 8009b34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d1ea      	bne.n	8009b12 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b40:	f003 0304 	and.w	r3, r3, #4
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d004      	beq.n	8009b52 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	2204      	movs	r2, #4
 8009b4c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009b4e:	2304      	movs	r3, #4
 8009b50:	e0b1      	b.n	8009cb6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b56:	f003 0301 	and.w	r3, r3, #1
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d004      	beq.n	8009b68 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	2201      	movs	r2, #1
 8009b62:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009b64:	2301      	movs	r3, #1
 8009b66:	e0a6      	b.n	8009cb6 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	22c5      	movs	r2, #197	; 0xc5
 8009b6c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8009b6e:	68f8      	ldr	r0, [r7, #12]
 8009b70:	f7ff fd12 	bl	8009598 <SDIO_GetCommandResponse>
 8009b74:	4603      	mov	r3, r0
 8009b76:	461a      	mov	r2, r3
 8009b78:	7afb      	ldrb	r3, [r7, #11]
 8009b7a:	4293      	cmp	r3, r2
 8009b7c:	d001      	beq.n	8009b82 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009b7e:	2301      	movs	r3, #1
 8009b80:	e099      	b.n	8009cb6 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8009b82:	2100      	movs	r1, #0
 8009b84:	68f8      	ldr	r0, [r7, #12]
 8009b86:	f7ff fd14 	bl	80095b2 <SDIO_GetResponse>
 8009b8a:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8009b8c:	697a      	ldr	r2, [r7, #20]
 8009b8e:	4b4e      	ldr	r3, [pc, #312]	; (8009cc8 <SDMMC_GetCmdResp1+0x1d8>)
 8009b90:	4013      	ands	r3, r2
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d101      	bne.n	8009b9a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8009b96:	2300      	movs	r3, #0
 8009b98:	e08d      	b.n	8009cb6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8009b9a:	697b      	ldr	r3, [r7, #20]
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	da02      	bge.n	8009ba6 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8009ba0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009ba4:	e087      	b.n	8009cb6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8009ba6:	697b      	ldr	r3, [r7, #20]
 8009ba8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d001      	beq.n	8009bb4 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8009bb0:	2340      	movs	r3, #64	; 0x40
 8009bb2:	e080      	b.n	8009cb6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8009bb4:	697b      	ldr	r3, [r7, #20]
 8009bb6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d001      	beq.n	8009bc2 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8009bbe:	2380      	movs	r3, #128	; 0x80
 8009bc0:	e079      	b.n	8009cb6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8009bc2:	697b      	ldr	r3, [r7, #20]
 8009bc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d002      	beq.n	8009bd2 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8009bcc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009bd0:	e071      	b.n	8009cb6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8009bd2:	697b      	ldr	r3, [r7, #20]
 8009bd4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d002      	beq.n	8009be2 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8009bdc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009be0:	e069      	b.n	8009cb6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8009be2:	697b      	ldr	r3, [r7, #20]
 8009be4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d002      	beq.n	8009bf2 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8009bec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009bf0:	e061      	b.n	8009cb6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8009bf2:	697b      	ldr	r3, [r7, #20]
 8009bf4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d002      	beq.n	8009c02 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8009bfc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009c00:	e059      	b.n	8009cb6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8009c02:	697b      	ldr	r3, [r7, #20]
 8009c04:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d002      	beq.n	8009c12 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009c0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009c10:	e051      	b.n	8009cb6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8009c12:	697b      	ldr	r3, [r7, #20]
 8009c14:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d002      	beq.n	8009c22 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009c1c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009c20:	e049      	b.n	8009cb6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8009c22:	697b      	ldr	r3, [r7, #20]
 8009c24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d002      	beq.n	8009c32 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8009c2c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009c30:	e041      	b.n	8009cb6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8009c32:	697b      	ldr	r3, [r7, #20]
 8009c34:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d002      	beq.n	8009c42 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8009c3c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009c40:	e039      	b.n	8009cb6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8009c42:	697b      	ldr	r3, [r7, #20]
 8009c44:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d002      	beq.n	8009c52 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8009c4c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009c50:	e031      	b.n	8009cb6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8009c52:	697b      	ldr	r3, [r7, #20]
 8009c54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d002      	beq.n	8009c62 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8009c5c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009c60:	e029      	b.n	8009cb6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8009c62:	697b      	ldr	r3, [r7, #20]
 8009c64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d002      	beq.n	8009c72 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8009c6c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009c70:	e021      	b.n	8009cb6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8009c72:	697b      	ldr	r3, [r7, #20]
 8009c74:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d002      	beq.n	8009c82 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8009c7c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009c80:	e019      	b.n	8009cb6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8009c82:	697b      	ldr	r3, [r7, #20]
 8009c84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d002      	beq.n	8009c92 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8009c8c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009c90:	e011      	b.n	8009cb6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8009c92:	697b      	ldr	r3, [r7, #20]
 8009c94:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d002      	beq.n	8009ca2 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8009c9c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009ca0:	e009      	b.n	8009cb6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8009ca2:	697b      	ldr	r3, [r7, #20]
 8009ca4:	f003 0308 	and.w	r3, r3, #8
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d002      	beq.n	8009cb2 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8009cac:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8009cb0:	e001      	b.n	8009cb6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009cb2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8009cb6:	4618      	mov	r0, r3
 8009cb8:	3720      	adds	r7, #32
 8009cba:	46bd      	mov	sp, r7
 8009cbc:	bd80      	pop	{r7, pc}
 8009cbe:	bf00      	nop
 8009cc0:	20000000 	.word	0x20000000
 8009cc4:	10624dd3 	.word	0x10624dd3
 8009cc8:	fdffe008 	.word	0xfdffe008

08009ccc <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8009ccc:	b480      	push	{r7}
 8009cce:	b085      	sub	sp, #20
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009cd4:	4b1f      	ldr	r3, [pc, #124]	; (8009d54 <SDMMC_GetCmdResp2+0x88>)
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	4a1f      	ldr	r2, [pc, #124]	; (8009d58 <SDMMC_GetCmdResp2+0x8c>)
 8009cda:	fba2 2303 	umull	r2, r3, r2, r3
 8009cde:	0a5b      	lsrs	r3, r3, #9
 8009ce0:	f241 3288 	movw	r2, #5000	; 0x1388
 8009ce4:	fb02 f303 	mul.w	r3, r2, r3
 8009ce8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	1e5a      	subs	r2, r3, #1
 8009cee:	60fa      	str	r2, [r7, #12]
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d102      	bne.n	8009cfa <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009cf4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009cf8:	e026      	b.n	8009d48 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009cfe:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009d00:	68bb      	ldr	r3, [r7, #8]
 8009d02:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d0ef      	beq.n	8009cea <SDMMC_GetCmdResp2+0x1e>
 8009d0a:	68bb      	ldr	r3, [r7, #8]
 8009d0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d1ea      	bne.n	8009cea <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d18:	f003 0304 	and.w	r3, r3, #4
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d004      	beq.n	8009d2a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	2204      	movs	r2, #4
 8009d24:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009d26:	2304      	movs	r3, #4
 8009d28:	e00e      	b.n	8009d48 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d2e:	f003 0301 	and.w	r3, r3, #1
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d004      	beq.n	8009d40 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	2201      	movs	r2, #1
 8009d3a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009d3c:	2301      	movs	r3, #1
 8009d3e:	e003      	b.n	8009d48 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	22c5      	movs	r2, #197	; 0xc5
 8009d44:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8009d46:	2300      	movs	r3, #0
}
 8009d48:	4618      	mov	r0, r3
 8009d4a:	3714      	adds	r7, #20
 8009d4c:	46bd      	mov	sp, r7
 8009d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d52:	4770      	bx	lr
 8009d54:	20000000 	.word	0x20000000
 8009d58:	10624dd3 	.word	0x10624dd3

08009d5c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8009d5c:	b480      	push	{r7}
 8009d5e:	b085      	sub	sp, #20
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009d64:	4b1a      	ldr	r3, [pc, #104]	; (8009dd0 <SDMMC_GetCmdResp3+0x74>)
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	4a1a      	ldr	r2, [pc, #104]	; (8009dd4 <SDMMC_GetCmdResp3+0x78>)
 8009d6a:	fba2 2303 	umull	r2, r3, r2, r3
 8009d6e:	0a5b      	lsrs	r3, r3, #9
 8009d70:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d74:	fb02 f303 	mul.w	r3, r2, r3
 8009d78:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	1e5a      	subs	r2, r3, #1
 8009d7e:	60fa      	str	r2, [r7, #12]
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d102      	bne.n	8009d8a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009d84:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009d88:	e01b      	b.n	8009dc2 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d8e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009d90:	68bb      	ldr	r3, [r7, #8]
 8009d92:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d0ef      	beq.n	8009d7a <SDMMC_GetCmdResp3+0x1e>
 8009d9a:	68bb      	ldr	r3, [r7, #8]
 8009d9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d1ea      	bne.n	8009d7a <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009da8:	f003 0304 	and.w	r3, r3, #4
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d004      	beq.n	8009dba <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	2204      	movs	r2, #4
 8009db4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009db6:	2304      	movs	r3, #4
 8009db8:	e003      	b.n	8009dc2 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	22c5      	movs	r2, #197	; 0xc5
 8009dbe:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8009dc0:	2300      	movs	r3, #0
}
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	3714      	adds	r7, #20
 8009dc6:	46bd      	mov	sp, r7
 8009dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dcc:	4770      	bx	lr
 8009dce:	bf00      	nop
 8009dd0:	20000000 	.word	0x20000000
 8009dd4:	10624dd3 	.word	0x10624dd3

08009dd8 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8009dd8:	b580      	push	{r7, lr}
 8009dda:	b088      	sub	sp, #32
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	60f8      	str	r0, [r7, #12]
 8009de0:	460b      	mov	r3, r1
 8009de2:	607a      	str	r2, [r7, #4]
 8009de4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009de6:	4b35      	ldr	r3, [pc, #212]	; (8009ebc <SDMMC_GetCmdResp6+0xe4>)
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	4a35      	ldr	r2, [pc, #212]	; (8009ec0 <SDMMC_GetCmdResp6+0xe8>)
 8009dec:	fba2 2303 	umull	r2, r3, r2, r3
 8009df0:	0a5b      	lsrs	r3, r3, #9
 8009df2:	f241 3288 	movw	r2, #5000	; 0x1388
 8009df6:	fb02 f303 	mul.w	r3, r2, r3
 8009dfa:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8009dfc:	69fb      	ldr	r3, [r7, #28]
 8009dfe:	1e5a      	subs	r2, r3, #1
 8009e00:	61fa      	str	r2, [r7, #28]
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d102      	bne.n	8009e0c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009e06:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009e0a:	e052      	b.n	8009eb2 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e10:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009e12:	69bb      	ldr	r3, [r7, #24]
 8009e14:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d0ef      	beq.n	8009dfc <SDMMC_GetCmdResp6+0x24>
 8009e1c:	69bb      	ldr	r3, [r7, #24]
 8009e1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d1ea      	bne.n	8009dfc <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e2a:	f003 0304 	and.w	r3, r3, #4
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d004      	beq.n	8009e3c <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	2204      	movs	r2, #4
 8009e36:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009e38:	2304      	movs	r3, #4
 8009e3a:	e03a      	b.n	8009eb2 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e40:	f003 0301 	and.w	r3, r3, #1
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d004      	beq.n	8009e52 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	2201      	movs	r2, #1
 8009e4c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009e4e:	2301      	movs	r3, #1
 8009e50:	e02f      	b.n	8009eb2 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8009e52:	68f8      	ldr	r0, [r7, #12]
 8009e54:	f7ff fba0 	bl	8009598 <SDIO_GetCommandResponse>
 8009e58:	4603      	mov	r3, r0
 8009e5a:	461a      	mov	r2, r3
 8009e5c:	7afb      	ldrb	r3, [r7, #11]
 8009e5e:	4293      	cmp	r3, r2
 8009e60:	d001      	beq.n	8009e66 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009e62:	2301      	movs	r3, #1
 8009e64:	e025      	b.n	8009eb2 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	22c5      	movs	r2, #197	; 0xc5
 8009e6a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8009e6c:	2100      	movs	r1, #0
 8009e6e:	68f8      	ldr	r0, [r7, #12]
 8009e70:	f7ff fb9f 	bl	80095b2 <SDIO_GetResponse>
 8009e74:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8009e76:	697b      	ldr	r3, [r7, #20]
 8009e78:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d106      	bne.n	8009e8e <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8009e80:	697b      	ldr	r3, [r7, #20]
 8009e82:	0c1b      	lsrs	r3, r3, #16
 8009e84:	b29a      	uxth	r2, r3
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8009e8a:	2300      	movs	r3, #0
 8009e8c:	e011      	b.n	8009eb2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8009e8e:	697b      	ldr	r3, [r7, #20]
 8009e90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d002      	beq.n	8009e9e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009e98:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009e9c:	e009      	b.n	8009eb2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8009e9e:	697b      	ldr	r3, [r7, #20]
 8009ea0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d002      	beq.n	8009eae <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009ea8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009eac:	e001      	b.n	8009eb2 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009eae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8009eb2:	4618      	mov	r0, r3
 8009eb4:	3720      	adds	r7, #32
 8009eb6:	46bd      	mov	sp, r7
 8009eb8:	bd80      	pop	{r7, pc}
 8009eba:	bf00      	nop
 8009ebc:	20000000 	.word	0x20000000
 8009ec0:	10624dd3 	.word	0x10624dd3

08009ec4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8009ec4:	b480      	push	{r7}
 8009ec6:	b085      	sub	sp, #20
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009ecc:	4b22      	ldr	r3, [pc, #136]	; (8009f58 <SDMMC_GetCmdResp7+0x94>)
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	4a22      	ldr	r2, [pc, #136]	; (8009f5c <SDMMC_GetCmdResp7+0x98>)
 8009ed2:	fba2 2303 	umull	r2, r3, r2, r3
 8009ed6:	0a5b      	lsrs	r3, r3, #9
 8009ed8:	f241 3288 	movw	r2, #5000	; 0x1388
 8009edc:	fb02 f303 	mul.w	r3, r2, r3
 8009ee0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	1e5a      	subs	r2, r3, #1
 8009ee6:	60fa      	str	r2, [r7, #12]
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d102      	bne.n	8009ef2 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009eec:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009ef0:	e02c      	b.n	8009f4c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ef6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009ef8:	68bb      	ldr	r3, [r7, #8]
 8009efa:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d0ef      	beq.n	8009ee2 <SDMMC_GetCmdResp7+0x1e>
 8009f02:	68bb      	ldr	r3, [r7, #8]
 8009f04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d1ea      	bne.n	8009ee2 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f10:	f003 0304 	and.w	r3, r3, #4
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d004      	beq.n	8009f22 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	2204      	movs	r2, #4
 8009f1c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009f1e:	2304      	movs	r3, #4
 8009f20:	e014      	b.n	8009f4c <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f26:	f003 0301 	and.w	r3, r3, #1
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d004      	beq.n	8009f38 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	2201      	movs	r2, #1
 8009f32:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009f34:	2301      	movs	r3, #1
 8009f36:	e009      	b.n	8009f4c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d002      	beq.n	8009f4a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	2240      	movs	r2, #64	; 0x40
 8009f48:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8009f4a:	2300      	movs	r3, #0
  
}
 8009f4c:	4618      	mov	r0, r3
 8009f4e:	3714      	adds	r7, #20
 8009f50:	46bd      	mov	sp, r7
 8009f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f56:	4770      	bx	lr
 8009f58:	20000000 	.word	0x20000000
 8009f5c:	10624dd3 	.word	0x10624dd3

08009f60 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8009f60:	b580      	push	{r7, lr}
 8009f62:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8009f64:	4904      	ldr	r1, [pc, #16]	; (8009f78 <MX_FATFS_Init+0x18>)
 8009f66:	4805      	ldr	r0, [pc, #20]	; (8009f7c <MX_FATFS_Init+0x1c>)
 8009f68:	f000 fe80 	bl	800ac6c <FATFS_LinkDriver>
 8009f6c:	4603      	mov	r3, r0
 8009f6e:	461a      	mov	r2, r3
 8009f70:	4b03      	ldr	r3, [pc, #12]	; (8009f80 <MX_FATFS_Init+0x20>)
 8009f72:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8009f74:	bf00      	nop
 8009f76:	bd80      	pop	{r7, pc}
 8009f78:	200007c0 	.word	0x200007c0
 8009f7c:	0801831c 	.word	0x0801831c
 8009f80:	200007bc 	.word	0x200007bc

08009f84 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8009f84:	b580      	push	{r7, lr}
 8009f86:	b082      	sub	sp, #8
 8009f88:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8009f8a:	2300      	movs	r3, #0
 8009f8c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8009f8e:	f000 f896 	bl	800a0be <BSP_SD_IsDetected>
 8009f92:	4603      	mov	r3, r0
 8009f94:	2b01      	cmp	r3, #1
 8009f96:	d001      	beq.n	8009f9c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8009f98:	2301      	movs	r3, #1
 8009f9a:	e012      	b.n	8009fc2 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8009f9c:	480b      	ldr	r0, [pc, #44]	; (8009fcc <BSP_SD_Init+0x48>)
 8009f9e:	f7fc f865 	bl	800606c <HAL_SD_Init>
 8009fa2:	4603      	mov	r3, r0
 8009fa4:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8009fa6:	79fb      	ldrb	r3, [r7, #7]
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d109      	bne.n	8009fc0 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8009fac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009fb0:	4806      	ldr	r0, [pc, #24]	; (8009fcc <BSP_SD_Init+0x48>)
 8009fb2:	f7fc fe31 	bl	8006c18 <HAL_SD_ConfigWideBusOperation>
 8009fb6:	4603      	mov	r3, r0
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d001      	beq.n	8009fc0 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8009fbc:	2301      	movs	r3, #1
 8009fbe:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8009fc0:	79fb      	ldrb	r3, [r7, #7]
}
 8009fc2:	4618      	mov	r0, r3
 8009fc4:	3708      	adds	r7, #8
 8009fc6:	46bd      	mov	sp, r7
 8009fc8:	bd80      	pop	{r7, pc}
 8009fca:	bf00      	nop
 8009fcc:	200004e8 	.word	0x200004e8

08009fd0 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8009fd0:	b580      	push	{r7, lr}
 8009fd2:	b086      	sub	sp, #24
 8009fd4:	af00      	add	r7, sp, #0
 8009fd6:	60f8      	str	r0, [r7, #12]
 8009fd8:	60b9      	str	r1, [r7, #8]
 8009fda:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8009fdc:	2300      	movs	r3, #0
 8009fde:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	68ba      	ldr	r2, [r7, #8]
 8009fe4:	68f9      	ldr	r1, [r7, #12]
 8009fe6:	4806      	ldr	r0, [pc, #24]	; (800a000 <BSP_SD_ReadBlocks_DMA+0x30>)
 8009fe8:	f7fc f8ee 	bl	80061c8 <HAL_SD_ReadBlocks_DMA>
 8009fec:	4603      	mov	r3, r0
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d001      	beq.n	8009ff6 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8009ff2:	2301      	movs	r3, #1
 8009ff4:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8009ff6:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ff8:	4618      	mov	r0, r3
 8009ffa:	3718      	adds	r7, #24
 8009ffc:	46bd      	mov	sp, r7
 8009ffe:	bd80      	pop	{r7, pc}
 800a000:	200004e8 	.word	0x200004e8

0800a004 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800a004:	b580      	push	{r7, lr}
 800a006:	b086      	sub	sp, #24
 800a008:	af00      	add	r7, sp, #0
 800a00a:	60f8      	str	r0, [r7, #12]
 800a00c:	60b9      	str	r1, [r7, #8]
 800a00e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800a010:	2300      	movs	r3, #0
 800a012:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	68ba      	ldr	r2, [r7, #8]
 800a018:	68f9      	ldr	r1, [r7, #12]
 800a01a:	4806      	ldr	r0, [pc, #24]	; (800a034 <BSP_SD_WriteBlocks_DMA+0x30>)
 800a01c:	f7fc f9b6 	bl	800638c <HAL_SD_WriteBlocks_DMA>
 800a020:	4603      	mov	r3, r0
 800a022:	2b00      	cmp	r3, #0
 800a024:	d001      	beq.n	800a02a <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800a026:	2301      	movs	r3, #1
 800a028:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800a02a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a02c:	4618      	mov	r0, r3
 800a02e:	3718      	adds	r7, #24
 800a030:	46bd      	mov	sp, r7
 800a032:	bd80      	pop	{r7, pc}
 800a034:	200004e8 	.word	0x200004e8

0800a038 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800a038:	b580      	push	{r7, lr}
 800a03a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800a03c:	4805      	ldr	r0, [pc, #20]	; (800a054 <BSP_SD_GetCardState+0x1c>)
 800a03e:	f7fc fe85 	bl	8006d4c <HAL_SD_GetCardState>
 800a042:	4603      	mov	r3, r0
 800a044:	2b04      	cmp	r3, #4
 800a046:	bf14      	ite	ne
 800a048:	2301      	movne	r3, #1
 800a04a:	2300      	moveq	r3, #0
 800a04c:	b2db      	uxtb	r3, r3
}
 800a04e:	4618      	mov	r0, r3
 800a050:	bd80      	pop	{r7, pc}
 800a052:	bf00      	nop
 800a054:	200004e8 	.word	0x200004e8

0800a058 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800a058:	b580      	push	{r7, lr}
 800a05a:	b082      	sub	sp, #8
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800a060:	6879      	ldr	r1, [r7, #4]
 800a062:	4803      	ldr	r0, [pc, #12]	; (800a070 <BSP_SD_GetCardInfo+0x18>)
 800a064:	f7fc fdac 	bl	8006bc0 <HAL_SD_GetCardInfo>
}
 800a068:	bf00      	nop
 800a06a:	3708      	adds	r7, #8
 800a06c:	46bd      	mov	sp, r7
 800a06e:	bd80      	pop	{r7, pc}
 800a070:	200004e8 	.word	0x200004e8

0800a074 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800a074:	b580      	push	{r7, lr}
 800a076:	b082      	sub	sp, #8
 800a078:	af00      	add	r7, sp, #0
 800a07a:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800a07c:	f000 f818 	bl	800a0b0 <BSP_SD_AbortCallback>
}
 800a080:	bf00      	nop
 800a082:	3708      	adds	r7, #8
 800a084:	46bd      	mov	sp, r7
 800a086:	bd80      	pop	{r7, pc}

0800a088 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800a088:	b580      	push	{r7, lr}
 800a08a:	b082      	sub	sp, #8
 800a08c:	af00      	add	r7, sp, #0
 800a08e:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800a090:	f000 f9a8 	bl	800a3e4 <BSP_SD_WriteCpltCallback>
}
 800a094:	bf00      	nop
 800a096:	3708      	adds	r7, #8
 800a098:	46bd      	mov	sp, r7
 800a09a:	bd80      	pop	{r7, pc}

0800a09c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800a09c:	b580      	push	{r7, lr}
 800a09e:	b082      	sub	sp, #8
 800a0a0:	af00      	add	r7, sp, #0
 800a0a2:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800a0a4:	f000 f9aa 	bl	800a3fc <BSP_SD_ReadCpltCallback>
}
 800a0a8:	bf00      	nop
 800a0aa:	3708      	adds	r7, #8
 800a0ac:	46bd      	mov	sp, r7
 800a0ae:	bd80      	pop	{r7, pc}

0800a0b0 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800a0b0:	b480      	push	{r7}
 800a0b2:	af00      	add	r7, sp, #0

}
 800a0b4:	bf00      	nop
 800a0b6:	46bd      	mov	sp, r7
 800a0b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0bc:	4770      	bx	lr

0800a0be <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800a0be:	b580      	push	{r7, lr}
 800a0c0:	b082      	sub	sp, #8
 800a0c2:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800a0c4:	2301      	movs	r3, #1
 800a0c6:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800a0c8:	f000 f80c 	bl	800a0e4 <BSP_PlatformIsDetected>
 800a0cc:	4603      	mov	r3, r0
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d101      	bne.n	800a0d6 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800a0d2:	2300      	movs	r3, #0
 800a0d4:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800a0d6:	79fb      	ldrb	r3, [r7, #7]
 800a0d8:	b2db      	uxtb	r3, r3
}
 800a0da:	4618      	mov	r0, r3
 800a0dc:	3708      	adds	r7, #8
 800a0de:	46bd      	mov	sp, r7
 800a0e0:	bd80      	pop	{r7, pc}
	...

0800a0e4 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800a0e4:	b580      	push	{r7, lr}
 800a0e6:	b082      	sub	sp, #8
 800a0e8:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800a0ea:	2301      	movs	r3, #1
 800a0ec:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800a0ee:	2108      	movs	r1, #8
 800a0f0:	4806      	ldr	r0, [pc, #24]	; (800a10c <BSP_PlatformIsDetected+0x28>)
 800a0f2:	f7fb f8ed 	bl	80052d0 <HAL_GPIO_ReadPin>
 800a0f6:	4603      	mov	r3, r0
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d001      	beq.n	800a100 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 800a0fc:	2300      	movs	r3, #0
 800a0fe:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800a100:	79fb      	ldrb	r3, [r7, #7]
}
 800a102:	4618      	mov	r0, r3
 800a104:	3708      	adds	r7, #8
 800a106:	46bd      	mov	sp, r7
 800a108:	bd80      	pop	{r7, pc}
 800a10a:	bf00      	nop
 800a10c:	40020c00 	.word	0x40020c00

0800a110 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800a110:	b580      	push	{r7, lr}
 800a112:	b084      	sub	sp, #16
 800a114:	af00      	add	r7, sp, #0
 800a116:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800a118:	f7f7 ffc2 	bl	80020a0 <HAL_GetTick>
 800a11c:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800a11e:	e006      	b.n	800a12e <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800a120:	f7ff ff8a 	bl	800a038 <BSP_SD_GetCardState>
 800a124:	4603      	mov	r3, r0
 800a126:	2b00      	cmp	r3, #0
 800a128:	d101      	bne.n	800a12e <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800a12a:	2300      	movs	r3, #0
 800a12c:	e009      	b.n	800a142 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800a12e:	f7f7 ffb7 	bl	80020a0 <HAL_GetTick>
 800a132:	4602      	mov	r2, r0
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	1ad3      	subs	r3, r2, r3
 800a138:	687a      	ldr	r2, [r7, #4]
 800a13a:	429a      	cmp	r2, r3
 800a13c:	d8f0      	bhi.n	800a120 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800a13e:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a142:	4618      	mov	r0, r3
 800a144:	3710      	adds	r7, #16
 800a146:	46bd      	mov	sp, r7
 800a148:	bd80      	pop	{r7, pc}
	...

0800a14c <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800a14c:	b580      	push	{r7, lr}
 800a14e:	b082      	sub	sp, #8
 800a150:	af00      	add	r7, sp, #0
 800a152:	4603      	mov	r3, r0
 800a154:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800a156:	4b0b      	ldr	r3, [pc, #44]	; (800a184 <SD_CheckStatus+0x38>)
 800a158:	2201      	movs	r2, #1
 800a15a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800a15c:	f7ff ff6c 	bl	800a038 <BSP_SD_GetCardState>
 800a160:	4603      	mov	r3, r0
 800a162:	2b00      	cmp	r3, #0
 800a164:	d107      	bne.n	800a176 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800a166:	4b07      	ldr	r3, [pc, #28]	; (800a184 <SD_CheckStatus+0x38>)
 800a168:	781b      	ldrb	r3, [r3, #0]
 800a16a:	b2db      	uxtb	r3, r3
 800a16c:	f023 0301 	bic.w	r3, r3, #1
 800a170:	b2da      	uxtb	r2, r3
 800a172:	4b04      	ldr	r3, [pc, #16]	; (800a184 <SD_CheckStatus+0x38>)
 800a174:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800a176:	4b03      	ldr	r3, [pc, #12]	; (800a184 <SD_CheckStatus+0x38>)
 800a178:	781b      	ldrb	r3, [r3, #0]
 800a17a:	b2db      	uxtb	r3, r3
}
 800a17c:	4618      	mov	r0, r3
 800a17e:	3708      	adds	r7, #8
 800a180:	46bd      	mov	sp, r7
 800a182:	bd80      	pop	{r7, pc}
 800a184:	20000009 	.word	0x20000009

0800a188 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800a188:	b580      	push	{r7, lr}
 800a18a:	b082      	sub	sp, #8
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	4603      	mov	r3, r0
 800a190:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800a192:	f7ff fef7 	bl	8009f84 <BSP_SD_Init>
 800a196:	4603      	mov	r3, r0
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d107      	bne.n	800a1ac <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800a19c:	79fb      	ldrb	r3, [r7, #7]
 800a19e:	4618      	mov	r0, r3
 800a1a0:	f7ff ffd4 	bl	800a14c <SD_CheckStatus>
 800a1a4:	4603      	mov	r3, r0
 800a1a6:	461a      	mov	r2, r3
 800a1a8:	4b04      	ldr	r3, [pc, #16]	; (800a1bc <SD_initialize+0x34>)
 800a1aa:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800a1ac:	4b03      	ldr	r3, [pc, #12]	; (800a1bc <SD_initialize+0x34>)
 800a1ae:	781b      	ldrb	r3, [r3, #0]
 800a1b0:	b2db      	uxtb	r3, r3
}
 800a1b2:	4618      	mov	r0, r3
 800a1b4:	3708      	adds	r7, #8
 800a1b6:	46bd      	mov	sp, r7
 800a1b8:	bd80      	pop	{r7, pc}
 800a1ba:	bf00      	nop
 800a1bc:	20000009 	.word	0x20000009

0800a1c0 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800a1c0:	b580      	push	{r7, lr}
 800a1c2:	b082      	sub	sp, #8
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	4603      	mov	r3, r0
 800a1c8:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800a1ca:	79fb      	ldrb	r3, [r7, #7]
 800a1cc:	4618      	mov	r0, r3
 800a1ce:	f7ff ffbd 	bl	800a14c <SD_CheckStatus>
 800a1d2:	4603      	mov	r3, r0
}
 800a1d4:	4618      	mov	r0, r3
 800a1d6:	3708      	adds	r7, #8
 800a1d8:	46bd      	mov	sp, r7
 800a1da:	bd80      	pop	{r7, pc}

0800a1dc <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800a1dc:	b580      	push	{r7, lr}
 800a1de:	b086      	sub	sp, #24
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	60b9      	str	r1, [r7, #8]
 800a1e4:	607a      	str	r2, [r7, #4]
 800a1e6:	603b      	str	r3, [r7, #0]
 800a1e8:	4603      	mov	r3, r0
 800a1ea:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800a1ec:	2301      	movs	r3, #1
 800a1ee:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800a1f0:	f247 5030 	movw	r0, #30000	; 0x7530
 800a1f4:	f7ff ff8c 	bl	800a110 <SD_CheckStatusWithTimeout>
 800a1f8:	4603      	mov	r3, r0
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	da01      	bge.n	800a202 <SD_read+0x26>
  {
    return res;
 800a1fe:	7dfb      	ldrb	r3, [r7, #23]
 800a200:	e03b      	b.n	800a27a <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800a202:	683a      	ldr	r2, [r7, #0]
 800a204:	6879      	ldr	r1, [r7, #4]
 800a206:	68b8      	ldr	r0, [r7, #8]
 800a208:	f7ff fee2 	bl	8009fd0 <BSP_SD_ReadBlocks_DMA>
 800a20c:	4603      	mov	r3, r0
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d132      	bne.n	800a278 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800a212:	4b1c      	ldr	r3, [pc, #112]	; (800a284 <SD_read+0xa8>)
 800a214:	2200      	movs	r2, #0
 800a216:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800a218:	f7f7 ff42 	bl	80020a0 <HAL_GetTick>
 800a21c:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800a21e:	bf00      	nop
 800a220:	4b18      	ldr	r3, [pc, #96]	; (800a284 <SD_read+0xa8>)
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	2b00      	cmp	r3, #0
 800a226:	d108      	bne.n	800a23a <SD_read+0x5e>
 800a228:	f7f7 ff3a 	bl	80020a0 <HAL_GetTick>
 800a22c:	4602      	mov	r2, r0
 800a22e:	693b      	ldr	r3, [r7, #16]
 800a230:	1ad3      	subs	r3, r2, r3
 800a232:	f247 522f 	movw	r2, #29999	; 0x752f
 800a236:	4293      	cmp	r3, r2
 800a238:	d9f2      	bls.n	800a220 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 800a23a:	4b12      	ldr	r3, [pc, #72]	; (800a284 <SD_read+0xa8>)
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d102      	bne.n	800a248 <SD_read+0x6c>
      {
        res = RES_ERROR;
 800a242:	2301      	movs	r3, #1
 800a244:	75fb      	strb	r3, [r7, #23]
 800a246:	e017      	b.n	800a278 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800a248:	4b0e      	ldr	r3, [pc, #56]	; (800a284 <SD_read+0xa8>)
 800a24a:	2200      	movs	r2, #0
 800a24c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800a24e:	f7f7 ff27 	bl	80020a0 <HAL_GetTick>
 800a252:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800a254:	e007      	b.n	800a266 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800a256:	f7ff feef 	bl	800a038 <BSP_SD_GetCardState>
 800a25a:	4603      	mov	r3, r0
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d102      	bne.n	800a266 <SD_read+0x8a>
          {
            res = RES_OK;
 800a260:	2300      	movs	r3, #0
 800a262:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800a264:	e008      	b.n	800a278 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800a266:	f7f7 ff1b 	bl	80020a0 <HAL_GetTick>
 800a26a:	4602      	mov	r2, r0
 800a26c:	693b      	ldr	r3, [r7, #16]
 800a26e:	1ad3      	subs	r3, r2, r3
 800a270:	f247 522f 	movw	r2, #29999	; 0x752f
 800a274:	4293      	cmp	r3, r2
 800a276:	d9ee      	bls.n	800a256 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800a278:	7dfb      	ldrb	r3, [r7, #23]
}
 800a27a:	4618      	mov	r0, r3
 800a27c:	3718      	adds	r7, #24
 800a27e:	46bd      	mov	sp, r7
 800a280:	bd80      	pop	{r7, pc}
 800a282:	bf00      	nop
 800a284:	200000a4 	.word	0x200000a4

0800a288 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800a288:	b580      	push	{r7, lr}
 800a28a:	b086      	sub	sp, #24
 800a28c:	af00      	add	r7, sp, #0
 800a28e:	60b9      	str	r1, [r7, #8]
 800a290:	607a      	str	r2, [r7, #4]
 800a292:	603b      	str	r3, [r7, #0]
 800a294:	4603      	mov	r3, r0
 800a296:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800a298:	2301      	movs	r3, #1
 800a29a:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800a29c:	4b24      	ldr	r3, [pc, #144]	; (800a330 <SD_write+0xa8>)
 800a29e:	2200      	movs	r2, #0
 800a2a0:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800a2a2:	f247 5030 	movw	r0, #30000	; 0x7530
 800a2a6:	f7ff ff33 	bl	800a110 <SD_CheckStatusWithTimeout>
 800a2aa:	4603      	mov	r3, r0
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	da01      	bge.n	800a2b4 <SD_write+0x2c>
  {
    return res;
 800a2b0:	7dfb      	ldrb	r3, [r7, #23]
 800a2b2:	e038      	b.n	800a326 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800a2b4:	683a      	ldr	r2, [r7, #0]
 800a2b6:	6879      	ldr	r1, [r7, #4]
 800a2b8:	68b8      	ldr	r0, [r7, #8]
 800a2ba:	f7ff fea3 	bl	800a004 <BSP_SD_WriteBlocks_DMA>
 800a2be:	4603      	mov	r3, r0
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d12f      	bne.n	800a324 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800a2c4:	f7f7 feec 	bl	80020a0 <HAL_GetTick>
 800a2c8:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800a2ca:	bf00      	nop
 800a2cc:	4b18      	ldr	r3, [pc, #96]	; (800a330 <SD_write+0xa8>)
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d108      	bne.n	800a2e6 <SD_write+0x5e>
 800a2d4:	f7f7 fee4 	bl	80020a0 <HAL_GetTick>
 800a2d8:	4602      	mov	r2, r0
 800a2da:	693b      	ldr	r3, [r7, #16]
 800a2dc:	1ad3      	subs	r3, r2, r3
 800a2de:	f247 522f 	movw	r2, #29999	; 0x752f
 800a2e2:	4293      	cmp	r3, r2
 800a2e4:	d9f2      	bls.n	800a2cc <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 800a2e6:	4b12      	ldr	r3, [pc, #72]	; (800a330 <SD_write+0xa8>)
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d102      	bne.n	800a2f4 <SD_write+0x6c>
      {
        res = RES_ERROR;
 800a2ee:	2301      	movs	r3, #1
 800a2f0:	75fb      	strb	r3, [r7, #23]
 800a2f2:	e017      	b.n	800a324 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800a2f4:	4b0e      	ldr	r3, [pc, #56]	; (800a330 <SD_write+0xa8>)
 800a2f6:	2200      	movs	r2, #0
 800a2f8:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800a2fa:	f7f7 fed1 	bl	80020a0 <HAL_GetTick>
 800a2fe:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800a300:	e007      	b.n	800a312 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800a302:	f7ff fe99 	bl	800a038 <BSP_SD_GetCardState>
 800a306:	4603      	mov	r3, r0
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d102      	bne.n	800a312 <SD_write+0x8a>
          {
            res = RES_OK;
 800a30c:	2300      	movs	r3, #0
 800a30e:	75fb      	strb	r3, [r7, #23]
            break;
 800a310:	e008      	b.n	800a324 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800a312:	f7f7 fec5 	bl	80020a0 <HAL_GetTick>
 800a316:	4602      	mov	r2, r0
 800a318:	693b      	ldr	r3, [r7, #16]
 800a31a:	1ad3      	subs	r3, r2, r3
 800a31c:	f247 522f 	movw	r2, #29999	; 0x752f
 800a320:	4293      	cmp	r3, r2
 800a322:	d9ee      	bls.n	800a302 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800a324:	7dfb      	ldrb	r3, [r7, #23]
}
 800a326:	4618      	mov	r0, r3
 800a328:	3718      	adds	r7, #24
 800a32a:	46bd      	mov	sp, r7
 800a32c:	bd80      	pop	{r7, pc}
 800a32e:	bf00      	nop
 800a330:	200000a0 	.word	0x200000a0

0800a334 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800a334:	b580      	push	{r7, lr}
 800a336:	b08c      	sub	sp, #48	; 0x30
 800a338:	af00      	add	r7, sp, #0
 800a33a:	4603      	mov	r3, r0
 800a33c:	603a      	str	r2, [r7, #0]
 800a33e:	71fb      	strb	r3, [r7, #7]
 800a340:	460b      	mov	r3, r1
 800a342:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800a344:	2301      	movs	r3, #1
 800a346:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800a34a:	4b25      	ldr	r3, [pc, #148]	; (800a3e0 <SD_ioctl+0xac>)
 800a34c:	781b      	ldrb	r3, [r3, #0]
 800a34e:	b2db      	uxtb	r3, r3
 800a350:	f003 0301 	and.w	r3, r3, #1
 800a354:	2b00      	cmp	r3, #0
 800a356:	d001      	beq.n	800a35c <SD_ioctl+0x28>
 800a358:	2303      	movs	r3, #3
 800a35a:	e03c      	b.n	800a3d6 <SD_ioctl+0xa2>

  switch (cmd)
 800a35c:	79bb      	ldrb	r3, [r7, #6]
 800a35e:	2b03      	cmp	r3, #3
 800a360:	d834      	bhi.n	800a3cc <SD_ioctl+0x98>
 800a362:	a201      	add	r2, pc, #4	; (adr r2, 800a368 <SD_ioctl+0x34>)
 800a364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a368:	0800a379 	.word	0x0800a379
 800a36c:	0800a381 	.word	0x0800a381
 800a370:	0800a399 	.word	0x0800a399
 800a374:	0800a3b3 	.word	0x0800a3b3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800a378:	2300      	movs	r3, #0
 800a37a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a37e:	e028      	b.n	800a3d2 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800a380:	f107 030c 	add.w	r3, r7, #12
 800a384:	4618      	mov	r0, r3
 800a386:	f7ff fe67 	bl	800a058 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800a38a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a38c:	683b      	ldr	r3, [r7, #0]
 800a38e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800a390:	2300      	movs	r3, #0
 800a392:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a396:	e01c      	b.n	800a3d2 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800a398:	f107 030c 	add.w	r3, r7, #12
 800a39c:	4618      	mov	r0, r3
 800a39e:	f7ff fe5b 	bl	800a058 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800a3a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3a4:	b29a      	uxth	r2, r3
 800a3a6:	683b      	ldr	r3, [r7, #0]
 800a3a8:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800a3aa:	2300      	movs	r3, #0
 800a3ac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a3b0:	e00f      	b.n	800a3d2 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800a3b2:	f107 030c 	add.w	r3, r7, #12
 800a3b6:	4618      	mov	r0, r3
 800a3b8:	f7ff fe4e 	bl	800a058 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800a3bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3be:	0a5a      	lsrs	r2, r3, #9
 800a3c0:	683b      	ldr	r3, [r7, #0]
 800a3c2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800a3c4:	2300      	movs	r3, #0
 800a3c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a3ca:	e002      	b.n	800a3d2 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800a3cc:	2304      	movs	r3, #4
 800a3ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800a3d2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800a3d6:	4618      	mov	r0, r3
 800a3d8:	3730      	adds	r7, #48	; 0x30
 800a3da:	46bd      	mov	sp, r7
 800a3dc:	bd80      	pop	{r7, pc}
 800a3de:	bf00      	nop
 800a3e0:	20000009 	.word	0x20000009

0800a3e4 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800a3e4:	b480      	push	{r7}
 800a3e6:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800a3e8:	4b03      	ldr	r3, [pc, #12]	; (800a3f8 <BSP_SD_WriteCpltCallback+0x14>)
 800a3ea:	2201      	movs	r2, #1
 800a3ec:	601a      	str	r2, [r3, #0]
}
 800a3ee:	bf00      	nop
 800a3f0:	46bd      	mov	sp, r7
 800a3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f6:	4770      	bx	lr
 800a3f8:	200000a0 	.word	0x200000a0

0800a3fc <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800a3fc:	b480      	push	{r7}
 800a3fe:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800a400:	4b03      	ldr	r3, [pc, #12]	; (800a410 <BSP_SD_ReadCpltCallback+0x14>)
 800a402:	2201      	movs	r2, #1
 800a404:	601a      	str	r2, [r3, #0]
}
 800a406:	bf00      	nop
 800a408:	46bd      	mov	sp, r7
 800a40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a40e:	4770      	bx	lr
 800a410:	200000a4 	.word	0x200000a4

0800a414 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800a414:	b580      	push	{r7, lr}
 800a416:	b084      	sub	sp, #16
 800a418:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800a41a:	4b8d      	ldr	r3, [pc, #564]	; (800a650 <MX_LWIP_Init+0x23c>)
 800a41c:	22c0      	movs	r2, #192	; 0xc0
 800a41e:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 800a420:	4b8b      	ldr	r3, [pc, #556]	; (800a650 <MX_LWIP_Init+0x23c>)
 800a422:	22a8      	movs	r2, #168	; 0xa8
 800a424:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 800a426:	4b8a      	ldr	r3, [pc, #552]	; (800a650 <MX_LWIP_Init+0x23c>)
 800a428:	2200      	movs	r2, #0
 800a42a:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 235;
 800a42c:	4b88      	ldr	r3, [pc, #544]	; (800a650 <MX_LWIP_Init+0x23c>)
 800a42e:	22eb      	movs	r2, #235	; 0xeb
 800a430:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800a432:	4b88      	ldr	r3, [pc, #544]	; (800a654 <MX_LWIP_Init+0x240>)
 800a434:	22ff      	movs	r2, #255	; 0xff
 800a436:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800a438:	4b86      	ldr	r3, [pc, #536]	; (800a654 <MX_LWIP_Init+0x240>)
 800a43a:	22ff      	movs	r2, #255	; 0xff
 800a43c:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800a43e:	4b85      	ldr	r3, [pc, #532]	; (800a654 <MX_LWIP_Init+0x240>)
 800a440:	22ff      	movs	r2, #255	; 0xff
 800a442:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800a444:	4b83      	ldr	r3, [pc, #524]	; (800a654 <MX_LWIP_Init+0x240>)
 800a446:	2200      	movs	r2, #0
 800a448:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 800a44a:	4b83      	ldr	r3, [pc, #524]	; (800a658 <MX_LWIP_Init+0x244>)
 800a44c:	22c0      	movs	r2, #192	; 0xc0
 800a44e:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 800a450:	4b81      	ldr	r3, [pc, #516]	; (800a658 <MX_LWIP_Init+0x244>)
 800a452:	22a8      	movs	r2, #168	; 0xa8
 800a454:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 800a456:	4b80      	ldr	r3, [pc, #512]	; (800a658 <MX_LWIP_Init+0x244>)
 800a458:	2200      	movs	r2, #0
 800a45a:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 800a45c:	4b7e      	ldr	r3, [pc, #504]	; (800a658 <MX_LWIP_Init+0x244>)
 800a45e:	2201      	movs	r2, #1
 800a460:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 800a462:	f000 fc40 	bl	800ace6 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800a466:	4b7a      	ldr	r3, [pc, #488]	; (800a650 <MX_LWIP_Init+0x23c>)
 800a468:	781b      	ldrb	r3, [r3, #0]
 800a46a:	061a      	lsls	r2, r3, #24
 800a46c:	4b78      	ldr	r3, [pc, #480]	; (800a650 <MX_LWIP_Init+0x23c>)
 800a46e:	785b      	ldrb	r3, [r3, #1]
 800a470:	041b      	lsls	r3, r3, #16
 800a472:	431a      	orrs	r2, r3
 800a474:	4b76      	ldr	r3, [pc, #472]	; (800a650 <MX_LWIP_Init+0x23c>)
 800a476:	789b      	ldrb	r3, [r3, #2]
 800a478:	021b      	lsls	r3, r3, #8
 800a47a:	4313      	orrs	r3, r2
 800a47c:	4a74      	ldr	r2, [pc, #464]	; (800a650 <MX_LWIP_Init+0x23c>)
 800a47e:	78d2      	ldrb	r2, [r2, #3]
 800a480:	4313      	orrs	r3, r2
 800a482:	061a      	lsls	r2, r3, #24
 800a484:	4b72      	ldr	r3, [pc, #456]	; (800a650 <MX_LWIP_Init+0x23c>)
 800a486:	781b      	ldrb	r3, [r3, #0]
 800a488:	0619      	lsls	r1, r3, #24
 800a48a:	4b71      	ldr	r3, [pc, #452]	; (800a650 <MX_LWIP_Init+0x23c>)
 800a48c:	785b      	ldrb	r3, [r3, #1]
 800a48e:	041b      	lsls	r3, r3, #16
 800a490:	4319      	orrs	r1, r3
 800a492:	4b6f      	ldr	r3, [pc, #444]	; (800a650 <MX_LWIP_Init+0x23c>)
 800a494:	789b      	ldrb	r3, [r3, #2]
 800a496:	021b      	lsls	r3, r3, #8
 800a498:	430b      	orrs	r3, r1
 800a49a:	496d      	ldr	r1, [pc, #436]	; (800a650 <MX_LWIP_Init+0x23c>)
 800a49c:	78c9      	ldrb	r1, [r1, #3]
 800a49e:	430b      	orrs	r3, r1
 800a4a0:	021b      	lsls	r3, r3, #8
 800a4a2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a4a6:	431a      	orrs	r2, r3
 800a4a8:	4b69      	ldr	r3, [pc, #420]	; (800a650 <MX_LWIP_Init+0x23c>)
 800a4aa:	781b      	ldrb	r3, [r3, #0]
 800a4ac:	0619      	lsls	r1, r3, #24
 800a4ae:	4b68      	ldr	r3, [pc, #416]	; (800a650 <MX_LWIP_Init+0x23c>)
 800a4b0:	785b      	ldrb	r3, [r3, #1]
 800a4b2:	041b      	lsls	r3, r3, #16
 800a4b4:	4319      	orrs	r1, r3
 800a4b6:	4b66      	ldr	r3, [pc, #408]	; (800a650 <MX_LWIP_Init+0x23c>)
 800a4b8:	789b      	ldrb	r3, [r3, #2]
 800a4ba:	021b      	lsls	r3, r3, #8
 800a4bc:	430b      	orrs	r3, r1
 800a4be:	4964      	ldr	r1, [pc, #400]	; (800a650 <MX_LWIP_Init+0x23c>)
 800a4c0:	78c9      	ldrb	r1, [r1, #3]
 800a4c2:	430b      	orrs	r3, r1
 800a4c4:	0a1b      	lsrs	r3, r3, #8
 800a4c6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800a4ca:	431a      	orrs	r2, r3
 800a4cc:	4b60      	ldr	r3, [pc, #384]	; (800a650 <MX_LWIP_Init+0x23c>)
 800a4ce:	781b      	ldrb	r3, [r3, #0]
 800a4d0:	0619      	lsls	r1, r3, #24
 800a4d2:	4b5f      	ldr	r3, [pc, #380]	; (800a650 <MX_LWIP_Init+0x23c>)
 800a4d4:	785b      	ldrb	r3, [r3, #1]
 800a4d6:	041b      	lsls	r3, r3, #16
 800a4d8:	4319      	orrs	r1, r3
 800a4da:	4b5d      	ldr	r3, [pc, #372]	; (800a650 <MX_LWIP_Init+0x23c>)
 800a4dc:	789b      	ldrb	r3, [r3, #2]
 800a4de:	021b      	lsls	r3, r3, #8
 800a4e0:	430b      	orrs	r3, r1
 800a4e2:	495b      	ldr	r1, [pc, #364]	; (800a650 <MX_LWIP_Init+0x23c>)
 800a4e4:	78c9      	ldrb	r1, [r1, #3]
 800a4e6:	430b      	orrs	r3, r1
 800a4e8:	0e1b      	lsrs	r3, r3, #24
 800a4ea:	4313      	orrs	r3, r2
 800a4ec:	4a5b      	ldr	r2, [pc, #364]	; (800a65c <MX_LWIP_Init+0x248>)
 800a4ee:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800a4f0:	4b58      	ldr	r3, [pc, #352]	; (800a654 <MX_LWIP_Init+0x240>)
 800a4f2:	781b      	ldrb	r3, [r3, #0]
 800a4f4:	061a      	lsls	r2, r3, #24
 800a4f6:	4b57      	ldr	r3, [pc, #348]	; (800a654 <MX_LWIP_Init+0x240>)
 800a4f8:	785b      	ldrb	r3, [r3, #1]
 800a4fa:	041b      	lsls	r3, r3, #16
 800a4fc:	431a      	orrs	r2, r3
 800a4fe:	4b55      	ldr	r3, [pc, #340]	; (800a654 <MX_LWIP_Init+0x240>)
 800a500:	789b      	ldrb	r3, [r3, #2]
 800a502:	021b      	lsls	r3, r3, #8
 800a504:	4313      	orrs	r3, r2
 800a506:	4a53      	ldr	r2, [pc, #332]	; (800a654 <MX_LWIP_Init+0x240>)
 800a508:	78d2      	ldrb	r2, [r2, #3]
 800a50a:	4313      	orrs	r3, r2
 800a50c:	061a      	lsls	r2, r3, #24
 800a50e:	4b51      	ldr	r3, [pc, #324]	; (800a654 <MX_LWIP_Init+0x240>)
 800a510:	781b      	ldrb	r3, [r3, #0]
 800a512:	0619      	lsls	r1, r3, #24
 800a514:	4b4f      	ldr	r3, [pc, #316]	; (800a654 <MX_LWIP_Init+0x240>)
 800a516:	785b      	ldrb	r3, [r3, #1]
 800a518:	041b      	lsls	r3, r3, #16
 800a51a:	4319      	orrs	r1, r3
 800a51c:	4b4d      	ldr	r3, [pc, #308]	; (800a654 <MX_LWIP_Init+0x240>)
 800a51e:	789b      	ldrb	r3, [r3, #2]
 800a520:	021b      	lsls	r3, r3, #8
 800a522:	430b      	orrs	r3, r1
 800a524:	494b      	ldr	r1, [pc, #300]	; (800a654 <MX_LWIP_Init+0x240>)
 800a526:	78c9      	ldrb	r1, [r1, #3]
 800a528:	430b      	orrs	r3, r1
 800a52a:	021b      	lsls	r3, r3, #8
 800a52c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a530:	431a      	orrs	r2, r3
 800a532:	4b48      	ldr	r3, [pc, #288]	; (800a654 <MX_LWIP_Init+0x240>)
 800a534:	781b      	ldrb	r3, [r3, #0]
 800a536:	0619      	lsls	r1, r3, #24
 800a538:	4b46      	ldr	r3, [pc, #280]	; (800a654 <MX_LWIP_Init+0x240>)
 800a53a:	785b      	ldrb	r3, [r3, #1]
 800a53c:	041b      	lsls	r3, r3, #16
 800a53e:	4319      	orrs	r1, r3
 800a540:	4b44      	ldr	r3, [pc, #272]	; (800a654 <MX_LWIP_Init+0x240>)
 800a542:	789b      	ldrb	r3, [r3, #2]
 800a544:	021b      	lsls	r3, r3, #8
 800a546:	430b      	orrs	r3, r1
 800a548:	4942      	ldr	r1, [pc, #264]	; (800a654 <MX_LWIP_Init+0x240>)
 800a54a:	78c9      	ldrb	r1, [r1, #3]
 800a54c:	430b      	orrs	r3, r1
 800a54e:	0a1b      	lsrs	r3, r3, #8
 800a550:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800a554:	431a      	orrs	r2, r3
 800a556:	4b3f      	ldr	r3, [pc, #252]	; (800a654 <MX_LWIP_Init+0x240>)
 800a558:	781b      	ldrb	r3, [r3, #0]
 800a55a:	0619      	lsls	r1, r3, #24
 800a55c:	4b3d      	ldr	r3, [pc, #244]	; (800a654 <MX_LWIP_Init+0x240>)
 800a55e:	785b      	ldrb	r3, [r3, #1]
 800a560:	041b      	lsls	r3, r3, #16
 800a562:	4319      	orrs	r1, r3
 800a564:	4b3b      	ldr	r3, [pc, #236]	; (800a654 <MX_LWIP_Init+0x240>)
 800a566:	789b      	ldrb	r3, [r3, #2]
 800a568:	021b      	lsls	r3, r3, #8
 800a56a:	430b      	orrs	r3, r1
 800a56c:	4939      	ldr	r1, [pc, #228]	; (800a654 <MX_LWIP_Init+0x240>)
 800a56e:	78c9      	ldrb	r1, [r1, #3]
 800a570:	430b      	orrs	r3, r1
 800a572:	0e1b      	lsrs	r3, r3, #24
 800a574:	4313      	orrs	r3, r2
 800a576:	4a3a      	ldr	r2, [pc, #232]	; (800a660 <MX_LWIP_Init+0x24c>)
 800a578:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800a57a:	4b37      	ldr	r3, [pc, #220]	; (800a658 <MX_LWIP_Init+0x244>)
 800a57c:	781b      	ldrb	r3, [r3, #0]
 800a57e:	061a      	lsls	r2, r3, #24
 800a580:	4b35      	ldr	r3, [pc, #212]	; (800a658 <MX_LWIP_Init+0x244>)
 800a582:	785b      	ldrb	r3, [r3, #1]
 800a584:	041b      	lsls	r3, r3, #16
 800a586:	431a      	orrs	r2, r3
 800a588:	4b33      	ldr	r3, [pc, #204]	; (800a658 <MX_LWIP_Init+0x244>)
 800a58a:	789b      	ldrb	r3, [r3, #2]
 800a58c:	021b      	lsls	r3, r3, #8
 800a58e:	4313      	orrs	r3, r2
 800a590:	4a31      	ldr	r2, [pc, #196]	; (800a658 <MX_LWIP_Init+0x244>)
 800a592:	78d2      	ldrb	r2, [r2, #3]
 800a594:	4313      	orrs	r3, r2
 800a596:	061a      	lsls	r2, r3, #24
 800a598:	4b2f      	ldr	r3, [pc, #188]	; (800a658 <MX_LWIP_Init+0x244>)
 800a59a:	781b      	ldrb	r3, [r3, #0]
 800a59c:	0619      	lsls	r1, r3, #24
 800a59e:	4b2e      	ldr	r3, [pc, #184]	; (800a658 <MX_LWIP_Init+0x244>)
 800a5a0:	785b      	ldrb	r3, [r3, #1]
 800a5a2:	041b      	lsls	r3, r3, #16
 800a5a4:	4319      	orrs	r1, r3
 800a5a6:	4b2c      	ldr	r3, [pc, #176]	; (800a658 <MX_LWIP_Init+0x244>)
 800a5a8:	789b      	ldrb	r3, [r3, #2]
 800a5aa:	021b      	lsls	r3, r3, #8
 800a5ac:	430b      	orrs	r3, r1
 800a5ae:	492a      	ldr	r1, [pc, #168]	; (800a658 <MX_LWIP_Init+0x244>)
 800a5b0:	78c9      	ldrb	r1, [r1, #3]
 800a5b2:	430b      	orrs	r3, r1
 800a5b4:	021b      	lsls	r3, r3, #8
 800a5b6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a5ba:	431a      	orrs	r2, r3
 800a5bc:	4b26      	ldr	r3, [pc, #152]	; (800a658 <MX_LWIP_Init+0x244>)
 800a5be:	781b      	ldrb	r3, [r3, #0]
 800a5c0:	0619      	lsls	r1, r3, #24
 800a5c2:	4b25      	ldr	r3, [pc, #148]	; (800a658 <MX_LWIP_Init+0x244>)
 800a5c4:	785b      	ldrb	r3, [r3, #1]
 800a5c6:	041b      	lsls	r3, r3, #16
 800a5c8:	4319      	orrs	r1, r3
 800a5ca:	4b23      	ldr	r3, [pc, #140]	; (800a658 <MX_LWIP_Init+0x244>)
 800a5cc:	789b      	ldrb	r3, [r3, #2]
 800a5ce:	021b      	lsls	r3, r3, #8
 800a5d0:	430b      	orrs	r3, r1
 800a5d2:	4921      	ldr	r1, [pc, #132]	; (800a658 <MX_LWIP_Init+0x244>)
 800a5d4:	78c9      	ldrb	r1, [r1, #3]
 800a5d6:	430b      	orrs	r3, r1
 800a5d8:	0a1b      	lsrs	r3, r3, #8
 800a5da:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800a5de:	431a      	orrs	r2, r3
 800a5e0:	4b1d      	ldr	r3, [pc, #116]	; (800a658 <MX_LWIP_Init+0x244>)
 800a5e2:	781b      	ldrb	r3, [r3, #0]
 800a5e4:	0619      	lsls	r1, r3, #24
 800a5e6:	4b1c      	ldr	r3, [pc, #112]	; (800a658 <MX_LWIP_Init+0x244>)
 800a5e8:	785b      	ldrb	r3, [r3, #1]
 800a5ea:	041b      	lsls	r3, r3, #16
 800a5ec:	4319      	orrs	r1, r3
 800a5ee:	4b1a      	ldr	r3, [pc, #104]	; (800a658 <MX_LWIP_Init+0x244>)
 800a5f0:	789b      	ldrb	r3, [r3, #2]
 800a5f2:	021b      	lsls	r3, r3, #8
 800a5f4:	430b      	orrs	r3, r1
 800a5f6:	4918      	ldr	r1, [pc, #96]	; (800a658 <MX_LWIP_Init+0x244>)
 800a5f8:	78c9      	ldrb	r1, [r1, #3]
 800a5fa:	430b      	orrs	r3, r1
 800a5fc:	0e1b      	lsrs	r3, r3, #24
 800a5fe:	4313      	orrs	r3, r2
 800a600:	4a18      	ldr	r2, [pc, #96]	; (800a664 <MX_LWIP_Init+0x250>)
 800a602:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 800a604:	4b18      	ldr	r3, [pc, #96]	; (800a668 <MX_LWIP_Init+0x254>)
 800a606:	9302      	str	r3, [sp, #8]
 800a608:	4b18      	ldr	r3, [pc, #96]	; (800a66c <MX_LWIP_Init+0x258>)
 800a60a:	9301      	str	r3, [sp, #4]
 800a60c:	2300      	movs	r3, #0
 800a60e:	9300      	str	r3, [sp, #0]
 800a610:	4b14      	ldr	r3, [pc, #80]	; (800a664 <MX_LWIP_Init+0x250>)
 800a612:	4a13      	ldr	r2, [pc, #76]	; (800a660 <MX_LWIP_Init+0x24c>)
 800a614:	4911      	ldr	r1, [pc, #68]	; (800a65c <MX_LWIP_Init+0x248>)
 800a616:	4816      	ldr	r0, [pc, #88]	; (800a670 <MX_LWIP_Init+0x25c>)
 800a618:	f001 f80a 	bl	800b630 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800a61c:	4814      	ldr	r0, [pc, #80]	; (800a670 <MX_LWIP_Init+0x25c>)
 800a61e:	f001 f9b9 	bl	800b994 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800a622:	4b13      	ldr	r3, [pc, #76]	; (800a670 <MX_LWIP_Init+0x25c>)
 800a624:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a628:	089b      	lsrs	r3, r3, #2
 800a62a:	f003 0301 	and.w	r3, r3, #1
 800a62e:	b2db      	uxtb	r3, r3
 800a630:	2b00      	cmp	r3, #0
 800a632:	d003      	beq.n	800a63c <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800a634:	480e      	ldr	r0, [pc, #56]	; (800a670 <MX_LWIP_Init+0x25c>)
 800a636:	f001 f9bd 	bl	800b9b4 <netif_set_up>
 800a63a:	e002      	b.n	800a642 <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 800a63c:	480c      	ldr	r0, [pc, #48]	; (800a670 <MX_LWIP_Init+0x25c>)
 800a63e:	f001 fa25 	bl	800ba8c <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 800a642:	490c      	ldr	r1, [pc, #48]	; (800a674 <MX_LWIP_Init+0x260>)
 800a644:	480a      	ldr	r0, [pc, #40]	; (800a670 <MX_LWIP_Init+0x25c>)
 800a646:	f001 fa53 	bl	800baf0 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800a64a:	bf00      	nop
 800a64c:	46bd      	mov	sp, r7
 800a64e:	bd80      	pop	{r7, pc}
 800a650:	20000c68 	.word	0x20000c68
 800a654:	20000c64 	.word	0x20000c64
 800a658:	20000c28 	.word	0x20000c28
 800a65c:	20000c60 	.word	0x20000c60
 800a660:	20000c6c 	.word	0x20000c6c
 800a664:	20000c70 	.word	0x20000c70
 800a668:	080142d5 	.word	0x080142d5
 800a66c:	0800aa5d 	.word	0x0800aa5d
 800a670:	20000c2c 	.word	0x20000c2c
 800a674:	0800aac9 	.word	0x0800aac9

0800a678 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800a678:	b580      	push	{r7, lr}
 800a67a:	b08e      	sub	sp, #56	; 0x38
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a680:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a684:	2200      	movs	r2, #0
 800a686:	601a      	str	r2, [r3, #0]
 800a688:	605a      	str	r2, [r3, #4]
 800a68a:	609a      	str	r2, [r3, #8]
 800a68c:	60da      	str	r2, [r3, #12]
 800a68e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	4a46      	ldr	r2, [pc, #280]	; (800a7b0 <HAL_ETH_MspInit+0x138>)
 800a696:	4293      	cmp	r3, r2
 800a698:	f040 8085 	bne.w	800a7a6 <HAL_ETH_MspInit+0x12e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 800a69c:	2300      	movs	r3, #0
 800a69e:	623b      	str	r3, [r7, #32]
 800a6a0:	4b44      	ldr	r3, [pc, #272]	; (800a7b4 <HAL_ETH_MspInit+0x13c>)
 800a6a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6a4:	4a43      	ldr	r2, [pc, #268]	; (800a7b4 <HAL_ETH_MspInit+0x13c>)
 800a6a6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800a6aa:	6313      	str	r3, [r2, #48]	; 0x30
 800a6ac:	4b41      	ldr	r3, [pc, #260]	; (800a7b4 <HAL_ETH_MspInit+0x13c>)
 800a6ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a6b4:	623b      	str	r3, [r7, #32]
 800a6b6:	6a3b      	ldr	r3, [r7, #32]
 800a6b8:	2300      	movs	r3, #0
 800a6ba:	61fb      	str	r3, [r7, #28]
 800a6bc:	4b3d      	ldr	r3, [pc, #244]	; (800a7b4 <HAL_ETH_MspInit+0x13c>)
 800a6be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6c0:	4a3c      	ldr	r2, [pc, #240]	; (800a7b4 <HAL_ETH_MspInit+0x13c>)
 800a6c2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a6c6:	6313      	str	r3, [r2, #48]	; 0x30
 800a6c8:	4b3a      	ldr	r3, [pc, #232]	; (800a7b4 <HAL_ETH_MspInit+0x13c>)
 800a6ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6cc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a6d0:	61fb      	str	r3, [r7, #28]
 800a6d2:	69fb      	ldr	r3, [r7, #28]
 800a6d4:	2300      	movs	r3, #0
 800a6d6:	61bb      	str	r3, [r7, #24]
 800a6d8:	4b36      	ldr	r3, [pc, #216]	; (800a7b4 <HAL_ETH_MspInit+0x13c>)
 800a6da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6dc:	4a35      	ldr	r2, [pc, #212]	; (800a7b4 <HAL_ETH_MspInit+0x13c>)
 800a6de:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a6e2:	6313      	str	r3, [r2, #48]	; 0x30
 800a6e4:	4b33      	ldr	r3, [pc, #204]	; (800a7b4 <HAL_ETH_MspInit+0x13c>)
 800a6e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a6ec:	61bb      	str	r3, [r7, #24]
 800a6ee:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a6f0:	2300      	movs	r3, #0
 800a6f2:	617b      	str	r3, [r7, #20]
 800a6f4:	4b2f      	ldr	r3, [pc, #188]	; (800a7b4 <HAL_ETH_MspInit+0x13c>)
 800a6f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6f8:	4a2e      	ldr	r2, [pc, #184]	; (800a7b4 <HAL_ETH_MspInit+0x13c>)
 800a6fa:	f043 0304 	orr.w	r3, r3, #4
 800a6fe:	6313      	str	r3, [r2, #48]	; 0x30
 800a700:	4b2c      	ldr	r3, [pc, #176]	; (800a7b4 <HAL_ETH_MspInit+0x13c>)
 800a702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a704:	f003 0304 	and.w	r3, r3, #4
 800a708:	617b      	str	r3, [r7, #20]
 800a70a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a70c:	2300      	movs	r3, #0
 800a70e:	613b      	str	r3, [r7, #16]
 800a710:	4b28      	ldr	r3, [pc, #160]	; (800a7b4 <HAL_ETH_MspInit+0x13c>)
 800a712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a714:	4a27      	ldr	r2, [pc, #156]	; (800a7b4 <HAL_ETH_MspInit+0x13c>)
 800a716:	f043 0301 	orr.w	r3, r3, #1
 800a71a:	6313      	str	r3, [r2, #48]	; 0x30
 800a71c:	4b25      	ldr	r3, [pc, #148]	; (800a7b4 <HAL_ETH_MspInit+0x13c>)
 800a71e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a720:	f003 0301 	and.w	r3, r3, #1
 800a724:	613b      	str	r3, [r7, #16]
 800a726:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a728:	2300      	movs	r3, #0
 800a72a:	60fb      	str	r3, [r7, #12]
 800a72c:	4b21      	ldr	r3, [pc, #132]	; (800a7b4 <HAL_ETH_MspInit+0x13c>)
 800a72e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a730:	4a20      	ldr	r2, [pc, #128]	; (800a7b4 <HAL_ETH_MspInit+0x13c>)
 800a732:	f043 0302 	orr.w	r3, r3, #2
 800a736:	6313      	str	r3, [r2, #48]	; 0x30
 800a738:	4b1e      	ldr	r3, [pc, #120]	; (800a7b4 <HAL_ETH_MspInit+0x13c>)
 800a73a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a73c:	f003 0302 	and.w	r3, r3, #2
 800a740:	60fb      	str	r3, [r7, #12]
 800a742:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800a744:	2332      	movs	r3, #50	; 0x32
 800a746:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a748:	2302      	movs	r3, #2
 800a74a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a74c:	2300      	movs	r3, #0
 800a74e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a750:	2303      	movs	r3, #3
 800a752:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a754:	230b      	movs	r3, #11
 800a756:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a758:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a75c:	4619      	mov	r1, r3
 800a75e:	4816      	ldr	r0, [pc, #88]	; (800a7b8 <HAL_ETH_MspInit+0x140>)
 800a760:	f7fa fc0a 	bl	8004f78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800a764:	2386      	movs	r3, #134	; 0x86
 800a766:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a768:	2302      	movs	r3, #2
 800a76a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a76c:	2300      	movs	r3, #0
 800a76e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a770:	2303      	movs	r3, #3
 800a772:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a774:	230b      	movs	r3, #11
 800a776:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a778:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a77c:	4619      	mov	r1, r3
 800a77e:	480f      	ldr	r0, [pc, #60]	; (800a7bc <HAL_ETH_MspInit+0x144>)
 800a780:	f7fa fbfa 	bl	8004f78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 800a784:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800a788:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a78a:	2302      	movs	r3, #2
 800a78c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a78e:	2300      	movs	r3, #0
 800a790:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a792:	2303      	movs	r3, #3
 800a794:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a796:	230b      	movs	r3, #11
 800a798:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a79a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a79e:	4619      	mov	r1, r3
 800a7a0:	4807      	ldr	r0, [pc, #28]	; (800a7c0 <HAL_ETH_MspInit+0x148>)
 800a7a2:	f7fa fbe9 	bl	8004f78 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800a7a6:	bf00      	nop
 800a7a8:	3738      	adds	r7, #56	; 0x38
 800a7aa:	46bd      	mov	sp, r7
 800a7ac:	bd80      	pop	{r7, pc}
 800a7ae:	bf00      	nop
 800a7b0:	40028000 	.word	0x40028000
 800a7b4:	40023800 	.word	0x40023800
 800a7b8:	40020800 	.word	0x40020800
 800a7bc:	40020000 	.word	0x40020000
 800a7c0:	40020400 	.word	0x40020400

0800a7c4 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800a7c4:	b580      	push	{r7, lr}
 800a7c6:	b086      	sub	sp, #24
 800a7c8:	af00      	add	r7, sp, #0
 800a7ca:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 800a7cc:	2300      	movs	r3, #0
 800a7ce:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800a7d0:	4b4d      	ldr	r3, [pc, #308]	; (800a908 <low_level_init+0x144>)
 800a7d2:	4a4e      	ldr	r2, [pc, #312]	; (800a90c <low_level_init+0x148>)
 800a7d4:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800a7d6:	4b4c      	ldr	r3, [pc, #304]	; (800a908 <low_level_init+0x144>)
 800a7d8:	2201      	movs	r2, #1
 800a7da:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 800a7dc:	4b4a      	ldr	r3, [pc, #296]	; (800a908 <low_level_init+0x144>)
 800a7de:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800a7e2:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 800a7e4:	4b48      	ldr	r3, [pc, #288]	; (800a908 <low_level_init+0x144>)
 800a7e6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a7ea:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 800a7ec:	4b46      	ldr	r3, [pc, #280]	; (800a908 <low_level_init+0x144>)
 800a7ee:	2201      	movs	r2, #1
 800a7f0:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 800a7f2:	2300      	movs	r3, #0
 800a7f4:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800a7f6:	2380      	movs	r3, #128	; 0x80
 800a7f8:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 800a7fa:	23e1      	movs	r3, #225	; 0xe1
 800a7fc:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800a7fe:	2300      	movs	r3, #0
 800a800:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800a802:	2300      	movs	r3, #0
 800a804:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800a806:	2300      	movs	r3, #0
 800a808:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800a80a:	4a3f      	ldr	r2, [pc, #252]	; (800a908 <low_level_init+0x144>)
 800a80c:	f107 0308 	add.w	r3, r7, #8
 800a810:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 800a812:	4b3d      	ldr	r3, [pc, #244]	; (800a908 <low_level_init+0x144>)
 800a814:	2200      	movs	r2, #0
 800a816:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 800a818:	4b3b      	ldr	r3, [pc, #236]	; (800a908 <low_level_init+0x144>)
 800a81a:	2200      	movs	r2, #0
 800a81c:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800a81e:	4b3a      	ldr	r3, [pc, #232]	; (800a908 <low_level_init+0x144>)
 800a820:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800a824:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800a826:	4838      	ldr	r0, [pc, #224]	; (800a908 <low_level_init+0x144>)
 800a828:	f7f9 fb04 	bl	8003e34 <HAL_ETH_Init>
 800a82c:	4603      	mov	r3, r0
 800a82e:	75fb      	strb	r3, [r7, #23]

  if (hal_eth_init_status == HAL_OK)
 800a830:	7dfb      	ldrb	r3, [r7, #23]
 800a832:	2b00      	cmp	r3, #0
 800a834:	d108      	bne.n	800a848 <low_level_init+0x84>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a83c:	f043 0304 	orr.w	r3, r3, #4
 800a840:	b2da      	uxtb	r2, r3
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 800a848:	2304      	movs	r3, #4
 800a84a:	4a31      	ldr	r2, [pc, #196]	; (800a910 <low_level_init+0x14c>)
 800a84c:	4931      	ldr	r1, [pc, #196]	; (800a914 <low_level_init+0x150>)
 800a84e:	482e      	ldr	r0, [pc, #184]	; (800a908 <low_level_init+0x144>)
 800a850:	f7f9 fc8c 	bl	800416c <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 800a854:	2304      	movs	r3, #4
 800a856:	4a30      	ldr	r2, [pc, #192]	; (800a918 <low_level_init+0x154>)
 800a858:	4930      	ldr	r1, [pc, #192]	; (800a91c <low_level_init+0x158>)
 800a85a:	482b      	ldr	r0, [pc, #172]	; (800a908 <low_level_init+0x144>)
 800a85c:	f7f9 fcef 	bl	800423e <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	2206      	movs	r2, #6
 800a864:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800a868:	4b27      	ldr	r3, [pc, #156]	; (800a908 <low_level_init+0x144>)
 800a86a:	695b      	ldr	r3, [r3, #20]
 800a86c:	781a      	ldrb	r2, [r3, #0]
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800a874:	4b24      	ldr	r3, [pc, #144]	; (800a908 <low_level_init+0x144>)
 800a876:	695b      	ldr	r3, [r3, #20]
 800a878:	785a      	ldrb	r2, [r3, #1]
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800a880:	4b21      	ldr	r3, [pc, #132]	; (800a908 <low_level_init+0x144>)
 800a882:	695b      	ldr	r3, [r3, #20]
 800a884:	789a      	ldrb	r2, [r3, #2]
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800a88c:	4b1e      	ldr	r3, [pc, #120]	; (800a908 <low_level_init+0x144>)
 800a88e:	695b      	ldr	r3, [r3, #20]
 800a890:	78da      	ldrb	r2, [r3, #3]
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800a898:	4b1b      	ldr	r3, [pc, #108]	; (800a908 <low_level_init+0x144>)
 800a89a:	695b      	ldr	r3, [r3, #20]
 800a89c:	791a      	ldrb	r2, [r3, #4]
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800a8a4:	4b18      	ldr	r3, [pc, #96]	; (800a908 <low_level_init+0x144>)
 800a8a6:	695b      	ldr	r3, [r3, #20]
 800a8a8:	795a      	ldrb	r2, [r3, #5]
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = 1500;
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800a8b6:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a8be:	f043 030a 	orr.w	r3, r3, #10
 800a8c2:	b2da      	uxtb	r2, r3
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 800a8ca:	480f      	ldr	r0, [pc, #60]	; (800a908 <low_level_init+0x144>)
 800a8cc:	f7f9 fedc 	bl	8004688 <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 800a8d0:	f107 0310 	add.w	r3, r7, #16
 800a8d4:	461a      	mov	r2, r3
 800a8d6:	211d      	movs	r1, #29
 800a8d8:	480b      	ldr	r0, [pc, #44]	; (800a908 <low_level_init+0x144>)
 800a8da:	f7f9 fe07 	bl	80044ec <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 800a8de:	693b      	ldr	r3, [r7, #16]
 800a8e0:	f043 030b 	orr.w	r3, r3, #11
 800a8e4:	613b      	str	r3, [r7, #16]

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 800a8e6:	693b      	ldr	r3, [r7, #16]
 800a8e8:	461a      	mov	r2, r3
 800a8ea:	211d      	movs	r1, #29
 800a8ec:	4806      	ldr	r0, [pc, #24]	; (800a908 <low_level_init+0x144>)
 800a8ee:	f7f9 fe65 	bl	80045bc <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 800a8f2:	f107 0310 	add.w	r3, r7, #16
 800a8f6:	461a      	mov	r2, r3
 800a8f8:	211d      	movs	r1, #29
 800a8fa:	4803      	ldr	r0, [pc, #12]	; (800a908 <low_level_init+0x144>)
 800a8fc:	f7f9 fdf6 	bl	80044ec <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800a900:	bf00      	nop
 800a902:	3718      	adds	r7, #24
 800a904:	46bd      	mov	sp, r7
 800a906:	bd80      	pop	{r7, pc}
 800a908:	20002544 	.word	0x20002544
 800a90c:	40028000 	.word	0x40028000
 800a910:	2000258c 	.word	0x2000258c
 800a914:	20000c74 	.word	0x20000c74
 800a918:	20000cf4 	.word	0x20000cf4
 800a91c:	200024c4 	.word	0x200024c4

0800a920 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800a920:	b580      	push	{r7, lr}
 800a922:	b08a      	sub	sp, #40	; 0x28
 800a924:	af00      	add	r7, sp, #0
 800a926:	6078      	str	r0, [r7, #4]
 800a928:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800a92a:	4b4b      	ldr	r3, [pc, #300]	; (800aa58 <low_level_output+0x138>)
 800a92c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a92e:	689b      	ldr	r3, [r3, #8]
 800a930:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 800a932:	2300      	movs	r3, #0
 800a934:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 800a936:	2300      	movs	r3, #0
 800a938:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 800a93a:	2300      	movs	r3, #0
 800a93c:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 800a93e:	2300      	movs	r3, #0
 800a940:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 800a942:	4b45      	ldr	r3, [pc, #276]	; (800aa58 <low_level_output+0x138>)
 800a944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a946:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 800a948:	2300      	movs	r3, #0
 800a94a:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 800a94c:	683b      	ldr	r3, [r7, #0]
 800a94e:	623b      	str	r3, [r7, #32]
 800a950:	e05a      	b.n	800aa08 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800a952:	69bb      	ldr	r3, [r7, #24]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	2b00      	cmp	r3, #0
 800a958:	da03      	bge.n	800a962 <low_level_output+0x42>
      {
        errval = ERR_USE;
 800a95a:	23f8      	movs	r3, #248	; 0xf8
 800a95c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 800a960:	e05c      	b.n	800aa1c <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 800a962:	6a3b      	ldr	r3, [r7, #32]
 800a964:	895b      	ldrh	r3, [r3, #10]
 800a966:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 800a968:	2300      	movs	r3, #0
 800a96a:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800a96c:	e02f      	b.n	800a9ce <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 800a96e:	69fa      	ldr	r2, [r7, #28]
 800a970:	693b      	ldr	r3, [r7, #16]
 800a972:	18d0      	adds	r0, r2, r3
 800a974:	6a3b      	ldr	r3, [r7, #32]
 800a976:	685a      	ldr	r2, [r3, #4]
 800a978:	68bb      	ldr	r3, [r7, #8]
 800a97a:	18d1      	adds	r1, r2, r3
 800a97c:	693b      	ldr	r3, [r7, #16]
 800a97e:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 800a982:	3304      	adds	r3, #4
 800a984:	461a      	mov	r2, r3
 800a986:	f009 fdad 	bl	80144e4 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 800a98a:	69bb      	ldr	r3, [r7, #24]
 800a98c:	68db      	ldr	r3, [r3, #12]
 800a98e:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800a990:	69bb      	ldr	r3, [r7, #24]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	2b00      	cmp	r3, #0
 800a996:	da03      	bge.n	800a9a0 <low_level_output+0x80>
        {
          errval = ERR_USE;
 800a998:	23f8      	movs	r3, #248	; 0xf8
 800a99a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 800a99e:	e03d      	b.n	800aa1c <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 800a9a0:	69bb      	ldr	r3, [r7, #24]
 800a9a2:	689b      	ldr	r3, [r3, #8]
 800a9a4:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 800a9a6:	693a      	ldr	r2, [r7, #16]
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	4413      	add	r3, r2
 800a9ac:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 800a9b0:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 800a9b2:	68ba      	ldr	r2, [r7, #8]
 800a9b4:	693b      	ldr	r3, [r7, #16]
 800a9b6:	1ad3      	subs	r3, r2, r3
 800a9b8:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800a9bc:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 800a9be:	697a      	ldr	r2, [r7, #20]
 800a9c0:	693b      	ldr	r3, [r7, #16]
 800a9c2:	1ad3      	subs	r3, r2, r3
 800a9c4:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800a9c8:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 800a9ca:	2300      	movs	r3, #0
 800a9cc:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800a9ce:	68fa      	ldr	r2, [r7, #12]
 800a9d0:	693b      	ldr	r3, [r7, #16]
 800a9d2:	4413      	add	r3, r2
 800a9d4:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800a9d8:	4293      	cmp	r3, r2
 800a9da:	d8c8      	bhi.n	800a96e <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 800a9dc:	69fa      	ldr	r2, [r7, #28]
 800a9de:	693b      	ldr	r3, [r7, #16]
 800a9e0:	18d0      	adds	r0, r2, r3
 800a9e2:	6a3b      	ldr	r3, [r7, #32]
 800a9e4:	685a      	ldr	r2, [r3, #4]
 800a9e6:	68bb      	ldr	r3, [r7, #8]
 800a9e8:	4413      	add	r3, r2
 800a9ea:	68fa      	ldr	r2, [r7, #12]
 800a9ec:	4619      	mov	r1, r3
 800a9ee:	f009 fd79 	bl	80144e4 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800a9f2:	693a      	ldr	r2, [r7, #16]
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	4413      	add	r3, r2
 800a9f8:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 800a9fa:	697a      	ldr	r2, [r7, #20]
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	4413      	add	r3, r2
 800aa00:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 800aa02:	6a3b      	ldr	r3, [r7, #32]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	623b      	str	r3, [r7, #32]
 800aa08:	6a3b      	ldr	r3, [r7, #32]
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d1a1      	bne.n	800a952 <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 800aa0e:	6979      	ldr	r1, [r7, #20]
 800aa10:	4811      	ldr	r0, [pc, #68]	; (800aa58 <low_level_output+0x138>)
 800aa12:	f7f9 fc81 	bl	8004318 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 800aa16:	2300      	movs	r3, #0
 800aa18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 800aa1c:	4b0e      	ldr	r3, [pc, #56]	; (800aa58 <low_level_output+0x138>)
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aa24:	3314      	adds	r3, #20
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	f003 0320 	and.w	r3, r3, #32
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d00d      	beq.n	800aa4c <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 800aa30:	4b09      	ldr	r3, [pc, #36]	; (800aa58 <low_level_output+0x138>)
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aa38:	3314      	adds	r3, #20
 800aa3a:	2220      	movs	r2, #32
 800aa3c:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 800aa3e:	4b06      	ldr	r3, [pc, #24]	; (800aa58 <low_level_output+0x138>)
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aa46:	3304      	adds	r3, #4
 800aa48:	2200      	movs	r2, #0
 800aa4a:	601a      	str	r2, [r3, #0]
  }
  return errval;
 800aa4c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800aa50:	4618      	mov	r0, r3
 800aa52:	3728      	adds	r7, #40	; 0x28
 800aa54:	46bd      	mov	sp, r7
 800aa56:	bd80      	pop	{r7, pc}
 800aa58:	20002544 	.word	0x20002544

0800aa5c <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800aa5c:	b580      	push	{r7, lr}
 800aa5e:	b082      	sub	sp, #8
 800aa60:	af00      	add	r7, sp, #0
 800aa62:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d106      	bne.n	800aa78 <ethernetif_init+0x1c>
 800aa6a:	4b0e      	ldr	r3, [pc, #56]	; (800aaa4 <ethernetif_init+0x48>)
 800aa6c:	f44f 7202 	mov.w	r2, #520	; 0x208
 800aa70:	490d      	ldr	r1, [pc, #52]	; (800aaa8 <ethernetif_init+0x4c>)
 800aa72:	480e      	ldr	r0, [pc, #56]	; (800aaac <ethernetif_init+0x50>)
 800aa74:	f009 fd66 	bl	8014544 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	2273      	movs	r2, #115	; 0x73
 800aa7c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	2274      	movs	r2, #116	; 0x74
 800aa84:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	4a09      	ldr	r2, [pc, #36]	; (800aab0 <ethernetif_init+0x54>)
 800aa8c:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	4a08      	ldr	r2, [pc, #32]	; (800aab4 <ethernetif_init+0x58>)
 800aa92:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800aa94:	6878      	ldr	r0, [r7, #4]
 800aa96:	f7ff fe95 	bl	800a7c4 <low_level_init>

  return ERR_OK;
 800aa9a:	2300      	movs	r3, #0
}
 800aa9c:	4618      	mov	r0, r3
 800aa9e:	3708      	adds	r7, #8
 800aaa0:	46bd      	mov	sp, r7
 800aaa2:	bd80      	pop	{r7, pc}
 800aaa4:	0801591c 	.word	0x0801591c
 800aaa8:	08015938 	.word	0x08015938
 800aaac:	08015948 	.word	0x08015948
 800aab0:	08012799 	.word	0x08012799
 800aab4:	0800a921 	.word	0x0800a921

0800aab8 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 800aab8:	b580      	push	{r7, lr}
 800aaba:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800aabc:	f7f7 faf0 	bl	80020a0 <HAL_GetTick>
 800aac0:	4603      	mov	r3, r0
}
 800aac2:	4618      	mov	r0, r3
 800aac4:	bd80      	pop	{r7, pc}
	...

0800aac8 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 800aac8:	b580      	push	{r7, lr}
 800aaca:	b084      	sub	sp, #16
 800aacc:	af00      	add	r7, sp, #0
 800aace:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 800aad0:	2300      	movs	r3, #0
 800aad2:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 800aad4:	2300      	movs	r3, #0
 800aad6:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800aade:	089b      	lsrs	r3, r3, #2
 800aae0:	f003 0301 	and.w	r3, r3, #1
 800aae4:	b2db      	uxtb	r3, r3
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d05d      	beq.n	800aba6 <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800aaea:	4b34      	ldr	r3, [pc, #208]	; (800abbc <ethernetif_update_config+0xf4>)
 800aaec:	685b      	ldr	r3, [r3, #4]
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d03f      	beq.n	800ab72 <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 800aaf2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800aaf6:	2100      	movs	r1, #0
 800aaf8:	4830      	ldr	r0, [pc, #192]	; (800abbc <ethernetif_update_config+0xf4>)
 800aafa:	f7f9 fd5f 	bl	80045bc <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 800aafe:	f7f7 facf 	bl	80020a0 <HAL_GetTick>
 800ab02:	4603      	mov	r3, r0
 800ab04:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 800ab06:	f107 0308 	add.w	r3, r7, #8
 800ab0a:	461a      	mov	r2, r3
 800ab0c:	2101      	movs	r1, #1
 800ab0e:	482b      	ldr	r0, [pc, #172]	; (800abbc <ethernetif_update_config+0xf4>)
 800ab10:	f7f9 fcec 	bl	80044ec <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 800ab14:	f7f7 fac4 	bl	80020a0 <HAL_GetTick>
 800ab18:	4602      	mov	r2, r0
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	1ad3      	subs	r3, r2, r3
 800ab1e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ab22:	d828      	bhi.n	800ab76 <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800ab24:	68bb      	ldr	r3, [r7, #8]
 800ab26:	f003 0320 	and.w	r3, r3, #32
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d0eb      	beq.n	800ab06 <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 800ab2e:	f107 0308 	add.w	r3, r7, #8
 800ab32:	461a      	mov	r2, r3
 800ab34:	2110      	movs	r1, #16
 800ab36:	4821      	ldr	r0, [pc, #132]	; (800abbc <ethernetif_update_config+0xf4>)
 800ab38:	f7f9 fcd8 	bl	80044ec <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800ab3c:	68bb      	ldr	r3, [r7, #8]
 800ab3e:	f003 0304 	and.w	r3, r3, #4
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d004      	beq.n	800ab50 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 800ab46:	4b1d      	ldr	r3, [pc, #116]	; (800abbc <ethernetif_update_config+0xf4>)
 800ab48:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ab4c:	60da      	str	r2, [r3, #12]
 800ab4e:	e002      	b.n	800ab56 <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 800ab50:	4b1a      	ldr	r3, [pc, #104]	; (800abbc <ethernetif_update_config+0xf4>)
 800ab52:	2200      	movs	r2, #0
 800ab54:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 800ab56:	68bb      	ldr	r3, [r7, #8]
 800ab58:	f003 0302 	and.w	r3, r3, #2
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d003      	beq.n	800ab68 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 800ab60:	4b16      	ldr	r3, [pc, #88]	; (800abbc <ethernetif_update_config+0xf4>)
 800ab62:	2200      	movs	r2, #0
 800ab64:	609a      	str	r2, [r3, #8]
 800ab66:	e016      	b.n	800ab96 <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 800ab68:	4b14      	ldr	r3, [pc, #80]	; (800abbc <ethernetif_update_config+0xf4>)
 800ab6a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800ab6e:	609a      	str	r2, [r3, #8]
 800ab70:	e011      	b.n	800ab96 <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 800ab72:	bf00      	nop
 800ab74:	e000      	b.n	800ab78 <ethernetif_update_config+0xb0>
          goto error;
 800ab76:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 800ab78:	4b10      	ldr	r3, [pc, #64]	; (800abbc <ethernetif_update_config+0xf4>)
 800ab7a:	68db      	ldr	r3, [r3, #12]
 800ab7c:	08db      	lsrs	r3, r3, #3
 800ab7e:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 800ab80:	4b0e      	ldr	r3, [pc, #56]	; (800abbc <ethernetif_update_config+0xf4>)
 800ab82:	689b      	ldr	r3, [r3, #8]
 800ab84:	085b      	lsrs	r3, r3, #1
 800ab86:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 800ab88:	4313      	orrs	r3, r2
 800ab8a:	b29b      	uxth	r3, r3
 800ab8c:	461a      	mov	r2, r3
 800ab8e:	2100      	movs	r1, #0
 800ab90:	480a      	ldr	r0, [pc, #40]	; (800abbc <ethernetif_update_config+0xf4>)
 800ab92:	f7f9 fd13 	bl	80045bc <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 800ab96:	2100      	movs	r1, #0
 800ab98:	4808      	ldr	r0, [pc, #32]	; (800abbc <ethernetif_update_config+0xf4>)
 800ab9a:	f7f9 fdd3 	bl	8004744 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 800ab9e:	4807      	ldr	r0, [pc, #28]	; (800abbc <ethernetif_update_config+0xf4>)
 800aba0:	f7f9 fd72 	bl	8004688 <HAL_ETH_Start>
 800aba4:	e002      	b.n	800abac <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 800aba6:	4805      	ldr	r0, [pc, #20]	; (800abbc <ethernetif_update_config+0xf4>)
 800aba8:	f7f9 fd9d 	bl	80046e6 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 800abac:	6878      	ldr	r0, [r7, #4]
 800abae:	f000 f807 	bl	800abc0 <ethernetif_notify_conn_changed>
}
 800abb2:	bf00      	nop
 800abb4:	3710      	adds	r7, #16
 800abb6:	46bd      	mov	sp, r7
 800abb8:	bd80      	pop	{r7, pc}
 800abba:	bf00      	nop
 800abbc:	20002544 	.word	0x20002544

0800abc0 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 800abc0:	b480      	push	{r7}
 800abc2:	b083      	sub	sp, #12
 800abc4:	af00      	add	r7, sp, #0
 800abc6:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 800abc8:	bf00      	nop
 800abca:	370c      	adds	r7, #12
 800abcc:	46bd      	mov	sp, r7
 800abce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd2:	4770      	bx	lr

0800abd4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800abd4:	b480      	push	{r7}
 800abd6:	b087      	sub	sp, #28
 800abd8:	af00      	add	r7, sp, #0
 800abda:	60f8      	str	r0, [r7, #12]
 800abdc:	60b9      	str	r1, [r7, #8]
 800abde:	4613      	mov	r3, r2
 800abe0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800abe2:	2301      	movs	r3, #1
 800abe4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800abe6:	2300      	movs	r3, #0
 800abe8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800abea:	4b1f      	ldr	r3, [pc, #124]	; (800ac68 <FATFS_LinkDriverEx+0x94>)
 800abec:	7a5b      	ldrb	r3, [r3, #9]
 800abee:	b2db      	uxtb	r3, r3
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d131      	bne.n	800ac58 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800abf4:	4b1c      	ldr	r3, [pc, #112]	; (800ac68 <FATFS_LinkDriverEx+0x94>)
 800abf6:	7a5b      	ldrb	r3, [r3, #9]
 800abf8:	b2db      	uxtb	r3, r3
 800abfa:	461a      	mov	r2, r3
 800abfc:	4b1a      	ldr	r3, [pc, #104]	; (800ac68 <FATFS_LinkDriverEx+0x94>)
 800abfe:	2100      	movs	r1, #0
 800ac00:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800ac02:	4b19      	ldr	r3, [pc, #100]	; (800ac68 <FATFS_LinkDriverEx+0x94>)
 800ac04:	7a5b      	ldrb	r3, [r3, #9]
 800ac06:	b2db      	uxtb	r3, r3
 800ac08:	4a17      	ldr	r2, [pc, #92]	; (800ac68 <FATFS_LinkDriverEx+0x94>)
 800ac0a:	009b      	lsls	r3, r3, #2
 800ac0c:	4413      	add	r3, r2
 800ac0e:	68fa      	ldr	r2, [r7, #12]
 800ac10:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800ac12:	4b15      	ldr	r3, [pc, #84]	; (800ac68 <FATFS_LinkDriverEx+0x94>)
 800ac14:	7a5b      	ldrb	r3, [r3, #9]
 800ac16:	b2db      	uxtb	r3, r3
 800ac18:	461a      	mov	r2, r3
 800ac1a:	4b13      	ldr	r3, [pc, #76]	; (800ac68 <FATFS_LinkDriverEx+0x94>)
 800ac1c:	4413      	add	r3, r2
 800ac1e:	79fa      	ldrb	r2, [r7, #7]
 800ac20:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800ac22:	4b11      	ldr	r3, [pc, #68]	; (800ac68 <FATFS_LinkDriverEx+0x94>)
 800ac24:	7a5b      	ldrb	r3, [r3, #9]
 800ac26:	b2db      	uxtb	r3, r3
 800ac28:	1c5a      	adds	r2, r3, #1
 800ac2a:	b2d1      	uxtb	r1, r2
 800ac2c:	4a0e      	ldr	r2, [pc, #56]	; (800ac68 <FATFS_LinkDriverEx+0x94>)
 800ac2e:	7251      	strb	r1, [r2, #9]
 800ac30:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800ac32:	7dbb      	ldrb	r3, [r7, #22]
 800ac34:	3330      	adds	r3, #48	; 0x30
 800ac36:	b2da      	uxtb	r2, r3
 800ac38:	68bb      	ldr	r3, [r7, #8]
 800ac3a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800ac3c:	68bb      	ldr	r3, [r7, #8]
 800ac3e:	3301      	adds	r3, #1
 800ac40:	223a      	movs	r2, #58	; 0x3a
 800ac42:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800ac44:	68bb      	ldr	r3, [r7, #8]
 800ac46:	3302      	adds	r3, #2
 800ac48:	222f      	movs	r2, #47	; 0x2f
 800ac4a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800ac4c:	68bb      	ldr	r3, [r7, #8]
 800ac4e:	3303      	adds	r3, #3
 800ac50:	2200      	movs	r2, #0
 800ac52:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800ac54:	2300      	movs	r3, #0
 800ac56:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800ac58:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac5a:	4618      	mov	r0, r3
 800ac5c:	371c      	adds	r7, #28
 800ac5e:	46bd      	mov	sp, r7
 800ac60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac64:	4770      	bx	lr
 800ac66:	bf00      	nop
 800ac68:	200000a8 	.word	0x200000a8

0800ac6c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800ac6c:	b580      	push	{r7, lr}
 800ac6e:	b082      	sub	sp, #8
 800ac70:	af00      	add	r7, sp, #0
 800ac72:	6078      	str	r0, [r7, #4]
 800ac74:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800ac76:	2200      	movs	r2, #0
 800ac78:	6839      	ldr	r1, [r7, #0]
 800ac7a:	6878      	ldr	r0, [r7, #4]
 800ac7c:	f7ff ffaa 	bl	800abd4 <FATFS_LinkDriverEx>
 800ac80:	4603      	mov	r3, r0
}
 800ac82:	4618      	mov	r0, r3
 800ac84:	3708      	adds	r7, #8
 800ac86:	46bd      	mov	sp, r7
 800ac88:	bd80      	pop	{r7, pc}

0800ac8a <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800ac8a:	b480      	push	{r7}
 800ac8c:	b083      	sub	sp, #12
 800ac8e:	af00      	add	r7, sp, #0
 800ac90:	4603      	mov	r3, r0
 800ac92:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800ac94:	88fb      	ldrh	r3, [r7, #6]
 800ac96:	021b      	lsls	r3, r3, #8
 800ac98:	b21a      	sxth	r2, r3
 800ac9a:	88fb      	ldrh	r3, [r7, #6]
 800ac9c:	0a1b      	lsrs	r3, r3, #8
 800ac9e:	b29b      	uxth	r3, r3
 800aca0:	b21b      	sxth	r3, r3
 800aca2:	4313      	orrs	r3, r2
 800aca4:	b21b      	sxth	r3, r3
 800aca6:	b29b      	uxth	r3, r3
}
 800aca8:	4618      	mov	r0, r3
 800acaa:	370c      	adds	r7, #12
 800acac:	46bd      	mov	sp, r7
 800acae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb2:	4770      	bx	lr

0800acb4 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800acb4:	b480      	push	{r7}
 800acb6:	b083      	sub	sp, #12
 800acb8:	af00      	add	r7, sp, #0
 800acba:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	061a      	lsls	r2, r3, #24
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	021b      	lsls	r3, r3, #8
 800acc4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800acc8:	431a      	orrs	r2, r3
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	0a1b      	lsrs	r3, r3, #8
 800acce:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800acd2:	431a      	orrs	r2, r3
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	0e1b      	lsrs	r3, r3, #24
 800acd8:	4313      	orrs	r3, r2
}
 800acda:	4618      	mov	r0, r3
 800acdc:	370c      	adds	r7, #12
 800acde:	46bd      	mov	sp, r7
 800ace0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace4:	4770      	bx	lr

0800ace6 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800ace6:	b580      	push	{r7, lr}
 800ace8:	b082      	sub	sp, #8
 800acea:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800acec:	2300      	movs	r3, #0
 800acee:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 800acf0:	f000 f8d4 	bl	800ae9c <mem_init>
  memp_init();
 800acf4:	f000 fbda 	bl	800b4ac <memp_init>
  pbuf_init();
  netif_init();
 800acf8:	f000 fc92 	bl	800b620 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800acfc:	f006 ff46 	bl	8011b8c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800ad00:	f001 fce4 	bl	800c6cc <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800ad04:	f006 fefa 	bl	8011afc <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800ad08:	bf00      	nop
 800ad0a:	3708      	adds	r7, #8
 800ad0c:	46bd      	mov	sp, r7
 800ad0e:	bd80      	pop	{r7, pc}

0800ad10 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800ad10:	b480      	push	{r7}
 800ad12:	b083      	sub	sp, #12
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	4603      	mov	r3, r0
 800ad18:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800ad1a:	4b05      	ldr	r3, [pc, #20]	; (800ad30 <ptr_to_mem+0x20>)
 800ad1c:	681a      	ldr	r2, [r3, #0]
 800ad1e:	88fb      	ldrh	r3, [r7, #6]
 800ad20:	4413      	add	r3, r2
}
 800ad22:	4618      	mov	r0, r3
 800ad24:	370c      	adds	r7, #12
 800ad26:	46bd      	mov	sp, r7
 800ad28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad2c:	4770      	bx	lr
 800ad2e:	bf00      	nop
 800ad30:	200000b4 	.word	0x200000b4

0800ad34 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800ad34:	b480      	push	{r7}
 800ad36:	b083      	sub	sp, #12
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800ad3c:	4b05      	ldr	r3, [pc, #20]	; (800ad54 <mem_to_ptr+0x20>)
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	687a      	ldr	r2, [r7, #4]
 800ad42:	1ad3      	subs	r3, r2, r3
 800ad44:	b29b      	uxth	r3, r3
}
 800ad46:	4618      	mov	r0, r3
 800ad48:	370c      	adds	r7, #12
 800ad4a:	46bd      	mov	sp, r7
 800ad4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad50:	4770      	bx	lr
 800ad52:	bf00      	nop
 800ad54:	200000b4 	.word	0x200000b4

0800ad58 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800ad58:	b590      	push	{r4, r7, lr}
 800ad5a:	b085      	sub	sp, #20
 800ad5c:	af00      	add	r7, sp, #0
 800ad5e:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800ad60:	4b45      	ldr	r3, [pc, #276]	; (800ae78 <plug_holes+0x120>)
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	687a      	ldr	r2, [r7, #4]
 800ad66:	429a      	cmp	r2, r3
 800ad68:	d206      	bcs.n	800ad78 <plug_holes+0x20>
 800ad6a:	4b44      	ldr	r3, [pc, #272]	; (800ae7c <plug_holes+0x124>)
 800ad6c:	f240 12df 	movw	r2, #479	; 0x1df
 800ad70:	4943      	ldr	r1, [pc, #268]	; (800ae80 <plug_holes+0x128>)
 800ad72:	4844      	ldr	r0, [pc, #272]	; (800ae84 <plug_holes+0x12c>)
 800ad74:	f009 fbe6 	bl	8014544 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800ad78:	4b43      	ldr	r3, [pc, #268]	; (800ae88 <plug_holes+0x130>)
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	687a      	ldr	r2, [r7, #4]
 800ad7e:	429a      	cmp	r2, r3
 800ad80:	d306      	bcc.n	800ad90 <plug_holes+0x38>
 800ad82:	4b3e      	ldr	r3, [pc, #248]	; (800ae7c <plug_holes+0x124>)
 800ad84:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800ad88:	4940      	ldr	r1, [pc, #256]	; (800ae8c <plug_holes+0x134>)
 800ad8a:	483e      	ldr	r0, [pc, #248]	; (800ae84 <plug_holes+0x12c>)
 800ad8c:	f009 fbda 	bl	8014544 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	791b      	ldrb	r3, [r3, #4]
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d006      	beq.n	800ada6 <plug_holes+0x4e>
 800ad98:	4b38      	ldr	r3, [pc, #224]	; (800ae7c <plug_holes+0x124>)
 800ad9a:	f240 12e1 	movw	r2, #481	; 0x1e1
 800ad9e:	493c      	ldr	r1, [pc, #240]	; (800ae90 <plug_holes+0x138>)
 800ada0:	4838      	ldr	r0, [pc, #224]	; (800ae84 <plug_holes+0x12c>)
 800ada2:	f009 fbcf 	bl	8014544 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	881b      	ldrh	r3, [r3, #0]
 800adaa:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800adae:	d906      	bls.n	800adbe <plug_holes+0x66>
 800adb0:	4b32      	ldr	r3, [pc, #200]	; (800ae7c <plug_holes+0x124>)
 800adb2:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800adb6:	4937      	ldr	r1, [pc, #220]	; (800ae94 <plug_holes+0x13c>)
 800adb8:	4832      	ldr	r0, [pc, #200]	; (800ae84 <plug_holes+0x12c>)
 800adba:	f009 fbc3 	bl	8014544 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	881b      	ldrh	r3, [r3, #0]
 800adc2:	4618      	mov	r0, r3
 800adc4:	f7ff ffa4 	bl	800ad10 <ptr_to_mem>
 800adc8:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800adca:	687a      	ldr	r2, [r7, #4]
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	429a      	cmp	r2, r3
 800add0:	d024      	beq.n	800ae1c <plug_holes+0xc4>
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	791b      	ldrb	r3, [r3, #4]
 800add6:	2b00      	cmp	r3, #0
 800add8:	d120      	bne.n	800ae1c <plug_holes+0xc4>
 800adda:	4b2b      	ldr	r3, [pc, #172]	; (800ae88 <plug_holes+0x130>)
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	68fa      	ldr	r2, [r7, #12]
 800ade0:	429a      	cmp	r2, r3
 800ade2:	d01b      	beq.n	800ae1c <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800ade4:	4b2c      	ldr	r3, [pc, #176]	; (800ae98 <plug_holes+0x140>)
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	68fa      	ldr	r2, [r7, #12]
 800adea:	429a      	cmp	r2, r3
 800adec:	d102      	bne.n	800adf4 <plug_holes+0x9c>
      lfree = mem;
 800adee:	4a2a      	ldr	r2, [pc, #168]	; (800ae98 <plug_holes+0x140>)
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	881a      	ldrh	r2, [r3, #0]
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	881b      	ldrh	r3, [r3, #0]
 800ae00:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ae04:	d00a      	beq.n	800ae1c <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	881b      	ldrh	r3, [r3, #0]
 800ae0a:	4618      	mov	r0, r3
 800ae0c:	f7ff ff80 	bl	800ad10 <ptr_to_mem>
 800ae10:	4604      	mov	r4, r0
 800ae12:	6878      	ldr	r0, [r7, #4]
 800ae14:	f7ff ff8e 	bl	800ad34 <mem_to_ptr>
 800ae18:	4603      	mov	r3, r0
 800ae1a:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	885b      	ldrh	r3, [r3, #2]
 800ae20:	4618      	mov	r0, r3
 800ae22:	f7ff ff75 	bl	800ad10 <ptr_to_mem>
 800ae26:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800ae28:	68ba      	ldr	r2, [r7, #8]
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	429a      	cmp	r2, r3
 800ae2e:	d01f      	beq.n	800ae70 <plug_holes+0x118>
 800ae30:	68bb      	ldr	r3, [r7, #8]
 800ae32:	791b      	ldrb	r3, [r3, #4]
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d11b      	bne.n	800ae70 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800ae38:	4b17      	ldr	r3, [pc, #92]	; (800ae98 <plug_holes+0x140>)
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	687a      	ldr	r2, [r7, #4]
 800ae3e:	429a      	cmp	r2, r3
 800ae40:	d102      	bne.n	800ae48 <plug_holes+0xf0>
      lfree = pmem;
 800ae42:	4a15      	ldr	r2, [pc, #84]	; (800ae98 <plug_holes+0x140>)
 800ae44:	68bb      	ldr	r3, [r7, #8]
 800ae46:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	881a      	ldrh	r2, [r3, #0]
 800ae4c:	68bb      	ldr	r3, [r7, #8]
 800ae4e:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	881b      	ldrh	r3, [r3, #0]
 800ae54:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ae58:	d00a      	beq.n	800ae70 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	881b      	ldrh	r3, [r3, #0]
 800ae5e:	4618      	mov	r0, r3
 800ae60:	f7ff ff56 	bl	800ad10 <ptr_to_mem>
 800ae64:	4604      	mov	r4, r0
 800ae66:	68b8      	ldr	r0, [r7, #8]
 800ae68:	f7ff ff64 	bl	800ad34 <mem_to_ptr>
 800ae6c:	4603      	mov	r3, r0
 800ae6e:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800ae70:	bf00      	nop
 800ae72:	3714      	adds	r7, #20
 800ae74:	46bd      	mov	sp, r7
 800ae76:	bd90      	pop	{r4, r7, pc}
 800ae78:	200000b4 	.word	0x200000b4
 800ae7c:	08015970 	.word	0x08015970
 800ae80:	080159a0 	.word	0x080159a0
 800ae84:	080159b8 	.word	0x080159b8
 800ae88:	200000b8 	.word	0x200000b8
 800ae8c:	080159e0 	.word	0x080159e0
 800ae90:	080159fc 	.word	0x080159fc
 800ae94:	08015a18 	.word	0x08015a18
 800ae98:	200000bc 	.word	0x200000bc

0800ae9c <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800ae9c:	b580      	push	{r7, lr}
 800ae9e:	b082      	sub	sp, #8
 800aea0:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800aea2:	4b18      	ldr	r3, [pc, #96]	; (800af04 <mem_init+0x68>)
 800aea4:	3303      	adds	r3, #3
 800aea6:	f023 0303 	bic.w	r3, r3, #3
 800aeaa:	461a      	mov	r2, r3
 800aeac:	4b16      	ldr	r3, [pc, #88]	; (800af08 <mem_init+0x6c>)
 800aeae:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800aeb0:	4b15      	ldr	r3, [pc, #84]	; (800af08 <mem_init+0x6c>)
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800aebc:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	2200      	movs	r2, #0
 800aec2:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	2200      	movs	r2, #0
 800aec8:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800aeca:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800aece:	f7ff ff1f 	bl	800ad10 <ptr_to_mem>
 800aed2:	4603      	mov	r3, r0
 800aed4:	4a0d      	ldr	r2, [pc, #52]	; (800af0c <mem_init+0x70>)
 800aed6:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800aed8:	4b0c      	ldr	r3, [pc, #48]	; (800af0c <mem_init+0x70>)
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	2201      	movs	r2, #1
 800aede:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800aee0:	4b0a      	ldr	r3, [pc, #40]	; (800af0c <mem_init+0x70>)
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800aee8:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800aeea:	4b08      	ldr	r3, [pc, #32]	; (800af0c <mem_init+0x70>)
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800aef2:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800aef4:	4b04      	ldr	r3, [pc, #16]	; (800af08 <mem_init+0x6c>)
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	4a05      	ldr	r2, [pc, #20]	; (800af10 <mem_init+0x74>)
 800aefa:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 800aefc:	bf00      	nop
 800aefe:	3708      	adds	r7, #8
 800af00:	46bd      	mov	sp, r7
 800af02:	bd80      	pop	{r7, pc}
 800af04:	20003d74 	.word	0x20003d74
 800af08:	200000b4 	.word	0x200000b4
 800af0c:	200000b8 	.word	0x200000b8
 800af10:	200000bc 	.word	0x200000bc

0800af14 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800af14:	b580      	push	{r7, lr}
 800af16:	b086      	sub	sp, #24
 800af18:	af00      	add	r7, sp, #0
 800af1a:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800af1c:	6878      	ldr	r0, [r7, #4]
 800af1e:	f7ff ff09 	bl	800ad34 <mem_to_ptr>
 800af22:	4603      	mov	r3, r0
 800af24:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	881b      	ldrh	r3, [r3, #0]
 800af2a:	4618      	mov	r0, r3
 800af2c:	f7ff fef0 	bl	800ad10 <ptr_to_mem>
 800af30:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	885b      	ldrh	r3, [r3, #2]
 800af36:	4618      	mov	r0, r3
 800af38:	f7ff feea 	bl	800ad10 <ptr_to_mem>
 800af3c:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	881b      	ldrh	r3, [r3, #0]
 800af42:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800af46:	d818      	bhi.n	800af7a <mem_link_valid+0x66>
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	885b      	ldrh	r3, [r3, #2]
 800af4c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800af50:	d813      	bhi.n	800af7a <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800af56:	8afa      	ldrh	r2, [r7, #22]
 800af58:	429a      	cmp	r2, r3
 800af5a:	d004      	beq.n	800af66 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	881b      	ldrh	r3, [r3, #0]
 800af60:	8afa      	ldrh	r2, [r7, #22]
 800af62:	429a      	cmp	r2, r3
 800af64:	d109      	bne.n	800af7a <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800af66:	4b08      	ldr	r3, [pc, #32]	; (800af88 <mem_link_valid+0x74>)
 800af68:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800af6a:	693a      	ldr	r2, [r7, #16]
 800af6c:	429a      	cmp	r2, r3
 800af6e:	d006      	beq.n	800af7e <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800af70:	693b      	ldr	r3, [r7, #16]
 800af72:	885b      	ldrh	r3, [r3, #2]
 800af74:	8afa      	ldrh	r2, [r7, #22]
 800af76:	429a      	cmp	r2, r3
 800af78:	d001      	beq.n	800af7e <mem_link_valid+0x6a>
    return 0;
 800af7a:	2300      	movs	r3, #0
 800af7c:	e000      	b.n	800af80 <mem_link_valid+0x6c>
  }
  return 1;
 800af7e:	2301      	movs	r3, #1
}
 800af80:	4618      	mov	r0, r3
 800af82:	3718      	adds	r7, #24
 800af84:	46bd      	mov	sp, r7
 800af86:	bd80      	pop	{r7, pc}
 800af88:	200000b8 	.word	0x200000b8

0800af8c <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800af8c:	b580      	push	{r7, lr}
 800af8e:	b084      	sub	sp, #16
 800af90:	af00      	add	r7, sp, #0
 800af92:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	2b00      	cmp	r3, #0
 800af98:	d04c      	beq.n	800b034 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	f003 0303 	and.w	r3, r3, #3
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d007      	beq.n	800afb4 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800afa4:	4b25      	ldr	r3, [pc, #148]	; (800b03c <mem_free+0xb0>)
 800afa6:	f240 2273 	movw	r2, #627	; 0x273
 800afaa:	4925      	ldr	r1, [pc, #148]	; (800b040 <mem_free+0xb4>)
 800afac:	4825      	ldr	r0, [pc, #148]	; (800b044 <mem_free+0xb8>)
 800afae:	f009 fac9 	bl	8014544 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800afb2:	e040      	b.n	800b036 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	3b08      	subs	r3, #8
 800afb8:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800afba:	4b23      	ldr	r3, [pc, #140]	; (800b048 <mem_free+0xbc>)
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	68fa      	ldr	r2, [r7, #12]
 800afc0:	429a      	cmp	r2, r3
 800afc2:	d306      	bcc.n	800afd2 <mem_free+0x46>
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	f103 020c 	add.w	r2, r3, #12
 800afca:	4b20      	ldr	r3, [pc, #128]	; (800b04c <mem_free+0xc0>)
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	429a      	cmp	r2, r3
 800afd0:	d907      	bls.n	800afe2 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800afd2:	4b1a      	ldr	r3, [pc, #104]	; (800b03c <mem_free+0xb0>)
 800afd4:	f240 227f 	movw	r2, #639	; 0x27f
 800afd8:	491d      	ldr	r1, [pc, #116]	; (800b050 <mem_free+0xc4>)
 800afda:	481a      	ldr	r0, [pc, #104]	; (800b044 <mem_free+0xb8>)
 800afdc:	f009 fab2 	bl	8014544 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800afe0:	e029      	b.n	800b036 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	791b      	ldrb	r3, [r3, #4]
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d107      	bne.n	800affa <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800afea:	4b14      	ldr	r3, [pc, #80]	; (800b03c <mem_free+0xb0>)
 800afec:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800aff0:	4918      	ldr	r1, [pc, #96]	; (800b054 <mem_free+0xc8>)
 800aff2:	4814      	ldr	r0, [pc, #80]	; (800b044 <mem_free+0xb8>)
 800aff4:	f009 faa6 	bl	8014544 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800aff8:	e01d      	b.n	800b036 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 800affa:	68f8      	ldr	r0, [r7, #12]
 800affc:	f7ff ff8a 	bl	800af14 <mem_link_valid>
 800b000:	4603      	mov	r3, r0
 800b002:	2b00      	cmp	r3, #0
 800b004:	d107      	bne.n	800b016 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800b006:	4b0d      	ldr	r3, [pc, #52]	; (800b03c <mem_free+0xb0>)
 800b008:	f240 2295 	movw	r2, #661	; 0x295
 800b00c:	4912      	ldr	r1, [pc, #72]	; (800b058 <mem_free+0xcc>)
 800b00e:	480d      	ldr	r0, [pc, #52]	; (800b044 <mem_free+0xb8>)
 800b010:	f009 fa98 	bl	8014544 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800b014:	e00f      	b.n	800b036 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	2200      	movs	r2, #0
 800b01a:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800b01c:	4b0f      	ldr	r3, [pc, #60]	; (800b05c <mem_free+0xd0>)
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	68fa      	ldr	r2, [r7, #12]
 800b022:	429a      	cmp	r2, r3
 800b024:	d202      	bcs.n	800b02c <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800b026:	4a0d      	ldr	r2, [pc, #52]	; (800b05c <mem_free+0xd0>)
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800b02c:	68f8      	ldr	r0, [r7, #12]
 800b02e:	f7ff fe93 	bl	800ad58 <plug_holes>
 800b032:	e000      	b.n	800b036 <mem_free+0xaa>
    return;
 800b034:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 800b036:	3710      	adds	r7, #16
 800b038:	46bd      	mov	sp, r7
 800b03a:	bd80      	pop	{r7, pc}
 800b03c:	08015970 	.word	0x08015970
 800b040:	08015a44 	.word	0x08015a44
 800b044:	080159b8 	.word	0x080159b8
 800b048:	200000b4 	.word	0x200000b4
 800b04c:	200000b8 	.word	0x200000b8
 800b050:	08015a68 	.word	0x08015a68
 800b054:	08015a84 	.word	0x08015a84
 800b058:	08015aac 	.word	0x08015aac
 800b05c:	200000bc 	.word	0x200000bc

0800b060 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800b060:	b580      	push	{r7, lr}
 800b062:	b088      	sub	sp, #32
 800b064:	af00      	add	r7, sp, #0
 800b066:	6078      	str	r0, [r7, #4]
 800b068:	460b      	mov	r3, r1
 800b06a:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800b06c:	887b      	ldrh	r3, [r7, #2]
 800b06e:	3303      	adds	r3, #3
 800b070:	b29b      	uxth	r3, r3
 800b072:	f023 0303 	bic.w	r3, r3, #3
 800b076:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800b078:	8bfb      	ldrh	r3, [r7, #30]
 800b07a:	2b0b      	cmp	r3, #11
 800b07c:	d801      	bhi.n	800b082 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800b07e:	230c      	movs	r3, #12
 800b080:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800b082:	8bfb      	ldrh	r3, [r7, #30]
 800b084:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b088:	d803      	bhi.n	800b092 <mem_trim+0x32>
 800b08a:	8bfa      	ldrh	r2, [r7, #30]
 800b08c:	887b      	ldrh	r3, [r7, #2]
 800b08e:	429a      	cmp	r2, r3
 800b090:	d201      	bcs.n	800b096 <mem_trim+0x36>
    return NULL;
 800b092:	2300      	movs	r3, #0
 800b094:	e0cc      	b.n	800b230 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800b096:	4b68      	ldr	r3, [pc, #416]	; (800b238 <mem_trim+0x1d8>)
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	687a      	ldr	r2, [r7, #4]
 800b09c:	429a      	cmp	r2, r3
 800b09e:	d304      	bcc.n	800b0aa <mem_trim+0x4a>
 800b0a0:	4b66      	ldr	r3, [pc, #408]	; (800b23c <mem_trim+0x1dc>)
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	687a      	ldr	r2, [r7, #4]
 800b0a6:	429a      	cmp	r2, r3
 800b0a8:	d306      	bcc.n	800b0b8 <mem_trim+0x58>
 800b0aa:	4b65      	ldr	r3, [pc, #404]	; (800b240 <mem_trim+0x1e0>)
 800b0ac:	f240 22d1 	movw	r2, #721	; 0x2d1
 800b0b0:	4964      	ldr	r1, [pc, #400]	; (800b244 <mem_trim+0x1e4>)
 800b0b2:	4865      	ldr	r0, [pc, #404]	; (800b248 <mem_trim+0x1e8>)
 800b0b4:	f009 fa46 	bl	8014544 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800b0b8:	4b5f      	ldr	r3, [pc, #380]	; (800b238 <mem_trim+0x1d8>)
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	687a      	ldr	r2, [r7, #4]
 800b0be:	429a      	cmp	r2, r3
 800b0c0:	d304      	bcc.n	800b0cc <mem_trim+0x6c>
 800b0c2:	4b5e      	ldr	r3, [pc, #376]	; (800b23c <mem_trim+0x1dc>)
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	687a      	ldr	r2, [r7, #4]
 800b0c8:	429a      	cmp	r2, r3
 800b0ca:	d301      	bcc.n	800b0d0 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	e0af      	b.n	800b230 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	3b08      	subs	r3, #8
 800b0d4:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800b0d6:	69b8      	ldr	r0, [r7, #24]
 800b0d8:	f7ff fe2c 	bl	800ad34 <mem_to_ptr>
 800b0dc:	4603      	mov	r3, r0
 800b0de:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800b0e0:	69bb      	ldr	r3, [r7, #24]
 800b0e2:	881a      	ldrh	r2, [r3, #0]
 800b0e4:	8afb      	ldrh	r3, [r7, #22]
 800b0e6:	1ad3      	subs	r3, r2, r3
 800b0e8:	b29b      	uxth	r3, r3
 800b0ea:	3b08      	subs	r3, #8
 800b0ec:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800b0ee:	8bfa      	ldrh	r2, [r7, #30]
 800b0f0:	8abb      	ldrh	r3, [r7, #20]
 800b0f2:	429a      	cmp	r2, r3
 800b0f4:	d906      	bls.n	800b104 <mem_trim+0xa4>
 800b0f6:	4b52      	ldr	r3, [pc, #328]	; (800b240 <mem_trim+0x1e0>)
 800b0f8:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800b0fc:	4953      	ldr	r1, [pc, #332]	; (800b24c <mem_trim+0x1ec>)
 800b0fe:	4852      	ldr	r0, [pc, #328]	; (800b248 <mem_trim+0x1e8>)
 800b100:	f009 fa20 	bl	8014544 <iprintf>
  if (newsize > size) {
 800b104:	8bfa      	ldrh	r2, [r7, #30]
 800b106:	8abb      	ldrh	r3, [r7, #20]
 800b108:	429a      	cmp	r2, r3
 800b10a:	d901      	bls.n	800b110 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 800b10c:	2300      	movs	r3, #0
 800b10e:	e08f      	b.n	800b230 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 800b110:	8bfa      	ldrh	r2, [r7, #30]
 800b112:	8abb      	ldrh	r3, [r7, #20]
 800b114:	429a      	cmp	r2, r3
 800b116:	d101      	bne.n	800b11c <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	e089      	b.n	800b230 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 800b11c:	69bb      	ldr	r3, [r7, #24]
 800b11e:	881b      	ldrh	r3, [r3, #0]
 800b120:	4618      	mov	r0, r3
 800b122:	f7ff fdf5 	bl	800ad10 <ptr_to_mem>
 800b126:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800b128:	693b      	ldr	r3, [r7, #16]
 800b12a:	791b      	ldrb	r3, [r3, #4]
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d13f      	bne.n	800b1b0 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800b130:	69bb      	ldr	r3, [r7, #24]
 800b132:	881b      	ldrh	r3, [r3, #0]
 800b134:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b138:	d106      	bne.n	800b148 <mem_trim+0xe8>
 800b13a:	4b41      	ldr	r3, [pc, #260]	; (800b240 <mem_trim+0x1e0>)
 800b13c:	f240 22f5 	movw	r2, #757	; 0x2f5
 800b140:	4943      	ldr	r1, [pc, #268]	; (800b250 <mem_trim+0x1f0>)
 800b142:	4841      	ldr	r0, [pc, #260]	; (800b248 <mem_trim+0x1e8>)
 800b144:	f009 f9fe 	bl	8014544 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800b148:	693b      	ldr	r3, [r7, #16]
 800b14a:	881b      	ldrh	r3, [r3, #0]
 800b14c:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800b14e:	8afa      	ldrh	r2, [r7, #22]
 800b150:	8bfb      	ldrh	r3, [r7, #30]
 800b152:	4413      	add	r3, r2
 800b154:	b29b      	uxth	r3, r3
 800b156:	3308      	adds	r3, #8
 800b158:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800b15a:	4b3e      	ldr	r3, [pc, #248]	; (800b254 <mem_trim+0x1f4>)
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	693a      	ldr	r2, [r7, #16]
 800b160:	429a      	cmp	r2, r3
 800b162:	d106      	bne.n	800b172 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 800b164:	89fb      	ldrh	r3, [r7, #14]
 800b166:	4618      	mov	r0, r3
 800b168:	f7ff fdd2 	bl	800ad10 <ptr_to_mem>
 800b16c:	4603      	mov	r3, r0
 800b16e:	4a39      	ldr	r2, [pc, #228]	; (800b254 <mem_trim+0x1f4>)
 800b170:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800b172:	89fb      	ldrh	r3, [r7, #14]
 800b174:	4618      	mov	r0, r3
 800b176:	f7ff fdcb 	bl	800ad10 <ptr_to_mem>
 800b17a:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800b17c:	693b      	ldr	r3, [r7, #16]
 800b17e:	2200      	movs	r2, #0
 800b180:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800b182:	693b      	ldr	r3, [r7, #16]
 800b184:	89ba      	ldrh	r2, [r7, #12]
 800b186:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800b188:	693b      	ldr	r3, [r7, #16]
 800b18a:	8afa      	ldrh	r2, [r7, #22]
 800b18c:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800b18e:	69bb      	ldr	r3, [r7, #24]
 800b190:	89fa      	ldrh	r2, [r7, #14]
 800b192:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800b194:	693b      	ldr	r3, [r7, #16]
 800b196:	881b      	ldrh	r3, [r3, #0]
 800b198:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b19c:	d047      	beq.n	800b22e <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800b19e:	693b      	ldr	r3, [r7, #16]
 800b1a0:	881b      	ldrh	r3, [r3, #0]
 800b1a2:	4618      	mov	r0, r3
 800b1a4:	f7ff fdb4 	bl	800ad10 <ptr_to_mem>
 800b1a8:	4602      	mov	r2, r0
 800b1aa:	89fb      	ldrh	r3, [r7, #14]
 800b1ac:	8053      	strh	r3, [r2, #2]
 800b1ae:	e03e      	b.n	800b22e <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800b1b0:	8bfb      	ldrh	r3, [r7, #30]
 800b1b2:	f103 0214 	add.w	r2, r3, #20
 800b1b6:	8abb      	ldrh	r3, [r7, #20]
 800b1b8:	429a      	cmp	r2, r3
 800b1ba:	d838      	bhi.n	800b22e <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800b1bc:	8afa      	ldrh	r2, [r7, #22]
 800b1be:	8bfb      	ldrh	r3, [r7, #30]
 800b1c0:	4413      	add	r3, r2
 800b1c2:	b29b      	uxth	r3, r3
 800b1c4:	3308      	adds	r3, #8
 800b1c6:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800b1c8:	69bb      	ldr	r3, [r7, #24]
 800b1ca:	881b      	ldrh	r3, [r3, #0]
 800b1cc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b1d0:	d106      	bne.n	800b1e0 <mem_trim+0x180>
 800b1d2:	4b1b      	ldr	r3, [pc, #108]	; (800b240 <mem_trim+0x1e0>)
 800b1d4:	f240 3216 	movw	r2, #790	; 0x316
 800b1d8:	491d      	ldr	r1, [pc, #116]	; (800b250 <mem_trim+0x1f0>)
 800b1da:	481b      	ldr	r0, [pc, #108]	; (800b248 <mem_trim+0x1e8>)
 800b1dc:	f009 f9b2 	bl	8014544 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800b1e0:	89fb      	ldrh	r3, [r7, #14]
 800b1e2:	4618      	mov	r0, r3
 800b1e4:	f7ff fd94 	bl	800ad10 <ptr_to_mem>
 800b1e8:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800b1ea:	4b1a      	ldr	r3, [pc, #104]	; (800b254 <mem_trim+0x1f4>)
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	693a      	ldr	r2, [r7, #16]
 800b1f0:	429a      	cmp	r2, r3
 800b1f2:	d202      	bcs.n	800b1fa <mem_trim+0x19a>
      lfree = mem2;
 800b1f4:	4a17      	ldr	r2, [pc, #92]	; (800b254 <mem_trim+0x1f4>)
 800b1f6:	693b      	ldr	r3, [r7, #16]
 800b1f8:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800b1fa:	693b      	ldr	r3, [r7, #16]
 800b1fc:	2200      	movs	r2, #0
 800b1fe:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800b200:	69bb      	ldr	r3, [r7, #24]
 800b202:	881a      	ldrh	r2, [r3, #0]
 800b204:	693b      	ldr	r3, [r7, #16]
 800b206:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800b208:	693b      	ldr	r3, [r7, #16]
 800b20a:	8afa      	ldrh	r2, [r7, #22]
 800b20c:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800b20e:	69bb      	ldr	r3, [r7, #24]
 800b210:	89fa      	ldrh	r2, [r7, #14]
 800b212:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800b214:	693b      	ldr	r3, [r7, #16]
 800b216:	881b      	ldrh	r3, [r3, #0]
 800b218:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b21c:	d007      	beq.n	800b22e <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800b21e:	693b      	ldr	r3, [r7, #16]
 800b220:	881b      	ldrh	r3, [r3, #0]
 800b222:	4618      	mov	r0, r3
 800b224:	f7ff fd74 	bl	800ad10 <ptr_to_mem>
 800b228:	4602      	mov	r2, r0
 800b22a:	89fb      	ldrh	r3, [r7, #14]
 800b22c:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 800b22e:	687b      	ldr	r3, [r7, #4]
}
 800b230:	4618      	mov	r0, r3
 800b232:	3720      	adds	r7, #32
 800b234:	46bd      	mov	sp, r7
 800b236:	bd80      	pop	{r7, pc}
 800b238:	200000b4 	.word	0x200000b4
 800b23c:	200000b8 	.word	0x200000b8
 800b240:	08015970 	.word	0x08015970
 800b244:	08015ae0 	.word	0x08015ae0
 800b248:	080159b8 	.word	0x080159b8
 800b24c:	08015af8 	.word	0x08015af8
 800b250:	08015b18 	.word	0x08015b18
 800b254:	200000bc 	.word	0x200000bc

0800b258 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800b258:	b580      	push	{r7, lr}
 800b25a:	b088      	sub	sp, #32
 800b25c:	af00      	add	r7, sp, #0
 800b25e:	4603      	mov	r3, r0
 800b260:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800b262:	88fb      	ldrh	r3, [r7, #6]
 800b264:	2b00      	cmp	r3, #0
 800b266:	d101      	bne.n	800b26c <mem_malloc+0x14>
    return NULL;
 800b268:	2300      	movs	r3, #0
 800b26a:	e0d9      	b.n	800b420 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800b26c:	88fb      	ldrh	r3, [r7, #6]
 800b26e:	3303      	adds	r3, #3
 800b270:	b29b      	uxth	r3, r3
 800b272:	f023 0303 	bic.w	r3, r3, #3
 800b276:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800b278:	8bbb      	ldrh	r3, [r7, #28]
 800b27a:	2b0b      	cmp	r3, #11
 800b27c:	d801      	bhi.n	800b282 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800b27e:	230c      	movs	r3, #12
 800b280:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800b282:	8bbb      	ldrh	r3, [r7, #28]
 800b284:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b288:	d803      	bhi.n	800b292 <mem_malloc+0x3a>
 800b28a:	8bba      	ldrh	r2, [r7, #28]
 800b28c:	88fb      	ldrh	r3, [r7, #6]
 800b28e:	429a      	cmp	r2, r3
 800b290:	d201      	bcs.n	800b296 <mem_malloc+0x3e>
    return NULL;
 800b292:	2300      	movs	r3, #0
 800b294:	e0c4      	b.n	800b420 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800b296:	4b64      	ldr	r3, [pc, #400]	; (800b428 <mem_malloc+0x1d0>)
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	4618      	mov	r0, r3
 800b29c:	f7ff fd4a 	bl	800ad34 <mem_to_ptr>
 800b2a0:	4603      	mov	r3, r0
 800b2a2:	83fb      	strh	r3, [r7, #30]
 800b2a4:	e0b4      	b.n	800b410 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800b2a6:	8bfb      	ldrh	r3, [r7, #30]
 800b2a8:	4618      	mov	r0, r3
 800b2aa:	f7ff fd31 	bl	800ad10 <ptr_to_mem>
 800b2ae:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800b2b0:	697b      	ldr	r3, [r7, #20]
 800b2b2:	791b      	ldrb	r3, [r3, #4]
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	f040 80a4 	bne.w	800b402 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800b2ba:	697b      	ldr	r3, [r7, #20]
 800b2bc:	881b      	ldrh	r3, [r3, #0]
 800b2be:	461a      	mov	r2, r3
 800b2c0:	8bfb      	ldrh	r3, [r7, #30]
 800b2c2:	1ad3      	subs	r3, r2, r3
 800b2c4:	f1a3 0208 	sub.w	r2, r3, #8
 800b2c8:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800b2ca:	429a      	cmp	r2, r3
 800b2cc:	f0c0 8099 	bcc.w	800b402 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800b2d0:	697b      	ldr	r3, [r7, #20]
 800b2d2:	881b      	ldrh	r3, [r3, #0]
 800b2d4:	461a      	mov	r2, r3
 800b2d6:	8bfb      	ldrh	r3, [r7, #30]
 800b2d8:	1ad3      	subs	r3, r2, r3
 800b2da:	f1a3 0208 	sub.w	r2, r3, #8
 800b2de:	8bbb      	ldrh	r3, [r7, #28]
 800b2e0:	3314      	adds	r3, #20
 800b2e2:	429a      	cmp	r2, r3
 800b2e4:	d333      	bcc.n	800b34e <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800b2e6:	8bfa      	ldrh	r2, [r7, #30]
 800b2e8:	8bbb      	ldrh	r3, [r7, #28]
 800b2ea:	4413      	add	r3, r2
 800b2ec:	b29b      	uxth	r3, r3
 800b2ee:	3308      	adds	r3, #8
 800b2f0:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800b2f2:	8a7b      	ldrh	r3, [r7, #18]
 800b2f4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b2f8:	d106      	bne.n	800b308 <mem_malloc+0xb0>
 800b2fa:	4b4c      	ldr	r3, [pc, #304]	; (800b42c <mem_malloc+0x1d4>)
 800b2fc:	f240 3287 	movw	r2, #903	; 0x387
 800b300:	494b      	ldr	r1, [pc, #300]	; (800b430 <mem_malloc+0x1d8>)
 800b302:	484c      	ldr	r0, [pc, #304]	; (800b434 <mem_malloc+0x1dc>)
 800b304:	f009 f91e 	bl	8014544 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800b308:	8a7b      	ldrh	r3, [r7, #18]
 800b30a:	4618      	mov	r0, r3
 800b30c:	f7ff fd00 	bl	800ad10 <ptr_to_mem>
 800b310:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	2200      	movs	r2, #0
 800b316:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800b318:	697b      	ldr	r3, [r7, #20]
 800b31a:	881a      	ldrh	r2, [r3, #0]
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	8bfa      	ldrh	r2, [r7, #30]
 800b324:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800b326:	697b      	ldr	r3, [r7, #20]
 800b328:	8a7a      	ldrh	r2, [r7, #18]
 800b32a:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800b32c:	697b      	ldr	r3, [r7, #20]
 800b32e:	2201      	movs	r2, #1
 800b330:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	881b      	ldrh	r3, [r3, #0]
 800b336:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b33a:	d00b      	beq.n	800b354 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	881b      	ldrh	r3, [r3, #0]
 800b340:	4618      	mov	r0, r3
 800b342:	f7ff fce5 	bl	800ad10 <ptr_to_mem>
 800b346:	4602      	mov	r2, r0
 800b348:	8a7b      	ldrh	r3, [r7, #18]
 800b34a:	8053      	strh	r3, [r2, #2]
 800b34c:	e002      	b.n	800b354 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800b34e:	697b      	ldr	r3, [r7, #20]
 800b350:	2201      	movs	r2, #1
 800b352:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800b354:	4b34      	ldr	r3, [pc, #208]	; (800b428 <mem_malloc+0x1d0>)
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	697a      	ldr	r2, [r7, #20]
 800b35a:	429a      	cmp	r2, r3
 800b35c:	d127      	bne.n	800b3ae <mem_malloc+0x156>
          struct mem *cur = lfree;
 800b35e:	4b32      	ldr	r3, [pc, #200]	; (800b428 <mem_malloc+0x1d0>)
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800b364:	e005      	b.n	800b372 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800b366:	69bb      	ldr	r3, [r7, #24]
 800b368:	881b      	ldrh	r3, [r3, #0]
 800b36a:	4618      	mov	r0, r3
 800b36c:	f7ff fcd0 	bl	800ad10 <ptr_to_mem>
 800b370:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800b372:	69bb      	ldr	r3, [r7, #24]
 800b374:	791b      	ldrb	r3, [r3, #4]
 800b376:	2b00      	cmp	r3, #0
 800b378:	d004      	beq.n	800b384 <mem_malloc+0x12c>
 800b37a:	4b2f      	ldr	r3, [pc, #188]	; (800b438 <mem_malloc+0x1e0>)
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	69ba      	ldr	r2, [r7, #24]
 800b380:	429a      	cmp	r2, r3
 800b382:	d1f0      	bne.n	800b366 <mem_malloc+0x10e>
          }
          lfree = cur;
 800b384:	4a28      	ldr	r2, [pc, #160]	; (800b428 <mem_malloc+0x1d0>)
 800b386:	69bb      	ldr	r3, [r7, #24]
 800b388:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800b38a:	4b27      	ldr	r3, [pc, #156]	; (800b428 <mem_malloc+0x1d0>)
 800b38c:	681a      	ldr	r2, [r3, #0]
 800b38e:	4b2a      	ldr	r3, [pc, #168]	; (800b438 <mem_malloc+0x1e0>)
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	429a      	cmp	r2, r3
 800b394:	d00b      	beq.n	800b3ae <mem_malloc+0x156>
 800b396:	4b24      	ldr	r3, [pc, #144]	; (800b428 <mem_malloc+0x1d0>)
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	791b      	ldrb	r3, [r3, #4]
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d006      	beq.n	800b3ae <mem_malloc+0x156>
 800b3a0:	4b22      	ldr	r3, [pc, #136]	; (800b42c <mem_malloc+0x1d4>)
 800b3a2:	f240 32b5 	movw	r2, #949	; 0x3b5
 800b3a6:	4925      	ldr	r1, [pc, #148]	; (800b43c <mem_malloc+0x1e4>)
 800b3a8:	4822      	ldr	r0, [pc, #136]	; (800b434 <mem_malloc+0x1dc>)
 800b3aa:	f009 f8cb 	bl	8014544 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800b3ae:	8bba      	ldrh	r2, [r7, #28]
 800b3b0:	697b      	ldr	r3, [r7, #20]
 800b3b2:	4413      	add	r3, r2
 800b3b4:	3308      	adds	r3, #8
 800b3b6:	4a20      	ldr	r2, [pc, #128]	; (800b438 <mem_malloc+0x1e0>)
 800b3b8:	6812      	ldr	r2, [r2, #0]
 800b3ba:	4293      	cmp	r3, r2
 800b3bc:	d906      	bls.n	800b3cc <mem_malloc+0x174>
 800b3be:	4b1b      	ldr	r3, [pc, #108]	; (800b42c <mem_malloc+0x1d4>)
 800b3c0:	f240 32b9 	movw	r2, #953	; 0x3b9
 800b3c4:	491e      	ldr	r1, [pc, #120]	; (800b440 <mem_malloc+0x1e8>)
 800b3c6:	481b      	ldr	r0, [pc, #108]	; (800b434 <mem_malloc+0x1dc>)
 800b3c8:	f009 f8bc 	bl	8014544 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800b3cc:	697b      	ldr	r3, [r7, #20]
 800b3ce:	f003 0303 	and.w	r3, r3, #3
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d006      	beq.n	800b3e4 <mem_malloc+0x18c>
 800b3d6:	4b15      	ldr	r3, [pc, #84]	; (800b42c <mem_malloc+0x1d4>)
 800b3d8:	f240 32bb 	movw	r2, #955	; 0x3bb
 800b3dc:	4919      	ldr	r1, [pc, #100]	; (800b444 <mem_malloc+0x1ec>)
 800b3de:	4815      	ldr	r0, [pc, #84]	; (800b434 <mem_malloc+0x1dc>)
 800b3e0:	f009 f8b0 	bl	8014544 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800b3e4:	697b      	ldr	r3, [r7, #20]
 800b3e6:	f003 0303 	and.w	r3, r3, #3
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d006      	beq.n	800b3fc <mem_malloc+0x1a4>
 800b3ee:	4b0f      	ldr	r3, [pc, #60]	; (800b42c <mem_malloc+0x1d4>)
 800b3f0:	f240 32bd 	movw	r2, #957	; 0x3bd
 800b3f4:	4914      	ldr	r1, [pc, #80]	; (800b448 <mem_malloc+0x1f0>)
 800b3f6:	480f      	ldr	r0, [pc, #60]	; (800b434 <mem_malloc+0x1dc>)
 800b3f8:	f009 f8a4 	bl	8014544 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800b3fc:	697b      	ldr	r3, [r7, #20]
 800b3fe:	3308      	adds	r3, #8
 800b400:	e00e      	b.n	800b420 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 800b402:	8bfb      	ldrh	r3, [r7, #30]
 800b404:	4618      	mov	r0, r3
 800b406:	f7ff fc83 	bl	800ad10 <ptr_to_mem>
 800b40a:	4603      	mov	r3, r0
 800b40c:	881b      	ldrh	r3, [r3, #0]
 800b40e:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800b410:	8bfa      	ldrh	r2, [r7, #30]
 800b412:	8bbb      	ldrh	r3, [r7, #28]
 800b414:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800b418:	429a      	cmp	r2, r3
 800b41a:	f4ff af44 	bcc.w	800b2a6 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800b41e:	2300      	movs	r3, #0
}
 800b420:	4618      	mov	r0, r3
 800b422:	3720      	adds	r7, #32
 800b424:	46bd      	mov	sp, r7
 800b426:	bd80      	pop	{r7, pc}
 800b428:	200000bc 	.word	0x200000bc
 800b42c:	08015970 	.word	0x08015970
 800b430:	08015b18 	.word	0x08015b18
 800b434:	080159b8 	.word	0x080159b8
 800b438:	200000b8 	.word	0x200000b8
 800b43c:	08015b2c 	.word	0x08015b2c
 800b440:	08015b48 	.word	0x08015b48
 800b444:	08015b78 	.word	0x08015b78
 800b448:	08015ba8 	.word	0x08015ba8

0800b44c <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800b44c:	b480      	push	{r7}
 800b44e:	b085      	sub	sp, #20
 800b450:	af00      	add	r7, sp, #0
 800b452:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	689b      	ldr	r3, [r3, #8]
 800b458:	2200      	movs	r2, #0
 800b45a:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	685b      	ldr	r3, [r3, #4]
 800b460:	3303      	adds	r3, #3
 800b462:	f023 0303 	bic.w	r3, r3, #3
 800b466:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800b468:	2300      	movs	r3, #0
 800b46a:	60fb      	str	r3, [r7, #12]
 800b46c:	e011      	b.n	800b492 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	689b      	ldr	r3, [r3, #8]
 800b472:	681a      	ldr	r2, [r3, #0]
 800b474:	68bb      	ldr	r3, [r7, #8]
 800b476:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	689b      	ldr	r3, [r3, #8]
 800b47c:	68ba      	ldr	r2, [r7, #8]
 800b47e:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	881b      	ldrh	r3, [r3, #0]
 800b484:	461a      	mov	r2, r3
 800b486:	68bb      	ldr	r3, [r7, #8]
 800b488:	4413      	add	r3, r2
 800b48a:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	3301      	adds	r3, #1
 800b490:	60fb      	str	r3, [r7, #12]
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	885b      	ldrh	r3, [r3, #2]
 800b496:	461a      	mov	r2, r3
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	4293      	cmp	r3, r2
 800b49c:	dbe7      	blt.n	800b46e <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800b49e:	bf00      	nop
 800b4a0:	bf00      	nop
 800b4a2:	3714      	adds	r7, #20
 800b4a4:	46bd      	mov	sp, r7
 800b4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4aa:	4770      	bx	lr

0800b4ac <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800b4ac:	b580      	push	{r7, lr}
 800b4ae:	b082      	sub	sp, #8
 800b4b0:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800b4b2:	2300      	movs	r3, #0
 800b4b4:	80fb      	strh	r3, [r7, #6]
 800b4b6:	e009      	b.n	800b4cc <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800b4b8:	88fb      	ldrh	r3, [r7, #6]
 800b4ba:	4a08      	ldr	r2, [pc, #32]	; (800b4dc <memp_init+0x30>)
 800b4bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b4c0:	4618      	mov	r0, r3
 800b4c2:	f7ff ffc3 	bl	800b44c <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800b4c6:	88fb      	ldrh	r3, [r7, #6]
 800b4c8:	3301      	adds	r3, #1
 800b4ca:	80fb      	strh	r3, [r7, #6]
 800b4cc:	88fb      	ldrh	r3, [r7, #6]
 800b4ce:	2b08      	cmp	r3, #8
 800b4d0:	d9f2      	bls.n	800b4b8 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800b4d2:	bf00      	nop
 800b4d4:	bf00      	nop
 800b4d6:	3708      	adds	r7, #8
 800b4d8:	46bd      	mov	sp, r7
 800b4da:	bd80      	pop	{r7, pc}
 800b4dc:	0801839c 	.word	0x0801839c

0800b4e0 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800b4e0:	b580      	push	{r7, lr}
 800b4e2:	b084      	sub	sp, #16
 800b4e4:	af00      	add	r7, sp, #0
 800b4e6:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	689b      	ldr	r3, [r3, #8]
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d012      	beq.n	800b51c <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	689b      	ldr	r3, [r3, #8]
 800b4fa:	68fa      	ldr	r2, [r7, #12]
 800b4fc:	6812      	ldr	r2, [r2, #0]
 800b4fe:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	f003 0303 	and.w	r3, r3, #3
 800b506:	2b00      	cmp	r3, #0
 800b508:	d006      	beq.n	800b518 <do_memp_malloc_pool+0x38>
 800b50a:	4b07      	ldr	r3, [pc, #28]	; (800b528 <do_memp_malloc_pool+0x48>)
 800b50c:	f44f 728c 	mov.w	r2, #280	; 0x118
 800b510:	4906      	ldr	r1, [pc, #24]	; (800b52c <do_memp_malloc_pool+0x4c>)
 800b512:	4807      	ldr	r0, [pc, #28]	; (800b530 <do_memp_malloc_pool+0x50>)
 800b514:	f009 f816 	bl	8014544 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	e000      	b.n	800b51e <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800b51c:	2300      	movs	r3, #0
}
 800b51e:	4618      	mov	r0, r3
 800b520:	3710      	adds	r7, #16
 800b522:	46bd      	mov	sp, r7
 800b524:	bd80      	pop	{r7, pc}
 800b526:	bf00      	nop
 800b528:	08015bcc 	.word	0x08015bcc
 800b52c:	08015bfc 	.word	0x08015bfc
 800b530:	08015c20 	.word	0x08015c20

0800b534 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800b534:	b580      	push	{r7, lr}
 800b536:	b084      	sub	sp, #16
 800b538:	af00      	add	r7, sp, #0
 800b53a:	4603      	mov	r3, r0
 800b53c:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800b53e:	79fb      	ldrb	r3, [r7, #7]
 800b540:	2b08      	cmp	r3, #8
 800b542:	d908      	bls.n	800b556 <memp_malloc+0x22>
 800b544:	4b0a      	ldr	r3, [pc, #40]	; (800b570 <memp_malloc+0x3c>)
 800b546:	f240 1257 	movw	r2, #343	; 0x157
 800b54a:	490a      	ldr	r1, [pc, #40]	; (800b574 <memp_malloc+0x40>)
 800b54c:	480a      	ldr	r0, [pc, #40]	; (800b578 <memp_malloc+0x44>)
 800b54e:	f008 fff9 	bl	8014544 <iprintf>
 800b552:	2300      	movs	r3, #0
 800b554:	e008      	b.n	800b568 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800b556:	79fb      	ldrb	r3, [r7, #7]
 800b558:	4a08      	ldr	r2, [pc, #32]	; (800b57c <memp_malloc+0x48>)
 800b55a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b55e:	4618      	mov	r0, r3
 800b560:	f7ff ffbe 	bl	800b4e0 <do_memp_malloc_pool>
 800b564:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800b566:	68fb      	ldr	r3, [r7, #12]
}
 800b568:	4618      	mov	r0, r3
 800b56a:	3710      	adds	r7, #16
 800b56c:	46bd      	mov	sp, r7
 800b56e:	bd80      	pop	{r7, pc}
 800b570:	08015bcc 	.word	0x08015bcc
 800b574:	08015c5c 	.word	0x08015c5c
 800b578:	08015c20 	.word	0x08015c20
 800b57c:	0801839c 	.word	0x0801839c

0800b580 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800b580:	b580      	push	{r7, lr}
 800b582:	b084      	sub	sp, #16
 800b584:	af00      	add	r7, sp, #0
 800b586:	6078      	str	r0, [r7, #4]
 800b588:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800b58a:	683b      	ldr	r3, [r7, #0]
 800b58c:	f003 0303 	and.w	r3, r3, #3
 800b590:	2b00      	cmp	r3, #0
 800b592:	d006      	beq.n	800b5a2 <do_memp_free_pool+0x22>
 800b594:	4b0a      	ldr	r3, [pc, #40]	; (800b5c0 <do_memp_free_pool+0x40>)
 800b596:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800b59a:	490a      	ldr	r1, [pc, #40]	; (800b5c4 <do_memp_free_pool+0x44>)
 800b59c:	480a      	ldr	r0, [pc, #40]	; (800b5c8 <do_memp_free_pool+0x48>)
 800b59e:	f008 ffd1 	bl	8014544 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800b5a2:	683b      	ldr	r3, [r7, #0]
 800b5a4:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	689b      	ldr	r3, [r3, #8]
 800b5aa:	681a      	ldr	r2, [r3, #0]
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	689b      	ldr	r3, [r3, #8]
 800b5b4:	68fa      	ldr	r2, [r7, #12]
 800b5b6:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 800b5b8:	bf00      	nop
 800b5ba:	3710      	adds	r7, #16
 800b5bc:	46bd      	mov	sp, r7
 800b5be:	bd80      	pop	{r7, pc}
 800b5c0:	08015bcc 	.word	0x08015bcc
 800b5c4:	08015c7c 	.word	0x08015c7c
 800b5c8:	08015c20 	.word	0x08015c20

0800b5cc <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800b5cc:	b580      	push	{r7, lr}
 800b5ce:	b082      	sub	sp, #8
 800b5d0:	af00      	add	r7, sp, #0
 800b5d2:	4603      	mov	r3, r0
 800b5d4:	6039      	str	r1, [r7, #0]
 800b5d6:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800b5d8:	79fb      	ldrb	r3, [r7, #7]
 800b5da:	2b08      	cmp	r3, #8
 800b5dc:	d907      	bls.n	800b5ee <memp_free+0x22>
 800b5de:	4b0c      	ldr	r3, [pc, #48]	; (800b610 <memp_free+0x44>)
 800b5e0:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800b5e4:	490b      	ldr	r1, [pc, #44]	; (800b614 <memp_free+0x48>)
 800b5e6:	480c      	ldr	r0, [pc, #48]	; (800b618 <memp_free+0x4c>)
 800b5e8:	f008 ffac 	bl	8014544 <iprintf>
 800b5ec:	e00c      	b.n	800b608 <memp_free+0x3c>

  if (mem == NULL) {
 800b5ee:	683b      	ldr	r3, [r7, #0]
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d008      	beq.n	800b606 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800b5f4:	79fb      	ldrb	r3, [r7, #7]
 800b5f6:	4a09      	ldr	r2, [pc, #36]	; (800b61c <memp_free+0x50>)
 800b5f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b5fc:	6839      	ldr	r1, [r7, #0]
 800b5fe:	4618      	mov	r0, r3
 800b600:	f7ff ffbe 	bl	800b580 <do_memp_free_pool>
 800b604:	e000      	b.n	800b608 <memp_free+0x3c>
    return;
 800b606:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800b608:	3708      	adds	r7, #8
 800b60a:	46bd      	mov	sp, r7
 800b60c:	bd80      	pop	{r7, pc}
 800b60e:	bf00      	nop
 800b610:	08015bcc 	.word	0x08015bcc
 800b614:	08015c9c 	.word	0x08015c9c
 800b618:	08015c20 	.word	0x08015c20
 800b61c:	0801839c 	.word	0x0801839c

0800b620 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800b620:	b480      	push	{r7}
 800b622:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800b624:	bf00      	nop
 800b626:	46bd      	mov	sp, r7
 800b628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b62c:	4770      	bx	lr
	...

0800b630 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800b630:	b580      	push	{r7, lr}
 800b632:	b086      	sub	sp, #24
 800b634:	af00      	add	r7, sp, #0
 800b636:	60f8      	str	r0, [r7, #12]
 800b638:	60b9      	str	r1, [r7, #8]
 800b63a:	607a      	str	r2, [r7, #4]
 800b63c:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	2b00      	cmp	r3, #0
 800b642:	d108      	bne.n	800b656 <netif_add+0x26>
 800b644:	4b57      	ldr	r3, [pc, #348]	; (800b7a4 <netif_add+0x174>)
 800b646:	f240 1227 	movw	r2, #295	; 0x127
 800b64a:	4957      	ldr	r1, [pc, #348]	; (800b7a8 <netif_add+0x178>)
 800b64c:	4857      	ldr	r0, [pc, #348]	; (800b7ac <netif_add+0x17c>)
 800b64e:	f008 ff79 	bl	8014544 <iprintf>
 800b652:	2300      	movs	r3, #0
 800b654:	e0a2      	b.n	800b79c <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800b656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d108      	bne.n	800b66e <netif_add+0x3e>
 800b65c:	4b51      	ldr	r3, [pc, #324]	; (800b7a4 <netif_add+0x174>)
 800b65e:	f44f 7294 	mov.w	r2, #296	; 0x128
 800b662:	4953      	ldr	r1, [pc, #332]	; (800b7b0 <netif_add+0x180>)
 800b664:	4851      	ldr	r0, [pc, #324]	; (800b7ac <netif_add+0x17c>)
 800b666:	f008 ff6d 	bl	8014544 <iprintf>
 800b66a:	2300      	movs	r3, #0
 800b66c:	e096      	b.n	800b79c <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800b66e:	68bb      	ldr	r3, [r7, #8]
 800b670:	2b00      	cmp	r3, #0
 800b672:	d101      	bne.n	800b678 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800b674:	4b4f      	ldr	r3, [pc, #316]	; (800b7b4 <netif_add+0x184>)
 800b676:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d101      	bne.n	800b682 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800b67e:	4b4d      	ldr	r3, [pc, #308]	; (800b7b4 <netif_add+0x184>)
 800b680:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800b682:	683b      	ldr	r3, [r7, #0]
 800b684:	2b00      	cmp	r3, #0
 800b686:	d101      	bne.n	800b68c <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800b688:	4b4a      	ldr	r3, [pc, #296]	; (800b7b4 <netif_add+0x184>)
 800b68a:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	2200      	movs	r2, #0
 800b690:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	2200      	movs	r2, #0
 800b696:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	2200      	movs	r2, #0
 800b69c:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	4a45      	ldr	r2, [pc, #276]	; (800b7b8 <netif_add+0x188>)
 800b6a2:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	2200      	movs	r2, #0
 800b6a8:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	2200      	movs	r2, #0
 800b6ae:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	2200      	movs	r2, #0
 800b6b6:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	6a3a      	ldr	r2, [r7, #32]
 800b6bc:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800b6be:	4b3f      	ldr	r3, [pc, #252]	; (800b7bc <netif_add+0x18c>)
 800b6c0:	781a      	ldrb	r2, [r3, #0]
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b6cc:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800b6ce:	683b      	ldr	r3, [r7, #0]
 800b6d0:	687a      	ldr	r2, [r7, #4]
 800b6d2:	68b9      	ldr	r1, [r7, #8]
 800b6d4:	68f8      	ldr	r0, [r7, #12]
 800b6d6:	f000 f913 	bl	800b900 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800b6da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6dc:	68f8      	ldr	r0, [r7, #12]
 800b6de:	4798      	blx	r3
 800b6e0:	4603      	mov	r3, r0
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d001      	beq.n	800b6ea <netif_add+0xba>
    return NULL;
 800b6e6:	2300      	movs	r3, #0
 800b6e8:	e058      	b.n	800b79c <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b6f0:	2bff      	cmp	r3, #255	; 0xff
 800b6f2:	d103      	bne.n	800b6fc <netif_add+0xcc>
        netif->num = 0;
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	2200      	movs	r2, #0
 800b6f8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800b6fc:	2300      	movs	r3, #0
 800b6fe:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800b700:	4b2f      	ldr	r3, [pc, #188]	; (800b7c0 <netif_add+0x190>)
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	617b      	str	r3, [r7, #20]
 800b706:	e02b      	b.n	800b760 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800b708:	697a      	ldr	r2, [r7, #20]
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	429a      	cmp	r2, r3
 800b70e:	d106      	bne.n	800b71e <netif_add+0xee>
 800b710:	4b24      	ldr	r3, [pc, #144]	; (800b7a4 <netif_add+0x174>)
 800b712:	f240 128b 	movw	r2, #395	; 0x18b
 800b716:	492b      	ldr	r1, [pc, #172]	; (800b7c4 <netif_add+0x194>)
 800b718:	4824      	ldr	r0, [pc, #144]	; (800b7ac <netif_add+0x17c>)
 800b71a:	f008 ff13 	bl	8014544 <iprintf>
        num_netifs++;
 800b71e:	693b      	ldr	r3, [r7, #16]
 800b720:	3301      	adds	r3, #1
 800b722:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800b724:	693b      	ldr	r3, [r7, #16]
 800b726:	2bff      	cmp	r3, #255	; 0xff
 800b728:	dd06      	ble.n	800b738 <netif_add+0x108>
 800b72a:	4b1e      	ldr	r3, [pc, #120]	; (800b7a4 <netif_add+0x174>)
 800b72c:	f240 128d 	movw	r2, #397	; 0x18d
 800b730:	4925      	ldr	r1, [pc, #148]	; (800b7c8 <netif_add+0x198>)
 800b732:	481e      	ldr	r0, [pc, #120]	; (800b7ac <netif_add+0x17c>)
 800b734:	f008 ff06 	bl	8014544 <iprintf>
        if (netif2->num == netif->num) {
 800b738:	697b      	ldr	r3, [r7, #20]
 800b73a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b744:	429a      	cmp	r2, r3
 800b746:	d108      	bne.n	800b75a <netif_add+0x12a>
          netif->num++;
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b74e:	3301      	adds	r3, #1
 800b750:	b2da      	uxtb	r2, r3
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800b758:	e005      	b.n	800b766 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800b75a:	697b      	ldr	r3, [r7, #20]
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	617b      	str	r3, [r7, #20]
 800b760:	697b      	ldr	r3, [r7, #20]
 800b762:	2b00      	cmp	r3, #0
 800b764:	d1d0      	bne.n	800b708 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800b766:	697b      	ldr	r3, [r7, #20]
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d1be      	bne.n	800b6ea <netif_add+0xba>
  }
  if (netif->num == 254) {
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b772:	2bfe      	cmp	r3, #254	; 0xfe
 800b774:	d103      	bne.n	800b77e <netif_add+0x14e>
    netif_num = 0;
 800b776:	4b11      	ldr	r3, [pc, #68]	; (800b7bc <netif_add+0x18c>)
 800b778:	2200      	movs	r2, #0
 800b77a:	701a      	strb	r2, [r3, #0]
 800b77c:	e006      	b.n	800b78c <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b784:	3301      	adds	r3, #1
 800b786:	b2da      	uxtb	r2, r3
 800b788:	4b0c      	ldr	r3, [pc, #48]	; (800b7bc <netif_add+0x18c>)
 800b78a:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800b78c:	4b0c      	ldr	r3, [pc, #48]	; (800b7c0 <netif_add+0x190>)
 800b78e:	681a      	ldr	r2, [r3, #0]
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800b794:	4a0a      	ldr	r2, [pc, #40]	; (800b7c0 <netif_add+0x190>)
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800b79a:	68fb      	ldr	r3, [r7, #12]
}
 800b79c:	4618      	mov	r0, r3
 800b79e:	3718      	adds	r7, #24
 800b7a0:	46bd      	mov	sp, r7
 800b7a2:	bd80      	pop	{r7, pc}
 800b7a4:	08015cb8 	.word	0x08015cb8
 800b7a8:	08015d4c 	.word	0x08015d4c
 800b7ac:	08015d08 	.word	0x08015d08
 800b7b0:	08015d68 	.word	0x08015d68
 800b7b4:	08018400 	.word	0x08018400
 800b7b8:	0800bb13 	.word	0x0800bb13
 800b7bc:	200000e4 	.word	0x200000e4
 800b7c0:	20007290 	.word	0x20007290
 800b7c4:	08015d8c 	.word	0x08015d8c
 800b7c8:	08015da0 	.word	0x08015da0

0800b7cc <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800b7cc:	b580      	push	{r7, lr}
 800b7ce:	b082      	sub	sp, #8
 800b7d0:	af00      	add	r7, sp, #0
 800b7d2:	6078      	str	r0, [r7, #4]
 800b7d4:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800b7d6:	6839      	ldr	r1, [r7, #0]
 800b7d8:	6878      	ldr	r0, [r7, #4]
 800b7da:	f002 fabf 	bl	800dd5c <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800b7de:	6839      	ldr	r1, [r7, #0]
 800b7e0:	6878      	ldr	r0, [r7, #4]
 800b7e2:	f006 fb5d 	bl	8011ea0 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800b7e6:	bf00      	nop
 800b7e8:	3708      	adds	r7, #8
 800b7ea:	46bd      	mov	sp, r7
 800b7ec:	bd80      	pop	{r7, pc}
	...

0800b7f0 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800b7f0:	b580      	push	{r7, lr}
 800b7f2:	b086      	sub	sp, #24
 800b7f4:	af00      	add	r7, sp, #0
 800b7f6:	60f8      	str	r0, [r7, #12]
 800b7f8:	60b9      	str	r1, [r7, #8]
 800b7fa:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800b7fc:	68bb      	ldr	r3, [r7, #8]
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d106      	bne.n	800b810 <netif_do_set_ipaddr+0x20>
 800b802:	4b1d      	ldr	r3, [pc, #116]	; (800b878 <netif_do_set_ipaddr+0x88>)
 800b804:	f240 12cb 	movw	r2, #459	; 0x1cb
 800b808:	491c      	ldr	r1, [pc, #112]	; (800b87c <netif_do_set_ipaddr+0x8c>)
 800b80a:	481d      	ldr	r0, [pc, #116]	; (800b880 <netif_do_set_ipaddr+0x90>)
 800b80c:	f008 fe9a 	bl	8014544 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	2b00      	cmp	r3, #0
 800b814:	d106      	bne.n	800b824 <netif_do_set_ipaddr+0x34>
 800b816:	4b18      	ldr	r3, [pc, #96]	; (800b878 <netif_do_set_ipaddr+0x88>)
 800b818:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800b81c:	4917      	ldr	r1, [pc, #92]	; (800b87c <netif_do_set_ipaddr+0x8c>)
 800b81e:	4818      	ldr	r0, [pc, #96]	; (800b880 <netif_do_set_ipaddr+0x90>)
 800b820:	f008 fe90 	bl	8014544 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800b824:	68bb      	ldr	r3, [r7, #8]
 800b826:	681a      	ldr	r2, [r3, #0]
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	3304      	adds	r3, #4
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	429a      	cmp	r2, r3
 800b830:	d01c      	beq.n	800b86c <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800b832:	68bb      	ldr	r3, [r7, #8]
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	3304      	adds	r3, #4
 800b83c:	681a      	ldr	r2, [r3, #0]
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800b842:	f107 0314 	add.w	r3, r7, #20
 800b846:	4619      	mov	r1, r3
 800b848:	6878      	ldr	r0, [r7, #4]
 800b84a:	f7ff ffbf 	bl	800b7cc <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800b84e:	68bb      	ldr	r3, [r7, #8]
 800b850:	2b00      	cmp	r3, #0
 800b852:	d002      	beq.n	800b85a <netif_do_set_ipaddr+0x6a>
 800b854:	68bb      	ldr	r3, [r7, #8]
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	e000      	b.n	800b85c <netif_do_set_ipaddr+0x6c>
 800b85a:	2300      	movs	r3, #0
 800b85c:	68fa      	ldr	r2, [r7, #12]
 800b85e:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800b860:	2101      	movs	r1, #1
 800b862:	68f8      	ldr	r0, [r7, #12]
 800b864:	f000 f8d2 	bl	800ba0c <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800b868:	2301      	movs	r3, #1
 800b86a:	e000      	b.n	800b86e <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800b86c:	2300      	movs	r3, #0
}
 800b86e:	4618      	mov	r0, r3
 800b870:	3718      	adds	r7, #24
 800b872:	46bd      	mov	sp, r7
 800b874:	bd80      	pop	{r7, pc}
 800b876:	bf00      	nop
 800b878:	08015cb8 	.word	0x08015cb8
 800b87c:	08015dd0 	.word	0x08015dd0
 800b880:	08015d08 	.word	0x08015d08

0800b884 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800b884:	b480      	push	{r7}
 800b886:	b085      	sub	sp, #20
 800b888:	af00      	add	r7, sp, #0
 800b88a:	60f8      	str	r0, [r7, #12]
 800b88c:	60b9      	str	r1, [r7, #8]
 800b88e:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800b890:	68bb      	ldr	r3, [r7, #8]
 800b892:	681a      	ldr	r2, [r3, #0]
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	3308      	adds	r3, #8
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	429a      	cmp	r2, r3
 800b89c:	d00a      	beq.n	800b8b4 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800b89e:	68bb      	ldr	r3, [r7, #8]
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d002      	beq.n	800b8aa <netif_do_set_netmask+0x26>
 800b8a4:	68bb      	ldr	r3, [r7, #8]
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	e000      	b.n	800b8ac <netif_do_set_netmask+0x28>
 800b8aa:	2300      	movs	r3, #0
 800b8ac:	68fa      	ldr	r2, [r7, #12]
 800b8ae:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800b8b0:	2301      	movs	r3, #1
 800b8b2:	e000      	b.n	800b8b6 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800b8b4:	2300      	movs	r3, #0
}
 800b8b6:	4618      	mov	r0, r3
 800b8b8:	3714      	adds	r7, #20
 800b8ba:	46bd      	mov	sp, r7
 800b8bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8c0:	4770      	bx	lr

0800b8c2 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800b8c2:	b480      	push	{r7}
 800b8c4:	b085      	sub	sp, #20
 800b8c6:	af00      	add	r7, sp, #0
 800b8c8:	60f8      	str	r0, [r7, #12]
 800b8ca:	60b9      	str	r1, [r7, #8]
 800b8cc:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800b8ce:	68bb      	ldr	r3, [r7, #8]
 800b8d0:	681a      	ldr	r2, [r3, #0]
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	330c      	adds	r3, #12
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	429a      	cmp	r2, r3
 800b8da:	d00a      	beq.n	800b8f2 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800b8dc:	68bb      	ldr	r3, [r7, #8]
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d002      	beq.n	800b8e8 <netif_do_set_gw+0x26>
 800b8e2:	68bb      	ldr	r3, [r7, #8]
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	e000      	b.n	800b8ea <netif_do_set_gw+0x28>
 800b8e8:	2300      	movs	r3, #0
 800b8ea:	68fa      	ldr	r2, [r7, #12]
 800b8ec:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800b8ee:	2301      	movs	r3, #1
 800b8f0:	e000      	b.n	800b8f4 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800b8f2:	2300      	movs	r3, #0
}
 800b8f4:	4618      	mov	r0, r3
 800b8f6:	3714      	adds	r7, #20
 800b8f8:	46bd      	mov	sp, r7
 800b8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8fe:	4770      	bx	lr

0800b900 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800b900:	b580      	push	{r7, lr}
 800b902:	b088      	sub	sp, #32
 800b904:	af00      	add	r7, sp, #0
 800b906:	60f8      	str	r0, [r7, #12]
 800b908:	60b9      	str	r1, [r7, #8]
 800b90a:	607a      	str	r2, [r7, #4]
 800b90c:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800b90e:	2300      	movs	r3, #0
 800b910:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800b912:	2300      	movs	r3, #0
 800b914:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800b916:	68bb      	ldr	r3, [r7, #8]
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d101      	bne.n	800b920 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800b91c:	4b1c      	ldr	r3, [pc, #112]	; (800b990 <netif_set_addr+0x90>)
 800b91e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	2b00      	cmp	r3, #0
 800b924:	d101      	bne.n	800b92a <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800b926:	4b1a      	ldr	r3, [pc, #104]	; (800b990 <netif_set_addr+0x90>)
 800b928:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800b92a:	683b      	ldr	r3, [r7, #0]
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d101      	bne.n	800b934 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800b930:	4b17      	ldr	r3, [pc, #92]	; (800b990 <netif_set_addr+0x90>)
 800b932:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800b934:	68bb      	ldr	r3, [r7, #8]
 800b936:	2b00      	cmp	r3, #0
 800b938:	d003      	beq.n	800b942 <netif_set_addr+0x42>
 800b93a:	68bb      	ldr	r3, [r7, #8]
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d101      	bne.n	800b946 <netif_set_addr+0x46>
 800b942:	2301      	movs	r3, #1
 800b944:	e000      	b.n	800b948 <netif_set_addr+0x48>
 800b946:	2300      	movs	r3, #0
 800b948:	617b      	str	r3, [r7, #20]
  if (remove) {
 800b94a:	697b      	ldr	r3, [r7, #20]
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d006      	beq.n	800b95e <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800b950:	f107 0310 	add.w	r3, r7, #16
 800b954:	461a      	mov	r2, r3
 800b956:	68b9      	ldr	r1, [r7, #8]
 800b958:	68f8      	ldr	r0, [r7, #12]
 800b95a:	f7ff ff49 	bl	800b7f0 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800b95e:	69fa      	ldr	r2, [r7, #28]
 800b960:	6879      	ldr	r1, [r7, #4]
 800b962:	68f8      	ldr	r0, [r7, #12]
 800b964:	f7ff ff8e 	bl	800b884 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800b968:	69ba      	ldr	r2, [r7, #24]
 800b96a:	6839      	ldr	r1, [r7, #0]
 800b96c:	68f8      	ldr	r0, [r7, #12]
 800b96e:	f7ff ffa8 	bl	800b8c2 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800b972:	697b      	ldr	r3, [r7, #20]
 800b974:	2b00      	cmp	r3, #0
 800b976:	d106      	bne.n	800b986 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800b978:	f107 0310 	add.w	r3, r7, #16
 800b97c:	461a      	mov	r2, r3
 800b97e:	68b9      	ldr	r1, [r7, #8]
 800b980:	68f8      	ldr	r0, [r7, #12]
 800b982:	f7ff ff35 	bl	800b7f0 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800b986:	bf00      	nop
 800b988:	3720      	adds	r7, #32
 800b98a:	46bd      	mov	sp, r7
 800b98c:	bd80      	pop	{r7, pc}
 800b98e:	bf00      	nop
 800b990:	08018400 	.word	0x08018400

0800b994 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800b994:	b480      	push	{r7}
 800b996:	b083      	sub	sp, #12
 800b998:	af00      	add	r7, sp, #0
 800b99a:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800b99c:	4a04      	ldr	r2, [pc, #16]	; (800b9b0 <netif_set_default+0x1c>)
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800b9a2:	bf00      	nop
 800b9a4:	370c      	adds	r7, #12
 800b9a6:	46bd      	mov	sp, r7
 800b9a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ac:	4770      	bx	lr
 800b9ae:	bf00      	nop
 800b9b0:	20007294 	.word	0x20007294

0800b9b4 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800b9b4:	b580      	push	{r7, lr}
 800b9b6:	b082      	sub	sp, #8
 800b9b8:	af00      	add	r7, sp, #0
 800b9ba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d107      	bne.n	800b9d2 <netif_set_up+0x1e>
 800b9c2:	4b0f      	ldr	r3, [pc, #60]	; (800ba00 <netif_set_up+0x4c>)
 800b9c4:	f44f 7254 	mov.w	r2, #848	; 0x350
 800b9c8:	490e      	ldr	r1, [pc, #56]	; (800ba04 <netif_set_up+0x50>)
 800b9ca:	480f      	ldr	r0, [pc, #60]	; (800ba08 <netif_set_up+0x54>)
 800b9cc:	f008 fdba 	bl	8014544 <iprintf>
 800b9d0:	e013      	b.n	800b9fa <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b9d8:	f003 0301 	and.w	r3, r3, #1
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d10c      	bne.n	800b9fa <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b9e6:	f043 0301 	orr.w	r3, r3, #1
 800b9ea:	b2da      	uxtb	r2, r3
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800b9f2:	2103      	movs	r1, #3
 800b9f4:	6878      	ldr	r0, [r7, #4]
 800b9f6:	f000 f809 	bl	800ba0c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800b9fa:	3708      	adds	r7, #8
 800b9fc:	46bd      	mov	sp, r7
 800b9fe:	bd80      	pop	{r7, pc}
 800ba00:	08015cb8 	.word	0x08015cb8
 800ba04:	08015e40 	.word	0x08015e40
 800ba08:	08015d08 	.word	0x08015d08

0800ba0c <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800ba0c:	b580      	push	{r7, lr}
 800ba0e:	b082      	sub	sp, #8
 800ba10:	af00      	add	r7, sp, #0
 800ba12:	6078      	str	r0, [r7, #4]
 800ba14:	460b      	mov	r3, r1
 800ba16:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d106      	bne.n	800ba2c <netif_issue_reports+0x20>
 800ba1e:	4b18      	ldr	r3, [pc, #96]	; (800ba80 <netif_issue_reports+0x74>)
 800ba20:	f240 326d 	movw	r2, #877	; 0x36d
 800ba24:	4917      	ldr	r1, [pc, #92]	; (800ba84 <netif_issue_reports+0x78>)
 800ba26:	4818      	ldr	r0, [pc, #96]	; (800ba88 <netif_issue_reports+0x7c>)
 800ba28:	f008 fd8c 	bl	8014544 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ba32:	f003 0304 	and.w	r3, r3, #4
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d01e      	beq.n	800ba78 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ba40:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d017      	beq.n	800ba78 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800ba48:	78fb      	ldrb	r3, [r7, #3]
 800ba4a:	f003 0301 	and.w	r3, r3, #1
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d013      	beq.n	800ba7a <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	3304      	adds	r3, #4
 800ba56:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d00e      	beq.n	800ba7a <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ba62:	f003 0308 	and.w	r3, r3, #8
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d007      	beq.n	800ba7a <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	3304      	adds	r3, #4
 800ba6e:	4619      	mov	r1, r3
 800ba70:	6878      	ldr	r0, [r7, #4]
 800ba72:	f007 f97f 	bl	8012d74 <etharp_request>
 800ba76:	e000      	b.n	800ba7a <netif_issue_reports+0x6e>
    return;
 800ba78:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800ba7a:	3708      	adds	r7, #8
 800ba7c:	46bd      	mov	sp, r7
 800ba7e:	bd80      	pop	{r7, pc}
 800ba80:	08015cb8 	.word	0x08015cb8
 800ba84:	08015e5c 	.word	0x08015e5c
 800ba88:	08015d08 	.word	0x08015d08

0800ba8c <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800ba8c:	b580      	push	{r7, lr}
 800ba8e:	b082      	sub	sp, #8
 800ba90:	af00      	add	r7, sp, #0
 800ba92:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d107      	bne.n	800baaa <netif_set_down+0x1e>
 800ba9a:	4b12      	ldr	r3, [pc, #72]	; (800bae4 <netif_set_down+0x58>)
 800ba9c:	f240 329b 	movw	r2, #923	; 0x39b
 800baa0:	4911      	ldr	r1, [pc, #68]	; (800bae8 <netif_set_down+0x5c>)
 800baa2:	4812      	ldr	r0, [pc, #72]	; (800baec <netif_set_down+0x60>)
 800baa4:	f008 fd4e 	bl	8014544 <iprintf>
 800baa8:	e019      	b.n	800bade <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800bab0:	f003 0301 	and.w	r3, r3, #1
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d012      	beq.n	800bade <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800babe:	f023 0301 	bic.w	r3, r3, #1
 800bac2:	b2da      	uxtb	r2, r3
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800bad0:	f003 0308 	and.w	r3, r3, #8
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d002      	beq.n	800bade <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800bad8:	6878      	ldr	r0, [r7, #4]
 800bada:	f006 fd09 	bl	80124f0 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800bade:	3708      	adds	r7, #8
 800bae0:	46bd      	mov	sp, r7
 800bae2:	bd80      	pop	{r7, pc}
 800bae4:	08015cb8 	.word	0x08015cb8
 800bae8:	08015e80 	.word	0x08015e80
 800baec:	08015d08 	.word	0x08015d08

0800baf0 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800baf0:	b480      	push	{r7}
 800baf2:	b083      	sub	sp, #12
 800baf4:	af00      	add	r7, sp, #0
 800baf6:	6078      	str	r0, [r7, #4]
 800baf8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d002      	beq.n	800bb06 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	683a      	ldr	r2, [r7, #0]
 800bb04:	61da      	str	r2, [r3, #28]
  }
}
 800bb06:	bf00      	nop
 800bb08:	370c      	adds	r7, #12
 800bb0a:	46bd      	mov	sp, r7
 800bb0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb10:	4770      	bx	lr

0800bb12 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800bb12:	b480      	push	{r7}
 800bb14:	b085      	sub	sp, #20
 800bb16:	af00      	add	r7, sp, #0
 800bb18:	60f8      	str	r0, [r7, #12]
 800bb1a:	60b9      	str	r1, [r7, #8]
 800bb1c:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800bb1e:	f06f 030b 	mvn.w	r3, #11
}
 800bb22:	4618      	mov	r0, r3
 800bb24:	3714      	adds	r7, #20
 800bb26:	46bd      	mov	sp, r7
 800bb28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb2c:	4770      	bx	lr
	...

0800bb30 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800bb30:	b480      	push	{r7}
 800bb32:	b085      	sub	sp, #20
 800bb34:	af00      	add	r7, sp, #0
 800bb36:	4603      	mov	r3, r0
 800bb38:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800bb3a:	79fb      	ldrb	r3, [r7, #7]
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d013      	beq.n	800bb68 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800bb40:	4b0d      	ldr	r3, [pc, #52]	; (800bb78 <netif_get_by_index+0x48>)
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	60fb      	str	r3, [r7, #12]
 800bb46:	e00c      	b.n	800bb62 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bb4e:	3301      	adds	r3, #1
 800bb50:	b2db      	uxtb	r3, r3
 800bb52:	79fa      	ldrb	r2, [r7, #7]
 800bb54:	429a      	cmp	r2, r3
 800bb56:	d101      	bne.n	800bb5c <netif_get_by_index+0x2c>
        return netif; /* found! */
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	e006      	b.n	800bb6a <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	60fb      	str	r3, [r7, #12]
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d1ef      	bne.n	800bb48 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800bb68:	2300      	movs	r3, #0
}
 800bb6a:	4618      	mov	r0, r3
 800bb6c:	3714      	adds	r7, #20
 800bb6e:	46bd      	mov	sp, r7
 800bb70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb74:	4770      	bx	lr
 800bb76:	bf00      	nop
 800bb78:	20007290 	.word	0x20007290

0800bb7c <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800bb7c:	b480      	push	{r7}
 800bb7e:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 800bb80:	4b03      	ldr	r3, [pc, #12]	; (800bb90 <pbuf_pool_is_empty+0x14>)
 800bb82:	2201      	movs	r2, #1
 800bb84:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800bb86:	bf00      	nop
 800bb88:	46bd      	mov	sp, r7
 800bb8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb8e:	4770      	bx	lr
 800bb90:	20007298 	.word	0x20007298

0800bb94 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800bb94:	b480      	push	{r7}
 800bb96:	b085      	sub	sp, #20
 800bb98:	af00      	add	r7, sp, #0
 800bb9a:	60f8      	str	r0, [r7, #12]
 800bb9c:	60b9      	str	r1, [r7, #8]
 800bb9e:	4611      	mov	r1, r2
 800bba0:	461a      	mov	r2, r3
 800bba2:	460b      	mov	r3, r1
 800bba4:	80fb      	strh	r3, [r7, #6]
 800bba6:	4613      	mov	r3, r2
 800bba8:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	2200      	movs	r2, #0
 800bbae:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	68ba      	ldr	r2, [r7, #8]
 800bbb4:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	88fa      	ldrh	r2, [r7, #6]
 800bbba:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	88ba      	ldrh	r2, [r7, #4]
 800bbc0:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800bbc2:	8b3b      	ldrh	r3, [r7, #24]
 800bbc4:	b2da      	uxtb	r2, r3
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	7f3a      	ldrb	r2, [r7, #28]
 800bbce:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	2201      	movs	r2, #1
 800bbd4:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	2200      	movs	r2, #0
 800bbda:	73da      	strb	r2, [r3, #15]
}
 800bbdc:	bf00      	nop
 800bbde:	3714      	adds	r7, #20
 800bbe0:	46bd      	mov	sp, r7
 800bbe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbe6:	4770      	bx	lr

0800bbe8 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800bbe8:	b580      	push	{r7, lr}
 800bbea:	b08c      	sub	sp, #48	; 0x30
 800bbec:	af02      	add	r7, sp, #8
 800bbee:	4603      	mov	r3, r0
 800bbf0:	71fb      	strb	r3, [r7, #7]
 800bbf2:	460b      	mov	r3, r1
 800bbf4:	80bb      	strh	r3, [r7, #4]
 800bbf6:	4613      	mov	r3, r2
 800bbf8:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800bbfa:	79fb      	ldrb	r3, [r7, #7]
 800bbfc:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800bbfe:	887b      	ldrh	r3, [r7, #2]
 800bc00:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800bc04:	d07f      	beq.n	800bd06 <pbuf_alloc+0x11e>
 800bc06:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800bc0a:	f300 80c8 	bgt.w	800bd9e <pbuf_alloc+0x1b6>
 800bc0e:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800bc12:	d010      	beq.n	800bc36 <pbuf_alloc+0x4e>
 800bc14:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800bc18:	f300 80c1 	bgt.w	800bd9e <pbuf_alloc+0x1b6>
 800bc1c:	2b01      	cmp	r3, #1
 800bc1e:	d002      	beq.n	800bc26 <pbuf_alloc+0x3e>
 800bc20:	2b41      	cmp	r3, #65	; 0x41
 800bc22:	f040 80bc 	bne.w	800bd9e <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800bc26:	887a      	ldrh	r2, [r7, #2]
 800bc28:	88bb      	ldrh	r3, [r7, #4]
 800bc2a:	4619      	mov	r1, r3
 800bc2c:	2000      	movs	r0, #0
 800bc2e:	f000 f8d1 	bl	800bdd4 <pbuf_alloc_reference>
 800bc32:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800bc34:	e0bd      	b.n	800bdb2 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800bc36:	2300      	movs	r3, #0
 800bc38:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800bc3a:	2300      	movs	r3, #0
 800bc3c:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800bc3e:	88bb      	ldrh	r3, [r7, #4]
 800bc40:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800bc42:	2008      	movs	r0, #8
 800bc44:	f7ff fc76 	bl	800b534 <memp_malloc>
 800bc48:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800bc4a:	693b      	ldr	r3, [r7, #16]
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d109      	bne.n	800bc64 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800bc50:	f7ff ff94 	bl	800bb7c <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800bc54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d002      	beq.n	800bc60 <pbuf_alloc+0x78>
            pbuf_free(p);
 800bc5a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bc5c:	f000 faa8 	bl	800c1b0 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800bc60:	2300      	movs	r3, #0
 800bc62:	e0a7      	b.n	800bdb4 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800bc64:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bc66:	3303      	adds	r3, #3
 800bc68:	b29b      	uxth	r3, r3
 800bc6a:	f023 0303 	bic.w	r3, r3, #3
 800bc6e:	b29b      	uxth	r3, r3
 800bc70:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800bc74:	b29b      	uxth	r3, r3
 800bc76:	8b7a      	ldrh	r2, [r7, #26]
 800bc78:	4293      	cmp	r3, r2
 800bc7a:	bf28      	it	cs
 800bc7c:	4613      	movcs	r3, r2
 800bc7e:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800bc80:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bc82:	3310      	adds	r3, #16
 800bc84:	693a      	ldr	r2, [r7, #16]
 800bc86:	4413      	add	r3, r2
 800bc88:	3303      	adds	r3, #3
 800bc8a:	f023 0303 	bic.w	r3, r3, #3
 800bc8e:	4618      	mov	r0, r3
 800bc90:	89f9      	ldrh	r1, [r7, #14]
 800bc92:	8b7a      	ldrh	r2, [r7, #26]
 800bc94:	2300      	movs	r3, #0
 800bc96:	9301      	str	r3, [sp, #4]
 800bc98:	887b      	ldrh	r3, [r7, #2]
 800bc9a:	9300      	str	r3, [sp, #0]
 800bc9c:	460b      	mov	r3, r1
 800bc9e:	4601      	mov	r1, r0
 800bca0:	6938      	ldr	r0, [r7, #16]
 800bca2:	f7ff ff77 	bl	800bb94 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800bca6:	693b      	ldr	r3, [r7, #16]
 800bca8:	685b      	ldr	r3, [r3, #4]
 800bcaa:	f003 0303 	and.w	r3, r3, #3
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d006      	beq.n	800bcc0 <pbuf_alloc+0xd8>
 800bcb2:	4b42      	ldr	r3, [pc, #264]	; (800bdbc <pbuf_alloc+0x1d4>)
 800bcb4:	f44f 7280 	mov.w	r2, #256	; 0x100
 800bcb8:	4941      	ldr	r1, [pc, #260]	; (800bdc0 <pbuf_alloc+0x1d8>)
 800bcba:	4842      	ldr	r0, [pc, #264]	; (800bdc4 <pbuf_alloc+0x1dc>)
 800bcbc:	f008 fc42 	bl	8014544 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800bcc0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bcc2:	3303      	adds	r3, #3
 800bcc4:	f023 0303 	bic.w	r3, r3, #3
 800bcc8:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800bccc:	d106      	bne.n	800bcdc <pbuf_alloc+0xf4>
 800bcce:	4b3b      	ldr	r3, [pc, #236]	; (800bdbc <pbuf_alloc+0x1d4>)
 800bcd0:	f44f 7281 	mov.w	r2, #258	; 0x102
 800bcd4:	493c      	ldr	r1, [pc, #240]	; (800bdc8 <pbuf_alloc+0x1e0>)
 800bcd6:	483b      	ldr	r0, [pc, #236]	; (800bdc4 <pbuf_alloc+0x1dc>)
 800bcd8:	f008 fc34 	bl	8014544 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800bcdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d102      	bne.n	800bce8 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800bce2:	693b      	ldr	r3, [r7, #16]
 800bce4:	627b      	str	r3, [r7, #36]	; 0x24
 800bce6:	e002      	b.n	800bcee <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800bce8:	69fb      	ldr	r3, [r7, #28]
 800bcea:	693a      	ldr	r2, [r7, #16]
 800bcec:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800bcee:	693b      	ldr	r3, [r7, #16]
 800bcf0:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800bcf2:	8b7a      	ldrh	r2, [r7, #26]
 800bcf4:	89fb      	ldrh	r3, [r7, #14]
 800bcf6:	1ad3      	subs	r3, r2, r3
 800bcf8:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800bcfa:	2300      	movs	r3, #0
 800bcfc:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800bcfe:	8b7b      	ldrh	r3, [r7, #26]
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d19e      	bne.n	800bc42 <pbuf_alloc+0x5a>
      break;
 800bd04:	e055      	b.n	800bdb2 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800bd06:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bd08:	3303      	adds	r3, #3
 800bd0a:	b29b      	uxth	r3, r3
 800bd0c:	f023 0303 	bic.w	r3, r3, #3
 800bd10:	b29a      	uxth	r2, r3
 800bd12:	88bb      	ldrh	r3, [r7, #4]
 800bd14:	3303      	adds	r3, #3
 800bd16:	b29b      	uxth	r3, r3
 800bd18:	f023 0303 	bic.w	r3, r3, #3
 800bd1c:	b29b      	uxth	r3, r3
 800bd1e:	4413      	add	r3, r2
 800bd20:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800bd22:	8b3b      	ldrh	r3, [r7, #24]
 800bd24:	3310      	adds	r3, #16
 800bd26:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800bd28:	8b3a      	ldrh	r2, [r7, #24]
 800bd2a:	88bb      	ldrh	r3, [r7, #4]
 800bd2c:	3303      	adds	r3, #3
 800bd2e:	f023 0303 	bic.w	r3, r3, #3
 800bd32:	429a      	cmp	r2, r3
 800bd34:	d306      	bcc.n	800bd44 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800bd36:	8afa      	ldrh	r2, [r7, #22]
 800bd38:	88bb      	ldrh	r3, [r7, #4]
 800bd3a:	3303      	adds	r3, #3
 800bd3c:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800bd40:	429a      	cmp	r2, r3
 800bd42:	d201      	bcs.n	800bd48 <pbuf_alloc+0x160>
        return NULL;
 800bd44:	2300      	movs	r3, #0
 800bd46:	e035      	b.n	800bdb4 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800bd48:	8afb      	ldrh	r3, [r7, #22]
 800bd4a:	4618      	mov	r0, r3
 800bd4c:	f7ff fa84 	bl	800b258 <mem_malloc>
 800bd50:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800bd52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d101      	bne.n	800bd5c <pbuf_alloc+0x174>
        return NULL;
 800bd58:	2300      	movs	r3, #0
 800bd5a:	e02b      	b.n	800bdb4 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800bd5c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bd5e:	3310      	adds	r3, #16
 800bd60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bd62:	4413      	add	r3, r2
 800bd64:	3303      	adds	r3, #3
 800bd66:	f023 0303 	bic.w	r3, r3, #3
 800bd6a:	4618      	mov	r0, r3
 800bd6c:	88b9      	ldrh	r1, [r7, #4]
 800bd6e:	88ba      	ldrh	r2, [r7, #4]
 800bd70:	2300      	movs	r3, #0
 800bd72:	9301      	str	r3, [sp, #4]
 800bd74:	887b      	ldrh	r3, [r7, #2]
 800bd76:	9300      	str	r3, [sp, #0]
 800bd78:	460b      	mov	r3, r1
 800bd7a:	4601      	mov	r1, r0
 800bd7c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bd7e:	f7ff ff09 	bl	800bb94 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800bd82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd84:	685b      	ldr	r3, [r3, #4]
 800bd86:	f003 0303 	and.w	r3, r3, #3
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d010      	beq.n	800bdb0 <pbuf_alloc+0x1c8>
 800bd8e:	4b0b      	ldr	r3, [pc, #44]	; (800bdbc <pbuf_alloc+0x1d4>)
 800bd90:	f44f 7291 	mov.w	r2, #290	; 0x122
 800bd94:	490d      	ldr	r1, [pc, #52]	; (800bdcc <pbuf_alloc+0x1e4>)
 800bd96:	480b      	ldr	r0, [pc, #44]	; (800bdc4 <pbuf_alloc+0x1dc>)
 800bd98:	f008 fbd4 	bl	8014544 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800bd9c:	e008      	b.n	800bdb0 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800bd9e:	4b07      	ldr	r3, [pc, #28]	; (800bdbc <pbuf_alloc+0x1d4>)
 800bda0:	f240 1227 	movw	r2, #295	; 0x127
 800bda4:	490a      	ldr	r1, [pc, #40]	; (800bdd0 <pbuf_alloc+0x1e8>)
 800bda6:	4807      	ldr	r0, [pc, #28]	; (800bdc4 <pbuf_alloc+0x1dc>)
 800bda8:	f008 fbcc 	bl	8014544 <iprintf>
      return NULL;
 800bdac:	2300      	movs	r3, #0
 800bdae:	e001      	b.n	800bdb4 <pbuf_alloc+0x1cc>
      break;
 800bdb0:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800bdb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bdb4:	4618      	mov	r0, r3
 800bdb6:	3728      	adds	r7, #40	; 0x28
 800bdb8:	46bd      	mov	sp, r7
 800bdba:	bd80      	pop	{r7, pc}
 800bdbc:	08015ee8 	.word	0x08015ee8
 800bdc0:	08015f18 	.word	0x08015f18
 800bdc4:	08015f48 	.word	0x08015f48
 800bdc8:	08015f70 	.word	0x08015f70
 800bdcc:	08015fa4 	.word	0x08015fa4
 800bdd0:	08015fd0 	.word	0x08015fd0

0800bdd4 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800bdd4:	b580      	push	{r7, lr}
 800bdd6:	b086      	sub	sp, #24
 800bdd8:	af02      	add	r7, sp, #8
 800bdda:	6078      	str	r0, [r7, #4]
 800bddc:	460b      	mov	r3, r1
 800bdde:	807b      	strh	r3, [r7, #2]
 800bde0:	4613      	mov	r3, r2
 800bde2:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800bde4:	883b      	ldrh	r3, [r7, #0]
 800bde6:	2b41      	cmp	r3, #65	; 0x41
 800bde8:	d009      	beq.n	800bdfe <pbuf_alloc_reference+0x2a>
 800bdea:	883b      	ldrh	r3, [r7, #0]
 800bdec:	2b01      	cmp	r3, #1
 800bdee:	d006      	beq.n	800bdfe <pbuf_alloc_reference+0x2a>
 800bdf0:	4b0f      	ldr	r3, [pc, #60]	; (800be30 <pbuf_alloc_reference+0x5c>)
 800bdf2:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800bdf6:	490f      	ldr	r1, [pc, #60]	; (800be34 <pbuf_alloc_reference+0x60>)
 800bdf8:	480f      	ldr	r0, [pc, #60]	; (800be38 <pbuf_alloc_reference+0x64>)
 800bdfa:	f008 fba3 	bl	8014544 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800bdfe:	2007      	movs	r0, #7
 800be00:	f7ff fb98 	bl	800b534 <memp_malloc>
 800be04:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d101      	bne.n	800be10 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800be0c:	2300      	movs	r3, #0
 800be0e:	e00b      	b.n	800be28 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800be10:	8879      	ldrh	r1, [r7, #2]
 800be12:	887a      	ldrh	r2, [r7, #2]
 800be14:	2300      	movs	r3, #0
 800be16:	9301      	str	r3, [sp, #4]
 800be18:	883b      	ldrh	r3, [r7, #0]
 800be1a:	9300      	str	r3, [sp, #0]
 800be1c:	460b      	mov	r3, r1
 800be1e:	6879      	ldr	r1, [r7, #4]
 800be20:	68f8      	ldr	r0, [r7, #12]
 800be22:	f7ff feb7 	bl	800bb94 <pbuf_init_alloced_pbuf>
  return p;
 800be26:	68fb      	ldr	r3, [r7, #12]
}
 800be28:	4618      	mov	r0, r3
 800be2a:	3710      	adds	r7, #16
 800be2c:	46bd      	mov	sp, r7
 800be2e:	bd80      	pop	{r7, pc}
 800be30:	08015ee8 	.word	0x08015ee8
 800be34:	08015fec 	.word	0x08015fec
 800be38:	08015f48 	.word	0x08015f48

0800be3c <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800be3c:	b580      	push	{r7, lr}
 800be3e:	b088      	sub	sp, #32
 800be40:	af02      	add	r7, sp, #8
 800be42:	607b      	str	r3, [r7, #4]
 800be44:	4603      	mov	r3, r0
 800be46:	73fb      	strb	r3, [r7, #15]
 800be48:	460b      	mov	r3, r1
 800be4a:	81bb      	strh	r3, [r7, #12]
 800be4c:	4613      	mov	r3, r2
 800be4e:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800be50:	7bfb      	ldrb	r3, [r7, #15]
 800be52:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800be54:	8a7b      	ldrh	r3, [r7, #18]
 800be56:	3303      	adds	r3, #3
 800be58:	f023 0203 	bic.w	r2, r3, #3
 800be5c:	89bb      	ldrh	r3, [r7, #12]
 800be5e:	441a      	add	r2, r3
 800be60:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800be62:	429a      	cmp	r2, r3
 800be64:	d901      	bls.n	800be6a <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800be66:	2300      	movs	r3, #0
 800be68:	e018      	b.n	800be9c <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800be6a:	6a3b      	ldr	r3, [r7, #32]
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d007      	beq.n	800be80 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800be70:	8a7b      	ldrh	r3, [r7, #18]
 800be72:	3303      	adds	r3, #3
 800be74:	f023 0303 	bic.w	r3, r3, #3
 800be78:	6a3a      	ldr	r2, [r7, #32]
 800be7a:	4413      	add	r3, r2
 800be7c:	617b      	str	r3, [r7, #20]
 800be7e:	e001      	b.n	800be84 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800be80:	2300      	movs	r3, #0
 800be82:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800be84:	6878      	ldr	r0, [r7, #4]
 800be86:	89b9      	ldrh	r1, [r7, #12]
 800be88:	89ba      	ldrh	r2, [r7, #12]
 800be8a:	2302      	movs	r3, #2
 800be8c:	9301      	str	r3, [sp, #4]
 800be8e:	897b      	ldrh	r3, [r7, #10]
 800be90:	9300      	str	r3, [sp, #0]
 800be92:	460b      	mov	r3, r1
 800be94:	6979      	ldr	r1, [r7, #20]
 800be96:	f7ff fe7d 	bl	800bb94 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800be9a:	687b      	ldr	r3, [r7, #4]
}
 800be9c:	4618      	mov	r0, r3
 800be9e:	3718      	adds	r7, #24
 800bea0:	46bd      	mov	sp, r7
 800bea2:	bd80      	pop	{r7, pc}

0800bea4 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800bea4:	b580      	push	{r7, lr}
 800bea6:	b084      	sub	sp, #16
 800bea8:	af00      	add	r7, sp, #0
 800beaa:	6078      	str	r0, [r7, #4]
 800beac:	460b      	mov	r3, r1
 800beae:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d106      	bne.n	800bec4 <pbuf_realloc+0x20>
 800beb6:	4b3a      	ldr	r3, [pc, #232]	; (800bfa0 <pbuf_realloc+0xfc>)
 800beb8:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800bebc:	4939      	ldr	r1, [pc, #228]	; (800bfa4 <pbuf_realloc+0x100>)
 800bebe:	483a      	ldr	r0, [pc, #232]	; (800bfa8 <pbuf_realloc+0x104>)
 800bec0:	f008 fb40 	bl	8014544 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	891b      	ldrh	r3, [r3, #8]
 800bec8:	887a      	ldrh	r2, [r7, #2]
 800beca:	429a      	cmp	r2, r3
 800becc:	d263      	bcs.n	800bf96 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	891a      	ldrh	r2, [r3, #8]
 800bed2:	887b      	ldrh	r3, [r7, #2]
 800bed4:	1ad3      	subs	r3, r2, r3
 800bed6:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800bed8:	887b      	ldrh	r3, [r7, #2]
 800beda:	817b      	strh	r3, [r7, #10]
  q = p;
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800bee0:	e018      	b.n	800bf14 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	895b      	ldrh	r3, [r3, #10]
 800bee6:	897a      	ldrh	r2, [r7, #10]
 800bee8:	1ad3      	subs	r3, r2, r3
 800beea:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	891a      	ldrh	r2, [r3, #8]
 800bef0:	893b      	ldrh	r3, [r7, #8]
 800bef2:	1ad3      	subs	r3, r2, r3
 800bef4:	b29a      	uxth	r2, r3
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d106      	bne.n	800bf14 <pbuf_realloc+0x70>
 800bf06:	4b26      	ldr	r3, [pc, #152]	; (800bfa0 <pbuf_realloc+0xfc>)
 800bf08:	f240 12af 	movw	r2, #431	; 0x1af
 800bf0c:	4927      	ldr	r1, [pc, #156]	; (800bfac <pbuf_realloc+0x108>)
 800bf0e:	4826      	ldr	r0, [pc, #152]	; (800bfa8 <pbuf_realloc+0x104>)
 800bf10:	f008 fb18 	bl	8014544 <iprintf>
  while (rem_len > q->len) {
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	895b      	ldrh	r3, [r3, #10]
 800bf18:	897a      	ldrh	r2, [r7, #10]
 800bf1a:	429a      	cmp	r2, r3
 800bf1c:	d8e1      	bhi.n	800bee2 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	7b1b      	ldrb	r3, [r3, #12]
 800bf22:	f003 030f 	and.w	r3, r3, #15
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d121      	bne.n	800bf6e <pbuf_realloc+0xca>
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	895b      	ldrh	r3, [r3, #10]
 800bf2e:	897a      	ldrh	r2, [r7, #10]
 800bf30:	429a      	cmp	r2, r3
 800bf32:	d01c      	beq.n	800bf6e <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	7b5b      	ldrb	r3, [r3, #13]
 800bf38:	f003 0302 	and.w	r3, r3, #2
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d116      	bne.n	800bf6e <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	685a      	ldr	r2, [r3, #4]
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	1ad3      	subs	r3, r2, r3
 800bf48:	b29a      	uxth	r2, r3
 800bf4a:	897b      	ldrh	r3, [r7, #10]
 800bf4c:	4413      	add	r3, r2
 800bf4e:	b29b      	uxth	r3, r3
 800bf50:	4619      	mov	r1, r3
 800bf52:	68f8      	ldr	r0, [r7, #12]
 800bf54:	f7ff f884 	bl	800b060 <mem_trim>
 800bf58:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d106      	bne.n	800bf6e <pbuf_realloc+0xca>
 800bf60:	4b0f      	ldr	r3, [pc, #60]	; (800bfa0 <pbuf_realloc+0xfc>)
 800bf62:	f240 12bd 	movw	r2, #445	; 0x1bd
 800bf66:	4912      	ldr	r1, [pc, #72]	; (800bfb0 <pbuf_realloc+0x10c>)
 800bf68:	480f      	ldr	r0, [pc, #60]	; (800bfa8 <pbuf_realloc+0x104>)
 800bf6a:	f008 faeb 	bl	8014544 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	897a      	ldrh	r2, [r7, #10]
 800bf72:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	895a      	ldrh	r2, [r3, #10]
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d004      	beq.n	800bf8e <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	4618      	mov	r0, r3
 800bf8a:	f000 f911 	bl	800c1b0 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	2200      	movs	r2, #0
 800bf92:	601a      	str	r2, [r3, #0]
 800bf94:	e000      	b.n	800bf98 <pbuf_realloc+0xf4>
    return;
 800bf96:	bf00      	nop

}
 800bf98:	3710      	adds	r7, #16
 800bf9a:	46bd      	mov	sp, r7
 800bf9c:	bd80      	pop	{r7, pc}
 800bf9e:	bf00      	nop
 800bfa0:	08015ee8 	.word	0x08015ee8
 800bfa4:	08016000 	.word	0x08016000
 800bfa8:	08015f48 	.word	0x08015f48
 800bfac:	08016018 	.word	0x08016018
 800bfb0:	08016030 	.word	0x08016030

0800bfb4 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800bfb4:	b580      	push	{r7, lr}
 800bfb6:	b086      	sub	sp, #24
 800bfb8:	af00      	add	r7, sp, #0
 800bfba:	60f8      	str	r0, [r7, #12]
 800bfbc:	60b9      	str	r1, [r7, #8]
 800bfbe:	4613      	mov	r3, r2
 800bfc0:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d106      	bne.n	800bfd6 <pbuf_add_header_impl+0x22>
 800bfc8:	4b2b      	ldr	r3, [pc, #172]	; (800c078 <pbuf_add_header_impl+0xc4>)
 800bfca:	f240 12df 	movw	r2, #479	; 0x1df
 800bfce:	492b      	ldr	r1, [pc, #172]	; (800c07c <pbuf_add_header_impl+0xc8>)
 800bfd0:	482b      	ldr	r0, [pc, #172]	; (800c080 <pbuf_add_header_impl+0xcc>)
 800bfd2:	f008 fab7 	bl	8014544 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d003      	beq.n	800bfe4 <pbuf_add_header_impl+0x30>
 800bfdc:	68bb      	ldr	r3, [r7, #8]
 800bfde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bfe2:	d301      	bcc.n	800bfe8 <pbuf_add_header_impl+0x34>
    return 1;
 800bfe4:	2301      	movs	r3, #1
 800bfe6:	e043      	b.n	800c070 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800bfe8:	68bb      	ldr	r3, [r7, #8]
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d101      	bne.n	800bff2 <pbuf_add_header_impl+0x3e>
    return 0;
 800bfee:	2300      	movs	r3, #0
 800bff0:	e03e      	b.n	800c070 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800bff2:	68bb      	ldr	r3, [r7, #8]
 800bff4:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	891a      	ldrh	r2, [r3, #8]
 800bffa:	8a7b      	ldrh	r3, [r7, #18]
 800bffc:	4413      	add	r3, r2
 800bffe:	b29b      	uxth	r3, r3
 800c000:	8a7a      	ldrh	r2, [r7, #18]
 800c002:	429a      	cmp	r2, r3
 800c004:	d901      	bls.n	800c00a <pbuf_add_header_impl+0x56>
    return 1;
 800c006:	2301      	movs	r3, #1
 800c008:	e032      	b.n	800c070 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	7b1b      	ldrb	r3, [r3, #12]
 800c00e:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800c010:	8a3b      	ldrh	r3, [r7, #16]
 800c012:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c016:	2b00      	cmp	r3, #0
 800c018:	d00c      	beq.n	800c034 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	685a      	ldr	r2, [r3, #4]
 800c01e:	68bb      	ldr	r3, [r7, #8]
 800c020:	425b      	negs	r3, r3
 800c022:	4413      	add	r3, r2
 800c024:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	3310      	adds	r3, #16
 800c02a:	697a      	ldr	r2, [r7, #20]
 800c02c:	429a      	cmp	r2, r3
 800c02e:	d20d      	bcs.n	800c04c <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800c030:	2301      	movs	r3, #1
 800c032:	e01d      	b.n	800c070 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800c034:	79fb      	ldrb	r3, [r7, #7]
 800c036:	2b00      	cmp	r3, #0
 800c038:	d006      	beq.n	800c048 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800c03a:	68fb      	ldr	r3, [r7, #12]
 800c03c:	685a      	ldr	r2, [r3, #4]
 800c03e:	68bb      	ldr	r3, [r7, #8]
 800c040:	425b      	negs	r3, r3
 800c042:	4413      	add	r3, r2
 800c044:	617b      	str	r3, [r7, #20]
 800c046:	e001      	b.n	800c04c <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800c048:	2301      	movs	r3, #1
 800c04a:	e011      	b.n	800c070 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	697a      	ldr	r2, [r7, #20]
 800c050:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800c052:	68fb      	ldr	r3, [r7, #12]
 800c054:	895a      	ldrh	r2, [r3, #10]
 800c056:	8a7b      	ldrh	r3, [r7, #18]
 800c058:	4413      	add	r3, r2
 800c05a:	b29a      	uxth	r2, r3
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	891a      	ldrh	r2, [r3, #8]
 800c064:	8a7b      	ldrh	r3, [r7, #18]
 800c066:	4413      	add	r3, r2
 800c068:	b29a      	uxth	r2, r3
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	811a      	strh	r2, [r3, #8]


  return 0;
 800c06e:	2300      	movs	r3, #0
}
 800c070:	4618      	mov	r0, r3
 800c072:	3718      	adds	r7, #24
 800c074:	46bd      	mov	sp, r7
 800c076:	bd80      	pop	{r7, pc}
 800c078:	08015ee8 	.word	0x08015ee8
 800c07c:	0801604c 	.word	0x0801604c
 800c080:	08015f48 	.word	0x08015f48

0800c084 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800c084:	b580      	push	{r7, lr}
 800c086:	b082      	sub	sp, #8
 800c088:	af00      	add	r7, sp, #0
 800c08a:	6078      	str	r0, [r7, #4]
 800c08c:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800c08e:	2200      	movs	r2, #0
 800c090:	6839      	ldr	r1, [r7, #0]
 800c092:	6878      	ldr	r0, [r7, #4]
 800c094:	f7ff ff8e 	bl	800bfb4 <pbuf_add_header_impl>
 800c098:	4603      	mov	r3, r0
}
 800c09a:	4618      	mov	r0, r3
 800c09c:	3708      	adds	r7, #8
 800c09e:	46bd      	mov	sp, r7
 800c0a0:	bd80      	pop	{r7, pc}
	...

0800c0a4 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800c0a4:	b580      	push	{r7, lr}
 800c0a6:	b084      	sub	sp, #16
 800c0a8:	af00      	add	r7, sp, #0
 800c0aa:	6078      	str	r0, [r7, #4]
 800c0ac:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d106      	bne.n	800c0c2 <pbuf_remove_header+0x1e>
 800c0b4:	4b20      	ldr	r3, [pc, #128]	; (800c138 <pbuf_remove_header+0x94>)
 800c0b6:	f240 224b 	movw	r2, #587	; 0x24b
 800c0ba:	4920      	ldr	r1, [pc, #128]	; (800c13c <pbuf_remove_header+0x98>)
 800c0bc:	4820      	ldr	r0, [pc, #128]	; (800c140 <pbuf_remove_header+0x9c>)
 800c0be:	f008 fa41 	bl	8014544 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d003      	beq.n	800c0d0 <pbuf_remove_header+0x2c>
 800c0c8:	683b      	ldr	r3, [r7, #0]
 800c0ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c0ce:	d301      	bcc.n	800c0d4 <pbuf_remove_header+0x30>
    return 1;
 800c0d0:	2301      	movs	r3, #1
 800c0d2:	e02c      	b.n	800c12e <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800c0d4:	683b      	ldr	r3, [r7, #0]
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d101      	bne.n	800c0de <pbuf_remove_header+0x3a>
    return 0;
 800c0da:	2300      	movs	r3, #0
 800c0dc:	e027      	b.n	800c12e <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800c0de:	683b      	ldr	r3, [r7, #0]
 800c0e0:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	895b      	ldrh	r3, [r3, #10]
 800c0e6:	89fa      	ldrh	r2, [r7, #14]
 800c0e8:	429a      	cmp	r2, r3
 800c0ea:	d908      	bls.n	800c0fe <pbuf_remove_header+0x5a>
 800c0ec:	4b12      	ldr	r3, [pc, #72]	; (800c138 <pbuf_remove_header+0x94>)
 800c0ee:	f240 2255 	movw	r2, #597	; 0x255
 800c0f2:	4914      	ldr	r1, [pc, #80]	; (800c144 <pbuf_remove_header+0xa0>)
 800c0f4:	4812      	ldr	r0, [pc, #72]	; (800c140 <pbuf_remove_header+0x9c>)
 800c0f6:	f008 fa25 	bl	8014544 <iprintf>
 800c0fa:	2301      	movs	r3, #1
 800c0fc:	e017      	b.n	800c12e <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	685b      	ldr	r3, [r3, #4]
 800c102:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	685a      	ldr	r2, [r3, #4]
 800c108:	683b      	ldr	r3, [r7, #0]
 800c10a:	441a      	add	r2, r3
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	895a      	ldrh	r2, [r3, #10]
 800c114:	89fb      	ldrh	r3, [r7, #14]
 800c116:	1ad3      	subs	r3, r2, r3
 800c118:	b29a      	uxth	r2, r3
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	891a      	ldrh	r2, [r3, #8]
 800c122:	89fb      	ldrh	r3, [r7, #14]
 800c124:	1ad3      	subs	r3, r2, r3
 800c126:	b29a      	uxth	r2, r3
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800c12c:	2300      	movs	r3, #0
}
 800c12e:	4618      	mov	r0, r3
 800c130:	3710      	adds	r7, #16
 800c132:	46bd      	mov	sp, r7
 800c134:	bd80      	pop	{r7, pc}
 800c136:	bf00      	nop
 800c138:	08015ee8 	.word	0x08015ee8
 800c13c:	0801604c 	.word	0x0801604c
 800c140:	08015f48 	.word	0x08015f48
 800c144:	08016058 	.word	0x08016058

0800c148 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800c148:	b580      	push	{r7, lr}
 800c14a:	b082      	sub	sp, #8
 800c14c:	af00      	add	r7, sp, #0
 800c14e:	6078      	str	r0, [r7, #4]
 800c150:	460b      	mov	r3, r1
 800c152:	807b      	strh	r3, [r7, #2]
 800c154:	4613      	mov	r3, r2
 800c156:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800c158:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	da08      	bge.n	800c172 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800c160:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c164:	425b      	negs	r3, r3
 800c166:	4619      	mov	r1, r3
 800c168:	6878      	ldr	r0, [r7, #4]
 800c16a:	f7ff ff9b 	bl	800c0a4 <pbuf_remove_header>
 800c16e:	4603      	mov	r3, r0
 800c170:	e007      	b.n	800c182 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800c172:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c176:	787a      	ldrb	r2, [r7, #1]
 800c178:	4619      	mov	r1, r3
 800c17a:	6878      	ldr	r0, [r7, #4]
 800c17c:	f7ff ff1a 	bl	800bfb4 <pbuf_add_header_impl>
 800c180:	4603      	mov	r3, r0
  }
}
 800c182:	4618      	mov	r0, r3
 800c184:	3708      	adds	r7, #8
 800c186:	46bd      	mov	sp, r7
 800c188:	bd80      	pop	{r7, pc}

0800c18a <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800c18a:	b580      	push	{r7, lr}
 800c18c:	b082      	sub	sp, #8
 800c18e:	af00      	add	r7, sp, #0
 800c190:	6078      	str	r0, [r7, #4]
 800c192:	460b      	mov	r3, r1
 800c194:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800c196:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c19a:	2201      	movs	r2, #1
 800c19c:	4619      	mov	r1, r3
 800c19e:	6878      	ldr	r0, [r7, #4]
 800c1a0:	f7ff ffd2 	bl	800c148 <pbuf_header_impl>
 800c1a4:	4603      	mov	r3, r0
}
 800c1a6:	4618      	mov	r0, r3
 800c1a8:	3708      	adds	r7, #8
 800c1aa:	46bd      	mov	sp, r7
 800c1ac:	bd80      	pop	{r7, pc}
	...

0800c1b0 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800c1b0:	b580      	push	{r7, lr}
 800c1b2:	b086      	sub	sp, #24
 800c1b4:	af00      	add	r7, sp, #0
 800c1b6:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d10b      	bne.n	800c1d6 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d106      	bne.n	800c1d2 <pbuf_free+0x22>
 800c1c4:	4b38      	ldr	r3, [pc, #224]	; (800c2a8 <pbuf_free+0xf8>)
 800c1c6:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800c1ca:	4938      	ldr	r1, [pc, #224]	; (800c2ac <pbuf_free+0xfc>)
 800c1cc:	4838      	ldr	r0, [pc, #224]	; (800c2b0 <pbuf_free+0x100>)
 800c1ce:	f008 f9b9 	bl	8014544 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800c1d2:	2300      	movs	r3, #0
 800c1d4:	e063      	b.n	800c29e <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800c1d6:	2300      	movs	r3, #0
 800c1d8:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800c1da:	e05c      	b.n	800c296 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	7b9b      	ldrb	r3, [r3, #14]
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d106      	bne.n	800c1f2 <pbuf_free+0x42>
 800c1e4:	4b30      	ldr	r3, [pc, #192]	; (800c2a8 <pbuf_free+0xf8>)
 800c1e6:	f240 22f1 	movw	r2, #753	; 0x2f1
 800c1ea:	4932      	ldr	r1, [pc, #200]	; (800c2b4 <pbuf_free+0x104>)
 800c1ec:	4830      	ldr	r0, [pc, #192]	; (800c2b0 <pbuf_free+0x100>)
 800c1ee:	f008 f9a9 	bl	8014544 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	7b9b      	ldrb	r3, [r3, #14]
 800c1f6:	3b01      	subs	r3, #1
 800c1f8:	b2da      	uxtb	r2, r3
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	739a      	strb	r2, [r3, #14]
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	7b9b      	ldrb	r3, [r3, #14]
 800c202:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800c204:	7dbb      	ldrb	r3, [r7, #22]
 800c206:	2b00      	cmp	r3, #0
 800c208:	d143      	bne.n	800c292 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	7b1b      	ldrb	r3, [r3, #12]
 800c214:	f003 030f 	and.w	r3, r3, #15
 800c218:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	7b5b      	ldrb	r3, [r3, #13]
 800c21e:	f003 0302 	and.w	r3, r3, #2
 800c222:	2b00      	cmp	r3, #0
 800c224:	d011      	beq.n	800c24a <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800c22a:	68bb      	ldr	r3, [r7, #8]
 800c22c:	691b      	ldr	r3, [r3, #16]
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d106      	bne.n	800c240 <pbuf_free+0x90>
 800c232:	4b1d      	ldr	r3, [pc, #116]	; (800c2a8 <pbuf_free+0xf8>)
 800c234:	f240 22ff 	movw	r2, #767	; 0x2ff
 800c238:	491f      	ldr	r1, [pc, #124]	; (800c2b8 <pbuf_free+0x108>)
 800c23a:	481d      	ldr	r0, [pc, #116]	; (800c2b0 <pbuf_free+0x100>)
 800c23c:	f008 f982 	bl	8014544 <iprintf>
        pc->custom_free_function(p);
 800c240:	68bb      	ldr	r3, [r7, #8]
 800c242:	691b      	ldr	r3, [r3, #16]
 800c244:	6878      	ldr	r0, [r7, #4]
 800c246:	4798      	blx	r3
 800c248:	e01d      	b.n	800c286 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800c24a:	7bfb      	ldrb	r3, [r7, #15]
 800c24c:	2b02      	cmp	r3, #2
 800c24e:	d104      	bne.n	800c25a <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 800c250:	6879      	ldr	r1, [r7, #4]
 800c252:	2008      	movs	r0, #8
 800c254:	f7ff f9ba 	bl	800b5cc <memp_free>
 800c258:	e015      	b.n	800c286 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800c25a:	7bfb      	ldrb	r3, [r7, #15]
 800c25c:	2b01      	cmp	r3, #1
 800c25e:	d104      	bne.n	800c26a <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 800c260:	6879      	ldr	r1, [r7, #4]
 800c262:	2007      	movs	r0, #7
 800c264:	f7ff f9b2 	bl	800b5cc <memp_free>
 800c268:	e00d      	b.n	800c286 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800c26a:	7bfb      	ldrb	r3, [r7, #15]
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d103      	bne.n	800c278 <pbuf_free+0xc8>
          mem_free(p);
 800c270:	6878      	ldr	r0, [r7, #4]
 800c272:	f7fe fe8b 	bl	800af8c <mem_free>
 800c276:	e006      	b.n	800c286 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800c278:	4b0b      	ldr	r3, [pc, #44]	; (800c2a8 <pbuf_free+0xf8>)
 800c27a:	f240 320f 	movw	r2, #783	; 0x30f
 800c27e:	490f      	ldr	r1, [pc, #60]	; (800c2bc <pbuf_free+0x10c>)
 800c280:	480b      	ldr	r0, [pc, #44]	; (800c2b0 <pbuf_free+0x100>)
 800c282:	f008 f95f 	bl	8014544 <iprintf>
        }
      }
      count++;
 800c286:	7dfb      	ldrb	r3, [r7, #23]
 800c288:	3301      	adds	r3, #1
 800c28a:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 800c28c:	693b      	ldr	r3, [r7, #16]
 800c28e:	607b      	str	r3, [r7, #4]
 800c290:	e001      	b.n	800c296 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800c292:	2300      	movs	r3, #0
 800c294:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d19f      	bne.n	800c1dc <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800c29c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c29e:	4618      	mov	r0, r3
 800c2a0:	3718      	adds	r7, #24
 800c2a2:	46bd      	mov	sp, r7
 800c2a4:	bd80      	pop	{r7, pc}
 800c2a6:	bf00      	nop
 800c2a8:	08015ee8 	.word	0x08015ee8
 800c2ac:	0801604c 	.word	0x0801604c
 800c2b0:	08015f48 	.word	0x08015f48
 800c2b4:	08016078 	.word	0x08016078
 800c2b8:	08016090 	.word	0x08016090
 800c2bc:	080160b4 	.word	0x080160b4

0800c2c0 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800c2c0:	b480      	push	{r7}
 800c2c2:	b085      	sub	sp, #20
 800c2c4:	af00      	add	r7, sp, #0
 800c2c6:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800c2c8:	2300      	movs	r3, #0
 800c2ca:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800c2cc:	e005      	b.n	800c2da <pbuf_clen+0x1a>
    ++len;
 800c2ce:	89fb      	ldrh	r3, [r7, #14]
 800c2d0:	3301      	adds	r3, #1
 800c2d2:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d1f6      	bne.n	800c2ce <pbuf_clen+0xe>
  }
  return len;
 800c2e0:	89fb      	ldrh	r3, [r7, #14]
}
 800c2e2:	4618      	mov	r0, r3
 800c2e4:	3714      	adds	r7, #20
 800c2e6:	46bd      	mov	sp, r7
 800c2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ec:	4770      	bx	lr
	...

0800c2f0 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800c2f0:	b580      	push	{r7, lr}
 800c2f2:	b082      	sub	sp, #8
 800c2f4:	af00      	add	r7, sp, #0
 800c2f6:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d010      	beq.n	800c320 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	7b9b      	ldrb	r3, [r3, #14]
 800c302:	3301      	adds	r3, #1
 800c304:	b2da      	uxtb	r2, r3
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	7b9b      	ldrb	r3, [r3, #14]
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d106      	bne.n	800c320 <pbuf_ref+0x30>
 800c312:	4b05      	ldr	r3, [pc, #20]	; (800c328 <pbuf_ref+0x38>)
 800c314:	f240 3242 	movw	r2, #834	; 0x342
 800c318:	4904      	ldr	r1, [pc, #16]	; (800c32c <pbuf_ref+0x3c>)
 800c31a:	4805      	ldr	r0, [pc, #20]	; (800c330 <pbuf_ref+0x40>)
 800c31c:	f008 f912 	bl	8014544 <iprintf>
  }
}
 800c320:	bf00      	nop
 800c322:	3708      	adds	r7, #8
 800c324:	46bd      	mov	sp, r7
 800c326:	bd80      	pop	{r7, pc}
 800c328:	08015ee8 	.word	0x08015ee8
 800c32c:	080160c8 	.word	0x080160c8
 800c330:	08015f48 	.word	0x08015f48

0800c334 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800c334:	b580      	push	{r7, lr}
 800c336:	b084      	sub	sp, #16
 800c338:	af00      	add	r7, sp, #0
 800c33a:	6078      	str	r0, [r7, #4]
 800c33c:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	2b00      	cmp	r3, #0
 800c342:	d002      	beq.n	800c34a <pbuf_cat+0x16>
 800c344:	683b      	ldr	r3, [r7, #0]
 800c346:	2b00      	cmp	r3, #0
 800c348:	d107      	bne.n	800c35a <pbuf_cat+0x26>
 800c34a:	4b20      	ldr	r3, [pc, #128]	; (800c3cc <pbuf_cat+0x98>)
 800c34c:	f240 3259 	movw	r2, #857	; 0x359
 800c350:	491f      	ldr	r1, [pc, #124]	; (800c3d0 <pbuf_cat+0x9c>)
 800c352:	4820      	ldr	r0, [pc, #128]	; (800c3d4 <pbuf_cat+0xa0>)
 800c354:	f008 f8f6 	bl	8014544 <iprintf>
 800c358:	e034      	b.n	800c3c4 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	60fb      	str	r3, [r7, #12]
 800c35e:	e00a      	b.n	800c376 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	891a      	ldrh	r2, [r3, #8]
 800c364:	683b      	ldr	r3, [r7, #0]
 800c366:	891b      	ldrh	r3, [r3, #8]
 800c368:	4413      	add	r3, r2
 800c36a:	b29a      	uxth	r2, r3
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	60fb      	str	r3, [r7, #12]
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d1f0      	bne.n	800c360 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	891a      	ldrh	r2, [r3, #8]
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	895b      	ldrh	r3, [r3, #10]
 800c386:	429a      	cmp	r2, r3
 800c388:	d006      	beq.n	800c398 <pbuf_cat+0x64>
 800c38a:	4b10      	ldr	r3, [pc, #64]	; (800c3cc <pbuf_cat+0x98>)
 800c38c:	f240 3262 	movw	r2, #866	; 0x362
 800c390:	4911      	ldr	r1, [pc, #68]	; (800c3d8 <pbuf_cat+0xa4>)
 800c392:	4810      	ldr	r0, [pc, #64]	; (800c3d4 <pbuf_cat+0xa0>)
 800c394:	f008 f8d6 	bl	8014544 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d006      	beq.n	800c3ae <pbuf_cat+0x7a>
 800c3a0:	4b0a      	ldr	r3, [pc, #40]	; (800c3cc <pbuf_cat+0x98>)
 800c3a2:	f240 3263 	movw	r2, #867	; 0x363
 800c3a6:	490d      	ldr	r1, [pc, #52]	; (800c3dc <pbuf_cat+0xa8>)
 800c3a8:	480a      	ldr	r0, [pc, #40]	; (800c3d4 <pbuf_cat+0xa0>)
 800c3aa:	f008 f8cb 	bl	8014544 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	891a      	ldrh	r2, [r3, #8]
 800c3b2:	683b      	ldr	r3, [r7, #0]
 800c3b4:	891b      	ldrh	r3, [r3, #8]
 800c3b6:	4413      	add	r3, r2
 800c3b8:	b29a      	uxth	r2, r3
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	683a      	ldr	r2, [r7, #0]
 800c3c2:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800c3c4:	3710      	adds	r7, #16
 800c3c6:	46bd      	mov	sp, r7
 800c3c8:	bd80      	pop	{r7, pc}
 800c3ca:	bf00      	nop
 800c3cc:	08015ee8 	.word	0x08015ee8
 800c3d0:	080160dc 	.word	0x080160dc
 800c3d4:	08015f48 	.word	0x08015f48
 800c3d8:	08016114 	.word	0x08016114
 800c3dc:	08016144 	.word	0x08016144

0800c3e0 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800c3e0:	b580      	push	{r7, lr}
 800c3e2:	b086      	sub	sp, #24
 800c3e4:	af00      	add	r7, sp, #0
 800c3e6:	6078      	str	r0, [r7, #4]
 800c3e8:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800c3ea:	2300      	movs	r3, #0
 800c3ec:	617b      	str	r3, [r7, #20]
 800c3ee:	2300      	movs	r3, #0
 800c3f0:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d008      	beq.n	800c40a <pbuf_copy+0x2a>
 800c3f8:	683b      	ldr	r3, [r7, #0]
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d005      	beq.n	800c40a <pbuf_copy+0x2a>
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	891a      	ldrh	r2, [r3, #8]
 800c402:	683b      	ldr	r3, [r7, #0]
 800c404:	891b      	ldrh	r3, [r3, #8]
 800c406:	429a      	cmp	r2, r3
 800c408:	d209      	bcs.n	800c41e <pbuf_copy+0x3e>
 800c40a:	4b57      	ldr	r3, [pc, #348]	; (800c568 <pbuf_copy+0x188>)
 800c40c:	f240 32c9 	movw	r2, #969	; 0x3c9
 800c410:	4956      	ldr	r1, [pc, #344]	; (800c56c <pbuf_copy+0x18c>)
 800c412:	4857      	ldr	r0, [pc, #348]	; (800c570 <pbuf_copy+0x190>)
 800c414:	f008 f896 	bl	8014544 <iprintf>
 800c418:	f06f 030f 	mvn.w	r3, #15
 800c41c:	e09f      	b.n	800c55e <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	895b      	ldrh	r3, [r3, #10]
 800c422:	461a      	mov	r2, r3
 800c424:	697b      	ldr	r3, [r7, #20]
 800c426:	1ad2      	subs	r2, r2, r3
 800c428:	683b      	ldr	r3, [r7, #0]
 800c42a:	895b      	ldrh	r3, [r3, #10]
 800c42c:	4619      	mov	r1, r3
 800c42e:	693b      	ldr	r3, [r7, #16]
 800c430:	1acb      	subs	r3, r1, r3
 800c432:	429a      	cmp	r2, r3
 800c434:	d306      	bcc.n	800c444 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800c436:	683b      	ldr	r3, [r7, #0]
 800c438:	895b      	ldrh	r3, [r3, #10]
 800c43a:	461a      	mov	r2, r3
 800c43c:	693b      	ldr	r3, [r7, #16]
 800c43e:	1ad3      	subs	r3, r2, r3
 800c440:	60fb      	str	r3, [r7, #12]
 800c442:	e005      	b.n	800c450 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	895b      	ldrh	r3, [r3, #10]
 800c448:	461a      	mov	r2, r3
 800c44a:	697b      	ldr	r3, [r7, #20]
 800c44c:	1ad3      	subs	r3, r2, r3
 800c44e:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	685a      	ldr	r2, [r3, #4]
 800c454:	697b      	ldr	r3, [r7, #20]
 800c456:	18d0      	adds	r0, r2, r3
 800c458:	683b      	ldr	r3, [r7, #0]
 800c45a:	685a      	ldr	r2, [r3, #4]
 800c45c:	693b      	ldr	r3, [r7, #16]
 800c45e:	4413      	add	r3, r2
 800c460:	68fa      	ldr	r2, [r7, #12]
 800c462:	4619      	mov	r1, r3
 800c464:	f008 f83e 	bl	80144e4 <memcpy>
    offset_to += len;
 800c468:	697a      	ldr	r2, [r7, #20]
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	4413      	add	r3, r2
 800c46e:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800c470:	693a      	ldr	r2, [r7, #16]
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	4413      	add	r3, r2
 800c476:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	895b      	ldrh	r3, [r3, #10]
 800c47c:	461a      	mov	r2, r3
 800c47e:	697b      	ldr	r3, [r7, #20]
 800c480:	4293      	cmp	r3, r2
 800c482:	d906      	bls.n	800c492 <pbuf_copy+0xb2>
 800c484:	4b38      	ldr	r3, [pc, #224]	; (800c568 <pbuf_copy+0x188>)
 800c486:	f240 32d9 	movw	r2, #985	; 0x3d9
 800c48a:	493a      	ldr	r1, [pc, #232]	; (800c574 <pbuf_copy+0x194>)
 800c48c:	4838      	ldr	r0, [pc, #224]	; (800c570 <pbuf_copy+0x190>)
 800c48e:	f008 f859 	bl	8014544 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800c492:	683b      	ldr	r3, [r7, #0]
 800c494:	895b      	ldrh	r3, [r3, #10]
 800c496:	461a      	mov	r2, r3
 800c498:	693b      	ldr	r3, [r7, #16]
 800c49a:	4293      	cmp	r3, r2
 800c49c:	d906      	bls.n	800c4ac <pbuf_copy+0xcc>
 800c49e:	4b32      	ldr	r3, [pc, #200]	; (800c568 <pbuf_copy+0x188>)
 800c4a0:	f240 32da 	movw	r2, #986	; 0x3da
 800c4a4:	4934      	ldr	r1, [pc, #208]	; (800c578 <pbuf_copy+0x198>)
 800c4a6:	4832      	ldr	r0, [pc, #200]	; (800c570 <pbuf_copy+0x190>)
 800c4a8:	f008 f84c 	bl	8014544 <iprintf>
    if (offset_from >= p_from->len) {
 800c4ac:	683b      	ldr	r3, [r7, #0]
 800c4ae:	895b      	ldrh	r3, [r3, #10]
 800c4b0:	461a      	mov	r2, r3
 800c4b2:	693b      	ldr	r3, [r7, #16]
 800c4b4:	4293      	cmp	r3, r2
 800c4b6:	d304      	bcc.n	800c4c2 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800c4b8:	2300      	movs	r3, #0
 800c4ba:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800c4bc:	683b      	ldr	r3, [r7, #0]
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	895b      	ldrh	r3, [r3, #10]
 800c4c6:	461a      	mov	r2, r3
 800c4c8:	697b      	ldr	r3, [r7, #20]
 800c4ca:	4293      	cmp	r3, r2
 800c4cc:	d114      	bne.n	800c4f8 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800c4ce:	2300      	movs	r3, #0
 800c4d0:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d10c      	bne.n	800c4f8 <pbuf_copy+0x118>
 800c4de:	683b      	ldr	r3, [r7, #0]
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d009      	beq.n	800c4f8 <pbuf_copy+0x118>
 800c4e4:	4b20      	ldr	r3, [pc, #128]	; (800c568 <pbuf_copy+0x188>)
 800c4e6:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800c4ea:	4924      	ldr	r1, [pc, #144]	; (800c57c <pbuf_copy+0x19c>)
 800c4ec:	4820      	ldr	r0, [pc, #128]	; (800c570 <pbuf_copy+0x190>)
 800c4ee:	f008 f829 	bl	8014544 <iprintf>
 800c4f2:	f06f 030f 	mvn.w	r3, #15
 800c4f6:	e032      	b.n	800c55e <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800c4f8:	683b      	ldr	r3, [r7, #0]
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d013      	beq.n	800c526 <pbuf_copy+0x146>
 800c4fe:	683b      	ldr	r3, [r7, #0]
 800c500:	895a      	ldrh	r2, [r3, #10]
 800c502:	683b      	ldr	r3, [r7, #0]
 800c504:	891b      	ldrh	r3, [r3, #8]
 800c506:	429a      	cmp	r2, r3
 800c508:	d10d      	bne.n	800c526 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800c50a:	683b      	ldr	r3, [r7, #0]
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d009      	beq.n	800c526 <pbuf_copy+0x146>
 800c512:	4b15      	ldr	r3, [pc, #84]	; (800c568 <pbuf_copy+0x188>)
 800c514:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800c518:	4919      	ldr	r1, [pc, #100]	; (800c580 <pbuf_copy+0x1a0>)
 800c51a:	4815      	ldr	r0, [pc, #84]	; (800c570 <pbuf_copy+0x190>)
 800c51c:	f008 f812 	bl	8014544 <iprintf>
 800c520:	f06f 0305 	mvn.w	r3, #5
 800c524:	e01b      	b.n	800c55e <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d013      	beq.n	800c554 <pbuf_copy+0x174>
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	895a      	ldrh	r2, [r3, #10]
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	891b      	ldrh	r3, [r3, #8]
 800c534:	429a      	cmp	r2, r3
 800c536:	d10d      	bne.n	800c554 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d009      	beq.n	800c554 <pbuf_copy+0x174>
 800c540:	4b09      	ldr	r3, [pc, #36]	; (800c568 <pbuf_copy+0x188>)
 800c542:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800c546:	490e      	ldr	r1, [pc, #56]	; (800c580 <pbuf_copy+0x1a0>)
 800c548:	4809      	ldr	r0, [pc, #36]	; (800c570 <pbuf_copy+0x190>)
 800c54a:	f007 fffb 	bl	8014544 <iprintf>
 800c54e:	f06f 0305 	mvn.w	r3, #5
 800c552:	e004      	b.n	800c55e <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800c554:	683b      	ldr	r3, [r7, #0]
 800c556:	2b00      	cmp	r3, #0
 800c558:	f47f af61 	bne.w	800c41e <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800c55c:	2300      	movs	r3, #0
}
 800c55e:	4618      	mov	r0, r3
 800c560:	3718      	adds	r7, #24
 800c562:	46bd      	mov	sp, r7
 800c564:	bd80      	pop	{r7, pc}
 800c566:	bf00      	nop
 800c568:	08015ee8 	.word	0x08015ee8
 800c56c:	08016190 	.word	0x08016190
 800c570:	08015f48 	.word	0x08015f48
 800c574:	080161c0 	.word	0x080161c0
 800c578:	080161d8 	.word	0x080161d8
 800c57c:	080161f4 	.word	0x080161f4
 800c580:	08016204 	.word	0x08016204

0800c584 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800c584:	b580      	push	{r7, lr}
 800c586:	b088      	sub	sp, #32
 800c588:	af00      	add	r7, sp, #0
 800c58a:	60f8      	str	r0, [r7, #12]
 800c58c:	60b9      	str	r1, [r7, #8]
 800c58e:	4611      	mov	r1, r2
 800c590:	461a      	mov	r2, r3
 800c592:	460b      	mov	r3, r1
 800c594:	80fb      	strh	r3, [r7, #6]
 800c596:	4613      	mov	r3, r2
 800c598:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800c59a:	2300      	movs	r3, #0
 800c59c:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800c59e:	2300      	movs	r3, #0
 800c5a0:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800c5a2:	68fb      	ldr	r3, [r7, #12]
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d108      	bne.n	800c5ba <pbuf_copy_partial+0x36>
 800c5a8:	4b2b      	ldr	r3, [pc, #172]	; (800c658 <pbuf_copy_partial+0xd4>)
 800c5aa:	f240 420a 	movw	r2, #1034	; 0x40a
 800c5ae:	492b      	ldr	r1, [pc, #172]	; (800c65c <pbuf_copy_partial+0xd8>)
 800c5b0:	482b      	ldr	r0, [pc, #172]	; (800c660 <pbuf_copy_partial+0xdc>)
 800c5b2:	f007 ffc7 	bl	8014544 <iprintf>
 800c5b6:	2300      	movs	r3, #0
 800c5b8:	e04a      	b.n	800c650 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800c5ba:	68bb      	ldr	r3, [r7, #8]
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d108      	bne.n	800c5d2 <pbuf_copy_partial+0x4e>
 800c5c0:	4b25      	ldr	r3, [pc, #148]	; (800c658 <pbuf_copy_partial+0xd4>)
 800c5c2:	f240 420b 	movw	r2, #1035	; 0x40b
 800c5c6:	4927      	ldr	r1, [pc, #156]	; (800c664 <pbuf_copy_partial+0xe0>)
 800c5c8:	4825      	ldr	r0, [pc, #148]	; (800c660 <pbuf_copy_partial+0xdc>)
 800c5ca:	f007 ffbb 	bl	8014544 <iprintf>
 800c5ce:	2300      	movs	r3, #0
 800c5d0:	e03e      	b.n	800c650 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	61fb      	str	r3, [r7, #28]
 800c5d6:	e034      	b.n	800c642 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800c5d8:	88bb      	ldrh	r3, [r7, #4]
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d00a      	beq.n	800c5f4 <pbuf_copy_partial+0x70>
 800c5de:	69fb      	ldr	r3, [r7, #28]
 800c5e0:	895b      	ldrh	r3, [r3, #10]
 800c5e2:	88ba      	ldrh	r2, [r7, #4]
 800c5e4:	429a      	cmp	r2, r3
 800c5e6:	d305      	bcc.n	800c5f4 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800c5e8:	69fb      	ldr	r3, [r7, #28]
 800c5ea:	895b      	ldrh	r3, [r3, #10]
 800c5ec:	88ba      	ldrh	r2, [r7, #4]
 800c5ee:	1ad3      	subs	r3, r2, r3
 800c5f0:	80bb      	strh	r3, [r7, #4]
 800c5f2:	e023      	b.n	800c63c <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800c5f4:	69fb      	ldr	r3, [r7, #28]
 800c5f6:	895a      	ldrh	r2, [r3, #10]
 800c5f8:	88bb      	ldrh	r3, [r7, #4]
 800c5fa:	1ad3      	subs	r3, r2, r3
 800c5fc:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800c5fe:	8b3a      	ldrh	r2, [r7, #24]
 800c600:	88fb      	ldrh	r3, [r7, #6]
 800c602:	429a      	cmp	r2, r3
 800c604:	d901      	bls.n	800c60a <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800c606:	88fb      	ldrh	r3, [r7, #6]
 800c608:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800c60a:	8b7b      	ldrh	r3, [r7, #26]
 800c60c:	68ba      	ldr	r2, [r7, #8]
 800c60e:	18d0      	adds	r0, r2, r3
 800c610:	69fb      	ldr	r3, [r7, #28]
 800c612:	685a      	ldr	r2, [r3, #4]
 800c614:	88bb      	ldrh	r3, [r7, #4]
 800c616:	4413      	add	r3, r2
 800c618:	8b3a      	ldrh	r2, [r7, #24]
 800c61a:	4619      	mov	r1, r3
 800c61c:	f007 ff62 	bl	80144e4 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800c620:	8afa      	ldrh	r2, [r7, #22]
 800c622:	8b3b      	ldrh	r3, [r7, #24]
 800c624:	4413      	add	r3, r2
 800c626:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800c628:	8b7a      	ldrh	r2, [r7, #26]
 800c62a:	8b3b      	ldrh	r3, [r7, #24]
 800c62c:	4413      	add	r3, r2
 800c62e:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800c630:	88fa      	ldrh	r2, [r7, #6]
 800c632:	8b3b      	ldrh	r3, [r7, #24]
 800c634:	1ad3      	subs	r3, r2, r3
 800c636:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800c638:	2300      	movs	r3, #0
 800c63a:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800c63c:	69fb      	ldr	r3, [r7, #28]
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	61fb      	str	r3, [r7, #28]
 800c642:	88fb      	ldrh	r3, [r7, #6]
 800c644:	2b00      	cmp	r3, #0
 800c646:	d002      	beq.n	800c64e <pbuf_copy_partial+0xca>
 800c648:	69fb      	ldr	r3, [r7, #28]
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d1c4      	bne.n	800c5d8 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800c64e:	8afb      	ldrh	r3, [r7, #22]
}
 800c650:	4618      	mov	r0, r3
 800c652:	3720      	adds	r7, #32
 800c654:	46bd      	mov	sp, r7
 800c656:	bd80      	pop	{r7, pc}
 800c658:	08015ee8 	.word	0x08015ee8
 800c65c:	08016230 	.word	0x08016230
 800c660:	08015f48 	.word	0x08015f48
 800c664:	08016250 	.word	0x08016250

0800c668 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800c668:	b580      	push	{r7, lr}
 800c66a:	b084      	sub	sp, #16
 800c66c:	af00      	add	r7, sp, #0
 800c66e:	4603      	mov	r3, r0
 800c670:	603a      	str	r2, [r7, #0]
 800c672:	71fb      	strb	r3, [r7, #7]
 800c674:	460b      	mov	r3, r1
 800c676:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800c678:	683b      	ldr	r3, [r7, #0]
 800c67a:	8919      	ldrh	r1, [r3, #8]
 800c67c:	88ba      	ldrh	r2, [r7, #4]
 800c67e:	79fb      	ldrb	r3, [r7, #7]
 800c680:	4618      	mov	r0, r3
 800c682:	f7ff fab1 	bl	800bbe8 <pbuf_alloc>
 800c686:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800c688:	68fb      	ldr	r3, [r7, #12]
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d101      	bne.n	800c692 <pbuf_clone+0x2a>
    return NULL;
 800c68e:	2300      	movs	r3, #0
 800c690:	e011      	b.n	800c6b6 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800c692:	6839      	ldr	r1, [r7, #0]
 800c694:	68f8      	ldr	r0, [r7, #12]
 800c696:	f7ff fea3 	bl	800c3e0 <pbuf_copy>
 800c69a:	4603      	mov	r3, r0
 800c69c:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800c69e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d006      	beq.n	800c6b4 <pbuf_clone+0x4c>
 800c6a6:	4b06      	ldr	r3, [pc, #24]	; (800c6c0 <pbuf_clone+0x58>)
 800c6a8:	f240 5224 	movw	r2, #1316	; 0x524
 800c6ac:	4905      	ldr	r1, [pc, #20]	; (800c6c4 <pbuf_clone+0x5c>)
 800c6ae:	4806      	ldr	r0, [pc, #24]	; (800c6c8 <pbuf_clone+0x60>)
 800c6b0:	f007 ff48 	bl	8014544 <iprintf>
  return q;
 800c6b4:	68fb      	ldr	r3, [r7, #12]
}
 800c6b6:	4618      	mov	r0, r3
 800c6b8:	3710      	adds	r7, #16
 800c6ba:	46bd      	mov	sp, r7
 800c6bc:	bd80      	pop	{r7, pc}
 800c6be:	bf00      	nop
 800c6c0:	08015ee8 	.word	0x08015ee8
 800c6c4:	0801635c 	.word	0x0801635c
 800c6c8:	08015f48 	.word	0x08015f48

0800c6cc <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800c6cc:	b580      	push	{r7, lr}
 800c6ce:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800c6d0:	f007 ff50 	bl	8014574 <rand>
 800c6d4:	4603      	mov	r3, r0
 800c6d6:	b29b      	uxth	r3, r3
 800c6d8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800c6dc:	b29b      	uxth	r3, r3
 800c6de:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800c6e2:	b29a      	uxth	r2, r3
 800c6e4:	4b01      	ldr	r3, [pc, #4]	; (800c6ec <tcp_init+0x20>)
 800c6e6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800c6e8:	bf00      	nop
 800c6ea:	bd80      	pop	{r7, pc}
 800c6ec:	2000000a 	.word	0x2000000a

0800c6f0 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800c6f0:	b580      	push	{r7, lr}
 800c6f2:	b082      	sub	sp, #8
 800c6f4:	af00      	add	r7, sp, #0
 800c6f6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	7d1b      	ldrb	r3, [r3, #20]
 800c6fc:	2b01      	cmp	r3, #1
 800c6fe:	d105      	bne.n	800c70c <tcp_free+0x1c>
 800c700:	4b06      	ldr	r3, [pc, #24]	; (800c71c <tcp_free+0x2c>)
 800c702:	22d4      	movs	r2, #212	; 0xd4
 800c704:	4906      	ldr	r1, [pc, #24]	; (800c720 <tcp_free+0x30>)
 800c706:	4807      	ldr	r0, [pc, #28]	; (800c724 <tcp_free+0x34>)
 800c708:	f007 ff1c 	bl	8014544 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800c70c:	6879      	ldr	r1, [r7, #4]
 800c70e:	2001      	movs	r0, #1
 800c710:	f7fe ff5c 	bl	800b5cc <memp_free>
}
 800c714:	bf00      	nop
 800c716:	3708      	adds	r7, #8
 800c718:	46bd      	mov	sp, r7
 800c71a:	bd80      	pop	{r7, pc}
 800c71c:	080163e8 	.word	0x080163e8
 800c720:	08016418 	.word	0x08016418
 800c724:	0801642c 	.word	0x0801642c

0800c728 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800c728:	b580      	push	{r7, lr}
 800c72a:	b082      	sub	sp, #8
 800c72c:	af00      	add	r7, sp, #0
 800c72e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	7d1b      	ldrb	r3, [r3, #20]
 800c734:	2b01      	cmp	r3, #1
 800c736:	d105      	bne.n	800c744 <tcp_free_listen+0x1c>
 800c738:	4b06      	ldr	r3, [pc, #24]	; (800c754 <tcp_free_listen+0x2c>)
 800c73a:	22df      	movs	r2, #223	; 0xdf
 800c73c:	4906      	ldr	r1, [pc, #24]	; (800c758 <tcp_free_listen+0x30>)
 800c73e:	4807      	ldr	r0, [pc, #28]	; (800c75c <tcp_free_listen+0x34>)
 800c740:	f007 ff00 	bl	8014544 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800c744:	6879      	ldr	r1, [r7, #4]
 800c746:	2002      	movs	r0, #2
 800c748:	f7fe ff40 	bl	800b5cc <memp_free>
}
 800c74c:	bf00      	nop
 800c74e:	3708      	adds	r7, #8
 800c750:	46bd      	mov	sp, r7
 800c752:	bd80      	pop	{r7, pc}
 800c754:	080163e8 	.word	0x080163e8
 800c758:	08016454 	.word	0x08016454
 800c75c:	0801642c 	.word	0x0801642c

0800c760 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800c760:	b580      	push	{r7, lr}
 800c762:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800c764:	f000 fea2 	bl	800d4ac <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800c768:	4b07      	ldr	r3, [pc, #28]	; (800c788 <tcp_tmr+0x28>)
 800c76a:	781b      	ldrb	r3, [r3, #0]
 800c76c:	3301      	adds	r3, #1
 800c76e:	b2da      	uxtb	r2, r3
 800c770:	4b05      	ldr	r3, [pc, #20]	; (800c788 <tcp_tmr+0x28>)
 800c772:	701a      	strb	r2, [r3, #0]
 800c774:	4b04      	ldr	r3, [pc, #16]	; (800c788 <tcp_tmr+0x28>)
 800c776:	781b      	ldrb	r3, [r3, #0]
 800c778:	f003 0301 	and.w	r3, r3, #1
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d001      	beq.n	800c784 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800c780:	f000 fb54 	bl	800ce2c <tcp_slowtmr>
  }
}
 800c784:	bf00      	nop
 800c786:	bd80      	pop	{r7, pc}
 800c788:	200000e5 	.word	0x200000e5

0800c78c <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800c78c:	b580      	push	{r7, lr}
 800c78e:	b084      	sub	sp, #16
 800c790:	af00      	add	r7, sp, #0
 800c792:	6078      	str	r0, [r7, #4]
 800c794:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800c796:	683b      	ldr	r3, [r7, #0]
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d105      	bne.n	800c7a8 <tcp_remove_listener+0x1c>
 800c79c:	4b0d      	ldr	r3, [pc, #52]	; (800c7d4 <tcp_remove_listener+0x48>)
 800c79e:	22ff      	movs	r2, #255	; 0xff
 800c7a0:	490d      	ldr	r1, [pc, #52]	; (800c7d8 <tcp_remove_listener+0x4c>)
 800c7a2:	480e      	ldr	r0, [pc, #56]	; (800c7dc <tcp_remove_listener+0x50>)
 800c7a4:	f007 fece 	bl	8014544 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	60fb      	str	r3, [r7, #12]
 800c7ac:	e00a      	b.n	800c7c4 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c7b2:	683a      	ldr	r2, [r7, #0]
 800c7b4:	429a      	cmp	r2, r3
 800c7b6:	d102      	bne.n	800c7be <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800c7b8:	68fb      	ldr	r3, [r7, #12]
 800c7ba:	2200      	movs	r2, #0
 800c7bc:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800c7be:	68fb      	ldr	r3, [r7, #12]
 800c7c0:	68db      	ldr	r3, [r3, #12]
 800c7c2:	60fb      	str	r3, [r7, #12]
 800c7c4:	68fb      	ldr	r3, [r7, #12]
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d1f1      	bne.n	800c7ae <tcp_remove_listener+0x22>
    }
  }
}
 800c7ca:	bf00      	nop
 800c7cc:	bf00      	nop
 800c7ce:	3710      	adds	r7, #16
 800c7d0:	46bd      	mov	sp, r7
 800c7d2:	bd80      	pop	{r7, pc}
 800c7d4:	080163e8 	.word	0x080163e8
 800c7d8:	08016470 	.word	0x08016470
 800c7dc:	0801642c 	.word	0x0801642c

0800c7e0 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800c7e0:	b580      	push	{r7, lr}
 800c7e2:	b084      	sub	sp, #16
 800c7e4:	af00      	add	r7, sp, #0
 800c7e6:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d106      	bne.n	800c7fc <tcp_listen_closed+0x1c>
 800c7ee:	4b14      	ldr	r3, [pc, #80]	; (800c840 <tcp_listen_closed+0x60>)
 800c7f0:	f240 1211 	movw	r2, #273	; 0x111
 800c7f4:	4913      	ldr	r1, [pc, #76]	; (800c844 <tcp_listen_closed+0x64>)
 800c7f6:	4814      	ldr	r0, [pc, #80]	; (800c848 <tcp_listen_closed+0x68>)
 800c7f8:	f007 fea4 	bl	8014544 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	7d1b      	ldrb	r3, [r3, #20]
 800c800:	2b01      	cmp	r3, #1
 800c802:	d006      	beq.n	800c812 <tcp_listen_closed+0x32>
 800c804:	4b0e      	ldr	r3, [pc, #56]	; (800c840 <tcp_listen_closed+0x60>)
 800c806:	f44f 7289 	mov.w	r2, #274	; 0x112
 800c80a:	4910      	ldr	r1, [pc, #64]	; (800c84c <tcp_listen_closed+0x6c>)
 800c80c:	480e      	ldr	r0, [pc, #56]	; (800c848 <tcp_listen_closed+0x68>)
 800c80e:	f007 fe99 	bl	8014544 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800c812:	2301      	movs	r3, #1
 800c814:	60fb      	str	r3, [r7, #12]
 800c816:	e00b      	b.n	800c830 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800c818:	4a0d      	ldr	r2, [pc, #52]	; (800c850 <tcp_listen_closed+0x70>)
 800c81a:	68fb      	ldr	r3, [r7, #12]
 800c81c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	6879      	ldr	r1, [r7, #4]
 800c824:	4618      	mov	r0, r3
 800c826:	f7ff ffb1 	bl	800c78c <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800c82a:	68fb      	ldr	r3, [r7, #12]
 800c82c:	3301      	adds	r3, #1
 800c82e:	60fb      	str	r3, [r7, #12]
 800c830:	68fb      	ldr	r3, [r7, #12]
 800c832:	2b03      	cmp	r3, #3
 800c834:	d9f0      	bls.n	800c818 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800c836:	bf00      	nop
 800c838:	bf00      	nop
 800c83a:	3710      	adds	r7, #16
 800c83c:	46bd      	mov	sp, r7
 800c83e:	bd80      	pop	{r7, pc}
 800c840:	080163e8 	.word	0x080163e8
 800c844:	08016498 	.word	0x08016498
 800c848:	0801642c 	.word	0x0801642c
 800c84c:	080164a4 	.word	0x080164a4
 800c850:	080183d8 	.word	0x080183d8

0800c854 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800c854:	b5b0      	push	{r4, r5, r7, lr}
 800c856:	b088      	sub	sp, #32
 800c858:	af04      	add	r7, sp, #16
 800c85a:	6078      	str	r0, [r7, #4]
 800c85c:	460b      	mov	r3, r1
 800c85e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	2b00      	cmp	r3, #0
 800c864:	d106      	bne.n	800c874 <tcp_close_shutdown+0x20>
 800c866:	4b63      	ldr	r3, [pc, #396]	; (800c9f4 <tcp_close_shutdown+0x1a0>)
 800c868:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800c86c:	4962      	ldr	r1, [pc, #392]	; (800c9f8 <tcp_close_shutdown+0x1a4>)
 800c86e:	4863      	ldr	r0, [pc, #396]	; (800c9fc <tcp_close_shutdown+0x1a8>)
 800c870:	f007 fe68 	bl	8014544 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800c874:	78fb      	ldrb	r3, [r7, #3]
 800c876:	2b00      	cmp	r3, #0
 800c878:	d066      	beq.n	800c948 <tcp_close_shutdown+0xf4>
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	7d1b      	ldrb	r3, [r3, #20]
 800c87e:	2b04      	cmp	r3, #4
 800c880:	d003      	beq.n	800c88a <tcp_close_shutdown+0x36>
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	7d1b      	ldrb	r3, [r3, #20]
 800c886:	2b07      	cmp	r3, #7
 800c888:	d15e      	bne.n	800c948 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d104      	bne.n	800c89c <tcp_close_shutdown+0x48>
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c896:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800c89a:	d055      	beq.n	800c948 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	8b5b      	ldrh	r3, [r3, #26]
 800c8a0:	f003 0310 	and.w	r3, r3, #16
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d106      	bne.n	800c8b6 <tcp_close_shutdown+0x62>
 800c8a8:	4b52      	ldr	r3, [pc, #328]	; (800c9f4 <tcp_close_shutdown+0x1a0>)
 800c8aa:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800c8ae:	4954      	ldr	r1, [pc, #336]	; (800ca00 <tcp_close_shutdown+0x1ac>)
 800c8b0:	4852      	ldr	r0, [pc, #328]	; (800c9fc <tcp_close_shutdown+0x1a8>)
 800c8b2:	f007 fe47 	bl	8014544 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800c8be:	687d      	ldr	r5, [r7, #4]
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	3304      	adds	r3, #4
 800c8c4:	687a      	ldr	r2, [r7, #4]
 800c8c6:	8ad2      	ldrh	r2, [r2, #22]
 800c8c8:	6879      	ldr	r1, [r7, #4]
 800c8ca:	8b09      	ldrh	r1, [r1, #24]
 800c8cc:	9102      	str	r1, [sp, #8]
 800c8ce:	9201      	str	r2, [sp, #4]
 800c8d0:	9300      	str	r3, [sp, #0]
 800c8d2:	462b      	mov	r3, r5
 800c8d4:	4622      	mov	r2, r4
 800c8d6:	4601      	mov	r1, r0
 800c8d8:	6878      	ldr	r0, [r7, #4]
 800c8da:	f004 fe8d 	bl	80115f8 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800c8de:	6878      	ldr	r0, [r7, #4]
 800c8e0:	f001 f8c6 	bl	800da70 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800c8e4:	4b47      	ldr	r3, [pc, #284]	; (800ca04 <tcp_close_shutdown+0x1b0>)
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	687a      	ldr	r2, [r7, #4]
 800c8ea:	429a      	cmp	r2, r3
 800c8ec:	d105      	bne.n	800c8fa <tcp_close_shutdown+0xa6>
 800c8ee:	4b45      	ldr	r3, [pc, #276]	; (800ca04 <tcp_close_shutdown+0x1b0>)
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	68db      	ldr	r3, [r3, #12]
 800c8f4:	4a43      	ldr	r2, [pc, #268]	; (800ca04 <tcp_close_shutdown+0x1b0>)
 800c8f6:	6013      	str	r3, [r2, #0]
 800c8f8:	e013      	b.n	800c922 <tcp_close_shutdown+0xce>
 800c8fa:	4b42      	ldr	r3, [pc, #264]	; (800ca04 <tcp_close_shutdown+0x1b0>)
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	60fb      	str	r3, [r7, #12]
 800c900:	e00c      	b.n	800c91c <tcp_close_shutdown+0xc8>
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	68db      	ldr	r3, [r3, #12]
 800c906:	687a      	ldr	r2, [r7, #4]
 800c908:	429a      	cmp	r2, r3
 800c90a:	d104      	bne.n	800c916 <tcp_close_shutdown+0xc2>
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	68da      	ldr	r2, [r3, #12]
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	60da      	str	r2, [r3, #12]
 800c914:	e005      	b.n	800c922 <tcp_close_shutdown+0xce>
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	68db      	ldr	r3, [r3, #12]
 800c91a:	60fb      	str	r3, [r7, #12]
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	2b00      	cmp	r3, #0
 800c920:	d1ef      	bne.n	800c902 <tcp_close_shutdown+0xae>
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	2200      	movs	r2, #0
 800c926:	60da      	str	r2, [r3, #12]
 800c928:	4b37      	ldr	r3, [pc, #220]	; (800ca08 <tcp_close_shutdown+0x1b4>)
 800c92a:	2201      	movs	r2, #1
 800c92c:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800c92e:	4b37      	ldr	r3, [pc, #220]	; (800ca0c <tcp_close_shutdown+0x1b8>)
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	687a      	ldr	r2, [r7, #4]
 800c934:	429a      	cmp	r2, r3
 800c936:	d102      	bne.n	800c93e <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800c938:	f003 fd5a 	bl	80103f0 <tcp_trigger_input_pcb_close>
 800c93c:	e002      	b.n	800c944 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800c93e:	6878      	ldr	r0, [r7, #4]
 800c940:	f7ff fed6 	bl	800c6f0 <tcp_free>
      }
      return ERR_OK;
 800c944:	2300      	movs	r3, #0
 800c946:	e050      	b.n	800c9ea <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	7d1b      	ldrb	r3, [r3, #20]
 800c94c:	2b02      	cmp	r3, #2
 800c94e:	d03b      	beq.n	800c9c8 <tcp_close_shutdown+0x174>
 800c950:	2b02      	cmp	r3, #2
 800c952:	dc44      	bgt.n	800c9de <tcp_close_shutdown+0x18a>
 800c954:	2b00      	cmp	r3, #0
 800c956:	d002      	beq.n	800c95e <tcp_close_shutdown+0x10a>
 800c958:	2b01      	cmp	r3, #1
 800c95a:	d02a      	beq.n	800c9b2 <tcp_close_shutdown+0x15e>
 800c95c:	e03f      	b.n	800c9de <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	8adb      	ldrh	r3, [r3, #22]
 800c962:	2b00      	cmp	r3, #0
 800c964:	d021      	beq.n	800c9aa <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800c966:	4b2a      	ldr	r3, [pc, #168]	; (800ca10 <tcp_close_shutdown+0x1bc>)
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	687a      	ldr	r2, [r7, #4]
 800c96c:	429a      	cmp	r2, r3
 800c96e:	d105      	bne.n	800c97c <tcp_close_shutdown+0x128>
 800c970:	4b27      	ldr	r3, [pc, #156]	; (800ca10 <tcp_close_shutdown+0x1bc>)
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	68db      	ldr	r3, [r3, #12]
 800c976:	4a26      	ldr	r2, [pc, #152]	; (800ca10 <tcp_close_shutdown+0x1bc>)
 800c978:	6013      	str	r3, [r2, #0]
 800c97a:	e013      	b.n	800c9a4 <tcp_close_shutdown+0x150>
 800c97c:	4b24      	ldr	r3, [pc, #144]	; (800ca10 <tcp_close_shutdown+0x1bc>)
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	60bb      	str	r3, [r7, #8]
 800c982:	e00c      	b.n	800c99e <tcp_close_shutdown+0x14a>
 800c984:	68bb      	ldr	r3, [r7, #8]
 800c986:	68db      	ldr	r3, [r3, #12]
 800c988:	687a      	ldr	r2, [r7, #4]
 800c98a:	429a      	cmp	r2, r3
 800c98c:	d104      	bne.n	800c998 <tcp_close_shutdown+0x144>
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	68da      	ldr	r2, [r3, #12]
 800c992:	68bb      	ldr	r3, [r7, #8]
 800c994:	60da      	str	r2, [r3, #12]
 800c996:	e005      	b.n	800c9a4 <tcp_close_shutdown+0x150>
 800c998:	68bb      	ldr	r3, [r7, #8]
 800c99a:	68db      	ldr	r3, [r3, #12]
 800c99c:	60bb      	str	r3, [r7, #8]
 800c99e:	68bb      	ldr	r3, [r7, #8]
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d1ef      	bne.n	800c984 <tcp_close_shutdown+0x130>
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	2200      	movs	r2, #0
 800c9a8:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800c9aa:	6878      	ldr	r0, [r7, #4]
 800c9ac:	f7ff fea0 	bl	800c6f0 <tcp_free>
      break;
 800c9b0:	e01a      	b.n	800c9e8 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800c9b2:	6878      	ldr	r0, [r7, #4]
 800c9b4:	f7ff ff14 	bl	800c7e0 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800c9b8:	6879      	ldr	r1, [r7, #4]
 800c9ba:	4816      	ldr	r0, [pc, #88]	; (800ca14 <tcp_close_shutdown+0x1c0>)
 800c9bc:	f001 f8a8 	bl	800db10 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800c9c0:	6878      	ldr	r0, [r7, #4]
 800c9c2:	f7ff feb1 	bl	800c728 <tcp_free_listen>
      break;
 800c9c6:	e00f      	b.n	800c9e8 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800c9c8:	6879      	ldr	r1, [r7, #4]
 800c9ca:	480e      	ldr	r0, [pc, #56]	; (800ca04 <tcp_close_shutdown+0x1b0>)
 800c9cc:	f001 f8a0 	bl	800db10 <tcp_pcb_remove>
 800c9d0:	4b0d      	ldr	r3, [pc, #52]	; (800ca08 <tcp_close_shutdown+0x1b4>)
 800c9d2:	2201      	movs	r2, #1
 800c9d4:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800c9d6:	6878      	ldr	r0, [r7, #4]
 800c9d8:	f7ff fe8a 	bl	800c6f0 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800c9dc:	e004      	b.n	800c9e8 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800c9de:	6878      	ldr	r0, [r7, #4]
 800c9e0:	f000 f81a 	bl	800ca18 <tcp_close_shutdown_fin>
 800c9e4:	4603      	mov	r3, r0
 800c9e6:	e000      	b.n	800c9ea <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800c9e8:	2300      	movs	r3, #0
}
 800c9ea:	4618      	mov	r0, r3
 800c9ec:	3710      	adds	r7, #16
 800c9ee:	46bd      	mov	sp, r7
 800c9f0:	bdb0      	pop	{r4, r5, r7, pc}
 800c9f2:	bf00      	nop
 800c9f4:	080163e8 	.word	0x080163e8
 800c9f8:	080164bc 	.word	0x080164bc
 800c9fc:	0801642c 	.word	0x0801642c
 800ca00:	080164dc 	.word	0x080164dc
 800ca04:	200072a0 	.word	0x200072a0
 800ca08:	2000729c 	.word	0x2000729c
 800ca0c:	200072b4 	.word	0x200072b4
 800ca10:	200072ac 	.word	0x200072ac
 800ca14:	200072a8 	.word	0x200072a8

0800ca18 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800ca18:	b580      	push	{r7, lr}
 800ca1a:	b084      	sub	sp, #16
 800ca1c:	af00      	add	r7, sp, #0
 800ca1e:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d106      	bne.n	800ca34 <tcp_close_shutdown_fin+0x1c>
 800ca26:	4b2e      	ldr	r3, [pc, #184]	; (800cae0 <tcp_close_shutdown_fin+0xc8>)
 800ca28:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800ca2c:	492d      	ldr	r1, [pc, #180]	; (800cae4 <tcp_close_shutdown_fin+0xcc>)
 800ca2e:	482e      	ldr	r0, [pc, #184]	; (800cae8 <tcp_close_shutdown_fin+0xd0>)
 800ca30:	f007 fd88 	bl	8014544 <iprintf>

  switch (pcb->state) {
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	7d1b      	ldrb	r3, [r3, #20]
 800ca38:	2b07      	cmp	r3, #7
 800ca3a:	d020      	beq.n	800ca7e <tcp_close_shutdown_fin+0x66>
 800ca3c:	2b07      	cmp	r3, #7
 800ca3e:	dc2b      	bgt.n	800ca98 <tcp_close_shutdown_fin+0x80>
 800ca40:	2b03      	cmp	r3, #3
 800ca42:	d002      	beq.n	800ca4a <tcp_close_shutdown_fin+0x32>
 800ca44:	2b04      	cmp	r3, #4
 800ca46:	d00d      	beq.n	800ca64 <tcp_close_shutdown_fin+0x4c>
 800ca48:	e026      	b.n	800ca98 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800ca4a:	6878      	ldr	r0, [r7, #4]
 800ca4c:	f003 fee2 	bl	8010814 <tcp_send_fin>
 800ca50:	4603      	mov	r3, r0
 800ca52:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800ca54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d11f      	bne.n	800ca9c <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	2205      	movs	r2, #5
 800ca60:	751a      	strb	r2, [r3, #20]
      }
      break;
 800ca62:	e01b      	b.n	800ca9c <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800ca64:	6878      	ldr	r0, [r7, #4]
 800ca66:	f003 fed5 	bl	8010814 <tcp_send_fin>
 800ca6a:	4603      	mov	r3, r0
 800ca6c:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800ca6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d114      	bne.n	800caa0 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	2205      	movs	r2, #5
 800ca7a:	751a      	strb	r2, [r3, #20]
      }
      break;
 800ca7c:	e010      	b.n	800caa0 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800ca7e:	6878      	ldr	r0, [r7, #4]
 800ca80:	f003 fec8 	bl	8010814 <tcp_send_fin>
 800ca84:	4603      	mov	r3, r0
 800ca86:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800ca88:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d109      	bne.n	800caa4 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	2209      	movs	r2, #9
 800ca94:	751a      	strb	r2, [r3, #20]
      }
      break;
 800ca96:	e005      	b.n	800caa4 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800ca98:	2300      	movs	r3, #0
 800ca9a:	e01c      	b.n	800cad6 <tcp_close_shutdown_fin+0xbe>
      break;
 800ca9c:	bf00      	nop
 800ca9e:	e002      	b.n	800caa6 <tcp_close_shutdown_fin+0x8e>
      break;
 800caa0:	bf00      	nop
 800caa2:	e000      	b.n	800caa6 <tcp_close_shutdown_fin+0x8e>
      break;
 800caa4:	bf00      	nop
  }

  if (err == ERR_OK) {
 800caa6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d103      	bne.n	800cab6 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800caae:	6878      	ldr	r0, [r7, #4]
 800cab0:	f003 ffee 	bl	8010a90 <tcp_output>
 800cab4:	e00d      	b.n	800cad2 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800cab6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800caba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cabe:	d108      	bne.n	800cad2 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	8b5b      	ldrh	r3, [r3, #26]
 800cac4:	f043 0308 	orr.w	r3, r3, #8
 800cac8:	b29a      	uxth	r2, r3
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800cace:	2300      	movs	r3, #0
 800cad0:	e001      	b.n	800cad6 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800cad2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800cad6:	4618      	mov	r0, r3
 800cad8:	3710      	adds	r7, #16
 800cada:	46bd      	mov	sp, r7
 800cadc:	bd80      	pop	{r7, pc}
 800cade:	bf00      	nop
 800cae0:	080163e8 	.word	0x080163e8
 800cae4:	08016498 	.word	0x08016498
 800cae8:	0801642c 	.word	0x0801642c

0800caec <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800caec:	b580      	push	{r7, lr}
 800caee:	b082      	sub	sp, #8
 800caf0:	af00      	add	r7, sp, #0
 800caf2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d109      	bne.n	800cb0e <tcp_close+0x22>
 800cafa:	4b0f      	ldr	r3, [pc, #60]	; (800cb38 <tcp_close+0x4c>)
 800cafc:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800cb00:	490e      	ldr	r1, [pc, #56]	; (800cb3c <tcp_close+0x50>)
 800cb02:	480f      	ldr	r0, [pc, #60]	; (800cb40 <tcp_close+0x54>)
 800cb04:	f007 fd1e 	bl	8014544 <iprintf>
 800cb08:	f06f 030f 	mvn.w	r3, #15
 800cb0c:	e00f      	b.n	800cb2e <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	7d1b      	ldrb	r3, [r3, #20]
 800cb12:	2b01      	cmp	r3, #1
 800cb14:	d006      	beq.n	800cb24 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	8b5b      	ldrh	r3, [r3, #26]
 800cb1a:	f043 0310 	orr.w	r3, r3, #16
 800cb1e:	b29a      	uxth	r2, r3
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800cb24:	2101      	movs	r1, #1
 800cb26:	6878      	ldr	r0, [r7, #4]
 800cb28:	f7ff fe94 	bl	800c854 <tcp_close_shutdown>
 800cb2c:	4603      	mov	r3, r0
}
 800cb2e:	4618      	mov	r0, r3
 800cb30:	3708      	adds	r7, #8
 800cb32:	46bd      	mov	sp, r7
 800cb34:	bd80      	pop	{r7, pc}
 800cb36:	bf00      	nop
 800cb38:	080163e8 	.word	0x080163e8
 800cb3c:	080164f8 	.word	0x080164f8
 800cb40:	0801642c 	.word	0x0801642c

0800cb44 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800cb44:	b580      	push	{r7, lr}
 800cb46:	b08e      	sub	sp, #56	; 0x38
 800cb48:	af04      	add	r7, sp, #16
 800cb4a:	6078      	str	r0, [r7, #4]
 800cb4c:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	d107      	bne.n	800cb64 <tcp_abandon+0x20>
 800cb54:	4b52      	ldr	r3, [pc, #328]	; (800cca0 <tcp_abandon+0x15c>)
 800cb56:	f240 223d 	movw	r2, #573	; 0x23d
 800cb5a:	4952      	ldr	r1, [pc, #328]	; (800cca4 <tcp_abandon+0x160>)
 800cb5c:	4852      	ldr	r0, [pc, #328]	; (800cca8 <tcp_abandon+0x164>)
 800cb5e:	f007 fcf1 	bl	8014544 <iprintf>
 800cb62:	e099      	b.n	800cc98 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	7d1b      	ldrb	r3, [r3, #20]
 800cb68:	2b01      	cmp	r3, #1
 800cb6a:	d106      	bne.n	800cb7a <tcp_abandon+0x36>
 800cb6c:	4b4c      	ldr	r3, [pc, #304]	; (800cca0 <tcp_abandon+0x15c>)
 800cb6e:	f44f 7210 	mov.w	r2, #576	; 0x240
 800cb72:	494e      	ldr	r1, [pc, #312]	; (800ccac <tcp_abandon+0x168>)
 800cb74:	484c      	ldr	r0, [pc, #304]	; (800cca8 <tcp_abandon+0x164>)
 800cb76:	f007 fce5 	bl	8014544 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	7d1b      	ldrb	r3, [r3, #20]
 800cb7e:	2b0a      	cmp	r3, #10
 800cb80:	d107      	bne.n	800cb92 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800cb82:	6879      	ldr	r1, [r7, #4]
 800cb84:	484a      	ldr	r0, [pc, #296]	; (800ccb0 <tcp_abandon+0x16c>)
 800cb86:	f000 ffc3 	bl	800db10 <tcp_pcb_remove>
    tcp_free(pcb);
 800cb8a:	6878      	ldr	r0, [r7, #4]
 800cb8c:	f7ff fdb0 	bl	800c6f0 <tcp_free>
 800cb90:	e082      	b.n	800cc98 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800cb92:	2300      	movs	r3, #0
 800cb94:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800cb96:	2300      	movs	r3, #0
 800cb98:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cb9e:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cba4:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cbac:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	691b      	ldr	r3, [r3, #16]
 800cbb2:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	7d1b      	ldrb	r3, [r3, #20]
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d126      	bne.n	800cc0a <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	8adb      	ldrh	r3, [r3, #22]
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d02e      	beq.n	800cc22 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800cbc4:	4b3b      	ldr	r3, [pc, #236]	; (800ccb4 <tcp_abandon+0x170>)
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	687a      	ldr	r2, [r7, #4]
 800cbca:	429a      	cmp	r2, r3
 800cbcc:	d105      	bne.n	800cbda <tcp_abandon+0x96>
 800cbce:	4b39      	ldr	r3, [pc, #228]	; (800ccb4 <tcp_abandon+0x170>)
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	68db      	ldr	r3, [r3, #12]
 800cbd4:	4a37      	ldr	r2, [pc, #220]	; (800ccb4 <tcp_abandon+0x170>)
 800cbd6:	6013      	str	r3, [r2, #0]
 800cbd8:	e013      	b.n	800cc02 <tcp_abandon+0xbe>
 800cbda:	4b36      	ldr	r3, [pc, #216]	; (800ccb4 <tcp_abandon+0x170>)
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	61fb      	str	r3, [r7, #28]
 800cbe0:	e00c      	b.n	800cbfc <tcp_abandon+0xb8>
 800cbe2:	69fb      	ldr	r3, [r7, #28]
 800cbe4:	68db      	ldr	r3, [r3, #12]
 800cbe6:	687a      	ldr	r2, [r7, #4]
 800cbe8:	429a      	cmp	r2, r3
 800cbea:	d104      	bne.n	800cbf6 <tcp_abandon+0xb2>
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	68da      	ldr	r2, [r3, #12]
 800cbf0:	69fb      	ldr	r3, [r7, #28]
 800cbf2:	60da      	str	r2, [r3, #12]
 800cbf4:	e005      	b.n	800cc02 <tcp_abandon+0xbe>
 800cbf6:	69fb      	ldr	r3, [r7, #28]
 800cbf8:	68db      	ldr	r3, [r3, #12]
 800cbfa:	61fb      	str	r3, [r7, #28]
 800cbfc:	69fb      	ldr	r3, [r7, #28]
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	d1ef      	bne.n	800cbe2 <tcp_abandon+0x9e>
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	2200      	movs	r2, #0
 800cc06:	60da      	str	r2, [r3, #12]
 800cc08:	e00b      	b.n	800cc22 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800cc0a:	683b      	ldr	r3, [r7, #0]
 800cc0c:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	8adb      	ldrh	r3, [r3, #22]
 800cc12:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800cc14:	6879      	ldr	r1, [r7, #4]
 800cc16:	4828      	ldr	r0, [pc, #160]	; (800ccb8 <tcp_abandon+0x174>)
 800cc18:	f000 ff7a 	bl	800db10 <tcp_pcb_remove>
 800cc1c:	4b27      	ldr	r3, [pc, #156]	; (800ccbc <tcp_abandon+0x178>)
 800cc1e:	2201      	movs	r2, #1
 800cc20:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d004      	beq.n	800cc34 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cc2e:	4618      	mov	r0, r3
 800cc30:	f000 fd1c 	bl	800d66c <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	d004      	beq.n	800cc46 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cc40:	4618      	mov	r0, r3
 800cc42:	f000 fd13 	bl	800d66c <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d004      	beq.n	800cc58 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cc52:	4618      	mov	r0, r3
 800cc54:	f000 fd0a 	bl	800d66c <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800cc58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d00e      	beq.n	800cc7c <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800cc5e:	6879      	ldr	r1, [r7, #4]
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	3304      	adds	r3, #4
 800cc64:	687a      	ldr	r2, [r7, #4]
 800cc66:	8b12      	ldrh	r2, [r2, #24]
 800cc68:	9202      	str	r2, [sp, #8]
 800cc6a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800cc6c:	9201      	str	r2, [sp, #4]
 800cc6e:	9300      	str	r3, [sp, #0]
 800cc70:	460b      	mov	r3, r1
 800cc72:	697a      	ldr	r2, [r7, #20]
 800cc74:	69b9      	ldr	r1, [r7, #24]
 800cc76:	6878      	ldr	r0, [r7, #4]
 800cc78:	f004 fcbe 	bl	80115f8 <tcp_rst>
    }
    last_state = pcb->state;
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	7d1b      	ldrb	r3, [r3, #20]
 800cc80:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800cc82:	6878      	ldr	r0, [r7, #4]
 800cc84:	f7ff fd34 	bl	800c6f0 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800cc88:	693b      	ldr	r3, [r7, #16]
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	d004      	beq.n	800cc98 <tcp_abandon+0x154>
 800cc8e:	693b      	ldr	r3, [r7, #16]
 800cc90:	f06f 010c 	mvn.w	r1, #12
 800cc94:	68f8      	ldr	r0, [r7, #12]
 800cc96:	4798      	blx	r3
  }
}
 800cc98:	3728      	adds	r7, #40	; 0x28
 800cc9a:	46bd      	mov	sp, r7
 800cc9c:	bd80      	pop	{r7, pc}
 800cc9e:	bf00      	nop
 800cca0:	080163e8 	.word	0x080163e8
 800cca4:	0801652c 	.word	0x0801652c
 800cca8:	0801642c 	.word	0x0801642c
 800ccac:	08016548 	.word	0x08016548
 800ccb0:	200072b0 	.word	0x200072b0
 800ccb4:	200072ac 	.word	0x200072ac
 800ccb8:	200072a0 	.word	0x200072a0
 800ccbc:	2000729c 	.word	0x2000729c

0800ccc0 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800ccc0:	b580      	push	{r7, lr}
 800ccc2:	b082      	sub	sp, #8
 800ccc4:	af00      	add	r7, sp, #0
 800ccc6:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800ccc8:	2101      	movs	r1, #1
 800ccca:	6878      	ldr	r0, [r7, #4]
 800cccc:	f7ff ff3a 	bl	800cb44 <tcp_abandon>
}
 800ccd0:	bf00      	nop
 800ccd2:	3708      	adds	r7, #8
 800ccd4:	46bd      	mov	sp, r7
 800ccd6:	bd80      	pop	{r7, pc}

0800ccd8 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800ccd8:	b580      	push	{r7, lr}
 800ccda:	b084      	sub	sp, #16
 800ccdc:	af00      	add	r7, sp, #0
 800ccde:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d106      	bne.n	800ccf4 <tcp_update_rcv_ann_wnd+0x1c>
 800cce6:	4b25      	ldr	r3, [pc, #148]	; (800cd7c <tcp_update_rcv_ann_wnd+0xa4>)
 800cce8:	f240 32a6 	movw	r2, #934	; 0x3a6
 800ccec:	4924      	ldr	r1, [pc, #144]	; (800cd80 <tcp_update_rcv_ann_wnd+0xa8>)
 800ccee:	4825      	ldr	r0, [pc, #148]	; (800cd84 <tcp_update_rcv_ann_wnd+0xac>)
 800ccf0:	f007 fc28 	bl	8014544 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccf8:	687a      	ldr	r2, [r7, #4]
 800ccfa:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800ccfc:	4413      	add	r3, r2
 800ccfe:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd04:	687a      	ldr	r2, [r7, #4]
 800cd06:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800cd08:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800cd0c:	bf28      	it	cs
 800cd0e:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800cd12:	b292      	uxth	r2, r2
 800cd14:	4413      	add	r3, r2
 800cd16:	68fa      	ldr	r2, [r7, #12]
 800cd18:	1ad3      	subs	r3, r2, r3
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	db08      	blt.n	800cd30 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd2a:	68fa      	ldr	r2, [r7, #12]
 800cd2c:	1ad3      	subs	r3, r2, r3
 800cd2e:	e020      	b.n	800cd72 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd38:	1ad3      	subs	r3, r2, r3
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	dd03      	ble.n	800cd46 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	2200      	movs	r2, #0
 800cd42:	855a      	strh	r2, [r3, #42]	; 0x2a
 800cd44:	e014      	b.n	800cd70 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd4e:	1ad3      	subs	r3, r2, r3
 800cd50:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800cd52:	68bb      	ldr	r3, [r7, #8]
 800cd54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cd58:	d306      	bcc.n	800cd68 <tcp_update_rcv_ann_wnd+0x90>
 800cd5a:	4b08      	ldr	r3, [pc, #32]	; (800cd7c <tcp_update_rcv_ann_wnd+0xa4>)
 800cd5c:	f240 32b6 	movw	r2, #950	; 0x3b6
 800cd60:	4909      	ldr	r1, [pc, #36]	; (800cd88 <tcp_update_rcv_ann_wnd+0xb0>)
 800cd62:	4808      	ldr	r0, [pc, #32]	; (800cd84 <tcp_update_rcv_ann_wnd+0xac>)
 800cd64:	f007 fbee 	bl	8014544 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800cd68:	68bb      	ldr	r3, [r7, #8]
 800cd6a:	b29a      	uxth	r2, r3
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800cd70:	2300      	movs	r3, #0
  }
}
 800cd72:	4618      	mov	r0, r3
 800cd74:	3710      	adds	r7, #16
 800cd76:	46bd      	mov	sp, r7
 800cd78:	bd80      	pop	{r7, pc}
 800cd7a:	bf00      	nop
 800cd7c:	080163e8 	.word	0x080163e8
 800cd80:	08016644 	.word	0x08016644
 800cd84:	0801642c 	.word	0x0801642c
 800cd88:	08016668 	.word	0x08016668

0800cd8c <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800cd8c:	b580      	push	{r7, lr}
 800cd8e:	b084      	sub	sp, #16
 800cd90:	af00      	add	r7, sp, #0
 800cd92:	6078      	str	r0, [r7, #4]
 800cd94:	460b      	mov	r3, r1
 800cd96:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d107      	bne.n	800cdae <tcp_recved+0x22>
 800cd9e:	4b1f      	ldr	r3, [pc, #124]	; (800ce1c <tcp_recved+0x90>)
 800cda0:	f240 32cf 	movw	r2, #975	; 0x3cf
 800cda4:	491e      	ldr	r1, [pc, #120]	; (800ce20 <tcp_recved+0x94>)
 800cda6:	481f      	ldr	r0, [pc, #124]	; (800ce24 <tcp_recved+0x98>)
 800cda8:	f007 fbcc 	bl	8014544 <iprintf>
 800cdac:	e032      	b.n	800ce14 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	7d1b      	ldrb	r3, [r3, #20]
 800cdb2:	2b01      	cmp	r3, #1
 800cdb4:	d106      	bne.n	800cdc4 <tcp_recved+0x38>
 800cdb6:	4b19      	ldr	r3, [pc, #100]	; (800ce1c <tcp_recved+0x90>)
 800cdb8:	f240 32d2 	movw	r2, #978	; 0x3d2
 800cdbc:	491a      	ldr	r1, [pc, #104]	; (800ce28 <tcp_recved+0x9c>)
 800cdbe:	4819      	ldr	r0, [pc, #100]	; (800ce24 <tcp_recved+0x98>)
 800cdc0:	f007 fbc0 	bl	8014544 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800cdc8:	887b      	ldrh	r3, [r7, #2]
 800cdca:	4413      	add	r3, r2
 800cdcc:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800cdce:	89fb      	ldrh	r3, [r7, #14]
 800cdd0:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800cdd4:	d804      	bhi.n	800cde0 <tcp_recved+0x54>
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cdda:	89fa      	ldrh	r2, [r7, #14]
 800cddc:	429a      	cmp	r2, r3
 800cdde:	d204      	bcs.n	800cdea <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800cde6:	851a      	strh	r2, [r3, #40]	; 0x28
 800cde8:	e002      	b.n	800cdf0 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	89fa      	ldrh	r2, [r7, #14]
 800cdee:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800cdf0:	6878      	ldr	r0, [r7, #4]
 800cdf2:	f7ff ff71 	bl	800ccd8 <tcp_update_rcv_ann_wnd>
 800cdf6:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800cdf8:	68bb      	ldr	r3, [r7, #8]
 800cdfa:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800cdfe:	d309      	bcc.n	800ce14 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	8b5b      	ldrh	r3, [r3, #26]
 800ce04:	f043 0302 	orr.w	r3, r3, #2
 800ce08:	b29a      	uxth	r2, r3
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800ce0e:	6878      	ldr	r0, [r7, #4]
 800ce10:	f003 fe3e 	bl	8010a90 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800ce14:	3710      	adds	r7, #16
 800ce16:	46bd      	mov	sp, r7
 800ce18:	bd80      	pop	{r7, pc}
 800ce1a:	bf00      	nop
 800ce1c:	080163e8 	.word	0x080163e8
 800ce20:	08016684 	.word	0x08016684
 800ce24:	0801642c 	.word	0x0801642c
 800ce28:	0801669c 	.word	0x0801669c

0800ce2c <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800ce2c:	b5b0      	push	{r4, r5, r7, lr}
 800ce2e:	b090      	sub	sp, #64	; 0x40
 800ce30:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800ce32:	2300      	movs	r3, #0
 800ce34:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800ce38:	4b94      	ldr	r3, [pc, #592]	; (800d08c <tcp_slowtmr+0x260>)
 800ce3a:	681b      	ldr	r3, [r3, #0]
 800ce3c:	3301      	adds	r3, #1
 800ce3e:	4a93      	ldr	r2, [pc, #588]	; (800d08c <tcp_slowtmr+0x260>)
 800ce40:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800ce42:	4b93      	ldr	r3, [pc, #588]	; (800d090 <tcp_slowtmr+0x264>)
 800ce44:	781b      	ldrb	r3, [r3, #0]
 800ce46:	3301      	adds	r3, #1
 800ce48:	b2da      	uxtb	r2, r3
 800ce4a:	4b91      	ldr	r3, [pc, #580]	; (800d090 <tcp_slowtmr+0x264>)
 800ce4c:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800ce4e:	2300      	movs	r3, #0
 800ce50:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800ce52:	4b90      	ldr	r3, [pc, #576]	; (800d094 <tcp_slowtmr+0x268>)
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800ce58:	e29f      	b.n	800d39a <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800ce5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce5c:	7d1b      	ldrb	r3, [r3, #20]
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	d106      	bne.n	800ce70 <tcp_slowtmr+0x44>
 800ce62:	4b8d      	ldr	r3, [pc, #564]	; (800d098 <tcp_slowtmr+0x26c>)
 800ce64:	f240 42be 	movw	r2, #1214	; 0x4be
 800ce68:	498c      	ldr	r1, [pc, #560]	; (800d09c <tcp_slowtmr+0x270>)
 800ce6a:	488d      	ldr	r0, [pc, #564]	; (800d0a0 <tcp_slowtmr+0x274>)
 800ce6c:	f007 fb6a 	bl	8014544 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800ce70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce72:	7d1b      	ldrb	r3, [r3, #20]
 800ce74:	2b01      	cmp	r3, #1
 800ce76:	d106      	bne.n	800ce86 <tcp_slowtmr+0x5a>
 800ce78:	4b87      	ldr	r3, [pc, #540]	; (800d098 <tcp_slowtmr+0x26c>)
 800ce7a:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800ce7e:	4989      	ldr	r1, [pc, #548]	; (800d0a4 <tcp_slowtmr+0x278>)
 800ce80:	4887      	ldr	r0, [pc, #540]	; (800d0a0 <tcp_slowtmr+0x274>)
 800ce82:	f007 fb5f 	bl	8014544 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800ce86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce88:	7d1b      	ldrb	r3, [r3, #20]
 800ce8a:	2b0a      	cmp	r3, #10
 800ce8c:	d106      	bne.n	800ce9c <tcp_slowtmr+0x70>
 800ce8e:	4b82      	ldr	r3, [pc, #520]	; (800d098 <tcp_slowtmr+0x26c>)
 800ce90:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800ce94:	4984      	ldr	r1, [pc, #528]	; (800d0a8 <tcp_slowtmr+0x27c>)
 800ce96:	4882      	ldr	r0, [pc, #520]	; (800d0a0 <tcp_slowtmr+0x274>)
 800ce98:	f007 fb54 	bl	8014544 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800ce9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce9e:	7f9a      	ldrb	r2, [r3, #30]
 800cea0:	4b7b      	ldr	r3, [pc, #492]	; (800d090 <tcp_slowtmr+0x264>)
 800cea2:	781b      	ldrb	r3, [r3, #0]
 800cea4:	429a      	cmp	r2, r3
 800cea6:	d105      	bne.n	800ceb4 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800cea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ceaa:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800ceac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ceae:	68db      	ldr	r3, [r3, #12]
 800ceb0:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800ceb2:	e272      	b.n	800d39a <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 800ceb4:	4b76      	ldr	r3, [pc, #472]	; (800d090 <tcp_slowtmr+0x264>)
 800ceb6:	781a      	ldrb	r2, [r3, #0]
 800ceb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ceba:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800cebc:	2300      	movs	r3, #0
 800cebe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800cec2:	2300      	movs	r3, #0
 800cec4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800cec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ceca:	7d1b      	ldrb	r3, [r3, #20]
 800cecc:	2b02      	cmp	r3, #2
 800cece:	d10a      	bne.n	800cee6 <tcp_slowtmr+0xba>
 800ced0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ced2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ced6:	2b05      	cmp	r3, #5
 800ced8:	d905      	bls.n	800cee6 <tcp_slowtmr+0xba>
      ++pcb_remove;
 800ceda:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cede:	3301      	adds	r3, #1
 800cee0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cee4:	e11e      	b.n	800d124 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800cee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cee8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ceec:	2b0b      	cmp	r3, #11
 800ceee:	d905      	bls.n	800cefc <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800cef0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cef4:	3301      	adds	r3, #1
 800cef6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cefa:	e113      	b.n	800d124 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800cefc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cefe:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	d075      	beq.n	800cff2 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800cf06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d006      	beq.n	800cf1c <tcp_slowtmr+0xf0>
 800cf0e:	4b62      	ldr	r3, [pc, #392]	; (800d098 <tcp_slowtmr+0x26c>)
 800cf10:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800cf14:	4965      	ldr	r1, [pc, #404]	; (800d0ac <tcp_slowtmr+0x280>)
 800cf16:	4862      	ldr	r0, [pc, #392]	; (800d0a0 <tcp_slowtmr+0x274>)
 800cf18:	f007 fb14 	bl	8014544 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800cf1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d106      	bne.n	800cf32 <tcp_slowtmr+0x106>
 800cf24:	4b5c      	ldr	r3, [pc, #368]	; (800d098 <tcp_slowtmr+0x26c>)
 800cf26:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800cf2a:	4961      	ldr	r1, [pc, #388]	; (800d0b0 <tcp_slowtmr+0x284>)
 800cf2c:	485c      	ldr	r0, [pc, #368]	; (800d0a0 <tcp_slowtmr+0x274>)
 800cf2e:	f007 fb09 	bl	8014544 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800cf32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf34:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800cf38:	2b0b      	cmp	r3, #11
 800cf3a:	d905      	bls.n	800cf48 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800cf3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cf40:	3301      	adds	r3, #1
 800cf42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cf46:	e0ed      	b.n	800d124 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800cf48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf4a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800cf4e:	3b01      	subs	r3, #1
 800cf50:	4a58      	ldr	r2, [pc, #352]	; (800d0b4 <tcp_slowtmr+0x288>)
 800cf52:	5cd3      	ldrb	r3, [r2, r3]
 800cf54:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800cf56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf58:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800cf5c:	7c7a      	ldrb	r2, [r7, #17]
 800cf5e:	429a      	cmp	r2, r3
 800cf60:	d907      	bls.n	800cf72 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800cf62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf64:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800cf68:	3301      	adds	r3, #1
 800cf6a:	b2da      	uxtb	r2, r3
 800cf6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf6e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800cf72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf74:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800cf78:	7c7a      	ldrb	r2, [r7, #17]
 800cf7a:	429a      	cmp	r2, r3
 800cf7c:	f200 80d2 	bhi.w	800d124 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800cf80:	2301      	movs	r3, #1
 800cf82:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800cf84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf86:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	d108      	bne.n	800cfa0 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800cf8e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cf90:	f004 fc26 	bl	80117e0 <tcp_zero_window_probe>
 800cf94:	4603      	mov	r3, r0
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d014      	beq.n	800cfc4 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800cf9a:	2300      	movs	r3, #0
 800cf9c:	623b      	str	r3, [r7, #32]
 800cf9e:	e011      	b.n	800cfc4 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800cfa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfa2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800cfa6:	4619      	mov	r1, r3
 800cfa8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cfaa:	f003 faeb 	bl	8010584 <tcp_split_unsent_seg>
 800cfae:	4603      	mov	r3, r0
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d107      	bne.n	800cfc4 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800cfb4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cfb6:	f003 fd6b 	bl	8010a90 <tcp_output>
 800cfba:	4603      	mov	r3, r0
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d101      	bne.n	800cfc4 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800cfc0:	2300      	movs	r3, #0
 800cfc2:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800cfc4:	6a3b      	ldr	r3, [r7, #32]
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	f000 80ac 	beq.w	800d124 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800cfcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfce:	2200      	movs	r2, #0
 800cfd0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800cfd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfd6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800cfda:	2b06      	cmp	r3, #6
 800cfdc:	f200 80a2 	bhi.w	800d124 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800cfe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfe2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800cfe6:	3301      	adds	r3, #1
 800cfe8:	b2da      	uxtb	r2, r3
 800cfea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfec:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800cff0:	e098      	b.n	800d124 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800cff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cff4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	db0f      	blt.n	800d01c <tcp_slowtmr+0x1f0>
 800cffc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cffe:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800d002:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800d006:	4293      	cmp	r3, r2
 800d008:	d008      	beq.n	800d01c <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800d00a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d00c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800d010:	b29b      	uxth	r3, r3
 800d012:	3301      	adds	r3, #1
 800d014:	b29b      	uxth	r3, r3
 800d016:	b21a      	sxth	r2, r3
 800d018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d01a:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800d01c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d01e:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800d022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d024:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800d028:	429a      	cmp	r2, r3
 800d02a:	db7b      	blt.n	800d124 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800d02c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d02e:	f004 f821 	bl	8011074 <tcp_rexmit_rto_prepare>
 800d032:	4603      	mov	r3, r0
 800d034:	2b00      	cmp	r3, #0
 800d036:	d007      	beq.n	800d048 <tcp_slowtmr+0x21c>
 800d038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d03a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d171      	bne.n	800d124 <tcp_slowtmr+0x2f8>
 800d040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d042:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d044:	2b00      	cmp	r3, #0
 800d046:	d06d      	beq.n	800d124 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800d048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d04a:	7d1b      	ldrb	r3, [r3, #20]
 800d04c:	2b02      	cmp	r3, #2
 800d04e:	d03a      	beq.n	800d0c6 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800d050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d052:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d056:	2b0c      	cmp	r3, #12
 800d058:	bf28      	it	cs
 800d05a:	230c      	movcs	r3, #12
 800d05c:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800d05e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d060:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800d064:	10db      	asrs	r3, r3, #3
 800d066:	b21b      	sxth	r3, r3
 800d068:	461a      	mov	r2, r3
 800d06a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d06c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800d070:	4413      	add	r3, r2
 800d072:	7efa      	ldrb	r2, [r7, #27]
 800d074:	4910      	ldr	r1, [pc, #64]	; (800d0b8 <tcp_slowtmr+0x28c>)
 800d076:	5c8a      	ldrb	r2, [r1, r2]
 800d078:	4093      	lsls	r3, r2
 800d07a:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800d07c:	697b      	ldr	r3, [r7, #20]
 800d07e:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800d082:	4293      	cmp	r3, r2
 800d084:	dc1a      	bgt.n	800d0bc <tcp_slowtmr+0x290>
 800d086:	697b      	ldr	r3, [r7, #20]
 800d088:	b21a      	sxth	r2, r3
 800d08a:	e019      	b.n	800d0c0 <tcp_slowtmr+0x294>
 800d08c:	200072a4 	.word	0x200072a4
 800d090:	200000e6 	.word	0x200000e6
 800d094:	200072a0 	.word	0x200072a0
 800d098:	080163e8 	.word	0x080163e8
 800d09c:	0801672c 	.word	0x0801672c
 800d0a0:	0801642c 	.word	0x0801642c
 800d0a4:	08016758 	.word	0x08016758
 800d0a8:	08016784 	.word	0x08016784
 800d0ac:	080167b4 	.word	0x080167b4
 800d0b0:	080167e8 	.word	0x080167e8
 800d0b4:	080183d0 	.word	0x080183d0
 800d0b8:	080183c0 	.word	0x080183c0
 800d0bc:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800d0c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0c2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800d0c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0c8:	2200      	movs	r2, #0
 800d0ca:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800d0cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0ce:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800d0d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0d4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d0d8:	4293      	cmp	r3, r2
 800d0da:	bf28      	it	cs
 800d0dc:	4613      	movcs	r3, r2
 800d0de:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800d0e0:	8a7b      	ldrh	r3, [r7, #18]
 800d0e2:	085b      	lsrs	r3, r3, #1
 800d0e4:	b29a      	uxth	r2, r3
 800d0e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0e8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800d0ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0ee:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800d0f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0f4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d0f6:	005b      	lsls	r3, r3, #1
 800d0f8:	b29b      	uxth	r3, r3
 800d0fa:	429a      	cmp	r2, r3
 800d0fc:	d206      	bcs.n	800d10c <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800d0fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d100:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d102:	005b      	lsls	r3, r3, #1
 800d104:	b29a      	uxth	r2, r3
 800d106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d108:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800d10c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d10e:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800d110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d112:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800d116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d118:	2200      	movs	r2, #0
 800d11a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800d11e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d120:	f004 f818 	bl	8011154 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800d124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d126:	7d1b      	ldrb	r3, [r3, #20]
 800d128:	2b06      	cmp	r3, #6
 800d12a:	d111      	bne.n	800d150 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800d12c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d12e:	8b5b      	ldrh	r3, [r3, #26]
 800d130:	f003 0310 	and.w	r3, r3, #16
 800d134:	2b00      	cmp	r3, #0
 800d136:	d00b      	beq.n	800d150 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d138:	4b9d      	ldr	r3, [pc, #628]	; (800d3b0 <tcp_slowtmr+0x584>)
 800d13a:	681a      	ldr	r2, [r3, #0]
 800d13c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d13e:	6a1b      	ldr	r3, [r3, #32]
 800d140:	1ad3      	subs	r3, r2, r3
 800d142:	2b28      	cmp	r3, #40	; 0x28
 800d144:	d904      	bls.n	800d150 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800d146:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d14a:	3301      	adds	r3, #1
 800d14c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800d150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d152:	7a5b      	ldrb	r3, [r3, #9]
 800d154:	f003 0308 	and.w	r3, r3, #8
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d04c      	beq.n	800d1f6 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800d15c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d15e:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800d160:	2b04      	cmp	r3, #4
 800d162:	d003      	beq.n	800d16c <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800d164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d166:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800d168:	2b07      	cmp	r3, #7
 800d16a:	d144      	bne.n	800d1f6 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d16c:	4b90      	ldr	r3, [pc, #576]	; (800d3b0 <tcp_slowtmr+0x584>)
 800d16e:	681a      	ldr	r2, [r3, #0]
 800d170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d172:	6a1b      	ldr	r3, [r3, #32]
 800d174:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800d176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d178:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d17c:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 800d180:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800d184:	498b      	ldr	r1, [pc, #556]	; (800d3b4 <tcp_slowtmr+0x588>)
 800d186:	fba1 1303 	umull	r1, r3, r1, r3
 800d18a:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d18c:	429a      	cmp	r2, r3
 800d18e:	d90a      	bls.n	800d1a6 <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800d190:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d194:	3301      	adds	r3, #1
 800d196:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800d19a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d19e:	3301      	adds	r3, #1
 800d1a0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d1a4:	e027      	b.n	800d1f6 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d1a6:	4b82      	ldr	r3, [pc, #520]	; (800d3b0 <tcp_slowtmr+0x584>)
 800d1a8:	681a      	ldr	r2, [r3, #0]
 800d1aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1ac:	6a1b      	ldr	r3, [r3, #32]
 800d1ae:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800d1b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1b2:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800d1b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1b8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800d1bc:	4618      	mov	r0, r3
 800d1be:	4b7e      	ldr	r3, [pc, #504]	; (800d3b8 <tcp_slowtmr+0x58c>)
 800d1c0:	fb03 f300 	mul.w	r3, r3, r0
 800d1c4:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800d1c6:	497b      	ldr	r1, [pc, #492]	; (800d3b4 <tcp_slowtmr+0x588>)
 800d1c8:	fba1 1303 	umull	r1, r3, r1, r3
 800d1cc:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d1ce:	429a      	cmp	r2, r3
 800d1d0:	d911      	bls.n	800d1f6 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800d1d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d1d4:	f004 fac4 	bl	8011760 <tcp_keepalive>
 800d1d8:	4603      	mov	r3, r0
 800d1da:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800d1de:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d107      	bne.n	800d1f6 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800d1e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1e8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800d1ec:	3301      	adds	r3, #1
 800d1ee:	b2da      	uxtb	r2, r3
 800d1f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1f2:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800d1f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	d011      	beq.n	800d222 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800d1fe:	4b6c      	ldr	r3, [pc, #432]	; (800d3b0 <tcp_slowtmr+0x584>)
 800d200:	681a      	ldr	r2, [r3, #0]
 800d202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d204:	6a1b      	ldr	r3, [r3, #32]
 800d206:	1ad2      	subs	r2, r2, r3
 800d208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d20a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800d20e:	4619      	mov	r1, r3
 800d210:	460b      	mov	r3, r1
 800d212:	005b      	lsls	r3, r3, #1
 800d214:	440b      	add	r3, r1
 800d216:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800d218:	429a      	cmp	r2, r3
 800d21a:	d302      	bcc.n	800d222 <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800d21c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d21e:	f000 fddb 	bl	800ddd8 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800d222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d224:	7d1b      	ldrb	r3, [r3, #20]
 800d226:	2b03      	cmp	r3, #3
 800d228:	d10b      	bne.n	800d242 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d22a:	4b61      	ldr	r3, [pc, #388]	; (800d3b0 <tcp_slowtmr+0x584>)
 800d22c:	681a      	ldr	r2, [r3, #0]
 800d22e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d230:	6a1b      	ldr	r3, [r3, #32]
 800d232:	1ad3      	subs	r3, r2, r3
 800d234:	2b28      	cmp	r3, #40	; 0x28
 800d236:	d904      	bls.n	800d242 <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800d238:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d23c:	3301      	adds	r3, #1
 800d23e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800d242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d244:	7d1b      	ldrb	r3, [r3, #20]
 800d246:	2b09      	cmp	r3, #9
 800d248:	d10b      	bne.n	800d262 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800d24a:	4b59      	ldr	r3, [pc, #356]	; (800d3b0 <tcp_slowtmr+0x584>)
 800d24c:	681a      	ldr	r2, [r3, #0]
 800d24e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d250:	6a1b      	ldr	r3, [r3, #32]
 800d252:	1ad3      	subs	r3, r2, r3
 800d254:	2bf0      	cmp	r3, #240	; 0xf0
 800d256:	d904      	bls.n	800d262 <tcp_slowtmr+0x436>
        ++pcb_remove;
 800d258:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d25c:	3301      	adds	r3, #1
 800d25e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800d262:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d266:	2b00      	cmp	r3, #0
 800d268:	d060      	beq.n	800d32c <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800d26a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d26c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d270:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800d272:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d274:	f000 fbfc 	bl	800da70 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800d278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	d010      	beq.n	800d2a0 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800d27e:	4b4f      	ldr	r3, [pc, #316]	; (800d3bc <tcp_slowtmr+0x590>)
 800d280:	681b      	ldr	r3, [r3, #0]
 800d282:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d284:	429a      	cmp	r2, r3
 800d286:	d106      	bne.n	800d296 <tcp_slowtmr+0x46a>
 800d288:	4b4d      	ldr	r3, [pc, #308]	; (800d3c0 <tcp_slowtmr+0x594>)
 800d28a:	f240 526d 	movw	r2, #1389	; 0x56d
 800d28e:	494d      	ldr	r1, [pc, #308]	; (800d3c4 <tcp_slowtmr+0x598>)
 800d290:	484d      	ldr	r0, [pc, #308]	; (800d3c8 <tcp_slowtmr+0x59c>)
 800d292:	f007 f957 	bl	8014544 <iprintf>
        prev->next = pcb->next;
 800d296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d298:	68da      	ldr	r2, [r3, #12]
 800d29a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d29c:	60da      	str	r2, [r3, #12]
 800d29e:	e00f      	b.n	800d2c0 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800d2a0:	4b46      	ldr	r3, [pc, #280]	; (800d3bc <tcp_slowtmr+0x590>)
 800d2a2:	681b      	ldr	r3, [r3, #0]
 800d2a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d2a6:	429a      	cmp	r2, r3
 800d2a8:	d006      	beq.n	800d2b8 <tcp_slowtmr+0x48c>
 800d2aa:	4b45      	ldr	r3, [pc, #276]	; (800d3c0 <tcp_slowtmr+0x594>)
 800d2ac:	f240 5271 	movw	r2, #1393	; 0x571
 800d2b0:	4946      	ldr	r1, [pc, #280]	; (800d3cc <tcp_slowtmr+0x5a0>)
 800d2b2:	4845      	ldr	r0, [pc, #276]	; (800d3c8 <tcp_slowtmr+0x59c>)
 800d2b4:	f007 f946 	bl	8014544 <iprintf>
        tcp_active_pcbs = pcb->next;
 800d2b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2ba:	68db      	ldr	r3, [r3, #12]
 800d2bc:	4a3f      	ldr	r2, [pc, #252]	; (800d3bc <tcp_slowtmr+0x590>)
 800d2be:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800d2c0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d013      	beq.n	800d2f0 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800d2c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2ca:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800d2cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2ce:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800d2d0:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800d2d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2d4:	3304      	adds	r3, #4
 800d2d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d2d8:	8ad2      	ldrh	r2, [r2, #22]
 800d2da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d2dc:	8b09      	ldrh	r1, [r1, #24]
 800d2de:	9102      	str	r1, [sp, #8]
 800d2e0:	9201      	str	r2, [sp, #4]
 800d2e2:	9300      	str	r3, [sp, #0]
 800d2e4:	462b      	mov	r3, r5
 800d2e6:	4622      	mov	r2, r4
 800d2e8:	4601      	mov	r1, r0
 800d2ea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d2ec:	f004 f984 	bl	80115f8 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800d2f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2f2:	691b      	ldr	r3, [r3, #16]
 800d2f4:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800d2f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2f8:	7d1b      	ldrb	r3, [r3, #20]
 800d2fa:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800d2fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2fe:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800d300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d302:	68db      	ldr	r3, [r3, #12]
 800d304:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800d306:	6838      	ldr	r0, [r7, #0]
 800d308:	f7ff f9f2 	bl	800c6f0 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800d30c:	4b30      	ldr	r3, [pc, #192]	; (800d3d0 <tcp_slowtmr+0x5a4>)
 800d30e:	2200      	movs	r2, #0
 800d310:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800d312:	68fb      	ldr	r3, [r7, #12]
 800d314:	2b00      	cmp	r3, #0
 800d316:	d004      	beq.n	800d322 <tcp_slowtmr+0x4f6>
 800d318:	68fb      	ldr	r3, [r7, #12]
 800d31a:	f06f 010c 	mvn.w	r1, #12
 800d31e:	68b8      	ldr	r0, [r7, #8]
 800d320:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800d322:	4b2b      	ldr	r3, [pc, #172]	; (800d3d0 <tcp_slowtmr+0x5a4>)
 800d324:	781b      	ldrb	r3, [r3, #0]
 800d326:	2b00      	cmp	r3, #0
 800d328:	d037      	beq.n	800d39a <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800d32a:	e590      	b.n	800ce4e <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800d32c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d32e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800d330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d332:	68db      	ldr	r3, [r3, #12]
 800d334:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800d336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d338:	7f1b      	ldrb	r3, [r3, #28]
 800d33a:	3301      	adds	r3, #1
 800d33c:	b2da      	uxtb	r2, r3
 800d33e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d340:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800d342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d344:	7f1a      	ldrb	r2, [r3, #28]
 800d346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d348:	7f5b      	ldrb	r3, [r3, #29]
 800d34a:	429a      	cmp	r2, r3
 800d34c:	d325      	bcc.n	800d39a <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800d34e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d350:	2200      	movs	r2, #0
 800d352:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800d354:	4b1e      	ldr	r3, [pc, #120]	; (800d3d0 <tcp_slowtmr+0x5a4>)
 800d356:	2200      	movs	r2, #0
 800d358:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800d35a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d35c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d360:	2b00      	cmp	r3, #0
 800d362:	d00b      	beq.n	800d37c <tcp_slowtmr+0x550>
 800d364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d366:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d36a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d36c:	6912      	ldr	r2, [r2, #16]
 800d36e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d370:	4610      	mov	r0, r2
 800d372:	4798      	blx	r3
 800d374:	4603      	mov	r3, r0
 800d376:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800d37a:	e002      	b.n	800d382 <tcp_slowtmr+0x556>
 800d37c:	2300      	movs	r3, #0
 800d37e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800d382:	4b13      	ldr	r3, [pc, #76]	; (800d3d0 <tcp_slowtmr+0x5a4>)
 800d384:	781b      	ldrb	r3, [r3, #0]
 800d386:	2b00      	cmp	r3, #0
 800d388:	d000      	beq.n	800d38c <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 800d38a:	e560      	b.n	800ce4e <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800d38c:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800d390:	2b00      	cmp	r3, #0
 800d392:	d102      	bne.n	800d39a <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800d394:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d396:	f003 fb7b 	bl	8010a90 <tcp_output>
  while (pcb != NULL) {
 800d39a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	f47f ad5c 	bne.w	800ce5a <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800d3a2:	2300      	movs	r3, #0
 800d3a4:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800d3a6:	4b0b      	ldr	r3, [pc, #44]	; (800d3d4 <tcp_slowtmr+0x5a8>)
 800d3a8:	681b      	ldr	r3, [r3, #0]
 800d3aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800d3ac:	e067      	b.n	800d47e <tcp_slowtmr+0x652>
 800d3ae:	bf00      	nop
 800d3b0:	200072a4 	.word	0x200072a4
 800d3b4:	10624dd3 	.word	0x10624dd3
 800d3b8:	000124f8 	.word	0x000124f8
 800d3bc:	200072a0 	.word	0x200072a0
 800d3c0:	080163e8 	.word	0x080163e8
 800d3c4:	08016820 	.word	0x08016820
 800d3c8:	0801642c 	.word	0x0801642c
 800d3cc:	0801684c 	.word	0x0801684c
 800d3d0:	2000729c 	.word	0x2000729c
 800d3d4:	200072b0 	.word	0x200072b0
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800d3d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3da:	7d1b      	ldrb	r3, [r3, #20]
 800d3dc:	2b0a      	cmp	r3, #10
 800d3de:	d006      	beq.n	800d3ee <tcp_slowtmr+0x5c2>
 800d3e0:	4b2b      	ldr	r3, [pc, #172]	; (800d490 <tcp_slowtmr+0x664>)
 800d3e2:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800d3e6:	492b      	ldr	r1, [pc, #172]	; (800d494 <tcp_slowtmr+0x668>)
 800d3e8:	482b      	ldr	r0, [pc, #172]	; (800d498 <tcp_slowtmr+0x66c>)
 800d3ea:	f007 f8ab 	bl	8014544 <iprintf>
    pcb_remove = 0;
 800d3ee:	2300      	movs	r3, #0
 800d3f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800d3f4:	4b29      	ldr	r3, [pc, #164]	; (800d49c <tcp_slowtmr+0x670>)
 800d3f6:	681a      	ldr	r2, [r3, #0]
 800d3f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3fa:	6a1b      	ldr	r3, [r3, #32]
 800d3fc:	1ad3      	subs	r3, r2, r3
 800d3fe:	2bf0      	cmp	r3, #240	; 0xf0
 800d400:	d904      	bls.n	800d40c <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800d402:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d406:	3301      	adds	r3, #1
 800d408:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800d40c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d410:	2b00      	cmp	r3, #0
 800d412:	d02f      	beq.n	800d474 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800d414:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d416:	f000 fb2b 	bl	800da70 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800d41a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d010      	beq.n	800d442 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800d420:	4b1f      	ldr	r3, [pc, #124]	; (800d4a0 <tcp_slowtmr+0x674>)
 800d422:	681b      	ldr	r3, [r3, #0]
 800d424:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d426:	429a      	cmp	r2, r3
 800d428:	d106      	bne.n	800d438 <tcp_slowtmr+0x60c>
 800d42a:	4b19      	ldr	r3, [pc, #100]	; (800d490 <tcp_slowtmr+0x664>)
 800d42c:	f240 52af 	movw	r2, #1455	; 0x5af
 800d430:	491c      	ldr	r1, [pc, #112]	; (800d4a4 <tcp_slowtmr+0x678>)
 800d432:	4819      	ldr	r0, [pc, #100]	; (800d498 <tcp_slowtmr+0x66c>)
 800d434:	f007 f886 	bl	8014544 <iprintf>
        prev->next = pcb->next;
 800d438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d43a:	68da      	ldr	r2, [r3, #12]
 800d43c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d43e:	60da      	str	r2, [r3, #12]
 800d440:	e00f      	b.n	800d462 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800d442:	4b17      	ldr	r3, [pc, #92]	; (800d4a0 <tcp_slowtmr+0x674>)
 800d444:	681b      	ldr	r3, [r3, #0]
 800d446:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d448:	429a      	cmp	r2, r3
 800d44a:	d006      	beq.n	800d45a <tcp_slowtmr+0x62e>
 800d44c:	4b10      	ldr	r3, [pc, #64]	; (800d490 <tcp_slowtmr+0x664>)
 800d44e:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800d452:	4915      	ldr	r1, [pc, #84]	; (800d4a8 <tcp_slowtmr+0x67c>)
 800d454:	4810      	ldr	r0, [pc, #64]	; (800d498 <tcp_slowtmr+0x66c>)
 800d456:	f007 f875 	bl	8014544 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800d45a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d45c:	68db      	ldr	r3, [r3, #12]
 800d45e:	4a10      	ldr	r2, [pc, #64]	; (800d4a0 <tcp_slowtmr+0x674>)
 800d460:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800d462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d464:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800d466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d468:	68db      	ldr	r3, [r3, #12]
 800d46a:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800d46c:	69f8      	ldr	r0, [r7, #28]
 800d46e:	f7ff f93f 	bl	800c6f0 <tcp_free>
 800d472:	e004      	b.n	800d47e <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800d474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d476:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800d478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d47a:	68db      	ldr	r3, [r3, #12]
 800d47c:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800d47e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d480:	2b00      	cmp	r3, #0
 800d482:	d1a9      	bne.n	800d3d8 <tcp_slowtmr+0x5ac>
    }
  }
}
 800d484:	bf00      	nop
 800d486:	bf00      	nop
 800d488:	3730      	adds	r7, #48	; 0x30
 800d48a:	46bd      	mov	sp, r7
 800d48c:	bdb0      	pop	{r4, r5, r7, pc}
 800d48e:	bf00      	nop
 800d490:	080163e8 	.word	0x080163e8
 800d494:	08016878 	.word	0x08016878
 800d498:	0801642c 	.word	0x0801642c
 800d49c:	200072a4 	.word	0x200072a4
 800d4a0:	200072b0 	.word	0x200072b0
 800d4a4:	080168a8 	.word	0x080168a8
 800d4a8:	080168d0 	.word	0x080168d0

0800d4ac <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800d4ac:	b580      	push	{r7, lr}
 800d4ae:	b082      	sub	sp, #8
 800d4b0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800d4b2:	4b2d      	ldr	r3, [pc, #180]	; (800d568 <tcp_fasttmr+0xbc>)
 800d4b4:	781b      	ldrb	r3, [r3, #0]
 800d4b6:	3301      	adds	r3, #1
 800d4b8:	b2da      	uxtb	r2, r3
 800d4ba:	4b2b      	ldr	r3, [pc, #172]	; (800d568 <tcp_fasttmr+0xbc>)
 800d4bc:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800d4be:	4b2b      	ldr	r3, [pc, #172]	; (800d56c <tcp_fasttmr+0xc0>)
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800d4c4:	e048      	b.n	800d558 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	7f9a      	ldrb	r2, [r3, #30]
 800d4ca:	4b27      	ldr	r3, [pc, #156]	; (800d568 <tcp_fasttmr+0xbc>)
 800d4cc:	781b      	ldrb	r3, [r3, #0]
 800d4ce:	429a      	cmp	r2, r3
 800d4d0:	d03f      	beq.n	800d552 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800d4d2:	4b25      	ldr	r3, [pc, #148]	; (800d568 <tcp_fasttmr+0xbc>)
 800d4d4:	781a      	ldrb	r2, [r3, #0]
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	8b5b      	ldrh	r3, [r3, #26]
 800d4de:	f003 0301 	and.w	r3, r3, #1
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d010      	beq.n	800d508 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	8b5b      	ldrh	r3, [r3, #26]
 800d4ea:	f043 0302 	orr.w	r3, r3, #2
 800d4ee:	b29a      	uxth	r2, r3
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800d4f4:	6878      	ldr	r0, [r7, #4]
 800d4f6:	f003 facb 	bl	8010a90 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	8b5b      	ldrh	r3, [r3, #26]
 800d4fe:	f023 0303 	bic.w	r3, r3, #3
 800d502:	b29a      	uxth	r2, r3
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	8b5b      	ldrh	r3, [r3, #26]
 800d50c:	f003 0308 	and.w	r3, r3, #8
 800d510:	2b00      	cmp	r3, #0
 800d512:	d009      	beq.n	800d528 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	8b5b      	ldrh	r3, [r3, #26]
 800d518:	f023 0308 	bic.w	r3, r3, #8
 800d51c:	b29a      	uxth	r2, r3
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800d522:	6878      	ldr	r0, [r7, #4]
 800d524:	f7ff fa78 	bl	800ca18 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	68db      	ldr	r3, [r3, #12]
 800d52c:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d532:	2b00      	cmp	r3, #0
 800d534:	d00a      	beq.n	800d54c <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800d536:	4b0e      	ldr	r3, [pc, #56]	; (800d570 <tcp_fasttmr+0xc4>)
 800d538:	2200      	movs	r2, #0
 800d53a:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800d53c:	6878      	ldr	r0, [r7, #4]
 800d53e:	f000 f819 	bl	800d574 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800d542:	4b0b      	ldr	r3, [pc, #44]	; (800d570 <tcp_fasttmr+0xc4>)
 800d544:	781b      	ldrb	r3, [r3, #0]
 800d546:	2b00      	cmp	r3, #0
 800d548:	d000      	beq.n	800d54c <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800d54a:	e7b8      	b.n	800d4be <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800d54c:	683b      	ldr	r3, [r7, #0]
 800d54e:	607b      	str	r3, [r7, #4]
 800d550:	e002      	b.n	800d558 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	68db      	ldr	r3, [r3, #12]
 800d556:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	d1b3      	bne.n	800d4c6 <tcp_fasttmr+0x1a>
    }
  }
}
 800d55e:	bf00      	nop
 800d560:	bf00      	nop
 800d562:	3708      	adds	r7, #8
 800d564:	46bd      	mov	sp, r7
 800d566:	bd80      	pop	{r7, pc}
 800d568:	200000e6 	.word	0x200000e6
 800d56c:	200072a0 	.word	0x200072a0
 800d570:	2000729c 	.word	0x2000729c

0800d574 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800d574:	b590      	push	{r4, r7, lr}
 800d576:	b085      	sub	sp, #20
 800d578:	af00      	add	r7, sp, #0
 800d57a:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d109      	bne.n	800d596 <tcp_process_refused_data+0x22>
 800d582:	4b37      	ldr	r3, [pc, #220]	; (800d660 <tcp_process_refused_data+0xec>)
 800d584:	f240 6209 	movw	r2, #1545	; 0x609
 800d588:	4936      	ldr	r1, [pc, #216]	; (800d664 <tcp_process_refused_data+0xf0>)
 800d58a:	4837      	ldr	r0, [pc, #220]	; (800d668 <tcp_process_refused_data+0xf4>)
 800d58c:	f006 ffda 	bl	8014544 <iprintf>
 800d590:	f06f 030f 	mvn.w	r3, #15
 800d594:	e060      	b.n	800d658 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d59a:	7b5b      	ldrb	r3, [r3, #13]
 800d59c:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d5a2:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	2200      	movs	r2, #0
 800d5a8:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	d00b      	beq.n	800d5cc <tcp_process_refused_data+0x58>
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	6918      	ldr	r0, [r3, #16]
 800d5be:	2300      	movs	r3, #0
 800d5c0:	68ba      	ldr	r2, [r7, #8]
 800d5c2:	6879      	ldr	r1, [r7, #4]
 800d5c4:	47a0      	blx	r4
 800d5c6:	4603      	mov	r3, r0
 800d5c8:	73fb      	strb	r3, [r7, #15]
 800d5ca:	e007      	b.n	800d5dc <tcp_process_refused_data+0x68>
 800d5cc:	2300      	movs	r3, #0
 800d5ce:	68ba      	ldr	r2, [r7, #8]
 800d5d0:	6879      	ldr	r1, [r7, #4]
 800d5d2:	2000      	movs	r0, #0
 800d5d4:	f000 f8a4 	bl	800d720 <tcp_recv_null>
 800d5d8:	4603      	mov	r3, r0
 800d5da:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800d5dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d5e0:	2b00      	cmp	r3, #0
 800d5e2:	d12a      	bne.n	800d63a <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800d5e4:	7bbb      	ldrb	r3, [r7, #14]
 800d5e6:	f003 0320 	and.w	r3, r3, #32
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	d033      	beq.n	800d656 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d5f2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800d5f6:	d005      	beq.n	800d604 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d5fc:	3301      	adds	r3, #1
 800d5fe:	b29a      	uxth	r2, r3
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	d00b      	beq.n	800d626 <tcp_process_refused_data+0xb2>
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	6918      	ldr	r0, [r3, #16]
 800d618:	2300      	movs	r3, #0
 800d61a:	2200      	movs	r2, #0
 800d61c:	6879      	ldr	r1, [r7, #4]
 800d61e:	47a0      	blx	r4
 800d620:	4603      	mov	r3, r0
 800d622:	73fb      	strb	r3, [r7, #15]
 800d624:	e001      	b.n	800d62a <tcp_process_refused_data+0xb6>
 800d626:	2300      	movs	r3, #0
 800d628:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800d62a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d62e:	f113 0f0d 	cmn.w	r3, #13
 800d632:	d110      	bne.n	800d656 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800d634:	f06f 030c 	mvn.w	r3, #12
 800d638:	e00e      	b.n	800d658 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800d63a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d63e:	f113 0f0d 	cmn.w	r3, #13
 800d642:	d102      	bne.n	800d64a <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800d644:	f06f 030c 	mvn.w	r3, #12
 800d648:	e006      	b.n	800d658 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	68ba      	ldr	r2, [r7, #8]
 800d64e:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800d650:	f06f 0304 	mvn.w	r3, #4
 800d654:	e000      	b.n	800d658 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800d656:	2300      	movs	r3, #0
}
 800d658:	4618      	mov	r0, r3
 800d65a:	3714      	adds	r7, #20
 800d65c:	46bd      	mov	sp, r7
 800d65e:	bd90      	pop	{r4, r7, pc}
 800d660:	080163e8 	.word	0x080163e8
 800d664:	080168f8 	.word	0x080168f8
 800d668:	0801642c 	.word	0x0801642c

0800d66c <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800d66c:	b580      	push	{r7, lr}
 800d66e:	b084      	sub	sp, #16
 800d670:	af00      	add	r7, sp, #0
 800d672:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800d674:	e007      	b.n	800d686 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	681b      	ldr	r3, [r3, #0]
 800d67a:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800d67c:	6878      	ldr	r0, [r7, #4]
 800d67e:	f000 f80a 	bl	800d696 <tcp_seg_free>
    seg = next;
 800d682:	68fb      	ldr	r3, [r7, #12]
 800d684:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d1f4      	bne.n	800d676 <tcp_segs_free+0xa>
  }
}
 800d68c:	bf00      	nop
 800d68e:	bf00      	nop
 800d690:	3710      	adds	r7, #16
 800d692:	46bd      	mov	sp, r7
 800d694:	bd80      	pop	{r7, pc}

0800d696 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800d696:	b580      	push	{r7, lr}
 800d698:	b082      	sub	sp, #8
 800d69a:	af00      	add	r7, sp, #0
 800d69c:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	d00c      	beq.n	800d6be <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	685b      	ldr	r3, [r3, #4]
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d004      	beq.n	800d6b6 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	685b      	ldr	r3, [r3, #4]
 800d6b0:	4618      	mov	r0, r3
 800d6b2:	f7fe fd7d 	bl	800c1b0 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800d6b6:	6879      	ldr	r1, [r7, #4]
 800d6b8:	2003      	movs	r0, #3
 800d6ba:	f7fd ff87 	bl	800b5cc <memp_free>
  }
}
 800d6be:	bf00      	nop
 800d6c0:	3708      	adds	r7, #8
 800d6c2:	46bd      	mov	sp, r7
 800d6c4:	bd80      	pop	{r7, pc}
	...

0800d6c8 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800d6c8:	b580      	push	{r7, lr}
 800d6ca:	b084      	sub	sp, #16
 800d6cc:	af00      	add	r7, sp, #0
 800d6ce:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	d106      	bne.n	800d6e4 <tcp_seg_copy+0x1c>
 800d6d6:	4b0f      	ldr	r3, [pc, #60]	; (800d714 <tcp_seg_copy+0x4c>)
 800d6d8:	f240 6282 	movw	r2, #1666	; 0x682
 800d6dc:	490e      	ldr	r1, [pc, #56]	; (800d718 <tcp_seg_copy+0x50>)
 800d6de:	480f      	ldr	r0, [pc, #60]	; (800d71c <tcp_seg_copy+0x54>)
 800d6e0:	f006 ff30 	bl	8014544 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800d6e4:	2003      	movs	r0, #3
 800d6e6:	f7fd ff25 	bl	800b534 <memp_malloc>
 800d6ea:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800d6ec:	68fb      	ldr	r3, [r7, #12]
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	d101      	bne.n	800d6f6 <tcp_seg_copy+0x2e>
    return NULL;
 800d6f2:	2300      	movs	r3, #0
 800d6f4:	e00a      	b.n	800d70c <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800d6f6:	2210      	movs	r2, #16
 800d6f8:	6879      	ldr	r1, [r7, #4]
 800d6fa:	68f8      	ldr	r0, [r7, #12]
 800d6fc:	f006 fef2 	bl	80144e4 <memcpy>
  pbuf_ref(cseg->p);
 800d700:	68fb      	ldr	r3, [r7, #12]
 800d702:	685b      	ldr	r3, [r3, #4]
 800d704:	4618      	mov	r0, r3
 800d706:	f7fe fdf3 	bl	800c2f0 <pbuf_ref>
  return cseg;
 800d70a:	68fb      	ldr	r3, [r7, #12]
}
 800d70c:	4618      	mov	r0, r3
 800d70e:	3710      	adds	r7, #16
 800d710:	46bd      	mov	sp, r7
 800d712:	bd80      	pop	{r7, pc}
 800d714:	080163e8 	.word	0x080163e8
 800d718:	0801693c 	.word	0x0801693c
 800d71c:	0801642c 	.word	0x0801642c

0800d720 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800d720:	b580      	push	{r7, lr}
 800d722:	b084      	sub	sp, #16
 800d724:	af00      	add	r7, sp, #0
 800d726:	60f8      	str	r0, [r7, #12]
 800d728:	60b9      	str	r1, [r7, #8]
 800d72a:	607a      	str	r2, [r7, #4]
 800d72c:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800d72e:	68bb      	ldr	r3, [r7, #8]
 800d730:	2b00      	cmp	r3, #0
 800d732:	d109      	bne.n	800d748 <tcp_recv_null+0x28>
 800d734:	4b12      	ldr	r3, [pc, #72]	; (800d780 <tcp_recv_null+0x60>)
 800d736:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800d73a:	4912      	ldr	r1, [pc, #72]	; (800d784 <tcp_recv_null+0x64>)
 800d73c:	4812      	ldr	r0, [pc, #72]	; (800d788 <tcp_recv_null+0x68>)
 800d73e:	f006 ff01 	bl	8014544 <iprintf>
 800d742:	f06f 030f 	mvn.w	r3, #15
 800d746:	e016      	b.n	800d776 <tcp_recv_null+0x56>

  if (p != NULL) {
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	d009      	beq.n	800d762 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	891b      	ldrh	r3, [r3, #8]
 800d752:	4619      	mov	r1, r3
 800d754:	68b8      	ldr	r0, [r7, #8]
 800d756:	f7ff fb19 	bl	800cd8c <tcp_recved>
    pbuf_free(p);
 800d75a:	6878      	ldr	r0, [r7, #4]
 800d75c:	f7fe fd28 	bl	800c1b0 <pbuf_free>
 800d760:	e008      	b.n	800d774 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800d762:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d766:	2b00      	cmp	r3, #0
 800d768:	d104      	bne.n	800d774 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800d76a:	68b8      	ldr	r0, [r7, #8]
 800d76c:	f7ff f9be 	bl	800caec <tcp_close>
 800d770:	4603      	mov	r3, r0
 800d772:	e000      	b.n	800d776 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800d774:	2300      	movs	r3, #0
}
 800d776:	4618      	mov	r0, r3
 800d778:	3710      	adds	r7, #16
 800d77a:	46bd      	mov	sp, r7
 800d77c:	bd80      	pop	{r7, pc}
 800d77e:	bf00      	nop
 800d780:	080163e8 	.word	0x080163e8
 800d784:	08016958 	.word	0x08016958
 800d788:	0801642c 	.word	0x0801642c

0800d78c <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800d78c:	b580      	push	{r7, lr}
 800d78e:	b086      	sub	sp, #24
 800d790:	af00      	add	r7, sp, #0
 800d792:	4603      	mov	r3, r0
 800d794:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800d796:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	db01      	blt.n	800d7a2 <tcp_kill_prio+0x16>
 800d79e:	79fb      	ldrb	r3, [r7, #7]
 800d7a0:	e000      	b.n	800d7a4 <tcp_kill_prio+0x18>
 800d7a2:	237f      	movs	r3, #127	; 0x7f
 800d7a4:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800d7a6:	7afb      	ldrb	r3, [r7, #11]
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d034      	beq.n	800d816 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800d7ac:	7afb      	ldrb	r3, [r7, #11]
 800d7ae:	3b01      	subs	r3, #1
 800d7b0:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800d7b2:	2300      	movs	r3, #0
 800d7b4:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800d7b6:	2300      	movs	r3, #0
 800d7b8:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d7ba:	4b19      	ldr	r3, [pc, #100]	; (800d820 <tcp_kill_prio+0x94>)
 800d7bc:	681b      	ldr	r3, [r3, #0]
 800d7be:	617b      	str	r3, [r7, #20]
 800d7c0:	e01f      	b.n	800d802 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800d7c2:	697b      	ldr	r3, [r7, #20]
 800d7c4:	7d5b      	ldrb	r3, [r3, #21]
 800d7c6:	7afa      	ldrb	r2, [r7, #11]
 800d7c8:	429a      	cmp	r2, r3
 800d7ca:	d80c      	bhi.n	800d7e6 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800d7cc:	697b      	ldr	r3, [r7, #20]
 800d7ce:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800d7d0:	7afa      	ldrb	r2, [r7, #11]
 800d7d2:	429a      	cmp	r2, r3
 800d7d4:	d112      	bne.n	800d7fc <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800d7d6:	4b13      	ldr	r3, [pc, #76]	; (800d824 <tcp_kill_prio+0x98>)
 800d7d8:	681a      	ldr	r2, [r3, #0]
 800d7da:	697b      	ldr	r3, [r7, #20]
 800d7dc:	6a1b      	ldr	r3, [r3, #32]
 800d7de:	1ad3      	subs	r3, r2, r3
 800d7e0:	68fa      	ldr	r2, [r7, #12]
 800d7e2:	429a      	cmp	r2, r3
 800d7e4:	d80a      	bhi.n	800d7fc <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800d7e6:	4b0f      	ldr	r3, [pc, #60]	; (800d824 <tcp_kill_prio+0x98>)
 800d7e8:	681a      	ldr	r2, [r3, #0]
 800d7ea:	697b      	ldr	r3, [r7, #20]
 800d7ec:	6a1b      	ldr	r3, [r3, #32]
 800d7ee:	1ad3      	subs	r3, r2, r3
 800d7f0:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800d7f2:	697b      	ldr	r3, [r7, #20]
 800d7f4:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800d7f6:	697b      	ldr	r3, [r7, #20]
 800d7f8:	7d5b      	ldrb	r3, [r3, #21]
 800d7fa:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d7fc:	697b      	ldr	r3, [r7, #20]
 800d7fe:	68db      	ldr	r3, [r3, #12]
 800d800:	617b      	str	r3, [r7, #20]
 800d802:	697b      	ldr	r3, [r7, #20]
 800d804:	2b00      	cmp	r3, #0
 800d806:	d1dc      	bne.n	800d7c2 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800d808:	693b      	ldr	r3, [r7, #16]
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	d004      	beq.n	800d818 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800d80e:	6938      	ldr	r0, [r7, #16]
 800d810:	f7ff fa56 	bl	800ccc0 <tcp_abort>
 800d814:	e000      	b.n	800d818 <tcp_kill_prio+0x8c>
    return;
 800d816:	bf00      	nop
  }
}
 800d818:	3718      	adds	r7, #24
 800d81a:	46bd      	mov	sp, r7
 800d81c:	bd80      	pop	{r7, pc}
 800d81e:	bf00      	nop
 800d820:	200072a0 	.word	0x200072a0
 800d824:	200072a4 	.word	0x200072a4

0800d828 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800d828:	b580      	push	{r7, lr}
 800d82a:	b086      	sub	sp, #24
 800d82c:	af00      	add	r7, sp, #0
 800d82e:	4603      	mov	r3, r0
 800d830:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800d832:	79fb      	ldrb	r3, [r7, #7]
 800d834:	2b08      	cmp	r3, #8
 800d836:	d009      	beq.n	800d84c <tcp_kill_state+0x24>
 800d838:	79fb      	ldrb	r3, [r7, #7]
 800d83a:	2b09      	cmp	r3, #9
 800d83c:	d006      	beq.n	800d84c <tcp_kill_state+0x24>
 800d83e:	4b1a      	ldr	r3, [pc, #104]	; (800d8a8 <tcp_kill_state+0x80>)
 800d840:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800d844:	4919      	ldr	r1, [pc, #100]	; (800d8ac <tcp_kill_state+0x84>)
 800d846:	481a      	ldr	r0, [pc, #104]	; (800d8b0 <tcp_kill_state+0x88>)
 800d848:	f006 fe7c 	bl	8014544 <iprintf>

  inactivity = 0;
 800d84c:	2300      	movs	r3, #0
 800d84e:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800d850:	2300      	movs	r3, #0
 800d852:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d854:	4b17      	ldr	r3, [pc, #92]	; (800d8b4 <tcp_kill_state+0x8c>)
 800d856:	681b      	ldr	r3, [r3, #0]
 800d858:	617b      	str	r3, [r7, #20]
 800d85a:	e017      	b.n	800d88c <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800d85c:	697b      	ldr	r3, [r7, #20]
 800d85e:	7d1b      	ldrb	r3, [r3, #20]
 800d860:	79fa      	ldrb	r2, [r7, #7]
 800d862:	429a      	cmp	r2, r3
 800d864:	d10f      	bne.n	800d886 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800d866:	4b14      	ldr	r3, [pc, #80]	; (800d8b8 <tcp_kill_state+0x90>)
 800d868:	681a      	ldr	r2, [r3, #0]
 800d86a:	697b      	ldr	r3, [r7, #20]
 800d86c:	6a1b      	ldr	r3, [r3, #32]
 800d86e:	1ad3      	subs	r3, r2, r3
 800d870:	68fa      	ldr	r2, [r7, #12]
 800d872:	429a      	cmp	r2, r3
 800d874:	d807      	bhi.n	800d886 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800d876:	4b10      	ldr	r3, [pc, #64]	; (800d8b8 <tcp_kill_state+0x90>)
 800d878:	681a      	ldr	r2, [r3, #0]
 800d87a:	697b      	ldr	r3, [r7, #20]
 800d87c:	6a1b      	ldr	r3, [r3, #32]
 800d87e:	1ad3      	subs	r3, r2, r3
 800d880:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800d882:	697b      	ldr	r3, [r7, #20]
 800d884:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d886:	697b      	ldr	r3, [r7, #20]
 800d888:	68db      	ldr	r3, [r3, #12]
 800d88a:	617b      	str	r3, [r7, #20]
 800d88c:	697b      	ldr	r3, [r7, #20]
 800d88e:	2b00      	cmp	r3, #0
 800d890:	d1e4      	bne.n	800d85c <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800d892:	693b      	ldr	r3, [r7, #16]
 800d894:	2b00      	cmp	r3, #0
 800d896:	d003      	beq.n	800d8a0 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800d898:	2100      	movs	r1, #0
 800d89a:	6938      	ldr	r0, [r7, #16]
 800d89c:	f7ff f952 	bl	800cb44 <tcp_abandon>
  }
}
 800d8a0:	bf00      	nop
 800d8a2:	3718      	adds	r7, #24
 800d8a4:	46bd      	mov	sp, r7
 800d8a6:	bd80      	pop	{r7, pc}
 800d8a8:	080163e8 	.word	0x080163e8
 800d8ac:	08016974 	.word	0x08016974
 800d8b0:	0801642c 	.word	0x0801642c
 800d8b4:	200072a0 	.word	0x200072a0
 800d8b8:	200072a4 	.word	0x200072a4

0800d8bc <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800d8bc:	b580      	push	{r7, lr}
 800d8be:	b084      	sub	sp, #16
 800d8c0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800d8c2:	2300      	movs	r3, #0
 800d8c4:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800d8c6:	2300      	movs	r3, #0
 800d8c8:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d8ca:	4b12      	ldr	r3, [pc, #72]	; (800d914 <tcp_kill_timewait+0x58>)
 800d8cc:	681b      	ldr	r3, [r3, #0]
 800d8ce:	60fb      	str	r3, [r7, #12]
 800d8d0:	e012      	b.n	800d8f8 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800d8d2:	4b11      	ldr	r3, [pc, #68]	; (800d918 <tcp_kill_timewait+0x5c>)
 800d8d4:	681a      	ldr	r2, [r3, #0]
 800d8d6:	68fb      	ldr	r3, [r7, #12]
 800d8d8:	6a1b      	ldr	r3, [r3, #32]
 800d8da:	1ad3      	subs	r3, r2, r3
 800d8dc:	687a      	ldr	r2, [r7, #4]
 800d8de:	429a      	cmp	r2, r3
 800d8e0:	d807      	bhi.n	800d8f2 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800d8e2:	4b0d      	ldr	r3, [pc, #52]	; (800d918 <tcp_kill_timewait+0x5c>)
 800d8e4:	681a      	ldr	r2, [r3, #0]
 800d8e6:	68fb      	ldr	r3, [r7, #12]
 800d8e8:	6a1b      	ldr	r3, [r3, #32]
 800d8ea:	1ad3      	subs	r3, r2, r3
 800d8ec:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800d8ee:	68fb      	ldr	r3, [r7, #12]
 800d8f0:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d8f2:	68fb      	ldr	r3, [r7, #12]
 800d8f4:	68db      	ldr	r3, [r3, #12]
 800d8f6:	60fb      	str	r3, [r7, #12]
 800d8f8:	68fb      	ldr	r3, [r7, #12]
 800d8fa:	2b00      	cmp	r3, #0
 800d8fc:	d1e9      	bne.n	800d8d2 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800d8fe:	68bb      	ldr	r3, [r7, #8]
 800d900:	2b00      	cmp	r3, #0
 800d902:	d002      	beq.n	800d90a <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800d904:	68b8      	ldr	r0, [r7, #8]
 800d906:	f7ff f9db 	bl	800ccc0 <tcp_abort>
  }
}
 800d90a:	bf00      	nop
 800d90c:	3710      	adds	r7, #16
 800d90e:	46bd      	mov	sp, r7
 800d910:	bd80      	pop	{r7, pc}
 800d912:	bf00      	nop
 800d914:	200072b0 	.word	0x200072b0
 800d918:	200072a4 	.word	0x200072a4

0800d91c <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800d91c:	b580      	push	{r7, lr}
 800d91e:	b082      	sub	sp, #8
 800d920:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800d922:	4b10      	ldr	r3, [pc, #64]	; (800d964 <tcp_handle_closepend+0x48>)
 800d924:	681b      	ldr	r3, [r3, #0]
 800d926:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800d928:	e014      	b.n	800d954 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	68db      	ldr	r3, [r3, #12]
 800d92e:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	8b5b      	ldrh	r3, [r3, #26]
 800d934:	f003 0308 	and.w	r3, r3, #8
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d009      	beq.n	800d950 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	8b5b      	ldrh	r3, [r3, #26]
 800d940:	f023 0308 	bic.w	r3, r3, #8
 800d944:	b29a      	uxth	r2, r3
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800d94a:	6878      	ldr	r0, [r7, #4]
 800d94c:	f7ff f864 	bl	800ca18 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800d950:	683b      	ldr	r3, [r7, #0]
 800d952:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	2b00      	cmp	r3, #0
 800d958:	d1e7      	bne.n	800d92a <tcp_handle_closepend+0xe>
  }
}
 800d95a:	bf00      	nop
 800d95c:	bf00      	nop
 800d95e:	3708      	adds	r7, #8
 800d960:	46bd      	mov	sp, r7
 800d962:	bd80      	pop	{r7, pc}
 800d964:	200072a0 	.word	0x200072a0

0800d968 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800d968:	b580      	push	{r7, lr}
 800d96a:	b084      	sub	sp, #16
 800d96c:	af00      	add	r7, sp, #0
 800d96e:	4603      	mov	r3, r0
 800d970:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d972:	2001      	movs	r0, #1
 800d974:	f7fd fdde 	bl	800b534 <memp_malloc>
 800d978:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800d97a:	68fb      	ldr	r3, [r7, #12]
 800d97c:	2b00      	cmp	r3, #0
 800d97e:	d126      	bne.n	800d9ce <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800d980:	f7ff ffcc 	bl	800d91c <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800d984:	f7ff ff9a 	bl	800d8bc <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d988:	2001      	movs	r0, #1
 800d98a:	f7fd fdd3 	bl	800b534 <memp_malloc>
 800d98e:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800d990:	68fb      	ldr	r3, [r7, #12]
 800d992:	2b00      	cmp	r3, #0
 800d994:	d11b      	bne.n	800d9ce <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800d996:	2009      	movs	r0, #9
 800d998:	f7ff ff46 	bl	800d828 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d99c:	2001      	movs	r0, #1
 800d99e:	f7fd fdc9 	bl	800b534 <memp_malloc>
 800d9a2:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800d9a4:	68fb      	ldr	r3, [r7, #12]
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	d111      	bne.n	800d9ce <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800d9aa:	2008      	movs	r0, #8
 800d9ac:	f7ff ff3c 	bl	800d828 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d9b0:	2001      	movs	r0, #1
 800d9b2:	f7fd fdbf 	bl	800b534 <memp_malloc>
 800d9b6:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800d9b8:	68fb      	ldr	r3, [r7, #12]
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	d107      	bne.n	800d9ce <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800d9be:	79fb      	ldrb	r3, [r7, #7]
 800d9c0:	4618      	mov	r0, r3
 800d9c2:	f7ff fee3 	bl	800d78c <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d9c6:	2001      	movs	r0, #1
 800d9c8:	f7fd fdb4 	bl	800b534 <memp_malloc>
 800d9cc:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800d9ce:	68fb      	ldr	r3, [r7, #12]
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	d03f      	beq.n	800da54 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800d9d4:	229c      	movs	r2, #156	; 0x9c
 800d9d6:	2100      	movs	r1, #0
 800d9d8:	68f8      	ldr	r0, [r7, #12]
 800d9da:	f006 fdab 	bl	8014534 <memset>
    pcb->prio = prio;
 800d9de:	68fb      	ldr	r3, [r7, #12]
 800d9e0:	79fa      	ldrb	r2, [r7, #7]
 800d9e2:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800d9e4:	68fb      	ldr	r3, [r7, #12]
 800d9e6:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800d9ea:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800d9ee:	68fb      	ldr	r3, [r7, #12]
 800d9f0:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800d9f4:	855a      	strh	r2, [r3, #42]	; 0x2a
 800d9f6:	68fb      	ldr	r3, [r7, #12]
 800d9f8:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800d9fa:	68fb      	ldr	r3, [r7, #12]
 800d9fc:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800d9fe:	68fb      	ldr	r3, [r7, #12]
 800da00:	22ff      	movs	r2, #255	; 0xff
 800da02:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800da04:	68fb      	ldr	r3, [r7, #12]
 800da06:	f44f 7206 	mov.w	r2, #536	; 0x218
 800da0a:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800da0c:	68fb      	ldr	r3, [r7, #12]
 800da0e:	2206      	movs	r2, #6
 800da10:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800da14:	68fb      	ldr	r3, [r7, #12]
 800da16:	2206      	movs	r2, #6
 800da18:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800da1a:	68fb      	ldr	r3, [r7, #12]
 800da1c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800da20:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800da22:	68fb      	ldr	r3, [r7, #12]
 800da24:	2201      	movs	r2, #1
 800da26:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800da2a:	4b0d      	ldr	r3, [pc, #52]	; (800da60 <tcp_alloc+0xf8>)
 800da2c:	681a      	ldr	r2, [r3, #0]
 800da2e:	68fb      	ldr	r3, [r7, #12]
 800da30:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800da32:	4b0c      	ldr	r3, [pc, #48]	; (800da64 <tcp_alloc+0xfc>)
 800da34:	781a      	ldrb	r2, [r3, #0]
 800da36:	68fb      	ldr	r3, [r7, #12]
 800da38:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800da3a:	68fb      	ldr	r3, [r7, #12]
 800da3c:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800da40:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800da44:	68fb      	ldr	r3, [r7, #12]
 800da46:	4a08      	ldr	r2, [pc, #32]	; (800da68 <tcp_alloc+0x100>)
 800da48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800da4c:	68fb      	ldr	r3, [r7, #12]
 800da4e:	4a07      	ldr	r2, [pc, #28]	; (800da6c <tcp_alloc+0x104>)
 800da50:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800da54:	68fb      	ldr	r3, [r7, #12]
}
 800da56:	4618      	mov	r0, r3
 800da58:	3710      	adds	r7, #16
 800da5a:	46bd      	mov	sp, r7
 800da5c:	bd80      	pop	{r7, pc}
 800da5e:	bf00      	nop
 800da60:	200072a4 	.word	0x200072a4
 800da64:	200000e6 	.word	0x200000e6
 800da68:	0800d721 	.word	0x0800d721
 800da6c:	006ddd00 	.word	0x006ddd00

0800da70 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800da70:	b580      	push	{r7, lr}
 800da72:	b082      	sub	sp, #8
 800da74:	af00      	add	r7, sp, #0
 800da76:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	2b00      	cmp	r3, #0
 800da7c:	d107      	bne.n	800da8e <tcp_pcb_purge+0x1e>
 800da7e:	4b21      	ldr	r3, [pc, #132]	; (800db04 <tcp_pcb_purge+0x94>)
 800da80:	f640 0251 	movw	r2, #2129	; 0x851
 800da84:	4920      	ldr	r1, [pc, #128]	; (800db08 <tcp_pcb_purge+0x98>)
 800da86:	4821      	ldr	r0, [pc, #132]	; (800db0c <tcp_pcb_purge+0x9c>)
 800da88:	f006 fd5c 	bl	8014544 <iprintf>
 800da8c:	e037      	b.n	800dafe <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	7d1b      	ldrb	r3, [r3, #20]
 800da92:	2b00      	cmp	r3, #0
 800da94:	d033      	beq.n	800dafe <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800da9a:	2b0a      	cmp	r3, #10
 800da9c:	d02f      	beq.n	800dafe <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800daa2:	2b01      	cmp	r3, #1
 800daa4:	d02b      	beq.n	800dafe <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800daaa:	2b00      	cmp	r3, #0
 800daac:	d007      	beq.n	800dabe <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dab2:	4618      	mov	r0, r3
 800dab4:	f7fe fb7c 	bl	800c1b0 <pbuf_free>
      pcb->refused_data = NULL;
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	2200      	movs	r2, #0
 800dabc:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	d002      	beq.n	800dacc <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800dac6:	6878      	ldr	r0, [r7, #4]
 800dac8:	f000 f986 	bl	800ddd8 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dad2:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dad8:	4618      	mov	r0, r3
 800dada:	f7ff fdc7 	bl	800d66c <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dae2:	4618      	mov	r0, r3
 800dae4:	f7ff fdc2 	bl	800d66c <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	2200      	movs	r2, #0
 800daec:	66da      	str	r2, [r3, #108]	; 0x6c
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	2200      	movs	r2, #0
 800dafa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800dafe:	3708      	adds	r7, #8
 800db00:	46bd      	mov	sp, r7
 800db02:	bd80      	pop	{r7, pc}
 800db04:	080163e8 	.word	0x080163e8
 800db08:	08016a34 	.word	0x08016a34
 800db0c:	0801642c 	.word	0x0801642c

0800db10 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800db10:	b580      	push	{r7, lr}
 800db12:	b084      	sub	sp, #16
 800db14:	af00      	add	r7, sp, #0
 800db16:	6078      	str	r0, [r7, #4]
 800db18:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800db1a:	683b      	ldr	r3, [r7, #0]
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d106      	bne.n	800db2e <tcp_pcb_remove+0x1e>
 800db20:	4b3e      	ldr	r3, [pc, #248]	; (800dc1c <tcp_pcb_remove+0x10c>)
 800db22:	f640 0283 	movw	r2, #2179	; 0x883
 800db26:	493e      	ldr	r1, [pc, #248]	; (800dc20 <tcp_pcb_remove+0x110>)
 800db28:	483e      	ldr	r0, [pc, #248]	; (800dc24 <tcp_pcb_remove+0x114>)
 800db2a:	f006 fd0b 	bl	8014544 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	2b00      	cmp	r3, #0
 800db32:	d106      	bne.n	800db42 <tcp_pcb_remove+0x32>
 800db34:	4b39      	ldr	r3, [pc, #228]	; (800dc1c <tcp_pcb_remove+0x10c>)
 800db36:	f640 0284 	movw	r2, #2180	; 0x884
 800db3a:	493b      	ldr	r1, [pc, #236]	; (800dc28 <tcp_pcb_remove+0x118>)
 800db3c:	4839      	ldr	r0, [pc, #228]	; (800dc24 <tcp_pcb_remove+0x114>)
 800db3e:	f006 fd01 	bl	8014544 <iprintf>

  TCP_RMV(pcblist, pcb);
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	681b      	ldr	r3, [r3, #0]
 800db46:	683a      	ldr	r2, [r7, #0]
 800db48:	429a      	cmp	r2, r3
 800db4a:	d105      	bne.n	800db58 <tcp_pcb_remove+0x48>
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	681b      	ldr	r3, [r3, #0]
 800db50:	68da      	ldr	r2, [r3, #12]
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	601a      	str	r2, [r3, #0]
 800db56:	e013      	b.n	800db80 <tcp_pcb_remove+0x70>
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	681b      	ldr	r3, [r3, #0]
 800db5c:	60fb      	str	r3, [r7, #12]
 800db5e:	e00c      	b.n	800db7a <tcp_pcb_remove+0x6a>
 800db60:	68fb      	ldr	r3, [r7, #12]
 800db62:	68db      	ldr	r3, [r3, #12]
 800db64:	683a      	ldr	r2, [r7, #0]
 800db66:	429a      	cmp	r2, r3
 800db68:	d104      	bne.n	800db74 <tcp_pcb_remove+0x64>
 800db6a:	683b      	ldr	r3, [r7, #0]
 800db6c:	68da      	ldr	r2, [r3, #12]
 800db6e:	68fb      	ldr	r3, [r7, #12]
 800db70:	60da      	str	r2, [r3, #12]
 800db72:	e005      	b.n	800db80 <tcp_pcb_remove+0x70>
 800db74:	68fb      	ldr	r3, [r7, #12]
 800db76:	68db      	ldr	r3, [r3, #12]
 800db78:	60fb      	str	r3, [r7, #12]
 800db7a:	68fb      	ldr	r3, [r7, #12]
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	d1ef      	bne.n	800db60 <tcp_pcb_remove+0x50>
 800db80:	683b      	ldr	r3, [r7, #0]
 800db82:	2200      	movs	r2, #0
 800db84:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800db86:	6838      	ldr	r0, [r7, #0]
 800db88:	f7ff ff72 	bl	800da70 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800db8c:	683b      	ldr	r3, [r7, #0]
 800db8e:	7d1b      	ldrb	r3, [r3, #20]
 800db90:	2b0a      	cmp	r3, #10
 800db92:	d013      	beq.n	800dbbc <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800db94:	683b      	ldr	r3, [r7, #0]
 800db96:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800db98:	2b01      	cmp	r3, #1
 800db9a:	d00f      	beq.n	800dbbc <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800db9c:	683b      	ldr	r3, [r7, #0]
 800db9e:	8b5b      	ldrh	r3, [r3, #26]
 800dba0:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	d009      	beq.n	800dbbc <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800dba8:	683b      	ldr	r3, [r7, #0]
 800dbaa:	8b5b      	ldrh	r3, [r3, #26]
 800dbac:	f043 0302 	orr.w	r3, r3, #2
 800dbb0:	b29a      	uxth	r2, r3
 800dbb2:	683b      	ldr	r3, [r7, #0]
 800dbb4:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800dbb6:	6838      	ldr	r0, [r7, #0]
 800dbb8:	f002 ff6a 	bl	8010a90 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800dbbc:	683b      	ldr	r3, [r7, #0]
 800dbbe:	7d1b      	ldrb	r3, [r3, #20]
 800dbc0:	2b01      	cmp	r3, #1
 800dbc2:	d020      	beq.n	800dc06 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800dbc4:	683b      	ldr	r3, [r7, #0]
 800dbc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	d006      	beq.n	800dbda <tcp_pcb_remove+0xca>
 800dbcc:	4b13      	ldr	r3, [pc, #76]	; (800dc1c <tcp_pcb_remove+0x10c>)
 800dbce:	f640 0293 	movw	r2, #2195	; 0x893
 800dbd2:	4916      	ldr	r1, [pc, #88]	; (800dc2c <tcp_pcb_remove+0x11c>)
 800dbd4:	4813      	ldr	r0, [pc, #76]	; (800dc24 <tcp_pcb_remove+0x114>)
 800dbd6:	f006 fcb5 	bl	8014544 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800dbda:	683b      	ldr	r3, [r7, #0]
 800dbdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	d006      	beq.n	800dbf0 <tcp_pcb_remove+0xe0>
 800dbe2:	4b0e      	ldr	r3, [pc, #56]	; (800dc1c <tcp_pcb_remove+0x10c>)
 800dbe4:	f640 0294 	movw	r2, #2196	; 0x894
 800dbe8:	4911      	ldr	r1, [pc, #68]	; (800dc30 <tcp_pcb_remove+0x120>)
 800dbea:	480e      	ldr	r0, [pc, #56]	; (800dc24 <tcp_pcb_remove+0x114>)
 800dbec:	f006 fcaa 	bl	8014544 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800dbf0:	683b      	ldr	r3, [r7, #0]
 800dbf2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	d006      	beq.n	800dc06 <tcp_pcb_remove+0xf6>
 800dbf8:	4b08      	ldr	r3, [pc, #32]	; (800dc1c <tcp_pcb_remove+0x10c>)
 800dbfa:	f640 0296 	movw	r2, #2198	; 0x896
 800dbfe:	490d      	ldr	r1, [pc, #52]	; (800dc34 <tcp_pcb_remove+0x124>)
 800dc00:	4808      	ldr	r0, [pc, #32]	; (800dc24 <tcp_pcb_remove+0x114>)
 800dc02:	f006 fc9f 	bl	8014544 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800dc06:	683b      	ldr	r3, [r7, #0]
 800dc08:	2200      	movs	r2, #0
 800dc0a:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800dc0c:	683b      	ldr	r3, [r7, #0]
 800dc0e:	2200      	movs	r2, #0
 800dc10:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800dc12:	bf00      	nop
 800dc14:	3710      	adds	r7, #16
 800dc16:	46bd      	mov	sp, r7
 800dc18:	bd80      	pop	{r7, pc}
 800dc1a:	bf00      	nop
 800dc1c:	080163e8 	.word	0x080163e8
 800dc20:	08016a50 	.word	0x08016a50
 800dc24:	0801642c 	.word	0x0801642c
 800dc28:	08016a6c 	.word	0x08016a6c
 800dc2c:	08016a8c 	.word	0x08016a8c
 800dc30:	08016aa4 	.word	0x08016aa4
 800dc34:	08016ac0 	.word	0x08016ac0

0800dc38 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800dc38:	b580      	push	{r7, lr}
 800dc3a:	b082      	sub	sp, #8
 800dc3c:	af00      	add	r7, sp, #0
 800dc3e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	2b00      	cmp	r3, #0
 800dc44:	d106      	bne.n	800dc54 <tcp_next_iss+0x1c>
 800dc46:	4b0a      	ldr	r3, [pc, #40]	; (800dc70 <tcp_next_iss+0x38>)
 800dc48:	f640 02af 	movw	r2, #2223	; 0x8af
 800dc4c:	4909      	ldr	r1, [pc, #36]	; (800dc74 <tcp_next_iss+0x3c>)
 800dc4e:	480a      	ldr	r0, [pc, #40]	; (800dc78 <tcp_next_iss+0x40>)
 800dc50:	f006 fc78 	bl	8014544 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800dc54:	4b09      	ldr	r3, [pc, #36]	; (800dc7c <tcp_next_iss+0x44>)
 800dc56:	681a      	ldr	r2, [r3, #0]
 800dc58:	4b09      	ldr	r3, [pc, #36]	; (800dc80 <tcp_next_iss+0x48>)
 800dc5a:	681b      	ldr	r3, [r3, #0]
 800dc5c:	4413      	add	r3, r2
 800dc5e:	4a07      	ldr	r2, [pc, #28]	; (800dc7c <tcp_next_iss+0x44>)
 800dc60:	6013      	str	r3, [r2, #0]
  return iss;
 800dc62:	4b06      	ldr	r3, [pc, #24]	; (800dc7c <tcp_next_iss+0x44>)
 800dc64:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800dc66:	4618      	mov	r0, r3
 800dc68:	3708      	adds	r7, #8
 800dc6a:	46bd      	mov	sp, r7
 800dc6c:	bd80      	pop	{r7, pc}
 800dc6e:	bf00      	nop
 800dc70:	080163e8 	.word	0x080163e8
 800dc74:	08016ad8 	.word	0x08016ad8
 800dc78:	0801642c 	.word	0x0801642c
 800dc7c:	2000000c 	.word	0x2000000c
 800dc80:	200072a4 	.word	0x200072a4

0800dc84 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800dc84:	b580      	push	{r7, lr}
 800dc86:	b086      	sub	sp, #24
 800dc88:	af00      	add	r7, sp, #0
 800dc8a:	4603      	mov	r3, r0
 800dc8c:	60b9      	str	r1, [r7, #8]
 800dc8e:	607a      	str	r2, [r7, #4]
 800dc90:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	d106      	bne.n	800dca6 <tcp_eff_send_mss_netif+0x22>
 800dc98:	4b14      	ldr	r3, [pc, #80]	; (800dcec <tcp_eff_send_mss_netif+0x68>)
 800dc9a:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800dc9e:	4914      	ldr	r1, [pc, #80]	; (800dcf0 <tcp_eff_send_mss_netif+0x6c>)
 800dca0:	4814      	ldr	r0, [pc, #80]	; (800dcf4 <tcp_eff_send_mss_netif+0x70>)
 800dca2:	f006 fc4f 	bl	8014544 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800dca6:	68bb      	ldr	r3, [r7, #8]
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	d101      	bne.n	800dcb0 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800dcac:	89fb      	ldrh	r3, [r7, #14]
 800dcae:	e019      	b.n	800dce4 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800dcb0:	68bb      	ldr	r3, [r7, #8]
 800dcb2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800dcb4:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800dcb6:	8afb      	ldrh	r3, [r7, #22]
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d012      	beq.n	800dce2 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800dcbc:	2328      	movs	r3, #40	; 0x28
 800dcbe:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800dcc0:	8afa      	ldrh	r2, [r7, #22]
 800dcc2:	8abb      	ldrh	r3, [r7, #20]
 800dcc4:	429a      	cmp	r2, r3
 800dcc6:	d904      	bls.n	800dcd2 <tcp_eff_send_mss_netif+0x4e>
 800dcc8:	8afa      	ldrh	r2, [r7, #22]
 800dcca:	8abb      	ldrh	r3, [r7, #20]
 800dccc:	1ad3      	subs	r3, r2, r3
 800dcce:	b29b      	uxth	r3, r3
 800dcd0:	e000      	b.n	800dcd4 <tcp_eff_send_mss_netif+0x50>
 800dcd2:	2300      	movs	r3, #0
 800dcd4:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800dcd6:	8a7a      	ldrh	r2, [r7, #18]
 800dcd8:	89fb      	ldrh	r3, [r7, #14]
 800dcda:	4293      	cmp	r3, r2
 800dcdc:	bf28      	it	cs
 800dcde:	4613      	movcs	r3, r2
 800dce0:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800dce2:	89fb      	ldrh	r3, [r7, #14]
}
 800dce4:	4618      	mov	r0, r3
 800dce6:	3718      	adds	r7, #24
 800dce8:	46bd      	mov	sp, r7
 800dcea:	bd80      	pop	{r7, pc}
 800dcec:	080163e8 	.word	0x080163e8
 800dcf0:	08016af4 	.word	0x08016af4
 800dcf4:	0801642c 	.word	0x0801642c

0800dcf8 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800dcf8:	b580      	push	{r7, lr}
 800dcfa:	b084      	sub	sp, #16
 800dcfc:	af00      	add	r7, sp, #0
 800dcfe:	6078      	str	r0, [r7, #4]
 800dd00:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800dd02:	683b      	ldr	r3, [r7, #0]
 800dd04:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	d119      	bne.n	800dd40 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800dd0c:	4b10      	ldr	r3, [pc, #64]	; (800dd50 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800dd0e:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800dd12:	4910      	ldr	r1, [pc, #64]	; (800dd54 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800dd14:	4810      	ldr	r0, [pc, #64]	; (800dd58 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800dd16:	f006 fc15 	bl	8014544 <iprintf>

  while (pcb != NULL) {
 800dd1a:	e011      	b.n	800dd40 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800dd1c:	68fb      	ldr	r3, [r7, #12]
 800dd1e:	681a      	ldr	r2, [r3, #0]
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	681b      	ldr	r3, [r3, #0]
 800dd24:	429a      	cmp	r2, r3
 800dd26:	d108      	bne.n	800dd3a <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800dd28:	68fb      	ldr	r3, [r7, #12]
 800dd2a:	68db      	ldr	r3, [r3, #12]
 800dd2c:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800dd2e:	68f8      	ldr	r0, [r7, #12]
 800dd30:	f7fe ffc6 	bl	800ccc0 <tcp_abort>
      pcb = next;
 800dd34:	68bb      	ldr	r3, [r7, #8]
 800dd36:	60fb      	str	r3, [r7, #12]
 800dd38:	e002      	b.n	800dd40 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800dd3a:	68fb      	ldr	r3, [r7, #12]
 800dd3c:	68db      	ldr	r3, [r3, #12]
 800dd3e:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800dd40:	68fb      	ldr	r3, [r7, #12]
 800dd42:	2b00      	cmp	r3, #0
 800dd44:	d1ea      	bne.n	800dd1c <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800dd46:	bf00      	nop
 800dd48:	bf00      	nop
 800dd4a:	3710      	adds	r7, #16
 800dd4c:	46bd      	mov	sp, r7
 800dd4e:	bd80      	pop	{r7, pc}
 800dd50:	080163e8 	.word	0x080163e8
 800dd54:	08016b1c 	.word	0x08016b1c
 800dd58:	0801642c 	.word	0x0801642c

0800dd5c <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800dd5c:	b580      	push	{r7, lr}
 800dd5e:	b084      	sub	sp, #16
 800dd60:	af00      	add	r7, sp, #0
 800dd62:	6078      	str	r0, [r7, #4]
 800dd64:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	2b00      	cmp	r3, #0
 800dd6a:	d02a      	beq.n	800ddc2 <tcp_netif_ip_addr_changed+0x66>
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	681b      	ldr	r3, [r3, #0]
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	d026      	beq.n	800ddc2 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800dd74:	4b15      	ldr	r3, [pc, #84]	; (800ddcc <tcp_netif_ip_addr_changed+0x70>)
 800dd76:	681b      	ldr	r3, [r3, #0]
 800dd78:	4619      	mov	r1, r3
 800dd7a:	6878      	ldr	r0, [r7, #4]
 800dd7c:	f7ff ffbc 	bl	800dcf8 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800dd80:	4b13      	ldr	r3, [pc, #76]	; (800ddd0 <tcp_netif_ip_addr_changed+0x74>)
 800dd82:	681b      	ldr	r3, [r3, #0]
 800dd84:	4619      	mov	r1, r3
 800dd86:	6878      	ldr	r0, [r7, #4]
 800dd88:	f7ff ffb6 	bl	800dcf8 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800dd8c:	683b      	ldr	r3, [r7, #0]
 800dd8e:	2b00      	cmp	r3, #0
 800dd90:	d017      	beq.n	800ddc2 <tcp_netif_ip_addr_changed+0x66>
 800dd92:	683b      	ldr	r3, [r7, #0]
 800dd94:	681b      	ldr	r3, [r3, #0]
 800dd96:	2b00      	cmp	r3, #0
 800dd98:	d013      	beq.n	800ddc2 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800dd9a:	4b0e      	ldr	r3, [pc, #56]	; (800ddd4 <tcp_netif_ip_addr_changed+0x78>)
 800dd9c:	681b      	ldr	r3, [r3, #0]
 800dd9e:	60fb      	str	r3, [r7, #12]
 800dda0:	e00c      	b.n	800ddbc <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800dda2:	68fb      	ldr	r3, [r7, #12]
 800dda4:	681a      	ldr	r2, [r3, #0]
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	681b      	ldr	r3, [r3, #0]
 800ddaa:	429a      	cmp	r2, r3
 800ddac:	d103      	bne.n	800ddb6 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800ddae:	683b      	ldr	r3, [r7, #0]
 800ddb0:	681a      	ldr	r2, [r3, #0]
 800ddb2:	68fb      	ldr	r3, [r7, #12]
 800ddb4:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800ddb6:	68fb      	ldr	r3, [r7, #12]
 800ddb8:	68db      	ldr	r3, [r3, #12]
 800ddba:	60fb      	str	r3, [r7, #12]
 800ddbc:	68fb      	ldr	r3, [r7, #12]
 800ddbe:	2b00      	cmp	r3, #0
 800ddc0:	d1ef      	bne.n	800dda2 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800ddc2:	bf00      	nop
 800ddc4:	3710      	adds	r7, #16
 800ddc6:	46bd      	mov	sp, r7
 800ddc8:	bd80      	pop	{r7, pc}
 800ddca:	bf00      	nop
 800ddcc:	200072a0 	.word	0x200072a0
 800ddd0:	200072ac 	.word	0x200072ac
 800ddd4:	200072a8 	.word	0x200072a8

0800ddd8 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800ddd8:	b580      	push	{r7, lr}
 800ddda:	b082      	sub	sp, #8
 800dddc:	af00      	add	r7, sp, #0
 800ddde:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	d007      	beq.n	800ddf8 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ddec:	4618      	mov	r0, r3
 800ddee:	f7ff fc3d 	bl	800d66c <tcp_segs_free>
    pcb->ooseq = NULL;
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	2200      	movs	r2, #0
 800ddf6:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800ddf8:	bf00      	nop
 800ddfa:	3708      	adds	r7, #8
 800ddfc:	46bd      	mov	sp, r7
 800ddfe:	bd80      	pop	{r7, pc}

0800de00 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800de00:	b590      	push	{r4, r7, lr}
 800de02:	b08d      	sub	sp, #52	; 0x34
 800de04:	af04      	add	r7, sp, #16
 800de06:	6078      	str	r0, [r7, #4]
 800de08:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	d105      	bne.n	800de1c <tcp_input+0x1c>
 800de10:	4b9b      	ldr	r3, [pc, #620]	; (800e080 <tcp_input+0x280>)
 800de12:	2283      	movs	r2, #131	; 0x83
 800de14:	499b      	ldr	r1, [pc, #620]	; (800e084 <tcp_input+0x284>)
 800de16:	489c      	ldr	r0, [pc, #624]	; (800e088 <tcp_input+0x288>)
 800de18:	f006 fb94 	bl	8014544 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	685b      	ldr	r3, [r3, #4]
 800de20:	4a9a      	ldr	r2, [pc, #616]	; (800e08c <tcp_input+0x28c>)
 800de22:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	895b      	ldrh	r3, [r3, #10]
 800de28:	2b13      	cmp	r3, #19
 800de2a:	f240 83c4 	bls.w	800e5b6 <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800de2e:	4b98      	ldr	r3, [pc, #608]	; (800e090 <tcp_input+0x290>)
 800de30:	695b      	ldr	r3, [r3, #20]
 800de32:	4a97      	ldr	r2, [pc, #604]	; (800e090 <tcp_input+0x290>)
 800de34:	6812      	ldr	r2, [r2, #0]
 800de36:	4611      	mov	r1, r2
 800de38:	4618      	mov	r0, r3
 800de3a:	f005 fbd1 	bl	80135e0 <ip4_addr_isbroadcast_u32>
 800de3e:	4603      	mov	r3, r0
 800de40:	2b00      	cmp	r3, #0
 800de42:	f040 83ba 	bne.w	800e5ba <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800de46:	4b92      	ldr	r3, [pc, #584]	; (800e090 <tcp_input+0x290>)
 800de48:	695b      	ldr	r3, [r3, #20]
 800de4a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800de4e:	2be0      	cmp	r3, #224	; 0xe0
 800de50:	f000 83b3 	beq.w	800e5ba <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800de54:	4b8d      	ldr	r3, [pc, #564]	; (800e08c <tcp_input+0x28c>)
 800de56:	681b      	ldr	r3, [r3, #0]
 800de58:	899b      	ldrh	r3, [r3, #12]
 800de5a:	b29b      	uxth	r3, r3
 800de5c:	4618      	mov	r0, r3
 800de5e:	f7fc ff14 	bl	800ac8a <lwip_htons>
 800de62:	4603      	mov	r3, r0
 800de64:	0b1b      	lsrs	r3, r3, #12
 800de66:	b29b      	uxth	r3, r3
 800de68:	b2db      	uxtb	r3, r3
 800de6a:	009b      	lsls	r3, r3, #2
 800de6c:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800de6e:	7cbb      	ldrb	r3, [r7, #18]
 800de70:	2b13      	cmp	r3, #19
 800de72:	f240 83a4 	bls.w	800e5be <tcp_input+0x7be>
 800de76:	7cbb      	ldrb	r3, [r7, #18]
 800de78:	b29a      	uxth	r2, r3
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	891b      	ldrh	r3, [r3, #8]
 800de7e:	429a      	cmp	r2, r3
 800de80:	f200 839d 	bhi.w	800e5be <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800de84:	7cbb      	ldrb	r3, [r7, #18]
 800de86:	b29b      	uxth	r3, r3
 800de88:	3b14      	subs	r3, #20
 800de8a:	b29a      	uxth	r2, r3
 800de8c:	4b81      	ldr	r3, [pc, #516]	; (800e094 <tcp_input+0x294>)
 800de8e:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800de90:	4b81      	ldr	r3, [pc, #516]	; (800e098 <tcp_input+0x298>)
 800de92:	2200      	movs	r2, #0
 800de94:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	895a      	ldrh	r2, [r3, #10]
 800de9a:	7cbb      	ldrb	r3, [r7, #18]
 800de9c:	b29b      	uxth	r3, r3
 800de9e:	429a      	cmp	r2, r3
 800dea0:	d309      	bcc.n	800deb6 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800dea2:	4b7c      	ldr	r3, [pc, #496]	; (800e094 <tcp_input+0x294>)
 800dea4:	881a      	ldrh	r2, [r3, #0]
 800dea6:	4b7d      	ldr	r3, [pc, #500]	; (800e09c <tcp_input+0x29c>)
 800dea8:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800deaa:	7cbb      	ldrb	r3, [r7, #18]
 800deac:	4619      	mov	r1, r3
 800deae:	6878      	ldr	r0, [r7, #4]
 800deb0:	f7fe f8f8 	bl	800c0a4 <pbuf_remove_header>
 800deb4:	e04e      	b.n	800df54 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	681b      	ldr	r3, [r3, #0]
 800deba:	2b00      	cmp	r3, #0
 800debc:	d105      	bne.n	800deca <tcp_input+0xca>
 800debe:	4b70      	ldr	r3, [pc, #448]	; (800e080 <tcp_input+0x280>)
 800dec0:	22c2      	movs	r2, #194	; 0xc2
 800dec2:	4977      	ldr	r1, [pc, #476]	; (800e0a0 <tcp_input+0x2a0>)
 800dec4:	4870      	ldr	r0, [pc, #448]	; (800e088 <tcp_input+0x288>)
 800dec6:	f006 fb3d 	bl	8014544 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800deca:	2114      	movs	r1, #20
 800decc:	6878      	ldr	r0, [r7, #4]
 800dece:	f7fe f8e9 	bl	800c0a4 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	895a      	ldrh	r2, [r3, #10]
 800ded6:	4b71      	ldr	r3, [pc, #452]	; (800e09c <tcp_input+0x29c>)
 800ded8:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800deda:	4b6e      	ldr	r3, [pc, #440]	; (800e094 <tcp_input+0x294>)
 800dedc:	881a      	ldrh	r2, [r3, #0]
 800dede:	4b6f      	ldr	r3, [pc, #444]	; (800e09c <tcp_input+0x29c>)
 800dee0:	881b      	ldrh	r3, [r3, #0]
 800dee2:	1ad3      	subs	r3, r2, r3
 800dee4:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800dee6:	4b6d      	ldr	r3, [pc, #436]	; (800e09c <tcp_input+0x29c>)
 800dee8:	881b      	ldrh	r3, [r3, #0]
 800deea:	4619      	mov	r1, r3
 800deec:	6878      	ldr	r0, [r7, #4]
 800deee:	f7fe f8d9 	bl	800c0a4 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	681b      	ldr	r3, [r3, #0]
 800def6:	895b      	ldrh	r3, [r3, #10]
 800def8:	8a3a      	ldrh	r2, [r7, #16]
 800defa:	429a      	cmp	r2, r3
 800defc:	f200 8361 	bhi.w	800e5c2 <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	681b      	ldr	r3, [r3, #0]
 800df04:	685b      	ldr	r3, [r3, #4]
 800df06:	4a64      	ldr	r2, [pc, #400]	; (800e098 <tcp_input+0x298>)
 800df08:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	681b      	ldr	r3, [r3, #0]
 800df0e:	8a3a      	ldrh	r2, [r7, #16]
 800df10:	4611      	mov	r1, r2
 800df12:	4618      	mov	r0, r3
 800df14:	f7fe f8c6 	bl	800c0a4 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	891a      	ldrh	r2, [r3, #8]
 800df1c:	8a3b      	ldrh	r3, [r7, #16]
 800df1e:	1ad3      	subs	r3, r2, r3
 800df20:	b29a      	uxth	r2, r3
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	895b      	ldrh	r3, [r3, #10]
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	d005      	beq.n	800df3a <tcp_input+0x13a>
 800df2e:	4b54      	ldr	r3, [pc, #336]	; (800e080 <tcp_input+0x280>)
 800df30:	22df      	movs	r2, #223	; 0xdf
 800df32:	495c      	ldr	r1, [pc, #368]	; (800e0a4 <tcp_input+0x2a4>)
 800df34:	4854      	ldr	r0, [pc, #336]	; (800e088 <tcp_input+0x288>)
 800df36:	f006 fb05 	bl	8014544 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	891a      	ldrh	r2, [r3, #8]
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	681b      	ldr	r3, [r3, #0]
 800df42:	891b      	ldrh	r3, [r3, #8]
 800df44:	429a      	cmp	r2, r3
 800df46:	d005      	beq.n	800df54 <tcp_input+0x154>
 800df48:	4b4d      	ldr	r3, [pc, #308]	; (800e080 <tcp_input+0x280>)
 800df4a:	22e0      	movs	r2, #224	; 0xe0
 800df4c:	4956      	ldr	r1, [pc, #344]	; (800e0a8 <tcp_input+0x2a8>)
 800df4e:	484e      	ldr	r0, [pc, #312]	; (800e088 <tcp_input+0x288>)
 800df50:	f006 faf8 	bl	8014544 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800df54:	4b4d      	ldr	r3, [pc, #308]	; (800e08c <tcp_input+0x28c>)
 800df56:	681b      	ldr	r3, [r3, #0]
 800df58:	881b      	ldrh	r3, [r3, #0]
 800df5a:	b29b      	uxth	r3, r3
 800df5c:	4a4b      	ldr	r2, [pc, #300]	; (800e08c <tcp_input+0x28c>)
 800df5e:	6814      	ldr	r4, [r2, #0]
 800df60:	4618      	mov	r0, r3
 800df62:	f7fc fe92 	bl	800ac8a <lwip_htons>
 800df66:	4603      	mov	r3, r0
 800df68:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800df6a:	4b48      	ldr	r3, [pc, #288]	; (800e08c <tcp_input+0x28c>)
 800df6c:	681b      	ldr	r3, [r3, #0]
 800df6e:	885b      	ldrh	r3, [r3, #2]
 800df70:	b29b      	uxth	r3, r3
 800df72:	4a46      	ldr	r2, [pc, #280]	; (800e08c <tcp_input+0x28c>)
 800df74:	6814      	ldr	r4, [r2, #0]
 800df76:	4618      	mov	r0, r3
 800df78:	f7fc fe87 	bl	800ac8a <lwip_htons>
 800df7c:	4603      	mov	r3, r0
 800df7e:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800df80:	4b42      	ldr	r3, [pc, #264]	; (800e08c <tcp_input+0x28c>)
 800df82:	681b      	ldr	r3, [r3, #0]
 800df84:	685b      	ldr	r3, [r3, #4]
 800df86:	4a41      	ldr	r2, [pc, #260]	; (800e08c <tcp_input+0x28c>)
 800df88:	6814      	ldr	r4, [r2, #0]
 800df8a:	4618      	mov	r0, r3
 800df8c:	f7fc fe92 	bl	800acb4 <lwip_htonl>
 800df90:	4603      	mov	r3, r0
 800df92:	6063      	str	r3, [r4, #4]
 800df94:	6863      	ldr	r3, [r4, #4]
 800df96:	4a45      	ldr	r2, [pc, #276]	; (800e0ac <tcp_input+0x2ac>)
 800df98:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800df9a:	4b3c      	ldr	r3, [pc, #240]	; (800e08c <tcp_input+0x28c>)
 800df9c:	681b      	ldr	r3, [r3, #0]
 800df9e:	689b      	ldr	r3, [r3, #8]
 800dfa0:	4a3a      	ldr	r2, [pc, #232]	; (800e08c <tcp_input+0x28c>)
 800dfa2:	6814      	ldr	r4, [r2, #0]
 800dfa4:	4618      	mov	r0, r3
 800dfa6:	f7fc fe85 	bl	800acb4 <lwip_htonl>
 800dfaa:	4603      	mov	r3, r0
 800dfac:	60a3      	str	r3, [r4, #8]
 800dfae:	68a3      	ldr	r3, [r4, #8]
 800dfb0:	4a3f      	ldr	r2, [pc, #252]	; (800e0b0 <tcp_input+0x2b0>)
 800dfb2:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800dfb4:	4b35      	ldr	r3, [pc, #212]	; (800e08c <tcp_input+0x28c>)
 800dfb6:	681b      	ldr	r3, [r3, #0]
 800dfb8:	89db      	ldrh	r3, [r3, #14]
 800dfba:	b29b      	uxth	r3, r3
 800dfbc:	4a33      	ldr	r2, [pc, #204]	; (800e08c <tcp_input+0x28c>)
 800dfbe:	6814      	ldr	r4, [r2, #0]
 800dfc0:	4618      	mov	r0, r3
 800dfc2:	f7fc fe62 	bl	800ac8a <lwip_htons>
 800dfc6:	4603      	mov	r3, r0
 800dfc8:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800dfca:	4b30      	ldr	r3, [pc, #192]	; (800e08c <tcp_input+0x28c>)
 800dfcc:	681b      	ldr	r3, [r3, #0]
 800dfce:	899b      	ldrh	r3, [r3, #12]
 800dfd0:	b29b      	uxth	r3, r3
 800dfd2:	4618      	mov	r0, r3
 800dfd4:	f7fc fe59 	bl	800ac8a <lwip_htons>
 800dfd8:	4603      	mov	r3, r0
 800dfda:	b2db      	uxtb	r3, r3
 800dfdc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800dfe0:	b2da      	uxtb	r2, r3
 800dfe2:	4b34      	ldr	r3, [pc, #208]	; (800e0b4 <tcp_input+0x2b4>)
 800dfe4:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	891a      	ldrh	r2, [r3, #8]
 800dfea:	4b33      	ldr	r3, [pc, #204]	; (800e0b8 <tcp_input+0x2b8>)
 800dfec:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800dfee:	4b31      	ldr	r3, [pc, #196]	; (800e0b4 <tcp_input+0x2b4>)
 800dff0:	781b      	ldrb	r3, [r3, #0]
 800dff2:	f003 0303 	and.w	r3, r3, #3
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	d00c      	beq.n	800e014 <tcp_input+0x214>
    tcplen++;
 800dffa:	4b2f      	ldr	r3, [pc, #188]	; (800e0b8 <tcp_input+0x2b8>)
 800dffc:	881b      	ldrh	r3, [r3, #0]
 800dffe:	3301      	adds	r3, #1
 800e000:	b29a      	uxth	r2, r3
 800e002:	4b2d      	ldr	r3, [pc, #180]	; (800e0b8 <tcp_input+0x2b8>)
 800e004:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	891a      	ldrh	r2, [r3, #8]
 800e00a:	4b2b      	ldr	r3, [pc, #172]	; (800e0b8 <tcp_input+0x2b8>)
 800e00c:	881b      	ldrh	r3, [r3, #0]
 800e00e:	429a      	cmp	r2, r3
 800e010:	f200 82d9 	bhi.w	800e5c6 <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800e014:	2300      	movs	r3, #0
 800e016:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e018:	4b28      	ldr	r3, [pc, #160]	; (800e0bc <tcp_input+0x2bc>)
 800e01a:	681b      	ldr	r3, [r3, #0]
 800e01c:	61fb      	str	r3, [r7, #28]
 800e01e:	e09d      	b.n	800e15c <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800e020:	69fb      	ldr	r3, [r7, #28]
 800e022:	7d1b      	ldrb	r3, [r3, #20]
 800e024:	2b00      	cmp	r3, #0
 800e026:	d105      	bne.n	800e034 <tcp_input+0x234>
 800e028:	4b15      	ldr	r3, [pc, #84]	; (800e080 <tcp_input+0x280>)
 800e02a:	22fb      	movs	r2, #251	; 0xfb
 800e02c:	4924      	ldr	r1, [pc, #144]	; (800e0c0 <tcp_input+0x2c0>)
 800e02e:	4816      	ldr	r0, [pc, #88]	; (800e088 <tcp_input+0x288>)
 800e030:	f006 fa88 	bl	8014544 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800e034:	69fb      	ldr	r3, [r7, #28]
 800e036:	7d1b      	ldrb	r3, [r3, #20]
 800e038:	2b0a      	cmp	r3, #10
 800e03a:	d105      	bne.n	800e048 <tcp_input+0x248>
 800e03c:	4b10      	ldr	r3, [pc, #64]	; (800e080 <tcp_input+0x280>)
 800e03e:	22fc      	movs	r2, #252	; 0xfc
 800e040:	4920      	ldr	r1, [pc, #128]	; (800e0c4 <tcp_input+0x2c4>)
 800e042:	4811      	ldr	r0, [pc, #68]	; (800e088 <tcp_input+0x288>)
 800e044:	f006 fa7e 	bl	8014544 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800e048:	69fb      	ldr	r3, [r7, #28]
 800e04a:	7d1b      	ldrb	r3, [r3, #20]
 800e04c:	2b01      	cmp	r3, #1
 800e04e:	d105      	bne.n	800e05c <tcp_input+0x25c>
 800e050:	4b0b      	ldr	r3, [pc, #44]	; (800e080 <tcp_input+0x280>)
 800e052:	22fd      	movs	r2, #253	; 0xfd
 800e054:	491c      	ldr	r1, [pc, #112]	; (800e0c8 <tcp_input+0x2c8>)
 800e056:	480c      	ldr	r0, [pc, #48]	; (800e088 <tcp_input+0x288>)
 800e058:	f006 fa74 	bl	8014544 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e05c:	69fb      	ldr	r3, [r7, #28]
 800e05e:	7a1b      	ldrb	r3, [r3, #8]
 800e060:	2b00      	cmp	r3, #0
 800e062:	d033      	beq.n	800e0cc <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e064:	69fb      	ldr	r3, [r7, #28]
 800e066:	7a1a      	ldrb	r2, [r3, #8]
 800e068:	4b09      	ldr	r3, [pc, #36]	; (800e090 <tcp_input+0x290>)
 800e06a:	685b      	ldr	r3, [r3, #4]
 800e06c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e070:	3301      	adds	r3, #1
 800e072:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e074:	429a      	cmp	r2, r3
 800e076:	d029      	beq.n	800e0cc <tcp_input+0x2cc>
      prev = pcb;
 800e078:	69fb      	ldr	r3, [r7, #28]
 800e07a:	61bb      	str	r3, [r7, #24]
      continue;
 800e07c:	e06b      	b.n	800e156 <tcp_input+0x356>
 800e07e:	bf00      	nop
 800e080:	08016b50 	.word	0x08016b50
 800e084:	08016b84 	.word	0x08016b84
 800e088:	08016b9c 	.word	0x08016b9c
 800e08c:	200000f8 	.word	0x200000f8
 800e090:	20003d5c 	.word	0x20003d5c
 800e094:	200000fc 	.word	0x200000fc
 800e098:	20000100 	.word	0x20000100
 800e09c:	200000fe 	.word	0x200000fe
 800e0a0:	08016bc4 	.word	0x08016bc4
 800e0a4:	08016bd4 	.word	0x08016bd4
 800e0a8:	08016be0 	.word	0x08016be0
 800e0ac:	20000108 	.word	0x20000108
 800e0b0:	2000010c 	.word	0x2000010c
 800e0b4:	20000114 	.word	0x20000114
 800e0b8:	20000112 	.word	0x20000112
 800e0bc:	200072a0 	.word	0x200072a0
 800e0c0:	08016c00 	.word	0x08016c00
 800e0c4:	08016c28 	.word	0x08016c28
 800e0c8:	08016c54 	.word	0x08016c54
    }

    if (pcb->remote_port == tcphdr->src &&
 800e0cc:	69fb      	ldr	r3, [r7, #28]
 800e0ce:	8b1a      	ldrh	r2, [r3, #24]
 800e0d0:	4b94      	ldr	r3, [pc, #592]	; (800e324 <tcp_input+0x524>)
 800e0d2:	681b      	ldr	r3, [r3, #0]
 800e0d4:	881b      	ldrh	r3, [r3, #0]
 800e0d6:	b29b      	uxth	r3, r3
 800e0d8:	429a      	cmp	r2, r3
 800e0da:	d13a      	bne.n	800e152 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800e0dc:	69fb      	ldr	r3, [r7, #28]
 800e0de:	8ada      	ldrh	r2, [r3, #22]
 800e0e0:	4b90      	ldr	r3, [pc, #576]	; (800e324 <tcp_input+0x524>)
 800e0e2:	681b      	ldr	r3, [r3, #0]
 800e0e4:	885b      	ldrh	r3, [r3, #2]
 800e0e6:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800e0e8:	429a      	cmp	r2, r3
 800e0ea:	d132      	bne.n	800e152 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e0ec:	69fb      	ldr	r3, [r7, #28]
 800e0ee:	685a      	ldr	r2, [r3, #4]
 800e0f0:	4b8d      	ldr	r3, [pc, #564]	; (800e328 <tcp_input+0x528>)
 800e0f2:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800e0f4:	429a      	cmp	r2, r3
 800e0f6:	d12c      	bne.n	800e152 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800e0f8:	69fb      	ldr	r3, [r7, #28]
 800e0fa:	681a      	ldr	r2, [r3, #0]
 800e0fc:	4b8a      	ldr	r3, [pc, #552]	; (800e328 <tcp_input+0x528>)
 800e0fe:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e100:	429a      	cmp	r2, r3
 800e102:	d126      	bne.n	800e152 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800e104:	69fb      	ldr	r3, [r7, #28]
 800e106:	68db      	ldr	r3, [r3, #12]
 800e108:	69fa      	ldr	r2, [r7, #28]
 800e10a:	429a      	cmp	r2, r3
 800e10c:	d106      	bne.n	800e11c <tcp_input+0x31c>
 800e10e:	4b87      	ldr	r3, [pc, #540]	; (800e32c <tcp_input+0x52c>)
 800e110:	f240 120d 	movw	r2, #269	; 0x10d
 800e114:	4986      	ldr	r1, [pc, #536]	; (800e330 <tcp_input+0x530>)
 800e116:	4887      	ldr	r0, [pc, #540]	; (800e334 <tcp_input+0x534>)
 800e118:	f006 fa14 	bl	8014544 <iprintf>
      if (prev != NULL) {
 800e11c:	69bb      	ldr	r3, [r7, #24]
 800e11e:	2b00      	cmp	r3, #0
 800e120:	d00a      	beq.n	800e138 <tcp_input+0x338>
        prev->next = pcb->next;
 800e122:	69fb      	ldr	r3, [r7, #28]
 800e124:	68da      	ldr	r2, [r3, #12]
 800e126:	69bb      	ldr	r3, [r7, #24]
 800e128:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800e12a:	4b83      	ldr	r3, [pc, #524]	; (800e338 <tcp_input+0x538>)
 800e12c:	681a      	ldr	r2, [r3, #0]
 800e12e:	69fb      	ldr	r3, [r7, #28]
 800e130:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800e132:	4a81      	ldr	r2, [pc, #516]	; (800e338 <tcp_input+0x538>)
 800e134:	69fb      	ldr	r3, [r7, #28]
 800e136:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800e138:	69fb      	ldr	r3, [r7, #28]
 800e13a:	68db      	ldr	r3, [r3, #12]
 800e13c:	69fa      	ldr	r2, [r7, #28]
 800e13e:	429a      	cmp	r2, r3
 800e140:	d111      	bne.n	800e166 <tcp_input+0x366>
 800e142:	4b7a      	ldr	r3, [pc, #488]	; (800e32c <tcp_input+0x52c>)
 800e144:	f240 1215 	movw	r2, #277	; 0x115
 800e148:	497c      	ldr	r1, [pc, #496]	; (800e33c <tcp_input+0x53c>)
 800e14a:	487a      	ldr	r0, [pc, #488]	; (800e334 <tcp_input+0x534>)
 800e14c:	f006 f9fa 	bl	8014544 <iprintf>
      break;
 800e150:	e009      	b.n	800e166 <tcp_input+0x366>
    }
    prev = pcb;
 800e152:	69fb      	ldr	r3, [r7, #28]
 800e154:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e156:	69fb      	ldr	r3, [r7, #28]
 800e158:	68db      	ldr	r3, [r3, #12]
 800e15a:	61fb      	str	r3, [r7, #28]
 800e15c:	69fb      	ldr	r3, [r7, #28]
 800e15e:	2b00      	cmp	r3, #0
 800e160:	f47f af5e 	bne.w	800e020 <tcp_input+0x220>
 800e164:	e000      	b.n	800e168 <tcp_input+0x368>
      break;
 800e166:	bf00      	nop
  }

  if (pcb == NULL) {
 800e168:	69fb      	ldr	r3, [r7, #28]
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	f040 8095 	bne.w	800e29a <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e170:	4b73      	ldr	r3, [pc, #460]	; (800e340 <tcp_input+0x540>)
 800e172:	681b      	ldr	r3, [r3, #0]
 800e174:	61fb      	str	r3, [r7, #28]
 800e176:	e03f      	b.n	800e1f8 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800e178:	69fb      	ldr	r3, [r7, #28]
 800e17a:	7d1b      	ldrb	r3, [r3, #20]
 800e17c:	2b0a      	cmp	r3, #10
 800e17e:	d006      	beq.n	800e18e <tcp_input+0x38e>
 800e180:	4b6a      	ldr	r3, [pc, #424]	; (800e32c <tcp_input+0x52c>)
 800e182:	f240 121f 	movw	r2, #287	; 0x11f
 800e186:	496f      	ldr	r1, [pc, #444]	; (800e344 <tcp_input+0x544>)
 800e188:	486a      	ldr	r0, [pc, #424]	; (800e334 <tcp_input+0x534>)
 800e18a:	f006 f9db 	bl	8014544 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e18e:	69fb      	ldr	r3, [r7, #28]
 800e190:	7a1b      	ldrb	r3, [r3, #8]
 800e192:	2b00      	cmp	r3, #0
 800e194:	d009      	beq.n	800e1aa <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e196:	69fb      	ldr	r3, [r7, #28]
 800e198:	7a1a      	ldrb	r2, [r3, #8]
 800e19a:	4b63      	ldr	r3, [pc, #396]	; (800e328 <tcp_input+0x528>)
 800e19c:	685b      	ldr	r3, [r3, #4]
 800e19e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e1a2:	3301      	adds	r3, #1
 800e1a4:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e1a6:	429a      	cmp	r2, r3
 800e1a8:	d122      	bne.n	800e1f0 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800e1aa:	69fb      	ldr	r3, [r7, #28]
 800e1ac:	8b1a      	ldrh	r2, [r3, #24]
 800e1ae:	4b5d      	ldr	r3, [pc, #372]	; (800e324 <tcp_input+0x524>)
 800e1b0:	681b      	ldr	r3, [r3, #0]
 800e1b2:	881b      	ldrh	r3, [r3, #0]
 800e1b4:	b29b      	uxth	r3, r3
 800e1b6:	429a      	cmp	r2, r3
 800e1b8:	d11b      	bne.n	800e1f2 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800e1ba:	69fb      	ldr	r3, [r7, #28]
 800e1bc:	8ada      	ldrh	r2, [r3, #22]
 800e1be:	4b59      	ldr	r3, [pc, #356]	; (800e324 <tcp_input+0x524>)
 800e1c0:	681b      	ldr	r3, [r3, #0]
 800e1c2:	885b      	ldrh	r3, [r3, #2]
 800e1c4:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800e1c6:	429a      	cmp	r2, r3
 800e1c8:	d113      	bne.n	800e1f2 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e1ca:	69fb      	ldr	r3, [r7, #28]
 800e1cc:	685a      	ldr	r2, [r3, #4]
 800e1ce:	4b56      	ldr	r3, [pc, #344]	; (800e328 <tcp_input+0x528>)
 800e1d0:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800e1d2:	429a      	cmp	r2, r3
 800e1d4:	d10d      	bne.n	800e1f2 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800e1d6:	69fb      	ldr	r3, [r7, #28]
 800e1d8:	681a      	ldr	r2, [r3, #0]
 800e1da:	4b53      	ldr	r3, [pc, #332]	; (800e328 <tcp_input+0x528>)
 800e1dc:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e1de:	429a      	cmp	r2, r3
 800e1e0:	d107      	bne.n	800e1f2 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800e1e2:	69f8      	ldr	r0, [r7, #28]
 800e1e4:	f000 fb54 	bl	800e890 <tcp_timewait_input>
        }
        pbuf_free(p);
 800e1e8:	6878      	ldr	r0, [r7, #4]
 800e1ea:	f7fd ffe1 	bl	800c1b0 <pbuf_free>
        return;
 800e1ee:	e1f0      	b.n	800e5d2 <tcp_input+0x7d2>
        continue;
 800e1f0:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e1f2:	69fb      	ldr	r3, [r7, #28]
 800e1f4:	68db      	ldr	r3, [r3, #12]
 800e1f6:	61fb      	str	r3, [r7, #28]
 800e1f8:	69fb      	ldr	r3, [r7, #28]
 800e1fa:	2b00      	cmp	r3, #0
 800e1fc:	d1bc      	bne.n	800e178 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800e1fe:	2300      	movs	r3, #0
 800e200:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e202:	4b51      	ldr	r3, [pc, #324]	; (800e348 <tcp_input+0x548>)
 800e204:	681b      	ldr	r3, [r3, #0]
 800e206:	617b      	str	r3, [r7, #20]
 800e208:	e02a      	b.n	800e260 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800e20a:	697b      	ldr	r3, [r7, #20]
 800e20c:	7a1b      	ldrb	r3, [r3, #8]
 800e20e:	2b00      	cmp	r3, #0
 800e210:	d00c      	beq.n	800e22c <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e212:	697b      	ldr	r3, [r7, #20]
 800e214:	7a1a      	ldrb	r2, [r3, #8]
 800e216:	4b44      	ldr	r3, [pc, #272]	; (800e328 <tcp_input+0x528>)
 800e218:	685b      	ldr	r3, [r3, #4]
 800e21a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e21e:	3301      	adds	r3, #1
 800e220:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800e222:	429a      	cmp	r2, r3
 800e224:	d002      	beq.n	800e22c <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800e226:	697b      	ldr	r3, [r7, #20]
 800e228:	61bb      	str	r3, [r7, #24]
        continue;
 800e22a:	e016      	b.n	800e25a <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800e22c:	697b      	ldr	r3, [r7, #20]
 800e22e:	8ada      	ldrh	r2, [r3, #22]
 800e230:	4b3c      	ldr	r3, [pc, #240]	; (800e324 <tcp_input+0x524>)
 800e232:	681b      	ldr	r3, [r3, #0]
 800e234:	885b      	ldrh	r3, [r3, #2]
 800e236:	b29b      	uxth	r3, r3
 800e238:	429a      	cmp	r2, r3
 800e23a:	d10c      	bne.n	800e256 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800e23c:	697b      	ldr	r3, [r7, #20]
 800e23e:	681a      	ldr	r2, [r3, #0]
 800e240:	4b39      	ldr	r3, [pc, #228]	; (800e328 <tcp_input+0x528>)
 800e242:	695b      	ldr	r3, [r3, #20]
 800e244:	429a      	cmp	r2, r3
 800e246:	d00f      	beq.n	800e268 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800e248:	697b      	ldr	r3, [r7, #20]
 800e24a:	2b00      	cmp	r3, #0
 800e24c:	d00d      	beq.n	800e26a <tcp_input+0x46a>
 800e24e:	697b      	ldr	r3, [r7, #20]
 800e250:	681b      	ldr	r3, [r3, #0]
 800e252:	2b00      	cmp	r3, #0
 800e254:	d009      	beq.n	800e26a <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800e256:	697b      	ldr	r3, [r7, #20]
 800e258:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e25a:	697b      	ldr	r3, [r7, #20]
 800e25c:	68db      	ldr	r3, [r3, #12]
 800e25e:	617b      	str	r3, [r7, #20]
 800e260:	697b      	ldr	r3, [r7, #20]
 800e262:	2b00      	cmp	r3, #0
 800e264:	d1d1      	bne.n	800e20a <tcp_input+0x40a>
 800e266:	e000      	b.n	800e26a <tcp_input+0x46a>
            break;
 800e268:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800e26a:	697b      	ldr	r3, [r7, #20]
 800e26c:	2b00      	cmp	r3, #0
 800e26e:	d014      	beq.n	800e29a <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800e270:	69bb      	ldr	r3, [r7, #24]
 800e272:	2b00      	cmp	r3, #0
 800e274:	d00a      	beq.n	800e28c <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800e276:	697b      	ldr	r3, [r7, #20]
 800e278:	68da      	ldr	r2, [r3, #12]
 800e27a:	69bb      	ldr	r3, [r7, #24]
 800e27c:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800e27e:	4b32      	ldr	r3, [pc, #200]	; (800e348 <tcp_input+0x548>)
 800e280:	681a      	ldr	r2, [r3, #0]
 800e282:	697b      	ldr	r3, [r7, #20]
 800e284:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800e286:	4a30      	ldr	r2, [pc, #192]	; (800e348 <tcp_input+0x548>)
 800e288:	697b      	ldr	r3, [r7, #20]
 800e28a:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800e28c:	6978      	ldr	r0, [r7, #20]
 800e28e:	f000 fa01 	bl	800e694 <tcp_listen_input>
      }
      pbuf_free(p);
 800e292:	6878      	ldr	r0, [r7, #4]
 800e294:	f7fd ff8c 	bl	800c1b0 <pbuf_free>
      return;
 800e298:	e19b      	b.n	800e5d2 <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800e29a:	69fb      	ldr	r3, [r7, #28]
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	f000 8160 	beq.w	800e562 <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800e2a2:	4b2a      	ldr	r3, [pc, #168]	; (800e34c <tcp_input+0x54c>)
 800e2a4:	2200      	movs	r2, #0
 800e2a6:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	891a      	ldrh	r2, [r3, #8]
 800e2ac:	4b27      	ldr	r3, [pc, #156]	; (800e34c <tcp_input+0x54c>)
 800e2ae:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800e2b0:	4a26      	ldr	r2, [pc, #152]	; (800e34c <tcp_input+0x54c>)
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800e2b6:	4b1b      	ldr	r3, [pc, #108]	; (800e324 <tcp_input+0x524>)
 800e2b8:	681b      	ldr	r3, [r3, #0]
 800e2ba:	4a24      	ldr	r2, [pc, #144]	; (800e34c <tcp_input+0x54c>)
 800e2bc:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800e2be:	4b24      	ldr	r3, [pc, #144]	; (800e350 <tcp_input+0x550>)
 800e2c0:	2200      	movs	r2, #0
 800e2c2:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800e2c4:	4b23      	ldr	r3, [pc, #140]	; (800e354 <tcp_input+0x554>)
 800e2c6:	2200      	movs	r2, #0
 800e2c8:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800e2ca:	4b23      	ldr	r3, [pc, #140]	; (800e358 <tcp_input+0x558>)
 800e2cc:	2200      	movs	r2, #0
 800e2ce:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800e2d0:	4b22      	ldr	r3, [pc, #136]	; (800e35c <tcp_input+0x55c>)
 800e2d2:	781b      	ldrb	r3, [r3, #0]
 800e2d4:	f003 0308 	and.w	r3, r3, #8
 800e2d8:	2b00      	cmp	r3, #0
 800e2da:	d006      	beq.n	800e2ea <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	7b5b      	ldrb	r3, [r3, #13]
 800e2e0:	f043 0301 	orr.w	r3, r3, #1
 800e2e4:	b2da      	uxtb	r2, r3
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800e2ea:	69fb      	ldr	r3, [r7, #28]
 800e2ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	d038      	beq.n	800e364 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800e2f2:	69f8      	ldr	r0, [r7, #28]
 800e2f4:	f7ff f93e 	bl	800d574 <tcp_process_refused_data>
 800e2f8:	4603      	mov	r3, r0
 800e2fa:	f113 0f0d 	cmn.w	r3, #13
 800e2fe:	d007      	beq.n	800e310 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800e300:	69fb      	ldr	r3, [r7, #28]
 800e302:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800e304:	2b00      	cmp	r3, #0
 800e306:	d02d      	beq.n	800e364 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800e308:	4b15      	ldr	r3, [pc, #84]	; (800e360 <tcp_input+0x560>)
 800e30a:	881b      	ldrh	r3, [r3, #0]
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	d029      	beq.n	800e364 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800e310:	69fb      	ldr	r3, [r7, #28]
 800e312:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e314:	2b00      	cmp	r3, #0
 800e316:	f040 8104 	bne.w	800e522 <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800e31a:	69f8      	ldr	r0, [r7, #28]
 800e31c:	f003 f9be 	bl	801169c <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800e320:	e0ff      	b.n	800e522 <tcp_input+0x722>
 800e322:	bf00      	nop
 800e324:	200000f8 	.word	0x200000f8
 800e328:	20003d5c 	.word	0x20003d5c
 800e32c:	08016b50 	.word	0x08016b50
 800e330:	08016c7c 	.word	0x08016c7c
 800e334:	08016b9c 	.word	0x08016b9c
 800e338:	200072a0 	.word	0x200072a0
 800e33c:	08016ca8 	.word	0x08016ca8
 800e340:	200072b0 	.word	0x200072b0
 800e344:	08016cd4 	.word	0x08016cd4
 800e348:	200072a8 	.word	0x200072a8
 800e34c:	200000e8 	.word	0x200000e8
 800e350:	20000118 	.word	0x20000118
 800e354:	20000115 	.word	0x20000115
 800e358:	20000110 	.word	0x20000110
 800e35c:	20000114 	.word	0x20000114
 800e360:	20000112 	.word	0x20000112
      }
    }
    tcp_input_pcb = pcb;
 800e364:	4a9c      	ldr	r2, [pc, #624]	; (800e5d8 <tcp_input+0x7d8>)
 800e366:	69fb      	ldr	r3, [r7, #28]
 800e368:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800e36a:	69f8      	ldr	r0, [r7, #28]
 800e36c:	f000 fb0a 	bl	800e984 <tcp_process>
 800e370:	4603      	mov	r3, r0
 800e372:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800e374:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e378:	f113 0f0d 	cmn.w	r3, #13
 800e37c:	f000 80d3 	beq.w	800e526 <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 800e380:	4b96      	ldr	r3, [pc, #600]	; (800e5dc <tcp_input+0x7dc>)
 800e382:	781b      	ldrb	r3, [r3, #0]
 800e384:	f003 0308 	and.w	r3, r3, #8
 800e388:	2b00      	cmp	r3, #0
 800e38a:	d015      	beq.n	800e3b8 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800e38c:	69fb      	ldr	r3, [r7, #28]
 800e38e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e392:	2b00      	cmp	r3, #0
 800e394:	d008      	beq.n	800e3a8 <tcp_input+0x5a8>
 800e396:	69fb      	ldr	r3, [r7, #28]
 800e398:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e39c:	69fa      	ldr	r2, [r7, #28]
 800e39e:	6912      	ldr	r2, [r2, #16]
 800e3a0:	f06f 010d 	mvn.w	r1, #13
 800e3a4:	4610      	mov	r0, r2
 800e3a6:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800e3a8:	69f9      	ldr	r1, [r7, #28]
 800e3aa:	488d      	ldr	r0, [pc, #564]	; (800e5e0 <tcp_input+0x7e0>)
 800e3ac:	f7ff fbb0 	bl	800db10 <tcp_pcb_remove>
        tcp_free(pcb);
 800e3b0:	69f8      	ldr	r0, [r7, #28]
 800e3b2:	f7fe f99d 	bl	800c6f0 <tcp_free>
 800e3b6:	e0c1      	b.n	800e53c <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 800e3b8:	2300      	movs	r3, #0
 800e3ba:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800e3bc:	4b89      	ldr	r3, [pc, #548]	; (800e5e4 <tcp_input+0x7e4>)
 800e3be:	881b      	ldrh	r3, [r3, #0]
 800e3c0:	2b00      	cmp	r3, #0
 800e3c2:	d01d      	beq.n	800e400 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800e3c4:	4b87      	ldr	r3, [pc, #540]	; (800e5e4 <tcp_input+0x7e4>)
 800e3c6:	881b      	ldrh	r3, [r3, #0]
 800e3c8:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800e3ca:	69fb      	ldr	r3, [r7, #28]
 800e3cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e3d0:	2b00      	cmp	r3, #0
 800e3d2:	d00a      	beq.n	800e3ea <tcp_input+0x5ea>
 800e3d4:	69fb      	ldr	r3, [r7, #28]
 800e3d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e3da:	69fa      	ldr	r2, [r7, #28]
 800e3dc:	6910      	ldr	r0, [r2, #16]
 800e3de:	89fa      	ldrh	r2, [r7, #14]
 800e3e0:	69f9      	ldr	r1, [r7, #28]
 800e3e2:	4798      	blx	r3
 800e3e4:	4603      	mov	r3, r0
 800e3e6:	74fb      	strb	r3, [r7, #19]
 800e3e8:	e001      	b.n	800e3ee <tcp_input+0x5ee>
 800e3ea:	2300      	movs	r3, #0
 800e3ec:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800e3ee:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e3f2:	f113 0f0d 	cmn.w	r3, #13
 800e3f6:	f000 8098 	beq.w	800e52a <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 800e3fa:	4b7a      	ldr	r3, [pc, #488]	; (800e5e4 <tcp_input+0x7e4>)
 800e3fc:	2200      	movs	r2, #0
 800e3fe:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800e400:	69f8      	ldr	r0, [r7, #28]
 800e402:	f000 f907 	bl	800e614 <tcp_input_delayed_close>
 800e406:	4603      	mov	r3, r0
 800e408:	2b00      	cmp	r3, #0
 800e40a:	f040 8090 	bne.w	800e52e <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800e40e:	4b76      	ldr	r3, [pc, #472]	; (800e5e8 <tcp_input+0x7e8>)
 800e410:	681b      	ldr	r3, [r3, #0]
 800e412:	2b00      	cmp	r3, #0
 800e414:	d041      	beq.n	800e49a <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800e416:	69fb      	ldr	r3, [r7, #28]
 800e418:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e41a:	2b00      	cmp	r3, #0
 800e41c:	d006      	beq.n	800e42c <tcp_input+0x62c>
 800e41e:	4b73      	ldr	r3, [pc, #460]	; (800e5ec <tcp_input+0x7ec>)
 800e420:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800e424:	4972      	ldr	r1, [pc, #456]	; (800e5f0 <tcp_input+0x7f0>)
 800e426:	4873      	ldr	r0, [pc, #460]	; (800e5f4 <tcp_input+0x7f4>)
 800e428:	f006 f88c 	bl	8014544 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800e42c:	69fb      	ldr	r3, [r7, #28]
 800e42e:	8b5b      	ldrh	r3, [r3, #26]
 800e430:	f003 0310 	and.w	r3, r3, #16
 800e434:	2b00      	cmp	r3, #0
 800e436:	d008      	beq.n	800e44a <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800e438:	4b6b      	ldr	r3, [pc, #428]	; (800e5e8 <tcp_input+0x7e8>)
 800e43a:	681b      	ldr	r3, [r3, #0]
 800e43c:	4618      	mov	r0, r3
 800e43e:	f7fd feb7 	bl	800c1b0 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800e442:	69f8      	ldr	r0, [r7, #28]
 800e444:	f7fe fc3c 	bl	800ccc0 <tcp_abort>
            goto aborted;
 800e448:	e078      	b.n	800e53c <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800e44a:	69fb      	ldr	r3, [r7, #28]
 800e44c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e450:	2b00      	cmp	r3, #0
 800e452:	d00c      	beq.n	800e46e <tcp_input+0x66e>
 800e454:	69fb      	ldr	r3, [r7, #28]
 800e456:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800e45a:	69fb      	ldr	r3, [r7, #28]
 800e45c:	6918      	ldr	r0, [r3, #16]
 800e45e:	4b62      	ldr	r3, [pc, #392]	; (800e5e8 <tcp_input+0x7e8>)
 800e460:	681a      	ldr	r2, [r3, #0]
 800e462:	2300      	movs	r3, #0
 800e464:	69f9      	ldr	r1, [r7, #28]
 800e466:	47a0      	blx	r4
 800e468:	4603      	mov	r3, r0
 800e46a:	74fb      	strb	r3, [r7, #19]
 800e46c:	e008      	b.n	800e480 <tcp_input+0x680>
 800e46e:	4b5e      	ldr	r3, [pc, #376]	; (800e5e8 <tcp_input+0x7e8>)
 800e470:	681a      	ldr	r2, [r3, #0]
 800e472:	2300      	movs	r3, #0
 800e474:	69f9      	ldr	r1, [r7, #28]
 800e476:	2000      	movs	r0, #0
 800e478:	f7ff f952 	bl	800d720 <tcp_recv_null>
 800e47c:	4603      	mov	r3, r0
 800e47e:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800e480:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e484:	f113 0f0d 	cmn.w	r3, #13
 800e488:	d053      	beq.n	800e532 <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800e48a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e48e:	2b00      	cmp	r3, #0
 800e490:	d003      	beq.n	800e49a <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800e492:	4b55      	ldr	r3, [pc, #340]	; (800e5e8 <tcp_input+0x7e8>)
 800e494:	681a      	ldr	r2, [r3, #0]
 800e496:	69fb      	ldr	r3, [r7, #28]
 800e498:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800e49a:	4b50      	ldr	r3, [pc, #320]	; (800e5dc <tcp_input+0x7dc>)
 800e49c:	781b      	ldrb	r3, [r3, #0]
 800e49e:	f003 0320 	and.w	r3, r3, #32
 800e4a2:	2b00      	cmp	r3, #0
 800e4a4:	d030      	beq.n	800e508 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 800e4a6:	69fb      	ldr	r3, [r7, #28]
 800e4a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e4aa:	2b00      	cmp	r3, #0
 800e4ac:	d009      	beq.n	800e4c2 <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800e4ae:	69fb      	ldr	r3, [r7, #28]
 800e4b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e4b2:	7b5a      	ldrb	r2, [r3, #13]
 800e4b4:	69fb      	ldr	r3, [r7, #28]
 800e4b6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e4b8:	f042 0220 	orr.w	r2, r2, #32
 800e4bc:	b2d2      	uxtb	r2, r2
 800e4be:	735a      	strb	r2, [r3, #13]
 800e4c0:	e022      	b.n	800e508 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800e4c2:	69fb      	ldr	r3, [r7, #28]
 800e4c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e4c6:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800e4ca:	d005      	beq.n	800e4d8 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 800e4cc:	69fb      	ldr	r3, [r7, #28]
 800e4ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e4d0:	3301      	adds	r3, #1
 800e4d2:	b29a      	uxth	r2, r3
 800e4d4:	69fb      	ldr	r3, [r7, #28]
 800e4d6:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800e4d8:	69fb      	ldr	r3, [r7, #28]
 800e4da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e4de:	2b00      	cmp	r3, #0
 800e4e0:	d00b      	beq.n	800e4fa <tcp_input+0x6fa>
 800e4e2:	69fb      	ldr	r3, [r7, #28]
 800e4e4:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800e4e8:	69fb      	ldr	r3, [r7, #28]
 800e4ea:	6918      	ldr	r0, [r3, #16]
 800e4ec:	2300      	movs	r3, #0
 800e4ee:	2200      	movs	r2, #0
 800e4f0:	69f9      	ldr	r1, [r7, #28]
 800e4f2:	47a0      	blx	r4
 800e4f4:	4603      	mov	r3, r0
 800e4f6:	74fb      	strb	r3, [r7, #19]
 800e4f8:	e001      	b.n	800e4fe <tcp_input+0x6fe>
 800e4fa:	2300      	movs	r3, #0
 800e4fc:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800e4fe:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e502:	f113 0f0d 	cmn.w	r3, #13
 800e506:	d016      	beq.n	800e536 <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800e508:	4b33      	ldr	r3, [pc, #204]	; (800e5d8 <tcp_input+0x7d8>)
 800e50a:	2200      	movs	r2, #0
 800e50c:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800e50e:	69f8      	ldr	r0, [r7, #28]
 800e510:	f000 f880 	bl	800e614 <tcp_input_delayed_close>
 800e514:	4603      	mov	r3, r0
 800e516:	2b00      	cmp	r3, #0
 800e518:	d10f      	bne.n	800e53a <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800e51a:	69f8      	ldr	r0, [r7, #28]
 800e51c:	f002 fab8 	bl	8010a90 <tcp_output>
 800e520:	e00c      	b.n	800e53c <tcp_input+0x73c>
        goto aborted;
 800e522:	bf00      	nop
 800e524:	e00a      	b.n	800e53c <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800e526:	bf00      	nop
 800e528:	e008      	b.n	800e53c <tcp_input+0x73c>
              goto aborted;
 800e52a:	bf00      	nop
 800e52c:	e006      	b.n	800e53c <tcp_input+0x73c>
          goto aborted;
 800e52e:	bf00      	nop
 800e530:	e004      	b.n	800e53c <tcp_input+0x73c>
            goto aborted;
 800e532:	bf00      	nop
 800e534:	e002      	b.n	800e53c <tcp_input+0x73c>
              goto aborted;
 800e536:	bf00      	nop
 800e538:	e000      	b.n	800e53c <tcp_input+0x73c>
          goto aborted;
 800e53a:	bf00      	nop
    tcp_input_pcb = NULL;
 800e53c:	4b26      	ldr	r3, [pc, #152]	; (800e5d8 <tcp_input+0x7d8>)
 800e53e:	2200      	movs	r2, #0
 800e540:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800e542:	4b29      	ldr	r3, [pc, #164]	; (800e5e8 <tcp_input+0x7e8>)
 800e544:	2200      	movs	r2, #0
 800e546:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800e548:	4b2b      	ldr	r3, [pc, #172]	; (800e5f8 <tcp_input+0x7f8>)
 800e54a:	685b      	ldr	r3, [r3, #4]
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	d03f      	beq.n	800e5d0 <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 800e550:	4b29      	ldr	r3, [pc, #164]	; (800e5f8 <tcp_input+0x7f8>)
 800e552:	685b      	ldr	r3, [r3, #4]
 800e554:	4618      	mov	r0, r3
 800e556:	f7fd fe2b 	bl	800c1b0 <pbuf_free>
      inseg.p = NULL;
 800e55a:	4b27      	ldr	r3, [pc, #156]	; (800e5f8 <tcp_input+0x7f8>)
 800e55c:	2200      	movs	r2, #0
 800e55e:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800e560:	e036      	b.n	800e5d0 <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800e562:	4b26      	ldr	r3, [pc, #152]	; (800e5fc <tcp_input+0x7fc>)
 800e564:	681b      	ldr	r3, [r3, #0]
 800e566:	899b      	ldrh	r3, [r3, #12]
 800e568:	b29b      	uxth	r3, r3
 800e56a:	4618      	mov	r0, r3
 800e56c:	f7fc fb8d 	bl	800ac8a <lwip_htons>
 800e570:	4603      	mov	r3, r0
 800e572:	b2db      	uxtb	r3, r3
 800e574:	f003 0304 	and.w	r3, r3, #4
 800e578:	2b00      	cmp	r3, #0
 800e57a:	d118      	bne.n	800e5ae <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e57c:	4b20      	ldr	r3, [pc, #128]	; (800e600 <tcp_input+0x800>)
 800e57e:	6819      	ldr	r1, [r3, #0]
 800e580:	4b20      	ldr	r3, [pc, #128]	; (800e604 <tcp_input+0x804>)
 800e582:	881b      	ldrh	r3, [r3, #0]
 800e584:	461a      	mov	r2, r3
 800e586:	4b20      	ldr	r3, [pc, #128]	; (800e608 <tcp_input+0x808>)
 800e588:	681b      	ldr	r3, [r3, #0]
 800e58a:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e58c:	4b1b      	ldr	r3, [pc, #108]	; (800e5fc <tcp_input+0x7fc>)
 800e58e:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e590:	885b      	ldrh	r3, [r3, #2]
 800e592:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e594:	4a19      	ldr	r2, [pc, #100]	; (800e5fc <tcp_input+0x7fc>)
 800e596:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e598:	8812      	ldrh	r2, [r2, #0]
 800e59a:	b292      	uxth	r2, r2
 800e59c:	9202      	str	r2, [sp, #8]
 800e59e:	9301      	str	r3, [sp, #4]
 800e5a0:	4b1a      	ldr	r3, [pc, #104]	; (800e60c <tcp_input+0x80c>)
 800e5a2:	9300      	str	r3, [sp, #0]
 800e5a4:	4b1a      	ldr	r3, [pc, #104]	; (800e610 <tcp_input+0x810>)
 800e5a6:	4602      	mov	r2, r0
 800e5a8:	2000      	movs	r0, #0
 800e5aa:	f003 f825 	bl	80115f8 <tcp_rst>
    pbuf_free(p);
 800e5ae:	6878      	ldr	r0, [r7, #4]
 800e5b0:	f7fd fdfe 	bl	800c1b0 <pbuf_free>
  return;
 800e5b4:	e00c      	b.n	800e5d0 <tcp_input+0x7d0>
    goto dropped;
 800e5b6:	bf00      	nop
 800e5b8:	e006      	b.n	800e5c8 <tcp_input+0x7c8>
    goto dropped;
 800e5ba:	bf00      	nop
 800e5bc:	e004      	b.n	800e5c8 <tcp_input+0x7c8>
    goto dropped;
 800e5be:	bf00      	nop
 800e5c0:	e002      	b.n	800e5c8 <tcp_input+0x7c8>
      goto dropped;
 800e5c2:	bf00      	nop
 800e5c4:	e000      	b.n	800e5c8 <tcp_input+0x7c8>
      goto dropped;
 800e5c6:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800e5c8:	6878      	ldr	r0, [r7, #4]
 800e5ca:	f7fd fdf1 	bl	800c1b0 <pbuf_free>
 800e5ce:	e000      	b.n	800e5d2 <tcp_input+0x7d2>
  return;
 800e5d0:	bf00      	nop
}
 800e5d2:	3724      	adds	r7, #36	; 0x24
 800e5d4:	46bd      	mov	sp, r7
 800e5d6:	bd90      	pop	{r4, r7, pc}
 800e5d8:	200072b4 	.word	0x200072b4
 800e5dc:	20000115 	.word	0x20000115
 800e5e0:	200072a0 	.word	0x200072a0
 800e5e4:	20000110 	.word	0x20000110
 800e5e8:	20000118 	.word	0x20000118
 800e5ec:	08016b50 	.word	0x08016b50
 800e5f0:	08016d04 	.word	0x08016d04
 800e5f4:	08016b9c 	.word	0x08016b9c
 800e5f8:	200000e8 	.word	0x200000e8
 800e5fc:	200000f8 	.word	0x200000f8
 800e600:	2000010c 	.word	0x2000010c
 800e604:	20000112 	.word	0x20000112
 800e608:	20000108 	.word	0x20000108
 800e60c:	20003d6c 	.word	0x20003d6c
 800e610:	20003d70 	.word	0x20003d70

0800e614 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800e614:	b580      	push	{r7, lr}
 800e616:	b082      	sub	sp, #8
 800e618:	af00      	add	r7, sp, #0
 800e61a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	2b00      	cmp	r3, #0
 800e620:	d106      	bne.n	800e630 <tcp_input_delayed_close+0x1c>
 800e622:	4b17      	ldr	r3, [pc, #92]	; (800e680 <tcp_input_delayed_close+0x6c>)
 800e624:	f240 225a 	movw	r2, #602	; 0x25a
 800e628:	4916      	ldr	r1, [pc, #88]	; (800e684 <tcp_input_delayed_close+0x70>)
 800e62a:	4817      	ldr	r0, [pc, #92]	; (800e688 <tcp_input_delayed_close+0x74>)
 800e62c:	f005 ff8a 	bl	8014544 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800e630:	4b16      	ldr	r3, [pc, #88]	; (800e68c <tcp_input_delayed_close+0x78>)
 800e632:	781b      	ldrb	r3, [r3, #0]
 800e634:	f003 0310 	and.w	r3, r3, #16
 800e638:	2b00      	cmp	r3, #0
 800e63a:	d01c      	beq.n	800e676 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	8b5b      	ldrh	r3, [r3, #26]
 800e640:	f003 0310 	and.w	r3, r3, #16
 800e644:	2b00      	cmp	r3, #0
 800e646:	d10d      	bne.n	800e664 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e64e:	2b00      	cmp	r3, #0
 800e650:	d008      	beq.n	800e664 <tcp_input_delayed_close+0x50>
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e658:	687a      	ldr	r2, [r7, #4]
 800e65a:	6912      	ldr	r2, [r2, #16]
 800e65c:	f06f 010e 	mvn.w	r1, #14
 800e660:	4610      	mov	r0, r2
 800e662:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800e664:	6879      	ldr	r1, [r7, #4]
 800e666:	480a      	ldr	r0, [pc, #40]	; (800e690 <tcp_input_delayed_close+0x7c>)
 800e668:	f7ff fa52 	bl	800db10 <tcp_pcb_remove>
    tcp_free(pcb);
 800e66c:	6878      	ldr	r0, [r7, #4]
 800e66e:	f7fe f83f 	bl	800c6f0 <tcp_free>
    return 1;
 800e672:	2301      	movs	r3, #1
 800e674:	e000      	b.n	800e678 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800e676:	2300      	movs	r3, #0
}
 800e678:	4618      	mov	r0, r3
 800e67a:	3708      	adds	r7, #8
 800e67c:	46bd      	mov	sp, r7
 800e67e:	bd80      	pop	{r7, pc}
 800e680:	08016b50 	.word	0x08016b50
 800e684:	08016d20 	.word	0x08016d20
 800e688:	08016b9c 	.word	0x08016b9c
 800e68c:	20000115 	.word	0x20000115
 800e690:	200072a0 	.word	0x200072a0

0800e694 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800e694:	b590      	push	{r4, r7, lr}
 800e696:	b08b      	sub	sp, #44	; 0x2c
 800e698:	af04      	add	r7, sp, #16
 800e69a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800e69c:	4b6f      	ldr	r3, [pc, #444]	; (800e85c <tcp_listen_input+0x1c8>)
 800e69e:	781b      	ldrb	r3, [r3, #0]
 800e6a0:	f003 0304 	and.w	r3, r3, #4
 800e6a4:	2b00      	cmp	r3, #0
 800e6a6:	f040 80d2 	bne.w	800e84e <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	2b00      	cmp	r3, #0
 800e6ae:	d106      	bne.n	800e6be <tcp_listen_input+0x2a>
 800e6b0:	4b6b      	ldr	r3, [pc, #428]	; (800e860 <tcp_listen_input+0x1cc>)
 800e6b2:	f240 2281 	movw	r2, #641	; 0x281
 800e6b6:	496b      	ldr	r1, [pc, #428]	; (800e864 <tcp_listen_input+0x1d0>)
 800e6b8:	486b      	ldr	r0, [pc, #428]	; (800e868 <tcp_listen_input+0x1d4>)
 800e6ba:	f005 ff43 	bl	8014544 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800e6be:	4b67      	ldr	r3, [pc, #412]	; (800e85c <tcp_listen_input+0x1c8>)
 800e6c0:	781b      	ldrb	r3, [r3, #0]
 800e6c2:	f003 0310 	and.w	r3, r3, #16
 800e6c6:	2b00      	cmp	r3, #0
 800e6c8:	d019      	beq.n	800e6fe <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e6ca:	4b68      	ldr	r3, [pc, #416]	; (800e86c <tcp_listen_input+0x1d8>)
 800e6cc:	6819      	ldr	r1, [r3, #0]
 800e6ce:	4b68      	ldr	r3, [pc, #416]	; (800e870 <tcp_listen_input+0x1dc>)
 800e6d0:	881b      	ldrh	r3, [r3, #0]
 800e6d2:	461a      	mov	r2, r3
 800e6d4:	4b67      	ldr	r3, [pc, #412]	; (800e874 <tcp_listen_input+0x1e0>)
 800e6d6:	681b      	ldr	r3, [r3, #0]
 800e6d8:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e6da:	4b67      	ldr	r3, [pc, #412]	; (800e878 <tcp_listen_input+0x1e4>)
 800e6dc:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e6de:	885b      	ldrh	r3, [r3, #2]
 800e6e0:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e6e2:	4a65      	ldr	r2, [pc, #404]	; (800e878 <tcp_listen_input+0x1e4>)
 800e6e4:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e6e6:	8812      	ldrh	r2, [r2, #0]
 800e6e8:	b292      	uxth	r2, r2
 800e6ea:	9202      	str	r2, [sp, #8]
 800e6ec:	9301      	str	r3, [sp, #4]
 800e6ee:	4b63      	ldr	r3, [pc, #396]	; (800e87c <tcp_listen_input+0x1e8>)
 800e6f0:	9300      	str	r3, [sp, #0]
 800e6f2:	4b63      	ldr	r3, [pc, #396]	; (800e880 <tcp_listen_input+0x1ec>)
 800e6f4:	4602      	mov	r2, r0
 800e6f6:	6878      	ldr	r0, [r7, #4]
 800e6f8:	f002 ff7e 	bl	80115f8 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800e6fc:	e0a9      	b.n	800e852 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800e6fe:	4b57      	ldr	r3, [pc, #348]	; (800e85c <tcp_listen_input+0x1c8>)
 800e700:	781b      	ldrb	r3, [r3, #0]
 800e702:	f003 0302 	and.w	r3, r3, #2
 800e706:	2b00      	cmp	r3, #0
 800e708:	f000 80a3 	beq.w	800e852 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	7d5b      	ldrb	r3, [r3, #21]
 800e710:	4618      	mov	r0, r3
 800e712:	f7ff f929 	bl	800d968 <tcp_alloc>
 800e716:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800e718:	697b      	ldr	r3, [r7, #20]
 800e71a:	2b00      	cmp	r3, #0
 800e71c:	d111      	bne.n	800e742 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	699b      	ldr	r3, [r3, #24]
 800e722:	2b00      	cmp	r3, #0
 800e724:	d00a      	beq.n	800e73c <tcp_listen_input+0xa8>
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	699b      	ldr	r3, [r3, #24]
 800e72a:	687a      	ldr	r2, [r7, #4]
 800e72c:	6910      	ldr	r0, [r2, #16]
 800e72e:	f04f 32ff 	mov.w	r2, #4294967295
 800e732:	2100      	movs	r1, #0
 800e734:	4798      	blx	r3
 800e736:	4603      	mov	r3, r0
 800e738:	73bb      	strb	r3, [r7, #14]
      return;
 800e73a:	e08b      	b.n	800e854 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800e73c:	23f0      	movs	r3, #240	; 0xf0
 800e73e:	73bb      	strb	r3, [r7, #14]
      return;
 800e740:	e088      	b.n	800e854 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800e742:	4b50      	ldr	r3, [pc, #320]	; (800e884 <tcp_listen_input+0x1f0>)
 800e744:	695a      	ldr	r2, [r3, #20]
 800e746:	697b      	ldr	r3, [r7, #20]
 800e748:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800e74a:	4b4e      	ldr	r3, [pc, #312]	; (800e884 <tcp_listen_input+0x1f0>)
 800e74c:	691a      	ldr	r2, [r3, #16]
 800e74e:	697b      	ldr	r3, [r7, #20]
 800e750:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	8ada      	ldrh	r2, [r3, #22]
 800e756:	697b      	ldr	r3, [r7, #20]
 800e758:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800e75a:	4b47      	ldr	r3, [pc, #284]	; (800e878 <tcp_listen_input+0x1e4>)
 800e75c:	681b      	ldr	r3, [r3, #0]
 800e75e:	881b      	ldrh	r3, [r3, #0]
 800e760:	b29a      	uxth	r2, r3
 800e762:	697b      	ldr	r3, [r7, #20]
 800e764:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800e766:	697b      	ldr	r3, [r7, #20]
 800e768:	2203      	movs	r2, #3
 800e76a:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800e76c:	4b41      	ldr	r3, [pc, #260]	; (800e874 <tcp_listen_input+0x1e0>)
 800e76e:	681b      	ldr	r3, [r3, #0]
 800e770:	1c5a      	adds	r2, r3, #1
 800e772:	697b      	ldr	r3, [r7, #20]
 800e774:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800e776:	697b      	ldr	r3, [r7, #20]
 800e778:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e77a:	697b      	ldr	r3, [r7, #20]
 800e77c:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800e77e:	6978      	ldr	r0, [r7, #20]
 800e780:	f7ff fa5a 	bl	800dc38 <tcp_next_iss>
 800e784:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800e786:	697b      	ldr	r3, [r7, #20]
 800e788:	693a      	ldr	r2, [r7, #16]
 800e78a:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800e78c:	697b      	ldr	r3, [r7, #20]
 800e78e:	693a      	ldr	r2, [r7, #16]
 800e790:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800e792:	697b      	ldr	r3, [r7, #20]
 800e794:	693a      	ldr	r2, [r7, #16]
 800e796:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800e798:	697b      	ldr	r3, [r7, #20]
 800e79a:	693a      	ldr	r2, [r7, #16]
 800e79c:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800e79e:	4b35      	ldr	r3, [pc, #212]	; (800e874 <tcp_listen_input+0x1e0>)
 800e7a0:	681b      	ldr	r3, [r3, #0]
 800e7a2:	1e5a      	subs	r2, r3, #1
 800e7a4:	697b      	ldr	r3, [r7, #20]
 800e7a6:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	691a      	ldr	r2, [r3, #16]
 800e7ac:	697b      	ldr	r3, [r7, #20]
 800e7ae:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800e7b0:	697b      	ldr	r3, [r7, #20]
 800e7b2:	687a      	ldr	r2, [r7, #4]
 800e7b4:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	7a5b      	ldrb	r3, [r3, #9]
 800e7ba:	f003 030c 	and.w	r3, r3, #12
 800e7be:	b2da      	uxtb	r2, r3
 800e7c0:	697b      	ldr	r3, [r7, #20]
 800e7c2:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	7a1a      	ldrb	r2, [r3, #8]
 800e7c8:	697b      	ldr	r3, [r7, #20]
 800e7ca:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800e7cc:	4b2e      	ldr	r3, [pc, #184]	; (800e888 <tcp_listen_input+0x1f4>)
 800e7ce:	681a      	ldr	r2, [r3, #0]
 800e7d0:	697b      	ldr	r3, [r7, #20]
 800e7d2:	60da      	str	r2, [r3, #12]
 800e7d4:	4a2c      	ldr	r2, [pc, #176]	; (800e888 <tcp_listen_input+0x1f4>)
 800e7d6:	697b      	ldr	r3, [r7, #20]
 800e7d8:	6013      	str	r3, [r2, #0]
 800e7da:	f003 f8cf 	bl	801197c <tcp_timer_needed>
 800e7de:	4b2b      	ldr	r3, [pc, #172]	; (800e88c <tcp_listen_input+0x1f8>)
 800e7e0:	2201      	movs	r2, #1
 800e7e2:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800e7e4:	6978      	ldr	r0, [r7, #20]
 800e7e6:	f001 fd8d 	bl	8010304 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800e7ea:	4b23      	ldr	r3, [pc, #140]	; (800e878 <tcp_listen_input+0x1e4>)
 800e7ec:	681b      	ldr	r3, [r3, #0]
 800e7ee:	89db      	ldrh	r3, [r3, #14]
 800e7f0:	b29a      	uxth	r2, r3
 800e7f2:	697b      	ldr	r3, [r7, #20]
 800e7f4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800e7f8:	697b      	ldr	r3, [r7, #20]
 800e7fa:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800e7fe:	697b      	ldr	r3, [r7, #20]
 800e800:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800e804:	697b      	ldr	r3, [r7, #20]
 800e806:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800e808:	697b      	ldr	r3, [r7, #20]
 800e80a:	3304      	adds	r3, #4
 800e80c:	4618      	mov	r0, r3
 800e80e:	f004 fc51 	bl	80130b4 <ip4_route>
 800e812:	4601      	mov	r1, r0
 800e814:	697b      	ldr	r3, [r7, #20]
 800e816:	3304      	adds	r3, #4
 800e818:	461a      	mov	r2, r3
 800e81a:	4620      	mov	r0, r4
 800e81c:	f7ff fa32 	bl	800dc84 <tcp_eff_send_mss_netif>
 800e820:	4603      	mov	r3, r0
 800e822:	461a      	mov	r2, r3
 800e824:	697b      	ldr	r3, [r7, #20]
 800e826:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800e828:	2112      	movs	r1, #18
 800e82a:	6978      	ldr	r0, [r7, #20]
 800e82c:	f002 f842 	bl	80108b4 <tcp_enqueue_flags>
 800e830:	4603      	mov	r3, r0
 800e832:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800e834:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e838:	2b00      	cmp	r3, #0
 800e83a:	d004      	beq.n	800e846 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800e83c:	2100      	movs	r1, #0
 800e83e:	6978      	ldr	r0, [r7, #20]
 800e840:	f7fe f980 	bl	800cb44 <tcp_abandon>
      return;
 800e844:	e006      	b.n	800e854 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800e846:	6978      	ldr	r0, [r7, #20]
 800e848:	f002 f922 	bl	8010a90 <tcp_output>
  return;
 800e84c:	e001      	b.n	800e852 <tcp_listen_input+0x1be>
    return;
 800e84e:	bf00      	nop
 800e850:	e000      	b.n	800e854 <tcp_listen_input+0x1c0>
  return;
 800e852:	bf00      	nop
}
 800e854:	371c      	adds	r7, #28
 800e856:	46bd      	mov	sp, r7
 800e858:	bd90      	pop	{r4, r7, pc}
 800e85a:	bf00      	nop
 800e85c:	20000114 	.word	0x20000114
 800e860:	08016b50 	.word	0x08016b50
 800e864:	08016d48 	.word	0x08016d48
 800e868:	08016b9c 	.word	0x08016b9c
 800e86c:	2000010c 	.word	0x2000010c
 800e870:	20000112 	.word	0x20000112
 800e874:	20000108 	.word	0x20000108
 800e878:	200000f8 	.word	0x200000f8
 800e87c:	20003d6c 	.word	0x20003d6c
 800e880:	20003d70 	.word	0x20003d70
 800e884:	20003d5c 	.word	0x20003d5c
 800e888:	200072a0 	.word	0x200072a0
 800e88c:	2000729c 	.word	0x2000729c

0800e890 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800e890:	b580      	push	{r7, lr}
 800e892:	b086      	sub	sp, #24
 800e894:	af04      	add	r7, sp, #16
 800e896:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800e898:	4b2f      	ldr	r3, [pc, #188]	; (800e958 <tcp_timewait_input+0xc8>)
 800e89a:	781b      	ldrb	r3, [r3, #0]
 800e89c:	f003 0304 	and.w	r3, r3, #4
 800e8a0:	2b00      	cmp	r3, #0
 800e8a2:	d153      	bne.n	800e94c <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	2b00      	cmp	r3, #0
 800e8a8:	d106      	bne.n	800e8b8 <tcp_timewait_input+0x28>
 800e8aa:	4b2c      	ldr	r3, [pc, #176]	; (800e95c <tcp_timewait_input+0xcc>)
 800e8ac:	f240 22ee 	movw	r2, #750	; 0x2ee
 800e8b0:	492b      	ldr	r1, [pc, #172]	; (800e960 <tcp_timewait_input+0xd0>)
 800e8b2:	482c      	ldr	r0, [pc, #176]	; (800e964 <tcp_timewait_input+0xd4>)
 800e8b4:	f005 fe46 	bl	8014544 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800e8b8:	4b27      	ldr	r3, [pc, #156]	; (800e958 <tcp_timewait_input+0xc8>)
 800e8ba:	781b      	ldrb	r3, [r3, #0]
 800e8bc:	f003 0302 	and.w	r3, r3, #2
 800e8c0:	2b00      	cmp	r3, #0
 800e8c2:	d02a      	beq.n	800e91a <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800e8c4:	4b28      	ldr	r3, [pc, #160]	; (800e968 <tcp_timewait_input+0xd8>)
 800e8c6:	681a      	ldr	r2, [r3, #0]
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8cc:	1ad3      	subs	r3, r2, r3
 800e8ce:	2b00      	cmp	r3, #0
 800e8d0:	db2d      	blt.n	800e92e <tcp_timewait_input+0x9e>
 800e8d2:	4b25      	ldr	r3, [pc, #148]	; (800e968 <tcp_timewait_input+0xd8>)
 800e8d4:	681a      	ldr	r2, [r3, #0]
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8da:	6879      	ldr	r1, [r7, #4]
 800e8dc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e8de:	440b      	add	r3, r1
 800e8e0:	1ad3      	subs	r3, r2, r3
 800e8e2:	2b00      	cmp	r3, #0
 800e8e4:	dc23      	bgt.n	800e92e <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e8e6:	4b21      	ldr	r3, [pc, #132]	; (800e96c <tcp_timewait_input+0xdc>)
 800e8e8:	6819      	ldr	r1, [r3, #0]
 800e8ea:	4b21      	ldr	r3, [pc, #132]	; (800e970 <tcp_timewait_input+0xe0>)
 800e8ec:	881b      	ldrh	r3, [r3, #0]
 800e8ee:	461a      	mov	r2, r3
 800e8f0:	4b1d      	ldr	r3, [pc, #116]	; (800e968 <tcp_timewait_input+0xd8>)
 800e8f2:	681b      	ldr	r3, [r3, #0]
 800e8f4:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e8f6:	4b1f      	ldr	r3, [pc, #124]	; (800e974 <tcp_timewait_input+0xe4>)
 800e8f8:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e8fa:	885b      	ldrh	r3, [r3, #2]
 800e8fc:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e8fe:	4a1d      	ldr	r2, [pc, #116]	; (800e974 <tcp_timewait_input+0xe4>)
 800e900:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e902:	8812      	ldrh	r2, [r2, #0]
 800e904:	b292      	uxth	r2, r2
 800e906:	9202      	str	r2, [sp, #8]
 800e908:	9301      	str	r3, [sp, #4]
 800e90a:	4b1b      	ldr	r3, [pc, #108]	; (800e978 <tcp_timewait_input+0xe8>)
 800e90c:	9300      	str	r3, [sp, #0]
 800e90e:	4b1b      	ldr	r3, [pc, #108]	; (800e97c <tcp_timewait_input+0xec>)
 800e910:	4602      	mov	r2, r0
 800e912:	6878      	ldr	r0, [r7, #4]
 800e914:	f002 fe70 	bl	80115f8 <tcp_rst>
      return;
 800e918:	e01b      	b.n	800e952 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800e91a:	4b0f      	ldr	r3, [pc, #60]	; (800e958 <tcp_timewait_input+0xc8>)
 800e91c:	781b      	ldrb	r3, [r3, #0]
 800e91e:	f003 0301 	and.w	r3, r3, #1
 800e922:	2b00      	cmp	r3, #0
 800e924:	d003      	beq.n	800e92e <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800e926:	4b16      	ldr	r3, [pc, #88]	; (800e980 <tcp_timewait_input+0xf0>)
 800e928:	681a      	ldr	r2, [r3, #0]
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800e92e:	4b10      	ldr	r3, [pc, #64]	; (800e970 <tcp_timewait_input+0xe0>)
 800e930:	881b      	ldrh	r3, [r3, #0]
 800e932:	2b00      	cmp	r3, #0
 800e934:	d00c      	beq.n	800e950 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	8b5b      	ldrh	r3, [r3, #26]
 800e93a:	f043 0302 	orr.w	r3, r3, #2
 800e93e:	b29a      	uxth	r2, r3
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800e944:	6878      	ldr	r0, [r7, #4]
 800e946:	f002 f8a3 	bl	8010a90 <tcp_output>
  }
  return;
 800e94a:	e001      	b.n	800e950 <tcp_timewait_input+0xc0>
    return;
 800e94c:	bf00      	nop
 800e94e:	e000      	b.n	800e952 <tcp_timewait_input+0xc2>
  return;
 800e950:	bf00      	nop
}
 800e952:	3708      	adds	r7, #8
 800e954:	46bd      	mov	sp, r7
 800e956:	bd80      	pop	{r7, pc}
 800e958:	20000114 	.word	0x20000114
 800e95c:	08016b50 	.word	0x08016b50
 800e960:	08016d68 	.word	0x08016d68
 800e964:	08016b9c 	.word	0x08016b9c
 800e968:	20000108 	.word	0x20000108
 800e96c:	2000010c 	.word	0x2000010c
 800e970:	20000112 	.word	0x20000112
 800e974:	200000f8 	.word	0x200000f8
 800e978:	20003d6c 	.word	0x20003d6c
 800e97c:	20003d70 	.word	0x20003d70
 800e980:	200072a4 	.word	0x200072a4

0800e984 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800e984:	b590      	push	{r4, r7, lr}
 800e986:	b08d      	sub	sp, #52	; 0x34
 800e988:	af04      	add	r7, sp, #16
 800e98a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800e98c:	2300      	movs	r3, #0
 800e98e:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800e990:	2300      	movs	r3, #0
 800e992:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	2b00      	cmp	r3, #0
 800e998:	d106      	bne.n	800e9a8 <tcp_process+0x24>
 800e99a:	4ba5      	ldr	r3, [pc, #660]	; (800ec30 <tcp_process+0x2ac>)
 800e99c:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800e9a0:	49a4      	ldr	r1, [pc, #656]	; (800ec34 <tcp_process+0x2b0>)
 800e9a2:	48a5      	ldr	r0, [pc, #660]	; (800ec38 <tcp_process+0x2b4>)
 800e9a4:	f005 fdce 	bl	8014544 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800e9a8:	4ba4      	ldr	r3, [pc, #656]	; (800ec3c <tcp_process+0x2b8>)
 800e9aa:	781b      	ldrb	r3, [r3, #0]
 800e9ac:	f003 0304 	and.w	r3, r3, #4
 800e9b0:	2b00      	cmp	r3, #0
 800e9b2:	d04e      	beq.n	800ea52 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	7d1b      	ldrb	r3, [r3, #20]
 800e9b8:	2b02      	cmp	r3, #2
 800e9ba:	d108      	bne.n	800e9ce <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e9c0:	4b9f      	ldr	r3, [pc, #636]	; (800ec40 <tcp_process+0x2bc>)
 800e9c2:	681b      	ldr	r3, [r3, #0]
 800e9c4:	429a      	cmp	r2, r3
 800e9c6:	d123      	bne.n	800ea10 <tcp_process+0x8c>
        acceptable = 1;
 800e9c8:	2301      	movs	r3, #1
 800e9ca:	76fb      	strb	r3, [r7, #27]
 800e9cc:	e020      	b.n	800ea10 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e9d2:	4b9c      	ldr	r3, [pc, #624]	; (800ec44 <tcp_process+0x2c0>)
 800e9d4:	681b      	ldr	r3, [r3, #0]
 800e9d6:	429a      	cmp	r2, r3
 800e9d8:	d102      	bne.n	800e9e0 <tcp_process+0x5c>
        acceptable = 1;
 800e9da:	2301      	movs	r3, #1
 800e9dc:	76fb      	strb	r3, [r7, #27]
 800e9de:	e017      	b.n	800ea10 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800e9e0:	4b98      	ldr	r3, [pc, #608]	; (800ec44 <tcp_process+0x2c0>)
 800e9e2:	681a      	ldr	r2, [r3, #0]
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9e8:	1ad3      	subs	r3, r2, r3
 800e9ea:	2b00      	cmp	r3, #0
 800e9ec:	db10      	blt.n	800ea10 <tcp_process+0x8c>
 800e9ee:	4b95      	ldr	r3, [pc, #596]	; (800ec44 <tcp_process+0x2c0>)
 800e9f0:	681a      	ldr	r2, [r3, #0]
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9f6:	6879      	ldr	r1, [r7, #4]
 800e9f8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e9fa:	440b      	add	r3, r1
 800e9fc:	1ad3      	subs	r3, r2, r3
 800e9fe:	2b00      	cmp	r3, #0
 800ea00:	dc06      	bgt.n	800ea10 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	8b5b      	ldrh	r3, [r3, #26]
 800ea06:	f043 0302 	orr.w	r3, r3, #2
 800ea0a:	b29a      	uxth	r2, r3
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800ea10:	7efb      	ldrb	r3, [r7, #27]
 800ea12:	2b00      	cmp	r3, #0
 800ea14:	d01b      	beq.n	800ea4e <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	7d1b      	ldrb	r3, [r3, #20]
 800ea1a:	2b00      	cmp	r3, #0
 800ea1c:	d106      	bne.n	800ea2c <tcp_process+0xa8>
 800ea1e:	4b84      	ldr	r3, [pc, #528]	; (800ec30 <tcp_process+0x2ac>)
 800ea20:	f44f 724e 	mov.w	r2, #824	; 0x338
 800ea24:	4988      	ldr	r1, [pc, #544]	; (800ec48 <tcp_process+0x2c4>)
 800ea26:	4884      	ldr	r0, [pc, #528]	; (800ec38 <tcp_process+0x2b4>)
 800ea28:	f005 fd8c 	bl	8014544 <iprintf>
      recv_flags |= TF_RESET;
 800ea2c:	4b87      	ldr	r3, [pc, #540]	; (800ec4c <tcp_process+0x2c8>)
 800ea2e:	781b      	ldrb	r3, [r3, #0]
 800ea30:	f043 0308 	orr.w	r3, r3, #8
 800ea34:	b2da      	uxtb	r2, r3
 800ea36:	4b85      	ldr	r3, [pc, #532]	; (800ec4c <tcp_process+0x2c8>)
 800ea38:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	8b5b      	ldrh	r3, [r3, #26]
 800ea3e:	f023 0301 	bic.w	r3, r3, #1
 800ea42:	b29a      	uxth	r2, r3
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800ea48:	f06f 030d 	mvn.w	r3, #13
 800ea4c:	e37a      	b.n	800f144 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800ea4e:	2300      	movs	r3, #0
 800ea50:	e378      	b.n	800f144 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800ea52:	4b7a      	ldr	r3, [pc, #488]	; (800ec3c <tcp_process+0x2b8>)
 800ea54:	781b      	ldrb	r3, [r3, #0]
 800ea56:	f003 0302 	and.w	r3, r3, #2
 800ea5a:	2b00      	cmp	r3, #0
 800ea5c:	d010      	beq.n	800ea80 <tcp_process+0xfc>
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	7d1b      	ldrb	r3, [r3, #20]
 800ea62:	2b02      	cmp	r3, #2
 800ea64:	d00c      	beq.n	800ea80 <tcp_process+0xfc>
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	7d1b      	ldrb	r3, [r3, #20]
 800ea6a:	2b03      	cmp	r3, #3
 800ea6c:	d008      	beq.n	800ea80 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	8b5b      	ldrh	r3, [r3, #26]
 800ea72:	f043 0302 	orr.w	r3, r3, #2
 800ea76:	b29a      	uxth	r2, r3
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800ea7c:	2300      	movs	r3, #0
 800ea7e:	e361      	b.n	800f144 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	8b5b      	ldrh	r3, [r3, #26]
 800ea84:	f003 0310 	and.w	r3, r3, #16
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	d103      	bne.n	800ea94 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800ea8c:	4b70      	ldr	r3, [pc, #448]	; (800ec50 <tcp_process+0x2cc>)
 800ea8e:	681a      	ldr	r2, [r3, #0]
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	2200      	movs	r2, #0
 800ea98:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	2200      	movs	r2, #0
 800eaa0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800eaa4:	6878      	ldr	r0, [r7, #4]
 800eaa6:	f001 fc2d 	bl	8010304 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	7d1b      	ldrb	r3, [r3, #20]
 800eaae:	3b02      	subs	r3, #2
 800eab0:	2b07      	cmp	r3, #7
 800eab2:	f200 8337 	bhi.w	800f124 <tcp_process+0x7a0>
 800eab6:	a201      	add	r2, pc, #4	; (adr r2, 800eabc <tcp_process+0x138>)
 800eab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eabc:	0800eadd 	.word	0x0800eadd
 800eac0:	0800ed0d 	.word	0x0800ed0d
 800eac4:	0800ee85 	.word	0x0800ee85
 800eac8:	0800eeaf 	.word	0x0800eeaf
 800eacc:	0800efd3 	.word	0x0800efd3
 800ead0:	0800ee85 	.word	0x0800ee85
 800ead4:	0800f05f 	.word	0x0800f05f
 800ead8:	0800f0ef 	.word	0x0800f0ef
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800eadc:	4b57      	ldr	r3, [pc, #348]	; (800ec3c <tcp_process+0x2b8>)
 800eade:	781b      	ldrb	r3, [r3, #0]
 800eae0:	f003 0310 	and.w	r3, r3, #16
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	f000 80e4 	beq.w	800ecb2 <tcp_process+0x32e>
 800eaea:	4b54      	ldr	r3, [pc, #336]	; (800ec3c <tcp_process+0x2b8>)
 800eaec:	781b      	ldrb	r3, [r3, #0]
 800eaee:	f003 0302 	and.w	r3, r3, #2
 800eaf2:	2b00      	cmp	r3, #0
 800eaf4:	f000 80dd 	beq.w	800ecb2 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eafc:	1c5a      	adds	r2, r3, #1
 800eafe:	4b50      	ldr	r3, [pc, #320]	; (800ec40 <tcp_process+0x2bc>)
 800eb00:	681b      	ldr	r3, [r3, #0]
 800eb02:	429a      	cmp	r2, r3
 800eb04:	f040 80d5 	bne.w	800ecb2 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800eb08:	4b4e      	ldr	r3, [pc, #312]	; (800ec44 <tcp_process+0x2c0>)
 800eb0a:	681b      	ldr	r3, [r3, #0]
 800eb0c:	1c5a      	adds	r2, r3, #1
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800eb1a:	4b49      	ldr	r3, [pc, #292]	; (800ec40 <tcp_process+0x2bc>)
 800eb1c:	681a      	ldr	r2, [r3, #0]
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800eb22:	4b4c      	ldr	r3, [pc, #304]	; (800ec54 <tcp_process+0x2d0>)
 800eb24:	681b      	ldr	r3, [r3, #0]
 800eb26:	89db      	ldrh	r3, [r3, #14]
 800eb28:	b29a      	uxth	r2, r3
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800eb3c:	4b41      	ldr	r3, [pc, #260]	; (800ec44 <tcp_process+0x2c0>)
 800eb3e:	681b      	ldr	r3, [r3, #0]
 800eb40:	1e5a      	subs	r2, r3, #1
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	2204      	movs	r2, #4
 800eb4a:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	3304      	adds	r3, #4
 800eb54:	4618      	mov	r0, r3
 800eb56:	f004 faad 	bl	80130b4 <ip4_route>
 800eb5a:	4601      	mov	r1, r0
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	3304      	adds	r3, #4
 800eb60:	461a      	mov	r2, r3
 800eb62:	4620      	mov	r0, r4
 800eb64:	f7ff f88e 	bl	800dc84 <tcp_eff_send_mss_netif>
 800eb68:	4603      	mov	r3, r0
 800eb6a:	461a      	mov	r2, r3
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800eb74:	009a      	lsls	r2, r3, #2
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800eb7a:	005b      	lsls	r3, r3, #1
 800eb7c:	f241 111c 	movw	r1, #4380	; 0x111c
 800eb80:	428b      	cmp	r3, r1
 800eb82:	bf38      	it	cc
 800eb84:	460b      	movcc	r3, r1
 800eb86:	429a      	cmp	r2, r3
 800eb88:	d204      	bcs.n	800eb94 <tcp_process+0x210>
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800eb8e:	009b      	lsls	r3, r3, #2
 800eb90:	b29b      	uxth	r3, r3
 800eb92:	e00d      	b.n	800ebb0 <tcp_process+0x22c>
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800eb98:	005b      	lsls	r3, r3, #1
 800eb9a:	f241 121c 	movw	r2, #4380	; 0x111c
 800eb9e:	4293      	cmp	r3, r2
 800eba0:	d904      	bls.n	800ebac <tcp_process+0x228>
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800eba6:	005b      	lsls	r3, r3, #1
 800eba8:	b29b      	uxth	r3, r3
 800ebaa:	e001      	b.n	800ebb0 <tcp_process+0x22c>
 800ebac:	f241 131c 	movw	r3, #4380	; 0x111c
 800ebb0:	687a      	ldr	r2, [r7, #4]
 800ebb2:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ebbc:	2b00      	cmp	r3, #0
 800ebbe:	d106      	bne.n	800ebce <tcp_process+0x24a>
 800ebc0:	4b1b      	ldr	r3, [pc, #108]	; (800ec30 <tcp_process+0x2ac>)
 800ebc2:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800ebc6:	4924      	ldr	r1, [pc, #144]	; (800ec58 <tcp_process+0x2d4>)
 800ebc8:	481b      	ldr	r0, [pc, #108]	; (800ec38 <tcp_process+0x2b4>)
 800ebca:	f005 fcbb 	bl	8014544 <iprintf>
        --pcb->snd_queuelen;
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ebd4:	3b01      	subs	r3, #1
 800ebd6:	b29a      	uxth	r2, r3
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ebe2:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800ebe4:	69fb      	ldr	r3, [r7, #28]
 800ebe6:	2b00      	cmp	r3, #0
 800ebe8:	d111      	bne.n	800ec0e <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ebee:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800ebf0:	69fb      	ldr	r3, [r7, #28]
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	d106      	bne.n	800ec04 <tcp_process+0x280>
 800ebf6:	4b0e      	ldr	r3, [pc, #56]	; (800ec30 <tcp_process+0x2ac>)
 800ebf8:	f44f 725d 	mov.w	r2, #884	; 0x374
 800ebfc:	4917      	ldr	r1, [pc, #92]	; (800ec5c <tcp_process+0x2d8>)
 800ebfe:	480e      	ldr	r0, [pc, #56]	; (800ec38 <tcp_process+0x2b4>)
 800ec00:	f005 fca0 	bl	8014544 <iprintf>
          pcb->unsent = rseg->next;
 800ec04:	69fb      	ldr	r3, [r7, #28]
 800ec06:	681a      	ldr	r2, [r3, #0]
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	66da      	str	r2, [r3, #108]	; 0x6c
 800ec0c:	e003      	b.n	800ec16 <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 800ec0e:	69fb      	ldr	r3, [r7, #28]
 800ec10:	681a      	ldr	r2, [r3, #0]
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800ec16:	69f8      	ldr	r0, [r7, #28]
 800ec18:	f7fe fd3d 	bl	800d696 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ec20:	2b00      	cmp	r3, #0
 800ec22:	d11d      	bne.n	800ec60 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ec2a:	861a      	strh	r2, [r3, #48]	; 0x30
 800ec2c:	e01f      	b.n	800ec6e <tcp_process+0x2ea>
 800ec2e:	bf00      	nop
 800ec30:	08016b50 	.word	0x08016b50
 800ec34:	08016d88 	.word	0x08016d88
 800ec38:	08016b9c 	.word	0x08016b9c
 800ec3c:	20000114 	.word	0x20000114
 800ec40:	2000010c 	.word	0x2000010c
 800ec44:	20000108 	.word	0x20000108
 800ec48:	08016da4 	.word	0x08016da4
 800ec4c:	20000115 	.word	0x20000115
 800ec50:	200072a4 	.word	0x200072a4
 800ec54:	200000f8 	.word	0x200000f8
 800ec58:	08016dc4 	.word	0x08016dc4
 800ec5c:	08016ddc 	.word	0x08016ddc
        } else {
          pcb->rtime = 0;
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	2200      	movs	r2, #0
 800ec64:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	2200      	movs	r2, #0
 800ec6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ec74:	2b00      	cmp	r3, #0
 800ec76:	d00a      	beq.n	800ec8e <tcp_process+0x30a>
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ec7e:	687a      	ldr	r2, [r7, #4]
 800ec80:	6910      	ldr	r0, [r2, #16]
 800ec82:	2200      	movs	r2, #0
 800ec84:	6879      	ldr	r1, [r7, #4]
 800ec86:	4798      	blx	r3
 800ec88:	4603      	mov	r3, r0
 800ec8a:	76bb      	strb	r3, [r7, #26]
 800ec8c:	e001      	b.n	800ec92 <tcp_process+0x30e>
 800ec8e:	2300      	movs	r3, #0
 800ec90:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800ec92:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800ec96:	f113 0f0d 	cmn.w	r3, #13
 800ec9a:	d102      	bne.n	800eca2 <tcp_process+0x31e>
          return ERR_ABRT;
 800ec9c:	f06f 030c 	mvn.w	r3, #12
 800eca0:	e250      	b.n	800f144 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	8b5b      	ldrh	r3, [r3, #26]
 800eca6:	f043 0302 	orr.w	r3, r3, #2
 800ecaa:	b29a      	uxth	r2, r3
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800ecb0:	e23a      	b.n	800f128 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800ecb2:	4b9d      	ldr	r3, [pc, #628]	; (800ef28 <tcp_process+0x5a4>)
 800ecb4:	781b      	ldrb	r3, [r3, #0]
 800ecb6:	f003 0310 	and.w	r3, r3, #16
 800ecba:	2b00      	cmp	r3, #0
 800ecbc:	f000 8234 	beq.w	800f128 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ecc0:	4b9a      	ldr	r3, [pc, #616]	; (800ef2c <tcp_process+0x5a8>)
 800ecc2:	6819      	ldr	r1, [r3, #0]
 800ecc4:	4b9a      	ldr	r3, [pc, #616]	; (800ef30 <tcp_process+0x5ac>)
 800ecc6:	881b      	ldrh	r3, [r3, #0]
 800ecc8:	461a      	mov	r2, r3
 800ecca:	4b9a      	ldr	r3, [pc, #616]	; (800ef34 <tcp_process+0x5b0>)
 800eccc:	681b      	ldr	r3, [r3, #0]
 800ecce:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ecd0:	4b99      	ldr	r3, [pc, #612]	; (800ef38 <tcp_process+0x5b4>)
 800ecd2:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ecd4:	885b      	ldrh	r3, [r3, #2]
 800ecd6:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ecd8:	4a97      	ldr	r2, [pc, #604]	; (800ef38 <tcp_process+0x5b4>)
 800ecda:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ecdc:	8812      	ldrh	r2, [r2, #0]
 800ecde:	b292      	uxth	r2, r2
 800ece0:	9202      	str	r2, [sp, #8]
 800ece2:	9301      	str	r3, [sp, #4]
 800ece4:	4b95      	ldr	r3, [pc, #596]	; (800ef3c <tcp_process+0x5b8>)
 800ece6:	9300      	str	r3, [sp, #0]
 800ece8:	4b95      	ldr	r3, [pc, #596]	; (800ef40 <tcp_process+0x5bc>)
 800ecea:	4602      	mov	r2, r0
 800ecec:	6878      	ldr	r0, [r7, #4]
 800ecee:	f002 fc83 	bl	80115f8 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ecf8:	2b05      	cmp	r3, #5
 800ecfa:	f200 8215 	bhi.w	800f128 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	2200      	movs	r2, #0
 800ed02:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800ed04:	6878      	ldr	r0, [r7, #4]
 800ed06:	f002 fa4d 	bl	80111a4 <tcp_rexmit_rto>
      break;
 800ed0a:	e20d      	b.n	800f128 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800ed0c:	4b86      	ldr	r3, [pc, #536]	; (800ef28 <tcp_process+0x5a4>)
 800ed0e:	781b      	ldrb	r3, [r3, #0]
 800ed10:	f003 0310 	and.w	r3, r3, #16
 800ed14:	2b00      	cmp	r3, #0
 800ed16:	f000 80a1 	beq.w	800ee5c <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800ed1a:	4b84      	ldr	r3, [pc, #528]	; (800ef2c <tcp_process+0x5a8>)
 800ed1c:	681a      	ldr	r2, [r3, #0]
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ed22:	1ad3      	subs	r3, r2, r3
 800ed24:	3b01      	subs	r3, #1
 800ed26:	2b00      	cmp	r3, #0
 800ed28:	db7e      	blt.n	800ee28 <tcp_process+0x4a4>
 800ed2a:	4b80      	ldr	r3, [pc, #512]	; (800ef2c <tcp_process+0x5a8>)
 800ed2c:	681a      	ldr	r2, [r3, #0]
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ed32:	1ad3      	subs	r3, r2, r3
 800ed34:	2b00      	cmp	r3, #0
 800ed36:	dc77      	bgt.n	800ee28 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	2204      	movs	r2, #4
 800ed3c:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ed42:	2b00      	cmp	r3, #0
 800ed44:	d102      	bne.n	800ed4c <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800ed46:	23fa      	movs	r3, #250	; 0xfa
 800ed48:	76bb      	strb	r3, [r7, #26]
 800ed4a:	e01d      	b.n	800ed88 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ed50:	699b      	ldr	r3, [r3, #24]
 800ed52:	2b00      	cmp	r3, #0
 800ed54:	d106      	bne.n	800ed64 <tcp_process+0x3e0>
 800ed56:	4b7b      	ldr	r3, [pc, #492]	; (800ef44 <tcp_process+0x5c0>)
 800ed58:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800ed5c:	497a      	ldr	r1, [pc, #488]	; (800ef48 <tcp_process+0x5c4>)
 800ed5e:	487b      	ldr	r0, [pc, #492]	; (800ef4c <tcp_process+0x5c8>)
 800ed60:	f005 fbf0 	bl	8014544 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ed68:	699b      	ldr	r3, [r3, #24]
 800ed6a:	2b00      	cmp	r3, #0
 800ed6c:	d00a      	beq.n	800ed84 <tcp_process+0x400>
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ed72:	699b      	ldr	r3, [r3, #24]
 800ed74:	687a      	ldr	r2, [r7, #4]
 800ed76:	6910      	ldr	r0, [r2, #16]
 800ed78:	2200      	movs	r2, #0
 800ed7a:	6879      	ldr	r1, [r7, #4]
 800ed7c:	4798      	blx	r3
 800ed7e:	4603      	mov	r3, r0
 800ed80:	76bb      	strb	r3, [r7, #26]
 800ed82:	e001      	b.n	800ed88 <tcp_process+0x404>
 800ed84:	23f0      	movs	r3, #240	; 0xf0
 800ed86:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800ed88:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800ed8c:	2b00      	cmp	r3, #0
 800ed8e:	d00a      	beq.n	800eda6 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800ed90:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800ed94:	f113 0f0d 	cmn.w	r3, #13
 800ed98:	d002      	beq.n	800eda0 <tcp_process+0x41c>
              tcp_abort(pcb);
 800ed9a:	6878      	ldr	r0, [r7, #4]
 800ed9c:	f7fd ff90 	bl	800ccc0 <tcp_abort>
            }
            return ERR_ABRT;
 800eda0:	f06f 030c 	mvn.w	r3, #12
 800eda4:	e1ce      	b.n	800f144 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800eda6:	6878      	ldr	r0, [r7, #4]
 800eda8:	f000 fae0 	bl	800f36c <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800edac:	4b68      	ldr	r3, [pc, #416]	; (800ef50 <tcp_process+0x5cc>)
 800edae:	881b      	ldrh	r3, [r3, #0]
 800edb0:	2b00      	cmp	r3, #0
 800edb2:	d005      	beq.n	800edc0 <tcp_process+0x43c>
            recv_acked--;
 800edb4:	4b66      	ldr	r3, [pc, #408]	; (800ef50 <tcp_process+0x5cc>)
 800edb6:	881b      	ldrh	r3, [r3, #0]
 800edb8:	3b01      	subs	r3, #1
 800edba:	b29a      	uxth	r2, r3
 800edbc:	4b64      	ldr	r3, [pc, #400]	; (800ef50 <tcp_process+0x5cc>)
 800edbe:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800edc4:	009a      	lsls	r2, r3, #2
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800edca:	005b      	lsls	r3, r3, #1
 800edcc:	f241 111c 	movw	r1, #4380	; 0x111c
 800edd0:	428b      	cmp	r3, r1
 800edd2:	bf38      	it	cc
 800edd4:	460b      	movcc	r3, r1
 800edd6:	429a      	cmp	r2, r3
 800edd8:	d204      	bcs.n	800ede4 <tcp_process+0x460>
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800edde:	009b      	lsls	r3, r3, #2
 800ede0:	b29b      	uxth	r3, r3
 800ede2:	e00d      	b.n	800ee00 <tcp_process+0x47c>
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ede8:	005b      	lsls	r3, r3, #1
 800edea:	f241 121c 	movw	r2, #4380	; 0x111c
 800edee:	4293      	cmp	r3, r2
 800edf0:	d904      	bls.n	800edfc <tcp_process+0x478>
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800edf6:	005b      	lsls	r3, r3, #1
 800edf8:	b29b      	uxth	r3, r3
 800edfa:	e001      	b.n	800ee00 <tcp_process+0x47c>
 800edfc:	f241 131c 	movw	r3, #4380	; 0x111c
 800ee00:	687a      	ldr	r2, [r7, #4]
 800ee02:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800ee06:	4b53      	ldr	r3, [pc, #332]	; (800ef54 <tcp_process+0x5d0>)
 800ee08:	781b      	ldrb	r3, [r3, #0]
 800ee0a:	f003 0320 	and.w	r3, r3, #32
 800ee0e:	2b00      	cmp	r3, #0
 800ee10:	d037      	beq.n	800ee82 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	8b5b      	ldrh	r3, [r3, #26]
 800ee16:	f043 0302 	orr.w	r3, r3, #2
 800ee1a:	b29a      	uxth	r2, r3
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	2207      	movs	r2, #7
 800ee24:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800ee26:	e02c      	b.n	800ee82 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ee28:	4b40      	ldr	r3, [pc, #256]	; (800ef2c <tcp_process+0x5a8>)
 800ee2a:	6819      	ldr	r1, [r3, #0]
 800ee2c:	4b40      	ldr	r3, [pc, #256]	; (800ef30 <tcp_process+0x5ac>)
 800ee2e:	881b      	ldrh	r3, [r3, #0]
 800ee30:	461a      	mov	r2, r3
 800ee32:	4b40      	ldr	r3, [pc, #256]	; (800ef34 <tcp_process+0x5b0>)
 800ee34:	681b      	ldr	r3, [r3, #0]
 800ee36:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ee38:	4b3f      	ldr	r3, [pc, #252]	; (800ef38 <tcp_process+0x5b4>)
 800ee3a:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ee3c:	885b      	ldrh	r3, [r3, #2]
 800ee3e:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ee40:	4a3d      	ldr	r2, [pc, #244]	; (800ef38 <tcp_process+0x5b4>)
 800ee42:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ee44:	8812      	ldrh	r2, [r2, #0]
 800ee46:	b292      	uxth	r2, r2
 800ee48:	9202      	str	r2, [sp, #8]
 800ee4a:	9301      	str	r3, [sp, #4]
 800ee4c:	4b3b      	ldr	r3, [pc, #236]	; (800ef3c <tcp_process+0x5b8>)
 800ee4e:	9300      	str	r3, [sp, #0]
 800ee50:	4b3b      	ldr	r3, [pc, #236]	; (800ef40 <tcp_process+0x5bc>)
 800ee52:	4602      	mov	r2, r0
 800ee54:	6878      	ldr	r0, [r7, #4]
 800ee56:	f002 fbcf 	bl	80115f8 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800ee5a:	e167      	b.n	800f12c <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800ee5c:	4b32      	ldr	r3, [pc, #200]	; (800ef28 <tcp_process+0x5a4>)
 800ee5e:	781b      	ldrb	r3, [r3, #0]
 800ee60:	f003 0302 	and.w	r3, r3, #2
 800ee64:	2b00      	cmp	r3, #0
 800ee66:	f000 8161 	beq.w	800f12c <tcp_process+0x7a8>
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee6e:	1e5a      	subs	r2, r3, #1
 800ee70:	4b30      	ldr	r3, [pc, #192]	; (800ef34 <tcp_process+0x5b0>)
 800ee72:	681b      	ldr	r3, [r3, #0]
 800ee74:	429a      	cmp	r2, r3
 800ee76:	f040 8159 	bne.w	800f12c <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800ee7a:	6878      	ldr	r0, [r7, #4]
 800ee7c:	f002 f9b4 	bl	80111e8 <tcp_rexmit>
      break;
 800ee80:	e154      	b.n	800f12c <tcp_process+0x7a8>
 800ee82:	e153      	b.n	800f12c <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800ee84:	6878      	ldr	r0, [r7, #4]
 800ee86:	f000 fa71 	bl	800f36c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800ee8a:	4b32      	ldr	r3, [pc, #200]	; (800ef54 <tcp_process+0x5d0>)
 800ee8c:	781b      	ldrb	r3, [r3, #0]
 800ee8e:	f003 0320 	and.w	r3, r3, #32
 800ee92:	2b00      	cmp	r3, #0
 800ee94:	f000 814c 	beq.w	800f130 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	8b5b      	ldrh	r3, [r3, #26]
 800ee9c:	f043 0302 	orr.w	r3, r3, #2
 800eea0:	b29a      	uxth	r2, r3
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	2207      	movs	r2, #7
 800eeaa:	751a      	strb	r2, [r3, #20]
      }
      break;
 800eeac:	e140      	b.n	800f130 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800eeae:	6878      	ldr	r0, [r7, #4]
 800eeb0:	f000 fa5c 	bl	800f36c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800eeb4:	4b27      	ldr	r3, [pc, #156]	; (800ef54 <tcp_process+0x5d0>)
 800eeb6:	781b      	ldrb	r3, [r3, #0]
 800eeb8:	f003 0320 	and.w	r3, r3, #32
 800eebc:	2b00      	cmp	r3, #0
 800eebe:	d071      	beq.n	800efa4 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800eec0:	4b19      	ldr	r3, [pc, #100]	; (800ef28 <tcp_process+0x5a4>)
 800eec2:	781b      	ldrb	r3, [r3, #0]
 800eec4:	f003 0310 	and.w	r3, r3, #16
 800eec8:	2b00      	cmp	r3, #0
 800eeca:	d060      	beq.n	800ef8e <tcp_process+0x60a>
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800eed0:	4b16      	ldr	r3, [pc, #88]	; (800ef2c <tcp_process+0x5a8>)
 800eed2:	681b      	ldr	r3, [r3, #0]
 800eed4:	429a      	cmp	r2, r3
 800eed6:	d15a      	bne.n	800ef8e <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800eedc:	2b00      	cmp	r3, #0
 800eede:	d156      	bne.n	800ef8e <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	8b5b      	ldrh	r3, [r3, #26]
 800eee4:	f043 0302 	orr.w	r3, r3, #2
 800eee8:	b29a      	uxth	r2, r3
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800eeee:	6878      	ldr	r0, [r7, #4]
 800eef0:	f7fe fdbe 	bl	800da70 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800eef4:	4b18      	ldr	r3, [pc, #96]	; (800ef58 <tcp_process+0x5d4>)
 800eef6:	681b      	ldr	r3, [r3, #0]
 800eef8:	687a      	ldr	r2, [r7, #4]
 800eefa:	429a      	cmp	r2, r3
 800eefc:	d105      	bne.n	800ef0a <tcp_process+0x586>
 800eefe:	4b16      	ldr	r3, [pc, #88]	; (800ef58 <tcp_process+0x5d4>)
 800ef00:	681b      	ldr	r3, [r3, #0]
 800ef02:	68db      	ldr	r3, [r3, #12]
 800ef04:	4a14      	ldr	r2, [pc, #80]	; (800ef58 <tcp_process+0x5d4>)
 800ef06:	6013      	str	r3, [r2, #0]
 800ef08:	e02e      	b.n	800ef68 <tcp_process+0x5e4>
 800ef0a:	4b13      	ldr	r3, [pc, #76]	; (800ef58 <tcp_process+0x5d4>)
 800ef0c:	681b      	ldr	r3, [r3, #0]
 800ef0e:	617b      	str	r3, [r7, #20]
 800ef10:	e027      	b.n	800ef62 <tcp_process+0x5de>
 800ef12:	697b      	ldr	r3, [r7, #20]
 800ef14:	68db      	ldr	r3, [r3, #12]
 800ef16:	687a      	ldr	r2, [r7, #4]
 800ef18:	429a      	cmp	r2, r3
 800ef1a:	d11f      	bne.n	800ef5c <tcp_process+0x5d8>
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	68da      	ldr	r2, [r3, #12]
 800ef20:	697b      	ldr	r3, [r7, #20]
 800ef22:	60da      	str	r2, [r3, #12]
 800ef24:	e020      	b.n	800ef68 <tcp_process+0x5e4>
 800ef26:	bf00      	nop
 800ef28:	20000114 	.word	0x20000114
 800ef2c:	2000010c 	.word	0x2000010c
 800ef30:	20000112 	.word	0x20000112
 800ef34:	20000108 	.word	0x20000108
 800ef38:	200000f8 	.word	0x200000f8
 800ef3c:	20003d6c 	.word	0x20003d6c
 800ef40:	20003d70 	.word	0x20003d70
 800ef44:	08016b50 	.word	0x08016b50
 800ef48:	08016df0 	.word	0x08016df0
 800ef4c:	08016b9c 	.word	0x08016b9c
 800ef50:	20000110 	.word	0x20000110
 800ef54:	20000115 	.word	0x20000115
 800ef58:	200072a0 	.word	0x200072a0
 800ef5c:	697b      	ldr	r3, [r7, #20]
 800ef5e:	68db      	ldr	r3, [r3, #12]
 800ef60:	617b      	str	r3, [r7, #20]
 800ef62:	697b      	ldr	r3, [r7, #20]
 800ef64:	2b00      	cmp	r3, #0
 800ef66:	d1d4      	bne.n	800ef12 <tcp_process+0x58e>
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	2200      	movs	r2, #0
 800ef6c:	60da      	str	r2, [r3, #12]
 800ef6e:	4b77      	ldr	r3, [pc, #476]	; (800f14c <tcp_process+0x7c8>)
 800ef70:	2201      	movs	r2, #1
 800ef72:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	220a      	movs	r2, #10
 800ef78:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800ef7a:	4b75      	ldr	r3, [pc, #468]	; (800f150 <tcp_process+0x7cc>)
 800ef7c:	681a      	ldr	r2, [r3, #0]
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	60da      	str	r2, [r3, #12]
 800ef82:	4a73      	ldr	r2, [pc, #460]	; (800f150 <tcp_process+0x7cc>)
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	6013      	str	r3, [r2, #0]
 800ef88:	f002 fcf8 	bl	801197c <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800ef8c:	e0d2      	b.n	800f134 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	8b5b      	ldrh	r3, [r3, #26]
 800ef92:	f043 0302 	orr.w	r3, r3, #2
 800ef96:	b29a      	uxth	r2, r3
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	2208      	movs	r2, #8
 800efa0:	751a      	strb	r2, [r3, #20]
      break;
 800efa2:	e0c7      	b.n	800f134 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800efa4:	4b6b      	ldr	r3, [pc, #428]	; (800f154 <tcp_process+0x7d0>)
 800efa6:	781b      	ldrb	r3, [r3, #0]
 800efa8:	f003 0310 	and.w	r3, r3, #16
 800efac:	2b00      	cmp	r3, #0
 800efae:	f000 80c1 	beq.w	800f134 <tcp_process+0x7b0>
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800efb6:	4b68      	ldr	r3, [pc, #416]	; (800f158 <tcp_process+0x7d4>)
 800efb8:	681b      	ldr	r3, [r3, #0]
 800efba:	429a      	cmp	r2, r3
 800efbc:	f040 80ba 	bne.w	800f134 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800efc4:	2b00      	cmp	r3, #0
 800efc6:	f040 80b5 	bne.w	800f134 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	2206      	movs	r2, #6
 800efce:	751a      	strb	r2, [r3, #20]
      break;
 800efd0:	e0b0      	b.n	800f134 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800efd2:	6878      	ldr	r0, [r7, #4]
 800efd4:	f000 f9ca 	bl	800f36c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800efd8:	4b60      	ldr	r3, [pc, #384]	; (800f15c <tcp_process+0x7d8>)
 800efda:	781b      	ldrb	r3, [r3, #0]
 800efdc:	f003 0320 	and.w	r3, r3, #32
 800efe0:	2b00      	cmp	r3, #0
 800efe2:	f000 80a9 	beq.w	800f138 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	8b5b      	ldrh	r3, [r3, #26]
 800efea:	f043 0302 	orr.w	r3, r3, #2
 800efee:	b29a      	uxth	r2, r3
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800eff4:	6878      	ldr	r0, [r7, #4]
 800eff6:	f7fe fd3b 	bl	800da70 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800effa:	4b59      	ldr	r3, [pc, #356]	; (800f160 <tcp_process+0x7dc>)
 800effc:	681b      	ldr	r3, [r3, #0]
 800effe:	687a      	ldr	r2, [r7, #4]
 800f000:	429a      	cmp	r2, r3
 800f002:	d105      	bne.n	800f010 <tcp_process+0x68c>
 800f004:	4b56      	ldr	r3, [pc, #344]	; (800f160 <tcp_process+0x7dc>)
 800f006:	681b      	ldr	r3, [r3, #0]
 800f008:	68db      	ldr	r3, [r3, #12]
 800f00a:	4a55      	ldr	r2, [pc, #340]	; (800f160 <tcp_process+0x7dc>)
 800f00c:	6013      	str	r3, [r2, #0]
 800f00e:	e013      	b.n	800f038 <tcp_process+0x6b4>
 800f010:	4b53      	ldr	r3, [pc, #332]	; (800f160 <tcp_process+0x7dc>)
 800f012:	681b      	ldr	r3, [r3, #0]
 800f014:	613b      	str	r3, [r7, #16]
 800f016:	e00c      	b.n	800f032 <tcp_process+0x6ae>
 800f018:	693b      	ldr	r3, [r7, #16]
 800f01a:	68db      	ldr	r3, [r3, #12]
 800f01c:	687a      	ldr	r2, [r7, #4]
 800f01e:	429a      	cmp	r2, r3
 800f020:	d104      	bne.n	800f02c <tcp_process+0x6a8>
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	68da      	ldr	r2, [r3, #12]
 800f026:	693b      	ldr	r3, [r7, #16]
 800f028:	60da      	str	r2, [r3, #12]
 800f02a:	e005      	b.n	800f038 <tcp_process+0x6b4>
 800f02c:	693b      	ldr	r3, [r7, #16]
 800f02e:	68db      	ldr	r3, [r3, #12]
 800f030:	613b      	str	r3, [r7, #16]
 800f032:	693b      	ldr	r3, [r7, #16]
 800f034:	2b00      	cmp	r3, #0
 800f036:	d1ef      	bne.n	800f018 <tcp_process+0x694>
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	2200      	movs	r2, #0
 800f03c:	60da      	str	r2, [r3, #12]
 800f03e:	4b43      	ldr	r3, [pc, #268]	; (800f14c <tcp_process+0x7c8>)
 800f040:	2201      	movs	r2, #1
 800f042:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	220a      	movs	r2, #10
 800f048:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800f04a:	4b41      	ldr	r3, [pc, #260]	; (800f150 <tcp_process+0x7cc>)
 800f04c:	681a      	ldr	r2, [r3, #0]
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	60da      	str	r2, [r3, #12]
 800f052:	4a3f      	ldr	r2, [pc, #252]	; (800f150 <tcp_process+0x7cc>)
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	6013      	str	r3, [r2, #0]
 800f058:	f002 fc90 	bl	801197c <tcp_timer_needed>
      }
      break;
 800f05c:	e06c      	b.n	800f138 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800f05e:	6878      	ldr	r0, [r7, #4]
 800f060:	f000 f984 	bl	800f36c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800f064:	4b3b      	ldr	r3, [pc, #236]	; (800f154 <tcp_process+0x7d0>)
 800f066:	781b      	ldrb	r3, [r3, #0]
 800f068:	f003 0310 	and.w	r3, r3, #16
 800f06c:	2b00      	cmp	r3, #0
 800f06e:	d065      	beq.n	800f13c <tcp_process+0x7b8>
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f074:	4b38      	ldr	r3, [pc, #224]	; (800f158 <tcp_process+0x7d4>)
 800f076:	681b      	ldr	r3, [r3, #0]
 800f078:	429a      	cmp	r2, r3
 800f07a:	d15f      	bne.n	800f13c <tcp_process+0x7b8>
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f080:	2b00      	cmp	r3, #0
 800f082:	d15b      	bne.n	800f13c <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800f084:	6878      	ldr	r0, [r7, #4]
 800f086:	f7fe fcf3 	bl	800da70 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800f08a:	4b35      	ldr	r3, [pc, #212]	; (800f160 <tcp_process+0x7dc>)
 800f08c:	681b      	ldr	r3, [r3, #0]
 800f08e:	687a      	ldr	r2, [r7, #4]
 800f090:	429a      	cmp	r2, r3
 800f092:	d105      	bne.n	800f0a0 <tcp_process+0x71c>
 800f094:	4b32      	ldr	r3, [pc, #200]	; (800f160 <tcp_process+0x7dc>)
 800f096:	681b      	ldr	r3, [r3, #0]
 800f098:	68db      	ldr	r3, [r3, #12]
 800f09a:	4a31      	ldr	r2, [pc, #196]	; (800f160 <tcp_process+0x7dc>)
 800f09c:	6013      	str	r3, [r2, #0]
 800f09e:	e013      	b.n	800f0c8 <tcp_process+0x744>
 800f0a0:	4b2f      	ldr	r3, [pc, #188]	; (800f160 <tcp_process+0x7dc>)
 800f0a2:	681b      	ldr	r3, [r3, #0]
 800f0a4:	60fb      	str	r3, [r7, #12]
 800f0a6:	e00c      	b.n	800f0c2 <tcp_process+0x73e>
 800f0a8:	68fb      	ldr	r3, [r7, #12]
 800f0aa:	68db      	ldr	r3, [r3, #12]
 800f0ac:	687a      	ldr	r2, [r7, #4]
 800f0ae:	429a      	cmp	r2, r3
 800f0b0:	d104      	bne.n	800f0bc <tcp_process+0x738>
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	68da      	ldr	r2, [r3, #12]
 800f0b6:	68fb      	ldr	r3, [r7, #12]
 800f0b8:	60da      	str	r2, [r3, #12]
 800f0ba:	e005      	b.n	800f0c8 <tcp_process+0x744>
 800f0bc:	68fb      	ldr	r3, [r7, #12]
 800f0be:	68db      	ldr	r3, [r3, #12]
 800f0c0:	60fb      	str	r3, [r7, #12]
 800f0c2:	68fb      	ldr	r3, [r7, #12]
 800f0c4:	2b00      	cmp	r3, #0
 800f0c6:	d1ef      	bne.n	800f0a8 <tcp_process+0x724>
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	2200      	movs	r2, #0
 800f0cc:	60da      	str	r2, [r3, #12]
 800f0ce:	4b1f      	ldr	r3, [pc, #124]	; (800f14c <tcp_process+0x7c8>)
 800f0d0:	2201      	movs	r2, #1
 800f0d2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	220a      	movs	r2, #10
 800f0d8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800f0da:	4b1d      	ldr	r3, [pc, #116]	; (800f150 <tcp_process+0x7cc>)
 800f0dc:	681a      	ldr	r2, [r3, #0]
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	60da      	str	r2, [r3, #12]
 800f0e2:	4a1b      	ldr	r2, [pc, #108]	; (800f150 <tcp_process+0x7cc>)
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	6013      	str	r3, [r2, #0]
 800f0e8:	f002 fc48 	bl	801197c <tcp_timer_needed>
      }
      break;
 800f0ec:	e026      	b.n	800f13c <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800f0ee:	6878      	ldr	r0, [r7, #4]
 800f0f0:	f000 f93c 	bl	800f36c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800f0f4:	4b17      	ldr	r3, [pc, #92]	; (800f154 <tcp_process+0x7d0>)
 800f0f6:	781b      	ldrb	r3, [r3, #0]
 800f0f8:	f003 0310 	and.w	r3, r3, #16
 800f0fc:	2b00      	cmp	r3, #0
 800f0fe:	d01f      	beq.n	800f140 <tcp_process+0x7bc>
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f104:	4b14      	ldr	r3, [pc, #80]	; (800f158 <tcp_process+0x7d4>)
 800f106:	681b      	ldr	r3, [r3, #0]
 800f108:	429a      	cmp	r2, r3
 800f10a:	d119      	bne.n	800f140 <tcp_process+0x7bc>
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f110:	2b00      	cmp	r3, #0
 800f112:	d115      	bne.n	800f140 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800f114:	4b11      	ldr	r3, [pc, #68]	; (800f15c <tcp_process+0x7d8>)
 800f116:	781b      	ldrb	r3, [r3, #0]
 800f118:	f043 0310 	orr.w	r3, r3, #16
 800f11c:	b2da      	uxtb	r2, r3
 800f11e:	4b0f      	ldr	r3, [pc, #60]	; (800f15c <tcp_process+0x7d8>)
 800f120:	701a      	strb	r2, [r3, #0]
      }
      break;
 800f122:	e00d      	b.n	800f140 <tcp_process+0x7bc>
    default:
      break;
 800f124:	bf00      	nop
 800f126:	e00c      	b.n	800f142 <tcp_process+0x7be>
      break;
 800f128:	bf00      	nop
 800f12a:	e00a      	b.n	800f142 <tcp_process+0x7be>
      break;
 800f12c:	bf00      	nop
 800f12e:	e008      	b.n	800f142 <tcp_process+0x7be>
      break;
 800f130:	bf00      	nop
 800f132:	e006      	b.n	800f142 <tcp_process+0x7be>
      break;
 800f134:	bf00      	nop
 800f136:	e004      	b.n	800f142 <tcp_process+0x7be>
      break;
 800f138:	bf00      	nop
 800f13a:	e002      	b.n	800f142 <tcp_process+0x7be>
      break;
 800f13c:	bf00      	nop
 800f13e:	e000      	b.n	800f142 <tcp_process+0x7be>
      break;
 800f140:	bf00      	nop
  }
  return ERR_OK;
 800f142:	2300      	movs	r3, #0
}
 800f144:	4618      	mov	r0, r3
 800f146:	3724      	adds	r7, #36	; 0x24
 800f148:	46bd      	mov	sp, r7
 800f14a:	bd90      	pop	{r4, r7, pc}
 800f14c:	2000729c 	.word	0x2000729c
 800f150:	200072b0 	.word	0x200072b0
 800f154:	20000114 	.word	0x20000114
 800f158:	2000010c 	.word	0x2000010c
 800f15c:	20000115 	.word	0x20000115
 800f160:	200072a0 	.word	0x200072a0

0800f164 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800f164:	b590      	push	{r4, r7, lr}
 800f166:	b085      	sub	sp, #20
 800f168:	af00      	add	r7, sp, #0
 800f16a:	6078      	str	r0, [r7, #4]
 800f16c:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	2b00      	cmp	r3, #0
 800f172:	d106      	bne.n	800f182 <tcp_oos_insert_segment+0x1e>
 800f174:	4b3b      	ldr	r3, [pc, #236]	; (800f264 <tcp_oos_insert_segment+0x100>)
 800f176:	f240 421f 	movw	r2, #1055	; 0x41f
 800f17a:	493b      	ldr	r1, [pc, #236]	; (800f268 <tcp_oos_insert_segment+0x104>)
 800f17c:	483b      	ldr	r0, [pc, #236]	; (800f26c <tcp_oos_insert_segment+0x108>)
 800f17e:	f005 f9e1 	bl	8014544 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	68db      	ldr	r3, [r3, #12]
 800f186:	899b      	ldrh	r3, [r3, #12]
 800f188:	b29b      	uxth	r3, r3
 800f18a:	4618      	mov	r0, r3
 800f18c:	f7fb fd7d 	bl	800ac8a <lwip_htons>
 800f190:	4603      	mov	r3, r0
 800f192:	b2db      	uxtb	r3, r3
 800f194:	f003 0301 	and.w	r3, r3, #1
 800f198:	2b00      	cmp	r3, #0
 800f19a:	d028      	beq.n	800f1ee <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800f19c:	6838      	ldr	r0, [r7, #0]
 800f19e:	f7fe fa65 	bl	800d66c <tcp_segs_free>
    next = NULL;
 800f1a2:	2300      	movs	r3, #0
 800f1a4:	603b      	str	r3, [r7, #0]
 800f1a6:	e056      	b.n	800f256 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800f1a8:	683b      	ldr	r3, [r7, #0]
 800f1aa:	68db      	ldr	r3, [r3, #12]
 800f1ac:	899b      	ldrh	r3, [r3, #12]
 800f1ae:	b29b      	uxth	r3, r3
 800f1b0:	4618      	mov	r0, r3
 800f1b2:	f7fb fd6a 	bl	800ac8a <lwip_htons>
 800f1b6:	4603      	mov	r3, r0
 800f1b8:	b2db      	uxtb	r3, r3
 800f1ba:	f003 0301 	and.w	r3, r3, #1
 800f1be:	2b00      	cmp	r3, #0
 800f1c0:	d00d      	beq.n	800f1de <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	68db      	ldr	r3, [r3, #12]
 800f1c6:	899b      	ldrh	r3, [r3, #12]
 800f1c8:	b29c      	uxth	r4, r3
 800f1ca:	2001      	movs	r0, #1
 800f1cc:	f7fb fd5d 	bl	800ac8a <lwip_htons>
 800f1d0:	4603      	mov	r3, r0
 800f1d2:	461a      	mov	r2, r3
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	68db      	ldr	r3, [r3, #12]
 800f1d8:	4322      	orrs	r2, r4
 800f1da:	b292      	uxth	r2, r2
 800f1dc:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800f1de:	683b      	ldr	r3, [r7, #0]
 800f1e0:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800f1e2:	683b      	ldr	r3, [r7, #0]
 800f1e4:	681b      	ldr	r3, [r3, #0]
 800f1e6:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800f1e8:	68f8      	ldr	r0, [r7, #12]
 800f1ea:	f7fe fa54 	bl	800d696 <tcp_seg_free>
    while (next &&
 800f1ee:	683b      	ldr	r3, [r7, #0]
 800f1f0:	2b00      	cmp	r3, #0
 800f1f2:	d00e      	beq.n	800f212 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	891b      	ldrh	r3, [r3, #8]
 800f1f8:	461a      	mov	r2, r3
 800f1fa:	4b1d      	ldr	r3, [pc, #116]	; (800f270 <tcp_oos_insert_segment+0x10c>)
 800f1fc:	681b      	ldr	r3, [r3, #0]
 800f1fe:	441a      	add	r2, r3
 800f200:	683b      	ldr	r3, [r7, #0]
 800f202:	68db      	ldr	r3, [r3, #12]
 800f204:	685b      	ldr	r3, [r3, #4]
 800f206:	6839      	ldr	r1, [r7, #0]
 800f208:	8909      	ldrh	r1, [r1, #8]
 800f20a:	440b      	add	r3, r1
 800f20c:	1ad3      	subs	r3, r2, r3
    while (next &&
 800f20e:	2b00      	cmp	r3, #0
 800f210:	daca      	bge.n	800f1a8 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800f212:	683b      	ldr	r3, [r7, #0]
 800f214:	2b00      	cmp	r3, #0
 800f216:	d01e      	beq.n	800f256 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	891b      	ldrh	r3, [r3, #8]
 800f21c:	461a      	mov	r2, r3
 800f21e:	4b14      	ldr	r3, [pc, #80]	; (800f270 <tcp_oos_insert_segment+0x10c>)
 800f220:	681b      	ldr	r3, [r3, #0]
 800f222:	441a      	add	r2, r3
 800f224:	683b      	ldr	r3, [r7, #0]
 800f226:	68db      	ldr	r3, [r3, #12]
 800f228:	685b      	ldr	r3, [r3, #4]
 800f22a:	1ad3      	subs	r3, r2, r3
    if (next &&
 800f22c:	2b00      	cmp	r3, #0
 800f22e:	dd12      	ble.n	800f256 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800f230:	683b      	ldr	r3, [r7, #0]
 800f232:	68db      	ldr	r3, [r3, #12]
 800f234:	685b      	ldr	r3, [r3, #4]
 800f236:	b29a      	uxth	r2, r3
 800f238:	4b0d      	ldr	r3, [pc, #52]	; (800f270 <tcp_oos_insert_segment+0x10c>)
 800f23a:	681b      	ldr	r3, [r3, #0]
 800f23c:	b29b      	uxth	r3, r3
 800f23e:	1ad3      	subs	r3, r2, r3
 800f240:	b29a      	uxth	r2, r3
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	685a      	ldr	r2, [r3, #4]
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	891b      	ldrh	r3, [r3, #8]
 800f24e:	4619      	mov	r1, r3
 800f250:	4610      	mov	r0, r2
 800f252:	f7fc fe27 	bl	800bea4 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	683a      	ldr	r2, [r7, #0]
 800f25a:	601a      	str	r2, [r3, #0]
}
 800f25c:	bf00      	nop
 800f25e:	3714      	adds	r7, #20
 800f260:	46bd      	mov	sp, r7
 800f262:	bd90      	pop	{r4, r7, pc}
 800f264:	08016b50 	.word	0x08016b50
 800f268:	08016e10 	.word	0x08016e10
 800f26c:	08016b9c 	.word	0x08016b9c
 800f270:	20000108 	.word	0x20000108

0800f274 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800f274:	b5b0      	push	{r4, r5, r7, lr}
 800f276:	b086      	sub	sp, #24
 800f278:	af00      	add	r7, sp, #0
 800f27a:	60f8      	str	r0, [r7, #12]
 800f27c:	60b9      	str	r1, [r7, #8]
 800f27e:	607a      	str	r2, [r7, #4]
 800f280:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800f282:	e03e      	b.n	800f302 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800f284:	68bb      	ldr	r3, [r7, #8]
 800f286:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800f288:	68bb      	ldr	r3, [r7, #8]
 800f28a:	681b      	ldr	r3, [r3, #0]
 800f28c:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800f28e:	697b      	ldr	r3, [r7, #20]
 800f290:	685b      	ldr	r3, [r3, #4]
 800f292:	4618      	mov	r0, r3
 800f294:	f7fd f814 	bl	800c2c0 <pbuf_clen>
 800f298:	4603      	mov	r3, r0
 800f29a:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800f29c:	68fb      	ldr	r3, [r7, #12]
 800f29e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f2a2:	8a7a      	ldrh	r2, [r7, #18]
 800f2a4:	429a      	cmp	r2, r3
 800f2a6:	d906      	bls.n	800f2b6 <tcp_free_acked_segments+0x42>
 800f2a8:	4b2a      	ldr	r3, [pc, #168]	; (800f354 <tcp_free_acked_segments+0xe0>)
 800f2aa:	f240 4257 	movw	r2, #1111	; 0x457
 800f2ae:	492a      	ldr	r1, [pc, #168]	; (800f358 <tcp_free_acked_segments+0xe4>)
 800f2b0:	482a      	ldr	r0, [pc, #168]	; (800f35c <tcp_free_acked_segments+0xe8>)
 800f2b2:	f005 f947 	bl	8014544 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800f2b6:	68fb      	ldr	r3, [r7, #12]
 800f2b8:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800f2bc:	8a7b      	ldrh	r3, [r7, #18]
 800f2be:	1ad3      	subs	r3, r2, r3
 800f2c0:	b29a      	uxth	r2, r3
 800f2c2:	68fb      	ldr	r3, [r7, #12]
 800f2c4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800f2c8:	697b      	ldr	r3, [r7, #20]
 800f2ca:	891a      	ldrh	r2, [r3, #8]
 800f2cc:	4b24      	ldr	r3, [pc, #144]	; (800f360 <tcp_free_acked_segments+0xec>)
 800f2ce:	881b      	ldrh	r3, [r3, #0]
 800f2d0:	4413      	add	r3, r2
 800f2d2:	b29a      	uxth	r2, r3
 800f2d4:	4b22      	ldr	r3, [pc, #136]	; (800f360 <tcp_free_acked_segments+0xec>)
 800f2d6:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800f2d8:	6978      	ldr	r0, [r7, #20]
 800f2da:	f7fe f9dc 	bl	800d696 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800f2de:	68fb      	ldr	r3, [r7, #12]
 800f2e0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f2e4:	2b00      	cmp	r3, #0
 800f2e6:	d00c      	beq.n	800f302 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800f2e8:	68bb      	ldr	r3, [r7, #8]
 800f2ea:	2b00      	cmp	r3, #0
 800f2ec:	d109      	bne.n	800f302 <tcp_free_acked_segments+0x8e>
 800f2ee:	683b      	ldr	r3, [r7, #0]
 800f2f0:	2b00      	cmp	r3, #0
 800f2f2:	d106      	bne.n	800f302 <tcp_free_acked_segments+0x8e>
 800f2f4:	4b17      	ldr	r3, [pc, #92]	; (800f354 <tcp_free_acked_segments+0xe0>)
 800f2f6:	f240 4261 	movw	r2, #1121	; 0x461
 800f2fa:	491a      	ldr	r1, [pc, #104]	; (800f364 <tcp_free_acked_segments+0xf0>)
 800f2fc:	4817      	ldr	r0, [pc, #92]	; (800f35c <tcp_free_acked_segments+0xe8>)
 800f2fe:	f005 f921 	bl	8014544 <iprintf>
  while (seg_list != NULL &&
 800f302:	68bb      	ldr	r3, [r7, #8]
 800f304:	2b00      	cmp	r3, #0
 800f306:	d020      	beq.n	800f34a <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800f308:	68bb      	ldr	r3, [r7, #8]
 800f30a:	68db      	ldr	r3, [r3, #12]
 800f30c:	685b      	ldr	r3, [r3, #4]
 800f30e:	4618      	mov	r0, r3
 800f310:	f7fb fcd0 	bl	800acb4 <lwip_htonl>
 800f314:	4604      	mov	r4, r0
 800f316:	68bb      	ldr	r3, [r7, #8]
 800f318:	891b      	ldrh	r3, [r3, #8]
 800f31a:	461d      	mov	r5, r3
 800f31c:	68bb      	ldr	r3, [r7, #8]
 800f31e:	68db      	ldr	r3, [r3, #12]
 800f320:	899b      	ldrh	r3, [r3, #12]
 800f322:	b29b      	uxth	r3, r3
 800f324:	4618      	mov	r0, r3
 800f326:	f7fb fcb0 	bl	800ac8a <lwip_htons>
 800f32a:	4603      	mov	r3, r0
 800f32c:	b2db      	uxtb	r3, r3
 800f32e:	f003 0303 	and.w	r3, r3, #3
 800f332:	2b00      	cmp	r3, #0
 800f334:	d001      	beq.n	800f33a <tcp_free_acked_segments+0xc6>
 800f336:	2301      	movs	r3, #1
 800f338:	e000      	b.n	800f33c <tcp_free_acked_segments+0xc8>
 800f33a:	2300      	movs	r3, #0
 800f33c:	442b      	add	r3, r5
 800f33e:	18e2      	adds	r2, r4, r3
 800f340:	4b09      	ldr	r3, [pc, #36]	; (800f368 <tcp_free_acked_segments+0xf4>)
 800f342:	681b      	ldr	r3, [r3, #0]
 800f344:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800f346:	2b00      	cmp	r3, #0
 800f348:	dd9c      	ble.n	800f284 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800f34a:	68bb      	ldr	r3, [r7, #8]
}
 800f34c:	4618      	mov	r0, r3
 800f34e:	3718      	adds	r7, #24
 800f350:	46bd      	mov	sp, r7
 800f352:	bdb0      	pop	{r4, r5, r7, pc}
 800f354:	08016b50 	.word	0x08016b50
 800f358:	08016e38 	.word	0x08016e38
 800f35c:	08016b9c 	.word	0x08016b9c
 800f360:	20000110 	.word	0x20000110
 800f364:	08016e60 	.word	0x08016e60
 800f368:	2000010c 	.word	0x2000010c

0800f36c <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800f36c:	b5b0      	push	{r4, r5, r7, lr}
 800f36e:	b094      	sub	sp, #80	; 0x50
 800f370:	af00      	add	r7, sp, #0
 800f372:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800f374:	2300      	movs	r3, #0
 800f376:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	2b00      	cmp	r3, #0
 800f37c:	d106      	bne.n	800f38c <tcp_receive+0x20>
 800f37e:	4ba6      	ldr	r3, [pc, #664]	; (800f618 <tcp_receive+0x2ac>)
 800f380:	f240 427b 	movw	r2, #1147	; 0x47b
 800f384:	49a5      	ldr	r1, [pc, #660]	; (800f61c <tcp_receive+0x2b0>)
 800f386:	48a6      	ldr	r0, [pc, #664]	; (800f620 <tcp_receive+0x2b4>)
 800f388:	f005 f8dc 	bl	8014544 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	7d1b      	ldrb	r3, [r3, #20]
 800f390:	2b03      	cmp	r3, #3
 800f392:	d806      	bhi.n	800f3a2 <tcp_receive+0x36>
 800f394:	4ba0      	ldr	r3, [pc, #640]	; (800f618 <tcp_receive+0x2ac>)
 800f396:	f240 427c 	movw	r2, #1148	; 0x47c
 800f39a:	49a2      	ldr	r1, [pc, #648]	; (800f624 <tcp_receive+0x2b8>)
 800f39c:	48a0      	ldr	r0, [pc, #640]	; (800f620 <tcp_receive+0x2b4>)
 800f39e:	f005 f8d1 	bl	8014544 <iprintf>

  if (flags & TCP_ACK) {
 800f3a2:	4ba1      	ldr	r3, [pc, #644]	; (800f628 <tcp_receive+0x2bc>)
 800f3a4:	781b      	ldrb	r3, [r3, #0]
 800f3a6:	f003 0310 	and.w	r3, r3, #16
 800f3aa:	2b00      	cmp	r3, #0
 800f3ac:	f000 8263 	beq.w	800f876 <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f3b6:	461a      	mov	r2, r3
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f3bc:	4413      	add	r3, r2
 800f3be:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f3c4:	4b99      	ldr	r3, [pc, #612]	; (800f62c <tcp_receive+0x2c0>)
 800f3c6:	681b      	ldr	r3, [r3, #0]
 800f3c8:	1ad3      	subs	r3, r2, r3
 800f3ca:	2b00      	cmp	r3, #0
 800f3cc:	db1b      	blt.n	800f406 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f3d2:	4b96      	ldr	r3, [pc, #600]	; (800f62c <tcp_receive+0x2c0>)
 800f3d4:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800f3d6:	429a      	cmp	r2, r3
 800f3d8:	d106      	bne.n	800f3e8 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800f3de:	4b94      	ldr	r3, [pc, #592]	; (800f630 <tcp_receive+0x2c4>)
 800f3e0:	681b      	ldr	r3, [r3, #0]
 800f3e2:	1ad3      	subs	r3, r2, r3
 800f3e4:	2b00      	cmp	r3, #0
 800f3e6:	db0e      	blt.n	800f406 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800f3ec:	4b90      	ldr	r3, [pc, #576]	; (800f630 <tcp_receive+0x2c4>)
 800f3ee:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f3f0:	429a      	cmp	r2, r3
 800f3f2:	d125      	bne.n	800f440 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800f3f4:	4b8f      	ldr	r3, [pc, #572]	; (800f634 <tcp_receive+0x2c8>)
 800f3f6:	681b      	ldr	r3, [r3, #0]
 800f3f8:	89db      	ldrh	r3, [r3, #14]
 800f3fa:	b29a      	uxth	r2, r3
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f402:	429a      	cmp	r2, r3
 800f404:	d91c      	bls.n	800f440 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800f406:	4b8b      	ldr	r3, [pc, #556]	; (800f634 <tcp_receive+0x2c8>)
 800f408:	681b      	ldr	r3, [r3, #0]
 800f40a:	89db      	ldrh	r3, [r3, #14]
 800f40c:	b29a      	uxth	r2, r3
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f420:	429a      	cmp	r2, r3
 800f422:	d205      	bcs.n	800f430 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800f430:	4b7e      	ldr	r3, [pc, #504]	; (800f62c <tcp_receive+0x2c0>)
 800f432:	681a      	ldr	r2, [r3, #0]
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800f438:	4b7d      	ldr	r3, [pc, #500]	; (800f630 <tcp_receive+0x2c4>)
 800f43a:	681a      	ldr	r2, [r3, #0]
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800f440:	4b7b      	ldr	r3, [pc, #492]	; (800f630 <tcp_receive+0x2c4>)
 800f442:	681a      	ldr	r2, [r3, #0]
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f448:	1ad3      	subs	r3, r2, r3
 800f44a:	2b00      	cmp	r3, #0
 800f44c:	dc58      	bgt.n	800f500 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800f44e:	4b7a      	ldr	r3, [pc, #488]	; (800f638 <tcp_receive+0x2cc>)
 800f450:	881b      	ldrh	r3, [r3, #0]
 800f452:	2b00      	cmp	r3, #0
 800f454:	d14b      	bne.n	800f4ee <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f45a:	687a      	ldr	r2, [r7, #4]
 800f45c:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800f460:	4413      	add	r3, r2
 800f462:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f464:	429a      	cmp	r2, r3
 800f466:	d142      	bne.n	800f4ee <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f46e:	2b00      	cmp	r3, #0
 800f470:	db3d      	blt.n	800f4ee <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f476:	4b6e      	ldr	r3, [pc, #440]	; (800f630 <tcp_receive+0x2c4>)
 800f478:	681b      	ldr	r3, [r3, #0]
 800f47a:	429a      	cmp	r2, r3
 800f47c:	d137      	bne.n	800f4ee <tcp_receive+0x182>
              found_dupack = 1;
 800f47e:	2301      	movs	r3, #1
 800f480:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f488:	2bff      	cmp	r3, #255	; 0xff
 800f48a:	d007      	beq.n	800f49c <tcp_receive+0x130>
                ++pcb->dupacks;
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f492:	3301      	adds	r3, #1
 800f494:	b2da      	uxtb	r2, r3
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f4a2:	2b03      	cmp	r3, #3
 800f4a4:	d91b      	bls.n	800f4de <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f4b0:	4413      	add	r3, r2
 800f4b2:	b29a      	uxth	r2, r3
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f4ba:	429a      	cmp	r2, r3
 800f4bc:	d30a      	bcc.n	800f4d4 <tcp_receive+0x168>
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f4c8:	4413      	add	r3, r2
 800f4ca:	b29a      	uxth	r2, r3
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800f4d2:	e004      	b.n	800f4de <tcp_receive+0x172>
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f4da:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f4e4:	2b02      	cmp	r3, #2
 800f4e6:	d902      	bls.n	800f4ee <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800f4e8:	6878      	ldr	r0, [r7, #4]
 800f4ea:	f001 fee9 	bl	80112c0 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800f4ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f4f0:	2b00      	cmp	r3, #0
 800f4f2:	f040 8160 	bne.w	800f7b6 <tcp_receive+0x44a>
        pcb->dupacks = 0;
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	2200      	movs	r2, #0
 800f4fa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f4fe:	e15a      	b.n	800f7b6 <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f500:	4b4b      	ldr	r3, [pc, #300]	; (800f630 <tcp_receive+0x2c4>)
 800f502:	681a      	ldr	r2, [r3, #0]
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f508:	1ad3      	subs	r3, r2, r3
 800f50a:	3b01      	subs	r3, #1
 800f50c:	2b00      	cmp	r3, #0
 800f50e:	f2c0 814d 	blt.w	800f7ac <tcp_receive+0x440>
 800f512:	4b47      	ldr	r3, [pc, #284]	; (800f630 <tcp_receive+0x2c4>)
 800f514:	681a      	ldr	r2, [r3, #0]
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f51a:	1ad3      	subs	r3, r2, r3
 800f51c:	2b00      	cmp	r3, #0
 800f51e:	f300 8145 	bgt.w	800f7ac <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	8b5b      	ldrh	r3, [r3, #26]
 800f526:	f003 0304 	and.w	r3, r3, #4
 800f52a:	2b00      	cmp	r3, #0
 800f52c:	d010      	beq.n	800f550 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	8b5b      	ldrh	r3, [r3, #26]
 800f532:	f023 0304 	bic.w	r3, r3, #4
 800f536:	b29a      	uxth	r2, r3
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	2200      	movs	r2, #0
 800f54c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	2200      	movs	r2, #0
 800f554:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f55e:	10db      	asrs	r3, r3, #3
 800f560:	b21b      	sxth	r3, r3
 800f562:	b29a      	uxth	r2, r3
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f56a:	b29b      	uxth	r3, r3
 800f56c:	4413      	add	r3, r2
 800f56e:	b29b      	uxth	r3, r3
 800f570:	b21a      	sxth	r2, r3
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800f578:	4b2d      	ldr	r3, [pc, #180]	; (800f630 <tcp_receive+0x2c4>)
 800f57a:	681b      	ldr	r3, [r3, #0]
 800f57c:	b29a      	uxth	r2, r3
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f582:	b29b      	uxth	r3, r3
 800f584:	1ad3      	subs	r3, r2, r3
 800f586:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	2200      	movs	r2, #0
 800f58c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800f590:	4b27      	ldr	r3, [pc, #156]	; (800f630 <tcp_receive+0x2c4>)
 800f592:	681a      	ldr	r2, [r3, #0]
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	7d1b      	ldrb	r3, [r3, #20]
 800f59c:	2b03      	cmp	r3, #3
 800f59e:	f240 8096 	bls.w	800f6ce <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800f5ae:	429a      	cmp	r2, r3
 800f5b0:	d244      	bcs.n	800f63c <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	8b5b      	ldrh	r3, [r3, #26]
 800f5b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f5ba:	2b00      	cmp	r3, #0
 800f5bc:	d001      	beq.n	800f5c2 <tcp_receive+0x256>
 800f5be:	2301      	movs	r3, #1
 800f5c0:	e000      	b.n	800f5c4 <tcp_receive+0x258>
 800f5c2:	2302      	movs	r3, #2
 800f5c4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800f5c8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800f5cc:	b29a      	uxth	r2, r3
 800f5ce:	687b      	ldr	r3, [r7, #4]
 800f5d0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f5d2:	fb12 f303 	smulbb	r3, r2, r3
 800f5d6:	b29b      	uxth	r3, r3
 800f5d8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800f5da:	4293      	cmp	r3, r2
 800f5dc:	bf28      	it	cs
 800f5de:	4613      	movcs	r3, r2
 800f5e0:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f5e8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800f5ea:	4413      	add	r3, r2
 800f5ec:	b29a      	uxth	r2, r3
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f5f4:	429a      	cmp	r2, r3
 800f5f6:	d309      	bcc.n	800f60c <tcp_receive+0x2a0>
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f5fe:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800f600:	4413      	add	r3, r2
 800f602:	b29a      	uxth	r2, r3
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800f60a:	e060      	b.n	800f6ce <tcp_receive+0x362>
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f612:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800f616:	e05a      	b.n	800f6ce <tcp_receive+0x362>
 800f618:	08016b50 	.word	0x08016b50
 800f61c:	08016e80 	.word	0x08016e80
 800f620:	08016b9c 	.word	0x08016b9c
 800f624:	08016e9c 	.word	0x08016e9c
 800f628:	20000114 	.word	0x20000114
 800f62c:	20000108 	.word	0x20000108
 800f630:	2000010c 	.word	0x2000010c
 800f634:	200000f8 	.word	0x200000f8
 800f638:	20000112 	.word	0x20000112
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800f642:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f644:	4413      	add	r3, r2
 800f646:	b29a      	uxth	r2, r3
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f64e:	429a      	cmp	r2, r3
 800f650:	d309      	bcc.n	800f666 <tcp_receive+0x2fa>
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800f658:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f65a:	4413      	add	r3, r2
 800f65c:	b29a      	uxth	r2, r3
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800f664:	e004      	b.n	800f670 <tcp_receive+0x304>
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f66c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f67c:	429a      	cmp	r2, r3
 800f67e:	d326      	bcc.n	800f6ce <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f68c:	1ad3      	subs	r3, r2, r3
 800f68e:	b29a      	uxth	r2, r3
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f6a0:	4413      	add	r3, r2
 800f6a2:	b29a      	uxth	r2, r3
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f6aa:	429a      	cmp	r2, r3
 800f6ac:	d30a      	bcc.n	800f6c4 <tcp_receive+0x358>
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f6b8:	4413      	add	r3, r2
 800f6ba:	b29a      	uxth	r2, r3
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800f6c2:	e004      	b.n	800f6ce <tcp_receive+0x362>
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f6ca:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f6d6:	4a98      	ldr	r2, [pc, #608]	; (800f938 <tcp_receive+0x5cc>)
 800f6d8:	6878      	ldr	r0, [r7, #4]
 800f6da:	f7ff fdcb 	bl	800f274 <tcp_free_acked_segments>
 800f6de:	4602      	mov	r2, r0
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f6ec:	4a93      	ldr	r2, [pc, #588]	; (800f93c <tcp_receive+0x5d0>)
 800f6ee:	6878      	ldr	r0, [r7, #4]
 800f6f0:	f7ff fdc0 	bl	800f274 <tcp_free_acked_segments>
 800f6f4:	4602      	mov	r2, r0
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f6fe:	2b00      	cmp	r3, #0
 800f700:	d104      	bne.n	800f70c <tcp_receive+0x3a0>
        pcb->rtime = -1;
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f708:	861a      	strh	r2, [r3, #48]	; 0x30
 800f70a:	e002      	b.n	800f712 <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	2200      	movs	r2, #0
 800f710:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	2200      	movs	r2, #0
 800f716:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f71c:	2b00      	cmp	r3, #0
 800f71e:	d103      	bne.n	800f728 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	2200      	movs	r2, #0
 800f724:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800f72e:	4b84      	ldr	r3, [pc, #528]	; (800f940 <tcp_receive+0x5d4>)
 800f730:	881b      	ldrh	r3, [r3, #0]
 800f732:	4413      	add	r3, r2
 800f734:	b29a      	uxth	r2, r3
 800f736:	687b      	ldr	r3, [r7, #4]
 800f738:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	8b5b      	ldrh	r3, [r3, #26]
 800f740:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f744:	2b00      	cmp	r3, #0
 800f746:	d035      	beq.n	800f7b4 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f74c:	2b00      	cmp	r3, #0
 800f74e:	d118      	bne.n	800f782 <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f754:	2b00      	cmp	r3, #0
 800f756:	d00c      	beq.n	800f772 <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f760:	68db      	ldr	r3, [r3, #12]
 800f762:	685b      	ldr	r3, [r3, #4]
 800f764:	4618      	mov	r0, r3
 800f766:	f7fb faa5 	bl	800acb4 <lwip_htonl>
 800f76a:	4603      	mov	r3, r0
 800f76c:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800f76e:	2b00      	cmp	r3, #0
 800f770:	dc20      	bgt.n	800f7b4 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	8b5b      	ldrh	r3, [r3, #26]
 800f776:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f77a:	b29a      	uxth	r2, r3
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f780:	e018      	b.n	800f7b4 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f78a:	68db      	ldr	r3, [r3, #12]
 800f78c:	685b      	ldr	r3, [r3, #4]
 800f78e:	4618      	mov	r0, r3
 800f790:	f7fb fa90 	bl	800acb4 <lwip_htonl>
 800f794:	4603      	mov	r3, r0
 800f796:	1ae3      	subs	r3, r4, r3
 800f798:	2b00      	cmp	r3, #0
 800f79a:	dc0b      	bgt.n	800f7b4 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	8b5b      	ldrh	r3, [r3, #26]
 800f7a0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f7a4:	b29a      	uxth	r2, r3
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f7aa:	e003      	b.n	800f7b4 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800f7ac:	6878      	ldr	r0, [r7, #4]
 800f7ae:	f001 ff75 	bl	801169c <tcp_send_empty_ack>
 800f7b2:	e000      	b.n	800f7b6 <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f7b4:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f7ba:	2b00      	cmp	r3, #0
 800f7bc:	d05b      	beq.n	800f876 <tcp_receive+0x50a>
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f7c2:	4b60      	ldr	r3, [pc, #384]	; (800f944 <tcp_receive+0x5d8>)
 800f7c4:	681b      	ldr	r3, [r3, #0]
 800f7c6:	1ad3      	subs	r3, r2, r3
 800f7c8:	2b00      	cmp	r3, #0
 800f7ca:	da54      	bge.n	800f876 <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800f7cc:	4b5e      	ldr	r3, [pc, #376]	; (800f948 <tcp_receive+0x5dc>)
 800f7ce:	681b      	ldr	r3, [r3, #0]
 800f7d0:	b29a      	uxth	r2, r3
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f7d6:	b29b      	uxth	r3, r3
 800f7d8:	1ad3      	subs	r3, r2, r3
 800f7da:	b29b      	uxth	r3, r3
 800f7dc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800f7e0:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f7ea:	10db      	asrs	r3, r3, #3
 800f7ec:	b21b      	sxth	r3, r3
 800f7ee:	b29b      	uxth	r3, r3
 800f7f0:	1ad3      	subs	r3, r2, r3
 800f7f2:	b29b      	uxth	r3, r3
 800f7f4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f7fe:	b29a      	uxth	r2, r3
 800f800:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800f804:	4413      	add	r3, r2
 800f806:	b29b      	uxth	r3, r3
 800f808:	b21a      	sxth	r2, r3
 800f80a:	687b      	ldr	r3, [r7, #4]
 800f80c:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800f80e:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800f812:	2b00      	cmp	r3, #0
 800f814:	da05      	bge.n	800f822 <tcp_receive+0x4b6>
        m = (s16_t) - m;
 800f816:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800f81a:	425b      	negs	r3, r3
 800f81c:	b29b      	uxth	r3, r3
 800f81e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800f822:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f82c:	109b      	asrs	r3, r3, #2
 800f82e:	b21b      	sxth	r3, r3
 800f830:	b29b      	uxth	r3, r3
 800f832:	1ad3      	subs	r3, r2, r3
 800f834:	b29b      	uxth	r3, r3
 800f836:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f840:	b29a      	uxth	r2, r3
 800f842:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800f846:	4413      	add	r3, r2
 800f848:	b29b      	uxth	r3, r3
 800f84a:	b21a      	sxth	r2, r3
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f856:	10db      	asrs	r3, r3, #3
 800f858:	b21b      	sxth	r3, r3
 800f85a:	b29a      	uxth	r2, r3
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f862:	b29b      	uxth	r3, r3
 800f864:	4413      	add	r3, r2
 800f866:	b29b      	uxth	r3, r3
 800f868:	b21a      	sxth	r2, r3
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	2200      	movs	r2, #0
 800f874:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800f876:	4b35      	ldr	r3, [pc, #212]	; (800f94c <tcp_receive+0x5e0>)
 800f878:	881b      	ldrh	r3, [r3, #0]
 800f87a:	2b00      	cmp	r3, #0
 800f87c:	f000 84e1 	beq.w	8010242 <tcp_receive+0xed6>
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	7d1b      	ldrb	r3, [r3, #20]
 800f884:	2b06      	cmp	r3, #6
 800f886:	f200 84dc 	bhi.w	8010242 <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f88e:	4b30      	ldr	r3, [pc, #192]	; (800f950 <tcp_receive+0x5e4>)
 800f890:	681b      	ldr	r3, [r3, #0]
 800f892:	1ad3      	subs	r3, r2, r3
 800f894:	3b01      	subs	r3, #1
 800f896:	2b00      	cmp	r3, #0
 800f898:	f2c0 808e 	blt.w	800f9b8 <tcp_receive+0x64c>
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f8a0:	4b2a      	ldr	r3, [pc, #168]	; (800f94c <tcp_receive+0x5e0>)
 800f8a2:	881b      	ldrh	r3, [r3, #0]
 800f8a4:	4619      	mov	r1, r3
 800f8a6:	4b2a      	ldr	r3, [pc, #168]	; (800f950 <tcp_receive+0x5e4>)
 800f8a8:	681b      	ldr	r3, [r3, #0]
 800f8aa:	440b      	add	r3, r1
 800f8ac:	1ad3      	subs	r3, r2, r3
 800f8ae:	3301      	adds	r3, #1
 800f8b0:	2b00      	cmp	r3, #0
 800f8b2:	f300 8081 	bgt.w	800f9b8 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800f8b6:	4b27      	ldr	r3, [pc, #156]	; (800f954 <tcp_receive+0x5e8>)
 800f8b8:	685b      	ldr	r3, [r3, #4]
 800f8ba:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f8c0:	4b23      	ldr	r3, [pc, #140]	; (800f950 <tcp_receive+0x5e4>)
 800f8c2:	681b      	ldr	r3, [r3, #0]
 800f8c4:	1ad3      	subs	r3, r2, r3
 800f8c6:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800f8c8:	4b22      	ldr	r3, [pc, #136]	; (800f954 <tcp_receive+0x5e8>)
 800f8ca:	685b      	ldr	r3, [r3, #4]
 800f8cc:	2b00      	cmp	r3, #0
 800f8ce:	d106      	bne.n	800f8de <tcp_receive+0x572>
 800f8d0:	4b21      	ldr	r3, [pc, #132]	; (800f958 <tcp_receive+0x5ec>)
 800f8d2:	f240 5294 	movw	r2, #1428	; 0x594
 800f8d6:	4921      	ldr	r1, [pc, #132]	; (800f95c <tcp_receive+0x5f0>)
 800f8d8:	4821      	ldr	r0, [pc, #132]	; (800f960 <tcp_receive+0x5f4>)
 800f8da:	f004 fe33 	bl	8014544 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800f8de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8e0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800f8e4:	4293      	cmp	r3, r2
 800f8e6:	d906      	bls.n	800f8f6 <tcp_receive+0x58a>
 800f8e8:	4b1b      	ldr	r3, [pc, #108]	; (800f958 <tcp_receive+0x5ec>)
 800f8ea:	f240 5295 	movw	r2, #1429	; 0x595
 800f8ee:	491d      	ldr	r1, [pc, #116]	; (800f964 <tcp_receive+0x5f8>)
 800f8f0:	481b      	ldr	r0, [pc, #108]	; (800f960 <tcp_receive+0x5f4>)
 800f8f2:	f004 fe27 	bl	8014544 <iprintf>
      off = (u16_t)off32;
 800f8f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8f8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800f8fc:	4b15      	ldr	r3, [pc, #84]	; (800f954 <tcp_receive+0x5e8>)
 800f8fe:	685b      	ldr	r3, [r3, #4]
 800f900:	891b      	ldrh	r3, [r3, #8]
 800f902:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f906:	429a      	cmp	r2, r3
 800f908:	d906      	bls.n	800f918 <tcp_receive+0x5ac>
 800f90a:	4b13      	ldr	r3, [pc, #76]	; (800f958 <tcp_receive+0x5ec>)
 800f90c:	f240 5297 	movw	r2, #1431	; 0x597
 800f910:	4915      	ldr	r1, [pc, #84]	; (800f968 <tcp_receive+0x5fc>)
 800f912:	4813      	ldr	r0, [pc, #76]	; (800f960 <tcp_receive+0x5f4>)
 800f914:	f004 fe16 	bl	8014544 <iprintf>
      inseg.len -= off;
 800f918:	4b0e      	ldr	r3, [pc, #56]	; (800f954 <tcp_receive+0x5e8>)
 800f91a:	891a      	ldrh	r2, [r3, #8]
 800f91c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f920:	1ad3      	subs	r3, r2, r3
 800f922:	b29a      	uxth	r2, r3
 800f924:	4b0b      	ldr	r3, [pc, #44]	; (800f954 <tcp_receive+0x5e8>)
 800f926:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800f928:	4b0a      	ldr	r3, [pc, #40]	; (800f954 <tcp_receive+0x5e8>)
 800f92a:	685b      	ldr	r3, [r3, #4]
 800f92c:	891a      	ldrh	r2, [r3, #8]
 800f92e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f932:	1ad3      	subs	r3, r2, r3
 800f934:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800f936:	e029      	b.n	800f98c <tcp_receive+0x620>
 800f938:	08016eb8 	.word	0x08016eb8
 800f93c:	08016ec0 	.word	0x08016ec0
 800f940:	20000110 	.word	0x20000110
 800f944:	2000010c 	.word	0x2000010c
 800f948:	200072a4 	.word	0x200072a4
 800f94c:	20000112 	.word	0x20000112
 800f950:	20000108 	.word	0x20000108
 800f954:	200000e8 	.word	0x200000e8
 800f958:	08016b50 	.word	0x08016b50
 800f95c:	08016ec8 	.word	0x08016ec8
 800f960:	08016b9c 	.word	0x08016b9c
 800f964:	08016ed8 	.word	0x08016ed8
 800f968:	08016ee8 	.word	0x08016ee8
        off -= p->len;
 800f96c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f96e:	895b      	ldrh	r3, [r3, #10]
 800f970:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f974:	1ad3      	subs	r3, r2, r3
 800f976:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800f97a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f97c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800f97e:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800f980:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f982:	2200      	movs	r2, #0
 800f984:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800f986:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f988:	681b      	ldr	r3, [r3, #0]
 800f98a:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800f98c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f98e:	895b      	ldrh	r3, [r3, #10]
 800f990:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f994:	429a      	cmp	r2, r3
 800f996:	d8e9      	bhi.n	800f96c <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800f998:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f99c:	4619      	mov	r1, r3
 800f99e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800f9a0:	f7fc fb80 	bl	800c0a4 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f9a8:	4a91      	ldr	r2, [pc, #580]	; (800fbf0 <tcp_receive+0x884>)
 800f9aa:	6013      	str	r3, [r2, #0]
 800f9ac:	4b91      	ldr	r3, [pc, #580]	; (800fbf4 <tcp_receive+0x888>)
 800f9ae:	68db      	ldr	r3, [r3, #12]
 800f9b0:	4a8f      	ldr	r2, [pc, #572]	; (800fbf0 <tcp_receive+0x884>)
 800f9b2:	6812      	ldr	r2, [r2, #0]
 800f9b4:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800f9b6:	e00d      	b.n	800f9d4 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800f9b8:	4b8d      	ldr	r3, [pc, #564]	; (800fbf0 <tcp_receive+0x884>)
 800f9ba:	681a      	ldr	r2, [r3, #0]
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f9c0:	1ad3      	subs	r3, r2, r3
 800f9c2:	2b00      	cmp	r3, #0
 800f9c4:	da06      	bge.n	800f9d4 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	8b5b      	ldrh	r3, [r3, #26]
 800f9ca:	f043 0302 	orr.w	r3, r3, #2
 800f9ce:	b29a      	uxth	r2, r3
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800f9d4:	4b86      	ldr	r3, [pc, #536]	; (800fbf0 <tcp_receive+0x884>)
 800f9d6:	681a      	ldr	r2, [r3, #0]
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f9dc:	1ad3      	subs	r3, r2, r3
 800f9de:	2b00      	cmp	r3, #0
 800f9e0:	f2c0 842a 	blt.w	8010238 <tcp_receive+0xecc>
 800f9e4:	4b82      	ldr	r3, [pc, #520]	; (800fbf0 <tcp_receive+0x884>)
 800f9e6:	681a      	ldr	r2, [r3, #0]
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f9ec:	6879      	ldr	r1, [r7, #4]
 800f9ee:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f9f0:	440b      	add	r3, r1
 800f9f2:	1ad3      	subs	r3, r2, r3
 800f9f4:	3301      	adds	r3, #1
 800f9f6:	2b00      	cmp	r3, #0
 800f9f8:	f300 841e 	bgt.w	8010238 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fa00:	4b7b      	ldr	r3, [pc, #492]	; (800fbf0 <tcp_receive+0x884>)
 800fa02:	681b      	ldr	r3, [r3, #0]
 800fa04:	429a      	cmp	r2, r3
 800fa06:	f040 829a 	bne.w	800ff3e <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800fa0a:	4b7a      	ldr	r3, [pc, #488]	; (800fbf4 <tcp_receive+0x888>)
 800fa0c:	891c      	ldrh	r4, [r3, #8]
 800fa0e:	4b79      	ldr	r3, [pc, #484]	; (800fbf4 <tcp_receive+0x888>)
 800fa10:	68db      	ldr	r3, [r3, #12]
 800fa12:	899b      	ldrh	r3, [r3, #12]
 800fa14:	b29b      	uxth	r3, r3
 800fa16:	4618      	mov	r0, r3
 800fa18:	f7fb f937 	bl	800ac8a <lwip_htons>
 800fa1c:	4603      	mov	r3, r0
 800fa1e:	b2db      	uxtb	r3, r3
 800fa20:	f003 0303 	and.w	r3, r3, #3
 800fa24:	2b00      	cmp	r3, #0
 800fa26:	d001      	beq.n	800fa2c <tcp_receive+0x6c0>
 800fa28:	2301      	movs	r3, #1
 800fa2a:	e000      	b.n	800fa2e <tcp_receive+0x6c2>
 800fa2c:	2300      	movs	r3, #0
 800fa2e:	4423      	add	r3, r4
 800fa30:	b29a      	uxth	r2, r3
 800fa32:	4b71      	ldr	r3, [pc, #452]	; (800fbf8 <tcp_receive+0x88c>)
 800fa34:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800fa3a:	4b6f      	ldr	r3, [pc, #444]	; (800fbf8 <tcp_receive+0x88c>)
 800fa3c:	881b      	ldrh	r3, [r3, #0]
 800fa3e:	429a      	cmp	r2, r3
 800fa40:	d275      	bcs.n	800fb2e <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800fa42:	4b6c      	ldr	r3, [pc, #432]	; (800fbf4 <tcp_receive+0x888>)
 800fa44:	68db      	ldr	r3, [r3, #12]
 800fa46:	899b      	ldrh	r3, [r3, #12]
 800fa48:	b29b      	uxth	r3, r3
 800fa4a:	4618      	mov	r0, r3
 800fa4c:	f7fb f91d 	bl	800ac8a <lwip_htons>
 800fa50:	4603      	mov	r3, r0
 800fa52:	b2db      	uxtb	r3, r3
 800fa54:	f003 0301 	and.w	r3, r3, #1
 800fa58:	2b00      	cmp	r3, #0
 800fa5a:	d01f      	beq.n	800fa9c <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800fa5c:	4b65      	ldr	r3, [pc, #404]	; (800fbf4 <tcp_receive+0x888>)
 800fa5e:	68db      	ldr	r3, [r3, #12]
 800fa60:	899b      	ldrh	r3, [r3, #12]
 800fa62:	b29b      	uxth	r3, r3
 800fa64:	b21b      	sxth	r3, r3
 800fa66:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800fa6a:	b21c      	sxth	r4, r3
 800fa6c:	4b61      	ldr	r3, [pc, #388]	; (800fbf4 <tcp_receive+0x888>)
 800fa6e:	68db      	ldr	r3, [r3, #12]
 800fa70:	899b      	ldrh	r3, [r3, #12]
 800fa72:	b29b      	uxth	r3, r3
 800fa74:	4618      	mov	r0, r3
 800fa76:	f7fb f908 	bl	800ac8a <lwip_htons>
 800fa7a:	4603      	mov	r3, r0
 800fa7c:	b2db      	uxtb	r3, r3
 800fa7e:	b29b      	uxth	r3, r3
 800fa80:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800fa84:	b29b      	uxth	r3, r3
 800fa86:	4618      	mov	r0, r3
 800fa88:	f7fb f8ff 	bl	800ac8a <lwip_htons>
 800fa8c:	4603      	mov	r3, r0
 800fa8e:	b21b      	sxth	r3, r3
 800fa90:	4323      	orrs	r3, r4
 800fa92:	b21a      	sxth	r2, r3
 800fa94:	4b57      	ldr	r3, [pc, #348]	; (800fbf4 <tcp_receive+0x888>)
 800fa96:	68db      	ldr	r3, [r3, #12]
 800fa98:	b292      	uxth	r2, r2
 800fa9a:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800faa0:	4b54      	ldr	r3, [pc, #336]	; (800fbf4 <tcp_receive+0x888>)
 800faa2:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800faa4:	4b53      	ldr	r3, [pc, #332]	; (800fbf4 <tcp_receive+0x888>)
 800faa6:	68db      	ldr	r3, [r3, #12]
 800faa8:	899b      	ldrh	r3, [r3, #12]
 800faaa:	b29b      	uxth	r3, r3
 800faac:	4618      	mov	r0, r3
 800faae:	f7fb f8ec 	bl	800ac8a <lwip_htons>
 800fab2:	4603      	mov	r3, r0
 800fab4:	b2db      	uxtb	r3, r3
 800fab6:	f003 0302 	and.w	r3, r3, #2
 800faba:	2b00      	cmp	r3, #0
 800fabc:	d005      	beq.n	800faca <tcp_receive+0x75e>
            inseg.len -= 1;
 800fabe:	4b4d      	ldr	r3, [pc, #308]	; (800fbf4 <tcp_receive+0x888>)
 800fac0:	891b      	ldrh	r3, [r3, #8]
 800fac2:	3b01      	subs	r3, #1
 800fac4:	b29a      	uxth	r2, r3
 800fac6:	4b4b      	ldr	r3, [pc, #300]	; (800fbf4 <tcp_receive+0x888>)
 800fac8:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800faca:	4b4a      	ldr	r3, [pc, #296]	; (800fbf4 <tcp_receive+0x888>)
 800facc:	685b      	ldr	r3, [r3, #4]
 800face:	4a49      	ldr	r2, [pc, #292]	; (800fbf4 <tcp_receive+0x888>)
 800fad0:	8912      	ldrh	r2, [r2, #8]
 800fad2:	4611      	mov	r1, r2
 800fad4:	4618      	mov	r0, r3
 800fad6:	f7fc f9e5 	bl	800bea4 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800fada:	4b46      	ldr	r3, [pc, #280]	; (800fbf4 <tcp_receive+0x888>)
 800fadc:	891c      	ldrh	r4, [r3, #8]
 800fade:	4b45      	ldr	r3, [pc, #276]	; (800fbf4 <tcp_receive+0x888>)
 800fae0:	68db      	ldr	r3, [r3, #12]
 800fae2:	899b      	ldrh	r3, [r3, #12]
 800fae4:	b29b      	uxth	r3, r3
 800fae6:	4618      	mov	r0, r3
 800fae8:	f7fb f8cf 	bl	800ac8a <lwip_htons>
 800faec:	4603      	mov	r3, r0
 800faee:	b2db      	uxtb	r3, r3
 800faf0:	f003 0303 	and.w	r3, r3, #3
 800faf4:	2b00      	cmp	r3, #0
 800faf6:	d001      	beq.n	800fafc <tcp_receive+0x790>
 800faf8:	2301      	movs	r3, #1
 800fafa:	e000      	b.n	800fafe <tcp_receive+0x792>
 800fafc:	2300      	movs	r3, #0
 800fafe:	4423      	add	r3, r4
 800fb00:	b29a      	uxth	r2, r3
 800fb02:	4b3d      	ldr	r3, [pc, #244]	; (800fbf8 <tcp_receive+0x88c>)
 800fb04:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800fb06:	4b3c      	ldr	r3, [pc, #240]	; (800fbf8 <tcp_receive+0x88c>)
 800fb08:	881b      	ldrh	r3, [r3, #0]
 800fb0a:	461a      	mov	r2, r3
 800fb0c:	4b38      	ldr	r3, [pc, #224]	; (800fbf0 <tcp_receive+0x884>)
 800fb0e:	681b      	ldr	r3, [r3, #0]
 800fb10:	441a      	add	r2, r3
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb16:	6879      	ldr	r1, [r7, #4]
 800fb18:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800fb1a:	440b      	add	r3, r1
 800fb1c:	429a      	cmp	r2, r3
 800fb1e:	d006      	beq.n	800fb2e <tcp_receive+0x7c2>
 800fb20:	4b36      	ldr	r3, [pc, #216]	; (800fbfc <tcp_receive+0x890>)
 800fb22:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800fb26:	4936      	ldr	r1, [pc, #216]	; (800fc00 <tcp_receive+0x894>)
 800fb28:	4836      	ldr	r0, [pc, #216]	; (800fc04 <tcp_receive+0x898>)
 800fb2a:	f004 fd0b 	bl	8014544 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800fb2e:	687b      	ldr	r3, [r7, #4]
 800fb30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fb32:	2b00      	cmp	r3, #0
 800fb34:	f000 80e7 	beq.w	800fd06 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800fb38:	4b2e      	ldr	r3, [pc, #184]	; (800fbf4 <tcp_receive+0x888>)
 800fb3a:	68db      	ldr	r3, [r3, #12]
 800fb3c:	899b      	ldrh	r3, [r3, #12]
 800fb3e:	b29b      	uxth	r3, r3
 800fb40:	4618      	mov	r0, r3
 800fb42:	f7fb f8a2 	bl	800ac8a <lwip_htons>
 800fb46:	4603      	mov	r3, r0
 800fb48:	b2db      	uxtb	r3, r3
 800fb4a:	f003 0301 	and.w	r3, r3, #1
 800fb4e:	2b00      	cmp	r3, #0
 800fb50:	d010      	beq.n	800fb74 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800fb52:	e00a      	b.n	800fb6a <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fb58:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fb5e:	681a      	ldr	r2, [r3, #0]
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800fb64:	68f8      	ldr	r0, [r7, #12]
 800fb66:	f7fd fd96 	bl	800d696 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fb6e:	2b00      	cmp	r3, #0
 800fb70:	d1f0      	bne.n	800fb54 <tcp_receive+0x7e8>
 800fb72:	e0c8      	b.n	800fd06 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fb78:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800fb7a:	e052      	b.n	800fc22 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800fb7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fb7e:	68db      	ldr	r3, [r3, #12]
 800fb80:	899b      	ldrh	r3, [r3, #12]
 800fb82:	b29b      	uxth	r3, r3
 800fb84:	4618      	mov	r0, r3
 800fb86:	f7fb f880 	bl	800ac8a <lwip_htons>
 800fb8a:	4603      	mov	r3, r0
 800fb8c:	b2db      	uxtb	r3, r3
 800fb8e:	f003 0301 	and.w	r3, r3, #1
 800fb92:	2b00      	cmp	r3, #0
 800fb94:	d03d      	beq.n	800fc12 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800fb96:	4b17      	ldr	r3, [pc, #92]	; (800fbf4 <tcp_receive+0x888>)
 800fb98:	68db      	ldr	r3, [r3, #12]
 800fb9a:	899b      	ldrh	r3, [r3, #12]
 800fb9c:	b29b      	uxth	r3, r3
 800fb9e:	4618      	mov	r0, r3
 800fba0:	f7fb f873 	bl	800ac8a <lwip_htons>
 800fba4:	4603      	mov	r3, r0
 800fba6:	b2db      	uxtb	r3, r3
 800fba8:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800fbac:	2b00      	cmp	r3, #0
 800fbae:	d130      	bne.n	800fc12 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800fbb0:	4b10      	ldr	r3, [pc, #64]	; (800fbf4 <tcp_receive+0x888>)
 800fbb2:	68db      	ldr	r3, [r3, #12]
 800fbb4:	899b      	ldrh	r3, [r3, #12]
 800fbb6:	b29c      	uxth	r4, r3
 800fbb8:	2001      	movs	r0, #1
 800fbba:	f7fb f866 	bl	800ac8a <lwip_htons>
 800fbbe:	4603      	mov	r3, r0
 800fbc0:	461a      	mov	r2, r3
 800fbc2:	4b0c      	ldr	r3, [pc, #48]	; (800fbf4 <tcp_receive+0x888>)
 800fbc4:	68db      	ldr	r3, [r3, #12]
 800fbc6:	4322      	orrs	r2, r4
 800fbc8:	b292      	uxth	r2, r2
 800fbca:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800fbcc:	4b09      	ldr	r3, [pc, #36]	; (800fbf4 <tcp_receive+0x888>)
 800fbce:	891c      	ldrh	r4, [r3, #8]
 800fbd0:	4b08      	ldr	r3, [pc, #32]	; (800fbf4 <tcp_receive+0x888>)
 800fbd2:	68db      	ldr	r3, [r3, #12]
 800fbd4:	899b      	ldrh	r3, [r3, #12]
 800fbd6:	b29b      	uxth	r3, r3
 800fbd8:	4618      	mov	r0, r3
 800fbda:	f7fb f856 	bl	800ac8a <lwip_htons>
 800fbde:	4603      	mov	r3, r0
 800fbe0:	b2db      	uxtb	r3, r3
 800fbe2:	f003 0303 	and.w	r3, r3, #3
 800fbe6:	2b00      	cmp	r3, #0
 800fbe8:	d00e      	beq.n	800fc08 <tcp_receive+0x89c>
 800fbea:	2301      	movs	r3, #1
 800fbec:	e00d      	b.n	800fc0a <tcp_receive+0x89e>
 800fbee:	bf00      	nop
 800fbf0:	20000108 	.word	0x20000108
 800fbf4:	200000e8 	.word	0x200000e8
 800fbf8:	20000112 	.word	0x20000112
 800fbfc:	08016b50 	.word	0x08016b50
 800fc00:	08016ef8 	.word	0x08016ef8
 800fc04:	08016b9c 	.word	0x08016b9c
 800fc08:	2300      	movs	r3, #0
 800fc0a:	4423      	add	r3, r4
 800fc0c:	b29a      	uxth	r2, r3
 800fc0e:	4b98      	ldr	r3, [pc, #608]	; (800fe70 <tcp_receive+0xb04>)
 800fc10:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800fc12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fc14:	613b      	str	r3, [r7, #16]
              next = next->next;
 800fc16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fc18:	681b      	ldr	r3, [r3, #0]
 800fc1a:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800fc1c:	6938      	ldr	r0, [r7, #16]
 800fc1e:	f7fd fd3a 	bl	800d696 <tcp_seg_free>
            while (next &&
 800fc22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fc24:	2b00      	cmp	r3, #0
 800fc26:	d00e      	beq.n	800fc46 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800fc28:	4b91      	ldr	r3, [pc, #580]	; (800fe70 <tcp_receive+0xb04>)
 800fc2a:	881b      	ldrh	r3, [r3, #0]
 800fc2c:	461a      	mov	r2, r3
 800fc2e:	4b91      	ldr	r3, [pc, #580]	; (800fe74 <tcp_receive+0xb08>)
 800fc30:	681b      	ldr	r3, [r3, #0]
 800fc32:	441a      	add	r2, r3
 800fc34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fc36:	68db      	ldr	r3, [r3, #12]
 800fc38:	685b      	ldr	r3, [r3, #4]
 800fc3a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800fc3c:	8909      	ldrh	r1, [r1, #8]
 800fc3e:	440b      	add	r3, r1
 800fc40:	1ad3      	subs	r3, r2, r3
            while (next &&
 800fc42:	2b00      	cmp	r3, #0
 800fc44:	da9a      	bge.n	800fb7c <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800fc46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fc48:	2b00      	cmp	r3, #0
 800fc4a:	d059      	beq.n	800fd00 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800fc4c:	4b88      	ldr	r3, [pc, #544]	; (800fe70 <tcp_receive+0xb04>)
 800fc4e:	881b      	ldrh	r3, [r3, #0]
 800fc50:	461a      	mov	r2, r3
 800fc52:	4b88      	ldr	r3, [pc, #544]	; (800fe74 <tcp_receive+0xb08>)
 800fc54:	681b      	ldr	r3, [r3, #0]
 800fc56:	441a      	add	r2, r3
 800fc58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fc5a:	68db      	ldr	r3, [r3, #12]
 800fc5c:	685b      	ldr	r3, [r3, #4]
 800fc5e:	1ad3      	subs	r3, r2, r3
            if (next &&
 800fc60:	2b00      	cmp	r3, #0
 800fc62:	dd4d      	ble.n	800fd00 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800fc64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fc66:	68db      	ldr	r3, [r3, #12]
 800fc68:	685b      	ldr	r3, [r3, #4]
 800fc6a:	b29a      	uxth	r2, r3
 800fc6c:	4b81      	ldr	r3, [pc, #516]	; (800fe74 <tcp_receive+0xb08>)
 800fc6e:	681b      	ldr	r3, [r3, #0]
 800fc70:	b29b      	uxth	r3, r3
 800fc72:	1ad3      	subs	r3, r2, r3
 800fc74:	b29a      	uxth	r2, r3
 800fc76:	4b80      	ldr	r3, [pc, #512]	; (800fe78 <tcp_receive+0xb0c>)
 800fc78:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800fc7a:	4b7f      	ldr	r3, [pc, #508]	; (800fe78 <tcp_receive+0xb0c>)
 800fc7c:	68db      	ldr	r3, [r3, #12]
 800fc7e:	899b      	ldrh	r3, [r3, #12]
 800fc80:	b29b      	uxth	r3, r3
 800fc82:	4618      	mov	r0, r3
 800fc84:	f7fb f801 	bl	800ac8a <lwip_htons>
 800fc88:	4603      	mov	r3, r0
 800fc8a:	b2db      	uxtb	r3, r3
 800fc8c:	f003 0302 	and.w	r3, r3, #2
 800fc90:	2b00      	cmp	r3, #0
 800fc92:	d005      	beq.n	800fca0 <tcp_receive+0x934>
                inseg.len -= 1;
 800fc94:	4b78      	ldr	r3, [pc, #480]	; (800fe78 <tcp_receive+0xb0c>)
 800fc96:	891b      	ldrh	r3, [r3, #8]
 800fc98:	3b01      	subs	r3, #1
 800fc9a:	b29a      	uxth	r2, r3
 800fc9c:	4b76      	ldr	r3, [pc, #472]	; (800fe78 <tcp_receive+0xb0c>)
 800fc9e:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800fca0:	4b75      	ldr	r3, [pc, #468]	; (800fe78 <tcp_receive+0xb0c>)
 800fca2:	685b      	ldr	r3, [r3, #4]
 800fca4:	4a74      	ldr	r2, [pc, #464]	; (800fe78 <tcp_receive+0xb0c>)
 800fca6:	8912      	ldrh	r2, [r2, #8]
 800fca8:	4611      	mov	r1, r2
 800fcaa:	4618      	mov	r0, r3
 800fcac:	f7fc f8fa 	bl	800bea4 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800fcb0:	4b71      	ldr	r3, [pc, #452]	; (800fe78 <tcp_receive+0xb0c>)
 800fcb2:	891c      	ldrh	r4, [r3, #8]
 800fcb4:	4b70      	ldr	r3, [pc, #448]	; (800fe78 <tcp_receive+0xb0c>)
 800fcb6:	68db      	ldr	r3, [r3, #12]
 800fcb8:	899b      	ldrh	r3, [r3, #12]
 800fcba:	b29b      	uxth	r3, r3
 800fcbc:	4618      	mov	r0, r3
 800fcbe:	f7fa ffe4 	bl	800ac8a <lwip_htons>
 800fcc2:	4603      	mov	r3, r0
 800fcc4:	b2db      	uxtb	r3, r3
 800fcc6:	f003 0303 	and.w	r3, r3, #3
 800fcca:	2b00      	cmp	r3, #0
 800fccc:	d001      	beq.n	800fcd2 <tcp_receive+0x966>
 800fcce:	2301      	movs	r3, #1
 800fcd0:	e000      	b.n	800fcd4 <tcp_receive+0x968>
 800fcd2:	2300      	movs	r3, #0
 800fcd4:	4423      	add	r3, r4
 800fcd6:	b29a      	uxth	r2, r3
 800fcd8:	4b65      	ldr	r3, [pc, #404]	; (800fe70 <tcp_receive+0xb04>)
 800fcda:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800fcdc:	4b64      	ldr	r3, [pc, #400]	; (800fe70 <tcp_receive+0xb04>)
 800fcde:	881b      	ldrh	r3, [r3, #0]
 800fce0:	461a      	mov	r2, r3
 800fce2:	4b64      	ldr	r3, [pc, #400]	; (800fe74 <tcp_receive+0xb08>)
 800fce4:	681b      	ldr	r3, [r3, #0]
 800fce6:	441a      	add	r2, r3
 800fce8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fcea:	68db      	ldr	r3, [r3, #12]
 800fcec:	685b      	ldr	r3, [r3, #4]
 800fcee:	429a      	cmp	r2, r3
 800fcf0:	d006      	beq.n	800fd00 <tcp_receive+0x994>
 800fcf2:	4b62      	ldr	r3, [pc, #392]	; (800fe7c <tcp_receive+0xb10>)
 800fcf4:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800fcf8:	4961      	ldr	r1, [pc, #388]	; (800fe80 <tcp_receive+0xb14>)
 800fcfa:	4862      	ldr	r0, [pc, #392]	; (800fe84 <tcp_receive+0xb18>)
 800fcfc:	f004 fc22 	bl	8014544 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800fd04:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800fd06:	4b5a      	ldr	r3, [pc, #360]	; (800fe70 <tcp_receive+0xb04>)
 800fd08:	881b      	ldrh	r3, [r3, #0]
 800fd0a:	461a      	mov	r2, r3
 800fd0c:	4b59      	ldr	r3, [pc, #356]	; (800fe74 <tcp_receive+0xb08>)
 800fd0e:	681b      	ldr	r3, [r3, #0]
 800fd10:	441a      	add	r2, r3
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800fd1a:	4b55      	ldr	r3, [pc, #340]	; (800fe70 <tcp_receive+0xb04>)
 800fd1c:	881b      	ldrh	r3, [r3, #0]
 800fd1e:	429a      	cmp	r2, r3
 800fd20:	d206      	bcs.n	800fd30 <tcp_receive+0x9c4>
 800fd22:	4b56      	ldr	r3, [pc, #344]	; (800fe7c <tcp_receive+0xb10>)
 800fd24:	f240 6207 	movw	r2, #1543	; 0x607
 800fd28:	4957      	ldr	r1, [pc, #348]	; (800fe88 <tcp_receive+0xb1c>)
 800fd2a:	4856      	ldr	r0, [pc, #344]	; (800fe84 <tcp_receive+0xb18>)
 800fd2c:	f004 fc0a 	bl	8014544 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800fd34:	4b4e      	ldr	r3, [pc, #312]	; (800fe70 <tcp_receive+0xb04>)
 800fd36:	881b      	ldrh	r3, [r3, #0]
 800fd38:	1ad3      	subs	r3, r2, r3
 800fd3a:	b29a      	uxth	r2, r3
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800fd40:	6878      	ldr	r0, [r7, #4]
 800fd42:	f7fc ffc9 	bl	800ccd8 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800fd46:	4b4c      	ldr	r3, [pc, #304]	; (800fe78 <tcp_receive+0xb0c>)
 800fd48:	685b      	ldr	r3, [r3, #4]
 800fd4a:	891b      	ldrh	r3, [r3, #8]
 800fd4c:	2b00      	cmp	r3, #0
 800fd4e:	d006      	beq.n	800fd5e <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800fd50:	4b49      	ldr	r3, [pc, #292]	; (800fe78 <tcp_receive+0xb0c>)
 800fd52:	685b      	ldr	r3, [r3, #4]
 800fd54:	4a4d      	ldr	r2, [pc, #308]	; (800fe8c <tcp_receive+0xb20>)
 800fd56:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800fd58:	4b47      	ldr	r3, [pc, #284]	; (800fe78 <tcp_receive+0xb0c>)
 800fd5a:	2200      	movs	r2, #0
 800fd5c:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800fd5e:	4b46      	ldr	r3, [pc, #280]	; (800fe78 <tcp_receive+0xb0c>)
 800fd60:	68db      	ldr	r3, [r3, #12]
 800fd62:	899b      	ldrh	r3, [r3, #12]
 800fd64:	b29b      	uxth	r3, r3
 800fd66:	4618      	mov	r0, r3
 800fd68:	f7fa ff8f 	bl	800ac8a <lwip_htons>
 800fd6c:	4603      	mov	r3, r0
 800fd6e:	b2db      	uxtb	r3, r3
 800fd70:	f003 0301 	and.w	r3, r3, #1
 800fd74:	2b00      	cmp	r3, #0
 800fd76:	f000 80b8 	beq.w	800feea <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800fd7a:	4b45      	ldr	r3, [pc, #276]	; (800fe90 <tcp_receive+0xb24>)
 800fd7c:	781b      	ldrb	r3, [r3, #0]
 800fd7e:	f043 0320 	orr.w	r3, r3, #32
 800fd82:	b2da      	uxtb	r2, r3
 800fd84:	4b42      	ldr	r3, [pc, #264]	; (800fe90 <tcp_receive+0xb24>)
 800fd86:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800fd88:	e0af      	b.n	800feea <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fd8e:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800fd90:	687b      	ldr	r3, [r7, #4]
 800fd92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fd94:	68db      	ldr	r3, [r3, #12]
 800fd96:	685b      	ldr	r3, [r3, #4]
 800fd98:	4a36      	ldr	r2, [pc, #216]	; (800fe74 <tcp_receive+0xb08>)
 800fd9a:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800fd9c:	68bb      	ldr	r3, [r7, #8]
 800fd9e:	891b      	ldrh	r3, [r3, #8]
 800fda0:	461c      	mov	r4, r3
 800fda2:	68bb      	ldr	r3, [r7, #8]
 800fda4:	68db      	ldr	r3, [r3, #12]
 800fda6:	899b      	ldrh	r3, [r3, #12]
 800fda8:	b29b      	uxth	r3, r3
 800fdaa:	4618      	mov	r0, r3
 800fdac:	f7fa ff6d 	bl	800ac8a <lwip_htons>
 800fdb0:	4603      	mov	r3, r0
 800fdb2:	b2db      	uxtb	r3, r3
 800fdb4:	f003 0303 	and.w	r3, r3, #3
 800fdb8:	2b00      	cmp	r3, #0
 800fdba:	d001      	beq.n	800fdc0 <tcp_receive+0xa54>
 800fdbc:	2301      	movs	r3, #1
 800fdbe:	e000      	b.n	800fdc2 <tcp_receive+0xa56>
 800fdc0:	2300      	movs	r3, #0
 800fdc2:	191a      	adds	r2, r3, r4
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fdc8:	441a      	add	r2, r3
 800fdca:	687b      	ldr	r3, [r7, #4]
 800fdcc:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fdd2:	461c      	mov	r4, r3
 800fdd4:	68bb      	ldr	r3, [r7, #8]
 800fdd6:	891b      	ldrh	r3, [r3, #8]
 800fdd8:	461d      	mov	r5, r3
 800fdda:	68bb      	ldr	r3, [r7, #8]
 800fddc:	68db      	ldr	r3, [r3, #12]
 800fdde:	899b      	ldrh	r3, [r3, #12]
 800fde0:	b29b      	uxth	r3, r3
 800fde2:	4618      	mov	r0, r3
 800fde4:	f7fa ff51 	bl	800ac8a <lwip_htons>
 800fde8:	4603      	mov	r3, r0
 800fdea:	b2db      	uxtb	r3, r3
 800fdec:	f003 0303 	and.w	r3, r3, #3
 800fdf0:	2b00      	cmp	r3, #0
 800fdf2:	d001      	beq.n	800fdf8 <tcp_receive+0xa8c>
 800fdf4:	2301      	movs	r3, #1
 800fdf6:	e000      	b.n	800fdfa <tcp_receive+0xa8e>
 800fdf8:	2300      	movs	r3, #0
 800fdfa:	442b      	add	r3, r5
 800fdfc:	429c      	cmp	r4, r3
 800fdfe:	d206      	bcs.n	800fe0e <tcp_receive+0xaa2>
 800fe00:	4b1e      	ldr	r3, [pc, #120]	; (800fe7c <tcp_receive+0xb10>)
 800fe02:	f240 622b 	movw	r2, #1579	; 0x62b
 800fe06:	4923      	ldr	r1, [pc, #140]	; (800fe94 <tcp_receive+0xb28>)
 800fe08:	481e      	ldr	r0, [pc, #120]	; (800fe84 <tcp_receive+0xb18>)
 800fe0a:	f004 fb9b 	bl	8014544 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800fe0e:	68bb      	ldr	r3, [r7, #8]
 800fe10:	891b      	ldrh	r3, [r3, #8]
 800fe12:	461c      	mov	r4, r3
 800fe14:	68bb      	ldr	r3, [r7, #8]
 800fe16:	68db      	ldr	r3, [r3, #12]
 800fe18:	899b      	ldrh	r3, [r3, #12]
 800fe1a:	b29b      	uxth	r3, r3
 800fe1c:	4618      	mov	r0, r3
 800fe1e:	f7fa ff34 	bl	800ac8a <lwip_htons>
 800fe22:	4603      	mov	r3, r0
 800fe24:	b2db      	uxtb	r3, r3
 800fe26:	f003 0303 	and.w	r3, r3, #3
 800fe2a:	2b00      	cmp	r3, #0
 800fe2c:	d001      	beq.n	800fe32 <tcp_receive+0xac6>
 800fe2e:	2301      	movs	r3, #1
 800fe30:	e000      	b.n	800fe34 <tcp_receive+0xac8>
 800fe32:	2300      	movs	r3, #0
 800fe34:	1919      	adds	r1, r3, r4
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800fe3a:	b28b      	uxth	r3, r1
 800fe3c:	1ad3      	subs	r3, r2, r3
 800fe3e:	b29a      	uxth	r2, r3
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800fe44:	6878      	ldr	r0, [r7, #4]
 800fe46:	f7fc ff47 	bl	800ccd8 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800fe4a:	68bb      	ldr	r3, [r7, #8]
 800fe4c:	685b      	ldr	r3, [r3, #4]
 800fe4e:	891b      	ldrh	r3, [r3, #8]
 800fe50:	2b00      	cmp	r3, #0
 800fe52:	d028      	beq.n	800fea6 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800fe54:	4b0d      	ldr	r3, [pc, #52]	; (800fe8c <tcp_receive+0xb20>)
 800fe56:	681b      	ldr	r3, [r3, #0]
 800fe58:	2b00      	cmp	r3, #0
 800fe5a:	d01d      	beq.n	800fe98 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800fe5c:	4b0b      	ldr	r3, [pc, #44]	; (800fe8c <tcp_receive+0xb20>)
 800fe5e:	681a      	ldr	r2, [r3, #0]
 800fe60:	68bb      	ldr	r3, [r7, #8]
 800fe62:	685b      	ldr	r3, [r3, #4]
 800fe64:	4619      	mov	r1, r3
 800fe66:	4610      	mov	r0, r2
 800fe68:	f7fc fa64 	bl	800c334 <pbuf_cat>
 800fe6c:	e018      	b.n	800fea0 <tcp_receive+0xb34>
 800fe6e:	bf00      	nop
 800fe70:	20000112 	.word	0x20000112
 800fe74:	20000108 	.word	0x20000108
 800fe78:	200000e8 	.word	0x200000e8
 800fe7c:	08016b50 	.word	0x08016b50
 800fe80:	08016f30 	.word	0x08016f30
 800fe84:	08016b9c 	.word	0x08016b9c
 800fe88:	08016f6c 	.word	0x08016f6c
 800fe8c:	20000118 	.word	0x20000118
 800fe90:	20000115 	.word	0x20000115
 800fe94:	08016f8c 	.word	0x08016f8c
            } else {
              recv_data = cseg->p;
 800fe98:	68bb      	ldr	r3, [r7, #8]
 800fe9a:	685b      	ldr	r3, [r3, #4]
 800fe9c:	4a70      	ldr	r2, [pc, #448]	; (8010060 <tcp_receive+0xcf4>)
 800fe9e:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800fea0:	68bb      	ldr	r3, [r7, #8]
 800fea2:	2200      	movs	r2, #0
 800fea4:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800fea6:	68bb      	ldr	r3, [r7, #8]
 800fea8:	68db      	ldr	r3, [r3, #12]
 800feaa:	899b      	ldrh	r3, [r3, #12]
 800feac:	b29b      	uxth	r3, r3
 800feae:	4618      	mov	r0, r3
 800feb0:	f7fa feeb 	bl	800ac8a <lwip_htons>
 800feb4:	4603      	mov	r3, r0
 800feb6:	b2db      	uxtb	r3, r3
 800feb8:	f003 0301 	and.w	r3, r3, #1
 800febc:	2b00      	cmp	r3, #0
 800febe:	d00d      	beq.n	800fedc <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800fec0:	4b68      	ldr	r3, [pc, #416]	; (8010064 <tcp_receive+0xcf8>)
 800fec2:	781b      	ldrb	r3, [r3, #0]
 800fec4:	f043 0320 	orr.w	r3, r3, #32
 800fec8:	b2da      	uxtb	r2, r3
 800feca:	4b66      	ldr	r3, [pc, #408]	; (8010064 <tcp_receive+0xcf8>)
 800fecc:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	7d1b      	ldrb	r3, [r3, #20]
 800fed2:	2b04      	cmp	r3, #4
 800fed4:	d102      	bne.n	800fedc <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	2207      	movs	r2, #7
 800feda:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800fedc:	68bb      	ldr	r3, [r7, #8]
 800fede:	681a      	ldr	r2, [r3, #0]
 800fee0:	687b      	ldr	r3, [r7, #4]
 800fee2:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800fee4:	68b8      	ldr	r0, [r7, #8]
 800fee6:	f7fd fbd6 	bl	800d696 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800feee:	2b00      	cmp	r3, #0
 800fef0:	d008      	beq.n	800ff04 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800fef2:	687b      	ldr	r3, [r7, #4]
 800fef4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fef6:	68db      	ldr	r3, [r3, #12]
 800fef8:	685a      	ldr	r2, [r3, #4]
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800fefe:	429a      	cmp	r2, r3
 800ff00:	f43f af43 	beq.w	800fd8a <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	8b5b      	ldrh	r3, [r3, #26]
 800ff08:	f003 0301 	and.w	r3, r3, #1
 800ff0c:	2b00      	cmp	r3, #0
 800ff0e:	d00e      	beq.n	800ff2e <tcp_receive+0xbc2>
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	8b5b      	ldrh	r3, [r3, #26]
 800ff14:	f023 0301 	bic.w	r3, r3, #1
 800ff18:	b29a      	uxth	r2, r3
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	835a      	strh	r2, [r3, #26]
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	8b5b      	ldrh	r3, [r3, #26]
 800ff22:	f043 0302 	orr.w	r3, r3, #2
 800ff26:	b29a      	uxth	r2, r3
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800ff2c:	e188      	b.n	8010240 <tcp_receive+0xed4>
        tcp_ack(pcb);
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	8b5b      	ldrh	r3, [r3, #26]
 800ff32:	f043 0301 	orr.w	r3, r3, #1
 800ff36:	b29a      	uxth	r2, r3
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800ff3c:	e180      	b.n	8010240 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ff42:	2b00      	cmp	r3, #0
 800ff44:	d106      	bne.n	800ff54 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800ff46:	4848      	ldr	r0, [pc, #288]	; (8010068 <tcp_receive+0xcfc>)
 800ff48:	f7fd fbbe 	bl	800d6c8 <tcp_seg_copy>
 800ff4c:	4602      	mov	r2, r0
 800ff4e:	687b      	ldr	r3, [r7, #4]
 800ff50:	675a      	str	r2, [r3, #116]	; 0x74
 800ff52:	e16d      	b.n	8010230 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800ff54:	2300      	movs	r3, #0
 800ff56:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ff5c:	63bb      	str	r3, [r7, #56]	; 0x38
 800ff5e:	e157      	b.n	8010210 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 800ff60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff62:	68db      	ldr	r3, [r3, #12]
 800ff64:	685a      	ldr	r2, [r3, #4]
 800ff66:	4b41      	ldr	r3, [pc, #260]	; (801006c <tcp_receive+0xd00>)
 800ff68:	681b      	ldr	r3, [r3, #0]
 800ff6a:	429a      	cmp	r2, r3
 800ff6c:	d11d      	bne.n	800ffaa <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800ff6e:	4b3e      	ldr	r3, [pc, #248]	; (8010068 <tcp_receive+0xcfc>)
 800ff70:	891a      	ldrh	r2, [r3, #8]
 800ff72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff74:	891b      	ldrh	r3, [r3, #8]
 800ff76:	429a      	cmp	r2, r3
 800ff78:	f240 814f 	bls.w	801021a <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800ff7c:	483a      	ldr	r0, [pc, #232]	; (8010068 <tcp_receive+0xcfc>)
 800ff7e:	f7fd fba3 	bl	800d6c8 <tcp_seg_copy>
 800ff82:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800ff84:	697b      	ldr	r3, [r7, #20]
 800ff86:	2b00      	cmp	r3, #0
 800ff88:	f000 8149 	beq.w	801021e <tcp_receive+0xeb2>
                  if (prev != NULL) {
 800ff8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ff8e:	2b00      	cmp	r3, #0
 800ff90:	d003      	beq.n	800ff9a <tcp_receive+0xc2e>
                    prev->next = cseg;
 800ff92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ff94:	697a      	ldr	r2, [r7, #20]
 800ff96:	601a      	str	r2, [r3, #0]
 800ff98:	e002      	b.n	800ffa0 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	697a      	ldr	r2, [r7, #20]
 800ff9e:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800ffa0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ffa2:	6978      	ldr	r0, [r7, #20]
 800ffa4:	f7ff f8de 	bl	800f164 <tcp_oos_insert_segment>
                }
                break;
 800ffa8:	e139      	b.n	801021e <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800ffaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ffac:	2b00      	cmp	r3, #0
 800ffae:	d117      	bne.n	800ffe0 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800ffb0:	4b2e      	ldr	r3, [pc, #184]	; (801006c <tcp_receive+0xd00>)
 800ffb2:	681a      	ldr	r2, [r3, #0]
 800ffb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffb6:	68db      	ldr	r3, [r3, #12]
 800ffb8:	685b      	ldr	r3, [r3, #4]
 800ffba:	1ad3      	subs	r3, r2, r3
 800ffbc:	2b00      	cmp	r3, #0
 800ffbe:	da57      	bge.n	8010070 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800ffc0:	4829      	ldr	r0, [pc, #164]	; (8010068 <tcp_receive+0xcfc>)
 800ffc2:	f7fd fb81 	bl	800d6c8 <tcp_seg_copy>
 800ffc6:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800ffc8:	69bb      	ldr	r3, [r7, #24]
 800ffca:	2b00      	cmp	r3, #0
 800ffcc:	f000 8129 	beq.w	8010222 <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 800ffd0:	687b      	ldr	r3, [r7, #4]
 800ffd2:	69ba      	ldr	r2, [r7, #24]
 800ffd4:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800ffd6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ffd8:	69b8      	ldr	r0, [r7, #24]
 800ffda:	f7ff f8c3 	bl	800f164 <tcp_oos_insert_segment>
                  }
                  break;
 800ffde:	e120      	b.n	8010222 <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800ffe0:	4b22      	ldr	r3, [pc, #136]	; (801006c <tcp_receive+0xd00>)
 800ffe2:	681a      	ldr	r2, [r3, #0]
 800ffe4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ffe6:	68db      	ldr	r3, [r3, #12]
 800ffe8:	685b      	ldr	r3, [r3, #4]
 800ffea:	1ad3      	subs	r3, r2, r3
 800ffec:	3b01      	subs	r3, #1
 800ffee:	2b00      	cmp	r3, #0
 800fff0:	db3e      	blt.n	8010070 <tcp_receive+0xd04>
 800fff2:	4b1e      	ldr	r3, [pc, #120]	; (801006c <tcp_receive+0xd00>)
 800fff4:	681a      	ldr	r2, [r3, #0]
 800fff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fff8:	68db      	ldr	r3, [r3, #12]
 800fffa:	685b      	ldr	r3, [r3, #4]
 800fffc:	1ad3      	subs	r3, r2, r3
 800fffe:	3301      	adds	r3, #1
 8010000:	2b00      	cmp	r3, #0
 8010002:	dc35      	bgt.n	8010070 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8010004:	4818      	ldr	r0, [pc, #96]	; (8010068 <tcp_receive+0xcfc>)
 8010006:	f7fd fb5f 	bl	800d6c8 <tcp_seg_copy>
 801000a:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 801000c:	69fb      	ldr	r3, [r7, #28]
 801000e:	2b00      	cmp	r3, #0
 8010010:	f000 8109 	beq.w	8010226 <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8010014:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010016:	68db      	ldr	r3, [r3, #12]
 8010018:	685b      	ldr	r3, [r3, #4]
 801001a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801001c:	8912      	ldrh	r2, [r2, #8]
 801001e:	441a      	add	r2, r3
 8010020:	4b12      	ldr	r3, [pc, #72]	; (801006c <tcp_receive+0xd00>)
 8010022:	681b      	ldr	r3, [r3, #0]
 8010024:	1ad3      	subs	r3, r2, r3
 8010026:	2b00      	cmp	r3, #0
 8010028:	dd12      	ble.n	8010050 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801002a:	4b10      	ldr	r3, [pc, #64]	; (801006c <tcp_receive+0xd00>)
 801002c:	681b      	ldr	r3, [r3, #0]
 801002e:	b29a      	uxth	r2, r3
 8010030:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010032:	68db      	ldr	r3, [r3, #12]
 8010034:	685b      	ldr	r3, [r3, #4]
 8010036:	b29b      	uxth	r3, r3
 8010038:	1ad3      	subs	r3, r2, r3
 801003a:	b29a      	uxth	r2, r3
 801003c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801003e:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8010040:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010042:	685a      	ldr	r2, [r3, #4]
 8010044:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010046:	891b      	ldrh	r3, [r3, #8]
 8010048:	4619      	mov	r1, r3
 801004a:	4610      	mov	r0, r2
 801004c:	f7fb ff2a 	bl	800bea4 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8010050:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010052:	69fa      	ldr	r2, [r7, #28]
 8010054:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8010056:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010058:	69f8      	ldr	r0, [r7, #28]
 801005a:	f7ff f883 	bl	800f164 <tcp_oos_insert_segment>
                  }
                  break;
 801005e:	e0e2      	b.n	8010226 <tcp_receive+0xeba>
 8010060:	20000118 	.word	0x20000118
 8010064:	20000115 	.word	0x20000115
 8010068:	200000e8 	.word	0x200000e8
 801006c:	20000108 	.word	0x20000108
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8010070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010072:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8010074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010076:	681b      	ldr	r3, [r3, #0]
 8010078:	2b00      	cmp	r3, #0
 801007a:	f040 80c6 	bne.w	801020a <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 801007e:	4b80      	ldr	r3, [pc, #512]	; (8010280 <tcp_receive+0xf14>)
 8010080:	681a      	ldr	r2, [r3, #0]
 8010082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010084:	68db      	ldr	r3, [r3, #12]
 8010086:	685b      	ldr	r3, [r3, #4]
 8010088:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 801008a:	2b00      	cmp	r3, #0
 801008c:	f340 80bd 	ble.w	801020a <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8010090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010092:	68db      	ldr	r3, [r3, #12]
 8010094:	899b      	ldrh	r3, [r3, #12]
 8010096:	b29b      	uxth	r3, r3
 8010098:	4618      	mov	r0, r3
 801009a:	f7fa fdf6 	bl	800ac8a <lwip_htons>
 801009e:	4603      	mov	r3, r0
 80100a0:	b2db      	uxtb	r3, r3
 80100a2:	f003 0301 	and.w	r3, r3, #1
 80100a6:	2b00      	cmp	r3, #0
 80100a8:	f040 80bf 	bne.w	801022a <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 80100ac:	4875      	ldr	r0, [pc, #468]	; (8010284 <tcp_receive+0xf18>)
 80100ae:	f7fd fb0b 	bl	800d6c8 <tcp_seg_copy>
 80100b2:	4602      	mov	r2, r0
 80100b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100b6:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 80100b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100ba:	681b      	ldr	r3, [r3, #0]
 80100bc:	2b00      	cmp	r3, #0
 80100be:	f000 80b6 	beq.w	801022e <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 80100c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100c4:	68db      	ldr	r3, [r3, #12]
 80100c6:	685b      	ldr	r3, [r3, #4]
 80100c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80100ca:	8912      	ldrh	r2, [r2, #8]
 80100cc:	441a      	add	r2, r3
 80100ce:	4b6c      	ldr	r3, [pc, #432]	; (8010280 <tcp_receive+0xf14>)
 80100d0:	681b      	ldr	r3, [r3, #0]
 80100d2:	1ad3      	subs	r3, r2, r3
 80100d4:	2b00      	cmp	r3, #0
 80100d6:	dd12      	ble.n	80100fe <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 80100d8:	4b69      	ldr	r3, [pc, #420]	; (8010280 <tcp_receive+0xf14>)
 80100da:	681b      	ldr	r3, [r3, #0]
 80100dc:	b29a      	uxth	r2, r3
 80100de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100e0:	68db      	ldr	r3, [r3, #12]
 80100e2:	685b      	ldr	r3, [r3, #4]
 80100e4:	b29b      	uxth	r3, r3
 80100e6:	1ad3      	subs	r3, r2, r3
 80100e8:	b29a      	uxth	r2, r3
 80100ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100ec:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 80100ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100f0:	685a      	ldr	r2, [r3, #4]
 80100f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100f4:	891b      	ldrh	r3, [r3, #8]
 80100f6:	4619      	mov	r1, r3
 80100f8:	4610      	mov	r0, r2
 80100fa:	f7fb fed3 	bl	800bea4 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 80100fe:	4b62      	ldr	r3, [pc, #392]	; (8010288 <tcp_receive+0xf1c>)
 8010100:	881b      	ldrh	r3, [r3, #0]
 8010102:	461a      	mov	r2, r3
 8010104:	4b5e      	ldr	r3, [pc, #376]	; (8010280 <tcp_receive+0xf14>)
 8010106:	681b      	ldr	r3, [r3, #0]
 8010108:	441a      	add	r2, r3
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801010e:	6879      	ldr	r1, [r7, #4]
 8010110:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010112:	440b      	add	r3, r1
 8010114:	1ad3      	subs	r3, r2, r3
 8010116:	2b00      	cmp	r3, #0
 8010118:	f340 8089 	ble.w	801022e <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 801011c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801011e:	681b      	ldr	r3, [r3, #0]
 8010120:	68db      	ldr	r3, [r3, #12]
 8010122:	899b      	ldrh	r3, [r3, #12]
 8010124:	b29b      	uxth	r3, r3
 8010126:	4618      	mov	r0, r3
 8010128:	f7fa fdaf 	bl	800ac8a <lwip_htons>
 801012c:	4603      	mov	r3, r0
 801012e:	b2db      	uxtb	r3, r3
 8010130:	f003 0301 	and.w	r3, r3, #1
 8010134:	2b00      	cmp	r3, #0
 8010136:	d022      	beq.n	801017e <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8010138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801013a:	681b      	ldr	r3, [r3, #0]
 801013c:	68db      	ldr	r3, [r3, #12]
 801013e:	899b      	ldrh	r3, [r3, #12]
 8010140:	b29b      	uxth	r3, r3
 8010142:	b21b      	sxth	r3, r3
 8010144:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8010148:	b21c      	sxth	r4, r3
 801014a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801014c:	681b      	ldr	r3, [r3, #0]
 801014e:	68db      	ldr	r3, [r3, #12]
 8010150:	899b      	ldrh	r3, [r3, #12]
 8010152:	b29b      	uxth	r3, r3
 8010154:	4618      	mov	r0, r3
 8010156:	f7fa fd98 	bl	800ac8a <lwip_htons>
 801015a:	4603      	mov	r3, r0
 801015c:	b2db      	uxtb	r3, r3
 801015e:	b29b      	uxth	r3, r3
 8010160:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8010164:	b29b      	uxth	r3, r3
 8010166:	4618      	mov	r0, r3
 8010168:	f7fa fd8f 	bl	800ac8a <lwip_htons>
 801016c:	4603      	mov	r3, r0
 801016e:	b21b      	sxth	r3, r3
 8010170:	4323      	orrs	r3, r4
 8010172:	b21a      	sxth	r2, r3
 8010174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010176:	681b      	ldr	r3, [r3, #0]
 8010178:	68db      	ldr	r3, [r3, #12]
 801017a:	b292      	uxth	r2, r2
 801017c:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 801017e:	687b      	ldr	r3, [r7, #4]
 8010180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010182:	b29a      	uxth	r2, r3
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010188:	4413      	add	r3, r2
 801018a:	b299      	uxth	r1, r3
 801018c:	4b3c      	ldr	r3, [pc, #240]	; (8010280 <tcp_receive+0xf14>)
 801018e:	681b      	ldr	r3, [r3, #0]
 8010190:	b29a      	uxth	r2, r3
 8010192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010194:	681b      	ldr	r3, [r3, #0]
 8010196:	1a8a      	subs	r2, r1, r2
 8010198:	b292      	uxth	r2, r2
 801019a:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 801019c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801019e:	681b      	ldr	r3, [r3, #0]
 80101a0:	685a      	ldr	r2, [r3, #4]
 80101a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101a4:	681b      	ldr	r3, [r3, #0]
 80101a6:	891b      	ldrh	r3, [r3, #8]
 80101a8:	4619      	mov	r1, r3
 80101aa:	4610      	mov	r0, r2
 80101ac:	f7fb fe7a 	bl	800bea4 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 80101b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101b2:	681b      	ldr	r3, [r3, #0]
 80101b4:	891c      	ldrh	r4, [r3, #8]
 80101b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101b8:	681b      	ldr	r3, [r3, #0]
 80101ba:	68db      	ldr	r3, [r3, #12]
 80101bc:	899b      	ldrh	r3, [r3, #12]
 80101be:	b29b      	uxth	r3, r3
 80101c0:	4618      	mov	r0, r3
 80101c2:	f7fa fd62 	bl	800ac8a <lwip_htons>
 80101c6:	4603      	mov	r3, r0
 80101c8:	b2db      	uxtb	r3, r3
 80101ca:	f003 0303 	and.w	r3, r3, #3
 80101ce:	2b00      	cmp	r3, #0
 80101d0:	d001      	beq.n	80101d6 <tcp_receive+0xe6a>
 80101d2:	2301      	movs	r3, #1
 80101d4:	e000      	b.n	80101d8 <tcp_receive+0xe6c>
 80101d6:	2300      	movs	r3, #0
 80101d8:	4423      	add	r3, r4
 80101da:	b29a      	uxth	r2, r3
 80101dc:	4b2a      	ldr	r3, [pc, #168]	; (8010288 <tcp_receive+0xf1c>)
 80101de:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80101e0:	4b29      	ldr	r3, [pc, #164]	; (8010288 <tcp_receive+0xf1c>)
 80101e2:	881b      	ldrh	r3, [r3, #0]
 80101e4:	461a      	mov	r2, r3
 80101e6:	4b26      	ldr	r3, [pc, #152]	; (8010280 <tcp_receive+0xf14>)
 80101e8:	681b      	ldr	r3, [r3, #0]
 80101ea:	441a      	add	r2, r3
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80101f0:	6879      	ldr	r1, [r7, #4]
 80101f2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80101f4:	440b      	add	r3, r1
 80101f6:	429a      	cmp	r2, r3
 80101f8:	d019      	beq.n	801022e <tcp_receive+0xec2>
 80101fa:	4b24      	ldr	r3, [pc, #144]	; (801028c <tcp_receive+0xf20>)
 80101fc:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8010200:	4923      	ldr	r1, [pc, #140]	; (8010290 <tcp_receive+0xf24>)
 8010202:	4824      	ldr	r0, [pc, #144]	; (8010294 <tcp_receive+0xf28>)
 8010204:	f004 f99e 	bl	8014544 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8010208:	e011      	b.n	801022e <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801020a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801020c:	681b      	ldr	r3, [r3, #0]
 801020e:	63bb      	str	r3, [r7, #56]	; 0x38
 8010210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010212:	2b00      	cmp	r3, #0
 8010214:	f47f aea4 	bne.w	800ff60 <tcp_receive+0xbf4>
 8010218:	e00a      	b.n	8010230 <tcp_receive+0xec4>
                break;
 801021a:	bf00      	nop
 801021c:	e008      	b.n	8010230 <tcp_receive+0xec4>
                break;
 801021e:	bf00      	nop
 8010220:	e006      	b.n	8010230 <tcp_receive+0xec4>
                  break;
 8010222:	bf00      	nop
 8010224:	e004      	b.n	8010230 <tcp_receive+0xec4>
                  break;
 8010226:	bf00      	nop
 8010228:	e002      	b.n	8010230 <tcp_receive+0xec4>
                  break;
 801022a:	bf00      	nop
 801022c:	e000      	b.n	8010230 <tcp_receive+0xec4>
                break;
 801022e:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8010230:	6878      	ldr	r0, [r7, #4]
 8010232:	f001 fa33 	bl	801169c <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8010236:	e003      	b.n	8010240 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8010238:	6878      	ldr	r0, [r7, #4]
 801023a:	f001 fa2f 	bl	801169c <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801023e:	e01a      	b.n	8010276 <tcp_receive+0xf0a>
 8010240:	e019      	b.n	8010276 <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8010242:	4b0f      	ldr	r3, [pc, #60]	; (8010280 <tcp_receive+0xf14>)
 8010244:	681a      	ldr	r2, [r3, #0]
 8010246:	687b      	ldr	r3, [r7, #4]
 8010248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801024a:	1ad3      	subs	r3, r2, r3
 801024c:	2b00      	cmp	r3, #0
 801024e:	db0a      	blt.n	8010266 <tcp_receive+0xefa>
 8010250:	4b0b      	ldr	r3, [pc, #44]	; (8010280 <tcp_receive+0xf14>)
 8010252:	681a      	ldr	r2, [r3, #0]
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010258:	6879      	ldr	r1, [r7, #4]
 801025a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801025c:	440b      	add	r3, r1
 801025e:	1ad3      	subs	r3, r2, r3
 8010260:	3301      	adds	r3, #1
 8010262:	2b00      	cmp	r3, #0
 8010264:	dd07      	ble.n	8010276 <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 8010266:	687b      	ldr	r3, [r7, #4]
 8010268:	8b5b      	ldrh	r3, [r3, #26]
 801026a:	f043 0302 	orr.w	r3, r3, #2
 801026e:	b29a      	uxth	r2, r3
 8010270:	687b      	ldr	r3, [r7, #4]
 8010272:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8010274:	e7ff      	b.n	8010276 <tcp_receive+0xf0a>
 8010276:	bf00      	nop
 8010278:	3750      	adds	r7, #80	; 0x50
 801027a:	46bd      	mov	sp, r7
 801027c:	bdb0      	pop	{r4, r5, r7, pc}
 801027e:	bf00      	nop
 8010280:	20000108 	.word	0x20000108
 8010284:	200000e8 	.word	0x200000e8
 8010288:	20000112 	.word	0x20000112
 801028c:	08016b50 	.word	0x08016b50
 8010290:	08016ef8 	.word	0x08016ef8
 8010294:	08016b9c 	.word	0x08016b9c

08010298 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8010298:	b480      	push	{r7}
 801029a:	b083      	sub	sp, #12
 801029c:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 801029e:	4b15      	ldr	r3, [pc, #84]	; (80102f4 <tcp_get_next_optbyte+0x5c>)
 80102a0:	881b      	ldrh	r3, [r3, #0]
 80102a2:	1c5a      	adds	r2, r3, #1
 80102a4:	b291      	uxth	r1, r2
 80102a6:	4a13      	ldr	r2, [pc, #76]	; (80102f4 <tcp_get_next_optbyte+0x5c>)
 80102a8:	8011      	strh	r1, [r2, #0]
 80102aa:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 80102ac:	4b12      	ldr	r3, [pc, #72]	; (80102f8 <tcp_get_next_optbyte+0x60>)
 80102ae:	681b      	ldr	r3, [r3, #0]
 80102b0:	2b00      	cmp	r3, #0
 80102b2:	d004      	beq.n	80102be <tcp_get_next_optbyte+0x26>
 80102b4:	4b11      	ldr	r3, [pc, #68]	; (80102fc <tcp_get_next_optbyte+0x64>)
 80102b6:	881b      	ldrh	r3, [r3, #0]
 80102b8:	88fa      	ldrh	r2, [r7, #6]
 80102ba:	429a      	cmp	r2, r3
 80102bc:	d208      	bcs.n	80102d0 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 80102be:	4b10      	ldr	r3, [pc, #64]	; (8010300 <tcp_get_next_optbyte+0x68>)
 80102c0:	681b      	ldr	r3, [r3, #0]
 80102c2:	3314      	adds	r3, #20
 80102c4:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 80102c6:	88fb      	ldrh	r3, [r7, #6]
 80102c8:	683a      	ldr	r2, [r7, #0]
 80102ca:	4413      	add	r3, r2
 80102cc:	781b      	ldrb	r3, [r3, #0]
 80102ce:	e00b      	b.n	80102e8 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 80102d0:	88fb      	ldrh	r3, [r7, #6]
 80102d2:	b2da      	uxtb	r2, r3
 80102d4:	4b09      	ldr	r3, [pc, #36]	; (80102fc <tcp_get_next_optbyte+0x64>)
 80102d6:	881b      	ldrh	r3, [r3, #0]
 80102d8:	b2db      	uxtb	r3, r3
 80102da:	1ad3      	subs	r3, r2, r3
 80102dc:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 80102de:	4b06      	ldr	r3, [pc, #24]	; (80102f8 <tcp_get_next_optbyte+0x60>)
 80102e0:	681a      	ldr	r2, [r3, #0]
 80102e2:	797b      	ldrb	r3, [r7, #5]
 80102e4:	4413      	add	r3, r2
 80102e6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80102e8:	4618      	mov	r0, r3
 80102ea:	370c      	adds	r7, #12
 80102ec:	46bd      	mov	sp, r7
 80102ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102f2:	4770      	bx	lr
 80102f4:	20000104 	.word	0x20000104
 80102f8:	20000100 	.word	0x20000100
 80102fc:	200000fe 	.word	0x200000fe
 8010300:	200000f8 	.word	0x200000f8

08010304 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8010304:	b580      	push	{r7, lr}
 8010306:	b084      	sub	sp, #16
 8010308:	af00      	add	r7, sp, #0
 801030a:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	2b00      	cmp	r3, #0
 8010310:	d106      	bne.n	8010320 <tcp_parseopt+0x1c>
 8010312:	4b32      	ldr	r3, [pc, #200]	; (80103dc <tcp_parseopt+0xd8>)
 8010314:	f240 727d 	movw	r2, #1917	; 0x77d
 8010318:	4931      	ldr	r1, [pc, #196]	; (80103e0 <tcp_parseopt+0xdc>)
 801031a:	4832      	ldr	r0, [pc, #200]	; (80103e4 <tcp_parseopt+0xe0>)
 801031c:	f004 f912 	bl	8014544 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8010320:	4b31      	ldr	r3, [pc, #196]	; (80103e8 <tcp_parseopt+0xe4>)
 8010322:	881b      	ldrh	r3, [r3, #0]
 8010324:	2b00      	cmp	r3, #0
 8010326:	d055      	beq.n	80103d4 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8010328:	4b30      	ldr	r3, [pc, #192]	; (80103ec <tcp_parseopt+0xe8>)
 801032a:	2200      	movs	r2, #0
 801032c:	801a      	strh	r2, [r3, #0]
 801032e:	e045      	b.n	80103bc <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8010330:	f7ff ffb2 	bl	8010298 <tcp_get_next_optbyte>
 8010334:	4603      	mov	r3, r0
 8010336:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8010338:	7bfb      	ldrb	r3, [r7, #15]
 801033a:	2b02      	cmp	r3, #2
 801033c:	d006      	beq.n	801034c <tcp_parseopt+0x48>
 801033e:	2b02      	cmp	r3, #2
 8010340:	dc2b      	bgt.n	801039a <tcp_parseopt+0x96>
 8010342:	2b00      	cmp	r3, #0
 8010344:	d041      	beq.n	80103ca <tcp_parseopt+0xc6>
 8010346:	2b01      	cmp	r3, #1
 8010348:	d127      	bne.n	801039a <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 801034a:	e037      	b.n	80103bc <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 801034c:	f7ff ffa4 	bl	8010298 <tcp_get_next_optbyte>
 8010350:	4603      	mov	r3, r0
 8010352:	2b04      	cmp	r3, #4
 8010354:	d13b      	bne.n	80103ce <tcp_parseopt+0xca>
 8010356:	4b25      	ldr	r3, [pc, #148]	; (80103ec <tcp_parseopt+0xe8>)
 8010358:	881b      	ldrh	r3, [r3, #0]
 801035a:	3301      	adds	r3, #1
 801035c:	4a22      	ldr	r2, [pc, #136]	; (80103e8 <tcp_parseopt+0xe4>)
 801035e:	8812      	ldrh	r2, [r2, #0]
 8010360:	4293      	cmp	r3, r2
 8010362:	da34      	bge.n	80103ce <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8010364:	f7ff ff98 	bl	8010298 <tcp_get_next_optbyte>
 8010368:	4603      	mov	r3, r0
 801036a:	b29b      	uxth	r3, r3
 801036c:	021b      	lsls	r3, r3, #8
 801036e:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8010370:	f7ff ff92 	bl	8010298 <tcp_get_next_optbyte>
 8010374:	4603      	mov	r3, r0
 8010376:	b29a      	uxth	r2, r3
 8010378:	89bb      	ldrh	r3, [r7, #12]
 801037a:	4313      	orrs	r3, r2
 801037c:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 801037e:	89bb      	ldrh	r3, [r7, #12]
 8010380:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8010384:	d804      	bhi.n	8010390 <tcp_parseopt+0x8c>
 8010386:	89bb      	ldrh	r3, [r7, #12]
 8010388:	2b00      	cmp	r3, #0
 801038a:	d001      	beq.n	8010390 <tcp_parseopt+0x8c>
 801038c:	89ba      	ldrh	r2, [r7, #12]
 801038e:	e001      	b.n	8010394 <tcp_parseopt+0x90>
 8010390:	f44f 7206 	mov.w	r2, #536	; 0x218
 8010394:	687b      	ldr	r3, [r7, #4]
 8010396:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8010398:	e010      	b.n	80103bc <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 801039a:	f7ff ff7d 	bl	8010298 <tcp_get_next_optbyte>
 801039e:	4603      	mov	r3, r0
 80103a0:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 80103a2:	7afb      	ldrb	r3, [r7, #11]
 80103a4:	2b01      	cmp	r3, #1
 80103a6:	d914      	bls.n	80103d2 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 80103a8:	7afb      	ldrb	r3, [r7, #11]
 80103aa:	b29a      	uxth	r2, r3
 80103ac:	4b0f      	ldr	r3, [pc, #60]	; (80103ec <tcp_parseopt+0xe8>)
 80103ae:	881b      	ldrh	r3, [r3, #0]
 80103b0:	4413      	add	r3, r2
 80103b2:	b29b      	uxth	r3, r3
 80103b4:	3b02      	subs	r3, #2
 80103b6:	b29a      	uxth	r2, r3
 80103b8:	4b0c      	ldr	r3, [pc, #48]	; (80103ec <tcp_parseopt+0xe8>)
 80103ba:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80103bc:	4b0b      	ldr	r3, [pc, #44]	; (80103ec <tcp_parseopt+0xe8>)
 80103be:	881a      	ldrh	r2, [r3, #0]
 80103c0:	4b09      	ldr	r3, [pc, #36]	; (80103e8 <tcp_parseopt+0xe4>)
 80103c2:	881b      	ldrh	r3, [r3, #0]
 80103c4:	429a      	cmp	r2, r3
 80103c6:	d3b3      	bcc.n	8010330 <tcp_parseopt+0x2c>
 80103c8:	e004      	b.n	80103d4 <tcp_parseopt+0xd0>
          return;
 80103ca:	bf00      	nop
 80103cc:	e002      	b.n	80103d4 <tcp_parseopt+0xd0>
            return;
 80103ce:	bf00      	nop
 80103d0:	e000      	b.n	80103d4 <tcp_parseopt+0xd0>
            return;
 80103d2:	bf00      	nop
      }
    }
  }
}
 80103d4:	3710      	adds	r7, #16
 80103d6:	46bd      	mov	sp, r7
 80103d8:	bd80      	pop	{r7, pc}
 80103da:	bf00      	nop
 80103dc:	08016b50 	.word	0x08016b50
 80103e0:	08016fb4 	.word	0x08016fb4
 80103e4:	08016b9c 	.word	0x08016b9c
 80103e8:	200000fc 	.word	0x200000fc
 80103ec:	20000104 	.word	0x20000104

080103f0 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 80103f0:	b480      	push	{r7}
 80103f2:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 80103f4:	4b05      	ldr	r3, [pc, #20]	; (801040c <tcp_trigger_input_pcb_close+0x1c>)
 80103f6:	781b      	ldrb	r3, [r3, #0]
 80103f8:	f043 0310 	orr.w	r3, r3, #16
 80103fc:	b2da      	uxtb	r2, r3
 80103fe:	4b03      	ldr	r3, [pc, #12]	; (801040c <tcp_trigger_input_pcb_close+0x1c>)
 8010400:	701a      	strb	r2, [r3, #0]
}
 8010402:	bf00      	nop
 8010404:	46bd      	mov	sp, r7
 8010406:	f85d 7b04 	ldr.w	r7, [sp], #4
 801040a:	4770      	bx	lr
 801040c:	20000115 	.word	0x20000115

08010410 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8010410:	b580      	push	{r7, lr}
 8010412:	b084      	sub	sp, #16
 8010414:	af00      	add	r7, sp, #0
 8010416:	60f8      	str	r0, [r7, #12]
 8010418:	60b9      	str	r1, [r7, #8]
 801041a:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 801041c:	68fb      	ldr	r3, [r7, #12]
 801041e:	2b00      	cmp	r3, #0
 8010420:	d00a      	beq.n	8010438 <tcp_route+0x28>
 8010422:	68fb      	ldr	r3, [r7, #12]
 8010424:	7a1b      	ldrb	r3, [r3, #8]
 8010426:	2b00      	cmp	r3, #0
 8010428:	d006      	beq.n	8010438 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 801042a:	68fb      	ldr	r3, [r7, #12]
 801042c:	7a1b      	ldrb	r3, [r3, #8]
 801042e:	4618      	mov	r0, r3
 8010430:	f7fb fb7e 	bl	800bb30 <netif_get_by_index>
 8010434:	4603      	mov	r3, r0
 8010436:	e003      	b.n	8010440 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8010438:	6878      	ldr	r0, [r7, #4]
 801043a:	f002 fe3b 	bl	80130b4 <ip4_route>
 801043e:	4603      	mov	r3, r0
  }
}
 8010440:	4618      	mov	r0, r3
 8010442:	3710      	adds	r7, #16
 8010444:	46bd      	mov	sp, r7
 8010446:	bd80      	pop	{r7, pc}

08010448 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8010448:	b590      	push	{r4, r7, lr}
 801044a:	b087      	sub	sp, #28
 801044c:	af00      	add	r7, sp, #0
 801044e:	60f8      	str	r0, [r7, #12]
 8010450:	60b9      	str	r1, [r7, #8]
 8010452:	603b      	str	r3, [r7, #0]
 8010454:	4613      	mov	r3, r2
 8010456:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8010458:	68fb      	ldr	r3, [r7, #12]
 801045a:	2b00      	cmp	r3, #0
 801045c:	d105      	bne.n	801046a <tcp_create_segment+0x22>
 801045e:	4b44      	ldr	r3, [pc, #272]	; (8010570 <tcp_create_segment+0x128>)
 8010460:	22a3      	movs	r2, #163	; 0xa3
 8010462:	4944      	ldr	r1, [pc, #272]	; (8010574 <tcp_create_segment+0x12c>)
 8010464:	4844      	ldr	r0, [pc, #272]	; (8010578 <tcp_create_segment+0x130>)
 8010466:	f004 f86d 	bl	8014544 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 801046a:	68bb      	ldr	r3, [r7, #8]
 801046c:	2b00      	cmp	r3, #0
 801046e:	d105      	bne.n	801047c <tcp_create_segment+0x34>
 8010470:	4b3f      	ldr	r3, [pc, #252]	; (8010570 <tcp_create_segment+0x128>)
 8010472:	22a4      	movs	r2, #164	; 0xa4
 8010474:	4941      	ldr	r1, [pc, #260]	; (801057c <tcp_create_segment+0x134>)
 8010476:	4840      	ldr	r0, [pc, #256]	; (8010578 <tcp_create_segment+0x130>)
 8010478:	f004 f864 	bl	8014544 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801047c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8010480:	009b      	lsls	r3, r3, #2
 8010482:	b2db      	uxtb	r3, r3
 8010484:	f003 0304 	and.w	r3, r3, #4
 8010488:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801048a:	2003      	movs	r0, #3
 801048c:	f7fb f852 	bl	800b534 <memp_malloc>
 8010490:	6138      	str	r0, [r7, #16]
 8010492:	693b      	ldr	r3, [r7, #16]
 8010494:	2b00      	cmp	r3, #0
 8010496:	d104      	bne.n	80104a2 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8010498:	68b8      	ldr	r0, [r7, #8]
 801049a:	f7fb fe89 	bl	800c1b0 <pbuf_free>
    return NULL;
 801049e:	2300      	movs	r3, #0
 80104a0:	e061      	b.n	8010566 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 80104a2:	693b      	ldr	r3, [r7, #16]
 80104a4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80104a8:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 80104aa:	693b      	ldr	r3, [r7, #16]
 80104ac:	2200      	movs	r2, #0
 80104ae:	601a      	str	r2, [r3, #0]
  seg->p = p;
 80104b0:	693b      	ldr	r3, [r7, #16]
 80104b2:	68ba      	ldr	r2, [r7, #8]
 80104b4:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 80104b6:	68bb      	ldr	r3, [r7, #8]
 80104b8:	891a      	ldrh	r2, [r3, #8]
 80104ba:	7dfb      	ldrb	r3, [r7, #23]
 80104bc:	b29b      	uxth	r3, r3
 80104be:	429a      	cmp	r2, r3
 80104c0:	d205      	bcs.n	80104ce <tcp_create_segment+0x86>
 80104c2:	4b2b      	ldr	r3, [pc, #172]	; (8010570 <tcp_create_segment+0x128>)
 80104c4:	22b0      	movs	r2, #176	; 0xb0
 80104c6:	492e      	ldr	r1, [pc, #184]	; (8010580 <tcp_create_segment+0x138>)
 80104c8:	482b      	ldr	r0, [pc, #172]	; (8010578 <tcp_create_segment+0x130>)
 80104ca:	f004 f83b 	bl	8014544 <iprintf>
  seg->len = p->tot_len - optlen;
 80104ce:	68bb      	ldr	r3, [r7, #8]
 80104d0:	891a      	ldrh	r2, [r3, #8]
 80104d2:	7dfb      	ldrb	r3, [r7, #23]
 80104d4:	b29b      	uxth	r3, r3
 80104d6:	1ad3      	subs	r3, r2, r3
 80104d8:	b29a      	uxth	r2, r3
 80104da:	693b      	ldr	r3, [r7, #16]
 80104dc:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 80104de:	2114      	movs	r1, #20
 80104e0:	68b8      	ldr	r0, [r7, #8]
 80104e2:	f7fb fdcf 	bl	800c084 <pbuf_add_header>
 80104e6:	4603      	mov	r3, r0
 80104e8:	2b00      	cmp	r3, #0
 80104ea:	d004      	beq.n	80104f6 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 80104ec:	6938      	ldr	r0, [r7, #16]
 80104ee:	f7fd f8d2 	bl	800d696 <tcp_seg_free>
    return NULL;
 80104f2:	2300      	movs	r3, #0
 80104f4:	e037      	b.n	8010566 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 80104f6:	693b      	ldr	r3, [r7, #16]
 80104f8:	685b      	ldr	r3, [r3, #4]
 80104fa:	685a      	ldr	r2, [r3, #4]
 80104fc:	693b      	ldr	r3, [r7, #16]
 80104fe:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8010500:	68fb      	ldr	r3, [r7, #12]
 8010502:	8ada      	ldrh	r2, [r3, #22]
 8010504:	693b      	ldr	r3, [r7, #16]
 8010506:	68dc      	ldr	r4, [r3, #12]
 8010508:	4610      	mov	r0, r2
 801050a:	f7fa fbbe 	bl	800ac8a <lwip_htons>
 801050e:	4603      	mov	r3, r0
 8010510:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8010512:	68fb      	ldr	r3, [r7, #12]
 8010514:	8b1a      	ldrh	r2, [r3, #24]
 8010516:	693b      	ldr	r3, [r7, #16]
 8010518:	68dc      	ldr	r4, [r3, #12]
 801051a:	4610      	mov	r0, r2
 801051c:	f7fa fbb5 	bl	800ac8a <lwip_htons>
 8010520:	4603      	mov	r3, r0
 8010522:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8010524:	693b      	ldr	r3, [r7, #16]
 8010526:	68dc      	ldr	r4, [r3, #12]
 8010528:	6838      	ldr	r0, [r7, #0]
 801052a:	f7fa fbc3 	bl	800acb4 <lwip_htonl>
 801052e:	4603      	mov	r3, r0
 8010530:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8010532:	7dfb      	ldrb	r3, [r7, #23]
 8010534:	089b      	lsrs	r3, r3, #2
 8010536:	b2db      	uxtb	r3, r3
 8010538:	b29b      	uxth	r3, r3
 801053a:	3305      	adds	r3, #5
 801053c:	b29b      	uxth	r3, r3
 801053e:	031b      	lsls	r3, r3, #12
 8010540:	b29a      	uxth	r2, r3
 8010542:	79fb      	ldrb	r3, [r7, #7]
 8010544:	b29b      	uxth	r3, r3
 8010546:	4313      	orrs	r3, r2
 8010548:	b29a      	uxth	r2, r3
 801054a:	693b      	ldr	r3, [r7, #16]
 801054c:	68dc      	ldr	r4, [r3, #12]
 801054e:	4610      	mov	r0, r2
 8010550:	f7fa fb9b 	bl	800ac8a <lwip_htons>
 8010554:	4603      	mov	r3, r0
 8010556:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8010558:	693b      	ldr	r3, [r7, #16]
 801055a:	68db      	ldr	r3, [r3, #12]
 801055c:	2200      	movs	r2, #0
 801055e:	749a      	strb	r2, [r3, #18]
 8010560:	2200      	movs	r2, #0
 8010562:	74da      	strb	r2, [r3, #19]
  return seg;
 8010564:	693b      	ldr	r3, [r7, #16]
}
 8010566:	4618      	mov	r0, r3
 8010568:	371c      	adds	r7, #28
 801056a:	46bd      	mov	sp, r7
 801056c:	bd90      	pop	{r4, r7, pc}
 801056e:	bf00      	nop
 8010570:	08016fd0 	.word	0x08016fd0
 8010574:	08017004 	.word	0x08017004
 8010578:	08017024 	.word	0x08017024
 801057c:	0801704c 	.word	0x0801704c
 8010580:	08017070 	.word	0x08017070

08010584 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8010584:	b590      	push	{r4, r7, lr}
 8010586:	b08b      	sub	sp, #44	; 0x2c
 8010588:	af02      	add	r7, sp, #8
 801058a:	6078      	str	r0, [r7, #4]
 801058c:	460b      	mov	r3, r1
 801058e:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8010590:	2300      	movs	r3, #0
 8010592:	61fb      	str	r3, [r7, #28]
 8010594:	2300      	movs	r3, #0
 8010596:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8010598:	2300      	movs	r3, #0
 801059a:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 801059c:	687b      	ldr	r3, [r7, #4]
 801059e:	2b00      	cmp	r3, #0
 80105a0:	d106      	bne.n	80105b0 <tcp_split_unsent_seg+0x2c>
 80105a2:	4b95      	ldr	r3, [pc, #596]	; (80107f8 <tcp_split_unsent_seg+0x274>)
 80105a4:	f240 324b 	movw	r2, #843	; 0x34b
 80105a8:	4994      	ldr	r1, [pc, #592]	; (80107fc <tcp_split_unsent_seg+0x278>)
 80105aa:	4895      	ldr	r0, [pc, #596]	; (8010800 <tcp_split_unsent_seg+0x27c>)
 80105ac:	f003 ffca 	bl	8014544 <iprintf>

  useg = pcb->unsent;
 80105b0:	687b      	ldr	r3, [r7, #4]
 80105b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80105b4:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 80105b6:	697b      	ldr	r3, [r7, #20]
 80105b8:	2b00      	cmp	r3, #0
 80105ba:	d102      	bne.n	80105c2 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 80105bc:	f04f 33ff 	mov.w	r3, #4294967295
 80105c0:	e116      	b.n	80107f0 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 80105c2:	887b      	ldrh	r3, [r7, #2]
 80105c4:	2b00      	cmp	r3, #0
 80105c6:	d109      	bne.n	80105dc <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 80105c8:	4b8b      	ldr	r3, [pc, #556]	; (80107f8 <tcp_split_unsent_seg+0x274>)
 80105ca:	f240 3253 	movw	r2, #851	; 0x353
 80105ce:	498d      	ldr	r1, [pc, #564]	; (8010804 <tcp_split_unsent_seg+0x280>)
 80105d0:	488b      	ldr	r0, [pc, #556]	; (8010800 <tcp_split_unsent_seg+0x27c>)
 80105d2:	f003 ffb7 	bl	8014544 <iprintf>
    return ERR_VAL;
 80105d6:	f06f 0305 	mvn.w	r3, #5
 80105da:	e109      	b.n	80107f0 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 80105dc:	697b      	ldr	r3, [r7, #20]
 80105de:	891b      	ldrh	r3, [r3, #8]
 80105e0:	887a      	ldrh	r2, [r7, #2]
 80105e2:	429a      	cmp	r2, r3
 80105e4:	d301      	bcc.n	80105ea <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 80105e6:	2300      	movs	r3, #0
 80105e8:	e102      	b.n	80107f0 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 80105ea:	687b      	ldr	r3, [r7, #4]
 80105ec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80105ee:	887a      	ldrh	r2, [r7, #2]
 80105f0:	429a      	cmp	r2, r3
 80105f2:	d906      	bls.n	8010602 <tcp_split_unsent_seg+0x7e>
 80105f4:	4b80      	ldr	r3, [pc, #512]	; (80107f8 <tcp_split_unsent_seg+0x274>)
 80105f6:	f240 325b 	movw	r2, #859	; 0x35b
 80105fa:	4983      	ldr	r1, [pc, #524]	; (8010808 <tcp_split_unsent_seg+0x284>)
 80105fc:	4880      	ldr	r0, [pc, #512]	; (8010800 <tcp_split_unsent_seg+0x27c>)
 80105fe:	f003 ffa1 	bl	8014544 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8010602:	697b      	ldr	r3, [r7, #20]
 8010604:	891b      	ldrh	r3, [r3, #8]
 8010606:	2b00      	cmp	r3, #0
 8010608:	d106      	bne.n	8010618 <tcp_split_unsent_seg+0x94>
 801060a:	4b7b      	ldr	r3, [pc, #492]	; (80107f8 <tcp_split_unsent_seg+0x274>)
 801060c:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8010610:	497e      	ldr	r1, [pc, #504]	; (801080c <tcp_split_unsent_seg+0x288>)
 8010612:	487b      	ldr	r0, [pc, #492]	; (8010800 <tcp_split_unsent_seg+0x27c>)
 8010614:	f003 ff96 	bl	8014544 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8010618:	697b      	ldr	r3, [r7, #20]
 801061a:	7a9b      	ldrb	r3, [r3, #10]
 801061c:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801061e:	7bfb      	ldrb	r3, [r7, #15]
 8010620:	009b      	lsls	r3, r3, #2
 8010622:	b2db      	uxtb	r3, r3
 8010624:	f003 0304 	and.w	r3, r3, #4
 8010628:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 801062a:	697b      	ldr	r3, [r7, #20]
 801062c:	891a      	ldrh	r2, [r3, #8]
 801062e:	887b      	ldrh	r3, [r7, #2]
 8010630:	1ad3      	subs	r3, r2, r3
 8010632:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8010634:	7bbb      	ldrb	r3, [r7, #14]
 8010636:	b29a      	uxth	r2, r3
 8010638:	89bb      	ldrh	r3, [r7, #12]
 801063a:	4413      	add	r3, r2
 801063c:	b29b      	uxth	r3, r3
 801063e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010642:	4619      	mov	r1, r3
 8010644:	2036      	movs	r0, #54	; 0x36
 8010646:	f7fb facf 	bl	800bbe8 <pbuf_alloc>
 801064a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801064c:	693b      	ldr	r3, [r7, #16]
 801064e:	2b00      	cmp	r3, #0
 8010650:	f000 80b7 	beq.w	80107c2 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8010654:	697b      	ldr	r3, [r7, #20]
 8010656:	685b      	ldr	r3, [r3, #4]
 8010658:	891a      	ldrh	r2, [r3, #8]
 801065a:	697b      	ldr	r3, [r7, #20]
 801065c:	891b      	ldrh	r3, [r3, #8]
 801065e:	1ad3      	subs	r3, r2, r3
 8010660:	b29a      	uxth	r2, r3
 8010662:	887b      	ldrh	r3, [r7, #2]
 8010664:	4413      	add	r3, r2
 8010666:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8010668:	697b      	ldr	r3, [r7, #20]
 801066a:	6858      	ldr	r0, [r3, #4]
 801066c:	693b      	ldr	r3, [r7, #16]
 801066e:	685a      	ldr	r2, [r3, #4]
 8010670:	7bbb      	ldrb	r3, [r7, #14]
 8010672:	18d1      	adds	r1, r2, r3
 8010674:	897b      	ldrh	r3, [r7, #10]
 8010676:	89ba      	ldrh	r2, [r7, #12]
 8010678:	f7fb ff84 	bl	800c584 <pbuf_copy_partial>
 801067c:	4603      	mov	r3, r0
 801067e:	461a      	mov	r2, r3
 8010680:	89bb      	ldrh	r3, [r7, #12]
 8010682:	4293      	cmp	r3, r2
 8010684:	f040 809f 	bne.w	80107c6 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8010688:	697b      	ldr	r3, [r7, #20]
 801068a:	68db      	ldr	r3, [r3, #12]
 801068c:	899b      	ldrh	r3, [r3, #12]
 801068e:	b29b      	uxth	r3, r3
 8010690:	4618      	mov	r0, r3
 8010692:	f7fa fafa 	bl	800ac8a <lwip_htons>
 8010696:	4603      	mov	r3, r0
 8010698:	b2db      	uxtb	r3, r3
 801069a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801069e:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 80106a0:	2300      	movs	r3, #0
 80106a2:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 80106a4:	7efb      	ldrb	r3, [r7, #27]
 80106a6:	f003 0308 	and.w	r3, r3, #8
 80106aa:	2b00      	cmp	r3, #0
 80106ac:	d007      	beq.n	80106be <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 80106ae:	7efb      	ldrb	r3, [r7, #27]
 80106b0:	f023 0308 	bic.w	r3, r3, #8
 80106b4:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 80106b6:	7ebb      	ldrb	r3, [r7, #26]
 80106b8:	f043 0308 	orr.w	r3, r3, #8
 80106bc:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 80106be:	7efb      	ldrb	r3, [r7, #27]
 80106c0:	f003 0301 	and.w	r3, r3, #1
 80106c4:	2b00      	cmp	r3, #0
 80106c6:	d007      	beq.n	80106d8 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 80106c8:	7efb      	ldrb	r3, [r7, #27]
 80106ca:	f023 0301 	bic.w	r3, r3, #1
 80106ce:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 80106d0:	7ebb      	ldrb	r3, [r7, #26]
 80106d2:	f043 0301 	orr.w	r3, r3, #1
 80106d6:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 80106d8:	697b      	ldr	r3, [r7, #20]
 80106da:	68db      	ldr	r3, [r3, #12]
 80106dc:	685b      	ldr	r3, [r3, #4]
 80106de:	4618      	mov	r0, r3
 80106e0:	f7fa fae8 	bl	800acb4 <lwip_htonl>
 80106e4:	4602      	mov	r2, r0
 80106e6:	887b      	ldrh	r3, [r7, #2]
 80106e8:	18d1      	adds	r1, r2, r3
 80106ea:	7eba      	ldrb	r2, [r7, #26]
 80106ec:	7bfb      	ldrb	r3, [r7, #15]
 80106ee:	9300      	str	r3, [sp, #0]
 80106f0:	460b      	mov	r3, r1
 80106f2:	6939      	ldr	r1, [r7, #16]
 80106f4:	6878      	ldr	r0, [r7, #4]
 80106f6:	f7ff fea7 	bl	8010448 <tcp_create_segment>
 80106fa:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 80106fc:	69fb      	ldr	r3, [r7, #28]
 80106fe:	2b00      	cmp	r3, #0
 8010700:	d063      	beq.n	80107ca <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8010702:	697b      	ldr	r3, [r7, #20]
 8010704:	685b      	ldr	r3, [r3, #4]
 8010706:	4618      	mov	r0, r3
 8010708:	f7fb fdda 	bl	800c2c0 <pbuf_clen>
 801070c:	4603      	mov	r3, r0
 801070e:	461a      	mov	r2, r3
 8010710:	687b      	ldr	r3, [r7, #4]
 8010712:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010716:	1a9b      	subs	r3, r3, r2
 8010718:	b29a      	uxth	r2, r3
 801071a:	687b      	ldr	r3, [r7, #4]
 801071c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8010720:	697b      	ldr	r3, [r7, #20]
 8010722:	6858      	ldr	r0, [r3, #4]
 8010724:	697b      	ldr	r3, [r7, #20]
 8010726:	685b      	ldr	r3, [r3, #4]
 8010728:	891a      	ldrh	r2, [r3, #8]
 801072a:	89bb      	ldrh	r3, [r7, #12]
 801072c:	1ad3      	subs	r3, r2, r3
 801072e:	b29b      	uxth	r3, r3
 8010730:	4619      	mov	r1, r3
 8010732:	f7fb fbb7 	bl	800bea4 <pbuf_realloc>
  useg->len -= remainder;
 8010736:	697b      	ldr	r3, [r7, #20]
 8010738:	891a      	ldrh	r2, [r3, #8]
 801073a:	89bb      	ldrh	r3, [r7, #12]
 801073c:	1ad3      	subs	r3, r2, r3
 801073e:	b29a      	uxth	r2, r3
 8010740:	697b      	ldr	r3, [r7, #20]
 8010742:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8010744:	697b      	ldr	r3, [r7, #20]
 8010746:	68db      	ldr	r3, [r3, #12]
 8010748:	899b      	ldrh	r3, [r3, #12]
 801074a:	b29c      	uxth	r4, r3
 801074c:	7efb      	ldrb	r3, [r7, #27]
 801074e:	b29b      	uxth	r3, r3
 8010750:	4618      	mov	r0, r3
 8010752:	f7fa fa9a 	bl	800ac8a <lwip_htons>
 8010756:	4603      	mov	r3, r0
 8010758:	461a      	mov	r2, r3
 801075a:	697b      	ldr	r3, [r7, #20]
 801075c:	68db      	ldr	r3, [r3, #12]
 801075e:	4322      	orrs	r2, r4
 8010760:	b292      	uxth	r2, r2
 8010762:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8010764:	697b      	ldr	r3, [r7, #20]
 8010766:	685b      	ldr	r3, [r3, #4]
 8010768:	4618      	mov	r0, r3
 801076a:	f7fb fda9 	bl	800c2c0 <pbuf_clen>
 801076e:	4603      	mov	r3, r0
 8010770:	461a      	mov	r2, r3
 8010772:	687b      	ldr	r3, [r7, #4]
 8010774:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010778:	4413      	add	r3, r2
 801077a:	b29a      	uxth	r2, r3
 801077c:	687b      	ldr	r3, [r7, #4]
 801077e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8010782:	69fb      	ldr	r3, [r7, #28]
 8010784:	685b      	ldr	r3, [r3, #4]
 8010786:	4618      	mov	r0, r3
 8010788:	f7fb fd9a 	bl	800c2c0 <pbuf_clen>
 801078c:	4603      	mov	r3, r0
 801078e:	461a      	mov	r2, r3
 8010790:	687b      	ldr	r3, [r7, #4]
 8010792:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010796:	4413      	add	r3, r2
 8010798:	b29a      	uxth	r2, r3
 801079a:	687b      	ldr	r3, [r7, #4]
 801079c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 80107a0:	697b      	ldr	r3, [r7, #20]
 80107a2:	681a      	ldr	r2, [r3, #0]
 80107a4:	69fb      	ldr	r3, [r7, #28]
 80107a6:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 80107a8:	697b      	ldr	r3, [r7, #20]
 80107aa:	69fa      	ldr	r2, [r7, #28]
 80107ac:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 80107ae:	69fb      	ldr	r3, [r7, #28]
 80107b0:	681b      	ldr	r3, [r3, #0]
 80107b2:	2b00      	cmp	r3, #0
 80107b4:	d103      	bne.n	80107be <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 80107b6:	687b      	ldr	r3, [r7, #4]
 80107b8:	2200      	movs	r2, #0
 80107ba:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 80107be:	2300      	movs	r3, #0
 80107c0:	e016      	b.n	80107f0 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 80107c2:	bf00      	nop
 80107c4:	e002      	b.n	80107cc <tcp_split_unsent_seg+0x248>
    goto memerr;
 80107c6:	bf00      	nop
 80107c8:	e000      	b.n	80107cc <tcp_split_unsent_seg+0x248>
    goto memerr;
 80107ca:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 80107cc:	69fb      	ldr	r3, [r7, #28]
 80107ce:	2b00      	cmp	r3, #0
 80107d0:	d006      	beq.n	80107e0 <tcp_split_unsent_seg+0x25c>
 80107d2:	4b09      	ldr	r3, [pc, #36]	; (80107f8 <tcp_split_unsent_seg+0x274>)
 80107d4:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 80107d8:	490d      	ldr	r1, [pc, #52]	; (8010810 <tcp_split_unsent_seg+0x28c>)
 80107da:	4809      	ldr	r0, [pc, #36]	; (8010800 <tcp_split_unsent_seg+0x27c>)
 80107dc:	f003 feb2 	bl	8014544 <iprintf>
  if (p != NULL) {
 80107e0:	693b      	ldr	r3, [r7, #16]
 80107e2:	2b00      	cmp	r3, #0
 80107e4:	d002      	beq.n	80107ec <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 80107e6:	6938      	ldr	r0, [r7, #16]
 80107e8:	f7fb fce2 	bl	800c1b0 <pbuf_free>
  }

  return ERR_MEM;
 80107ec:	f04f 33ff 	mov.w	r3, #4294967295
}
 80107f0:	4618      	mov	r0, r3
 80107f2:	3724      	adds	r7, #36	; 0x24
 80107f4:	46bd      	mov	sp, r7
 80107f6:	bd90      	pop	{r4, r7, pc}
 80107f8:	08016fd0 	.word	0x08016fd0
 80107fc:	08017364 	.word	0x08017364
 8010800:	08017024 	.word	0x08017024
 8010804:	08017388 	.word	0x08017388
 8010808:	080173ac 	.word	0x080173ac
 801080c:	080173bc 	.word	0x080173bc
 8010810:	080173cc 	.word	0x080173cc

08010814 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8010814:	b590      	push	{r4, r7, lr}
 8010816:	b085      	sub	sp, #20
 8010818:	af00      	add	r7, sp, #0
 801081a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 801081c:	687b      	ldr	r3, [r7, #4]
 801081e:	2b00      	cmp	r3, #0
 8010820:	d106      	bne.n	8010830 <tcp_send_fin+0x1c>
 8010822:	4b21      	ldr	r3, [pc, #132]	; (80108a8 <tcp_send_fin+0x94>)
 8010824:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8010828:	4920      	ldr	r1, [pc, #128]	; (80108ac <tcp_send_fin+0x98>)
 801082a:	4821      	ldr	r0, [pc, #132]	; (80108b0 <tcp_send_fin+0x9c>)
 801082c:	f003 fe8a 	bl	8014544 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8010830:	687b      	ldr	r3, [r7, #4]
 8010832:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010834:	2b00      	cmp	r3, #0
 8010836:	d02e      	beq.n	8010896 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010838:	687b      	ldr	r3, [r7, #4]
 801083a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801083c:	60fb      	str	r3, [r7, #12]
 801083e:	e002      	b.n	8010846 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8010840:	68fb      	ldr	r3, [r7, #12]
 8010842:	681b      	ldr	r3, [r3, #0]
 8010844:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010846:	68fb      	ldr	r3, [r7, #12]
 8010848:	681b      	ldr	r3, [r3, #0]
 801084a:	2b00      	cmp	r3, #0
 801084c:	d1f8      	bne.n	8010840 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801084e:	68fb      	ldr	r3, [r7, #12]
 8010850:	68db      	ldr	r3, [r3, #12]
 8010852:	899b      	ldrh	r3, [r3, #12]
 8010854:	b29b      	uxth	r3, r3
 8010856:	4618      	mov	r0, r3
 8010858:	f7fa fa17 	bl	800ac8a <lwip_htons>
 801085c:	4603      	mov	r3, r0
 801085e:	b2db      	uxtb	r3, r3
 8010860:	f003 0307 	and.w	r3, r3, #7
 8010864:	2b00      	cmp	r3, #0
 8010866:	d116      	bne.n	8010896 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8010868:	68fb      	ldr	r3, [r7, #12]
 801086a:	68db      	ldr	r3, [r3, #12]
 801086c:	899b      	ldrh	r3, [r3, #12]
 801086e:	b29c      	uxth	r4, r3
 8010870:	2001      	movs	r0, #1
 8010872:	f7fa fa0a 	bl	800ac8a <lwip_htons>
 8010876:	4603      	mov	r3, r0
 8010878:	461a      	mov	r2, r3
 801087a:	68fb      	ldr	r3, [r7, #12]
 801087c:	68db      	ldr	r3, [r3, #12]
 801087e:	4322      	orrs	r2, r4
 8010880:	b292      	uxth	r2, r2
 8010882:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8010884:	687b      	ldr	r3, [r7, #4]
 8010886:	8b5b      	ldrh	r3, [r3, #26]
 8010888:	f043 0320 	orr.w	r3, r3, #32
 801088c:	b29a      	uxth	r2, r3
 801088e:	687b      	ldr	r3, [r7, #4]
 8010890:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8010892:	2300      	movs	r3, #0
 8010894:	e004      	b.n	80108a0 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8010896:	2101      	movs	r1, #1
 8010898:	6878      	ldr	r0, [r7, #4]
 801089a:	f000 f80b 	bl	80108b4 <tcp_enqueue_flags>
 801089e:	4603      	mov	r3, r0
}
 80108a0:	4618      	mov	r0, r3
 80108a2:	3714      	adds	r7, #20
 80108a4:	46bd      	mov	sp, r7
 80108a6:	bd90      	pop	{r4, r7, pc}
 80108a8:	08016fd0 	.word	0x08016fd0
 80108ac:	080173d8 	.word	0x080173d8
 80108b0:	08017024 	.word	0x08017024

080108b4 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 80108b4:	b580      	push	{r7, lr}
 80108b6:	b08a      	sub	sp, #40	; 0x28
 80108b8:	af02      	add	r7, sp, #8
 80108ba:	6078      	str	r0, [r7, #4]
 80108bc:	460b      	mov	r3, r1
 80108be:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 80108c0:	2300      	movs	r3, #0
 80108c2:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 80108c4:	2300      	movs	r3, #0
 80108c6:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 80108c8:	78fb      	ldrb	r3, [r7, #3]
 80108ca:	f003 0303 	and.w	r3, r3, #3
 80108ce:	2b00      	cmp	r3, #0
 80108d0:	d106      	bne.n	80108e0 <tcp_enqueue_flags+0x2c>
 80108d2:	4b67      	ldr	r3, [pc, #412]	; (8010a70 <tcp_enqueue_flags+0x1bc>)
 80108d4:	f240 4211 	movw	r2, #1041	; 0x411
 80108d8:	4966      	ldr	r1, [pc, #408]	; (8010a74 <tcp_enqueue_flags+0x1c0>)
 80108da:	4867      	ldr	r0, [pc, #412]	; (8010a78 <tcp_enqueue_flags+0x1c4>)
 80108dc:	f003 fe32 	bl	8014544 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 80108e0:	687b      	ldr	r3, [r7, #4]
 80108e2:	2b00      	cmp	r3, #0
 80108e4:	d106      	bne.n	80108f4 <tcp_enqueue_flags+0x40>
 80108e6:	4b62      	ldr	r3, [pc, #392]	; (8010a70 <tcp_enqueue_flags+0x1bc>)
 80108e8:	f240 4213 	movw	r2, #1043	; 0x413
 80108ec:	4963      	ldr	r1, [pc, #396]	; (8010a7c <tcp_enqueue_flags+0x1c8>)
 80108ee:	4862      	ldr	r0, [pc, #392]	; (8010a78 <tcp_enqueue_flags+0x1c4>)
 80108f0:	f003 fe28 	bl	8014544 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 80108f4:	78fb      	ldrb	r3, [r7, #3]
 80108f6:	f003 0302 	and.w	r3, r3, #2
 80108fa:	2b00      	cmp	r3, #0
 80108fc:	d001      	beq.n	8010902 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 80108fe:	2301      	movs	r3, #1
 8010900:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8010902:	7ffb      	ldrb	r3, [r7, #31]
 8010904:	009b      	lsls	r3, r3, #2
 8010906:	b2db      	uxtb	r3, r3
 8010908:	f003 0304 	and.w	r3, r3, #4
 801090c:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801090e:	7dfb      	ldrb	r3, [r7, #23]
 8010910:	b29b      	uxth	r3, r3
 8010912:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010916:	4619      	mov	r1, r3
 8010918:	2036      	movs	r0, #54	; 0x36
 801091a:	f7fb f965 	bl	800bbe8 <pbuf_alloc>
 801091e:	6138      	str	r0, [r7, #16]
 8010920:	693b      	ldr	r3, [r7, #16]
 8010922:	2b00      	cmp	r3, #0
 8010924:	d109      	bne.n	801093a <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010926:	687b      	ldr	r3, [r7, #4]
 8010928:	8b5b      	ldrh	r3, [r3, #26]
 801092a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801092e:	b29a      	uxth	r2, r3
 8010930:	687b      	ldr	r3, [r7, #4]
 8010932:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8010934:	f04f 33ff 	mov.w	r3, #4294967295
 8010938:	e095      	b.n	8010a66 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801093a:	693b      	ldr	r3, [r7, #16]
 801093c:	895a      	ldrh	r2, [r3, #10]
 801093e:	7dfb      	ldrb	r3, [r7, #23]
 8010940:	b29b      	uxth	r3, r3
 8010942:	429a      	cmp	r2, r3
 8010944:	d206      	bcs.n	8010954 <tcp_enqueue_flags+0xa0>
 8010946:	4b4a      	ldr	r3, [pc, #296]	; (8010a70 <tcp_enqueue_flags+0x1bc>)
 8010948:	f240 4239 	movw	r2, #1081	; 0x439
 801094c:	494c      	ldr	r1, [pc, #304]	; (8010a80 <tcp_enqueue_flags+0x1cc>)
 801094e:	484a      	ldr	r0, [pc, #296]	; (8010a78 <tcp_enqueue_flags+0x1c4>)
 8010950:	f003 fdf8 	bl	8014544 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8010954:	687b      	ldr	r3, [r7, #4]
 8010956:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8010958:	78fa      	ldrb	r2, [r7, #3]
 801095a:	7ffb      	ldrb	r3, [r7, #31]
 801095c:	9300      	str	r3, [sp, #0]
 801095e:	460b      	mov	r3, r1
 8010960:	6939      	ldr	r1, [r7, #16]
 8010962:	6878      	ldr	r0, [r7, #4]
 8010964:	f7ff fd70 	bl	8010448 <tcp_create_segment>
 8010968:	60f8      	str	r0, [r7, #12]
 801096a:	68fb      	ldr	r3, [r7, #12]
 801096c:	2b00      	cmp	r3, #0
 801096e:	d109      	bne.n	8010984 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010970:	687b      	ldr	r3, [r7, #4]
 8010972:	8b5b      	ldrh	r3, [r3, #26]
 8010974:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010978:	b29a      	uxth	r2, r3
 801097a:	687b      	ldr	r3, [r7, #4]
 801097c:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801097e:	f04f 33ff 	mov.w	r3, #4294967295
 8010982:	e070      	b.n	8010a66 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8010984:	68fb      	ldr	r3, [r7, #12]
 8010986:	68db      	ldr	r3, [r3, #12]
 8010988:	f003 0303 	and.w	r3, r3, #3
 801098c:	2b00      	cmp	r3, #0
 801098e:	d006      	beq.n	801099e <tcp_enqueue_flags+0xea>
 8010990:	4b37      	ldr	r3, [pc, #220]	; (8010a70 <tcp_enqueue_flags+0x1bc>)
 8010992:	f240 4242 	movw	r2, #1090	; 0x442
 8010996:	493b      	ldr	r1, [pc, #236]	; (8010a84 <tcp_enqueue_flags+0x1d0>)
 8010998:	4837      	ldr	r0, [pc, #220]	; (8010a78 <tcp_enqueue_flags+0x1c4>)
 801099a:	f003 fdd3 	bl	8014544 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801099e:	68fb      	ldr	r3, [r7, #12]
 80109a0:	891b      	ldrh	r3, [r3, #8]
 80109a2:	2b00      	cmp	r3, #0
 80109a4:	d006      	beq.n	80109b4 <tcp_enqueue_flags+0x100>
 80109a6:	4b32      	ldr	r3, [pc, #200]	; (8010a70 <tcp_enqueue_flags+0x1bc>)
 80109a8:	f240 4243 	movw	r2, #1091	; 0x443
 80109ac:	4936      	ldr	r1, [pc, #216]	; (8010a88 <tcp_enqueue_flags+0x1d4>)
 80109ae:	4832      	ldr	r0, [pc, #200]	; (8010a78 <tcp_enqueue_flags+0x1c4>)
 80109b0:	f003 fdc8 	bl	8014544 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 80109b4:	687b      	ldr	r3, [r7, #4]
 80109b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80109b8:	2b00      	cmp	r3, #0
 80109ba:	d103      	bne.n	80109c4 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 80109bc:	687b      	ldr	r3, [r7, #4]
 80109be:	68fa      	ldr	r2, [r7, #12]
 80109c0:	66da      	str	r2, [r3, #108]	; 0x6c
 80109c2:	e00d      	b.n	80109e0 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80109c8:	61bb      	str	r3, [r7, #24]
 80109ca:	e002      	b.n	80109d2 <tcp_enqueue_flags+0x11e>
 80109cc:	69bb      	ldr	r3, [r7, #24]
 80109ce:	681b      	ldr	r3, [r3, #0]
 80109d0:	61bb      	str	r3, [r7, #24]
 80109d2:	69bb      	ldr	r3, [r7, #24]
 80109d4:	681b      	ldr	r3, [r3, #0]
 80109d6:	2b00      	cmp	r3, #0
 80109d8:	d1f8      	bne.n	80109cc <tcp_enqueue_flags+0x118>
    useg->next = seg;
 80109da:	69bb      	ldr	r3, [r7, #24]
 80109dc:	68fa      	ldr	r2, [r7, #12]
 80109de:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 80109e0:	687b      	ldr	r3, [r7, #4]
 80109e2:	2200      	movs	r2, #0
 80109e4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 80109e8:	78fb      	ldrb	r3, [r7, #3]
 80109ea:	f003 0302 	and.w	r3, r3, #2
 80109ee:	2b00      	cmp	r3, #0
 80109f0:	d104      	bne.n	80109fc <tcp_enqueue_flags+0x148>
 80109f2:	78fb      	ldrb	r3, [r7, #3]
 80109f4:	f003 0301 	and.w	r3, r3, #1
 80109f8:	2b00      	cmp	r3, #0
 80109fa:	d004      	beq.n	8010a06 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 80109fc:	687b      	ldr	r3, [r7, #4]
 80109fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010a00:	1c5a      	adds	r2, r3, #1
 8010a02:	687b      	ldr	r3, [r7, #4]
 8010a04:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8010a06:	78fb      	ldrb	r3, [r7, #3]
 8010a08:	f003 0301 	and.w	r3, r3, #1
 8010a0c:	2b00      	cmp	r3, #0
 8010a0e:	d006      	beq.n	8010a1e <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	8b5b      	ldrh	r3, [r3, #26]
 8010a14:	f043 0320 	orr.w	r3, r3, #32
 8010a18:	b29a      	uxth	r2, r3
 8010a1a:	687b      	ldr	r3, [r7, #4]
 8010a1c:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8010a1e:	68fb      	ldr	r3, [r7, #12]
 8010a20:	685b      	ldr	r3, [r3, #4]
 8010a22:	4618      	mov	r0, r3
 8010a24:	f7fb fc4c 	bl	800c2c0 <pbuf_clen>
 8010a28:	4603      	mov	r3, r0
 8010a2a:	461a      	mov	r2, r3
 8010a2c:	687b      	ldr	r3, [r7, #4]
 8010a2e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010a32:	4413      	add	r3, r2
 8010a34:	b29a      	uxth	r2, r3
 8010a36:	687b      	ldr	r3, [r7, #4]
 8010a38:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010a42:	2b00      	cmp	r3, #0
 8010a44:	d00e      	beq.n	8010a64 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8010a46:	687b      	ldr	r3, [r7, #4]
 8010a48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010a4a:	2b00      	cmp	r3, #0
 8010a4c:	d10a      	bne.n	8010a64 <tcp_enqueue_flags+0x1b0>
 8010a4e:	687b      	ldr	r3, [r7, #4]
 8010a50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010a52:	2b00      	cmp	r3, #0
 8010a54:	d106      	bne.n	8010a64 <tcp_enqueue_flags+0x1b0>
 8010a56:	4b06      	ldr	r3, [pc, #24]	; (8010a70 <tcp_enqueue_flags+0x1bc>)
 8010a58:	f240 4265 	movw	r2, #1125	; 0x465
 8010a5c:	490b      	ldr	r1, [pc, #44]	; (8010a8c <tcp_enqueue_flags+0x1d8>)
 8010a5e:	4806      	ldr	r0, [pc, #24]	; (8010a78 <tcp_enqueue_flags+0x1c4>)
 8010a60:	f003 fd70 	bl	8014544 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8010a64:	2300      	movs	r3, #0
}
 8010a66:	4618      	mov	r0, r3
 8010a68:	3720      	adds	r7, #32
 8010a6a:	46bd      	mov	sp, r7
 8010a6c:	bd80      	pop	{r7, pc}
 8010a6e:	bf00      	nop
 8010a70:	08016fd0 	.word	0x08016fd0
 8010a74:	080173f4 	.word	0x080173f4
 8010a78:	08017024 	.word	0x08017024
 8010a7c:	0801744c 	.word	0x0801744c
 8010a80:	0801746c 	.word	0x0801746c
 8010a84:	080174a8 	.word	0x080174a8
 8010a88:	080174c0 	.word	0x080174c0
 8010a8c:	080174ec 	.word	0x080174ec

08010a90 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8010a90:	b5b0      	push	{r4, r5, r7, lr}
 8010a92:	b08a      	sub	sp, #40	; 0x28
 8010a94:	af00      	add	r7, sp, #0
 8010a96:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8010a98:	687b      	ldr	r3, [r7, #4]
 8010a9a:	2b00      	cmp	r3, #0
 8010a9c:	d106      	bne.n	8010aac <tcp_output+0x1c>
 8010a9e:	4b9e      	ldr	r3, [pc, #632]	; (8010d18 <tcp_output+0x288>)
 8010aa0:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8010aa4:	499d      	ldr	r1, [pc, #628]	; (8010d1c <tcp_output+0x28c>)
 8010aa6:	489e      	ldr	r0, [pc, #632]	; (8010d20 <tcp_output+0x290>)
 8010aa8:	f003 fd4c 	bl	8014544 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	7d1b      	ldrb	r3, [r3, #20]
 8010ab0:	2b01      	cmp	r3, #1
 8010ab2:	d106      	bne.n	8010ac2 <tcp_output+0x32>
 8010ab4:	4b98      	ldr	r3, [pc, #608]	; (8010d18 <tcp_output+0x288>)
 8010ab6:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8010aba:	499a      	ldr	r1, [pc, #616]	; (8010d24 <tcp_output+0x294>)
 8010abc:	4898      	ldr	r0, [pc, #608]	; (8010d20 <tcp_output+0x290>)
 8010abe:	f003 fd41 	bl	8014544 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8010ac2:	4b99      	ldr	r3, [pc, #612]	; (8010d28 <tcp_output+0x298>)
 8010ac4:	681b      	ldr	r3, [r3, #0]
 8010ac6:	687a      	ldr	r2, [r7, #4]
 8010ac8:	429a      	cmp	r2, r3
 8010aca:	d101      	bne.n	8010ad0 <tcp_output+0x40>
    return ERR_OK;
 8010acc:	2300      	movs	r3, #0
 8010ace:	e1ce      	b.n	8010e6e <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8010ad0:	687b      	ldr	r3, [r7, #4]
 8010ad2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010ad6:	687b      	ldr	r3, [r7, #4]
 8010ad8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010adc:	4293      	cmp	r3, r2
 8010ade:	bf28      	it	cs
 8010ae0:	4613      	movcs	r3, r2
 8010ae2:	b29b      	uxth	r3, r3
 8010ae4:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8010ae6:	687b      	ldr	r3, [r7, #4]
 8010ae8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010aea:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8010aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010aee:	2b00      	cmp	r3, #0
 8010af0:	d10b      	bne.n	8010b0a <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8010af2:	687b      	ldr	r3, [r7, #4]
 8010af4:	8b5b      	ldrh	r3, [r3, #26]
 8010af6:	f003 0302 	and.w	r3, r3, #2
 8010afa:	2b00      	cmp	r3, #0
 8010afc:	f000 81aa 	beq.w	8010e54 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8010b00:	6878      	ldr	r0, [r7, #4]
 8010b02:	f000 fdcb 	bl	801169c <tcp_send_empty_ack>
 8010b06:	4603      	mov	r3, r0
 8010b08:	e1b1      	b.n	8010e6e <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8010b0a:	6879      	ldr	r1, [r7, #4]
 8010b0c:	687b      	ldr	r3, [r7, #4]
 8010b0e:	3304      	adds	r3, #4
 8010b10:	461a      	mov	r2, r3
 8010b12:	6878      	ldr	r0, [r7, #4]
 8010b14:	f7ff fc7c 	bl	8010410 <tcp_route>
 8010b18:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8010b1a:	697b      	ldr	r3, [r7, #20]
 8010b1c:	2b00      	cmp	r3, #0
 8010b1e:	d102      	bne.n	8010b26 <tcp_output+0x96>
    return ERR_RTE;
 8010b20:	f06f 0303 	mvn.w	r3, #3
 8010b24:	e1a3      	b.n	8010e6e <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8010b26:	687b      	ldr	r3, [r7, #4]
 8010b28:	2b00      	cmp	r3, #0
 8010b2a:	d003      	beq.n	8010b34 <tcp_output+0xa4>
 8010b2c:	687b      	ldr	r3, [r7, #4]
 8010b2e:	681b      	ldr	r3, [r3, #0]
 8010b30:	2b00      	cmp	r3, #0
 8010b32:	d111      	bne.n	8010b58 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8010b34:	697b      	ldr	r3, [r7, #20]
 8010b36:	2b00      	cmp	r3, #0
 8010b38:	d002      	beq.n	8010b40 <tcp_output+0xb0>
 8010b3a:	697b      	ldr	r3, [r7, #20]
 8010b3c:	3304      	adds	r3, #4
 8010b3e:	e000      	b.n	8010b42 <tcp_output+0xb2>
 8010b40:	2300      	movs	r3, #0
 8010b42:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8010b44:	693b      	ldr	r3, [r7, #16]
 8010b46:	2b00      	cmp	r3, #0
 8010b48:	d102      	bne.n	8010b50 <tcp_output+0xc0>
      return ERR_RTE;
 8010b4a:	f06f 0303 	mvn.w	r3, #3
 8010b4e:	e18e      	b.n	8010e6e <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8010b50:	693b      	ldr	r3, [r7, #16]
 8010b52:	681a      	ldr	r2, [r3, #0]
 8010b54:	687b      	ldr	r3, [r7, #4]
 8010b56:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8010b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b5a:	68db      	ldr	r3, [r3, #12]
 8010b5c:	685b      	ldr	r3, [r3, #4]
 8010b5e:	4618      	mov	r0, r3
 8010b60:	f7fa f8a8 	bl	800acb4 <lwip_htonl>
 8010b64:	4602      	mov	r2, r0
 8010b66:	687b      	ldr	r3, [r7, #4]
 8010b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010b6a:	1ad3      	subs	r3, r2, r3
 8010b6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010b6e:	8912      	ldrh	r2, [r2, #8]
 8010b70:	4413      	add	r3, r2
 8010b72:	69ba      	ldr	r2, [r7, #24]
 8010b74:	429a      	cmp	r2, r3
 8010b76:	d227      	bcs.n	8010bc8 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8010b78:	687b      	ldr	r3, [r7, #4]
 8010b7a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010b7e:	461a      	mov	r2, r3
 8010b80:	69bb      	ldr	r3, [r7, #24]
 8010b82:	4293      	cmp	r3, r2
 8010b84:	d114      	bne.n	8010bb0 <tcp_output+0x120>
 8010b86:	687b      	ldr	r3, [r7, #4]
 8010b88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010b8a:	2b00      	cmp	r3, #0
 8010b8c:	d110      	bne.n	8010bb0 <tcp_output+0x120>
 8010b8e:	687b      	ldr	r3, [r7, #4]
 8010b90:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8010b94:	2b00      	cmp	r3, #0
 8010b96:	d10b      	bne.n	8010bb0 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8010b98:	687b      	ldr	r3, [r7, #4]
 8010b9a:	2200      	movs	r2, #0
 8010b9c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8010ba0:	687b      	ldr	r3, [r7, #4]
 8010ba2:	2201      	movs	r2, #1
 8010ba4:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	2200      	movs	r2, #0
 8010bac:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	8b5b      	ldrh	r3, [r3, #26]
 8010bb4:	f003 0302 	and.w	r3, r3, #2
 8010bb8:	2b00      	cmp	r3, #0
 8010bba:	f000 814d 	beq.w	8010e58 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8010bbe:	6878      	ldr	r0, [r7, #4]
 8010bc0:	f000 fd6c 	bl	801169c <tcp_send_empty_ack>
 8010bc4:	4603      	mov	r3, r0
 8010bc6:	e152      	b.n	8010e6e <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8010bc8:	687b      	ldr	r3, [r7, #4]
 8010bca:	2200      	movs	r2, #0
 8010bcc:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8010bd0:	687b      	ldr	r3, [r7, #4]
 8010bd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010bd4:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8010bd6:	6a3b      	ldr	r3, [r7, #32]
 8010bd8:	2b00      	cmp	r3, #0
 8010bda:	f000 811c 	beq.w	8010e16 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8010bde:	e002      	b.n	8010be6 <tcp_output+0x156>
 8010be0:	6a3b      	ldr	r3, [r7, #32]
 8010be2:	681b      	ldr	r3, [r3, #0]
 8010be4:	623b      	str	r3, [r7, #32]
 8010be6:	6a3b      	ldr	r3, [r7, #32]
 8010be8:	681b      	ldr	r3, [r3, #0]
 8010bea:	2b00      	cmp	r3, #0
 8010bec:	d1f8      	bne.n	8010be0 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8010bee:	e112      	b.n	8010e16 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8010bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bf2:	68db      	ldr	r3, [r3, #12]
 8010bf4:	899b      	ldrh	r3, [r3, #12]
 8010bf6:	b29b      	uxth	r3, r3
 8010bf8:	4618      	mov	r0, r3
 8010bfa:	f7fa f846 	bl	800ac8a <lwip_htons>
 8010bfe:	4603      	mov	r3, r0
 8010c00:	b2db      	uxtb	r3, r3
 8010c02:	f003 0304 	and.w	r3, r3, #4
 8010c06:	2b00      	cmp	r3, #0
 8010c08:	d006      	beq.n	8010c18 <tcp_output+0x188>
 8010c0a:	4b43      	ldr	r3, [pc, #268]	; (8010d18 <tcp_output+0x288>)
 8010c0c:	f240 5236 	movw	r2, #1334	; 0x536
 8010c10:	4946      	ldr	r1, [pc, #280]	; (8010d2c <tcp_output+0x29c>)
 8010c12:	4843      	ldr	r0, [pc, #268]	; (8010d20 <tcp_output+0x290>)
 8010c14:	f003 fc96 	bl	8014544 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8010c18:	687b      	ldr	r3, [r7, #4]
 8010c1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010c1c:	2b00      	cmp	r3, #0
 8010c1e:	d01f      	beq.n	8010c60 <tcp_output+0x1d0>
 8010c20:	687b      	ldr	r3, [r7, #4]
 8010c22:	8b5b      	ldrh	r3, [r3, #26]
 8010c24:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8010c28:	2b00      	cmp	r3, #0
 8010c2a:	d119      	bne.n	8010c60 <tcp_output+0x1d0>
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010c30:	2b00      	cmp	r3, #0
 8010c32:	d00b      	beq.n	8010c4c <tcp_output+0x1bc>
 8010c34:	687b      	ldr	r3, [r7, #4]
 8010c36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010c38:	681b      	ldr	r3, [r3, #0]
 8010c3a:	2b00      	cmp	r3, #0
 8010c3c:	d110      	bne.n	8010c60 <tcp_output+0x1d0>
 8010c3e:	687b      	ldr	r3, [r7, #4]
 8010c40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010c42:	891a      	ldrh	r2, [r3, #8]
 8010c44:	687b      	ldr	r3, [r7, #4]
 8010c46:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010c48:	429a      	cmp	r2, r3
 8010c4a:	d209      	bcs.n	8010c60 <tcp_output+0x1d0>
 8010c4c:	687b      	ldr	r3, [r7, #4]
 8010c4e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8010c52:	2b00      	cmp	r3, #0
 8010c54:	d004      	beq.n	8010c60 <tcp_output+0x1d0>
 8010c56:	687b      	ldr	r3, [r7, #4]
 8010c58:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010c5c:	2b08      	cmp	r3, #8
 8010c5e:	d901      	bls.n	8010c64 <tcp_output+0x1d4>
 8010c60:	2301      	movs	r3, #1
 8010c62:	e000      	b.n	8010c66 <tcp_output+0x1d6>
 8010c64:	2300      	movs	r3, #0
 8010c66:	2b00      	cmp	r3, #0
 8010c68:	d106      	bne.n	8010c78 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8010c6a:	687b      	ldr	r3, [r7, #4]
 8010c6c:	8b5b      	ldrh	r3, [r3, #26]
 8010c6e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8010c72:	2b00      	cmp	r3, #0
 8010c74:	f000 80e4 	beq.w	8010e40 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8010c78:	687b      	ldr	r3, [r7, #4]
 8010c7a:	7d1b      	ldrb	r3, [r3, #20]
 8010c7c:	2b02      	cmp	r3, #2
 8010c7e:	d00d      	beq.n	8010c9c <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8010c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c82:	68db      	ldr	r3, [r3, #12]
 8010c84:	899b      	ldrh	r3, [r3, #12]
 8010c86:	b29c      	uxth	r4, r3
 8010c88:	2010      	movs	r0, #16
 8010c8a:	f7f9 fffe 	bl	800ac8a <lwip_htons>
 8010c8e:	4603      	mov	r3, r0
 8010c90:	461a      	mov	r2, r3
 8010c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c94:	68db      	ldr	r3, [r3, #12]
 8010c96:	4322      	orrs	r2, r4
 8010c98:	b292      	uxth	r2, r2
 8010c9a:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8010c9c:	697a      	ldr	r2, [r7, #20]
 8010c9e:	6879      	ldr	r1, [r7, #4]
 8010ca0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010ca2:	f000 f909 	bl	8010eb8 <tcp_output_segment>
 8010ca6:	4603      	mov	r3, r0
 8010ca8:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8010caa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010cae:	2b00      	cmp	r3, #0
 8010cb0:	d009      	beq.n	8010cc6 <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010cb2:	687b      	ldr	r3, [r7, #4]
 8010cb4:	8b5b      	ldrh	r3, [r3, #26]
 8010cb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010cba:	b29a      	uxth	r2, r3
 8010cbc:	687b      	ldr	r3, [r7, #4]
 8010cbe:	835a      	strh	r2, [r3, #26]
      return err;
 8010cc0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010cc4:	e0d3      	b.n	8010e6e <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8010cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cc8:	681a      	ldr	r2, [r3, #0]
 8010cca:	687b      	ldr	r3, [r7, #4]
 8010ccc:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8010cce:	687b      	ldr	r3, [r7, #4]
 8010cd0:	7d1b      	ldrb	r3, [r3, #20]
 8010cd2:	2b02      	cmp	r3, #2
 8010cd4:	d006      	beq.n	8010ce4 <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8010cd6:	687b      	ldr	r3, [r7, #4]
 8010cd8:	8b5b      	ldrh	r3, [r3, #26]
 8010cda:	f023 0303 	bic.w	r3, r3, #3
 8010cde:	b29a      	uxth	r2, r3
 8010ce0:	687b      	ldr	r3, [r7, #4]
 8010ce2:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8010ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ce6:	68db      	ldr	r3, [r3, #12]
 8010ce8:	685b      	ldr	r3, [r3, #4]
 8010cea:	4618      	mov	r0, r3
 8010cec:	f7f9 ffe2 	bl	800acb4 <lwip_htonl>
 8010cf0:	4604      	mov	r4, r0
 8010cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cf4:	891b      	ldrh	r3, [r3, #8]
 8010cf6:	461d      	mov	r5, r3
 8010cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cfa:	68db      	ldr	r3, [r3, #12]
 8010cfc:	899b      	ldrh	r3, [r3, #12]
 8010cfe:	b29b      	uxth	r3, r3
 8010d00:	4618      	mov	r0, r3
 8010d02:	f7f9 ffc2 	bl	800ac8a <lwip_htons>
 8010d06:	4603      	mov	r3, r0
 8010d08:	b2db      	uxtb	r3, r3
 8010d0a:	f003 0303 	and.w	r3, r3, #3
 8010d0e:	2b00      	cmp	r3, #0
 8010d10:	d00e      	beq.n	8010d30 <tcp_output+0x2a0>
 8010d12:	2301      	movs	r3, #1
 8010d14:	e00d      	b.n	8010d32 <tcp_output+0x2a2>
 8010d16:	bf00      	nop
 8010d18:	08016fd0 	.word	0x08016fd0
 8010d1c:	08017514 	.word	0x08017514
 8010d20:	08017024 	.word	0x08017024
 8010d24:	0801752c 	.word	0x0801752c
 8010d28:	200072b4 	.word	0x200072b4
 8010d2c:	08017554 	.word	0x08017554
 8010d30:	2300      	movs	r3, #0
 8010d32:	442b      	add	r3, r5
 8010d34:	4423      	add	r3, r4
 8010d36:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8010d38:	687b      	ldr	r3, [r7, #4]
 8010d3a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010d3c:	68bb      	ldr	r3, [r7, #8]
 8010d3e:	1ad3      	subs	r3, r2, r3
 8010d40:	2b00      	cmp	r3, #0
 8010d42:	da02      	bge.n	8010d4a <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8010d44:	687b      	ldr	r3, [r7, #4]
 8010d46:	68ba      	ldr	r2, [r7, #8]
 8010d48:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8010d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d4c:	891b      	ldrh	r3, [r3, #8]
 8010d4e:	461c      	mov	r4, r3
 8010d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d52:	68db      	ldr	r3, [r3, #12]
 8010d54:	899b      	ldrh	r3, [r3, #12]
 8010d56:	b29b      	uxth	r3, r3
 8010d58:	4618      	mov	r0, r3
 8010d5a:	f7f9 ff96 	bl	800ac8a <lwip_htons>
 8010d5e:	4603      	mov	r3, r0
 8010d60:	b2db      	uxtb	r3, r3
 8010d62:	f003 0303 	and.w	r3, r3, #3
 8010d66:	2b00      	cmp	r3, #0
 8010d68:	d001      	beq.n	8010d6e <tcp_output+0x2de>
 8010d6a:	2301      	movs	r3, #1
 8010d6c:	e000      	b.n	8010d70 <tcp_output+0x2e0>
 8010d6e:	2300      	movs	r3, #0
 8010d70:	4423      	add	r3, r4
 8010d72:	2b00      	cmp	r3, #0
 8010d74:	d049      	beq.n	8010e0a <tcp_output+0x37a>
      seg->next = NULL;
 8010d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d78:	2200      	movs	r2, #0
 8010d7a:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8010d7c:	687b      	ldr	r3, [r7, #4]
 8010d7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010d80:	2b00      	cmp	r3, #0
 8010d82:	d105      	bne.n	8010d90 <tcp_output+0x300>
        pcb->unacked = seg;
 8010d84:	687b      	ldr	r3, [r7, #4]
 8010d86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010d88:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8010d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d8c:	623b      	str	r3, [r7, #32]
 8010d8e:	e03f      	b.n	8010e10 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8010d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d92:	68db      	ldr	r3, [r3, #12]
 8010d94:	685b      	ldr	r3, [r3, #4]
 8010d96:	4618      	mov	r0, r3
 8010d98:	f7f9 ff8c 	bl	800acb4 <lwip_htonl>
 8010d9c:	4604      	mov	r4, r0
 8010d9e:	6a3b      	ldr	r3, [r7, #32]
 8010da0:	68db      	ldr	r3, [r3, #12]
 8010da2:	685b      	ldr	r3, [r3, #4]
 8010da4:	4618      	mov	r0, r3
 8010da6:	f7f9 ff85 	bl	800acb4 <lwip_htonl>
 8010daa:	4603      	mov	r3, r0
 8010dac:	1ae3      	subs	r3, r4, r3
 8010dae:	2b00      	cmp	r3, #0
 8010db0:	da24      	bge.n	8010dfc <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8010db2:	687b      	ldr	r3, [r7, #4]
 8010db4:	3370      	adds	r3, #112	; 0x70
 8010db6:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8010db8:	e002      	b.n	8010dc0 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8010dba:	69fb      	ldr	r3, [r7, #28]
 8010dbc:	681b      	ldr	r3, [r3, #0]
 8010dbe:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8010dc0:	69fb      	ldr	r3, [r7, #28]
 8010dc2:	681b      	ldr	r3, [r3, #0]
 8010dc4:	2b00      	cmp	r3, #0
 8010dc6:	d011      	beq.n	8010dec <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8010dc8:	69fb      	ldr	r3, [r7, #28]
 8010dca:	681b      	ldr	r3, [r3, #0]
 8010dcc:	68db      	ldr	r3, [r3, #12]
 8010dce:	685b      	ldr	r3, [r3, #4]
 8010dd0:	4618      	mov	r0, r3
 8010dd2:	f7f9 ff6f 	bl	800acb4 <lwip_htonl>
 8010dd6:	4604      	mov	r4, r0
 8010dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010dda:	68db      	ldr	r3, [r3, #12]
 8010ddc:	685b      	ldr	r3, [r3, #4]
 8010dde:	4618      	mov	r0, r3
 8010de0:	f7f9 ff68 	bl	800acb4 <lwip_htonl>
 8010de4:	4603      	mov	r3, r0
 8010de6:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8010de8:	2b00      	cmp	r3, #0
 8010dea:	dbe6      	blt.n	8010dba <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8010dec:	69fb      	ldr	r3, [r7, #28]
 8010dee:	681a      	ldr	r2, [r3, #0]
 8010df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010df2:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8010df4:	69fb      	ldr	r3, [r7, #28]
 8010df6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010df8:	601a      	str	r2, [r3, #0]
 8010dfa:	e009      	b.n	8010e10 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8010dfc:	6a3b      	ldr	r3, [r7, #32]
 8010dfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010e00:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8010e02:	6a3b      	ldr	r3, [r7, #32]
 8010e04:	681b      	ldr	r3, [r3, #0]
 8010e06:	623b      	str	r3, [r7, #32]
 8010e08:	e002      	b.n	8010e10 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8010e0a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010e0c:	f7fc fc43 	bl	800d696 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8010e10:	687b      	ldr	r3, [r7, #4]
 8010e12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010e14:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8010e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e18:	2b00      	cmp	r3, #0
 8010e1a:	d012      	beq.n	8010e42 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8010e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e1e:	68db      	ldr	r3, [r3, #12]
 8010e20:	685b      	ldr	r3, [r3, #4]
 8010e22:	4618      	mov	r0, r3
 8010e24:	f7f9 ff46 	bl	800acb4 <lwip_htonl>
 8010e28:	4602      	mov	r2, r0
 8010e2a:	687b      	ldr	r3, [r7, #4]
 8010e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010e2e:	1ad3      	subs	r3, r2, r3
 8010e30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010e32:	8912      	ldrh	r2, [r2, #8]
 8010e34:	4413      	add	r3, r2
  while (seg != NULL &&
 8010e36:	69ba      	ldr	r2, [r7, #24]
 8010e38:	429a      	cmp	r2, r3
 8010e3a:	f4bf aed9 	bcs.w	8010bf0 <tcp_output+0x160>
 8010e3e:	e000      	b.n	8010e42 <tcp_output+0x3b2>
      break;
 8010e40:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8010e42:	687b      	ldr	r3, [r7, #4]
 8010e44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010e46:	2b00      	cmp	r3, #0
 8010e48:	d108      	bne.n	8010e5c <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8010e4a:	687b      	ldr	r3, [r7, #4]
 8010e4c:	2200      	movs	r2, #0
 8010e4e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8010e52:	e004      	b.n	8010e5e <tcp_output+0x3ce>
    goto output_done;
 8010e54:	bf00      	nop
 8010e56:	e002      	b.n	8010e5e <tcp_output+0x3ce>
    goto output_done;
 8010e58:	bf00      	nop
 8010e5a:	e000      	b.n	8010e5e <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8010e5c:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8010e5e:	687b      	ldr	r3, [r7, #4]
 8010e60:	8b5b      	ldrh	r3, [r3, #26]
 8010e62:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010e66:	b29a      	uxth	r2, r3
 8010e68:	687b      	ldr	r3, [r7, #4]
 8010e6a:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8010e6c:	2300      	movs	r3, #0
}
 8010e6e:	4618      	mov	r0, r3
 8010e70:	3728      	adds	r7, #40	; 0x28
 8010e72:	46bd      	mov	sp, r7
 8010e74:	bdb0      	pop	{r4, r5, r7, pc}
 8010e76:	bf00      	nop

08010e78 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8010e78:	b580      	push	{r7, lr}
 8010e7a:	b082      	sub	sp, #8
 8010e7c:	af00      	add	r7, sp, #0
 8010e7e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8010e80:	687b      	ldr	r3, [r7, #4]
 8010e82:	2b00      	cmp	r3, #0
 8010e84:	d106      	bne.n	8010e94 <tcp_output_segment_busy+0x1c>
 8010e86:	4b09      	ldr	r3, [pc, #36]	; (8010eac <tcp_output_segment_busy+0x34>)
 8010e88:	f240 529a 	movw	r2, #1434	; 0x59a
 8010e8c:	4908      	ldr	r1, [pc, #32]	; (8010eb0 <tcp_output_segment_busy+0x38>)
 8010e8e:	4809      	ldr	r0, [pc, #36]	; (8010eb4 <tcp_output_segment_busy+0x3c>)
 8010e90:	f003 fb58 	bl	8014544 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8010e94:	687b      	ldr	r3, [r7, #4]
 8010e96:	685b      	ldr	r3, [r3, #4]
 8010e98:	7b9b      	ldrb	r3, [r3, #14]
 8010e9a:	2b01      	cmp	r3, #1
 8010e9c:	d001      	beq.n	8010ea2 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8010e9e:	2301      	movs	r3, #1
 8010ea0:	e000      	b.n	8010ea4 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8010ea2:	2300      	movs	r3, #0
}
 8010ea4:	4618      	mov	r0, r3
 8010ea6:	3708      	adds	r7, #8
 8010ea8:	46bd      	mov	sp, r7
 8010eaa:	bd80      	pop	{r7, pc}
 8010eac:	08016fd0 	.word	0x08016fd0
 8010eb0:	0801756c 	.word	0x0801756c
 8010eb4:	08017024 	.word	0x08017024

08010eb8 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8010eb8:	b5b0      	push	{r4, r5, r7, lr}
 8010eba:	b08c      	sub	sp, #48	; 0x30
 8010ebc:	af04      	add	r7, sp, #16
 8010ebe:	60f8      	str	r0, [r7, #12]
 8010ec0:	60b9      	str	r1, [r7, #8]
 8010ec2:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8010ec4:	68fb      	ldr	r3, [r7, #12]
 8010ec6:	2b00      	cmp	r3, #0
 8010ec8:	d106      	bne.n	8010ed8 <tcp_output_segment+0x20>
 8010eca:	4b63      	ldr	r3, [pc, #396]	; (8011058 <tcp_output_segment+0x1a0>)
 8010ecc:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8010ed0:	4962      	ldr	r1, [pc, #392]	; (801105c <tcp_output_segment+0x1a4>)
 8010ed2:	4863      	ldr	r0, [pc, #396]	; (8011060 <tcp_output_segment+0x1a8>)
 8010ed4:	f003 fb36 	bl	8014544 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8010ed8:	68bb      	ldr	r3, [r7, #8]
 8010eda:	2b00      	cmp	r3, #0
 8010edc:	d106      	bne.n	8010eec <tcp_output_segment+0x34>
 8010ede:	4b5e      	ldr	r3, [pc, #376]	; (8011058 <tcp_output_segment+0x1a0>)
 8010ee0:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8010ee4:	495f      	ldr	r1, [pc, #380]	; (8011064 <tcp_output_segment+0x1ac>)
 8010ee6:	485e      	ldr	r0, [pc, #376]	; (8011060 <tcp_output_segment+0x1a8>)
 8010ee8:	f003 fb2c 	bl	8014544 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8010eec:	687b      	ldr	r3, [r7, #4]
 8010eee:	2b00      	cmp	r3, #0
 8010ef0:	d106      	bne.n	8010f00 <tcp_output_segment+0x48>
 8010ef2:	4b59      	ldr	r3, [pc, #356]	; (8011058 <tcp_output_segment+0x1a0>)
 8010ef4:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8010ef8:	495b      	ldr	r1, [pc, #364]	; (8011068 <tcp_output_segment+0x1b0>)
 8010efa:	4859      	ldr	r0, [pc, #356]	; (8011060 <tcp_output_segment+0x1a8>)
 8010efc:	f003 fb22 	bl	8014544 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8010f00:	68f8      	ldr	r0, [r7, #12]
 8010f02:	f7ff ffb9 	bl	8010e78 <tcp_output_segment_busy>
 8010f06:	4603      	mov	r3, r0
 8010f08:	2b00      	cmp	r3, #0
 8010f0a:	d001      	beq.n	8010f10 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8010f0c:	2300      	movs	r3, #0
 8010f0e:	e09f      	b.n	8011050 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8010f10:	68bb      	ldr	r3, [r7, #8]
 8010f12:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010f14:	68fb      	ldr	r3, [r7, #12]
 8010f16:	68dc      	ldr	r4, [r3, #12]
 8010f18:	4610      	mov	r0, r2
 8010f1a:	f7f9 fecb 	bl	800acb4 <lwip_htonl>
 8010f1e:	4603      	mov	r3, r0
 8010f20:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8010f22:	68bb      	ldr	r3, [r7, #8]
 8010f24:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8010f26:	68fb      	ldr	r3, [r7, #12]
 8010f28:	68dc      	ldr	r4, [r3, #12]
 8010f2a:	4610      	mov	r0, r2
 8010f2c:	f7f9 fead 	bl	800ac8a <lwip_htons>
 8010f30:	4603      	mov	r3, r0
 8010f32:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8010f34:	68bb      	ldr	r3, [r7, #8]
 8010f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010f38:	68ba      	ldr	r2, [r7, #8]
 8010f3a:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8010f3c:	441a      	add	r2, r3
 8010f3e:	68bb      	ldr	r3, [r7, #8]
 8010f40:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8010f42:	68fb      	ldr	r3, [r7, #12]
 8010f44:	68db      	ldr	r3, [r3, #12]
 8010f46:	3314      	adds	r3, #20
 8010f48:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8010f4a:	68fb      	ldr	r3, [r7, #12]
 8010f4c:	7a9b      	ldrb	r3, [r3, #10]
 8010f4e:	f003 0301 	and.w	r3, r3, #1
 8010f52:	2b00      	cmp	r3, #0
 8010f54:	d015      	beq.n	8010f82 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8010f56:	68bb      	ldr	r3, [r7, #8]
 8010f58:	3304      	adds	r3, #4
 8010f5a:	461a      	mov	r2, r3
 8010f5c:	6879      	ldr	r1, [r7, #4]
 8010f5e:	f44f 7006 	mov.w	r0, #536	; 0x218
 8010f62:	f7fc fe8f 	bl	800dc84 <tcp_eff_send_mss_netif>
 8010f66:	4603      	mov	r3, r0
 8010f68:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8010f6a:	8b7b      	ldrh	r3, [r7, #26]
 8010f6c:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8010f70:	4618      	mov	r0, r3
 8010f72:	f7f9 fe9f 	bl	800acb4 <lwip_htonl>
 8010f76:	4602      	mov	r2, r0
 8010f78:	69fb      	ldr	r3, [r7, #28]
 8010f7a:	601a      	str	r2, [r3, #0]
    opts += 1;
 8010f7c:	69fb      	ldr	r3, [r7, #28]
 8010f7e:	3304      	adds	r3, #4
 8010f80:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8010f82:	68bb      	ldr	r3, [r7, #8]
 8010f84:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8010f88:	2b00      	cmp	r3, #0
 8010f8a:	da02      	bge.n	8010f92 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8010f8c:	68bb      	ldr	r3, [r7, #8]
 8010f8e:	2200      	movs	r2, #0
 8010f90:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8010f92:	68bb      	ldr	r3, [r7, #8]
 8010f94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010f96:	2b00      	cmp	r3, #0
 8010f98:	d10c      	bne.n	8010fb4 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8010f9a:	4b34      	ldr	r3, [pc, #208]	; (801106c <tcp_output_segment+0x1b4>)
 8010f9c:	681a      	ldr	r2, [r3, #0]
 8010f9e:	68bb      	ldr	r3, [r7, #8]
 8010fa0:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8010fa2:	68fb      	ldr	r3, [r7, #12]
 8010fa4:	68db      	ldr	r3, [r3, #12]
 8010fa6:	685b      	ldr	r3, [r3, #4]
 8010fa8:	4618      	mov	r0, r3
 8010faa:	f7f9 fe83 	bl	800acb4 <lwip_htonl>
 8010fae:	4602      	mov	r2, r0
 8010fb0:	68bb      	ldr	r3, [r7, #8]
 8010fb2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8010fb4:	68fb      	ldr	r3, [r7, #12]
 8010fb6:	68da      	ldr	r2, [r3, #12]
 8010fb8:	68fb      	ldr	r3, [r7, #12]
 8010fba:	685b      	ldr	r3, [r3, #4]
 8010fbc:	685b      	ldr	r3, [r3, #4]
 8010fbe:	1ad3      	subs	r3, r2, r3
 8010fc0:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8010fc2:	68fb      	ldr	r3, [r7, #12]
 8010fc4:	685b      	ldr	r3, [r3, #4]
 8010fc6:	8959      	ldrh	r1, [r3, #10]
 8010fc8:	68fb      	ldr	r3, [r7, #12]
 8010fca:	685b      	ldr	r3, [r3, #4]
 8010fcc:	8b3a      	ldrh	r2, [r7, #24]
 8010fce:	1a8a      	subs	r2, r1, r2
 8010fd0:	b292      	uxth	r2, r2
 8010fd2:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8010fd4:	68fb      	ldr	r3, [r7, #12]
 8010fd6:	685b      	ldr	r3, [r3, #4]
 8010fd8:	8919      	ldrh	r1, [r3, #8]
 8010fda:	68fb      	ldr	r3, [r7, #12]
 8010fdc:	685b      	ldr	r3, [r3, #4]
 8010fde:	8b3a      	ldrh	r2, [r7, #24]
 8010fe0:	1a8a      	subs	r2, r1, r2
 8010fe2:	b292      	uxth	r2, r2
 8010fe4:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8010fe6:	68fb      	ldr	r3, [r7, #12]
 8010fe8:	685b      	ldr	r3, [r3, #4]
 8010fea:	68fa      	ldr	r2, [r7, #12]
 8010fec:	68d2      	ldr	r2, [r2, #12]
 8010fee:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8010ff0:	68fb      	ldr	r3, [r7, #12]
 8010ff2:	68db      	ldr	r3, [r3, #12]
 8010ff4:	2200      	movs	r2, #0
 8010ff6:	741a      	strb	r2, [r3, #16]
 8010ff8:	2200      	movs	r2, #0
 8010ffa:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8010ffc:	68fb      	ldr	r3, [r7, #12]
 8010ffe:	68db      	ldr	r3, [r3, #12]
 8011000:	f103 0214 	add.w	r2, r3, #20
 8011004:	68fb      	ldr	r3, [r7, #12]
 8011006:	7a9b      	ldrb	r3, [r3, #10]
 8011008:	009b      	lsls	r3, r3, #2
 801100a:	f003 0304 	and.w	r3, r3, #4
 801100e:	4413      	add	r3, r2
 8011010:	69fa      	ldr	r2, [r7, #28]
 8011012:	429a      	cmp	r2, r3
 8011014:	d006      	beq.n	8011024 <tcp_output_segment+0x16c>
 8011016:	4b10      	ldr	r3, [pc, #64]	; (8011058 <tcp_output_segment+0x1a0>)
 8011018:	f240 621c 	movw	r2, #1564	; 0x61c
 801101c:	4914      	ldr	r1, [pc, #80]	; (8011070 <tcp_output_segment+0x1b8>)
 801101e:	4810      	ldr	r0, [pc, #64]	; (8011060 <tcp_output_segment+0x1a8>)
 8011020:	f003 fa90 	bl	8014544 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8011024:	68fb      	ldr	r3, [r7, #12]
 8011026:	6858      	ldr	r0, [r3, #4]
 8011028:	68b9      	ldr	r1, [r7, #8]
 801102a:	68bb      	ldr	r3, [r7, #8]
 801102c:	1d1c      	adds	r4, r3, #4
 801102e:	68bb      	ldr	r3, [r7, #8]
 8011030:	7add      	ldrb	r5, [r3, #11]
 8011032:	68bb      	ldr	r3, [r7, #8]
 8011034:	7a9b      	ldrb	r3, [r3, #10]
 8011036:	687a      	ldr	r2, [r7, #4]
 8011038:	9202      	str	r2, [sp, #8]
 801103a:	2206      	movs	r2, #6
 801103c:	9201      	str	r2, [sp, #4]
 801103e:	9300      	str	r3, [sp, #0]
 8011040:	462b      	mov	r3, r5
 8011042:	4622      	mov	r2, r4
 8011044:	f002 f9f4 	bl	8013430 <ip4_output_if>
 8011048:	4603      	mov	r3, r0
 801104a:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 801104c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011050:	4618      	mov	r0, r3
 8011052:	3720      	adds	r7, #32
 8011054:	46bd      	mov	sp, r7
 8011056:	bdb0      	pop	{r4, r5, r7, pc}
 8011058:	08016fd0 	.word	0x08016fd0
 801105c:	08017594 	.word	0x08017594
 8011060:	08017024 	.word	0x08017024
 8011064:	080175b4 	.word	0x080175b4
 8011068:	080175d4 	.word	0x080175d4
 801106c:	200072a4 	.word	0x200072a4
 8011070:	080175f8 	.word	0x080175f8

08011074 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8011074:	b5b0      	push	{r4, r5, r7, lr}
 8011076:	b084      	sub	sp, #16
 8011078:	af00      	add	r7, sp, #0
 801107a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 801107c:	687b      	ldr	r3, [r7, #4]
 801107e:	2b00      	cmp	r3, #0
 8011080:	d106      	bne.n	8011090 <tcp_rexmit_rto_prepare+0x1c>
 8011082:	4b31      	ldr	r3, [pc, #196]	; (8011148 <tcp_rexmit_rto_prepare+0xd4>)
 8011084:	f240 6263 	movw	r2, #1635	; 0x663
 8011088:	4930      	ldr	r1, [pc, #192]	; (801114c <tcp_rexmit_rto_prepare+0xd8>)
 801108a:	4831      	ldr	r0, [pc, #196]	; (8011150 <tcp_rexmit_rto_prepare+0xdc>)
 801108c:	f003 fa5a 	bl	8014544 <iprintf>

  if (pcb->unacked == NULL) {
 8011090:	687b      	ldr	r3, [r7, #4]
 8011092:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011094:	2b00      	cmp	r3, #0
 8011096:	d102      	bne.n	801109e <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8011098:	f06f 0305 	mvn.w	r3, #5
 801109c:	e050      	b.n	8011140 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801109e:	687b      	ldr	r3, [r7, #4]
 80110a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80110a2:	60fb      	str	r3, [r7, #12]
 80110a4:	e00b      	b.n	80110be <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 80110a6:	68f8      	ldr	r0, [r7, #12]
 80110a8:	f7ff fee6 	bl	8010e78 <tcp_output_segment_busy>
 80110ac:	4603      	mov	r3, r0
 80110ae:	2b00      	cmp	r3, #0
 80110b0:	d002      	beq.n	80110b8 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 80110b2:	f06f 0305 	mvn.w	r3, #5
 80110b6:	e043      	b.n	8011140 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80110b8:	68fb      	ldr	r3, [r7, #12]
 80110ba:	681b      	ldr	r3, [r3, #0]
 80110bc:	60fb      	str	r3, [r7, #12]
 80110be:	68fb      	ldr	r3, [r7, #12]
 80110c0:	681b      	ldr	r3, [r3, #0]
 80110c2:	2b00      	cmp	r3, #0
 80110c4:	d1ef      	bne.n	80110a6 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 80110c6:	68f8      	ldr	r0, [r7, #12]
 80110c8:	f7ff fed6 	bl	8010e78 <tcp_output_segment_busy>
 80110cc:	4603      	mov	r3, r0
 80110ce:	2b00      	cmp	r3, #0
 80110d0:	d002      	beq.n	80110d8 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 80110d2:	f06f 0305 	mvn.w	r3, #5
 80110d6:	e033      	b.n	8011140 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 80110d8:	687b      	ldr	r3, [r7, #4]
 80110da:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80110dc:	68fb      	ldr	r3, [r7, #12]
 80110de:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 80110e0:	687b      	ldr	r3, [r7, #4]
 80110e2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80110e4:	687b      	ldr	r3, [r7, #4]
 80110e6:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 80110e8:	687b      	ldr	r3, [r7, #4]
 80110ea:	2200      	movs	r2, #0
 80110ec:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 80110ee:	687b      	ldr	r3, [r7, #4]
 80110f0:	8b5b      	ldrh	r3, [r3, #26]
 80110f2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80110f6:	b29a      	uxth	r2, r3
 80110f8:	687b      	ldr	r3, [r7, #4]
 80110fa:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80110fc:	68fb      	ldr	r3, [r7, #12]
 80110fe:	68db      	ldr	r3, [r3, #12]
 8011100:	685b      	ldr	r3, [r3, #4]
 8011102:	4618      	mov	r0, r3
 8011104:	f7f9 fdd6 	bl	800acb4 <lwip_htonl>
 8011108:	4604      	mov	r4, r0
 801110a:	68fb      	ldr	r3, [r7, #12]
 801110c:	891b      	ldrh	r3, [r3, #8]
 801110e:	461d      	mov	r5, r3
 8011110:	68fb      	ldr	r3, [r7, #12]
 8011112:	68db      	ldr	r3, [r3, #12]
 8011114:	899b      	ldrh	r3, [r3, #12]
 8011116:	b29b      	uxth	r3, r3
 8011118:	4618      	mov	r0, r3
 801111a:	f7f9 fdb6 	bl	800ac8a <lwip_htons>
 801111e:	4603      	mov	r3, r0
 8011120:	b2db      	uxtb	r3, r3
 8011122:	f003 0303 	and.w	r3, r3, #3
 8011126:	2b00      	cmp	r3, #0
 8011128:	d001      	beq.n	801112e <tcp_rexmit_rto_prepare+0xba>
 801112a:	2301      	movs	r3, #1
 801112c:	e000      	b.n	8011130 <tcp_rexmit_rto_prepare+0xbc>
 801112e:	2300      	movs	r3, #0
 8011130:	442b      	add	r3, r5
 8011132:	18e2      	adds	r2, r4, r3
 8011134:	687b      	ldr	r3, [r7, #4]
 8011136:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8011138:	687b      	ldr	r3, [r7, #4]
 801113a:	2200      	movs	r2, #0
 801113c:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 801113e:	2300      	movs	r3, #0
}
 8011140:	4618      	mov	r0, r3
 8011142:	3710      	adds	r7, #16
 8011144:	46bd      	mov	sp, r7
 8011146:	bdb0      	pop	{r4, r5, r7, pc}
 8011148:	08016fd0 	.word	0x08016fd0
 801114c:	0801760c 	.word	0x0801760c
 8011150:	08017024 	.word	0x08017024

08011154 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8011154:	b580      	push	{r7, lr}
 8011156:	b082      	sub	sp, #8
 8011158:	af00      	add	r7, sp, #0
 801115a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 801115c:	687b      	ldr	r3, [r7, #4]
 801115e:	2b00      	cmp	r3, #0
 8011160:	d106      	bne.n	8011170 <tcp_rexmit_rto_commit+0x1c>
 8011162:	4b0d      	ldr	r3, [pc, #52]	; (8011198 <tcp_rexmit_rto_commit+0x44>)
 8011164:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8011168:	490c      	ldr	r1, [pc, #48]	; (801119c <tcp_rexmit_rto_commit+0x48>)
 801116a:	480d      	ldr	r0, [pc, #52]	; (80111a0 <tcp_rexmit_rto_commit+0x4c>)
 801116c:	f003 f9ea 	bl	8014544 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8011170:	687b      	ldr	r3, [r7, #4]
 8011172:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011176:	2bff      	cmp	r3, #255	; 0xff
 8011178:	d007      	beq.n	801118a <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 801117a:	687b      	ldr	r3, [r7, #4]
 801117c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011180:	3301      	adds	r3, #1
 8011182:	b2da      	uxtb	r2, r3
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 801118a:	6878      	ldr	r0, [r7, #4]
 801118c:	f7ff fc80 	bl	8010a90 <tcp_output>
}
 8011190:	bf00      	nop
 8011192:	3708      	adds	r7, #8
 8011194:	46bd      	mov	sp, r7
 8011196:	bd80      	pop	{r7, pc}
 8011198:	08016fd0 	.word	0x08016fd0
 801119c:	08017630 	.word	0x08017630
 80111a0:	08017024 	.word	0x08017024

080111a4 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 80111a4:	b580      	push	{r7, lr}
 80111a6:	b082      	sub	sp, #8
 80111a8:	af00      	add	r7, sp, #0
 80111aa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 80111ac:	687b      	ldr	r3, [r7, #4]
 80111ae:	2b00      	cmp	r3, #0
 80111b0:	d106      	bne.n	80111c0 <tcp_rexmit_rto+0x1c>
 80111b2:	4b0a      	ldr	r3, [pc, #40]	; (80111dc <tcp_rexmit_rto+0x38>)
 80111b4:	f240 62ad 	movw	r2, #1709	; 0x6ad
 80111b8:	4909      	ldr	r1, [pc, #36]	; (80111e0 <tcp_rexmit_rto+0x3c>)
 80111ba:	480a      	ldr	r0, [pc, #40]	; (80111e4 <tcp_rexmit_rto+0x40>)
 80111bc:	f003 f9c2 	bl	8014544 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 80111c0:	6878      	ldr	r0, [r7, #4]
 80111c2:	f7ff ff57 	bl	8011074 <tcp_rexmit_rto_prepare>
 80111c6:	4603      	mov	r3, r0
 80111c8:	2b00      	cmp	r3, #0
 80111ca:	d102      	bne.n	80111d2 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 80111cc:	6878      	ldr	r0, [r7, #4]
 80111ce:	f7ff ffc1 	bl	8011154 <tcp_rexmit_rto_commit>
  }
}
 80111d2:	bf00      	nop
 80111d4:	3708      	adds	r7, #8
 80111d6:	46bd      	mov	sp, r7
 80111d8:	bd80      	pop	{r7, pc}
 80111da:	bf00      	nop
 80111dc:	08016fd0 	.word	0x08016fd0
 80111e0:	08017654 	.word	0x08017654
 80111e4:	08017024 	.word	0x08017024

080111e8 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 80111e8:	b590      	push	{r4, r7, lr}
 80111ea:	b085      	sub	sp, #20
 80111ec:	af00      	add	r7, sp, #0
 80111ee:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 80111f0:	687b      	ldr	r3, [r7, #4]
 80111f2:	2b00      	cmp	r3, #0
 80111f4:	d106      	bne.n	8011204 <tcp_rexmit+0x1c>
 80111f6:	4b2f      	ldr	r3, [pc, #188]	; (80112b4 <tcp_rexmit+0xcc>)
 80111f8:	f240 62c1 	movw	r2, #1729	; 0x6c1
 80111fc:	492e      	ldr	r1, [pc, #184]	; (80112b8 <tcp_rexmit+0xd0>)
 80111fe:	482f      	ldr	r0, [pc, #188]	; (80112bc <tcp_rexmit+0xd4>)
 8011200:	f003 f9a0 	bl	8014544 <iprintf>

  if (pcb->unacked == NULL) {
 8011204:	687b      	ldr	r3, [r7, #4]
 8011206:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011208:	2b00      	cmp	r3, #0
 801120a:	d102      	bne.n	8011212 <tcp_rexmit+0x2a>
    return ERR_VAL;
 801120c:	f06f 0305 	mvn.w	r3, #5
 8011210:	e04c      	b.n	80112ac <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8011212:	687b      	ldr	r3, [r7, #4]
 8011214:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011216:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8011218:	68b8      	ldr	r0, [r7, #8]
 801121a:	f7ff fe2d 	bl	8010e78 <tcp_output_segment_busy>
 801121e:	4603      	mov	r3, r0
 8011220:	2b00      	cmp	r3, #0
 8011222:	d002      	beq.n	801122a <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8011224:	f06f 0305 	mvn.w	r3, #5
 8011228:	e040      	b.n	80112ac <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 801122a:	68bb      	ldr	r3, [r7, #8]
 801122c:	681a      	ldr	r2, [r3, #0]
 801122e:	687b      	ldr	r3, [r7, #4]
 8011230:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8011232:	687b      	ldr	r3, [r7, #4]
 8011234:	336c      	adds	r3, #108	; 0x6c
 8011236:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8011238:	e002      	b.n	8011240 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 801123a:	68fb      	ldr	r3, [r7, #12]
 801123c:	681b      	ldr	r3, [r3, #0]
 801123e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8011240:	68fb      	ldr	r3, [r7, #12]
 8011242:	681b      	ldr	r3, [r3, #0]
 8011244:	2b00      	cmp	r3, #0
 8011246:	d011      	beq.n	801126c <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8011248:	68fb      	ldr	r3, [r7, #12]
 801124a:	681b      	ldr	r3, [r3, #0]
 801124c:	68db      	ldr	r3, [r3, #12]
 801124e:	685b      	ldr	r3, [r3, #4]
 8011250:	4618      	mov	r0, r3
 8011252:	f7f9 fd2f 	bl	800acb4 <lwip_htonl>
 8011256:	4604      	mov	r4, r0
 8011258:	68bb      	ldr	r3, [r7, #8]
 801125a:	68db      	ldr	r3, [r3, #12]
 801125c:	685b      	ldr	r3, [r3, #4]
 801125e:	4618      	mov	r0, r3
 8011260:	f7f9 fd28 	bl	800acb4 <lwip_htonl>
 8011264:	4603      	mov	r3, r0
 8011266:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8011268:	2b00      	cmp	r3, #0
 801126a:	dbe6      	blt.n	801123a <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 801126c:	68fb      	ldr	r3, [r7, #12]
 801126e:	681a      	ldr	r2, [r3, #0]
 8011270:	68bb      	ldr	r3, [r7, #8]
 8011272:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8011274:	68fb      	ldr	r3, [r7, #12]
 8011276:	68ba      	ldr	r2, [r7, #8]
 8011278:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801127a:	68bb      	ldr	r3, [r7, #8]
 801127c:	681b      	ldr	r3, [r3, #0]
 801127e:	2b00      	cmp	r3, #0
 8011280:	d103      	bne.n	801128a <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8011282:	687b      	ldr	r3, [r7, #4]
 8011284:	2200      	movs	r2, #0
 8011286:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801128a:	687b      	ldr	r3, [r7, #4]
 801128c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011290:	2bff      	cmp	r3, #255	; 0xff
 8011292:	d007      	beq.n	80112a4 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8011294:	687b      	ldr	r3, [r7, #4]
 8011296:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801129a:	3301      	adds	r3, #1
 801129c:	b2da      	uxtb	r2, r3
 801129e:	687b      	ldr	r3, [r7, #4]
 80112a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 80112a4:	687b      	ldr	r3, [r7, #4]
 80112a6:	2200      	movs	r2, #0
 80112a8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 80112aa:	2300      	movs	r3, #0
}
 80112ac:	4618      	mov	r0, r3
 80112ae:	3714      	adds	r7, #20
 80112b0:	46bd      	mov	sp, r7
 80112b2:	bd90      	pop	{r4, r7, pc}
 80112b4:	08016fd0 	.word	0x08016fd0
 80112b8:	08017670 	.word	0x08017670
 80112bc:	08017024 	.word	0x08017024

080112c0 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 80112c0:	b580      	push	{r7, lr}
 80112c2:	b082      	sub	sp, #8
 80112c4:	af00      	add	r7, sp, #0
 80112c6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 80112c8:	687b      	ldr	r3, [r7, #4]
 80112ca:	2b00      	cmp	r3, #0
 80112cc:	d106      	bne.n	80112dc <tcp_rexmit_fast+0x1c>
 80112ce:	4b2a      	ldr	r3, [pc, #168]	; (8011378 <tcp_rexmit_fast+0xb8>)
 80112d0:	f240 62f9 	movw	r2, #1785	; 0x6f9
 80112d4:	4929      	ldr	r1, [pc, #164]	; (801137c <tcp_rexmit_fast+0xbc>)
 80112d6:	482a      	ldr	r0, [pc, #168]	; (8011380 <tcp_rexmit_fast+0xc0>)
 80112d8:	f003 f934 	bl	8014544 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 80112dc:	687b      	ldr	r3, [r7, #4]
 80112de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80112e0:	2b00      	cmp	r3, #0
 80112e2:	d044      	beq.n	801136e <tcp_rexmit_fast+0xae>
 80112e4:	687b      	ldr	r3, [r7, #4]
 80112e6:	8b5b      	ldrh	r3, [r3, #26]
 80112e8:	f003 0304 	and.w	r3, r3, #4
 80112ec:	2b00      	cmp	r3, #0
 80112ee:	d13e      	bne.n	801136e <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 80112f0:	6878      	ldr	r0, [r7, #4]
 80112f2:	f7ff ff79 	bl	80111e8 <tcp_rexmit>
 80112f6:	4603      	mov	r3, r0
 80112f8:	2b00      	cmp	r3, #0
 80112fa:	d138      	bne.n	801136e <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80112fc:	687b      	ldr	r3, [r7, #4]
 80112fe:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8011302:	687b      	ldr	r3, [r7, #4]
 8011304:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011308:	4293      	cmp	r3, r2
 801130a:	bf28      	it	cs
 801130c:	4613      	movcs	r3, r2
 801130e:	b29b      	uxth	r3, r3
 8011310:	0fda      	lsrs	r2, r3, #31
 8011312:	4413      	add	r3, r2
 8011314:	105b      	asrs	r3, r3, #1
 8011316:	b29a      	uxth	r2, r3
 8011318:	687b      	ldr	r3, [r7, #4]
 801131a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801131e:	687b      	ldr	r3, [r7, #4]
 8011320:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8011324:	461a      	mov	r2, r3
 8011326:	687b      	ldr	r3, [r7, #4]
 8011328:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801132a:	005b      	lsls	r3, r3, #1
 801132c:	429a      	cmp	r2, r3
 801132e:	d206      	bcs.n	801133e <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8011330:	687b      	ldr	r3, [r7, #4]
 8011332:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011334:	005b      	lsls	r3, r3, #1
 8011336:	b29a      	uxth	r2, r3
 8011338:	687b      	ldr	r3, [r7, #4]
 801133a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801133e:	687b      	ldr	r3, [r7, #4]
 8011340:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8011344:	687b      	ldr	r3, [r7, #4]
 8011346:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011348:	4619      	mov	r1, r3
 801134a:	0049      	lsls	r1, r1, #1
 801134c:	440b      	add	r3, r1
 801134e:	b29b      	uxth	r3, r3
 8011350:	4413      	add	r3, r2
 8011352:	b29a      	uxth	r2, r3
 8011354:	687b      	ldr	r3, [r7, #4]
 8011356:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 801135a:	687b      	ldr	r3, [r7, #4]
 801135c:	8b5b      	ldrh	r3, [r3, #26]
 801135e:	f043 0304 	orr.w	r3, r3, #4
 8011362:	b29a      	uxth	r2, r3
 8011364:	687b      	ldr	r3, [r7, #4]
 8011366:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8011368:	687b      	ldr	r3, [r7, #4]
 801136a:	2200      	movs	r2, #0
 801136c:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 801136e:	bf00      	nop
 8011370:	3708      	adds	r7, #8
 8011372:	46bd      	mov	sp, r7
 8011374:	bd80      	pop	{r7, pc}
 8011376:	bf00      	nop
 8011378:	08016fd0 	.word	0x08016fd0
 801137c:	08017688 	.word	0x08017688
 8011380:	08017024 	.word	0x08017024

08011384 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8011384:	b580      	push	{r7, lr}
 8011386:	b086      	sub	sp, #24
 8011388:	af00      	add	r7, sp, #0
 801138a:	60f8      	str	r0, [r7, #12]
 801138c:	607b      	str	r3, [r7, #4]
 801138e:	460b      	mov	r3, r1
 8011390:	817b      	strh	r3, [r7, #10]
 8011392:	4613      	mov	r3, r2
 8011394:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8011396:	897a      	ldrh	r2, [r7, #10]
 8011398:	893b      	ldrh	r3, [r7, #8]
 801139a:	4413      	add	r3, r2
 801139c:	b29b      	uxth	r3, r3
 801139e:	3314      	adds	r3, #20
 80113a0:	b29b      	uxth	r3, r3
 80113a2:	f44f 7220 	mov.w	r2, #640	; 0x280
 80113a6:	4619      	mov	r1, r3
 80113a8:	2022      	movs	r0, #34	; 0x22
 80113aa:	f7fa fc1d 	bl	800bbe8 <pbuf_alloc>
 80113ae:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 80113b0:	697b      	ldr	r3, [r7, #20]
 80113b2:	2b00      	cmp	r3, #0
 80113b4:	d04d      	beq.n	8011452 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 80113b6:	897b      	ldrh	r3, [r7, #10]
 80113b8:	3313      	adds	r3, #19
 80113ba:	697a      	ldr	r2, [r7, #20]
 80113bc:	8952      	ldrh	r2, [r2, #10]
 80113be:	4293      	cmp	r3, r2
 80113c0:	db06      	blt.n	80113d0 <tcp_output_alloc_header_common+0x4c>
 80113c2:	4b26      	ldr	r3, [pc, #152]	; (801145c <tcp_output_alloc_header_common+0xd8>)
 80113c4:	f240 7223 	movw	r2, #1827	; 0x723
 80113c8:	4925      	ldr	r1, [pc, #148]	; (8011460 <tcp_output_alloc_header_common+0xdc>)
 80113ca:	4826      	ldr	r0, [pc, #152]	; (8011464 <tcp_output_alloc_header_common+0xe0>)
 80113cc:	f003 f8ba 	bl	8014544 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 80113d0:	697b      	ldr	r3, [r7, #20]
 80113d2:	685b      	ldr	r3, [r3, #4]
 80113d4:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 80113d6:	8c3b      	ldrh	r3, [r7, #32]
 80113d8:	4618      	mov	r0, r3
 80113da:	f7f9 fc56 	bl	800ac8a <lwip_htons>
 80113de:	4603      	mov	r3, r0
 80113e0:	461a      	mov	r2, r3
 80113e2:	693b      	ldr	r3, [r7, #16]
 80113e4:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 80113e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80113e8:	4618      	mov	r0, r3
 80113ea:	f7f9 fc4e 	bl	800ac8a <lwip_htons>
 80113ee:	4603      	mov	r3, r0
 80113f0:	461a      	mov	r2, r3
 80113f2:	693b      	ldr	r3, [r7, #16]
 80113f4:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 80113f6:	693b      	ldr	r3, [r7, #16]
 80113f8:	687a      	ldr	r2, [r7, #4]
 80113fa:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 80113fc:	68f8      	ldr	r0, [r7, #12]
 80113fe:	f7f9 fc59 	bl	800acb4 <lwip_htonl>
 8011402:	4602      	mov	r2, r0
 8011404:	693b      	ldr	r3, [r7, #16]
 8011406:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8011408:	897b      	ldrh	r3, [r7, #10]
 801140a:	089b      	lsrs	r3, r3, #2
 801140c:	b29b      	uxth	r3, r3
 801140e:	3305      	adds	r3, #5
 8011410:	b29b      	uxth	r3, r3
 8011412:	031b      	lsls	r3, r3, #12
 8011414:	b29a      	uxth	r2, r3
 8011416:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801141a:	b29b      	uxth	r3, r3
 801141c:	4313      	orrs	r3, r2
 801141e:	b29b      	uxth	r3, r3
 8011420:	4618      	mov	r0, r3
 8011422:	f7f9 fc32 	bl	800ac8a <lwip_htons>
 8011426:	4603      	mov	r3, r0
 8011428:	461a      	mov	r2, r3
 801142a:	693b      	ldr	r3, [r7, #16]
 801142c:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801142e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8011430:	4618      	mov	r0, r3
 8011432:	f7f9 fc2a 	bl	800ac8a <lwip_htons>
 8011436:	4603      	mov	r3, r0
 8011438:	461a      	mov	r2, r3
 801143a:	693b      	ldr	r3, [r7, #16]
 801143c:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801143e:	693b      	ldr	r3, [r7, #16]
 8011440:	2200      	movs	r2, #0
 8011442:	741a      	strb	r2, [r3, #16]
 8011444:	2200      	movs	r2, #0
 8011446:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8011448:	693b      	ldr	r3, [r7, #16]
 801144a:	2200      	movs	r2, #0
 801144c:	749a      	strb	r2, [r3, #18]
 801144e:	2200      	movs	r2, #0
 8011450:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8011452:	697b      	ldr	r3, [r7, #20]
}
 8011454:	4618      	mov	r0, r3
 8011456:	3718      	adds	r7, #24
 8011458:	46bd      	mov	sp, r7
 801145a:	bd80      	pop	{r7, pc}
 801145c:	08016fd0 	.word	0x08016fd0
 8011460:	080176a8 	.word	0x080176a8
 8011464:	08017024 	.word	0x08017024

08011468 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8011468:	b5b0      	push	{r4, r5, r7, lr}
 801146a:	b08a      	sub	sp, #40	; 0x28
 801146c:	af04      	add	r7, sp, #16
 801146e:	60f8      	str	r0, [r7, #12]
 8011470:	607b      	str	r3, [r7, #4]
 8011472:	460b      	mov	r3, r1
 8011474:	817b      	strh	r3, [r7, #10]
 8011476:	4613      	mov	r3, r2
 8011478:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801147a:	68fb      	ldr	r3, [r7, #12]
 801147c:	2b00      	cmp	r3, #0
 801147e:	d106      	bne.n	801148e <tcp_output_alloc_header+0x26>
 8011480:	4b15      	ldr	r3, [pc, #84]	; (80114d8 <tcp_output_alloc_header+0x70>)
 8011482:	f240 7242 	movw	r2, #1858	; 0x742
 8011486:	4915      	ldr	r1, [pc, #84]	; (80114dc <tcp_output_alloc_header+0x74>)
 8011488:	4815      	ldr	r0, [pc, #84]	; (80114e0 <tcp_output_alloc_header+0x78>)
 801148a:	f003 f85b 	bl	8014544 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801148e:	68fb      	ldr	r3, [r7, #12]
 8011490:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8011492:	68fb      	ldr	r3, [r7, #12]
 8011494:	8adb      	ldrh	r3, [r3, #22]
 8011496:	68fa      	ldr	r2, [r7, #12]
 8011498:	8b12      	ldrh	r2, [r2, #24]
 801149a:	68f9      	ldr	r1, [r7, #12]
 801149c:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 801149e:	893d      	ldrh	r5, [r7, #8]
 80114a0:	897c      	ldrh	r4, [r7, #10]
 80114a2:	9103      	str	r1, [sp, #12]
 80114a4:	2110      	movs	r1, #16
 80114a6:	9102      	str	r1, [sp, #8]
 80114a8:	9201      	str	r2, [sp, #4]
 80114aa:	9300      	str	r3, [sp, #0]
 80114ac:	687b      	ldr	r3, [r7, #4]
 80114ae:	462a      	mov	r2, r5
 80114b0:	4621      	mov	r1, r4
 80114b2:	f7ff ff67 	bl	8011384 <tcp_output_alloc_header_common>
 80114b6:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 80114b8:	697b      	ldr	r3, [r7, #20]
 80114ba:	2b00      	cmp	r3, #0
 80114bc:	d006      	beq.n	80114cc <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80114be:	68fb      	ldr	r3, [r7, #12]
 80114c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80114c2:	68fa      	ldr	r2, [r7, #12]
 80114c4:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80114c6:	441a      	add	r2, r3
 80114c8:	68fb      	ldr	r3, [r7, #12]
 80114ca:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 80114cc:	697b      	ldr	r3, [r7, #20]
}
 80114ce:	4618      	mov	r0, r3
 80114d0:	3718      	adds	r7, #24
 80114d2:	46bd      	mov	sp, r7
 80114d4:	bdb0      	pop	{r4, r5, r7, pc}
 80114d6:	bf00      	nop
 80114d8:	08016fd0 	.word	0x08016fd0
 80114dc:	080176d8 	.word	0x080176d8
 80114e0:	08017024 	.word	0x08017024

080114e4 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 80114e4:	b580      	push	{r7, lr}
 80114e6:	b088      	sub	sp, #32
 80114e8:	af00      	add	r7, sp, #0
 80114ea:	60f8      	str	r0, [r7, #12]
 80114ec:	60b9      	str	r1, [r7, #8]
 80114ee:	4611      	mov	r1, r2
 80114f0:	461a      	mov	r2, r3
 80114f2:	460b      	mov	r3, r1
 80114f4:	71fb      	strb	r3, [r7, #7]
 80114f6:	4613      	mov	r3, r2
 80114f8:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 80114fa:	2300      	movs	r3, #0
 80114fc:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 80114fe:	68bb      	ldr	r3, [r7, #8]
 8011500:	2b00      	cmp	r3, #0
 8011502:	d106      	bne.n	8011512 <tcp_output_fill_options+0x2e>
 8011504:	4b13      	ldr	r3, [pc, #76]	; (8011554 <tcp_output_fill_options+0x70>)
 8011506:	f240 7256 	movw	r2, #1878	; 0x756
 801150a:	4913      	ldr	r1, [pc, #76]	; (8011558 <tcp_output_fill_options+0x74>)
 801150c:	4813      	ldr	r0, [pc, #76]	; (801155c <tcp_output_fill_options+0x78>)
 801150e:	f003 f819 	bl	8014544 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8011512:	68bb      	ldr	r3, [r7, #8]
 8011514:	685b      	ldr	r3, [r3, #4]
 8011516:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8011518:	69bb      	ldr	r3, [r7, #24]
 801151a:	3314      	adds	r3, #20
 801151c:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801151e:	69bb      	ldr	r3, [r7, #24]
 8011520:	f103 0214 	add.w	r2, r3, #20
 8011524:	8bfb      	ldrh	r3, [r7, #30]
 8011526:	009b      	lsls	r3, r3, #2
 8011528:	4619      	mov	r1, r3
 801152a:	79fb      	ldrb	r3, [r7, #7]
 801152c:	009b      	lsls	r3, r3, #2
 801152e:	f003 0304 	and.w	r3, r3, #4
 8011532:	440b      	add	r3, r1
 8011534:	4413      	add	r3, r2
 8011536:	697a      	ldr	r2, [r7, #20]
 8011538:	429a      	cmp	r2, r3
 801153a:	d006      	beq.n	801154a <tcp_output_fill_options+0x66>
 801153c:	4b05      	ldr	r3, [pc, #20]	; (8011554 <tcp_output_fill_options+0x70>)
 801153e:	f240 7275 	movw	r2, #1909	; 0x775
 8011542:	4907      	ldr	r1, [pc, #28]	; (8011560 <tcp_output_fill_options+0x7c>)
 8011544:	4805      	ldr	r0, [pc, #20]	; (801155c <tcp_output_fill_options+0x78>)
 8011546:	f002 fffd 	bl	8014544 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 801154a:	bf00      	nop
 801154c:	3720      	adds	r7, #32
 801154e:	46bd      	mov	sp, r7
 8011550:	bd80      	pop	{r7, pc}
 8011552:	bf00      	nop
 8011554:	08016fd0 	.word	0x08016fd0
 8011558:	08017700 	.word	0x08017700
 801155c:	08017024 	.word	0x08017024
 8011560:	080175f8 	.word	0x080175f8

08011564 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8011564:	b580      	push	{r7, lr}
 8011566:	b08a      	sub	sp, #40	; 0x28
 8011568:	af04      	add	r7, sp, #16
 801156a:	60f8      	str	r0, [r7, #12]
 801156c:	60b9      	str	r1, [r7, #8]
 801156e:	607a      	str	r2, [r7, #4]
 8011570:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8011572:	68bb      	ldr	r3, [r7, #8]
 8011574:	2b00      	cmp	r3, #0
 8011576:	d106      	bne.n	8011586 <tcp_output_control_segment+0x22>
 8011578:	4b1c      	ldr	r3, [pc, #112]	; (80115ec <tcp_output_control_segment+0x88>)
 801157a:	f240 7287 	movw	r2, #1927	; 0x787
 801157e:	491c      	ldr	r1, [pc, #112]	; (80115f0 <tcp_output_control_segment+0x8c>)
 8011580:	481c      	ldr	r0, [pc, #112]	; (80115f4 <tcp_output_control_segment+0x90>)
 8011582:	f002 ffdf 	bl	8014544 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8011586:	683a      	ldr	r2, [r7, #0]
 8011588:	6879      	ldr	r1, [r7, #4]
 801158a:	68f8      	ldr	r0, [r7, #12]
 801158c:	f7fe ff40 	bl	8010410 <tcp_route>
 8011590:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8011592:	693b      	ldr	r3, [r7, #16]
 8011594:	2b00      	cmp	r3, #0
 8011596:	d102      	bne.n	801159e <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8011598:	23fc      	movs	r3, #252	; 0xfc
 801159a:	75fb      	strb	r3, [r7, #23]
 801159c:	e01c      	b.n	80115d8 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801159e:	68fb      	ldr	r3, [r7, #12]
 80115a0:	2b00      	cmp	r3, #0
 80115a2:	d006      	beq.n	80115b2 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 80115a4:	68fb      	ldr	r3, [r7, #12]
 80115a6:	7adb      	ldrb	r3, [r3, #11]
 80115a8:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 80115aa:	68fb      	ldr	r3, [r7, #12]
 80115ac:	7a9b      	ldrb	r3, [r3, #10]
 80115ae:	757b      	strb	r3, [r7, #21]
 80115b0:	e003      	b.n	80115ba <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 80115b2:	23ff      	movs	r3, #255	; 0xff
 80115b4:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 80115b6:	2300      	movs	r3, #0
 80115b8:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 80115ba:	7dba      	ldrb	r2, [r7, #22]
 80115bc:	693b      	ldr	r3, [r7, #16]
 80115be:	9302      	str	r3, [sp, #8]
 80115c0:	2306      	movs	r3, #6
 80115c2:	9301      	str	r3, [sp, #4]
 80115c4:	7d7b      	ldrb	r3, [r7, #21]
 80115c6:	9300      	str	r3, [sp, #0]
 80115c8:	4613      	mov	r3, r2
 80115ca:	683a      	ldr	r2, [r7, #0]
 80115cc:	6879      	ldr	r1, [r7, #4]
 80115ce:	68b8      	ldr	r0, [r7, #8]
 80115d0:	f001 ff2e 	bl	8013430 <ip4_output_if>
 80115d4:	4603      	mov	r3, r0
 80115d6:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 80115d8:	68b8      	ldr	r0, [r7, #8]
 80115da:	f7fa fde9 	bl	800c1b0 <pbuf_free>
  return err;
 80115de:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80115e2:	4618      	mov	r0, r3
 80115e4:	3718      	adds	r7, #24
 80115e6:	46bd      	mov	sp, r7
 80115e8:	bd80      	pop	{r7, pc}
 80115ea:	bf00      	nop
 80115ec:	08016fd0 	.word	0x08016fd0
 80115f0:	08017728 	.word	0x08017728
 80115f4:	08017024 	.word	0x08017024

080115f8 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 80115f8:	b590      	push	{r4, r7, lr}
 80115fa:	b08b      	sub	sp, #44	; 0x2c
 80115fc:	af04      	add	r7, sp, #16
 80115fe:	60f8      	str	r0, [r7, #12]
 8011600:	60b9      	str	r1, [r7, #8]
 8011602:	607a      	str	r2, [r7, #4]
 8011604:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8011606:	683b      	ldr	r3, [r7, #0]
 8011608:	2b00      	cmp	r3, #0
 801160a:	d106      	bne.n	801161a <tcp_rst+0x22>
 801160c:	4b1f      	ldr	r3, [pc, #124]	; (801168c <tcp_rst+0x94>)
 801160e:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8011612:	491f      	ldr	r1, [pc, #124]	; (8011690 <tcp_rst+0x98>)
 8011614:	481f      	ldr	r0, [pc, #124]	; (8011694 <tcp_rst+0x9c>)
 8011616:	f002 ff95 	bl	8014544 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801161a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801161c:	2b00      	cmp	r3, #0
 801161e:	d106      	bne.n	801162e <tcp_rst+0x36>
 8011620:	4b1a      	ldr	r3, [pc, #104]	; (801168c <tcp_rst+0x94>)
 8011622:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8011626:	491c      	ldr	r1, [pc, #112]	; (8011698 <tcp_rst+0xa0>)
 8011628:	481a      	ldr	r0, [pc, #104]	; (8011694 <tcp_rst+0x9c>)
 801162a:	f002 ff8b 	bl	8014544 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801162e:	2300      	movs	r3, #0
 8011630:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8011632:	f246 0308 	movw	r3, #24584	; 0x6008
 8011636:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8011638:	7dfb      	ldrb	r3, [r7, #23]
 801163a:	b29c      	uxth	r4, r3
 801163c:	68b8      	ldr	r0, [r7, #8]
 801163e:	f7f9 fb39 	bl	800acb4 <lwip_htonl>
 8011642:	4602      	mov	r2, r0
 8011644:	8abb      	ldrh	r3, [r7, #20]
 8011646:	9303      	str	r3, [sp, #12]
 8011648:	2314      	movs	r3, #20
 801164a:	9302      	str	r3, [sp, #8]
 801164c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801164e:	9301      	str	r3, [sp, #4]
 8011650:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8011652:	9300      	str	r3, [sp, #0]
 8011654:	4613      	mov	r3, r2
 8011656:	2200      	movs	r2, #0
 8011658:	4621      	mov	r1, r4
 801165a:	6878      	ldr	r0, [r7, #4]
 801165c:	f7ff fe92 	bl	8011384 <tcp_output_alloc_header_common>
 8011660:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8011662:	693b      	ldr	r3, [r7, #16]
 8011664:	2b00      	cmp	r3, #0
 8011666:	d00c      	beq.n	8011682 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8011668:	7dfb      	ldrb	r3, [r7, #23]
 801166a:	2200      	movs	r2, #0
 801166c:	6939      	ldr	r1, [r7, #16]
 801166e:	68f8      	ldr	r0, [r7, #12]
 8011670:	f7ff ff38 	bl	80114e4 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8011674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011676:	683a      	ldr	r2, [r7, #0]
 8011678:	6939      	ldr	r1, [r7, #16]
 801167a:	68f8      	ldr	r0, [r7, #12]
 801167c:	f7ff ff72 	bl	8011564 <tcp_output_control_segment>
 8011680:	e000      	b.n	8011684 <tcp_rst+0x8c>
    return;
 8011682:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8011684:	371c      	adds	r7, #28
 8011686:	46bd      	mov	sp, r7
 8011688:	bd90      	pop	{r4, r7, pc}
 801168a:	bf00      	nop
 801168c:	08016fd0 	.word	0x08016fd0
 8011690:	08017754 	.word	0x08017754
 8011694:	08017024 	.word	0x08017024
 8011698:	08017770 	.word	0x08017770

0801169c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 801169c:	b590      	push	{r4, r7, lr}
 801169e:	b087      	sub	sp, #28
 80116a0:	af00      	add	r7, sp, #0
 80116a2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 80116a4:	2300      	movs	r3, #0
 80116a6:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 80116a8:	2300      	movs	r3, #0
 80116aa:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 80116ac:	687b      	ldr	r3, [r7, #4]
 80116ae:	2b00      	cmp	r3, #0
 80116b0:	d106      	bne.n	80116c0 <tcp_send_empty_ack+0x24>
 80116b2:	4b28      	ldr	r3, [pc, #160]	; (8011754 <tcp_send_empty_ack+0xb8>)
 80116b4:	f240 72ea 	movw	r2, #2026	; 0x7ea
 80116b8:	4927      	ldr	r1, [pc, #156]	; (8011758 <tcp_send_empty_ack+0xbc>)
 80116ba:	4828      	ldr	r0, [pc, #160]	; (801175c <tcp_send_empty_ack+0xc0>)
 80116bc:	f002 ff42 	bl	8014544 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80116c0:	7dfb      	ldrb	r3, [r7, #23]
 80116c2:	009b      	lsls	r3, r3, #2
 80116c4:	b2db      	uxtb	r3, r3
 80116c6:	f003 0304 	and.w	r3, r3, #4
 80116ca:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 80116cc:	7d7b      	ldrb	r3, [r7, #21]
 80116ce:	b29c      	uxth	r4, r3
 80116d0:	687b      	ldr	r3, [r7, #4]
 80116d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80116d4:	4618      	mov	r0, r3
 80116d6:	f7f9 faed 	bl	800acb4 <lwip_htonl>
 80116da:	4603      	mov	r3, r0
 80116dc:	2200      	movs	r2, #0
 80116de:	4621      	mov	r1, r4
 80116e0:	6878      	ldr	r0, [r7, #4]
 80116e2:	f7ff fec1 	bl	8011468 <tcp_output_alloc_header>
 80116e6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80116e8:	693b      	ldr	r3, [r7, #16]
 80116ea:	2b00      	cmp	r3, #0
 80116ec:	d109      	bne.n	8011702 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80116ee:	687b      	ldr	r3, [r7, #4]
 80116f0:	8b5b      	ldrh	r3, [r3, #26]
 80116f2:	f043 0303 	orr.w	r3, r3, #3
 80116f6:	b29a      	uxth	r2, r3
 80116f8:	687b      	ldr	r3, [r7, #4]
 80116fa:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 80116fc:	f06f 0301 	mvn.w	r3, #1
 8011700:	e023      	b.n	801174a <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8011702:	7dbb      	ldrb	r3, [r7, #22]
 8011704:	7dfa      	ldrb	r2, [r7, #23]
 8011706:	6939      	ldr	r1, [r7, #16]
 8011708:	6878      	ldr	r0, [r7, #4]
 801170a:	f7ff feeb 	bl	80114e4 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801170e:	687a      	ldr	r2, [r7, #4]
 8011710:	687b      	ldr	r3, [r7, #4]
 8011712:	3304      	adds	r3, #4
 8011714:	6939      	ldr	r1, [r7, #16]
 8011716:	6878      	ldr	r0, [r7, #4]
 8011718:	f7ff ff24 	bl	8011564 <tcp_output_control_segment>
 801171c:	4603      	mov	r3, r0
 801171e:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8011720:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011724:	2b00      	cmp	r3, #0
 8011726:	d007      	beq.n	8011738 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011728:	687b      	ldr	r3, [r7, #4]
 801172a:	8b5b      	ldrh	r3, [r3, #26]
 801172c:	f043 0303 	orr.w	r3, r3, #3
 8011730:	b29a      	uxth	r2, r3
 8011732:	687b      	ldr	r3, [r7, #4]
 8011734:	835a      	strh	r2, [r3, #26]
 8011736:	e006      	b.n	8011746 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011738:	687b      	ldr	r3, [r7, #4]
 801173a:	8b5b      	ldrh	r3, [r3, #26]
 801173c:	f023 0303 	bic.w	r3, r3, #3
 8011740:	b29a      	uxth	r2, r3
 8011742:	687b      	ldr	r3, [r7, #4]
 8011744:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8011746:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801174a:	4618      	mov	r0, r3
 801174c:	371c      	adds	r7, #28
 801174e:	46bd      	mov	sp, r7
 8011750:	bd90      	pop	{r4, r7, pc}
 8011752:	bf00      	nop
 8011754:	08016fd0 	.word	0x08016fd0
 8011758:	0801778c 	.word	0x0801778c
 801175c:	08017024 	.word	0x08017024

08011760 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8011760:	b590      	push	{r4, r7, lr}
 8011762:	b087      	sub	sp, #28
 8011764:	af00      	add	r7, sp, #0
 8011766:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8011768:	2300      	movs	r3, #0
 801176a:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 801176c:	687b      	ldr	r3, [r7, #4]
 801176e:	2b00      	cmp	r3, #0
 8011770:	d106      	bne.n	8011780 <tcp_keepalive+0x20>
 8011772:	4b18      	ldr	r3, [pc, #96]	; (80117d4 <tcp_keepalive+0x74>)
 8011774:	f640 0224 	movw	r2, #2084	; 0x824
 8011778:	4917      	ldr	r1, [pc, #92]	; (80117d8 <tcp_keepalive+0x78>)
 801177a:	4818      	ldr	r0, [pc, #96]	; (80117dc <tcp_keepalive+0x7c>)
 801177c:	f002 fee2 	bl	8014544 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8011780:	7dfb      	ldrb	r3, [r7, #23]
 8011782:	b29c      	uxth	r4, r3
 8011784:	687b      	ldr	r3, [r7, #4]
 8011786:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011788:	3b01      	subs	r3, #1
 801178a:	4618      	mov	r0, r3
 801178c:	f7f9 fa92 	bl	800acb4 <lwip_htonl>
 8011790:	4603      	mov	r3, r0
 8011792:	2200      	movs	r2, #0
 8011794:	4621      	mov	r1, r4
 8011796:	6878      	ldr	r0, [r7, #4]
 8011798:	f7ff fe66 	bl	8011468 <tcp_output_alloc_header>
 801179c:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801179e:	693b      	ldr	r3, [r7, #16]
 80117a0:	2b00      	cmp	r3, #0
 80117a2:	d102      	bne.n	80117aa <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 80117a4:	f04f 33ff 	mov.w	r3, #4294967295
 80117a8:	e010      	b.n	80117cc <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80117aa:	7dfb      	ldrb	r3, [r7, #23]
 80117ac:	2200      	movs	r2, #0
 80117ae:	6939      	ldr	r1, [r7, #16]
 80117b0:	6878      	ldr	r0, [r7, #4]
 80117b2:	f7ff fe97 	bl	80114e4 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80117b6:	687a      	ldr	r2, [r7, #4]
 80117b8:	687b      	ldr	r3, [r7, #4]
 80117ba:	3304      	adds	r3, #4
 80117bc:	6939      	ldr	r1, [r7, #16]
 80117be:	6878      	ldr	r0, [r7, #4]
 80117c0:	f7ff fed0 	bl	8011564 <tcp_output_control_segment>
 80117c4:	4603      	mov	r3, r0
 80117c6:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80117c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80117cc:	4618      	mov	r0, r3
 80117ce:	371c      	adds	r7, #28
 80117d0:	46bd      	mov	sp, r7
 80117d2:	bd90      	pop	{r4, r7, pc}
 80117d4:	08016fd0 	.word	0x08016fd0
 80117d8:	080177ac 	.word	0x080177ac
 80117dc:	08017024 	.word	0x08017024

080117e0 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 80117e0:	b590      	push	{r4, r7, lr}
 80117e2:	b08b      	sub	sp, #44	; 0x2c
 80117e4:	af00      	add	r7, sp, #0
 80117e6:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80117e8:	2300      	movs	r3, #0
 80117ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 80117ee:	687b      	ldr	r3, [r7, #4]
 80117f0:	2b00      	cmp	r3, #0
 80117f2:	d106      	bne.n	8011802 <tcp_zero_window_probe+0x22>
 80117f4:	4b4c      	ldr	r3, [pc, #304]	; (8011928 <tcp_zero_window_probe+0x148>)
 80117f6:	f640 024f 	movw	r2, #2127	; 0x84f
 80117fa:	494c      	ldr	r1, [pc, #304]	; (801192c <tcp_zero_window_probe+0x14c>)
 80117fc:	484c      	ldr	r0, [pc, #304]	; (8011930 <tcp_zero_window_probe+0x150>)
 80117fe:	f002 fea1 	bl	8014544 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8011802:	687b      	ldr	r3, [r7, #4]
 8011804:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011806:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8011808:	6a3b      	ldr	r3, [r7, #32]
 801180a:	2b00      	cmp	r3, #0
 801180c:	d101      	bne.n	8011812 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801180e:	2300      	movs	r3, #0
 8011810:	e086      	b.n	8011920 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8011812:	687b      	ldr	r3, [r7, #4]
 8011814:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8011818:	2bff      	cmp	r3, #255	; 0xff
 801181a:	d007      	beq.n	801182c <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 801181c:	687b      	ldr	r3, [r7, #4]
 801181e:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8011822:	3301      	adds	r3, #1
 8011824:	b2da      	uxtb	r2, r3
 8011826:	687b      	ldr	r3, [r7, #4]
 8011828:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 801182c:	6a3b      	ldr	r3, [r7, #32]
 801182e:	68db      	ldr	r3, [r3, #12]
 8011830:	899b      	ldrh	r3, [r3, #12]
 8011832:	b29b      	uxth	r3, r3
 8011834:	4618      	mov	r0, r3
 8011836:	f7f9 fa28 	bl	800ac8a <lwip_htons>
 801183a:	4603      	mov	r3, r0
 801183c:	b2db      	uxtb	r3, r3
 801183e:	f003 0301 	and.w	r3, r3, #1
 8011842:	2b00      	cmp	r3, #0
 8011844:	d005      	beq.n	8011852 <tcp_zero_window_probe+0x72>
 8011846:	6a3b      	ldr	r3, [r7, #32]
 8011848:	891b      	ldrh	r3, [r3, #8]
 801184a:	2b00      	cmp	r3, #0
 801184c:	d101      	bne.n	8011852 <tcp_zero_window_probe+0x72>
 801184e:	2301      	movs	r3, #1
 8011850:	e000      	b.n	8011854 <tcp_zero_window_probe+0x74>
 8011852:	2300      	movs	r3, #0
 8011854:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8011856:	7ffb      	ldrb	r3, [r7, #31]
 8011858:	2b00      	cmp	r3, #0
 801185a:	bf0c      	ite	eq
 801185c:	2301      	moveq	r3, #1
 801185e:	2300      	movne	r3, #0
 8011860:	b2db      	uxtb	r3, r3
 8011862:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8011864:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011868:	b299      	uxth	r1, r3
 801186a:	6a3b      	ldr	r3, [r7, #32]
 801186c:	68db      	ldr	r3, [r3, #12]
 801186e:	685b      	ldr	r3, [r3, #4]
 8011870:	8bba      	ldrh	r2, [r7, #28]
 8011872:	6878      	ldr	r0, [r7, #4]
 8011874:	f7ff fdf8 	bl	8011468 <tcp_output_alloc_header>
 8011878:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801187a:	69bb      	ldr	r3, [r7, #24]
 801187c:	2b00      	cmp	r3, #0
 801187e:	d102      	bne.n	8011886 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8011880:	f04f 33ff 	mov.w	r3, #4294967295
 8011884:	e04c      	b.n	8011920 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8011886:	69bb      	ldr	r3, [r7, #24]
 8011888:	685b      	ldr	r3, [r3, #4]
 801188a:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 801188c:	7ffb      	ldrb	r3, [r7, #31]
 801188e:	2b00      	cmp	r3, #0
 8011890:	d011      	beq.n	80118b6 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8011892:	697b      	ldr	r3, [r7, #20]
 8011894:	899b      	ldrh	r3, [r3, #12]
 8011896:	b29b      	uxth	r3, r3
 8011898:	b21b      	sxth	r3, r3
 801189a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801189e:	b21c      	sxth	r4, r3
 80118a0:	2011      	movs	r0, #17
 80118a2:	f7f9 f9f2 	bl	800ac8a <lwip_htons>
 80118a6:	4603      	mov	r3, r0
 80118a8:	b21b      	sxth	r3, r3
 80118aa:	4323      	orrs	r3, r4
 80118ac:	b21b      	sxth	r3, r3
 80118ae:	b29a      	uxth	r2, r3
 80118b0:	697b      	ldr	r3, [r7, #20]
 80118b2:	819a      	strh	r2, [r3, #12]
 80118b4:	e010      	b.n	80118d8 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 80118b6:	69bb      	ldr	r3, [r7, #24]
 80118b8:	685b      	ldr	r3, [r3, #4]
 80118ba:	3314      	adds	r3, #20
 80118bc:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 80118be:	6a3b      	ldr	r3, [r7, #32]
 80118c0:	6858      	ldr	r0, [r3, #4]
 80118c2:	6a3b      	ldr	r3, [r7, #32]
 80118c4:	685b      	ldr	r3, [r3, #4]
 80118c6:	891a      	ldrh	r2, [r3, #8]
 80118c8:	6a3b      	ldr	r3, [r7, #32]
 80118ca:	891b      	ldrh	r3, [r3, #8]
 80118cc:	1ad3      	subs	r3, r2, r3
 80118ce:	b29b      	uxth	r3, r3
 80118d0:	2201      	movs	r2, #1
 80118d2:	6939      	ldr	r1, [r7, #16]
 80118d4:	f7fa fe56 	bl	800c584 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 80118d8:	6a3b      	ldr	r3, [r7, #32]
 80118da:	68db      	ldr	r3, [r3, #12]
 80118dc:	685b      	ldr	r3, [r3, #4]
 80118de:	4618      	mov	r0, r3
 80118e0:	f7f9 f9e8 	bl	800acb4 <lwip_htonl>
 80118e4:	4603      	mov	r3, r0
 80118e6:	3301      	adds	r3, #1
 80118e8:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80118ea:	687b      	ldr	r3, [r7, #4]
 80118ec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80118ee:	68fb      	ldr	r3, [r7, #12]
 80118f0:	1ad3      	subs	r3, r2, r3
 80118f2:	2b00      	cmp	r3, #0
 80118f4:	da02      	bge.n	80118fc <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 80118f6:	687b      	ldr	r3, [r7, #4]
 80118f8:	68fa      	ldr	r2, [r7, #12]
 80118fa:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80118fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011900:	2200      	movs	r2, #0
 8011902:	69b9      	ldr	r1, [r7, #24]
 8011904:	6878      	ldr	r0, [r7, #4]
 8011906:	f7ff fded 	bl	80114e4 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801190a:	687a      	ldr	r2, [r7, #4]
 801190c:	687b      	ldr	r3, [r7, #4]
 801190e:	3304      	adds	r3, #4
 8011910:	69b9      	ldr	r1, [r7, #24]
 8011912:	6878      	ldr	r0, [r7, #4]
 8011914:	f7ff fe26 	bl	8011564 <tcp_output_control_segment>
 8011918:	4603      	mov	r3, r0
 801191a:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801191c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8011920:	4618      	mov	r0, r3
 8011922:	372c      	adds	r7, #44	; 0x2c
 8011924:	46bd      	mov	sp, r7
 8011926:	bd90      	pop	{r4, r7, pc}
 8011928:	08016fd0 	.word	0x08016fd0
 801192c:	080177c8 	.word	0x080177c8
 8011930:	08017024 	.word	0x08017024

08011934 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8011934:	b580      	push	{r7, lr}
 8011936:	b082      	sub	sp, #8
 8011938:	af00      	add	r7, sp, #0
 801193a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 801193c:	f7fa ff10 	bl	800c760 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8011940:	4b0a      	ldr	r3, [pc, #40]	; (801196c <tcpip_tcp_timer+0x38>)
 8011942:	681b      	ldr	r3, [r3, #0]
 8011944:	2b00      	cmp	r3, #0
 8011946:	d103      	bne.n	8011950 <tcpip_tcp_timer+0x1c>
 8011948:	4b09      	ldr	r3, [pc, #36]	; (8011970 <tcpip_tcp_timer+0x3c>)
 801194a:	681b      	ldr	r3, [r3, #0]
 801194c:	2b00      	cmp	r3, #0
 801194e:	d005      	beq.n	801195c <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8011950:	2200      	movs	r2, #0
 8011952:	4908      	ldr	r1, [pc, #32]	; (8011974 <tcpip_tcp_timer+0x40>)
 8011954:	20fa      	movs	r0, #250	; 0xfa
 8011956:	f000 f8f3 	bl	8011b40 <sys_timeout>
 801195a:	e003      	b.n	8011964 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 801195c:	4b06      	ldr	r3, [pc, #24]	; (8011978 <tcpip_tcp_timer+0x44>)
 801195e:	2200      	movs	r2, #0
 8011960:	601a      	str	r2, [r3, #0]
  }
}
 8011962:	bf00      	nop
 8011964:	bf00      	nop
 8011966:	3708      	adds	r7, #8
 8011968:	46bd      	mov	sp, r7
 801196a:	bd80      	pop	{r7, pc}
 801196c:	200072a0 	.word	0x200072a0
 8011970:	200072b0 	.word	0x200072b0
 8011974:	08011935 	.word	0x08011935
 8011978:	20000124 	.word	0x20000124

0801197c <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 801197c:	b580      	push	{r7, lr}
 801197e:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8011980:	4b0a      	ldr	r3, [pc, #40]	; (80119ac <tcp_timer_needed+0x30>)
 8011982:	681b      	ldr	r3, [r3, #0]
 8011984:	2b00      	cmp	r3, #0
 8011986:	d10f      	bne.n	80119a8 <tcp_timer_needed+0x2c>
 8011988:	4b09      	ldr	r3, [pc, #36]	; (80119b0 <tcp_timer_needed+0x34>)
 801198a:	681b      	ldr	r3, [r3, #0]
 801198c:	2b00      	cmp	r3, #0
 801198e:	d103      	bne.n	8011998 <tcp_timer_needed+0x1c>
 8011990:	4b08      	ldr	r3, [pc, #32]	; (80119b4 <tcp_timer_needed+0x38>)
 8011992:	681b      	ldr	r3, [r3, #0]
 8011994:	2b00      	cmp	r3, #0
 8011996:	d007      	beq.n	80119a8 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8011998:	4b04      	ldr	r3, [pc, #16]	; (80119ac <tcp_timer_needed+0x30>)
 801199a:	2201      	movs	r2, #1
 801199c:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801199e:	2200      	movs	r2, #0
 80119a0:	4905      	ldr	r1, [pc, #20]	; (80119b8 <tcp_timer_needed+0x3c>)
 80119a2:	20fa      	movs	r0, #250	; 0xfa
 80119a4:	f000 f8cc 	bl	8011b40 <sys_timeout>
  }
}
 80119a8:	bf00      	nop
 80119aa:	bd80      	pop	{r7, pc}
 80119ac:	20000124 	.word	0x20000124
 80119b0:	200072a0 	.word	0x200072a0
 80119b4:	200072b0 	.word	0x200072b0
 80119b8:	08011935 	.word	0x08011935

080119bc <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 80119bc:	b580      	push	{r7, lr}
 80119be:	b086      	sub	sp, #24
 80119c0:	af00      	add	r7, sp, #0
 80119c2:	60f8      	str	r0, [r7, #12]
 80119c4:	60b9      	str	r1, [r7, #8]
 80119c6:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 80119c8:	2006      	movs	r0, #6
 80119ca:	f7f9 fdb3 	bl	800b534 <memp_malloc>
 80119ce:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 80119d0:	693b      	ldr	r3, [r7, #16]
 80119d2:	2b00      	cmp	r3, #0
 80119d4:	d109      	bne.n	80119ea <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 80119d6:	693b      	ldr	r3, [r7, #16]
 80119d8:	2b00      	cmp	r3, #0
 80119da:	d151      	bne.n	8011a80 <sys_timeout_abs+0xc4>
 80119dc:	4b2a      	ldr	r3, [pc, #168]	; (8011a88 <sys_timeout_abs+0xcc>)
 80119de:	22be      	movs	r2, #190	; 0xbe
 80119e0:	492a      	ldr	r1, [pc, #168]	; (8011a8c <sys_timeout_abs+0xd0>)
 80119e2:	482b      	ldr	r0, [pc, #172]	; (8011a90 <sys_timeout_abs+0xd4>)
 80119e4:	f002 fdae 	bl	8014544 <iprintf>
    return;
 80119e8:	e04a      	b.n	8011a80 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 80119ea:	693b      	ldr	r3, [r7, #16]
 80119ec:	2200      	movs	r2, #0
 80119ee:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 80119f0:	693b      	ldr	r3, [r7, #16]
 80119f2:	68ba      	ldr	r2, [r7, #8]
 80119f4:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 80119f6:	693b      	ldr	r3, [r7, #16]
 80119f8:	687a      	ldr	r2, [r7, #4]
 80119fa:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 80119fc:	693b      	ldr	r3, [r7, #16]
 80119fe:	68fa      	ldr	r2, [r7, #12]
 8011a00:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8011a02:	4b24      	ldr	r3, [pc, #144]	; (8011a94 <sys_timeout_abs+0xd8>)
 8011a04:	681b      	ldr	r3, [r3, #0]
 8011a06:	2b00      	cmp	r3, #0
 8011a08:	d103      	bne.n	8011a12 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8011a0a:	4a22      	ldr	r2, [pc, #136]	; (8011a94 <sys_timeout_abs+0xd8>)
 8011a0c:	693b      	ldr	r3, [r7, #16]
 8011a0e:	6013      	str	r3, [r2, #0]
    return;
 8011a10:	e037      	b.n	8011a82 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8011a12:	693b      	ldr	r3, [r7, #16]
 8011a14:	685a      	ldr	r2, [r3, #4]
 8011a16:	4b1f      	ldr	r3, [pc, #124]	; (8011a94 <sys_timeout_abs+0xd8>)
 8011a18:	681b      	ldr	r3, [r3, #0]
 8011a1a:	685b      	ldr	r3, [r3, #4]
 8011a1c:	1ad3      	subs	r3, r2, r3
 8011a1e:	0fdb      	lsrs	r3, r3, #31
 8011a20:	f003 0301 	and.w	r3, r3, #1
 8011a24:	b2db      	uxtb	r3, r3
 8011a26:	2b00      	cmp	r3, #0
 8011a28:	d007      	beq.n	8011a3a <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8011a2a:	4b1a      	ldr	r3, [pc, #104]	; (8011a94 <sys_timeout_abs+0xd8>)
 8011a2c:	681a      	ldr	r2, [r3, #0]
 8011a2e:	693b      	ldr	r3, [r7, #16]
 8011a30:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8011a32:	4a18      	ldr	r2, [pc, #96]	; (8011a94 <sys_timeout_abs+0xd8>)
 8011a34:	693b      	ldr	r3, [r7, #16]
 8011a36:	6013      	str	r3, [r2, #0]
 8011a38:	e023      	b.n	8011a82 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8011a3a:	4b16      	ldr	r3, [pc, #88]	; (8011a94 <sys_timeout_abs+0xd8>)
 8011a3c:	681b      	ldr	r3, [r3, #0]
 8011a3e:	617b      	str	r3, [r7, #20]
 8011a40:	e01a      	b.n	8011a78 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8011a42:	697b      	ldr	r3, [r7, #20]
 8011a44:	681b      	ldr	r3, [r3, #0]
 8011a46:	2b00      	cmp	r3, #0
 8011a48:	d00b      	beq.n	8011a62 <sys_timeout_abs+0xa6>
 8011a4a:	693b      	ldr	r3, [r7, #16]
 8011a4c:	685a      	ldr	r2, [r3, #4]
 8011a4e:	697b      	ldr	r3, [r7, #20]
 8011a50:	681b      	ldr	r3, [r3, #0]
 8011a52:	685b      	ldr	r3, [r3, #4]
 8011a54:	1ad3      	subs	r3, r2, r3
 8011a56:	0fdb      	lsrs	r3, r3, #31
 8011a58:	f003 0301 	and.w	r3, r3, #1
 8011a5c:	b2db      	uxtb	r3, r3
 8011a5e:	2b00      	cmp	r3, #0
 8011a60:	d007      	beq.n	8011a72 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8011a62:	697b      	ldr	r3, [r7, #20]
 8011a64:	681a      	ldr	r2, [r3, #0]
 8011a66:	693b      	ldr	r3, [r7, #16]
 8011a68:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8011a6a:	697b      	ldr	r3, [r7, #20]
 8011a6c:	693a      	ldr	r2, [r7, #16]
 8011a6e:	601a      	str	r2, [r3, #0]
        break;
 8011a70:	e007      	b.n	8011a82 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8011a72:	697b      	ldr	r3, [r7, #20]
 8011a74:	681b      	ldr	r3, [r3, #0]
 8011a76:	617b      	str	r3, [r7, #20]
 8011a78:	697b      	ldr	r3, [r7, #20]
 8011a7a:	2b00      	cmp	r3, #0
 8011a7c:	d1e1      	bne.n	8011a42 <sys_timeout_abs+0x86>
 8011a7e:	e000      	b.n	8011a82 <sys_timeout_abs+0xc6>
    return;
 8011a80:	bf00      	nop
      }
    }
  }
}
 8011a82:	3718      	adds	r7, #24
 8011a84:	46bd      	mov	sp, r7
 8011a86:	bd80      	pop	{r7, pc}
 8011a88:	080177ec 	.word	0x080177ec
 8011a8c:	08017820 	.word	0x08017820
 8011a90:	08017860 	.word	0x08017860
 8011a94:	2000011c 	.word	0x2000011c

08011a98 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8011a98:	b580      	push	{r7, lr}
 8011a9a:	b086      	sub	sp, #24
 8011a9c:	af00      	add	r7, sp, #0
 8011a9e:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8011aa0:	687b      	ldr	r3, [r7, #4]
 8011aa2:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8011aa4:	697b      	ldr	r3, [r7, #20]
 8011aa6:	685b      	ldr	r3, [r3, #4]
 8011aa8:	4798      	blx	r3

  now = sys_now();
 8011aaa:	f7f9 f805 	bl	800aab8 <sys_now>
 8011aae:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8011ab0:	697b      	ldr	r3, [r7, #20]
 8011ab2:	681a      	ldr	r2, [r3, #0]
 8011ab4:	4b0f      	ldr	r3, [pc, #60]	; (8011af4 <lwip_cyclic_timer+0x5c>)
 8011ab6:	681b      	ldr	r3, [r3, #0]
 8011ab8:	4413      	add	r3, r2
 8011aba:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8011abc:	68fa      	ldr	r2, [r7, #12]
 8011abe:	693b      	ldr	r3, [r7, #16]
 8011ac0:	1ad3      	subs	r3, r2, r3
 8011ac2:	0fdb      	lsrs	r3, r3, #31
 8011ac4:	f003 0301 	and.w	r3, r3, #1
 8011ac8:	b2db      	uxtb	r3, r3
 8011aca:	2b00      	cmp	r3, #0
 8011acc:	d009      	beq.n	8011ae2 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8011ace:	697b      	ldr	r3, [r7, #20]
 8011ad0:	681a      	ldr	r2, [r3, #0]
 8011ad2:	693b      	ldr	r3, [r7, #16]
 8011ad4:	4413      	add	r3, r2
 8011ad6:	687a      	ldr	r2, [r7, #4]
 8011ad8:	4907      	ldr	r1, [pc, #28]	; (8011af8 <lwip_cyclic_timer+0x60>)
 8011ada:	4618      	mov	r0, r3
 8011adc:	f7ff ff6e 	bl	80119bc <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8011ae0:	e004      	b.n	8011aec <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8011ae2:	687a      	ldr	r2, [r7, #4]
 8011ae4:	4904      	ldr	r1, [pc, #16]	; (8011af8 <lwip_cyclic_timer+0x60>)
 8011ae6:	68f8      	ldr	r0, [r7, #12]
 8011ae8:	f7ff ff68 	bl	80119bc <sys_timeout_abs>
}
 8011aec:	bf00      	nop
 8011aee:	3718      	adds	r7, #24
 8011af0:	46bd      	mov	sp, r7
 8011af2:	bd80      	pop	{r7, pc}
 8011af4:	20000120 	.word	0x20000120
 8011af8:	08011a99 	.word	0x08011a99

08011afc <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8011afc:	b580      	push	{r7, lr}
 8011afe:	b082      	sub	sp, #8
 8011b00:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8011b02:	2301      	movs	r3, #1
 8011b04:	607b      	str	r3, [r7, #4]
 8011b06:	e00e      	b.n	8011b26 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8011b08:	4a0b      	ldr	r2, [pc, #44]	; (8011b38 <sys_timeouts_init+0x3c>)
 8011b0a:	687b      	ldr	r3, [r7, #4]
 8011b0c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8011b10:	687b      	ldr	r3, [r7, #4]
 8011b12:	00db      	lsls	r3, r3, #3
 8011b14:	4a08      	ldr	r2, [pc, #32]	; (8011b38 <sys_timeouts_init+0x3c>)
 8011b16:	4413      	add	r3, r2
 8011b18:	461a      	mov	r2, r3
 8011b1a:	4908      	ldr	r1, [pc, #32]	; (8011b3c <sys_timeouts_init+0x40>)
 8011b1c:	f000 f810 	bl	8011b40 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8011b20:	687b      	ldr	r3, [r7, #4]
 8011b22:	3301      	adds	r3, #1
 8011b24:	607b      	str	r3, [r7, #4]
 8011b26:	687b      	ldr	r3, [r7, #4]
 8011b28:	2b02      	cmp	r3, #2
 8011b2a:	d9ed      	bls.n	8011b08 <sys_timeouts_init+0xc>
  }
}
 8011b2c:	bf00      	nop
 8011b2e:	bf00      	nop
 8011b30:	3708      	adds	r7, #8
 8011b32:	46bd      	mov	sp, r7
 8011b34:	bd80      	pop	{r7, pc}
 8011b36:	bf00      	nop
 8011b38:	080183e8 	.word	0x080183e8
 8011b3c:	08011a99 	.word	0x08011a99

08011b40 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8011b40:	b580      	push	{r7, lr}
 8011b42:	b086      	sub	sp, #24
 8011b44:	af00      	add	r7, sp, #0
 8011b46:	60f8      	str	r0, [r7, #12]
 8011b48:	60b9      	str	r1, [r7, #8]
 8011b4a:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8011b4c:	68fb      	ldr	r3, [r7, #12]
 8011b4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011b52:	d306      	bcc.n	8011b62 <sys_timeout+0x22>
 8011b54:	4b0a      	ldr	r3, [pc, #40]	; (8011b80 <sys_timeout+0x40>)
 8011b56:	f240 1229 	movw	r2, #297	; 0x129
 8011b5a:	490a      	ldr	r1, [pc, #40]	; (8011b84 <sys_timeout+0x44>)
 8011b5c:	480a      	ldr	r0, [pc, #40]	; (8011b88 <sys_timeout+0x48>)
 8011b5e:	f002 fcf1 	bl	8014544 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8011b62:	f7f8 ffa9 	bl	800aab8 <sys_now>
 8011b66:	4602      	mov	r2, r0
 8011b68:	68fb      	ldr	r3, [r7, #12]
 8011b6a:	4413      	add	r3, r2
 8011b6c:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8011b6e:	687a      	ldr	r2, [r7, #4]
 8011b70:	68b9      	ldr	r1, [r7, #8]
 8011b72:	6978      	ldr	r0, [r7, #20]
 8011b74:	f7ff ff22 	bl	80119bc <sys_timeout_abs>
#endif
}
 8011b78:	bf00      	nop
 8011b7a:	3718      	adds	r7, #24
 8011b7c:	46bd      	mov	sp, r7
 8011b7e:	bd80      	pop	{r7, pc}
 8011b80:	080177ec 	.word	0x080177ec
 8011b84:	08017888 	.word	0x08017888
 8011b88:	08017860 	.word	0x08017860

08011b8c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8011b8c:	b580      	push	{r7, lr}
 8011b8e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8011b90:	f002 fcf0 	bl	8014574 <rand>
 8011b94:	4603      	mov	r3, r0
 8011b96:	b29b      	uxth	r3, r3
 8011b98:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8011b9c:	b29b      	uxth	r3, r3
 8011b9e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8011ba2:	b29a      	uxth	r2, r3
 8011ba4:	4b01      	ldr	r3, [pc, #4]	; (8011bac <udp_init+0x20>)
 8011ba6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8011ba8:	bf00      	nop
 8011baa:	bd80      	pop	{r7, pc}
 8011bac:	20000010 	.word	0x20000010

08011bb0 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8011bb0:	b580      	push	{r7, lr}
 8011bb2:	b084      	sub	sp, #16
 8011bb4:	af00      	add	r7, sp, #0
 8011bb6:	60f8      	str	r0, [r7, #12]
 8011bb8:	60b9      	str	r1, [r7, #8]
 8011bba:	4613      	mov	r3, r2
 8011bbc:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8011bbe:	68fb      	ldr	r3, [r7, #12]
 8011bc0:	2b00      	cmp	r3, #0
 8011bc2:	d105      	bne.n	8011bd0 <udp_input_local_match+0x20>
 8011bc4:	4b27      	ldr	r3, [pc, #156]	; (8011c64 <udp_input_local_match+0xb4>)
 8011bc6:	2287      	movs	r2, #135	; 0x87
 8011bc8:	4927      	ldr	r1, [pc, #156]	; (8011c68 <udp_input_local_match+0xb8>)
 8011bca:	4828      	ldr	r0, [pc, #160]	; (8011c6c <udp_input_local_match+0xbc>)
 8011bcc:	f002 fcba 	bl	8014544 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8011bd0:	68bb      	ldr	r3, [r7, #8]
 8011bd2:	2b00      	cmp	r3, #0
 8011bd4:	d105      	bne.n	8011be2 <udp_input_local_match+0x32>
 8011bd6:	4b23      	ldr	r3, [pc, #140]	; (8011c64 <udp_input_local_match+0xb4>)
 8011bd8:	2288      	movs	r2, #136	; 0x88
 8011bda:	4925      	ldr	r1, [pc, #148]	; (8011c70 <udp_input_local_match+0xc0>)
 8011bdc:	4823      	ldr	r0, [pc, #140]	; (8011c6c <udp_input_local_match+0xbc>)
 8011bde:	f002 fcb1 	bl	8014544 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8011be2:	68fb      	ldr	r3, [r7, #12]
 8011be4:	7a1b      	ldrb	r3, [r3, #8]
 8011be6:	2b00      	cmp	r3, #0
 8011be8:	d00b      	beq.n	8011c02 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8011bea:	68fb      	ldr	r3, [r7, #12]
 8011bec:	7a1a      	ldrb	r2, [r3, #8]
 8011bee:	4b21      	ldr	r3, [pc, #132]	; (8011c74 <udp_input_local_match+0xc4>)
 8011bf0:	685b      	ldr	r3, [r3, #4]
 8011bf2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011bf6:	3301      	adds	r3, #1
 8011bf8:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8011bfa:	429a      	cmp	r2, r3
 8011bfc:	d001      	beq.n	8011c02 <udp_input_local_match+0x52>
    return 0;
 8011bfe:	2300      	movs	r3, #0
 8011c00:	e02b      	b.n	8011c5a <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8011c02:	79fb      	ldrb	r3, [r7, #7]
 8011c04:	2b00      	cmp	r3, #0
 8011c06:	d018      	beq.n	8011c3a <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8011c08:	68fb      	ldr	r3, [r7, #12]
 8011c0a:	2b00      	cmp	r3, #0
 8011c0c:	d013      	beq.n	8011c36 <udp_input_local_match+0x86>
 8011c0e:	68fb      	ldr	r3, [r7, #12]
 8011c10:	681b      	ldr	r3, [r3, #0]
 8011c12:	2b00      	cmp	r3, #0
 8011c14:	d00f      	beq.n	8011c36 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8011c16:	4b17      	ldr	r3, [pc, #92]	; (8011c74 <udp_input_local_match+0xc4>)
 8011c18:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8011c1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011c1e:	d00a      	beq.n	8011c36 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8011c20:	68fb      	ldr	r3, [r7, #12]
 8011c22:	681a      	ldr	r2, [r3, #0]
 8011c24:	4b13      	ldr	r3, [pc, #76]	; (8011c74 <udp_input_local_match+0xc4>)
 8011c26:	695b      	ldr	r3, [r3, #20]
 8011c28:	405a      	eors	r2, r3
 8011c2a:	68bb      	ldr	r3, [r7, #8]
 8011c2c:	3308      	adds	r3, #8
 8011c2e:	681b      	ldr	r3, [r3, #0]
 8011c30:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8011c32:	2b00      	cmp	r3, #0
 8011c34:	d110      	bne.n	8011c58 <udp_input_local_match+0xa8>
          return 1;
 8011c36:	2301      	movs	r3, #1
 8011c38:	e00f      	b.n	8011c5a <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8011c3a:	68fb      	ldr	r3, [r7, #12]
 8011c3c:	2b00      	cmp	r3, #0
 8011c3e:	d009      	beq.n	8011c54 <udp_input_local_match+0xa4>
 8011c40:	68fb      	ldr	r3, [r7, #12]
 8011c42:	681b      	ldr	r3, [r3, #0]
 8011c44:	2b00      	cmp	r3, #0
 8011c46:	d005      	beq.n	8011c54 <udp_input_local_match+0xa4>
 8011c48:	68fb      	ldr	r3, [r7, #12]
 8011c4a:	681a      	ldr	r2, [r3, #0]
 8011c4c:	4b09      	ldr	r3, [pc, #36]	; (8011c74 <udp_input_local_match+0xc4>)
 8011c4e:	695b      	ldr	r3, [r3, #20]
 8011c50:	429a      	cmp	r2, r3
 8011c52:	d101      	bne.n	8011c58 <udp_input_local_match+0xa8>
        return 1;
 8011c54:	2301      	movs	r3, #1
 8011c56:	e000      	b.n	8011c5a <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8011c58:	2300      	movs	r3, #0
}
 8011c5a:	4618      	mov	r0, r3
 8011c5c:	3710      	adds	r7, #16
 8011c5e:	46bd      	mov	sp, r7
 8011c60:	bd80      	pop	{r7, pc}
 8011c62:	bf00      	nop
 8011c64:	080178d4 	.word	0x080178d4
 8011c68:	08017904 	.word	0x08017904
 8011c6c:	08017928 	.word	0x08017928
 8011c70:	08017950 	.word	0x08017950
 8011c74:	20003d5c 	.word	0x20003d5c

08011c78 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8011c78:	b590      	push	{r4, r7, lr}
 8011c7a:	b08d      	sub	sp, #52	; 0x34
 8011c7c:	af02      	add	r7, sp, #8
 8011c7e:	6078      	str	r0, [r7, #4]
 8011c80:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8011c82:	2300      	movs	r3, #0
 8011c84:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8011c86:	687b      	ldr	r3, [r7, #4]
 8011c88:	2b00      	cmp	r3, #0
 8011c8a:	d105      	bne.n	8011c98 <udp_input+0x20>
 8011c8c:	4b7c      	ldr	r3, [pc, #496]	; (8011e80 <udp_input+0x208>)
 8011c8e:	22cf      	movs	r2, #207	; 0xcf
 8011c90:	497c      	ldr	r1, [pc, #496]	; (8011e84 <udp_input+0x20c>)
 8011c92:	487d      	ldr	r0, [pc, #500]	; (8011e88 <udp_input+0x210>)
 8011c94:	f002 fc56 	bl	8014544 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8011c98:	683b      	ldr	r3, [r7, #0]
 8011c9a:	2b00      	cmp	r3, #0
 8011c9c:	d105      	bne.n	8011caa <udp_input+0x32>
 8011c9e:	4b78      	ldr	r3, [pc, #480]	; (8011e80 <udp_input+0x208>)
 8011ca0:	22d0      	movs	r2, #208	; 0xd0
 8011ca2:	497a      	ldr	r1, [pc, #488]	; (8011e8c <udp_input+0x214>)
 8011ca4:	4878      	ldr	r0, [pc, #480]	; (8011e88 <udp_input+0x210>)
 8011ca6:	f002 fc4d 	bl	8014544 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8011caa:	687b      	ldr	r3, [r7, #4]
 8011cac:	895b      	ldrh	r3, [r3, #10]
 8011cae:	2b07      	cmp	r3, #7
 8011cb0:	d803      	bhi.n	8011cba <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8011cb2:	6878      	ldr	r0, [r7, #4]
 8011cb4:	f7fa fa7c 	bl	800c1b0 <pbuf_free>
    goto end;
 8011cb8:	e0de      	b.n	8011e78 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8011cba:	687b      	ldr	r3, [r7, #4]
 8011cbc:	685b      	ldr	r3, [r3, #4]
 8011cbe:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8011cc0:	4b73      	ldr	r3, [pc, #460]	; (8011e90 <udp_input+0x218>)
 8011cc2:	695b      	ldr	r3, [r3, #20]
 8011cc4:	4a72      	ldr	r2, [pc, #456]	; (8011e90 <udp_input+0x218>)
 8011cc6:	6812      	ldr	r2, [r2, #0]
 8011cc8:	4611      	mov	r1, r2
 8011cca:	4618      	mov	r0, r3
 8011ccc:	f001 fc88 	bl	80135e0 <ip4_addr_isbroadcast_u32>
 8011cd0:	4603      	mov	r3, r0
 8011cd2:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8011cd4:	697b      	ldr	r3, [r7, #20]
 8011cd6:	881b      	ldrh	r3, [r3, #0]
 8011cd8:	b29b      	uxth	r3, r3
 8011cda:	4618      	mov	r0, r3
 8011cdc:	f7f8 ffd5 	bl	800ac8a <lwip_htons>
 8011ce0:	4603      	mov	r3, r0
 8011ce2:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8011ce4:	697b      	ldr	r3, [r7, #20]
 8011ce6:	885b      	ldrh	r3, [r3, #2]
 8011ce8:	b29b      	uxth	r3, r3
 8011cea:	4618      	mov	r0, r3
 8011cec:	f7f8 ffcd 	bl	800ac8a <lwip_htons>
 8011cf0:	4603      	mov	r3, r0
 8011cf2:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8011cf4:	2300      	movs	r3, #0
 8011cf6:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8011cf8:	2300      	movs	r3, #0
 8011cfa:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8011cfc:	2300      	movs	r3, #0
 8011cfe:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8011d00:	4b64      	ldr	r3, [pc, #400]	; (8011e94 <udp_input+0x21c>)
 8011d02:	681b      	ldr	r3, [r3, #0]
 8011d04:	627b      	str	r3, [r7, #36]	; 0x24
 8011d06:	e054      	b.n	8011db2 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8011d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d0a:	8a5b      	ldrh	r3, [r3, #18]
 8011d0c:	89fa      	ldrh	r2, [r7, #14]
 8011d0e:	429a      	cmp	r2, r3
 8011d10:	d14a      	bne.n	8011da8 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8011d12:	7cfb      	ldrb	r3, [r7, #19]
 8011d14:	461a      	mov	r2, r3
 8011d16:	6839      	ldr	r1, [r7, #0]
 8011d18:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011d1a:	f7ff ff49 	bl	8011bb0 <udp_input_local_match>
 8011d1e:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8011d20:	2b00      	cmp	r3, #0
 8011d22:	d041      	beq.n	8011da8 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8011d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d26:	7c1b      	ldrb	r3, [r3, #16]
 8011d28:	f003 0304 	and.w	r3, r3, #4
 8011d2c:	2b00      	cmp	r3, #0
 8011d2e:	d11d      	bne.n	8011d6c <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8011d30:	69fb      	ldr	r3, [r7, #28]
 8011d32:	2b00      	cmp	r3, #0
 8011d34:	d102      	bne.n	8011d3c <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8011d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d38:	61fb      	str	r3, [r7, #28]
 8011d3a:	e017      	b.n	8011d6c <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8011d3c:	7cfb      	ldrb	r3, [r7, #19]
 8011d3e:	2b00      	cmp	r3, #0
 8011d40:	d014      	beq.n	8011d6c <udp_input+0xf4>
 8011d42:	4b53      	ldr	r3, [pc, #332]	; (8011e90 <udp_input+0x218>)
 8011d44:	695b      	ldr	r3, [r3, #20]
 8011d46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011d4a:	d10f      	bne.n	8011d6c <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8011d4c:	69fb      	ldr	r3, [r7, #28]
 8011d4e:	681a      	ldr	r2, [r3, #0]
 8011d50:	683b      	ldr	r3, [r7, #0]
 8011d52:	3304      	adds	r3, #4
 8011d54:	681b      	ldr	r3, [r3, #0]
 8011d56:	429a      	cmp	r2, r3
 8011d58:	d008      	beq.n	8011d6c <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8011d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d5c:	681a      	ldr	r2, [r3, #0]
 8011d5e:	683b      	ldr	r3, [r7, #0]
 8011d60:	3304      	adds	r3, #4
 8011d62:	681b      	ldr	r3, [r3, #0]
 8011d64:	429a      	cmp	r2, r3
 8011d66:	d101      	bne.n	8011d6c <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8011d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d6a:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8011d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d6e:	8a9b      	ldrh	r3, [r3, #20]
 8011d70:	8a3a      	ldrh	r2, [r7, #16]
 8011d72:	429a      	cmp	r2, r3
 8011d74:	d118      	bne.n	8011da8 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8011d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d78:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8011d7a:	2b00      	cmp	r3, #0
 8011d7c:	d005      	beq.n	8011d8a <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8011d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d80:	685a      	ldr	r2, [r3, #4]
 8011d82:	4b43      	ldr	r3, [pc, #268]	; (8011e90 <udp_input+0x218>)
 8011d84:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8011d86:	429a      	cmp	r2, r3
 8011d88:	d10e      	bne.n	8011da8 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8011d8a:	6a3b      	ldr	r3, [r7, #32]
 8011d8c:	2b00      	cmp	r3, #0
 8011d8e:	d014      	beq.n	8011dba <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8011d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d92:	68da      	ldr	r2, [r3, #12]
 8011d94:	6a3b      	ldr	r3, [r7, #32]
 8011d96:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8011d98:	4b3e      	ldr	r3, [pc, #248]	; (8011e94 <udp_input+0x21c>)
 8011d9a:	681a      	ldr	r2, [r3, #0]
 8011d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d9e:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8011da0:	4a3c      	ldr	r2, [pc, #240]	; (8011e94 <udp_input+0x21c>)
 8011da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011da4:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8011da6:	e008      	b.n	8011dba <udp_input+0x142>
      }
    }

    prev = pcb;
 8011da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011daa:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8011dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011dae:	68db      	ldr	r3, [r3, #12]
 8011db0:	627b      	str	r3, [r7, #36]	; 0x24
 8011db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011db4:	2b00      	cmp	r3, #0
 8011db6:	d1a7      	bne.n	8011d08 <udp_input+0x90>
 8011db8:	e000      	b.n	8011dbc <udp_input+0x144>
        break;
 8011dba:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8011dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011dbe:	2b00      	cmp	r3, #0
 8011dc0:	d101      	bne.n	8011dc6 <udp_input+0x14e>
    pcb = uncon_pcb;
 8011dc2:	69fb      	ldr	r3, [r7, #28]
 8011dc4:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8011dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011dc8:	2b00      	cmp	r3, #0
 8011dca:	d002      	beq.n	8011dd2 <udp_input+0x15a>
    for_us = 1;
 8011dcc:	2301      	movs	r3, #1
 8011dce:	76fb      	strb	r3, [r7, #27]
 8011dd0:	e00a      	b.n	8011de8 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8011dd2:	683b      	ldr	r3, [r7, #0]
 8011dd4:	3304      	adds	r3, #4
 8011dd6:	681a      	ldr	r2, [r3, #0]
 8011dd8:	4b2d      	ldr	r3, [pc, #180]	; (8011e90 <udp_input+0x218>)
 8011dda:	695b      	ldr	r3, [r3, #20]
 8011ddc:	429a      	cmp	r2, r3
 8011dde:	bf0c      	ite	eq
 8011de0:	2301      	moveq	r3, #1
 8011de2:	2300      	movne	r3, #0
 8011de4:	b2db      	uxtb	r3, r3
 8011de6:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8011de8:	7efb      	ldrb	r3, [r7, #27]
 8011dea:	2b00      	cmp	r3, #0
 8011dec:	d041      	beq.n	8011e72 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8011dee:	2108      	movs	r1, #8
 8011df0:	6878      	ldr	r0, [r7, #4]
 8011df2:	f7fa f957 	bl	800c0a4 <pbuf_remove_header>
 8011df6:	4603      	mov	r3, r0
 8011df8:	2b00      	cmp	r3, #0
 8011dfa:	d00a      	beq.n	8011e12 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8011dfc:	4b20      	ldr	r3, [pc, #128]	; (8011e80 <udp_input+0x208>)
 8011dfe:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8011e02:	4925      	ldr	r1, [pc, #148]	; (8011e98 <udp_input+0x220>)
 8011e04:	4820      	ldr	r0, [pc, #128]	; (8011e88 <udp_input+0x210>)
 8011e06:	f002 fb9d 	bl	8014544 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8011e0a:	6878      	ldr	r0, [r7, #4]
 8011e0c:	f7fa f9d0 	bl	800c1b0 <pbuf_free>
      goto end;
 8011e10:	e032      	b.n	8011e78 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8011e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e14:	2b00      	cmp	r3, #0
 8011e16:	d012      	beq.n	8011e3e <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8011e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e1a:	699b      	ldr	r3, [r3, #24]
 8011e1c:	2b00      	cmp	r3, #0
 8011e1e:	d00a      	beq.n	8011e36 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8011e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e22:	699c      	ldr	r4, [r3, #24]
 8011e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e26:	69d8      	ldr	r0, [r3, #28]
 8011e28:	8a3b      	ldrh	r3, [r7, #16]
 8011e2a:	9300      	str	r3, [sp, #0]
 8011e2c:	4b1b      	ldr	r3, [pc, #108]	; (8011e9c <udp_input+0x224>)
 8011e2e:	687a      	ldr	r2, [r7, #4]
 8011e30:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011e32:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8011e34:	e021      	b.n	8011e7a <udp_input+0x202>
        pbuf_free(p);
 8011e36:	6878      	ldr	r0, [r7, #4]
 8011e38:	f7fa f9ba 	bl	800c1b0 <pbuf_free>
        goto end;
 8011e3c:	e01c      	b.n	8011e78 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8011e3e:	7cfb      	ldrb	r3, [r7, #19]
 8011e40:	2b00      	cmp	r3, #0
 8011e42:	d112      	bne.n	8011e6a <udp_input+0x1f2>
 8011e44:	4b12      	ldr	r3, [pc, #72]	; (8011e90 <udp_input+0x218>)
 8011e46:	695b      	ldr	r3, [r3, #20]
 8011e48:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011e4c:	2be0      	cmp	r3, #224	; 0xe0
 8011e4e:	d00c      	beq.n	8011e6a <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8011e50:	4b0f      	ldr	r3, [pc, #60]	; (8011e90 <udp_input+0x218>)
 8011e52:	899b      	ldrh	r3, [r3, #12]
 8011e54:	3308      	adds	r3, #8
 8011e56:	b29b      	uxth	r3, r3
 8011e58:	b21b      	sxth	r3, r3
 8011e5a:	4619      	mov	r1, r3
 8011e5c:	6878      	ldr	r0, [r7, #4]
 8011e5e:	f7fa f994 	bl	800c18a <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8011e62:	2103      	movs	r1, #3
 8011e64:	6878      	ldr	r0, [r7, #4]
 8011e66:	f001 f89b 	bl	8012fa0 <icmp_dest_unreach>
      pbuf_free(p);
 8011e6a:	6878      	ldr	r0, [r7, #4]
 8011e6c:	f7fa f9a0 	bl	800c1b0 <pbuf_free>
  return;
 8011e70:	e003      	b.n	8011e7a <udp_input+0x202>
    pbuf_free(p);
 8011e72:	6878      	ldr	r0, [r7, #4]
 8011e74:	f7fa f99c 	bl	800c1b0 <pbuf_free>
  return;
 8011e78:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8011e7a:	372c      	adds	r7, #44	; 0x2c
 8011e7c:	46bd      	mov	sp, r7
 8011e7e:	bd90      	pop	{r4, r7, pc}
 8011e80:	080178d4 	.word	0x080178d4
 8011e84:	08017978 	.word	0x08017978
 8011e88:	08017928 	.word	0x08017928
 8011e8c:	08017990 	.word	0x08017990
 8011e90:	20003d5c 	.word	0x20003d5c
 8011e94:	200072b8 	.word	0x200072b8
 8011e98:	080179ac 	.word	0x080179ac
 8011e9c:	20003d6c 	.word	0x20003d6c

08011ea0 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8011ea0:	b480      	push	{r7}
 8011ea2:	b085      	sub	sp, #20
 8011ea4:	af00      	add	r7, sp, #0
 8011ea6:	6078      	str	r0, [r7, #4]
 8011ea8:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8011eaa:	687b      	ldr	r3, [r7, #4]
 8011eac:	2b00      	cmp	r3, #0
 8011eae:	d01e      	beq.n	8011eee <udp_netif_ip_addr_changed+0x4e>
 8011eb0:	687b      	ldr	r3, [r7, #4]
 8011eb2:	681b      	ldr	r3, [r3, #0]
 8011eb4:	2b00      	cmp	r3, #0
 8011eb6:	d01a      	beq.n	8011eee <udp_netif_ip_addr_changed+0x4e>
 8011eb8:	683b      	ldr	r3, [r7, #0]
 8011eba:	2b00      	cmp	r3, #0
 8011ebc:	d017      	beq.n	8011eee <udp_netif_ip_addr_changed+0x4e>
 8011ebe:	683b      	ldr	r3, [r7, #0]
 8011ec0:	681b      	ldr	r3, [r3, #0]
 8011ec2:	2b00      	cmp	r3, #0
 8011ec4:	d013      	beq.n	8011eee <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8011ec6:	4b0d      	ldr	r3, [pc, #52]	; (8011efc <udp_netif_ip_addr_changed+0x5c>)
 8011ec8:	681b      	ldr	r3, [r3, #0]
 8011eca:	60fb      	str	r3, [r7, #12]
 8011ecc:	e00c      	b.n	8011ee8 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8011ece:	68fb      	ldr	r3, [r7, #12]
 8011ed0:	681a      	ldr	r2, [r3, #0]
 8011ed2:	687b      	ldr	r3, [r7, #4]
 8011ed4:	681b      	ldr	r3, [r3, #0]
 8011ed6:	429a      	cmp	r2, r3
 8011ed8:	d103      	bne.n	8011ee2 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8011eda:	683b      	ldr	r3, [r7, #0]
 8011edc:	681a      	ldr	r2, [r3, #0]
 8011ede:	68fb      	ldr	r3, [r7, #12]
 8011ee0:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8011ee2:	68fb      	ldr	r3, [r7, #12]
 8011ee4:	68db      	ldr	r3, [r3, #12]
 8011ee6:	60fb      	str	r3, [r7, #12]
 8011ee8:	68fb      	ldr	r3, [r7, #12]
 8011eea:	2b00      	cmp	r3, #0
 8011eec:	d1ef      	bne.n	8011ece <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8011eee:	bf00      	nop
 8011ef0:	3714      	adds	r7, #20
 8011ef2:	46bd      	mov	sp, r7
 8011ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ef8:	4770      	bx	lr
 8011efa:	bf00      	nop
 8011efc:	200072b8 	.word	0x200072b8

08011f00 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8011f00:	b580      	push	{r7, lr}
 8011f02:	b082      	sub	sp, #8
 8011f04:	af00      	add	r7, sp, #0
 8011f06:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8011f08:	4915      	ldr	r1, [pc, #84]	; (8011f60 <etharp_free_entry+0x60>)
 8011f0a:	687a      	ldr	r2, [r7, #4]
 8011f0c:	4613      	mov	r3, r2
 8011f0e:	005b      	lsls	r3, r3, #1
 8011f10:	4413      	add	r3, r2
 8011f12:	00db      	lsls	r3, r3, #3
 8011f14:	440b      	add	r3, r1
 8011f16:	681b      	ldr	r3, [r3, #0]
 8011f18:	2b00      	cmp	r3, #0
 8011f1a:	d013      	beq.n	8011f44 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8011f1c:	4910      	ldr	r1, [pc, #64]	; (8011f60 <etharp_free_entry+0x60>)
 8011f1e:	687a      	ldr	r2, [r7, #4]
 8011f20:	4613      	mov	r3, r2
 8011f22:	005b      	lsls	r3, r3, #1
 8011f24:	4413      	add	r3, r2
 8011f26:	00db      	lsls	r3, r3, #3
 8011f28:	440b      	add	r3, r1
 8011f2a:	681b      	ldr	r3, [r3, #0]
 8011f2c:	4618      	mov	r0, r3
 8011f2e:	f7fa f93f 	bl	800c1b0 <pbuf_free>
    arp_table[i].q = NULL;
 8011f32:	490b      	ldr	r1, [pc, #44]	; (8011f60 <etharp_free_entry+0x60>)
 8011f34:	687a      	ldr	r2, [r7, #4]
 8011f36:	4613      	mov	r3, r2
 8011f38:	005b      	lsls	r3, r3, #1
 8011f3a:	4413      	add	r3, r2
 8011f3c:	00db      	lsls	r3, r3, #3
 8011f3e:	440b      	add	r3, r1
 8011f40:	2200      	movs	r2, #0
 8011f42:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8011f44:	4906      	ldr	r1, [pc, #24]	; (8011f60 <etharp_free_entry+0x60>)
 8011f46:	687a      	ldr	r2, [r7, #4]
 8011f48:	4613      	mov	r3, r2
 8011f4a:	005b      	lsls	r3, r3, #1
 8011f4c:	4413      	add	r3, r2
 8011f4e:	00db      	lsls	r3, r3, #3
 8011f50:	440b      	add	r3, r1
 8011f52:	3314      	adds	r3, #20
 8011f54:	2200      	movs	r2, #0
 8011f56:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8011f58:	bf00      	nop
 8011f5a:	3708      	adds	r7, #8
 8011f5c:	46bd      	mov	sp, r7
 8011f5e:	bd80      	pop	{r7, pc}
 8011f60:	20000128 	.word	0x20000128

08011f64 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8011f64:	b580      	push	{r7, lr}
 8011f66:	b082      	sub	sp, #8
 8011f68:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011f6a:	2300      	movs	r3, #0
 8011f6c:	607b      	str	r3, [r7, #4]
 8011f6e:	e096      	b.n	801209e <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8011f70:	494f      	ldr	r1, [pc, #316]	; (80120b0 <etharp_tmr+0x14c>)
 8011f72:	687a      	ldr	r2, [r7, #4]
 8011f74:	4613      	mov	r3, r2
 8011f76:	005b      	lsls	r3, r3, #1
 8011f78:	4413      	add	r3, r2
 8011f7a:	00db      	lsls	r3, r3, #3
 8011f7c:	440b      	add	r3, r1
 8011f7e:	3314      	adds	r3, #20
 8011f80:	781b      	ldrb	r3, [r3, #0]
 8011f82:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8011f84:	78fb      	ldrb	r3, [r7, #3]
 8011f86:	2b00      	cmp	r3, #0
 8011f88:	f000 8086 	beq.w	8012098 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8011f8c:	4948      	ldr	r1, [pc, #288]	; (80120b0 <etharp_tmr+0x14c>)
 8011f8e:	687a      	ldr	r2, [r7, #4]
 8011f90:	4613      	mov	r3, r2
 8011f92:	005b      	lsls	r3, r3, #1
 8011f94:	4413      	add	r3, r2
 8011f96:	00db      	lsls	r3, r3, #3
 8011f98:	440b      	add	r3, r1
 8011f9a:	3312      	adds	r3, #18
 8011f9c:	881b      	ldrh	r3, [r3, #0]
 8011f9e:	3301      	adds	r3, #1
 8011fa0:	b298      	uxth	r0, r3
 8011fa2:	4943      	ldr	r1, [pc, #268]	; (80120b0 <etharp_tmr+0x14c>)
 8011fa4:	687a      	ldr	r2, [r7, #4]
 8011fa6:	4613      	mov	r3, r2
 8011fa8:	005b      	lsls	r3, r3, #1
 8011faa:	4413      	add	r3, r2
 8011fac:	00db      	lsls	r3, r3, #3
 8011fae:	440b      	add	r3, r1
 8011fb0:	3312      	adds	r3, #18
 8011fb2:	4602      	mov	r2, r0
 8011fb4:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8011fb6:	493e      	ldr	r1, [pc, #248]	; (80120b0 <etharp_tmr+0x14c>)
 8011fb8:	687a      	ldr	r2, [r7, #4]
 8011fba:	4613      	mov	r3, r2
 8011fbc:	005b      	lsls	r3, r3, #1
 8011fbe:	4413      	add	r3, r2
 8011fc0:	00db      	lsls	r3, r3, #3
 8011fc2:	440b      	add	r3, r1
 8011fc4:	3312      	adds	r3, #18
 8011fc6:	881b      	ldrh	r3, [r3, #0]
 8011fc8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8011fcc:	d215      	bcs.n	8011ffa <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8011fce:	4938      	ldr	r1, [pc, #224]	; (80120b0 <etharp_tmr+0x14c>)
 8011fd0:	687a      	ldr	r2, [r7, #4]
 8011fd2:	4613      	mov	r3, r2
 8011fd4:	005b      	lsls	r3, r3, #1
 8011fd6:	4413      	add	r3, r2
 8011fd8:	00db      	lsls	r3, r3, #3
 8011fda:	440b      	add	r3, r1
 8011fdc:	3314      	adds	r3, #20
 8011fde:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8011fe0:	2b01      	cmp	r3, #1
 8011fe2:	d10e      	bne.n	8012002 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8011fe4:	4932      	ldr	r1, [pc, #200]	; (80120b0 <etharp_tmr+0x14c>)
 8011fe6:	687a      	ldr	r2, [r7, #4]
 8011fe8:	4613      	mov	r3, r2
 8011fea:	005b      	lsls	r3, r3, #1
 8011fec:	4413      	add	r3, r2
 8011fee:	00db      	lsls	r3, r3, #3
 8011ff0:	440b      	add	r3, r1
 8011ff2:	3312      	adds	r3, #18
 8011ff4:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8011ff6:	2b04      	cmp	r3, #4
 8011ff8:	d903      	bls.n	8012002 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8011ffa:	6878      	ldr	r0, [r7, #4]
 8011ffc:	f7ff ff80 	bl	8011f00 <etharp_free_entry>
 8012000:	e04a      	b.n	8012098 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8012002:	492b      	ldr	r1, [pc, #172]	; (80120b0 <etharp_tmr+0x14c>)
 8012004:	687a      	ldr	r2, [r7, #4]
 8012006:	4613      	mov	r3, r2
 8012008:	005b      	lsls	r3, r3, #1
 801200a:	4413      	add	r3, r2
 801200c:	00db      	lsls	r3, r3, #3
 801200e:	440b      	add	r3, r1
 8012010:	3314      	adds	r3, #20
 8012012:	781b      	ldrb	r3, [r3, #0]
 8012014:	2b03      	cmp	r3, #3
 8012016:	d10a      	bne.n	801202e <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8012018:	4925      	ldr	r1, [pc, #148]	; (80120b0 <etharp_tmr+0x14c>)
 801201a:	687a      	ldr	r2, [r7, #4]
 801201c:	4613      	mov	r3, r2
 801201e:	005b      	lsls	r3, r3, #1
 8012020:	4413      	add	r3, r2
 8012022:	00db      	lsls	r3, r3, #3
 8012024:	440b      	add	r3, r1
 8012026:	3314      	adds	r3, #20
 8012028:	2204      	movs	r2, #4
 801202a:	701a      	strb	r2, [r3, #0]
 801202c:	e034      	b.n	8012098 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801202e:	4920      	ldr	r1, [pc, #128]	; (80120b0 <etharp_tmr+0x14c>)
 8012030:	687a      	ldr	r2, [r7, #4]
 8012032:	4613      	mov	r3, r2
 8012034:	005b      	lsls	r3, r3, #1
 8012036:	4413      	add	r3, r2
 8012038:	00db      	lsls	r3, r3, #3
 801203a:	440b      	add	r3, r1
 801203c:	3314      	adds	r3, #20
 801203e:	781b      	ldrb	r3, [r3, #0]
 8012040:	2b04      	cmp	r3, #4
 8012042:	d10a      	bne.n	801205a <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8012044:	491a      	ldr	r1, [pc, #104]	; (80120b0 <etharp_tmr+0x14c>)
 8012046:	687a      	ldr	r2, [r7, #4]
 8012048:	4613      	mov	r3, r2
 801204a:	005b      	lsls	r3, r3, #1
 801204c:	4413      	add	r3, r2
 801204e:	00db      	lsls	r3, r3, #3
 8012050:	440b      	add	r3, r1
 8012052:	3314      	adds	r3, #20
 8012054:	2202      	movs	r2, #2
 8012056:	701a      	strb	r2, [r3, #0]
 8012058:	e01e      	b.n	8012098 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801205a:	4915      	ldr	r1, [pc, #84]	; (80120b0 <etharp_tmr+0x14c>)
 801205c:	687a      	ldr	r2, [r7, #4]
 801205e:	4613      	mov	r3, r2
 8012060:	005b      	lsls	r3, r3, #1
 8012062:	4413      	add	r3, r2
 8012064:	00db      	lsls	r3, r3, #3
 8012066:	440b      	add	r3, r1
 8012068:	3314      	adds	r3, #20
 801206a:	781b      	ldrb	r3, [r3, #0]
 801206c:	2b01      	cmp	r3, #1
 801206e:	d113      	bne.n	8012098 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8012070:	490f      	ldr	r1, [pc, #60]	; (80120b0 <etharp_tmr+0x14c>)
 8012072:	687a      	ldr	r2, [r7, #4]
 8012074:	4613      	mov	r3, r2
 8012076:	005b      	lsls	r3, r3, #1
 8012078:	4413      	add	r3, r2
 801207a:	00db      	lsls	r3, r3, #3
 801207c:	440b      	add	r3, r1
 801207e:	3308      	adds	r3, #8
 8012080:	6818      	ldr	r0, [r3, #0]
 8012082:	687a      	ldr	r2, [r7, #4]
 8012084:	4613      	mov	r3, r2
 8012086:	005b      	lsls	r3, r3, #1
 8012088:	4413      	add	r3, r2
 801208a:	00db      	lsls	r3, r3, #3
 801208c:	4a08      	ldr	r2, [pc, #32]	; (80120b0 <etharp_tmr+0x14c>)
 801208e:	4413      	add	r3, r2
 8012090:	3304      	adds	r3, #4
 8012092:	4619      	mov	r1, r3
 8012094:	f000 fe6e 	bl	8012d74 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012098:	687b      	ldr	r3, [r7, #4]
 801209a:	3301      	adds	r3, #1
 801209c:	607b      	str	r3, [r7, #4]
 801209e:	687b      	ldr	r3, [r7, #4]
 80120a0:	2b09      	cmp	r3, #9
 80120a2:	f77f af65 	ble.w	8011f70 <etharp_tmr+0xc>
      }
    }
  }
}
 80120a6:	bf00      	nop
 80120a8:	bf00      	nop
 80120aa:	3708      	adds	r7, #8
 80120ac:	46bd      	mov	sp, r7
 80120ae:	bd80      	pop	{r7, pc}
 80120b0:	20000128 	.word	0x20000128

080120b4 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 80120b4:	b580      	push	{r7, lr}
 80120b6:	b08a      	sub	sp, #40	; 0x28
 80120b8:	af00      	add	r7, sp, #0
 80120ba:	60f8      	str	r0, [r7, #12]
 80120bc:	460b      	mov	r3, r1
 80120be:	607a      	str	r2, [r7, #4]
 80120c0:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80120c2:	230a      	movs	r3, #10
 80120c4:	84fb      	strh	r3, [r7, #38]	; 0x26
 80120c6:	230a      	movs	r3, #10
 80120c8:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 80120ca:	230a      	movs	r3, #10
 80120cc:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 80120ce:	2300      	movs	r3, #0
 80120d0:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 80120d2:	230a      	movs	r3, #10
 80120d4:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 80120d6:	2300      	movs	r3, #0
 80120d8:	83bb      	strh	r3, [r7, #28]
 80120da:	2300      	movs	r3, #0
 80120dc:	837b      	strh	r3, [r7, #26]
 80120de:	2300      	movs	r3, #0
 80120e0:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80120e2:	2300      	movs	r3, #0
 80120e4:	843b      	strh	r3, [r7, #32]
 80120e6:	e0ae      	b.n	8012246 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 80120e8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80120ec:	49a6      	ldr	r1, [pc, #664]	; (8012388 <etharp_find_entry+0x2d4>)
 80120ee:	4613      	mov	r3, r2
 80120f0:	005b      	lsls	r3, r3, #1
 80120f2:	4413      	add	r3, r2
 80120f4:	00db      	lsls	r3, r3, #3
 80120f6:	440b      	add	r3, r1
 80120f8:	3314      	adds	r3, #20
 80120fa:	781b      	ldrb	r3, [r3, #0]
 80120fc:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 80120fe:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8012102:	2b0a      	cmp	r3, #10
 8012104:	d105      	bne.n	8012112 <etharp_find_entry+0x5e>
 8012106:	7dfb      	ldrb	r3, [r7, #23]
 8012108:	2b00      	cmp	r3, #0
 801210a:	d102      	bne.n	8012112 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 801210c:	8c3b      	ldrh	r3, [r7, #32]
 801210e:	847b      	strh	r3, [r7, #34]	; 0x22
 8012110:	e095      	b.n	801223e <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8012112:	7dfb      	ldrb	r3, [r7, #23]
 8012114:	2b00      	cmp	r3, #0
 8012116:	f000 8092 	beq.w	801223e <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801211a:	7dfb      	ldrb	r3, [r7, #23]
 801211c:	2b01      	cmp	r3, #1
 801211e:	d009      	beq.n	8012134 <etharp_find_entry+0x80>
 8012120:	7dfb      	ldrb	r3, [r7, #23]
 8012122:	2b01      	cmp	r3, #1
 8012124:	d806      	bhi.n	8012134 <etharp_find_entry+0x80>
 8012126:	4b99      	ldr	r3, [pc, #612]	; (801238c <etharp_find_entry+0x2d8>)
 8012128:	f240 1223 	movw	r2, #291	; 0x123
 801212c:	4998      	ldr	r1, [pc, #608]	; (8012390 <etharp_find_entry+0x2dc>)
 801212e:	4899      	ldr	r0, [pc, #612]	; (8012394 <etharp_find_entry+0x2e0>)
 8012130:	f002 fa08 	bl	8014544 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8012134:	68fb      	ldr	r3, [r7, #12]
 8012136:	2b00      	cmp	r3, #0
 8012138:	d020      	beq.n	801217c <etharp_find_entry+0xc8>
 801213a:	68fb      	ldr	r3, [r7, #12]
 801213c:	6819      	ldr	r1, [r3, #0]
 801213e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012142:	4891      	ldr	r0, [pc, #580]	; (8012388 <etharp_find_entry+0x2d4>)
 8012144:	4613      	mov	r3, r2
 8012146:	005b      	lsls	r3, r3, #1
 8012148:	4413      	add	r3, r2
 801214a:	00db      	lsls	r3, r3, #3
 801214c:	4403      	add	r3, r0
 801214e:	3304      	adds	r3, #4
 8012150:	681b      	ldr	r3, [r3, #0]
 8012152:	4299      	cmp	r1, r3
 8012154:	d112      	bne.n	801217c <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8012156:	687b      	ldr	r3, [r7, #4]
 8012158:	2b00      	cmp	r3, #0
 801215a:	d00c      	beq.n	8012176 <etharp_find_entry+0xc2>
 801215c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012160:	4989      	ldr	r1, [pc, #548]	; (8012388 <etharp_find_entry+0x2d4>)
 8012162:	4613      	mov	r3, r2
 8012164:	005b      	lsls	r3, r3, #1
 8012166:	4413      	add	r3, r2
 8012168:	00db      	lsls	r3, r3, #3
 801216a:	440b      	add	r3, r1
 801216c:	3308      	adds	r3, #8
 801216e:	681b      	ldr	r3, [r3, #0]
 8012170:	687a      	ldr	r2, [r7, #4]
 8012172:	429a      	cmp	r2, r3
 8012174:	d102      	bne.n	801217c <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8012176:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801217a:	e100      	b.n	801237e <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 801217c:	7dfb      	ldrb	r3, [r7, #23]
 801217e:	2b01      	cmp	r3, #1
 8012180:	d140      	bne.n	8012204 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8012182:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012186:	4980      	ldr	r1, [pc, #512]	; (8012388 <etharp_find_entry+0x2d4>)
 8012188:	4613      	mov	r3, r2
 801218a:	005b      	lsls	r3, r3, #1
 801218c:	4413      	add	r3, r2
 801218e:	00db      	lsls	r3, r3, #3
 8012190:	440b      	add	r3, r1
 8012192:	681b      	ldr	r3, [r3, #0]
 8012194:	2b00      	cmp	r3, #0
 8012196:	d01a      	beq.n	80121ce <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8012198:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801219c:	497a      	ldr	r1, [pc, #488]	; (8012388 <etharp_find_entry+0x2d4>)
 801219e:	4613      	mov	r3, r2
 80121a0:	005b      	lsls	r3, r3, #1
 80121a2:	4413      	add	r3, r2
 80121a4:	00db      	lsls	r3, r3, #3
 80121a6:	440b      	add	r3, r1
 80121a8:	3312      	adds	r3, #18
 80121aa:	881b      	ldrh	r3, [r3, #0]
 80121ac:	8bba      	ldrh	r2, [r7, #28]
 80121ae:	429a      	cmp	r2, r3
 80121b0:	d845      	bhi.n	801223e <etharp_find_entry+0x18a>
            old_queue = i;
 80121b2:	8c3b      	ldrh	r3, [r7, #32]
 80121b4:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 80121b6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80121ba:	4973      	ldr	r1, [pc, #460]	; (8012388 <etharp_find_entry+0x2d4>)
 80121bc:	4613      	mov	r3, r2
 80121be:	005b      	lsls	r3, r3, #1
 80121c0:	4413      	add	r3, r2
 80121c2:	00db      	lsls	r3, r3, #3
 80121c4:	440b      	add	r3, r1
 80121c6:	3312      	adds	r3, #18
 80121c8:	881b      	ldrh	r3, [r3, #0]
 80121ca:	83bb      	strh	r3, [r7, #28]
 80121cc:	e037      	b.n	801223e <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 80121ce:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80121d2:	496d      	ldr	r1, [pc, #436]	; (8012388 <etharp_find_entry+0x2d4>)
 80121d4:	4613      	mov	r3, r2
 80121d6:	005b      	lsls	r3, r3, #1
 80121d8:	4413      	add	r3, r2
 80121da:	00db      	lsls	r3, r3, #3
 80121dc:	440b      	add	r3, r1
 80121de:	3312      	adds	r3, #18
 80121e0:	881b      	ldrh	r3, [r3, #0]
 80121e2:	8b7a      	ldrh	r2, [r7, #26]
 80121e4:	429a      	cmp	r2, r3
 80121e6:	d82a      	bhi.n	801223e <etharp_find_entry+0x18a>
            old_pending = i;
 80121e8:	8c3b      	ldrh	r3, [r7, #32]
 80121ea:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 80121ec:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80121f0:	4965      	ldr	r1, [pc, #404]	; (8012388 <etharp_find_entry+0x2d4>)
 80121f2:	4613      	mov	r3, r2
 80121f4:	005b      	lsls	r3, r3, #1
 80121f6:	4413      	add	r3, r2
 80121f8:	00db      	lsls	r3, r3, #3
 80121fa:	440b      	add	r3, r1
 80121fc:	3312      	adds	r3, #18
 80121fe:	881b      	ldrh	r3, [r3, #0]
 8012200:	837b      	strh	r3, [r7, #26]
 8012202:	e01c      	b.n	801223e <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8012204:	7dfb      	ldrb	r3, [r7, #23]
 8012206:	2b01      	cmp	r3, #1
 8012208:	d919      	bls.n	801223e <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801220a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801220e:	495e      	ldr	r1, [pc, #376]	; (8012388 <etharp_find_entry+0x2d4>)
 8012210:	4613      	mov	r3, r2
 8012212:	005b      	lsls	r3, r3, #1
 8012214:	4413      	add	r3, r2
 8012216:	00db      	lsls	r3, r3, #3
 8012218:	440b      	add	r3, r1
 801221a:	3312      	adds	r3, #18
 801221c:	881b      	ldrh	r3, [r3, #0]
 801221e:	8b3a      	ldrh	r2, [r7, #24]
 8012220:	429a      	cmp	r2, r3
 8012222:	d80c      	bhi.n	801223e <etharp_find_entry+0x18a>
            old_stable = i;
 8012224:	8c3b      	ldrh	r3, [r7, #32]
 8012226:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8012228:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801222c:	4956      	ldr	r1, [pc, #344]	; (8012388 <etharp_find_entry+0x2d4>)
 801222e:	4613      	mov	r3, r2
 8012230:	005b      	lsls	r3, r3, #1
 8012232:	4413      	add	r3, r2
 8012234:	00db      	lsls	r3, r3, #3
 8012236:	440b      	add	r3, r1
 8012238:	3312      	adds	r3, #18
 801223a:	881b      	ldrh	r3, [r3, #0]
 801223c:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801223e:	8c3b      	ldrh	r3, [r7, #32]
 8012240:	3301      	adds	r3, #1
 8012242:	b29b      	uxth	r3, r3
 8012244:	843b      	strh	r3, [r7, #32]
 8012246:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801224a:	2b09      	cmp	r3, #9
 801224c:	f77f af4c 	ble.w	80120e8 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8012250:	7afb      	ldrb	r3, [r7, #11]
 8012252:	f003 0302 	and.w	r3, r3, #2
 8012256:	2b00      	cmp	r3, #0
 8012258:	d108      	bne.n	801226c <etharp_find_entry+0x1b8>
 801225a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801225e:	2b0a      	cmp	r3, #10
 8012260:	d107      	bne.n	8012272 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8012262:	7afb      	ldrb	r3, [r7, #11]
 8012264:	f003 0301 	and.w	r3, r3, #1
 8012268:	2b00      	cmp	r3, #0
 801226a:	d102      	bne.n	8012272 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 801226c:	f04f 33ff 	mov.w	r3, #4294967295
 8012270:	e085      	b.n	801237e <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8012272:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8012276:	2b09      	cmp	r3, #9
 8012278:	dc02      	bgt.n	8012280 <etharp_find_entry+0x1cc>
    i = empty;
 801227a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801227c:	843b      	strh	r3, [r7, #32]
 801227e:	e039      	b.n	80122f4 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8012280:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8012284:	2b09      	cmp	r3, #9
 8012286:	dc14      	bgt.n	80122b2 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8012288:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801228a:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 801228c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012290:	493d      	ldr	r1, [pc, #244]	; (8012388 <etharp_find_entry+0x2d4>)
 8012292:	4613      	mov	r3, r2
 8012294:	005b      	lsls	r3, r3, #1
 8012296:	4413      	add	r3, r2
 8012298:	00db      	lsls	r3, r3, #3
 801229a:	440b      	add	r3, r1
 801229c:	681b      	ldr	r3, [r3, #0]
 801229e:	2b00      	cmp	r3, #0
 80122a0:	d018      	beq.n	80122d4 <etharp_find_entry+0x220>
 80122a2:	4b3a      	ldr	r3, [pc, #232]	; (801238c <etharp_find_entry+0x2d8>)
 80122a4:	f240 126d 	movw	r2, #365	; 0x16d
 80122a8:	493b      	ldr	r1, [pc, #236]	; (8012398 <etharp_find_entry+0x2e4>)
 80122aa:	483a      	ldr	r0, [pc, #232]	; (8012394 <etharp_find_entry+0x2e0>)
 80122ac:	f002 f94a 	bl	8014544 <iprintf>
 80122b0:	e010      	b.n	80122d4 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 80122b2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80122b6:	2b09      	cmp	r3, #9
 80122b8:	dc02      	bgt.n	80122c0 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 80122ba:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80122bc:	843b      	strh	r3, [r7, #32]
 80122be:	e009      	b.n	80122d4 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 80122c0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80122c4:	2b09      	cmp	r3, #9
 80122c6:	dc02      	bgt.n	80122ce <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 80122c8:	8bfb      	ldrh	r3, [r7, #30]
 80122ca:	843b      	strh	r3, [r7, #32]
 80122cc:	e002      	b.n	80122d4 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 80122ce:	f04f 33ff 	mov.w	r3, #4294967295
 80122d2:	e054      	b.n	801237e <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80122d4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80122d8:	2b09      	cmp	r3, #9
 80122da:	dd06      	ble.n	80122ea <etharp_find_entry+0x236>
 80122dc:	4b2b      	ldr	r3, [pc, #172]	; (801238c <etharp_find_entry+0x2d8>)
 80122de:	f240 127f 	movw	r2, #383	; 0x17f
 80122e2:	492e      	ldr	r1, [pc, #184]	; (801239c <etharp_find_entry+0x2e8>)
 80122e4:	482b      	ldr	r0, [pc, #172]	; (8012394 <etharp_find_entry+0x2e0>)
 80122e6:	f002 f92d 	bl	8014544 <iprintf>
    etharp_free_entry(i);
 80122ea:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80122ee:	4618      	mov	r0, r3
 80122f0:	f7ff fe06 	bl	8011f00 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80122f4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80122f8:	2b09      	cmp	r3, #9
 80122fa:	dd06      	ble.n	801230a <etharp_find_entry+0x256>
 80122fc:	4b23      	ldr	r3, [pc, #140]	; (801238c <etharp_find_entry+0x2d8>)
 80122fe:	f240 1283 	movw	r2, #387	; 0x183
 8012302:	4926      	ldr	r1, [pc, #152]	; (801239c <etharp_find_entry+0x2e8>)
 8012304:	4823      	ldr	r0, [pc, #140]	; (8012394 <etharp_find_entry+0x2e0>)
 8012306:	f002 f91d 	bl	8014544 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801230a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801230e:	491e      	ldr	r1, [pc, #120]	; (8012388 <etharp_find_entry+0x2d4>)
 8012310:	4613      	mov	r3, r2
 8012312:	005b      	lsls	r3, r3, #1
 8012314:	4413      	add	r3, r2
 8012316:	00db      	lsls	r3, r3, #3
 8012318:	440b      	add	r3, r1
 801231a:	3314      	adds	r3, #20
 801231c:	781b      	ldrb	r3, [r3, #0]
 801231e:	2b00      	cmp	r3, #0
 8012320:	d006      	beq.n	8012330 <etharp_find_entry+0x27c>
 8012322:	4b1a      	ldr	r3, [pc, #104]	; (801238c <etharp_find_entry+0x2d8>)
 8012324:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8012328:	491d      	ldr	r1, [pc, #116]	; (80123a0 <etharp_find_entry+0x2ec>)
 801232a:	481a      	ldr	r0, [pc, #104]	; (8012394 <etharp_find_entry+0x2e0>)
 801232c:	f002 f90a 	bl	8014544 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8012330:	68fb      	ldr	r3, [r7, #12]
 8012332:	2b00      	cmp	r3, #0
 8012334:	d00b      	beq.n	801234e <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8012336:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801233a:	68fb      	ldr	r3, [r7, #12]
 801233c:	6819      	ldr	r1, [r3, #0]
 801233e:	4812      	ldr	r0, [pc, #72]	; (8012388 <etharp_find_entry+0x2d4>)
 8012340:	4613      	mov	r3, r2
 8012342:	005b      	lsls	r3, r3, #1
 8012344:	4413      	add	r3, r2
 8012346:	00db      	lsls	r3, r3, #3
 8012348:	4403      	add	r3, r0
 801234a:	3304      	adds	r3, #4
 801234c:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801234e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012352:	490d      	ldr	r1, [pc, #52]	; (8012388 <etharp_find_entry+0x2d4>)
 8012354:	4613      	mov	r3, r2
 8012356:	005b      	lsls	r3, r3, #1
 8012358:	4413      	add	r3, r2
 801235a:	00db      	lsls	r3, r3, #3
 801235c:	440b      	add	r3, r1
 801235e:	3312      	adds	r3, #18
 8012360:	2200      	movs	r2, #0
 8012362:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8012364:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012368:	4907      	ldr	r1, [pc, #28]	; (8012388 <etharp_find_entry+0x2d4>)
 801236a:	4613      	mov	r3, r2
 801236c:	005b      	lsls	r3, r3, #1
 801236e:	4413      	add	r3, r2
 8012370:	00db      	lsls	r3, r3, #3
 8012372:	440b      	add	r3, r1
 8012374:	3308      	adds	r3, #8
 8012376:	687a      	ldr	r2, [r7, #4]
 8012378:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801237a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 801237e:	4618      	mov	r0, r3
 8012380:	3728      	adds	r7, #40	; 0x28
 8012382:	46bd      	mov	sp, r7
 8012384:	bd80      	pop	{r7, pc}
 8012386:	bf00      	nop
 8012388:	20000128 	.word	0x20000128
 801238c:	08017c38 	.word	0x08017c38
 8012390:	08017c70 	.word	0x08017c70
 8012394:	08017cb0 	.word	0x08017cb0
 8012398:	08017cd8 	.word	0x08017cd8
 801239c:	08017cf0 	.word	0x08017cf0
 80123a0:	08017d04 	.word	0x08017d04

080123a4 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 80123a4:	b580      	push	{r7, lr}
 80123a6:	b088      	sub	sp, #32
 80123a8:	af02      	add	r7, sp, #8
 80123aa:	60f8      	str	r0, [r7, #12]
 80123ac:	60b9      	str	r1, [r7, #8]
 80123ae:	607a      	str	r2, [r7, #4]
 80123b0:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 80123b2:	68fb      	ldr	r3, [r7, #12]
 80123b4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80123b8:	2b06      	cmp	r3, #6
 80123ba:	d006      	beq.n	80123ca <etharp_update_arp_entry+0x26>
 80123bc:	4b48      	ldr	r3, [pc, #288]	; (80124e0 <etharp_update_arp_entry+0x13c>)
 80123be:	f240 12a9 	movw	r2, #425	; 0x1a9
 80123c2:	4948      	ldr	r1, [pc, #288]	; (80124e4 <etharp_update_arp_entry+0x140>)
 80123c4:	4848      	ldr	r0, [pc, #288]	; (80124e8 <etharp_update_arp_entry+0x144>)
 80123c6:	f002 f8bd 	bl	8014544 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 80123ca:	68bb      	ldr	r3, [r7, #8]
 80123cc:	2b00      	cmp	r3, #0
 80123ce:	d012      	beq.n	80123f6 <etharp_update_arp_entry+0x52>
 80123d0:	68bb      	ldr	r3, [r7, #8]
 80123d2:	681b      	ldr	r3, [r3, #0]
 80123d4:	2b00      	cmp	r3, #0
 80123d6:	d00e      	beq.n	80123f6 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80123d8:	68bb      	ldr	r3, [r7, #8]
 80123da:	681b      	ldr	r3, [r3, #0]
 80123dc:	68f9      	ldr	r1, [r7, #12]
 80123de:	4618      	mov	r0, r3
 80123e0:	f001 f8fe 	bl	80135e0 <ip4_addr_isbroadcast_u32>
 80123e4:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 80123e6:	2b00      	cmp	r3, #0
 80123e8:	d105      	bne.n	80123f6 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 80123ea:	68bb      	ldr	r3, [r7, #8]
 80123ec:	681b      	ldr	r3, [r3, #0]
 80123ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80123f2:	2be0      	cmp	r3, #224	; 0xe0
 80123f4:	d102      	bne.n	80123fc <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80123f6:	f06f 030f 	mvn.w	r3, #15
 80123fa:	e06c      	b.n	80124d6 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 80123fc:	78fb      	ldrb	r3, [r7, #3]
 80123fe:	68fa      	ldr	r2, [r7, #12]
 8012400:	4619      	mov	r1, r3
 8012402:	68b8      	ldr	r0, [r7, #8]
 8012404:	f7ff fe56 	bl	80120b4 <etharp_find_entry>
 8012408:	4603      	mov	r3, r0
 801240a:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 801240c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8012410:	2b00      	cmp	r3, #0
 8012412:	da02      	bge.n	801241a <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8012414:	8afb      	ldrh	r3, [r7, #22]
 8012416:	b25b      	sxtb	r3, r3
 8012418:	e05d      	b.n	80124d6 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801241a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801241e:	4933      	ldr	r1, [pc, #204]	; (80124ec <etharp_update_arp_entry+0x148>)
 8012420:	4613      	mov	r3, r2
 8012422:	005b      	lsls	r3, r3, #1
 8012424:	4413      	add	r3, r2
 8012426:	00db      	lsls	r3, r3, #3
 8012428:	440b      	add	r3, r1
 801242a:	3314      	adds	r3, #20
 801242c:	2202      	movs	r2, #2
 801242e:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8012430:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012434:	492d      	ldr	r1, [pc, #180]	; (80124ec <etharp_update_arp_entry+0x148>)
 8012436:	4613      	mov	r3, r2
 8012438:	005b      	lsls	r3, r3, #1
 801243a:	4413      	add	r3, r2
 801243c:	00db      	lsls	r3, r3, #3
 801243e:	440b      	add	r3, r1
 8012440:	3308      	adds	r3, #8
 8012442:	68fa      	ldr	r2, [r7, #12]
 8012444:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8012446:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801244a:	4613      	mov	r3, r2
 801244c:	005b      	lsls	r3, r3, #1
 801244e:	4413      	add	r3, r2
 8012450:	00db      	lsls	r3, r3, #3
 8012452:	3308      	adds	r3, #8
 8012454:	4a25      	ldr	r2, [pc, #148]	; (80124ec <etharp_update_arp_entry+0x148>)
 8012456:	4413      	add	r3, r2
 8012458:	3304      	adds	r3, #4
 801245a:	2206      	movs	r2, #6
 801245c:	6879      	ldr	r1, [r7, #4]
 801245e:	4618      	mov	r0, r3
 8012460:	f002 f840 	bl	80144e4 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8012464:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012468:	4920      	ldr	r1, [pc, #128]	; (80124ec <etharp_update_arp_entry+0x148>)
 801246a:	4613      	mov	r3, r2
 801246c:	005b      	lsls	r3, r3, #1
 801246e:	4413      	add	r3, r2
 8012470:	00db      	lsls	r3, r3, #3
 8012472:	440b      	add	r3, r1
 8012474:	3312      	adds	r3, #18
 8012476:	2200      	movs	r2, #0
 8012478:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801247a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801247e:	491b      	ldr	r1, [pc, #108]	; (80124ec <etharp_update_arp_entry+0x148>)
 8012480:	4613      	mov	r3, r2
 8012482:	005b      	lsls	r3, r3, #1
 8012484:	4413      	add	r3, r2
 8012486:	00db      	lsls	r3, r3, #3
 8012488:	440b      	add	r3, r1
 801248a:	681b      	ldr	r3, [r3, #0]
 801248c:	2b00      	cmp	r3, #0
 801248e:	d021      	beq.n	80124d4 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8012490:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012494:	4915      	ldr	r1, [pc, #84]	; (80124ec <etharp_update_arp_entry+0x148>)
 8012496:	4613      	mov	r3, r2
 8012498:	005b      	lsls	r3, r3, #1
 801249a:	4413      	add	r3, r2
 801249c:	00db      	lsls	r3, r3, #3
 801249e:	440b      	add	r3, r1
 80124a0:	681b      	ldr	r3, [r3, #0]
 80124a2:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 80124a4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80124a8:	4910      	ldr	r1, [pc, #64]	; (80124ec <etharp_update_arp_entry+0x148>)
 80124aa:	4613      	mov	r3, r2
 80124ac:	005b      	lsls	r3, r3, #1
 80124ae:	4413      	add	r3, r2
 80124b0:	00db      	lsls	r3, r3, #3
 80124b2:	440b      	add	r3, r1
 80124b4:	2200      	movs	r2, #0
 80124b6:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80124b8:	68fb      	ldr	r3, [r7, #12]
 80124ba:	f103 0226 	add.w	r2, r3, #38	; 0x26
 80124be:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80124c2:	9300      	str	r3, [sp, #0]
 80124c4:	687b      	ldr	r3, [r7, #4]
 80124c6:	6939      	ldr	r1, [r7, #16]
 80124c8:	68f8      	ldr	r0, [r7, #12]
 80124ca:	f001 ff91 	bl	80143f0 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 80124ce:	6938      	ldr	r0, [r7, #16]
 80124d0:	f7f9 fe6e 	bl	800c1b0 <pbuf_free>
  }
  return ERR_OK;
 80124d4:	2300      	movs	r3, #0
}
 80124d6:	4618      	mov	r0, r3
 80124d8:	3718      	adds	r7, #24
 80124da:	46bd      	mov	sp, r7
 80124dc:	bd80      	pop	{r7, pc}
 80124de:	bf00      	nop
 80124e0:	08017c38 	.word	0x08017c38
 80124e4:	08017d30 	.word	0x08017d30
 80124e8:	08017cb0 	.word	0x08017cb0
 80124ec:	20000128 	.word	0x20000128

080124f0 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 80124f0:	b580      	push	{r7, lr}
 80124f2:	b084      	sub	sp, #16
 80124f4:	af00      	add	r7, sp, #0
 80124f6:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80124f8:	2300      	movs	r3, #0
 80124fa:	60fb      	str	r3, [r7, #12]
 80124fc:	e01e      	b.n	801253c <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 80124fe:	4913      	ldr	r1, [pc, #76]	; (801254c <etharp_cleanup_netif+0x5c>)
 8012500:	68fa      	ldr	r2, [r7, #12]
 8012502:	4613      	mov	r3, r2
 8012504:	005b      	lsls	r3, r3, #1
 8012506:	4413      	add	r3, r2
 8012508:	00db      	lsls	r3, r3, #3
 801250a:	440b      	add	r3, r1
 801250c:	3314      	adds	r3, #20
 801250e:	781b      	ldrb	r3, [r3, #0]
 8012510:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8012512:	7afb      	ldrb	r3, [r7, #11]
 8012514:	2b00      	cmp	r3, #0
 8012516:	d00e      	beq.n	8012536 <etharp_cleanup_netif+0x46>
 8012518:	490c      	ldr	r1, [pc, #48]	; (801254c <etharp_cleanup_netif+0x5c>)
 801251a:	68fa      	ldr	r2, [r7, #12]
 801251c:	4613      	mov	r3, r2
 801251e:	005b      	lsls	r3, r3, #1
 8012520:	4413      	add	r3, r2
 8012522:	00db      	lsls	r3, r3, #3
 8012524:	440b      	add	r3, r1
 8012526:	3308      	adds	r3, #8
 8012528:	681b      	ldr	r3, [r3, #0]
 801252a:	687a      	ldr	r2, [r7, #4]
 801252c:	429a      	cmp	r2, r3
 801252e:	d102      	bne.n	8012536 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8012530:	68f8      	ldr	r0, [r7, #12]
 8012532:	f7ff fce5 	bl	8011f00 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012536:	68fb      	ldr	r3, [r7, #12]
 8012538:	3301      	adds	r3, #1
 801253a:	60fb      	str	r3, [r7, #12]
 801253c:	68fb      	ldr	r3, [r7, #12]
 801253e:	2b09      	cmp	r3, #9
 8012540:	dddd      	ble.n	80124fe <etharp_cleanup_netif+0xe>
    }
  }
}
 8012542:	bf00      	nop
 8012544:	bf00      	nop
 8012546:	3710      	adds	r7, #16
 8012548:	46bd      	mov	sp, r7
 801254a:	bd80      	pop	{r7, pc}
 801254c:	20000128 	.word	0x20000128

08012550 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8012550:	b5b0      	push	{r4, r5, r7, lr}
 8012552:	b08a      	sub	sp, #40	; 0x28
 8012554:	af04      	add	r7, sp, #16
 8012556:	6078      	str	r0, [r7, #4]
 8012558:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801255a:	683b      	ldr	r3, [r7, #0]
 801255c:	2b00      	cmp	r3, #0
 801255e:	d107      	bne.n	8012570 <etharp_input+0x20>
 8012560:	4b3d      	ldr	r3, [pc, #244]	; (8012658 <etharp_input+0x108>)
 8012562:	f240 228a 	movw	r2, #650	; 0x28a
 8012566:	493d      	ldr	r1, [pc, #244]	; (801265c <etharp_input+0x10c>)
 8012568:	483d      	ldr	r0, [pc, #244]	; (8012660 <etharp_input+0x110>)
 801256a:	f001 ffeb 	bl	8014544 <iprintf>
 801256e:	e06f      	b.n	8012650 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8012570:	687b      	ldr	r3, [r7, #4]
 8012572:	685b      	ldr	r3, [r3, #4]
 8012574:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8012576:	693b      	ldr	r3, [r7, #16]
 8012578:	881b      	ldrh	r3, [r3, #0]
 801257a:	b29b      	uxth	r3, r3
 801257c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012580:	d10c      	bne.n	801259c <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8012582:	693b      	ldr	r3, [r7, #16]
 8012584:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8012586:	2b06      	cmp	r3, #6
 8012588:	d108      	bne.n	801259c <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801258a:	693b      	ldr	r3, [r7, #16]
 801258c:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801258e:	2b04      	cmp	r3, #4
 8012590:	d104      	bne.n	801259c <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8012592:	693b      	ldr	r3, [r7, #16]
 8012594:	885b      	ldrh	r3, [r3, #2]
 8012596:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8012598:	2b08      	cmp	r3, #8
 801259a:	d003      	beq.n	80125a4 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 801259c:	6878      	ldr	r0, [r7, #4]
 801259e:	f7f9 fe07 	bl	800c1b0 <pbuf_free>
    return;
 80125a2:	e055      	b.n	8012650 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 80125a4:	693b      	ldr	r3, [r7, #16]
 80125a6:	330e      	adds	r3, #14
 80125a8:	681b      	ldr	r3, [r3, #0]
 80125aa:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 80125ac:	693b      	ldr	r3, [r7, #16]
 80125ae:	3318      	adds	r3, #24
 80125b0:	681b      	ldr	r3, [r3, #0]
 80125b2:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80125b4:	683b      	ldr	r3, [r7, #0]
 80125b6:	3304      	adds	r3, #4
 80125b8:	681b      	ldr	r3, [r3, #0]
 80125ba:	2b00      	cmp	r3, #0
 80125bc:	d102      	bne.n	80125c4 <etharp_input+0x74>
    for_us = 0;
 80125be:	2300      	movs	r3, #0
 80125c0:	75fb      	strb	r3, [r7, #23]
 80125c2:	e009      	b.n	80125d8 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 80125c4:	68ba      	ldr	r2, [r7, #8]
 80125c6:	683b      	ldr	r3, [r7, #0]
 80125c8:	3304      	adds	r3, #4
 80125ca:	681b      	ldr	r3, [r3, #0]
 80125cc:	429a      	cmp	r2, r3
 80125ce:	bf0c      	ite	eq
 80125d0:	2301      	moveq	r3, #1
 80125d2:	2300      	movne	r3, #0
 80125d4:	b2db      	uxtb	r3, r3
 80125d6:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 80125d8:	693b      	ldr	r3, [r7, #16]
 80125da:	f103 0208 	add.w	r2, r3, #8
 80125de:	7dfb      	ldrb	r3, [r7, #23]
 80125e0:	2b00      	cmp	r3, #0
 80125e2:	d001      	beq.n	80125e8 <etharp_input+0x98>
 80125e4:	2301      	movs	r3, #1
 80125e6:	e000      	b.n	80125ea <etharp_input+0x9a>
 80125e8:	2302      	movs	r3, #2
 80125ea:	f107 010c 	add.w	r1, r7, #12
 80125ee:	6838      	ldr	r0, [r7, #0]
 80125f0:	f7ff fed8 	bl	80123a4 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 80125f4:	693b      	ldr	r3, [r7, #16]
 80125f6:	88db      	ldrh	r3, [r3, #6]
 80125f8:	b29b      	uxth	r3, r3
 80125fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80125fe:	d003      	beq.n	8012608 <etharp_input+0xb8>
 8012600:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012604:	d01e      	beq.n	8012644 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8012606:	e020      	b.n	801264a <etharp_input+0xfa>
      if (for_us) {
 8012608:	7dfb      	ldrb	r3, [r7, #23]
 801260a:	2b00      	cmp	r3, #0
 801260c:	d01c      	beq.n	8012648 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801260e:	683b      	ldr	r3, [r7, #0]
 8012610:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8012614:	693b      	ldr	r3, [r7, #16]
 8012616:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801261a:	683b      	ldr	r3, [r7, #0]
 801261c:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8012620:	683b      	ldr	r3, [r7, #0]
 8012622:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8012624:	693a      	ldr	r2, [r7, #16]
 8012626:	3208      	adds	r2, #8
        etharp_raw(netif,
 8012628:	2102      	movs	r1, #2
 801262a:	9103      	str	r1, [sp, #12]
 801262c:	f107 010c 	add.w	r1, r7, #12
 8012630:	9102      	str	r1, [sp, #8]
 8012632:	9201      	str	r2, [sp, #4]
 8012634:	9300      	str	r3, [sp, #0]
 8012636:	462b      	mov	r3, r5
 8012638:	4622      	mov	r2, r4
 801263a:	4601      	mov	r1, r0
 801263c:	6838      	ldr	r0, [r7, #0]
 801263e:	f000 faeb 	bl	8012c18 <etharp_raw>
      break;
 8012642:	e001      	b.n	8012648 <etharp_input+0xf8>
      break;
 8012644:	bf00      	nop
 8012646:	e000      	b.n	801264a <etharp_input+0xfa>
      break;
 8012648:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801264a:	6878      	ldr	r0, [r7, #4]
 801264c:	f7f9 fdb0 	bl	800c1b0 <pbuf_free>
}
 8012650:	3718      	adds	r7, #24
 8012652:	46bd      	mov	sp, r7
 8012654:	bdb0      	pop	{r4, r5, r7, pc}
 8012656:	bf00      	nop
 8012658:	08017c38 	.word	0x08017c38
 801265c:	08017d88 	.word	0x08017d88
 8012660:	08017cb0 	.word	0x08017cb0

08012664 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8012664:	b580      	push	{r7, lr}
 8012666:	b086      	sub	sp, #24
 8012668:	af02      	add	r7, sp, #8
 801266a:	60f8      	str	r0, [r7, #12]
 801266c:	60b9      	str	r1, [r7, #8]
 801266e:	4613      	mov	r3, r2
 8012670:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8012672:	79fa      	ldrb	r2, [r7, #7]
 8012674:	4944      	ldr	r1, [pc, #272]	; (8012788 <etharp_output_to_arp_index+0x124>)
 8012676:	4613      	mov	r3, r2
 8012678:	005b      	lsls	r3, r3, #1
 801267a:	4413      	add	r3, r2
 801267c:	00db      	lsls	r3, r3, #3
 801267e:	440b      	add	r3, r1
 8012680:	3314      	adds	r3, #20
 8012682:	781b      	ldrb	r3, [r3, #0]
 8012684:	2b01      	cmp	r3, #1
 8012686:	d806      	bhi.n	8012696 <etharp_output_to_arp_index+0x32>
 8012688:	4b40      	ldr	r3, [pc, #256]	; (801278c <etharp_output_to_arp_index+0x128>)
 801268a:	f240 22ee 	movw	r2, #750	; 0x2ee
 801268e:	4940      	ldr	r1, [pc, #256]	; (8012790 <etharp_output_to_arp_index+0x12c>)
 8012690:	4840      	ldr	r0, [pc, #256]	; (8012794 <etharp_output_to_arp_index+0x130>)
 8012692:	f001 ff57 	bl	8014544 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8012696:	79fa      	ldrb	r2, [r7, #7]
 8012698:	493b      	ldr	r1, [pc, #236]	; (8012788 <etharp_output_to_arp_index+0x124>)
 801269a:	4613      	mov	r3, r2
 801269c:	005b      	lsls	r3, r3, #1
 801269e:	4413      	add	r3, r2
 80126a0:	00db      	lsls	r3, r3, #3
 80126a2:	440b      	add	r3, r1
 80126a4:	3314      	adds	r3, #20
 80126a6:	781b      	ldrb	r3, [r3, #0]
 80126a8:	2b02      	cmp	r3, #2
 80126aa:	d153      	bne.n	8012754 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80126ac:	79fa      	ldrb	r2, [r7, #7]
 80126ae:	4936      	ldr	r1, [pc, #216]	; (8012788 <etharp_output_to_arp_index+0x124>)
 80126b0:	4613      	mov	r3, r2
 80126b2:	005b      	lsls	r3, r3, #1
 80126b4:	4413      	add	r3, r2
 80126b6:	00db      	lsls	r3, r3, #3
 80126b8:	440b      	add	r3, r1
 80126ba:	3312      	adds	r3, #18
 80126bc:	881b      	ldrh	r3, [r3, #0]
 80126be:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 80126c2:	d919      	bls.n	80126f8 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 80126c4:	79fa      	ldrb	r2, [r7, #7]
 80126c6:	4613      	mov	r3, r2
 80126c8:	005b      	lsls	r3, r3, #1
 80126ca:	4413      	add	r3, r2
 80126cc:	00db      	lsls	r3, r3, #3
 80126ce:	4a2e      	ldr	r2, [pc, #184]	; (8012788 <etharp_output_to_arp_index+0x124>)
 80126d0:	4413      	add	r3, r2
 80126d2:	3304      	adds	r3, #4
 80126d4:	4619      	mov	r1, r3
 80126d6:	68f8      	ldr	r0, [r7, #12]
 80126d8:	f000 fb4c 	bl	8012d74 <etharp_request>
 80126dc:	4603      	mov	r3, r0
 80126de:	2b00      	cmp	r3, #0
 80126e0:	d138      	bne.n	8012754 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80126e2:	79fa      	ldrb	r2, [r7, #7]
 80126e4:	4928      	ldr	r1, [pc, #160]	; (8012788 <etharp_output_to_arp_index+0x124>)
 80126e6:	4613      	mov	r3, r2
 80126e8:	005b      	lsls	r3, r3, #1
 80126ea:	4413      	add	r3, r2
 80126ec:	00db      	lsls	r3, r3, #3
 80126ee:	440b      	add	r3, r1
 80126f0:	3314      	adds	r3, #20
 80126f2:	2203      	movs	r2, #3
 80126f4:	701a      	strb	r2, [r3, #0]
 80126f6:	e02d      	b.n	8012754 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 80126f8:	79fa      	ldrb	r2, [r7, #7]
 80126fa:	4923      	ldr	r1, [pc, #140]	; (8012788 <etharp_output_to_arp_index+0x124>)
 80126fc:	4613      	mov	r3, r2
 80126fe:	005b      	lsls	r3, r3, #1
 8012700:	4413      	add	r3, r2
 8012702:	00db      	lsls	r3, r3, #3
 8012704:	440b      	add	r3, r1
 8012706:	3312      	adds	r3, #18
 8012708:	881b      	ldrh	r3, [r3, #0]
 801270a:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 801270e:	d321      	bcc.n	8012754 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8012710:	79fa      	ldrb	r2, [r7, #7]
 8012712:	4613      	mov	r3, r2
 8012714:	005b      	lsls	r3, r3, #1
 8012716:	4413      	add	r3, r2
 8012718:	00db      	lsls	r3, r3, #3
 801271a:	4a1b      	ldr	r2, [pc, #108]	; (8012788 <etharp_output_to_arp_index+0x124>)
 801271c:	4413      	add	r3, r2
 801271e:	1d19      	adds	r1, r3, #4
 8012720:	79fa      	ldrb	r2, [r7, #7]
 8012722:	4613      	mov	r3, r2
 8012724:	005b      	lsls	r3, r3, #1
 8012726:	4413      	add	r3, r2
 8012728:	00db      	lsls	r3, r3, #3
 801272a:	3308      	adds	r3, #8
 801272c:	4a16      	ldr	r2, [pc, #88]	; (8012788 <etharp_output_to_arp_index+0x124>)
 801272e:	4413      	add	r3, r2
 8012730:	3304      	adds	r3, #4
 8012732:	461a      	mov	r2, r3
 8012734:	68f8      	ldr	r0, [r7, #12]
 8012736:	f000 fafb 	bl	8012d30 <etharp_request_dst>
 801273a:	4603      	mov	r3, r0
 801273c:	2b00      	cmp	r3, #0
 801273e:	d109      	bne.n	8012754 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8012740:	79fa      	ldrb	r2, [r7, #7]
 8012742:	4911      	ldr	r1, [pc, #68]	; (8012788 <etharp_output_to_arp_index+0x124>)
 8012744:	4613      	mov	r3, r2
 8012746:	005b      	lsls	r3, r3, #1
 8012748:	4413      	add	r3, r2
 801274a:	00db      	lsls	r3, r3, #3
 801274c:	440b      	add	r3, r1
 801274e:	3314      	adds	r3, #20
 8012750:	2203      	movs	r2, #3
 8012752:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8012754:	68fb      	ldr	r3, [r7, #12]
 8012756:	f103 0126 	add.w	r1, r3, #38	; 0x26
 801275a:	79fa      	ldrb	r2, [r7, #7]
 801275c:	4613      	mov	r3, r2
 801275e:	005b      	lsls	r3, r3, #1
 8012760:	4413      	add	r3, r2
 8012762:	00db      	lsls	r3, r3, #3
 8012764:	3308      	adds	r3, #8
 8012766:	4a08      	ldr	r2, [pc, #32]	; (8012788 <etharp_output_to_arp_index+0x124>)
 8012768:	4413      	add	r3, r2
 801276a:	3304      	adds	r3, #4
 801276c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8012770:	9200      	str	r2, [sp, #0]
 8012772:	460a      	mov	r2, r1
 8012774:	68b9      	ldr	r1, [r7, #8]
 8012776:	68f8      	ldr	r0, [r7, #12]
 8012778:	f001 fe3a 	bl	80143f0 <ethernet_output>
 801277c:	4603      	mov	r3, r0
}
 801277e:	4618      	mov	r0, r3
 8012780:	3710      	adds	r7, #16
 8012782:	46bd      	mov	sp, r7
 8012784:	bd80      	pop	{r7, pc}
 8012786:	bf00      	nop
 8012788:	20000128 	.word	0x20000128
 801278c:	08017c38 	.word	0x08017c38
 8012790:	08017da8 	.word	0x08017da8
 8012794:	08017cb0 	.word	0x08017cb0

08012798 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8012798:	b580      	push	{r7, lr}
 801279a:	b08a      	sub	sp, #40	; 0x28
 801279c:	af02      	add	r7, sp, #8
 801279e:	60f8      	str	r0, [r7, #12]
 80127a0:	60b9      	str	r1, [r7, #8]
 80127a2:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 80127a4:	687b      	ldr	r3, [r7, #4]
 80127a6:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80127a8:	68fb      	ldr	r3, [r7, #12]
 80127aa:	2b00      	cmp	r3, #0
 80127ac:	d106      	bne.n	80127bc <etharp_output+0x24>
 80127ae:	4b73      	ldr	r3, [pc, #460]	; (801297c <etharp_output+0x1e4>)
 80127b0:	f240 321e 	movw	r2, #798	; 0x31e
 80127b4:	4972      	ldr	r1, [pc, #456]	; (8012980 <etharp_output+0x1e8>)
 80127b6:	4873      	ldr	r0, [pc, #460]	; (8012984 <etharp_output+0x1ec>)
 80127b8:	f001 fec4 	bl	8014544 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 80127bc:	68bb      	ldr	r3, [r7, #8]
 80127be:	2b00      	cmp	r3, #0
 80127c0:	d106      	bne.n	80127d0 <etharp_output+0x38>
 80127c2:	4b6e      	ldr	r3, [pc, #440]	; (801297c <etharp_output+0x1e4>)
 80127c4:	f240 321f 	movw	r2, #799	; 0x31f
 80127c8:	496f      	ldr	r1, [pc, #444]	; (8012988 <etharp_output+0x1f0>)
 80127ca:	486e      	ldr	r0, [pc, #440]	; (8012984 <etharp_output+0x1ec>)
 80127cc:	f001 feba 	bl	8014544 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 80127d0:	687b      	ldr	r3, [r7, #4]
 80127d2:	2b00      	cmp	r3, #0
 80127d4:	d106      	bne.n	80127e4 <etharp_output+0x4c>
 80127d6:	4b69      	ldr	r3, [pc, #420]	; (801297c <etharp_output+0x1e4>)
 80127d8:	f44f 7248 	mov.w	r2, #800	; 0x320
 80127dc:	496b      	ldr	r1, [pc, #428]	; (801298c <etharp_output+0x1f4>)
 80127de:	4869      	ldr	r0, [pc, #420]	; (8012984 <etharp_output+0x1ec>)
 80127e0:	f001 feb0 	bl	8014544 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 80127e4:	687b      	ldr	r3, [r7, #4]
 80127e6:	681b      	ldr	r3, [r3, #0]
 80127e8:	68f9      	ldr	r1, [r7, #12]
 80127ea:	4618      	mov	r0, r3
 80127ec:	f000 fef8 	bl	80135e0 <ip4_addr_isbroadcast_u32>
 80127f0:	4603      	mov	r3, r0
 80127f2:	2b00      	cmp	r3, #0
 80127f4:	d002      	beq.n	80127fc <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 80127f6:	4b66      	ldr	r3, [pc, #408]	; (8012990 <etharp_output+0x1f8>)
 80127f8:	61fb      	str	r3, [r7, #28]
 80127fa:	e0af      	b.n	801295c <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 80127fc:	687b      	ldr	r3, [r7, #4]
 80127fe:	681b      	ldr	r3, [r3, #0]
 8012800:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012804:	2be0      	cmp	r3, #224	; 0xe0
 8012806:	d118      	bne.n	801283a <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8012808:	2301      	movs	r3, #1
 801280a:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 801280c:	2300      	movs	r3, #0
 801280e:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8012810:	235e      	movs	r3, #94	; 0x5e
 8012812:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8012814:	687b      	ldr	r3, [r7, #4]
 8012816:	3301      	adds	r3, #1
 8012818:	781b      	ldrb	r3, [r3, #0]
 801281a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801281e:	b2db      	uxtb	r3, r3
 8012820:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8012822:	687b      	ldr	r3, [r7, #4]
 8012824:	3302      	adds	r3, #2
 8012826:	781b      	ldrb	r3, [r3, #0]
 8012828:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801282a:	687b      	ldr	r3, [r7, #4]
 801282c:	3303      	adds	r3, #3
 801282e:	781b      	ldrb	r3, [r3, #0]
 8012830:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8012832:	f107 0310 	add.w	r3, r7, #16
 8012836:	61fb      	str	r3, [r7, #28]
 8012838:	e090      	b.n	801295c <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801283a:	687b      	ldr	r3, [r7, #4]
 801283c:	681a      	ldr	r2, [r3, #0]
 801283e:	68fb      	ldr	r3, [r7, #12]
 8012840:	3304      	adds	r3, #4
 8012842:	681b      	ldr	r3, [r3, #0]
 8012844:	405a      	eors	r2, r3
 8012846:	68fb      	ldr	r3, [r7, #12]
 8012848:	3308      	adds	r3, #8
 801284a:	681b      	ldr	r3, [r3, #0]
 801284c:	4013      	ands	r3, r2
 801284e:	2b00      	cmp	r3, #0
 8012850:	d012      	beq.n	8012878 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8012852:	687b      	ldr	r3, [r7, #4]
 8012854:	681b      	ldr	r3, [r3, #0]
 8012856:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8012858:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 801285c:	4293      	cmp	r3, r2
 801285e:	d00b      	beq.n	8012878 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8012860:	68fb      	ldr	r3, [r7, #12]
 8012862:	330c      	adds	r3, #12
 8012864:	681b      	ldr	r3, [r3, #0]
 8012866:	2b00      	cmp	r3, #0
 8012868:	d003      	beq.n	8012872 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801286a:	68fb      	ldr	r3, [r7, #12]
 801286c:	330c      	adds	r3, #12
 801286e:	61bb      	str	r3, [r7, #24]
 8012870:	e002      	b.n	8012878 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8012872:	f06f 0303 	mvn.w	r3, #3
 8012876:	e07d      	b.n	8012974 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8012878:	4b46      	ldr	r3, [pc, #280]	; (8012994 <etharp_output+0x1fc>)
 801287a:	781b      	ldrb	r3, [r3, #0]
 801287c:	4619      	mov	r1, r3
 801287e:	4a46      	ldr	r2, [pc, #280]	; (8012998 <etharp_output+0x200>)
 8012880:	460b      	mov	r3, r1
 8012882:	005b      	lsls	r3, r3, #1
 8012884:	440b      	add	r3, r1
 8012886:	00db      	lsls	r3, r3, #3
 8012888:	4413      	add	r3, r2
 801288a:	3314      	adds	r3, #20
 801288c:	781b      	ldrb	r3, [r3, #0]
 801288e:	2b01      	cmp	r3, #1
 8012890:	d925      	bls.n	80128de <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8012892:	4b40      	ldr	r3, [pc, #256]	; (8012994 <etharp_output+0x1fc>)
 8012894:	781b      	ldrb	r3, [r3, #0]
 8012896:	4619      	mov	r1, r3
 8012898:	4a3f      	ldr	r2, [pc, #252]	; (8012998 <etharp_output+0x200>)
 801289a:	460b      	mov	r3, r1
 801289c:	005b      	lsls	r3, r3, #1
 801289e:	440b      	add	r3, r1
 80128a0:	00db      	lsls	r3, r3, #3
 80128a2:	4413      	add	r3, r2
 80128a4:	3308      	adds	r3, #8
 80128a6:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80128a8:	68fa      	ldr	r2, [r7, #12]
 80128aa:	429a      	cmp	r2, r3
 80128ac:	d117      	bne.n	80128de <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80128ae:	69bb      	ldr	r3, [r7, #24]
 80128b0:	681a      	ldr	r2, [r3, #0]
 80128b2:	4b38      	ldr	r3, [pc, #224]	; (8012994 <etharp_output+0x1fc>)
 80128b4:	781b      	ldrb	r3, [r3, #0]
 80128b6:	4618      	mov	r0, r3
 80128b8:	4937      	ldr	r1, [pc, #220]	; (8012998 <etharp_output+0x200>)
 80128ba:	4603      	mov	r3, r0
 80128bc:	005b      	lsls	r3, r3, #1
 80128be:	4403      	add	r3, r0
 80128c0:	00db      	lsls	r3, r3, #3
 80128c2:	440b      	add	r3, r1
 80128c4:	3304      	adds	r3, #4
 80128c6:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 80128c8:	429a      	cmp	r2, r3
 80128ca:	d108      	bne.n	80128de <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 80128cc:	4b31      	ldr	r3, [pc, #196]	; (8012994 <etharp_output+0x1fc>)
 80128ce:	781b      	ldrb	r3, [r3, #0]
 80128d0:	461a      	mov	r2, r3
 80128d2:	68b9      	ldr	r1, [r7, #8]
 80128d4:	68f8      	ldr	r0, [r7, #12]
 80128d6:	f7ff fec5 	bl	8012664 <etharp_output_to_arp_index>
 80128da:	4603      	mov	r3, r0
 80128dc:	e04a      	b.n	8012974 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80128de:	2300      	movs	r3, #0
 80128e0:	75fb      	strb	r3, [r7, #23]
 80128e2:	e031      	b.n	8012948 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80128e4:	7dfa      	ldrb	r2, [r7, #23]
 80128e6:	492c      	ldr	r1, [pc, #176]	; (8012998 <etharp_output+0x200>)
 80128e8:	4613      	mov	r3, r2
 80128ea:	005b      	lsls	r3, r3, #1
 80128ec:	4413      	add	r3, r2
 80128ee:	00db      	lsls	r3, r3, #3
 80128f0:	440b      	add	r3, r1
 80128f2:	3314      	adds	r3, #20
 80128f4:	781b      	ldrb	r3, [r3, #0]
 80128f6:	2b01      	cmp	r3, #1
 80128f8:	d923      	bls.n	8012942 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 80128fa:	7dfa      	ldrb	r2, [r7, #23]
 80128fc:	4926      	ldr	r1, [pc, #152]	; (8012998 <etharp_output+0x200>)
 80128fe:	4613      	mov	r3, r2
 8012900:	005b      	lsls	r3, r3, #1
 8012902:	4413      	add	r3, r2
 8012904:	00db      	lsls	r3, r3, #3
 8012906:	440b      	add	r3, r1
 8012908:	3308      	adds	r3, #8
 801290a:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801290c:	68fa      	ldr	r2, [r7, #12]
 801290e:	429a      	cmp	r2, r3
 8012910:	d117      	bne.n	8012942 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8012912:	69bb      	ldr	r3, [r7, #24]
 8012914:	6819      	ldr	r1, [r3, #0]
 8012916:	7dfa      	ldrb	r2, [r7, #23]
 8012918:	481f      	ldr	r0, [pc, #124]	; (8012998 <etharp_output+0x200>)
 801291a:	4613      	mov	r3, r2
 801291c:	005b      	lsls	r3, r3, #1
 801291e:	4413      	add	r3, r2
 8012920:	00db      	lsls	r3, r3, #3
 8012922:	4403      	add	r3, r0
 8012924:	3304      	adds	r3, #4
 8012926:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8012928:	4299      	cmp	r1, r3
 801292a:	d10a      	bne.n	8012942 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 801292c:	4a19      	ldr	r2, [pc, #100]	; (8012994 <etharp_output+0x1fc>)
 801292e:	7dfb      	ldrb	r3, [r7, #23]
 8012930:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8012932:	7dfb      	ldrb	r3, [r7, #23]
 8012934:	461a      	mov	r2, r3
 8012936:	68b9      	ldr	r1, [r7, #8]
 8012938:	68f8      	ldr	r0, [r7, #12]
 801293a:	f7ff fe93 	bl	8012664 <etharp_output_to_arp_index>
 801293e:	4603      	mov	r3, r0
 8012940:	e018      	b.n	8012974 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8012942:	7dfb      	ldrb	r3, [r7, #23]
 8012944:	3301      	adds	r3, #1
 8012946:	75fb      	strb	r3, [r7, #23]
 8012948:	7dfb      	ldrb	r3, [r7, #23]
 801294a:	2b09      	cmp	r3, #9
 801294c:	d9ca      	bls.n	80128e4 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801294e:	68ba      	ldr	r2, [r7, #8]
 8012950:	69b9      	ldr	r1, [r7, #24]
 8012952:	68f8      	ldr	r0, [r7, #12]
 8012954:	f000 f822 	bl	801299c <etharp_query>
 8012958:	4603      	mov	r3, r0
 801295a:	e00b      	b.n	8012974 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 801295c:	68fb      	ldr	r3, [r7, #12]
 801295e:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8012962:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8012966:	9300      	str	r3, [sp, #0]
 8012968:	69fb      	ldr	r3, [r7, #28]
 801296a:	68b9      	ldr	r1, [r7, #8]
 801296c:	68f8      	ldr	r0, [r7, #12]
 801296e:	f001 fd3f 	bl	80143f0 <ethernet_output>
 8012972:	4603      	mov	r3, r0
}
 8012974:	4618      	mov	r0, r3
 8012976:	3720      	adds	r7, #32
 8012978:	46bd      	mov	sp, r7
 801297a:	bd80      	pop	{r7, pc}
 801297c:	08017c38 	.word	0x08017c38
 8012980:	08017d88 	.word	0x08017d88
 8012984:	08017cb0 	.word	0x08017cb0
 8012988:	08017dd8 	.word	0x08017dd8
 801298c:	08017d78 	.word	0x08017d78
 8012990:	08018404 	.word	0x08018404
 8012994:	20000218 	.word	0x20000218
 8012998:	20000128 	.word	0x20000128

0801299c <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 801299c:	b580      	push	{r7, lr}
 801299e:	b08c      	sub	sp, #48	; 0x30
 80129a0:	af02      	add	r7, sp, #8
 80129a2:	60f8      	str	r0, [r7, #12]
 80129a4:	60b9      	str	r1, [r7, #8]
 80129a6:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 80129a8:	68fb      	ldr	r3, [r7, #12]
 80129aa:	3326      	adds	r3, #38	; 0x26
 80129ac:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 80129ae:	23ff      	movs	r3, #255	; 0xff
 80129b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 80129b4:	2300      	movs	r3, #0
 80129b6:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80129b8:	68bb      	ldr	r3, [r7, #8]
 80129ba:	681b      	ldr	r3, [r3, #0]
 80129bc:	68f9      	ldr	r1, [r7, #12]
 80129be:	4618      	mov	r0, r3
 80129c0:	f000 fe0e 	bl	80135e0 <ip4_addr_isbroadcast_u32>
 80129c4:	4603      	mov	r3, r0
 80129c6:	2b00      	cmp	r3, #0
 80129c8:	d10c      	bne.n	80129e4 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80129ca:	68bb      	ldr	r3, [r7, #8]
 80129cc:	681b      	ldr	r3, [r3, #0]
 80129ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80129d2:	2be0      	cmp	r3, #224	; 0xe0
 80129d4:	d006      	beq.n	80129e4 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80129d6:	68bb      	ldr	r3, [r7, #8]
 80129d8:	2b00      	cmp	r3, #0
 80129da:	d003      	beq.n	80129e4 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 80129dc:	68bb      	ldr	r3, [r7, #8]
 80129de:	681b      	ldr	r3, [r3, #0]
 80129e0:	2b00      	cmp	r3, #0
 80129e2:	d102      	bne.n	80129ea <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80129e4:	f06f 030f 	mvn.w	r3, #15
 80129e8:	e101      	b.n	8012bee <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 80129ea:	68fa      	ldr	r2, [r7, #12]
 80129ec:	2101      	movs	r1, #1
 80129ee:	68b8      	ldr	r0, [r7, #8]
 80129f0:	f7ff fb60 	bl	80120b4 <etharp_find_entry>
 80129f4:	4603      	mov	r3, r0
 80129f6:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 80129f8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80129fc:	2b00      	cmp	r3, #0
 80129fe:	da02      	bge.n	8012a06 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8012a00:	8a7b      	ldrh	r3, [r7, #18]
 8012a02:	b25b      	sxtb	r3, r3
 8012a04:	e0f3      	b.n	8012bee <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8012a06:	8a7b      	ldrh	r3, [r7, #18]
 8012a08:	2b7e      	cmp	r3, #126	; 0x7e
 8012a0a:	d906      	bls.n	8012a1a <etharp_query+0x7e>
 8012a0c:	4b7a      	ldr	r3, [pc, #488]	; (8012bf8 <etharp_query+0x25c>)
 8012a0e:	f240 32c1 	movw	r2, #961	; 0x3c1
 8012a12:	497a      	ldr	r1, [pc, #488]	; (8012bfc <etharp_query+0x260>)
 8012a14:	487a      	ldr	r0, [pc, #488]	; (8012c00 <etharp_query+0x264>)
 8012a16:	f001 fd95 	bl	8014544 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8012a1a:	8a7b      	ldrh	r3, [r7, #18]
 8012a1c:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8012a1e:	7c7a      	ldrb	r2, [r7, #17]
 8012a20:	4978      	ldr	r1, [pc, #480]	; (8012c04 <etharp_query+0x268>)
 8012a22:	4613      	mov	r3, r2
 8012a24:	005b      	lsls	r3, r3, #1
 8012a26:	4413      	add	r3, r2
 8012a28:	00db      	lsls	r3, r3, #3
 8012a2a:	440b      	add	r3, r1
 8012a2c:	3314      	adds	r3, #20
 8012a2e:	781b      	ldrb	r3, [r3, #0]
 8012a30:	2b00      	cmp	r3, #0
 8012a32:	d115      	bne.n	8012a60 <etharp_query+0xc4>
    is_new_entry = 1;
 8012a34:	2301      	movs	r3, #1
 8012a36:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8012a38:	7c7a      	ldrb	r2, [r7, #17]
 8012a3a:	4972      	ldr	r1, [pc, #456]	; (8012c04 <etharp_query+0x268>)
 8012a3c:	4613      	mov	r3, r2
 8012a3e:	005b      	lsls	r3, r3, #1
 8012a40:	4413      	add	r3, r2
 8012a42:	00db      	lsls	r3, r3, #3
 8012a44:	440b      	add	r3, r1
 8012a46:	3314      	adds	r3, #20
 8012a48:	2201      	movs	r2, #1
 8012a4a:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8012a4c:	7c7a      	ldrb	r2, [r7, #17]
 8012a4e:	496d      	ldr	r1, [pc, #436]	; (8012c04 <etharp_query+0x268>)
 8012a50:	4613      	mov	r3, r2
 8012a52:	005b      	lsls	r3, r3, #1
 8012a54:	4413      	add	r3, r2
 8012a56:	00db      	lsls	r3, r3, #3
 8012a58:	440b      	add	r3, r1
 8012a5a:	3308      	adds	r3, #8
 8012a5c:	68fa      	ldr	r2, [r7, #12]
 8012a5e:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8012a60:	7c7a      	ldrb	r2, [r7, #17]
 8012a62:	4968      	ldr	r1, [pc, #416]	; (8012c04 <etharp_query+0x268>)
 8012a64:	4613      	mov	r3, r2
 8012a66:	005b      	lsls	r3, r3, #1
 8012a68:	4413      	add	r3, r2
 8012a6a:	00db      	lsls	r3, r3, #3
 8012a6c:	440b      	add	r3, r1
 8012a6e:	3314      	adds	r3, #20
 8012a70:	781b      	ldrb	r3, [r3, #0]
 8012a72:	2b01      	cmp	r3, #1
 8012a74:	d011      	beq.n	8012a9a <etharp_query+0xfe>
 8012a76:	7c7a      	ldrb	r2, [r7, #17]
 8012a78:	4962      	ldr	r1, [pc, #392]	; (8012c04 <etharp_query+0x268>)
 8012a7a:	4613      	mov	r3, r2
 8012a7c:	005b      	lsls	r3, r3, #1
 8012a7e:	4413      	add	r3, r2
 8012a80:	00db      	lsls	r3, r3, #3
 8012a82:	440b      	add	r3, r1
 8012a84:	3314      	adds	r3, #20
 8012a86:	781b      	ldrb	r3, [r3, #0]
 8012a88:	2b01      	cmp	r3, #1
 8012a8a:	d806      	bhi.n	8012a9a <etharp_query+0xfe>
 8012a8c:	4b5a      	ldr	r3, [pc, #360]	; (8012bf8 <etharp_query+0x25c>)
 8012a8e:	f240 32cd 	movw	r2, #973	; 0x3cd
 8012a92:	495d      	ldr	r1, [pc, #372]	; (8012c08 <etharp_query+0x26c>)
 8012a94:	485a      	ldr	r0, [pc, #360]	; (8012c00 <etharp_query+0x264>)
 8012a96:	f001 fd55 	bl	8014544 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8012a9a:	6a3b      	ldr	r3, [r7, #32]
 8012a9c:	2b00      	cmp	r3, #0
 8012a9e:	d102      	bne.n	8012aa6 <etharp_query+0x10a>
 8012aa0:	687b      	ldr	r3, [r7, #4]
 8012aa2:	2b00      	cmp	r3, #0
 8012aa4:	d10c      	bne.n	8012ac0 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8012aa6:	68b9      	ldr	r1, [r7, #8]
 8012aa8:	68f8      	ldr	r0, [r7, #12]
 8012aaa:	f000 f963 	bl	8012d74 <etharp_request>
 8012aae:	4603      	mov	r3, r0
 8012ab0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8012ab4:	687b      	ldr	r3, [r7, #4]
 8012ab6:	2b00      	cmp	r3, #0
 8012ab8:	d102      	bne.n	8012ac0 <etharp_query+0x124>
      return result;
 8012aba:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8012abe:	e096      	b.n	8012bee <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8012ac0:	687b      	ldr	r3, [r7, #4]
 8012ac2:	2b00      	cmp	r3, #0
 8012ac4:	d106      	bne.n	8012ad4 <etharp_query+0x138>
 8012ac6:	4b4c      	ldr	r3, [pc, #304]	; (8012bf8 <etharp_query+0x25c>)
 8012ac8:	f240 32e1 	movw	r2, #993	; 0x3e1
 8012acc:	494f      	ldr	r1, [pc, #316]	; (8012c0c <etharp_query+0x270>)
 8012ace:	484c      	ldr	r0, [pc, #304]	; (8012c00 <etharp_query+0x264>)
 8012ad0:	f001 fd38 	bl	8014544 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8012ad4:	7c7a      	ldrb	r2, [r7, #17]
 8012ad6:	494b      	ldr	r1, [pc, #300]	; (8012c04 <etharp_query+0x268>)
 8012ad8:	4613      	mov	r3, r2
 8012ada:	005b      	lsls	r3, r3, #1
 8012adc:	4413      	add	r3, r2
 8012ade:	00db      	lsls	r3, r3, #3
 8012ae0:	440b      	add	r3, r1
 8012ae2:	3314      	adds	r3, #20
 8012ae4:	781b      	ldrb	r3, [r3, #0]
 8012ae6:	2b01      	cmp	r3, #1
 8012ae8:	d917      	bls.n	8012b1a <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8012aea:	4a49      	ldr	r2, [pc, #292]	; (8012c10 <etharp_query+0x274>)
 8012aec:	7c7b      	ldrb	r3, [r7, #17]
 8012aee:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8012af0:	7c7a      	ldrb	r2, [r7, #17]
 8012af2:	4613      	mov	r3, r2
 8012af4:	005b      	lsls	r3, r3, #1
 8012af6:	4413      	add	r3, r2
 8012af8:	00db      	lsls	r3, r3, #3
 8012afa:	3308      	adds	r3, #8
 8012afc:	4a41      	ldr	r2, [pc, #260]	; (8012c04 <etharp_query+0x268>)
 8012afe:	4413      	add	r3, r2
 8012b00:	3304      	adds	r3, #4
 8012b02:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8012b06:	9200      	str	r2, [sp, #0]
 8012b08:	697a      	ldr	r2, [r7, #20]
 8012b0a:	6879      	ldr	r1, [r7, #4]
 8012b0c:	68f8      	ldr	r0, [r7, #12]
 8012b0e:	f001 fc6f 	bl	80143f0 <ethernet_output>
 8012b12:	4603      	mov	r3, r0
 8012b14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012b18:	e067      	b.n	8012bea <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8012b1a:	7c7a      	ldrb	r2, [r7, #17]
 8012b1c:	4939      	ldr	r1, [pc, #228]	; (8012c04 <etharp_query+0x268>)
 8012b1e:	4613      	mov	r3, r2
 8012b20:	005b      	lsls	r3, r3, #1
 8012b22:	4413      	add	r3, r2
 8012b24:	00db      	lsls	r3, r3, #3
 8012b26:	440b      	add	r3, r1
 8012b28:	3314      	adds	r3, #20
 8012b2a:	781b      	ldrb	r3, [r3, #0]
 8012b2c:	2b01      	cmp	r3, #1
 8012b2e:	d15c      	bne.n	8012bea <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8012b30:	2300      	movs	r3, #0
 8012b32:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8012b34:	687b      	ldr	r3, [r7, #4]
 8012b36:	61fb      	str	r3, [r7, #28]
    while (p) {
 8012b38:	e01c      	b.n	8012b74 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8012b3a:	69fb      	ldr	r3, [r7, #28]
 8012b3c:	895a      	ldrh	r2, [r3, #10]
 8012b3e:	69fb      	ldr	r3, [r7, #28]
 8012b40:	891b      	ldrh	r3, [r3, #8]
 8012b42:	429a      	cmp	r2, r3
 8012b44:	d10a      	bne.n	8012b5c <etharp_query+0x1c0>
 8012b46:	69fb      	ldr	r3, [r7, #28]
 8012b48:	681b      	ldr	r3, [r3, #0]
 8012b4a:	2b00      	cmp	r3, #0
 8012b4c:	d006      	beq.n	8012b5c <etharp_query+0x1c0>
 8012b4e:	4b2a      	ldr	r3, [pc, #168]	; (8012bf8 <etharp_query+0x25c>)
 8012b50:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8012b54:	492f      	ldr	r1, [pc, #188]	; (8012c14 <etharp_query+0x278>)
 8012b56:	482a      	ldr	r0, [pc, #168]	; (8012c00 <etharp_query+0x264>)
 8012b58:	f001 fcf4 	bl	8014544 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8012b5c:	69fb      	ldr	r3, [r7, #28]
 8012b5e:	7b1b      	ldrb	r3, [r3, #12]
 8012b60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012b64:	2b00      	cmp	r3, #0
 8012b66:	d002      	beq.n	8012b6e <etharp_query+0x1d2>
        copy_needed = 1;
 8012b68:	2301      	movs	r3, #1
 8012b6a:	61bb      	str	r3, [r7, #24]
        break;
 8012b6c:	e005      	b.n	8012b7a <etharp_query+0x1de>
      }
      p = p->next;
 8012b6e:	69fb      	ldr	r3, [r7, #28]
 8012b70:	681b      	ldr	r3, [r3, #0]
 8012b72:	61fb      	str	r3, [r7, #28]
    while (p) {
 8012b74:	69fb      	ldr	r3, [r7, #28]
 8012b76:	2b00      	cmp	r3, #0
 8012b78:	d1df      	bne.n	8012b3a <etharp_query+0x19e>
    }
    if (copy_needed) {
 8012b7a:	69bb      	ldr	r3, [r7, #24]
 8012b7c:	2b00      	cmp	r3, #0
 8012b7e:	d007      	beq.n	8012b90 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8012b80:	687a      	ldr	r2, [r7, #4]
 8012b82:	f44f 7120 	mov.w	r1, #640	; 0x280
 8012b86:	200e      	movs	r0, #14
 8012b88:	f7f9 fd6e 	bl	800c668 <pbuf_clone>
 8012b8c:	61f8      	str	r0, [r7, #28]
 8012b8e:	e004      	b.n	8012b9a <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8012b90:	687b      	ldr	r3, [r7, #4]
 8012b92:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8012b94:	69f8      	ldr	r0, [r7, #28]
 8012b96:	f7f9 fbab 	bl	800c2f0 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8012b9a:	69fb      	ldr	r3, [r7, #28]
 8012b9c:	2b00      	cmp	r3, #0
 8012b9e:	d021      	beq.n	8012be4 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8012ba0:	7c7a      	ldrb	r2, [r7, #17]
 8012ba2:	4918      	ldr	r1, [pc, #96]	; (8012c04 <etharp_query+0x268>)
 8012ba4:	4613      	mov	r3, r2
 8012ba6:	005b      	lsls	r3, r3, #1
 8012ba8:	4413      	add	r3, r2
 8012baa:	00db      	lsls	r3, r3, #3
 8012bac:	440b      	add	r3, r1
 8012bae:	681b      	ldr	r3, [r3, #0]
 8012bb0:	2b00      	cmp	r3, #0
 8012bb2:	d00a      	beq.n	8012bca <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8012bb4:	7c7a      	ldrb	r2, [r7, #17]
 8012bb6:	4913      	ldr	r1, [pc, #76]	; (8012c04 <etharp_query+0x268>)
 8012bb8:	4613      	mov	r3, r2
 8012bba:	005b      	lsls	r3, r3, #1
 8012bbc:	4413      	add	r3, r2
 8012bbe:	00db      	lsls	r3, r3, #3
 8012bc0:	440b      	add	r3, r1
 8012bc2:	681b      	ldr	r3, [r3, #0]
 8012bc4:	4618      	mov	r0, r3
 8012bc6:	f7f9 faf3 	bl	800c1b0 <pbuf_free>
      }
      arp_table[i].q = p;
 8012bca:	7c7a      	ldrb	r2, [r7, #17]
 8012bcc:	490d      	ldr	r1, [pc, #52]	; (8012c04 <etharp_query+0x268>)
 8012bce:	4613      	mov	r3, r2
 8012bd0:	005b      	lsls	r3, r3, #1
 8012bd2:	4413      	add	r3, r2
 8012bd4:	00db      	lsls	r3, r3, #3
 8012bd6:	440b      	add	r3, r1
 8012bd8:	69fa      	ldr	r2, [r7, #28]
 8012bda:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8012bdc:	2300      	movs	r3, #0
 8012bde:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012be2:	e002      	b.n	8012bea <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8012be4:	23ff      	movs	r3, #255	; 0xff
 8012be6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8012bea:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8012bee:	4618      	mov	r0, r3
 8012bf0:	3728      	adds	r7, #40	; 0x28
 8012bf2:	46bd      	mov	sp, r7
 8012bf4:	bd80      	pop	{r7, pc}
 8012bf6:	bf00      	nop
 8012bf8:	08017c38 	.word	0x08017c38
 8012bfc:	08017de4 	.word	0x08017de4
 8012c00:	08017cb0 	.word	0x08017cb0
 8012c04:	20000128 	.word	0x20000128
 8012c08:	08017df4 	.word	0x08017df4
 8012c0c:	08017dd8 	.word	0x08017dd8
 8012c10:	20000218 	.word	0x20000218
 8012c14:	08017e1c 	.word	0x08017e1c

08012c18 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8012c18:	b580      	push	{r7, lr}
 8012c1a:	b08a      	sub	sp, #40	; 0x28
 8012c1c:	af02      	add	r7, sp, #8
 8012c1e:	60f8      	str	r0, [r7, #12]
 8012c20:	60b9      	str	r1, [r7, #8]
 8012c22:	607a      	str	r2, [r7, #4]
 8012c24:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8012c26:	2300      	movs	r3, #0
 8012c28:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8012c2a:	68fb      	ldr	r3, [r7, #12]
 8012c2c:	2b00      	cmp	r3, #0
 8012c2e:	d106      	bne.n	8012c3e <etharp_raw+0x26>
 8012c30:	4b3a      	ldr	r3, [pc, #232]	; (8012d1c <etharp_raw+0x104>)
 8012c32:	f240 4257 	movw	r2, #1111	; 0x457
 8012c36:	493a      	ldr	r1, [pc, #232]	; (8012d20 <etharp_raw+0x108>)
 8012c38:	483a      	ldr	r0, [pc, #232]	; (8012d24 <etharp_raw+0x10c>)
 8012c3a:	f001 fc83 	bl	8014544 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8012c3e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012c42:	211c      	movs	r1, #28
 8012c44:	200e      	movs	r0, #14
 8012c46:	f7f8 ffcf 	bl	800bbe8 <pbuf_alloc>
 8012c4a:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8012c4c:	69bb      	ldr	r3, [r7, #24]
 8012c4e:	2b00      	cmp	r3, #0
 8012c50:	d102      	bne.n	8012c58 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8012c52:	f04f 33ff 	mov.w	r3, #4294967295
 8012c56:	e05d      	b.n	8012d14 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8012c58:	69bb      	ldr	r3, [r7, #24]
 8012c5a:	895b      	ldrh	r3, [r3, #10]
 8012c5c:	2b1b      	cmp	r3, #27
 8012c5e:	d806      	bhi.n	8012c6e <etharp_raw+0x56>
 8012c60:	4b2e      	ldr	r3, [pc, #184]	; (8012d1c <etharp_raw+0x104>)
 8012c62:	f240 4262 	movw	r2, #1122	; 0x462
 8012c66:	4930      	ldr	r1, [pc, #192]	; (8012d28 <etharp_raw+0x110>)
 8012c68:	482e      	ldr	r0, [pc, #184]	; (8012d24 <etharp_raw+0x10c>)
 8012c6a:	f001 fc6b 	bl	8014544 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8012c6e:	69bb      	ldr	r3, [r7, #24]
 8012c70:	685b      	ldr	r3, [r3, #4]
 8012c72:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8012c74:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8012c76:	4618      	mov	r0, r3
 8012c78:	f7f8 f807 	bl	800ac8a <lwip_htons>
 8012c7c:	4603      	mov	r3, r0
 8012c7e:	461a      	mov	r2, r3
 8012c80:	697b      	ldr	r3, [r7, #20]
 8012c82:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8012c84:	68fb      	ldr	r3, [r7, #12]
 8012c86:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8012c8a:	2b06      	cmp	r3, #6
 8012c8c:	d006      	beq.n	8012c9c <etharp_raw+0x84>
 8012c8e:	4b23      	ldr	r3, [pc, #140]	; (8012d1c <etharp_raw+0x104>)
 8012c90:	f240 4269 	movw	r2, #1129	; 0x469
 8012c94:	4925      	ldr	r1, [pc, #148]	; (8012d2c <etharp_raw+0x114>)
 8012c96:	4823      	ldr	r0, [pc, #140]	; (8012d24 <etharp_raw+0x10c>)
 8012c98:	f001 fc54 	bl	8014544 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8012c9c:	697b      	ldr	r3, [r7, #20]
 8012c9e:	3308      	adds	r3, #8
 8012ca0:	2206      	movs	r2, #6
 8012ca2:	6839      	ldr	r1, [r7, #0]
 8012ca4:	4618      	mov	r0, r3
 8012ca6:	f001 fc1d 	bl	80144e4 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8012caa:	697b      	ldr	r3, [r7, #20]
 8012cac:	3312      	adds	r3, #18
 8012cae:	2206      	movs	r2, #6
 8012cb0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012cb2:	4618      	mov	r0, r3
 8012cb4:	f001 fc16 	bl	80144e4 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8012cb8:	697b      	ldr	r3, [r7, #20]
 8012cba:	330e      	adds	r3, #14
 8012cbc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012cbe:	6812      	ldr	r2, [r2, #0]
 8012cc0:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8012cc2:	697b      	ldr	r3, [r7, #20]
 8012cc4:	3318      	adds	r3, #24
 8012cc6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012cc8:	6812      	ldr	r2, [r2, #0]
 8012cca:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8012ccc:	697b      	ldr	r3, [r7, #20]
 8012cce:	2200      	movs	r2, #0
 8012cd0:	701a      	strb	r2, [r3, #0]
 8012cd2:	2200      	movs	r2, #0
 8012cd4:	f042 0201 	orr.w	r2, r2, #1
 8012cd8:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8012cda:	697b      	ldr	r3, [r7, #20]
 8012cdc:	2200      	movs	r2, #0
 8012cde:	f042 0208 	orr.w	r2, r2, #8
 8012ce2:	709a      	strb	r2, [r3, #2]
 8012ce4:	2200      	movs	r2, #0
 8012ce6:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8012ce8:	697b      	ldr	r3, [r7, #20]
 8012cea:	2206      	movs	r2, #6
 8012cec:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8012cee:	697b      	ldr	r3, [r7, #20]
 8012cf0:	2204      	movs	r2, #4
 8012cf2:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8012cf4:	f640 0306 	movw	r3, #2054	; 0x806
 8012cf8:	9300      	str	r3, [sp, #0]
 8012cfa:	687b      	ldr	r3, [r7, #4]
 8012cfc:	68ba      	ldr	r2, [r7, #8]
 8012cfe:	69b9      	ldr	r1, [r7, #24]
 8012d00:	68f8      	ldr	r0, [r7, #12]
 8012d02:	f001 fb75 	bl	80143f0 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8012d06:	69b8      	ldr	r0, [r7, #24]
 8012d08:	f7f9 fa52 	bl	800c1b0 <pbuf_free>
  p = NULL;
 8012d0c:	2300      	movs	r3, #0
 8012d0e:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8012d10:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8012d14:	4618      	mov	r0, r3
 8012d16:	3720      	adds	r7, #32
 8012d18:	46bd      	mov	sp, r7
 8012d1a:	bd80      	pop	{r7, pc}
 8012d1c:	08017c38 	.word	0x08017c38
 8012d20:	08017d88 	.word	0x08017d88
 8012d24:	08017cb0 	.word	0x08017cb0
 8012d28:	08017e38 	.word	0x08017e38
 8012d2c:	08017e6c 	.word	0x08017e6c

08012d30 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8012d30:	b580      	push	{r7, lr}
 8012d32:	b088      	sub	sp, #32
 8012d34:	af04      	add	r7, sp, #16
 8012d36:	60f8      	str	r0, [r7, #12]
 8012d38:	60b9      	str	r1, [r7, #8]
 8012d3a:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8012d3c:	68fb      	ldr	r3, [r7, #12]
 8012d3e:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8012d42:	68fb      	ldr	r3, [r7, #12]
 8012d44:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8012d48:	68fb      	ldr	r3, [r7, #12]
 8012d4a:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8012d4c:	2201      	movs	r2, #1
 8012d4e:	9203      	str	r2, [sp, #12]
 8012d50:	68ba      	ldr	r2, [r7, #8]
 8012d52:	9202      	str	r2, [sp, #8]
 8012d54:	4a06      	ldr	r2, [pc, #24]	; (8012d70 <etharp_request_dst+0x40>)
 8012d56:	9201      	str	r2, [sp, #4]
 8012d58:	9300      	str	r3, [sp, #0]
 8012d5a:	4603      	mov	r3, r0
 8012d5c:	687a      	ldr	r2, [r7, #4]
 8012d5e:	68f8      	ldr	r0, [r7, #12]
 8012d60:	f7ff ff5a 	bl	8012c18 <etharp_raw>
 8012d64:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8012d66:	4618      	mov	r0, r3
 8012d68:	3710      	adds	r7, #16
 8012d6a:	46bd      	mov	sp, r7
 8012d6c:	bd80      	pop	{r7, pc}
 8012d6e:	bf00      	nop
 8012d70:	0801840c 	.word	0x0801840c

08012d74 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8012d74:	b580      	push	{r7, lr}
 8012d76:	b082      	sub	sp, #8
 8012d78:	af00      	add	r7, sp, #0
 8012d7a:	6078      	str	r0, [r7, #4]
 8012d7c:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8012d7e:	4a05      	ldr	r2, [pc, #20]	; (8012d94 <etharp_request+0x20>)
 8012d80:	6839      	ldr	r1, [r7, #0]
 8012d82:	6878      	ldr	r0, [r7, #4]
 8012d84:	f7ff ffd4 	bl	8012d30 <etharp_request_dst>
 8012d88:	4603      	mov	r3, r0
}
 8012d8a:	4618      	mov	r0, r3
 8012d8c:	3708      	adds	r7, #8
 8012d8e:	46bd      	mov	sp, r7
 8012d90:	bd80      	pop	{r7, pc}
 8012d92:	bf00      	nop
 8012d94:	08018404 	.word	0x08018404

08012d98 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8012d98:	b580      	push	{r7, lr}
 8012d9a:	b08e      	sub	sp, #56	; 0x38
 8012d9c:	af04      	add	r7, sp, #16
 8012d9e:	6078      	str	r0, [r7, #4]
 8012da0:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8012da2:	4b79      	ldr	r3, [pc, #484]	; (8012f88 <icmp_input+0x1f0>)
 8012da4:	689b      	ldr	r3, [r3, #8]
 8012da6:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8012da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012daa:	781b      	ldrb	r3, [r3, #0]
 8012dac:	f003 030f 	and.w	r3, r3, #15
 8012db0:	b2db      	uxtb	r3, r3
 8012db2:	009b      	lsls	r3, r3, #2
 8012db4:	b2db      	uxtb	r3, r3
 8012db6:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8012db8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012dba:	2b13      	cmp	r3, #19
 8012dbc:	f240 80cd 	bls.w	8012f5a <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8012dc0:	687b      	ldr	r3, [r7, #4]
 8012dc2:	895b      	ldrh	r3, [r3, #10]
 8012dc4:	2b03      	cmp	r3, #3
 8012dc6:	f240 80ca 	bls.w	8012f5e <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8012dca:	687b      	ldr	r3, [r7, #4]
 8012dcc:	685b      	ldr	r3, [r3, #4]
 8012dce:	781b      	ldrb	r3, [r3, #0]
 8012dd0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8012dd4:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8012dd8:	2b00      	cmp	r3, #0
 8012dda:	f000 80b7 	beq.w	8012f4c <icmp_input+0x1b4>
 8012dde:	2b08      	cmp	r3, #8
 8012de0:	f040 80b7 	bne.w	8012f52 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8012de4:	4b69      	ldr	r3, [pc, #420]	; (8012f8c <icmp_input+0x1f4>)
 8012de6:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8012de8:	4b67      	ldr	r3, [pc, #412]	; (8012f88 <icmp_input+0x1f0>)
 8012dea:	695b      	ldr	r3, [r3, #20]
 8012dec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012df0:	2be0      	cmp	r3, #224	; 0xe0
 8012df2:	f000 80bb 	beq.w	8012f6c <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8012df6:	4b64      	ldr	r3, [pc, #400]	; (8012f88 <icmp_input+0x1f0>)
 8012df8:	695b      	ldr	r3, [r3, #20]
 8012dfa:	4a63      	ldr	r2, [pc, #396]	; (8012f88 <icmp_input+0x1f0>)
 8012dfc:	6812      	ldr	r2, [r2, #0]
 8012dfe:	4611      	mov	r1, r2
 8012e00:	4618      	mov	r0, r3
 8012e02:	f000 fbed 	bl	80135e0 <ip4_addr_isbroadcast_u32>
 8012e06:	4603      	mov	r3, r0
 8012e08:	2b00      	cmp	r3, #0
 8012e0a:	f040 80b1 	bne.w	8012f70 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8012e0e:	687b      	ldr	r3, [r7, #4]
 8012e10:	891b      	ldrh	r3, [r3, #8]
 8012e12:	2b07      	cmp	r3, #7
 8012e14:	f240 80a5 	bls.w	8012f62 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8012e18:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012e1a:	330e      	adds	r3, #14
 8012e1c:	4619      	mov	r1, r3
 8012e1e:	6878      	ldr	r0, [r7, #4]
 8012e20:	f7f9 f930 	bl	800c084 <pbuf_add_header>
 8012e24:	4603      	mov	r3, r0
 8012e26:	2b00      	cmp	r3, #0
 8012e28:	d04b      	beq.n	8012ec2 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8012e2a:	687b      	ldr	r3, [r7, #4]
 8012e2c:	891a      	ldrh	r2, [r3, #8]
 8012e2e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012e30:	4413      	add	r3, r2
 8012e32:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8012e34:	687b      	ldr	r3, [r7, #4]
 8012e36:	891b      	ldrh	r3, [r3, #8]
 8012e38:	8b7a      	ldrh	r2, [r7, #26]
 8012e3a:	429a      	cmp	r2, r3
 8012e3c:	f0c0 809a 	bcc.w	8012f74 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8012e40:	8b7b      	ldrh	r3, [r7, #26]
 8012e42:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012e46:	4619      	mov	r1, r3
 8012e48:	200e      	movs	r0, #14
 8012e4a:	f7f8 fecd 	bl	800bbe8 <pbuf_alloc>
 8012e4e:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8012e50:	697b      	ldr	r3, [r7, #20]
 8012e52:	2b00      	cmp	r3, #0
 8012e54:	f000 8090 	beq.w	8012f78 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8012e58:	697b      	ldr	r3, [r7, #20]
 8012e5a:	895b      	ldrh	r3, [r3, #10]
 8012e5c:	461a      	mov	r2, r3
 8012e5e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012e60:	3308      	adds	r3, #8
 8012e62:	429a      	cmp	r2, r3
 8012e64:	d203      	bcs.n	8012e6e <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8012e66:	6978      	ldr	r0, [r7, #20]
 8012e68:	f7f9 f9a2 	bl	800c1b0 <pbuf_free>
          goto icmperr;
 8012e6c:	e085      	b.n	8012f7a <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8012e6e:	697b      	ldr	r3, [r7, #20]
 8012e70:	685b      	ldr	r3, [r3, #4]
 8012e72:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8012e74:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012e76:	4618      	mov	r0, r3
 8012e78:	f001 fb34 	bl	80144e4 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8012e7c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012e7e:	4619      	mov	r1, r3
 8012e80:	6978      	ldr	r0, [r7, #20]
 8012e82:	f7f9 f90f 	bl	800c0a4 <pbuf_remove_header>
 8012e86:	4603      	mov	r3, r0
 8012e88:	2b00      	cmp	r3, #0
 8012e8a:	d009      	beq.n	8012ea0 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8012e8c:	4b40      	ldr	r3, [pc, #256]	; (8012f90 <icmp_input+0x1f8>)
 8012e8e:	22b6      	movs	r2, #182	; 0xb6
 8012e90:	4940      	ldr	r1, [pc, #256]	; (8012f94 <icmp_input+0x1fc>)
 8012e92:	4841      	ldr	r0, [pc, #260]	; (8012f98 <icmp_input+0x200>)
 8012e94:	f001 fb56 	bl	8014544 <iprintf>
          pbuf_free(r);
 8012e98:	6978      	ldr	r0, [r7, #20]
 8012e9a:	f7f9 f989 	bl	800c1b0 <pbuf_free>
          goto icmperr;
 8012e9e:	e06c      	b.n	8012f7a <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8012ea0:	6879      	ldr	r1, [r7, #4]
 8012ea2:	6978      	ldr	r0, [r7, #20]
 8012ea4:	f7f9 fa9c 	bl	800c3e0 <pbuf_copy>
 8012ea8:	4603      	mov	r3, r0
 8012eaa:	2b00      	cmp	r3, #0
 8012eac:	d003      	beq.n	8012eb6 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8012eae:	6978      	ldr	r0, [r7, #20]
 8012eb0:	f7f9 f97e 	bl	800c1b0 <pbuf_free>
          goto icmperr;
 8012eb4:	e061      	b.n	8012f7a <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8012eb6:	6878      	ldr	r0, [r7, #4]
 8012eb8:	f7f9 f97a 	bl	800c1b0 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8012ebc:	697b      	ldr	r3, [r7, #20]
 8012ebe:	607b      	str	r3, [r7, #4]
 8012ec0:	e00f      	b.n	8012ee2 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8012ec2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012ec4:	330e      	adds	r3, #14
 8012ec6:	4619      	mov	r1, r3
 8012ec8:	6878      	ldr	r0, [r7, #4]
 8012eca:	f7f9 f8eb 	bl	800c0a4 <pbuf_remove_header>
 8012ece:	4603      	mov	r3, r0
 8012ed0:	2b00      	cmp	r3, #0
 8012ed2:	d006      	beq.n	8012ee2 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8012ed4:	4b2e      	ldr	r3, [pc, #184]	; (8012f90 <icmp_input+0x1f8>)
 8012ed6:	22c7      	movs	r2, #199	; 0xc7
 8012ed8:	4930      	ldr	r1, [pc, #192]	; (8012f9c <icmp_input+0x204>)
 8012eda:	482f      	ldr	r0, [pc, #188]	; (8012f98 <icmp_input+0x200>)
 8012edc:	f001 fb32 	bl	8014544 <iprintf>
          goto icmperr;
 8012ee0:	e04b      	b.n	8012f7a <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8012ee2:	687b      	ldr	r3, [r7, #4]
 8012ee4:	685b      	ldr	r3, [r3, #4]
 8012ee6:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8012ee8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012eea:	4619      	mov	r1, r3
 8012eec:	6878      	ldr	r0, [r7, #4]
 8012eee:	f7f9 f8c9 	bl	800c084 <pbuf_add_header>
 8012ef2:	4603      	mov	r3, r0
 8012ef4:	2b00      	cmp	r3, #0
 8012ef6:	d12b      	bne.n	8012f50 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8012ef8:	687b      	ldr	r3, [r7, #4]
 8012efa:	685b      	ldr	r3, [r3, #4]
 8012efc:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8012efe:	69fb      	ldr	r3, [r7, #28]
 8012f00:	681a      	ldr	r2, [r3, #0]
 8012f02:	68fb      	ldr	r3, [r7, #12]
 8012f04:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8012f06:	4b20      	ldr	r3, [pc, #128]	; (8012f88 <icmp_input+0x1f0>)
 8012f08:	691a      	ldr	r2, [r3, #16]
 8012f0a:	68fb      	ldr	r3, [r7, #12]
 8012f0c:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8012f0e:	693b      	ldr	r3, [r7, #16]
 8012f10:	2200      	movs	r2, #0
 8012f12:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8012f14:	693b      	ldr	r3, [r7, #16]
 8012f16:	2200      	movs	r2, #0
 8012f18:	709a      	strb	r2, [r3, #2]
 8012f1a:	2200      	movs	r2, #0
 8012f1c:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8012f1e:	68fb      	ldr	r3, [r7, #12]
 8012f20:	22ff      	movs	r2, #255	; 0xff
 8012f22:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8012f24:	68fb      	ldr	r3, [r7, #12]
 8012f26:	2200      	movs	r2, #0
 8012f28:	729a      	strb	r2, [r3, #10]
 8012f2a:	2200      	movs	r2, #0
 8012f2c:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8012f2e:	683b      	ldr	r3, [r7, #0]
 8012f30:	9302      	str	r3, [sp, #8]
 8012f32:	2301      	movs	r3, #1
 8012f34:	9301      	str	r3, [sp, #4]
 8012f36:	2300      	movs	r3, #0
 8012f38:	9300      	str	r3, [sp, #0]
 8012f3a:	23ff      	movs	r3, #255	; 0xff
 8012f3c:	2200      	movs	r2, #0
 8012f3e:	69f9      	ldr	r1, [r7, #28]
 8012f40:	6878      	ldr	r0, [r7, #4]
 8012f42:	f000 fa75 	bl	8013430 <ip4_output_if>
 8012f46:	4603      	mov	r3, r0
 8012f48:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8012f4a:	e001      	b.n	8012f50 <icmp_input+0x1b8>
      break;
 8012f4c:	bf00      	nop
 8012f4e:	e000      	b.n	8012f52 <icmp_input+0x1ba>
      break;
 8012f50:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8012f52:	6878      	ldr	r0, [r7, #4]
 8012f54:	f7f9 f92c 	bl	800c1b0 <pbuf_free>
  return;
 8012f58:	e013      	b.n	8012f82 <icmp_input+0x1ea>
    goto lenerr;
 8012f5a:	bf00      	nop
 8012f5c:	e002      	b.n	8012f64 <icmp_input+0x1cc>
    goto lenerr;
 8012f5e:	bf00      	nop
 8012f60:	e000      	b.n	8012f64 <icmp_input+0x1cc>
        goto lenerr;
 8012f62:	bf00      	nop
lenerr:
  pbuf_free(p);
 8012f64:	6878      	ldr	r0, [r7, #4]
 8012f66:	f7f9 f923 	bl	800c1b0 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8012f6a:	e00a      	b.n	8012f82 <icmp_input+0x1ea>
        goto icmperr;
 8012f6c:	bf00      	nop
 8012f6e:	e004      	b.n	8012f7a <icmp_input+0x1e2>
        goto icmperr;
 8012f70:	bf00      	nop
 8012f72:	e002      	b.n	8012f7a <icmp_input+0x1e2>
          goto icmperr;
 8012f74:	bf00      	nop
 8012f76:	e000      	b.n	8012f7a <icmp_input+0x1e2>
          goto icmperr;
 8012f78:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8012f7a:	6878      	ldr	r0, [r7, #4]
 8012f7c:	f7f9 f918 	bl	800c1b0 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8012f80:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8012f82:	3728      	adds	r7, #40	; 0x28
 8012f84:	46bd      	mov	sp, r7
 8012f86:	bd80      	pop	{r7, pc}
 8012f88:	20003d5c 	.word	0x20003d5c
 8012f8c:	20003d70 	.word	0x20003d70
 8012f90:	08017eb0 	.word	0x08017eb0
 8012f94:	08017ee8 	.word	0x08017ee8
 8012f98:	08017f20 	.word	0x08017f20
 8012f9c:	08017f48 	.word	0x08017f48

08012fa0 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8012fa0:	b580      	push	{r7, lr}
 8012fa2:	b082      	sub	sp, #8
 8012fa4:	af00      	add	r7, sp, #0
 8012fa6:	6078      	str	r0, [r7, #4]
 8012fa8:	460b      	mov	r3, r1
 8012faa:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8012fac:	78fb      	ldrb	r3, [r7, #3]
 8012fae:	461a      	mov	r2, r3
 8012fb0:	2103      	movs	r1, #3
 8012fb2:	6878      	ldr	r0, [r7, #4]
 8012fb4:	f000 f814 	bl	8012fe0 <icmp_send_response>
}
 8012fb8:	bf00      	nop
 8012fba:	3708      	adds	r7, #8
 8012fbc:	46bd      	mov	sp, r7
 8012fbe:	bd80      	pop	{r7, pc}

08012fc0 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8012fc0:	b580      	push	{r7, lr}
 8012fc2:	b082      	sub	sp, #8
 8012fc4:	af00      	add	r7, sp, #0
 8012fc6:	6078      	str	r0, [r7, #4]
 8012fc8:	460b      	mov	r3, r1
 8012fca:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8012fcc:	78fb      	ldrb	r3, [r7, #3]
 8012fce:	461a      	mov	r2, r3
 8012fd0:	210b      	movs	r1, #11
 8012fd2:	6878      	ldr	r0, [r7, #4]
 8012fd4:	f000 f804 	bl	8012fe0 <icmp_send_response>
}
 8012fd8:	bf00      	nop
 8012fda:	3708      	adds	r7, #8
 8012fdc:	46bd      	mov	sp, r7
 8012fde:	bd80      	pop	{r7, pc}

08012fe0 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8012fe0:	b580      	push	{r7, lr}
 8012fe2:	b08c      	sub	sp, #48	; 0x30
 8012fe4:	af04      	add	r7, sp, #16
 8012fe6:	6078      	str	r0, [r7, #4]
 8012fe8:	460b      	mov	r3, r1
 8012fea:	70fb      	strb	r3, [r7, #3]
 8012fec:	4613      	mov	r3, r2
 8012fee:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8012ff0:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012ff4:	2124      	movs	r1, #36	; 0x24
 8012ff6:	2022      	movs	r0, #34	; 0x22
 8012ff8:	f7f8 fdf6 	bl	800bbe8 <pbuf_alloc>
 8012ffc:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8012ffe:	69fb      	ldr	r3, [r7, #28]
 8013000:	2b00      	cmp	r3, #0
 8013002:	d04c      	beq.n	801309e <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8013004:	69fb      	ldr	r3, [r7, #28]
 8013006:	895b      	ldrh	r3, [r3, #10]
 8013008:	2b23      	cmp	r3, #35	; 0x23
 801300a:	d806      	bhi.n	801301a <icmp_send_response+0x3a>
 801300c:	4b26      	ldr	r3, [pc, #152]	; (80130a8 <icmp_send_response+0xc8>)
 801300e:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8013012:	4926      	ldr	r1, [pc, #152]	; (80130ac <icmp_send_response+0xcc>)
 8013014:	4826      	ldr	r0, [pc, #152]	; (80130b0 <icmp_send_response+0xd0>)
 8013016:	f001 fa95 	bl	8014544 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801301a:	687b      	ldr	r3, [r7, #4]
 801301c:	685b      	ldr	r3, [r3, #4]
 801301e:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8013020:	69fb      	ldr	r3, [r7, #28]
 8013022:	685b      	ldr	r3, [r3, #4]
 8013024:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8013026:	697b      	ldr	r3, [r7, #20]
 8013028:	78fa      	ldrb	r2, [r7, #3]
 801302a:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801302c:	697b      	ldr	r3, [r7, #20]
 801302e:	78ba      	ldrb	r2, [r7, #2]
 8013030:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8013032:	697b      	ldr	r3, [r7, #20]
 8013034:	2200      	movs	r2, #0
 8013036:	711a      	strb	r2, [r3, #4]
 8013038:	2200      	movs	r2, #0
 801303a:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801303c:	697b      	ldr	r3, [r7, #20]
 801303e:	2200      	movs	r2, #0
 8013040:	719a      	strb	r2, [r3, #6]
 8013042:	2200      	movs	r2, #0
 8013044:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8013046:	69fb      	ldr	r3, [r7, #28]
 8013048:	685b      	ldr	r3, [r3, #4]
 801304a:	f103 0008 	add.w	r0, r3, #8
 801304e:	687b      	ldr	r3, [r7, #4]
 8013050:	685b      	ldr	r3, [r3, #4]
 8013052:	221c      	movs	r2, #28
 8013054:	4619      	mov	r1, r3
 8013056:	f001 fa45 	bl	80144e4 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801305a:	69bb      	ldr	r3, [r7, #24]
 801305c:	68db      	ldr	r3, [r3, #12]
 801305e:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8013060:	f107 030c 	add.w	r3, r7, #12
 8013064:	4618      	mov	r0, r3
 8013066:	f000 f825 	bl	80130b4 <ip4_route>
 801306a:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 801306c:	693b      	ldr	r3, [r7, #16]
 801306e:	2b00      	cmp	r3, #0
 8013070:	d011      	beq.n	8013096 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8013072:	697b      	ldr	r3, [r7, #20]
 8013074:	2200      	movs	r2, #0
 8013076:	709a      	strb	r2, [r3, #2]
 8013078:	2200      	movs	r2, #0
 801307a:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801307c:	f107 020c 	add.w	r2, r7, #12
 8013080:	693b      	ldr	r3, [r7, #16]
 8013082:	9302      	str	r3, [sp, #8]
 8013084:	2301      	movs	r3, #1
 8013086:	9301      	str	r3, [sp, #4]
 8013088:	2300      	movs	r3, #0
 801308a:	9300      	str	r3, [sp, #0]
 801308c:	23ff      	movs	r3, #255	; 0xff
 801308e:	2100      	movs	r1, #0
 8013090:	69f8      	ldr	r0, [r7, #28]
 8013092:	f000 f9cd 	bl	8013430 <ip4_output_if>
  }
  pbuf_free(q);
 8013096:	69f8      	ldr	r0, [r7, #28]
 8013098:	f7f9 f88a 	bl	800c1b0 <pbuf_free>
 801309c:	e000      	b.n	80130a0 <icmp_send_response+0xc0>
    return;
 801309e:	bf00      	nop
}
 80130a0:	3720      	adds	r7, #32
 80130a2:	46bd      	mov	sp, r7
 80130a4:	bd80      	pop	{r7, pc}
 80130a6:	bf00      	nop
 80130a8:	08017eb0 	.word	0x08017eb0
 80130ac:	08017f7c 	.word	0x08017f7c
 80130b0:	08017f20 	.word	0x08017f20

080130b4 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 80130b4:	b480      	push	{r7}
 80130b6:	b085      	sub	sp, #20
 80130b8:	af00      	add	r7, sp, #0
 80130ba:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 80130bc:	4b33      	ldr	r3, [pc, #204]	; (801318c <ip4_route+0xd8>)
 80130be:	681b      	ldr	r3, [r3, #0]
 80130c0:	60fb      	str	r3, [r7, #12]
 80130c2:	e036      	b.n	8013132 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80130c4:	68fb      	ldr	r3, [r7, #12]
 80130c6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80130ca:	f003 0301 	and.w	r3, r3, #1
 80130ce:	b2db      	uxtb	r3, r3
 80130d0:	2b00      	cmp	r3, #0
 80130d2:	d02b      	beq.n	801312c <ip4_route+0x78>
 80130d4:	68fb      	ldr	r3, [r7, #12]
 80130d6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80130da:	089b      	lsrs	r3, r3, #2
 80130dc:	f003 0301 	and.w	r3, r3, #1
 80130e0:	b2db      	uxtb	r3, r3
 80130e2:	2b00      	cmp	r3, #0
 80130e4:	d022      	beq.n	801312c <ip4_route+0x78>
 80130e6:	68fb      	ldr	r3, [r7, #12]
 80130e8:	3304      	adds	r3, #4
 80130ea:	681b      	ldr	r3, [r3, #0]
 80130ec:	2b00      	cmp	r3, #0
 80130ee:	d01d      	beq.n	801312c <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 80130f0:	687b      	ldr	r3, [r7, #4]
 80130f2:	681a      	ldr	r2, [r3, #0]
 80130f4:	68fb      	ldr	r3, [r7, #12]
 80130f6:	3304      	adds	r3, #4
 80130f8:	681b      	ldr	r3, [r3, #0]
 80130fa:	405a      	eors	r2, r3
 80130fc:	68fb      	ldr	r3, [r7, #12]
 80130fe:	3308      	adds	r3, #8
 8013100:	681b      	ldr	r3, [r3, #0]
 8013102:	4013      	ands	r3, r2
 8013104:	2b00      	cmp	r3, #0
 8013106:	d101      	bne.n	801310c <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8013108:	68fb      	ldr	r3, [r7, #12]
 801310a:	e038      	b.n	801317e <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801310c:	68fb      	ldr	r3, [r7, #12]
 801310e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013112:	f003 0302 	and.w	r3, r3, #2
 8013116:	2b00      	cmp	r3, #0
 8013118:	d108      	bne.n	801312c <ip4_route+0x78>
 801311a:	687b      	ldr	r3, [r7, #4]
 801311c:	681a      	ldr	r2, [r3, #0]
 801311e:	68fb      	ldr	r3, [r7, #12]
 8013120:	330c      	adds	r3, #12
 8013122:	681b      	ldr	r3, [r3, #0]
 8013124:	429a      	cmp	r2, r3
 8013126:	d101      	bne.n	801312c <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8013128:	68fb      	ldr	r3, [r7, #12]
 801312a:	e028      	b.n	801317e <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 801312c:	68fb      	ldr	r3, [r7, #12]
 801312e:	681b      	ldr	r3, [r3, #0]
 8013130:	60fb      	str	r3, [r7, #12]
 8013132:	68fb      	ldr	r3, [r7, #12]
 8013134:	2b00      	cmp	r3, #0
 8013136:	d1c5      	bne.n	80130c4 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8013138:	4b15      	ldr	r3, [pc, #84]	; (8013190 <ip4_route+0xdc>)
 801313a:	681b      	ldr	r3, [r3, #0]
 801313c:	2b00      	cmp	r3, #0
 801313e:	d01a      	beq.n	8013176 <ip4_route+0xc2>
 8013140:	4b13      	ldr	r3, [pc, #76]	; (8013190 <ip4_route+0xdc>)
 8013142:	681b      	ldr	r3, [r3, #0]
 8013144:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013148:	f003 0301 	and.w	r3, r3, #1
 801314c:	2b00      	cmp	r3, #0
 801314e:	d012      	beq.n	8013176 <ip4_route+0xc2>
 8013150:	4b0f      	ldr	r3, [pc, #60]	; (8013190 <ip4_route+0xdc>)
 8013152:	681b      	ldr	r3, [r3, #0]
 8013154:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013158:	f003 0304 	and.w	r3, r3, #4
 801315c:	2b00      	cmp	r3, #0
 801315e:	d00a      	beq.n	8013176 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8013160:	4b0b      	ldr	r3, [pc, #44]	; (8013190 <ip4_route+0xdc>)
 8013162:	681b      	ldr	r3, [r3, #0]
 8013164:	3304      	adds	r3, #4
 8013166:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8013168:	2b00      	cmp	r3, #0
 801316a:	d004      	beq.n	8013176 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801316c:	687b      	ldr	r3, [r7, #4]
 801316e:	681b      	ldr	r3, [r3, #0]
 8013170:	b2db      	uxtb	r3, r3
 8013172:	2b7f      	cmp	r3, #127	; 0x7f
 8013174:	d101      	bne.n	801317a <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8013176:	2300      	movs	r3, #0
 8013178:	e001      	b.n	801317e <ip4_route+0xca>
  }

  return netif_default;
 801317a:	4b05      	ldr	r3, [pc, #20]	; (8013190 <ip4_route+0xdc>)
 801317c:	681b      	ldr	r3, [r3, #0]
}
 801317e:	4618      	mov	r0, r3
 8013180:	3714      	adds	r7, #20
 8013182:	46bd      	mov	sp, r7
 8013184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013188:	4770      	bx	lr
 801318a:	bf00      	nop
 801318c:	20007290 	.word	0x20007290
 8013190:	20007294 	.word	0x20007294

08013194 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8013194:	b580      	push	{r7, lr}
 8013196:	b082      	sub	sp, #8
 8013198:	af00      	add	r7, sp, #0
 801319a:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801319c:	687b      	ldr	r3, [r7, #4]
 801319e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80131a2:	f003 0301 	and.w	r3, r3, #1
 80131a6:	b2db      	uxtb	r3, r3
 80131a8:	2b00      	cmp	r3, #0
 80131aa:	d016      	beq.n	80131da <ip4_input_accept+0x46>
 80131ac:	687b      	ldr	r3, [r7, #4]
 80131ae:	3304      	adds	r3, #4
 80131b0:	681b      	ldr	r3, [r3, #0]
 80131b2:	2b00      	cmp	r3, #0
 80131b4:	d011      	beq.n	80131da <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80131b6:	4b0b      	ldr	r3, [pc, #44]	; (80131e4 <ip4_input_accept+0x50>)
 80131b8:	695a      	ldr	r2, [r3, #20]
 80131ba:	687b      	ldr	r3, [r7, #4]
 80131bc:	3304      	adds	r3, #4
 80131be:	681b      	ldr	r3, [r3, #0]
 80131c0:	429a      	cmp	r2, r3
 80131c2:	d008      	beq.n	80131d6 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 80131c4:	4b07      	ldr	r3, [pc, #28]	; (80131e4 <ip4_input_accept+0x50>)
 80131c6:	695b      	ldr	r3, [r3, #20]
 80131c8:	6879      	ldr	r1, [r7, #4]
 80131ca:	4618      	mov	r0, r3
 80131cc:	f000 fa08 	bl	80135e0 <ip4_addr_isbroadcast_u32>
 80131d0:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80131d2:	2b00      	cmp	r3, #0
 80131d4:	d001      	beq.n	80131da <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 80131d6:	2301      	movs	r3, #1
 80131d8:	e000      	b.n	80131dc <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 80131da:	2300      	movs	r3, #0
}
 80131dc:	4618      	mov	r0, r3
 80131de:	3708      	adds	r7, #8
 80131e0:	46bd      	mov	sp, r7
 80131e2:	bd80      	pop	{r7, pc}
 80131e4:	20003d5c 	.word	0x20003d5c

080131e8 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 80131e8:	b580      	push	{r7, lr}
 80131ea:	b086      	sub	sp, #24
 80131ec:	af00      	add	r7, sp, #0
 80131ee:	6078      	str	r0, [r7, #4]
 80131f0:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 80131f2:	687b      	ldr	r3, [r7, #4]
 80131f4:	685b      	ldr	r3, [r3, #4]
 80131f6:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 80131f8:	697b      	ldr	r3, [r7, #20]
 80131fa:	781b      	ldrb	r3, [r3, #0]
 80131fc:	091b      	lsrs	r3, r3, #4
 80131fe:	b2db      	uxtb	r3, r3
 8013200:	2b04      	cmp	r3, #4
 8013202:	d004      	beq.n	801320e <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8013204:	6878      	ldr	r0, [r7, #4]
 8013206:	f7f8 ffd3 	bl	800c1b0 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801320a:	2300      	movs	r3, #0
 801320c:	e107      	b.n	801341e <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801320e:	697b      	ldr	r3, [r7, #20]
 8013210:	781b      	ldrb	r3, [r3, #0]
 8013212:	f003 030f 	and.w	r3, r3, #15
 8013216:	b2db      	uxtb	r3, r3
 8013218:	009b      	lsls	r3, r3, #2
 801321a:	b2db      	uxtb	r3, r3
 801321c:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801321e:	697b      	ldr	r3, [r7, #20]
 8013220:	885b      	ldrh	r3, [r3, #2]
 8013222:	b29b      	uxth	r3, r3
 8013224:	4618      	mov	r0, r3
 8013226:	f7f7 fd30 	bl	800ac8a <lwip_htons>
 801322a:	4603      	mov	r3, r0
 801322c:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801322e:	687b      	ldr	r3, [r7, #4]
 8013230:	891b      	ldrh	r3, [r3, #8]
 8013232:	89ba      	ldrh	r2, [r7, #12]
 8013234:	429a      	cmp	r2, r3
 8013236:	d204      	bcs.n	8013242 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8013238:	89bb      	ldrh	r3, [r7, #12]
 801323a:	4619      	mov	r1, r3
 801323c:	6878      	ldr	r0, [r7, #4]
 801323e:	f7f8 fe31 	bl	800bea4 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8013242:	687b      	ldr	r3, [r7, #4]
 8013244:	895b      	ldrh	r3, [r3, #10]
 8013246:	89fa      	ldrh	r2, [r7, #14]
 8013248:	429a      	cmp	r2, r3
 801324a:	d807      	bhi.n	801325c <ip4_input+0x74>
 801324c:	687b      	ldr	r3, [r7, #4]
 801324e:	891b      	ldrh	r3, [r3, #8]
 8013250:	89ba      	ldrh	r2, [r7, #12]
 8013252:	429a      	cmp	r2, r3
 8013254:	d802      	bhi.n	801325c <ip4_input+0x74>
 8013256:	89fb      	ldrh	r3, [r7, #14]
 8013258:	2b13      	cmp	r3, #19
 801325a:	d804      	bhi.n	8013266 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801325c:	6878      	ldr	r0, [r7, #4]
 801325e:	f7f8 ffa7 	bl	800c1b0 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8013262:	2300      	movs	r3, #0
 8013264:	e0db      	b.n	801341e <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8013266:	697b      	ldr	r3, [r7, #20]
 8013268:	691b      	ldr	r3, [r3, #16]
 801326a:	4a6f      	ldr	r2, [pc, #444]	; (8013428 <ip4_input+0x240>)
 801326c:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801326e:	697b      	ldr	r3, [r7, #20]
 8013270:	68db      	ldr	r3, [r3, #12]
 8013272:	4a6d      	ldr	r2, [pc, #436]	; (8013428 <ip4_input+0x240>)
 8013274:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8013276:	4b6c      	ldr	r3, [pc, #432]	; (8013428 <ip4_input+0x240>)
 8013278:	695b      	ldr	r3, [r3, #20]
 801327a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801327e:	2be0      	cmp	r3, #224	; 0xe0
 8013280:	d112      	bne.n	80132a8 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8013282:	683b      	ldr	r3, [r7, #0]
 8013284:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013288:	f003 0301 	and.w	r3, r3, #1
 801328c:	b2db      	uxtb	r3, r3
 801328e:	2b00      	cmp	r3, #0
 8013290:	d007      	beq.n	80132a2 <ip4_input+0xba>
 8013292:	683b      	ldr	r3, [r7, #0]
 8013294:	3304      	adds	r3, #4
 8013296:	681b      	ldr	r3, [r3, #0]
 8013298:	2b00      	cmp	r3, #0
 801329a:	d002      	beq.n	80132a2 <ip4_input+0xba>
      netif = inp;
 801329c:	683b      	ldr	r3, [r7, #0]
 801329e:	613b      	str	r3, [r7, #16]
 80132a0:	e02a      	b.n	80132f8 <ip4_input+0x110>
    } else {
      netif = NULL;
 80132a2:	2300      	movs	r3, #0
 80132a4:	613b      	str	r3, [r7, #16]
 80132a6:	e027      	b.n	80132f8 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 80132a8:	6838      	ldr	r0, [r7, #0]
 80132aa:	f7ff ff73 	bl	8013194 <ip4_input_accept>
 80132ae:	4603      	mov	r3, r0
 80132b0:	2b00      	cmp	r3, #0
 80132b2:	d002      	beq.n	80132ba <ip4_input+0xd2>
      netif = inp;
 80132b4:	683b      	ldr	r3, [r7, #0]
 80132b6:	613b      	str	r3, [r7, #16]
 80132b8:	e01e      	b.n	80132f8 <ip4_input+0x110>
    } else {
      netif = NULL;
 80132ba:	2300      	movs	r3, #0
 80132bc:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 80132be:	4b5a      	ldr	r3, [pc, #360]	; (8013428 <ip4_input+0x240>)
 80132c0:	695b      	ldr	r3, [r3, #20]
 80132c2:	b2db      	uxtb	r3, r3
 80132c4:	2b7f      	cmp	r3, #127	; 0x7f
 80132c6:	d017      	beq.n	80132f8 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 80132c8:	4b58      	ldr	r3, [pc, #352]	; (801342c <ip4_input+0x244>)
 80132ca:	681b      	ldr	r3, [r3, #0]
 80132cc:	613b      	str	r3, [r7, #16]
 80132ce:	e00e      	b.n	80132ee <ip4_input+0x106>
          if (netif == inp) {
 80132d0:	693a      	ldr	r2, [r7, #16]
 80132d2:	683b      	ldr	r3, [r7, #0]
 80132d4:	429a      	cmp	r2, r3
 80132d6:	d006      	beq.n	80132e6 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 80132d8:	6938      	ldr	r0, [r7, #16]
 80132da:	f7ff ff5b 	bl	8013194 <ip4_input_accept>
 80132de:	4603      	mov	r3, r0
 80132e0:	2b00      	cmp	r3, #0
 80132e2:	d108      	bne.n	80132f6 <ip4_input+0x10e>
 80132e4:	e000      	b.n	80132e8 <ip4_input+0x100>
            continue;
 80132e6:	bf00      	nop
        NETIF_FOREACH(netif) {
 80132e8:	693b      	ldr	r3, [r7, #16]
 80132ea:	681b      	ldr	r3, [r3, #0]
 80132ec:	613b      	str	r3, [r7, #16]
 80132ee:	693b      	ldr	r3, [r7, #16]
 80132f0:	2b00      	cmp	r3, #0
 80132f2:	d1ed      	bne.n	80132d0 <ip4_input+0xe8>
 80132f4:	e000      	b.n	80132f8 <ip4_input+0x110>
            break;
 80132f6:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80132f8:	4b4b      	ldr	r3, [pc, #300]	; (8013428 <ip4_input+0x240>)
 80132fa:	691b      	ldr	r3, [r3, #16]
 80132fc:	6839      	ldr	r1, [r7, #0]
 80132fe:	4618      	mov	r0, r3
 8013300:	f000 f96e 	bl	80135e0 <ip4_addr_isbroadcast_u32>
 8013304:	4603      	mov	r3, r0
 8013306:	2b00      	cmp	r3, #0
 8013308:	d105      	bne.n	8013316 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801330a:	4b47      	ldr	r3, [pc, #284]	; (8013428 <ip4_input+0x240>)
 801330c:	691b      	ldr	r3, [r3, #16]
 801330e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8013312:	2be0      	cmp	r3, #224	; 0xe0
 8013314:	d104      	bne.n	8013320 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8013316:	6878      	ldr	r0, [r7, #4]
 8013318:	f7f8 ff4a 	bl	800c1b0 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 801331c:	2300      	movs	r3, #0
 801331e:	e07e      	b.n	801341e <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8013320:	693b      	ldr	r3, [r7, #16]
 8013322:	2b00      	cmp	r3, #0
 8013324:	d104      	bne.n	8013330 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8013326:	6878      	ldr	r0, [r7, #4]
 8013328:	f7f8 ff42 	bl	800c1b0 <pbuf_free>
    return ERR_OK;
 801332c:	2300      	movs	r3, #0
 801332e:	e076      	b.n	801341e <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8013330:	697b      	ldr	r3, [r7, #20]
 8013332:	88db      	ldrh	r3, [r3, #6]
 8013334:	b29b      	uxth	r3, r3
 8013336:	461a      	mov	r2, r3
 8013338:	f64f 733f 	movw	r3, #65343	; 0xff3f
 801333c:	4013      	ands	r3, r2
 801333e:	2b00      	cmp	r3, #0
 8013340:	d00b      	beq.n	801335a <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8013342:	6878      	ldr	r0, [r7, #4]
 8013344:	f000 fc92 	bl	8013c6c <ip4_reass>
 8013348:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801334a:	687b      	ldr	r3, [r7, #4]
 801334c:	2b00      	cmp	r3, #0
 801334e:	d101      	bne.n	8013354 <ip4_input+0x16c>
      return ERR_OK;
 8013350:	2300      	movs	r3, #0
 8013352:	e064      	b.n	801341e <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8013354:	687b      	ldr	r3, [r7, #4]
 8013356:	685b      	ldr	r3, [r3, #4]
 8013358:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801335a:	4a33      	ldr	r2, [pc, #204]	; (8013428 <ip4_input+0x240>)
 801335c:	693b      	ldr	r3, [r7, #16]
 801335e:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8013360:	4a31      	ldr	r2, [pc, #196]	; (8013428 <ip4_input+0x240>)
 8013362:	683b      	ldr	r3, [r7, #0]
 8013364:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8013366:	4a30      	ldr	r2, [pc, #192]	; (8013428 <ip4_input+0x240>)
 8013368:	697b      	ldr	r3, [r7, #20]
 801336a:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 801336c:	697b      	ldr	r3, [r7, #20]
 801336e:	781b      	ldrb	r3, [r3, #0]
 8013370:	f003 030f 	and.w	r3, r3, #15
 8013374:	b2db      	uxtb	r3, r3
 8013376:	009b      	lsls	r3, r3, #2
 8013378:	b2db      	uxtb	r3, r3
 801337a:	b29a      	uxth	r2, r3
 801337c:	4b2a      	ldr	r3, [pc, #168]	; (8013428 <ip4_input+0x240>)
 801337e:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8013380:	89fb      	ldrh	r3, [r7, #14]
 8013382:	4619      	mov	r1, r3
 8013384:	6878      	ldr	r0, [r7, #4]
 8013386:	f7f8 fe8d 	bl	800c0a4 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801338a:	697b      	ldr	r3, [r7, #20]
 801338c:	7a5b      	ldrb	r3, [r3, #9]
 801338e:	2b11      	cmp	r3, #17
 8013390:	d006      	beq.n	80133a0 <ip4_input+0x1b8>
 8013392:	2b11      	cmp	r3, #17
 8013394:	dc13      	bgt.n	80133be <ip4_input+0x1d6>
 8013396:	2b01      	cmp	r3, #1
 8013398:	d00c      	beq.n	80133b4 <ip4_input+0x1cc>
 801339a:	2b06      	cmp	r3, #6
 801339c:	d005      	beq.n	80133aa <ip4_input+0x1c2>
 801339e:	e00e      	b.n	80133be <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 80133a0:	6839      	ldr	r1, [r7, #0]
 80133a2:	6878      	ldr	r0, [r7, #4]
 80133a4:	f7fe fc68 	bl	8011c78 <udp_input>
        break;
 80133a8:	e026      	b.n	80133f8 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 80133aa:	6839      	ldr	r1, [r7, #0]
 80133ac:	6878      	ldr	r0, [r7, #4]
 80133ae:	f7fa fd27 	bl	800de00 <tcp_input>
        break;
 80133b2:	e021      	b.n	80133f8 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 80133b4:	6839      	ldr	r1, [r7, #0]
 80133b6:	6878      	ldr	r0, [r7, #4]
 80133b8:	f7ff fcee 	bl	8012d98 <icmp_input>
        break;
 80133bc:	e01c      	b.n	80133f8 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80133be:	4b1a      	ldr	r3, [pc, #104]	; (8013428 <ip4_input+0x240>)
 80133c0:	695b      	ldr	r3, [r3, #20]
 80133c2:	6939      	ldr	r1, [r7, #16]
 80133c4:	4618      	mov	r0, r3
 80133c6:	f000 f90b 	bl	80135e0 <ip4_addr_isbroadcast_u32>
 80133ca:	4603      	mov	r3, r0
 80133cc:	2b00      	cmp	r3, #0
 80133ce:	d10f      	bne.n	80133f0 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80133d0:	4b15      	ldr	r3, [pc, #84]	; (8013428 <ip4_input+0x240>)
 80133d2:	695b      	ldr	r3, [r3, #20]
 80133d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80133d8:	2be0      	cmp	r3, #224	; 0xe0
 80133da:	d009      	beq.n	80133f0 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 80133dc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80133e0:	4619      	mov	r1, r3
 80133e2:	6878      	ldr	r0, [r7, #4]
 80133e4:	f7f8 fed1 	bl	800c18a <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 80133e8:	2102      	movs	r1, #2
 80133ea:	6878      	ldr	r0, [r7, #4]
 80133ec:	f7ff fdd8 	bl	8012fa0 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 80133f0:	6878      	ldr	r0, [r7, #4]
 80133f2:	f7f8 fedd 	bl	800c1b0 <pbuf_free>
        break;
 80133f6:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 80133f8:	4b0b      	ldr	r3, [pc, #44]	; (8013428 <ip4_input+0x240>)
 80133fa:	2200      	movs	r2, #0
 80133fc:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 80133fe:	4b0a      	ldr	r3, [pc, #40]	; (8013428 <ip4_input+0x240>)
 8013400:	2200      	movs	r2, #0
 8013402:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8013404:	4b08      	ldr	r3, [pc, #32]	; (8013428 <ip4_input+0x240>)
 8013406:	2200      	movs	r2, #0
 8013408:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801340a:	4b07      	ldr	r3, [pc, #28]	; (8013428 <ip4_input+0x240>)
 801340c:	2200      	movs	r2, #0
 801340e:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8013410:	4b05      	ldr	r3, [pc, #20]	; (8013428 <ip4_input+0x240>)
 8013412:	2200      	movs	r2, #0
 8013414:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8013416:	4b04      	ldr	r3, [pc, #16]	; (8013428 <ip4_input+0x240>)
 8013418:	2200      	movs	r2, #0
 801341a:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 801341c:	2300      	movs	r3, #0
}
 801341e:	4618      	mov	r0, r3
 8013420:	3718      	adds	r7, #24
 8013422:	46bd      	mov	sp, r7
 8013424:	bd80      	pop	{r7, pc}
 8013426:	bf00      	nop
 8013428:	20003d5c 	.word	0x20003d5c
 801342c:	20007290 	.word	0x20007290

08013430 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8013430:	b580      	push	{r7, lr}
 8013432:	b08a      	sub	sp, #40	; 0x28
 8013434:	af04      	add	r7, sp, #16
 8013436:	60f8      	str	r0, [r7, #12]
 8013438:	60b9      	str	r1, [r7, #8]
 801343a:	607a      	str	r2, [r7, #4]
 801343c:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801343e:	68bb      	ldr	r3, [r7, #8]
 8013440:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8013442:	687b      	ldr	r3, [r7, #4]
 8013444:	2b00      	cmp	r3, #0
 8013446:	d009      	beq.n	801345c <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8013448:	68bb      	ldr	r3, [r7, #8]
 801344a:	2b00      	cmp	r3, #0
 801344c:	d003      	beq.n	8013456 <ip4_output_if+0x26>
 801344e:	68bb      	ldr	r3, [r7, #8]
 8013450:	681b      	ldr	r3, [r3, #0]
 8013452:	2b00      	cmp	r3, #0
 8013454:	d102      	bne.n	801345c <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8013456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013458:	3304      	adds	r3, #4
 801345a:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801345c:	78fa      	ldrb	r2, [r7, #3]
 801345e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013460:	9302      	str	r3, [sp, #8]
 8013462:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8013466:	9301      	str	r3, [sp, #4]
 8013468:	f897 3020 	ldrb.w	r3, [r7, #32]
 801346c:	9300      	str	r3, [sp, #0]
 801346e:	4613      	mov	r3, r2
 8013470:	687a      	ldr	r2, [r7, #4]
 8013472:	6979      	ldr	r1, [r7, #20]
 8013474:	68f8      	ldr	r0, [r7, #12]
 8013476:	f000 f805 	bl	8013484 <ip4_output_if_src>
 801347a:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 801347c:	4618      	mov	r0, r3
 801347e:	3718      	adds	r7, #24
 8013480:	46bd      	mov	sp, r7
 8013482:	bd80      	pop	{r7, pc}

08013484 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8013484:	b580      	push	{r7, lr}
 8013486:	b088      	sub	sp, #32
 8013488:	af00      	add	r7, sp, #0
 801348a:	60f8      	str	r0, [r7, #12]
 801348c:	60b9      	str	r1, [r7, #8]
 801348e:	607a      	str	r2, [r7, #4]
 8013490:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8013492:	68fb      	ldr	r3, [r7, #12]
 8013494:	7b9b      	ldrb	r3, [r3, #14]
 8013496:	2b01      	cmp	r3, #1
 8013498:	d006      	beq.n	80134a8 <ip4_output_if_src+0x24>
 801349a:	4b4b      	ldr	r3, [pc, #300]	; (80135c8 <ip4_output_if_src+0x144>)
 801349c:	f44f 7255 	mov.w	r2, #852	; 0x354
 80134a0:	494a      	ldr	r1, [pc, #296]	; (80135cc <ip4_output_if_src+0x148>)
 80134a2:	484b      	ldr	r0, [pc, #300]	; (80135d0 <ip4_output_if_src+0x14c>)
 80134a4:	f001 f84e 	bl	8014544 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 80134a8:	687b      	ldr	r3, [r7, #4]
 80134aa:	2b00      	cmp	r3, #0
 80134ac:	d060      	beq.n	8013570 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 80134ae:	2314      	movs	r3, #20
 80134b0:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 80134b2:	2114      	movs	r1, #20
 80134b4:	68f8      	ldr	r0, [r7, #12]
 80134b6:	f7f8 fde5 	bl	800c084 <pbuf_add_header>
 80134ba:	4603      	mov	r3, r0
 80134bc:	2b00      	cmp	r3, #0
 80134be:	d002      	beq.n	80134c6 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80134c0:	f06f 0301 	mvn.w	r3, #1
 80134c4:	e07c      	b.n	80135c0 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 80134c6:	68fb      	ldr	r3, [r7, #12]
 80134c8:	685b      	ldr	r3, [r3, #4]
 80134ca:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 80134cc:	68fb      	ldr	r3, [r7, #12]
 80134ce:	895b      	ldrh	r3, [r3, #10]
 80134d0:	2b13      	cmp	r3, #19
 80134d2:	d806      	bhi.n	80134e2 <ip4_output_if_src+0x5e>
 80134d4:	4b3c      	ldr	r3, [pc, #240]	; (80135c8 <ip4_output_if_src+0x144>)
 80134d6:	f44f 7262 	mov.w	r2, #904	; 0x388
 80134da:	493e      	ldr	r1, [pc, #248]	; (80135d4 <ip4_output_if_src+0x150>)
 80134dc:	483c      	ldr	r0, [pc, #240]	; (80135d0 <ip4_output_if_src+0x14c>)
 80134de:	f001 f831 	bl	8014544 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 80134e2:	69fb      	ldr	r3, [r7, #28]
 80134e4:	78fa      	ldrb	r2, [r7, #3]
 80134e6:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 80134e8:	69fb      	ldr	r3, [r7, #28]
 80134ea:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80134ee:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 80134f0:	687b      	ldr	r3, [r7, #4]
 80134f2:	681a      	ldr	r2, [r3, #0]
 80134f4:	69fb      	ldr	r3, [r7, #28]
 80134f6:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 80134f8:	8b7b      	ldrh	r3, [r7, #26]
 80134fa:	089b      	lsrs	r3, r3, #2
 80134fc:	b29b      	uxth	r3, r3
 80134fe:	b2db      	uxtb	r3, r3
 8013500:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013504:	b2da      	uxtb	r2, r3
 8013506:	69fb      	ldr	r3, [r7, #28]
 8013508:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801350a:	69fb      	ldr	r3, [r7, #28]
 801350c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8013510:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8013512:	68fb      	ldr	r3, [r7, #12]
 8013514:	891b      	ldrh	r3, [r3, #8]
 8013516:	4618      	mov	r0, r3
 8013518:	f7f7 fbb7 	bl	800ac8a <lwip_htons>
 801351c:	4603      	mov	r3, r0
 801351e:	461a      	mov	r2, r3
 8013520:	69fb      	ldr	r3, [r7, #28]
 8013522:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8013524:	69fb      	ldr	r3, [r7, #28]
 8013526:	2200      	movs	r2, #0
 8013528:	719a      	strb	r2, [r3, #6]
 801352a:	2200      	movs	r2, #0
 801352c:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801352e:	4b2a      	ldr	r3, [pc, #168]	; (80135d8 <ip4_output_if_src+0x154>)
 8013530:	881b      	ldrh	r3, [r3, #0]
 8013532:	4618      	mov	r0, r3
 8013534:	f7f7 fba9 	bl	800ac8a <lwip_htons>
 8013538:	4603      	mov	r3, r0
 801353a:	461a      	mov	r2, r3
 801353c:	69fb      	ldr	r3, [r7, #28]
 801353e:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8013540:	4b25      	ldr	r3, [pc, #148]	; (80135d8 <ip4_output_if_src+0x154>)
 8013542:	881b      	ldrh	r3, [r3, #0]
 8013544:	3301      	adds	r3, #1
 8013546:	b29a      	uxth	r2, r3
 8013548:	4b23      	ldr	r3, [pc, #140]	; (80135d8 <ip4_output_if_src+0x154>)
 801354a:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801354c:	68bb      	ldr	r3, [r7, #8]
 801354e:	2b00      	cmp	r3, #0
 8013550:	d104      	bne.n	801355c <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8013552:	4b22      	ldr	r3, [pc, #136]	; (80135dc <ip4_output_if_src+0x158>)
 8013554:	681a      	ldr	r2, [r3, #0]
 8013556:	69fb      	ldr	r3, [r7, #28]
 8013558:	60da      	str	r2, [r3, #12]
 801355a:	e003      	b.n	8013564 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801355c:	68bb      	ldr	r3, [r7, #8]
 801355e:	681a      	ldr	r2, [r3, #0]
 8013560:	69fb      	ldr	r3, [r7, #28]
 8013562:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8013564:	69fb      	ldr	r3, [r7, #28]
 8013566:	2200      	movs	r2, #0
 8013568:	729a      	strb	r2, [r3, #10]
 801356a:	2200      	movs	r2, #0
 801356c:	72da      	strb	r2, [r3, #11]
 801356e:	e00f      	b.n	8013590 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8013570:	68fb      	ldr	r3, [r7, #12]
 8013572:	895b      	ldrh	r3, [r3, #10]
 8013574:	2b13      	cmp	r3, #19
 8013576:	d802      	bhi.n	801357e <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8013578:	f06f 0301 	mvn.w	r3, #1
 801357c:	e020      	b.n	80135c0 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801357e:	68fb      	ldr	r3, [r7, #12]
 8013580:	685b      	ldr	r3, [r3, #4]
 8013582:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8013584:	69fb      	ldr	r3, [r7, #28]
 8013586:	691b      	ldr	r3, [r3, #16]
 8013588:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801358a:	f107 0314 	add.w	r3, r7, #20
 801358e:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8013590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013592:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8013594:	2b00      	cmp	r3, #0
 8013596:	d00c      	beq.n	80135b2 <ip4_output_if_src+0x12e>
 8013598:	68fb      	ldr	r3, [r7, #12]
 801359a:	891a      	ldrh	r2, [r3, #8]
 801359c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801359e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80135a0:	429a      	cmp	r2, r3
 80135a2:	d906      	bls.n	80135b2 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 80135a4:	687a      	ldr	r2, [r7, #4]
 80135a6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80135a8:	68f8      	ldr	r0, [r7, #12]
 80135aa:	f000 fd4d 	bl	8014048 <ip4_frag>
 80135ae:	4603      	mov	r3, r0
 80135b0:	e006      	b.n	80135c0 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 80135b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80135b4:	695b      	ldr	r3, [r3, #20]
 80135b6:	687a      	ldr	r2, [r7, #4]
 80135b8:	68f9      	ldr	r1, [r7, #12]
 80135ba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80135bc:	4798      	blx	r3
 80135be:	4603      	mov	r3, r0
}
 80135c0:	4618      	mov	r0, r3
 80135c2:	3720      	adds	r7, #32
 80135c4:	46bd      	mov	sp, r7
 80135c6:	bd80      	pop	{r7, pc}
 80135c8:	08017fa8 	.word	0x08017fa8
 80135cc:	08017fdc 	.word	0x08017fdc
 80135d0:	08017fe8 	.word	0x08017fe8
 80135d4:	08018010 	.word	0x08018010
 80135d8:	2000021a 	.word	0x2000021a
 80135dc:	08018400 	.word	0x08018400

080135e0 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 80135e0:	b480      	push	{r7}
 80135e2:	b085      	sub	sp, #20
 80135e4:	af00      	add	r7, sp, #0
 80135e6:	6078      	str	r0, [r7, #4]
 80135e8:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 80135ea:	687b      	ldr	r3, [r7, #4]
 80135ec:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 80135ee:	687b      	ldr	r3, [r7, #4]
 80135f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80135f4:	d002      	beq.n	80135fc <ip4_addr_isbroadcast_u32+0x1c>
 80135f6:	687b      	ldr	r3, [r7, #4]
 80135f8:	2b00      	cmp	r3, #0
 80135fa:	d101      	bne.n	8013600 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 80135fc:	2301      	movs	r3, #1
 80135fe:	e02a      	b.n	8013656 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8013600:	683b      	ldr	r3, [r7, #0]
 8013602:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013606:	f003 0302 	and.w	r3, r3, #2
 801360a:	2b00      	cmp	r3, #0
 801360c:	d101      	bne.n	8013612 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801360e:	2300      	movs	r3, #0
 8013610:	e021      	b.n	8013656 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8013612:	683b      	ldr	r3, [r7, #0]
 8013614:	3304      	adds	r3, #4
 8013616:	681b      	ldr	r3, [r3, #0]
 8013618:	687a      	ldr	r2, [r7, #4]
 801361a:	429a      	cmp	r2, r3
 801361c:	d101      	bne.n	8013622 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801361e:	2300      	movs	r3, #0
 8013620:	e019      	b.n	8013656 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8013622:	68fa      	ldr	r2, [r7, #12]
 8013624:	683b      	ldr	r3, [r7, #0]
 8013626:	3304      	adds	r3, #4
 8013628:	681b      	ldr	r3, [r3, #0]
 801362a:	405a      	eors	r2, r3
 801362c:	683b      	ldr	r3, [r7, #0]
 801362e:	3308      	adds	r3, #8
 8013630:	681b      	ldr	r3, [r3, #0]
 8013632:	4013      	ands	r3, r2
 8013634:	2b00      	cmp	r3, #0
 8013636:	d10d      	bne.n	8013654 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8013638:	683b      	ldr	r3, [r7, #0]
 801363a:	3308      	adds	r3, #8
 801363c:	681b      	ldr	r3, [r3, #0]
 801363e:	43da      	mvns	r2, r3
 8013640:	687b      	ldr	r3, [r7, #4]
 8013642:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8013644:	683b      	ldr	r3, [r7, #0]
 8013646:	3308      	adds	r3, #8
 8013648:	681b      	ldr	r3, [r3, #0]
 801364a:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801364c:	429a      	cmp	r2, r3
 801364e:	d101      	bne.n	8013654 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8013650:	2301      	movs	r3, #1
 8013652:	e000      	b.n	8013656 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8013654:	2300      	movs	r3, #0
  }
}
 8013656:	4618      	mov	r0, r3
 8013658:	3714      	adds	r7, #20
 801365a:	46bd      	mov	sp, r7
 801365c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013660:	4770      	bx	lr
	...

08013664 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8013664:	b580      	push	{r7, lr}
 8013666:	b084      	sub	sp, #16
 8013668:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801366a:	2300      	movs	r3, #0
 801366c:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801366e:	4b12      	ldr	r3, [pc, #72]	; (80136b8 <ip_reass_tmr+0x54>)
 8013670:	681b      	ldr	r3, [r3, #0]
 8013672:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8013674:	e018      	b.n	80136a8 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8013676:	68fb      	ldr	r3, [r7, #12]
 8013678:	7fdb      	ldrb	r3, [r3, #31]
 801367a:	2b00      	cmp	r3, #0
 801367c:	d00b      	beq.n	8013696 <ip_reass_tmr+0x32>
      r->timer--;
 801367e:	68fb      	ldr	r3, [r7, #12]
 8013680:	7fdb      	ldrb	r3, [r3, #31]
 8013682:	3b01      	subs	r3, #1
 8013684:	b2da      	uxtb	r2, r3
 8013686:	68fb      	ldr	r3, [r7, #12]
 8013688:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801368a:	68fb      	ldr	r3, [r7, #12]
 801368c:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801368e:	68fb      	ldr	r3, [r7, #12]
 8013690:	681b      	ldr	r3, [r3, #0]
 8013692:	60fb      	str	r3, [r7, #12]
 8013694:	e008      	b.n	80136a8 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8013696:	68fb      	ldr	r3, [r7, #12]
 8013698:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801369a:	68fb      	ldr	r3, [r7, #12]
 801369c:	681b      	ldr	r3, [r3, #0]
 801369e:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 80136a0:	68b9      	ldr	r1, [r7, #8]
 80136a2:	6878      	ldr	r0, [r7, #4]
 80136a4:	f000 f80a 	bl	80136bc <ip_reass_free_complete_datagram>
  while (r != NULL) {
 80136a8:	68fb      	ldr	r3, [r7, #12]
 80136aa:	2b00      	cmp	r3, #0
 80136ac:	d1e3      	bne.n	8013676 <ip_reass_tmr+0x12>
    }
  }
}
 80136ae:	bf00      	nop
 80136b0:	bf00      	nop
 80136b2:	3710      	adds	r7, #16
 80136b4:	46bd      	mov	sp, r7
 80136b6:	bd80      	pop	{r7, pc}
 80136b8:	2000021c 	.word	0x2000021c

080136bc <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80136bc:	b580      	push	{r7, lr}
 80136be:	b088      	sub	sp, #32
 80136c0:	af00      	add	r7, sp, #0
 80136c2:	6078      	str	r0, [r7, #4]
 80136c4:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 80136c6:	2300      	movs	r3, #0
 80136c8:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 80136ca:	683a      	ldr	r2, [r7, #0]
 80136cc:	687b      	ldr	r3, [r7, #4]
 80136ce:	429a      	cmp	r2, r3
 80136d0:	d105      	bne.n	80136de <ip_reass_free_complete_datagram+0x22>
 80136d2:	4b45      	ldr	r3, [pc, #276]	; (80137e8 <ip_reass_free_complete_datagram+0x12c>)
 80136d4:	22ab      	movs	r2, #171	; 0xab
 80136d6:	4945      	ldr	r1, [pc, #276]	; (80137ec <ip_reass_free_complete_datagram+0x130>)
 80136d8:	4845      	ldr	r0, [pc, #276]	; (80137f0 <ip_reass_free_complete_datagram+0x134>)
 80136da:	f000 ff33 	bl	8014544 <iprintf>
  if (prev != NULL) {
 80136de:	683b      	ldr	r3, [r7, #0]
 80136e0:	2b00      	cmp	r3, #0
 80136e2:	d00a      	beq.n	80136fa <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 80136e4:	683b      	ldr	r3, [r7, #0]
 80136e6:	681b      	ldr	r3, [r3, #0]
 80136e8:	687a      	ldr	r2, [r7, #4]
 80136ea:	429a      	cmp	r2, r3
 80136ec:	d005      	beq.n	80136fa <ip_reass_free_complete_datagram+0x3e>
 80136ee:	4b3e      	ldr	r3, [pc, #248]	; (80137e8 <ip_reass_free_complete_datagram+0x12c>)
 80136f0:	22ad      	movs	r2, #173	; 0xad
 80136f2:	4940      	ldr	r1, [pc, #256]	; (80137f4 <ip_reass_free_complete_datagram+0x138>)
 80136f4:	483e      	ldr	r0, [pc, #248]	; (80137f0 <ip_reass_free_complete_datagram+0x134>)
 80136f6:	f000 ff25 	bl	8014544 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 80136fa:	687b      	ldr	r3, [r7, #4]
 80136fc:	685b      	ldr	r3, [r3, #4]
 80136fe:	685b      	ldr	r3, [r3, #4]
 8013700:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8013702:	697b      	ldr	r3, [r7, #20]
 8013704:	889b      	ldrh	r3, [r3, #4]
 8013706:	b29b      	uxth	r3, r3
 8013708:	2b00      	cmp	r3, #0
 801370a:	d12a      	bne.n	8013762 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801370c:	687b      	ldr	r3, [r7, #4]
 801370e:	685b      	ldr	r3, [r3, #4]
 8013710:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8013712:	697b      	ldr	r3, [r7, #20]
 8013714:	681a      	ldr	r2, [r3, #0]
 8013716:	687b      	ldr	r3, [r7, #4]
 8013718:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801371a:	69bb      	ldr	r3, [r7, #24]
 801371c:	6858      	ldr	r0, [r3, #4]
 801371e:	687b      	ldr	r3, [r7, #4]
 8013720:	3308      	adds	r3, #8
 8013722:	2214      	movs	r2, #20
 8013724:	4619      	mov	r1, r3
 8013726:	f000 fedd 	bl	80144e4 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801372a:	2101      	movs	r1, #1
 801372c:	69b8      	ldr	r0, [r7, #24]
 801372e:	f7ff fc47 	bl	8012fc0 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8013732:	69b8      	ldr	r0, [r7, #24]
 8013734:	f7f8 fdc4 	bl	800c2c0 <pbuf_clen>
 8013738:	4603      	mov	r3, r0
 801373a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801373c:	8bfa      	ldrh	r2, [r7, #30]
 801373e:	8a7b      	ldrh	r3, [r7, #18]
 8013740:	4413      	add	r3, r2
 8013742:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013746:	db05      	blt.n	8013754 <ip_reass_free_complete_datagram+0x98>
 8013748:	4b27      	ldr	r3, [pc, #156]	; (80137e8 <ip_reass_free_complete_datagram+0x12c>)
 801374a:	22bc      	movs	r2, #188	; 0xbc
 801374c:	492a      	ldr	r1, [pc, #168]	; (80137f8 <ip_reass_free_complete_datagram+0x13c>)
 801374e:	4828      	ldr	r0, [pc, #160]	; (80137f0 <ip_reass_free_complete_datagram+0x134>)
 8013750:	f000 fef8 	bl	8014544 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8013754:	8bfa      	ldrh	r2, [r7, #30]
 8013756:	8a7b      	ldrh	r3, [r7, #18]
 8013758:	4413      	add	r3, r2
 801375a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801375c:	69b8      	ldr	r0, [r7, #24]
 801375e:	f7f8 fd27 	bl	800c1b0 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8013762:	687b      	ldr	r3, [r7, #4]
 8013764:	685b      	ldr	r3, [r3, #4]
 8013766:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8013768:	e01f      	b.n	80137aa <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801376a:	69bb      	ldr	r3, [r7, #24]
 801376c:	685b      	ldr	r3, [r3, #4]
 801376e:	617b      	str	r3, [r7, #20]
    pcur = p;
 8013770:	69bb      	ldr	r3, [r7, #24]
 8013772:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8013774:	697b      	ldr	r3, [r7, #20]
 8013776:	681b      	ldr	r3, [r3, #0]
 8013778:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801377a:	68f8      	ldr	r0, [r7, #12]
 801377c:	f7f8 fda0 	bl	800c2c0 <pbuf_clen>
 8013780:	4603      	mov	r3, r0
 8013782:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8013784:	8bfa      	ldrh	r2, [r7, #30]
 8013786:	8a7b      	ldrh	r3, [r7, #18]
 8013788:	4413      	add	r3, r2
 801378a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801378e:	db05      	blt.n	801379c <ip_reass_free_complete_datagram+0xe0>
 8013790:	4b15      	ldr	r3, [pc, #84]	; (80137e8 <ip_reass_free_complete_datagram+0x12c>)
 8013792:	22cc      	movs	r2, #204	; 0xcc
 8013794:	4918      	ldr	r1, [pc, #96]	; (80137f8 <ip_reass_free_complete_datagram+0x13c>)
 8013796:	4816      	ldr	r0, [pc, #88]	; (80137f0 <ip_reass_free_complete_datagram+0x134>)
 8013798:	f000 fed4 	bl	8014544 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801379c:	8bfa      	ldrh	r2, [r7, #30]
 801379e:	8a7b      	ldrh	r3, [r7, #18]
 80137a0:	4413      	add	r3, r2
 80137a2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 80137a4:	68f8      	ldr	r0, [r7, #12]
 80137a6:	f7f8 fd03 	bl	800c1b0 <pbuf_free>
  while (p != NULL) {
 80137aa:	69bb      	ldr	r3, [r7, #24]
 80137ac:	2b00      	cmp	r3, #0
 80137ae:	d1dc      	bne.n	801376a <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 80137b0:	6839      	ldr	r1, [r7, #0]
 80137b2:	6878      	ldr	r0, [r7, #4]
 80137b4:	f000 f8c2 	bl	801393c <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 80137b8:	4b10      	ldr	r3, [pc, #64]	; (80137fc <ip_reass_free_complete_datagram+0x140>)
 80137ba:	881b      	ldrh	r3, [r3, #0]
 80137bc:	8bfa      	ldrh	r2, [r7, #30]
 80137be:	429a      	cmp	r2, r3
 80137c0:	d905      	bls.n	80137ce <ip_reass_free_complete_datagram+0x112>
 80137c2:	4b09      	ldr	r3, [pc, #36]	; (80137e8 <ip_reass_free_complete_datagram+0x12c>)
 80137c4:	22d2      	movs	r2, #210	; 0xd2
 80137c6:	490e      	ldr	r1, [pc, #56]	; (8013800 <ip_reass_free_complete_datagram+0x144>)
 80137c8:	4809      	ldr	r0, [pc, #36]	; (80137f0 <ip_reass_free_complete_datagram+0x134>)
 80137ca:	f000 febb 	bl	8014544 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 80137ce:	4b0b      	ldr	r3, [pc, #44]	; (80137fc <ip_reass_free_complete_datagram+0x140>)
 80137d0:	881a      	ldrh	r2, [r3, #0]
 80137d2:	8bfb      	ldrh	r3, [r7, #30]
 80137d4:	1ad3      	subs	r3, r2, r3
 80137d6:	b29a      	uxth	r2, r3
 80137d8:	4b08      	ldr	r3, [pc, #32]	; (80137fc <ip_reass_free_complete_datagram+0x140>)
 80137da:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 80137dc:	8bfb      	ldrh	r3, [r7, #30]
}
 80137de:	4618      	mov	r0, r3
 80137e0:	3720      	adds	r7, #32
 80137e2:	46bd      	mov	sp, r7
 80137e4:	bd80      	pop	{r7, pc}
 80137e6:	bf00      	nop
 80137e8:	08018040 	.word	0x08018040
 80137ec:	0801807c 	.word	0x0801807c
 80137f0:	08018088 	.word	0x08018088
 80137f4:	080180b0 	.word	0x080180b0
 80137f8:	080180c4 	.word	0x080180c4
 80137fc:	20000220 	.word	0x20000220
 8013800:	080180e4 	.word	0x080180e4

08013804 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8013804:	b580      	push	{r7, lr}
 8013806:	b08a      	sub	sp, #40	; 0x28
 8013808:	af00      	add	r7, sp, #0
 801380a:	6078      	str	r0, [r7, #4]
 801380c:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801380e:	2300      	movs	r3, #0
 8013810:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8013812:	2300      	movs	r3, #0
 8013814:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8013816:	2300      	movs	r3, #0
 8013818:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801381a:	2300      	movs	r3, #0
 801381c:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801381e:	2300      	movs	r3, #0
 8013820:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8013822:	4b28      	ldr	r3, [pc, #160]	; (80138c4 <ip_reass_remove_oldest_datagram+0xc0>)
 8013824:	681b      	ldr	r3, [r3, #0]
 8013826:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8013828:	e030      	b.n	801388c <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801382a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801382c:	695a      	ldr	r2, [r3, #20]
 801382e:	687b      	ldr	r3, [r7, #4]
 8013830:	68db      	ldr	r3, [r3, #12]
 8013832:	429a      	cmp	r2, r3
 8013834:	d10c      	bne.n	8013850 <ip_reass_remove_oldest_datagram+0x4c>
 8013836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013838:	699a      	ldr	r2, [r3, #24]
 801383a:	687b      	ldr	r3, [r7, #4]
 801383c:	691b      	ldr	r3, [r3, #16]
 801383e:	429a      	cmp	r2, r3
 8013840:	d106      	bne.n	8013850 <ip_reass_remove_oldest_datagram+0x4c>
 8013842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013844:	899a      	ldrh	r2, [r3, #12]
 8013846:	687b      	ldr	r3, [r7, #4]
 8013848:	889b      	ldrh	r3, [r3, #4]
 801384a:	b29b      	uxth	r3, r3
 801384c:	429a      	cmp	r2, r3
 801384e:	d014      	beq.n	801387a <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8013850:	693b      	ldr	r3, [r7, #16]
 8013852:	3301      	adds	r3, #1
 8013854:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8013856:	6a3b      	ldr	r3, [r7, #32]
 8013858:	2b00      	cmp	r3, #0
 801385a:	d104      	bne.n	8013866 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801385c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801385e:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8013860:	69fb      	ldr	r3, [r7, #28]
 8013862:	61bb      	str	r3, [r7, #24]
 8013864:	e009      	b.n	801387a <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8013866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013868:	7fda      	ldrb	r2, [r3, #31]
 801386a:	6a3b      	ldr	r3, [r7, #32]
 801386c:	7fdb      	ldrb	r3, [r3, #31]
 801386e:	429a      	cmp	r2, r3
 8013870:	d803      	bhi.n	801387a <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8013872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013874:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8013876:	69fb      	ldr	r3, [r7, #28]
 8013878:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801387a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801387c:	681b      	ldr	r3, [r3, #0]
 801387e:	2b00      	cmp	r3, #0
 8013880:	d001      	beq.n	8013886 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8013882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013884:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8013886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013888:	681b      	ldr	r3, [r3, #0]
 801388a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801388c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801388e:	2b00      	cmp	r3, #0
 8013890:	d1cb      	bne.n	801382a <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8013892:	6a3b      	ldr	r3, [r7, #32]
 8013894:	2b00      	cmp	r3, #0
 8013896:	d008      	beq.n	80138aa <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8013898:	69b9      	ldr	r1, [r7, #24]
 801389a:	6a38      	ldr	r0, [r7, #32]
 801389c:	f7ff ff0e 	bl	80136bc <ip_reass_free_complete_datagram>
 80138a0:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 80138a2:	697a      	ldr	r2, [r7, #20]
 80138a4:	68fb      	ldr	r3, [r7, #12]
 80138a6:	4413      	add	r3, r2
 80138a8:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80138aa:	697a      	ldr	r2, [r7, #20]
 80138ac:	683b      	ldr	r3, [r7, #0]
 80138ae:	429a      	cmp	r2, r3
 80138b0:	da02      	bge.n	80138b8 <ip_reass_remove_oldest_datagram+0xb4>
 80138b2:	693b      	ldr	r3, [r7, #16]
 80138b4:	2b01      	cmp	r3, #1
 80138b6:	dcac      	bgt.n	8013812 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 80138b8:	697b      	ldr	r3, [r7, #20]
}
 80138ba:	4618      	mov	r0, r3
 80138bc:	3728      	adds	r7, #40	; 0x28
 80138be:	46bd      	mov	sp, r7
 80138c0:	bd80      	pop	{r7, pc}
 80138c2:	bf00      	nop
 80138c4:	2000021c 	.word	0x2000021c

080138c8 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 80138c8:	b580      	push	{r7, lr}
 80138ca:	b084      	sub	sp, #16
 80138cc:	af00      	add	r7, sp, #0
 80138ce:	6078      	str	r0, [r7, #4]
 80138d0:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80138d2:	2004      	movs	r0, #4
 80138d4:	f7f7 fe2e 	bl	800b534 <memp_malloc>
 80138d8:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 80138da:	68fb      	ldr	r3, [r7, #12]
 80138dc:	2b00      	cmp	r3, #0
 80138de:	d110      	bne.n	8013902 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 80138e0:	6839      	ldr	r1, [r7, #0]
 80138e2:	6878      	ldr	r0, [r7, #4]
 80138e4:	f7ff ff8e 	bl	8013804 <ip_reass_remove_oldest_datagram>
 80138e8:	4602      	mov	r2, r0
 80138ea:	683b      	ldr	r3, [r7, #0]
 80138ec:	4293      	cmp	r3, r2
 80138ee:	dc03      	bgt.n	80138f8 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80138f0:	2004      	movs	r0, #4
 80138f2:	f7f7 fe1f 	bl	800b534 <memp_malloc>
 80138f6:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 80138f8:	68fb      	ldr	r3, [r7, #12]
 80138fa:	2b00      	cmp	r3, #0
 80138fc:	d101      	bne.n	8013902 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 80138fe:	2300      	movs	r3, #0
 8013900:	e016      	b.n	8013930 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8013902:	2220      	movs	r2, #32
 8013904:	2100      	movs	r1, #0
 8013906:	68f8      	ldr	r0, [r7, #12]
 8013908:	f000 fe14 	bl	8014534 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801390c:	68fb      	ldr	r3, [r7, #12]
 801390e:	220f      	movs	r2, #15
 8013910:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8013912:	4b09      	ldr	r3, [pc, #36]	; (8013938 <ip_reass_enqueue_new_datagram+0x70>)
 8013914:	681a      	ldr	r2, [r3, #0]
 8013916:	68fb      	ldr	r3, [r7, #12]
 8013918:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801391a:	4a07      	ldr	r2, [pc, #28]	; (8013938 <ip_reass_enqueue_new_datagram+0x70>)
 801391c:	68fb      	ldr	r3, [r7, #12]
 801391e:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8013920:	68fb      	ldr	r3, [r7, #12]
 8013922:	3308      	adds	r3, #8
 8013924:	2214      	movs	r2, #20
 8013926:	6879      	ldr	r1, [r7, #4]
 8013928:	4618      	mov	r0, r3
 801392a:	f000 fddb 	bl	80144e4 <memcpy>
  return ipr;
 801392e:	68fb      	ldr	r3, [r7, #12]
}
 8013930:	4618      	mov	r0, r3
 8013932:	3710      	adds	r7, #16
 8013934:	46bd      	mov	sp, r7
 8013936:	bd80      	pop	{r7, pc}
 8013938:	2000021c 	.word	0x2000021c

0801393c <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801393c:	b580      	push	{r7, lr}
 801393e:	b082      	sub	sp, #8
 8013940:	af00      	add	r7, sp, #0
 8013942:	6078      	str	r0, [r7, #4]
 8013944:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8013946:	4b10      	ldr	r3, [pc, #64]	; (8013988 <ip_reass_dequeue_datagram+0x4c>)
 8013948:	681b      	ldr	r3, [r3, #0]
 801394a:	687a      	ldr	r2, [r7, #4]
 801394c:	429a      	cmp	r2, r3
 801394e:	d104      	bne.n	801395a <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8013950:	687b      	ldr	r3, [r7, #4]
 8013952:	681b      	ldr	r3, [r3, #0]
 8013954:	4a0c      	ldr	r2, [pc, #48]	; (8013988 <ip_reass_dequeue_datagram+0x4c>)
 8013956:	6013      	str	r3, [r2, #0]
 8013958:	e00d      	b.n	8013976 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801395a:	683b      	ldr	r3, [r7, #0]
 801395c:	2b00      	cmp	r3, #0
 801395e:	d106      	bne.n	801396e <ip_reass_dequeue_datagram+0x32>
 8013960:	4b0a      	ldr	r3, [pc, #40]	; (801398c <ip_reass_dequeue_datagram+0x50>)
 8013962:	f240 1245 	movw	r2, #325	; 0x145
 8013966:	490a      	ldr	r1, [pc, #40]	; (8013990 <ip_reass_dequeue_datagram+0x54>)
 8013968:	480a      	ldr	r0, [pc, #40]	; (8013994 <ip_reass_dequeue_datagram+0x58>)
 801396a:	f000 fdeb 	bl	8014544 <iprintf>
    prev->next = ipr->next;
 801396e:	687b      	ldr	r3, [r7, #4]
 8013970:	681a      	ldr	r2, [r3, #0]
 8013972:	683b      	ldr	r3, [r7, #0]
 8013974:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8013976:	6879      	ldr	r1, [r7, #4]
 8013978:	2004      	movs	r0, #4
 801397a:	f7f7 fe27 	bl	800b5cc <memp_free>
}
 801397e:	bf00      	nop
 8013980:	3708      	adds	r7, #8
 8013982:	46bd      	mov	sp, r7
 8013984:	bd80      	pop	{r7, pc}
 8013986:	bf00      	nop
 8013988:	2000021c 	.word	0x2000021c
 801398c:	08018040 	.word	0x08018040
 8013990:	08018108 	.word	0x08018108
 8013994:	08018088 	.word	0x08018088

08013998 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8013998:	b580      	push	{r7, lr}
 801399a:	b08c      	sub	sp, #48	; 0x30
 801399c:	af00      	add	r7, sp, #0
 801399e:	60f8      	str	r0, [r7, #12]
 80139a0:	60b9      	str	r1, [r7, #8]
 80139a2:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 80139a4:	2300      	movs	r3, #0
 80139a6:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 80139a8:	2301      	movs	r3, #1
 80139aa:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 80139ac:	68bb      	ldr	r3, [r7, #8]
 80139ae:	685b      	ldr	r3, [r3, #4]
 80139b0:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80139b2:	69fb      	ldr	r3, [r7, #28]
 80139b4:	885b      	ldrh	r3, [r3, #2]
 80139b6:	b29b      	uxth	r3, r3
 80139b8:	4618      	mov	r0, r3
 80139ba:	f7f7 f966 	bl	800ac8a <lwip_htons>
 80139be:	4603      	mov	r3, r0
 80139c0:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 80139c2:	69fb      	ldr	r3, [r7, #28]
 80139c4:	781b      	ldrb	r3, [r3, #0]
 80139c6:	f003 030f 	and.w	r3, r3, #15
 80139ca:	b2db      	uxtb	r3, r3
 80139cc:	009b      	lsls	r3, r3, #2
 80139ce:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 80139d0:	7e7b      	ldrb	r3, [r7, #25]
 80139d2:	b29b      	uxth	r3, r3
 80139d4:	8b7a      	ldrh	r2, [r7, #26]
 80139d6:	429a      	cmp	r2, r3
 80139d8:	d202      	bcs.n	80139e0 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80139da:	f04f 33ff 	mov.w	r3, #4294967295
 80139de:	e135      	b.n	8013c4c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 80139e0:	7e7b      	ldrb	r3, [r7, #25]
 80139e2:	b29b      	uxth	r3, r3
 80139e4:	8b7a      	ldrh	r2, [r7, #26]
 80139e6:	1ad3      	subs	r3, r2, r3
 80139e8:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 80139ea:	69fb      	ldr	r3, [r7, #28]
 80139ec:	88db      	ldrh	r3, [r3, #6]
 80139ee:	b29b      	uxth	r3, r3
 80139f0:	4618      	mov	r0, r3
 80139f2:	f7f7 f94a 	bl	800ac8a <lwip_htons>
 80139f6:	4603      	mov	r3, r0
 80139f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80139fc:	b29b      	uxth	r3, r3
 80139fe:	00db      	lsls	r3, r3, #3
 8013a00:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8013a02:	68bb      	ldr	r3, [r7, #8]
 8013a04:	685b      	ldr	r3, [r3, #4]
 8013a06:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8013a08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a0a:	2200      	movs	r2, #0
 8013a0c:	701a      	strb	r2, [r3, #0]
 8013a0e:	2200      	movs	r2, #0
 8013a10:	705a      	strb	r2, [r3, #1]
 8013a12:	2200      	movs	r2, #0
 8013a14:	709a      	strb	r2, [r3, #2]
 8013a16:	2200      	movs	r2, #0
 8013a18:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8013a1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a1c:	8afa      	ldrh	r2, [r7, #22]
 8013a1e:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8013a20:	8afa      	ldrh	r2, [r7, #22]
 8013a22:	8b7b      	ldrh	r3, [r7, #26]
 8013a24:	4413      	add	r3, r2
 8013a26:	b29a      	uxth	r2, r3
 8013a28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a2a:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8013a2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a2e:	88db      	ldrh	r3, [r3, #6]
 8013a30:	b29b      	uxth	r3, r3
 8013a32:	8afa      	ldrh	r2, [r7, #22]
 8013a34:	429a      	cmp	r2, r3
 8013a36:	d902      	bls.n	8013a3e <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013a38:	f04f 33ff 	mov.w	r3, #4294967295
 8013a3c:	e106      	b.n	8013c4c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8013a3e:	68fb      	ldr	r3, [r7, #12]
 8013a40:	685b      	ldr	r3, [r3, #4]
 8013a42:	627b      	str	r3, [r7, #36]	; 0x24
 8013a44:	e068      	b.n	8013b18 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8013a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a48:	685b      	ldr	r3, [r3, #4]
 8013a4a:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8013a4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a4e:	889b      	ldrh	r3, [r3, #4]
 8013a50:	b29a      	uxth	r2, r3
 8013a52:	693b      	ldr	r3, [r7, #16]
 8013a54:	889b      	ldrh	r3, [r3, #4]
 8013a56:	b29b      	uxth	r3, r3
 8013a58:	429a      	cmp	r2, r3
 8013a5a:	d235      	bcs.n	8013ac8 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8013a5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013a60:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8013a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a64:	2b00      	cmp	r3, #0
 8013a66:	d020      	beq.n	8013aaa <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8013a68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a6a:	889b      	ldrh	r3, [r3, #4]
 8013a6c:	b29a      	uxth	r2, r3
 8013a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a70:	88db      	ldrh	r3, [r3, #6]
 8013a72:	b29b      	uxth	r3, r3
 8013a74:	429a      	cmp	r2, r3
 8013a76:	d307      	bcc.n	8013a88 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8013a78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a7a:	88db      	ldrh	r3, [r3, #6]
 8013a7c:	b29a      	uxth	r2, r3
 8013a7e:	693b      	ldr	r3, [r7, #16]
 8013a80:	889b      	ldrh	r3, [r3, #4]
 8013a82:	b29b      	uxth	r3, r3
 8013a84:	429a      	cmp	r2, r3
 8013a86:	d902      	bls.n	8013a8e <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013a88:	f04f 33ff 	mov.w	r3, #4294967295
 8013a8c:	e0de      	b.n	8013c4c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8013a8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a90:	68ba      	ldr	r2, [r7, #8]
 8013a92:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8013a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a96:	88db      	ldrh	r3, [r3, #6]
 8013a98:	b29a      	uxth	r2, r3
 8013a9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a9c:	889b      	ldrh	r3, [r3, #4]
 8013a9e:	b29b      	uxth	r3, r3
 8013aa0:	429a      	cmp	r2, r3
 8013aa2:	d03d      	beq.n	8013b20 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8013aa4:	2300      	movs	r3, #0
 8013aa6:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8013aa8:	e03a      	b.n	8013b20 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8013aaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013aac:	88db      	ldrh	r3, [r3, #6]
 8013aae:	b29a      	uxth	r2, r3
 8013ab0:	693b      	ldr	r3, [r7, #16]
 8013ab2:	889b      	ldrh	r3, [r3, #4]
 8013ab4:	b29b      	uxth	r3, r3
 8013ab6:	429a      	cmp	r2, r3
 8013ab8:	d902      	bls.n	8013ac0 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013aba:	f04f 33ff 	mov.w	r3, #4294967295
 8013abe:	e0c5      	b.n	8013c4c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8013ac0:	68fb      	ldr	r3, [r7, #12]
 8013ac2:	68ba      	ldr	r2, [r7, #8]
 8013ac4:	605a      	str	r2, [r3, #4]
      break;
 8013ac6:	e02b      	b.n	8013b20 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8013ac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013aca:	889b      	ldrh	r3, [r3, #4]
 8013acc:	b29a      	uxth	r2, r3
 8013ace:	693b      	ldr	r3, [r7, #16]
 8013ad0:	889b      	ldrh	r3, [r3, #4]
 8013ad2:	b29b      	uxth	r3, r3
 8013ad4:	429a      	cmp	r2, r3
 8013ad6:	d102      	bne.n	8013ade <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013ad8:	f04f 33ff 	mov.w	r3, #4294967295
 8013adc:	e0b6      	b.n	8013c4c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8013ade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ae0:	889b      	ldrh	r3, [r3, #4]
 8013ae2:	b29a      	uxth	r2, r3
 8013ae4:	693b      	ldr	r3, [r7, #16]
 8013ae6:	88db      	ldrh	r3, [r3, #6]
 8013ae8:	b29b      	uxth	r3, r3
 8013aea:	429a      	cmp	r2, r3
 8013aec:	d202      	bcs.n	8013af4 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013aee:	f04f 33ff 	mov.w	r3, #4294967295
 8013af2:	e0ab      	b.n	8013c4c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8013af4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013af6:	2b00      	cmp	r3, #0
 8013af8:	d009      	beq.n	8013b0e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8013afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013afc:	88db      	ldrh	r3, [r3, #6]
 8013afe:	b29a      	uxth	r2, r3
 8013b00:	693b      	ldr	r3, [r7, #16]
 8013b02:	889b      	ldrh	r3, [r3, #4]
 8013b04:	b29b      	uxth	r3, r3
 8013b06:	429a      	cmp	r2, r3
 8013b08:	d001      	beq.n	8013b0e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8013b0a:	2300      	movs	r3, #0
 8013b0c:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8013b0e:	693b      	ldr	r3, [r7, #16]
 8013b10:	681b      	ldr	r3, [r3, #0]
 8013b12:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8013b14:	693b      	ldr	r3, [r7, #16]
 8013b16:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8013b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b1a:	2b00      	cmp	r3, #0
 8013b1c:	d193      	bne.n	8013a46 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8013b1e:	e000      	b.n	8013b22 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8013b20:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8013b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b24:	2b00      	cmp	r3, #0
 8013b26:	d12d      	bne.n	8013b84 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8013b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b2a:	2b00      	cmp	r3, #0
 8013b2c:	d01c      	beq.n	8013b68 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8013b2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b30:	88db      	ldrh	r3, [r3, #6]
 8013b32:	b29a      	uxth	r2, r3
 8013b34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b36:	889b      	ldrh	r3, [r3, #4]
 8013b38:	b29b      	uxth	r3, r3
 8013b3a:	429a      	cmp	r2, r3
 8013b3c:	d906      	bls.n	8013b4c <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8013b3e:	4b45      	ldr	r3, [pc, #276]	; (8013c54 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013b40:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8013b44:	4944      	ldr	r1, [pc, #272]	; (8013c58 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8013b46:	4845      	ldr	r0, [pc, #276]	; (8013c5c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013b48:	f000 fcfc 	bl	8014544 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8013b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b4e:	68ba      	ldr	r2, [r7, #8]
 8013b50:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8013b52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b54:	88db      	ldrh	r3, [r3, #6]
 8013b56:	b29a      	uxth	r2, r3
 8013b58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b5a:	889b      	ldrh	r3, [r3, #4]
 8013b5c:	b29b      	uxth	r3, r3
 8013b5e:	429a      	cmp	r2, r3
 8013b60:	d010      	beq.n	8013b84 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8013b62:	2300      	movs	r3, #0
 8013b64:	623b      	str	r3, [r7, #32]
 8013b66:	e00d      	b.n	8013b84 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8013b68:	68fb      	ldr	r3, [r7, #12]
 8013b6a:	685b      	ldr	r3, [r3, #4]
 8013b6c:	2b00      	cmp	r3, #0
 8013b6e:	d006      	beq.n	8013b7e <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8013b70:	4b38      	ldr	r3, [pc, #224]	; (8013c54 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013b72:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8013b76:	493a      	ldr	r1, [pc, #232]	; (8013c60 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8013b78:	4838      	ldr	r0, [pc, #224]	; (8013c5c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013b7a:	f000 fce3 	bl	8014544 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8013b7e:	68fb      	ldr	r3, [r7, #12]
 8013b80:	68ba      	ldr	r2, [r7, #8]
 8013b82:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8013b84:	687b      	ldr	r3, [r7, #4]
 8013b86:	2b00      	cmp	r3, #0
 8013b88:	d105      	bne.n	8013b96 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8013b8a:	68fb      	ldr	r3, [r7, #12]
 8013b8c:	7f9b      	ldrb	r3, [r3, #30]
 8013b8e:	f003 0301 	and.w	r3, r3, #1
 8013b92:	2b00      	cmp	r3, #0
 8013b94:	d059      	beq.n	8013c4a <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8013b96:	6a3b      	ldr	r3, [r7, #32]
 8013b98:	2b00      	cmp	r3, #0
 8013b9a:	d04f      	beq.n	8013c3c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8013b9c:	68fb      	ldr	r3, [r7, #12]
 8013b9e:	685b      	ldr	r3, [r3, #4]
 8013ba0:	2b00      	cmp	r3, #0
 8013ba2:	d006      	beq.n	8013bb2 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8013ba4:	68fb      	ldr	r3, [r7, #12]
 8013ba6:	685b      	ldr	r3, [r3, #4]
 8013ba8:	685b      	ldr	r3, [r3, #4]
 8013baa:	889b      	ldrh	r3, [r3, #4]
 8013bac:	b29b      	uxth	r3, r3
 8013bae:	2b00      	cmp	r3, #0
 8013bb0:	d002      	beq.n	8013bb8 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8013bb2:	2300      	movs	r3, #0
 8013bb4:	623b      	str	r3, [r7, #32]
 8013bb6:	e041      	b.n	8013c3c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8013bb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013bba:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8013bbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013bbe:	681b      	ldr	r3, [r3, #0]
 8013bc0:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8013bc2:	e012      	b.n	8013bea <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8013bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013bc6:	685b      	ldr	r3, [r3, #4]
 8013bc8:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8013bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013bcc:	88db      	ldrh	r3, [r3, #6]
 8013bce:	b29a      	uxth	r2, r3
 8013bd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013bd2:	889b      	ldrh	r3, [r3, #4]
 8013bd4:	b29b      	uxth	r3, r3
 8013bd6:	429a      	cmp	r2, r3
 8013bd8:	d002      	beq.n	8013be0 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8013bda:	2300      	movs	r3, #0
 8013bdc:	623b      	str	r3, [r7, #32]
            break;
 8013bde:	e007      	b.n	8013bf0 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8013be0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013be2:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8013be4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013be6:	681b      	ldr	r3, [r3, #0]
 8013be8:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8013bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013bec:	2b00      	cmp	r3, #0
 8013bee:	d1e9      	bne.n	8013bc4 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8013bf0:	6a3b      	ldr	r3, [r7, #32]
 8013bf2:	2b00      	cmp	r3, #0
 8013bf4:	d022      	beq.n	8013c3c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8013bf6:	68fb      	ldr	r3, [r7, #12]
 8013bf8:	685b      	ldr	r3, [r3, #4]
 8013bfa:	2b00      	cmp	r3, #0
 8013bfc:	d106      	bne.n	8013c0c <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8013bfe:	4b15      	ldr	r3, [pc, #84]	; (8013c54 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013c00:	f240 12df 	movw	r2, #479	; 0x1df
 8013c04:	4917      	ldr	r1, [pc, #92]	; (8013c64 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8013c06:	4815      	ldr	r0, [pc, #84]	; (8013c5c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013c08:	f000 fc9c 	bl	8014544 <iprintf>
          LWIP_ASSERT("sanity check",
 8013c0c:	68fb      	ldr	r3, [r7, #12]
 8013c0e:	685b      	ldr	r3, [r3, #4]
 8013c10:	685b      	ldr	r3, [r3, #4]
 8013c12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013c14:	429a      	cmp	r2, r3
 8013c16:	d106      	bne.n	8013c26 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8013c18:	4b0e      	ldr	r3, [pc, #56]	; (8013c54 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013c1a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8013c1e:	4911      	ldr	r1, [pc, #68]	; (8013c64 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8013c20:	480e      	ldr	r0, [pc, #56]	; (8013c5c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013c22:	f000 fc8f 	bl	8014544 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8013c26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c28:	681b      	ldr	r3, [r3, #0]
 8013c2a:	2b00      	cmp	r3, #0
 8013c2c:	d006      	beq.n	8013c3c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8013c2e:	4b09      	ldr	r3, [pc, #36]	; (8013c54 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013c30:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8013c34:	490c      	ldr	r1, [pc, #48]	; (8013c68 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8013c36:	4809      	ldr	r0, [pc, #36]	; (8013c5c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013c38:	f000 fc84 	bl	8014544 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8013c3c:	6a3b      	ldr	r3, [r7, #32]
 8013c3e:	2b00      	cmp	r3, #0
 8013c40:	bf14      	ite	ne
 8013c42:	2301      	movne	r3, #1
 8013c44:	2300      	moveq	r3, #0
 8013c46:	b2db      	uxtb	r3, r3
 8013c48:	e000      	b.n	8013c4c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8013c4a:	2300      	movs	r3, #0
}
 8013c4c:	4618      	mov	r0, r3
 8013c4e:	3730      	adds	r7, #48	; 0x30
 8013c50:	46bd      	mov	sp, r7
 8013c52:	bd80      	pop	{r7, pc}
 8013c54:	08018040 	.word	0x08018040
 8013c58:	08018124 	.word	0x08018124
 8013c5c:	08018088 	.word	0x08018088
 8013c60:	08018144 	.word	0x08018144
 8013c64:	0801817c 	.word	0x0801817c
 8013c68:	0801818c 	.word	0x0801818c

08013c6c <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8013c6c:	b580      	push	{r7, lr}
 8013c6e:	b08e      	sub	sp, #56	; 0x38
 8013c70:	af00      	add	r7, sp, #0
 8013c72:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8013c74:	687b      	ldr	r3, [r7, #4]
 8013c76:	685b      	ldr	r3, [r3, #4]
 8013c78:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8013c7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c7c:	781b      	ldrb	r3, [r3, #0]
 8013c7e:	f003 030f 	and.w	r3, r3, #15
 8013c82:	b2db      	uxtb	r3, r3
 8013c84:	009b      	lsls	r3, r3, #2
 8013c86:	b2db      	uxtb	r3, r3
 8013c88:	2b14      	cmp	r3, #20
 8013c8a:	f040 8167 	bne.w	8013f5c <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8013c8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c90:	88db      	ldrh	r3, [r3, #6]
 8013c92:	b29b      	uxth	r3, r3
 8013c94:	4618      	mov	r0, r3
 8013c96:	f7f6 fff8 	bl	800ac8a <lwip_htons>
 8013c9a:	4603      	mov	r3, r0
 8013c9c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013ca0:	b29b      	uxth	r3, r3
 8013ca2:	00db      	lsls	r3, r3, #3
 8013ca4:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8013ca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ca8:	885b      	ldrh	r3, [r3, #2]
 8013caa:	b29b      	uxth	r3, r3
 8013cac:	4618      	mov	r0, r3
 8013cae:	f7f6 ffec 	bl	800ac8a <lwip_htons>
 8013cb2:	4603      	mov	r3, r0
 8013cb4:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8013cb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013cb8:	781b      	ldrb	r3, [r3, #0]
 8013cba:	f003 030f 	and.w	r3, r3, #15
 8013cbe:	b2db      	uxtb	r3, r3
 8013cc0:	009b      	lsls	r3, r3, #2
 8013cc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8013cc6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8013cca:	b29b      	uxth	r3, r3
 8013ccc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8013cce:	429a      	cmp	r2, r3
 8013cd0:	f0c0 8146 	bcc.w	8013f60 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8013cd4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8013cd8:	b29b      	uxth	r3, r3
 8013cda:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8013cdc:	1ad3      	subs	r3, r2, r3
 8013cde:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8013ce0:	6878      	ldr	r0, [r7, #4]
 8013ce2:	f7f8 faed 	bl	800c2c0 <pbuf_clen>
 8013ce6:	4603      	mov	r3, r0
 8013ce8:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8013cea:	4b9f      	ldr	r3, [pc, #636]	; (8013f68 <ip4_reass+0x2fc>)
 8013cec:	881b      	ldrh	r3, [r3, #0]
 8013cee:	461a      	mov	r2, r3
 8013cf0:	8c3b      	ldrh	r3, [r7, #32]
 8013cf2:	4413      	add	r3, r2
 8013cf4:	2b0a      	cmp	r3, #10
 8013cf6:	dd10      	ble.n	8013d1a <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8013cf8:	8c3b      	ldrh	r3, [r7, #32]
 8013cfa:	4619      	mov	r1, r3
 8013cfc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013cfe:	f7ff fd81 	bl	8013804 <ip_reass_remove_oldest_datagram>
 8013d02:	4603      	mov	r3, r0
 8013d04:	2b00      	cmp	r3, #0
 8013d06:	f000 812d 	beq.w	8013f64 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8013d0a:	4b97      	ldr	r3, [pc, #604]	; (8013f68 <ip4_reass+0x2fc>)
 8013d0c:	881b      	ldrh	r3, [r3, #0]
 8013d0e:	461a      	mov	r2, r3
 8013d10:	8c3b      	ldrh	r3, [r7, #32]
 8013d12:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8013d14:	2b0a      	cmp	r3, #10
 8013d16:	f300 8125 	bgt.w	8013f64 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8013d1a:	4b94      	ldr	r3, [pc, #592]	; (8013f6c <ip4_reass+0x300>)
 8013d1c:	681b      	ldr	r3, [r3, #0]
 8013d1e:	633b      	str	r3, [r7, #48]	; 0x30
 8013d20:	e015      	b.n	8013d4e <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8013d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d24:	695a      	ldr	r2, [r3, #20]
 8013d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d28:	68db      	ldr	r3, [r3, #12]
 8013d2a:	429a      	cmp	r2, r3
 8013d2c:	d10c      	bne.n	8013d48 <ip4_reass+0xdc>
 8013d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d30:	699a      	ldr	r2, [r3, #24]
 8013d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d34:	691b      	ldr	r3, [r3, #16]
 8013d36:	429a      	cmp	r2, r3
 8013d38:	d106      	bne.n	8013d48 <ip4_reass+0xdc>
 8013d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d3c:	899a      	ldrh	r2, [r3, #12]
 8013d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d40:	889b      	ldrh	r3, [r3, #4]
 8013d42:	b29b      	uxth	r3, r3
 8013d44:	429a      	cmp	r2, r3
 8013d46:	d006      	beq.n	8013d56 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8013d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d4a:	681b      	ldr	r3, [r3, #0]
 8013d4c:	633b      	str	r3, [r7, #48]	; 0x30
 8013d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d50:	2b00      	cmp	r3, #0
 8013d52:	d1e6      	bne.n	8013d22 <ip4_reass+0xb6>
 8013d54:	e000      	b.n	8013d58 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8013d56:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8013d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d5a:	2b00      	cmp	r3, #0
 8013d5c:	d109      	bne.n	8013d72 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8013d5e:	8c3b      	ldrh	r3, [r7, #32]
 8013d60:	4619      	mov	r1, r3
 8013d62:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013d64:	f7ff fdb0 	bl	80138c8 <ip_reass_enqueue_new_datagram>
 8013d68:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8013d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d6c:	2b00      	cmp	r3, #0
 8013d6e:	d11c      	bne.n	8013daa <ip4_reass+0x13e>
      goto nullreturn;
 8013d70:	e109      	b.n	8013f86 <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8013d72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d74:	88db      	ldrh	r3, [r3, #6]
 8013d76:	b29b      	uxth	r3, r3
 8013d78:	4618      	mov	r0, r3
 8013d7a:	f7f6 ff86 	bl	800ac8a <lwip_htons>
 8013d7e:	4603      	mov	r3, r0
 8013d80:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013d84:	2b00      	cmp	r3, #0
 8013d86:	d110      	bne.n	8013daa <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8013d88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d8a:	89db      	ldrh	r3, [r3, #14]
 8013d8c:	4618      	mov	r0, r3
 8013d8e:	f7f6 ff7c 	bl	800ac8a <lwip_htons>
 8013d92:	4603      	mov	r3, r0
 8013d94:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8013d98:	2b00      	cmp	r3, #0
 8013d9a:	d006      	beq.n	8013daa <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8013d9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d9e:	3308      	adds	r3, #8
 8013da0:	2214      	movs	r2, #20
 8013da2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8013da4:	4618      	mov	r0, r3
 8013da6:	f000 fb9d 	bl	80144e4 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8013daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013dac:	88db      	ldrh	r3, [r3, #6]
 8013dae:	b29b      	uxth	r3, r3
 8013db0:	f003 0320 	and.w	r3, r3, #32
 8013db4:	2b00      	cmp	r3, #0
 8013db6:	bf0c      	ite	eq
 8013db8:	2301      	moveq	r3, #1
 8013dba:	2300      	movne	r3, #0
 8013dbc:	b2db      	uxtb	r3, r3
 8013dbe:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8013dc0:	69fb      	ldr	r3, [r7, #28]
 8013dc2:	2b00      	cmp	r3, #0
 8013dc4:	d00e      	beq.n	8013de4 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8013dc6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8013dc8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013dca:	4413      	add	r3, r2
 8013dcc:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8013dce:	8b7a      	ldrh	r2, [r7, #26]
 8013dd0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8013dd2:	429a      	cmp	r2, r3
 8013dd4:	f0c0 80a0 	bcc.w	8013f18 <ip4_reass+0x2ac>
 8013dd8:	8b7b      	ldrh	r3, [r7, #26]
 8013dda:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8013dde:	4293      	cmp	r3, r2
 8013de0:	f200 809a 	bhi.w	8013f18 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8013de4:	69fa      	ldr	r2, [r7, #28]
 8013de6:	6879      	ldr	r1, [r7, #4]
 8013de8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013dea:	f7ff fdd5 	bl	8013998 <ip_reass_chain_frag_into_datagram_and_validate>
 8013dee:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8013df0:	697b      	ldr	r3, [r7, #20]
 8013df2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013df6:	f000 8091 	beq.w	8013f1c <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8013dfa:	4b5b      	ldr	r3, [pc, #364]	; (8013f68 <ip4_reass+0x2fc>)
 8013dfc:	881a      	ldrh	r2, [r3, #0]
 8013dfe:	8c3b      	ldrh	r3, [r7, #32]
 8013e00:	4413      	add	r3, r2
 8013e02:	b29a      	uxth	r2, r3
 8013e04:	4b58      	ldr	r3, [pc, #352]	; (8013f68 <ip4_reass+0x2fc>)
 8013e06:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8013e08:	69fb      	ldr	r3, [r7, #28]
 8013e0a:	2b00      	cmp	r3, #0
 8013e0c:	d00d      	beq.n	8013e2a <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8013e0e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8013e10:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013e12:	4413      	add	r3, r2
 8013e14:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8013e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e18:	8a7a      	ldrh	r2, [r7, #18]
 8013e1a:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8013e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e1e:	7f9b      	ldrb	r3, [r3, #30]
 8013e20:	f043 0301 	orr.w	r3, r3, #1
 8013e24:	b2da      	uxtb	r2, r3
 8013e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e28:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8013e2a:	697b      	ldr	r3, [r7, #20]
 8013e2c:	2b01      	cmp	r3, #1
 8013e2e:	d171      	bne.n	8013f14 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8013e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e32:	8b9b      	ldrh	r3, [r3, #28]
 8013e34:	3314      	adds	r3, #20
 8013e36:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8013e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e3a:	685b      	ldr	r3, [r3, #4]
 8013e3c:	685b      	ldr	r3, [r3, #4]
 8013e3e:	681b      	ldr	r3, [r3, #0]
 8013e40:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8013e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e44:	685b      	ldr	r3, [r3, #4]
 8013e46:	685b      	ldr	r3, [r3, #4]
 8013e48:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8013e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e4c:	3308      	adds	r3, #8
 8013e4e:	2214      	movs	r2, #20
 8013e50:	4619      	mov	r1, r3
 8013e52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013e54:	f000 fb46 	bl	80144e4 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8013e58:	8a3b      	ldrh	r3, [r7, #16]
 8013e5a:	4618      	mov	r0, r3
 8013e5c:	f7f6 ff15 	bl	800ac8a <lwip_htons>
 8013e60:	4603      	mov	r3, r0
 8013e62:	461a      	mov	r2, r3
 8013e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e66:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8013e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e6a:	2200      	movs	r2, #0
 8013e6c:	719a      	strb	r2, [r3, #6]
 8013e6e:	2200      	movs	r2, #0
 8013e70:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8013e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e74:	2200      	movs	r2, #0
 8013e76:	729a      	strb	r2, [r3, #10]
 8013e78:	2200      	movs	r2, #0
 8013e7a:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8013e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e7e:	685b      	ldr	r3, [r3, #4]
 8013e80:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8013e82:	e00d      	b.n	8013ea0 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8013e84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013e86:	685b      	ldr	r3, [r3, #4]
 8013e88:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8013e8a:	2114      	movs	r1, #20
 8013e8c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8013e8e:	f7f8 f909 	bl	800c0a4 <pbuf_remove_header>
      pbuf_cat(p, r);
 8013e92:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8013e94:	6878      	ldr	r0, [r7, #4]
 8013e96:	f7f8 fa4d 	bl	800c334 <pbuf_cat>
      r = iprh->next_pbuf;
 8013e9a:	68fb      	ldr	r3, [r7, #12]
 8013e9c:	681b      	ldr	r3, [r3, #0]
 8013e9e:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8013ea0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013ea2:	2b00      	cmp	r3, #0
 8013ea4:	d1ee      	bne.n	8013e84 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8013ea6:	4b31      	ldr	r3, [pc, #196]	; (8013f6c <ip4_reass+0x300>)
 8013ea8:	681b      	ldr	r3, [r3, #0]
 8013eaa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013eac:	429a      	cmp	r2, r3
 8013eae:	d102      	bne.n	8013eb6 <ip4_reass+0x24a>
      ipr_prev = NULL;
 8013eb0:	2300      	movs	r3, #0
 8013eb2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013eb4:	e010      	b.n	8013ed8 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8013eb6:	4b2d      	ldr	r3, [pc, #180]	; (8013f6c <ip4_reass+0x300>)
 8013eb8:	681b      	ldr	r3, [r3, #0]
 8013eba:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013ebc:	e007      	b.n	8013ece <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8013ebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ec0:	681b      	ldr	r3, [r3, #0]
 8013ec2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013ec4:	429a      	cmp	r2, r3
 8013ec6:	d006      	beq.n	8013ed6 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8013ec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013eca:	681b      	ldr	r3, [r3, #0]
 8013ecc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013ece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ed0:	2b00      	cmp	r3, #0
 8013ed2:	d1f4      	bne.n	8013ebe <ip4_reass+0x252>
 8013ed4:	e000      	b.n	8013ed8 <ip4_reass+0x26c>
          break;
 8013ed6:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8013ed8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013eda:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013edc:	f7ff fd2e 	bl	801393c <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8013ee0:	6878      	ldr	r0, [r7, #4]
 8013ee2:	f7f8 f9ed 	bl	800c2c0 <pbuf_clen>
 8013ee6:	4603      	mov	r3, r0
 8013ee8:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8013eea:	4b1f      	ldr	r3, [pc, #124]	; (8013f68 <ip4_reass+0x2fc>)
 8013eec:	881b      	ldrh	r3, [r3, #0]
 8013eee:	8c3a      	ldrh	r2, [r7, #32]
 8013ef0:	429a      	cmp	r2, r3
 8013ef2:	d906      	bls.n	8013f02 <ip4_reass+0x296>
 8013ef4:	4b1e      	ldr	r3, [pc, #120]	; (8013f70 <ip4_reass+0x304>)
 8013ef6:	f240 229b 	movw	r2, #667	; 0x29b
 8013efa:	491e      	ldr	r1, [pc, #120]	; (8013f74 <ip4_reass+0x308>)
 8013efc:	481e      	ldr	r0, [pc, #120]	; (8013f78 <ip4_reass+0x30c>)
 8013efe:	f000 fb21 	bl	8014544 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8013f02:	4b19      	ldr	r3, [pc, #100]	; (8013f68 <ip4_reass+0x2fc>)
 8013f04:	881a      	ldrh	r2, [r3, #0]
 8013f06:	8c3b      	ldrh	r3, [r7, #32]
 8013f08:	1ad3      	subs	r3, r2, r3
 8013f0a:	b29a      	uxth	r2, r3
 8013f0c:	4b16      	ldr	r3, [pc, #88]	; (8013f68 <ip4_reass+0x2fc>)
 8013f0e:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8013f10:	687b      	ldr	r3, [r7, #4]
 8013f12:	e03c      	b.n	8013f8e <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8013f14:	2300      	movs	r3, #0
 8013f16:	e03a      	b.n	8013f8e <ip4_reass+0x322>
      goto nullreturn_ipr;
 8013f18:	bf00      	nop
 8013f1a:	e000      	b.n	8013f1e <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 8013f1c:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8013f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f20:	2b00      	cmp	r3, #0
 8013f22:	d106      	bne.n	8013f32 <ip4_reass+0x2c6>
 8013f24:	4b12      	ldr	r3, [pc, #72]	; (8013f70 <ip4_reass+0x304>)
 8013f26:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8013f2a:	4914      	ldr	r1, [pc, #80]	; (8013f7c <ip4_reass+0x310>)
 8013f2c:	4812      	ldr	r0, [pc, #72]	; (8013f78 <ip4_reass+0x30c>)
 8013f2e:	f000 fb09 	bl	8014544 <iprintf>
  if (ipr->p == NULL) {
 8013f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f34:	685b      	ldr	r3, [r3, #4]
 8013f36:	2b00      	cmp	r3, #0
 8013f38:	d124      	bne.n	8013f84 <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8013f3a:	4b0c      	ldr	r3, [pc, #48]	; (8013f6c <ip4_reass+0x300>)
 8013f3c:	681b      	ldr	r3, [r3, #0]
 8013f3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013f40:	429a      	cmp	r2, r3
 8013f42:	d006      	beq.n	8013f52 <ip4_reass+0x2e6>
 8013f44:	4b0a      	ldr	r3, [pc, #40]	; (8013f70 <ip4_reass+0x304>)
 8013f46:	f240 22ab 	movw	r2, #683	; 0x2ab
 8013f4a:	490d      	ldr	r1, [pc, #52]	; (8013f80 <ip4_reass+0x314>)
 8013f4c:	480a      	ldr	r0, [pc, #40]	; (8013f78 <ip4_reass+0x30c>)
 8013f4e:	f000 faf9 	bl	8014544 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8013f52:	2100      	movs	r1, #0
 8013f54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013f56:	f7ff fcf1 	bl	801393c <ip_reass_dequeue_datagram>
 8013f5a:	e014      	b.n	8013f86 <ip4_reass+0x31a>
    goto nullreturn;
 8013f5c:	bf00      	nop
 8013f5e:	e012      	b.n	8013f86 <ip4_reass+0x31a>
    goto nullreturn;
 8013f60:	bf00      	nop
 8013f62:	e010      	b.n	8013f86 <ip4_reass+0x31a>
      goto nullreturn;
 8013f64:	bf00      	nop
 8013f66:	e00e      	b.n	8013f86 <ip4_reass+0x31a>
 8013f68:	20000220 	.word	0x20000220
 8013f6c:	2000021c 	.word	0x2000021c
 8013f70:	08018040 	.word	0x08018040
 8013f74:	080181b0 	.word	0x080181b0
 8013f78:	08018088 	.word	0x08018088
 8013f7c:	080181cc 	.word	0x080181cc
 8013f80:	080181d8 	.word	0x080181d8
  }

nullreturn:
 8013f84:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8013f86:	6878      	ldr	r0, [r7, #4]
 8013f88:	f7f8 f912 	bl	800c1b0 <pbuf_free>
  return NULL;
 8013f8c:	2300      	movs	r3, #0
}
 8013f8e:	4618      	mov	r0, r3
 8013f90:	3738      	adds	r7, #56	; 0x38
 8013f92:	46bd      	mov	sp, r7
 8013f94:	bd80      	pop	{r7, pc}
 8013f96:	bf00      	nop

08013f98 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8013f98:	b580      	push	{r7, lr}
 8013f9a:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8013f9c:	2005      	movs	r0, #5
 8013f9e:	f7f7 fac9 	bl	800b534 <memp_malloc>
 8013fa2:	4603      	mov	r3, r0
}
 8013fa4:	4618      	mov	r0, r3
 8013fa6:	bd80      	pop	{r7, pc}

08013fa8 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8013fa8:	b580      	push	{r7, lr}
 8013faa:	b082      	sub	sp, #8
 8013fac:	af00      	add	r7, sp, #0
 8013fae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8013fb0:	687b      	ldr	r3, [r7, #4]
 8013fb2:	2b00      	cmp	r3, #0
 8013fb4:	d106      	bne.n	8013fc4 <ip_frag_free_pbuf_custom_ref+0x1c>
 8013fb6:	4b07      	ldr	r3, [pc, #28]	; (8013fd4 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8013fb8:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8013fbc:	4906      	ldr	r1, [pc, #24]	; (8013fd8 <ip_frag_free_pbuf_custom_ref+0x30>)
 8013fbe:	4807      	ldr	r0, [pc, #28]	; (8013fdc <ip_frag_free_pbuf_custom_ref+0x34>)
 8013fc0:	f000 fac0 	bl	8014544 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8013fc4:	6879      	ldr	r1, [r7, #4]
 8013fc6:	2005      	movs	r0, #5
 8013fc8:	f7f7 fb00 	bl	800b5cc <memp_free>
}
 8013fcc:	bf00      	nop
 8013fce:	3708      	adds	r7, #8
 8013fd0:	46bd      	mov	sp, r7
 8013fd2:	bd80      	pop	{r7, pc}
 8013fd4:	08018040 	.word	0x08018040
 8013fd8:	080181f8 	.word	0x080181f8
 8013fdc:	08018088 	.word	0x08018088

08013fe0 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8013fe0:	b580      	push	{r7, lr}
 8013fe2:	b084      	sub	sp, #16
 8013fe4:	af00      	add	r7, sp, #0
 8013fe6:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8013fe8:	687b      	ldr	r3, [r7, #4]
 8013fea:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8013fec:	68fb      	ldr	r3, [r7, #12]
 8013fee:	2b00      	cmp	r3, #0
 8013ff0:	d106      	bne.n	8014000 <ipfrag_free_pbuf_custom+0x20>
 8013ff2:	4b11      	ldr	r3, [pc, #68]	; (8014038 <ipfrag_free_pbuf_custom+0x58>)
 8013ff4:	f240 22ce 	movw	r2, #718	; 0x2ce
 8013ff8:	4910      	ldr	r1, [pc, #64]	; (801403c <ipfrag_free_pbuf_custom+0x5c>)
 8013ffa:	4811      	ldr	r0, [pc, #68]	; (8014040 <ipfrag_free_pbuf_custom+0x60>)
 8013ffc:	f000 faa2 	bl	8014544 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8014000:	68fa      	ldr	r2, [r7, #12]
 8014002:	687b      	ldr	r3, [r7, #4]
 8014004:	429a      	cmp	r2, r3
 8014006:	d006      	beq.n	8014016 <ipfrag_free_pbuf_custom+0x36>
 8014008:	4b0b      	ldr	r3, [pc, #44]	; (8014038 <ipfrag_free_pbuf_custom+0x58>)
 801400a:	f240 22cf 	movw	r2, #719	; 0x2cf
 801400e:	490d      	ldr	r1, [pc, #52]	; (8014044 <ipfrag_free_pbuf_custom+0x64>)
 8014010:	480b      	ldr	r0, [pc, #44]	; (8014040 <ipfrag_free_pbuf_custom+0x60>)
 8014012:	f000 fa97 	bl	8014544 <iprintf>
  if (pcr->original != NULL) {
 8014016:	68fb      	ldr	r3, [r7, #12]
 8014018:	695b      	ldr	r3, [r3, #20]
 801401a:	2b00      	cmp	r3, #0
 801401c:	d004      	beq.n	8014028 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801401e:	68fb      	ldr	r3, [r7, #12]
 8014020:	695b      	ldr	r3, [r3, #20]
 8014022:	4618      	mov	r0, r3
 8014024:	f7f8 f8c4 	bl	800c1b0 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8014028:	68f8      	ldr	r0, [r7, #12]
 801402a:	f7ff ffbd 	bl	8013fa8 <ip_frag_free_pbuf_custom_ref>
}
 801402e:	bf00      	nop
 8014030:	3710      	adds	r7, #16
 8014032:	46bd      	mov	sp, r7
 8014034:	bd80      	pop	{r7, pc}
 8014036:	bf00      	nop
 8014038:	08018040 	.word	0x08018040
 801403c:	08018204 	.word	0x08018204
 8014040:	08018088 	.word	0x08018088
 8014044:	08018210 	.word	0x08018210

08014048 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8014048:	b580      	push	{r7, lr}
 801404a:	b094      	sub	sp, #80	; 0x50
 801404c:	af02      	add	r7, sp, #8
 801404e:	60f8      	str	r0, [r7, #12]
 8014050:	60b9      	str	r1, [r7, #8]
 8014052:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8014054:	2300      	movs	r3, #0
 8014056:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801405a:	68bb      	ldr	r3, [r7, #8]
 801405c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801405e:	3b14      	subs	r3, #20
 8014060:	2b00      	cmp	r3, #0
 8014062:	da00      	bge.n	8014066 <ip4_frag+0x1e>
 8014064:	3307      	adds	r3, #7
 8014066:	10db      	asrs	r3, r3, #3
 8014068:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801406a:	2314      	movs	r3, #20
 801406c:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801406e:	68fb      	ldr	r3, [r7, #12]
 8014070:	685b      	ldr	r3, [r3, #4]
 8014072:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8014074:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014076:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8014078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801407a:	781b      	ldrb	r3, [r3, #0]
 801407c:	f003 030f 	and.w	r3, r3, #15
 8014080:	b2db      	uxtb	r3, r3
 8014082:	009b      	lsls	r3, r3, #2
 8014084:	b2db      	uxtb	r3, r3
 8014086:	2b14      	cmp	r3, #20
 8014088:	d002      	beq.n	8014090 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801408a:	f06f 0305 	mvn.w	r3, #5
 801408e:	e110      	b.n	80142b2 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8014090:	68fb      	ldr	r3, [r7, #12]
 8014092:	895b      	ldrh	r3, [r3, #10]
 8014094:	2b13      	cmp	r3, #19
 8014096:	d809      	bhi.n	80140ac <ip4_frag+0x64>
 8014098:	4b88      	ldr	r3, [pc, #544]	; (80142bc <ip4_frag+0x274>)
 801409a:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 801409e:	4988      	ldr	r1, [pc, #544]	; (80142c0 <ip4_frag+0x278>)
 80140a0:	4888      	ldr	r0, [pc, #544]	; (80142c4 <ip4_frag+0x27c>)
 80140a2:	f000 fa4f 	bl	8014544 <iprintf>
 80140a6:	f06f 0305 	mvn.w	r3, #5
 80140aa:	e102      	b.n	80142b2 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80140ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80140ae:	88db      	ldrh	r3, [r3, #6]
 80140b0:	b29b      	uxth	r3, r3
 80140b2:	4618      	mov	r0, r3
 80140b4:	f7f6 fde9 	bl	800ac8a <lwip_htons>
 80140b8:	4603      	mov	r3, r0
 80140ba:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 80140bc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80140be:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80140c2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 80140c6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80140c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80140cc:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 80140ce:	68fb      	ldr	r3, [r7, #12]
 80140d0:	891b      	ldrh	r3, [r3, #8]
 80140d2:	3b14      	subs	r3, #20
 80140d4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 80140d8:	e0e1      	b.n	801429e <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 80140da:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80140dc:	00db      	lsls	r3, r3, #3
 80140de:	b29b      	uxth	r3, r3
 80140e0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80140e4:	4293      	cmp	r3, r2
 80140e6:	bf28      	it	cs
 80140e8:	4613      	movcs	r3, r2
 80140ea:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 80140ec:	f44f 7220 	mov.w	r2, #640	; 0x280
 80140f0:	2114      	movs	r1, #20
 80140f2:	200e      	movs	r0, #14
 80140f4:	f7f7 fd78 	bl	800bbe8 <pbuf_alloc>
 80140f8:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 80140fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80140fc:	2b00      	cmp	r3, #0
 80140fe:	f000 80d5 	beq.w	80142ac <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8014102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014104:	895b      	ldrh	r3, [r3, #10]
 8014106:	2b13      	cmp	r3, #19
 8014108:	d806      	bhi.n	8014118 <ip4_frag+0xd0>
 801410a:	4b6c      	ldr	r3, [pc, #432]	; (80142bc <ip4_frag+0x274>)
 801410c:	f44f 7249 	mov.w	r2, #804	; 0x324
 8014110:	496d      	ldr	r1, [pc, #436]	; (80142c8 <ip4_frag+0x280>)
 8014112:	486c      	ldr	r0, [pc, #432]	; (80142c4 <ip4_frag+0x27c>)
 8014114:	f000 fa16 	bl	8014544 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8014118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801411a:	685b      	ldr	r3, [r3, #4]
 801411c:	2214      	movs	r2, #20
 801411e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8014120:	4618      	mov	r0, r3
 8014122:	f000 f9df 	bl	80144e4 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8014126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014128:	685b      	ldr	r3, [r3, #4]
 801412a:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 801412c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801412e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8014132:	e064      	b.n	80141fe <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8014134:	68fb      	ldr	r3, [r7, #12]
 8014136:	895a      	ldrh	r2, [r3, #10]
 8014138:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801413a:	1ad3      	subs	r3, r2, r3
 801413c:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801413e:	68fb      	ldr	r3, [r7, #12]
 8014140:	895b      	ldrh	r3, [r3, #10]
 8014142:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8014144:	429a      	cmp	r2, r3
 8014146:	d906      	bls.n	8014156 <ip4_frag+0x10e>
 8014148:	4b5c      	ldr	r3, [pc, #368]	; (80142bc <ip4_frag+0x274>)
 801414a:	f240 322d 	movw	r2, #813	; 0x32d
 801414e:	495f      	ldr	r1, [pc, #380]	; (80142cc <ip4_frag+0x284>)
 8014150:	485c      	ldr	r0, [pc, #368]	; (80142c4 <ip4_frag+0x27c>)
 8014152:	f000 f9f7 	bl	8014544 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8014156:	8bfa      	ldrh	r2, [r7, #30]
 8014158:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801415c:	4293      	cmp	r3, r2
 801415e:	bf28      	it	cs
 8014160:	4613      	movcs	r3, r2
 8014162:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8014166:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801416a:	2b00      	cmp	r3, #0
 801416c:	d105      	bne.n	801417a <ip4_frag+0x132>
        poff = 0;
 801416e:	2300      	movs	r3, #0
 8014170:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8014172:	68fb      	ldr	r3, [r7, #12]
 8014174:	681b      	ldr	r3, [r3, #0]
 8014176:	60fb      	str	r3, [r7, #12]
        continue;
 8014178:	e041      	b.n	80141fe <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801417a:	f7ff ff0d 	bl	8013f98 <ip_frag_alloc_pbuf_custom_ref>
 801417e:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8014180:	69bb      	ldr	r3, [r7, #24]
 8014182:	2b00      	cmp	r3, #0
 8014184:	d103      	bne.n	801418e <ip4_frag+0x146>
        pbuf_free(rambuf);
 8014186:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014188:	f7f8 f812 	bl	800c1b0 <pbuf_free>
        goto memerr;
 801418c:	e08f      	b.n	80142ae <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801418e:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8014190:	68fb      	ldr	r3, [r7, #12]
 8014192:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8014194:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8014196:	4413      	add	r3, r2
 8014198:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 801419c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80141a0:	9201      	str	r2, [sp, #4]
 80141a2:	9300      	str	r3, [sp, #0]
 80141a4:	4603      	mov	r3, r0
 80141a6:	2241      	movs	r2, #65	; 0x41
 80141a8:	2000      	movs	r0, #0
 80141aa:	f7f7 fe47 	bl	800be3c <pbuf_alloced_custom>
 80141ae:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 80141b0:	697b      	ldr	r3, [r7, #20]
 80141b2:	2b00      	cmp	r3, #0
 80141b4:	d106      	bne.n	80141c4 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 80141b6:	69b8      	ldr	r0, [r7, #24]
 80141b8:	f7ff fef6 	bl	8013fa8 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 80141bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80141be:	f7f7 fff7 	bl	800c1b0 <pbuf_free>
        goto memerr;
 80141c2:	e074      	b.n	80142ae <ip4_frag+0x266>
      }
      pbuf_ref(p);
 80141c4:	68f8      	ldr	r0, [r7, #12]
 80141c6:	f7f8 f893 	bl	800c2f0 <pbuf_ref>
      pcr->original = p;
 80141ca:	69bb      	ldr	r3, [r7, #24]
 80141cc:	68fa      	ldr	r2, [r7, #12]
 80141ce:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 80141d0:	69bb      	ldr	r3, [r7, #24]
 80141d2:	4a3f      	ldr	r2, [pc, #252]	; (80142d0 <ip4_frag+0x288>)
 80141d4:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 80141d6:	6979      	ldr	r1, [r7, #20]
 80141d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80141da:	f7f8 f8ab 	bl	800c334 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 80141de:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 80141e2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80141e6:	1ad3      	subs	r3, r2, r3
 80141e8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 80141ec:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80141f0:	2b00      	cmp	r3, #0
 80141f2:	d004      	beq.n	80141fe <ip4_frag+0x1b6>
        poff = 0;
 80141f4:	2300      	movs	r3, #0
 80141f6:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80141f8:	68fb      	ldr	r3, [r7, #12]
 80141fa:	681b      	ldr	r3, [r3, #0]
 80141fc:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 80141fe:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8014202:	2b00      	cmp	r3, #0
 8014204:	d196      	bne.n	8014134 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8014206:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8014208:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801420c:	4413      	add	r3, r2
 801420e:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8014210:	68bb      	ldr	r3, [r7, #8]
 8014212:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8014214:	f1a3 0213 	sub.w	r2, r3, #19
 8014218:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801421c:	429a      	cmp	r2, r3
 801421e:	bfcc      	ite	gt
 8014220:	2301      	movgt	r3, #1
 8014222:	2300      	movle	r3, #0
 8014224:	b2db      	uxtb	r3, r3
 8014226:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8014228:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801422c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014230:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8014232:	6a3b      	ldr	r3, [r7, #32]
 8014234:	2b00      	cmp	r3, #0
 8014236:	d002      	beq.n	801423e <ip4_frag+0x1f6>
 8014238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801423a:	2b00      	cmp	r3, #0
 801423c:	d003      	beq.n	8014246 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801423e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8014240:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8014244:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8014246:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8014248:	4618      	mov	r0, r3
 801424a:	f7f6 fd1e 	bl	800ac8a <lwip_htons>
 801424e:	4603      	mov	r3, r0
 8014250:	461a      	mov	r2, r3
 8014252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014254:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8014256:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8014258:	3314      	adds	r3, #20
 801425a:	b29b      	uxth	r3, r3
 801425c:	4618      	mov	r0, r3
 801425e:	f7f6 fd14 	bl	800ac8a <lwip_htons>
 8014262:	4603      	mov	r3, r0
 8014264:	461a      	mov	r2, r3
 8014266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014268:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801426a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801426c:	2200      	movs	r2, #0
 801426e:	729a      	strb	r2, [r3, #10]
 8014270:	2200      	movs	r2, #0
 8014272:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8014274:	68bb      	ldr	r3, [r7, #8]
 8014276:	695b      	ldr	r3, [r3, #20]
 8014278:	687a      	ldr	r2, [r7, #4]
 801427a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801427c:	68b8      	ldr	r0, [r7, #8]
 801427e:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8014280:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014282:	f7f7 ff95 	bl	800c1b0 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8014286:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801428a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801428c:	1ad3      	subs	r3, r2, r3
 801428e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8014292:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8014296:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014298:	4413      	add	r3, r2
 801429a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 801429e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80142a2:	2b00      	cmp	r3, #0
 80142a4:	f47f af19 	bne.w	80140da <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 80142a8:	2300      	movs	r3, #0
 80142aa:	e002      	b.n	80142b2 <ip4_frag+0x26a>
      goto memerr;
 80142ac:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 80142ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 80142b2:	4618      	mov	r0, r3
 80142b4:	3748      	adds	r7, #72	; 0x48
 80142b6:	46bd      	mov	sp, r7
 80142b8:	bd80      	pop	{r7, pc}
 80142ba:	bf00      	nop
 80142bc:	08018040 	.word	0x08018040
 80142c0:	0801821c 	.word	0x0801821c
 80142c4:	08018088 	.word	0x08018088
 80142c8:	08018238 	.word	0x08018238
 80142cc:	08018258 	.word	0x08018258
 80142d0:	08013fe1 	.word	0x08013fe1

080142d4 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 80142d4:	b580      	push	{r7, lr}
 80142d6:	b086      	sub	sp, #24
 80142d8:	af00      	add	r7, sp, #0
 80142da:	6078      	str	r0, [r7, #4]
 80142dc:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 80142de:	230e      	movs	r3, #14
 80142e0:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 80142e2:	687b      	ldr	r3, [r7, #4]
 80142e4:	895b      	ldrh	r3, [r3, #10]
 80142e6:	2b0e      	cmp	r3, #14
 80142e8:	d96e      	bls.n	80143c8 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 80142ea:	687b      	ldr	r3, [r7, #4]
 80142ec:	7bdb      	ldrb	r3, [r3, #15]
 80142ee:	2b00      	cmp	r3, #0
 80142f0:	d106      	bne.n	8014300 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 80142f2:	683b      	ldr	r3, [r7, #0]
 80142f4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80142f8:	3301      	adds	r3, #1
 80142fa:	b2da      	uxtb	r2, r3
 80142fc:	687b      	ldr	r3, [r7, #4]
 80142fe:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8014300:	687b      	ldr	r3, [r7, #4]
 8014302:	685b      	ldr	r3, [r3, #4]
 8014304:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8014306:	693b      	ldr	r3, [r7, #16]
 8014308:	7b1a      	ldrb	r2, [r3, #12]
 801430a:	7b5b      	ldrb	r3, [r3, #13]
 801430c:	021b      	lsls	r3, r3, #8
 801430e:	4313      	orrs	r3, r2
 8014310:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8014312:	693b      	ldr	r3, [r7, #16]
 8014314:	781b      	ldrb	r3, [r3, #0]
 8014316:	f003 0301 	and.w	r3, r3, #1
 801431a:	2b00      	cmp	r3, #0
 801431c:	d023      	beq.n	8014366 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801431e:	693b      	ldr	r3, [r7, #16]
 8014320:	781b      	ldrb	r3, [r3, #0]
 8014322:	2b01      	cmp	r3, #1
 8014324:	d10f      	bne.n	8014346 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8014326:	693b      	ldr	r3, [r7, #16]
 8014328:	785b      	ldrb	r3, [r3, #1]
 801432a:	2b00      	cmp	r3, #0
 801432c:	d11b      	bne.n	8014366 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801432e:	693b      	ldr	r3, [r7, #16]
 8014330:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8014332:	2b5e      	cmp	r3, #94	; 0x5e
 8014334:	d117      	bne.n	8014366 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8014336:	687b      	ldr	r3, [r7, #4]
 8014338:	7b5b      	ldrb	r3, [r3, #13]
 801433a:	f043 0310 	orr.w	r3, r3, #16
 801433e:	b2da      	uxtb	r2, r3
 8014340:	687b      	ldr	r3, [r7, #4]
 8014342:	735a      	strb	r2, [r3, #13]
 8014344:	e00f      	b.n	8014366 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8014346:	693b      	ldr	r3, [r7, #16]
 8014348:	2206      	movs	r2, #6
 801434a:	4928      	ldr	r1, [pc, #160]	; (80143ec <ethernet_input+0x118>)
 801434c:	4618      	mov	r0, r3
 801434e:	f000 f8bb 	bl	80144c8 <memcmp>
 8014352:	4603      	mov	r3, r0
 8014354:	2b00      	cmp	r3, #0
 8014356:	d106      	bne.n	8014366 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8014358:	687b      	ldr	r3, [r7, #4]
 801435a:	7b5b      	ldrb	r3, [r3, #13]
 801435c:	f043 0308 	orr.w	r3, r3, #8
 8014360:	b2da      	uxtb	r2, r3
 8014362:	687b      	ldr	r3, [r7, #4]
 8014364:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8014366:	89fb      	ldrh	r3, [r7, #14]
 8014368:	2b08      	cmp	r3, #8
 801436a:	d003      	beq.n	8014374 <ethernet_input+0xa0>
 801436c:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8014370:	d014      	beq.n	801439c <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8014372:	e032      	b.n	80143da <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8014374:	683b      	ldr	r3, [r7, #0]
 8014376:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801437a:	f003 0308 	and.w	r3, r3, #8
 801437e:	2b00      	cmp	r3, #0
 8014380:	d024      	beq.n	80143cc <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8014382:	8afb      	ldrh	r3, [r7, #22]
 8014384:	4619      	mov	r1, r3
 8014386:	6878      	ldr	r0, [r7, #4]
 8014388:	f7f7 fe8c 	bl	800c0a4 <pbuf_remove_header>
 801438c:	4603      	mov	r3, r0
 801438e:	2b00      	cmp	r3, #0
 8014390:	d11e      	bne.n	80143d0 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8014392:	6839      	ldr	r1, [r7, #0]
 8014394:	6878      	ldr	r0, [r7, #4]
 8014396:	f7fe ff27 	bl	80131e8 <ip4_input>
      break;
 801439a:	e013      	b.n	80143c4 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801439c:	683b      	ldr	r3, [r7, #0]
 801439e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80143a2:	f003 0308 	and.w	r3, r3, #8
 80143a6:	2b00      	cmp	r3, #0
 80143a8:	d014      	beq.n	80143d4 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80143aa:	8afb      	ldrh	r3, [r7, #22]
 80143ac:	4619      	mov	r1, r3
 80143ae:	6878      	ldr	r0, [r7, #4]
 80143b0:	f7f7 fe78 	bl	800c0a4 <pbuf_remove_header>
 80143b4:	4603      	mov	r3, r0
 80143b6:	2b00      	cmp	r3, #0
 80143b8:	d10e      	bne.n	80143d8 <ethernet_input+0x104>
        etharp_input(p, netif);
 80143ba:	6839      	ldr	r1, [r7, #0]
 80143bc:	6878      	ldr	r0, [r7, #4]
 80143be:	f7fe f8c7 	bl	8012550 <etharp_input>
      break;
 80143c2:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 80143c4:	2300      	movs	r3, #0
 80143c6:	e00c      	b.n	80143e2 <ethernet_input+0x10e>
    goto free_and_return;
 80143c8:	bf00      	nop
 80143ca:	e006      	b.n	80143da <ethernet_input+0x106>
        goto free_and_return;
 80143cc:	bf00      	nop
 80143ce:	e004      	b.n	80143da <ethernet_input+0x106>
        goto free_and_return;
 80143d0:	bf00      	nop
 80143d2:	e002      	b.n	80143da <ethernet_input+0x106>
        goto free_and_return;
 80143d4:	bf00      	nop
 80143d6:	e000      	b.n	80143da <ethernet_input+0x106>
        goto free_and_return;
 80143d8:	bf00      	nop

free_and_return:
  pbuf_free(p);
 80143da:	6878      	ldr	r0, [r7, #4]
 80143dc:	f7f7 fee8 	bl	800c1b0 <pbuf_free>
  return ERR_OK;
 80143e0:	2300      	movs	r3, #0
}
 80143e2:	4618      	mov	r0, r3
 80143e4:	3718      	adds	r7, #24
 80143e6:	46bd      	mov	sp, r7
 80143e8:	bd80      	pop	{r7, pc}
 80143ea:	bf00      	nop
 80143ec:	08018404 	.word	0x08018404

080143f0 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 80143f0:	b580      	push	{r7, lr}
 80143f2:	b086      	sub	sp, #24
 80143f4:	af00      	add	r7, sp, #0
 80143f6:	60f8      	str	r0, [r7, #12]
 80143f8:	60b9      	str	r1, [r7, #8]
 80143fa:	607a      	str	r2, [r7, #4]
 80143fc:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 80143fe:	8c3b      	ldrh	r3, [r7, #32]
 8014400:	4618      	mov	r0, r3
 8014402:	f7f6 fc42 	bl	800ac8a <lwip_htons>
 8014406:	4603      	mov	r3, r0
 8014408:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801440a:	210e      	movs	r1, #14
 801440c:	68b8      	ldr	r0, [r7, #8]
 801440e:	f7f7 fe39 	bl	800c084 <pbuf_add_header>
 8014412:	4603      	mov	r3, r0
 8014414:	2b00      	cmp	r3, #0
 8014416:	d125      	bne.n	8014464 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8014418:	68bb      	ldr	r3, [r7, #8]
 801441a:	685b      	ldr	r3, [r3, #4]
 801441c:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801441e:	693b      	ldr	r3, [r7, #16]
 8014420:	8afa      	ldrh	r2, [r7, #22]
 8014422:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8014424:	693b      	ldr	r3, [r7, #16]
 8014426:	2206      	movs	r2, #6
 8014428:	6839      	ldr	r1, [r7, #0]
 801442a:	4618      	mov	r0, r3
 801442c:	f000 f85a 	bl	80144e4 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8014430:	693b      	ldr	r3, [r7, #16]
 8014432:	3306      	adds	r3, #6
 8014434:	2206      	movs	r2, #6
 8014436:	6879      	ldr	r1, [r7, #4]
 8014438:	4618      	mov	r0, r3
 801443a:	f000 f853 	bl	80144e4 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801443e:	68fb      	ldr	r3, [r7, #12]
 8014440:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8014444:	2b06      	cmp	r3, #6
 8014446:	d006      	beq.n	8014456 <ethernet_output+0x66>
 8014448:	4b0a      	ldr	r3, [pc, #40]	; (8014474 <ethernet_output+0x84>)
 801444a:	f44f 7299 	mov.w	r2, #306	; 0x132
 801444e:	490a      	ldr	r1, [pc, #40]	; (8014478 <ethernet_output+0x88>)
 8014450:	480a      	ldr	r0, [pc, #40]	; (801447c <ethernet_output+0x8c>)
 8014452:	f000 f877 	bl	8014544 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8014456:	68fb      	ldr	r3, [r7, #12]
 8014458:	699b      	ldr	r3, [r3, #24]
 801445a:	68b9      	ldr	r1, [r7, #8]
 801445c:	68f8      	ldr	r0, [r7, #12]
 801445e:	4798      	blx	r3
 8014460:	4603      	mov	r3, r0
 8014462:	e002      	b.n	801446a <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8014464:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8014466:	f06f 0301 	mvn.w	r3, #1
}
 801446a:	4618      	mov	r0, r3
 801446c:	3718      	adds	r7, #24
 801446e:	46bd      	mov	sp, r7
 8014470:	bd80      	pop	{r7, pc}
 8014472:	bf00      	nop
 8014474:	08018268 	.word	0x08018268
 8014478:	080182a0 	.word	0x080182a0
 801447c:	080182d4 	.word	0x080182d4

08014480 <__libc_init_array>:
 8014480:	b570      	push	{r4, r5, r6, lr}
 8014482:	4d0d      	ldr	r5, [pc, #52]	; (80144b8 <__libc_init_array+0x38>)
 8014484:	4c0d      	ldr	r4, [pc, #52]	; (80144bc <__libc_init_array+0x3c>)
 8014486:	1b64      	subs	r4, r4, r5
 8014488:	10a4      	asrs	r4, r4, #2
 801448a:	2600      	movs	r6, #0
 801448c:	42a6      	cmp	r6, r4
 801448e:	d109      	bne.n	80144a4 <__libc_init_array+0x24>
 8014490:	4d0b      	ldr	r5, [pc, #44]	; (80144c0 <__libc_init_array+0x40>)
 8014492:	4c0c      	ldr	r4, [pc, #48]	; (80144c4 <__libc_init_array+0x44>)
 8014494:	f001 fa1a 	bl	80158cc <_init>
 8014498:	1b64      	subs	r4, r4, r5
 801449a:	10a4      	asrs	r4, r4, #2
 801449c:	2600      	movs	r6, #0
 801449e:	42a6      	cmp	r6, r4
 80144a0:	d105      	bne.n	80144ae <__libc_init_array+0x2e>
 80144a2:	bd70      	pop	{r4, r5, r6, pc}
 80144a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80144a8:	4798      	blx	r3
 80144aa:	3601      	adds	r6, #1
 80144ac:	e7ee      	b.n	801448c <__libc_init_array+0xc>
 80144ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80144b2:	4798      	blx	r3
 80144b4:	3601      	adds	r6, #1
 80144b6:	e7f2      	b.n	801449e <__libc_init_array+0x1e>
 80144b8:	08018568 	.word	0x08018568
 80144bc:	08018568 	.word	0x08018568
 80144c0:	08018568 	.word	0x08018568
 80144c4:	0801856c 	.word	0x0801856c

080144c8 <memcmp>:
 80144c8:	b530      	push	{r4, r5, lr}
 80144ca:	3901      	subs	r1, #1
 80144cc:	2400      	movs	r4, #0
 80144ce:	42a2      	cmp	r2, r4
 80144d0:	d101      	bne.n	80144d6 <memcmp+0xe>
 80144d2:	2000      	movs	r0, #0
 80144d4:	e005      	b.n	80144e2 <memcmp+0x1a>
 80144d6:	5d03      	ldrb	r3, [r0, r4]
 80144d8:	3401      	adds	r4, #1
 80144da:	5d0d      	ldrb	r5, [r1, r4]
 80144dc:	42ab      	cmp	r3, r5
 80144de:	d0f6      	beq.n	80144ce <memcmp+0x6>
 80144e0:	1b58      	subs	r0, r3, r5
 80144e2:	bd30      	pop	{r4, r5, pc}

080144e4 <memcpy>:
 80144e4:	440a      	add	r2, r1
 80144e6:	4291      	cmp	r1, r2
 80144e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80144ec:	d100      	bne.n	80144f0 <memcpy+0xc>
 80144ee:	4770      	bx	lr
 80144f0:	b510      	push	{r4, lr}
 80144f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80144f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80144fa:	4291      	cmp	r1, r2
 80144fc:	d1f9      	bne.n	80144f2 <memcpy+0xe>
 80144fe:	bd10      	pop	{r4, pc}

08014500 <memmove>:
 8014500:	4288      	cmp	r0, r1
 8014502:	b510      	push	{r4, lr}
 8014504:	eb01 0402 	add.w	r4, r1, r2
 8014508:	d902      	bls.n	8014510 <memmove+0x10>
 801450a:	4284      	cmp	r4, r0
 801450c:	4623      	mov	r3, r4
 801450e:	d807      	bhi.n	8014520 <memmove+0x20>
 8014510:	1e43      	subs	r3, r0, #1
 8014512:	42a1      	cmp	r1, r4
 8014514:	d008      	beq.n	8014528 <memmove+0x28>
 8014516:	f811 2b01 	ldrb.w	r2, [r1], #1
 801451a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801451e:	e7f8      	b.n	8014512 <memmove+0x12>
 8014520:	4402      	add	r2, r0
 8014522:	4601      	mov	r1, r0
 8014524:	428a      	cmp	r2, r1
 8014526:	d100      	bne.n	801452a <memmove+0x2a>
 8014528:	bd10      	pop	{r4, pc}
 801452a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801452e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8014532:	e7f7      	b.n	8014524 <memmove+0x24>

08014534 <memset>:
 8014534:	4402      	add	r2, r0
 8014536:	4603      	mov	r3, r0
 8014538:	4293      	cmp	r3, r2
 801453a:	d100      	bne.n	801453e <memset+0xa>
 801453c:	4770      	bx	lr
 801453e:	f803 1b01 	strb.w	r1, [r3], #1
 8014542:	e7f9      	b.n	8014538 <memset+0x4>

08014544 <iprintf>:
 8014544:	b40f      	push	{r0, r1, r2, r3}
 8014546:	4b0a      	ldr	r3, [pc, #40]	; (8014570 <iprintf+0x2c>)
 8014548:	b513      	push	{r0, r1, r4, lr}
 801454a:	681c      	ldr	r4, [r3, #0]
 801454c:	b124      	cbz	r4, 8014558 <iprintf+0x14>
 801454e:	69a3      	ldr	r3, [r4, #24]
 8014550:	b913      	cbnz	r3, 8014558 <iprintf+0x14>
 8014552:	4620      	mov	r0, r4
 8014554:	f000 f8e4 	bl	8014720 <__sinit>
 8014558:	ab05      	add	r3, sp, #20
 801455a:	9a04      	ldr	r2, [sp, #16]
 801455c:	68a1      	ldr	r1, [r4, #8]
 801455e:	9301      	str	r3, [sp, #4]
 8014560:	4620      	mov	r0, r4
 8014562:	f000 fbc7 	bl	8014cf4 <_vfiprintf_r>
 8014566:	b002      	add	sp, #8
 8014568:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801456c:	b004      	add	sp, #16
 801456e:	4770      	bx	lr
 8014570:	20000014 	.word	0x20000014

08014574 <rand>:
 8014574:	4b17      	ldr	r3, [pc, #92]	; (80145d4 <rand+0x60>)
 8014576:	b510      	push	{r4, lr}
 8014578:	681c      	ldr	r4, [r3, #0]
 801457a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801457c:	b9b3      	cbnz	r3, 80145ac <rand+0x38>
 801457e:	2018      	movs	r0, #24
 8014580:	f000 f980 	bl	8014884 <malloc>
 8014584:	63a0      	str	r0, [r4, #56]	; 0x38
 8014586:	b928      	cbnz	r0, 8014594 <rand+0x20>
 8014588:	4602      	mov	r2, r0
 801458a:	4b13      	ldr	r3, [pc, #76]	; (80145d8 <rand+0x64>)
 801458c:	4813      	ldr	r0, [pc, #76]	; (80145dc <rand+0x68>)
 801458e:	214e      	movs	r1, #78	; 0x4e
 8014590:	f000 f850 	bl	8014634 <__assert_func>
 8014594:	4a12      	ldr	r2, [pc, #72]	; (80145e0 <rand+0x6c>)
 8014596:	4b13      	ldr	r3, [pc, #76]	; (80145e4 <rand+0x70>)
 8014598:	e9c0 2300 	strd	r2, r3, [r0]
 801459c:	4b12      	ldr	r3, [pc, #72]	; (80145e8 <rand+0x74>)
 801459e:	6083      	str	r3, [r0, #8]
 80145a0:	230b      	movs	r3, #11
 80145a2:	8183      	strh	r3, [r0, #12]
 80145a4:	2201      	movs	r2, #1
 80145a6:	2300      	movs	r3, #0
 80145a8:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80145ac:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80145ae:	480f      	ldr	r0, [pc, #60]	; (80145ec <rand+0x78>)
 80145b0:	690a      	ldr	r2, [r1, #16]
 80145b2:	694b      	ldr	r3, [r1, #20]
 80145b4:	4c0e      	ldr	r4, [pc, #56]	; (80145f0 <rand+0x7c>)
 80145b6:	4350      	muls	r0, r2
 80145b8:	fb04 0003 	mla	r0, r4, r3, r0
 80145bc:	fba2 3404 	umull	r3, r4, r2, r4
 80145c0:	1c5a      	adds	r2, r3, #1
 80145c2:	4404      	add	r4, r0
 80145c4:	f144 0000 	adc.w	r0, r4, #0
 80145c8:	e9c1 2004 	strd	r2, r0, [r1, #16]
 80145cc:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80145d0:	bd10      	pop	{r4, pc}
 80145d2:	bf00      	nop
 80145d4:	20000014 	.word	0x20000014
 80145d8:	08018418 	.word	0x08018418
 80145dc:	0801842f 	.word	0x0801842f
 80145e0:	abcd330e 	.word	0xabcd330e
 80145e4:	e66d1234 	.word	0xe66d1234
 80145e8:	0005deec 	.word	0x0005deec
 80145ec:	5851f42d 	.word	0x5851f42d
 80145f0:	4c957f2d 	.word	0x4c957f2d

080145f4 <siprintf>:
 80145f4:	b40e      	push	{r1, r2, r3}
 80145f6:	b500      	push	{lr}
 80145f8:	b09c      	sub	sp, #112	; 0x70
 80145fa:	ab1d      	add	r3, sp, #116	; 0x74
 80145fc:	9002      	str	r0, [sp, #8]
 80145fe:	9006      	str	r0, [sp, #24]
 8014600:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8014604:	4809      	ldr	r0, [pc, #36]	; (801462c <siprintf+0x38>)
 8014606:	9107      	str	r1, [sp, #28]
 8014608:	9104      	str	r1, [sp, #16]
 801460a:	4909      	ldr	r1, [pc, #36]	; (8014630 <siprintf+0x3c>)
 801460c:	f853 2b04 	ldr.w	r2, [r3], #4
 8014610:	9105      	str	r1, [sp, #20]
 8014612:	6800      	ldr	r0, [r0, #0]
 8014614:	9301      	str	r3, [sp, #4]
 8014616:	a902      	add	r1, sp, #8
 8014618:	f000 fa42 	bl	8014aa0 <_svfiprintf_r>
 801461c:	9b02      	ldr	r3, [sp, #8]
 801461e:	2200      	movs	r2, #0
 8014620:	701a      	strb	r2, [r3, #0]
 8014622:	b01c      	add	sp, #112	; 0x70
 8014624:	f85d eb04 	ldr.w	lr, [sp], #4
 8014628:	b003      	add	sp, #12
 801462a:	4770      	bx	lr
 801462c:	20000014 	.word	0x20000014
 8014630:	ffff0208 	.word	0xffff0208

08014634 <__assert_func>:
 8014634:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014636:	4614      	mov	r4, r2
 8014638:	461a      	mov	r2, r3
 801463a:	4b09      	ldr	r3, [pc, #36]	; (8014660 <__assert_func+0x2c>)
 801463c:	681b      	ldr	r3, [r3, #0]
 801463e:	4605      	mov	r5, r0
 8014640:	68d8      	ldr	r0, [r3, #12]
 8014642:	b14c      	cbz	r4, 8014658 <__assert_func+0x24>
 8014644:	4b07      	ldr	r3, [pc, #28]	; (8014664 <__assert_func+0x30>)
 8014646:	9100      	str	r1, [sp, #0]
 8014648:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801464c:	4906      	ldr	r1, [pc, #24]	; (8014668 <__assert_func+0x34>)
 801464e:	462b      	mov	r3, r5
 8014650:	f000 f8e4 	bl	801481c <fiprintf>
 8014654:	f000 ff38 	bl	80154c8 <abort>
 8014658:	4b04      	ldr	r3, [pc, #16]	; (801466c <__assert_func+0x38>)
 801465a:	461c      	mov	r4, r3
 801465c:	e7f3      	b.n	8014646 <__assert_func+0x12>
 801465e:	bf00      	nop
 8014660:	20000014 	.word	0x20000014
 8014664:	0801848e 	.word	0x0801848e
 8014668:	0801849b 	.word	0x0801849b
 801466c:	080184c9 	.word	0x080184c9

08014670 <std>:
 8014670:	2300      	movs	r3, #0
 8014672:	b510      	push	{r4, lr}
 8014674:	4604      	mov	r4, r0
 8014676:	e9c0 3300 	strd	r3, r3, [r0]
 801467a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801467e:	6083      	str	r3, [r0, #8]
 8014680:	8181      	strh	r1, [r0, #12]
 8014682:	6643      	str	r3, [r0, #100]	; 0x64
 8014684:	81c2      	strh	r2, [r0, #14]
 8014686:	6183      	str	r3, [r0, #24]
 8014688:	4619      	mov	r1, r3
 801468a:	2208      	movs	r2, #8
 801468c:	305c      	adds	r0, #92	; 0x5c
 801468e:	f7ff ff51 	bl	8014534 <memset>
 8014692:	4b05      	ldr	r3, [pc, #20]	; (80146a8 <std+0x38>)
 8014694:	6263      	str	r3, [r4, #36]	; 0x24
 8014696:	4b05      	ldr	r3, [pc, #20]	; (80146ac <std+0x3c>)
 8014698:	62a3      	str	r3, [r4, #40]	; 0x28
 801469a:	4b05      	ldr	r3, [pc, #20]	; (80146b0 <std+0x40>)
 801469c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801469e:	4b05      	ldr	r3, [pc, #20]	; (80146b4 <std+0x44>)
 80146a0:	6224      	str	r4, [r4, #32]
 80146a2:	6323      	str	r3, [r4, #48]	; 0x30
 80146a4:	bd10      	pop	{r4, pc}
 80146a6:	bf00      	nop
 80146a8:	0801529d 	.word	0x0801529d
 80146ac:	080152bf 	.word	0x080152bf
 80146b0:	080152f7 	.word	0x080152f7
 80146b4:	0801531b 	.word	0x0801531b

080146b8 <_cleanup_r>:
 80146b8:	4901      	ldr	r1, [pc, #4]	; (80146c0 <_cleanup_r+0x8>)
 80146ba:	f000 b8c1 	b.w	8014840 <_fwalk_reent>
 80146be:	bf00      	nop
 80146c0:	08015605 	.word	0x08015605

080146c4 <__sfmoreglue>:
 80146c4:	b570      	push	{r4, r5, r6, lr}
 80146c6:	1e4a      	subs	r2, r1, #1
 80146c8:	2568      	movs	r5, #104	; 0x68
 80146ca:	4355      	muls	r5, r2
 80146cc:	460e      	mov	r6, r1
 80146ce:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80146d2:	f000 f92f 	bl	8014934 <_malloc_r>
 80146d6:	4604      	mov	r4, r0
 80146d8:	b140      	cbz	r0, 80146ec <__sfmoreglue+0x28>
 80146da:	2100      	movs	r1, #0
 80146dc:	e9c0 1600 	strd	r1, r6, [r0]
 80146e0:	300c      	adds	r0, #12
 80146e2:	60a0      	str	r0, [r4, #8]
 80146e4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80146e8:	f7ff ff24 	bl	8014534 <memset>
 80146ec:	4620      	mov	r0, r4
 80146ee:	bd70      	pop	{r4, r5, r6, pc}

080146f0 <__sfp_lock_acquire>:
 80146f0:	4801      	ldr	r0, [pc, #4]	; (80146f8 <__sfp_lock_acquire+0x8>)
 80146f2:	f000 b8c5 	b.w	8014880 <__retarget_lock_acquire_recursive>
 80146f6:	bf00      	nop
 80146f8:	200072c8 	.word	0x200072c8

080146fc <__sfp_lock_release>:
 80146fc:	4801      	ldr	r0, [pc, #4]	; (8014704 <__sfp_lock_release+0x8>)
 80146fe:	f000 b8c0 	b.w	8014882 <__retarget_lock_release_recursive>
 8014702:	bf00      	nop
 8014704:	200072c8 	.word	0x200072c8

08014708 <__sinit_lock_acquire>:
 8014708:	4801      	ldr	r0, [pc, #4]	; (8014710 <__sinit_lock_acquire+0x8>)
 801470a:	f000 b8b9 	b.w	8014880 <__retarget_lock_acquire_recursive>
 801470e:	bf00      	nop
 8014710:	200072c3 	.word	0x200072c3

08014714 <__sinit_lock_release>:
 8014714:	4801      	ldr	r0, [pc, #4]	; (801471c <__sinit_lock_release+0x8>)
 8014716:	f000 b8b4 	b.w	8014882 <__retarget_lock_release_recursive>
 801471a:	bf00      	nop
 801471c:	200072c3 	.word	0x200072c3

08014720 <__sinit>:
 8014720:	b510      	push	{r4, lr}
 8014722:	4604      	mov	r4, r0
 8014724:	f7ff fff0 	bl	8014708 <__sinit_lock_acquire>
 8014728:	69a3      	ldr	r3, [r4, #24]
 801472a:	b11b      	cbz	r3, 8014734 <__sinit+0x14>
 801472c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014730:	f7ff bff0 	b.w	8014714 <__sinit_lock_release>
 8014734:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8014738:	6523      	str	r3, [r4, #80]	; 0x50
 801473a:	4b13      	ldr	r3, [pc, #76]	; (8014788 <__sinit+0x68>)
 801473c:	4a13      	ldr	r2, [pc, #76]	; (801478c <__sinit+0x6c>)
 801473e:	681b      	ldr	r3, [r3, #0]
 8014740:	62a2      	str	r2, [r4, #40]	; 0x28
 8014742:	42a3      	cmp	r3, r4
 8014744:	bf04      	itt	eq
 8014746:	2301      	moveq	r3, #1
 8014748:	61a3      	streq	r3, [r4, #24]
 801474a:	4620      	mov	r0, r4
 801474c:	f000 f820 	bl	8014790 <__sfp>
 8014750:	6060      	str	r0, [r4, #4]
 8014752:	4620      	mov	r0, r4
 8014754:	f000 f81c 	bl	8014790 <__sfp>
 8014758:	60a0      	str	r0, [r4, #8]
 801475a:	4620      	mov	r0, r4
 801475c:	f000 f818 	bl	8014790 <__sfp>
 8014760:	2200      	movs	r2, #0
 8014762:	60e0      	str	r0, [r4, #12]
 8014764:	2104      	movs	r1, #4
 8014766:	6860      	ldr	r0, [r4, #4]
 8014768:	f7ff ff82 	bl	8014670 <std>
 801476c:	68a0      	ldr	r0, [r4, #8]
 801476e:	2201      	movs	r2, #1
 8014770:	2109      	movs	r1, #9
 8014772:	f7ff ff7d 	bl	8014670 <std>
 8014776:	68e0      	ldr	r0, [r4, #12]
 8014778:	2202      	movs	r2, #2
 801477a:	2112      	movs	r1, #18
 801477c:	f7ff ff78 	bl	8014670 <std>
 8014780:	2301      	movs	r3, #1
 8014782:	61a3      	str	r3, [r4, #24]
 8014784:	e7d2      	b.n	801472c <__sinit+0xc>
 8014786:	bf00      	nop
 8014788:	08018414 	.word	0x08018414
 801478c:	080146b9 	.word	0x080146b9

08014790 <__sfp>:
 8014790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014792:	4607      	mov	r7, r0
 8014794:	f7ff ffac 	bl	80146f0 <__sfp_lock_acquire>
 8014798:	4b1e      	ldr	r3, [pc, #120]	; (8014814 <__sfp+0x84>)
 801479a:	681e      	ldr	r6, [r3, #0]
 801479c:	69b3      	ldr	r3, [r6, #24]
 801479e:	b913      	cbnz	r3, 80147a6 <__sfp+0x16>
 80147a0:	4630      	mov	r0, r6
 80147a2:	f7ff ffbd 	bl	8014720 <__sinit>
 80147a6:	3648      	adds	r6, #72	; 0x48
 80147a8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80147ac:	3b01      	subs	r3, #1
 80147ae:	d503      	bpl.n	80147b8 <__sfp+0x28>
 80147b0:	6833      	ldr	r3, [r6, #0]
 80147b2:	b30b      	cbz	r3, 80147f8 <__sfp+0x68>
 80147b4:	6836      	ldr	r6, [r6, #0]
 80147b6:	e7f7      	b.n	80147a8 <__sfp+0x18>
 80147b8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80147bc:	b9d5      	cbnz	r5, 80147f4 <__sfp+0x64>
 80147be:	4b16      	ldr	r3, [pc, #88]	; (8014818 <__sfp+0x88>)
 80147c0:	60e3      	str	r3, [r4, #12]
 80147c2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80147c6:	6665      	str	r5, [r4, #100]	; 0x64
 80147c8:	f000 f859 	bl	801487e <__retarget_lock_init_recursive>
 80147cc:	f7ff ff96 	bl	80146fc <__sfp_lock_release>
 80147d0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80147d4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80147d8:	6025      	str	r5, [r4, #0]
 80147da:	61a5      	str	r5, [r4, #24]
 80147dc:	2208      	movs	r2, #8
 80147de:	4629      	mov	r1, r5
 80147e0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80147e4:	f7ff fea6 	bl	8014534 <memset>
 80147e8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80147ec:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80147f0:	4620      	mov	r0, r4
 80147f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80147f4:	3468      	adds	r4, #104	; 0x68
 80147f6:	e7d9      	b.n	80147ac <__sfp+0x1c>
 80147f8:	2104      	movs	r1, #4
 80147fa:	4638      	mov	r0, r7
 80147fc:	f7ff ff62 	bl	80146c4 <__sfmoreglue>
 8014800:	4604      	mov	r4, r0
 8014802:	6030      	str	r0, [r6, #0]
 8014804:	2800      	cmp	r0, #0
 8014806:	d1d5      	bne.n	80147b4 <__sfp+0x24>
 8014808:	f7ff ff78 	bl	80146fc <__sfp_lock_release>
 801480c:	230c      	movs	r3, #12
 801480e:	603b      	str	r3, [r7, #0]
 8014810:	e7ee      	b.n	80147f0 <__sfp+0x60>
 8014812:	bf00      	nop
 8014814:	08018414 	.word	0x08018414
 8014818:	ffff0001 	.word	0xffff0001

0801481c <fiprintf>:
 801481c:	b40e      	push	{r1, r2, r3}
 801481e:	b503      	push	{r0, r1, lr}
 8014820:	4601      	mov	r1, r0
 8014822:	ab03      	add	r3, sp, #12
 8014824:	4805      	ldr	r0, [pc, #20]	; (801483c <fiprintf+0x20>)
 8014826:	f853 2b04 	ldr.w	r2, [r3], #4
 801482a:	6800      	ldr	r0, [r0, #0]
 801482c:	9301      	str	r3, [sp, #4]
 801482e:	f000 fa61 	bl	8014cf4 <_vfiprintf_r>
 8014832:	b002      	add	sp, #8
 8014834:	f85d eb04 	ldr.w	lr, [sp], #4
 8014838:	b003      	add	sp, #12
 801483a:	4770      	bx	lr
 801483c:	20000014 	.word	0x20000014

08014840 <_fwalk_reent>:
 8014840:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014844:	4606      	mov	r6, r0
 8014846:	4688      	mov	r8, r1
 8014848:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801484c:	2700      	movs	r7, #0
 801484e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8014852:	f1b9 0901 	subs.w	r9, r9, #1
 8014856:	d505      	bpl.n	8014864 <_fwalk_reent+0x24>
 8014858:	6824      	ldr	r4, [r4, #0]
 801485a:	2c00      	cmp	r4, #0
 801485c:	d1f7      	bne.n	801484e <_fwalk_reent+0xe>
 801485e:	4638      	mov	r0, r7
 8014860:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014864:	89ab      	ldrh	r3, [r5, #12]
 8014866:	2b01      	cmp	r3, #1
 8014868:	d907      	bls.n	801487a <_fwalk_reent+0x3a>
 801486a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801486e:	3301      	adds	r3, #1
 8014870:	d003      	beq.n	801487a <_fwalk_reent+0x3a>
 8014872:	4629      	mov	r1, r5
 8014874:	4630      	mov	r0, r6
 8014876:	47c0      	blx	r8
 8014878:	4307      	orrs	r7, r0
 801487a:	3568      	adds	r5, #104	; 0x68
 801487c:	e7e9      	b.n	8014852 <_fwalk_reent+0x12>

0801487e <__retarget_lock_init_recursive>:
 801487e:	4770      	bx	lr

08014880 <__retarget_lock_acquire_recursive>:
 8014880:	4770      	bx	lr

08014882 <__retarget_lock_release_recursive>:
 8014882:	4770      	bx	lr

08014884 <malloc>:
 8014884:	4b02      	ldr	r3, [pc, #8]	; (8014890 <malloc+0xc>)
 8014886:	4601      	mov	r1, r0
 8014888:	6818      	ldr	r0, [r3, #0]
 801488a:	f000 b853 	b.w	8014934 <_malloc_r>
 801488e:	bf00      	nop
 8014890:	20000014 	.word	0x20000014

08014894 <_free_r>:
 8014894:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014896:	2900      	cmp	r1, #0
 8014898:	d048      	beq.n	801492c <_free_r+0x98>
 801489a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801489e:	9001      	str	r0, [sp, #4]
 80148a0:	2b00      	cmp	r3, #0
 80148a2:	f1a1 0404 	sub.w	r4, r1, #4
 80148a6:	bfb8      	it	lt
 80148a8:	18e4      	addlt	r4, r4, r3
 80148aa:	f000 ff5d 	bl	8015768 <__malloc_lock>
 80148ae:	4a20      	ldr	r2, [pc, #128]	; (8014930 <_free_r+0x9c>)
 80148b0:	9801      	ldr	r0, [sp, #4]
 80148b2:	6813      	ldr	r3, [r2, #0]
 80148b4:	4615      	mov	r5, r2
 80148b6:	b933      	cbnz	r3, 80148c6 <_free_r+0x32>
 80148b8:	6063      	str	r3, [r4, #4]
 80148ba:	6014      	str	r4, [r2, #0]
 80148bc:	b003      	add	sp, #12
 80148be:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80148c2:	f000 bf57 	b.w	8015774 <__malloc_unlock>
 80148c6:	42a3      	cmp	r3, r4
 80148c8:	d90b      	bls.n	80148e2 <_free_r+0x4e>
 80148ca:	6821      	ldr	r1, [r4, #0]
 80148cc:	1862      	adds	r2, r4, r1
 80148ce:	4293      	cmp	r3, r2
 80148d0:	bf04      	itt	eq
 80148d2:	681a      	ldreq	r2, [r3, #0]
 80148d4:	685b      	ldreq	r3, [r3, #4]
 80148d6:	6063      	str	r3, [r4, #4]
 80148d8:	bf04      	itt	eq
 80148da:	1852      	addeq	r2, r2, r1
 80148dc:	6022      	streq	r2, [r4, #0]
 80148de:	602c      	str	r4, [r5, #0]
 80148e0:	e7ec      	b.n	80148bc <_free_r+0x28>
 80148e2:	461a      	mov	r2, r3
 80148e4:	685b      	ldr	r3, [r3, #4]
 80148e6:	b10b      	cbz	r3, 80148ec <_free_r+0x58>
 80148e8:	42a3      	cmp	r3, r4
 80148ea:	d9fa      	bls.n	80148e2 <_free_r+0x4e>
 80148ec:	6811      	ldr	r1, [r2, #0]
 80148ee:	1855      	adds	r5, r2, r1
 80148f0:	42a5      	cmp	r5, r4
 80148f2:	d10b      	bne.n	801490c <_free_r+0x78>
 80148f4:	6824      	ldr	r4, [r4, #0]
 80148f6:	4421      	add	r1, r4
 80148f8:	1854      	adds	r4, r2, r1
 80148fa:	42a3      	cmp	r3, r4
 80148fc:	6011      	str	r1, [r2, #0]
 80148fe:	d1dd      	bne.n	80148bc <_free_r+0x28>
 8014900:	681c      	ldr	r4, [r3, #0]
 8014902:	685b      	ldr	r3, [r3, #4]
 8014904:	6053      	str	r3, [r2, #4]
 8014906:	4421      	add	r1, r4
 8014908:	6011      	str	r1, [r2, #0]
 801490a:	e7d7      	b.n	80148bc <_free_r+0x28>
 801490c:	d902      	bls.n	8014914 <_free_r+0x80>
 801490e:	230c      	movs	r3, #12
 8014910:	6003      	str	r3, [r0, #0]
 8014912:	e7d3      	b.n	80148bc <_free_r+0x28>
 8014914:	6825      	ldr	r5, [r4, #0]
 8014916:	1961      	adds	r1, r4, r5
 8014918:	428b      	cmp	r3, r1
 801491a:	bf04      	itt	eq
 801491c:	6819      	ldreq	r1, [r3, #0]
 801491e:	685b      	ldreq	r3, [r3, #4]
 8014920:	6063      	str	r3, [r4, #4]
 8014922:	bf04      	itt	eq
 8014924:	1949      	addeq	r1, r1, r5
 8014926:	6021      	streq	r1, [r4, #0]
 8014928:	6054      	str	r4, [r2, #4]
 801492a:	e7c7      	b.n	80148bc <_free_r+0x28>
 801492c:	b003      	add	sp, #12
 801492e:	bd30      	pop	{r4, r5, pc}
 8014930:	20000224 	.word	0x20000224

08014934 <_malloc_r>:
 8014934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014936:	1ccd      	adds	r5, r1, #3
 8014938:	f025 0503 	bic.w	r5, r5, #3
 801493c:	3508      	adds	r5, #8
 801493e:	2d0c      	cmp	r5, #12
 8014940:	bf38      	it	cc
 8014942:	250c      	movcc	r5, #12
 8014944:	2d00      	cmp	r5, #0
 8014946:	4606      	mov	r6, r0
 8014948:	db01      	blt.n	801494e <_malloc_r+0x1a>
 801494a:	42a9      	cmp	r1, r5
 801494c:	d903      	bls.n	8014956 <_malloc_r+0x22>
 801494e:	230c      	movs	r3, #12
 8014950:	6033      	str	r3, [r6, #0]
 8014952:	2000      	movs	r0, #0
 8014954:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014956:	f000 ff07 	bl	8015768 <__malloc_lock>
 801495a:	4921      	ldr	r1, [pc, #132]	; (80149e0 <_malloc_r+0xac>)
 801495c:	680a      	ldr	r2, [r1, #0]
 801495e:	4614      	mov	r4, r2
 8014960:	b99c      	cbnz	r4, 801498a <_malloc_r+0x56>
 8014962:	4f20      	ldr	r7, [pc, #128]	; (80149e4 <_malloc_r+0xb0>)
 8014964:	683b      	ldr	r3, [r7, #0]
 8014966:	b923      	cbnz	r3, 8014972 <_malloc_r+0x3e>
 8014968:	4621      	mov	r1, r4
 801496a:	4630      	mov	r0, r6
 801496c:	f000 fc86 	bl	801527c <_sbrk_r>
 8014970:	6038      	str	r0, [r7, #0]
 8014972:	4629      	mov	r1, r5
 8014974:	4630      	mov	r0, r6
 8014976:	f000 fc81 	bl	801527c <_sbrk_r>
 801497a:	1c43      	adds	r3, r0, #1
 801497c:	d123      	bne.n	80149c6 <_malloc_r+0x92>
 801497e:	230c      	movs	r3, #12
 8014980:	6033      	str	r3, [r6, #0]
 8014982:	4630      	mov	r0, r6
 8014984:	f000 fef6 	bl	8015774 <__malloc_unlock>
 8014988:	e7e3      	b.n	8014952 <_malloc_r+0x1e>
 801498a:	6823      	ldr	r3, [r4, #0]
 801498c:	1b5b      	subs	r3, r3, r5
 801498e:	d417      	bmi.n	80149c0 <_malloc_r+0x8c>
 8014990:	2b0b      	cmp	r3, #11
 8014992:	d903      	bls.n	801499c <_malloc_r+0x68>
 8014994:	6023      	str	r3, [r4, #0]
 8014996:	441c      	add	r4, r3
 8014998:	6025      	str	r5, [r4, #0]
 801499a:	e004      	b.n	80149a6 <_malloc_r+0x72>
 801499c:	6863      	ldr	r3, [r4, #4]
 801499e:	42a2      	cmp	r2, r4
 80149a0:	bf0c      	ite	eq
 80149a2:	600b      	streq	r3, [r1, #0]
 80149a4:	6053      	strne	r3, [r2, #4]
 80149a6:	4630      	mov	r0, r6
 80149a8:	f000 fee4 	bl	8015774 <__malloc_unlock>
 80149ac:	f104 000b 	add.w	r0, r4, #11
 80149b0:	1d23      	adds	r3, r4, #4
 80149b2:	f020 0007 	bic.w	r0, r0, #7
 80149b6:	1ac2      	subs	r2, r0, r3
 80149b8:	d0cc      	beq.n	8014954 <_malloc_r+0x20>
 80149ba:	1a1b      	subs	r3, r3, r0
 80149bc:	50a3      	str	r3, [r4, r2]
 80149be:	e7c9      	b.n	8014954 <_malloc_r+0x20>
 80149c0:	4622      	mov	r2, r4
 80149c2:	6864      	ldr	r4, [r4, #4]
 80149c4:	e7cc      	b.n	8014960 <_malloc_r+0x2c>
 80149c6:	1cc4      	adds	r4, r0, #3
 80149c8:	f024 0403 	bic.w	r4, r4, #3
 80149cc:	42a0      	cmp	r0, r4
 80149ce:	d0e3      	beq.n	8014998 <_malloc_r+0x64>
 80149d0:	1a21      	subs	r1, r4, r0
 80149d2:	4630      	mov	r0, r6
 80149d4:	f000 fc52 	bl	801527c <_sbrk_r>
 80149d8:	3001      	adds	r0, #1
 80149da:	d1dd      	bne.n	8014998 <_malloc_r+0x64>
 80149dc:	e7cf      	b.n	801497e <_malloc_r+0x4a>
 80149de:	bf00      	nop
 80149e0:	20000224 	.word	0x20000224
 80149e4:	20000228 	.word	0x20000228

080149e8 <__ssputs_r>:
 80149e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80149ec:	688e      	ldr	r6, [r1, #8]
 80149ee:	429e      	cmp	r6, r3
 80149f0:	4682      	mov	sl, r0
 80149f2:	460c      	mov	r4, r1
 80149f4:	4690      	mov	r8, r2
 80149f6:	461f      	mov	r7, r3
 80149f8:	d838      	bhi.n	8014a6c <__ssputs_r+0x84>
 80149fa:	898a      	ldrh	r2, [r1, #12]
 80149fc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8014a00:	d032      	beq.n	8014a68 <__ssputs_r+0x80>
 8014a02:	6825      	ldr	r5, [r4, #0]
 8014a04:	6909      	ldr	r1, [r1, #16]
 8014a06:	eba5 0901 	sub.w	r9, r5, r1
 8014a0a:	6965      	ldr	r5, [r4, #20]
 8014a0c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014a10:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8014a14:	3301      	adds	r3, #1
 8014a16:	444b      	add	r3, r9
 8014a18:	106d      	asrs	r5, r5, #1
 8014a1a:	429d      	cmp	r5, r3
 8014a1c:	bf38      	it	cc
 8014a1e:	461d      	movcc	r5, r3
 8014a20:	0553      	lsls	r3, r2, #21
 8014a22:	d531      	bpl.n	8014a88 <__ssputs_r+0xa0>
 8014a24:	4629      	mov	r1, r5
 8014a26:	f7ff ff85 	bl	8014934 <_malloc_r>
 8014a2a:	4606      	mov	r6, r0
 8014a2c:	b950      	cbnz	r0, 8014a44 <__ssputs_r+0x5c>
 8014a2e:	230c      	movs	r3, #12
 8014a30:	f8ca 3000 	str.w	r3, [sl]
 8014a34:	89a3      	ldrh	r3, [r4, #12]
 8014a36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014a3a:	81a3      	strh	r3, [r4, #12]
 8014a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8014a40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014a44:	6921      	ldr	r1, [r4, #16]
 8014a46:	464a      	mov	r2, r9
 8014a48:	f7ff fd4c 	bl	80144e4 <memcpy>
 8014a4c:	89a3      	ldrh	r3, [r4, #12]
 8014a4e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8014a52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014a56:	81a3      	strh	r3, [r4, #12]
 8014a58:	6126      	str	r6, [r4, #16]
 8014a5a:	6165      	str	r5, [r4, #20]
 8014a5c:	444e      	add	r6, r9
 8014a5e:	eba5 0509 	sub.w	r5, r5, r9
 8014a62:	6026      	str	r6, [r4, #0]
 8014a64:	60a5      	str	r5, [r4, #8]
 8014a66:	463e      	mov	r6, r7
 8014a68:	42be      	cmp	r6, r7
 8014a6a:	d900      	bls.n	8014a6e <__ssputs_r+0x86>
 8014a6c:	463e      	mov	r6, r7
 8014a6e:	4632      	mov	r2, r6
 8014a70:	6820      	ldr	r0, [r4, #0]
 8014a72:	4641      	mov	r1, r8
 8014a74:	f7ff fd44 	bl	8014500 <memmove>
 8014a78:	68a3      	ldr	r3, [r4, #8]
 8014a7a:	6822      	ldr	r2, [r4, #0]
 8014a7c:	1b9b      	subs	r3, r3, r6
 8014a7e:	4432      	add	r2, r6
 8014a80:	60a3      	str	r3, [r4, #8]
 8014a82:	6022      	str	r2, [r4, #0]
 8014a84:	2000      	movs	r0, #0
 8014a86:	e7db      	b.n	8014a40 <__ssputs_r+0x58>
 8014a88:	462a      	mov	r2, r5
 8014a8a:	f000 fe79 	bl	8015780 <_realloc_r>
 8014a8e:	4606      	mov	r6, r0
 8014a90:	2800      	cmp	r0, #0
 8014a92:	d1e1      	bne.n	8014a58 <__ssputs_r+0x70>
 8014a94:	6921      	ldr	r1, [r4, #16]
 8014a96:	4650      	mov	r0, sl
 8014a98:	f7ff fefc 	bl	8014894 <_free_r>
 8014a9c:	e7c7      	b.n	8014a2e <__ssputs_r+0x46>
	...

08014aa0 <_svfiprintf_r>:
 8014aa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014aa4:	4698      	mov	r8, r3
 8014aa6:	898b      	ldrh	r3, [r1, #12]
 8014aa8:	061b      	lsls	r3, r3, #24
 8014aaa:	b09d      	sub	sp, #116	; 0x74
 8014aac:	4607      	mov	r7, r0
 8014aae:	460d      	mov	r5, r1
 8014ab0:	4614      	mov	r4, r2
 8014ab2:	d50e      	bpl.n	8014ad2 <_svfiprintf_r+0x32>
 8014ab4:	690b      	ldr	r3, [r1, #16]
 8014ab6:	b963      	cbnz	r3, 8014ad2 <_svfiprintf_r+0x32>
 8014ab8:	2140      	movs	r1, #64	; 0x40
 8014aba:	f7ff ff3b 	bl	8014934 <_malloc_r>
 8014abe:	6028      	str	r0, [r5, #0]
 8014ac0:	6128      	str	r0, [r5, #16]
 8014ac2:	b920      	cbnz	r0, 8014ace <_svfiprintf_r+0x2e>
 8014ac4:	230c      	movs	r3, #12
 8014ac6:	603b      	str	r3, [r7, #0]
 8014ac8:	f04f 30ff 	mov.w	r0, #4294967295
 8014acc:	e0d1      	b.n	8014c72 <_svfiprintf_r+0x1d2>
 8014ace:	2340      	movs	r3, #64	; 0x40
 8014ad0:	616b      	str	r3, [r5, #20]
 8014ad2:	2300      	movs	r3, #0
 8014ad4:	9309      	str	r3, [sp, #36]	; 0x24
 8014ad6:	2320      	movs	r3, #32
 8014ad8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014adc:	f8cd 800c 	str.w	r8, [sp, #12]
 8014ae0:	2330      	movs	r3, #48	; 0x30
 8014ae2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8014c8c <_svfiprintf_r+0x1ec>
 8014ae6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014aea:	f04f 0901 	mov.w	r9, #1
 8014aee:	4623      	mov	r3, r4
 8014af0:	469a      	mov	sl, r3
 8014af2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014af6:	b10a      	cbz	r2, 8014afc <_svfiprintf_r+0x5c>
 8014af8:	2a25      	cmp	r2, #37	; 0x25
 8014afa:	d1f9      	bne.n	8014af0 <_svfiprintf_r+0x50>
 8014afc:	ebba 0b04 	subs.w	fp, sl, r4
 8014b00:	d00b      	beq.n	8014b1a <_svfiprintf_r+0x7a>
 8014b02:	465b      	mov	r3, fp
 8014b04:	4622      	mov	r2, r4
 8014b06:	4629      	mov	r1, r5
 8014b08:	4638      	mov	r0, r7
 8014b0a:	f7ff ff6d 	bl	80149e8 <__ssputs_r>
 8014b0e:	3001      	adds	r0, #1
 8014b10:	f000 80aa 	beq.w	8014c68 <_svfiprintf_r+0x1c8>
 8014b14:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014b16:	445a      	add	r2, fp
 8014b18:	9209      	str	r2, [sp, #36]	; 0x24
 8014b1a:	f89a 3000 	ldrb.w	r3, [sl]
 8014b1e:	2b00      	cmp	r3, #0
 8014b20:	f000 80a2 	beq.w	8014c68 <_svfiprintf_r+0x1c8>
 8014b24:	2300      	movs	r3, #0
 8014b26:	f04f 32ff 	mov.w	r2, #4294967295
 8014b2a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014b2e:	f10a 0a01 	add.w	sl, sl, #1
 8014b32:	9304      	str	r3, [sp, #16]
 8014b34:	9307      	str	r3, [sp, #28]
 8014b36:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014b3a:	931a      	str	r3, [sp, #104]	; 0x68
 8014b3c:	4654      	mov	r4, sl
 8014b3e:	2205      	movs	r2, #5
 8014b40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014b44:	4851      	ldr	r0, [pc, #324]	; (8014c8c <_svfiprintf_r+0x1ec>)
 8014b46:	f7eb fb53 	bl	80001f0 <memchr>
 8014b4a:	9a04      	ldr	r2, [sp, #16]
 8014b4c:	b9d8      	cbnz	r0, 8014b86 <_svfiprintf_r+0xe6>
 8014b4e:	06d0      	lsls	r0, r2, #27
 8014b50:	bf44      	itt	mi
 8014b52:	2320      	movmi	r3, #32
 8014b54:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014b58:	0711      	lsls	r1, r2, #28
 8014b5a:	bf44      	itt	mi
 8014b5c:	232b      	movmi	r3, #43	; 0x2b
 8014b5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014b62:	f89a 3000 	ldrb.w	r3, [sl]
 8014b66:	2b2a      	cmp	r3, #42	; 0x2a
 8014b68:	d015      	beq.n	8014b96 <_svfiprintf_r+0xf6>
 8014b6a:	9a07      	ldr	r2, [sp, #28]
 8014b6c:	4654      	mov	r4, sl
 8014b6e:	2000      	movs	r0, #0
 8014b70:	f04f 0c0a 	mov.w	ip, #10
 8014b74:	4621      	mov	r1, r4
 8014b76:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014b7a:	3b30      	subs	r3, #48	; 0x30
 8014b7c:	2b09      	cmp	r3, #9
 8014b7e:	d94e      	bls.n	8014c1e <_svfiprintf_r+0x17e>
 8014b80:	b1b0      	cbz	r0, 8014bb0 <_svfiprintf_r+0x110>
 8014b82:	9207      	str	r2, [sp, #28]
 8014b84:	e014      	b.n	8014bb0 <_svfiprintf_r+0x110>
 8014b86:	eba0 0308 	sub.w	r3, r0, r8
 8014b8a:	fa09 f303 	lsl.w	r3, r9, r3
 8014b8e:	4313      	orrs	r3, r2
 8014b90:	9304      	str	r3, [sp, #16]
 8014b92:	46a2      	mov	sl, r4
 8014b94:	e7d2      	b.n	8014b3c <_svfiprintf_r+0x9c>
 8014b96:	9b03      	ldr	r3, [sp, #12]
 8014b98:	1d19      	adds	r1, r3, #4
 8014b9a:	681b      	ldr	r3, [r3, #0]
 8014b9c:	9103      	str	r1, [sp, #12]
 8014b9e:	2b00      	cmp	r3, #0
 8014ba0:	bfbb      	ittet	lt
 8014ba2:	425b      	neglt	r3, r3
 8014ba4:	f042 0202 	orrlt.w	r2, r2, #2
 8014ba8:	9307      	strge	r3, [sp, #28]
 8014baa:	9307      	strlt	r3, [sp, #28]
 8014bac:	bfb8      	it	lt
 8014bae:	9204      	strlt	r2, [sp, #16]
 8014bb0:	7823      	ldrb	r3, [r4, #0]
 8014bb2:	2b2e      	cmp	r3, #46	; 0x2e
 8014bb4:	d10c      	bne.n	8014bd0 <_svfiprintf_r+0x130>
 8014bb6:	7863      	ldrb	r3, [r4, #1]
 8014bb8:	2b2a      	cmp	r3, #42	; 0x2a
 8014bba:	d135      	bne.n	8014c28 <_svfiprintf_r+0x188>
 8014bbc:	9b03      	ldr	r3, [sp, #12]
 8014bbe:	1d1a      	adds	r2, r3, #4
 8014bc0:	681b      	ldr	r3, [r3, #0]
 8014bc2:	9203      	str	r2, [sp, #12]
 8014bc4:	2b00      	cmp	r3, #0
 8014bc6:	bfb8      	it	lt
 8014bc8:	f04f 33ff 	movlt.w	r3, #4294967295
 8014bcc:	3402      	adds	r4, #2
 8014bce:	9305      	str	r3, [sp, #20]
 8014bd0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8014c9c <_svfiprintf_r+0x1fc>
 8014bd4:	7821      	ldrb	r1, [r4, #0]
 8014bd6:	2203      	movs	r2, #3
 8014bd8:	4650      	mov	r0, sl
 8014bda:	f7eb fb09 	bl	80001f0 <memchr>
 8014bde:	b140      	cbz	r0, 8014bf2 <_svfiprintf_r+0x152>
 8014be0:	2340      	movs	r3, #64	; 0x40
 8014be2:	eba0 000a 	sub.w	r0, r0, sl
 8014be6:	fa03 f000 	lsl.w	r0, r3, r0
 8014bea:	9b04      	ldr	r3, [sp, #16]
 8014bec:	4303      	orrs	r3, r0
 8014bee:	3401      	adds	r4, #1
 8014bf0:	9304      	str	r3, [sp, #16]
 8014bf2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014bf6:	4826      	ldr	r0, [pc, #152]	; (8014c90 <_svfiprintf_r+0x1f0>)
 8014bf8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014bfc:	2206      	movs	r2, #6
 8014bfe:	f7eb faf7 	bl	80001f0 <memchr>
 8014c02:	2800      	cmp	r0, #0
 8014c04:	d038      	beq.n	8014c78 <_svfiprintf_r+0x1d8>
 8014c06:	4b23      	ldr	r3, [pc, #140]	; (8014c94 <_svfiprintf_r+0x1f4>)
 8014c08:	bb1b      	cbnz	r3, 8014c52 <_svfiprintf_r+0x1b2>
 8014c0a:	9b03      	ldr	r3, [sp, #12]
 8014c0c:	3307      	adds	r3, #7
 8014c0e:	f023 0307 	bic.w	r3, r3, #7
 8014c12:	3308      	adds	r3, #8
 8014c14:	9303      	str	r3, [sp, #12]
 8014c16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014c18:	4433      	add	r3, r6
 8014c1a:	9309      	str	r3, [sp, #36]	; 0x24
 8014c1c:	e767      	b.n	8014aee <_svfiprintf_r+0x4e>
 8014c1e:	fb0c 3202 	mla	r2, ip, r2, r3
 8014c22:	460c      	mov	r4, r1
 8014c24:	2001      	movs	r0, #1
 8014c26:	e7a5      	b.n	8014b74 <_svfiprintf_r+0xd4>
 8014c28:	2300      	movs	r3, #0
 8014c2a:	3401      	adds	r4, #1
 8014c2c:	9305      	str	r3, [sp, #20]
 8014c2e:	4619      	mov	r1, r3
 8014c30:	f04f 0c0a 	mov.w	ip, #10
 8014c34:	4620      	mov	r0, r4
 8014c36:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014c3a:	3a30      	subs	r2, #48	; 0x30
 8014c3c:	2a09      	cmp	r2, #9
 8014c3e:	d903      	bls.n	8014c48 <_svfiprintf_r+0x1a8>
 8014c40:	2b00      	cmp	r3, #0
 8014c42:	d0c5      	beq.n	8014bd0 <_svfiprintf_r+0x130>
 8014c44:	9105      	str	r1, [sp, #20]
 8014c46:	e7c3      	b.n	8014bd0 <_svfiprintf_r+0x130>
 8014c48:	fb0c 2101 	mla	r1, ip, r1, r2
 8014c4c:	4604      	mov	r4, r0
 8014c4e:	2301      	movs	r3, #1
 8014c50:	e7f0      	b.n	8014c34 <_svfiprintf_r+0x194>
 8014c52:	ab03      	add	r3, sp, #12
 8014c54:	9300      	str	r3, [sp, #0]
 8014c56:	462a      	mov	r2, r5
 8014c58:	4b0f      	ldr	r3, [pc, #60]	; (8014c98 <_svfiprintf_r+0x1f8>)
 8014c5a:	a904      	add	r1, sp, #16
 8014c5c:	4638      	mov	r0, r7
 8014c5e:	f3af 8000 	nop.w
 8014c62:	1c42      	adds	r2, r0, #1
 8014c64:	4606      	mov	r6, r0
 8014c66:	d1d6      	bne.n	8014c16 <_svfiprintf_r+0x176>
 8014c68:	89ab      	ldrh	r3, [r5, #12]
 8014c6a:	065b      	lsls	r3, r3, #25
 8014c6c:	f53f af2c 	bmi.w	8014ac8 <_svfiprintf_r+0x28>
 8014c70:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014c72:	b01d      	add	sp, #116	; 0x74
 8014c74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014c78:	ab03      	add	r3, sp, #12
 8014c7a:	9300      	str	r3, [sp, #0]
 8014c7c:	462a      	mov	r2, r5
 8014c7e:	4b06      	ldr	r3, [pc, #24]	; (8014c98 <_svfiprintf_r+0x1f8>)
 8014c80:	a904      	add	r1, sp, #16
 8014c82:	4638      	mov	r0, r7
 8014c84:	f000 f9d4 	bl	8015030 <_printf_i>
 8014c88:	e7eb      	b.n	8014c62 <_svfiprintf_r+0x1c2>
 8014c8a:	bf00      	nop
 8014c8c:	0801852c 	.word	0x0801852c
 8014c90:	08018536 	.word	0x08018536
 8014c94:	00000000 	.word	0x00000000
 8014c98:	080149e9 	.word	0x080149e9
 8014c9c:	08018532 	.word	0x08018532

08014ca0 <__sfputc_r>:
 8014ca0:	6893      	ldr	r3, [r2, #8]
 8014ca2:	3b01      	subs	r3, #1
 8014ca4:	2b00      	cmp	r3, #0
 8014ca6:	b410      	push	{r4}
 8014ca8:	6093      	str	r3, [r2, #8]
 8014caa:	da08      	bge.n	8014cbe <__sfputc_r+0x1e>
 8014cac:	6994      	ldr	r4, [r2, #24]
 8014cae:	42a3      	cmp	r3, r4
 8014cb0:	db01      	blt.n	8014cb6 <__sfputc_r+0x16>
 8014cb2:	290a      	cmp	r1, #10
 8014cb4:	d103      	bne.n	8014cbe <__sfputc_r+0x1e>
 8014cb6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014cba:	f000 bb33 	b.w	8015324 <__swbuf_r>
 8014cbe:	6813      	ldr	r3, [r2, #0]
 8014cc0:	1c58      	adds	r0, r3, #1
 8014cc2:	6010      	str	r0, [r2, #0]
 8014cc4:	7019      	strb	r1, [r3, #0]
 8014cc6:	4608      	mov	r0, r1
 8014cc8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014ccc:	4770      	bx	lr

08014cce <__sfputs_r>:
 8014cce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014cd0:	4606      	mov	r6, r0
 8014cd2:	460f      	mov	r7, r1
 8014cd4:	4614      	mov	r4, r2
 8014cd6:	18d5      	adds	r5, r2, r3
 8014cd8:	42ac      	cmp	r4, r5
 8014cda:	d101      	bne.n	8014ce0 <__sfputs_r+0x12>
 8014cdc:	2000      	movs	r0, #0
 8014cde:	e007      	b.n	8014cf0 <__sfputs_r+0x22>
 8014ce0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014ce4:	463a      	mov	r2, r7
 8014ce6:	4630      	mov	r0, r6
 8014ce8:	f7ff ffda 	bl	8014ca0 <__sfputc_r>
 8014cec:	1c43      	adds	r3, r0, #1
 8014cee:	d1f3      	bne.n	8014cd8 <__sfputs_r+0xa>
 8014cf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014cf4 <_vfiprintf_r>:
 8014cf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014cf8:	460d      	mov	r5, r1
 8014cfa:	b09d      	sub	sp, #116	; 0x74
 8014cfc:	4614      	mov	r4, r2
 8014cfe:	4698      	mov	r8, r3
 8014d00:	4606      	mov	r6, r0
 8014d02:	b118      	cbz	r0, 8014d0c <_vfiprintf_r+0x18>
 8014d04:	6983      	ldr	r3, [r0, #24]
 8014d06:	b90b      	cbnz	r3, 8014d0c <_vfiprintf_r+0x18>
 8014d08:	f7ff fd0a 	bl	8014720 <__sinit>
 8014d0c:	4b89      	ldr	r3, [pc, #548]	; (8014f34 <_vfiprintf_r+0x240>)
 8014d0e:	429d      	cmp	r5, r3
 8014d10:	d11b      	bne.n	8014d4a <_vfiprintf_r+0x56>
 8014d12:	6875      	ldr	r5, [r6, #4]
 8014d14:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014d16:	07d9      	lsls	r1, r3, #31
 8014d18:	d405      	bmi.n	8014d26 <_vfiprintf_r+0x32>
 8014d1a:	89ab      	ldrh	r3, [r5, #12]
 8014d1c:	059a      	lsls	r2, r3, #22
 8014d1e:	d402      	bmi.n	8014d26 <_vfiprintf_r+0x32>
 8014d20:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014d22:	f7ff fdad 	bl	8014880 <__retarget_lock_acquire_recursive>
 8014d26:	89ab      	ldrh	r3, [r5, #12]
 8014d28:	071b      	lsls	r3, r3, #28
 8014d2a:	d501      	bpl.n	8014d30 <_vfiprintf_r+0x3c>
 8014d2c:	692b      	ldr	r3, [r5, #16]
 8014d2e:	b9eb      	cbnz	r3, 8014d6c <_vfiprintf_r+0x78>
 8014d30:	4629      	mov	r1, r5
 8014d32:	4630      	mov	r0, r6
 8014d34:	f000 fb5a 	bl	80153ec <__swsetup_r>
 8014d38:	b1c0      	cbz	r0, 8014d6c <_vfiprintf_r+0x78>
 8014d3a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014d3c:	07dc      	lsls	r4, r3, #31
 8014d3e:	d50e      	bpl.n	8014d5e <_vfiprintf_r+0x6a>
 8014d40:	f04f 30ff 	mov.w	r0, #4294967295
 8014d44:	b01d      	add	sp, #116	; 0x74
 8014d46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014d4a:	4b7b      	ldr	r3, [pc, #492]	; (8014f38 <_vfiprintf_r+0x244>)
 8014d4c:	429d      	cmp	r5, r3
 8014d4e:	d101      	bne.n	8014d54 <_vfiprintf_r+0x60>
 8014d50:	68b5      	ldr	r5, [r6, #8]
 8014d52:	e7df      	b.n	8014d14 <_vfiprintf_r+0x20>
 8014d54:	4b79      	ldr	r3, [pc, #484]	; (8014f3c <_vfiprintf_r+0x248>)
 8014d56:	429d      	cmp	r5, r3
 8014d58:	bf08      	it	eq
 8014d5a:	68f5      	ldreq	r5, [r6, #12]
 8014d5c:	e7da      	b.n	8014d14 <_vfiprintf_r+0x20>
 8014d5e:	89ab      	ldrh	r3, [r5, #12]
 8014d60:	0598      	lsls	r0, r3, #22
 8014d62:	d4ed      	bmi.n	8014d40 <_vfiprintf_r+0x4c>
 8014d64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014d66:	f7ff fd8c 	bl	8014882 <__retarget_lock_release_recursive>
 8014d6a:	e7e9      	b.n	8014d40 <_vfiprintf_r+0x4c>
 8014d6c:	2300      	movs	r3, #0
 8014d6e:	9309      	str	r3, [sp, #36]	; 0x24
 8014d70:	2320      	movs	r3, #32
 8014d72:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014d76:	f8cd 800c 	str.w	r8, [sp, #12]
 8014d7a:	2330      	movs	r3, #48	; 0x30
 8014d7c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8014f40 <_vfiprintf_r+0x24c>
 8014d80:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014d84:	f04f 0901 	mov.w	r9, #1
 8014d88:	4623      	mov	r3, r4
 8014d8a:	469a      	mov	sl, r3
 8014d8c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014d90:	b10a      	cbz	r2, 8014d96 <_vfiprintf_r+0xa2>
 8014d92:	2a25      	cmp	r2, #37	; 0x25
 8014d94:	d1f9      	bne.n	8014d8a <_vfiprintf_r+0x96>
 8014d96:	ebba 0b04 	subs.w	fp, sl, r4
 8014d9a:	d00b      	beq.n	8014db4 <_vfiprintf_r+0xc0>
 8014d9c:	465b      	mov	r3, fp
 8014d9e:	4622      	mov	r2, r4
 8014da0:	4629      	mov	r1, r5
 8014da2:	4630      	mov	r0, r6
 8014da4:	f7ff ff93 	bl	8014cce <__sfputs_r>
 8014da8:	3001      	adds	r0, #1
 8014daa:	f000 80aa 	beq.w	8014f02 <_vfiprintf_r+0x20e>
 8014dae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014db0:	445a      	add	r2, fp
 8014db2:	9209      	str	r2, [sp, #36]	; 0x24
 8014db4:	f89a 3000 	ldrb.w	r3, [sl]
 8014db8:	2b00      	cmp	r3, #0
 8014dba:	f000 80a2 	beq.w	8014f02 <_vfiprintf_r+0x20e>
 8014dbe:	2300      	movs	r3, #0
 8014dc0:	f04f 32ff 	mov.w	r2, #4294967295
 8014dc4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014dc8:	f10a 0a01 	add.w	sl, sl, #1
 8014dcc:	9304      	str	r3, [sp, #16]
 8014dce:	9307      	str	r3, [sp, #28]
 8014dd0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014dd4:	931a      	str	r3, [sp, #104]	; 0x68
 8014dd6:	4654      	mov	r4, sl
 8014dd8:	2205      	movs	r2, #5
 8014dda:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014dde:	4858      	ldr	r0, [pc, #352]	; (8014f40 <_vfiprintf_r+0x24c>)
 8014de0:	f7eb fa06 	bl	80001f0 <memchr>
 8014de4:	9a04      	ldr	r2, [sp, #16]
 8014de6:	b9d8      	cbnz	r0, 8014e20 <_vfiprintf_r+0x12c>
 8014de8:	06d1      	lsls	r1, r2, #27
 8014dea:	bf44      	itt	mi
 8014dec:	2320      	movmi	r3, #32
 8014dee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014df2:	0713      	lsls	r3, r2, #28
 8014df4:	bf44      	itt	mi
 8014df6:	232b      	movmi	r3, #43	; 0x2b
 8014df8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014dfc:	f89a 3000 	ldrb.w	r3, [sl]
 8014e00:	2b2a      	cmp	r3, #42	; 0x2a
 8014e02:	d015      	beq.n	8014e30 <_vfiprintf_r+0x13c>
 8014e04:	9a07      	ldr	r2, [sp, #28]
 8014e06:	4654      	mov	r4, sl
 8014e08:	2000      	movs	r0, #0
 8014e0a:	f04f 0c0a 	mov.w	ip, #10
 8014e0e:	4621      	mov	r1, r4
 8014e10:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014e14:	3b30      	subs	r3, #48	; 0x30
 8014e16:	2b09      	cmp	r3, #9
 8014e18:	d94e      	bls.n	8014eb8 <_vfiprintf_r+0x1c4>
 8014e1a:	b1b0      	cbz	r0, 8014e4a <_vfiprintf_r+0x156>
 8014e1c:	9207      	str	r2, [sp, #28]
 8014e1e:	e014      	b.n	8014e4a <_vfiprintf_r+0x156>
 8014e20:	eba0 0308 	sub.w	r3, r0, r8
 8014e24:	fa09 f303 	lsl.w	r3, r9, r3
 8014e28:	4313      	orrs	r3, r2
 8014e2a:	9304      	str	r3, [sp, #16]
 8014e2c:	46a2      	mov	sl, r4
 8014e2e:	e7d2      	b.n	8014dd6 <_vfiprintf_r+0xe2>
 8014e30:	9b03      	ldr	r3, [sp, #12]
 8014e32:	1d19      	adds	r1, r3, #4
 8014e34:	681b      	ldr	r3, [r3, #0]
 8014e36:	9103      	str	r1, [sp, #12]
 8014e38:	2b00      	cmp	r3, #0
 8014e3a:	bfbb      	ittet	lt
 8014e3c:	425b      	neglt	r3, r3
 8014e3e:	f042 0202 	orrlt.w	r2, r2, #2
 8014e42:	9307      	strge	r3, [sp, #28]
 8014e44:	9307      	strlt	r3, [sp, #28]
 8014e46:	bfb8      	it	lt
 8014e48:	9204      	strlt	r2, [sp, #16]
 8014e4a:	7823      	ldrb	r3, [r4, #0]
 8014e4c:	2b2e      	cmp	r3, #46	; 0x2e
 8014e4e:	d10c      	bne.n	8014e6a <_vfiprintf_r+0x176>
 8014e50:	7863      	ldrb	r3, [r4, #1]
 8014e52:	2b2a      	cmp	r3, #42	; 0x2a
 8014e54:	d135      	bne.n	8014ec2 <_vfiprintf_r+0x1ce>
 8014e56:	9b03      	ldr	r3, [sp, #12]
 8014e58:	1d1a      	adds	r2, r3, #4
 8014e5a:	681b      	ldr	r3, [r3, #0]
 8014e5c:	9203      	str	r2, [sp, #12]
 8014e5e:	2b00      	cmp	r3, #0
 8014e60:	bfb8      	it	lt
 8014e62:	f04f 33ff 	movlt.w	r3, #4294967295
 8014e66:	3402      	adds	r4, #2
 8014e68:	9305      	str	r3, [sp, #20]
 8014e6a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8014f50 <_vfiprintf_r+0x25c>
 8014e6e:	7821      	ldrb	r1, [r4, #0]
 8014e70:	2203      	movs	r2, #3
 8014e72:	4650      	mov	r0, sl
 8014e74:	f7eb f9bc 	bl	80001f0 <memchr>
 8014e78:	b140      	cbz	r0, 8014e8c <_vfiprintf_r+0x198>
 8014e7a:	2340      	movs	r3, #64	; 0x40
 8014e7c:	eba0 000a 	sub.w	r0, r0, sl
 8014e80:	fa03 f000 	lsl.w	r0, r3, r0
 8014e84:	9b04      	ldr	r3, [sp, #16]
 8014e86:	4303      	orrs	r3, r0
 8014e88:	3401      	adds	r4, #1
 8014e8a:	9304      	str	r3, [sp, #16]
 8014e8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014e90:	482c      	ldr	r0, [pc, #176]	; (8014f44 <_vfiprintf_r+0x250>)
 8014e92:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014e96:	2206      	movs	r2, #6
 8014e98:	f7eb f9aa 	bl	80001f0 <memchr>
 8014e9c:	2800      	cmp	r0, #0
 8014e9e:	d03f      	beq.n	8014f20 <_vfiprintf_r+0x22c>
 8014ea0:	4b29      	ldr	r3, [pc, #164]	; (8014f48 <_vfiprintf_r+0x254>)
 8014ea2:	bb1b      	cbnz	r3, 8014eec <_vfiprintf_r+0x1f8>
 8014ea4:	9b03      	ldr	r3, [sp, #12]
 8014ea6:	3307      	adds	r3, #7
 8014ea8:	f023 0307 	bic.w	r3, r3, #7
 8014eac:	3308      	adds	r3, #8
 8014eae:	9303      	str	r3, [sp, #12]
 8014eb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014eb2:	443b      	add	r3, r7
 8014eb4:	9309      	str	r3, [sp, #36]	; 0x24
 8014eb6:	e767      	b.n	8014d88 <_vfiprintf_r+0x94>
 8014eb8:	fb0c 3202 	mla	r2, ip, r2, r3
 8014ebc:	460c      	mov	r4, r1
 8014ebe:	2001      	movs	r0, #1
 8014ec0:	e7a5      	b.n	8014e0e <_vfiprintf_r+0x11a>
 8014ec2:	2300      	movs	r3, #0
 8014ec4:	3401      	adds	r4, #1
 8014ec6:	9305      	str	r3, [sp, #20]
 8014ec8:	4619      	mov	r1, r3
 8014eca:	f04f 0c0a 	mov.w	ip, #10
 8014ece:	4620      	mov	r0, r4
 8014ed0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014ed4:	3a30      	subs	r2, #48	; 0x30
 8014ed6:	2a09      	cmp	r2, #9
 8014ed8:	d903      	bls.n	8014ee2 <_vfiprintf_r+0x1ee>
 8014eda:	2b00      	cmp	r3, #0
 8014edc:	d0c5      	beq.n	8014e6a <_vfiprintf_r+0x176>
 8014ede:	9105      	str	r1, [sp, #20]
 8014ee0:	e7c3      	b.n	8014e6a <_vfiprintf_r+0x176>
 8014ee2:	fb0c 2101 	mla	r1, ip, r1, r2
 8014ee6:	4604      	mov	r4, r0
 8014ee8:	2301      	movs	r3, #1
 8014eea:	e7f0      	b.n	8014ece <_vfiprintf_r+0x1da>
 8014eec:	ab03      	add	r3, sp, #12
 8014eee:	9300      	str	r3, [sp, #0]
 8014ef0:	462a      	mov	r2, r5
 8014ef2:	4b16      	ldr	r3, [pc, #88]	; (8014f4c <_vfiprintf_r+0x258>)
 8014ef4:	a904      	add	r1, sp, #16
 8014ef6:	4630      	mov	r0, r6
 8014ef8:	f3af 8000 	nop.w
 8014efc:	4607      	mov	r7, r0
 8014efe:	1c78      	adds	r0, r7, #1
 8014f00:	d1d6      	bne.n	8014eb0 <_vfiprintf_r+0x1bc>
 8014f02:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014f04:	07d9      	lsls	r1, r3, #31
 8014f06:	d405      	bmi.n	8014f14 <_vfiprintf_r+0x220>
 8014f08:	89ab      	ldrh	r3, [r5, #12]
 8014f0a:	059a      	lsls	r2, r3, #22
 8014f0c:	d402      	bmi.n	8014f14 <_vfiprintf_r+0x220>
 8014f0e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014f10:	f7ff fcb7 	bl	8014882 <__retarget_lock_release_recursive>
 8014f14:	89ab      	ldrh	r3, [r5, #12]
 8014f16:	065b      	lsls	r3, r3, #25
 8014f18:	f53f af12 	bmi.w	8014d40 <_vfiprintf_r+0x4c>
 8014f1c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014f1e:	e711      	b.n	8014d44 <_vfiprintf_r+0x50>
 8014f20:	ab03      	add	r3, sp, #12
 8014f22:	9300      	str	r3, [sp, #0]
 8014f24:	462a      	mov	r2, r5
 8014f26:	4b09      	ldr	r3, [pc, #36]	; (8014f4c <_vfiprintf_r+0x258>)
 8014f28:	a904      	add	r1, sp, #16
 8014f2a:	4630      	mov	r0, r6
 8014f2c:	f000 f880 	bl	8015030 <_printf_i>
 8014f30:	e7e4      	b.n	8014efc <_vfiprintf_r+0x208>
 8014f32:	bf00      	nop
 8014f34:	080184ec 	.word	0x080184ec
 8014f38:	0801850c 	.word	0x0801850c
 8014f3c:	080184cc 	.word	0x080184cc
 8014f40:	0801852c 	.word	0x0801852c
 8014f44:	08018536 	.word	0x08018536
 8014f48:	00000000 	.word	0x00000000
 8014f4c:	08014ccf 	.word	0x08014ccf
 8014f50:	08018532 	.word	0x08018532

08014f54 <_printf_common>:
 8014f54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014f58:	4616      	mov	r6, r2
 8014f5a:	4699      	mov	r9, r3
 8014f5c:	688a      	ldr	r2, [r1, #8]
 8014f5e:	690b      	ldr	r3, [r1, #16]
 8014f60:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8014f64:	4293      	cmp	r3, r2
 8014f66:	bfb8      	it	lt
 8014f68:	4613      	movlt	r3, r2
 8014f6a:	6033      	str	r3, [r6, #0]
 8014f6c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8014f70:	4607      	mov	r7, r0
 8014f72:	460c      	mov	r4, r1
 8014f74:	b10a      	cbz	r2, 8014f7a <_printf_common+0x26>
 8014f76:	3301      	adds	r3, #1
 8014f78:	6033      	str	r3, [r6, #0]
 8014f7a:	6823      	ldr	r3, [r4, #0]
 8014f7c:	0699      	lsls	r1, r3, #26
 8014f7e:	bf42      	ittt	mi
 8014f80:	6833      	ldrmi	r3, [r6, #0]
 8014f82:	3302      	addmi	r3, #2
 8014f84:	6033      	strmi	r3, [r6, #0]
 8014f86:	6825      	ldr	r5, [r4, #0]
 8014f88:	f015 0506 	ands.w	r5, r5, #6
 8014f8c:	d106      	bne.n	8014f9c <_printf_common+0x48>
 8014f8e:	f104 0a19 	add.w	sl, r4, #25
 8014f92:	68e3      	ldr	r3, [r4, #12]
 8014f94:	6832      	ldr	r2, [r6, #0]
 8014f96:	1a9b      	subs	r3, r3, r2
 8014f98:	42ab      	cmp	r3, r5
 8014f9a:	dc26      	bgt.n	8014fea <_printf_common+0x96>
 8014f9c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8014fa0:	1e13      	subs	r3, r2, #0
 8014fa2:	6822      	ldr	r2, [r4, #0]
 8014fa4:	bf18      	it	ne
 8014fa6:	2301      	movne	r3, #1
 8014fa8:	0692      	lsls	r2, r2, #26
 8014faa:	d42b      	bmi.n	8015004 <_printf_common+0xb0>
 8014fac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8014fb0:	4649      	mov	r1, r9
 8014fb2:	4638      	mov	r0, r7
 8014fb4:	47c0      	blx	r8
 8014fb6:	3001      	adds	r0, #1
 8014fb8:	d01e      	beq.n	8014ff8 <_printf_common+0xa4>
 8014fba:	6823      	ldr	r3, [r4, #0]
 8014fbc:	68e5      	ldr	r5, [r4, #12]
 8014fbe:	6832      	ldr	r2, [r6, #0]
 8014fc0:	f003 0306 	and.w	r3, r3, #6
 8014fc4:	2b04      	cmp	r3, #4
 8014fc6:	bf08      	it	eq
 8014fc8:	1aad      	subeq	r5, r5, r2
 8014fca:	68a3      	ldr	r3, [r4, #8]
 8014fcc:	6922      	ldr	r2, [r4, #16]
 8014fce:	bf0c      	ite	eq
 8014fd0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014fd4:	2500      	movne	r5, #0
 8014fd6:	4293      	cmp	r3, r2
 8014fd8:	bfc4      	itt	gt
 8014fda:	1a9b      	subgt	r3, r3, r2
 8014fdc:	18ed      	addgt	r5, r5, r3
 8014fde:	2600      	movs	r6, #0
 8014fe0:	341a      	adds	r4, #26
 8014fe2:	42b5      	cmp	r5, r6
 8014fe4:	d11a      	bne.n	801501c <_printf_common+0xc8>
 8014fe6:	2000      	movs	r0, #0
 8014fe8:	e008      	b.n	8014ffc <_printf_common+0xa8>
 8014fea:	2301      	movs	r3, #1
 8014fec:	4652      	mov	r2, sl
 8014fee:	4649      	mov	r1, r9
 8014ff0:	4638      	mov	r0, r7
 8014ff2:	47c0      	blx	r8
 8014ff4:	3001      	adds	r0, #1
 8014ff6:	d103      	bne.n	8015000 <_printf_common+0xac>
 8014ff8:	f04f 30ff 	mov.w	r0, #4294967295
 8014ffc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015000:	3501      	adds	r5, #1
 8015002:	e7c6      	b.n	8014f92 <_printf_common+0x3e>
 8015004:	18e1      	adds	r1, r4, r3
 8015006:	1c5a      	adds	r2, r3, #1
 8015008:	2030      	movs	r0, #48	; 0x30
 801500a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801500e:	4422      	add	r2, r4
 8015010:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8015014:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8015018:	3302      	adds	r3, #2
 801501a:	e7c7      	b.n	8014fac <_printf_common+0x58>
 801501c:	2301      	movs	r3, #1
 801501e:	4622      	mov	r2, r4
 8015020:	4649      	mov	r1, r9
 8015022:	4638      	mov	r0, r7
 8015024:	47c0      	blx	r8
 8015026:	3001      	adds	r0, #1
 8015028:	d0e6      	beq.n	8014ff8 <_printf_common+0xa4>
 801502a:	3601      	adds	r6, #1
 801502c:	e7d9      	b.n	8014fe2 <_printf_common+0x8e>
	...

08015030 <_printf_i>:
 8015030:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015034:	460c      	mov	r4, r1
 8015036:	4691      	mov	r9, r2
 8015038:	7e27      	ldrb	r7, [r4, #24]
 801503a:	990c      	ldr	r1, [sp, #48]	; 0x30
 801503c:	2f78      	cmp	r7, #120	; 0x78
 801503e:	4680      	mov	r8, r0
 8015040:	469a      	mov	sl, r3
 8015042:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8015046:	d807      	bhi.n	8015058 <_printf_i+0x28>
 8015048:	2f62      	cmp	r7, #98	; 0x62
 801504a:	d80a      	bhi.n	8015062 <_printf_i+0x32>
 801504c:	2f00      	cmp	r7, #0
 801504e:	f000 80d8 	beq.w	8015202 <_printf_i+0x1d2>
 8015052:	2f58      	cmp	r7, #88	; 0x58
 8015054:	f000 80a3 	beq.w	801519e <_printf_i+0x16e>
 8015058:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801505c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8015060:	e03a      	b.n	80150d8 <_printf_i+0xa8>
 8015062:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8015066:	2b15      	cmp	r3, #21
 8015068:	d8f6      	bhi.n	8015058 <_printf_i+0x28>
 801506a:	a001      	add	r0, pc, #4	; (adr r0, 8015070 <_printf_i+0x40>)
 801506c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8015070:	080150c9 	.word	0x080150c9
 8015074:	080150dd 	.word	0x080150dd
 8015078:	08015059 	.word	0x08015059
 801507c:	08015059 	.word	0x08015059
 8015080:	08015059 	.word	0x08015059
 8015084:	08015059 	.word	0x08015059
 8015088:	080150dd 	.word	0x080150dd
 801508c:	08015059 	.word	0x08015059
 8015090:	08015059 	.word	0x08015059
 8015094:	08015059 	.word	0x08015059
 8015098:	08015059 	.word	0x08015059
 801509c:	080151e9 	.word	0x080151e9
 80150a0:	0801510d 	.word	0x0801510d
 80150a4:	080151cb 	.word	0x080151cb
 80150a8:	08015059 	.word	0x08015059
 80150ac:	08015059 	.word	0x08015059
 80150b0:	0801520b 	.word	0x0801520b
 80150b4:	08015059 	.word	0x08015059
 80150b8:	0801510d 	.word	0x0801510d
 80150bc:	08015059 	.word	0x08015059
 80150c0:	08015059 	.word	0x08015059
 80150c4:	080151d3 	.word	0x080151d3
 80150c8:	680b      	ldr	r3, [r1, #0]
 80150ca:	1d1a      	adds	r2, r3, #4
 80150cc:	681b      	ldr	r3, [r3, #0]
 80150ce:	600a      	str	r2, [r1, #0]
 80150d0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80150d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80150d8:	2301      	movs	r3, #1
 80150da:	e0a3      	b.n	8015224 <_printf_i+0x1f4>
 80150dc:	6825      	ldr	r5, [r4, #0]
 80150de:	6808      	ldr	r0, [r1, #0]
 80150e0:	062e      	lsls	r6, r5, #24
 80150e2:	f100 0304 	add.w	r3, r0, #4
 80150e6:	d50a      	bpl.n	80150fe <_printf_i+0xce>
 80150e8:	6805      	ldr	r5, [r0, #0]
 80150ea:	600b      	str	r3, [r1, #0]
 80150ec:	2d00      	cmp	r5, #0
 80150ee:	da03      	bge.n	80150f8 <_printf_i+0xc8>
 80150f0:	232d      	movs	r3, #45	; 0x2d
 80150f2:	426d      	negs	r5, r5
 80150f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80150f8:	485e      	ldr	r0, [pc, #376]	; (8015274 <_printf_i+0x244>)
 80150fa:	230a      	movs	r3, #10
 80150fc:	e019      	b.n	8015132 <_printf_i+0x102>
 80150fe:	f015 0f40 	tst.w	r5, #64	; 0x40
 8015102:	6805      	ldr	r5, [r0, #0]
 8015104:	600b      	str	r3, [r1, #0]
 8015106:	bf18      	it	ne
 8015108:	b22d      	sxthne	r5, r5
 801510a:	e7ef      	b.n	80150ec <_printf_i+0xbc>
 801510c:	680b      	ldr	r3, [r1, #0]
 801510e:	6825      	ldr	r5, [r4, #0]
 8015110:	1d18      	adds	r0, r3, #4
 8015112:	6008      	str	r0, [r1, #0]
 8015114:	0628      	lsls	r0, r5, #24
 8015116:	d501      	bpl.n	801511c <_printf_i+0xec>
 8015118:	681d      	ldr	r5, [r3, #0]
 801511a:	e002      	b.n	8015122 <_printf_i+0xf2>
 801511c:	0669      	lsls	r1, r5, #25
 801511e:	d5fb      	bpl.n	8015118 <_printf_i+0xe8>
 8015120:	881d      	ldrh	r5, [r3, #0]
 8015122:	4854      	ldr	r0, [pc, #336]	; (8015274 <_printf_i+0x244>)
 8015124:	2f6f      	cmp	r7, #111	; 0x6f
 8015126:	bf0c      	ite	eq
 8015128:	2308      	moveq	r3, #8
 801512a:	230a      	movne	r3, #10
 801512c:	2100      	movs	r1, #0
 801512e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8015132:	6866      	ldr	r6, [r4, #4]
 8015134:	60a6      	str	r6, [r4, #8]
 8015136:	2e00      	cmp	r6, #0
 8015138:	bfa2      	ittt	ge
 801513a:	6821      	ldrge	r1, [r4, #0]
 801513c:	f021 0104 	bicge.w	r1, r1, #4
 8015140:	6021      	strge	r1, [r4, #0]
 8015142:	b90d      	cbnz	r5, 8015148 <_printf_i+0x118>
 8015144:	2e00      	cmp	r6, #0
 8015146:	d04d      	beq.n	80151e4 <_printf_i+0x1b4>
 8015148:	4616      	mov	r6, r2
 801514a:	fbb5 f1f3 	udiv	r1, r5, r3
 801514e:	fb03 5711 	mls	r7, r3, r1, r5
 8015152:	5dc7      	ldrb	r7, [r0, r7]
 8015154:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8015158:	462f      	mov	r7, r5
 801515a:	42bb      	cmp	r3, r7
 801515c:	460d      	mov	r5, r1
 801515e:	d9f4      	bls.n	801514a <_printf_i+0x11a>
 8015160:	2b08      	cmp	r3, #8
 8015162:	d10b      	bne.n	801517c <_printf_i+0x14c>
 8015164:	6823      	ldr	r3, [r4, #0]
 8015166:	07df      	lsls	r7, r3, #31
 8015168:	d508      	bpl.n	801517c <_printf_i+0x14c>
 801516a:	6923      	ldr	r3, [r4, #16]
 801516c:	6861      	ldr	r1, [r4, #4]
 801516e:	4299      	cmp	r1, r3
 8015170:	bfde      	ittt	le
 8015172:	2330      	movle	r3, #48	; 0x30
 8015174:	f806 3c01 	strble.w	r3, [r6, #-1]
 8015178:	f106 36ff 	addle.w	r6, r6, #4294967295
 801517c:	1b92      	subs	r2, r2, r6
 801517e:	6122      	str	r2, [r4, #16]
 8015180:	f8cd a000 	str.w	sl, [sp]
 8015184:	464b      	mov	r3, r9
 8015186:	aa03      	add	r2, sp, #12
 8015188:	4621      	mov	r1, r4
 801518a:	4640      	mov	r0, r8
 801518c:	f7ff fee2 	bl	8014f54 <_printf_common>
 8015190:	3001      	adds	r0, #1
 8015192:	d14c      	bne.n	801522e <_printf_i+0x1fe>
 8015194:	f04f 30ff 	mov.w	r0, #4294967295
 8015198:	b004      	add	sp, #16
 801519a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801519e:	4835      	ldr	r0, [pc, #212]	; (8015274 <_printf_i+0x244>)
 80151a0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80151a4:	6823      	ldr	r3, [r4, #0]
 80151a6:	680e      	ldr	r6, [r1, #0]
 80151a8:	061f      	lsls	r7, r3, #24
 80151aa:	f856 5b04 	ldr.w	r5, [r6], #4
 80151ae:	600e      	str	r6, [r1, #0]
 80151b0:	d514      	bpl.n	80151dc <_printf_i+0x1ac>
 80151b2:	07d9      	lsls	r1, r3, #31
 80151b4:	bf44      	itt	mi
 80151b6:	f043 0320 	orrmi.w	r3, r3, #32
 80151ba:	6023      	strmi	r3, [r4, #0]
 80151bc:	b91d      	cbnz	r5, 80151c6 <_printf_i+0x196>
 80151be:	6823      	ldr	r3, [r4, #0]
 80151c0:	f023 0320 	bic.w	r3, r3, #32
 80151c4:	6023      	str	r3, [r4, #0]
 80151c6:	2310      	movs	r3, #16
 80151c8:	e7b0      	b.n	801512c <_printf_i+0xfc>
 80151ca:	6823      	ldr	r3, [r4, #0]
 80151cc:	f043 0320 	orr.w	r3, r3, #32
 80151d0:	6023      	str	r3, [r4, #0]
 80151d2:	2378      	movs	r3, #120	; 0x78
 80151d4:	4828      	ldr	r0, [pc, #160]	; (8015278 <_printf_i+0x248>)
 80151d6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80151da:	e7e3      	b.n	80151a4 <_printf_i+0x174>
 80151dc:	065e      	lsls	r6, r3, #25
 80151de:	bf48      	it	mi
 80151e0:	b2ad      	uxthmi	r5, r5
 80151e2:	e7e6      	b.n	80151b2 <_printf_i+0x182>
 80151e4:	4616      	mov	r6, r2
 80151e6:	e7bb      	b.n	8015160 <_printf_i+0x130>
 80151e8:	680b      	ldr	r3, [r1, #0]
 80151ea:	6826      	ldr	r6, [r4, #0]
 80151ec:	6960      	ldr	r0, [r4, #20]
 80151ee:	1d1d      	adds	r5, r3, #4
 80151f0:	600d      	str	r5, [r1, #0]
 80151f2:	0635      	lsls	r5, r6, #24
 80151f4:	681b      	ldr	r3, [r3, #0]
 80151f6:	d501      	bpl.n	80151fc <_printf_i+0x1cc>
 80151f8:	6018      	str	r0, [r3, #0]
 80151fa:	e002      	b.n	8015202 <_printf_i+0x1d2>
 80151fc:	0671      	lsls	r1, r6, #25
 80151fe:	d5fb      	bpl.n	80151f8 <_printf_i+0x1c8>
 8015200:	8018      	strh	r0, [r3, #0]
 8015202:	2300      	movs	r3, #0
 8015204:	6123      	str	r3, [r4, #16]
 8015206:	4616      	mov	r6, r2
 8015208:	e7ba      	b.n	8015180 <_printf_i+0x150>
 801520a:	680b      	ldr	r3, [r1, #0]
 801520c:	1d1a      	adds	r2, r3, #4
 801520e:	600a      	str	r2, [r1, #0]
 8015210:	681e      	ldr	r6, [r3, #0]
 8015212:	6862      	ldr	r2, [r4, #4]
 8015214:	2100      	movs	r1, #0
 8015216:	4630      	mov	r0, r6
 8015218:	f7ea ffea 	bl	80001f0 <memchr>
 801521c:	b108      	cbz	r0, 8015222 <_printf_i+0x1f2>
 801521e:	1b80      	subs	r0, r0, r6
 8015220:	6060      	str	r0, [r4, #4]
 8015222:	6863      	ldr	r3, [r4, #4]
 8015224:	6123      	str	r3, [r4, #16]
 8015226:	2300      	movs	r3, #0
 8015228:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801522c:	e7a8      	b.n	8015180 <_printf_i+0x150>
 801522e:	6923      	ldr	r3, [r4, #16]
 8015230:	4632      	mov	r2, r6
 8015232:	4649      	mov	r1, r9
 8015234:	4640      	mov	r0, r8
 8015236:	47d0      	blx	sl
 8015238:	3001      	adds	r0, #1
 801523a:	d0ab      	beq.n	8015194 <_printf_i+0x164>
 801523c:	6823      	ldr	r3, [r4, #0]
 801523e:	079b      	lsls	r3, r3, #30
 8015240:	d413      	bmi.n	801526a <_printf_i+0x23a>
 8015242:	68e0      	ldr	r0, [r4, #12]
 8015244:	9b03      	ldr	r3, [sp, #12]
 8015246:	4298      	cmp	r0, r3
 8015248:	bfb8      	it	lt
 801524a:	4618      	movlt	r0, r3
 801524c:	e7a4      	b.n	8015198 <_printf_i+0x168>
 801524e:	2301      	movs	r3, #1
 8015250:	4632      	mov	r2, r6
 8015252:	4649      	mov	r1, r9
 8015254:	4640      	mov	r0, r8
 8015256:	47d0      	blx	sl
 8015258:	3001      	adds	r0, #1
 801525a:	d09b      	beq.n	8015194 <_printf_i+0x164>
 801525c:	3501      	adds	r5, #1
 801525e:	68e3      	ldr	r3, [r4, #12]
 8015260:	9903      	ldr	r1, [sp, #12]
 8015262:	1a5b      	subs	r3, r3, r1
 8015264:	42ab      	cmp	r3, r5
 8015266:	dcf2      	bgt.n	801524e <_printf_i+0x21e>
 8015268:	e7eb      	b.n	8015242 <_printf_i+0x212>
 801526a:	2500      	movs	r5, #0
 801526c:	f104 0619 	add.w	r6, r4, #25
 8015270:	e7f5      	b.n	801525e <_printf_i+0x22e>
 8015272:	bf00      	nop
 8015274:	0801853d 	.word	0x0801853d
 8015278:	0801854e 	.word	0x0801854e

0801527c <_sbrk_r>:
 801527c:	b538      	push	{r3, r4, r5, lr}
 801527e:	4d06      	ldr	r5, [pc, #24]	; (8015298 <_sbrk_r+0x1c>)
 8015280:	2300      	movs	r3, #0
 8015282:	4604      	mov	r4, r0
 8015284:	4608      	mov	r0, r1
 8015286:	602b      	str	r3, [r5, #0]
 8015288:	f7ec f9be 	bl	8001608 <_sbrk>
 801528c:	1c43      	adds	r3, r0, #1
 801528e:	d102      	bne.n	8015296 <_sbrk_r+0x1a>
 8015290:	682b      	ldr	r3, [r5, #0]
 8015292:	b103      	cbz	r3, 8015296 <_sbrk_r+0x1a>
 8015294:	6023      	str	r3, [r4, #0]
 8015296:	bd38      	pop	{r3, r4, r5, pc}
 8015298:	200072bc 	.word	0x200072bc

0801529c <__sread>:
 801529c:	b510      	push	{r4, lr}
 801529e:	460c      	mov	r4, r1
 80152a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80152a4:	f000 fa92 	bl	80157cc <_read_r>
 80152a8:	2800      	cmp	r0, #0
 80152aa:	bfab      	itete	ge
 80152ac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80152ae:	89a3      	ldrhlt	r3, [r4, #12]
 80152b0:	181b      	addge	r3, r3, r0
 80152b2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80152b6:	bfac      	ite	ge
 80152b8:	6563      	strge	r3, [r4, #84]	; 0x54
 80152ba:	81a3      	strhlt	r3, [r4, #12]
 80152bc:	bd10      	pop	{r4, pc}

080152be <__swrite>:
 80152be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80152c2:	461f      	mov	r7, r3
 80152c4:	898b      	ldrh	r3, [r1, #12]
 80152c6:	05db      	lsls	r3, r3, #23
 80152c8:	4605      	mov	r5, r0
 80152ca:	460c      	mov	r4, r1
 80152cc:	4616      	mov	r6, r2
 80152ce:	d505      	bpl.n	80152dc <__swrite+0x1e>
 80152d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80152d4:	2302      	movs	r3, #2
 80152d6:	2200      	movs	r2, #0
 80152d8:	f000 f9d0 	bl	801567c <_lseek_r>
 80152dc:	89a3      	ldrh	r3, [r4, #12]
 80152de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80152e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80152e6:	81a3      	strh	r3, [r4, #12]
 80152e8:	4632      	mov	r2, r6
 80152ea:	463b      	mov	r3, r7
 80152ec:	4628      	mov	r0, r5
 80152ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80152f2:	f000 b869 	b.w	80153c8 <_write_r>

080152f6 <__sseek>:
 80152f6:	b510      	push	{r4, lr}
 80152f8:	460c      	mov	r4, r1
 80152fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80152fe:	f000 f9bd 	bl	801567c <_lseek_r>
 8015302:	1c43      	adds	r3, r0, #1
 8015304:	89a3      	ldrh	r3, [r4, #12]
 8015306:	bf15      	itete	ne
 8015308:	6560      	strne	r0, [r4, #84]	; 0x54
 801530a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801530e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8015312:	81a3      	strheq	r3, [r4, #12]
 8015314:	bf18      	it	ne
 8015316:	81a3      	strhne	r3, [r4, #12]
 8015318:	bd10      	pop	{r4, pc}

0801531a <__sclose>:
 801531a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801531e:	f000 b8db 	b.w	80154d8 <_close_r>
	...

08015324 <__swbuf_r>:
 8015324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015326:	460e      	mov	r6, r1
 8015328:	4614      	mov	r4, r2
 801532a:	4605      	mov	r5, r0
 801532c:	b118      	cbz	r0, 8015336 <__swbuf_r+0x12>
 801532e:	6983      	ldr	r3, [r0, #24]
 8015330:	b90b      	cbnz	r3, 8015336 <__swbuf_r+0x12>
 8015332:	f7ff f9f5 	bl	8014720 <__sinit>
 8015336:	4b21      	ldr	r3, [pc, #132]	; (80153bc <__swbuf_r+0x98>)
 8015338:	429c      	cmp	r4, r3
 801533a:	d12b      	bne.n	8015394 <__swbuf_r+0x70>
 801533c:	686c      	ldr	r4, [r5, #4]
 801533e:	69a3      	ldr	r3, [r4, #24]
 8015340:	60a3      	str	r3, [r4, #8]
 8015342:	89a3      	ldrh	r3, [r4, #12]
 8015344:	071a      	lsls	r2, r3, #28
 8015346:	d52f      	bpl.n	80153a8 <__swbuf_r+0x84>
 8015348:	6923      	ldr	r3, [r4, #16]
 801534a:	b36b      	cbz	r3, 80153a8 <__swbuf_r+0x84>
 801534c:	6923      	ldr	r3, [r4, #16]
 801534e:	6820      	ldr	r0, [r4, #0]
 8015350:	1ac0      	subs	r0, r0, r3
 8015352:	6963      	ldr	r3, [r4, #20]
 8015354:	b2f6      	uxtb	r6, r6
 8015356:	4283      	cmp	r3, r0
 8015358:	4637      	mov	r7, r6
 801535a:	dc04      	bgt.n	8015366 <__swbuf_r+0x42>
 801535c:	4621      	mov	r1, r4
 801535e:	4628      	mov	r0, r5
 8015360:	f000 f950 	bl	8015604 <_fflush_r>
 8015364:	bb30      	cbnz	r0, 80153b4 <__swbuf_r+0x90>
 8015366:	68a3      	ldr	r3, [r4, #8]
 8015368:	3b01      	subs	r3, #1
 801536a:	60a3      	str	r3, [r4, #8]
 801536c:	6823      	ldr	r3, [r4, #0]
 801536e:	1c5a      	adds	r2, r3, #1
 8015370:	6022      	str	r2, [r4, #0]
 8015372:	701e      	strb	r6, [r3, #0]
 8015374:	6963      	ldr	r3, [r4, #20]
 8015376:	3001      	adds	r0, #1
 8015378:	4283      	cmp	r3, r0
 801537a:	d004      	beq.n	8015386 <__swbuf_r+0x62>
 801537c:	89a3      	ldrh	r3, [r4, #12]
 801537e:	07db      	lsls	r3, r3, #31
 8015380:	d506      	bpl.n	8015390 <__swbuf_r+0x6c>
 8015382:	2e0a      	cmp	r6, #10
 8015384:	d104      	bne.n	8015390 <__swbuf_r+0x6c>
 8015386:	4621      	mov	r1, r4
 8015388:	4628      	mov	r0, r5
 801538a:	f000 f93b 	bl	8015604 <_fflush_r>
 801538e:	b988      	cbnz	r0, 80153b4 <__swbuf_r+0x90>
 8015390:	4638      	mov	r0, r7
 8015392:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015394:	4b0a      	ldr	r3, [pc, #40]	; (80153c0 <__swbuf_r+0x9c>)
 8015396:	429c      	cmp	r4, r3
 8015398:	d101      	bne.n	801539e <__swbuf_r+0x7a>
 801539a:	68ac      	ldr	r4, [r5, #8]
 801539c:	e7cf      	b.n	801533e <__swbuf_r+0x1a>
 801539e:	4b09      	ldr	r3, [pc, #36]	; (80153c4 <__swbuf_r+0xa0>)
 80153a0:	429c      	cmp	r4, r3
 80153a2:	bf08      	it	eq
 80153a4:	68ec      	ldreq	r4, [r5, #12]
 80153a6:	e7ca      	b.n	801533e <__swbuf_r+0x1a>
 80153a8:	4621      	mov	r1, r4
 80153aa:	4628      	mov	r0, r5
 80153ac:	f000 f81e 	bl	80153ec <__swsetup_r>
 80153b0:	2800      	cmp	r0, #0
 80153b2:	d0cb      	beq.n	801534c <__swbuf_r+0x28>
 80153b4:	f04f 37ff 	mov.w	r7, #4294967295
 80153b8:	e7ea      	b.n	8015390 <__swbuf_r+0x6c>
 80153ba:	bf00      	nop
 80153bc:	080184ec 	.word	0x080184ec
 80153c0:	0801850c 	.word	0x0801850c
 80153c4:	080184cc 	.word	0x080184cc

080153c8 <_write_r>:
 80153c8:	b538      	push	{r3, r4, r5, lr}
 80153ca:	4d07      	ldr	r5, [pc, #28]	; (80153e8 <_write_r+0x20>)
 80153cc:	4604      	mov	r4, r0
 80153ce:	4608      	mov	r0, r1
 80153d0:	4611      	mov	r1, r2
 80153d2:	2200      	movs	r2, #0
 80153d4:	602a      	str	r2, [r5, #0]
 80153d6:	461a      	mov	r2, r3
 80153d8:	f7eb fcbc 	bl	8000d54 <_write>
 80153dc:	1c43      	adds	r3, r0, #1
 80153de:	d102      	bne.n	80153e6 <_write_r+0x1e>
 80153e0:	682b      	ldr	r3, [r5, #0]
 80153e2:	b103      	cbz	r3, 80153e6 <_write_r+0x1e>
 80153e4:	6023      	str	r3, [r4, #0]
 80153e6:	bd38      	pop	{r3, r4, r5, pc}
 80153e8:	200072bc 	.word	0x200072bc

080153ec <__swsetup_r>:
 80153ec:	4b32      	ldr	r3, [pc, #200]	; (80154b8 <__swsetup_r+0xcc>)
 80153ee:	b570      	push	{r4, r5, r6, lr}
 80153f0:	681d      	ldr	r5, [r3, #0]
 80153f2:	4606      	mov	r6, r0
 80153f4:	460c      	mov	r4, r1
 80153f6:	b125      	cbz	r5, 8015402 <__swsetup_r+0x16>
 80153f8:	69ab      	ldr	r3, [r5, #24]
 80153fa:	b913      	cbnz	r3, 8015402 <__swsetup_r+0x16>
 80153fc:	4628      	mov	r0, r5
 80153fe:	f7ff f98f 	bl	8014720 <__sinit>
 8015402:	4b2e      	ldr	r3, [pc, #184]	; (80154bc <__swsetup_r+0xd0>)
 8015404:	429c      	cmp	r4, r3
 8015406:	d10f      	bne.n	8015428 <__swsetup_r+0x3c>
 8015408:	686c      	ldr	r4, [r5, #4]
 801540a:	89a3      	ldrh	r3, [r4, #12]
 801540c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015410:	0719      	lsls	r1, r3, #28
 8015412:	d42c      	bmi.n	801546e <__swsetup_r+0x82>
 8015414:	06dd      	lsls	r5, r3, #27
 8015416:	d411      	bmi.n	801543c <__swsetup_r+0x50>
 8015418:	2309      	movs	r3, #9
 801541a:	6033      	str	r3, [r6, #0]
 801541c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8015420:	81a3      	strh	r3, [r4, #12]
 8015422:	f04f 30ff 	mov.w	r0, #4294967295
 8015426:	e03e      	b.n	80154a6 <__swsetup_r+0xba>
 8015428:	4b25      	ldr	r3, [pc, #148]	; (80154c0 <__swsetup_r+0xd4>)
 801542a:	429c      	cmp	r4, r3
 801542c:	d101      	bne.n	8015432 <__swsetup_r+0x46>
 801542e:	68ac      	ldr	r4, [r5, #8]
 8015430:	e7eb      	b.n	801540a <__swsetup_r+0x1e>
 8015432:	4b24      	ldr	r3, [pc, #144]	; (80154c4 <__swsetup_r+0xd8>)
 8015434:	429c      	cmp	r4, r3
 8015436:	bf08      	it	eq
 8015438:	68ec      	ldreq	r4, [r5, #12]
 801543a:	e7e6      	b.n	801540a <__swsetup_r+0x1e>
 801543c:	0758      	lsls	r0, r3, #29
 801543e:	d512      	bpl.n	8015466 <__swsetup_r+0x7a>
 8015440:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015442:	b141      	cbz	r1, 8015456 <__swsetup_r+0x6a>
 8015444:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015448:	4299      	cmp	r1, r3
 801544a:	d002      	beq.n	8015452 <__swsetup_r+0x66>
 801544c:	4630      	mov	r0, r6
 801544e:	f7ff fa21 	bl	8014894 <_free_r>
 8015452:	2300      	movs	r3, #0
 8015454:	6363      	str	r3, [r4, #52]	; 0x34
 8015456:	89a3      	ldrh	r3, [r4, #12]
 8015458:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801545c:	81a3      	strh	r3, [r4, #12]
 801545e:	2300      	movs	r3, #0
 8015460:	6063      	str	r3, [r4, #4]
 8015462:	6923      	ldr	r3, [r4, #16]
 8015464:	6023      	str	r3, [r4, #0]
 8015466:	89a3      	ldrh	r3, [r4, #12]
 8015468:	f043 0308 	orr.w	r3, r3, #8
 801546c:	81a3      	strh	r3, [r4, #12]
 801546e:	6923      	ldr	r3, [r4, #16]
 8015470:	b94b      	cbnz	r3, 8015486 <__swsetup_r+0x9a>
 8015472:	89a3      	ldrh	r3, [r4, #12]
 8015474:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8015478:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801547c:	d003      	beq.n	8015486 <__swsetup_r+0x9a>
 801547e:	4621      	mov	r1, r4
 8015480:	4630      	mov	r0, r6
 8015482:	f000 f931 	bl	80156e8 <__smakebuf_r>
 8015486:	89a0      	ldrh	r0, [r4, #12]
 8015488:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801548c:	f010 0301 	ands.w	r3, r0, #1
 8015490:	d00a      	beq.n	80154a8 <__swsetup_r+0xbc>
 8015492:	2300      	movs	r3, #0
 8015494:	60a3      	str	r3, [r4, #8]
 8015496:	6963      	ldr	r3, [r4, #20]
 8015498:	425b      	negs	r3, r3
 801549a:	61a3      	str	r3, [r4, #24]
 801549c:	6923      	ldr	r3, [r4, #16]
 801549e:	b943      	cbnz	r3, 80154b2 <__swsetup_r+0xc6>
 80154a0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80154a4:	d1ba      	bne.n	801541c <__swsetup_r+0x30>
 80154a6:	bd70      	pop	{r4, r5, r6, pc}
 80154a8:	0781      	lsls	r1, r0, #30
 80154aa:	bf58      	it	pl
 80154ac:	6963      	ldrpl	r3, [r4, #20]
 80154ae:	60a3      	str	r3, [r4, #8]
 80154b0:	e7f4      	b.n	801549c <__swsetup_r+0xb0>
 80154b2:	2000      	movs	r0, #0
 80154b4:	e7f7      	b.n	80154a6 <__swsetup_r+0xba>
 80154b6:	bf00      	nop
 80154b8:	20000014 	.word	0x20000014
 80154bc:	080184ec 	.word	0x080184ec
 80154c0:	0801850c 	.word	0x0801850c
 80154c4:	080184cc 	.word	0x080184cc

080154c8 <abort>:
 80154c8:	b508      	push	{r3, lr}
 80154ca:	2006      	movs	r0, #6
 80154cc:	f000 f9b8 	bl	8015840 <raise>
 80154d0:	2001      	movs	r0, #1
 80154d2:	f7ec f83d 	bl	8001550 <_exit>
	...

080154d8 <_close_r>:
 80154d8:	b538      	push	{r3, r4, r5, lr}
 80154da:	4d06      	ldr	r5, [pc, #24]	; (80154f4 <_close_r+0x1c>)
 80154dc:	2300      	movs	r3, #0
 80154de:	4604      	mov	r4, r0
 80154e0:	4608      	mov	r0, r1
 80154e2:	602b      	str	r3, [r5, #0]
 80154e4:	f7ec f85b 	bl	800159e <_close>
 80154e8:	1c43      	adds	r3, r0, #1
 80154ea:	d102      	bne.n	80154f2 <_close_r+0x1a>
 80154ec:	682b      	ldr	r3, [r5, #0]
 80154ee:	b103      	cbz	r3, 80154f2 <_close_r+0x1a>
 80154f0:	6023      	str	r3, [r4, #0]
 80154f2:	bd38      	pop	{r3, r4, r5, pc}
 80154f4:	200072bc 	.word	0x200072bc

080154f8 <__sflush_r>:
 80154f8:	898a      	ldrh	r2, [r1, #12]
 80154fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80154fe:	4605      	mov	r5, r0
 8015500:	0710      	lsls	r0, r2, #28
 8015502:	460c      	mov	r4, r1
 8015504:	d458      	bmi.n	80155b8 <__sflush_r+0xc0>
 8015506:	684b      	ldr	r3, [r1, #4]
 8015508:	2b00      	cmp	r3, #0
 801550a:	dc05      	bgt.n	8015518 <__sflush_r+0x20>
 801550c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801550e:	2b00      	cmp	r3, #0
 8015510:	dc02      	bgt.n	8015518 <__sflush_r+0x20>
 8015512:	2000      	movs	r0, #0
 8015514:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015518:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801551a:	2e00      	cmp	r6, #0
 801551c:	d0f9      	beq.n	8015512 <__sflush_r+0x1a>
 801551e:	2300      	movs	r3, #0
 8015520:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8015524:	682f      	ldr	r7, [r5, #0]
 8015526:	602b      	str	r3, [r5, #0]
 8015528:	d032      	beq.n	8015590 <__sflush_r+0x98>
 801552a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801552c:	89a3      	ldrh	r3, [r4, #12]
 801552e:	075a      	lsls	r2, r3, #29
 8015530:	d505      	bpl.n	801553e <__sflush_r+0x46>
 8015532:	6863      	ldr	r3, [r4, #4]
 8015534:	1ac0      	subs	r0, r0, r3
 8015536:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8015538:	b10b      	cbz	r3, 801553e <__sflush_r+0x46>
 801553a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801553c:	1ac0      	subs	r0, r0, r3
 801553e:	2300      	movs	r3, #0
 8015540:	4602      	mov	r2, r0
 8015542:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015544:	6a21      	ldr	r1, [r4, #32]
 8015546:	4628      	mov	r0, r5
 8015548:	47b0      	blx	r6
 801554a:	1c43      	adds	r3, r0, #1
 801554c:	89a3      	ldrh	r3, [r4, #12]
 801554e:	d106      	bne.n	801555e <__sflush_r+0x66>
 8015550:	6829      	ldr	r1, [r5, #0]
 8015552:	291d      	cmp	r1, #29
 8015554:	d82c      	bhi.n	80155b0 <__sflush_r+0xb8>
 8015556:	4a2a      	ldr	r2, [pc, #168]	; (8015600 <__sflush_r+0x108>)
 8015558:	40ca      	lsrs	r2, r1
 801555a:	07d6      	lsls	r6, r2, #31
 801555c:	d528      	bpl.n	80155b0 <__sflush_r+0xb8>
 801555e:	2200      	movs	r2, #0
 8015560:	6062      	str	r2, [r4, #4]
 8015562:	04d9      	lsls	r1, r3, #19
 8015564:	6922      	ldr	r2, [r4, #16]
 8015566:	6022      	str	r2, [r4, #0]
 8015568:	d504      	bpl.n	8015574 <__sflush_r+0x7c>
 801556a:	1c42      	adds	r2, r0, #1
 801556c:	d101      	bne.n	8015572 <__sflush_r+0x7a>
 801556e:	682b      	ldr	r3, [r5, #0]
 8015570:	b903      	cbnz	r3, 8015574 <__sflush_r+0x7c>
 8015572:	6560      	str	r0, [r4, #84]	; 0x54
 8015574:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015576:	602f      	str	r7, [r5, #0]
 8015578:	2900      	cmp	r1, #0
 801557a:	d0ca      	beq.n	8015512 <__sflush_r+0x1a>
 801557c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015580:	4299      	cmp	r1, r3
 8015582:	d002      	beq.n	801558a <__sflush_r+0x92>
 8015584:	4628      	mov	r0, r5
 8015586:	f7ff f985 	bl	8014894 <_free_r>
 801558a:	2000      	movs	r0, #0
 801558c:	6360      	str	r0, [r4, #52]	; 0x34
 801558e:	e7c1      	b.n	8015514 <__sflush_r+0x1c>
 8015590:	6a21      	ldr	r1, [r4, #32]
 8015592:	2301      	movs	r3, #1
 8015594:	4628      	mov	r0, r5
 8015596:	47b0      	blx	r6
 8015598:	1c41      	adds	r1, r0, #1
 801559a:	d1c7      	bne.n	801552c <__sflush_r+0x34>
 801559c:	682b      	ldr	r3, [r5, #0]
 801559e:	2b00      	cmp	r3, #0
 80155a0:	d0c4      	beq.n	801552c <__sflush_r+0x34>
 80155a2:	2b1d      	cmp	r3, #29
 80155a4:	d001      	beq.n	80155aa <__sflush_r+0xb2>
 80155a6:	2b16      	cmp	r3, #22
 80155a8:	d101      	bne.n	80155ae <__sflush_r+0xb6>
 80155aa:	602f      	str	r7, [r5, #0]
 80155ac:	e7b1      	b.n	8015512 <__sflush_r+0x1a>
 80155ae:	89a3      	ldrh	r3, [r4, #12]
 80155b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80155b4:	81a3      	strh	r3, [r4, #12]
 80155b6:	e7ad      	b.n	8015514 <__sflush_r+0x1c>
 80155b8:	690f      	ldr	r7, [r1, #16]
 80155ba:	2f00      	cmp	r7, #0
 80155bc:	d0a9      	beq.n	8015512 <__sflush_r+0x1a>
 80155be:	0793      	lsls	r3, r2, #30
 80155c0:	680e      	ldr	r6, [r1, #0]
 80155c2:	bf08      	it	eq
 80155c4:	694b      	ldreq	r3, [r1, #20]
 80155c6:	600f      	str	r7, [r1, #0]
 80155c8:	bf18      	it	ne
 80155ca:	2300      	movne	r3, #0
 80155cc:	eba6 0807 	sub.w	r8, r6, r7
 80155d0:	608b      	str	r3, [r1, #8]
 80155d2:	f1b8 0f00 	cmp.w	r8, #0
 80155d6:	dd9c      	ble.n	8015512 <__sflush_r+0x1a>
 80155d8:	6a21      	ldr	r1, [r4, #32]
 80155da:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80155dc:	4643      	mov	r3, r8
 80155de:	463a      	mov	r2, r7
 80155e0:	4628      	mov	r0, r5
 80155e2:	47b0      	blx	r6
 80155e4:	2800      	cmp	r0, #0
 80155e6:	dc06      	bgt.n	80155f6 <__sflush_r+0xfe>
 80155e8:	89a3      	ldrh	r3, [r4, #12]
 80155ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80155ee:	81a3      	strh	r3, [r4, #12]
 80155f0:	f04f 30ff 	mov.w	r0, #4294967295
 80155f4:	e78e      	b.n	8015514 <__sflush_r+0x1c>
 80155f6:	4407      	add	r7, r0
 80155f8:	eba8 0800 	sub.w	r8, r8, r0
 80155fc:	e7e9      	b.n	80155d2 <__sflush_r+0xda>
 80155fe:	bf00      	nop
 8015600:	20400001 	.word	0x20400001

08015604 <_fflush_r>:
 8015604:	b538      	push	{r3, r4, r5, lr}
 8015606:	690b      	ldr	r3, [r1, #16]
 8015608:	4605      	mov	r5, r0
 801560a:	460c      	mov	r4, r1
 801560c:	b913      	cbnz	r3, 8015614 <_fflush_r+0x10>
 801560e:	2500      	movs	r5, #0
 8015610:	4628      	mov	r0, r5
 8015612:	bd38      	pop	{r3, r4, r5, pc}
 8015614:	b118      	cbz	r0, 801561e <_fflush_r+0x1a>
 8015616:	6983      	ldr	r3, [r0, #24]
 8015618:	b90b      	cbnz	r3, 801561e <_fflush_r+0x1a>
 801561a:	f7ff f881 	bl	8014720 <__sinit>
 801561e:	4b14      	ldr	r3, [pc, #80]	; (8015670 <_fflush_r+0x6c>)
 8015620:	429c      	cmp	r4, r3
 8015622:	d11b      	bne.n	801565c <_fflush_r+0x58>
 8015624:	686c      	ldr	r4, [r5, #4]
 8015626:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801562a:	2b00      	cmp	r3, #0
 801562c:	d0ef      	beq.n	801560e <_fflush_r+0xa>
 801562e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8015630:	07d0      	lsls	r0, r2, #31
 8015632:	d404      	bmi.n	801563e <_fflush_r+0x3a>
 8015634:	0599      	lsls	r1, r3, #22
 8015636:	d402      	bmi.n	801563e <_fflush_r+0x3a>
 8015638:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801563a:	f7ff f921 	bl	8014880 <__retarget_lock_acquire_recursive>
 801563e:	4628      	mov	r0, r5
 8015640:	4621      	mov	r1, r4
 8015642:	f7ff ff59 	bl	80154f8 <__sflush_r>
 8015646:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015648:	07da      	lsls	r2, r3, #31
 801564a:	4605      	mov	r5, r0
 801564c:	d4e0      	bmi.n	8015610 <_fflush_r+0xc>
 801564e:	89a3      	ldrh	r3, [r4, #12]
 8015650:	059b      	lsls	r3, r3, #22
 8015652:	d4dd      	bmi.n	8015610 <_fflush_r+0xc>
 8015654:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015656:	f7ff f914 	bl	8014882 <__retarget_lock_release_recursive>
 801565a:	e7d9      	b.n	8015610 <_fflush_r+0xc>
 801565c:	4b05      	ldr	r3, [pc, #20]	; (8015674 <_fflush_r+0x70>)
 801565e:	429c      	cmp	r4, r3
 8015660:	d101      	bne.n	8015666 <_fflush_r+0x62>
 8015662:	68ac      	ldr	r4, [r5, #8]
 8015664:	e7df      	b.n	8015626 <_fflush_r+0x22>
 8015666:	4b04      	ldr	r3, [pc, #16]	; (8015678 <_fflush_r+0x74>)
 8015668:	429c      	cmp	r4, r3
 801566a:	bf08      	it	eq
 801566c:	68ec      	ldreq	r4, [r5, #12]
 801566e:	e7da      	b.n	8015626 <_fflush_r+0x22>
 8015670:	080184ec 	.word	0x080184ec
 8015674:	0801850c 	.word	0x0801850c
 8015678:	080184cc 	.word	0x080184cc

0801567c <_lseek_r>:
 801567c:	b538      	push	{r3, r4, r5, lr}
 801567e:	4d07      	ldr	r5, [pc, #28]	; (801569c <_lseek_r+0x20>)
 8015680:	4604      	mov	r4, r0
 8015682:	4608      	mov	r0, r1
 8015684:	4611      	mov	r1, r2
 8015686:	2200      	movs	r2, #0
 8015688:	602a      	str	r2, [r5, #0]
 801568a:	461a      	mov	r2, r3
 801568c:	f7eb ffae 	bl	80015ec <_lseek>
 8015690:	1c43      	adds	r3, r0, #1
 8015692:	d102      	bne.n	801569a <_lseek_r+0x1e>
 8015694:	682b      	ldr	r3, [r5, #0]
 8015696:	b103      	cbz	r3, 801569a <_lseek_r+0x1e>
 8015698:	6023      	str	r3, [r4, #0]
 801569a:	bd38      	pop	{r3, r4, r5, pc}
 801569c:	200072bc 	.word	0x200072bc

080156a0 <__swhatbuf_r>:
 80156a0:	b570      	push	{r4, r5, r6, lr}
 80156a2:	460e      	mov	r6, r1
 80156a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80156a8:	2900      	cmp	r1, #0
 80156aa:	b096      	sub	sp, #88	; 0x58
 80156ac:	4614      	mov	r4, r2
 80156ae:	461d      	mov	r5, r3
 80156b0:	da07      	bge.n	80156c2 <__swhatbuf_r+0x22>
 80156b2:	2300      	movs	r3, #0
 80156b4:	602b      	str	r3, [r5, #0]
 80156b6:	89b3      	ldrh	r3, [r6, #12]
 80156b8:	061a      	lsls	r2, r3, #24
 80156ba:	d410      	bmi.n	80156de <__swhatbuf_r+0x3e>
 80156bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80156c0:	e00e      	b.n	80156e0 <__swhatbuf_r+0x40>
 80156c2:	466a      	mov	r2, sp
 80156c4:	f000 f8d8 	bl	8015878 <_fstat_r>
 80156c8:	2800      	cmp	r0, #0
 80156ca:	dbf2      	blt.n	80156b2 <__swhatbuf_r+0x12>
 80156cc:	9a01      	ldr	r2, [sp, #4]
 80156ce:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80156d2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80156d6:	425a      	negs	r2, r3
 80156d8:	415a      	adcs	r2, r3
 80156da:	602a      	str	r2, [r5, #0]
 80156dc:	e7ee      	b.n	80156bc <__swhatbuf_r+0x1c>
 80156de:	2340      	movs	r3, #64	; 0x40
 80156e0:	2000      	movs	r0, #0
 80156e2:	6023      	str	r3, [r4, #0]
 80156e4:	b016      	add	sp, #88	; 0x58
 80156e6:	bd70      	pop	{r4, r5, r6, pc}

080156e8 <__smakebuf_r>:
 80156e8:	898b      	ldrh	r3, [r1, #12]
 80156ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80156ec:	079d      	lsls	r5, r3, #30
 80156ee:	4606      	mov	r6, r0
 80156f0:	460c      	mov	r4, r1
 80156f2:	d507      	bpl.n	8015704 <__smakebuf_r+0x1c>
 80156f4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80156f8:	6023      	str	r3, [r4, #0]
 80156fa:	6123      	str	r3, [r4, #16]
 80156fc:	2301      	movs	r3, #1
 80156fe:	6163      	str	r3, [r4, #20]
 8015700:	b002      	add	sp, #8
 8015702:	bd70      	pop	{r4, r5, r6, pc}
 8015704:	ab01      	add	r3, sp, #4
 8015706:	466a      	mov	r2, sp
 8015708:	f7ff ffca 	bl	80156a0 <__swhatbuf_r>
 801570c:	9900      	ldr	r1, [sp, #0]
 801570e:	4605      	mov	r5, r0
 8015710:	4630      	mov	r0, r6
 8015712:	f7ff f90f 	bl	8014934 <_malloc_r>
 8015716:	b948      	cbnz	r0, 801572c <__smakebuf_r+0x44>
 8015718:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801571c:	059a      	lsls	r2, r3, #22
 801571e:	d4ef      	bmi.n	8015700 <__smakebuf_r+0x18>
 8015720:	f023 0303 	bic.w	r3, r3, #3
 8015724:	f043 0302 	orr.w	r3, r3, #2
 8015728:	81a3      	strh	r3, [r4, #12]
 801572a:	e7e3      	b.n	80156f4 <__smakebuf_r+0xc>
 801572c:	4b0d      	ldr	r3, [pc, #52]	; (8015764 <__smakebuf_r+0x7c>)
 801572e:	62b3      	str	r3, [r6, #40]	; 0x28
 8015730:	89a3      	ldrh	r3, [r4, #12]
 8015732:	6020      	str	r0, [r4, #0]
 8015734:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015738:	81a3      	strh	r3, [r4, #12]
 801573a:	9b00      	ldr	r3, [sp, #0]
 801573c:	6163      	str	r3, [r4, #20]
 801573e:	9b01      	ldr	r3, [sp, #4]
 8015740:	6120      	str	r0, [r4, #16]
 8015742:	b15b      	cbz	r3, 801575c <__smakebuf_r+0x74>
 8015744:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015748:	4630      	mov	r0, r6
 801574a:	f000 f8a7 	bl	801589c <_isatty_r>
 801574e:	b128      	cbz	r0, 801575c <__smakebuf_r+0x74>
 8015750:	89a3      	ldrh	r3, [r4, #12]
 8015752:	f023 0303 	bic.w	r3, r3, #3
 8015756:	f043 0301 	orr.w	r3, r3, #1
 801575a:	81a3      	strh	r3, [r4, #12]
 801575c:	89a0      	ldrh	r0, [r4, #12]
 801575e:	4305      	orrs	r5, r0
 8015760:	81a5      	strh	r5, [r4, #12]
 8015762:	e7cd      	b.n	8015700 <__smakebuf_r+0x18>
 8015764:	080146b9 	.word	0x080146b9

08015768 <__malloc_lock>:
 8015768:	4801      	ldr	r0, [pc, #4]	; (8015770 <__malloc_lock+0x8>)
 801576a:	f7ff b889 	b.w	8014880 <__retarget_lock_acquire_recursive>
 801576e:	bf00      	nop
 8015770:	200072c4 	.word	0x200072c4

08015774 <__malloc_unlock>:
 8015774:	4801      	ldr	r0, [pc, #4]	; (801577c <__malloc_unlock+0x8>)
 8015776:	f7ff b884 	b.w	8014882 <__retarget_lock_release_recursive>
 801577a:	bf00      	nop
 801577c:	200072c4 	.word	0x200072c4

08015780 <_realloc_r>:
 8015780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015782:	4607      	mov	r7, r0
 8015784:	4614      	mov	r4, r2
 8015786:	460e      	mov	r6, r1
 8015788:	b921      	cbnz	r1, 8015794 <_realloc_r+0x14>
 801578a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801578e:	4611      	mov	r1, r2
 8015790:	f7ff b8d0 	b.w	8014934 <_malloc_r>
 8015794:	b922      	cbnz	r2, 80157a0 <_realloc_r+0x20>
 8015796:	f7ff f87d 	bl	8014894 <_free_r>
 801579a:	4625      	mov	r5, r4
 801579c:	4628      	mov	r0, r5
 801579e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80157a0:	f000 f88c 	bl	80158bc <_malloc_usable_size_r>
 80157a4:	42a0      	cmp	r0, r4
 80157a6:	d20f      	bcs.n	80157c8 <_realloc_r+0x48>
 80157a8:	4621      	mov	r1, r4
 80157aa:	4638      	mov	r0, r7
 80157ac:	f7ff f8c2 	bl	8014934 <_malloc_r>
 80157b0:	4605      	mov	r5, r0
 80157b2:	2800      	cmp	r0, #0
 80157b4:	d0f2      	beq.n	801579c <_realloc_r+0x1c>
 80157b6:	4631      	mov	r1, r6
 80157b8:	4622      	mov	r2, r4
 80157ba:	f7fe fe93 	bl	80144e4 <memcpy>
 80157be:	4631      	mov	r1, r6
 80157c0:	4638      	mov	r0, r7
 80157c2:	f7ff f867 	bl	8014894 <_free_r>
 80157c6:	e7e9      	b.n	801579c <_realloc_r+0x1c>
 80157c8:	4635      	mov	r5, r6
 80157ca:	e7e7      	b.n	801579c <_realloc_r+0x1c>

080157cc <_read_r>:
 80157cc:	b538      	push	{r3, r4, r5, lr}
 80157ce:	4d07      	ldr	r5, [pc, #28]	; (80157ec <_read_r+0x20>)
 80157d0:	4604      	mov	r4, r0
 80157d2:	4608      	mov	r0, r1
 80157d4:	4611      	mov	r1, r2
 80157d6:	2200      	movs	r2, #0
 80157d8:	602a      	str	r2, [r5, #0]
 80157da:	461a      	mov	r2, r3
 80157dc:	f7eb fec2 	bl	8001564 <_read>
 80157e0:	1c43      	adds	r3, r0, #1
 80157e2:	d102      	bne.n	80157ea <_read_r+0x1e>
 80157e4:	682b      	ldr	r3, [r5, #0]
 80157e6:	b103      	cbz	r3, 80157ea <_read_r+0x1e>
 80157e8:	6023      	str	r3, [r4, #0]
 80157ea:	bd38      	pop	{r3, r4, r5, pc}
 80157ec:	200072bc 	.word	0x200072bc

080157f0 <_raise_r>:
 80157f0:	291f      	cmp	r1, #31
 80157f2:	b538      	push	{r3, r4, r5, lr}
 80157f4:	4604      	mov	r4, r0
 80157f6:	460d      	mov	r5, r1
 80157f8:	d904      	bls.n	8015804 <_raise_r+0x14>
 80157fa:	2316      	movs	r3, #22
 80157fc:	6003      	str	r3, [r0, #0]
 80157fe:	f04f 30ff 	mov.w	r0, #4294967295
 8015802:	bd38      	pop	{r3, r4, r5, pc}
 8015804:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8015806:	b112      	cbz	r2, 801580e <_raise_r+0x1e>
 8015808:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801580c:	b94b      	cbnz	r3, 8015822 <_raise_r+0x32>
 801580e:	4620      	mov	r0, r4
 8015810:	f000 f830 	bl	8015874 <_getpid_r>
 8015814:	462a      	mov	r2, r5
 8015816:	4601      	mov	r1, r0
 8015818:	4620      	mov	r0, r4
 801581a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801581e:	f000 b817 	b.w	8015850 <_kill_r>
 8015822:	2b01      	cmp	r3, #1
 8015824:	d00a      	beq.n	801583c <_raise_r+0x4c>
 8015826:	1c59      	adds	r1, r3, #1
 8015828:	d103      	bne.n	8015832 <_raise_r+0x42>
 801582a:	2316      	movs	r3, #22
 801582c:	6003      	str	r3, [r0, #0]
 801582e:	2001      	movs	r0, #1
 8015830:	e7e7      	b.n	8015802 <_raise_r+0x12>
 8015832:	2400      	movs	r4, #0
 8015834:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8015838:	4628      	mov	r0, r5
 801583a:	4798      	blx	r3
 801583c:	2000      	movs	r0, #0
 801583e:	e7e0      	b.n	8015802 <_raise_r+0x12>

08015840 <raise>:
 8015840:	4b02      	ldr	r3, [pc, #8]	; (801584c <raise+0xc>)
 8015842:	4601      	mov	r1, r0
 8015844:	6818      	ldr	r0, [r3, #0]
 8015846:	f7ff bfd3 	b.w	80157f0 <_raise_r>
 801584a:	bf00      	nop
 801584c:	20000014 	.word	0x20000014

08015850 <_kill_r>:
 8015850:	b538      	push	{r3, r4, r5, lr}
 8015852:	4d07      	ldr	r5, [pc, #28]	; (8015870 <_kill_r+0x20>)
 8015854:	2300      	movs	r3, #0
 8015856:	4604      	mov	r4, r0
 8015858:	4608      	mov	r0, r1
 801585a:	4611      	mov	r1, r2
 801585c:	602b      	str	r3, [r5, #0]
 801585e:	f7eb fe65 	bl	800152c <_kill>
 8015862:	1c43      	adds	r3, r0, #1
 8015864:	d102      	bne.n	801586c <_kill_r+0x1c>
 8015866:	682b      	ldr	r3, [r5, #0]
 8015868:	b103      	cbz	r3, 801586c <_kill_r+0x1c>
 801586a:	6023      	str	r3, [r4, #0]
 801586c:	bd38      	pop	{r3, r4, r5, pc}
 801586e:	bf00      	nop
 8015870:	200072bc 	.word	0x200072bc

08015874 <_getpid_r>:
 8015874:	f7eb be52 	b.w	800151c <_getpid>

08015878 <_fstat_r>:
 8015878:	b538      	push	{r3, r4, r5, lr}
 801587a:	4d07      	ldr	r5, [pc, #28]	; (8015898 <_fstat_r+0x20>)
 801587c:	2300      	movs	r3, #0
 801587e:	4604      	mov	r4, r0
 8015880:	4608      	mov	r0, r1
 8015882:	4611      	mov	r1, r2
 8015884:	602b      	str	r3, [r5, #0]
 8015886:	f7eb fe96 	bl	80015b6 <_fstat>
 801588a:	1c43      	adds	r3, r0, #1
 801588c:	d102      	bne.n	8015894 <_fstat_r+0x1c>
 801588e:	682b      	ldr	r3, [r5, #0]
 8015890:	b103      	cbz	r3, 8015894 <_fstat_r+0x1c>
 8015892:	6023      	str	r3, [r4, #0]
 8015894:	bd38      	pop	{r3, r4, r5, pc}
 8015896:	bf00      	nop
 8015898:	200072bc 	.word	0x200072bc

0801589c <_isatty_r>:
 801589c:	b538      	push	{r3, r4, r5, lr}
 801589e:	4d06      	ldr	r5, [pc, #24]	; (80158b8 <_isatty_r+0x1c>)
 80158a0:	2300      	movs	r3, #0
 80158a2:	4604      	mov	r4, r0
 80158a4:	4608      	mov	r0, r1
 80158a6:	602b      	str	r3, [r5, #0]
 80158a8:	f7eb fe95 	bl	80015d6 <_isatty>
 80158ac:	1c43      	adds	r3, r0, #1
 80158ae:	d102      	bne.n	80158b6 <_isatty_r+0x1a>
 80158b0:	682b      	ldr	r3, [r5, #0]
 80158b2:	b103      	cbz	r3, 80158b6 <_isatty_r+0x1a>
 80158b4:	6023      	str	r3, [r4, #0]
 80158b6:	bd38      	pop	{r3, r4, r5, pc}
 80158b8:	200072bc 	.word	0x200072bc

080158bc <_malloc_usable_size_r>:
 80158bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80158c0:	1f18      	subs	r0, r3, #4
 80158c2:	2b00      	cmp	r3, #0
 80158c4:	bfbc      	itt	lt
 80158c6:	580b      	ldrlt	r3, [r1, r0]
 80158c8:	18c0      	addlt	r0, r0, r3
 80158ca:	4770      	bx	lr

080158cc <_init>:
 80158cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80158ce:	bf00      	nop
 80158d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80158d2:	bc08      	pop	{r3}
 80158d4:	469e      	mov	lr, r3
 80158d6:	4770      	bx	lr

080158d8 <_fini>:
 80158d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80158da:	bf00      	nop
 80158dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80158de:	bc08      	pop	{r3}
 80158e0:	469e      	mov	lr, r3
 80158e2:	4770      	bx	lr
