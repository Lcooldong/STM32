
1.Blink_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000e68  08100298  08100298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08101100  08101100  00002100  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08101110  08101110  00002110  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  08101114  08101114  00002114  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         00000010  10000000  08101118  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000020  10000010  08101128  00003010  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  10000030  08101128  00003030  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00003010  2**0
                  CONTENTS, READONLY
  9 .debug_info   00007223  00000000  00000000  00003040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0000153d  00000000  00000000  0000a263  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000708  00000000  00000000  0000b7a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 00000524  00000000  00000000  0000bea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0003d0a4  00000000  00000000  0000c3cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00008812  00000000  00000000  00049470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0018ab9d  00000000  00000000  00051c82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  001dc81f  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001a78  00000000  00000000  001dc864  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 0000004c  00000000  00000000  001de2dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08100298 <__do_global_dtors_aux>:
 8100298:	b510      	push	{r4, lr}
 810029a:	4c05      	ldr	r4, [pc, #20]	@ (81002b0 <__do_global_dtors_aux+0x18>)
 810029c:	7823      	ldrb	r3, [r4, #0]
 810029e:	b933      	cbnz	r3, 81002ae <__do_global_dtors_aux+0x16>
 81002a0:	4b04      	ldr	r3, [pc, #16]	@ (81002b4 <__do_global_dtors_aux+0x1c>)
 81002a2:	b113      	cbz	r3, 81002aa <__do_global_dtors_aux+0x12>
 81002a4:	4804      	ldr	r0, [pc, #16]	@ (81002b8 <__do_global_dtors_aux+0x20>)
 81002a6:	f3af 8000 	nop.w
 81002aa:	2301      	movs	r3, #1
 81002ac:	7023      	strb	r3, [r4, #0]
 81002ae:	bd10      	pop	{r4, pc}
 81002b0:	10000010 	.word	0x10000010
 81002b4:	00000000 	.word	0x00000000
 81002b8:	081010e8 	.word	0x081010e8

081002bc <frame_dummy>:
 81002bc:	b508      	push	{r3, lr}
 81002be:	4b03      	ldr	r3, [pc, #12]	@ (81002cc <frame_dummy+0x10>)
 81002c0:	b11b      	cbz	r3, 81002ca <frame_dummy+0xe>
 81002c2:	4903      	ldr	r1, [pc, #12]	@ (81002d0 <frame_dummy+0x14>)
 81002c4:	4803      	ldr	r0, [pc, #12]	@ (81002d4 <frame_dummy+0x18>)
 81002c6:	f3af 8000 	nop.w
 81002ca:	bd08      	pop	{r3, pc}
 81002cc:	00000000 	.word	0x00000000
 81002d0:	10000014 	.word	0x10000014
 81002d4:	081010e8 	.word	0x081010e8

081002d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 81002d8:	b480      	push	{r7}
 81002da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 81002dc:	4b09      	ldr	r3, [pc, #36]	@ (8100304 <SystemInit+0x2c>)
 81002de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 81002e2:	4a08      	ldr	r2, [pc, #32]	@ (8100304 <SystemInit+0x2c>)
 81002e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 81002e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 81002ec:	4b05      	ldr	r3, [pc, #20]	@ (8100304 <SystemInit+0x2c>)
 81002ee:	691b      	ldr	r3, [r3, #16]
 81002f0:	4a04      	ldr	r2, [pc, #16]	@ (8100304 <SystemInit+0x2c>)
 81002f2:	f043 0310 	orr.w	r3, r3, #16
 81002f6:	6113      	str	r3, [r2, #16]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 81002f8:	bf00      	nop
 81002fa:	46bd      	mov	sp, r7
 81002fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100300:	4770      	bx	lr
 8100302:	bf00      	nop
 8100304:	e000ed00 	.word	0xe000ed00

08100308 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8100308:	b580      	push	{r7, lr}
 810030a:	b086      	sub	sp, #24
 810030c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 810030e:	1d3b      	adds	r3, r7, #4
 8100310:	2200      	movs	r2, #0
 8100312:	601a      	str	r2, [r3, #0]
 8100314:	605a      	str	r2, [r3, #4]
 8100316:	609a      	str	r2, [r3, #8]
 8100318:	60da      	str	r2, [r3, #12]
 810031a:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 810031c:	4b13      	ldr	r3, [pc, #76]	@ (810036c <MX_GPIO_Init+0x64>)
 810031e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100322:	4a12      	ldr	r2, [pc, #72]	@ (810036c <MX_GPIO_Init+0x64>)
 8100324:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8100328:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810032c:	4b0f      	ldr	r3, [pc, #60]	@ (810036c <MX_GPIO_Init+0x64>)
 810032e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100332:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8100336:	603b      	str	r3, [r7, #0]
 8100338:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin, GPIO_PIN_RESET);
 810033a:	2200      	movs	r2, #0
 810033c:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8100340:	480b      	ldr	r0, [pc, #44]	@ (8100370 <MX_GPIO_Init+0x68>)
 8100342:	f000 fc65 	bl	8100c10 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PIPin PIPin PIPin PIPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin;
 8100346:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 810034a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 810034c:	2301      	movs	r3, #1
 810034e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100350:	2300      	movs	r3, #0
 8100352:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8100354:	2300      	movs	r3, #0
 8100356:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8100358:	1d3b      	adds	r3, r7, #4
 810035a:	4619      	mov	r1, r3
 810035c:	4804      	ldr	r0, [pc, #16]	@ (8100370 <MX_GPIO_Init+0x68>)
 810035e:	f000 faa7 	bl	81008b0 <HAL_GPIO_Init>

}
 8100362:	bf00      	nop
 8100364:	3718      	adds	r7, #24
 8100366:	46bd      	mov	sp, r7
 8100368:	bd80      	pop	{r7, pc}
 810036a:	bf00      	nop
 810036c:	58024400 	.word	0x58024400
 8100370:	58022000 	.word	0x58022000

08100374 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8100374:	b580      	push	{r7, lr}
 8100376:	b082      	sub	sp, #8
 8100378:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 810037a:	4b27      	ldr	r3, [pc, #156]	@ (8100418 <main+0xa4>)
 810037c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100380:	4a25      	ldr	r2, [pc, #148]	@ (8100418 <main+0xa4>)
 8100382:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8100386:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810038a:	4b23      	ldr	r3, [pc, #140]	@ (8100418 <main+0xa4>)
 810038c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100390:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8100394:	607b      	str	r3, [r7, #4]
 8100396:	687b      	ldr	r3, [r7, #4]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100398:	2001      	movs	r0, #1
 810039a:	f000 fc6d 	bl	8100c78 <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 810039e:	f000 fcf7 	bl	8100d90 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 81003a2:	2201      	movs	r2, #1
 81003a4:	2102      	movs	r1, #2
 81003a6:	2000      	movs	r0, #0
 81003a8:	f000 fc78 	bl	8100c9c <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 81003ac:	4b1b      	ldr	r3, [pc, #108]	@ (810041c <main+0xa8>)
 81003ae:	681b      	ldr	r3, [r3, #0]
 81003b0:	091b      	lsrs	r3, r3, #4
 81003b2:	f003 030f 	and.w	r3, r3, #15
 81003b6:	2b07      	cmp	r3, #7
 81003b8:	d108      	bne.n	81003cc <main+0x58>
 81003ba:	4b19      	ldr	r3, [pc, #100]	@ (8100420 <main+0xac>)
 81003bc:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 81003c0:	4a17      	ldr	r2, [pc, #92]	@ (8100420 <main+0xac>)
 81003c2:	f043 0301 	orr.w	r3, r3, #1
 81003c6:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104
 81003ca:	e007      	b.n	81003dc <main+0x68>
 81003cc:	4b14      	ldr	r3, [pc, #80]	@ (8100420 <main+0xac>)
 81003ce:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 81003d2:	4a13      	ldr	r2, [pc, #76]	@ (8100420 <main+0xac>)
 81003d4:	f043 0301 	orr.w	r3, r3, #1
 81003d8:	f8c2 3114 	str.w	r3, [r2, #276]	@ 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 81003dc:	f000 f898 	bl	8100510 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 81003e0:	f7ff ff92 	bl	8100308 <MX_GPIO_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_12);
 81003e4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 81003e8:	480e      	ldr	r0, [pc, #56]	@ (8100424 <main+0xb0>)
 81003ea:	f000 fc2a 	bl	8100c42 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_13);
 81003ee:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 81003f2:	480c      	ldr	r0, [pc, #48]	@ (8100424 <main+0xb0>)
 81003f4:	f000 fc25 	bl	8100c42 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_14);
 81003f8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 81003fc:	4809      	ldr	r0, [pc, #36]	@ (8100424 <main+0xb0>)
 81003fe:	f000 fc20 	bl	8100c42 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_15);
 8100402:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8100406:	4807      	ldr	r0, [pc, #28]	@ (8100424 <main+0xb0>)
 8100408:	f000 fc1b 	bl	8100c42 <HAL_GPIO_TogglePin>

	  HAL_Delay(500);
 810040c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8100410:	f000 f932 	bl	8100678 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_12);
 8100414:	bf00      	nop
 8100416:	e7e5      	b.n	81003e4 <main+0x70>
 8100418:	58024400 	.word	0x58024400
 810041c:	e000ed00 	.word	0xe000ed00
 8100420:	58026400 	.word	0x58026400
 8100424:	58022000 	.word	0x58022000

08100428 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8100428:	b480      	push	{r7}
 810042a:	b083      	sub	sp, #12
 810042c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 810042e:	4b0a      	ldr	r3, [pc, #40]	@ (8100458 <HAL_MspInit+0x30>)
 8100430:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8100434:	4a08      	ldr	r2, [pc, #32]	@ (8100458 <HAL_MspInit+0x30>)
 8100436:	f043 0302 	orr.w	r3, r3, #2
 810043a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 810043e:	4b06      	ldr	r3, [pc, #24]	@ (8100458 <HAL_MspInit+0x30>)
 8100440:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8100444:	f003 0302 	and.w	r3, r3, #2
 8100448:	607b      	str	r3, [r7, #4]
 810044a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 810044c:	bf00      	nop
 810044e:	370c      	adds	r7, #12
 8100450:	46bd      	mov	sp, r7
 8100452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100456:	4770      	bx	lr
 8100458:	58024400 	.word	0x58024400

0810045c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 810045c:	b480      	push	{r7}
 810045e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8100460:	bf00      	nop
 8100462:	e7fd      	b.n	8100460 <NMI_Handler+0x4>

08100464 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8100464:	b480      	push	{r7}
 8100466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8100468:	bf00      	nop
 810046a:	e7fd      	b.n	8100468 <HardFault_Handler+0x4>

0810046c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 810046c:	b480      	push	{r7}
 810046e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8100470:	bf00      	nop
 8100472:	e7fd      	b.n	8100470 <MemManage_Handler+0x4>

08100474 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8100474:	b480      	push	{r7}
 8100476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8100478:	bf00      	nop
 810047a:	e7fd      	b.n	8100478 <BusFault_Handler+0x4>

0810047c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 810047c:	b480      	push	{r7}
 810047e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8100480:	bf00      	nop
 8100482:	e7fd      	b.n	8100480 <UsageFault_Handler+0x4>

08100484 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8100484:	b480      	push	{r7}
 8100486:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8100488:	bf00      	nop
 810048a:	46bd      	mov	sp, r7
 810048c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100490:	4770      	bx	lr

08100492 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8100492:	b480      	push	{r7}
 8100494:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8100496:	bf00      	nop
 8100498:	46bd      	mov	sp, r7
 810049a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810049e:	4770      	bx	lr

081004a0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 81004a0:	b480      	push	{r7}
 81004a2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 81004a4:	bf00      	nop
 81004a6:	46bd      	mov	sp, r7
 81004a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81004ac:	4770      	bx	lr

081004ae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 81004ae:	b580      	push	{r7, lr}
 81004b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 81004b2:	f000 f8c1 	bl	8100638 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 81004b6:	bf00      	nop
 81004b8:	bd80      	pop	{r7, pc}
	...

081004bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 81004bc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 81004f4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 81004c0:	f7ff ff0a 	bl	81002d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 81004c4:	480c      	ldr	r0, [pc, #48]	@ (81004f8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 81004c6:	490d      	ldr	r1, [pc, #52]	@ (81004fc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 81004c8:	4a0d      	ldr	r2, [pc, #52]	@ (8100500 <LoopFillZerobss+0x1a>)
  movs r3, #0
 81004ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 81004cc:	e002      	b.n	81004d4 <LoopCopyDataInit>

081004ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 81004ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 81004d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 81004d2:	3304      	adds	r3, #4

081004d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 81004d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 81004d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 81004d8:	d3f9      	bcc.n	81004ce <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 81004da:	4a0a      	ldr	r2, [pc, #40]	@ (8100504 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 81004dc:	4c0a      	ldr	r4, [pc, #40]	@ (8100508 <LoopFillZerobss+0x22>)
  movs r3, #0
 81004de:	2300      	movs	r3, #0
  b LoopFillZerobss
 81004e0:	e001      	b.n	81004e6 <LoopFillZerobss>

081004e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 81004e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 81004e4:	3204      	adds	r2, #4

081004e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 81004e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 81004e8:	d3fb      	bcc.n	81004e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 81004ea:	f000 fdd9 	bl	81010a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 81004ee:	f7ff ff41 	bl	8100374 <main>
  bx  lr
 81004f2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 81004f4:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 81004f8:	10000000 	.word	0x10000000
  ldr r1, =_edata
 81004fc:	10000010 	.word	0x10000010
  ldr r2, =_sidata
 8100500:	08101118 	.word	0x08101118
  ldr r2, =_sbss
 8100504:	10000010 	.word	0x10000010
  ldr r4, =_ebss
 8100508:	10000030 	.word	0x10000030

0810050c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 810050c:	e7fe      	b.n	810050c <ADC3_IRQHandler>
	...

08100510 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8100510:	b580      	push	{r7, lr}
 8100512:	b082      	sub	sp, #8
 8100514:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 8100516:	4b28      	ldr	r3, [pc, #160]	@ (81005b8 <HAL_Init+0xa8>)
 8100518:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 810051c:	4a26      	ldr	r2, [pc, #152]	@ (81005b8 <HAL_Init+0xa8>)
 810051e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8100522:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8100526:	4b24      	ldr	r3, [pc, #144]	@ (81005b8 <HAL_Init+0xa8>)
 8100528:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 810052c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8100530:	603b      	str	r3, [r7, #0]
 8100532:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8100534:	4b21      	ldr	r3, [pc, #132]	@ (81005bc <HAL_Init+0xac>)
 8100536:	681b      	ldr	r3, [r3, #0]
 8100538:	f423 237f 	bic.w	r3, r3, #1044480	@ 0xff000
 810053c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8100540:	4a1e      	ldr	r2, [pc, #120]	@ (81005bc <HAL_Init+0xac>)
 8100542:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8100546:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8100548:	4b1c      	ldr	r3, [pc, #112]	@ (81005bc <HAL_Init+0xac>)
 810054a:	681b      	ldr	r3, [r3, #0]
 810054c:	4a1b      	ldr	r2, [pc, #108]	@ (81005bc <HAL_Init+0xac>)
 810054e:	f043 0301 	orr.w	r3, r3, #1
 8100552:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8100554:	2003      	movs	r0, #3
 8100556:	f000 f965 	bl	8100824 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 810055a:	f000 fc27 	bl	8100dac <HAL_RCC_GetSysClockFreq>
 810055e:	4602      	mov	r2, r0
 8100560:	4b15      	ldr	r3, [pc, #84]	@ (81005b8 <HAL_Init+0xa8>)
 8100562:	699b      	ldr	r3, [r3, #24]
 8100564:	0a1b      	lsrs	r3, r3, #8
 8100566:	f003 030f 	and.w	r3, r3, #15
 810056a:	4915      	ldr	r1, [pc, #84]	@ (81005c0 <HAL_Init+0xb0>)
 810056c:	5ccb      	ldrb	r3, [r1, r3]
 810056e:	f003 031f 	and.w	r3, r3, #31
 8100572:	fa22 f303 	lsr.w	r3, r2, r3
 8100576:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8100578:	4b0f      	ldr	r3, [pc, #60]	@ (81005b8 <HAL_Init+0xa8>)
 810057a:	699b      	ldr	r3, [r3, #24]
 810057c:	f003 030f 	and.w	r3, r3, #15
 8100580:	4a0f      	ldr	r2, [pc, #60]	@ (81005c0 <HAL_Init+0xb0>)
 8100582:	5cd3      	ldrb	r3, [r2, r3]
 8100584:	f003 031f 	and.w	r3, r3, #31
 8100588:	687a      	ldr	r2, [r7, #4]
 810058a:	fa22 f303 	lsr.w	r3, r2, r3
 810058e:	4a0d      	ldr	r2, [pc, #52]	@ (81005c4 <HAL_Init+0xb4>)
 8100590:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8100592:	4b0c      	ldr	r3, [pc, #48]	@ (81005c4 <HAL_Init+0xb4>)
 8100594:	681b      	ldr	r3, [r3, #0]
 8100596:	4a0c      	ldr	r2, [pc, #48]	@ (81005c8 <HAL_Init+0xb8>)
 8100598:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 810059a:	2000      	movs	r0, #0
 810059c:	f000 f816 	bl	81005cc <HAL_InitTick>
 81005a0:	4603      	mov	r3, r0
 81005a2:	2b00      	cmp	r3, #0
 81005a4:	d001      	beq.n	81005aa <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 81005a6:	2301      	movs	r3, #1
 81005a8:	e002      	b.n	81005b0 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 81005aa:	f7ff ff3d 	bl	8100428 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 81005ae:	2300      	movs	r3, #0
}
 81005b0:	4618      	mov	r0, r3
 81005b2:	3708      	adds	r7, #8
 81005b4:	46bd      	mov	sp, r7
 81005b6:	bd80      	pop	{r7, pc}
 81005b8:	58024400 	.word	0x58024400
 81005bc:	40024400 	.word	0x40024400
 81005c0:	08101100 	.word	0x08101100
 81005c4:	10000004 	.word	0x10000004
 81005c8:	10000000 	.word	0x10000000

081005cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 81005cc:	b580      	push	{r7, lr}
 81005ce:	b082      	sub	sp, #8
 81005d0:	af00      	add	r7, sp, #0
 81005d2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 81005d4:	4b15      	ldr	r3, [pc, #84]	@ (810062c <HAL_InitTick+0x60>)
 81005d6:	781b      	ldrb	r3, [r3, #0]
 81005d8:	2b00      	cmp	r3, #0
 81005da:	d101      	bne.n	81005e0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 81005dc:	2301      	movs	r3, #1
 81005de:	e021      	b.n	8100624 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 81005e0:	4b13      	ldr	r3, [pc, #76]	@ (8100630 <HAL_InitTick+0x64>)
 81005e2:	681a      	ldr	r2, [r3, #0]
 81005e4:	4b11      	ldr	r3, [pc, #68]	@ (810062c <HAL_InitTick+0x60>)
 81005e6:	781b      	ldrb	r3, [r3, #0]
 81005e8:	4619      	mov	r1, r3
 81005ea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 81005ee:	fbb3 f3f1 	udiv	r3, r3, r1
 81005f2:	fbb2 f3f3 	udiv	r3, r2, r3
 81005f6:	4618      	mov	r0, r3
 81005f8:	f000 f939 	bl	810086e <HAL_SYSTICK_Config>
 81005fc:	4603      	mov	r3, r0
 81005fe:	2b00      	cmp	r3, #0
 8100600:	d001      	beq.n	8100606 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8100602:	2301      	movs	r3, #1
 8100604:	e00e      	b.n	8100624 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8100606:	687b      	ldr	r3, [r7, #4]
 8100608:	2b0f      	cmp	r3, #15
 810060a:	d80a      	bhi.n	8100622 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 810060c:	2200      	movs	r2, #0
 810060e:	6879      	ldr	r1, [r7, #4]
 8100610:	f04f 30ff 	mov.w	r0, #4294967295
 8100614:	f000 f911 	bl	810083a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8100618:	4a06      	ldr	r2, [pc, #24]	@ (8100634 <HAL_InitTick+0x68>)
 810061a:	687b      	ldr	r3, [r7, #4]
 810061c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 810061e:	2300      	movs	r3, #0
 8100620:	e000      	b.n	8100624 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8100622:	2301      	movs	r3, #1
}
 8100624:	4618      	mov	r0, r3
 8100626:	3708      	adds	r7, #8
 8100628:	46bd      	mov	sp, r7
 810062a:	bd80      	pop	{r7, pc}
 810062c:	1000000c 	.word	0x1000000c
 8100630:	10000000 	.word	0x10000000
 8100634:	10000008 	.word	0x10000008

08100638 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8100638:	b480      	push	{r7}
 810063a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 810063c:	4b06      	ldr	r3, [pc, #24]	@ (8100658 <HAL_IncTick+0x20>)
 810063e:	781b      	ldrb	r3, [r3, #0]
 8100640:	461a      	mov	r2, r3
 8100642:	4b06      	ldr	r3, [pc, #24]	@ (810065c <HAL_IncTick+0x24>)
 8100644:	681b      	ldr	r3, [r3, #0]
 8100646:	4413      	add	r3, r2
 8100648:	4a04      	ldr	r2, [pc, #16]	@ (810065c <HAL_IncTick+0x24>)
 810064a:	6013      	str	r3, [r2, #0]
}
 810064c:	bf00      	nop
 810064e:	46bd      	mov	sp, r7
 8100650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100654:	4770      	bx	lr
 8100656:	bf00      	nop
 8100658:	1000000c 	.word	0x1000000c
 810065c:	1000002c 	.word	0x1000002c

08100660 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8100660:	b480      	push	{r7}
 8100662:	af00      	add	r7, sp, #0
  return uwTick;
 8100664:	4b03      	ldr	r3, [pc, #12]	@ (8100674 <HAL_GetTick+0x14>)
 8100666:	681b      	ldr	r3, [r3, #0]
}
 8100668:	4618      	mov	r0, r3
 810066a:	46bd      	mov	sp, r7
 810066c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100670:	4770      	bx	lr
 8100672:	bf00      	nop
 8100674:	1000002c 	.word	0x1000002c

08100678 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8100678:	b580      	push	{r7, lr}
 810067a:	b084      	sub	sp, #16
 810067c:	af00      	add	r7, sp, #0
 810067e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8100680:	f7ff ffee 	bl	8100660 <HAL_GetTick>
 8100684:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8100686:	687b      	ldr	r3, [r7, #4]
 8100688:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 810068a:	68fb      	ldr	r3, [r7, #12]
 810068c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8100690:	d005      	beq.n	810069e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8100692:	4b0a      	ldr	r3, [pc, #40]	@ (81006bc <HAL_Delay+0x44>)
 8100694:	781b      	ldrb	r3, [r3, #0]
 8100696:	461a      	mov	r2, r3
 8100698:	68fb      	ldr	r3, [r7, #12]
 810069a:	4413      	add	r3, r2
 810069c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 810069e:	bf00      	nop
 81006a0:	f7ff ffde 	bl	8100660 <HAL_GetTick>
 81006a4:	4602      	mov	r2, r0
 81006a6:	68bb      	ldr	r3, [r7, #8]
 81006a8:	1ad3      	subs	r3, r2, r3
 81006aa:	68fa      	ldr	r2, [r7, #12]
 81006ac:	429a      	cmp	r2, r3
 81006ae:	d8f7      	bhi.n	81006a0 <HAL_Delay+0x28>
  {
  }
}
 81006b0:	bf00      	nop
 81006b2:	bf00      	nop
 81006b4:	3710      	adds	r7, #16
 81006b6:	46bd      	mov	sp, r7
 81006b8:	bd80      	pop	{r7, pc}
 81006ba:	bf00      	nop
 81006bc:	1000000c 	.word	0x1000000c

081006c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 81006c0:	b480      	push	{r7}
 81006c2:	b085      	sub	sp, #20
 81006c4:	af00      	add	r7, sp, #0
 81006c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 81006c8:	687b      	ldr	r3, [r7, #4]
 81006ca:	f003 0307 	and.w	r3, r3, #7
 81006ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 81006d0:	4b0c      	ldr	r3, [pc, #48]	@ (8100704 <__NVIC_SetPriorityGrouping+0x44>)
 81006d2:	68db      	ldr	r3, [r3, #12]
 81006d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 81006d6:	68ba      	ldr	r2, [r7, #8]
 81006d8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 81006dc:	4013      	ands	r3, r2
 81006de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 81006e0:	68fb      	ldr	r3, [r7, #12]
 81006e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 81006e4:	68bb      	ldr	r3, [r7, #8]
 81006e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 81006e8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 81006ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81006f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 81006f2:	4a04      	ldr	r2, [pc, #16]	@ (8100704 <__NVIC_SetPriorityGrouping+0x44>)
 81006f4:	68bb      	ldr	r3, [r7, #8]
 81006f6:	60d3      	str	r3, [r2, #12]
}
 81006f8:	bf00      	nop
 81006fa:	3714      	adds	r7, #20
 81006fc:	46bd      	mov	sp, r7
 81006fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100702:	4770      	bx	lr
 8100704:	e000ed00 	.word	0xe000ed00

08100708 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8100708:	b480      	push	{r7}
 810070a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 810070c:	4b04      	ldr	r3, [pc, #16]	@ (8100720 <__NVIC_GetPriorityGrouping+0x18>)
 810070e:	68db      	ldr	r3, [r3, #12]
 8100710:	0a1b      	lsrs	r3, r3, #8
 8100712:	f003 0307 	and.w	r3, r3, #7
}
 8100716:	4618      	mov	r0, r3
 8100718:	46bd      	mov	sp, r7
 810071a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810071e:	4770      	bx	lr
 8100720:	e000ed00 	.word	0xe000ed00

08100724 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8100724:	b480      	push	{r7}
 8100726:	b083      	sub	sp, #12
 8100728:	af00      	add	r7, sp, #0
 810072a:	4603      	mov	r3, r0
 810072c:	6039      	str	r1, [r7, #0]
 810072e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8100730:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100734:	2b00      	cmp	r3, #0
 8100736:	db0a      	blt.n	810074e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8100738:	683b      	ldr	r3, [r7, #0]
 810073a:	b2da      	uxtb	r2, r3
 810073c:	490c      	ldr	r1, [pc, #48]	@ (8100770 <__NVIC_SetPriority+0x4c>)
 810073e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100742:	0112      	lsls	r2, r2, #4
 8100744:	b2d2      	uxtb	r2, r2
 8100746:	440b      	add	r3, r1
 8100748:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 810074c:	e00a      	b.n	8100764 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 810074e:	683b      	ldr	r3, [r7, #0]
 8100750:	b2da      	uxtb	r2, r3
 8100752:	4908      	ldr	r1, [pc, #32]	@ (8100774 <__NVIC_SetPriority+0x50>)
 8100754:	88fb      	ldrh	r3, [r7, #6]
 8100756:	f003 030f 	and.w	r3, r3, #15
 810075a:	3b04      	subs	r3, #4
 810075c:	0112      	lsls	r2, r2, #4
 810075e:	b2d2      	uxtb	r2, r2
 8100760:	440b      	add	r3, r1
 8100762:	761a      	strb	r2, [r3, #24]
}
 8100764:	bf00      	nop
 8100766:	370c      	adds	r7, #12
 8100768:	46bd      	mov	sp, r7
 810076a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810076e:	4770      	bx	lr
 8100770:	e000e100 	.word	0xe000e100
 8100774:	e000ed00 	.word	0xe000ed00

08100778 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8100778:	b480      	push	{r7}
 810077a:	b089      	sub	sp, #36	@ 0x24
 810077c:	af00      	add	r7, sp, #0
 810077e:	60f8      	str	r0, [r7, #12]
 8100780:	60b9      	str	r1, [r7, #8]
 8100782:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8100784:	68fb      	ldr	r3, [r7, #12]
 8100786:	f003 0307 	and.w	r3, r3, #7
 810078a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 810078c:	69fb      	ldr	r3, [r7, #28]
 810078e:	f1c3 0307 	rsb	r3, r3, #7
 8100792:	2b04      	cmp	r3, #4
 8100794:	bf28      	it	cs
 8100796:	2304      	movcs	r3, #4
 8100798:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 810079a:	69fb      	ldr	r3, [r7, #28]
 810079c:	3304      	adds	r3, #4
 810079e:	2b06      	cmp	r3, #6
 81007a0:	d902      	bls.n	81007a8 <NVIC_EncodePriority+0x30>
 81007a2:	69fb      	ldr	r3, [r7, #28]
 81007a4:	3b03      	subs	r3, #3
 81007a6:	e000      	b.n	81007aa <NVIC_EncodePriority+0x32>
 81007a8:	2300      	movs	r3, #0
 81007aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 81007ac:	f04f 32ff 	mov.w	r2, #4294967295
 81007b0:	69bb      	ldr	r3, [r7, #24]
 81007b2:	fa02 f303 	lsl.w	r3, r2, r3
 81007b6:	43da      	mvns	r2, r3
 81007b8:	68bb      	ldr	r3, [r7, #8]
 81007ba:	401a      	ands	r2, r3
 81007bc:	697b      	ldr	r3, [r7, #20]
 81007be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 81007c0:	f04f 31ff 	mov.w	r1, #4294967295
 81007c4:	697b      	ldr	r3, [r7, #20]
 81007c6:	fa01 f303 	lsl.w	r3, r1, r3
 81007ca:	43d9      	mvns	r1, r3
 81007cc:	687b      	ldr	r3, [r7, #4]
 81007ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 81007d0:	4313      	orrs	r3, r2
         );
}
 81007d2:	4618      	mov	r0, r3
 81007d4:	3724      	adds	r7, #36	@ 0x24
 81007d6:	46bd      	mov	sp, r7
 81007d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81007dc:	4770      	bx	lr
	...

081007e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 81007e0:	b580      	push	{r7, lr}
 81007e2:	b082      	sub	sp, #8
 81007e4:	af00      	add	r7, sp, #0
 81007e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 81007e8:	687b      	ldr	r3, [r7, #4]
 81007ea:	3b01      	subs	r3, #1
 81007ec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 81007f0:	d301      	bcc.n	81007f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 81007f2:	2301      	movs	r3, #1
 81007f4:	e00f      	b.n	8100816 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 81007f6:	4a0a      	ldr	r2, [pc, #40]	@ (8100820 <SysTick_Config+0x40>)
 81007f8:	687b      	ldr	r3, [r7, #4]
 81007fa:	3b01      	subs	r3, #1
 81007fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 81007fe:	210f      	movs	r1, #15
 8100800:	f04f 30ff 	mov.w	r0, #4294967295
 8100804:	f7ff ff8e 	bl	8100724 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8100808:	4b05      	ldr	r3, [pc, #20]	@ (8100820 <SysTick_Config+0x40>)
 810080a:	2200      	movs	r2, #0
 810080c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 810080e:	4b04      	ldr	r3, [pc, #16]	@ (8100820 <SysTick_Config+0x40>)
 8100810:	2207      	movs	r2, #7
 8100812:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8100814:	2300      	movs	r3, #0
}
 8100816:	4618      	mov	r0, r3
 8100818:	3708      	adds	r7, #8
 810081a:	46bd      	mov	sp, r7
 810081c:	bd80      	pop	{r7, pc}
 810081e:	bf00      	nop
 8100820:	e000e010 	.word	0xe000e010

08100824 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8100824:	b580      	push	{r7, lr}
 8100826:	b082      	sub	sp, #8
 8100828:	af00      	add	r7, sp, #0
 810082a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 810082c:	6878      	ldr	r0, [r7, #4]
 810082e:	f7ff ff47 	bl	81006c0 <__NVIC_SetPriorityGrouping>
}
 8100832:	bf00      	nop
 8100834:	3708      	adds	r7, #8
 8100836:	46bd      	mov	sp, r7
 8100838:	bd80      	pop	{r7, pc}

0810083a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 810083a:	b580      	push	{r7, lr}
 810083c:	b086      	sub	sp, #24
 810083e:	af00      	add	r7, sp, #0
 8100840:	4603      	mov	r3, r0
 8100842:	60b9      	str	r1, [r7, #8]
 8100844:	607a      	str	r2, [r7, #4]
 8100846:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8100848:	f7ff ff5e 	bl	8100708 <__NVIC_GetPriorityGrouping>
 810084c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 810084e:	687a      	ldr	r2, [r7, #4]
 8100850:	68b9      	ldr	r1, [r7, #8]
 8100852:	6978      	ldr	r0, [r7, #20]
 8100854:	f7ff ff90 	bl	8100778 <NVIC_EncodePriority>
 8100858:	4602      	mov	r2, r0
 810085a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 810085e:	4611      	mov	r1, r2
 8100860:	4618      	mov	r0, r3
 8100862:	f7ff ff5f 	bl	8100724 <__NVIC_SetPriority>
}
 8100866:	bf00      	nop
 8100868:	3718      	adds	r7, #24
 810086a:	46bd      	mov	sp, r7
 810086c:	bd80      	pop	{r7, pc}

0810086e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 810086e:	b580      	push	{r7, lr}
 8100870:	b082      	sub	sp, #8
 8100872:	af00      	add	r7, sp, #0
 8100874:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8100876:	6878      	ldr	r0, [r7, #4]
 8100878:	f7ff ffb2 	bl	81007e0 <SysTick_Config>
 810087c:	4603      	mov	r3, r0
}
 810087e:	4618      	mov	r0, r3
 8100880:	3708      	adds	r7, #8
 8100882:	46bd      	mov	sp, r7
 8100884:	bd80      	pop	{r7, pc}
	...

08100888 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8100888:	b480      	push	{r7}
 810088a:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 810088c:	4b07      	ldr	r3, [pc, #28]	@ (81008ac <HAL_GetCurrentCPUID+0x24>)
 810088e:	681b      	ldr	r3, [r3, #0]
 8100890:	091b      	lsrs	r3, r3, #4
 8100892:	f003 030f 	and.w	r3, r3, #15
 8100896:	2b07      	cmp	r3, #7
 8100898:	d101      	bne.n	810089e <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 810089a:	2303      	movs	r3, #3
 810089c:	e000      	b.n	81008a0 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 810089e:	2301      	movs	r3, #1
  }
}
 81008a0:	4618      	mov	r0, r3
 81008a2:	46bd      	mov	sp, r7
 81008a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81008a8:	4770      	bx	lr
 81008aa:	bf00      	nop
 81008ac:	e000ed00 	.word	0xe000ed00

081008b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 81008b0:	b480      	push	{r7}
 81008b2:	b089      	sub	sp, #36	@ 0x24
 81008b4:	af00      	add	r7, sp, #0
 81008b6:	6078      	str	r0, [r7, #4]
 81008b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 81008ba:	2300      	movs	r3, #0
 81008bc:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 81008be:	4b89      	ldr	r3, [pc, #548]	@ (8100ae4 <HAL_GPIO_Init+0x234>)
 81008c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 81008c2:	e194      	b.n	8100bee <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 81008c4:	683b      	ldr	r3, [r7, #0]
 81008c6:	681a      	ldr	r2, [r3, #0]
 81008c8:	2101      	movs	r1, #1
 81008ca:	69fb      	ldr	r3, [r7, #28]
 81008cc:	fa01 f303 	lsl.w	r3, r1, r3
 81008d0:	4013      	ands	r3, r2
 81008d2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 81008d4:	693b      	ldr	r3, [r7, #16]
 81008d6:	2b00      	cmp	r3, #0
 81008d8:	f000 8186 	beq.w	8100be8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 81008dc:	683b      	ldr	r3, [r7, #0]
 81008de:	685b      	ldr	r3, [r3, #4]
 81008e0:	f003 0303 	and.w	r3, r3, #3
 81008e4:	2b01      	cmp	r3, #1
 81008e6:	d005      	beq.n	81008f4 <HAL_GPIO_Init+0x44>
 81008e8:	683b      	ldr	r3, [r7, #0]
 81008ea:	685b      	ldr	r3, [r3, #4]
 81008ec:	f003 0303 	and.w	r3, r3, #3
 81008f0:	2b02      	cmp	r3, #2
 81008f2:	d130      	bne.n	8100956 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 81008f4:	687b      	ldr	r3, [r7, #4]
 81008f6:	689b      	ldr	r3, [r3, #8]
 81008f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 81008fa:	69fb      	ldr	r3, [r7, #28]
 81008fc:	005b      	lsls	r3, r3, #1
 81008fe:	2203      	movs	r2, #3
 8100900:	fa02 f303 	lsl.w	r3, r2, r3
 8100904:	43db      	mvns	r3, r3
 8100906:	69ba      	ldr	r2, [r7, #24]
 8100908:	4013      	ands	r3, r2
 810090a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 810090c:	683b      	ldr	r3, [r7, #0]
 810090e:	68da      	ldr	r2, [r3, #12]
 8100910:	69fb      	ldr	r3, [r7, #28]
 8100912:	005b      	lsls	r3, r3, #1
 8100914:	fa02 f303 	lsl.w	r3, r2, r3
 8100918:	69ba      	ldr	r2, [r7, #24]
 810091a:	4313      	orrs	r3, r2
 810091c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 810091e:	687b      	ldr	r3, [r7, #4]
 8100920:	69ba      	ldr	r2, [r7, #24]
 8100922:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8100924:	687b      	ldr	r3, [r7, #4]
 8100926:	685b      	ldr	r3, [r3, #4]
 8100928:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 810092a:	2201      	movs	r2, #1
 810092c:	69fb      	ldr	r3, [r7, #28]
 810092e:	fa02 f303 	lsl.w	r3, r2, r3
 8100932:	43db      	mvns	r3, r3
 8100934:	69ba      	ldr	r2, [r7, #24]
 8100936:	4013      	ands	r3, r2
 8100938:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 810093a:	683b      	ldr	r3, [r7, #0]
 810093c:	685b      	ldr	r3, [r3, #4]
 810093e:	091b      	lsrs	r3, r3, #4
 8100940:	f003 0201 	and.w	r2, r3, #1
 8100944:	69fb      	ldr	r3, [r7, #28]
 8100946:	fa02 f303 	lsl.w	r3, r2, r3
 810094a:	69ba      	ldr	r2, [r7, #24]
 810094c:	4313      	orrs	r3, r2
 810094e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8100950:	687b      	ldr	r3, [r7, #4]
 8100952:	69ba      	ldr	r2, [r7, #24]
 8100954:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8100956:	683b      	ldr	r3, [r7, #0]
 8100958:	685b      	ldr	r3, [r3, #4]
 810095a:	f003 0303 	and.w	r3, r3, #3
 810095e:	2b03      	cmp	r3, #3
 8100960:	d017      	beq.n	8100992 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8100962:	687b      	ldr	r3, [r7, #4]
 8100964:	68db      	ldr	r3, [r3, #12]
 8100966:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8100968:	69fb      	ldr	r3, [r7, #28]
 810096a:	005b      	lsls	r3, r3, #1
 810096c:	2203      	movs	r2, #3
 810096e:	fa02 f303 	lsl.w	r3, r2, r3
 8100972:	43db      	mvns	r3, r3
 8100974:	69ba      	ldr	r2, [r7, #24]
 8100976:	4013      	ands	r3, r2
 8100978:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 810097a:	683b      	ldr	r3, [r7, #0]
 810097c:	689a      	ldr	r2, [r3, #8]
 810097e:	69fb      	ldr	r3, [r7, #28]
 8100980:	005b      	lsls	r3, r3, #1
 8100982:	fa02 f303 	lsl.w	r3, r2, r3
 8100986:	69ba      	ldr	r2, [r7, #24]
 8100988:	4313      	orrs	r3, r2
 810098a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 810098c:	687b      	ldr	r3, [r7, #4]
 810098e:	69ba      	ldr	r2, [r7, #24]
 8100990:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8100992:	683b      	ldr	r3, [r7, #0]
 8100994:	685b      	ldr	r3, [r3, #4]
 8100996:	f003 0303 	and.w	r3, r3, #3
 810099a:	2b02      	cmp	r3, #2
 810099c:	d123      	bne.n	81009e6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 810099e:	69fb      	ldr	r3, [r7, #28]
 81009a0:	08da      	lsrs	r2, r3, #3
 81009a2:	687b      	ldr	r3, [r7, #4]
 81009a4:	3208      	adds	r2, #8
 81009a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 81009aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 81009ac:	69fb      	ldr	r3, [r7, #28]
 81009ae:	f003 0307 	and.w	r3, r3, #7
 81009b2:	009b      	lsls	r3, r3, #2
 81009b4:	220f      	movs	r2, #15
 81009b6:	fa02 f303 	lsl.w	r3, r2, r3
 81009ba:	43db      	mvns	r3, r3
 81009bc:	69ba      	ldr	r2, [r7, #24]
 81009be:	4013      	ands	r3, r2
 81009c0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 81009c2:	683b      	ldr	r3, [r7, #0]
 81009c4:	691a      	ldr	r2, [r3, #16]
 81009c6:	69fb      	ldr	r3, [r7, #28]
 81009c8:	f003 0307 	and.w	r3, r3, #7
 81009cc:	009b      	lsls	r3, r3, #2
 81009ce:	fa02 f303 	lsl.w	r3, r2, r3
 81009d2:	69ba      	ldr	r2, [r7, #24]
 81009d4:	4313      	orrs	r3, r2
 81009d6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 81009d8:	69fb      	ldr	r3, [r7, #28]
 81009da:	08da      	lsrs	r2, r3, #3
 81009dc:	687b      	ldr	r3, [r7, #4]
 81009de:	3208      	adds	r2, #8
 81009e0:	69b9      	ldr	r1, [r7, #24]
 81009e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 81009e6:	687b      	ldr	r3, [r7, #4]
 81009e8:	681b      	ldr	r3, [r3, #0]
 81009ea:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 81009ec:	69fb      	ldr	r3, [r7, #28]
 81009ee:	005b      	lsls	r3, r3, #1
 81009f0:	2203      	movs	r2, #3
 81009f2:	fa02 f303 	lsl.w	r3, r2, r3
 81009f6:	43db      	mvns	r3, r3
 81009f8:	69ba      	ldr	r2, [r7, #24]
 81009fa:	4013      	ands	r3, r2
 81009fc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 81009fe:	683b      	ldr	r3, [r7, #0]
 8100a00:	685b      	ldr	r3, [r3, #4]
 8100a02:	f003 0203 	and.w	r2, r3, #3
 8100a06:	69fb      	ldr	r3, [r7, #28]
 8100a08:	005b      	lsls	r3, r3, #1
 8100a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8100a0e:	69ba      	ldr	r2, [r7, #24]
 8100a10:	4313      	orrs	r3, r2
 8100a12:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8100a14:	687b      	ldr	r3, [r7, #4]
 8100a16:	69ba      	ldr	r2, [r7, #24]
 8100a18:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8100a1a:	683b      	ldr	r3, [r7, #0]
 8100a1c:	685b      	ldr	r3, [r3, #4]
 8100a1e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8100a22:	2b00      	cmp	r3, #0
 8100a24:	f000 80e0 	beq.w	8100be8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8100a28:	4b2f      	ldr	r3, [pc, #188]	@ (8100ae8 <HAL_GPIO_Init+0x238>)
 8100a2a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8100a2e:	4a2e      	ldr	r2, [pc, #184]	@ (8100ae8 <HAL_GPIO_Init+0x238>)
 8100a30:	f043 0302 	orr.w	r3, r3, #2
 8100a34:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8100a38:	4b2b      	ldr	r3, [pc, #172]	@ (8100ae8 <HAL_GPIO_Init+0x238>)
 8100a3a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8100a3e:	f003 0302 	and.w	r3, r3, #2
 8100a42:	60fb      	str	r3, [r7, #12]
 8100a44:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8100a46:	4a29      	ldr	r2, [pc, #164]	@ (8100aec <HAL_GPIO_Init+0x23c>)
 8100a48:	69fb      	ldr	r3, [r7, #28]
 8100a4a:	089b      	lsrs	r3, r3, #2
 8100a4c:	3302      	adds	r3, #2
 8100a4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8100a52:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8100a54:	69fb      	ldr	r3, [r7, #28]
 8100a56:	f003 0303 	and.w	r3, r3, #3
 8100a5a:	009b      	lsls	r3, r3, #2
 8100a5c:	220f      	movs	r2, #15
 8100a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8100a62:	43db      	mvns	r3, r3
 8100a64:	69ba      	ldr	r2, [r7, #24]
 8100a66:	4013      	ands	r3, r2
 8100a68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8100a6a:	687b      	ldr	r3, [r7, #4]
 8100a6c:	4a20      	ldr	r2, [pc, #128]	@ (8100af0 <HAL_GPIO_Init+0x240>)
 8100a6e:	4293      	cmp	r3, r2
 8100a70:	d052      	beq.n	8100b18 <HAL_GPIO_Init+0x268>
 8100a72:	687b      	ldr	r3, [r7, #4]
 8100a74:	4a1f      	ldr	r2, [pc, #124]	@ (8100af4 <HAL_GPIO_Init+0x244>)
 8100a76:	4293      	cmp	r3, r2
 8100a78:	d031      	beq.n	8100ade <HAL_GPIO_Init+0x22e>
 8100a7a:	687b      	ldr	r3, [r7, #4]
 8100a7c:	4a1e      	ldr	r2, [pc, #120]	@ (8100af8 <HAL_GPIO_Init+0x248>)
 8100a7e:	4293      	cmp	r3, r2
 8100a80:	d02b      	beq.n	8100ada <HAL_GPIO_Init+0x22a>
 8100a82:	687b      	ldr	r3, [r7, #4]
 8100a84:	4a1d      	ldr	r2, [pc, #116]	@ (8100afc <HAL_GPIO_Init+0x24c>)
 8100a86:	4293      	cmp	r3, r2
 8100a88:	d025      	beq.n	8100ad6 <HAL_GPIO_Init+0x226>
 8100a8a:	687b      	ldr	r3, [r7, #4]
 8100a8c:	4a1c      	ldr	r2, [pc, #112]	@ (8100b00 <HAL_GPIO_Init+0x250>)
 8100a8e:	4293      	cmp	r3, r2
 8100a90:	d01f      	beq.n	8100ad2 <HAL_GPIO_Init+0x222>
 8100a92:	687b      	ldr	r3, [r7, #4]
 8100a94:	4a1b      	ldr	r2, [pc, #108]	@ (8100b04 <HAL_GPIO_Init+0x254>)
 8100a96:	4293      	cmp	r3, r2
 8100a98:	d019      	beq.n	8100ace <HAL_GPIO_Init+0x21e>
 8100a9a:	687b      	ldr	r3, [r7, #4]
 8100a9c:	4a1a      	ldr	r2, [pc, #104]	@ (8100b08 <HAL_GPIO_Init+0x258>)
 8100a9e:	4293      	cmp	r3, r2
 8100aa0:	d013      	beq.n	8100aca <HAL_GPIO_Init+0x21a>
 8100aa2:	687b      	ldr	r3, [r7, #4]
 8100aa4:	4a19      	ldr	r2, [pc, #100]	@ (8100b0c <HAL_GPIO_Init+0x25c>)
 8100aa6:	4293      	cmp	r3, r2
 8100aa8:	d00d      	beq.n	8100ac6 <HAL_GPIO_Init+0x216>
 8100aaa:	687b      	ldr	r3, [r7, #4]
 8100aac:	4a18      	ldr	r2, [pc, #96]	@ (8100b10 <HAL_GPIO_Init+0x260>)
 8100aae:	4293      	cmp	r3, r2
 8100ab0:	d007      	beq.n	8100ac2 <HAL_GPIO_Init+0x212>
 8100ab2:	687b      	ldr	r3, [r7, #4]
 8100ab4:	4a17      	ldr	r2, [pc, #92]	@ (8100b14 <HAL_GPIO_Init+0x264>)
 8100ab6:	4293      	cmp	r3, r2
 8100ab8:	d101      	bne.n	8100abe <HAL_GPIO_Init+0x20e>
 8100aba:	2309      	movs	r3, #9
 8100abc:	e02d      	b.n	8100b1a <HAL_GPIO_Init+0x26a>
 8100abe:	230a      	movs	r3, #10
 8100ac0:	e02b      	b.n	8100b1a <HAL_GPIO_Init+0x26a>
 8100ac2:	2308      	movs	r3, #8
 8100ac4:	e029      	b.n	8100b1a <HAL_GPIO_Init+0x26a>
 8100ac6:	2307      	movs	r3, #7
 8100ac8:	e027      	b.n	8100b1a <HAL_GPIO_Init+0x26a>
 8100aca:	2306      	movs	r3, #6
 8100acc:	e025      	b.n	8100b1a <HAL_GPIO_Init+0x26a>
 8100ace:	2305      	movs	r3, #5
 8100ad0:	e023      	b.n	8100b1a <HAL_GPIO_Init+0x26a>
 8100ad2:	2304      	movs	r3, #4
 8100ad4:	e021      	b.n	8100b1a <HAL_GPIO_Init+0x26a>
 8100ad6:	2303      	movs	r3, #3
 8100ad8:	e01f      	b.n	8100b1a <HAL_GPIO_Init+0x26a>
 8100ada:	2302      	movs	r3, #2
 8100adc:	e01d      	b.n	8100b1a <HAL_GPIO_Init+0x26a>
 8100ade:	2301      	movs	r3, #1
 8100ae0:	e01b      	b.n	8100b1a <HAL_GPIO_Init+0x26a>
 8100ae2:	bf00      	nop
 8100ae4:	580000c0 	.word	0x580000c0
 8100ae8:	58024400 	.word	0x58024400
 8100aec:	58000400 	.word	0x58000400
 8100af0:	58020000 	.word	0x58020000
 8100af4:	58020400 	.word	0x58020400
 8100af8:	58020800 	.word	0x58020800
 8100afc:	58020c00 	.word	0x58020c00
 8100b00:	58021000 	.word	0x58021000
 8100b04:	58021400 	.word	0x58021400
 8100b08:	58021800 	.word	0x58021800
 8100b0c:	58021c00 	.word	0x58021c00
 8100b10:	58022000 	.word	0x58022000
 8100b14:	58022400 	.word	0x58022400
 8100b18:	2300      	movs	r3, #0
 8100b1a:	69fa      	ldr	r2, [r7, #28]
 8100b1c:	f002 0203 	and.w	r2, r2, #3
 8100b20:	0092      	lsls	r2, r2, #2
 8100b22:	4093      	lsls	r3, r2
 8100b24:	69ba      	ldr	r2, [r7, #24]
 8100b26:	4313      	orrs	r3, r2
 8100b28:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8100b2a:	4938      	ldr	r1, [pc, #224]	@ (8100c0c <HAL_GPIO_Init+0x35c>)
 8100b2c:	69fb      	ldr	r3, [r7, #28]
 8100b2e:	089b      	lsrs	r3, r3, #2
 8100b30:	3302      	adds	r3, #2
 8100b32:	69ba      	ldr	r2, [r7, #24]
 8100b34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8100b38:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8100b3c:	681b      	ldr	r3, [r3, #0]
 8100b3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8100b40:	693b      	ldr	r3, [r7, #16]
 8100b42:	43db      	mvns	r3, r3
 8100b44:	69ba      	ldr	r2, [r7, #24]
 8100b46:	4013      	ands	r3, r2
 8100b48:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8100b4a:	683b      	ldr	r3, [r7, #0]
 8100b4c:	685b      	ldr	r3, [r3, #4]
 8100b4e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8100b52:	2b00      	cmp	r3, #0
 8100b54:	d003      	beq.n	8100b5e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8100b56:	69ba      	ldr	r2, [r7, #24]
 8100b58:	693b      	ldr	r3, [r7, #16]
 8100b5a:	4313      	orrs	r3, r2
 8100b5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8100b5e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8100b62:	69bb      	ldr	r3, [r7, #24]
 8100b64:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8100b66:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8100b6a:	685b      	ldr	r3, [r3, #4]
 8100b6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8100b6e:	693b      	ldr	r3, [r7, #16]
 8100b70:	43db      	mvns	r3, r3
 8100b72:	69ba      	ldr	r2, [r7, #24]
 8100b74:	4013      	ands	r3, r2
 8100b76:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8100b78:	683b      	ldr	r3, [r7, #0]
 8100b7a:	685b      	ldr	r3, [r3, #4]
 8100b7c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8100b80:	2b00      	cmp	r3, #0
 8100b82:	d003      	beq.n	8100b8c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8100b84:	69ba      	ldr	r2, [r7, #24]
 8100b86:	693b      	ldr	r3, [r7, #16]
 8100b88:	4313      	orrs	r3, r2
 8100b8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8100b8c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8100b90:	69bb      	ldr	r3, [r7, #24]
 8100b92:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8100b94:	697b      	ldr	r3, [r7, #20]
 8100b96:	685b      	ldr	r3, [r3, #4]
 8100b98:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8100b9a:	693b      	ldr	r3, [r7, #16]
 8100b9c:	43db      	mvns	r3, r3
 8100b9e:	69ba      	ldr	r2, [r7, #24]
 8100ba0:	4013      	ands	r3, r2
 8100ba2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8100ba4:	683b      	ldr	r3, [r7, #0]
 8100ba6:	685b      	ldr	r3, [r3, #4]
 8100ba8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8100bac:	2b00      	cmp	r3, #0
 8100bae:	d003      	beq.n	8100bb8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8100bb0:	69ba      	ldr	r2, [r7, #24]
 8100bb2:	693b      	ldr	r3, [r7, #16]
 8100bb4:	4313      	orrs	r3, r2
 8100bb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8100bb8:	697b      	ldr	r3, [r7, #20]
 8100bba:	69ba      	ldr	r2, [r7, #24]
 8100bbc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8100bbe:	697b      	ldr	r3, [r7, #20]
 8100bc0:	681b      	ldr	r3, [r3, #0]
 8100bc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8100bc4:	693b      	ldr	r3, [r7, #16]
 8100bc6:	43db      	mvns	r3, r3
 8100bc8:	69ba      	ldr	r2, [r7, #24]
 8100bca:	4013      	ands	r3, r2
 8100bcc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8100bce:	683b      	ldr	r3, [r7, #0]
 8100bd0:	685b      	ldr	r3, [r3, #4]
 8100bd2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8100bd6:	2b00      	cmp	r3, #0
 8100bd8:	d003      	beq.n	8100be2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8100bda:	69ba      	ldr	r2, [r7, #24]
 8100bdc:	693b      	ldr	r3, [r7, #16]
 8100bde:	4313      	orrs	r3, r2
 8100be0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8100be2:	697b      	ldr	r3, [r7, #20]
 8100be4:	69ba      	ldr	r2, [r7, #24]
 8100be6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8100be8:	69fb      	ldr	r3, [r7, #28]
 8100bea:	3301      	adds	r3, #1
 8100bec:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8100bee:	683b      	ldr	r3, [r7, #0]
 8100bf0:	681a      	ldr	r2, [r3, #0]
 8100bf2:	69fb      	ldr	r3, [r7, #28]
 8100bf4:	fa22 f303 	lsr.w	r3, r2, r3
 8100bf8:	2b00      	cmp	r3, #0
 8100bfa:	f47f ae63 	bne.w	81008c4 <HAL_GPIO_Init+0x14>
  }
}
 8100bfe:	bf00      	nop
 8100c00:	bf00      	nop
 8100c02:	3724      	adds	r7, #36	@ 0x24
 8100c04:	46bd      	mov	sp, r7
 8100c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100c0a:	4770      	bx	lr
 8100c0c:	58000400 	.word	0x58000400

08100c10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8100c10:	b480      	push	{r7}
 8100c12:	b083      	sub	sp, #12
 8100c14:	af00      	add	r7, sp, #0
 8100c16:	6078      	str	r0, [r7, #4]
 8100c18:	460b      	mov	r3, r1
 8100c1a:	807b      	strh	r3, [r7, #2]
 8100c1c:	4613      	mov	r3, r2
 8100c1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8100c20:	787b      	ldrb	r3, [r7, #1]
 8100c22:	2b00      	cmp	r3, #0
 8100c24:	d003      	beq.n	8100c2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8100c26:	887a      	ldrh	r2, [r7, #2]
 8100c28:	687b      	ldr	r3, [r7, #4]
 8100c2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8100c2c:	e003      	b.n	8100c36 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8100c2e:	887b      	ldrh	r3, [r7, #2]
 8100c30:	041a      	lsls	r2, r3, #16
 8100c32:	687b      	ldr	r3, [r7, #4]
 8100c34:	619a      	str	r2, [r3, #24]
}
 8100c36:	bf00      	nop
 8100c38:	370c      	adds	r7, #12
 8100c3a:	46bd      	mov	sp, r7
 8100c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100c40:	4770      	bx	lr

08100c42 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8100c42:	b480      	push	{r7}
 8100c44:	b085      	sub	sp, #20
 8100c46:	af00      	add	r7, sp, #0
 8100c48:	6078      	str	r0, [r7, #4]
 8100c4a:	460b      	mov	r3, r1
 8100c4c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8100c4e:	687b      	ldr	r3, [r7, #4]
 8100c50:	695b      	ldr	r3, [r3, #20]
 8100c52:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8100c54:	887a      	ldrh	r2, [r7, #2]
 8100c56:	68fb      	ldr	r3, [r7, #12]
 8100c58:	4013      	ands	r3, r2
 8100c5a:	041a      	lsls	r2, r3, #16
 8100c5c:	68fb      	ldr	r3, [r7, #12]
 8100c5e:	43d9      	mvns	r1, r3
 8100c60:	887b      	ldrh	r3, [r7, #2]
 8100c62:	400b      	ands	r3, r1
 8100c64:	431a      	orrs	r2, r3
 8100c66:	687b      	ldr	r3, [r7, #4]
 8100c68:	619a      	str	r2, [r3, #24]
}
 8100c6a:	bf00      	nop
 8100c6c:	3714      	adds	r7, #20
 8100c6e:	46bd      	mov	sp, r7
 8100c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100c74:	4770      	bx	lr
	...

08100c78 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8100c78:	b480      	push	{r7}
 8100c7a:	b083      	sub	sp, #12
 8100c7c:	af00      	add	r7, sp, #0
 8100c7e:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8100c80:	4b05      	ldr	r3, [pc, #20]	@ (8100c98 <HAL_HSEM_ActivateNotification+0x20>)
 8100c82:	681a      	ldr	r2, [r3, #0]
 8100c84:	4904      	ldr	r1, [pc, #16]	@ (8100c98 <HAL_HSEM_ActivateNotification+0x20>)
 8100c86:	687b      	ldr	r3, [r7, #4]
 8100c88:	4313      	orrs	r3, r2
 8100c8a:	600b      	str	r3, [r1, #0]
#endif
}
 8100c8c:	bf00      	nop
 8100c8e:	370c      	adds	r7, #12
 8100c90:	46bd      	mov	sp, r7
 8100c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100c96:	4770      	bx	lr
 8100c98:	58026510 	.word	0x58026510

08100c9c <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 8100c9c:	b580      	push	{r7, lr}
 8100c9e:	b084      	sub	sp, #16
 8100ca0:	af00      	add	r7, sp, #0
 8100ca2:	60f8      	str	r0, [r7, #12]
 8100ca4:	460b      	mov	r3, r1
 8100ca6:	607a      	str	r2, [r7, #4]
 8100ca8:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8100caa:	4b37      	ldr	r3, [pc, #220]	@ (8100d88 <HAL_PWREx_EnterSTOPMode+0xec>)
 8100cac:	681b      	ldr	r3, [r3, #0]
 8100cae:	f023 0201 	bic.w	r2, r3, #1
 8100cb2:	4935      	ldr	r1, [pc, #212]	@ (8100d88 <HAL_PWREx_EnterSTOPMode+0xec>)
 8100cb4:	68fb      	ldr	r3, [r7, #12]
 8100cb6:	4313      	orrs	r3, r2
 8100cb8:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 8100cba:	687b      	ldr	r3, [r7, #4]
 8100cbc:	2b00      	cmp	r3, #0
 8100cbe:	d123      	bne.n	8100d08 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8100cc0:	f7ff fde2 	bl	8100888 <HAL_GetCurrentCPUID>
 8100cc4:	4603      	mov	r3, r0
 8100cc6:	2b03      	cmp	r3, #3
 8100cc8:	d158      	bne.n	8100d7c <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 8100cca:	4b2f      	ldr	r3, [pc, #188]	@ (8100d88 <HAL_PWREx_EnterSTOPMode+0xec>)
 8100ccc:	691b      	ldr	r3, [r3, #16]
 8100cce:	4a2e      	ldr	r2, [pc, #184]	@ (8100d88 <HAL_PWREx_EnterSTOPMode+0xec>)
 8100cd0:	f023 0301 	bic.w	r3, r3, #1
 8100cd4:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8100cd6:	4b2d      	ldr	r3, [pc, #180]	@ (8100d8c <HAL_PWREx_EnterSTOPMode+0xf0>)
 8100cd8:	691b      	ldr	r3, [r3, #16]
 8100cda:	4a2c      	ldr	r2, [pc, #176]	@ (8100d8c <HAL_PWREx_EnterSTOPMode+0xf0>)
 8100cdc:	f043 0304 	orr.w	r3, r3, #4
 8100ce0:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8100ce2:	f3bf 8f4f 	dsb	sy
}
 8100ce6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8100ce8:	f3bf 8f6f 	isb	sy
}
 8100cec:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8100cee:	7afb      	ldrb	r3, [r7, #11]
 8100cf0:	2b01      	cmp	r3, #1
 8100cf2:	d101      	bne.n	8100cf8 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8100cf4:	bf30      	wfi
 8100cf6:	e000      	b.n	8100cfa <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8100cf8:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8100cfa:	4b24      	ldr	r3, [pc, #144]	@ (8100d8c <HAL_PWREx_EnterSTOPMode+0xf0>)
 8100cfc:	691b      	ldr	r3, [r3, #16]
 8100cfe:	4a23      	ldr	r2, [pc, #140]	@ (8100d8c <HAL_PWREx_EnterSTOPMode+0xf0>)
 8100d00:	f023 0304 	bic.w	r3, r3, #4
 8100d04:	6113      	str	r3, [r2, #16]
 8100d06:	e03c      	b.n	8100d82 <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8100d08:	687b      	ldr	r3, [r7, #4]
 8100d0a:	2b01      	cmp	r3, #1
 8100d0c:	d123      	bne.n	8100d56 <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 8100d0e:	f7ff fdbb 	bl	8100888 <HAL_GetCurrentCPUID>
 8100d12:	4603      	mov	r3, r0
 8100d14:	2b01      	cmp	r3, #1
 8100d16:	d133      	bne.n	8100d80 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8100d18:	4b1b      	ldr	r3, [pc, #108]	@ (8100d88 <HAL_PWREx_EnterSTOPMode+0xec>)
 8100d1a:	695b      	ldr	r3, [r3, #20]
 8100d1c:	4a1a      	ldr	r2, [pc, #104]	@ (8100d88 <HAL_PWREx_EnterSTOPMode+0xec>)
 8100d1e:	f023 0302 	bic.w	r3, r3, #2
 8100d22:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8100d24:	4b19      	ldr	r3, [pc, #100]	@ (8100d8c <HAL_PWREx_EnterSTOPMode+0xf0>)
 8100d26:	691b      	ldr	r3, [r3, #16]
 8100d28:	4a18      	ldr	r2, [pc, #96]	@ (8100d8c <HAL_PWREx_EnterSTOPMode+0xf0>)
 8100d2a:	f043 0304 	orr.w	r3, r3, #4
 8100d2e:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8100d30:	f3bf 8f4f 	dsb	sy
}
 8100d34:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8100d36:	f3bf 8f6f 	isb	sy
}
 8100d3a:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8100d3c:	7afb      	ldrb	r3, [r7, #11]
 8100d3e:	2b01      	cmp	r3, #1
 8100d40:	d101      	bne.n	8100d46 <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8100d42:	bf30      	wfi
 8100d44:	e000      	b.n	8100d48 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8100d46:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8100d48:	4b10      	ldr	r3, [pc, #64]	@ (8100d8c <HAL_PWREx_EnterSTOPMode+0xf0>)
 8100d4a:	691b      	ldr	r3, [r3, #16]
 8100d4c:	4a0f      	ldr	r2, [pc, #60]	@ (8100d8c <HAL_PWREx_EnterSTOPMode+0xf0>)
 8100d4e:	f023 0304 	bic.w	r3, r3, #4
 8100d52:	6113      	str	r3, [r2, #16]
 8100d54:	e015      	b.n	8100d82 <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8100d56:	f7ff fd97 	bl	8100888 <HAL_GetCurrentCPUID>
 8100d5a:	4603      	mov	r3, r0
 8100d5c:	2b03      	cmp	r3, #3
 8100d5e:	d106      	bne.n	8100d6e <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8100d60:	4b09      	ldr	r3, [pc, #36]	@ (8100d88 <HAL_PWREx_EnterSTOPMode+0xec>)
 8100d62:	691b      	ldr	r3, [r3, #16]
 8100d64:	4a08      	ldr	r2, [pc, #32]	@ (8100d88 <HAL_PWREx_EnterSTOPMode+0xec>)
 8100d66:	f023 0304 	bic.w	r3, r3, #4
 8100d6a:	6113      	str	r3, [r2, #16]
 8100d6c:	e009      	b.n	8100d82 <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 8100d6e:	4b06      	ldr	r3, [pc, #24]	@ (8100d88 <HAL_PWREx_EnterSTOPMode+0xec>)
 8100d70:	695b      	ldr	r3, [r3, #20]
 8100d72:	4a05      	ldr	r2, [pc, #20]	@ (8100d88 <HAL_PWREx_EnterSTOPMode+0xec>)
 8100d74:	f023 0304 	bic.w	r3, r3, #4
 8100d78:	6153      	str	r3, [r2, #20]
 8100d7a:	e002      	b.n	8100d82 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8100d7c:	bf00      	nop
 8100d7e:	e000      	b.n	8100d82 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8100d80:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 8100d82:	3710      	adds	r7, #16
 8100d84:	46bd      	mov	sp, r7
 8100d86:	bd80      	pop	{r7, pc}
 8100d88:	58024800 	.word	0x58024800
 8100d8c:	e000ed00 	.word	0xe000ed00

08100d90 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8100d90:	b580      	push	{r7, lr}
 8100d92:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8100d94:	f7ff fd78 	bl	8100888 <HAL_GetCurrentCPUID>
 8100d98:	4603      	mov	r3, r0
 8100d9a:	2b03      	cmp	r3, #3
 8100d9c:	d101      	bne.n	8100da2 <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 8100d9e:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8100da0:	e001      	b.n	8100da6 <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 8100da2:	bf40      	sev
    __WFE ();
 8100da4:	bf20      	wfe
}
 8100da6:	bf00      	nop
 8100da8:	bd80      	pop	{r7, pc}
	...

08100dac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8100dac:	b480      	push	{r7}
 8100dae:	b089      	sub	sp, #36	@ 0x24
 8100db0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8100db2:	4bb3      	ldr	r3, [pc, #716]	@ (8101080 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100db4:	691b      	ldr	r3, [r3, #16]
 8100db6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8100dba:	2b18      	cmp	r3, #24
 8100dbc:	f200 8155 	bhi.w	810106a <HAL_RCC_GetSysClockFreq+0x2be>
 8100dc0:	a201      	add	r2, pc, #4	@ (adr r2, 8100dc8 <HAL_RCC_GetSysClockFreq+0x1c>)
 8100dc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8100dc6:	bf00      	nop
 8100dc8:	08100e2d 	.word	0x08100e2d
 8100dcc:	0810106b 	.word	0x0810106b
 8100dd0:	0810106b 	.word	0x0810106b
 8100dd4:	0810106b 	.word	0x0810106b
 8100dd8:	0810106b 	.word	0x0810106b
 8100ddc:	0810106b 	.word	0x0810106b
 8100de0:	0810106b 	.word	0x0810106b
 8100de4:	0810106b 	.word	0x0810106b
 8100de8:	08100e53 	.word	0x08100e53
 8100dec:	0810106b 	.word	0x0810106b
 8100df0:	0810106b 	.word	0x0810106b
 8100df4:	0810106b 	.word	0x0810106b
 8100df8:	0810106b 	.word	0x0810106b
 8100dfc:	0810106b 	.word	0x0810106b
 8100e00:	0810106b 	.word	0x0810106b
 8100e04:	0810106b 	.word	0x0810106b
 8100e08:	08100e59 	.word	0x08100e59
 8100e0c:	0810106b 	.word	0x0810106b
 8100e10:	0810106b 	.word	0x0810106b
 8100e14:	0810106b 	.word	0x0810106b
 8100e18:	0810106b 	.word	0x0810106b
 8100e1c:	0810106b 	.word	0x0810106b
 8100e20:	0810106b 	.word	0x0810106b
 8100e24:	0810106b 	.word	0x0810106b
 8100e28:	08100e5f 	.word	0x08100e5f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8100e2c:	4b94      	ldr	r3, [pc, #592]	@ (8101080 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100e2e:	681b      	ldr	r3, [r3, #0]
 8100e30:	f003 0320 	and.w	r3, r3, #32
 8100e34:	2b00      	cmp	r3, #0
 8100e36:	d009      	beq.n	8100e4c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8100e38:	4b91      	ldr	r3, [pc, #580]	@ (8101080 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100e3a:	681b      	ldr	r3, [r3, #0]
 8100e3c:	08db      	lsrs	r3, r3, #3
 8100e3e:	f003 0303 	and.w	r3, r3, #3
 8100e42:	4a90      	ldr	r2, [pc, #576]	@ (8101084 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8100e44:	fa22 f303 	lsr.w	r3, r2, r3
 8100e48:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8100e4a:	e111      	b.n	8101070 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8100e4c:	4b8d      	ldr	r3, [pc, #564]	@ (8101084 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8100e4e:	61bb      	str	r3, [r7, #24]
      break;
 8100e50:	e10e      	b.n	8101070 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8100e52:	4b8d      	ldr	r3, [pc, #564]	@ (8101088 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8100e54:	61bb      	str	r3, [r7, #24]
      break;
 8100e56:	e10b      	b.n	8101070 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8100e58:	4b8c      	ldr	r3, [pc, #560]	@ (810108c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8100e5a:	61bb      	str	r3, [r7, #24]
      break;
 8100e5c:	e108      	b.n	8101070 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8100e5e:	4b88      	ldr	r3, [pc, #544]	@ (8101080 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100e60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8100e62:	f003 0303 	and.w	r3, r3, #3
 8100e66:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8100e68:	4b85      	ldr	r3, [pc, #532]	@ (8101080 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100e6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8100e6c:	091b      	lsrs	r3, r3, #4
 8100e6e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8100e72:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8100e74:	4b82      	ldr	r3, [pc, #520]	@ (8101080 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100e76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8100e78:	f003 0301 	and.w	r3, r3, #1
 8100e7c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8100e7e:	4b80      	ldr	r3, [pc, #512]	@ (8101080 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100e80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8100e82:	08db      	lsrs	r3, r3, #3
 8100e84:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8100e88:	68fa      	ldr	r2, [r7, #12]
 8100e8a:	fb02 f303 	mul.w	r3, r2, r3
 8100e8e:	ee07 3a90 	vmov	s15, r3
 8100e92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8100e96:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8100e9a:	693b      	ldr	r3, [r7, #16]
 8100e9c:	2b00      	cmp	r3, #0
 8100e9e:	f000 80e1 	beq.w	8101064 <HAL_RCC_GetSysClockFreq+0x2b8>
 8100ea2:	697b      	ldr	r3, [r7, #20]
 8100ea4:	2b02      	cmp	r3, #2
 8100ea6:	f000 8083 	beq.w	8100fb0 <HAL_RCC_GetSysClockFreq+0x204>
 8100eaa:	697b      	ldr	r3, [r7, #20]
 8100eac:	2b02      	cmp	r3, #2
 8100eae:	f200 80a1 	bhi.w	8100ff4 <HAL_RCC_GetSysClockFreq+0x248>
 8100eb2:	697b      	ldr	r3, [r7, #20]
 8100eb4:	2b00      	cmp	r3, #0
 8100eb6:	d003      	beq.n	8100ec0 <HAL_RCC_GetSysClockFreq+0x114>
 8100eb8:	697b      	ldr	r3, [r7, #20]
 8100eba:	2b01      	cmp	r3, #1
 8100ebc:	d056      	beq.n	8100f6c <HAL_RCC_GetSysClockFreq+0x1c0>
 8100ebe:	e099      	b.n	8100ff4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8100ec0:	4b6f      	ldr	r3, [pc, #444]	@ (8101080 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100ec2:	681b      	ldr	r3, [r3, #0]
 8100ec4:	f003 0320 	and.w	r3, r3, #32
 8100ec8:	2b00      	cmp	r3, #0
 8100eca:	d02d      	beq.n	8100f28 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8100ecc:	4b6c      	ldr	r3, [pc, #432]	@ (8101080 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100ece:	681b      	ldr	r3, [r3, #0]
 8100ed0:	08db      	lsrs	r3, r3, #3
 8100ed2:	f003 0303 	and.w	r3, r3, #3
 8100ed6:	4a6b      	ldr	r2, [pc, #428]	@ (8101084 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8100ed8:	fa22 f303 	lsr.w	r3, r2, r3
 8100edc:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8100ede:	687b      	ldr	r3, [r7, #4]
 8100ee0:	ee07 3a90 	vmov	s15, r3
 8100ee4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8100ee8:	693b      	ldr	r3, [r7, #16]
 8100eea:	ee07 3a90 	vmov	s15, r3
 8100eee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8100ef2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8100ef6:	4b62      	ldr	r3, [pc, #392]	@ (8101080 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100ef8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8100efa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8100efe:	ee07 3a90 	vmov	s15, r3
 8100f02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8100f06:	ed97 6a02 	vldr	s12, [r7, #8]
 8100f0a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8101090 <HAL_RCC_GetSysClockFreq+0x2e4>
 8100f0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8100f12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8100f16:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8100f1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8100f1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8100f22:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8100f26:	e087      	b.n	8101038 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8100f28:	693b      	ldr	r3, [r7, #16]
 8100f2a:	ee07 3a90 	vmov	s15, r3
 8100f2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8100f32:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8101094 <HAL_RCC_GetSysClockFreq+0x2e8>
 8100f36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8100f3a:	4b51      	ldr	r3, [pc, #324]	@ (8101080 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100f3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8100f3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8100f42:	ee07 3a90 	vmov	s15, r3
 8100f46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8100f4a:	ed97 6a02 	vldr	s12, [r7, #8]
 8100f4e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8101090 <HAL_RCC_GetSysClockFreq+0x2e4>
 8100f52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8100f56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8100f5a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8100f5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8100f62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8100f66:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8100f6a:	e065      	b.n	8101038 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8100f6c:	693b      	ldr	r3, [r7, #16]
 8100f6e:	ee07 3a90 	vmov	s15, r3
 8100f72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8100f76:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8101098 <HAL_RCC_GetSysClockFreq+0x2ec>
 8100f7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8100f7e:	4b40      	ldr	r3, [pc, #256]	@ (8101080 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100f80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8100f82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8100f86:	ee07 3a90 	vmov	s15, r3
 8100f8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8100f8e:	ed97 6a02 	vldr	s12, [r7, #8]
 8100f92:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8101090 <HAL_RCC_GetSysClockFreq+0x2e4>
 8100f96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8100f9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8100f9e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8100fa2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8100fa6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8100faa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8100fae:	e043      	b.n	8101038 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8100fb0:	693b      	ldr	r3, [r7, #16]
 8100fb2:	ee07 3a90 	vmov	s15, r3
 8100fb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8100fba:	eddf 6a38 	vldr	s13, [pc, #224]	@ 810109c <HAL_RCC_GetSysClockFreq+0x2f0>
 8100fbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8100fc2:	4b2f      	ldr	r3, [pc, #188]	@ (8101080 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100fc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8100fc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8100fca:	ee07 3a90 	vmov	s15, r3
 8100fce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8100fd2:	ed97 6a02 	vldr	s12, [r7, #8]
 8100fd6:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8101090 <HAL_RCC_GetSysClockFreq+0x2e4>
 8100fda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8100fde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8100fe2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8100fe6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8100fea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8100fee:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8100ff2:	e021      	b.n	8101038 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8100ff4:	693b      	ldr	r3, [r7, #16]
 8100ff6:	ee07 3a90 	vmov	s15, r3
 8100ffa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8100ffe:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8101098 <HAL_RCC_GetSysClockFreq+0x2ec>
 8101002:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101006:	4b1e      	ldr	r3, [pc, #120]	@ (8101080 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101008:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810100a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810100e:	ee07 3a90 	vmov	s15, r3
 8101012:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101016:	ed97 6a02 	vldr	s12, [r7, #8]
 810101a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8101090 <HAL_RCC_GetSysClockFreq+0x2e4>
 810101e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101022:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8101026:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810102a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810102e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101032:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8101036:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8101038:	4b11      	ldr	r3, [pc, #68]	@ (8101080 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810103a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810103c:	0a5b      	lsrs	r3, r3, #9
 810103e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8101042:	3301      	adds	r3, #1
 8101044:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8101046:	683b      	ldr	r3, [r7, #0]
 8101048:	ee07 3a90 	vmov	s15, r3
 810104c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8101050:	edd7 6a07 	vldr	s13, [r7, #28]
 8101054:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8101058:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810105c:	ee17 3a90 	vmov	r3, s15
 8101060:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8101062:	e005      	b.n	8101070 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8101064:	2300      	movs	r3, #0
 8101066:	61bb      	str	r3, [r7, #24]
      break;
 8101068:	e002      	b.n	8101070 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 810106a:	4b07      	ldr	r3, [pc, #28]	@ (8101088 <HAL_RCC_GetSysClockFreq+0x2dc>)
 810106c:	61bb      	str	r3, [r7, #24]
      break;
 810106e:	bf00      	nop
  }

  return sysclockfreq;
 8101070:	69bb      	ldr	r3, [r7, #24]
}
 8101072:	4618      	mov	r0, r3
 8101074:	3724      	adds	r7, #36	@ 0x24
 8101076:	46bd      	mov	sp, r7
 8101078:	f85d 7b04 	ldr.w	r7, [sp], #4
 810107c:	4770      	bx	lr
 810107e:	bf00      	nop
 8101080:	58024400 	.word	0x58024400
 8101084:	03d09000 	.word	0x03d09000
 8101088:	003d0900 	.word	0x003d0900
 810108c:	017d7840 	.word	0x017d7840
 8101090:	46000000 	.word	0x46000000
 8101094:	4c742400 	.word	0x4c742400
 8101098:	4a742400 	.word	0x4a742400
 810109c:	4bbebc20 	.word	0x4bbebc20

081010a0 <__libc_init_array>:
 81010a0:	b570      	push	{r4, r5, r6, lr}
 81010a2:	4d0d      	ldr	r5, [pc, #52]	@ (81010d8 <__libc_init_array+0x38>)
 81010a4:	4c0d      	ldr	r4, [pc, #52]	@ (81010dc <__libc_init_array+0x3c>)
 81010a6:	1b64      	subs	r4, r4, r5
 81010a8:	10a4      	asrs	r4, r4, #2
 81010aa:	2600      	movs	r6, #0
 81010ac:	42a6      	cmp	r6, r4
 81010ae:	d109      	bne.n	81010c4 <__libc_init_array+0x24>
 81010b0:	4d0b      	ldr	r5, [pc, #44]	@ (81010e0 <__libc_init_array+0x40>)
 81010b2:	4c0c      	ldr	r4, [pc, #48]	@ (81010e4 <__libc_init_array+0x44>)
 81010b4:	f000 f818 	bl	81010e8 <_init>
 81010b8:	1b64      	subs	r4, r4, r5
 81010ba:	10a4      	asrs	r4, r4, #2
 81010bc:	2600      	movs	r6, #0
 81010be:	42a6      	cmp	r6, r4
 81010c0:	d105      	bne.n	81010ce <__libc_init_array+0x2e>
 81010c2:	bd70      	pop	{r4, r5, r6, pc}
 81010c4:	f855 3b04 	ldr.w	r3, [r5], #4
 81010c8:	4798      	blx	r3
 81010ca:	3601      	adds	r6, #1
 81010cc:	e7ee      	b.n	81010ac <__libc_init_array+0xc>
 81010ce:	f855 3b04 	ldr.w	r3, [r5], #4
 81010d2:	4798      	blx	r3
 81010d4:	3601      	adds	r6, #1
 81010d6:	e7f2      	b.n	81010be <__libc_init_array+0x1e>
 81010d8:	08101110 	.word	0x08101110
 81010dc:	08101110 	.word	0x08101110
 81010e0:	08101110 	.word	0x08101110
 81010e4:	08101114 	.word	0x08101114

081010e8 <_init>:
 81010e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 81010ea:	bf00      	nop
 81010ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 81010ee:	bc08      	pop	{r3}
 81010f0:	469e      	mov	lr, r3
 81010f2:	4770      	bx	lr

081010f4 <_fini>:
 81010f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 81010f6:	bf00      	nop
 81010f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 81010fa:	bc08      	pop	{r3}
 81010fc:	469e      	mov	lr, r3
 81010fe:	4770      	bx	lr
