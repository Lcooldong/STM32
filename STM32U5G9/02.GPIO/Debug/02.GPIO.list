
02.GPIO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000274  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f14  08000274  08000274  00001274  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  08007188  08007188  00008188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007288  08007288  0000900c  2**0
                  CONTENTS
  4 .ARM          00000008  08007288  08007288  00008288  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007290  08007290  0000900c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007290  08007290  00008290  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007294  08007294  00008294  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08007298  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  2000000c  080072a4  0000900c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c0  080072a4  000090c0  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0000900c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000110e7  00000000  00000000  00009042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023b9  00000000  00000000  0001a129  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d78  00000000  00000000  0001c4e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a4c  00000000  00000000  0001d260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003d89c  00000000  00000000  0001dcac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012450  00000000  00000000  0005b548  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001750a3  00000000  00000000  0006d998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001e2a3b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000368c  00000000  00000000  001e2a80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  001e610c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000274 <__do_global_dtors_aux>:
 8000274:	b510      	push	{r4, lr}
 8000276:	4c05      	ldr	r4, [pc, #20]	@ (800028c <__do_global_dtors_aux+0x18>)
 8000278:	7823      	ldrb	r3, [r4, #0]
 800027a:	b933      	cbnz	r3, 800028a <__do_global_dtors_aux+0x16>
 800027c:	4b04      	ldr	r3, [pc, #16]	@ (8000290 <__do_global_dtors_aux+0x1c>)
 800027e:	b113      	cbz	r3, 8000286 <__do_global_dtors_aux+0x12>
 8000280:	4804      	ldr	r0, [pc, #16]	@ (8000294 <__do_global_dtors_aux+0x20>)
 8000282:	f3af 8000 	nop.w
 8000286:	2301      	movs	r3, #1
 8000288:	7023      	strb	r3, [r4, #0]
 800028a:	bd10      	pop	{r4, pc}
 800028c:	2000000c 	.word	0x2000000c
 8000290:	00000000 	.word	0x00000000
 8000294:	08007170 	.word	0x08007170

08000298 <frame_dummy>:
 8000298:	b508      	push	{r3, lr}
 800029a:	4b03      	ldr	r3, [pc, #12]	@ (80002a8 <frame_dummy+0x10>)
 800029c:	b11b      	cbz	r3, 80002a6 <frame_dummy+0xe>
 800029e:	4903      	ldr	r1, [pc, #12]	@ (80002ac <frame_dummy+0x14>)
 80002a0:	4803      	ldr	r0, [pc, #12]	@ (80002b0 <frame_dummy+0x18>)
 80002a2:	f3af 8000 	nop.w
 80002a6:	bd08      	pop	{r3, pc}
 80002a8:	00000000 	.word	0x00000000
 80002ac:	20000010 	.word	0x20000010
 80002b0:	08007170 	.word	0x08007170

080002b4 <__aeabi_uldivmod>:
 80002b4:	b953      	cbnz	r3, 80002cc <__aeabi_uldivmod+0x18>
 80002b6:	b94a      	cbnz	r2, 80002cc <__aeabi_uldivmod+0x18>
 80002b8:	2900      	cmp	r1, #0
 80002ba:	bf08      	it	eq
 80002bc:	2800      	cmpeq	r0, #0
 80002be:	bf1c      	itt	ne
 80002c0:	f04f 31ff 	movne.w	r1, #4294967295
 80002c4:	f04f 30ff 	movne.w	r0, #4294967295
 80002c8:	f000 b97e 	b.w	80005c8 <__aeabi_idiv0>
 80002cc:	f1ad 0c08 	sub.w	ip, sp, #8
 80002d0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d4:	f000 f806 	bl	80002e4 <__udivmoddi4>
 80002d8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002e0:	b004      	add	sp, #16
 80002e2:	4770      	bx	lr

080002e4 <__udivmoddi4>:
 80002e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002e8:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002ea:	460c      	mov	r4, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14d      	bne.n	800038c <__udivmoddi4+0xa8>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	460f      	mov	r7, r1
 80002f4:	4684      	mov	ip, r0
 80002f6:	4696      	mov	lr, r2
 80002f8:	fab2 f382 	clz	r3, r2
 80002fc:	d960      	bls.n	80003c0 <__udivmoddi4+0xdc>
 80002fe:	b14b      	cbz	r3, 8000314 <__udivmoddi4+0x30>
 8000300:	fa02 fe03 	lsl.w	lr, r2, r3
 8000304:	f1c3 0220 	rsb	r2, r3, #32
 8000308:	409f      	lsls	r7, r3
 800030a:	fa00 fc03 	lsl.w	ip, r0, r3
 800030e:	fa20 f202 	lsr.w	r2, r0, r2
 8000312:	4317      	orrs	r7, r2
 8000314:	ea4f 461e 	mov.w	r6, lr, lsr #16
 8000318:	fa1f f48e 	uxth.w	r4, lr
 800031c:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000320:	fbb7 f1f6 	udiv	r1, r7, r6
 8000324:	fb06 7711 	mls	r7, r6, r1, r7
 8000328:	fb01 f004 	mul.w	r0, r1, r4
 800032c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000330:	4290      	cmp	r0, r2
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x62>
 8000334:	eb1e 0202 	adds.w	r2, lr, r2
 8000338:	f101 37ff 	add.w	r7, r1, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x60>
 800033e:	4290      	cmp	r0, r2
 8000340:	f200 812d 	bhi.w	800059e <__udivmoddi4+0x2ba>
 8000344:	4639      	mov	r1, r7
 8000346:	1a12      	subs	r2, r2, r0
 8000348:	fa1f fc8c 	uxth.w	ip, ip
 800034c:	fbb2 f0f6 	udiv	r0, r2, r6
 8000350:	fb06 2210 	mls	r2, r6, r0, r2
 8000354:	fb00 f404 	mul.w	r4, r0, r4
 8000358:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 800035c:	4564      	cmp	r4, ip
 800035e:	d908      	bls.n	8000372 <__udivmoddi4+0x8e>
 8000360:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000364:	f100 32ff 	add.w	r2, r0, #4294967295
 8000368:	d202      	bcs.n	8000370 <__udivmoddi4+0x8c>
 800036a:	4564      	cmp	r4, ip
 800036c:	f200 811a 	bhi.w	80005a4 <__udivmoddi4+0x2c0>
 8000370:	4610      	mov	r0, r2
 8000372:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000376:	ebac 0c04 	sub.w	ip, ip, r4
 800037a:	2100      	movs	r1, #0
 800037c:	b125      	cbz	r5, 8000388 <__udivmoddi4+0xa4>
 800037e:	fa2c f303 	lsr.w	r3, ip, r3
 8000382:	2200      	movs	r2, #0
 8000384:	e9c5 3200 	strd	r3, r2, [r5]
 8000388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800038c:	428b      	cmp	r3, r1
 800038e:	d905      	bls.n	800039c <__udivmoddi4+0xb8>
 8000390:	b10d      	cbz	r5, 8000396 <__udivmoddi4+0xb2>
 8000392:	e9c5 0100 	strd	r0, r1, [r5]
 8000396:	2100      	movs	r1, #0
 8000398:	4608      	mov	r0, r1
 800039a:	e7f5      	b.n	8000388 <__udivmoddi4+0xa4>
 800039c:	fab3 f183 	clz	r1, r3
 80003a0:	2900      	cmp	r1, #0
 80003a2:	d14d      	bne.n	8000440 <__udivmoddi4+0x15c>
 80003a4:	42a3      	cmp	r3, r4
 80003a6:	f0c0 80f2 	bcc.w	800058e <__udivmoddi4+0x2aa>
 80003aa:	4290      	cmp	r0, r2
 80003ac:	f080 80ef 	bcs.w	800058e <__udivmoddi4+0x2aa>
 80003b0:	4606      	mov	r6, r0
 80003b2:	4623      	mov	r3, r4
 80003b4:	4608      	mov	r0, r1
 80003b6:	2d00      	cmp	r5, #0
 80003b8:	d0e6      	beq.n	8000388 <__udivmoddi4+0xa4>
 80003ba:	e9c5 6300 	strd	r6, r3, [r5]
 80003be:	e7e3      	b.n	8000388 <__udivmoddi4+0xa4>
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	f040 80a2 	bne.w	800050a <__udivmoddi4+0x226>
 80003c6:	1a8a      	subs	r2, r1, r2
 80003c8:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80003cc:	fa1f f68e 	uxth.w	r6, lr
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb2 f4f7 	udiv	r4, r2, r7
 80003d6:	fb07 2014 	mls	r0, r7, r4, r2
 80003da:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80003de:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003e2:	fb06 f004 	mul.w	r0, r6, r4
 80003e6:	4290      	cmp	r0, r2
 80003e8:	d90f      	bls.n	800040a <__udivmoddi4+0x126>
 80003ea:	eb1e 0202 	adds.w	r2, lr, r2
 80003ee:	f104 38ff 	add.w	r8, r4, #4294967295
 80003f2:	bf2c      	ite	cs
 80003f4:	f04f 0901 	movcs.w	r9, #1
 80003f8:	f04f 0900 	movcc.w	r9, #0
 80003fc:	4290      	cmp	r0, r2
 80003fe:	d903      	bls.n	8000408 <__udivmoddi4+0x124>
 8000400:	f1b9 0f00 	cmp.w	r9, #0
 8000404:	f000 80c8 	beq.w	8000598 <__udivmoddi4+0x2b4>
 8000408:	4644      	mov	r4, r8
 800040a:	1a12      	subs	r2, r2, r0
 800040c:	fa1f fc8c 	uxth.w	ip, ip
 8000410:	fbb2 f0f7 	udiv	r0, r2, r7
 8000414:	fb07 2210 	mls	r2, r7, r0, r2
 8000418:	fb00 f606 	mul.w	r6, r0, r6
 800041c:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000420:	4566      	cmp	r6, ip
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x152>
 8000424:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000428:	f100 32ff 	add.w	r2, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x150>
 800042e:	4566      	cmp	r6, ip
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2c6>
 8000434:	4610      	mov	r0, r2
 8000436:	ebac 0c06 	sub.w	ip, ip, r6
 800043a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800043e:	e79d      	b.n	800037c <__udivmoddi4+0x98>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa04 fe01 	lsl.w	lr, r4, r1
 800044a:	fa22 f706 	lsr.w	r7, r2, r6
 800044e:	fa20 fc06 	lsr.w	ip, r0, r6
 8000452:	40f4      	lsrs	r4, r6
 8000454:	408a      	lsls	r2, r1
 8000456:	431f      	orrs	r7, r3
 8000458:	ea4e 030c 	orr.w	r3, lr, ip
 800045c:	fa00 fe01 	lsl.w	lr, r0, r1
 8000460:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000464:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fbb4 f0f8 	udiv	r0, r4, r8
 8000470:	fb08 4410 	mls	r4, r8, r0, r4
 8000474:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000478:	fb00 f90c 	mul.w	r9, r0, ip
 800047c:	45a1      	cmp	r9, r4
 800047e:	d90e      	bls.n	800049e <__udivmoddi4+0x1ba>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f100 3aff 	add.w	sl, r0, #4294967295
 8000486:	bf2c      	ite	cs
 8000488:	f04f 0b01 	movcs.w	fp, #1
 800048c:	f04f 0b00 	movcc.w	fp, #0
 8000490:	45a1      	cmp	r9, r4
 8000492:	d903      	bls.n	800049c <__udivmoddi4+0x1b8>
 8000494:	f1bb 0f00 	cmp.w	fp, #0
 8000498:	f000 8093 	beq.w	80005c2 <__udivmoddi4+0x2de>
 800049c:	4650      	mov	r0, sl
 800049e:	eba4 0409 	sub.w	r4, r4, r9
 80004a2:	fa1f f983 	uxth.w	r9, r3
 80004a6:	fbb4 f3f8 	udiv	r3, r4, r8
 80004aa:	fb08 4413 	mls	r4, r8, r3, r4
 80004ae:	fb03 fc0c 	mul.w	ip, r3, ip
 80004b2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004b6:	45a4      	cmp	ip, r4
 80004b8:	d906      	bls.n	80004c8 <__udivmoddi4+0x1e4>
 80004ba:	193c      	adds	r4, r7, r4
 80004bc:	f103 38ff 	add.w	r8, r3, #4294967295
 80004c0:	d201      	bcs.n	80004c6 <__udivmoddi4+0x1e2>
 80004c2:	45a4      	cmp	ip, r4
 80004c4:	d87a      	bhi.n	80005bc <__udivmoddi4+0x2d8>
 80004c6:	4643      	mov	r3, r8
 80004c8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004cc:	eba4 040c 	sub.w	r4, r4, ip
 80004d0:	fba0 9802 	umull	r9, r8, r0, r2
 80004d4:	4544      	cmp	r4, r8
 80004d6:	46cc      	mov	ip, r9
 80004d8:	4643      	mov	r3, r8
 80004da:	d302      	bcc.n	80004e2 <__udivmoddi4+0x1fe>
 80004dc:	d106      	bne.n	80004ec <__udivmoddi4+0x208>
 80004de:	45ce      	cmp	lr, r9
 80004e0:	d204      	bcs.n	80004ec <__udivmoddi4+0x208>
 80004e2:	3801      	subs	r0, #1
 80004e4:	ebb9 0c02 	subs.w	ip, r9, r2
 80004e8:	eb68 0307 	sbc.w	r3, r8, r7
 80004ec:	b15d      	cbz	r5, 8000506 <__udivmoddi4+0x222>
 80004ee:	ebbe 020c 	subs.w	r2, lr, ip
 80004f2:	eb64 0403 	sbc.w	r4, r4, r3
 80004f6:	fa04 f606 	lsl.w	r6, r4, r6
 80004fa:	fa22 f301 	lsr.w	r3, r2, r1
 80004fe:	40cc      	lsrs	r4, r1
 8000500:	431e      	orrs	r6, r3
 8000502:	e9c5 6400 	strd	r6, r4, [r5]
 8000506:	2100      	movs	r1, #0
 8000508:	e73e      	b.n	8000388 <__udivmoddi4+0xa4>
 800050a:	fa02 fe03 	lsl.w	lr, r2, r3
 800050e:	f1c3 0120 	rsb	r1, r3, #32
 8000512:	fa04 f203 	lsl.w	r2, r4, r3
 8000516:	fa00 fc03 	lsl.w	ip, r0, r3
 800051a:	40cc      	lsrs	r4, r1
 800051c:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000520:	fa20 f101 	lsr.w	r1, r0, r1
 8000524:	fa1f f68e 	uxth.w	r6, lr
 8000528:	fbb4 f0f7 	udiv	r0, r4, r7
 800052c:	430a      	orrs	r2, r1
 800052e:	fb07 4410 	mls	r4, r7, r0, r4
 8000532:	0c11      	lsrs	r1, r2, #16
 8000534:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000538:	fb00 f406 	mul.w	r4, r0, r6
 800053c:	428c      	cmp	r4, r1
 800053e:	d90e      	bls.n	800055e <__udivmoddi4+0x27a>
 8000540:	eb1e 0101 	adds.w	r1, lr, r1
 8000544:	f100 38ff 	add.w	r8, r0, #4294967295
 8000548:	bf2c      	ite	cs
 800054a:	f04f 0901 	movcs.w	r9, #1
 800054e:	f04f 0900 	movcc.w	r9, #0
 8000552:	428c      	cmp	r4, r1
 8000554:	d902      	bls.n	800055c <__udivmoddi4+0x278>
 8000556:	f1b9 0f00 	cmp.w	r9, #0
 800055a:	d02c      	beq.n	80005b6 <__udivmoddi4+0x2d2>
 800055c:	4640      	mov	r0, r8
 800055e:	1b09      	subs	r1, r1, r4
 8000560:	b292      	uxth	r2, r2
 8000562:	fbb1 f4f7 	udiv	r4, r1, r7
 8000566:	fb07 1114 	mls	r1, r7, r4, r1
 800056a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800056e:	fb04 f106 	mul.w	r1, r4, r6
 8000572:	4291      	cmp	r1, r2
 8000574:	d907      	bls.n	8000586 <__udivmoddi4+0x2a2>
 8000576:	eb1e 0202 	adds.w	r2, lr, r2
 800057a:	f104 38ff 	add.w	r8, r4, #4294967295
 800057e:	d201      	bcs.n	8000584 <__udivmoddi4+0x2a0>
 8000580:	4291      	cmp	r1, r2
 8000582:	d815      	bhi.n	80005b0 <__udivmoddi4+0x2cc>
 8000584:	4644      	mov	r4, r8
 8000586:	1a52      	subs	r2, r2, r1
 8000588:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 800058c:	e721      	b.n	80003d2 <__udivmoddi4+0xee>
 800058e:	1a86      	subs	r6, r0, r2
 8000590:	eb64 0303 	sbc.w	r3, r4, r3
 8000594:	2001      	movs	r0, #1
 8000596:	e70e      	b.n	80003b6 <__udivmoddi4+0xd2>
 8000598:	3c02      	subs	r4, #2
 800059a:	4472      	add	r2, lr
 800059c:	e735      	b.n	800040a <__udivmoddi4+0x126>
 800059e:	3902      	subs	r1, #2
 80005a0:	4472      	add	r2, lr
 80005a2:	e6d0      	b.n	8000346 <__udivmoddi4+0x62>
 80005a4:	44f4      	add	ip, lr
 80005a6:	3802      	subs	r0, #2
 80005a8:	e6e3      	b.n	8000372 <__udivmoddi4+0x8e>
 80005aa:	44f4      	add	ip, lr
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x152>
 80005b0:	3c02      	subs	r4, #2
 80005b2:	4472      	add	r2, lr
 80005b4:	e7e7      	b.n	8000586 <__udivmoddi4+0x2a2>
 80005b6:	3802      	subs	r0, #2
 80005b8:	4471      	add	r1, lr
 80005ba:	e7d0      	b.n	800055e <__udivmoddi4+0x27a>
 80005bc:	3b02      	subs	r3, #2
 80005be:	443c      	add	r4, r7
 80005c0:	e782      	b.n	80004c8 <__udivmoddi4+0x1e4>
 80005c2:	3802      	subs	r0, #2
 80005c4:	443c      	add	r4, r7
 80005c6:	e76a      	b.n	800049e <__udivmoddi4+0x1ba>

080005c8 <__aeabi_idiv0>:
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop

080005cc <MX_GPIO_Init>:
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PG1   ------> ADC4_IN8
*/
void MX_GPIO_Init(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b090      	sub	sp, #64	@ 0x40
 80005d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005d2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80005d6:	2200      	movs	r2, #0
 80005d8:	601a      	str	r2, [r3, #0]
 80005da:	605a      	str	r2, [r3, #4]
 80005dc:	609a      	str	r2, [r3, #8]
 80005de:	60da      	str	r2, [r3, #12]
 80005e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80005e2:	4bb7      	ldr	r3, [pc, #732]	@ (80008c0 <MX_GPIO_Init+0x2f4>)
 80005e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80005e8:	4ab5      	ldr	r2, [pc, #724]	@ (80008c0 <MX_GPIO_Init+0x2f4>)
 80005ea:	f043 0310 	orr.w	r3, r3, #16
 80005ee:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80005f2:	4bb3      	ldr	r3, [pc, #716]	@ (80008c0 <MX_GPIO_Init+0x2f4>)
 80005f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80005f8:	f003 0310 	and.w	r3, r3, #16
 80005fc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80005fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000600:	4baf      	ldr	r3, [pc, #700]	@ (80008c0 <MX_GPIO_Init+0x2f4>)
 8000602:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000606:	4aae      	ldr	r2, [pc, #696]	@ (80008c0 <MX_GPIO_Init+0x2f4>)
 8000608:	f043 0301 	orr.w	r3, r3, #1
 800060c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000610:	4bab      	ldr	r3, [pc, #684]	@ (80008c0 <MX_GPIO_Init+0x2f4>)
 8000612:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000616:	f003 0301 	and.w	r3, r3, #1
 800061a:	627b      	str	r3, [r7, #36]	@ 0x24
 800061c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800061e:	4ba8      	ldr	r3, [pc, #672]	@ (80008c0 <MX_GPIO_Init+0x2f4>)
 8000620:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000624:	4aa6      	ldr	r2, [pc, #664]	@ (80008c0 <MX_GPIO_Init+0x2f4>)
 8000626:	f043 0304 	orr.w	r3, r3, #4
 800062a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800062e:	4ba4      	ldr	r3, [pc, #656]	@ (80008c0 <MX_GPIO_Init+0x2f4>)
 8000630:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000634:	f003 0304 	and.w	r3, r3, #4
 8000638:	623b      	str	r3, [r7, #32]
 800063a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800063c:	4ba0      	ldr	r3, [pc, #640]	@ (80008c0 <MX_GPIO_Init+0x2f4>)
 800063e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000642:	4a9f      	ldr	r2, [pc, #636]	@ (80008c0 <MX_GPIO_Init+0x2f4>)
 8000644:	f043 0302 	orr.w	r3, r3, #2
 8000648:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800064c:	4b9c      	ldr	r3, [pc, #624]	@ (80008c0 <MX_GPIO_Init+0x2f4>)
 800064e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000652:	f003 0302 	and.w	r3, r3, #2
 8000656:	61fb      	str	r3, [r7, #28]
 8000658:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800065a:	4b99      	ldr	r3, [pc, #612]	@ (80008c0 <MX_GPIO_Init+0x2f4>)
 800065c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000660:	4a97      	ldr	r2, [pc, #604]	@ (80008c0 <MX_GPIO_Init+0x2f4>)
 8000662:	f043 0308 	orr.w	r3, r3, #8
 8000666:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800066a:	4b95      	ldr	r3, [pc, #596]	@ (80008c0 <MX_GPIO_Init+0x2f4>)
 800066c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000670:	f003 0308 	and.w	r3, r3, #8
 8000674:	61bb      	str	r3, [r7, #24]
 8000676:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000678:	4b91      	ldr	r3, [pc, #580]	@ (80008c0 <MX_GPIO_Init+0x2f4>)
 800067a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800067e:	4a90      	ldr	r2, [pc, #576]	@ (80008c0 <MX_GPIO_Init+0x2f4>)
 8000680:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000684:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000688:	4b8d      	ldr	r3, [pc, #564]	@ (80008c0 <MX_GPIO_Init+0x2f4>)
 800068a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800068e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000692:	617b      	str	r3, [r7, #20]
 8000694:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000696:	4b8a      	ldr	r3, [pc, #552]	@ (80008c0 <MX_GPIO_Init+0x2f4>)
 8000698:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800069c:	4a88      	ldr	r2, [pc, #544]	@ (80008c0 <MX_GPIO_Init+0x2f4>)
 800069e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80006a2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80006a6:	4b86      	ldr	r3, [pc, #536]	@ (80008c0 <MX_GPIO_Init+0x2f4>)
 80006a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80006ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80006b0:	613b      	str	r3, [r7, #16]
 80006b2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80006b4:	4b82      	ldr	r3, [pc, #520]	@ (80008c0 <MX_GPIO_Init+0x2f4>)
 80006b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80006ba:	4a81      	ldr	r2, [pc, #516]	@ (80008c0 <MX_GPIO_Init+0x2f4>)
 80006bc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80006c0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80006c4:	4b7e      	ldr	r3, [pc, #504]	@ (80008c0 <MX_GPIO_Init+0x2f4>)
 80006c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80006ca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80006ce:	60fb      	str	r3, [r7, #12]
 80006d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006d2:	4b7b      	ldr	r3, [pc, #492]	@ (80008c0 <MX_GPIO_Init+0x2f4>)
 80006d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80006d8:	4a79      	ldr	r2, [pc, #484]	@ (80008c0 <MX_GPIO_Init+0x2f4>)
 80006da:	f043 0320 	orr.w	r3, r3, #32
 80006de:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80006e2:	4b77      	ldr	r3, [pc, #476]	@ (80008c0 <MX_GPIO_Init+0x2f4>)
 80006e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80006e8:	f003 0320 	and.w	r3, r3, #32
 80006ec:	60bb      	str	r3, [r7, #8]
 80006ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80006f0:	4b73      	ldr	r3, [pc, #460]	@ (80008c0 <MX_GPIO_Init+0x2f4>)
 80006f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80006f6:	4a72      	ldr	r2, [pc, #456]	@ (80008c0 <MX_GPIO_Init+0x2f4>)
 80006f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80006fc:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000700:	4b6f      	ldr	r3, [pc, #444]	@ (80008c0 <MX_GPIO_Init+0x2f4>)
 8000702:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000706:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800070a:	607b      	str	r3, [r7, #4]
 800070c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED_GREEN_Pin|LED_RED_Pin|UCPD_DBn_Pin|TOF_LPN_Pin, GPIO_PIN_RESET);
 800070e:	2200      	movs	r2, #0
 8000710:	f244 2103 	movw	r1, #16899	@ 0x4203
 8000714:	486b      	ldr	r0, [pc, #428]	@ (80008c4 <MX_GPIO_Init+0x2f8>)
 8000716:	f001 f81f 	bl	8001758 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DSI_RESETn_GPIO_Port, DSI_RESETn_Pin, GPIO_PIN_RESET);
 800071a:	2200      	movs	r2, #0
 800071c:	2120      	movs	r1, #32
 800071e:	486a      	ldr	r0, [pc, #424]	@ (80008c8 <MX_GPIO_Init+0x2fc>)
 8000720:	f001 f81a 	bl	8001758 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(eMMC_RSTn_GPIO_Port, eMMC_RSTn_Pin, GPIO_PIN_RESET);
 8000724:	2200      	movs	r2, #0
 8000726:	2140      	movs	r1, #64	@ 0x40
 8000728:	4868      	ldr	r0, [pc, #416]	@ (80008cc <MX_GPIO_Init+0x300>)
 800072a:	f001 f815 	bl	8001758 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DSI_BL_CTRL_GPIO_Port, DSI_BL_CTRL_Pin, GPIO_PIN_RESET);
 800072e:	2200      	movs	r2, #0
 8000730:	2140      	movs	r1, #64	@ 0x40
 8000732:	4867      	ldr	r0, [pc, #412]	@ (80008d0 <MX_GPIO_Init+0x304>)
 8000734:	f001 f810 	bl	8001758 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin UCPD_DBn_Pin TOF_LPN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin|UCPD_DBn_Pin|TOF_LPN_Pin;
 8000738:	f244 2303 	movw	r3, #16899	@ 0x4203
 800073c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800073e:	2301      	movs	r3, #1
 8000740:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000742:	2300      	movs	r3, #0
 8000744:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000746:	2300      	movs	r3, #0
 8000748:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800074a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800074e:	4619      	mov	r1, r3
 8000750:	485c      	ldr	r0, [pc, #368]	@ (80008c4 <MX_GPIO_Init+0x2f8>)
 8000752:	f000 fe29 	bl	80013a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : TOF_INTN_Pin */
  GPIO_InitStruct.Pin = TOF_INTN_Pin;
 8000756:	2320      	movs	r3, #32
 8000758:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800075a:	4b5e      	ldr	r3, [pc, #376]	@ (80008d4 <MX_GPIO_Init+0x308>)
 800075c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075e:	2300      	movs	r3, #0
 8000760:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(TOF_INTN_GPIO_Port, &GPIO_InitStruct);
 8000762:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000766:	4619      	mov	r1, r3
 8000768:	485b      	ldr	r0, [pc, #364]	@ (80008d8 <MX_GPIO_Init+0x30c>)
 800076a:	f000 fe1d 	bl	80013a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DSI_RESETn_Pin */
  GPIO_InitStruct.Pin = DSI_RESETn_Pin;
 800076e:	2320      	movs	r3, #32
 8000770:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000772:	2301      	movs	r3, #1
 8000774:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000776:	2300      	movs	r3, #0
 8000778:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800077a:	2300      	movs	r3, #0
 800077c:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(DSI_RESETn_GPIO_Port, &GPIO_InitStruct);
 800077e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000782:	4619      	mov	r1, r3
 8000784:	4850      	ldr	r0, [pc, #320]	@ (80008c8 <MX_GPIO_Init+0x2fc>)
 8000786:	f000 fe0f 	bl	80013a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA12 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 800078a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800078e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000790:	2302      	movs	r3, #2
 8000792:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000794:	2300      	movs	r3, #0
 8000796:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000798:	2300      	movs	r3, #0
 800079a:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800079c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80007a0:	4619      	mov	r1, r3
 80007a2:	484e      	ldr	r0, [pc, #312]	@ (80008dc <MX_GPIO_Init+0x310>)
 80007a4:	f000 fe00 	bl	80013a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : eMMC_RSTn_Pin */
  GPIO_InitStruct.Pin = eMMC_RSTn_Pin;
 80007a8:	2340      	movs	r3, #64	@ 0x40
 80007aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ac:	2301      	movs	r3, #1
 80007ae:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b0:	2300      	movs	r3, #0
 80007b2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b4:	2300      	movs	r3, #0
 80007b6:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(eMMC_RSTn_GPIO_Port, &GPIO_InitStruct);
 80007b8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80007bc:	4619      	mov	r1, r3
 80007be:	4843      	ldr	r0, [pc, #268]	@ (80008cc <MX_GPIO_Init+0x300>)
 80007c0:	f000 fdf2 	bl	80013a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DSI_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = DSI_BL_CTRL_Pin;
 80007c4:	2340      	movs	r3, #64	@ 0x40
 80007c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c8:	2301      	movs	r3, #1
 80007ca:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007cc:	2300      	movs	r3, #0
 80007ce:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d0:	2300      	movs	r3, #0
 80007d2:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(DSI_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 80007d4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80007d8:	4619      	mov	r1, r3
 80007da:	483d      	ldr	r0, [pc, #244]	@ (80008d0 <MX_GPIO_Init+0x304>)
 80007dc:	f000 fde4 	bl	80013a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PJ0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80007e0:	2301      	movs	r3, #1
 80007e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007e4:	2302      	movs	r3, #2
 80007e6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e8:	2300      	movs	r3, #0
 80007ea:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007ec:	2303      	movs	r3, #3
 80007ee:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_HSPI1;
 80007f0:	2308      	movs	r3, #8
 80007f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80007f4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80007f8:	4619      	mov	r1, r3
 80007fa:	4839      	ldr	r0, [pc, #228]	@ (80008e0 <MX_GPIO_Init+0x314>)
 80007fc:	f000 fdd4 	bl	80013a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_Button_Pin */
  GPIO_InitStruct.Pin = USER_Button_Pin;
 8000800:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000804:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000806:	4b33      	ldr	r3, [pc, #204]	@ (80008d4 <MX_GPIO_Init+0x308>)
 8000808:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080a:	2300      	movs	r3, #0
 800080c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(USER_Button_GPIO_Port, &GPIO_InitStruct);
 800080e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000812:	4619      	mov	r1, r3
 8000814:	4833      	ldr	r0, [pc, #204]	@ (80008e4 <MX_GPIO_Init+0x318>)
 8000816:	f000 fdc7 	bl	80013a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PI15 PI14 PI13 PI12
                           PI11 PI10 PI9 PI8
                           PI1 PI2 PI3 PI0 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_12
 800081a:	f64f 730f 	movw	r3, #65295	@ 0xff0f
 800081e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000820:	2302      	movs	r3, #2
 8000822:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000824:	2300      	movs	r3, #0
 8000826:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000828:	2303      	movs	r3, #3
 800082a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_HSPI1;
 800082c:	2308      	movs	r3, #8
 800082e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000830:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000834:	4619      	mov	r1, r3
 8000836:	4826      	ldr	r0, [pc, #152]	@ (80008d0 <MX_GPIO_Init+0x304>)
 8000838:	f000 fdb6 	bl	80013a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : TEMP_INTN_Pin */
  GPIO_InitStruct.Pin = TEMP_INTN_Pin;
 800083c:	2304      	movs	r3, #4
 800083e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000840:	4b24      	ldr	r3, [pc, #144]	@ (80008d4 <MX_GPIO_Init+0x308>)
 8000842:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000844:	2300      	movs	r3, #0
 8000846:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(TEMP_INTN_GPIO_Port, &GPIO_InitStruct);
 8000848:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800084c:	4619      	mov	r1, r3
 800084e:	4826      	ldr	r0, [pc, #152]	@ (80008e8 <MX_GPIO_Init+0x31c>)
 8000850:	f000 fdaa 	bl	80013a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH14 PH15 PH10 PH11
                           PH13 PH9 PH12 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_10|GPIO_PIN_11
 8000854:	f44f 437e 	mov.w	r3, #65024	@ 0xfe00
 8000858:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_13|GPIO_PIN_9|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800085a:	2302      	movs	r3, #2
 800085c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085e:	2300      	movs	r3, #0
 8000860:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000862:	2303      	movs	r3, #3
 8000864:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_HSPI1;
 8000866:	2308      	movs	r3, #8
 8000868:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800086a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800086e:	4619      	mov	r1, r3
 8000870:	4816      	ldr	r0, [pc, #88]	@ (80008cc <MX_GPIO_Init+0x300>)
 8000872:	f000 fd99 	bl	80013a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DSI_TOUCH_INT_Pin UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = DSI_TOUCH_INT_Pin|UCPD_FLT_Pin;
 8000876:	f44f 5388 	mov.w	r3, #4352	@ 0x1100
 800087a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800087c:	4b15      	ldr	r3, [pc, #84]	@ (80008d4 <MX_GPIO_Init+0x308>)
 800087e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000880:	2300      	movs	r3, #0
 8000882:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000884:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000888:	4619      	mov	r1, r3
 800088a:	480e      	ldr	r0, [pc, #56]	@ (80008c4 <MX_GPIO_Init+0x2f8>)
 800088c:	f000 fd8c 	bl	80013a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_SENSE_Pin */
  GPIO_InitStruct.Pin = VBUS_SENSE_Pin;
 8000890:	2302      	movs	r3, #2
 8000892:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000894:	2303      	movs	r3, #3
 8000896:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000898:	2300      	movs	r3, #0
 800089a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 800089c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80008a0:	4619      	mov	r1, r3
 80008a2:	4812      	ldr	r0, [pc, #72]	@ (80008ec <MX_GPIO_Init+0x320>)
 80008a4:	f000 fd80 	bl	80013a8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI13_IRQn, 0, 0);
 80008a8:	2200      	movs	r2, #0
 80008aa:	2100      	movs	r1, #0
 80008ac:	2018      	movs	r0, #24
 80008ae:	f000 fbf9 	bl	80010a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI13_IRQn);
 80008b2:	2018      	movs	r0, #24
 80008b4:	f000 fc10 	bl	80010d8 <HAL_NVIC_EnableIRQ>

}
 80008b8:	bf00      	nop
 80008ba:	3740      	adds	r7, #64	@ 0x40
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	46020c00 	.word	0x46020c00
 80008c4:	42021000 	.word	0x42021000
 80008c8:	42020c00 	.word	0x42020c00
 80008cc:	42021c00 	.word	0x42021c00
 80008d0:	42022000 	.word	0x42022000
 80008d4:	10110000 	.word	0x10110000
 80008d8:	42020400 	.word	0x42020400
 80008dc:	42020000 	.word	0x42020000
 80008e0:	42022400 	.word	0x42022400
 80008e4:	42020800 	.word	0x42020800
 80008e8:	42021400 	.word	0x42021400
 80008ec:	42021800 	.word	0x42021800

080008f0 <MX_ICACHE_Init>:

/* USER CODE END 0 */

/* ICACHE init function */
void MX_ICACHE_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 80008f4:	2000      	movs	r0, #0
 80008f6:	f000 ff93 	bl	8001820 <HAL_ICACHE_ConfigAssociativityMode>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8000900:	f000 f89c 	bl	8000a3c <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000904:	f000 ffac 	bl	8001860 <HAL_ICACHE_Enable>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 800090e:	f000 f895 	bl	8000a3c <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8000912:	bf00      	nop
 8000914:	bd80      	pop	{r7, pc}
	...

08000918 <HAL_GPIO_EXTI_Rising_Callback>:
	return len;
}


void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
 800091e:	4603      	mov	r3, r0
 8000920:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == USER_Button_Pin)
 8000922:	88fb      	ldrh	r3, [r7, #6]
 8000924:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000928:	d103      	bne.n	8000932 <HAL_GPIO_EXTI_Rising_Callback+0x1a>
	{
		//mode = 1;
		HAL_GPIO_TogglePin(GPIOE, LED_RED_Pin);
 800092a:	2102      	movs	r1, #2
 800092c:	4803      	ldr	r0, [pc, #12]	@ (800093c <HAL_GPIO_EXTI_Rising_Callback+0x24>)
 800092e:	f000 ff2b 	bl	8001788 <HAL_GPIO_TogglePin>
	}
}
 8000932:	bf00      	nop
 8000934:	3708      	adds	r7, #8
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	42021000 	.word	0x42021000

08000940 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000944:	f000 fa0c 	bl	8000d60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the System Power */
  SystemPower_Config();
 8000948:	f000 f86c 	bl	8000a24 <SystemPower_Config>

  /* Configure the system clock */
  SystemClock_Config();
 800094c:	f000 f812 	bl	8000974 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000950:	f7ff fe3c 	bl	80005cc <MX_GPIO_Init>
  MX_ICACHE_Init();
 8000954:	f7ff ffcc 	bl	80008f0 <MX_ICACHE_Init>
  MX_USART1_UART_Init();
 8000958:	f000 f90a 	bl	8000b70 <MX_USART1_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOE, LED_GREEN_Pin);
 800095c:	2101      	movs	r1, #1
 800095e:	4804      	ldr	r0, [pc, #16]	@ (8000970 <main+0x30>)
 8000960:	f000 ff12 	bl	8001788 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 8000964:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000968:	f000 fac0 	bl	8000eec <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOE, LED_GREEN_Pin);
 800096c:	e7f6      	b.n	800095c <main+0x1c>
 800096e:	bf00      	nop
 8000970:	42021000 	.word	0x42021000

08000974 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b09e      	sub	sp, #120	@ 0x78
 8000978:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800097a:	f107 0318 	add.w	r3, r7, #24
 800097e:	2260      	movs	r2, #96	@ 0x60
 8000980:	2100      	movs	r1, #0
 8000982:	4618      	mov	r0, r3
 8000984:	f006 fbc8 	bl	8007118 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000988:	463b      	mov	r3, r7
 800098a:	2200      	movs	r2, #0
 800098c:	601a      	str	r2, [r3, #0]
 800098e:	605a      	str	r2, [r3, #4]
 8000990:	609a      	str	r2, [r3, #8]
 8000992:	60da      	str	r2, [r3, #12]
 8000994:	611a      	str	r2, [r3, #16]
 8000996:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000998:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 800099c:	f000 ff70 	bl	8001880 <HAL_PWREx_ControlVoltageScaling>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <SystemClock_Config+0x36>
  {
    Error_Handler();
 80009a6:	f000 f849 	bl	8000a3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009aa:	2301      	movs	r3, #1
 80009ac:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009ae:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80009b2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009b4:	2302      	movs	r3, #2
 80009b6:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009b8:	2303      	movs	r3, #3
 80009ba:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 80009bc:	2300      	movs	r3, #0
 80009be:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80009c0:	2301      	movs	r3, #1
 80009c2:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 10;
 80009c4:	230a      	movs	r3, #10
 80009c6:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLP = 8;
 80009c8:	2308      	movs	r3, #8
 80009ca:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80009cc:	2302      	movs	r3, #2
 80009ce:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLR = 1;
 80009d0:	2301      	movs	r3, #1
 80009d2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 80009d4:	230c      	movs	r3, #12
 80009d6:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80009d8:	2300      	movs	r3, #0
 80009da:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009dc:	f107 0318 	add.w	r3, r7, #24
 80009e0:	4618      	mov	r0, r3
 80009e2:	f001 f839 	bl	8001a58 <HAL_RCC_OscConfig>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 80009ec:	f000 f826 	bl	8000a3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009f0:	231f      	movs	r3, #31
 80009f2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009f4:	2303      	movs	r3, #3
 80009f6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009f8:	2300      	movs	r3, #0
 80009fa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009fc:	2300      	movs	r3, #0
 80009fe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a00:	2300      	movs	r3, #0
 8000a02:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000a04:	2300      	movs	r3, #0
 8000a06:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a08:	463b      	mov	r3, r7
 8000a0a:	2104      	movs	r1, #4
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f001 feff 	bl	8002810 <HAL_RCC_ClockConfig>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000a18:	f000 f810 	bl	8000a3c <Error_Handler>
  }
}
 8000a1c:	bf00      	nop
 8000a1e:	3778      	adds	r7, #120	@ 0x78
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}

08000a24 <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 8000a28:	2002      	movs	r0, #2
 8000a2a:	f000 ffb5 	bl	8001998 <HAL_PWREx_ConfigSupply>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d001      	beq.n	8000a38 <SystemPower_Config+0x14>
  {
    Error_Handler();
 8000a34:	f000 f802 	bl	8000a3c <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 8000a38:	bf00      	nop
 8000a3a:	bd80      	pop	{r7, pc}

08000a3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a40:	b672      	cpsid	i
}
 8000a42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a44:	bf00      	nop
 8000a46:	e7fd      	b.n	8000a44 <Error_Handler+0x8>

08000a48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000a4e:	4b0a      	ldr	r3, [pc, #40]	@ (8000a78 <HAL_MspInit+0x30>)
 8000a50:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000a54:	4a08      	ldr	r2, [pc, #32]	@ (8000a78 <HAL_MspInit+0x30>)
 8000a56:	f043 0304 	orr.w	r3, r3, #4
 8000a5a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8000a5e:	4b06      	ldr	r3, [pc, #24]	@ (8000a78 <HAL_MspInit+0x30>)
 8000a60:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000a64:	f003 0304 	and.w	r3, r3, #4
 8000a68:	607b      	str	r3, [r7, #4]
 8000a6a:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8000a6c:	f000 ffe4 	bl	8001a38 <HAL_PWREx_EnableVddIO2>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a70:	bf00      	nop
 8000a72:	3708      	adds	r7, #8
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	46020c00 	.word	0x46020c00

08000a7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a80:	bf00      	nop
 8000a82:	e7fd      	b.n	8000a80 <NMI_Handler+0x4>

08000a84 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a88:	bf00      	nop
 8000a8a:	e7fd      	b.n	8000a88 <HardFault_Handler+0x4>

08000a8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a90:	bf00      	nop
 8000a92:	e7fd      	b.n	8000a90 <MemManage_Handler+0x4>

08000a94 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a98:	bf00      	nop
 8000a9a:	e7fd      	b.n	8000a98 <BusFault_Handler+0x4>

08000a9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000aa0:	bf00      	nop
 8000aa2:	e7fd      	b.n	8000aa0 <UsageFault_Handler+0x4>

08000aa4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000aa8:	bf00      	nop
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr

08000ab2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ab2:	b480      	push	{r7}
 8000ab4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ab6:	bf00      	nop
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abe:	4770      	bx	lr

08000ac0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ac4:	bf00      	nop
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000acc:	4770      	bx	lr

08000ace <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ace:	b580      	push	{r7, lr}
 8000ad0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ad2:	f000 f9eb 	bl	8000eac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ad6:	bf00      	nop
 8000ad8:	bd80      	pop	{r7, pc}

08000ada <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 8000ada:	b580      	push	{r7, lr}
 8000adc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Button_Pin);
 8000ade:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000ae2:	f000 fe6b 	bl	80017bc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 8000ae6:	bf00      	nop
 8000ae8:	bd80      	pop	{r7, pc}
	...

08000aec <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000af0:	4802      	ldr	r0, [pc, #8]	@ (8000afc <USART1_IRQHandler+0x10>)
 8000af2:	f005 faa9 	bl	8006048 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000af6:	bf00      	nop
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	20000028 	.word	0x20000028

08000b00 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000b04:	4b18      	ldr	r3, [pc, #96]	@ (8000b68 <SystemInit+0x68>)
 8000b06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b0a:	4a17      	ldr	r2, [pc, #92]	@ (8000b68 <SystemInit+0x68>)
 8000b0c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b10:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8000b14:	4b15      	ldr	r3, [pc, #84]	@ (8000b6c <SystemInit+0x6c>)
 8000b16:	2201      	movs	r2, #1
 8000b18:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8000b1a:	4b14      	ldr	r3, [pc, #80]	@ (8000b6c <SystemInit+0x6c>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8000b20:	4b12      	ldr	r3, [pc, #72]	@ (8000b6c <SystemInit+0x6c>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8000b26:	4b11      	ldr	r3, [pc, #68]	@ (8000b6c <SystemInit+0x6c>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8000b2c:	4b0f      	ldr	r3, [pc, #60]	@ (8000b6c <SystemInit+0x6c>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4a0e      	ldr	r2, [pc, #56]	@ (8000b6c <SystemInit+0x6c>)
 8000b32:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 8000b36:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8000b3a:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8000b3c:	4b0b      	ldr	r3, [pc, #44]	@ (8000b6c <SystemInit+0x6c>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8000b42:	4b0a      	ldr	r3, [pc, #40]	@ (8000b6c <SystemInit+0x6c>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	4a09      	ldr	r2, [pc, #36]	@ (8000b6c <SystemInit+0x6c>)
 8000b48:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000b4c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8000b4e:	4b07      	ldr	r3, [pc, #28]	@ (8000b6c <SystemInit+0x6c>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b54:	4b04      	ldr	r3, [pc, #16]	@ (8000b68 <SystemInit+0x68>)
 8000b56:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000b5a:	609a      	str	r2, [r3, #8]
  #endif
}
 8000b5c:	bf00      	nop
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop
 8000b68:	e000ed00 	.word	0xe000ed00
 8000b6c:	46020c00 	.word	0x46020c00

08000b70 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b74:	4b22      	ldr	r3, [pc, #136]	@ (8000c00 <MX_USART1_UART_Init+0x90>)
 8000b76:	4a23      	ldr	r2, [pc, #140]	@ (8000c04 <MX_USART1_UART_Init+0x94>)
 8000b78:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000b7a:	4b21      	ldr	r3, [pc, #132]	@ (8000c00 <MX_USART1_UART_Init+0x90>)
 8000b7c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b80:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b82:	4b1f      	ldr	r3, [pc, #124]	@ (8000c00 <MX_USART1_UART_Init+0x90>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b88:	4b1d      	ldr	r3, [pc, #116]	@ (8000c00 <MX_USART1_UART_Init+0x90>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b8e:	4b1c      	ldr	r3, [pc, #112]	@ (8000c00 <MX_USART1_UART_Init+0x90>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b94:	4b1a      	ldr	r3, [pc, #104]	@ (8000c00 <MX_USART1_UART_Init+0x90>)
 8000b96:	220c      	movs	r2, #12
 8000b98:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b9a:	4b19      	ldr	r3, [pc, #100]	@ (8000c00 <MX_USART1_UART_Init+0x90>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ba0:	4b17      	ldr	r3, [pc, #92]	@ (8000c00 <MX_USART1_UART_Init+0x90>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ba6:	4b16      	ldr	r3, [pc, #88]	@ (8000c00 <MX_USART1_UART_Init+0x90>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000bac:	4b14      	ldr	r3, [pc, #80]	@ (8000c00 <MX_USART1_UART_Init+0x90>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bb2:	4b13      	ldr	r3, [pc, #76]	@ (8000c00 <MX_USART1_UART_Init+0x90>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000bb8:	4811      	ldr	r0, [pc, #68]	@ (8000c00 <MX_USART1_UART_Init+0x90>)
 8000bba:	f005 f9f5 	bl	8005fa8 <HAL_UART_Init>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000bc4:	f7ff ff3a 	bl	8000a3c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bc8:	2100      	movs	r1, #0
 8000bca:	480d      	ldr	r0, [pc, #52]	@ (8000c00 <MX_USART1_UART_Init+0x90>)
 8000bcc:	f006 f9d9 	bl	8006f82 <HAL_UARTEx_SetTxFifoThreshold>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000bd6:	f7ff ff31 	bl	8000a3c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bda:	2100      	movs	r1, #0
 8000bdc:	4808      	ldr	r0, [pc, #32]	@ (8000c00 <MX_USART1_UART_Init+0x90>)
 8000bde:	f006 fa0e 	bl	8006ffe <HAL_UARTEx_SetRxFifoThreshold>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d001      	beq.n	8000bec <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000be8:	f7ff ff28 	bl	8000a3c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000bec:	4804      	ldr	r0, [pc, #16]	@ (8000c00 <MX_USART1_UART_Init+0x90>)
 8000bee:	f006 f98f 	bl	8006f10 <HAL_UARTEx_DisableFifoMode>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d001      	beq.n	8000bfc <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000bf8:	f7ff ff20 	bl	8000a3c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000bfc:	bf00      	nop
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	20000028 	.word	0x20000028
 8000c04:	40013800 	.word	0x40013800

08000c08 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b0c2      	sub	sp, #264	@ 0x108
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000c12:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000c16:	6018      	str	r0, [r3, #0]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c18:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	601a      	str	r2, [r3, #0]
 8000c20:	605a      	str	r2, [r3, #4]
 8000c22:	609a      	str	r2, [r3, #8]
 8000c24:	60da      	str	r2, [r3, #12]
 8000c26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c28:	f107 0310 	add.w	r3, r7, #16
 8000c2c:	22e0      	movs	r2, #224	@ 0xe0
 8000c2e:	2100      	movs	r1, #0
 8000c30:	4618      	mov	r0, r3
 8000c32:	f006 fa71 	bl	8007118 <memset>
  if(uartHandle->Instance==USART1)
 8000c36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000c3a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	4a2f      	ldr	r2, [pc, #188]	@ (8000d00 <HAL_UART_MspInit+0xf8>)
 8000c44:	4293      	cmp	r3, r2
 8000c46:	d155      	bne.n	8000cf4 <HAL_UART_MspInit+0xec>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000c48:	f04f 0201 	mov.w	r2, #1
 8000c4c:	f04f 0300 	mov.w	r3, #0
 8000c50:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000c54:	2300      	movs	r3, #0
 8000c56:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c58:	f107 0310 	add.w	r3, r7, #16
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f002 f9a7 	bl	8002fb0 <HAL_RCCEx_PeriphCLKConfig>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d001      	beq.n	8000c6c <HAL_UART_MspInit+0x64>
    {
      Error_Handler();
 8000c68:	f7ff fee8 	bl	8000a3c <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c6c:	4b25      	ldr	r3, [pc, #148]	@ (8000d04 <HAL_UART_MspInit+0xfc>)
 8000c6e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000c72:	4a24      	ldr	r2, [pc, #144]	@ (8000d04 <HAL_UART_MspInit+0xfc>)
 8000c74:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c78:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8000c7c:	4b21      	ldr	r3, [pc, #132]	@ (8000d04 <HAL_UART_MspInit+0xfc>)
 8000c7e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000c82:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c86:	60fb      	str	r3, [r7, #12]
 8000c88:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c8a:	4b1e      	ldr	r3, [pc, #120]	@ (8000d04 <HAL_UART_MspInit+0xfc>)
 8000c8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c90:	4a1c      	ldr	r2, [pc, #112]	@ (8000d04 <HAL_UART_MspInit+0xfc>)
 8000c92:	f043 0301 	orr.w	r3, r3, #1
 8000c96:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000c9a:	4b1a      	ldr	r3, [pc, #104]	@ (8000d04 <HAL_UART_MspInit+0xfc>)
 8000c9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ca0:	f003 0201 	and.w	r2, r3, #1
 8000ca4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000ca8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000cac:	601a      	str	r2, [r3, #0]
 8000cae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000cb2:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000cb6:	681b      	ldr	r3, [r3, #0]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_TX_Pin;
 8000cb8:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000cbc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc0:	2302      	movs	r3, #2
 8000cc2:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000cd2:	2307      	movs	r3, #7
 8000cd4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cd8:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8000cdc:	4619      	mov	r1, r3
 8000cde:	480a      	ldr	r0, [pc, #40]	@ (8000d08 <HAL_UART_MspInit+0x100>)
 8000ce0:	f000 fb62 	bl	80013a8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	2100      	movs	r1, #0
 8000ce8:	203d      	movs	r0, #61	@ 0x3d
 8000cea:	f000 f9db 	bl	80010a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000cee:	203d      	movs	r0, #61	@ 0x3d
 8000cf0:	f000 f9f2 	bl	80010d8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000cf4:	bf00      	nop
 8000cf6:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	40013800 	.word	0x40013800
 8000d04:	46020c00 	.word	0x46020c00
 8000d08:	42020000 	.word	0x42020000

08000d0c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8000d0c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d44 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d10:	f7ff fef6 	bl	8000b00 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000d14:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000d16:	e003      	b.n	8000d20 <LoopCopyDataInit>

08000d18 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000d18:	4b0b      	ldr	r3, [pc, #44]	@ (8000d48 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000d1a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000d1c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000d1e:	3104      	adds	r1, #4

08000d20 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000d20:	480a      	ldr	r0, [pc, #40]	@ (8000d4c <LoopForever+0xa>)
	ldr	r3, =_edata
 8000d22:	4b0b      	ldr	r3, [pc, #44]	@ (8000d50 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000d24:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000d26:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000d28:	d3f6      	bcc.n	8000d18 <CopyDataInit>
	ldr	r2, =_sbss
 8000d2a:	4a0a      	ldr	r2, [pc, #40]	@ (8000d54 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000d2c:	e002      	b.n	8000d34 <LoopFillZerobss>

08000d2e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000d2e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000d30:	f842 3b04 	str.w	r3, [r2], #4

08000d34 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000d34:	4b08      	ldr	r3, [pc, #32]	@ (8000d58 <LoopForever+0x16>)
	cmp	r2, r3
 8000d36:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000d38:	d3f9      	bcc.n	8000d2e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d3a:	f006 f9f5 	bl	8007128 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d3e:	f7ff fdff 	bl	8000940 <main>

08000d42 <LoopForever>:

LoopForever:
    b LoopForever
 8000d42:	e7fe      	b.n	8000d42 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8000d44:	202f0000 	.word	0x202f0000
	ldr	r3, =_sidata
 8000d48:	08007298 	.word	0x08007298
	ldr	r0, =_sdata
 8000d4c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000d50:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000d54:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000d58:	200000c0 	.word	0x200000c0

08000d5c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d5c:	e7fe      	b.n	8000d5c <ADC1_2_IRQHandler>
	...

08000d60 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d64:	4b12      	ldr	r3, [pc, #72]	@ (8000db0 <HAL_Init+0x50>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4a11      	ldr	r2, [pc, #68]	@ (8000db0 <HAL_Init+0x50>)
 8000d6a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d6e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d70:	2003      	movs	r0, #3
 8000d72:	f000 f98c 	bl	800108e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8000d76:	f001 ff3d 	bl	8002bf4 <HAL_RCC_GetSysClockFreq>
 8000d7a:	4602      	mov	r2, r0
 8000d7c:	4b0d      	ldr	r3, [pc, #52]	@ (8000db4 <HAL_Init+0x54>)
 8000d7e:	6a1b      	ldr	r3, [r3, #32]
 8000d80:	f003 030f 	and.w	r3, r3, #15
 8000d84:	490c      	ldr	r1, [pc, #48]	@ (8000db8 <HAL_Init+0x58>)
 8000d86:	5ccb      	ldrb	r3, [r1, r3]
 8000d88:	fa22 f303 	lsr.w	r3, r2, r3
 8000d8c:	4a0b      	ldr	r2, [pc, #44]	@ (8000dbc <HAL_Init+0x5c>)
 8000d8e:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000d90:	2004      	movs	r0, #4
 8000d92:	f000 f9d1 	bl	8001138 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d96:	200f      	movs	r0, #15
 8000d98:	f000 f812 	bl	8000dc0 <HAL_InitTick>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d001      	beq.n	8000da6 <HAL_Init+0x46>
  {
    return HAL_ERROR;
 8000da2:	2301      	movs	r3, #1
 8000da4:	e002      	b.n	8000dac <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000da6:	f7ff fe4f 	bl	8000a48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000daa:	2300      	movs	r3, #0
}
 8000dac:	4618      	mov	r0, r3
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	40022000 	.word	0x40022000
 8000db4:	46020c00 	.word	0x46020c00
 8000db8:	08007188 	.word	0x08007188
 8000dbc:	20000000 	.word	0x20000000

08000dc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b084      	sub	sp, #16
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8000dcc:	4b33      	ldr	r3, [pc, #204]	@ (8000e9c <HAL_InitTick+0xdc>)
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d101      	bne.n	8000dd8 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	e05c      	b.n	8000e92 <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8000dd8:	4b31      	ldr	r3, [pc, #196]	@ (8000ea0 <HAL_InitTick+0xe0>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	f003 0304 	and.w	r3, r3, #4
 8000de0:	2b04      	cmp	r3, #4
 8000de2:	d10c      	bne.n	8000dfe <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8000de4:	4b2f      	ldr	r3, [pc, #188]	@ (8000ea4 <HAL_InitTick+0xe4>)
 8000de6:	681a      	ldr	r2, [r3, #0]
 8000de8:	4b2c      	ldr	r3, [pc, #176]	@ (8000e9c <HAL_InitTick+0xdc>)
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	4619      	mov	r1, r3
 8000dee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000df2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000df6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dfa:	60fb      	str	r3, [r7, #12]
 8000dfc:	e037      	b.n	8000e6e <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8000dfe:	f000 f9f3 	bl	80011e8 <HAL_SYSTICK_GetCLKSourceConfig>
 8000e02:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8000e04:	68bb      	ldr	r3, [r7, #8]
 8000e06:	2b02      	cmp	r3, #2
 8000e08:	d023      	beq.n	8000e52 <HAL_InitTick+0x92>
 8000e0a:	68bb      	ldr	r3, [r7, #8]
 8000e0c:	2b02      	cmp	r3, #2
 8000e0e:	d82d      	bhi.n	8000e6c <HAL_InitTick+0xac>
 8000e10:	68bb      	ldr	r3, [r7, #8]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d003      	beq.n	8000e1e <HAL_InitTick+0x5e>
 8000e16:	68bb      	ldr	r3, [r7, #8]
 8000e18:	2b01      	cmp	r3, #1
 8000e1a:	d00d      	beq.n	8000e38 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8000e1c:	e026      	b.n	8000e6c <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8000e1e:	4b21      	ldr	r3, [pc, #132]	@ (8000ea4 <HAL_InitTick+0xe4>)
 8000e20:	681a      	ldr	r2, [r3, #0]
 8000e22:	4b1e      	ldr	r3, [pc, #120]	@ (8000e9c <HAL_InitTick+0xdc>)
 8000e24:	781b      	ldrb	r3, [r3, #0]
 8000e26:	4619      	mov	r1, r3
 8000e28:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8000e2c:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e30:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e34:	60fb      	str	r3, [r7, #12]
        break;
 8000e36:	e01a      	b.n	8000e6e <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8000e38:	4b18      	ldr	r3, [pc, #96]	@ (8000e9c <HAL_InitTick+0xdc>)
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	461a      	mov	r2, r3
 8000e3e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e42:	fbb3 f3f2 	udiv	r3, r3, r2
 8000e46:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8000e4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e4e:	60fb      	str	r3, [r7, #12]
        break;
 8000e50:	e00d      	b.n	8000e6e <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8000e52:	4b12      	ldr	r3, [pc, #72]	@ (8000e9c <HAL_InitTick+0xdc>)
 8000e54:	781b      	ldrb	r3, [r3, #0]
 8000e56:	461a      	mov	r2, r3
 8000e58:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e5c:	fbb3 f3f2 	udiv	r3, r3, r2
 8000e60:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000e64:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e68:	60fb      	str	r3, [r7, #12]
        break;
 8000e6a:	e000      	b.n	8000e6e <HAL_InitTick+0xae>
        break;
 8000e6c:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8000e6e:	68f8      	ldr	r0, [r7, #12]
 8000e70:	f000 f940 	bl	80010f4 <HAL_SYSTICK_Config>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	e009      	b.n	8000e92 <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e7e:	2200      	movs	r2, #0
 8000e80:	6879      	ldr	r1, [r7, #4]
 8000e82:	f04f 30ff 	mov.w	r0, #4294967295
 8000e86:	f000 f90d 	bl	80010a4 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8000e8a:	4a07      	ldr	r2, [pc, #28]	@ (8000ea8 <HAL_InitTick+0xe8>)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8000e90:	2300      	movs	r3, #0
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	3710      	adds	r7, #16
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	20000008 	.word	0x20000008
 8000ea0:	e000e010 	.word	0xe000e010
 8000ea4:	20000000 	.word	0x20000000
 8000ea8:	20000004 	.word	0x20000004

08000eac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000eb0:	4b06      	ldr	r3, [pc, #24]	@ (8000ecc <HAL_IncTick+0x20>)
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	461a      	mov	r2, r3
 8000eb6:	4b06      	ldr	r3, [pc, #24]	@ (8000ed0 <HAL_IncTick+0x24>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	4413      	add	r3, r2
 8000ebc:	4a04      	ldr	r2, [pc, #16]	@ (8000ed0 <HAL_IncTick+0x24>)
 8000ebe:	6013      	str	r3, [r2, #0]
}
 8000ec0:	bf00      	nop
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	20000008 	.word	0x20000008
 8000ed0:	200000bc 	.word	0x200000bc

08000ed4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ed8:	4b03      	ldr	r3, [pc, #12]	@ (8000ee8 <HAL_GetTick+0x14>)
 8000eda:	681b      	ldr	r3, [r3, #0]
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop
 8000ee8:	200000bc 	.word	0x200000bc

08000eec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b084      	sub	sp, #16
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ef4:	f7ff ffee 	bl	8000ed4 <HAL_GetTick>
 8000ef8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f04:	d005      	beq.n	8000f12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f06:	4b0a      	ldr	r3, [pc, #40]	@ (8000f30 <HAL_Delay+0x44>)
 8000f08:	781b      	ldrb	r3, [r3, #0]
 8000f0a:	461a      	mov	r2, r3
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	4413      	add	r3, r2
 8000f10:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f12:	bf00      	nop
 8000f14:	f7ff ffde 	bl	8000ed4 <HAL_GetTick>
 8000f18:	4602      	mov	r2, r0
 8000f1a:	68bb      	ldr	r3, [r7, #8]
 8000f1c:	1ad3      	subs	r3, r2, r3
 8000f1e:	68fa      	ldr	r2, [r7, #12]
 8000f20:	429a      	cmp	r2, r3
 8000f22:	d8f7      	bhi.n	8000f14 <HAL_Delay+0x28>
  {
  }
}
 8000f24:	bf00      	nop
 8000f26:	bf00      	nop
 8000f28:	3710      	adds	r7, #16
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	20000008 	.word	0x20000008

08000f34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b085      	sub	sp, #20
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	f003 0307 	and.w	r3, r3, #7
 8000f42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f44:	4b0c      	ldr	r3, [pc, #48]	@ (8000f78 <__NVIC_SetPriorityGrouping+0x44>)
 8000f46:	68db      	ldr	r3, [r3, #12]
 8000f48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f4a:	68ba      	ldr	r2, [r7, #8]
 8000f4c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f50:	4013      	ands	r3, r2
 8000f52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f58:	68bb      	ldr	r3, [r7, #8]
 8000f5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f5c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f60:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f66:	4a04      	ldr	r2, [pc, #16]	@ (8000f78 <__NVIC_SetPriorityGrouping+0x44>)
 8000f68:	68bb      	ldr	r3, [r7, #8]
 8000f6a:	60d3      	str	r3, [r2, #12]
}
 8000f6c:	bf00      	nop
 8000f6e:	3714      	adds	r7, #20
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr
 8000f78:	e000ed00 	.word	0xe000ed00

08000f7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f80:	4b04      	ldr	r3, [pc, #16]	@ (8000f94 <__NVIC_GetPriorityGrouping+0x18>)
 8000f82:	68db      	ldr	r3, [r3, #12]
 8000f84:	0a1b      	lsrs	r3, r3, #8
 8000f86:	f003 0307 	and.w	r3, r3, #7
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr
 8000f94:	e000ed00 	.word	0xe000ed00

08000f98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000fa2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	db0b      	blt.n	8000fc2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000faa:	88fb      	ldrh	r3, [r7, #6]
 8000fac:	f003 021f 	and.w	r2, r3, #31
 8000fb0:	4907      	ldr	r1, [pc, #28]	@ (8000fd0 <__NVIC_EnableIRQ+0x38>)
 8000fb2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fb6:	095b      	lsrs	r3, r3, #5
 8000fb8:	2001      	movs	r0, #1
 8000fba:	fa00 f202 	lsl.w	r2, r0, r2
 8000fbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000fc2:	bf00      	nop
 8000fc4:	370c      	adds	r7, #12
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	e000e100 	.word	0xe000e100

08000fd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b083      	sub	sp, #12
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	4603      	mov	r3, r0
 8000fdc:	6039      	str	r1, [r7, #0]
 8000fde:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000fe0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	db0a      	blt.n	8000ffe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	b2da      	uxtb	r2, r3
 8000fec:	490c      	ldr	r1, [pc, #48]	@ (8001020 <__NVIC_SetPriority+0x4c>)
 8000fee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ff2:	0112      	lsls	r2, r2, #4
 8000ff4:	b2d2      	uxtb	r2, r2
 8000ff6:	440b      	add	r3, r1
 8000ff8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ffc:	e00a      	b.n	8001014 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	b2da      	uxtb	r2, r3
 8001002:	4908      	ldr	r1, [pc, #32]	@ (8001024 <__NVIC_SetPriority+0x50>)
 8001004:	88fb      	ldrh	r3, [r7, #6]
 8001006:	f003 030f 	and.w	r3, r3, #15
 800100a:	3b04      	subs	r3, #4
 800100c:	0112      	lsls	r2, r2, #4
 800100e:	b2d2      	uxtb	r2, r2
 8001010:	440b      	add	r3, r1
 8001012:	761a      	strb	r2, [r3, #24]
}
 8001014:	bf00      	nop
 8001016:	370c      	adds	r7, #12
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr
 8001020:	e000e100 	.word	0xe000e100
 8001024:	e000ed00 	.word	0xe000ed00

08001028 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001028:	b480      	push	{r7}
 800102a:	b089      	sub	sp, #36	@ 0x24
 800102c:	af00      	add	r7, sp, #0
 800102e:	60f8      	str	r0, [r7, #12]
 8001030:	60b9      	str	r1, [r7, #8]
 8001032:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	f003 0307 	and.w	r3, r3, #7
 800103a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800103c:	69fb      	ldr	r3, [r7, #28]
 800103e:	f1c3 0307 	rsb	r3, r3, #7
 8001042:	2b04      	cmp	r3, #4
 8001044:	bf28      	it	cs
 8001046:	2304      	movcs	r3, #4
 8001048:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800104a:	69fb      	ldr	r3, [r7, #28]
 800104c:	3304      	adds	r3, #4
 800104e:	2b06      	cmp	r3, #6
 8001050:	d902      	bls.n	8001058 <NVIC_EncodePriority+0x30>
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	3b03      	subs	r3, #3
 8001056:	e000      	b.n	800105a <NVIC_EncodePriority+0x32>
 8001058:	2300      	movs	r3, #0
 800105a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800105c:	f04f 32ff 	mov.w	r2, #4294967295
 8001060:	69bb      	ldr	r3, [r7, #24]
 8001062:	fa02 f303 	lsl.w	r3, r2, r3
 8001066:	43da      	mvns	r2, r3
 8001068:	68bb      	ldr	r3, [r7, #8]
 800106a:	401a      	ands	r2, r3
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001070:	f04f 31ff 	mov.w	r1, #4294967295
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	fa01 f303 	lsl.w	r3, r1, r3
 800107a:	43d9      	mvns	r1, r3
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001080:	4313      	orrs	r3, r2
         );
}
 8001082:	4618      	mov	r0, r3
 8001084:	3724      	adds	r7, #36	@ 0x24
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr

0800108e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800108e:	b580      	push	{r7, lr}
 8001090:	b082      	sub	sp, #8
 8001092:	af00      	add	r7, sp, #0
 8001094:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001096:	6878      	ldr	r0, [r7, #4]
 8001098:	f7ff ff4c 	bl	8000f34 <__NVIC_SetPriorityGrouping>
}
 800109c:	bf00      	nop
 800109e:	3708      	adds	r7, #8
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}

080010a4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b086      	sub	sp, #24
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	4603      	mov	r3, r0
 80010ac:	60b9      	str	r1, [r7, #8]
 80010ae:	607a      	str	r2, [r7, #4]
 80010b0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80010b2:	f7ff ff63 	bl	8000f7c <__NVIC_GetPriorityGrouping>
 80010b6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010b8:	687a      	ldr	r2, [r7, #4]
 80010ba:	68b9      	ldr	r1, [r7, #8]
 80010bc:	6978      	ldr	r0, [r7, #20]
 80010be:	f7ff ffb3 	bl	8001028 <NVIC_EncodePriority>
 80010c2:	4602      	mov	r2, r0
 80010c4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80010c8:	4611      	mov	r1, r2
 80010ca:	4618      	mov	r0, r3
 80010cc:	f7ff ff82 	bl	8000fd4 <__NVIC_SetPriority>
}
 80010d0:	bf00      	nop
 80010d2:	3718      	adds	r7, #24
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}

080010d8 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
 80010de:	4603      	mov	r3, r0
 80010e0:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010e6:	4618      	mov	r0, r3
 80010e8:	f7ff ff56 	bl	8000f98 <__NVIC_EnableIRQ>
}
 80010ec:	bf00      	nop
 80010ee:	3708      	adds	r7, #8
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}

080010f4 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b083      	sub	sp, #12
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	3b01      	subs	r3, #1
 8001100:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001104:	d301      	bcc.n	800110a <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8001106:	2301      	movs	r3, #1
 8001108:	e00d      	b.n	8001126 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 800110a:	4a0a      	ldr	r2, [pc, #40]	@ (8001134 <HAL_SYSTICK_Config+0x40>)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	3b01      	subs	r3, #1
 8001110:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8001112:	4b08      	ldr	r3, [pc, #32]	@ (8001134 <HAL_SYSTICK_Config+0x40>)
 8001114:	2200      	movs	r2, #0
 8001116:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8001118:	4b06      	ldr	r3, [pc, #24]	@ (8001134 <HAL_SYSTICK_Config+0x40>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a05      	ldr	r2, [pc, #20]	@ (8001134 <HAL_SYSTICK_Config+0x40>)
 800111e:	f043 0303 	orr.w	r3, r3, #3
 8001122:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8001124:	2300      	movs	r3, #0
}
 8001126:	4618      	mov	r0, r3
 8001128:	370c      	adds	r7, #12
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop
 8001134:	e000e010 	.word	0xe000e010

08001138 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001138:	b480      	push	{r7}
 800113a:	b083      	sub	sp, #12
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	2b04      	cmp	r3, #4
 8001144:	d844      	bhi.n	80011d0 <HAL_SYSTICK_CLKSourceConfig+0x98>
 8001146:	a201      	add	r2, pc, #4	@ (adr r2, 800114c <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8001148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800114c:	0800116f 	.word	0x0800116f
 8001150:	0800118d 	.word	0x0800118d
 8001154:	080011af 	.word	0x080011af
 8001158:	080011d1 	.word	0x080011d1
 800115c:	08001161 	.word	0x08001161
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001160:	4b1f      	ldr	r3, [pc, #124]	@ (80011e0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a1e      	ldr	r2, [pc, #120]	@ (80011e0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001166:	f043 0304 	orr.w	r3, r3, #4
 800116a:	6013      	str	r3, [r2, #0]
      break;
 800116c:	e031      	b.n	80011d2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 800116e:	4b1c      	ldr	r3, [pc, #112]	@ (80011e0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	4a1b      	ldr	r2, [pc, #108]	@ (80011e0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001174:	f023 0304 	bic.w	r3, r3, #4
 8001178:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 800117a:	4b1a      	ldr	r3, [pc, #104]	@ (80011e4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800117c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001180:	4a18      	ldr	r2, [pc, #96]	@ (80011e4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001182:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8001186:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 800118a:	e022      	b.n	80011d2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 800118c:	4b14      	ldr	r3, [pc, #80]	@ (80011e0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a13      	ldr	r2, [pc, #76]	@ (80011e0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001192:	f023 0304 	bic.w	r3, r3, #4
 8001196:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 8001198:	4b12      	ldr	r3, [pc, #72]	@ (80011e4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800119a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800119e:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80011a2:	4a10      	ldr	r2, [pc, #64]	@ (80011e4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80011a4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80011a8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 80011ac:	e011      	b.n	80011d2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80011ae:	4b0c      	ldr	r3, [pc, #48]	@ (80011e0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4a0b      	ldr	r2, [pc, #44]	@ (80011e0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80011b4:	f023 0304 	bic.w	r3, r3, #4
 80011b8:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 80011ba:	4b0a      	ldr	r3, [pc, #40]	@ (80011e4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80011bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011c0:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80011c4:	4a07      	ldr	r2, [pc, #28]	@ (80011e4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80011c6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80011ca:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 80011ce:	e000      	b.n	80011d2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 80011d0:	bf00      	nop
  }
}
 80011d2:	bf00      	nop
 80011d4:	370c      	adds	r7, #12
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr
 80011de:	bf00      	nop
 80011e0:	e000e010 	.word	0xe000e010
 80011e4:	46020c00 	.word	0x46020c00

080011e8 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b083      	sub	sp, #12
 80011ec:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 80011ee:	4b19      	ldr	r3, [pc, #100]	@ (8001254 <HAL_SYSTICK_GetCLKSourceConfig+0x6c>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f003 0304 	and.w	r3, r3, #4
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d002      	beq.n	8001200 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 80011fa:	2304      	movs	r3, #4
 80011fc:	607b      	str	r3, [r7, #4]
 80011fe:	e021      	b.n	8001244 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL);
 8001200:	4b15      	ldr	r3, [pc, #84]	@ (8001258 <HAL_SYSTICK_GetCLKSourceConfig+0x70>)
 8001202:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001206:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800120a:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001212:	d011      	beq.n	8001238 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800121a:	d810      	bhi.n	800123e <HAL_SYSTICK_GetCLKSourceConfig+0x56>
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d004      	beq.n	800122c <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001228:	d003      	beq.n	8001232 <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 800122a:	e008      	b.n	800123e <HAL_SYSTICK_GetCLKSourceConfig+0x56>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 800122c:	2300      	movs	r3, #0
 800122e:	607b      	str	r3, [r7, #4]
        break;
 8001230:	e008      	b.n	8001244 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 8001232:	2301      	movs	r3, #1
 8001234:	607b      	str	r3, [r7, #4]
        break;
 8001236:	e005      	b.n	8001244 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8001238:	2302      	movs	r3, #2
 800123a:	607b      	str	r3, [r7, #4]
        break;
 800123c:	e002      	b.n	8001244 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 800123e:	2300      	movs	r3, #0
 8001240:	607b      	str	r3, [r7, #4]
        break;
 8001242:	bf00      	nop
    }
  }
  return systick_source;
 8001244:	687b      	ldr	r3, [r7, #4]
}
 8001246:	4618      	mov	r0, r3
 8001248:	370c      	adds	r7, #12
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr
 8001252:	bf00      	nop
 8001254:	e000e010 	.word	0xe000e010
 8001258:	46020c00 	.word	0x46020c00

0800125c <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b084      	sub	sp, #16
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 8001264:	f7ff fe36 	bl	8000ed4 <HAL_GetTick>
 8001268:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d101      	bne.n	8001274 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001270:	2301      	movs	r3, #1
 8001272:	e06b      	b.n	800134c <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800127a:	b2db      	uxtb	r3, r3
 800127c:	2b02      	cmp	r3, #2
 800127e:	d008      	beq.n	8001292 <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	2220      	movs	r2, #32
 8001284:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	2200      	movs	r2, #0
 800128a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 800128e:	2301      	movs	r3, #1
 8001290:	e05c      	b.n	800134c <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	695a      	ldr	r2, [r3, #20]
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f042 0204 	orr.w	r2, r2, #4
 80012a0:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	2205      	movs	r2, #5
 80012a6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 80012aa:	e020      	b.n	80012ee <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 80012ac:	f7ff fe12 	bl	8000ed4 <HAL_GetTick>
 80012b0:	4602      	mov	r2, r0
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	1ad3      	subs	r3, r2, r3
 80012b6:	2b05      	cmp	r3, #5
 80012b8:	d919      	bls.n	80012ee <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012be:	f043 0210 	orr.w	r2, r3, #16
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	2203      	movs	r2, #3
 80012ca:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80012d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d003      	beq.n	80012e2 <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80012de:	2201      	movs	r2, #1
 80012e0:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2200      	movs	r2, #0
 80012e6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        return HAL_ERROR;
 80012ea:	2301      	movs	r3, #1
 80012ec:	e02e      	b.n	800134c <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	691b      	ldr	r3, [r3, #16]
 80012f4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d0d7      	beq.n	80012ac <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	695a      	ldr	r2, [r3, #20]
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f042 0202 	orr.w	r2, r2, #2
 800130a:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	2204      	movs	r2, #4
 8001310:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 800131c:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	2201      	movs	r2, #1
 8001322:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800132a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800132e:	2b00      	cmp	r3, #0
 8001330:	d007      	beq.n	8001342 <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001336:	2201      	movs	r2, #1
 8001338:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	2200      	movs	r2, #0
 8001340:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2200      	movs	r2, #0
 8001346:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800134a:	2300      	movs	r3, #0
}
 800134c:	4618      	mov	r0, r3
 800134e:	3710      	adds	r7, #16
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}

08001354 <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 8001354:	b480      	push	{r7}
 8001356:	b083      	sub	sp, #12
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d101      	bne.n	8001366 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001362:	2301      	movs	r3, #1
 8001364:	e019      	b.n	800139a <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800136c:	b2db      	uxtb	r3, r3
 800136e:	2b02      	cmp	r3, #2
 8001370:	d004      	beq.n	800137c <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2220      	movs	r2, #32
 8001376:	659a      	str	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8001378:	2301      	movs	r3, #1
 800137a:	e00e      	b.n	800139a <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2204      	movs	r2, #4
 8001380:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	695b      	ldr	r3, [r3, #20]
 800138a:	687a      	ldr	r2, [r7, #4]
 800138c:	6812      	ldr	r2, [r2, #0]
 800138e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001392:	f043 0304 	orr.w	r3, r3, #4
 8001396:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 8001398:	2300      	movs	r3, #0
}
 800139a:	4618      	mov	r0, r3
 800139c:	370c      	adds	r7, #12
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr
	...

080013a8 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b089      	sub	sp, #36	@ 0x24
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
 80013b0:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 80013b2:	2300      	movs	r3, #0
 80013b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80013ba:	e1ba      	b.n	8001732 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	681a      	ldr	r2, [r3, #0]
 80013c0:	2101      	movs	r1, #1
 80013c2:	697b      	ldr	r3, [r7, #20]
 80013c4:	fa01 f303 	lsl.w	r3, r1, r3
 80013c8:	4013      	ands	r3, r2
 80013ca:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	f000 81aa 	beq.w	800172c <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	4a55      	ldr	r2, [pc, #340]	@ (8001530 <HAL_GPIO_Init+0x188>)
 80013dc:	4293      	cmp	r3, r2
 80013de:	d15d      	bne.n	800149c <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 80013e6:	2201      	movs	r2, #1
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	fa02 f303 	lsl.w	r3, r2, r3
 80013ee:	43db      	mvns	r3, r3
 80013f0:	69fa      	ldr	r2, [r7, #28]
 80013f2:	4013      	ands	r3, r2
 80013f4:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	f003 0201 	and.w	r2, r3, #1
 80013fe:	697b      	ldr	r3, [r7, #20]
 8001400:	fa02 f303 	lsl.w	r3, r2, r3
 8001404:	69fa      	ldr	r2, [r7, #28]
 8001406:	4313      	orrs	r3, r2
 8001408:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	69fa      	ldr	r2, [r7, #28]
 800140e:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8001410:	4a48      	ldr	r2, [pc, #288]	@ (8001534 <HAL_GPIO_Init+0x18c>)
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001418:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 800141a:	4a46      	ldr	r2, [pc, #280]	@ (8001534 <HAL_GPIO_Init+0x18c>)
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	00db      	lsls	r3, r3, #3
 8001420:	4413      	add	r3, r2
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8001426:	69bb      	ldr	r3, [r7, #24]
 8001428:	08da      	lsrs	r2, r3, #3
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	3208      	adds	r2, #8
 800142e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001432:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8001434:	69bb      	ldr	r3, [r7, #24]
 8001436:	f003 0307 	and.w	r3, r3, #7
 800143a:	009b      	lsls	r3, r3, #2
 800143c:	220f      	movs	r2, #15
 800143e:	fa02 f303 	lsl.w	r3, r2, r3
 8001442:	43db      	mvns	r3, r3
 8001444:	69fa      	ldr	r2, [r7, #28]
 8001446:	4013      	ands	r3, r2
 8001448:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 800144a:	69bb      	ldr	r3, [r7, #24]
 800144c:	f003 0307 	and.w	r3, r3, #7
 8001450:	009b      	lsls	r3, r3, #2
 8001452:	220b      	movs	r2, #11
 8001454:	fa02 f303 	lsl.w	r3, r2, r3
 8001458:	69fa      	ldr	r2, [r7, #28]
 800145a:	4313      	orrs	r3, r2
 800145c:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 800145e:	69bb      	ldr	r3, [r7, #24]
 8001460:	08da      	lsrs	r2, r3, #3
 8001462:	693b      	ldr	r3, [r7, #16]
 8001464:	3208      	adds	r2, #8
 8001466:	69f9      	ldr	r1, [r7, #28]
 8001468:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 800146c:	693b      	ldr	r3, [r7, #16]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8001472:	69bb      	ldr	r3, [r7, #24]
 8001474:	005b      	lsls	r3, r3, #1
 8001476:	2203      	movs	r2, #3
 8001478:	fa02 f303 	lsl.w	r3, r2, r3
 800147c:	43db      	mvns	r3, r3
 800147e:	69fa      	ldr	r2, [r7, #28]
 8001480:	4013      	ands	r3, r2
 8001482:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 8001484:	69bb      	ldr	r3, [r7, #24]
 8001486:	005b      	lsls	r3, r3, #1
 8001488:	2202      	movs	r2, #2
 800148a:	fa02 f303 	lsl.w	r3, r2, r3
 800148e:	69fa      	ldr	r2, [r7, #28]
 8001490:	4313      	orrs	r3, r2
 8001492:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8001494:	693b      	ldr	r3, [r7, #16]
 8001496:	69fa      	ldr	r2, [r7, #28]
 8001498:	601a      	str	r2, [r3, #0]
 800149a:	e067      	b.n	800156c <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	2b02      	cmp	r3, #2
 80014a2:	d003      	beq.n	80014ac <HAL_GPIO_Init+0x104>
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	2b12      	cmp	r3, #18
 80014aa:	d145      	bne.n	8001538 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	08da      	lsrs	r2, r3, #3
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	3208      	adds	r2, #8
 80014b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014b8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	f003 0307 	and.w	r3, r3, #7
 80014c0:	009b      	lsls	r3, r3, #2
 80014c2:	220f      	movs	r2, #15
 80014c4:	fa02 f303 	lsl.w	r3, r2, r3
 80014c8:	43db      	mvns	r3, r3
 80014ca:	69fa      	ldr	r2, [r7, #28]
 80014cc:	4013      	ands	r3, r2
 80014ce:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	691b      	ldr	r3, [r3, #16]
 80014d4:	f003 020f 	and.w	r2, r3, #15
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	f003 0307 	and.w	r3, r3, #7
 80014de:	009b      	lsls	r3, r3, #2
 80014e0:	fa02 f303 	lsl.w	r3, r2, r3
 80014e4:	69fa      	ldr	r2, [r7, #28]
 80014e6:	4313      	orrs	r3, r2
 80014e8:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	08da      	lsrs	r2, r3, #3
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	3208      	adds	r2, #8
 80014f2:	69f9      	ldr	r1, [r7, #28]
 80014f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 80014f8:	693b      	ldr	r3, [r7, #16]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 80014fe:	69bb      	ldr	r3, [r7, #24]
 8001500:	005b      	lsls	r3, r3, #1
 8001502:	2203      	movs	r2, #3
 8001504:	fa02 f303 	lsl.w	r3, r2, r3
 8001508:	43db      	mvns	r3, r3
 800150a:	69fa      	ldr	r2, [r7, #28]
 800150c:	4013      	ands	r3, r2
 800150e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	f003 0203 	and.w	r2, r3, #3
 8001518:	69bb      	ldr	r3, [r7, #24]
 800151a:	005b      	lsls	r3, r3, #1
 800151c:	fa02 f303 	lsl.w	r3, r2, r3
 8001520:	69fa      	ldr	r2, [r7, #28]
 8001522:	4313      	orrs	r3, r2
 8001524:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8001526:	693b      	ldr	r3, [r7, #16]
 8001528:	69fa      	ldr	r2, [r7, #28]
 800152a:	601a      	str	r2, [r3, #0]
 800152c:	e01e      	b.n	800156c <HAL_GPIO_Init+0x1c4>
 800152e:	bf00      	nop
 8001530:	46020000 	.word	0x46020000
 8001534:	080071e0 	.word	0x080071e0
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8001538:	693b      	ldr	r3, [r7, #16]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 800153e:	69bb      	ldr	r3, [r7, #24]
 8001540:	005b      	lsls	r3, r3, #1
 8001542:	2203      	movs	r2, #3
 8001544:	fa02 f303 	lsl.w	r3, r2, r3
 8001548:	43db      	mvns	r3, r3
 800154a:	69fa      	ldr	r2, [r7, #28]
 800154c:	4013      	ands	r3, r2
 800154e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	f003 0203 	and.w	r2, r3, #3
 8001558:	69bb      	ldr	r3, [r7, #24]
 800155a:	005b      	lsls	r3, r3, #1
 800155c:	fa02 f303 	lsl.w	r3, r2, r3
 8001560:	69fa      	ldr	r2, [r7, #28]
 8001562:	4313      	orrs	r3, r2
 8001564:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	69fa      	ldr	r2, [r7, #28]
 800156a:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	2b01      	cmp	r3, #1
 8001572:	d00b      	beq.n	800158c <HAL_GPIO_Init+0x1e4>
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	2b02      	cmp	r3, #2
 800157a:	d007      	beq.n	800158c <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001580:	2b11      	cmp	r3, #17
 8001582:	d003      	beq.n	800158c <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	2b12      	cmp	r3, #18
 800158a:	d130      	bne.n	80015ee <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 800158c:	693b      	ldr	r3, [r7, #16]
 800158e:	689b      	ldr	r3, [r3, #8]
 8001590:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001592:	69bb      	ldr	r3, [r7, #24]
 8001594:	005b      	lsls	r3, r3, #1
 8001596:	2203      	movs	r2, #3
 8001598:	fa02 f303 	lsl.w	r3, r2, r3
 800159c:	43db      	mvns	r3, r3
 800159e:	69fa      	ldr	r2, [r7, #28]
 80015a0:	4013      	ands	r3, r2
 80015a2:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	68da      	ldr	r2, [r3, #12]
 80015a8:	69bb      	ldr	r3, [r7, #24]
 80015aa:	005b      	lsls	r3, r3, #1
 80015ac:	fa02 f303 	lsl.w	r3, r2, r3
 80015b0:	69fa      	ldr	r2, [r7, #28]
 80015b2:	4313      	orrs	r3, r2
 80015b4:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 80015b6:	693b      	ldr	r3, [r7, #16]
 80015b8:	69fa      	ldr	r2, [r7, #28]
 80015ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 80015bc:	693b      	ldr	r3, [r7, #16]
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 80015c2:	2201      	movs	r2, #1
 80015c4:	69bb      	ldr	r3, [r7, #24]
 80015c6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ca:	43db      	mvns	r3, r3
 80015cc:	69fa      	ldr	r2, [r7, #28]
 80015ce:	4013      	ands	r3, r2
 80015d0:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	091b      	lsrs	r3, r3, #4
 80015d8:	f003 0201 	and.w	r2, r3, #1
 80015dc:	69bb      	ldr	r3, [r7, #24]
 80015de:	fa02 f303 	lsl.w	r3, r2, r3
 80015e2:	69fa      	ldr	r2, [r7, #28]
 80015e4:	4313      	orrs	r3, r2
 80015e6:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 80015e8:	693b      	ldr	r3, [r7, #16]
 80015ea:	69fa      	ldr	r2, [r7, #28]
 80015ec:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	2b03      	cmp	r3, #3
 80015f4:	d017      	beq.n	8001626 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	68db      	ldr	r3, [r3, #12]
 80015fa:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 80015fc:	69bb      	ldr	r3, [r7, #24]
 80015fe:	005b      	lsls	r3, r3, #1
 8001600:	2203      	movs	r2, #3
 8001602:	fa02 f303 	lsl.w	r3, r2, r3
 8001606:	43db      	mvns	r3, r3
 8001608:	69fa      	ldr	r2, [r7, #28]
 800160a:	4013      	ands	r3, r2
 800160c:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	689a      	ldr	r2, [r3, #8]
 8001612:	69bb      	ldr	r3, [r7, #24]
 8001614:	005b      	lsls	r3, r3, #1
 8001616:	fa02 f303 	lsl.w	r3, r2, r3
 800161a:	69fa      	ldr	r2, [r7, #28]
 800161c:	4313      	orrs	r3, r2
 800161e:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	69fa      	ldr	r2, [r7, #28]
 8001624:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800162e:	2b00      	cmp	r3, #0
 8001630:	d07c      	beq.n	800172c <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8001632:	4a47      	ldr	r2, [pc, #284]	@ (8001750 <HAL_GPIO_Init+0x3a8>)
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	089b      	lsrs	r3, r3, #2
 8001638:	3318      	adds	r3, #24
 800163a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800163e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	f003 0303 	and.w	r3, r3, #3
 8001646:	00db      	lsls	r3, r3, #3
 8001648:	220f      	movs	r2, #15
 800164a:	fa02 f303 	lsl.w	r3, r2, r3
 800164e:	43db      	mvns	r3, r3
 8001650:	69fa      	ldr	r2, [r7, #28]
 8001652:	4013      	ands	r3, r2
 8001654:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	0a9a      	lsrs	r2, r3, #10
 800165a:	4b3e      	ldr	r3, [pc, #248]	@ (8001754 <HAL_GPIO_Init+0x3ac>)
 800165c:	4013      	ands	r3, r2
 800165e:	697a      	ldr	r2, [r7, #20]
 8001660:	f002 0203 	and.w	r2, r2, #3
 8001664:	00d2      	lsls	r2, r2, #3
 8001666:	4093      	lsls	r3, r2
 8001668:	69fa      	ldr	r2, [r7, #28]
 800166a:	4313      	orrs	r3, r2
 800166c:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 800166e:	4938      	ldr	r1, [pc, #224]	@ (8001750 <HAL_GPIO_Init+0x3a8>)
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	089b      	lsrs	r3, r3, #2
 8001674:	3318      	adds	r3, #24
 8001676:	69fa      	ldr	r2, [r7, #28]
 8001678:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 800167c:	4b34      	ldr	r3, [pc, #208]	@ (8001750 <HAL_GPIO_Init+0x3a8>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	43db      	mvns	r3, r3
 8001686:	69fa      	ldr	r2, [r7, #28]
 8001688:	4013      	ands	r3, r2
 800168a:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001694:	2b00      	cmp	r3, #0
 8001696:	d003      	beq.n	80016a0 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8001698:	69fa      	ldr	r2, [r7, #28]
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	4313      	orrs	r3, r2
 800169e:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 80016a0:	4a2b      	ldr	r2, [pc, #172]	@ (8001750 <HAL_GPIO_Init+0x3a8>)
 80016a2:	69fb      	ldr	r3, [r7, #28]
 80016a4:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 80016a6:	4b2a      	ldr	r3, [pc, #168]	@ (8001750 <HAL_GPIO_Init+0x3a8>)
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	43db      	mvns	r3, r3
 80016b0:	69fa      	ldr	r2, [r7, #28]
 80016b2:	4013      	ands	r3, r2
 80016b4:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d003      	beq.n	80016ca <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 80016c2:	69fa      	ldr	r2, [r7, #28]
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	4313      	orrs	r3, r2
 80016c8:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 80016ca:	4a21      	ldr	r2, [pc, #132]	@ (8001750 <HAL_GPIO_Init+0x3a8>)
 80016cc:	69fb      	ldr	r3, [r7, #28]
 80016ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 80016d0:	4b1f      	ldr	r3, [pc, #124]	@ (8001750 <HAL_GPIO_Init+0x3a8>)
 80016d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80016d6:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	43db      	mvns	r3, r3
 80016dc:	69fa      	ldr	r2, [r7, #28]
 80016de:	4013      	ands	r3, r2
 80016e0:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d003      	beq.n	80016f6 <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 80016ee:	69fa      	ldr	r2, [r7, #28]
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	4313      	orrs	r3, r2
 80016f4:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 80016f6:	4a16      	ldr	r2, [pc, #88]	@ (8001750 <HAL_GPIO_Init+0x3a8>)
 80016f8:	69fb      	ldr	r3, [r7, #28]
 80016fa:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 80016fe:	4b14      	ldr	r3, [pc, #80]	@ (8001750 <HAL_GPIO_Init+0x3a8>)
 8001700:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001704:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	43db      	mvns	r3, r3
 800170a:	69fa      	ldr	r2, [r7, #28]
 800170c:	4013      	ands	r3, r2
 800170e:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001718:	2b00      	cmp	r3, #0
 800171a:	d003      	beq.n	8001724 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 800171c:	69fa      	ldr	r2, [r7, #28]
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	4313      	orrs	r3, r2
 8001722:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8001724:	4a0a      	ldr	r2, [pc, #40]	@ (8001750 <HAL_GPIO_Init+0x3a8>)
 8001726:	69fb      	ldr	r3, [r7, #28]
 8001728:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	3301      	adds	r3, #1
 8001730:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	fa22 f303 	lsr.w	r3, r2, r3
 800173c:	2b00      	cmp	r3, #0
 800173e:	f47f ae3d 	bne.w	80013bc <HAL_GPIO_Init+0x14>
  }
}
 8001742:	bf00      	nop
 8001744:	bf00      	nop
 8001746:	3724      	adds	r7, #36	@ 0x24
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr
 8001750:	46022000 	.word	0x46022000
 8001754:	002f7f7f 	.word	0x002f7f7f

08001758 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
 8001760:	460b      	mov	r3, r1
 8001762:	807b      	strh	r3, [r7, #2]
 8001764:	4613      	mov	r3, r2
 8001766:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001768:	787b      	ldrb	r3, [r7, #1]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d003      	beq.n	8001776 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800176e:	887a      	ldrh	r2, [r7, #2]
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8001774:	e002      	b.n	800177c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 8001776:	887a      	ldrh	r2, [r7, #2]
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800177c:	bf00      	nop
 800177e:	370c      	adds	r7, #12
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr

08001788 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001788:	b480      	push	{r7}
 800178a:	b085      	sub	sp, #20
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
 8001790:	460b      	mov	r3, r1
 8001792:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	695b      	ldr	r3, [r3, #20]
 8001798:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800179a:	887a      	ldrh	r2, [r7, #2]
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	4013      	ands	r3, r2
 80017a0:	041a      	lsls	r2, r3, #16
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	43d9      	mvns	r1, r3
 80017a6:	887b      	ldrh	r3, [r7, #2]
 80017a8:	400b      	ands	r3, r1
 80017aa:	431a      	orrs	r2, r3
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	619a      	str	r2, [r3, #24]
}
 80017b0:	bf00      	nop
 80017b2:	3714      	adds	r7, #20
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr

080017bc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	4603      	mov	r3, r0
 80017c4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 80017c6:	4b0f      	ldr	r3, [pc, #60]	@ (8001804 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80017c8:	68da      	ldr	r2, [r3, #12]
 80017ca:	88fb      	ldrh	r3, [r7, #6]
 80017cc:	4013      	ands	r3, r2
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d006      	beq.n	80017e0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 80017d2:	4a0c      	ldr	r2, [pc, #48]	@ (8001804 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80017d4:	88fb      	ldrh	r3, [r7, #6]
 80017d6:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 80017d8:	88fb      	ldrh	r3, [r7, #6]
 80017da:	4618      	mov	r0, r3
 80017dc:	f7ff f89c 	bl	8000918 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 80017e0:	4b08      	ldr	r3, [pc, #32]	@ (8001804 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80017e2:	691a      	ldr	r2, [r3, #16]
 80017e4:	88fb      	ldrh	r3, [r7, #6]
 80017e6:	4013      	ands	r3, r2
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d006      	beq.n	80017fa <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 80017ec:	4a05      	ldr	r2, [pc, #20]	@ (8001804 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80017ee:	88fb      	ldrh	r3, [r7, #6]
 80017f0:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 80017f2:	88fb      	ldrh	r3, [r7, #6]
 80017f4:	4618      	mov	r0, r3
 80017f6:	f000 f807 	bl	8001808 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 80017fa:	bf00      	nop
 80017fc:	3708      	adds	r7, #8
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	46022000 	.word	0x46022000

08001808 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line falling detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	4603      	mov	r3, r0
 8001810:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8001812:	bf00      	nop
 8001814:	370c      	adds	r7, #12
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr
	...

08001820 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8001820:	b480      	push	{r7}
 8001822:	b085      	sub	sp, #20
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001828:	2300      	movs	r3, #0
 800182a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 800182c:	4b0b      	ldr	r3, [pc, #44]	@ (800185c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f003 0301 	and.w	r3, r3, #1
 8001834:	2b00      	cmp	r3, #0
 8001836:	d002      	beq.n	800183e <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8001838:	2301      	movs	r3, #1
 800183a:	73fb      	strb	r3, [r7, #15]
 800183c:	e007      	b.n	800184e <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 800183e:	4b07      	ldr	r3, [pc, #28]	@ (800185c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f023 0204 	bic.w	r2, r3, #4
 8001846:	4905      	ldr	r1, [pc, #20]	@ (800185c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	4313      	orrs	r3, r2
 800184c:	600b      	str	r3, [r1, #0]
  }

  return status;
 800184e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001850:	4618      	mov	r0, r3
 8001852:	3714      	adds	r7, #20
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr
 800185c:	40030400 	.word	0x40030400

08001860 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8001864:	4b05      	ldr	r3, [pc, #20]	@ (800187c <HAL_ICACHE_Enable+0x1c>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a04      	ldr	r2, [pc, #16]	@ (800187c <HAL_ICACHE_Enable+0x1c>)
 800186a:	f043 0301 	orr.w	r3, r3, #1
 800186e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8001870:	2300      	movs	r3, #0
}
 8001872:	4618      	mov	r0, r3
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr
 800187c:	40030400 	.word	0x40030400

08001880 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001880:	b480      	push	{r7}
 8001882:	b085      	sub	sp, #20
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8001888:	4b39      	ldr	r3, [pc, #228]	@ (8001970 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800188a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800188c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001890:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8001892:	68ba      	ldr	r2, [r7, #8]
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	429a      	cmp	r2, r3
 8001898:	d10b      	bne.n	80018b2 <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80018a0:	d905      	bls.n	80018ae <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80018a2:	4b33      	ldr	r3, [pc, #204]	@ (8001970 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80018a4:	68db      	ldr	r3, [r3, #12]
 80018a6:	4a32      	ldr	r2, [pc, #200]	@ (8001970 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80018a8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80018ac:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 80018ae:	2300      	movs	r3, #0
 80018b0:	e057      	b.n	8001962 <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80018b8:	d90a      	bls.n	80018d0 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 80018ba:	4b2d      	ldr	r3, [pc, #180]	@ (8001970 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80018bc:	68db      	ldr	r3, [r3, #12]
 80018be:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	4313      	orrs	r3, r2
 80018c6:	4a2a      	ldr	r2, [pc, #168]	@ (8001970 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80018c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80018cc:	60d3      	str	r3, [r2, #12]
 80018ce:	e007      	b.n	80018e0 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 80018d0:	4b27      	ldr	r3, [pc, #156]	@ (8001970 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80018d2:	68db      	ldr	r3, [r3, #12]
 80018d4:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 80018d8:	4925      	ldr	r1, [pc, #148]	@ (8001970 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	4313      	orrs	r3, r2
 80018de:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80018e0:	4b24      	ldr	r3, [pc, #144]	@ (8001974 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a24      	ldr	r2, [pc, #144]	@ (8001978 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80018e6:	fba2 2303 	umull	r2, r3, r2, r3
 80018ea:	099b      	lsrs	r3, r3, #6
 80018ec:	2232      	movs	r2, #50	@ 0x32
 80018ee:	fb02 f303 	mul.w	r3, r2, r3
 80018f2:	4a21      	ldr	r2, [pc, #132]	@ (8001978 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80018f4:	fba2 2303 	umull	r2, r3, r2, r3
 80018f8:	099b      	lsrs	r3, r3, #6
 80018fa:	3301      	adds	r3, #1
 80018fc:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80018fe:	e002      	b.n	8001906 <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	3b01      	subs	r3, #1
 8001904:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8001906:	4b1a      	ldr	r3, [pc, #104]	@ (8001970 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8001908:	68db      	ldr	r3, [r3, #12]
 800190a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800190e:	2b00      	cmp	r3, #0
 8001910:	d102      	bne.n	8001918 <HAL_PWREx_ControlVoltageScaling+0x98>
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d1f3      	bne.n	8001900 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d01b      	beq.n	8001956 <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800191e:	4b15      	ldr	r3, [pc, #84]	@ (8001974 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a15      	ldr	r2, [pc, #84]	@ (8001978 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8001924:	fba2 2303 	umull	r2, r3, r2, r3
 8001928:	099b      	lsrs	r3, r3, #6
 800192a:	2232      	movs	r2, #50	@ 0x32
 800192c:	fb02 f303 	mul.w	r3, r2, r3
 8001930:	4a11      	ldr	r2, [pc, #68]	@ (8001978 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8001932:	fba2 2303 	umull	r2, r3, r2, r3
 8001936:	099b      	lsrs	r3, r3, #6
 8001938:	3301      	adds	r3, #1
 800193a:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 800193c:	e002      	b.n	8001944 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	3b01      	subs	r3, #1
 8001942:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8001944:	4b0a      	ldr	r3, [pc, #40]	@ (8001970 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8001946:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001948:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800194c:	2b00      	cmp	r3, #0
 800194e:	d102      	bne.n	8001956 <HAL_PWREx_ControlVoltageScaling+0xd6>
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d1f3      	bne.n	800193e <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d101      	bne.n	8001960 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 800195c:	2303      	movs	r3, #3
 800195e:	e000      	b.n	8001962 <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8001960:	2300      	movs	r3, #0
}
 8001962:	4618      	mov	r0, r3
 8001964:	3714      	adds	r7, #20
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr
 800196e:	bf00      	nop
 8001970:	46020800 	.word	0x46020800
 8001974:	20000000 	.word	0x20000000
 8001978:	10624dd3 	.word	0x10624dd3

0800197c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8001980:	4b04      	ldr	r3, [pc, #16]	@ (8001994 <HAL_PWREx_GetVoltageRange+0x18>)
 8001982:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001984:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8001988:	4618      	mov	r0, r3
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr
 8001992:	bf00      	nop
 8001994:	46020800 	.word	0x46020800

08001998 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8001998:	b480      	push	{r7}
 800199a:	b085      	sub	sp, #20
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80019a0:	4b22      	ldr	r3, [pc, #136]	@ (8001a2c <HAL_PWREx_ConfigSupply+0x94>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a22      	ldr	r2, [pc, #136]	@ (8001a30 <HAL_PWREx_ConfigSupply+0x98>)
 80019a6:	fba2 2303 	umull	r2, r3, r2, r3
 80019aa:	099b      	lsrs	r3, r3, #6
 80019ac:	2232      	movs	r2, #50	@ 0x32
 80019ae:	fb02 f303 	mul.w	r3, r2, r3
 80019b2:	4a1f      	ldr	r2, [pc, #124]	@ (8001a30 <HAL_PWREx_ConfigSupply+0x98>)
 80019b4:	fba2 2303 	umull	r2, r3, r2, r3
 80019b8:	099b      	lsrs	r3, r3, #6
 80019ba:	3301      	adds	r3, #1
 80019bc:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d113      	bne.n	80019ec <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 80019c4:	4b1b      	ldr	r3, [pc, #108]	@ (8001a34 <HAL_PWREx_ConfigSupply+0x9c>)
 80019c6:	689b      	ldr	r3, [r3, #8]
 80019c8:	4a1a      	ldr	r2, [pc, #104]	@ (8001a34 <HAL_PWREx_ConfigSupply+0x9c>)
 80019ca:	f023 0302 	bic.w	r3, r3, #2
 80019ce:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80019d0:	e002      	b.n	80019d8 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	3b01      	subs	r3, #1
 80019d6:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80019d8:	4b16      	ldr	r3, [pc, #88]	@ (8001a34 <HAL_PWREx_ConfigSupply+0x9c>)
 80019da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019dc:	f003 0302 	and.w	r3, r3, #2
 80019e0:	2b02      	cmp	r3, #2
 80019e2:	d116      	bne.n	8001a12 <HAL_PWREx_ConfigSupply+0x7a>
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d1f3      	bne.n	80019d2 <HAL_PWREx_ConfigSupply+0x3a>
 80019ea:	e012      	b.n	8001a12 <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 80019ec:	4b11      	ldr	r3, [pc, #68]	@ (8001a34 <HAL_PWREx_ConfigSupply+0x9c>)
 80019ee:	689b      	ldr	r3, [r3, #8]
 80019f0:	4a10      	ldr	r2, [pc, #64]	@ (8001a34 <HAL_PWREx_ConfigSupply+0x9c>)
 80019f2:	f043 0302 	orr.w	r3, r3, #2
 80019f6:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80019f8:	e002      	b.n	8001a00 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	3b01      	subs	r3, #1
 80019fe:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8001a00:	4b0c      	ldr	r3, [pc, #48]	@ (8001a34 <HAL_PWREx_ConfigSupply+0x9c>)
 8001a02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a04:	f003 0302 	and.w	r3, r3, #2
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d102      	bne.n	8001a12 <HAL_PWREx_ConfigSupply+0x7a>
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d1f3      	bne.n	80019fa <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d101      	bne.n	8001a1c <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 8001a18:	2303      	movs	r3, #3
 8001a1a:	e000      	b.n	8001a1e <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 8001a1c:	2300      	movs	r3, #0
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	3714      	adds	r7, #20
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr
 8001a2a:	bf00      	nop
 8001a2c:	20000000 	.word	0x20000000
 8001a30:	10624dd3 	.word	0x10624dd3
 8001a34:	46020800 	.word	0x46020800

08001a38 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 8001a3c:	4b05      	ldr	r3, [pc, #20]	@ (8001a54 <HAL_PWREx_EnableVddIO2+0x1c>)
 8001a3e:	691b      	ldr	r3, [r3, #16]
 8001a40:	4a04      	ldr	r2, [pc, #16]	@ (8001a54 <HAL_PWREx_EnableVddIO2+0x1c>)
 8001a42:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001a46:	6113      	str	r3, [r2, #16]
}
 8001a48:	bf00      	nop
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr
 8001a52:	bf00      	nop
 8001a54:	46020800 	.word	0x46020800

08001a58 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b08e      	sub	sp, #56	@ 0x38
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8001a60:	2300      	movs	r3, #0
 8001a62:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d102      	bne.n	8001a72 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	f000 bec8 	b.w	8002802 <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a72:	4b99      	ldr	r3, [pc, #612]	@ (8001cd8 <HAL_RCC_OscConfig+0x280>)
 8001a74:	69db      	ldr	r3, [r3, #28]
 8001a76:	f003 030c 	and.w	r3, r3, #12
 8001a7a:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a7c:	4b96      	ldr	r3, [pc, #600]	@ (8001cd8 <HAL_RCC_OscConfig+0x280>)
 8001a7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a80:	f003 0303 	and.w	r3, r3, #3
 8001a84:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f003 0310 	and.w	r3, r3, #16
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	f000 816c 	beq.w	8001d6c <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001a94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d007      	beq.n	8001aaa <HAL_RCC_OscConfig+0x52>
 8001a9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a9c:	2b0c      	cmp	r3, #12
 8001a9e:	f040 80de 	bne.w	8001c5e <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001aa2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001aa4:	2b01      	cmp	r3, #1
 8001aa6:	f040 80da 	bne.w	8001c5e <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	69db      	ldr	r3, [r3, #28]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d102      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	f000 bea5 	b.w	8002802 <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001abc:	4b86      	ldr	r3, [pc, #536]	@ (8001cd8 <HAL_RCC_OscConfig+0x280>)
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d004      	beq.n	8001ad2 <HAL_RCC_OscConfig+0x7a>
 8001ac8:	4b83      	ldr	r3, [pc, #524]	@ (8001cd8 <HAL_RCC_OscConfig+0x280>)
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8001ad0:	e005      	b.n	8001ade <HAL_RCC_OscConfig+0x86>
 8001ad2:	4b81      	ldr	r3, [pc, #516]	@ (8001cd8 <HAL_RCC_OscConfig+0x280>)
 8001ad4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001ad8:	041b      	lsls	r3, r3, #16
 8001ada:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d255      	bcs.n	8001b8e <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001ae2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d10a      	bne.n	8001afe <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aec:	4618      	mov	r0, r3
 8001aee:	f001 f9d9 	bl	8002ea4 <RCC_SetFlashLatencyFromMSIRange>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d002      	beq.n	8001afe <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 8001af8:	2301      	movs	r3, #1
 8001afa:	f000 be82 	b.w	8002802 <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8001afe:	4b76      	ldr	r3, [pc, #472]	@ (8001cd8 <HAL_RCC_OscConfig+0x280>)
 8001b00:	689b      	ldr	r3, [r3, #8]
 8001b02:	4a75      	ldr	r2, [pc, #468]	@ (8001cd8 <HAL_RCC_OscConfig+0x280>)
 8001b04:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001b08:	6093      	str	r3, [r2, #8]
 8001b0a:	4b73      	ldr	r3, [pc, #460]	@ (8001cd8 <HAL_RCC_OscConfig+0x280>)
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b16:	4970      	ldr	r1, [pc, #448]	@ (8001cd8 <HAL_RCC_OscConfig+0x280>)
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b20:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8001b24:	d309      	bcc.n	8001b3a <HAL_RCC_OscConfig+0xe2>
 8001b26:	4b6c      	ldr	r3, [pc, #432]	@ (8001cd8 <HAL_RCC_OscConfig+0x280>)
 8001b28:	68db      	ldr	r3, [r3, #12]
 8001b2a:	f023 021f 	bic.w	r2, r3, #31
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6a1b      	ldr	r3, [r3, #32]
 8001b32:	4969      	ldr	r1, [pc, #420]	@ (8001cd8 <HAL_RCC_OscConfig+0x280>)
 8001b34:	4313      	orrs	r3, r2
 8001b36:	60cb      	str	r3, [r1, #12]
 8001b38:	e07e      	b.n	8001c38 <HAL_RCC_OscConfig+0x1e0>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	da0a      	bge.n	8001b58 <HAL_RCC_OscConfig+0x100>
 8001b42:	4b65      	ldr	r3, [pc, #404]	@ (8001cd8 <HAL_RCC_OscConfig+0x280>)
 8001b44:	68db      	ldr	r3, [r3, #12]
 8001b46:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6a1b      	ldr	r3, [r3, #32]
 8001b4e:	015b      	lsls	r3, r3, #5
 8001b50:	4961      	ldr	r1, [pc, #388]	@ (8001cd8 <HAL_RCC_OscConfig+0x280>)
 8001b52:	4313      	orrs	r3, r2
 8001b54:	60cb      	str	r3, [r1, #12]
 8001b56:	e06f      	b.n	8001c38 <HAL_RCC_OscConfig+0x1e0>
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b60:	d30a      	bcc.n	8001b78 <HAL_RCC_OscConfig+0x120>
 8001b62:	4b5d      	ldr	r3, [pc, #372]	@ (8001cd8 <HAL_RCC_OscConfig+0x280>)
 8001b64:	68db      	ldr	r3, [r3, #12]
 8001b66:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6a1b      	ldr	r3, [r3, #32]
 8001b6e:	029b      	lsls	r3, r3, #10
 8001b70:	4959      	ldr	r1, [pc, #356]	@ (8001cd8 <HAL_RCC_OscConfig+0x280>)
 8001b72:	4313      	orrs	r3, r2
 8001b74:	60cb      	str	r3, [r1, #12]
 8001b76:	e05f      	b.n	8001c38 <HAL_RCC_OscConfig+0x1e0>
 8001b78:	4b57      	ldr	r3, [pc, #348]	@ (8001cd8 <HAL_RCC_OscConfig+0x280>)
 8001b7a:	68db      	ldr	r3, [r3, #12]
 8001b7c:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6a1b      	ldr	r3, [r3, #32]
 8001b84:	03db      	lsls	r3, r3, #15
 8001b86:	4954      	ldr	r1, [pc, #336]	@ (8001cd8 <HAL_RCC_OscConfig+0x280>)
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	60cb      	str	r3, [r1, #12]
 8001b8c:	e054      	b.n	8001c38 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8001b8e:	4b52      	ldr	r3, [pc, #328]	@ (8001cd8 <HAL_RCC_OscConfig+0x280>)
 8001b90:	689b      	ldr	r3, [r3, #8]
 8001b92:	4a51      	ldr	r2, [pc, #324]	@ (8001cd8 <HAL_RCC_OscConfig+0x280>)
 8001b94:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001b98:	6093      	str	r3, [r2, #8]
 8001b9a:	4b4f      	ldr	r3, [pc, #316]	@ (8001cd8 <HAL_RCC_OscConfig+0x280>)
 8001b9c:	689b      	ldr	r3, [r3, #8]
 8001b9e:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ba6:	494c      	ldr	r1, [pc, #304]	@ (8001cd8 <HAL_RCC_OscConfig+0x280>)
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bb0:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8001bb4:	d309      	bcc.n	8001bca <HAL_RCC_OscConfig+0x172>
 8001bb6:	4b48      	ldr	r3, [pc, #288]	@ (8001cd8 <HAL_RCC_OscConfig+0x280>)
 8001bb8:	68db      	ldr	r3, [r3, #12]
 8001bba:	f023 021f 	bic.w	r2, r3, #31
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6a1b      	ldr	r3, [r3, #32]
 8001bc2:	4945      	ldr	r1, [pc, #276]	@ (8001cd8 <HAL_RCC_OscConfig+0x280>)
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	60cb      	str	r3, [r1, #12]
 8001bc8:	e028      	b.n	8001c1c <HAL_RCC_OscConfig+0x1c4>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	da0a      	bge.n	8001be8 <HAL_RCC_OscConfig+0x190>
 8001bd2:	4b41      	ldr	r3, [pc, #260]	@ (8001cd8 <HAL_RCC_OscConfig+0x280>)
 8001bd4:	68db      	ldr	r3, [r3, #12]
 8001bd6:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6a1b      	ldr	r3, [r3, #32]
 8001bde:	015b      	lsls	r3, r3, #5
 8001be0:	493d      	ldr	r1, [pc, #244]	@ (8001cd8 <HAL_RCC_OscConfig+0x280>)
 8001be2:	4313      	orrs	r3, r2
 8001be4:	60cb      	str	r3, [r1, #12]
 8001be6:	e019      	b.n	8001c1c <HAL_RCC_OscConfig+0x1c4>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001bf0:	d30a      	bcc.n	8001c08 <HAL_RCC_OscConfig+0x1b0>
 8001bf2:	4b39      	ldr	r3, [pc, #228]	@ (8001cd8 <HAL_RCC_OscConfig+0x280>)
 8001bf4:	68db      	ldr	r3, [r3, #12]
 8001bf6:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6a1b      	ldr	r3, [r3, #32]
 8001bfe:	029b      	lsls	r3, r3, #10
 8001c00:	4935      	ldr	r1, [pc, #212]	@ (8001cd8 <HAL_RCC_OscConfig+0x280>)
 8001c02:	4313      	orrs	r3, r2
 8001c04:	60cb      	str	r3, [r1, #12]
 8001c06:	e009      	b.n	8001c1c <HAL_RCC_OscConfig+0x1c4>
 8001c08:	4b33      	ldr	r3, [pc, #204]	@ (8001cd8 <HAL_RCC_OscConfig+0x280>)
 8001c0a:	68db      	ldr	r3, [r3, #12]
 8001c0c:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6a1b      	ldr	r3, [r3, #32]
 8001c14:	03db      	lsls	r3, r3, #15
 8001c16:	4930      	ldr	r1, [pc, #192]	@ (8001cd8 <HAL_RCC_OscConfig+0x280>)
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001c1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d10a      	bne.n	8001c38 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c26:	4618      	mov	r0, r3
 8001c28:	f001 f93c 	bl	8002ea4 <RCC_SetFlashLatencyFromMSIRange>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d002      	beq.n	8001c38 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	f000 bde5 	b.w	8002802 <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8001c38:	f001 f8de 	bl	8002df8 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001c3c:	4b27      	ldr	r3, [pc, #156]	@ (8001cdc <HAL_RCC_OscConfig+0x284>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4618      	mov	r0, r3
 8001c42:	f7ff f8bd 	bl	8000dc0 <HAL_InitTick>
 8001c46:	4603      	mov	r3, r0
 8001c48:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 8001c4c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	f000 808a 	beq.w	8001d6a <HAL_RCC_OscConfig+0x312>
        {
          return status;
 8001c56:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001c5a:	f000 bdd2 	b.w	8002802 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	69db      	ldr	r3, [r3, #28]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d066      	beq.n	8001d34 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8001c66:	4b1c      	ldr	r3, [pc, #112]	@ (8001cd8 <HAL_RCC_OscConfig+0x280>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a1b      	ldr	r2, [pc, #108]	@ (8001cd8 <HAL_RCC_OscConfig+0x280>)
 8001c6c:	f043 0301 	orr.w	r3, r3, #1
 8001c70:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8001c72:	f7ff f92f 	bl	8000ed4 <HAL_GetTick>
 8001c76:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8001c78:	e009      	b.n	8001c8e <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c7a:	f7ff f92b 	bl	8000ed4 <HAL_GetTick>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c82:	1ad3      	subs	r3, r2, r3
 8001c84:	2b02      	cmp	r3, #2
 8001c86:	d902      	bls.n	8001c8e <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8001c88:	2303      	movs	r3, #3
 8001c8a:	f000 bdba 	b.w	8002802 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8001c8e:	4b12      	ldr	r3, [pc, #72]	@ (8001cd8 <HAL_RCC_OscConfig+0x280>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f003 0304 	and.w	r3, r3, #4
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d0ef      	beq.n	8001c7a <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8001c9a:	4b0f      	ldr	r3, [pc, #60]	@ (8001cd8 <HAL_RCC_OscConfig+0x280>)
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	4a0e      	ldr	r2, [pc, #56]	@ (8001cd8 <HAL_RCC_OscConfig+0x280>)
 8001ca0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001ca4:	6093      	str	r3, [r2, #8]
 8001ca6:	4b0c      	ldr	r3, [pc, #48]	@ (8001cd8 <HAL_RCC_OscConfig+0x280>)
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cb2:	4909      	ldr	r1, [pc, #36]	@ (8001cd8 <HAL_RCC_OscConfig+0x280>)
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cbc:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8001cc0:	d30e      	bcc.n	8001ce0 <HAL_RCC_OscConfig+0x288>
 8001cc2:	4b05      	ldr	r3, [pc, #20]	@ (8001cd8 <HAL_RCC_OscConfig+0x280>)
 8001cc4:	68db      	ldr	r3, [r3, #12]
 8001cc6:	f023 021f 	bic.w	r2, r3, #31
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6a1b      	ldr	r3, [r3, #32]
 8001cce:	4902      	ldr	r1, [pc, #8]	@ (8001cd8 <HAL_RCC_OscConfig+0x280>)
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	60cb      	str	r3, [r1, #12]
 8001cd4:	e04a      	b.n	8001d6c <HAL_RCC_OscConfig+0x314>
 8001cd6:	bf00      	nop
 8001cd8:	46020c00 	.word	0x46020c00
 8001cdc:	20000004 	.word	0x20000004
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	da0a      	bge.n	8001cfe <HAL_RCC_OscConfig+0x2a6>
 8001ce8:	4b98      	ldr	r3, [pc, #608]	@ (8001f4c <HAL_RCC_OscConfig+0x4f4>)
 8001cea:	68db      	ldr	r3, [r3, #12]
 8001cec:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6a1b      	ldr	r3, [r3, #32]
 8001cf4:	015b      	lsls	r3, r3, #5
 8001cf6:	4995      	ldr	r1, [pc, #596]	@ (8001f4c <HAL_RCC_OscConfig+0x4f4>)
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	60cb      	str	r3, [r1, #12]
 8001cfc:	e036      	b.n	8001d6c <HAL_RCC_OscConfig+0x314>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d06:	d30a      	bcc.n	8001d1e <HAL_RCC_OscConfig+0x2c6>
 8001d08:	4b90      	ldr	r3, [pc, #576]	@ (8001f4c <HAL_RCC_OscConfig+0x4f4>)
 8001d0a:	68db      	ldr	r3, [r3, #12]
 8001d0c:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6a1b      	ldr	r3, [r3, #32]
 8001d14:	029b      	lsls	r3, r3, #10
 8001d16:	498d      	ldr	r1, [pc, #564]	@ (8001f4c <HAL_RCC_OscConfig+0x4f4>)
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	60cb      	str	r3, [r1, #12]
 8001d1c:	e026      	b.n	8001d6c <HAL_RCC_OscConfig+0x314>
 8001d1e:	4b8b      	ldr	r3, [pc, #556]	@ (8001f4c <HAL_RCC_OscConfig+0x4f4>)
 8001d20:	68db      	ldr	r3, [r3, #12]
 8001d22:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6a1b      	ldr	r3, [r3, #32]
 8001d2a:	03db      	lsls	r3, r3, #15
 8001d2c:	4987      	ldr	r1, [pc, #540]	@ (8001f4c <HAL_RCC_OscConfig+0x4f4>)
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	60cb      	str	r3, [r1, #12]
 8001d32:	e01b      	b.n	8001d6c <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8001d34:	4b85      	ldr	r3, [pc, #532]	@ (8001f4c <HAL_RCC_OscConfig+0x4f4>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a84      	ldr	r2, [pc, #528]	@ (8001f4c <HAL_RCC_OscConfig+0x4f4>)
 8001d3a:	f023 0301 	bic.w	r3, r3, #1
 8001d3e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8001d40:	f7ff f8c8 	bl	8000ed4 <HAL_GetTick>
 8001d44:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8001d46:	e009      	b.n	8001d5c <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d48:	f7ff f8c4 	bl	8000ed4 <HAL_GetTick>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d50:	1ad3      	subs	r3, r2, r3
 8001d52:	2b02      	cmp	r3, #2
 8001d54:	d902      	bls.n	8001d5c <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 8001d56:	2303      	movs	r3, #3
 8001d58:	f000 bd53 	b.w	8002802 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8001d5c:	4b7b      	ldr	r3, [pc, #492]	@ (8001f4c <HAL_RCC_OscConfig+0x4f4>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f003 0304 	and.w	r3, r3, #4
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d1ef      	bne.n	8001d48 <HAL_RCC_OscConfig+0x2f0>
 8001d68:	e000      	b.n	8001d6c <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001d6a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 0301 	and.w	r3, r3, #1
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	f000 808b 	beq.w	8001e90 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001d7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d7c:	2b08      	cmp	r3, #8
 8001d7e:	d005      	beq.n	8001d8c <HAL_RCC_OscConfig+0x334>
 8001d80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d82:	2b0c      	cmp	r3, #12
 8001d84:	d109      	bne.n	8001d9a <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001d86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d88:	2b03      	cmp	r3, #3
 8001d8a:	d106      	bne.n	8001d9a <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d17d      	bne.n	8001e90 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8001d94:	2301      	movs	r3, #1
 8001d96:	f000 bd34 	b.w	8002802 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001da2:	d106      	bne.n	8001db2 <HAL_RCC_OscConfig+0x35a>
 8001da4:	4b69      	ldr	r3, [pc, #420]	@ (8001f4c <HAL_RCC_OscConfig+0x4f4>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a68      	ldr	r2, [pc, #416]	@ (8001f4c <HAL_RCC_OscConfig+0x4f4>)
 8001daa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001dae:	6013      	str	r3, [r2, #0]
 8001db0:	e041      	b.n	8001e36 <HAL_RCC_OscConfig+0x3de>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001dba:	d112      	bne.n	8001de2 <HAL_RCC_OscConfig+0x38a>
 8001dbc:	4b63      	ldr	r3, [pc, #396]	@ (8001f4c <HAL_RCC_OscConfig+0x4f4>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a62      	ldr	r2, [pc, #392]	@ (8001f4c <HAL_RCC_OscConfig+0x4f4>)
 8001dc2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001dc6:	6013      	str	r3, [r2, #0]
 8001dc8:	4b60      	ldr	r3, [pc, #384]	@ (8001f4c <HAL_RCC_OscConfig+0x4f4>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a5f      	ldr	r2, [pc, #380]	@ (8001f4c <HAL_RCC_OscConfig+0x4f4>)
 8001dce:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8001dd2:	6013      	str	r3, [r2, #0]
 8001dd4:	4b5d      	ldr	r3, [pc, #372]	@ (8001f4c <HAL_RCC_OscConfig+0x4f4>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a5c      	ldr	r2, [pc, #368]	@ (8001f4c <HAL_RCC_OscConfig+0x4f4>)
 8001dda:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001dde:	6013      	str	r3, [r2, #0]
 8001de0:	e029      	b.n	8001e36 <HAL_RCC_OscConfig+0x3de>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8001dea:	d112      	bne.n	8001e12 <HAL_RCC_OscConfig+0x3ba>
 8001dec:	4b57      	ldr	r3, [pc, #348]	@ (8001f4c <HAL_RCC_OscConfig+0x4f4>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a56      	ldr	r2, [pc, #344]	@ (8001f4c <HAL_RCC_OscConfig+0x4f4>)
 8001df2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001df6:	6013      	str	r3, [r2, #0]
 8001df8:	4b54      	ldr	r3, [pc, #336]	@ (8001f4c <HAL_RCC_OscConfig+0x4f4>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a53      	ldr	r2, [pc, #332]	@ (8001f4c <HAL_RCC_OscConfig+0x4f4>)
 8001dfe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001e02:	6013      	str	r3, [r2, #0]
 8001e04:	4b51      	ldr	r3, [pc, #324]	@ (8001f4c <HAL_RCC_OscConfig+0x4f4>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a50      	ldr	r2, [pc, #320]	@ (8001f4c <HAL_RCC_OscConfig+0x4f4>)
 8001e0a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e0e:	6013      	str	r3, [r2, #0]
 8001e10:	e011      	b.n	8001e36 <HAL_RCC_OscConfig+0x3de>
 8001e12:	4b4e      	ldr	r3, [pc, #312]	@ (8001f4c <HAL_RCC_OscConfig+0x4f4>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4a4d      	ldr	r2, [pc, #308]	@ (8001f4c <HAL_RCC_OscConfig+0x4f4>)
 8001e18:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e1c:	6013      	str	r3, [r2, #0]
 8001e1e:	4b4b      	ldr	r3, [pc, #300]	@ (8001f4c <HAL_RCC_OscConfig+0x4f4>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a4a      	ldr	r2, [pc, #296]	@ (8001f4c <HAL_RCC_OscConfig+0x4f4>)
 8001e24:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e28:	6013      	str	r3, [r2, #0]
 8001e2a:	4b48      	ldr	r3, [pc, #288]	@ (8001f4c <HAL_RCC_OscConfig+0x4f4>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a47      	ldr	r2, [pc, #284]	@ (8001f4c <HAL_RCC_OscConfig+0x4f4>)
 8001e30:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8001e34:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d014      	beq.n	8001e68 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 8001e3e:	f7ff f849 	bl	8000ed4 <HAL_GetTick>
 8001e42:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e44:	e009      	b.n	8001e5a <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e46:	f7ff f845 	bl	8000ed4 <HAL_GetTick>
 8001e4a:	4602      	mov	r2, r0
 8001e4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e4e:	1ad3      	subs	r3, r2, r3
 8001e50:	2b64      	cmp	r3, #100	@ 0x64
 8001e52:	d902      	bls.n	8001e5a <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8001e54:	2303      	movs	r3, #3
 8001e56:	f000 bcd4 	b.w	8002802 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e5a:	4b3c      	ldr	r3, [pc, #240]	@ (8001f4c <HAL_RCC_OscConfig+0x4f4>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d0ef      	beq.n	8001e46 <HAL_RCC_OscConfig+0x3ee>
 8001e66:	e013      	b.n	8001e90 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8001e68:	f7ff f834 	bl	8000ed4 <HAL_GetTick>
 8001e6c:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e6e:	e009      	b.n	8001e84 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e70:	f7ff f830 	bl	8000ed4 <HAL_GetTick>
 8001e74:	4602      	mov	r2, r0
 8001e76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e78:	1ad3      	subs	r3, r2, r3
 8001e7a:	2b64      	cmp	r3, #100	@ 0x64
 8001e7c:	d902      	bls.n	8001e84 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8001e7e:	2303      	movs	r3, #3
 8001e80:	f000 bcbf 	b.w	8002802 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e84:	4b31      	ldr	r3, [pc, #196]	@ (8001f4c <HAL_RCC_OscConfig+0x4f4>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d1ef      	bne.n	8001e70 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f003 0302 	and.w	r3, r3, #2
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d05f      	beq.n	8001f5c <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001e9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e9e:	2b04      	cmp	r3, #4
 8001ea0:	d005      	beq.n	8001eae <HAL_RCC_OscConfig+0x456>
 8001ea2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ea4:	2b0c      	cmp	r3, #12
 8001ea6:	d114      	bne.n	8001ed2 <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001ea8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001eaa:	2b02      	cmp	r3, #2
 8001eac:	d111      	bne.n	8001ed2 <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	68db      	ldr	r3, [r3, #12]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d102      	bne.n	8001ebc <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	f000 bca3 	b.w	8002802 <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8001ebc:	4b23      	ldr	r3, [pc, #140]	@ (8001f4c <HAL_RCC_OscConfig+0x4f4>)
 8001ebe:	691b      	ldr	r3, [r3, #16]
 8001ec0:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	691b      	ldr	r3, [r3, #16]
 8001ec8:	041b      	lsls	r3, r3, #16
 8001eca:	4920      	ldr	r1, [pc, #128]	@ (8001f4c <HAL_RCC_OscConfig+0x4f4>)
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001ed0:	e044      	b.n	8001f5c <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	68db      	ldr	r3, [r3, #12]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d024      	beq.n	8001f24 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8001eda:	4b1c      	ldr	r3, [pc, #112]	@ (8001f4c <HAL_RCC_OscConfig+0x4f4>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a1b      	ldr	r2, [pc, #108]	@ (8001f4c <HAL_RCC_OscConfig+0x4f4>)
 8001ee0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ee4:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8001ee6:	f7fe fff5 	bl	8000ed4 <HAL_GetTick>
 8001eea:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001eec:	e009      	b.n	8001f02 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001eee:	f7fe fff1 	bl	8000ed4 <HAL_GetTick>
 8001ef2:	4602      	mov	r2, r0
 8001ef4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ef6:	1ad3      	subs	r3, r2, r3
 8001ef8:	2b02      	cmp	r3, #2
 8001efa:	d902      	bls.n	8001f02 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001efc:	2303      	movs	r3, #3
 8001efe:	f000 bc80 	b.w	8002802 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f02:	4b12      	ldr	r3, [pc, #72]	@ (8001f4c <HAL_RCC_OscConfig+0x4f4>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d0ef      	beq.n	8001eee <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8001f0e:	4b0f      	ldr	r3, [pc, #60]	@ (8001f4c <HAL_RCC_OscConfig+0x4f4>)
 8001f10:	691b      	ldr	r3, [r3, #16]
 8001f12:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	691b      	ldr	r3, [r3, #16]
 8001f1a:	041b      	lsls	r3, r3, #16
 8001f1c:	490b      	ldr	r1, [pc, #44]	@ (8001f4c <HAL_RCC_OscConfig+0x4f4>)
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	610b      	str	r3, [r1, #16]
 8001f22:	e01b      	b.n	8001f5c <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8001f24:	4b09      	ldr	r3, [pc, #36]	@ (8001f4c <HAL_RCC_OscConfig+0x4f4>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a08      	ldr	r2, [pc, #32]	@ (8001f4c <HAL_RCC_OscConfig+0x4f4>)
 8001f2a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001f2e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8001f30:	f7fe ffd0 	bl	8000ed4 <HAL_GetTick>
 8001f34:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f36:	e00b      	b.n	8001f50 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f38:	f7fe ffcc 	bl	8000ed4 <HAL_GetTick>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f40:	1ad3      	subs	r3, r2, r3
 8001f42:	2b02      	cmp	r3, #2
 8001f44:	d904      	bls.n	8001f50 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8001f46:	2303      	movs	r3, #3
 8001f48:	f000 bc5b 	b.w	8002802 <HAL_RCC_OscConfig+0xdaa>
 8001f4c:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f50:	4baf      	ldr	r3, [pc, #700]	@ (8002210 <HAL_RCC_OscConfig+0x7b8>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d1ed      	bne.n	8001f38 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f003 0308 	and.w	r3, r3, #8
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	f000 80c8 	beq.w	80020fa <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f70:	4ba7      	ldr	r3, [pc, #668]	@ (8002210 <HAL_RCC_OscConfig+0x7b8>)
 8001f72:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f76:	f003 0304 	and.w	r3, r3, #4
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d111      	bne.n	8001fa2 <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f7e:	4ba4      	ldr	r3, [pc, #656]	@ (8002210 <HAL_RCC_OscConfig+0x7b8>)
 8001f80:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f84:	4aa2      	ldr	r2, [pc, #648]	@ (8002210 <HAL_RCC_OscConfig+0x7b8>)
 8001f86:	f043 0304 	orr.w	r3, r3, #4
 8001f8a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8001f8e:	4ba0      	ldr	r3, [pc, #640]	@ (8002210 <HAL_RCC_OscConfig+0x7b8>)
 8001f90:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f94:	f003 0304 	and.w	r3, r3, #4
 8001f98:	617b      	str	r3, [r7, #20]
 8001f9a:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001fa2:	4b9c      	ldr	r3, [pc, #624]	@ (8002214 <HAL_RCC_OscConfig+0x7bc>)
 8001fa4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fa6:	f003 0301 	and.w	r3, r3, #1
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d119      	bne.n	8001fe2 <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8001fae:	4b99      	ldr	r3, [pc, #612]	@ (8002214 <HAL_RCC_OscConfig+0x7bc>)
 8001fb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fb2:	4a98      	ldr	r2, [pc, #608]	@ (8002214 <HAL_RCC_OscConfig+0x7bc>)
 8001fb4:	f043 0301 	orr.w	r3, r3, #1
 8001fb8:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fba:	f7fe ff8b 	bl	8000ed4 <HAL_GetTick>
 8001fbe:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001fc0:	e009      	b.n	8001fd6 <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fc2:	f7fe ff87 	bl	8000ed4 <HAL_GetTick>
 8001fc6:	4602      	mov	r2, r0
 8001fc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001fca:	1ad3      	subs	r3, r2, r3
 8001fcc:	2b02      	cmp	r3, #2
 8001fce:	d902      	bls.n	8001fd6 <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8001fd0:	2303      	movs	r3, #3
 8001fd2:	f000 bc16 	b.w	8002802 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001fd6:	4b8f      	ldr	r3, [pc, #572]	@ (8002214 <HAL_RCC_OscConfig+0x7bc>)
 8001fd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fda:	f003 0301 	and.w	r3, r3, #1
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d0ef      	beq.n	8001fc2 <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	695b      	ldr	r3, [r3, #20]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d05f      	beq.n	80020aa <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8001fea:	4b89      	ldr	r3, [pc, #548]	@ (8002210 <HAL_RCC_OscConfig+0x7b8>)
 8001fec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001ff0:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	699a      	ldr	r2, [r3, #24]
 8001ff6:	6a3b      	ldr	r3, [r7, #32]
 8001ff8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d037      	beq.n	8002070 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8002000:	6a3b      	ldr	r3, [r7, #32]
 8002002:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002006:	2b00      	cmp	r3, #0
 8002008:	d006      	beq.n	8002018 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 800200a:	6a3b      	ldr	r3, [r7, #32]
 800200c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8002010:	2b00      	cmp	r3, #0
 8002012:	d101      	bne.n	8002018 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8002014:	2301      	movs	r3, #1
 8002016:	e3f4      	b.n	8002802 <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8002018:	6a3b      	ldr	r3, [r7, #32]
 800201a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800201e:	2b00      	cmp	r3, #0
 8002020:	d01b      	beq.n	800205a <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 8002022:	4b7b      	ldr	r3, [pc, #492]	@ (8002210 <HAL_RCC_OscConfig+0x7b8>)
 8002024:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002028:	4a79      	ldr	r2, [pc, #484]	@ (8002210 <HAL_RCC_OscConfig+0x7b8>)
 800202a:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 800202e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 8002032:	f7fe ff4f 	bl	8000ed4 <HAL_GetTick>
 8002036:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002038:	e008      	b.n	800204c <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800203a:	f7fe ff4b 	bl	8000ed4 <HAL_GetTick>
 800203e:	4602      	mov	r2, r0
 8002040:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002042:	1ad3      	subs	r3, r2, r3
 8002044:	2b05      	cmp	r3, #5
 8002046:	d901      	bls.n	800204c <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8002048:	2303      	movs	r3, #3
 800204a:	e3da      	b.n	8002802 <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800204c:	4b70      	ldr	r3, [pc, #448]	@ (8002210 <HAL_RCC_OscConfig+0x7b8>)
 800204e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002052:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002056:	2b00      	cmp	r3, #0
 8002058:	d1ef      	bne.n	800203a <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 800205a:	4b6d      	ldr	r3, [pc, #436]	@ (8002210 <HAL_RCC_OscConfig+0x7b8>)
 800205c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002060:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	699b      	ldr	r3, [r3, #24]
 8002068:	4969      	ldr	r1, [pc, #420]	@ (8002210 <HAL_RCC_OscConfig+0x7b8>)
 800206a:	4313      	orrs	r3, r2
 800206c:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8002070:	4b67      	ldr	r3, [pc, #412]	@ (8002210 <HAL_RCC_OscConfig+0x7b8>)
 8002072:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002076:	4a66      	ldr	r2, [pc, #408]	@ (8002210 <HAL_RCC_OscConfig+0x7b8>)
 8002078:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800207c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8002080:	f7fe ff28 	bl	8000ed4 <HAL_GetTick>
 8002084:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8002086:	e008      	b.n	800209a <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002088:	f7fe ff24 	bl	8000ed4 <HAL_GetTick>
 800208c:	4602      	mov	r2, r0
 800208e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002090:	1ad3      	subs	r3, r2, r3
 8002092:	2b05      	cmp	r3, #5
 8002094:	d901      	bls.n	800209a <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 8002096:	2303      	movs	r3, #3
 8002098:	e3b3      	b.n	8002802 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800209a:	4b5d      	ldr	r3, [pc, #372]	@ (8002210 <HAL_RCC_OscConfig+0x7b8>)
 800209c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80020a0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d0ef      	beq.n	8002088 <HAL_RCC_OscConfig+0x630>
 80020a8:	e01b      	b.n	80020e2 <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 80020aa:	4b59      	ldr	r3, [pc, #356]	@ (8002210 <HAL_RCC_OscConfig+0x7b8>)
 80020ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80020b0:	4a57      	ldr	r2, [pc, #348]	@ (8002210 <HAL_RCC_OscConfig+0x7b8>)
 80020b2:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 80020b6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 80020ba:	f7fe ff0b 	bl	8000ed4 <HAL_GetTick>
 80020be:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80020c0:	e008      	b.n	80020d4 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020c2:	f7fe ff07 	bl	8000ed4 <HAL_GetTick>
 80020c6:	4602      	mov	r2, r0
 80020c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020ca:	1ad3      	subs	r3, r2, r3
 80020cc:	2b05      	cmp	r3, #5
 80020ce:	d901      	bls.n	80020d4 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 80020d0:	2303      	movs	r3, #3
 80020d2:	e396      	b.n	8002802 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80020d4:	4b4e      	ldr	r3, [pc, #312]	@ (8002210 <HAL_RCC_OscConfig+0x7b8>)
 80020d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80020da:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d1ef      	bne.n	80020c2 <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80020e2:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80020e6:	2b01      	cmp	r3, #1
 80020e8:	d107      	bne.n	80020fa <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020ea:	4b49      	ldr	r3, [pc, #292]	@ (8002210 <HAL_RCC_OscConfig+0x7b8>)
 80020ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80020f0:	4a47      	ldr	r2, [pc, #284]	@ (8002210 <HAL_RCC_OscConfig+0x7b8>)
 80020f2:	f023 0304 	bic.w	r3, r3, #4
 80020f6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f003 0304 	and.w	r3, r3, #4
 8002102:	2b00      	cmp	r3, #0
 8002104:	f000 8111 	beq.w	800232a <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8002108:	2300      	movs	r3, #0
 800210a:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800210e:	4b40      	ldr	r3, [pc, #256]	@ (8002210 <HAL_RCC_OscConfig+0x7b8>)
 8002110:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002114:	f003 0304 	and.w	r3, r3, #4
 8002118:	2b00      	cmp	r3, #0
 800211a:	d111      	bne.n	8002140 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800211c:	4b3c      	ldr	r3, [pc, #240]	@ (8002210 <HAL_RCC_OscConfig+0x7b8>)
 800211e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002122:	4a3b      	ldr	r2, [pc, #236]	@ (8002210 <HAL_RCC_OscConfig+0x7b8>)
 8002124:	f043 0304 	orr.w	r3, r3, #4
 8002128:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800212c:	4b38      	ldr	r3, [pc, #224]	@ (8002210 <HAL_RCC_OscConfig+0x7b8>)
 800212e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002132:	f003 0304 	and.w	r3, r3, #4
 8002136:	613b      	str	r3, [r7, #16]
 8002138:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 800213a:	2301      	movs	r3, #1
 800213c:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002140:	4b34      	ldr	r3, [pc, #208]	@ (8002214 <HAL_RCC_OscConfig+0x7bc>)
 8002142:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002144:	f003 0301 	and.w	r3, r3, #1
 8002148:	2b00      	cmp	r3, #0
 800214a:	d118      	bne.n	800217e <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800214c:	4b31      	ldr	r3, [pc, #196]	@ (8002214 <HAL_RCC_OscConfig+0x7bc>)
 800214e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002150:	4a30      	ldr	r2, [pc, #192]	@ (8002214 <HAL_RCC_OscConfig+0x7bc>)
 8002152:	f043 0301 	orr.w	r3, r3, #1
 8002156:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002158:	f7fe febc 	bl	8000ed4 <HAL_GetTick>
 800215c:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800215e:	e008      	b.n	8002172 <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002160:	f7fe feb8 	bl	8000ed4 <HAL_GetTick>
 8002164:	4602      	mov	r2, r0
 8002166:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002168:	1ad3      	subs	r3, r2, r3
 800216a:	2b02      	cmp	r3, #2
 800216c:	d901      	bls.n	8002172 <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 800216e:	2303      	movs	r3, #3
 8002170:	e347      	b.n	8002802 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002172:	4b28      	ldr	r3, [pc, #160]	@ (8002214 <HAL_RCC_OscConfig+0x7bc>)
 8002174:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002176:	f003 0301 	and.w	r3, r3, #1
 800217a:	2b00      	cmp	r3, #0
 800217c:	d0f0      	beq.n	8002160 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	689b      	ldr	r3, [r3, #8]
 8002182:	f003 0301 	and.w	r3, r3, #1
 8002186:	2b00      	cmp	r3, #0
 8002188:	d01f      	beq.n	80021ca <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	f003 0304 	and.w	r3, r3, #4
 8002192:	2b00      	cmp	r3, #0
 8002194:	d010      	beq.n	80021b8 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002196:	4b1e      	ldr	r3, [pc, #120]	@ (8002210 <HAL_RCC_OscConfig+0x7b8>)
 8002198:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800219c:	4a1c      	ldr	r2, [pc, #112]	@ (8002210 <HAL_RCC_OscConfig+0x7b8>)
 800219e:	f043 0304 	orr.w	r3, r3, #4
 80021a2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80021a6:	4b1a      	ldr	r3, [pc, #104]	@ (8002210 <HAL_RCC_OscConfig+0x7b8>)
 80021a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80021ac:	4a18      	ldr	r2, [pc, #96]	@ (8002210 <HAL_RCC_OscConfig+0x7b8>)
 80021ae:	f043 0301 	orr.w	r3, r3, #1
 80021b2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80021b6:	e018      	b.n	80021ea <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80021b8:	4b15      	ldr	r3, [pc, #84]	@ (8002210 <HAL_RCC_OscConfig+0x7b8>)
 80021ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80021be:	4a14      	ldr	r2, [pc, #80]	@ (8002210 <HAL_RCC_OscConfig+0x7b8>)
 80021c0:	f043 0301 	orr.w	r3, r3, #1
 80021c4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80021c8:	e00f      	b.n	80021ea <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80021ca:	4b11      	ldr	r3, [pc, #68]	@ (8002210 <HAL_RCC_OscConfig+0x7b8>)
 80021cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80021d0:	4a0f      	ldr	r2, [pc, #60]	@ (8002210 <HAL_RCC_OscConfig+0x7b8>)
 80021d2:	f023 0301 	bic.w	r3, r3, #1
 80021d6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80021da:	4b0d      	ldr	r3, [pc, #52]	@ (8002210 <HAL_RCC_OscConfig+0x7b8>)
 80021dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80021e0:	4a0b      	ldr	r2, [pc, #44]	@ (8002210 <HAL_RCC_OscConfig+0x7b8>)
 80021e2:	f023 0304 	bic.w	r3, r3, #4
 80021e6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d057      	beq.n	80022a2 <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 80021f2:	f7fe fe6f 	bl	8000ed4 <HAL_GetTick>
 80021f6:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021f8:	e00e      	b.n	8002218 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021fa:	f7fe fe6b 	bl	8000ed4 <HAL_GetTick>
 80021fe:	4602      	mov	r2, r0
 8002200:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002202:	1ad3      	subs	r3, r2, r3
 8002204:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002208:	4293      	cmp	r3, r2
 800220a:	d905      	bls.n	8002218 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 800220c:	2303      	movs	r3, #3
 800220e:	e2f8      	b.n	8002802 <HAL_RCC_OscConfig+0xdaa>
 8002210:	46020c00 	.word	0x46020c00
 8002214:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002218:	4b9c      	ldr	r3, [pc, #624]	@ (800248c <HAL_RCC_OscConfig+0xa34>)
 800221a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800221e:	f003 0302 	and.w	r3, r3, #2
 8002222:	2b00      	cmp	r3, #0
 8002224:	d0e9      	beq.n	80021fa <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800222e:	2b00      	cmp	r3, #0
 8002230:	d01b      	beq.n	800226a <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002232:	4b96      	ldr	r3, [pc, #600]	@ (800248c <HAL_RCC_OscConfig+0xa34>)
 8002234:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002238:	4a94      	ldr	r2, [pc, #592]	@ (800248c <HAL_RCC_OscConfig+0xa34>)
 800223a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800223e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002242:	e00a      	b.n	800225a <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002244:	f7fe fe46 	bl	8000ed4 <HAL_GetTick>
 8002248:	4602      	mov	r2, r0
 800224a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800224c:	1ad3      	subs	r3, r2, r3
 800224e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002252:	4293      	cmp	r3, r2
 8002254:	d901      	bls.n	800225a <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 8002256:	2303      	movs	r3, #3
 8002258:	e2d3      	b.n	8002802 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800225a:	4b8c      	ldr	r3, [pc, #560]	@ (800248c <HAL_RCC_OscConfig+0xa34>)
 800225c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002260:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002264:	2b00      	cmp	r3, #0
 8002266:	d0ed      	beq.n	8002244 <HAL_RCC_OscConfig+0x7ec>
 8002268:	e053      	b.n	8002312 <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800226a:	4b88      	ldr	r3, [pc, #544]	@ (800248c <HAL_RCC_OscConfig+0xa34>)
 800226c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002270:	4a86      	ldr	r2, [pc, #536]	@ (800248c <HAL_RCC_OscConfig+0xa34>)
 8002272:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002276:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800227a:	e00a      	b.n	8002292 <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800227c:	f7fe fe2a 	bl	8000ed4 <HAL_GetTick>
 8002280:	4602      	mov	r2, r0
 8002282:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002284:	1ad3      	subs	r3, r2, r3
 8002286:	f241 3288 	movw	r2, #5000	@ 0x1388
 800228a:	4293      	cmp	r3, r2
 800228c:	d901      	bls.n	8002292 <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 800228e:	2303      	movs	r3, #3
 8002290:	e2b7      	b.n	8002802 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002292:	4b7e      	ldr	r3, [pc, #504]	@ (800248c <HAL_RCC_OscConfig+0xa34>)
 8002294:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002298:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800229c:	2b00      	cmp	r3, #0
 800229e:	d1ed      	bne.n	800227c <HAL_RCC_OscConfig+0x824>
 80022a0:	e037      	b.n	8002312 <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 80022a2:	f7fe fe17 	bl	8000ed4 <HAL_GetTick>
 80022a6:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80022a8:	e00a      	b.n	80022c0 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022aa:	f7fe fe13 	bl	8000ed4 <HAL_GetTick>
 80022ae:	4602      	mov	r2, r0
 80022b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022b2:	1ad3      	subs	r3, r2, r3
 80022b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d901      	bls.n	80022c0 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 80022bc:	2303      	movs	r3, #3
 80022be:	e2a0      	b.n	8002802 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80022c0:	4b72      	ldr	r3, [pc, #456]	@ (800248c <HAL_RCC_OscConfig+0xa34>)
 80022c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80022c6:	f003 0302 	and.w	r3, r3, #2
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d1ed      	bne.n	80022aa <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 80022ce:	4b6f      	ldr	r3, [pc, #444]	@ (800248c <HAL_RCC_OscConfig+0xa34>)
 80022d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80022d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d01a      	beq.n	8002312 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80022dc:	4b6b      	ldr	r3, [pc, #428]	@ (800248c <HAL_RCC_OscConfig+0xa34>)
 80022de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80022e2:	4a6a      	ldr	r2, [pc, #424]	@ (800248c <HAL_RCC_OscConfig+0xa34>)
 80022e4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80022e8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80022ec:	e00a      	b.n	8002304 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022ee:	f7fe fdf1 	bl	8000ed4 <HAL_GetTick>
 80022f2:	4602      	mov	r2, r0
 80022f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022f6:	1ad3      	subs	r3, r2, r3
 80022f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d901      	bls.n	8002304 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8002300:	2303      	movs	r3, #3
 8002302:	e27e      	b.n	8002802 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002304:	4b61      	ldr	r3, [pc, #388]	@ (800248c <HAL_RCC_OscConfig+0xa34>)
 8002306:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800230a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800230e:	2b00      	cmp	r3, #0
 8002310:	d1ed      	bne.n	80022ee <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002312:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8002316:	2b01      	cmp	r3, #1
 8002318:	d107      	bne.n	800232a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800231a:	4b5c      	ldr	r3, [pc, #368]	@ (800248c <HAL_RCC_OscConfig+0xa34>)
 800231c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002320:	4a5a      	ldr	r2, [pc, #360]	@ (800248c <HAL_RCC_OscConfig+0xa34>)
 8002322:	f023 0304 	bic.w	r3, r3, #4
 8002326:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f003 0320 	and.w	r3, r3, #32
 8002332:	2b00      	cmp	r3, #0
 8002334:	d036      	beq.n	80023a4 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800233a:	2b00      	cmp	r3, #0
 800233c:	d019      	beq.n	8002372 <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 800233e:	4b53      	ldr	r3, [pc, #332]	@ (800248c <HAL_RCC_OscConfig+0xa34>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a52      	ldr	r2, [pc, #328]	@ (800248c <HAL_RCC_OscConfig+0xa34>)
 8002344:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002348:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800234a:	f7fe fdc3 	bl	8000ed4 <HAL_GetTick>
 800234e:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002350:	e008      	b.n	8002364 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002352:	f7fe fdbf 	bl	8000ed4 <HAL_GetTick>
 8002356:	4602      	mov	r2, r0
 8002358:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800235a:	1ad3      	subs	r3, r2, r3
 800235c:	2b02      	cmp	r3, #2
 800235e:	d901      	bls.n	8002364 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8002360:	2303      	movs	r3, #3
 8002362:	e24e      	b.n	8002802 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002364:	4b49      	ldr	r3, [pc, #292]	@ (800248c <HAL_RCC_OscConfig+0xa34>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800236c:	2b00      	cmp	r3, #0
 800236e:	d0f0      	beq.n	8002352 <HAL_RCC_OscConfig+0x8fa>
 8002370:	e018      	b.n	80023a4 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8002372:	4b46      	ldr	r3, [pc, #280]	@ (800248c <HAL_RCC_OscConfig+0xa34>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a45      	ldr	r2, [pc, #276]	@ (800248c <HAL_RCC_OscConfig+0xa34>)
 8002378:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800237c:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800237e:	f7fe fda9 	bl	8000ed4 <HAL_GetTick>
 8002382:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002384:	e008      	b.n	8002398 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002386:	f7fe fda5 	bl	8000ed4 <HAL_GetTick>
 800238a:	4602      	mov	r2, r0
 800238c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800238e:	1ad3      	subs	r3, r2, r3
 8002390:	2b02      	cmp	r3, #2
 8002392:	d901      	bls.n	8002398 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8002394:	2303      	movs	r3, #3
 8002396:	e234      	b.n	8002802 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002398:	4b3c      	ldr	r3, [pc, #240]	@ (800248c <HAL_RCC_OscConfig+0xa34>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d1f0      	bne.n	8002386 <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d036      	beq.n	800241e <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d019      	beq.n	80023ec <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 80023b8:	4b34      	ldr	r3, [pc, #208]	@ (800248c <HAL_RCC_OscConfig+0xa34>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a33      	ldr	r2, [pc, #204]	@ (800248c <HAL_RCC_OscConfig+0xa34>)
 80023be:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80023c2:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80023c4:	f7fe fd86 	bl	8000ed4 <HAL_GetTick>
 80023c8:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 80023ca:	e008      	b.n	80023de <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 80023cc:	f7fe fd82 	bl	8000ed4 <HAL_GetTick>
 80023d0:	4602      	mov	r2, r0
 80023d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023d4:	1ad3      	subs	r3, r2, r3
 80023d6:	2b02      	cmp	r3, #2
 80023d8:	d901      	bls.n	80023de <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 80023da:	2303      	movs	r3, #3
 80023dc:	e211      	b.n	8002802 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 80023de:	4b2b      	ldr	r3, [pc, #172]	@ (800248c <HAL_RCC_OscConfig+0xa34>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d0f0      	beq.n	80023cc <HAL_RCC_OscConfig+0x974>
 80023ea:	e018      	b.n	800241e <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 80023ec:	4b27      	ldr	r3, [pc, #156]	@ (800248c <HAL_RCC_OscConfig+0xa34>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a26      	ldr	r2, [pc, #152]	@ (800248c <HAL_RCC_OscConfig+0xa34>)
 80023f2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80023f6:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80023f8:	f7fe fd6c 	bl	8000ed4 <HAL_GetTick>
 80023fc:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 80023fe:	e008      	b.n	8002412 <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8002400:	f7fe fd68 	bl	8000ed4 <HAL_GetTick>
 8002404:	4602      	mov	r2, r0
 8002406:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002408:	1ad3      	subs	r3, r2, r3
 800240a:	2b02      	cmp	r3, #2
 800240c:	d901      	bls.n	8002412 <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 800240e:	2303      	movs	r3, #3
 8002410:	e1f7      	b.n	8002802 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8002412:	4b1e      	ldr	r3, [pc, #120]	@ (800248c <HAL_RCC_OscConfig+0xa34>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800241a:	2b00      	cmp	r3, #0
 800241c:	d1f0      	bne.n	8002400 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002426:	2b00      	cmp	r3, #0
 8002428:	d07f      	beq.n	800252a <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800242e:	2b00      	cmp	r3, #0
 8002430:	d062      	beq.n	80024f8 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8002432:	4b16      	ldr	r3, [pc, #88]	@ (800248c <HAL_RCC_OscConfig+0xa34>)
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	4a15      	ldr	r2, [pc, #84]	@ (800248c <HAL_RCC_OscConfig+0xa34>)
 8002438:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800243c:	6093      	str	r3, [r2, #8]
 800243e:	4b13      	ldr	r3, [pc, #76]	@ (800248c <HAL_RCC_OscConfig+0xa34>)
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800244a:	4910      	ldr	r1, [pc, #64]	@ (800248c <HAL_RCC_OscConfig+0xa34>)
 800244c:	4313      	orrs	r3, r2
 800244e:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002454:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8002458:	d309      	bcc.n	800246e <HAL_RCC_OscConfig+0xa16>
 800245a:	4b0c      	ldr	r3, [pc, #48]	@ (800248c <HAL_RCC_OscConfig+0xa34>)
 800245c:	68db      	ldr	r3, [r3, #12]
 800245e:	f023 021f 	bic.w	r2, r3, #31
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6a1b      	ldr	r3, [r3, #32]
 8002466:	4909      	ldr	r1, [pc, #36]	@ (800248c <HAL_RCC_OscConfig+0xa34>)
 8002468:	4313      	orrs	r3, r2
 800246a:	60cb      	str	r3, [r1, #12]
 800246c:	e02a      	b.n	80024c4 <HAL_RCC_OscConfig+0xa6c>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002472:	2b00      	cmp	r3, #0
 8002474:	da0c      	bge.n	8002490 <HAL_RCC_OscConfig+0xa38>
 8002476:	4b05      	ldr	r3, [pc, #20]	@ (800248c <HAL_RCC_OscConfig+0xa34>)
 8002478:	68db      	ldr	r3, [r3, #12]
 800247a:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6a1b      	ldr	r3, [r3, #32]
 8002482:	015b      	lsls	r3, r3, #5
 8002484:	4901      	ldr	r1, [pc, #4]	@ (800248c <HAL_RCC_OscConfig+0xa34>)
 8002486:	4313      	orrs	r3, r2
 8002488:	60cb      	str	r3, [r1, #12]
 800248a:	e01b      	b.n	80024c4 <HAL_RCC_OscConfig+0xa6c>
 800248c:	46020c00 	.word	0x46020c00
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002494:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002498:	d30a      	bcc.n	80024b0 <HAL_RCC_OscConfig+0xa58>
 800249a:	4ba1      	ldr	r3, [pc, #644]	@ (8002720 <HAL_RCC_OscConfig+0xcc8>)
 800249c:	68db      	ldr	r3, [r3, #12]
 800249e:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6a1b      	ldr	r3, [r3, #32]
 80024a6:	029b      	lsls	r3, r3, #10
 80024a8:	499d      	ldr	r1, [pc, #628]	@ (8002720 <HAL_RCC_OscConfig+0xcc8>)
 80024aa:	4313      	orrs	r3, r2
 80024ac:	60cb      	str	r3, [r1, #12]
 80024ae:	e009      	b.n	80024c4 <HAL_RCC_OscConfig+0xa6c>
 80024b0:	4b9b      	ldr	r3, [pc, #620]	@ (8002720 <HAL_RCC_OscConfig+0xcc8>)
 80024b2:	68db      	ldr	r3, [r3, #12]
 80024b4:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6a1b      	ldr	r3, [r3, #32]
 80024bc:	03db      	lsls	r3, r3, #15
 80024be:	4998      	ldr	r1, [pc, #608]	@ (8002720 <HAL_RCC_OscConfig+0xcc8>)
 80024c0:	4313      	orrs	r3, r2
 80024c2:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 80024c4:	4b96      	ldr	r3, [pc, #600]	@ (8002720 <HAL_RCC_OscConfig+0xcc8>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a95      	ldr	r2, [pc, #596]	@ (8002720 <HAL_RCC_OscConfig+0xcc8>)
 80024ca:	f043 0310 	orr.w	r3, r3, #16
 80024ce:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80024d0:	f7fe fd00 	bl	8000ed4 <HAL_GetTick>
 80024d4:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 80024d6:	e008      	b.n	80024ea <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 80024d8:	f7fe fcfc 	bl	8000ed4 <HAL_GetTick>
 80024dc:	4602      	mov	r2, r0
 80024de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024e0:	1ad3      	subs	r3, r2, r3
 80024e2:	2b02      	cmp	r3, #2
 80024e4:	d901      	bls.n	80024ea <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 80024e6:	2303      	movs	r3, #3
 80024e8:	e18b      	b.n	8002802 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 80024ea:	4b8d      	ldr	r3, [pc, #564]	@ (8002720 <HAL_RCC_OscConfig+0xcc8>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 0320 	and.w	r3, r3, #32
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d0f0      	beq.n	80024d8 <HAL_RCC_OscConfig+0xa80>
 80024f6:	e018      	b.n	800252a <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 80024f8:	4b89      	ldr	r3, [pc, #548]	@ (8002720 <HAL_RCC_OscConfig+0xcc8>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a88      	ldr	r2, [pc, #544]	@ (8002720 <HAL_RCC_OscConfig+0xcc8>)
 80024fe:	f023 0310 	bic.w	r3, r3, #16
 8002502:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002504:	f7fe fce6 	bl	8000ed4 <HAL_GetTick>
 8002508:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800250a:	e008      	b.n	800251e <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 800250c:	f7fe fce2 	bl	8000ed4 <HAL_GetTick>
 8002510:	4602      	mov	r2, r0
 8002512:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002514:	1ad3      	subs	r3, r2, r3
 8002516:	2b02      	cmp	r3, #2
 8002518:	d901      	bls.n	800251e <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 800251a:	2303      	movs	r3, #3
 800251c:	e171      	b.n	8002802 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800251e:	4b80      	ldr	r3, [pc, #512]	@ (8002720 <HAL_RCC_OscConfig+0xcc8>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f003 0320 	and.w	r3, r3, #32
 8002526:	2b00      	cmp	r3, #0
 8002528:	d1f0      	bne.n	800250c <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800252e:	2b00      	cmp	r3, #0
 8002530:	f000 8166 	beq.w	8002800 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8002534:	2300      	movs	r3, #0
 8002536:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800253a:	4b79      	ldr	r3, [pc, #484]	@ (8002720 <HAL_RCC_OscConfig+0xcc8>)
 800253c:	69db      	ldr	r3, [r3, #28]
 800253e:	f003 030c 	and.w	r3, r3, #12
 8002542:	2b0c      	cmp	r3, #12
 8002544:	f000 80f2 	beq.w	800272c <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800254c:	2b02      	cmp	r3, #2
 800254e:	f040 80c5 	bne.w	80026dc <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8002552:	4b73      	ldr	r3, [pc, #460]	@ (8002720 <HAL_RCC_OscConfig+0xcc8>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a72      	ldr	r2, [pc, #456]	@ (8002720 <HAL_RCC_OscConfig+0xcc8>)
 8002558:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800255c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800255e:	f7fe fcb9 	bl	8000ed4 <HAL_GetTick>
 8002562:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002564:	e008      	b.n	8002578 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002566:	f7fe fcb5 	bl	8000ed4 <HAL_GetTick>
 800256a:	4602      	mov	r2, r0
 800256c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800256e:	1ad3      	subs	r3, r2, r3
 8002570:	2b02      	cmp	r3, #2
 8002572:	d901      	bls.n	8002578 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8002574:	2303      	movs	r3, #3
 8002576:	e144      	b.n	8002802 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002578:	4b69      	ldr	r3, [pc, #420]	@ (8002720 <HAL_RCC_OscConfig+0xcc8>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002580:	2b00      	cmp	r3, #0
 8002582:	d1f0      	bne.n	8002566 <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002584:	4b66      	ldr	r3, [pc, #408]	@ (8002720 <HAL_RCC_OscConfig+0xcc8>)
 8002586:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800258a:	f003 0304 	and.w	r3, r3, #4
 800258e:	2b00      	cmp	r3, #0
 8002590:	d111      	bne.n	80025b6 <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8002592:	4b63      	ldr	r3, [pc, #396]	@ (8002720 <HAL_RCC_OscConfig+0xcc8>)
 8002594:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002598:	4a61      	ldr	r2, [pc, #388]	@ (8002720 <HAL_RCC_OscConfig+0xcc8>)
 800259a:	f043 0304 	orr.w	r3, r3, #4
 800259e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80025a2:	4b5f      	ldr	r3, [pc, #380]	@ (8002720 <HAL_RCC_OscConfig+0xcc8>)
 80025a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80025a8:	f003 0304 	and.w	r3, r3, #4
 80025ac:	60fb      	str	r3, [r7, #12]
 80025ae:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 80025b0:	2301      	movs	r3, #1
 80025b2:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 80025b6:	4b5b      	ldr	r3, [pc, #364]	@ (8002724 <HAL_RCC_OscConfig+0xccc>)
 80025b8:	68db      	ldr	r3, [r3, #12]
 80025ba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80025be:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80025c2:	d102      	bne.n	80025ca <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 80025c4:	2301      	movs	r3, #1
 80025c6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80025ca:	4b56      	ldr	r3, [pc, #344]	@ (8002724 <HAL_RCC_OscConfig+0xccc>)
 80025cc:	68db      	ldr	r3, [r3, #12]
 80025ce:	4a55      	ldr	r2, [pc, #340]	@ (8002724 <HAL_RCC_OscConfig+0xccc>)
 80025d0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80025d4:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 80025d6:	4b52      	ldr	r3, [pc, #328]	@ (8002720 <HAL_RCC_OscConfig+0xcc8>)
 80025d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025da:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80025de:	f023 0303 	bic.w	r3, r3, #3
 80025e2:	687a      	ldr	r2, [r7, #4]
 80025e4:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80025e6:	687a      	ldr	r2, [r7, #4]
 80025e8:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80025ea:	3a01      	subs	r2, #1
 80025ec:	0212      	lsls	r2, r2, #8
 80025ee:	4311      	orrs	r1, r2
 80025f0:	687a      	ldr	r2, [r7, #4]
 80025f2:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80025f4:	430a      	orrs	r2, r1
 80025f6:	494a      	ldr	r1, [pc, #296]	@ (8002720 <HAL_RCC_OscConfig+0xcc8>)
 80025f8:	4313      	orrs	r3, r2
 80025fa:	628b      	str	r3, [r1, #40]	@ 0x28
 80025fc:	4b48      	ldr	r3, [pc, #288]	@ (8002720 <HAL_RCC_OscConfig+0xcc8>)
 80025fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002600:	4b49      	ldr	r3, [pc, #292]	@ (8002728 <HAL_RCC_OscConfig+0xcd0>)
 8002602:	4013      	ands	r3, r2
 8002604:	687a      	ldr	r2, [r7, #4]
 8002606:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002608:	3a01      	subs	r2, #1
 800260a:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800260e:	687a      	ldr	r2, [r7, #4]
 8002610:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002612:	3a01      	subs	r2, #1
 8002614:	0252      	lsls	r2, r2, #9
 8002616:	b292      	uxth	r2, r2
 8002618:	4311      	orrs	r1, r2
 800261a:	687a      	ldr	r2, [r7, #4]
 800261c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800261e:	3a01      	subs	r2, #1
 8002620:	0412      	lsls	r2, r2, #16
 8002622:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8002626:	4311      	orrs	r1, r2
 8002628:	687a      	ldr	r2, [r7, #4]
 800262a:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800262c:	3a01      	subs	r2, #1
 800262e:	0612      	lsls	r2, r2, #24
 8002630:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8002634:	430a      	orrs	r2, r1
 8002636:	493a      	ldr	r1, [pc, #232]	@ (8002720 <HAL_RCC_OscConfig+0xcc8>)
 8002638:	4313      	orrs	r3, r2
 800263a:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 800263c:	4b38      	ldr	r3, [pc, #224]	@ (8002720 <HAL_RCC_OscConfig+0xcc8>)
 800263e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002640:	4a37      	ldr	r2, [pc, #220]	@ (8002720 <HAL_RCC_OscConfig+0xcc8>)
 8002642:	f023 0310 	bic.w	r3, r3, #16
 8002646:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800264c:	4a34      	ldr	r2, [pc, #208]	@ (8002720 <HAL_RCC_OscConfig+0xcc8>)
 800264e:	00db      	lsls	r3, r3, #3
 8002650:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8002652:	4b33      	ldr	r3, [pc, #204]	@ (8002720 <HAL_RCC_OscConfig+0xcc8>)
 8002654:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002656:	4a32      	ldr	r2, [pc, #200]	@ (8002720 <HAL_RCC_OscConfig+0xcc8>)
 8002658:	f043 0310 	orr.w	r3, r3, #16
 800265c:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 800265e:	4b30      	ldr	r3, [pc, #192]	@ (8002720 <HAL_RCC_OscConfig+0xcc8>)
 8002660:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002662:	f023 020c 	bic.w	r2, r3, #12
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800266a:	492d      	ldr	r1, [pc, #180]	@ (8002720 <HAL_RCC_OscConfig+0xcc8>)
 800266c:	4313      	orrs	r3, r2
 800266e:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 8002670:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002674:	2b01      	cmp	r3, #1
 8002676:	d105      	bne.n	8002684 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8002678:	4b2a      	ldr	r3, [pc, #168]	@ (8002724 <HAL_RCC_OscConfig+0xccc>)
 800267a:	68db      	ldr	r3, [r3, #12]
 800267c:	4a29      	ldr	r2, [pc, #164]	@ (8002724 <HAL_RCC_OscConfig+0xccc>)
 800267e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002682:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8002684:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8002688:	2b01      	cmp	r3, #1
 800268a:	d107      	bne.n	800269c <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 800268c:	4b24      	ldr	r3, [pc, #144]	@ (8002720 <HAL_RCC_OscConfig+0xcc8>)
 800268e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002692:	4a23      	ldr	r2, [pc, #140]	@ (8002720 <HAL_RCC_OscConfig+0xcc8>)
 8002694:	f023 0304 	bic.w	r3, r3, #4
 8002698:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 800269c:	4b20      	ldr	r3, [pc, #128]	@ (8002720 <HAL_RCC_OscConfig+0xcc8>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a1f      	ldr	r2, [pc, #124]	@ (8002720 <HAL_RCC_OscConfig+0xcc8>)
 80026a2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80026a6:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80026a8:	f7fe fc14 	bl	8000ed4 <HAL_GetTick>
 80026ac:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80026ae:	e008      	b.n	80026c2 <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026b0:	f7fe fc10 	bl	8000ed4 <HAL_GetTick>
 80026b4:	4602      	mov	r2, r0
 80026b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026b8:	1ad3      	subs	r3, r2, r3
 80026ba:	2b02      	cmp	r3, #2
 80026bc:	d901      	bls.n	80026c2 <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 80026be:	2303      	movs	r3, #3
 80026c0:	e09f      	b.n	8002802 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80026c2:	4b17      	ldr	r3, [pc, #92]	@ (8002720 <HAL_RCC_OscConfig+0xcc8>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d0f0      	beq.n	80026b0 <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80026ce:	4b14      	ldr	r3, [pc, #80]	@ (8002720 <HAL_RCC_OscConfig+0xcc8>)
 80026d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026d2:	4a13      	ldr	r2, [pc, #76]	@ (8002720 <HAL_RCC_OscConfig+0xcc8>)
 80026d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80026d8:	6293      	str	r3, [r2, #40]	@ 0x28
 80026da:	e091      	b.n	8002800 <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 80026dc:	4b10      	ldr	r3, [pc, #64]	@ (8002720 <HAL_RCC_OscConfig+0xcc8>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a0f      	ldr	r2, [pc, #60]	@ (8002720 <HAL_RCC_OscConfig+0xcc8>)
 80026e2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80026e6:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80026e8:	f7fe fbf4 	bl	8000ed4 <HAL_GetTick>
 80026ec:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80026ee:	e008      	b.n	8002702 <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026f0:	f7fe fbf0 	bl	8000ed4 <HAL_GetTick>
 80026f4:	4602      	mov	r2, r0
 80026f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026f8:	1ad3      	subs	r3, r2, r3
 80026fa:	2b02      	cmp	r3, #2
 80026fc:	d901      	bls.n	8002702 <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 80026fe:	2303      	movs	r3, #3
 8002700:	e07f      	b.n	8002802 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002702:	4b07      	ldr	r3, [pc, #28]	@ (8002720 <HAL_RCC_OscConfig+0xcc8>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800270a:	2b00      	cmp	r3, #0
 800270c:	d1f0      	bne.n	80026f0 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 800270e:	4b04      	ldr	r3, [pc, #16]	@ (8002720 <HAL_RCC_OscConfig+0xcc8>)
 8002710:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002712:	4a03      	ldr	r2, [pc, #12]	@ (8002720 <HAL_RCC_OscConfig+0xcc8>)
 8002714:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8002718:	f023 0303 	bic.w	r3, r3, #3
 800271c:	6293      	str	r3, [r2, #40]	@ 0x28
 800271e:	e06f      	b.n	8002800 <HAL_RCC_OscConfig+0xda8>
 8002720:	46020c00 	.word	0x46020c00
 8002724:	46020800 	.word	0x46020800
 8002728:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 800272c:	4b37      	ldr	r3, [pc, #220]	@ (800280c <HAL_RCC_OscConfig+0xdb4>)
 800272e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002730:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002732:	4b36      	ldr	r3, [pc, #216]	@ (800280c <HAL_RCC_OscConfig+0xdb4>)
 8002734:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002736:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800273c:	2b01      	cmp	r3, #1
 800273e:	d039      	beq.n	80027b4 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8002740:	69fb      	ldr	r3, [r7, #28]
 8002742:	f003 0203 	and.w	r2, r3, #3
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800274a:	429a      	cmp	r2, r3
 800274c:	d132      	bne.n	80027b4 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 800274e:	69fb      	ldr	r3, [r7, #28]
 8002750:	0a1b      	lsrs	r3, r3, #8
 8002752:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800275a:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 800275c:	429a      	cmp	r2, r3
 800275e:	d129      	bne.n	80027b4 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8002760:	69fb      	ldr	r3, [r7, #28]
 8002762:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800276a:	429a      	cmp	r2, r3
 800276c:	d122      	bne.n	80027b4 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800276e:	69bb      	ldr	r3, [r7, #24]
 8002770:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002778:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800277a:	429a      	cmp	r2, r3
 800277c:	d11a      	bne.n	80027b4 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 800277e:	69bb      	ldr	r3, [r7, #24]
 8002780:	0a5b      	lsrs	r3, r3, #9
 8002782:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800278a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800278c:	429a      	cmp	r2, r3
 800278e:	d111      	bne.n	80027b4 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8002790:	69bb      	ldr	r3, [r7, #24]
 8002792:	0c1b      	lsrs	r3, r3, #16
 8002794:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800279c:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800279e:	429a      	cmp	r2, r3
 80027a0:	d108      	bne.n	80027b4 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 80027a2:	69bb      	ldr	r3, [r7, #24]
 80027a4:	0e1b      	lsrs	r3, r3, #24
 80027a6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027ae:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80027b0:	429a      	cmp	r2, r3
 80027b2:	d001      	beq.n	80027b8 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
 80027b6:	e024      	b.n	8002802 <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80027b8:	4b14      	ldr	r3, [pc, #80]	@ (800280c <HAL_RCC_OscConfig+0xdb4>)
 80027ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027bc:	08db      	lsrs	r3, r3, #3
 80027be:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80027c6:	429a      	cmp	r2, r3
 80027c8:	d01a      	beq.n	8002800 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 80027ca:	4b10      	ldr	r3, [pc, #64]	@ (800280c <HAL_RCC_OscConfig+0xdb4>)
 80027cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027ce:	4a0f      	ldr	r2, [pc, #60]	@ (800280c <HAL_RCC_OscConfig+0xdb4>)
 80027d0:	f023 0310 	bic.w	r3, r3, #16
 80027d4:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027d6:	f7fe fb7d 	bl	8000ed4 <HAL_GetTick>
 80027da:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 80027dc:	bf00      	nop
 80027de:	f7fe fb79 	bl	8000ed4 <HAL_GetTick>
 80027e2:	4602      	mov	r2, r0
 80027e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d0f9      	beq.n	80027de <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027ee:	4a07      	ldr	r2, [pc, #28]	@ (800280c <HAL_RCC_OscConfig+0xdb4>)
 80027f0:	00db      	lsls	r3, r3, #3
 80027f2:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 80027f4:	4b05      	ldr	r3, [pc, #20]	@ (800280c <HAL_RCC_OscConfig+0xdb4>)
 80027f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027f8:	4a04      	ldr	r2, [pc, #16]	@ (800280c <HAL_RCC_OscConfig+0xdb4>)
 80027fa:	f043 0310 	orr.w	r3, r3, #16
 80027fe:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 8002800:	2300      	movs	r3, #0
}
 8002802:	4618      	mov	r0, r3
 8002804:	3738      	adds	r7, #56	@ 0x38
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}
 800280a:	bf00      	nop
 800280c:	46020c00 	.word	0x46020c00

08002810 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b086      	sub	sp, #24
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
 8002818:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d101      	bne.n	8002824 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	e1d9      	b.n	8002bd8 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002824:	4b9b      	ldr	r3, [pc, #620]	@ (8002a94 <HAL_RCC_ClockConfig+0x284>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f003 030f 	and.w	r3, r3, #15
 800282c:	683a      	ldr	r2, [r7, #0]
 800282e:	429a      	cmp	r2, r3
 8002830:	d910      	bls.n	8002854 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002832:	4b98      	ldr	r3, [pc, #608]	@ (8002a94 <HAL_RCC_ClockConfig+0x284>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f023 020f 	bic.w	r2, r3, #15
 800283a:	4996      	ldr	r1, [pc, #600]	@ (8002a94 <HAL_RCC_ClockConfig+0x284>)
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	4313      	orrs	r3, r2
 8002840:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002842:	4b94      	ldr	r3, [pc, #592]	@ (8002a94 <HAL_RCC_ClockConfig+0x284>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 030f 	and.w	r3, r3, #15
 800284a:	683a      	ldr	r2, [r7, #0]
 800284c:	429a      	cmp	r2, r3
 800284e:	d001      	beq.n	8002854 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	e1c1      	b.n	8002bd8 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f003 0310 	and.w	r3, r3, #16
 800285c:	2b00      	cmp	r3, #0
 800285e:	d010      	beq.n	8002882 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	695a      	ldr	r2, [r3, #20]
 8002864:	4b8c      	ldr	r3, [pc, #560]	@ (8002a98 <HAL_RCC_ClockConfig+0x288>)
 8002866:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002868:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800286c:	429a      	cmp	r2, r3
 800286e:	d908      	bls.n	8002882 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8002870:	4b89      	ldr	r3, [pc, #548]	@ (8002a98 <HAL_RCC_ClockConfig+0x288>)
 8002872:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002874:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	695b      	ldr	r3, [r3, #20]
 800287c:	4986      	ldr	r1, [pc, #536]	@ (8002a98 <HAL_RCC_ClockConfig+0x288>)
 800287e:	4313      	orrs	r3, r2
 8002880:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f003 0308 	and.w	r3, r3, #8
 800288a:	2b00      	cmp	r3, #0
 800288c:	d012      	beq.n	80028b4 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	691a      	ldr	r2, [r3, #16]
 8002892:	4b81      	ldr	r3, [pc, #516]	@ (8002a98 <HAL_RCC_ClockConfig+0x288>)
 8002894:	6a1b      	ldr	r3, [r3, #32]
 8002896:	091b      	lsrs	r3, r3, #4
 8002898:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800289c:	429a      	cmp	r2, r3
 800289e:	d909      	bls.n	80028b4 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 80028a0:	4b7d      	ldr	r3, [pc, #500]	@ (8002a98 <HAL_RCC_ClockConfig+0x288>)
 80028a2:	6a1b      	ldr	r3, [r3, #32]
 80028a4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	691b      	ldr	r3, [r3, #16]
 80028ac:	011b      	lsls	r3, r3, #4
 80028ae:	497a      	ldr	r1, [pc, #488]	@ (8002a98 <HAL_RCC_ClockConfig+0x288>)
 80028b0:	4313      	orrs	r3, r2
 80028b2:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f003 0304 	and.w	r3, r3, #4
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d010      	beq.n	80028e2 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	68da      	ldr	r2, [r3, #12]
 80028c4:	4b74      	ldr	r3, [pc, #464]	@ (8002a98 <HAL_RCC_ClockConfig+0x288>)
 80028c6:	6a1b      	ldr	r3, [r3, #32]
 80028c8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80028cc:	429a      	cmp	r2, r3
 80028ce:	d908      	bls.n	80028e2 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 80028d0:	4b71      	ldr	r3, [pc, #452]	@ (8002a98 <HAL_RCC_ClockConfig+0x288>)
 80028d2:	6a1b      	ldr	r3, [r3, #32]
 80028d4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	496e      	ldr	r1, [pc, #440]	@ (8002a98 <HAL_RCC_ClockConfig+0x288>)
 80028de:	4313      	orrs	r3, r2
 80028e0:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f003 0302 	and.w	r3, r3, #2
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d010      	beq.n	8002910 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	689a      	ldr	r2, [r3, #8]
 80028f2:	4b69      	ldr	r3, [pc, #420]	@ (8002a98 <HAL_RCC_ClockConfig+0x288>)
 80028f4:	6a1b      	ldr	r3, [r3, #32]
 80028f6:	f003 030f 	and.w	r3, r3, #15
 80028fa:	429a      	cmp	r2, r3
 80028fc:	d908      	bls.n	8002910 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 80028fe:	4b66      	ldr	r3, [pc, #408]	@ (8002a98 <HAL_RCC_ClockConfig+0x288>)
 8002900:	6a1b      	ldr	r3, [r3, #32]
 8002902:	f023 020f 	bic.w	r2, r3, #15
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	4963      	ldr	r1, [pc, #396]	@ (8002a98 <HAL_RCC_ClockConfig+0x288>)
 800290c:	4313      	orrs	r3, r2
 800290e:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f003 0301 	and.w	r3, r3, #1
 8002918:	2b00      	cmp	r3, #0
 800291a:	f000 80d2 	beq.w	8002ac2 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 800291e:	2300      	movs	r3, #0
 8002920:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	2b03      	cmp	r3, #3
 8002928:	d143      	bne.n	80029b2 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800292a:	4b5b      	ldr	r3, [pc, #364]	@ (8002a98 <HAL_RCC_ClockConfig+0x288>)
 800292c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002930:	f003 0304 	and.w	r3, r3, #4
 8002934:	2b00      	cmp	r3, #0
 8002936:	d110      	bne.n	800295a <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002938:	4b57      	ldr	r3, [pc, #348]	@ (8002a98 <HAL_RCC_ClockConfig+0x288>)
 800293a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800293e:	4a56      	ldr	r2, [pc, #344]	@ (8002a98 <HAL_RCC_ClockConfig+0x288>)
 8002940:	f043 0304 	orr.w	r3, r3, #4
 8002944:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8002948:	4b53      	ldr	r3, [pc, #332]	@ (8002a98 <HAL_RCC_ClockConfig+0x288>)
 800294a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800294e:	f003 0304 	and.w	r3, r3, #4
 8002952:	60bb      	str	r3, [r7, #8]
 8002954:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8002956:	2301      	movs	r3, #1
 8002958:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 800295a:	f7fe fabb 	bl	8000ed4 <HAL_GetTick>
 800295e:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8002960:	4b4e      	ldr	r3, [pc, #312]	@ (8002a9c <HAL_RCC_ClockConfig+0x28c>)
 8002962:	68db      	ldr	r3, [r3, #12]
 8002964:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002968:	2b00      	cmp	r3, #0
 800296a:	d00f      	beq.n	800298c <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800296c:	e008      	b.n	8002980 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 800296e:	f7fe fab1 	bl	8000ed4 <HAL_GetTick>
 8002972:	4602      	mov	r2, r0
 8002974:	693b      	ldr	r3, [r7, #16]
 8002976:	1ad3      	subs	r3, r2, r3
 8002978:	2b02      	cmp	r3, #2
 800297a:	d901      	bls.n	8002980 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 800297c:	2303      	movs	r3, #3
 800297e:	e12b      	b.n	8002bd8 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8002980:	4b46      	ldr	r3, [pc, #280]	@ (8002a9c <HAL_RCC_ClockConfig+0x28c>)
 8002982:	68db      	ldr	r3, [r3, #12]
 8002984:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002988:	2b00      	cmp	r3, #0
 800298a:	d0f0      	beq.n	800296e <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800298c:	7dfb      	ldrb	r3, [r7, #23]
 800298e:	2b01      	cmp	r3, #1
 8002990:	d107      	bne.n	80029a2 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002992:	4b41      	ldr	r3, [pc, #260]	@ (8002a98 <HAL_RCC_ClockConfig+0x288>)
 8002994:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002998:	4a3f      	ldr	r2, [pc, #252]	@ (8002a98 <HAL_RCC_ClockConfig+0x288>)
 800299a:	f023 0304 	bic.w	r3, r3, #4
 800299e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80029a2:	4b3d      	ldr	r3, [pc, #244]	@ (8002a98 <HAL_RCC_ClockConfig+0x288>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d121      	bne.n	80029f2 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e112      	b.n	8002bd8 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	2b02      	cmp	r3, #2
 80029b8:	d107      	bne.n	80029ca <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80029ba:	4b37      	ldr	r3, [pc, #220]	@ (8002a98 <HAL_RCC_ClockConfig+0x288>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d115      	bne.n	80029f2 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e106      	b.n	8002bd8 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d107      	bne.n	80029e2 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80029d2:	4b31      	ldr	r3, [pc, #196]	@ (8002a98 <HAL_RCC_ClockConfig+0x288>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 0304 	and.w	r3, r3, #4
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d109      	bne.n	80029f2 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e0fa      	b.n	8002bd8 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80029e2:	4b2d      	ldr	r3, [pc, #180]	@ (8002a98 <HAL_RCC_ClockConfig+0x288>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d101      	bne.n	80029f2 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e0f2      	b.n	8002bd8 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 80029f2:	4b29      	ldr	r3, [pc, #164]	@ (8002a98 <HAL_RCC_ClockConfig+0x288>)
 80029f4:	69db      	ldr	r3, [r3, #28]
 80029f6:	f023 0203 	bic.w	r2, r3, #3
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	4926      	ldr	r1, [pc, #152]	@ (8002a98 <HAL_RCC_ClockConfig+0x288>)
 8002a00:	4313      	orrs	r3, r2
 8002a02:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8002a04:	f7fe fa66 	bl	8000ed4 <HAL_GetTick>
 8002a08:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	2b03      	cmp	r3, #3
 8002a10:	d112      	bne.n	8002a38 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a12:	e00a      	b.n	8002a2a <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a14:	f7fe fa5e 	bl	8000ed4 <HAL_GetTick>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	1ad3      	subs	r3, r2, r3
 8002a1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d901      	bls.n	8002a2a <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 8002a26:	2303      	movs	r3, #3
 8002a28:	e0d6      	b.n	8002bd8 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a2a:	4b1b      	ldr	r3, [pc, #108]	@ (8002a98 <HAL_RCC_ClockConfig+0x288>)
 8002a2c:	69db      	ldr	r3, [r3, #28]
 8002a2e:	f003 030c 	and.w	r3, r3, #12
 8002a32:	2b0c      	cmp	r3, #12
 8002a34:	d1ee      	bne.n	8002a14 <HAL_RCC_ClockConfig+0x204>
 8002a36:	e044      	b.n	8002ac2 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	2b02      	cmp	r3, #2
 8002a3e:	d112      	bne.n	8002a66 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a40:	e00a      	b.n	8002a58 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a42:	f7fe fa47 	bl	8000ed4 <HAL_GetTick>
 8002a46:	4602      	mov	r2, r0
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	1ad3      	subs	r3, r2, r3
 8002a4c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d901      	bls.n	8002a58 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002a54:	2303      	movs	r3, #3
 8002a56:	e0bf      	b.n	8002bd8 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a58:	4b0f      	ldr	r3, [pc, #60]	@ (8002a98 <HAL_RCC_ClockConfig+0x288>)
 8002a5a:	69db      	ldr	r3, [r3, #28]
 8002a5c:	f003 030c 	and.w	r3, r3, #12
 8002a60:	2b08      	cmp	r3, #8
 8002a62:	d1ee      	bne.n	8002a42 <HAL_RCC_ClockConfig+0x232>
 8002a64:	e02d      	b.n	8002ac2 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d123      	bne.n	8002ab6 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002a6e:	e00a      	b.n	8002a86 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a70:	f7fe fa30 	bl	8000ed4 <HAL_GetTick>
 8002a74:	4602      	mov	r2, r0
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	1ad3      	subs	r3, r2, r3
 8002a7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d901      	bls.n	8002a86 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 8002a82:	2303      	movs	r3, #3
 8002a84:	e0a8      	b.n	8002bd8 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002a86:	4b04      	ldr	r3, [pc, #16]	@ (8002a98 <HAL_RCC_ClockConfig+0x288>)
 8002a88:	69db      	ldr	r3, [r3, #28]
 8002a8a:	f003 030c 	and.w	r3, r3, #12
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d1ee      	bne.n	8002a70 <HAL_RCC_ClockConfig+0x260>
 8002a92:	e016      	b.n	8002ac2 <HAL_RCC_ClockConfig+0x2b2>
 8002a94:	40022000 	.word	0x40022000
 8002a98:	46020c00 	.word	0x46020c00
 8002a9c:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002aa0:	f7fe fa18 	bl	8000ed4 <HAL_GetTick>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	1ad3      	subs	r3, r2, r3
 8002aaa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d901      	bls.n	8002ab6 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	e090      	b.n	8002bd8 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002ab6:	4b4a      	ldr	r3, [pc, #296]	@ (8002be0 <HAL_RCC_ClockConfig+0x3d0>)
 8002ab8:	69db      	ldr	r3, [r3, #28]
 8002aba:	f003 030c 	and.w	r3, r3, #12
 8002abe:	2b04      	cmp	r3, #4
 8002ac0:	d1ee      	bne.n	8002aa0 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 0302 	and.w	r3, r3, #2
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d010      	beq.n	8002af0 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	689a      	ldr	r2, [r3, #8]
 8002ad2:	4b43      	ldr	r3, [pc, #268]	@ (8002be0 <HAL_RCC_ClockConfig+0x3d0>)
 8002ad4:	6a1b      	ldr	r3, [r3, #32]
 8002ad6:	f003 030f 	and.w	r3, r3, #15
 8002ada:	429a      	cmp	r2, r3
 8002adc:	d208      	bcs.n	8002af0 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8002ade:	4b40      	ldr	r3, [pc, #256]	@ (8002be0 <HAL_RCC_ClockConfig+0x3d0>)
 8002ae0:	6a1b      	ldr	r3, [r3, #32]
 8002ae2:	f023 020f 	bic.w	r2, r3, #15
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	689b      	ldr	r3, [r3, #8]
 8002aea:	493d      	ldr	r1, [pc, #244]	@ (8002be0 <HAL_RCC_ClockConfig+0x3d0>)
 8002aec:	4313      	orrs	r3, r2
 8002aee:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002af0:	4b3c      	ldr	r3, [pc, #240]	@ (8002be4 <HAL_RCC_ClockConfig+0x3d4>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f003 030f 	and.w	r3, r3, #15
 8002af8:	683a      	ldr	r2, [r7, #0]
 8002afa:	429a      	cmp	r2, r3
 8002afc:	d210      	bcs.n	8002b20 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002afe:	4b39      	ldr	r3, [pc, #228]	@ (8002be4 <HAL_RCC_ClockConfig+0x3d4>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f023 020f 	bic.w	r2, r3, #15
 8002b06:	4937      	ldr	r1, [pc, #220]	@ (8002be4 <HAL_RCC_ClockConfig+0x3d4>)
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b0e:	4b35      	ldr	r3, [pc, #212]	@ (8002be4 <HAL_RCC_ClockConfig+0x3d4>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f003 030f 	and.w	r3, r3, #15
 8002b16:	683a      	ldr	r2, [r7, #0]
 8002b18:	429a      	cmp	r2, r3
 8002b1a:	d001      	beq.n	8002b20 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	e05b      	b.n	8002bd8 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f003 0304 	and.w	r3, r3, #4
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d010      	beq.n	8002b4e <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	68da      	ldr	r2, [r3, #12]
 8002b30:	4b2b      	ldr	r3, [pc, #172]	@ (8002be0 <HAL_RCC_ClockConfig+0x3d0>)
 8002b32:	6a1b      	ldr	r3, [r3, #32]
 8002b34:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d208      	bcs.n	8002b4e <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8002b3c:	4b28      	ldr	r3, [pc, #160]	@ (8002be0 <HAL_RCC_ClockConfig+0x3d0>)
 8002b3e:	6a1b      	ldr	r3, [r3, #32]
 8002b40:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	68db      	ldr	r3, [r3, #12]
 8002b48:	4925      	ldr	r1, [pc, #148]	@ (8002be0 <HAL_RCC_ClockConfig+0x3d0>)
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 0308 	and.w	r3, r3, #8
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d012      	beq.n	8002b80 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	691a      	ldr	r2, [r3, #16]
 8002b5e:	4b20      	ldr	r3, [pc, #128]	@ (8002be0 <HAL_RCC_ClockConfig+0x3d0>)
 8002b60:	6a1b      	ldr	r3, [r3, #32]
 8002b62:	091b      	lsrs	r3, r3, #4
 8002b64:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d209      	bcs.n	8002b80 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8002b6c:	4b1c      	ldr	r3, [pc, #112]	@ (8002be0 <HAL_RCC_ClockConfig+0x3d0>)
 8002b6e:	6a1b      	ldr	r3, [r3, #32]
 8002b70:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	691b      	ldr	r3, [r3, #16]
 8002b78:	011b      	lsls	r3, r3, #4
 8002b7a:	4919      	ldr	r1, [pc, #100]	@ (8002be0 <HAL_RCC_ClockConfig+0x3d0>)
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f003 0310 	and.w	r3, r3, #16
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d010      	beq.n	8002bae <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	695a      	ldr	r2, [r3, #20]
 8002b90:	4b13      	ldr	r3, [pc, #76]	@ (8002be0 <HAL_RCC_ClockConfig+0x3d0>)
 8002b92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b94:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002b98:	429a      	cmp	r2, r3
 8002b9a:	d208      	bcs.n	8002bae <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8002b9c:	4b10      	ldr	r3, [pc, #64]	@ (8002be0 <HAL_RCC_ClockConfig+0x3d0>)
 8002b9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ba0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	695b      	ldr	r3, [r3, #20]
 8002ba8:	490d      	ldr	r1, [pc, #52]	@ (8002be0 <HAL_RCC_ClockConfig+0x3d0>)
 8002baa:	4313      	orrs	r3, r2
 8002bac:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002bae:	f000 f821 	bl	8002bf4 <HAL_RCC_GetSysClockFreq>
 8002bb2:	4602      	mov	r2, r0
 8002bb4:	4b0a      	ldr	r3, [pc, #40]	@ (8002be0 <HAL_RCC_ClockConfig+0x3d0>)
 8002bb6:	6a1b      	ldr	r3, [r3, #32]
 8002bb8:	f003 030f 	and.w	r3, r3, #15
 8002bbc:	490a      	ldr	r1, [pc, #40]	@ (8002be8 <HAL_RCC_ClockConfig+0x3d8>)
 8002bbe:	5ccb      	ldrb	r3, [r1, r3]
 8002bc0:	fa22 f303 	lsr.w	r3, r2, r3
 8002bc4:	4a09      	ldr	r2, [pc, #36]	@ (8002bec <HAL_RCC_ClockConfig+0x3dc>)
 8002bc6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002bc8:	4b09      	ldr	r3, [pc, #36]	@ (8002bf0 <HAL_RCC_ClockConfig+0x3e0>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f7fe f8f7 	bl	8000dc0 <HAL_InitTick>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	73fb      	strb	r3, [r7, #15]

  return status;
 8002bd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	3718      	adds	r7, #24
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}
 8002be0:	46020c00 	.word	0x46020c00
 8002be4:	40022000 	.word	0x40022000
 8002be8:	08007188 	.word	0x08007188
 8002bec:	20000000 	.word	0x20000000
 8002bf0:	20000004 	.word	0x20000004

08002bf4 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b08b      	sub	sp, #44	@ 0x2c
 8002bf8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c02:	4b78      	ldr	r3, [pc, #480]	@ (8002de4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002c04:	69db      	ldr	r3, [r3, #28]
 8002c06:	f003 030c 	and.w	r3, r3, #12
 8002c0a:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c0c:	4b75      	ldr	r3, [pc, #468]	@ (8002de4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002c0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c10:	f003 0303 	and.w	r3, r3, #3
 8002c14:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002c16:	69bb      	ldr	r3, [r7, #24]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d005      	beq.n	8002c28 <HAL_RCC_GetSysClockFreq+0x34>
 8002c1c:	69bb      	ldr	r3, [r7, #24]
 8002c1e:	2b0c      	cmp	r3, #12
 8002c20:	d121      	bne.n	8002c66 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d11e      	bne.n	8002c66 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8002c28:	4b6e      	ldr	r3, [pc, #440]	@ (8002de4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d107      	bne.n	8002c44 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8002c34:	4b6b      	ldr	r3, [pc, #428]	@ (8002de4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002c36:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002c3a:	0b1b      	lsrs	r3, r3, #12
 8002c3c:	f003 030f 	and.w	r3, r3, #15
 8002c40:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c42:	e005      	b.n	8002c50 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8002c44:	4b67      	ldr	r3, [pc, #412]	@ (8002de4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	0f1b      	lsrs	r3, r3, #28
 8002c4a:	f003 030f 	and.w	r3, r3, #15
 8002c4e:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002c50:	4a65      	ldr	r2, [pc, #404]	@ (8002de8 <HAL_RCC_GetSysClockFreq+0x1f4>)
 8002c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c58:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002c5a:	69bb      	ldr	r3, [r7, #24]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d110      	bne.n	8002c82 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002c60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c62:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002c64:	e00d      	b.n	8002c82 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c66:	4b5f      	ldr	r3, [pc, #380]	@ (8002de4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002c68:	69db      	ldr	r3, [r3, #28]
 8002c6a:	f003 030c 	and.w	r3, r3, #12
 8002c6e:	2b04      	cmp	r3, #4
 8002c70:	d102      	bne.n	8002c78 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002c72:	4b5e      	ldr	r3, [pc, #376]	@ (8002dec <HAL_RCC_GetSysClockFreq+0x1f8>)
 8002c74:	623b      	str	r3, [r7, #32]
 8002c76:	e004      	b.n	8002c82 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c78:	69bb      	ldr	r3, [r7, #24]
 8002c7a:	2b08      	cmp	r3, #8
 8002c7c:	d101      	bne.n	8002c82 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002c7e:	4b5b      	ldr	r3, [pc, #364]	@ (8002dec <HAL_RCC_GetSysClockFreq+0x1f8>)
 8002c80:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c82:	69bb      	ldr	r3, [r7, #24]
 8002c84:	2b0c      	cmp	r3, #12
 8002c86:	f040 80a5 	bne.w	8002dd4 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8002c8a:	4b56      	ldr	r3, [pc, #344]	@ (8002de4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002c8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c8e:	f003 0303 	and.w	r3, r3, #3
 8002c92:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8002c94:	4b53      	ldr	r3, [pc, #332]	@ (8002de4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002c96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c98:	0a1b      	lsrs	r3, r3, #8
 8002c9a:	f003 030f 	and.w	r3, r3, #15
 8002c9e:	3301      	adds	r3, #1
 8002ca0:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8002ca2:	4b50      	ldr	r3, [pc, #320]	@ (8002de4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002ca4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ca6:	091b      	lsrs	r3, r3, #4
 8002ca8:	f003 0301 	and.w	r3, r3, #1
 8002cac:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8002cae:	4b4d      	ldr	r3, [pc, #308]	@ (8002de4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002cb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cb2:	08db      	lsrs	r3, r3, #3
 8002cb4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002cb8:	68ba      	ldr	r2, [r7, #8]
 8002cba:	fb02 f303 	mul.w	r3, r2, r3
 8002cbe:	ee07 3a90 	vmov	s15, r3
 8002cc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002cc6:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	2b02      	cmp	r3, #2
 8002cce:	d003      	beq.n	8002cd8 <HAL_RCC_GetSysClockFreq+0xe4>
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	2b03      	cmp	r3, #3
 8002cd4:	d022      	beq.n	8002d1c <HAL_RCC_GetSysClockFreq+0x128>
 8002cd6:	e043      	b.n	8002d60 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	ee07 3a90 	vmov	s15, r3
 8002cde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ce2:	eddf 6a43 	vldr	s13, [pc, #268]	@ 8002df0 <HAL_RCC_GetSysClockFreq+0x1fc>
 8002ce6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002cea:	4b3e      	ldr	r3, [pc, #248]	@ (8002de4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002cec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002cf2:	ee07 3a90 	vmov	s15, r3
 8002cf6:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002cfa:	ed97 6a01 	vldr	s12, [r7, #4]
 8002cfe:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 8002df4 <HAL_RCC_GetSysClockFreq+0x200>
 8002d02:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002d06:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002d0a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002d0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002d12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d16:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002d1a:	e046      	b.n	8002daa <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	ee07 3a90 	vmov	s15, r3
 8002d22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d26:	eddf 6a32 	vldr	s13, [pc, #200]	@ 8002df0 <HAL_RCC_GetSysClockFreq+0x1fc>
 8002d2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002d2e:	4b2d      	ldr	r3, [pc, #180]	@ (8002de4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002d30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d36:	ee07 3a90 	vmov	s15, r3
 8002d3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002d3e:	ed97 6a01 	vldr	s12, [r7, #4]
 8002d42:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 8002df4 <HAL_RCC_GetSysClockFreq+0x200>
 8002d46:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002d4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002d4e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002d52:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002d56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d5a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002d5e:	e024      	b.n	8002daa <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002d60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d62:	ee07 3a90 	vmov	s15, r3
 8002d66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	ee07 3a90 	vmov	s15, r3
 8002d70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d74:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002d78:	4b1a      	ldr	r3, [pc, #104]	@ (8002de4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002d7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d80:	ee07 3a90 	vmov	s15, r3
 8002d84:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002d88:	ed97 6a01 	vldr	s12, [r7, #4]
 8002d8c:	eddf 5a19 	vldr	s11, [pc, #100]	@ 8002df4 <HAL_RCC_GetSysClockFreq+0x200>
 8002d90:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002d94:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002d98:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002d9c:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002da0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002da4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002da8:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8002daa:	4b0e      	ldr	r3, [pc, #56]	@ (8002de4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002dac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002dae:	0e1b      	lsrs	r3, r3, #24
 8002db0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002db4:	3301      	adds	r3, #1
 8002db6:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	ee07 3a90 	vmov	s15, r3
 8002dbe:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002dc2:	edd7 6a07 	vldr	s13, [r7, #28]
 8002dc6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002dca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002dce:	ee17 3a90 	vmov	r3, s15
 8002dd2:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8002dd4:	6a3b      	ldr	r3, [r7, #32]
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	372c      	adds	r7, #44	@ 0x2c
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de0:	4770      	bx	lr
 8002de2:	bf00      	nop
 8002de4:	46020c00 	.word	0x46020c00
 8002de8:	080071a0 	.word	0x080071a0
 8002dec:	00f42400 	.word	0x00f42400
 8002df0:	4b742400 	.word	0x4b742400
 8002df4:	46000000 	.word	0x46000000

08002df8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002dfc:	f7ff fefa 	bl	8002bf4 <HAL_RCC_GetSysClockFreq>
 8002e00:	4602      	mov	r2, r0
 8002e02:	4b07      	ldr	r3, [pc, #28]	@ (8002e20 <HAL_RCC_GetHCLKFreq+0x28>)
 8002e04:	6a1b      	ldr	r3, [r3, #32]
 8002e06:	f003 030f 	and.w	r3, r3, #15
 8002e0a:	4906      	ldr	r1, [pc, #24]	@ (8002e24 <HAL_RCC_GetHCLKFreq+0x2c>)
 8002e0c:	5ccb      	ldrb	r3, [r1, r3]
 8002e0e:	fa22 f303 	lsr.w	r3, r2, r3
 8002e12:	4a05      	ldr	r2, [pc, #20]	@ (8002e28 <HAL_RCC_GetHCLKFreq+0x30>)
 8002e14:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8002e16:	4b04      	ldr	r3, [pc, #16]	@ (8002e28 <HAL_RCC_GetHCLKFreq+0x30>)
 8002e18:	681b      	ldr	r3, [r3, #0]
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	bd80      	pop	{r7, pc}
 8002e1e:	bf00      	nop
 8002e20:	46020c00 	.word	0x46020c00
 8002e24:	08007188 	.word	0x08007188
 8002e28:	20000000 	.word	0x20000000

08002e2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8002e30:	f7ff ffe2 	bl	8002df8 <HAL_RCC_GetHCLKFreq>
 8002e34:	4602      	mov	r2, r0
 8002e36:	4b05      	ldr	r3, [pc, #20]	@ (8002e4c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e38:	6a1b      	ldr	r3, [r3, #32]
 8002e3a:	091b      	lsrs	r3, r3, #4
 8002e3c:	f003 0307 	and.w	r3, r3, #7
 8002e40:	4903      	ldr	r1, [pc, #12]	@ (8002e50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e42:	5ccb      	ldrb	r3, [r1, r3]
 8002e44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	bd80      	pop	{r7, pc}
 8002e4c:	46020c00 	.word	0x46020c00
 8002e50:	08007198 	.word	0x08007198

08002e54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8002e58:	f7ff ffce 	bl	8002df8 <HAL_RCC_GetHCLKFreq>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	4b05      	ldr	r3, [pc, #20]	@ (8002e74 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e60:	6a1b      	ldr	r3, [r3, #32]
 8002e62:	0a1b      	lsrs	r3, r3, #8
 8002e64:	f003 0307 	and.w	r3, r3, #7
 8002e68:	4903      	ldr	r1, [pc, #12]	@ (8002e78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e6a:	5ccb      	ldrb	r3, [r1, r3]
 8002e6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	bd80      	pop	{r7, pc}
 8002e74:	46020c00 	.word	0x46020c00
 8002e78:	08007198 	.word	0x08007198

08002e7c <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8002e80:	f7ff ffba 	bl	8002df8 <HAL_RCC_GetHCLKFreq>
 8002e84:	4602      	mov	r2, r0
 8002e86:	4b05      	ldr	r3, [pc, #20]	@ (8002e9c <HAL_RCC_GetPCLK3Freq+0x20>)
 8002e88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e8a:	091b      	lsrs	r3, r3, #4
 8002e8c:	f003 0307 	and.w	r3, r3, #7
 8002e90:	4903      	ldr	r1, [pc, #12]	@ (8002ea0 <HAL_RCC_GetPCLK3Freq+0x24>)
 8002e92:	5ccb      	ldrb	r3, [r1, r3]
 8002e94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	bd80      	pop	{r7, pc}
 8002e9c:	46020c00 	.word	0x46020c00
 8002ea0:	08007198 	.word	0x08007198

08002ea4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b086      	sub	sp, #24
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002eac:	4b3e      	ldr	r3, [pc, #248]	@ (8002fa8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002eae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002eb2:	f003 0304 	and.w	r3, r3, #4
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d003      	beq.n	8002ec2 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002eba:	f7fe fd5f 	bl	800197c <HAL_PWREx_GetVoltageRange>
 8002ebe:	6178      	str	r0, [r7, #20]
 8002ec0:	e019      	b.n	8002ef6 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002ec2:	4b39      	ldr	r3, [pc, #228]	@ (8002fa8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002ec4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ec8:	4a37      	ldr	r2, [pc, #220]	@ (8002fa8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002eca:	f043 0304 	orr.w	r3, r3, #4
 8002ece:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8002ed2:	4b35      	ldr	r3, [pc, #212]	@ (8002fa8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002ed4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ed8:	f003 0304 	and.w	r3, r3, #4
 8002edc:	60fb      	str	r3, [r7, #12]
 8002ede:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002ee0:	f7fe fd4c 	bl	800197c <HAL_PWREx_GetVoltageRange>
 8002ee4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002ee6:	4b30      	ldr	r3, [pc, #192]	@ (8002fa8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002ee8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002eec:	4a2e      	ldr	r2, [pc, #184]	@ (8002fa8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002eee:	f023 0304 	bic.w	r3, r3, #4
 8002ef2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002efc:	d003      	beq.n	8002f06 <RCC_SetFlashLatencyFromMSIRange+0x62>
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002f04:	d109      	bne.n	8002f1a <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002f0c:	d202      	bcs.n	8002f14 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8002f0e:	2301      	movs	r3, #1
 8002f10:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8002f12:	e033      	b.n	8002f7c <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8002f14:	2300      	movs	r3, #0
 8002f16:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8002f18:	e030      	b.n	8002f7c <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002f20:	d208      	bcs.n	8002f34 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f28:	d102      	bne.n	8002f30 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8002f2a:	2303      	movs	r3, #3
 8002f2c:	613b      	str	r3, [r7, #16]
 8002f2e:	e025      	b.n	8002f7c <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8002f30:	2301      	movs	r3, #1
 8002f32:	e035      	b.n	8002fa0 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002f3a:	d90f      	bls.n	8002f5c <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d109      	bne.n	8002f56 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002f48:	d902      	bls.n	8002f50 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	613b      	str	r3, [r7, #16]
 8002f4e:	e015      	b.n	8002f7c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8002f50:	2301      	movs	r3, #1
 8002f52:	613b      	str	r3, [r7, #16]
 8002f54:	e012      	b.n	8002f7c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8002f56:	2300      	movs	r3, #0
 8002f58:	613b      	str	r3, [r7, #16]
 8002f5a:	e00f      	b.n	8002f7c <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002f62:	d109      	bne.n	8002f78 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f6a:	d102      	bne.n	8002f72 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	613b      	str	r3, [r7, #16]
 8002f70:	e004      	b.n	8002f7c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8002f72:	2302      	movs	r3, #2
 8002f74:	613b      	str	r3, [r7, #16]
 8002f76:	e001      	b.n	8002f7c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8002f78:	2301      	movs	r3, #1
 8002f7a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002f7c:	4b0b      	ldr	r3, [pc, #44]	@ (8002fac <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f023 020f 	bic.w	r2, r3, #15
 8002f84:	4909      	ldr	r1, [pc, #36]	@ (8002fac <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8002f8c:	4b07      	ldr	r3, [pc, #28]	@ (8002fac <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f003 030f 	and.w	r3, r3, #15
 8002f94:	693a      	ldr	r2, [r7, #16]
 8002f96:	429a      	cmp	r2, r3
 8002f98:	d001      	beq.n	8002f9e <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e000      	b.n	8002fa0 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8002f9e:	2300      	movs	r3, #0
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	3718      	adds	r7, #24
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}
 8002fa8:	46020c00 	.word	0x46020c00
 8002fac:	40022000 	.word	0x40022000

08002fb0 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8002fb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002fb4:	b0c8      	sub	sp, #288	@ 0x120
 8002fb6:	af00      	add	r7, sp, #0
 8002fb8:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002fc8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fd0:	f002 0401 	and.w	r4, r2, #1
 8002fd4:	2500      	movs	r5, #0
 8002fd6:	ea54 0305 	orrs.w	r3, r4, r5
 8002fda:	d00b      	beq.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8002fdc:	4bd5      	ldr	r3, [pc, #852]	@ (8003334 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002fde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002fe2:	f023 0103 	bic.w	r1, r3, #3
 8002fe6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002fea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002fec:	4ad1      	ldr	r2, [pc, #836]	@ (8003334 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002fee:	430b      	orrs	r3, r1
 8002ff0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002ff4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ffc:	f002 0802 	and.w	r8, r2, #2
 8003000:	f04f 0900 	mov.w	r9, #0
 8003004:	ea58 0309 	orrs.w	r3, r8, r9
 8003008:	d00b      	beq.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 800300a:	4bca      	ldr	r3, [pc, #808]	@ (8003334 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800300c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003010:	f023 010c 	bic.w	r1, r3, #12
 8003014:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003018:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800301a:	4ac6      	ldr	r2, [pc, #792]	@ (8003334 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800301c:	430b      	orrs	r3, r1
 800301e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003022:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800302a:	f002 0a04 	and.w	sl, r2, #4
 800302e:	f04f 0b00 	mov.w	fp, #0
 8003032:	ea5a 030b 	orrs.w	r3, sl, fp
 8003036:	d00b      	beq.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8003038:	4bbe      	ldr	r3, [pc, #760]	@ (8003334 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800303a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800303e:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8003042:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003046:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003048:	4aba      	ldr	r2, [pc, #744]	@ (8003334 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800304a:	430b      	orrs	r3, r1
 800304c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003050:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003058:	f002 0308 	and.w	r3, r2, #8
 800305c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003060:	2300      	movs	r3, #0
 8003062:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003066:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800306a:	460b      	mov	r3, r1
 800306c:	4313      	orrs	r3, r2
 800306e:	d00b      	beq.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8003070:	4bb0      	ldr	r3, [pc, #704]	@ (8003334 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003072:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003076:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800307a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800307e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003080:	4aac      	ldr	r2, [pc, #688]	@ (8003334 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003082:	430b      	orrs	r3, r1
 8003084:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003088:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800308c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003090:	f002 0310 	and.w	r3, r2, #16
 8003094:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003098:	2300      	movs	r3, #0
 800309a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800309e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80030a2:	460b      	mov	r3, r1
 80030a4:	4313      	orrs	r3, r2
 80030a6:	d00b      	beq.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 80030a8:	4ba2      	ldr	r3, [pc, #648]	@ (8003334 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80030aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80030ae:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80030b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80030b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030b8:	4a9e      	ldr	r2, [pc, #632]	@ (8003334 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80030ba:	430b      	orrs	r3, r1
 80030bc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80030c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80030c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030c8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80030cc:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80030d0:	2300      	movs	r3, #0
 80030d2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80030d6:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80030da:	460b      	mov	r3, r1
 80030dc:	4313      	orrs	r3, r2
 80030de:	d00b      	beq.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 80030e0:	4b94      	ldr	r3, [pc, #592]	@ (8003334 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80030e2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80030e6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80030ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80030ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80030f0:	4a90      	ldr	r2, [pc, #576]	@ (8003334 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80030f2:	430b      	orrs	r3, r1
 80030f4:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80030f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80030fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003100:	f002 0320 	and.w	r3, r2, #32
 8003104:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003108:	2300      	movs	r3, #0
 800310a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800310e:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003112:	460b      	mov	r3, r1
 8003114:	4313      	orrs	r3, r2
 8003116:	d00b      	beq.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8003118:	4b86      	ldr	r3, [pc, #536]	@ (8003334 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800311a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800311e:	f023 0107 	bic.w	r1, r3, #7
 8003122:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003126:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003128:	4a82      	ldr	r2, [pc, #520]	@ (8003334 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800312a:	430b      	orrs	r3, r1
 800312c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003130:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003138:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800313c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003140:	2300      	movs	r3, #0
 8003142:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003146:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800314a:	460b      	mov	r3, r1
 800314c:	4313      	orrs	r3, r2
 800314e:	d00b      	beq.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8003150:	4b78      	ldr	r3, [pc, #480]	@ (8003334 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003152:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003156:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 800315a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800315e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003160:	4a74      	ldr	r2, [pc, #464]	@ (8003334 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003162:	430b      	orrs	r3, r1
 8003164:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003168:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800316c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003170:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8003174:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003178:	2300      	movs	r3, #0
 800317a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800317e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003182:	460b      	mov	r3, r1
 8003184:	4313      	orrs	r3, r2
 8003186:	d00b      	beq.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8003188:	4b6a      	ldr	r3, [pc, #424]	@ (8003334 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800318a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800318e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003192:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003196:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003198:	4a66      	ldr	r2, [pc, #408]	@ (8003334 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800319a:	430b      	orrs	r3, r1
 800319c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80031a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80031a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031a8:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 80031ac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80031b0:	2300      	movs	r3, #0
 80031b2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80031b6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80031ba:	460b      	mov	r3, r1
 80031bc:	4313      	orrs	r3, r2
 80031be:	d00b      	beq.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 80031c0:	4b5c      	ldr	r3, [pc, #368]	@ (8003334 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80031c2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80031c6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80031ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80031ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80031d0:	4a58      	ldr	r2, [pc, #352]	@ (8003334 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80031d2:	430b      	orrs	r3, r1
 80031d4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80031d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80031dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031e0:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80031e4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80031e8:	2300      	movs	r3, #0
 80031ea:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80031ee:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80031f2:	460b      	mov	r3, r1
 80031f4:	4313      	orrs	r3, r2
 80031f6:	d00b      	beq.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 80031f8:	4b4e      	ldr	r3, [pc, #312]	@ (8003334 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80031fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80031fe:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 8003202:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003206:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003208:	4a4a      	ldr	r2, [pc, #296]	@ (8003334 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800320a:	430b      	orrs	r3, r1
 800320c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(I2C5)
  /*-------------------------- I2C5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C5) == RCC_PERIPHCLK_I2C5)
 8003210:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003218:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800321c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003220:	2300      	movs	r3, #0
 8003222:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003226:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800322a:	460b      	mov	r3, r1
 800322c:	4313      	orrs	r3, r2
 800322e:	d00b      	beq.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C5CLKSOURCE(pPeriphClkInit->I2c5ClockSelection));

    /* Configure the I2C5 clock source */
    __HAL_RCC_I2C5_CONFIG(pPeriphClkInit->I2c5ClockSelection);
 8003230:	4b40      	ldr	r3, [pc, #256]	@ (8003334 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003232:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003236:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 800323a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800323e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003240:	4a3c      	ldr	r2, [pc, #240]	@ (8003334 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003242:	430b      	orrs	r3, r1
 8003244:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* I2C5 */

#if defined(I2C6)
  /*-------------------------- I2C6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C6) == RCC_PERIPHCLK_I2C6)
 8003248:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800324c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003250:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8003254:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003258:	2300      	movs	r3, #0
 800325a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800325e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003262:	460b      	mov	r3, r1
 8003264:	4313      	orrs	r3, r2
 8003266:	d00c      	beq.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C6CLKSOURCE(pPeriphClkInit->I2c6ClockSelection));

    /* Configure the I2C6 clock source */
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
 8003268:	4b32      	ldr	r3, [pc, #200]	@ (8003334 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800326a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800326e:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8003272:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003276:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800327a:	4a2e      	ldr	r2, [pc, #184]	@ (8003334 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800327c:	430b      	orrs	r3, r1
 800327e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003282:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800328a:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 800328e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003292:	2300      	movs	r3, #0
 8003294:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003298:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800329c:	460b      	mov	r3, r1
 800329e:	4313      	orrs	r3, r2
 80032a0:	d00c      	beq.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x30c>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 80032a2:	4b24      	ldr	r3, [pc, #144]	@ (8003334 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80032a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80032a8:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 80032ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80032b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80032b4:	4a1f      	ldr	r2, [pc, #124]	@ (8003334 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80032b6:	430b      	orrs	r3, r1
 80032b8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80032bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80032c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032c4:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80032c8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80032cc:	2300      	movs	r3, #0
 80032ce:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80032d2:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80032d6:	460b      	mov	r3, r1
 80032d8:	4313      	orrs	r3, r2
 80032da:	d00c      	beq.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 80032dc:	4b15      	ldr	r3, [pc, #84]	@ (8003334 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80032de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80032e2:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 80032e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80032ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032ee:	4a11      	ldr	r2, [pc, #68]	@ (8003334 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80032f0:	430b      	orrs	r3, r1
 80032f2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 80032f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80032fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032fe:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8003302:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003306:	2300      	movs	r3, #0
 8003308:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800330c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8003310:	460b      	mov	r3, r1
 8003312:	4313      	orrs	r3, r2
 8003314:	d010      	beq.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0x388>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8003316:	4b07      	ldr	r3, [pc, #28]	@ (8003334 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003318:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800331c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003320:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003324:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003328:	4a02      	ldr	r2, [pc, #8]	@ (8003334 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800332a:	430b      	orrs	r3, r1
 800332c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003330:	e002      	b.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0x388>
 8003332:	bf00      	nop
 8003334:	46020c00 	.word	0x46020c00
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003338:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800333c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003340:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003344:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003348:	2300      	movs	r3, #0
 800334a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800334e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8003352:	460b      	mov	r3, r1
 8003354:	4313      	orrs	r3, r2
 8003356:	d04c      	beq.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8003358:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800335c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003360:	2b80      	cmp	r3, #128	@ 0x80
 8003362:	d02d      	beq.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8003364:	2b80      	cmp	r3, #128	@ 0x80
 8003366:	d827      	bhi.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8003368:	2b60      	cmp	r3, #96	@ 0x60
 800336a:	d02b      	beq.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0x414>
 800336c:	2b60      	cmp	r3, #96	@ 0x60
 800336e:	d823      	bhi.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8003370:	2b40      	cmp	r3, #64	@ 0x40
 8003372:	d006      	beq.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 8003374:	2b40      	cmp	r3, #64	@ 0x40
 8003376:	d81f      	bhi.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8003378:	2b00      	cmp	r3, #0
 800337a:	d009      	beq.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800337c:	2b20      	cmp	r3, #32
 800337e:	d011      	beq.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8003380:	e01a      	b.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003382:	4bc0      	ldr	r3, [pc, #768]	@ (8003684 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8003384:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003386:	4abf      	ldr	r2, [pc, #764]	@ (8003684 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8003388:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800338c:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 800338e:	e01a      	b.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003390:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003394:	3308      	adds	r3, #8
 8003396:	4618      	mov	r0, r3
 8003398:	f002 fcd6 	bl	8005d48 <RCCEx_PLL2_Config>
 800339c:	4603      	mov	r3, r0
 800339e:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI1 clock source config set later after clock selection check */
        break;
 80033a2:	e010      	b.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80033a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80033a8:	332c      	adds	r3, #44	@ 0x2c
 80033aa:	4618      	mov	r0, r3
 80033ac:	f002 fd64 	bl	8005e78 <RCCEx_PLL3_Config>
 80033b0:	4603      	mov	r3, r0
 80033b2:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI1 clock source config set later after clock selection check */
        break;
 80033b6:	e006      	b.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0x416>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80033b8:	2301      	movs	r3, #1
 80033ba:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 80033be:	e002      	b.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 80033c0:	bf00      	nop
 80033c2:	e000      	b.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 80033c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033c6:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d10d      	bne.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 80033ce:	4bad      	ldr	r3, [pc, #692]	@ (8003684 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80033d0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80033d4:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 80033d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80033dc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80033e0:	4aa8      	ldr	r2, [pc, #672]	@ (8003684 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80033e2:	430b      	orrs	r3, r1
 80033e4:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80033e8:	e003      	b.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033ea:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 80033ee:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80033f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80033f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033fa:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80033fe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003402:	2300      	movs	r3, #0
 8003404:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003408:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800340c:	460b      	mov	r3, r1
 800340e:	4313      	orrs	r3, r2
 8003410:	d053      	beq.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8003412:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003416:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800341a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800341e:	d033      	beq.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
 8003420:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003424:	d82c      	bhi.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8003426:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800342a:	d02f      	beq.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
 800342c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003430:	d826      	bhi.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8003432:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003436:	d008      	beq.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x49a>
 8003438:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800343c:	d820      	bhi.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800343e:	2b00      	cmp	r3, #0
 8003440:	d00a      	beq.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003442:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003446:	d011      	beq.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8003448:	e01a      	b.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800344a:	4b8e      	ldr	r3, [pc, #568]	@ (8003684 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800344c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800344e:	4a8d      	ldr	r2, [pc, #564]	@ (8003684 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8003450:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003454:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8003456:	e01a      	b.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003458:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800345c:	3308      	adds	r3, #8
 800345e:	4618      	mov	r0, r3
 8003460:	f002 fc72 	bl	8005d48 <RCCEx_PLL2_Config>
 8003464:	4603      	mov	r3, r0
 8003466:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI2 clock source config set later after clock selection check */
        break;
 800346a:	e010      	b.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800346c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003470:	332c      	adds	r3, #44	@ 0x2c
 8003472:	4618      	mov	r0, r3
 8003474:	f002 fd00 	bl	8005e78 <RCCEx_PLL3_Config>
 8003478:	4603      	mov	r3, r0
 800347a:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI2 clock source config set later after clock selection check */
        break;
 800347e:	e006      	b.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x4de>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003480:	2301      	movs	r3, #1
 8003482:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8003486:	e002      	b.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 8003488:	bf00      	nop
 800348a:	e000      	b.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 800348c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800348e:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8003492:	2b00      	cmp	r3, #0
 8003494:	d10d      	bne.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8003496:	4b7b      	ldr	r3, [pc, #492]	@ (8003684 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8003498:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800349c:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 80034a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80034a4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80034a8:	4a76      	ldr	r2, [pc, #472]	@ (8003684 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80034aa:	430b      	orrs	r3, r1
 80034ac:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80034b0:	e003      	b.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x50a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034b2:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 80034b6:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 80034ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80034be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034c2:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80034c6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80034ca:	2300      	movs	r3, #0
 80034cc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80034d0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80034d4:	460b      	mov	r3, r1
 80034d6:	4313      	orrs	r3, r2
 80034d8:	d046      	beq.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 80034da:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80034de:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80034e2:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80034e6:	d028      	beq.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x58a>
 80034e8:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80034ec:	d821      	bhi.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x582>
 80034ee:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80034f2:	d022      	beq.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x58a>
 80034f4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80034f8:	d81b      	bhi.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x582>
 80034fa:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80034fe:	d01c      	beq.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x58a>
 8003500:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003504:	d815      	bhi.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8003506:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800350a:	d008      	beq.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x56e>
 800350c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003510:	d80f      	bhi.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8003512:	2b00      	cmp	r3, #0
 8003514:	d011      	beq.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x58a>
 8003516:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800351a:	d00e      	beq.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800351c:	e009      	b.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800351e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003522:	3308      	adds	r3, #8
 8003524:	4618      	mov	r0, r3
 8003526:	f002 fc0f 	bl	8005d48 <RCCEx_PLL2_Config>
 800352a:	4603      	mov	r3, r0
 800352c:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8003530:	e004      	b.n	800353c <HAL_RCCEx_PeriphCLKConfig+0x58c>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8003538:	e000      	b.n	800353c <HAL_RCCEx_PeriphCLKConfig+0x58c>
        break;
 800353a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800353c:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8003540:	2b00      	cmp	r3, #0
 8003542:	d10d      	bne.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0x5b0>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8003544:	4b4f      	ldr	r3, [pc, #316]	@ (8003684 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8003546:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800354a:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800354e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003552:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003556:	4a4b      	ldr	r2, [pc, #300]	@ (8003684 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8003558:	430b      	orrs	r3, r1
 800355a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800355e:	e003      	b.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003560:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8003564:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8003568:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800356c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003570:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8003574:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003578:	2300      	movs	r3, #0
 800357a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800357e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8003582:	460b      	mov	r3, r1
 8003584:	4313      	orrs	r3, r2
 8003586:	d03f      	beq.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x658>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8003588:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800358c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003590:	2b04      	cmp	r3, #4
 8003592:	d81e      	bhi.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0x622>
 8003594:	a201      	add	r2, pc, #4	@ (adr r2, 800359c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003596:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800359a:	bf00      	nop
 800359c:	080035db 	.word	0x080035db
 80035a0:	080035b1 	.word	0x080035b1
 80035a4:	080035bf 	.word	0x080035bf
 80035a8:	080035db 	.word	0x080035db
 80035ac:	080035db 	.word	0x080035db
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80035b0:	4b34      	ldr	r3, [pc, #208]	@ (8003684 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80035b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035b4:	4a33      	ldr	r2, [pc, #204]	@ (8003684 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80035b6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035ba:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 80035bc:	e00e      	b.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x62c>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80035be:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80035c2:	332c      	adds	r3, #44	@ 0x2c
 80035c4:	4618      	mov	r0, r3
 80035c6:	f002 fc57 	bl	8005e78 <RCCEx_PLL3_Config>
 80035ca:	4603      	mov	r3, r0
 80035cc:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 80035d0:	e004      	b.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x62c>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 80035d8:	e000      	b.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x62c>
        break;
 80035da:	bf00      	nop
    }
    if (ret == HAL_OK)
 80035dc:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d10d      	bne.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 80035e4:	4b27      	ldr	r3, [pc, #156]	@ (8003684 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80035e6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80035ea:	f023 0107 	bic.w	r1, r3, #7
 80035ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80035f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80035f6:	4a23      	ldr	r2, [pc, #140]	@ (8003684 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80035f8:	430b      	orrs	r3, r1
 80035fa:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80035fe:	e003      	b.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x658>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003600:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8003604:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8003608:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800360c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003610:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8003614:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003616:	2300      	movs	r3, #0
 8003618:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800361a:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800361e:	460b      	mov	r3, r1
 8003620:	4313      	orrs	r3, r2
 8003622:	d04c      	beq.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x70e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8003624:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003628:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800362c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003630:	d02a      	beq.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
 8003632:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003636:	d821      	bhi.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 8003638:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800363c:	d026      	beq.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x6dc>
 800363e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003642:	d81b      	bhi.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 8003644:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003648:	d00e      	beq.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 800364a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800364e:	d815      	bhi.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 8003650:	2b00      	cmp	r3, #0
 8003652:	d01d      	beq.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x6e0>
 8003654:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003658:	d110      	bne.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800365a:	4b0a      	ldr	r3, [pc, #40]	@ (8003684 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800365c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800365e:	4a09      	ldr	r2, [pc, #36]	@ (8003684 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8003660:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003664:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8003666:	e014      	b.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003668:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800366c:	332c      	adds	r3, #44	@ 0x2c
 800366e:	4618      	mov	r0, r3
 8003670:	f002 fc02 	bl	8005e78 <RCCEx_PLL3_Config>
 8003674:	4603      	mov	r3, r0
 8003676:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800367a:	e00a      	b.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800367c:	2301      	movs	r3, #1
 800367e:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8003682:	e006      	b.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8003684:	46020c00 	.word	0x46020c00
        break;
 8003688:	bf00      	nop
 800368a:	e002      	b.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
        break;
 800368c:	bf00      	nop
 800368e:	e000      	b.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
        break;
 8003690:	bf00      	nop
    }
    if (ret == HAL_OK)
 8003692:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8003696:	2b00      	cmp	r3, #0
 8003698:	d10d      	bne.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x706>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 800369a:	4baf      	ldr	r3, [pc, #700]	@ (8003958 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800369c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80036a0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80036a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80036a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80036ac:	4aaa      	ldr	r2, [pc, #680]	@ (8003958 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 80036ae:	430b      	orrs	r3, r1
 80036b0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80036b4:	e003      	b.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x70e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036b6:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 80036ba:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80036be:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80036c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036c6:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80036ca:	673b      	str	r3, [r7, #112]	@ 0x70
 80036cc:	2300      	movs	r3, #0
 80036ce:	677b      	str	r3, [r7, #116]	@ 0x74
 80036d0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80036d4:	460b      	mov	r3, r1
 80036d6:	4313      	orrs	r3, r2
 80036d8:	f000 80b5 	beq.w	8003846 <HAL_RCCEx_PeriphCLKConfig+0x896>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036dc:	2300      	movs	r3, #0
 80036de:	f887 3119 	strb.w	r3, [r7, #281]	@ 0x119
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036e2:	4b9d      	ldr	r3, [pc, #628]	@ (8003958 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 80036e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80036e8:	f003 0304 	and.w	r3, r3, #4
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d113      	bne.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x768>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036f0:	4b99      	ldr	r3, [pc, #612]	@ (8003958 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 80036f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80036f6:	4a98      	ldr	r2, [pc, #608]	@ (8003958 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 80036f8:	f043 0304 	orr.w	r3, r3, #4
 80036fc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8003700:	4b95      	ldr	r3, [pc, #596]	@ (8003958 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8003702:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003706:	f003 0304 	and.w	r3, r3, #4
 800370a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 800370e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
      pwrclkchanged = SET;
 8003712:	2301      	movs	r3, #1
 8003714:	f887 3119 	strb.w	r3, [r7, #281]	@ 0x119
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8003718:	4b90      	ldr	r3, [pc, #576]	@ (800395c <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 800371a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800371c:	4a8f      	ldr	r2, [pc, #572]	@ (800395c <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 800371e:	f043 0301 	orr.w	r3, r3, #1
 8003722:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003724:	f7fd fbd6 	bl	8000ed4 <HAL_GetTick>
 8003728:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800372c:	e00b      	b.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x796>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800372e:	f7fd fbd1 	bl	8000ed4 <HAL_GetTick>
 8003732:	4602      	mov	r2, r0
 8003734:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003738:	1ad3      	subs	r3, r2, r3
 800373a:	2b02      	cmp	r3, #2
 800373c:	d903      	bls.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x796>
      {
        ret = HAL_TIMEOUT;
 800373e:	2303      	movs	r3, #3
 8003740:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8003744:	e005      	b.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0x7a2>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003746:	4b85      	ldr	r3, [pc, #532]	@ (800395c <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 8003748:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800374a:	f003 0301 	and.w	r3, r3, #1
 800374e:	2b00      	cmp	r3, #0
 8003750:	d0ed      	beq.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x77e>
      }
    }

    if (ret == HAL_OK)
 8003752:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8003756:	2b00      	cmp	r3, #0
 8003758:	d165      	bne.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x876>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800375a:	4b7f      	ldr	r3, [pc, #508]	@ (8003958 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800375c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003760:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003764:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8003768:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800376c:	2b00      	cmp	r3, #0
 800376e:	d023      	beq.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x808>
 8003770:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003774:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8003778:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800377c:	4293      	cmp	r3, r2
 800377e:	d01b      	beq.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x808>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003780:	4b75      	ldr	r3, [pc, #468]	@ (8003958 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8003782:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003786:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800378a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800378e:	4b72      	ldr	r3, [pc, #456]	@ (8003958 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8003790:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003794:	4a70      	ldr	r2, [pc, #448]	@ (8003958 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8003796:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800379a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 800379e:	4b6e      	ldr	r3, [pc, #440]	@ (8003958 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 80037a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80037a4:	4a6c      	ldr	r2, [pc, #432]	@ (8003958 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 80037a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80037aa:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80037ae:	4a6a      	ldr	r2, [pc, #424]	@ (8003958 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 80037b0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80037b4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80037b8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80037bc:	f003 0301 	and.w	r3, r3, #1
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d019      	beq.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x848>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037c4:	f7fd fb86 	bl	8000ed4 <HAL_GetTick>
 80037c8:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037cc:	e00d      	b.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037ce:	f7fd fb81 	bl	8000ed4 <HAL_GetTick>
 80037d2:	4602      	mov	r2, r0
 80037d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037d8:	1ad2      	subs	r2, r2, r3
 80037da:	f241 3388 	movw	r3, #5000	@ 0x1388
 80037de:	429a      	cmp	r2, r3
 80037e0:	d903      	bls.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x83a>
          {
            ret = HAL_TIMEOUT;
 80037e2:	2303      	movs	r3, #3
 80037e4:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
            break;
 80037e8:	e006      	b.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x848>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037ea:	4b5b      	ldr	r3, [pc, #364]	@ (8003958 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 80037ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80037f0:	f003 0302 	and.w	r3, r3, #2
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d0ea      	beq.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x81e>
          }
        }
      }

      if (ret == HAL_OK)
 80037f8:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d10d      	bne.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x86c>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8003800:	4b55      	ldr	r3, [pc, #340]	@ (8003958 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8003802:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003806:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800380a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800380e:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8003812:	4a51      	ldr	r2, [pc, #324]	@ (8003958 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8003814:	430b      	orrs	r3, r1
 8003816:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800381a:	e008      	b.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x87e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800381c:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8003820:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
 8003824:	e003      	b.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x87e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003826:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800382a:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800382e:	f897 3119 	ldrb.w	r3, [r7, #281]	@ 0x119
 8003832:	2b01      	cmp	r3, #1
 8003834:	d107      	bne.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x896>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003836:	4b48      	ldr	r3, [pc, #288]	@ (8003958 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8003838:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800383c:	4a46      	ldr	r2, [pc, #280]	@ (8003958 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800383e:	f023 0304 	bic.w	r3, r3, #4
 8003842:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8003846:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800384a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800384e:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8003852:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003854:	2300      	movs	r3, #0
 8003856:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003858:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800385c:	460b      	mov	r3, r1
 800385e:	4313      	orrs	r3, r2
 8003860:	d042      	beq.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x938>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 8003862:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003866:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800386a:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800386e:	d022      	beq.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x906>
 8003870:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8003874:	d81b      	bhi.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 8003876:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800387a:	d011      	beq.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 800387c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003880:	d815      	bhi.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 8003882:	2b00      	cmp	r3, #0
 8003884:	d019      	beq.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x90a>
 8003886:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800388a:	d110      	bne.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x8fe>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800388c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003890:	3308      	adds	r3, #8
 8003892:	4618      	mov	r0, r3
 8003894:	f002 fa58 	bl	8005d48 <RCCEx_PLL2_Config>
 8003898:	4603      	mov	r3, r0
 800389a:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800389e:	e00d      	b.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x90c>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038a0:	4b2d      	ldr	r3, [pc, #180]	@ (8003958 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 80038a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038a4:	4a2c      	ldr	r2, [pc, #176]	@ (8003958 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 80038a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80038aa:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 80038ac:	e006      	b.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x90c>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 80038b4:	e002      	b.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x90c>
        break;
 80038b6:	bf00      	nop
 80038b8:	e000      	b.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x90c>
        break;
 80038ba:	bf00      	nop
    }
    if (ret == HAL_OK)
 80038bc:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d10d      	bne.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x930>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 80038c4:	4b24      	ldr	r3, [pc, #144]	@ (8003958 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 80038c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80038ca:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80038ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80038d2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80038d6:	4a20      	ldr	r2, [pc, #128]	@ (8003958 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 80038d8:	430b      	orrs	r3, r1
 80038da:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80038de:	e003      	b.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x938>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038e0:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 80038e4:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80038e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80038ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038f0:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80038f4:	663b      	str	r3, [r7, #96]	@ 0x60
 80038f6:	2300      	movs	r3, #0
 80038f8:	667b      	str	r3, [r7, #100]	@ 0x64
 80038fa:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80038fe:	460b      	mov	r3, r1
 8003900:	4313      	orrs	r3, r2
 8003902:	d031      	beq.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8003904:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003908:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800390c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003910:	d00b      	beq.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x97a>
 8003912:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003916:	d804      	bhi.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x972>
 8003918:	2b00      	cmp	r3, #0
 800391a:	d008      	beq.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x97e>
 800391c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003920:	d007      	beq.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0x982>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8003928:	e004      	b.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 800392a:	bf00      	nop
 800392c:	e002      	b.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 800392e:	bf00      	nop
 8003930:	e000      	b.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 8003932:	bf00      	nop
    }
    if (ret == HAL_OK)
 8003934:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8003938:	2b00      	cmp	r3, #0
 800393a:	d111      	bne.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 800393c:	4b06      	ldr	r3, [pc, #24]	@ (8003958 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800393e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003942:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003946:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800394a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800394e:	4a02      	ldr	r2, [pc, #8]	@ (8003958 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8003950:	430b      	orrs	r3, r1
 8003952:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003956:	e007      	b.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
 8003958:	46020c00 	.word	0x46020c00
 800395c:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003960:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8003964:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#if defined(SAES)
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 8003968:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800396c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003970:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8003974:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003976:	2300      	movs	r3, #0
 8003978:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800397a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800397e:	460b      	mov	r3, r1
 8003980:	4313      	orrs	r3, r2
 8003982:	d00c      	beq.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x9ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 8003984:	4bb2      	ldr	r3, [pc, #712]	@ (8003c50 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003986:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800398a:	f423 6100 	bic.w	r1, r3, #2048	@ 0x800
 800398e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003992:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003996:	4aae      	ldr	r2, [pc, #696]	@ (8003c50 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003998:	430b      	orrs	r3, r1
 800399a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 800399e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80039a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039a6:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80039aa:	653b      	str	r3, [r7, #80]	@ 0x50
 80039ac:	2300      	movs	r3, #0
 80039ae:	657b      	str	r3, [r7, #84]	@ 0x54
 80039b0:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80039b4:	460b      	mov	r3, r1
 80039b6:	4313      	orrs	r3, r2
 80039b8:	d019      	beq.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0xa3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 80039ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80039be:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80039c2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80039c6:	d105      	bne.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0xa24>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80039c8:	4ba1      	ldr	r3, [pc, #644]	@ (8003c50 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80039ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039cc:	4aa0      	ldr	r2, [pc, #640]	@ (8003c50 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80039ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039d2:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 80039d4:	4b9e      	ldr	r3, [pc, #632]	@ (8003c50 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80039d6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80039da:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80039de:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80039e2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80039e6:	4a9a      	ldr	r2, [pc, #616]	@ (8003c50 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80039e8:	430b      	orrs	r3, r1
 80039ea:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 80039ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80039f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039f6:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80039fa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80039fc:	2300      	movs	r3, #0
 80039fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003a00:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8003a04:	460b      	mov	r3, r1
 8003a06:	4313      	orrs	r3, r2
 8003a08:	d00c      	beq.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0xa74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8003a0a:	4b91      	ldr	r3, [pc, #580]	@ (8003c50 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003a0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003a10:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003a14:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003a18:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8003a1c:	4a8c      	ldr	r2, [pc, #560]	@ (8003c50 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003a1e:	430b      	orrs	r3, r1
 8003a20:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8003a24:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a2c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003a30:	643b      	str	r3, [r7, #64]	@ 0x40
 8003a32:	2300      	movs	r3, #0
 8003a34:	647b      	str	r3, [r7, #68]	@ 0x44
 8003a36:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8003a3a:	460b      	mov	r3, r1
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	d00c      	beq.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0xaaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8003a40:	4b83      	ldr	r3, [pc, #524]	@ (8003c50 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003a42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003a46:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8003a4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003a4e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8003a52:	4a7f      	ldr	r2, [pc, #508]	@ (8003c50 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003a54:	430b      	orrs	r3, r1
 8003a56:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8003a5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a62:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8003a66:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003a68:	2300      	movs	r3, #0
 8003a6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003a6c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8003a70:	460b      	mov	r3, r1
 8003a72:	4313      	orrs	r3, r2
 8003a74:	d00c      	beq.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0xae0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8003a76:	4b76      	ldr	r3, [pc, #472]	@ (8003c50 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003a78:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003a7c:	f023 0118 	bic.w	r1, r3, #24
 8003a80:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003a84:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8003a88:	4a71      	ldr	r2, [pc, #452]	@ (8003c50 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003a8a:	430b      	orrs	r3, r1
 8003a8c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003a90:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a98:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8003a9c:	633b      	str	r3, [r7, #48]	@ 0x30
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	637b      	str	r3, [r7, #52]	@ 0x34
 8003aa2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8003aa6:	460b      	mov	r3, r1
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	d032      	beq.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0xb62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8003aac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003ab0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8003ab4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003ab8:	d105      	bne.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003aba:	4b65      	ldr	r3, [pc, #404]	@ (8003c50 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003abc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003abe:	4a64      	ldr	r2, [pc, #400]	@ (8003c50 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003ac0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ac4:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 8003ac6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003aca:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8003ace:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003ad2:	d108      	bne.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0xb36>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003ad4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003ad8:	3308      	adds	r3, #8
 8003ada:	4618      	mov	r0, r3
 8003adc:	f002 f934 	bl	8005d48 <RCCEx_PLL2_Config>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
    }
    if (ret == HAL_OK)
 8003ae6:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d10d      	bne.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0xb5a>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8003aee:	4b58      	ldr	r3, [pc, #352]	@ (8003c50 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003af0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003af4:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003af8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003afc:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8003b00:	4a53      	ldr	r2, [pc, #332]	@ (8003c50 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003b02:	430b      	orrs	r3, r1
 8003b04:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003b08:	e003      	b.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0xb62>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b0a:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8003b0e:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#if defined(HSPI1)
  /*-------------------------- HSPIx kernel clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSPI) == RCC_PERIPHCLK_HSPI)
 8003b12:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003b16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b1a:	2100      	movs	r1, #0
 8003b1c:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003b1e:	f003 0301 	and.w	r3, r3, #1
 8003b22:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003b24:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8003b28:	460b      	mov	r3, r1
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	d04a      	beq.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0xc14>
  {

    /* Check the parameters */
    assert_param(IS_RCC_HSPICLKSOURCE(pPeriphClkInit->HspiClockSelection));

    switch (pPeriphClkInit->HspiClockSelection)
 8003b2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003b32:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003b36:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003b3a:	d01e      	beq.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0xbca>
 8003b3c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003b40:	d825      	bhi.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0xbde>
 8003b42:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003b46:	d00e      	beq.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0xbb6>
 8003b48:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003b4c:	d81f      	bhi.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0xbde>
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d021      	beq.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0xbe6>
 8003b52:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003b56:	d11a      	bne.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0xbde>
        /* HSPI kernel clock source config set later after clock selection check */
        break;

      case RCC_HSPICLKSOURCE_PLL1:  /* PLL1 is used as clock source for HSPI kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b58:	4b3d      	ldr	r3, [pc, #244]	@ (8003c50 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003b5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b5c:	4a3c      	ldr	r2, [pc, #240]	@ (8003c50 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003b5e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b62:	6293      	str	r3, [r2, #40]	@ 0x28
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 8003b64:	e018      	b.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      case RCC_HSPICLKSOURCE_PLL2:  /* PLL2 is used as clock source for HSPI kernel clock*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003b66:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003b6a:	3308      	adds	r3, #8
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f002 f8eb 	bl	8005d48 <RCCEx_PLL2_Config>
 8003b72:	4603      	mov	r3, r0
 8003b74:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 8003b78:	e00e      	b.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      case RCC_HSPICLKSOURCE_PLL3:  /* PLL3 is used as clock source for HSPI kernel clock*/
        /* PLL3 input clock, parameters M, N & R configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003b7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003b7e:	332c      	adds	r3, #44	@ 0x2c
 8003b80:	4618      	mov	r0, r3
 8003b82:	f002 f979 	bl	8005e78 <RCCEx_PLL3_Config>
 8003b86:	4603      	mov	r3, r0
 8003b88:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 8003b8c:	e004      	b.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      default:
        ret = HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8003b94:	e000      	b.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0xbe8>
        break;
 8003b96:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b98:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d10d      	bne.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0xc0c>
    {
      /* Set the source of HSPI kernel clock*/
      __HAL_RCC_HSPI_CONFIG(pPeriphClkInit->HspiClockSelection);
 8003ba0:	4b2b      	ldr	r3, [pc, #172]	@ (8003c50 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003ba2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003ba6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003baa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003bae:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003bb2:	4927      	ldr	r1, [pc, #156]	@ (8003c50 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8003bba:	e003      	b.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0xc14>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bbc:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8003bc0:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 8003bc4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bcc:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8003bd0:	623b      	str	r3, [r7, #32]
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	627b      	str	r3, [r7, #36]	@ 0x24
 8003bd6:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003bda:	460b      	mov	r3, r1
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	d03d      	beq.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 8003be0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003be4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003be8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003bec:	d00e      	beq.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 8003bee:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003bf2:	d815      	bhi.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d017      	beq.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8003bf8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003bfc:	d110      	bne.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0xc70>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003bfe:	4b14      	ldr	r3, [pc, #80]	@ (8003c50 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003c00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c02:	4a13      	ldr	r2, [pc, #76]	@ (8003c50 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003c04:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c08:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8003c0a:	e00e      	b.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003c0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003c10:	3308      	adds	r3, #8
 8003c12:	4618      	mov	r0, r3
 8003c14:	f002 f898 	bl	8005d48 <RCCEx_PLL2_Config>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8003c1e:	e004      	b.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      default:
        ret = HAL_ERROR;
 8003c20:	2301      	movs	r3, #1
 8003c22:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8003c26:	e000      	b.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003c28:	bf00      	nop
    }
    if (ret == HAL_OK)
 8003c2a:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d110      	bne.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 8003c32:	4b07      	ldr	r3, [pc, #28]	@ (8003c50 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003c34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003c38:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003c3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003c40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c44:	4902      	ldr	r1, [pc, #8]	@ (8003c50 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003c46:	4313      	orrs	r3, r2
 8003c48:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8003c4c:	e006      	b.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0xcac>
 8003c4e:	bf00      	nop
 8003c50:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c54:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8003c58:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8003c5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c64:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8003c68:	61bb      	str	r3, [r7, #24]
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	61fb      	str	r3, [r7, #28]
 8003c6e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003c72:	460b      	mov	r3, r1
 8003c74:	4313      	orrs	r3, r2
 8003c76:	d00c      	beq.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0xce2>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 8003c78:	4b68      	ldr	r3, [pc, #416]	@ (8003e1c <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 8003c7a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003c7e:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8003c82:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003c86:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8003c8a:	4964      	ldr	r1, [pc, #400]	@ (8003e1c <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003c92:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c9a:	2100      	movs	r1, #0
 8003c9c:	6139      	str	r1, [r7, #16]
 8003c9e:	f003 0302 	and.w	r3, r3, #2
 8003ca2:	617b      	str	r3, [r7, #20]
 8003ca4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003ca8:	460b      	mov	r3, r1
 8003caa:	4313      	orrs	r3, r2
 8003cac:	d036      	beq.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0xd6c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(pPeriphClkInit->LtdcClockSelection));

    switch (pPeriphClkInit->LtdcClockSelection)
 8003cae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003cb2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d00c      	beq.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 8003cba:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003cbe:	d113      	bne.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      case RCC_LTDCCLKSOURCE_PLL2:  /* PLL2 is used as clock source for LTDC clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003cc0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003cc4:	3308      	adds	r3, #8
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f002 f83e 	bl	8005d48 <RCCEx_PLL2_Config>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* LTDC clock source config set later after clock selection check */
        break;
 8003cd2:	e00d      	b.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0xd40>

      case RCC_LTDCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for LTDC clock*/
        /* PLL3 input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003cd4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003cd8:	332c      	adds	r3, #44	@ 0x2c
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f002 f8cc 	bl	8005e78 <RCCEx_PLL3_Config>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* LTDC clock source config set later after clock selection check */
        break;
 8003ce6:	e003      	b.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0xd40>

      default:
        ret = HAL_ERROR;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8003cee:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003cf0:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d10d      	bne.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0xd64>
    {
      /* Set the source of LTDC clock*/
      __HAL_RCC_LTDC_CONFIG(pPeriphClkInit->LtdcClockSelection);
 8003cf8:	4b48      	ldr	r3, [pc, #288]	@ (8003e1c <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 8003cfa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003cfe:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8003d02:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003d06:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8003d0a:	4944      	ldr	r1, [pc, #272]	@ (8003e1c <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8003d12:	e003      	b.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d14:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8003d18:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
#endif /* defined(LTDC) */

#if defined(DSI)

  /*-------------------------- DSI clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8003d1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d24:	2100      	movs	r1, #0
 8003d26:	60b9      	str	r1, [r7, #8]
 8003d28:	f003 0304 	and.w	r3, r3, #4
 8003d2c:	60fb      	str	r3, [r7, #12]
 8003d2e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003d32:	460b      	mov	r3, r1
 8003d34:	4313      	orrs	r3, r2
 8003d36:	d024      	beq.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(pPeriphClkInit->DsiClockSelection));

    if (pPeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLL3)
 8003d38:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003d3c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d108      	bne.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* PLL3 is used as clock source for DSI clock*/
      /* PLL3 input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
      ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003d44:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003d48:	332c      	adds	r3, #44	@ 0x2c
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	f002 f894 	bl	8005e78 <RCCEx_PLL3_Config>
 8003d50:	4603      	mov	r3, r0
 8003d52:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
    }

    if (ret == HAL_OK)
 8003d56:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d10d      	bne.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0xdca>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(pPeriphClkInit->DsiClockSelection);
 8003d5e:	4b2f      	ldr	r3, [pc, #188]	@ (8003e1c <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 8003d60:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003d64:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8003d68:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003d6c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003d70:	492a      	ldr	r1, [pc, #168]	@ (8003e1c <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 8003d72:	4313      	orrs	r3, r2
 8003d74:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8003d78:	e003      	b.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d7a:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8003d7e:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
#endif /* defined(DSI) */

#if defined(USB_OTG_HS)

  /*-------------------------- USB PHY clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USBPHY) == RCC_PERIPHCLK_USBPHY)
 8003d82:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d8a:	2100      	movs	r1, #0
 8003d8c:	6039      	str	r1, [r7, #0]
 8003d8e:	f003 0308 	and.w	r3, r3, #8
 8003d92:	607b      	str	r3, [r7, #4]
 8003d94:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003d98:	460b      	mov	r3, r1
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	d036      	beq.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0xe5c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBPHYCLKSOURCE(pPeriphClkInit->UsbPhyClockSelection));

    switch (pPeriphClkInit->UsbPhyClockSelection)
 8003d9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003da2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8003da6:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8003daa:	d00d      	beq.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0xe18>
 8003dac:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8003db0:	d811      	bhi.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0xe26>
 8003db2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003db6:	d012      	beq.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0xe2e>
 8003db8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003dbc:	d80b      	bhi.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0xe26>
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d00d      	beq.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0xe2e>
 8003dc2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003dc6:	d106      	bne.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0xe26>
        break;

      case RCC_USBPHYCLKSOURCE_PLL1:      /* PLL1 P divider clock selected as USB PHY clock */
      case RCC_USBPHYCLKSOURCE_PLL1_DIV2: /* PLL1 P divider clock div 2 selected as USB PHY clock */
        /* Enable P Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003dc8:	4b14      	ldr	r3, [pc, #80]	@ (8003e1c <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 8003dca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dcc:	4a13      	ldr	r2, [pc, #76]	@ (8003e1c <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 8003dce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003dd2:	6293      	str	r3, [r2, #40]	@ 0x28
        /* USB-PHY clock source config set later after clock selection check */
        break;
 8003dd4:	e004      	b.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0xe30>

      default:
        ret = HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8003ddc:	e000      	b.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0xe30>
        break;
 8003dde:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003de0:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d10d      	bne.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0xe54>
    {
      /* Set the source of USBPHY clock*/
      __HAL_RCC_USBPHY_CONFIG(pPeriphClkInit->UsbPhyClockSelection);
 8003de8:	4b0c      	ldr	r3, [pc, #48]	@ (8003e1c <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 8003dea:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003dee:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8003df2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003df6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8003dfa:	4908      	ldr	r1, [pc, #32]	@ (8003e1c <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8003e02:	e003      	b.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0xe5c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e04:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8003e08:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 8003e0c:	f897 311a 	ldrb.w	r3, [r7, #282]	@ 0x11a
}
 8003e10:	4618      	mov	r0, r3
 8003e12:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8003e16:	46bd      	mov	sp, r7
 8003e18:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e1c:	46020c00 	.word	0x46020c00

08003e20 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8003e20:	b480      	push	{r7}
 8003e22:	b089      	sub	sp, #36	@ 0x24
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8003e28:	4ba6      	ldr	r3, [pc, #664]	@ (80040c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8003e2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e30:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8003e32:	4ba4      	ldr	r3, [pc, #656]	@ (80040c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8003e34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e36:	f003 0303 	and.w	r3, r3, #3
 8003e3a:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8003e3c:	4ba1      	ldr	r3, [pc, #644]	@ (80040c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8003e3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e40:	0a1b      	lsrs	r3, r3, #8
 8003e42:	f003 030f 	and.w	r3, r3, #15
 8003e46:	3301      	adds	r3, #1
 8003e48:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8003e4a:	4b9e      	ldr	r3, [pc, #632]	@ (80040c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8003e4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e4e:	091b      	lsrs	r3, r3, #4
 8003e50:	f003 0301 	and.w	r3, r3, #1
 8003e54:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8003e56:	4b9b      	ldr	r3, [pc, #620]	@ (80040c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8003e58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e5a:	08db      	lsrs	r3, r3, #3
 8003e5c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003e60:	68fa      	ldr	r2, [r7, #12]
 8003e62:	fb02 f303 	mul.w	r3, r2, r3
 8003e66:	ee07 3a90 	vmov	s15, r3
 8003e6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e6e:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	2b03      	cmp	r3, #3
 8003e76:	d062      	beq.n	8003f3e <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	2b03      	cmp	r3, #3
 8003e7c:	f200 8081 	bhi.w	8003f82 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	2b01      	cmp	r3, #1
 8003e84:	d024      	beq.n	8003ed0 <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	2b02      	cmp	r3, #2
 8003e8a:	d17a      	bne.n	8003f82 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	ee07 3a90 	vmov	s15, r3
 8003e92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e96:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 80040c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 8003e9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e9e:	4b89      	ldr	r3, [pc, #548]	@ (80040c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8003ea0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ea2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ea6:	ee07 3a90 	vmov	s15, r3
 8003eaa:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8003eae:	ed97 6a02 	vldr	s12, [r7, #8]
 8003eb2:	eddf 5a86 	vldr	s11, [pc, #536]	@ 80040cc <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8003eb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003eba:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8003ebe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003ec2:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003ec6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003eca:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003ece:	e08f      	b.n	8003ff0 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8003ed0:	4b7c      	ldr	r3, [pc, #496]	@ (80040c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d005      	beq.n	8003ee8 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 8003edc:	4b79      	ldr	r3, [pc, #484]	@ (80040c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	0f1b      	lsrs	r3, r3, #28
 8003ee2:	f003 030f 	and.w	r3, r3, #15
 8003ee6:	e006      	b.n	8003ef6 <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 8003ee8:	4b76      	ldr	r3, [pc, #472]	@ (80040c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8003eea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003eee:	041b      	lsls	r3, r3, #16
 8003ef0:	0f1b      	lsrs	r3, r3, #28
 8003ef2:	f003 030f 	and.w	r3, r3, #15
 8003ef6:	4a76      	ldr	r2, [pc, #472]	@ (80040d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 8003ef8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003efc:	ee07 3a90 	vmov	s15, r3
 8003f00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f04:	693b      	ldr	r3, [r7, #16]
 8003f06:	ee07 3a90 	vmov	s15, r3
 8003f0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003f12:	69bb      	ldr	r3, [r7, #24]
 8003f14:	ee07 3a90 	vmov	s15, r3
 8003f18:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f1c:	ed97 6a02 	vldr	s12, [r7, #8]
 8003f20:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 80040cc <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8003f24:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f28:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f2c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003f30:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8003f34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f38:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003f3c:	e058      	b.n	8003ff0 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	ee07 3a90 	vmov	s15, r3
 8003f44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f48:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80040c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 8003f4c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f50:	4b5c      	ldr	r3, [pc, #368]	@ (80040c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8003f52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f58:	ee07 3a90 	vmov	s15, r3
 8003f5c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8003f60:	ed97 6a02 	vldr	s12, [r7, #8]
 8003f64:	eddf 5a59 	vldr	s11, [pc, #356]	@ 80040cc <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8003f68:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003f6c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8003f70:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003f74:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003f78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f7c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003f80:	e036      	b.n	8003ff0 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8003f82:	4b50      	ldr	r3, [pc, #320]	@ (80040c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8003f84:	689b      	ldr	r3, [r3, #8]
 8003f86:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d005      	beq.n	8003f9a <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 8003f8e:	4b4d      	ldr	r3, [pc, #308]	@ (80040c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	0f1b      	lsrs	r3, r3, #28
 8003f94:	f003 030f 	and.w	r3, r3, #15
 8003f98:	e006      	b.n	8003fa8 <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 8003f9a:	4b4a      	ldr	r3, [pc, #296]	@ (80040c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8003f9c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003fa0:	041b      	lsls	r3, r3, #16
 8003fa2:	0f1b      	lsrs	r3, r3, #28
 8003fa4:	f003 030f 	and.w	r3, r3, #15
 8003fa8:	4a49      	ldr	r2, [pc, #292]	@ (80040d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 8003faa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fae:	ee07 3a90 	vmov	s15, r3
 8003fb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	ee07 3a90 	vmov	s15, r3
 8003fbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fc0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003fc4:	69bb      	ldr	r3, [r7, #24]
 8003fc6:	ee07 3a90 	vmov	s15, r3
 8003fca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003fce:	ed97 6a02 	vldr	s12, [r7, #8]
 8003fd2:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 80040cc <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8003fd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003fda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003fde:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003fe2:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8003fe6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fea:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003fee:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8003ff0:	4b34      	ldr	r3, [pc, #208]	@ (80040c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8003ff2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ff4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d017      	beq.n	800402c <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003ffc:	4b31      	ldr	r3, [pc, #196]	@ (80040c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8003ffe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004000:	0a5b      	lsrs	r3, r3, #9
 8004002:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004006:	ee07 3a90 	vmov	s15, r3
 800400a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 800400e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004012:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8004016:	edd7 6a07 	vldr	s13, [r7, #28]
 800401a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800401e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004022:	ee17 2a90 	vmov	r2, s15
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	601a      	str	r2, [r3, #0]
 800402a:	e002      	b.n	8004032 <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2200      	movs	r2, #0
 8004030:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8004032:	4b24      	ldr	r3, [pc, #144]	@ (80040c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8004034:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004036:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800403a:	2b00      	cmp	r3, #0
 800403c:	d017      	beq.n	800406e <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800403e:	4b21      	ldr	r3, [pc, #132]	@ (80040c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8004040:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004042:	0c1b      	lsrs	r3, r3, #16
 8004044:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004048:	ee07 3a90 	vmov	s15, r3
 800404c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 8004050:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004054:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8004058:	edd7 6a07 	vldr	s13, [r7, #28]
 800405c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004060:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004064:	ee17 2a90 	vmov	r2, s15
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	605a      	str	r2, [r3, #4]
 800406c:	e002      	b.n	8004074 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2200      	movs	r2, #0
 8004072:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8004074:	4b13      	ldr	r3, [pc, #76]	@ (80040c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8004076:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004078:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800407c:	2b00      	cmp	r3, #0
 800407e:	d017      	beq.n	80040b0 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8004080:	4b10      	ldr	r3, [pc, #64]	@ (80040c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8004082:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004084:	0e1b      	lsrs	r3, r3, #24
 8004086:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800408a:	ee07 3a90 	vmov	s15, r3
 800408e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 8004092:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004096:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800409a:	edd7 6a07 	vldr	s13, [r7, #28]
 800409e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80040a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80040a6:	ee17 2a90 	vmov	r2, s15
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80040ae:	e002      	b.n	80040b6 <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2200      	movs	r2, #0
 80040b4:	609a      	str	r2, [r3, #8]
}
 80040b6:	bf00      	nop
 80040b8:	3724      	adds	r7, #36	@ 0x24
 80040ba:	46bd      	mov	sp, r7
 80040bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c0:	4770      	bx	lr
 80040c2:	bf00      	nop
 80040c4:	46020c00 	.word	0x46020c00
 80040c8:	4b742400 	.word	0x4b742400
 80040cc:	46000000 	.word	0x46000000
 80040d0:	080071a0 	.word	0x080071a0

080040d4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80040d4:	b480      	push	{r7}
 80040d6:	b089      	sub	sp, #36	@ 0x24
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 80040dc:	4ba6      	ldr	r3, [pc, #664]	@ (8004378 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80040de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040e4:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 80040e6:	4ba4      	ldr	r3, [pc, #656]	@ (8004378 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80040e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040ea:	f003 0303 	and.w	r3, r3, #3
 80040ee:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 80040f0:	4ba1      	ldr	r3, [pc, #644]	@ (8004378 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80040f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040f4:	0a1b      	lsrs	r3, r3, #8
 80040f6:	f003 030f 	and.w	r3, r3, #15
 80040fa:	3301      	adds	r3, #1
 80040fc:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 80040fe:	4b9e      	ldr	r3, [pc, #632]	@ (8004378 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8004100:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004102:	091b      	lsrs	r3, r3, #4
 8004104:	f003 0301 	and.w	r3, r3, #1
 8004108:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 800410a:	4b9b      	ldr	r3, [pc, #620]	@ (8004378 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800410c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800410e:	08db      	lsrs	r3, r3, #3
 8004110:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004114:	68fa      	ldr	r2, [r7, #12]
 8004116:	fb02 f303 	mul.w	r3, r2, r3
 800411a:	ee07 3a90 	vmov	s15, r3
 800411e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004122:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	2b03      	cmp	r3, #3
 800412a:	d062      	beq.n	80041f2 <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	2b03      	cmp	r3, #3
 8004130:	f200 8081 	bhi.w	8004236 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	2b01      	cmp	r3, #1
 8004138:	d024      	beq.n	8004184 <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 800413a:	697b      	ldr	r3, [r7, #20]
 800413c:	2b02      	cmp	r3, #2
 800413e:	d17a      	bne.n	8004236 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	ee07 3a90 	vmov	s15, r3
 8004146:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800414a:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 800437c <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 800414e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004152:	4b89      	ldr	r3, [pc, #548]	@ (8004378 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8004154:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004156:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800415a:	ee07 3a90 	vmov	s15, r3
 800415e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8004162:	ed97 6a02 	vldr	s12, [r7, #8]
 8004166:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8004380 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800416a:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800416e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8004172:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004176:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800417a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800417e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004182:	e08f      	b.n	80042a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8004184:	4b7c      	ldr	r3, [pc, #496]	@ (8004378 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800418c:	2b00      	cmp	r3, #0
 800418e:	d005      	beq.n	800419c <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 8004190:	4b79      	ldr	r3, [pc, #484]	@ (8004378 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8004192:	689b      	ldr	r3, [r3, #8]
 8004194:	0f1b      	lsrs	r3, r3, #28
 8004196:	f003 030f 	and.w	r3, r3, #15
 800419a:	e006      	b.n	80041aa <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 800419c:	4b76      	ldr	r3, [pc, #472]	@ (8004378 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800419e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80041a2:	041b      	lsls	r3, r3, #16
 80041a4:	0f1b      	lsrs	r3, r3, #28
 80041a6:	f003 030f 	and.w	r3, r3, #15
 80041aa:	4a76      	ldr	r2, [pc, #472]	@ (8004384 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 80041ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041b0:	ee07 3a90 	vmov	s15, r3
 80041b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	ee07 3a90 	vmov	s15, r3
 80041be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 80041c6:	69bb      	ldr	r3, [r7, #24]
 80041c8:	ee07 3a90 	vmov	s15, r3
 80041cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80041d0:	ed97 6a02 	vldr	s12, [r7, #8]
 80041d4:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8004380 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 80041d8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80041dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80041e0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80041e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 80041e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041ec:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80041f0:	e058      	b.n	80042a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	ee07 3a90 	vmov	s15, r3
 80041f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041fc:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800437c <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 8004200:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004204:	4b5c      	ldr	r3, [pc, #368]	@ (8004378 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8004206:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004208:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800420c:	ee07 3a90 	vmov	s15, r3
 8004210:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8004214:	ed97 6a02 	vldr	s12, [r7, #8]
 8004218:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8004380 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800421c:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8004220:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8004224:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004228:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800422c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004230:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004234:	e036      	b.n	80042a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8004236:	4b50      	ldr	r3, [pc, #320]	@ (8004378 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800423e:	2b00      	cmp	r3, #0
 8004240:	d005      	beq.n	800424e <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 8004242:	4b4d      	ldr	r3, [pc, #308]	@ (8004378 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	0f1b      	lsrs	r3, r3, #28
 8004248:	f003 030f 	and.w	r3, r3, #15
 800424c:	e006      	b.n	800425c <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 800424e:	4b4a      	ldr	r3, [pc, #296]	@ (8004378 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8004250:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004254:	041b      	lsls	r3, r3, #16
 8004256:	0f1b      	lsrs	r3, r3, #28
 8004258:	f003 030f 	and.w	r3, r3, #15
 800425c:	4a49      	ldr	r2, [pc, #292]	@ (8004384 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 800425e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004262:	ee07 3a90 	vmov	s15, r3
 8004266:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800426a:	693b      	ldr	r3, [r7, #16]
 800426c:	ee07 3a90 	vmov	s15, r3
 8004270:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004274:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004278:	69bb      	ldr	r3, [r7, #24]
 800427a:	ee07 3a90 	vmov	s15, r3
 800427e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004282:	ed97 6a02 	vldr	s12, [r7, #8]
 8004286:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8004380 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800428a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800428e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004292:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004296:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800429a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800429e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80042a2:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 80042a4:	4b34      	ldr	r3, [pc, #208]	@ (8004378 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80042a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d017      	beq.n	80042e0 <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80042b0:	4b31      	ldr	r3, [pc, #196]	@ (8004378 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80042b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042b4:	0a5b      	lsrs	r3, r3, #9
 80042b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80042ba:	ee07 3a90 	vmov	s15, r3
 80042be:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 80042c2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80042c6:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80042ca:	edd7 6a07 	vldr	s13, [r7, #28]
 80042ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80042d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80042d6:	ee17 2a90 	vmov	r2, s15
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	601a      	str	r2, [r3, #0]
 80042de:	e002      	b.n	80042e6 <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2200      	movs	r2, #0
 80042e4:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 80042e6:	4b24      	ldr	r3, [pc, #144]	@ (8004378 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80042e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d017      	beq.n	8004322 <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80042f2:	4b21      	ldr	r3, [pc, #132]	@ (8004378 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80042f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042f6:	0c1b      	lsrs	r3, r3, #16
 80042f8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80042fc:	ee07 3a90 	vmov	s15, r3
 8004300:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 8004304:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004308:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800430c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004310:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004314:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004318:	ee17 2a90 	vmov	r2, s15
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	605a      	str	r2, [r3, #4]
 8004320:	e002      	b.n	8004328 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2200      	movs	r2, #0
 8004326:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8004328:	4b13      	ldr	r3, [pc, #76]	@ (8004378 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800432a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800432c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004330:	2b00      	cmp	r3, #0
 8004332:	d017      	beq.n	8004364 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004334:	4b10      	ldr	r3, [pc, #64]	@ (8004378 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8004336:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004338:	0e1b      	lsrs	r3, r3, #24
 800433a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800433e:	ee07 3a90 	vmov	s15, r3
 8004342:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 8004346:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800434a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800434e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004352:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004356:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800435a:	ee17 2a90 	vmov	r2, s15
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004362:	e002      	b.n	800436a <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2200      	movs	r2, #0
 8004368:	609a      	str	r2, [r3, #8]
}
 800436a:	bf00      	nop
 800436c:	3724      	adds	r7, #36	@ 0x24
 800436e:	46bd      	mov	sp, r7
 8004370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004374:	4770      	bx	lr
 8004376:	bf00      	nop
 8004378:	46020c00 	.word	0x46020c00
 800437c:	4b742400 	.word	0x4b742400
 8004380:	46000000 	.word	0x46000000
 8004384:	080071a0 	.word	0x080071a0

08004388 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004388:	b480      	push	{r7}
 800438a:	b089      	sub	sp, #36	@ 0x24
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8004390:	4ba6      	ldr	r3, [pc, #664]	@ (800462c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004392:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004394:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004398:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 800439a:	4ba4      	ldr	r3, [pc, #656]	@ (800462c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800439c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800439e:	f003 0303 	and.w	r3, r3, #3
 80043a2:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 80043a4:	4ba1      	ldr	r3, [pc, #644]	@ (800462c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80043a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043a8:	0a1b      	lsrs	r3, r3, #8
 80043aa:	f003 030f 	and.w	r3, r3, #15
 80043ae:	3301      	adds	r3, #1
 80043b0:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 80043b2:	4b9e      	ldr	r3, [pc, #632]	@ (800462c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80043b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043b6:	091b      	lsrs	r3, r3, #4
 80043b8:	f003 0301 	and.w	r3, r3, #1
 80043bc:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 80043be:	4b9b      	ldr	r3, [pc, #620]	@ (800462c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80043c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80043c2:	08db      	lsrs	r3, r3, #3
 80043c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80043c8:	68fa      	ldr	r2, [r7, #12]
 80043ca:	fb02 f303 	mul.w	r3, r2, r3
 80043ce:	ee07 3a90 	vmov	s15, r3
 80043d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043d6:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	2b03      	cmp	r3, #3
 80043de:	d062      	beq.n	80044a6 <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	2b03      	cmp	r3, #3
 80043e4:	f200 8081 	bhi.w	80044ea <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	2b01      	cmp	r3, #1
 80043ec:	d024      	beq.n	8004438 <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	2b02      	cmp	r3, #2
 80043f2:	d17a      	bne.n	80044ea <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80043f4:	693b      	ldr	r3, [r7, #16]
 80043f6:	ee07 3a90 	vmov	s15, r3
 80043fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043fe:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8004630 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8004402:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004406:	4b89      	ldr	r3, [pc, #548]	@ (800462c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004408:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800440a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800440e:	ee07 3a90 	vmov	s15, r3
 8004412:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8004416:	ed97 6a02 	vldr	s12, [r7, #8]
 800441a:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8004634 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800441e:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8004422:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8004426:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800442a:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800442e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004432:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 8004436:	e08f      	b.n	8004558 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8004438:	4b7c      	ldr	r3, [pc, #496]	@ (800462c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800443a:	689b      	ldr	r3, [r3, #8]
 800443c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004440:	2b00      	cmp	r3, #0
 8004442:	d005      	beq.n	8004450 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 8004444:	4b79      	ldr	r3, [pc, #484]	@ (800462c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	0f1b      	lsrs	r3, r3, #28
 800444a:	f003 030f 	and.w	r3, r3, #15
 800444e:	e006      	b.n	800445e <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 8004450:	4b76      	ldr	r3, [pc, #472]	@ (800462c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004452:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004456:	041b      	lsls	r3, r3, #16
 8004458:	0f1b      	lsrs	r3, r3, #28
 800445a:	f003 030f 	and.w	r3, r3, #15
 800445e:	4a76      	ldr	r2, [pc, #472]	@ (8004638 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8004460:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004464:	ee07 3a90 	vmov	s15, r3
 8004468:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	ee07 3a90 	vmov	s15, r3
 8004472:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004476:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800447a:	69bb      	ldr	r3, [r7, #24]
 800447c:	ee07 3a90 	vmov	s15, r3
 8004480:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004484:	ed97 6a02 	vldr	s12, [r7, #8]
 8004488:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8004634 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800448c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004490:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004494:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004498:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800449c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044a0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80044a4:	e058      	b.n	8004558 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	ee07 3a90 	vmov	s15, r3
 80044ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044b0:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004630 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 80044b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044b8:	4b5c      	ldr	r3, [pc, #368]	@ (800462c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80044ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044c0:	ee07 3a90 	vmov	s15, r3
 80044c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 80044c8:	ed97 6a02 	vldr	s12, [r7, #8]
 80044cc:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8004634 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 80044d0:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80044d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 80044d8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80044dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80044e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044e4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80044e8:	e036      	b.n	8004558 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80044ea:	4b50      	ldr	r3, [pc, #320]	@ (800462c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80044ec:	689b      	ldr	r3, [r3, #8]
 80044ee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d005      	beq.n	8004502 <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 80044f6:	4b4d      	ldr	r3, [pc, #308]	@ (800462c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80044f8:	689b      	ldr	r3, [r3, #8]
 80044fa:	0f1b      	lsrs	r3, r3, #28
 80044fc:	f003 030f 	and.w	r3, r3, #15
 8004500:	e006      	b.n	8004510 <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 8004502:	4b4a      	ldr	r3, [pc, #296]	@ (800462c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004504:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004508:	041b      	lsls	r3, r3, #16
 800450a:	0f1b      	lsrs	r3, r3, #28
 800450c:	f003 030f 	and.w	r3, r3, #15
 8004510:	4a49      	ldr	r2, [pc, #292]	@ (8004638 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8004512:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004516:	ee07 3a90 	vmov	s15, r3
 800451a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800451e:	693b      	ldr	r3, [r7, #16]
 8004520:	ee07 3a90 	vmov	s15, r3
 8004524:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004528:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800452c:	69bb      	ldr	r3, [r7, #24]
 800452e:	ee07 3a90 	vmov	s15, r3
 8004532:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004536:	ed97 6a02 	vldr	s12, [r7, #8]
 800453a:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8004634 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800453e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004542:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004546:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800454a:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800454e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004552:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004556:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8004558:	4b34      	ldr	r3, [pc, #208]	@ (800462c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800455a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800455c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004560:	2b00      	cmp	r3, #0
 8004562:	d017      	beq.n	8004594 <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8004564:	4b31      	ldr	r3, [pc, #196]	@ (800462c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004566:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004568:	0a5b      	lsrs	r3, r3, #9
 800456a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800456e:	ee07 3a90 	vmov	s15, r3
 8004572:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 8004576:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800457a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800457e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004582:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004586:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800458a:	ee17 2a90 	vmov	r2, s15
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	601a      	str	r2, [r3, #0]
 8004592:	e002      	b.n	800459a <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2200      	movs	r2, #0
 8004598:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 800459a:	4b24      	ldr	r3, [pc, #144]	@ (800462c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800459c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800459e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d017      	beq.n	80045d6 <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80045a6:	4b21      	ldr	r3, [pc, #132]	@ (800462c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80045a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045aa:	0c1b      	lsrs	r3, r3, #16
 80045ac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80045b0:	ee07 3a90 	vmov	s15, r3
 80045b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 80045b8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80045bc:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80045c0:	edd7 6a07 	vldr	s13, [r7, #28]
 80045c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80045c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80045cc:	ee17 2a90 	vmov	r2, s15
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	605a      	str	r2, [r3, #4]
 80045d4:	e002      	b.n	80045dc <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2200      	movs	r2, #0
 80045da:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 80045dc:	4b13      	ldr	r3, [pc, #76]	@ (800462c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80045de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045e0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d017      	beq.n	8004618 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80045e8:	4b10      	ldr	r3, [pc, #64]	@ (800462c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80045ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045ec:	0e1b      	lsrs	r3, r3, #24
 80045ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80045f2:	ee07 3a90 	vmov	s15, r3
 80045f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 80045fa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80045fe:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8004602:	edd7 6a07 	vldr	s13, [r7, #28]
 8004606:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800460a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800460e:	ee17 2a90 	vmov	r2, s15
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004616:	e002      	b.n	800461e <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2200      	movs	r2, #0
 800461c:	609a      	str	r2, [r3, #8]
}
 800461e:	bf00      	nop
 8004620:	3724      	adds	r7, #36	@ 0x24
 8004622:	46bd      	mov	sp, r7
 8004624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004628:	4770      	bx	lr
 800462a:	bf00      	nop
 800462c:	46020c00 	.word	0x46020c00
 8004630:	4b742400 	.word	0x4b742400
 8004634:	46000000 	.word	0x46000000
 8004638:	080071a0 	.word	0x080071a0

0800463c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b08e      	sub	sp, #56	@ 0x38
 8004640:	af00      	add	r7, sp, #0
 8004642:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8004646:	e9d7 2300 	ldrd	r2, r3, [r7]
 800464a:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 800464e:	430b      	orrs	r3, r1
 8004650:	d145      	bne.n	80046de <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8004652:	4ba7      	ldr	r3, [pc, #668]	@ (80048f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004654:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004658:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800465c:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800465e:	4ba4      	ldr	r3, [pc, #656]	@ (80048f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004660:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004664:	f003 0302 	and.w	r3, r3, #2
 8004668:	2b02      	cmp	r3, #2
 800466a:	d108      	bne.n	800467e <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 800466c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800466e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004672:	d104      	bne.n	800467e <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8004674:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004678:	637b      	str	r3, [r7, #52]	@ 0x34
 800467a:	f001 bb5a 	b.w	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800467e:	4b9c      	ldr	r3, [pc, #624]	@ (80048f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004680:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004684:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004688:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800468c:	d114      	bne.n	80046b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 800468e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004690:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004694:	d110      	bne.n	80046b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004696:	4b96      	ldr	r3, [pc, #600]	@ (80048f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004698:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800469c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046a0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80046a4:	d103      	bne.n	80046ae <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 80046a6:	23fa      	movs	r3, #250	@ 0xfa
 80046a8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80046aa:	f001 bb42 	b.w	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 80046ae:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80046b2:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80046b4:	f001 bb3d 	b.w	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 80046b8:	4b8d      	ldr	r3, [pc, #564]	@ (80048f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046c0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80046c4:	d107      	bne.n	80046d6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 80046c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046c8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80046cc:	d103      	bne.n	80046d6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 80046ce:	4b89      	ldr	r3, [pc, #548]	@ (80048f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80046d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80046d2:	f001 bb2e 	b.w	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 80046d6:	2300      	movs	r3, #0
 80046d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80046da:	f001 bb2a 	b.w	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80046de:	e9d7 2300 	ldrd	r2, r3, [r7]
 80046e2:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 80046e6:	430b      	orrs	r3, r1
 80046e8:	d151      	bne.n	800478e <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 80046ea:	4b81      	ldr	r3, [pc, #516]	@ (80048f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80046ec:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80046f0:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 80046f4:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80046f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046f8:	2b80      	cmp	r3, #128	@ 0x80
 80046fa:	d035      	beq.n	8004768 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 80046fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046fe:	2b80      	cmp	r3, #128	@ 0x80
 8004700:	d841      	bhi.n	8004786 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8004702:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004704:	2b60      	cmp	r3, #96	@ 0x60
 8004706:	d02a      	beq.n	800475e <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 8004708:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800470a:	2b60      	cmp	r3, #96	@ 0x60
 800470c:	d83b      	bhi.n	8004786 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800470e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004710:	2b40      	cmp	r3, #64	@ 0x40
 8004712:	d009      	beq.n	8004728 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8004714:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004716:	2b40      	cmp	r3, #64	@ 0x40
 8004718:	d835      	bhi.n	8004786 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800471a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800471c:	2b00      	cmp	r3, #0
 800471e:	d00c      	beq.n	800473a <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 8004720:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004722:	2b20      	cmp	r3, #32
 8004724:	d012      	beq.n	800474c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8004726:	e02e      	b.n	8004786 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004728:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800472c:	4618      	mov	r0, r3
 800472e:	f7ff fb77 	bl	8003e20 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8004732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004734:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004736:	f001 bafc 	b.w	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800473a:	f107 0318 	add.w	r3, r7, #24
 800473e:	4618      	mov	r0, r3
 8004740:	f7ff fcc8 	bl	80040d4 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8004744:	69bb      	ldr	r3, [r7, #24]
 8004746:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004748:	f001 baf3 	b.w	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800474c:	f107 030c 	add.w	r3, r7, #12
 8004750:	4618      	mov	r0, r3
 8004752:	f7ff fe19 	bl	8004388 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800475a:	f001 baea 	b.w	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800475e:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8004762:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004764:	f001 bae5 	b.w	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004768:	4b61      	ldr	r3, [pc, #388]	@ (80048f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004770:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004774:	d103      	bne.n	800477e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 8004776:	4b60      	ldr	r3, [pc, #384]	@ (80048f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8004778:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800477a:	f001 bada 	b.w	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800477e:	2300      	movs	r3, #0
 8004780:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004782:	f001 bad6 	b.w	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default :
      {
        frequency = 0U;
 8004786:	2300      	movs	r3, #0
 8004788:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800478a:	f001 bad2 	b.w	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800478e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004792:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8004796:	430b      	orrs	r3, r1
 8004798:	d158      	bne.n	800484c <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800479a:	4b55      	ldr	r3, [pc, #340]	@ (80048f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800479c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80047a0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80047a4:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80047a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047ac:	d03b      	beq.n	8004826 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 80047ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047b4:	d846      	bhi.n	8004844 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 80047b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047b8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80047bc:	d02e      	beq.n	800481c <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 80047be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047c0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80047c4:	d83e      	bhi.n	8004844 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 80047c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80047cc:	d00b      	beq.n	80047e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 80047ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80047d4:	d836      	bhi.n	8004844 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 80047d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d00d      	beq.n	80047f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 80047dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80047e2:	d012      	beq.n	800480a <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 80047e4:	e02e      	b.n	8004844 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80047e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80047ea:	4618      	mov	r0, r3
 80047ec:	f7ff fb18 	bl	8003e20 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80047f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047f2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80047f4:	f001 ba9d 	b.w	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80047f8:	f107 0318 	add.w	r3, r7, #24
 80047fc:	4618      	mov	r0, r3
 80047fe:	f7ff fc69 	bl	80040d4 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8004802:	69bb      	ldr	r3, [r7, #24]
 8004804:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004806:	f001 ba94 	b.w	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800480a:	f107 030c 	add.w	r3, r7, #12
 800480e:	4618      	mov	r0, r3
 8004810:	f7ff fdba 	bl	8004388 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004818:	f001 ba8b 	b.w	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800481c:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8004820:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004822:	f001 ba86 	b.w	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004826:	4b32      	ldr	r3, [pc, #200]	@ (80048f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800482e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004832:	d103      	bne.n	800483c <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 8004834:	4b30      	ldr	r3, [pc, #192]	@ (80048f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8004836:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004838:	f001 ba7b 	b.w	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800483c:	2300      	movs	r3, #0
 800483e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004840:	f001 ba77 	b.w	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default :

        frequency = 0U;
 8004844:	2300      	movs	r3, #0
 8004846:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004848:	f001 ba73 	b.w	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* SAI2 */
#if defined(SAES)
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 800484c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004850:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8004854:	430b      	orrs	r3, r1
 8004856:	d126      	bne.n	80048a6 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 8004858:	4b25      	ldr	r3, [pc, #148]	@ (80048f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800485a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800485e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004862:	633b      	str	r3, [r7, #48]	@ 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 8004864:	4b22      	ldr	r3, [pc, #136]	@ (80048f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800486c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004870:	d106      	bne.n	8004880 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8004872:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004874:	2b00      	cmp	r3, #0
 8004876:	d103      	bne.n	8004880 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 8004878:	4b1f      	ldr	r3, [pc, #124]	@ (80048f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800487a:	637b      	str	r3, [r7, #52]	@ 0x34
 800487c:	f001 ba59 	b.w	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 8004880:	4b1b      	ldr	r3, [pc, #108]	@ (80048f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004888:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800488c:	d107      	bne.n	800489e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 800488e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004890:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004894:	d103      	bne.n	800489e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 8004896:	4b19      	ldr	r3, [pc, #100]	@ (80048fc <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8004898:	637b      	str	r3, [r7, #52]	@ 0x34
 800489a:	f001 ba4a 	b.w	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 800489e:	2300      	movs	r3, #0
 80048a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80048a2:	f001 ba46 	b.w	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 80048a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80048aa:	f5a2 1180 	sub.w	r1, r2, #1048576	@ 0x100000
 80048ae:	430b      	orrs	r3, r1
 80048b0:	d16e      	bne.n	8004990 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 80048b2:	4b0f      	ldr	r3, [pc, #60]	@ (80048f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80048b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80048b8:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 80048bc:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80048be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048c0:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80048c4:	d03d      	beq.n	8004942 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 80048c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048c8:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80048cc:	d85c      	bhi.n	8004988 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 80048ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048d0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80048d4:	d014      	beq.n	8004900 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 80048d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048d8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80048dc:	d854      	bhi.n	8004988 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 80048de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d01f      	beq.n	8004924 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 80048e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048e6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80048ea:	d012      	beq.n	8004912 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 80048ec:	e04c      	b.n	8004988 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 80048ee:	bf00      	nop
 80048f0:	46020c00 	.word	0x46020c00
 80048f4:	0007a120 	.word	0x0007a120
 80048f8:	00f42400 	.word	0x00f42400
 80048fc:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004900:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004904:	4618      	mov	r0, r3
 8004906:	f7ff fa8b 	bl	8003e20 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800490a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800490c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800490e:	f001 ba10 	b.w	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004912:	f107 0318 	add.w	r3, r7, #24
 8004916:	4618      	mov	r0, r3
 8004918:	f7ff fbdc 	bl	80040d4 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800491c:	69fb      	ldr	r3, [r7, #28]
 800491e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004920:	f001 ba07 	b.w	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8004924:	4ba7      	ldr	r3, [pc, #668]	@ (8004bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800492c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004930:	d103      	bne.n	800493a <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 8004932:	4ba5      	ldr	r3, [pc, #660]	@ (8004bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004934:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004936:	f001 b9fc 	b.w	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800493a:	2300      	movs	r3, #0
 800493c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800493e:	f001 b9f8 	b.w	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8004942:	4ba0      	ldr	r3, [pc, #640]	@ (8004bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f003 0320 	and.w	r3, r3, #32
 800494a:	2b20      	cmp	r3, #32
 800494c:	d118      	bne.n	8004980 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800494e:	4b9d      	ldr	r3, [pc, #628]	@ (8004bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004950:	689b      	ldr	r3, [r3, #8]
 8004952:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004956:	2b00      	cmp	r3, #0
 8004958:	d005      	beq.n	8004966 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800495a:	4b9a      	ldr	r3, [pc, #616]	@ (8004bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800495c:	689b      	ldr	r3, [r3, #8]
 800495e:	0e1b      	lsrs	r3, r3, #24
 8004960:	f003 030f 	and.w	r3, r3, #15
 8004964:	e006      	b.n	8004974 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8004966:	4b97      	ldr	r3, [pc, #604]	@ (8004bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004968:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800496c:	041b      	lsls	r3, r3, #16
 800496e:	0e1b      	lsrs	r3, r3, #24
 8004970:	f003 030f 	and.w	r3, r3, #15
 8004974:	4a95      	ldr	r2, [pc, #596]	@ (8004bcc <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004976:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800497a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800497c:	f001 b9d9 	b.w	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 8004980:	2300      	movs	r3, #0
 8004982:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004984:	f001 b9d5 	b.w	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default :

        frequency = 0U;
 8004988:	2300      	movs	r3, #0
 800498a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800498c:	f001 b9d1 	b.w	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8004990:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004994:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 8004998:	430b      	orrs	r3, r1
 800499a:	d17f      	bne.n	8004a9c <HAL_RCCEx_GetPeriphCLKFreq+0x460>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800499c:	4b89      	ldr	r3, [pc, #548]	@ (8004bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800499e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80049a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80049a6:	633b      	str	r3, [r7, #48]	@ 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 80049a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d165      	bne.n	8004a7a <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 80049ae:	4b85      	ldr	r3, [pc, #532]	@ (8004bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80049b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80049b4:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 80049b8:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (srcclk)
 80049ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049bc:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80049c0:	d034      	beq.n	8004a2c <HAL_RCCEx_GetPeriphCLKFreq+0x3f0>
 80049c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049c4:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80049c8:	d853      	bhi.n	8004a72 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 80049ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049cc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80049d0:	d00b      	beq.n	80049ea <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
 80049d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049d4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80049d8:	d84b      	bhi.n	8004a72 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 80049da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d016      	beq.n	8004a0e <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
 80049e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049e2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80049e6:	d009      	beq.n	80049fc <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 80049e8:	e043      	b.n	8004a72 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80049ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80049ee:	4618      	mov	r0, r3
 80049f0:	f7ff fa16 	bl	8003e20 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80049f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049f6:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 80049f8:	f001 b99b 	b.w	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80049fc:	f107 0318 	add.w	r3, r7, #24
 8004a00:	4618      	mov	r0, r3
 8004a02:	f7ff fb67 	bl	80040d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004a06:	69fb      	ldr	r3, [r7, #28]
 8004a08:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8004a0a:	f001 b992 	b.w	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8004a0e:	4b6d      	ldr	r3, [pc, #436]	@ (8004bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004a16:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a1a:	d103      	bne.n	8004a24 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
          {
            frequency = HSI48_VALUE;
 8004a1c:	4b6a      	ldr	r3, [pc, #424]	@ (8004bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004a1e:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8004a20:	f001 b987 	b.w	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
            frequency = 0U;
 8004a24:	2300      	movs	r3, #0
 8004a26:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8004a28:	f001 b983 	b.w	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8004a2c:	4b65      	ldr	r3, [pc, #404]	@ (8004bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f003 0320 	and.w	r3, r3, #32
 8004a34:	2b20      	cmp	r3, #32
 8004a36:	d118      	bne.n	8004a6a <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004a38:	4b62      	ldr	r3, [pc, #392]	@ (8004bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004a3a:	689b      	ldr	r3, [r3, #8]
 8004a3c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d005      	beq.n	8004a50 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
 8004a44:	4b5f      	ldr	r3, [pc, #380]	@ (8004bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004a46:	689b      	ldr	r3, [r3, #8]
 8004a48:	0e1b      	lsrs	r3, r3, #24
 8004a4a:	f003 030f 	and.w	r3, r3, #15
 8004a4e:	e006      	b.n	8004a5e <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8004a50:	4b5c      	ldr	r3, [pc, #368]	@ (8004bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004a52:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004a56:	041b      	lsls	r3, r3, #16
 8004a58:	0e1b      	lsrs	r3, r3, #24
 8004a5a:	f003 030f 	and.w	r3, r3, #15
 8004a5e:	4a5b      	ldr	r2, [pc, #364]	@ (8004bcc <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004a60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a64:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8004a66:	f001 b964 	b.w	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
            frequency = 0U;
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8004a6e:	f001 b960 	b.w	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        default :
        {
          frequency = 0U;
 8004a72:	2300      	movs	r3, #0
 8004a74:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8004a76:	f001 b95c 	b.w	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 8004a7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a7c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004a80:	d108      	bne.n	8004a94 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004a82:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004a86:	4618      	mov	r0, r3
 8004a88:	f7ff f9ca 	bl	8003e20 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8004a8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a8e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a90:	f001 b94f 	b.w	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else
    {
      frequency = 0U;
 8004a94:	2300      	movs	r3, #0
 8004a96:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a98:	f001 b94b 	b.w	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 8004a9c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004aa0:	1e51      	subs	r1, r2, #1
 8004aa2:	430b      	orrs	r3, r1
 8004aa4:	d136      	bne.n	8004b14 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8004aa6:	4b47      	ldr	r3, [pc, #284]	@ (8004bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004aa8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004aac:	f003 0303 	and.w	r3, r3, #3
 8004ab0:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8004ab2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d104      	bne.n	8004ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 8004ab8:	f7fe f9cc 	bl	8002e54 <HAL_RCC_GetPCLK2Freq>
 8004abc:	6378      	str	r0, [r7, #52]	@ 0x34
 8004abe:	f001 b938 	b.w	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 8004ac2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ac4:	2b01      	cmp	r3, #1
 8004ac6:	d104      	bne.n	8004ad2 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004ac8:	f7fe f894 	bl	8002bf4 <HAL_RCC_GetSysClockFreq>
 8004acc:	6378      	str	r0, [r7, #52]	@ 0x34
 8004ace:	f001 b930 	b.w	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8004ad2:	4b3c      	ldr	r3, [pc, #240]	@ (8004bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ada:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ade:	d106      	bne.n	8004aee <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 8004ae0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ae2:	2b02      	cmp	r3, #2
 8004ae4:	d103      	bne.n	8004aee <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
    {
      frequency = HSI_VALUE;
 8004ae6:	4b3a      	ldr	r3, [pc, #232]	@ (8004bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8004ae8:	637b      	str	r3, [r7, #52]	@ 0x34
 8004aea:	f001 b922 	b.w	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8004aee:	4b35      	ldr	r3, [pc, #212]	@ (8004bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004af0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004af4:	f003 0302 	and.w	r3, r3, #2
 8004af8:	2b02      	cmp	r3, #2
 8004afa:	d107      	bne.n	8004b0c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8004afc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004afe:	2b03      	cmp	r3, #3
 8004b00:	d104      	bne.n	8004b0c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = LSE_VALUE;
 8004b02:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004b06:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b08:	f001 b913 	b.w	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b10:	f001 b90f 	b.w	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 8004b14:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004b18:	1e91      	subs	r1, r2, #2
 8004b1a:	430b      	orrs	r3, r1
 8004b1c:	d136      	bne.n	8004b8c <HAL_RCCEx_GetPeriphCLKFreq+0x550>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8004b1e:	4b29      	ldr	r3, [pc, #164]	@ (8004bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004b20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004b24:	f003 030c 	and.w	r3, r3, #12
 8004b28:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8004b2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d104      	bne.n	8004b3a <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8004b30:	f7fe f97c 	bl	8002e2c <HAL_RCC_GetPCLK1Freq>
 8004b34:	6378      	str	r0, [r7, #52]	@ 0x34
 8004b36:	f001 b8fc 	b.w	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8004b3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b3c:	2b04      	cmp	r3, #4
 8004b3e:	d104      	bne.n	8004b4a <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004b40:	f7fe f858 	bl	8002bf4 <HAL_RCC_GetSysClockFreq>
 8004b44:	6378      	str	r0, [r7, #52]	@ 0x34
 8004b46:	f001 b8f4 	b.w	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8004b4a:	4b1e      	ldr	r3, [pc, #120]	@ (8004bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b52:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b56:	d106      	bne.n	8004b66 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8004b58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b5a:	2b08      	cmp	r3, #8
 8004b5c:	d103      	bne.n	8004b66 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
    {
      frequency = HSI_VALUE;
 8004b5e:	4b1c      	ldr	r3, [pc, #112]	@ (8004bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8004b60:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b62:	f001 b8e6 	b.w	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8004b66:	4b17      	ldr	r3, [pc, #92]	@ (8004bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004b68:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004b6c:	f003 0302 	and.w	r3, r3, #2
 8004b70:	2b02      	cmp	r3, #2
 8004b72:	d107      	bne.n	8004b84 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 8004b74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b76:	2b0c      	cmp	r3, #12
 8004b78:	d104      	bne.n	8004b84 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = LSE_VALUE;
 8004b7a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004b7e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b80:	f001 b8d7 	b.w	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 8004b84:	2300      	movs	r3, #0
 8004b86:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b88:	f001 b8d3 	b.w	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 8004b8c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004b90:	1f11      	subs	r1, r2, #4
 8004b92:	430b      	orrs	r3, r1
 8004b94:	d13f      	bne.n	8004c16 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8004b96:	4b0b      	ldr	r3, [pc, #44]	@ (8004bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004b98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004b9c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004ba0:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8004ba2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d104      	bne.n	8004bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x576>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8004ba8:	f7fe f940 	bl	8002e2c <HAL_RCC_GetPCLK1Freq>
 8004bac:	6378      	str	r0, [r7, #52]	@ 0x34
 8004bae:	f001 b8c0 	b.w	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 8004bb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bb4:	2b10      	cmp	r3, #16
 8004bb6:	d10d      	bne.n	8004bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004bb8:	f7fe f81c 	bl	8002bf4 <HAL_RCC_GetSysClockFreq>
 8004bbc:	6378      	str	r0, [r7, #52]	@ 0x34
 8004bbe:	f001 b8b8 	b.w	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 8004bc2:	bf00      	nop
 8004bc4:	46020c00 	.word	0x46020c00
 8004bc8:	02dc6c00 	.word	0x02dc6c00
 8004bcc:	080071a0 	.word	0x080071a0
 8004bd0:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8004bd4:	4ba8      	ldr	r3, [pc, #672]	@ (8004e78 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004bdc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004be0:	d106      	bne.n	8004bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 8004be2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004be4:	2b20      	cmp	r3, #32
 8004be6:	d103      	bne.n	8004bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
    {
      frequency = HSI_VALUE;
 8004be8:	4ba4      	ldr	r3, [pc, #656]	@ (8004e7c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004bea:	637b      	str	r3, [r7, #52]	@ 0x34
 8004bec:	f001 b8a1 	b.w	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8004bf0:	4ba1      	ldr	r3, [pc, #644]	@ (8004e78 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004bf2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004bf6:	f003 0302 	and.w	r3, r3, #2
 8004bfa:	2b02      	cmp	r3, #2
 8004bfc:	d107      	bne.n	8004c0e <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 8004bfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c00:	2b30      	cmp	r3, #48	@ 0x30
 8004c02:	d104      	bne.n	8004c0e <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
    {
      frequency = LSE_VALUE;
 8004c04:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004c08:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c0a:	f001 b892 	b.w	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 8004c0e:	2300      	movs	r3, #0
 8004c10:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c12:	f001 b88e 	b.w	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 8004c16:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004c1a:	f1a2 0108 	sub.w	r1, r2, #8
 8004c1e:	430b      	orrs	r3, r1
 8004c20:	d136      	bne.n	8004c90 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8004c22:	4b95      	ldr	r3, [pc, #596]	@ (8004e78 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004c24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004c28:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004c2c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8004c2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d104      	bne.n	8004c3e <HAL_RCCEx_GetPeriphCLKFreq+0x602>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8004c34:	f7fe f8fa 	bl	8002e2c <HAL_RCC_GetPCLK1Freq>
 8004c38:	6378      	str	r0, [r7, #52]	@ 0x34
 8004c3a:	f001 b87a 	b.w	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 8004c3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c40:	2b40      	cmp	r3, #64	@ 0x40
 8004c42:	d104      	bne.n	8004c4e <HAL_RCCEx_GetPeriphCLKFreq+0x612>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004c44:	f7fd ffd6 	bl	8002bf4 <HAL_RCC_GetSysClockFreq>
 8004c48:	6378      	str	r0, [r7, #52]	@ 0x34
 8004c4a:	f001 b872 	b.w	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8004c4e:	4b8a      	ldr	r3, [pc, #552]	@ (8004e78 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c5a:	d106      	bne.n	8004c6a <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
 8004c5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c5e:	2b80      	cmp	r3, #128	@ 0x80
 8004c60:	d103      	bne.n	8004c6a <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
    {
      frequency = HSI_VALUE;
 8004c62:	4b86      	ldr	r3, [pc, #536]	@ (8004e7c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004c64:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c66:	f001 b864 	b.w	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8004c6a:	4b83      	ldr	r3, [pc, #524]	@ (8004e78 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004c6c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004c70:	f003 0302 	and.w	r3, r3, #2
 8004c74:	2b02      	cmp	r3, #2
 8004c76:	d107      	bne.n	8004c88 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8004c78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c7a:	2bc0      	cmp	r3, #192	@ 0xc0
 8004c7c:	d104      	bne.n	8004c88 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
    {
      frequency = LSE_VALUE;
 8004c7e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004c82:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c84:	f001 b855 	b.w	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 8004c88:	2300      	movs	r3, #0
 8004c8a:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c8c:	f001 b851 	b.w	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 8004c90:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004c94:	f1a2 0110 	sub.w	r1, r2, #16
 8004c98:	430b      	orrs	r3, r1
 8004c9a:	d139      	bne.n	8004d10 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8004c9c:	4b76      	ldr	r3, [pc, #472]	@ (8004e78 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004c9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004ca2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ca6:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8004ca8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d104      	bne.n	8004cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8004cae:	f7fe f8bd 	bl	8002e2c <HAL_RCC_GetPCLK1Freq>
 8004cb2:	6378      	str	r0, [r7, #52]	@ 0x34
 8004cb4:	f001 b83d 	b.w	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 8004cb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004cbe:	d104      	bne.n	8004cca <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004cc0:	f7fd ff98 	bl	8002bf4 <HAL_RCC_GetSysClockFreq>
 8004cc4:	6378      	str	r0, [r7, #52]	@ 0x34
 8004cc6:	f001 b834 	b.w	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8004cca:	4b6b      	ldr	r3, [pc, #428]	@ (8004e78 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004cd2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004cd6:	d107      	bne.n	8004ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
 8004cd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cda:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004cde:	d103      	bne.n	8004ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
    {
      frequency = HSI_VALUE;
 8004ce0:	4b66      	ldr	r3, [pc, #408]	@ (8004e7c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004ce2:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ce4:	f001 b825 	b.w	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8004ce8:	4b63      	ldr	r3, [pc, #396]	@ (8004e78 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004cea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004cee:	f003 0302 	and.w	r3, r3, #2
 8004cf2:	2b02      	cmp	r3, #2
 8004cf4:	d108      	bne.n	8004d08 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 8004cf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cf8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004cfc:	d104      	bne.n	8004d08 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
    {
      frequency = LSE_VALUE;
 8004cfe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004d02:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d04:	f001 b815 	b.w	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 8004d08:	2300      	movs	r3, #0
 8004d0a:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d0c:	f001 b811 	b.w	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined(USART6)
  else if (PeriphClk == RCC_PERIPHCLK_USART6)
 8004d10:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004d14:	f102 4160 	add.w	r1, r2, #3758096384	@ 0xe0000000
 8004d18:	430b      	orrs	r3, r1
 8004d1a:	d139      	bne.n	8004d90 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
  {
    /* Get the current USART6 source */
    srcclk = __HAL_RCC_GET_USART6_SOURCE();
 8004d1c:	4b56      	ldr	r3, [pc, #344]	@ (8004e78 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004d1e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004d22:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004d26:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 8004d28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d104      	bne.n	8004d38 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8004d2e:	f7fe f87d 	bl	8002e2c <HAL_RCC_GetPCLK1Freq>
 8004d32:	6378      	str	r0, [r7, #52]	@ 0x34
 8004d34:	f000 bffd 	b.w	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART6CLKSOURCE_SYSCLK)
 8004d38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d3a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d3e:	d104      	bne.n	8004d4a <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004d40:	f7fd ff58 	bl	8002bf4 <HAL_RCC_GetSysClockFreq>
 8004d44:	6378      	str	r0, [r7, #52]	@ 0x34
 8004d46:	f000 bff4 	b.w	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 8004d4a:	4b4b      	ldr	r3, [pc, #300]	@ (8004e78 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d52:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d56:	d107      	bne.n	8004d68 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 8004d58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d5a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004d5e:	d103      	bne.n	8004d68 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
    {
      frequency = HSI_VALUE;
 8004d60:	4b46      	ldr	r3, [pc, #280]	@ (8004e7c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004d62:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d64:	f000 bfe5 	b.w	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 8004d68:	4b43      	ldr	r3, [pc, #268]	@ (8004e78 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004d6a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004d6e:	f003 0302 	and.w	r3, r3, #2
 8004d72:	2b02      	cmp	r3, #2
 8004d74:	d108      	bne.n	8004d88 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
 8004d76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d78:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004d7c:	d104      	bne.n	8004d88 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
    {
      frequency = LSE_VALUE;
 8004d7e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004d82:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d84:	f000 bfd5 	b.w	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 8004d88:	2300      	movs	r3, #0
 8004d8a:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d8c:	f000 bfd1 	b.w	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 8004d90:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004d94:	f1a2 0120 	sub.w	r1, r2, #32
 8004d98:	430b      	orrs	r3, r1
 8004d9a:	d158      	bne.n	8004e4e <HAL_RCCEx_GetPeriphCLKFreq+0x812>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8004d9c:	4b36      	ldr	r3, [pc, #216]	@ (8004e78 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004d9e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004da2:	f003 0307 	and.w	r3, r3, #7
 8004da6:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8004da8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d104      	bne.n	8004db8 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 8004dae:	f7fe f865 	bl	8002e7c <HAL_RCC_GetPCLK3Freq>
 8004db2:	6378      	str	r0, [r7, #52]	@ 0x34
 8004db4:	f000 bfbd 	b.w	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8004db8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dba:	2b01      	cmp	r3, #1
 8004dbc:	d104      	bne.n	8004dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004dbe:	f7fd ff19 	bl	8002bf4 <HAL_RCC_GetSysClockFreq>
 8004dc2:	6378      	str	r0, [r7, #52]	@ 0x34
 8004dc4:	f000 bfb5 	b.w	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8004dc8:	4b2b      	ldr	r3, [pc, #172]	@ (8004e78 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004dd0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004dd4:	d106      	bne.n	8004de4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
 8004dd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dd8:	2b02      	cmp	r3, #2
 8004dda:	d103      	bne.n	8004de4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      frequency = HSI_VALUE;
 8004ddc:	4b27      	ldr	r3, [pc, #156]	@ (8004e7c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004dde:	637b      	str	r3, [r7, #52]	@ 0x34
 8004de0:	f000 bfa7 	b.w	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8004de4:	4b24      	ldr	r3, [pc, #144]	@ (8004e78 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004de6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004dea:	f003 0302 	and.w	r3, r3, #2
 8004dee:	2b02      	cmp	r3, #2
 8004df0:	d107      	bne.n	8004e02 <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
 8004df2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004df4:	2b03      	cmp	r3, #3
 8004df6:	d104      	bne.n	8004e02 <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
    {
      frequency = LSE_VALUE;
 8004df8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004dfc:	637b      	str	r3, [r7, #52]	@ 0x34
 8004dfe:	f000 bf98 	b.w	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 8004e02:	4b1d      	ldr	r3, [pc, #116]	@ (8004e78 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f003 0320 	and.w	r3, r3, #32
 8004e0a:	2b20      	cmp	r3, #32
 8004e0c:	d11b      	bne.n	8004e46 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 8004e0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e10:	2b04      	cmp	r3, #4
 8004e12:	d118      	bne.n	8004e46 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004e14:	4b18      	ldr	r3, [pc, #96]	@ (8004e78 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004e16:	689b      	ldr	r3, [r3, #8]
 8004e18:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d005      	beq.n	8004e2c <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
 8004e20:	4b15      	ldr	r3, [pc, #84]	@ (8004e78 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004e22:	689b      	ldr	r3, [r3, #8]
 8004e24:	0e1b      	lsrs	r3, r3, #24
 8004e26:	f003 030f 	and.w	r3, r3, #15
 8004e2a:	e006      	b.n	8004e3a <HAL_RCCEx_GetPeriphCLKFreq+0x7fe>
 8004e2c:	4b12      	ldr	r3, [pc, #72]	@ (8004e78 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004e2e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004e32:	041b      	lsls	r3, r3, #16
 8004e34:	0e1b      	lsrs	r3, r3, #24
 8004e36:	f003 030f 	and.w	r3, r3, #15
 8004e3a:	4a11      	ldr	r2, [pc, #68]	@ (8004e80 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8004e3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e40:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e42:	f000 bf76 	b.w	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 8004e46:	2300      	movs	r3, #0
 8004e48:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e4a:	f000 bf72 	b.w	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 8004e4e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e52:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8004e56:	430b      	orrs	r3, r1
 8004e58:	d172      	bne.n	8004f40 <HAL_RCCEx_GetPeriphCLKFreq+0x904>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8004e5a:	4b07      	ldr	r3, [pc, #28]	@ (8004e78 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004e5c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004e60:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8004e64:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8004e66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e68:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e6c:	d10a      	bne.n	8004e84 <HAL_RCCEx_GetPeriphCLKFreq+0x848>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004e6e:	f7fd fec1 	bl	8002bf4 <HAL_RCC_GetSysClockFreq>
 8004e72:	6378      	str	r0, [r7, #52]	@ 0x34
 8004e74:	f000 bf5d 	b.w	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 8004e78:	46020c00 	.word	0x46020c00
 8004e7c:	00f42400 	.word	0x00f42400
 8004e80:	080071a0 	.word	0x080071a0
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 8004e84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e86:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004e8a:	d108      	bne.n	8004e9e <HAL_RCCEx_GetPeriphCLKFreq+0x862>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004e8c:	f107 0318 	add.w	r3, r7, #24
 8004e90:	4618      	mov	r0, r3
 8004e92:	f7ff f91f 	bl	80040d4 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 8004e96:	6a3b      	ldr	r3, [r7, #32]
 8004e98:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e9a:	f000 bf4a 	b.w	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8004e9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d104      	bne.n	8004eae <HAL_RCCEx_GetPeriphCLKFreq+0x872>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 8004ea4:	f7fd ffa8 	bl	8002df8 <HAL_RCC_GetHCLKFreq>
 8004ea8:	6378      	str	r0, [r7, #52]	@ 0x34
 8004eaa:	f000 bf42 	b.w	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 8004eae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004eb0:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004eb4:	d122      	bne.n	8004efc <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8004eb6:	4bb0      	ldr	r3, [pc, #704]	@ (8005178 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f003 0320 	and.w	r3, r3, #32
 8004ebe:	2b20      	cmp	r3, #32
 8004ec0:	d118      	bne.n	8004ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004ec2:	4bad      	ldr	r3, [pc, #692]	@ (8005178 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004ec4:	689b      	ldr	r3, [r3, #8]
 8004ec6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d005      	beq.n	8004eda <HAL_RCCEx_GetPeriphCLKFreq+0x89e>
 8004ece:	4baa      	ldr	r3, [pc, #680]	@ (8005178 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004ed0:	689b      	ldr	r3, [r3, #8]
 8004ed2:	0e1b      	lsrs	r3, r3, #24
 8004ed4:	f003 030f 	and.w	r3, r3, #15
 8004ed8:	e006      	b.n	8004ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
 8004eda:	4ba7      	ldr	r3, [pc, #668]	@ (8005178 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004edc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004ee0:	041b      	lsls	r3, r3, #16
 8004ee2:	0e1b      	lsrs	r3, r3, #24
 8004ee4:	f003 030f 	and.w	r3, r3, #15
 8004ee8:	4aa4      	ldr	r2, [pc, #656]	@ (800517c <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 8004eea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004eee:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ef0:	f000 bf1f 	b.w	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = 0U;
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ef8:	f000 bf1b 	b.w	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8004efc:	4b9e      	ldr	r3, [pc, #632]	@ (8005178 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f04:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004f08:	d107      	bne.n	8004f1a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8004f0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f0c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004f10:	d103      	bne.n	8004f1a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    {
      frequency = HSE_VALUE;
 8004f12:	4b9b      	ldr	r3, [pc, #620]	@ (8005180 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 8004f14:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f16:	f000 bf0c 	b.w	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8004f1a:	4b97      	ldr	r3, [pc, #604]	@ (8005178 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f22:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f26:	d107      	bne.n	8004f38 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
 8004f28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f2a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004f2e:	d103      	bne.n	8004f38 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
    {
      frequency = HSI_VALUE;
 8004f30:	4b93      	ldr	r3, [pc, #588]	@ (8005180 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 8004f32:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f34:	f000 befd 	b.w	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 8004f38:	2300      	movs	r3, #0
 8004f3a:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f3c:	f000 bef9 	b.w	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 8004f40:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f44:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8004f48:	430b      	orrs	r3, r1
 8004f4a:	d158      	bne.n	8004ffe <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 8004f4c:	4b8a      	ldr	r3, [pc, #552]	@ (8005178 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004f4e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004f52:	f003 0307 	and.w	r3, r3, #7
 8004f56:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8004f58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f5a:	2b04      	cmp	r3, #4
 8004f5c:	d84b      	bhi.n	8004ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
 8004f5e:	a201      	add	r2, pc, #4	@ (adr r2, 8004f64 <HAL_RCCEx_GetPeriphCLKFreq+0x928>)
 8004f60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f64:	08004f9d 	.word	0x08004f9d
 8004f68:	08004f79 	.word	0x08004f79
 8004f6c:	08004f8b 	.word	0x08004f8b
 8004f70:	08004fa7 	.word	0x08004fa7
 8004f74:	08004fb1 	.word	0x08004fb1
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004f78:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	f7fe ff4f 	bl	8003e20 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8004f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f84:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004f86:	f000 bed4 	b.w	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004f8a:	f107 030c 	add.w	r3, r7, #12
 8004f8e:	4618      	mov	r0, r3
 8004f90:	f7ff f9fa 	bl	8004388 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8004f94:	693b      	ldr	r3, [r7, #16]
 8004f96:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004f98:	f000 becb 	b.w	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8004f9c:	f7fd ff2c 	bl	8002df8 <HAL_RCC_GetHCLKFreq>
 8004fa0:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8004fa2:	f000 bec6 	b.w	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8004fa6:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8004faa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004fac:	f000 bec1 	b.w	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8004fb0:	4b71      	ldr	r3, [pc, #452]	@ (8005178 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f003 0320 	and.w	r3, r3, #32
 8004fb8:	2b20      	cmp	r3, #32
 8004fba:	d118      	bne.n	8004fee <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004fbc:	4b6e      	ldr	r3, [pc, #440]	@ (8005178 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004fbe:	689b      	ldr	r3, [r3, #8]
 8004fc0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d005      	beq.n	8004fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 8004fc8:	4b6b      	ldr	r3, [pc, #428]	@ (8005178 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004fca:	689b      	ldr	r3, [r3, #8]
 8004fcc:	0e1b      	lsrs	r3, r3, #24
 8004fce:	f003 030f 	and.w	r3, r3, #15
 8004fd2:	e006      	b.n	8004fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
 8004fd4:	4b68      	ldr	r3, [pc, #416]	@ (8005178 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004fd6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004fda:	041b      	lsls	r3, r3, #16
 8004fdc:	0e1b      	lsrs	r3, r3, #24
 8004fde:	f003 030f 	and.w	r3, r3, #15
 8004fe2:	4a66      	ldr	r2, [pc, #408]	@ (800517c <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 8004fe4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004fe8:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004fea:	f000 bea2 	b.w	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 8004fee:	2300      	movs	r3, #0
 8004ff0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004ff2:	f000 be9e 	b.w	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004ffa:	f000 be9a 	b.w	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 8004ffe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005002:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 8005006:	430b      	orrs	r3, r1
 8005008:	d167      	bne.n	80050da <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 800500a:	4b5b      	ldr	r3, [pc, #364]	@ (8005178 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800500c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005010:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8005014:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8005016:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005018:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800501c:	d036      	beq.n	800508c <HAL_RCCEx_GetPeriphCLKFreq+0xa50>
 800501e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005020:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005024:	d855      	bhi.n	80050d2 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 8005026:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005028:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800502c:	d029      	beq.n	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 800502e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005030:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005034:	d84d      	bhi.n	80050d2 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 8005036:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005038:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800503c:	d013      	beq.n	8005066 <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
 800503e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005040:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005044:	d845      	bhi.n	80050d2 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 8005046:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005048:	2b00      	cmp	r3, #0
 800504a:	d015      	beq.n	8005078 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>
 800504c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800504e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005052:	d13e      	bne.n	80050d2 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005054:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005058:	4618      	mov	r0, r3
 800505a:	f7fe fee1 	bl	8003e20 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800505e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005060:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005062:	f000 be66 	b.w	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005066:	f107 030c 	add.w	r3, r7, #12
 800506a:	4618      	mov	r0, r3
 800506c:	f7ff f98c 	bl	8004388 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8005070:	693b      	ldr	r3, [r7, #16]
 8005072:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005074:	f000 be5d 	b.w	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8005078:	f7fd febe 	bl	8002df8 <HAL_RCC_GetHCLKFreq>
 800507c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800507e:	f000 be58 	b.w	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8005082:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8005086:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005088:	f000 be53 	b.w	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800508c:	4b3a      	ldr	r3, [pc, #232]	@ (8005178 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f003 0320 	and.w	r3, r3, #32
 8005094:	2b20      	cmp	r3, #32
 8005096:	d118      	bne.n	80050ca <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005098:	4b37      	ldr	r3, [pc, #220]	@ (8005178 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800509a:	689b      	ldr	r3, [r3, #8]
 800509c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d005      	beq.n	80050b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
 80050a4:	4b34      	ldr	r3, [pc, #208]	@ (8005178 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 80050a6:	689b      	ldr	r3, [r3, #8]
 80050a8:	0e1b      	lsrs	r3, r3, #24
 80050aa:	f003 030f 	and.w	r3, r3, #15
 80050ae:	e006      	b.n	80050be <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 80050b0:	4b31      	ldr	r3, [pc, #196]	@ (8005178 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 80050b2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80050b6:	041b      	lsls	r3, r3, #16
 80050b8:	0e1b      	lsrs	r3, r3, #24
 80050ba:	f003 030f 	and.w	r3, r3, #15
 80050be:	4a2f      	ldr	r2, [pc, #188]	@ (800517c <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 80050c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050c4:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80050c6:	f000 be34 	b.w	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 80050ca:	2300      	movs	r3, #0
 80050cc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80050ce:	f000 be30 	b.w	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 80050d2:	2300      	movs	r3, #0
 80050d4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80050d6:	f000 be2c 	b.w	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 80050da:	e9d7 2300 	ldrd	r2, r3, [r7]
 80050de:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 80050e2:	430b      	orrs	r3, r1
 80050e4:	d152      	bne.n	800518c <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80050e6:	4b24      	ldr	r3, [pc, #144]	@ (8005178 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 80050e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80050ec:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80050f0:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 80050f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d104      	bne.n	8005102 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80050f8:	f7fd fe98 	bl	8002e2c <HAL_RCC_GetPCLK1Freq>
 80050fc:	6378      	str	r0, [r7, #52]	@ 0x34
 80050fe:	f000 be18 	b.w	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8005102:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005104:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005108:	d104      	bne.n	8005114 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800510a:	f7fd fd73 	bl	8002bf4 <HAL_RCC_GetSysClockFreq>
 800510e:	6378      	str	r0, [r7, #52]	@ 0x34
 8005110:	f000 be0f 	b.w	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8005114:	4b18      	ldr	r3, [pc, #96]	@ (8005178 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800511c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005120:	d107      	bne.n	8005132 <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
 8005122:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005124:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005128:	d103      	bne.n	8005132 <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
    {
      frequency = HSI_VALUE;
 800512a:	4b15      	ldr	r3, [pc, #84]	@ (8005180 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 800512c:	637b      	str	r3, [r7, #52]	@ 0x34
 800512e:	f000 be00 	b.w	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 8005132:	4b11      	ldr	r3, [pc, #68]	@ (8005178 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f003 0320 	and.w	r3, r3, #32
 800513a:	2b20      	cmp	r3, #32
 800513c:	d122      	bne.n	8005184 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
 800513e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005140:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005144:	d11e      	bne.n	8005184 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005146:	4b0c      	ldr	r3, [pc, #48]	@ (8005178 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8005148:	689b      	ldr	r3, [r3, #8]
 800514a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800514e:	2b00      	cmp	r3, #0
 8005150:	d005      	beq.n	800515e <HAL_RCCEx_GetPeriphCLKFreq+0xb22>
 8005152:	4b09      	ldr	r3, [pc, #36]	@ (8005178 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8005154:	689b      	ldr	r3, [r3, #8]
 8005156:	0e1b      	lsrs	r3, r3, #24
 8005158:	f003 030f 	and.w	r3, r3, #15
 800515c:	e006      	b.n	800516c <HAL_RCCEx_GetPeriphCLKFreq+0xb30>
 800515e:	4b06      	ldr	r3, [pc, #24]	@ (8005178 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8005160:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005164:	041b      	lsls	r3, r3, #16
 8005166:	0e1b      	lsrs	r3, r3, #24
 8005168:	f003 030f 	and.w	r3, r3, #15
 800516c:	4a03      	ldr	r2, [pc, #12]	@ (800517c <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800516e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005172:	637b      	str	r3, [r7, #52]	@ 0x34
 8005174:	f000 bddd 	b.w	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 8005178:	46020c00 	.word	0x46020c00
 800517c:	080071a0 	.word	0x080071a0
 8005180:	00f42400 	.word	0x00f42400
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 8005184:	2300      	movs	r3, #0
 8005186:	637b      	str	r3, [r7, #52]	@ 0x34
 8005188:	f000 bdd3 	b.w	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 800518c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005190:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 8005194:	430b      	orrs	r3, r1
 8005196:	d14c      	bne.n	8005232 <HAL_RCCEx_GetPeriphCLKFreq+0xbf6>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8005198:	4ba8      	ldr	r3, [pc, #672]	@ (800543c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800519a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800519e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80051a2:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 80051a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d104      	bne.n	80051b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80051aa:	f7fd fe3f 	bl	8002e2c <HAL_RCC_GetPCLK1Freq>
 80051ae:	6378      	str	r0, [r7, #52]	@ 0x34
 80051b0:	f000 bdbf 	b.w	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 80051b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80051ba:	d104      	bne.n	80051c6 <HAL_RCCEx_GetPeriphCLKFreq+0xb8a>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80051bc:	f7fd fd1a 	bl	8002bf4 <HAL_RCC_GetSysClockFreq>
 80051c0:	6378      	str	r0, [r7, #52]	@ 0x34
 80051c2:	f000 bdb6 	b.w	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 80051c6:	4b9d      	ldr	r3, [pc, #628]	@ (800543c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80051ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80051d2:	d107      	bne.n	80051e4 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
 80051d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80051da:	d103      	bne.n	80051e4 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
    {
      frequency = HSI_VALUE;
 80051dc:	4b98      	ldr	r3, [pc, #608]	@ (8005440 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 80051de:	637b      	str	r3, [r7, #52]	@ 0x34
 80051e0:	f000 bda7 	b.w	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 80051e4:	4b95      	ldr	r3, [pc, #596]	@ (800543c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f003 0320 	and.w	r3, r3, #32
 80051ec:	2b20      	cmp	r3, #32
 80051ee:	d11c      	bne.n	800522a <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
 80051f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051f2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80051f6:	d118      	bne.n	800522a <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80051f8:	4b90      	ldr	r3, [pc, #576]	@ (800543c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 80051fa:	689b      	ldr	r3, [r3, #8]
 80051fc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005200:	2b00      	cmp	r3, #0
 8005202:	d005      	beq.n	8005210 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 8005204:	4b8d      	ldr	r3, [pc, #564]	@ (800543c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8005206:	689b      	ldr	r3, [r3, #8]
 8005208:	0e1b      	lsrs	r3, r3, #24
 800520a:	f003 030f 	and.w	r3, r3, #15
 800520e:	e006      	b.n	800521e <HAL_RCCEx_GetPeriphCLKFreq+0xbe2>
 8005210:	4b8a      	ldr	r3, [pc, #552]	@ (800543c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8005212:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005216:	041b      	lsls	r3, r3, #16
 8005218:	0e1b      	lsrs	r3, r3, #24
 800521a:	f003 030f 	and.w	r3, r3, #15
 800521e:	4a89      	ldr	r2, [pc, #548]	@ (8005444 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 8005220:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005224:	637b      	str	r3, [r7, #52]	@ 0x34
 8005226:	f000 bd84 	b.w	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 800522a:	2300      	movs	r3, #0
 800522c:	637b      	str	r3, [r7, #52]	@ 0x34
 800522e:	f000 bd80 	b.w	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 8005232:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005236:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800523a:	430b      	orrs	r3, r1
 800523c:	d158      	bne.n	80052f0 <HAL_RCCEx_GetPeriphCLKFreq+0xcb4>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800523e:	4b7f      	ldr	r3, [pc, #508]	@ (800543c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8005240:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005244:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005248:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800524a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800524c:	2bc0      	cmp	r3, #192	@ 0xc0
 800524e:	d028      	beq.n	80052a2 <HAL_RCCEx_GetPeriphCLKFreq+0xc66>
 8005250:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005252:	2bc0      	cmp	r3, #192	@ 0xc0
 8005254:	d848      	bhi.n	80052e8 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 8005256:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005258:	2b80      	cmp	r3, #128	@ 0x80
 800525a:	d00e      	beq.n	800527a <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 800525c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800525e:	2b80      	cmp	r3, #128	@ 0x80
 8005260:	d842      	bhi.n	80052e8 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 8005262:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005264:	2b00      	cmp	r3, #0
 8005266:	d003      	beq.n	8005270 <HAL_RCCEx_GetPeriphCLKFreq+0xc34>
 8005268:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800526a:	2b40      	cmp	r3, #64	@ 0x40
 800526c:	d014      	beq.n	8005298 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 800526e:	e03b      	b.n	80052e8 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 8005270:	f7fd fe04 	bl	8002e7c <HAL_RCC_GetPCLK3Freq>
 8005274:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8005276:	f000 bd5c 	b.w	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800527a:	4b70      	ldr	r3, [pc, #448]	@ (800543c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005282:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005286:	d103      	bne.n	8005290 <HAL_RCCEx_GetPeriphCLKFreq+0xc54>
        {
          frequency = HSI_VALUE;
 8005288:	4b6d      	ldr	r3, [pc, #436]	@ (8005440 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800528a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800528c:	f000 bd51 	b.w	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 8005290:	2300      	movs	r3, #0
 8005292:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005294:	f000 bd4d 	b.w	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 8005298:	f7fd fcac 	bl	8002bf4 <HAL_RCC_GetSysClockFreq>
 800529c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800529e:	f000 bd48 	b.w	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80052a2:	4b66      	ldr	r3, [pc, #408]	@ (800543c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f003 0320 	and.w	r3, r3, #32
 80052aa:	2b20      	cmp	r3, #32
 80052ac:	d118      	bne.n	80052e0 <HAL_RCCEx_GetPeriphCLKFreq+0xca4>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80052ae:	4b63      	ldr	r3, [pc, #396]	@ (800543c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 80052b0:	689b      	ldr	r3, [r3, #8]
 80052b2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d005      	beq.n	80052c6 <HAL_RCCEx_GetPeriphCLKFreq+0xc8a>
 80052ba:	4b60      	ldr	r3, [pc, #384]	@ (800543c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 80052bc:	689b      	ldr	r3, [r3, #8]
 80052be:	0e1b      	lsrs	r3, r3, #24
 80052c0:	f003 030f 	and.w	r3, r3, #15
 80052c4:	e006      	b.n	80052d4 <HAL_RCCEx_GetPeriphCLKFreq+0xc98>
 80052c6:	4b5d      	ldr	r3, [pc, #372]	@ (800543c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 80052c8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80052cc:	041b      	lsls	r3, r3, #16
 80052ce:	0e1b      	lsrs	r3, r3, #24
 80052d0:	f003 030f 	and.w	r3, r3, #15
 80052d4:	4a5b      	ldr	r2, [pc, #364]	@ (8005444 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 80052d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052da:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80052dc:	f000 bd29 	b.w	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 80052e0:	2300      	movs	r3, #0
 80052e2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80052e4:	f000 bd25 	b.w	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      default:
      {
        frequency = 0U;
 80052e8:	2300      	movs	r3, #0
 80052ea:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80052ec:	f000 bd21 	b.w	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 80052f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80052f4:	f5a2 0180 	sub.w	r1, r2, #4194304	@ 0x400000
 80052f8:	430b      	orrs	r3, r1
 80052fa:	d14c      	bne.n	8005396 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 80052fc:	4b4f      	ldr	r3, [pc, #316]	@ (800543c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 80052fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005302:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8005306:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 8005308:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800530a:	2b00      	cmp	r3, #0
 800530c:	d104      	bne.n	8005318 <HAL_RCCEx_GetPeriphCLKFreq+0xcdc>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800530e:	f7fd fd8d 	bl	8002e2c <HAL_RCC_GetPCLK1Freq>
 8005312:	6378      	str	r0, [r7, #52]	@ 0x34
 8005314:	f000 bd0d 	b.w	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 8005318:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800531a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800531e:	d104      	bne.n	800532a <HAL_RCCEx_GetPeriphCLKFreq+0xcee>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005320:	f7fd fc68 	bl	8002bf4 <HAL_RCC_GetSysClockFreq>
 8005324:	6378      	str	r0, [r7, #52]	@ 0x34
 8005326:	f000 bd04 	b.w	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 800532a:	4b44      	ldr	r3, [pc, #272]	@ (800543c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005332:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005336:	d107      	bne.n	8005348 <HAL_RCCEx_GetPeriphCLKFreq+0xd0c>
 8005338:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800533a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800533e:	d103      	bne.n	8005348 <HAL_RCCEx_GetPeriphCLKFreq+0xd0c>
    {
      frequency = HSI_VALUE;
 8005340:	4b3f      	ldr	r3, [pc, #252]	@ (8005440 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8005342:	637b      	str	r3, [r7, #52]	@ 0x34
 8005344:	f000 bcf5 	b.w	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 8005348:	4b3c      	ldr	r3, [pc, #240]	@ (800543c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f003 0320 	and.w	r3, r3, #32
 8005350:	2b20      	cmp	r3, #32
 8005352:	d11c      	bne.n	800538e <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
 8005354:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005356:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800535a:	d118      	bne.n	800538e <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800535c:	4b37      	ldr	r3, [pc, #220]	@ (800543c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800535e:	689b      	ldr	r3, [r3, #8]
 8005360:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005364:	2b00      	cmp	r3, #0
 8005366:	d005      	beq.n	8005374 <HAL_RCCEx_GetPeriphCLKFreq+0xd38>
 8005368:	4b34      	ldr	r3, [pc, #208]	@ (800543c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800536a:	689b      	ldr	r3, [r3, #8]
 800536c:	0e1b      	lsrs	r3, r3, #24
 800536e:	f003 030f 	and.w	r3, r3, #15
 8005372:	e006      	b.n	8005382 <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 8005374:	4b31      	ldr	r3, [pc, #196]	@ (800543c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8005376:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800537a:	041b      	lsls	r3, r3, #16
 800537c:	0e1b      	lsrs	r3, r3, #24
 800537e:	f003 030f 	and.w	r3, r3, #15
 8005382:	4a30      	ldr	r2, [pc, #192]	@ (8005444 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 8005384:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005388:	637b      	str	r3, [r7, #52]	@ 0x34
 800538a:	f000 bcd2 	b.w	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 800538e:	2300      	movs	r3, #0
 8005390:	637b      	str	r3, [r7, #52]	@ 0x34
 8005392:	f000 bcce 	b.w	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined (I2C5)
  else if (PeriphClk == RCC_PERIPHCLK_I2C5)
 8005396:	e9d7 2300 	ldrd	r2, r3, [r7]
 800539a:	f102 4140 	add.w	r1, r2, #3221225472	@ 0xc0000000
 800539e:	430b      	orrs	r3, r1
 80053a0:	d152      	bne.n	8005448 <HAL_RCCEx_GetPeriphCLKFreq+0xe0c>
  {
    /* Get the current I2C5 source */
    srcclk = __HAL_RCC_GET_I2C5_SOURCE();
 80053a2:	4b26      	ldr	r3, [pc, #152]	@ (800543c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 80053a4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80053a8:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 80053ac:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C5CLKSOURCE_PCLK1)
 80053ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d104      	bne.n	80053be <HAL_RCCEx_GetPeriphCLKFreq+0xd82>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80053b4:	f7fd fd3a 	bl	8002e2c <HAL_RCC_GetPCLK1Freq>
 80053b8:	6378      	str	r0, [r7, #52]	@ 0x34
 80053ba:	f000 bcba 	b.w	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C5CLKSOURCE_SYSCLK)
 80053be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053c0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80053c4:	d104      	bne.n	80053d0 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80053c6:	f7fd fc15 	bl	8002bf4 <HAL_RCC_GetSysClockFreq>
 80053ca:	6378      	str	r0, [r7, #52]	@ 0x34
 80053cc:	f000 bcb1 	b.w	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C5CLKSOURCE_HSI))
 80053d0:	4b1a      	ldr	r3, [pc, #104]	@ (800543c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80053d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80053dc:	d107      	bne.n	80053ee <HAL_RCCEx_GetPeriphCLKFreq+0xdb2>
 80053de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053e0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80053e4:	d103      	bne.n	80053ee <HAL_RCCEx_GetPeriphCLKFreq+0xdb2>
    {
      frequency = HSI_VALUE;
 80053e6:	4b16      	ldr	r3, [pc, #88]	@ (8005440 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 80053e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80053ea:	f000 bca2 	b.w	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C5CLKSOURCE_MSIK))
 80053ee:	4b13      	ldr	r3, [pc, #76]	@ (800543c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f003 0320 	and.w	r3, r3, #32
 80053f6:	2b20      	cmp	r3, #32
 80053f8:	d11c      	bne.n	8005434 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 80053fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053fc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005400:	d118      	bne.n	8005434 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005402:	4b0e      	ldr	r3, [pc, #56]	@ (800543c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8005404:	689b      	ldr	r3, [r3, #8]
 8005406:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800540a:	2b00      	cmp	r3, #0
 800540c:	d005      	beq.n	800541a <HAL_RCCEx_GetPeriphCLKFreq+0xdde>
 800540e:	4b0b      	ldr	r3, [pc, #44]	@ (800543c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8005410:	689b      	ldr	r3, [r3, #8]
 8005412:	0e1b      	lsrs	r3, r3, #24
 8005414:	f003 030f 	and.w	r3, r3, #15
 8005418:	e006      	b.n	8005428 <HAL_RCCEx_GetPeriphCLKFreq+0xdec>
 800541a:	4b08      	ldr	r3, [pc, #32]	@ (800543c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800541c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005420:	041b      	lsls	r3, r3, #16
 8005422:	0e1b      	lsrs	r3, r3, #24
 8005424:	f003 030f 	and.w	r3, r3, #15
 8005428:	4a06      	ldr	r2, [pc, #24]	@ (8005444 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800542a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800542e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005430:	f000 bc7f 	b.w	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C5 */
    else
    {
      frequency = 0U;
 8005434:	2300      	movs	r3, #0
 8005436:	637b      	str	r3, [r7, #52]	@ 0x34
 8005438:	f000 bc7b 	b.w	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800543c:	46020c00 	.word	0x46020c00
 8005440:	00f42400 	.word	0x00f42400
 8005444:	080071a0 	.word	0x080071a0
    }
  }
#endif /* I2C5 */
#if defined (I2C6)
  else if (PeriphClk == RCC_PERIPHCLK_I2C6)
 8005448:	e9d7 2300 	ldrd	r2, r3, [r7]
 800544c:	f102 4100 	add.w	r1, r2, #2147483648	@ 0x80000000
 8005450:	430b      	orrs	r3, r1
 8005452:	d14c      	bne.n	80054ee <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
  {
    /* Get the current I2C6 source */
    srcclk = __HAL_RCC_GET_I2C6_SOURCE();
 8005454:	4ba6      	ldr	r3, [pc, #664]	@ (80056f0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8005456:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800545a:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800545e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C6CLKSOURCE_PCLK1)
 8005460:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005462:	2b00      	cmp	r3, #0
 8005464:	d104      	bne.n	8005470 <HAL_RCCEx_GetPeriphCLKFreq+0xe34>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8005466:	f7fd fce1 	bl	8002e2c <HAL_RCC_GetPCLK1Freq>
 800546a:	6378      	str	r0, [r7, #52]	@ 0x34
 800546c:	f000 bc61 	b.w	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C6CLKSOURCE_SYSCLK)
 8005470:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005472:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005476:	d104      	bne.n	8005482 <HAL_RCCEx_GetPeriphCLKFreq+0xe46>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005478:	f7fd fbbc 	bl	8002bf4 <HAL_RCC_GetSysClockFreq>
 800547c:	6378      	str	r0, [r7, #52]	@ 0x34
 800547e:	f000 bc58 	b.w	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C6CLKSOURCE_HSI))
 8005482:	4b9b      	ldr	r3, [pc, #620]	@ (80056f0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800548a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800548e:	d107      	bne.n	80054a0 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8005490:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005492:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005496:	d103      	bne.n	80054a0 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
    {
      frequency = HSI_VALUE;
 8005498:	4b96      	ldr	r3, [pc, #600]	@ (80056f4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 800549a:	637b      	str	r3, [r7, #52]	@ 0x34
 800549c:	f000 bc49 	b.w	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C6CLKSOURCE_MSIK))
 80054a0:	4b93      	ldr	r3, [pc, #588]	@ (80056f0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f003 0320 	and.w	r3, r3, #32
 80054a8:	2b20      	cmp	r3, #32
 80054aa:	d11c      	bne.n	80054e6 <HAL_RCCEx_GetPeriphCLKFreq+0xeaa>
 80054ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054ae:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80054b2:	d118      	bne.n	80054e6 <HAL_RCCEx_GetPeriphCLKFreq+0xeaa>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80054b4:	4b8e      	ldr	r3, [pc, #568]	@ (80056f0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 80054b6:	689b      	ldr	r3, [r3, #8]
 80054b8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d005      	beq.n	80054cc <HAL_RCCEx_GetPeriphCLKFreq+0xe90>
 80054c0:	4b8b      	ldr	r3, [pc, #556]	@ (80056f0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 80054c2:	689b      	ldr	r3, [r3, #8]
 80054c4:	0e1b      	lsrs	r3, r3, #24
 80054c6:	f003 030f 	and.w	r3, r3, #15
 80054ca:	e006      	b.n	80054da <HAL_RCCEx_GetPeriphCLKFreq+0xe9e>
 80054cc:	4b88      	ldr	r3, [pc, #544]	@ (80056f0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 80054ce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80054d2:	041b      	lsls	r3, r3, #16
 80054d4:	0e1b      	lsrs	r3, r3, #24
 80054d6:	f003 030f 	and.w	r3, r3, #15
 80054da:	4a87      	ldr	r2, [pc, #540]	@ (80056f8 <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 80054dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80054e2:	f000 bc26 	b.w	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C6 */
    else
    {
      frequency = 0U;
 80054e6:	2300      	movs	r3, #0
 80054e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80054ea:	f000 bc22 	b.w	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 80054ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 80054f2:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 80054f6:	430b      	orrs	r3, r1
 80054f8:	d164      	bne.n	80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 80054fa:	4b7d      	ldr	r3, [pc, #500]	@ (80056f0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 80054fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005500:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005504:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 8005506:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005508:	2b00      	cmp	r3, #0
 800550a:	d120      	bne.n	800554e <HAL_RCCEx_GetPeriphCLKFreq+0xf12>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800550c:	4b78      	ldr	r3, [pc, #480]	@ (80056f0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f003 0320 	and.w	r3, r3, #32
 8005514:	2b20      	cmp	r3, #32
 8005516:	d117      	bne.n	8005548 <HAL_RCCEx_GetPeriphCLKFreq+0xf0c>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005518:	4b75      	ldr	r3, [pc, #468]	@ (80056f0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800551a:	689b      	ldr	r3, [r3, #8]
 800551c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005520:	2b00      	cmp	r3, #0
 8005522:	d005      	beq.n	8005530 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
 8005524:	4b72      	ldr	r3, [pc, #456]	@ (80056f0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8005526:	689b      	ldr	r3, [r3, #8]
 8005528:	0e1b      	lsrs	r3, r3, #24
 800552a:	f003 030f 	and.w	r3, r3, #15
 800552e:	e006      	b.n	800553e <HAL_RCCEx_GetPeriphCLKFreq+0xf02>
 8005530:	4b6f      	ldr	r3, [pc, #444]	@ (80056f0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8005532:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005536:	041b      	lsls	r3, r3, #16
 8005538:	0e1b      	lsrs	r3, r3, #24
 800553a:	f003 030f 	and.w	r3, r3, #15
 800553e:	4a6e      	ldr	r2, [pc, #440]	@ (80056f8 <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 8005540:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005544:	637b      	str	r3, [r7, #52]	@ 0x34
 8005546:	e3f4      	b.n	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = 0U;
 8005548:	2300      	movs	r3, #0
 800554a:	637b      	str	r3, [r7, #52]	@ 0x34
 800554c:	e3f1      	b.n	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 800554e:	4b68      	ldr	r3, [pc, #416]	@ (80056f0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8005550:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005554:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005558:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800555c:	d112      	bne.n	8005584 <HAL_RCCEx_GetPeriphCLKFreq+0xf48>
 800555e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005560:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005564:	d10e      	bne.n	8005584 <HAL_RCCEx_GetPeriphCLKFreq+0xf48>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005566:	4b62      	ldr	r3, [pc, #392]	@ (80056f0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8005568:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800556c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005570:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005574:	d102      	bne.n	800557c <HAL_RCCEx_GetPeriphCLKFreq+0xf40>
      {
        frequency = LSI_VALUE / 128U;
 8005576:	23fa      	movs	r3, #250	@ 0xfa
 8005578:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800557a:	e3da      	b.n	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800557c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8005580:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005582:	e3d6      	b.n	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 8005584:	4b5a      	ldr	r3, [pc, #360]	@ (80056f0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800558c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005590:	d106      	bne.n	80055a0 <HAL_RCCEx_GetPeriphCLKFreq+0xf64>
 8005592:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005594:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005598:	d102      	bne.n	80055a0 <HAL_RCCEx_GetPeriphCLKFreq+0xf64>
    {
      frequency = HSI_VALUE;
 800559a:	4b56      	ldr	r3, [pc, #344]	@ (80056f4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 800559c:	637b      	str	r3, [r7, #52]	@ 0x34
 800559e:	e3c8      	b.n	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 80055a0:	4b53      	ldr	r3, [pc, #332]	@ (80056f0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 80055a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80055a6:	f003 0302 	and.w	r3, r3, #2
 80055aa:	2b02      	cmp	r3, #2
 80055ac:	d107      	bne.n	80055be <HAL_RCCEx_GetPeriphCLKFreq+0xf82>
 80055ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055b0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80055b4:	d103      	bne.n	80055be <HAL_RCCEx_GetPeriphCLKFreq+0xf82>
    {
      frequency = LSE_VALUE;
 80055b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80055ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80055bc:	e3b9      	b.n	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 80055be:	2300      	movs	r3, #0
 80055c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80055c2:	e3b6      	b.n	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 80055c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80055c8:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 80055cc:	430b      	orrs	r3, r1
 80055ce:	d164      	bne.n	800569a <HAL_RCCEx_GetPeriphCLKFreq+0x105e>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80055d0:	4b47      	ldr	r3, [pc, #284]	@ (80056f0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 80055d2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80055d6:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80055da:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 80055dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d120      	bne.n	8005624 <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80055e2:	4b43      	ldr	r3, [pc, #268]	@ (80056f0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f003 0320 	and.w	r3, r3, #32
 80055ea:	2b20      	cmp	r3, #32
 80055ec:	d117      	bne.n	800561e <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80055ee:	4b40      	ldr	r3, [pc, #256]	@ (80056f0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 80055f0:	689b      	ldr	r3, [r3, #8]
 80055f2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d005      	beq.n	8005606 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
 80055fa:	4b3d      	ldr	r3, [pc, #244]	@ (80056f0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 80055fc:	689b      	ldr	r3, [r3, #8]
 80055fe:	0e1b      	lsrs	r3, r3, #24
 8005600:	f003 030f 	and.w	r3, r3, #15
 8005604:	e006      	b.n	8005614 <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>
 8005606:	4b3a      	ldr	r3, [pc, #232]	@ (80056f0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8005608:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800560c:	041b      	lsls	r3, r3, #16
 800560e:	0e1b      	lsrs	r3, r3, #24
 8005610:	f003 030f 	and.w	r3, r3, #15
 8005614:	4a38      	ldr	r2, [pc, #224]	@ (80056f8 <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 8005616:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800561a:	637b      	str	r3, [r7, #52]	@ 0x34
 800561c:	e389      	b.n	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = 0U;
 800561e:	2300      	movs	r3, #0
 8005620:	637b      	str	r3, [r7, #52]	@ 0x34
 8005622:	e386      	b.n	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8005624:	4b32      	ldr	r3, [pc, #200]	@ (80056f0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8005626:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800562a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800562e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005632:	d112      	bne.n	800565a <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
 8005634:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005636:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800563a:	d10e      	bne.n	800565a <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800563c:	4b2c      	ldr	r3, [pc, #176]	@ (80056f0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800563e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005642:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005646:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800564a:	d102      	bne.n	8005652 <HAL_RCCEx_GetPeriphCLKFreq+0x1016>
      {
        frequency = LSI_VALUE / 128U;
 800564c:	23fa      	movs	r3, #250	@ 0xfa
 800564e:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005650:	e36f      	b.n	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 8005652:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8005656:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005658:	e36b      	b.n	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 800565a:	4b25      	ldr	r3, [pc, #148]	@ (80056f0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005662:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005666:	d106      	bne.n	8005676 <HAL_RCCEx_GetPeriphCLKFreq+0x103a>
 8005668:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800566a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800566e:	d102      	bne.n	8005676 <HAL_RCCEx_GetPeriphCLKFreq+0x103a>
    {
      frequency = HSI_VALUE;
 8005670:	4b20      	ldr	r3, [pc, #128]	@ (80056f4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 8005672:	637b      	str	r3, [r7, #52]	@ 0x34
 8005674:	e35d      	b.n	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8005676:	4b1e      	ldr	r3, [pc, #120]	@ (80056f0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8005678:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800567c:	f003 0302 	and.w	r3, r3, #2
 8005680:	2b02      	cmp	r3, #2
 8005682:	d107      	bne.n	8005694 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>
 8005684:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005686:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800568a:	d103      	bne.n	8005694 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>
    {
      frequency = LSE_VALUE;
 800568c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005690:	637b      	str	r3, [r7, #52]	@ 0x34
 8005692:	e34e      	b.n	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 8005694:	2300      	movs	r3, #0
 8005696:	637b      	str	r3, [r7, #52]	@ 0x34
 8005698:	e34b      	b.n	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 800569a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800569e:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 80056a2:	430b      	orrs	r3, r1
 80056a4:	d14e      	bne.n	8005744 <HAL_RCCEx_GetPeriphCLKFreq+0x1108>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80056a6:	4b12      	ldr	r3, [pc, #72]	@ (80056f0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 80056a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80056ac:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 80056b0:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 80056b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d103      	bne.n	80056c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1084>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80056b8:	f7fd fbb8 	bl	8002e2c <HAL_RCC_GetPCLK1Freq>
 80056bc:	6378      	str	r0, [r7, #52]	@ 0x34
 80056be:	e338      	b.n	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 80056c0:	4b0b      	ldr	r3, [pc, #44]	@ (80056f0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 80056c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80056c6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80056ca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80056ce:	d119      	bne.n	8005704 <HAL_RCCEx_GetPeriphCLKFreq+0x10c8>
 80056d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056d2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80056d6:	d115      	bne.n	8005704 <HAL_RCCEx_GetPeriphCLKFreq+0x10c8>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80056d8:	4b05      	ldr	r3, [pc, #20]	@ (80056f0 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 80056da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80056de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80056e2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80056e6:	d109      	bne.n	80056fc <HAL_RCCEx_GetPeriphCLKFreq+0x10c0>
      {
        frequency = LSI_VALUE / 128U;
 80056e8:	23fa      	movs	r3, #250	@ 0xfa
 80056ea:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80056ec:	e321      	b.n	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 80056ee:	bf00      	nop
 80056f0:	46020c00 	.word	0x46020c00
 80056f4:	00f42400 	.word	0x00f42400
 80056f8:	080071a0 	.word	0x080071a0
      }
      else
      {
        frequency = LSI_VALUE;
 80056fc:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8005700:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005702:	e316      	b.n	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 8005704:	4ba8      	ldr	r3, [pc, #672]	@ (80059a8 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800570c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005710:	d106      	bne.n	8005720 <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>
 8005712:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005714:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005718:	d102      	bne.n	8005720 <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>
    {
      frequency = HSI_VALUE;
 800571a:	4ba4      	ldr	r3, [pc, #656]	@ (80059ac <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800571c:	637b      	str	r3, [r7, #52]	@ 0x34
 800571e:	e308      	b.n	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8005720:	4ba1      	ldr	r3, [pc, #644]	@ (80059a8 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8005722:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005726:	f003 0302 	and.w	r3, r3, #2
 800572a:	2b02      	cmp	r3, #2
 800572c:	d107      	bne.n	800573e <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
 800572e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005730:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005734:	d103      	bne.n	800573e <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
    {
      frequency = LSE_VALUE;
 8005736:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800573a:	637b      	str	r3, [r7, #52]	@ 0x34
 800573c:	e2f9      	b.n	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 800573e:	2300      	movs	r3, #0
 8005740:	637b      	str	r3, [r7, #52]	@ 0x34
 8005742:	e2f6      	b.n	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 8005744:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005748:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 800574c:	430b      	orrs	r3, r1
 800574e:	d12d      	bne.n	80057ac <HAL_RCCEx_GetPeriphCLKFreq+0x1170>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 8005750:	4b95      	ldr	r3, [pc, #596]	@ (80059a8 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8005752:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005756:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 800575a:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 800575c:	4b92      	ldr	r3, [pc, #584]	@ (80059a8 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005764:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005768:	d105      	bne.n	8005776 <HAL_RCCEx_GetPeriphCLKFreq+0x113a>
 800576a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800576c:	2b00      	cmp	r3, #0
 800576e:	d102      	bne.n	8005776 <HAL_RCCEx_GetPeriphCLKFreq+0x113a>
    {
      frequency = HSE_VALUE;
 8005770:	4b8e      	ldr	r3, [pc, #568]	@ (80059ac <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 8005772:	637b      	str	r3, [r7, #52]	@ 0x34
 8005774:	e2dd      	b.n	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 8005776:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005778:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800577c:	d107      	bne.n	800578e <HAL_RCCEx_GetPeriphCLKFreq+0x1152>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800577e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005782:	4618      	mov	r0, r3
 8005784:	f7fe fb4c 	bl	8003e20 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 8005788:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800578a:	637b      	str	r3, [r7, #52]	@ 0x34
 800578c:	e2d1      	b.n	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 800578e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005790:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005794:	d107      	bne.n	80057a6 <HAL_RCCEx_GetPeriphCLKFreq+0x116a>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005796:	f107 0318 	add.w	r3, r7, #24
 800579a:	4618      	mov	r0, r3
 800579c:	f7fe fc9a 	bl	80040d4 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 80057a0:	69bb      	ldr	r3, [r7, #24]
 80057a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80057a4:	e2c5      	b.n	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 80057a6:	2300      	movs	r3, #0
 80057a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80057aa:	e2c2      	b.n	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 80057ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80057b0:	f5a2 0100 	sub.w	r1, r2, #8388608	@ 0x800000
 80057b4:	430b      	orrs	r3, r1
 80057b6:	d156      	bne.n	8005866 <HAL_RCCEx_GetPeriphCLKFreq+0x122a>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 80057b8:	4b7b      	ldr	r3, [pc, #492]	@ (80059a8 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 80057ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80057be:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80057c2:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 80057c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057c6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80057ca:	d028      	beq.n	800581e <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 80057cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057ce:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80057d2:	d845      	bhi.n	8005860 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
 80057d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057d6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80057da:	d013      	beq.n	8005804 <HAL_RCCEx_GetPeriphCLKFreq+0x11c8>
 80057dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057de:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80057e2:	d83d      	bhi.n	8005860 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
 80057e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d004      	beq.n	80057f4 <HAL_RCCEx_GetPeriphCLKFreq+0x11b8>
 80057ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057ec:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80057f0:	d004      	beq.n	80057fc <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
 80057f2:	e035      	b.n	8005860 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 80057f4:	f7fd fb2e 	bl	8002e54 <HAL_RCC_GetPCLK2Freq>
 80057f8:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80057fa:	e29a      	b.n	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80057fc:	f7fd f9fa 	bl	8002bf4 <HAL_RCC_GetSysClockFreq>
 8005800:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8005802:	e296      	b.n	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005804:	4b68      	ldr	r3, [pc, #416]	@ (80059a8 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800580c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005810:	d102      	bne.n	8005818 <HAL_RCCEx_GetPeriphCLKFreq+0x11dc>
        {
          frequency = HSI_VALUE;
 8005812:	4b66      	ldr	r3, [pc, #408]	@ (80059ac <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 8005814:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005816:	e28c      	b.n	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 8005818:	2300      	movs	r3, #0
 800581a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800581c:	e289      	b.n	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800581e:	4b62      	ldr	r3, [pc, #392]	@ (80059a8 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f003 0320 	and.w	r3, r3, #32
 8005826:	2b20      	cmp	r3, #32
 8005828:	d117      	bne.n	800585a <HAL_RCCEx_GetPeriphCLKFreq+0x121e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800582a:	4b5f      	ldr	r3, [pc, #380]	@ (80059a8 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800582c:	689b      	ldr	r3, [r3, #8]
 800582e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005832:	2b00      	cmp	r3, #0
 8005834:	d005      	beq.n	8005842 <HAL_RCCEx_GetPeriphCLKFreq+0x1206>
 8005836:	4b5c      	ldr	r3, [pc, #368]	@ (80059a8 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8005838:	689b      	ldr	r3, [r3, #8]
 800583a:	0e1b      	lsrs	r3, r3, #24
 800583c:	f003 030f 	and.w	r3, r3, #15
 8005840:	e006      	b.n	8005850 <HAL_RCCEx_GetPeriphCLKFreq+0x1214>
 8005842:	4b59      	ldr	r3, [pc, #356]	@ (80059a8 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8005844:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005848:	041b      	lsls	r3, r3, #16
 800584a:	0e1b      	lsrs	r3, r3, #24
 800584c:	f003 030f 	and.w	r3, r3, #15
 8005850:	4a57      	ldr	r2, [pc, #348]	@ (80059b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1374>)
 8005852:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005856:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005858:	e26b      	b.n	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800585a:	2300      	movs	r3, #0
 800585c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800585e:	e268      	b.n	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 8005860:	2300      	movs	r3, #0
 8005862:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005864:	e265      	b.n	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 8005866:	e9d7 2300 	ldrd	r2, r3, [r7]
 800586a:	f102 417f 	add.w	r1, r2, #4278190080	@ 0xff000000
 800586e:	430b      	orrs	r3, r1
 8005870:	d156      	bne.n	8005920 <HAL_RCCEx_GetPeriphCLKFreq+0x12e4>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8005872:	4b4d      	ldr	r3, [pc, #308]	@ (80059a8 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8005874:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005878:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800587c:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800587e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005880:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005884:	d028      	beq.n	80058d8 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>
 8005886:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005888:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800588c:	d845      	bhi.n	800591a <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
 800588e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005890:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005894:	d013      	beq.n	80058be <HAL_RCCEx_GetPeriphCLKFreq+0x1282>
 8005896:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005898:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800589c:	d83d      	bhi.n	800591a <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
 800589e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d004      	beq.n	80058ae <HAL_RCCEx_GetPeriphCLKFreq+0x1272>
 80058a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80058aa:	d004      	beq.n	80058b6 <HAL_RCCEx_GetPeriphCLKFreq+0x127a>
 80058ac:	e035      	b.n	800591a <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 80058ae:	f7fd fabd 	bl	8002e2c <HAL_RCC_GetPCLK1Freq>
 80058b2:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80058b4:	e23d      	b.n	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80058b6:	f7fd f99d 	bl	8002bf4 <HAL_RCC_GetSysClockFreq>
 80058ba:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80058bc:	e239      	b.n	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80058be:	4b3a      	ldr	r3, [pc, #232]	@ (80059a8 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80058c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80058ca:	d102      	bne.n	80058d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1296>
        {
          frequency = HSI_VALUE;
 80058cc:	4b37      	ldr	r3, [pc, #220]	@ (80059ac <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 80058ce:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80058d0:	e22f      	b.n	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 80058d2:	2300      	movs	r3, #0
 80058d4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80058d6:	e22c      	b.n	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80058d8:	4b33      	ldr	r3, [pc, #204]	@ (80059a8 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f003 0320 	and.w	r3, r3, #32
 80058e0:	2b20      	cmp	r3, #32
 80058e2:	d117      	bne.n	8005914 <HAL_RCCEx_GetPeriphCLKFreq+0x12d8>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80058e4:	4b30      	ldr	r3, [pc, #192]	@ (80059a8 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 80058e6:	689b      	ldr	r3, [r3, #8]
 80058e8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d005      	beq.n	80058fc <HAL_RCCEx_GetPeriphCLKFreq+0x12c0>
 80058f0:	4b2d      	ldr	r3, [pc, #180]	@ (80059a8 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 80058f2:	689b      	ldr	r3, [r3, #8]
 80058f4:	0e1b      	lsrs	r3, r3, #24
 80058f6:	f003 030f 	and.w	r3, r3, #15
 80058fa:	e006      	b.n	800590a <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
 80058fc:	4b2a      	ldr	r3, [pc, #168]	@ (80059a8 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 80058fe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005902:	041b      	lsls	r3, r3, #16
 8005904:	0e1b      	lsrs	r3, r3, #24
 8005906:	f003 030f 	and.w	r3, r3, #15
 800590a:	4a29      	ldr	r2, [pc, #164]	@ (80059b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1374>)
 800590c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005910:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005912:	e20e      	b.n	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 8005914:	2300      	movs	r3, #0
 8005916:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005918:	e20b      	b.n	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800591a:	2300      	movs	r3, #0
 800591c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800591e:	e208      	b.n	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 8005920:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005924:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 8005928:	430b      	orrs	r3, r1
 800592a:	d17c      	bne.n	8005a26 <HAL_RCCEx_GetPeriphCLKFreq+0x13ea>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800592c:	4b1e      	ldr	r3, [pc, #120]	@ (80059a8 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800592e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005932:	f003 0318 	and.w	r3, r3, #24
 8005936:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8005938:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800593a:	2b18      	cmp	r3, #24
 800593c:	d870      	bhi.n	8005a20 <HAL_RCCEx_GetPeriphCLKFreq+0x13e4>
 800593e:	a201      	add	r2, pc, #4	@ (adr r2, 8005944 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>)
 8005940:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005944:	080059b5 	.word	0x080059b5
 8005948:	08005a21 	.word	0x08005a21
 800594c:	08005a21 	.word	0x08005a21
 8005950:	08005a21 	.word	0x08005a21
 8005954:	08005a21 	.word	0x08005a21
 8005958:	08005a21 	.word	0x08005a21
 800595c:	08005a21 	.word	0x08005a21
 8005960:	08005a21 	.word	0x08005a21
 8005964:	080059bd 	.word	0x080059bd
 8005968:	08005a21 	.word	0x08005a21
 800596c:	08005a21 	.word	0x08005a21
 8005970:	08005a21 	.word	0x08005a21
 8005974:	08005a21 	.word	0x08005a21
 8005978:	08005a21 	.word	0x08005a21
 800597c:	08005a21 	.word	0x08005a21
 8005980:	08005a21 	.word	0x08005a21
 8005984:	080059c5 	.word	0x080059c5
 8005988:	08005a21 	.word	0x08005a21
 800598c:	08005a21 	.word	0x08005a21
 8005990:	08005a21 	.word	0x08005a21
 8005994:	08005a21 	.word	0x08005a21
 8005998:	08005a21 	.word	0x08005a21
 800599c:	08005a21 	.word	0x08005a21
 80059a0:	08005a21 	.word	0x08005a21
 80059a4:	080059df 	.word	0x080059df
 80059a8:	46020c00 	.word	0x46020c00
 80059ac:	00f42400 	.word	0x00f42400
 80059b0:	080071a0 	.word	0x080071a0
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 80059b4:	f7fd fa62 	bl	8002e7c <HAL_RCC_GetPCLK3Freq>
 80059b8:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80059ba:	e1ba      	b.n	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80059bc:	f7fd f91a 	bl	8002bf4 <HAL_RCC_GetSysClockFreq>
 80059c0:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80059c2:	e1b6      	b.n	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80059c4:	4b9f      	ldr	r3, [pc, #636]	@ (8005c44 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80059cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80059d0:	d102      	bne.n	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x139c>
        {
          frequency = HSI_VALUE;
 80059d2:	4b9d      	ldr	r3, [pc, #628]	@ (8005c48 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 80059d4:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80059d6:	e1ac      	b.n	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 80059d8:	2300      	movs	r3, #0
 80059da:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80059dc:	e1a9      	b.n	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80059de:	4b99      	ldr	r3, [pc, #612]	@ (8005c44 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f003 0320 	and.w	r3, r3, #32
 80059e6:	2b20      	cmp	r3, #32
 80059e8:	d117      	bne.n	8005a1a <HAL_RCCEx_GetPeriphCLKFreq+0x13de>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80059ea:	4b96      	ldr	r3, [pc, #600]	@ (8005c44 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 80059ec:	689b      	ldr	r3, [r3, #8]
 80059ee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d005      	beq.n	8005a02 <HAL_RCCEx_GetPeriphCLKFreq+0x13c6>
 80059f6:	4b93      	ldr	r3, [pc, #588]	@ (8005c44 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 80059f8:	689b      	ldr	r3, [r3, #8]
 80059fa:	0e1b      	lsrs	r3, r3, #24
 80059fc:	f003 030f 	and.w	r3, r3, #15
 8005a00:	e006      	b.n	8005a10 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
 8005a02:	4b90      	ldr	r3, [pc, #576]	@ (8005c44 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 8005a04:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005a08:	041b      	lsls	r3, r3, #16
 8005a0a:	0e1b      	lsrs	r3, r3, #24
 8005a0c:	f003 030f 	and.w	r3, r3, #15
 8005a10:	4a8e      	ldr	r2, [pc, #568]	@ (8005c4c <HAL_RCCEx_GetPeriphCLKFreq+0x1610>)
 8005a12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a16:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005a18:	e18b      	b.n	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005a1e:	e188      	b.n	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 8005a20:	2300      	movs	r3, #0
 8005a22:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005a24:	e185      	b.n	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 8005a26:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a2a:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 8005a2e:	430b      	orrs	r3, r1
 8005a30:	d155      	bne.n	8005ade <HAL_RCCEx_GetPeriphCLKFreq+0x14a2>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8005a32:	4b84      	ldr	r3, [pc, #528]	@ (8005c44 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 8005a34:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005a38:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8005a3c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8005a3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a40:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005a44:	d013      	beq.n	8005a6e <HAL_RCCEx_GetPeriphCLKFreq+0x1432>
 8005a46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a48:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005a4c:	d844      	bhi.n	8005ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x149c>
 8005a4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a50:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005a54:	d013      	beq.n	8005a7e <HAL_RCCEx_GetPeriphCLKFreq+0x1442>
 8005a56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a58:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005a5c:	d83c      	bhi.n	8005ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x149c>
 8005a5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d014      	beq.n	8005a8e <HAL_RCCEx_GetPeriphCLKFreq+0x1452>
 8005a64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a66:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005a6a:	d014      	beq.n	8005a96 <HAL_RCCEx_GetPeriphCLKFreq+0x145a>
 8005a6c:	e034      	b.n	8005ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x149c>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005a6e:	f107 0318 	add.w	r3, r7, #24
 8005a72:	4618      	mov	r0, r3
 8005a74:	f7fe fb2e 	bl	80040d4 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8005a78:	69fb      	ldr	r3, [r7, #28]
 8005a7a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005a7c:	e159      	b.n	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005a7e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005a82:	4618      	mov	r0, r3
 8005a84:	f7fe f9cc 	bl	8003e20 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8005a88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a8a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005a8c:	e151      	b.n	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8005a8e:	f7fd f8b1 	bl	8002bf4 <HAL_RCC_GetSysClockFreq>
 8005a92:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8005a94:	e14d      	b.n	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005a96:	4b6b      	ldr	r3, [pc, #428]	@ (8005c44 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f003 0320 	and.w	r3, r3, #32
 8005a9e:	2b20      	cmp	r3, #32
 8005aa0:	d117      	bne.n	8005ad2 <HAL_RCCEx_GetPeriphCLKFreq+0x1496>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005aa2:	4b68      	ldr	r3, [pc, #416]	@ (8005c44 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 8005aa4:	689b      	ldr	r3, [r3, #8]
 8005aa6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d005      	beq.n	8005aba <HAL_RCCEx_GetPeriphCLKFreq+0x147e>
 8005aae:	4b65      	ldr	r3, [pc, #404]	@ (8005c44 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 8005ab0:	689b      	ldr	r3, [r3, #8]
 8005ab2:	0e1b      	lsrs	r3, r3, #24
 8005ab4:	f003 030f 	and.w	r3, r3, #15
 8005ab8:	e006      	b.n	8005ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x148c>
 8005aba:	4b62      	ldr	r3, [pc, #392]	@ (8005c44 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 8005abc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005ac0:	041b      	lsls	r3, r3, #16
 8005ac2:	0e1b      	lsrs	r3, r3, #24
 8005ac4:	f003 030f 	and.w	r3, r3, #15
 8005ac8:	4a60      	ldr	r2, [pc, #384]	@ (8005c4c <HAL_RCCEx_GetPeriphCLKFreq+0x1610>)
 8005aca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ace:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005ad0:	e12f      	b.n	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005ad6:	e12c      	b.n	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 8005ad8:	2300      	movs	r3, #0
 8005ada:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005adc:	e129      	b.n	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined(HSPI1)

  else if (PeriphClk == RCC_PERIPHCLK_HSPI)
 8005ade:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005ae2:	1e59      	subs	r1, r3, #1
 8005ae4:	ea52 0301 	orrs.w	r3, r2, r1
 8005ae8:	d13c      	bne.n	8005b64 <HAL_RCCEx_GetPeriphCLKFreq+0x1528>
  {
    /* Get the current HSPI kernel source */
    srcclk = __HAL_RCC_GET_HSPI_SOURCE();
 8005aea:	4b56      	ldr	r3, [pc, #344]	@ (8005c44 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 8005aec:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005af0:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8005af4:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8005af6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005af8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005afc:	d027      	beq.n	8005b4e <HAL_RCCEx_GetPeriphCLKFreq+0x1512>
 8005afe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b00:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005b04:	d82b      	bhi.n	8005b5e <HAL_RCCEx_GetPeriphCLKFreq+0x1522>
 8005b06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b08:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005b0c:	d017      	beq.n	8005b3e <HAL_RCCEx_GetPeriphCLKFreq+0x1502>
 8005b0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b10:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005b14:	d823      	bhi.n	8005b5e <HAL_RCCEx_GetPeriphCLKFreq+0x1522>
 8005b16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d004      	beq.n	8005b26 <HAL_RCCEx_GetPeriphCLKFreq+0x14ea>
 8005b1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b1e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005b22:	d004      	beq.n	8005b2e <HAL_RCCEx_GetPeriphCLKFreq+0x14f2>
 8005b24:	e01b      	b.n	8005b5e <HAL_RCCEx_GetPeriphCLKFreq+0x1522>
    {
      case RCC_HSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8005b26:	f7fd f865 	bl	8002bf4 <HAL_RCC_GetSysClockFreq>
 8005b2a:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8005b2c:	e101      	b.n	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_HSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005b2e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005b32:	4618      	mov	r0, r3
 8005b34:	f7fe f974 	bl	8003e20 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8005b38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b3a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005b3c:	e0f9      	b.n	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_HSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005b3e:	f107 0318 	add.w	r3, r7, #24
 8005b42:	4618      	mov	r0, r3
 8005b44:	f7fe fac6 	bl	80040d4 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8005b48:	69fb      	ldr	r3, [r7, #28]
 8005b4a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005b4c:	e0f1      	b.n	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      case RCC_HSPICLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005b4e:	f107 030c 	add.w	r3, r7, #12
 8005b52:	4618      	mov	r0, r3
 8005b54:	f7fe fc18 	bl	8004388 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_R_Frequency;
 8005b58:	697b      	ldr	r3, [r7, #20]
 8005b5a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005b5c:	e0e9      	b.n	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 8005b5e:	2300      	movs	r3, #0
 8005b60:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005b62:	e0e6      	b.n	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 8005b64:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b68:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 8005b6c:	430b      	orrs	r3, r1
 8005b6e:	d131      	bne.n	8005bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1598>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 8005b70:	4b34      	ldr	r3, [pc, #208]	@ (8005c44 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 8005b72:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005b76:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005b7a:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 8005b7c:	4b31      	ldr	r3, [pc, #196]	@ (8005c44 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 8005b7e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005b82:	f003 0302 	and.w	r3, r3, #2
 8005b86:	2b02      	cmp	r3, #2
 8005b88:	d106      	bne.n	8005b98 <HAL_RCCEx_GetPeriphCLKFreq+0x155c>
 8005b8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d103      	bne.n	8005b98 <HAL_RCCEx_GetPeriphCLKFreq+0x155c>
    {
      frequency = LSE_VALUE;
 8005b90:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005b94:	637b      	str	r3, [r7, #52]	@ 0x34
 8005b96:	e0cc      	b.n	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 8005b98:	4b2a      	ldr	r3, [pc, #168]	@ (8005c44 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 8005b9a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005b9e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005ba2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005ba6:	d112      	bne.n	8005bce <HAL_RCCEx_GetPeriphCLKFreq+0x1592>
 8005ba8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005baa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005bae:	d10e      	bne.n	8005bce <HAL_RCCEx_GetPeriphCLKFreq+0x1592>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005bb0:	4b24      	ldr	r3, [pc, #144]	@ (8005c44 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 8005bb2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005bb6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005bba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005bbe:	d102      	bne.n	8005bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
      {
        frequency = LSI_VALUE / 128U;
 8005bc0:	23fa      	movs	r3, #250	@ 0xfa
 8005bc2:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005bc4:	e0b5      	b.n	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 8005bc6:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8005bca:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005bcc:	e0b1      	b.n	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 8005bce:	2300      	movs	r3, #0
 8005bd0:	637b      	str	r3, [r7, #52]	@ 0x34
 8005bd2:	e0ae      	b.n	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 8005bd4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005bd8:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8005bdc:	430b      	orrs	r3, r1
 8005bde:	d13b      	bne.n	8005c58 <HAL_RCCEx_GetPeriphCLKFreq+0x161c>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8005be0:	4b18      	ldr	r3, [pc, #96]	@ (8005c44 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 8005be2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005be6:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8005bea:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8005bec:	4b15      	ldr	r3, [pc, #84]	@ (8005c44 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005bf4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005bf8:	d105      	bne.n	8005c06 <HAL_RCCEx_GetPeriphCLKFreq+0x15ca>
 8005bfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d102      	bne.n	8005c06 <HAL_RCCEx_GetPeriphCLKFreq+0x15ca>
    {
      frequency = HSI48_VALUE;
 8005c00:	4b13      	ldr	r3, [pc, #76]	@ (8005c50 <HAL_RCCEx_GetPeriphCLKFreq+0x1614>)
 8005c02:	637b      	str	r3, [r7, #52]	@ 0x34
 8005c04:	e095      	b.n	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 8005c06:	4b0f      	ldr	r3, [pc, #60]	@ (8005c44 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005c0e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c12:	d106      	bne.n	8005c22 <HAL_RCCEx_GetPeriphCLKFreq+0x15e6>
 8005c14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c16:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c1a:	d102      	bne.n	8005c22 <HAL_RCCEx_GetPeriphCLKFreq+0x15e6>
    {
      frequency = HSI48_VALUE >> 1U ;
 8005c1c:	4b0d      	ldr	r3, [pc, #52]	@ (8005c54 <HAL_RCCEx_GetPeriphCLKFreq+0x1618>)
 8005c1e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005c20:	e087      	b.n	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 8005c22:	4b08      	ldr	r3, [pc, #32]	@ (8005c44 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c2a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c2e:	d106      	bne.n	8005c3e <HAL_RCCEx_GetPeriphCLKFreq+0x1602>
 8005c30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c32:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c36:	d102      	bne.n	8005c3e <HAL_RCCEx_GetPeriphCLKFreq+0x1602>
    {
      frequency = HSI_VALUE;
 8005c38:	4b03      	ldr	r3, [pc, #12]	@ (8005c48 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 8005c3a:	637b      	str	r3, [r7, #52]	@ 0x34
 8005c3c:	e079      	b.n	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 8005c3e:	2300      	movs	r3, #0
 8005c40:	637b      	str	r3, [r7, #52]	@ 0x34
 8005c42:	e076      	b.n	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 8005c44:	46020c00 	.word	0x46020c00
 8005c48:	00f42400 	.word	0x00f42400
 8005c4c:	080071a0 	.word	0x080071a0
 8005c50:	02dc6c00 	.word	0x02dc6c00
 8005c54:	016e3600 	.word	0x016e3600
    }
  }
#if defined(LTDC)
  else if (PeriphClk == RCC_PERIPHCLK_LTDC)
 8005c58:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005c5c:	1e99      	subs	r1, r3, #2
 8005c5e:	ea52 0301 	orrs.w	r3, r2, r1
 8005c62:	d120      	bne.n	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x166a>
  {
    /* Get the current LTDC kernel source */
    srcclk = __HAL_RCC_GET_LTDC_SOURCE();
 8005c64:	4b35      	ldr	r3, [pc, #212]	@ (8005d3c <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 8005c66:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005c6a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005c6e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8005c70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d004      	beq.n	8005c80 <HAL_RCCEx_GetPeriphCLKFreq+0x1644>
 8005c76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c78:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005c7c:	d008      	beq.n	8005c90 <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
 8005c7e:	e00f      	b.n	8005ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x1664>
    {
      case RCC_LTDCCLKSOURCE_PLL3:  /* PLL3R is the clock source for LTDC */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005c80:	f107 030c 	add.w	r3, r7, #12
 8005c84:	4618      	mov	r0, r3
 8005c86:	f7fe fb7f 	bl	8004388 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_R_Frequency;
 8005c8a:	697b      	ldr	r3, [r7, #20]
 8005c8c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005c8e:	e050      	b.n	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_LTDCCLKSOURCE_PLL2:  /* PLL2R is the clock source for LTDC */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005c90:	f107 0318 	add.w	r3, r7, #24
 8005c94:	4618      	mov	r0, r3
 8005c96:	f7fe fa1d 	bl	80040d4 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_R_Frequency;
 8005c9a:	6a3b      	ldr	r3, [r7, #32]
 8005c9c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005c9e:	e048      	b.n	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005ca4:	e045      	b.n	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
  }
#endif /* defined(LTDC) */

#if defined(USB_OTG_HS)

  else if (PeriphClk == RCC_PERIPHCLK_USBPHY)
 8005ca6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005caa:	f1a3 0108 	sub.w	r1, r3, #8
 8005cae:	ea52 0301 	orrs.w	r3, r2, r1
 8005cb2:	d13c      	bne.n	8005d2e <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
  {
    /* Get the current USB_OTG_HS kernel source */
    srcclk = __HAL_RCC_GET_USBPHY_SOURCE();
 8005cb4:	4b21      	ldr	r3, [pc, #132]	@ (8005d3c <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 8005cb6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005cba:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8005cbe:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE))
 8005cc0:	4b1e      	ldr	r3, [pc, #120]	@ (8005d3c <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005cc8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005ccc:	d105      	bne.n	8005cda <HAL_RCCEx_GetPeriphCLKFreq+0x169e>
 8005cce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d102      	bne.n	8005cda <HAL_RCCEx_GetPeriphCLKFreq+0x169e>
    {
      frequency = HSE_VALUE;
 8005cd4:	4b1a      	ldr	r3, [pc, #104]	@ (8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0x1704>)
 8005cd6:	637b      	str	r3, [r7, #52]	@ 0x34
 8005cd8:	e02b      	b.n	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE_DIV2))
 8005cda:	4b18      	ldr	r3, [pc, #96]	@ (8005d3c <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ce2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005ce6:	d106      	bne.n	8005cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x16ba>
 8005ce8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cea:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005cee:	d102      	bne.n	8005cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x16ba>
    {
      frequency = HSE_VALUE >> 1U ;
 8005cf0:	4b14      	ldr	r3, [pc, #80]	@ (8005d44 <HAL_RCCEx_GetPeriphCLKFreq+0x1708>)
 8005cf2:	637b      	str	r3, [r7, #52]	@ 0x34
 8005cf4:	e01d      	b.n	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1) /* PLL1P */
 8005cf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cf8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005cfc:	d107      	bne.n	8005d0e <HAL_RCCEx_GetPeriphCLKFreq+0x16d2>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005cfe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005d02:	4618      	mov	r0, r3
 8005d04:	f7fe f88c 	bl	8003e20 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8005d08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d0a:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d0c:	e011      	b.n	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1_DIV2) /* PLL1P_DIV2 */
 8005d0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d10:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8005d14:	d108      	bne.n	8005d28 <HAL_RCCEx_GetPeriphCLKFreq+0x16ec>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005d16:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	f7fe f880 	bl	8003e20 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = (pll1_clocks.PLL1_P_Frequency) / 2U;
 8005d20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d22:	085b      	lsrs	r3, r3, #1
 8005d24:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d26:	e004      	b.n	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USB_OTG_HS */
    else
    {
      frequency = 0U;
 8005d28:	2300      	movs	r3, #0
 8005d2a:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d2c:	e001      	b.n	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 8005d2e:	2300      	movs	r3, #0
 8005d30:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  return (frequency);
 8005d32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8005d34:	4618      	mov	r0, r3
 8005d36:	3738      	adds	r7, #56	@ 0x38
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	bd80      	pop	{r7, pc}
 8005d3c:	46020c00 	.word	0x46020c00
 8005d40:	00f42400 	.word	0x00f42400
 8005d44:	007a1200 	.word	0x007a1200

08005d48 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b084      	sub	sp, #16
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 8005d50:	4b47      	ldr	r3, [pc, #284]	@ (8005e70 <RCCEx_PLL2_Config+0x128>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4a46      	ldr	r2, [pc, #280]	@ (8005e70 <RCCEx_PLL2_Config+0x128>)
 8005d56:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005d5a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005d5c:	f7fb f8ba 	bl	8000ed4 <HAL_GetTick>
 8005d60:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005d62:	e008      	b.n	8005d76 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005d64:	f7fb f8b6 	bl	8000ed4 <HAL_GetTick>
 8005d68:	4602      	mov	r2, r0
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	1ad3      	subs	r3, r2, r3
 8005d6e:	2b02      	cmp	r3, #2
 8005d70:	d901      	bls.n	8005d76 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8005d72:	2303      	movs	r3, #3
 8005d74:	e077      	b.n	8005e66 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005d76:	4b3e      	ldr	r3, [pc, #248]	@ (8005e70 <RCCEx_PLL2_Config+0x128>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d1f0      	bne.n	8005d64 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8005d82:	4b3b      	ldr	r3, [pc, #236]	@ (8005e70 <RCCEx_PLL2_Config+0x128>)
 8005d84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d86:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005d8a:	f023 0303 	bic.w	r3, r3, #3
 8005d8e:	687a      	ldr	r2, [r7, #4]
 8005d90:	6811      	ldr	r1, [r2, #0]
 8005d92:	687a      	ldr	r2, [r7, #4]
 8005d94:	6852      	ldr	r2, [r2, #4]
 8005d96:	3a01      	subs	r2, #1
 8005d98:	0212      	lsls	r2, r2, #8
 8005d9a:	430a      	orrs	r2, r1
 8005d9c:	4934      	ldr	r1, [pc, #208]	@ (8005e70 <RCCEx_PLL2_Config+0x128>)
 8005d9e:	4313      	orrs	r3, r2
 8005da0:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8005da2:	4b33      	ldr	r3, [pc, #204]	@ (8005e70 <RCCEx_PLL2_Config+0x128>)
 8005da4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005da6:	4b33      	ldr	r3, [pc, #204]	@ (8005e74 <RCCEx_PLL2_Config+0x12c>)
 8005da8:	4013      	ands	r3, r2
 8005daa:	687a      	ldr	r2, [r7, #4]
 8005dac:	6892      	ldr	r2, [r2, #8]
 8005dae:	3a01      	subs	r2, #1
 8005db0:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8005db4:	687a      	ldr	r2, [r7, #4]
 8005db6:	68d2      	ldr	r2, [r2, #12]
 8005db8:	3a01      	subs	r2, #1
 8005dba:	0252      	lsls	r2, r2, #9
 8005dbc:	b292      	uxth	r2, r2
 8005dbe:	4311      	orrs	r1, r2
 8005dc0:	687a      	ldr	r2, [r7, #4]
 8005dc2:	6912      	ldr	r2, [r2, #16]
 8005dc4:	3a01      	subs	r2, #1
 8005dc6:	0412      	lsls	r2, r2, #16
 8005dc8:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8005dcc:	4311      	orrs	r1, r2
 8005dce:	687a      	ldr	r2, [r7, #4]
 8005dd0:	6952      	ldr	r2, [r2, #20]
 8005dd2:	3a01      	subs	r2, #1
 8005dd4:	0612      	lsls	r2, r2, #24
 8005dd6:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8005dda:	430a      	orrs	r2, r1
 8005ddc:	4924      	ldr	r1, [pc, #144]	@ (8005e70 <RCCEx_PLL2_Config+0x128>)
 8005dde:	4313      	orrs	r3, r2
 8005de0:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8005de2:	4b23      	ldr	r3, [pc, #140]	@ (8005e70 <RCCEx_PLL2_Config+0x128>)
 8005de4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005de6:	f023 020c 	bic.w	r2, r3, #12
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	699b      	ldr	r3, [r3, #24]
 8005dee:	4920      	ldr	r1, [pc, #128]	@ (8005e70 <RCCEx_PLL2_Config+0x128>)
 8005df0:	4313      	orrs	r3, r2
 8005df2:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8005df4:	4b1e      	ldr	r3, [pc, #120]	@ (8005e70 <RCCEx_PLL2_Config+0x128>)
 8005df6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6a1b      	ldr	r3, [r3, #32]
 8005dfc:	491c      	ldr	r1, [pc, #112]	@ (8005e70 <RCCEx_PLL2_Config+0x128>)
 8005dfe:	4313      	orrs	r3, r2
 8005e00:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 8005e02:	4b1b      	ldr	r3, [pc, #108]	@ (8005e70 <RCCEx_PLL2_Config+0x128>)
 8005e04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e06:	4a1a      	ldr	r2, [pc, #104]	@ (8005e70 <RCCEx_PLL2_Config+0x128>)
 8005e08:	f023 0310 	bic.w	r3, r3, #16
 8005e0c:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005e0e:	4b18      	ldr	r3, [pc, #96]	@ (8005e70 <RCCEx_PLL2_Config+0x128>)
 8005e10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e12:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005e16:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8005e1a:	687a      	ldr	r2, [r7, #4]
 8005e1c:	69d2      	ldr	r2, [r2, #28]
 8005e1e:	00d2      	lsls	r2, r2, #3
 8005e20:	4913      	ldr	r1, [pc, #76]	@ (8005e70 <RCCEx_PLL2_Config+0x128>)
 8005e22:	4313      	orrs	r3, r2
 8005e24:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 8005e26:	4b12      	ldr	r3, [pc, #72]	@ (8005e70 <RCCEx_PLL2_Config+0x128>)
 8005e28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e2a:	4a11      	ldr	r2, [pc, #68]	@ (8005e70 <RCCEx_PLL2_Config+0x128>)
 8005e2c:	f043 0310 	orr.w	r3, r3, #16
 8005e30:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 8005e32:	4b0f      	ldr	r3, [pc, #60]	@ (8005e70 <RCCEx_PLL2_Config+0x128>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	4a0e      	ldr	r2, [pc, #56]	@ (8005e70 <RCCEx_PLL2_Config+0x128>)
 8005e38:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005e3c:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005e3e:	f7fb f849 	bl	8000ed4 <HAL_GetTick>
 8005e42:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005e44:	e008      	b.n	8005e58 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005e46:	f7fb f845 	bl	8000ed4 <HAL_GetTick>
 8005e4a:	4602      	mov	r2, r0
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	1ad3      	subs	r3, r2, r3
 8005e50:	2b02      	cmp	r3, #2
 8005e52:	d901      	bls.n	8005e58 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8005e54:	2303      	movs	r3, #3
 8005e56:	e006      	b.n	8005e66 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005e58:	4b05      	ldr	r3, [pc, #20]	@ (8005e70 <RCCEx_PLL2_Config+0x128>)
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d0f0      	beq.n	8005e46 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8005e64:	2300      	movs	r3, #0

}
 8005e66:	4618      	mov	r0, r3
 8005e68:	3710      	adds	r7, #16
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bd80      	pop	{r7, pc}
 8005e6e:	bf00      	nop
 8005e70:	46020c00 	.word	0x46020c00
 8005e74:	80800000 	.word	0x80800000

08005e78 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b084      	sub	sp, #16
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8005e80:	4b47      	ldr	r3, [pc, #284]	@ (8005fa0 <RCCEx_PLL3_Config+0x128>)
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	4a46      	ldr	r2, [pc, #280]	@ (8005fa0 <RCCEx_PLL3_Config+0x128>)
 8005e86:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005e8a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005e8c:	f7fb f822 	bl	8000ed4 <HAL_GetTick>
 8005e90:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005e92:	e008      	b.n	8005ea6 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005e94:	f7fb f81e 	bl	8000ed4 <HAL_GetTick>
 8005e98:	4602      	mov	r2, r0
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	1ad3      	subs	r3, r2, r3
 8005e9e:	2b02      	cmp	r3, #2
 8005ea0:	d901      	bls.n	8005ea6 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8005ea2:	2303      	movs	r3, #3
 8005ea4:	e077      	b.n	8005f96 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005ea6:	4b3e      	ldr	r3, [pc, #248]	@ (8005fa0 <RCCEx_PLL3_Config+0x128>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d1f0      	bne.n	8005e94 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8005eb2:	4b3b      	ldr	r3, [pc, #236]	@ (8005fa0 <RCCEx_PLL3_Config+0x128>)
 8005eb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005eb6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005eba:	f023 0303 	bic.w	r3, r3, #3
 8005ebe:	687a      	ldr	r2, [r7, #4]
 8005ec0:	6811      	ldr	r1, [r2, #0]
 8005ec2:	687a      	ldr	r2, [r7, #4]
 8005ec4:	6852      	ldr	r2, [r2, #4]
 8005ec6:	3a01      	subs	r2, #1
 8005ec8:	0212      	lsls	r2, r2, #8
 8005eca:	430a      	orrs	r2, r1
 8005ecc:	4934      	ldr	r1, [pc, #208]	@ (8005fa0 <RCCEx_PLL3_Config+0x128>)
 8005ece:	4313      	orrs	r3, r2
 8005ed0:	630b      	str	r3, [r1, #48]	@ 0x30
 8005ed2:	4b33      	ldr	r3, [pc, #204]	@ (8005fa0 <RCCEx_PLL3_Config+0x128>)
 8005ed4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005ed6:	4b33      	ldr	r3, [pc, #204]	@ (8005fa4 <RCCEx_PLL3_Config+0x12c>)
 8005ed8:	4013      	ands	r3, r2
 8005eda:	687a      	ldr	r2, [r7, #4]
 8005edc:	6892      	ldr	r2, [r2, #8]
 8005ede:	3a01      	subs	r2, #1
 8005ee0:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8005ee4:	687a      	ldr	r2, [r7, #4]
 8005ee6:	68d2      	ldr	r2, [r2, #12]
 8005ee8:	3a01      	subs	r2, #1
 8005eea:	0252      	lsls	r2, r2, #9
 8005eec:	b292      	uxth	r2, r2
 8005eee:	4311      	orrs	r1, r2
 8005ef0:	687a      	ldr	r2, [r7, #4]
 8005ef2:	6912      	ldr	r2, [r2, #16]
 8005ef4:	3a01      	subs	r2, #1
 8005ef6:	0412      	lsls	r2, r2, #16
 8005ef8:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8005efc:	4311      	orrs	r1, r2
 8005efe:	687a      	ldr	r2, [r7, #4]
 8005f00:	6952      	ldr	r2, [r2, #20]
 8005f02:	3a01      	subs	r2, #1
 8005f04:	0612      	lsls	r2, r2, #24
 8005f06:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8005f0a:	430a      	orrs	r2, r1
 8005f0c:	4924      	ldr	r1, [pc, #144]	@ (8005fa0 <RCCEx_PLL3_Config+0x128>)
 8005f0e:	4313      	orrs	r3, r2
 8005f10:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 8005f12:	4b23      	ldr	r3, [pc, #140]	@ (8005fa0 <RCCEx_PLL3_Config+0x128>)
 8005f14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f16:	f023 020c 	bic.w	r2, r3, #12
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	699b      	ldr	r3, [r3, #24]
 8005f1e:	4920      	ldr	r1, [pc, #128]	@ (8005fa0 <RCCEx_PLL3_Config+0x128>)
 8005f20:	4313      	orrs	r3, r2
 8005f22:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8005f24:	4b1e      	ldr	r3, [pc, #120]	@ (8005fa0 <RCCEx_PLL3_Config+0x128>)
 8005f26:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6a1b      	ldr	r3, [r3, #32]
 8005f2c:	491c      	ldr	r1, [pc, #112]	@ (8005fa0 <RCCEx_PLL3_Config+0x128>)
 8005f2e:	4313      	orrs	r3, r2
 8005f30:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 8005f32:	4b1b      	ldr	r3, [pc, #108]	@ (8005fa0 <RCCEx_PLL3_Config+0x128>)
 8005f34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f36:	4a1a      	ldr	r2, [pc, #104]	@ (8005fa0 <RCCEx_PLL3_Config+0x128>)
 8005f38:	f023 0310 	bic.w	r3, r3, #16
 8005f3c:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005f3e:	4b18      	ldr	r3, [pc, #96]	@ (8005fa0 <RCCEx_PLL3_Config+0x128>)
 8005f40:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005f42:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005f46:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8005f4a:	687a      	ldr	r2, [r7, #4]
 8005f4c:	69d2      	ldr	r2, [r2, #28]
 8005f4e:	00d2      	lsls	r2, r2, #3
 8005f50:	4913      	ldr	r1, [pc, #76]	@ (8005fa0 <RCCEx_PLL3_Config+0x128>)
 8005f52:	4313      	orrs	r3, r2
 8005f54:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 8005f56:	4b12      	ldr	r3, [pc, #72]	@ (8005fa0 <RCCEx_PLL3_Config+0x128>)
 8005f58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f5a:	4a11      	ldr	r2, [pc, #68]	@ (8005fa0 <RCCEx_PLL3_Config+0x128>)
 8005f5c:	f043 0310 	orr.w	r3, r3, #16
 8005f60:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 8005f62:	4b0f      	ldr	r3, [pc, #60]	@ (8005fa0 <RCCEx_PLL3_Config+0x128>)
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	4a0e      	ldr	r2, [pc, #56]	@ (8005fa0 <RCCEx_PLL3_Config+0x128>)
 8005f68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005f6c:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005f6e:	f7fa ffb1 	bl	8000ed4 <HAL_GetTick>
 8005f72:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005f74:	e008      	b.n	8005f88 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005f76:	f7fa ffad 	bl	8000ed4 <HAL_GetTick>
 8005f7a:	4602      	mov	r2, r0
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	1ad3      	subs	r3, r2, r3
 8005f80:	2b02      	cmp	r3, #2
 8005f82:	d901      	bls.n	8005f88 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8005f84:	2303      	movs	r3, #3
 8005f86:	e006      	b.n	8005f96 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005f88:	4b05      	ldr	r3, [pc, #20]	@ (8005fa0 <RCCEx_PLL3_Config+0x128>)
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d0f0      	beq.n	8005f76 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8005f94:	2300      	movs	r3, #0
}
 8005f96:	4618      	mov	r0, r3
 8005f98:	3710      	adds	r7, #16
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	bd80      	pop	{r7, pc}
 8005f9e:	bf00      	nop
 8005fa0:	46020c00 	.word	0x46020c00
 8005fa4:	80800000 	.word	0x80800000

08005fa8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b082      	sub	sp, #8
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d101      	bne.n	8005fba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	e042      	b.n	8006040 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d106      	bne.n	8005fd2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005fcc:	6878      	ldr	r0, [r7, #4]
 8005fce:	f7fa fe1b 	bl	8000c08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2224      	movs	r2, #36	@ 0x24
 8005fd6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	681a      	ldr	r2, [r3, #0]
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f022 0201 	bic.w	r2, r2, #1
 8005fe8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d002      	beq.n	8005ff8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005ff2:	6878      	ldr	r0, [r7, #4]
 8005ff4:	f000 fd1c 	bl	8006a30 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005ff8:	6878      	ldr	r0, [r7, #4]
 8005ffa:	f000 fb6b 	bl	80066d4 <UART_SetConfig>
 8005ffe:	4603      	mov	r3, r0
 8006000:	2b01      	cmp	r3, #1
 8006002:	d101      	bne.n	8006008 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006004:	2301      	movs	r3, #1
 8006006:	e01b      	b.n	8006040 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	685a      	ldr	r2, [r3, #4]
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006016:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	689a      	ldr	r2, [r3, #8]
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006026:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	681a      	ldr	r2, [r3, #0]
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f042 0201 	orr.w	r2, r2, #1
 8006036:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006038:	6878      	ldr	r0, [r7, #4]
 800603a:	f000 fd9b 	bl	8006b74 <UART_CheckIdleState>
 800603e:	4603      	mov	r3, r0
}
 8006040:	4618      	mov	r0, r3
 8006042:	3708      	adds	r7, #8
 8006044:	46bd      	mov	sp, r7
 8006046:	bd80      	pop	{r7, pc}

08006048 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b0ba      	sub	sp, #232	@ 0xe8
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	69db      	ldr	r3, [r3, #28]
 8006056:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	689b      	ldr	r3, [r3, #8]
 800606a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800606e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8006072:	f640 030f 	movw	r3, #2063	@ 0x80f
 8006076:	4013      	ands	r3, r2
 8006078:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800607c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006080:	2b00      	cmp	r3, #0
 8006082:	d11b      	bne.n	80060bc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006084:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006088:	f003 0320 	and.w	r3, r3, #32
 800608c:	2b00      	cmp	r3, #0
 800608e:	d015      	beq.n	80060bc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006090:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006094:	f003 0320 	and.w	r3, r3, #32
 8006098:	2b00      	cmp	r3, #0
 800609a:	d105      	bne.n	80060a8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800609c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80060a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d009      	beq.n	80060bc <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	f000 82e5 	beq.w	800667c <HAL_UART_IRQHandler+0x634>
      {
        huart->RxISR(huart);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80060b6:	6878      	ldr	r0, [r7, #4]
 80060b8:	4798      	blx	r3
      }
      return;
 80060ba:	e2df      	b.n	800667c <HAL_UART_IRQHandler+0x634>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80060bc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	f000 8123 	beq.w	800630c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80060c6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80060ca:	4b8d      	ldr	r3, [pc, #564]	@ (8006300 <HAL_UART_IRQHandler+0x2b8>)
 80060cc:	4013      	ands	r3, r2
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d106      	bne.n	80060e0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80060d2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80060d6:	4b8b      	ldr	r3, [pc, #556]	@ (8006304 <HAL_UART_IRQHandler+0x2bc>)
 80060d8:	4013      	ands	r3, r2
 80060da:	2b00      	cmp	r3, #0
 80060dc:	f000 8116 	beq.w	800630c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80060e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80060e4:	f003 0301 	and.w	r3, r3, #1
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d011      	beq.n	8006110 <HAL_UART_IRQHandler+0xc8>
 80060ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80060f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d00b      	beq.n	8006110 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	2201      	movs	r2, #1
 80060fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006106:	f043 0201 	orr.w	r2, r3, #1
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006110:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006114:	f003 0302 	and.w	r3, r3, #2
 8006118:	2b00      	cmp	r3, #0
 800611a:	d011      	beq.n	8006140 <HAL_UART_IRQHandler+0xf8>
 800611c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006120:	f003 0301 	and.w	r3, r3, #1
 8006124:	2b00      	cmp	r3, #0
 8006126:	d00b      	beq.n	8006140 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	2202      	movs	r2, #2
 800612e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006136:	f043 0204 	orr.w	r2, r3, #4
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006140:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006144:	f003 0304 	and.w	r3, r3, #4
 8006148:	2b00      	cmp	r3, #0
 800614a:	d011      	beq.n	8006170 <HAL_UART_IRQHandler+0x128>
 800614c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006150:	f003 0301 	and.w	r3, r3, #1
 8006154:	2b00      	cmp	r3, #0
 8006156:	d00b      	beq.n	8006170 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	2204      	movs	r2, #4
 800615e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006166:	f043 0202 	orr.w	r2, r3, #2
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006170:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006174:	f003 0308 	and.w	r3, r3, #8
 8006178:	2b00      	cmp	r3, #0
 800617a:	d017      	beq.n	80061ac <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800617c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006180:	f003 0320 	and.w	r3, r3, #32
 8006184:	2b00      	cmp	r3, #0
 8006186:	d105      	bne.n	8006194 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006188:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800618c:	4b5c      	ldr	r3, [pc, #368]	@ (8006300 <HAL_UART_IRQHandler+0x2b8>)
 800618e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006190:	2b00      	cmp	r3, #0
 8006192:	d00b      	beq.n	80061ac <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	2208      	movs	r2, #8
 800619a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80061a2:	f043 0208 	orr.w	r2, r3, #8
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80061ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80061b0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d012      	beq.n	80061de <HAL_UART_IRQHandler+0x196>
 80061b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80061bc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d00c      	beq.n	80061de <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80061cc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80061d4:	f043 0220 	orr.w	r2, r3, #32
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	f000 824b 	beq.w	8006680 <HAL_UART_IRQHandler+0x638>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80061ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80061ee:	f003 0320 	and.w	r3, r3, #32
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d013      	beq.n	800621e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80061f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80061fa:	f003 0320 	and.w	r3, r3, #32
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d105      	bne.n	800620e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006202:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006206:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800620a:	2b00      	cmp	r3, #0
 800620c:	d007      	beq.n	800621e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006212:	2b00      	cmp	r3, #0
 8006214:	d003      	beq.n	800621e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006224:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	689b      	ldr	r3, [r3, #8]
 800622e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006232:	2b40      	cmp	r3, #64	@ 0x40
 8006234:	d005      	beq.n	8006242 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006236:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800623a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800623e:	2b00      	cmp	r3, #0
 8006240:	d054      	beq.n	80062ec <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006242:	6878      	ldr	r0, [r7, #4]
 8006244:	f000 fdad 	bl	8006da2 <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	689b      	ldr	r3, [r3, #8]
 800624e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006252:	2b40      	cmp	r3, #64	@ 0x40
 8006254:	d146      	bne.n	80062e4 <HAL_UART_IRQHandler+0x29c>
        {
#if !defined(USART_DMAREQUESTS_SW_WA)
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	3308      	adds	r3, #8
 800625c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006260:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006264:	e853 3f00 	ldrex	r3, [r3]
 8006268:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800626c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006270:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006274:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	3308      	adds	r3, #8
 800627e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006282:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006286:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800628a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800628e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006292:	e841 2300 	strex	r3, r2, [r1]
 8006296:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800629a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d1d9      	bne.n	8006256 <HAL_UART_IRQHandler+0x20e>

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d017      	beq.n	80062dc <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80062b2:	4a15      	ldr	r2, [pc, #84]	@ (8006308 <HAL_UART_IRQHandler+0x2c0>)
 80062b4:	66da      	str	r2, [r3, #108]	@ 0x6c

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80062bc:	4618      	mov	r0, r3
 80062be:	f7fb f849 	bl	8001354 <HAL_DMA_Abort_IT>
 80062c2:	4603      	mov	r3, r0
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d019      	beq.n	80062fc <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80062ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80062d0:	687a      	ldr	r2, [r7, #4]
 80062d2:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80062d6:	4610      	mov	r0, r2
 80062d8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062da:	e00f      	b.n	80062fc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80062dc:	6878      	ldr	r0, [r7, #4]
 80062de:	f000 f9e3 	bl	80066a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062e2:	e00b      	b.n	80062fc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80062e4:	6878      	ldr	r0, [r7, #4]
 80062e6:	f000 f9df 	bl	80066a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062ea:	e007      	b.n	80062fc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80062ec:	6878      	ldr	r0, [r7, #4]
 80062ee:	f000 f9db 	bl	80066a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2200      	movs	r2, #0
 80062f6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80062fa:	e1c1      	b.n	8006680 <HAL_UART_IRQHandler+0x638>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062fc:	bf00      	nop
    return;
 80062fe:	e1bf      	b.n	8006680 <HAL_UART_IRQHandler+0x638>
 8006300:	10000001 	.word	0x10000001
 8006304:	04000120 	.word	0x04000120
 8006308:	08006e6f 	.word	0x08006e6f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006310:	2b01      	cmp	r3, #1
 8006312:	f040 816a 	bne.w	80065ea <HAL_UART_IRQHandler+0x5a2>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006316:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800631a:	f003 0310 	and.w	r3, r3, #16
 800631e:	2b00      	cmp	r3, #0
 8006320:	f000 8163 	beq.w	80065ea <HAL_UART_IRQHandler+0x5a2>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006324:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006328:	f003 0310 	and.w	r3, r3, #16
 800632c:	2b00      	cmp	r3, #0
 800632e:	f000 815c 	beq.w	80065ea <HAL_UART_IRQHandler+0x5a2>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	2210      	movs	r2, #16
 8006338:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	689b      	ldr	r3, [r3, #8]
 8006340:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006344:	2b40      	cmp	r3, #64	@ 0x40
 8006346:	f040 80d2 	bne.w	80064ee <HAL_UART_IRQHandler+0x4a6>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006354:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006358:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800635c:	2b00      	cmp	r3, #0
 800635e:	f000 80ac 	beq.w	80064ba <HAL_UART_IRQHandler+0x472>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006368:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800636c:	429a      	cmp	r2, r3
 800636e:	f080 80a4 	bcs.w	80064ba <HAL_UART_IRQHandler+0x472>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006378:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Mode != DMA_LINKEDLIST_CIRCULAR)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006382:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006384:	2b81      	cmp	r3, #129	@ 0x81
 8006386:	f000 8087 	beq.w	8006498 <HAL_UART_IRQHandler+0x450>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006392:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006396:	e853 3f00 	ldrex	r3, [r3]
 800639a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800639e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80063a2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80063a6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	461a      	mov	r2, r3
 80063b0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80063b4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80063b8:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063bc:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80063c0:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80063c4:	e841 2300 	strex	r3, r2, [r1]
 80063c8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80063cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d1da      	bne.n	800638a <HAL_UART_IRQHandler+0x342>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	3308      	adds	r3, #8
 80063da:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063dc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80063de:	e853 3f00 	ldrex	r3, [r3]
 80063e2:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80063e4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80063e6:	f023 0301 	bic.w	r3, r3, #1
 80063ea:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	3308      	adds	r3, #8
 80063f4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80063f8:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80063fc:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063fe:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006400:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006404:	e841 2300 	strex	r3, r2, [r1]
 8006408:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800640a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800640c:	2b00      	cmp	r3, #0
 800640e:	d1e1      	bne.n	80063d4 <HAL_UART_IRQHandler+0x38c>

#if !defined(USART_DMAREQUESTS_SW_WA)
          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	3308      	adds	r3, #8
 8006416:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006418:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800641a:	e853 3f00 	ldrex	r3, [r3]
 800641e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006420:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006422:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006426:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	3308      	adds	r3, #8
 8006430:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006434:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006436:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006438:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800643a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800643c:	e841 2300 	strex	r3, r2, [r1]
 8006440:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006442:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006444:	2b00      	cmp	r3, #0
 8006446:	d1e3      	bne.n	8006410 <HAL_UART_IRQHandler+0x3c8>

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2220      	movs	r2, #32
 800644c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2200      	movs	r2, #0
 8006454:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800645c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800645e:	e853 3f00 	ldrex	r3, [r3]
 8006462:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006464:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006466:	f023 0310 	bic.w	r3, r3, #16
 800646a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	461a      	mov	r2, r3
 8006474:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006478:	65bb      	str	r3, [r7, #88]	@ 0x58
 800647a:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800647c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800647e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006480:	e841 2300 	strex	r3, r2, [r1]
 8006484:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006486:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006488:	2b00      	cmp	r3, #0
 800648a:	d1e4      	bne.n	8006456 <HAL_UART_IRQHandler+0x40e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006492:	4618      	mov	r0, r3
 8006494:	f7fa fee2 	bl	800125c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2202      	movs	r2, #2
 800649c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80064aa:	b29b      	uxth	r3, r3
 80064ac:	1ad3      	subs	r3, r2, r3
 80064ae:	b29b      	uxth	r3, r3
 80064b0:	4619      	mov	r1, r3
 80064b2:	6878      	ldr	r0, [r7, #4]
 80064b4:	f000 f902 	bl	80066bc <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80064b8:	e0e4      	b.n	8006684 <HAL_UART_IRQHandler+0x63c>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80064c0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80064c4:	429a      	cmp	r2, r3
 80064c6:	f040 80dd 	bne.w	8006684 <HAL_UART_IRQHandler+0x63c>
          if (huart->hdmarx->Mode == DMA_LINKEDLIST_CIRCULAR)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80064d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80064d2:	2b81      	cmp	r3, #129	@ 0x81
 80064d4:	f040 80d6 	bne.w	8006684 <HAL_UART_IRQHandler+0x63c>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2202      	movs	r2, #2
 80064dc:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80064e4:	4619      	mov	r1, r3
 80064e6:	6878      	ldr	r0, [r7, #4]
 80064e8:	f000 f8e8 	bl	80066bc <HAL_UARTEx_RxEventCallback>
      return;
 80064ec:	e0ca      	b.n	8006684 <HAL_UART_IRQHandler+0x63c>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80064fa:	b29b      	uxth	r3, r3
 80064fc:	1ad3      	subs	r3, r2, r3
 80064fe:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006508:	b29b      	uxth	r3, r3
 800650a:	2b00      	cmp	r3, #0
 800650c:	f000 80bc 	beq.w	8006688 <HAL_UART_IRQHandler+0x640>
          && (nb_rx_data > 0U))
 8006510:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006514:	2b00      	cmp	r3, #0
 8006516:	f000 80b7 	beq.w	8006688 <HAL_UART_IRQHandler+0x640>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006520:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006522:	e853 3f00 	ldrex	r3, [r3]
 8006526:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006528:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800652a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800652e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	461a      	mov	r2, r3
 8006538:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800653c:	647b      	str	r3, [r7, #68]	@ 0x44
 800653e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006540:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006542:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006544:	e841 2300 	strex	r3, r2, [r1]
 8006548:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800654a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800654c:	2b00      	cmp	r3, #0
 800654e:	d1e4      	bne.n	800651a <HAL_UART_IRQHandler+0x4d2>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	3308      	adds	r3, #8
 8006556:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006558:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800655a:	e853 3f00 	ldrex	r3, [r3]
 800655e:	623b      	str	r3, [r7, #32]
   return(result);
 8006560:	6a3b      	ldr	r3, [r7, #32]
 8006562:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006566:	f023 0301 	bic.w	r3, r3, #1
 800656a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	3308      	adds	r3, #8
 8006574:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006578:	633a      	str	r2, [r7, #48]	@ 0x30
 800657a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800657c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800657e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006580:	e841 2300 	strex	r3, r2, [r1]
 8006584:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006586:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006588:	2b00      	cmp	r3, #0
 800658a:	d1e1      	bne.n	8006550 <HAL_UART_IRQHandler+0x508>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2220      	movs	r2, #32
 8006590:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2200      	movs	r2, #0
 8006598:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2200      	movs	r2, #0
 800659e:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065a6:	693b      	ldr	r3, [r7, #16]
 80065a8:	e853 3f00 	ldrex	r3, [r3]
 80065ac:	60fb      	str	r3, [r7, #12]
   return(result);
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	f023 0310 	bic.w	r3, r3, #16
 80065b4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	461a      	mov	r2, r3
 80065be:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80065c2:	61fb      	str	r3, [r7, #28]
 80065c4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065c6:	69b9      	ldr	r1, [r7, #24]
 80065c8:	69fa      	ldr	r2, [r7, #28]
 80065ca:	e841 2300 	strex	r3, r2, [r1]
 80065ce:	617b      	str	r3, [r7, #20]
   return(result);
 80065d0:	697b      	ldr	r3, [r7, #20]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d1e4      	bne.n	80065a0 <HAL_UART_IRQHandler+0x558>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2202      	movs	r2, #2
 80065da:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80065dc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80065e0:	4619      	mov	r1, r3
 80065e2:	6878      	ldr	r0, [r7, #4]
 80065e4:	f000 f86a 	bl	80066bc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80065e8:	e04e      	b.n	8006688 <HAL_UART_IRQHandler+0x640>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80065ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80065ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d014      	beq.n	8006620 <HAL_UART_IRQHandler+0x5d8>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80065f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80065fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d105      	bne.n	800660e <HAL_UART_IRQHandler+0x5c6>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006602:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006606:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800660a:	2b00      	cmp	r3, #0
 800660c:	d008      	beq.n	8006620 <HAL_UART_IRQHandler+0x5d8>
  {
    if (huart->TxISR != NULL)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006612:	2b00      	cmp	r3, #0
 8006614:	d03a      	beq.n	800668c <HAL_UART_IRQHandler+0x644>
    {
      huart->TxISR(huart);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800661a:	6878      	ldr	r0, [r7, #4]
 800661c:	4798      	blx	r3
    }
    return;
 800661e:	e035      	b.n	800668c <HAL_UART_IRQHandler+0x644>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006620:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006624:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006628:	2b00      	cmp	r3, #0
 800662a:	d009      	beq.n	8006640 <HAL_UART_IRQHandler+0x5f8>
 800662c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006630:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006634:	2b00      	cmp	r3, #0
 8006636:	d003      	beq.n	8006640 <HAL_UART_IRQHandler+0x5f8>
  {
    UART_EndTransmit_IT(huart);
 8006638:	6878      	ldr	r0, [r7, #4]
 800663a:	f000 fc2a 	bl	8006e92 <UART_EndTransmit_IT>
    return;
 800663e:	e026      	b.n	800668e <HAL_UART_IRQHandler+0x646>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006640:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006644:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006648:	2b00      	cmp	r3, #0
 800664a:	d009      	beq.n	8006660 <HAL_UART_IRQHandler+0x618>
 800664c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006650:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006654:	2b00      	cmp	r3, #0
 8006656:	d003      	beq.n	8006660 <HAL_UART_IRQHandler+0x618>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006658:	6878      	ldr	r0, [r7, #4]
 800665a:	f000 fc4f 	bl	8006efc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800665e:	e016      	b.n	800668e <HAL_UART_IRQHandler+0x646>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006660:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006664:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006668:	2b00      	cmp	r3, #0
 800666a:	d010      	beq.n	800668e <HAL_UART_IRQHandler+0x646>
 800666c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006670:	2b00      	cmp	r3, #0
 8006672:	da0c      	bge.n	800668e <HAL_UART_IRQHandler+0x646>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006674:	6878      	ldr	r0, [r7, #4]
 8006676:	f000 fc37 	bl	8006ee8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800667a:	e008      	b.n	800668e <HAL_UART_IRQHandler+0x646>
      return;
 800667c:	bf00      	nop
 800667e:	e006      	b.n	800668e <HAL_UART_IRQHandler+0x646>
    return;
 8006680:	bf00      	nop
 8006682:	e004      	b.n	800668e <HAL_UART_IRQHandler+0x646>
      return;
 8006684:	bf00      	nop
 8006686:	e002      	b.n	800668e <HAL_UART_IRQHandler+0x646>
      return;
 8006688:	bf00      	nop
 800668a:	e000      	b.n	800668e <HAL_UART_IRQHandler+0x646>
    return;
 800668c:	bf00      	nop
  }
}
 800668e:	37e8      	adds	r7, #232	@ 0xe8
 8006690:	46bd      	mov	sp, r7
 8006692:	bd80      	pop	{r7, pc}

08006694 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006694:	b480      	push	{r7}
 8006696:	b083      	sub	sp, #12
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800669c:	bf00      	nop
 800669e:	370c      	adds	r7, #12
 80066a0:	46bd      	mov	sp, r7
 80066a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a6:	4770      	bx	lr

080066a8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80066a8:	b480      	push	{r7}
 80066aa:	b083      	sub	sp, #12
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80066b0:	bf00      	nop
 80066b2:	370c      	adds	r7, #12
 80066b4:	46bd      	mov	sp, r7
 80066b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ba:	4770      	bx	lr

080066bc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80066bc:	b480      	push	{r7}
 80066be:	b083      	sub	sp, #12
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
 80066c4:	460b      	mov	r3, r1
 80066c6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80066c8:	bf00      	nop
 80066ca:	370c      	adds	r7, #12
 80066cc:	46bd      	mov	sp, r7
 80066ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d2:	4770      	bx	lr

080066d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80066d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80066d8:	b094      	sub	sp, #80	@ 0x50
 80066da:	af00      	add	r7, sp, #0
 80066dc:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80066de:	2300      	movs	r3, #0
 80066e0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 80066e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066e6:	681a      	ldr	r2, [r3, #0]
 80066e8:	4b83      	ldr	r3, [pc, #524]	@ (80068f8 <UART_SetConfig+0x224>)
 80066ea:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80066ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066ee:	689a      	ldr	r2, [r3, #8]
 80066f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066f2:	691b      	ldr	r3, [r3, #16]
 80066f4:	431a      	orrs	r2, r3
 80066f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066f8:	695b      	ldr	r3, [r3, #20]
 80066fa:	431a      	orrs	r2, r3
 80066fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066fe:	69db      	ldr	r3, [r3, #28]
 8006700:	4313      	orrs	r3, r2
 8006702:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006704:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	497c      	ldr	r1, [pc, #496]	@ (80068fc <UART_SetConfig+0x228>)
 800670c:	4019      	ands	r1, r3
 800670e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006710:	681a      	ldr	r2, [r3, #0]
 8006712:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006714:	430b      	orrs	r3, r1
 8006716:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006718:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	685b      	ldr	r3, [r3, #4]
 800671e:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006722:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006724:	68d9      	ldr	r1, [r3, #12]
 8006726:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006728:	681a      	ldr	r2, [r3, #0]
 800672a:	ea40 0301 	orr.w	r3, r0, r1
 800672e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006730:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006732:	699b      	ldr	r3, [r3, #24]
 8006734:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006736:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006738:	681a      	ldr	r2, [r3, #0]
 800673a:	4b6f      	ldr	r3, [pc, #444]	@ (80068f8 <UART_SetConfig+0x224>)
 800673c:	429a      	cmp	r2, r3
 800673e:	d009      	beq.n	8006754 <UART_SetConfig+0x80>
 8006740:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006742:	681a      	ldr	r2, [r3, #0]
 8006744:	4b6e      	ldr	r3, [pc, #440]	@ (8006900 <UART_SetConfig+0x22c>)
 8006746:	429a      	cmp	r2, r3
 8006748:	d004      	beq.n	8006754 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800674a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800674c:	6a1a      	ldr	r2, [r3, #32]
 800674e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006750:	4313      	orrs	r3, r2
 8006752:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006754:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	689b      	ldr	r3, [r3, #8]
 800675a:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 800675e:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 8006762:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006764:	681a      	ldr	r2, [r3, #0]
 8006766:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006768:	430b      	orrs	r3, r1
 800676a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800676c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006772:	f023 000f 	bic.w	r0, r3, #15
 8006776:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006778:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800677a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800677c:	681a      	ldr	r2, [r3, #0]
 800677e:	ea40 0301 	orr.w	r3, r0, r1
 8006782:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006784:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006786:	681a      	ldr	r2, [r3, #0]
 8006788:	4b5e      	ldr	r3, [pc, #376]	@ (8006904 <UART_SetConfig+0x230>)
 800678a:	429a      	cmp	r2, r3
 800678c:	d102      	bne.n	8006794 <UART_SetConfig+0xc0>
 800678e:	2301      	movs	r3, #1
 8006790:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006792:	e032      	b.n	80067fa <UART_SetConfig+0x126>
 8006794:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006796:	681a      	ldr	r2, [r3, #0]
 8006798:	4b5b      	ldr	r3, [pc, #364]	@ (8006908 <UART_SetConfig+0x234>)
 800679a:	429a      	cmp	r2, r3
 800679c:	d102      	bne.n	80067a4 <UART_SetConfig+0xd0>
 800679e:	2302      	movs	r3, #2
 80067a0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80067a2:	e02a      	b.n	80067fa <UART_SetConfig+0x126>
 80067a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067a6:	681a      	ldr	r2, [r3, #0]
 80067a8:	4b58      	ldr	r3, [pc, #352]	@ (800690c <UART_SetConfig+0x238>)
 80067aa:	429a      	cmp	r2, r3
 80067ac:	d102      	bne.n	80067b4 <UART_SetConfig+0xe0>
 80067ae:	2304      	movs	r3, #4
 80067b0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80067b2:	e022      	b.n	80067fa <UART_SetConfig+0x126>
 80067b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067b6:	681a      	ldr	r2, [r3, #0]
 80067b8:	4b55      	ldr	r3, [pc, #340]	@ (8006910 <UART_SetConfig+0x23c>)
 80067ba:	429a      	cmp	r2, r3
 80067bc:	d102      	bne.n	80067c4 <UART_SetConfig+0xf0>
 80067be:	2308      	movs	r3, #8
 80067c0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80067c2:	e01a      	b.n	80067fa <UART_SetConfig+0x126>
 80067c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067c6:	681a      	ldr	r2, [r3, #0]
 80067c8:	4b52      	ldr	r3, [pc, #328]	@ (8006914 <UART_SetConfig+0x240>)
 80067ca:	429a      	cmp	r2, r3
 80067cc:	d102      	bne.n	80067d4 <UART_SetConfig+0x100>
 80067ce:	2310      	movs	r3, #16
 80067d0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80067d2:	e012      	b.n	80067fa <UART_SetConfig+0x126>
 80067d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067d6:	681a      	ldr	r2, [r3, #0]
 80067d8:	4b4f      	ldr	r3, [pc, #316]	@ (8006918 <UART_SetConfig+0x244>)
 80067da:	429a      	cmp	r2, r3
 80067dc:	d103      	bne.n	80067e6 <UART_SetConfig+0x112>
 80067de:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80067e2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80067e4:	e009      	b.n	80067fa <UART_SetConfig+0x126>
 80067e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067e8:	681a      	ldr	r2, [r3, #0]
 80067ea:	4b43      	ldr	r3, [pc, #268]	@ (80068f8 <UART_SetConfig+0x224>)
 80067ec:	429a      	cmp	r2, r3
 80067ee:	d102      	bne.n	80067f6 <UART_SetConfig+0x122>
 80067f0:	2320      	movs	r3, #32
 80067f2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80067f4:	e001      	b.n	80067fa <UART_SetConfig+0x126>
 80067f6:	2300      	movs	r3, #0
 80067f8:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80067fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067fc:	681a      	ldr	r2, [r3, #0]
 80067fe:	4b3e      	ldr	r3, [pc, #248]	@ (80068f8 <UART_SetConfig+0x224>)
 8006800:	429a      	cmp	r2, r3
 8006802:	d005      	beq.n	8006810 <UART_SetConfig+0x13c>
 8006804:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006806:	681a      	ldr	r2, [r3, #0]
 8006808:	4b3d      	ldr	r3, [pc, #244]	@ (8006900 <UART_SetConfig+0x22c>)
 800680a:	429a      	cmp	r2, r3
 800680c:	f040 8088 	bne.w	8006920 <UART_SetConfig+0x24c>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8006810:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006812:	2200      	movs	r2, #0
 8006814:	623b      	str	r3, [r7, #32]
 8006816:	627a      	str	r2, [r7, #36]	@ 0x24
 8006818:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800681c:	f7fd ff0e 	bl	800463c <HAL_RCCEx_GetPeriphCLKFreq>
 8006820:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8006822:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006824:	2b00      	cmp	r3, #0
 8006826:	f000 80eb 	beq.w	8006a00 <UART_SetConfig+0x32c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800682a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800682c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800682e:	4a3b      	ldr	r2, [pc, #236]	@ (800691c <UART_SetConfig+0x248>)
 8006830:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006834:	461a      	mov	r2, r3
 8006836:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006838:	fbb3 f3f2 	udiv	r3, r3, r2
 800683c:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800683e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006840:	685a      	ldr	r2, [r3, #4]
 8006842:	4613      	mov	r3, r2
 8006844:	005b      	lsls	r3, r3, #1
 8006846:	4413      	add	r3, r2
 8006848:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800684a:	429a      	cmp	r2, r3
 800684c:	d305      	bcc.n	800685a <UART_SetConfig+0x186>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800684e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006850:	685b      	ldr	r3, [r3, #4]
 8006852:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006854:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006856:	429a      	cmp	r2, r3
 8006858:	d903      	bls.n	8006862 <UART_SetConfig+0x18e>
      {
        ret = HAL_ERROR;
 800685a:	2301      	movs	r3, #1
 800685c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8006860:	e048      	b.n	80068f4 <UART_SetConfig+0x220>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006862:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006864:	2200      	movs	r2, #0
 8006866:	61bb      	str	r3, [r7, #24]
 8006868:	61fa      	str	r2, [r7, #28]
 800686a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800686c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800686e:	4a2b      	ldr	r2, [pc, #172]	@ (800691c <UART_SetConfig+0x248>)
 8006870:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006874:	b29b      	uxth	r3, r3
 8006876:	2200      	movs	r2, #0
 8006878:	613b      	str	r3, [r7, #16]
 800687a:	617a      	str	r2, [r7, #20]
 800687c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006880:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006884:	f7f9 fd16 	bl	80002b4 <__aeabi_uldivmod>
 8006888:	4602      	mov	r2, r0
 800688a:	460b      	mov	r3, r1
 800688c:	4610      	mov	r0, r2
 800688e:	4619      	mov	r1, r3
 8006890:	f04f 0200 	mov.w	r2, #0
 8006894:	f04f 0300 	mov.w	r3, #0
 8006898:	020b      	lsls	r3, r1, #8
 800689a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800689e:	0202      	lsls	r2, r0, #8
 80068a0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80068a2:	6849      	ldr	r1, [r1, #4]
 80068a4:	0849      	lsrs	r1, r1, #1
 80068a6:	2000      	movs	r0, #0
 80068a8:	460c      	mov	r4, r1
 80068aa:	4605      	mov	r5, r0
 80068ac:	eb12 0804 	adds.w	r8, r2, r4
 80068b0:	eb43 0905 	adc.w	r9, r3, r5
 80068b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068b6:	685b      	ldr	r3, [r3, #4]
 80068b8:	2200      	movs	r2, #0
 80068ba:	60bb      	str	r3, [r7, #8]
 80068bc:	60fa      	str	r2, [r7, #12]
 80068be:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80068c2:	4640      	mov	r0, r8
 80068c4:	4649      	mov	r1, r9
 80068c6:	f7f9 fcf5 	bl	80002b4 <__aeabi_uldivmod>
 80068ca:	4602      	mov	r2, r0
 80068cc:	460b      	mov	r3, r1
 80068ce:	4613      	mov	r3, r2
 80068d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80068d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80068d4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80068d8:	d308      	bcc.n	80068ec <UART_SetConfig+0x218>
 80068da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80068dc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80068e0:	d204      	bcs.n	80068ec <UART_SetConfig+0x218>
        {
          huart->Instance->BRR = usartdiv;
 80068e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80068e8:	60da      	str	r2, [r3, #12]
 80068ea:	e003      	b.n	80068f4 <UART_SetConfig+0x220>
        }
        else
        {
          ret = HAL_ERROR;
 80068ec:	2301      	movs	r3, #1
 80068ee:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 80068f2:	e085      	b.n	8006a00 <UART_SetConfig+0x32c>
 80068f4:	e084      	b.n	8006a00 <UART_SetConfig+0x32c>
 80068f6:	bf00      	nop
 80068f8:	46002400 	.word	0x46002400
 80068fc:	cfff69f3 	.word	0xcfff69f3
 8006900:	56002400 	.word	0x56002400
 8006904:	40013800 	.word	0x40013800
 8006908:	40004400 	.word	0x40004400
 800690c:	40004800 	.word	0x40004800
 8006910:	40004c00 	.word	0x40004c00
 8006914:	40005000 	.word	0x40005000
 8006918:	40006400 	.word	0x40006400
 800691c:	08007260 	.word	0x08007260
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006920:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006922:	69db      	ldr	r3, [r3, #28]
 8006924:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006928:	d13c      	bne.n	80069a4 <UART_SetConfig+0x2d0>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800692a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800692c:	2200      	movs	r2, #0
 800692e:	603b      	str	r3, [r7, #0]
 8006930:	607a      	str	r2, [r7, #4]
 8006932:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006936:	f7fd fe81 	bl	800463c <HAL_RCCEx_GetPeriphCLKFreq>
 800693a:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800693c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800693e:	2b00      	cmp	r3, #0
 8006940:	d05e      	beq.n	8006a00 <UART_SetConfig+0x32c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006942:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006944:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006946:	4a39      	ldr	r2, [pc, #228]	@ (8006a2c <UART_SetConfig+0x358>)
 8006948:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800694c:	461a      	mov	r2, r3
 800694e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006950:	fbb3 f3f2 	udiv	r3, r3, r2
 8006954:	005a      	lsls	r2, r3, #1
 8006956:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006958:	685b      	ldr	r3, [r3, #4]
 800695a:	085b      	lsrs	r3, r3, #1
 800695c:	441a      	add	r2, r3
 800695e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006960:	685b      	ldr	r3, [r3, #4]
 8006962:	fbb2 f3f3 	udiv	r3, r2, r3
 8006966:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006968:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800696a:	2b0f      	cmp	r3, #15
 800696c:	d916      	bls.n	800699c <UART_SetConfig+0x2c8>
 800696e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006970:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006974:	d212      	bcs.n	800699c <UART_SetConfig+0x2c8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006976:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006978:	b29b      	uxth	r3, r3
 800697a:	f023 030f 	bic.w	r3, r3, #15
 800697e:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006980:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006982:	085b      	lsrs	r3, r3, #1
 8006984:	b29b      	uxth	r3, r3
 8006986:	f003 0307 	and.w	r3, r3, #7
 800698a:	b29a      	uxth	r2, r3
 800698c:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800698e:	4313      	orrs	r3, r2
 8006990:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 8006992:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8006998:	60da      	str	r2, [r3, #12]
 800699a:	e031      	b.n	8006a00 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 800699c:	2301      	movs	r3, #1
 800699e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80069a2:	e02d      	b.n	8006a00 <UART_SetConfig+0x32c>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80069a4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80069a6:	2200      	movs	r2, #0
 80069a8:	469a      	mov	sl, r3
 80069aa:	4693      	mov	fp, r2
 80069ac:	4650      	mov	r0, sl
 80069ae:	4659      	mov	r1, fp
 80069b0:	f7fd fe44 	bl	800463c <HAL_RCCEx_GetPeriphCLKFreq>
 80069b4:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 80069b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d021      	beq.n	8006a00 <UART_SetConfig+0x32c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80069bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069c0:	4a1a      	ldr	r2, [pc, #104]	@ (8006a2c <UART_SetConfig+0x358>)
 80069c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80069c6:	461a      	mov	r2, r3
 80069c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80069ca:	fbb3 f2f2 	udiv	r2, r3, r2
 80069ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069d0:	685b      	ldr	r3, [r3, #4]
 80069d2:	085b      	lsrs	r3, r3, #1
 80069d4:	441a      	add	r2, r3
 80069d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069d8:	685b      	ldr	r3, [r3, #4]
 80069da:	fbb2 f3f3 	udiv	r3, r2, r3
 80069de:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80069e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80069e2:	2b0f      	cmp	r3, #15
 80069e4:	d909      	bls.n	80069fa <UART_SetConfig+0x326>
 80069e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80069e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80069ec:	d205      	bcs.n	80069fa <UART_SetConfig+0x326>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80069ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80069f0:	b29a      	uxth	r2, r3
 80069f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	60da      	str	r2, [r3, #12]
 80069f8:	e002      	b.n	8006a00 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 80069fa:	2301      	movs	r3, #1
 80069fc:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006a00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a02:	2201      	movs	r2, #1
 8006a04:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006a08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a0a:	2201      	movs	r2, #1
 8006a0c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006a10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a12:	2200      	movs	r2, #0
 8006a14:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006a16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a18:	2200      	movs	r2, #0
 8006a1a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006a1c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8006a20:	4618      	mov	r0, r3
 8006a22:	3750      	adds	r7, #80	@ 0x50
 8006a24:	46bd      	mov	sp, r7
 8006a26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006a2a:	bf00      	nop
 8006a2c:	08007260 	.word	0x08007260

08006a30 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006a30:	b480      	push	{r7}
 8006a32:	b083      	sub	sp, #12
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a3c:	f003 0308 	and.w	r3, r3, #8
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d00a      	beq.n	8006a5a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	685b      	ldr	r3, [r3, #4]
 8006a4a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	430a      	orrs	r2, r1
 8006a58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a5e:	f003 0301 	and.w	r3, r3, #1
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d00a      	beq.n	8006a7c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	685b      	ldr	r3, [r3, #4]
 8006a6c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	430a      	orrs	r2, r1
 8006a7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a80:	f003 0302 	and.w	r3, r3, #2
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d00a      	beq.n	8006a9e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	685b      	ldr	r3, [r3, #4]
 8006a8e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	430a      	orrs	r2, r1
 8006a9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006aa2:	f003 0304 	and.w	r3, r3, #4
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d00a      	beq.n	8006ac0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	685b      	ldr	r3, [r3, #4]
 8006ab0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	430a      	orrs	r2, r1
 8006abe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ac4:	f003 0310 	and.w	r3, r3, #16
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d00a      	beq.n	8006ae2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	689b      	ldr	r3, [r3, #8]
 8006ad2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	430a      	orrs	r2, r1
 8006ae0:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ae6:	f003 0320 	and.w	r3, r3, #32
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d00a      	beq.n	8006b04 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	689b      	ldr	r3, [r3, #8]
 8006af4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	430a      	orrs	r2, r1
 8006b02:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d01a      	beq.n	8006b46 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	685b      	ldr	r3, [r3, #4]
 8006b16:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	430a      	orrs	r2, r1
 8006b24:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b2a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006b2e:	d10a      	bne.n	8006b46 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	685b      	ldr	r3, [r3, #4]
 8006b36:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	430a      	orrs	r2, r1
 8006b44:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d00a      	beq.n	8006b68 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	685b      	ldr	r3, [r3, #4]
 8006b58:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	430a      	orrs	r2, r1
 8006b66:	605a      	str	r2, [r3, #4]
  }
}
 8006b68:	bf00      	nop
 8006b6a:	370c      	adds	r7, #12
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b72:	4770      	bx	lr

08006b74 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b098      	sub	sp, #96	@ 0x60
 8006b78:	af02      	add	r7, sp, #8
 8006b7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2200      	movs	r2, #0
 8006b80:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006b84:	f7fa f9a6 	bl	8000ed4 <HAL_GetTick>
 8006b88:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f003 0308 	and.w	r3, r3, #8
 8006b94:	2b08      	cmp	r3, #8
 8006b96:	d12f      	bne.n	8006bf8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b98:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006b9c:	9300      	str	r3, [sp, #0]
 8006b9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006ba6:	6878      	ldr	r0, [r7, #4]
 8006ba8:	f000 f88e 	bl	8006cc8 <UART_WaitOnFlagUntilTimeout>
 8006bac:	4603      	mov	r3, r0
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d022      	beq.n	8006bf8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bba:	e853 3f00 	ldrex	r3, [r3]
 8006bbe:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006bc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006bc2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006bc6:	653b      	str	r3, [r7, #80]	@ 0x50
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	461a      	mov	r2, r3
 8006bce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006bd0:	647b      	str	r3, [r7, #68]	@ 0x44
 8006bd2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bd4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006bd6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006bd8:	e841 2300 	strex	r3, r2, [r1]
 8006bdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006bde:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d1e6      	bne.n	8006bb2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2220      	movs	r2, #32
 8006be8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2200      	movs	r2, #0
 8006bf0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006bf4:	2303      	movs	r3, #3
 8006bf6:	e063      	b.n	8006cc0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f003 0304 	and.w	r3, r3, #4
 8006c02:	2b04      	cmp	r3, #4
 8006c04:	d149      	bne.n	8006c9a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006c06:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006c0a:	9300      	str	r3, [sp, #0]
 8006c0c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006c0e:	2200      	movs	r2, #0
 8006c10:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006c14:	6878      	ldr	r0, [r7, #4]
 8006c16:	f000 f857 	bl	8006cc8 <UART_WaitOnFlagUntilTimeout>
 8006c1a:	4603      	mov	r3, r0
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d03c      	beq.n	8006c9a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c28:	e853 3f00 	ldrex	r3, [r3]
 8006c2c:	623b      	str	r3, [r7, #32]
   return(result);
 8006c2e:	6a3b      	ldr	r3, [r7, #32]
 8006c30:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006c34:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	461a      	mov	r2, r3
 8006c3c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006c3e:	633b      	str	r3, [r7, #48]	@ 0x30
 8006c40:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c42:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006c44:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c46:	e841 2300 	strex	r3, r2, [r1]
 8006c4a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006c4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d1e6      	bne.n	8006c20 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	3308      	adds	r3, #8
 8006c58:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c5a:	693b      	ldr	r3, [r7, #16]
 8006c5c:	e853 3f00 	ldrex	r3, [r3]
 8006c60:	60fb      	str	r3, [r7, #12]
   return(result);
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	f023 0301 	bic.w	r3, r3, #1
 8006c68:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	3308      	adds	r3, #8
 8006c70:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006c72:	61fa      	str	r2, [r7, #28]
 8006c74:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c76:	69b9      	ldr	r1, [r7, #24]
 8006c78:	69fa      	ldr	r2, [r7, #28]
 8006c7a:	e841 2300 	strex	r3, r2, [r1]
 8006c7e:	617b      	str	r3, [r7, #20]
   return(result);
 8006c80:	697b      	ldr	r3, [r7, #20]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d1e5      	bne.n	8006c52 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2220      	movs	r2, #32
 8006c8a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	2200      	movs	r2, #0
 8006c92:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006c96:	2303      	movs	r3, #3
 8006c98:	e012      	b.n	8006cc0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	2220      	movs	r2, #32
 8006c9e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2220      	movs	r2, #32
 8006ca6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2200      	movs	r2, #0
 8006cae:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	2200      	movs	r2, #0
 8006cba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006cbe:	2300      	movs	r3, #0
}
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	3758      	adds	r7, #88	@ 0x58
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	bd80      	pop	{r7, pc}

08006cc8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b084      	sub	sp, #16
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	60f8      	str	r0, [r7, #12]
 8006cd0:	60b9      	str	r1, [r7, #8]
 8006cd2:	603b      	str	r3, [r7, #0]
 8006cd4:	4613      	mov	r3, r2
 8006cd6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006cd8:	e04f      	b.n	8006d7a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006cda:	69bb      	ldr	r3, [r7, #24]
 8006cdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ce0:	d04b      	beq.n	8006d7a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ce2:	f7fa f8f7 	bl	8000ed4 <HAL_GetTick>
 8006ce6:	4602      	mov	r2, r0
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	1ad3      	subs	r3, r2, r3
 8006cec:	69ba      	ldr	r2, [r7, #24]
 8006cee:	429a      	cmp	r2, r3
 8006cf0:	d302      	bcc.n	8006cf8 <UART_WaitOnFlagUntilTimeout+0x30>
 8006cf2:	69bb      	ldr	r3, [r7, #24]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d101      	bne.n	8006cfc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006cf8:	2303      	movs	r3, #3
 8006cfa:	e04e      	b.n	8006d9a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f003 0304 	and.w	r3, r3, #4
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d037      	beq.n	8006d7a <UART_WaitOnFlagUntilTimeout+0xb2>
 8006d0a:	68bb      	ldr	r3, [r7, #8]
 8006d0c:	2b80      	cmp	r3, #128	@ 0x80
 8006d0e:	d034      	beq.n	8006d7a <UART_WaitOnFlagUntilTimeout+0xb2>
 8006d10:	68bb      	ldr	r3, [r7, #8]
 8006d12:	2b40      	cmp	r3, #64	@ 0x40
 8006d14:	d031      	beq.n	8006d7a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	69db      	ldr	r3, [r3, #28]
 8006d1c:	f003 0308 	and.w	r3, r3, #8
 8006d20:	2b08      	cmp	r3, #8
 8006d22:	d110      	bne.n	8006d46 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	2208      	movs	r2, #8
 8006d2a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006d2c:	68f8      	ldr	r0, [r7, #12]
 8006d2e:	f000 f838 	bl	8006da2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	2208      	movs	r2, #8
 8006d36:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006d42:	2301      	movs	r3, #1
 8006d44:	e029      	b.n	8006d9a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	69db      	ldr	r3, [r3, #28]
 8006d4c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006d50:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006d54:	d111      	bne.n	8006d7a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006d5e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006d60:	68f8      	ldr	r0, [r7, #12]
 8006d62:	f000 f81e 	bl	8006da2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	2220      	movs	r2, #32
 8006d6a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	2200      	movs	r2, #0
 8006d72:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006d76:	2303      	movs	r3, #3
 8006d78:	e00f      	b.n	8006d9a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	69da      	ldr	r2, [r3, #28]
 8006d80:	68bb      	ldr	r3, [r7, #8]
 8006d82:	4013      	ands	r3, r2
 8006d84:	68ba      	ldr	r2, [r7, #8]
 8006d86:	429a      	cmp	r2, r3
 8006d88:	bf0c      	ite	eq
 8006d8a:	2301      	moveq	r3, #1
 8006d8c:	2300      	movne	r3, #0
 8006d8e:	b2db      	uxtb	r3, r3
 8006d90:	461a      	mov	r2, r3
 8006d92:	79fb      	ldrb	r3, [r7, #7]
 8006d94:	429a      	cmp	r2, r3
 8006d96:	d0a0      	beq.n	8006cda <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006d98:	2300      	movs	r3, #0
}
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	3710      	adds	r7, #16
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	bd80      	pop	{r7, pc}

08006da2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006da2:	b480      	push	{r7}
 8006da4:	b095      	sub	sp, #84	@ 0x54
 8006da6:	af00      	add	r7, sp, #0
 8006da8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006db0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006db2:	e853 3f00 	ldrex	r3, [r3]
 8006db6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006db8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dba:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006dbe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	461a      	mov	r2, r3
 8006dc6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006dc8:	643b      	str	r3, [r7, #64]	@ 0x40
 8006dca:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dcc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006dce:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006dd0:	e841 2300 	strex	r3, r2, [r1]
 8006dd4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006dd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d1e6      	bne.n	8006daa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	3308      	adds	r3, #8
 8006de2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006de4:	6a3b      	ldr	r3, [r7, #32]
 8006de6:	e853 3f00 	ldrex	r3, [r3]
 8006dea:	61fb      	str	r3, [r7, #28]
   return(result);
 8006dec:	69fb      	ldr	r3, [r7, #28]
 8006dee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006df2:	f023 0301 	bic.w	r3, r3, #1
 8006df6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	3308      	adds	r3, #8
 8006dfe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006e00:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006e02:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e04:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006e06:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006e08:	e841 2300 	strex	r3, r2, [r1]
 8006e0c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006e0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d1e3      	bne.n	8006ddc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006e18:	2b01      	cmp	r3, #1
 8006e1a:	d118      	bne.n	8006e4e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	e853 3f00 	ldrex	r3, [r3]
 8006e28:	60bb      	str	r3, [r7, #8]
   return(result);
 8006e2a:	68bb      	ldr	r3, [r7, #8]
 8006e2c:	f023 0310 	bic.w	r3, r3, #16
 8006e30:	647b      	str	r3, [r7, #68]	@ 0x44
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	461a      	mov	r2, r3
 8006e38:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006e3a:	61bb      	str	r3, [r7, #24]
 8006e3c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e3e:	6979      	ldr	r1, [r7, #20]
 8006e40:	69ba      	ldr	r2, [r7, #24]
 8006e42:	e841 2300 	strex	r3, r2, [r1]
 8006e46:	613b      	str	r3, [r7, #16]
   return(result);
 8006e48:	693b      	ldr	r3, [r7, #16]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d1e6      	bne.n	8006e1c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2220      	movs	r2, #32
 8006e52:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2200      	movs	r2, #0
 8006e5a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2200      	movs	r2, #0
 8006e60:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006e62:	bf00      	nop
 8006e64:	3754      	adds	r7, #84	@ 0x54
 8006e66:	46bd      	mov	sp, r7
 8006e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6c:	4770      	bx	lr

08006e6e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006e6e:	b580      	push	{r7, lr}
 8006e70:	b084      	sub	sp, #16
 8006e72:	af00      	add	r7, sp, #0
 8006e74:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006e7a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	2200      	movs	r2, #0
 8006e80:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006e84:	68f8      	ldr	r0, [r7, #12]
 8006e86:	f7ff fc0f 	bl	80066a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006e8a:	bf00      	nop
 8006e8c:	3710      	adds	r7, #16
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	bd80      	pop	{r7, pc}

08006e92 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006e92:	b580      	push	{r7, lr}
 8006e94:	b088      	sub	sp, #32
 8006e96:	af00      	add	r7, sp, #0
 8006e98:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	e853 3f00 	ldrex	r3, [r3]
 8006ea6:	60bb      	str	r3, [r7, #8]
   return(result);
 8006ea8:	68bb      	ldr	r3, [r7, #8]
 8006eaa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006eae:	61fb      	str	r3, [r7, #28]
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	461a      	mov	r2, r3
 8006eb6:	69fb      	ldr	r3, [r7, #28]
 8006eb8:	61bb      	str	r3, [r7, #24]
 8006eba:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ebc:	6979      	ldr	r1, [r7, #20]
 8006ebe:	69ba      	ldr	r2, [r7, #24]
 8006ec0:	e841 2300 	strex	r3, r2, [r1]
 8006ec4:	613b      	str	r3, [r7, #16]
   return(result);
 8006ec6:	693b      	ldr	r3, [r7, #16]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d1e6      	bne.n	8006e9a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2220      	movs	r2, #32
 8006ed0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006eda:	6878      	ldr	r0, [r7, #4]
 8006edc:	f7ff fbda 	bl	8006694 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006ee0:	bf00      	nop
 8006ee2:	3720      	adds	r7, #32
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	bd80      	pop	{r7, pc}

08006ee8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006ee8:	b480      	push	{r7}
 8006eea:	b083      	sub	sp, #12
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006ef0:	bf00      	nop
 8006ef2:	370c      	adds	r7, #12
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efa:	4770      	bx	lr

08006efc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006efc:	b480      	push	{r7}
 8006efe:	b083      	sub	sp, #12
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006f04:	bf00      	nop
 8006f06:	370c      	adds	r7, #12
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0e:	4770      	bx	lr

08006f10 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006f10:	b480      	push	{r7}
 8006f12:	b085      	sub	sp, #20
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006f1e:	2b01      	cmp	r3, #1
 8006f20:	d101      	bne.n	8006f26 <HAL_UARTEx_DisableFifoMode+0x16>
 8006f22:	2302      	movs	r3, #2
 8006f24:	e027      	b.n	8006f76 <HAL_UARTEx_DisableFifoMode+0x66>
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	2201      	movs	r2, #1
 8006f2a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	2224      	movs	r2, #36	@ 0x24
 8006f32:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	681a      	ldr	r2, [r3, #0]
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f022 0201 	bic.w	r2, r2, #1
 8006f4c:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006f54:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2200      	movs	r2, #0
 8006f5a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	68fa      	ldr	r2, [r7, #12]
 8006f62:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2220      	movs	r2, #32
 8006f68:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2200      	movs	r2, #0
 8006f70:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006f74:	2300      	movs	r3, #0
}
 8006f76:	4618      	mov	r0, r3
 8006f78:	3714      	adds	r7, #20
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f80:	4770      	bx	lr

08006f82 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006f82:	b580      	push	{r7, lr}
 8006f84:	b084      	sub	sp, #16
 8006f86:	af00      	add	r7, sp, #0
 8006f88:	6078      	str	r0, [r7, #4]
 8006f8a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006f92:	2b01      	cmp	r3, #1
 8006f94:	d101      	bne.n	8006f9a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006f96:	2302      	movs	r3, #2
 8006f98:	e02d      	b.n	8006ff6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2201      	movs	r2, #1
 8006f9e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2224      	movs	r2, #36	@ 0x24
 8006fa6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	681a      	ldr	r2, [r3, #0]
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f022 0201 	bic.w	r2, r2, #1
 8006fc0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	689b      	ldr	r3, [r3, #8]
 8006fc8:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	683a      	ldr	r2, [r7, #0]
 8006fd2:	430a      	orrs	r2, r1
 8006fd4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006fd6:	6878      	ldr	r0, [r7, #4]
 8006fd8:	f000 f850 	bl	800707c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	68fa      	ldr	r2, [r7, #12]
 8006fe2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2220      	movs	r2, #32
 8006fe8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2200      	movs	r2, #0
 8006ff0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006ff4:	2300      	movs	r3, #0
}
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	3710      	adds	r7, #16
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	bd80      	pop	{r7, pc}

08006ffe <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006ffe:	b580      	push	{r7, lr}
 8007000:	b084      	sub	sp, #16
 8007002:	af00      	add	r7, sp, #0
 8007004:	6078      	str	r0, [r7, #4]
 8007006:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800700e:	2b01      	cmp	r3, #1
 8007010:	d101      	bne.n	8007016 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007012:	2302      	movs	r3, #2
 8007014:	e02d      	b.n	8007072 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2201      	movs	r2, #1
 800701a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2224      	movs	r2, #36	@ 0x24
 8007022:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	681a      	ldr	r2, [r3, #0]
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f022 0201 	bic.w	r2, r2, #1
 800703c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	689b      	ldr	r3, [r3, #8]
 8007044:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	683a      	ldr	r2, [r7, #0]
 800704e:	430a      	orrs	r2, r1
 8007050:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007052:	6878      	ldr	r0, [r7, #4]
 8007054:	f000 f812 	bl	800707c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	68fa      	ldr	r2, [r7, #12]
 800705e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2220      	movs	r2, #32
 8007064:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2200      	movs	r2, #0
 800706c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007070:	2300      	movs	r3, #0
}
 8007072:	4618      	mov	r0, r3
 8007074:	3710      	adds	r7, #16
 8007076:	46bd      	mov	sp, r7
 8007078:	bd80      	pop	{r7, pc}
	...

0800707c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800707c:	b480      	push	{r7}
 800707e:	b085      	sub	sp, #20
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007088:	2b00      	cmp	r3, #0
 800708a:	d108      	bne.n	800709e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2201      	movs	r2, #1
 8007090:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2201      	movs	r2, #1
 8007098:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800709c:	e031      	b.n	8007102 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800709e:	2308      	movs	r3, #8
 80070a0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80070a2:	2308      	movs	r3, #8
 80070a4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	689b      	ldr	r3, [r3, #8]
 80070ac:	0e5b      	lsrs	r3, r3, #25
 80070ae:	b2db      	uxtb	r3, r3
 80070b0:	f003 0307 	and.w	r3, r3, #7
 80070b4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	689b      	ldr	r3, [r3, #8]
 80070bc:	0f5b      	lsrs	r3, r3, #29
 80070be:	b2db      	uxtb	r3, r3
 80070c0:	f003 0307 	and.w	r3, r3, #7
 80070c4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80070c6:	7bbb      	ldrb	r3, [r7, #14]
 80070c8:	7b3a      	ldrb	r2, [r7, #12]
 80070ca:	4911      	ldr	r1, [pc, #68]	@ (8007110 <UARTEx_SetNbDataToProcess+0x94>)
 80070cc:	5c8a      	ldrb	r2, [r1, r2]
 80070ce:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80070d2:	7b3a      	ldrb	r2, [r7, #12]
 80070d4:	490f      	ldr	r1, [pc, #60]	@ (8007114 <UARTEx_SetNbDataToProcess+0x98>)
 80070d6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80070d8:	fb93 f3f2 	sdiv	r3, r3, r2
 80070dc:	b29a      	uxth	r2, r3
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80070e4:	7bfb      	ldrb	r3, [r7, #15]
 80070e6:	7b7a      	ldrb	r2, [r7, #13]
 80070e8:	4909      	ldr	r1, [pc, #36]	@ (8007110 <UARTEx_SetNbDataToProcess+0x94>)
 80070ea:	5c8a      	ldrb	r2, [r1, r2]
 80070ec:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80070f0:	7b7a      	ldrb	r2, [r7, #13]
 80070f2:	4908      	ldr	r1, [pc, #32]	@ (8007114 <UARTEx_SetNbDataToProcess+0x98>)
 80070f4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80070f6:	fb93 f3f2 	sdiv	r3, r3, r2
 80070fa:	b29a      	uxth	r2, r3
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8007102:	bf00      	nop
 8007104:	3714      	adds	r7, #20
 8007106:	46bd      	mov	sp, r7
 8007108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710c:	4770      	bx	lr
 800710e:	bf00      	nop
 8007110:	08007278 	.word	0x08007278
 8007114:	08007280 	.word	0x08007280

08007118 <memset>:
 8007118:	4402      	add	r2, r0
 800711a:	4603      	mov	r3, r0
 800711c:	4293      	cmp	r3, r2
 800711e:	d100      	bne.n	8007122 <memset+0xa>
 8007120:	4770      	bx	lr
 8007122:	f803 1b01 	strb.w	r1, [r3], #1
 8007126:	e7f9      	b.n	800711c <memset+0x4>

08007128 <__libc_init_array>:
 8007128:	b570      	push	{r4, r5, r6, lr}
 800712a:	4d0d      	ldr	r5, [pc, #52]	@ (8007160 <__libc_init_array+0x38>)
 800712c:	2600      	movs	r6, #0
 800712e:	4c0d      	ldr	r4, [pc, #52]	@ (8007164 <__libc_init_array+0x3c>)
 8007130:	1b64      	subs	r4, r4, r5
 8007132:	10a4      	asrs	r4, r4, #2
 8007134:	42a6      	cmp	r6, r4
 8007136:	d109      	bne.n	800714c <__libc_init_array+0x24>
 8007138:	4d0b      	ldr	r5, [pc, #44]	@ (8007168 <__libc_init_array+0x40>)
 800713a:	2600      	movs	r6, #0
 800713c:	4c0b      	ldr	r4, [pc, #44]	@ (800716c <__libc_init_array+0x44>)
 800713e:	f000 f817 	bl	8007170 <_init>
 8007142:	1b64      	subs	r4, r4, r5
 8007144:	10a4      	asrs	r4, r4, #2
 8007146:	42a6      	cmp	r6, r4
 8007148:	d105      	bne.n	8007156 <__libc_init_array+0x2e>
 800714a:	bd70      	pop	{r4, r5, r6, pc}
 800714c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007150:	3601      	adds	r6, #1
 8007152:	4798      	blx	r3
 8007154:	e7ee      	b.n	8007134 <__libc_init_array+0xc>
 8007156:	f855 3b04 	ldr.w	r3, [r5], #4
 800715a:	3601      	adds	r6, #1
 800715c:	4798      	blx	r3
 800715e:	e7f2      	b.n	8007146 <__libc_init_array+0x1e>
 8007160:	08007290 	.word	0x08007290
 8007164:	08007290 	.word	0x08007290
 8007168:	08007290 	.word	0x08007290
 800716c:	08007294 	.word	0x08007294

08007170 <_init>:
 8007170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007172:	bf00      	nop
 8007174:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007176:	bc08      	pop	{r3}
 8007178:	469e      	mov	lr, r3
 800717a:	4770      	bx	lr

0800717c <_fini>:
 800717c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800717e:	bf00      	nop
 8007180:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007182:	bc08      	pop	{r3}
 8007184:	469e      	mov	lr, r3
 8007186:	4770      	bx	lr
