
00.Debug.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000274  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007cbc  08000274  08000274  00001274  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000013c  08007f30  08007f30  00008f30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800806c  0800806c  0000a068  2**0
                  CONTENTS
  4 .ARM          00000008  0800806c  0800806c  0000906c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008074  08008074  0000a068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008074  08008074  00009074  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008078  08008078  00009078  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  0800807c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000208  20000068  080080e4  0000a068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000270  080080e4  0000a270  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0000a068  2**0
                  CONTENTS, READONLY
 12 .debug_info   000116a2  00000000  00000000  0000a09e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002396  00000000  00000000  0001b740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000de8  00000000  00000000  0001dad8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000aa5  00000000  00000000  0001e8c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003e02f  00000000  00000000  0001f365  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000118b0  00000000  00000000  0005d394  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00176e6a  00000000  00000000  0006ec44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001e5aae  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000040a8  00000000  00000000  001e5af4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  001e9b9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000274 <__do_global_dtors_aux>:
 8000274:	b510      	push	{r4, lr}
 8000276:	4c05      	ldr	r4, [pc, #20]	@ (800028c <__do_global_dtors_aux+0x18>)
 8000278:	7823      	ldrb	r3, [r4, #0]
 800027a:	b933      	cbnz	r3, 800028a <__do_global_dtors_aux+0x16>
 800027c:	4b04      	ldr	r3, [pc, #16]	@ (8000290 <__do_global_dtors_aux+0x1c>)
 800027e:	b113      	cbz	r3, 8000286 <__do_global_dtors_aux+0x12>
 8000280:	4804      	ldr	r0, [pc, #16]	@ (8000294 <__do_global_dtors_aux+0x20>)
 8000282:	f3af 8000 	nop.w
 8000286:	2301      	movs	r3, #1
 8000288:	7023      	strb	r3, [r4, #0]
 800028a:	bd10      	pop	{r4, pc}
 800028c:	20000068 	.word	0x20000068
 8000290:	00000000 	.word	0x00000000
 8000294:	08007f18 	.word	0x08007f18

08000298 <frame_dummy>:
 8000298:	b508      	push	{r3, lr}
 800029a:	4b03      	ldr	r3, [pc, #12]	@ (80002a8 <frame_dummy+0x10>)
 800029c:	b11b      	cbz	r3, 80002a6 <frame_dummy+0xe>
 800029e:	4903      	ldr	r1, [pc, #12]	@ (80002ac <frame_dummy+0x14>)
 80002a0:	4803      	ldr	r0, [pc, #12]	@ (80002b0 <frame_dummy+0x18>)
 80002a2:	f3af 8000 	nop.w
 80002a6:	bd08      	pop	{r3, pc}
 80002a8:	00000000 	.word	0x00000000
 80002ac:	2000006c 	.word	0x2000006c
 80002b0:	08007f18 	.word	0x08007f18

080002b4 <__aeabi_uldivmod>:
 80002b4:	b953      	cbnz	r3, 80002cc <__aeabi_uldivmod+0x18>
 80002b6:	b94a      	cbnz	r2, 80002cc <__aeabi_uldivmod+0x18>
 80002b8:	2900      	cmp	r1, #0
 80002ba:	bf08      	it	eq
 80002bc:	2800      	cmpeq	r0, #0
 80002be:	bf1c      	itt	ne
 80002c0:	f04f 31ff 	movne.w	r1, #4294967295
 80002c4:	f04f 30ff 	movne.w	r0, #4294967295
 80002c8:	f000 b97e 	b.w	80005c8 <__aeabi_idiv0>
 80002cc:	f1ad 0c08 	sub.w	ip, sp, #8
 80002d0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d4:	f000 f806 	bl	80002e4 <__udivmoddi4>
 80002d8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002e0:	b004      	add	sp, #16
 80002e2:	4770      	bx	lr

080002e4 <__udivmoddi4>:
 80002e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002e8:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002ea:	460c      	mov	r4, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14d      	bne.n	800038c <__udivmoddi4+0xa8>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	460f      	mov	r7, r1
 80002f4:	4684      	mov	ip, r0
 80002f6:	4696      	mov	lr, r2
 80002f8:	fab2 f382 	clz	r3, r2
 80002fc:	d960      	bls.n	80003c0 <__udivmoddi4+0xdc>
 80002fe:	b14b      	cbz	r3, 8000314 <__udivmoddi4+0x30>
 8000300:	fa02 fe03 	lsl.w	lr, r2, r3
 8000304:	f1c3 0220 	rsb	r2, r3, #32
 8000308:	409f      	lsls	r7, r3
 800030a:	fa00 fc03 	lsl.w	ip, r0, r3
 800030e:	fa20 f202 	lsr.w	r2, r0, r2
 8000312:	4317      	orrs	r7, r2
 8000314:	ea4f 461e 	mov.w	r6, lr, lsr #16
 8000318:	fa1f f48e 	uxth.w	r4, lr
 800031c:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000320:	fbb7 f1f6 	udiv	r1, r7, r6
 8000324:	fb06 7711 	mls	r7, r6, r1, r7
 8000328:	fb01 f004 	mul.w	r0, r1, r4
 800032c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000330:	4290      	cmp	r0, r2
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x62>
 8000334:	eb1e 0202 	adds.w	r2, lr, r2
 8000338:	f101 37ff 	add.w	r7, r1, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x60>
 800033e:	4290      	cmp	r0, r2
 8000340:	f200 812d 	bhi.w	800059e <__udivmoddi4+0x2ba>
 8000344:	4639      	mov	r1, r7
 8000346:	1a12      	subs	r2, r2, r0
 8000348:	fa1f fc8c 	uxth.w	ip, ip
 800034c:	fbb2 f0f6 	udiv	r0, r2, r6
 8000350:	fb06 2210 	mls	r2, r6, r0, r2
 8000354:	fb00 f404 	mul.w	r4, r0, r4
 8000358:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 800035c:	4564      	cmp	r4, ip
 800035e:	d908      	bls.n	8000372 <__udivmoddi4+0x8e>
 8000360:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000364:	f100 32ff 	add.w	r2, r0, #4294967295
 8000368:	d202      	bcs.n	8000370 <__udivmoddi4+0x8c>
 800036a:	4564      	cmp	r4, ip
 800036c:	f200 811a 	bhi.w	80005a4 <__udivmoddi4+0x2c0>
 8000370:	4610      	mov	r0, r2
 8000372:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000376:	ebac 0c04 	sub.w	ip, ip, r4
 800037a:	2100      	movs	r1, #0
 800037c:	b125      	cbz	r5, 8000388 <__udivmoddi4+0xa4>
 800037e:	fa2c f303 	lsr.w	r3, ip, r3
 8000382:	2200      	movs	r2, #0
 8000384:	e9c5 3200 	strd	r3, r2, [r5]
 8000388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800038c:	428b      	cmp	r3, r1
 800038e:	d905      	bls.n	800039c <__udivmoddi4+0xb8>
 8000390:	b10d      	cbz	r5, 8000396 <__udivmoddi4+0xb2>
 8000392:	e9c5 0100 	strd	r0, r1, [r5]
 8000396:	2100      	movs	r1, #0
 8000398:	4608      	mov	r0, r1
 800039a:	e7f5      	b.n	8000388 <__udivmoddi4+0xa4>
 800039c:	fab3 f183 	clz	r1, r3
 80003a0:	2900      	cmp	r1, #0
 80003a2:	d14d      	bne.n	8000440 <__udivmoddi4+0x15c>
 80003a4:	42a3      	cmp	r3, r4
 80003a6:	f0c0 80f2 	bcc.w	800058e <__udivmoddi4+0x2aa>
 80003aa:	4290      	cmp	r0, r2
 80003ac:	f080 80ef 	bcs.w	800058e <__udivmoddi4+0x2aa>
 80003b0:	4606      	mov	r6, r0
 80003b2:	4623      	mov	r3, r4
 80003b4:	4608      	mov	r0, r1
 80003b6:	2d00      	cmp	r5, #0
 80003b8:	d0e6      	beq.n	8000388 <__udivmoddi4+0xa4>
 80003ba:	e9c5 6300 	strd	r6, r3, [r5]
 80003be:	e7e3      	b.n	8000388 <__udivmoddi4+0xa4>
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	f040 80a2 	bne.w	800050a <__udivmoddi4+0x226>
 80003c6:	1a8a      	subs	r2, r1, r2
 80003c8:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80003cc:	fa1f f68e 	uxth.w	r6, lr
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb2 f4f7 	udiv	r4, r2, r7
 80003d6:	fb07 2014 	mls	r0, r7, r4, r2
 80003da:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80003de:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003e2:	fb06 f004 	mul.w	r0, r6, r4
 80003e6:	4290      	cmp	r0, r2
 80003e8:	d90f      	bls.n	800040a <__udivmoddi4+0x126>
 80003ea:	eb1e 0202 	adds.w	r2, lr, r2
 80003ee:	f104 38ff 	add.w	r8, r4, #4294967295
 80003f2:	bf2c      	ite	cs
 80003f4:	f04f 0901 	movcs.w	r9, #1
 80003f8:	f04f 0900 	movcc.w	r9, #0
 80003fc:	4290      	cmp	r0, r2
 80003fe:	d903      	bls.n	8000408 <__udivmoddi4+0x124>
 8000400:	f1b9 0f00 	cmp.w	r9, #0
 8000404:	f000 80c8 	beq.w	8000598 <__udivmoddi4+0x2b4>
 8000408:	4644      	mov	r4, r8
 800040a:	1a12      	subs	r2, r2, r0
 800040c:	fa1f fc8c 	uxth.w	ip, ip
 8000410:	fbb2 f0f7 	udiv	r0, r2, r7
 8000414:	fb07 2210 	mls	r2, r7, r0, r2
 8000418:	fb00 f606 	mul.w	r6, r0, r6
 800041c:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000420:	4566      	cmp	r6, ip
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x152>
 8000424:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000428:	f100 32ff 	add.w	r2, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x150>
 800042e:	4566      	cmp	r6, ip
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2c6>
 8000434:	4610      	mov	r0, r2
 8000436:	ebac 0c06 	sub.w	ip, ip, r6
 800043a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800043e:	e79d      	b.n	800037c <__udivmoddi4+0x98>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa04 fe01 	lsl.w	lr, r4, r1
 800044a:	fa22 f706 	lsr.w	r7, r2, r6
 800044e:	fa20 fc06 	lsr.w	ip, r0, r6
 8000452:	40f4      	lsrs	r4, r6
 8000454:	408a      	lsls	r2, r1
 8000456:	431f      	orrs	r7, r3
 8000458:	ea4e 030c 	orr.w	r3, lr, ip
 800045c:	fa00 fe01 	lsl.w	lr, r0, r1
 8000460:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000464:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fbb4 f0f8 	udiv	r0, r4, r8
 8000470:	fb08 4410 	mls	r4, r8, r0, r4
 8000474:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000478:	fb00 f90c 	mul.w	r9, r0, ip
 800047c:	45a1      	cmp	r9, r4
 800047e:	d90e      	bls.n	800049e <__udivmoddi4+0x1ba>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f100 3aff 	add.w	sl, r0, #4294967295
 8000486:	bf2c      	ite	cs
 8000488:	f04f 0b01 	movcs.w	fp, #1
 800048c:	f04f 0b00 	movcc.w	fp, #0
 8000490:	45a1      	cmp	r9, r4
 8000492:	d903      	bls.n	800049c <__udivmoddi4+0x1b8>
 8000494:	f1bb 0f00 	cmp.w	fp, #0
 8000498:	f000 8093 	beq.w	80005c2 <__udivmoddi4+0x2de>
 800049c:	4650      	mov	r0, sl
 800049e:	eba4 0409 	sub.w	r4, r4, r9
 80004a2:	fa1f f983 	uxth.w	r9, r3
 80004a6:	fbb4 f3f8 	udiv	r3, r4, r8
 80004aa:	fb08 4413 	mls	r4, r8, r3, r4
 80004ae:	fb03 fc0c 	mul.w	ip, r3, ip
 80004b2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004b6:	45a4      	cmp	ip, r4
 80004b8:	d906      	bls.n	80004c8 <__udivmoddi4+0x1e4>
 80004ba:	193c      	adds	r4, r7, r4
 80004bc:	f103 38ff 	add.w	r8, r3, #4294967295
 80004c0:	d201      	bcs.n	80004c6 <__udivmoddi4+0x1e2>
 80004c2:	45a4      	cmp	ip, r4
 80004c4:	d87a      	bhi.n	80005bc <__udivmoddi4+0x2d8>
 80004c6:	4643      	mov	r3, r8
 80004c8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004cc:	eba4 040c 	sub.w	r4, r4, ip
 80004d0:	fba0 9802 	umull	r9, r8, r0, r2
 80004d4:	4544      	cmp	r4, r8
 80004d6:	46cc      	mov	ip, r9
 80004d8:	4643      	mov	r3, r8
 80004da:	d302      	bcc.n	80004e2 <__udivmoddi4+0x1fe>
 80004dc:	d106      	bne.n	80004ec <__udivmoddi4+0x208>
 80004de:	45ce      	cmp	lr, r9
 80004e0:	d204      	bcs.n	80004ec <__udivmoddi4+0x208>
 80004e2:	3801      	subs	r0, #1
 80004e4:	ebb9 0c02 	subs.w	ip, r9, r2
 80004e8:	eb68 0307 	sbc.w	r3, r8, r7
 80004ec:	b15d      	cbz	r5, 8000506 <__udivmoddi4+0x222>
 80004ee:	ebbe 020c 	subs.w	r2, lr, ip
 80004f2:	eb64 0403 	sbc.w	r4, r4, r3
 80004f6:	fa04 f606 	lsl.w	r6, r4, r6
 80004fa:	fa22 f301 	lsr.w	r3, r2, r1
 80004fe:	40cc      	lsrs	r4, r1
 8000500:	431e      	orrs	r6, r3
 8000502:	e9c5 6400 	strd	r6, r4, [r5]
 8000506:	2100      	movs	r1, #0
 8000508:	e73e      	b.n	8000388 <__udivmoddi4+0xa4>
 800050a:	fa02 fe03 	lsl.w	lr, r2, r3
 800050e:	f1c3 0120 	rsb	r1, r3, #32
 8000512:	fa04 f203 	lsl.w	r2, r4, r3
 8000516:	fa00 fc03 	lsl.w	ip, r0, r3
 800051a:	40cc      	lsrs	r4, r1
 800051c:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000520:	fa20 f101 	lsr.w	r1, r0, r1
 8000524:	fa1f f68e 	uxth.w	r6, lr
 8000528:	fbb4 f0f7 	udiv	r0, r4, r7
 800052c:	430a      	orrs	r2, r1
 800052e:	fb07 4410 	mls	r4, r7, r0, r4
 8000532:	0c11      	lsrs	r1, r2, #16
 8000534:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000538:	fb00 f406 	mul.w	r4, r0, r6
 800053c:	428c      	cmp	r4, r1
 800053e:	d90e      	bls.n	800055e <__udivmoddi4+0x27a>
 8000540:	eb1e 0101 	adds.w	r1, lr, r1
 8000544:	f100 38ff 	add.w	r8, r0, #4294967295
 8000548:	bf2c      	ite	cs
 800054a:	f04f 0901 	movcs.w	r9, #1
 800054e:	f04f 0900 	movcc.w	r9, #0
 8000552:	428c      	cmp	r4, r1
 8000554:	d902      	bls.n	800055c <__udivmoddi4+0x278>
 8000556:	f1b9 0f00 	cmp.w	r9, #0
 800055a:	d02c      	beq.n	80005b6 <__udivmoddi4+0x2d2>
 800055c:	4640      	mov	r0, r8
 800055e:	1b09      	subs	r1, r1, r4
 8000560:	b292      	uxth	r2, r2
 8000562:	fbb1 f4f7 	udiv	r4, r1, r7
 8000566:	fb07 1114 	mls	r1, r7, r4, r1
 800056a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800056e:	fb04 f106 	mul.w	r1, r4, r6
 8000572:	4291      	cmp	r1, r2
 8000574:	d907      	bls.n	8000586 <__udivmoddi4+0x2a2>
 8000576:	eb1e 0202 	adds.w	r2, lr, r2
 800057a:	f104 38ff 	add.w	r8, r4, #4294967295
 800057e:	d201      	bcs.n	8000584 <__udivmoddi4+0x2a0>
 8000580:	4291      	cmp	r1, r2
 8000582:	d815      	bhi.n	80005b0 <__udivmoddi4+0x2cc>
 8000584:	4644      	mov	r4, r8
 8000586:	1a52      	subs	r2, r2, r1
 8000588:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 800058c:	e721      	b.n	80003d2 <__udivmoddi4+0xee>
 800058e:	1a86      	subs	r6, r0, r2
 8000590:	eb64 0303 	sbc.w	r3, r4, r3
 8000594:	2001      	movs	r0, #1
 8000596:	e70e      	b.n	80003b6 <__udivmoddi4+0xd2>
 8000598:	3c02      	subs	r4, #2
 800059a:	4472      	add	r2, lr
 800059c:	e735      	b.n	800040a <__udivmoddi4+0x126>
 800059e:	3902      	subs	r1, #2
 80005a0:	4472      	add	r2, lr
 80005a2:	e6d0      	b.n	8000346 <__udivmoddi4+0x62>
 80005a4:	44f4      	add	ip, lr
 80005a6:	3802      	subs	r0, #2
 80005a8:	e6e3      	b.n	8000372 <__udivmoddi4+0x8e>
 80005aa:	44f4      	add	ip, lr
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x152>
 80005b0:	3c02      	subs	r4, #2
 80005b2:	4472      	add	r2, lr
 80005b4:	e7e7      	b.n	8000586 <__udivmoddi4+0x2a2>
 80005b6:	3802      	subs	r0, #2
 80005b8:	4471      	add	r1, lr
 80005ba:	e7d0      	b.n	800055e <__udivmoddi4+0x27a>
 80005bc:	3b02      	subs	r3, #2
 80005be:	443c      	add	r4, r7
 80005c0:	e782      	b.n	80004c8 <__udivmoddi4+0x1e4>
 80005c2:	3802      	subs	r0, #2
 80005c4:	443c      	add	r4, r7
 80005c6:	e76a      	b.n	800049e <__udivmoddi4+0x1ba>

080005c8 <__aeabi_idiv0>:
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop

080005cc <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char* pData, int len)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b084      	sub	sp, #16
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	60f8      	str	r0, [r7, #12]
 80005d4:	60b9      	str	r1, [r7, #8]
 80005d6:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)pData, len, 10);
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	b29a      	uxth	r2, r3
 80005dc:	230a      	movs	r3, #10
 80005de:	68b9      	ldr	r1, [r7, #8]
 80005e0:	4803      	ldr	r0, [pc, #12]	@ (80005f0 <_write+0x24>)
 80005e2:	f005 fc61 	bl	8005ea8 <HAL_UART_Transmit>
	return len;
 80005e6:	687b      	ldr	r3, [r7, #4]
}
 80005e8:	4618      	mov	r0, r3
 80005ea:	3710      	adds	r7, #16
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	20000084 	.word	0x20000084

080005f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f8:	f000 fb14 	bl	8000c24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the System Power */
  SystemPower_Config();
 80005fc:	f000 f87c 	bl	80006f8 <SystemPower_Config>

  /* Configure the system clock */
  SystemClock_Config();
 8000600:	f000 f822 	bl	8000648 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000604:	f000 f8e6 	bl	80007d4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000608:	f000 f898 	bl	800073c <MX_USART1_UART_Init>
  MX_ICACHE_Init();
 800060c:	f000 f882 	bl	8000714 <MX_ICACHE_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  count++;
 8000610:	4b0a      	ldr	r3, [pc, #40]	@ (800063c <main+0x48>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	3301      	adds	r3, #1
 8000616:	4a09      	ldr	r2, [pc, #36]	@ (800063c <main+0x48>)
 8000618:	6013      	str	r3, [r2, #0]
	  printf("[%d]\r\n", count);
 800061a:	4b08      	ldr	r3, [pc, #32]	@ (800063c <main+0x48>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	4619      	mov	r1, r3
 8000620:	4807      	ldr	r0, [pc, #28]	@ (8000640 <main+0x4c>)
 8000622:	f006 fdf9 	bl	8007218 <iprintf>
	  HAL_GPIO_TogglePin(GPIOE, LED_RED_Pin_Pin);
 8000626:	2102      	movs	r1, #2
 8000628:	4806      	ldr	r0, [pc, #24]	@ (8000644 <main+0x50>)
 800062a:	f001 f80f 	bl	800164c <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 800062e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000632:	f000 fbbd 	bl	8000db0 <HAL_Delay>
	  count++;
 8000636:	bf00      	nop
 8000638:	e7ea      	b.n	8000610 <main+0x1c>
 800063a:	bf00      	nop
 800063c:	20000118 	.word	0x20000118
 8000640:	08007f30 	.word	0x08007f30
 8000644:	42021000 	.word	0x42021000

08000648 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b09e      	sub	sp, #120	@ 0x78
 800064c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800064e:	f107 0318 	add.w	r3, r7, #24
 8000652:	2260      	movs	r2, #96	@ 0x60
 8000654:	2100      	movs	r1, #0
 8000656:	4618      	mov	r0, r3
 8000658:	f006 fe33 	bl	80072c2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800065c:	463b      	mov	r3, r7
 800065e:	2200      	movs	r2, #0
 8000660:	601a      	str	r2, [r3, #0]
 8000662:	605a      	str	r2, [r3, #4]
 8000664:	609a      	str	r2, [r3, #8]
 8000666:	60da      	str	r2, [r3, #12]
 8000668:	611a      	str	r2, [r3, #16]
 800066a:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800066c:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 8000670:	f001 f836 	bl	80016e0 <HAL_PWREx_ControlVoltageScaling>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <SystemClock_Config+0x36>
  {
    Error_Handler();
 800067a:	f000 f90d 	bl	8000898 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800067e:	2301      	movs	r3, #1
 8000680:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000682:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000686:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000688:	2302      	movs	r3, #2
 800068a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800068c:	2303      	movs	r3, #3
 800068e:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 8000690:	2300      	movs	r3, #0
 8000692:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000694:	2301      	movs	r3, #1
 8000696:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000698:	230a      	movs	r3, #10
 800069a:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 800069c:	2302      	movs	r3, #2
 800069e:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006a0:	2302      	movs	r3, #2
 80006a2:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLR = 1;
 80006a4:	2301      	movs	r3, #1
 80006a6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 80006a8:	230c      	movs	r3, #12
 80006aa:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80006ac:	2300      	movs	r3, #0
 80006ae:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b0:	f107 0318 	add.w	r3, r7, #24
 80006b4:	4618      	mov	r0, r3
 80006b6:	f001 f8ff 	bl	80018b8 <HAL_RCC_OscConfig>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 80006c0:	f000 f8ea 	bl	8000898 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c4:	231f      	movs	r3, #31
 80006c6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006c8:	2303      	movs	r3, #3
 80006ca:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006cc:	2300      	movs	r3, #0
 80006ce:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006d0:	2300      	movs	r3, #0
 80006d2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006d4:	2300      	movs	r3, #0
 80006d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80006d8:	2300      	movs	r3, #0
 80006da:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006dc:	463b      	mov	r3, r7
 80006de:	2104      	movs	r1, #4
 80006e0:	4618      	mov	r0, r3
 80006e2:	f001 ffc5 	bl	8002670 <HAL_RCC_ClockConfig>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 80006ec:	f000 f8d4 	bl	8000898 <Error_Handler>
  }
}
 80006f0:	bf00      	nop
 80006f2:	3778      	adds	r7, #120	@ 0x78
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}

080006f8 <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0

  /*
   * Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
   */
  HAL_PWREx_DisableUCPDDeadBattery();
 80006fc:	f001 f8cc 	bl	8001898 <HAL_PWREx_DisableUCPDDeadBattery>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 8000700:	2002      	movs	r0, #2
 8000702:	f001 f879 	bl	80017f8 <HAL_PWREx_ConfigSupply>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <SystemPower_Config+0x18>
  {
    Error_Handler();
 800070c:	f000 f8c4 	bl	8000898 <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 8000710:	bf00      	nop
 8000712:	bd80      	pop	{r7, pc}

08000714 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8000718:	2000      	movs	r0, #0
 800071a:	f000 ffb1 	bl	8001680 <HAL_ICACHE_ConfigAssociativityMode>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8000724:	f000 f8b8 	bl	8000898 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000728:	f000 ffca 	bl	80016c0 <HAL_ICACHE_Enable>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8000732:	f000 f8b1 	bl	8000898 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8000736:	bf00      	nop
 8000738:	bd80      	pop	{r7, pc}
	...

0800073c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000740:	4b22      	ldr	r3, [pc, #136]	@ (80007cc <MX_USART1_UART_Init+0x90>)
 8000742:	4a23      	ldr	r2, [pc, #140]	@ (80007d0 <MX_USART1_UART_Init+0x94>)
 8000744:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000746:	4b21      	ldr	r3, [pc, #132]	@ (80007cc <MX_USART1_UART_Init+0x90>)
 8000748:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800074c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800074e:	4b1f      	ldr	r3, [pc, #124]	@ (80007cc <MX_USART1_UART_Init+0x90>)
 8000750:	2200      	movs	r2, #0
 8000752:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000754:	4b1d      	ldr	r3, [pc, #116]	@ (80007cc <MX_USART1_UART_Init+0x90>)
 8000756:	2200      	movs	r2, #0
 8000758:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800075a:	4b1c      	ldr	r3, [pc, #112]	@ (80007cc <MX_USART1_UART_Init+0x90>)
 800075c:	2200      	movs	r2, #0
 800075e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000760:	4b1a      	ldr	r3, [pc, #104]	@ (80007cc <MX_USART1_UART_Init+0x90>)
 8000762:	220c      	movs	r2, #12
 8000764:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000766:	4b19      	ldr	r3, [pc, #100]	@ (80007cc <MX_USART1_UART_Init+0x90>)
 8000768:	2200      	movs	r2, #0
 800076a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800076c:	4b17      	ldr	r3, [pc, #92]	@ (80007cc <MX_USART1_UART_Init+0x90>)
 800076e:	2200      	movs	r2, #0
 8000770:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000772:	4b16      	ldr	r3, [pc, #88]	@ (80007cc <MX_USART1_UART_Init+0x90>)
 8000774:	2200      	movs	r2, #0
 8000776:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000778:	4b14      	ldr	r3, [pc, #80]	@ (80007cc <MX_USART1_UART_Init+0x90>)
 800077a:	2200      	movs	r2, #0
 800077c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800077e:	4b13      	ldr	r3, [pc, #76]	@ (80007cc <MX_USART1_UART_Init+0x90>)
 8000780:	2200      	movs	r2, #0
 8000782:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000784:	4811      	ldr	r0, [pc, #68]	@ (80007cc <MX_USART1_UART_Init+0x90>)
 8000786:	f005 fb3f 	bl	8005e08 <HAL_UART_Init>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000790:	f000 f882 	bl	8000898 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000794:	2100      	movs	r1, #0
 8000796:	480d      	ldr	r0, [pc, #52]	@ (80007cc <MX_USART1_UART_Init+0x90>)
 8000798:	f006 fbb1 	bl	8006efe <HAL_UARTEx_SetTxFifoThreshold>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80007a2:	f000 f879 	bl	8000898 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007a6:	2100      	movs	r1, #0
 80007a8:	4808      	ldr	r0, [pc, #32]	@ (80007cc <MX_USART1_UART_Init+0x90>)
 80007aa:	f006 fbe6 	bl	8006f7a <HAL_UARTEx_SetRxFifoThreshold>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80007b4:	f000 f870 	bl	8000898 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80007b8:	4804      	ldr	r0, [pc, #16]	@ (80007cc <MX_USART1_UART_Init+0x90>)
 80007ba:	f006 fb67 	bl	8006e8c <HAL_UARTEx_DisableFifoMode>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80007c4:	f000 f868 	bl	8000898 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80007c8:	bf00      	nop
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	20000084 	.word	0x20000084
 80007d0:	40013800 	.word	0x40013800

080007d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b08a      	sub	sp, #40	@ 0x28
 80007d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007da:	f107 0314 	add.w	r3, r7, #20
 80007de:	2200      	movs	r2, #0
 80007e0:	601a      	str	r2, [r3, #0]
 80007e2:	605a      	str	r2, [r3, #4]
 80007e4:	609a      	str	r2, [r3, #8]
 80007e6:	60da      	str	r2, [r3, #12]
 80007e8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007ea:	4b29      	ldr	r3, [pc, #164]	@ (8000890 <MX_GPIO_Init+0xbc>)
 80007ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80007f0:	4a27      	ldr	r2, [pc, #156]	@ (8000890 <MX_GPIO_Init+0xbc>)
 80007f2:	f043 0310 	orr.w	r3, r3, #16
 80007f6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80007fa:	4b25      	ldr	r3, [pc, #148]	@ (8000890 <MX_GPIO_Init+0xbc>)
 80007fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000800:	f003 0310 	and.w	r3, r3, #16
 8000804:	613b      	str	r3, [r7, #16]
 8000806:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000808:	4b21      	ldr	r3, [pc, #132]	@ (8000890 <MX_GPIO_Init+0xbc>)
 800080a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800080e:	4a20      	ldr	r2, [pc, #128]	@ (8000890 <MX_GPIO_Init+0xbc>)
 8000810:	f043 0304 	orr.w	r3, r3, #4
 8000814:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000818:	4b1d      	ldr	r3, [pc, #116]	@ (8000890 <MX_GPIO_Init+0xbc>)
 800081a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800081e:	f003 0304 	and.w	r3, r3, #4
 8000822:	60fb      	str	r3, [r7, #12]
 8000824:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000826:	4b1a      	ldr	r3, [pc, #104]	@ (8000890 <MX_GPIO_Init+0xbc>)
 8000828:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800082c:	4a18      	ldr	r2, [pc, #96]	@ (8000890 <MX_GPIO_Init+0xbc>)
 800082e:	f043 0301 	orr.w	r3, r3, #1
 8000832:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000836:	4b16      	ldr	r3, [pc, #88]	@ (8000890 <MX_GPIO_Init+0xbc>)
 8000838:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800083c:	f003 0301 	and.w	r3, r3, #1
 8000840:	60bb      	str	r3, [r7, #8]
 8000842:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000844:	4b12      	ldr	r3, [pc, #72]	@ (8000890 <MX_GPIO_Init+0xbc>)
 8000846:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800084a:	4a11      	ldr	r2, [pc, #68]	@ (8000890 <MX_GPIO_Init+0xbc>)
 800084c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000850:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000854:	4b0e      	ldr	r3, [pc, #56]	@ (8000890 <MX_GPIO_Init+0xbc>)
 8000856:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800085a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800085e:	607b      	str	r3, [r7, #4]
 8000860:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED_GREEN_Pin_Pin|LED_RED_Pin_Pin, GPIO_PIN_RESET);
 8000862:	2200      	movs	r2, #0
 8000864:	2103      	movs	r1, #3
 8000866:	480b      	ldr	r0, [pc, #44]	@ (8000894 <MX_GPIO_Init+0xc0>)
 8000868:	f000 fed8 	bl	800161c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_GREEN_Pin_Pin LED_RED_Pin_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin_Pin|LED_RED_Pin_Pin;
 800086c:	2303      	movs	r3, #3
 800086e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000870:	2301      	movs	r3, #1
 8000872:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000874:	2300      	movs	r3, #0
 8000876:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000878:	2300      	movs	r3, #0
 800087a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800087c:	f107 0314 	add.w	r3, r7, #20
 8000880:	4619      	mov	r1, r3
 8000882:	4804      	ldr	r0, [pc, #16]	@ (8000894 <MX_GPIO_Init+0xc0>)
 8000884:	f000 fcf2 	bl	800126c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000888:	bf00      	nop
 800088a:	3728      	adds	r7, #40	@ 0x28
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	46020c00 	.word	0x46020c00
 8000894:	42021000 	.word	0x42021000

08000898 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800089c:	b672      	cpsid	i
}
 800089e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008a0:	bf00      	nop
 80008a2:	e7fd      	b.n	80008a0 <Error_Handler+0x8>

080008a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	b083      	sub	sp, #12
 80008a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80008aa:	4b0a      	ldr	r3, [pc, #40]	@ (80008d4 <HAL_MspInit+0x30>)
 80008ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80008b0:	4a08      	ldr	r2, [pc, #32]	@ (80008d4 <HAL_MspInit+0x30>)
 80008b2:	f043 0304 	orr.w	r3, r3, #4
 80008b6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80008ba:	4b06      	ldr	r3, [pc, #24]	@ (80008d4 <HAL_MspInit+0x30>)
 80008bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80008c0:	f003 0304 	and.w	r3, r3, #4
 80008c4:	607b      	str	r3, [r7, #4]
 80008c6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008c8:	bf00      	nop
 80008ca:	370c      	adds	r7, #12
 80008cc:	46bd      	mov	sp, r7
 80008ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d2:	4770      	bx	lr
 80008d4:	46020c00 	.word	0x46020c00

080008d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b0c2      	sub	sp, #264	@ 0x108
 80008dc:	af00      	add	r7, sp, #0
 80008de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80008e2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80008e6:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e8:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 80008ec:	2200      	movs	r2, #0
 80008ee:	601a      	str	r2, [r3, #0]
 80008f0:	605a      	str	r2, [r3, #4]
 80008f2:	609a      	str	r2, [r3, #8]
 80008f4:	60da      	str	r2, [r3, #12]
 80008f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008f8:	f107 0310 	add.w	r3, r7, #16
 80008fc:	22e0      	movs	r2, #224	@ 0xe0
 80008fe:	2100      	movs	r1, #0
 8000900:	4618      	mov	r0, r3
 8000902:	f006 fcde 	bl	80072c2 <memset>
  if(huart->Instance==USART1)
 8000906:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800090a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	4a2f      	ldr	r2, [pc, #188]	@ (80009d0 <HAL_UART_MspInit+0xf8>)
 8000914:	4293      	cmp	r3, r2
 8000916:	d155      	bne.n	80009c4 <HAL_UART_MspInit+0xec>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000918:	f04f 0201 	mov.w	r2, #1
 800091c:	f04f 0300 	mov.w	r3, #0
 8000920:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000924:	2300      	movs	r3, #0
 8000926:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000928:	f107 0310 	add.w	r3, r7, #16
 800092c:	4618      	mov	r0, r3
 800092e:	f002 fa6f 	bl	8002e10 <HAL_RCCEx_PeriphCLKConfig>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <HAL_UART_MspInit+0x64>
    {
      Error_Handler();
 8000938:	f7ff ffae 	bl	8000898 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800093c:	4b25      	ldr	r3, [pc, #148]	@ (80009d4 <HAL_UART_MspInit+0xfc>)
 800093e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000942:	4a24      	ldr	r2, [pc, #144]	@ (80009d4 <HAL_UART_MspInit+0xfc>)
 8000944:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000948:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 800094c:	4b21      	ldr	r3, [pc, #132]	@ (80009d4 <HAL_UART_MspInit+0xfc>)
 800094e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000952:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000956:	60fb      	str	r3, [r7, #12]
 8000958:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800095a:	4b1e      	ldr	r3, [pc, #120]	@ (80009d4 <HAL_UART_MspInit+0xfc>)
 800095c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000960:	4a1c      	ldr	r2, [pc, #112]	@ (80009d4 <HAL_UART_MspInit+0xfc>)
 8000962:	f043 0301 	orr.w	r3, r3, #1
 8000966:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800096a:	4b1a      	ldr	r3, [pc, #104]	@ (80009d4 <HAL_UART_MspInit+0xfc>)
 800096c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000970:	f003 0201 	and.w	r2, r3, #1
 8000974:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000978:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800097c:	601a      	str	r2, [r3, #0]
 800097e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000982:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000986:	681b      	ldr	r3, [r3, #0]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 8000988:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800098c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000990:	2302      	movs	r3, #2
 8000992:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000996:	2300      	movs	r3, #0
 8000998:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099c:	2300      	movs	r3, #0
 800099e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80009a2:	2307      	movs	r3, #7
 80009a4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009a8:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 80009ac:	4619      	mov	r1, r3
 80009ae:	480a      	ldr	r0, [pc, #40]	@ (80009d8 <HAL_UART_MspInit+0x100>)
 80009b0:	f000 fc5c 	bl	800126c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80009b4:	2200      	movs	r2, #0
 80009b6:	2100      	movs	r1, #0
 80009b8:	203d      	movs	r0, #61	@ 0x3d
 80009ba:	f000 fad5 	bl	8000f68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80009be:	203d      	movs	r0, #61	@ 0x3d
 80009c0:	f000 faec 	bl	8000f9c <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80009c4:	bf00      	nop
 80009c6:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	40013800 	.word	0x40013800
 80009d4:	46020c00 	.word	0x46020c00
 80009d8:	42020000 	.word	0x42020000

080009dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009e0:	bf00      	nop
 80009e2:	e7fd      	b.n	80009e0 <NMI_Handler+0x4>

080009e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009e8:	bf00      	nop
 80009ea:	e7fd      	b.n	80009e8 <HardFault_Handler+0x4>

080009ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009f0:	bf00      	nop
 80009f2:	e7fd      	b.n	80009f0 <MemManage_Handler+0x4>

080009f4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009f8:	bf00      	nop
 80009fa:	e7fd      	b.n	80009f8 <BusFault_Handler+0x4>

080009fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a00:	bf00      	nop
 8000a02:	e7fd      	b.n	8000a00 <UsageFault_Handler+0x4>

08000a04 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a08:	bf00      	nop
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a10:	4770      	bx	lr

08000a12 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a12:	b480      	push	{r7}
 8000a14:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a16:	bf00      	nop
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1e:	4770      	bx	lr

08000a20 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a24:	bf00      	nop
 8000a26:	46bd      	mov	sp, r7
 8000a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2c:	4770      	bx	lr

08000a2e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a2e:	b580      	push	{r7, lr}
 8000a30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a32:	f000 f99d 	bl	8000d70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a36:	bf00      	nop
 8000a38:	bd80      	pop	{r7, pc}
	...

08000a3c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000a40:	4802      	ldr	r0, [pc, #8]	@ (8000a4c <USART1_IRQHandler+0x10>)
 8000a42:	f005 fabf 	bl	8005fc4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000a46:	bf00      	nop
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	20000084 	.word	0x20000084

08000a50 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b086      	sub	sp, #24
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	60f8      	str	r0, [r7, #12]
 8000a58:	60b9      	str	r1, [r7, #8]
 8000a5a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	617b      	str	r3, [r7, #20]
 8000a60:	e00a      	b.n	8000a78 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a62:	f3af 8000 	nop.w
 8000a66:	4601      	mov	r1, r0
 8000a68:	68bb      	ldr	r3, [r7, #8]
 8000a6a:	1c5a      	adds	r2, r3, #1
 8000a6c:	60ba      	str	r2, [r7, #8]
 8000a6e:	b2ca      	uxtb	r2, r1
 8000a70:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a72:	697b      	ldr	r3, [r7, #20]
 8000a74:	3301      	adds	r3, #1
 8000a76:	617b      	str	r3, [r7, #20]
 8000a78:	697a      	ldr	r2, [r7, #20]
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	429a      	cmp	r2, r3
 8000a7e:	dbf0      	blt.n	8000a62 <_read+0x12>
  }

  return len;
 8000a80:	687b      	ldr	r3, [r7, #4]
}
 8000a82:	4618      	mov	r0, r3
 8000a84:	3718      	adds	r7, #24
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}

08000a8a <_close>:
  }
  return len;
}

int _close(int file)
{
 8000a8a:	b480      	push	{r7}
 8000a8c:	b083      	sub	sp, #12
 8000a8e:	af00      	add	r7, sp, #0
 8000a90:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000a92:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a96:	4618      	mov	r0, r3
 8000a98:	370c      	adds	r7, #12
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa0:	4770      	bx	lr

08000aa2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000aa2:	b480      	push	{r7}
 8000aa4:	b083      	sub	sp, #12
 8000aa6:	af00      	add	r7, sp, #0
 8000aa8:	6078      	str	r0, [r7, #4]
 8000aaa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000aac:	683b      	ldr	r3, [r7, #0]
 8000aae:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000ab2:	605a      	str	r2, [r3, #4]
  return 0;
 8000ab4:	2300      	movs	r3, #0
}
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	370c      	adds	r7, #12
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr

08000ac2 <_isatty>:

int _isatty(int file)
{
 8000ac2:	b480      	push	{r7}
 8000ac4:	b083      	sub	sp, #12
 8000ac6:	af00      	add	r7, sp, #0
 8000ac8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000aca:	2301      	movs	r3, #1
}
 8000acc:	4618      	mov	r0, r3
 8000ace:	370c      	adds	r7, #12
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad6:	4770      	bx	lr

08000ad8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b085      	sub	sp, #20
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	60f8      	str	r0, [r7, #12]
 8000ae0:	60b9      	str	r1, [r7, #8]
 8000ae2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000ae4:	2300      	movs	r3, #0
}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	3714      	adds	r7, #20
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr
	...

08000af4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b086      	sub	sp, #24
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000afc:	4a14      	ldr	r2, [pc, #80]	@ (8000b50 <_sbrk+0x5c>)
 8000afe:	4b15      	ldr	r3, [pc, #84]	@ (8000b54 <_sbrk+0x60>)
 8000b00:	1ad3      	subs	r3, r2, r3
 8000b02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b04:	697b      	ldr	r3, [r7, #20]
 8000b06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b08:	4b13      	ldr	r3, [pc, #76]	@ (8000b58 <_sbrk+0x64>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d102      	bne.n	8000b16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b10:	4b11      	ldr	r3, [pc, #68]	@ (8000b58 <_sbrk+0x64>)
 8000b12:	4a12      	ldr	r2, [pc, #72]	@ (8000b5c <_sbrk+0x68>)
 8000b14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b16:	4b10      	ldr	r3, [pc, #64]	@ (8000b58 <_sbrk+0x64>)
 8000b18:	681a      	ldr	r2, [r3, #0]
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	4413      	add	r3, r2
 8000b1e:	693a      	ldr	r2, [r7, #16]
 8000b20:	429a      	cmp	r2, r3
 8000b22:	d207      	bcs.n	8000b34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b24:	f006 fc1c 	bl	8007360 <__errno>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	220c      	movs	r2, #12
 8000b2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b2e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b32:	e009      	b.n	8000b48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b34:	4b08      	ldr	r3, [pc, #32]	@ (8000b58 <_sbrk+0x64>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b3a:	4b07      	ldr	r3, [pc, #28]	@ (8000b58 <_sbrk+0x64>)
 8000b3c:	681a      	ldr	r2, [r3, #0]
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	4413      	add	r3, r2
 8000b42:	4a05      	ldr	r2, [pc, #20]	@ (8000b58 <_sbrk+0x64>)
 8000b44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b46:	68fb      	ldr	r3, [r7, #12]
}
 8000b48:	4618      	mov	r0, r3
 8000b4a:	3718      	adds	r7, #24
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	202f0000 	.word	0x202f0000
 8000b54:	00000400 	.word	0x00000400
 8000b58:	2000011c 	.word	0x2000011c
 8000b5c:	20000270 	.word	0x20000270

08000b60 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000b64:	4b18      	ldr	r3, [pc, #96]	@ (8000bc8 <SystemInit+0x68>)
 8000b66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b6a:	4a17      	ldr	r2, [pc, #92]	@ (8000bc8 <SystemInit+0x68>)
 8000b6c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b70:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8000b74:	4b15      	ldr	r3, [pc, #84]	@ (8000bcc <SystemInit+0x6c>)
 8000b76:	2201      	movs	r2, #1
 8000b78:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8000b7a:	4b14      	ldr	r3, [pc, #80]	@ (8000bcc <SystemInit+0x6c>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8000b80:	4b12      	ldr	r3, [pc, #72]	@ (8000bcc <SystemInit+0x6c>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8000b86:	4b11      	ldr	r3, [pc, #68]	@ (8000bcc <SystemInit+0x6c>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8000b8c:	4b0f      	ldr	r3, [pc, #60]	@ (8000bcc <SystemInit+0x6c>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4a0e      	ldr	r2, [pc, #56]	@ (8000bcc <SystemInit+0x6c>)
 8000b92:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 8000b96:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8000b9a:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8000b9c:	4b0b      	ldr	r3, [pc, #44]	@ (8000bcc <SystemInit+0x6c>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8000ba2:	4b0a      	ldr	r3, [pc, #40]	@ (8000bcc <SystemInit+0x6c>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	4a09      	ldr	r2, [pc, #36]	@ (8000bcc <SystemInit+0x6c>)
 8000ba8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000bac:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8000bae:	4b07      	ldr	r3, [pc, #28]	@ (8000bcc <SystemInit+0x6c>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000bb4:	4b04      	ldr	r3, [pc, #16]	@ (8000bc8 <SystemInit+0x68>)
 8000bb6:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000bba:	609a      	str	r2, [r3, #8]
  #endif
}
 8000bbc:	bf00      	nop
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop
 8000bc8:	e000ed00 	.word	0xe000ed00
 8000bcc:	46020c00 	.word	0x46020c00

08000bd0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8000bd0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c08 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000bd4:	f7ff ffc4 	bl	8000b60 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000bd8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000bda:	e003      	b.n	8000be4 <LoopCopyDataInit>

08000bdc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000bdc:	4b0b      	ldr	r3, [pc, #44]	@ (8000c0c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000bde:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000be0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000be2:	3104      	adds	r1, #4

08000be4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000be4:	480a      	ldr	r0, [pc, #40]	@ (8000c10 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000be6:	4b0b      	ldr	r3, [pc, #44]	@ (8000c14 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000be8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000bea:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000bec:	d3f6      	bcc.n	8000bdc <CopyDataInit>
	ldr	r2, =_sbss
 8000bee:	4a0a      	ldr	r2, [pc, #40]	@ (8000c18 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000bf0:	e002      	b.n	8000bf8 <LoopFillZerobss>

08000bf2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000bf2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000bf4:	f842 3b04 	str.w	r3, [r2], #4

08000bf8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000bf8:	4b08      	ldr	r3, [pc, #32]	@ (8000c1c <LoopForever+0x16>)
	cmp	r2, r3
 8000bfa:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000bfc:	d3f9      	bcc.n	8000bf2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bfe:	f006 fbb5 	bl	800736c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c02:	f7ff fcf7 	bl	80005f4 <main>

08000c06 <LoopForever>:

LoopForever:
    b LoopForever
 8000c06:	e7fe      	b.n	8000c06 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8000c08:	202f0000 	.word	0x202f0000
	ldr	r3, =_sidata
 8000c0c:	0800807c 	.word	0x0800807c
	ldr	r0, =_sdata
 8000c10:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000c14:	20000068 	.word	0x20000068
	ldr	r2, =_sbss
 8000c18:	20000068 	.word	0x20000068
	ldr	r3, = _ebss
 8000c1c:	20000270 	.word	0x20000270

08000c20 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c20:	e7fe      	b.n	8000c20 <ADC1_2_IRQHandler>
	...

08000c24 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c28:	4b12      	ldr	r3, [pc, #72]	@ (8000c74 <HAL_Init+0x50>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4a11      	ldr	r2, [pc, #68]	@ (8000c74 <HAL_Init+0x50>)
 8000c2e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c32:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c34:	2003      	movs	r0, #3
 8000c36:	f000 f98c 	bl	8000f52 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8000c3a:	f001 ff0b 	bl	8002a54 <HAL_RCC_GetSysClockFreq>
 8000c3e:	4602      	mov	r2, r0
 8000c40:	4b0d      	ldr	r3, [pc, #52]	@ (8000c78 <HAL_Init+0x54>)
 8000c42:	6a1b      	ldr	r3, [r3, #32]
 8000c44:	f003 030f 	and.w	r3, r3, #15
 8000c48:	490c      	ldr	r1, [pc, #48]	@ (8000c7c <HAL_Init+0x58>)
 8000c4a:	5ccb      	ldrb	r3, [r1, r3]
 8000c4c:	fa22 f303 	lsr.w	r3, r2, r3
 8000c50:	4a0b      	ldr	r2, [pc, #44]	@ (8000c80 <HAL_Init+0x5c>)
 8000c52:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000c54:	2004      	movs	r0, #4
 8000c56:	f000 f9d1 	bl	8000ffc <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c5a:	200f      	movs	r0, #15
 8000c5c:	f000 f812 	bl	8000c84 <HAL_InitTick>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <HAL_Init+0x46>
  {
    return HAL_ERROR;
 8000c66:	2301      	movs	r3, #1
 8000c68:	e002      	b.n	8000c70 <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000c6a:	f7ff fe1b 	bl	80008a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c6e:	2300      	movs	r3, #0
}
 8000c70:	4618      	mov	r0, r3
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	40022000 	.word	0x40022000
 8000c78:	46020c00 	.word	0x46020c00
 8000c7c:	08007f38 	.word	0x08007f38
 8000c80:	20000000 	.word	0x20000000

08000c84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b084      	sub	sp, #16
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8000c90:	4b33      	ldr	r3, [pc, #204]	@ (8000d60 <HAL_InitTick+0xdc>)
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d101      	bne.n	8000c9c <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8000c98:	2301      	movs	r3, #1
 8000c9a:	e05c      	b.n	8000d56 <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8000c9c:	4b31      	ldr	r3, [pc, #196]	@ (8000d64 <HAL_InitTick+0xe0>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	f003 0304 	and.w	r3, r3, #4
 8000ca4:	2b04      	cmp	r3, #4
 8000ca6:	d10c      	bne.n	8000cc2 <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8000ca8:	4b2f      	ldr	r3, [pc, #188]	@ (8000d68 <HAL_InitTick+0xe4>)
 8000caa:	681a      	ldr	r2, [r3, #0]
 8000cac:	4b2c      	ldr	r3, [pc, #176]	@ (8000d60 <HAL_InitTick+0xdc>)
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000cb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cba:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cbe:	60fb      	str	r3, [r7, #12]
 8000cc0:	e037      	b.n	8000d32 <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8000cc2:	f000 f9f3 	bl	80010ac <HAL_SYSTICK_GetCLKSourceConfig>
 8000cc6:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8000cc8:	68bb      	ldr	r3, [r7, #8]
 8000cca:	2b02      	cmp	r3, #2
 8000ccc:	d023      	beq.n	8000d16 <HAL_InitTick+0x92>
 8000cce:	68bb      	ldr	r3, [r7, #8]
 8000cd0:	2b02      	cmp	r3, #2
 8000cd2:	d82d      	bhi.n	8000d30 <HAL_InitTick+0xac>
 8000cd4:	68bb      	ldr	r3, [r7, #8]
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d003      	beq.n	8000ce2 <HAL_InitTick+0x5e>
 8000cda:	68bb      	ldr	r3, [r7, #8]
 8000cdc:	2b01      	cmp	r3, #1
 8000cde:	d00d      	beq.n	8000cfc <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8000ce0:	e026      	b.n	8000d30 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8000ce2:	4b21      	ldr	r3, [pc, #132]	@ (8000d68 <HAL_InitTick+0xe4>)
 8000ce4:	681a      	ldr	r2, [r3, #0]
 8000ce6:	4b1e      	ldr	r3, [pc, #120]	@ (8000d60 <HAL_InitTick+0xdc>)
 8000ce8:	781b      	ldrb	r3, [r3, #0]
 8000cea:	4619      	mov	r1, r3
 8000cec:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8000cf0:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cf8:	60fb      	str	r3, [r7, #12]
        break;
 8000cfa:	e01a      	b.n	8000d32 <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8000cfc:	4b18      	ldr	r3, [pc, #96]	@ (8000d60 <HAL_InitTick+0xdc>)
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	461a      	mov	r2, r3
 8000d02:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d06:	fbb3 f3f2 	udiv	r3, r3, r2
 8000d0a:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8000d0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d12:	60fb      	str	r3, [r7, #12]
        break;
 8000d14:	e00d      	b.n	8000d32 <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8000d16:	4b12      	ldr	r3, [pc, #72]	@ (8000d60 <HAL_InitTick+0xdc>)
 8000d18:	781b      	ldrb	r3, [r3, #0]
 8000d1a:	461a      	mov	r2, r3
 8000d1c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d20:	fbb3 f3f2 	udiv	r3, r3, r2
 8000d24:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000d28:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d2c:	60fb      	str	r3, [r7, #12]
        break;
 8000d2e:	e000      	b.n	8000d32 <HAL_InitTick+0xae>
        break;
 8000d30:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8000d32:	68f8      	ldr	r0, [r7, #12]
 8000d34:	f000 f940 	bl	8000fb8 <HAL_SYSTICK_Config>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8000d3e:	2301      	movs	r3, #1
 8000d40:	e009      	b.n	8000d56 <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d42:	2200      	movs	r2, #0
 8000d44:	6879      	ldr	r1, [r7, #4]
 8000d46:	f04f 30ff 	mov.w	r0, #4294967295
 8000d4a:	f000 f90d 	bl	8000f68 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8000d4e:	4a07      	ldr	r2, [pc, #28]	@ (8000d6c <HAL_InitTick+0xe8>)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8000d54:	2300      	movs	r3, #0
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	3710      	adds	r7, #16
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	20000008 	.word	0x20000008
 8000d64:	e000e010 	.word	0xe000e010
 8000d68:	20000000 	.word	0x20000000
 8000d6c:	20000004 	.word	0x20000004

08000d70 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d74:	4b06      	ldr	r3, [pc, #24]	@ (8000d90 <HAL_IncTick+0x20>)
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	461a      	mov	r2, r3
 8000d7a:	4b06      	ldr	r3, [pc, #24]	@ (8000d94 <HAL_IncTick+0x24>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	4413      	add	r3, r2
 8000d80:	4a04      	ldr	r2, [pc, #16]	@ (8000d94 <HAL_IncTick+0x24>)
 8000d82:	6013      	str	r3, [r2, #0]
}
 8000d84:	bf00      	nop
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop
 8000d90:	20000008 	.word	0x20000008
 8000d94:	20000120 	.word	0x20000120

08000d98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d9c:	4b03      	ldr	r3, [pc, #12]	@ (8000dac <HAL_GetTick+0x14>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
}
 8000da0:	4618      	mov	r0, r3
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop
 8000dac:	20000120 	.word	0x20000120

08000db0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b084      	sub	sp, #16
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000db8:	f7ff ffee 	bl	8000d98 <HAL_GetTick>
 8000dbc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dc8:	d005      	beq.n	8000dd6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dca:	4b0a      	ldr	r3, [pc, #40]	@ (8000df4 <HAL_Delay+0x44>)
 8000dcc:	781b      	ldrb	r3, [r3, #0]
 8000dce:	461a      	mov	r2, r3
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	4413      	add	r3, r2
 8000dd4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000dd6:	bf00      	nop
 8000dd8:	f7ff ffde 	bl	8000d98 <HAL_GetTick>
 8000ddc:	4602      	mov	r2, r0
 8000dde:	68bb      	ldr	r3, [r7, #8]
 8000de0:	1ad3      	subs	r3, r2, r3
 8000de2:	68fa      	ldr	r2, [r7, #12]
 8000de4:	429a      	cmp	r2, r3
 8000de6:	d8f7      	bhi.n	8000dd8 <HAL_Delay+0x28>
  {
  }
}
 8000de8:	bf00      	nop
 8000dea:	bf00      	nop
 8000dec:	3710      	adds	r7, #16
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	20000008 	.word	0x20000008

08000df8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b085      	sub	sp, #20
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	f003 0307 	and.w	r3, r3, #7
 8000e06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e08:	4b0c      	ldr	r3, [pc, #48]	@ (8000e3c <__NVIC_SetPriorityGrouping+0x44>)
 8000e0a:	68db      	ldr	r3, [r3, #12]
 8000e0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e0e:	68ba      	ldr	r2, [r7, #8]
 8000e10:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e14:	4013      	ands	r3, r2
 8000e16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e1c:	68bb      	ldr	r3, [r7, #8]
 8000e1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e20:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e2a:	4a04      	ldr	r2, [pc, #16]	@ (8000e3c <__NVIC_SetPriorityGrouping+0x44>)
 8000e2c:	68bb      	ldr	r3, [r7, #8]
 8000e2e:	60d3      	str	r3, [r2, #12]
}
 8000e30:	bf00      	nop
 8000e32:	3714      	adds	r7, #20
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr
 8000e3c:	e000ed00 	.word	0xe000ed00

08000e40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e44:	4b04      	ldr	r3, [pc, #16]	@ (8000e58 <__NVIC_GetPriorityGrouping+0x18>)
 8000e46:	68db      	ldr	r3, [r3, #12]
 8000e48:	0a1b      	lsrs	r3, r3, #8
 8000e4a:	f003 0307 	and.w	r3, r3, #7
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	46bd      	mov	sp, r7
 8000e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e56:	4770      	bx	lr
 8000e58:	e000ed00 	.word	0xe000ed00

08000e5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b083      	sub	sp, #12
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	4603      	mov	r3, r0
 8000e64:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000e66:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	db0b      	blt.n	8000e86 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e6e:	88fb      	ldrh	r3, [r7, #6]
 8000e70:	f003 021f 	and.w	r2, r3, #31
 8000e74:	4907      	ldr	r1, [pc, #28]	@ (8000e94 <__NVIC_EnableIRQ+0x38>)
 8000e76:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e7a:	095b      	lsrs	r3, r3, #5
 8000e7c:	2001      	movs	r0, #1
 8000e7e:	fa00 f202 	lsl.w	r2, r0, r2
 8000e82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e86:	bf00      	nop
 8000e88:	370c      	adds	r7, #12
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
 8000e94:	e000e100 	.word	0xe000e100

08000e98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	6039      	str	r1, [r7, #0]
 8000ea2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000ea4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	db0a      	blt.n	8000ec2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	b2da      	uxtb	r2, r3
 8000eb0:	490c      	ldr	r1, [pc, #48]	@ (8000ee4 <__NVIC_SetPriority+0x4c>)
 8000eb2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000eb6:	0112      	lsls	r2, r2, #4
 8000eb8:	b2d2      	uxtb	r2, r2
 8000eba:	440b      	add	r3, r1
 8000ebc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ec0:	e00a      	b.n	8000ed8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	b2da      	uxtb	r2, r3
 8000ec6:	4908      	ldr	r1, [pc, #32]	@ (8000ee8 <__NVIC_SetPriority+0x50>)
 8000ec8:	88fb      	ldrh	r3, [r7, #6]
 8000eca:	f003 030f 	and.w	r3, r3, #15
 8000ece:	3b04      	subs	r3, #4
 8000ed0:	0112      	lsls	r2, r2, #4
 8000ed2:	b2d2      	uxtb	r2, r2
 8000ed4:	440b      	add	r3, r1
 8000ed6:	761a      	strb	r2, [r3, #24]
}
 8000ed8:	bf00      	nop
 8000eda:	370c      	adds	r7, #12
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr
 8000ee4:	e000e100 	.word	0xe000e100
 8000ee8:	e000ed00 	.word	0xe000ed00

08000eec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b089      	sub	sp, #36	@ 0x24
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	60f8      	str	r0, [r7, #12]
 8000ef4:	60b9      	str	r1, [r7, #8]
 8000ef6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	f003 0307 	and.w	r3, r3, #7
 8000efe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f00:	69fb      	ldr	r3, [r7, #28]
 8000f02:	f1c3 0307 	rsb	r3, r3, #7
 8000f06:	2b04      	cmp	r3, #4
 8000f08:	bf28      	it	cs
 8000f0a:	2304      	movcs	r3, #4
 8000f0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f0e:	69fb      	ldr	r3, [r7, #28]
 8000f10:	3304      	adds	r3, #4
 8000f12:	2b06      	cmp	r3, #6
 8000f14:	d902      	bls.n	8000f1c <NVIC_EncodePriority+0x30>
 8000f16:	69fb      	ldr	r3, [r7, #28]
 8000f18:	3b03      	subs	r3, #3
 8000f1a:	e000      	b.n	8000f1e <NVIC_EncodePriority+0x32>
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f20:	f04f 32ff 	mov.w	r2, #4294967295
 8000f24:	69bb      	ldr	r3, [r7, #24]
 8000f26:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2a:	43da      	mvns	r2, r3
 8000f2c:	68bb      	ldr	r3, [r7, #8]
 8000f2e:	401a      	ands	r2, r3
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f34:	f04f 31ff 	mov.w	r1, #4294967295
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f3e:	43d9      	mvns	r1, r3
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f44:	4313      	orrs	r3, r2
         );
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	3724      	adds	r7, #36	@ 0x24
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr

08000f52 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f52:	b580      	push	{r7, lr}
 8000f54:	b082      	sub	sp, #8
 8000f56:	af00      	add	r7, sp, #0
 8000f58:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f5a:	6878      	ldr	r0, [r7, #4]
 8000f5c:	f7ff ff4c 	bl	8000df8 <__NVIC_SetPriorityGrouping>
}
 8000f60:	bf00      	nop
 8000f62:	3708      	adds	r7, #8
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}

08000f68 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b086      	sub	sp, #24
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	4603      	mov	r3, r0
 8000f70:	60b9      	str	r1, [r7, #8]
 8000f72:	607a      	str	r2, [r7, #4]
 8000f74:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f76:	f7ff ff63 	bl	8000e40 <__NVIC_GetPriorityGrouping>
 8000f7a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f7c:	687a      	ldr	r2, [r7, #4]
 8000f7e:	68b9      	ldr	r1, [r7, #8]
 8000f80:	6978      	ldr	r0, [r7, #20]
 8000f82:	f7ff ffb3 	bl	8000eec <NVIC_EncodePriority>
 8000f86:	4602      	mov	r2, r0
 8000f88:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000f8c:	4611      	mov	r1, r2
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f7ff ff82 	bl	8000e98 <__NVIC_SetPriority>
}
 8000f94:	bf00      	nop
 8000f96:	3718      	adds	r7, #24
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}

08000f9c <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fa6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000faa:	4618      	mov	r0, r3
 8000fac:	f7ff ff56 	bl	8000e5c <__NVIC_EnableIRQ>
}
 8000fb0:	bf00      	nop
 8000fb2:	3708      	adds	r7, #8
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}

08000fb8 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b083      	sub	sp, #12
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	3b01      	subs	r3, #1
 8000fc4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000fc8:	d301      	bcc.n	8000fce <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8000fca:	2301      	movs	r3, #1
 8000fcc:	e00d      	b.n	8000fea <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8000fce:	4a0a      	ldr	r2, [pc, #40]	@ (8000ff8 <HAL_SYSTICK_Config+0x40>)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	3b01      	subs	r3, #1
 8000fd4:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8000fd6:	4b08      	ldr	r3, [pc, #32]	@ (8000ff8 <HAL_SYSTICK_Config+0x40>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8000fdc:	4b06      	ldr	r3, [pc, #24]	@ (8000ff8 <HAL_SYSTICK_Config+0x40>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a05      	ldr	r2, [pc, #20]	@ (8000ff8 <HAL_SYSTICK_Config+0x40>)
 8000fe2:	f043 0303 	orr.w	r3, r3, #3
 8000fe6:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8000fe8:	2300      	movs	r3, #0
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	370c      	adds	r7, #12
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	e000e010 	.word	0xe000e010

08000ffc <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b083      	sub	sp, #12
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	2b04      	cmp	r3, #4
 8001008:	d844      	bhi.n	8001094 <HAL_SYSTICK_CLKSourceConfig+0x98>
 800100a:	a201      	add	r2, pc, #4	@ (adr r2, 8001010 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 800100c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001010:	08001033 	.word	0x08001033
 8001014:	08001051 	.word	0x08001051
 8001018:	08001073 	.word	0x08001073
 800101c:	08001095 	.word	0x08001095
 8001020:	08001025 	.word	0x08001025
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001024:	4b1f      	ldr	r3, [pc, #124]	@ (80010a4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4a1e      	ldr	r2, [pc, #120]	@ (80010a4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800102a:	f043 0304 	orr.w	r3, r3, #4
 800102e:	6013      	str	r3, [r2, #0]
      break;
 8001030:	e031      	b.n	8001096 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001032:	4b1c      	ldr	r3, [pc, #112]	@ (80010a4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	4a1b      	ldr	r2, [pc, #108]	@ (80010a4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001038:	f023 0304 	bic.w	r3, r3, #4
 800103c:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 800103e:	4b1a      	ldr	r3, [pc, #104]	@ (80010a8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001040:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001044:	4a18      	ldr	r2, [pc, #96]	@ (80010a8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001046:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800104a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 800104e:	e022      	b.n	8001096 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001050:	4b14      	ldr	r3, [pc, #80]	@ (80010a4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a13      	ldr	r2, [pc, #76]	@ (80010a4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001056:	f023 0304 	bic.w	r3, r3, #4
 800105a:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 800105c:	4b12      	ldr	r3, [pc, #72]	@ (80010a8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800105e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001062:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8001066:	4a10      	ldr	r2, [pc, #64]	@ (80010a8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001068:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800106c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8001070:	e011      	b.n	8001096 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001072:	4b0c      	ldr	r3, [pc, #48]	@ (80010a4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4a0b      	ldr	r2, [pc, #44]	@ (80010a4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001078:	f023 0304 	bic.w	r3, r3, #4
 800107c:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 800107e:	4b0a      	ldr	r3, [pc, #40]	@ (80010a8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001080:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001084:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8001088:	4a07      	ldr	r2, [pc, #28]	@ (80010a8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800108a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800108e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8001092:	e000      	b.n	8001096 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8001094:	bf00      	nop
  }
}
 8001096:	bf00      	nop
 8001098:	370c      	adds	r7, #12
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	e000e010 	.word	0xe000e010
 80010a8:	46020c00 	.word	0x46020c00

080010ac <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 80010b2:	4b19      	ldr	r3, [pc, #100]	@ (8001118 <HAL_SYSTICK_GetCLKSourceConfig+0x6c>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f003 0304 	and.w	r3, r3, #4
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d002      	beq.n	80010c4 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 80010be:	2304      	movs	r3, #4
 80010c0:	607b      	str	r3, [r7, #4]
 80010c2:	e021      	b.n	8001108 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL);
 80010c4:	4b15      	ldr	r3, [pc, #84]	@ (800111c <HAL_SYSTICK_GetCLKSourceConfig+0x70>)
 80010c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010ca:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 80010ce:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80010d6:	d011      	beq.n	80010fc <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80010de:	d810      	bhi.n	8001102 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d004      	beq.n	80010f0 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80010ec:	d003      	beq.n	80010f6 <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 80010ee:	e008      	b.n	8001102 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80010f0:	2300      	movs	r3, #0
 80010f2:	607b      	str	r3, [r7, #4]
        break;
 80010f4:	e008      	b.n	8001108 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 80010f6:	2301      	movs	r3, #1
 80010f8:	607b      	str	r3, [r7, #4]
        break;
 80010fa:	e005      	b.n	8001108 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 80010fc:	2302      	movs	r3, #2
 80010fe:	607b      	str	r3, [r7, #4]
        break;
 8001100:	e002      	b.n	8001108 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8001102:	2300      	movs	r3, #0
 8001104:	607b      	str	r3, [r7, #4]
        break;
 8001106:	bf00      	nop
    }
  }
  return systick_source;
 8001108:	687b      	ldr	r3, [r7, #4]
}
 800110a:	4618      	mov	r0, r3
 800110c:	370c      	adds	r7, #12
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	e000e010 	.word	0xe000e010
 800111c:	46020c00 	.word	0x46020c00

08001120 <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b084      	sub	sp, #16
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 8001128:	f7ff fe36 	bl	8000d98 <HAL_GetTick>
 800112c:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d101      	bne.n	8001138 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001134:	2301      	movs	r3, #1
 8001136:	e06b      	b.n	8001210 <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800113e:	b2db      	uxtb	r3, r3
 8001140:	2b02      	cmp	r3, #2
 8001142:	d008      	beq.n	8001156 <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	2220      	movs	r2, #32
 8001148:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	2200      	movs	r2, #0
 800114e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 8001152:	2301      	movs	r3, #1
 8001154:	e05c      	b.n	8001210 <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	695a      	ldr	r2, [r3, #20]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f042 0204 	orr.w	r2, r2, #4
 8001164:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	2205      	movs	r2, #5
 800116a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 800116e:	e020      	b.n	80011b2 <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8001170:	f7ff fe12 	bl	8000d98 <HAL_GetTick>
 8001174:	4602      	mov	r2, r0
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	1ad3      	subs	r3, r2, r3
 800117a:	2b05      	cmp	r3, #5
 800117c:	d919      	bls.n	80011b2 <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001182:	f043 0210 	orr.w	r2, r3, #16
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	2203      	movs	r2, #3
 800118e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001196:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800119a:	2b00      	cmp	r3, #0
 800119c:	d003      	beq.n	80011a6 <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80011a2:	2201      	movs	r2, #1
 80011a4:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	2200      	movs	r2, #0
 80011aa:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        return HAL_ERROR;
 80011ae:	2301      	movs	r3, #1
 80011b0:	e02e      	b.n	8001210 <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	691b      	ldr	r3, [r3, #16]
 80011b8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d0d7      	beq.n	8001170 <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	695a      	ldr	r2, [r3, #20]
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f042 0202 	orr.w	r2, r2, #2
 80011ce:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	2204      	movs	r2, #4
 80011d4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 80011e0:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	2201      	movs	r2, #1
 80011e6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80011ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d007      	beq.n	8001206 <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80011fa:	2201      	movs	r2, #1
 80011fc:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	2200      	movs	r2, #0
 8001204:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	2200      	movs	r2, #0
 800120a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800120e:	2300      	movs	r3, #0
}
 8001210:	4618      	mov	r0, r3
 8001212:	3710      	adds	r7, #16
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}

08001218 <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d101      	bne.n	800122a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001226:	2301      	movs	r3, #1
 8001228:	e019      	b.n	800125e <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001230:	b2db      	uxtb	r3, r3
 8001232:	2b02      	cmp	r3, #2
 8001234:	d004      	beq.n	8001240 <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	2220      	movs	r2, #32
 800123a:	659a      	str	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 800123c:	2301      	movs	r3, #1
 800123e:	e00e      	b.n	800125e <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	2204      	movs	r2, #4
 8001244:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	695b      	ldr	r3, [r3, #20]
 800124e:	687a      	ldr	r2, [r7, #4]
 8001250:	6812      	ldr	r2, [r2, #0]
 8001252:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001256:	f043 0304 	orr.w	r3, r3, #4
 800125a:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 800125c:	2300      	movs	r3, #0
}
 800125e:	4618      	mov	r0, r3
 8001260:	370c      	adds	r7, #12
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr
	...

0800126c <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 800126c:	b480      	push	{r7}
 800126e:	b089      	sub	sp, #36	@ 0x24
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
 8001274:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8001276:	2300      	movs	r3, #0
 8001278:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800127e:	e1ba      	b.n	80015f6 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	681a      	ldr	r2, [r3, #0]
 8001284:	2101      	movs	r1, #1
 8001286:	697b      	ldr	r3, [r7, #20]
 8001288:	fa01 f303 	lsl.w	r3, r1, r3
 800128c:	4013      	ands	r3, r2
 800128e:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	2b00      	cmp	r3, #0
 8001298:	f000 81aa 	beq.w	80015f0 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	4a55      	ldr	r2, [pc, #340]	@ (80013f4 <HAL_GPIO_Init+0x188>)
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d15d      	bne.n	8001360 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 80012aa:	2201      	movs	r2, #1
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	fa02 f303 	lsl.w	r3, r2, r3
 80012b2:	43db      	mvns	r3, r3
 80012b4:	69fa      	ldr	r2, [r7, #28]
 80012b6:	4013      	ands	r3, r2
 80012b8:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	f003 0201 	and.w	r2, r3, #1
 80012c2:	697b      	ldr	r3, [r7, #20]
 80012c4:	fa02 f303 	lsl.w	r3, r2, r3
 80012c8:	69fa      	ldr	r2, [r7, #28]
 80012ca:	4313      	orrs	r3, r2
 80012cc:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	69fa      	ldr	r2, [r7, #28]
 80012d2:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 80012d4:	4a48      	ldr	r2, [pc, #288]	@ (80013f8 <HAL_GPIO_Init+0x18c>)
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80012dc:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 80012de:	4a46      	ldr	r2, [pc, #280]	@ (80013f8 <HAL_GPIO_Init+0x18c>)
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	00db      	lsls	r3, r3, #3
 80012e4:	4413      	add	r3, r2
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 80012ea:	69bb      	ldr	r3, [r7, #24]
 80012ec:	08da      	lsrs	r2, r3, #3
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	3208      	adds	r2, #8
 80012f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012f6:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 80012f8:	69bb      	ldr	r3, [r7, #24]
 80012fa:	f003 0307 	and.w	r3, r3, #7
 80012fe:	009b      	lsls	r3, r3, #2
 8001300:	220f      	movs	r2, #15
 8001302:	fa02 f303 	lsl.w	r3, r2, r3
 8001306:	43db      	mvns	r3, r3
 8001308:	69fa      	ldr	r2, [r7, #28]
 800130a:	4013      	ands	r3, r2
 800130c:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 800130e:	69bb      	ldr	r3, [r7, #24]
 8001310:	f003 0307 	and.w	r3, r3, #7
 8001314:	009b      	lsls	r3, r3, #2
 8001316:	220b      	movs	r2, #11
 8001318:	fa02 f303 	lsl.w	r3, r2, r3
 800131c:	69fa      	ldr	r2, [r7, #28]
 800131e:	4313      	orrs	r3, r2
 8001320:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8001322:	69bb      	ldr	r3, [r7, #24]
 8001324:	08da      	lsrs	r2, r3, #3
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	3208      	adds	r2, #8
 800132a:	69f9      	ldr	r1, [r7, #28]
 800132c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8001330:	693b      	ldr	r3, [r7, #16]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8001336:	69bb      	ldr	r3, [r7, #24]
 8001338:	005b      	lsls	r3, r3, #1
 800133a:	2203      	movs	r2, #3
 800133c:	fa02 f303 	lsl.w	r3, r2, r3
 8001340:	43db      	mvns	r3, r3
 8001342:	69fa      	ldr	r2, [r7, #28]
 8001344:	4013      	ands	r3, r2
 8001346:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 8001348:	69bb      	ldr	r3, [r7, #24]
 800134a:	005b      	lsls	r3, r3, #1
 800134c:	2202      	movs	r2, #2
 800134e:	fa02 f303 	lsl.w	r3, r2, r3
 8001352:	69fa      	ldr	r2, [r7, #28]
 8001354:	4313      	orrs	r3, r2
 8001356:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8001358:	693b      	ldr	r3, [r7, #16]
 800135a:	69fa      	ldr	r2, [r7, #28]
 800135c:	601a      	str	r2, [r3, #0]
 800135e:	e067      	b.n	8001430 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	2b02      	cmp	r3, #2
 8001366:	d003      	beq.n	8001370 <HAL_GPIO_Init+0x104>
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	2b12      	cmp	r3, #18
 800136e:	d145      	bne.n	80013fc <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	08da      	lsrs	r2, r3, #3
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	3208      	adds	r2, #8
 8001378:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800137c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 800137e:	697b      	ldr	r3, [r7, #20]
 8001380:	f003 0307 	and.w	r3, r3, #7
 8001384:	009b      	lsls	r3, r3, #2
 8001386:	220f      	movs	r2, #15
 8001388:	fa02 f303 	lsl.w	r3, r2, r3
 800138c:	43db      	mvns	r3, r3
 800138e:	69fa      	ldr	r2, [r7, #28]
 8001390:	4013      	ands	r3, r2
 8001392:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	691b      	ldr	r3, [r3, #16]
 8001398:	f003 020f 	and.w	r2, r3, #15
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	f003 0307 	and.w	r3, r3, #7
 80013a2:	009b      	lsls	r3, r3, #2
 80013a4:	fa02 f303 	lsl.w	r3, r2, r3
 80013a8:	69fa      	ldr	r2, [r7, #28]
 80013aa:	4313      	orrs	r3, r2
 80013ac:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	08da      	lsrs	r2, r3, #3
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	3208      	adds	r2, #8
 80013b6:	69f9      	ldr	r1, [r7, #28]
 80013b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 80013c2:	69bb      	ldr	r3, [r7, #24]
 80013c4:	005b      	lsls	r3, r3, #1
 80013c6:	2203      	movs	r2, #3
 80013c8:	fa02 f303 	lsl.w	r3, r2, r3
 80013cc:	43db      	mvns	r3, r3
 80013ce:	69fa      	ldr	r2, [r7, #28]
 80013d0:	4013      	ands	r3, r2
 80013d2:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	f003 0203 	and.w	r2, r3, #3
 80013dc:	69bb      	ldr	r3, [r7, #24]
 80013de:	005b      	lsls	r3, r3, #1
 80013e0:	fa02 f303 	lsl.w	r3, r2, r3
 80013e4:	69fa      	ldr	r2, [r7, #28]
 80013e6:	4313      	orrs	r3, r2
 80013e8:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80013ea:	693b      	ldr	r3, [r7, #16]
 80013ec:	69fa      	ldr	r2, [r7, #28]
 80013ee:	601a      	str	r2, [r3, #0]
 80013f0:	e01e      	b.n	8001430 <HAL_GPIO_Init+0x1c4>
 80013f2:	bf00      	nop
 80013f4:	46020000 	.word	0x46020000
 80013f8:	08007f90 	.word	0x08007f90
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 80013fc:	693b      	ldr	r3, [r7, #16]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8001402:	69bb      	ldr	r3, [r7, #24]
 8001404:	005b      	lsls	r3, r3, #1
 8001406:	2203      	movs	r2, #3
 8001408:	fa02 f303 	lsl.w	r3, r2, r3
 800140c:	43db      	mvns	r3, r3
 800140e:	69fa      	ldr	r2, [r7, #28]
 8001410:	4013      	ands	r3, r2
 8001412:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	f003 0203 	and.w	r2, r3, #3
 800141c:	69bb      	ldr	r3, [r7, #24]
 800141e:	005b      	lsls	r3, r3, #1
 8001420:	fa02 f303 	lsl.w	r3, r2, r3
 8001424:	69fa      	ldr	r2, [r7, #28]
 8001426:	4313      	orrs	r3, r2
 8001428:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	69fa      	ldr	r2, [r7, #28]
 800142e:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	2b01      	cmp	r3, #1
 8001436:	d00b      	beq.n	8001450 <HAL_GPIO_Init+0x1e4>
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	2b02      	cmp	r3, #2
 800143e:	d007      	beq.n	8001450 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001444:	2b11      	cmp	r3, #17
 8001446:	d003      	beq.n	8001450 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	2b12      	cmp	r3, #18
 800144e:	d130      	bne.n	80014b2 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8001450:	693b      	ldr	r3, [r7, #16]
 8001452:	689b      	ldr	r3, [r3, #8]
 8001454:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001456:	69bb      	ldr	r3, [r7, #24]
 8001458:	005b      	lsls	r3, r3, #1
 800145a:	2203      	movs	r2, #3
 800145c:	fa02 f303 	lsl.w	r3, r2, r3
 8001460:	43db      	mvns	r3, r3
 8001462:	69fa      	ldr	r2, [r7, #28]
 8001464:	4013      	ands	r3, r2
 8001466:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	68da      	ldr	r2, [r3, #12]
 800146c:	69bb      	ldr	r3, [r7, #24]
 800146e:	005b      	lsls	r3, r3, #1
 8001470:	fa02 f303 	lsl.w	r3, r2, r3
 8001474:	69fa      	ldr	r2, [r7, #28]
 8001476:	4313      	orrs	r3, r2
 8001478:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 800147a:	693b      	ldr	r3, [r7, #16]
 800147c:	69fa      	ldr	r2, [r7, #28]
 800147e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8001480:	693b      	ldr	r3, [r7, #16]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8001486:	2201      	movs	r2, #1
 8001488:	69bb      	ldr	r3, [r7, #24]
 800148a:	fa02 f303 	lsl.w	r3, r2, r3
 800148e:	43db      	mvns	r3, r3
 8001490:	69fa      	ldr	r2, [r7, #28]
 8001492:	4013      	ands	r3, r2
 8001494:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	091b      	lsrs	r3, r3, #4
 800149c:	f003 0201 	and.w	r2, r3, #1
 80014a0:	69bb      	ldr	r3, [r7, #24]
 80014a2:	fa02 f303 	lsl.w	r3, r2, r3
 80014a6:	69fa      	ldr	r2, [r7, #28]
 80014a8:	4313      	orrs	r3, r2
 80014aa:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 80014ac:	693b      	ldr	r3, [r7, #16]
 80014ae:	69fa      	ldr	r2, [r7, #28]
 80014b0:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	2b03      	cmp	r3, #3
 80014b8:	d017      	beq.n	80014ea <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	68db      	ldr	r3, [r3, #12]
 80014be:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 80014c0:	69bb      	ldr	r3, [r7, #24]
 80014c2:	005b      	lsls	r3, r3, #1
 80014c4:	2203      	movs	r2, #3
 80014c6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ca:	43db      	mvns	r3, r3
 80014cc:	69fa      	ldr	r2, [r7, #28]
 80014ce:	4013      	ands	r3, r2
 80014d0:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	689a      	ldr	r2, [r3, #8]
 80014d6:	69bb      	ldr	r3, [r7, #24]
 80014d8:	005b      	lsls	r3, r3, #1
 80014da:	fa02 f303 	lsl.w	r3, r2, r3
 80014de:	69fa      	ldr	r2, [r7, #28]
 80014e0:	4313      	orrs	r3, r2
 80014e2:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 80014e4:	693b      	ldr	r3, [r7, #16]
 80014e6:	69fa      	ldr	r2, [r7, #28]
 80014e8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d07c      	beq.n	80015f0 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80014f6:	4a47      	ldr	r2, [pc, #284]	@ (8001614 <HAL_GPIO_Init+0x3a8>)
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	089b      	lsrs	r3, r3, #2
 80014fc:	3318      	adds	r3, #24
 80014fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001502:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	f003 0303 	and.w	r3, r3, #3
 800150a:	00db      	lsls	r3, r3, #3
 800150c:	220f      	movs	r2, #15
 800150e:	fa02 f303 	lsl.w	r3, r2, r3
 8001512:	43db      	mvns	r3, r3
 8001514:	69fa      	ldr	r2, [r7, #28]
 8001516:	4013      	ands	r3, r2
 8001518:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	0a9a      	lsrs	r2, r3, #10
 800151e:	4b3e      	ldr	r3, [pc, #248]	@ (8001618 <HAL_GPIO_Init+0x3ac>)
 8001520:	4013      	ands	r3, r2
 8001522:	697a      	ldr	r2, [r7, #20]
 8001524:	f002 0203 	and.w	r2, r2, #3
 8001528:	00d2      	lsls	r2, r2, #3
 800152a:	4093      	lsls	r3, r2
 800152c:	69fa      	ldr	r2, [r7, #28]
 800152e:	4313      	orrs	r3, r2
 8001530:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8001532:	4938      	ldr	r1, [pc, #224]	@ (8001614 <HAL_GPIO_Init+0x3a8>)
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	089b      	lsrs	r3, r3, #2
 8001538:	3318      	adds	r3, #24
 800153a:	69fa      	ldr	r2, [r7, #28]
 800153c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8001540:	4b34      	ldr	r3, [pc, #208]	@ (8001614 <HAL_GPIO_Init+0x3a8>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	43db      	mvns	r3, r3
 800154a:	69fa      	ldr	r2, [r7, #28]
 800154c:	4013      	ands	r3, r2
 800154e:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001558:	2b00      	cmp	r3, #0
 800155a:	d003      	beq.n	8001564 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 800155c:	69fa      	ldr	r2, [r7, #28]
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	4313      	orrs	r3, r2
 8001562:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8001564:	4a2b      	ldr	r2, [pc, #172]	@ (8001614 <HAL_GPIO_Init+0x3a8>)
 8001566:	69fb      	ldr	r3, [r7, #28]
 8001568:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 800156a:	4b2a      	ldr	r3, [pc, #168]	@ (8001614 <HAL_GPIO_Init+0x3a8>)
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	43db      	mvns	r3, r3
 8001574:	69fa      	ldr	r2, [r7, #28]
 8001576:	4013      	ands	r3, r2
 8001578:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001582:	2b00      	cmp	r3, #0
 8001584:	d003      	beq.n	800158e <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 8001586:	69fa      	ldr	r2, [r7, #28]
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	4313      	orrs	r3, r2
 800158c:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 800158e:	4a21      	ldr	r2, [pc, #132]	@ (8001614 <HAL_GPIO_Init+0x3a8>)
 8001590:	69fb      	ldr	r3, [r7, #28]
 8001592:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8001594:	4b1f      	ldr	r3, [pc, #124]	@ (8001614 <HAL_GPIO_Init+0x3a8>)
 8001596:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800159a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	43db      	mvns	r3, r3
 80015a0:	69fa      	ldr	r2, [r7, #28]
 80015a2:	4013      	ands	r3, r2
 80015a4:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d003      	beq.n	80015ba <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 80015b2:	69fa      	ldr	r2, [r7, #28]
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	4313      	orrs	r3, r2
 80015b8:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 80015ba:	4a16      	ldr	r2, [pc, #88]	@ (8001614 <HAL_GPIO_Init+0x3a8>)
 80015bc:	69fb      	ldr	r3, [r7, #28]
 80015be:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 80015c2:	4b14      	ldr	r3, [pc, #80]	@ (8001614 <HAL_GPIO_Init+0x3a8>)
 80015c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80015c8:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	43db      	mvns	r3, r3
 80015ce:	69fa      	ldr	r2, [r7, #28]
 80015d0:	4013      	ands	r3, r2
 80015d2:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d003      	beq.n	80015e8 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 80015e0:	69fa      	ldr	r2, [r7, #28]
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	4313      	orrs	r3, r2
 80015e6:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 80015e8:	4a0a      	ldr	r2, [pc, #40]	@ (8001614 <HAL_GPIO_Init+0x3a8>)
 80015ea:	69fb      	ldr	r3, [r7, #28]
 80015ec:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	3301      	adds	r3, #1
 80015f4:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	681a      	ldr	r2, [r3, #0]
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	fa22 f303 	lsr.w	r3, r2, r3
 8001600:	2b00      	cmp	r3, #0
 8001602:	f47f ae3d 	bne.w	8001280 <HAL_GPIO_Init+0x14>
  }
}
 8001606:	bf00      	nop
 8001608:	bf00      	nop
 800160a:	3724      	adds	r7, #36	@ 0x24
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr
 8001614:	46022000 	.word	0x46022000
 8001618:	002f7f7f 	.word	0x002f7f7f

0800161c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800161c:	b480      	push	{r7}
 800161e:	b083      	sub	sp, #12
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
 8001624:	460b      	mov	r3, r1
 8001626:	807b      	strh	r3, [r7, #2]
 8001628:	4613      	mov	r3, r2
 800162a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800162c:	787b      	ldrb	r3, [r7, #1]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d003      	beq.n	800163a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001632:	887a      	ldrh	r2, [r7, #2]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8001638:	e002      	b.n	8001640 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 800163a:	887a      	ldrh	r2, [r7, #2]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001640:	bf00      	nop
 8001642:	370c      	adds	r7, #12
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr

0800164c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800164c:	b480      	push	{r7}
 800164e:	b085      	sub	sp, #20
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
 8001654:	460b      	mov	r3, r1
 8001656:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	695b      	ldr	r3, [r3, #20]
 800165c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800165e:	887a      	ldrh	r2, [r7, #2]
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	4013      	ands	r3, r2
 8001664:	041a      	lsls	r2, r3, #16
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	43d9      	mvns	r1, r3
 800166a:	887b      	ldrh	r3, [r7, #2]
 800166c:	400b      	ands	r3, r1
 800166e:	431a      	orrs	r2, r3
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	619a      	str	r2, [r3, #24]
}
 8001674:	bf00      	nop
 8001676:	3714      	adds	r7, #20
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr

08001680 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8001680:	b480      	push	{r7}
 8001682:	b085      	sub	sp, #20
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001688:	2300      	movs	r3, #0
 800168a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 800168c:	4b0b      	ldr	r3, [pc, #44]	@ (80016bc <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f003 0301 	and.w	r3, r3, #1
 8001694:	2b00      	cmp	r3, #0
 8001696:	d002      	beq.n	800169e <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8001698:	2301      	movs	r3, #1
 800169a:	73fb      	strb	r3, [r7, #15]
 800169c:	e007      	b.n	80016ae <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 800169e:	4b07      	ldr	r3, [pc, #28]	@ (80016bc <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f023 0204 	bic.w	r2, r3, #4
 80016a6:	4905      	ldr	r1, [pc, #20]	@ (80016bc <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	4313      	orrs	r3, r2
 80016ac:	600b      	str	r3, [r1, #0]
  }

  return status;
 80016ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	3714      	adds	r7, #20
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr
 80016bc:	40030400 	.word	0x40030400

080016c0 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 80016c4:	4b05      	ldr	r3, [pc, #20]	@ (80016dc <HAL_ICACHE_Enable+0x1c>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a04      	ldr	r2, [pc, #16]	@ (80016dc <HAL_ICACHE_Enable+0x1c>)
 80016ca:	f043 0301 	orr.w	r3, r3, #1
 80016ce:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80016d0:	2300      	movs	r3, #0
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr
 80016dc:	40030400 	.word	0x40030400

080016e0 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b085      	sub	sp, #20
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 80016e8:	4b39      	ldr	r3, [pc, #228]	@ (80017d0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80016ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80016ec:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80016f0:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 80016f2:	68ba      	ldr	r2, [r7, #8]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	429a      	cmp	r2, r3
 80016f8:	d10b      	bne.n	8001712 <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001700:	d905      	bls.n	800170e <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8001702:	4b33      	ldr	r3, [pc, #204]	@ (80017d0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8001704:	68db      	ldr	r3, [r3, #12]
 8001706:	4a32      	ldr	r2, [pc, #200]	@ (80017d0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8001708:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800170c:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 800170e:	2300      	movs	r3, #0
 8001710:	e057      	b.n	80017c2 <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001718:	d90a      	bls.n	8001730 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 800171a:	4b2d      	ldr	r3, [pc, #180]	@ (80017d0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800171c:	68db      	ldr	r3, [r3, #12]
 800171e:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	4313      	orrs	r3, r2
 8001726:	4a2a      	ldr	r2, [pc, #168]	@ (80017d0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8001728:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800172c:	60d3      	str	r3, [r2, #12]
 800172e:	e007      	b.n	8001740 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8001730:	4b27      	ldr	r3, [pc, #156]	@ (80017d0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8001732:	68db      	ldr	r3, [r3, #12]
 8001734:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8001738:	4925      	ldr	r1, [pc, #148]	@ (80017d0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	4313      	orrs	r3, r2
 800173e:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8001740:	4b24      	ldr	r3, [pc, #144]	@ (80017d4 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a24      	ldr	r2, [pc, #144]	@ (80017d8 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8001746:	fba2 2303 	umull	r2, r3, r2, r3
 800174a:	099b      	lsrs	r3, r3, #6
 800174c:	2232      	movs	r2, #50	@ 0x32
 800174e:	fb02 f303 	mul.w	r3, r2, r3
 8001752:	4a21      	ldr	r2, [pc, #132]	@ (80017d8 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8001754:	fba2 2303 	umull	r2, r3, r2, r3
 8001758:	099b      	lsrs	r3, r3, #6
 800175a:	3301      	adds	r3, #1
 800175c:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800175e:	e002      	b.n	8001766 <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	3b01      	subs	r3, #1
 8001764:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8001766:	4b1a      	ldr	r3, [pc, #104]	@ (80017d0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8001768:	68db      	ldr	r3, [r3, #12]
 800176a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800176e:	2b00      	cmp	r3, #0
 8001770:	d102      	bne.n	8001778 <HAL_PWREx_ControlVoltageScaling+0x98>
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d1f3      	bne.n	8001760 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d01b      	beq.n	80017b6 <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800177e:	4b15      	ldr	r3, [pc, #84]	@ (80017d4 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a15      	ldr	r2, [pc, #84]	@ (80017d8 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8001784:	fba2 2303 	umull	r2, r3, r2, r3
 8001788:	099b      	lsrs	r3, r3, #6
 800178a:	2232      	movs	r2, #50	@ 0x32
 800178c:	fb02 f303 	mul.w	r3, r2, r3
 8001790:	4a11      	ldr	r2, [pc, #68]	@ (80017d8 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8001792:	fba2 2303 	umull	r2, r3, r2, r3
 8001796:	099b      	lsrs	r3, r3, #6
 8001798:	3301      	adds	r3, #1
 800179a:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 800179c:	e002      	b.n	80017a4 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	3b01      	subs	r3, #1
 80017a2:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 80017a4:	4b0a      	ldr	r3, [pc, #40]	@ (80017d0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80017a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80017a8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d102      	bne.n	80017b6 <HAL_PWREx_ControlVoltageScaling+0xd6>
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d1f3      	bne.n	800179e <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d101      	bne.n	80017c0 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 80017bc:	2303      	movs	r3, #3
 80017be:	e000      	b.n	80017c2 <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 80017c0:	2300      	movs	r3, #0
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3714      	adds	r7, #20
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop
 80017d0:	46020800 	.word	0x46020800
 80017d4:	20000000 	.word	0x20000000
 80017d8:	10624dd3 	.word	0x10624dd3

080017dc <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 80017e0:	4b04      	ldr	r3, [pc, #16]	@ (80017f4 <HAL_PWREx_GetVoltageRange+0x18>)
 80017e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80017e4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr
 80017f2:	bf00      	nop
 80017f4:	46020800 	.word	0x46020800

080017f8 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b085      	sub	sp, #20
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8001800:	4b22      	ldr	r3, [pc, #136]	@ (800188c <HAL_PWREx_ConfigSupply+0x94>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a22      	ldr	r2, [pc, #136]	@ (8001890 <HAL_PWREx_ConfigSupply+0x98>)
 8001806:	fba2 2303 	umull	r2, r3, r2, r3
 800180a:	099b      	lsrs	r3, r3, #6
 800180c:	2232      	movs	r2, #50	@ 0x32
 800180e:	fb02 f303 	mul.w	r3, r2, r3
 8001812:	4a1f      	ldr	r2, [pc, #124]	@ (8001890 <HAL_PWREx_ConfigSupply+0x98>)
 8001814:	fba2 2303 	umull	r2, r3, r2, r3
 8001818:	099b      	lsrs	r3, r3, #6
 800181a:	3301      	adds	r3, #1
 800181c:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d113      	bne.n	800184c <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8001824:	4b1b      	ldr	r3, [pc, #108]	@ (8001894 <HAL_PWREx_ConfigSupply+0x9c>)
 8001826:	689b      	ldr	r3, [r3, #8]
 8001828:	4a1a      	ldr	r2, [pc, #104]	@ (8001894 <HAL_PWREx_ConfigSupply+0x9c>)
 800182a:	f023 0302 	bic.w	r3, r3, #2
 800182e:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8001830:	e002      	b.n	8001838 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	3b01      	subs	r3, #1
 8001836:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8001838:	4b16      	ldr	r3, [pc, #88]	@ (8001894 <HAL_PWREx_ConfigSupply+0x9c>)
 800183a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800183c:	f003 0302 	and.w	r3, r3, #2
 8001840:	2b02      	cmp	r3, #2
 8001842:	d116      	bne.n	8001872 <HAL_PWREx_ConfigSupply+0x7a>
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d1f3      	bne.n	8001832 <HAL_PWREx_ConfigSupply+0x3a>
 800184a:	e012      	b.n	8001872 <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 800184c:	4b11      	ldr	r3, [pc, #68]	@ (8001894 <HAL_PWREx_ConfigSupply+0x9c>)
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	4a10      	ldr	r2, [pc, #64]	@ (8001894 <HAL_PWREx_ConfigSupply+0x9c>)
 8001852:	f043 0302 	orr.w	r3, r3, #2
 8001856:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8001858:	e002      	b.n	8001860 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	3b01      	subs	r3, #1
 800185e:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8001860:	4b0c      	ldr	r3, [pc, #48]	@ (8001894 <HAL_PWREx_ConfigSupply+0x9c>)
 8001862:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001864:	f003 0302 	and.w	r3, r3, #2
 8001868:	2b00      	cmp	r3, #0
 800186a:	d102      	bne.n	8001872 <HAL_PWREx_ConfigSupply+0x7a>
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d1f3      	bne.n	800185a <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d101      	bne.n	800187c <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 8001878:	2303      	movs	r3, #3
 800187a:	e000      	b.n	800187e <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 800187c:	2300      	movs	r3, #0
}
 800187e:	4618      	mov	r0, r3
 8001880:	3714      	adds	r7, #20
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr
 800188a:	bf00      	nop
 800188c:	20000000 	.word	0x20000000
 8001890:	10624dd3 	.word	0x10624dd3
 8001894:	46020800 	.word	0x46020800

08001898 <HAL_PWREx_DisableUCPDDeadBattery>:
  *         pull-down or to handover control to the UCPD (the UCPD must be
  *         initialized before doing the disable).
  * @retval None.
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->UCPDR, PWR_UCPDR_UCPD_DBDIS);
 800189c:	4b05      	ldr	r3, [pc, #20]	@ (80018b4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800189e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018a0:	4a04      	ldr	r2, [pc, #16]	@ (80018b4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80018a2:	f043 0301 	orr.w	r3, r3, #1
 80018a6:	62d3      	str	r3, [r2, #44]	@ 0x2c
}
 80018a8:	bf00      	nop
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr
 80018b2:	bf00      	nop
 80018b4:	46020800 	.word	0x46020800

080018b8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b08e      	sub	sp, #56	@ 0x38
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 80018c0:	2300      	movs	r3, #0
 80018c2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d102      	bne.n	80018d2 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80018cc:	2301      	movs	r3, #1
 80018ce:	f000 bec8 	b.w	8002662 <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018d2:	4b99      	ldr	r3, [pc, #612]	@ (8001b38 <HAL_RCC_OscConfig+0x280>)
 80018d4:	69db      	ldr	r3, [r3, #28]
 80018d6:	f003 030c 	and.w	r3, r3, #12
 80018da:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80018dc:	4b96      	ldr	r3, [pc, #600]	@ (8001b38 <HAL_RCC_OscConfig+0x280>)
 80018de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018e0:	f003 0303 	and.w	r3, r3, #3
 80018e4:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f003 0310 	and.w	r3, r3, #16
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	f000 816c 	beq.w	8001bcc <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80018f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d007      	beq.n	800190a <HAL_RCC_OscConfig+0x52>
 80018fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80018fc:	2b0c      	cmp	r3, #12
 80018fe:	f040 80de 	bne.w	8001abe <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001902:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001904:	2b01      	cmp	r3, #1
 8001906:	f040 80da 	bne.w	8001abe <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	69db      	ldr	r3, [r3, #28]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d102      	bne.n	8001918 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	f000 bea5 	b.w	8002662 <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800191c:	4b86      	ldr	r3, [pc, #536]	@ (8001b38 <HAL_RCC_OscConfig+0x280>)
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001924:	2b00      	cmp	r3, #0
 8001926:	d004      	beq.n	8001932 <HAL_RCC_OscConfig+0x7a>
 8001928:	4b83      	ldr	r3, [pc, #524]	@ (8001b38 <HAL_RCC_OscConfig+0x280>)
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8001930:	e005      	b.n	800193e <HAL_RCC_OscConfig+0x86>
 8001932:	4b81      	ldr	r3, [pc, #516]	@ (8001b38 <HAL_RCC_OscConfig+0x280>)
 8001934:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001938:	041b      	lsls	r3, r3, #16
 800193a:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800193e:	4293      	cmp	r3, r2
 8001940:	d255      	bcs.n	80019ee <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001942:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001944:	2b00      	cmp	r3, #0
 8001946:	d10a      	bne.n	800195e <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800194c:	4618      	mov	r0, r3
 800194e:	f001 f9d9 	bl	8002d04 <RCC_SetFlashLatencyFromMSIRange>
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	d002      	beq.n	800195e <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 8001958:	2301      	movs	r3, #1
 800195a:	f000 be82 	b.w	8002662 <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800195e:	4b76      	ldr	r3, [pc, #472]	@ (8001b38 <HAL_RCC_OscConfig+0x280>)
 8001960:	689b      	ldr	r3, [r3, #8]
 8001962:	4a75      	ldr	r2, [pc, #468]	@ (8001b38 <HAL_RCC_OscConfig+0x280>)
 8001964:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001968:	6093      	str	r3, [r2, #8]
 800196a:	4b73      	ldr	r3, [pc, #460]	@ (8001b38 <HAL_RCC_OscConfig+0x280>)
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001976:	4970      	ldr	r1, [pc, #448]	@ (8001b38 <HAL_RCC_OscConfig+0x280>)
 8001978:	4313      	orrs	r3, r2
 800197a:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001980:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8001984:	d309      	bcc.n	800199a <HAL_RCC_OscConfig+0xe2>
 8001986:	4b6c      	ldr	r3, [pc, #432]	@ (8001b38 <HAL_RCC_OscConfig+0x280>)
 8001988:	68db      	ldr	r3, [r3, #12]
 800198a:	f023 021f 	bic.w	r2, r3, #31
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6a1b      	ldr	r3, [r3, #32]
 8001992:	4969      	ldr	r1, [pc, #420]	@ (8001b38 <HAL_RCC_OscConfig+0x280>)
 8001994:	4313      	orrs	r3, r2
 8001996:	60cb      	str	r3, [r1, #12]
 8001998:	e07e      	b.n	8001a98 <HAL_RCC_OscConfig+0x1e0>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800199e:	2b00      	cmp	r3, #0
 80019a0:	da0a      	bge.n	80019b8 <HAL_RCC_OscConfig+0x100>
 80019a2:	4b65      	ldr	r3, [pc, #404]	@ (8001b38 <HAL_RCC_OscConfig+0x280>)
 80019a4:	68db      	ldr	r3, [r3, #12]
 80019a6:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6a1b      	ldr	r3, [r3, #32]
 80019ae:	015b      	lsls	r3, r3, #5
 80019b0:	4961      	ldr	r1, [pc, #388]	@ (8001b38 <HAL_RCC_OscConfig+0x280>)
 80019b2:	4313      	orrs	r3, r2
 80019b4:	60cb      	str	r3, [r1, #12]
 80019b6:	e06f      	b.n	8001a98 <HAL_RCC_OscConfig+0x1e0>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80019c0:	d30a      	bcc.n	80019d8 <HAL_RCC_OscConfig+0x120>
 80019c2:	4b5d      	ldr	r3, [pc, #372]	@ (8001b38 <HAL_RCC_OscConfig+0x280>)
 80019c4:	68db      	ldr	r3, [r3, #12]
 80019c6:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6a1b      	ldr	r3, [r3, #32]
 80019ce:	029b      	lsls	r3, r3, #10
 80019d0:	4959      	ldr	r1, [pc, #356]	@ (8001b38 <HAL_RCC_OscConfig+0x280>)
 80019d2:	4313      	orrs	r3, r2
 80019d4:	60cb      	str	r3, [r1, #12]
 80019d6:	e05f      	b.n	8001a98 <HAL_RCC_OscConfig+0x1e0>
 80019d8:	4b57      	ldr	r3, [pc, #348]	@ (8001b38 <HAL_RCC_OscConfig+0x280>)
 80019da:	68db      	ldr	r3, [r3, #12]
 80019dc:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6a1b      	ldr	r3, [r3, #32]
 80019e4:	03db      	lsls	r3, r3, #15
 80019e6:	4954      	ldr	r1, [pc, #336]	@ (8001b38 <HAL_RCC_OscConfig+0x280>)
 80019e8:	4313      	orrs	r3, r2
 80019ea:	60cb      	str	r3, [r1, #12]
 80019ec:	e054      	b.n	8001a98 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80019ee:	4b52      	ldr	r3, [pc, #328]	@ (8001b38 <HAL_RCC_OscConfig+0x280>)
 80019f0:	689b      	ldr	r3, [r3, #8]
 80019f2:	4a51      	ldr	r2, [pc, #324]	@ (8001b38 <HAL_RCC_OscConfig+0x280>)
 80019f4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80019f8:	6093      	str	r3, [r2, #8]
 80019fa:	4b4f      	ldr	r3, [pc, #316]	@ (8001b38 <HAL_RCC_OscConfig+0x280>)
 80019fc:	689b      	ldr	r3, [r3, #8]
 80019fe:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a06:	494c      	ldr	r1, [pc, #304]	@ (8001b38 <HAL_RCC_OscConfig+0x280>)
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a10:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8001a14:	d309      	bcc.n	8001a2a <HAL_RCC_OscConfig+0x172>
 8001a16:	4b48      	ldr	r3, [pc, #288]	@ (8001b38 <HAL_RCC_OscConfig+0x280>)
 8001a18:	68db      	ldr	r3, [r3, #12]
 8001a1a:	f023 021f 	bic.w	r2, r3, #31
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6a1b      	ldr	r3, [r3, #32]
 8001a22:	4945      	ldr	r1, [pc, #276]	@ (8001b38 <HAL_RCC_OscConfig+0x280>)
 8001a24:	4313      	orrs	r3, r2
 8001a26:	60cb      	str	r3, [r1, #12]
 8001a28:	e028      	b.n	8001a7c <HAL_RCC_OscConfig+0x1c4>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	da0a      	bge.n	8001a48 <HAL_RCC_OscConfig+0x190>
 8001a32:	4b41      	ldr	r3, [pc, #260]	@ (8001b38 <HAL_RCC_OscConfig+0x280>)
 8001a34:	68db      	ldr	r3, [r3, #12]
 8001a36:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6a1b      	ldr	r3, [r3, #32]
 8001a3e:	015b      	lsls	r3, r3, #5
 8001a40:	493d      	ldr	r1, [pc, #244]	@ (8001b38 <HAL_RCC_OscConfig+0x280>)
 8001a42:	4313      	orrs	r3, r2
 8001a44:	60cb      	str	r3, [r1, #12]
 8001a46:	e019      	b.n	8001a7c <HAL_RCC_OscConfig+0x1c4>
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a4c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001a50:	d30a      	bcc.n	8001a68 <HAL_RCC_OscConfig+0x1b0>
 8001a52:	4b39      	ldr	r3, [pc, #228]	@ (8001b38 <HAL_RCC_OscConfig+0x280>)
 8001a54:	68db      	ldr	r3, [r3, #12]
 8001a56:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6a1b      	ldr	r3, [r3, #32]
 8001a5e:	029b      	lsls	r3, r3, #10
 8001a60:	4935      	ldr	r1, [pc, #212]	@ (8001b38 <HAL_RCC_OscConfig+0x280>)
 8001a62:	4313      	orrs	r3, r2
 8001a64:	60cb      	str	r3, [r1, #12]
 8001a66:	e009      	b.n	8001a7c <HAL_RCC_OscConfig+0x1c4>
 8001a68:	4b33      	ldr	r3, [pc, #204]	@ (8001b38 <HAL_RCC_OscConfig+0x280>)
 8001a6a:	68db      	ldr	r3, [r3, #12]
 8001a6c:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6a1b      	ldr	r3, [r3, #32]
 8001a74:	03db      	lsls	r3, r3, #15
 8001a76:	4930      	ldr	r1, [pc, #192]	@ (8001b38 <HAL_RCC_OscConfig+0x280>)
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001a7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d10a      	bne.n	8001a98 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a86:	4618      	mov	r0, r3
 8001a88:	f001 f93c 	bl	8002d04 <RCC_SetFlashLatencyFromMSIRange>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d002      	beq.n	8001a98 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	f000 bde5 	b.w	8002662 <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8001a98:	f001 f8de 	bl	8002c58 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001a9c:	4b27      	ldr	r3, [pc, #156]	@ (8001b3c <HAL_RCC_OscConfig+0x284>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f7ff f8ef 	bl	8000c84 <HAL_InitTick>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 8001aac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	f000 808a 	beq.w	8001bca <HAL_RCC_OscConfig+0x312>
        {
          return status;
 8001ab6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001aba:	f000 bdd2 	b.w	8002662 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	69db      	ldr	r3, [r3, #28]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d066      	beq.n	8001b94 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8001ac6:	4b1c      	ldr	r3, [pc, #112]	@ (8001b38 <HAL_RCC_OscConfig+0x280>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a1b      	ldr	r2, [pc, #108]	@ (8001b38 <HAL_RCC_OscConfig+0x280>)
 8001acc:	f043 0301 	orr.w	r3, r3, #1
 8001ad0:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8001ad2:	f7ff f961 	bl	8000d98 <HAL_GetTick>
 8001ad6:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8001ad8:	e009      	b.n	8001aee <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ada:	f7ff f95d 	bl	8000d98 <HAL_GetTick>
 8001ade:	4602      	mov	r2, r0
 8001ae0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ae2:	1ad3      	subs	r3, r2, r3
 8001ae4:	2b02      	cmp	r3, #2
 8001ae6:	d902      	bls.n	8001aee <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8001ae8:	2303      	movs	r3, #3
 8001aea:	f000 bdba 	b.w	8002662 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8001aee:	4b12      	ldr	r3, [pc, #72]	@ (8001b38 <HAL_RCC_OscConfig+0x280>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f003 0304 	and.w	r3, r3, #4
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d0ef      	beq.n	8001ada <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8001afa:	4b0f      	ldr	r3, [pc, #60]	@ (8001b38 <HAL_RCC_OscConfig+0x280>)
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	4a0e      	ldr	r2, [pc, #56]	@ (8001b38 <HAL_RCC_OscConfig+0x280>)
 8001b00:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001b04:	6093      	str	r3, [r2, #8]
 8001b06:	4b0c      	ldr	r3, [pc, #48]	@ (8001b38 <HAL_RCC_OscConfig+0x280>)
 8001b08:	689b      	ldr	r3, [r3, #8]
 8001b0a:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b12:	4909      	ldr	r1, [pc, #36]	@ (8001b38 <HAL_RCC_OscConfig+0x280>)
 8001b14:	4313      	orrs	r3, r2
 8001b16:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b1c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8001b20:	d30e      	bcc.n	8001b40 <HAL_RCC_OscConfig+0x288>
 8001b22:	4b05      	ldr	r3, [pc, #20]	@ (8001b38 <HAL_RCC_OscConfig+0x280>)
 8001b24:	68db      	ldr	r3, [r3, #12]
 8001b26:	f023 021f 	bic.w	r2, r3, #31
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6a1b      	ldr	r3, [r3, #32]
 8001b2e:	4902      	ldr	r1, [pc, #8]	@ (8001b38 <HAL_RCC_OscConfig+0x280>)
 8001b30:	4313      	orrs	r3, r2
 8001b32:	60cb      	str	r3, [r1, #12]
 8001b34:	e04a      	b.n	8001bcc <HAL_RCC_OscConfig+0x314>
 8001b36:	bf00      	nop
 8001b38:	46020c00 	.word	0x46020c00
 8001b3c:	20000004 	.word	0x20000004
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	da0a      	bge.n	8001b5e <HAL_RCC_OscConfig+0x2a6>
 8001b48:	4b98      	ldr	r3, [pc, #608]	@ (8001dac <HAL_RCC_OscConfig+0x4f4>)
 8001b4a:	68db      	ldr	r3, [r3, #12]
 8001b4c:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6a1b      	ldr	r3, [r3, #32]
 8001b54:	015b      	lsls	r3, r3, #5
 8001b56:	4995      	ldr	r1, [pc, #596]	@ (8001dac <HAL_RCC_OscConfig+0x4f4>)
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	60cb      	str	r3, [r1, #12]
 8001b5c:	e036      	b.n	8001bcc <HAL_RCC_OscConfig+0x314>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b66:	d30a      	bcc.n	8001b7e <HAL_RCC_OscConfig+0x2c6>
 8001b68:	4b90      	ldr	r3, [pc, #576]	@ (8001dac <HAL_RCC_OscConfig+0x4f4>)
 8001b6a:	68db      	ldr	r3, [r3, #12]
 8001b6c:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6a1b      	ldr	r3, [r3, #32]
 8001b74:	029b      	lsls	r3, r3, #10
 8001b76:	498d      	ldr	r1, [pc, #564]	@ (8001dac <HAL_RCC_OscConfig+0x4f4>)
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	60cb      	str	r3, [r1, #12]
 8001b7c:	e026      	b.n	8001bcc <HAL_RCC_OscConfig+0x314>
 8001b7e:	4b8b      	ldr	r3, [pc, #556]	@ (8001dac <HAL_RCC_OscConfig+0x4f4>)
 8001b80:	68db      	ldr	r3, [r3, #12]
 8001b82:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6a1b      	ldr	r3, [r3, #32]
 8001b8a:	03db      	lsls	r3, r3, #15
 8001b8c:	4987      	ldr	r1, [pc, #540]	@ (8001dac <HAL_RCC_OscConfig+0x4f4>)
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	60cb      	str	r3, [r1, #12]
 8001b92:	e01b      	b.n	8001bcc <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8001b94:	4b85      	ldr	r3, [pc, #532]	@ (8001dac <HAL_RCC_OscConfig+0x4f4>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a84      	ldr	r2, [pc, #528]	@ (8001dac <HAL_RCC_OscConfig+0x4f4>)
 8001b9a:	f023 0301 	bic.w	r3, r3, #1
 8001b9e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8001ba0:	f7ff f8fa 	bl	8000d98 <HAL_GetTick>
 8001ba4:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8001ba6:	e009      	b.n	8001bbc <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ba8:	f7ff f8f6 	bl	8000d98 <HAL_GetTick>
 8001bac:	4602      	mov	r2, r0
 8001bae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001bb0:	1ad3      	subs	r3, r2, r3
 8001bb2:	2b02      	cmp	r3, #2
 8001bb4:	d902      	bls.n	8001bbc <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 8001bb6:	2303      	movs	r3, #3
 8001bb8:	f000 bd53 	b.w	8002662 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8001bbc:	4b7b      	ldr	r3, [pc, #492]	@ (8001dac <HAL_RCC_OscConfig+0x4f4>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f003 0304 	and.w	r3, r3, #4
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d1ef      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x2f0>
 8001bc8:	e000      	b.n	8001bcc <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001bca:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f003 0301 	and.w	r3, r3, #1
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	f000 808b 	beq.w	8001cf0 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001bda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001bdc:	2b08      	cmp	r3, #8
 8001bde:	d005      	beq.n	8001bec <HAL_RCC_OscConfig+0x334>
 8001be0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001be2:	2b0c      	cmp	r3, #12
 8001be4:	d109      	bne.n	8001bfa <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001be6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001be8:	2b03      	cmp	r3, #3
 8001bea:	d106      	bne.n	8001bfa <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d17d      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	f000 bd34 	b.w	8002662 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c02:	d106      	bne.n	8001c12 <HAL_RCC_OscConfig+0x35a>
 8001c04:	4b69      	ldr	r3, [pc, #420]	@ (8001dac <HAL_RCC_OscConfig+0x4f4>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a68      	ldr	r2, [pc, #416]	@ (8001dac <HAL_RCC_OscConfig+0x4f4>)
 8001c0a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c0e:	6013      	str	r3, [r2, #0]
 8001c10:	e041      	b.n	8001c96 <HAL_RCC_OscConfig+0x3de>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001c1a:	d112      	bne.n	8001c42 <HAL_RCC_OscConfig+0x38a>
 8001c1c:	4b63      	ldr	r3, [pc, #396]	@ (8001dac <HAL_RCC_OscConfig+0x4f4>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a62      	ldr	r2, [pc, #392]	@ (8001dac <HAL_RCC_OscConfig+0x4f4>)
 8001c22:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c26:	6013      	str	r3, [r2, #0]
 8001c28:	4b60      	ldr	r3, [pc, #384]	@ (8001dac <HAL_RCC_OscConfig+0x4f4>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a5f      	ldr	r2, [pc, #380]	@ (8001dac <HAL_RCC_OscConfig+0x4f4>)
 8001c2e:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8001c32:	6013      	str	r3, [r2, #0]
 8001c34:	4b5d      	ldr	r3, [pc, #372]	@ (8001dac <HAL_RCC_OscConfig+0x4f4>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a5c      	ldr	r2, [pc, #368]	@ (8001dac <HAL_RCC_OscConfig+0x4f4>)
 8001c3a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c3e:	6013      	str	r3, [r2, #0]
 8001c40:	e029      	b.n	8001c96 <HAL_RCC_OscConfig+0x3de>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8001c4a:	d112      	bne.n	8001c72 <HAL_RCC_OscConfig+0x3ba>
 8001c4c:	4b57      	ldr	r3, [pc, #348]	@ (8001dac <HAL_RCC_OscConfig+0x4f4>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a56      	ldr	r2, [pc, #344]	@ (8001dac <HAL_RCC_OscConfig+0x4f4>)
 8001c52:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c56:	6013      	str	r3, [r2, #0]
 8001c58:	4b54      	ldr	r3, [pc, #336]	@ (8001dac <HAL_RCC_OscConfig+0x4f4>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a53      	ldr	r2, [pc, #332]	@ (8001dac <HAL_RCC_OscConfig+0x4f4>)
 8001c5e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001c62:	6013      	str	r3, [r2, #0]
 8001c64:	4b51      	ldr	r3, [pc, #324]	@ (8001dac <HAL_RCC_OscConfig+0x4f4>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a50      	ldr	r2, [pc, #320]	@ (8001dac <HAL_RCC_OscConfig+0x4f4>)
 8001c6a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c6e:	6013      	str	r3, [r2, #0]
 8001c70:	e011      	b.n	8001c96 <HAL_RCC_OscConfig+0x3de>
 8001c72:	4b4e      	ldr	r3, [pc, #312]	@ (8001dac <HAL_RCC_OscConfig+0x4f4>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a4d      	ldr	r2, [pc, #308]	@ (8001dac <HAL_RCC_OscConfig+0x4f4>)
 8001c78:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c7c:	6013      	str	r3, [r2, #0]
 8001c7e:	4b4b      	ldr	r3, [pc, #300]	@ (8001dac <HAL_RCC_OscConfig+0x4f4>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a4a      	ldr	r2, [pc, #296]	@ (8001dac <HAL_RCC_OscConfig+0x4f4>)
 8001c84:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c88:	6013      	str	r3, [r2, #0]
 8001c8a:	4b48      	ldr	r3, [pc, #288]	@ (8001dac <HAL_RCC_OscConfig+0x4f4>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a47      	ldr	r2, [pc, #284]	@ (8001dac <HAL_RCC_OscConfig+0x4f4>)
 8001c90:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8001c94:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d014      	beq.n	8001cc8 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 8001c9e:	f7ff f87b 	bl	8000d98 <HAL_GetTick>
 8001ca2:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ca4:	e009      	b.n	8001cba <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ca6:	f7ff f877 	bl	8000d98 <HAL_GetTick>
 8001caa:	4602      	mov	r2, r0
 8001cac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001cae:	1ad3      	subs	r3, r2, r3
 8001cb0:	2b64      	cmp	r3, #100	@ 0x64
 8001cb2:	d902      	bls.n	8001cba <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8001cb4:	2303      	movs	r3, #3
 8001cb6:	f000 bcd4 	b.w	8002662 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001cba:	4b3c      	ldr	r3, [pc, #240]	@ (8001dac <HAL_RCC_OscConfig+0x4f4>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d0ef      	beq.n	8001ca6 <HAL_RCC_OscConfig+0x3ee>
 8001cc6:	e013      	b.n	8001cf0 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8001cc8:	f7ff f866 	bl	8000d98 <HAL_GetTick>
 8001ccc:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001cce:	e009      	b.n	8001ce4 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cd0:	f7ff f862 	bl	8000d98 <HAL_GetTick>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001cd8:	1ad3      	subs	r3, r2, r3
 8001cda:	2b64      	cmp	r3, #100	@ 0x64
 8001cdc:	d902      	bls.n	8001ce4 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8001cde:	2303      	movs	r3, #3
 8001ce0:	f000 bcbf 	b.w	8002662 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001ce4:	4b31      	ldr	r3, [pc, #196]	@ (8001dac <HAL_RCC_OscConfig+0x4f4>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d1ef      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f003 0302 	and.w	r3, r3, #2
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d05f      	beq.n	8001dbc <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001cfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001cfe:	2b04      	cmp	r3, #4
 8001d00:	d005      	beq.n	8001d0e <HAL_RCC_OscConfig+0x456>
 8001d02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d04:	2b0c      	cmp	r3, #12
 8001d06:	d114      	bne.n	8001d32 <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001d08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d0a:	2b02      	cmp	r3, #2
 8001d0c:	d111      	bne.n	8001d32 <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	68db      	ldr	r3, [r3, #12]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d102      	bne.n	8001d1c <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	f000 bca3 	b.w	8002662 <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8001d1c:	4b23      	ldr	r3, [pc, #140]	@ (8001dac <HAL_RCC_OscConfig+0x4f4>)
 8001d1e:	691b      	ldr	r3, [r3, #16]
 8001d20:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	691b      	ldr	r3, [r3, #16]
 8001d28:	041b      	lsls	r3, r3, #16
 8001d2a:	4920      	ldr	r1, [pc, #128]	@ (8001dac <HAL_RCC_OscConfig+0x4f4>)
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001d30:	e044      	b.n	8001dbc <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	68db      	ldr	r3, [r3, #12]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d024      	beq.n	8001d84 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8001d3a:	4b1c      	ldr	r3, [pc, #112]	@ (8001dac <HAL_RCC_OscConfig+0x4f4>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a1b      	ldr	r2, [pc, #108]	@ (8001dac <HAL_RCC_OscConfig+0x4f4>)
 8001d40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d44:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8001d46:	f7ff f827 	bl	8000d98 <HAL_GetTick>
 8001d4a:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d4c:	e009      	b.n	8001d62 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d4e:	f7ff f823 	bl	8000d98 <HAL_GetTick>
 8001d52:	4602      	mov	r2, r0
 8001d54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d56:	1ad3      	subs	r3, r2, r3
 8001d58:	2b02      	cmp	r3, #2
 8001d5a:	d902      	bls.n	8001d62 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001d5c:	2303      	movs	r3, #3
 8001d5e:	f000 bc80 	b.w	8002662 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d62:	4b12      	ldr	r3, [pc, #72]	@ (8001dac <HAL_RCC_OscConfig+0x4f4>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d0ef      	beq.n	8001d4e <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8001d6e:	4b0f      	ldr	r3, [pc, #60]	@ (8001dac <HAL_RCC_OscConfig+0x4f4>)
 8001d70:	691b      	ldr	r3, [r3, #16]
 8001d72:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	691b      	ldr	r3, [r3, #16]
 8001d7a:	041b      	lsls	r3, r3, #16
 8001d7c:	490b      	ldr	r1, [pc, #44]	@ (8001dac <HAL_RCC_OscConfig+0x4f4>)
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	610b      	str	r3, [r1, #16]
 8001d82:	e01b      	b.n	8001dbc <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8001d84:	4b09      	ldr	r3, [pc, #36]	@ (8001dac <HAL_RCC_OscConfig+0x4f4>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a08      	ldr	r2, [pc, #32]	@ (8001dac <HAL_RCC_OscConfig+0x4f4>)
 8001d8a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001d8e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8001d90:	f7ff f802 	bl	8000d98 <HAL_GetTick>
 8001d94:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d96:	e00b      	b.n	8001db0 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d98:	f7fe fffe 	bl	8000d98 <HAL_GetTick>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001da0:	1ad3      	subs	r3, r2, r3
 8001da2:	2b02      	cmp	r3, #2
 8001da4:	d904      	bls.n	8001db0 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8001da6:	2303      	movs	r3, #3
 8001da8:	f000 bc5b 	b.w	8002662 <HAL_RCC_OscConfig+0xdaa>
 8001dac:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001db0:	4baf      	ldr	r3, [pc, #700]	@ (8002070 <HAL_RCC_OscConfig+0x7b8>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d1ed      	bne.n	8001d98 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f003 0308 	and.w	r3, r3, #8
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	f000 80c8 	beq.w	8001f5a <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dd0:	4ba7      	ldr	r3, [pc, #668]	@ (8002070 <HAL_RCC_OscConfig+0x7b8>)
 8001dd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001dd6:	f003 0304 	and.w	r3, r3, #4
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d111      	bne.n	8001e02 <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dde:	4ba4      	ldr	r3, [pc, #656]	@ (8002070 <HAL_RCC_OscConfig+0x7b8>)
 8001de0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001de4:	4aa2      	ldr	r2, [pc, #648]	@ (8002070 <HAL_RCC_OscConfig+0x7b8>)
 8001de6:	f043 0304 	orr.w	r3, r3, #4
 8001dea:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8001dee:	4ba0      	ldr	r3, [pc, #640]	@ (8002070 <HAL_RCC_OscConfig+0x7b8>)
 8001df0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001df4:	f003 0304 	and.w	r3, r3, #4
 8001df8:	617b      	str	r3, [r7, #20]
 8001dfa:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001e02:	4b9c      	ldr	r3, [pc, #624]	@ (8002074 <HAL_RCC_OscConfig+0x7bc>)
 8001e04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e06:	f003 0301 	and.w	r3, r3, #1
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d119      	bne.n	8001e42 <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8001e0e:	4b99      	ldr	r3, [pc, #612]	@ (8002074 <HAL_RCC_OscConfig+0x7bc>)
 8001e10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e12:	4a98      	ldr	r2, [pc, #608]	@ (8002074 <HAL_RCC_OscConfig+0x7bc>)
 8001e14:	f043 0301 	orr.w	r3, r3, #1
 8001e18:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e1a:	f7fe ffbd 	bl	8000d98 <HAL_GetTick>
 8001e1e:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001e20:	e009      	b.n	8001e36 <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e22:	f7fe ffb9 	bl	8000d98 <HAL_GetTick>
 8001e26:	4602      	mov	r2, r0
 8001e28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e2a:	1ad3      	subs	r3, r2, r3
 8001e2c:	2b02      	cmp	r3, #2
 8001e2e:	d902      	bls.n	8001e36 <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8001e30:	2303      	movs	r3, #3
 8001e32:	f000 bc16 	b.w	8002662 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001e36:	4b8f      	ldr	r3, [pc, #572]	@ (8002074 <HAL_RCC_OscConfig+0x7bc>)
 8001e38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e3a:	f003 0301 	and.w	r3, r3, #1
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d0ef      	beq.n	8001e22 <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	695b      	ldr	r3, [r3, #20]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d05f      	beq.n	8001f0a <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8001e4a:	4b89      	ldr	r3, [pc, #548]	@ (8002070 <HAL_RCC_OscConfig+0x7b8>)
 8001e4c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001e50:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	699a      	ldr	r2, [r3, #24]
 8001e56:	6a3b      	ldr	r3, [r7, #32]
 8001e58:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	d037      	beq.n	8001ed0 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8001e60:	6a3b      	ldr	r3, [r7, #32]
 8001e62:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d006      	beq.n	8001e78 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8001e6a:	6a3b      	ldr	r3, [r7, #32]
 8001e6c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d101      	bne.n	8001e78 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8001e74:	2301      	movs	r3, #1
 8001e76:	e3f4      	b.n	8002662 <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8001e78:	6a3b      	ldr	r3, [r7, #32]
 8001e7a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d01b      	beq.n	8001eba <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 8001e82:	4b7b      	ldr	r3, [pc, #492]	@ (8002070 <HAL_RCC_OscConfig+0x7b8>)
 8001e84:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001e88:	4a79      	ldr	r2, [pc, #484]	@ (8002070 <HAL_RCC_OscConfig+0x7b8>)
 8001e8a:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8001e8e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 8001e92:	f7fe ff81 	bl	8000d98 <HAL_GetTick>
 8001e96:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001e98:	e008      	b.n	8001eac <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e9a:	f7fe ff7d 	bl	8000d98 <HAL_GetTick>
 8001e9e:	4602      	mov	r2, r0
 8001ea0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ea2:	1ad3      	subs	r3, r2, r3
 8001ea4:	2b05      	cmp	r3, #5
 8001ea6:	d901      	bls.n	8001eac <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8001ea8:	2303      	movs	r3, #3
 8001eaa:	e3da      	b.n	8002662 <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001eac:	4b70      	ldr	r3, [pc, #448]	@ (8002070 <HAL_RCC_OscConfig+0x7b8>)
 8001eae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001eb2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d1ef      	bne.n	8001e9a <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8001eba:	4b6d      	ldr	r3, [pc, #436]	@ (8002070 <HAL_RCC_OscConfig+0x7b8>)
 8001ebc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001ec0:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	699b      	ldr	r3, [r3, #24]
 8001ec8:	4969      	ldr	r1, [pc, #420]	@ (8002070 <HAL_RCC_OscConfig+0x7b8>)
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8001ed0:	4b67      	ldr	r3, [pc, #412]	@ (8002070 <HAL_RCC_OscConfig+0x7b8>)
 8001ed2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001ed6:	4a66      	ldr	r2, [pc, #408]	@ (8002070 <HAL_RCC_OscConfig+0x7b8>)
 8001ed8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001edc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8001ee0:	f7fe ff5a 	bl	8000d98 <HAL_GetTick>
 8001ee4:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8001ee6:	e008      	b.n	8001efa <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ee8:	f7fe ff56 	bl	8000d98 <HAL_GetTick>
 8001eec:	4602      	mov	r2, r0
 8001eee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ef0:	1ad3      	subs	r3, r2, r3
 8001ef2:	2b05      	cmp	r3, #5
 8001ef4:	d901      	bls.n	8001efa <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 8001ef6:	2303      	movs	r3, #3
 8001ef8:	e3b3      	b.n	8002662 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8001efa:	4b5d      	ldr	r3, [pc, #372]	@ (8002070 <HAL_RCC_OscConfig+0x7b8>)
 8001efc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001f00:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d0ef      	beq.n	8001ee8 <HAL_RCC_OscConfig+0x630>
 8001f08:	e01b      	b.n	8001f42 <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8001f0a:	4b59      	ldr	r3, [pc, #356]	@ (8002070 <HAL_RCC_OscConfig+0x7b8>)
 8001f0c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001f10:	4a57      	ldr	r2, [pc, #348]	@ (8002070 <HAL_RCC_OscConfig+0x7b8>)
 8001f12:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8001f16:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8001f1a:	f7fe ff3d 	bl	8000d98 <HAL_GetTick>
 8001f1e:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001f20:	e008      	b.n	8001f34 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f22:	f7fe ff39 	bl	8000d98 <HAL_GetTick>
 8001f26:	4602      	mov	r2, r0
 8001f28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f2a:	1ad3      	subs	r3, r2, r3
 8001f2c:	2b05      	cmp	r3, #5
 8001f2e:	d901      	bls.n	8001f34 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8001f30:	2303      	movs	r3, #3
 8001f32:	e396      	b.n	8002662 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001f34:	4b4e      	ldr	r3, [pc, #312]	@ (8002070 <HAL_RCC_OscConfig+0x7b8>)
 8001f36:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001f3a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d1ef      	bne.n	8001f22 <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001f42:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8001f46:	2b01      	cmp	r3, #1
 8001f48:	d107      	bne.n	8001f5a <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f4a:	4b49      	ldr	r3, [pc, #292]	@ (8002070 <HAL_RCC_OscConfig+0x7b8>)
 8001f4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f50:	4a47      	ldr	r2, [pc, #284]	@ (8002070 <HAL_RCC_OscConfig+0x7b8>)
 8001f52:	f023 0304 	bic.w	r3, r3, #4
 8001f56:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 0304 	and.w	r3, r3, #4
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	f000 8111 	beq.w	800218a <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f6e:	4b40      	ldr	r3, [pc, #256]	@ (8002070 <HAL_RCC_OscConfig+0x7b8>)
 8001f70:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f74:	f003 0304 	and.w	r3, r3, #4
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d111      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f7c:	4b3c      	ldr	r3, [pc, #240]	@ (8002070 <HAL_RCC_OscConfig+0x7b8>)
 8001f7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f82:	4a3b      	ldr	r2, [pc, #236]	@ (8002070 <HAL_RCC_OscConfig+0x7b8>)
 8001f84:	f043 0304 	orr.w	r3, r3, #4
 8001f88:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8001f8c:	4b38      	ldr	r3, [pc, #224]	@ (8002070 <HAL_RCC_OscConfig+0x7b8>)
 8001f8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f92:	f003 0304 	and.w	r3, r3, #4
 8001f96:	613b      	str	r3, [r7, #16]
 8001f98:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001fa0:	4b34      	ldr	r3, [pc, #208]	@ (8002074 <HAL_RCC_OscConfig+0x7bc>)
 8001fa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fa4:	f003 0301 	and.w	r3, r3, #1
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d118      	bne.n	8001fde <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8001fac:	4b31      	ldr	r3, [pc, #196]	@ (8002074 <HAL_RCC_OscConfig+0x7bc>)
 8001fae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fb0:	4a30      	ldr	r2, [pc, #192]	@ (8002074 <HAL_RCC_OscConfig+0x7bc>)
 8001fb2:	f043 0301 	orr.w	r3, r3, #1
 8001fb6:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fb8:	f7fe feee 	bl	8000d98 <HAL_GetTick>
 8001fbc:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001fbe:	e008      	b.n	8001fd2 <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fc0:	f7fe feea 	bl	8000d98 <HAL_GetTick>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001fc8:	1ad3      	subs	r3, r2, r3
 8001fca:	2b02      	cmp	r3, #2
 8001fcc:	d901      	bls.n	8001fd2 <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 8001fce:	2303      	movs	r3, #3
 8001fd0:	e347      	b.n	8002662 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001fd2:	4b28      	ldr	r3, [pc, #160]	@ (8002074 <HAL_RCC_OscConfig+0x7bc>)
 8001fd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fd6:	f003 0301 	and.w	r3, r3, #1
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d0f0      	beq.n	8001fc0 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	f003 0301 	and.w	r3, r3, #1
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d01f      	beq.n	800202a <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	f003 0304 	and.w	r3, r3, #4
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d010      	beq.n	8002018 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001ff6:	4b1e      	ldr	r3, [pc, #120]	@ (8002070 <HAL_RCC_OscConfig+0x7b8>)
 8001ff8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001ffc:	4a1c      	ldr	r2, [pc, #112]	@ (8002070 <HAL_RCC_OscConfig+0x7b8>)
 8001ffe:	f043 0304 	orr.w	r3, r3, #4
 8002002:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002006:	4b1a      	ldr	r3, [pc, #104]	@ (8002070 <HAL_RCC_OscConfig+0x7b8>)
 8002008:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800200c:	4a18      	ldr	r2, [pc, #96]	@ (8002070 <HAL_RCC_OscConfig+0x7b8>)
 800200e:	f043 0301 	orr.w	r3, r3, #1
 8002012:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002016:	e018      	b.n	800204a <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002018:	4b15      	ldr	r3, [pc, #84]	@ (8002070 <HAL_RCC_OscConfig+0x7b8>)
 800201a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800201e:	4a14      	ldr	r2, [pc, #80]	@ (8002070 <HAL_RCC_OscConfig+0x7b8>)
 8002020:	f043 0301 	orr.w	r3, r3, #1
 8002024:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002028:	e00f      	b.n	800204a <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800202a:	4b11      	ldr	r3, [pc, #68]	@ (8002070 <HAL_RCC_OscConfig+0x7b8>)
 800202c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002030:	4a0f      	ldr	r2, [pc, #60]	@ (8002070 <HAL_RCC_OscConfig+0x7b8>)
 8002032:	f023 0301 	bic.w	r3, r3, #1
 8002036:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800203a:	4b0d      	ldr	r3, [pc, #52]	@ (8002070 <HAL_RCC_OscConfig+0x7b8>)
 800203c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002040:	4a0b      	ldr	r2, [pc, #44]	@ (8002070 <HAL_RCC_OscConfig+0x7b8>)
 8002042:	f023 0304 	bic.w	r3, r3, #4
 8002046:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d057      	beq.n	8002102 <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 8002052:	f7fe fea1 	bl	8000d98 <HAL_GetTick>
 8002056:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002058:	e00e      	b.n	8002078 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800205a:	f7fe fe9d 	bl	8000d98 <HAL_GetTick>
 800205e:	4602      	mov	r2, r0
 8002060:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002062:	1ad3      	subs	r3, r2, r3
 8002064:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002068:	4293      	cmp	r3, r2
 800206a:	d905      	bls.n	8002078 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 800206c:	2303      	movs	r3, #3
 800206e:	e2f8      	b.n	8002662 <HAL_RCC_OscConfig+0xdaa>
 8002070:	46020c00 	.word	0x46020c00
 8002074:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002078:	4b9c      	ldr	r3, [pc, #624]	@ (80022ec <HAL_RCC_OscConfig+0xa34>)
 800207a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800207e:	f003 0302 	and.w	r3, r3, #2
 8002082:	2b00      	cmp	r3, #0
 8002084:	d0e9      	beq.n	800205a <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800208e:	2b00      	cmp	r3, #0
 8002090:	d01b      	beq.n	80020ca <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002092:	4b96      	ldr	r3, [pc, #600]	@ (80022ec <HAL_RCC_OscConfig+0xa34>)
 8002094:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002098:	4a94      	ldr	r2, [pc, #592]	@ (80022ec <HAL_RCC_OscConfig+0xa34>)
 800209a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800209e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80020a2:	e00a      	b.n	80020ba <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020a4:	f7fe fe78 	bl	8000d98 <HAL_GetTick>
 80020a8:	4602      	mov	r2, r0
 80020aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020ac:	1ad3      	subs	r3, r2, r3
 80020ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d901      	bls.n	80020ba <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 80020b6:	2303      	movs	r3, #3
 80020b8:	e2d3      	b.n	8002662 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80020ba:	4b8c      	ldr	r3, [pc, #560]	@ (80022ec <HAL_RCC_OscConfig+0xa34>)
 80020bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80020c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d0ed      	beq.n	80020a4 <HAL_RCC_OscConfig+0x7ec>
 80020c8:	e053      	b.n	8002172 <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80020ca:	4b88      	ldr	r3, [pc, #544]	@ (80022ec <HAL_RCC_OscConfig+0xa34>)
 80020cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80020d0:	4a86      	ldr	r2, [pc, #536]	@ (80022ec <HAL_RCC_OscConfig+0xa34>)
 80020d2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80020d6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80020da:	e00a      	b.n	80020f2 <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020dc:	f7fe fe5c 	bl	8000d98 <HAL_GetTick>
 80020e0:	4602      	mov	r2, r0
 80020e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d901      	bls.n	80020f2 <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 80020ee:	2303      	movs	r3, #3
 80020f0:	e2b7      	b.n	8002662 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80020f2:	4b7e      	ldr	r3, [pc, #504]	@ (80022ec <HAL_RCC_OscConfig+0xa34>)
 80020f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80020f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d1ed      	bne.n	80020dc <HAL_RCC_OscConfig+0x824>
 8002100:	e037      	b.n	8002172 <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8002102:	f7fe fe49 	bl	8000d98 <HAL_GetTick>
 8002106:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002108:	e00a      	b.n	8002120 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800210a:	f7fe fe45 	bl	8000d98 <HAL_GetTick>
 800210e:	4602      	mov	r2, r0
 8002110:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002112:	1ad3      	subs	r3, r2, r3
 8002114:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002118:	4293      	cmp	r3, r2
 800211a:	d901      	bls.n	8002120 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 800211c:	2303      	movs	r3, #3
 800211e:	e2a0      	b.n	8002662 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002120:	4b72      	ldr	r3, [pc, #456]	@ (80022ec <HAL_RCC_OscConfig+0xa34>)
 8002122:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002126:	f003 0302 	and.w	r3, r3, #2
 800212a:	2b00      	cmp	r3, #0
 800212c:	d1ed      	bne.n	800210a <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 800212e:	4b6f      	ldr	r3, [pc, #444]	@ (80022ec <HAL_RCC_OscConfig+0xa34>)
 8002130:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002134:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002138:	2b00      	cmp	r3, #0
 800213a:	d01a      	beq.n	8002172 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800213c:	4b6b      	ldr	r3, [pc, #428]	@ (80022ec <HAL_RCC_OscConfig+0xa34>)
 800213e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002142:	4a6a      	ldr	r2, [pc, #424]	@ (80022ec <HAL_RCC_OscConfig+0xa34>)
 8002144:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002148:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800214c:	e00a      	b.n	8002164 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800214e:	f7fe fe23 	bl	8000d98 <HAL_GetTick>
 8002152:	4602      	mov	r2, r0
 8002154:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002156:	1ad3      	subs	r3, r2, r3
 8002158:	f241 3288 	movw	r2, #5000	@ 0x1388
 800215c:	4293      	cmp	r3, r2
 800215e:	d901      	bls.n	8002164 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8002160:	2303      	movs	r3, #3
 8002162:	e27e      	b.n	8002662 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002164:	4b61      	ldr	r3, [pc, #388]	@ (80022ec <HAL_RCC_OscConfig+0xa34>)
 8002166:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800216a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800216e:	2b00      	cmp	r3, #0
 8002170:	d1ed      	bne.n	800214e <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002172:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8002176:	2b01      	cmp	r3, #1
 8002178:	d107      	bne.n	800218a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800217a:	4b5c      	ldr	r3, [pc, #368]	@ (80022ec <HAL_RCC_OscConfig+0xa34>)
 800217c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002180:	4a5a      	ldr	r2, [pc, #360]	@ (80022ec <HAL_RCC_OscConfig+0xa34>)
 8002182:	f023 0304 	bic.w	r3, r3, #4
 8002186:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 0320 	and.w	r3, r3, #32
 8002192:	2b00      	cmp	r3, #0
 8002194:	d036      	beq.n	8002204 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800219a:	2b00      	cmp	r3, #0
 800219c:	d019      	beq.n	80021d2 <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 800219e:	4b53      	ldr	r3, [pc, #332]	@ (80022ec <HAL_RCC_OscConfig+0xa34>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a52      	ldr	r2, [pc, #328]	@ (80022ec <HAL_RCC_OscConfig+0xa34>)
 80021a4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80021a8:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80021aa:	f7fe fdf5 	bl	8000d98 <HAL_GetTick>
 80021ae:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80021b0:	e008      	b.n	80021c4 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80021b2:	f7fe fdf1 	bl	8000d98 <HAL_GetTick>
 80021b6:	4602      	mov	r2, r0
 80021b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021ba:	1ad3      	subs	r3, r2, r3
 80021bc:	2b02      	cmp	r3, #2
 80021be:	d901      	bls.n	80021c4 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 80021c0:	2303      	movs	r3, #3
 80021c2:	e24e      	b.n	8002662 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80021c4:	4b49      	ldr	r3, [pc, #292]	@ (80022ec <HAL_RCC_OscConfig+0xa34>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d0f0      	beq.n	80021b2 <HAL_RCC_OscConfig+0x8fa>
 80021d0:	e018      	b.n	8002204 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 80021d2:	4b46      	ldr	r3, [pc, #280]	@ (80022ec <HAL_RCC_OscConfig+0xa34>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a45      	ldr	r2, [pc, #276]	@ (80022ec <HAL_RCC_OscConfig+0xa34>)
 80021d8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80021dc:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80021de:	f7fe fddb 	bl	8000d98 <HAL_GetTick>
 80021e2:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80021e4:	e008      	b.n	80021f8 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80021e6:	f7fe fdd7 	bl	8000d98 <HAL_GetTick>
 80021ea:	4602      	mov	r2, r0
 80021ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021ee:	1ad3      	subs	r3, r2, r3
 80021f0:	2b02      	cmp	r3, #2
 80021f2:	d901      	bls.n	80021f8 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 80021f4:	2303      	movs	r3, #3
 80021f6:	e234      	b.n	8002662 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80021f8:	4b3c      	ldr	r3, [pc, #240]	@ (80022ec <HAL_RCC_OscConfig+0xa34>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002200:	2b00      	cmp	r3, #0
 8002202:	d1f0      	bne.n	80021e6 <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800220c:	2b00      	cmp	r3, #0
 800220e:	d036      	beq.n	800227e <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002214:	2b00      	cmp	r3, #0
 8002216:	d019      	beq.n	800224c <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8002218:	4b34      	ldr	r3, [pc, #208]	@ (80022ec <HAL_RCC_OscConfig+0xa34>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a33      	ldr	r2, [pc, #204]	@ (80022ec <HAL_RCC_OscConfig+0xa34>)
 800221e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002222:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002224:	f7fe fdb8 	bl	8000d98 <HAL_GetTick>
 8002228:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800222a:	e008      	b.n	800223e <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 800222c:	f7fe fdb4 	bl	8000d98 <HAL_GetTick>
 8002230:	4602      	mov	r2, r0
 8002232:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002234:	1ad3      	subs	r3, r2, r3
 8002236:	2b02      	cmp	r3, #2
 8002238:	d901      	bls.n	800223e <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 800223a:	2303      	movs	r3, #3
 800223c:	e211      	b.n	8002662 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800223e:	4b2b      	ldr	r3, [pc, #172]	@ (80022ec <HAL_RCC_OscConfig+0xa34>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002246:	2b00      	cmp	r3, #0
 8002248:	d0f0      	beq.n	800222c <HAL_RCC_OscConfig+0x974>
 800224a:	e018      	b.n	800227e <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 800224c:	4b27      	ldr	r3, [pc, #156]	@ (80022ec <HAL_RCC_OscConfig+0xa34>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a26      	ldr	r2, [pc, #152]	@ (80022ec <HAL_RCC_OscConfig+0xa34>)
 8002252:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002256:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002258:	f7fe fd9e 	bl	8000d98 <HAL_GetTick>
 800225c:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800225e:	e008      	b.n	8002272 <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8002260:	f7fe fd9a 	bl	8000d98 <HAL_GetTick>
 8002264:	4602      	mov	r2, r0
 8002266:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	2b02      	cmp	r3, #2
 800226c:	d901      	bls.n	8002272 <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 800226e:	2303      	movs	r3, #3
 8002270:	e1f7      	b.n	8002662 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8002272:	4b1e      	ldr	r3, [pc, #120]	@ (80022ec <HAL_RCC_OscConfig+0xa34>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800227a:	2b00      	cmp	r3, #0
 800227c:	d1f0      	bne.n	8002260 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002286:	2b00      	cmp	r3, #0
 8002288:	d07f      	beq.n	800238a <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800228e:	2b00      	cmp	r3, #0
 8002290:	d062      	beq.n	8002358 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8002292:	4b16      	ldr	r3, [pc, #88]	@ (80022ec <HAL_RCC_OscConfig+0xa34>)
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	4a15      	ldr	r2, [pc, #84]	@ (80022ec <HAL_RCC_OscConfig+0xa34>)
 8002298:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800229c:	6093      	str	r3, [r2, #8]
 800229e:	4b13      	ldr	r3, [pc, #76]	@ (80022ec <HAL_RCC_OscConfig+0xa34>)
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022aa:	4910      	ldr	r1, [pc, #64]	@ (80022ec <HAL_RCC_OscConfig+0xa34>)
 80022ac:	4313      	orrs	r3, r2
 80022ae:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022b4:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80022b8:	d309      	bcc.n	80022ce <HAL_RCC_OscConfig+0xa16>
 80022ba:	4b0c      	ldr	r3, [pc, #48]	@ (80022ec <HAL_RCC_OscConfig+0xa34>)
 80022bc:	68db      	ldr	r3, [r3, #12]
 80022be:	f023 021f 	bic.w	r2, r3, #31
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6a1b      	ldr	r3, [r3, #32]
 80022c6:	4909      	ldr	r1, [pc, #36]	@ (80022ec <HAL_RCC_OscConfig+0xa34>)
 80022c8:	4313      	orrs	r3, r2
 80022ca:	60cb      	str	r3, [r1, #12]
 80022cc:	e02a      	b.n	8002324 <HAL_RCC_OscConfig+0xa6c>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	da0c      	bge.n	80022f0 <HAL_RCC_OscConfig+0xa38>
 80022d6:	4b05      	ldr	r3, [pc, #20]	@ (80022ec <HAL_RCC_OscConfig+0xa34>)
 80022d8:	68db      	ldr	r3, [r3, #12]
 80022da:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6a1b      	ldr	r3, [r3, #32]
 80022e2:	015b      	lsls	r3, r3, #5
 80022e4:	4901      	ldr	r1, [pc, #4]	@ (80022ec <HAL_RCC_OscConfig+0xa34>)
 80022e6:	4313      	orrs	r3, r2
 80022e8:	60cb      	str	r3, [r1, #12]
 80022ea:	e01b      	b.n	8002324 <HAL_RCC_OscConfig+0xa6c>
 80022ec:	46020c00 	.word	0x46020c00
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80022f8:	d30a      	bcc.n	8002310 <HAL_RCC_OscConfig+0xa58>
 80022fa:	4ba1      	ldr	r3, [pc, #644]	@ (8002580 <HAL_RCC_OscConfig+0xcc8>)
 80022fc:	68db      	ldr	r3, [r3, #12]
 80022fe:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6a1b      	ldr	r3, [r3, #32]
 8002306:	029b      	lsls	r3, r3, #10
 8002308:	499d      	ldr	r1, [pc, #628]	@ (8002580 <HAL_RCC_OscConfig+0xcc8>)
 800230a:	4313      	orrs	r3, r2
 800230c:	60cb      	str	r3, [r1, #12]
 800230e:	e009      	b.n	8002324 <HAL_RCC_OscConfig+0xa6c>
 8002310:	4b9b      	ldr	r3, [pc, #620]	@ (8002580 <HAL_RCC_OscConfig+0xcc8>)
 8002312:	68db      	ldr	r3, [r3, #12]
 8002314:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6a1b      	ldr	r3, [r3, #32]
 800231c:	03db      	lsls	r3, r3, #15
 800231e:	4998      	ldr	r1, [pc, #608]	@ (8002580 <HAL_RCC_OscConfig+0xcc8>)
 8002320:	4313      	orrs	r3, r2
 8002322:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8002324:	4b96      	ldr	r3, [pc, #600]	@ (8002580 <HAL_RCC_OscConfig+0xcc8>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a95      	ldr	r2, [pc, #596]	@ (8002580 <HAL_RCC_OscConfig+0xcc8>)
 800232a:	f043 0310 	orr.w	r3, r3, #16
 800232e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002330:	f7fe fd32 	bl	8000d98 <HAL_GetTick>
 8002334:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8002336:	e008      	b.n	800234a <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8002338:	f7fe fd2e 	bl	8000d98 <HAL_GetTick>
 800233c:	4602      	mov	r2, r0
 800233e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002340:	1ad3      	subs	r3, r2, r3
 8002342:	2b02      	cmp	r3, #2
 8002344:	d901      	bls.n	800234a <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 8002346:	2303      	movs	r3, #3
 8002348:	e18b      	b.n	8002662 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800234a:	4b8d      	ldr	r3, [pc, #564]	@ (8002580 <HAL_RCC_OscConfig+0xcc8>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 0320 	and.w	r3, r3, #32
 8002352:	2b00      	cmp	r3, #0
 8002354:	d0f0      	beq.n	8002338 <HAL_RCC_OscConfig+0xa80>
 8002356:	e018      	b.n	800238a <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8002358:	4b89      	ldr	r3, [pc, #548]	@ (8002580 <HAL_RCC_OscConfig+0xcc8>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a88      	ldr	r2, [pc, #544]	@ (8002580 <HAL_RCC_OscConfig+0xcc8>)
 800235e:	f023 0310 	bic.w	r3, r3, #16
 8002362:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002364:	f7fe fd18 	bl	8000d98 <HAL_GetTick>
 8002368:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800236a:	e008      	b.n	800237e <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 800236c:	f7fe fd14 	bl	8000d98 <HAL_GetTick>
 8002370:	4602      	mov	r2, r0
 8002372:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002374:	1ad3      	subs	r3, r2, r3
 8002376:	2b02      	cmp	r3, #2
 8002378:	d901      	bls.n	800237e <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 800237a:	2303      	movs	r3, #3
 800237c:	e171      	b.n	8002662 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800237e:	4b80      	ldr	r3, [pc, #512]	@ (8002580 <HAL_RCC_OscConfig+0xcc8>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 0320 	and.w	r3, r3, #32
 8002386:	2b00      	cmp	r3, #0
 8002388:	d1f0      	bne.n	800236c <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800238e:	2b00      	cmp	r3, #0
 8002390:	f000 8166 	beq.w	8002660 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8002394:	2300      	movs	r3, #0
 8002396:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800239a:	4b79      	ldr	r3, [pc, #484]	@ (8002580 <HAL_RCC_OscConfig+0xcc8>)
 800239c:	69db      	ldr	r3, [r3, #28]
 800239e:	f003 030c 	and.w	r3, r3, #12
 80023a2:	2b0c      	cmp	r3, #12
 80023a4:	f000 80f2 	beq.w	800258c <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023ac:	2b02      	cmp	r3, #2
 80023ae:	f040 80c5 	bne.w	800253c <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 80023b2:	4b73      	ldr	r3, [pc, #460]	@ (8002580 <HAL_RCC_OscConfig+0xcc8>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a72      	ldr	r2, [pc, #456]	@ (8002580 <HAL_RCC_OscConfig+0xcc8>)
 80023b8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80023bc:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80023be:	f7fe fceb 	bl	8000d98 <HAL_GetTick>
 80023c2:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80023c4:	e008      	b.n	80023d8 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023c6:	f7fe fce7 	bl	8000d98 <HAL_GetTick>
 80023ca:	4602      	mov	r2, r0
 80023cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023ce:	1ad3      	subs	r3, r2, r3
 80023d0:	2b02      	cmp	r3, #2
 80023d2:	d901      	bls.n	80023d8 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 80023d4:	2303      	movs	r3, #3
 80023d6:	e144      	b.n	8002662 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80023d8:	4b69      	ldr	r3, [pc, #420]	@ (8002580 <HAL_RCC_OscConfig+0xcc8>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d1f0      	bne.n	80023c6 <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023e4:	4b66      	ldr	r3, [pc, #408]	@ (8002580 <HAL_RCC_OscConfig+0xcc8>)
 80023e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80023ea:	f003 0304 	and.w	r3, r3, #4
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d111      	bne.n	8002416 <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 80023f2:	4b63      	ldr	r3, [pc, #396]	@ (8002580 <HAL_RCC_OscConfig+0xcc8>)
 80023f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80023f8:	4a61      	ldr	r2, [pc, #388]	@ (8002580 <HAL_RCC_OscConfig+0xcc8>)
 80023fa:	f043 0304 	orr.w	r3, r3, #4
 80023fe:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8002402:	4b5f      	ldr	r3, [pc, #380]	@ (8002580 <HAL_RCC_OscConfig+0xcc8>)
 8002404:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002408:	f003 0304 	and.w	r3, r3, #4
 800240c:	60fb      	str	r3, [r7, #12]
 800240e:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8002410:	2301      	movs	r3, #1
 8002412:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8002416:	4b5b      	ldr	r3, [pc, #364]	@ (8002584 <HAL_RCC_OscConfig+0xccc>)
 8002418:	68db      	ldr	r3, [r3, #12]
 800241a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800241e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002422:	d102      	bne.n	800242a <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8002424:	2301      	movs	r3, #1
 8002426:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800242a:	4b56      	ldr	r3, [pc, #344]	@ (8002584 <HAL_RCC_OscConfig+0xccc>)
 800242c:	68db      	ldr	r3, [r3, #12]
 800242e:	4a55      	ldr	r2, [pc, #340]	@ (8002584 <HAL_RCC_OscConfig+0xccc>)
 8002430:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002434:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8002436:	4b52      	ldr	r3, [pc, #328]	@ (8002580 <HAL_RCC_OscConfig+0xcc8>)
 8002438:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800243a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800243e:	f023 0303 	bic.w	r3, r3, #3
 8002442:	687a      	ldr	r2, [r7, #4]
 8002444:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8002446:	687a      	ldr	r2, [r7, #4]
 8002448:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800244a:	3a01      	subs	r2, #1
 800244c:	0212      	lsls	r2, r2, #8
 800244e:	4311      	orrs	r1, r2
 8002450:	687a      	ldr	r2, [r7, #4]
 8002452:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002454:	430a      	orrs	r2, r1
 8002456:	494a      	ldr	r1, [pc, #296]	@ (8002580 <HAL_RCC_OscConfig+0xcc8>)
 8002458:	4313      	orrs	r3, r2
 800245a:	628b      	str	r3, [r1, #40]	@ 0x28
 800245c:	4b48      	ldr	r3, [pc, #288]	@ (8002580 <HAL_RCC_OscConfig+0xcc8>)
 800245e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002460:	4b49      	ldr	r3, [pc, #292]	@ (8002588 <HAL_RCC_OscConfig+0xcd0>)
 8002462:	4013      	ands	r3, r2
 8002464:	687a      	ldr	r2, [r7, #4]
 8002466:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002468:	3a01      	subs	r2, #1
 800246a:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800246e:	687a      	ldr	r2, [r7, #4]
 8002470:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002472:	3a01      	subs	r2, #1
 8002474:	0252      	lsls	r2, r2, #9
 8002476:	b292      	uxth	r2, r2
 8002478:	4311      	orrs	r1, r2
 800247a:	687a      	ldr	r2, [r7, #4]
 800247c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800247e:	3a01      	subs	r2, #1
 8002480:	0412      	lsls	r2, r2, #16
 8002482:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8002486:	4311      	orrs	r1, r2
 8002488:	687a      	ldr	r2, [r7, #4]
 800248a:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800248c:	3a01      	subs	r2, #1
 800248e:	0612      	lsls	r2, r2, #24
 8002490:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8002494:	430a      	orrs	r2, r1
 8002496:	493a      	ldr	r1, [pc, #232]	@ (8002580 <HAL_RCC_OscConfig+0xcc8>)
 8002498:	4313      	orrs	r3, r2
 800249a:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 800249c:	4b38      	ldr	r3, [pc, #224]	@ (8002580 <HAL_RCC_OscConfig+0xcc8>)
 800249e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024a0:	4a37      	ldr	r2, [pc, #220]	@ (8002580 <HAL_RCC_OscConfig+0xcc8>)
 80024a2:	f023 0310 	bic.w	r3, r3, #16
 80024a6:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024ac:	4a34      	ldr	r2, [pc, #208]	@ (8002580 <HAL_RCC_OscConfig+0xcc8>)
 80024ae:	00db      	lsls	r3, r3, #3
 80024b0:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 80024b2:	4b33      	ldr	r3, [pc, #204]	@ (8002580 <HAL_RCC_OscConfig+0xcc8>)
 80024b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024b6:	4a32      	ldr	r2, [pc, #200]	@ (8002580 <HAL_RCC_OscConfig+0xcc8>)
 80024b8:	f043 0310 	orr.w	r3, r3, #16
 80024bc:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 80024be:	4b30      	ldr	r3, [pc, #192]	@ (8002580 <HAL_RCC_OscConfig+0xcc8>)
 80024c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024c2:	f023 020c 	bic.w	r2, r3, #12
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024ca:	492d      	ldr	r1, [pc, #180]	@ (8002580 <HAL_RCC_OscConfig+0xcc8>)
 80024cc:	4313      	orrs	r3, r2
 80024ce:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 80024d0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80024d4:	2b01      	cmp	r3, #1
 80024d6:	d105      	bne.n	80024e4 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80024d8:	4b2a      	ldr	r3, [pc, #168]	@ (8002584 <HAL_RCC_OscConfig+0xccc>)
 80024da:	68db      	ldr	r3, [r3, #12]
 80024dc:	4a29      	ldr	r2, [pc, #164]	@ (8002584 <HAL_RCC_OscConfig+0xccc>)
 80024de:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80024e2:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 80024e4:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80024e8:	2b01      	cmp	r3, #1
 80024ea:	d107      	bne.n	80024fc <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 80024ec:	4b24      	ldr	r3, [pc, #144]	@ (8002580 <HAL_RCC_OscConfig+0xcc8>)
 80024ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80024f2:	4a23      	ldr	r2, [pc, #140]	@ (8002580 <HAL_RCC_OscConfig+0xcc8>)
 80024f4:	f023 0304 	bic.w	r3, r3, #4
 80024f8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 80024fc:	4b20      	ldr	r3, [pc, #128]	@ (8002580 <HAL_RCC_OscConfig+0xcc8>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a1f      	ldr	r2, [pc, #124]	@ (8002580 <HAL_RCC_OscConfig+0xcc8>)
 8002502:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002506:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002508:	f7fe fc46 	bl	8000d98 <HAL_GetTick>
 800250c:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800250e:	e008      	b.n	8002522 <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002510:	f7fe fc42 	bl	8000d98 <HAL_GetTick>
 8002514:	4602      	mov	r2, r0
 8002516:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002518:	1ad3      	subs	r3, r2, r3
 800251a:	2b02      	cmp	r3, #2
 800251c:	d901      	bls.n	8002522 <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 800251e:	2303      	movs	r3, #3
 8002520:	e09f      	b.n	8002662 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002522:	4b17      	ldr	r3, [pc, #92]	@ (8002580 <HAL_RCC_OscConfig+0xcc8>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800252a:	2b00      	cmp	r3, #0
 800252c:	d0f0      	beq.n	8002510 <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800252e:	4b14      	ldr	r3, [pc, #80]	@ (8002580 <HAL_RCC_OscConfig+0xcc8>)
 8002530:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002532:	4a13      	ldr	r2, [pc, #76]	@ (8002580 <HAL_RCC_OscConfig+0xcc8>)
 8002534:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002538:	6293      	str	r3, [r2, #40]	@ 0x28
 800253a:	e091      	b.n	8002660 <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800253c:	4b10      	ldr	r3, [pc, #64]	@ (8002580 <HAL_RCC_OscConfig+0xcc8>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a0f      	ldr	r2, [pc, #60]	@ (8002580 <HAL_RCC_OscConfig+0xcc8>)
 8002542:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002546:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002548:	f7fe fc26 	bl	8000d98 <HAL_GetTick>
 800254c:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800254e:	e008      	b.n	8002562 <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002550:	f7fe fc22 	bl	8000d98 <HAL_GetTick>
 8002554:	4602      	mov	r2, r0
 8002556:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002558:	1ad3      	subs	r3, r2, r3
 800255a:	2b02      	cmp	r3, #2
 800255c:	d901      	bls.n	8002562 <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 800255e:	2303      	movs	r3, #3
 8002560:	e07f      	b.n	8002662 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002562:	4b07      	ldr	r3, [pc, #28]	@ (8002580 <HAL_RCC_OscConfig+0xcc8>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800256a:	2b00      	cmp	r3, #0
 800256c:	d1f0      	bne.n	8002550 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 800256e:	4b04      	ldr	r3, [pc, #16]	@ (8002580 <HAL_RCC_OscConfig+0xcc8>)
 8002570:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002572:	4a03      	ldr	r2, [pc, #12]	@ (8002580 <HAL_RCC_OscConfig+0xcc8>)
 8002574:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8002578:	f023 0303 	bic.w	r3, r3, #3
 800257c:	6293      	str	r3, [r2, #40]	@ 0x28
 800257e:	e06f      	b.n	8002660 <HAL_RCC_OscConfig+0xda8>
 8002580:	46020c00 	.word	0x46020c00
 8002584:	46020800 	.word	0x46020800
 8002588:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 800258c:	4b37      	ldr	r3, [pc, #220]	@ (800266c <HAL_RCC_OscConfig+0xdb4>)
 800258e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002590:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002592:	4b36      	ldr	r3, [pc, #216]	@ (800266c <HAL_RCC_OscConfig+0xdb4>)
 8002594:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002596:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800259c:	2b01      	cmp	r3, #1
 800259e:	d039      	beq.n	8002614 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 80025a0:	69fb      	ldr	r3, [r7, #28]
 80025a2:	f003 0203 	and.w	r2, r3, #3
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025aa:	429a      	cmp	r2, r3
 80025ac:	d132      	bne.n	8002614 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 80025ae:	69fb      	ldr	r3, [r7, #28]
 80025b0:	0a1b      	lsrs	r3, r3, #8
 80025b2:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ba:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 80025bc:	429a      	cmp	r2, r3
 80025be:	d129      	bne.n	8002614 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 80025c0:	69fb      	ldr	r3, [r7, #28]
 80025c2:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 80025ca:	429a      	cmp	r2, r3
 80025cc:	d122      	bne.n	8002614 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80025ce:	69bb      	ldr	r3, [r7, #24]
 80025d0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025d8:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 80025da:	429a      	cmp	r2, r3
 80025dc:	d11a      	bne.n	8002614 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 80025de:	69bb      	ldr	r3, [r7, #24]
 80025e0:	0a5b      	lsrs	r3, r3, #9
 80025e2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025ea:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d111      	bne.n	8002614 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 80025f0:	69bb      	ldr	r3, [r7, #24]
 80025f2:	0c1b      	lsrs	r3, r3, #16
 80025f4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80025fc:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80025fe:	429a      	cmp	r2, r3
 8002600:	d108      	bne.n	8002614 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8002602:	69bb      	ldr	r3, [r7, #24]
 8002604:	0e1b      	lsrs	r3, r3, #24
 8002606:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800260e:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002610:	429a      	cmp	r2, r3
 8002612:	d001      	beq.n	8002618 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8002614:	2301      	movs	r3, #1
 8002616:	e024      	b.n	8002662 <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8002618:	4b14      	ldr	r3, [pc, #80]	@ (800266c <HAL_RCC_OscConfig+0xdb4>)
 800261a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800261c:	08db      	lsrs	r3, r3, #3
 800261e:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8002626:	429a      	cmp	r2, r3
 8002628:	d01a      	beq.n	8002660 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 800262a:	4b10      	ldr	r3, [pc, #64]	@ (800266c <HAL_RCC_OscConfig+0xdb4>)
 800262c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800262e:	4a0f      	ldr	r2, [pc, #60]	@ (800266c <HAL_RCC_OscConfig+0xdb4>)
 8002630:	f023 0310 	bic.w	r3, r3, #16
 8002634:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002636:	f7fe fbaf 	bl	8000d98 <HAL_GetTick>
 800263a:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 800263c:	bf00      	nop
 800263e:	f7fe fbab 	bl	8000d98 <HAL_GetTick>
 8002642:	4602      	mov	r2, r0
 8002644:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002646:	4293      	cmp	r3, r2
 8002648:	d0f9      	beq.n	800263e <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800264e:	4a07      	ldr	r2, [pc, #28]	@ (800266c <HAL_RCC_OscConfig+0xdb4>)
 8002650:	00db      	lsls	r3, r3, #3
 8002652:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8002654:	4b05      	ldr	r3, [pc, #20]	@ (800266c <HAL_RCC_OscConfig+0xdb4>)
 8002656:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002658:	4a04      	ldr	r2, [pc, #16]	@ (800266c <HAL_RCC_OscConfig+0xdb4>)
 800265a:	f043 0310 	orr.w	r3, r3, #16
 800265e:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 8002660:	2300      	movs	r3, #0
}
 8002662:	4618      	mov	r0, r3
 8002664:	3738      	adds	r7, #56	@ 0x38
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}
 800266a:	bf00      	nop
 800266c:	46020c00 	.word	0x46020c00

08002670 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b086      	sub	sp, #24
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
 8002678:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d101      	bne.n	8002684 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	e1d9      	b.n	8002a38 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002684:	4b9b      	ldr	r3, [pc, #620]	@ (80028f4 <HAL_RCC_ClockConfig+0x284>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 030f 	and.w	r3, r3, #15
 800268c:	683a      	ldr	r2, [r7, #0]
 800268e:	429a      	cmp	r2, r3
 8002690:	d910      	bls.n	80026b4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002692:	4b98      	ldr	r3, [pc, #608]	@ (80028f4 <HAL_RCC_ClockConfig+0x284>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f023 020f 	bic.w	r2, r3, #15
 800269a:	4996      	ldr	r1, [pc, #600]	@ (80028f4 <HAL_RCC_ClockConfig+0x284>)
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	4313      	orrs	r3, r2
 80026a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026a2:	4b94      	ldr	r3, [pc, #592]	@ (80028f4 <HAL_RCC_ClockConfig+0x284>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f003 030f 	and.w	r3, r3, #15
 80026aa:	683a      	ldr	r2, [r7, #0]
 80026ac:	429a      	cmp	r2, r3
 80026ae:	d001      	beq.n	80026b4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	e1c1      	b.n	8002a38 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f003 0310 	and.w	r3, r3, #16
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d010      	beq.n	80026e2 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	695a      	ldr	r2, [r3, #20]
 80026c4:	4b8c      	ldr	r3, [pc, #560]	@ (80028f8 <HAL_RCC_ClockConfig+0x288>)
 80026c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026c8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80026cc:	429a      	cmp	r2, r3
 80026ce:	d908      	bls.n	80026e2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 80026d0:	4b89      	ldr	r3, [pc, #548]	@ (80028f8 <HAL_RCC_ClockConfig+0x288>)
 80026d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026d4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	695b      	ldr	r3, [r3, #20]
 80026dc:	4986      	ldr	r1, [pc, #536]	@ (80028f8 <HAL_RCC_ClockConfig+0x288>)
 80026de:	4313      	orrs	r3, r2
 80026e0:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 0308 	and.w	r3, r3, #8
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d012      	beq.n	8002714 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	691a      	ldr	r2, [r3, #16]
 80026f2:	4b81      	ldr	r3, [pc, #516]	@ (80028f8 <HAL_RCC_ClockConfig+0x288>)
 80026f4:	6a1b      	ldr	r3, [r3, #32]
 80026f6:	091b      	lsrs	r3, r3, #4
 80026f8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80026fc:	429a      	cmp	r2, r3
 80026fe:	d909      	bls.n	8002714 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8002700:	4b7d      	ldr	r3, [pc, #500]	@ (80028f8 <HAL_RCC_ClockConfig+0x288>)
 8002702:	6a1b      	ldr	r3, [r3, #32]
 8002704:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	691b      	ldr	r3, [r3, #16]
 800270c:	011b      	lsls	r3, r3, #4
 800270e:	497a      	ldr	r1, [pc, #488]	@ (80028f8 <HAL_RCC_ClockConfig+0x288>)
 8002710:	4313      	orrs	r3, r2
 8002712:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 0304 	and.w	r3, r3, #4
 800271c:	2b00      	cmp	r3, #0
 800271e:	d010      	beq.n	8002742 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	68da      	ldr	r2, [r3, #12]
 8002724:	4b74      	ldr	r3, [pc, #464]	@ (80028f8 <HAL_RCC_ClockConfig+0x288>)
 8002726:	6a1b      	ldr	r3, [r3, #32]
 8002728:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800272c:	429a      	cmp	r2, r3
 800272e:	d908      	bls.n	8002742 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8002730:	4b71      	ldr	r3, [pc, #452]	@ (80028f8 <HAL_RCC_ClockConfig+0x288>)
 8002732:	6a1b      	ldr	r3, [r3, #32]
 8002734:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	68db      	ldr	r3, [r3, #12]
 800273c:	496e      	ldr	r1, [pc, #440]	@ (80028f8 <HAL_RCC_ClockConfig+0x288>)
 800273e:	4313      	orrs	r3, r2
 8002740:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 0302 	and.w	r3, r3, #2
 800274a:	2b00      	cmp	r3, #0
 800274c:	d010      	beq.n	8002770 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	689a      	ldr	r2, [r3, #8]
 8002752:	4b69      	ldr	r3, [pc, #420]	@ (80028f8 <HAL_RCC_ClockConfig+0x288>)
 8002754:	6a1b      	ldr	r3, [r3, #32]
 8002756:	f003 030f 	and.w	r3, r3, #15
 800275a:	429a      	cmp	r2, r3
 800275c:	d908      	bls.n	8002770 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800275e:	4b66      	ldr	r3, [pc, #408]	@ (80028f8 <HAL_RCC_ClockConfig+0x288>)
 8002760:	6a1b      	ldr	r3, [r3, #32]
 8002762:	f023 020f 	bic.w	r2, r3, #15
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	689b      	ldr	r3, [r3, #8]
 800276a:	4963      	ldr	r1, [pc, #396]	@ (80028f8 <HAL_RCC_ClockConfig+0x288>)
 800276c:	4313      	orrs	r3, r2
 800276e:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 0301 	and.w	r3, r3, #1
 8002778:	2b00      	cmp	r3, #0
 800277a:	f000 80d2 	beq.w	8002922 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 800277e:	2300      	movs	r3, #0
 8002780:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	2b03      	cmp	r3, #3
 8002788:	d143      	bne.n	8002812 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800278a:	4b5b      	ldr	r3, [pc, #364]	@ (80028f8 <HAL_RCC_ClockConfig+0x288>)
 800278c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002790:	f003 0304 	and.w	r3, r3, #4
 8002794:	2b00      	cmp	r3, #0
 8002796:	d110      	bne.n	80027ba <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002798:	4b57      	ldr	r3, [pc, #348]	@ (80028f8 <HAL_RCC_ClockConfig+0x288>)
 800279a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800279e:	4a56      	ldr	r2, [pc, #344]	@ (80028f8 <HAL_RCC_ClockConfig+0x288>)
 80027a0:	f043 0304 	orr.w	r3, r3, #4
 80027a4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80027a8:	4b53      	ldr	r3, [pc, #332]	@ (80028f8 <HAL_RCC_ClockConfig+0x288>)
 80027aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80027ae:	f003 0304 	and.w	r3, r3, #4
 80027b2:	60bb      	str	r3, [r7, #8]
 80027b4:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 80027b6:	2301      	movs	r3, #1
 80027b8:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 80027ba:	f7fe faed 	bl	8000d98 <HAL_GetTick>
 80027be:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 80027c0:	4b4e      	ldr	r3, [pc, #312]	@ (80028fc <HAL_RCC_ClockConfig+0x28c>)
 80027c2:	68db      	ldr	r3, [r3, #12]
 80027c4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d00f      	beq.n	80027ec <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 80027cc:	e008      	b.n	80027e0 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 80027ce:	f7fe fae3 	bl	8000d98 <HAL_GetTick>
 80027d2:	4602      	mov	r2, r0
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	1ad3      	subs	r3, r2, r3
 80027d8:	2b02      	cmp	r3, #2
 80027da:	d901      	bls.n	80027e0 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 80027dc:	2303      	movs	r3, #3
 80027de:	e12b      	b.n	8002a38 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 80027e0:	4b46      	ldr	r3, [pc, #280]	@ (80028fc <HAL_RCC_ClockConfig+0x28c>)
 80027e2:	68db      	ldr	r3, [r3, #12]
 80027e4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d0f0      	beq.n	80027ce <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80027ec:	7dfb      	ldrb	r3, [r7, #23]
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d107      	bne.n	8002802 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80027f2:	4b41      	ldr	r3, [pc, #260]	@ (80028f8 <HAL_RCC_ClockConfig+0x288>)
 80027f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80027f8:	4a3f      	ldr	r2, [pc, #252]	@ (80028f8 <HAL_RCC_ClockConfig+0x288>)
 80027fa:	f023 0304 	bic.w	r3, r3, #4
 80027fe:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002802:	4b3d      	ldr	r3, [pc, #244]	@ (80028f8 <HAL_RCC_ClockConfig+0x288>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800280a:	2b00      	cmp	r3, #0
 800280c:	d121      	bne.n	8002852 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	e112      	b.n	8002a38 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	2b02      	cmp	r3, #2
 8002818:	d107      	bne.n	800282a <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800281a:	4b37      	ldr	r3, [pc, #220]	@ (80028f8 <HAL_RCC_ClockConfig+0x288>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002822:	2b00      	cmp	r3, #0
 8002824:	d115      	bne.n	8002852 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	e106      	b.n	8002a38 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d107      	bne.n	8002842 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8002832:	4b31      	ldr	r3, [pc, #196]	@ (80028f8 <HAL_RCC_ClockConfig+0x288>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f003 0304 	and.w	r3, r3, #4
 800283a:	2b00      	cmp	r3, #0
 800283c:	d109      	bne.n	8002852 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	e0fa      	b.n	8002a38 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002842:	4b2d      	ldr	r3, [pc, #180]	@ (80028f8 <HAL_RCC_ClockConfig+0x288>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800284a:	2b00      	cmp	r3, #0
 800284c:	d101      	bne.n	8002852 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	e0f2      	b.n	8002a38 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8002852:	4b29      	ldr	r3, [pc, #164]	@ (80028f8 <HAL_RCC_ClockConfig+0x288>)
 8002854:	69db      	ldr	r3, [r3, #28]
 8002856:	f023 0203 	bic.w	r2, r3, #3
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	4926      	ldr	r1, [pc, #152]	@ (80028f8 <HAL_RCC_ClockConfig+0x288>)
 8002860:	4313      	orrs	r3, r2
 8002862:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8002864:	f7fe fa98 	bl	8000d98 <HAL_GetTick>
 8002868:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	2b03      	cmp	r3, #3
 8002870:	d112      	bne.n	8002898 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002872:	e00a      	b.n	800288a <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002874:	f7fe fa90 	bl	8000d98 <HAL_GetTick>
 8002878:	4602      	mov	r2, r0
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	1ad3      	subs	r3, r2, r3
 800287e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002882:	4293      	cmp	r3, r2
 8002884:	d901      	bls.n	800288a <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 8002886:	2303      	movs	r3, #3
 8002888:	e0d6      	b.n	8002a38 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800288a:	4b1b      	ldr	r3, [pc, #108]	@ (80028f8 <HAL_RCC_ClockConfig+0x288>)
 800288c:	69db      	ldr	r3, [r3, #28]
 800288e:	f003 030c 	and.w	r3, r3, #12
 8002892:	2b0c      	cmp	r3, #12
 8002894:	d1ee      	bne.n	8002874 <HAL_RCC_ClockConfig+0x204>
 8002896:	e044      	b.n	8002922 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	2b02      	cmp	r3, #2
 800289e:	d112      	bne.n	80028c6 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80028a0:	e00a      	b.n	80028b8 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028a2:	f7fe fa79 	bl	8000d98 <HAL_GetTick>
 80028a6:	4602      	mov	r2, r0
 80028a8:	693b      	ldr	r3, [r7, #16]
 80028aa:	1ad3      	subs	r3, r2, r3
 80028ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d901      	bls.n	80028b8 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 80028b4:	2303      	movs	r3, #3
 80028b6:	e0bf      	b.n	8002a38 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80028b8:	4b0f      	ldr	r3, [pc, #60]	@ (80028f8 <HAL_RCC_ClockConfig+0x288>)
 80028ba:	69db      	ldr	r3, [r3, #28]
 80028bc:	f003 030c 	and.w	r3, r3, #12
 80028c0:	2b08      	cmp	r3, #8
 80028c2:	d1ee      	bne.n	80028a2 <HAL_RCC_ClockConfig+0x232>
 80028c4:	e02d      	b.n	8002922 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d123      	bne.n	8002916 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80028ce:	e00a      	b.n	80028e6 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028d0:	f7fe fa62 	bl	8000d98 <HAL_GetTick>
 80028d4:	4602      	mov	r2, r0
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	1ad3      	subs	r3, r2, r3
 80028da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028de:	4293      	cmp	r3, r2
 80028e0:	d901      	bls.n	80028e6 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 80028e2:	2303      	movs	r3, #3
 80028e4:	e0a8      	b.n	8002a38 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80028e6:	4b04      	ldr	r3, [pc, #16]	@ (80028f8 <HAL_RCC_ClockConfig+0x288>)
 80028e8:	69db      	ldr	r3, [r3, #28]
 80028ea:	f003 030c 	and.w	r3, r3, #12
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d1ee      	bne.n	80028d0 <HAL_RCC_ClockConfig+0x260>
 80028f2:	e016      	b.n	8002922 <HAL_RCC_ClockConfig+0x2b2>
 80028f4:	40022000 	.word	0x40022000
 80028f8:	46020c00 	.word	0x46020c00
 80028fc:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002900:	f7fe fa4a 	bl	8000d98 <HAL_GetTick>
 8002904:	4602      	mov	r2, r0
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	1ad3      	subs	r3, r2, r3
 800290a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800290e:	4293      	cmp	r3, r2
 8002910:	d901      	bls.n	8002916 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8002912:	2303      	movs	r3, #3
 8002914:	e090      	b.n	8002a38 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002916:	4b4a      	ldr	r3, [pc, #296]	@ (8002a40 <HAL_RCC_ClockConfig+0x3d0>)
 8002918:	69db      	ldr	r3, [r3, #28]
 800291a:	f003 030c 	and.w	r3, r3, #12
 800291e:	2b04      	cmp	r3, #4
 8002920:	d1ee      	bne.n	8002900 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 0302 	and.w	r3, r3, #2
 800292a:	2b00      	cmp	r3, #0
 800292c:	d010      	beq.n	8002950 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	689a      	ldr	r2, [r3, #8]
 8002932:	4b43      	ldr	r3, [pc, #268]	@ (8002a40 <HAL_RCC_ClockConfig+0x3d0>)
 8002934:	6a1b      	ldr	r3, [r3, #32]
 8002936:	f003 030f 	and.w	r3, r3, #15
 800293a:	429a      	cmp	r2, r3
 800293c:	d208      	bcs.n	8002950 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800293e:	4b40      	ldr	r3, [pc, #256]	@ (8002a40 <HAL_RCC_ClockConfig+0x3d0>)
 8002940:	6a1b      	ldr	r3, [r3, #32]
 8002942:	f023 020f 	bic.w	r2, r3, #15
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	493d      	ldr	r1, [pc, #244]	@ (8002a40 <HAL_RCC_ClockConfig+0x3d0>)
 800294c:	4313      	orrs	r3, r2
 800294e:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002950:	4b3c      	ldr	r3, [pc, #240]	@ (8002a44 <HAL_RCC_ClockConfig+0x3d4>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f003 030f 	and.w	r3, r3, #15
 8002958:	683a      	ldr	r2, [r7, #0]
 800295a:	429a      	cmp	r2, r3
 800295c:	d210      	bcs.n	8002980 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800295e:	4b39      	ldr	r3, [pc, #228]	@ (8002a44 <HAL_RCC_ClockConfig+0x3d4>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f023 020f 	bic.w	r2, r3, #15
 8002966:	4937      	ldr	r1, [pc, #220]	@ (8002a44 <HAL_RCC_ClockConfig+0x3d4>)
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	4313      	orrs	r3, r2
 800296c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800296e:	4b35      	ldr	r3, [pc, #212]	@ (8002a44 <HAL_RCC_ClockConfig+0x3d4>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f003 030f 	and.w	r3, r3, #15
 8002976:	683a      	ldr	r2, [r7, #0]
 8002978:	429a      	cmp	r2, r3
 800297a:	d001      	beq.n	8002980 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 800297c:	2301      	movs	r3, #1
 800297e:	e05b      	b.n	8002a38 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f003 0304 	and.w	r3, r3, #4
 8002988:	2b00      	cmp	r3, #0
 800298a:	d010      	beq.n	80029ae <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	68da      	ldr	r2, [r3, #12]
 8002990:	4b2b      	ldr	r3, [pc, #172]	@ (8002a40 <HAL_RCC_ClockConfig+0x3d0>)
 8002992:	6a1b      	ldr	r3, [r3, #32]
 8002994:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002998:	429a      	cmp	r2, r3
 800299a:	d208      	bcs.n	80029ae <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 800299c:	4b28      	ldr	r3, [pc, #160]	@ (8002a40 <HAL_RCC_ClockConfig+0x3d0>)
 800299e:	6a1b      	ldr	r3, [r3, #32]
 80029a0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	68db      	ldr	r3, [r3, #12]
 80029a8:	4925      	ldr	r1, [pc, #148]	@ (8002a40 <HAL_RCC_ClockConfig+0x3d0>)
 80029aa:	4313      	orrs	r3, r2
 80029ac:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 0308 	and.w	r3, r3, #8
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d012      	beq.n	80029e0 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	691a      	ldr	r2, [r3, #16]
 80029be:	4b20      	ldr	r3, [pc, #128]	@ (8002a40 <HAL_RCC_ClockConfig+0x3d0>)
 80029c0:	6a1b      	ldr	r3, [r3, #32]
 80029c2:	091b      	lsrs	r3, r3, #4
 80029c4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80029c8:	429a      	cmp	r2, r3
 80029ca:	d209      	bcs.n	80029e0 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 80029cc:	4b1c      	ldr	r3, [pc, #112]	@ (8002a40 <HAL_RCC_ClockConfig+0x3d0>)
 80029ce:	6a1b      	ldr	r3, [r3, #32]
 80029d0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	691b      	ldr	r3, [r3, #16]
 80029d8:	011b      	lsls	r3, r3, #4
 80029da:	4919      	ldr	r1, [pc, #100]	@ (8002a40 <HAL_RCC_ClockConfig+0x3d0>)
 80029dc:	4313      	orrs	r3, r2
 80029de:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 0310 	and.w	r3, r3, #16
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d010      	beq.n	8002a0e <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	695a      	ldr	r2, [r3, #20]
 80029f0:	4b13      	ldr	r3, [pc, #76]	@ (8002a40 <HAL_RCC_ClockConfig+0x3d0>)
 80029f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029f4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80029f8:	429a      	cmp	r2, r3
 80029fa:	d208      	bcs.n	8002a0e <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 80029fc:	4b10      	ldr	r3, [pc, #64]	@ (8002a40 <HAL_RCC_ClockConfig+0x3d0>)
 80029fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a00:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	695b      	ldr	r3, [r3, #20]
 8002a08:	490d      	ldr	r1, [pc, #52]	@ (8002a40 <HAL_RCC_ClockConfig+0x3d0>)
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002a0e:	f000 f821 	bl	8002a54 <HAL_RCC_GetSysClockFreq>
 8002a12:	4602      	mov	r2, r0
 8002a14:	4b0a      	ldr	r3, [pc, #40]	@ (8002a40 <HAL_RCC_ClockConfig+0x3d0>)
 8002a16:	6a1b      	ldr	r3, [r3, #32]
 8002a18:	f003 030f 	and.w	r3, r3, #15
 8002a1c:	490a      	ldr	r1, [pc, #40]	@ (8002a48 <HAL_RCC_ClockConfig+0x3d8>)
 8002a1e:	5ccb      	ldrb	r3, [r1, r3]
 8002a20:	fa22 f303 	lsr.w	r3, r2, r3
 8002a24:	4a09      	ldr	r2, [pc, #36]	@ (8002a4c <HAL_RCC_ClockConfig+0x3dc>)
 8002a26:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002a28:	4b09      	ldr	r3, [pc, #36]	@ (8002a50 <HAL_RCC_ClockConfig+0x3e0>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f7fe f929 	bl	8000c84 <HAL_InitTick>
 8002a32:	4603      	mov	r3, r0
 8002a34:	73fb      	strb	r3, [r7, #15]

  return status;
 8002a36:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	3718      	adds	r7, #24
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}
 8002a40:	46020c00 	.word	0x46020c00
 8002a44:	40022000 	.word	0x40022000
 8002a48:	08007f38 	.word	0x08007f38
 8002a4c:	20000000 	.word	0x20000000
 8002a50:	20000004 	.word	0x20000004

08002a54 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b08b      	sub	sp, #44	@ 0x2c
 8002a58:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a62:	4b78      	ldr	r3, [pc, #480]	@ (8002c44 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002a64:	69db      	ldr	r3, [r3, #28]
 8002a66:	f003 030c 	and.w	r3, r3, #12
 8002a6a:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a6c:	4b75      	ldr	r3, [pc, #468]	@ (8002c44 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002a6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a70:	f003 0303 	and.w	r3, r3, #3
 8002a74:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002a76:	69bb      	ldr	r3, [r7, #24]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d005      	beq.n	8002a88 <HAL_RCC_GetSysClockFreq+0x34>
 8002a7c:	69bb      	ldr	r3, [r7, #24]
 8002a7e:	2b0c      	cmp	r3, #12
 8002a80:	d121      	bne.n	8002ac6 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	d11e      	bne.n	8002ac6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8002a88:	4b6e      	ldr	r3, [pc, #440]	@ (8002c44 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d107      	bne.n	8002aa4 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8002a94:	4b6b      	ldr	r3, [pc, #428]	@ (8002c44 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002a96:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002a9a:	0b1b      	lsrs	r3, r3, #12
 8002a9c:	f003 030f 	and.w	r3, r3, #15
 8002aa0:	627b      	str	r3, [r7, #36]	@ 0x24
 8002aa2:	e005      	b.n	8002ab0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8002aa4:	4b67      	ldr	r3, [pc, #412]	@ (8002c44 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	0f1b      	lsrs	r3, r3, #28
 8002aaa:	f003 030f 	and.w	r3, r3, #15
 8002aae:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002ab0:	4a65      	ldr	r2, [pc, #404]	@ (8002c48 <HAL_RCC_GetSysClockFreq+0x1f4>)
 8002ab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ab4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ab8:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002aba:	69bb      	ldr	r3, [r7, #24]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d110      	bne.n	8002ae2 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002ac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ac2:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002ac4:	e00d      	b.n	8002ae2 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002ac6:	4b5f      	ldr	r3, [pc, #380]	@ (8002c44 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002ac8:	69db      	ldr	r3, [r3, #28]
 8002aca:	f003 030c 	and.w	r3, r3, #12
 8002ace:	2b04      	cmp	r3, #4
 8002ad0:	d102      	bne.n	8002ad8 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002ad2:	4b5e      	ldr	r3, [pc, #376]	@ (8002c4c <HAL_RCC_GetSysClockFreq+0x1f8>)
 8002ad4:	623b      	str	r3, [r7, #32]
 8002ad6:	e004      	b.n	8002ae2 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ad8:	69bb      	ldr	r3, [r7, #24]
 8002ada:	2b08      	cmp	r3, #8
 8002adc:	d101      	bne.n	8002ae2 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002ade:	4b5b      	ldr	r3, [pc, #364]	@ (8002c4c <HAL_RCC_GetSysClockFreq+0x1f8>)
 8002ae0:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ae2:	69bb      	ldr	r3, [r7, #24]
 8002ae4:	2b0c      	cmp	r3, #12
 8002ae6:	f040 80a5 	bne.w	8002c34 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8002aea:	4b56      	ldr	r3, [pc, #344]	@ (8002c44 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002aec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002aee:	f003 0303 	and.w	r3, r3, #3
 8002af2:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8002af4:	4b53      	ldr	r3, [pc, #332]	@ (8002c44 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002af6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002af8:	0a1b      	lsrs	r3, r3, #8
 8002afa:	f003 030f 	and.w	r3, r3, #15
 8002afe:	3301      	adds	r3, #1
 8002b00:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8002b02:	4b50      	ldr	r3, [pc, #320]	@ (8002c44 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002b04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b06:	091b      	lsrs	r3, r3, #4
 8002b08:	f003 0301 	and.w	r3, r3, #1
 8002b0c:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8002b0e:	4b4d      	ldr	r3, [pc, #308]	@ (8002c44 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002b10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b12:	08db      	lsrs	r3, r3, #3
 8002b14:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002b18:	68ba      	ldr	r2, [r7, #8]
 8002b1a:	fb02 f303 	mul.w	r3, r2, r3
 8002b1e:	ee07 3a90 	vmov	s15, r3
 8002b22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b26:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	2b02      	cmp	r3, #2
 8002b2e:	d003      	beq.n	8002b38 <HAL_RCC_GetSysClockFreq+0xe4>
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	2b03      	cmp	r3, #3
 8002b34:	d022      	beq.n	8002b7c <HAL_RCC_GetSysClockFreq+0x128>
 8002b36:	e043      	b.n	8002bc0 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	ee07 3a90 	vmov	s15, r3
 8002b3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b42:	eddf 6a43 	vldr	s13, [pc, #268]	@ 8002c50 <HAL_RCC_GetSysClockFreq+0x1fc>
 8002b46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002b4a:	4b3e      	ldr	r3, [pc, #248]	@ (8002c44 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002b4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b52:	ee07 3a90 	vmov	s15, r3
 8002b56:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002b5a:	ed97 6a01 	vldr	s12, [r7, #4]
 8002b5e:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 8002c54 <HAL_RCC_GetSysClockFreq+0x200>
 8002b62:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002b66:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002b6a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002b6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002b72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b76:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002b7a:	e046      	b.n	8002c0a <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	ee07 3a90 	vmov	s15, r3
 8002b82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b86:	eddf 6a32 	vldr	s13, [pc, #200]	@ 8002c50 <HAL_RCC_GetSysClockFreq+0x1fc>
 8002b8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002b8e:	4b2d      	ldr	r3, [pc, #180]	@ (8002c44 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002b90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b96:	ee07 3a90 	vmov	s15, r3
 8002b9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002b9e:	ed97 6a01 	vldr	s12, [r7, #4]
 8002ba2:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 8002c54 <HAL_RCC_GetSysClockFreq+0x200>
 8002ba6:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002baa:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002bae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002bb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002bb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002bbe:	e024      	b.n	8002c0a <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002bc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bc2:	ee07 3a90 	vmov	s15, r3
 8002bc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	ee07 3a90 	vmov	s15, r3
 8002bd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002bd4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002bd8:	4b1a      	ldr	r3, [pc, #104]	@ (8002c44 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002bda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bdc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002be0:	ee07 3a90 	vmov	s15, r3
 8002be4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002be8:	ed97 6a01 	vldr	s12, [r7, #4]
 8002bec:	eddf 5a19 	vldr	s11, [pc, #100]	@ 8002c54 <HAL_RCC_GetSysClockFreq+0x200>
 8002bf0:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002bf4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002bf8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002bfc:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002c00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c04:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002c08:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8002c0a:	4b0e      	ldr	r3, [pc, #56]	@ (8002c44 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002c0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c0e:	0e1b      	lsrs	r3, r3, #24
 8002c10:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002c14:	3301      	adds	r3, #1
 8002c16:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	ee07 3a90 	vmov	s15, r3
 8002c1e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002c22:	edd7 6a07 	vldr	s13, [r7, #28]
 8002c26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c2e:	ee17 3a90 	vmov	r3, s15
 8002c32:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8002c34:	6a3b      	ldr	r3, [r7, #32]
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	372c      	adds	r7, #44	@ 0x2c
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr
 8002c42:	bf00      	nop
 8002c44:	46020c00 	.word	0x46020c00
 8002c48:	08007f50 	.word	0x08007f50
 8002c4c:	00f42400 	.word	0x00f42400
 8002c50:	4b742400 	.word	0x4b742400
 8002c54:	46000000 	.word	0x46000000

08002c58 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002c5c:	f7ff fefa 	bl	8002a54 <HAL_RCC_GetSysClockFreq>
 8002c60:	4602      	mov	r2, r0
 8002c62:	4b07      	ldr	r3, [pc, #28]	@ (8002c80 <HAL_RCC_GetHCLKFreq+0x28>)
 8002c64:	6a1b      	ldr	r3, [r3, #32]
 8002c66:	f003 030f 	and.w	r3, r3, #15
 8002c6a:	4906      	ldr	r1, [pc, #24]	@ (8002c84 <HAL_RCC_GetHCLKFreq+0x2c>)
 8002c6c:	5ccb      	ldrb	r3, [r1, r3]
 8002c6e:	fa22 f303 	lsr.w	r3, r2, r3
 8002c72:	4a05      	ldr	r2, [pc, #20]	@ (8002c88 <HAL_RCC_GetHCLKFreq+0x30>)
 8002c74:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8002c76:	4b04      	ldr	r3, [pc, #16]	@ (8002c88 <HAL_RCC_GetHCLKFreq+0x30>)
 8002c78:	681b      	ldr	r3, [r3, #0]
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	bd80      	pop	{r7, pc}
 8002c7e:	bf00      	nop
 8002c80:	46020c00 	.word	0x46020c00
 8002c84:	08007f38 	.word	0x08007f38
 8002c88:	20000000 	.word	0x20000000

08002c8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8002c90:	f7ff ffe2 	bl	8002c58 <HAL_RCC_GetHCLKFreq>
 8002c94:	4602      	mov	r2, r0
 8002c96:	4b05      	ldr	r3, [pc, #20]	@ (8002cac <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c98:	6a1b      	ldr	r3, [r3, #32]
 8002c9a:	091b      	lsrs	r3, r3, #4
 8002c9c:	f003 0307 	and.w	r3, r3, #7
 8002ca0:	4903      	ldr	r1, [pc, #12]	@ (8002cb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ca2:	5ccb      	ldrb	r3, [r1, r3]
 8002ca4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	bd80      	pop	{r7, pc}
 8002cac:	46020c00 	.word	0x46020c00
 8002cb0:	08007f48 	.word	0x08007f48

08002cb4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8002cb8:	f7ff ffce 	bl	8002c58 <HAL_RCC_GetHCLKFreq>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	4b05      	ldr	r3, [pc, #20]	@ (8002cd4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002cc0:	6a1b      	ldr	r3, [r3, #32]
 8002cc2:	0a1b      	lsrs	r3, r3, #8
 8002cc4:	f003 0307 	and.w	r3, r3, #7
 8002cc8:	4903      	ldr	r1, [pc, #12]	@ (8002cd8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002cca:	5ccb      	ldrb	r3, [r1, r3]
 8002ccc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	bd80      	pop	{r7, pc}
 8002cd4:	46020c00 	.word	0x46020c00
 8002cd8:	08007f48 	.word	0x08007f48

08002cdc <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8002ce0:	f7ff ffba 	bl	8002c58 <HAL_RCC_GetHCLKFreq>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	4b05      	ldr	r3, [pc, #20]	@ (8002cfc <HAL_RCC_GetPCLK3Freq+0x20>)
 8002ce8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cea:	091b      	lsrs	r3, r3, #4
 8002cec:	f003 0307 	and.w	r3, r3, #7
 8002cf0:	4903      	ldr	r1, [pc, #12]	@ (8002d00 <HAL_RCC_GetPCLK3Freq+0x24>)
 8002cf2:	5ccb      	ldrb	r3, [r1, r3]
 8002cf4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	bd80      	pop	{r7, pc}
 8002cfc:	46020c00 	.word	0x46020c00
 8002d00:	08007f48 	.word	0x08007f48

08002d04 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b086      	sub	sp, #24
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002d0c:	4b3e      	ldr	r3, [pc, #248]	@ (8002e08 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002d0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d12:	f003 0304 	and.w	r3, r3, #4
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d003      	beq.n	8002d22 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002d1a:	f7fe fd5f 	bl	80017dc <HAL_PWREx_GetVoltageRange>
 8002d1e:	6178      	str	r0, [r7, #20]
 8002d20:	e019      	b.n	8002d56 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002d22:	4b39      	ldr	r3, [pc, #228]	@ (8002e08 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002d24:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d28:	4a37      	ldr	r2, [pc, #220]	@ (8002e08 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002d2a:	f043 0304 	orr.w	r3, r3, #4
 8002d2e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8002d32:	4b35      	ldr	r3, [pc, #212]	@ (8002e08 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002d34:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d38:	f003 0304 	and.w	r3, r3, #4
 8002d3c:	60fb      	str	r3, [r7, #12]
 8002d3e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002d40:	f7fe fd4c 	bl	80017dc <HAL_PWREx_GetVoltageRange>
 8002d44:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002d46:	4b30      	ldr	r3, [pc, #192]	@ (8002e08 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002d48:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d4c:	4a2e      	ldr	r2, [pc, #184]	@ (8002e08 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002d4e:	f023 0304 	bic.w	r3, r3, #4
 8002d52:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002d5c:	d003      	beq.n	8002d66 <RCC_SetFlashLatencyFromMSIRange+0x62>
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002d64:	d109      	bne.n	8002d7a <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002d6c:	d202      	bcs.n	8002d74 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8002d6e:	2301      	movs	r3, #1
 8002d70:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8002d72:	e033      	b.n	8002ddc <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8002d74:	2300      	movs	r3, #0
 8002d76:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8002d78:	e030      	b.n	8002ddc <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002d80:	d208      	bcs.n	8002d94 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d88:	d102      	bne.n	8002d90 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8002d8a:	2303      	movs	r3, #3
 8002d8c:	613b      	str	r3, [r7, #16]
 8002d8e:	e025      	b.n	8002ddc <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8002d90:	2301      	movs	r3, #1
 8002d92:	e035      	b.n	8002e00 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002d9a:	d90f      	bls.n	8002dbc <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d109      	bne.n	8002db6 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002da8:	d902      	bls.n	8002db0 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8002daa:	2300      	movs	r3, #0
 8002dac:	613b      	str	r3, [r7, #16]
 8002dae:	e015      	b.n	8002ddc <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8002db0:	2301      	movs	r3, #1
 8002db2:	613b      	str	r3, [r7, #16]
 8002db4:	e012      	b.n	8002ddc <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8002db6:	2300      	movs	r3, #0
 8002db8:	613b      	str	r3, [r7, #16]
 8002dba:	e00f      	b.n	8002ddc <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002dc2:	d109      	bne.n	8002dd8 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002dca:	d102      	bne.n	8002dd2 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8002dcc:	2301      	movs	r3, #1
 8002dce:	613b      	str	r3, [r7, #16]
 8002dd0:	e004      	b.n	8002ddc <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8002dd2:	2302      	movs	r3, #2
 8002dd4:	613b      	str	r3, [r7, #16]
 8002dd6:	e001      	b.n	8002ddc <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8002dd8:	2301      	movs	r3, #1
 8002dda:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002ddc:	4b0b      	ldr	r3, [pc, #44]	@ (8002e0c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f023 020f 	bic.w	r2, r3, #15
 8002de4:	4909      	ldr	r1, [pc, #36]	@ (8002e0c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	4313      	orrs	r3, r2
 8002dea:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8002dec:	4b07      	ldr	r3, [pc, #28]	@ (8002e0c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f003 030f 	and.w	r3, r3, #15
 8002df4:	693a      	ldr	r2, [r7, #16]
 8002df6:	429a      	cmp	r2, r3
 8002df8:	d001      	beq.n	8002dfe <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e000      	b.n	8002e00 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8002dfe:	2300      	movs	r3, #0
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	3718      	adds	r7, #24
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}
 8002e08:	46020c00 	.word	0x46020c00
 8002e0c:	40022000 	.word	0x40022000

08002e10 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8002e10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e14:	b0c8      	sub	sp, #288	@ 0x120
 8002e16:	af00      	add	r7, sp, #0
 8002e18:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002e22:	2300      	movs	r3, #0
 8002e24:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e28:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e30:	f002 0401 	and.w	r4, r2, #1
 8002e34:	2500      	movs	r5, #0
 8002e36:	ea54 0305 	orrs.w	r3, r4, r5
 8002e3a:	d00b      	beq.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8002e3c:	4bd5      	ldr	r3, [pc, #852]	@ (8003194 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002e3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002e42:	f023 0103 	bic.w	r1, r3, #3
 8002e46:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002e4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e4c:	4ad1      	ldr	r2, [pc, #836]	@ (8003194 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002e4e:	430b      	orrs	r3, r1
 8002e50:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002e54:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e5c:	f002 0802 	and.w	r8, r2, #2
 8002e60:	f04f 0900 	mov.w	r9, #0
 8002e64:	ea58 0309 	orrs.w	r3, r8, r9
 8002e68:	d00b      	beq.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8002e6a:	4bca      	ldr	r3, [pc, #808]	@ (8003194 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002e6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002e70:	f023 010c 	bic.w	r1, r3, #12
 8002e74:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002e78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e7a:	4ac6      	ldr	r2, [pc, #792]	@ (8003194 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002e7c:	430b      	orrs	r3, r1
 8002e7e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002e82:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e8a:	f002 0a04 	and.w	sl, r2, #4
 8002e8e:	f04f 0b00 	mov.w	fp, #0
 8002e92:	ea5a 030b 	orrs.w	r3, sl, fp
 8002e96:	d00b      	beq.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8002e98:	4bbe      	ldr	r3, [pc, #760]	@ (8003194 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002e9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002e9e:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8002ea2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002ea6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ea8:	4aba      	ldr	r2, [pc, #744]	@ (8003194 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002eaa:	430b      	orrs	r3, r1
 8002eac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002eb0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eb8:	f002 0308 	and.w	r3, r2, #8
 8002ebc:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002ec6:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8002eca:	460b      	mov	r3, r1
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	d00b      	beq.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8002ed0:	4bb0      	ldr	r3, [pc, #704]	@ (8003194 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002ed2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002ed6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002eda:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002ede:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ee0:	4aac      	ldr	r2, [pc, #688]	@ (8003194 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002ee2:	430b      	orrs	r3, r1
 8002ee4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002ee8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ef0:	f002 0310 	and.w	r3, r2, #16
 8002ef4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8002ef8:	2300      	movs	r3, #0
 8002efa:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8002efe:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8002f02:	460b      	mov	r3, r1
 8002f04:	4313      	orrs	r3, r2
 8002f06:	d00b      	beq.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8002f08:	4ba2      	ldr	r3, [pc, #648]	@ (8003194 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002f0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002f0e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002f12:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002f16:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f18:	4a9e      	ldr	r2, [pc, #632]	@ (8003194 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002f1a:	430b      	orrs	r3, r1
 8002f1c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002f20:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f28:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8002f2c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8002f30:	2300      	movs	r3, #0
 8002f32:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8002f36:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8002f3a:	460b      	mov	r3, r1
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	d00b      	beq.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 8002f40:	4b94      	ldr	r3, [pc, #592]	@ (8003194 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002f42:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8002f46:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8002f4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002f4e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002f50:	4a90      	ldr	r2, [pc, #576]	@ (8003194 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002f52:	430b      	orrs	r3, r1
 8002f54:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002f58:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f60:	f002 0320 	and.w	r3, r2, #32
 8002f64:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002f68:	2300      	movs	r3, #0
 8002f6a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8002f6e:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8002f72:	460b      	mov	r3, r1
 8002f74:	4313      	orrs	r3, r2
 8002f76:	d00b      	beq.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8002f78:	4b86      	ldr	r3, [pc, #536]	@ (8003194 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002f7a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002f7e:	f023 0107 	bic.w	r1, r3, #7
 8002f82:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002f86:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002f88:	4a82      	ldr	r2, [pc, #520]	@ (8003194 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002f8a:	430b      	orrs	r3, r1
 8002f8c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002f90:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f98:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8002f9c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002fa6:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8002faa:	460b      	mov	r3, r1
 8002fac:	4313      	orrs	r3, r2
 8002fae:	d00b      	beq.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8002fb0:	4b78      	ldr	r3, [pc, #480]	@ (8003194 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002fb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002fb6:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8002fba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002fbe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002fc0:	4a74      	ldr	r2, [pc, #464]	@ (8003194 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002fc2:	430b      	orrs	r3, r1
 8002fc4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002fc8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fd0:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8002fd4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002fd8:	2300      	movs	r3, #0
 8002fda:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8002fde:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002fe2:	460b      	mov	r3, r1
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	d00b      	beq.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8002fe8:	4b6a      	ldr	r3, [pc, #424]	@ (8003194 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002fea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002fee:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002ff2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002ff6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ff8:	4a66      	ldr	r2, [pc, #408]	@ (8003194 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8002ffa:	430b      	orrs	r3, r1
 8002ffc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003000:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003008:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 800300c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003010:	2300      	movs	r3, #0
 8003012:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003016:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800301a:	460b      	mov	r3, r1
 800301c:	4313      	orrs	r3, r2
 800301e:	d00b      	beq.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8003020:	4b5c      	ldr	r3, [pc, #368]	@ (8003194 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003022:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003026:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800302a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800302e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003030:	4a58      	ldr	r2, [pc, #352]	@ (8003194 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003032:	430b      	orrs	r3, r1
 8003034:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003038:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800303c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003040:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003044:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003048:	2300      	movs	r3, #0
 800304a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800304e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003052:	460b      	mov	r3, r1
 8003054:	4313      	orrs	r3, r2
 8003056:	d00b      	beq.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8003058:	4b4e      	ldr	r3, [pc, #312]	@ (8003194 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800305a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800305e:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 8003062:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003066:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003068:	4a4a      	ldr	r2, [pc, #296]	@ (8003194 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800306a:	430b      	orrs	r3, r1
 800306c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(I2C5)
  /*-------------------------- I2C5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C5) == RCC_PERIPHCLK_I2C5)
 8003070:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003078:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800307c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003080:	2300      	movs	r3, #0
 8003082:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003086:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800308a:	460b      	mov	r3, r1
 800308c:	4313      	orrs	r3, r2
 800308e:	d00b      	beq.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C5CLKSOURCE(pPeriphClkInit->I2c5ClockSelection));

    /* Configure the I2C5 clock source */
    __HAL_RCC_I2C5_CONFIG(pPeriphClkInit->I2c5ClockSelection);
 8003090:	4b40      	ldr	r3, [pc, #256]	@ (8003194 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003092:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003096:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 800309a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800309e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80030a0:	4a3c      	ldr	r2, [pc, #240]	@ (8003194 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80030a2:	430b      	orrs	r3, r1
 80030a4:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* I2C5 */

#if defined(I2C6)
  /*-------------------------- I2C6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C6) == RCC_PERIPHCLK_I2C6)
 80030a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80030ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030b0:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80030b4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80030b8:	2300      	movs	r3, #0
 80030ba:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80030be:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80030c2:	460b      	mov	r3, r1
 80030c4:	4313      	orrs	r3, r2
 80030c6:	d00c      	beq.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C6CLKSOURCE(pPeriphClkInit->I2c6ClockSelection));

    /* Configure the I2C6 clock source */
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
 80030c8:	4b32      	ldr	r3, [pc, #200]	@ (8003194 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80030ca:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80030ce:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80030d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80030d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80030da:	4a2e      	ldr	r2, [pc, #184]	@ (8003194 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80030dc:	430b      	orrs	r3, r1
 80030de:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80030e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80030e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030ea:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 80030ee:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80030f2:	2300      	movs	r3, #0
 80030f4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80030f8:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80030fc:	460b      	mov	r3, r1
 80030fe:	4313      	orrs	r3, r2
 8003100:	d00c      	beq.n	800311c <HAL_RCCEx_PeriphCLKConfig+0x30c>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8003102:	4b24      	ldr	r3, [pc, #144]	@ (8003194 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003104:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003108:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 800310c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003110:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003114:	4a1f      	ldr	r2, [pc, #124]	@ (8003194 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003116:	430b      	orrs	r3, r1
 8003118:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800311c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003124:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8003128:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800312c:	2300      	movs	r3, #0
 800312e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003132:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003136:	460b      	mov	r3, r1
 8003138:	4313      	orrs	r3, r2
 800313a:	d00c      	beq.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 800313c:	4b15      	ldr	r3, [pc, #84]	@ (8003194 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800313e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003142:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8003146:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800314a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800314e:	4a11      	ldr	r2, [pc, #68]	@ (8003194 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003150:	430b      	orrs	r3, r1
 8003152:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8003156:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800315a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800315e:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8003162:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003166:	2300      	movs	r3, #0
 8003168:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800316c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8003170:	460b      	mov	r3, r1
 8003172:	4313      	orrs	r3, r2
 8003174:	d010      	beq.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x388>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8003176:	4b07      	ldr	r3, [pc, #28]	@ (8003194 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003178:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800317c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003180:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003184:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003188:	4a02      	ldr	r2, [pc, #8]	@ (8003194 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800318a:	430b      	orrs	r3, r1
 800318c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003190:	e002      	b.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x388>
 8003192:	bf00      	nop
 8003194:	46020c00 	.word	0x46020c00
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003198:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800319c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031a0:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80031a4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80031a8:	2300      	movs	r3, #0
 80031aa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80031ae:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80031b2:	460b      	mov	r3, r1
 80031b4:	4313      	orrs	r3, r2
 80031b6:	d04c      	beq.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 80031b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80031bc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80031c0:	2b80      	cmp	r3, #128	@ 0x80
 80031c2:	d02d      	beq.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0x410>
 80031c4:	2b80      	cmp	r3, #128	@ 0x80
 80031c6:	d827      	bhi.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x408>
 80031c8:	2b60      	cmp	r3, #96	@ 0x60
 80031ca:	d02b      	beq.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0x414>
 80031cc:	2b60      	cmp	r3, #96	@ 0x60
 80031ce:	d823      	bhi.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x408>
 80031d0:	2b40      	cmp	r3, #64	@ 0x40
 80031d2:	d006      	beq.n	80031e2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 80031d4:	2b40      	cmp	r3, #64	@ 0x40
 80031d6:	d81f      	bhi.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x408>
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d009      	beq.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80031dc:	2b20      	cmp	r3, #32
 80031de:	d011      	beq.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 80031e0:	e01a      	b.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80031e2:	4bc0      	ldr	r3, [pc, #768]	@ (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80031e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031e6:	4abf      	ldr	r2, [pc, #764]	@ (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80031e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031ec:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 80031ee:	e01a      	b.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80031f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80031f4:	3308      	adds	r3, #8
 80031f6:	4618      	mov	r0, r3
 80031f8:	f002 fcd6 	bl	8005ba8 <RCCEx_PLL2_Config>
 80031fc:	4603      	mov	r3, r0
 80031fe:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003202:	e010      	b.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003204:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003208:	332c      	adds	r3, #44	@ 0x2c
 800320a:	4618      	mov	r0, r3
 800320c:	f002 fd64 	bl	8005cd8 <RCCEx_PLL3_Config>
 8003210:	4603      	mov	r3, r0
 8003212:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003216:	e006      	b.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x416>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800321e:	e002      	b.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 8003220:	bf00      	nop
 8003222:	e000      	b.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 8003224:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003226:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800322a:	2b00      	cmp	r3, #0
 800322c:	d10d      	bne.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 800322e:	4bad      	ldr	r3, [pc, #692]	@ (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8003230:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003234:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 8003238:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800323c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003240:	4aa8      	ldr	r2, [pc, #672]	@ (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8003242:	430b      	orrs	r3, r1
 8003244:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003248:	e003      	b.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800324a:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800324e:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003252:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800325a:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800325e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003262:	2300      	movs	r3, #0
 8003264:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003268:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800326c:	460b      	mov	r3, r1
 800326e:	4313      	orrs	r3, r2
 8003270:	d053      	beq.n	800331a <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8003272:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003276:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800327a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800327e:	d033      	beq.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
 8003280:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003284:	d82c      	bhi.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8003286:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800328a:	d02f      	beq.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x4dc>
 800328c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003290:	d826      	bhi.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8003292:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003296:	d008      	beq.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0x49a>
 8003298:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800329c:	d820      	bhi.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d00a      	beq.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80032a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80032a6:	d011      	beq.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80032a8:	e01a      	b.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80032aa:	4b8e      	ldr	r3, [pc, #568]	@ (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80032ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032ae:	4a8d      	ldr	r2, [pc, #564]	@ (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80032b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032b4:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 80032b6:	e01a      	b.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80032b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80032bc:	3308      	adds	r3, #8
 80032be:	4618      	mov	r0, r3
 80032c0:	f002 fc72 	bl	8005ba8 <RCCEx_PLL2_Config>
 80032c4:	4603      	mov	r3, r0
 80032c6:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI2 clock source config set later after clock selection check */
        break;
 80032ca:	e010      	b.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80032cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80032d0:	332c      	adds	r3, #44	@ 0x2c
 80032d2:	4618      	mov	r0, r3
 80032d4:	f002 fd00 	bl	8005cd8 <RCCEx_PLL3_Config>
 80032d8:	4603      	mov	r3, r0
 80032da:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI2 clock source config set later after clock selection check */
        break;
 80032de:	e006      	b.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x4de>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80032e0:	2301      	movs	r3, #1
 80032e2:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 80032e6:	e002      	b.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 80032e8:	bf00      	nop
 80032ea:	e000      	b.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 80032ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032ee:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d10d      	bne.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 80032f6:	4b7b      	ldr	r3, [pc, #492]	@ (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80032f8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80032fc:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8003300:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003304:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003308:	4a76      	ldr	r2, [pc, #472]	@ (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800330a:	430b      	orrs	r3, r1
 800330c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003310:	e003      	b.n	800331a <HAL_RCCEx_PeriphCLKConfig+0x50a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003312:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8003316:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 800331a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800331e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003322:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003326:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800332a:	2300      	movs	r3, #0
 800332c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003330:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8003334:	460b      	mov	r3, r1
 8003336:	4313      	orrs	r3, r2
 8003338:	d046      	beq.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 800333a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800333e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003342:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8003346:	d028      	beq.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x58a>
 8003348:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800334c:	d821      	bhi.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x582>
 800334e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003352:	d022      	beq.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x58a>
 8003354:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003358:	d81b      	bhi.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x582>
 800335a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800335e:	d01c      	beq.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x58a>
 8003360:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003364:	d815      	bhi.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8003366:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800336a:	d008      	beq.n	800337e <HAL_RCCEx_PeriphCLKConfig+0x56e>
 800336c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003370:	d80f      	bhi.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8003372:	2b00      	cmp	r3, #0
 8003374:	d011      	beq.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x58a>
 8003376:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800337a:	d00e      	beq.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800337c:	e009      	b.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800337e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003382:	3308      	adds	r3, #8
 8003384:	4618      	mov	r0, r3
 8003386:	f002 fc0f 	bl	8005ba8 <RCCEx_PLL2_Config>
 800338a:	4603      	mov	r3, r0
 800338c:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8003390:	e004      	b.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x58c>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8003398:	e000      	b.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x58c>
        break;
 800339a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800339c:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d10d      	bne.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x5b0>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 80033a4:	4b4f      	ldr	r3, [pc, #316]	@ (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80033a6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80033aa:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80033ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80033b2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80033b6:	4a4b      	ldr	r2, [pc, #300]	@ (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80033b8:	430b      	orrs	r3, r1
 80033ba:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80033be:	e003      	b.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033c0:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 80033c4:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 80033c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80033cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033d0:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80033d4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80033d8:	2300      	movs	r3, #0
 80033da:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80033de:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80033e2:	460b      	mov	r3, r1
 80033e4:	4313      	orrs	r3, r2
 80033e6:	d03f      	beq.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x658>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 80033e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80033ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80033f0:	2b04      	cmp	r3, #4
 80033f2:	d81e      	bhi.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x622>
 80033f4:	a201      	add	r2, pc, #4	@ (adr r2, 80033fc <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80033f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033fa:	bf00      	nop
 80033fc:	0800343b 	.word	0x0800343b
 8003400:	08003411 	.word	0x08003411
 8003404:	0800341f 	.word	0x0800341f
 8003408:	0800343b 	.word	0x0800343b
 800340c:	0800343b 	.word	0x0800343b
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003410:	4b34      	ldr	r3, [pc, #208]	@ (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8003412:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003414:	4a33      	ldr	r2, [pc, #204]	@ (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8003416:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800341a:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800341c:	e00e      	b.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x62c>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800341e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003422:	332c      	adds	r3, #44	@ 0x2c
 8003424:	4618      	mov	r0, r3
 8003426:	f002 fc57 	bl	8005cd8 <RCCEx_PLL3_Config>
 800342a:	4603      	mov	r3, r0
 800342c:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8003430:	e004      	b.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x62c>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8003438:	e000      	b.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x62c>
        break;
 800343a:	bf00      	nop
    }
    if (ret == HAL_OK)
 800343c:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8003440:	2b00      	cmp	r3, #0
 8003442:	d10d      	bne.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8003444:	4b27      	ldr	r3, [pc, #156]	@ (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8003446:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800344a:	f023 0107 	bic.w	r1, r3, #7
 800344e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003452:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003456:	4a23      	ldr	r2, [pc, #140]	@ (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8003458:	430b      	orrs	r3, r1
 800345a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800345e:	e003      	b.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x658>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003460:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8003464:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8003468:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800346c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003470:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8003474:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003476:	2300      	movs	r3, #0
 8003478:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800347a:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800347e:	460b      	mov	r3, r1
 8003480:	4313      	orrs	r3, r2
 8003482:	d04c      	beq.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x70e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8003484:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003488:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800348c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003490:	d02a      	beq.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
 8003492:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003496:	d821      	bhi.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 8003498:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800349c:	d026      	beq.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0x6dc>
 800349e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80034a2:	d81b      	bhi.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 80034a4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80034a8:	d00e      	beq.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 80034aa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80034ae:	d815      	bhi.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d01d      	beq.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0x6e0>
 80034b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80034b8:	d110      	bne.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80034ba:	4b0a      	ldr	r3, [pc, #40]	@ (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80034bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034be:	4a09      	ldr	r2, [pc, #36]	@ (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80034c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034c4:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 80034c6:	e014      	b.n	80034f2 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80034c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80034cc:	332c      	adds	r3, #44	@ 0x2c
 80034ce:	4618      	mov	r0, r3
 80034d0:	f002 fc02 	bl	8005cd8 <RCCEx_PLL3_Config>
 80034d4:	4603      	mov	r3, r0
 80034d6:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 80034da:	e00a      	b.n	80034f2 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80034dc:	2301      	movs	r3, #1
 80034de:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 80034e2:	e006      	b.n	80034f2 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 80034e4:	46020c00 	.word	0x46020c00
        break;
 80034e8:	bf00      	nop
 80034ea:	e002      	b.n	80034f2 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
        break;
 80034ec:	bf00      	nop
 80034ee:	e000      	b.n	80034f2 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
        break;
 80034f0:	bf00      	nop
    }
    if (ret == HAL_OK)
 80034f2:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d10d      	bne.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x706>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 80034fa:	4baf      	ldr	r3, [pc, #700]	@ (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 80034fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003500:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003504:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003508:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800350c:	4aaa      	ldr	r2, [pc, #680]	@ (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800350e:	430b      	orrs	r3, r1
 8003510:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003514:	e003      	b.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x70e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003516:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800351a:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800351e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003526:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800352a:	673b      	str	r3, [r7, #112]	@ 0x70
 800352c:	2300      	movs	r3, #0
 800352e:	677b      	str	r3, [r7, #116]	@ 0x74
 8003530:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8003534:	460b      	mov	r3, r1
 8003536:	4313      	orrs	r3, r2
 8003538:	f000 80b5 	beq.w	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x896>
  {
    FlagStatus       pwrclkchanged = RESET;
 800353c:	2300      	movs	r3, #0
 800353e:	f887 3119 	strb.w	r3, [r7, #281]	@ 0x119
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003542:	4b9d      	ldr	r3, [pc, #628]	@ (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8003544:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003548:	f003 0304 	and.w	r3, r3, #4
 800354c:	2b00      	cmp	r3, #0
 800354e:	d113      	bne.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x768>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003550:	4b99      	ldr	r3, [pc, #612]	@ (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8003552:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003556:	4a98      	ldr	r2, [pc, #608]	@ (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8003558:	f043 0304 	orr.w	r3, r3, #4
 800355c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8003560:	4b95      	ldr	r3, [pc, #596]	@ (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8003562:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003566:	f003 0304 	and.w	r3, r3, #4
 800356a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 800356e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
      pwrclkchanged = SET;
 8003572:	2301      	movs	r3, #1
 8003574:	f887 3119 	strb.w	r3, [r7, #281]	@ 0x119
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8003578:	4b90      	ldr	r3, [pc, #576]	@ (80037bc <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 800357a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800357c:	4a8f      	ldr	r2, [pc, #572]	@ (80037bc <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 800357e:	f043 0301 	orr.w	r3, r3, #1
 8003582:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003584:	f7fd fc08 	bl	8000d98 <HAL_GetTick>
 8003588:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800358c:	e00b      	b.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x796>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800358e:	f7fd fc03 	bl	8000d98 <HAL_GetTick>
 8003592:	4602      	mov	r2, r0
 8003594:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003598:	1ad3      	subs	r3, r2, r3
 800359a:	2b02      	cmp	r3, #2
 800359c:	d903      	bls.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x796>
      {
        ret = HAL_TIMEOUT;
 800359e:	2303      	movs	r3, #3
 80035a0:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 80035a4:	e005      	b.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x7a2>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80035a6:	4b85      	ldr	r3, [pc, #532]	@ (80037bc <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 80035a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035aa:	f003 0301 	and.w	r3, r3, #1
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d0ed      	beq.n	800358e <HAL_RCCEx_PeriphCLKConfig+0x77e>
      }
    }

    if (ret == HAL_OK)
 80035b2:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d165      	bne.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x876>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80035ba:	4b7f      	ldr	r3, [pc, #508]	@ (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 80035bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80035c0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80035c4:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 80035c8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d023      	beq.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x808>
 80035d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80035d4:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 80035d8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80035dc:	4293      	cmp	r3, r2
 80035de:	d01b      	beq.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x808>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80035e0:	4b75      	ldr	r3, [pc, #468]	@ (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 80035e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80035e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80035ea:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80035ee:	4b72      	ldr	r3, [pc, #456]	@ (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 80035f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80035f4:	4a70      	ldr	r2, [pc, #448]	@ (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 80035f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035fa:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 80035fe:	4b6e      	ldr	r3, [pc, #440]	@ (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8003600:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003604:	4a6c      	ldr	r2, [pc, #432]	@ (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8003606:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800360a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800360e:	4a6a      	ldr	r2, [pc, #424]	@ (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8003610:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003614:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003618:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800361c:	f003 0301 	and.w	r3, r3, #1
 8003620:	2b00      	cmp	r3, #0
 8003622:	d019      	beq.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x848>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003624:	f7fd fbb8 	bl	8000d98 <HAL_GetTick>
 8003628:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800362c:	e00d      	b.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800362e:	f7fd fbb3 	bl	8000d98 <HAL_GetTick>
 8003632:	4602      	mov	r2, r0
 8003634:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003638:	1ad2      	subs	r2, r2, r3
 800363a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800363e:	429a      	cmp	r2, r3
 8003640:	d903      	bls.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x83a>
          {
            ret = HAL_TIMEOUT;
 8003642:	2303      	movs	r3, #3
 8003644:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
            break;
 8003648:	e006      	b.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x848>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800364a:	4b5b      	ldr	r3, [pc, #364]	@ (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800364c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003650:	f003 0302 	and.w	r3, r3, #2
 8003654:	2b00      	cmp	r3, #0
 8003656:	d0ea      	beq.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x81e>
          }
        }
      }

      if (ret == HAL_OK)
 8003658:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800365c:	2b00      	cmp	r3, #0
 800365e:	d10d      	bne.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x86c>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8003660:	4b55      	ldr	r3, [pc, #340]	@ (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8003662:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003666:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800366a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800366e:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8003672:	4a51      	ldr	r2, [pc, #324]	@ (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8003674:	430b      	orrs	r3, r1
 8003676:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800367a:	e008      	b.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x87e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800367c:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8003680:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
 8003684:	e003      	b.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x87e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003686:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800368a:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800368e:	f897 3119 	ldrb.w	r3, [r7, #281]	@ 0x119
 8003692:	2b01      	cmp	r3, #1
 8003694:	d107      	bne.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x896>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003696:	4b48      	ldr	r3, [pc, #288]	@ (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8003698:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800369c:	4a46      	ldr	r2, [pc, #280]	@ (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800369e:	f023 0304 	bic.w	r3, r3, #4
 80036a2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 80036a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80036aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036ae:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80036b2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80036b4:	2300      	movs	r3, #0
 80036b6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80036b8:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80036bc:	460b      	mov	r3, r1
 80036be:	4313      	orrs	r3, r2
 80036c0:	d042      	beq.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x938>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 80036c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80036c6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80036ca:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80036ce:	d022      	beq.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x906>
 80036d0:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80036d4:	d81b      	bhi.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 80036d6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80036da:	d011      	beq.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 80036dc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80036e0:	d815      	bhi.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d019      	beq.n	800371a <HAL_RCCEx_PeriphCLKConfig+0x90a>
 80036e6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80036ea:	d110      	bne.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x8fe>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80036ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80036f0:	3308      	adds	r3, #8
 80036f2:	4618      	mov	r0, r3
 80036f4:	f002 fa58 	bl	8005ba8 <RCCEx_PLL2_Config>
 80036f8:	4603      	mov	r3, r0
 80036fa:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 80036fe:	e00d      	b.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x90c>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003700:	4b2d      	ldr	r3, [pc, #180]	@ (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8003702:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003704:	4a2c      	ldr	r2, [pc, #176]	@ (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8003706:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800370a:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800370c:	e006      	b.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x90c>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8003714:	e002      	b.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x90c>
        break;
 8003716:	bf00      	nop
 8003718:	e000      	b.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x90c>
        break;
 800371a:	bf00      	nop
    }
    if (ret == HAL_OK)
 800371c:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8003720:	2b00      	cmp	r3, #0
 8003722:	d10d      	bne.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x930>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 8003724:	4b24      	ldr	r3, [pc, #144]	@ (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8003726:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800372a:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800372e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003732:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003736:	4a20      	ldr	r2, [pc, #128]	@ (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8003738:	430b      	orrs	r3, r1
 800373a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800373e:	e003      	b.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x938>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003740:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8003744:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003748:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800374c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003750:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8003754:	663b      	str	r3, [r7, #96]	@ 0x60
 8003756:	2300      	movs	r3, #0
 8003758:	667b      	str	r3, [r7, #100]	@ 0x64
 800375a:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800375e:	460b      	mov	r3, r1
 8003760:	4313      	orrs	r3, r2
 8003762:	d031      	beq.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8003764:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003768:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800376c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003770:	d00b      	beq.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x97a>
 8003772:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003776:	d804      	bhi.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0x972>
 8003778:	2b00      	cmp	r3, #0
 800377a:	d008      	beq.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x97e>
 800377c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003780:	d007      	beq.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x982>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8003788:	e004      	b.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 800378a:	bf00      	nop
 800378c:	e002      	b.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 800378e:	bf00      	nop
 8003790:	e000      	b.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 8003792:	bf00      	nop
    }
    if (ret == HAL_OK)
 8003794:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8003798:	2b00      	cmp	r3, #0
 800379a:	d111      	bne.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 800379c:	4b06      	ldr	r3, [pc, #24]	@ (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800379e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80037a2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80037a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80037aa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80037ae:	4a02      	ldr	r2, [pc, #8]	@ (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 80037b0:	430b      	orrs	r3, r1
 80037b2:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80037b6:	e007      	b.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
 80037b8:	46020c00 	.word	0x46020c00
 80037bc:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037c0:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 80037c4:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#if defined(SAES)
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 80037c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80037cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037d0:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80037d4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80037d6:	2300      	movs	r3, #0
 80037d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80037da:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80037de:	460b      	mov	r3, r1
 80037e0:	4313      	orrs	r3, r2
 80037e2:	d00c      	beq.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x9ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 80037e4:	4bb2      	ldr	r3, [pc, #712]	@ (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80037e6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80037ea:	f423 6100 	bic.w	r1, r3, #2048	@ 0x800
 80037ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80037f2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80037f6:	4aae      	ldr	r2, [pc, #696]	@ (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80037f8:	430b      	orrs	r3, r1
 80037fa:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 80037fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003806:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800380a:	653b      	str	r3, [r7, #80]	@ 0x50
 800380c:	2300      	movs	r3, #0
 800380e:	657b      	str	r3, [r7, #84]	@ 0x54
 8003810:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8003814:	460b      	mov	r3, r1
 8003816:	4313      	orrs	r3, r2
 8003818:	d019      	beq.n	800384e <HAL_RCCEx_PeriphCLKConfig+0xa3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 800381a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800381e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003822:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003826:	d105      	bne.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0xa24>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003828:	4ba1      	ldr	r3, [pc, #644]	@ (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800382a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800382c:	4aa0      	ldr	r2, [pc, #640]	@ (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800382e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003832:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 8003834:	4b9e      	ldr	r3, [pc, #632]	@ (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003836:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800383a:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800383e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003842:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003846:	4a9a      	ldr	r2, [pc, #616]	@ (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003848:	430b      	orrs	r3, r1
 800384a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 800384e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003856:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800385a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800385c:	2300      	movs	r3, #0
 800385e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003860:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8003864:	460b      	mov	r3, r1
 8003866:	4313      	orrs	r3, r2
 8003868:	d00c      	beq.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0xa74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 800386a:	4b91      	ldr	r3, [pc, #580]	@ (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800386c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003870:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003874:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003878:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800387c:	4a8c      	ldr	r2, [pc, #560]	@ (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800387e:	430b      	orrs	r3, r1
 8003880:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8003884:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800388c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003890:	643b      	str	r3, [r7, #64]	@ 0x40
 8003892:	2300      	movs	r3, #0
 8003894:	647b      	str	r3, [r7, #68]	@ 0x44
 8003896:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800389a:	460b      	mov	r3, r1
 800389c:	4313      	orrs	r3, r2
 800389e:	d00c      	beq.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0xaaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 80038a0:	4b83      	ldr	r3, [pc, #524]	@ (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80038a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80038a6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80038aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80038ae:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80038b2:	4a7f      	ldr	r2, [pc, #508]	@ (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80038b4:	430b      	orrs	r3, r1
 80038b6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 80038ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80038be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038c2:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80038c6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80038c8:	2300      	movs	r3, #0
 80038ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80038cc:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80038d0:	460b      	mov	r3, r1
 80038d2:	4313      	orrs	r3, r2
 80038d4:	d00c      	beq.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0xae0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 80038d6:	4b76      	ldr	r3, [pc, #472]	@ (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80038d8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80038dc:	f023 0118 	bic.w	r1, r3, #24
 80038e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80038e4:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 80038e8:	4a71      	ldr	r2, [pc, #452]	@ (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80038ea:	430b      	orrs	r3, r1
 80038ec:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80038f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80038f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038f8:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 80038fc:	633b      	str	r3, [r7, #48]	@ 0x30
 80038fe:	2300      	movs	r3, #0
 8003900:	637b      	str	r3, [r7, #52]	@ 0x34
 8003902:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8003906:	460b      	mov	r3, r1
 8003908:	4313      	orrs	r3, r2
 800390a:	d032      	beq.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0xb62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 800390c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003910:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8003914:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003918:	d105      	bne.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800391a:	4b65      	ldr	r3, [pc, #404]	@ (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800391c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800391e:	4a64      	ldr	r2, [pc, #400]	@ (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003920:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003924:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 8003926:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800392a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800392e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003932:	d108      	bne.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0xb36>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003934:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003938:	3308      	adds	r3, #8
 800393a:	4618      	mov	r0, r3
 800393c:	f002 f934 	bl	8005ba8 <RCCEx_PLL2_Config>
 8003940:	4603      	mov	r3, r0
 8003942:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
    }
    if (ret == HAL_OK)
 8003946:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800394a:	2b00      	cmp	r3, #0
 800394c:	d10d      	bne.n	800396a <HAL_RCCEx_PeriphCLKConfig+0xb5a>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 800394e:	4b58      	ldr	r3, [pc, #352]	@ (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003950:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003954:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003958:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800395c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8003960:	4a53      	ldr	r2, [pc, #332]	@ (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003962:	430b      	orrs	r3, r1
 8003964:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003968:	e003      	b.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0xb62>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800396a:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800396e:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#if defined(HSPI1)
  /*-------------------------- HSPIx kernel clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSPI) == RCC_PERIPHCLK_HSPI)
 8003972:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800397a:	2100      	movs	r1, #0
 800397c:	62b9      	str	r1, [r7, #40]	@ 0x28
 800397e:	f003 0301 	and.w	r3, r3, #1
 8003982:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003984:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8003988:	460b      	mov	r3, r1
 800398a:	4313      	orrs	r3, r2
 800398c:	d04a      	beq.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0xc14>
  {

    /* Check the parameters */
    assert_param(IS_RCC_HSPICLKSOURCE(pPeriphClkInit->HspiClockSelection));

    switch (pPeriphClkInit->HspiClockSelection)
 800398e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003992:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003996:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800399a:	d01e      	beq.n	80039da <HAL_RCCEx_PeriphCLKConfig+0xbca>
 800399c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80039a0:	d825      	bhi.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0xbde>
 80039a2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80039a6:	d00e      	beq.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0xbb6>
 80039a8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80039ac:	d81f      	bhi.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0xbde>
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d021      	beq.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0xbe6>
 80039b2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80039b6:	d11a      	bne.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0xbde>
        /* HSPI kernel clock source config set later after clock selection check */
        break;

      case RCC_HSPICLKSOURCE_PLL1:  /* PLL1 is used as clock source for HSPI kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039b8:	4b3d      	ldr	r3, [pc, #244]	@ (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80039ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039bc:	4a3c      	ldr	r2, [pc, #240]	@ (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80039be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80039c2:	6293      	str	r3, [r2, #40]	@ 0x28
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 80039c4:	e018      	b.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      case RCC_HSPICLKSOURCE_PLL2:  /* PLL2 is used as clock source for HSPI kernel clock*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80039c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80039ca:	3308      	adds	r3, #8
 80039cc:	4618      	mov	r0, r3
 80039ce:	f002 f8eb 	bl	8005ba8 <RCCEx_PLL2_Config>
 80039d2:	4603      	mov	r3, r0
 80039d4:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 80039d8:	e00e      	b.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      case RCC_HSPICLKSOURCE_PLL3:  /* PLL3 is used as clock source for HSPI kernel clock*/
        /* PLL3 input clock, parameters M, N & R configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80039da:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80039de:	332c      	adds	r3, #44	@ 0x2c
 80039e0:	4618      	mov	r0, r3
 80039e2:	f002 f979 	bl	8005cd8 <RCCEx_PLL3_Config>
 80039e6:	4603      	mov	r3, r0
 80039e8:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 80039ec:	e004      	b.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      default:
        ret = HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 80039f4:	e000      	b.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0xbe8>
        break;
 80039f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039f8:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d10d      	bne.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0xc0c>
    {
      /* Set the source of HSPI kernel clock*/
      __HAL_RCC_HSPI_CONFIG(pPeriphClkInit->HspiClockSelection);
 8003a00:	4b2b      	ldr	r3, [pc, #172]	@ (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003a02:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003a06:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003a0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003a0e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003a12:	4927      	ldr	r1, [pc, #156]	@ (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003a14:	4313      	orrs	r3, r2
 8003a16:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8003a1a:	e003      	b.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0xc14>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a1c:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8003a20:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 8003a24:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a2c:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8003a30:	623b      	str	r3, [r7, #32]
 8003a32:	2300      	movs	r3, #0
 8003a34:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a36:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003a3a:	460b      	mov	r3, r1
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	d03d      	beq.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 8003a40:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003a44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a48:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003a4c:	d00e      	beq.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 8003a4e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003a52:	d815      	bhi.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d017      	beq.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8003a58:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003a5c:	d110      	bne.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0xc70>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a5e:	4b14      	ldr	r3, [pc, #80]	@ (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003a60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a62:	4a13      	ldr	r2, [pc, #76]	@ (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003a64:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a68:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8003a6a:	e00e      	b.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003a6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003a70:	3308      	adds	r3, #8
 8003a72:	4618      	mov	r0, r3
 8003a74:	f002 f898 	bl	8005ba8 <RCCEx_PLL2_Config>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8003a7e:	e004      	b.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      default:
        ret = HAL_ERROR;
 8003a80:	2301      	movs	r3, #1
 8003a82:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8003a86:	e000      	b.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003a88:	bf00      	nop
    }
    if (ret == HAL_OK)
 8003a8a:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d110      	bne.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 8003a92:	4b07      	ldr	r3, [pc, #28]	@ (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003a94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003a98:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003a9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003aa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003aa4:	4902      	ldr	r1, [pc, #8]	@ (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8003aac:	e006      	b.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0xcac>
 8003aae:	bf00      	nop
 8003ab0:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ab4:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8003ab8:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8003abc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ac4:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8003ac8:	61bb      	str	r3, [r7, #24]
 8003aca:	2300      	movs	r3, #0
 8003acc:	61fb      	str	r3, [r7, #28]
 8003ace:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003ad2:	460b      	mov	r3, r1
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	d00c      	beq.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0xce2>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 8003ad8:	4b68      	ldr	r3, [pc, #416]	@ (8003c7c <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 8003ada:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003ade:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8003ae2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003ae6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8003aea:	4964      	ldr	r1, [pc, #400]	@ (8003c7c <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 8003aec:	4313      	orrs	r3, r2
 8003aee:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003af2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003afa:	2100      	movs	r1, #0
 8003afc:	6139      	str	r1, [r7, #16]
 8003afe:	f003 0302 	and.w	r3, r3, #2
 8003b02:	617b      	str	r3, [r7, #20]
 8003b04:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003b08:	460b      	mov	r3, r1
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	d036      	beq.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0xd6c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(pPeriphClkInit->LtdcClockSelection));

    switch (pPeriphClkInit->LtdcClockSelection)
 8003b0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003b12:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d00c      	beq.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 8003b1a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003b1e:	d113      	bne.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      case RCC_LTDCCLKSOURCE_PLL2:  /* PLL2 is used as clock source for LTDC clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003b20:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003b24:	3308      	adds	r3, #8
 8003b26:	4618      	mov	r0, r3
 8003b28:	f002 f83e 	bl	8005ba8 <RCCEx_PLL2_Config>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* LTDC clock source config set later after clock selection check */
        break;
 8003b32:	e00d      	b.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0xd40>

      case RCC_LTDCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for LTDC clock*/
        /* PLL3 input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003b34:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003b38:	332c      	adds	r3, #44	@ 0x2c
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f002 f8cc 	bl	8005cd8 <RCCEx_PLL3_Config>
 8003b40:	4603      	mov	r3, r0
 8003b42:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* LTDC clock source config set later after clock selection check */
        break;
 8003b46:	e003      	b.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0xd40>

      default:
        ret = HAL_ERROR;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8003b4e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b50:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d10d      	bne.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0xd64>
    {
      /* Set the source of LTDC clock*/
      __HAL_RCC_LTDC_CONFIG(pPeriphClkInit->LtdcClockSelection);
 8003b58:	4b48      	ldr	r3, [pc, #288]	@ (8003c7c <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 8003b5a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003b5e:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8003b62:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003b66:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8003b6a:	4944      	ldr	r1, [pc, #272]	@ (8003c7c <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8003b72:	e003      	b.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b74:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8003b78:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
#endif /* defined(LTDC) */

#if defined(DSI)

  /*-------------------------- DSI clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8003b7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b84:	2100      	movs	r1, #0
 8003b86:	60b9      	str	r1, [r7, #8]
 8003b88:	f003 0304 	and.w	r3, r3, #4
 8003b8c:	60fb      	str	r3, [r7, #12]
 8003b8e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003b92:	460b      	mov	r3, r1
 8003b94:	4313      	orrs	r3, r2
 8003b96:	d024      	beq.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(pPeriphClkInit->DsiClockSelection));

    if (pPeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLL3)
 8003b98:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003b9c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d108      	bne.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* PLL3 is used as clock source for DSI clock*/
      /* PLL3 input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
      ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003ba4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003ba8:	332c      	adds	r3, #44	@ 0x2c
 8003baa:	4618      	mov	r0, r3
 8003bac:	f002 f894 	bl	8005cd8 <RCCEx_PLL3_Config>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
    }

    if (ret == HAL_OK)
 8003bb6:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d10d      	bne.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0xdca>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(pPeriphClkInit->DsiClockSelection);
 8003bbe:	4b2f      	ldr	r3, [pc, #188]	@ (8003c7c <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 8003bc0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003bc4:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8003bc8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003bcc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003bd0:	492a      	ldr	r1, [pc, #168]	@ (8003c7c <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8003bd8:	e003      	b.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bda:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8003bde:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
#endif /* defined(DSI) */

#if defined(USB_OTG_HS)

  /*-------------------------- USB PHY clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USBPHY) == RCC_PERIPHCLK_USBPHY)
 8003be2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bea:	2100      	movs	r1, #0
 8003bec:	6039      	str	r1, [r7, #0]
 8003bee:	f003 0308 	and.w	r3, r3, #8
 8003bf2:	607b      	str	r3, [r7, #4]
 8003bf4:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003bf8:	460b      	mov	r3, r1
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	d036      	beq.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0xe5c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBPHYCLKSOURCE(pPeriphClkInit->UsbPhyClockSelection));

    switch (pPeriphClkInit->UsbPhyClockSelection)
 8003bfe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003c02:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8003c06:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8003c0a:	d00d      	beq.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0xe18>
 8003c0c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8003c10:	d811      	bhi.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0xe26>
 8003c12:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003c16:	d012      	beq.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0xe2e>
 8003c18:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003c1c:	d80b      	bhi.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0xe26>
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d00d      	beq.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0xe2e>
 8003c22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c26:	d106      	bne.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0xe26>
        break;

      case RCC_USBPHYCLKSOURCE_PLL1:      /* PLL1 P divider clock selected as USB PHY clock */
      case RCC_USBPHYCLKSOURCE_PLL1_DIV2: /* PLL1 P divider clock div 2 selected as USB PHY clock */
        /* Enable P Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003c28:	4b14      	ldr	r3, [pc, #80]	@ (8003c7c <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 8003c2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c2c:	4a13      	ldr	r2, [pc, #76]	@ (8003c7c <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 8003c2e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c32:	6293      	str	r3, [r2, #40]	@ 0x28
        /* USB-PHY clock source config set later after clock selection check */
        break;
 8003c34:	e004      	b.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0xe30>

      default:
        ret = HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8003c3c:	e000      	b.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0xe30>
        break;
 8003c3e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c40:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d10d      	bne.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0xe54>
    {
      /* Set the source of USBPHY clock*/
      __HAL_RCC_USBPHY_CONFIG(pPeriphClkInit->UsbPhyClockSelection);
 8003c48:	4b0c      	ldr	r3, [pc, #48]	@ (8003c7c <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 8003c4a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003c4e:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8003c52:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003c56:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8003c5a:	4908      	ldr	r1, [pc, #32]	@ (8003c7c <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8003c62:	e003      	b.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0xe5c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c64:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8003c68:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 8003c6c:	f897 311a 	ldrb.w	r3, [r7, #282]	@ 0x11a
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8003c76:	46bd      	mov	sp, r7
 8003c78:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c7c:	46020c00 	.word	0x46020c00

08003c80 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b089      	sub	sp, #36	@ 0x24
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8003c88:	4ba6      	ldr	r3, [pc, #664]	@ (8003f24 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8003c8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c90:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8003c92:	4ba4      	ldr	r3, [pc, #656]	@ (8003f24 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8003c94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c96:	f003 0303 	and.w	r3, r3, #3
 8003c9a:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8003c9c:	4ba1      	ldr	r3, [pc, #644]	@ (8003f24 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8003c9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ca0:	0a1b      	lsrs	r3, r3, #8
 8003ca2:	f003 030f 	and.w	r3, r3, #15
 8003ca6:	3301      	adds	r3, #1
 8003ca8:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8003caa:	4b9e      	ldr	r3, [pc, #632]	@ (8003f24 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8003cac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cae:	091b      	lsrs	r3, r3, #4
 8003cb0:	f003 0301 	and.w	r3, r3, #1
 8003cb4:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8003cb6:	4b9b      	ldr	r3, [pc, #620]	@ (8003f24 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8003cb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cba:	08db      	lsrs	r3, r3, #3
 8003cbc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003cc0:	68fa      	ldr	r2, [r7, #12]
 8003cc2:	fb02 f303 	mul.w	r3, r2, r3
 8003cc6:	ee07 3a90 	vmov	s15, r3
 8003cca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cce:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	2b03      	cmp	r3, #3
 8003cd6:	d062      	beq.n	8003d9e <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	2b03      	cmp	r3, #3
 8003cdc:	f200 8081 	bhi.w	8003de2 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	2b01      	cmp	r3, #1
 8003ce4:	d024      	beq.n	8003d30 <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	2b02      	cmp	r3, #2
 8003cea:	d17a      	bne.n	8003de2 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	ee07 3a90 	vmov	s15, r3
 8003cf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cf6:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8003f28 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 8003cfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003cfe:	4b89      	ldr	r3, [pc, #548]	@ (8003f24 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8003d00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d06:	ee07 3a90 	vmov	s15, r3
 8003d0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8003d0e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003d12:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8003f2c <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8003d16:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003d1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8003d1e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003d22:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003d26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d2a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003d2e:	e08f      	b.n	8003e50 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8003d30:	4b7c      	ldr	r3, [pc, #496]	@ (8003f24 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d005      	beq.n	8003d48 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 8003d3c:	4b79      	ldr	r3, [pc, #484]	@ (8003f24 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8003d3e:	689b      	ldr	r3, [r3, #8]
 8003d40:	0f1b      	lsrs	r3, r3, #28
 8003d42:	f003 030f 	and.w	r3, r3, #15
 8003d46:	e006      	b.n	8003d56 <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 8003d48:	4b76      	ldr	r3, [pc, #472]	@ (8003f24 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8003d4a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003d4e:	041b      	lsls	r3, r3, #16
 8003d50:	0f1b      	lsrs	r3, r3, #28
 8003d52:	f003 030f 	and.w	r3, r3, #15
 8003d56:	4a76      	ldr	r2, [pc, #472]	@ (8003f30 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 8003d58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d5c:	ee07 3a90 	vmov	s15, r3
 8003d60:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	ee07 3a90 	vmov	s15, r3
 8003d6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003d72:	69bb      	ldr	r3, [r7, #24]
 8003d74:	ee07 3a90 	vmov	s15, r3
 8003d78:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d7c:	ed97 6a02 	vldr	s12, [r7, #8]
 8003d80:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8003f2c <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8003d84:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d88:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d8c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003d90:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8003d94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d98:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003d9c:	e058      	b.n	8003e50 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	ee07 3a90 	vmov	s15, r3
 8003da4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003da8:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8003f28 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 8003dac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003db0:	4b5c      	ldr	r3, [pc, #368]	@ (8003f24 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8003db2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003db4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003db8:	ee07 3a90 	vmov	s15, r3
 8003dbc:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8003dc0:	ed97 6a02 	vldr	s12, [r7, #8]
 8003dc4:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8003f2c <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8003dc8:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003dcc:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8003dd0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003dd4:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003dd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ddc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003de0:	e036      	b.n	8003e50 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8003de2:	4b50      	ldr	r3, [pc, #320]	@ (8003f24 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d005      	beq.n	8003dfa <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 8003dee:	4b4d      	ldr	r3, [pc, #308]	@ (8003f24 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	0f1b      	lsrs	r3, r3, #28
 8003df4:	f003 030f 	and.w	r3, r3, #15
 8003df8:	e006      	b.n	8003e08 <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 8003dfa:	4b4a      	ldr	r3, [pc, #296]	@ (8003f24 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8003dfc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003e00:	041b      	lsls	r3, r3, #16
 8003e02:	0f1b      	lsrs	r3, r3, #28
 8003e04:	f003 030f 	and.w	r3, r3, #15
 8003e08:	4a49      	ldr	r2, [pc, #292]	@ (8003f30 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 8003e0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e0e:	ee07 3a90 	vmov	s15, r3
 8003e12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	ee07 3a90 	vmov	s15, r3
 8003e1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e20:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003e24:	69bb      	ldr	r3, [r7, #24]
 8003e26:	ee07 3a90 	vmov	s15, r3
 8003e2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e2e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003e32:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8003f2c <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8003e36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e3e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003e42:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8003e46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e4a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003e4e:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8003e50:	4b34      	ldr	r3, [pc, #208]	@ (8003f24 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8003e52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e54:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d017      	beq.n	8003e8c <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003e5c:	4b31      	ldr	r3, [pc, #196]	@ (8003f24 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8003e5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e60:	0a5b      	lsrs	r3, r3, #9
 8003e62:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003e66:	ee07 3a90 	vmov	s15, r3
 8003e6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 8003e6e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003e72:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003e76:	edd7 6a07 	vldr	s13, [r7, #28]
 8003e7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e82:	ee17 2a90 	vmov	r2, s15
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	601a      	str	r2, [r3, #0]
 8003e8a:	e002      	b.n	8003e92 <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8003e92:	4b24      	ldr	r3, [pc, #144]	@ (8003f24 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8003e94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d017      	beq.n	8003ece <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003e9e:	4b21      	ldr	r3, [pc, #132]	@ (8003f24 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8003ea0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ea2:	0c1b      	lsrs	r3, r3, #16
 8003ea4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003ea8:	ee07 3a90 	vmov	s15, r3
 8003eac:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 8003eb0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003eb4:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003eb8:	edd7 6a07 	vldr	s13, [r7, #28]
 8003ebc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ec0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ec4:	ee17 2a90 	vmov	r2, s15
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	605a      	str	r2, [r3, #4]
 8003ecc:	e002      	b.n	8003ed4 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8003ed4:	4b13      	ldr	r3, [pc, #76]	@ (8003f24 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8003ed6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ed8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d017      	beq.n	8003f10 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003ee0:	4b10      	ldr	r3, [pc, #64]	@ (8003f24 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8003ee2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ee4:	0e1b      	lsrs	r3, r3, #24
 8003ee6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003eea:	ee07 3a90 	vmov	s15, r3
 8003eee:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 8003ef2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003ef6:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003efa:	edd7 6a07 	vldr	s13, [r7, #28]
 8003efe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f06:	ee17 2a90 	vmov	r2, s15
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8003f0e:	e002      	b.n	8003f16 <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2200      	movs	r2, #0
 8003f14:	609a      	str	r2, [r3, #8]
}
 8003f16:	bf00      	nop
 8003f18:	3724      	adds	r7, #36	@ 0x24
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f20:	4770      	bx	lr
 8003f22:	bf00      	nop
 8003f24:	46020c00 	.word	0x46020c00
 8003f28:	4b742400 	.word	0x4b742400
 8003f2c:	46000000 	.word	0x46000000
 8003f30:	08007f50 	.word	0x08007f50

08003f34 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b089      	sub	sp, #36	@ 0x24
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8003f3c:	4ba6      	ldr	r3, [pc, #664]	@ (80041d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8003f3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f44:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8003f46:	4ba4      	ldr	r3, [pc, #656]	@ (80041d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8003f48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f4a:	f003 0303 	and.w	r3, r3, #3
 8003f4e:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 8003f50:	4ba1      	ldr	r3, [pc, #644]	@ (80041d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8003f52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f54:	0a1b      	lsrs	r3, r3, #8
 8003f56:	f003 030f 	and.w	r3, r3, #15
 8003f5a:	3301      	adds	r3, #1
 8003f5c:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8003f5e:	4b9e      	ldr	r3, [pc, #632]	@ (80041d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8003f60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f62:	091b      	lsrs	r3, r3, #4
 8003f64:	f003 0301 	and.w	r3, r3, #1
 8003f68:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8003f6a:	4b9b      	ldr	r3, [pc, #620]	@ (80041d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8003f6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f6e:	08db      	lsrs	r3, r3, #3
 8003f70:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003f74:	68fa      	ldr	r2, [r7, #12]
 8003f76:	fb02 f303 	mul.w	r3, r2, r3
 8003f7a:	ee07 3a90 	vmov	s15, r3
 8003f7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f82:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 8003f86:	697b      	ldr	r3, [r7, #20]
 8003f88:	2b03      	cmp	r3, #3
 8003f8a:	d062      	beq.n	8004052 <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	2b03      	cmp	r3, #3
 8003f90:	f200 8081 	bhi.w	8004096 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	2b01      	cmp	r3, #1
 8003f98:	d024      	beq.n	8003fe4 <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 8003f9a:	697b      	ldr	r3, [r7, #20]
 8003f9c:	2b02      	cmp	r3, #2
 8003f9e:	d17a      	bne.n	8004096 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8003fa0:	693b      	ldr	r3, [r7, #16]
 8003fa2:	ee07 3a90 	vmov	s15, r3
 8003fa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003faa:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 80041dc <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 8003fae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003fb2:	4b89      	ldr	r3, [pc, #548]	@ (80041d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8003fb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fba:	ee07 3a90 	vmov	s15, r3
 8003fbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8003fc2:	ed97 6a02 	vldr	s12, [r7, #8]
 8003fc6:	eddf 5a86 	vldr	s11, [pc, #536]	@ 80041e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8003fca:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8003fce:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8003fd2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003fd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8003fda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fde:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003fe2:	e08f      	b.n	8004104 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8003fe4:	4b7c      	ldr	r3, [pc, #496]	@ (80041d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d005      	beq.n	8003ffc <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 8003ff0:	4b79      	ldr	r3, [pc, #484]	@ (80041d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	0f1b      	lsrs	r3, r3, #28
 8003ff6:	f003 030f 	and.w	r3, r3, #15
 8003ffa:	e006      	b.n	800400a <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 8003ffc:	4b76      	ldr	r3, [pc, #472]	@ (80041d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8003ffe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004002:	041b      	lsls	r3, r3, #16
 8004004:	0f1b      	lsrs	r3, r3, #28
 8004006:	f003 030f 	and.w	r3, r3, #15
 800400a:	4a76      	ldr	r2, [pc, #472]	@ (80041e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 800400c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004010:	ee07 3a90 	vmov	s15, r3
 8004014:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004018:	693b      	ldr	r3, [r7, #16]
 800401a:	ee07 3a90 	vmov	s15, r3
 800401e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004022:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004026:	69bb      	ldr	r3, [r7, #24]
 8004028:	ee07 3a90 	vmov	s15, r3
 800402c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004030:	ed97 6a02 	vldr	s12, [r7, #8]
 8004034:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 80041e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8004038:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800403c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004040:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004044:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8004048:	ee67 7a27 	vmul.f32	s15, s14, s15
 800404c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004050:	e058      	b.n	8004104 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	ee07 3a90 	vmov	s15, r3
 8004058:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800405c:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80041dc <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 8004060:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004064:	4b5c      	ldr	r3, [pc, #368]	@ (80041d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8004066:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004068:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800406c:	ee07 3a90 	vmov	s15, r3
 8004070:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8004074:	ed97 6a02 	vldr	s12, [r7, #8]
 8004078:	eddf 5a59 	vldr	s11, [pc, #356]	@ 80041e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800407c:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8004080:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8004084:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004088:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800408c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004090:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004094:	e036      	b.n	8004104 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8004096:	4b50      	ldr	r3, [pc, #320]	@ (80041d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d005      	beq.n	80040ae <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 80040a2:	4b4d      	ldr	r3, [pc, #308]	@ (80041d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80040a4:	689b      	ldr	r3, [r3, #8]
 80040a6:	0f1b      	lsrs	r3, r3, #28
 80040a8:	f003 030f 	and.w	r3, r3, #15
 80040ac:	e006      	b.n	80040bc <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 80040ae:	4b4a      	ldr	r3, [pc, #296]	@ (80041d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80040b0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80040b4:	041b      	lsls	r3, r3, #16
 80040b6:	0f1b      	lsrs	r3, r3, #28
 80040b8:	f003 030f 	and.w	r3, r3, #15
 80040bc:	4a49      	ldr	r2, [pc, #292]	@ (80041e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 80040be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040c2:	ee07 3a90 	vmov	s15, r3
 80040c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	ee07 3a90 	vmov	s15, r3
 80040d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 80040d8:	69bb      	ldr	r3, [r7, #24]
 80040da:	ee07 3a90 	vmov	s15, r3
 80040de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040e2:	ed97 6a02 	vldr	s12, [r7, #8]
 80040e6:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 80041e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 80040ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80040ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80040f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80040f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 80040fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040fe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004102:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8004104:	4b34      	ldr	r3, [pc, #208]	@ (80041d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8004106:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004108:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800410c:	2b00      	cmp	r3, #0
 800410e:	d017      	beq.n	8004140 <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004110:	4b31      	ldr	r3, [pc, #196]	@ (80041d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8004112:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004114:	0a5b      	lsrs	r3, r3, #9
 8004116:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800411a:	ee07 3a90 	vmov	s15, r3
 800411e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 8004122:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004126:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800412a:	edd7 6a07 	vldr	s13, [r7, #28]
 800412e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004132:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004136:	ee17 2a90 	vmov	r2, s15
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	601a      	str	r2, [r3, #0]
 800413e:	e002      	b.n	8004146 <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2200      	movs	r2, #0
 8004144:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8004146:	4b24      	ldr	r3, [pc, #144]	@ (80041d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8004148:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800414a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800414e:	2b00      	cmp	r3, #0
 8004150:	d017      	beq.n	8004182 <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004152:	4b21      	ldr	r3, [pc, #132]	@ (80041d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8004154:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004156:	0c1b      	lsrs	r3, r3, #16
 8004158:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800415c:	ee07 3a90 	vmov	s15, r3
 8004160:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 8004164:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004168:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800416c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004170:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004174:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004178:	ee17 2a90 	vmov	r2, s15
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	605a      	str	r2, [r3, #4]
 8004180:	e002      	b.n	8004188 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2200      	movs	r2, #0
 8004186:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8004188:	4b13      	ldr	r3, [pc, #76]	@ (80041d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800418a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800418c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004190:	2b00      	cmp	r3, #0
 8004192:	d017      	beq.n	80041c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004194:	4b10      	ldr	r3, [pc, #64]	@ (80041d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8004196:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004198:	0e1b      	lsrs	r3, r3, #24
 800419a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800419e:	ee07 3a90 	vmov	s15, r3
 80041a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 80041a6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80041aa:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80041ae:	edd7 6a07 	vldr	s13, [r7, #28]
 80041b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80041b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80041ba:	ee17 2a90 	vmov	r2, s15
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80041c2:	e002      	b.n	80041ca <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2200      	movs	r2, #0
 80041c8:	609a      	str	r2, [r3, #8]
}
 80041ca:	bf00      	nop
 80041cc:	3724      	adds	r7, #36	@ 0x24
 80041ce:	46bd      	mov	sp, r7
 80041d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d4:	4770      	bx	lr
 80041d6:	bf00      	nop
 80041d8:	46020c00 	.word	0x46020c00
 80041dc:	4b742400 	.word	0x4b742400
 80041e0:	46000000 	.word	0x46000000
 80041e4:	08007f50 	.word	0x08007f50

080041e8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80041e8:	b480      	push	{r7}
 80041ea:	b089      	sub	sp, #36	@ 0x24
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 80041f0:	4ba6      	ldr	r3, [pc, #664]	@ (800448c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80041f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041f8:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 80041fa:	4ba4      	ldr	r3, [pc, #656]	@ (800448c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80041fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041fe:	f003 0303 	and.w	r3, r3, #3
 8004202:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 8004204:	4ba1      	ldr	r3, [pc, #644]	@ (800448c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004206:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004208:	0a1b      	lsrs	r3, r3, #8
 800420a:	f003 030f 	and.w	r3, r3, #15
 800420e:	3301      	adds	r3, #1
 8004210:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 8004212:	4b9e      	ldr	r3, [pc, #632]	@ (800448c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004214:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004216:	091b      	lsrs	r3, r3, #4
 8004218:	f003 0301 	and.w	r3, r3, #1
 800421c:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 800421e:	4b9b      	ldr	r3, [pc, #620]	@ (800448c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004220:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004222:	08db      	lsrs	r3, r3, #3
 8004224:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004228:	68fa      	ldr	r2, [r7, #12]
 800422a:	fb02 f303 	mul.w	r3, r2, r3
 800422e:	ee07 3a90 	vmov	s15, r3
 8004232:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004236:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	2b03      	cmp	r3, #3
 800423e:	d062      	beq.n	8004306 <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	2b03      	cmp	r3, #3
 8004244:	f200 8081 	bhi.w	800434a <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	2b01      	cmp	r3, #1
 800424c:	d024      	beq.n	8004298 <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	2b02      	cmp	r3, #2
 8004252:	d17a      	bne.n	800434a <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	ee07 3a90 	vmov	s15, r3
 800425a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800425e:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8004490 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8004262:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004266:	4b89      	ldr	r3, [pc, #548]	@ (800448c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004268:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800426a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800426e:	ee07 3a90 	vmov	s15, r3
 8004272:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8004276:	ed97 6a02 	vldr	s12, [r7, #8]
 800427a:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8004494 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800427e:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8004282:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8004286:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800428a:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800428e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004292:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 8004296:	e08f      	b.n	80043b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8004298:	4b7c      	ldr	r3, [pc, #496]	@ (800448c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d005      	beq.n	80042b0 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 80042a4:	4b79      	ldr	r3, [pc, #484]	@ (800448c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80042a6:	689b      	ldr	r3, [r3, #8]
 80042a8:	0f1b      	lsrs	r3, r3, #28
 80042aa:	f003 030f 	and.w	r3, r3, #15
 80042ae:	e006      	b.n	80042be <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 80042b0:	4b76      	ldr	r3, [pc, #472]	@ (800448c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80042b2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80042b6:	041b      	lsls	r3, r3, #16
 80042b8:	0f1b      	lsrs	r3, r3, #28
 80042ba:	f003 030f 	and.w	r3, r3, #15
 80042be:	4a76      	ldr	r2, [pc, #472]	@ (8004498 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 80042c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042c4:	ee07 3a90 	vmov	s15, r3
 80042c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	ee07 3a90 	vmov	s15, r3
 80042d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 80042da:	69bb      	ldr	r3, [r7, #24]
 80042dc:	ee07 3a90 	vmov	s15, r3
 80042e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042e4:	ed97 6a02 	vldr	s12, [r7, #8]
 80042e8:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8004494 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 80042ec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80042f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80042f4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80042f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80042fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004300:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004304:	e058      	b.n	80043b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	ee07 3a90 	vmov	s15, r3
 800430c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004310:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004490 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8004314:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004318:	4b5c      	ldr	r3, [pc, #368]	@ (800448c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800431a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800431c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004320:	ee07 3a90 	vmov	s15, r3
 8004324:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8004328:	ed97 6a02 	vldr	s12, [r7, #8]
 800432c:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8004494 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8004330:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8004334:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8004338:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800433c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8004340:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004344:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004348:	e036      	b.n	80043b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800434a:	4b50      	ldr	r3, [pc, #320]	@ (800448c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004352:	2b00      	cmp	r3, #0
 8004354:	d005      	beq.n	8004362 <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 8004356:	4b4d      	ldr	r3, [pc, #308]	@ (800448c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004358:	689b      	ldr	r3, [r3, #8]
 800435a:	0f1b      	lsrs	r3, r3, #28
 800435c:	f003 030f 	and.w	r3, r3, #15
 8004360:	e006      	b.n	8004370 <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 8004362:	4b4a      	ldr	r3, [pc, #296]	@ (800448c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004364:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004368:	041b      	lsls	r3, r3, #16
 800436a:	0f1b      	lsrs	r3, r3, #28
 800436c:	f003 030f 	and.w	r3, r3, #15
 8004370:	4a49      	ldr	r2, [pc, #292]	@ (8004498 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8004372:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004376:	ee07 3a90 	vmov	s15, r3
 800437a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	ee07 3a90 	vmov	s15, r3
 8004384:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004388:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800438c:	69bb      	ldr	r3, [r7, #24]
 800438e:	ee07 3a90 	vmov	s15, r3
 8004392:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004396:	ed97 6a02 	vldr	s12, [r7, #8]
 800439a:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8004494 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800439e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80043aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80043ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043b2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80043b6:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 80043b8:	4b34      	ldr	r3, [pc, #208]	@ (800448c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80043ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d017      	beq.n	80043f4 <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80043c4:	4b31      	ldr	r3, [pc, #196]	@ (800448c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80043c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043c8:	0a5b      	lsrs	r3, r3, #9
 80043ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80043ce:	ee07 3a90 	vmov	s15, r3
 80043d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 80043d6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80043da:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80043de:	edd7 6a07 	vldr	s13, [r7, #28]
 80043e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80043e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80043ea:	ee17 2a90 	vmov	r2, s15
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	601a      	str	r2, [r3, #0]
 80043f2:	e002      	b.n	80043fa <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2200      	movs	r2, #0
 80043f8:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 80043fa:	4b24      	ldr	r3, [pc, #144]	@ (800448c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80043fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004402:	2b00      	cmp	r3, #0
 8004404:	d017      	beq.n	8004436 <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8004406:	4b21      	ldr	r3, [pc, #132]	@ (800448c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004408:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800440a:	0c1b      	lsrs	r3, r3, #16
 800440c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004410:	ee07 3a90 	vmov	s15, r3
 8004414:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 8004418:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800441c:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8004420:	edd7 6a07 	vldr	s13, [r7, #28]
 8004424:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004428:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800442c:	ee17 2a90 	vmov	r2, s15
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	605a      	str	r2, [r3, #4]
 8004434:	e002      	b.n	800443c <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2200      	movs	r2, #0
 800443a:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 800443c:	4b13      	ldr	r3, [pc, #76]	@ (800448c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800443e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004440:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004444:	2b00      	cmp	r3, #0
 8004446:	d017      	beq.n	8004478 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8004448:	4b10      	ldr	r3, [pc, #64]	@ (800448c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800444a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800444c:	0e1b      	lsrs	r3, r3, #24
 800444e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004452:	ee07 3a90 	vmov	s15, r3
 8004456:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 800445a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800445e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8004462:	edd7 6a07 	vldr	s13, [r7, #28]
 8004466:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800446a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800446e:	ee17 2a90 	vmov	r2, s15
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004476:	e002      	b.n	800447e <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2200      	movs	r2, #0
 800447c:	609a      	str	r2, [r3, #8]
}
 800447e:	bf00      	nop
 8004480:	3724      	adds	r7, #36	@ 0x24
 8004482:	46bd      	mov	sp, r7
 8004484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004488:	4770      	bx	lr
 800448a:	bf00      	nop
 800448c:	46020c00 	.word	0x46020c00
 8004490:	4b742400 	.word	0x4b742400
 8004494:	46000000 	.word	0x46000000
 8004498:	08007f50 	.word	0x08007f50

0800449c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b08e      	sub	sp, #56	@ 0x38
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 80044a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80044aa:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 80044ae:	430b      	orrs	r3, r1
 80044b0:	d145      	bne.n	800453e <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80044b2:	4ba7      	ldr	r3, [pc, #668]	@ (8004750 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80044b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80044b8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80044bc:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 80044be:	4ba4      	ldr	r3, [pc, #656]	@ (8004750 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80044c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80044c4:	f003 0302 	and.w	r3, r3, #2
 80044c8:	2b02      	cmp	r3, #2
 80044ca:	d108      	bne.n	80044de <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 80044cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80044d2:	d104      	bne.n	80044de <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 80044d4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80044d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80044da:	f001 bb5a 	b.w	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 80044de:	4b9c      	ldr	r3, [pc, #624]	@ (8004750 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80044e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80044e4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80044e8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80044ec:	d114      	bne.n	8004518 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 80044ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80044f4:	d110      	bne.n	8004518 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80044f6:	4b96      	ldr	r3, [pc, #600]	@ (8004750 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80044f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80044fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004500:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004504:	d103      	bne.n	800450e <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 8004506:	23fa      	movs	r3, #250	@ 0xfa
 8004508:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800450a:	f001 bb42 	b.w	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800450e:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004512:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004514:	f001 bb3d 	b.w	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8004518:	4b8d      	ldr	r3, [pc, #564]	@ (8004750 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004520:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004524:	d107      	bne.n	8004536 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 8004526:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004528:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800452c:	d103      	bne.n	8004536 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 800452e:	4b89      	ldr	r3, [pc, #548]	@ (8004754 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8004530:	637b      	str	r3, [r7, #52]	@ 0x34
 8004532:	f001 bb2e 	b.w	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8004536:	2300      	movs	r3, #0
 8004538:	637b      	str	r3, [r7, #52]	@ 0x34
 800453a:	f001 bb2a 	b.w	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800453e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004542:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8004546:	430b      	orrs	r3, r1
 8004548:	d151      	bne.n	80045ee <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800454a:	4b81      	ldr	r3, [pc, #516]	@ (8004750 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800454c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004550:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8004554:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8004556:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004558:	2b80      	cmp	r3, #128	@ 0x80
 800455a:	d035      	beq.n	80045c8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 800455c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800455e:	2b80      	cmp	r3, #128	@ 0x80
 8004560:	d841      	bhi.n	80045e6 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8004562:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004564:	2b60      	cmp	r3, #96	@ 0x60
 8004566:	d02a      	beq.n	80045be <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 8004568:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800456a:	2b60      	cmp	r3, #96	@ 0x60
 800456c:	d83b      	bhi.n	80045e6 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800456e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004570:	2b40      	cmp	r3, #64	@ 0x40
 8004572:	d009      	beq.n	8004588 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8004574:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004576:	2b40      	cmp	r3, #64	@ 0x40
 8004578:	d835      	bhi.n	80045e6 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800457a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800457c:	2b00      	cmp	r3, #0
 800457e:	d00c      	beq.n	800459a <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 8004580:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004582:	2b20      	cmp	r3, #32
 8004584:	d012      	beq.n	80045ac <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8004586:	e02e      	b.n	80045e6 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004588:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800458c:	4618      	mov	r0, r3
 800458e:	f7ff fb77 	bl	8003c80 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8004592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004594:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004596:	f001 bafc 	b.w	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800459a:	f107 0318 	add.w	r3, r7, #24
 800459e:	4618      	mov	r0, r3
 80045a0:	f7ff fcc8 	bl	8003f34 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 80045a4:	69bb      	ldr	r3, [r7, #24]
 80045a6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80045a8:	f001 baf3 	b.w	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80045ac:	f107 030c 	add.w	r3, r7, #12
 80045b0:	4618      	mov	r0, r3
 80045b2:	f7ff fe19 	bl	80041e8 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80045ba:	f001 baea 	b.w	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80045be:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80045c2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80045c4:	f001 bae5 	b.w	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80045c8:	4b61      	ldr	r3, [pc, #388]	@ (8004750 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80045d4:	d103      	bne.n	80045de <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 80045d6:	4b60      	ldr	r3, [pc, #384]	@ (8004758 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80045d8:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80045da:	f001 bada 	b.w	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 80045de:	2300      	movs	r3, #0
 80045e0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80045e2:	f001 bad6 	b.w	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default :
      {
        frequency = 0U;
 80045e6:	2300      	movs	r3, #0
 80045e8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80045ea:	f001 bad2 	b.w	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 80045ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 80045f2:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 80045f6:	430b      	orrs	r3, r1
 80045f8:	d158      	bne.n	80046ac <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 80045fa:	4b55      	ldr	r3, [pc, #340]	@ (8004750 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80045fc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004600:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004604:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8004606:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004608:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800460c:	d03b      	beq.n	8004686 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 800460e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004610:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004614:	d846      	bhi.n	80046a4 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8004616:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004618:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800461c:	d02e      	beq.n	800467c <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 800461e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004620:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004624:	d83e      	bhi.n	80046a4 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8004626:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004628:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800462c:	d00b      	beq.n	8004646 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 800462e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004630:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004634:	d836      	bhi.n	80046a4 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8004636:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004638:	2b00      	cmp	r3, #0
 800463a:	d00d      	beq.n	8004658 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 800463c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800463e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004642:	d012      	beq.n	800466a <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 8004644:	e02e      	b.n	80046a4 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004646:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800464a:	4618      	mov	r0, r3
 800464c:	f7ff fb18 	bl	8003c80 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8004650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004652:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004654:	f001 ba9d 	b.w	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004658:	f107 0318 	add.w	r3, r7, #24
 800465c:	4618      	mov	r0, r3
 800465e:	f7ff fc69 	bl	8003f34 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8004662:	69bb      	ldr	r3, [r7, #24]
 8004664:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004666:	f001 ba94 	b.w	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800466a:	f107 030c 	add.w	r3, r7, #12
 800466e:	4618      	mov	r0, r3
 8004670:	f7ff fdba 	bl	80041e8 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004678:	f001 ba8b 	b.w	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800467c:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8004680:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004682:	f001 ba86 	b.w	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004686:	4b32      	ldr	r3, [pc, #200]	@ (8004750 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800468e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004692:	d103      	bne.n	800469c <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 8004694:	4b30      	ldr	r3, [pc, #192]	@ (8004758 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8004696:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004698:	f001 ba7b 	b.w	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800469c:	2300      	movs	r3, #0
 800469e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80046a0:	f001 ba77 	b.w	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default :

        frequency = 0U;
 80046a4:	2300      	movs	r3, #0
 80046a6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80046a8:	f001 ba73 	b.w	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* SAI2 */
#if defined(SAES)
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 80046ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80046b0:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 80046b4:	430b      	orrs	r3, r1
 80046b6:	d126      	bne.n	8004706 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 80046b8:	4b25      	ldr	r3, [pc, #148]	@ (8004750 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80046ba:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80046be:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80046c2:	633b      	str	r3, [r7, #48]	@ 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 80046c4:	4b22      	ldr	r3, [pc, #136]	@ (8004750 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80046d0:	d106      	bne.n	80046e0 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 80046d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d103      	bne.n	80046e0 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 80046d8:	4b1f      	ldr	r3, [pc, #124]	@ (8004758 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80046da:	637b      	str	r3, [r7, #52]	@ 0x34
 80046dc:	f001 ba59 	b.w	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 80046e0:	4b1b      	ldr	r3, [pc, #108]	@ (8004750 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80046ec:	d107      	bne.n	80046fe <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 80046ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80046f4:	d103      	bne.n	80046fe <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 80046f6:	4b19      	ldr	r3, [pc, #100]	@ (800475c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80046f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80046fa:	f001 ba4a 	b.w	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 80046fe:	2300      	movs	r3, #0
 8004700:	637b      	str	r3, [r7, #52]	@ 0x34
 8004702:	f001 ba46 	b.w	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 8004706:	e9d7 2300 	ldrd	r2, r3, [r7]
 800470a:	f5a2 1180 	sub.w	r1, r2, #1048576	@ 0x100000
 800470e:	430b      	orrs	r3, r1
 8004710:	d16e      	bne.n	80047f0 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8004712:	4b0f      	ldr	r3, [pc, #60]	@ (8004750 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004714:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004718:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800471c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800471e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004720:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8004724:	d03d      	beq.n	80047a2 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8004726:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004728:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800472c:	d85c      	bhi.n	80047e8 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800472e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004730:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004734:	d014      	beq.n	8004760 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 8004736:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004738:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800473c:	d854      	bhi.n	80047e8 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800473e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004740:	2b00      	cmp	r3, #0
 8004742:	d01f      	beq.n	8004784 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 8004744:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004746:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800474a:	d012      	beq.n	8004772 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 800474c:	e04c      	b.n	80047e8 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800474e:	bf00      	nop
 8004750:	46020c00 	.word	0x46020c00
 8004754:	0007a120 	.word	0x0007a120
 8004758:	00f42400 	.word	0x00f42400
 800475c:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004760:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004764:	4618      	mov	r0, r3
 8004766:	f7ff fa8b 	bl	8003c80 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800476a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800476c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800476e:	f001 ba10 	b.w	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004772:	f107 0318 	add.w	r3, r7, #24
 8004776:	4618      	mov	r0, r3
 8004778:	f7ff fbdc 	bl	8003f34 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800477c:	69fb      	ldr	r3, [r7, #28]
 800477e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004780:	f001 ba07 	b.w	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8004784:	4ba7      	ldr	r3, [pc, #668]	@ (8004a24 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800478c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004790:	d103      	bne.n	800479a <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 8004792:	4ba5      	ldr	r3, [pc, #660]	@ (8004a28 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004794:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004796:	f001 b9fc 	b.w	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800479a:	2300      	movs	r3, #0
 800479c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800479e:	f001 b9f8 	b.w	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80047a2:	4ba0      	ldr	r3, [pc, #640]	@ (8004a24 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f003 0320 	and.w	r3, r3, #32
 80047aa:	2b20      	cmp	r3, #32
 80047ac:	d118      	bne.n	80047e0 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80047ae:	4b9d      	ldr	r3, [pc, #628]	@ (8004a24 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80047b0:	689b      	ldr	r3, [r3, #8]
 80047b2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d005      	beq.n	80047c6 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 80047ba:	4b9a      	ldr	r3, [pc, #616]	@ (8004a24 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80047bc:	689b      	ldr	r3, [r3, #8]
 80047be:	0e1b      	lsrs	r3, r3, #24
 80047c0:	f003 030f 	and.w	r3, r3, #15
 80047c4:	e006      	b.n	80047d4 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 80047c6:	4b97      	ldr	r3, [pc, #604]	@ (8004a24 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80047c8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80047cc:	041b      	lsls	r3, r3, #16
 80047ce:	0e1b      	lsrs	r3, r3, #24
 80047d0:	f003 030f 	and.w	r3, r3, #15
 80047d4:	4a95      	ldr	r2, [pc, #596]	@ (8004a2c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80047d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047da:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80047dc:	f001 b9d9 	b.w	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 80047e0:	2300      	movs	r3, #0
 80047e2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80047e4:	f001 b9d5 	b.w	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default :

        frequency = 0U;
 80047e8:	2300      	movs	r3, #0
 80047ea:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80047ec:	f001 b9d1 	b.w	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80047f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80047f4:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 80047f8:	430b      	orrs	r3, r1
 80047fa:	d17f      	bne.n	80048fc <HAL_RCCEx_GetPeriphCLKFreq+0x460>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80047fc:	4b89      	ldr	r3, [pc, #548]	@ (8004a24 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80047fe:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004802:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004806:	633b      	str	r3, [r7, #48]	@ 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 8004808:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800480a:	2b00      	cmp	r3, #0
 800480c:	d165      	bne.n	80048da <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800480e:	4b85      	ldr	r3, [pc, #532]	@ (8004a24 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004810:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004814:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8004818:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (srcclk)
 800481a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800481c:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8004820:	d034      	beq.n	800488c <HAL_RCCEx_GetPeriphCLKFreq+0x3f0>
 8004822:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004824:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8004828:	d853      	bhi.n	80048d2 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 800482a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800482c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004830:	d00b      	beq.n	800484a <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
 8004832:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004834:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004838:	d84b      	bhi.n	80048d2 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 800483a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800483c:	2b00      	cmp	r3, #0
 800483e:	d016      	beq.n	800486e <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
 8004840:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004842:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004846:	d009      	beq.n	800485c <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8004848:	e043      	b.n	80048d2 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800484a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800484e:	4618      	mov	r0, r3
 8004850:	f7ff fa16 	bl	8003c80 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004854:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004856:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8004858:	f001 b99b 	b.w	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800485c:	f107 0318 	add.w	r3, r7, #24
 8004860:	4618      	mov	r0, r3
 8004862:	f7ff fb67 	bl	8003f34 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004866:	69fb      	ldr	r3, [r7, #28]
 8004868:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800486a:	f001 b992 	b.w	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800486e:	4b6d      	ldr	r3, [pc, #436]	@ (8004a24 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004876:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800487a:	d103      	bne.n	8004884 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
          {
            frequency = HSI48_VALUE;
 800487c:	4b6a      	ldr	r3, [pc, #424]	@ (8004a28 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800487e:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8004880:	f001 b987 	b.w	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
            frequency = 0U;
 8004884:	2300      	movs	r3, #0
 8004886:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8004888:	f001 b983 	b.w	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800488c:	4b65      	ldr	r3, [pc, #404]	@ (8004a24 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f003 0320 	and.w	r3, r3, #32
 8004894:	2b20      	cmp	r3, #32
 8004896:	d118      	bne.n	80048ca <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004898:	4b62      	ldr	r3, [pc, #392]	@ (8004a24 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800489a:	689b      	ldr	r3, [r3, #8]
 800489c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d005      	beq.n	80048b0 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
 80048a4:	4b5f      	ldr	r3, [pc, #380]	@ (8004a24 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80048a6:	689b      	ldr	r3, [r3, #8]
 80048a8:	0e1b      	lsrs	r3, r3, #24
 80048aa:	f003 030f 	and.w	r3, r3, #15
 80048ae:	e006      	b.n	80048be <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 80048b0:	4b5c      	ldr	r3, [pc, #368]	@ (8004a24 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80048b2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80048b6:	041b      	lsls	r3, r3, #16
 80048b8:	0e1b      	lsrs	r3, r3, #24
 80048ba:	f003 030f 	and.w	r3, r3, #15
 80048be:	4a5b      	ldr	r2, [pc, #364]	@ (8004a2c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80048c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048c4:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 80048c6:	f001 b964 	b.w	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
            frequency = 0U;
 80048ca:	2300      	movs	r3, #0
 80048cc:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 80048ce:	f001 b960 	b.w	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        default :
        {
          frequency = 0U;
 80048d2:	2300      	movs	r3, #0
 80048d4:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 80048d6:	f001 b95c 	b.w	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 80048da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048dc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80048e0:	d108      	bne.n	80048f4 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80048e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80048e6:	4618      	mov	r0, r3
 80048e8:	f7ff f9ca 	bl	8003c80 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 80048ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80048f0:	f001 b94f 	b.w	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else
    {
      frequency = 0U;
 80048f4:	2300      	movs	r3, #0
 80048f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80048f8:	f001 b94b 	b.w	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 80048fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004900:	1e51      	subs	r1, r2, #1
 8004902:	430b      	orrs	r3, r1
 8004904:	d136      	bne.n	8004974 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8004906:	4b47      	ldr	r3, [pc, #284]	@ (8004a24 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004908:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800490c:	f003 0303 	and.w	r3, r3, #3
 8004910:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8004912:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004914:	2b00      	cmp	r3, #0
 8004916:	d104      	bne.n	8004922 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 8004918:	f7fe f9cc 	bl	8002cb4 <HAL_RCC_GetPCLK2Freq>
 800491c:	6378      	str	r0, [r7, #52]	@ 0x34
 800491e:	f001 b938 	b.w	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 8004922:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004924:	2b01      	cmp	r3, #1
 8004926:	d104      	bne.n	8004932 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004928:	f7fe f894 	bl	8002a54 <HAL_RCC_GetSysClockFreq>
 800492c:	6378      	str	r0, [r7, #52]	@ 0x34
 800492e:	f001 b930 	b.w	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8004932:	4b3c      	ldr	r3, [pc, #240]	@ (8004a24 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800493a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800493e:	d106      	bne.n	800494e <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 8004940:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004942:	2b02      	cmp	r3, #2
 8004944:	d103      	bne.n	800494e <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
    {
      frequency = HSI_VALUE;
 8004946:	4b3a      	ldr	r3, [pc, #232]	@ (8004a30 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8004948:	637b      	str	r3, [r7, #52]	@ 0x34
 800494a:	f001 b922 	b.w	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 800494e:	4b35      	ldr	r3, [pc, #212]	@ (8004a24 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004950:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004954:	f003 0302 	and.w	r3, r3, #2
 8004958:	2b02      	cmp	r3, #2
 800495a:	d107      	bne.n	800496c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 800495c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800495e:	2b03      	cmp	r3, #3
 8004960:	d104      	bne.n	800496c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = LSE_VALUE;
 8004962:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004966:	637b      	str	r3, [r7, #52]	@ 0x34
 8004968:	f001 b913 	b.w	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 800496c:	2300      	movs	r3, #0
 800496e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004970:	f001 b90f 	b.w	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 8004974:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004978:	1e91      	subs	r1, r2, #2
 800497a:	430b      	orrs	r3, r1
 800497c:	d136      	bne.n	80049ec <HAL_RCCEx_GetPeriphCLKFreq+0x550>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800497e:	4b29      	ldr	r3, [pc, #164]	@ (8004a24 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004980:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004984:	f003 030c 	and.w	r3, r3, #12
 8004988:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 800498a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800498c:	2b00      	cmp	r3, #0
 800498e:	d104      	bne.n	800499a <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8004990:	f7fe f97c 	bl	8002c8c <HAL_RCC_GetPCLK1Freq>
 8004994:	6378      	str	r0, [r7, #52]	@ 0x34
 8004996:	f001 b8fc 	b.w	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 800499a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800499c:	2b04      	cmp	r3, #4
 800499e:	d104      	bne.n	80049aa <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80049a0:	f7fe f858 	bl	8002a54 <HAL_RCC_GetSysClockFreq>
 80049a4:	6378      	str	r0, [r7, #52]	@ 0x34
 80049a6:	f001 b8f4 	b.w	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 80049aa:	4b1e      	ldr	r3, [pc, #120]	@ (8004a24 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80049b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80049b6:	d106      	bne.n	80049c6 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 80049b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049ba:	2b08      	cmp	r3, #8
 80049bc:	d103      	bne.n	80049c6 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
    {
      frequency = HSI_VALUE;
 80049be:	4b1c      	ldr	r3, [pc, #112]	@ (8004a30 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80049c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80049c2:	f001 b8e6 	b.w	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 80049c6:	4b17      	ldr	r3, [pc, #92]	@ (8004a24 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80049c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80049cc:	f003 0302 	and.w	r3, r3, #2
 80049d0:	2b02      	cmp	r3, #2
 80049d2:	d107      	bne.n	80049e4 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 80049d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049d6:	2b0c      	cmp	r3, #12
 80049d8:	d104      	bne.n	80049e4 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = LSE_VALUE;
 80049da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80049de:	637b      	str	r3, [r7, #52]	@ 0x34
 80049e0:	f001 b8d7 	b.w	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 80049e4:	2300      	movs	r3, #0
 80049e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80049e8:	f001 b8d3 	b.w	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 80049ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80049f0:	1f11      	subs	r1, r2, #4
 80049f2:	430b      	orrs	r3, r1
 80049f4:	d13f      	bne.n	8004a76 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 80049f6:	4b0b      	ldr	r3, [pc, #44]	@ (8004a24 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80049f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80049fc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004a00:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8004a02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d104      	bne.n	8004a12 <HAL_RCCEx_GetPeriphCLKFreq+0x576>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8004a08:	f7fe f940 	bl	8002c8c <HAL_RCC_GetPCLK1Freq>
 8004a0c:	6378      	str	r0, [r7, #52]	@ 0x34
 8004a0e:	f001 b8c0 	b.w	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 8004a12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a14:	2b10      	cmp	r3, #16
 8004a16:	d10d      	bne.n	8004a34 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004a18:	f7fe f81c 	bl	8002a54 <HAL_RCC_GetSysClockFreq>
 8004a1c:	6378      	str	r0, [r7, #52]	@ 0x34
 8004a1e:	f001 b8b8 	b.w	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 8004a22:	bf00      	nop
 8004a24:	46020c00 	.word	0x46020c00
 8004a28:	02dc6c00 	.word	0x02dc6c00
 8004a2c:	08007f50 	.word	0x08007f50
 8004a30:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8004a34:	4ba8      	ldr	r3, [pc, #672]	@ (8004cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a3c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a40:	d106      	bne.n	8004a50 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 8004a42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a44:	2b20      	cmp	r3, #32
 8004a46:	d103      	bne.n	8004a50 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
    {
      frequency = HSI_VALUE;
 8004a48:	4ba4      	ldr	r3, [pc, #656]	@ (8004cdc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004a4a:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a4c:	f001 b8a1 	b.w	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8004a50:	4ba1      	ldr	r3, [pc, #644]	@ (8004cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004a52:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004a56:	f003 0302 	and.w	r3, r3, #2
 8004a5a:	2b02      	cmp	r3, #2
 8004a5c:	d107      	bne.n	8004a6e <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 8004a5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a60:	2b30      	cmp	r3, #48	@ 0x30
 8004a62:	d104      	bne.n	8004a6e <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
    {
      frequency = LSE_VALUE;
 8004a64:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004a68:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a6a:	f001 b892 	b.w	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 8004a6e:	2300      	movs	r3, #0
 8004a70:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a72:	f001 b88e 	b.w	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 8004a76:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a7a:	f1a2 0108 	sub.w	r1, r2, #8
 8004a7e:	430b      	orrs	r3, r1
 8004a80:	d136      	bne.n	8004af0 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8004a82:	4b95      	ldr	r3, [pc, #596]	@ (8004cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004a84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004a88:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004a8c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8004a8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d104      	bne.n	8004a9e <HAL_RCCEx_GetPeriphCLKFreq+0x602>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8004a94:	f7fe f8fa 	bl	8002c8c <HAL_RCC_GetPCLK1Freq>
 8004a98:	6378      	str	r0, [r7, #52]	@ 0x34
 8004a9a:	f001 b87a 	b.w	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 8004a9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004aa0:	2b40      	cmp	r3, #64	@ 0x40
 8004aa2:	d104      	bne.n	8004aae <HAL_RCCEx_GetPeriphCLKFreq+0x612>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004aa4:	f7fd ffd6 	bl	8002a54 <HAL_RCC_GetSysClockFreq>
 8004aa8:	6378      	str	r0, [r7, #52]	@ 0x34
 8004aaa:	f001 b872 	b.w	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8004aae:	4b8a      	ldr	r3, [pc, #552]	@ (8004cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ab6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004aba:	d106      	bne.n	8004aca <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
 8004abc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004abe:	2b80      	cmp	r3, #128	@ 0x80
 8004ac0:	d103      	bne.n	8004aca <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
    {
      frequency = HSI_VALUE;
 8004ac2:	4b86      	ldr	r3, [pc, #536]	@ (8004cdc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004ac4:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ac6:	f001 b864 	b.w	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8004aca:	4b83      	ldr	r3, [pc, #524]	@ (8004cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004acc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004ad0:	f003 0302 	and.w	r3, r3, #2
 8004ad4:	2b02      	cmp	r3, #2
 8004ad6:	d107      	bne.n	8004ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8004ad8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ada:	2bc0      	cmp	r3, #192	@ 0xc0
 8004adc:	d104      	bne.n	8004ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
    {
      frequency = LSE_VALUE;
 8004ade:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004ae2:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ae4:	f001 b855 	b.w	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 8004ae8:	2300      	movs	r3, #0
 8004aea:	637b      	str	r3, [r7, #52]	@ 0x34
 8004aec:	f001 b851 	b.w	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 8004af0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004af4:	f1a2 0110 	sub.w	r1, r2, #16
 8004af8:	430b      	orrs	r3, r1
 8004afa:	d139      	bne.n	8004b70 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8004afc:	4b76      	ldr	r3, [pc, #472]	@ (8004cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004afe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004b02:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b06:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8004b08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d104      	bne.n	8004b18 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8004b0e:	f7fe f8bd 	bl	8002c8c <HAL_RCC_GetPCLK1Freq>
 8004b12:	6378      	str	r0, [r7, #52]	@ 0x34
 8004b14:	f001 b83d 	b.w	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 8004b18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b1a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004b1e:	d104      	bne.n	8004b2a <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004b20:	f7fd ff98 	bl	8002a54 <HAL_RCC_GetSysClockFreq>
 8004b24:	6378      	str	r0, [r7, #52]	@ 0x34
 8004b26:	f001 b834 	b.w	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8004b2a:	4b6b      	ldr	r3, [pc, #428]	@ (8004cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b32:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b36:	d107      	bne.n	8004b48 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
 8004b38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b3a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004b3e:	d103      	bne.n	8004b48 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
    {
      frequency = HSI_VALUE;
 8004b40:	4b66      	ldr	r3, [pc, #408]	@ (8004cdc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004b42:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b44:	f001 b825 	b.w	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8004b48:	4b63      	ldr	r3, [pc, #396]	@ (8004cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004b4a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004b4e:	f003 0302 	and.w	r3, r3, #2
 8004b52:	2b02      	cmp	r3, #2
 8004b54:	d108      	bne.n	8004b68 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 8004b56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b58:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004b5c:	d104      	bne.n	8004b68 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
    {
      frequency = LSE_VALUE;
 8004b5e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004b62:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b64:	f001 b815 	b.w	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 8004b68:	2300      	movs	r3, #0
 8004b6a:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b6c:	f001 b811 	b.w	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined(USART6)
  else if (PeriphClk == RCC_PERIPHCLK_USART6)
 8004b70:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004b74:	f102 4160 	add.w	r1, r2, #3758096384	@ 0xe0000000
 8004b78:	430b      	orrs	r3, r1
 8004b7a:	d139      	bne.n	8004bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
  {
    /* Get the current USART6 source */
    srcclk = __HAL_RCC_GET_USART6_SOURCE();
 8004b7c:	4b56      	ldr	r3, [pc, #344]	@ (8004cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004b7e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004b82:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004b86:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 8004b88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d104      	bne.n	8004b98 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8004b8e:	f7fe f87d 	bl	8002c8c <HAL_RCC_GetPCLK1Freq>
 8004b92:	6378      	str	r0, [r7, #52]	@ 0x34
 8004b94:	f000 bffd 	b.w	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART6CLKSOURCE_SYSCLK)
 8004b98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b9a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b9e:	d104      	bne.n	8004baa <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004ba0:	f7fd ff58 	bl	8002a54 <HAL_RCC_GetSysClockFreq>
 8004ba4:	6378      	str	r0, [r7, #52]	@ 0x34
 8004ba6:	f000 bff4 	b.w	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 8004baa:	4b4b      	ldr	r3, [pc, #300]	@ (8004cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004bb2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004bb6:	d107      	bne.n	8004bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 8004bb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004bbe:	d103      	bne.n	8004bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
    {
      frequency = HSI_VALUE;
 8004bc0:	4b46      	ldr	r3, [pc, #280]	@ (8004cdc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004bc2:	637b      	str	r3, [r7, #52]	@ 0x34
 8004bc4:	f000 bfe5 	b.w	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 8004bc8:	4b43      	ldr	r3, [pc, #268]	@ (8004cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004bca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004bce:	f003 0302 	and.w	r3, r3, #2
 8004bd2:	2b02      	cmp	r3, #2
 8004bd4:	d108      	bne.n	8004be8 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
 8004bd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bd8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004bdc:	d104      	bne.n	8004be8 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
    {
      frequency = LSE_VALUE;
 8004bde:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004be2:	637b      	str	r3, [r7, #52]	@ 0x34
 8004be4:	f000 bfd5 	b.w	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 8004be8:	2300      	movs	r3, #0
 8004bea:	637b      	str	r3, [r7, #52]	@ 0x34
 8004bec:	f000 bfd1 	b.w	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 8004bf0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004bf4:	f1a2 0120 	sub.w	r1, r2, #32
 8004bf8:	430b      	orrs	r3, r1
 8004bfa:	d158      	bne.n	8004cae <HAL_RCCEx_GetPeriphCLKFreq+0x812>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8004bfc:	4b36      	ldr	r3, [pc, #216]	@ (8004cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004bfe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004c02:	f003 0307 	and.w	r3, r3, #7
 8004c06:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8004c08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d104      	bne.n	8004c18 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 8004c0e:	f7fe f865 	bl	8002cdc <HAL_RCC_GetPCLK3Freq>
 8004c12:	6378      	str	r0, [r7, #52]	@ 0x34
 8004c14:	f000 bfbd 	b.w	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8004c18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c1a:	2b01      	cmp	r3, #1
 8004c1c:	d104      	bne.n	8004c28 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004c1e:	f7fd ff19 	bl	8002a54 <HAL_RCC_GetSysClockFreq>
 8004c22:	6378      	str	r0, [r7, #52]	@ 0x34
 8004c24:	f000 bfb5 	b.w	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8004c28:	4b2b      	ldr	r3, [pc, #172]	@ (8004cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c30:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c34:	d106      	bne.n	8004c44 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
 8004c36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c38:	2b02      	cmp	r3, #2
 8004c3a:	d103      	bne.n	8004c44 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      frequency = HSI_VALUE;
 8004c3c:	4b27      	ldr	r3, [pc, #156]	@ (8004cdc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004c3e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c40:	f000 bfa7 	b.w	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8004c44:	4b24      	ldr	r3, [pc, #144]	@ (8004cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004c46:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004c4a:	f003 0302 	and.w	r3, r3, #2
 8004c4e:	2b02      	cmp	r3, #2
 8004c50:	d107      	bne.n	8004c62 <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
 8004c52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c54:	2b03      	cmp	r3, #3
 8004c56:	d104      	bne.n	8004c62 <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
    {
      frequency = LSE_VALUE;
 8004c58:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004c5c:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c5e:	f000 bf98 	b.w	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 8004c62:	4b1d      	ldr	r3, [pc, #116]	@ (8004cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f003 0320 	and.w	r3, r3, #32
 8004c6a:	2b20      	cmp	r3, #32
 8004c6c:	d11b      	bne.n	8004ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 8004c6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c70:	2b04      	cmp	r3, #4
 8004c72:	d118      	bne.n	8004ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004c74:	4b18      	ldr	r3, [pc, #96]	@ (8004cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004c76:	689b      	ldr	r3, [r3, #8]
 8004c78:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d005      	beq.n	8004c8c <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
 8004c80:	4b15      	ldr	r3, [pc, #84]	@ (8004cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004c82:	689b      	ldr	r3, [r3, #8]
 8004c84:	0e1b      	lsrs	r3, r3, #24
 8004c86:	f003 030f 	and.w	r3, r3, #15
 8004c8a:	e006      	b.n	8004c9a <HAL_RCCEx_GetPeriphCLKFreq+0x7fe>
 8004c8c:	4b12      	ldr	r3, [pc, #72]	@ (8004cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004c8e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004c92:	041b      	lsls	r3, r3, #16
 8004c94:	0e1b      	lsrs	r3, r3, #24
 8004c96:	f003 030f 	and.w	r3, r3, #15
 8004c9a:	4a11      	ldr	r2, [pc, #68]	@ (8004ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8004c9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ca0:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ca2:	f000 bf76 	b.w	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	637b      	str	r3, [r7, #52]	@ 0x34
 8004caa:	f000 bf72 	b.w	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 8004cae:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004cb2:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8004cb6:	430b      	orrs	r3, r1
 8004cb8:	d172      	bne.n	8004da0 <HAL_RCCEx_GetPeriphCLKFreq+0x904>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8004cba:	4b07      	ldr	r3, [pc, #28]	@ (8004cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004cbc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004cc0:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8004cc4:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8004cc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cc8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ccc:	d10a      	bne.n	8004ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x848>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004cce:	f7fd fec1 	bl	8002a54 <HAL_RCC_GetSysClockFreq>
 8004cd2:	6378      	str	r0, [r7, #52]	@ 0x34
 8004cd4:	f000 bf5d 	b.w	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 8004cd8:	46020c00 	.word	0x46020c00
 8004cdc:	00f42400 	.word	0x00f42400
 8004ce0:	08007f50 	.word	0x08007f50
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 8004ce4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ce6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004cea:	d108      	bne.n	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0x862>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004cec:	f107 0318 	add.w	r3, r7, #24
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	f7ff f91f 	bl	8003f34 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 8004cf6:	6a3b      	ldr	r3, [r7, #32]
 8004cf8:	637b      	str	r3, [r7, #52]	@ 0x34
 8004cfa:	f000 bf4a 	b.w	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8004cfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d104      	bne.n	8004d0e <HAL_RCCEx_GetPeriphCLKFreq+0x872>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 8004d04:	f7fd ffa8 	bl	8002c58 <HAL_RCC_GetHCLKFreq>
 8004d08:	6378      	str	r0, [r7, #52]	@ 0x34
 8004d0a:	f000 bf42 	b.w	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 8004d0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d10:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004d14:	d122      	bne.n	8004d5c <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8004d16:	4bb0      	ldr	r3, [pc, #704]	@ (8004fd8 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f003 0320 	and.w	r3, r3, #32
 8004d1e:	2b20      	cmp	r3, #32
 8004d20:	d118      	bne.n	8004d54 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004d22:	4bad      	ldr	r3, [pc, #692]	@ (8004fd8 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004d24:	689b      	ldr	r3, [r3, #8]
 8004d26:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d005      	beq.n	8004d3a <HAL_RCCEx_GetPeriphCLKFreq+0x89e>
 8004d2e:	4baa      	ldr	r3, [pc, #680]	@ (8004fd8 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004d30:	689b      	ldr	r3, [r3, #8]
 8004d32:	0e1b      	lsrs	r3, r3, #24
 8004d34:	f003 030f 	and.w	r3, r3, #15
 8004d38:	e006      	b.n	8004d48 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
 8004d3a:	4ba7      	ldr	r3, [pc, #668]	@ (8004fd8 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004d3c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004d40:	041b      	lsls	r3, r3, #16
 8004d42:	0e1b      	lsrs	r3, r3, #24
 8004d44:	f003 030f 	and.w	r3, r3, #15
 8004d48:	4aa4      	ldr	r2, [pc, #656]	@ (8004fdc <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 8004d4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d4e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d50:	f000 bf1f 	b.w	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = 0U;
 8004d54:	2300      	movs	r3, #0
 8004d56:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d58:	f000 bf1b 	b.w	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8004d5c:	4b9e      	ldr	r3, [pc, #632]	@ (8004fd8 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d64:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004d68:	d107      	bne.n	8004d7a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8004d6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d6c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004d70:	d103      	bne.n	8004d7a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    {
      frequency = HSE_VALUE;
 8004d72:	4b9b      	ldr	r3, [pc, #620]	@ (8004fe0 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 8004d74:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d76:	f000 bf0c 	b.w	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8004d7a:	4b97      	ldr	r3, [pc, #604]	@ (8004fd8 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d82:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d86:	d107      	bne.n	8004d98 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
 8004d88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d8a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004d8e:	d103      	bne.n	8004d98 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
    {
      frequency = HSI_VALUE;
 8004d90:	4b93      	ldr	r3, [pc, #588]	@ (8004fe0 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 8004d92:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d94:	f000 befd 	b.w	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 8004d98:	2300      	movs	r3, #0
 8004d9a:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d9c:	f000 bef9 	b.w	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 8004da0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004da4:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8004da8:	430b      	orrs	r3, r1
 8004daa:	d158      	bne.n	8004e5e <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 8004dac:	4b8a      	ldr	r3, [pc, #552]	@ (8004fd8 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004dae:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004db2:	f003 0307 	and.w	r3, r3, #7
 8004db6:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8004db8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dba:	2b04      	cmp	r3, #4
 8004dbc:	d84b      	bhi.n	8004e56 <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
 8004dbe:	a201      	add	r2, pc, #4	@ (adr r2, 8004dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x928>)
 8004dc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dc4:	08004dfd 	.word	0x08004dfd
 8004dc8:	08004dd9 	.word	0x08004dd9
 8004dcc:	08004deb 	.word	0x08004deb
 8004dd0:	08004e07 	.word	0x08004e07
 8004dd4:	08004e11 	.word	0x08004e11
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004dd8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004ddc:	4618      	mov	r0, r3
 8004dde:	f7fe ff4f 	bl	8003c80 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8004de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004de4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004de6:	f000 bed4 	b.w	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004dea:	f107 030c 	add.w	r3, r7, #12
 8004dee:	4618      	mov	r0, r3
 8004df0:	f7ff f9fa 	bl	80041e8 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8004df4:	693b      	ldr	r3, [r7, #16]
 8004df6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004df8:	f000 becb 	b.w	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8004dfc:	f7fd ff2c 	bl	8002c58 <HAL_RCC_GetHCLKFreq>
 8004e00:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8004e02:	f000 bec6 	b.w	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8004e06:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8004e0a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004e0c:	f000 bec1 	b.w	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8004e10:	4b71      	ldr	r3, [pc, #452]	@ (8004fd8 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f003 0320 	and.w	r3, r3, #32
 8004e18:	2b20      	cmp	r3, #32
 8004e1a:	d118      	bne.n	8004e4e <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004e1c:	4b6e      	ldr	r3, [pc, #440]	@ (8004fd8 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004e1e:	689b      	ldr	r3, [r3, #8]
 8004e20:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d005      	beq.n	8004e34 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 8004e28:	4b6b      	ldr	r3, [pc, #428]	@ (8004fd8 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004e2a:	689b      	ldr	r3, [r3, #8]
 8004e2c:	0e1b      	lsrs	r3, r3, #24
 8004e2e:	f003 030f 	and.w	r3, r3, #15
 8004e32:	e006      	b.n	8004e42 <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
 8004e34:	4b68      	ldr	r3, [pc, #416]	@ (8004fd8 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004e36:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004e3a:	041b      	lsls	r3, r3, #16
 8004e3c:	0e1b      	lsrs	r3, r3, #24
 8004e3e:	f003 030f 	and.w	r3, r3, #15
 8004e42:	4a66      	ldr	r2, [pc, #408]	@ (8004fdc <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 8004e44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e48:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004e4a:	f000 bea2 	b.w	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 8004e4e:	2300      	movs	r3, #0
 8004e50:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004e52:	f000 be9e 	b.w	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 8004e56:	2300      	movs	r3, #0
 8004e58:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004e5a:	f000 be9a 	b.w	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 8004e5e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e62:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 8004e66:	430b      	orrs	r3, r1
 8004e68:	d167      	bne.n	8004f3a <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 8004e6a:	4b5b      	ldr	r3, [pc, #364]	@ (8004fd8 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004e6c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004e70:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8004e74:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8004e76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e78:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004e7c:	d036      	beq.n	8004eec <HAL_RCCEx_GetPeriphCLKFreq+0xa50>
 8004e7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e80:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004e84:	d855      	bhi.n	8004f32 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 8004e86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e88:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004e8c:	d029      	beq.n	8004ee2 <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 8004e8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e90:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004e94:	d84d      	bhi.n	8004f32 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 8004e96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e98:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004e9c:	d013      	beq.n	8004ec6 <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
 8004e9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ea0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004ea4:	d845      	bhi.n	8004f32 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 8004ea6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d015      	beq.n	8004ed8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>
 8004eac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004eae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004eb2:	d13e      	bne.n	8004f32 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004eb4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004eb8:	4618      	mov	r0, r3
 8004eba:	f7fe fee1 	bl	8003c80 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8004ebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ec0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004ec2:	f000 be66 	b.w	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004ec6:	f107 030c 	add.w	r3, r7, #12
 8004eca:	4618      	mov	r0, r3
 8004ecc:	f7ff f98c 	bl	80041e8 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8004ed0:	693b      	ldr	r3, [r7, #16]
 8004ed2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004ed4:	f000 be5d 	b.w	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8004ed8:	f7fd febe 	bl	8002c58 <HAL_RCC_GetHCLKFreq>
 8004edc:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8004ede:	f000 be58 	b.w	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8004ee2:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8004ee6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004ee8:	f000 be53 	b.w	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8004eec:	4b3a      	ldr	r3, [pc, #232]	@ (8004fd8 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f003 0320 	and.w	r3, r3, #32
 8004ef4:	2b20      	cmp	r3, #32
 8004ef6:	d118      	bne.n	8004f2a <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004ef8:	4b37      	ldr	r3, [pc, #220]	@ (8004fd8 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004efa:	689b      	ldr	r3, [r3, #8]
 8004efc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d005      	beq.n	8004f10 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
 8004f04:	4b34      	ldr	r3, [pc, #208]	@ (8004fd8 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004f06:	689b      	ldr	r3, [r3, #8]
 8004f08:	0e1b      	lsrs	r3, r3, #24
 8004f0a:	f003 030f 	and.w	r3, r3, #15
 8004f0e:	e006      	b.n	8004f1e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8004f10:	4b31      	ldr	r3, [pc, #196]	@ (8004fd8 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004f12:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004f16:	041b      	lsls	r3, r3, #16
 8004f18:	0e1b      	lsrs	r3, r3, #24
 8004f1a:	f003 030f 	and.w	r3, r3, #15
 8004f1e:	4a2f      	ldr	r2, [pc, #188]	@ (8004fdc <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 8004f20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f24:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004f26:	f000 be34 	b.w	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004f2e:	f000 be30 	b.w	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 8004f32:	2300      	movs	r3, #0
 8004f34:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004f36:	f000 be2c 	b.w	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 8004f3a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f3e:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 8004f42:	430b      	orrs	r3, r1
 8004f44:	d152      	bne.n	8004fec <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8004f46:	4b24      	ldr	r3, [pc, #144]	@ (8004fd8 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004f48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004f4c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004f50:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8004f52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d104      	bne.n	8004f62 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8004f58:	f7fd fe98 	bl	8002c8c <HAL_RCC_GetPCLK1Freq>
 8004f5c:	6378      	str	r0, [r7, #52]	@ 0x34
 8004f5e:	f000 be18 	b.w	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8004f62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f64:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f68:	d104      	bne.n	8004f74 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004f6a:	f7fd fd73 	bl	8002a54 <HAL_RCC_GetSysClockFreq>
 8004f6e:	6378      	str	r0, [r7, #52]	@ 0x34
 8004f70:	f000 be0f 	b.w	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8004f74:	4b18      	ldr	r3, [pc, #96]	@ (8004fd8 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f7c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f80:	d107      	bne.n	8004f92 <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
 8004f82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f84:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004f88:	d103      	bne.n	8004f92 <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
    {
      frequency = HSI_VALUE;
 8004f8a:	4b15      	ldr	r3, [pc, #84]	@ (8004fe0 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 8004f8c:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f8e:	f000 be00 	b.w	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 8004f92:	4b11      	ldr	r3, [pc, #68]	@ (8004fd8 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f003 0320 	and.w	r3, r3, #32
 8004f9a:	2b20      	cmp	r3, #32
 8004f9c:	d122      	bne.n	8004fe4 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
 8004f9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fa0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004fa4:	d11e      	bne.n	8004fe4 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004fa6:	4b0c      	ldr	r3, [pc, #48]	@ (8004fd8 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004fa8:	689b      	ldr	r3, [r3, #8]
 8004faa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d005      	beq.n	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0xb22>
 8004fb2:	4b09      	ldr	r3, [pc, #36]	@ (8004fd8 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004fb4:	689b      	ldr	r3, [r3, #8]
 8004fb6:	0e1b      	lsrs	r3, r3, #24
 8004fb8:	f003 030f 	and.w	r3, r3, #15
 8004fbc:	e006      	b.n	8004fcc <HAL_RCCEx_GetPeriphCLKFreq+0xb30>
 8004fbe:	4b06      	ldr	r3, [pc, #24]	@ (8004fd8 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8004fc0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004fc4:	041b      	lsls	r3, r3, #16
 8004fc6:	0e1b      	lsrs	r3, r3, #24
 8004fc8:	f003 030f 	and.w	r3, r3, #15
 8004fcc:	4a03      	ldr	r2, [pc, #12]	@ (8004fdc <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 8004fce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004fd2:	637b      	str	r3, [r7, #52]	@ 0x34
 8004fd4:	f000 bddd 	b.w	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 8004fd8:	46020c00 	.word	0x46020c00
 8004fdc:	08007f50 	.word	0x08007f50
 8004fe0:	00f42400 	.word	0x00f42400
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	637b      	str	r3, [r7, #52]	@ 0x34
 8004fe8:	f000 bdd3 	b.w	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 8004fec:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004ff0:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 8004ff4:	430b      	orrs	r3, r1
 8004ff6:	d14c      	bne.n	8005092 <HAL_RCCEx_GetPeriphCLKFreq+0xbf6>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8004ff8:	4ba8      	ldr	r3, [pc, #672]	@ (800529c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8004ffa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004ffe:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8005002:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8005004:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005006:	2b00      	cmp	r3, #0
 8005008:	d104      	bne.n	8005014 <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800500a:	f7fd fe3f 	bl	8002c8c <HAL_RCC_GetPCLK1Freq>
 800500e:	6378      	str	r0, [r7, #52]	@ 0x34
 8005010:	f000 bdbf 	b.w	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 8005014:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005016:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800501a:	d104      	bne.n	8005026 <HAL_RCCEx_GetPeriphCLKFreq+0xb8a>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800501c:	f7fd fd1a 	bl	8002a54 <HAL_RCC_GetSysClockFreq>
 8005020:	6378      	str	r0, [r7, #52]	@ 0x34
 8005022:	f000 bdb6 	b.w	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8005026:	4b9d      	ldr	r3, [pc, #628]	@ (800529c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800502e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005032:	d107      	bne.n	8005044 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
 8005034:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005036:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800503a:	d103      	bne.n	8005044 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
    {
      frequency = HSI_VALUE;
 800503c:	4b98      	ldr	r3, [pc, #608]	@ (80052a0 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800503e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005040:	f000 bda7 	b.w	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 8005044:	4b95      	ldr	r3, [pc, #596]	@ (800529c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f003 0320 	and.w	r3, r3, #32
 800504c:	2b20      	cmp	r3, #32
 800504e:	d11c      	bne.n	800508a <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
 8005050:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005052:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005056:	d118      	bne.n	800508a <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005058:	4b90      	ldr	r3, [pc, #576]	@ (800529c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800505a:	689b      	ldr	r3, [r3, #8]
 800505c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005060:	2b00      	cmp	r3, #0
 8005062:	d005      	beq.n	8005070 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 8005064:	4b8d      	ldr	r3, [pc, #564]	@ (800529c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8005066:	689b      	ldr	r3, [r3, #8]
 8005068:	0e1b      	lsrs	r3, r3, #24
 800506a:	f003 030f 	and.w	r3, r3, #15
 800506e:	e006      	b.n	800507e <HAL_RCCEx_GetPeriphCLKFreq+0xbe2>
 8005070:	4b8a      	ldr	r3, [pc, #552]	@ (800529c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8005072:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005076:	041b      	lsls	r3, r3, #16
 8005078:	0e1b      	lsrs	r3, r3, #24
 800507a:	f003 030f 	and.w	r3, r3, #15
 800507e:	4a89      	ldr	r2, [pc, #548]	@ (80052a4 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 8005080:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005084:	637b      	str	r3, [r7, #52]	@ 0x34
 8005086:	f000 bd84 	b.w	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 800508a:	2300      	movs	r3, #0
 800508c:	637b      	str	r3, [r7, #52]	@ 0x34
 800508e:	f000 bd80 	b.w	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 8005092:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005096:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800509a:	430b      	orrs	r3, r1
 800509c:	d158      	bne.n	8005150 <HAL_RCCEx_GetPeriphCLKFreq+0xcb4>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800509e:	4b7f      	ldr	r3, [pc, #508]	@ (800529c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 80050a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80050a4:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80050a8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80050aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050ac:	2bc0      	cmp	r3, #192	@ 0xc0
 80050ae:	d028      	beq.n	8005102 <HAL_RCCEx_GetPeriphCLKFreq+0xc66>
 80050b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050b2:	2bc0      	cmp	r3, #192	@ 0xc0
 80050b4:	d848      	bhi.n	8005148 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 80050b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050b8:	2b80      	cmp	r3, #128	@ 0x80
 80050ba:	d00e      	beq.n	80050da <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 80050bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050be:	2b80      	cmp	r3, #128	@ 0x80
 80050c0:	d842      	bhi.n	8005148 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 80050c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d003      	beq.n	80050d0 <HAL_RCCEx_GetPeriphCLKFreq+0xc34>
 80050c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050ca:	2b40      	cmp	r3, #64	@ 0x40
 80050cc:	d014      	beq.n	80050f8 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 80050ce:	e03b      	b.n	8005148 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 80050d0:	f7fd fe04 	bl	8002cdc <HAL_RCC_GetPCLK3Freq>
 80050d4:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80050d6:	f000 bd5c 	b.w	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80050da:	4b70      	ldr	r3, [pc, #448]	@ (800529c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80050e6:	d103      	bne.n	80050f0 <HAL_RCCEx_GetPeriphCLKFreq+0xc54>
        {
          frequency = HSI_VALUE;
 80050e8:	4b6d      	ldr	r3, [pc, #436]	@ (80052a0 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 80050ea:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80050ec:	f000 bd51 	b.w	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 80050f0:	2300      	movs	r3, #0
 80050f2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80050f4:	f000 bd4d 	b.w	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 80050f8:	f7fd fcac 	bl	8002a54 <HAL_RCC_GetSysClockFreq>
 80050fc:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80050fe:	f000 bd48 	b.w	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005102:	4b66      	ldr	r3, [pc, #408]	@ (800529c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f003 0320 	and.w	r3, r3, #32
 800510a:	2b20      	cmp	r3, #32
 800510c:	d118      	bne.n	8005140 <HAL_RCCEx_GetPeriphCLKFreq+0xca4>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800510e:	4b63      	ldr	r3, [pc, #396]	@ (800529c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8005110:	689b      	ldr	r3, [r3, #8]
 8005112:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005116:	2b00      	cmp	r3, #0
 8005118:	d005      	beq.n	8005126 <HAL_RCCEx_GetPeriphCLKFreq+0xc8a>
 800511a:	4b60      	ldr	r3, [pc, #384]	@ (800529c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800511c:	689b      	ldr	r3, [r3, #8]
 800511e:	0e1b      	lsrs	r3, r3, #24
 8005120:	f003 030f 	and.w	r3, r3, #15
 8005124:	e006      	b.n	8005134 <HAL_RCCEx_GetPeriphCLKFreq+0xc98>
 8005126:	4b5d      	ldr	r3, [pc, #372]	@ (800529c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8005128:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800512c:	041b      	lsls	r3, r3, #16
 800512e:	0e1b      	lsrs	r3, r3, #24
 8005130:	f003 030f 	and.w	r3, r3, #15
 8005134:	4a5b      	ldr	r2, [pc, #364]	@ (80052a4 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 8005136:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800513a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800513c:	f000 bd29 	b.w	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 8005140:	2300      	movs	r3, #0
 8005142:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005144:	f000 bd25 	b.w	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      default:
      {
        frequency = 0U;
 8005148:	2300      	movs	r3, #0
 800514a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800514c:	f000 bd21 	b.w	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 8005150:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005154:	f5a2 0180 	sub.w	r1, r2, #4194304	@ 0x400000
 8005158:	430b      	orrs	r3, r1
 800515a:	d14c      	bne.n	80051f6 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800515c:	4b4f      	ldr	r3, [pc, #316]	@ (800529c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800515e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005162:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8005166:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 8005168:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800516a:	2b00      	cmp	r3, #0
 800516c:	d104      	bne.n	8005178 <HAL_RCCEx_GetPeriphCLKFreq+0xcdc>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800516e:	f7fd fd8d 	bl	8002c8c <HAL_RCC_GetPCLK1Freq>
 8005172:	6378      	str	r0, [r7, #52]	@ 0x34
 8005174:	f000 bd0d 	b.w	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 8005178:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800517a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800517e:	d104      	bne.n	800518a <HAL_RCCEx_GetPeriphCLKFreq+0xcee>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005180:	f7fd fc68 	bl	8002a54 <HAL_RCC_GetSysClockFreq>
 8005184:	6378      	str	r0, [r7, #52]	@ 0x34
 8005186:	f000 bd04 	b.w	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 800518a:	4b44      	ldr	r3, [pc, #272]	@ (800529c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005192:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005196:	d107      	bne.n	80051a8 <HAL_RCCEx_GetPeriphCLKFreq+0xd0c>
 8005198:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800519a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800519e:	d103      	bne.n	80051a8 <HAL_RCCEx_GetPeriphCLKFreq+0xd0c>
    {
      frequency = HSI_VALUE;
 80051a0:	4b3f      	ldr	r3, [pc, #252]	@ (80052a0 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 80051a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80051a4:	f000 bcf5 	b.w	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 80051a8:	4b3c      	ldr	r3, [pc, #240]	@ (800529c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f003 0320 	and.w	r3, r3, #32
 80051b0:	2b20      	cmp	r3, #32
 80051b2:	d11c      	bne.n	80051ee <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
 80051b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051b6:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80051ba:	d118      	bne.n	80051ee <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80051bc:	4b37      	ldr	r3, [pc, #220]	@ (800529c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 80051be:	689b      	ldr	r3, [r3, #8]
 80051c0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d005      	beq.n	80051d4 <HAL_RCCEx_GetPeriphCLKFreq+0xd38>
 80051c8:	4b34      	ldr	r3, [pc, #208]	@ (800529c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 80051ca:	689b      	ldr	r3, [r3, #8]
 80051cc:	0e1b      	lsrs	r3, r3, #24
 80051ce:	f003 030f 	and.w	r3, r3, #15
 80051d2:	e006      	b.n	80051e2 <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 80051d4:	4b31      	ldr	r3, [pc, #196]	@ (800529c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 80051d6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80051da:	041b      	lsls	r3, r3, #16
 80051dc:	0e1b      	lsrs	r3, r3, #24
 80051de:	f003 030f 	and.w	r3, r3, #15
 80051e2:	4a30      	ldr	r2, [pc, #192]	@ (80052a4 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 80051e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80051ea:	f000 bcd2 	b.w	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 80051ee:	2300      	movs	r3, #0
 80051f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80051f2:	f000 bcce 	b.w	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined (I2C5)
  else if (PeriphClk == RCC_PERIPHCLK_I2C5)
 80051f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80051fa:	f102 4140 	add.w	r1, r2, #3221225472	@ 0xc0000000
 80051fe:	430b      	orrs	r3, r1
 8005200:	d152      	bne.n	80052a8 <HAL_RCCEx_GetPeriphCLKFreq+0xe0c>
  {
    /* Get the current I2C5 source */
    srcclk = __HAL_RCC_GET_I2C5_SOURCE();
 8005202:	4b26      	ldr	r3, [pc, #152]	@ (800529c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8005204:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005208:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 800520c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C5CLKSOURCE_PCLK1)
 800520e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005210:	2b00      	cmp	r3, #0
 8005212:	d104      	bne.n	800521e <HAL_RCCEx_GetPeriphCLKFreq+0xd82>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8005214:	f7fd fd3a 	bl	8002c8c <HAL_RCC_GetPCLK1Freq>
 8005218:	6378      	str	r0, [r7, #52]	@ 0x34
 800521a:	f000 bcba 	b.w	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C5CLKSOURCE_SYSCLK)
 800521e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005220:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005224:	d104      	bne.n	8005230 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005226:	f7fd fc15 	bl	8002a54 <HAL_RCC_GetSysClockFreq>
 800522a:	6378      	str	r0, [r7, #52]	@ 0x34
 800522c:	f000 bcb1 	b.w	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C5CLKSOURCE_HSI))
 8005230:	4b1a      	ldr	r3, [pc, #104]	@ (800529c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005238:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800523c:	d107      	bne.n	800524e <HAL_RCCEx_GetPeriphCLKFreq+0xdb2>
 800523e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005240:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005244:	d103      	bne.n	800524e <HAL_RCCEx_GetPeriphCLKFreq+0xdb2>
    {
      frequency = HSI_VALUE;
 8005246:	4b16      	ldr	r3, [pc, #88]	@ (80052a0 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8005248:	637b      	str	r3, [r7, #52]	@ 0x34
 800524a:	f000 bca2 	b.w	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C5CLKSOURCE_MSIK))
 800524e:	4b13      	ldr	r3, [pc, #76]	@ (800529c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f003 0320 	and.w	r3, r3, #32
 8005256:	2b20      	cmp	r3, #32
 8005258:	d11c      	bne.n	8005294 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 800525a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800525c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005260:	d118      	bne.n	8005294 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005262:	4b0e      	ldr	r3, [pc, #56]	@ (800529c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8005264:	689b      	ldr	r3, [r3, #8]
 8005266:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800526a:	2b00      	cmp	r3, #0
 800526c:	d005      	beq.n	800527a <HAL_RCCEx_GetPeriphCLKFreq+0xdde>
 800526e:	4b0b      	ldr	r3, [pc, #44]	@ (800529c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8005270:	689b      	ldr	r3, [r3, #8]
 8005272:	0e1b      	lsrs	r3, r3, #24
 8005274:	f003 030f 	and.w	r3, r3, #15
 8005278:	e006      	b.n	8005288 <HAL_RCCEx_GetPeriphCLKFreq+0xdec>
 800527a:	4b08      	ldr	r3, [pc, #32]	@ (800529c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800527c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005280:	041b      	lsls	r3, r3, #16
 8005282:	0e1b      	lsrs	r3, r3, #24
 8005284:	f003 030f 	and.w	r3, r3, #15
 8005288:	4a06      	ldr	r2, [pc, #24]	@ (80052a4 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800528a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800528e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005290:	f000 bc7f 	b.w	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C5 */
    else
    {
      frequency = 0U;
 8005294:	2300      	movs	r3, #0
 8005296:	637b      	str	r3, [r7, #52]	@ 0x34
 8005298:	f000 bc7b 	b.w	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800529c:	46020c00 	.word	0x46020c00
 80052a0:	00f42400 	.word	0x00f42400
 80052a4:	08007f50 	.word	0x08007f50
    }
  }
#endif /* I2C5 */
#if defined (I2C6)
  else if (PeriphClk == RCC_PERIPHCLK_I2C6)
 80052a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80052ac:	f102 4100 	add.w	r1, r2, #2147483648	@ 0x80000000
 80052b0:	430b      	orrs	r3, r1
 80052b2:	d14c      	bne.n	800534e <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
  {
    /* Get the current I2C6 source */
    srcclk = __HAL_RCC_GET_I2C6_SOURCE();
 80052b4:	4ba6      	ldr	r3, [pc, #664]	@ (8005550 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 80052b6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80052ba:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 80052be:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C6CLKSOURCE_PCLK1)
 80052c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d104      	bne.n	80052d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe34>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80052c6:	f7fd fce1 	bl	8002c8c <HAL_RCC_GetPCLK1Freq>
 80052ca:	6378      	str	r0, [r7, #52]	@ 0x34
 80052cc:	f000 bc61 	b.w	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C6CLKSOURCE_SYSCLK)
 80052d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052d2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80052d6:	d104      	bne.n	80052e2 <HAL_RCCEx_GetPeriphCLKFreq+0xe46>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80052d8:	f7fd fbbc 	bl	8002a54 <HAL_RCC_GetSysClockFreq>
 80052dc:	6378      	str	r0, [r7, #52]	@ 0x34
 80052de:	f000 bc58 	b.w	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C6CLKSOURCE_HSI))
 80052e2:	4b9b      	ldr	r3, [pc, #620]	@ (8005550 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80052ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80052ee:	d107      	bne.n	8005300 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80052f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052f2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80052f6:	d103      	bne.n	8005300 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
    {
      frequency = HSI_VALUE;
 80052f8:	4b96      	ldr	r3, [pc, #600]	@ (8005554 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 80052fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80052fc:	f000 bc49 	b.w	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C6CLKSOURCE_MSIK))
 8005300:	4b93      	ldr	r3, [pc, #588]	@ (8005550 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f003 0320 	and.w	r3, r3, #32
 8005308:	2b20      	cmp	r3, #32
 800530a:	d11c      	bne.n	8005346 <HAL_RCCEx_GetPeriphCLKFreq+0xeaa>
 800530c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800530e:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8005312:	d118      	bne.n	8005346 <HAL_RCCEx_GetPeriphCLKFreq+0xeaa>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005314:	4b8e      	ldr	r3, [pc, #568]	@ (8005550 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8005316:	689b      	ldr	r3, [r3, #8]
 8005318:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800531c:	2b00      	cmp	r3, #0
 800531e:	d005      	beq.n	800532c <HAL_RCCEx_GetPeriphCLKFreq+0xe90>
 8005320:	4b8b      	ldr	r3, [pc, #556]	@ (8005550 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8005322:	689b      	ldr	r3, [r3, #8]
 8005324:	0e1b      	lsrs	r3, r3, #24
 8005326:	f003 030f 	and.w	r3, r3, #15
 800532a:	e006      	b.n	800533a <HAL_RCCEx_GetPeriphCLKFreq+0xe9e>
 800532c:	4b88      	ldr	r3, [pc, #544]	@ (8005550 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800532e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005332:	041b      	lsls	r3, r3, #16
 8005334:	0e1b      	lsrs	r3, r3, #24
 8005336:	f003 030f 	and.w	r3, r3, #15
 800533a:	4a87      	ldr	r2, [pc, #540]	@ (8005558 <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 800533c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005340:	637b      	str	r3, [r7, #52]	@ 0x34
 8005342:	f000 bc26 	b.w	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C6 */
    else
    {
      frequency = 0U;
 8005346:	2300      	movs	r3, #0
 8005348:	637b      	str	r3, [r7, #52]	@ 0x34
 800534a:	f000 bc22 	b.w	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 800534e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005352:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8005356:	430b      	orrs	r3, r1
 8005358:	d164      	bne.n	8005424 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 800535a:	4b7d      	ldr	r3, [pc, #500]	@ (8005550 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800535c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005360:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005364:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 8005366:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005368:	2b00      	cmp	r3, #0
 800536a:	d120      	bne.n	80053ae <HAL_RCCEx_GetPeriphCLKFreq+0xf12>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800536c:	4b78      	ldr	r3, [pc, #480]	@ (8005550 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f003 0320 	and.w	r3, r3, #32
 8005374:	2b20      	cmp	r3, #32
 8005376:	d117      	bne.n	80053a8 <HAL_RCCEx_GetPeriphCLKFreq+0xf0c>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005378:	4b75      	ldr	r3, [pc, #468]	@ (8005550 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800537a:	689b      	ldr	r3, [r3, #8]
 800537c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005380:	2b00      	cmp	r3, #0
 8005382:	d005      	beq.n	8005390 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
 8005384:	4b72      	ldr	r3, [pc, #456]	@ (8005550 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8005386:	689b      	ldr	r3, [r3, #8]
 8005388:	0e1b      	lsrs	r3, r3, #24
 800538a:	f003 030f 	and.w	r3, r3, #15
 800538e:	e006      	b.n	800539e <HAL_RCCEx_GetPeriphCLKFreq+0xf02>
 8005390:	4b6f      	ldr	r3, [pc, #444]	@ (8005550 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8005392:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005396:	041b      	lsls	r3, r3, #16
 8005398:	0e1b      	lsrs	r3, r3, #24
 800539a:	f003 030f 	and.w	r3, r3, #15
 800539e:	4a6e      	ldr	r2, [pc, #440]	@ (8005558 <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 80053a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80053a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80053a6:	e3f4      	b.n	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = 0U;
 80053a8:	2300      	movs	r3, #0
 80053aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80053ac:	e3f1      	b.n	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 80053ae:	4b68      	ldr	r3, [pc, #416]	@ (8005550 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 80053b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80053b4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80053b8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80053bc:	d112      	bne.n	80053e4 <HAL_RCCEx_GetPeriphCLKFreq+0xf48>
 80053be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053c0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80053c4:	d10e      	bne.n	80053e4 <HAL_RCCEx_GetPeriphCLKFreq+0xf48>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80053c6:	4b62      	ldr	r3, [pc, #392]	@ (8005550 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 80053c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80053cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80053d0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80053d4:	d102      	bne.n	80053dc <HAL_RCCEx_GetPeriphCLKFreq+0xf40>
      {
        frequency = LSI_VALUE / 128U;
 80053d6:	23fa      	movs	r3, #250	@ 0xfa
 80053d8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80053da:	e3da      	b.n	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 80053dc:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80053e0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80053e2:	e3d6      	b.n	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 80053e4:	4b5a      	ldr	r3, [pc, #360]	@ (8005550 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80053ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80053f0:	d106      	bne.n	8005400 <HAL_RCCEx_GetPeriphCLKFreq+0xf64>
 80053f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80053f8:	d102      	bne.n	8005400 <HAL_RCCEx_GetPeriphCLKFreq+0xf64>
    {
      frequency = HSI_VALUE;
 80053fa:	4b56      	ldr	r3, [pc, #344]	@ (8005554 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 80053fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80053fe:	e3c8      	b.n	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 8005400:	4b53      	ldr	r3, [pc, #332]	@ (8005550 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8005402:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005406:	f003 0302 	and.w	r3, r3, #2
 800540a:	2b02      	cmp	r3, #2
 800540c:	d107      	bne.n	800541e <HAL_RCCEx_GetPeriphCLKFreq+0xf82>
 800540e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005410:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005414:	d103      	bne.n	800541e <HAL_RCCEx_GetPeriphCLKFreq+0xf82>
    {
      frequency = LSE_VALUE;
 8005416:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800541a:	637b      	str	r3, [r7, #52]	@ 0x34
 800541c:	e3b9      	b.n	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 800541e:	2300      	movs	r3, #0
 8005420:	637b      	str	r3, [r7, #52]	@ 0x34
 8005422:	e3b6      	b.n	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 8005424:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005428:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 800542c:	430b      	orrs	r3, r1
 800542e:	d164      	bne.n	80054fa <HAL_RCCEx_GetPeriphCLKFreq+0x105e>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8005430:	4b47      	ldr	r3, [pc, #284]	@ (8005550 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8005432:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005436:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800543a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 800543c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800543e:	2b00      	cmp	r3, #0
 8005440:	d120      	bne.n	8005484 <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005442:	4b43      	ldr	r3, [pc, #268]	@ (8005550 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f003 0320 	and.w	r3, r3, #32
 800544a:	2b20      	cmp	r3, #32
 800544c:	d117      	bne.n	800547e <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800544e:	4b40      	ldr	r3, [pc, #256]	@ (8005550 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8005450:	689b      	ldr	r3, [r3, #8]
 8005452:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005456:	2b00      	cmp	r3, #0
 8005458:	d005      	beq.n	8005466 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
 800545a:	4b3d      	ldr	r3, [pc, #244]	@ (8005550 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800545c:	689b      	ldr	r3, [r3, #8]
 800545e:	0e1b      	lsrs	r3, r3, #24
 8005460:	f003 030f 	and.w	r3, r3, #15
 8005464:	e006      	b.n	8005474 <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>
 8005466:	4b3a      	ldr	r3, [pc, #232]	@ (8005550 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8005468:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800546c:	041b      	lsls	r3, r3, #16
 800546e:	0e1b      	lsrs	r3, r3, #24
 8005470:	f003 030f 	and.w	r3, r3, #15
 8005474:	4a38      	ldr	r2, [pc, #224]	@ (8005558 <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 8005476:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800547a:	637b      	str	r3, [r7, #52]	@ 0x34
 800547c:	e389      	b.n	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = 0U;
 800547e:	2300      	movs	r3, #0
 8005480:	637b      	str	r3, [r7, #52]	@ 0x34
 8005482:	e386      	b.n	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8005484:	4b32      	ldr	r3, [pc, #200]	@ (8005550 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8005486:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800548a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800548e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005492:	d112      	bne.n	80054ba <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
 8005494:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005496:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800549a:	d10e      	bne.n	80054ba <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800549c:	4b2c      	ldr	r3, [pc, #176]	@ (8005550 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800549e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80054a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80054a6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80054aa:	d102      	bne.n	80054b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1016>
      {
        frequency = LSI_VALUE / 128U;
 80054ac:	23fa      	movs	r3, #250	@ 0xfa
 80054ae:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80054b0:	e36f      	b.n	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 80054b2:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80054b6:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80054b8:	e36b      	b.n	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 80054ba:	4b25      	ldr	r3, [pc, #148]	@ (8005550 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80054c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80054c6:	d106      	bne.n	80054d6 <HAL_RCCEx_GetPeriphCLKFreq+0x103a>
 80054c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054ca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80054ce:	d102      	bne.n	80054d6 <HAL_RCCEx_GetPeriphCLKFreq+0x103a>
    {
      frequency = HSI_VALUE;
 80054d0:	4b20      	ldr	r3, [pc, #128]	@ (8005554 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 80054d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80054d4:	e35d      	b.n	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 80054d6:	4b1e      	ldr	r3, [pc, #120]	@ (8005550 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 80054d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80054dc:	f003 0302 	and.w	r3, r3, #2
 80054e0:	2b02      	cmp	r3, #2
 80054e2:	d107      	bne.n	80054f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>
 80054e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054e6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80054ea:	d103      	bne.n	80054f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>
    {
      frequency = LSE_VALUE;
 80054ec:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80054f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80054f2:	e34e      	b.n	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 80054f4:	2300      	movs	r3, #0
 80054f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80054f8:	e34b      	b.n	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 80054fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80054fe:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8005502:	430b      	orrs	r3, r1
 8005504:	d14e      	bne.n	80055a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1108>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8005506:	4b12      	ldr	r3, [pc, #72]	@ (8005550 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8005508:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800550c:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8005510:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8005512:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005514:	2b00      	cmp	r3, #0
 8005516:	d103      	bne.n	8005520 <HAL_RCCEx_GetPeriphCLKFreq+0x1084>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8005518:	f7fd fbb8 	bl	8002c8c <HAL_RCC_GetPCLK1Freq>
 800551c:	6378      	str	r0, [r7, #52]	@ 0x34
 800551e:	e338      	b.n	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 8005520:	4b0b      	ldr	r3, [pc, #44]	@ (8005550 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8005522:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005526:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800552a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800552e:	d119      	bne.n	8005564 <HAL_RCCEx_GetPeriphCLKFreq+0x10c8>
 8005530:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005532:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005536:	d115      	bne.n	8005564 <HAL_RCCEx_GetPeriphCLKFreq+0x10c8>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005538:	4b05      	ldr	r3, [pc, #20]	@ (8005550 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800553a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800553e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005542:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005546:	d109      	bne.n	800555c <HAL_RCCEx_GetPeriphCLKFreq+0x10c0>
      {
        frequency = LSI_VALUE / 128U;
 8005548:	23fa      	movs	r3, #250	@ 0xfa
 800554a:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800554c:	e321      	b.n	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800554e:	bf00      	nop
 8005550:	46020c00 	.word	0x46020c00
 8005554:	00f42400 	.word	0x00f42400
 8005558:	08007f50 	.word	0x08007f50
      }
      else
      {
        frequency = LSI_VALUE;
 800555c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8005560:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005562:	e316      	b.n	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 8005564:	4ba8      	ldr	r3, [pc, #672]	@ (8005808 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800556c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005570:	d106      	bne.n	8005580 <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>
 8005572:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005574:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005578:	d102      	bne.n	8005580 <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>
    {
      frequency = HSI_VALUE;
 800557a:	4ba4      	ldr	r3, [pc, #656]	@ (800580c <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800557c:	637b      	str	r3, [r7, #52]	@ 0x34
 800557e:	e308      	b.n	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8005580:	4ba1      	ldr	r3, [pc, #644]	@ (8005808 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8005582:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005586:	f003 0302 	and.w	r3, r3, #2
 800558a:	2b02      	cmp	r3, #2
 800558c:	d107      	bne.n	800559e <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
 800558e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005590:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005594:	d103      	bne.n	800559e <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
    {
      frequency = LSE_VALUE;
 8005596:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800559a:	637b      	str	r3, [r7, #52]	@ 0x34
 800559c:	e2f9      	b.n	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 800559e:	2300      	movs	r3, #0
 80055a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80055a2:	e2f6      	b.n	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 80055a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80055a8:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 80055ac:	430b      	orrs	r3, r1
 80055ae:	d12d      	bne.n	800560c <HAL_RCCEx_GetPeriphCLKFreq+0x1170>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 80055b0:	4b95      	ldr	r3, [pc, #596]	@ (8005808 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 80055b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80055b6:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 80055ba:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 80055bc:	4b92      	ldr	r3, [pc, #584]	@ (8005808 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055c4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80055c8:	d105      	bne.n	80055d6 <HAL_RCCEx_GetPeriphCLKFreq+0x113a>
 80055ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d102      	bne.n	80055d6 <HAL_RCCEx_GetPeriphCLKFreq+0x113a>
    {
      frequency = HSE_VALUE;
 80055d0:	4b8e      	ldr	r3, [pc, #568]	@ (800580c <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 80055d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80055d4:	e2dd      	b.n	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 80055d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055d8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80055dc:	d107      	bne.n	80055ee <HAL_RCCEx_GetPeriphCLKFreq+0x1152>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80055de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80055e2:	4618      	mov	r0, r3
 80055e4:	f7fe fb4c 	bl	8003c80 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 80055e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80055ec:	e2d1      	b.n	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 80055ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055f0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80055f4:	d107      	bne.n	8005606 <HAL_RCCEx_GetPeriphCLKFreq+0x116a>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80055f6:	f107 0318 	add.w	r3, r7, #24
 80055fa:	4618      	mov	r0, r3
 80055fc:	f7fe fc9a 	bl	8003f34 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 8005600:	69bb      	ldr	r3, [r7, #24]
 8005602:	637b      	str	r3, [r7, #52]	@ 0x34
 8005604:	e2c5      	b.n	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 8005606:	2300      	movs	r3, #0
 8005608:	637b      	str	r3, [r7, #52]	@ 0x34
 800560a:	e2c2      	b.n	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 800560c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005610:	f5a2 0100 	sub.w	r1, r2, #8388608	@ 0x800000
 8005614:	430b      	orrs	r3, r1
 8005616:	d156      	bne.n	80056c6 <HAL_RCCEx_GetPeriphCLKFreq+0x122a>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8005618:	4b7b      	ldr	r3, [pc, #492]	@ (8005808 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800561a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800561e:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8005622:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8005624:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005626:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800562a:	d028      	beq.n	800567e <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 800562c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800562e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005632:	d845      	bhi.n	80056c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
 8005634:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005636:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800563a:	d013      	beq.n	8005664 <HAL_RCCEx_GetPeriphCLKFreq+0x11c8>
 800563c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800563e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005642:	d83d      	bhi.n	80056c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
 8005644:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005646:	2b00      	cmp	r3, #0
 8005648:	d004      	beq.n	8005654 <HAL_RCCEx_GetPeriphCLKFreq+0x11b8>
 800564a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800564c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005650:	d004      	beq.n	800565c <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
 8005652:	e035      	b.n	80056c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 8005654:	f7fd fb2e 	bl	8002cb4 <HAL_RCC_GetPCLK2Freq>
 8005658:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800565a:	e29a      	b.n	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800565c:	f7fd f9fa 	bl	8002a54 <HAL_RCC_GetSysClockFreq>
 8005660:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8005662:	e296      	b.n	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005664:	4b68      	ldr	r3, [pc, #416]	@ (8005808 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800566c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005670:	d102      	bne.n	8005678 <HAL_RCCEx_GetPeriphCLKFreq+0x11dc>
        {
          frequency = HSI_VALUE;
 8005672:	4b66      	ldr	r3, [pc, #408]	@ (800580c <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 8005674:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005676:	e28c      	b.n	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 8005678:	2300      	movs	r3, #0
 800567a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800567c:	e289      	b.n	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800567e:	4b62      	ldr	r3, [pc, #392]	@ (8005808 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f003 0320 	and.w	r3, r3, #32
 8005686:	2b20      	cmp	r3, #32
 8005688:	d117      	bne.n	80056ba <HAL_RCCEx_GetPeriphCLKFreq+0x121e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800568a:	4b5f      	ldr	r3, [pc, #380]	@ (8005808 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800568c:	689b      	ldr	r3, [r3, #8]
 800568e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005692:	2b00      	cmp	r3, #0
 8005694:	d005      	beq.n	80056a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1206>
 8005696:	4b5c      	ldr	r3, [pc, #368]	@ (8005808 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8005698:	689b      	ldr	r3, [r3, #8]
 800569a:	0e1b      	lsrs	r3, r3, #24
 800569c:	f003 030f 	and.w	r3, r3, #15
 80056a0:	e006      	b.n	80056b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1214>
 80056a2:	4b59      	ldr	r3, [pc, #356]	@ (8005808 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 80056a4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80056a8:	041b      	lsls	r3, r3, #16
 80056aa:	0e1b      	lsrs	r3, r3, #24
 80056ac:	f003 030f 	and.w	r3, r3, #15
 80056b0:	4a57      	ldr	r2, [pc, #348]	@ (8005810 <HAL_RCCEx_GetPeriphCLKFreq+0x1374>)
 80056b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056b6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80056b8:	e26b      	b.n	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 80056ba:	2300      	movs	r3, #0
 80056bc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80056be:	e268      	b.n	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 80056c0:	2300      	movs	r3, #0
 80056c2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80056c4:	e265      	b.n	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 80056c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80056ca:	f102 417f 	add.w	r1, r2, #4278190080	@ 0xff000000
 80056ce:	430b      	orrs	r3, r1
 80056d0:	d156      	bne.n	8005780 <HAL_RCCEx_GetPeriphCLKFreq+0x12e4>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 80056d2:	4b4d      	ldr	r3, [pc, #308]	@ (8005808 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 80056d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80056d8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80056dc:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 80056de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056e0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80056e4:	d028      	beq.n	8005738 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>
 80056e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056e8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80056ec:	d845      	bhi.n	800577a <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
 80056ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056f0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80056f4:	d013      	beq.n	800571e <HAL_RCCEx_GetPeriphCLKFreq+0x1282>
 80056f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056f8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80056fc:	d83d      	bhi.n	800577a <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
 80056fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005700:	2b00      	cmp	r3, #0
 8005702:	d004      	beq.n	800570e <HAL_RCCEx_GetPeriphCLKFreq+0x1272>
 8005704:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005706:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800570a:	d004      	beq.n	8005716 <HAL_RCCEx_GetPeriphCLKFreq+0x127a>
 800570c:	e035      	b.n	800577a <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 800570e:	f7fd fabd 	bl	8002c8c <HAL_RCC_GetPCLK1Freq>
 8005712:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8005714:	e23d      	b.n	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8005716:	f7fd f99d 	bl	8002a54 <HAL_RCC_GetSysClockFreq>
 800571a:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800571c:	e239      	b.n	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800571e:	4b3a      	ldr	r3, [pc, #232]	@ (8005808 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005726:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800572a:	d102      	bne.n	8005732 <HAL_RCCEx_GetPeriphCLKFreq+0x1296>
        {
          frequency = HSI_VALUE;
 800572c:	4b37      	ldr	r3, [pc, #220]	@ (800580c <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800572e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005730:	e22f      	b.n	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 8005732:	2300      	movs	r3, #0
 8005734:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005736:	e22c      	b.n	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005738:	4b33      	ldr	r3, [pc, #204]	@ (8005808 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f003 0320 	and.w	r3, r3, #32
 8005740:	2b20      	cmp	r3, #32
 8005742:	d117      	bne.n	8005774 <HAL_RCCEx_GetPeriphCLKFreq+0x12d8>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005744:	4b30      	ldr	r3, [pc, #192]	@ (8005808 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8005746:	689b      	ldr	r3, [r3, #8]
 8005748:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800574c:	2b00      	cmp	r3, #0
 800574e:	d005      	beq.n	800575c <HAL_RCCEx_GetPeriphCLKFreq+0x12c0>
 8005750:	4b2d      	ldr	r3, [pc, #180]	@ (8005808 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8005752:	689b      	ldr	r3, [r3, #8]
 8005754:	0e1b      	lsrs	r3, r3, #24
 8005756:	f003 030f 	and.w	r3, r3, #15
 800575a:	e006      	b.n	800576a <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
 800575c:	4b2a      	ldr	r3, [pc, #168]	@ (8005808 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800575e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005762:	041b      	lsls	r3, r3, #16
 8005764:	0e1b      	lsrs	r3, r3, #24
 8005766:	f003 030f 	and.w	r3, r3, #15
 800576a:	4a29      	ldr	r2, [pc, #164]	@ (8005810 <HAL_RCCEx_GetPeriphCLKFreq+0x1374>)
 800576c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005770:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005772:	e20e      	b.n	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 8005774:	2300      	movs	r3, #0
 8005776:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005778:	e20b      	b.n	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800577a:	2300      	movs	r3, #0
 800577c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800577e:	e208      	b.n	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 8005780:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005784:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 8005788:	430b      	orrs	r3, r1
 800578a:	d17c      	bne.n	8005886 <HAL_RCCEx_GetPeriphCLKFreq+0x13ea>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800578c:	4b1e      	ldr	r3, [pc, #120]	@ (8005808 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800578e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005792:	f003 0318 	and.w	r3, r3, #24
 8005796:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8005798:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800579a:	2b18      	cmp	r3, #24
 800579c:	d870      	bhi.n	8005880 <HAL_RCCEx_GetPeriphCLKFreq+0x13e4>
 800579e:	a201      	add	r2, pc, #4	@ (adr r2, 80057a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>)
 80057a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057a4:	08005815 	.word	0x08005815
 80057a8:	08005881 	.word	0x08005881
 80057ac:	08005881 	.word	0x08005881
 80057b0:	08005881 	.word	0x08005881
 80057b4:	08005881 	.word	0x08005881
 80057b8:	08005881 	.word	0x08005881
 80057bc:	08005881 	.word	0x08005881
 80057c0:	08005881 	.word	0x08005881
 80057c4:	0800581d 	.word	0x0800581d
 80057c8:	08005881 	.word	0x08005881
 80057cc:	08005881 	.word	0x08005881
 80057d0:	08005881 	.word	0x08005881
 80057d4:	08005881 	.word	0x08005881
 80057d8:	08005881 	.word	0x08005881
 80057dc:	08005881 	.word	0x08005881
 80057e0:	08005881 	.word	0x08005881
 80057e4:	08005825 	.word	0x08005825
 80057e8:	08005881 	.word	0x08005881
 80057ec:	08005881 	.word	0x08005881
 80057f0:	08005881 	.word	0x08005881
 80057f4:	08005881 	.word	0x08005881
 80057f8:	08005881 	.word	0x08005881
 80057fc:	08005881 	.word	0x08005881
 8005800:	08005881 	.word	0x08005881
 8005804:	0800583f 	.word	0x0800583f
 8005808:	46020c00 	.word	0x46020c00
 800580c:	00f42400 	.word	0x00f42400
 8005810:	08007f50 	.word	0x08007f50
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 8005814:	f7fd fa62 	bl	8002cdc <HAL_RCC_GetPCLK3Freq>
 8005818:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800581a:	e1ba      	b.n	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800581c:	f7fd f91a 	bl	8002a54 <HAL_RCC_GetSysClockFreq>
 8005820:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8005822:	e1b6      	b.n	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005824:	4b9f      	ldr	r3, [pc, #636]	@ (8005aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800582c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005830:	d102      	bne.n	8005838 <HAL_RCCEx_GetPeriphCLKFreq+0x139c>
        {
          frequency = HSI_VALUE;
 8005832:	4b9d      	ldr	r3, [pc, #628]	@ (8005aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 8005834:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005836:	e1ac      	b.n	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 8005838:	2300      	movs	r3, #0
 800583a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800583c:	e1a9      	b.n	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800583e:	4b99      	ldr	r3, [pc, #612]	@ (8005aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f003 0320 	and.w	r3, r3, #32
 8005846:	2b20      	cmp	r3, #32
 8005848:	d117      	bne.n	800587a <HAL_RCCEx_GetPeriphCLKFreq+0x13de>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800584a:	4b96      	ldr	r3, [pc, #600]	@ (8005aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800584c:	689b      	ldr	r3, [r3, #8]
 800584e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005852:	2b00      	cmp	r3, #0
 8005854:	d005      	beq.n	8005862 <HAL_RCCEx_GetPeriphCLKFreq+0x13c6>
 8005856:	4b93      	ldr	r3, [pc, #588]	@ (8005aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 8005858:	689b      	ldr	r3, [r3, #8]
 800585a:	0e1b      	lsrs	r3, r3, #24
 800585c:	f003 030f 	and.w	r3, r3, #15
 8005860:	e006      	b.n	8005870 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
 8005862:	4b90      	ldr	r3, [pc, #576]	@ (8005aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 8005864:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005868:	041b      	lsls	r3, r3, #16
 800586a:	0e1b      	lsrs	r3, r3, #24
 800586c:	f003 030f 	and.w	r3, r3, #15
 8005870:	4a8e      	ldr	r2, [pc, #568]	@ (8005aac <HAL_RCCEx_GetPeriphCLKFreq+0x1610>)
 8005872:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005876:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005878:	e18b      	b.n	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800587a:	2300      	movs	r3, #0
 800587c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800587e:	e188      	b.n	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 8005880:	2300      	movs	r3, #0
 8005882:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005884:	e185      	b.n	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 8005886:	e9d7 2300 	ldrd	r2, r3, [r7]
 800588a:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 800588e:	430b      	orrs	r3, r1
 8005890:	d155      	bne.n	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x14a2>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8005892:	4b84      	ldr	r3, [pc, #528]	@ (8005aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 8005894:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005898:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800589c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800589e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058a0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80058a4:	d013      	beq.n	80058ce <HAL_RCCEx_GetPeriphCLKFreq+0x1432>
 80058a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058a8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80058ac:	d844      	bhi.n	8005938 <HAL_RCCEx_GetPeriphCLKFreq+0x149c>
 80058ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058b0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80058b4:	d013      	beq.n	80058de <HAL_RCCEx_GetPeriphCLKFreq+0x1442>
 80058b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058b8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80058bc:	d83c      	bhi.n	8005938 <HAL_RCCEx_GetPeriphCLKFreq+0x149c>
 80058be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d014      	beq.n	80058ee <HAL_RCCEx_GetPeriphCLKFreq+0x1452>
 80058c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058c6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80058ca:	d014      	beq.n	80058f6 <HAL_RCCEx_GetPeriphCLKFreq+0x145a>
 80058cc:	e034      	b.n	8005938 <HAL_RCCEx_GetPeriphCLKFreq+0x149c>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80058ce:	f107 0318 	add.w	r3, r7, #24
 80058d2:	4618      	mov	r0, r3
 80058d4:	f7fe fb2e 	bl	8003f34 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 80058d8:	69fb      	ldr	r3, [r7, #28]
 80058da:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80058dc:	e159      	b.n	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80058de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80058e2:	4618      	mov	r0, r3
 80058e4:	f7fe f9cc 	bl	8003c80 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 80058e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058ea:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80058ec:	e151      	b.n	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80058ee:	f7fd f8b1 	bl	8002a54 <HAL_RCC_GetSysClockFreq>
 80058f2:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80058f4:	e14d      	b.n	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80058f6:	4b6b      	ldr	r3, [pc, #428]	@ (8005aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f003 0320 	and.w	r3, r3, #32
 80058fe:	2b20      	cmp	r3, #32
 8005900:	d117      	bne.n	8005932 <HAL_RCCEx_GetPeriphCLKFreq+0x1496>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005902:	4b68      	ldr	r3, [pc, #416]	@ (8005aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 8005904:	689b      	ldr	r3, [r3, #8]
 8005906:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800590a:	2b00      	cmp	r3, #0
 800590c:	d005      	beq.n	800591a <HAL_RCCEx_GetPeriphCLKFreq+0x147e>
 800590e:	4b65      	ldr	r3, [pc, #404]	@ (8005aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 8005910:	689b      	ldr	r3, [r3, #8]
 8005912:	0e1b      	lsrs	r3, r3, #24
 8005914:	f003 030f 	and.w	r3, r3, #15
 8005918:	e006      	b.n	8005928 <HAL_RCCEx_GetPeriphCLKFreq+0x148c>
 800591a:	4b62      	ldr	r3, [pc, #392]	@ (8005aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800591c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005920:	041b      	lsls	r3, r3, #16
 8005922:	0e1b      	lsrs	r3, r3, #24
 8005924:	f003 030f 	and.w	r3, r3, #15
 8005928:	4a60      	ldr	r2, [pc, #384]	@ (8005aac <HAL_RCCEx_GetPeriphCLKFreq+0x1610>)
 800592a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800592e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005930:	e12f      	b.n	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 8005932:	2300      	movs	r3, #0
 8005934:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005936:	e12c      	b.n	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 8005938:	2300      	movs	r3, #0
 800593a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800593c:	e129      	b.n	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined(HSPI1)

  else if (PeriphClk == RCC_PERIPHCLK_HSPI)
 800593e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005942:	1e59      	subs	r1, r3, #1
 8005944:	ea52 0301 	orrs.w	r3, r2, r1
 8005948:	d13c      	bne.n	80059c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1528>
  {
    /* Get the current HSPI kernel source */
    srcclk = __HAL_RCC_GET_HSPI_SOURCE();
 800594a:	4b56      	ldr	r3, [pc, #344]	@ (8005aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800594c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005950:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8005954:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8005956:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005958:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800595c:	d027      	beq.n	80059ae <HAL_RCCEx_GetPeriphCLKFreq+0x1512>
 800595e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005960:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005964:	d82b      	bhi.n	80059be <HAL_RCCEx_GetPeriphCLKFreq+0x1522>
 8005966:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005968:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800596c:	d017      	beq.n	800599e <HAL_RCCEx_GetPeriphCLKFreq+0x1502>
 800596e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005970:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005974:	d823      	bhi.n	80059be <HAL_RCCEx_GetPeriphCLKFreq+0x1522>
 8005976:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005978:	2b00      	cmp	r3, #0
 800597a:	d004      	beq.n	8005986 <HAL_RCCEx_GetPeriphCLKFreq+0x14ea>
 800597c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800597e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005982:	d004      	beq.n	800598e <HAL_RCCEx_GetPeriphCLKFreq+0x14f2>
 8005984:	e01b      	b.n	80059be <HAL_RCCEx_GetPeriphCLKFreq+0x1522>
    {
      case RCC_HSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8005986:	f7fd f865 	bl	8002a54 <HAL_RCC_GetSysClockFreq>
 800598a:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800598c:	e101      	b.n	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_HSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800598e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005992:	4618      	mov	r0, r3
 8005994:	f7fe f974 	bl	8003c80 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8005998:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800599a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800599c:	e0f9      	b.n	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_HSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800599e:	f107 0318 	add.w	r3, r7, #24
 80059a2:	4618      	mov	r0, r3
 80059a4:	f7fe fac6 	bl	8003f34 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 80059a8:	69fb      	ldr	r3, [r7, #28]
 80059aa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80059ac:	e0f1      	b.n	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      case RCC_HSPICLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80059ae:	f107 030c 	add.w	r3, r7, #12
 80059b2:	4618      	mov	r0, r3
 80059b4:	f7fe fc18 	bl	80041e8 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_R_Frequency;
 80059b8:	697b      	ldr	r3, [r7, #20]
 80059ba:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80059bc:	e0e9      	b.n	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 80059be:	2300      	movs	r3, #0
 80059c0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80059c2:	e0e6      	b.n	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 80059c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80059c8:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 80059cc:	430b      	orrs	r3, r1
 80059ce:	d131      	bne.n	8005a34 <HAL_RCCEx_GetPeriphCLKFreq+0x1598>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 80059d0:	4b34      	ldr	r3, [pc, #208]	@ (8005aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 80059d2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80059d6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80059da:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 80059dc:	4b31      	ldr	r3, [pc, #196]	@ (8005aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 80059de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80059e2:	f003 0302 	and.w	r3, r3, #2
 80059e6:	2b02      	cmp	r3, #2
 80059e8:	d106      	bne.n	80059f8 <HAL_RCCEx_GetPeriphCLKFreq+0x155c>
 80059ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d103      	bne.n	80059f8 <HAL_RCCEx_GetPeriphCLKFreq+0x155c>
    {
      frequency = LSE_VALUE;
 80059f0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80059f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80059f6:	e0cc      	b.n	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 80059f8:	4b2a      	ldr	r3, [pc, #168]	@ (8005aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 80059fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80059fe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005a02:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005a06:	d112      	bne.n	8005a2e <HAL_RCCEx_GetPeriphCLKFreq+0x1592>
 8005a08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a0a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005a0e:	d10e      	bne.n	8005a2e <HAL_RCCEx_GetPeriphCLKFreq+0x1592>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005a10:	4b24      	ldr	r3, [pc, #144]	@ (8005aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 8005a12:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005a16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005a1a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005a1e:	d102      	bne.n	8005a26 <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
      {
        frequency = LSI_VALUE / 128U;
 8005a20:	23fa      	movs	r3, #250	@ 0xfa
 8005a22:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005a24:	e0b5      	b.n	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 8005a26:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8005a2a:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005a2c:	e0b1      	b.n	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 8005a2e:	2300      	movs	r3, #0
 8005a30:	637b      	str	r3, [r7, #52]	@ 0x34
 8005a32:	e0ae      	b.n	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 8005a34:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a38:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8005a3c:	430b      	orrs	r3, r1
 8005a3e:	d13b      	bne.n	8005ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x161c>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8005a40:	4b18      	ldr	r3, [pc, #96]	@ (8005aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 8005a42:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005a46:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8005a4a:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8005a4c:	4b15      	ldr	r3, [pc, #84]	@ (8005aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005a54:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005a58:	d105      	bne.n	8005a66 <HAL_RCCEx_GetPeriphCLKFreq+0x15ca>
 8005a5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d102      	bne.n	8005a66 <HAL_RCCEx_GetPeriphCLKFreq+0x15ca>
    {
      frequency = HSI48_VALUE;
 8005a60:	4b13      	ldr	r3, [pc, #76]	@ (8005ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x1614>)
 8005a62:	637b      	str	r3, [r7, #52]	@ 0x34
 8005a64:	e095      	b.n	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 8005a66:	4b0f      	ldr	r3, [pc, #60]	@ (8005aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005a6e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005a72:	d106      	bne.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x15e6>
 8005a74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a76:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a7a:	d102      	bne.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x15e6>
    {
      frequency = HSI48_VALUE >> 1U ;
 8005a7c:	4b0d      	ldr	r3, [pc, #52]	@ (8005ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x1618>)
 8005a7e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005a80:	e087      	b.n	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 8005a82:	4b08      	ldr	r3, [pc, #32]	@ (8005aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a8a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005a8e:	d106      	bne.n	8005a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1602>
 8005a90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a92:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005a96:	d102      	bne.n	8005a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1602>
    {
      frequency = HSI_VALUE;
 8005a98:	4b03      	ldr	r3, [pc, #12]	@ (8005aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 8005a9a:	637b      	str	r3, [r7, #52]	@ 0x34
 8005a9c:	e079      	b.n	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	637b      	str	r3, [r7, #52]	@ 0x34
 8005aa2:	e076      	b.n	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 8005aa4:	46020c00 	.word	0x46020c00
 8005aa8:	00f42400 	.word	0x00f42400
 8005aac:	08007f50 	.word	0x08007f50
 8005ab0:	02dc6c00 	.word	0x02dc6c00
 8005ab4:	016e3600 	.word	0x016e3600
    }
  }
#if defined(LTDC)
  else if (PeriphClk == RCC_PERIPHCLK_LTDC)
 8005ab8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005abc:	1e99      	subs	r1, r3, #2
 8005abe:	ea52 0301 	orrs.w	r3, r2, r1
 8005ac2:	d120      	bne.n	8005b06 <HAL_RCCEx_GetPeriphCLKFreq+0x166a>
  {
    /* Get the current LTDC kernel source */
    srcclk = __HAL_RCC_GET_LTDC_SOURCE();
 8005ac4:	4b35      	ldr	r3, [pc, #212]	@ (8005b9c <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 8005ac6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005aca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005ace:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8005ad0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d004      	beq.n	8005ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x1644>
 8005ad6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ad8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005adc:	d008      	beq.n	8005af0 <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
 8005ade:	e00f      	b.n	8005b00 <HAL_RCCEx_GetPeriphCLKFreq+0x1664>
    {
      case RCC_LTDCCLKSOURCE_PLL3:  /* PLL3R is the clock source for LTDC */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005ae0:	f107 030c 	add.w	r3, r7, #12
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	f7fe fb7f 	bl	80041e8 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_R_Frequency;
 8005aea:	697b      	ldr	r3, [r7, #20]
 8005aec:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005aee:	e050      	b.n	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_LTDCCLKSOURCE_PLL2:  /* PLL2R is the clock source for LTDC */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005af0:	f107 0318 	add.w	r3, r7, #24
 8005af4:	4618      	mov	r0, r3
 8005af6:	f7fe fa1d 	bl	8003f34 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_R_Frequency;
 8005afa:	6a3b      	ldr	r3, [r7, #32]
 8005afc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005afe:	e048      	b.n	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 8005b00:	2300      	movs	r3, #0
 8005b02:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005b04:	e045      	b.n	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
  }
#endif /* defined(LTDC) */

#if defined(USB_OTG_HS)

  else if (PeriphClk == RCC_PERIPHCLK_USBPHY)
 8005b06:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b0a:	f1a3 0108 	sub.w	r1, r3, #8
 8005b0e:	ea52 0301 	orrs.w	r3, r2, r1
 8005b12:	d13c      	bne.n	8005b8e <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
  {
    /* Get the current USB_OTG_HS kernel source */
    srcclk = __HAL_RCC_GET_USBPHY_SOURCE();
 8005b14:	4b21      	ldr	r3, [pc, #132]	@ (8005b9c <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 8005b16:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005b1a:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8005b1e:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE))
 8005b20:	4b1e      	ldr	r3, [pc, #120]	@ (8005b9c <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b28:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005b2c:	d105      	bne.n	8005b3a <HAL_RCCEx_GetPeriphCLKFreq+0x169e>
 8005b2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d102      	bne.n	8005b3a <HAL_RCCEx_GetPeriphCLKFreq+0x169e>
    {
      frequency = HSE_VALUE;
 8005b34:	4b1a      	ldr	r3, [pc, #104]	@ (8005ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x1704>)
 8005b36:	637b      	str	r3, [r7, #52]	@ 0x34
 8005b38:	e02b      	b.n	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE_DIV2))
 8005b3a:	4b18      	ldr	r3, [pc, #96]	@ (8005b9c <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b42:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005b46:	d106      	bne.n	8005b56 <HAL_RCCEx_GetPeriphCLKFreq+0x16ba>
 8005b48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b4a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005b4e:	d102      	bne.n	8005b56 <HAL_RCCEx_GetPeriphCLKFreq+0x16ba>
    {
      frequency = HSE_VALUE >> 1U ;
 8005b50:	4b14      	ldr	r3, [pc, #80]	@ (8005ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x1708>)
 8005b52:	637b      	str	r3, [r7, #52]	@ 0x34
 8005b54:	e01d      	b.n	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1) /* PLL1P */
 8005b56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b5c:	d107      	bne.n	8005b6e <HAL_RCCEx_GetPeriphCLKFreq+0x16d2>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005b5e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005b62:	4618      	mov	r0, r3
 8005b64:	f7fe f88c 	bl	8003c80 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8005b68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b6a:	637b      	str	r3, [r7, #52]	@ 0x34
 8005b6c:	e011      	b.n	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1_DIV2) /* PLL1P_DIV2 */
 8005b6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b70:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8005b74:	d108      	bne.n	8005b88 <HAL_RCCEx_GetPeriphCLKFreq+0x16ec>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005b76:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	f7fe f880 	bl	8003c80 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = (pll1_clocks.PLL1_P_Frequency) / 2U;
 8005b80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b82:	085b      	lsrs	r3, r3, #1
 8005b84:	637b      	str	r3, [r7, #52]	@ 0x34
 8005b86:	e004      	b.n	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USB_OTG_HS */
    else
    {
      frequency = 0U;
 8005b88:	2300      	movs	r3, #0
 8005b8a:	637b      	str	r3, [r7, #52]	@ 0x34
 8005b8c:	e001      	b.n	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 8005b8e:	2300      	movs	r3, #0
 8005b90:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  return (frequency);
 8005b92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8005b94:	4618      	mov	r0, r3
 8005b96:	3738      	adds	r7, #56	@ 0x38
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	bd80      	pop	{r7, pc}
 8005b9c:	46020c00 	.word	0x46020c00
 8005ba0:	00f42400 	.word	0x00f42400
 8005ba4:	007a1200 	.word	0x007a1200

08005ba8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b084      	sub	sp, #16
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 8005bb0:	4b47      	ldr	r3, [pc, #284]	@ (8005cd0 <RCCEx_PLL2_Config+0x128>)
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4a46      	ldr	r2, [pc, #280]	@ (8005cd0 <RCCEx_PLL2_Config+0x128>)
 8005bb6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005bba:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005bbc:	f7fb f8ec 	bl	8000d98 <HAL_GetTick>
 8005bc0:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005bc2:	e008      	b.n	8005bd6 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005bc4:	f7fb f8e8 	bl	8000d98 <HAL_GetTick>
 8005bc8:	4602      	mov	r2, r0
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	1ad3      	subs	r3, r2, r3
 8005bce:	2b02      	cmp	r3, #2
 8005bd0:	d901      	bls.n	8005bd6 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8005bd2:	2303      	movs	r3, #3
 8005bd4:	e077      	b.n	8005cc6 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005bd6:	4b3e      	ldr	r3, [pc, #248]	@ (8005cd0 <RCCEx_PLL2_Config+0x128>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d1f0      	bne.n	8005bc4 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8005be2:	4b3b      	ldr	r3, [pc, #236]	@ (8005cd0 <RCCEx_PLL2_Config+0x128>)
 8005be4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005be6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005bea:	f023 0303 	bic.w	r3, r3, #3
 8005bee:	687a      	ldr	r2, [r7, #4]
 8005bf0:	6811      	ldr	r1, [r2, #0]
 8005bf2:	687a      	ldr	r2, [r7, #4]
 8005bf4:	6852      	ldr	r2, [r2, #4]
 8005bf6:	3a01      	subs	r2, #1
 8005bf8:	0212      	lsls	r2, r2, #8
 8005bfa:	430a      	orrs	r2, r1
 8005bfc:	4934      	ldr	r1, [pc, #208]	@ (8005cd0 <RCCEx_PLL2_Config+0x128>)
 8005bfe:	4313      	orrs	r3, r2
 8005c00:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8005c02:	4b33      	ldr	r3, [pc, #204]	@ (8005cd0 <RCCEx_PLL2_Config+0x128>)
 8005c04:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005c06:	4b33      	ldr	r3, [pc, #204]	@ (8005cd4 <RCCEx_PLL2_Config+0x12c>)
 8005c08:	4013      	ands	r3, r2
 8005c0a:	687a      	ldr	r2, [r7, #4]
 8005c0c:	6892      	ldr	r2, [r2, #8]
 8005c0e:	3a01      	subs	r2, #1
 8005c10:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8005c14:	687a      	ldr	r2, [r7, #4]
 8005c16:	68d2      	ldr	r2, [r2, #12]
 8005c18:	3a01      	subs	r2, #1
 8005c1a:	0252      	lsls	r2, r2, #9
 8005c1c:	b292      	uxth	r2, r2
 8005c1e:	4311      	orrs	r1, r2
 8005c20:	687a      	ldr	r2, [r7, #4]
 8005c22:	6912      	ldr	r2, [r2, #16]
 8005c24:	3a01      	subs	r2, #1
 8005c26:	0412      	lsls	r2, r2, #16
 8005c28:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8005c2c:	4311      	orrs	r1, r2
 8005c2e:	687a      	ldr	r2, [r7, #4]
 8005c30:	6952      	ldr	r2, [r2, #20]
 8005c32:	3a01      	subs	r2, #1
 8005c34:	0612      	lsls	r2, r2, #24
 8005c36:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8005c3a:	430a      	orrs	r2, r1
 8005c3c:	4924      	ldr	r1, [pc, #144]	@ (8005cd0 <RCCEx_PLL2_Config+0x128>)
 8005c3e:	4313      	orrs	r3, r2
 8005c40:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8005c42:	4b23      	ldr	r3, [pc, #140]	@ (8005cd0 <RCCEx_PLL2_Config+0x128>)
 8005c44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c46:	f023 020c 	bic.w	r2, r3, #12
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	699b      	ldr	r3, [r3, #24]
 8005c4e:	4920      	ldr	r1, [pc, #128]	@ (8005cd0 <RCCEx_PLL2_Config+0x128>)
 8005c50:	4313      	orrs	r3, r2
 8005c52:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8005c54:	4b1e      	ldr	r3, [pc, #120]	@ (8005cd0 <RCCEx_PLL2_Config+0x128>)
 8005c56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6a1b      	ldr	r3, [r3, #32]
 8005c5c:	491c      	ldr	r1, [pc, #112]	@ (8005cd0 <RCCEx_PLL2_Config+0x128>)
 8005c5e:	4313      	orrs	r3, r2
 8005c60:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 8005c62:	4b1b      	ldr	r3, [pc, #108]	@ (8005cd0 <RCCEx_PLL2_Config+0x128>)
 8005c64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c66:	4a1a      	ldr	r2, [pc, #104]	@ (8005cd0 <RCCEx_PLL2_Config+0x128>)
 8005c68:	f023 0310 	bic.w	r3, r3, #16
 8005c6c:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005c6e:	4b18      	ldr	r3, [pc, #96]	@ (8005cd0 <RCCEx_PLL2_Config+0x128>)
 8005c70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c72:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005c76:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8005c7a:	687a      	ldr	r2, [r7, #4]
 8005c7c:	69d2      	ldr	r2, [r2, #28]
 8005c7e:	00d2      	lsls	r2, r2, #3
 8005c80:	4913      	ldr	r1, [pc, #76]	@ (8005cd0 <RCCEx_PLL2_Config+0x128>)
 8005c82:	4313      	orrs	r3, r2
 8005c84:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 8005c86:	4b12      	ldr	r3, [pc, #72]	@ (8005cd0 <RCCEx_PLL2_Config+0x128>)
 8005c88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c8a:	4a11      	ldr	r2, [pc, #68]	@ (8005cd0 <RCCEx_PLL2_Config+0x128>)
 8005c8c:	f043 0310 	orr.w	r3, r3, #16
 8005c90:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 8005c92:	4b0f      	ldr	r3, [pc, #60]	@ (8005cd0 <RCCEx_PLL2_Config+0x128>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4a0e      	ldr	r2, [pc, #56]	@ (8005cd0 <RCCEx_PLL2_Config+0x128>)
 8005c98:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005c9c:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005c9e:	f7fb f87b 	bl	8000d98 <HAL_GetTick>
 8005ca2:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005ca4:	e008      	b.n	8005cb8 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005ca6:	f7fb f877 	bl	8000d98 <HAL_GetTick>
 8005caa:	4602      	mov	r2, r0
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	1ad3      	subs	r3, r2, r3
 8005cb0:	2b02      	cmp	r3, #2
 8005cb2:	d901      	bls.n	8005cb8 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8005cb4:	2303      	movs	r3, #3
 8005cb6:	e006      	b.n	8005cc6 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005cb8:	4b05      	ldr	r3, [pc, #20]	@ (8005cd0 <RCCEx_PLL2_Config+0x128>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d0f0      	beq.n	8005ca6 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8005cc4:	2300      	movs	r3, #0

}
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	3710      	adds	r7, #16
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	bd80      	pop	{r7, pc}
 8005cce:	bf00      	nop
 8005cd0:	46020c00 	.word	0x46020c00
 8005cd4:	80800000 	.word	0x80800000

08005cd8 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b084      	sub	sp, #16
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8005ce0:	4b47      	ldr	r3, [pc, #284]	@ (8005e00 <RCCEx_PLL3_Config+0x128>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	4a46      	ldr	r2, [pc, #280]	@ (8005e00 <RCCEx_PLL3_Config+0x128>)
 8005ce6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005cea:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005cec:	f7fb f854 	bl	8000d98 <HAL_GetTick>
 8005cf0:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005cf2:	e008      	b.n	8005d06 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005cf4:	f7fb f850 	bl	8000d98 <HAL_GetTick>
 8005cf8:	4602      	mov	r2, r0
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	1ad3      	subs	r3, r2, r3
 8005cfe:	2b02      	cmp	r3, #2
 8005d00:	d901      	bls.n	8005d06 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8005d02:	2303      	movs	r3, #3
 8005d04:	e077      	b.n	8005df6 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005d06:	4b3e      	ldr	r3, [pc, #248]	@ (8005e00 <RCCEx_PLL3_Config+0x128>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d1f0      	bne.n	8005cf4 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8005d12:	4b3b      	ldr	r3, [pc, #236]	@ (8005e00 <RCCEx_PLL3_Config+0x128>)
 8005d14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d16:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005d1a:	f023 0303 	bic.w	r3, r3, #3
 8005d1e:	687a      	ldr	r2, [r7, #4]
 8005d20:	6811      	ldr	r1, [r2, #0]
 8005d22:	687a      	ldr	r2, [r7, #4]
 8005d24:	6852      	ldr	r2, [r2, #4]
 8005d26:	3a01      	subs	r2, #1
 8005d28:	0212      	lsls	r2, r2, #8
 8005d2a:	430a      	orrs	r2, r1
 8005d2c:	4934      	ldr	r1, [pc, #208]	@ (8005e00 <RCCEx_PLL3_Config+0x128>)
 8005d2e:	4313      	orrs	r3, r2
 8005d30:	630b      	str	r3, [r1, #48]	@ 0x30
 8005d32:	4b33      	ldr	r3, [pc, #204]	@ (8005e00 <RCCEx_PLL3_Config+0x128>)
 8005d34:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005d36:	4b33      	ldr	r3, [pc, #204]	@ (8005e04 <RCCEx_PLL3_Config+0x12c>)
 8005d38:	4013      	ands	r3, r2
 8005d3a:	687a      	ldr	r2, [r7, #4]
 8005d3c:	6892      	ldr	r2, [r2, #8]
 8005d3e:	3a01      	subs	r2, #1
 8005d40:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8005d44:	687a      	ldr	r2, [r7, #4]
 8005d46:	68d2      	ldr	r2, [r2, #12]
 8005d48:	3a01      	subs	r2, #1
 8005d4a:	0252      	lsls	r2, r2, #9
 8005d4c:	b292      	uxth	r2, r2
 8005d4e:	4311      	orrs	r1, r2
 8005d50:	687a      	ldr	r2, [r7, #4]
 8005d52:	6912      	ldr	r2, [r2, #16]
 8005d54:	3a01      	subs	r2, #1
 8005d56:	0412      	lsls	r2, r2, #16
 8005d58:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8005d5c:	4311      	orrs	r1, r2
 8005d5e:	687a      	ldr	r2, [r7, #4]
 8005d60:	6952      	ldr	r2, [r2, #20]
 8005d62:	3a01      	subs	r2, #1
 8005d64:	0612      	lsls	r2, r2, #24
 8005d66:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8005d6a:	430a      	orrs	r2, r1
 8005d6c:	4924      	ldr	r1, [pc, #144]	@ (8005e00 <RCCEx_PLL3_Config+0x128>)
 8005d6e:	4313      	orrs	r3, r2
 8005d70:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 8005d72:	4b23      	ldr	r3, [pc, #140]	@ (8005e00 <RCCEx_PLL3_Config+0x128>)
 8005d74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d76:	f023 020c 	bic.w	r2, r3, #12
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	699b      	ldr	r3, [r3, #24]
 8005d7e:	4920      	ldr	r1, [pc, #128]	@ (8005e00 <RCCEx_PLL3_Config+0x128>)
 8005d80:	4313      	orrs	r3, r2
 8005d82:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8005d84:	4b1e      	ldr	r3, [pc, #120]	@ (8005e00 <RCCEx_PLL3_Config+0x128>)
 8005d86:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6a1b      	ldr	r3, [r3, #32]
 8005d8c:	491c      	ldr	r1, [pc, #112]	@ (8005e00 <RCCEx_PLL3_Config+0x128>)
 8005d8e:	4313      	orrs	r3, r2
 8005d90:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 8005d92:	4b1b      	ldr	r3, [pc, #108]	@ (8005e00 <RCCEx_PLL3_Config+0x128>)
 8005d94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d96:	4a1a      	ldr	r2, [pc, #104]	@ (8005e00 <RCCEx_PLL3_Config+0x128>)
 8005d98:	f023 0310 	bic.w	r3, r3, #16
 8005d9c:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005d9e:	4b18      	ldr	r3, [pc, #96]	@ (8005e00 <RCCEx_PLL3_Config+0x128>)
 8005da0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005da2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005da6:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8005daa:	687a      	ldr	r2, [r7, #4]
 8005dac:	69d2      	ldr	r2, [r2, #28]
 8005dae:	00d2      	lsls	r2, r2, #3
 8005db0:	4913      	ldr	r1, [pc, #76]	@ (8005e00 <RCCEx_PLL3_Config+0x128>)
 8005db2:	4313      	orrs	r3, r2
 8005db4:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 8005db6:	4b12      	ldr	r3, [pc, #72]	@ (8005e00 <RCCEx_PLL3_Config+0x128>)
 8005db8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005dba:	4a11      	ldr	r2, [pc, #68]	@ (8005e00 <RCCEx_PLL3_Config+0x128>)
 8005dbc:	f043 0310 	orr.w	r3, r3, #16
 8005dc0:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 8005dc2:	4b0f      	ldr	r3, [pc, #60]	@ (8005e00 <RCCEx_PLL3_Config+0x128>)
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	4a0e      	ldr	r2, [pc, #56]	@ (8005e00 <RCCEx_PLL3_Config+0x128>)
 8005dc8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005dcc:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005dce:	f7fa ffe3 	bl	8000d98 <HAL_GetTick>
 8005dd2:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005dd4:	e008      	b.n	8005de8 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005dd6:	f7fa ffdf 	bl	8000d98 <HAL_GetTick>
 8005dda:	4602      	mov	r2, r0
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	1ad3      	subs	r3, r2, r3
 8005de0:	2b02      	cmp	r3, #2
 8005de2:	d901      	bls.n	8005de8 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8005de4:	2303      	movs	r3, #3
 8005de6:	e006      	b.n	8005df6 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005de8:	4b05      	ldr	r3, [pc, #20]	@ (8005e00 <RCCEx_PLL3_Config+0x128>)
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d0f0      	beq.n	8005dd6 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8005df4:	2300      	movs	r3, #0
}
 8005df6:	4618      	mov	r0, r3
 8005df8:	3710      	adds	r7, #16
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	bd80      	pop	{r7, pc}
 8005dfe:	bf00      	nop
 8005e00:	46020c00 	.word	0x46020c00
 8005e04:	80800000 	.word	0x80800000

08005e08 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b082      	sub	sp, #8
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d101      	bne.n	8005e1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005e16:	2301      	movs	r3, #1
 8005e18:	e042      	b.n	8005ea0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d106      	bne.n	8005e32 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2200      	movs	r2, #0
 8005e28:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005e2c:	6878      	ldr	r0, [r7, #4]
 8005e2e:	f7fa fd53 	bl	80008d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2224      	movs	r2, #36	@ 0x24
 8005e36:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	681a      	ldr	r2, [r3, #0]
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f022 0201 	bic.w	r2, r2, #1
 8005e48:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d002      	beq.n	8005e58 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005e52:	6878      	ldr	r0, [r7, #4]
 8005e54:	f000 fdaa 	bl	80069ac <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005e58:	6878      	ldr	r0, [r7, #4]
 8005e5a:	f000 fbf9 	bl	8006650 <UART_SetConfig>
 8005e5e:	4603      	mov	r3, r0
 8005e60:	2b01      	cmp	r3, #1
 8005e62:	d101      	bne.n	8005e68 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005e64:	2301      	movs	r3, #1
 8005e66:	e01b      	b.n	8005ea0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	685a      	ldr	r2, [r3, #4]
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005e76:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	689a      	ldr	r2, [r3, #8]
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005e86:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	681a      	ldr	r2, [r3, #0]
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f042 0201 	orr.w	r2, r2, #1
 8005e96:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005e98:	6878      	ldr	r0, [r7, #4]
 8005e9a:	f000 fe29 	bl	8006af0 <UART_CheckIdleState>
 8005e9e:	4603      	mov	r3, r0
}
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	3708      	adds	r7, #8
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	bd80      	pop	{r7, pc}

08005ea8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b08a      	sub	sp, #40	@ 0x28
 8005eac:	af02      	add	r7, sp, #8
 8005eae:	60f8      	str	r0, [r7, #12]
 8005eb0:	60b9      	str	r1, [r7, #8]
 8005eb2:	603b      	str	r3, [r7, #0]
 8005eb4:	4613      	mov	r3, r2
 8005eb6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ebe:	2b20      	cmp	r3, #32
 8005ec0:	d17b      	bne.n	8005fba <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ec2:	68bb      	ldr	r3, [r7, #8]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d002      	beq.n	8005ece <HAL_UART_Transmit+0x26>
 8005ec8:	88fb      	ldrh	r3, [r7, #6]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d101      	bne.n	8005ed2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005ece:	2301      	movs	r3, #1
 8005ed0:	e074      	b.n	8005fbc <HAL_UART_Transmit+0x114>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	2221      	movs	r2, #33	@ 0x21
 8005ede:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005ee2:	f7fa ff59 	bl	8000d98 <HAL_GetTick>
 8005ee6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	88fa      	ldrh	r2, [r7, #6]
 8005eec:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	88fa      	ldrh	r2, [r7, #6]
 8005ef4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	689b      	ldr	r3, [r3, #8]
 8005efc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f00:	d108      	bne.n	8005f14 <HAL_UART_Transmit+0x6c>
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	691b      	ldr	r3, [r3, #16]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d104      	bne.n	8005f14 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	61bb      	str	r3, [r7, #24]
 8005f12:	e003      	b.n	8005f1c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005f18:	2300      	movs	r3, #0
 8005f1a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005f1c:	e030      	b.n	8005f80 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	9300      	str	r3, [sp, #0]
 8005f22:	697b      	ldr	r3, [r7, #20]
 8005f24:	2200      	movs	r2, #0
 8005f26:	2180      	movs	r1, #128	@ 0x80
 8005f28:	68f8      	ldr	r0, [r7, #12]
 8005f2a:	f000 fe8b 	bl	8006c44 <UART_WaitOnFlagUntilTimeout>
 8005f2e:	4603      	mov	r3, r0
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d005      	beq.n	8005f40 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	2220      	movs	r2, #32
 8005f38:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8005f3c:	2303      	movs	r3, #3
 8005f3e:	e03d      	b.n	8005fbc <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005f40:	69fb      	ldr	r3, [r7, #28]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d10b      	bne.n	8005f5e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005f46:	69bb      	ldr	r3, [r7, #24]
 8005f48:	881b      	ldrh	r3, [r3, #0]
 8005f4a:	461a      	mov	r2, r3
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005f54:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005f56:	69bb      	ldr	r3, [r7, #24]
 8005f58:	3302      	adds	r3, #2
 8005f5a:	61bb      	str	r3, [r7, #24]
 8005f5c:	e007      	b.n	8005f6e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005f5e:	69fb      	ldr	r3, [r7, #28]
 8005f60:	781a      	ldrb	r2, [r3, #0]
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005f68:	69fb      	ldr	r3, [r7, #28]
 8005f6a:	3301      	adds	r3, #1
 8005f6c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005f74:	b29b      	uxth	r3, r3
 8005f76:	3b01      	subs	r3, #1
 8005f78:	b29a      	uxth	r2, r3
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005f86:	b29b      	uxth	r3, r3
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d1c8      	bne.n	8005f1e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	9300      	str	r3, [sp, #0]
 8005f90:	697b      	ldr	r3, [r7, #20]
 8005f92:	2200      	movs	r2, #0
 8005f94:	2140      	movs	r1, #64	@ 0x40
 8005f96:	68f8      	ldr	r0, [r7, #12]
 8005f98:	f000 fe54 	bl	8006c44 <UART_WaitOnFlagUntilTimeout>
 8005f9c:	4603      	mov	r3, r0
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d005      	beq.n	8005fae <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	2220      	movs	r2, #32
 8005fa6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8005faa:	2303      	movs	r3, #3
 8005fac:	e006      	b.n	8005fbc <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	2220      	movs	r2, #32
 8005fb2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	e000      	b.n	8005fbc <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8005fba:	2302      	movs	r3, #2
  }
}
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	3720      	adds	r7, #32
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	bd80      	pop	{r7, pc}

08005fc4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b0ba      	sub	sp, #232	@ 0xe8
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	69db      	ldr	r3, [r3, #28]
 8005fd2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	689b      	ldr	r3, [r3, #8]
 8005fe6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005fea:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8005fee:	f640 030f 	movw	r3, #2063	@ 0x80f
 8005ff2:	4013      	ands	r3, r2
 8005ff4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8005ff8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d11b      	bne.n	8006038 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006000:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006004:	f003 0320 	and.w	r3, r3, #32
 8006008:	2b00      	cmp	r3, #0
 800600a:	d015      	beq.n	8006038 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800600c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006010:	f003 0320 	and.w	r3, r3, #32
 8006014:	2b00      	cmp	r3, #0
 8006016:	d105      	bne.n	8006024 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006018:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800601c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006020:	2b00      	cmp	r3, #0
 8006022:	d009      	beq.n	8006038 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006028:	2b00      	cmp	r3, #0
 800602a:	f000 82e5 	beq.w	80065f8 <HAL_UART_IRQHandler+0x634>
      {
        huart->RxISR(huart);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006032:	6878      	ldr	r0, [r7, #4]
 8006034:	4798      	blx	r3
      }
      return;
 8006036:	e2df      	b.n	80065f8 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006038:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800603c:	2b00      	cmp	r3, #0
 800603e:	f000 8123 	beq.w	8006288 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006042:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006046:	4b8d      	ldr	r3, [pc, #564]	@ (800627c <HAL_UART_IRQHandler+0x2b8>)
 8006048:	4013      	ands	r3, r2
 800604a:	2b00      	cmp	r3, #0
 800604c:	d106      	bne.n	800605c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800604e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8006052:	4b8b      	ldr	r3, [pc, #556]	@ (8006280 <HAL_UART_IRQHandler+0x2bc>)
 8006054:	4013      	ands	r3, r2
 8006056:	2b00      	cmp	r3, #0
 8006058:	f000 8116 	beq.w	8006288 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800605c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006060:	f003 0301 	and.w	r3, r3, #1
 8006064:	2b00      	cmp	r3, #0
 8006066:	d011      	beq.n	800608c <HAL_UART_IRQHandler+0xc8>
 8006068:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800606c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006070:	2b00      	cmp	r3, #0
 8006072:	d00b      	beq.n	800608c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	2201      	movs	r2, #1
 800607a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006082:	f043 0201 	orr.w	r2, r3, #1
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800608c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006090:	f003 0302 	and.w	r3, r3, #2
 8006094:	2b00      	cmp	r3, #0
 8006096:	d011      	beq.n	80060bc <HAL_UART_IRQHandler+0xf8>
 8006098:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800609c:	f003 0301 	and.w	r3, r3, #1
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d00b      	beq.n	80060bc <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	2202      	movs	r2, #2
 80060aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060b2:	f043 0204 	orr.w	r2, r3, #4
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80060bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80060c0:	f003 0304 	and.w	r3, r3, #4
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d011      	beq.n	80060ec <HAL_UART_IRQHandler+0x128>
 80060c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80060cc:	f003 0301 	and.w	r3, r3, #1
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d00b      	beq.n	80060ec <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	2204      	movs	r2, #4
 80060da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060e2:	f043 0202 	orr.w	r2, r3, #2
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80060ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80060f0:	f003 0308 	and.w	r3, r3, #8
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d017      	beq.n	8006128 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80060f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80060fc:	f003 0320 	and.w	r3, r3, #32
 8006100:	2b00      	cmp	r3, #0
 8006102:	d105      	bne.n	8006110 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006104:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006108:	4b5c      	ldr	r3, [pc, #368]	@ (800627c <HAL_UART_IRQHandler+0x2b8>)
 800610a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800610c:	2b00      	cmp	r3, #0
 800610e:	d00b      	beq.n	8006128 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	2208      	movs	r2, #8
 8006116:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800611e:	f043 0208 	orr.w	r2, r3, #8
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006128:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800612c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006130:	2b00      	cmp	r3, #0
 8006132:	d012      	beq.n	800615a <HAL_UART_IRQHandler+0x196>
 8006134:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006138:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800613c:	2b00      	cmp	r3, #0
 800613e:	d00c      	beq.n	800615a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006148:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006150:	f043 0220 	orr.w	r2, r3, #32
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006160:	2b00      	cmp	r3, #0
 8006162:	f000 824b 	beq.w	80065fc <HAL_UART_IRQHandler+0x638>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006166:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800616a:	f003 0320 	and.w	r3, r3, #32
 800616e:	2b00      	cmp	r3, #0
 8006170:	d013      	beq.n	800619a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006172:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006176:	f003 0320 	and.w	r3, r3, #32
 800617a:	2b00      	cmp	r3, #0
 800617c:	d105      	bne.n	800618a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800617e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006182:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006186:	2b00      	cmp	r3, #0
 8006188:	d007      	beq.n	800619a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800618e:	2b00      	cmp	r3, #0
 8006190:	d003      	beq.n	800619a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006196:	6878      	ldr	r0, [r7, #4]
 8006198:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80061a0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	689b      	ldr	r3, [r3, #8]
 80061aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061ae:	2b40      	cmp	r3, #64	@ 0x40
 80061b0:	d005      	beq.n	80061be <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80061b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80061b6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d054      	beq.n	8006268 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80061be:	6878      	ldr	r0, [r7, #4]
 80061c0:	f000 fdad 	bl	8006d1e <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	689b      	ldr	r3, [r3, #8]
 80061ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061ce:	2b40      	cmp	r3, #64	@ 0x40
 80061d0:	d146      	bne.n	8006260 <HAL_UART_IRQHandler+0x29c>
        {
#if !defined(USART_DMAREQUESTS_SW_WA)
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	3308      	adds	r3, #8
 80061d8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061dc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80061e0:	e853 3f00 	ldrex	r3, [r3]
 80061e4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80061e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80061ec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80061f0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	3308      	adds	r3, #8
 80061fa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80061fe:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006202:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006206:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800620a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800620e:	e841 2300 	strex	r3, r2, [r1]
 8006212:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006216:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800621a:	2b00      	cmp	r3, #0
 800621c:	d1d9      	bne.n	80061d2 <HAL_UART_IRQHandler+0x20e>

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006224:	2b00      	cmp	r3, #0
 8006226:	d017      	beq.n	8006258 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800622e:	4a15      	ldr	r2, [pc, #84]	@ (8006284 <HAL_UART_IRQHandler+0x2c0>)
 8006230:	66da      	str	r2, [r3, #108]	@ 0x6c

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006238:	4618      	mov	r0, r3
 800623a:	f7fa ffed 	bl	8001218 <HAL_DMA_Abort_IT>
 800623e:	4603      	mov	r3, r0
 8006240:	2b00      	cmp	r3, #0
 8006242:	d019      	beq.n	8006278 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800624a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800624c:	687a      	ldr	r2, [r7, #4]
 800624e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8006252:	4610      	mov	r0, r2
 8006254:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006256:	e00f      	b.n	8006278 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006258:	6878      	ldr	r0, [r7, #4]
 800625a:	f000 f9e3 	bl	8006624 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800625e:	e00b      	b.n	8006278 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006260:	6878      	ldr	r0, [r7, #4]
 8006262:	f000 f9df 	bl	8006624 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006266:	e007      	b.n	8006278 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006268:	6878      	ldr	r0, [r7, #4]
 800626a:	f000 f9db 	bl	8006624 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2200      	movs	r2, #0
 8006272:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8006276:	e1c1      	b.n	80065fc <HAL_UART_IRQHandler+0x638>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006278:	bf00      	nop
    return;
 800627a:	e1bf      	b.n	80065fc <HAL_UART_IRQHandler+0x638>
 800627c:	10000001 	.word	0x10000001
 8006280:	04000120 	.word	0x04000120
 8006284:	08006deb 	.word	0x08006deb

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800628c:	2b01      	cmp	r3, #1
 800628e:	f040 816a 	bne.w	8006566 <HAL_UART_IRQHandler+0x5a2>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006292:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006296:	f003 0310 	and.w	r3, r3, #16
 800629a:	2b00      	cmp	r3, #0
 800629c:	f000 8163 	beq.w	8006566 <HAL_UART_IRQHandler+0x5a2>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80062a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80062a4:	f003 0310 	and.w	r3, r3, #16
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	f000 815c 	beq.w	8006566 <HAL_UART_IRQHandler+0x5a2>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	2210      	movs	r2, #16
 80062b4:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	689b      	ldr	r3, [r3, #8]
 80062bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062c0:	2b40      	cmp	r3, #64	@ 0x40
 80062c2:	f040 80d2 	bne.w	800646a <HAL_UART_IRQHandler+0x4a6>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80062d0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80062d4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80062d8:	2b00      	cmp	r3, #0
 80062da:	f000 80ac 	beq.w	8006436 <HAL_UART_IRQHandler+0x472>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80062e4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80062e8:	429a      	cmp	r2, r3
 80062ea:	f080 80a4 	bcs.w	8006436 <HAL_UART_IRQHandler+0x472>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80062f4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Mode != DMA_LINKEDLIST_CIRCULAR)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80062fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006300:	2b81      	cmp	r3, #129	@ 0x81
 8006302:	f000 8087 	beq.w	8006414 <HAL_UART_IRQHandler+0x450>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800630e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006312:	e853 3f00 	ldrex	r3, [r3]
 8006316:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800631a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800631e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006322:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	461a      	mov	r2, r3
 800632c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006330:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006334:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006338:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800633c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006340:	e841 2300 	strex	r3, r2, [r1]
 8006344:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006348:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800634c:	2b00      	cmp	r3, #0
 800634e:	d1da      	bne.n	8006306 <HAL_UART_IRQHandler+0x342>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	3308      	adds	r3, #8
 8006356:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006358:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800635a:	e853 3f00 	ldrex	r3, [r3]
 800635e:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006360:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006362:	f023 0301 	bic.w	r3, r3, #1
 8006366:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	3308      	adds	r3, #8
 8006370:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006374:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006378:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800637a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800637c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006380:	e841 2300 	strex	r3, r2, [r1]
 8006384:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006386:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006388:	2b00      	cmp	r3, #0
 800638a:	d1e1      	bne.n	8006350 <HAL_UART_IRQHandler+0x38c>

#if !defined(USART_DMAREQUESTS_SW_WA)
          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	3308      	adds	r3, #8
 8006392:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006394:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006396:	e853 3f00 	ldrex	r3, [r3]
 800639a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800639c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800639e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80063a2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	3308      	adds	r3, #8
 80063ac:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80063b0:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80063b2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063b4:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80063b6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80063b8:	e841 2300 	strex	r3, r2, [r1]
 80063bc:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80063be:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d1e3      	bne.n	800638c <HAL_UART_IRQHandler+0x3c8>

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2220      	movs	r2, #32
 80063c8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2200      	movs	r2, #0
 80063d0:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80063da:	e853 3f00 	ldrex	r3, [r3]
 80063de:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80063e0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80063e2:	f023 0310 	bic.w	r3, r3, #16
 80063e6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	461a      	mov	r2, r3
 80063f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80063f4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80063f6:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063f8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80063fa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80063fc:	e841 2300 	strex	r3, r2, [r1]
 8006400:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006402:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006404:	2b00      	cmp	r3, #0
 8006406:	d1e4      	bne.n	80063d2 <HAL_UART_IRQHandler+0x40e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800640e:	4618      	mov	r0, r3
 8006410:	f7fa fe86 	bl	8001120 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2202      	movs	r2, #2
 8006418:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006426:	b29b      	uxth	r3, r3
 8006428:	1ad3      	subs	r3, r2, r3
 800642a:	b29b      	uxth	r3, r3
 800642c:	4619      	mov	r1, r3
 800642e:	6878      	ldr	r0, [r7, #4]
 8006430:	f000 f902 	bl	8006638 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8006434:	e0e4      	b.n	8006600 <HAL_UART_IRQHandler+0x63c>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800643c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006440:	429a      	cmp	r2, r3
 8006442:	f040 80dd 	bne.w	8006600 <HAL_UART_IRQHandler+0x63c>
          if (huart->hdmarx->Mode == DMA_LINKEDLIST_CIRCULAR)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800644c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800644e:	2b81      	cmp	r3, #129	@ 0x81
 8006450:	f040 80d6 	bne.w	8006600 <HAL_UART_IRQHandler+0x63c>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2202      	movs	r2, #2
 8006458:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006460:	4619      	mov	r1, r3
 8006462:	6878      	ldr	r0, [r7, #4]
 8006464:	f000 f8e8 	bl	8006638 <HAL_UARTEx_RxEventCallback>
      return;
 8006468:	e0ca      	b.n	8006600 <HAL_UART_IRQHandler+0x63c>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006476:	b29b      	uxth	r3, r3
 8006478:	1ad3      	subs	r3, r2, r3
 800647a:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006484:	b29b      	uxth	r3, r3
 8006486:	2b00      	cmp	r3, #0
 8006488:	f000 80bc 	beq.w	8006604 <HAL_UART_IRQHandler+0x640>
          && (nb_rx_data > 0U))
 800648c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006490:	2b00      	cmp	r3, #0
 8006492:	f000 80b7 	beq.w	8006604 <HAL_UART_IRQHandler+0x640>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800649c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800649e:	e853 3f00 	ldrex	r3, [r3]
 80064a2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80064a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064a6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80064aa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	461a      	mov	r2, r3
 80064b4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80064b8:	647b      	str	r3, [r7, #68]	@ 0x44
 80064ba:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064bc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80064be:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80064c0:	e841 2300 	strex	r3, r2, [r1]
 80064c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80064c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d1e4      	bne.n	8006496 <HAL_UART_IRQHandler+0x4d2>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	3308      	adds	r3, #8
 80064d2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064d6:	e853 3f00 	ldrex	r3, [r3]
 80064da:	623b      	str	r3, [r7, #32]
   return(result);
 80064dc:	6a3b      	ldr	r3, [r7, #32]
 80064de:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80064e2:	f023 0301 	bic.w	r3, r3, #1
 80064e6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	3308      	adds	r3, #8
 80064f0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80064f4:	633a      	str	r2, [r7, #48]	@ 0x30
 80064f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064f8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80064fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80064fc:	e841 2300 	strex	r3, r2, [r1]
 8006500:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006502:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006504:	2b00      	cmp	r3, #0
 8006506:	d1e1      	bne.n	80064cc <HAL_UART_IRQHandler+0x508>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2220      	movs	r2, #32
 800650c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2200      	movs	r2, #0
 8006514:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2200      	movs	r2, #0
 800651a:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006522:	693b      	ldr	r3, [r7, #16]
 8006524:	e853 3f00 	ldrex	r3, [r3]
 8006528:	60fb      	str	r3, [r7, #12]
   return(result);
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	f023 0310 	bic.w	r3, r3, #16
 8006530:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	461a      	mov	r2, r3
 800653a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800653e:	61fb      	str	r3, [r7, #28]
 8006540:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006542:	69b9      	ldr	r1, [r7, #24]
 8006544:	69fa      	ldr	r2, [r7, #28]
 8006546:	e841 2300 	strex	r3, r2, [r1]
 800654a:	617b      	str	r3, [r7, #20]
   return(result);
 800654c:	697b      	ldr	r3, [r7, #20]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d1e4      	bne.n	800651c <HAL_UART_IRQHandler+0x558>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	2202      	movs	r2, #2
 8006556:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006558:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800655c:	4619      	mov	r1, r3
 800655e:	6878      	ldr	r0, [r7, #4]
 8006560:	f000 f86a 	bl	8006638 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006564:	e04e      	b.n	8006604 <HAL_UART_IRQHandler+0x640>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006566:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800656a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800656e:	2b00      	cmp	r3, #0
 8006570:	d014      	beq.n	800659c <HAL_UART_IRQHandler+0x5d8>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006572:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006576:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800657a:	2b00      	cmp	r3, #0
 800657c:	d105      	bne.n	800658a <HAL_UART_IRQHandler+0x5c6>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800657e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006582:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006586:	2b00      	cmp	r3, #0
 8006588:	d008      	beq.n	800659c <HAL_UART_IRQHandler+0x5d8>
  {
    if (huart->TxISR != NULL)
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800658e:	2b00      	cmp	r3, #0
 8006590:	d03a      	beq.n	8006608 <HAL_UART_IRQHandler+0x644>
    {
      huart->TxISR(huart);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006596:	6878      	ldr	r0, [r7, #4]
 8006598:	4798      	blx	r3
    }
    return;
 800659a:	e035      	b.n	8006608 <HAL_UART_IRQHandler+0x644>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800659c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80065a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d009      	beq.n	80065bc <HAL_UART_IRQHandler+0x5f8>
 80065a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80065ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d003      	beq.n	80065bc <HAL_UART_IRQHandler+0x5f8>
  {
    UART_EndTransmit_IT(huart);
 80065b4:	6878      	ldr	r0, [r7, #4]
 80065b6:	f000 fc2a 	bl	8006e0e <UART_EndTransmit_IT>
    return;
 80065ba:	e026      	b.n	800660a <HAL_UART_IRQHandler+0x646>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80065bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80065c0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d009      	beq.n	80065dc <HAL_UART_IRQHandler+0x618>
 80065c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80065cc:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d003      	beq.n	80065dc <HAL_UART_IRQHandler+0x618>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80065d4:	6878      	ldr	r0, [r7, #4]
 80065d6:	f000 fc4f 	bl	8006e78 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80065da:	e016      	b.n	800660a <HAL_UART_IRQHandler+0x646>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80065dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80065e0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d010      	beq.n	800660a <HAL_UART_IRQHandler+0x646>
 80065e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	da0c      	bge.n	800660a <HAL_UART_IRQHandler+0x646>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80065f0:	6878      	ldr	r0, [r7, #4]
 80065f2:	f000 fc37 	bl	8006e64 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80065f6:	e008      	b.n	800660a <HAL_UART_IRQHandler+0x646>
      return;
 80065f8:	bf00      	nop
 80065fa:	e006      	b.n	800660a <HAL_UART_IRQHandler+0x646>
    return;
 80065fc:	bf00      	nop
 80065fe:	e004      	b.n	800660a <HAL_UART_IRQHandler+0x646>
      return;
 8006600:	bf00      	nop
 8006602:	e002      	b.n	800660a <HAL_UART_IRQHandler+0x646>
      return;
 8006604:	bf00      	nop
 8006606:	e000      	b.n	800660a <HAL_UART_IRQHandler+0x646>
    return;
 8006608:	bf00      	nop
  }
}
 800660a:	37e8      	adds	r7, #232	@ 0xe8
 800660c:	46bd      	mov	sp, r7
 800660e:	bd80      	pop	{r7, pc}

08006610 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006610:	b480      	push	{r7}
 8006612:	b083      	sub	sp, #12
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006618:	bf00      	nop
 800661a:	370c      	adds	r7, #12
 800661c:	46bd      	mov	sp, r7
 800661e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006622:	4770      	bx	lr

08006624 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006624:	b480      	push	{r7}
 8006626:	b083      	sub	sp, #12
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800662c:	bf00      	nop
 800662e:	370c      	adds	r7, #12
 8006630:	46bd      	mov	sp, r7
 8006632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006636:	4770      	bx	lr

08006638 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006638:	b480      	push	{r7}
 800663a:	b083      	sub	sp, #12
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
 8006640:	460b      	mov	r3, r1
 8006642:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006644:	bf00      	nop
 8006646:	370c      	adds	r7, #12
 8006648:	46bd      	mov	sp, r7
 800664a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664e:	4770      	bx	lr

08006650 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006650:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006654:	b094      	sub	sp, #80	@ 0x50
 8006656:	af00      	add	r7, sp, #0
 8006658:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800665a:	2300      	movs	r3, #0
 800665c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8006660:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006662:	681a      	ldr	r2, [r3, #0]
 8006664:	4b83      	ldr	r3, [pc, #524]	@ (8006874 <UART_SetConfig+0x224>)
 8006666:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006668:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800666a:	689a      	ldr	r2, [r3, #8]
 800666c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800666e:	691b      	ldr	r3, [r3, #16]
 8006670:	431a      	orrs	r2, r3
 8006672:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006674:	695b      	ldr	r3, [r3, #20]
 8006676:	431a      	orrs	r2, r3
 8006678:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800667a:	69db      	ldr	r3, [r3, #28]
 800667c:	4313      	orrs	r3, r2
 800667e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006680:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	497c      	ldr	r1, [pc, #496]	@ (8006878 <UART_SetConfig+0x228>)
 8006688:	4019      	ands	r1, r3
 800668a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800668c:	681a      	ldr	r2, [r3, #0]
 800668e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006690:	430b      	orrs	r3, r1
 8006692:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006694:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	685b      	ldr	r3, [r3, #4]
 800669a:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800669e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066a0:	68d9      	ldr	r1, [r3, #12]
 80066a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066a4:	681a      	ldr	r2, [r3, #0]
 80066a6:	ea40 0301 	orr.w	r3, r0, r1
 80066aa:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80066ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066ae:	699b      	ldr	r3, [r3, #24]
 80066b0:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80066b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066b4:	681a      	ldr	r2, [r3, #0]
 80066b6:	4b6f      	ldr	r3, [pc, #444]	@ (8006874 <UART_SetConfig+0x224>)
 80066b8:	429a      	cmp	r2, r3
 80066ba:	d009      	beq.n	80066d0 <UART_SetConfig+0x80>
 80066bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066be:	681a      	ldr	r2, [r3, #0]
 80066c0:	4b6e      	ldr	r3, [pc, #440]	@ (800687c <UART_SetConfig+0x22c>)
 80066c2:	429a      	cmp	r2, r3
 80066c4:	d004      	beq.n	80066d0 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80066c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066c8:	6a1a      	ldr	r2, [r3, #32]
 80066ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80066cc:	4313      	orrs	r3, r2
 80066ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80066d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	689b      	ldr	r3, [r3, #8]
 80066d6:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 80066da:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 80066de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066e0:	681a      	ldr	r2, [r3, #0]
 80066e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80066e4:	430b      	orrs	r3, r1
 80066e6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80066e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066ee:	f023 000f 	bic.w	r0, r3, #15
 80066f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066f4:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80066f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066f8:	681a      	ldr	r2, [r3, #0]
 80066fa:	ea40 0301 	orr.w	r3, r0, r1
 80066fe:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006700:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006702:	681a      	ldr	r2, [r3, #0]
 8006704:	4b5e      	ldr	r3, [pc, #376]	@ (8006880 <UART_SetConfig+0x230>)
 8006706:	429a      	cmp	r2, r3
 8006708:	d102      	bne.n	8006710 <UART_SetConfig+0xc0>
 800670a:	2301      	movs	r3, #1
 800670c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800670e:	e032      	b.n	8006776 <UART_SetConfig+0x126>
 8006710:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006712:	681a      	ldr	r2, [r3, #0]
 8006714:	4b5b      	ldr	r3, [pc, #364]	@ (8006884 <UART_SetConfig+0x234>)
 8006716:	429a      	cmp	r2, r3
 8006718:	d102      	bne.n	8006720 <UART_SetConfig+0xd0>
 800671a:	2302      	movs	r3, #2
 800671c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800671e:	e02a      	b.n	8006776 <UART_SetConfig+0x126>
 8006720:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006722:	681a      	ldr	r2, [r3, #0]
 8006724:	4b58      	ldr	r3, [pc, #352]	@ (8006888 <UART_SetConfig+0x238>)
 8006726:	429a      	cmp	r2, r3
 8006728:	d102      	bne.n	8006730 <UART_SetConfig+0xe0>
 800672a:	2304      	movs	r3, #4
 800672c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800672e:	e022      	b.n	8006776 <UART_SetConfig+0x126>
 8006730:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006732:	681a      	ldr	r2, [r3, #0]
 8006734:	4b55      	ldr	r3, [pc, #340]	@ (800688c <UART_SetConfig+0x23c>)
 8006736:	429a      	cmp	r2, r3
 8006738:	d102      	bne.n	8006740 <UART_SetConfig+0xf0>
 800673a:	2308      	movs	r3, #8
 800673c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800673e:	e01a      	b.n	8006776 <UART_SetConfig+0x126>
 8006740:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006742:	681a      	ldr	r2, [r3, #0]
 8006744:	4b52      	ldr	r3, [pc, #328]	@ (8006890 <UART_SetConfig+0x240>)
 8006746:	429a      	cmp	r2, r3
 8006748:	d102      	bne.n	8006750 <UART_SetConfig+0x100>
 800674a:	2310      	movs	r3, #16
 800674c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800674e:	e012      	b.n	8006776 <UART_SetConfig+0x126>
 8006750:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006752:	681a      	ldr	r2, [r3, #0]
 8006754:	4b4f      	ldr	r3, [pc, #316]	@ (8006894 <UART_SetConfig+0x244>)
 8006756:	429a      	cmp	r2, r3
 8006758:	d103      	bne.n	8006762 <UART_SetConfig+0x112>
 800675a:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800675e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006760:	e009      	b.n	8006776 <UART_SetConfig+0x126>
 8006762:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006764:	681a      	ldr	r2, [r3, #0]
 8006766:	4b43      	ldr	r3, [pc, #268]	@ (8006874 <UART_SetConfig+0x224>)
 8006768:	429a      	cmp	r2, r3
 800676a:	d102      	bne.n	8006772 <UART_SetConfig+0x122>
 800676c:	2320      	movs	r3, #32
 800676e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006770:	e001      	b.n	8006776 <UART_SetConfig+0x126>
 8006772:	2300      	movs	r3, #0
 8006774:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006776:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006778:	681a      	ldr	r2, [r3, #0]
 800677a:	4b3e      	ldr	r3, [pc, #248]	@ (8006874 <UART_SetConfig+0x224>)
 800677c:	429a      	cmp	r2, r3
 800677e:	d005      	beq.n	800678c <UART_SetConfig+0x13c>
 8006780:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006782:	681a      	ldr	r2, [r3, #0]
 8006784:	4b3d      	ldr	r3, [pc, #244]	@ (800687c <UART_SetConfig+0x22c>)
 8006786:	429a      	cmp	r2, r3
 8006788:	f040 8088 	bne.w	800689c <UART_SetConfig+0x24c>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800678c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800678e:	2200      	movs	r2, #0
 8006790:	623b      	str	r3, [r7, #32]
 8006792:	627a      	str	r2, [r7, #36]	@ 0x24
 8006794:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8006798:	f7fd fe80 	bl	800449c <HAL_RCCEx_GetPeriphCLKFreq>
 800679c:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800679e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	f000 80eb 	beq.w	800697c <UART_SetConfig+0x32c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80067a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067aa:	4a3b      	ldr	r2, [pc, #236]	@ (8006898 <UART_SetConfig+0x248>)
 80067ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80067b0:	461a      	mov	r2, r3
 80067b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80067b4:	fbb3 f3f2 	udiv	r3, r3, r2
 80067b8:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80067ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067bc:	685a      	ldr	r2, [r3, #4]
 80067be:	4613      	mov	r3, r2
 80067c0:	005b      	lsls	r3, r3, #1
 80067c2:	4413      	add	r3, r2
 80067c4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80067c6:	429a      	cmp	r2, r3
 80067c8:	d305      	bcc.n	80067d6 <UART_SetConfig+0x186>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80067ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067cc:	685b      	ldr	r3, [r3, #4]
 80067ce:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80067d0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80067d2:	429a      	cmp	r2, r3
 80067d4:	d903      	bls.n	80067de <UART_SetConfig+0x18e>
      {
        ret = HAL_ERROR;
 80067d6:	2301      	movs	r3, #1
 80067d8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80067dc:	e048      	b.n	8006870 <UART_SetConfig+0x220>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80067de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80067e0:	2200      	movs	r2, #0
 80067e2:	61bb      	str	r3, [r7, #24]
 80067e4:	61fa      	str	r2, [r7, #28]
 80067e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067ea:	4a2b      	ldr	r2, [pc, #172]	@ (8006898 <UART_SetConfig+0x248>)
 80067ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80067f0:	b29b      	uxth	r3, r3
 80067f2:	2200      	movs	r2, #0
 80067f4:	613b      	str	r3, [r7, #16]
 80067f6:	617a      	str	r2, [r7, #20]
 80067f8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80067fc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006800:	f7f9 fd58 	bl	80002b4 <__aeabi_uldivmod>
 8006804:	4602      	mov	r2, r0
 8006806:	460b      	mov	r3, r1
 8006808:	4610      	mov	r0, r2
 800680a:	4619      	mov	r1, r3
 800680c:	f04f 0200 	mov.w	r2, #0
 8006810:	f04f 0300 	mov.w	r3, #0
 8006814:	020b      	lsls	r3, r1, #8
 8006816:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800681a:	0202      	lsls	r2, r0, #8
 800681c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800681e:	6849      	ldr	r1, [r1, #4]
 8006820:	0849      	lsrs	r1, r1, #1
 8006822:	2000      	movs	r0, #0
 8006824:	460c      	mov	r4, r1
 8006826:	4605      	mov	r5, r0
 8006828:	eb12 0804 	adds.w	r8, r2, r4
 800682c:	eb43 0905 	adc.w	r9, r3, r5
 8006830:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006832:	685b      	ldr	r3, [r3, #4]
 8006834:	2200      	movs	r2, #0
 8006836:	60bb      	str	r3, [r7, #8]
 8006838:	60fa      	str	r2, [r7, #12]
 800683a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800683e:	4640      	mov	r0, r8
 8006840:	4649      	mov	r1, r9
 8006842:	f7f9 fd37 	bl	80002b4 <__aeabi_uldivmod>
 8006846:	4602      	mov	r2, r0
 8006848:	460b      	mov	r3, r1
 800684a:	4613      	mov	r3, r2
 800684c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800684e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006850:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006854:	d308      	bcc.n	8006868 <UART_SetConfig+0x218>
 8006856:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006858:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800685c:	d204      	bcs.n	8006868 <UART_SetConfig+0x218>
        {
          huart->Instance->BRR = usartdiv;
 800685e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006864:	60da      	str	r2, [r3, #12]
 8006866:	e003      	b.n	8006870 <UART_SetConfig+0x220>
        }
        else
        {
          ret = HAL_ERROR;
 8006868:	2301      	movs	r3, #1
 800686a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 800686e:	e085      	b.n	800697c <UART_SetConfig+0x32c>
 8006870:	e084      	b.n	800697c <UART_SetConfig+0x32c>
 8006872:	bf00      	nop
 8006874:	46002400 	.word	0x46002400
 8006878:	cfff69f3 	.word	0xcfff69f3
 800687c:	56002400 	.word	0x56002400
 8006880:	40013800 	.word	0x40013800
 8006884:	40004400 	.word	0x40004400
 8006888:	40004800 	.word	0x40004800
 800688c:	40004c00 	.word	0x40004c00
 8006890:	40005000 	.word	0x40005000
 8006894:	40006400 	.word	0x40006400
 8006898:	08008010 	.word	0x08008010
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800689c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800689e:	69db      	ldr	r3, [r3, #28]
 80068a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80068a4:	d13c      	bne.n	8006920 <UART_SetConfig+0x2d0>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80068a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80068a8:	2200      	movs	r2, #0
 80068aa:	603b      	str	r3, [r7, #0]
 80068ac:	607a      	str	r2, [r7, #4]
 80068ae:	e9d7 0100 	ldrd	r0, r1, [r7]
 80068b2:	f7fd fdf3 	bl	800449c <HAL_RCCEx_GetPeriphCLKFreq>
 80068b6:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80068b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d05e      	beq.n	800697c <UART_SetConfig+0x32c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80068be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068c2:	4a39      	ldr	r2, [pc, #228]	@ (80069a8 <UART_SetConfig+0x358>)
 80068c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80068c8:	461a      	mov	r2, r3
 80068ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80068cc:	fbb3 f3f2 	udiv	r3, r3, r2
 80068d0:	005a      	lsls	r2, r3, #1
 80068d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068d4:	685b      	ldr	r3, [r3, #4]
 80068d6:	085b      	lsrs	r3, r3, #1
 80068d8:	441a      	add	r2, r3
 80068da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068dc:	685b      	ldr	r3, [r3, #4]
 80068de:	fbb2 f3f3 	udiv	r3, r2, r3
 80068e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80068e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80068e6:	2b0f      	cmp	r3, #15
 80068e8:	d916      	bls.n	8006918 <UART_SetConfig+0x2c8>
 80068ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80068ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80068f0:	d212      	bcs.n	8006918 <UART_SetConfig+0x2c8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80068f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80068f4:	b29b      	uxth	r3, r3
 80068f6:	f023 030f 	bic.w	r3, r3, #15
 80068fa:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80068fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80068fe:	085b      	lsrs	r3, r3, #1
 8006900:	b29b      	uxth	r3, r3
 8006902:	f003 0307 	and.w	r3, r3, #7
 8006906:	b29a      	uxth	r2, r3
 8006908:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800690a:	4313      	orrs	r3, r2
 800690c:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 800690e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8006914:	60da      	str	r2, [r3, #12]
 8006916:	e031      	b.n	800697c <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 8006918:	2301      	movs	r3, #1
 800691a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800691e:	e02d      	b.n	800697c <UART_SetConfig+0x32c>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8006920:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006922:	2200      	movs	r2, #0
 8006924:	469a      	mov	sl, r3
 8006926:	4693      	mov	fp, r2
 8006928:	4650      	mov	r0, sl
 800692a:	4659      	mov	r1, fp
 800692c:	f7fd fdb6 	bl	800449c <HAL_RCCEx_GetPeriphCLKFreq>
 8006930:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 8006932:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006934:	2b00      	cmp	r3, #0
 8006936:	d021      	beq.n	800697c <UART_SetConfig+0x32c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006938:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800693a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800693c:	4a1a      	ldr	r2, [pc, #104]	@ (80069a8 <UART_SetConfig+0x358>)
 800693e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006942:	461a      	mov	r2, r3
 8006944:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006946:	fbb3 f2f2 	udiv	r2, r3, r2
 800694a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800694c:	685b      	ldr	r3, [r3, #4]
 800694e:	085b      	lsrs	r3, r3, #1
 8006950:	441a      	add	r2, r3
 8006952:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006954:	685b      	ldr	r3, [r3, #4]
 8006956:	fbb2 f3f3 	udiv	r3, r2, r3
 800695a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800695c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800695e:	2b0f      	cmp	r3, #15
 8006960:	d909      	bls.n	8006976 <UART_SetConfig+0x326>
 8006962:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006964:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006968:	d205      	bcs.n	8006976 <UART_SetConfig+0x326>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800696a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800696c:	b29a      	uxth	r2, r3
 800696e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	60da      	str	r2, [r3, #12]
 8006974:	e002      	b.n	800697c <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 8006976:	2301      	movs	r3, #1
 8006978:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800697c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800697e:	2201      	movs	r2, #1
 8006980:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006984:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006986:	2201      	movs	r2, #1
 8006988:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800698c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800698e:	2200      	movs	r2, #0
 8006990:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006992:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006994:	2200      	movs	r2, #0
 8006996:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006998:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800699c:	4618      	mov	r0, r3
 800699e:	3750      	adds	r7, #80	@ 0x50
 80069a0:	46bd      	mov	sp, r7
 80069a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80069a6:	bf00      	nop
 80069a8:	08008010 	.word	0x08008010

080069ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80069ac:	b480      	push	{r7}
 80069ae:	b083      	sub	sp, #12
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069b8:	f003 0308 	and.w	r3, r3, #8
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d00a      	beq.n	80069d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	685b      	ldr	r3, [r3, #4]
 80069c6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	430a      	orrs	r2, r1
 80069d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069da:	f003 0301 	and.w	r3, r3, #1
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d00a      	beq.n	80069f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	685b      	ldr	r3, [r3, #4]
 80069e8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	430a      	orrs	r2, r1
 80069f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069fc:	f003 0302 	and.w	r3, r3, #2
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d00a      	beq.n	8006a1a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	685b      	ldr	r3, [r3, #4]
 8006a0a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	430a      	orrs	r2, r1
 8006a18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a1e:	f003 0304 	and.w	r3, r3, #4
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d00a      	beq.n	8006a3c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	685b      	ldr	r3, [r3, #4]
 8006a2c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	430a      	orrs	r2, r1
 8006a3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a40:	f003 0310 	and.w	r3, r3, #16
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d00a      	beq.n	8006a5e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	689b      	ldr	r3, [r3, #8]
 8006a4e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	430a      	orrs	r2, r1
 8006a5c:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a62:	f003 0320 	and.w	r3, r3, #32
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d00a      	beq.n	8006a80 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	689b      	ldr	r3, [r3, #8]
 8006a70:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	430a      	orrs	r2, r1
 8006a7e:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d01a      	beq.n	8006ac2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	685b      	ldr	r3, [r3, #4]
 8006a92:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	430a      	orrs	r2, r1
 8006aa0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006aa6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006aaa:	d10a      	bne.n	8006ac2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	685b      	ldr	r3, [r3, #4]
 8006ab2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	430a      	orrs	r2, r1
 8006ac0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ac6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d00a      	beq.n	8006ae4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	685b      	ldr	r3, [r3, #4]
 8006ad4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	430a      	orrs	r2, r1
 8006ae2:	605a      	str	r2, [r3, #4]
  }
}
 8006ae4:	bf00      	nop
 8006ae6:	370c      	adds	r7, #12
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aee:	4770      	bx	lr

08006af0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b098      	sub	sp, #96	@ 0x60
 8006af4:	af02      	add	r7, sp, #8
 8006af6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2200      	movs	r2, #0
 8006afc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006b00:	f7fa f94a 	bl	8000d98 <HAL_GetTick>
 8006b04:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f003 0308 	and.w	r3, r3, #8
 8006b10:	2b08      	cmp	r3, #8
 8006b12:	d12f      	bne.n	8006b74 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b14:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006b18:	9300      	str	r3, [sp, #0]
 8006b1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006b22:	6878      	ldr	r0, [r7, #4]
 8006b24:	f000 f88e 	bl	8006c44 <UART_WaitOnFlagUntilTimeout>
 8006b28:	4603      	mov	r3, r0
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d022      	beq.n	8006b74 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b36:	e853 3f00 	ldrex	r3, [r3]
 8006b3a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006b3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b3e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006b42:	653b      	str	r3, [r7, #80]	@ 0x50
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	461a      	mov	r2, r3
 8006b4a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006b4c:	647b      	str	r3, [r7, #68]	@ 0x44
 8006b4e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b50:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006b52:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006b54:	e841 2300 	strex	r3, r2, [r1]
 8006b58:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006b5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d1e6      	bne.n	8006b2e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2220      	movs	r2, #32
 8006b64:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b70:	2303      	movs	r3, #3
 8006b72:	e063      	b.n	8006c3c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f003 0304 	and.w	r3, r3, #4
 8006b7e:	2b04      	cmp	r3, #4
 8006b80:	d149      	bne.n	8006c16 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b82:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006b86:	9300      	str	r3, [sp, #0]
 8006b88:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006b90:	6878      	ldr	r0, [r7, #4]
 8006b92:	f000 f857 	bl	8006c44 <UART_WaitOnFlagUntilTimeout>
 8006b96:	4603      	mov	r3, r0
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d03c      	beq.n	8006c16 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ba2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ba4:	e853 3f00 	ldrex	r3, [r3]
 8006ba8:	623b      	str	r3, [r7, #32]
   return(result);
 8006baa:	6a3b      	ldr	r3, [r7, #32]
 8006bac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006bb0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	461a      	mov	r2, r3
 8006bb8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006bba:	633b      	str	r3, [r7, #48]	@ 0x30
 8006bbc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bbe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006bc0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006bc2:	e841 2300 	strex	r3, r2, [r1]
 8006bc6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006bc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d1e6      	bne.n	8006b9c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	3308      	adds	r3, #8
 8006bd4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bd6:	693b      	ldr	r3, [r7, #16]
 8006bd8:	e853 3f00 	ldrex	r3, [r3]
 8006bdc:	60fb      	str	r3, [r7, #12]
   return(result);
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	f023 0301 	bic.w	r3, r3, #1
 8006be4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	3308      	adds	r3, #8
 8006bec:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006bee:	61fa      	str	r2, [r7, #28]
 8006bf0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bf2:	69b9      	ldr	r1, [r7, #24]
 8006bf4:	69fa      	ldr	r2, [r7, #28]
 8006bf6:	e841 2300 	strex	r3, r2, [r1]
 8006bfa:	617b      	str	r3, [r7, #20]
   return(result);
 8006bfc:	697b      	ldr	r3, [r7, #20]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d1e5      	bne.n	8006bce <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2220      	movs	r2, #32
 8006c06:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006c12:	2303      	movs	r3, #3
 8006c14:	e012      	b.n	8006c3c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	2220      	movs	r2, #32
 8006c1a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2220      	movs	r2, #32
 8006c22:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2200      	movs	r2, #0
 8006c2a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2200      	movs	r2, #0
 8006c30:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	2200      	movs	r2, #0
 8006c36:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006c3a:	2300      	movs	r3, #0
}
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	3758      	adds	r7, #88	@ 0x58
 8006c40:	46bd      	mov	sp, r7
 8006c42:	bd80      	pop	{r7, pc}

08006c44 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b084      	sub	sp, #16
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	60f8      	str	r0, [r7, #12]
 8006c4c:	60b9      	str	r1, [r7, #8]
 8006c4e:	603b      	str	r3, [r7, #0]
 8006c50:	4613      	mov	r3, r2
 8006c52:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c54:	e04f      	b.n	8006cf6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c56:	69bb      	ldr	r3, [r7, #24]
 8006c58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c5c:	d04b      	beq.n	8006cf6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c5e:	f7fa f89b 	bl	8000d98 <HAL_GetTick>
 8006c62:	4602      	mov	r2, r0
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	1ad3      	subs	r3, r2, r3
 8006c68:	69ba      	ldr	r2, [r7, #24]
 8006c6a:	429a      	cmp	r2, r3
 8006c6c:	d302      	bcc.n	8006c74 <UART_WaitOnFlagUntilTimeout+0x30>
 8006c6e:	69bb      	ldr	r3, [r7, #24]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d101      	bne.n	8006c78 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006c74:	2303      	movs	r3, #3
 8006c76:	e04e      	b.n	8006d16 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f003 0304 	and.w	r3, r3, #4
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d037      	beq.n	8006cf6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006c86:	68bb      	ldr	r3, [r7, #8]
 8006c88:	2b80      	cmp	r3, #128	@ 0x80
 8006c8a:	d034      	beq.n	8006cf6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006c8c:	68bb      	ldr	r3, [r7, #8]
 8006c8e:	2b40      	cmp	r3, #64	@ 0x40
 8006c90:	d031      	beq.n	8006cf6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	69db      	ldr	r3, [r3, #28]
 8006c98:	f003 0308 	and.w	r3, r3, #8
 8006c9c:	2b08      	cmp	r3, #8
 8006c9e:	d110      	bne.n	8006cc2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	2208      	movs	r2, #8
 8006ca6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006ca8:	68f8      	ldr	r0, [r7, #12]
 8006caa:	f000 f838 	bl	8006d1e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	2208      	movs	r2, #8
 8006cb2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	2200      	movs	r2, #0
 8006cba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006cbe:	2301      	movs	r3, #1
 8006cc0:	e029      	b.n	8006d16 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	69db      	ldr	r3, [r3, #28]
 8006cc8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006ccc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006cd0:	d111      	bne.n	8006cf6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006cda:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006cdc:	68f8      	ldr	r0, [r7, #12]
 8006cde:	f000 f81e 	bl	8006d1e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	2220      	movs	r2, #32
 8006ce6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	2200      	movs	r2, #0
 8006cee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006cf2:	2303      	movs	r3, #3
 8006cf4:	e00f      	b.n	8006d16 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	69da      	ldr	r2, [r3, #28]
 8006cfc:	68bb      	ldr	r3, [r7, #8]
 8006cfe:	4013      	ands	r3, r2
 8006d00:	68ba      	ldr	r2, [r7, #8]
 8006d02:	429a      	cmp	r2, r3
 8006d04:	bf0c      	ite	eq
 8006d06:	2301      	moveq	r3, #1
 8006d08:	2300      	movne	r3, #0
 8006d0a:	b2db      	uxtb	r3, r3
 8006d0c:	461a      	mov	r2, r3
 8006d0e:	79fb      	ldrb	r3, [r7, #7]
 8006d10:	429a      	cmp	r2, r3
 8006d12:	d0a0      	beq.n	8006c56 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006d14:	2300      	movs	r3, #0
}
 8006d16:	4618      	mov	r0, r3
 8006d18:	3710      	adds	r7, #16
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	bd80      	pop	{r7, pc}

08006d1e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006d1e:	b480      	push	{r7}
 8006d20:	b095      	sub	sp, #84	@ 0x54
 8006d22:	af00      	add	r7, sp, #0
 8006d24:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d2e:	e853 3f00 	ldrex	r3, [r3]
 8006d32:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006d34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d36:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006d3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	461a      	mov	r2, r3
 8006d42:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006d44:	643b      	str	r3, [r7, #64]	@ 0x40
 8006d46:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d48:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006d4a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006d4c:	e841 2300 	strex	r3, r2, [r1]
 8006d50:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006d52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d1e6      	bne.n	8006d26 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	3308      	adds	r3, #8
 8006d5e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d60:	6a3b      	ldr	r3, [r7, #32]
 8006d62:	e853 3f00 	ldrex	r3, [r3]
 8006d66:	61fb      	str	r3, [r7, #28]
   return(result);
 8006d68:	69fb      	ldr	r3, [r7, #28]
 8006d6a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006d6e:	f023 0301 	bic.w	r3, r3, #1
 8006d72:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	3308      	adds	r3, #8
 8006d7a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006d7c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006d7e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d80:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006d82:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006d84:	e841 2300 	strex	r3, r2, [r1]
 8006d88:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006d8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d1e3      	bne.n	8006d58 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006d94:	2b01      	cmp	r3, #1
 8006d96:	d118      	bne.n	8006dca <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	e853 3f00 	ldrex	r3, [r3]
 8006da4:	60bb      	str	r3, [r7, #8]
   return(result);
 8006da6:	68bb      	ldr	r3, [r7, #8]
 8006da8:	f023 0310 	bic.w	r3, r3, #16
 8006dac:	647b      	str	r3, [r7, #68]	@ 0x44
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	461a      	mov	r2, r3
 8006db4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006db6:	61bb      	str	r3, [r7, #24]
 8006db8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dba:	6979      	ldr	r1, [r7, #20]
 8006dbc:	69ba      	ldr	r2, [r7, #24]
 8006dbe:	e841 2300 	strex	r3, r2, [r1]
 8006dc2:	613b      	str	r3, [r7, #16]
   return(result);
 8006dc4:	693b      	ldr	r3, [r7, #16]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d1e6      	bne.n	8006d98 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2220      	movs	r2, #32
 8006dce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2200      	movs	r2, #0
 8006ddc:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006dde:	bf00      	nop
 8006de0:	3754      	adds	r7, #84	@ 0x54
 8006de2:	46bd      	mov	sp, r7
 8006de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de8:	4770      	bx	lr

08006dea <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006dea:	b580      	push	{r7, lr}
 8006dec:	b084      	sub	sp, #16
 8006dee:	af00      	add	r7, sp, #0
 8006df0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006df6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006e00:	68f8      	ldr	r0, [r7, #12]
 8006e02:	f7ff fc0f 	bl	8006624 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006e06:	bf00      	nop
 8006e08:	3710      	adds	r7, #16
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	bd80      	pop	{r7, pc}

08006e0e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006e0e:	b580      	push	{r7, lr}
 8006e10:	b088      	sub	sp, #32
 8006e12:	af00      	add	r7, sp, #0
 8006e14:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	e853 3f00 	ldrex	r3, [r3]
 8006e22:	60bb      	str	r3, [r7, #8]
   return(result);
 8006e24:	68bb      	ldr	r3, [r7, #8]
 8006e26:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006e2a:	61fb      	str	r3, [r7, #28]
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	461a      	mov	r2, r3
 8006e32:	69fb      	ldr	r3, [r7, #28]
 8006e34:	61bb      	str	r3, [r7, #24]
 8006e36:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e38:	6979      	ldr	r1, [r7, #20]
 8006e3a:	69ba      	ldr	r2, [r7, #24]
 8006e3c:	e841 2300 	strex	r3, r2, [r1]
 8006e40:	613b      	str	r3, [r7, #16]
   return(result);
 8006e42:	693b      	ldr	r3, [r7, #16]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d1e6      	bne.n	8006e16 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2220      	movs	r2, #32
 8006e4c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2200      	movs	r2, #0
 8006e54:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006e56:	6878      	ldr	r0, [r7, #4]
 8006e58:	f7ff fbda 	bl	8006610 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006e5c:	bf00      	nop
 8006e5e:	3720      	adds	r7, #32
 8006e60:	46bd      	mov	sp, r7
 8006e62:	bd80      	pop	{r7, pc}

08006e64 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006e64:	b480      	push	{r7}
 8006e66:	b083      	sub	sp, #12
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006e6c:	bf00      	nop
 8006e6e:	370c      	adds	r7, #12
 8006e70:	46bd      	mov	sp, r7
 8006e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e76:	4770      	bx	lr

08006e78 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006e78:	b480      	push	{r7}
 8006e7a:	b083      	sub	sp, #12
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006e80:	bf00      	nop
 8006e82:	370c      	adds	r7, #12
 8006e84:	46bd      	mov	sp, r7
 8006e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8a:	4770      	bx	lr

08006e8c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006e8c:	b480      	push	{r7}
 8006e8e:	b085      	sub	sp, #20
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006e9a:	2b01      	cmp	r3, #1
 8006e9c:	d101      	bne.n	8006ea2 <HAL_UARTEx_DisableFifoMode+0x16>
 8006e9e:	2302      	movs	r3, #2
 8006ea0:	e027      	b.n	8006ef2 <HAL_UARTEx_DisableFifoMode+0x66>
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2201      	movs	r2, #1
 8006ea6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2224      	movs	r2, #36	@ 0x24
 8006eae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	681a      	ldr	r2, [r3, #0]
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f022 0201 	bic.w	r2, r2, #1
 8006ec8:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006ed0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	68fa      	ldr	r2, [r7, #12]
 8006ede:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2220      	movs	r2, #32
 8006ee4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2200      	movs	r2, #0
 8006eec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006ef0:	2300      	movs	r3, #0
}
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	3714      	adds	r7, #20
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efc:	4770      	bx	lr

08006efe <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006efe:	b580      	push	{r7, lr}
 8006f00:	b084      	sub	sp, #16
 8006f02:	af00      	add	r7, sp, #0
 8006f04:	6078      	str	r0, [r7, #4]
 8006f06:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006f0e:	2b01      	cmp	r3, #1
 8006f10:	d101      	bne.n	8006f16 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006f12:	2302      	movs	r3, #2
 8006f14:	e02d      	b.n	8006f72 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2201      	movs	r2, #1
 8006f1a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2224      	movs	r2, #36	@ 0x24
 8006f22:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	681a      	ldr	r2, [r3, #0]
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f022 0201 	bic.w	r2, r2, #1
 8006f3c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	689b      	ldr	r3, [r3, #8]
 8006f44:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	683a      	ldr	r2, [r7, #0]
 8006f4e:	430a      	orrs	r2, r1
 8006f50:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006f52:	6878      	ldr	r0, [r7, #4]
 8006f54:	f000 f850 	bl	8006ff8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	68fa      	ldr	r2, [r7, #12]
 8006f5e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2220      	movs	r2, #32
 8006f64:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006f70:	2300      	movs	r3, #0
}
 8006f72:	4618      	mov	r0, r3
 8006f74:	3710      	adds	r7, #16
 8006f76:	46bd      	mov	sp, r7
 8006f78:	bd80      	pop	{r7, pc}

08006f7a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006f7a:	b580      	push	{r7, lr}
 8006f7c:	b084      	sub	sp, #16
 8006f7e:	af00      	add	r7, sp, #0
 8006f80:	6078      	str	r0, [r7, #4]
 8006f82:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006f8a:	2b01      	cmp	r3, #1
 8006f8c:	d101      	bne.n	8006f92 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006f8e:	2302      	movs	r3, #2
 8006f90:	e02d      	b.n	8006fee <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2201      	movs	r2, #1
 8006f96:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2224      	movs	r2, #36	@ 0x24
 8006f9e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	681a      	ldr	r2, [r3, #0]
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f022 0201 	bic.w	r2, r2, #1
 8006fb8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	689b      	ldr	r3, [r3, #8]
 8006fc0:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	683a      	ldr	r2, [r7, #0]
 8006fca:	430a      	orrs	r2, r1
 8006fcc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006fce:	6878      	ldr	r0, [r7, #4]
 8006fd0:	f000 f812 	bl	8006ff8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	68fa      	ldr	r2, [r7, #12]
 8006fda:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2220      	movs	r2, #32
 8006fe0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006fec:	2300      	movs	r3, #0
}
 8006fee:	4618      	mov	r0, r3
 8006ff0:	3710      	adds	r7, #16
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	bd80      	pop	{r7, pc}
	...

08006ff8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006ff8:	b480      	push	{r7}
 8006ffa:	b085      	sub	sp, #20
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007004:	2b00      	cmp	r3, #0
 8007006:	d108      	bne.n	800701a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2201      	movs	r2, #1
 800700c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2201      	movs	r2, #1
 8007014:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007018:	e031      	b.n	800707e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800701a:	2308      	movs	r3, #8
 800701c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800701e:	2308      	movs	r3, #8
 8007020:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	689b      	ldr	r3, [r3, #8]
 8007028:	0e5b      	lsrs	r3, r3, #25
 800702a:	b2db      	uxtb	r3, r3
 800702c:	f003 0307 	and.w	r3, r3, #7
 8007030:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	689b      	ldr	r3, [r3, #8]
 8007038:	0f5b      	lsrs	r3, r3, #29
 800703a:	b2db      	uxtb	r3, r3
 800703c:	f003 0307 	and.w	r3, r3, #7
 8007040:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007042:	7bbb      	ldrb	r3, [r7, #14]
 8007044:	7b3a      	ldrb	r2, [r7, #12]
 8007046:	4911      	ldr	r1, [pc, #68]	@ (800708c <UARTEx_SetNbDataToProcess+0x94>)
 8007048:	5c8a      	ldrb	r2, [r1, r2]
 800704a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800704e:	7b3a      	ldrb	r2, [r7, #12]
 8007050:	490f      	ldr	r1, [pc, #60]	@ (8007090 <UARTEx_SetNbDataToProcess+0x98>)
 8007052:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007054:	fb93 f3f2 	sdiv	r3, r3, r2
 8007058:	b29a      	uxth	r2, r3
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007060:	7bfb      	ldrb	r3, [r7, #15]
 8007062:	7b7a      	ldrb	r2, [r7, #13]
 8007064:	4909      	ldr	r1, [pc, #36]	@ (800708c <UARTEx_SetNbDataToProcess+0x94>)
 8007066:	5c8a      	ldrb	r2, [r1, r2]
 8007068:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800706c:	7b7a      	ldrb	r2, [r7, #13]
 800706e:	4908      	ldr	r1, [pc, #32]	@ (8007090 <UARTEx_SetNbDataToProcess+0x98>)
 8007070:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007072:	fb93 f3f2 	sdiv	r3, r3, r2
 8007076:	b29a      	uxth	r2, r3
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800707e:	bf00      	nop
 8007080:	3714      	adds	r7, #20
 8007082:	46bd      	mov	sp, r7
 8007084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007088:	4770      	bx	lr
 800708a:	bf00      	nop
 800708c:	08008028 	.word	0x08008028
 8007090:	08008030 	.word	0x08008030

08007094 <std>:
 8007094:	2300      	movs	r3, #0
 8007096:	b510      	push	{r4, lr}
 8007098:	4604      	mov	r4, r0
 800709a:	6083      	str	r3, [r0, #8]
 800709c:	8181      	strh	r1, [r0, #12]
 800709e:	4619      	mov	r1, r3
 80070a0:	6643      	str	r3, [r0, #100]	@ 0x64
 80070a2:	81c2      	strh	r2, [r0, #14]
 80070a4:	2208      	movs	r2, #8
 80070a6:	6183      	str	r3, [r0, #24]
 80070a8:	e9c0 3300 	strd	r3, r3, [r0]
 80070ac:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80070b0:	305c      	adds	r0, #92	@ 0x5c
 80070b2:	f000 f906 	bl	80072c2 <memset>
 80070b6:	4b0d      	ldr	r3, [pc, #52]	@ (80070ec <std+0x58>)
 80070b8:	6224      	str	r4, [r4, #32]
 80070ba:	6263      	str	r3, [r4, #36]	@ 0x24
 80070bc:	4b0c      	ldr	r3, [pc, #48]	@ (80070f0 <std+0x5c>)
 80070be:	62a3      	str	r3, [r4, #40]	@ 0x28
 80070c0:	4b0c      	ldr	r3, [pc, #48]	@ (80070f4 <std+0x60>)
 80070c2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80070c4:	4b0c      	ldr	r3, [pc, #48]	@ (80070f8 <std+0x64>)
 80070c6:	6323      	str	r3, [r4, #48]	@ 0x30
 80070c8:	4b0c      	ldr	r3, [pc, #48]	@ (80070fc <std+0x68>)
 80070ca:	429c      	cmp	r4, r3
 80070cc:	d006      	beq.n	80070dc <std+0x48>
 80070ce:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80070d2:	4294      	cmp	r4, r2
 80070d4:	d002      	beq.n	80070dc <std+0x48>
 80070d6:	33d0      	adds	r3, #208	@ 0xd0
 80070d8:	429c      	cmp	r4, r3
 80070da:	d105      	bne.n	80070e8 <std+0x54>
 80070dc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80070e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80070e4:	f000 b966 	b.w	80073b4 <__retarget_lock_init_recursive>
 80070e8:	bd10      	pop	{r4, pc}
 80070ea:	bf00      	nop
 80070ec:	0800723d 	.word	0x0800723d
 80070f0:	0800725f 	.word	0x0800725f
 80070f4:	08007297 	.word	0x08007297
 80070f8:	080072bb 	.word	0x080072bb
 80070fc:	20000124 	.word	0x20000124

08007100 <stdio_exit_handler>:
 8007100:	4a02      	ldr	r2, [pc, #8]	@ (800710c <stdio_exit_handler+0xc>)
 8007102:	4903      	ldr	r1, [pc, #12]	@ (8007110 <stdio_exit_handler+0x10>)
 8007104:	4803      	ldr	r0, [pc, #12]	@ (8007114 <stdio_exit_handler+0x14>)
 8007106:	f000 b869 	b.w	80071dc <_fwalk_sglue>
 800710a:	bf00      	nop
 800710c:	2000000c 	.word	0x2000000c
 8007110:	08007c5d 	.word	0x08007c5d
 8007114:	2000001c 	.word	0x2000001c

08007118 <cleanup_stdio>:
 8007118:	6841      	ldr	r1, [r0, #4]
 800711a:	4b0c      	ldr	r3, [pc, #48]	@ (800714c <cleanup_stdio+0x34>)
 800711c:	4299      	cmp	r1, r3
 800711e:	b510      	push	{r4, lr}
 8007120:	4604      	mov	r4, r0
 8007122:	d001      	beq.n	8007128 <cleanup_stdio+0x10>
 8007124:	f000 fd9a 	bl	8007c5c <_fflush_r>
 8007128:	68a1      	ldr	r1, [r4, #8]
 800712a:	4b09      	ldr	r3, [pc, #36]	@ (8007150 <cleanup_stdio+0x38>)
 800712c:	4299      	cmp	r1, r3
 800712e:	d002      	beq.n	8007136 <cleanup_stdio+0x1e>
 8007130:	4620      	mov	r0, r4
 8007132:	f000 fd93 	bl	8007c5c <_fflush_r>
 8007136:	68e1      	ldr	r1, [r4, #12]
 8007138:	4b06      	ldr	r3, [pc, #24]	@ (8007154 <cleanup_stdio+0x3c>)
 800713a:	4299      	cmp	r1, r3
 800713c:	d004      	beq.n	8007148 <cleanup_stdio+0x30>
 800713e:	4620      	mov	r0, r4
 8007140:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007144:	f000 bd8a 	b.w	8007c5c <_fflush_r>
 8007148:	bd10      	pop	{r4, pc}
 800714a:	bf00      	nop
 800714c:	20000124 	.word	0x20000124
 8007150:	2000018c 	.word	0x2000018c
 8007154:	200001f4 	.word	0x200001f4

08007158 <global_stdio_init.part.0>:
 8007158:	b510      	push	{r4, lr}
 800715a:	4b0b      	ldr	r3, [pc, #44]	@ (8007188 <global_stdio_init.part.0+0x30>)
 800715c:	2104      	movs	r1, #4
 800715e:	4c0b      	ldr	r4, [pc, #44]	@ (800718c <global_stdio_init.part.0+0x34>)
 8007160:	4a0b      	ldr	r2, [pc, #44]	@ (8007190 <global_stdio_init.part.0+0x38>)
 8007162:	4620      	mov	r0, r4
 8007164:	601a      	str	r2, [r3, #0]
 8007166:	2200      	movs	r2, #0
 8007168:	f7ff ff94 	bl	8007094 <std>
 800716c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007170:	2201      	movs	r2, #1
 8007172:	2109      	movs	r1, #9
 8007174:	f7ff ff8e 	bl	8007094 <std>
 8007178:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800717c:	2202      	movs	r2, #2
 800717e:	2112      	movs	r1, #18
 8007180:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007184:	f7ff bf86 	b.w	8007094 <std>
 8007188:	2000025c 	.word	0x2000025c
 800718c:	20000124 	.word	0x20000124
 8007190:	08007101 	.word	0x08007101

08007194 <__sfp_lock_acquire>:
 8007194:	4801      	ldr	r0, [pc, #4]	@ (800719c <__sfp_lock_acquire+0x8>)
 8007196:	f000 b90e 	b.w	80073b6 <__retarget_lock_acquire_recursive>
 800719a:	bf00      	nop
 800719c:	20000265 	.word	0x20000265

080071a0 <__sfp_lock_release>:
 80071a0:	4801      	ldr	r0, [pc, #4]	@ (80071a8 <__sfp_lock_release+0x8>)
 80071a2:	f000 b909 	b.w	80073b8 <__retarget_lock_release_recursive>
 80071a6:	bf00      	nop
 80071a8:	20000265 	.word	0x20000265

080071ac <__sinit>:
 80071ac:	b510      	push	{r4, lr}
 80071ae:	4604      	mov	r4, r0
 80071b0:	f7ff fff0 	bl	8007194 <__sfp_lock_acquire>
 80071b4:	6a23      	ldr	r3, [r4, #32]
 80071b6:	b11b      	cbz	r3, 80071c0 <__sinit+0x14>
 80071b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80071bc:	f7ff bff0 	b.w	80071a0 <__sfp_lock_release>
 80071c0:	4b04      	ldr	r3, [pc, #16]	@ (80071d4 <__sinit+0x28>)
 80071c2:	6223      	str	r3, [r4, #32]
 80071c4:	4b04      	ldr	r3, [pc, #16]	@ (80071d8 <__sinit+0x2c>)
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d1f5      	bne.n	80071b8 <__sinit+0xc>
 80071cc:	f7ff ffc4 	bl	8007158 <global_stdio_init.part.0>
 80071d0:	e7f2      	b.n	80071b8 <__sinit+0xc>
 80071d2:	bf00      	nop
 80071d4:	08007119 	.word	0x08007119
 80071d8:	2000025c 	.word	0x2000025c

080071dc <_fwalk_sglue>:
 80071dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80071e0:	4607      	mov	r7, r0
 80071e2:	4688      	mov	r8, r1
 80071e4:	4614      	mov	r4, r2
 80071e6:	2600      	movs	r6, #0
 80071e8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80071ec:	f1b9 0901 	subs.w	r9, r9, #1
 80071f0:	d505      	bpl.n	80071fe <_fwalk_sglue+0x22>
 80071f2:	6824      	ldr	r4, [r4, #0]
 80071f4:	2c00      	cmp	r4, #0
 80071f6:	d1f7      	bne.n	80071e8 <_fwalk_sglue+0xc>
 80071f8:	4630      	mov	r0, r6
 80071fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80071fe:	89ab      	ldrh	r3, [r5, #12]
 8007200:	2b01      	cmp	r3, #1
 8007202:	d907      	bls.n	8007214 <_fwalk_sglue+0x38>
 8007204:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007208:	3301      	adds	r3, #1
 800720a:	d003      	beq.n	8007214 <_fwalk_sglue+0x38>
 800720c:	4629      	mov	r1, r5
 800720e:	4638      	mov	r0, r7
 8007210:	47c0      	blx	r8
 8007212:	4306      	orrs	r6, r0
 8007214:	3568      	adds	r5, #104	@ 0x68
 8007216:	e7e9      	b.n	80071ec <_fwalk_sglue+0x10>

08007218 <iprintf>:
 8007218:	b40f      	push	{r0, r1, r2, r3}
 800721a:	b507      	push	{r0, r1, r2, lr}
 800721c:	4906      	ldr	r1, [pc, #24]	@ (8007238 <iprintf+0x20>)
 800721e:	ab04      	add	r3, sp, #16
 8007220:	6808      	ldr	r0, [r1, #0]
 8007222:	f853 2b04 	ldr.w	r2, [r3], #4
 8007226:	6881      	ldr	r1, [r0, #8]
 8007228:	9301      	str	r3, [sp, #4]
 800722a:	f000 f9e9 	bl	8007600 <_vfiprintf_r>
 800722e:	b003      	add	sp, #12
 8007230:	f85d eb04 	ldr.w	lr, [sp], #4
 8007234:	b004      	add	sp, #16
 8007236:	4770      	bx	lr
 8007238:	20000018 	.word	0x20000018

0800723c <__sread>:
 800723c:	b510      	push	{r4, lr}
 800723e:	460c      	mov	r4, r1
 8007240:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007244:	f000 f868 	bl	8007318 <_read_r>
 8007248:	2800      	cmp	r0, #0
 800724a:	bfab      	itete	ge
 800724c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800724e:	89a3      	ldrhlt	r3, [r4, #12]
 8007250:	181b      	addge	r3, r3, r0
 8007252:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007256:	bfac      	ite	ge
 8007258:	6563      	strge	r3, [r4, #84]	@ 0x54
 800725a:	81a3      	strhlt	r3, [r4, #12]
 800725c:	bd10      	pop	{r4, pc}

0800725e <__swrite>:
 800725e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007262:	461f      	mov	r7, r3
 8007264:	898b      	ldrh	r3, [r1, #12]
 8007266:	4605      	mov	r5, r0
 8007268:	460c      	mov	r4, r1
 800726a:	05db      	lsls	r3, r3, #23
 800726c:	4616      	mov	r6, r2
 800726e:	d505      	bpl.n	800727c <__swrite+0x1e>
 8007270:	2302      	movs	r3, #2
 8007272:	2200      	movs	r2, #0
 8007274:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007278:	f000 f83c 	bl	80072f4 <_lseek_r>
 800727c:	89a3      	ldrh	r3, [r4, #12]
 800727e:	4632      	mov	r2, r6
 8007280:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007284:	4628      	mov	r0, r5
 8007286:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800728a:	81a3      	strh	r3, [r4, #12]
 800728c:	463b      	mov	r3, r7
 800728e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007292:	f000 b853 	b.w	800733c <_write_r>

08007296 <__sseek>:
 8007296:	b510      	push	{r4, lr}
 8007298:	460c      	mov	r4, r1
 800729a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800729e:	f000 f829 	bl	80072f4 <_lseek_r>
 80072a2:	1c43      	adds	r3, r0, #1
 80072a4:	89a3      	ldrh	r3, [r4, #12]
 80072a6:	bf15      	itete	ne
 80072a8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80072aa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80072ae:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80072b2:	81a3      	strheq	r3, [r4, #12]
 80072b4:	bf18      	it	ne
 80072b6:	81a3      	strhne	r3, [r4, #12]
 80072b8:	bd10      	pop	{r4, pc}

080072ba <__sclose>:
 80072ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072be:	f000 b809 	b.w	80072d4 <_close_r>

080072c2 <memset>:
 80072c2:	4402      	add	r2, r0
 80072c4:	4603      	mov	r3, r0
 80072c6:	4293      	cmp	r3, r2
 80072c8:	d100      	bne.n	80072cc <memset+0xa>
 80072ca:	4770      	bx	lr
 80072cc:	f803 1b01 	strb.w	r1, [r3], #1
 80072d0:	e7f9      	b.n	80072c6 <memset+0x4>
	...

080072d4 <_close_r>:
 80072d4:	b538      	push	{r3, r4, r5, lr}
 80072d6:	2300      	movs	r3, #0
 80072d8:	4d05      	ldr	r5, [pc, #20]	@ (80072f0 <_close_r+0x1c>)
 80072da:	4604      	mov	r4, r0
 80072dc:	4608      	mov	r0, r1
 80072de:	602b      	str	r3, [r5, #0]
 80072e0:	f7f9 fbd3 	bl	8000a8a <_close>
 80072e4:	1c43      	adds	r3, r0, #1
 80072e6:	d102      	bne.n	80072ee <_close_r+0x1a>
 80072e8:	682b      	ldr	r3, [r5, #0]
 80072ea:	b103      	cbz	r3, 80072ee <_close_r+0x1a>
 80072ec:	6023      	str	r3, [r4, #0]
 80072ee:	bd38      	pop	{r3, r4, r5, pc}
 80072f0:	20000260 	.word	0x20000260

080072f4 <_lseek_r>:
 80072f4:	b538      	push	{r3, r4, r5, lr}
 80072f6:	4604      	mov	r4, r0
 80072f8:	4d06      	ldr	r5, [pc, #24]	@ (8007314 <_lseek_r+0x20>)
 80072fa:	4608      	mov	r0, r1
 80072fc:	4611      	mov	r1, r2
 80072fe:	2200      	movs	r2, #0
 8007300:	602a      	str	r2, [r5, #0]
 8007302:	461a      	mov	r2, r3
 8007304:	f7f9 fbe8 	bl	8000ad8 <_lseek>
 8007308:	1c43      	adds	r3, r0, #1
 800730a:	d102      	bne.n	8007312 <_lseek_r+0x1e>
 800730c:	682b      	ldr	r3, [r5, #0]
 800730e:	b103      	cbz	r3, 8007312 <_lseek_r+0x1e>
 8007310:	6023      	str	r3, [r4, #0]
 8007312:	bd38      	pop	{r3, r4, r5, pc}
 8007314:	20000260 	.word	0x20000260

08007318 <_read_r>:
 8007318:	b538      	push	{r3, r4, r5, lr}
 800731a:	4604      	mov	r4, r0
 800731c:	4d06      	ldr	r5, [pc, #24]	@ (8007338 <_read_r+0x20>)
 800731e:	4608      	mov	r0, r1
 8007320:	4611      	mov	r1, r2
 8007322:	2200      	movs	r2, #0
 8007324:	602a      	str	r2, [r5, #0]
 8007326:	461a      	mov	r2, r3
 8007328:	f7f9 fb92 	bl	8000a50 <_read>
 800732c:	1c43      	adds	r3, r0, #1
 800732e:	d102      	bne.n	8007336 <_read_r+0x1e>
 8007330:	682b      	ldr	r3, [r5, #0]
 8007332:	b103      	cbz	r3, 8007336 <_read_r+0x1e>
 8007334:	6023      	str	r3, [r4, #0]
 8007336:	bd38      	pop	{r3, r4, r5, pc}
 8007338:	20000260 	.word	0x20000260

0800733c <_write_r>:
 800733c:	b538      	push	{r3, r4, r5, lr}
 800733e:	4604      	mov	r4, r0
 8007340:	4d06      	ldr	r5, [pc, #24]	@ (800735c <_write_r+0x20>)
 8007342:	4608      	mov	r0, r1
 8007344:	4611      	mov	r1, r2
 8007346:	2200      	movs	r2, #0
 8007348:	602a      	str	r2, [r5, #0]
 800734a:	461a      	mov	r2, r3
 800734c:	f7f9 f93e 	bl	80005cc <_write>
 8007350:	1c43      	adds	r3, r0, #1
 8007352:	d102      	bne.n	800735a <_write_r+0x1e>
 8007354:	682b      	ldr	r3, [r5, #0]
 8007356:	b103      	cbz	r3, 800735a <_write_r+0x1e>
 8007358:	6023      	str	r3, [r4, #0]
 800735a:	bd38      	pop	{r3, r4, r5, pc}
 800735c:	20000260 	.word	0x20000260

08007360 <__errno>:
 8007360:	4b01      	ldr	r3, [pc, #4]	@ (8007368 <__errno+0x8>)
 8007362:	6818      	ldr	r0, [r3, #0]
 8007364:	4770      	bx	lr
 8007366:	bf00      	nop
 8007368:	20000018 	.word	0x20000018

0800736c <__libc_init_array>:
 800736c:	b570      	push	{r4, r5, r6, lr}
 800736e:	4d0d      	ldr	r5, [pc, #52]	@ (80073a4 <__libc_init_array+0x38>)
 8007370:	2600      	movs	r6, #0
 8007372:	4c0d      	ldr	r4, [pc, #52]	@ (80073a8 <__libc_init_array+0x3c>)
 8007374:	1b64      	subs	r4, r4, r5
 8007376:	10a4      	asrs	r4, r4, #2
 8007378:	42a6      	cmp	r6, r4
 800737a:	d109      	bne.n	8007390 <__libc_init_array+0x24>
 800737c:	4d0b      	ldr	r5, [pc, #44]	@ (80073ac <__libc_init_array+0x40>)
 800737e:	2600      	movs	r6, #0
 8007380:	4c0b      	ldr	r4, [pc, #44]	@ (80073b0 <__libc_init_array+0x44>)
 8007382:	f000 fdc9 	bl	8007f18 <_init>
 8007386:	1b64      	subs	r4, r4, r5
 8007388:	10a4      	asrs	r4, r4, #2
 800738a:	42a6      	cmp	r6, r4
 800738c:	d105      	bne.n	800739a <__libc_init_array+0x2e>
 800738e:	bd70      	pop	{r4, r5, r6, pc}
 8007390:	f855 3b04 	ldr.w	r3, [r5], #4
 8007394:	3601      	adds	r6, #1
 8007396:	4798      	blx	r3
 8007398:	e7ee      	b.n	8007378 <__libc_init_array+0xc>
 800739a:	f855 3b04 	ldr.w	r3, [r5], #4
 800739e:	3601      	adds	r6, #1
 80073a0:	4798      	blx	r3
 80073a2:	e7f2      	b.n	800738a <__libc_init_array+0x1e>
 80073a4:	08008074 	.word	0x08008074
 80073a8:	08008074 	.word	0x08008074
 80073ac:	08008074 	.word	0x08008074
 80073b0:	08008078 	.word	0x08008078

080073b4 <__retarget_lock_init_recursive>:
 80073b4:	4770      	bx	lr

080073b6 <__retarget_lock_acquire_recursive>:
 80073b6:	4770      	bx	lr

080073b8 <__retarget_lock_release_recursive>:
 80073b8:	4770      	bx	lr
	...

080073bc <_free_r>:
 80073bc:	b538      	push	{r3, r4, r5, lr}
 80073be:	4605      	mov	r5, r0
 80073c0:	2900      	cmp	r1, #0
 80073c2:	d041      	beq.n	8007448 <_free_r+0x8c>
 80073c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80073c8:	1f0c      	subs	r4, r1, #4
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	bfb8      	it	lt
 80073ce:	18e4      	addlt	r4, r4, r3
 80073d0:	f000 f8e0 	bl	8007594 <__malloc_lock>
 80073d4:	4a1d      	ldr	r2, [pc, #116]	@ (800744c <_free_r+0x90>)
 80073d6:	6813      	ldr	r3, [r2, #0]
 80073d8:	b933      	cbnz	r3, 80073e8 <_free_r+0x2c>
 80073da:	6063      	str	r3, [r4, #4]
 80073dc:	6014      	str	r4, [r2, #0]
 80073de:	4628      	mov	r0, r5
 80073e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80073e4:	f000 b8dc 	b.w	80075a0 <__malloc_unlock>
 80073e8:	42a3      	cmp	r3, r4
 80073ea:	d908      	bls.n	80073fe <_free_r+0x42>
 80073ec:	6820      	ldr	r0, [r4, #0]
 80073ee:	1821      	adds	r1, r4, r0
 80073f0:	428b      	cmp	r3, r1
 80073f2:	bf01      	itttt	eq
 80073f4:	6819      	ldreq	r1, [r3, #0]
 80073f6:	685b      	ldreq	r3, [r3, #4]
 80073f8:	1809      	addeq	r1, r1, r0
 80073fa:	6021      	streq	r1, [r4, #0]
 80073fc:	e7ed      	b.n	80073da <_free_r+0x1e>
 80073fe:	461a      	mov	r2, r3
 8007400:	685b      	ldr	r3, [r3, #4]
 8007402:	b10b      	cbz	r3, 8007408 <_free_r+0x4c>
 8007404:	42a3      	cmp	r3, r4
 8007406:	d9fa      	bls.n	80073fe <_free_r+0x42>
 8007408:	6811      	ldr	r1, [r2, #0]
 800740a:	1850      	adds	r0, r2, r1
 800740c:	42a0      	cmp	r0, r4
 800740e:	d10b      	bne.n	8007428 <_free_r+0x6c>
 8007410:	6820      	ldr	r0, [r4, #0]
 8007412:	4401      	add	r1, r0
 8007414:	1850      	adds	r0, r2, r1
 8007416:	6011      	str	r1, [r2, #0]
 8007418:	4283      	cmp	r3, r0
 800741a:	d1e0      	bne.n	80073de <_free_r+0x22>
 800741c:	6818      	ldr	r0, [r3, #0]
 800741e:	685b      	ldr	r3, [r3, #4]
 8007420:	4408      	add	r0, r1
 8007422:	6053      	str	r3, [r2, #4]
 8007424:	6010      	str	r0, [r2, #0]
 8007426:	e7da      	b.n	80073de <_free_r+0x22>
 8007428:	d902      	bls.n	8007430 <_free_r+0x74>
 800742a:	230c      	movs	r3, #12
 800742c:	602b      	str	r3, [r5, #0]
 800742e:	e7d6      	b.n	80073de <_free_r+0x22>
 8007430:	6820      	ldr	r0, [r4, #0]
 8007432:	1821      	adds	r1, r4, r0
 8007434:	428b      	cmp	r3, r1
 8007436:	bf02      	ittt	eq
 8007438:	6819      	ldreq	r1, [r3, #0]
 800743a:	685b      	ldreq	r3, [r3, #4]
 800743c:	1809      	addeq	r1, r1, r0
 800743e:	6063      	str	r3, [r4, #4]
 8007440:	bf08      	it	eq
 8007442:	6021      	streq	r1, [r4, #0]
 8007444:	6054      	str	r4, [r2, #4]
 8007446:	e7ca      	b.n	80073de <_free_r+0x22>
 8007448:	bd38      	pop	{r3, r4, r5, pc}
 800744a:	bf00      	nop
 800744c:	2000026c 	.word	0x2000026c

08007450 <sbrk_aligned>:
 8007450:	b570      	push	{r4, r5, r6, lr}
 8007452:	4e0f      	ldr	r6, [pc, #60]	@ (8007490 <sbrk_aligned+0x40>)
 8007454:	460c      	mov	r4, r1
 8007456:	4605      	mov	r5, r0
 8007458:	6831      	ldr	r1, [r6, #0]
 800745a:	b911      	cbnz	r1, 8007462 <sbrk_aligned+0x12>
 800745c:	f000 fcba 	bl	8007dd4 <_sbrk_r>
 8007460:	6030      	str	r0, [r6, #0]
 8007462:	4621      	mov	r1, r4
 8007464:	4628      	mov	r0, r5
 8007466:	f000 fcb5 	bl	8007dd4 <_sbrk_r>
 800746a:	1c43      	adds	r3, r0, #1
 800746c:	d103      	bne.n	8007476 <sbrk_aligned+0x26>
 800746e:	f04f 34ff 	mov.w	r4, #4294967295
 8007472:	4620      	mov	r0, r4
 8007474:	bd70      	pop	{r4, r5, r6, pc}
 8007476:	1cc4      	adds	r4, r0, #3
 8007478:	f024 0403 	bic.w	r4, r4, #3
 800747c:	42a0      	cmp	r0, r4
 800747e:	d0f8      	beq.n	8007472 <sbrk_aligned+0x22>
 8007480:	1a21      	subs	r1, r4, r0
 8007482:	4628      	mov	r0, r5
 8007484:	f000 fca6 	bl	8007dd4 <_sbrk_r>
 8007488:	3001      	adds	r0, #1
 800748a:	d1f2      	bne.n	8007472 <sbrk_aligned+0x22>
 800748c:	e7ef      	b.n	800746e <sbrk_aligned+0x1e>
 800748e:	bf00      	nop
 8007490:	20000268 	.word	0x20000268

08007494 <_malloc_r>:
 8007494:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007498:	1ccd      	adds	r5, r1, #3
 800749a:	4606      	mov	r6, r0
 800749c:	f025 0503 	bic.w	r5, r5, #3
 80074a0:	3508      	adds	r5, #8
 80074a2:	2d0c      	cmp	r5, #12
 80074a4:	bf38      	it	cc
 80074a6:	250c      	movcc	r5, #12
 80074a8:	2d00      	cmp	r5, #0
 80074aa:	db01      	blt.n	80074b0 <_malloc_r+0x1c>
 80074ac:	42a9      	cmp	r1, r5
 80074ae:	d904      	bls.n	80074ba <_malloc_r+0x26>
 80074b0:	230c      	movs	r3, #12
 80074b2:	6033      	str	r3, [r6, #0]
 80074b4:	2000      	movs	r0, #0
 80074b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80074ba:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007590 <_malloc_r+0xfc>
 80074be:	f000 f869 	bl	8007594 <__malloc_lock>
 80074c2:	f8d8 3000 	ldr.w	r3, [r8]
 80074c6:	461c      	mov	r4, r3
 80074c8:	bb44      	cbnz	r4, 800751c <_malloc_r+0x88>
 80074ca:	4629      	mov	r1, r5
 80074cc:	4630      	mov	r0, r6
 80074ce:	f7ff ffbf 	bl	8007450 <sbrk_aligned>
 80074d2:	1c43      	adds	r3, r0, #1
 80074d4:	4604      	mov	r4, r0
 80074d6:	d158      	bne.n	800758a <_malloc_r+0xf6>
 80074d8:	f8d8 4000 	ldr.w	r4, [r8]
 80074dc:	4627      	mov	r7, r4
 80074de:	2f00      	cmp	r7, #0
 80074e0:	d143      	bne.n	800756a <_malloc_r+0xd6>
 80074e2:	2c00      	cmp	r4, #0
 80074e4:	d04b      	beq.n	800757e <_malloc_r+0xea>
 80074e6:	6823      	ldr	r3, [r4, #0]
 80074e8:	4639      	mov	r1, r7
 80074ea:	4630      	mov	r0, r6
 80074ec:	eb04 0903 	add.w	r9, r4, r3
 80074f0:	f000 fc70 	bl	8007dd4 <_sbrk_r>
 80074f4:	4581      	cmp	r9, r0
 80074f6:	d142      	bne.n	800757e <_malloc_r+0xea>
 80074f8:	6821      	ldr	r1, [r4, #0]
 80074fa:	4630      	mov	r0, r6
 80074fc:	1a6d      	subs	r5, r5, r1
 80074fe:	4629      	mov	r1, r5
 8007500:	f7ff ffa6 	bl	8007450 <sbrk_aligned>
 8007504:	3001      	adds	r0, #1
 8007506:	d03a      	beq.n	800757e <_malloc_r+0xea>
 8007508:	6823      	ldr	r3, [r4, #0]
 800750a:	442b      	add	r3, r5
 800750c:	6023      	str	r3, [r4, #0]
 800750e:	f8d8 3000 	ldr.w	r3, [r8]
 8007512:	685a      	ldr	r2, [r3, #4]
 8007514:	bb62      	cbnz	r2, 8007570 <_malloc_r+0xdc>
 8007516:	f8c8 7000 	str.w	r7, [r8]
 800751a:	e00f      	b.n	800753c <_malloc_r+0xa8>
 800751c:	6822      	ldr	r2, [r4, #0]
 800751e:	1b52      	subs	r2, r2, r5
 8007520:	d420      	bmi.n	8007564 <_malloc_r+0xd0>
 8007522:	2a0b      	cmp	r2, #11
 8007524:	d917      	bls.n	8007556 <_malloc_r+0xc2>
 8007526:	1961      	adds	r1, r4, r5
 8007528:	42a3      	cmp	r3, r4
 800752a:	6025      	str	r5, [r4, #0]
 800752c:	bf18      	it	ne
 800752e:	6059      	strne	r1, [r3, #4]
 8007530:	6863      	ldr	r3, [r4, #4]
 8007532:	bf08      	it	eq
 8007534:	f8c8 1000 	streq.w	r1, [r8]
 8007538:	5162      	str	r2, [r4, r5]
 800753a:	604b      	str	r3, [r1, #4]
 800753c:	4630      	mov	r0, r6
 800753e:	f000 f82f 	bl	80075a0 <__malloc_unlock>
 8007542:	f104 000b 	add.w	r0, r4, #11
 8007546:	1d23      	adds	r3, r4, #4
 8007548:	f020 0007 	bic.w	r0, r0, #7
 800754c:	1ac2      	subs	r2, r0, r3
 800754e:	bf1c      	itt	ne
 8007550:	1a1b      	subne	r3, r3, r0
 8007552:	50a3      	strne	r3, [r4, r2]
 8007554:	e7af      	b.n	80074b6 <_malloc_r+0x22>
 8007556:	6862      	ldr	r2, [r4, #4]
 8007558:	42a3      	cmp	r3, r4
 800755a:	bf0c      	ite	eq
 800755c:	f8c8 2000 	streq.w	r2, [r8]
 8007560:	605a      	strne	r2, [r3, #4]
 8007562:	e7eb      	b.n	800753c <_malloc_r+0xa8>
 8007564:	4623      	mov	r3, r4
 8007566:	6864      	ldr	r4, [r4, #4]
 8007568:	e7ae      	b.n	80074c8 <_malloc_r+0x34>
 800756a:	463c      	mov	r4, r7
 800756c:	687f      	ldr	r7, [r7, #4]
 800756e:	e7b6      	b.n	80074de <_malloc_r+0x4a>
 8007570:	461a      	mov	r2, r3
 8007572:	685b      	ldr	r3, [r3, #4]
 8007574:	42a3      	cmp	r3, r4
 8007576:	d1fb      	bne.n	8007570 <_malloc_r+0xdc>
 8007578:	2300      	movs	r3, #0
 800757a:	6053      	str	r3, [r2, #4]
 800757c:	e7de      	b.n	800753c <_malloc_r+0xa8>
 800757e:	230c      	movs	r3, #12
 8007580:	4630      	mov	r0, r6
 8007582:	6033      	str	r3, [r6, #0]
 8007584:	f000 f80c 	bl	80075a0 <__malloc_unlock>
 8007588:	e794      	b.n	80074b4 <_malloc_r+0x20>
 800758a:	6005      	str	r5, [r0, #0]
 800758c:	e7d6      	b.n	800753c <_malloc_r+0xa8>
 800758e:	bf00      	nop
 8007590:	2000026c 	.word	0x2000026c

08007594 <__malloc_lock>:
 8007594:	4801      	ldr	r0, [pc, #4]	@ (800759c <__malloc_lock+0x8>)
 8007596:	f7ff bf0e 	b.w	80073b6 <__retarget_lock_acquire_recursive>
 800759a:	bf00      	nop
 800759c:	20000264 	.word	0x20000264

080075a0 <__malloc_unlock>:
 80075a0:	4801      	ldr	r0, [pc, #4]	@ (80075a8 <__malloc_unlock+0x8>)
 80075a2:	f7ff bf09 	b.w	80073b8 <__retarget_lock_release_recursive>
 80075a6:	bf00      	nop
 80075a8:	20000264 	.word	0x20000264

080075ac <__sfputc_r>:
 80075ac:	6893      	ldr	r3, [r2, #8]
 80075ae:	3b01      	subs	r3, #1
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	6093      	str	r3, [r2, #8]
 80075b4:	b410      	push	{r4}
 80075b6:	da08      	bge.n	80075ca <__sfputc_r+0x1e>
 80075b8:	6994      	ldr	r4, [r2, #24]
 80075ba:	42a3      	cmp	r3, r4
 80075bc:	db01      	blt.n	80075c2 <__sfputc_r+0x16>
 80075be:	290a      	cmp	r1, #10
 80075c0:	d103      	bne.n	80075ca <__sfputc_r+0x1e>
 80075c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80075c6:	f000 bb71 	b.w	8007cac <__swbuf_r>
 80075ca:	6813      	ldr	r3, [r2, #0]
 80075cc:	1c58      	adds	r0, r3, #1
 80075ce:	6010      	str	r0, [r2, #0]
 80075d0:	4608      	mov	r0, r1
 80075d2:	7019      	strb	r1, [r3, #0]
 80075d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80075d8:	4770      	bx	lr

080075da <__sfputs_r>:
 80075da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075dc:	4606      	mov	r6, r0
 80075de:	460f      	mov	r7, r1
 80075e0:	4614      	mov	r4, r2
 80075e2:	18d5      	adds	r5, r2, r3
 80075e4:	42ac      	cmp	r4, r5
 80075e6:	d101      	bne.n	80075ec <__sfputs_r+0x12>
 80075e8:	2000      	movs	r0, #0
 80075ea:	e007      	b.n	80075fc <__sfputs_r+0x22>
 80075ec:	463a      	mov	r2, r7
 80075ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075f2:	4630      	mov	r0, r6
 80075f4:	f7ff ffda 	bl	80075ac <__sfputc_r>
 80075f8:	1c43      	adds	r3, r0, #1
 80075fa:	d1f3      	bne.n	80075e4 <__sfputs_r+0xa>
 80075fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007600 <_vfiprintf_r>:
 8007600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007604:	460d      	mov	r5, r1
 8007606:	b09d      	sub	sp, #116	@ 0x74
 8007608:	4614      	mov	r4, r2
 800760a:	4698      	mov	r8, r3
 800760c:	4606      	mov	r6, r0
 800760e:	b118      	cbz	r0, 8007618 <_vfiprintf_r+0x18>
 8007610:	6a03      	ldr	r3, [r0, #32]
 8007612:	b90b      	cbnz	r3, 8007618 <_vfiprintf_r+0x18>
 8007614:	f7ff fdca 	bl	80071ac <__sinit>
 8007618:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800761a:	07d9      	lsls	r1, r3, #31
 800761c:	d405      	bmi.n	800762a <_vfiprintf_r+0x2a>
 800761e:	89ab      	ldrh	r3, [r5, #12]
 8007620:	059a      	lsls	r2, r3, #22
 8007622:	d402      	bmi.n	800762a <_vfiprintf_r+0x2a>
 8007624:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007626:	f7ff fec6 	bl	80073b6 <__retarget_lock_acquire_recursive>
 800762a:	89ab      	ldrh	r3, [r5, #12]
 800762c:	071b      	lsls	r3, r3, #28
 800762e:	d501      	bpl.n	8007634 <_vfiprintf_r+0x34>
 8007630:	692b      	ldr	r3, [r5, #16]
 8007632:	b99b      	cbnz	r3, 800765c <_vfiprintf_r+0x5c>
 8007634:	4629      	mov	r1, r5
 8007636:	4630      	mov	r0, r6
 8007638:	f000 fb76 	bl	8007d28 <__swsetup_r>
 800763c:	b170      	cbz	r0, 800765c <_vfiprintf_r+0x5c>
 800763e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007640:	07dc      	lsls	r4, r3, #31
 8007642:	d504      	bpl.n	800764e <_vfiprintf_r+0x4e>
 8007644:	f04f 30ff 	mov.w	r0, #4294967295
 8007648:	b01d      	add	sp, #116	@ 0x74
 800764a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800764e:	89ab      	ldrh	r3, [r5, #12]
 8007650:	0598      	lsls	r0, r3, #22
 8007652:	d4f7      	bmi.n	8007644 <_vfiprintf_r+0x44>
 8007654:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007656:	f7ff feaf 	bl	80073b8 <__retarget_lock_release_recursive>
 800765a:	e7f3      	b.n	8007644 <_vfiprintf_r+0x44>
 800765c:	2300      	movs	r3, #0
 800765e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007662:	f04f 0901 	mov.w	r9, #1
 8007666:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 800781c <_vfiprintf_r+0x21c>
 800766a:	9309      	str	r3, [sp, #36]	@ 0x24
 800766c:	2320      	movs	r3, #32
 800766e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007672:	2330      	movs	r3, #48	@ 0x30
 8007674:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007678:	4623      	mov	r3, r4
 800767a:	469a      	mov	sl, r3
 800767c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007680:	b10a      	cbz	r2, 8007686 <_vfiprintf_r+0x86>
 8007682:	2a25      	cmp	r2, #37	@ 0x25
 8007684:	d1f9      	bne.n	800767a <_vfiprintf_r+0x7a>
 8007686:	ebba 0b04 	subs.w	fp, sl, r4
 800768a:	d00b      	beq.n	80076a4 <_vfiprintf_r+0xa4>
 800768c:	465b      	mov	r3, fp
 800768e:	4622      	mov	r2, r4
 8007690:	4629      	mov	r1, r5
 8007692:	4630      	mov	r0, r6
 8007694:	f7ff ffa1 	bl	80075da <__sfputs_r>
 8007698:	3001      	adds	r0, #1
 800769a:	f000 80a7 	beq.w	80077ec <_vfiprintf_r+0x1ec>
 800769e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80076a0:	445a      	add	r2, fp
 80076a2:	9209      	str	r2, [sp, #36]	@ 0x24
 80076a4:	f89a 3000 	ldrb.w	r3, [sl]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	f000 809f 	beq.w	80077ec <_vfiprintf_r+0x1ec>
 80076ae:	2300      	movs	r3, #0
 80076b0:	f04f 32ff 	mov.w	r2, #4294967295
 80076b4:	f10a 0a01 	add.w	sl, sl, #1
 80076b8:	9304      	str	r3, [sp, #16]
 80076ba:	9307      	str	r3, [sp, #28]
 80076bc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80076c0:	931a      	str	r3, [sp, #104]	@ 0x68
 80076c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80076c6:	4654      	mov	r4, sl
 80076c8:	2205      	movs	r2, #5
 80076ca:	4854      	ldr	r0, [pc, #336]	@ (800781c <_vfiprintf_r+0x21c>)
 80076cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076d0:	f000 fb90 	bl	8007df4 <memchr>
 80076d4:	9a04      	ldr	r2, [sp, #16]
 80076d6:	b9d8      	cbnz	r0, 8007710 <_vfiprintf_r+0x110>
 80076d8:	06d1      	lsls	r1, r2, #27
 80076da:	bf44      	itt	mi
 80076dc:	2320      	movmi	r3, #32
 80076de:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80076e2:	0713      	lsls	r3, r2, #28
 80076e4:	bf44      	itt	mi
 80076e6:	232b      	movmi	r3, #43	@ 0x2b
 80076e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80076ec:	f89a 3000 	ldrb.w	r3, [sl]
 80076f0:	2b2a      	cmp	r3, #42	@ 0x2a
 80076f2:	d015      	beq.n	8007720 <_vfiprintf_r+0x120>
 80076f4:	9a07      	ldr	r2, [sp, #28]
 80076f6:	4654      	mov	r4, sl
 80076f8:	2000      	movs	r0, #0
 80076fa:	f04f 0c0a 	mov.w	ip, #10
 80076fe:	4621      	mov	r1, r4
 8007700:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007704:	3b30      	subs	r3, #48	@ 0x30
 8007706:	2b09      	cmp	r3, #9
 8007708:	d94b      	bls.n	80077a2 <_vfiprintf_r+0x1a2>
 800770a:	b1b0      	cbz	r0, 800773a <_vfiprintf_r+0x13a>
 800770c:	9207      	str	r2, [sp, #28]
 800770e:	e014      	b.n	800773a <_vfiprintf_r+0x13a>
 8007710:	eba0 0308 	sub.w	r3, r0, r8
 8007714:	46a2      	mov	sl, r4
 8007716:	fa09 f303 	lsl.w	r3, r9, r3
 800771a:	4313      	orrs	r3, r2
 800771c:	9304      	str	r3, [sp, #16]
 800771e:	e7d2      	b.n	80076c6 <_vfiprintf_r+0xc6>
 8007720:	9b03      	ldr	r3, [sp, #12]
 8007722:	1d19      	adds	r1, r3, #4
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	2b00      	cmp	r3, #0
 8007728:	9103      	str	r1, [sp, #12]
 800772a:	bfbb      	ittet	lt
 800772c:	425b      	neglt	r3, r3
 800772e:	f042 0202 	orrlt.w	r2, r2, #2
 8007732:	9307      	strge	r3, [sp, #28]
 8007734:	9307      	strlt	r3, [sp, #28]
 8007736:	bfb8      	it	lt
 8007738:	9204      	strlt	r2, [sp, #16]
 800773a:	7823      	ldrb	r3, [r4, #0]
 800773c:	2b2e      	cmp	r3, #46	@ 0x2e
 800773e:	d10a      	bne.n	8007756 <_vfiprintf_r+0x156>
 8007740:	7863      	ldrb	r3, [r4, #1]
 8007742:	2b2a      	cmp	r3, #42	@ 0x2a
 8007744:	d132      	bne.n	80077ac <_vfiprintf_r+0x1ac>
 8007746:	9b03      	ldr	r3, [sp, #12]
 8007748:	3402      	adds	r4, #2
 800774a:	1d1a      	adds	r2, r3, #4
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007752:	9203      	str	r2, [sp, #12]
 8007754:	9305      	str	r3, [sp, #20]
 8007756:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800782c <_vfiprintf_r+0x22c>
 800775a:	2203      	movs	r2, #3
 800775c:	7821      	ldrb	r1, [r4, #0]
 800775e:	4650      	mov	r0, sl
 8007760:	f000 fb48 	bl	8007df4 <memchr>
 8007764:	b138      	cbz	r0, 8007776 <_vfiprintf_r+0x176>
 8007766:	eba0 000a 	sub.w	r0, r0, sl
 800776a:	2240      	movs	r2, #64	@ 0x40
 800776c:	9b04      	ldr	r3, [sp, #16]
 800776e:	3401      	adds	r4, #1
 8007770:	4082      	lsls	r2, r0
 8007772:	4313      	orrs	r3, r2
 8007774:	9304      	str	r3, [sp, #16]
 8007776:	f814 1b01 	ldrb.w	r1, [r4], #1
 800777a:	2206      	movs	r2, #6
 800777c:	4828      	ldr	r0, [pc, #160]	@ (8007820 <_vfiprintf_r+0x220>)
 800777e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007782:	f000 fb37 	bl	8007df4 <memchr>
 8007786:	2800      	cmp	r0, #0
 8007788:	d03f      	beq.n	800780a <_vfiprintf_r+0x20a>
 800778a:	4b26      	ldr	r3, [pc, #152]	@ (8007824 <_vfiprintf_r+0x224>)
 800778c:	bb1b      	cbnz	r3, 80077d6 <_vfiprintf_r+0x1d6>
 800778e:	9b03      	ldr	r3, [sp, #12]
 8007790:	3307      	adds	r3, #7
 8007792:	f023 0307 	bic.w	r3, r3, #7
 8007796:	3308      	adds	r3, #8
 8007798:	9303      	str	r3, [sp, #12]
 800779a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800779c:	443b      	add	r3, r7
 800779e:	9309      	str	r3, [sp, #36]	@ 0x24
 80077a0:	e76a      	b.n	8007678 <_vfiprintf_r+0x78>
 80077a2:	fb0c 3202 	mla	r2, ip, r2, r3
 80077a6:	460c      	mov	r4, r1
 80077a8:	2001      	movs	r0, #1
 80077aa:	e7a8      	b.n	80076fe <_vfiprintf_r+0xfe>
 80077ac:	2300      	movs	r3, #0
 80077ae:	3401      	adds	r4, #1
 80077b0:	f04f 0c0a 	mov.w	ip, #10
 80077b4:	4619      	mov	r1, r3
 80077b6:	9305      	str	r3, [sp, #20]
 80077b8:	4620      	mov	r0, r4
 80077ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 80077be:	3a30      	subs	r2, #48	@ 0x30
 80077c0:	2a09      	cmp	r2, #9
 80077c2:	d903      	bls.n	80077cc <_vfiprintf_r+0x1cc>
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d0c6      	beq.n	8007756 <_vfiprintf_r+0x156>
 80077c8:	9105      	str	r1, [sp, #20]
 80077ca:	e7c4      	b.n	8007756 <_vfiprintf_r+0x156>
 80077cc:	fb0c 2101 	mla	r1, ip, r1, r2
 80077d0:	4604      	mov	r4, r0
 80077d2:	2301      	movs	r3, #1
 80077d4:	e7f0      	b.n	80077b8 <_vfiprintf_r+0x1b8>
 80077d6:	ab03      	add	r3, sp, #12
 80077d8:	462a      	mov	r2, r5
 80077da:	a904      	add	r1, sp, #16
 80077dc:	4630      	mov	r0, r6
 80077de:	9300      	str	r3, [sp, #0]
 80077e0:	4b11      	ldr	r3, [pc, #68]	@ (8007828 <_vfiprintf_r+0x228>)
 80077e2:	f3af 8000 	nop.w
 80077e6:	4607      	mov	r7, r0
 80077e8:	1c78      	adds	r0, r7, #1
 80077ea:	d1d6      	bne.n	800779a <_vfiprintf_r+0x19a>
 80077ec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80077ee:	07d9      	lsls	r1, r3, #31
 80077f0:	d405      	bmi.n	80077fe <_vfiprintf_r+0x1fe>
 80077f2:	89ab      	ldrh	r3, [r5, #12]
 80077f4:	059a      	lsls	r2, r3, #22
 80077f6:	d402      	bmi.n	80077fe <_vfiprintf_r+0x1fe>
 80077f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80077fa:	f7ff fddd 	bl	80073b8 <__retarget_lock_release_recursive>
 80077fe:	89ab      	ldrh	r3, [r5, #12]
 8007800:	065b      	lsls	r3, r3, #25
 8007802:	f53f af1f 	bmi.w	8007644 <_vfiprintf_r+0x44>
 8007806:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007808:	e71e      	b.n	8007648 <_vfiprintf_r+0x48>
 800780a:	ab03      	add	r3, sp, #12
 800780c:	462a      	mov	r2, r5
 800780e:	a904      	add	r1, sp, #16
 8007810:	4630      	mov	r0, r6
 8007812:	9300      	str	r3, [sp, #0]
 8007814:	4b04      	ldr	r3, [pc, #16]	@ (8007828 <_vfiprintf_r+0x228>)
 8007816:	f000 f87d 	bl	8007914 <_printf_i>
 800781a:	e7e4      	b.n	80077e6 <_vfiprintf_r+0x1e6>
 800781c:	08008038 	.word	0x08008038
 8007820:	08008042 	.word	0x08008042
 8007824:	00000000 	.word	0x00000000
 8007828:	080075db 	.word	0x080075db
 800782c:	0800803e 	.word	0x0800803e

08007830 <_printf_common>:
 8007830:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007834:	4616      	mov	r6, r2
 8007836:	4698      	mov	r8, r3
 8007838:	688a      	ldr	r2, [r1, #8]
 800783a:	4607      	mov	r7, r0
 800783c:	690b      	ldr	r3, [r1, #16]
 800783e:	460c      	mov	r4, r1
 8007840:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007844:	4293      	cmp	r3, r2
 8007846:	bfb8      	it	lt
 8007848:	4613      	movlt	r3, r2
 800784a:	6033      	str	r3, [r6, #0]
 800784c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007850:	b10a      	cbz	r2, 8007856 <_printf_common+0x26>
 8007852:	3301      	adds	r3, #1
 8007854:	6033      	str	r3, [r6, #0]
 8007856:	6823      	ldr	r3, [r4, #0]
 8007858:	0699      	lsls	r1, r3, #26
 800785a:	bf42      	ittt	mi
 800785c:	6833      	ldrmi	r3, [r6, #0]
 800785e:	3302      	addmi	r3, #2
 8007860:	6033      	strmi	r3, [r6, #0]
 8007862:	6825      	ldr	r5, [r4, #0]
 8007864:	f015 0506 	ands.w	r5, r5, #6
 8007868:	d106      	bne.n	8007878 <_printf_common+0x48>
 800786a:	f104 0a19 	add.w	sl, r4, #25
 800786e:	68e3      	ldr	r3, [r4, #12]
 8007870:	6832      	ldr	r2, [r6, #0]
 8007872:	1a9b      	subs	r3, r3, r2
 8007874:	42ab      	cmp	r3, r5
 8007876:	dc2b      	bgt.n	80078d0 <_printf_common+0xa0>
 8007878:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800787c:	6822      	ldr	r2, [r4, #0]
 800787e:	3b00      	subs	r3, #0
 8007880:	bf18      	it	ne
 8007882:	2301      	movne	r3, #1
 8007884:	0692      	lsls	r2, r2, #26
 8007886:	d430      	bmi.n	80078ea <_printf_common+0xba>
 8007888:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800788c:	4641      	mov	r1, r8
 800788e:	4638      	mov	r0, r7
 8007890:	47c8      	blx	r9
 8007892:	3001      	adds	r0, #1
 8007894:	d023      	beq.n	80078de <_printf_common+0xae>
 8007896:	6823      	ldr	r3, [r4, #0]
 8007898:	341a      	adds	r4, #26
 800789a:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800789e:	f003 0306 	and.w	r3, r3, #6
 80078a2:	2b04      	cmp	r3, #4
 80078a4:	bf0a      	itet	eq
 80078a6:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 80078aa:	2500      	movne	r5, #0
 80078ac:	6833      	ldreq	r3, [r6, #0]
 80078ae:	f04f 0600 	mov.w	r6, #0
 80078b2:	bf08      	it	eq
 80078b4:	1aed      	subeq	r5, r5, r3
 80078b6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80078ba:	bf08      	it	eq
 80078bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80078c0:	4293      	cmp	r3, r2
 80078c2:	bfc4      	itt	gt
 80078c4:	1a9b      	subgt	r3, r3, r2
 80078c6:	18ed      	addgt	r5, r5, r3
 80078c8:	42b5      	cmp	r5, r6
 80078ca:	d11a      	bne.n	8007902 <_printf_common+0xd2>
 80078cc:	2000      	movs	r0, #0
 80078ce:	e008      	b.n	80078e2 <_printf_common+0xb2>
 80078d0:	2301      	movs	r3, #1
 80078d2:	4652      	mov	r2, sl
 80078d4:	4641      	mov	r1, r8
 80078d6:	4638      	mov	r0, r7
 80078d8:	47c8      	blx	r9
 80078da:	3001      	adds	r0, #1
 80078dc:	d103      	bne.n	80078e6 <_printf_common+0xb6>
 80078de:	f04f 30ff 	mov.w	r0, #4294967295
 80078e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078e6:	3501      	adds	r5, #1
 80078e8:	e7c1      	b.n	800786e <_printf_common+0x3e>
 80078ea:	18e1      	adds	r1, r4, r3
 80078ec:	1c5a      	adds	r2, r3, #1
 80078ee:	2030      	movs	r0, #48	@ 0x30
 80078f0:	3302      	adds	r3, #2
 80078f2:	4422      	add	r2, r4
 80078f4:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80078f8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80078fc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007900:	e7c2      	b.n	8007888 <_printf_common+0x58>
 8007902:	2301      	movs	r3, #1
 8007904:	4622      	mov	r2, r4
 8007906:	4641      	mov	r1, r8
 8007908:	4638      	mov	r0, r7
 800790a:	47c8      	blx	r9
 800790c:	3001      	adds	r0, #1
 800790e:	d0e6      	beq.n	80078de <_printf_common+0xae>
 8007910:	3601      	adds	r6, #1
 8007912:	e7d9      	b.n	80078c8 <_printf_common+0x98>

08007914 <_printf_i>:
 8007914:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007918:	7e0f      	ldrb	r7, [r1, #24]
 800791a:	4691      	mov	r9, r2
 800791c:	4680      	mov	r8, r0
 800791e:	460c      	mov	r4, r1
 8007920:	2f78      	cmp	r7, #120	@ 0x78
 8007922:	469a      	mov	sl, r3
 8007924:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007926:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800792a:	d807      	bhi.n	800793c <_printf_i+0x28>
 800792c:	2f62      	cmp	r7, #98	@ 0x62
 800792e:	d80a      	bhi.n	8007946 <_printf_i+0x32>
 8007930:	2f00      	cmp	r7, #0
 8007932:	f000 80d2 	beq.w	8007ada <_printf_i+0x1c6>
 8007936:	2f58      	cmp	r7, #88	@ 0x58
 8007938:	f000 80b9 	beq.w	8007aae <_printf_i+0x19a>
 800793c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007940:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007944:	e03a      	b.n	80079bc <_printf_i+0xa8>
 8007946:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800794a:	2b15      	cmp	r3, #21
 800794c:	d8f6      	bhi.n	800793c <_printf_i+0x28>
 800794e:	a101      	add	r1, pc, #4	@ (adr r1, 8007954 <_printf_i+0x40>)
 8007950:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007954:	080079ad 	.word	0x080079ad
 8007958:	080079c1 	.word	0x080079c1
 800795c:	0800793d 	.word	0x0800793d
 8007960:	0800793d 	.word	0x0800793d
 8007964:	0800793d 	.word	0x0800793d
 8007968:	0800793d 	.word	0x0800793d
 800796c:	080079c1 	.word	0x080079c1
 8007970:	0800793d 	.word	0x0800793d
 8007974:	0800793d 	.word	0x0800793d
 8007978:	0800793d 	.word	0x0800793d
 800797c:	0800793d 	.word	0x0800793d
 8007980:	08007ac1 	.word	0x08007ac1
 8007984:	080079eb 	.word	0x080079eb
 8007988:	08007a7b 	.word	0x08007a7b
 800798c:	0800793d 	.word	0x0800793d
 8007990:	0800793d 	.word	0x0800793d
 8007994:	08007ae3 	.word	0x08007ae3
 8007998:	0800793d 	.word	0x0800793d
 800799c:	080079eb 	.word	0x080079eb
 80079a0:	0800793d 	.word	0x0800793d
 80079a4:	0800793d 	.word	0x0800793d
 80079a8:	08007a83 	.word	0x08007a83
 80079ac:	6833      	ldr	r3, [r6, #0]
 80079ae:	1d1a      	adds	r2, r3, #4
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	6032      	str	r2, [r6, #0]
 80079b4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80079b8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80079bc:	2301      	movs	r3, #1
 80079be:	e09d      	b.n	8007afc <_printf_i+0x1e8>
 80079c0:	6833      	ldr	r3, [r6, #0]
 80079c2:	6820      	ldr	r0, [r4, #0]
 80079c4:	1d19      	adds	r1, r3, #4
 80079c6:	6031      	str	r1, [r6, #0]
 80079c8:	0606      	lsls	r6, r0, #24
 80079ca:	d501      	bpl.n	80079d0 <_printf_i+0xbc>
 80079cc:	681d      	ldr	r5, [r3, #0]
 80079ce:	e003      	b.n	80079d8 <_printf_i+0xc4>
 80079d0:	0645      	lsls	r5, r0, #25
 80079d2:	d5fb      	bpl.n	80079cc <_printf_i+0xb8>
 80079d4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80079d8:	2d00      	cmp	r5, #0
 80079da:	da03      	bge.n	80079e4 <_printf_i+0xd0>
 80079dc:	232d      	movs	r3, #45	@ 0x2d
 80079de:	426d      	negs	r5, r5
 80079e0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80079e4:	4859      	ldr	r0, [pc, #356]	@ (8007b4c <_printf_i+0x238>)
 80079e6:	230a      	movs	r3, #10
 80079e8:	e011      	b.n	8007a0e <_printf_i+0xfa>
 80079ea:	6821      	ldr	r1, [r4, #0]
 80079ec:	6833      	ldr	r3, [r6, #0]
 80079ee:	0608      	lsls	r0, r1, #24
 80079f0:	f853 5b04 	ldr.w	r5, [r3], #4
 80079f4:	d402      	bmi.n	80079fc <_printf_i+0xe8>
 80079f6:	0649      	lsls	r1, r1, #25
 80079f8:	bf48      	it	mi
 80079fa:	b2ad      	uxthmi	r5, r5
 80079fc:	2f6f      	cmp	r7, #111	@ 0x6f
 80079fe:	6033      	str	r3, [r6, #0]
 8007a00:	4852      	ldr	r0, [pc, #328]	@ (8007b4c <_printf_i+0x238>)
 8007a02:	bf14      	ite	ne
 8007a04:	230a      	movne	r3, #10
 8007a06:	2308      	moveq	r3, #8
 8007a08:	2100      	movs	r1, #0
 8007a0a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007a0e:	6866      	ldr	r6, [r4, #4]
 8007a10:	2e00      	cmp	r6, #0
 8007a12:	60a6      	str	r6, [r4, #8]
 8007a14:	bfa2      	ittt	ge
 8007a16:	6821      	ldrge	r1, [r4, #0]
 8007a18:	f021 0104 	bicge.w	r1, r1, #4
 8007a1c:	6021      	strge	r1, [r4, #0]
 8007a1e:	b90d      	cbnz	r5, 8007a24 <_printf_i+0x110>
 8007a20:	2e00      	cmp	r6, #0
 8007a22:	d04b      	beq.n	8007abc <_printf_i+0x1a8>
 8007a24:	4616      	mov	r6, r2
 8007a26:	fbb5 f1f3 	udiv	r1, r5, r3
 8007a2a:	fb03 5711 	mls	r7, r3, r1, r5
 8007a2e:	5dc7      	ldrb	r7, [r0, r7]
 8007a30:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007a34:	462f      	mov	r7, r5
 8007a36:	460d      	mov	r5, r1
 8007a38:	42bb      	cmp	r3, r7
 8007a3a:	d9f4      	bls.n	8007a26 <_printf_i+0x112>
 8007a3c:	2b08      	cmp	r3, #8
 8007a3e:	d10b      	bne.n	8007a58 <_printf_i+0x144>
 8007a40:	6823      	ldr	r3, [r4, #0]
 8007a42:	07df      	lsls	r7, r3, #31
 8007a44:	d508      	bpl.n	8007a58 <_printf_i+0x144>
 8007a46:	6923      	ldr	r3, [r4, #16]
 8007a48:	6861      	ldr	r1, [r4, #4]
 8007a4a:	4299      	cmp	r1, r3
 8007a4c:	bfde      	ittt	le
 8007a4e:	2330      	movle	r3, #48	@ 0x30
 8007a50:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007a54:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007a58:	1b92      	subs	r2, r2, r6
 8007a5a:	6122      	str	r2, [r4, #16]
 8007a5c:	464b      	mov	r3, r9
 8007a5e:	aa03      	add	r2, sp, #12
 8007a60:	4621      	mov	r1, r4
 8007a62:	4640      	mov	r0, r8
 8007a64:	f8cd a000 	str.w	sl, [sp]
 8007a68:	f7ff fee2 	bl	8007830 <_printf_common>
 8007a6c:	3001      	adds	r0, #1
 8007a6e:	d14a      	bne.n	8007b06 <_printf_i+0x1f2>
 8007a70:	f04f 30ff 	mov.w	r0, #4294967295
 8007a74:	b004      	add	sp, #16
 8007a76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a7a:	6823      	ldr	r3, [r4, #0]
 8007a7c:	f043 0320 	orr.w	r3, r3, #32
 8007a80:	6023      	str	r3, [r4, #0]
 8007a82:	2778      	movs	r7, #120	@ 0x78
 8007a84:	4832      	ldr	r0, [pc, #200]	@ (8007b50 <_printf_i+0x23c>)
 8007a86:	6823      	ldr	r3, [r4, #0]
 8007a88:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007a8c:	061f      	lsls	r7, r3, #24
 8007a8e:	6831      	ldr	r1, [r6, #0]
 8007a90:	f851 5b04 	ldr.w	r5, [r1], #4
 8007a94:	d402      	bmi.n	8007a9c <_printf_i+0x188>
 8007a96:	065f      	lsls	r7, r3, #25
 8007a98:	bf48      	it	mi
 8007a9a:	b2ad      	uxthmi	r5, r5
 8007a9c:	6031      	str	r1, [r6, #0]
 8007a9e:	07d9      	lsls	r1, r3, #31
 8007aa0:	bf44      	itt	mi
 8007aa2:	f043 0320 	orrmi.w	r3, r3, #32
 8007aa6:	6023      	strmi	r3, [r4, #0]
 8007aa8:	b11d      	cbz	r5, 8007ab2 <_printf_i+0x19e>
 8007aaa:	2310      	movs	r3, #16
 8007aac:	e7ac      	b.n	8007a08 <_printf_i+0xf4>
 8007aae:	4827      	ldr	r0, [pc, #156]	@ (8007b4c <_printf_i+0x238>)
 8007ab0:	e7e9      	b.n	8007a86 <_printf_i+0x172>
 8007ab2:	6823      	ldr	r3, [r4, #0]
 8007ab4:	f023 0320 	bic.w	r3, r3, #32
 8007ab8:	6023      	str	r3, [r4, #0]
 8007aba:	e7f6      	b.n	8007aaa <_printf_i+0x196>
 8007abc:	4616      	mov	r6, r2
 8007abe:	e7bd      	b.n	8007a3c <_printf_i+0x128>
 8007ac0:	6833      	ldr	r3, [r6, #0]
 8007ac2:	6825      	ldr	r5, [r4, #0]
 8007ac4:	1d18      	adds	r0, r3, #4
 8007ac6:	6961      	ldr	r1, [r4, #20]
 8007ac8:	6030      	str	r0, [r6, #0]
 8007aca:	062e      	lsls	r6, r5, #24
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	d501      	bpl.n	8007ad4 <_printf_i+0x1c0>
 8007ad0:	6019      	str	r1, [r3, #0]
 8007ad2:	e002      	b.n	8007ada <_printf_i+0x1c6>
 8007ad4:	0668      	lsls	r0, r5, #25
 8007ad6:	d5fb      	bpl.n	8007ad0 <_printf_i+0x1bc>
 8007ad8:	8019      	strh	r1, [r3, #0]
 8007ada:	2300      	movs	r3, #0
 8007adc:	4616      	mov	r6, r2
 8007ade:	6123      	str	r3, [r4, #16]
 8007ae0:	e7bc      	b.n	8007a5c <_printf_i+0x148>
 8007ae2:	6833      	ldr	r3, [r6, #0]
 8007ae4:	2100      	movs	r1, #0
 8007ae6:	1d1a      	adds	r2, r3, #4
 8007ae8:	6032      	str	r2, [r6, #0]
 8007aea:	681e      	ldr	r6, [r3, #0]
 8007aec:	6862      	ldr	r2, [r4, #4]
 8007aee:	4630      	mov	r0, r6
 8007af0:	f000 f980 	bl	8007df4 <memchr>
 8007af4:	b108      	cbz	r0, 8007afa <_printf_i+0x1e6>
 8007af6:	1b80      	subs	r0, r0, r6
 8007af8:	6060      	str	r0, [r4, #4]
 8007afa:	6863      	ldr	r3, [r4, #4]
 8007afc:	6123      	str	r3, [r4, #16]
 8007afe:	2300      	movs	r3, #0
 8007b00:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007b04:	e7aa      	b.n	8007a5c <_printf_i+0x148>
 8007b06:	6923      	ldr	r3, [r4, #16]
 8007b08:	4632      	mov	r2, r6
 8007b0a:	4649      	mov	r1, r9
 8007b0c:	4640      	mov	r0, r8
 8007b0e:	47d0      	blx	sl
 8007b10:	3001      	adds	r0, #1
 8007b12:	d0ad      	beq.n	8007a70 <_printf_i+0x15c>
 8007b14:	6823      	ldr	r3, [r4, #0]
 8007b16:	079b      	lsls	r3, r3, #30
 8007b18:	d413      	bmi.n	8007b42 <_printf_i+0x22e>
 8007b1a:	68e0      	ldr	r0, [r4, #12]
 8007b1c:	9b03      	ldr	r3, [sp, #12]
 8007b1e:	4298      	cmp	r0, r3
 8007b20:	bfb8      	it	lt
 8007b22:	4618      	movlt	r0, r3
 8007b24:	e7a6      	b.n	8007a74 <_printf_i+0x160>
 8007b26:	2301      	movs	r3, #1
 8007b28:	4632      	mov	r2, r6
 8007b2a:	4649      	mov	r1, r9
 8007b2c:	4640      	mov	r0, r8
 8007b2e:	47d0      	blx	sl
 8007b30:	3001      	adds	r0, #1
 8007b32:	d09d      	beq.n	8007a70 <_printf_i+0x15c>
 8007b34:	3501      	adds	r5, #1
 8007b36:	68e3      	ldr	r3, [r4, #12]
 8007b38:	9903      	ldr	r1, [sp, #12]
 8007b3a:	1a5b      	subs	r3, r3, r1
 8007b3c:	42ab      	cmp	r3, r5
 8007b3e:	dcf2      	bgt.n	8007b26 <_printf_i+0x212>
 8007b40:	e7eb      	b.n	8007b1a <_printf_i+0x206>
 8007b42:	2500      	movs	r5, #0
 8007b44:	f104 0619 	add.w	r6, r4, #25
 8007b48:	e7f5      	b.n	8007b36 <_printf_i+0x222>
 8007b4a:	bf00      	nop
 8007b4c:	08008049 	.word	0x08008049
 8007b50:	0800805a 	.word	0x0800805a

08007b54 <__sflush_r>:
 8007b54:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007b58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b5c:	0716      	lsls	r6, r2, #28
 8007b5e:	4605      	mov	r5, r0
 8007b60:	460c      	mov	r4, r1
 8007b62:	d454      	bmi.n	8007c0e <__sflush_r+0xba>
 8007b64:	684b      	ldr	r3, [r1, #4]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	dc02      	bgt.n	8007b70 <__sflush_r+0x1c>
 8007b6a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	dd48      	ble.n	8007c02 <__sflush_r+0xae>
 8007b70:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007b72:	2e00      	cmp	r6, #0
 8007b74:	d045      	beq.n	8007c02 <__sflush_r+0xae>
 8007b76:	2300      	movs	r3, #0
 8007b78:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007b7c:	682f      	ldr	r7, [r5, #0]
 8007b7e:	6a21      	ldr	r1, [r4, #32]
 8007b80:	602b      	str	r3, [r5, #0]
 8007b82:	d030      	beq.n	8007be6 <__sflush_r+0x92>
 8007b84:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007b86:	89a3      	ldrh	r3, [r4, #12]
 8007b88:	0759      	lsls	r1, r3, #29
 8007b8a:	d505      	bpl.n	8007b98 <__sflush_r+0x44>
 8007b8c:	6863      	ldr	r3, [r4, #4]
 8007b8e:	1ad2      	subs	r2, r2, r3
 8007b90:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007b92:	b10b      	cbz	r3, 8007b98 <__sflush_r+0x44>
 8007b94:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007b96:	1ad2      	subs	r2, r2, r3
 8007b98:	2300      	movs	r3, #0
 8007b9a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007b9c:	6a21      	ldr	r1, [r4, #32]
 8007b9e:	4628      	mov	r0, r5
 8007ba0:	47b0      	blx	r6
 8007ba2:	1c43      	adds	r3, r0, #1
 8007ba4:	89a3      	ldrh	r3, [r4, #12]
 8007ba6:	d106      	bne.n	8007bb6 <__sflush_r+0x62>
 8007ba8:	6829      	ldr	r1, [r5, #0]
 8007baa:	291d      	cmp	r1, #29
 8007bac:	d82b      	bhi.n	8007c06 <__sflush_r+0xb2>
 8007bae:	4a2a      	ldr	r2, [pc, #168]	@ (8007c58 <__sflush_r+0x104>)
 8007bb0:	410a      	asrs	r2, r1
 8007bb2:	07d6      	lsls	r6, r2, #31
 8007bb4:	d427      	bmi.n	8007c06 <__sflush_r+0xb2>
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	04d9      	lsls	r1, r3, #19
 8007bba:	6062      	str	r2, [r4, #4]
 8007bbc:	6922      	ldr	r2, [r4, #16]
 8007bbe:	6022      	str	r2, [r4, #0]
 8007bc0:	d504      	bpl.n	8007bcc <__sflush_r+0x78>
 8007bc2:	1c42      	adds	r2, r0, #1
 8007bc4:	d101      	bne.n	8007bca <__sflush_r+0x76>
 8007bc6:	682b      	ldr	r3, [r5, #0]
 8007bc8:	b903      	cbnz	r3, 8007bcc <__sflush_r+0x78>
 8007bca:	6560      	str	r0, [r4, #84]	@ 0x54
 8007bcc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007bce:	602f      	str	r7, [r5, #0]
 8007bd0:	b1b9      	cbz	r1, 8007c02 <__sflush_r+0xae>
 8007bd2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007bd6:	4299      	cmp	r1, r3
 8007bd8:	d002      	beq.n	8007be0 <__sflush_r+0x8c>
 8007bda:	4628      	mov	r0, r5
 8007bdc:	f7ff fbee 	bl	80073bc <_free_r>
 8007be0:	2300      	movs	r3, #0
 8007be2:	6363      	str	r3, [r4, #52]	@ 0x34
 8007be4:	e00d      	b.n	8007c02 <__sflush_r+0xae>
 8007be6:	2301      	movs	r3, #1
 8007be8:	4628      	mov	r0, r5
 8007bea:	47b0      	blx	r6
 8007bec:	4602      	mov	r2, r0
 8007bee:	1c50      	adds	r0, r2, #1
 8007bf0:	d1c9      	bne.n	8007b86 <__sflush_r+0x32>
 8007bf2:	682b      	ldr	r3, [r5, #0]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d0c6      	beq.n	8007b86 <__sflush_r+0x32>
 8007bf8:	2b1d      	cmp	r3, #29
 8007bfa:	d001      	beq.n	8007c00 <__sflush_r+0xac>
 8007bfc:	2b16      	cmp	r3, #22
 8007bfe:	d11d      	bne.n	8007c3c <__sflush_r+0xe8>
 8007c00:	602f      	str	r7, [r5, #0]
 8007c02:	2000      	movs	r0, #0
 8007c04:	e021      	b.n	8007c4a <__sflush_r+0xf6>
 8007c06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007c0a:	b21b      	sxth	r3, r3
 8007c0c:	e01a      	b.n	8007c44 <__sflush_r+0xf0>
 8007c0e:	690f      	ldr	r7, [r1, #16]
 8007c10:	2f00      	cmp	r7, #0
 8007c12:	d0f6      	beq.n	8007c02 <__sflush_r+0xae>
 8007c14:	0793      	lsls	r3, r2, #30
 8007c16:	680e      	ldr	r6, [r1, #0]
 8007c18:	600f      	str	r7, [r1, #0]
 8007c1a:	bf0c      	ite	eq
 8007c1c:	694b      	ldreq	r3, [r1, #20]
 8007c1e:	2300      	movne	r3, #0
 8007c20:	eba6 0807 	sub.w	r8, r6, r7
 8007c24:	608b      	str	r3, [r1, #8]
 8007c26:	f1b8 0f00 	cmp.w	r8, #0
 8007c2a:	ddea      	ble.n	8007c02 <__sflush_r+0xae>
 8007c2c:	4643      	mov	r3, r8
 8007c2e:	463a      	mov	r2, r7
 8007c30:	6a21      	ldr	r1, [r4, #32]
 8007c32:	4628      	mov	r0, r5
 8007c34:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007c36:	47b0      	blx	r6
 8007c38:	2800      	cmp	r0, #0
 8007c3a:	dc08      	bgt.n	8007c4e <__sflush_r+0xfa>
 8007c3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c40:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007c44:	f04f 30ff 	mov.w	r0, #4294967295
 8007c48:	81a3      	strh	r3, [r4, #12]
 8007c4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c4e:	4407      	add	r7, r0
 8007c50:	eba8 0800 	sub.w	r8, r8, r0
 8007c54:	e7e7      	b.n	8007c26 <__sflush_r+0xd2>
 8007c56:	bf00      	nop
 8007c58:	dfbffffe 	.word	0xdfbffffe

08007c5c <_fflush_r>:
 8007c5c:	b538      	push	{r3, r4, r5, lr}
 8007c5e:	690b      	ldr	r3, [r1, #16]
 8007c60:	4605      	mov	r5, r0
 8007c62:	460c      	mov	r4, r1
 8007c64:	b913      	cbnz	r3, 8007c6c <_fflush_r+0x10>
 8007c66:	2500      	movs	r5, #0
 8007c68:	4628      	mov	r0, r5
 8007c6a:	bd38      	pop	{r3, r4, r5, pc}
 8007c6c:	b118      	cbz	r0, 8007c76 <_fflush_r+0x1a>
 8007c6e:	6a03      	ldr	r3, [r0, #32]
 8007c70:	b90b      	cbnz	r3, 8007c76 <_fflush_r+0x1a>
 8007c72:	f7ff fa9b 	bl	80071ac <__sinit>
 8007c76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d0f3      	beq.n	8007c66 <_fflush_r+0xa>
 8007c7e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007c80:	07d0      	lsls	r0, r2, #31
 8007c82:	d404      	bmi.n	8007c8e <_fflush_r+0x32>
 8007c84:	0599      	lsls	r1, r3, #22
 8007c86:	d402      	bmi.n	8007c8e <_fflush_r+0x32>
 8007c88:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007c8a:	f7ff fb94 	bl	80073b6 <__retarget_lock_acquire_recursive>
 8007c8e:	4628      	mov	r0, r5
 8007c90:	4621      	mov	r1, r4
 8007c92:	f7ff ff5f 	bl	8007b54 <__sflush_r>
 8007c96:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007c98:	4605      	mov	r5, r0
 8007c9a:	07da      	lsls	r2, r3, #31
 8007c9c:	d4e4      	bmi.n	8007c68 <_fflush_r+0xc>
 8007c9e:	89a3      	ldrh	r3, [r4, #12]
 8007ca0:	059b      	lsls	r3, r3, #22
 8007ca2:	d4e1      	bmi.n	8007c68 <_fflush_r+0xc>
 8007ca4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007ca6:	f7ff fb87 	bl	80073b8 <__retarget_lock_release_recursive>
 8007caa:	e7dd      	b.n	8007c68 <_fflush_r+0xc>

08007cac <__swbuf_r>:
 8007cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cae:	460e      	mov	r6, r1
 8007cb0:	4614      	mov	r4, r2
 8007cb2:	4605      	mov	r5, r0
 8007cb4:	b118      	cbz	r0, 8007cbe <__swbuf_r+0x12>
 8007cb6:	6a03      	ldr	r3, [r0, #32]
 8007cb8:	b90b      	cbnz	r3, 8007cbe <__swbuf_r+0x12>
 8007cba:	f7ff fa77 	bl	80071ac <__sinit>
 8007cbe:	69a3      	ldr	r3, [r4, #24]
 8007cc0:	60a3      	str	r3, [r4, #8]
 8007cc2:	89a3      	ldrh	r3, [r4, #12]
 8007cc4:	071a      	lsls	r2, r3, #28
 8007cc6:	d501      	bpl.n	8007ccc <__swbuf_r+0x20>
 8007cc8:	6923      	ldr	r3, [r4, #16]
 8007cca:	b943      	cbnz	r3, 8007cde <__swbuf_r+0x32>
 8007ccc:	4621      	mov	r1, r4
 8007cce:	4628      	mov	r0, r5
 8007cd0:	f000 f82a 	bl	8007d28 <__swsetup_r>
 8007cd4:	b118      	cbz	r0, 8007cde <__swbuf_r+0x32>
 8007cd6:	f04f 37ff 	mov.w	r7, #4294967295
 8007cda:	4638      	mov	r0, r7
 8007cdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007cde:	6823      	ldr	r3, [r4, #0]
 8007ce0:	b2f6      	uxtb	r6, r6
 8007ce2:	6922      	ldr	r2, [r4, #16]
 8007ce4:	4637      	mov	r7, r6
 8007ce6:	1a98      	subs	r0, r3, r2
 8007ce8:	6963      	ldr	r3, [r4, #20]
 8007cea:	4283      	cmp	r3, r0
 8007cec:	dc05      	bgt.n	8007cfa <__swbuf_r+0x4e>
 8007cee:	4621      	mov	r1, r4
 8007cf0:	4628      	mov	r0, r5
 8007cf2:	f7ff ffb3 	bl	8007c5c <_fflush_r>
 8007cf6:	2800      	cmp	r0, #0
 8007cf8:	d1ed      	bne.n	8007cd6 <__swbuf_r+0x2a>
 8007cfa:	68a3      	ldr	r3, [r4, #8]
 8007cfc:	3b01      	subs	r3, #1
 8007cfe:	60a3      	str	r3, [r4, #8]
 8007d00:	6823      	ldr	r3, [r4, #0]
 8007d02:	1c5a      	adds	r2, r3, #1
 8007d04:	6022      	str	r2, [r4, #0]
 8007d06:	701e      	strb	r6, [r3, #0]
 8007d08:	1c43      	adds	r3, r0, #1
 8007d0a:	6962      	ldr	r2, [r4, #20]
 8007d0c:	429a      	cmp	r2, r3
 8007d0e:	d004      	beq.n	8007d1a <__swbuf_r+0x6e>
 8007d10:	89a3      	ldrh	r3, [r4, #12]
 8007d12:	07db      	lsls	r3, r3, #31
 8007d14:	d5e1      	bpl.n	8007cda <__swbuf_r+0x2e>
 8007d16:	2e0a      	cmp	r6, #10
 8007d18:	d1df      	bne.n	8007cda <__swbuf_r+0x2e>
 8007d1a:	4621      	mov	r1, r4
 8007d1c:	4628      	mov	r0, r5
 8007d1e:	f7ff ff9d 	bl	8007c5c <_fflush_r>
 8007d22:	2800      	cmp	r0, #0
 8007d24:	d0d9      	beq.n	8007cda <__swbuf_r+0x2e>
 8007d26:	e7d6      	b.n	8007cd6 <__swbuf_r+0x2a>

08007d28 <__swsetup_r>:
 8007d28:	b538      	push	{r3, r4, r5, lr}
 8007d2a:	4b29      	ldr	r3, [pc, #164]	@ (8007dd0 <__swsetup_r+0xa8>)
 8007d2c:	4605      	mov	r5, r0
 8007d2e:	460c      	mov	r4, r1
 8007d30:	6818      	ldr	r0, [r3, #0]
 8007d32:	b118      	cbz	r0, 8007d3c <__swsetup_r+0x14>
 8007d34:	6a03      	ldr	r3, [r0, #32]
 8007d36:	b90b      	cbnz	r3, 8007d3c <__swsetup_r+0x14>
 8007d38:	f7ff fa38 	bl	80071ac <__sinit>
 8007d3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d40:	0719      	lsls	r1, r3, #28
 8007d42:	d422      	bmi.n	8007d8a <__swsetup_r+0x62>
 8007d44:	06da      	lsls	r2, r3, #27
 8007d46:	d407      	bmi.n	8007d58 <__swsetup_r+0x30>
 8007d48:	2209      	movs	r2, #9
 8007d4a:	602a      	str	r2, [r5, #0]
 8007d4c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007d50:	f04f 30ff 	mov.w	r0, #4294967295
 8007d54:	81a3      	strh	r3, [r4, #12]
 8007d56:	e033      	b.n	8007dc0 <__swsetup_r+0x98>
 8007d58:	0758      	lsls	r0, r3, #29
 8007d5a:	d512      	bpl.n	8007d82 <__swsetup_r+0x5a>
 8007d5c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007d5e:	b141      	cbz	r1, 8007d72 <__swsetup_r+0x4a>
 8007d60:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007d64:	4299      	cmp	r1, r3
 8007d66:	d002      	beq.n	8007d6e <__swsetup_r+0x46>
 8007d68:	4628      	mov	r0, r5
 8007d6a:	f7ff fb27 	bl	80073bc <_free_r>
 8007d6e:	2300      	movs	r3, #0
 8007d70:	6363      	str	r3, [r4, #52]	@ 0x34
 8007d72:	89a3      	ldrh	r3, [r4, #12]
 8007d74:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007d78:	81a3      	strh	r3, [r4, #12]
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	6063      	str	r3, [r4, #4]
 8007d7e:	6923      	ldr	r3, [r4, #16]
 8007d80:	6023      	str	r3, [r4, #0]
 8007d82:	89a3      	ldrh	r3, [r4, #12]
 8007d84:	f043 0308 	orr.w	r3, r3, #8
 8007d88:	81a3      	strh	r3, [r4, #12]
 8007d8a:	6923      	ldr	r3, [r4, #16]
 8007d8c:	b94b      	cbnz	r3, 8007da2 <__swsetup_r+0x7a>
 8007d8e:	89a3      	ldrh	r3, [r4, #12]
 8007d90:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007d94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007d98:	d003      	beq.n	8007da2 <__swsetup_r+0x7a>
 8007d9a:	4621      	mov	r1, r4
 8007d9c:	4628      	mov	r0, r5
 8007d9e:	f000 f85c 	bl	8007e5a <__smakebuf_r>
 8007da2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007da6:	f013 0201 	ands.w	r2, r3, #1
 8007daa:	d00a      	beq.n	8007dc2 <__swsetup_r+0x9a>
 8007dac:	2200      	movs	r2, #0
 8007dae:	60a2      	str	r2, [r4, #8]
 8007db0:	6962      	ldr	r2, [r4, #20]
 8007db2:	4252      	negs	r2, r2
 8007db4:	61a2      	str	r2, [r4, #24]
 8007db6:	6922      	ldr	r2, [r4, #16]
 8007db8:	b942      	cbnz	r2, 8007dcc <__swsetup_r+0xa4>
 8007dba:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007dbe:	d1c5      	bne.n	8007d4c <__swsetup_r+0x24>
 8007dc0:	bd38      	pop	{r3, r4, r5, pc}
 8007dc2:	0799      	lsls	r1, r3, #30
 8007dc4:	bf58      	it	pl
 8007dc6:	6962      	ldrpl	r2, [r4, #20]
 8007dc8:	60a2      	str	r2, [r4, #8]
 8007dca:	e7f4      	b.n	8007db6 <__swsetup_r+0x8e>
 8007dcc:	2000      	movs	r0, #0
 8007dce:	e7f7      	b.n	8007dc0 <__swsetup_r+0x98>
 8007dd0:	20000018 	.word	0x20000018

08007dd4 <_sbrk_r>:
 8007dd4:	b538      	push	{r3, r4, r5, lr}
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	4d05      	ldr	r5, [pc, #20]	@ (8007df0 <_sbrk_r+0x1c>)
 8007dda:	4604      	mov	r4, r0
 8007ddc:	4608      	mov	r0, r1
 8007dde:	602b      	str	r3, [r5, #0]
 8007de0:	f7f8 fe88 	bl	8000af4 <_sbrk>
 8007de4:	1c43      	adds	r3, r0, #1
 8007de6:	d102      	bne.n	8007dee <_sbrk_r+0x1a>
 8007de8:	682b      	ldr	r3, [r5, #0]
 8007dea:	b103      	cbz	r3, 8007dee <_sbrk_r+0x1a>
 8007dec:	6023      	str	r3, [r4, #0]
 8007dee:	bd38      	pop	{r3, r4, r5, pc}
 8007df0:	20000260 	.word	0x20000260

08007df4 <memchr>:
 8007df4:	b2c9      	uxtb	r1, r1
 8007df6:	4603      	mov	r3, r0
 8007df8:	4402      	add	r2, r0
 8007dfa:	b510      	push	{r4, lr}
 8007dfc:	4293      	cmp	r3, r2
 8007dfe:	4618      	mov	r0, r3
 8007e00:	d101      	bne.n	8007e06 <memchr+0x12>
 8007e02:	2000      	movs	r0, #0
 8007e04:	e003      	b.n	8007e0e <memchr+0x1a>
 8007e06:	7804      	ldrb	r4, [r0, #0]
 8007e08:	3301      	adds	r3, #1
 8007e0a:	428c      	cmp	r4, r1
 8007e0c:	d1f6      	bne.n	8007dfc <memchr+0x8>
 8007e0e:	bd10      	pop	{r4, pc}

08007e10 <__swhatbuf_r>:
 8007e10:	b570      	push	{r4, r5, r6, lr}
 8007e12:	460c      	mov	r4, r1
 8007e14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e18:	b096      	sub	sp, #88	@ 0x58
 8007e1a:	4615      	mov	r5, r2
 8007e1c:	2900      	cmp	r1, #0
 8007e1e:	461e      	mov	r6, r3
 8007e20:	da0c      	bge.n	8007e3c <__swhatbuf_r+0x2c>
 8007e22:	89a3      	ldrh	r3, [r4, #12]
 8007e24:	2100      	movs	r1, #0
 8007e26:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007e2a:	bf14      	ite	ne
 8007e2c:	2340      	movne	r3, #64	@ 0x40
 8007e2e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007e32:	2000      	movs	r0, #0
 8007e34:	6031      	str	r1, [r6, #0]
 8007e36:	602b      	str	r3, [r5, #0]
 8007e38:	b016      	add	sp, #88	@ 0x58
 8007e3a:	bd70      	pop	{r4, r5, r6, pc}
 8007e3c:	466a      	mov	r2, sp
 8007e3e:	f000 f849 	bl	8007ed4 <_fstat_r>
 8007e42:	2800      	cmp	r0, #0
 8007e44:	dbed      	blt.n	8007e22 <__swhatbuf_r+0x12>
 8007e46:	9901      	ldr	r1, [sp, #4]
 8007e48:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007e4c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007e50:	4259      	negs	r1, r3
 8007e52:	4159      	adcs	r1, r3
 8007e54:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007e58:	e7eb      	b.n	8007e32 <__swhatbuf_r+0x22>

08007e5a <__smakebuf_r>:
 8007e5a:	898b      	ldrh	r3, [r1, #12]
 8007e5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007e5e:	079d      	lsls	r5, r3, #30
 8007e60:	4606      	mov	r6, r0
 8007e62:	460c      	mov	r4, r1
 8007e64:	d507      	bpl.n	8007e76 <__smakebuf_r+0x1c>
 8007e66:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007e6a:	6023      	str	r3, [r4, #0]
 8007e6c:	6123      	str	r3, [r4, #16]
 8007e6e:	2301      	movs	r3, #1
 8007e70:	6163      	str	r3, [r4, #20]
 8007e72:	b003      	add	sp, #12
 8007e74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e76:	ab01      	add	r3, sp, #4
 8007e78:	466a      	mov	r2, sp
 8007e7a:	f7ff ffc9 	bl	8007e10 <__swhatbuf_r>
 8007e7e:	9f00      	ldr	r7, [sp, #0]
 8007e80:	4605      	mov	r5, r0
 8007e82:	4630      	mov	r0, r6
 8007e84:	4639      	mov	r1, r7
 8007e86:	f7ff fb05 	bl	8007494 <_malloc_r>
 8007e8a:	b948      	cbnz	r0, 8007ea0 <__smakebuf_r+0x46>
 8007e8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e90:	059a      	lsls	r2, r3, #22
 8007e92:	d4ee      	bmi.n	8007e72 <__smakebuf_r+0x18>
 8007e94:	f023 0303 	bic.w	r3, r3, #3
 8007e98:	f043 0302 	orr.w	r3, r3, #2
 8007e9c:	81a3      	strh	r3, [r4, #12]
 8007e9e:	e7e2      	b.n	8007e66 <__smakebuf_r+0xc>
 8007ea0:	89a3      	ldrh	r3, [r4, #12]
 8007ea2:	6020      	str	r0, [r4, #0]
 8007ea4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007ea8:	81a3      	strh	r3, [r4, #12]
 8007eaa:	9b01      	ldr	r3, [sp, #4]
 8007eac:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007eb0:	b15b      	cbz	r3, 8007eca <__smakebuf_r+0x70>
 8007eb2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007eb6:	4630      	mov	r0, r6
 8007eb8:	f000 f81e 	bl	8007ef8 <_isatty_r>
 8007ebc:	b128      	cbz	r0, 8007eca <__smakebuf_r+0x70>
 8007ebe:	89a3      	ldrh	r3, [r4, #12]
 8007ec0:	f023 0303 	bic.w	r3, r3, #3
 8007ec4:	f043 0301 	orr.w	r3, r3, #1
 8007ec8:	81a3      	strh	r3, [r4, #12]
 8007eca:	89a3      	ldrh	r3, [r4, #12]
 8007ecc:	431d      	orrs	r5, r3
 8007ece:	81a5      	strh	r5, [r4, #12]
 8007ed0:	e7cf      	b.n	8007e72 <__smakebuf_r+0x18>
	...

08007ed4 <_fstat_r>:
 8007ed4:	b538      	push	{r3, r4, r5, lr}
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	4d06      	ldr	r5, [pc, #24]	@ (8007ef4 <_fstat_r+0x20>)
 8007eda:	4604      	mov	r4, r0
 8007edc:	4608      	mov	r0, r1
 8007ede:	4611      	mov	r1, r2
 8007ee0:	602b      	str	r3, [r5, #0]
 8007ee2:	f7f8 fdde 	bl	8000aa2 <_fstat>
 8007ee6:	1c43      	adds	r3, r0, #1
 8007ee8:	d102      	bne.n	8007ef0 <_fstat_r+0x1c>
 8007eea:	682b      	ldr	r3, [r5, #0]
 8007eec:	b103      	cbz	r3, 8007ef0 <_fstat_r+0x1c>
 8007eee:	6023      	str	r3, [r4, #0]
 8007ef0:	bd38      	pop	{r3, r4, r5, pc}
 8007ef2:	bf00      	nop
 8007ef4:	20000260 	.word	0x20000260

08007ef8 <_isatty_r>:
 8007ef8:	b538      	push	{r3, r4, r5, lr}
 8007efa:	2300      	movs	r3, #0
 8007efc:	4d05      	ldr	r5, [pc, #20]	@ (8007f14 <_isatty_r+0x1c>)
 8007efe:	4604      	mov	r4, r0
 8007f00:	4608      	mov	r0, r1
 8007f02:	602b      	str	r3, [r5, #0]
 8007f04:	f7f8 fddd 	bl	8000ac2 <_isatty>
 8007f08:	1c43      	adds	r3, r0, #1
 8007f0a:	d102      	bne.n	8007f12 <_isatty_r+0x1a>
 8007f0c:	682b      	ldr	r3, [r5, #0]
 8007f0e:	b103      	cbz	r3, 8007f12 <_isatty_r+0x1a>
 8007f10:	6023      	str	r3, [r4, #0]
 8007f12:	bd38      	pop	{r3, r4, r5, pc}
 8007f14:	20000260 	.word	0x20000260

08007f18 <_init>:
 8007f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f1a:	bf00      	nop
 8007f1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f1e:	bc08      	pop	{r3}
 8007f20:	469e      	mov	lr, r3
 8007f22:	4770      	bx	lr

08007f24 <_fini>:
 8007f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f26:	bf00      	nop
 8007f28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f2a:	bc08      	pop	{r3}
 8007f2c:	469e      	mov	lr, r3
 8007f2e:	4770      	bx	lr
