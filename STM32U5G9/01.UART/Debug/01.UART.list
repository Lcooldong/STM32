
01.UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000274  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000119d4  08000278  08000278  00001278  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000530  08011c50  08011c50  00012c50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012180  08012180  000141d4  2**0
                  CONTENTS
  4 .ARM          00000008  08012180  08012180  00013180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012188  08012188  000141d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012188  08012188  00013188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801218c  0801218c  0001318c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08012190  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b54  200001d4  08012364  000141d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000d28  08012364  00014d28  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  000141d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00028471  00000000  00000000  0001420a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004e04  00000000  00000000  0003c67b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001f48  00000000  00000000  00041480  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001818  00000000  00000000  000433c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00046d94  00000000  00000000  00044be0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002d887  00000000  00000000  0008b974  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001a6f4e  00000000  00000000  000b91fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00260149  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009a90  00000000  00000000  0026018c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  00269c1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000278 <__do_global_dtors_aux>:
 8000278:	b510      	push	{r4, lr}
 800027a:	4c05      	ldr	r4, [pc, #20]	@ (8000290 <__do_global_dtors_aux+0x18>)
 800027c:	7823      	ldrb	r3, [r4, #0]
 800027e:	b933      	cbnz	r3, 800028e <__do_global_dtors_aux+0x16>
 8000280:	4b04      	ldr	r3, [pc, #16]	@ (8000294 <__do_global_dtors_aux+0x1c>)
 8000282:	b113      	cbz	r3, 800028a <__do_global_dtors_aux+0x12>
 8000284:	4804      	ldr	r0, [pc, #16]	@ (8000298 <__do_global_dtors_aux+0x20>)
 8000286:	f3af 8000 	nop.w
 800028a:	2301      	movs	r3, #1
 800028c:	7023      	strb	r3, [r4, #0]
 800028e:	bd10      	pop	{r4, pc}
 8000290:	200001d4 	.word	0x200001d4
 8000294:	00000000 	.word	0x00000000
 8000298:	08011c34 	.word	0x08011c34

0800029c <frame_dummy>:
 800029c:	b508      	push	{r3, lr}
 800029e:	4b03      	ldr	r3, [pc, #12]	@ (80002ac <frame_dummy+0x10>)
 80002a0:	b11b      	cbz	r3, 80002aa <frame_dummy+0xe>
 80002a2:	4903      	ldr	r1, [pc, #12]	@ (80002b0 <frame_dummy+0x14>)
 80002a4:	4803      	ldr	r0, [pc, #12]	@ (80002b4 <frame_dummy+0x18>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	bd08      	pop	{r3, pc}
 80002ac:	00000000 	.word	0x00000000
 80002b0:	200001d8 	.word	0x200001d8
 80002b4:	08011c34 	.word	0x08011c34

080002b8 <strlen>:
 80002b8:	4603      	mov	r3, r0
 80002ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002be:	2a00      	cmp	r2, #0
 80002c0:	d1fb      	bne.n	80002ba <strlen+0x2>
 80002c2:	1a18      	subs	r0, r3, r0
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr

080002c8 <__aeabi_drsub>:
 80002c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002cc:	e002      	b.n	80002d4 <__adddf3>
 80002ce:	bf00      	nop

080002d0 <__aeabi_dsub>:
 80002d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002d4 <__adddf3>:
 80002d4:	b530      	push	{r4, r5, lr}
 80002d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002de:	ea94 0f05 	teq	r4, r5
 80002e2:	bf08      	it	eq
 80002e4:	ea90 0f02 	teqeq	r0, r2
 80002e8:	bf1f      	itttt	ne
 80002ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002fa:	f000 80e2 	beq.w	80004c2 <__adddf3+0x1ee>
 80002fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000302:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000306:	bfb8      	it	lt
 8000308:	426d      	neglt	r5, r5
 800030a:	dd0c      	ble.n	8000326 <__adddf3+0x52>
 800030c:	442c      	add	r4, r5
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	ea82 0000 	eor.w	r0, r2, r0
 800031a:	ea83 0101 	eor.w	r1, r3, r1
 800031e:	ea80 0202 	eor.w	r2, r0, r2
 8000322:	ea81 0303 	eor.w	r3, r1, r3
 8000326:	2d36      	cmp	r5, #54	@ 0x36
 8000328:	bf88      	it	hi
 800032a:	bd30      	pophi	{r4, r5, pc}
 800032c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000330:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000334:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000338:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800033c:	d002      	beq.n	8000344 <__adddf3+0x70>
 800033e:	4240      	negs	r0, r0
 8000340:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000344:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000348:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800034c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000350:	d002      	beq.n	8000358 <__adddf3+0x84>
 8000352:	4252      	negs	r2, r2
 8000354:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000358:	ea94 0f05 	teq	r4, r5
 800035c:	f000 80a7 	beq.w	80004ae <__adddf3+0x1da>
 8000360:	f1a4 0401 	sub.w	r4, r4, #1
 8000364:	f1d5 0e20 	rsbs	lr, r5, #32
 8000368:	db0d      	blt.n	8000386 <__adddf3+0xb2>
 800036a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800036e:	fa22 f205 	lsr.w	r2, r2, r5
 8000372:	1880      	adds	r0, r0, r2
 8000374:	f141 0100 	adc.w	r1, r1, #0
 8000378:	fa03 f20e 	lsl.w	r2, r3, lr
 800037c:	1880      	adds	r0, r0, r2
 800037e:	fa43 f305 	asr.w	r3, r3, r5
 8000382:	4159      	adcs	r1, r3
 8000384:	e00e      	b.n	80003a4 <__adddf3+0xd0>
 8000386:	f1a5 0520 	sub.w	r5, r5, #32
 800038a:	f10e 0e20 	add.w	lr, lr, #32
 800038e:	2a01      	cmp	r2, #1
 8000390:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000394:	bf28      	it	cs
 8000396:	f04c 0c02 	orrcs.w	ip, ip, #2
 800039a:	fa43 f305 	asr.w	r3, r3, r5
 800039e:	18c0      	adds	r0, r0, r3
 80003a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a8:	d507      	bpl.n	80003ba <__adddf3+0xe6>
 80003aa:	f04f 0e00 	mov.w	lr, #0
 80003ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80003b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003be:	d31b      	bcc.n	80003f8 <__adddf3+0x124>
 80003c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003c4:	d30c      	bcc.n	80003e0 <__adddf3+0x10c>
 80003c6:	0849      	lsrs	r1, r1, #1
 80003c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d0:	f104 0401 	add.w	r4, r4, #1
 80003d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003dc:	f080 809a 	bcs.w	8000514 <__adddf3+0x240>
 80003e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003e4:	bf08      	it	eq
 80003e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003ea:	f150 0000 	adcs.w	r0, r0, #0
 80003ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003f2:	ea41 0105 	orr.w	r1, r1, r5
 80003f6:	bd30      	pop	{r4, r5, pc}
 80003f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003fc:	4140      	adcs	r0, r0
 80003fe:	eb41 0101 	adc.w	r1, r1, r1
 8000402:	3c01      	subs	r4, #1
 8000404:	bf28      	it	cs
 8000406:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800040a:	d2e9      	bcs.n	80003e0 <__adddf3+0x10c>
 800040c:	f091 0f00 	teq	r1, #0
 8000410:	bf04      	itt	eq
 8000412:	4601      	moveq	r1, r0
 8000414:	2000      	moveq	r0, #0
 8000416:	fab1 f381 	clz	r3, r1
 800041a:	bf08      	it	eq
 800041c:	3320      	addeq	r3, #32
 800041e:	f1a3 030b 	sub.w	r3, r3, #11
 8000422:	f1b3 0220 	subs.w	r2, r3, #32
 8000426:	da0c      	bge.n	8000442 <__adddf3+0x16e>
 8000428:	320c      	adds	r2, #12
 800042a:	dd08      	ble.n	800043e <__adddf3+0x16a>
 800042c:	f102 0c14 	add.w	ip, r2, #20
 8000430:	f1c2 020c 	rsb	r2, r2, #12
 8000434:	fa01 f00c 	lsl.w	r0, r1, ip
 8000438:	fa21 f102 	lsr.w	r1, r1, r2
 800043c:	e00c      	b.n	8000458 <__adddf3+0x184>
 800043e:	f102 0214 	add.w	r2, r2, #20
 8000442:	bfd8      	it	le
 8000444:	f1c2 0c20 	rsble	ip, r2, #32
 8000448:	fa01 f102 	lsl.w	r1, r1, r2
 800044c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000450:	bfdc      	itt	le
 8000452:	ea41 010c 	orrle.w	r1, r1, ip
 8000456:	4090      	lslle	r0, r2
 8000458:	1ae4      	subs	r4, r4, r3
 800045a:	bfa2      	ittt	ge
 800045c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000460:	4329      	orrge	r1, r5
 8000462:	bd30      	popge	{r4, r5, pc}
 8000464:	ea6f 0404 	mvn.w	r4, r4
 8000468:	3c1f      	subs	r4, #31
 800046a:	da1c      	bge.n	80004a6 <__adddf3+0x1d2>
 800046c:	340c      	adds	r4, #12
 800046e:	dc0e      	bgt.n	800048e <__adddf3+0x1ba>
 8000470:	f104 0414 	add.w	r4, r4, #20
 8000474:	f1c4 0220 	rsb	r2, r4, #32
 8000478:	fa20 f004 	lsr.w	r0, r0, r4
 800047c:	fa01 f302 	lsl.w	r3, r1, r2
 8000480:	ea40 0003 	orr.w	r0, r0, r3
 8000484:	fa21 f304 	lsr.w	r3, r1, r4
 8000488:	ea45 0103 	orr.w	r1, r5, r3
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	f1c4 040c 	rsb	r4, r4, #12
 8000492:	f1c4 0220 	rsb	r2, r4, #32
 8000496:	fa20 f002 	lsr.w	r0, r0, r2
 800049a:	fa01 f304 	lsl.w	r3, r1, r4
 800049e:	ea40 0003 	orr.w	r0, r0, r3
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	fa21 f004 	lsr.w	r0, r1, r4
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	f094 0f00 	teq	r4, #0
 80004b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004b6:	bf06      	itte	eq
 80004b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004bc:	3401      	addeq	r4, #1
 80004be:	3d01      	subne	r5, #1
 80004c0:	e74e      	b.n	8000360 <__adddf3+0x8c>
 80004c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004c6:	bf18      	it	ne
 80004c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004cc:	d029      	beq.n	8000522 <__adddf3+0x24e>
 80004ce:	ea94 0f05 	teq	r4, r5
 80004d2:	bf08      	it	eq
 80004d4:	ea90 0f02 	teqeq	r0, r2
 80004d8:	d005      	beq.n	80004e6 <__adddf3+0x212>
 80004da:	ea54 0c00 	orrs.w	ip, r4, r0
 80004de:	bf04      	itt	eq
 80004e0:	4619      	moveq	r1, r3
 80004e2:	4610      	moveq	r0, r2
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	ea91 0f03 	teq	r1, r3
 80004ea:	bf1e      	ittt	ne
 80004ec:	2100      	movne	r1, #0
 80004ee:	2000      	movne	r0, #0
 80004f0:	bd30      	popne	{r4, r5, pc}
 80004f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004f6:	d105      	bne.n	8000504 <__adddf3+0x230>
 80004f8:	0040      	lsls	r0, r0, #1
 80004fa:	4149      	adcs	r1, r1
 80004fc:	bf28      	it	cs
 80004fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000502:	bd30      	pop	{r4, r5, pc}
 8000504:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000508:	bf3c      	itt	cc
 800050a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800050e:	bd30      	popcc	{r4, r5, pc}
 8000510:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000514:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000518:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800051c:	f04f 0000 	mov.w	r0, #0
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000526:	bf1a      	itte	ne
 8000528:	4619      	movne	r1, r3
 800052a:	4610      	movne	r0, r2
 800052c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000530:	bf1c      	itt	ne
 8000532:	460b      	movne	r3, r1
 8000534:	4602      	movne	r2, r0
 8000536:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800053a:	bf06      	itte	eq
 800053c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000540:	ea91 0f03 	teqeq	r1, r3
 8000544:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	bf00      	nop

0800054c <__aeabi_ui2d>:
 800054c:	f090 0f00 	teq	r0, #0
 8000550:	bf04      	itt	eq
 8000552:	2100      	moveq	r1, #0
 8000554:	4770      	bxeq	lr
 8000556:	b530      	push	{r4, r5, lr}
 8000558:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800055c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000560:	f04f 0500 	mov.w	r5, #0
 8000564:	f04f 0100 	mov.w	r1, #0
 8000568:	e750      	b.n	800040c <__adddf3+0x138>
 800056a:	bf00      	nop

0800056c <__aeabi_i2d>:
 800056c:	f090 0f00 	teq	r0, #0
 8000570:	bf04      	itt	eq
 8000572:	2100      	moveq	r1, #0
 8000574:	4770      	bxeq	lr
 8000576:	b530      	push	{r4, r5, lr}
 8000578:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800057c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000580:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000584:	bf48      	it	mi
 8000586:	4240      	negmi	r0, r0
 8000588:	f04f 0100 	mov.w	r1, #0
 800058c:	e73e      	b.n	800040c <__adddf3+0x138>
 800058e:	bf00      	nop

08000590 <__aeabi_f2d>:
 8000590:	0042      	lsls	r2, r0, #1
 8000592:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000596:	ea4f 0131 	mov.w	r1, r1, rrx
 800059a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800059e:	bf1f      	itttt	ne
 80005a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005ac:	4770      	bxne	lr
 80005ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005b2:	bf08      	it	eq
 80005b4:	4770      	bxeq	lr
 80005b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005ba:	bf04      	itt	eq
 80005bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c0:	4770      	bxeq	lr
 80005c2:	b530      	push	{r4, r5, lr}
 80005c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d0:	e71c      	b.n	800040c <__adddf3+0x138>
 80005d2:	bf00      	nop

080005d4 <__aeabi_ul2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	e00a      	b.n	80005fa <__aeabi_l2d+0x16>

080005e4 <__aeabi_l2d>:
 80005e4:	ea50 0201 	orrs.w	r2, r0, r1
 80005e8:	bf08      	it	eq
 80005ea:	4770      	bxeq	lr
 80005ec:	b530      	push	{r4, r5, lr}
 80005ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005f2:	d502      	bpl.n	80005fa <__aeabi_l2d+0x16>
 80005f4:	4240      	negs	r0, r0
 80005f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000602:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000606:	f43f aed8 	beq.w	80003ba <__adddf3+0xe6>
 800060a:	f04f 0203 	mov.w	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000622:	f1c2 0320 	rsb	r3, r2, #32
 8000626:	fa00 fc03 	lsl.w	ip, r0, r3
 800062a:	fa20 f002 	lsr.w	r0, r0, r2
 800062e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000632:	ea40 000e 	orr.w	r0, r0, lr
 8000636:	fa21 f102 	lsr.w	r1, r1, r2
 800063a:	4414      	add	r4, r2
 800063c:	e6bd      	b.n	80003ba <__adddf3+0xe6>
 800063e:	bf00      	nop

08000640 <__aeabi_dmul>:
 8000640:	b570      	push	{r4, r5, r6, lr}
 8000642:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000646:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800064a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800064e:	bf1d      	ittte	ne
 8000650:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000654:	ea94 0f0c 	teqne	r4, ip
 8000658:	ea95 0f0c 	teqne	r5, ip
 800065c:	f000 f8de 	bleq	800081c <__aeabi_dmul+0x1dc>
 8000660:	442c      	add	r4, r5
 8000662:	ea81 0603 	eor.w	r6, r1, r3
 8000666:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800066a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800066e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000672:	bf18      	it	ne
 8000674:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000678:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800067c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000680:	d038      	beq.n	80006f4 <__aeabi_dmul+0xb4>
 8000682:	fba0 ce02 	umull	ip, lr, r0, r2
 8000686:	f04f 0500 	mov.w	r5, #0
 800068a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800068e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000692:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000696:	f04f 0600 	mov.w	r6, #0
 800069a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800069e:	f09c 0f00 	teq	ip, #0
 80006a2:	bf18      	it	ne
 80006a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006b4:	d204      	bcs.n	80006c0 <__aeabi_dmul+0x80>
 80006b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006ba:	416d      	adcs	r5, r5
 80006bc:	eb46 0606 	adc.w	r6, r6, r6
 80006c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d8:	bf88      	it	hi
 80006da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006de:	d81e      	bhi.n	800071e <__aeabi_dmul+0xde>
 80006e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006e4:	bf08      	it	eq
 80006e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ea:	f150 0000 	adcs.w	r0, r0, #0
 80006ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f8:	ea46 0101 	orr.w	r1, r6, r1
 80006fc:	ea40 0002 	orr.w	r0, r0, r2
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000708:	bfc2      	ittt	gt
 800070a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800070e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000712:	bd70      	popgt	{r4, r5, r6, pc}
 8000714:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000718:	f04f 0e00 	mov.w	lr, #0
 800071c:	3c01      	subs	r4, #1
 800071e:	f300 80ab 	bgt.w	8000878 <__aeabi_dmul+0x238>
 8000722:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000726:	bfde      	ittt	le
 8000728:	2000      	movle	r0, #0
 800072a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800072e:	bd70      	pople	{r4, r5, r6, pc}
 8000730:	f1c4 0400 	rsb	r4, r4, #0
 8000734:	3c20      	subs	r4, #32
 8000736:	da35      	bge.n	80007a4 <__aeabi_dmul+0x164>
 8000738:	340c      	adds	r4, #12
 800073a:	dc1b      	bgt.n	8000774 <__aeabi_dmul+0x134>
 800073c:	f104 0414 	add.w	r4, r4, #20
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f305 	lsl.w	r3, r0, r5
 8000748:	fa20 f004 	lsr.w	r0, r0, r4
 800074c:	fa01 f205 	lsl.w	r2, r1, r5
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000758:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800075c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000760:	fa21 f604 	lsr.w	r6, r1, r4
 8000764:	eb42 0106 	adc.w	r1, r2, r6
 8000768:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800076c:	bf08      	it	eq
 800076e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000772:	bd70      	pop	{r4, r5, r6, pc}
 8000774:	f1c4 040c 	rsb	r4, r4, #12
 8000778:	f1c4 0520 	rsb	r5, r4, #32
 800077c:	fa00 f304 	lsl.w	r3, r0, r4
 8000780:	fa20 f005 	lsr.w	r0, r0, r5
 8000784:	fa01 f204 	lsl.w	r2, r1, r4
 8000788:	ea40 0002 	orr.w	r0, r0, r2
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000794:	f141 0100 	adc.w	r1, r1, #0
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f1c4 0520 	rsb	r5, r4, #32
 80007a8:	fa00 f205 	lsl.w	r2, r0, r5
 80007ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b0:	fa20 f304 	lsr.w	r3, r0, r4
 80007b4:	fa01 f205 	lsl.w	r2, r1, r5
 80007b8:	ea43 0302 	orr.w	r3, r3, r2
 80007bc:	fa21 f004 	lsr.w	r0, r1, r4
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007c4:	fa21 f204 	lsr.w	r2, r1, r4
 80007c8:	ea20 0002 	bic.w	r0, r0, r2
 80007cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007d4:	bf08      	it	eq
 80007d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007da:	bd70      	pop	{r4, r5, r6, pc}
 80007dc:	f094 0f00 	teq	r4, #0
 80007e0:	d10f      	bne.n	8000802 <__aeabi_dmul+0x1c2>
 80007e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007e6:	0040      	lsls	r0, r0, #1
 80007e8:	eb41 0101 	adc.w	r1, r1, r1
 80007ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f0:	bf08      	it	eq
 80007f2:	3c01      	subeq	r4, #1
 80007f4:	d0f7      	beq.n	80007e6 <__aeabi_dmul+0x1a6>
 80007f6:	ea41 0106 	orr.w	r1, r1, r6
 80007fa:	f095 0f00 	teq	r5, #0
 80007fe:	bf18      	it	ne
 8000800:	4770      	bxne	lr
 8000802:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000806:	0052      	lsls	r2, r2, #1
 8000808:	eb43 0303 	adc.w	r3, r3, r3
 800080c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000810:	bf08      	it	eq
 8000812:	3d01      	subeq	r5, #1
 8000814:	d0f7      	beq.n	8000806 <__aeabi_dmul+0x1c6>
 8000816:	ea43 0306 	orr.w	r3, r3, r6
 800081a:	4770      	bx	lr
 800081c:	ea94 0f0c 	teq	r4, ip
 8000820:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000824:	bf18      	it	ne
 8000826:	ea95 0f0c 	teqne	r5, ip
 800082a:	d00c      	beq.n	8000846 <__aeabi_dmul+0x206>
 800082c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000830:	bf18      	it	ne
 8000832:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000836:	d1d1      	bne.n	80007dc <__aeabi_dmul+0x19c>
 8000838:	ea81 0103 	eor.w	r1, r1, r3
 800083c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000840:	f04f 0000 	mov.w	r0, #0
 8000844:	bd70      	pop	{r4, r5, r6, pc}
 8000846:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800084a:	bf06      	itte	eq
 800084c:	4610      	moveq	r0, r2
 800084e:	4619      	moveq	r1, r3
 8000850:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000854:	d019      	beq.n	800088a <__aeabi_dmul+0x24a>
 8000856:	ea94 0f0c 	teq	r4, ip
 800085a:	d102      	bne.n	8000862 <__aeabi_dmul+0x222>
 800085c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000860:	d113      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000862:	ea95 0f0c 	teq	r5, ip
 8000866:	d105      	bne.n	8000874 <__aeabi_dmul+0x234>
 8000868:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800086c:	bf1c      	itt	ne
 800086e:	4610      	movne	r0, r2
 8000870:	4619      	movne	r1, r3
 8000872:	d10a      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000874:	ea81 0103 	eor.w	r1, r1, r3
 8000878:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800087c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000880:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000884:	f04f 0000 	mov.w	r0, #0
 8000888:	bd70      	pop	{r4, r5, r6, pc}
 800088a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800088e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000892:	bd70      	pop	{r4, r5, r6, pc}

08000894 <__aeabi_ddiv>:
 8000894:	b570      	push	{r4, r5, r6, lr}
 8000896:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800089a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800089e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008a2:	bf1d      	ittte	ne
 80008a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a8:	ea94 0f0c 	teqne	r4, ip
 80008ac:	ea95 0f0c 	teqne	r5, ip
 80008b0:	f000 f8a7 	bleq	8000a02 <__aeabi_ddiv+0x16e>
 80008b4:	eba4 0405 	sub.w	r4, r4, r5
 80008b8:	ea81 0e03 	eor.w	lr, r1, r3
 80008bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008c4:	f000 8088 	beq.w	80009d8 <__aeabi_ddiv+0x144>
 80008c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008ec:	429d      	cmp	r5, r3
 80008ee:	bf08      	it	eq
 80008f0:	4296      	cmpeq	r6, r2
 80008f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008fa:	d202      	bcs.n	8000902 <__aeabi_ddiv+0x6e>
 80008fc:	085b      	lsrs	r3, r3, #1
 80008fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000902:	1ab6      	subs	r6, r6, r2
 8000904:	eb65 0503 	sbc.w	r5, r5, r3
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000912:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 000c 	orrcs.w	r0, r0, ip
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000970:	ea55 0e06 	orrs.w	lr, r5, r6
 8000974:	d018      	beq.n	80009a8 <__aeabi_ddiv+0x114>
 8000976:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800097a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800097e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000982:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000986:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800098a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800098e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000992:	d1c0      	bne.n	8000916 <__aeabi_ddiv+0x82>
 8000994:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000998:	d10b      	bne.n	80009b2 <__aeabi_ddiv+0x11e>
 800099a:	ea41 0100 	orr.w	r1, r1, r0
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009a6:	e7b6      	b.n	8000916 <__aeabi_ddiv+0x82>
 80009a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009ac:	bf04      	itt	eq
 80009ae:	4301      	orreq	r1, r0
 80009b0:	2000      	moveq	r0, #0
 80009b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009b6:	bf88      	it	hi
 80009b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009bc:	f63f aeaf 	bhi.w	800071e <__aeabi_dmul+0xde>
 80009c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009c4:	bf04      	itt	eq
 80009c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ce:	f150 0000 	adcs.w	r0, r0, #0
 80009d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	pop	{r4, r5, r6, pc}
 80009d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009e4:	bfc2      	ittt	gt
 80009e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	popgt	{r4, r5, r6, pc}
 80009f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009f4:	f04f 0e00 	mov.w	lr, #0
 80009f8:	3c01      	subs	r4, #1
 80009fa:	e690      	b.n	800071e <__aeabi_dmul+0xde>
 80009fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000a00:	e68d      	b.n	800071e <__aeabi_dmul+0xde>
 8000a02:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a06:	ea94 0f0c 	teq	r4, ip
 8000a0a:	bf08      	it	eq
 8000a0c:	ea95 0f0c 	teqeq	r5, ip
 8000a10:	f43f af3b 	beq.w	800088a <__aeabi_dmul+0x24a>
 8000a14:	ea94 0f0c 	teq	r4, ip
 8000a18:	d10a      	bne.n	8000a30 <__aeabi_ddiv+0x19c>
 8000a1a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a1e:	f47f af34 	bne.w	800088a <__aeabi_dmul+0x24a>
 8000a22:	ea95 0f0c 	teq	r5, ip
 8000a26:	f47f af25 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	e72c      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a30:	ea95 0f0c 	teq	r5, ip
 8000a34:	d106      	bne.n	8000a44 <__aeabi_ddiv+0x1b0>
 8000a36:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a3a:	f43f aefd 	beq.w	8000838 <__aeabi_dmul+0x1f8>
 8000a3e:	4610      	mov	r0, r2
 8000a40:	4619      	mov	r1, r3
 8000a42:	e722      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a44:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a4e:	f47f aec5 	bne.w	80007dc <__aeabi_dmul+0x19c>
 8000a52:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a56:	f47f af0d 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a5a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a5e:	f47f aeeb 	bne.w	8000838 <__aeabi_dmul+0x1f8>
 8000a62:	e712      	b.n	800088a <__aeabi_dmul+0x24a>

08000a64 <__gedf2>:
 8000a64:	f04f 3cff 	mov.w	ip, #4294967295
 8000a68:	e006      	b.n	8000a78 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__ledf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	e002      	b.n	8000a78 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__cmpdf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	bf18      	it	ne
 8000a8a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a8e:	d01b      	beq.n	8000ac8 <__cmpdf2+0x54>
 8000a90:	b001      	add	sp, #4
 8000a92:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a96:	bf0c      	ite	eq
 8000a98:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a9c:	ea91 0f03 	teqne	r1, r3
 8000aa0:	bf02      	ittt	eq
 8000aa2:	ea90 0f02 	teqeq	r0, r2
 8000aa6:	2000      	moveq	r0, #0
 8000aa8:	4770      	bxeq	lr
 8000aaa:	f110 0f00 	cmn.w	r0, #0
 8000aae:	ea91 0f03 	teq	r1, r3
 8000ab2:	bf58      	it	pl
 8000ab4:	4299      	cmppl	r1, r3
 8000ab6:	bf08      	it	eq
 8000ab8:	4290      	cmpeq	r0, r2
 8000aba:	bf2c      	ite	cs
 8000abc:	17d8      	asrcs	r0, r3, #31
 8000abe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ac2:	f040 0001 	orr.w	r0, r0, #1
 8000ac6:	4770      	bx	lr
 8000ac8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000acc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad0:	d102      	bne.n	8000ad8 <__cmpdf2+0x64>
 8000ad2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad6:	d107      	bne.n	8000ae8 <__cmpdf2+0x74>
 8000ad8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000adc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae0:	d1d6      	bne.n	8000a90 <__cmpdf2+0x1c>
 8000ae2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae6:	d0d3      	beq.n	8000a90 <__cmpdf2+0x1c>
 8000ae8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_cdrcmple>:
 8000af0:	4684      	mov	ip, r0
 8000af2:	4610      	mov	r0, r2
 8000af4:	4662      	mov	r2, ip
 8000af6:	468c      	mov	ip, r1
 8000af8:	4619      	mov	r1, r3
 8000afa:	4663      	mov	r3, ip
 8000afc:	e000      	b.n	8000b00 <__aeabi_cdcmpeq>
 8000afe:	bf00      	nop

08000b00 <__aeabi_cdcmpeq>:
 8000b00:	b501      	push	{r0, lr}
 8000b02:	f7ff ffb7 	bl	8000a74 <__cmpdf2>
 8000b06:	2800      	cmp	r0, #0
 8000b08:	bf48      	it	mi
 8000b0a:	f110 0f00 	cmnmi.w	r0, #0
 8000b0e:	bd01      	pop	{r0, pc}

08000b10 <__aeabi_dcmpeq>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff fff4 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b18:	bf0c      	ite	eq
 8000b1a:	2001      	moveq	r0, #1
 8000b1c:	2000      	movne	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmplt>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffea 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b2c:	bf34      	ite	cc
 8000b2e:	2001      	movcc	r0, #1
 8000b30:	2000      	movcs	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmple>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffe0 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b40:	bf94      	ite	ls
 8000b42:	2001      	movls	r0, #1
 8000b44:	2000      	movhi	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpge>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffce 	bl	8000af0 <__aeabi_cdrcmple>
 8000b54:	bf94      	ite	ls
 8000b56:	2001      	movls	r0, #1
 8000b58:	2000      	movhi	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmpgt>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffc4 	bl	8000af0 <__aeabi_cdrcmple>
 8000b68:	bf34      	ite	cc
 8000b6a:	2001      	movcc	r0, #1
 8000b6c:	2000      	movcs	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpun>:
 8000b74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b7c:	d102      	bne.n	8000b84 <__aeabi_dcmpun+0x10>
 8000b7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b82:	d10a      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b8c:	d102      	bne.n	8000b94 <__aeabi_dcmpun+0x20>
 8000b8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0001 	mov.w	r0, #1
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_d2iz>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba8:	d215      	bcs.n	8000bd6 <__aeabi_d2iz+0x36>
 8000baa:	d511      	bpl.n	8000bd0 <__aeabi_d2iz+0x30>
 8000bac:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bb4:	d912      	bls.n	8000bdc <__aeabi_d2iz+0x3c>
 8000bb6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bba:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bbe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bc2:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bc6:	fa23 f002 	lsr.w	r0, r3, r2
 8000bca:	bf18      	it	ne
 8000bcc:	4240      	negne	r0, r0
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d105      	bne.n	8000be8 <__aeabi_d2iz+0x48>
 8000bdc:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be0:	bf08      	it	eq
 8000be2:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop

08000bf0 <__aeabi_d2uiz>:
 8000bf0:	004a      	lsls	r2, r1, #1
 8000bf2:	d211      	bcs.n	8000c18 <__aeabi_d2uiz+0x28>
 8000bf4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf8:	d211      	bcs.n	8000c1e <__aeabi_d2uiz+0x2e>
 8000bfa:	d50d      	bpl.n	8000c18 <__aeabi_d2uiz+0x28>
 8000bfc:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c04:	d40e      	bmi.n	8000c24 <__aeabi_d2uiz+0x34>
 8000c06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c12:	fa23 f002 	lsr.w	r0, r3, r2
 8000c16:	4770      	bx	lr
 8000c18:	f04f 0000 	mov.w	r0, #0
 8000c1c:	4770      	bx	lr
 8000c1e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c22:	d102      	bne.n	8000c2a <__aeabi_d2uiz+0x3a>
 8000c24:	f04f 30ff 	mov.w	r0, #4294967295
 8000c28:	4770      	bx	lr
 8000c2a:	f04f 0000 	mov.w	r0, #0
 8000c2e:	4770      	bx	lr

08000c30 <__aeabi_d2f>:
 8000c30:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c34:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c38:	bf24      	itt	cs
 8000c3a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c3e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c42:	d90d      	bls.n	8000c60 <__aeabi_d2f+0x30>
 8000c44:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c48:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c4c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c50:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c54:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c58:	bf08      	it	eq
 8000c5a:	f020 0001 	biceq.w	r0, r0, #1
 8000c5e:	4770      	bx	lr
 8000c60:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c64:	d121      	bne.n	8000caa <__aeabi_d2f+0x7a>
 8000c66:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c6a:	bfbc      	itt	lt
 8000c6c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c70:	4770      	bxlt	lr
 8000c72:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c76:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c7a:	f1c2 0218 	rsb	r2, r2, #24
 8000c7e:	f1c2 0c20 	rsb	ip, r2, #32
 8000c82:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c86:	fa20 f002 	lsr.w	r0, r0, r2
 8000c8a:	bf18      	it	ne
 8000c8c:	f040 0001 	orrne.w	r0, r0, #1
 8000c90:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c94:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c98:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c9c:	ea40 000c 	orr.w	r0, r0, ip
 8000ca0:	fa23 f302 	lsr.w	r3, r3, r2
 8000ca4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca8:	e7cc      	b.n	8000c44 <__aeabi_d2f+0x14>
 8000caa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cae:	d107      	bne.n	8000cc0 <__aeabi_d2f+0x90>
 8000cb0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cb4:	bf1e      	ittt	ne
 8000cb6:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cba:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cbe:	4770      	bxne	lr
 8000cc0:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cc4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop

08000cd0 <__aeabi_uldivmod>:
 8000cd0:	b953      	cbnz	r3, 8000ce8 <__aeabi_uldivmod+0x18>
 8000cd2:	b94a      	cbnz	r2, 8000ce8 <__aeabi_uldivmod+0x18>
 8000cd4:	2900      	cmp	r1, #0
 8000cd6:	bf08      	it	eq
 8000cd8:	2800      	cmpeq	r0, #0
 8000cda:	bf1c      	itt	ne
 8000cdc:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce0:	f04f 30ff 	movne.w	r0, #4294967295
 8000ce4:	f000 b9b4 	b.w	8001050 <__aeabi_idiv0>
 8000ce8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf0:	f000 f83c 	bl	8000d6c <__udivmoddi4>
 8000cf4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cfc:	b004      	add	sp, #16
 8000cfe:	4770      	bx	lr

08000d00 <__aeabi_d2lz>:
 8000d00:	b538      	push	{r3, r4, r5, lr}
 8000d02:	2200      	movs	r2, #0
 8000d04:	2300      	movs	r3, #0
 8000d06:	4604      	mov	r4, r0
 8000d08:	460d      	mov	r5, r1
 8000d0a:	f7ff ff0b 	bl	8000b24 <__aeabi_dcmplt>
 8000d0e:	b928      	cbnz	r0, 8000d1c <__aeabi_d2lz+0x1c>
 8000d10:	4620      	mov	r0, r4
 8000d12:	4629      	mov	r1, r5
 8000d14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d18:	f000 b80a 	b.w	8000d30 <__aeabi_d2ulz>
 8000d1c:	4620      	mov	r0, r4
 8000d1e:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d22:	f000 f805 	bl	8000d30 <__aeabi_d2ulz>
 8000d26:	4240      	negs	r0, r0
 8000d28:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d2c:	bd38      	pop	{r3, r4, r5, pc}
 8000d2e:	bf00      	nop

08000d30 <__aeabi_d2ulz>:
 8000d30:	b5d0      	push	{r4, r6, r7, lr}
 8000d32:	2200      	movs	r2, #0
 8000d34:	4b0b      	ldr	r3, [pc, #44]	@ (8000d64 <__aeabi_d2ulz+0x34>)
 8000d36:	4606      	mov	r6, r0
 8000d38:	460f      	mov	r7, r1
 8000d3a:	f7ff fc81 	bl	8000640 <__aeabi_dmul>
 8000d3e:	f7ff ff57 	bl	8000bf0 <__aeabi_d2uiz>
 8000d42:	4604      	mov	r4, r0
 8000d44:	f7ff fc02 	bl	800054c <__aeabi_ui2d>
 8000d48:	2200      	movs	r2, #0
 8000d4a:	4b07      	ldr	r3, [pc, #28]	@ (8000d68 <__aeabi_d2ulz+0x38>)
 8000d4c:	f7ff fc78 	bl	8000640 <__aeabi_dmul>
 8000d50:	4602      	mov	r2, r0
 8000d52:	460b      	mov	r3, r1
 8000d54:	4630      	mov	r0, r6
 8000d56:	4639      	mov	r1, r7
 8000d58:	f7ff faba 	bl	80002d0 <__aeabi_dsub>
 8000d5c:	f7ff ff48 	bl	8000bf0 <__aeabi_d2uiz>
 8000d60:	4621      	mov	r1, r4
 8000d62:	bdd0      	pop	{r4, r6, r7, pc}
 8000d64:	3df00000 	.word	0x3df00000
 8000d68:	41f00000 	.word	0x41f00000

08000d6c <__udivmoddi4>:
 8000d6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d70:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8000d72:	460c      	mov	r4, r1
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d14d      	bne.n	8000e14 <__udivmoddi4+0xa8>
 8000d78:	428a      	cmp	r2, r1
 8000d7a:	460f      	mov	r7, r1
 8000d7c:	4684      	mov	ip, r0
 8000d7e:	4696      	mov	lr, r2
 8000d80:	fab2 f382 	clz	r3, r2
 8000d84:	d960      	bls.n	8000e48 <__udivmoddi4+0xdc>
 8000d86:	b14b      	cbz	r3, 8000d9c <__udivmoddi4+0x30>
 8000d88:	fa02 fe03 	lsl.w	lr, r2, r3
 8000d8c:	f1c3 0220 	rsb	r2, r3, #32
 8000d90:	409f      	lsls	r7, r3
 8000d92:	fa00 fc03 	lsl.w	ip, r0, r3
 8000d96:	fa20 f202 	lsr.w	r2, r0, r2
 8000d9a:	4317      	orrs	r7, r2
 8000d9c:	ea4f 461e 	mov.w	r6, lr, lsr #16
 8000da0:	fa1f f48e 	uxth.w	r4, lr
 8000da4:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000da8:	fbb7 f1f6 	udiv	r1, r7, r6
 8000dac:	fb06 7711 	mls	r7, r6, r1, r7
 8000db0:	fb01 f004 	mul.w	r0, r1, r4
 8000db4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000db8:	4290      	cmp	r0, r2
 8000dba:	d908      	bls.n	8000dce <__udivmoddi4+0x62>
 8000dbc:	eb1e 0202 	adds.w	r2, lr, r2
 8000dc0:	f101 37ff 	add.w	r7, r1, #4294967295
 8000dc4:	d202      	bcs.n	8000dcc <__udivmoddi4+0x60>
 8000dc6:	4290      	cmp	r0, r2
 8000dc8:	f200 812d 	bhi.w	8001026 <__udivmoddi4+0x2ba>
 8000dcc:	4639      	mov	r1, r7
 8000dce:	1a12      	subs	r2, r2, r0
 8000dd0:	fa1f fc8c 	uxth.w	ip, ip
 8000dd4:	fbb2 f0f6 	udiv	r0, r2, r6
 8000dd8:	fb06 2210 	mls	r2, r6, r0, r2
 8000ddc:	fb00 f404 	mul.w	r4, r0, r4
 8000de0:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000de4:	4564      	cmp	r4, ip
 8000de6:	d908      	bls.n	8000dfa <__udivmoddi4+0x8e>
 8000de8:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000dec:	f100 32ff 	add.w	r2, r0, #4294967295
 8000df0:	d202      	bcs.n	8000df8 <__udivmoddi4+0x8c>
 8000df2:	4564      	cmp	r4, ip
 8000df4:	f200 811a 	bhi.w	800102c <__udivmoddi4+0x2c0>
 8000df8:	4610      	mov	r0, r2
 8000dfa:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dfe:	ebac 0c04 	sub.w	ip, ip, r4
 8000e02:	2100      	movs	r1, #0
 8000e04:	b125      	cbz	r5, 8000e10 <__udivmoddi4+0xa4>
 8000e06:	fa2c f303 	lsr.w	r3, ip, r3
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	e9c5 3200 	strd	r3, r2, [r5]
 8000e10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000e14:	428b      	cmp	r3, r1
 8000e16:	d905      	bls.n	8000e24 <__udivmoddi4+0xb8>
 8000e18:	b10d      	cbz	r5, 8000e1e <__udivmoddi4+0xb2>
 8000e1a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e1e:	2100      	movs	r1, #0
 8000e20:	4608      	mov	r0, r1
 8000e22:	e7f5      	b.n	8000e10 <__udivmoddi4+0xa4>
 8000e24:	fab3 f183 	clz	r1, r3
 8000e28:	2900      	cmp	r1, #0
 8000e2a:	d14d      	bne.n	8000ec8 <__udivmoddi4+0x15c>
 8000e2c:	42a3      	cmp	r3, r4
 8000e2e:	f0c0 80f2 	bcc.w	8001016 <__udivmoddi4+0x2aa>
 8000e32:	4290      	cmp	r0, r2
 8000e34:	f080 80ef 	bcs.w	8001016 <__udivmoddi4+0x2aa>
 8000e38:	4606      	mov	r6, r0
 8000e3a:	4623      	mov	r3, r4
 8000e3c:	4608      	mov	r0, r1
 8000e3e:	2d00      	cmp	r5, #0
 8000e40:	d0e6      	beq.n	8000e10 <__udivmoddi4+0xa4>
 8000e42:	e9c5 6300 	strd	r6, r3, [r5]
 8000e46:	e7e3      	b.n	8000e10 <__udivmoddi4+0xa4>
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	f040 80a2 	bne.w	8000f92 <__udivmoddi4+0x226>
 8000e4e:	1a8a      	subs	r2, r1, r2
 8000e50:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000e54:	fa1f f68e 	uxth.w	r6, lr
 8000e58:	2101      	movs	r1, #1
 8000e5a:	fbb2 f4f7 	udiv	r4, r2, r7
 8000e5e:	fb07 2014 	mls	r0, r7, r4, r2
 8000e62:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000e66:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e6a:	fb06 f004 	mul.w	r0, r6, r4
 8000e6e:	4290      	cmp	r0, r2
 8000e70:	d90f      	bls.n	8000e92 <__udivmoddi4+0x126>
 8000e72:	eb1e 0202 	adds.w	r2, lr, r2
 8000e76:	f104 38ff 	add.w	r8, r4, #4294967295
 8000e7a:	bf2c      	ite	cs
 8000e7c:	f04f 0901 	movcs.w	r9, #1
 8000e80:	f04f 0900 	movcc.w	r9, #0
 8000e84:	4290      	cmp	r0, r2
 8000e86:	d903      	bls.n	8000e90 <__udivmoddi4+0x124>
 8000e88:	f1b9 0f00 	cmp.w	r9, #0
 8000e8c:	f000 80c8 	beq.w	8001020 <__udivmoddi4+0x2b4>
 8000e90:	4644      	mov	r4, r8
 8000e92:	1a12      	subs	r2, r2, r0
 8000e94:	fa1f fc8c 	uxth.w	ip, ip
 8000e98:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e9c:	fb07 2210 	mls	r2, r7, r0, r2
 8000ea0:	fb00 f606 	mul.w	r6, r0, r6
 8000ea4:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000ea8:	4566      	cmp	r6, ip
 8000eaa:	d908      	bls.n	8000ebe <__udivmoddi4+0x152>
 8000eac:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000eb0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000eb4:	d202      	bcs.n	8000ebc <__udivmoddi4+0x150>
 8000eb6:	4566      	cmp	r6, ip
 8000eb8:	f200 80bb 	bhi.w	8001032 <__udivmoddi4+0x2c6>
 8000ebc:	4610      	mov	r0, r2
 8000ebe:	ebac 0c06 	sub.w	ip, ip, r6
 8000ec2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000ec6:	e79d      	b.n	8000e04 <__udivmoddi4+0x98>
 8000ec8:	f1c1 0620 	rsb	r6, r1, #32
 8000ecc:	408b      	lsls	r3, r1
 8000ece:	fa04 fe01 	lsl.w	lr, r4, r1
 8000ed2:	fa22 f706 	lsr.w	r7, r2, r6
 8000ed6:	fa20 fc06 	lsr.w	ip, r0, r6
 8000eda:	40f4      	lsrs	r4, r6
 8000edc:	408a      	lsls	r2, r1
 8000ede:	431f      	orrs	r7, r3
 8000ee0:	ea4e 030c 	orr.w	r3, lr, ip
 8000ee4:	fa00 fe01 	lsl.w	lr, r0, r1
 8000ee8:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000eec:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ef0:	fa1f fc87 	uxth.w	ip, r7
 8000ef4:	fbb4 f0f8 	udiv	r0, r4, r8
 8000ef8:	fb08 4410 	mls	r4, r8, r0, r4
 8000efc:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f00:	fb00 f90c 	mul.w	r9, r0, ip
 8000f04:	45a1      	cmp	r9, r4
 8000f06:	d90e      	bls.n	8000f26 <__udivmoddi4+0x1ba>
 8000f08:	193c      	adds	r4, r7, r4
 8000f0a:	f100 3aff 	add.w	sl, r0, #4294967295
 8000f0e:	bf2c      	ite	cs
 8000f10:	f04f 0b01 	movcs.w	fp, #1
 8000f14:	f04f 0b00 	movcc.w	fp, #0
 8000f18:	45a1      	cmp	r9, r4
 8000f1a:	d903      	bls.n	8000f24 <__udivmoddi4+0x1b8>
 8000f1c:	f1bb 0f00 	cmp.w	fp, #0
 8000f20:	f000 8093 	beq.w	800104a <__udivmoddi4+0x2de>
 8000f24:	4650      	mov	r0, sl
 8000f26:	eba4 0409 	sub.w	r4, r4, r9
 8000f2a:	fa1f f983 	uxth.w	r9, r3
 8000f2e:	fbb4 f3f8 	udiv	r3, r4, r8
 8000f32:	fb08 4413 	mls	r4, r8, r3, r4
 8000f36:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f3a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f3e:	45a4      	cmp	ip, r4
 8000f40:	d906      	bls.n	8000f50 <__udivmoddi4+0x1e4>
 8000f42:	193c      	adds	r4, r7, r4
 8000f44:	f103 38ff 	add.w	r8, r3, #4294967295
 8000f48:	d201      	bcs.n	8000f4e <__udivmoddi4+0x1e2>
 8000f4a:	45a4      	cmp	ip, r4
 8000f4c:	d87a      	bhi.n	8001044 <__udivmoddi4+0x2d8>
 8000f4e:	4643      	mov	r3, r8
 8000f50:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f54:	eba4 040c 	sub.w	r4, r4, ip
 8000f58:	fba0 9802 	umull	r9, r8, r0, r2
 8000f5c:	4544      	cmp	r4, r8
 8000f5e:	46cc      	mov	ip, r9
 8000f60:	4643      	mov	r3, r8
 8000f62:	d302      	bcc.n	8000f6a <__udivmoddi4+0x1fe>
 8000f64:	d106      	bne.n	8000f74 <__udivmoddi4+0x208>
 8000f66:	45ce      	cmp	lr, r9
 8000f68:	d204      	bcs.n	8000f74 <__udivmoddi4+0x208>
 8000f6a:	3801      	subs	r0, #1
 8000f6c:	ebb9 0c02 	subs.w	ip, r9, r2
 8000f70:	eb68 0307 	sbc.w	r3, r8, r7
 8000f74:	b15d      	cbz	r5, 8000f8e <__udivmoddi4+0x222>
 8000f76:	ebbe 020c 	subs.w	r2, lr, ip
 8000f7a:	eb64 0403 	sbc.w	r4, r4, r3
 8000f7e:	fa04 f606 	lsl.w	r6, r4, r6
 8000f82:	fa22 f301 	lsr.w	r3, r2, r1
 8000f86:	40cc      	lsrs	r4, r1
 8000f88:	431e      	orrs	r6, r3
 8000f8a:	e9c5 6400 	strd	r6, r4, [r5]
 8000f8e:	2100      	movs	r1, #0
 8000f90:	e73e      	b.n	8000e10 <__udivmoddi4+0xa4>
 8000f92:	fa02 fe03 	lsl.w	lr, r2, r3
 8000f96:	f1c3 0120 	rsb	r1, r3, #32
 8000f9a:	fa04 f203 	lsl.w	r2, r4, r3
 8000f9e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000fa2:	40cc      	lsrs	r4, r1
 8000fa4:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000fa8:	fa20 f101 	lsr.w	r1, r0, r1
 8000fac:	fa1f f68e 	uxth.w	r6, lr
 8000fb0:	fbb4 f0f7 	udiv	r0, r4, r7
 8000fb4:	430a      	orrs	r2, r1
 8000fb6:	fb07 4410 	mls	r4, r7, r0, r4
 8000fba:	0c11      	lsrs	r1, r2, #16
 8000fbc:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000fc0:	fb00 f406 	mul.w	r4, r0, r6
 8000fc4:	428c      	cmp	r4, r1
 8000fc6:	d90e      	bls.n	8000fe6 <__udivmoddi4+0x27a>
 8000fc8:	eb1e 0101 	adds.w	r1, lr, r1
 8000fcc:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fd0:	bf2c      	ite	cs
 8000fd2:	f04f 0901 	movcs.w	r9, #1
 8000fd6:	f04f 0900 	movcc.w	r9, #0
 8000fda:	428c      	cmp	r4, r1
 8000fdc:	d902      	bls.n	8000fe4 <__udivmoddi4+0x278>
 8000fde:	f1b9 0f00 	cmp.w	r9, #0
 8000fe2:	d02c      	beq.n	800103e <__udivmoddi4+0x2d2>
 8000fe4:	4640      	mov	r0, r8
 8000fe6:	1b09      	subs	r1, r1, r4
 8000fe8:	b292      	uxth	r2, r2
 8000fea:	fbb1 f4f7 	udiv	r4, r1, r7
 8000fee:	fb07 1114 	mls	r1, r7, r4, r1
 8000ff2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ff6:	fb04 f106 	mul.w	r1, r4, r6
 8000ffa:	4291      	cmp	r1, r2
 8000ffc:	d907      	bls.n	800100e <__udivmoddi4+0x2a2>
 8000ffe:	eb1e 0202 	adds.w	r2, lr, r2
 8001002:	f104 38ff 	add.w	r8, r4, #4294967295
 8001006:	d201      	bcs.n	800100c <__udivmoddi4+0x2a0>
 8001008:	4291      	cmp	r1, r2
 800100a:	d815      	bhi.n	8001038 <__udivmoddi4+0x2cc>
 800100c:	4644      	mov	r4, r8
 800100e:	1a52      	subs	r2, r2, r1
 8001010:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8001014:	e721      	b.n	8000e5a <__udivmoddi4+0xee>
 8001016:	1a86      	subs	r6, r0, r2
 8001018:	eb64 0303 	sbc.w	r3, r4, r3
 800101c:	2001      	movs	r0, #1
 800101e:	e70e      	b.n	8000e3e <__udivmoddi4+0xd2>
 8001020:	3c02      	subs	r4, #2
 8001022:	4472      	add	r2, lr
 8001024:	e735      	b.n	8000e92 <__udivmoddi4+0x126>
 8001026:	3902      	subs	r1, #2
 8001028:	4472      	add	r2, lr
 800102a:	e6d0      	b.n	8000dce <__udivmoddi4+0x62>
 800102c:	44f4      	add	ip, lr
 800102e:	3802      	subs	r0, #2
 8001030:	e6e3      	b.n	8000dfa <__udivmoddi4+0x8e>
 8001032:	44f4      	add	ip, lr
 8001034:	3802      	subs	r0, #2
 8001036:	e742      	b.n	8000ebe <__udivmoddi4+0x152>
 8001038:	3c02      	subs	r4, #2
 800103a:	4472      	add	r2, lr
 800103c:	e7e7      	b.n	800100e <__udivmoddi4+0x2a2>
 800103e:	3802      	subs	r0, #2
 8001040:	4471      	add	r1, lr
 8001042:	e7d0      	b.n	8000fe6 <__udivmoddi4+0x27a>
 8001044:	3b02      	subs	r3, #2
 8001046:	443c      	add	r4, r7
 8001048:	e782      	b.n	8000f50 <__udivmoddi4+0x1e4>
 800104a:	3802      	subs	r0, #2
 800104c:	443c      	add	r4, r7
 800104e:	e76a      	b.n	8000f26 <__udivmoddi4+0x1ba>

08001050 <__aeabi_idiv0>:
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <MX_ADC4_Init>:

ADC_HandleTypeDef hadc4;

/* ADC4 init function */
void MX_ADC4_Init(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b088      	sub	sp, #32
 8001058:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800105a:	463b      	mov	r3, r7
 800105c:	2220      	movs	r2, #32
 800105e:	2100      	movs	r1, #0
 8001060:	4618      	mov	r0, r3
 8001062:	f00d f9f6 	bl	800e452 <memset>

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 8001066:	4b2f      	ldr	r3, [pc, #188]	@ (8001124 <MX_ADC4_Init+0xd0>)
 8001068:	4a2f      	ldr	r2, [pc, #188]	@ (8001128 <MX_ADC4_Init+0xd4>)
 800106a:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800106c:	4b2d      	ldr	r3, [pc, #180]	@ (8001124 <MX_ADC4_Init+0xd0>)
 800106e:	2200      	movs	r2, #0
 8001070:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 8001072:	4b2c      	ldr	r3, [pc, #176]	@ (8001124 <MX_ADC4_Init+0xd0>)
 8001074:	2204      	movs	r2, #4
 8001076:	609a      	str	r2, [r3, #8]
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001078:	4b2a      	ldr	r3, [pc, #168]	@ (8001124 <MX_ADC4_Init+0xd0>)
 800107a:	2200      	movs	r2, #0
 800107c:	615a      	str	r2, [r3, #20]
  hadc4.Init.ScanConvMode = ADC4_SCAN_DISABLE;
 800107e:	4b29      	ldr	r3, [pc, #164]	@ (8001124 <MX_ADC4_Init+0xd0>)
 8001080:	2200      	movs	r2, #0
 8001082:	611a      	str	r2, [r3, #16]
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001084:	4b27      	ldr	r3, [pc, #156]	@ (8001124 <MX_ADC4_Init+0xd0>)
 8001086:	2204      	movs	r2, #4
 8001088:	619a      	str	r2, [r3, #24]
  hadc4.Init.LowPowerAutoPowerOff = ADC_LOW_POWER_NONE;
 800108a:	4b26      	ldr	r3, [pc, #152]	@ (8001124 <MX_ADC4_Init+0xd0>)
 800108c:	2200      	movs	r2, #0
 800108e:	621a      	str	r2, [r3, #32]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 8001090:	4b24      	ldr	r3, [pc, #144]	@ (8001124 <MX_ADC4_Init+0xd0>)
 8001092:	2200      	movs	r2, #0
 8001094:	771a      	strb	r2, [r3, #28]
  hadc4.Init.ContinuousConvMode = DISABLE;
 8001096:	4b23      	ldr	r3, [pc, #140]	@ (8001124 <MX_ADC4_Init+0xd0>)
 8001098:	2200      	movs	r2, #0
 800109a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc4.Init.NbrOfConversion = 1;
 800109e:	4b21      	ldr	r3, [pc, #132]	@ (8001124 <MX_ADC4_Init+0xd0>)
 80010a0:	2201      	movs	r2, #1
 80010a2:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 80010a4:	4b1f      	ldr	r3, [pc, #124]	@ (8001124 <MX_ADC4_Init+0xd0>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010ac:	4b1d      	ldr	r3, [pc, #116]	@ (8001124 <MX_ADC4_Init+0xd0>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010b2:	4b1c      	ldr	r3, [pc, #112]	@ (8001124 <MX_ADC4_Init+0xd0>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc4.Init.DMAContinuousRequests = DISABLE;
 80010b8:	4b1a      	ldr	r3, [pc, #104]	@ (8001124 <MX_ADC4_Init+0xd0>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc4.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_LOW;
 80010c0:	4b18      	ldr	r3, [pc, #96]	@ (8001124 <MX_ADC4_Init+0xd0>)
 80010c2:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80010c6:	669a      	str	r2, [r3, #104]	@ 0x68
  hadc4.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80010c8:	4b16      	ldr	r3, [pc, #88]	@ (8001124 <MX_ADC4_Init+0xd0>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc4.Init.SamplingTimeCommon1 = ADC4_SAMPLETIME_1CYCLE_5;
 80010ce:	4b15      	ldr	r3, [pc, #84]	@ (8001124 <MX_ADC4_Init+0xd0>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	649a      	str	r2, [r3, #72]	@ 0x48
  hadc4.Init.SamplingTimeCommon2 = ADC4_SAMPLETIME_1CYCLE_5;
 80010d4:	4b13      	ldr	r3, [pc, #76]	@ (8001124 <MX_ADC4_Init+0xd0>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hadc4.Init.OversamplingMode = DISABLE;
 80010da:	4b12      	ldr	r3, [pc, #72]	@ (8001124 <MX_ADC4_Init+0xd0>)
 80010dc:	2200      	movs	r2, #0
 80010de:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 80010e2:	4810      	ldr	r0, [pc, #64]	@ (8001124 <MX_ADC4_Init+0xd0>)
 80010e4:	f001 feae 	bl	8002e44 <HAL_ADC_Init>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <MX_ADC4_Init+0x9e>
  {
    Error_Handler();
 80010ee:	f000 fd1c 	bl	8001b2a <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80010f2:	4b0e      	ldr	r3, [pc, #56]	@ (800112c <MX_ADC4_Init+0xd8>)
 80010f4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010f6:	2306      	movs	r3, #6
 80010f8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC4_SAMPLINGTIME_COMMON_1;
 80010fa:	2300      	movs	r3, #0
 80010fc:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80010fe:	2304      	movs	r3, #4
 8001100:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001102:	2300      	movs	r3, #0
 8001104:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8001106:	463b      	mov	r3, r7
 8001108:	4619      	mov	r1, r3
 800110a:	4806      	ldr	r0, [pc, #24]	@ (8001124 <MX_ADC4_Init+0xd0>)
 800110c:	f002 f982 	bl	8003414 <HAL_ADC_ConfigChannel>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <MX_ADC4_Init+0xc6>
  {
    Error_Handler();
 8001116:	f000 fd08 	bl	8001b2a <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 800111a:	bf00      	nop
 800111c:	3720      	adds	r7, #32
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	200001f0 	.word	0x200001f0
 8001128:	46021000 	.word	0x46021000
 800112c:	18000040 	.word	0x18000040

08001130 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b0c4      	sub	sp, #272	@ 0x110
 8001134:	af00      	add	r7, sp, #0
 8001136:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800113a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800113e:	6018      	str	r0, [r3, #0]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001140:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8001144:	2200      	movs	r2, #0
 8001146:	601a      	str	r2, [r3, #0]
 8001148:	605a      	str	r2, [r3, #4]
 800114a:	609a      	str	r2, [r3, #8]
 800114c:	60da      	str	r2, [r3, #12]
 800114e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001150:	f107 0318 	add.w	r3, r7, #24
 8001154:	22e0      	movs	r2, #224	@ 0xe0
 8001156:	2100      	movs	r1, #0
 8001158:	4618      	mov	r0, r3
 800115a:	f00d f97a 	bl	800e452 <memset>
  if(adcHandle->Instance==ADC4)
 800115e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001162:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4a3c      	ldr	r2, [pc, #240]	@ (800125c <HAL_ADC_MspInit+0x12c>)
 800116c:	4293      	cmp	r3, r2
 800116e:	d16f      	bne.n	8001250 <HAL_ADC_MspInit+0x120>

  /* USER CODE END ADC4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 8001170:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001174:	f04f 0300 	mov.w	r3, #0
 8001178:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HSI;
 800117c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001180:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001184:	f107 0318 	add.w	r3, r7, #24
 8001188:	4618      	mov	r0, r3
 800118a:	f007 f8cf 	bl	800832c <HAL_RCCEx_PeriphCLKConfig>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <HAL_ADC_MspInit+0x68>
    {
      Error_Handler();
 8001194:	f000 fcc9 	bl	8001b2a <Error_Handler>
    }

    /* ADC4 clock enable */
    __HAL_RCC_ADC4_CLK_ENABLE();
 8001198:	4b31      	ldr	r3, [pc, #196]	@ (8001260 <HAL_ADC_MspInit+0x130>)
 800119a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800119e:	4a30      	ldr	r2, [pc, #192]	@ (8001260 <HAL_ADC_MspInit+0x130>)
 80011a0:	f043 0320 	orr.w	r3, r3, #32
 80011a4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80011a8:	4b2d      	ldr	r3, [pc, #180]	@ (8001260 <HAL_ADC_MspInit+0x130>)
 80011aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80011ae:	f003 0320 	and.w	r3, r3, #32
 80011b2:	617b      	str	r3, [r7, #20]
 80011b4:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80011b6:	4b2a      	ldr	r3, [pc, #168]	@ (8001260 <HAL_ADC_MspInit+0x130>)
 80011b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80011bc:	4a28      	ldr	r2, [pc, #160]	@ (8001260 <HAL_ADC_MspInit+0x130>)
 80011be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80011c2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80011c6:	4b26      	ldr	r3, [pc, #152]	@ (8001260 <HAL_ADC_MspInit+0x130>)
 80011c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80011cc:	f003 0240 	and.w	r2, r3, #64	@ 0x40
 80011d0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80011d4:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80011d8:	601a      	str	r2, [r3, #0]
 80011da:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80011de:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80011e2:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80011e4:	4b1e      	ldr	r3, [pc, #120]	@ (8001260 <HAL_ADC_MspInit+0x130>)
 80011e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80011ea:	4a1d      	ldr	r2, [pc, #116]	@ (8001260 <HAL_ADC_MspInit+0x130>)
 80011ec:	f043 0320 	orr.w	r3, r3, #32
 80011f0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80011f4:	4b1a      	ldr	r3, [pc, #104]	@ (8001260 <HAL_ADC_MspInit+0x130>)
 80011f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80011fa:	f003 0220 	and.w	r2, r3, #32
 80011fe:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001202:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001206:	601a      	str	r2, [r3, #0]
 8001208:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800120c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001210:	681b      	ldr	r3, [r3, #0]
    /**ADC4 GPIO Configuration
    PG1     ------> ADC4_IN8
    PF15     ------> ADC4_IN6
    PG0     ------> ADC4_IN7
    */
    GPIO_InitStruct.Pin = VBUS_SENSE_Pin|UCPD_ADC1_Pin;
 8001212:	2303      	movs	r3, #3
 8001214:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001218:	2303      	movs	r3, #3
 800121a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121e:	2300      	movs	r3, #0
 8001220:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001224:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8001228:	4619      	mov	r1, r3
 800122a:	480e      	ldr	r0, [pc, #56]	@ (8001264 <HAL_ADC_MspInit+0x134>)
 800122c:	f003 f94a 	bl	80044c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = UCPD_ADC2_Pin;
 8001230:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001234:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001238:	2303      	movs	r3, #3
 800123a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123e:	2300      	movs	r3, #0
 8001240:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(UCPD_ADC2_GPIO_Port, &GPIO_InitStruct);
 8001244:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8001248:	4619      	mov	r1, r3
 800124a:	4807      	ldr	r0, [pc, #28]	@ (8001268 <HAL_ADC_MspInit+0x138>)
 800124c:	f003 f93a 	bl	80044c4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC4_MspInit 1 */

  /* USER CODE END ADC4_MspInit 1 */
  }
}
 8001250:	bf00      	nop
 8001252:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	46021000 	.word	0x46021000
 8001260:	46020c00 	.word	0x46020c00
 8001264:	42021800 	.word	0x42021800
 8001268:	42021400 	.word	0x42021400

0800126c <MX_GPIO_Init>:
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b090      	sub	sp, #64	@ 0x40
 8001270:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001272:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001276:	2200      	movs	r2, #0
 8001278:	601a      	str	r2, [r3, #0]
 800127a:	605a      	str	r2, [r3, #4]
 800127c:	609a      	str	r2, [r3, #8]
 800127e:	60da      	str	r2, [r3, #12]
 8001280:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001282:	4b8d      	ldr	r3, [pc, #564]	@ (80014b8 <MX_GPIO_Init+0x24c>)
 8001284:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001288:	4a8b      	ldr	r2, [pc, #556]	@ (80014b8 <MX_GPIO_Init+0x24c>)
 800128a:	f043 0310 	orr.w	r3, r3, #16
 800128e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001292:	4b89      	ldr	r3, [pc, #548]	@ (80014b8 <MX_GPIO_Init+0x24c>)
 8001294:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001298:	f003 0310 	and.w	r3, r3, #16
 800129c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800129e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012a0:	4b85      	ldr	r3, [pc, #532]	@ (80014b8 <MX_GPIO_Init+0x24c>)
 80012a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80012a6:	4a84      	ldr	r2, [pc, #528]	@ (80014b8 <MX_GPIO_Init+0x24c>)
 80012a8:	f043 0304 	orr.w	r3, r3, #4
 80012ac:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80012b0:	4b81      	ldr	r3, [pc, #516]	@ (80014b8 <MX_GPIO_Init+0x24c>)
 80012b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80012b6:	f003 0304 	and.w	r3, r3, #4
 80012ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80012bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012be:	4b7e      	ldr	r3, [pc, #504]	@ (80014b8 <MX_GPIO_Init+0x24c>)
 80012c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80012c4:	4a7c      	ldr	r2, [pc, #496]	@ (80014b8 <MX_GPIO_Init+0x24c>)
 80012c6:	f043 0301 	orr.w	r3, r3, #1
 80012ca:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80012ce:	4b7a      	ldr	r3, [pc, #488]	@ (80014b8 <MX_GPIO_Init+0x24c>)
 80012d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80012d4:	f003 0301 	and.w	r3, r3, #1
 80012d8:	623b      	str	r3, [r7, #32]
 80012da:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012dc:	4b76      	ldr	r3, [pc, #472]	@ (80014b8 <MX_GPIO_Init+0x24c>)
 80012de:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80012e2:	4a75      	ldr	r2, [pc, #468]	@ (80014b8 <MX_GPIO_Init+0x24c>)
 80012e4:	f043 0302 	orr.w	r3, r3, #2
 80012e8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80012ec:	4b72      	ldr	r3, [pc, #456]	@ (80014b8 <MX_GPIO_Init+0x24c>)
 80012ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80012f2:	f003 0302 	and.w	r3, r3, #2
 80012f6:	61fb      	str	r3, [r7, #28]
 80012f8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012fa:	4b6f      	ldr	r3, [pc, #444]	@ (80014b8 <MX_GPIO_Init+0x24c>)
 80012fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001300:	4a6d      	ldr	r2, [pc, #436]	@ (80014b8 <MX_GPIO_Init+0x24c>)
 8001302:	f043 0308 	orr.w	r3, r3, #8
 8001306:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800130a:	4b6b      	ldr	r3, [pc, #428]	@ (80014b8 <MX_GPIO_Init+0x24c>)
 800130c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001310:	f003 0308 	and.w	r3, r3, #8
 8001314:	61bb      	str	r3, [r7, #24]
 8001316:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001318:	4b67      	ldr	r3, [pc, #412]	@ (80014b8 <MX_GPIO_Init+0x24c>)
 800131a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800131e:	4a66      	ldr	r2, [pc, #408]	@ (80014b8 <MX_GPIO_Init+0x24c>)
 8001320:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001324:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001328:	4b63      	ldr	r3, [pc, #396]	@ (80014b8 <MX_GPIO_Init+0x24c>)
 800132a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800132e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001332:	617b      	str	r3, [r7, #20]
 8001334:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001336:	4b60      	ldr	r3, [pc, #384]	@ (80014b8 <MX_GPIO_Init+0x24c>)
 8001338:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800133c:	4a5e      	ldr	r2, [pc, #376]	@ (80014b8 <MX_GPIO_Init+0x24c>)
 800133e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001342:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001346:	4b5c      	ldr	r3, [pc, #368]	@ (80014b8 <MX_GPIO_Init+0x24c>)
 8001348:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800134c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001350:	613b      	str	r3, [r7, #16]
 8001352:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001354:	4b58      	ldr	r3, [pc, #352]	@ (80014b8 <MX_GPIO_Init+0x24c>)
 8001356:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800135a:	4a57      	ldr	r2, [pc, #348]	@ (80014b8 <MX_GPIO_Init+0x24c>)
 800135c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001360:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001364:	4b54      	ldr	r3, [pc, #336]	@ (80014b8 <MX_GPIO_Init+0x24c>)
 8001366:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800136a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800136e:	60fb      	str	r3, [r7, #12]
 8001370:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001372:	4b51      	ldr	r3, [pc, #324]	@ (80014b8 <MX_GPIO_Init+0x24c>)
 8001374:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001378:	4a4f      	ldr	r2, [pc, #316]	@ (80014b8 <MX_GPIO_Init+0x24c>)
 800137a:	f043 0320 	orr.w	r3, r3, #32
 800137e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001382:	4b4d      	ldr	r3, [pc, #308]	@ (80014b8 <MX_GPIO_Init+0x24c>)
 8001384:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001388:	f003 0320 	and.w	r3, r3, #32
 800138c:	60bb      	str	r3, [r7, #8]
 800138e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001390:	4b49      	ldr	r3, [pc, #292]	@ (80014b8 <MX_GPIO_Init+0x24c>)
 8001392:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001396:	4a48      	ldr	r2, [pc, #288]	@ (80014b8 <MX_GPIO_Init+0x24c>)
 8001398:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800139c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80013a0:	4b45      	ldr	r3, [pc, #276]	@ (80014b8 <MX_GPIO_Init+0x24c>)
 80013a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80013a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80013aa:	607b      	str	r3, [r7, #4]
 80013ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED_GREEN_Pin|LED_RED_Pin|UCPD_DBn_Pin|TOF_LPN_Pin, GPIO_PIN_RESET);
 80013ae:	2200      	movs	r2, #0
 80013b0:	f244 2103 	movw	r1, #16899	@ 0x4203
 80013b4:	4841      	ldr	r0, [pc, #260]	@ (80014bc <MX_GPIO_Init+0x250>)
 80013b6:	f003 fa5d 	bl	8004874 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DSI_RESETn_GPIO_Port, DSI_RESETn_Pin, GPIO_PIN_RESET);
 80013ba:	2200      	movs	r2, #0
 80013bc:	2120      	movs	r1, #32
 80013be:	4840      	ldr	r0, [pc, #256]	@ (80014c0 <MX_GPIO_Init+0x254>)
 80013c0:	f003 fa58 	bl	8004874 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(eMMC_RSTn_GPIO_Port, eMMC_RSTn_Pin, GPIO_PIN_RESET);
 80013c4:	2200      	movs	r2, #0
 80013c6:	2140      	movs	r1, #64	@ 0x40
 80013c8:	483e      	ldr	r0, [pc, #248]	@ (80014c4 <MX_GPIO_Init+0x258>)
 80013ca:	f003 fa53 	bl	8004874 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DSI_BL_CTRL_GPIO_Port, DSI_BL_CTRL_Pin, GPIO_PIN_RESET);
 80013ce:	2200      	movs	r2, #0
 80013d0:	2140      	movs	r1, #64	@ 0x40
 80013d2:	483d      	ldr	r0, [pc, #244]	@ (80014c8 <MX_GPIO_Init+0x25c>)
 80013d4:	f003 fa4e 	bl	8004874 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin UCPD_DBn_Pin TOF_LPN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin|UCPD_DBn_Pin|TOF_LPN_Pin;
 80013d8:	f244 2303 	movw	r3, #16899	@ 0x4203
 80013dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013de:	2301      	movs	r3, #1
 80013e0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e2:	2300      	movs	r3, #0
 80013e4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e6:	2300      	movs	r3, #0
 80013e8:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013ea:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80013ee:	4619      	mov	r1, r3
 80013f0:	4832      	ldr	r0, [pc, #200]	@ (80014bc <MX_GPIO_Init+0x250>)
 80013f2:	f003 f867 	bl	80044c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : TOF_INTN_Pin */
  GPIO_InitStruct.Pin = TOF_INTN_Pin;
 80013f6:	2320      	movs	r3, #32
 80013f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013fa:	4b34      	ldr	r3, [pc, #208]	@ (80014cc <MX_GPIO_Init+0x260>)
 80013fc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fe:	2300      	movs	r3, #0
 8001400:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(TOF_INTN_GPIO_Port, &GPIO_InitStruct);
 8001402:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001406:	4619      	mov	r1, r3
 8001408:	4831      	ldr	r0, [pc, #196]	@ (80014d0 <MX_GPIO_Init+0x264>)
 800140a:	f003 f85b 	bl	80044c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : DSI_RESETn_Pin */
  GPIO_InitStruct.Pin = DSI_RESETn_Pin;
 800140e:	2320      	movs	r3, #32
 8001410:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001412:	2301      	movs	r3, #1
 8001414:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001416:	2300      	movs	r3, #0
 8001418:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800141a:	2300      	movs	r3, #0
 800141c:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(DSI_RESETn_GPIO_Port, &GPIO_InitStruct);
 800141e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001422:	4619      	mov	r1, r3
 8001424:	4826      	ldr	r0, [pc, #152]	@ (80014c0 <MX_GPIO_Init+0x254>)
 8001426:	f003 f84d 	bl	80044c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : eMMC_RSTn_Pin */
  GPIO_InitStruct.Pin = eMMC_RSTn_Pin;
 800142a:	2340      	movs	r3, #64	@ 0x40
 800142c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800142e:	2301      	movs	r3, #1
 8001430:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001432:	2300      	movs	r3, #0
 8001434:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001436:	2300      	movs	r3, #0
 8001438:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(eMMC_RSTn_GPIO_Port, &GPIO_InitStruct);
 800143a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800143e:	4619      	mov	r1, r3
 8001440:	4820      	ldr	r0, [pc, #128]	@ (80014c4 <MX_GPIO_Init+0x258>)
 8001442:	f003 f83f 	bl	80044c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : DSI_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = DSI_BL_CTRL_Pin;
 8001446:	2340      	movs	r3, #64	@ 0x40
 8001448:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800144a:	2301      	movs	r3, #1
 800144c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144e:	2300      	movs	r3, #0
 8001450:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001452:	2300      	movs	r3, #0
 8001454:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(DSI_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8001456:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800145a:	4619      	mov	r1, r3
 800145c:	481a      	ldr	r0, [pc, #104]	@ (80014c8 <MX_GPIO_Init+0x25c>)
 800145e:	f003 f831 	bl	80044c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_Button_Pin */
  GPIO_InitStruct.Pin = USER_Button_Pin;
 8001462:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001466:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001468:	4b18      	ldr	r3, [pc, #96]	@ (80014cc <MX_GPIO_Init+0x260>)
 800146a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146c:	2300      	movs	r3, #0
 800146e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(USER_Button_GPIO_Port, &GPIO_InitStruct);
 8001470:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001474:	4619      	mov	r1, r3
 8001476:	4817      	ldr	r0, [pc, #92]	@ (80014d4 <MX_GPIO_Init+0x268>)
 8001478:	f003 f824 	bl	80044c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : TEMP_INTN_Pin */
  GPIO_InitStruct.Pin = TEMP_INTN_Pin;
 800147c:	2304      	movs	r3, #4
 800147e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001480:	4b12      	ldr	r3, [pc, #72]	@ (80014cc <MX_GPIO_Init+0x260>)
 8001482:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001484:	2300      	movs	r3, #0
 8001486:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(TEMP_INTN_GPIO_Port, &GPIO_InitStruct);
 8001488:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800148c:	4619      	mov	r1, r3
 800148e:	4812      	ldr	r0, [pc, #72]	@ (80014d8 <MX_GPIO_Init+0x26c>)
 8001490:	f003 f818 	bl	80044c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : DSI_TOUCH_INT_Pin UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = DSI_TOUCH_INT_Pin|UCPD_FLT_Pin;
 8001494:	f44f 5388 	mov.w	r3, #4352	@ 0x1100
 8001498:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800149a:	4b0c      	ldr	r3, [pc, #48]	@ (80014cc <MX_GPIO_Init+0x260>)
 800149c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149e:	2300      	movs	r3, #0
 80014a0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014a2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80014a6:	4619      	mov	r1, r3
 80014a8:	4804      	ldr	r0, [pc, #16]	@ (80014bc <MX_GPIO_Init+0x250>)
 80014aa:	f003 f80b 	bl	80044c4 <HAL_GPIO_Init>

}
 80014ae:	bf00      	nop
 80014b0:	3740      	adds	r7, #64	@ 0x40
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	46020c00 	.word	0x46020c00
 80014bc:	42021000 	.word	0x42021000
 80014c0:	42020c00 	.word	0x42020c00
 80014c4:	42021c00 	.word	0x42021c00
 80014c8:	42022000 	.word	0x42022000
 80014cc:	10110000 	.word	0x10110000
 80014d0:	42020400 	.word	0x42020400
 80014d4:	42020800 	.word	0x42020800
 80014d8:	42021400 	.word	0x42021400

080014dc <MX_HSPI1_Init>:

XSPI_HandleTypeDef hxspi1;

/* HSPI1 init function */
void MX_HSPI1_Init(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0
  /* USER CODE END HSPI1_Init 0 */

  /* USER CODE BEGIN HSPI1_Init 1 */

  /* USER CODE END HSPI1_Init 1 */
  hxspi1.Instance = HSPI1;
 80014e0:	4b1b      	ldr	r3, [pc, #108]	@ (8001550 <MX_HSPI1_Init+0x74>)
 80014e2:	4a1c      	ldr	r2, [pc, #112]	@ (8001554 <MX_HSPI1_Init+0x78>)
 80014e4:	601a      	str	r2, [r3, #0]
  hxspi1.Init.FifoThresholdByte = 1;
 80014e6:	4b1a      	ldr	r3, [pc, #104]	@ (8001550 <MX_HSPI1_Init+0x74>)
 80014e8:	2201      	movs	r2, #1
 80014ea:	605a      	str	r2, [r3, #4]
  hxspi1.Init.MemoryMode = HAL_XSPI_SINGLE_MEM;
 80014ec:	4b18      	ldr	r3, [pc, #96]	@ (8001550 <MX_HSPI1_Init+0x74>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	609a      	str	r2, [r3, #8]
  hxspi1.Init.MemoryType = HAL_XSPI_MEMTYPE_MICRON;
 80014f2:	4b17      	ldr	r3, [pc, #92]	@ (8001550 <MX_HSPI1_Init+0x74>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	60da      	str	r2, [r3, #12]
  hxspi1.Init.MemorySize = HAL_XSPI_SIZE_16B;
 80014f8:	4b15      	ldr	r3, [pc, #84]	@ (8001550 <MX_HSPI1_Init+0x74>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	611a      	str	r2, [r3, #16]
  hxspi1.Init.ChipSelectHighTimeCycle = 1;
 80014fe:	4b14      	ldr	r3, [pc, #80]	@ (8001550 <MX_HSPI1_Init+0x74>)
 8001500:	2201      	movs	r2, #1
 8001502:	615a      	str	r2, [r3, #20]
  hxspi1.Init.FreeRunningClock = HAL_XSPI_FREERUNCLK_DISABLE;
 8001504:	4b12      	ldr	r3, [pc, #72]	@ (8001550 <MX_HSPI1_Init+0x74>)
 8001506:	2200      	movs	r2, #0
 8001508:	619a      	str	r2, [r3, #24]
  hxspi1.Init.ClockMode = HAL_XSPI_CLOCK_MODE_0;
 800150a:	4b11      	ldr	r3, [pc, #68]	@ (8001550 <MX_HSPI1_Init+0x74>)
 800150c:	2200      	movs	r2, #0
 800150e:	61da      	str	r2, [r3, #28]
  hxspi1.Init.WrapSize = HAL_XSPI_WRAP_NOT_SUPPORTED;
 8001510:	4b0f      	ldr	r3, [pc, #60]	@ (8001550 <MX_HSPI1_Init+0x74>)
 8001512:	2200      	movs	r2, #0
 8001514:	621a      	str	r2, [r3, #32]
  hxspi1.Init.ClockPrescaler = 0;
 8001516:	4b0e      	ldr	r3, [pc, #56]	@ (8001550 <MX_HSPI1_Init+0x74>)
 8001518:	2200      	movs	r2, #0
 800151a:	625a      	str	r2, [r3, #36]	@ 0x24
  hxspi1.Init.SampleShifting = HAL_XSPI_SAMPLE_SHIFT_NONE;
 800151c:	4b0c      	ldr	r3, [pc, #48]	@ (8001550 <MX_HSPI1_Init+0x74>)
 800151e:	2200      	movs	r2, #0
 8001520:	629a      	str	r2, [r3, #40]	@ 0x28
  hxspi1.Init.DelayHoldQuarterCycle = HAL_XSPI_DHQC_DISABLE;
 8001522:	4b0b      	ldr	r3, [pc, #44]	@ (8001550 <MX_HSPI1_Init+0x74>)
 8001524:	2200      	movs	r2, #0
 8001526:	62da      	str	r2, [r3, #44]	@ 0x2c
  hxspi1.Init.ChipSelectBoundary = HAL_XSPI_BONDARYOF_NONE;
 8001528:	4b09      	ldr	r3, [pc, #36]	@ (8001550 <MX_HSPI1_Init+0x74>)
 800152a:	2200      	movs	r2, #0
 800152c:	631a      	str	r2, [r3, #48]	@ 0x30
  hxspi1.Init.MaxTran = 0;
 800152e:	4b08      	ldr	r3, [pc, #32]	@ (8001550 <MX_HSPI1_Init+0x74>)
 8001530:	2200      	movs	r2, #0
 8001532:	639a      	str	r2, [r3, #56]	@ 0x38
  hxspi1.Init.Refresh = 0;
 8001534:	4b06      	ldr	r3, [pc, #24]	@ (8001550 <MX_HSPI1_Init+0x74>)
 8001536:	2200      	movs	r2, #0
 8001538:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_XSPI_Init(&hxspi1) != HAL_OK)
 800153a:	4805      	ldr	r0, [pc, #20]	@ (8001550 <MX_HSPI1_Init+0x74>)
 800153c:	f00a ffaa 	bl	800c494 <HAL_XSPI_Init>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <MX_HSPI1_Init+0x6e>
  {
    Error_Handler();
 8001546:	f000 faf0 	bl	8001b2a <Error_Handler>
  }
  /* USER CODE BEGIN HSPI1_Init 2 */

  /* USER CODE END HSPI1_Init 2 */

}
 800154a:	bf00      	nop
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	2000027c 	.word	0x2000027c
 8001554:	420d3400 	.word	0x420d3400

08001558 <HAL_XSPI_MspInit>:

void HAL_XSPI_MspInit(XSPI_HandleTypeDef* xspiHandle)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b0c4      	sub	sp, #272	@ 0x110
 800155c:	af00      	add	r7, sp, #0
 800155e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001562:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001566:	6018      	str	r0, [r3, #0]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001568:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 800156c:	2200      	movs	r2, #0
 800156e:	601a      	str	r2, [r3, #0]
 8001570:	605a      	str	r2, [r3, #4]
 8001572:	609a      	str	r2, [r3, #8]
 8001574:	60da      	str	r2, [r3, #12]
 8001576:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001578:	f107 0318 	add.w	r3, r7, #24
 800157c:	22e0      	movs	r2, #224	@ 0xe0
 800157e:	2100      	movs	r1, #0
 8001580:	4618      	mov	r0, r3
 8001582:	f00c ff66 	bl	800e452 <memset>
  if(xspiHandle->Instance==HSPI1)
 8001586:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800158a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4a58      	ldr	r2, [pc, #352]	@ (80016f4 <HAL_XSPI_MspInit+0x19c>)
 8001594:	4293      	cmp	r3, r2
 8001596:	f040 80a8 	bne.w	80016ea <HAL_XSPI_MspInit+0x192>

  /* USER CODE END HSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_HSPI;
 800159a:	f04f 0200 	mov.w	r2, #0
 800159e:	f04f 0301 	mov.w	r3, #1
 80015a2:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.HspiClockSelection = RCC_HSPICLKSOURCE_SYSCLK;
 80015a6:	2300      	movs	r3, #0
 80015a8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015ac:	f107 0318 	add.w	r3, r7, #24
 80015b0:	4618      	mov	r0, r3
 80015b2:	f006 febb 	bl	800832c <HAL_RCCEx_PeriphCLKConfig>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d001      	beq.n	80015c0 <HAL_XSPI_MspInit+0x68>
    {
      Error_Handler();
 80015bc:	f000 fab5 	bl	8001b2a <Error_Handler>
    }

    /* HSPI1 clock enable */
    __HAL_RCC_HSPI1_CLK_ENABLE();
 80015c0:	4b4d      	ldr	r3, [pc, #308]	@ (80016f8 <HAL_XSPI_MspInit+0x1a0>)
 80015c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80015c6:	4a4c      	ldr	r2, [pc, #304]	@ (80016f8 <HAL_XSPI_MspInit+0x1a0>)
 80015c8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80015cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80015d0:	4b49      	ldr	r3, [pc, #292]	@ (80016f8 <HAL_XSPI_MspInit+0x1a0>)
 80015d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80015d6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80015da:	617b      	str	r3, [r7, #20]
 80015dc:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80015de:	4b46      	ldr	r3, [pc, #280]	@ (80016f8 <HAL_XSPI_MspInit+0x1a0>)
 80015e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80015e4:	4a44      	ldr	r2, [pc, #272]	@ (80016f8 <HAL_XSPI_MspInit+0x1a0>)
 80015e6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80015ea:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80015ee:	4b42      	ldr	r3, [pc, #264]	@ (80016f8 <HAL_XSPI_MspInit+0x1a0>)
 80015f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80015f4:	f403 7200 	and.w	r2, r3, #512	@ 0x200
 80015f8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80015fc:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001600:	601a      	str	r2, [r3, #0]
 8001602:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001606:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800160a:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800160c:	4b3a      	ldr	r3, [pc, #232]	@ (80016f8 <HAL_XSPI_MspInit+0x1a0>)
 800160e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001612:	4a39      	ldr	r2, [pc, #228]	@ (80016f8 <HAL_XSPI_MspInit+0x1a0>)
 8001614:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001618:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800161c:	4b36      	ldr	r3, [pc, #216]	@ (80016f8 <HAL_XSPI_MspInit+0x1a0>)
 800161e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001622:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8001626:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800162a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800162e:	601a      	str	r2, [r3, #0]
 8001630:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001634:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001638:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800163a:	4b2f      	ldr	r3, [pc, #188]	@ (80016f8 <HAL_XSPI_MspInit+0x1a0>)
 800163c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001640:	4a2d      	ldr	r2, [pc, #180]	@ (80016f8 <HAL_XSPI_MspInit+0x1a0>)
 8001642:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001646:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800164a:	4b2b      	ldr	r3, [pc, #172]	@ (80016f8 <HAL_XSPI_MspInit+0x1a0>)
 800164c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001650:	f003 0280 	and.w	r2, r3, #128	@ 0x80
 8001654:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001658:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800165c:	601a      	str	r2, [r3, #0]
 800165e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001662:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001666:	681b      	ldr	r3, [r3, #0]
    PH11     ------> HSPI1_IO1
    PH13     ------> HSPI1_IO3
    PH9     ------> HSPI1_NCS
    PH12     ------> HSPI1_IO2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001668:	2301      	movs	r3, #1
 800166a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800166e:	2302      	movs	r3, #2
 8001670:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001674:	2300      	movs	r3, #0
 8001676:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800167a:	2303      	movs	r3, #3
 800167c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF8_HSPI1;
 8001680:	2308      	movs	r3, #8
 8001682:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001686:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 800168a:	4619      	mov	r1, r3
 800168c:	481b      	ldr	r0, [pc, #108]	@ (80016fc <HAL_XSPI_MspInit+0x1a4>)
 800168e:	f002 ff19 	bl	80044c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_12
 8001692:	f64f 730f 	movw	r3, #65295	@ 0xff0f
 8001696:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
                          |GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800169a:	2302      	movs	r3, #2
 800169c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a0:	2300      	movs	r3, #0
 80016a2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016a6:	2303      	movs	r3, #3
 80016a8:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF8_HSPI1;
 80016ac:	2308      	movs	r3, #8
 80016ae:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80016b2:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 80016b6:	4619      	mov	r1, r3
 80016b8:	4811      	ldr	r0, [pc, #68]	@ (8001700 <HAL_XSPI_MspInit+0x1a8>)
 80016ba:	f002 ff03 	bl	80044c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_10|GPIO_PIN_11
 80016be:	f44f 437e 	mov.w	r3, #65024	@ 0xfe00
 80016c2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
                          |GPIO_PIN_13|GPIO_PIN_9|GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c6:	2302      	movs	r3, #2
 80016c8:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016cc:	2300      	movs	r3, #0
 80016ce:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016d2:	2303      	movs	r3, #3
 80016d4:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF8_HSPI1;
 80016d8:	2308      	movs	r3, #8
 80016da:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80016de:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 80016e2:	4619      	mov	r1, r3
 80016e4:	4807      	ldr	r0, [pc, #28]	@ (8001704 <HAL_XSPI_MspInit+0x1ac>)
 80016e6:	f002 feed 	bl	80044c4 <HAL_GPIO_Init>

  /* USER CODE BEGIN HSPI1_MspInit 1 */

  /* USER CODE END HSPI1_MspInit 1 */
  }
}
 80016ea:	bf00      	nop
 80016ec:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	420d3400 	.word	0x420d3400
 80016f8:	46020c00 	.word	0x46020c00
 80016fc:	42022400 	.word	0x42022400
 8001700:	42022000 	.word	0x42022000
 8001704:	42021c00 	.word	0x42021c00

08001708 <MX_I2C3_Init>:
I2C_HandleTypeDef hi2c3;
I2C_HandleTypeDef hi2c5;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800170c:	4b1b      	ldr	r3, [pc, #108]	@ (800177c <MX_I2C3_Init+0x74>)
 800170e:	4a1c      	ldr	r2, [pc, #112]	@ (8001780 <MX_I2C3_Init+0x78>)
 8001710:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x30909DEC;
 8001712:	4b1a      	ldr	r3, [pc, #104]	@ (800177c <MX_I2C3_Init+0x74>)
 8001714:	4a1b      	ldr	r2, [pc, #108]	@ (8001784 <MX_I2C3_Init+0x7c>)
 8001716:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001718:	4b18      	ldr	r3, [pc, #96]	@ (800177c <MX_I2C3_Init+0x74>)
 800171a:	2200      	movs	r2, #0
 800171c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800171e:	4b17      	ldr	r3, [pc, #92]	@ (800177c <MX_I2C3_Init+0x74>)
 8001720:	2201      	movs	r2, #1
 8001722:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001724:	4b15      	ldr	r3, [pc, #84]	@ (800177c <MX_I2C3_Init+0x74>)
 8001726:	2200      	movs	r2, #0
 8001728:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800172a:	4b14      	ldr	r3, [pc, #80]	@ (800177c <MX_I2C3_Init+0x74>)
 800172c:	2200      	movs	r2, #0
 800172e:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001730:	4b12      	ldr	r3, [pc, #72]	@ (800177c <MX_I2C3_Init+0x74>)
 8001732:	2200      	movs	r2, #0
 8001734:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001736:	4b11      	ldr	r3, [pc, #68]	@ (800177c <MX_I2C3_Init+0x74>)
 8001738:	2200      	movs	r2, #0
 800173a:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800173c:	4b0f      	ldr	r3, [pc, #60]	@ (800177c <MX_I2C3_Init+0x74>)
 800173e:	2200      	movs	r2, #0
 8001740:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001742:	480e      	ldr	r0, [pc, #56]	@ (800177c <MX_I2C3_Init+0x74>)
 8001744:	f003 f8c8 	bl	80048d8 <HAL_I2C_Init>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800174e:	f000 f9ec 	bl	8001b2a <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001752:	2100      	movs	r1, #0
 8001754:	4809      	ldr	r0, [pc, #36]	@ (800177c <MX_I2C3_Init+0x74>)
 8001756:	f003 f95a 	bl	8004a0e <HAL_I2CEx_ConfigAnalogFilter>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d001      	beq.n	8001764 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001760:	f000 f9e3 	bl	8001b2a <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001764:	2100      	movs	r1, #0
 8001766:	4805      	ldr	r0, [pc, #20]	@ (800177c <MX_I2C3_Init+0x74>)
 8001768:	f003 f99c 	bl	8004aa4 <HAL_I2CEx_ConfigDigitalFilter>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8001772:	f000 f9da 	bl	8001b2a <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001776:	bf00      	nop
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	200002dc 	.word	0x200002dc
 8001780:	46002800 	.word	0x46002800
 8001784:	30909dec 	.word	0x30909dec

08001788 <MX_I2C5_Init>:
/* I2C5 init function */
void MX_I2C5_Init(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C5_Init 0 */

  /* USER CODE BEGIN I2C5_Init 1 */

  /* USER CODE END I2C5_Init 1 */
  hi2c5.Instance = I2C5;
 800178c:	4b1b      	ldr	r3, [pc, #108]	@ (80017fc <MX_I2C5_Init+0x74>)
 800178e:	4a1c      	ldr	r2, [pc, #112]	@ (8001800 <MX_I2C5_Init+0x78>)
 8001790:	601a      	str	r2, [r3, #0]
  hi2c5.Init.Timing = 0x30909DEC;
 8001792:	4b1a      	ldr	r3, [pc, #104]	@ (80017fc <MX_I2C5_Init+0x74>)
 8001794:	4a1b      	ldr	r2, [pc, #108]	@ (8001804 <MX_I2C5_Init+0x7c>)
 8001796:	605a      	str	r2, [r3, #4]
  hi2c5.Init.OwnAddress1 = 0;
 8001798:	4b18      	ldr	r3, [pc, #96]	@ (80017fc <MX_I2C5_Init+0x74>)
 800179a:	2200      	movs	r2, #0
 800179c:	609a      	str	r2, [r3, #8]
  hi2c5.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800179e:	4b17      	ldr	r3, [pc, #92]	@ (80017fc <MX_I2C5_Init+0x74>)
 80017a0:	2201      	movs	r2, #1
 80017a2:	60da      	str	r2, [r3, #12]
  hi2c5.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017a4:	4b15      	ldr	r3, [pc, #84]	@ (80017fc <MX_I2C5_Init+0x74>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	611a      	str	r2, [r3, #16]
  hi2c5.Init.OwnAddress2 = 0;
 80017aa:	4b14      	ldr	r3, [pc, #80]	@ (80017fc <MX_I2C5_Init+0x74>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	615a      	str	r2, [r3, #20]
  hi2c5.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80017b0:	4b12      	ldr	r3, [pc, #72]	@ (80017fc <MX_I2C5_Init+0x74>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	619a      	str	r2, [r3, #24]
  hi2c5.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017b6:	4b11      	ldr	r3, [pc, #68]	@ (80017fc <MX_I2C5_Init+0x74>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	61da      	str	r2, [r3, #28]
  hi2c5.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017bc:	4b0f      	ldr	r3, [pc, #60]	@ (80017fc <MX_I2C5_Init+0x74>)
 80017be:	2200      	movs	r2, #0
 80017c0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c5) != HAL_OK)
 80017c2:	480e      	ldr	r0, [pc, #56]	@ (80017fc <MX_I2C5_Init+0x74>)
 80017c4:	f003 f888 	bl	80048d8 <HAL_I2C_Init>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d001      	beq.n	80017d2 <MX_I2C5_Init+0x4a>
  {
    Error_Handler();
 80017ce:	f000 f9ac 	bl	8001b2a <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c5, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80017d2:	2100      	movs	r1, #0
 80017d4:	4809      	ldr	r0, [pc, #36]	@ (80017fc <MX_I2C5_Init+0x74>)
 80017d6:	f003 f91a 	bl	8004a0e <HAL_I2CEx_ConfigAnalogFilter>
 80017da:	4603      	mov	r3, r0
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d001      	beq.n	80017e4 <MX_I2C5_Init+0x5c>
  {
    Error_Handler();
 80017e0:	f000 f9a3 	bl	8001b2a <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c5, 0) != HAL_OK)
 80017e4:	2100      	movs	r1, #0
 80017e6:	4805      	ldr	r0, [pc, #20]	@ (80017fc <MX_I2C5_Init+0x74>)
 80017e8:	f003 f95c 	bl	8004aa4 <HAL_I2CEx_ConfigDigitalFilter>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d001      	beq.n	80017f6 <MX_I2C5_Init+0x6e>
  {
    Error_Handler();
 80017f2:	f000 f99a 	bl	8001b2a <Error_Handler>
  }
  /* USER CODE BEGIN I2C5_Init 2 */

  /* USER CODE END I2C5_Init 2 */

}
 80017f6:	bf00      	nop
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	20000330 	.word	0x20000330
 8001800:	40009800 	.word	0x40009800
 8001804:	30909dec 	.word	0x30909dec

08001808 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b0c4      	sub	sp, #272	@ 0x110
 800180c:	af00      	add	r7, sp, #0
 800180e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001812:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001816:	6018      	str	r0, [r3, #0]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001818:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 800181c:	2200      	movs	r2, #0
 800181e:	601a      	str	r2, [r3, #0]
 8001820:	605a      	str	r2, [r3, #4]
 8001822:	609a      	str	r2, [r3, #8]
 8001824:	60da      	str	r2, [r3, #12]
 8001826:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001828:	f107 0318 	add.w	r3, r7, #24
 800182c:	22e0      	movs	r2, #224	@ 0xe0
 800182e:	2100      	movs	r1, #0
 8001830:	4618      	mov	r0, r3
 8001832:	f00c fe0e 	bl	800e452 <memset>
  if(i2cHandle->Instance==I2C3)
 8001836:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800183a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4a5b      	ldr	r2, [pc, #364]	@ (80019b0 <HAL_I2C_MspInit+0x1a8>)
 8001844:	4293      	cmp	r3, r2
 8001846:	d14f      	bne.n	80018e8 <HAL_I2C_MspInit+0xe0>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001848:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800184c:	f04f 0300 	mov.w	r3, #0
 8001850:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK3;
 8001854:	2300      	movs	r3, #0
 8001856:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800185a:	f107 0318 	add.w	r3, r7, #24
 800185e:	4618      	mov	r0, r3
 8001860:	f006 fd64 	bl	800832c <HAL_RCCEx_PeriphCLKConfig>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	d001      	beq.n	800186e <HAL_I2C_MspInit+0x66>
    {
      Error_Handler();
 800186a:	f000 f95e 	bl	8001b2a <Error_Handler>
    }

    __HAL_RCC_GPIOH_CLK_ENABLE();
 800186e:	4b51      	ldr	r3, [pc, #324]	@ (80019b4 <HAL_I2C_MspInit+0x1ac>)
 8001870:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001874:	4a4f      	ldr	r2, [pc, #316]	@ (80019b4 <HAL_I2C_MspInit+0x1ac>)
 8001876:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800187a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800187e:	4b4d      	ldr	r3, [pc, #308]	@ (80019b4 <HAL_I2C_MspInit+0x1ac>)
 8001880:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001884:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001888:	617b      	str	r3, [r7, #20]
 800188a:	697b      	ldr	r3, [r7, #20]
    /**I2C3 GPIO Configuration
    PH7     ------> I2C3_SCL
    PH8     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800188c:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001890:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001894:	2312      	movs	r3, #18
 8001896:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189a:	2300      	movs	r3, #0
 800189c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a0:	2300      	movs	r3, #0
 80018a2:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80018a6:	2304      	movs	r3, #4
 80018a8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80018ac:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 80018b0:	4619      	mov	r1, r3
 80018b2:	4841      	ldr	r0, [pc, #260]	@ (80019b8 <HAL_I2C_MspInit+0x1b0>)
 80018b4:	f002 fe06 	bl	80044c4 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80018b8:	4b3e      	ldr	r3, [pc, #248]	@ (80019b4 <HAL_I2C_MspInit+0x1ac>)
 80018ba:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80018be:	4a3d      	ldr	r2, [pc, #244]	@ (80019b4 <HAL_I2C_MspInit+0x1ac>)
 80018c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80018c4:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 80018c8:	4b3a      	ldr	r3, [pc, #232]	@ (80019b4 <HAL_I2C_MspInit+0x1ac>)
 80018ca:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80018ce:	f003 0280 	and.w	r2, r3, #128	@ 0x80
 80018d2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80018d6:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80018da:	601a      	str	r2, [r3, #0]
 80018dc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80018e0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80018e4:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_I2C5_CLK_ENABLE();
  /* USER CODE BEGIN I2C5_MspInit 1 */

  /* USER CODE END I2C5_MspInit 1 */
  }
}
 80018e6:	e05e      	b.n	80019a6 <HAL_I2C_MspInit+0x19e>
  else if(i2cHandle->Instance==I2C5)
 80018e8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80018ec:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a31      	ldr	r2, [pc, #196]	@ (80019bc <HAL_I2C_MspInit+0x1b4>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d155      	bne.n	80019a6 <HAL_I2C_MspInit+0x19e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C5;
 80018fa:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80018fe:	f04f 0300 	mov.w	r3, #0
 8001902:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.I2c5ClockSelection = RCC_I2C5CLKSOURCE_PCLK1;
 8001906:	2300      	movs	r3, #0
 8001908:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800190c:	f107 0318 	add.w	r3, r7, #24
 8001910:	4618      	mov	r0, r3
 8001912:	f006 fd0b 	bl	800832c <HAL_RCCEx_PeriphCLKConfig>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d001      	beq.n	8001920 <HAL_I2C_MspInit+0x118>
      Error_Handler();
 800191c:	f000 f905 	bl	8001b2a <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001920:	4b24      	ldr	r3, [pc, #144]	@ (80019b4 <HAL_I2C_MspInit+0x1ac>)
 8001922:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001926:	4a23      	ldr	r2, [pc, #140]	@ (80019b4 <HAL_I2C_MspInit+0x1ac>)
 8001928:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800192c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001930:	4b20      	ldr	r3, [pc, #128]	@ (80019b4 <HAL_I2C_MspInit+0x1ac>)
 8001932:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001936:	f003 0280 	and.w	r2, r3, #128	@ 0x80
 800193a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800193e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001942:	601a      	str	r2, [r3, #0]
 8001944:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001948:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800194c:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4;
 800194e:	2330      	movs	r3, #48	@ 0x30
 8001950:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001954:	2312      	movs	r3, #18
 8001956:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195a:	2300      	movs	r3, #0
 800195c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001960:	2300      	movs	r3, #0
 8001962:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF2_I2C5;
 8001966:	2302      	movs	r3, #2
 8001968:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800196c:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8001970:	4619      	mov	r1, r3
 8001972:	4811      	ldr	r0, [pc, #68]	@ (80019b8 <HAL_I2C_MspInit+0x1b0>)
 8001974:	f002 fda6 	bl	80044c4 <HAL_GPIO_Init>
    __HAL_RCC_I2C5_CLK_ENABLE();
 8001978:	4b0e      	ldr	r3, [pc, #56]	@ (80019b4 <HAL_I2C_MspInit+0x1ac>)
 800197a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800197e:	4a0d      	ldr	r2, [pc, #52]	@ (80019b4 <HAL_I2C_MspInit+0x1ac>)
 8001980:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001984:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
 8001988:	4b0a      	ldr	r3, [pc, #40]	@ (80019b4 <HAL_I2C_MspInit+0x1ac>)
 800198a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800198e:	f003 0240 	and.w	r2, r3, #64	@ 0x40
 8001992:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001996:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800199a:	601a      	str	r2, [r3, #0]
 800199c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80019a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80019a4:	681b      	ldr	r3, [r3, #0]
}
 80019a6:	bf00      	nop
 80019a8:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	46002800 	.word	0x46002800
 80019b4:	46020c00 	.word	0x46020c00
 80019b8:	42021c00 	.word	0x42021c00
 80019bc:	40009800 	.word	0x40009800

080019c0 <MX_ICACHE_Init>:

/* USER CODE END 0 */

/* ICACHE init function */
void MX_ICACHE_Init(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 80019c4:	2000      	movs	r0, #0
 80019c6:	f003 f8b9 	bl	8004b3c <HAL_ICACHE_ConfigAssociativityMode>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d001      	beq.n	80019d4 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 80019d0:	f000 f8ab 	bl	8001b2a <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 80019d4:	f003 f8d2 	bl	8004b7c <HAL_ICACHE_Enable>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d001      	beq.n	80019e2 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 80019de:	f000 f8a4 	bl	8001b2a <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 80019e2:	bf00      	nop
 80019e4:	bd80      	pop	{r7, pc}
	...

080019e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019ec:	f000 fe28 	bl	8002640 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the System Power */
  SystemPower_Config();
 80019f0:	f000 f88d 	bl	8001b0e <SystemPower_Config>

  /* Configure the system clock */
  SystemClock_Config();
 80019f4:	f000 f828 	bl	8001a48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019f8:	f7ff fc38 	bl	800126c <MX_GPIO_Init>
  MX_ADC4_Init();
 80019fc:	f7ff fb2a 	bl	8001054 <MX_ADC4_Init>
  MX_HSPI1_Init();
 8001a00:	f7ff fd6c 	bl	80014dc <MX_HSPI1_Init>
  MX_I2C3_Init();
 8001a04:	f7ff fe80 	bl	8001708 <MX_I2C3_Init>
  MX_I2C5_Init();
 8001a08:	f7ff febe 	bl	8001788 <MX_I2C5_Init>
  MX_ICACHE_Init();
 8001a0c:	f7ff ffd8 	bl	80019c0 <MX_ICACHE_Init>
  MX_OCTOSPI1_Init();
 8001a10:	f000 f892 	bl	8001b38 <MX_OCTOSPI1_Init>
  MX_SDMMC1_MMC_Init();
 8001a14:	f000 fa22 	bl	8001e5c <MX_SDMMC1_MMC_Init>
  MX_USART1_UART_Init();
 8001a18:	f000 fc74 	bl	8002304 <MX_USART1_UART_Init>
  MX_USB_OTG_HS_PCD_Init();
 8001a1c:	f000 fd40 	bl	80024a0 <MX_USB_OTG_HS_PCD_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  count++;
 8001a20:	4b07      	ldr	r3, [pc, #28]	@ (8001a40 <main+0x58>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	3301      	adds	r3, #1
 8001a26:	4a06      	ldr	r2, [pc, #24]	@ (8001a40 <main+0x58>)
 8001a28:	6013      	str	r3, [r2, #0]
	  HAL_GPIO_TogglePin(GPIOE, LED_GREEN_Pin);
 8001a2a:	2101      	movs	r1, #1
 8001a2c:	4805      	ldr	r0, [pc, #20]	@ (8001a44 <main+0x5c>)
 8001a2e:	f002 ff39 	bl	80048a4 <HAL_GPIO_TogglePin>
	  //printf("[%d]\r\n", count++);
	  HAL_Delay(1000);
 8001a32:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001a36:	f000 fec9 	bl	80027cc <HAL_Delay>
	  count++;
 8001a3a:	bf00      	nop
 8001a3c:	e7f0      	b.n	8001a20 <main+0x38>
 8001a3e:	bf00      	nop
 8001a40:	20000384 	.word	0x20000384
 8001a44:	42021000 	.word	0x42021000

08001a48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b09e      	sub	sp, #120	@ 0x78
 8001a4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a4e:	f107 0318 	add.w	r3, r7, #24
 8001a52:	2260      	movs	r2, #96	@ 0x60
 8001a54:	2100      	movs	r1, #0
 8001a56:	4618      	mov	r0, r3
 8001a58:	f00c fcfb 	bl	800e452 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a5c:	463b      	mov	r3, r7
 8001a5e:	2200      	movs	r2, #0
 8001a60:	601a      	str	r2, [r3, #0]
 8001a62:	605a      	str	r2, [r3, #4]
 8001a64:	609a      	str	r2, [r3, #8]
 8001a66:	60da      	str	r2, [r3, #12]
 8001a68:	611a      	str	r2, [r3, #16]
 8001a6a:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001a6c:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 8001a70:	f005 f876 	bl	8006b60 <HAL_PWREx_ControlVoltageScaling>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d001      	beq.n	8001a7e <SystemClock_Config+0x36>
  {
    Error_Handler();
 8001a7a:	f000 f856 	bl	8001b2a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8001a7e:	2313      	movs	r3, #19
 8001a80:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a82:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001a86:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a88:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001a8c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a8e:	2310      	movs	r3, #16
 8001a90:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001a92:	2301      	movs	r3, #1
 8001a94:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001a96:	2310      	movs	r3, #16
 8001a98:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_0;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a9e:	2302      	movs	r3, #2
 8001aa0:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001aa2:	2303      	movs	r3, #3
 8001aa4:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001aae:	230a      	movs	r3, #10
 8001ab0:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLP = 8;
 8001ab2:	2308      	movs	r3, #8
 8001ab4:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001ab6:	2302      	movs	r3, #2
 8001ab8:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLR = 1;
 8001aba:	2301      	movs	r3, #1
 8001abc:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 8001abe:	230c      	movs	r3, #12
 8001ac0:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ac6:	f107 0318 	add.w	r3, r7, #24
 8001aca:	4618      	mov	r0, r3
 8001acc:	f005 f982 	bl	8006dd4 <HAL_RCC_OscConfig>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d001      	beq.n	8001ada <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001ad6:	f000 f828 	bl	8001b2a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ada:	231f      	movs	r3, #31
 8001adc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ade:	2303      	movs	r3, #3
 8001ae0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001aea:	2300      	movs	r3, #0
 8001aec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8001aee:	2300      	movs	r3, #0
 8001af0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001af2:	463b      	mov	r3, r7
 8001af4:	2104      	movs	r1, #4
 8001af6:	4618      	mov	r0, r3
 8001af8:	f006 f848 	bl	8007b8c <HAL_RCC_ClockConfig>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d001      	beq.n	8001b06 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8001b02:	f000 f812 	bl	8001b2a <Error_Handler>
  }
}
 8001b06:	bf00      	nop
 8001b08:	3778      	adds	r7, #120	@ 0x78
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}

08001b0e <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 8001b0e:	b580      	push	{r7, lr}
 8001b10:	af00      	add	r7, sp, #0

  /*
   * Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
   */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001b12:	f005 f94f 	bl	8006db4 <HAL_PWREx_DisableUCPDDeadBattery>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 8001b16:	2002      	movs	r0, #2
 8001b18:	f005 f8ae 	bl	8006c78 <HAL_PWREx_ConfigSupply>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d001      	beq.n	8001b26 <SystemPower_Config+0x18>
  {
    Error_Handler();
 8001b22:	f000 f802 	bl	8001b2a <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 8001b26:	bf00      	nop
 8001b28:	bd80      	pop	{r7, pc}

08001b2a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b2a:	b480      	push	{r7}
 8001b2c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b2e:	b672      	cpsid	i
}
 8001b30:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b32:	bf00      	nop
 8001b34:	e7fd      	b.n	8001b32 <Error_Handler+0x8>
	...

08001b38 <MX_OCTOSPI1_Init>:

OSPI_HandleTypeDef hospi1;

/* OCTOSPI1 init function */
void MX_OCTOSPI1_Init(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b088      	sub	sp, #32
 8001b3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 8001b3e:	f107 0308 	add.w	r3, r7, #8
 8001b42:	2200      	movs	r2, #0
 8001b44:	601a      	str	r2, [r3, #0]
 8001b46:	605a      	str	r2, [r3, #4]
 8001b48:	609a      	str	r2, [r3, #8]
 8001b4a:	60da      	str	r2, [r3, #12]
 8001b4c:	611a      	str	r2, [r3, #16]
 8001b4e:	615a      	str	r2, [r3, #20]
  HAL_OSPI_DLYB_CfgTypeDef HAL_OSPI_DLYB_Cfg_Struct = {0};
 8001b50:	463b      	mov	r3, r7
 8001b52:	2200      	movs	r2, #0
 8001b54:	601a      	str	r2, [r3, #0]
 8001b56:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  hospi1.Instance = OCTOSPI1;
 8001b58:	4b30      	ldr	r3, [pc, #192]	@ (8001c1c <MX_OCTOSPI1_Init+0xe4>)
 8001b5a:	4a31      	ldr	r2, [pc, #196]	@ (8001c20 <MX_OCTOSPI1_Init+0xe8>)
 8001b5c:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 8001b5e:	4b2f      	ldr	r3, [pc, #188]	@ (8001c1c <MX_OCTOSPI1_Init+0xe4>)
 8001b60:	2201      	movs	r2, #1
 8001b62:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8001b64:	4b2d      	ldr	r3, [pc, #180]	@ (8001c1c <MX_OCTOSPI1_Init+0xe4>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MICRON;
 8001b6a:	4b2c      	ldr	r3, [pc, #176]	@ (8001c1c <MX_OCTOSPI1_Init+0xe4>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 32;
 8001b70:	4b2a      	ldr	r3, [pc, #168]	@ (8001c1c <MX_OCTOSPI1_Init+0xe4>)
 8001b72:	2220      	movs	r2, #32
 8001b74:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 8001b76:	4b29      	ldr	r3, [pc, #164]	@ (8001c1c <MX_OCTOSPI1_Init+0xe4>)
 8001b78:	2201      	movs	r2, #1
 8001b7a:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8001b7c:	4b27      	ldr	r3, [pc, #156]	@ (8001c1c <MX_OCTOSPI1_Init+0xe4>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8001b82:	4b26      	ldr	r3, [pc, #152]	@ (8001c1c <MX_OCTOSPI1_Init+0xe4>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	61da      	str	r2, [r3, #28]
  hospi1.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 8001b88:	4b24      	ldr	r3, [pc, #144]	@ (8001c1c <MX_OCTOSPI1_Init+0xe4>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	621a      	str	r2, [r3, #32]
  hospi1.Init.ClockPrescaler = 1;
 8001b8e:	4b23      	ldr	r3, [pc, #140]	@ (8001c1c <MX_OCTOSPI1_Init+0xe4>)
 8001b90:	2201      	movs	r2, #1
 8001b92:	625a      	str	r2, [r3, #36]	@ 0x24
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8001b94:	4b21      	ldr	r3, [pc, #132]	@ (8001c1c <MX_OCTOSPI1_Init+0xe4>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	629a      	str	r2, [r3, #40]	@ 0x28
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8001b9a:	4b20      	ldr	r3, [pc, #128]	@ (8001c1c <MX_OCTOSPI1_Init+0xe4>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hospi1.Init.ChipSelectBoundary = 0;
 8001ba0:	4b1e      	ldr	r3, [pc, #120]	@ (8001c1c <MX_OCTOSPI1_Init+0xe4>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	631a      	str	r2, [r3, #48]	@ 0x30
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8001ba6:	4b1d      	ldr	r3, [pc, #116]	@ (8001c1c <MX_OCTOSPI1_Init+0xe4>)
 8001ba8:	2208      	movs	r2, #8
 8001baa:	635a      	str	r2, [r3, #52]	@ 0x34
  hospi1.Init.MaxTran = 0;
 8001bac:	4b1b      	ldr	r3, [pc, #108]	@ (8001c1c <MX_OCTOSPI1_Init+0xe4>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	639a      	str	r2, [r3, #56]	@ 0x38
  hospi1.Init.Refresh = 0;
 8001bb2:	4b1a      	ldr	r3, [pc, #104]	@ (8001c1c <MX_OCTOSPI1_Init+0xe4>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8001bb8:	4818      	ldr	r0, [pc, #96]	@ (8001c1c <MX_OCTOSPI1_Init+0xe4>)
 8001bba:	f003 ff29 	bl	8005a10 <HAL_OSPI_Init>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d001      	beq.n	8001bc8 <MX_OCTOSPI1_Init+0x90>
  {
    Error_Handler();
 8001bc4:	f7ff ffb1 	bl	8001b2a <Error_Handler>
  }
  sOspiManagerCfg.ClkPort = 1;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	60bb      	str	r3, [r7, #8]
  sOspiManagerCfg.DQSPort = 1;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	60fb      	str	r3, [r7, #12]
  sOspiManagerCfg.NCSPort = 1;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	613b      	str	r3, [r7, #16]
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 8001bd4:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 8001bd8:	617b      	str	r3, [r7, #20]
  sOspiManagerCfg.IOHighPort = HAL_OSPIM_IOPORT_1_HIGH;
 8001bda:	4b12      	ldr	r3, [pc, #72]	@ (8001c24 <MX_OCTOSPI1_Init+0xec>)
 8001bdc:	61bb      	str	r3, [r7, #24]
  if (HAL_OSPIM_Config(&hospi1, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001bde:	f107 0308 	add.w	r3, r7, #8
 8001be2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001be6:	4619      	mov	r1, r3
 8001be8:	480c      	ldr	r0, [pc, #48]	@ (8001c1c <MX_OCTOSPI1_Init+0xe4>)
 8001bea:	f004 f851 	bl	8005c90 <HAL_OSPIM_Config>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d001      	beq.n	8001bf8 <MX_OCTOSPI1_Init+0xc0>
  {
    Error_Handler();
 8001bf4:	f7ff ff99 	bl	8001b2a <Error_Handler>
  }
  HAL_OSPI_DLYB_Cfg_Struct.Units = 0;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	603b      	str	r3, [r7, #0]
  HAL_OSPI_DLYB_Cfg_Struct.PhaseSel = 0;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	607b      	str	r3, [r7, #4]
  if (HAL_OSPI_DLYB_SetConfig(&hospi1, &HAL_OSPI_DLYB_Cfg_Struct) != HAL_OK)
 8001c00:	463b      	mov	r3, r7
 8001c02:	4619      	mov	r1, r3
 8001c04:	4805      	ldr	r0, [pc, #20]	@ (8001c1c <MX_OCTOSPI1_Init+0xe4>)
 8001c06:	f004 fe33 	bl	8006870 <HAL_OSPI_DLYB_SetConfig>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d001      	beq.n	8001c14 <MX_OCTOSPI1_Init+0xdc>
  {
    Error_Handler();
 8001c10:	f7ff ff8b 	bl	8001b2a <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 8001c14:	bf00      	nop
 8001c16:	3720      	adds	r7, #32
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	20000388 	.word	0x20000388
 8001c20:	420d1400 	.word	0x420d1400
 8001c24:	01000001 	.word	0x01000001

08001c28 <HAL_OSPI_MspInit>:

void HAL_OSPI_MspInit(OSPI_HandleTypeDef* ospiHandle)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b0c6      	sub	sp, #280	@ 0x118
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001c32:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001c36:	6018      	str	r0, [r3, #0]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c38:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	601a      	str	r2, [r3, #0]
 8001c40:	605a      	str	r2, [r3, #4]
 8001c42:	609a      	str	r2, [r3, #8]
 8001c44:	60da      	str	r2, [r3, #12]
 8001c46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c48:	f107 0320 	add.w	r3, r7, #32
 8001c4c:	22e0      	movs	r2, #224	@ 0xe0
 8001c4e:	2100      	movs	r1, #0
 8001c50:	4618      	mov	r0, r3
 8001c52:	f00c fbfe 	bl	800e452 <memset>
  if(ospiHandle->Instance==OCTOSPI1)
 8001c56:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001c5a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a79      	ldr	r2, [pc, #484]	@ (8001e48 <HAL_OSPI_MspInit+0x220>)
 8001c64:	4293      	cmp	r3, r2
 8001c66:	f040 80e9 	bne.w	8001e3c <HAL_OSPI_MspInit+0x214>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 8001c6a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001c6e:	f04f 0300 	mov.w	r3, #0
 8001c72:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 8001c76:	2300      	movs	r3, #0
 8001c78:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c7c:	f107 0320 	add.w	r3, r7, #32
 8001c80:	4618      	mov	r0, r3
 8001c82:	f006 fb53 	bl	800832c <HAL_RCCEx_PeriphCLKConfig>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d001      	beq.n	8001c90 <HAL_OSPI_MspInit+0x68>
    {
      Error_Handler();
 8001c8c:	f7ff ff4d 	bl	8001b2a <Error_Handler>
    }

    /* OCTOSPI1 clock enable */
    __HAL_RCC_OSPIM_CLK_ENABLE();
 8001c90:	4b6e      	ldr	r3, [pc, #440]	@ (8001e4c <HAL_OSPI_MspInit+0x224>)
 8001c92:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001c96:	4a6d      	ldr	r2, [pc, #436]	@ (8001e4c <HAL_OSPI_MspInit+0x224>)
 8001c98:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001c9c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001ca0:	4b6a      	ldr	r3, [pc, #424]	@ (8001e4c <HAL_OSPI_MspInit+0x224>)
 8001ca2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001ca6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001caa:	61fb      	str	r3, [r7, #28]
 8001cac:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8001cae:	4b67      	ldr	r3, [pc, #412]	@ (8001e4c <HAL_OSPI_MspInit+0x224>)
 8001cb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001cb4:	4a65      	ldr	r2, [pc, #404]	@ (8001e4c <HAL_OSPI_MspInit+0x224>)
 8001cb6:	f043 0310 	orr.w	r3, r3, #16
 8001cba:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001cbe:	4b63      	ldr	r3, [pc, #396]	@ (8001e4c <HAL_OSPI_MspInit+0x224>)
 8001cc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001cc4:	f003 0210 	and.w	r2, r3, #16
 8001cc8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001ccc:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001cd0:	601a      	str	r2, [r3, #0]
 8001cd2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001cd6:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001cda:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001cdc:	4b5b      	ldr	r3, [pc, #364]	@ (8001e4c <HAL_OSPI_MspInit+0x224>)
 8001cde:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001ce2:	4a5a      	ldr	r2, [pc, #360]	@ (8001e4c <HAL_OSPI_MspInit+0x224>)
 8001ce4:	f043 0320 	orr.w	r3, r3, #32
 8001ce8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001cec:	4b57      	ldr	r3, [pc, #348]	@ (8001e4c <HAL_OSPI_MspInit+0x224>)
 8001cee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001cf2:	f003 0220 	and.w	r2, r3, #32
 8001cf6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001cfa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001cfe:	601a      	str	r2, [r3, #0]
 8001d00:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001d04:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001d08:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d0a:	4b50      	ldr	r3, [pc, #320]	@ (8001e4c <HAL_OSPI_MspInit+0x224>)
 8001d0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001d10:	4a4e      	ldr	r2, [pc, #312]	@ (8001e4c <HAL_OSPI_MspInit+0x224>)
 8001d12:	f043 0304 	orr.w	r3, r3, #4
 8001d16:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001d1a:	4b4c      	ldr	r3, [pc, #304]	@ (8001e4c <HAL_OSPI_MspInit+0x224>)
 8001d1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001d20:	f003 0204 	and.w	r2, r3, #4
 8001d24:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001d28:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001d2c:	601a      	str	r2, [r3, #0]
 8001d2e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001d32:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001d36:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d38:	4b44      	ldr	r3, [pc, #272]	@ (8001e4c <HAL_OSPI_MspInit+0x224>)
 8001d3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001d3e:	4a43      	ldr	r2, [pc, #268]	@ (8001e4c <HAL_OSPI_MspInit+0x224>)
 8001d40:	f043 0301 	orr.w	r3, r3, #1
 8001d44:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001d48:	4b40      	ldr	r3, [pc, #256]	@ (8001e4c <HAL_OSPI_MspInit+0x224>)
 8001d4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001d4e:	f003 0201 	and.w	r2, r3, #1
 8001d52:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001d56:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001d5a:	601a      	str	r2, [r3, #0]
 8001d5c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001d60:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001d64:	681b      	ldr	r3, [r3, #0]
    PC3     ------> OCTOSPIM_P1_IO6
    PC2     ------> OCTOSPIM_P1_IO5
    PC0     ------> OCTOSPIM_P1_IO7
    PA1     ------> OCTOSPIM_P1_DQS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001d66:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001d6a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d6e:	2302      	movs	r3, #2
 8001d70:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d74:	2300      	movs	r3, #0
 8001d76:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPI1;
 8001d80:	2303      	movs	r3, #3
 8001d82:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001d86:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	4830      	ldr	r0, [pc, #192]	@ (8001e50 <HAL_OSPI_MspInit+0x228>)
 8001d8e:	f002 fb99 	bl	80044c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_6|GPIO_PIN_8;
 8001d92:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8001d96:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d9a:	2302      	movs	r3, #2
 8001d9c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da0:	2300      	movs	r3, #0
 8001da2:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001da6:	2303      	movs	r3, #3
 8001da8:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 8001dac:	230a      	movs	r3, #10
 8001dae:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001db2:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8001db6:	4619      	mov	r1, r3
 8001db8:	4825      	ldr	r0, [pc, #148]	@ (8001e50 <HAL_OSPI_MspInit+0x228>)
 8001dba:	f002 fb83 	bl	80044c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_2;
 8001dbe:	230e      	movs	r3, #14
 8001dc0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dc4:	2302      	movs	r3, #2
 8001dc6:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dd0:	2303      	movs	r3, #3
 8001dd2:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 8001dd6:	230a      	movs	r3, #10
 8001dd8:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ddc:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8001de0:	4619      	mov	r1, r3
 8001de2:	481c      	ldr	r0, [pc, #112]	@ (8001e54 <HAL_OSPI_MspInit+0x22c>)
 8001de4:	f002 fb6e 	bl	80044c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1;
 8001de8:	2306      	movs	r3, #6
 8001dea:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dee:	2302      	movs	r3, #2
 8001df0:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df4:	2300      	movs	r3, #0
 8001df6:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 8001e00:	230a      	movs	r3, #10
 8001e02:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e06:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	4812      	ldr	r0, [pc, #72]	@ (8001e58 <HAL_OSPI_MspInit+0x230>)
 8001e0e:	f002 fb59 	bl	80044c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001e12:	2301      	movs	r3, #1
 8001e14:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e18:	2302      	movs	r3, #2
 8001e1a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e24:	2303      	movs	r3, #3
 8001e26:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPI1;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e30:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8001e34:	4619      	mov	r1, r3
 8001e36:	4807      	ldr	r0, [pc, #28]	@ (8001e54 <HAL_OSPI_MspInit+0x22c>)
 8001e38:	f002 fb44 	bl	80044c4 <HAL_GPIO_Init>

  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }
}
 8001e3c:	bf00      	nop
 8001e3e:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	420d1400 	.word	0x420d1400
 8001e4c:	46020c00 	.word	0x46020c00
 8001e50:	42021400 	.word	0x42021400
 8001e54:	42020800 	.word	0x42020800
 8001e58:	42020000 	.word	0x42020000

08001e5c <MX_SDMMC1_MMC_Init>:
MMC_HandleTypeDef hmmc1;

/* SDMMC1 init function */

void MX_SDMMC1_MMC_Init(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hmmc1.Instance = SDMMC1;
 8001e60:	4b0e      	ldr	r3, [pc, #56]	@ (8001e9c <MX_SDMMC1_MMC_Init+0x40>)
 8001e62:	4a0f      	ldr	r2, [pc, #60]	@ (8001ea0 <MX_SDMMC1_MMC_Init+0x44>)
 8001e64:	601a      	str	r2, [r3, #0]
  hmmc1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001e66:	4b0d      	ldr	r3, [pc, #52]	@ (8001e9c <MX_SDMMC1_MMC_Init+0x40>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	605a      	str	r2, [r3, #4]
  hmmc1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001e6c:	4b0b      	ldr	r3, [pc, #44]	@ (8001e9c <MX_SDMMC1_MMC_Init+0x40>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	609a      	str	r2, [r3, #8]
  hmmc1.Init.BusWide = SDMMC_BUS_WIDE_8B;
 8001e72:	4b0a      	ldr	r3, [pc, #40]	@ (8001e9c <MX_SDMMC1_MMC_Init+0x40>)
 8001e74:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001e78:	60da      	str	r2, [r3, #12]
  hmmc1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001e7a:	4b08      	ldr	r3, [pc, #32]	@ (8001e9c <MX_SDMMC1_MMC_Init+0x40>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	611a      	str	r2, [r3, #16]
  hmmc1.Init.ClockDiv = 0;
 8001e80:	4b06      	ldr	r3, [pc, #24]	@ (8001e9c <MX_SDMMC1_MMC_Init+0x40>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	615a      	str	r2, [r3, #20]
  if (HAL_MMC_Init(&hmmc1) != HAL_OK)
 8001e86:	4805      	ldr	r0, [pc, #20]	@ (8001e9c <MX_SDMMC1_MMC_Init+0x40>)
 8001e88:	f002 fe88 	bl	8004b9c <HAL_MMC_Init>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d001      	beq.n	8001e96 <MX_SDMMC1_MMC_Init+0x3a>
  {
    Error_Handler();
 8001e92:	f7ff fe4a 	bl	8001b2a <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8001e96:	bf00      	nop
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	200003e4 	.word	0x200003e4
 8001ea0:	420c8000 	.word	0x420c8000

08001ea4 <HAL_MMC_MspInit>:

void HAL_MMC_MspInit(MMC_HandleTypeDef* mmcHandle)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b0c4      	sub	sp, #272	@ 0x110
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001eae:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001eb2:	6018      	str	r0, [r3, #0]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eb4:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8001eb8:	2200      	movs	r2, #0
 8001eba:	601a      	str	r2, [r3, #0]
 8001ebc:	605a      	str	r2, [r3, #4]
 8001ebe:	609a      	str	r2, [r3, #8]
 8001ec0:	60da      	str	r2, [r3, #12]
 8001ec2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ec4:	f107 0318 	add.w	r3, r7, #24
 8001ec8:	22e0      	movs	r2, #224	@ 0xe0
 8001eca:	2100      	movs	r1, #0
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f00c fac0 	bl	800e452 <memset>
  if(mmcHandle->Instance==SDMMC1)
 8001ed2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001ed6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a59      	ldr	r2, [pc, #356]	@ (8002044 <HAL_MMC_MspInit+0x1a0>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	f040 80a9 	bne.w	8002038 <HAL_MMC_MspInit+0x194>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8001ee6:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001eea:	f04f 0300 	mov.w	r3, #0
 8001eee:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL1;
 8001ef2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001ef6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001efa:	f107 0318 	add.w	r3, r7, #24
 8001efe:	4618      	mov	r0, r3
 8001f00:	f006 fa14 	bl	800832c <HAL_RCCEx_PeriphCLKConfig>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d001      	beq.n	8001f0e <HAL_MMC_MspInit+0x6a>
    {
      Error_Handler();
 8001f0a:	f7ff fe0e 	bl	8001b2a <Error_Handler>
    }

    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001f0e:	4b4e      	ldr	r3, [pc, #312]	@ (8002048 <HAL_MMC_MspInit+0x1a4>)
 8001f10:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001f14:	4a4c      	ldr	r2, [pc, #304]	@ (8002048 <HAL_MMC_MspInit+0x1a4>)
 8001f16:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001f1a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001f1e:	4b4a      	ldr	r3, [pc, #296]	@ (8002048 <HAL_MMC_MspInit+0x1a4>)
 8001f20:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001f24:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001f28:	617b      	str	r3, [r7, #20]
 8001f2a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f2c:	4b46      	ldr	r3, [pc, #280]	@ (8002048 <HAL_MMC_MspInit+0x1a4>)
 8001f2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001f32:	4a45      	ldr	r2, [pc, #276]	@ (8002048 <HAL_MMC_MspInit+0x1a4>)
 8001f34:	f043 0304 	orr.w	r3, r3, #4
 8001f38:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001f3c:	4b42      	ldr	r3, [pc, #264]	@ (8002048 <HAL_MMC_MspInit+0x1a4>)
 8001f3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001f42:	f003 0204 	and.w	r2, r3, #4
 8001f46:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001f4a:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001f4e:	601a      	str	r2, [r3, #0]
 8001f50:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001f54:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001f58:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f5a:	4b3b      	ldr	r3, [pc, #236]	@ (8002048 <HAL_MMC_MspInit+0x1a4>)
 8001f5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001f60:	4a39      	ldr	r2, [pc, #228]	@ (8002048 <HAL_MMC_MspInit+0x1a4>)
 8001f62:	f043 0308 	orr.w	r3, r3, #8
 8001f66:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001f6a:	4b37      	ldr	r3, [pc, #220]	@ (8002048 <HAL_MMC_MspInit+0x1a4>)
 8001f6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001f70:	f003 0208 	and.w	r2, r3, #8
 8001f74:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001f78:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001f7c:	601a      	str	r2, [r3, #0]
 8001f7e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001f82:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001f86:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f88:	4b2f      	ldr	r3, [pc, #188]	@ (8002048 <HAL_MMC_MspInit+0x1a4>)
 8001f8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001f8e:	4a2e      	ldr	r2, [pc, #184]	@ (8002048 <HAL_MMC_MspInit+0x1a4>)
 8001f90:	f043 0302 	orr.w	r3, r3, #2
 8001f94:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001f98:	4b2b      	ldr	r3, [pc, #172]	@ (8002048 <HAL_MMC_MspInit+0x1a4>)
 8001f9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001f9e:	f003 0202 	and.w	r2, r3, #2
 8001fa2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001fa6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001faa:	601a      	str	r2, [r3, #0]
 8001fac:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001fb0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001fb4:	681b      	ldr	r3, [r3, #0]
    PB8     ------> SDMMC1_D4
    PC12     ------> SDMMC1_CK
    PC9     ------> SDMMC1_D1
    PC6     ------> SDMMC1_D6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_7
 8001fb6:	f44f 53fe 	mov.w	r3, #8128	@ 0x1fc0
 8001fba:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
                          |GPIO_PIN_12|GPIO_PIN_9|GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fbe:	2302      	movs	r3, #2
 8001fc0:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001fca:	2302      	movs	r3, #2
 8001fcc:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001fd0:	230c      	movs	r3, #12
 8001fd2:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fd6:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8001fda:	4619      	mov	r1, r3
 8001fdc:	481b      	ldr	r0, [pc, #108]	@ (800204c <HAL_MMC_MspInit+0x1a8>)
 8001fde:	f002 fa71 	bl	80044c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001fe2:	2304      	movs	r3, #4
 8001fe4:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fe8:	2302      	movs	r3, #2
 8001fea:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ff4:	2302      	movs	r3, #2
 8001ff6:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001ffa:	230c      	movs	r3, #12
 8001ffc:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002000:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8002004:	4619      	mov	r1, r3
 8002006:	4812      	ldr	r0, [pc, #72]	@ (8002050 <HAL_MMC_MspInit+0x1ac>)
 8002008:	f002 fa5c 	bl	80044c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 800200c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002010:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002014:	2302      	movs	r3, #2
 8002016:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800201a:	2300      	movs	r3, #0
 800201c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002020:	2302      	movs	r3, #2
 8002022:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002026:	230c      	movs	r3, #12
 8002028:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800202c:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8002030:	4619      	mov	r1, r3
 8002032:	4808      	ldr	r0, [pc, #32]	@ (8002054 <HAL_MMC_MspInit+0x1b0>)
 8002034:	f002 fa46 	bl	80044c4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 8002038:	bf00      	nop
 800203a:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	420c8000 	.word	0x420c8000
 8002048:	46020c00 	.word	0x46020c00
 800204c:	42020800 	.word	0x42020800
 8002050:	42020c00 	.word	0x42020c00
 8002054:	42020400 	.word	0x42020400

08002058 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b082      	sub	sp, #8
 800205c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800205e:	4b0c      	ldr	r3, [pc, #48]	@ (8002090 <HAL_MspInit+0x38>)
 8002060:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002064:	4a0a      	ldr	r2, [pc, #40]	@ (8002090 <HAL_MspInit+0x38>)
 8002066:	f043 0304 	orr.w	r3, r3, #4
 800206a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800206e:	4b08      	ldr	r3, [pc, #32]	@ (8002090 <HAL_MspInit+0x38>)
 8002070:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002074:	f003 0304 	and.w	r3, r3, #4
 8002078:	607b      	str	r3, [r7, #4]
 800207a:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddUSB();
 800207c:	f004 fe4c 	bl	8006d18 <HAL_PWREx_EnableVddUSB>
  HAL_PWREx_EnableVddIO2();
 8002080:	f004 fe5a 	bl	8006d38 <HAL_PWREx_EnableVddIO2>
  HAL_PWREx_EnableVddA();
 8002084:	f004 fe68 	bl	8006d58 <HAL_PWREx_EnableVddA>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002088:	bf00      	nop
 800208a:	3708      	adds	r7, #8
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}
 8002090:	46020c00 	.word	0x46020c00

08002094 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002094:	b480      	push	{r7}
 8002096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002098:	bf00      	nop
 800209a:	e7fd      	b.n	8002098 <NMI_Handler+0x4>

0800209c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800209c:	b480      	push	{r7}
 800209e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020a0:	bf00      	nop
 80020a2:	e7fd      	b.n	80020a0 <HardFault_Handler+0x4>

080020a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020a4:	b480      	push	{r7}
 80020a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020a8:	bf00      	nop
 80020aa:	e7fd      	b.n	80020a8 <MemManage_Handler+0x4>

080020ac <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020ac:	b480      	push	{r7}
 80020ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020b0:	bf00      	nop
 80020b2:	e7fd      	b.n	80020b0 <BusFault_Handler+0x4>

080020b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020b4:	b480      	push	{r7}
 80020b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020b8:	bf00      	nop
 80020ba:	e7fd      	b.n	80020b8 <UsageFault_Handler+0x4>

080020bc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020bc:	b480      	push	{r7}
 80020be:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020c0:	bf00      	nop
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr

080020ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020ca:	b480      	push	{r7}
 80020cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020ce:	bf00      	nop
 80020d0:	46bd      	mov	sp, r7
 80020d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d6:	4770      	bx	lr

080020d8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020d8:	b480      	push	{r7}
 80020da:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020dc:	bf00      	nop
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr

080020e6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020e6:	b580      	push	{r7, lr}
 80020e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020ea:	f000 fb4f 	bl	800278c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020ee:	bf00      	nop
 80020f0:	bd80      	pop	{r7, pc}
	...

080020f4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80020f8:	4802      	ldr	r0, [pc, #8]	@ (8002104 <USART1_IRQHandler+0x10>)
 80020fa:	f009 f963 	bl	800b3c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80020fe:	bf00      	nop
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	20000660 	.word	0x20000660

08002108 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002108:	b480      	push	{r7}
 800210a:	af00      	add	r7, sp, #0
  return 1;
 800210c:	2301      	movs	r3, #1
}
 800210e:	4618      	mov	r0, r3
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr

08002118 <_kill>:

int _kill(int pid, int sig)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
 8002120:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002122:	f00c f9e9 	bl	800e4f8 <__errno>
 8002126:	4603      	mov	r3, r0
 8002128:	2216      	movs	r2, #22
 800212a:	601a      	str	r2, [r3, #0]
  return -1;
 800212c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002130:	4618      	mov	r0, r3
 8002132:	3708      	adds	r7, #8
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}

08002138 <_exit>:

void _exit (int status)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b082      	sub	sp, #8
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002140:	f04f 31ff 	mov.w	r1, #4294967295
 8002144:	6878      	ldr	r0, [r7, #4]
 8002146:	f7ff ffe7 	bl	8002118 <_kill>
  while (1) {}    /* Make sure we hang here */
 800214a:	bf00      	nop
 800214c:	e7fd      	b.n	800214a <_exit+0x12>

0800214e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800214e:	b580      	push	{r7, lr}
 8002150:	b086      	sub	sp, #24
 8002152:	af00      	add	r7, sp, #0
 8002154:	60f8      	str	r0, [r7, #12]
 8002156:	60b9      	str	r1, [r7, #8]
 8002158:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800215a:	2300      	movs	r3, #0
 800215c:	617b      	str	r3, [r7, #20]
 800215e:	e00a      	b.n	8002176 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002160:	f3af 8000 	nop.w
 8002164:	4601      	mov	r1, r0
 8002166:	68bb      	ldr	r3, [r7, #8]
 8002168:	1c5a      	adds	r2, r3, #1
 800216a:	60ba      	str	r2, [r7, #8]
 800216c:	b2ca      	uxtb	r2, r1
 800216e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	3301      	adds	r3, #1
 8002174:	617b      	str	r3, [r7, #20]
 8002176:	697a      	ldr	r2, [r7, #20]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	429a      	cmp	r2, r3
 800217c:	dbf0      	blt.n	8002160 <_read+0x12>
  }

  return len;
 800217e:	687b      	ldr	r3, [r7, #4]
}
 8002180:	4618      	mov	r0, r3
 8002182:	3718      	adds	r7, #24
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}

08002188 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b086      	sub	sp, #24
 800218c:	af00      	add	r7, sp, #0
 800218e:	60f8      	str	r0, [r7, #12]
 8002190:	60b9      	str	r1, [r7, #8]
 8002192:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002194:	2300      	movs	r3, #0
 8002196:	617b      	str	r3, [r7, #20]
 8002198:	e009      	b.n	80021ae <_write+0x26>
  {
    __io_putchar(*ptr++);
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	1c5a      	adds	r2, r3, #1
 800219e:	60ba      	str	r2, [r7, #8]
 80021a0:	781b      	ldrb	r3, [r3, #0]
 80021a2:	4618      	mov	r0, r3
 80021a4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	3301      	adds	r3, #1
 80021ac:	617b      	str	r3, [r7, #20]
 80021ae:	697a      	ldr	r2, [r7, #20]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	429a      	cmp	r2, r3
 80021b4:	dbf1      	blt.n	800219a <_write+0x12>
  }
  return len;
 80021b6:	687b      	ldr	r3, [r7, #4]
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	3718      	adds	r7, #24
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}

080021c0 <_close>:

int _close(int file)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b083      	sub	sp, #12
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80021c8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	370c      	adds	r7, #12
 80021d0:	46bd      	mov	sp, r7
 80021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d6:	4770      	bx	lr

080021d8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80021d8:	b480      	push	{r7}
 80021da:	b083      	sub	sp, #12
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
 80021e0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80021e8:	605a      	str	r2, [r3, #4]
  return 0;
 80021ea:	2300      	movs	r3, #0
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	370c      	adds	r7, #12
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr

080021f8 <_isatty>:

int _isatty(int file)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b083      	sub	sp, #12
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002200:	2301      	movs	r3, #1
}
 8002202:	4618      	mov	r0, r3
 8002204:	370c      	adds	r7, #12
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr

0800220e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800220e:	b480      	push	{r7}
 8002210:	b085      	sub	sp, #20
 8002212:	af00      	add	r7, sp, #0
 8002214:	60f8      	str	r0, [r7, #12]
 8002216:	60b9      	str	r1, [r7, #8]
 8002218:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800221a:	2300      	movs	r3, #0
}
 800221c:	4618      	mov	r0, r3
 800221e:	3714      	adds	r7, #20
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr

08002228 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b086      	sub	sp, #24
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002230:	4a14      	ldr	r2, [pc, #80]	@ (8002284 <_sbrk+0x5c>)
 8002232:	4b15      	ldr	r3, [pc, #84]	@ (8002288 <_sbrk+0x60>)
 8002234:	1ad3      	subs	r3, r2, r3
 8002236:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800223c:	4b13      	ldr	r3, [pc, #76]	@ (800228c <_sbrk+0x64>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d102      	bne.n	800224a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002244:	4b11      	ldr	r3, [pc, #68]	@ (800228c <_sbrk+0x64>)
 8002246:	4a12      	ldr	r2, [pc, #72]	@ (8002290 <_sbrk+0x68>)
 8002248:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800224a:	4b10      	ldr	r3, [pc, #64]	@ (800228c <_sbrk+0x64>)
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	4413      	add	r3, r2
 8002252:	693a      	ldr	r2, [r7, #16]
 8002254:	429a      	cmp	r2, r3
 8002256:	d207      	bcs.n	8002268 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002258:	f00c f94e 	bl	800e4f8 <__errno>
 800225c:	4603      	mov	r3, r0
 800225e:	220c      	movs	r2, #12
 8002260:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002262:	f04f 33ff 	mov.w	r3, #4294967295
 8002266:	e009      	b.n	800227c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002268:	4b08      	ldr	r3, [pc, #32]	@ (800228c <_sbrk+0x64>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800226e:	4b07      	ldr	r3, [pc, #28]	@ (800228c <_sbrk+0x64>)
 8002270:	681a      	ldr	r2, [r3, #0]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	4413      	add	r3, r2
 8002276:	4a05      	ldr	r2, [pc, #20]	@ (800228c <_sbrk+0x64>)
 8002278:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800227a:	68fb      	ldr	r3, [r7, #12]
}
 800227c:	4618      	mov	r0, r3
 800227e:	3718      	adds	r7, #24
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}
 8002284:	202f0000 	.word	0x202f0000
 8002288:	00000400 	.word	0x00000400
 800228c:	2000065c 	.word	0x2000065c
 8002290:	20000d28 	.word	0x20000d28

08002294 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002294:	b480      	push	{r7}
 8002296:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002298:	4b18      	ldr	r3, [pc, #96]	@ (80022fc <SystemInit+0x68>)
 800229a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800229e:	4a17      	ldr	r2, [pc, #92]	@ (80022fc <SystemInit+0x68>)
 80022a0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80022a4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 80022a8:	4b15      	ldr	r3, [pc, #84]	@ (8002300 <SystemInit+0x6c>)
 80022aa:	2201      	movs	r2, #1
 80022ac:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 80022ae:	4b14      	ldr	r3, [pc, #80]	@ (8002300 <SystemInit+0x6c>)
 80022b0:	2200      	movs	r2, #0
 80022b2:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 80022b4:	4b12      	ldr	r3, [pc, #72]	@ (8002300 <SystemInit+0x6c>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 80022ba:	4b11      	ldr	r3, [pc, #68]	@ (8002300 <SystemInit+0x6c>)
 80022bc:	2200      	movs	r2, #0
 80022be:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 80022c0:	4b0f      	ldr	r3, [pc, #60]	@ (8002300 <SystemInit+0x6c>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a0e      	ldr	r2, [pc, #56]	@ (8002300 <SystemInit+0x6c>)
 80022c6:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 80022ca:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 80022ce:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 80022d0:	4b0b      	ldr	r3, [pc, #44]	@ (8002300 <SystemInit+0x6c>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 80022d6:	4b0a      	ldr	r3, [pc, #40]	@ (8002300 <SystemInit+0x6c>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a09      	ldr	r2, [pc, #36]	@ (8002300 <SystemInit+0x6c>)
 80022dc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80022e0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 80022e2:	4b07      	ldr	r3, [pc, #28]	@ (8002300 <SystemInit+0x6c>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80022e8:	4b04      	ldr	r3, [pc, #16]	@ (80022fc <SystemInit+0x68>)
 80022ea:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80022ee:	609a      	str	r2, [r3, #8]
  #endif
}
 80022f0:	bf00      	nop
 80022f2:	46bd      	mov	sp, r7
 80022f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f8:	4770      	bx	lr
 80022fa:	bf00      	nop
 80022fc:	e000ed00 	.word	0xe000ed00
 8002300:	46020c00 	.word	0x46020c00

08002304 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002308:	4b22      	ldr	r3, [pc, #136]	@ (8002394 <MX_USART1_UART_Init+0x90>)
 800230a:	4a23      	ldr	r2, [pc, #140]	@ (8002398 <MX_USART1_UART_Init+0x94>)
 800230c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800230e:	4b21      	ldr	r3, [pc, #132]	@ (8002394 <MX_USART1_UART_Init+0x90>)
 8002310:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002314:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002316:	4b1f      	ldr	r3, [pc, #124]	@ (8002394 <MX_USART1_UART_Init+0x90>)
 8002318:	2200      	movs	r2, #0
 800231a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800231c:	4b1d      	ldr	r3, [pc, #116]	@ (8002394 <MX_USART1_UART_Init+0x90>)
 800231e:	2200      	movs	r2, #0
 8002320:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002322:	4b1c      	ldr	r3, [pc, #112]	@ (8002394 <MX_USART1_UART_Init+0x90>)
 8002324:	2200      	movs	r2, #0
 8002326:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002328:	4b1a      	ldr	r3, [pc, #104]	@ (8002394 <MX_USART1_UART_Init+0x90>)
 800232a:	220c      	movs	r2, #12
 800232c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800232e:	4b19      	ldr	r3, [pc, #100]	@ (8002394 <MX_USART1_UART_Init+0x90>)
 8002330:	2200      	movs	r2, #0
 8002332:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002334:	4b17      	ldr	r3, [pc, #92]	@ (8002394 <MX_USART1_UART_Init+0x90>)
 8002336:	2200      	movs	r2, #0
 8002338:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800233a:	4b16      	ldr	r3, [pc, #88]	@ (8002394 <MX_USART1_UART_Init+0x90>)
 800233c:	2200      	movs	r2, #0
 800233e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002340:	4b14      	ldr	r3, [pc, #80]	@ (8002394 <MX_USART1_UART_Init+0x90>)
 8002342:	2200      	movs	r2, #0
 8002344:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002346:	4b13      	ldr	r3, [pc, #76]	@ (8002394 <MX_USART1_UART_Init+0x90>)
 8002348:	2200      	movs	r2, #0
 800234a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800234c:	4811      	ldr	r0, [pc, #68]	@ (8002394 <MX_USART1_UART_Init+0x90>)
 800234e:	f008 ffe9 	bl	800b324 <HAL_UART_Init>
 8002352:	4603      	mov	r3, r0
 8002354:	2b00      	cmp	r3, #0
 8002356:	d001      	beq.n	800235c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002358:	f7ff fbe7 	bl	8001b2a <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800235c:	2100      	movs	r1, #0
 800235e:	480d      	ldr	r0, [pc, #52]	@ (8002394 <MX_USART1_UART_Init+0x90>)
 8002360:	f009 ffcd 	bl	800c2fe <HAL_UARTEx_SetTxFifoThreshold>
 8002364:	4603      	mov	r3, r0
 8002366:	2b00      	cmp	r3, #0
 8002368:	d001      	beq.n	800236e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800236a:	f7ff fbde 	bl	8001b2a <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800236e:	2100      	movs	r1, #0
 8002370:	4808      	ldr	r0, [pc, #32]	@ (8002394 <MX_USART1_UART_Init+0x90>)
 8002372:	f00a f802 	bl	800c37a <HAL_UARTEx_SetRxFifoThreshold>
 8002376:	4603      	mov	r3, r0
 8002378:	2b00      	cmp	r3, #0
 800237a:	d001      	beq.n	8002380 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800237c:	f7ff fbd5 	bl	8001b2a <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002380:	4804      	ldr	r0, [pc, #16]	@ (8002394 <MX_USART1_UART_Init+0x90>)
 8002382:	f009 ff83 	bl	800c28c <HAL_UARTEx_DisableFifoMode>
 8002386:	4603      	mov	r3, r0
 8002388:	2b00      	cmp	r3, #0
 800238a:	d001      	beq.n	8002390 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800238c:	f7ff fbcd 	bl	8001b2a <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002390:	bf00      	nop
 8002392:	bd80      	pop	{r7, pc}
 8002394:	20000660 	.word	0x20000660
 8002398:	40013800 	.word	0x40013800

0800239c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b0c2      	sub	sp, #264	@ 0x108
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80023a6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80023aa:	6018      	str	r0, [r3, #0]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023ac:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 80023b0:	2200      	movs	r2, #0
 80023b2:	601a      	str	r2, [r3, #0]
 80023b4:	605a      	str	r2, [r3, #4]
 80023b6:	609a      	str	r2, [r3, #8]
 80023b8:	60da      	str	r2, [r3, #12]
 80023ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80023bc:	f107 0310 	add.w	r3, r7, #16
 80023c0:	22e0      	movs	r2, #224	@ 0xe0
 80023c2:	2100      	movs	r1, #0
 80023c4:	4618      	mov	r0, r3
 80023c6:	f00c f844 	bl	800e452 <memset>
  if(uartHandle->Instance==USART1)
 80023ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80023ce:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a2f      	ldr	r2, [pc, #188]	@ (8002494 <HAL_UART_MspInit+0xf8>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d155      	bne.n	8002488 <HAL_UART_MspInit+0xec>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80023dc:	f04f 0201 	mov.w	r2, #1
 80023e0:	f04f 0300 	mov.w	r3, #0
 80023e4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80023e8:	2300      	movs	r3, #0
 80023ea:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80023ec:	f107 0310 	add.w	r3, r7, #16
 80023f0:	4618      	mov	r0, r3
 80023f2:	f005 ff9b 	bl	800832c <HAL_RCCEx_PeriphCLKConfig>
 80023f6:	4603      	mov	r3, r0
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d001      	beq.n	8002400 <HAL_UART_MspInit+0x64>
    {
      Error_Handler();
 80023fc:	f7ff fb95 	bl	8001b2a <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002400:	4b25      	ldr	r3, [pc, #148]	@ (8002498 <HAL_UART_MspInit+0xfc>)
 8002402:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002406:	4a24      	ldr	r2, [pc, #144]	@ (8002498 <HAL_UART_MspInit+0xfc>)
 8002408:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800240c:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8002410:	4b21      	ldr	r3, [pc, #132]	@ (8002498 <HAL_UART_MspInit+0xfc>)
 8002412:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002416:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800241a:	60fb      	str	r3, [r7, #12]
 800241c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800241e:	4b1e      	ldr	r3, [pc, #120]	@ (8002498 <HAL_UART_MspInit+0xfc>)
 8002420:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002424:	4a1c      	ldr	r2, [pc, #112]	@ (8002498 <HAL_UART_MspInit+0xfc>)
 8002426:	f043 0301 	orr.w	r3, r3, #1
 800242a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800242e:	4b1a      	ldr	r3, [pc, #104]	@ (8002498 <HAL_UART_MspInit+0xfc>)
 8002430:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002434:	f003 0201 	and.w	r2, r3, #1
 8002438:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800243c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002440:	601a      	str	r2, [r3, #0]
 8002442:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8002446:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800244a:	681b      	ldr	r3, [r3, #0]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_TX_Pin;
 800244c:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002450:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002454:	2302      	movs	r3, #2
 8002456:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800245a:	2300      	movs	r3, #0
 800245c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002460:	2300      	movs	r3, #0
 8002462:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002466:	2307      	movs	r3, #7
 8002468:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800246c:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8002470:	4619      	mov	r1, r3
 8002472:	480a      	ldr	r0, [pc, #40]	@ (800249c <HAL_UART_MspInit+0x100>)
 8002474:	f002 f826 	bl	80044c4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002478:	2200      	movs	r2, #0
 800247a:	2100      	movs	r1, #0
 800247c:	203d      	movs	r0, #61	@ 0x3d
 800247e:	f001 fe9f 	bl	80041c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002482:	203d      	movs	r0, #61	@ 0x3d
 8002484:	f001 feb6 	bl	80041f4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002488:	bf00      	nop
 800248a:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}
 8002492:	bf00      	nop
 8002494:	40013800 	.word	0x40013800
 8002498:	46020c00 	.word	0x46020c00
 800249c:	42020000 	.word	0x42020000

080024a0 <MX_USB_OTG_HS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_HS;

/* USB_OTG_HS init function */

void MX_USB_OTG_HS_PCD_Init(void)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 0 */

  /* USER CODE BEGIN USB_OTG_HS_Init 1 */

  /* USER CODE END USB_OTG_HS_Init 1 */
  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 80024a4:	4b13      	ldr	r3, [pc, #76]	@ (80024f4 <MX_USB_OTG_HS_PCD_Init+0x54>)
 80024a6:	4a14      	ldr	r2, [pc, #80]	@ (80024f8 <MX_USB_OTG_HS_PCD_Init+0x58>)
 80024a8:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 80024aa:	4b12      	ldr	r3, [pc, #72]	@ (80024f4 <MX_USB_OTG_HS_PCD_Init+0x54>)
 80024ac:	2209      	movs	r2, #9
 80024ae:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_HIGH;
 80024b0:	4b10      	ldr	r3, [pc, #64]	@ (80024f4 <MX_USB_OTG_HS_PCD_Init+0x54>)
 80024b2:	2200      	movs	r2, #0
 80024b4:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_HS_EMBEDDED_PHY;
 80024b6:	4b0f      	ldr	r3, [pc, #60]	@ (80024f4 <MX_USB_OTG_HS_PCD_Init+0x54>)
 80024b8:	2203      	movs	r2, #3
 80024ba:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 80024bc:	4b0d      	ldr	r3, [pc, #52]	@ (80024f4 <MX_USB_OTG_HS_PCD_Init+0x54>)
 80024be:	2200      	movs	r2, #0
 80024c0:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 80024c2:	4b0c      	ldr	r3, [pc, #48]	@ (80024f4 <MX_USB_OTG_HS_PCD_Init+0x54>)
 80024c4:	2200      	movs	r2, #0
 80024c6:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 80024c8:	4b0a      	ldr	r3, [pc, #40]	@ (80024f4 <MX_USB_OTG_HS_PCD_Init+0x54>)
 80024ca:	2200      	movs	r2, #0
 80024cc:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 80024ce:	4b09      	ldr	r3, [pc, #36]	@ (80024f4 <MX_USB_OTG_HS_PCD_Init+0x54>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 80024d4:	4b07      	ldr	r3, [pc, #28]	@ (80024f4 <MX_USB_OTG_HS_PCD_Init+0x54>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 80024da:	4b06      	ldr	r3, [pc, #24]	@ (80024f4 <MX_USB_OTG_HS_PCD_Init+0x54>)
 80024dc:	2200      	movs	r2, #0
 80024de:	719a      	strb	r2, [r3, #6]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 80024e0:	4804      	ldr	r0, [pc, #16]	@ (80024f4 <MX_USB_OTG_HS_PCD_Init+0x54>)
 80024e2:	f004 fa0d 	bl	8006900 <HAL_PCD_Init>
 80024e6:	4603      	mov	r3, r0
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d001      	beq.n	80024f0 <MX_USB_OTG_HS_PCD_Init+0x50>
  {
    Error_Handler();
 80024ec:	f7ff fb1d 	bl	8001b2a <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 80024f0:	bf00      	nop
 80024f2:	bd80      	pop	{r7, pc}
 80024f4:	200006f4 	.word	0x200006f4
 80024f8:	42040000 	.word	0x42040000

080024fc <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b0be      	sub	sp, #248	@ 0xf8
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002504:	f107 0318 	add.w	r3, r7, #24
 8002508:	22e0      	movs	r2, #224	@ 0xe0
 800250a:	2100      	movs	r1, #0
 800250c:	4618      	mov	r0, r3
 800250e:	f00b ffa0 	bl	800e452 <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a33      	ldr	r2, [pc, #204]	@ (80025e4 <HAL_PCD_MspInit+0xe8>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d15e      	bne.n	80025da <HAL_PCD_MspInit+0xde>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USBPHY;
 800251c:	f04f 0200 	mov.w	r2, #0
 8002520:	f04f 0308 	mov.w	r3, #8
 8002524:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.UsbPhyClockSelection = RCC_USBPHYCLKSOURCE_PLL1;
 8002528:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800252c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002530:	f107 0318 	add.w	r3, r7, #24
 8002534:	4618      	mov	r0, r3
 8002536:	f005 fef9 	bl	800832c <HAL_RCCEx_PeriphCLKConfig>
 800253a:	4603      	mov	r3, r0
 800253c:	2b00      	cmp	r3, #0
 800253e:	d001      	beq.n	8002544 <HAL_PCD_MspInit+0x48>
    {
      Error_Handler();
 8002540:	f7ff faf3 	bl	8001b2a <Error_Handler>
    }

  /** Set the OTG PHY reference clock selection
  */
    HAL_SYSCFG_SetOTGPHYReferenceClockSelection(SYSCFG_OTG_HS_PHY_CLK_SELECT_1);
 8002544:	200c      	movs	r0, #12
 8002546:	f000 f979 	bl	800283c <HAL_SYSCFG_SetOTGPHYReferenceClockSelection>

    /* USB_OTG_HS clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800254a:	4b27      	ldr	r3, [pc, #156]	@ (80025e8 <HAL_PCD_MspInit+0xec>)
 800254c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002550:	4a25      	ldr	r2, [pc, #148]	@ (80025e8 <HAL_PCD_MspInit+0xec>)
 8002552:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002556:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800255a:	4b23      	ldr	r3, [pc, #140]	@ (80025e8 <HAL_PCD_MspInit+0xec>)
 800255c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002560:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002564:	617b      	str	r3, [r7, #20]
 8002566:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_USBPHYC_CLK_ENABLE();
 8002568:	4b1f      	ldr	r3, [pc, #124]	@ (80025e8 <HAL_PCD_MspInit+0xec>)
 800256a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800256e:	4a1e      	ldr	r2, [pc, #120]	@ (80025e8 <HAL_PCD_MspInit+0xec>)
 8002570:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002574:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002578:	4b1b      	ldr	r3, [pc, #108]	@ (80025e8 <HAL_PCD_MspInit+0xec>)
 800257a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800257e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002582:	613b      	str	r3, [r7, #16]
 8002584:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002586:	4b18      	ldr	r3, [pc, #96]	@ (80025e8 <HAL_PCD_MspInit+0xec>)
 8002588:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800258c:	f003 0304 	and.w	r3, r3, #4
 8002590:	2b00      	cmp	r3, #0
 8002592:	d11b      	bne.n	80025cc <HAL_PCD_MspInit+0xd0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002594:	4b14      	ldr	r3, [pc, #80]	@ (80025e8 <HAL_PCD_MspInit+0xec>)
 8002596:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800259a:	4a13      	ldr	r2, [pc, #76]	@ (80025e8 <HAL_PCD_MspInit+0xec>)
 800259c:	f043 0304 	orr.w	r3, r3, #4
 80025a0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80025a4:	4b10      	ldr	r3, [pc, #64]	@ (80025e8 <HAL_PCD_MspInit+0xec>)
 80025a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80025aa:	f003 0304 	and.w	r3, r3, #4
 80025ae:	60fb      	str	r3, [r7, #12]
 80025b0:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 80025b2:	f004 fbb1 	bl	8006d18 <HAL_PWREx_EnableVddUSB>

      /*configure VOSR register of USB*/
      HAL_PWREx_EnableUSBHSTranceiverSupply();
 80025b6:	f004 fbdf 	bl	8006d78 <HAL_PWREx_EnableUSBHSTranceiverSupply>
      __HAL_RCC_PWR_CLK_DISABLE();
 80025ba:	4b0b      	ldr	r3, [pc, #44]	@ (80025e8 <HAL_PCD_MspInit+0xec>)
 80025bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80025c0:	4a09      	ldr	r2, [pc, #36]	@ (80025e8 <HAL_PCD_MspInit+0xec>)
 80025c2:	f023 0304 	bic.w	r3, r3, #4
 80025c6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80025ca:	e003      	b.n	80025d4 <HAL_PCD_MspInit+0xd8>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 80025cc:	f004 fba4 	bl	8006d18 <HAL_PWREx_EnableVddUSB>

      /*configure VOSR register of USB*/
      HAL_PWREx_EnableUSBHSTranceiverSupply();
 80025d0:	f004 fbd2 	bl	8006d78 <HAL_PWREx_EnableUSBHSTranceiverSupply>
    }

    /*Configuring the SYSCFG registers OTG_HS PHY*/
    /*OTG_HS PHY enable*/
      HAL_SYSCFG_EnableOTGPHY(SYSCFG_OTG_HS_PHY_ENABLE);
 80025d4:	2001      	movs	r0, #1
 80025d6:	f000 f91d 	bl	8002814 <HAL_SYSCFG_EnableOTGPHY>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 80025da:	bf00      	nop
 80025dc:	37f8      	adds	r7, #248	@ 0xf8
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	bf00      	nop
 80025e4:	42040000 	.word	0x42040000
 80025e8:	46020c00 	.word	0x46020c00

080025ec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 80025ec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002624 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 80025f0:	f7ff fe50 	bl	8002294 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80025f4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80025f6:	e003      	b.n	8002600 <LoopCopyDataInit>

080025f8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80025f8:	4b0b      	ldr	r3, [pc, #44]	@ (8002628 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80025fa:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80025fc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80025fe:	3104      	adds	r1, #4

08002600 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002600:	480a      	ldr	r0, [pc, #40]	@ (800262c <LoopForever+0xa>)
	ldr	r3, =_edata
 8002602:	4b0b      	ldr	r3, [pc, #44]	@ (8002630 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002604:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002606:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002608:	d3f6      	bcc.n	80025f8 <CopyDataInit>
	ldr	r2, =_sbss
 800260a:	4a0a      	ldr	r2, [pc, #40]	@ (8002634 <LoopForever+0x12>)
	b	LoopFillZerobss
 800260c:	e002      	b.n	8002614 <LoopFillZerobss>

0800260e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800260e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002610:	f842 3b04 	str.w	r3, [r2], #4

08002614 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002614:	4b08      	ldr	r3, [pc, #32]	@ (8002638 <LoopForever+0x16>)
	cmp	r2, r3
 8002616:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002618:	d3f9      	bcc.n	800260e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800261a:	f00b ff73 	bl	800e504 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800261e:	f7ff f9e3 	bl	80019e8 <main>

08002622 <LoopForever>:

LoopForever:
    b LoopForever
 8002622:	e7fe      	b.n	8002622 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8002624:	202f0000 	.word	0x202f0000
	ldr	r3, =_sidata
 8002628:	08012190 	.word	0x08012190
	ldr	r0, =_sdata
 800262c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002630:	200001d4 	.word	0x200001d4
	ldr	r2, =_sbss
 8002634:	200001d4 	.word	0x200001d4
	ldr	r3, = _ebss
 8002638:	20000d28 	.word	0x20000d28

0800263c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800263c:	e7fe      	b.n	800263c <ADC1_2_IRQHandler>
	...

08002640 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002644:	4b12      	ldr	r3, [pc, #72]	@ (8002690 <HAL_Init+0x50>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a11      	ldr	r2, [pc, #68]	@ (8002690 <HAL_Init+0x50>)
 800264a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800264e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002650:	2003      	movs	r0, #3
 8002652:	f001 fdaa 	bl	80041aa <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002656:	f005 fc8b 	bl	8007f70 <HAL_RCC_GetSysClockFreq>
 800265a:	4602      	mov	r2, r0
 800265c:	4b0d      	ldr	r3, [pc, #52]	@ (8002694 <HAL_Init+0x54>)
 800265e:	6a1b      	ldr	r3, [r3, #32]
 8002660:	f003 030f 	and.w	r3, r3, #15
 8002664:	490c      	ldr	r1, [pc, #48]	@ (8002698 <HAL_Init+0x58>)
 8002666:	5ccb      	ldrb	r3, [r1, r3]
 8002668:	fa22 f303 	lsr.w	r3, r2, r3
 800266c:	4a0b      	ldr	r2, [pc, #44]	@ (800269c <HAL_Init+0x5c>)
 800266e:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8002670:	2004      	movs	r0, #4
 8002672:	f001 fdef 	bl	8004254 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002676:	200f      	movs	r0, #15
 8002678:	f000 f812 	bl	80026a0 <HAL_InitTick>
 800267c:	4603      	mov	r3, r0
 800267e:	2b00      	cmp	r3, #0
 8002680:	d001      	beq.n	8002686 <HAL_Init+0x46>
  {
    return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e002      	b.n	800268c <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002686:	f7ff fce7 	bl	8002058 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800268a:	2300      	movs	r3, #0
}
 800268c:	4618      	mov	r0, r3
 800268e:	bd80      	pop	{r7, pc}
 8002690:	40022000 	.word	0x40022000
 8002694:	46020c00 	.word	0x46020c00
 8002698:	08011c50 	.word	0x08011c50
 800269c:	20000000 	.word	0x20000000

080026a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b084      	sub	sp, #16
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 80026a8:	2300      	movs	r3, #0
 80026aa:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 80026ac:	4b33      	ldr	r3, [pc, #204]	@ (800277c <HAL_InitTick+0xdc>)
 80026ae:	781b      	ldrb	r3, [r3, #0]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d101      	bne.n	80026b8 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	e05c      	b.n	8002772 <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 80026b8:	4b31      	ldr	r3, [pc, #196]	@ (8002780 <HAL_InitTick+0xe0>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f003 0304 	and.w	r3, r3, #4
 80026c0:	2b04      	cmp	r3, #4
 80026c2:	d10c      	bne.n	80026de <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 80026c4:	4b2f      	ldr	r3, [pc, #188]	@ (8002784 <HAL_InitTick+0xe4>)
 80026c6:	681a      	ldr	r2, [r3, #0]
 80026c8:	4b2c      	ldr	r3, [pc, #176]	@ (800277c <HAL_InitTick+0xdc>)
 80026ca:	781b      	ldrb	r3, [r3, #0]
 80026cc:	4619      	mov	r1, r3
 80026ce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80026d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80026d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80026da:	60fb      	str	r3, [r7, #12]
 80026dc:	e037      	b.n	800274e <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 80026de:	f001 fe11 	bl	8004304 <HAL_SYSTICK_GetCLKSourceConfig>
 80026e2:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	2b02      	cmp	r3, #2
 80026e8:	d023      	beq.n	8002732 <HAL_InitTick+0x92>
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	2b02      	cmp	r3, #2
 80026ee:	d82d      	bhi.n	800274c <HAL_InitTick+0xac>
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d003      	beq.n	80026fe <HAL_InitTick+0x5e>
 80026f6:	68bb      	ldr	r3, [r7, #8]
 80026f8:	2b01      	cmp	r3, #1
 80026fa:	d00d      	beq.n	8002718 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 80026fc:	e026      	b.n	800274c <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 80026fe:	4b21      	ldr	r3, [pc, #132]	@ (8002784 <HAL_InitTick+0xe4>)
 8002700:	681a      	ldr	r2, [r3, #0]
 8002702:	4b1e      	ldr	r3, [pc, #120]	@ (800277c <HAL_InitTick+0xdc>)
 8002704:	781b      	ldrb	r3, [r3, #0]
 8002706:	4619      	mov	r1, r3
 8002708:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 800270c:	fbb3 f3f1 	udiv	r3, r3, r1
 8002710:	fbb2 f3f3 	udiv	r3, r2, r3
 8002714:	60fb      	str	r3, [r7, #12]
        break;
 8002716:	e01a      	b.n	800274e <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8002718:	4b18      	ldr	r3, [pc, #96]	@ (800277c <HAL_InitTick+0xdc>)
 800271a:	781b      	ldrb	r3, [r3, #0]
 800271c:	461a      	mov	r2, r3
 800271e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002722:	fbb3 f3f2 	udiv	r3, r3, r2
 8002726:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 800272a:	fbb2 f3f3 	udiv	r3, r2, r3
 800272e:	60fb      	str	r3, [r7, #12]
        break;
 8002730:	e00d      	b.n	800274e <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8002732:	4b12      	ldr	r3, [pc, #72]	@ (800277c <HAL_InitTick+0xdc>)
 8002734:	781b      	ldrb	r3, [r3, #0]
 8002736:	461a      	mov	r2, r3
 8002738:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800273c:	fbb3 f3f2 	udiv	r3, r3, r2
 8002740:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002744:	fbb2 f3f3 	udiv	r3, r2, r3
 8002748:	60fb      	str	r3, [r7, #12]
        break;
 800274a:	e000      	b.n	800274e <HAL_InitTick+0xae>
        break;
 800274c:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 800274e:	68f8      	ldr	r0, [r7, #12]
 8002750:	f001 fd5e 	bl	8004210 <HAL_SYSTICK_Config>
 8002754:	4603      	mov	r3, r0
 8002756:	2b00      	cmp	r3, #0
 8002758:	d001      	beq.n	800275e <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	e009      	b.n	8002772 <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800275e:	2200      	movs	r2, #0
 8002760:	6879      	ldr	r1, [r7, #4]
 8002762:	f04f 30ff 	mov.w	r0, #4294967295
 8002766:	f001 fd2b 	bl	80041c0 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 800276a:	4a07      	ldr	r2, [pc, #28]	@ (8002788 <HAL_InitTick+0xe8>)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002770:	2300      	movs	r3, #0
}
 8002772:	4618      	mov	r0, r3
 8002774:	3710      	adds	r7, #16
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}
 800277a:	bf00      	nop
 800277c:	20000008 	.word	0x20000008
 8002780:	e000e010 	.word	0xe000e010
 8002784:	20000000 	.word	0x20000000
 8002788:	20000004 	.word	0x20000004

0800278c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800278c:	b480      	push	{r7}
 800278e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002790:	4b06      	ldr	r3, [pc, #24]	@ (80027ac <HAL_IncTick+0x20>)
 8002792:	781b      	ldrb	r3, [r3, #0]
 8002794:	461a      	mov	r2, r3
 8002796:	4b06      	ldr	r3, [pc, #24]	@ (80027b0 <HAL_IncTick+0x24>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4413      	add	r3, r2
 800279c:	4a04      	ldr	r2, [pc, #16]	@ (80027b0 <HAL_IncTick+0x24>)
 800279e:	6013      	str	r3, [r2, #0]
}
 80027a0:	bf00      	nop
 80027a2:	46bd      	mov	sp, r7
 80027a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a8:	4770      	bx	lr
 80027aa:	bf00      	nop
 80027ac:	20000008 	.word	0x20000008
 80027b0:	20000bd8 	.word	0x20000bd8

080027b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027b4:	b480      	push	{r7}
 80027b6:	af00      	add	r7, sp, #0
  return uwTick;
 80027b8:	4b03      	ldr	r3, [pc, #12]	@ (80027c8 <HAL_GetTick+0x14>)
 80027ba:	681b      	ldr	r3, [r3, #0]
}
 80027bc:	4618      	mov	r0, r3
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr
 80027c6:	bf00      	nop
 80027c8:	20000bd8 	.word	0x20000bd8

080027cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b084      	sub	sp, #16
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80027d4:	f7ff ffee 	bl	80027b4 <HAL_GetTick>
 80027d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027e4:	d005      	beq.n	80027f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80027e6:	4b0a      	ldr	r3, [pc, #40]	@ (8002810 <HAL_Delay+0x44>)
 80027e8:	781b      	ldrb	r3, [r3, #0]
 80027ea:	461a      	mov	r2, r3
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	4413      	add	r3, r2
 80027f0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80027f2:	bf00      	nop
 80027f4:	f7ff ffde 	bl	80027b4 <HAL_GetTick>
 80027f8:	4602      	mov	r2, r0
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	1ad3      	subs	r3, r2, r3
 80027fe:	68fa      	ldr	r2, [r7, #12]
 8002800:	429a      	cmp	r2, r3
 8002802:	d8f7      	bhi.n	80027f4 <HAL_Delay+0x28>
  {
  }
}
 8002804:	bf00      	nop
 8002806:	bf00      	nop
 8002808:	3710      	adds	r7, #16
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}
 800280e:	bf00      	nop
 8002810:	20000008 	.word	0x20000008

08002814 <HAL_SYSCFG_EnableOTGPHY>:
  * @param  OTGPHYConfig Defines the OTG PHY configuration.
            This parameter can be one of @ref SYSCFG_OTG_PHY_Enable
  * @retval None
  */
void HAL_SYSCFG_EnableOTGPHY(uint32_t OTGPHYConfig)
{
 8002814:	b480      	push	{r7}
 8002816:	b083      	sub	sp, #12
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_OTGPHY_CONFIG(OTGPHYConfig));

  MODIFY_REG(SYSCFG->OTGHSPHYCR, SYSCFG_OTGHSPHYCR_EN, OTGPHYConfig);
 800281c:	4b06      	ldr	r3, [pc, #24]	@ (8002838 <HAL_SYSCFG_EnableOTGPHY+0x24>)
 800281e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002820:	f023 0201 	bic.w	r2, r3, #1
 8002824:	4904      	ldr	r1, [pc, #16]	@ (8002838 <HAL_SYSCFG_EnableOTGPHY+0x24>)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	4313      	orrs	r3, r2
 800282a:	674b      	str	r3, [r1, #116]	@ 0x74
}
 800282c:	bf00      	nop
 800282e:	370c      	adds	r7, #12
 8002830:	46bd      	mov	sp, r7
 8002832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002836:	4770      	bx	lr
 8002838:	46000400 	.word	0x46000400

0800283c <HAL_SYSCFG_SetOTGPHYReferenceClockSelection>:
  * @param  RefClkSelection Defines the OTG PHY reference clock selection.
            This parameter can be one of the @ref SYSCFG_OTG_PHY_RefenceClockSelection
  * @retval None
  */
void HAL_SYSCFG_SetOTGPHYReferenceClockSelection(uint32_t RefClkSelection)
{
 800283c:	b480      	push	{r7}
 800283e:	b083      	sub	sp, #12
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_OTGPHY_REFERENCE_CLOCK(RefClkSelection));

  MODIFY_REG(SYSCFG->OTGHSPHYCR, SYSCFG_OTGHSPHYCR_CLKSEL, RefClkSelection);
 8002844:	4b06      	ldr	r3, [pc, #24]	@ (8002860 <HAL_SYSCFG_SetOTGPHYReferenceClockSelection+0x24>)
 8002846:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002848:	f023 023c 	bic.w	r2, r3, #60	@ 0x3c
 800284c:	4904      	ldr	r1, [pc, #16]	@ (8002860 <HAL_SYSCFG_SetOTGPHYReferenceClockSelection+0x24>)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	4313      	orrs	r3, r2
 8002852:	674b      	str	r3, [r1, #116]	@ 0x74
}
 8002854:	bf00      	nop
 8002856:	370c      	adds	r7, #12
 8002858:	46bd      	mov	sp, r7
 800285a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285e:	4770      	bx	lr
 8002860:	46000400 	.word	0x46000400

08002864 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002864:	b480      	push	{r7}
 8002866:	b083      	sub	sp, #12
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
 800286c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	431a      	orrs	r2, r3
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	609a      	str	r2, [r3, #8]
}
 800287e:	bf00      	nop
 8002880:	370c      	adds	r7, #12
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr

0800288a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800288a:	b480      	push	{r7}
 800288c:	b083      	sub	sp, #12
 800288e:	af00      	add	r7, sp, #0
 8002890:	6078      	str	r0, [r7, #4]
 8002892:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN, PathInternal);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	431a      	orrs	r2, r3
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	609a      	str	r2, [r3, #8]
}
 80028a4:	bf00      	nop
 80028a6:	370c      	adds	r7, #12
 80028a8:	46bd      	mov	sp, r7
 80028aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ae:	4770      	bx	lr

080028b0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b083      	sub	sp, #12
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN));
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	370c      	adds	r7, #12
 80028c4:	46bd      	mov	sp, r7
 80028c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ca:	4770      	bx	lr

080028cc <LL_ADC_SetResolution>:
  *         (1): Specific to ADC instance: ADC1, ADC2
  *         (2): Specific to ADC instance: ADC4
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetResolution(ADC_TypeDef *ADCx, uint32_t Resolution)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b085      	sub	sp, #20
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
 80028d4:	6039      	str	r1, [r7, #0]
  uint32_t tmp_resolution = Resolution;
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	60fb      	str	r3, [r7, #12]
  if (ADCx == ADC4)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	4a0a      	ldr	r2, [pc, #40]	@ (8002908 <LL_ADC_SetResolution+0x3c>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d104      	bne.n	80028ec <LL_ADC_SetResolution+0x20>
  {
    tmp_resolution = ((tmp_resolution - ADC_RESOLUTION_ADC4_PROCESSING) & ADC_CFGR1_RES);
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	3b01      	subs	r3, #1
 80028e6:	f003 030c 	and.w	r3, r3, #12
 80028ea:	60fb      	str	r3, [r7, #12]
  }

  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_RES, tmp_resolution);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	68db      	ldr	r3, [r3, #12]
 80028f0:	f023 020c 	bic.w	r2, r3, #12
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	431a      	orrs	r2, r3
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	60da      	str	r2, [r3, #12]
}
 80028fc:	bf00      	nop
 80028fe:	3714      	adds	r7, #20
 8002900:	46bd      	mov	sp, r7
 8002902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002906:	4770      	bx	lr
 8002908:	46021000 	.word	0x46021000

0800290c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800290c:	b480      	push	{r7}
 800290e:	b087      	sub	sp, #28
 8002910:	af00      	add	r7, sp, #0
 8002912:	60f8      	str	r0, [r7, #12]
 8002914:	60b9      	str	r1, [r7, #8]
 8002916:	607a      	str	r2, [r7, #4]
 8002918:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	3360      	adds	r3, #96	@ 0x60
 800291e:	461a      	mov	r2, r3
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	009b      	lsls	r3, r3, #2
 8002924:	4413      	add	r3, r2
 8002926:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 62e0 	and.w	r2, r3, #117440512	@ 0x7000000
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	005b      	lsls	r3, r3, #1
 8002934:	f003 4178 	and.w	r1, r3, #4160749568	@ 0xf8000000
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	430b      	orrs	r3, r1
 800293c:	431a      	orrs	r2, r3
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) << 1UL) | OffsetLevel);
}
 8002942:	bf00      	nop
 8002944:	371c      	adds	r7, #28
 8002946:	46bd      	mov	sp, r7
 8002948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294c:	4770      	bx	lr

0800294e <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800294e:	b480      	push	{r7}
 8002950:	b085      	sub	sp, #20
 8002952:	af00      	add	r7, sp, #0
 8002954:	6078      	str	r0, [r7, #4]
 8002956:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	3360      	adds	r3, #96	@ 0x60
 800295c:	461a      	mov	r2, r3
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	009b      	lsls	r3, r3, #2
 8002962:	4413      	add	r3, r2
 8002964:	60fb      	str	r3, [r7, #12]

  /* Note: Value shift +1 for correspondence with channel definition using ADC_CHANNEL_ID_NUMBER_MASK */
  uint32_t ch_decimal = (READ_BIT(*preg, ADC_OFR1_OFFSET1_CH) >> (ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS + 1UL));
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	0edb      	lsrs	r3, r3, #27
 800296c:	f003 031f 	and.w	r3, r3, #31
 8002970:	60bb      	str	r3, [r7, #8]
  return (uint32_t)__LL_ADC_DECIMAL_NB_TO_CHANNEL(ch_decimal);
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	2b09      	cmp	r3, #9
 8002976:	d807      	bhi.n	8002988 <LL_ADC_GetOffsetChannel+0x3a>
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	069a      	lsls	r2, r3, #26
 800297c:	2101      	movs	r1, #1
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	fa01 f303 	lsl.w	r3, r1, r3
 8002984:	4313      	orrs	r3, r2
 8002986:	e008      	b.n	800299a <LL_ADC_GetOffsetChannel+0x4c>
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	069a      	lsls	r2, r3, #26
 800298c:	2101      	movs	r1, #1
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	fa01 f303 	lsl.w	r3, r1, r3
 8002994:	4313      	orrs	r3, r2
 8002996:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
}
 800299a:	4618      	mov	r0, r3
 800299c:	3714      	adds	r7, #20
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr

080029a6 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80029a6:	b480      	push	{r7}
 80029a8:	b087      	sub	sp, #28
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	60f8      	str	r0, [r7, #12]
 80029ae:	60b9      	str	r1, [r7, #8]
 80029b0:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	3360      	adds	r3, #96	@ 0x60
 80029b6:	461a      	mov	r2, r3
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	009b      	lsls	r3, r3, #2
 80029bc:	4413      	add	r3, r2
 80029be:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg, ADC_OFR1_OFFSETPOS, OffsetSign);
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	431a      	orrs	r2, r3
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	601a      	str	r2, [r3, #0]
}
 80029d0:	bf00      	nop
 80029d2:	371c      	adds	r7, #28
 80029d4:	46bd      	mov	sp, r7
 80029d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029da:	4770      	bx	lr

080029dc <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety,
                                                      uint32_t OffsetSignedSaturation)
{
 80029dc:	b480      	push	{r7}
 80029de:	b087      	sub	sp, #28
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	60f8      	str	r0, [r7, #12]
 80029e4:	60b9      	str	r1, [r7, #8]
 80029e6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	3360      	adds	r3, #96	@ 0x60
 80029ec:	461a      	mov	r2, r3
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	009b      	lsls	r3, r3, #2
 80029f2:	4413      	add	r3, r2
 80029f4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg, ADC_OFR1_SSAT, OffsetSignedSaturation);
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	431a      	orrs	r2, r3
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	601a      	str	r2, [r3, #0]
}
 8002a06:	bf00      	nop
 8002a08:	371c      	adds	r7, #28
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr

08002a12 <LL_ADC_SetOffsetUnsignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetUnsignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety,
                                                        uint32_t OffsetUnsignedSaturation)
{
 8002a12:	b480      	push	{r7}
 8002a14:	b087      	sub	sp, #28
 8002a16:	af00      	add	r7, sp, #0
 8002a18:	60f8      	str	r0, [r7, #12]
 8002a1a:	60b9      	str	r1, [r7, #8]
 8002a1c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	3360      	adds	r3, #96	@ 0x60
 8002a22:	461a      	mov	r2, r3
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	009b      	lsls	r3, r3, #2
 8002a28:	4413      	add	r3, r2
 8002a2a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg, ADC_OFR1_USAT, OffsetUnsignedSaturation);
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	431a      	orrs	r2, r3
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	601a      	str	r2, [r3, #0]
}
 8002a3c:	bf00      	nop
 8002a3e:	371c      	adds	r7, #28
 8002a40:	46bd      	mov	sp, r7
 8002a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a46:	4770      	bx	lr

08002a48 <LL_ADC_SetGainCompensation>:
  *         0           Gain compensation will be disabled and value set to 0
  *         1 -> 16393  Gain compensation will be enabled with specified value
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetGainCompensation(ADC_TypeDef *ADCx, uint32_t GainCompensation)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b083      	sub	sp, #12
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
 8002a50:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMPCOEFF, GainCompensation);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a56:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002a5a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002a5e:	683a      	ldr	r2, [r7, #0]
 8002a60:	431a      	orrs	r2, r3
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	671a      	str	r2, [r3, #112]	@ 0x70
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMP, ((GainCompensation == 0UL) ? 0UL : 1UL) << ADC_GCOMP_GCOMP_Pos);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a6a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002a6e:	683a      	ldr	r2, [r7, #0]
 8002a70:	2a00      	cmp	r2, #0
 8002a72:	d002      	beq.n	8002a7a <LL_ADC_SetGainCompensation+0x32>
 8002a74:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8002a78:	e000      	b.n	8002a7c <LL_ADC_SetGainCompensation+0x34>
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	431a      	orrs	r2, r3
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	671a      	str	r2, [r3, #112]	@ 0x70
}
 8002a82:	bf00      	nop
 8002a84:	370c      	adds	r7, #12
 8002a86:	46bd      	mov	sp, r7
 8002a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8c:	4770      	bx	lr

08002a8e <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC4_SAMPLINGTIME_814CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8002a8e:	b480      	push	{r7}
 8002a90:	b085      	sub	sp, #20
 8002a92:	af00      	add	r7, sp, #0
 8002a94:	60f8      	str	r0, [r7, #12]
 8002a96:	60b9      	str	r1, [r7, #8]
 8002a98:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR1,
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	695a      	ldr	r2, [r3, #20]
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	f003 0304 	and.w	r3, r3, #4
 8002aa4:	2107      	movs	r1, #7
 8002aa6:	fa01 f303 	lsl.w	r3, r1, r3
 8002aaa:	43db      	mvns	r3, r3
 8002aac:	401a      	ands	r2, r3
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	f003 0304 	and.w	r3, r3, #4
 8002ab4:	6879      	ldr	r1, [r7, #4]
 8002ab6:	fa01 f303 	lsl.w	r3, r1, r3
 8002aba:	431a      	orrs	r2, r3
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	615a      	str	r2, [r3, #20]
             ADC4_SMPR_SMP1 << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8002ac0:	bf00      	nop
 8002ac2:	3714      	adds	r7, #20
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aca:	4770      	bx	lr

08002acc <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32U5, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b089      	sub	sp, #36	@ 0x24
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	60f8      	str	r0, [r7, #12]
 8002ad4:	60b9      	str	r1, [r7, #8]
 8002ad6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	4a2b      	ldr	r2, [pc, #172]	@ (8002b88 <LL_ADC_REG_SetSequencerRanks+0xbc>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d020      	beq.n	8002b22 <LL_ADC_REG_SetSequencerRanks+0x56>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK)     \
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	3330      	adds	r3, #48	@ 0x30
 8002ae4:	461a      	mov	r2, r3
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	0a1b      	lsrs	r3, r3, #8
 8002aea:	009b      	lsls	r3, r3, #2
 8002aec:	f003 030c 	and.w	r3, r3, #12
 8002af0:	4413      	add	r3, r2
 8002af2:	61fb      	str	r3, [r7, #28]
                                                            >> ADC_SQRX_REGOFFSET_POS));

    MODIFY_REG(*preg,
 8002af4:	69fb      	ldr	r3, [r7, #28]
 8002af6:	681a      	ldr	r2, [r3, #0]
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	f003 031f 	and.w	r3, r3, #31
 8002afe:	211f      	movs	r1, #31
 8002b00:	fa01 f303 	lsl.w	r3, r1, r3
 8002b04:	43db      	mvns	r3, r3
 8002b06:	401a      	ands	r2, r3
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	0e9b      	lsrs	r3, r3, #26
 8002b0c:	f003 011f 	and.w	r1, r3, #31
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	f003 031f 	and.w	r3, r3, #31
 8002b16:	fa01 f303 	lsl.w	r3, r1, r3
 8002b1a:	431a      	orrs	r2, r3
 8002b1c:	69fb      	ldr	r3, [r7, #28]
 8002b1e:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(ADCx->CHSELR,
               ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
               (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) << (Rank & ADC_REG_RANK_ID_SQRX_MASK)));
  }
}
 8002b20:	e02b      	b.n	8002b7a <LL_ADC_REG_SetSequencerRanks+0xae>
    MODIFY_REG(ADCx->CHSELR,
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002b26:	68bb      	ldr	r3, [r7, #8]
 8002b28:	f003 031f 	and.w	r3, r3, #31
 8002b2c:	210f      	movs	r1, #15
 8002b2e:	fa01 f303 	lsl.w	r3, r1, r3
 8002b32:	43db      	mvns	r3, r3
 8002b34:	401a      	ands	r2, r3
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d104      	bne.n	8002b4a <LL_ADC_REG_SetSequencerRanks+0x7e>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	0e9b      	lsrs	r3, r3, #26
 8002b44:	f003 031f 	and.w	r3, r3, #31
 8002b48:	e010      	b.n	8002b6c <LL_ADC_REG_SetSequencerRanks+0xa0>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	fa93 f3a3 	rbit	r3, r3
 8002b54:	613b      	str	r3, [r7, #16]
  return result;
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002b5a:	69bb      	ldr	r3, [r7, #24]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d101      	bne.n	8002b64 <LL_ADC_REG_SetSequencerRanks+0x98>
    return 32U;
 8002b60:	2320      	movs	r3, #32
 8002b62:	e003      	b.n	8002b6c <LL_ADC_REG_SetSequencerRanks+0xa0>
  return __builtin_clz(value);
 8002b64:	69bb      	ldr	r3, [r7, #24]
 8002b66:	fab3 f383 	clz	r3, r3
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	68b9      	ldr	r1, [r7, #8]
 8002b6e:	f001 011f 	and.w	r1, r1, #31
 8002b72:	408b      	lsls	r3, r1
 8002b74:	431a      	orrs	r2, r3
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002b7a:	bf00      	nop
 8002b7c:	3724      	adds	r7, #36	@ 0x24
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr
 8002b86:	bf00      	nop
 8002b88:	46021000 	.word	0x46021000

08002b8c <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b087      	sub	sp, #28
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
 8002b94:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (1UL << ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & ADC_CHSELR_CHSEL) & 0x1FUL)));
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d107      	bne.n	8002bb0 <LL_ADC_REG_SetSequencerChAdd+0x24>
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	0e9b      	lsrs	r3, r3, #26
 8002ba4:	f003 031f 	and.w	r3, r3, #31
 8002ba8:	2201      	movs	r2, #1
 8002baa:	fa02 f303 	lsl.w	r3, r2, r3
 8002bae:	e015      	b.n	8002bdc <LL_ADC_REG_SetSequencerChAdd+0x50>
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	613b      	str	r3, [r7, #16]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bb4:	693b      	ldr	r3, [r7, #16]
 8002bb6:	fa93 f3a3 	rbit	r3, r3
 8002bba:	60fb      	str	r3, [r7, #12]
  return result;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d101      	bne.n	8002bca <LL_ADC_REG_SetSequencerChAdd+0x3e>
    return 32U;
 8002bc6:	2320      	movs	r3, #32
 8002bc8:	e003      	b.n	8002bd2 <LL_ADC_REG_SetSequencerChAdd+0x46>
  return __builtin_clz(value);
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	fab3 f383 	clz	r3, r3
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	f003 031f 	and.w	r3, r3, #31
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bdc:	687a      	ldr	r2, [r7, #4]
 8002bde:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002be0:	431a      	orrs	r2, r3
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002be6:	bf00      	nop
 8002be8:	371c      	adds	r7, #28
 8002bea:	46bd      	mov	sp, r7
 8002bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf0:	4770      	bx	lr

08002bf2 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002bf2:	b480      	push	{r7}
 8002bf4:	b083      	sub	sp, #12
 8002bf6:	af00      	add	r7, sp, #0
 8002bf8:	6078      	str	r0, [r7, #4]
 8002bfa:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (1UL << ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)));
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	0e9b      	lsrs	r3, r3, #26
 8002c04:	f003 031f 	and.w	r3, r3, #31
 8002c08:	2101      	movs	r1, #1
 8002c0a:	fa01 f303 	lsl.w	r3, r1, r3
 8002c0e:	43db      	mvns	r3, r3
 8002c10:	401a      	ands	r2, r3
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002c16:	bf00      	nop
 8002c18:	370c      	adds	r7, #12
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c20:	4770      	bx	lr
	...

08002c24 <LL_ADC_SetChannelSamplingTime>:
  *         (1) On STM32U5, parameter available only on ADC instance: ADC1, ADC2.
  *         (2) On STM32U5, parameter available only on ADC instance: ADC4.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b08b      	sub	sp, #44	@ 0x2c
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	60f8      	str	r0, [r7, #12]
 8002c2c:	60b9      	str	r1, [r7, #8]
 8002c2e:	607a      	str	r2, [r7, #4]
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	4a2d      	ldr	r2, [pc, #180]	@ (8002ce8 <LL_ADC_SetChannelSamplingTime+0xc4>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d042      	beq.n	8002cbe <LL_ADC_SetChannelSamplingTime+0x9a>
  {
    /* Set bits with content of parameter "SamplingTime" with bits position     */
    /* in register and register position depending on parameter "Channel".      */
    /* Parameter "Channel" is used with masks because containing                */
    /* other bits reserved for other purpose.                                   */
    uint32_t shift_value = ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) - (10UL * ((Channel                             \
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d104      	bne.n	8002c4c <LL_ADC_SetChannelSamplingTime+0x28>
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	0e9b      	lsrs	r3, r3, #26
 8002c46:	f003 021f 	and.w	r2, r3, #31
 8002c4a:	e011      	b.n	8002c70 <LL_ADC_SetChannelSamplingTime+0x4c>
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c50:	69bb      	ldr	r3, [r7, #24]
 8002c52:	fa93 f3a3 	rbit	r3, r3
 8002c56:	617b      	str	r3, [r7, #20]
  return result;
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8002c5c:	69fb      	ldr	r3, [r7, #28]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d101      	bne.n	8002c66 <LL_ADC_SetChannelSamplingTime+0x42>
    return 32U;
 8002c62:	2320      	movs	r3, #32
 8002c64:	e003      	b.n	8002c6e <LL_ADC_SetChannelSamplingTime+0x4a>
  return __builtin_clz(value);
 8002c66:	69fb      	ldr	r3, [r7, #28]
 8002c68:	fab3 f383 	clz	r3, r3
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	461a      	mov	r2, r3
                                                                                 & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) \
                                                                                >> ADC_SMPRX_REGOFFSET_POS))) * 3UL);
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	0e5b      	lsrs	r3, r3, #25
 8002c74:	f003 0101 	and.w	r1, r3, #1
    uint32_t shift_value = ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) - (10UL * ((Channel                             \
 8002c78:	460b      	mov	r3, r1
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	440b      	add	r3, r1
 8002c7e:	005b      	lsls	r3, r3, #1
 8002c80:	1ad2      	subs	r2, r2, r3
 8002c82:	4613      	mov	r3, r2
 8002c84:	005b      	lsls	r3, r3, #1
 8002c86:	4413      	add	r3, r2
 8002c88:	627b      	str	r3, [r7, #36]	@ 0x24
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK)            \
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	3314      	adds	r3, #20
 8002c8e:	461a      	mov	r2, r3
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	0e5b      	lsrs	r3, r3, #25
 8002c94:	009b      	lsls	r3, r3, #2
 8002c96:	f003 0304 	and.w	r3, r3, #4
 8002c9a:	4413      	add	r3, r2
 8002c9c:	623b      	str	r3, [r7, #32]
                                                             >> ADC_SMPRX_REGOFFSET_POS));

    MODIFY_REG(*preg, ADC_SMPR1_SMP0 << shift_value, SamplingTime   << shift_value);
 8002c9e:	6a3b      	ldr	r3, [r7, #32]
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	2107      	movs	r1, #7
 8002ca4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ca6:	fa01 f303 	lsl.w	r3, r1, r3
 8002caa:	43db      	mvns	r3, r3
 8002cac:	401a      	ands	r2, r3
 8002cae:	6879      	ldr	r1, [r7, #4]
 8002cb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cb2:	fa01 f303 	lsl.w	r3, r1, r3
 8002cb6:	431a      	orrs	r2, r3
 8002cb8:	6a3b      	ldr	r3, [r7, #32]
 8002cba:	601a      	str	r2, [r3, #0]
               ((Channel & ADC_CHANNEL_ID_BITFIELD_MASK) << ADC4_SMPR_SMPSEL0_BITOFFSET_POS),
               ((Channel & ADC_CHANNEL_ID_BITFIELD_MASK) << ADC4_SMPR_SMPSEL0_BITOFFSET_POS)
               & (SamplingTime & ADC4_SAMPLING_TIME_CH_MASK)
              );
  }
}
 8002cbc:	e00e      	b.n	8002cdc <LL_ADC_SetChannelSamplingTime+0xb8>
    MODIFY_REG(ADCx->SMPR1,
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	695a      	ldr	r2, [r3, #20]
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	021b      	lsls	r3, r3, #8
 8002cc6:	43db      	mvns	r3, r3
 8002cc8:	401a      	ands	r2, r3
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	0219      	lsls	r1, r3, #8
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	400b      	ands	r3, r1
 8002cd2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002cd6:	431a      	orrs	r2, r3
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	615a      	str	r2, [r3, #20]
}
 8002cdc:	bf00      	nop
 8002cde:	372c      	adds	r7, #44	@ 0x2c
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce6:	4770      	bx	lr
 8002ce8:	46021000 	.word	0x46021000

08002cec <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b085      	sub	sp, #20
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	60f8      	str	r0, [r7, #12]
 8002cf4:	60b9      	str	r1, [r7, #8]
 8002cf6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002d04:	43db      	mvns	r3, r3
 8002d06:	401a      	ands	r2, r3
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	f003 0318 	and.w	r3, r3, #24
 8002d0e:	4908      	ldr	r1, [pc, #32]	@ (8002d30 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002d10:	40d9      	lsrs	r1, r3
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	400b      	ands	r3, r1
 8002d16:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002d1a:	431a      	orrs	r2, r3
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff                              \
                                                                              & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002d22:	bf00      	nop
 8002d24:	3714      	adds	r7, #20
 8002d26:	46bd      	mov	sp, r7
 8002d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2c:	4770      	bx	lr
 8002d2e:	bf00      	nop
 8002d30:	000fffff 	.word	0x000fffff

08002d34 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b083      	sub	sp, #12
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002d44:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002d48:	687a      	ldr	r2, [r7, #4]
 8002d4a:	6093      	str	r3, [r2, #8]
}
 8002d4c:	bf00      	nop
 8002d4e:	370c      	adds	r7, #12
 8002d50:	46bd      	mov	sp, r7
 8002d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d56:	4770      	bx	lr

08002d58 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b083      	sub	sp, #12
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002d68:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002d6c:	d101      	bne.n	8002d72 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e000      	b.n	8002d74 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002d72:	2300      	movs	r3, #0
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	370c      	adds	r7, #12
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7e:	4770      	bx	lr

08002d80 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b083      	sub	sp, #12
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADVREGEN);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002d90:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002d94:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	609a      	str	r2, [r3, #8]
}
 8002d9c:	bf00      	nop
 8002d9e:	370c      	adds	r7, #12
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr

08002da8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b083      	sub	sp, #12
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002db8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002dbc:	d101      	bne.n	8002dc2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e000      	b.n	8002dc4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002dc2:	2300      	movs	r3, #0
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	370c      	adds	r7, #12
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dce:	4770      	bx	lr

08002dd0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b083      	sub	sp, #12
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	f003 0301 	and.w	r3, r3, #1
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	d101      	bne.n	8002de8 <LL_ADC_IsEnabled+0x18>
 8002de4:	2301      	movs	r3, #1
 8002de6:	e000      	b.n	8002dea <LL_ADC_IsEnabled+0x1a>
 8002de8:	2300      	movs	r3, #0
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	370c      	adds	r7, #12
 8002dee:	46bd      	mov	sp, r7
 8002df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df4:	4770      	bx	lr

08002df6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002df6:	b480      	push	{r7}
 8002df8:	b083      	sub	sp, #12
 8002dfa:	af00      	add	r7, sp, #0
 8002dfc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	f003 0304 	and.w	r3, r3, #4
 8002e06:	2b04      	cmp	r3, #4
 8002e08:	d101      	bne.n	8002e0e <LL_ADC_REG_IsConversionOngoing+0x18>
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e000      	b.n	8002e10 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002e0e:	2300      	movs	r3, #0
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	370c      	adds	r7, #12
 8002e14:	46bd      	mov	sp, r7
 8002e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1a:	4770      	bx	lr

08002e1c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b083      	sub	sp, #12
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	f003 0308 	and.w	r3, r3, #8
 8002e2c:	2b08      	cmp	r3, #8
 8002e2e:	d101      	bne.n	8002e34 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002e30:	2301      	movs	r3, #1
 8002e32:	e000      	b.n	8002e36 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002e34:	2300      	movs	r3, #0
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	370c      	adds	r7, #12
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e40:	4770      	bx	lr
	...

08002e44 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002e44:	b590      	push	{r4, r7, lr}
 8002e46:	b08b      	sub	sp, #44	@ 0x2c
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t tmpCFGR1 = 0UL;
 8002e52:	2300      	movs	r3, #0
 8002e54:	623b      	str	r3, [r7, #32]
  uint32_t tmpCFGR2 = 0UL;
 8002e56:	2300      	movs	r3, #0
 8002e58:	61fb      	str	r3, [r7, #28]
  __IO uint32_t wait_loop_index;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d101      	bne.n	8002e64 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	e2ce      	b.n	8003402 <HAL_ADC_Init+0x5be>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	691b      	ldr	r3, [r3, #16]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d003      	beq.n	8002e74 <HAL_ADC_Init+0x30>
  {
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a95      	ldr	r2, [pc, #596]	@ (80030c8 <HAL_ADC_Init+0x284>)
 8002e72:	4293      	cmp	r3, r2
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d109      	bne.n	8002e90 <HAL_ADC_Init+0x4c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002e7c:	6878      	ldr	r0, [r7, #4]
 8002e7e:	f7fe f957 	bl	8001130 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2200      	movs	r2, #0
 8002e86:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4618      	mov	r0, r3
 8002e96:	f7ff ff5f 	bl	8002d58 <LL_ADC_IsDeepPowerDownEnabled>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d004      	beq.n	8002eaa <HAL_ADC_Init+0x66>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f7ff ff45 	bl	8002d34 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f7ff ff7a 	bl	8002da8 <LL_ADC_IsInternalRegulatorEnabled>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d115      	bne.n	8002ee6 <HAL_ADC_Init+0xa2>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f7ff ff5e 	bl	8002d80 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002ec4:	4b81      	ldr	r3, [pc, #516]	@ (80030cc <HAL_ADC_Init+0x288>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	099b      	lsrs	r3, r3, #6
 8002eca:	4a81      	ldr	r2, [pc, #516]	@ (80030d0 <HAL_ADC_Init+0x28c>)
 8002ecc:	fba2 2303 	umull	r2, r3, r2, r3
 8002ed0:	099b      	lsrs	r3, r3, #6
 8002ed2:	3301      	adds	r3, #1
 8002ed4:	005b      	lsls	r3, r3, #1
 8002ed6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002ed8:	e002      	b.n	8002ee0 <HAL_ADC_Init+0x9c>
    {
      wait_loop_index--;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	3b01      	subs	r3, #1
 8002ede:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d1f9      	bne.n	8002eda <HAL_ADC_Init+0x96>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4618      	mov	r0, r3
 8002eec:	f7ff ff5c 	bl	8002da8 <LL_ADC_IsInternalRegulatorEnabled>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d10e      	bne.n	8002f14 <HAL_ADC_Init+0xd0>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002efa:	f043 0210 	orr.w	r2, r3, #16
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002f06:	f043 0201 	orr.w	r2, r3, #1
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	67da      	str	r2, [r3, #124]	@ 0x7c

    tmp_hal_status = HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f7ff ff6c 	bl	8002df6 <LL_ADC_REG_IsConversionOngoing>
 8002f1e:	61b8      	str	r0, [r7, #24]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002f24:	f003 0310 	and.w	r3, r3, #16
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	f040 825f 	bne.w	80033ec <HAL_ADC_Init+0x5a8>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002f2e:	69bb      	ldr	r3, [r7, #24]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	f040 825b 	bne.w	80033ec <HAL_ADC_Init+0x5a8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002f3a:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002f3e:	f043 0202 	orr.w	r2, r3, #2
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	679a      	str	r2, [r3, #120]	@ 0x78
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f7ff ff40 	bl	8002dd0 <LL_ADC_IsEnabled>
 8002f50:	4603      	mov	r3, r0
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d14f      	bne.n	8002ff6 <HAL_ADC_Init+0x1b2>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a5b      	ldr	r2, [pc, #364]	@ (80030c8 <HAL_ADC_Init+0x284>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d037      	beq.n	8002fd0 <HAL_ADC_Init+0x18c>
      {
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a5b      	ldr	r2, [pc, #364]	@ (80030d4 <HAL_ADC_Init+0x290>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d004      	beq.n	8002f74 <HAL_ADC_Init+0x130>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a5a      	ldr	r2, [pc, #360]	@ (80030d8 <HAL_ADC_Init+0x294>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d10e      	bne.n	8002f92 <HAL_ADC_Init+0x14e>
 8002f74:	4857      	ldr	r0, [pc, #348]	@ (80030d4 <HAL_ADC_Init+0x290>)
 8002f76:	f7ff ff2b 	bl	8002dd0 <LL_ADC_IsEnabled>
 8002f7a:	4604      	mov	r4, r0
 8002f7c:	4856      	ldr	r0, [pc, #344]	@ (80030d8 <HAL_ADC_Init+0x294>)
 8002f7e:	f7ff ff27 	bl	8002dd0 <LL_ADC_IsEnabled>
 8002f82:	4603      	mov	r3, r0
 8002f84:	4323      	orrs	r3, r4
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	bf0c      	ite	eq
 8002f8a:	2301      	moveq	r3, #1
 8002f8c:	2300      	movne	r3, #0
 8002f8e:	b2db      	uxtb	r3, r3
 8002f90:	e008      	b.n	8002fa4 <HAL_ADC_Init+0x160>
 8002f92:	484d      	ldr	r0, [pc, #308]	@ (80030c8 <HAL_ADC_Init+0x284>)
 8002f94:	f7ff ff1c 	bl	8002dd0 <LL_ADC_IsEnabled>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	bf0c      	ite	eq
 8002f9e:	2301      	moveq	r3, #1
 8002fa0:	2300      	movne	r3, #0
 8002fa2:	b2db      	uxtb	r3, r3
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d026      	beq.n	8002ff6 <HAL_ADC_Init+0x1b2>
          /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
          /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
          /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
          /*     (set into HAL_ADC_ConfigChannel() or                             */
          /*     HAL_ADCEx_InjectedConfigChannel() )                              */
          LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a49      	ldr	r2, [pc, #292]	@ (80030d4 <HAL_ADC_Init+0x290>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d004      	beq.n	8002fbc <HAL_ADC_Init+0x178>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a48      	ldr	r2, [pc, #288]	@ (80030d8 <HAL_ADC_Init+0x294>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d101      	bne.n	8002fc0 <HAL_ADC_Init+0x17c>
 8002fbc:	4a47      	ldr	r2, [pc, #284]	@ (80030dc <HAL_ADC_Init+0x298>)
 8002fbe:	e000      	b.n	8002fc2 <HAL_ADC_Init+0x17e>
 8002fc0:	4a47      	ldr	r2, [pc, #284]	@ (80030e0 <HAL_ADC_Init+0x29c>)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	4619      	mov	r1, r3
 8002fc8:	4610      	mov	r0, r2
 8002fca:	f7ff fc4b 	bl	8002864 <LL_ADC_SetCommonClock>
 8002fce:	e012      	b.n	8002ff6 <HAL_ADC_Init+0x1b2>
        /* parameters):                                                         */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() )                              */

        /* Configuration of ADC resolution                                      */
        LL_ADC_SetResolution(hadc->Instance, hadc->Init.Resolution);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681a      	ldr	r2, [r3, #0]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	4619      	mov	r1, r3
 8002fda:	4610      	mov	r0, r2
 8002fdc:	f7ff fc76 	bl	80028cc <LL_ADC_SetResolution>

        /* Configuration of ADC clock mode: clock source AHB or HSI with        */
        /* selectable prescaler.                                                */
        MODIFY_REG(ADC4_COMMON->CCR,
 8002fe0:	4b3f      	ldr	r3, [pc, #252]	@ (80030e0 <HAL_ADC_Init+0x29c>)
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8002ff0:	493b      	ldr	r1, [pc, #236]	@ (80030e0 <HAL_ADC_Init+0x29c>)
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	608b      	str	r3, [r1, #8]
                   ADC_CCR_PRESC,
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a33      	ldr	r2, [pc, #204]	@ (80030c8 <HAL_ADC_Init+0x284>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d010      	beq.n	8003022 <HAL_ADC_Init+0x1de>
      /*  - overrun                                  Init.Overrun               */
      /*  - discontinuous mode                       Init.DiscontinuousConvMode */
      /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */

      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003006:	035a      	lsls	r2, r3, #13
                    hadc->Init.Overrun                                                    |
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800300c:	431a      	orrs	r2, r3
                    hadc->Init.Resolution                                                 |
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	689b      	ldr	r3, [r3, #8]
                    hadc->Init.Overrun                                                    |
 8003012:	431a      	orrs	r2, r3
                    ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800301a:	041b      	lsls	r3, r3, #16
      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
 800301c:	4313      	orrs	r3, r2
 800301e:	623b      	str	r3, [r7, #32]
 8003020:	e035      	b.n	800308e <HAL_ADC_Init+0x24a>
      /*  - external trigger polarity                                           */
      /*  - data alignment                                                      */
      /*  - resolution                                                          */
      /*  - scan direction                                                      */
      /*  - DMA continuous request                                              */
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	7f1b      	ldrb	r3, [r3, #28]
 8003026:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800302e:	035b      	lsls	r3, r3, #13
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003030:	4313      	orrs	r3, r2
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 8003032:	687a      	ldr	r2, [r7, #4]
 8003034:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8003036:	2a00      	cmp	r2, #0
 8003038:	d002      	beq.n	8003040 <HAL_ADC_Init+0x1fc>
 800303a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800303e:	e000      	b.n	8003042 <HAL_ADC_Init+0x1fe>
 8003040:	2200      	movs	r2, #0
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8003042:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                            |
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	695b      	ldr	r3, [r3, #20]
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 8003048:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	691b      	ldr	r3, [r3, #16]
 800304e:	2b00      	cmp	r3, #0
 8003050:	da04      	bge.n	800305c <HAL_ADC_Init+0x218>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	691b      	ldr	r3, [r3, #16]
 8003056:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800305a:	e001      	b.n	8003060 <HAL_ADC_Init+0x21c>
 800305c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
                   hadc->Init.DataAlign                                            |
 8003060:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.DMAContinuousRequests));
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	491b      	ldr	r1, [pc, #108]	@ (80030d4 <HAL_ADC_Init+0x290>)
 8003068:	428b      	cmp	r3, r1
 800306a:	d004      	beq.n	8003076 <HAL_ADC_Init+0x232>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4919      	ldr	r1, [pc, #100]	@ (80030d8 <HAL_ADC_Init+0x294>)
 8003072:	428b      	cmp	r3, r1
 8003074:	d103      	bne.n	800307e <HAL_ADC_Init+0x23a>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800307c:	e003      	b.n	8003086 <HAL_ADC_Init+0x242>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003084:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 8003086:	4313      	orrs	r3, r2
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003088:	6a3a      	ldr	r2, [r7, #32]
 800308a:	4313      	orrs	r3, r2
 800308c:	623b      	str	r3, [r7, #32]
    }

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8003094:	2b01      	cmp	r3, #1
 8003096:	d131      	bne.n	80030fc <HAL_ADC_Init+0x2b8>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a0a      	ldr	r2, [pc, #40]	@ (80030c8 <HAL_ADC_Init+0x284>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d007      	beq.n	80030b2 <HAL_ADC_Init+0x26e>
      {
        tmpCFGR1 |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030a6:	3b01      	subs	r3, #1
 80030a8:	045b      	lsls	r3, r3, #17
 80030aa:	6a3a      	ldr	r2, [r7, #32]
 80030ac:	4313      	orrs	r3, r2
 80030ae:	623b      	str	r3, [r7, #32]
 80030b0:	e024      	b.n	80030fc <HAL_ADC_Init+0x2b8>
      }
      else
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d113      	bne.n	80030e4 <HAL_ADC_Init+0x2a0>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80030bc:	6a3b      	ldr	r3, [r7, #32]
 80030be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030c2:	623b      	str	r3, [r7, #32]
 80030c4:	e01a      	b.n	80030fc <HAL_ADC_Init+0x2b8>
 80030c6:	bf00      	nop
 80030c8:	46021000 	.word	0x46021000
 80030cc:	20000000 	.word	0x20000000
 80030d0:	053e2d63 	.word	0x053e2d63
 80030d4:	42028000 	.word	0x42028000
 80030d8:	42028100 	.word	0x42028100
 80030dc:	42028300 	.word	0x42028300
 80030e0:	46021300 	.word	0x46021300
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80030e8:	f043 0220 	orr.w	r2, r3, #32
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	679a      	str	r2, [r3, #120]	@ 0x78

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80030f4:	f043 0201 	orr.w	r2, r3, #1
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	67da      	str	r2, [r3, #124]	@ 0x7c
        }
      }
    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a75      	ldr	r2, [pc, #468]	@ (80032d8 <HAL_ADC_Init+0x494>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d018      	beq.n	8003138 <HAL_ADC_Init+0x2f4>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800310a:	2b00      	cmp	r3, #0
 800310c:	d009      	beq.n	8003122 <HAL_ADC_Init+0x2de>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003112:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800311a:	4313      	orrs	r3, r2
 800311c:	6a3a      	ldr	r2, [r7, #32]
 800311e:	4313      	orrs	r3, r2
 8003120:	623b      	str	r3, [r7, #32]
      }
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR_FIELDS_1, tmpCFGR1);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	68da      	ldr	r2, [r3, #12]
 8003128:	4b6c      	ldr	r3, [pc, #432]	@ (80032dc <HAL_ADC_Init+0x498>)
 800312a:	4013      	ands	r3, r2
 800312c:	687a      	ldr	r2, [r7, #4]
 800312e:	6812      	ldr	r2, [r2, #0]
 8003130:	6a39      	ldr	r1, [r7, #32]
 8003132:	430b      	orrs	r3, r1
 8003134:	60d3      	str	r3, [r2, #12]
 8003136:	e031      	b.n	800319c <HAL_ADC_Init+0x358>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800313c:	2b00      	cmp	r3, #0
 800313e:	d009      	beq.n	8003154 <HAL_ADC_Init+0x310>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC4_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003144:	f403 72e0 	and.w	r2, r3, #448	@ 0x1c0
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800314c:	4313      	orrs	r3, r2
 800314e:	6a3a      	ldr	r2, [r7, #32]
 8003150:	4313      	orrs	r3, r2
 8003152:	623b      	str	r3, [r7, #32]
      }
      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	68da      	ldr	r2, [r3, #12]
 800315a:	4b61      	ldr	r3, [pc, #388]	@ (80032e0 <HAL_ADC_Init+0x49c>)
 800315c:	4013      	ands	r3, r2
 800315e:	687a      	ldr	r2, [r7, #4]
 8003160:	6812      	ldr	r2, [r2, #0]
 8003162:	6a39      	ldr	r1, [r7, #32]
 8003164:	430b      	orrs	r3, r1
 8003166:	60d3      	str	r3, [r2, #12]
                 ADC4_CFGR1_ALIGN     |
                 ADC4_CFGR1_SCANDIR   |
                 ADC4_CFGR1_DMACFG,
                 tmpCFGR1);

      if (hadc->Init.LowPowerAutoPowerOff != ADC_LOW_POWER_NONE)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6a1b      	ldr	r3, [r3, #32]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d008      	beq.n	8003182 <HAL_ADC_Init+0x33e>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.LowPowerAutoPowerOff);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6a1a      	ldr	r2, [r3, #32]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	430a      	orrs	r2, r1
 8003180:	645a      	str	r2, [r3, #68]	@ 0x44
      }

      if (hadc->Init.VrefProtection != ADC_VREF_PPROT_NONE)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003186:	2b00      	cmp	r3, #0
 8003188:	d008      	beq.n	800319c <HAL_ADC_Init+0x358>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.VrefProtection);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	430a      	orrs	r2, r1
 800319a:	645a      	str	r2, [r3, #68]	@ 0x44
      }

    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a4d      	ldr	r2, [pc, #308]	@ (80032d8 <HAL_ADC_Init+0x494>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	f000 80a4 	beq.w	80032f0 <HAL_ADC_Init+0x4ac>
      /* Parameters that can be updated when ADC is disabled or enabled without */
      /* conversion on going on regular and injected groups:                    */
      /*  - Conversion data management      Init.ConversionDataManagement       */
      /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
      /*  - Oversampling parameters         Init.Oversampling                   */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4618      	mov	r0, r3
 80031ae:	f7ff fe22 	bl	8002df6 <LL_ADC_REG_IsConversionOngoing>
 80031b2:	6178      	str	r0, [r7, #20]
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4618      	mov	r0, r3
 80031ba:	f7ff fe2f 	bl	8002e1c <LL_ADC_INJ_IsConversionOngoing>
 80031be:	6138      	str	r0, [r7, #16]
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d166      	bne.n	8003294 <HAL_ADC_Init+0x450>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d163      	bne.n	8003294 <HAL_ADC_Init+0x450>
         )
      {
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	7f1b      	ldrb	r3, [r3, #28]
 80031d0:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.ConversionDataManagement));
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4943      	ldr	r1, [pc, #268]	@ (80032e4 <HAL_ADC_Init+0x4a0>)
 80031d8:	428b      	cmp	r3, r1
 80031da:	d004      	beq.n	80031e6 <HAL_ADC_Init+0x3a2>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4941      	ldr	r1, [pc, #260]	@ (80032e8 <HAL_ADC_Init+0x4a4>)
 80031e2:	428b      	cmp	r3, r1
 80031e4:	d102      	bne.n	80031ec <HAL_ADC_Init+0x3a8>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031ea:	e002      	b.n	80031f2 <HAL_ADC_Init+0x3ae>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031f0:	005b      	lsls	r3, r3, #1
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80031f2:	4313      	orrs	r3, r2
 80031f4:	623b      	str	r3, [r7, #32]

        MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR1_AUTDLY | ADC_CFGR1_DMNGT, tmpCFGR1);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	68db      	ldr	r3, [r3, #12]
 80031fc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003200:	f023 0303 	bic.w	r3, r3, #3
 8003204:	687a      	ldr	r2, [r7, #4]
 8003206:	6812      	ldr	r2, [r2, #0]
 8003208:	6a39      	ldr	r1, [r7, #32]
 800320a:	430b      	orrs	r3, r1
 800320c:	60d3      	str	r3, [r2, #12]
        if (hadc->Init.GainCompensation != 0UL)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	68db      	ldr	r3, [r3, #12]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d007      	beq.n	8003226 <HAL_ADC_Init+0x3e2>
        {
          LL_ADC_SetGainCompensation(hadc->Instance, hadc->Init.GainCompensation);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681a      	ldr	r2, [r3, #0]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	68db      	ldr	r3, [r3, #12]
 800321e:	4619      	mov	r1, r3
 8003220:	4610      	mov	r0, r2
 8003222:	f7ff fc11 	bl	8002a48 <LL_ADC_SetGainCompensation>
        }

        if (hadc->Init.OversamplingMode == ENABLE)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800322c:	2b01      	cmp	r3, #1
 800322e:	d11e      	bne.n	800326e <HAL_ADC_Init+0x42a>
          assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
          assert_param(IS_ADC12_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
          assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
          assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

          if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003234:	2b00      	cmp	r3, #0
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          /*  - trigger frequency mode                                           */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	691a      	ldr	r2, [r3, #16]
 800323c:	4b2b      	ldr	r3, [pc, #172]	@ (80032ec <HAL_ADC_Init+0x4a8>)
 800323e:	4013      	ands	r3, r2
 8003240:	687a      	ldr	r2, [r7, #4]
 8003242:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8003244:	0411      	lsls	r1, r2, #16
 8003246:	687a      	ldr	r2, [r7, #4]
 8003248:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800324a:	4311      	orrs	r1, r2
 800324c:	687a      	ldr	r2, [r7, #4]
 800324e:	6e12      	ldr	r2, [r2, #96]	@ 0x60
 8003250:	4311      	orrs	r1, r2
 8003252:	687a      	ldr	r2, [r7, #4]
 8003254:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 8003256:	4311      	orrs	r1, r2
 8003258:	687a      	ldr	r2, [r7, #4]
 800325a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800325c:	0892      	lsrs	r2, r2, #2
 800325e:	430a      	orrs	r2, r1
 8003260:	431a      	orrs	r2, r3
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f042 0201 	orr.w	r2, r2, #1
 800326a:	611a      	str	r2, [r3, #16]
 800326c:	e007      	b.n	800327e <HAL_ADC_Init+0x43a>
                     (hadc->Init.TriggerFrequencyMode >> 2UL));
        }
        else
        {
          /* Disable ADC oversampling scope on ADC group regular */
          CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	691a      	ldr	r2, [r3, #16]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f022 0201 	bic.w	r2, r2, #1
 800327c:	611a      	str	r2, [r3, #16]
        }

        /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	691b      	ldr	r3, [r3, #16]
 8003284:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	430a      	orrs	r2, r1
 8003292:	611a      	str	r2, [r3, #16]
      /*   Parameter "NbrOfConversion" is discarded.                            */
      /*   Note: Scan mode is not present by hardware on this device, but       */
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	691b      	ldr	r3, [r3, #16]
 8003298:	2b01      	cmp	r3, #1
 800329a:	d10c      	bne.n	80032b6 <HAL_ADC_Init+0x472>
      {
        /* Set number of ranks in regular group sequencer */
        MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032a2:	f023 010f 	bic.w	r1, r3, #15
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032aa:	1e5a      	subs	r2, r3, #1
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	430a      	orrs	r2, r1
 80032b2:	631a      	str	r2, [r3, #48]	@ 0x30
 80032b4:	e007      	b.n	80032c6 <HAL_ADC_Init+0x482>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f022 020f 	bic.w	r2, r2, #15
 80032c4:	631a      	str	r2, [r3, #48]	@ 0x30
      }

      /* Initialize the ADC state */
      /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80032ca:	f023 0303 	bic.w	r3, r3, #3
 80032ce:	f043 0201 	orr.w	r2, r3, #1
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	679a      	str	r2, [r3, #120]	@ 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80032d6:	e092      	b.n	80033fe <HAL_ADC_Init+0x5ba>
 80032d8:	46021000 	.word	0x46021000
 80032dc:	fff0c013 	.word	0xfff0c013
 80032e0:	ffde800d 	.word	0xffde800d
 80032e4:	42028000 	.word	0x42028000
 80032e8:	42028100 	.word	0x42028100
 80032ec:	fc00f81e 	.word	0xfc00f81e

    }
    else
    {
      if (hadc->Init.OversamplingMode == ENABLE)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	d111      	bne.n	800331e <HAL_ADC_Init+0x4da>
        /*  - oversampling enable                                                 */
        /*  - oversampling ratio                                                  */
        /*  - oversampling shift                                                  */
        /*  - oversampling discontinuous mode (triggered mode)                    */
        /*  - trigger frequency mode                                              */
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
                     hadc->Init.Oversampling.RightBitShift |
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8003302:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode |
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                     hadc->Init.Oversampling.RightBitShift |
 8003308:	431a      	orrs	r2, r3
                     hadc->Init.TriggerFrequencyMode
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
                     hadc->Init.Oversampling.TriggeredMode |
 800330e:	4313      	orrs	r3, r2
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8003310:	69fa      	ldr	r2, [r7, #28]
 8003312:	4313      	orrs	r3, r2
 8003314:	61fb      	str	r3, [r7, #28]
                    );

        SET_BIT(tmpCFGR2, ADC_CFGR2_ROVSE);
 8003316:	69fb      	ldr	r3, [r7, #28]
 8003318:	f043 0301 	orr.w	r3, r3, #1
 800331c:	61fb      	str	r3, [r7, #28]
      }
      MODIFY_REG(hadc->Instance->CFGR2,
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	691a      	ldr	r2, [r3, #16]
 8003324:	4b39      	ldr	r3, [pc, #228]	@ (800340c <HAL_ADC_Init+0x5c8>)
 8003326:	4013      	ands	r3, r2
 8003328:	687a      	ldr	r2, [r7, #4]
 800332a:	6812      	ldr	r2, [r2, #0]
 800332c:	69f9      	ldr	r1, [r7, #28]
 800332e:	430b      	orrs	r3, r1
 8003330:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_LFTRIG | ADC_CFGR2_ROVSE | ADC4_CFGR2_OVSR | ADC_CFGR2_OVSS | ADC_CFGR2_TROVS,
                 tmpCFGR2);


      /* Channel sampling time configuration */
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1,                   \
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6818      	ldr	r0, [r3, #0]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800333a:	461a      	mov	r2, r3
 800333c:	2100      	movs	r1, #0
 800333e:	f7ff fba6 	bl	8002a8e <LL_ADC_SetSamplingTimeCommonChannels>
                                           hadc->Init.SamplingTimeCommon1);
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2,                   \
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6818      	ldr	r0, [r3, #0]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800334a:	461a      	mov	r2, r3
 800334c:	f06f 01fb 	mvn.w	r1, #251	@ 0xfb
 8003350:	f7ff fb9d 	bl	8002a8e <LL_ADC_SetSamplingTimeCommonChannels>
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      /*   Channels must be configured into each rank using function            */
      /*   "HAL_ADC_ConfigChannel()".                                           */
      if (hadc->Init.ScanConvMode == ADC4_SCAN_DISABLE)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	691b      	ldr	r3, [r3, #16]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d108      	bne.n	800336e <HAL_ADC_Init+0x52a>
      {
        /* Set sequencer scan length by clearing ranks above rank 1             */
        /* and do not modify rank 1 value.                                      */
        SET_BIT(hadc->Instance->CHSELR, ADC_CHSELR_SQ2_TO_SQ8);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f062 020f 	orn	r2, r2, #15
 800336a:	629a      	str	r2, [r3, #40]	@ 0x28
 800336c:	e018      	b.n	80033a0 <HAL_ADC_Init+0x55c>

      }
      else if (hadc->Init.ScanConvMode == ADC4_SCAN_ENABLE)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	691b      	ldr	r3, [r3, #16]
 8003372:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003376:	d113      	bne.n	80033a0 <HAL_ADC_Init+0x55c>
        /*          therefore after the first call of "HAL_ADC_Init()",        */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003382:	3b01      	subs	r3, #1
 8003384:	009b      	lsls	r3, r3, #2
 8003386:	f003 031c 	and.w	r3, r3, #28
 800338a:	f06f 020f 	mvn.w	r2, #15
 800338e:	fa02 f103 	lsl.w	r1, r2, r3
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	430a      	orrs	r2, r1
 800339e:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Check back that ADC registers have effectively been configured to      */
      /* ensure of no potential problem of ADC core IP clocking.                */
      /* Check through register CFGR1 (excluding analog watchdog configuration: */
      /* set into separate dedicated function, and bits of ADC resolution set   */
      /* out of temporary variable 'tmpCFGR1').                                 */
      if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	68da      	ldr	r2, [r3, #12]
 80033a6:	4b1a      	ldr	r3, [pc, #104]	@ (8003410 <HAL_ADC_Init+0x5cc>)
 80033a8:	4013      	ands	r3, r2
 80033aa:	6a3a      	ldr	r2, [r7, #32]
 80033ac:	429a      	cmp	r2, r3
 80033ae:	d10b      	bne.n	80033c8 <HAL_ADC_Init+0x584>
          == tmpCFGR1)
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2200      	movs	r2, #0
 80033b4:	67da      	str	r2, [r3, #124]	@ 0x7c

        /* Set the ADC state */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80033ba:	f023 0303 	bic.w	r3, r3, #3
 80033be:	f043 0201 	orr.w	r2, r3, #1
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	679a      	str	r2, [r3, #120]	@ 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80033c6:	e01a      	b.n	80033fe <HAL_ADC_Init+0x5ba>
      }
      else
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80033cc:	f023 0312 	bic.w	r3, r3, #18
 80033d0:	f043 0210 	orr.w	r2, r3, #16
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	679a      	str	r2, [r3, #120]	@ 0x78

        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80033dc:	f043 0201 	orr.w	r2, r3, #1
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	67da      	str	r2, [r3, #124]	@ 0x7c

        tmp_hal_status = HAL_ERROR;
 80033e4:	2301      	movs	r3, #1
 80033e6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80033ea:	e008      	b.n	80033fe <HAL_ADC_Init+0x5ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80033f0:	f043 0210 	orr.w	r2, r3, #16
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	679a      	str	r2, [r3, #120]	@ 0x78

    tmp_hal_status = HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  return tmp_hal_status;
 80033fe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003402:	4618      	mov	r0, r3
 8003404:	372c      	adds	r7, #44	@ 0x2c
 8003406:	46bd      	mov	sp, r7
 8003408:	bd90      	pop	{r4, r7, pc}
 800340a:	bf00      	nop
 800340c:	f7fffc02 	.word	0xf7fffc02
 8003410:	833ffff3 	.word	0x833ffff3

08003414 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8003414:	b590      	push	{r4, r7, lr}
 8003416:	b0b7      	sub	sp, #220	@ 0xdc
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
 800341c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800341e:	2300      	movs	r3, #0
 8003420:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmp_offset_shifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003424:	2300      	movs	r3, #0
 8003426:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_channel;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4aa8      	ldr	r2, [pc, #672]	@ (80036d0 <HAL_ADC_ConfigChannel+0x2bc>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d103      	bne.n	800343a <HAL_ADC_ConfigChannel+0x26>
  }
  else
  {
    assert_param(IS_ADC4_SAMPLE_TIME_COMMON(pConfig->SamplingTime));

    if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)          ||
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	691b      	ldr	r3, [r3, #16]
 8003436:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000

      assert_param(IS_ADC4_REGULAR_RANK(pConfig->Rank));
    }
  }

  __HAL_LOCK(hadc);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 8003440:	2b01      	cmp	r3, #1
 8003442:	d102      	bne.n	800344a <HAL_ADC_ConfigChannel+0x36>
 8003444:	2302      	movs	r3, #2
 8003446:	f000 bdfe 	b.w	8004046 <HAL_ADC_ConfigChannel+0xc32>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2201      	movs	r2, #1
 800344e:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4618      	mov	r0, r3
 8003458:	f7ff fccd 	bl	8002df6 <LL_ADC_REG_IsConversionOngoing>
 800345c:	4603      	mov	r3, r0
 800345e:	2b00      	cmp	r3, #0
 8003460:	f040 85c1 	bne.w	8003fe6 <HAL_ADC_ConfigChannel+0xbd2>
  {
    if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a99      	ldr	r2, [pc, #612]	@ (80036d0 <HAL_ADC_ConfigChannel+0x2bc>)
 800346a:	4293      	cmp	r3, r2
 800346c:	f000 8409 	beq.w	8003c82 <HAL_ADC_ConfigChannel+0x86e>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel) & 0x1FUL));
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003478:	2b00      	cmp	r3, #0
 800347a:	d108      	bne.n	800348e <HAL_ADC_ConfigChannel+0x7a>
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	0e9b      	lsrs	r3, r3, #26
 8003482:	f003 031f 	and.w	r3, r3, #31
 8003486:	2201      	movs	r2, #1
 8003488:	fa02 f303 	lsl.w	r3, r2, r3
 800348c:	e01d      	b.n	80034ca <HAL_ADC_ConfigChannel+0xb6>
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003496:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800349a:	fa93 f3a3 	rbit	r3, r3
 800349e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 80034a2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80034a6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (value == 0U)
 80034aa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d101      	bne.n	80034b6 <HAL_ADC_ConfigChannel+0xa2>
    return 32U;
 80034b2:	2320      	movs	r3, #32
 80034b4:	e004      	b.n	80034c0 <HAL_ADC_ConfigChannel+0xac>
  return __builtin_clz(value);
 80034b6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80034ba:	fab3 f383 	clz	r3, r3
 80034be:	b2db      	uxtb	r3, r3
 80034c0:	f003 031f 	and.w	r3, r3, #31
 80034c4:	2201      	movs	r2, #1
 80034c6:	fa02 f303 	lsl.w	r3, r2, r3
 80034ca:	687a      	ldr	r2, [r7, #4]
 80034cc:	6812      	ldr	r2, [r2, #0]
 80034ce:	69d1      	ldr	r1, [r2, #28]
 80034d0:	687a      	ldr	r2, [r7, #4]
 80034d2:	6812      	ldr	r2, [r2, #0]
 80034d4:	430b      	orrs	r3, r1
 80034d6:	61d3      	str	r3, [r2, #28]

      /* Set ADC group regular sequence: channel on the selected scan sequence rank */
      LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6818      	ldr	r0, [r3, #0]
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	6859      	ldr	r1, [r3, #4]
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	461a      	mov	r2, r3
 80034e6:	f7ff faf1 	bl	8002acc <LL_ADC_REG_SetSequencerRanks>
      /* Parameters update conditioned to ADC state:                              */
      /* Parameters that can be updated when ADC is disabled or enabled without   */
      /* conversion on going on regular group:                                    */
      /*  - Channel sampling time                                                 */
      /*  - Channel offset                                                        */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4618      	mov	r0, r3
 80034f0:	f7ff fc81 	bl	8002df6 <LL_ADC_REG_IsConversionOngoing>
 80034f4:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4618      	mov	r0, r3
 80034fe:	f7ff fc8d 	bl	8002e1c <LL_ADC_INJ_IsConversionOngoing>
 8003502:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003506:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800350a:	2b00      	cmp	r3, #0
 800350c:	f040 81df 	bne.w	80038ce <HAL_ADC_ConfigChannel+0x4ba>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003510:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003514:	2b00      	cmp	r3, #0
 8003516:	f040 81da 	bne.w	80038ce <HAL_ADC_ConfigChannel+0x4ba>
         )
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6818      	ldr	r0, [r3, #0]
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	6819      	ldr	r1, [r3, #0]
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	689b      	ldr	r3, [r3, #8]
 8003526:	461a      	mov	r2, r3
 8003528:	f7ff fb7c 	bl	8002c24 <LL_ADC_SetChannelSamplingTime>

        /* Configure the offset: offset enable/disable, channel, offset value */

        /* Shift the offset with respect to the selected ADC resolution. */
        /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
        tmp_offset_shifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	695a      	ldr	r2, [r3, #20]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	68db      	ldr	r3, [r3, #12]
 8003536:	089b      	lsrs	r3, r3, #2
 8003538:	f003 0303 	and.w	r3, r3, #3
 800353c:	005b      	lsls	r3, r3, #1
 800353e:	fa02 f303 	lsl.w	r3, r2, r3
 8003542:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0

        if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	691b      	ldr	r3, [r3, #16]
 800354a:	2b04      	cmp	r3, #4
 800354c:	d046      	beq.n	80035dc <HAL_ADC_ConfigChannel+0x1c8>
        {
          /* Set ADC selected offset number */
          LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmp_offset_shifted);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6818      	ldr	r0, [r3, #0]
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	6919      	ldr	r1, [r3, #16]
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	681a      	ldr	r2, [r3, #0]
 800355a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800355e:	f7ff f9d5 	bl	800290c <LL_ADC_SetOffset>
          assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
          assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSignedSaturation));
          /* Set ADC selected offset sign */
          LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6818      	ldr	r0, [r3, #0]
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	6919      	ldr	r1, [r3, #16]
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	69db      	ldr	r3, [r3, #28]
 800356e:	461a      	mov	r2, r3
 8003570:	f7ff fa19 	bl	80029a6 <LL_ADC_SetOffsetSign>

          /* Configure offset saturation */
          if (pConfig->OffsetSaturation == ENABLE)
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	7e9b      	ldrb	r3, [r3, #26]
 8003578:	2b01      	cmp	r3, #1
 800357a:	d11e      	bne.n	80035ba <HAL_ADC_ConfigChannel+0x1a6>
          {
            /* Set ADC selected offset unsigned/signed saturation */
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6818      	ldr	r0, [r3, #0]
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	6919      	ldr	r1, [r3, #16]
                                               (pConfig->OffsetSignedSaturation == DISABLE)
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	7e5b      	ldrb	r3, [r3, #25]
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003588:	2b00      	cmp	r3, #0
 800358a:	d102      	bne.n	8003592 <HAL_ADC_ConfigChannel+0x17e>
 800358c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003590:	e000      	b.n	8003594 <HAL_ADC_ConfigChannel+0x180>
 8003592:	2300      	movs	r3, #0
 8003594:	461a      	mov	r2, r3
 8003596:	f7ff fa3c 	bl	8002a12 <LL_ADC_SetOffsetUnsignedSaturation>
                                               ? LL_ADC_OFFSET_UNSIGNED_SATURATION_ENABLE    \
                                               : LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE);

            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6818      	ldr	r0, [r3, #0]
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	6919      	ldr	r1, [r3, #16]
                                             (pConfig->OffsetSignedSaturation == ENABLE)
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	7e5b      	ldrb	r3, [r3, #25]
            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 80035a6:	2b01      	cmp	r3, #1
 80035a8:	d102      	bne.n	80035b0 <HAL_ADC_ConfigChannel+0x19c>
 80035aa:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80035ae:	e000      	b.n	80035b2 <HAL_ADC_ConfigChannel+0x19e>
 80035b0:	2300      	movs	r3, #0
 80035b2:	461a      	mov	r2, r3
 80035b4:	f7ff fa12 	bl	80029dc <LL_ADC_SetOffsetSignedSaturation>
 80035b8:	e189      	b.n	80038ce <HAL_ADC_ConfigChannel+0x4ba>
                                             : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
          }
          else
          {
            /* Disable ADC offset signed saturation */
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6818      	ldr	r0, [r3, #0]
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	691b      	ldr	r3, [r3, #16]
 80035c2:	2200      	movs	r2, #0
 80035c4:	4619      	mov	r1, r3
 80035c6:	f7ff fa24 	bl	8002a12 <LL_ADC_SetOffsetUnsignedSaturation>
                                               LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE);
            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6818      	ldr	r0, [r3, #0]
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	691b      	ldr	r3, [r3, #16]
 80035d2:	2200      	movs	r2, #0
 80035d4:	4619      	mov	r1, r3
 80035d6:	f7ff fa01 	bl	80029dc <LL_ADC_SetOffsetSignedSaturation>
 80035da:	e178      	b.n	80038ce <HAL_ADC_ConfigChannel+0x4ba>
        }
        else
        {
          /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
             If this is the case, the corresponding offset is disabled since pConfig->OffsetNumber = ADC_OFFSET_NONE. */
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	2100      	movs	r1, #0
 80035e2:	4618      	mov	r0, r3
 80035e4:	f7ff f9b3 	bl	800294e <LL_ADC_GetOffsetChannel>
 80035e8:	4603      	mov	r3, r0
 80035ea:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d10a      	bne.n	8003608 <HAL_ADC_ConfigChannel+0x1f4>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	2100      	movs	r1, #0
 80035f8:	4618      	mov	r0, r3
 80035fa:	f7ff f9a8 	bl	800294e <LL_ADC_GetOffsetChannel>
 80035fe:	4603      	mov	r3, r0
 8003600:	0e9b      	lsrs	r3, r3, #26
 8003602:	f003 021f 	and.w	r2, r3, #31
 8003606:	e01e      	b.n	8003646 <HAL_ADC_ConfigChannel+0x232>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	2100      	movs	r1, #0
 800360e:	4618      	mov	r0, r3
 8003610:	f7ff f99d 	bl	800294e <LL_ADC_GetOffsetChannel>
 8003614:	4603      	mov	r3, r0
 8003616:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800361a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800361e:	fa93 f3a3 	rbit	r3, r3
 8003622:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8003626:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800362a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 800362e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003632:	2b00      	cmp	r3, #0
 8003634:	d101      	bne.n	800363a <HAL_ADC_ConfigChannel+0x226>
    return 32U;
 8003636:	2320      	movs	r3, #32
 8003638:	e004      	b.n	8003644 <HAL_ADC_ConfigChannel+0x230>
  return __builtin_clz(value);
 800363a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800363e:	fab3 f383 	clz	r3, r3
 8003642:	b2db      	uxtb	r3, r3
 8003644:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800364e:	2b00      	cmp	r3, #0
 8003650:	d105      	bne.n	800365e <HAL_ADC_ConfigChannel+0x24a>
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	0e9b      	lsrs	r3, r3, #26
 8003658:	f003 031f 	and.w	r3, r3, #31
 800365c:	e018      	b.n	8003690 <HAL_ADC_ConfigChannel+0x27c>
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003666:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800366a:	fa93 f3a3 	rbit	r3, r3
 800366e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8003672:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003676:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 800367a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800367e:	2b00      	cmp	r3, #0
 8003680:	d101      	bne.n	8003686 <HAL_ADC_ConfigChannel+0x272>
    return 32U;
 8003682:	2320      	movs	r3, #32
 8003684:	e004      	b.n	8003690 <HAL_ADC_ConfigChannel+0x27c>
  return __builtin_clz(value);
 8003686:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800368a:	fab3 f383 	clz	r3, r3
 800368e:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003690:	429a      	cmp	r2, r3
 8003692:	d107      	bne.n	80036a4 <HAL_ADC_ConfigChannel+0x290>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_1, pConfig->Channel, 0x0);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6818      	ldr	r0, [r3, #0]
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	681a      	ldr	r2, [r3, #0]
 800369c:	2300      	movs	r3, #0
 800369e:	2100      	movs	r1, #0
 80036a0:	f7ff f934 	bl	800290c <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	2101      	movs	r1, #1
 80036aa:	4618      	mov	r0, r3
 80036ac:	f7ff f94f 	bl	800294e <LL_ADC_GetOffsetChannel>
 80036b0:	4603      	mov	r3, r0
 80036b2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d10c      	bne.n	80036d4 <HAL_ADC_ConfigChannel+0x2c0>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	2101      	movs	r1, #1
 80036c0:	4618      	mov	r0, r3
 80036c2:	f7ff f944 	bl	800294e <LL_ADC_GetOffsetChannel>
 80036c6:	4603      	mov	r3, r0
 80036c8:	0e9b      	lsrs	r3, r3, #26
 80036ca:	f003 021f 	and.w	r2, r3, #31
 80036ce:	e020      	b.n	8003712 <HAL_ADC_ConfigChannel+0x2fe>
 80036d0:	46021000 	.word	0x46021000
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	2101      	movs	r1, #1
 80036da:	4618      	mov	r0, r3
 80036dc:	f7ff f937 	bl	800294e <LL_ADC_GetOffsetChannel>
 80036e0:	4603      	mov	r3, r0
 80036e2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036e6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80036ea:	fa93 f3a3 	rbit	r3, r3
 80036ee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 80036f2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80036f6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 80036fa:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d101      	bne.n	8003706 <HAL_ADC_ConfigChannel+0x2f2>
    return 32U;
 8003702:	2320      	movs	r3, #32
 8003704:	e004      	b.n	8003710 <HAL_ADC_ConfigChannel+0x2fc>
  return __builtin_clz(value);
 8003706:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800370a:	fab3 f383 	clz	r3, r3
 800370e:	b2db      	uxtb	r3, r3
 8003710:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800371a:	2b00      	cmp	r3, #0
 800371c:	d105      	bne.n	800372a <HAL_ADC_ConfigChannel+0x316>
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	0e9b      	lsrs	r3, r3, #26
 8003724:	f003 031f 	and.w	r3, r3, #31
 8003728:	e018      	b.n	800375c <HAL_ADC_ConfigChannel+0x348>
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003732:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003736:	fa93 f3a3 	rbit	r3, r3
 800373a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 800373e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003742:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8003746:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800374a:	2b00      	cmp	r3, #0
 800374c:	d101      	bne.n	8003752 <HAL_ADC_ConfigChannel+0x33e>
    return 32U;
 800374e:	2320      	movs	r3, #32
 8003750:	e004      	b.n	800375c <HAL_ADC_ConfigChannel+0x348>
  return __builtin_clz(value);
 8003752:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003756:	fab3 f383 	clz	r3, r3
 800375a:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800375c:	429a      	cmp	r2, r3
 800375e:	d107      	bne.n	8003770 <HAL_ADC_ConfigChannel+0x35c>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_2, pConfig->Channel, 0x0);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6818      	ldr	r0, [r3, #0]
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	681a      	ldr	r2, [r3, #0]
 8003768:	2300      	movs	r3, #0
 800376a:	2101      	movs	r1, #1
 800376c:	f7ff f8ce 	bl	800290c <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	2102      	movs	r1, #2
 8003776:	4618      	mov	r0, r3
 8003778:	f7ff f8e9 	bl	800294e <LL_ADC_GetOffsetChannel>
 800377c:	4603      	mov	r3, r0
 800377e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003782:	2b00      	cmp	r3, #0
 8003784:	d10a      	bne.n	800379c <HAL_ADC_ConfigChannel+0x388>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	2102      	movs	r1, #2
 800378c:	4618      	mov	r0, r3
 800378e:	f7ff f8de 	bl	800294e <LL_ADC_GetOffsetChannel>
 8003792:	4603      	mov	r3, r0
 8003794:	0e9b      	lsrs	r3, r3, #26
 8003796:	f003 021f 	and.w	r2, r3, #31
 800379a:	e01a      	b.n	80037d2 <HAL_ADC_ConfigChannel+0x3be>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	2102      	movs	r1, #2
 80037a2:	4618      	mov	r0, r3
 80037a4:	f7ff f8d3 	bl	800294e <LL_ADC_GetOffsetChannel>
 80037a8:	4603      	mov	r3, r0
 80037aa:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ac:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80037ae:	fa93 f3a3 	rbit	r3, r3
 80037b2:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 80037b4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80037b6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 80037ba:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d101      	bne.n	80037c6 <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 80037c2:	2320      	movs	r3, #32
 80037c4:	e004      	b.n	80037d0 <HAL_ADC_ConfigChannel+0x3bc>
  return __builtin_clz(value);
 80037c6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80037ca:	fab3 f383 	clz	r3, r3
 80037ce:	b2db      	uxtb	r3, r3
 80037d0:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d105      	bne.n	80037ea <HAL_ADC_ConfigChannel+0x3d6>
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	0e9b      	lsrs	r3, r3, #26
 80037e4:	f003 031f 	and.w	r3, r3, #31
 80037e8:	e011      	b.n	800380e <HAL_ADC_ConfigChannel+0x3fa>
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037f0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80037f2:	fa93 f3a3 	rbit	r3, r3
 80037f6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80037f8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80037fa:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 80037fc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d101      	bne.n	8003806 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8003802:	2320      	movs	r3, #32
 8003804:	e003      	b.n	800380e <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8003806:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003808:	fab3 f383 	clz	r3, r3
 800380c:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800380e:	429a      	cmp	r2, r3
 8003810:	d107      	bne.n	8003822 <HAL_ADC_ConfigChannel+0x40e>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_3, pConfig->Channel, 0x0);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6818      	ldr	r0, [r3, #0]
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	2300      	movs	r3, #0
 800381c:	2102      	movs	r1, #2
 800381e:	f7ff f875 	bl	800290c <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	2103      	movs	r1, #3
 8003828:	4618      	mov	r0, r3
 800382a:	f7ff f890 	bl	800294e <LL_ADC_GetOffsetChannel>
 800382e:	4603      	mov	r3, r0
 8003830:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003834:	2b00      	cmp	r3, #0
 8003836:	d10a      	bne.n	800384e <HAL_ADC_ConfigChannel+0x43a>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	2103      	movs	r1, #3
 800383e:	4618      	mov	r0, r3
 8003840:	f7ff f885 	bl	800294e <LL_ADC_GetOffsetChannel>
 8003844:	4603      	mov	r3, r0
 8003846:	0e9b      	lsrs	r3, r3, #26
 8003848:	f003 021f 	and.w	r2, r3, #31
 800384c:	e017      	b.n	800387e <HAL_ADC_ConfigChannel+0x46a>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	2103      	movs	r1, #3
 8003854:	4618      	mov	r0, r3
 8003856:	f7ff f87a 	bl	800294e <LL_ADC_GetOffsetChannel>
 800385a:	4603      	mov	r3, r0
 800385c:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800385e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003860:	fa93 f3a3 	rbit	r3, r3
 8003864:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8003866:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003868:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 800386a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800386c:	2b00      	cmp	r3, #0
 800386e:	d101      	bne.n	8003874 <HAL_ADC_ConfigChannel+0x460>
    return 32U;
 8003870:	2320      	movs	r3, #32
 8003872:	e003      	b.n	800387c <HAL_ADC_ConfigChannel+0x468>
  return __builtin_clz(value);
 8003874:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003876:	fab3 f383 	clz	r3, r3
 800387a:	b2db      	uxtb	r3, r3
 800387c:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003886:	2b00      	cmp	r3, #0
 8003888:	d105      	bne.n	8003896 <HAL_ADC_ConfigChannel+0x482>
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	0e9b      	lsrs	r3, r3, #26
 8003890:	f003 031f 	and.w	r3, r3, #31
 8003894:	e011      	b.n	80038ba <HAL_ADC_ConfigChannel+0x4a6>
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800389c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800389e:	fa93 f3a3 	rbit	r3, r3
 80038a2:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80038a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038a6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80038a8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d101      	bne.n	80038b2 <HAL_ADC_ConfigChannel+0x49e>
    return 32U;
 80038ae:	2320      	movs	r3, #32
 80038b0:	e003      	b.n	80038ba <HAL_ADC_ConfigChannel+0x4a6>
  return __builtin_clz(value);
 80038b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80038b4:	fab3 f383 	clz	r3, r3
 80038b8:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80038ba:	429a      	cmp	r2, r3
 80038bc:	d107      	bne.n	80038ce <HAL_ADC_ConfigChannel+0x4ba>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_4, pConfig->Channel, 0x0);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6818      	ldr	r0, [r3, #0]
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	681a      	ldr	r2, [r3, #0]
 80038c6:	2300      	movs	r3, #0
 80038c8:	2103      	movs	r1, #3
 80038ca:	f7ff f81f 	bl	800290c <LL_ADC_SetOffset>

      /* Parameters update conditioned to ADC state:                              */
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Single or differential mode                                           */
      /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4618      	mov	r0, r3
 80038d4:	f7ff fa7c 	bl	8002dd0 <LL_ADC_IsEnabled>
 80038d8:	4603      	mov	r3, r0
 80038da:	2b00      	cmp	r3, #0
 80038dc:	f040 83ad 	bne.w	800403a <HAL_ADC_ConfigChannel+0xc26>
      {
        /* Set mode single-ended or differential input of the selected ADC channel */
        LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6818      	ldr	r0, [r3, #0]
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	6819      	ldr	r1, [r3, #0]
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	68db      	ldr	r3, [r3, #12]
 80038ec:	461a      	mov	r2, r3
 80038ee:	f7ff f9fd 	bl	8002cec <LL_ADC_SetChannelSingleDiff>

        /* Configuration of differential mode */
        if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	68db      	ldr	r3, [r3, #12]
 80038f6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80038fa:	f040 80d6 	bne.w	8003aaa <HAL_ADC_ConfigChannel+0x696>
        {
          /* Set sampling time of the selected ADC channel */
          /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
          tmp_channel = __LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel) \
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003906:	2b00      	cmp	r3, #0
 8003908:	d10b      	bne.n	8003922 <HAL_ADC_ConfigChannel+0x50e>
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	0e9b      	lsrs	r3, r3, #26
 8003910:	3301      	adds	r3, #1
 8003912:	f003 031f 	and.w	r3, r3, #31
 8003916:	2b09      	cmp	r3, #9
 8003918:	bf94      	ite	ls
 800391a:	2301      	movls	r3, #1
 800391c:	2300      	movhi	r3, #0
 800391e:	b2db      	uxtb	r3, r3
 8003920:	e019      	b.n	8003956 <HAL_ADC_ConfigChannel+0x542>
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003928:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800392a:	fa93 f3a3 	rbit	r3, r3
 800392e:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8003930:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003932:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8003934:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003936:	2b00      	cmp	r3, #0
 8003938:	d101      	bne.n	800393e <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 800393a:	2320      	movs	r3, #32
 800393c:	e003      	b.n	8003946 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 800393e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003940:	fab3 f383 	clz	r3, r3
 8003944:	b2db      	uxtb	r3, r3
 8003946:	3301      	adds	r3, #1
 8003948:	f003 031f 	and.w	r3, r3, #31
 800394c:	2b09      	cmp	r3, #9
 800394e:	bf94      	ite	ls
 8003950:	2301      	movls	r3, #1
 8003952:	2300      	movhi	r3, #0
 8003954:	b2db      	uxtb	r3, r3
 8003956:	2b00      	cmp	r3, #0
 8003958:	d04d      	beq.n	80039f6 <HAL_ADC_ConfigChannel+0x5e2>
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003962:	2b00      	cmp	r3, #0
 8003964:	d107      	bne.n	8003976 <HAL_ADC_ConfigChannel+0x562>
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	0e9b      	lsrs	r3, r3, #26
 800396c:	3301      	adds	r3, #1
 800396e:	069b      	lsls	r3, r3, #26
 8003970:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003974:	e015      	b.n	80039a2 <HAL_ADC_ConfigChannel+0x58e>
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800397c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800397e:	fa93 f3a3 	rbit	r3, r3
 8003982:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8003984:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003986:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8003988:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800398a:	2b00      	cmp	r3, #0
 800398c:	d101      	bne.n	8003992 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 800398e:	2320      	movs	r3, #32
 8003990:	e003      	b.n	800399a <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8003992:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003994:	fab3 f383 	clz	r3, r3
 8003998:	b2db      	uxtb	r3, r3
 800399a:	3301      	adds	r3, #1
 800399c:	069b      	lsls	r3, r3, #26
 800399e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d109      	bne.n	80039c2 <HAL_ADC_ConfigChannel+0x5ae>
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	0e9b      	lsrs	r3, r3, #26
 80039b4:	3301      	adds	r3, #1
 80039b6:	f003 031f 	and.w	r3, r3, #31
 80039ba:	2101      	movs	r1, #1
 80039bc:	fa01 f303 	lsl.w	r3, r1, r3
 80039c0:	e017      	b.n	80039f2 <HAL_ADC_ConfigChannel+0x5de>
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039ca:	fa93 f3a3 	rbit	r3, r3
 80039ce:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80039d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039d2:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80039d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d101      	bne.n	80039de <HAL_ADC_ConfigChannel+0x5ca>
    return 32U;
 80039da:	2320      	movs	r3, #32
 80039dc:	e003      	b.n	80039e6 <HAL_ADC_ConfigChannel+0x5d2>
  return __builtin_clz(value);
 80039de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039e0:	fab3 f383 	clz	r3, r3
 80039e4:	b2db      	uxtb	r3, r3
 80039e6:	3301      	adds	r3, #1
 80039e8:	f003 031f 	and.w	r3, r3, #31
 80039ec:	2101      	movs	r1, #1
 80039ee:	fa01 f303 	lsl.w	r3, r1, r3
 80039f2:	4313      	orrs	r3, r2
 80039f4:	e04e      	b.n	8003a94 <HAL_ADC_ConfigChannel+0x680>
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d107      	bne.n	8003a12 <HAL_ADC_ConfigChannel+0x5fe>
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	0e9b      	lsrs	r3, r3, #26
 8003a08:	3301      	adds	r3, #1
 8003a0a:	069b      	lsls	r3, r3, #26
 8003a0c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003a10:	e015      	b.n	8003a3e <HAL_ADC_ConfigChannel+0x62a>
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a1a:	fa93 f3a3 	rbit	r3, r3
 8003a1e:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8003a20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8003a24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d101      	bne.n	8003a2e <HAL_ADC_ConfigChannel+0x61a>
    return 32U;
 8003a2a:	2320      	movs	r3, #32
 8003a2c:	e003      	b.n	8003a36 <HAL_ADC_ConfigChannel+0x622>
  return __builtin_clz(value);
 8003a2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a30:	fab3 f383 	clz	r3, r3
 8003a34:	b2db      	uxtb	r3, r3
 8003a36:	3301      	adds	r3, #1
 8003a38:	069b      	lsls	r3, r3, #26
 8003a3a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d109      	bne.n	8003a5e <HAL_ADC_ConfigChannel+0x64a>
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	0e9b      	lsrs	r3, r3, #26
 8003a50:	3301      	adds	r3, #1
 8003a52:	f003 031f 	and.w	r3, r3, #31
 8003a56:	2101      	movs	r1, #1
 8003a58:	fa01 f303 	lsl.w	r3, r1, r3
 8003a5c:	e017      	b.n	8003a8e <HAL_ADC_ConfigChannel+0x67a>
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	61fb      	str	r3, [r7, #28]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a64:	69fb      	ldr	r3, [r7, #28]
 8003a66:	fa93 f3a3 	rbit	r3, r3
 8003a6a:	61bb      	str	r3, [r7, #24]
  return result;
 8003a6c:	69bb      	ldr	r3, [r7, #24]
 8003a6e:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003a70:	6a3b      	ldr	r3, [r7, #32]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d101      	bne.n	8003a7a <HAL_ADC_ConfigChannel+0x666>
    return 32U;
 8003a76:	2320      	movs	r3, #32
 8003a78:	e003      	b.n	8003a82 <HAL_ADC_ConfigChannel+0x66e>
  return __builtin_clz(value);
 8003a7a:	6a3b      	ldr	r3, [r7, #32]
 8003a7c:	fab3 f383 	clz	r3, r3
 8003a80:	b2db      	uxtb	r3, r3
 8003a82:	3301      	adds	r3, #1
 8003a84:	f003 031f 	and.w	r3, r3, #31
 8003a88:	2101      	movs	r1, #1
 8003a8a:	fa01 f303 	lsl.w	r3, r1, r3
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003a94:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
                                                        + 1UL) & 0x1FUL);
          LL_ADC_SetChannelSamplingTime(hadc->Instance, tmp_channel, pConfig->SamplingTime);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6818      	ldr	r0, [r3, #0]
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	689b      	ldr	r3, [r3, #8]
 8003aa0:	461a      	mov	r2, r3
 8003aa2:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8003aa6:	f7ff f8bd 	bl	8002c24 <LL_ADC_SetChannelSamplingTime>
        /* If internal channel selected, enable dedicated internal buffers and    */
        /* paths.                                                                 */
        /* Note: these internal measurement paths can be disabled using           */
        /* HAL_ADC_DeInit().                                                      */

        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	f280 82c3 	bge.w	800403a <HAL_ADC_ConfigChannel+0xc26>
        {
          /* Configuration of common ADC parameters                                 */

          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a92      	ldr	r2, [pc, #584]	@ (8003d04 <HAL_ADC_ConfigChannel+0x8f0>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d004      	beq.n	8003ac8 <HAL_ADC_ConfigChannel+0x6b4>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a91      	ldr	r2, [pc, #580]	@ (8003d08 <HAL_ADC_ConfigChannel+0x8f4>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d101      	bne.n	8003acc <HAL_ADC_ConfigChannel+0x6b8>
 8003ac8:	4b90      	ldr	r3, [pc, #576]	@ (8003d0c <HAL_ADC_ConfigChannel+0x8f8>)
 8003aca:	e000      	b.n	8003ace <HAL_ADC_ConfigChannel+0x6ba>
 8003acc:	4b90      	ldr	r3, [pc, #576]	@ (8003d10 <HAL_ADC_ConfigChannel+0x8fc>)
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f7fe feee 	bl	80028b0 <LL_ADC_GetCommonPathInternalCh>
 8003ad4:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

          /* Software is allowed to change common parameters only when all ADCs   */
          /* of the common group are disabled.                                    */
          if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a89      	ldr	r2, [pc, #548]	@ (8003d04 <HAL_ADC_ConfigChannel+0x8f0>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d004      	beq.n	8003aec <HAL_ADC_ConfigChannel+0x6d8>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a88      	ldr	r2, [pc, #544]	@ (8003d08 <HAL_ADC_ConfigChannel+0x8f4>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d10e      	bne.n	8003b0a <HAL_ADC_ConfigChannel+0x6f6>
 8003aec:	4885      	ldr	r0, [pc, #532]	@ (8003d04 <HAL_ADC_ConfigChannel+0x8f0>)
 8003aee:	f7ff f96f 	bl	8002dd0 <LL_ADC_IsEnabled>
 8003af2:	4604      	mov	r4, r0
 8003af4:	4884      	ldr	r0, [pc, #528]	@ (8003d08 <HAL_ADC_ConfigChannel+0x8f4>)
 8003af6:	f7ff f96b 	bl	8002dd0 <LL_ADC_IsEnabled>
 8003afa:	4603      	mov	r3, r0
 8003afc:	4323      	orrs	r3, r4
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	bf0c      	ite	eq
 8003b02:	2301      	moveq	r3, #1
 8003b04:	2300      	movne	r3, #0
 8003b06:	b2db      	uxtb	r3, r3
 8003b08:	e008      	b.n	8003b1c <HAL_ADC_ConfigChannel+0x708>
 8003b0a:	4882      	ldr	r0, [pc, #520]	@ (8003d14 <HAL_ADC_ConfigChannel+0x900>)
 8003b0c:	f7ff f960 	bl	8002dd0 <LL_ADC_IsEnabled>
 8003b10:	4603      	mov	r3, r0
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	bf0c      	ite	eq
 8003b16:	2301      	moveq	r3, #1
 8003b18:	2300      	movne	r3, #0
 8003b1a:	b2db      	uxtb	r3, r3
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	f000 80a6 	beq.w	8003c6e <HAL_ADC_ConfigChannel+0x85a>
          {
            /* If the requested internal measurement path has already been enabled, */
            /* bypass the configuration processing.                                 */
            if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a7c      	ldr	r2, [pc, #496]	@ (8003d18 <HAL_ADC_ConfigChannel+0x904>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d13c      	bne.n	8003ba6 <HAL_ADC_ConfigChannel+0x792>
                && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003b2c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003b30:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d136      	bne.n	8003ba6 <HAL_ADC_ConfigChannel+0x792>
            {
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a71      	ldr	r2, [pc, #452]	@ (8003d04 <HAL_ADC_ConfigChannel+0x8f0>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d00a      	beq.n	8003b58 <HAL_ADC_ConfigChannel+0x744>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a70      	ldr	r2, [pc, #448]	@ (8003d08 <HAL_ADC_ConfigChannel+0x8f4>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d005      	beq.n	8003b58 <HAL_ADC_ConfigChannel+0x744>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a70      	ldr	r2, [pc, #448]	@ (8003d14 <HAL_ADC_ConfigChannel+0x900>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	f040 826e 	bne.w	8004034 <HAL_ADC_ConfigChannel+0xc20>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a69      	ldr	r2, [pc, #420]	@ (8003d04 <HAL_ADC_ConfigChannel+0x8f0>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d004      	beq.n	8003b6c <HAL_ADC_ConfigChannel+0x758>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a68      	ldr	r2, [pc, #416]	@ (8003d08 <HAL_ADC_ConfigChannel+0x8f4>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d101      	bne.n	8003b70 <HAL_ADC_ConfigChannel+0x75c>
 8003b6c:	4a67      	ldr	r2, [pc, #412]	@ (8003d0c <HAL_ADC_ConfigChannel+0x8f8>)
 8003b6e:	e000      	b.n	8003b72 <HAL_ADC_ConfigChannel+0x75e>
 8003b70:	4a67      	ldr	r2, [pc, #412]	@ (8003d10 <HAL_ADC_ConfigChannel+0x8fc>)
 8003b72:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003b76:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003b7a:	4619      	mov	r1, r3
 8003b7c:	4610      	mov	r0, r2
 8003b7e:	f7fe fe84 	bl	800288a <LL_ADC_SetCommonPathInternalCh>
                /* Wait loop initialization and execution */
                /* Note: Variable divided by 2 to compensate partially              */
                /*       CPU processing cycles, scaling in us split to not          */
                /*       exceed 32 bits register capacity and handle low frequency. */
                wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)                                       \
                                   * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003b82:	4b66      	ldr	r3, [pc, #408]	@ (8003d1c <HAL_ADC_ConfigChannel+0x908>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	099b      	lsrs	r3, r3, #6
 8003b88:	4a65      	ldr	r2, [pc, #404]	@ (8003d20 <HAL_ADC_ConfigChannel+0x90c>)
 8003b8a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b8e:	099b      	lsrs	r3, r3, #6
 8003b90:	3301      	adds	r3, #1
 8003b92:	005b      	lsls	r3, r3, #1
                wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)                                       \
 8003b94:	60bb      	str	r3, [r7, #8]
                while (wait_loop_index != 0UL)
 8003b96:	e002      	b.n	8003b9e <HAL_ADC_ConfigChannel+0x78a>
                {
                  wait_loop_index--;
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	3b01      	subs	r3, #1
 8003b9c:	60bb      	str	r3, [r7, #8]
                while (wait_loop_index != 0UL)
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d1f9      	bne.n	8003b98 <HAL_ADC_ConfigChannel+0x784>
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003ba4:	e246      	b.n	8004034 <HAL_ADC_ConfigChannel+0xc20>
                }
              }
            }
            else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel                          \
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a5e      	ldr	r2, [pc, #376]	@ (8003d24 <HAL_ADC_ConfigChannel+0x910>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d12b      	bne.n	8003c08 <HAL_ADC_ConfigChannel+0x7f4>
                                                                 & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003bb0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003bb4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
            else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel                          \
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d125      	bne.n	8003c08 <HAL_ADC_ConfigChannel+0x7f4>
            {
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a50      	ldr	r2, [pc, #320]	@ (8003d04 <HAL_ADC_ConfigChannel+0x8f0>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d00a      	beq.n	8003bdc <HAL_ADC_ConfigChannel+0x7c8>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a4f      	ldr	r2, [pc, #316]	@ (8003d08 <HAL_ADC_ConfigChannel+0x8f4>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d005      	beq.n	8003bdc <HAL_ADC_ConfigChannel+0x7c8>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a4f      	ldr	r2, [pc, #316]	@ (8003d14 <HAL_ADC_ConfigChannel+0x900>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	f040 822e 	bne.w	8004038 <HAL_ADC_ConfigChannel+0xc24>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a48      	ldr	r2, [pc, #288]	@ (8003d04 <HAL_ADC_ConfigChannel+0x8f0>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d004      	beq.n	8003bf0 <HAL_ADC_ConfigChannel+0x7dc>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a47      	ldr	r2, [pc, #284]	@ (8003d08 <HAL_ADC_ConfigChannel+0x8f4>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d101      	bne.n	8003bf4 <HAL_ADC_ConfigChannel+0x7e0>
 8003bf0:	4a46      	ldr	r2, [pc, #280]	@ (8003d0c <HAL_ADC_ConfigChannel+0x8f8>)
 8003bf2:	e000      	b.n	8003bf6 <HAL_ADC_ConfigChannel+0x7e2>
 8003bf4:	4a46      	ldr	r2, [pc, #280]	@ (8003d10 <HAL_ADC_ConfigChannel+0x8fc>)
 8003bf6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003bfa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003bfe:	4619      	mov	r1, r3
 8003c00:	4610      	mov	r0, r2
 8003c02:	f7fe fe42 	bl	800288a <LL_ADC_SetCommonPathInternalCh>
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003c06:	e217      	b.n	8004038 <HAL_ADC_ConfigChannel+0xc24>
                                               LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
              }
            }
            else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a46      	ldr	r2, [pc, #280]	@ (8003d28 <HAL_ADC_ConfigChannel+0x914>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	f040 8213 	bne.w	800403a <HAL_ADC_ConfigChannel+0xc26>
                     && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003c14:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003c18:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	f040 820c 	bne.w	800403a <HAL_ADC_ConfigChannel+0xc26>
            {
              if (ADC_VREFINT_INSTANCE(hadc))
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a37      	ldr	r2, [pc, #220]	@ (8003d04 <HAL_ADC_ConfigChannel+0x8f0>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d00a      	beq.n	8003c42 <HAL_ADC_ConfigChannel+0x82e>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a35      	ldr	r2, [pc, #212]	@ (8003d08 <HAL_ADC_ConfigChannel+0x8f4>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d005      	beq.n	8003c42 <HAL_ADC_ConfigChannel+0x82e>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a36      	ldr	r2, [pc, #216]	@ (8003d14 <HAL_ADC_ConfigChannel+0x900>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	f040 81fc 	bne.w	800403a <HAL_ADC_ConfigChannel+0xc26>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a2f      	ldr	r2, [pc, #188]	@ (8003d04 <HAL_ADC_ConfigChannel+0x8f0>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d004      	beq.n	8003c56 <HAL_ADC_ConfigChannel+0x842>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a2d      	ldr	r2, [pc, #180]	@ (8003d08 <HAL_ADC_ConfigChannel+0x8f4>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d101      	bne.n	8003c5a <HAL_ADC_ConfigChannel+0x846>
 8003c56:	4a2d      	ldr	r2, [pc, #180]	@ (8003d0c <HAL_ADC_ConfigChannel+0x8f8>)
 8003c58:	e000      	b.n	8003c5c <HAL_ADC_ConfigChannel+0x848>
 8003c5a:	4a2d      	ldr	r2, [pc, #180]	@ (8003d10 <HAL_ADC_ConfigChannel+0x8fc>)
 8003c5c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003c60:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003c64:	4619      	mov	r1, r3
 8003c66:	4610      	mov	r0, r2
 8003c68:	f7fe fe0f 	bl	800288a <LL_ADC_SetCommonPathInternalCh>
 8003c6c:	e1e5      	b.n	800403a <HAL_ADC_ConfigChannel+0xc26>
          /* enabled and other ADC of the common group are enabled, internal      */
          /* measurement paths cannot be enabled.                                 */
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003c72:	f043 0220 	orr.w	r2, r3, #32
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	679a      	str	r2, [r3, #120]	@ 0x78

            tmp_hal_status = HAL_ERROR;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8003c80:	e1db      	b.n	800403a <HAL_ADC_ConfigChannel+0xc26>
        }
      }
    }
    else
    {
      tmp_channel = pConfig->Channel;
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
      /* If sequencer set to not fully configurable with channel rank set to    */
      /* none, remove the channel from the sequencer.                           */
      /* Otherwise (sequencer set to fully configurable or to to not fully      */
      /* configurable with channel rank to be set), configure the selected      */
      /* channel.                                                               */
      if (pConfig->Rank != ADC4_RANK_NONE)
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	2b02      	cmp	r3, #2
 8003c90:	f000 811b 	beq.w	8003eca <HAL_ADC_ConfigChannel+0xab6>
        /* Note: ADC channel configuration requires few ADC clock cycles        */
        /*       to be ready. Processing of ADC settings in this function       */
        /*       induce that a specific wait time is not necessary.             */
        /*       For more details on ADC channel configuration ready,           */
        /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	691b      	ldr	r3, [r3, #16]
 8003c98:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003c9c:	d004      	beq.n	8003ca8 <HAL_ADC_ConfigChannel+0x894>
            (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	691b      	ldr	r3, [r3, #16]
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8003ca2:	4a22      	ldr	r2, [pc, #136]	@ (8003d2c <HAL_ADC_ConfigChannel+0x918>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d107      	bne.n	8003cb8 <HAL_ADC_ConfigChannel+0x8a4>
        {
          /* Sequencer set to not fully configurable:                           */
          /* Set the channel by enabling the corresponding bitfield.            */
          LL_ADC_REG_SetSequencerChAdd(hadc->Instance, tmp_channel);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	f7fe ff6b 	bl	8002b8c <LL_ADC_REG_SetSequencerChAdd>
 8003cb6:	e059      	b.n	8003d6c <HAL_ADC_ConfigChannel+0x958>
        {
          /* Sequencer set to fully configurable:                               */
          /* Set the channel by entering it into the selected rank.             */

          /* Memorize the channel set into variable in HAL ADC handle */
          MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	f003 031f 	and.w	r3, r3, #31
 8003cc6:	210f      	movs	r1, #15
 8003cc8:	fa01 f303 	lsl.w	r3, r1, r3
 8003ccc:	43db      	mvns	r3, r3
 8003cce:	401a      	ands	r2, r3
 8003cd0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003cd4:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d105      	bne.n	8003ce8 <HAL_ADC_ConfigChannel+0x8d4>
 8003cdc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003ce0:	0e9b      	lsrs	r3, r3, #26
 8003ce2:	f003 031f 	and.w	r3, r3, #31
 8003ce6:	e027      	b.n	8003d38 <HAL_ADC_ConfigChannel+0x924>
 8003ce8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003cec:	613b      	str	r3, [r7, #16]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	fa93 f3a3 	rbit	r3, r3
 8003cf4:	60fb      	str	r3, [r7, #12]
  return result;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d117      	bne.n	8003d30 <HAL_ADC_ConfigChannel+0x91c>
    return 32U;
 8003d00:	2320      	movs	r3, #32
 8003d02:	e019      	b.n	8003d38 <HAL_ADC_ConfigChannel+0x924>
 8003d04:	42028000 	.word	0x42028000
 8003d08:	42028100 	.word	0x42028100
 8003d0c:	42028300 	.word	0x42028300
 8003d10:	46021300 	.word	0x46021300
 8003d14:	46021000 	.word	0x46021000
 8003d18:	ce080000 	.word	0xce080000
 8003d1c:	20000000 	.word	0x20000000
 8003d20:	053e2d63 	.word	0x053e2d63
 8003d24:	ca040000 	.word	0xca040000
 8003d28:	80000001 	.word	0x80000001
 8003d2c:	80000010 	.word	0x80000010
  return __builtin_clz(value);
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	fab3 f383 	clz	r3, r3
 8003d36:	b2db      	uxtb	r3, r3
 8003d38:	6839      	ldr	r1, [r7, #0]
 8003d3a:	6849      	ldr	r1, [r1, #4]
 8003d3c:	f001 011f 	and.w	r1, r1, #31
 8003d40:	408b      	lsls	r3, r1
 8003d42:	431a      	orrs	r2, r3
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

          /* If the selected rank is below ADC group regular sequencer length,  */
          /* apply the configuration in ADC register.                           */
          /* Note: Otherwise, configuration is not applied.                     */
          /*       To apply it, parameter'NbrOfConversion' must be increased.   */
          if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	089b      	lsrs	r3, r3, #2
 8003d50:	1c5a      	adds	r2, r3, #1
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d56:	429a      	cmp	r2, r3
 8003d58:	d808      	bhi.n	8003d6c <HAL_ADC_ConfigChannel+0x958>
              {
                tmp_channel = (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(tmp_channel) - 9UL));
              }
            }
#endif /* ADC2 */
            LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, tmp_channel);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6818      	ldr	r0, [r3, #0]
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003d66:	4619      	mov	r1, r3
 8003d68:	f7fe feb0 	bl	8002acc <LL_ADC_REG_SetSequencerRanks>
          }
        }

        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, tmp_channel, pConfig->SamplingTime);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6818      	ldr	r0, [r3, #0]
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	689b      	ldr	r3, [r3, #8]
 8003d74:	461a      	mov	r2, r3
 8003d76:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8003d7a:	f7fe ff53 	bl	8002c24 <LL_ADC_SetChannelSamplingTime>
        /* internal measurement paths enable: If internal channel selected,     */
        /* enable dedicated internal buffers and path.                          */
        /* Note: these internal measurement paths can be disabled using         */
        /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
        /*       channel configuration parameter "Rank".                        */
        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	f280 8159 	bge.w	800403a <HAL_ADC_ConfigChannel+0xc26>
        {
          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a9b      	ldr	r2, [pc, #620]	@ (8003ffc <HAL_ADC_ConfigChannel+0xbe8>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d004      	beq.n	8003d9c <HAL_ADC_ConfigChannel+0x988>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a9a      	ldr	r2, [pc, #616]	@ (8004000 <HAL_ADC_ConfigChannel+0xbec>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d101      	bne.n	8003da0 <HAL_ADC_ConfigChannel+0x98c>
 8003d9c:	4b99      	ldr	r3, [pc, #612]	@ (8004004 <HAL_ADC_ConfigChannel+0xbf0>)
 8003d9e:	e000      	b.n	8003da2 <HAL_ADC_ConfigChannel+0x98e>
 8003da0:	4b99      	ldr	r3, [pc, #612]	@ (8004008 <HAL_ADC_ConfigChannel+0xbf4>)
 8003da2:	4618      	mov	r0, r3
 8003da4:	f7fe fd84 	bl	80028b0 <LL_ADC_GetCommonPathInternalCh>
 8003da8:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

          /* If the requested internal measurement path has already been enabled,   */
          /* bypass the configuration processing.                                   */
          if ((pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)                                                           \
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a96      	ldr	r2, [pc, #600]	@ (800400c <HAL_ADC_ConfigChannel+0xbf8>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d12b      	bne.n	8003e0e <HAL_ADC_ConfigChannel+0x9fa>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003db6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003dba:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d125      	bne.n	8003e0e <HAL_ADC_ConfigChannel+0x9fa>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a8d      	ldr	r2, [pc, #564]	@ (8003ffc <HAL_ADC_ConfigChannel+0xbe8>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d004      	beq.n	8003dd6 <HAL_ADC_ConfigChannel+0x9c2>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a8b      	ldr	r2, [pc, #556]	@ (8004000 <HAL_ADC_ConfigChannel+0xbec>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d101      	bne.n	8003dda <HAL_ADC_ConfigChannel+0x9c6>
 8003dd6:	4a8b      	ldr	r2, [pc, #556]	@ (8004004 <HAL_ADC_ConfigChannel+0xbf0>)
 8003dd8:	e000      	b.n	8003ddc <HAL_ADC_ConfigChannel+0x9c8>
 8003dda:	4a8b      	ldr	r2, [pc, #556]	@ (8004008 <HAL_ADC_ConfigChannel+0xbf4>)
 8003ddc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003de0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003de4:	4619      	mov	r1, r3
 8003de6:	4610      	mov	r0, r2
 8003de8:	f7fe fd4f 	bl	800288a <LL_ADC_SetCommonPathInternalCh>
            /* Delay for temperature sensor stabilization time */
            /* Wait loop initialization and execution */
            /* Note: Variable divided by 2 to compensate partially              */
            /*       CPU processing cycles, scaling in us split to not          */
            /*       exceed 32 bits register capacity and handle low frequency. */
            wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8003dec:	4b88      	ldr	r3, [pc, #544]	@ (8004010 <HAL_ADC_ConfigChannel+0xbfc>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	099b      	lsrs	r3, r3, #6
 8003df2:	4a88      	ldr	r2, [pc, #544]	@ (8004014 <HAL_ADC_ConfigChannel+0xc00>)
 8003df4:	fba2 2303 	umull	r2, r3, r2, r3
 8003df8:	099b      	lsrs	r3, r3, #6
 8003dfa:	005b      	lsls	r3, r3, #1
 8003dfc:	60bb      	str	r3, [r7, #8]
            while (wait_loop_index != 0UL)
 8003dfe:	e002      	b.n	8003e06 <HAL_ADC_ConfigChannel+0x9f2>
            {
              wait_loop_index--;
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	3b01      	subs	r3, #1
 8003e04:	60bb      	str	r3, [r7, #8]
            while (wait_loop_index != 0UL)
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d1f9      	bne.n	8003e00 <HAL_ADC_ConfigChannel+0x9ec>
          if ((pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)                                                           \
 8003e0c:	e045      	b.n	8003e9a <HAL_ADC_ConfigChannel+0xa86>
            }
          }
          else if ((pConfig->Channel == ADC4_CHANNEL_VBAT) && ((tmp_config_internal_channel                           \
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4a81      	ldr	r2, [pc, #516]	@ (8004018 <HAL_ADC_ConfigChannel+0xc04>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d11b      	bne.n	8003e50 <HAL_ADC_ConfigChannel+0xa3c>
                                                                & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003e18:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003e1c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
          else if ((pConfig->Channel == ADC4_CHANNEL_VBAT) && ((tmp_config_internal_channel                           \
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d115      	bne.n	8003e50 <HAL_ADC_ConfigChannel+0xa3c>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a74      	ldr	r2, [pc, #464]	@ (8003ffc <HAL_ADC_ConfigChannel+0xbe8>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d004      	beq.n	8003e38 <HAL_ADC_ConfigChannel+0xa24>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a73      	ldr	r2, [pc, #460]	@ (8004000 <HAL_ADC_ConfigChannel+0xbec>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d101      	bne.n	8003e3c <HAL_ADC_ConfigChannel+0xa28>
 8003e38:	4a72      	ldr	r2, [pc, #456]	@ (8004004 <HAL_ADC_ConfigChannel+0xbf0>)
 8003e3a:	e000      	b.n	8003e3e <HAL_ADC_ConfigChannel+0xa2a>
 8003e3c:	4a72      	ldr	r2, [pc, #456]	@ (8004008 <HAL_ADC_ConfigChannel+0xbf4>)
 8003e3e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003e42:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003e46:	4619      	mov	r1, r3
 8003e48:	4610      	mov	r0, r2
 8003e4a:	f7fe fd1e 	bl	800288a <LL_ADC_SetCommonPathInternalCh>
 8003e4e:	e024      	b.n	8003e9a <HAL_ADC_ConfigChannel+0xa86>
                                           LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)                                                          \
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a71      	ldr	r2, [pc, #452]	@ (800401c <HAL_ADC_ConfigChannel+0xc08>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d11f      	bne.n	8003e9a <HAL_ADC_ConfigChannel+0xa86>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003e5a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003e5e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d115      	bne.n	8003e92 <HAL_ADC_ConfigChannel+0xa7e>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a64      	ldr	r2, [pc, #400]	@ (8003ffc <HAL_ADC_ConfigChannel+0xbe8>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d004      	beq.n	8003e7a <HAL_ADC_ConfigChannel+0xa66>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a62      	ldr	r2, [pc, #392]	@ (8004000 <HAL_ADC_ConfigChannel+0xbec>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d101      	bne.n	8003e7e <HAL_ADC_ConfigChannel+0xa6a>
 8003e7a:	4a62      	ldr	r2, [pc, #392]	@ (8004004 <HAL_ADC_ConfigChannel+0xbf0>)
 8003e7c:	e000      	b.n	8003e80 <HAL_ADC_ConfigChannel+0xa6c>
 8003e7e:	4a62      	ldr	r2, [pc, #392]	@ (8004008 <HAL_ADC_ConfigChannel+0xbf4>)
 8003e80:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003e84:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003e88:	4619      	mov	r1, r3
 8003e8a:	4610      	mov	r0, r2
 8003e8c:	f7fe fcfd 	bl	800288a <LL_ADC_SetCommonPathInternalCh>
 8003e90:	e003      	b.n	8003e9a <HAL_ADC_ConfigChannel+0xa86>
                                           LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VCORE)                                                            \
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a62      	ldr	r2, [pc, #392]	@ (8004020 <HAL_ADC_ConfigChannel+0xc0c>)
 8003e98:	4293      	cmp	r3, r2
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
            }
          }
#else
          if ((pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)                                                        \
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a61      	ldr	r2, [pc, #388]	@ (8004024 <HAL_ADC_ConfigChannel+0xc10>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	f040 80ca 	bne.w	800403a <HAL_ADC_ConfigChannel+0xc26>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003ea6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003eaa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	f040 80c3 	bne.w	800403a <HAL_ADC_ConfigChannel+0xc26>
          {
            SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f042 0201 	orr.w	r2, r2, #1
 8003ec4:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
 8003ec8:	e0b7      	b.n	800403a <HAL_ADC_ConfigChannel+0xc26>
        /* Regular sequencer configuration */
        /* Note: Case of sequencer set to fully configurable:                   */
        /*       Sequencer rank cannot be disabled, only affected to            */
        /*       another channel.                                               */
        /*       To remove a rank, use parameter 'NbrOfConversion".             */
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	691b      	ldr	r3, [r3, #16]
 8003ece:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003ed2:	d004      	beq.n	8003ede <HAL_ADC_ConfigChannel+0xaca>
            (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	691b      	ldr	r3, [r3, #16]
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8003ed8:	4a53      	ldr	r2, [pc, #332]	@ (8004028 <HAL_ADC_ConfigChannel+0xc14>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d106      	bne.n	8003eec <HAL_ADC_ConfigChannel+0xad8>
        {
          /* Sequencer set to not fully configurable:                           */
          /* Reset the channel by disabling the corresponding bitfield.         */
          LL_ADC_REG_SetSequencerChRem(hadc->Instance, tmp_channel);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f7fe fe83 	bl	8002bf2 <LL_ADC_REG_SetSequencerChRem>
        }

        /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
        /* If internal channel selected, enable dedicated internal buffers and    */
        /* paths.                                                                 */
        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	f280 80a2 	bge.w	800403a <HAL_ADC_ConfigChannel+0xc26>
        {
          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a40      	ldr	r2, [pc, #256]	@ (8003ffc <HAL_ADC_ConfigChannel+0xbe8>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d004      	beq.n	8003f0a <HAL_ADC_ConfigChannel+0xaf6>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a3e      	ldr	r2, [pc, #248]	@ (8004000 <HAL_ADC_ConfigChannel+0xbec>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d101      	bne.n	8003f0e <HAL_ADC_ConfigChannel+0xafa>
 8003f0a:	4b3e      	ldr	r3, [pc, #248]	@ (8004004 <HAL_ADC_ConfigChannel+0xbf0>)
 8003f0c:	e000      	b.n	8003f10 <HAL_ADC_ConfigChannel+0xafc>
 8003f0e:	4b3e      	ldr	r3, [pc, #248]	@ (8004008 <HAL_ADC_ConfigChannel+0xbf4>)
 8003f10:	4618      	mov	r0, r3
 8003f12:	f7fe fccd 	bl	80028b0 <LL_ADC_GetCommonPathInternalCh>
 8003f16:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

          if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a43      	ldr	r2, [pc, #268]	@ (800402c <HAL_ADC_ConfigChannel+0xc18>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d115      	bne.n	8003f50 <HAL_ADC_ConfigChannel+0xb3c>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a34      	ldr	r2, [pc, #208]	@ (8003ffc <HAL_ADC_ConfigChannel+0xbe8>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d004      	beq.n	8003f38 <HAL_ADC_ConfigChannel+0xb24>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a33      	ldr	r2, [pc, #204]	@ (8004000 <HAL_ADC_ConfigChannel+0xbec>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d101      	bne.n	8003f3c <HAL_ADC_ConfigChannel+0xb28>
 8003f38:	4a32      	ldr	r2, [pc, #200]	@ (8004004 <HAL_ADC_ConfigChannel+0xbf0>)
 8003f3a:	e000      	b.n	8003f3e <HAL_ADC_ConfigChannel+0xb2a>
 8003f3c:	4a32      	ldr	r2, [pc, #200]	@ (8004008 <HAL_ADC_ConfigChannel+0xbf4>)
 8003f3e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003f42:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003f46:	4619      	mov	r1, r3
 8003f48:	4610      	mov	r0, r2
 8003f4a:	f7fe fc9e 	bl	800288a <LL_ADC_SetCommonPathInternalCh>
 8003f4e:	e034      	b.n	8003fba <HAL_ADC_ConfigChannel+0xba6>
                                           ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a36      	ldr	r2, [pc, #216]	@ (8004030 <HAL_ADC_ConfigChannel+0xc1c>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d115      	bne.n	8003f86 <HAL_ADC_ConfigChannel+0xb72>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a27      	ldr	r2, [pc, #156]	@ (8003ffc <HAL_ADC_ConfigChannel+0xbe8>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d004      	beq.n	8003f6e <HAL_ADC_ConfigChannel+0xb5a>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a25      	ldr	r2, [pc, #148]	@ (8004000 <HAL_ADC_ConfigChannel+0xbec>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d101      	bne.n	8003f72 <HAL_ADC_ConfigChannel+0xb5e>
 8003f6e:	4a25      	ldr	r2, [pc, #148]	@ (8004004 <HAL_ADC_ConfigChannel+0xbf0>)
 8003f70:	e000      	b.n	8003f74 <HAL_ADC_ConfigChannel+0xb60>
 8003f72:	4a25      	ldr	r2, [pc, #148]	@ (8004008 <HAL_ADC_ConfigChannel+0xbf4>)
 8003f74:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003f78:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003f7c:	4619      	mov	r1, r3
 8003f7e:	4610      	mov	r0, r2
 8003f80:	f7fe fc83 	bl	800288a <LL_ADC_SetCommonPathInternalCh>
 8003f84:	e019      	b.n	8003fba <HAL_ADC_ConfigChannel+0xba6>
                                           ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a24      	ldr	r2, [pc, #144]	@ (800401c <HAL_ADC_ConfigChannel+0xc08>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d114      	bne.n	8003fba <HAL_ADC_ConfigChannel+0xba6>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a19      	ldr	r2, [pc, #100]	@ (8003ffc <HAL_ADC_ConfigChannel+0xbe8>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d004      	beq.n	8003fa4 <HAL_ADC_ConfigChannel+0xb90>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4a18      	ldr	r2, [pc, #96]	@ (8004000 <HAL_ADC_ConfigChannel+0xbec>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d101      	bne.n	8003fa8 <HAL_ADC_ConfigChannel+0xb94>
 8003fa4:	4a17      	ldr	r2, [pc, #92]	@ (8004004 <HAL_ADC_ConfigChannel+0xbf0>)
 8003fa6:	e000      	b.n	8003faa <HAL_ADC_ConfigChannel+0xb96>
 8003fa8:	4a17      	ldr	r2, [pc, #92]	@ (8004008 <HAL_ADC_ConfigChannel+0xbf4>)
 8003faa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003fae:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8003fb2:	4619      	mov	r1, r3
 8003fb4:	4610      	mov	r0, r2
 8003fb6:	f7fe fc68 	bl	800288a <LL_ADC_SetCommonPathInternalCh>
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
            }
          }
#else
          if ((pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)                                                        \
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a19      	ldr	r2, [pc, #100]	@ (8004024 <HAL_ADC_ConfigChannel+0xc10>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d13a      	bne.n	800403a <HAL_ADC_ConfigChannel+0xc26>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003fc4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003fc8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d134      	bne.n	800403a <HAL_ADC_ConfigChannel+0xc26>
          {
            SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f042 0201 	orr.w	r2, r2, #1
 8003fe0:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
 8003fe4:	e029      	b.n	800403a <HAL_ADC_ConfigChannel+0xc26>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003fea:	f043 0220 	orr.w	r2, r3, #32
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	679a      	str	r2, [r3, #120]	@ 0x78
    tmp_hal_status = HAL_ERROR;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8003ff8:	e01f      	b.n	800403a <HAL_ADC_ConfigChannel+0xc26>
 8003ffa:	bf00      	nop
 8003ffc:	42028000 	.word	0x42028000
 8004000:	42028100 	.word	0x42028100
 8004004:	42028300 	.word	0x42028300
 8004008:	46021300 	.word	0x46021300
 800400c:	b6002000 	.word	0xb6002000
 8004010:	20000000 	.word	0x20000000
 8004014:	053e2d63 	.word	0x053e2d63
 8004018:	ba004000 	.word	0xba004000
 800401c:	80000001 	.word	0x80000001
 8004020:	b2001000 	.word	0xb2001000
 8004024:	d7200000 	.word	0xd7200000
 8004028:	80000010 	.word	0x80000010
 800402c:	ce080000 	.word	0xce080000
 8004030:	ca040000 	.word	0xca040000
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004034:	bf00      	nop
 8004036:	e000      	b.n	800403a <HAL_ADC_ConfigChannel+0xc26>
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004038:	bf00      	nop
  }

  __HAL_UNLOCK(hadc);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2200      	movs	r2, #0
 800403e:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

  return tmp_hal_status;
 8004042:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8004046:	4618      	mov	r0, r3
 8004048:	37dc      	adds	r7, #220	@ 0xdc
 800404a:	46bd      	mov	sp, r7
 800404c:	bd90      	pop	{r4, r7, pc}
 800404e:	bf00      	nop

08004050 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004050:	b480      	push	{r7}
 8004052:	b085      	sub	sp, #20
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	f003 0307 	and.w	r3, r3, #7
 800405e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004060:	4b0c      	ldr	r3, [pc, #48]	@ (8004094 <__NVIC_SetPriorityGrouping+0x44>)
 8004062:	68db      	ldr	r3, [r3, #12]
 8004064:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004066:	68ba      	ldr	r2, [r7, #8]
 8004068:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800406c:	4013      	ands	r3, r2
 800406e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004078:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800407c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004080:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004082:	4a04      	ldr	r2, [pc, #16]	@ (8004094 <__NVIC_SetPriorityGrouping+0x44>)
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	60d3      	str	r3, [r2, #12]
}
 8004088:	bf00      	nop
 800408a:	3714      	adds	r7, #20
 800408c:	46bd      	mov	sp, r7
 800408e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004092:	4770      	bx	lr
 8004094:	e000ed00 	.word	0xe000ed00

08004098 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004098:	b480      	push	{r7}
 800409a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800409c:	4b04      	ldr	r3, [pc, #16]	@ (80040b0 <__NVIC_GetPriorityGrouping+0x18>)
 800409e:	68db      	ldr	r3, [r3, #12]
 80040a0:	0a1b      	lsrs	r3, r3, #8
 80040a2:	f003 0307 	and.w	r3, r3, #7
}
 80040a6:	4618      	mov	r0, r3
 80040a8:	46bd      	mov	sp, r7
 80040aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ae:	4770      	bx	lr
 80040b0:	e000ed00 	.word	0xe000ed00

080040b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b083      	sub	sp, #12
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	4603      	mov	r3, r0
 80040bc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80040be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	db0b      	blt.n	80040de <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80040c6:	88fb      	ldrh	r3, [r7, #6]
 80040c8:	f003 021f 	and.w	r2, r3, #31
 80040cc:	4907      	ldr	r1, [pc, #28]	@ (80040ec <__NVIC_EnableIRQ+0x38>)
 80040ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80040d2:	095b      	lsrs	r3, r3, #5
 80040d4:	2001      	movs	r0, #1
 80040d6:	fa00 f202 	lsl.w	r2, r0, r2
 80040da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80040de:	bf00      	nop
 80040e0:	370c      	adds	r7, #12
 80040e2:	46bd      	mov	sp, r7
 80040e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e8:	4770      	bx	lr
 80040ea:	bf00      	nop
 80040ec:	e000e100 	.word	0xe000e100

080040f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80040f0:	b480      	push	{r7}
 80040f2:	b083      	sub	sp, #12
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	4603      	mov	r3, r0
 80040f8:	6039      	str	r1, [r7, #0]
 80040fa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80040fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004100:	2b00      	cmp	r3, #0
 8004102:	db0a      	blt.n	800411a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	b2da      	uxtb	r2, r3
 8004108:	490c      	ldr	r1, [pc, #48]	@ (800413c <__NVIC_SetPriority+0x4c>)
 800410a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800410e:	0112      	lsls	r2, r2, #4
 8004110:	b2d2      	uxtb	r2, r2
 8004112:	440b      	add	r3, r1
 8004114:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004118:	e00a      	b.n	8004130 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	b2da      	uxtb	r2, r3
 800411e:	4908      	ldr	r1, [pc, #32]	@ (8004140 <__NVIC_SetPriority+0x50>)
 8004120:	88fb      	ldrh	r3, [r7, #6]
 8004122:	f003 030f 	and.w	r3, r3, #15
 8004126:	3b04      	subs	r3, #4
 8004128:	0112      	lsls	r2, r2, #4
 800412a:	b2d2      	uxtb	r2, r2
 800412c:	440b      	add	r3, r1
 800412e:	761a      	strb	r2, [r3, #24]
}
 8004130:	bf00      	nop
 8004132:	370c      	adds	r7, #12
 8004134:	46bd      	mov	sp, r7
 8004136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413a:	4770      	bx	lr
 800413c:	e000e100 	.word	0xe000e100
 8004140:	e000ed00 	.word	0xe000ed00

08004144 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004144:	b480      	push	{r7}
 8004146:	b089      	sub	sp, #36	@ 0x24
 8004148:	af00      	add	r7, sp, #0
 800414a:	60f8      	str	r0, [r7, #12]
 800414c:	60b9      	str	r1, [r7, #8]
 800414e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	f003 0307 	and.w	r3, r3, #7
 8004156:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004158:	69fb      	ldr	r3, [r7, #28]
 800415a:	f1c3 0307 	rsb	r3, r3, #7
 800415e:	2b04      	cmp	r3, #4
 8004160:	bf28      	it	cs
 8004162:	2304      	movcs	r3, #4
 8004164:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004166:	69fb      	ldr	r3, [r7, #28]
 8004168:	3304      	adds	r3, #4
 800416a:	2b06      	cmp	r3, #6
 800416c:	d902      	bls.n	8004174 <NVIC_EncodePriority+0x30>
 800416e:	69fb      	ldr	r3, [r7, #28]
 8004170:	3b03      	subs	r3, #3
 8004172:	e000      	b.n	8004176 <NVIC_EncodePriority+0x32>
 8004174:	2300      	movs	r3, #0
 8004176:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004178:	f04f 32ff 	mov.w	r2, #4294967295
 800417c:	69bb      	ldr	r3, [r7, #24]
 800417e:	fa02 f303 	lsl.w	r3, r2, r3
 8004182:	43da      	mvns	r2, r3
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	401a      	ands	r2, r3
 8004188:	697b      	ldr	r3, [r7, #20]
 800418a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800418c:	f04f 31ff 	mov.w	r1, #4294967295
 8004190:	697b      	ldr	r3, [r7, #20]
 8004192:	fa01 f303 	lsl.w	r3, r1, r3
 8004196:	43d9      	mvns	r1, r3
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800419c:	4313      	orrs	r3, r2
         );
}
 800419e:	4618      	mov	r0, r3
 80041a0:	3724      	adds	r7, #36	@ 0x24
 80041a2:	46bd      	mov	sp, r7
 80041a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a8:	4770      	bx	lr

080041aa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80041aa:	b580      	push	{r7, lr}
 80041ac:	b082      	sub	sp, #8
 80041ae:	af00      	add	r7, sp, #0
 80041b0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80041b2:	6878      	ldr	r0, [r7, #4]
 80041b4:	f7ff ff4c 	bl	8004050 <__NVIC_SetPriorityGrouping>
}
 80041b8:	bf00      	nop
 80041ba:	3708      	adds	r7, #8
 80041bc:	46bd      	mov	sp, r7
 80041be:	bd80      	pop	{r7, pc}

080041c0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b086      	sub	sp, #24
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	4603      	mov	r3, r0
 80041c8:	60b9      	str	r1, [r7, #8]
 80041ca:	607a      	str	r2, [r7, #4]
 80041cc:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80041ce:	f7ff ff63 	bl	8004098 <__NVIC_GetPriorityGrouping>
 80041d2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80041d4:	687a      	ldr	r2, [r7, #4]
 80041d6:	68b9      	ldr	r1, [r7, #8]
 80041d8:	6978      	ldr	r0, [r7, #20]
 80041da:	f7ff ffb3 	bl	8004144 <NVIC_EncodePriority>
 80041de:	4602      	mov	r2, r0
 80041e0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80041e4:	4611      	mov	r1, r2
 80041e6:	4618      	mov	r0, r3
 80041e8:	f7ff ff82 	bl	80040f0 <__NVIC_SetPriority>
}
 80041ec:	bf00      	nop
 80041ee:	3718      	adds	r7, #24
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}

080041f4 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b082      	sub	sp, #8
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	4603      	mov	r3, r0
 80041fc:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80041fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004202:	4618      	mov	r0, r3
 8004204:	f7ff ff56 	bl	80040b4 <__NVIC_EnableIRQ>
}
 8004208:	bf00      	nop
 800420a:	3708      	adds	r7, #8
 800420c:	46bd      	mov	sp, r7
 800420e:	bd80      	pop	{r7, pc}

08004210 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004210:	b480      	push	{r7}
 8004212:	b083      	sub	sp, #12
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	3b01      	subs	r3, #1
 800421c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004220:	d301      	bcc.n	8004226 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8004222:	2301      	movs	r3, #1
 8004224:	e00d      	b.n	8004242 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8004226:	4a0a      	ldr	r2, [pc, #40]	@ (8004250 <HAL_SYSTICK_Config+0x40>)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	3b01      	subs	r3, #1
 800422c:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 800422e:	4b08      	ldr	r3, [pc, #32]	@ (8004250 <HAL_SYSTICK_Config+0x40>)
 8004230:	2200      	movs	r2, #0
 8004232:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8004234:	4b06      	ldr	r3, [pc, #24]	@ (8004250 <HAL_SYSTICK_Config+0x40>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a05      	ldr	r2, [pc, #20]	@ (8004250 <HAL_SYSTICK_Config+0x40>)
 800423a:	f043 0303 	orr.w	r3, r3, #3
 800423e:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8004240:	2300      	movs	r3, #0
}
 8004242:	4618      	mov	r0, r3
 8004244:	370c      	adds	r7, #12
 8004246:	46bd      	mov	sp, r7
 8004248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424c:	4770      	bx	lr
 800424e:	bf00      	nop
 8004250:	e000e010 	.word	0xe000e010

08004254 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8004254:	b480      	push	{r7}
 8004256:	b083      	sub	sp, #12
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2b04      	cmp	r3, #4
 8004260:	d844      	bhi.n	80042ec <HAL_SYSTICK_CLKSourceConfig+0x98>
 8004262:	a201      	add	r2, pc, #4	@ (adr r2, 8004268 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8004264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004268:	0800428b 	.word	0x0800428b
 800426c:	080042a9 	.word	0x080042a9
 8004270:	080042cb 	.word	0x080042cb
 8004274:	080042ed 	.word	0x080042ed
 8004278:	0800427d 	.word	0x0800427d
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 800427c:	4b1f      	ldr	r3, [pc, #124]	@ (80042fc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a1e      	ldr	r2, [pc, #120]	@ (80042fc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8004282:	f043 0304 	orr.w	r3, r3, #4
 8004286:	6013      	str	r3, [r2, #0]
      break;
 8004288:	e031      	b.n	80042ee <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 800428a:	4b1c      	ldr	r3, [pc, #112]	@ (80042fc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a1b      	ldr	r2, [pc, #108]	@ (80042fc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8004290:	f023 0304 	bic.w	r3, r3, #4
 8004294:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 8004296:	4b1a      	ldr	r3, [pc, #104]	@ (8004300 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8004298:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800429c:	4a18      	ldr	r2, [pc, #96]	@ (8004300 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800429e:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80042a2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 80042a6:	e022      	b.n	80042ee <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80042a8:	4b14      	ldr	r3, [pc, #80]	@ (80042fc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a13      	ldr	r2, [pc, #76]	@ (80042fc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80042ae:	f023 0304 	bic.w	r3, r3, #4
 80042b2:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 80042b4:	4b12      	ldr	r3, [pc, #72]	@ (8004300 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80042b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80042ba:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80042be:	4a10      	ldr	r2, [pc, #64]	@ (8004300 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80042c0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80042c4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 80042c8:	e011      	b.n	80042ee <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80042ca:	4b0c      	ldr	r3, [pc, #48]	@ (80042fc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a0b      	ldr	r2, [pc, #44]	@ (80042fc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80042d0:	f023 0304 	bic.w	r3, r3, #4
 80042d4:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 80042d6:	4b0a      	ldr	r3, [pc, #40]	@ (8004300 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80042d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80042dc:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80042e0:	4a07      	ldr	r2, [pc, #28]	@ (8004300 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80042e2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80042e6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 80042ea:	e000      	b.n	80042ee <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 80042ec:	bf00      	nop
  }
}
 80042ee:	bf00      	nop
 80042f0:	370c      	adds	r7, #12
 80042f2:	46bd      	mov	sp, r7
 80042f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f8:	4770      	bx	lr
 80042fa:	bf00      	nop
 80042fc:	e000e010 	.word	0xe000e010
 8004300:	46020c00 	.word	0x46020c00

08004304 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8004304:	b480      	push	{r7}
 8004306:	b083      	sub	sp, #12
 8004308:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 800430a:	4b19      	ldr	r3, [pc, #100]	@ (8004370 <HAL_SYSTICK_GetCLKSourceConfig+0x6c>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f003 0304 	and.w	r3, r3, #4
 8004312:	2b00      	cmp	r3, #0
 8004314:	d002      	beq.n	800431c <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8004316:	2304      	movs	r3, #4
 8004318:	607b      	str	r3, [r7, #4]
 800431a:	e021      	b.n	8004360 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL);
 800431c:	4b15      	ldr	r3, [pc, #84]	@ (8004374 <HAL_SYSTICK_GetCLKSourceConfig+0x70>)
 800431e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004322:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8004326:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800432e:	d011      	beq.n	8004354 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004336:	d810      	bhi.n	800435a <HAL_SYSTICK_GetCLKSourceConfig+0x56>
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d004      	beq.n	8004348 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004344:	d003      	beq.n	800434e <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8004346:	e008      	b.n	800435a <HAL_SYSTICK_GetCLKSourceConfig+0x56>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8004348:	2300      	movs	r3, #0
 800434a:	607b      	str	r3, [r7, #4]
        break;
 800434c:	e008      	b.n	8004360 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 800434e:	2301      	movs	r3, #1
 8004350:	607b      	str	r3, [r7, #4]
        break;
 8004352:	e005      	b.n	8004360 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8004354:	2302      	movs	r3, #2
 8004356:	607b      	str	r3, [r7, #4]
        break;
 8004358:	e002      	b.n	8004360 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 800435a:	2300      	movs	r3, #0
 800435c:	607b      	str	r3, [r7, #4]
        break;
 800435e:	bf00      	nop
    }
  }
  return systick_source;
 8004360:	687b      	ldr	r3, [r7, #4]
}
 8004362:	4618      	mov	r0, r3
 8004364:	370c      	adds	r7, #12
 8004366:	46bd      	mov	sp, r7
 8004368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436c:	4770      	bx	lr
 800436e:	bf00      	nop
 8004370:	e000e010 	.word	0xe000e010
 8004374:	46020c00 	.word	0x46020c00

08004378 <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b084      	sub	sp, #16
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 8004380:	f7fe fa18 	bl	80027b4 <HAL_GetTick>
 8004384:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d101      	bne.n	8004390 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800438c:	2301      	movs	r3, #1
 800438e:	e06b      	b.n	8004468 <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8004396:	b2db      	uxtb	r3, r3
 8004398:	2b02      	cmp	r3, #2
 800439a:	d008      	beq.n	80043ae <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2220      	movs	r2, #32
 80043a0:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2200      	movs	r2, #0
 80043a6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 80043aa:	2301      	movs	r3, #1
 80043ac:	e05c      	b.n	8004468 <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	695a      	ldr	r2, [r3, #20]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f042 0204 	orr.w	r2, r2, #4
 80043bc:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2205      	movs	r2, #5
 80043c2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 80043c6:	e020      	b.n	800440a <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 80043c8:	f7fe f9f4 	bl	80027b4 <HAL_GetTick>
 80043cc:	4602      	mov	r2, r0
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	1ad3      	subs	r3, r2, r3
 80043d2:	2b05      	cmp	r3, #5
 80043d4:	d919      	bls.n	800440a <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043da:	f043 0210 	orr.w	r2, r3, #16
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2203      	movs	r2, #3
 80043e6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d003      	beq.n	80043fe <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80043fa:	2201      	movs	r2, #1
 80043fc:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2200      	movs	r2, #0
 8004402:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        return HAL_ERROR;
 8004406:	2301      	movs	r3, #1
 8004408:	e02e      	b.n	8004468 <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	691b      	ldr	r3, [r3, #16]
 8004410:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004414:	2b00      	cmp	r3, #0
 8004416:	d0d7      	beq.n	80043c8 <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	695a      	ldr	r2, [r3, #20]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f042 0202 	orr.w	r2, r2, #2
 8004426:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2204      	movs	r2, #4
 800442c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 8004438:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2201      	movs	r2, #1
 800443e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004446:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800444a:	2b00      	cmp	r3, #0
 800444c:	d007      	beq.n	800445e <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004452:	2201      	movs	r2, #1
 8004454:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	2200      	movs	r2, #0
 800445c:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2200      	movs	r2, #0
 8004462:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8004466:	2300      	movs	r3, #0
}
 8004468:	4618      	mov	r0, r3
 800446a:	3710      	adds	r7, #16
 800446c:	46bd      	mov	sp, r7
 800446e:	bd80      	pop	{r7, pc}

08004470 <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 8004470:	b480      	push	{r7}
 8004472:	b083      	sub	sp, #12
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d101      	bne.n	8004482 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800447e:	2301      	movs	r3, #1
 8004480:	e019      	b.n	80044b6 <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8004488:	b2db      	uxtb	r3, r3
 800448a:	2b02      	cmp	r3, #2
 800448c:	d004      	beq.n	8004498 <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2220      	movs	r2, #32
 8004492:	659a      	str	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8004494:	2301      	movs	r3, #1
 8004496:	e00e      	b.n	80044b6 <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2204      	movs	r2, #4
 800449c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	695b      	ldr	r3, [r3, #20]
 80044a6:	687a      	ldr	r2, [r7, #4]
 80044a8:	6812      	ldr	r2, [r2, #0]
 80044aa:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80044ae:	f043 0304 	orr.w	r3, r3, #4
 80044b2:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 80044b4:	2300      	movs	r3, #0
}
 80044b6:	4618      	mov	r0, r3
 80044b8:	370c      	adds	r7, #12
 80044ba:	46bd      	mov	sp, r7
 80044bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c0:	4770      	bx	lr
	...

080044c4 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b089      	sub	sp, #36	@ 0x24
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
 80044cc:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 80044ce:	2300      	movs	r3, #0
 80044d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80044d6:	e1ba      	b.n	800484e <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	681a      	ldr	r2, [r3, #0]
 80044dc:	2101      	movs	r1, #1
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	fa01 f303 	lsl.w	r3, r1, r3
 80044e4:	4013      	ands	r3, r2
 80044e6:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	f000 81aa 	beq.w	8004848 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	4a55      	ldr	r2, [pc, #340]	@ (800464c <HAL_GPIO_Init+0x188>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d15d      	bne.n	80045b8 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8004502:	2201      	movs	r2, #1
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	fa02 f303 	lsl.w	r3, r2, r3
 800450a:	43db      	mvns	r3, r3
 800450c:	69fa      	ldr	r2, [r7, #28]
 800450e:	4013      	ands	r3, r2
 8004510:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	f003 0201 	and.w	r2, r3, #1
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	fa02 f303 	lsl.w	r3, r2, r3
 8004520:	69fa      	ldr	r2, [r7, #28]
 8004522:	4313      	orrs	r3, r2
 8004524:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	69fa      	ldr	r2, [r7, #28]
 800452a:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 800452c:	4a48      	ldr	r2, [pc, #288]	@ (8004650 <HAL_GPIO_Init+0x18c>)
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004534:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8004536:	4a46      	ldr	r2, [pc, #280]	@ (8004650 <HAL_GPIO_Init+0x18c>)
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	00db      	lsls	r3, r3, #3
 800453c:	4413      	add	r3, r2
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8004542:	69bb      	ldr	r3, [r7, #24]
 8004544:	08da      	lsrs	r2, r3, #3
 8004546:	693b      	ldr	r3, [r7, #16]
 8004548:	3208      	adds	r2, #8
 800454a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800454e:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8004550:	69bb      	ldr	r3, [r7, #24]
 8004552:	f003 0307 	and.w	r3, r3, #7
 8004556:	009b      	lsls	r3, r3, #2
 8004558:	220f      	movs	r2, #15
 800455a:	fa02 f303 	lsl.w	r3, r2, r3
 800455e:	43db      	mvns	r3, r3
 8004560:	69fa      	ldr	r2, [r7, #28]
 8004562:	4013      	ands	r3, r2
 8004564:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8004566:	69bb      	ldr	r3, [r7, #24]
 8004568:	f003 0307 	and.w	r3, r3, #7
 800456c:	009b      	lsls	r3, r3, #2
 800456e:	220b      	movs	r2, #11
 8004570:	fa02 f303 	lsl.w	r3, r2, r3
 8004574:	69fa      	ldr	r2, [r7, #28]
 8004576:	4313      	orrs	r3, r2
 8004578:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 800457a:	69bb      	ldr	r3, [r7, #24]
 800457c:	08da      	lsrs	r2, r3, #3
 800457e:	693b      	ldr	r3, [r7, #16]
 8004580:	3208      	adds	r2, #8
 8004582:	69f9      	ldr	r1, [r7, #28]
 8004584:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8004588:	693b      	ldr	r3, [r7, #16]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 800458e:	69bb      	ldr	r3, [r7, #24]
 8004590:	005b      	lsls	r3, r3, #1
 8004592:	2203      	movs	r2, #3
 8004594:	fa02 f303 	lsl.w	r3, r2, r3
 8004598:	43db      	mvns	r3, r3
 800459a:	69fa      	ldr	r2, [r7, #28]
 800459c:	4013      	ands	r3, r2
 800459e:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 80045a0:	69bb      	ldr	r3, [r7, #24]
 80045a2:	005b      	lsls	r3, r3, #1
 80045a4:	2202      	movs	r2, #2
 80045a6:	fa02 f303 	lsl.w	r3, r2, r3
 80045aa:	69fa      	ldr	r2, [r7, #28]
 80045ac:	4313      	orrs	r3, r2
 80045ae:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	69fa      	ldr	r2, [r7, #28]
 80045b4:	601a      	str	r2, [r3, #0]
 80045b6:	e067      	b.n	8004688 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	2b02      	cmp	r3, #2
 80045be:	d003      	beq.n	80045c8 <HAL_GPIO_Init+0x104>
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	2b12      	cmp	r3, #18
 80045c6:	d145      	bne.n	8004654 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	08da      	lsrs	r2, r3, #3
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	3208      	adds	r2, #8
 80045d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045d4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	f003 0307 	and.w	r3, r3, #7
 80045dc:	009b      	lsls	r3, r3, #2
 80045de:	220f      	movs	r2, #15
 80045e0:	fa02 f303 	lsl.w	r3, r2, r3
 80045e4:	43db      	mvns	r3, r3
 80045e6:	69fa      	ldr	r2, [r7, #28]
 80045e8:	4013      	ands	r3, r2
 80045ea:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	691b      	ldr	r3, [r3, #16]
 80045f0:	f003 020f 	and.w	r2, r3, #15
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	f003 0307 	and.w	r3, r3, #7
 80045fa:	009b      	lsls	r3, r3, #2
 80045fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004600:	69fa      	ldr	r2, [r7, #28]
 8004602:	4313      	orrs	r3, r2
 8004604:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	08da      	lsrs	r2, r3, #3
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	3208      	adds	r2, #8
 800460e:	69f9      	ldr	r1, [r7, #28]
 8004610:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8004614:	693b      	ldr	r3, [r7, #16]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 800461a:	69bb      	ldr	r3, [r7, #24]
 800461c:	005b      	lsls	r3, r3, #1
 800461e:	2203      	movs	r2, #3
 8004620:	fa02 f303 	lsl.w	r3, r2, r3
 8004624:	43db      	mvns	r3, r3
 8004626:	69fa      	ldr	r2, [r7, #28]
 8004628:	4013      	ands	r3, r2
 800462a:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	f003 0203 	and.w	r2, r3, #3
 8004634:	69bb      	ldr	r3, [r7, #24]
 8004636:	005b      	lsls	r3, r3, #1
 8004638:	fa02 f303 	lsl.w	r3, r2, r3
 800463c:	69fa      	ldr	r2, [r7, #28]
 800463e:	4313      	orrs	r3, r2
 8004640:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	69fa      	ldr	r2, [r7, #28]
 8004646:	601a      	str	r2, [r3, #0]
 8004648:	e01e      	b.n	8004688 <HAL_GPIO_Init+0x1c4>
 800464a:	bf00      	nop
 800464c:	46020000 	.word	0x46020000
 8004650:	08011ca8 	.word	0x08011ca8
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 800465a:	69bb      	ldr	r3, [r7, #24]
 800465c:	005b      	lsls	r3, r3, #1
 800465e:	2203      	movs	r2, #3
 8004660:	fa02 f303 	lsl.w	r3, r2, r3
 8004664:	43db      	mvns	r3, r3
 8004666:	69fa      	ldr	r2, [r7, #28]
 8004668:	4013      	ands	r3, r2
 800466a:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	f003 0203 	and.w	r2, r3, #3
 8004674:	69bb      	ldr	r3, [r7, #24]
 8004676:	005b      	lsls	r3, r3, #1
 8004678:	fa02 f303 	lsl.w	r3, r2, r3
 800467c:	69fa      	ldr	r2, [r7, #28]
 800467e:	4313      	orrs	r3, r2
 8004680:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8004682:	693b      	ldr	r3, [r7, #16]
 8004684:	69fa      	ldr	r2, [r7, #28]
 8004686:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	2b01      	cmp	r3, #1
 800468e:	d00b      	beq.n	80046a8 <HAL_GPIO_Init+0x1e4>
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	2b02      	cmp	r3, #2
 8004696:	d007      	beq.n	80046a8 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800469c:	2b11      	cmp	r3, #17
 800469e:	d003      	beq.n	80046a8 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	2b12      	cmp	r3, #18
 80046a6:	d130      	bne.n	800470a <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 80046a8:	693b      	ldr	r3, [r7, #16]
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 80046ae:	69bb      	ldr	r3, [r7, #24]
 80046b0:	005b      	lsls	r3, r3, #1
 80046b2:	2203      	movs	r2, #3
 80046b4:	fa02 f303 	lsl.w	r3, r2, r3
 80046b8:	43db      	mvns	r3, r3
 80046ba:	69fa      	ldr	r2, [r7, #28]
 80046bc:	4013      	ands	r3, r2
 80046be:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	68da      	ldr	r2, [r3, #12]
 80046c4:	69bb      	ldr	r3, [r7, #24]
 80046c6:	005b      	lsls	r3, r3, #1
 80046c8:	fa02 f303 	lsl.w	r3, r2, r3
 80046cc:	69fa      	ldr	r2, [r7, #28]
 80046ce:	4313      	orrs	r3, r2
 80046d0:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	69fa      	ldr	r2, [r7, #28]
 80046d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 80046d8:	693b      	ldr	r3, [r7, #16]
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 80046de:	2201      	movs	r2, #1
 80046e0:	69bb      	ldr	r3, [r7, #24]
 80046e2:	fa02 f303 	lsl.w	r3, r2, r3
 80046e6:	43db      	mvns	r3, r3
 80046e8:	69fa      	ldr	r2, [r7, #28]
 80046ea:	4013      	ands	r3, r2
 80046ec:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	091b      	lsrs	r3, r3, #4
 80046f4:	f003 0201 	and.w	r2, r3, #1
 80046f8:	69bb      	ldr	r3, [r7, #24]
 80046fa:	fa02 f303 	lsl.w	r3, r2, r3
 80046fe:	69fa      	ldr	r2, [r7, #28]
 8004700:	4313      	orrs	r3, r2
 8004702:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	69fa      	ldr	r2, [r7, #28]
 8004708:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	2b03      	cmp	r3, #3
 8004710:	d017      	beq.n	8004742 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	68db      	ldr	r3, [r3, #12]
 8004716:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8004718:	69bb      	ldr	r3, [r7, #24]
 800471a:	005b      	lsls	r3, r3, #1
 800471c:	2203      	movs	r2, #3
 800471e:	fa02 f303 	lsl.w	r3, r2, r3
 8004722:	43db      	mvns	r3, r3
 8004724:	69fa      	ldr	r2, [r7, #28]
 8004726:	4013      	ands	r3, r2
 8004728:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	689a      	ldr	r2, [r3, #8]
 800472e:	69bb      	ldr	r3, [r7, #24]
 8004730:	005b      	lsls	r3, r3, #1
 8004732:	fa02 f303 	lsl.w	r3, r2, r3
 8004736:	69fa      	ldr	r2, [r7, #28]
 8004738:	4313      	orrs	r3, r2
 800473a:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	69fa      	ldr	r2, [r7, #28]
 8004740:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800474a:	2b00      	cmp	r3, #0
 800474c:	d07c      	beq.n	8004848 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 800474e:	4a47      	ldr	r2, [pc, #284]	@ (800486c <HAL_GPIO_Init+0x3a8>)
 8004750:	697b      	ldr	r3, [r7, #20]
 8004752:	089b      	lsrs	r3, r3, #2
 8004754:	3318      	adds	r3, #24
 8004756:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800475a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 800475c:	697b      	ldr	r3, [r7, #20]
 800475e:	f003 0303 	and.w	r3, r3, #3
 8004762:	00db      	lsls	r3, r3, #3
 8004764:	220f      	movs	r2, #15
 8004766:	fa02 f303 	lsl.w	r3, r2, r3
 800476a:	43db      	mvns	r3, r3
 800476c:	69fa      	ldr	r2, [r7, #28]
 800476e:	4013      	ands	r3, r2
 8004770:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	0a9a      	lsrs	r2, r3, #10
 8004776:	4b3e      	ldr	r3, [pc, #248]	@ (8004870 <HAL_GPIO_Init+0x3ac>)
 8004778:	4013      	ands	r3, r2
 800477a:	697a      	ldr	r2, [r7, #20]
 800477c:	f002 0203 	and.w	r2, r2, #3
 8004780:	00d2      	lsls	r2, r2, #3
 8004782:	4093      	lsls	r3, r2
 8004784:	69fa      	ldr	r2, [r7, #28]
 8004786:	4313      	orrs	r3, r2
 8004788:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 800478a:	4938      	ldr	r1, [pc, #224]	@ (800486c <HAL_GPIO_Init+0x3a8>)
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	089b      	lsrs	r3, r3, #2
 8004790:	3318      	adds	r3, #24
 8004792:	69fa      	ldr	r2, [r7, #28]
 8004794:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8004798:	4b34      	ldr	r3, [pc, #208]	@ (800486c <HAL_GPIO_Init+0x3a8>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	43db      	mvns	r3, r3
 80047a2:	69fa      	ldr	r2, [r7, #28]
 80047a4:	4013      	ands	r3, r2
 80047a6:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d003      	beq.n	80047bc <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 80047b4:	69fa      	ldr	r2, [r7, #28]
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	4313      	orrs	r3, r2
 80047ba:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 80047bc:	4a2b      	ldr	r2, [pc, #172]	@ (800486c <HAL_GPIO_Init+0x3a8>)
 80047be:	69fb      	ldr	r3, [r7, #28]
 80047c0:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 80047c2:	4b2a      	ldr	r3, [pc, #168]	@ (800486c <HAL_GPIO_Init+0x3a8>)
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	43db      	mvns	r3, r3
 80047cc:	69fa      	ldr	r2, [r7, #28]
 80047ce:	4013      	ands	r3, r2
 80047d0:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d003      	beq.n	80047e6 <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 80047de:	69fa      	ldr	r2, [r7, #28]
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	4313      	orrs	r3, r2
 80047e4:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 80047e6:	4a21      	ldr	r2, [pc, #132]	@ (800486c <HAL_GPIO_Init+0x3a8>)
 80047e8:	69fb      	ldr	r3, [r7, #28]
 80047ea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 80047ec:	4b1f      	ldr	r3, [pc, #124]	@ (800486c <HAL_GPIO_Init+0x3a8>)
 80047ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80047f2:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	43db      	mvns	r3, r3
 80047f8:	69fa      	ldr	r2, [r7, #28]
 80047fa:	4013      	ands	r3, r2
 80047fc:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004806:	2b00      	cmp	r3, #0
 8004808:	d003      	beq.n	8004812 <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 800480a:	69fa      	ldr	r2, [r7, #28]
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	4313      	orrs	r3, r2
 8004810:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8004812:	4a16      	ldr	r2, [pc, #88]	@ (800486c <HAL_GPIO_Init+0x3a8>)
 8004814:	69fb      	ldr	r3, [r7, #28]
 8004816:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 800481a:	4b14      	ldr	r3, [pc, #80]	@ (800486c <HAL_GPIO_Init+0x3a8>)
 800481c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004820:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	43db      	mvns	r3, r3
 8004826:	69fa      	ldr	r2, [r7, #28]
 8004828:	4013      	ands	r3, r2
 800482a:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004834:	2b00      	cmp	r3, #0
 8004836:	d003      	beq.n	8004840 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8004838:	69fa      	ldr	r2, [r7, #28]
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	4313      	orrs	r3, r2
 800483e:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8004840:	4a0a      	ldr	r2, [pc, #40]	@ (800486c <HAL_GPIO_Init+0x3a8>)
 8004842:	69fb      	ldr	r3, [r7, #28]
 8004844:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	3301      	adds	r3, #1
 800484c:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	681a      	ldr	r2, [r3, #0]
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	fa22 f303 	lsr.w	r3, r2, r3
 8004858:	2b00      	cmp	r3, #0
 800485a:	f47f ae3d 	bne.w	80044d8 <HAL_GPIO_Init+0x14>
  }
}
 800485e:	bf00      	nop
 8004860:	bf00      	nop
 8004862:	3724      	adds	r7, #36	@ 0x24
 8004864:	46bd      	mov	sp, r7
 8004866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486a:	4770      	bx	lr
 800486c:	46022000 	.word	0x46022000
 8004870:	002f7f7f 	.word	0x002f7f7f

08004874 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004874:	b480      	push	{r7}
 8004876:	b083      	sub	sp, #12
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
 800487c:	460b      	mov	r3, r1
 800487e:	807b      	strh	r3, [r7, #2]
 8004880:	4613      	mov	r3, r2
 8004882:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004884:	787b      	ldrb	r3, [r7, #1]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d003      	beq.n	8004892 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800488a:	887a      	ldrh	r2, [r7, #2]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8004890:	e002      	b.n	8004898 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 8004892:	887a      	ldrh	r2, [r7, #2]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004898:	bf00      	nop
 800489a:	370c      	adds	r7, #12
 800489c:	46bd      	mov	sp, r7
 800489e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a2:	4770      	bx	lr

080048a4 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80048a4:	b480      	push	{r7}
 80048a6:	b085      	sub	sp, #20
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
 80048ac:	460b      	mov	r3, r1
 80048ae:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	695b      	ldr	r3, [r3, #20]
 80048b4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80048b6:	887a      	ldrh	r2, [r7, #2]
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	4013      	ands	r3, r2
 80048bc:	041a      	lsls	r2, r3, #16
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	43d9      	mvns	r1, r3
 80048c2:	887b      	ldrh	r3, [r7, #2]
 80048c4:	400b      	ands	r3, r1
 80048c6:	431a      	orrs	r2, r3
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	619a      	str	r2, [r3, #24]
}
 80048cc:	bf00      	nop
 80048ce:	3714      	adds	r7, #20
 80048d0:	46bd      	mov	sp, r7
 80048d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d6:	4770      	bx	lr

080048d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b082      	sub	sp, #8
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d101      	bne.n	80048ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80048e6:	2301      	movs	r3, #1
 80048e8:	e08d      	b.n	8004a06 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80048f0:	b2db      	uxtb	r3, r3
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d106      	bne.n	8004904 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2200      	movs	r2, #0
 80048fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80048fe:	6878      	ldr	r0, [r7, #4]
 8004900:	f7fc ff82 	bl	8001808 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2224      	movs	r2, #36	@ 0x24
 8004908:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	681a      	ldr	r2, [r3, #0]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f022 0201 	bic.w	r2, r2, #1
 800491a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	685a      	ldr	r2, [r3, #4]
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004928:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	689a      	ldr	r2, [r3, #8]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004938:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	68db      	ldr	r3, [r3, #12]
 800493e:	2b01      	cmp	r3, #1
 8004940:	d107      	bne.n	8004952 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	689a      	ldr	r2, [r3, #8]
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800494e:	609a      	str	r2, [r3, #8]
 8004950:	e006      	b.n	8004960 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	689a      	ldr	r2, [r3, #8]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800495e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	68db      	ldr	r3, [r3, #12]
 8004964:	2b02      	cmp	r3, #2
 8004966:	d108      	bne.n	800497a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	685a      	ldr	r2, [r3, #4]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004976:	605a      	str	r2, [r3, #4]
 8004978:	e007      	b.n	800498a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	685a      	ldr	r2, [r3, #4]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004988:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	687a      	ldr	r2, [r7, #4]
 8004992:	6812      	ldr	r2, [r2, #0]
 8004994:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004998:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800499c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	68da      	ldr	r2, [r3, #12]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80049ac:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	691a      	ldr	r2, [r3, #16]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	695b      	ldr	r3, [r3, #20]
 80049b6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	699b      	ldr	r3, [r3, #24]
 80049be:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	430a      	orrs	r2, r1
 80049c6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	69d9      	ldr	r1, [r3, #28]
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6a1a      	ldr	r2, [r3, #32]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	430a      	orrs	r2, r1
 80049d6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	681a      	ldr	r2, [r3, #0]
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f042 0201 	orr.w	r2, r2, #1
 80049e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2200      	movs	r2, #0
 80049ec:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2220      	movs	r2, #32
 80049f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2200      	movs	r2, #0
 80049fa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2200      	movs	r2, #0
 8004a00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004a04:	2300      	movs	r3, #0
}
 8004a06:	4618      	mov	r0, r3
 8004a08:	3708      	adds	r7, #8
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bd80      	pop	{r7, pc}

08004a0e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004a0e:	b480      	push	{r7}
 8004a10:	b083      	sub	sp, #12
 8004a12:	af00      	add	r7, sp, #0
 8004a14:	6078      	str	r0, [r7, #4]
 8004a16:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a1e:	b2db      	uxtb	r3, r3
 8004a20:	2b20      	cmp	r3, #32
 8004a22:	d138      	bne.n	8004a96 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004a2a:	2b01      	cmp	r3, #1
 8004a2c:	d101      	bne.n	8004a32 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004a2e:	2302      	movs	r3, #2
 8004a30:	e032      	b.n	8004a98 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2201      	movs	r2, #1
 8004a36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2224      	movs	r2, #36	@ 0x24
 8004a3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	681a      	ldr	r2, [r3, #0]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f022 0201 	bic.w	r2, r2, #1
 8004a50:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	681a      	ldr	r2, [r3, #0]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004a60:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	6819      	ldr	r1, [r3, #0]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	683a      	ldr	r2, [r7, #0]
 8004a6e:	430a      	orrs	r2, r1
 8004a70:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	681a      	ldr	r2, [r3, #0]
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f042 0201 	orr.w	r2, r2, #1
 8004a80:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2220      	movs	r2, #32
 8004a86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004a92:	2300      	movs	r3, #0
 8004a94:	e000      	b.n	8004a98 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004a96:	2302      	movs	r3, #2
  }
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	370c      	adds	r7, #12
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa2:	4770      	bx	lr

08004aa4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b085      	sub	sp, #20
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
 8004aac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ab4:	b2db      	uxtb	r3, r3
 8004ab6:	2b20      	cmp	r3, #32
 8004ab8:	d139      	bne.n	8004b2e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004ac0:	2b01      	cmp	r3, #1
 8004ac2:	d101      	bne.n	8004ac8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004ac4:	2302      	movs	r3, #2
 8004ac6:	e033      	b.n	8004b30 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2201      	movs	r2, #1
 8004acc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2224      	movs	r2, #36	@ 0x24
 8004ad4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	681a      	ldr	r2, [r3, #0]
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f022 0201 	bic.w	r2, r2, #1
 8004ae6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004af6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	021b      	lsls	r3, r3, #8
 8004afc:	68fa      	ldr	r2, [r7, #12]
 8004afe:	4313      	orrs	r3, r2
 8004b00:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	68fa      	ldr	r2, [r7, #12]
 8004b08:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	681a      	ldr	r2, [r3, #0]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f042 0201 	orr.w	r2, r2, #1
 8004b18:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2220      	movs	r2, #32
 8004b1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2200      	movs	r2, #0
 8004b26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	e000      	b.n	8004b30 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004b2e:	2302      	movs	r3, #2
  }
}
 8004b30:	4618      	mov	r0, r3
 8004b32:	3714      	adds	r7, #20
 8004b34:	46bd      	mov	sp, r7
 8004b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3a:	4770      	bx	lr

08004b3c <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b085      	sub	sp, #20
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b44:	2300      	movs	r3, #0
 8004b46:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8004b48:	4b0b      	ldr	r3, [pc, #44]	@ (8004b78 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f003 0301 	and.w	r3, r3, #1
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d002      	beq.n	8004b5a <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8004b54:	2301      	movs	r3, #1
 8004b56:	73fb      	strb	r3, [r7, #15]
 8004b58:	e007      	b.n	8004b6a <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8004b5a:	4b07      	ldr	r3, [pc, #28]	@ (8004b78 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f023 0204 	bic.w	r2, r3, #4
 8004b62:	4905      	ldr	r1, [pc, #20]	@ (8004b78 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	4313      	orrs	r3, r2
 8004b68:	600b      	str	r3, [r1, #0]
  }

  return status;
 8004b6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	3714      	adds	r7, #20
 8004b70:	46bd      	mov	sp, r7
 8004b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b76:	4770      	bx	lr
 8004b78:	40030400 	.word	0x40030400

08004b7c <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8004b80:	4b05      	ldr	r3, [pc, #20]	@ (8004b98 <HAL_ICACHE_Enable+0x1c>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a04      	ldr	r2, [pc, #16]	@ (8004b98 <HAL_ICACHE_Enable+0x1c>)
 8004b86:	f043 0301 	orr.w	r3, r3, #1
 8004b8a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8004b8c:	2300      	movs	r3, #0
}
 8004b8e:	4618      	mov	r0, r3
 8004b90:	46bd      	mov	sp, r7
 8004b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b96:	4770      	bx	lr
 8004b98:	40030400 	.word	0x40030400

08004b9c <HAL_MMC_Init>:
            MMC_HandleTypeDef and create the associated handle.
  * @param  hmmc: Pointer to the MMC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_Init(MMC_HandleTypeDef *hmmc)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b082      	sub	sp, #8
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  /* Check the MMC handle allocation */
  if (hmmc == NULL)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d101      	bne.n	8004bae <HAL_MMC_Init+0x12>
  {
    return HAL_ERROR;
 8004baa:	2301      	movs	r3, #1
 8004bac:	e031      	b.n	8004c12 <HAL_MMC_Init+0x76>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hmmc->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hmmc->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hmmc->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hmmc->Init.ClockDiv));

  if (hmmc->State == HAL_MMC_STATE_RESET)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004bb4:	b2db      	uxtb	r3, r3
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d105      	bne.n	8004bc6 <HAL_MMC_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hmmc->Lock = HAL_UNLOCKED;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hmmc->MspInitCallback(hmmc);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_MMC_MspInit(hmmc);
 8004bc0:	6878      	ldr	r0, [r7, #4]
 8004bc2:	f7fd f96f 	bl	8001ea4 <HAL_MMC_MspInit>
#endif /* USE_HAL_MMC_REGISTER_CALLBACKS */
  }

  hmmc->State = HAL_MMC_STATE_BUSY;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2203      	movs	r2, #3
 8004bca:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Initialize the Card parameters */
  if (HAL_MMC_InitCard(hmmc) == HAL_ERROR)
 8004bce:	6878      	ldr	r0, [r7, #4]
 8004bd0:	f000 f824 	bl	8004c1c <HAL_MMC_InitCard>
 8004bd4:	4603      	mov	r3, r0
 8004bd6:	2b01      	cmp	r3, #1
 8004bd8:	d101      	bne.n	8004bde <HAL_MMC_Init+0x42>
  {
    return HAL_ERROR;
 8004bda:	2301      	movs	r3, #1
 8004bdc:	e019      	b.n	8004c12 <HAL_MMC_Init+0x76>
  }

  /* Initialize the error code */
  hmmc->ErrorCode = HAL_DMA_ERROR_NONE;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2200      	movs	r2, #0
 8004be2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the MMC operation */
  hmmc->Context = MMC_CONTEXT_NONE;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2200      	movs	r2, #0
 8004be8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Initialize the MMC state */
  hmmc->State = HAL_MMC_STATE_READY;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2201      	movs	r2, #1
 8004bee:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Configure bus width */
  if (hmmc->Init.BusWide != SDMMC_BUS_WIDE_1B)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	68db      	ldr	r3, [r3, #12]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d00a      	beq.n	8004c10 <HAL_MMC_Init+0x74>
  {
    if (HAL_MMC_ConfigWideBusOperation(hmmc, hmmc->Init.BusWide) != HAL_OK)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	68db      	ldr	r3, [r3, #12]
 8004bfe:	4619      	mov	r1, r3
 8004c00:	6878      	ldr	r0, [r7, #4]
 8004c02:	f000 fb47 	bl	8005294 <HAL_MMC_ConfigWideBusOperation>
 8004c06:	4603      	mov	r3, r0
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d001      	beq.n	8004c10 <HAL_MMC_Init+0x74>
    {
      return HAL_ERROR;
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	e000      	b.n	8004c12 <HAL_MMC_Init+0x76>
    }
  }

  return HAL_OK;
 8004c10:	2300      	movs	r3, #0
}
 8004c12:	4618      	mov	r0, r3
 8004c14:	3708      	adds	r7, #8
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bd80      	pop	{r7, pc}
	...

08004c1c <HAL_MMC_InitCard>:
  * @note   This function initializes the MMC card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_InitCard(MMC_HandleTypeDef *hmmc)
{
 8004c1c:	b590      	push	{r4, r7, lr}
 8004c1e:	b08d      	sub	sp, #52	@ 0x34
 8004c20:	af02      	add	r7, sp, #8
 8004c22:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  MMC_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for MMC card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8004c24:	2300      	movs	r3, #0
 8004c26:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8004c28:	2300      	movs	r3, #0
 8004c2a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8004c30:	2300      	movs	r3, #0
 8004c32:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8004c34:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8004c38:	f04f 0100 	mov.w	r1, #0
 8004c3c:	f004 febc 	bl	80099b8 <HAL_RCCEx_GetPeriphCLKFreq>
 8004c40:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 8004c42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d109      	bne.n	8004c5c <HAL_MMC_InitCard+0x40>
  {
    hmmc->State = HAL_MMC_STATE_READY;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hmmc->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8004c56:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8004c58:	2301      	movs	r3, #1
 8004c5a:	e070      	b.n	8004d3e <HAL_MMC_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * MMC_INIT_FREQ);
 8004c5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c5e:	0a1b      	lsrs	r3, r3, #8
 8004c60:	4a39      	ldr	r2, [pc, #228]	@ (8004d48 <HAL_MMC_InitCard+0x12c>)
 8004c62:	fba2 2303 	umull	r2, r3, r2, r3
 8004c66:	091b      	lsrs	r3, r3, #4
 8004c68:	61fb      	str	r3, [r7, #28]
#if (USE_SD_TRANSCEIVER != 0U)
  Init.TranceiverPresent = SDMMC_TRANSCEIVER_NOT_PRESENT;
#endif /* USE_SD_TRANSCEIVER */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hmmc->Instance, Init);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681c      	ldr	r4, [r3, #0]
 8004c6e:	466a      	mov	r2, sp
 8004c70:	f107 0318 	add.w	r3, r7, #24
 8004c74:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004c78:	e882 0003 	stmia.w	r2, {r0, r1}
 8004c7c:	f107 030c 	add.w	r3, r7, #12
 8004c80:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004c82:	4620      	mov	r0, r4
 8004c84:	f007 fdb6 	bl	800c7f4 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hmmc->Instance);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	f007 fde8 	bl	800c862 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the MMC initialization sequence */
  if (Init.ClockDiv != 0U)
 8004c92:	69fb      	ldr	r3, [r7, #28]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d005      	beq.n	8004ca4 <HAL_MMC_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8004c98:	69fb      	ldr	r3, [r7, #28]
 8004c9a:	005b      	lsls	r3, r3, #1
 8004c9c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ca2:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (sdmmc_clk != 0U)
 8004ca4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d007      	beq.n	8004cba <HAL_MMC_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8004caa:	4a28      	ldr	r2, [pc, #160]	@ (8004d4c <HAL_MMC_InitCard+0x130>)
 8004cac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cae:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cb2:	3301      	adds	r3, #1
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	f7fd fd89 	bl	80027cc <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = MMC_PowerON(hmmc);
 8004cba:	6878      	ldr	r0, [r7, #4]
 8004cbc:	f000 fcb4 	bl	8005628 <MMC_PowerON>
 8004cc0:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_MMC_ERROR_NONE)
 8004cc2:	6a3b      	ldr	r3, [r7, #32]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d00b      	beq.n	8004ce0 <HAL_MMC_InitCard+0xc4>
  {
    hmmc->State = HAL_MMC_STATE_READY;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2201      	movs	r2, #1
 8004ccc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hmmc->ErrorCode |= errorstate;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004cd4:	6a3b      	ldr	r3, [r7, #32]
 8004cd6:	431a      	orrs	r2, r3
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8004cdc:	2301      	movs	r3, #1
 8004cde:	e02e      	b.n	8004d3e <HAL_MMC_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = MMC_InitCard(hmmc);
 8004ce0:	6878      	ldr	r0, [r7, #4]
 8004ce2:	f000 fba3 	bl	800542c <MMC_InitCard>
 8004ce6:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_MMC_ERROR_NONE)
 8004ce8:	6a3b      	ldr	r3, [r7, #32]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d00b      	beq.n	8004d06 <HAL_MMC_InitCard+0xea>
  {
    hmmc->State = HAL_MMC_STATE_READY;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2201      	movs	r2, #1
 8004cf2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hmmc->ErrorCode |= errorstate;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004cfa:	6a3b      	ldr	r3, [r7, #32]
 8004cfc:	431a      	orrs	r2, r3
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8004d02:	2301      	movs	r3, #1
 8004d04:	e01b      	b.n	8004d3e <HAL_MMC_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hmmc->Instance, MMC_BLOCKSIZE);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004d0e:	4618      	mov	r0, r3
 8004d10:	f007 fe3c 	bl	800c98c <SDMMC_CmdBlockLength>
 8004d14:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_MMC_ERROR_NONE)
 8004d16:	6a3b      	ldr	r3, [r7, #32]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d00f      	beq.n	8004d3c <HAL_MMC_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4a0b      	ldr	r2, [pc, #44]	@ (8004d50 <HAL_MMC_InitCard+0x134>)
 8004d22:	639a      	str	r2, [r3, #56]	@ 0x38
    hmmc->ErrorCode |= errorstate;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004d28:	6a3b      	ldr	r3, [r7, #32]
 8004d2a:	431a      	orrs	r2, r3
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	635a      	str	r2, [r3, #52]	@ 0x34
    hmmc->State = HAL_MMC_STATE_READY;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2201      	movs	r2, #1
 8004d34:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 8004d38:	2301      	movs	r3, #1
 8004d3a:	e000      	b.n	8004d3e <HAL_MMC_InitCard+0x122>
  }

  return HAL_OK;
 8004d3c:	2300      	movs	r3, #0
}
 8004d3e:	4618      	mov	r0, r3
 8004d40:	372c      	adds	r7, #44	@ 0x2c
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd90      	pop	{r4, r7, pc}
 8004d46:	bf00      	nop
 8004d48:	014f8b59 	.word	0x014f8b59
 8004d4c:	00012110 	.word	0x00012110
 8004d50:	1fe00fff 	.word	0x1fe00fff

08004d54 <HAL_MMC_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_MMC_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_GetCardCSD(MMC_HandleTypeDef *hmmc, HAL_MMC_CardCSDTypeDef *pCSD)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b084      	sub	sp, #16
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
 8004d5c:	6039      	str	r1, [r7, #0]
  uint32_t block_nbr = 0;
 8004d5e:	2300      	movs	r3, #0
 8004d60:	60fb      	str	r3, [r7, #12]

  pCSD->CSDStruct = (uint8_t)((hmmc->CSD[0] & 0xC0000000U) >> 30U);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d66:	0f9b      	lsrs	r3, r3, #30
 8004d68:	b2da      	uxtb	r2, r3
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hmmc->CSD[0] & 0x3C000000U) >> 26U);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d72:	0e9b      	lsrs	r3, r3, #26
 8004d74:	b2db      	uxtb	r3, r3
 8004d76:	f003 030f 	and.w	r3, r3, #15
 8004d7a:	b2da      	uxtb	r2, r3
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hmmc->CSD[0] & 0x03000000U) >> 24U);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d84:	0e1b      	lsrs	r3, r3, #24
 8004d86:	b2db      	uxtb	r3, r3
 8004d88:	f003 0303 	and.w	r3, r3, #3
 8004d8c:	b2da      	uxtb	r2, r3
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hmmc->CSD[0] & 0x00FF0000U) >> 16U);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d96:	0c1b      	lsrs	r3, r3, #16
 8004d98:	b2da      	uxtb	r2, r3
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hmmc->CSD[0] & 0x0000FF00U) >> 8U);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004da2:	0a1b      	lsrs	r3, r3, #8
 8004da4:	b2da      	uxtb	r2, r3
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hmmc->CSD[0] & 0x000000FFU);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004dae:	b2da      	uxtb	r2, r3
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hmmc->CSD[1] & 0xFFF00000U) >> 20U);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004db8:	0d1b      	lsrs	r3, r3, #20
 8004dba:	b29a      	uxth	r2, r3
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hmmc->CSD[1] & 0x000F0000U) >> 16U);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004dc4:	0c1b      	lsrs	r3, r3, #16
 8004dc6:	b2db      	uxtb	r3, r3
 8004dc8:	f003 030f 	and.w	r3, r3, #15
 8004dcc:	b2da      	uxtb	r2, r3
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hmmc->CSD[1] & 0x00008000U) >> 15U);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004dd6:	0bdb      	lsrs	r3, r3, #15
 8004dd8:	b2db      	uxtb	r3, r3
 8004dda:	f003 0301 	and.w	r3, r3, #1
 8004dde:	b2da      	uxtb	r2, r3
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hmmc->CSD[1] & 0x00004000U) >> 14U);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004de8:	0b9b      	lsrs	r3, r3, #14
 8004dea:	b2db      	uxtb	r3, r3
 8004dec:	f003 0301 	and.w	r3, r3, #1
 8004df0:	b2da      	uxtb	r2, r3
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hmmc->CSD[1] & 0x00002000U) >> 13U);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004dfa:	0b5b      	lsrs	r3, r3, #13
 8004dfc:	b2db      	uxtb	r3, r3
 8004dfe:	f003 0301 	and.w	r3, r3, #1
 8004e02:	b2da      	uxtb	r2, r3
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hmmc->CSD[1] & 0x00001000U) >> 12U);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e0c:	0b1b      	lsrs	r3, r3, #12
 8004e0e:	b2db      	uxtb	r3, r3
 8004e10:	f003 0301 	and.w	r3, r3, #1
 8004e14:	b2da      	uxtb	r2, r3
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	735a      	strb	r2, [r3, #13]

  if (MMC_ReadExtCSD(hmmc, &block_nbr, 212, 0x0FFFFFFFU) != HAL_OK) /* Field SEC_COUNT [215:212] */
 8004e20:	f107 010c 	add.w	r1, r7, #12
 8004e24:	f06f 4370 	mvn.w	r3, #4026531840	@ 0xf0000000
 8004e28:	22d4      	movs	r2, #212	@ 0xd4
 8004e2a:	6878      	ldr	r0, [r7, #4]
 8004e2c:	f000 fc4c 	bl	80056c8 <MMC_ReadExtCSD>
 8004e30:	4603      	mov	r3, r0
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d001      	beq.n	8004e3a <HAL_MMC_GetCardCSD+0xe6>
  {
    return HAL_ERROR;
 8004e36:	2301      	movs	r3, #1
 8004e38:	e129      	b.n	800508e <HAL_MMC_GetCardCSD+0x33a>
  }

  if (hmmc->MmcCard.CardType == MMC_LOW_CAPACITY_CARD)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d163      	bne.n	8004f0a <HAL_MMC_GetCardCSD+0x1b6>
  {
    pCSD->DeviceSize = (((hmmc->CSD[1] & 0x000003FFU) << 2U) | ((hmmc->CSD[2] & 0xC0000000U) >> 30U));
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e46:	009a      	lsls	r2, r3, #2
 8004e48:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004e4c:	4013      	ands	r3, r2
 8004e4e:	687a      	ldr	r2, [r7, #4]
 8004e50:	6e12      	ldr	r2, [r2, #96]	@ 0x60
 8004e52:	0f92      	lsrs	r2, r2, #30
 8004e54:	431a      	orrs	r2, r3
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hmmc->CSD[2] & 0x38000000U) >> 27U);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e5e:	0edb      	lsrs	r3, r3, #27
 8004e60:	b2db      	uxtb	r3, r3
 8004e62:	f003 0307 	and.w	r3, r3, #7
 8004e66:	b2da      	uxtb	r2, r3
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hmmc->CSD[2] & 0x07000000U) >> 24U);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e70:	0e1b      	lsrs	r3, r3, #24
 8004e72:	b2db      	uxtb	r3, r3
 8004e74:	f003 0307 	and.w	r3, r3, #7
 8004e78:	b2da      	uxtb	r2, r3
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hmmc->CSD[2] & 0x00E00000U) >> 21U);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e82:	0d5b      	lsrs	r3, r3, #21
 8004e84:	b2db      	uxtb	r3, r3
 8004e86:	f003 0307 	and.w	r3, r3, #7
 8004e8a:	b2da      	uxtb	r2, r3
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hmmc->CSD[2] & 0x001C0000U) >> 18U);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e94:	0c9b      	lsrs	r3, r3, #18
 8004e96:	b2db      	uxtb	r3, r3
 8004e98:	f003 0307 	and.w	r3, r3, #7
 8004e9c:	b2da      	uxtb	r2, r3
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hmmc->CSD[2] & 0x00038000U) >> 15U);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ea6:	0bdb      	lsrs	r3, r3, #15
 8004ea8:	b2db      	uxtb	r3, r3
 8004eaa:	f003 0307 	and.w	r3, r3, #7
 8004eae:	b2da      	uxtb	r2, r3
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	761a      	strb	r2, [r3, #24]

    hmmc->MmcCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	691b      	ldr	r3, [r3, #16]
 8004eb8:	1c5a      	adds	r2, r3, #1
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	649a      	str	r2, [r3, #72]	@ 0x48
    hmmc->MmcCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	7e1b      	ldrb	r3, [r3, #24]
 8004ec2:	b2db      	uxtb	r3, r3
 8004ec4:	f003 0307 	and.w	r3, r3, #7
 8004ec8:	3302      	adds	r3, #2
 8004eca:	2201      	movs	r2, #1
 8004ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8004ed0:	687a      	ldr	r2, [r7, #4]
 8004ed2:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004ed4:	fb03 f202 	mul.w	r2, r3, r2
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	649a      	str	r2, [r3, #72]	@ 0x48
    hmmc->MmcCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	7a1b      	ldrb	r3, [r3, #8]
 8004ee0:	b2db      	uxtb	r3, r3
 8004ee2:	f003 030f 	and.w	r3, r3, #15
 8004ee6:	2201      	movs	r2, #1
 8004ee8:	409a      	lsls	r2, r3
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	64da      	str	r2, [r3, #76]	@ 0x4c

    hmmc->MmcCard.LogBlockNbr = (hmmc->MmcCard.BlockNbr) * ((hmmc->MmcCard.BlockSize) / MMC_BLOCKSIZE);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ef2:	687a      	ldr	r2, [r7, #4]
 8004ef4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8004ef6:	0a52      	lsrs	r2, r2, #9
 8004ef8:	fb03 f202 	mul.w	r2, r3, r2
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	651a      	str	r2, [r3, #80]	@ 0x50
    hmmc->MmcCard.LogBlockSize = MMC_BLOCKSIZE;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004f06:	655a      	str	r2, [r3, #84]	@ 0x54
 8004f08:	e023      	b.n	8004f52 <HAL_MMC_GetCardCSD+0x1fe>
  }
  else if (hmmc->MmcCard.CardType == MMC_HIGH_CAPACITY_CARD)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f0e:	2b01      	cmp	r3, #1
 8004f10:	d10f      	bne.n	8004f32 <HAL_MMC_GetCardCSD+0x1de>
  {
    hmmc->MmcCard.BlockNbr = block_nbr;
 8004f12:	68fa      	ldr	r2, [r7, #12]
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	649a      	str	r2, [r3, #72]	@ 0x48
    hmmc->MmcCard.LogBlockNbr = hmmc->MmcCard.BlockNbr;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	651a      	str	r2, [r3, #80]	@ 0x50
    hmmc->MmcCard.BlockSize = MMC_BLOCKSIZE;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004f26:	64da      	str	r2, [r3, #76]	@ 0x4c
    hmmc->MmcCard.LogBlockSize = hmmc->MmcCard.BlockSize;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	655a      	str	r2, [r3, #84]	@ 0x54
 8004f30:	e00f      	b.n	8004f52 <HAL_MMC_GetCardCSD+0x1fe>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4a58      	ldr	r2, [pc, #352]	@ (8005098 <HAL_MMC_GetCardCSD+0x344>)
 8004f38:	639a      	str	r2, [r3, #56]	@ 0x38
    hmmc->ErrorCode |= HAL_MMC_ERROR_UNSUPPORTED_FEATURE;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f3e:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	635a      	str	r2, [r3, #52]	@ 0x34
    hmmc->State = HAL_MMC_STATE_READY;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2201      	movs	r2, #1
 8004f4a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 8004f4e:	2301      	movs	r3, #1
 8004f50:	e09d      	b.n	800508e <HAL_MMC_GetCardCSD+0x33a>
  }

  pCSD->EraseGrSize = (uint8_t)((hmmc->CSD[2] & 0x00004000U) >> 14U);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f56:	0b9b      	lsrs	r3, r3, #14
 8004f58:	b2db      	uxtb	r3, r3
 8004f5a:	f003 0301 	and.w	r3, r3, #1
 8004f5e:	b2da      	uxtb	r2, r3
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hmmc->CSD[2] & 0x00003F80U) >> 7U);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f68:	09db      	lsrs	r3, r3, #7
 8004f6a:	b2db      	uxtb	r3, r3
 8004f6c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004f70:	b2da      	uxtb	r2, r3
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hmmc->CSD[2] & 0x0000007FU);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f7a:	b2db      	uxtb	r3, r3
 8004f7c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004f80:	b2da      	uxtb	r2, r3
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hmmc->CSD[3] & 0x80000000U) >> 31U);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004f8a:	0fdb      	lsrs	r3, r3, #31
 8004f8c:	b2da      	uxtb	r2, r3
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hmmc->CSD[3] & 0x60000000U) >> 29U);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004f96:	0f5b      	lsrs	r3, r3, #29
 8004f98:	b2db      	uxtb	r3, r3
 8004f9a:	f003 0303 	and.w	r3, r3, #3
 8004f9e:	b2da      	uxtb	r2, r3
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hmmc->CSD[3] & 0x1C000000U) >> 26U);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004fa8:	0e9b      	lsrs	r3, r3, #26
 8004faa:	b2db      	uxtb	r3, r3
 8004fac:	f003 0307 	and.w	r3, r3, #7
 8004fb0:	b2da      	uxtb	r2, r3
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hmmc->CSD[3] & 0x03C00000U) >> 22U);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004fba:	0d9b      	lsrs	r3, r3, #22
 8004fbc:	b2db      	uxtb	r3, r3
 8004fbe:	f003 030f 	and.w	r3, r3, #15
 8004fc2:	b2da      	uxtb	r2, r3
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hmmc->CSD[3] & 0x00200000U) >> 21U);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004fcc:	0d5b      	lsrs	r3, r3, #21
 8004fce:	b2db      	uxtb	r3, r3
 8004fd0:	f003 0301 	and.w	r3, r3, #1
 8004fd4:	b2da      	uxtb	r2, r3
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hmmc->CSD[3] & 0x00010000U) >> 16U);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004fe8:	0c1b      	lsrs	r3, r3, #16
 8004fea:	b2db      	uxtb	r3, r3
 8004fec:	f003 0301 	and.w	r3, r3, #1
 8004ff0:	b2da      	uxtb	r2, r3
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hmmc->CSD[3] & 0x00008000U) >> 15U);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004ffc:	0bdb      	lsrs	r3, r3, #15
 8004ffe:	b2db      	uxtb	r3, r3
 8005000:	f003 0301 	and.w	r3, r3, #1
 8005004:	b2da      	uxtb	r2, r3
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hmmc->CSD[3] & 0x00004000U) >> 14U);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005010:	0b9b      	lsrs	r3, r3, #14
 8005012:	b2db      	uxtb	r3, r3
 8005014:	f003 0301 	and.w	r3, r3, #1
 8005018:	b2da      	uxtb	r2, r3
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hmmc->CSD[3] & 0x00002000U) >> 13U);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005024:	0b5b      	lsrs	r3, r3, #13
 8005026:	b2db      	uxtb	r3, r3
 8005028:	f003 0301 	and.w	r3, r3, #1
 800502c:	b2da      	uxtb	r2, r3
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hmmc->CSD[3] & 0x00001000U) >> 12U);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005038:	0b1b      	lsrs	r3, r3, #12
 800503a:	b2db      	uxtb	r3, r3
 800503c:	f003 0301 	and.w	r3, r3, #1
 8005040:	b2da      	uxtb	r2, r3
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hmmc->CSD[3] & 0x00000C00U) >> 10U);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800504c:	0a9b      	lsrs	r3, r3, #10
 800504e:	b2db      	uxtb	r3, r3
 8005050:	f003 0303 	and.w	r3, r3, #3
 8005054:	b2da      	uxtb	r2, r3
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC = (uint8_t)((hmmc->CSD[3] & 0x00000300U) >> 8U);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005060:	0a1b      	lsrs	r3, r3, #8
 8005062:	b2db      	uxtb	r3, r3
 8005064:	f003 0303 	and.w	r3, r3, #3
 8005068:	b2da      	uxtb	r2, r3
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hmmc->CSD[3] & 0x000000FEU) >> 1U);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005074:	085b      	lsrs	r3, r3, #1
 8005076:	b2db      	uxtb	r3, r3
 8005078:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800507c:	b2da      	uxtb	r2, r3
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	2201      	movs	r2, #1
 8005088:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 800508c:	2300      	movs	r3, #0
}
 800508e:	4618      	mov	r0, r3
 8005090:	3710      	adds	r7, #16
 8005092:	46bd      	mov	sp, r7
 8005094:	bd80      	pop	{r7, pc}
 8005096:	bf00      	nop
 8005098:	1fe00fff 	.word	0x1fe00fff

0800509c <HAL_MMC_GetCardExtCSD>:
  *         Extended CSD register parameters
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_GetCardExtCSD(MMC_HandleTypeDef *hmmc, uint32_t *pExtCSD, uint32_t Timeout)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b08e      	sub	sp, #56	@ 0x38
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	60f8      	str	r0, [r7, #12]
 80050a4:	60b9      	str	r1, [r7, #8]
 80050a6:	607a      	str	r2, [r7, #4]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80050a8:	f7fd fb84 	bl	80027b4 <HAL_GetTick>
 80050ac:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t count;
  uint32_t *tmp_buf;

  if (NULL == pExtCSD)
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d107      	bne.n	80050c4 <HAL_MMC_GetCardExtCSD+0x28>
  {
    hmmc->ErrorCode |= HAL_MMC_ERROR_PARAM;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050b8:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80050c0:	2301      	movs	r3, #1
 80050c2:	e0de      	b.n	8005282 <HAL_MMC_GetCardExtCSD+0x1e6>
  }

  if (hmmc->State == HAL_MMC_STATE_READY)
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80050ca:	b2db      	uxtb	r3, r3
 80050cc:	2b01      	cmp	r3, #1
 80050ce:	f040 80d7 	bne.w	8005280 <HAL_MMC_GetCardExtCSD+0x1e4>
  {
    hmmc->ErrorCode = HAL_MMC_ERROR_NONE;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	2200      	movs	r2, #0
 80050d6:	635a      	str	r2, [r3, #52]	@ 0x34

    hmmc->State = HAL_MMC_STATE_BUSY;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	2203      	movs	r2, #3
 80050dc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hmmc->Instance->DCTRL = 0;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	2200      	movs	r2, #0
 80050e6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Initiaize the destination pointer */
    tmp_buf = pExtCSD;
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Configure the MMC DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80050ec:	f04f 33ff 	mov.w	r3, #4294967295
 80050f0:	613b      	str	r3, [r7, #16]
    config.DataLength    = MMC_BLOCKSIZE;
 80050f2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80050f6:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80050f8:	2390      	movs	r3, #144	@ 0x90
 80050fa:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80050fc:	2302      	movs	r3, #2
 80050fe:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005100:	2300      	movs	r3, #0
 8005102:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8005104:	2300      	movs	r3, #0
 8005106:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hmmc->Instance, &config);
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f107 0210 	add.w	r2, r7, #16
 8005110:	4611      	mov	r1, r2
 8005112:	4618      	mov	r0, r3
 8005114:	f007 fc0e 	bl	800c934 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hmmc->Instance);
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	68da      	ldr	r2, [r3, #12]
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005126:	60da      	str	r2, [r3, #12]

    /* Send ExtCSD Read command to Card */
    errorstate = SDMMC_CmdSendEXTCSD(hmmc->Instance, 0);
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	2100      	movs	r1, #0
 800512e:	4618      	mov	r0, r3
 8005130:	f007 fd5a 	bl	800cbe8 <SDMMC_CmdSendEXTCSD>
 8005134:	62b8      	str	r0, [r7, #40]	@ 0x28
    if (errorstate != HAL_MMC_ERROR_NONE)
 8005136:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005138:	2b00      	cmp	r3, #0
 800513a:	d045      	beq.n	80051c8 <HAL_MMC_GetCardExtCSD+0x12c>
    {
      /* Clear all the static flags */
      __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4a52      	ldr	r2, [pc, #328]	@ (800528c <HAL_MMC_GetCardExtCSD+0x1f0>)
 8005142:	639a      	str	r2, [r3, #56]	@ 0x38
      hmmc->ErrorCode |= errorstate;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005148:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800514a:	431a      	orrs	r2, r3
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	635a      	str	r2, [r3, #52]	@ 0x34
      hmmc->State = HAL_MMC_STATE_READY;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	2201      	movs	r2, #1
 8005154:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8005158:	2301      	movs	r3, #1
 800515a:	e092      	b.n	8005282 <HAL_MMC_GetCardExtCSD+0x1e6>

    /* Poll on SDMMC flags */
    while (!__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXOVERR |
                               SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
    {
      if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXFIFOHF))
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005162:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005166:	2b00      	cmp	r3, #0
 8005168:	d013      	beq.n	8005192 <HAL_MMC_GetCardExtCSD+0xf6>
      {
        /* Read data from SDMMC Rx FIFO */
        for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 800516a:	2300      	movs	r3, #0
 800516c:	637b      	str	r3, [r7, #52]	@ 0x34
 800516e:	e00d      	b.n	800518c <HAL_MMC_GetCardExtCSD+0xf0>
        {
          *tmp_buf = SDMMC_ReadFIFO(hmmc->Instance);
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4618      	mov	r0, r3
 8005176:	f007 fb67 	bl	800c848 <SDMMC_ReadFIFO>
 800517a:	4602      	mov	r2, r0
 800517c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800517e:	601a      	str	r2, [r3, #0]
          tmp_buf++;
 8005180:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005182:	3304      	adds	r3, #4
 8005184:	633b      	str	r3, [r7, #48]	@ 0x30
        for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 8005186:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005188:	3301      	adds	r3, #1
 800518a:	637b      	str	r3, [r7, #52]	@ 0x34
 800518c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800518e:	2b07      	cmp	r3, #7
 8005190:	d9ee      	bls.n	8005170 <HAL_MMC_GetCardExtCSD+0xd4>
        }
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 8005192:	f7fd fb0f 	bl	80027b4 <HAL_GetTick>
 8005196:	4602      	mov	r2, r0
 8005198:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800519a:	1ad3      	subs	r3, r2, r3
 800519c:	687a      	ldr	r2, [r7, #4]
 800519e:	429a      	cmp	r2, r3
 80051a0:	d902      	bls.n	80051a8 <HAL_MMC_GetCardExtCSD+0x10c>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d10f      	bne.n	80051c8 <HAL_MMC_GetCardExtCSD+0x12c>
      {
        /* Clear all the static flags */
        __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4a37      	ldr	r2, [pc, #220]	@ (800528c <HAL_MMC_GetCardExtCSD+0x1f0>)
 80051ae:	639a      	str	r2, [r3, #56]	@ 0x38
        hmmc->ErrorCode |= HAL_MMC_ERROR_TIMEOUT;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051b4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	635a      	str	r2, [r3, #52]	@ 0x34
        hmmc->State = HAL_MMC_STATE_READY;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	2201      	movs	r2, #1
 80051c0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 80051c4:	2303      	movs	r3, #3
 80051c6:	e05c      	b.n	8005282 <HAL_MMC_GetCardExtCSD+0x1e6>
    while (!__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXOVERR |
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051ce:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d0c2      	beq.n	800515c <HAL_MMC_GetCardExtCSD+0xc0>
      }
    }

    __SDMMC_CMDTRANS_DISABLE(hmmc->Instance);
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	68da      	ldr	r2, [r3, #12]
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80051e4:	60da      	str	r2, [r3, #12]

    /* Get error state */
    if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_DTIMEOUT))
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051ec:	f003 0308 	and.w	r3, r3, #8
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d00f      	beq.n	8005214 <HAL_MMC_GetCardExtCSD+0x178>
    {
      /* Clear all the static flags */
      __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4a24      	ldr	r2, [pc, #144]	@ (800528c <HAL_MMC_GetCardExtCSD+0x1f0>)
 80051fa:	639a      	str	r2, [r3, #56]	@ 0x38
      hmmc->ErrorCode |= HAL_MMC_ERROR_DATA_TIMEOUT;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005200:	f043 0208 	orr.w	r2, r3, #8
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	635a      	str	r2, [r3, #52]	@ 0x34
      hmmc->State = HAL_MMC_STATE_READY;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	2201      	movs	r2, #1
 800520c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8005210:	2301      	movs	r3, #1
 8005212:	e036      	b.n	8005282 <HAL_MMC_GetCardExtCSD+0x1e6>
    }
    else if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_DCRCFAIL))
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800521a:	f003 0302 	and.w	r3, r3, #2
 800521e:	2b00      	cmp	r3, #0
 8005220:	d00f      	beq.n	8005242 <HAL_MMC_GetCardExtCSD+0x1a6>
    {
      /* Clear all the static flags */
      __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4a19      	ldr	r2, [pc, #100]	@ (800528c <HAL_MMC_GetCardExtCSD+0x1f0>)
 8005228:	639a      	str	r2, [r3, #56]	@ 0x38
      hmmc->ErrorCode |= HAL_MMC_ERROR_DATA_CRC_FAIL;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800522e:	f043 0202 	orr.w	r2, r3, #2
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	635a      	str	r2, [r3, #52]	@ 0x34
      hmmc->State = HAL_MMC_STATE_READY;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	2201      	movs	r2, #1
 800523a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800523e:	2301      	movs	r3, #1
 8005240:	e01f      	b.n	8005282 <HAL_MMC_GetCardExtCSD+0x1e6>
    }
    else if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXOVERR))
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005248:	f003 0320 	and.w	r3, r3, #32
 800524c:	2b00      	cmp	r3, #0
 800524e:	d00f      	beq.n	8005270 <HAL_MMC_GetCardExtCSD+0x1d4>
    {
      /* Clear all the static flags */
      __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4a0d      	ldr	r2, [pc, #52]	@ (800528c <HAL_MMC_GetCardExtCSD+0x1f0>)
 8005256:	639a      	str	r2, [r3, #56]	@ 0x38
      hmmc->ErrorCode |= HAL_MMC_ERROR_RX_OVERRUN;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800525c:	f043 0220 	orr.w	r2, r3, #32
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	635a      	str	r2, [r3, #52]	@ 0x34
      hmmc->State = HAL_MMC_STATE_READY;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	2201      	movs	r2, #1
 8005268:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800526c:	2301      	movs	r3, #1
 800526e:	e008      	b.n	8005282 <HAL_MMC_GetCardExtCSD+0x1e6>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_DATA_FLAGS);
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a06      	ldr	r2, [pc, #24]	@ (8005290 <HAL_MMC_GetCardExtCSD+0x1f4>)
 8005276:	639a      	str	r2, [r3, #56]	@ 0x38
    hmmc->State = HAL_MMC_STATE_READY;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	2201      	movs	r2, #1
 800527c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  }

  return HAL_OK;
 8005280:	2300      	movs	r3, #0
}
 8005282:	4618      	mov	r0, r3
 8005284:	3738      	adds	r7, #56	@ 0x38
 8005286:	46bd      	mov	sp, r7
 8005288:	bd80      	pop	{r7, pc}
 800528a:	bf00      	nop
 800528c:	1fe00fff 	.word	0x1fe00fff
 8005290:	18000f3a 	.word	0x18000f3a

08005294 <HAL_MMC_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_ConfigWideBusOperation(MMC_HandleTypeDef *hmmc, uint32_t WideMode)
{
 8005294:	b5b0      	push	{r4, r5, r7, lr}
 8005296:	b08c      	sub	sp, #48	@ 0x30
 8005298:	af02      	add	r7, sp, #8
 800529a:	6078      	str	r0, [r7, #4]
 800529c:	6039      	str	r1, [r7, #0]
  uint32_t count;
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t response = 0U;
 800529e:	2300      	movs	r3, #0
 80052a0:	61fb      	str	r3, [r7, #28]

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hmmc->State = HAL_MMC_STATE_BUSY;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2203      	movs	r2, #3
 80052a6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Check and update the power class if needed */
  if ((hmmc->Instance->CLKCR & SDMMC_CLKCR_BUSSPEED) != 0U)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	685b      	ldr	r3, [r3, #4]
 80052b0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d014      	beq.n	80052e2 <HAL_MMC_ConfigWideBusOperation+0x4e>
  {
    if ((hmmc->Instance->CLKCR & SDMMC_CLKCR_DDR) != 0U)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	685b      	ldr	r3, [r3, #4]
 80052be:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d006      	beq.n	80052d4 <HAL_MMC_ConfigWideBusOperation+0x40>
    {
      errorstate = MMC_PwrClassUpdate(hmmc, WideMode, SDMMC_SPEED_MODE_DDR);
 80052c6:	2204      	movs	r2, #4
 80052c8:	6839      	ldr	r1, [r7, #0]
 80052ca:	6878      	ldr	r0, [r7, #4]
 80052cc:	f000 faf0 	bl	80058b0 <MMC_PwrClassUpdate>
 80052d0:	6238      	str	r0, [r7, #32]
 80052d2:	e00c      	b.n	80052ee <HAL_MMC_ConfigWideBusOperation+0x5a>
    }
    else
    {
      errorstate = MMC_PwrClassUpdate(hmmc, WideMode, SDMMC_SPEED_MODE_HIGH);
 80052d4:	2202      	movs	r2, #2
 80052d6:	6839      	ldr	r1, [r7, #0]
 80052d8:	6878      	ldr	r0, [r7, #4]
 80052da:	f000 fae9 	bl	80058b0 <MMC_PwrClassUpdate>
 80052de:	6238      	str	r0, [r7, #32]
 80052e0:	e005      	b.n	80052ee <HAL_MMC_ConfigWideBusOperation+0x5a>
    }
  }
  else
  {
    errorstate = MMC_PwrClassUpdate(hmmc, WideMode, SDMMC_SPEED_MODE_DEFAULT);
 80052e2:	2201      	movs	r2, #1
 80052e4:	6839      	ldr	r1, [r7, #0]
 80052e6:	6878      	ldr	r0, [r7, #4]
 80052e8:	f000 fae2 	bl	80058b0 <MMC_PwrClassUpdate>
 80052ec:	6238      	str	r0, [r7, #32]
  }

  if (errorstate == HAL_MMC_ERROR_NONE)
 80052ee:	6a3b      	ldr	r3, [r7, #32]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d17b      	bne.n	80053ec <HAL_MMC_ConfigWideBusOperation+0x158>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80052fa:	d107      	bne.n	800530c <HAL_MMC_ConfigWideBusOperation+0x78>
    {
      errorstate = SDMMC_CmdSwitch(hmmc->Instance, 0x03B70200U);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4946      	ldr	r1, [pc, #280]	@ (800541c <HAL_MMC_ConfigWideBusOperation+0x188>)
 8005302:	4618      	mov	r0, r3
 8005304:	f007 fc4d 	bl	800cba2 <SDMMC_CmdSwitch>
 8005308:	6238      	str	r0, [r7, #32]
 800530a:	e019      	b.n	8005340 <HAL_MMC_ConfigWideBusOperation+0xac>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005312:	d107      	bne.n	8005324 <HAL_MMC_ConfigWideBusOperation+0x90>
    {
      errorstate = SDMMC_CmdSwitch(hmmc->Instance, 0x03B70100U);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4941      	ldr	r1, [pc, #260]	@ (8005420 <HAL_MMC_ConfigWideBusOperation+0x18c>)
 800531a:	4618      	mov	r0, r3
 800531c:	f007 fc41 	bl	800cba2 <SDMMC_CmdSwitch>
 8005320:	6238      	str	r0, [r7, #32]
 8005322:	e00d      	b.n	8005340 <HAL_MMC_ConfigWideBusOperation+0xac>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d107      	bne.n	800533a <HAL_MMC_ConfigWideBusOperation+0xa6>
    {
      errorstate = SDMMC_CmdSwitch(hmmc->Instance, 0x03B70000U);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	493d      	ldr	r1, [pc, #244]	@ (8005424 <HAL_MMC_ConfigWideBusOperation+0x190>)
 8005330:	4618      	mov	r0, r3
 8005332:	f007 fc36 	bl	800cba2 <SDMMC_CmdSwitch>
 8005336:	6238      	str	r0, [r7, #32]
 8005338:	e002      	b.n	8005340 <HAL_MMC_ConfigWideBusOperation+0xac>
    }
    else
    {
      /* WideMode is not a valid argument*/
      errorstate = HAL_MMC_ERROR_PARAM;
 800533a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800533e:	623b      	str	r3, [r7, #32]
    }

    /* Check for switch error and violation of the trial number of sending CMD 13 */
    if (errorstate == HAL_MMC_ERROR_NONE)
 8005340:	6a3b      	ldr	r3, [r7, #32]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d152      	bne.n	80053ec <HAL_MMC_ConfigWideBusOperation+0x158>
    {
      /* While card is not ready for data and trial number for sending CMD13 is not exceeded */
      count = SDMMC_MAX_TRIAL;
 8005346:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800534a:	627b      	str	r3, [r7, #36]	@ 0x24
      do
      {
        errorstate = SDMMC_CmdSendStatus(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16U));
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681a      	ldr	r2, [r3, #0]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005354:	041b      	lsls	r3, r3, #16
 8005356:	4619      	mov	r1, r3
 8005358:	4610      	mov	r0, r2
 800535a:	f007 fbdf 	bl	800cb1c <SDMMC_CmdSendStatus>
 800535e:	6238      	str	r0, [r7, #32]
        if (errorstate != HAL_MMC_ERROR_NONE)
 8005360:	6a3b      	ldr	r3, [r7, #32]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d112      	bne.n	800538c <HAL_MMC_ConfigWideBusOperation+0xf8>
        {
          break;
        }

        /* Get command response */
        response = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	2100      	movs	r1, #0
 800536c:	4618      	mov	r0, r3
 800536e:	f007 face 	bl	800c90e <SDMMC_GetResponse>
 8005372:	61f8      	str	r0, [r7, #28]
        count--;
 8005374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005376:	3b01      	subs	r3, #1
 8005378:	627b      	str	r3, [r7, #36]	@ 0x24
      } while (((response & 0x100U) == 0U) && (count != 0U));
 800537a:	69fb      	ldr	r3, [r7, #28]
 800537c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005380:	2b00      	cmp	r3, #0
 8005382:	d104      	bne.n	800538e <HAL_MMC_ConfigWideBusOperation+0xfa>
 8005384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005386:	2b00      	cmp	r3, #0
 8005388:	d1e0      	bne.n	800534c <HAL_MMC_ConfigWideBusOperation+0xb8>
 800538a:	e000      	b.n	800538e <HAL_MMC_ConfigWideBusOperation+0xfa>
          break;
 800538c:	bf00      	nop

      /* Check the status after the switch command execution */
      if ((count != 0U) && (errorstate == HAL_MMC_ERROR_NONE))
 800538e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005390:	2b00      	cmp	r3, #0
 8005392:	d025      	beq.n	80053e0 <HAL_MMC_ConfigWideBusOperation+0x14c>
 8005394:	6a3b      	ldr	r3, [r7, #32]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d122      	bne.n	80053e0 <HAL_MMC_ConfigWideBusOperation+0x14c>
      {
        /* Check the bit SWITCH_ERROR of the device status */
        if ((response & 0x80U) != 0U)
 800539a:	69fb      	ldr	r3, [r7, #28]
 800539c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d003      	beq.n	80053ac <HAL_MMC_ConfigWideBusOperation+0x118>
        {
          errorstate = SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80053a4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80053a8:	623b      	str	r3, [r7, #32]
        if ((response & 0x80U) != 0U)
 80053aa:	e01f      	b.n	80053ec <HAL_MMC_ConfigWideBusOperation+0x158>
        }
        else
        {
          /* Configure the SDMMC peripheral */
          Init = hmmc->Init;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	f107 0408 	add.w	r4, r7, #8
 80053b2:	1d1d      	adds	r5, r3, #4
 80053b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80053b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80053b8:	682b      	ldr	r3, [r5, #0]
 80053ba:	6023      	str	r3, [r4, #0]
          Init.BusWide = WideMode;
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	613b      	str	r3, [r7, #16]
          (void)SDMMC_Init(hmmc->Instance, Init);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681c      	ldr	r4, [r3, #0]
 80053c4:	466a      	mov	r2, sp
 80053c6:	f107 0314 	add.w	r3, r7, #20
 80053ca:	e893 0003 	ldmia.w	r3, {r0, r1}
 80053ce:	e882 0003 	stmia.w	r2, {r0, r1}
 80053d2:	f107 0308 	add.w	r3, r7, #8
 80053d6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80053d8:	4620      	mov	r0, r4
 80053da:	f007 fa0b 	bl	800c7f4 <SDMMC_Init>
        if ((response & 0x80U) != 0U)
 80053de:	e005      	b.n	80053ec <HAL_MMC_ConfigWideBusOperation+0x158>
        }
      }
      else if (count == 0U)
 80053e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d102      	bne.n	80053ec <HAL_MMC_ConfigWideBusOperation+0x158>
      {
        errorstate = SDMMC_ERROR_TIMEOUT;
 80053e6:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80053ea:	623b      	str	r3, [r7, #32]
      }
    }
  }

  /* Change State */
  hmmc->State = HAL_MMC_STATE_READY;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2201      	movs	r2, #1
 80053f0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  if (errorstate != HAL_MMC_ERROR_NONE)
 80053f4:	6a3b      	ldr	r3, [r7, #32]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d00b      	beq.n	8005412 <HAL_MMC_ConfigWideBusOperation+0x17e>
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4a0a      	ldr	r2, [pc, #40]	@ (8005428 <HAL_MMC_ConfigWideBusOperation+0x194>)
 8005400:	639a      	str	r2, [r3, #56]	@ 0x38
    hmmc->ErrorCode |= errorstate;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005406:	6a3b      	ldr	r3, [r7, #32]
 8005408:	431a      	orrs	r2, r3
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800540e:	2301      	movs	r3, #1
 8005410:	e000      	b.n	8005414 <HAL_MMC_ConfigWideBusOperation+0x180>
  }

  return HAL_OK;
 8005412:	2300      	movs	r3, #0
}
 8005414:	4618      	mov	r0, r3
 8005416:	3728      	adds	r7, #40	@ 0x28
 8005418:	46bd      	mov	sp, r7
 800541a:	bdb0      	pop	{r4, r5, r7, pc}
 800541c:	03b70200 	.word	0x03b70200
 8005420:	03b70100 	.word	0x03b70100
 8005424:	03b70000 	.word	0x03b70000
 8005428:	1fe00fff 	.word	0x1fe00fff

0800542c <MMC_InitCard>:
  * @brief  Initializes the mmc card.
  * @param  hmmc: Pointer to MMC handle
  * @retval MMC Card error state
  */
static uint32_t MMC_InitCard(MMC_HandleTypeDef *hmmc)
{
 800542c:	b5b0      	push	{r4, r5, r7, lr}
 800542e:	b096      	sub	sp, #88	@ 0x58
 8005430:	af02      	add	r7, sp, #8
 8005432:	6078      	str	r0, [r7, #4]
  HAL_MMC_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t mmc_rca = 2U;
 8005434:	2302      	movs	r3, #2
 8005436:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
  MMC_InitTypeDef Init;

  /* Check the power State */
  if (SDMMC_GetPowerState(hmmc->Instance) == 0U)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4618      	mov	r0, r3
 8005440:	f007 fa20 	bl	800c884 <SDMMC_GetPowerState>
 8005444:	4603      	mov	r3, r0
 8005446:	2b00      	cmp	r3, #0
 8005448:	d102      	bne.n	8005450 <MMC_InitCard+0x24>
  {
    /* Power off */
    return HAL_MMC_ERROR_REQUEST_NOT_APPLICABLE;
 800544a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800544e:	e0e6      	b.n	800561e <MMC_InitCard+0x1f2>
  }

  /* Send CMD2 ALL_SEND_CID */
  errorstate = SDMMC_CmdSendCID(hmmc->Instance);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4618      	mov	r0, r3
 8005456:	f007 fafd 	bl	800ca54 <SDMMC_CmdSendCID>
 800545a:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_MMC_ERROR_NONE)
 800545c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800545e:	2b00      	cmp	r3, #0
 8005460:	d001      	beq.n	8005466 <MMC_InitCard+0x3a>
  {
    return errorstate;
 8005462:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005464:	e0db      	b.n	800561e <MMC_InitCard+0x1f2>
  }
  else
  {
    /* Get Card identification number data */
    hmmc->CID[0U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	2100      	movs	r1, #0
 800546c:	4618      	mov	r0, r3
 800546e:	f007 fa4e 	bl	800c90e <SDMMC_GetResponse>
 8005472:	4602      	mov	r2, r0
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	669a      	str	r2, [r3, #104]	@ 0x68
    hmmc->CID[1U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP2);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	2104      	movs	r1, #4
 800547e:	4618      	mov	r0, r3
 8005480:	f007 fa45 	bl	800c90e <SDMMC_GetResponse>
 8005484:	4602      	mov	r2, r0
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	66da      	str	r2, [r3, #108]	@ 0x6c
    hmmc->CID[2U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP3);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	2108      	movs	r1, #8
 8005490:	4618      	mov	r0, r3
 8005492:	f007 fa3c 	bl	800c90e <SDMMC_GetResponse>
 8005496:	4602      	mov	r2, r0
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	671a      	str	r2, [r3, #112]	@ 0x70
    hmmc->CID[3U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP4);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	210c      	movs	r1, #12
 80054a2:	4618      	mov	r0, r3
 80054a4:	f007 fa33 	bl	800c90e <SDMMC_GetResponse>
 80054a8:	4602      	mov	r2, r0
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	675a      	str	r2, [r3, #116]	@ 0x74
  }

  /* Send CMD3 SET_REL_ADDR with RCA = 2 (should be greater than 1) */
  /* MMC Card publishes its RCA. */
  errorstate = SDMMC_CmdSetRelAddMmc(hmmc->Instance, mmc_rca);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 80054b6:	4611      	mov	r1, r2
 80054b8:	4618      	mov	r0, r3
 80054ba:	f007 fb0a 	bl	800cad2 <SDMMC_CmdSetRelAddMmc>
 80054be:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_MMC_ERROR_NONE)
 80054c0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d001      	beq.n	80054ca <MMC_InitCard+0x9e>
  {
    return errorstate;
 80054c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80054c8:	e0a9      	b.n	800561e <MMC_InitCard+0x1f2>
  }

  /* Get the MMC card RCA */
  hmmc->MmcCard.RelCardAdd = mmc_rca;
 80054ca:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Send CMD9 SEND_CSD with argument as card's RCA */
  errorstate = SDMMC_CmdSendCSD(hmmc->Instance, (uint32_t)(hmmc->MmcCard.RelCardAdd << 16U));
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681a      	ldr	r2, [r3, #0]
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054da:	041b      	lsls	r3, r3, #16
 80054dc:	4619      	mov	r1, r3
 80054de:	4610      	mov	r0, r2
 80054e0:	f007 fad7 	bl	800ca92 <SDMMC_CmdSendCSD>
 80054e4:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_MMC_ERROR_NONE)
 80054e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d001      	beq.n	80054f0 <MMC_InitCard+0xc4>
  {
    return errorstate;
 80054ec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80054ee:	e096      	b.n	800561e <MMC_InitCard+0x1f2>
  }
  else
  {
    /* Get Card Specific Data */
    hmmc->CSD[0U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	2100      	movs	r1, #0
 80054f6:	4618      	mov	r0, r3
 80054f8:	f007 fa09 	bl	800c90e <SDMMC_GetResponse>
 80054fc:	4602      	mov	r2, r0
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	659a      	str	r2, [r3, #88]	@ 0x58
    hmmc->CSD[1U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP2);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	2104      	movs	r1, #4
 8005508:	4618      	mov	r0, r3
 800550a:	f007 fa00 	bl	800c90e <SDMMC_GetResponse>
 800550e:	4602      	mov	r2, r0
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	65da      	str	r2, [r3, #92]	@ 0x5c
    hmmc->CSD[2U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP3);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	2108      	movs	r1, #8
 800551a:	4618      	mov	r0, r3
 800551c:	f007 f9f7 	bl	800c90e <SDMMC_GetResponse>
 8005520:	4602      	mov	r2, r0
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	661a      	str	r2, [r3, #96]	@ 0x60
    hmmc->CSD[3U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP4);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	210c      	movs	r1, #12
 800552c:	4618      	mov	r0, r3
 800552e:	f007 f9ee 	bl	800c90e <SDMMC_GetResponse>
 8005532:	4602      	mov	r2, r0
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	665a      	str	r2, [r3, #100]	@ 0x64
  }

  /* Get the Card Class */
  hmmc->MmcCard.Class = (SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP2) >> 20U);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	2104      	movs	r1, #4
 800553e:	4618      	mov	r0, r3
 8005540:	f007 f9e5 	bl	800c90e <SDMMC_GetResponse>
 8005544:	4603      	mov	r3, r0
 8005546:	0d1a      	lsrs	r2, r3, #20
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16U));
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681a      	ldr	r2, [r3, #0]
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005554:	041b      	lsls	r3, r3, #16
 8005556:	4619      	mov	r1, r3
 8005558:	4610      	mov	r0, r2
 800555a:	f007 fa3a 	bl	800c9d2 <SDMMC_CmdSelDesel>
 800555e:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_MMC_ERROR_NONE)
 8005560:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005562:	2b00      	cmp	r3, #0
 8005564:	d001      	beq.n	800556a <MMC_InitCard+0x13e>
  {
    return errorstate;
 8005566:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005568:	e059      	b.n	800561e <MMC_InitCard+0x1f2>
  }

  /* Get CSD parameters */
  if (HAL_MMC_GetCardCSD(hmmc, &CSD) != HAL_OK)
 800556a:	f107 031c 	add.w	r3, r7, #28
 800556e:	4619      	mov	r1, r3
 8005570:	6878      	ldr	r0, [r7, #4]
 8005572:	f7ff fbef 	bl	8004d54 <HAL_MMC_GetCardCSD>
 8005576:	4603      	mov	r3, r0
 8005578:	2b00      	cmp	r3, #0
 800557a:	d002      	beq.n	8005582 <MMC_InitCard+0x156>
  {
    return hmmc->ErrorCode;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005580:	e04d      	b.n	800561e <MMC_InitCard+0x1f2>
  }

  /* While card is not ready for data and trial number for sending CMD13 is not exceeded */
  errorstate = SDMMC_CmdSendStatus(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16U));
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681a      	ldr	r2, [r3, #0]
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800558a:	041b      	lsls	r3, r3, #16
 800558c:	4619      	mov	r1, r3
 800558e:	4610      	mov	r0, r2
 8005590:	f007 fac4 	bl	800cb1c <SDMMC_CmdSendStatus>
 8005594:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_MMC_ERROR_NONE)
 8005596:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005598:	2b00      	cmp	r3, #0
 800559a:	d005      	beq.n	80055a8 <MMC_InitCard+0x17c>
  {
    hmmc->ErrorCode |= errorstate;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80055a0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80055a2:	431a      	orrs	r2, r3
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Get Extended CSD parameters */
  if (HAL_MMC_GetCardExtCSD(hmmc, hmmc->Ext_CSD, SDMMC_DATATIMEOUT) != HAL_OK)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	3378      	adds	r3, #120	@ 0x78
 80055ac:	f04f 32ff 	mov.w	r2, #4294967295
 80055b0:	4619      	mov	r1, r3
 80055b2:	6878      	ldr	r0, [r7, #4]
 80055b4:	f7ff fd72 	bl	800509c <HAL_MMC_GetCardExtCSD>
 80055b8:	4603      	mov	r3, r0
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d002      	beq.n	80055c4 <MMC_InitCard+0x198>
  {
    return hmmc->ErrorCode;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80055c2:	e02c      	b.n	800561e <MMC_InitCard+0x1f2>
  }

  /* While card is not ready for data and trial number for sending CMD13 is not exceeded */
  errorstate = SDMMC_CmdSendStatus(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16U));
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681a      	ldr	r2, [r3, #0]
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055cc:	041b      	lsls	r3, r3, #16
 80055ce:	4619      	mov	r1, r3
 80055d0:	4610      	mov	r0, r2
 80055d2:	f007 faa3 	bl	800cb1c <SDMMC_CmdSendStatus>
 80055d6:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_MMC_ERROR_NONE)
 80055d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d005      	beq.n	80055ea <MMC_InitCard+0x1be>
  {
    hmmc->ErrorCode |= errorstate;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80055e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80055e4:	431a      	orrs	r2, r3
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Configure the SDMMC peripheral */
  Init = hmmc->Init;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	f107 0408 	add.w	r4, r7, #8
 80055f0:	1d1d      	adds	r5, r3, #4
 80055f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80055f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80055f6:	682b      	ldr	r3, [r5, #0]
 80055f8:	6023      	str	r3, [r4, #0]
  Init.BusWide = SDMMC_BUS_WIDE_1B;
 80055fa:	2300      	movs	r3, #0
 80055fc:	613b      	str	r3, [r7, #16]
  (void)SDMMC_Init(hmmc->Instance, Init);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681c      	ldr	r4, [r3, #0]
 8005602:	466a      	mov	r2, sp
 8005604:	f107 0314 	add.w	r3, r7, #20
 8005608:	e893 0003 	ldmia.w	r3, {r0, r1}
 800560c:	e882 0003 	stmia.w	r2, {r0, r1}
 8005610:	f107 0308 	add.w	r3, r7, #8
 8005614:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005616:	4620      	mov	r0, r4
 8005618:	f007 f8ec 	bl	800c7f4 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_MMC_ERROR_NONE;
 800561c:	2300      	movs	r3, #0
}
 800561e:	4618      	mov	r0, r3
 8005620:	3750      	adds	r7, #80	@ 0x50
 8005622:	46bd      	mov	sp, r7
 8005624:	bdb0      	pop	{r4, r5, r7, pc}
	...

08005628 <MMC_PowerON>:
  *         in the MMC handle.
  * @param  hmmc: Pointer to MMC handle
  * @retval error state
  */
static uint32_t MMC_PowerON(MMC_HandleTypeDef *hmmc)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b086      	sub	sp, #24
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005630:	2300      	movs	r3, #0
 8005632:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 8005634:	2300      	movs	r3, #0
 8005636:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 8005638:	2300      	movs	r3, #0
 800563a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hmmc->Instance);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	4618      	mov	r0, r3
 8005642:	f007 f9e9 	bl	800ca18 <SDMMC_CmdGoIdleState>
 8005646:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_MMC_ERROR_NONE)
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d027      	beq.n	800569e <MMC_PowerON+0x76>
  {
    return errorstate;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	e034      	b.n	80056bc <MMC_PowerON+0x94>
  }

  while (validvoltage == 0U)
  {
    if (count++ == SDMMC_MAX_VOLT_TRIAL)
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	1c5a      	adds	r2, r3, #1
 8005656:	60ba      	str	r2, [r7, #8]
 8005658:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800565c:	4293      	cmp	r3, r2
 800565e:	d102      	bne.n	8005666 <MMC_PowerON+0x3e>
    {
      return HAL_MMC_ERROR_INVALID_VOLTRANGE;
 8005660:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005664:	e02a      	b.n	80056bc <MMC_PowerON+0x94>
    }

    /* SEND CMD1 APP_CMD with voltage range as argument */
    errorstate = SDMMC_CmdOpCondition(hmmc->Instance, MMC_VOLTAGE_RANGE);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4916      	ldr	r1, [pc, #88]	@ (80056c4 <MMC_PowerON+0x9c>)
 800566c:	4618      	mov	r0, r3
 800566e:	f007 fa78 	bl	800cb62 <SDMMC_CmdOpCondition>
 8005672:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_MMC_ERROR_NONE)
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d002      	beq.n	8005680 <MMC_PowerON+0x58>
    {
      return HAL_MMC_ERROR_UNSUPPORTED_FEATURE;
 800567a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800567e:	e01d      	b.n	80056bc <MMC_PowerON+0x94>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	2100      	movs	r1, #0
 8005686:	4618      	mov	r0, r3
 8005688:	f007 f941 	bl	800c90e <SDMMC_GetResponse>
 800568c:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	0fdb      	lsrs	r3, r3, #31
 8005692:	2b01      	cmp	r3, #1
 8005694:	d101      	bne.n	800569a <MMC_PowerON+0x72>
 8005696:	2301      	movs	r3, #1
 8005698:	e000      	b.n	800569c <MMC_PowerON+0x74>
 800569a:	2300      	movs	r3, #0
 800569c:	613b      	str	r3, [r7, #16]
  while (validvoltage == 0U)
 800569e:	693b      	ldr	r3, [r7, #16]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d0d6      	beq.n	8005652 <MMC_PowerON+0x2a>
  }

  /* When power routine is finished and command returns valid voltage */
  if (((response & (0xFF000000U)) >> 24) == 0xC0U)
 80056a4:	697b      	ldr	r3, [r7, #20]
 80056a6:	0e1b      	lsrs	r3, r3, #24
 80056a8:	2bc0      	cmp	r3, #192	@ 0xc0
 80056aa:	d103      	bne.n	80056b4 <MMC_PowerON+0x8c>
  {
    hmmc->MmcCard.CardType = MMC_HIGH_CAPACITY_CARD;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2201      	movs	r2, #1
 80056b0:	63da      	str	r2, [r3, #60]	@ 0x3c
 80056b2:	e002      	b.n	80056ba <MMC_PowerON+0x92>
  }
  else
  {
    hmmc->MmcCard.CardType = MMC_LOW_CAPACITY_CARD;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2200      	movs	r2, #0
 80056b8:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  return HAL_MMC_ERROR_NONE;
 80056ba:	2300      	movs	r3, #0
}
 80056bc:	4618      	mov	r0, r3
 80056be:	3718      	adds	r7, #24
 80056c0:	46bd      	mov	sp, r7
 80056c2:	bd80      	pop	{r7, pc}
 80056c4:	c0ff8000 	.word	0xc0ff8000

080056c8 <MMC_ReadExtCSD>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
static HAL_StatusTypeDef MMC_ReadExtCSD(MMC_HandleTypeDef *hmmc, uint32_t *pFieldData,
                                        uint16_t FieldIndex, uint32_t Timeout)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b090      	sub	sp, #64	@ 0x40
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	60f8      	str	r0, [r7, #12]
 80056d0:	60b9      	str	r1, [r7, #8]
 80056d2:	603b      	str	r3, [r7, #0]
 80056d4:	4613      	mov	r3, r2
 80056d6:	80fb      	strh	r3, [r7, #6]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80056d8:	f7fd f86c 	bl	80027b4 <HAL_GetTick>
 80056dc:	6378      	str	r0, [r7, #52]	@ 0x34
  uint32_t count;
  uint32_t i = 0;
 80056de:	2300      	movs	r3, #0
 80056e0:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t tmp_data;

  hmmc->ErrorCode = HAL_MMC_ERROR_NONE;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	2200      	movs	r2, #0
 80056e6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize data control register */
  hmmc->Instance->DCTRL = 0;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	2200      	movs	r2, #0
 80056ee:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Configure the MMC DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80056f0:	f04f 33ff 	mov.w	r3, #4294967295
 80056f4:	617b      	str	r3, [r7, #20]
  config.DataLength    = MMC_BLOCKSIZE;
 80056f6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80056fa:	61bb      	str	r3, [r7, #24]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80056fc:	2390      	movs	r3, #144	@ 0x90
 80056fe:	61fb      	str	r3, [r7, #28]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8005700:	2302      	movs	r3, #2
 8005702:	623b      	str	r3, [r7, #32]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005704:	2300      	movs	r3, #0
 8005706:	627b      	str	r3, [r7, #36]	@ 0x24
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8005708:	2301      	movs	r3, #1
 800570a:	62bb      	str	r3, [r7, #40]	@ 0x28
  (void)SDMMC_ConfigData(hmmc->Instance, &config);
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f107 0214 	add.w	r2, r7, #20
 8005714:	4611      	mov	r1, r2
 8005716:	4618      	mov	r0, r3
 8005718:	f007 f90c 	bl	800c934 <SDMMC_ConfigData>

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdSendEXTCSD(hmmc->Instance, 0);
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	2100      	movs	r1, #0
 8005722:	4618      	mov	r0, r3
 8005724:	f007 fa60 	bl	800cbe8 <SDMMC_CmdSendEXTCSD>
 8005728:	6338      	str	r0, [r7, #48]	@ 0x30
  if (errorstate != HAL_MMC_ERROR_NONE)
 800572a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800572c:	2b00      	cmp	r3, #0
 800572e:	d04e      	beq.n	80057ce <MMC_ReadExtCSD+0x106>
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4a5c      	ldr	r2, [pc, #368]	@ (80058a8 <MMC_ReadExtCSD+0x1e0>)
 8005736:	639a      	str	r2, [r3, #56]	@ 0x38
    hmmc->ErrorCode |= errorstate;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800573c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800573e:	431a      	orrs	r2, r3
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	635a      	str	r2, [r3, #52]	@ 0x34
    hmmc->State = HAL_MMC_STATE_READY;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	2201      	movs	r2, #1
 8005748:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 800574c:	2301      	movs	r3, #1
 800574e:	e0a6      	b.n	800589e <MMC_ReadExtCSD+0x1d6>

  /* Poll on SDMMC flags */
  while (!__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
                             SDMMC_FLAG_DATAEND))
  {
    if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXFIFOHF))
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005756:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800575a:	2b00      	cmp	r3, #0
 800575c:	d01c      	beq.n	8005798 <MMC_ReadExtCSD+0xd0>
    {
      /* Read data from SDMMC Rx FIFO */
      for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 800575e:	2300      	movs	r3, #0
 8005760:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005762:	e013      	b.n	800578c <MMC_ReadExtCSD+0xc4>
      {
        tmp_data = SDMMC_ReadFIFO(hmmc->Instance);
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4618      	mov	r0, r3
 800576a:	f007 f86d 	bl	800c848 <SDMMC_ReadFIFO>
 800576e:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* eg : SEC_COUNT   : FieldIndex = 212 => i+count = 53 */
        /*      DEVICE_TYPE : FieldIndex = 196 => i+count = 49 */
        if ((i + count) == ((uint32_t)FieldIndex / 4U))
 8005770:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005772:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005774:	4413      	add	r3, r2
 8005776:	88fa      	ldrh	r2, [r7, #6]
 8005778:	0892      	lsrs	r2, r2, #2
 800577a:	b292      	uxth	r2, r2
 800577c:	4293      	cmp	r3, r2
 800577e:	d102      	bne.n	8005786 <MMC_ReadExtCSD+0xbe>
        {
          *pFieldData = tmp_data;
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005784:	601a      	str	r2, [r3, #0]
      for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 8005786:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005788:	3301      	adds	r3, #1
 800578a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800578c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800578e:	2b07      	cmp	r3, #7
 8005790:	d9e8      	bls.n	8005764 <MMC_ReadExtCSD+0x9c>
        }
      }
      i += 8U;
 8005792:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005794:	3308      	adds	r3, #8
 8005796:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 8005798:	f7fd f80c 	bl	80027b4 <HAL_GetTick>
 800579c:	4602      	mov	r2, r0
 800579e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057a0:	1ad3      	subs	r3, r2, r3
 80057a2:	683a      	ldr	r2, [r7, #0]
 80057a4:	429a      	cmp	r2, r3
 80057a6:	d902      	bls.n	80057ae <MMC_ReadExtCSD+0xe6>
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d10f      	bne.n	80057ce <MMC_ReadExtCSD+0x106>
    {
      /* Clear all the static flags */
      __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	4a3d      	ldr	r2, [pc, #244]	@ (80058a8 <MMC_ReadExtCSD+0x1e0>)
 80057b4:	639a      	str	r2, [r3, #56]	@ 0x38
      hmmc->ErrorCode |= HAL_MMC_ERROR_TIMEOUT;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057ba:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	635a      	str	r2, [r3, #52]	@ 0x34
      hmmc->State = HAL_MMC_STATE_READY;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	2201      	movs	r2, #1
 80057c6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 80057ca:	2303      	movs	r3, #3
 80057cc:	e067      	b.n	800589e <MMC_ReadExtCSD+0x1d6>
  while (!__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057d4:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d0b9      	beq.n	8005750 <MMC_ReadExtCSD+0x88>
    }
  }

  /* Get error state */
  if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_DTIMEOUT))
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057e2:	f003 0308 	and.w	r3, r3, #8
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d00f      	beq.n	800580a <MMC_ReadExtCSD+0x142>
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4a2e      	ldr	r2, [pc, #184]	@ (80058a8 <MMC_ReadExtCSD+0x1e0>)
 80057f0:	639a      	str	r2, [r3, #56]	@ 0x38
    hmmc->ErrorCode |= HAL_MMC_ERROR_DATA_TIMEOUT;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057f6:	f043 0208 	orr.w	r2, r3, #8
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	635a      	str	r2, [r3, #52]	@ 0x34
    hmmc->State = HAL_MMC_STATE_READY;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	2201      	movs	r2, #1
 8005802:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 8005806:	2301      	movs	r3, #1
 8005808:	e049      	b.n	800589e <MMC_ReadExtCSD+0x1d6>
  }
  else if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_DCRCFAIL))
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005810:	f003 0302 	and.w	r3, r3, #2
 8005814:	2b00      	cmp	r3, #0
 8005816:	d00f      	beq.n	8005838 <MMC_ReadExtCSD+0x170>
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4a22      	ldr	r2, [pc, #136]	@ (80058a8 <MMC_ReadExtCSD+0x1e0>)
 800581e:	639a      	str	r2, [r3, #56]	@ 0x38
    hmmc->ErrorCode |= HAL_MMC_ERROR_DATA_CRC_FAIL;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005824:	f043 0202 	orr.w	r2, r3, #2
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	635a      	str	r2, [r3, #52]	@ 0x34
    hmmc->State = HAL_MMC_STATE_READY;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	2201      	movs	r2, #1
 8005830:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 8005834:	2301      	movs	r3, #1
 8005836:	e032      	b.n	800589e <MMC_ReadExtCSD+0x1d6>
  }
  else if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXOVERR))
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800583e:	f003 0320 	and.w	r3, r3, #32
 8005842:	2b00      	cmp	r3, #0
 8005844:	d00f      	beq.n	8005866 <MMC_ReadExtCSD+0x19e>
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4a17      	ldr	r2, [pc, #92]	@ (80058a8 <MMC_ReadExtCSD+0x1e0>)
 800584c:	639a      	str	r2, [r3, #56]	@ 0x38
    hmmc->ErrorCode |= HAL_MMC_ERROR_RX_OVERRUN;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005852:	f043 0220 	orr.w	r2, r3, #32
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	635a      	str	r2, [r3, #52]	@ 0x34
    hmmc->State = HAL_MMC_STATE_READY;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	2201      	movs	r2, #1
 800585e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 8005862:	2301      	movs	r3, #1
 8005864:	e01b      	b.n	800589e <MMC_ReadExtCSD+0x1d6>
  {
    /* Nothing to do */
  }

  /* While card is not ready for data and trial number for sending CMD13 is not exceeded */
  errorstate = SDMMC_CmdSendStatus(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16));
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681a      	ldr	r2, [r3, #0]
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800586e:	041b      	lsls	r3, r3, #16
 8005870:	4619      	mov	r1, r3
 8005872:	4610      	mov	r0, r2
 8005874:	f007 f952 	bl	800cb1c <SDMMC_CmdSendStatus>
 8005878:	6338      	str	r0, [r7, #48]	@ 0x30
  if (errorstate != HAL_MMC_ERROR_NONE)
 800587a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800587c:	2b00      	cmp	r3, #0
 800587e:	d005      	beq.n	800588c <MMC_ReadExtCSD+0x1c4>
  {
    hmmc->ErrorCode |= errorstate;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005884:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005886:	431a      	orrs	r2, r3
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Clear all the static flags */
  __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_DATA_FLAGS);
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4a06      	ldr	r2, [pc, #24]	@ (80058ac <MMC_ReadExtCSD+0x1e4>)
 8005892:	639a      	str	r2, [r3, #56]	@ 0x38

  hmmc->State = HAL_MMC_STATE_READY;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	2201      	movs	r2, #1
 8005898:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 800589c:	2300      	movs	r3, #0
}
 800589e:	4618      	mov	r0, r3
 80058a0:	3740      	adds	r7, #64	@ 0x40
 80058a2:	46bd      	mov	sp, r7
 80058a4:	bd80      	pop	{r7, pc}
 80058a6:	bf00      	nop
 80058a8:	1fe00fff 	.word	0x1fe00fff
 80058ac:	18000f3a 	.word	0x18000f3a

080058b0 <MMC_PwrClassUpdate>:
  * @param  Wide Wide of MMC bus
  * @param  Speed Speed of the MMC bus
  * @retval MMC Card error state
  */
static uint32_t MMC_PwrClassUpdate(MMC_HandleTypeDef *hmmc, uint32_t Wide, uint32_t Speed)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b08a      	sub	sp, #40	@ 0x28
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	60f8      	str	r0, [r7, #12]
 80058b8:	60b9      	str	r1, [r7, #8]
 80058ba:	607a      	str	r2, [r7, #4]
  uint32_t count;
  uint32_t response = 0U;
 80058bc:	2300      	movs	r3, #0
 80058be:	623b      	str	r3, [r7, #32]
  uint32_t errorstate = HAL_MMC_ERROR_NONE;
 80058c0:	2300      	movs	r3, #0
 80058c2:	61fb      	str	r3, [r7, #28]
  uint32_t power_class;
  uint32_t supported_pwr_class;

  if ((Wide == SDMMC_BUS_WIDE_8B) || (Wide == SDMMC_BUS_WIDE_4B))
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80058ca:	d004      	beq.n	80058d6 <MMC_PwrClassUpdate+0x26>
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80058d2:	f040 8088 	bne.w	80059e6 <MMC_PwrClassUpdate+0x136>
  {
    power_class = 0U; /* Default value after power-on or software reset */
 80058d6:	2300      	movs	r3, #0
 80058d8:	617b      	str	r3, [r7, #20]

    /* Read the PowerClass field of the Extended CSD register */
    if (MMC_ReadExtCSD(hmmc, &power_class, 187, SDMMC_DATATIMEOUT) != HAL_OK) /* Field POWER_CLASS [187] */
 80058da:	f107 0114 	add.w	r1, r7, #20
 80058de:	f04f 33ff 	mov.w	r3, #4294967295
 80058e2:	22bb      	movs	r2, #187	@ 0xbb
 80058e4:	68f8      	ldr	r0, [r7, #12]
 80058e6:	f7ff feef 	bl	80056c8 <MMC_ReadExtCSD>
 80058ea:	4603      	mov	r3, r0
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d003      	beq.n	80058f8 <MMC_PwrClassUpdate+0x48>
    {
      errorstate = SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80058f0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80058f4:	61fb      	str	r3, [r7, #28]
 80058f6:	e002      	b.n	80058fe <MMC_PwrClassUpdate+0x4e>
    }
    else
    {
      power_class = ((power_class >> 24U) & 0x000000FFU);
 80058f8:	697b      	ldr	r3, [r7, #20]
 80058fa:	0e1b      	lsrs	r3, r3, #24
 80058fc:	617b      	str	r3, [r7, #20]
    }

    /* Get the supported PowerClass field of the Extended CSD register */
    if (Speed == SDMMC_SPEED_MODE_DDR)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2b04      	cmp	r3, #4
 8005902:	d105      	bne.n	8005910 <MMC_PwrClassUpdate+0x60>
    {
      /* Field PWR_CL_DDR_52_xxx [238 or 239] */
      supported_pwr_class = ((hmmc->Ext_CSD[(MMC_EXT_CSD_PWR_CL_DDR_52_INDEX / 4)] >> MMC_EXT_CSD_PWR_CL_DDR_52_POS) &
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
 800590a:	0e1b      	lsrs	r3, r3, #24
 800590c:	61bb      	str	r3, [r7, #24]
 800590e:	e00e      	b.n	800592e <MMC_PwrClassUpdate+0x7e>
                             0x000000FFU);
    }
    else if (Speed == SDMMC_SPEED_MODE_HIGH)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2b02      	cmp	r3, #2
 8005914:	d106      	bne.n	8005924 <MMC_PwrClassUpdate+0x74>
    {
      /* Field PWR_CL_52_xxx [200 or 202] */
      supported_pwr_class = ((hmmc->Ext_CSD[(MMC_EXT_CSD_PWR_CL_52_INDEX / 4)] >> MMC_EXT_CSD_PWR_CL_52_POS) &
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800591c:	0c1b      	lsrs	r3, r3, #16
 800591e:	b2db      	uxtb	r3, r3
 8005920:	61bb      	str	r3, [r7, #24]
 8005922:	e004      	b.n	800592e <MMC_PwrClassUpdate+0x7e>
                             0x000000FFU);
    }
    else
    {
      /* Field PWR_CL_26_xxx [201 or 203] */
      supported_pwr_class = ((hmmc->Ext_CSD[(MMC_EXT_CSD_PWR_CL_26_INDEX / 4)] >> MMC_EXT_CSD_PWR_CL_26_POS) &
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800592a:	0e1b      	lsrs	r3, r3, #24
 800592c:	61bb      	str	r3, [r7, #24]
                             0x000000FFU);
    }

    if (errorstate == HAL_MMC_ERROR_NONE)
 800592e:	69fb      	ldr	r3, [r7, #28]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d158      	bne.n	80059e6 <MMC_PwrClassUpdate+0x136>
    {
      if (Wide == SDMMC_BUS_WIDE_8B)
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800593a:	d102      	bne.n	8005942 <MMC_PwrClassUpdate+0x92>
      {
        /* Bit [7:4]: power class for 8-bits bus configuration - Bit [3:0]: power class for 4-bits bus configuration */
        supported_pwr_class = (supported_pwr_class >> 4U);
 800593c:	69bb      	ldr	r3, [r7, #24]
 800593e:	091b      	lsrs	r3, r3, #4
 8005940:	61bb      	str	r3, [r7, #24]
      }

      if ((power_class & 0x0FU) != (supported_pwr_class & 0x0FU))
 8005942:	697a      	ldr	r2, [r7, #20]
 8005944:	69bb      	ldr	r3, [r7, #24]
 8005946:	4053      	eors	r3, r2
 8005948:	f003 030f 	and.w	r3, r3, #15
 800594c:	2b00      	cmp	r3, #0
 800594e:	d04a      	beq.n	80059e6 <MMC_PwrClassUpdate+0x136>
      {
        /* Need to change current power class */
        errorstate = SDMMC_CmdSwitch(hmmc->Instance, (0x03BB0000U | ((supported_pwr_class & 0x0FU) << 8U)));
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681a      	ldr	r2, [r3, #0]
 8005954:	69bb      	ldr	r3, [r7, #24]
 8005956:	021b      	lsls	r3, r3, #8
 8005958:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800595c:	f043 736e 	orr.w	r3, r3, #62390272	@ 0x3b80000
 8005960:	f443 3340 	orr.w	r3, r3, #196608	@ 0x30000
 8005964:	4619      	mov	r1, r3
 8005966:	4610      	mov	r0, r2
 8005968:	f007 f91b 	bl	800cba2 <SDMMC_CmdSwitch>
 800596c:	61f8      	str	r0, [r7, #28]

        if (errorstate == HAL_MMC_ERROR_NONE)
 800596e:	69fb      	ldr	r3, [r7, #28]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d138      	bne.n	80059e6 <MMC_PwrClassUpdate+0x136>
        {
          /* While card is not ready for data and trial number for sending CMD13 is not exceeded */
          count = SDMMC_MAX_TRIAL;
 8005974:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005978:	627b      	str	r3, [r7, #36]	@ 0x24
          do
          {
            errorstate = SDMMC_CmdSendStatus(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16U));
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681a      	ldr	r2, [r3, #0]
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005982:	041b      	lsls	r3, r3, #16
 8005984:	4619      	mov	r1, r3
 8005986:	4610      	mov	r0, r2
 8005988:	f007 f8c8 	bl	800cb1c <SDMMC_CmdSendStatus>
 800598c:	61f8      	str	r0, [r7, #28]
            if (errorstate != HAL_MMC_ERROR_NONE)
 800598e:	69fb      	ldr	r3, [r7, #28]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d112      	bne.n	80059ba <MMC_PwrClassUpdate+0x10a>
            {
              break;
            }

            /* Get command response */
            response = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	2100      	movs	r1, #0
 800599a:	4618      	mov	r0, r3
 800599c:	f006 ffb7 	bl	800c90e <SDMMC_GetResponse>
 80059a0:	6238      	str	r0, [r7, #32]
            count--;
 80059a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059a4:	3b01      	subs	r3, #1
 80059a6:	627b      	str	r3, [r7, #36]	@ 0x24
          } while (((response & 0x100U) == 0U) && (count != 0U));
 80059a8:	6a3b      	ldr	r3, [r7, #32]
 80059aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d104      	bne.n	80059bc <MMC_PwrClassUpdate+0x10c>
 80059b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d1e0      	bne.n	800597a <MMC_PwrClassUpdate+0xca>
 80059b8:	e000      	b.n	80059bc <MMC_PwrClassUpdate+0x10c>
              break;
 80059ba:	bf00      	nop

          /* Check the status after the switch command execution */
          if ((count != 0U) && (errorstate == HAL_MMC_ERROR_NONE))
 80059bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d00b      	beq.n	80059da <MMC_PwrClassUpdate+0x12a>
 80059c2:	69fb      	ldr	r3, [r7, #28]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d108      	bne.n	80059da <MMC_PwrClassUpdate+0x12a>
          {
            /* Check the bit SWITCH_ERROR of the device status */
            if ((response & 0x80U) != 0U)
 80059c8:	6a3b      	ldr	r3, [r7, #32]
 80059ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d009      	beq.n	80059e6 <MMC_PwrClassUpdate+0x136>
            {
              errorstate = SDMMC_ERROR_UNSUPPORTED_FEATURE;
 80059d2:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80059d6:	61fb      	str	r3, [r7, #28]
            if ((response & 0x80U) != 0U)
 80059d8:	e005      	b.n	80059e6 <MMC_PwrClassUpdate+0x136>
            }
          }
          else if (count == 0U)
 80059da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d102      	bne.n	80059e6 <MMC_PwrClassUpdate+0x136>
          {
            errorstate = SDMMC_ERROR_TIMEOUT;
 80059e0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80059e4:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return errorstate;
 80059e6:	69fb      	ldr	r3, [r7, #28]
}
 80059e8:	4618      	mov	r0, r3
 80059ea:	3728      	adds	r7, #40	@ 0x28
 80059ec:	46bd      	mov	sp, r7
 80059ee:	bd80      	pop	{r7, pc}

080059f0 <LL_DLYB_Enable>:
  * @param  DLYBx DLYB Instance
  * @retval None
  */

__STATIC_INLINE void LL_DLYB_Enable(DLYB_TypeDef *DLYBx)
{
 80059f0:	b480      	push	{r7}
 80059f2:	b083      	sub	sp, #12
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
  SET_BIT(DLYBx->CR, DLYB_CR_DEN);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f043 0201 	orr.w	r2, r3, #1
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	601a      	str	r2, [r3, #0]
}
 8005a04:	bf00      	nop
 8005a06:	370c      	adds	r7, #12
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0e:	4770      	bx	lr

08005a10 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init(OSPI_HandleTypeDef *hospi)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b086      	sub	sp, #24
 8005a14:	af02      	add	r7, sp, #8
 8005a16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a18:	2300      	movs	r3, #0
 8005a1a:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8005a1c:	f7fc feca 	bl	80027b4 <HAL_GetTick>
 8005a20:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d102      	bne.n	8005a2e <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8005a28:	2301      	movs	r3, #1
 8005a2a:	73fb      	strb	r3, [r7, #15]
 8005a2c:	e0a5      	b.n	8005b7a <HAL_OSPI_Init+0x16a>
    assert_param(IS_OSPI_CS_BOUNDARY(hospi->Init.ChipSelectBoundary));
    assert_param(IS_OSPI_DLYBYP(hospi->Init.DelayBlockBypass));
    assert_param(IS_OSPI_MAXTRAN(hospi->Init.MaxTran));

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2200      	movs	r2, #0
 8005a32:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	f040 809e 	bne.w	8005b7a <HAL_OSPI_Init+0x16a>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 8005a3e:	6878      	ldr	r0, [r7, #4]
 8005a40:	f7fc f8f2 	bl	8001c28 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 8005a44:	f241 3188 	movw	r1, #5000	@ 0x1388
 8005a48:	6878      	ldr	r0, [r7, #4]
 8005a4a:	f000 f912 	bl	8005c72 <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	689a      	ldr	r2, [r3, #8]
 8005a54:	4b4b      	ldr	r3, [pc, #300]	@ (8005b84 <HAL_OSPI_Init+0x174>)
 8005a56:	4013      	ands	r3, r2
 8005a58:	687a      	ldr	r2, [r7, #4]
 8005a5a:	68d1      	ldr	r1, [r2, #12]
 8005a5c:	687a      	ldr	r2, [r7, #4]
 8005a5e:	6912      	ldr	r2, [r2, #16]
 8005a60:	3a01      	subs	r2, #1
 8005a62:	0412      	lsls	r2, r2, #16
 8005a64:	4311      	orrs	r1, r2
 8005a66:	687a      	ldr	r2, [r7, #4]
 8005a68:	6952      	ldr	r2, [r2, #20]
 8005a6a:	3a01      	subs	r2, #1
 8005a6c:	0212      	lsls	r2, r2, #8
 8005a6e:	4311      	orrs	r1, r2
 8005a70:	687a      	ldr	r2, [r7, #4]
 8005a72:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005a74:	4311      	orrs	r1, r2
 8005a76:	687a      	ldr	r2, [r7, #4]
 8005a78:	69d2      	ldr	r2, [r2, #28]
 8005a7a:	4311      	orrs	r1, r2
 8005a7c:	687a      	ldr	r2, [r7, #4]
 8005a7e:	6812      	ldr	r2, [r2, #0]
 8005a80:	430b      	orrs	r3, r1
 8005a82:	6093      	str	r3, [r2, #8]
                 (hospi->Init.MemoryType | ((hospi->Init.DeviceSize - 1U) << OCTOSPI_DCR1_DEVSIZE_Pos) |
                  ((hospi->Init.ChipSelectHighTime - 1U) << OCTOSPI_DCR1_CSHT_Pos) |
                  hospi->Init.DelayBlockBypass | hospi->Init.ClockMode));

      /* Configure wrap size */
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	68db      	ldr	r3, [r3, #12]
 8005a8a:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6a1a      	ldr	r2, [r3, #32]
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	430a      	orrs	r2, r1
 8005a98:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a9e:	0419      	lsls	r1, r3, #16
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	430a      	orrs	r2, r1
 8005aaa:	611a      	str	r2, [r3, #16]

      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	687a      	ldr	r2, [r7, #4]
 8005ab2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005ab4:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	685b      	ldr	r3, [r3, #4]
 8005ac4:	3b01      	subs	r3, #1
 8005ac6:	021a      	lsls	r2, r3, #8
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	430a      	orrs	r2, r1
 8005ace:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ad4:	9300      	str	r3, [sp, #0]
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	2120      	movs	r1, #32
 8005adc:	6878      	ldr	r0, [r7, #4]
 8005ade:	f000 fdcd 	bl	800667c <OSPI_WaitFlagStateUntilTimeout>
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8005ae6:	7bfb      	ldrb	r3, [r7, #15]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d146      	bne.n	8005b7a <HAL_OSPI_Init+0x16a>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	68db      	ldr	r3, [r3, #12]
 8005af2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005afa:	1e5a      	subs	r2, r3, #1
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	430a      	orrs	r2, r1
 8005b02:	60da      	str	r2, [r3, #12]
                   ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DMM, hospi->Init.DualQuad);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	689a      	ldr	r2, [r3, #8]
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	430a      	orrs	r2, r1
 8005b18:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8005b22:	f023 41a0 	bic.w	r1, r3, #1342177280	@ 0x50000000
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b2e:	431a      	orrs	r2, r3
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	430a      	orrs	r2, r1
 8005b36:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
                   (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	681a      	ldr	r2, [r3, #0]
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f042 0201 	orr.w	r2, r2, #1
 8005b48:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	699b      	ldr	r3, [r3, #24]
 8005b4e:	2b02      	cmp	r3, #2
 8005b50:	d107      	bne.n	8005b62 <HAL_OSPI_Init+0x152>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	689a      	ldr	r2, [r3, #8]
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f042 0202 	orr.w	r2, r2, #2
 8005b60:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	68db      	ldr	r3, [r3, #12]
 8005b66:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005b6a:	d103      	bne.n	8005b74 <HAL_OSPI_Init+0x164>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2201      	movs	r2, #1
 8005b70:	651a      	str	r2, [r3, #80]	@ 0x50
 8005b72:	e002      	b.n	8005b7a <HAL_OSPI_Init+0x16a>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2202      	movs	r2, #2
 8005b78:	651a      	str	r2, [r3, #80]	@ 0x50
      }
    }
  }

  /* Return function status */
  return status;
 8005b7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	3710      	adds	r7, #16
 8005b80:	46bd      	mov	sp, r7
 8005b82:	bd80      	pop	{r7, pc}
 8005b84:	f8e0c0f4 	.word	0xf8e0c0f4

08005b88 <HAL_OSPI_Abort>:
  * @brief  Abort the current transmission.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Abort(OSPI_HandleTypeDef *hospi)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b088      	sub	sp, #32
 8005b8c:	af02      	add	r7, sp, #8
 8005b8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b90:	2300      	movs	r3, #0
 8005b92:	75fb      	strb	r3, [r7, #23]
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 8005b94:	f7fc fe0e 	bl	80027b4 <HAL_GetTick>
 8005b98:	6138      	str	r0, [r7, #16]

  /* Check if the state is in one of the busy or configured states */
  state = hospi->State;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b9e:	60fb      	str	r3, [r7, #12]
  if (((state & OSPI_BUSY_STATE_MASK) != 0U) || ((state & OSPI_CFG_STATE_MASK) != 0U))
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	f003 0308 	and.w	r3, r3, #8
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d104      	bne.n	8005bb4 <HAL_OSPI_Abort+0x2c>
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	f003 0304 	and.w	r3, r3, #4
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d052      	beq.n	8005c5a <HAL_OSPI_Abort+0xd2>
  {
    /* Check if the DMA is enabled */
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f003 0304 	and.w	r3, r3, #4
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d014      	beq.n	8005bec <HAL_OSPI_Abort+0x64>
    {
      /* Disable the DMA transfer on the OctoSPI side */
      CLEAR_BIT(hospi->Instance->CR, OCTOSPI_CR_DMAEN);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	681a      	ldr	r2, [r3, #0]
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f022 0204 	bic.w	r2, r2, #4
 8005bd0:	601a      	str	r2, [r3, #0]

      /* Disable the DMA transfer on the DMA side */
      status = HAL_DMA_Abort(hospi->hdma);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	f7fe fbce 	bl	8004378 <HAL_DMA_Abort>
 8005bdc:	4603      	mov	r3, r0
 8005bde:	75fb      	strb	r3, [r7, #23]
      if (status != HAL_OK)
 8005be0:	7dfb      	ldrb	r3, [r7, #23]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d002      	beq.n	8005bec <HAL_OSPI_Abort+0x64>
      {
        hospi->ErrorCode = HAL_OSPI_ERROR_DMA;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2204      	movs	r2, #4
 8005bea:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }

    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	6a1b      	ldr	r3, [r3, #32]
 8005bf2:	f003 0320 	and.w	r3, r3, #32
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d02b      	beq.n	8005c52 <HAL_OSPI_Abort+0xca>
    {
      /* Perform an abort of the OctoSPI */
      SET_BIT(hospi->Instance->CR, OCTOSPI_CR_ABORT);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	681a      	ldr	r2, [r3, #0]
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f042 0202 	orr.w	r2, r2, #2
 8005c08:	601a      	str	r2, [r3, #0]

      /* Wait until the transfer complete flag is set to go back in idle state */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, hospi->Timeout);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c0e:	9300      	str	r3, [sp, #0]
 8005c10:	693b      	ldr	r3, [r7, #16]
 8005c12:	2201      	movs	r2, #1
 8005c14:	2102      	movs	r1, #2
 8005c16:	6878      	ldr	r0, [r7, #4]
 8005c18:	f000 fd30 	bl	800667c <OSPI_WaitFlagStateUntilTimeout>
 8005c1c:	4603      	mov	r3, r0
 8005c1e:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 8005c20:	7dfb      	ldrb	r3, [r7, #23]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d11f      	bne.n	8005c66 <HAL_OSPI_Abort+0xde>
      {
        /* Clear transfer complete flag */
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	2202      	movs	r2, #2
 8005c2c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Wait until the busy flag is reset to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c32:	9300      	str	r3, [sp, #0]
 8005c34:	693b      	ldr	r3, [r7, #16]
 8005c36:	2200      	movs	r2, #0
 8005c38:	2120      	movs	r1, #32
 8005c3a:	6878      	ldr	r0, [r7, #4]
 8005c3c:	f000 fd1e 	bl	800667c <OSPI_WaitFlagStateUntilTimeout>
 8005c40:	4603      	mov	r3, r0
 8005c42:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 8005c44:	7dfb      	ldrb	r3, [r7, #23]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d10d      	bne.n	8005c66 <HAL_OSPI_Abort+0xde>
        {
          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2202      	movs	r2, #2
 8005c4e:	651a      	str	r2, [r3, #80]	@ 0x50
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8005c50:	e009      	b.n	8005c66 <HAL_OSPI_Abort+0xde>
      }
    }
    else
    {
      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2202      	movs	r2, #2
 8005c56:	651a      	str	r2, [r3, #80]	@ 0x50
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8005c58:	e005      	b.n	8005c66 <HAL_OSPI_Abort+0xde>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	75fb      	strb	r3, [r7, #23]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2210      	movs	r2, #16
 8005c62:	655a      	str	r2, [r3, #84]	@ 0x54
 8005c64:	e000      	b.n	8005c68 <HAL_OSPI_Abort+0xe0>
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8005c66:	bf00      	nop
  }

  /* Return function status */
  return status;
 8005c68:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	3718      	adds	r7, #24
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	bd80      	pop	{r7, pc}

08005c72 <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 8005c72:	b480      	push	{r7}
 8005c74:	b083      	sub	sp, #12
 8005c76:	af00      	add	r7, sp, #0
 8005c78:	6078      	str	r0, [r7, #4]
 8005c7a:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	683a      	ldr	r2, [r7, #0]
 8005c80:	659a      	str	r2, [r3, #88]	@ 0x58
  return HAL_OK;
 8005c82:	2300      	movs	r3, #0
}
 8005c84:	4618      	mov	r0, r3
 8005c86:	370c      	adds	r7, #12
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8e:	4770      	bx	lr

08005c90 <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b094      	sub	sp, #80	@ 0x50
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	60f8      	str	r0, [r7, #12]
 8005c98:	60b9      	str	r1, [r7, #8]
 8005c9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
  assert_param(IS_OSPIM_DQS_PORT(cfg->DQSPort));
  assert_param(IS_OSPIM_PORT(cfg->NCSPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOLowPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));

  if (hospi->Instance == (OCTOSPI_TypeDef *)OCTOSPI1)
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4a9d      	ldr	r2, [pc, #628]	@ (8005f24 <HAL_OSPIM_Config+0x294>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d105      	bne.n	8005cbe <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	64bb      	str	r3, [r7, #72]	@ 0x48
    other_instance = 1U;
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 8005cbc:	e004      	b.n	8005cc8 <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	64bb      	str	r3, [r7, #72]	@ 0x48
    other_instance = 0U;
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8005cc8:	2300      	movs	r3, #0
 8005cca:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8005cce:	e01d      	b.n	8005d0c <HAL_OSPIM_Config+0x7c>
  {
    if (OSPIM_GetConfig(index + 1U, &(IOM_cfg[index])) != HAL_OK)
 8005cd0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8005cd4:	3301      	adds	r3, #1
 8005cd6:	b2d8      	uxtb	r0, r3
 8005cd8:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8005cdc:	f107 0114 	add.w	r1, r7, #20
 8005ce0:	4613      	mov	r3, r2
 8005ce2:	005b      	lsls	r3, r3, #1
 8005ce4:	4413      	add	r3, r2
 8005ce6:	00db      	lsls	r3, r3, #3
 8005ce8:	440b      	add	r3, r1
 8005cea:	4619      	mov	r1, r3
 8005cec:	f000 fd06 	bl	80066fc <OSPIM_GetConfig>
 8005cf0:	4603      	mov	r3, r0
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d005      	beq.n	8005d02 <HAL_OSPIM_Config+0x72>
    {
      status = HAL_ERROR;
 8005cf6:	2301      	movs	r3, #1
 8005cf8:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	2208      	movs	r2, #8
 8005d00:	655a      	str	r2, [r3, #84]	@ 0x54
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8005d02:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8005d06:	3301      	adds	r3, #1
 8005d08:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8005d0c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8005d10:	2b01      	cmp	r3, #1
 8005d12:	d9dd      	bls.n	8005cd0 <HAL_OSPIM_Config+0x40>
    }
  }

  if (status == HAL_OK)
 8005d14:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	f040 84a2 	bne.w	8006662 <HAL_OSPIM_Config+0x9d2>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 8005d1e:	4b81      	ldr	r3, [pc, #516]	@ (8005f24 <HAL_OSPIM_Config+0x294>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f003 0301 	and.w	r3, r3, #1
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d00b      	beq.n	8005d42 <HAL_OSPIM_Config+0xb2>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8005d2a:	4b7e      	ldr	r3, [pc, #504]	@ (8005f24 <HAL_OSPIM_Config+0x294>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4a7d      	ldr	r2, [pc, #500]	@ (8005f24 <HAL_OSPIM_Config+0x294>)
 8005d30:	f023 0301 	bic.w	r3, r3, #1
 8005d34:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 8005d36:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8005d3a:	f043 0301 	orr.w	r3, r3, #1
 8005d3e:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 8005d42:	4b79      	ldr	r3, [pc, #484]	@ (8005f28 <HAL_OSPIM_Config+0x298>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f003 0301 	and.w	r3, r3, #1
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d00b      	beq.n	8005d66 <HAL_OSPIM_Config+0xd6>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8005d4e:	4b76      	ldr	r3, [pc, #472]	@ (8005f28 <HAL_OSPIM_Config+0x298>)
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4a75      	ldr	r2, [pc, #468]	@ (8005f28 <HAL_OSPIM_Config+0x298>)
 8005d54:	f023 0301 	bic.w	r3, r3, #1
 8005d58:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 8005d5a:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8005d5e:	f043 0302 	orr.w	r3, r3, #2
 8005d62:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 8005d66:	4971      	ldr	r1, [pc, #452]	@ (8005f2c <HAL_OSPIM_Config+0x29c>)
 8005d68:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005d6a:	4613      	mov	r3, r2
 8005d6c:	005b      	lsls	r3, r3, #1
 8005d6e:	4413      	add	r3, r2
 8005d70:	00db      	lsls	r3, r3, #3
 8005d72:	3350      	adds	r3, #80	@ 0x50
 8005d74:	443b      	add	r3, r7
 8005d76:	3b34      	subs	r3, #52	@ 0x34
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	3b01      	subs	r3, #1
 8005d7c:	009b      	lsls	r3, r3, #2
 8005d7e:	440b      	add	r3, r1
 8005d80:	6859      	ldr	r1, [r3, #4]
 8005d82:	486a      	ldr	r0, [pc, #424]	@ (8005f2c <HAL_OSPIM_Config+0x29c>)
 8005d84:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005d86:	4613      	mov	r3, r2
 8005d88:	005b      	lsls	r3, r3, #1
 8005d8a:	4413      	add	r3, r2
 8005d8c:	00db      	lsls	r3, r3, #3
 8005d8e:	3350      	adds	r3, #80	@ 0x50
 8005d90:	443b      	add	r3, r7
 8005d92:	3b34      	subs	r3, #52	@ 0x34
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	3b01      	subs	r3, #1
 8005d98:	f421 7280 	bic.w	r2, r1, #256	@ 0x100
 8005d9c:	009b      	lsls	r3, r3, #2
 8005d9e:	4403      	add	r3, r0
 8005da0:	605a      	str	r2, [r3, #4]
    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 8005da2:	4b62      	ldr	r3, [pc, #392]	@ (8005f2c <HAL_OSPIM_Config+0x29c>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f003 0301 	and.w	r3, r3, #1
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	f000 80c0 	beq.w	8005f30 <HAL_OSPIM_Config+0x2a0>
    {
      /* De-multiplexing should be performed */
      CLEAR_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 8005db0:	4b5e      	ldr	r3, [pc, #376]	@ (8005f2c <HAL_OSPIM_Config+0x29c>)
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	4a5d      	ldr	r2, [pc, #372]	@ (8005f2c <HAL_OSPIM_Config+0x29c>)
 8005db6:	f023 0301 	bic.w	r3, r3, #1
 8005dba:	6013      	str	r3, [r2, #0]

      if (other_instance == 1U)
 8005dbc:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8005dc0:	2b01      	cmp	r3, #1
 8005dc2:	f040 8162 	bne.w	800608a <HAL_OSPIM_Config+0x3fa>
      {
        SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKSRC);
 8005dc6:	4959      	ldr	r1, [pc, #356]	@ (8005f2c <HAL_OSPIM_Config+0x29c>)
 8005dc8:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8005dcc:	4613      	mov	r3, r2
 8005dce:	005b      	lsls	r3, r3, #1
 8005dd0:	4413      	add	r3, r2
 8005dd2:	00db      	lsls	r3, r3, #3
 8005dd4:	3350      	adds	r3, #80	@ 0x50
 8005dd6:	443b      	add	r3, r7
 8005dd8:	3b3c      	subs	r3, #60	@ 0x3c
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	3b01      	subs	r3, #1
 8005dde:	009b      	lsls	r3, r3, #2
 8005de0:	440b      	add	r3, r1
 8005de2:	6859      	ldr	r1, [r3, #4]
 8005de4:	4851      	ldr	r0, [pc, #324]	@ (8005f2c <HAL_OSPIM_Config+0x29c>)
 8005de6:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8005dea:	4613      	mov	r3, r2
 8005dec:	005b      	lsls	r3, r3, #1
 8005dee:	4413      	add	r3, r2
 8005df0:	00db      	lsls	r3, r3, #3
 8005df2:	3350      	adds	r3, #80	@ 0x50
 8005df4:	443b      	add	r3, r7
 8005df6:	3b3c      	subs	r3, #60	@ 0x3c
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	3b01      	subs	r3, #1
 8005dfc:	f041 0202 	orr.w	r2, r1, #2
 8005e00:	009b      	lsls	r3, r3, #2
 8005e02:	4403      	add	r3, r0
 8005e04:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8005e06:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8005e0a:	4613      	mov	r3, r2
 8005e0c:	005b      	lsls	r3, r3, #1
 8005e0e:	4413      	add	r3, r2
 8005e10:	00db      	lsls	r3, r3, #3
 8005e12:	3350      	adds	r3, #80	@ 0x50
 8005e14:	443b      	add	r3, r7
 8005e16:	3b38      	subs	r3, #56	@ 0x38
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d01f      	beq.n	8005e5e <HAL_OSPIM_Config+0x1ce>
        {
          SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSSRC);
 8005e1e:	4943      	ldr	r1, [pc, #268]	@ (8005f2c <HAL_OSPIM_Config+0x29c>)
 8005e20:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8005e24:	4613      	mov	r3, r2
 8005e26:	005b      	lsls	r3, r3, #1
 8005e28:	4413      	add	r3, r2
 8005e2a:	00db      	lsls	r3, r3, #3
 8005e2c:	3350      	adds	r3, #80	@ 0x50
 8005e2e:	443b      	add	r3, r7
 8005e30:	3b38      	subs	r3, #56	@ 0x38
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	3b01      	subs	r3, #1
 8005e36:	009b      	lsls	r3, r3, #2
 8005e38:	440b      	add	r3, r1
 8005e3a:	6859      	ldr	r1, [r3, #4]
 8005e3c:	483b      	ldr	r0, [pc, #236]	@ (8005f2c <HAL_OSPIM_Config+0x29c>)
 8005e3e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8005e42:	4613      	mov	r3, r2
 8005e44:	005b      	lsls	r3, r3, #1
 8005e46:	4413      	add	r3, r2
 8005e48:	00db      	lsls	r3, r3, #3
 8005e4a:	3350      	adds	r3, #80	@ 0x50
 8005e4c:	443b      	add	r3, r7
 8005e4e:	3b38      	subs	r3, #56	@ 0x38
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	3b01      	subs	r3, #1
 8005e54:	f041 0220 	orr.w	r2, r1, #32
 8005e58:	009b      	lsls	r3, r3, #2
 8005e5a:	4403      	add	r3, r0
 8005e5c:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8005e5e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8005e62:	4613      	mov	r3, r2
 8005e64:	005b      	lsls	r3, r3, #1
 8005e66:	4413      	add	r3, r2
 8005e68:	00db      	lsls	r3, r3, #3
 8005e6a:	3350      	adds	r3, #80	@ 0x50
 8005e6c:	443b      	add	r3, r7
 8005e6e:	3b30      	subs	r3, #48	@ 0x30
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d023      	beq.n	8005ebe <HAL_OSPIM_Config+0x22e>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], \
 8005e76:	492d      	ldr	r1, [pc, #180]	@ (8005f2c <HAL_OSPIM_Config+0x29c>)
 8005e78:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8005e7c:	4613      	mov	r3, r2
 8005e7e:	005b      	lsls	r3, r3, #1
 8005e80:	4413      	add	r3, r2
 8005e82:	00db      	lsls	r3, r3, #3
 8005e84:	3350      	adds	r3, #80	@ 0x50
 8005e86:	443b      	add	r3, r7
 8005e88:	3b30      	subs	r3, #48	@ 0x30
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	3b01      	subs	r3, #1
 8005e8e:	f003 0301 	and.w	r3, r3, #1
 8005e92:	009b      	lsls	r3, r3, #2
 8005e94:	440b      	add	r3, r1
 8005e96:	6859      	ldr	r1, [r3, #4]
 8005e98:	4824      	ldr	r0, [pc, #144]	@ (8005f2c <HAL_OSPIM_Config+0x29c>)
 8005e9a:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8005e9e:	4613      	mov	r3, r2
 8005ea0:	005b      	lsls	r3, r3, #1
 8005ea2:	4413      	add	r3, r2
 8005ea4:	00db      	lsls	r3, r3, #3
 8005ea6:	3350      	adds	r3, #80	@ 0x50
 8005ea8:	443b      	add	r3, r7
 8005eaa:	3b30      	subs	r3, #48	@ 0x30
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	3b01      	subs	r3, #1
 8005eb0:	f003 0301 	and.w	r3, r3, #1
 8005eb4:	f441 2280 	orr.w	r2, r1, #262144	@ 0x40000
 8005eb8:	009b      	lsls	r3, r3, #2
 8005eba:	4403      	add	r3, r0
 8005ebc:	605a      	str	r2, [r3, #4]
                  OCTOSPIM_PCR_IOLSRC_1);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8005ebe:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8005ec2:	4613      	mov	r3, r2
 8005ec4:	005b      	lsls	r3, r3, #1
 8005ec6:	4413      	add	r3, r2
 8005ec8:	00db      	lsls	r3, r3, #3
 8005eca:	3350      	adds	r3, #80	@ 0x50
 8005ecc:	443b      	add	r3, r7
 8005ece:	3b2c      	subs	r3, #44	@ 0x2c
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	f000 80d9 	beq.w	800608a <HAL_OSPIM_Config+0x3fa>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], \
 8005ed8:	4914      	ldr	r1, [pc, #80]	@ (8005f2c <HAL_OSPIM_Config+0x29c>)
 8005eda:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8005ede:	4613      	mov	r3, r2
 8005ee0:	005b      	lsls	r3, r3, #1
 8005ee2:	4413      	add	r3, r2
 8005ee4:	00db      	lsls	r3, r3, #3
 8005ee6:	3350      	adds	r3, #80	@ 0x50
 8005ee8:	443b      	add	r3, r7
 8005eea:	3b2c      	subs	r3, #44	@ 0x2c
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	3b01      	subs	r3, #1
 8005ef0:	f003 0301 	and.w	r3, r3, #1
 8005ef4:	009b      	lsls	r3, r3, #2
 8005ef6:	440b      	add	r3, r1
 8005ef8:	6859      	ldr	r1, [r3, #4]
 8005efa:	480c      	ldr	r0, [pc, #48]	@ (8005f2c <HAL_OSPIM_Config+0x29c>)
 8005efc:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8005f00:	4613      	mov	r3, r2
 8005f02:	005b      	lsls	r3, r3, #1
 8005f04:	4413      	add	r3, r2
 8005f06:	00db      	lsls	r3, r3, #3
 8005f08:	3350      	adds	r3, #80	@ 0x50
 8005f0a:	443b      	add	r3, r7
 8005f0c:	3b2c      	subs	r3, #44	@ 0x2c
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	3b01      	subs	r3, #1
 8005f12:	f003 0301 	and.w	r3, r3, #1
 8005f16:	f041 6280 	orr.w	r2, r1, #67108864	@ 0x4000000
 8005f1a:	009b      	lsls	r3, r3, #2
 8005f1c:	4403      	add	r3, r0
 8005f1e:	605a      	str	r2, [r3, #4]
 8005f20:	e0b3      	b.n	800608a <HAL_OSPIM_Config+0x3fa>
 8005f22:	bf00      	nop
 8005f24:	420d1400 	.word	0x420d1400
 8005f28:	420d2400 	.word	0x420d2400
 8005f2c:	420c4000 	.word	0x420c4000
        }
      }
    }
    else
    {
      if (IOM_cfg[instance].ClkPort != 0U)
 8005f30:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005f32:	4613      	mov	r3, r2
 8005f34:	005b      	lsls	r3, r3, #1
 8005f36:	4413      	add	r3, r2
 8005f38:	00db      	lsls	r3, r3, #3
 8005f3a:	3350      	adds	r3, #80	@ 0x50
 8005f3c:	443b      	add	r3, r7
 8005f3e:	3b3c      	subs	r3, #60	@ 0x3c
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	f000 80a1 	beq.w	800608a <HAL_OSPIM_Config+0x3fa>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 8005f48:	4995      	ldr	r1, [pc, #596]	@ (80061a0 <HAL_OSPIM_Config+0x510>)
 8005f4a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005f4c:	4613      	mov	r3, r2
 8005f4e:	005b      	lsls	r3, r3, #1
 8005f50:	4413      	add	r3, r2
 8005f52:	00db      	lsls	r3, r3, #3
 8005f54:	3350      	adds	r3, #80	@ 0x50
 8005f56:	443b      	add	r3, r7
 8005f58:	3b3c      	subs	r3, #60	@ 0x3c
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	3b01      	subs	r3, #1
 8005f5e:	009b      	lsls	r3, r3, #2
 8005f60:	440b      	add	r3, r1
 8005f62:	6859      	ldr	r1, [r3, #4]
 8005f64:	488e      	ldr	r0, [pc, #568]	@ (80061a0 <HAL_OSPIM_Config+0x510>)
 8005f66:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005f68:	4613      	mov	r3, r2
 8005f6a:	005b      	lsls	r3, r3, #1
 8005f6c:	4413      	add	r3, r2
 8005f6e:	00db      	lsls	r3, r3, #3
 8005f70:	3350      	adds	r3, #80	@ 0x50
 8005f72:	443b      	add	r3, r7
 8005f74:	3b3c      	subs	r3, #60	@ 0x3c
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	3b01      	subs	r3, #1
 8005f7a:	f021 0201 	bic.w	r2, r1, #1
 8005f7e:	009b      	lsls	r3, r3, #2
 8005f80:	4403      	add	r3, r0
 8005f82:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 8005f84:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005f86:	4613      	mov	r3, r2
 8005f88:	005b      	lsls	r3, r3, #1
 8005f8a:	4413      	add	r3, r2
 8005f8c:	00db      	lsls	r3, r3, #3
 8005f8e:	3350      	adds	r3, #80	@ 0x50
 8005f90:	443b      	add	r3, r7
 8005f92:	3b38      	subs	r3, #56	@ 0x38
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d01d      	beq.n	8005fd6 <HAL_OSPIM_Config+0x346>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 8005f9a:	4981      	ldr	r1, [pc, #516]	@ (80061a0 <HAL_OSPIM_Config+0x510>)
 8005f9c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005f9e:	4613      	mov	r3, r2
 8005fa0:	005b      	lsls	r3, r3, #1
 8005fa2:	4413      	add	r3, r2
 8005fa4:	00db      	lsls	r3, r3, #3
 8005fa6:	3350      	adds	r3, #80	@ 0x50
 8005fa8:	443b      	add	r3, r7
 8005faa:	3b38      	subs	r3, #56	@ 0x38
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	3b01      	subs	r3, #1
 8005fb0:	009b      	lsls	r3, r3, #2
 8005fb2:	440b      	add	r3, r1
 8005fb4:	6859      	ldr	r1, [r3, #4]
 8005fb6:	487a      	ldr	r0, [pc, #488]	@ (80061a0 <HAL_OSPIM_Config+0x510>)
 8005fb8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005fba:	4613      	mov	r3, r2
 8005fbc:	005b      	lsls	r3, r3, #1
 8005fbe:	4413      	add	r3, r2
 8005fc0:	00db      	lsls	r3, r3, #3
 8005fc2:	3350      	adds	r3, #80	@ 0x50
 8005fc4:	443b      	add	r3, r7
 8005fc6:	3b38      	subs	r3, #56	@ 0x38
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	3b01      	subs	r3, #1
 8005fcc:	f021 0210 	bic.w	r2, r1, #16
 8005fd0:	009b      	lsls	r3, r3, #2
 8005fd2:	4403      	add	r3, r0
 8005fd4:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8005fd6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005fd8:	4613      	mov	r3, r2
 8005fda:	005b      	lsls	r3, r3, #1
 8005fdc:	4413      	add	r3, r2
 8005fde:	00db      	lsls	r3, r3, #3
 8005fe0:	3350      	adds	r3, #80	@ 0x50
 8005fe2:	443b      	add	r3, r7
 8005fe4:	3b30      	subs	r3, #48	@ 0x30
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d021      	beq.n	8006030 <HAL_OSPIM_Config+0x3a0>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 8005fec:	496c      	ldr	r1, [pc, #432]	@ (80061a0 <HAL_OSPIM_Config+0x510>)
 8005fee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005ff0:	4613      	mov	r3, r2
 8005ff2:	005b      	lsls	r3, r3, #1
 8005ff4:	4413      	add	r3, r2
 8005ff6:	00db      	lsls	r3, r3, #3
 8005ff8:	3350      	adds	r3, #80	@ 0x50
 8005ffa:	443b      	add	r3, r7
 8005ffc:	3b30      	subs	r3, #48	@ 0x30
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	3b01      	subs	r3, #1
 8006002:	f003 0301 	and.w	r3, r3, #1
 8006006:	009b      	lsls	r3, r3, #2
 8006008:	440b      	add	r3, r1
 800600a:	6859      	ldr	r1, [r3, #4]
 800600c:	4864      	ldr	r0, [pc, #400]	@ (80061a0 <HAL_OSPIM_Config+0x510>)
 800600e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006010:	4613      	mov	r3, r2
 8006012:	005b      	lsls	r3, r3, #1
 8006014:	4413      	add	r3, r2
 8006016:	00db      	lsls	r3, r3, #3
 8006018:	3350      	adds	r3, #80	@ 0x50
 800601a:	443b      	add	r3, r7
 800601c:	3b30      	subs	r3, #48	@ 0x30
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	3b01      	subs	r3, #1
 8006022:	f003 0301 	and.w	r3, r3, #1
 8006026:	f421 3280 	bic.w	r2, r1, #65536	@ 0x10000
 800602a:	009b      	lsls	r3, r3, #2
 800602c:	4403      	add	r3, r0
 800602e:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8006030:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006032:	4613      	mov	r3, r2
 8006034:	005b      	lsls	r3, r3, #1
 8006036:	4413      	add	r3, r2
 8006038:	00db      	lsls	r3, r3, #3
 800603a:	3350      	adds	r3, #80	@ 0x50
 800603c:	443b      	add	r3, r7
 800603e:	3b2c      	subs	r3, #44	@ 0x2c
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d021      	beq.n	800608a <HAL_OSPIM_Config+0x3fa>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 8006046:	4956      	ldr	r1, [pc, #344]	@ (80061a0 <HAL_OSPIM_Config+0x510>)
 8006048:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800604a:	4613      	mov	r3, r2
 800604c:	005b      	lsls	r3, r3, #1
 800604e:	4413      	add	r3, r2
 8006050:	00db      	lsls	r3, r3, #3
 8006052:	3350      	adds	r3, #80	@ 0x50
 8006054:	443b      	add	r3, r7
 8006056:	3b2c      	subs	r3, #44	@ 0x2c
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	3b01      	subs	r3, #1
 800605c:	f003 0301 	and.w	r3, r3, #1
 8006060:	009b      	lsls	r3, r3, #2
 8006062:	440b      	add	r3, r1
 8006064:	6859      	ldr	r1, [r3, #4]
 8006066:	484e      	ldr	r0, [pc, #312]	@ (80061a0 <HAL_OSPIM_Config+0x510>)
 8006068:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800606a:	4613      	mov	r3, r2
 800606c:	005b      	lsls	r3, r3, #1
 800606e:	4413      	add	r3, r2
 8006070:	00db      	lsls	r3, r3, #3
 8006072:	3350      	adds	r3, #80	@ 0x50
 8006074:	443b      	add	r3, r7
 8006076:	3b2c      	subs	r3, #44	@ 0x2c
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	3b01      	subs	r3, #1
 800607c:	f003 0301 	and.w	r3, r3, #1
 8006080:	f021 7280 	bic.w	r2, r1, #16777216	@ 0x1000000
 8006084:	009b      	lsls	r3, r3, #2
 8006086:	4403      	add	r3, r0
 8006088:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) ||
 800608a:	68bb      	ldr	r3, [r7, #8]
 800608c:	6819      	ldr	r1, [r3, #0]
 800608e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8006092:	4613      	mov	r3, r2
 8006094:	005b      	lsls	r3, r3, #1
 8006096:	4413      	add	r3, r2
 8006098:	00db      	lsls	r3, r3, #3
 800609a:	3350      	adds	r3, #80	@ 0x50
 800609c:	443b      	add	r3, r7
 800609e:	3b3c      	subs	r3, #60	@ 0x3c
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	4299      	cmp	r1, r3
 80060a4:	d03c      	beq.n	8006120 <HAL_OSPIM_Config+0x490>
 80060a6:	68bb      	ldr	r3, [r7, #8]
 80060a8:	6899      	ldr	r1, [r3, #8]
 80060aa:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80060ae:	4613      	mov	r3, r2
 80060b0:	005b      	lsls	r3, r3, #1
 80060b2:	4413      	add	r3, r2
 80060b4:	00db      	lsls	r3, r3, #3
 80060b6:	3350      	adds	r3, #80	@ 0x50
 80060b8:	443b      	add	r3, r7
 80060ba:	3b34      	subs	r3, #52	@ 0x34
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	4299      	cmp	r1, r3
 80060c0:	d02e      	beq.n	8006120 <HAL_OSPIM_Config+0x490>
        ((cfg->DQSPort == IOM_cfg[other_instance].DQSPort) && (cfg->DQSPort != 0U)) ||
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	6859      	ldr	r1, [r3, #4]
 80060c6:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80060ca:	4613      	mov	r3, r2
 80060cc:	005b      	lsls	r3, r3, #1
 80060ce:	4413      	add	r3, r2
 80060d0:	00db      	lsls	r3, r3, #3
 80060d2:	3350      	adds	r3, #80	@ 0x50
 80060d4:	443b      	add	r3, r7
 80060d6:	3b38      	subs	r3, #56	@ 0x38
 80060d8:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) ||
 80060da:	4299      	cmp	r1, r3
 80060dc:	d103      	bne.n	80060e6 <HAL_OSPIM_Config+0x456>
        ((cfg->DQSPort == IOM_cfg[other_instance].DQSPort) && (cfg->DQSPort != 0U)) ||
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	685b      	ldr	r3, [r3, #4]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d11c      	bne.n	8006120 <HAL_OSPIM_Config+0x490>
        (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 80060e6:	68bb      	ldr	r3, [r7, #8]
 80060e8:	68d9      	ldr	r1, [r3, #12]
 80060ea:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80060ee:	4613      	mov	r3, r2
 80060f0:	005b      	lsls	r3, r3, #1
 80060f2:	4413      	add	r3, r2
 80060f4:	00db      	lsls	r3, r3, #3
 80060f6:	3350      	adds	r3, #80	@ 0x50
 80060f8:	443b      	add	r3, r7
 80060fa:	3b30      	subs	r3, #48	@ 0x30
 80060fc:	681b      	ldr	r3, [r3, #0]
        ((cfg->DQSPort == IOM_cfg[other_instance].DQSPort) && (cfg->DQSPort != 0U)) ||
 80060fe:	4299      	cmp	r1, r3
 8006100:	d00e      	beq.n	8006120 <HAL_OSPIM_Config+0x490>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8006102:	68bb      	ldr	r3, [r7, #8]
 8006104:	6919      	ldr	r1, [r3, #16]
 8006106:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800610a:	4613      	mov	r3, r2
 800610c:	005b      	lsls	r3, r3, #1
 800610e:	4413      	add	r3, r2
 8006110:	00db      	lsls	r3, r3, #3
 8006112:	3350      	adds	r3, #80	@ 0x50
 8006114:	443b      	add	r3, r7
 8006116:	3b2c      	subs	r3, #44	@ 0x2c
 8006118:	681b      	ldr	r3, [r3, #0]
        (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 800611a:	4299      	cmp	r1, r3
 800611c:	f040 810e 	bne.w	800633c <HAL_OSPIM_Config+0x6ac>
    {
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	6819      	ldr	r1, [r3, #0]
 8006124:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8006128:	4613      	mov	r3, r2
 800612a:	005b      	lsls	r3, r3, #1
 800612c:	4413      	add	r3, r2
 800612e:	00db      	lsls	r3, r3, #3
 8006130:	3350      	adds	r3, #80	@ 0x50
 8006132:	443b      	add	r3, r7
 8006134:	3b3c      	subs	r3, #60	@ 0x3c
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	4299      	cmp	r1, r3
 800613a:	d133      	bne.n	80061a4 <HAL_OSPIM_Config+0x514>
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	6859      	ldr	r1, [r3, #4]
 8006140:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8006144:	4613      	mov	r3, r2
 8006146:	005b      	lsls	r3, r3, #1
 8006148:	4413      	add	r3, r2
 800614a:	00db      	lsls	r3, r3, #3
 800614c:	3350      	adds	r3, #80	@ 0x50
 800614e:	443b      	add	r3, r7
 8006150:	3b38      	subs	r3, #56	@ 0x38
 8006152:	681b      	ldr	r3, [r3, #0]
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 8006154:	4299      	cmp	r1, r3
 8006156:	d125      	bne.n	80061a4 <HAL_OSPIM_Config+0x514>
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	68d9      	ldr	r1, [r3, #12]
 800615c:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8006160:	4613      	mov	r3, r2
 8006162:	005b      	lsls	r3, r3, #1
 8006164:	4413      	add	r3, r2
 8006166:	00db      	lsls	r3, r3, #3
 8006168:	3350      	adds	r3, #80	@ 0x50
 800616a:	443b      	add	r3, r7
 800616c:	3b30      	subs	r3, #48	@ 0x30
 800616e:	681b      	ldr	r3, [r3, #0]
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 8006170:	4299      	cmp	r1, r3
 8006172:	d117      	bne.n	80061a4 <HAL_OSPIM_Config+0x514>
          (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8006174:	68bb      	ldr	r3, [r7, #8]
 8006176:	6919      	ldr	r1, [r3, #16]
 8006178:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800617c:	4613      	mov	r3, r2
 800617e:	005b      	lsls	r3, r3, #1
 8006180:	4413      	add	r3, r2
 8006182:	00db      	lsls	r3, r3, #3
 8006184:	3350      	adds	r3, #80	@ 0x50
 8006186:	443b      	add	r3, r7
 8006188:	3b2c      	subs	r3, #44	@ 0x2c
 800618a:	681b      	ldr	r3, [r3, #0]
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 800618c:	4299      	cmp	r1, r3
 800618e:	d109      	bne.n	80061a4 <HAL_OSPIM_Config+0x514>
      {
        /* Multiplexing should be performed */
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 8006190:	4b03      	ldr	r3, [pc, #12]	@ (80061a0 <HAL_OSPIM_Config+0x510>)
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	4a02      	ldr	r2, [pc, #8]	@ (80061a0 <HAL_OSPIM_Config+0x510>)
 8006196:	f043 0301 	orr.w	r3, r3, #1
 800619a:	6013      	str	r3, [r2, #0]
 800619c:	e0ce      	b.n	800633c <HAL_OSPIM_Config+0x6ac>
 800619e:	bf00      	nop
 80061a0:	420c4000 	.word	0x420c4000
      }
      else
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 80061a4:	49a4      	ldr	r1, [pc, #656]	@ (8006438 <HAL_OSPIM_Config+0x7a8>)
 80061a6:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80061aa:	4613      	mov	r3, r2
 80061ac:	005b      	lsls	r3, r3, #1
 80061ae:	4413      	add	r3, r2
 80061b0:	00db      	lsls	r3, r3, #3
 80061b2:	3350      	adds	r3, #80	@ 0x50
 80061b4:	443b      	add	r3, r7
 80061b6:	3b3c      	subs	r3, #60	@ 0x3c
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	3b01      	subs	r3, #1
 80061bc:	009b      	lsls	r3, r3, #2
 80061be:	440b      	add	r3, r1
 80061c0:	6859      	ldr	r1, [r3, #4]
 80061c2:	489d      	ldr	r0, [pc, #628]	@ (8006438 <HAL_OSPIM_Config+0x7a8>)
 80061c4:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80061c8:	4613      	mov	r3, r2
 80061ca:	005b      	lsls	r3, r3, #1
 80061cc:	4413      	add	r3, r2
 80061ce:	00db      	lsls	r3, r3, #3
 80061d0:	3350      	adds	r3, #80	@ 0x50
 80061d2:	443b      	add	r3, r7
 80061d4:	3b3c      	subs	r3, #60	@ 0x3c
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	3b01      	subs	r3, #1
 80061da:	f021 0201 	bic.w	r2, r1, #1
 80061de:	009b      	lsls	r3, r3, #2
 80061e0:	4403      	add	r3, r0
 80061e2:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 80061e4:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80061e8:	4613      	mov	r3, r2
 80061ea:	005b      	lsls	r3, r3, #1
 80061ec:	4413      	add	r3, r2
 80061ee:	00db      	lsls	r3, r3, #3
 80061f0:	3350      	adds	r3, #80	@ 0x50
 80061f2:	443b      	add	r3, r7
 80061f4:	3b38      	subs	r3, #56	@ 0x38
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d01f      	beq.n	800623c <HAL_OSPIM_Config+0x5ac>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 80061fc:	498e      	ldr	r1, [pc, #568]	@ (8006438 <HAL_OSPIM_Config+0x7a8>)
 80061fe:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8006202:	4613      	mov	r3, r2
 8006204:	005b      	lsls	r3, r3, #1
 8006206:	4413      	add	r3, r2
 8006208:	00db      	lsls	r3, r3, #3
 800620a:	3350      	adds	r3, #80	@ 0x50
 800620c:	443b      	add	r3, r7
 800620e:	3b38      	subs	r3, #56	@ 0x38
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	3b01      	subs	r3, #1
 8006214:	009b      	lsls	r3, r3, #2
 8006216:	440b      	add	r3, r1
 8006218:	6859      	ldr	r1, [r3, #4]
 800621a:	4887      	ldr	r0, [pc, #540]	@ (8006438 <HAL_OSPIM_Config+0x7a8>)
 800621c:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8006220:	4613      	mov	r3, r2
 8006222:	005b      	lsls	r3, r3, #1
 8006224:	4413      	add	r3, r2
 8006226:	00db      	lsls	r3, r3, #3
 8006228:	3350      	adds	r3, #80	@ 0x50
 800622a:	443b      	add	r3, r7
 800622c:	3b38      	subs	r3, #56	@ 0x38
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	3b01      	subs	r3, #1
 8006232:	f021 0210 	bic.w	r2, r1, #16
 8006236:	009b      	lsls	r3, r3, #2
 8006238:	4403      	add	r3, r0
 800623a:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 800623c:	497e      	ldr	r1, [pc, #504]	@ (8006438 <HAL_OSPIM_Config+0x7a8>)
 800623e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8006242:	4613      	mov	r3, r2
 8006244:	005b      	lsls	r3, r3, #1
 8006246:	4413      	add	r3, r2
 8006248:	00db      	lsls	r3, r3, #3
 800624a:	3350      	adds	r3, #80	@ 0x50
 800624c:	443b      	add	r3, r7
 800624e:	3b34      	subs	r3, #52	@ 0x34
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	3b01      	subs	r3, #1
 8006254:	009b      	lsls	r3, r3, #2
 8006256:	440b      	add	r3, r1
 8006258:	6859      	ldr	r1, [r3, #4]
 800625a:	4877      	ldr	r0, [pc, #476]	@ (8006438 <HAL_OSPIM_Config+0x7a8>)
 800625c:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8006260:	4613      	mov	r3, r2
 8006262:	005b      	lsls	r3, r3, #1
 8006264:	4413      	add	r3, r2
 8006266:	00db      	lsls	r3, r3, #3
 8006268:	3350      	adds	r3, #80	@ 0x50
 800626a:	443b      	add	r3, r7
 800626c:	3b34      	subs	r3, #52	@ 0x34
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	3b01      	subs	r3, #1
 8006272:	f421 7280 	bic.w	r2, r1, #256	@ 0x100
 8006276:	009b      	lsls	r3, r3, #2
 8006278:	4403      	add	r3, r0
 800627a:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800627c:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8006280:	4613      	mov	r3, r2
 8006282:	005b      	lsls	r3, r3, #1
 8006284:	4413      	add	r3, r2
 8006286:	00db      	lsls	r3, r3, #3
 8006288:	3350      	adds	r3, #80	@ 0x50
 800628a:	443b      	add	r3, r7
 800628c:	3b30      	subs	r3, #48	@ 0x30
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d023      	beq.n	80062dc <HAL_OSPIM_Config+0x64c>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8006294:	4968      	ldr	r1, [pc, #416]	@ (8006438 <HAL_OSPIM_Config+0x7a8>)
 8006296:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800629a:	4613      	mov	r3, r2
 800629c:	005b      	lsls	r3, r3, #1
 800629e:	4413      	add	r3, r2
 80062a0:	00db      	lsls	r3, r3, #3
 80062a2:	3350      	adds	r3, #80	@ 0x50
 80062a4:	443b      	add	r3, r7
 80062a6:	3b30      	subs	r3, #48	@ 0x30
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	3b01      	subs	r3, #1
 80062ac:	f003 0301 	and.w	r3, r3, #1
 80062b0:	009b      	lsls	r3, r3, #2
 80062b2:	440b      	add	r3, r1
 80062b4:	6859      	ldr	r1, [r3, #4]
 80062b6:	4860      	ldr	r0, [pc, #384]	@ (8006438 <HAL_OSPIM_Config+0x7a8>)
 80062b8:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80062bc:	4613      	mov	r3, r2
 80062be:	005b      	lsls	r3, r3, #1
 80062c0:	4413      	add	r3, r2
 80062c2:	00db      	lsls	r3, r3, #3
 80062c4:	3350      	adds	r3, #80	@ 0x50
 80062c6:	443b      	add	r3, r7
 80062c8:	3b30      	subs	r3, #48	@ 0x30
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	3b01      	subs	r3, #1
 80062ce:	f003 0301 	and.w	r3, r3, #1
 80062d2:	f421 3280 	bic.w	r2, r1, #65536	@ 0x10000
 80062d6:	009b      	lsls	r3, r3, #2
 80062d8:	4403      	add	r3, r0
 80062da:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80062dc:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80062e0:	4613      	mov	r3, r2
 80062e2:	005b      	lsls	r3, r3, #1
 80062e4:	4413      	add	r3, r2
 80062e6:	00db      	lsls	r3, r3, #3
 80062e8:	3350      	adds	r3, #80	@ 0x50
 80062ea:	443b      	add	r3, r7
 80062ec:	3b2c      	subs	r3, #44	@ 0x2c
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d023      	beq.n	800633c <HAL_OSPIM_Config+0x6ac>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 80062f4:	4950      	ldr	r1, [pc, #320]	@ (8006438 <HAL_OSPIM_Config+0x7a8>)
 80062f6:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80062fa:	4613      	mov	r3, r2
 80062fc:	005b      	lsls	r3, r3, #1
 80062fe:	4413      	add	r3, r2
 8006300:	00db      	lsls	r3, r3, #3
 8006302:	3350      	adds	r3, #80	@ 0x50
 8006304:	443b      	add	r3, r7
 8006306:	3b2c      	subs	r3, #44	@ 0x2c
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	3b01      	subs	r3, #1
 800630c:	f003 0301 	and.w	r3, r3, #1
 8006310:	009b      	lsls	r3, r3, #2
 8006312:	440b      	add	r3, r1
 8006314:	6859      	ldr	r1, [r3, #4]
 8006316:	4848      	ldr	r0, [pc, #288]	@ (8006438 <HAL_OSPIM_Config+0x7a8>)
 8006318:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800631c:	4613      	mov	r3, r2
 800631e:	005b      	lsls	r3, r3, #1
 8006320:	4413      	add	r3, r2
 8006322:	00db      	lsls	r3, r3, #3
 8006324:	3350      	adds	r3, #80	@ 0x50
 8006326:	443b      	add	r3, r7
 8006328:	3b2c      	subs	r3, #44	@ 0x2c
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	3b01      	subs	r3, #1
 800632e:	f003 0301 	and.w	r3, r3, #1
 8006332:	f021 7280 	bic.w	r2, r1, #16777216	@ 0x1000000
 8006336:	009b      	lsls	r3, r3, #2
 8006338:	4403      	add	r3, r0
 800633a:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /******************** Activation of new configuration *********************/
    MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 800633c:	4a3e      	ldr	r2, [pc, #248]	@ (8006438 <HAL_OSPIM_Config+0x7a8>)
 800633e:	68bb      	ldr	r3, [r7, #8]
 8006340:	689b      	ldr	r3, [r3, #8]
 8006342:	3b01      	subs	r3, #1
 8006344:	009b      	lsls	r3, r3, #2
 8006346:	4413      	add	r3, r2
 8006348:	685b      	ldr	r3, [r3, #4]
 800634a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800634e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006350:	025b      	lsls	r3, r3, #9
 8006352:	431a      	orrs	r2, r3
 8006354:	4938      	ldr	r1, [pc, #224]	@ (8006438 <HAL_OSPIM_Config+0x7a8>)
 8006356:	68bb      	ldr	r3, [r7, #8]
 8006358:	689b      	ldr	r3, [r3, #8]
 800635a:	3b01      	subs	r3, #1
 800635c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006360:	009b      	lsls	r3, r3, #2
 8006362:	440b      	add	r3, r1
 8006364:	605a      	str	r2, [r3, #4]
               (OCTOSPIM_PCR_NCSEN | (instance << OCTOSPIM_PCR_NCSSRC_Pos)));

    if (((cfg->Req2AckTime) >= 1U) && ((cfg->Req2AckTime) <= 256U))
 8006366:	68bb      	ldr	r3, [r7, #8]
 8006368:	695b      	ldr	r3, [r3, #20]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d018      	beq.n	80063a0 <HAL_OSPIM_Config+0x710>
 800636e:	68bb      	ldr	r3, [r7, #8]
 8006370:	695b      	ldr	r3, [r3, #20]
 8006372:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006376:	d813      	bhi.n	80063a0 <HAL_OSPIM_Config+0x710>
    {
      if ((cfg->Req2AckTime - 1U) > ((OCTOSPIM->CR & OCTOSPIM_CR_REQ2ACK_TIME) >> OCTOSPIM_CR_REQ2ACK_TIME_Pos))
 8006378:	68bb      	ldr	r3, [r7, #8]
 800637a:	695b      	ldr	r3, [r3, #20]
 800637c:	1e5a      	subs	r2, r3, #1
 800637e:	4b2e      	ldr	r3, [pc, #184]	@ (8006438 <HAL_OSPIM_Config+0x7a8>)
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	0c1b      	lsrs	r3, r3, #16
 8006384:	b2db      	uxtb	r3, r3
 8006386:	429a      	cmp	r2, r3
 8006388:	d90a      	bls.n	80063a0 <HAL_OSPIM_Config+0x710>
      {
        MODIFY_REG(OCTOSPIM->CR, OCTOSPIM_CR_REQ2ACK_TIME, ((cfg->Req2AckTime - 1U) << OCTOSPIM_CR_REQ2ACK_TIME_Pos));
 800638a:	4b2b      	ldr	r3, [pc, #172]	@ (8006438 <HAL_OSPIM_Config+0x7a8>)
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f423 027f 	bic.w	r2, r3, #16711680	@ 0xff0000
 8006392:	68bb      	ldr	r3, [r7, #8]
 8006394:	695b      	ldr	r3, [r3, #20]
 8006396:	3b01      	subs	r3, #1
 8006398:	041b      	lsls	r3, r3, #16
 800639a:	4927      	ldr	r1, [pc, #156]	@ (8006438 <HAL_OSPIM_Config+0x7a8>)
 800639c:	4313      	orrs	r3, r2
 800639e:	600b      	str	r3, [r1, #0]
      {
        /* Nothing to do */
      }
    }

    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 80063a0:	4b25      	ldr	r3, [pc, #148]	@ (8006438 <HAL_OSPIM_Config+0x7a8>)
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f003 0301 	and.w	r3, r3, #1
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	f000 809a 	beq.w	80064e2 <HAL_OSPIM_Config+0x852>
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC), OCTOSPIM_PCR_CLKEN);
 80063ae:	4a22      	ldr	r2, [pc, #136]	@ (8006438 <HAL_OSPIM_Config+0x7a8>)
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	3b01      	subs	r3, #1
 80063b6:	009b      	lsls	r3, r3, #2
 80063b8:	4413      	add	r3, r2
 80063ba:	685b      	ldr	r3, [r3, #4]
 80063bc:	f023 0203 	bic.w	r2, r3, #3
 80063c0:	491d      	ldr	r1, [pc, #116]	@ (8006438 <HAL_OSPIM_Config+0x7a8>)
 80063c2:	68bb      	ldr	r3, [r7, #8]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	3b01      	subs	r3, #1
 80063c8:	f042 0201 	orr.w	r2, r2, #1
 80063cc:	009b      	lsls	r3, r3, #2
 80063ce:	440b      	add	r3, r1
 80063d0:	605a      	str	r2, [r3, #4]
      if (cfg->DQSPort != 0U)
 80063d2:	68bb      	ldr	r3, [r7, #8]
 80063d4:	685b      	ldr	r3, [r3, #4]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d011      	beq.n	80063fe <HAL_OSPIM_Config+0x76e>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC), OCTOSPIM_PCR_DQSEN);
 80063da:	4a17      	ldr	r2, [pc, #92]	@ (8006438 <HAL_OSPIM_Config+0x7a8>)
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	685b      	ldr	r3, [r3, #4]
 80063e0:	3b01      	subs	r3, #1
 80063e2:	009b      	lsls	r3, r3, #2
 80063e4:	4413      	add	r3, r2
 80063e6:	685b      	ldr	r3, [r3, #4]
 80063e8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80063ec:	4912      	ldr	r1, [pc, #72]	@ (8006438 <HAL_OSPIM_Config+0x7a8>)
 80063ee:	68bb      	ldr	r3, [r7, #8]
 80063f0:	685b      	ldr	r3, [r3, #4]
 80063f2:	3b01      	subs	r3, #1
 80063f4:	f042 0210 	orr.w	r2, r2, #16
 80063f8:	009b      	lsls	r3, r3, #2
 80063fa:	440b      	add	r3, r1
 80063fc:	605a      	str	r2, [r3, #4]
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 80063fe:	68bb      	ldr	r3, [r7, #8]
 8006400:	68db      	ldr	r3, [r3, #12]
 8006402:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006406:	2b00      	cmp	r3, #0
 8006408:	d018      	beq.n	800643c <HAL_OSPIM_Config+0x7ac>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 800640a:	4a0b      	ldr	r2, [pc, #44]	@ (8006438 <HAL_OSPIM_Config+0x7a8>)
 800640c:	68bb      	ldr	r3, [r7, #8]
 800640e:	68db      	ldr	r3, [r3, #12]
 8006410:	3b01      	subs	r3, #1
 8006412:	f003 0301 	and.w	r3, r3, #1
 8006416:	009b      	lsls	r3, r3, #2
 8006418:	4413      	add	r3, r2
 800641a:	685b      	ldr	r3, [r3, #4]
 800641c:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8006420:	4905      	ldr	r1, [pc, #20]	@ (8006438 <HAL_OSPIM_Config+0x7a8>)
 8006422:	68bb      	ldr	r3, [r7, #8]
 8006424:	68db      	ldr	r3, [r3, #12]
 8006426:	3b01      	subs	r3, #1
 8006428:	f003 0301 	and.w	r3, r3, #1
 800642c:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8006430:	009b      	lsls	r3, r3, #2
 8006432:	440b      	add	r3, r1
 8006434:	605a      	str	r2, [r3, #4]
 8006436:	e01b      	b.n	8006470 <HAL_OSPIM_Config+0x7e0>
 8006438:	420c4000 	.word	0x420c4000
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), OCTOSPIM_PCR_IOLEN);
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	68db      	ldr	r3, [r3, #12]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d015      	beq.n	8006470 <HAL_OSPIM_Config+0x7e0>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8006444:	4a8a      	ldr	r2, [pc, #552]	@ (8006670 <HAL_OSPIM_Config+0x9e0>)
 8006446:	68bb      	ldr	r3, [r7, #8]
 8006448:	68db      	ldr	r3, [r3, #12]
 800644a:	3b01      	subs	r3, #1
 800644c:	f003 0301 	and.w	r3, r3, #1
 8006450:	009b      	lsls	r3, r3, #2
 8006452:	4413      	add	r3, r2
 8006454:	685b      	ldr	r3, [r3, #4]
 8006456:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 800645a:	4985      	ldr	r1, [pc, #532]	@ (8006670 <HAL_OSPIM_Config+0x9e0>)
 800645c:	68bb      	ldr	r3, [r7, #8]
 800645e:	68db      	ldr	r3, [r3, #12]
 8006460:	3b01      	subs	r3, #1
 8006462:	f003 0301 	and.w	r3, r3, #1
 8006466:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 800646a:	009b      	lsls	r3, r3, #2
 800646c:	440b      	add	r3, r1
 800646e:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	691b      	ldr	r3, [r3, #16]
 8006474:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006478:	2b00      	cmp	r3, #0
 800647a:	d016      	beq.n	80064aa <HAL_OSPIM_Config+0x81a>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 800647c:	4a7c      	ldr	r2, [pc, #496]	@ (8006670 <HAL_OSPIM_Config+0x9e0>)
 800647e:	68bb      	ldr	r3, [r7, #8]
 8006480:	691b      	ldr	r3, [r3, #16]
 8006482:	3b01      	subs	r3, #1
 8006484:	f003 0301 	and.w	r3, r3, #1
 8006488:	009b      	lsls	r3, r3, #2
 800648a:	4413      	add	r3, r2
 800648c:	685b      	ldr	r3, [r3, #4]
 800648e:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8006492:	4977      	ldr	r1, [pc, #476]	@ (8006670 <HAL_OSPIM_Config+0x9e0>)
 8006494:	68bb      	ldr	r3, [r7, #8]
 8006496:	691b      	ldr	r3, [r3, #16]
 8006498:	3b01      	subs	r3, #1
 800649a:	f003 0301 	and.w	r3, r3, #1
 800649e:	f442 3240 	orr.w	r2, r2, #196608	@ 0x30000
 80064a2:	009b      	lsls	r3, r3, #2
 80064a4:	440b      	add	r3, r1
 80064a6:	605a      	str	r2, [r3, #4]
 80064a8:	e0c3      	b.n	8006632 <HAL_OSPIM_Config+0x9a2>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80064aa:	68bb      	ldr	r3, [r7, #8]
 80064ac:	691b      	ldr	r3, [r3, #16]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	f000 80bf 	beq.w	8006632 <HAL_OSPIM_Config+0x9a2>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 80064b4:	4a6e      	ldr	r2, [pc, #440]	@ (8006670 <HAL_OSPIM_Config+0x9e0>)
 80064b6:	68bb      	ldr	r3, [r7, #8]
 80064b8:	691b      	ldr	r3, [r3, #16]
 80064ba:	3b01      	subs	r3, #1
 80064bc:	f003 0301 	and.w	r3, r3, #1
 80064c0:	009b      	lsls	r3, r3, #2
 80064c2:	4413      	add	r3, r2
 80064c4:	685b      	ldr	r3, [r3, #4]
 80064c6:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 80064ca:	4969      	ldr	r1, [pc, #420]	@ (8006670 <HAL_OSPIM_Config+0x9e0>)
 80064cc:	68bb      	ldr	r3, [r7, #8]
 80064ce:	691b      	ldr	r3, [r3, #16]
 80064d0:	3b01      	subs	r3, #1
 80064d2:	f003 0301 	and.w	r3, r3, #1
 80064d6:	f042 7240 	orr.w	r2, r2, #50331648	@ 0x3000000
 80064da:	009b      	lsls	r3, r3, #2
 80064dc:	440b      	add	r3, r1
 80064de:	605a      	str	r2, [r3, #4]
 80064e0:	e0a7      	b.n	8006632 <HAL_OSPIM_Config+0x9a2>
        /* Nothing to do */
      }
    }
    else
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 80064e2:	4a63      	ldr	r2, [pc, #396]	@ (8006670 <HAL_OSPIM_Config+0x9e0>)
 80064e4:	68bb      	ldr	r3, [r7, #8]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	3b01      	subs	r3, #1
 80064ea:	009b      	lsls	r3, r3, #2
 80064ec:	4413      	add	r3, r2
 80064ee:	685b      	ldr	r3, [r3, #4]
 80064f0:	f023 0203 	bic.w	r2, r3, #3
 80064f4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80064f6:	005b      	lsls	r3, r3, #1
 80064f8:	431a      	orrs	r2, r3
 80064fa:	495d      	ldr	r1, [pc, #372]	@ (8006670 <HAL_OSPIM_Config+0x9e0>)
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	3b01      	subs	r3, #1
 8006502:	f042 0201 	orr.w	r2, r2, #1
 8006506:	009b      	lsls	r3, r3, #2
 8006508:	440b      	add	r3, r1
 800650a:	605a      	str	r2, [r3, #4]
                 (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 800650c:	68bb      	ldr	r3, [r7, #8]
 800650e:	685b      	ldr	r3, [r3, #4]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d014      	beq.n	800653e <HAL_OSPIM_Config+0x8ae>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 8006514:	4a56      	ldr	r2, [pc, #344]	@ (8006670 <HAL_OSPIM_Config+0x9e0>)
 8006516:	68bb      	ldr	r3, [r7, #8]
 8006518:	685b      	ldr	r3, [r3, #4]
 800651a:	3b01      	subs	r3, #1
 800651c:	009b      	lsls	r3, r3, #2
 800651e:	4413      	add	r3, r2
 8006520:	685b      	ldr	r3, [r3, #4]
 8006522:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006526:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006528:	015b      	lsls	r3, r3, #5
 800652a:	431a      	orrs	r2, r3
 800652c:	4950      	ldr	r1, [pc, #320]	@ (8006670 <HAL_OSPIM_Config+0x9e0>)
 800652e:	68bb      	ldr	r3, [r7, #8]
 8006530:	685b      	ldr	r3, [r3, #4]
 8006532:	3b01      	subs	r3, #1
 8006534:	f042 0210 	orr.w	r2, r2, #16
 8006538:	009b      	lsls	r3, r3, #2
 800653a:	440b      	add	r3, r1
 800653c:	605a      	str	r2, [r3, #4]
                   (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 800653e:	68bb      	ldr	r3, [r7, #8]
 8006540:	68db      	ldr	r3, [r3, #12]
 8006542:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006546:	2b00      	cmp	r3, #0
 8006548:	d019      	beq.n	800657e <HAL_OSPIM_Config+0x8ee>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 800654a:	4a49      	ldr	r2, [pc, #292]	@ (8006670 <HAL_OSPIM_Config+0x9e0>)
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	68db      	ldr	r3, [r3, #12]
 8006550:	3b01      	subs	r3, #1
 8006552:	f003 0301 	and.w	r3, r3, #1
 8006556:	009b      	lsls	r3, r3, #2
 8006558:	4413      	add	r3, r2
 800655a:	685b      	ldr	r3, [r3, #4]
 800655c:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8006560:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006562:	049b      	lsls	r3, r3, #18
 8006564:	431a      	orrs	r2, r3
 8006566:	4942      	ldr	r1, [pc, #264]	@ (8006670 <HAL_OSPIM_Config+0x9e0>)
 8006568:	68bb      	ldr	r3, [r7, #8]
 800656a:	68db      	ldr	r3, [r3, #12]
 800656c:	3b01      	subs	r3, #1
 800656e:	f003 0301 	and.w	r3, r3, #1
 8006572:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8006576:	009b      	lsls	r3, r3, #2
 8006578:	440b      	add	r3, r1
 800657a:	605a      	str	r2, [r3, #4]
 800657c:	e01c      	b.n	80065b8 <HAL_OSPIM_Config+0x928>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800657e:	68bb      	ldr	r3, [r7, #8]
 8006580:	68db      	ldr	r3, [r3, #12]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d018      	beq.n	80065b8 <HAL_OSPIM_Config+0x928>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8006586:	4a3a      	ldr	r2, [pc, #232]	@ (8006670 <HAL_OSPIM_Config+0x9e0>)
 8006588:	68bb      	ldr	r3, [r7, #8]
 800658a:	68db      	ldr	r3, [r3, #12]
 800658c:	3b01      	subs	r3, #1
 800658e:	f003 0301 	and.w	r3, r3, #1
 8006592:	009b      	lsls	r3, r3, #2
 8006594:	4413      	add	r3, r2
 8006596:	685b      	ldr	r3, [r3, #4]
 8006598:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 800659c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800659e:	069b      	lsls	r3, r3, #26
 80065a0:	431a      	orrs	r2, r3
 80065a2:	4933      	ldr	r1, [pc, #204]	@ (8006670 <HAL_OSPIM_Config+0x9e0>)
 80065a4:	68bb      	ldr	r3, [r7, #8]
 80065a6:	68db      	ldr	r3, [r3, #12]
 80065a8:	3b01      	subs	r3, #1
 80065aa:	f003 0301 	and.w	r3, r3, #1
 80065ae:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 80065b2:	009b      	lsls	r3, r3, #2
 80065b4:	440b      	add	r3, r1
 80065b6:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 80065b8:	68bb      	ldr	r3, [r7, #8]
 80065ba:	691b      	ldr	r3, [r3, #16]
 80065bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d019      	beq.n	80065f8 <HAL_OSPIM_Config+0x968>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 80065c4:	4a2a      	ldr	r2, [pc, #168]	@ (8006670 <HAL_OSPIM_Config+0x9e0>)
 80065c6:	68bb      	ldr	r3, [r7, #8]
 80065c8:	691b      	ldr	r3, [r3, #16]
 80065ca:	3b01      	subs	r3, #1
 80065cc:	f003 0301 	and.w	r3, r3, #1
 80065d0:	009b      	lsls	r3, r3, #2
 80065d2:	4413      	add	r3, r2
 80065d4:	685b      	ldr	r3, [r3, #4]
 80065d6:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 80065da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80065dc:	049b      	lsls	r3, r3, #18
 80065de:	431a      	orrs	r2, r3
 80065e0:	4923      	ldr	r1, [pc, #140]	@ (8006670 <HAL_OSPIM_Config+0x9e0>)
 80065e2:	68bb      	ldr	r3, [r7, #8]
 80065e4:	691b      	ldr	r3, [r3, #16]
 80065e6:	3b01      	subs	r3, #1
 80065e8:	f003 0301 	and.w	r3, r3, #1
 80065ec:	f442 3240 	orr.w	r2, r2, #196608	@ 0x30000
 80065f0:	009b      	lsls	r3, r3, #2
 80065f2:	440b      	add	r3, r1
 80065f4:	605a      	str	r2, [r3, #4]
 80065f6:	e01c      	b.n	8006632 <HAL_OSPIM_Config+0x9a2>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80065f8:	68bb      	ldr	r3, [r7, #8]
 80065fa:	691b      	ldr	r3, [r3, #16]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d018      	beq.n	8006632 <HAL_OSPIM_Config+0x9a2>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8006600:	4a1b      	ldr	r2, [pc, #108]	@ (8006670 <HAL_OSPIM_Config+0x9e0>)
 8006602:	68bb      	ldr	r3, [r7, #8]
 8006604:	691b      	ldr	r3, [r3, #16]
 8006606:	3b01      	subs	r3, #1
 8006608:	f003 0301 	and.w	r3, r3, #1
 800660c:	009b      	lsls	r3, r3, #2
 800660e:	4413      	add	r3, r2
 8006610:	685b      	ldr	r3, [r3, #4]
 8006612:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 8006616:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006618:	069b      	lsls	r3, r3, #26
 800661a:	431a      	orrs	r2, r3
 800661c:	4914      	ldr	r1, [pc, #80]	@ (8006670 <HAL_OSPIM_Config+0x9e0>)
 800661e:	68bb      	ldr	r3, [r7, #8]
 8006620:	691b      	ldr	r3, [r3, #16]
 8006622:	3b01      	subs	r3, #1
 8006624:	f003 0301 	and.w	r3, r3, #1
 8006628:	f042 7240 	orr.w	r2, r2, #50331648	@ 0x3000000
 800662c:	009b      	lsls	r3, r3, #2
 800662e:	440b      	add	r3, r1
 8006630:	605a      	str	r2, [r3, #4]
        /* Nothing to do */
      }
    }

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 8006632:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8006636:	f003 0301 	and.w	r3, r3, #1
 800663a:	2b00      	cmp	r3, #0
 800663c:	d005      	beq.n	800664a <HAL_OSPIM_Config+0x9ba>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 800663e:	4b0d      	ldr	r3, [pc, #52]	@ (8006674 <HAL_OSPIM_Config+0x9e4>)
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	4a0c      	ldr	r2, [pc, #48]	@ (8006674 <HAL_OSPIM_Config+0x9e4>)
 8006644:	f043 0301 	orr.w	r3, r3, #1
 8006648:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 800664a:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800664e:	f003 0302 	and.w	r3, r3, #2
 8006652:	2b00      	cmp	r3, #0
 8006654:	d005      	beq.n	8006662 <HAL_OSPIM_Config+0x9d2>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8006656:	4b08      	ldr	r3, [pc, #32]	@ (8006678 <HAL_OSPIM_Config+0x9e8>)
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	4a07      	ldr	r2, [pc, #28]	@ (8006678 <HAL_OSPIM_Config+0x9e8>)
 800665c:	f043 0301 	orr.w	r3, r3, #1
 8006660:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 8006662:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 8006666:	4618      	mov	r0, r3
 8006668:	3750      	adds	r7, #80	@ 0x50
 800666a:	46bd      	mov	sp, r7
 800666c:	bd80      	pop	{r7, pc}
 800666e:	bf00      	nop
 8006670:	420c4000 	.word	0x420c4000
 8006674:	420d1400 	.word	0x420d1400
 8006678:	420d2400 	.word	0x420d2400

0800667c <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800667c:	b580      	push	{r7, lr}
 800667e:	b084      	sub	sp, #16
 8006680:	af00      	add	r7, sp, #0
 8006682:	60f8      	str	r0, [r7, #12]
 8006684:	60b9      	str	r1, [r7, #8]
 8006686:	603b      	str	r3, [r7, #0]
 8006688:	4613      	mov	r3, r2
 800668a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 800668c:	e022      	b.n	80066d4 <OSPI_WaitFlagStateUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800668e:	69bb      	ldr	r3, [r7, #24]
 8006690:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006694:	d01e      	beq.n	80066d4 <OSPI_WaitFlagStateUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006696:	f7fc f88d 	bl	80027b4 <HAL_GetTick>
 800669a:	4602      	mov	r2, r0
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	1ad3      	subs	r3, r2, r3
 80066a0:	69ba      	ldr	r2, [r7, #24]
 80066a2:	429a      	cmp	r2, r3
 80066a4:	d302      	bcc.n	80066ac <OSPI_WaitFlagStateUntilTimeout+0x30>
 80066a6:	69bb      	ldr	r3, [r7, #24]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d113      	bne.n	80066d4 <OSPI_WaitFlagStateUntilTimeout+0x58>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hospi->Instance->SR & Flag) != (uint32_t)State)
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	6a1a      	ldr	r2, [r3, #32]
 80066b2:	68bb      	ldr	r3, [r7, #8]
 80066b4:	401a      	ands	r2, r3
 80066b6:	79fb      	ldrb	r3, [r7, #7]
 80066b8:	429a      	cmp	r2, r3
 80066ba:	d00b      	beq.n	80066d4 <OSPI_WaitFlagStateUntilTimeout+0x58>
        {
          hospi->State     = HAL_OSPI_STATE_ERROR;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80066c2:	651a      	str	r2, [r3, #80]	@ 0x50
          hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066c8:	f043 0201 	orr.w	r2, r3, #1
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	655a      	str	r2, [r3, #84]	@ 0x54

          return HAL_ERROR;
 80066d0:	2301      	movs	r3, #1
 80066d2:	e00e      	b.n	80066f2 <OSPI_WaitFlagStateUntilTimeout+0x76>
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	6a1a      	ldr	r2, [r3, #32]
 80066da:	68bb      	ldr	r3, [r7, #8]
 80066dc:	4013      	ands	r3, r2
 80066de:	2b00      	cmp	r3, #0
 80066e0:	bf14      	ite	ne
 80066e2:	2301      	movne	r3, #1
 80066e4:	2300      	moveq	r3, #0
 80066e6:	b2db      	uxtb	r3, r3
 80066e8:	461a      	mov	r2, r3
 80066ea:	79fb      	ldrb	r3, [r7, #7]
 80066ec:	429a      	cmp	r2, r3
 80066ee:	d1ce      	bne.n	800668e <OSPI_WaitFlagStateUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80066f0:	2300      	movs	r3, #0
}
 80066f2:	4618      	mov	r0, r3
 80066f4:	3710      	adds	r7, #16
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bd80      	pop	{r7, pc}
	...

080066fc <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 80066fc:	b480      	push	{r7}
 80066fe:	b087      	sub	sp, #28
 8006700:	af00      	add	r7, sp, #0
 8006702:	4603      	mov	r3, r0
 8006704:	6039      	str	r1, [r7, #0]
 8006706:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8006708:	2300      	movs	r3, #0
 800670a:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 800670c:	2300      	movs	r3, #0
 800670e:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 8006710:	79fb      	ldrb	r3, [r7, #7]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d005      	beq.n	8006722 <OSPIM_GetConfig+0x26>
 8006716:	79fb      	ldrb	r3, [r7, #7]
 8006718:	2b02      	cmp	r3, #2
 800671a:	d802      	bhi.n	8006722 <OSPIM_GetConfig+0x26>
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d102      	bne.n	8006728 <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 8006722:	2301      	movs	r3, #1
 8006724:	75fb      	strb	r3, [r7, #23]
 8006726:	e098      	b.n	800685a <OSPIM_GetConfig+0x15e>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	2200      	movs	r2, #0
 800672c:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	2200      	movs	r2, #0
 8006732:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	2200      	movs	r2, #0
 8006738:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	2200      	movs	r2, #0
 800673e:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	2200      	movs	r2, #0
 8006744:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 8006746:	79fb      	ldrb	r3, [r7, #7]
 8006748:	2b02      	cmp	r3, #2
 800674a:	d10b      	bne.n	8006764 <OSPIM_GetConfig+0x68>
    {
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
 800674c:	4b46      	ldr	r3, [pc, #280]	@ (8006868 <OSPIM_GetConfig+0x16c>)
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f003 0301 	and.w	r3, r3, #1
 8006754:	2b00      	cmp	r3, #0
 8006756:	d102      	bne.n	800675e <OSPIM_GetConfig+0x62>
      {
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 8006758:	4b44      	ldr	r3, [pc, #272]	@ (800686c <OSPIM_GetConfig+0x170>)
 800675a:	613b      	str	r3, [r7, #16]
 800675c:	e002      	b.n	8006764 <OSPIM_GetConfig+0x68>
                 | OCTOSPIM_PCR_IOLSRC_1 | OCTOSPIM_PCR_IOHSRC_1);
      }
      else
      {
        value = OCTOSPIM_PCR_NCSSRC;
 800675e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006762:	613b      	str	r3, [r7, #16]
      }
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8006764:	2300      	movs	r3, #0
 8006766:	60fb      	str	r3, [r7, #12]
 8006768:	e074      	b.n	8006854 <OSPIM_GetConfig+0x158>
    {
      reg = OCTOSPIM->PCR[index];
 800676a:	4a3f      	ldr	r2, [pc, #252]	@ (8006868 <OSPIM_GetConfig+0x16c>)
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	009b      	lsls	r3, r3, #2
 8006770:	4413      	add	r3, r2
 8006772:	685b      	ldr	r3, [r3, #4]
 8006774:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 8006776:	68bb      	ldr	r3, [r7, #8]
 8006778:	f003 0301 	and.w	r3, r3, #1
 800677c:	2b00      	cmp	r3, #0
 800677e:	d00a      	beq.n	8006796 <OSPIM_GetConfig+0x9a>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 8006780:	68ba      	ldr	r2, [r7, #8]
 8006782:	693b      	ldr	r3, [r7, #16]
 8006784:	4053      	eors	r3, r2
 8006786:	f003 0302 	and.w	r3, r3, #2
 800678a:	2b00      	cmp	r3, #0
 800678c:	d103      	bne.n	8006796 <OSPIM_GetConfig+0x9a>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index + 1U;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	1c5a      	adds	r2, r3, #1
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 8006796:	68bb      	ldr	r3, [r7, #8]
 8006798:	f003 0310 	and.w	r3, r3, #16
 800679c:	2b00      	cmp	r3, #0
 800679e:	d00a      	beq.n	80067b6 <OSPIM_GetConfig+0xba>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 80067a0:	68ba      	ldr	r2, [r7, #8]
 80067a2:	693b      	ldr	r3, [r7, #16]
 80067a4:	4053      	eors	r3, r2
 80067a6:	f003 0320 	and.w	r3, r3, #32
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d103      	bne.n	80067b6 <OSPIM_GetConfig+0xba>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index + 1U;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	1c5a      	adds	r2, r3, #1
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 80067b6:	68bb      	ldr	r3, [r7, #8]
 80067b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d00a      	beq.n	80067d6 <OSPIM_GetConfig+0xda>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 80067c0:	68ba      	ldr	r2, [r7, #8]
 80067c2:	693b      	ldr	r3, [r7, #16]
 80067c4:	4053      	eors	r3, r2
 80067c6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d103      	bne.n	80067d6 <OSPIM_GetConfig+0xda>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index + 1U;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	1c5a      	adds	r2, r3, #1
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 80067d6:	68bb      	ldr	r3, [r7, #8]
 80067d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d018      	beq.n	8006812 <OSPIM_GetConfig+0x116>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 80067e0:	68ba      	ldr	r2, [r7, #8]
 80067e2:	693b      	ldr	r3, [r7, #16]
 80067e4:	4053      	eors	r3, r2
 80067e6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d111      	bne.n	8006812 <OSPIM_GetConfig+0x116>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 80067ee:	68bb      	ldr	r3, [r7, #8]
 80067f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d106      	bne.n	8006806 <OSPIM_GetConfig+0x10a>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	3301      	adds	r3, #1
 80067fc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	60da      	str	r2, [r3, #12]
 8006804:	e005      	b.n	8006812 <OSPIM_GetConfig+0x116>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	3301      	adds	r3, #1
 800680a:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 8006812:	68bb      	ldr	r3, [r7, #8]
 8006814:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006818:	2b00      	cmp	r3, #0
 800681a:	d018      	beq.n	800684e <OSPIM_GetConfig+0x152>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 800681c:	68ba      	ldr	r2, [r7, #8]
 800681e:	693b      	ldr	r3, [r7, #16]
 8006820:	4053      	eors	r3, r2
 8006822:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006826:	2b00      	cmp	r3, #0
 8006828:	d111      	bne.n	800684e <OSPIM_GetConfig+0x152>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 800682a:	68bb      	ldr	r3, [r7, #8]
 800682c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006830:	2b00      	cmp	r3, #0
 8006832:	d106      	bne.n	8006842 <OSPIM_GetConfig+0x146>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	3301      	adds	r3, #1
 8006838:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	611a      	str	r2, [r3, #16]
 8006840:	e005      	b.n	800684e <OSPIM_GetConfig+0x152>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	3301      	adds	r3, #1
 8006846:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	3301      	adds	r3, #1
 8006852:	60fb      	str	r3, [r7, #12]
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	2b01      	cmp	r3, #1
 8006858:	d987      	bls.n	800676a <OSPIM_GetConfig+0x6e>
      }
    }
  }

  /* Return function status */
  return status;
 800685a:	7dfb      	ldrb	r3, [r7, #23]
}
 800685c:	4618      	mov	r0, r3
 800685e:	371c      	adds	r7, #28
 8006860:	46bd      	mov	sp, r7
 8006862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006866:	4770      	bx	lr
 8006868:	420c4000 	.word	0x420c4000
 800686c:	04040222 	.word	0x04040222

08006870 <HAL_OSPI_DLYB_SetConfig>:
  * @param  hospi   : OSPI handle.
  * @param  pdlyb_cfg: Pointer to DLYB configuration structure.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_OSPI_DLYB_SetConfig(OSPI_HandleTypeDef *hospi, HAL_OSPI_DLYB_CfgTypeDef  *pdlyb_cfg)
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b084      	sub	sp, #16
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
 8006878:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800687a:	2301      	movs	r3, #1
 800687c:	73fb      	strb	r3, [r7, #15]

  /* Enable OCTOSPI Free Running Clock (mandatory) */
  SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	689a      	ldr	r2, [r3, #8]
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f042 0202 	orr.w	r2, r2, #2
 800688c:	609a      	str	r2, [r3, #8]

  /* Update OCTOSPI state */
  hospi->State = HAL_OSPI_STATE_BUSY_CMD;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2208      	movs	r2, #8
 8006892:	651a      	str	r2, [r3, #80]	@ 0x50

  if (hospi->Instance == OCTOSPI1)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	4a15      	ldr	r2, [pc, #84]	@ (80068f0 <HAL_OSPI_DLYB_SetConfig+0x80>)
 800689a:	4293      	cmp	r3, r2
 800689c:	d109      	bne.n	80068b2 <HAL_OSPI_DLYB_SetConfig+0x42>
  {
    /* Enable the DelayBlock */
    LL_DLYB_Enable(DLYB_OCTOSPI1);
 800689e:	4815      	ldr	r0, [pc, #84]	@ (80068f4 <HAL_OSPI_DLYB_SetConfig+0x84>)
 80068a0:	f7ff f8a6 	bl	80059f0 <LL_DLYB_Enable>

    /* Set the Delay Block configuration */
    LL_DLYB_SetDelay(DLYB_OCTOSPI1, pdlyb_cfg);
 80068a4:	6839      	ldr	r1, [r7, #0]
 80068a6:	4813      	ldr	r0, [pc, #76]	@ (80068f4 <HAL_OSPI_DLYB_SetConfig+0x84>)
 80068a8:	f005 ff85 	bl	800c7b6 <LL_DLYB_SetDelay>
    status = HAL_OK;
 80068ac:	2300      	movs	r3, #0
 80068ae:	73fb      	strb	r3, [r7, #15]
 80068b0:	e00d      	b.n	80068ce <HAL_OSPI_DLYB_SetConfig+0x5e>
  }

#if defined (OCTOSPI2)
  else if (hospi->Instance == OCTOSPI2)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	4a10      	ldr	r2, [pc, #64]	@ (80068f8 <HAL_OSPI_DLYB_SetConfig+0x88>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d108      	bne.n	80068ce <HAL_OSPI_DLYB_SetConfig+0x5e>
  {
    /* Enable the DelayBlock */
    LL_DLYB_Enable(DLYB_OCTOSPI2);
 80068bc:	480f      	ldr	r0, [pc, #60]	@ (80068fc <HAL_OSPI_DLYB_SetConfig+0x8c>)
 80068be:	f7ff f897 	bl	80059f0 <LL_DLYB_Enable>

    /* Set the Delay Block configuration */
    LL_DLYB_SetDelay(DLYB_OCTOSPI2, pdlyb_cfg);
 80068c2:	6839      	ldr	r1, [r7, #0]
 80068c4:	480d      	ldr	r0, [pc, #52]	@ (80068fc <HAL_OSPI_DLYB_SetConfig+0x8c>)
 80068c6:	f005 ff76 	bl	800c7b6 <LL_DLYB_SetDelay>
    status = HAL_OK;
 80068ca:	2300      	movs	r3, #0
 80068cc:	73fb      	strb	r3, [r7, #15]
  {
    /* Nothing to do */
  }

  /* Abort the current OCTOSPI operation if exist */
  (void)HAL_OSPI_Abort(hospi);
 80068ce:	6878      	ldr	r0, [r7, #4]
 80068d0:	f7ff f95a 	bl	8005b88 <HAL_OSPI_Abort>

  /* Disable Free Running Clock */
  CLEAR_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	689a      	ldr	r2, [r3, #8]
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f022 0202 	bic.w	r2, r2, #2
 80068e2:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return status;
 80068e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80068e6:	4618      	mov	r0, r3
 80068e8:	3710      	adds	r7, #16
 80068ea:	46bd      	mov	sp, r7
 80068ec:	bd80      	pop	{r7, pc}
 80068ee:	bf00      	nop
 80068f0:	420d1400 	.word	0x420d1400
 80068f4:	420cf000 	.word	0x420cf000
 80068f8:	420d2400 	.word	0x420d2400
 80068fc:	420cf400 	.word	0x420cf400

08006900 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006900:	b580      	push	{r7, lr}
 8006902:	b086      	sub	sp, #24
 8006904:	af02      	add	r7, sp, #8
 8006906:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d101      	bne.n	8006912 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800690e:	2301      	movs	r3, #1
 8006910:	e0fe      	b.n	8006b10 <HAL_PCD_Init+0x210>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8006918:	b2db      	uxtb	r3, r3
 800691a:	2b00      	cmp	r3, #0
 800691c:	d106      	bne.n	800692c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2200      	movs	r2, #0
 8006922:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006926:	6878      	ldr	r0, [r7, #4]
 8006928:	f7fb fde8 	bl	80024fc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2203      	movs	r2, #3
 8006930:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	4618      	mov	r0, r3
 800693a:	f006 fb52 	bl	800cfe2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6818      	ldr	r0, [r3, #0]
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	7c1a      	ldrb	r2, [r3, #16]
 8006946:	f88d 2000 	strb.w	r2, [sp]
 800694a:	3304      	adds	r3, #4
 800694c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800694e:	f006 fb19 	bl	800cf84 <USB_CoreInit>
 8006952:	4603      	mov	r3, r0
 8006954:	2b00      	cmp	r3, #0
 8006956:	d005      	beq.n	8006964 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2202      	movs	r2, #2
 800695c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8006960:	2301      	movs	r3, #1
 8006962:	e0d5      	b.n	8006b10 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	2100      	movs	r1, #0
 800696a:	4618      	mov	r0, r3
 800696c:	f006 fb4a 	bl	800d004 <USB_SetCurrentMode>
 8006970:	4603      	mov	r3, r0
 8006972:	2b00      	cmp	r3, #0
 8006974:	d005      	beq.n	8006982 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2202      	movs	r2, #2
 800697a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800697e:	2301      	movs	r3, #1
 8006980:	e0c6      	b.n	8006b10 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006982:	2300      	movs	r3, #0
 8006984:	73fb      	strb	r3, [r7, #15]
 8006986:	e04a      	b.n	8006a1e <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006988:	7bfa      	ldrb	r2, [r7, #15]
 800698a:	6879      	ldr	r1, [r7, #4]
 800698c:	4613      	mov	r3, r2
 800698e:	00db      	lsls	r3, r3, #3
 8006990:	4413      	add	r3, r2
 8006992:	009b      	lsls	r3, r3, #2
 8006994:	440b      	add	r3, r1
 8006996:	3315      	adds	r3, #21
 8006998:	2201      	movs	r2, #1
 800699a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800699c:	7bfa      	ldrb	r2, [r7, #15]
 800699e:	6879      	ldr	r1, [r7, #4]
 80069a0:	4613      	mov	r3, r2
 80069a2:	00db      	lsls	r3, r3, #3
 80069a4:	4413      	add	r3, r2
 80069a6:	009b      	lsls	r3, r3, #2
 80069a8:	440b      	add	r3, r1
 80069aa:	3314      	adds	r3, #20
 80069ac:	7bfa      	ldrb	r2, [r7, #15]
 80069ae:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 80069b0:	7bfa      	ldrb	r2, [r7, #15]
 80069b2:	7bfb      	ldrb	r3, [r7, #15]
 80069b4:	b298      	uxth	r0, r3
 80069b6:	6879      	ldr	r1, [r7, #4]
 80069b8:	4613      	mov	r3, r2
 80069ba:	00db      	lsls	r3, r3, #3
 80069bc:	4413      	add	r3, r2
 80069be:	009b      	lsls	r3, r3, #2
 80069c0:	440b      	add	r3, r1
 80069c2:	332e      	adds	r3, #46	@ 0x2e
 80069c4:	4602      	mov	r2, r0
 80069c6:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80069c8:	7bfa      	ldrb	r2, [r7, #15]
 80069ca:	6879      	ldr	r1, [r7, #4]
 80069cc:	4613      	mov	r3, r2
 80069ce:	00db      	lsls	r3, r3, #3
 80069d0:	4413      	add	r3, r2
 80069d2:	009b      	lsls	r3, r3, #2
 80069d4:	440b      	add	r3, r1
 80069d6:	3318      	adds	r3, #24
 80069d8:	2200      	movs	r2, #0
 80069da:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80069dc:	7bfa      	ldrb	r2, [r7, #15]
 80069de:	6879      	ldr	r1, [r7, #4]
 80069e0:	4613      	mov	r3, r2
 80069e2:	00db      	lsls	r3, r3, #3
 80069e4:	4413      	add	r3, r2
 80069e6:	009b      	lsls	r3, r3, #2
 80069e8:	440b      	add	r3, r1
 80069ea:	331c      	adds	r3, #28
 80069ec:	2200      	movs	r2, #0
 80069ee:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80069f0:	7bfa      	ldrb	r2, [r7, #15]
 80069f2:	6879      	ldr	r1, [r7, #4]
 80069f4:	4613      	mov	r3, r2
 80069f6:	00db      	lsls	r3, r3, #3
 80069f8:	4413      	add	r3, r2
 80069fa:	009b      	lsls	r3, r3, #2
 80069fc:	440b      	add	r3, r1
 80069fe:	3320      	adds	r3, #32
 8006a00:	2200      	movs	r2, #0
 8006a02:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006a04:	7bfa      	ldrb	r2, [r7, #15]
 8006a06:	6879      	ldr	r1, [r7, #4]
 8006a08:	4613      	mov	r3, r2
 8006a0a:	00db      	lsls	r3, r3, #3
 8006a0c:	4413      	add	r3, r2
 8006a0e:	009b      	lsls	r3, r3, #2
 8006a10:	440b      	add	r3, r1
 8006a12:	3324      	adds	r3, #36	@ 0x24
 8006a14:	2200      	movs	r2, #0
 8006a16:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006a18:	7bfb      	ldrb	r3, [r7, #15]
 8006a1a:	3301      	adds	r3, #1
 8006a1c:	73fb      	strb	r3, [r7, #15]
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	791b      	ldrb	r3, [r3, #4]
 8006a22:	7bfa      	ldrb	r2, [r7, #15]
 8006a24:	429a      	cmp	r2, r3
 8006a26:	d3af      	bcc.n	8006988 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006a28:	2300      	movs	r3, #0
 8006a2a:	73fb      	strb	r3, [r7, #15]
 8006a2c:	e044      	b.n	8006ab8 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006a2e:	7bfa      	ldrb	r2, [r7, #15]
 8006a30:	6879      	ldr	r1, [r7, #4]
 8006a32:	4613      	mov	r3, r2
 8006a34:	00db      	lsls	r3, r3, #3
 8006a36:	4413      	add	r3, r2
 8006a38:	009b      	lsls	r3, r3, #2
 8006a3a:	440b      	add	r3, r1
 8006a3c:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8006a40:	2200      	movs	r2, #0
 8006a42:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006a44:	7bfa      	ldrb	r2, [r7, #15]
 8006a46:	6879      	ldr	r1, [r7, #4]
 8006a48:	4613      	mov	r3, r2
 8006a4a:	00db      	lsls	r3, r3, #3
 8006a4c:	4413      	add	r3, r2
 8006a4e:	009b      	lsls	r3, r3, #2
 8006a50:	440b      	add	r3, r1
 8006a52:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8006a56:	7bfa      	ldrb	r2, [r7, #15]
 8006a58:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006a5a:	7bfa      	ldrb	r2, [r7, #15]
 8006a5c:	6879      	ldr	r1, [r7, #4]
 8006a5e:	4613      	mov	r3, r2
 8006a60:	00db      	lsls	r3, r3, #3
 8006a62:	4413      	add	r3, r2
 8006a64:	009b      	lsls	r3, r3, #2
 8006a66:	440b      	add	r3, r1
 8006a68:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006a70:	7bfa      	ldrb	r2, [r7, #15]
 8006a72:	6879      	ldr	r1, [r7, #4]
 8006a74:	4613      	mov	r3, r2
 8006a76:	00db      	lsls	r3, r3, #3
 8006a78:	4413      	add	r3, r2
 8006a7a:	009b      	lsls	r3, r3, #2
 8006a7c:	440b      	add	r3, r1
 8006a7e:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8006a82:	2200      	movs	r2, #0
 8006a84:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006a86:	7bfa      	ldrb	r2, [r7, #15]
 8006a88:	6879      	ldr	r1, [r7, #4]
 8006a8a:	4613      	mov	r3, r2
 8006a8c:	00db      	lsls	r3, r3, #3
 8006a8e:	4413      	add	r3, r2
 8006a90:	009b      	lsls	r3, r3, #2
 8006a92:	440b      	add	r3, r1
 8006a94:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8006a98:	2200      	movs	r2, #0
 8006a9a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006a9c:	7bfa      	ldrb	r2, [r7, #15]
 8006a9e:	6879      	ldr	r1, [r7, #4]
 8006aa0:	4613      	mov	r3, r2
 8006aa2:	00db      	lsls	r3, r3, #3
 8006aa4:	4413      	add	r3, r2
 8006aa6:	009b      	lsls	r3, r3, #2
 8006aa8:	440b      	add	r3, r1
 8006aaa:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8006aae:	2200      	movs	r2, #0
 8006ab0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006ab2:	7bfb      	ldrb	r3, [r7, #15]
 8006ab4:	3301      	adds	r3, #1
 8006ab6:	73fb      	strb	r3, [r7, #15]
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	791b      	ldrb	r3, [r3, #4]
 8006abc:	7bfa      	ldrb	r2, [r7, #15]
 8006abe:	429a      	cmp	r2, r3
 8006ac0:	d3b5      	bcc.n	8006a2e <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6818      	ldr	r0, [r3, #0]
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	7c1a      	ldrb	r2, [r3, #16]
 8006aca:	f88d 2000 	strb.w	r2, [sp]
 8006ace:	3304      	adds	r3, #4
 8006ad0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006ad2:	f006 fae3 	bl	800d09c <USB_DevInit>
 8006ad6:	4603      	mov	r3, r0
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d005      	beq.n	8006ae8 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2202      	movs	r2, #2
 8006ae0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8006ae4:	2301      	movs	r3, #1
 8006ae6:	e013      	b.n	8006b10 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2200      	movs	r2, #0
 8006aec:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	2201      	movs	r2, #1
 8006af2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	7b1b      	ldrb	r3, [r3, #12]
 8006afa:	2b01      	cmp	r3, #1
 8006afc:	d102      	bne.n	8006b04 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8006afe:	6878      	ldr	r0, [r7, #4]
 8006b00:	f000 f80a 	bl	8006b18 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	4618      	mov	r0, r3
 8006b0a:	f006 fcb0 	bl	800d46e <USB_DevDisconnect>

  return HAL_OK;
 8006b0e:	2300      	movs	r3, #0
}
 8006b10:	4618      	mov	r0, r3
 8006b12:	3710      	adds	r7, #16
 8006b14:	46bd      	mov	sp, r7
 8006b16:	bd80      	pop	{r7, pc}

08006b18 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006b18:	b480      	push	{r7}
 8006b1a:	b085      	sub	sp, #20
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2201      	movs	r2, #1
 8006b2a:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2200      	movs	r2, #0
 8006b32:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	699b      	ldr	r3, [r3, #24]
 8006b3a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b46:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006b4a:	f043 0303 	orr.w	r3, r3, #3
 8006b4e:	68fa      	ldr	r2, [r7, #12]
 8006b50:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8006b52:	2300      	movs	r3, #0
}
 8006b54:	4618      	mov	r0, r3
 8006b56:	3714      	adds	r7, #20
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5e:	4770      	bx	lr

08006b60 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006b60:	b480      	push	{r7}
 8006b62:	b085      	sub	sp, #20
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8006b68:	4b39      	ldr	r3, [pc, #228]	@ (8006c50 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8006b6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b6c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006b70:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8006b72:	68ba      	ldr	r2, [r7, #8]
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	429a      	cmp	r2, r3
 8006b78:	d10b      	bne.n	8006b92 <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006b80:	d905      	bls.n	8006b8e <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8006b82:	4b33      	ldr	r3, [pc, #204]	@ (8006c50 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8006b84:	68db      	ldr	r3, [r3, #12]
 8006b86:	4a32      	ldr	r2, [pc, #200]	@ (8006c50 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8006b88:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006b8c:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 8006b8e:	2300      	movs	r3, #0
 8006b90:	e057      	b.n	8006c42 <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006b98:	d90a      	bls.n	8006bb0 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8006b9a:	4b2d      	ldr	r3, [pc, #180]	@ (8006c50 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8006b9c:	68db      	ldr	r3, [r3, #12]
 8006b9e:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	4313      	orrs	r3, r2
 8006ba6:	4a2a      	ldr	r2, [pc, #168]	@ (8006c50 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8006ba8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006bac:	60d3      	str	r3, [r2, #12]
 8006bae:	e007      	b.n	8006bc0 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8006bb0:	4b27      	ldr	r3, [pc, #156]	@ (8006c50 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8006bb2:	68db      	ldr	r3, [r3, #12]
 8006bb4:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8006bb8:	4925      	ldr	r1, [pc, #148]	@ (8006c50 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	4313      	orrs	r3, r2
 8006bbe:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8006bc0:	4b24      	ldr	r3, [pc, #144]	@ (8006c54 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	4a24      	ldr	r2, [pc, #144]	@ (8006c58 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8006bc6:	fba2 2303 	umull	r2, r3, r2, r3
 8006bca:	099b      	lsrs	r3, r3, #6
 8006bcc:	2232      	movs	r2, #50	@ 0x32
 8006bce:	fb02 f303 	mul.w	r3, r2, r3
 8006bd2:	4a21      	ldr	r2, [pc, #132]	@ (8006c58 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8006bd4:	fba2 2303 	umull	r2, r3, r2, r3
 8006bd8:	099b      	lsrs	r3, r3, #6
 8006bda:	3301      	adds	r3, #1
 8006bdc:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8006bde:	e002      	b.n	8006be6 <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	3b01      	subs	r3, #1
 8006be4:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8006be6:	4b1a      	ldr	r3, [pc, #104]	@ (8006c50 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8006be8:	68db      	ldr	r3, [r3, #12]
 8006bea:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d102      	bne.n	8006bf8 <HAL_PWREx_ControlVoltageScaling+0x98>
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d1f3      	bne.n	8006be0 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d01b      	beq.n	8006c36 <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8006bfe:	4b15      	ldr	r3, [pc, #84]	@ (8006c54 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	4a15      	ldr	r2, [pc, #84]	@ (8006c58 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8006c04:	fba2 2303 	umull	r2, r3, r2, r3
 8006c08:	099b      	lsrs	r3, r3, #6
 8006c0a:	2232      	movs	r2, #50	@ 0x32
 8006c0c:	fb02 f303 	mul.w	r3, r2, r3
 8006c10:	4a11      	ldr	r2, [pc, #68]	@ (8006c58 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8006c12:	fba2 2303 	umull	r2, r3, r2, r3
 8006c16:	099b      	lsrs	r3, r3, #6
 8006c18:	3301      	adds	r3, #1
 8006c1a:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8006c1c:	e002      	b.n	8006c24 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	3b01      	subs	r3, #1
 8006c22:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8006c24:	4b0a      	ldr	r3, [pc, #40]	@ (8006c50 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8006c26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c28:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d102      	bne.n	8006c36 <HAL_PWREx_ControlVoltageScaling+0xd6>
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d1f3      	bne.n	8006c1e <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d101      	bne.n	8006c40 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8006c3c:	2303      	movs	r3, #3
 8006c3e:	e000      	b.n	8006c42 <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8006c40:	2300      	movs	r3, #0
}
 8006c42:	4618      	mov	r0, r3
 8006c44:	3714      	adds	r7, #20
 8006c46:	46bd      	mov	sp, r7
 8006c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4c:	4770      	bx	lr
 8006c4e:	bf00      	nop
 8006c50:	46020800 	.word	0x46020800
 8006c54:	20000000 	.word	0x20000000
 8006c58:	10624dd3 	.word	0x10624dd3

08006c5c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006c5c:	b480      	push	{r7}
 8006c5e:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8006c60:	4b04      	ldr	r3, [pc, #16]	@ (8006c74 <HAL_PWREx_GetVoltageRange+0x18>)
 8006c62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c64:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8006c68:	4618      	mov	r0, r3
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c70:	4770      	bx	lr
 8006c72:	bf00      	nop
 8006c74:	46020800 	.word	0x46020800

08006c78 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8006c78:	b480      	push	{r7}
 8006c7a:	b085      	sub	sp, #20
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8006c80:	4b22      	ldr	r3, [pc, #136]	@ (8006d0c <HAL_PWREx_ConfigSupply+0x94>)
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	4a22      	ldr	r2, [pc, #136]	@ (8006d10 <HAL_PWREx_ConfigSupply+0x98>)
 8006c86:	fba2 2303 	umull	r2, r3, r2, r3
 8006c8a:	099b      	lsrs	r3, r3, #6
 8006c8c:	2232      	movs	r2, #50	@ 0x32
 8006c8e:	fb02 f303 	mul.w	r3, r2, r3
 8006c92:	4a1f      	ldr	r2, [pc, #124]	@ (8006d10 <HAL_PWREx_ConfigSupply+0x98>)
 8006c94:	fba2 2303 	umull	r2, r3, r2, r3
 8006c98:	099b      	lsrs	r3, r3, #6
 8006c9a:	3301      	adds	r3, #1
 8006c9c:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d113      	bne.n	8006ccc <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8006ca4:	4b1b      	ldr	r3, [pc, #108]	@ (8006d14 <HAL_PWREx_ConfigSupply+0x9c>)
 8006ca6:	689b      	ldr	r3, [r3, #8]
 8006ca8:	4a1a      	ldr	r2, [pc, #104]	@ (8006d14 <HAL_PWREx_ConfigSupply+0x9c>)
 8006caa:	f023 0302 	bic.w	r3, r3, #2
 8006cae:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8006cb0:	e002      	b.n	8006cb8 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	3b01      	subs	r3, #1
 8006cb6:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8006cb8:	4b16      	ldr	r3, [pc, #88]	@ (8006d14 <HAL_PWREx_ConfigSupply+0x9c>)
 8006cba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006cbc:	f003 0302 	and.w	r3, r3, #2
 8006cc0:	2b02      	cmp	r3, #2
 8006cc2:	d116      	bne.n	8006cf2 <HAL_PWREx_ConfigSupply+0x7a>
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d1f3      	bne.n	8006cb2 <HAL_PWREx_ConfigSupply+0x3a>
 8006cca:	e012      	b.n	8006cf2 <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8006ccc:	4b11      	ldr	r3, [pc, #68]	@ (8006d14 <HAL_PWREx_ConfigSupply+0x9c>)
 8006cce:	689b      	ldr	r3, [r3, #8]
 8006cd0:	4a10      	ldr	r2, [pc, #64]	@ (8006d14 <HAL_PWREx_ConfigSupply+0x9c>)
 8006cd2:	f043 0302 	orr.w	r3, r3, #2
 8006cd6:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8006cd8:	e002      	b.n	8006ce0 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	3b01      	subs	r3, #1
 8006cde:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8006ce0:	4b0c      	ldr	r3, [pc, #48]	@ (8006d14 <HAL_PWREx_ConfigSupply+0x9c>)
 8006ce2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ce4:	f003 0302 	and.w	r3, r3, #2
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d102      	bne.n	8006cf2 <HAL_PWREx_ConfigSupply+0x7a>
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d1f3      	bne.n	8006cda <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d101      	bne.n	8006cfc <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 8006cf8:	2303      	movs	r3, #3
 8006cfa:	e000      	b.n	8006cfe <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 8006cfc:	2300      	movs	r3, #0
}
 8006cfe:	4618      	mov	r0, r3
 8006d00:	3714      	adds	r7, #20
 8006d02:	46bd      	mov	sp, r7
 8006d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d08:	4770      	bx	lr
 8006d0a:	bf00      	nop
 8006d0c:	20000000 	.word	0x20000000
 8006d10:	10624dd3 	.word	0x10624dd3
 8006d14:	46020800 	.word	0x46020800

08006d18 <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8006d18:	b480      	push	{r7}
 8006d1a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_USV);
 8006d1c:	4b05      	ldr	r3, [pc, #20]	@ (8006d34 <HAL_PWREx_EnableVddUSB+0x1c>)
 8006d1e:	691b      	ldr	r3, [r3, #16]
 8006d20:	4a04      	ldr	r2, [pc, #16]	@ (8006d34 <HAL_PWREx_EnableVddUSB+0x1c>)
 8006d22:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006d26:	6113      	str	r3, [r2, #16]
}
 8006d28:	bf00      	nop
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d30:	4770      	bx	lr
 8006d32:	bf00      	nop
 8006d34:	46020800 	.word	0x46020800

08006d38 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8006d38:	b480      	push	{r7}
 8006d3a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 8006d3c:	4b05      	ldr	r3, [pc, #20]	@ (8006d54 <HAL_PWREx_EnableVddIO2+0x1c>)
 8006d3e:	691b      	ldr	r3, [r3, #16]
 8006d40:	4a04      	ldr	r2, [pc, #16]	@ (8006d54 <HAL_PWREx_EnableVddIO2+0x1c>)
 8006d42:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006d46:	6113      	str	r3, [r2, #16]
}
 8006d48:	bf00      	nop
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d50:	4770      	bx	lr
 8006d52:	bf00      	nop
 8006d54:	46020800 	.word	0x46020800

08006d58 <HAL_PWREx_EnableVddA>:
  * @note   Remove VDDA electrical and logical isolation, once VDDA supply is
  *         present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddA(void)
{
 8006d58:	b480      	push	{r7}
 8006d5a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_ASV);
 8006d5c:	4b05      	ldr	r3, [pc, #20]	@ (8006d74 <HAL_PWREx_EnableVddA+0x1c>)
 8006d5e:	691b      	ldr	r3, [r3, #16]
 8006d60:	4a04      	ldr	r2, [pc, #16]	@ (8006d74 <HAL_PWREx_EnableVddA+0x1c>)
 8006d62:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006d66:	6113      	str	r3, [r2, #16]
}
 8006d68:	bf00      	nop
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d70:	4770      	bx	lr
 8006d72:	bf00      	nop
 8006d74:	46020800 	.word	0x46020800

08006d78 <HAL_PWREx_EnableUSBHSTranceiverSupply>:
/**
  * @brief  Enable the internal USB HS transceiver supply.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_EnableUSBHSTranceiverSupply(void)
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b082      	sub	sp, #8
 8006d7c:	af00      	add	r7, sp, #0
  uint32_t vos;

  /* Get the system applied voltage scaling range */
  vos = HAL_PWREx_GetVoltageRange();
 8006d7e:	f7ff ff6d 	bl	8006c5c <HAL_PWREx_GetVoltageRange>
 8006d82:	6078      	str	r0, [r7, #4]

  /* Check the system applied voltage scaling range */
  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006d8a:	d003      	beq.n	8006d94 <HAL_PWREx_EnableUSBHSTranceiverSupply+0x1c>
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006d92:	d107      	bne.n	8006da4 <HAL_PWREx_EnableUSBHSTranceiverSupply+0x2c>
  {
    SET_BIT(PWR->VOSR, (PWR_VOSR_USBPWREN | PWR_VOSR_USBBOOSTEN));
 8006d94:	4b06      	ldr	r3, [pc, #24]	@ (8006db0 <HAL_PWREx_EnableUSBHSTranceiverSupply+0x38>)
 8006d96:	68db      	ldr	r3, [r3, #12]
 8006d98:	4a05      	ldr	r2, [pc, #20]	@ (8006db0 <HAL_PWREx_EnableUSBHSTranceiverSupply+0x38>)
 8006d9a:	f443 13c0 	orr.w	r3, r3, #1572864	@ 0x180000
 8006d9e:	60d3      	str	r3, [r2, #12]
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8006da0:	2300      	movs	r3, #0
 8006da2:	e000      	b.n	8006da6 <HAL_PWREx_EnableUSBHSTranceiverSupply+0x2e>
    return HAL_ERROR;
 8006da4:	2301      	movs	r3, #1
}
 8006da6:	4618      	mov	r0, r3
 8006da8:	3708      	adds	r7, #8
 8006daa:	46bd      	mov	sp, r7
 8006dac:	bd80      	pop	{r7, pc}
 8006dae:	bf00      	nop
 8006db0:	46020800 	.word	0x46020800

08006db4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *         pull-down or to handover control to the UCPD (the UCPD must be
  *         initialized before doing the disable).
  * @retval None.
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8006db4:	b480      	push	{r7}
 8006db6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->UCPDR, PWR_UCPDR_UCPD_DBDIS);
 8006db8:	4b05      	ldr	r3, [pc, #20]	@ (8006dd0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006dba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dbc:	4a04      	ldr	r2, [pc, #16]	@ (8006dd0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006dbe:	f043 0301 	orr.w	r3, r3, #1
 8006dc2:	62d3      	str	r3, [r2, #44]	@ 0x2c
}
 8006dc4:	bf00      	nop
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dcc:	4770      	bx	lr
 8006dce:	bf00      	nop
 8006dd0:	46020800 	.word	0x46020800

08006dd4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b08e      	sub	sp, #56	@ 0x38
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8006ddc:	2300      	movs	r3, #0
 8006dde:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d102      	bne.n	8006dee <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8006de8:	2301      	movs	r3, #1
 8006dea:	f000 bec8 	b.w	8007b7e <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006dee:	4b99      	ldr	r3, [pc, #612]	@ (8007054 <HAL_RCC_OscConfig+0x280>)
 8006df0:	69db      	ldr	r3, [r3, #28]
 8006df2:	f003 030c 	and.w	r3, r3, #12
 8006df6:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006df8:	4b96      	ldr	r3, [pc, #600]	@ (8007054 <HAL_RCC_OscConfig+0x280>)
 8006dfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dfc:	f003 0303 	and.w	r3, r3, #3
 8006e00:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f003 0310 	and.w	r3, r3, #16
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	f000 816c 	beq.w	80070e8 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8006e10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d007      	beq.n	8006e26 <HAL_RCC_OscConfig+0x52>
 8006e16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e18:	2b0c      	cmp	r3, #12
 8006e1a:	f040 80de 	bne.w	8006fda <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8006e1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e20:	2b01      	cmp	r3, #1
 8006e22:	f040 80da 	bne.w	8006fda <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	69db      	ldr	r3, [r3, #28]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d102      	bne.n	8006e34 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 8006e2e:	2301      	movs	r3, #1
 8006e30:	f000 bea5 	b.w	8007b7e <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006e38:	4b86      	ldr	r3, [pc, #536]	@ (8007054 <HAL_RCC_OscConfig+0x280>)
 8006e3a:	689b      	ldr	r3, [r3, #8]
 8006e3c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d004      	beq.n	8006e4e <HAL_RCC_OscConfig+0x7a>
 8006e44:	4b83      	ldr	r3, [pc, #524]	@ (8007054 <HAL_RCC_OscConfig+0x280>)
 8006e46:	689b      	ldr	r3, [r3, #8]
 8006e48:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8006e4c:	e005      	b.n	8006e5a <HAL_RCC_OscConfig+0x86>
 8006e4e:	4b81      	ldr	r3, [pc, #516]	@ (8007054 <HAL_RCC_OscConfig+0x280>)
 8006e50:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006e54:	041b      	lsls	r3, r3, #16
 8006e56:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	d255      	bcs.n	8006f0a <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006e5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d10a      	bne.n	8006e7a <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e68:	4618      	mov	r0, r3
 8006e6a:	f001 f9d9 	bl	8008220 <RCC_SetFlashLatencyFromMSIRange>
 8006e6e:	4603      	mov	r3, r0
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d002      	beq.n	8006e7a <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 8006e74:	2301      	movs	r3, #1
 8006e76:	f000 be82 	b.w	8007b7e <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8006e7a:	4b76      	ldr	r3, [pc, #472]	@ (8007054 <HAL_RCC_OscConfig+0x280>)
 8006e7c:	689b      	ldr	r3, [r3, #8]
 8006e7e:	4a75      	ldr	r2, [pc, #468]	@ (8007054 <HAL_RCC_OscConfig+0x280>)
 8006e80:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006e84:	6093      	str	r3, [r2, #8]
 8006e86:	4b73      	ldr	r3, [pc, #460]	@ (8007054 <HAL_RCC_OscConfig+0x280>)
 8006e88:	689b      	ldr	r3, [r3, #8]
 8006e8a:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e92:	4970      	ldr	r1, [pc, #448]	@ (8007054 <HAL_RCC_OscConfig+0x280>)
 8006e94:	4313      	orrs	r3, r2
 8006e96:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e9c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8006ea0:	d309      	bcc.n	8006eb6 <HAL_RCC_OscConfig+0xe2>
 8006ea2:	4b6c      	ldr	r3, [pc, #432]	@ (8007054 <HAL_RCC_OscConfig+0x280>)
 8006ea4:	68db      	ldr	r3, [r3, #12]
 8006ea6:	f023 021f 	bic.w	r2, r3, #31
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	6a1b      	ldr	r3, [r3, #32]
 8006eae:	4969      	ldr	r1, [pc, #420]	@ (8007054 <HAL_RCC_OscConfig+0x280>)
 8006eb0:	4313      	orrs	r3, r2
 8006eb2:	60cb      	str	r3, [r1, #12]
 8006eb4:	e07e      	b.n	8006fb4 <HAL_RCC_OscConfig+0x1e0>
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	da0a      	bge.n	8006ed4 <HAL_RCC_OscConfig+0x100>
 8006ebe:	4b65      	ldr	r3, [pc, #404]	@ (8007054 <HAL_RCC_OscConfig+0x280>)
 8006ec0:	68db      	ldr	r3, [r3, #12]
 8006ec2:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6a1b      	ldr	r3, [r3, #32]
 8006eca:	015b      	lsls	r3, r3, #5
 8006ecc:	4961      	ldr	r1, [pc, #388]	@ (8007054 <HAL_RCC_OscConfig+0x280>)
 8006ece:	4313      	orrs	r3, r2
 8006ed0:	60cb      	str	r3, [r1, #12]
 8006ed2:	e06f      	b.n	8006fb4 <HAL_RCC_OscConfig+0x1e0>
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ed8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006edc:	d30a      	bcc.n	8006ef4 <HAL_RCC_OscConfig+0x120>
 8006ede:	4b5d      	ldr	r3, [pc, #372]	@ (8007054 <HAL_RCC_OscConfig+0x280>)
 8006ee0:	68db      	ldr	r3, [r3, #12]
 8006ee2:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6a1b      	ldr	r3, [r3, #32]
 8006eea:	029b      	lsls	r3, r3, #10
 8006eec:	4959      	ldr	r1, [pc, #356]	@ (8007054 <HAL_RCC_OscConfig+0x280>)
 8006eee:	4313      	orrs	r3, r2
 8006ef0:	60cb      	str	r3, [r1, #12]
 8006ef2:	e05f      	b.n	8006fb4 <HAL_RCC_OscConfig+0x1e0>
 8006ef4:	4b57      	ldr	r3, [pc, #348]	@ (8007054 <HAL_RCC_OscConfig+0x280>)
 8006ef6:	68db      	ldr	r3, [r3, #12]
 8006ef8:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	6a1b      	ldr	r3, [r3, #32]
 8006f00:	03db      	lsls	r3, r3, #15
 8006f02:	4954      	ldr	r1, [pc, #336]	@ (8007054 <HAL_RCC_OscConfig+0x280>)
 8006f04:	4313      	orrs	r3, r2
 8006f06:	60cb      	str	r3, [r1, #12]
 8006f08:	e054      	b.n	8006fb4 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8006f0a:	4b52      	ldr	r3, [pc, #328]	@ (8007054 <HAL_RCC_OscConfig+0x280>)
 8006f0c:	689b      	ldr	r3, [r3, #8]
 8006f0e:	4a51      	ldr	r2, [pc, #324]	@ (8007054 <HAL_RCC_OscConfig+0x280>)
 8006f10:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006f14:	6093      	str	r3, [r2, #8]
 8006f16:	4b4f      	ldr	r3, [pc, #316]	@ (8007054 <HAL_RCC_OscConfig+0x280>)
 8006f18:	689b      	ldr	r3, [r3, #8]
 8006f1a:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f22:	494c      	ldr	r1, [pc, #304]	@ (8007054 <HAL_RCC_OscConfig+0x280>)
 8006f24:	4313      	orrs	r3, r2
 8006f26:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f2c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8006f30:	d309      	bcc.n	8006f46 <HAL_RCC_OscConfig+0x172>
 8006f32:	4b48      	ldr	r3, [pc, #288]	@ (8007054 <HAL_RCC_OscConfig+0x280>)
 8006f34:	68db      	ldr	r3, [r3, #12]
 8006f36:	f023 021f 	bic.w	r2, r3, #31
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6a1b      	ldr	r3, [r3, #32]
 8006f3e:	4945      	ldr	r1, [pc, #276]	@ (8007054 <HAL_RCC_OscConfig+0x280>)
 8006f40:	4313      	orrs	r3, r2
 8006f42:	60cb      	str	r3, [r1, #12]
 8006f44:	e028      	b.n	8006f98 <HAL_RCC_OscConfig+0x1c4>
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	da0a      	bge.n	8006f64 <HAL_RCC_OscConfig+0x190>
 8006f4e:	4b41      	ldr	r3, [pc, #260]	@ (8007054 <HAL_RCC_OscConfig+0x280>)
 8006f50:	68db      	ldr	r3, [r3, #12]
 8006f52:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6a1b      	ldr	r3, [r3, #32]
 8006f5a:	015b      	lsls	r3, r3, #5
 8006f5c:	493d      	ldr	r1, [pc, #244]	@ (8007054 <HAL_RCC_OscConfig+0x280>)
 8006f5e:	4313      	orrs	r3, r2
 8006f60:	60cb      	str	r3, [r1, #12]
 8006f62:	e019      	b.n	8006f98 <HAL_RCC_OscConfig+0x1c4>
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f6c:	d30a      	bcc.n	8006f84 <HAL_RCC_OscConfig+0x1b0>
 8006f6e:	4b39      	ldr	r3, [pc, #228]	@ (8007054 <HAL_RCC_OscConfig+0x280>)
 8006f70:	68db      	ldr	r3, [r3, #12]
 8006f72:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6a1b      	ldr	r3, [r3, #32]
 8006f7a:	029b      	lsls	r3, r3, #10
 8006f7c:	4935      	ldr	r1, [pc, #212]	@ (8007054 <HAL_RCC_OscConfig+0x280>)
 8006f7e:	4313      	orrs	r3, r2
 8006f80:	60cb      	str	r3, [r1, #12]
 8006f82:	e009      	b.n	8006f98 <HAL_RCC_OscConfig+0x1c4>
 8006f84:	4b33      	ldr	r3, [pc, #204]	@ (8007054 <HAL_RCC_OscConfig+0x280>)
 8006f86:	68db      	ldr	r3, [r3, #12]
 8006f88:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	6a1b      	ldr	r3, [r3, #32]
 8006f90:	03db      	lsls	r3, r3, #15
 8006f92:	4930      	ldr	r1, [pc, #192]	@ (8007054 <HAL_RCC_OscConfig+0x280>)
 8006f94:	4313      	orrs	r3, r2
 8006f96:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006f98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d10a      	bne.n	8006fb4 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	f001 f93c 	bl	8008220 <RCC_SetFlashLatencyFromMSIRange>
 8006fa8:	4603      	mov	r3, r0
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d002      	beq.n	8006fb4 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 8006fae:	2301      	movs	r3, #1
 8006fb0:	f000 bde5 	b.w	8007b7e <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8006fb4:	f001 f8de 	bl	8008174 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8006fb8:	4b27      	ldr	r3, [pc, #156]	@ (8007058 <HAL_RCC_OscConfig+0x284>)
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	f7fb fb6f 	bl	80026a0 <HAL_InitTick>
 8006fc2:	4603      	mov	r3, r0
 8006fc4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 8006fc8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	f000 808a 	beq.w	80070e6 <HAL_RCC_OscConfig+0x312>
        {
          return status;
 8006fd2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006fd6:	f000 bdd2 	b.w	8007b7e <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	69db      	ldr	r3, [r3, #28]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d066      	beq.n	80070b0 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8006fe2:	4b1c      	ldr	r3, [pc, #112]	@ (8007054 <HAL_RCC_OscConfig+0x280>)
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	4a1b      	ldr	r2, [pc, #108]	@ (8007054 <HAL_RCC_OscConfig+0x280>)
 8006fe8:	f043 0301 	orr.w	r3, r3, #1
 8006fec:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8006fee:	f7fb fbe1 	bl	80027b4 <HAL_GetTick>
 8006ff2:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8006ff4:	e009      	b.n	800700a <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006ff6:	f7fb fbdd 	bl	80027b4 <HAL_GetTick>
 8006ffa:	4602      	mov	r2, r0
 8006ffc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ffe:	1ad3      	subs	r3, r2, r3
 8007000:	2b02      	cmp	r3, #2
 8007002:	d902      	bls.n	800700a <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8007004:	2303      	movs	r3, #3
 8007006:	f000 bdba 	b.w	8007b7e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800700a:	4b12      	ldr	r3, [pc, #72]	@ (8007054 <HAL_RCC_OscConfig+0x280>)
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f003 0304 	and.w	r3, r3, #4
 8007012:	2b00      	cmp	r3, #0
 8007014:	d0ef      	beq.n	8006ff6 <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8007016:	4b0f      	ldr	r3, [pc, #60]	@ (8007054 <HAL_RCC_OscConfig+0x280>)
 8007018:	689b      	ldr	r3, [r3, #8]
 800701a:	4a0e      	ldr	r2, [pc, #56]	@ (8007054 <HAL_RCC_OscConfig+0x280>)
 800701c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007020:	6093      	str	r3, [r2, #8]
 8007022:	4b0c      	ldr	r3, [pc, #48]	@ (8007054 <HAL_RCC_OscConfig+0x280>)
 8007024:	689b      	ldr	r3, [r3, #8]
 8007026:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800702e:	4909      	ldr	r1, [pc, #36]	@ (8007054 <HAL_RCC_OscConfig+0x280>)
 8007030:	4313      	orrs	r3, r2
 8007032:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007038:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800703c:	d30e      	bcc.n	800705c <HAL_RCC_OscConfig+0x288>
 800703e:	4b05      	ldr	r3, [pc, #20]	@ (8007054 <HAL_RCC_OscConfig+0x280>)
 8007040:	68db      	ldr	r3, [r3, #12]
 8007042:	f023 021f 	bic.w	r2, r3, #31
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6a1b      	ldr	r3, [r3, #32]
 800704a:	4902      	ldr	r1, [pc, #8]	@ (8007054 <HAL_RCC_OscConfig+0x280>)
 800704c:	4313      	orrs	r3, r2
 800704e:	60cb      	str	r3, [r1, #12]
 8007050:	e04a      	b.n	80070e8 <HAL_RCC_OscConfig+0x314>
 8007052:	bf00      	nop
 8007054:	46020c00 	.word	0x46020c00
 8007058:	20000004 	.word	0x20000004
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007060:	2b00      	cmp	r3, #0
 8007062:	da0a      	bge.n	800707a <HAL_RCC_OscConfig+0x2a6>
 8007064:	4b98      	ldr	r3, [pc, #608]	@ (80072c8 <HAL_RCC_OscConfig+0x4f4>)
 8007066:	68db      	ldr	r3, [r3, #12]
 8007068:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	6a1b      	ldr	r3, [r3, #32]
 8007070:	015b      	lsls	r3, r3, #5
 8007072:	4995      	ldr	r1, [pc, #596]	@ (80072c8 <HAL_RCC_OscConfig+0x4f4>)
 8007074:	4313      	orrs	r3, r2
 8007076:	60cb      	str	r3, [r1, #12]
 8007078:	e036      	b.n	80070e8 <HAL_RCC_OscConfig+0x314>
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800707e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007082:	d30a      	bcc.n	800709a <HAL_RCC_OscConfig+0x2c6>
 8007084:	4b90      	ldr	r3, [pc, #576]	@ (80072c8 <HAL_RCC_OscConfig+0x4f4>)
 8007086:	68db      	ldr	r3, [r3, #12]
 8007088:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	6a1b      	ldr	r3, [r3, #32]
 8007090:	029b      	lsls	r3, r3, #10
 8007092:	498d      	ldr	r1, [pc, #564]	@ (80072c8 <HAL_RCC_OscConfig+0x4f4>)
 8007094:	4313      	orrs	r3, r2
 8007096:	60cb      	str	r3, [r1, #12]
 8007098:	e026      	b.n	80070e8 <HAL_RCC_OscConfig+0x314>
 800709a:	4b8b      	ldr	r3, [pc, #556]	@ (80072c8 <HAL_RCC_OscConfig+0x4f4>)
 800709c:	68db      	ldr	r3, [r3, #12]
 800709e:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	6a1b      	ldr	r3, [r3, #32]
 80070a6:	03db      	lsls	r3, r3, #15
 80070a8:	4987      	ldr	r1, [pc, #540]	@ (80072c8 <HAL_RCC_OscConfig+0x4f4>)
 80070aa:	4313      	orrs	r3, r2
 80070ac:	60cb      	str	r3, [r1, #12]
 80070ae:	e01b      	b.n	80070e8 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 80070b0:	4b85      	ldr	r3, [pc, #532]	@ (80072c8 <HAL_RCC_OscConfig+0x4f4>)
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	4a84      	ldr	r2, [pc, #528]	@ (80072c8 <HAL_RCC_OscConfig+0x4f4>)
 80070b6:	f023 0301 	bic.w	r3, r3, #1
 80070ba:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80070bc:	f7fb fb7a 	bl	80027b4 <HAL_GetTick>
 80070c0:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 80070c2:	e009      	b.n	80070d8 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80070c4:	f7fb fb76 	bl	80027b4 <HAL_GetTick>
 80070c8:	4602      	mov	r2, r0
 80070ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070cc:	1ad3      	subs	r3, r2, r3
 80070ce:	2b02      	cmp	r3, #2
 80070d0:	d902      	bls.n	80070d8 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 80070d2:	2303      	movs	r3, #3
 80070d4:	f000 bd53 	b.w	8007b7e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 80070d8:	4b7b      	ldr	r3, [pc, #492]	@ (80072c8 <HAL_RCC_OscConfig+0x4f4>)
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f003 0304 	and.w	r3, r3, #4
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d1ef      	bne.n	80070c4 <HAL_RCC_OscConfig+0x2f0>
 80070e4:	e000      	b.n	80070e8 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80070e6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f003 0301 	and.w	r3, r3, #1
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	f000 808b 	beq.w	800720c <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80070f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070f8:	2b08      	cmp	r3, #8
 80070fa:	d005      	beq.n	8007108 <HAL_RCC_OscConfig+0x334>
 80070fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070fe:	2b0c      	cmp	r3, #12
 8007100:	d109      	bne.n	8007116 <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8007102:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007104:	2b03      	cmp	r3, #3
 8007106:	d106      	bne.n	8007116 <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	685b      	ldr	r3, [r3, #4]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d17d      	bne.n	800720c <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8007110:	2301      	movs	r3, #1
 8007112:	f000 bd34 	b.w	8007b7e <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	685b      	ldr	r3, [r3, #4]
 800711a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800711e:	d106      	bne.n	800712e <HAL_RCC_OscConfig+0x35a>
 8007120:	4b69      	ldr	r3, [pc, #420]	@ (80072c8 <HAL_RCC_OscConfig+0x4f4>)
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	4a68      	ldr	r2, [pc, #416]	@ (80072c8 <HAL_RCC_OscConfig+0x4f4>)
 8007126:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800712a:	6013      	str	r3, [r2, #0]
 800712c:	e041      	b.n	80071b2 <HAL_RCC_OscConfig+0x3de>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	685b      	ldr	r3, [r3, #4]
 8007132:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007136:	d112      	bne.n	800715e <HAL_RCC_OscConfig+0x38a>
 8007138:	4b63      	ldr	r3, [pc, #396]	@ (80072c8 <HAL_RCC_OscConfig+0x4f4>)
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	4a62      	ldr	r2, [pc, #392]	@ (80072c8 <HAL_RCC_OscConfig+0x4f4>)
 800713e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007142:	6013      	str	r3, [r2, #0]
 8007144:	4b60      	ldr	r3, [pc, #384]	@ (80072c8 <HAL_RCC_OscConfig+0x4f4>)
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	4a5f      	ldr	r2, [pc, #380]	@ (80072c8 <HAL_RCC_OscConfig+0x4f4>)
 800714a:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800714e:	6013      	str	r3, [r2, #0]
 8007150:	4b5d      	ldr	r3, [pc, #372]	@ (80072c8 <HAL_RCC_OscConfig+0x4f4>)
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	4a5c      	ldr	r2, [pc, #368]	@ (80072c8 <HAL_RCC_OscConfig+0x4f4>)
 8007156:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800715a:	6013      	str	r3, [r2, #0]
 800715c:	e029      	b.n	80071b2 <HAL_RCC_OscConfig+0x3de>
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	685b      	ldr	r3, [r3, #4]
 8007162:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8007166:	d112      	bne.n	800718e <HAL_RCC_OscConfig+0x3ba>
 8007168:	4b57      	ldr	r3, [pc, #348]	@ (80072c8 <HAL_RCC_OscConfig+0x4f4>)
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	4a56      	ldr	r2, [pc, #344]	@ (80072c8 <HAL_RCC_OscConfig+0x4f4>)
 800716e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007172:	6013      	str	r3, [r2, #0]
 8007174:	4b54      	ldr	r3, [pc, #336]	@ (80072c8 <HAL_RCC_OscConfig+0x4f4>)
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	4a53      	ldr	r2, [pc, #332]	@ (80072c8 <HAL_RCC_OscConfig+0x4f4>)
 800717a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800717e:	6013      	str	r3, [r2, #0]
 8007180:	4b51      	ldr	r3, [pc, #324]	@ (80072c8 <HAL_RCC_OscConfig+0x4f4>)
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	4a50      	ldr	r2, [pc, #320]	@ (80072c8 <HAL_RCC_OscConfig+0x4f4>)
 8007186:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800718a:	6013      	str	r3, [r2, #0]
 800718c:	e011      	b.n	80071b2 <HAL_RCC_OscConfig+0x3de>
 800718e:	4b4e      	ldr	r3, [pc, #312]	@ (80072c8 <HAL_RCC_OscConfig+0x4f4>)
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	4a4d      	ldr	r2, [pc, #308]	@ (80072c8 <HAL_RCC_OscConfig+0x4f4>)
 8007194:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007198:	6013      	str	r3, [r2, #0]
 800719a:	4b4b      	ldr	r3, [pc, #300]	@ (80072c8 <HAL_RCC_OscConfig+0x4f4>)
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	4a4a      	ldr	r2, [pc, #296]	@ (80072c8 <HAL_RCC_OscConfig+0x4f4>)
 80071a0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80071a4:	6013      	str	r3, [r2, #0]
 80071a6:	4b48      	ldr	r3, [pc, #288]	@ (80072c8 <HAL_RCC_OscConfig+0x4f4>)
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	4a47      	ldr	r2, [pc, #284]	@ (80072c8 <HAL_RCC_OscConfig+0x4f4>)
 80071ac:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80071b0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	685b      	ldr	r3, [r3, #4]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d014      	beq.n	80071e4 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 80071ba:	f7fb fafb 	bl	80027b4 <HAL_GetTick>
 80071be:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80071c0:	e009      	b.n	80071d6 <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80071c2:	f7fb faf7 	bl	80027b4 <HAL_GetTick>
 80071c6:	4602      	mov	r2, r0
 80071c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071ca:	1ad3      	subs	r3, r2, r3
 80071cc:	2b64      	cmp	r3, #100	@ 0x64
 80071ce:	d902      	bls.n	80071d6 <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 80071d0:	2303      	movs	r3, #3
 80071d2:	f000 bcd4 	b.w	8007b7e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80071d6:	4b3c      	ldr	r3, [pc, #240]	@ (80072c8 <HAL_RCC_OscConfig+0x4f4>)
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d0ef      	beq.n	80071c2 <HAL_RCC_OscConfig+0x3ee>
 80071e2:	e013      	b.n	800720c <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 80071e4:	f7fb fae6 	bl	80027b4 <HAL_GetTick>
 80071e8:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80071ea:	e009      	b.n	8007200 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80071ec:	f7fb fae2 	bl	80027b4 <HAL_GetTick>
 80071f0:	4602      	mov	r2, r0
 80071f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071f4:	1ad3      	subs	r3, r2, r3
 80071f6:	2b64      	cmp	r3, #100	@ 0x64
 80071f8:	d902      	bls.n	8007200 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 80071fa:	2303      	movs	r3, #3
 80071fc:	f000 bcbf 	b.w	8007b7e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007200:	4b31      	ldr	r3, [pc, #196]	@ (80072c8 <HAL_RCC_OscConfig+0x4f4>)
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007208:	2b00      	cmp	r3, #0
 800720a:	d1ef      	bne.n	80071ec <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f003 0302 	and.w	r3, r3, #2
 8007214:	2b00      	cmp	r3, #0
 8007216:	d05f      	beq.n	80072d8 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8007218:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800721a:	2b04      	cmp	r3, #4
 800721c:	d005      	beq.n	800722a <HAL_RCC_OscConfig+0x456>
 800721e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007220:	2b0c      	cmp	r3, #12
 8007222:	d114      	bne.n	800724e <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8007224:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007226:	2b02      	cmp	r3, #2
 8007228:	d111      	bne.n	800724e <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	68db      	ldr	r3, [r3, #12]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d102      	bne.n	8007238 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8007232:	2301      	movs	r3, #1
 8007234:	f000 bca3 	b.w	8007b7e <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8007238:	4b23      	ldr	r3, [pc, #140]	@ (80072c8 <HAL_RCC_OscConfig+0x4f4>)
 800723a:	691b      	ldr	r3, [r3, #16]
 800723c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	691b      	ldr	r3, [r3, #16]
 8007244:	041b      	lsls	r3, r3, #16
 8007246:	4920      	ldr	r1, [pc, #128]	@ (80072c8 <HAL_RCC_OscConfig+0x4f4>)
 8007248:	4313      	orrs	r3, r2
 800724a:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800724c:	e044      	b.n	80072d8 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	68db      	ldr	r3, [r3, #12]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d024      	beq.n	80072a0 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8007256:	4b1c      	ldr	r3, [pc, #112]	@ (80072c8 <HAL_RCC_OscConfig+0x4f4>)
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	4a1b      	ldr	r2, [pc, #108]	@ (80072c8 <HAL_RCC_OscConfig+0x4f4>)
 800725c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007260:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8007262:	f7fb faa7 	bl	80027b4 <HAL_GetTick>
 8007266:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007268:	e009      	b.n	800727e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800726a:	f7fb faa3 	bl	80027b4 <HAL_GetTick>
 800726e:	4602      	mov	r2, r0
 8007270:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007272:	1ad3      	subs	r3, r2, r3
 8007274:	2b02      	cmp	r3, #2
 8007276:	d902      	bls.n	800727e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8007278:	2303      	movs	r3, #3
 800727a:	f000 bc80 	b.w	8007b7e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800727e:	4b12      	ldr	r3, [pc, #72]	@ (80072c8 <HAL_RCC_OscConfig+0x4f4>)
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007286:	2b00      	cmp	r3, #0
 8007288:	d0ef      	beq.n	800726a <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 800728a:	4b0f      	ldr	r3, [pc, #60]	@ (80072c8 <HAL_RCC_OscConfig+0x4f4>)
 800728c:	691b      	ldr	r3, [r3, #16]
 800728e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	691b      	ldr	r3, [r3, #16]
 8007296:	041b      	lsls	r3, r3, #16
 8007298:	490b      	ldr	r1, [pc, #44]	@ (80072c8 <HAL_RCC_OscConfig+0x4f4>)
 800729a:	4313      	orrs	r3, r2
 800729c:	610b      	str	r3, [r1, #16]
 800729e:	e01b      	b.n	80072d8 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 80072a0:	4b09      	ldr	r3, [pc, #36]	@ (80072c8 <HAL_RCC_OscConfig+0x4f4>)
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	4a08      	ldr	r2, [pc, #32]	@ (80072c8 <HAL_RCC_OscConfig+0x4f4>)
 80072a6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80072aa:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80072ac:	f7fb fa82 	bl	80027b4 <HAL_GetTick>
 80072b0:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80072b2:	e00b      	b.n	80072cc <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80072b4:	f7fb fa7e 	bl	80027b4 <HAL_GetTick>
 80072b8:	4602      	mov	r2, r0
 80072ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072bc:	1ad3      	subs	r3, r2, r3
 80072be:	2b02      	cmp	r3, #2
 80072c0:	d904      	bls.n	80072cc <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 80072c2:	2303      	movs	r3, #3
 80072c4:	f000 bc5b 	b.w	8007b7e <HAL_RCC_OscConfig+0xdaa>
 80072c8:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80072cc:	4baf      	ldr	r3, [pc, #700]	@ (800758c <HAL_RCC_OscConfig+0x7b8>)
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d1ed      	bne.n	80072b4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f003 0308 	and.w	r3, r3, #8
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	f000 80c8 	beq.w	8007476 <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 80072e6:	2300      	movs	r3, #0
 80072e8:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80072ec:	4ba7      	ldr	r3, [pc, #668]	@ (800758c <HAL_RCC_OscConfig+0x7b8>)
 80072ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80072f2:	f003 0304 	and.w	r3, r3, #4
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d111      	bne.n	800731e <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80072fa:	4ba4      	ldr	r3, [pc, #656]	@ (800758c <HAL_RCC_OscConfig+0x7b8>)
 80072fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007300:	4aa2      	ldr	r2, [pc, #648]	@ (800758c <HAL_RCC_OscConfig+0x7b8>)
 8007302:	f043 0304 	orr.w	r3, r3, #4
 8007306:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800730a:	4ba0      	ldr	r3, [pc, #640]	@ (800758c <HAL_RCC_OscConfig+0x7b8>)
 800730c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007310:	f003 0304 	and.w	r3, r3, #4
 8007314:	617b      	str	r3, [r7, #20]
 8007316:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8007318:	2301      	movs	r3, #1
 800731a:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800731e:	4b9c      	ldr	r3, [pc, #624]	@ (8007590 <HAL_RCC_OscConfig+0x7bc>)
 8007320:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007322:	f003 0301 	and.w	r3, r3, #1
 8007326:	2b00      	cmp	r3, #0
 8007328:	d119      	bne.n	800735e <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800732a:	4b99      	ldr	r3, [pc, #612]	@ (8007590 <HAL_RCC_OscConfig+0x7bc>)
 800732c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800732e:	4a98      	ldr	r2, [pc, #608]	@ (8007590 <HAL_RCC_OscConfig+0x7bc>)
 8007330:	f043 0301 	orr.w	r3, r3, #1
 8007334:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007336:	f7fb fa3d 	bl	80027b4 <HAL_GetTick>
 800733a:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800733c:	e009      	b.n	8007352 <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800733e:	f7fb fa39 	bl	80027b4 <HAL_GetTick>
 8007342:	4602      	mov	r2, r0
 8007344:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007346:	1ad3      	subs	r3, r2, r3
 8007348:	2b02      	cmp	r3, #2
 800734a:	d902      	bls.n	8007352 <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 800734c:	2303      	movs	r3, #3
 800734e:	f000 bc16 	b.w	8007b7e <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8007352:	4b8f      	ldr	r3, [pc, #572]	@ (8007590 <HAL_RCC_OscConfig+0x7bc>)
 8007354:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007356:	f003 0301 	and.w	r3, r3, #1
 800735a:	2b00      	cmp	r3, #0
 800735c:	d0ef      	beq.n	800733e <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	695b      	ldr	r3, [r3, #20]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d05f      	beq.n	8007426 <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8007366:	4b89      	ldr	r3, [pc, #548]	@ (800758c <HAL_RCC_OscConfig+0x7b8>)
 8007368:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800736c:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	699a      	ldr	r2, [r3, #24]
 8007372:	6a3b      	ldr	r3, [r7, #32]
 8007374:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007378:	429a      	cmp	r2, r3
 800737a:	d037      	beq.n	80073ec <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 800737c:	6a3b      	ldr	r3, [r7, #32]
 800737e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007382:	2b00      	cmp	r3, #0
 8007384:	d006      	beq.n	8007394 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8007386:	6a3b      	ldr	r3, [r7, #32]
 8007388:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 800738c:	2b00      	cmp	r3, #0
 800738e:	d101      	bne.n	8007394 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8007390:	2301      	movs	r3, #1
 8007392:	e3f4      	b.n	8007b7e <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8007394:	6a3b      	ldr	r3, [r7, #32]
 8007396:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800739a:	2b00      	cmp	r3, #0
 800739c:	d01b      	beq.n	80073d6 <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 800739e:	4b7b      	ldr	r3, [pc, #492]	@ (800758c <HAL_RCC_OscConfig+0x7b8>)
 80073a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80073a4:	4a79      	ldr	r2, [pc, #484]	@ (800758c <HAL_RCC_OscConfig+0x7b8>)
 80073a6:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 80073aa:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 80073ae:	f7fb fa01 	bl	80027b4 <HAL_GetTick>
 80073b2:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80073b4:	e008      	b.n	80073c8 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80073b6:	f7fb f9fd 	bl	80027b4 <HAL_GetTick>
 80073ba:	4602      	mov	r2, r0
 80073bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073be:	1ad3      	subs	r3, r2, r3
 80073c0:	2b05      	cmp	r3, #5
 80073c2:	d901      	bls.n	80073c8 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 80073c4:	2303      	movs	r3, #3
 80073c6:	e3da      	b.n	8007b7e <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80073c8:	4b70      	ldr	r3, [pc, #448]	@ (800758c <HAL_RCC_OscConfig+0x7b8>)
 80073ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80073ce:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d1ef      	bne.n	80073b6 <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 80073d6:	4b6d      	ldr	r3, [pc, #436]	@ (800758c <HAL_RCC_OscConfig+0x7b8>)
 80073d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80073dc:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	699b      	ldr	r3, [r3, #24]
 80073e4:	4969      	ldr	r1, [pc, #420]	@ (800758c <HAL_RCC_OscConfig+0x7b8>)
 80073e6:	4313      	orrs	r3, r2
 80073e8:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 80073ec:	4b67      	ldr	r3, [pc, #412]	@ (800758c <HAL_RCC_OscConfig+0x7b8>)
 80073ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80073f2:	4a66      	ldr	r2, [pc, #408]	@ (800758c <HAL_RCC_OscConfig+0x7b8>)
 80073f4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80073f8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 80073fc:	f7fb f9da 	bl	80027b4 <HAL_GetTick>
 8007400:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8007402:	e008      	b.n	8007416 <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007404:	f7fb f9d6 	bl	80027b4 <HAL_GetTick>
 8007408:	4602      	mov	r2, r0
 800740a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800740c:	1ad3      	subs	r3, r2, r3
 800740e:	2b05      	cmp	r3, #5
 8007410:	d901      	bls.n	8007416 <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 8007412:	2303      	movs	r3, #3
 8007414:	e3b3      	b.n	8007b7e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8007416:	4b5d      	ldr	r3, [pc, #372]	@ (800758c <HAL_RCC_OscConfig+0x7b8>)
 8007418:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800741c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007420:	2b00      	cmp	r3, #0
 8007422:	d0ef      	beq.n	8007404 <HAL_RCC_OscConfig+0x630>
 8007424:	e01b      	b.n	800745e <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8007426:	4b59      	ldr	r3, [pc, #356]	@ (800758c <HAL_RCC_OscConfig+0x7b8>)
 8007428:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800742c:	4a57      	ldr	r2, [pc, #348]	@ (800758c <HAL_RCC_OscConfig+0x7b8>)
 800742e:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8007432:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8007436:	f7fb f9bd 	bl	80027b4 <HAL_GetTick>
 800743a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800743c:	e008      	b.n	8007450 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800743e:	f7fb f9b9 	bl	80027b4 <HAL_GetTick>
 8007442:	4602      	mov	r2, r0
 8007444:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007446:	1ad3      	subs	r3, r2, r3
 8007448:	2b05      	cmp	r3, #5
 800744a:	d901      	bls.n	8007450 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 800744c:	2303      	movs	r3, #3
 800744e:	e396      	b.n	8007b7e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8007450:	4b4e      	ldr	r3, [pc, #312]	@ (800758c <HAL_RCC_OscConfig+0x7b8>)
 8007452:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007456:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800745a:	2b00      	cmp	r3, #0
 800745c:	d1ef      	bne.n	800743e <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800745e:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8007462:	2b01      	cmp	r3, #1
 8007464:	d107      	bne.n	8007476 <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007466:	4b49      	ldr	r3, [pc, #292]	@ (800758c <HAL_RCC_OscConfig+0x7b8>)
 8007468:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800746c:	4a47      	ldr	r2, [pc, #284]	@ (800758c <HAL_RCC_OscConfig+0x7b8>)
 800746e:	f023 0304 	bic.w	r3, r3, #4
 8007472:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	f003 0304 	and.w	r3, r3, #4
 800747e:	2b00      	cmp	r3, #0
 8007480:	f000 8111 	beq.w	80076a6 <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8007484:	2300      	movs	r3, #0
 8007486:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800748a:	4b40      	ldr	r3, [pc, #256]	@ (800758c <HAL_RCC_OscConfig+0x7b8>)
 800748c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007490:	f003 0304 	and.w	r3, r3, #4
 8007494:	2b00      	cmp	r3, #0
 8007496:	d111      	bne.n	80074bc <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007498:	4b3c      	ldr	r3, [pc, #240]	@ (800758c <HAL_RCC_OscConfig+0x7b8>)
 800749a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800749e:	4a3b      	ldr	r2, [pc, #236]	@ (800758c <HAL_RCC_OscConfig+0x7b8>)
 80074a0:	f043 0304 	orr.w	r3, r3, #4
 80074a4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80074a8:	4b38      	ldr	r3, [pc, #224]	@ (800758c <HAL_RCC_OscConfig+0x7b8>)
 80074aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80074ae:	f003 0304 	and.w	r3, r3, #4
 80074b2:	613b      	str	r3, [r7, #16]
 80074b4:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 80074b6:	2301      	movs	r3, #1
 80074b8:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80074bc:	4b34      	ldr	r3, [pc, #208]	@ (8007590 <HAL_RCC_OscConfig+0x7bc>)
 80074be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074c0:	f003 0301 	and.w	r3, r3, #1
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d118      	bne.n	80074fa <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80074c8:	4b31      	ldr	r3, [pc, #196]	@ (8007590 <HAL_RCC_OscConfig+0x7bc>)
 80074ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074cc:	4a30      	ldr	r2, [pc, #192]	@ (8007590 <HAL_RCC_OscConfig+0x7bc>)
 80074ce:	f043 0301 	orr.w	r3, r3, #1
 80074d2:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80074d4:	f7fb f96e 	bl	80027b4 <HAL_GetTick>
 80074d8:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80074da:	e008      	b.n	80074ee <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80074dc:	f7fb f96a 	bl	80027b4 <HAL_GetTick>
 80074e0:	4602      	mov	r2, r0
 80074e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074e4:	1ad3      	subs	r3, r2, r3
 80074e6:	2b02      	cmp	r3, #2
 80074e8:	d901      	bls.n	80074ee <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 80074ea:	2303      	movs	r3, #3
 80074ec:	e347      	b.n	8007b7e <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80074ee:	4b28      	ldr	r3, [pc, #160]	@ (8007590 <HAL_RCC_OscConfig+0x7bc>)
 80074f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074f2:	f003 0301 	and.w	r3, r3, #1
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d0f0      	beq.n	80074dc <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	689b      	ldr	r3, [r3, #8]
 80074fe:	f003 0301 	and.w	r3, r3, #1
 8007502:	2b00      	cmp	r3, #0
 8007504:	d01f      	beq.n	8007546 <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	689b      	ldr	r3, [r3, #8]
 800750a:	f003 0304 	and.w	r3, r3, #4
 800750e:	2b00      	cmp	r3, #0
 8007510:	d010      	beq.n	8007534 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8007512:	4b1e      	ldr	r3, [pc, #120]	@ (800758c <HAL_RCC_OscConfig+0x7b8>)
 8007514:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007518:	4a1c      	ldr	r2, [pc, #112]	@ (800758c <HAL_RCC_OscConfig+0x7b8>)
 800751a:	f043 0304 	orr.w	r3, r3, #4
 800751e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8007522:	4b1a      	ldr	r3, [pc, #104]	@ (800758c <HAL_RCC_OscConfig+0x7b8>)
 8007524:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007528:	4a18      	ldr	r2, [pc, #96]	@ (800758c <HAL_RCC_OscConfig+0x7b8>)
 800752a:	f043 0301 	orr.w	r3, r3, #1
 800752e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8007532:	e018      	b.n	8007566 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8007534:	4b15      	ldr	r3, [pc, #84]	@ (800758c <HAL_RCC_OscConfig+0x7b8>)
 8007536:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800753a:	4a14      	ldr	r2, [pc, #80]	@ (800758c <HAL_RCC_OscConfig+0x7b8>)
 800753c:	f043 0301 	orr.w	r3, r3, #1
 8007540:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8007544:	e00f      	b.n	8007566 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8007546:	4b11      	ldr	r3, [pc, #68]	@ (800758c <HAL_RCC_OscConfig+0x7b8>)
 8007548:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800754c:	4a0f      	ldr	r2, [pc, #60]	@ (800758c <HAL_RCC_OscConfig+0x7b8>)
 800754e:	f023 0301 	bic.w	r3, r3, #1
 8007552:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8007556:	4b0d      	ldr	r3, [pc, #52]	@ (800758c <HAL_RCC_OscConfig+0x7b8>)
 8007558:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800755c:	4a0b      	ldr	r2, [pc, #44]	@ (800758c <HAL_RCC_OscConfig+0x7b8>)
 800755e:	f023 0304 	bic.w	r3, r3, #4
 8007562:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	689b      	ldr	r3, [r3, #8]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d057      	beq.n	800761e <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 800756e:	f7fb f921 	bl	80027b4 <HAL_GetTick>
 8007572:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007574:	e00e      	b.n	8007594 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007576:	f7fb f91d 	bl	80027b4 <HAL_GetTick>
 800757a:	4602      	mov	r2, r0
 800757c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800757e:	1ad3      	subs	r3, r2, r3
 8007580:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007584:	4293      	cmp	r3, r2
 8007586:	d905      	bls.n	8007594 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8007588:	2303      	movs	r3, #3
 800758a:	e2f8      	b.n	8007b7e <HAL_RCC_OscConfig+0xdaa>
 800758c:	46020c00 	.word	0x46020c00
 8007590:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007594:	4b9c      	ldr	r3, [pc, #624]	@ (8007808 <HAL_RCC_OscConfig+0xa34>)
 8007596:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800759a:	f003 0302 	and.w	r3, r3, #2
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d0e9      	beq.n	8007576 <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	689b      	ldr	r3, [r3, #8]
 80075a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d01b      	beq.n	80075e6 <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80075ae:	4b96      	ldr	r3, [pc, #600]	@ (8007808 <HAL_RCC_OscConfig+0xa34>)
 80075b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80075b4:	4a94      	ldr	r2, [pc, #592]	@ (8007808 <HAL_RCC_OscConfig+0xa34>)
 80075b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80075ba:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80075be:	e00a      	b.n	80075d6 <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80075c0:	f7fb f8f8 	bl	80027b4 <HAL_GetTick>
 80075c4:	4602      	mov	r2, r0
 80075c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075c8:	1ad3      	subs	r3, r2, r3
 80075ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80075ce:	4293      	cmp	r3, r2
 80075d0:	d901      	bls.n	80075d6 <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 80075d2:	2303      	movs	r3, #3
 80075d4:	e2d3      	b.n	8007b7e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80075d6:	4b8c      	ldr	r3, [pc, #560]	@ (8007808 <HAL_RCC_OscConfig+0xa34>)
 80075d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80075dc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d0ed      	beq.n	80075c0 <HAL_RCC_OscConfig+0x7ec>
 80075e4:	e053      	b.n	800768e <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80075e6:	4b88      	ldr	r3, [pc, #544]	@ (8007808 <HAL_RCC_OscConfig+0xa34>)
 80075e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80075ec:	4a86      	ldr	r2, [pc, #536]	@ (8007808 <HAL_RCC_OscConfig+0xa34>)
 80075ee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80075f2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80075f6:	e00a      	b.n	800760e <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80075f8:	f7fb f8dc 	bl	80027b4 <HAL_GetTick>
 80075fc:	4602      	mov	r2, r0
 80075fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007600:	1ad3      	subs	r3, r2, r3
 8007602:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007606:	4293      	cmp	r3, r2
 8007608:	d901      	bls.n	800760e <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 800760a:	2303      	movs	r3, #3
 800760c:	e2b7      	b.n	8007b7e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800760e:	4b7e      	ldr	r3, [pc, #504]	@ (8007808 <HAL_RCC_OscConfig+0xa34>)
 8007610:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007614:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007618:	2b00      	cmp	r3, #0
 800761a:	d1ed      	bne.n	80075f8 <HAL_RCC_OscConfig+0x824>
 800761c:	e037      	b.n	800768e <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 800761e:	f7fb f8c9 	bl	80027b4 <HAL_GetTick>
 8007622:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007624:	e00a      	b.n	800763c <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007626:	f7fb f8c5 	bl	80027b4 <HAL_GetTick>
 800762a:	4602      	mov	r2, r0
 800762c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800762e:	1ad3      	subs	r3, r2, r3
 8007630:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007634:	4293      	cmp	r3, r2
 8007636:	d901      	bls.n	800763c <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8007638:	2303      	movs	r3, #3
 800763a:	e2a0      	b.n	8007b7e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800763c:	4b72      	ldr	r3, [pc, #456]	@ (8007808 <HAL_RCC_OscConfig+0xa34>)
 800763e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007642:	f003 0302 	and.w	r3, r3, #2
 8007646:	2b00      	cmp	r3, #0
 8007648:	d1ed      	bne.n	8007626 <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 800764a:	4b6f      	ldr	r3, [pc, #444]	@ (8007808 <HAL_RCC_OscConfig+0xa34>)
 800764c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007650:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007654:	2b00      	cmp	r3, #0
 8007656:	d01a      	beq.n	800768e <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8007658:	4b6b      	ldr	r3, [pc, #428]	@ (8007808 <HAL_RCC_OscConfig+0xa34>)
 800765a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800765e:	4a6a      	ldr	r2, [pc, #424]	@ (8007808 <HAL_RCC_OscConfig+0xa34>)
 8007660:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007664:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8007668:	e00a      	b.n	8007680 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800766a:	f7fb f8a3 	bl	80027b4 <HAL_GetTick>
 800766e:	4602      	mov	r2, r0
 8007670:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007672:	1ad3      	subs	r3, r2, r3
 8007674:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007678:	4293      	cmp	r3, r2
 800767a:	d901      	bls.n	8007680 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 800767c:	2303      	movs	r3, #3
 800767e:	e27e      	b.n	8007b7e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8007680:	4b61      	ldr	r3, [pc, #388]	@ (8007808 <HAL_RCC_OscConfig+0xa34>)
 8007682:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007686:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800768a:	2b00      	cmp	r3, #0
 800768c:	d1ed      	bne.n	800766a <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800768e:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8007692:	2b01      	cmp	r3, #1
 8007694:	d107      	bne.n	80076a6 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007696:	4b5c      	ldr	r3, [pc, #368]	@ (8007808 <HAL_RCC_OscConfig+0xa34>)
 8007698:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800769c:	4a5a      	ldr	r2, [pc, #360]	@ (8007808 <HAL_RCC_OscConfig+0xa34>)
 800769e:	f023 0304 	bic.w	r3, r3, #4
 80076a2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	f003 0320 	and.w	r3, r3, #32
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d036      	beq.n	8007720 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d019      	beq.n	80076ee <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 80076ba:	4b53      	ldr	r3, [pc, #332]	@ (8007808 <HAL_RCC_OscConfig+0xa34>)
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	4a52      	ldr	r2, [pc, #328]	@ (8007808 <HAL_RCC_OscConfig+0xa34>)
 80076c0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80076c4:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80076c6:	f7fb f875 	bl	80027b4 <HAL_GetTick>
 80076ca:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80076cc:	e008      	b.n	80076e0 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80076ce:	f7fb f871 	bl	80027b4 <HAL_GetTick>
 80076d2:	4602      	mov	r2, r0
 80076d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076d6:	1ad3      	subs	r3, r2, r3
 80076d8:	2b02      	cmp	r3, #2
 80076da:	d901      	bls.n	80076e0 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 80076dc:	2303      	movs	r3, #3
 80076de:	e24e      	b.n	8007b7e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80076e0:	4b49      	ldr	r3, [pc, #292]	@ (8007808 <HAL_RCC_OscConfig+0xa34>)
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d0f0      	beq.n	80076ce <HAL_RCC_OscConfig+0x8fa>
 80076ec:	e018      	b.n	8007720 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 80076ee:	4b46      	ldr	r3, [pc, #280]	@ (8007808 <HAL_RCC_OscConfig+0xa34>)
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	4a45      	ldr	r2, [pc, #276]	@ (8007808 <HAL_RCC_OscConfig+0xa34>)
 80076f4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80076f8:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80076fa:	f7fb f85b 	bl	80027b4 <HAL_GetTick>
 80076fe:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8007700:	e008      	b.n	8007714 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007702:	f7fb f857 	bl	80027b4 <HAL_GetTick>
 8007706:	4602      	mov	r2, r0
 8007708:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800770a:	1ad3      	subs	r3, r2, r3
 800770c:	2b02      	cmp	r3, #2
 800770e:	d901      	bls.n	8007714 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8007710:	2303      	movs	r3, #3
 8007712:	e234      	b.n	8007b7e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8007714:	4b3c      	ldr	r3, [pc, #240]	@ (8007808 <HAL_RCC_OscConfig+0xa34>)
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800771c:	2b00      	cmp	r3, #0
 800771e:	d1f0      	bne.n	8007702 <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007728:	2b00      	cmp	r3, #0
 800772a:	d036      	beq.n	800779a <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007730:	2b00      	cmp	r3, #0
 8007732:	d019      	beq.n	8007768 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8007734:	4b34      	ldr	r3, [pc, #208]	@ (8007808 <HAL_RCC_OscConfig+0xa34>)
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	4a33      	ldr	r2, [pc, #204]	@ (8007808 <HAL_RCC_OscConfig+0xa34>)
 800773a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800773e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8007740:	f7fb f838 	bl	80027b4 <HAL_GetTick>
 8007744:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8007746:	e008      	b.n	800775a <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8007748:	f7fb f834 	bl	80027b4 <HAL_GetTick>
 800774c:	4602      	mov	r2, r0
 800774e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007750:	1ad3      	subs	r3, r2, r3
 8007752:	2b02      	cmp	r3, #2
 8007754:	d901      	bls.n	800775a <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 8007756:	2303      	movs	r3, #3
 8007758:	e211      	b.n	8007b7e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800775a:	4b2b      	ldr	r3, [pc, #172]	@ (8007808 <HAL_RCC_OscConfig+0xa34>)
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007762:	2b00      	cmp	r3, #0
 8007764:	d0f0      	beq.n	8007748 <HAL_RCC_OscConfig+0x974>
 8007766:	e018      	b.n	800779a <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8007768:	4b27      	ldr	r3, [pc, #156]	@ (8007808 <HAL_RCC_OscConfig+0xa34>)
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	4a26      	ldr	r2, [pc, #152]	@ (8007808 <HAL_RCC_OscConfig+0xa34>)
 800776e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007772:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8007774:	f7fb f81e 	bl	80027b4 <HAL_GetTick>
 8007778:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800777a:	e008      	b.n	800778e <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 800777c:	f7fb f81a 	bl	80027b4 <HAL_GetTick>
 8007780:	4602      	mov	r2, r0
 8007782:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007784:	1ad3      	subs	r3, r2, r3
 8007786:	2b02      	cmp	r3, #2
 8007788:	d901      	bls.n	800778e <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 800778a:	2303      	movs	r3, #3
 800778c:	e1f7      	b.n	8007b7e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800778e:	4b1e      	ldr	r3, [pc, #120]	@ (8007808 <HAL_RCC_OscConfig+0xa34>)
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007796:	2b00      	cmp	r3, #0
 8007798:	d1f0      	bne.n	800777c <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d07f      	beq.n	80078a6 <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d062      	beq.n	8007874 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 80077ae:	4b16      	ldr	r3, [pc, #88]	@ (8007808 <HAL_RCC_OscConfig+0xa34>)
 80077b0:	689b      	ldr	r3, [r3, #8]
 80077b2:	4a15      	ldr	r2, [pc, #84]	@ (8007808 <HAL_RCC_OscConfig+0xa34>)
 80077b4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80077b8:	6093      	str	r3, [r2, #8]
 80077ba:	4b13      	ldr	r3, [pc, #76]	@ (8007808 <HAL_RCC_OscConfig+0xa34>)
 80077bc:	689b      	ldr	r3, [r3, #8]
 80077be:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077c6:	4910      	ldr	r1, [pc, #64]	@ (8007808 <HAL_RCC_OscConfig+0xa34>)
 80077c8:	4313      	orrs	r3, r2
 80077ca:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077d0:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80077d4:	d309      	bcc.n	80077ea <HAL_RCC_OscConfig+0xa16>
 80077d6:	4b0c      	ldr	r3, [pc, #48]	@ (8007808 <HAL_RCC_OscConfig+0xa34>)
 80077d8:	68db      	ldr	r3, [r3, #12]
 80077da:	f023 021f 	bic.w	r2, r3, #31
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	6a1b      	ldr	r3, [r3, #32]
 80077e2:	4909      	ldr	r1, [pc, #36]	@ (8007808 <HAL_RCC_OscConfig+0xa34>)
 80077e4:	4313      	orrs	r3, r2
 80077e6:	60cb      	str	r3, [r1, #12]
 80077e8:	e02a      	b.n	8007840 <HAL_RCC_OscConfig+0xa6c>
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	da0c      	bge.n	800780c <HAL_RCC_OscConfig+0xa38>
 80077f2:	4b05      	ldr	r3, [pc, #20]	@ (8007808 <HAL_RCC_OscConfig+0xa34>)
 80077f4:	68db      	ldr	r3, [r3, #12]
 80077f6:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	6a1b      	ldr	r3, [r3, #32]
 80077fe:	015b      	lsls	r3, r3, #5
 8007800:	4901      	ldr	r1, [pc, #4]	@ (8007808 <HAL_RCC_OscConfig+0xa34>)
 8007802:	4313      	orrs	r3, r2
 8007804:	60cb      	str	r3, [r1, #12]
 8007806:	e01b      	b.n	8007840 <HAL_RCC_OscConfig+0xa6c>
 8007808:	46020c00 	.word	0x46020c00
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007810:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007814:	d30a      	bcc.n	800782c <HAL_RCC_OscConfig+0xa58>
 8007816:	4ba1      	ldr	r3, [pc, #644]	@ (8007a9c <HAL_RCC_OscConfig+0xcc8>)
 8007818:	68db      	ldr	r3, [r3, #12]
 800781a:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	6a1b      	ldr	r3, [r3, #32]
 8007822:	029b      	lsls	r3, r3, #10
 8007824:	499d      	ldr	r1, [pc, #628]	@ (8007a9c <HAL_RCC_OscConfig+0xcc8>)
 8007826:	4313      	orrs	r3, r2
 8007828:	60cb      	str	r3, [r1, #12]
 800782a:	e009      	b.n	8007840 <HAL_RCC_OscConfig+0xa6c>
 800782c:	4b9b      	ldr	r3, [pc, #620]	@ (8007a9c <HAL_RCC_OscConfig+0xcc8>)
 800782e:	68db      	ldr	r3, [r3, #12]
 8007830:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	6a1b      	ldr	r3, [r3, #32]
 8007838:	03db      	lsls	r3, r3, #15
 800783a:	4998      	ldr	r1, [pc, #608]	@ (8007a9c <HAL_RCC_OscConfig+0xcc8>)
 800783c:	4313      	orrs	r3, r2
 800783e:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8007840:	4b96      	ldr	r3, [pc, #600]	@ (8007a9c <HAL_RCC_OscConfig+0xcc8>)
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	4a95      	ldr	r2, [pc, #596]	@ (8007a9c <HAL_RCC_OscConfig+0xcc8>)
 8007846:	f043 0310 	orr.w	r3, r3, #16
 800784a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800784c:	f7fa ffb2 	bl	80027b4 <HAL_GetTick>
 8007850:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8007852:	e008      	b.n	8007866 <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8007854:	f7fa ffae 	bl	80027b4 <HAL_GetTick>
 8007858:	4602      	mov	r2, r0
 800785a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800785c:	1ad3      	subs	r3, r2, r3
 800785e:	2b02      	cmp	r3, #2
 8007860:	d901      	bls.n	8007866 <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 8007862:	2303      	movs	r3, #3
 8007864:	e18b      	b.n	8007b7e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8007866:	4b8d      	ldr	r3, [pc, #564]	@ (8007a9c <HAL_RCC_OscConfig+0xcc8>)
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	f003 0320 	and.w	r3, r3, #32
 800786e:	2b00      	cmp	r3, #0
 8007870:	d0f0      	beq.n	8007854 <HAL_RCC_OscConfig+0xa80>
 8007872:	e018      	b.n	80078a6 <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8007874:	4b89      	ldr	r3, [pc, #548]	@ (8007a9c <HAL_RCC_OscConfig+0xcc8>)
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	4a88      	ldr	r2, [pc, #544]	@ (8007a9c <HAL_RCC_OscConfig+0xcc8>)
 800787a:	f023 0310 	bic.w	r3, r3, #16
 800787e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8007880:	f7fa ff98 	bl	80027b4 <HAL_GetTick>
 8007884:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8007886:	e008      	b.n	800789a <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8007888:	f7fa ff94 	bl	80027b4 <HAL_GetTick>
 800788c:	4602      	mov	r2, r0
 800788e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007890:	1ad3      	subs	r3, r2, r3
 8007892:	2b02      	cmp	r3, #2
 8007894:	d901      	bls.n	800789a <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 8007896:	2303      	movs	r3, #3
 8007898:	e171      	b.n	8007b7e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800789a:	4b80      	ldr	r3, [pc, #512]	@ (8007a9c <HAL_RCC_OscConfig+0xcc8>)
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	f003 0320 	and.w	r3, r3, #32
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d1f0      	bne.n	8007888 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	f000 8166 	beq.w	8007b7c <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 80078b0:	2300      	movs	r3, #0
 80078b2:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80078b6:	4b79      	ldr	r3, [pc, #484]	@ (8007a9c <HAL_RCC_OscConfig+0xcc8>)
 80078b8:	69db      	ldr	r3, [r3, #28]
 80078ba:	f003 030c 	and.w	r3, r3, #12
 80078be:	2b0c      	cmp	r3, #12
 80078c0:	f000 80f2 	beq.w	8007aa8 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078c8:	2b02      	cmp	r3, #2
 80078ca:	f040 80c5 	bne.w	8007a58 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 80078ce:	4b73      	ldr	r3, [pc, #460]	@ (8007a9c <HAL_RCC_OscConfig+0xcc8>)
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	4a72      	ldr	r2, [pc, #456]	@ (8007a9c <HAL_RCC_OscConfig+0xcc8>)
 80078d4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80078d8:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80078da:	f7fa ff6b 	bl	80027b4 <HAL_GetTick>
 80078de:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80078e0:	e008      	b.n	80078f4 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80078e2:	f7fa ff67 	bl	80027b4 <HAL_GetTick>
 80078e6:	4602      	mov	r2, r0
 80078e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078ea:	1ad3      	subs	r3, r2, r3
 80078ec:	2b02      	cmp	r3, #2
 80078ee:	d901      	bls.n	80078f4 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 80078f0:	2303      	movs	r3, #3
 80078f2:	e144      	b.n	8007b7e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80078f4:	4b69      	ldr	r3, [pc, #420]	@ (8007a9c <HAL_RCC_OscConfig+0xcc8>)
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d1f0      	bne.n	80078e2 <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007900:	4b66      	ldr	r3, [pc, #408]	@ (8007a9c <HAL_RCC_OscConfig+0xcc8>)
 8007902:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007906:	f003 0304 	and.w	r3, r3, #4
 800790a:	2b00      	cmp	r3, #0
 800790c:	d111      	bne.n	8007932 <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 800790e:	4b63      	ldr	r3, [pc, #396]	@ (8007a9c <HAL_RCC_OscConfig+0xcc8>)
 8007910:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007914:	4a61      	ldr	r2, [pc, #388]	@ (8007a9c <HAL_RCC_OscConfig+0xcc8>)
 8007916:	f043 0304 	orr.w	r3, r3, #4
 800791a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800791e:	4b5f      	ldr	r3, [pc, #380]	@ (8007a9c <HAL_RCC_OscConfig+0xcc8>)
 8007920:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007924:	f003 0304 	and.w	r3, r3, #4
 8007928:	60fb      	str	r3, [r7, #12]
 800792a:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 800792c:	2301      	movs	r3, #1
 800792e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8007932:	4b5b      	ldr	r3, [pc, #364]	@ (8007aa0 <HAL_RCC_OscConfig+0xccc>)
 8007934:	68db      	ldr	r3, [r3, #12]
 8007936:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800793a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800793e:	d102      	bne.n	8007946 <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8007940:	2301      	movs	r3, #1
 8007942:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8007946:	4b56      	ldr	r3, [pc, #344]	@ (8007aa0 <HAL_RCC_OscConfig+0xccc>)
 8007948:	68db      	ldr	r3, [r3, #12]
 800794a:	4a55      	ldr	r2, [pc, #340]	@ (8007aa0 <HAL_RCC_OscConfig+0xccc>)
 800794c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007950:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8007952:	4b52      	ldr	r3, [pc, #328]	@ (8007a9c <HAL_RCC_OscConfig+0xcc8>)
 8007954:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007956:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800795a:	f023 0303 	bic.w	r3, r3, #3
 800795e:	687a      	ldr	r2, [r7, #4]
 8007960:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8007962:	687a      	ldr	r2, [r7, #4]
 8007964:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8007966:	3a01      	subs	r2, #1
 8007968:	0212      	lsls	r2, r2, #8
 800796a:	4311      	orrs	r1, r2
 800796c:	687a      	ldr	r2, [r7, #4]
 800796e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8007970:	430a      	orrs	r2, r1
 8007972:	494a      	ldr	r1, [pc, #296]	@ (8007a9c <HAL_RCC_OscConfig+0xcc8>)
 8007974:	4313      	orrs	r3, r2
 8007976:	628b      	str	r3, [r1, #40]	@ 0x28
 8007978:	4b48      	ldr	r3, [pc, #288]	@ (8007a9c <HAL_RCC_OscConfig+0xcc8>)
 800797a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800797c:	4b49      	ldr	r3, [pc, #292]	@ (8007aa4 <HAL_RCC_OscConfig+0xcd0>)
 800797e:	4013      	ands	r3, r2
 8007980:	687a      	ldr	r2, [r7, #4]
 8007982:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8007984:	3a01      	subs	r2, #1
 8007986:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800798a:	687a      	ldr	r2, [r7, #4]
 800798c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800798e:	3a01      	subs	r2, #1
 8007990:	0252      	lsls	r2, r2, #9
 8007992:	b292      	uxth	r2, r2
 8007994:	4311      	orrs	r1, r2
 8007996:	687a      	ldr	r2, [r7, #4]
 8007998:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800799a:	3a01      	subs	r2, #1
 800799c:	0412      	lsls	r2, r2, #16
 800799e:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 80079a2:	4311      	orrs	r1, r2
 80079a4:	687a      	ldr	r2, [r7, #4]
 80079a6:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80079a8:	3a01      	subs	r2, #1
 80079aa:	0612      	lsls	r2, r2, #24
 80079ac:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 80079b0:	430a      	orrs	r2, r1
 80079b2:	493a      	ldr	r1, [pc, #232]	@ (8007a9c <HAL_RCC_OscConfig+0xcc8>)
 80079b4:	4313      	orrs	r3, r2
 80079b6:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 80079b8:	4b38      	ldr	r3, [pc, #224]	@ (8007a9c <HAL_RCC_OscConfig+0xcc8>)
 80079ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079bc:	4a37      	ldr	r2, [pc, #220]	@ (8007a9c <HAL_RCC_OscConfig+0xcc8>)
 80079be:	f023 0310 	bic.w	r3, r3, #16
 80079c2:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80079c8:	4a34      	ldr	r2, [pc, #208]	@ (8007a9c <HAL_RCC_OscConfig+0xcc8>)
 80079ca:	00db      	lsls	r3, r3, #3
 80079cc:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 80079ce:	4b33      	ldr	r3, [pc, #204]	@ (8007a9c <HAL_RCC_OscConfig+0xcc8>)
 80079d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079d2:	4a32      	ldr	r2, [pc, #200]	@ (8007a9c <HAL_RCC_OscConfig+0xcc8>)
 80079d4:	f043 0310 	orr.w	r3, r3, #16
 80079d8:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 80079da:	4b30      	ldr	r3, [pc, #192]	@ (8007a9c <HAL_RCC_OscConfig+0xcc8>)
 80079dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079de:	f023 020c 	bic.w	r2, r3, #12
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80079e6:	492d      	ldr	r1, [pc, #180]	@ (8007a9c <HAL_RCC_OscConfig+0xcc8>)
 80079e8:	4313      	orrs	r3, r2
 80079ea:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 80079ec:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80079f0:	2b01      	cmp	r3, #1
 80079f2:	d105      	bne.n	8007a00 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80079f4:	4b2a      	ldr	r3, [pc, #168]	@ (8007aa0 <HAL_RCC_OscConfig+0xccc>)
 80079f6:	68db      	ldr	r3, [r3, #12]
 80079f8:	4a29      	ldr	r2, [pc, #164]	@ (8007aa0 <HAL_RCC_OscConfig+0xccc>)
 80079fa:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80079fe:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8007a00:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8007a04:	2b01      	cmp	r3, #1
 8007a06:	d107      	bne.n	8007a18 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8007a08:	4b24      	ldr	r3, [pc, #144]	@ (8007a9c <HAL_RCC_OscConfig+0xcc8>)
 8007a0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007a0e:	4a23      	ldr	r2, [pc, #140]	@ (8007a9c <HAL_RCC_OscConfig+0xcc8>)
 8007a10:	f023 0304 	bic.w	r3, r3, #4
 8007a14:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8007a18:	4b20      	ldr	r3, [pc, #128]	@ (8007a9c <HAL_RCC_OscConfig+0xcc8>)
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	4a1f      	ldr	r2, [pc, #124]	@ (8007a9c <HAL_RCC_OscConfig+0xcc8>)
 8007a1e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007a22:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8007a24:	f7fa fec6 	bl	80027b4 <HAL_GetTick>
 8007a28:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8007a2a:	e008      	b.n	8007a3e <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007a2c:	f7fa fec2 	bl	80027b4 <HAL_GetTick>
 8007a30:	4602      	mov	r2, r0
 8007a32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a34:	1ad3      	subs	r3, r2, r3
 8007a36:	2b02      	cmp	r3, #2
 8007a38:	d901      	bls.n	8007a3e <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 8007a3a:	2303      	movs	r3, #3
 8007a3c:	e09f      	b.n	8007b7e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8007a3e:	4b17      	ldr	r3, [pc, #92]	@ (8007a9c <HAL_RCC_OscConfig+0xcc8>)
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d0f0      	beq.n	8007a2c <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007a4a:	4b14      	ldr	r3, [pc, #80]	@ (8007a9c <HAL_RCC_OscConfig+0xcc8>)
 8007a4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a4e:	4a13      	ldr	r2, [pc, #76]	@ (8007a9c <HAL_RCC_OscConfig+0xcc8>)
 8007a50:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007a54:	6293      	str	r3, [r2, #40]	@ 0x28
 8007a56:	e091      	b.n	8007b7c <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8007a58:	4b10      	ldr	r3, [pc, #64]	@ (8007a9c <HAL_RCC_OscConfig+0xcc8>)
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	4a0f      	ldr	r2, [pc, #60]	@ (8007a9c <HAL_RCC_OscConfig+0xcc8>)
 8007a5e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007a62:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8007a64:	f7fa fea6 	bl	80027b4 <HAL_GetTick>
 8007a68:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8007a6a:	e008      	b.n	8007a7e <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007a6c:	f7fa fea2 	bl	80027b4 <HAL_GetTick>
 8007a70:	4602      	mov	r2, r0
 8007a72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a74:	1ad3      	subs	r3, r2, r3
 8007a76:	2b02      	cmp	r3, #2
 8007a78:	d901      	bls.n	8007a7e <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 8007a7a:	2303      	movs	r3, #3
 8007a7c:	e07f      	b.n	8007b7e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8007a7e:	4b07      	ldr	r3, [pc, #28]	@ (8007a9c <HAL_RCC_OscConfig+0xcc8>)
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d1f0      	bne.n	8007a6c <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8007a8a:	4b04      	ldr	r3, [pc, #16]	@ (8007a9c <HAL_RCC_OscConfig+0xcc8>)
 8007a8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a8e:	4a03      	ldr	r2, [pc, #12]	@ (8007a9c <HAL_RCC_OscConfig+0xcc8>)
 8007a90:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8007a94:	f023 0303 	bic.w	r3, r3, #3
 8007a98:	6293      	str	r3, [r2, #40]	@ 0x28
 8007a9a:	e06f      	b.n	8007b7c <HAL_RCC_OscConfig+0xda8>
 8007a9c:	46020c00 	.word	0x46020c00
 8007aa0:	46020800 	.word	0x46020800
 8007aa4:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8007aa8:	4b37      	ldr	r3, [pc, #220]	@ (8007b88 <HAL_RCC_OscConfig+0xdb4>)
 8007aaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007aac:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8007aae:	4b36      	ldr	r3, [pc, #216]	@ (8007b88 <HAL_RCC_OscConfig+0xdb4>)
 8007ab0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ab2:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ab8:	2b01      	cmp	r3, #1
 8007aba:	d039      	beq.n	8007b30 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8007abc:	69fb      	ldr	r3, [r7, #28]
 8007abe:	f003 0203 	and.w	r2, r3, #3
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007ac6:	429a      	cmp	r2, r3
 8007ac8:	d132      	bne.n	8007b30 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8007aca:	69fb      	ldr	r3, [r7, #28]
 8007acc:	0a1b      	lsrs	r3, r3, #8
 8007ace:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ad6:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8007ad8:	429a      	cmp	r2, r3
 8007ada:	d129      	bne.n	8007b30 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8007adc:	69fb      	ldr	r3, [r7, #28]
 8007ade:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8007ae6:	429a      	cmp	r2, r3
 8007ae8:	d122      	bne.n	8007b30 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007aea:	69bb      	ldr	r3, [r7, #24]
 8007aec:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007af4:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8007af6:	429a      	cmp	r2, r3
 8007af8:	d11a      	bne.n	8007b30 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8007afa:	69bb      	ldr	r3, [r7, #24]
 8007afc:	0a5b      	lsrs	r3, r3, #9
 8007afe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007b06:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007b08:	429a      	cmp	r2, r3
 8007b0a:	d111      	bne.n	8007b30 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8007b0c:	69bb      	ldr	r3, [r7, #24]
 8007b0e:	0c1b      	lsrs	r3, r3, #16
 8007b10:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b18:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007b1a:	429a      	cmp	r2, r3
 8007b1c:	d108      	bne.n	8007b30 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8007b1e:	69bb      	ldr	r3, [r7, #24]
 8007b20:	0e1b      	lsrs	r3, r3, #24
 8007b22:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b2a:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007b2c:	429a      	cmp	r2, r3
 8007b2e:	d001      	beq.n	8007b34 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8007b30:	2301      	movs	r3, #1
 8007b32:	e024      	b.n	8007b7e <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8007b34:	4b14      	ldr	r3, [pc, #80]	@ (8007b88 <HAL_RCC_OscConfig+0xdb4>)
 8007b36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b38:	08db      	lsrs	r3, r3, #3
 8007b3a:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8007b42:	429a      	cmp	r2, r3
 8007b44:	d01a      	beq.n	8007b7c <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8007b46:	4b10      	ldr	r3, [pc, #64]	@ (8007b88 <HAL_RCC_OscConfig+0xdb4>)
 8007b48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b4a:	4a0f      	ldr	r2, [pc, #60]	@ (8007b88 <HAL_RCC_OscConfig+0xdb4>)
 8007b4c:	f023 0310 	bic.w	r3, r3, #16
 8007b50:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b52:	f7fa fe2f 	bl	80027b4 <HAL_GetTick>
 8007b56:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8007b58:	bf00      	nop
 8007b5a:	f7fa fe2b 	bl	80027b4 <HAL_GetTick>
 8007b5e:	4602      	mov	r2, r0
 8007b60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b62:	4293      	cmp	r3, r2
 8007b64:	d0f9      	beq.n	8007b5a <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007b6a:	4a07      	ldr	r2, [pc, #28]	@ (8007b88 <HAL_RCC_OscConfig+0xdb4>)
 8007b6c:	00db      	lsls	r3, r3, #3
 8007b6e:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8007b70:	4b05      	ldr	r3, [pc, #20]	@ (8007b88 <HAL_RCC_OscConfig+0xdb4>)
 8007b72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b74:	4a04      	ldr	r2, [pc, #16]	@ (8007b88 <HAL_RCC_OscConfig+0xdb4>)
 8007b76:	f043 0310 	orr.w	r3, r3, #16
 8007b7a:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 8007b7c:	2300      	movs	r3, #0
}
 8007b7e:	4618      	mov	r0, r3
 8007b80:	3738      	adds	r7, #56	@ 0x38
 8007b82:	46bd      	mov	sp, r7
 8007b84:	bd80      	pop	{r7, pc}
 8007b86:	bf00      	nop
 8007b88:	46020c00 	.word	0x46020c00

08007b8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b086      	sub	sp, #24
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
 8007b94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d101      	bne.n	8007ba0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007b9c:	2301      	movs	r3, #1
 8007b9e:	e1d9      	b.n	8007f54 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007ba0:	4b9b      	ldr	r3, [pc, #620]	@ (8007e10 <HAL_RCC_ClockConfig+0x284>)
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	f003 030f 	and.w	r3, r3, #15
 8007ba8:	683a      	ldr	r2, [r7, #0]
 8007baa:	429a      	cmp	r2, r3
 8007bac:	d910      	bls.n	8007bd0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007bae:	4b98      	ldr	r3, [pc, #608]	@ (8007e10 <HAL_RCC_ClockConfig+0x284>)
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	f023 020f 	bic.w	r2, r3, #15
 8007bb6:	4996      	ldr	r1, [pc, #600]	@ (8007e10 <HAL_RCC_ClockConfig+0x284>)
 8007bb8:	683b      	ldr	r3, [r7, #0]
 8007bba:	4313      	orrs	r3, r2
 8007bbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007bbe:	4b94      	ldr	r3, [pc, #592]	@ (8007e10 <HAL_RCC_ClockConfig+0x284>)
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	f003 030f 	and.w	r3, r3, #15
 8007bc6:	683a      	ldr	r2, [r7, #0]
 8007bc8:	429a      	cmp	r2, r3
 8007bca:	d001      	beq.n	8007bd0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007bcc:	2301      	movs	r3, #1
 8007bce:	e1c1      	b.n	8007f54 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	f003 0310 	and.w	r3, r3, #16
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d010      	beq.n	8007bfe <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	695a      	ldr	r2, [r3, #20]
 8007be0:	4b8c      	ldr	r3, [pc, #560]	@ (8007e14 <HAL_RCC_ClockConfig+0x288>)
 8007be2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007be4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007be8:	429a      	cmp	r2, r3
 8007bea:	d908      	bls.n	8007bfe <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8007bec:	4b89      	ldr	r3, [pc, #548]	@ (8007e14 <HAL_RCC_ClockConfig+0x288>)
 8007bee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bf0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	695b      	ldr	r3, [r3, #20]
 8007bf8:	4986      	ldr	r1, [pc, #536]	@ (8007e14 <HAL_RCC_ClockConfig+0x288>)
 8007bfa:	4313      	orrs	r3, r2
 8007bfc:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	f003 0308 	and.w	r3, r3, #8
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d012      	beq.n	8007c30 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	691a      	ldr	r2, [r3, #16]
 8007c0e:	4b81      	ldr	r3, [pc, #516]	@ (8007e14 <HAL_RCC_ClockConfig+0x288>)
 8007c10:	6a1b      	ldr	r3, [r3, #32]
 8007c12:	091b      	lsrs	r3, r3, #4
 8007c14:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007c18:	429a      	cmp	r2, r3
 8007c1a:	d909      	bls.n	8007c30 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8007c1c:	4b7d      	ldr	r3, [pc, #500]	@ (8007e14 <HAL_RCC_ClockConfig+0x288>)
 8007c1e:	6a1b      	ldr	r3, [r3, #32]
 8007c20:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	691b      	ldr	r3, [r3, #16]
 8007c28:	011b      	lsls	r3, r3, #4
 8007c2a:	497a      	ldr	r1, [pc, #488]	@ (8007e14 <HAL_RCC_ClockConfig+0x288>)
 8007c2c:	4313      	orrs	r3, r2
 8007c2e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	f003 0304 	and.w	r3, r3, #4
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d010      	beq.n	8007c5e <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	68da      	ldr	r2, [r3, #12]
 8007c40:	4b74      	ldr	r3, [pc, #464]	@ (8007e14 <HAL_RCC_ClockConfig+0x288>)
 8007c42:	6a1b      	ldr	r3, [r3, #32]
 8007c44:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007c48:	429a      	cmp	r2, r3
 8007c4a:	d908      	bls.n	8007c5e <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8007c4c:	4b71      	ldr	r3, [pc, #452]	@ (8007e14 <HAL_RCC_ClockConfig+0x288>)
 8007c4e:	6a1b      	ldr	r3, [r3, #32]
 8007c50:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	68db      	ldr	r3, [r3, #12]
 8007c58:	496e      	ldr	r1, [pc, #440]	@ (8007e14 <HAL_RCC_ClockConfig+0x288>)
 8007c5a:	4313      	orrs	r3, r2
 8007c5c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	f003 0302 	and.w	r3, r3, #2
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d010      	beq.n	8007c8c <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	689a      	ldr	r2, [r3, #8]
 8007c6e:	4b69      	ldr	r3, [pc, #420]	@ (8007e14 <HAL_RCC_ClockConfig+0x288>)
 8007c70:	6a1b      	ldr	r3, [r3, #32]
 8007c72:	f003 030f 	and.w	r3, r3, #15
 8007c76:	429a      	cmp	r2, r3
 8007c78:	d908      	bls.n	8007c8c <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8007c7a:	4b66      	ldr	r3, [pc, #408]	@ (8007e14 <HAL_RCC_ClockConfig+0x288>)
 8007c7c:	6a1b      	ldr	r3, [r3, #32]
 8007c7e:	f023 020f 	bic.w	r2, r3, #15
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	689b      	ldr	r3, [r3, #8]
 8007c86:	4963      	ldr	r1, [pc, #396]	@ (8007e14 <HAL_RCC_ClockConfig+0x288>)
 8007c88:	4313      	orrs	r3, r2
 8007c8a:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	f003 0301 	and.w	r3, r3, #1
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	f000 80d2 	beq.w	8007e3e <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	685b      	ldr	r3, [r3, #4]
 8007ca2:	2b03      	cmp	r3, #3
 8007ca4:	d143      	bne.n	8007d2e <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007ca6:	4b5b      	ldr	r3, [pc, #364]	@ (8007e14 <HAL_RCC_ClockConfig+0x288>)
 8007ca8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007cac:	f003 0304 	and.w	r3, r3, #4
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d110      	bne.n	8007cd6 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8007cb4:	4b57      	ldr	r3, [pc, #348]	@ (8007e14 <HAL_RCC_ClockConfig+0x288>)
 8007cb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007cba:	4a56      	ldr	r2, [pc, #344]	@ (8007e14 <HAL_RCC_ClockConfig+0x288>)
 8007cbc:	f043 0304 	orr.w	r3, r3, #4
 8007cc0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8007cc4:	4b53      	ldr	r3, [pc, #332]	@ (8007e14 <HAL_RCC_ClockConfig+0x288>)
 8007cc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007cca:	f003 0304 	and.w	r3, r3, #4
 8007cce:	60bb      	str	r3, [r7, #8]
 8007cd0:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8007cd2:	2301      	movs	r3, #1
 8007cd4:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8007cd6:	f7fa fd6d 	bl	80027b4 <HAL_GetTick>
 8007cda:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8007cdc:	4b4e      	ldr	r3, [pc, #312]	@ (8007e18 <HAL_RCC_ClockConfig+0x28c>)
 8007cde:	68db      	ldr	r3, [r3, #12]
 8007ce0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d00f      	beq.n	8007d08 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8007ce8:	e008      	b.n	8007cfc <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8007cea:	f7fa fd63 	bl	80027b4 <HAL_GetTick>
 8007cee:	4602      	mov	r2, r0
 8007cf0:	693b      	ldr	r3, [r7, #16]
 8007cf2:	1ad3      	subs	r3, r2, r3
 8007cf4:	2b02      	cmp	r3, #2
 8007cf6:	d901      	bls.n	8007cfc <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8007cf8:	2303      	movs	r3, #3
 8007cfa:	e12b      	b.n	8007f54 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8007cfc:	4b46      	ldr	r3, [pc, #280]	@ (8007e18 <HAL_RCC_ClockConfig+0x28c>)
 8007cfe:	68db      	ldr	r3, [r3, #12]
 8007d00:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d0f0      	beq.n	8007cea <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8007d08:	7dfb      	ldrb	r3, [r7, #23]
 8007d0a:	2b01      	cmp	r3, #1
 8007d0c:	d107      	bne.n	8007d1e <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8007d0e:	4b41      	ldr	r3, [pc, #260]	@ (8007e14 <HAL_RCC_ClockConfig+0x288>)
 8007d10:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007d14:	4a3f      	ldr	r2, [pc, #252]	@ (8007e14 <HAL_RCC_ClockConfig+0x288>)
 8007d16:	f023 0304 	bic.w	r3, r3, #4
 8007d1a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8007d1e:	4b3d      	ldr	r3, [pc, #244]	@ (8007e14 <HAL_RCC_ClockConfig+0x288>)
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d121      	bne.n	8007d6e <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 8007d2a:	2301      	movs	r3, #1
 8007d2c:	e112      	b.n	8007f54 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	685b      	ldr	r3, [r3, #4]
 8007d32:	2b02      	cmp	r3, #2
 8007d34:	d107      	bne.n	8007d46 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007d36:	4b37      	ldr	r3, [pc, #220]	@ (8007e14 <HAL_RCC_ClockConfig+0x288>)
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d115      	bne.n	8007d6e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8007d42:	2301      	movs	r3, #1
 8007d44:	e106      	b.n	8007f54 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	685b      	ldr	r3, [r3, #4]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d107      	bne.n	8007d5e <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8007d4e:	4b31      	ldr	r3, [pc, #196]	@ (8007e14 <HAL_RCC_ClockConfig+0x288>)
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	f003 0304 	and.w	r3, r3, #4
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d109      	bne.n	8007d6e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8007d5a:	2301      	movs	r3, #1
 8007d5c:	e0fa      	b.n	8007f54 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007d5e:	4b2d      	ldr	r3, [pc, #180]	@ (8007e14 <HAL_RCC_ClockConfig+0x288>)
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d101      	bne.n	8007d6e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8007d6a:	2301      	movs	r3, #1
 8007d6c:	e0f2      	b.n	8007f54 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8007d6e:	4b29      	ldr	r3, [pc, #164]	@ (8007e14 <HAL_RCC_ClockConfig+0x288>)
 8007d70:	69db      	ldr	r3, [r3, #28]
 8007d72:	f023 0203 	bic.w	r2, r3, #3
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	685b      	ldr	r3, [r3, #4]
 8007d7a:	4926      	ldr	r1, [pc, #152]	@ (8007e14 <HAL_RCC_ClockConfig+0x288>)
 8007d7c:	4313      	orrs	r3, r2
 8007d7e:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8007d80:	f7fa fd18 	bl	80027b4 <HAL_GetTick>
 8007d84:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	685b      	ldr	r3, [r3, #4]
 8007d8a:	2b03      	cmp	r3, #3
 8007d8c:	d112      	bne.n	8007db4 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007d8e:	e00a      	b.n	8007da6 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007d90:	f7fa fd10 	bl	80027b4 <HAL_GetTick>
 8007d94:	4602      	mov	r2, r0
 8007d96:	693b      	ldr	r3, [r7, #16]
 8007d98:	1ad3      	subs	r3, r2, r3
 8007d9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007d9e:	4293      	cmp	r3, r2
 8007da0:	d901      	bls.n	8007da6 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 8007da2:	2303      	movs	r3, #3
 8007da4:	e0d6      	b.n	8007f54 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007da6:	4b1b      	ldr	r3, [pc, #108]	@ (8007e14 <HAL_RCC_ClockConfig+0x288>)
 8007da8:	69db      	ldr	r3, [r3, #28]
 8007daa:	f003 030c 	and.w	r3, r3, #12
 8007dae:	2b0c      	cmp	r3, #12
 8007db0:	d1ee      	bne.n	8007d90 <HAL_RCC_ClockConfig+0x204>
 8007db2:	e044      	b.n	8007e3e <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	685b      	ldr	r3, [r3, #4]
 8007db8:	2b02      	cmp	r3, #2
 8007dba:	d112      	bne.n	8007de2 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8007dbc:	e00a      	b.n	8007dd4 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007dbe:	f7fa fcf9 	bl	80027b4 <HAL_GetTick>
 8007dc2:	4602      	mov	r2, r0
 8007dc4:	693b      	ldr	r3, [r7, #16]
 8007dc6:	1ad3      	subs	r3, r2, r3
 8007dc8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007dcc:	4293      	cmp	r3, r2
 8007dce:	d901      	bls.n	8007dd4 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8007dd0:	2303      	movs	r3, #3
 8007dd2:	e0bf      	b.n	8007f54 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8007dd4:	4b0f      	ldr	r3, [pc, #60]	@ (8007e14 <HAL_RCC_ClockConfig+0x288>)
 8007dd6:	69db      	ldr	r3, [r3, #28]
 8007dd8:	f003 030c 	and.w	r3, r3, #12
 8007ddc:	2b08      	cmp	r3, #8
 8007dde:	d1ee      	bne.n	8007dbe <HAL_RCC_ClockConfig+0x232>
 8007de0:	e02d      	b.n	8007e3e <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	685b      	ldr	r3, [r3, #4]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d123      	bne.n	8007e32 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8007dea:	e00a      	b.n	8007e02 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007dec:	f7fa fce2 	bl	80027b4 <HAL_GetTick>
 8007df0:	4602      	mov	r2, r0
 8007df2:	693b      	ldr	r3, [r7, #16]
 8007df4:	1ad3      	subs	r3, r2, r3
 8007df6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007dfa:	4293      	cmp	r3, r2
 8007dfc:	d901      	bls.n	8007e02 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 8007dfe:	2303      	movs	r3, #3
 8007e00:	e0a8      	b.n	8007f54 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8007e02:	4b04      	ldr	r3, [pc, #16]	@ (8007e14 <HAL_RCC_ClockConfig+0x288>)
 8007e04:	69db      	ldr	r3, [r3, #28]
 8007e06:	f003 030c 	and.w	r3, r3, #12
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d1ee      	bne.n	8007dec <HAL_RCC_ClockConfig+0x260>
 8007e0e:	e016      	b.n	8007e3e <HAL_RCC_ClockConfig+0x2b2>
 8007e10:	40022000 	.word	0x40022000
 8007e14:	46020c00 	.word	0x46020c00
 8007e18:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007e1c:	f7fa fcca 	bl	80027b4 <HAL_GetTick>
 8007e20:	4602      	mov	r2, r0
 8007e22:	693b      	ldr	r3, [r7, #16]
 8007e24:	1ad3      	subs	r3, r2, r3
 8007e26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007e2a:	4293      	cmp	r3, r2
 8007e2c:	d901      	bls.n	8007e32 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8007e2e:	2303      	movs	r3, #3
 8007e30:	e090      	b.n	8007f54 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8007e32:	4b4a      	ldr	r3, [pc, #296]	@ (8007f5c <HAL_RCC_ClockConfig+0x3d0>)
 8007e34:	69db      	ldr	r3, [r3, #28]
 8007e36:	f003 030c 	and.w	r3, r3, #12
 8007e3a:	2b04      	cmp	r3, #4
 8007e3c:	d1ee      	bne.n	8007e1c <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	f003 0302 	and.w	r3, r3, #2
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d010      	beq.n	8007e6c <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	689a      	ldr	r2, [r3, #8]
 8007e4e:	4b43      	ldr	r3, [pc, #268]	@ (8007f5c <HAL_RCC_ClockConfig+0x3d0>)
 8007e50:	6a1b      	ldr	r3, [r3, #32]
 8007e52:	f003 030f 	and.w	r3, r3, #15
 8007e56:	429a      	cmp	r2, r3
 8007e58:	d208      	bcs.n	8007e6c <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8007e5a:	4b40      	ldr	r3, [pc, #256]	@ (8007f5c <HAL_RCC_ClockConfig+0x3d0>)
 8007e5c:	6a1b      	ldr	r3, [r3, #32]
 8007e5e:	f023 020f 	bic.w	r2, r3, #15
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	689b      	ldr	r3, [r3, #8]
 8007e66:	493d      	ldr	r1, [pc, #244]	@ (8007f5c <HAL_RCC_ClockConfig+0x3d0>)
 8007e68:	4313      	orrs	r3, r2
 8007e6a:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007e6c:	4b3c      	ldr	r3, [pc, #240]	@ (8007f60 <HAL_RCC_ClockConfig+0x3d4>)
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	f003 030f 	and.w	r3, r3, #15
 8007e74:	683a      	ldr	r2, [r7, #0]
 8007e76:	429a      	cmp	r2, r3
 8007e78:	d210      	bcs.n	8007e9c <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007e7a:	4b39      	ldr	r3, [pc, #228]	@ (8007f60 <HAL_RCC_ClockConfig+0x3d4>)
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	f023 020f 	bic.w	r2, r3, #15
 8007e82:	4937      	ldr	r1, [pc, #220]	@ (8007f60 <HAL_RCC_ClockConfig+0x3d4>)
 8007e84:	683b      	ldr	r3, [r7, #0]
 8007e86:	4313      	orrs	r3, r2
 8007e88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007e8a:	4b35      	ldr	r3, [pc, #212]	@ (8007f60 <HAL_RCC_ClockConfig+0x3d4>)
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	f003 030f 	and.w	r3, r3, #15
 8007e92:	683a      	ldr	r2, [r7, #0]
 8007e94:	429a      	cmp	r2, r3
 8007e96:	d001      	beq.n	8007e9c <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8007e98:	2301      	movs	r3, #1
 8007e9a:	e05b      	b.n	8007f54 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	f003 0304 	and.w	r3, r3, #4
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d010      	beq.n	8007eca <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	68da      	ldr	r2, [r3, #12]
 8007eac:	4b2b      	ldr	r3, [pc, #172]	@ (8007f5c <HAL_RCC_ClockConfig+0x3d0>)
 8007eae:	6a1b      	ldr	r3, [r3, #32]
 8007eb0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007eb4:	429a      	cmp	r2, r3
 8007eb6:	d208      	bcs.n	8007eca <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8007eb8:	4b28      	ldr	r3, [pc, #160]	@ (8007f5c <HAL_RCC_ClockConfig+0x3d0>)
 8007eba:	6a1b      	ldr	r3, [r3, #32]
 8007ebc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	68db      	ldr	r3, [r3, #12]
 8007ec4:	4925      	ldr	r1, [pc, #148]	@ (8007f5c <HAL_RCC_ClockConfig+0x3d0>)
 8007ec6:	4313      	orrs	r3, r2
 8007ec8:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	f003 0308 	and.w	r3, r3, #8
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d012      	beq.n	8007efc <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	691a      	ldr	r2, [r3, #16]
 8007eda:	4b20      	ldr	r3, [pc, #128]	@ (8007f5c <HAL_RCC_ClockConfig+0x3d0>)
 8007edc:	6a1b      	ldr	r3, [r3, #32]
 8007ede:	091b      	lsrs	r3, r3, #4
 8007ee0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007ee4:	429a      	cmp	r2, r3
 8007ee6:	d209      	bcs.n	8007efc <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8007ee8:	4b1c      	ldr	r3, [pc, #112]	@ (8007f5c <HAL_RCC_ClockConfig+0x3d0>)
 8007eea:	6a1b      	ldr	r3, [r3, #32]
 8007eec:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	691b      	ldr	r3, [r3, #16]
 8007ef4:	011b      	lsls	r3, r3, #4
 8007ef6:	4919      	ldr	r1, [pc, #100]	@ (8007f5c <HAL_RCC_ClockConfig+0x3d0>)
 8007ef8:	4313      	orrs	r3, r2
 8007efa:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	f003 0310 	and.w	r3, r3, #16
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d010      	beq.n	8007f2a <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	695a      	ldr	r2, [r3, #20]
 8007f0c:	4b13      	ldr	r3, [pc, #76]	@ (8007f5c <HAL_RCC_ClockConfig+0x3d0>)
 8007f0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f10:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007f14:	429a      	cmp	r2, r3
 8007f16:	d208      	bcs.n	8007f2a <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8007f18:	4b10      	ldr	r3, [pc, #64]	@ (8007f5c <HAL_RCC_ClockConfig+0x3d0>)
 8007f1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f1c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	695b      	ldr	r3, [r3, #20]
 8007f24:	490d      	ldr	r1, [pc, #52]	@ (8007f5c <HAL_RCC_ClockConfig+0x3d0>)
 8007f26:	4313      	orrs	r3, r2
 8007f28:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8007f2a:	f000 f821 	bl	8007f70 <HAL_RCC_GetSysClockFreq>
 8007f2e:	4602      	mov	r2, r0
 8007f30:	4b0a      	ldr	r3, [pc, #40]	@ (8007f5c <HAL_RCC_ClockConfig+0x3d0>)
 8007f32:	6a1b      	ldr	r3, [r3, #32]
 8007f34:	f003 030f 	and.w	r3, r3, #15
 8007f38:	490a      	ldr	r1, [pc, #40]	@ (8007f64 <HAL_RCC_ClockConfig+0x3d8>)
 8007f3a:	5ccb      	ldrb	r3, [r1, r3]
 8007f3c:	fa22 f303 	lsr.w	r3, r2, r3
 8007f40:	4a09      	ldr	r2, [pc, #36]	@ (8007f68 <HAL_RCC_ClockConfig+0x3dc>)
 8007f42:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8007f44:	4b09      	ldr	r3, [pc, #36]	@ (8007f6c <HAL_RCC_ClockConfig+0x3e0>)
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	4618      	mov	r0, r3
 8007f4a:	f7fa fba9 	bl	80026a0 <HAL_InitTick>
 8007f4e:	4603      	mov	r3, r0
 8007f50:	73fb      	strb	r3, [r7, #15]

  return status;
 8007f52:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f54:	4618      	mov	r0, r3
 8007f56:	3718      	adds	r7, #24
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	bd80      	pop	{r7, pc}
 8007f5c:	46020c00 	.word	0x46020c00
 8007f60:	40022000 	.word	0x40022000
 8007f64:	08011c50 	.word	0x08011c50
 8007f68:	20000000 	.word	0x20000000
 8007f6c:	20000004 	.word	0x20000004

08007f70 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007f70:	b480      	push	{r7}
 8007f72:	b08b      	sub	sp, #44	@ 0x2c
 8007f74:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8007f76:	2300      	movs	r3, #0
 8007f78:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007f7e:	4b78      	ldr	r3, [pc, #480]	@ (8008160 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007f80:	69db      	ldr	r3, [r3, #28]
 8007f82:	f003 030c 	and.w	r3, r3, #12
 8007f86:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007f88:	4b75      	ldr	r3, [pc, #468]	@ (8008160 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007f8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f8c:	f003 0303 	and.w	r3, r3, #3
 8007f90:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8007f92:	69bb      	ldr	r3, [r7, #24]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d005      	beq.n	8007fa4 <HAL_RCC_GetSysClockFreq+0x34>
 8007f98:	69bb      	ldr	r3, [r7, #24]
 8007f9a:	2b0c      	cmp	r3, #12
 8007f9c:	d121      	bne.n	8007fe2 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8007f9e:	697b      	ldr	r3, [r7, #20]
 8007fa0:	2b01      	cmp	r3, #1
 8007fa2:	d11e      	bne.n	8007fe2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8007fa4:	4b6e      	ldr	r3, [pc, #440]	@ (8008160 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007fa6:	689b      	ldr	r3, [r3, #8]
 8007fa8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d107      	bne.n	8007fc0 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8007fb0:	4b6b      	ldr	r3, [pc, #428]	@ (8008160 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007fb2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007fb6:	0b1b      	lsrs	r3, r3, #12
 8007fb8:	f003 030f 	and.w	r3, r3, #15
 8007fbc:	627b      	str	r3, [r7, #36]	@ 0x24
 8007fbe:	e005      	b.n	8007fcc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8007fc0:	4b67      	ldr	r3, [pc, #412]	@ (8008160 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007fc2:	689b      	ldr	r3, [r3, #8]
 8007fc4:	0f1b      	lsrs	r3, r3, #28
 8007fc6:	f003 030f 	and.w	r3, r3, #15
 8007fca:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8007fcc:	4a65      	ldr	r2, [pc, #404]	@ (8008164 <HAL_RCC_GetSysClockFreq+0x1f4>)
 8007fce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007fd4:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8007fd6:	69bb      	ldr	r3, [r7, #24]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d110      	bne.n	8007ffe <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8007fdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fde:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8007fe0:	e00d      	b.n	8007ffe <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007fe2:	4b5f      	ldr	r3, [pc, #380]	@ (8008160 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007fe4:	69db      	ldr	r3, [r3, #28]
 8007fe6:	f003 030c 	and.w	r3, r3, #12
 8007fea:	2b04      	cmp	r3, #4
 8007fec:	d102      	bne.n	8007ff4 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007fee:	4b5e      	ldr	r3, [pc, #376]	@ (8008168 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8007ff0:	623b      	str	r3, [r7, #32]
 8007ff2:	e004      	b.n	8007ffe <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007ff4:	69bb      	ldr	r3, [r7, #24]
 8007ff6:	2b08      	cmp	r3, #8
 8007ff8:	d101      	bne.n	8007ffe <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007ffa:	4b5b      	ldr	r3, [pc, #364]	@ (8008168 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8007ffc:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007ffe:	69bb      	ldr	r3, [r7, #24]
 8008000:	2b0c      	cmp	r3, #12
 8008002:	f040 80a5 	bne.w	8008150 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8008006:	4b56      	ldr	r3, [pc, #344]	@ (8008160 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8008008:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800800a:	f003 0303 	and.w	r3, r3, #3
 800800e:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8008010:	4b53      	ldr	r3, [pc, #332]	@ (8008160 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8008012:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008014:	0a1b      	lsrs	r3, r3, #8
 8008016:	f003 030f 	and.w	r3, r3, #15
 800801a:	3301      	adds	r3, #1
 800801c:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800801e:	4b50      	ldr	r3, [pc, #320]	@ (8008160 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8008020:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008022:	091b      	lsrs	r3, r3, #4
 8008024:	f003 0301 	and.w	r3, r3, #1
 8008028:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800802a:	4b4d      	ldr	r3, [pc, #308]	@ (8008160 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800802c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800802e:	08db      	lsrs	r3, r3, #3
 8008030:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008034:	68ba      	ldr	r2, [r7, #8]
 8008036:	fb02 f303 	mul.w	r3, r2, r3
 800803a:	ee07 3a90 	vmov	s15, r3
 800803e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008042:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 8008046:	693b      	ldr	r3, [r7, #16]
 8008048:	2b02      	cmp	r3, #2
 800804a:	d003      	beq.n	8008054 <HAL_RCC_GetSysClockFreq+0xe4>
 800804c:	693b      	ldr	r3, [r7, #16]
 800804e:	2b03      	cmp	r3, #3
 8008050:	d022      	beq.n	8008098 <HAL_RCC_GetSysClockFreq+0x128>
 8008052:	e043      	b.n	80080dc <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	ee07 3a90 	vmov	s15, r3
 800805a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800805e:	eddf 6a43 	vldr	s13, [pc, #268]	@ 800816c <HAL_RCC_GetSysClockFreq+0x1fc>
 8008062:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008066:	4b3e      	ldr	r3, [pc, #248]	@ (8008160 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8008068:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800806a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800806e:	ee07 3a90 	vmov	s15, r3
 8008072:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8008076:	ed97 6a01 	vldr	s12, [r7, #4]
 800807a:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 8008170 <HAL_RCC_GetSysClockFreq+0x200>
 800807e:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008082:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8008086:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800808a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800808e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008092:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008096:	e046      	b.n	8008126 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	ee07 3a90 	vmov	s15, r3
 800809e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080a2:	eddf 6a32 	vldr	s13, [pc, #200]	@ 800816c <HAL_RCC_GetSysClockFreq+0x1fc>
 80080a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80080aa:	4b2d      	ldr	r3, [pc, #180]	@ (8008160 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80080ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80080ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080b2:	ee07 3a90 	vmov	s15, r3
 80080b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80080ba:	ed97 6a01 	vldr	s12, [r7, #4]
 80080be:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 8008170 <HAL_RCC_GetSysClockFreq+0x200>
 80080c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80080c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80080ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80080ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80080d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80080d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80080da:	e024      	b.n	8008126 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80080dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080de:	ee07 3a90 	vmov	s15, r3
 80080e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	ee07 3a90 	vmov	s15, r3
 80080ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80080f4:	4b1a      	ldr	r3, [pc, #104]	@ (8008160 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80080f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80080f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080fc:	ee07 3a90 	vmov	s15, r3
 8008100:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8008104:	ed97 6a01 	vldr	s12, [r7, #4]
 8008108:	eddf 5a19 	vldr	s11, [pc, #100]	@ 8008170 <HAL_RCC_GetSysClockFreq+0x200>
 800810c:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008110:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8008114:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008118:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800811c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008120:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008124:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8008126:	4b0e      	ldr	r3, [pc, #56]	@ (8008160 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8008128:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800812a:	0e1b      	lsrs	r3, r3, #24
 800812c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008130:	3301      	adds	r3, #1
 8008132:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8008134:	683b      	ldr	r3, [r7, #0]
 8008136:	ee07 3a90 	vmov	s15, r3
 800813a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800813e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008142:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008146:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800814a:	ee17 3a90 	vmov	r3, s15
 800814e:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8008150:	6a3b      	ldr	r3, [r7, #32]
}
 8008152:	4618      	mov	r0, r3
 8008154:	372c      	adds	r7, #44	@ 0x2c
 8008156:	46bd      	mov	sp, r7
 8008158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815c:	4770      	bx	lr
 800815e:	bf00      	nop
 8008160:	46020c00 	.word	0x46020c00
 8008164:	08011c68 	.word	0x08011c68
 8008168:	00f42400 	.word	0x00f42400
 800816c:	4b742400 	.word	0x4b742400
 8008170:	46000000 	.word	0x46000000

08008174 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008174:	b580      	push	{r7, lr}
 8008176:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8008178:	f7ff fefa 	bl	8007f70 <HAL_RCC_GetSysClockFreq>
 800817c:	4602      	mov	r2, r0
 800817e:	4b07      	ldr	r3, [pc, #28]	@ (800819c <HAL_RCC_GetHCLKFreq+0x28>)
 8008180:	6a1b      	ldr	r3, [r3, #32]
 8008182:	f003 030f 	and.w	r3, r3, #15
 8008186:	4906      	ldr	r1, [pc, #24]	@ (80081a0 <HAL_RCC_GetHCLKFreq+0x2c>)
 8008188:	5ccb      	ldrb	r3, [r1, r3]
 800818a:	fa22 f303 	lsr.w	r3, r2, r3
 800818e:	4a05      	ldr	r2, [pc, #20]	@ (80081a4 <HAL_RCC_GetHCLKFreq+0x30>)
 8008190:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8008192:	4b04      	ldr	r3, [pc, #16]	@ (80081a4 <HAL_RCC_GetHCLKFreq+0x30>)
 8008194:	681b      	ldr	r3, [r3, #0]
}
 8008196:	4618      	mov	r0, r3
 8008198:	bd80      	pop	{r7, pc}
 800819a:	bf00      	nop
 800819c:	46020c00 	.word	0x46020c00
 80081a0:	08011c50 	.word	0x08011c50
 80081a4:	20000000 	.word	0x20000000

080081a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 80081ac:	f7ff ffe2 	bl	8008174 <HAL_RCC_GetHCLKFreq>
 80081b0:	4602      	mov	r2, r0
 80081b2:	4b05      	ldr	r3, [pc, #20]	@ (80081c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80081b4:	6a1b      	ldr	r3, [r3, #32]
 80081b6:	091b      	lsrs	r3, r3, #4
 80081b8:	f003 0307 	and.w	r3, r3, #7
 80081bc:	4903      	ldr	r1, [pc, #12]	@ (80081cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80081be:	5ccb      	ldrb	r3, [r1, r3]
 80081c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80081c4:	4618      	mov	r0, r3
 80081c6:	bd80      	pop	{r7, pc}
 80081c8:	46020c00 	.word	0x46020c00
 80081cc:	08011c60 	.word	0x08011c60

080081d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 80081d4:	f7ff ffce 	bl	8008174 <HAL_RCC_GetHCLKFreq>
 80081d8:	4602      	mov	r2, r0
 80081da:	4b05      	ldr	r3, [pc, #20]	@ (80081f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80081dc:	6a1b      	ldr	r3, [r3, #32]
 80081de:	0a1b      	lsrs	r3, r3, #8
 80081e0:	f003 0307 	and.w	r3, r3, #7
 80081e4:	4903      	ldr	r1, [pc, #12]	@ (80081f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80081e6:	5ccb      	ldrb	r3, [r1, r3]
 80081e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80081ec:	4618      	mov	r0, r3
 80081ee:	bd80      	pop	{r7, pc}
 80081f0:	46020c00 	.word	0x46020c00
 80081f4:	08011c60 	.word	0x08011c60

080081f8 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 80081f8:	b580      	push	{r7, lr}
 80081fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 80081fc:	f7ff ffba 	bl	8008174 <HAL_RCC_GetHCLKFreq>
 8008200:	4602      	mov	r2, r0
 8008202:	4b05      	ldr	r3, [pc, #20]	@ (8008218 <HAL_RCC_GetPCLK3Freq+0x20>)
 8008204:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008206:	091b      	lsrs	r3, r3, #4
 8008208:	f003 0307 	and.w	r3, r3, #7
 800820c:	4903      	ldr	r1, [pc, #12]	@ (800821c <HAL_RCC_GetPCLK3Freq+0x24>)
 800820e:	5ccb      	ldrb	r3, [r1, r3]
 8008210:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008214:	4618      	mov	r0, r3
 8008216:	bd80      	pop	{r7, pc}
 8008218:	46020c00 	.word	0x46020c00
 800821c:	08011c60 	.word	0x08011c60

08008220 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8008220:	b580      	push	{r7, lr}
 8008222:	b086      	sub	sp, #24
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8008228:	4b3e      	ldr	r3, [pc, #248]	@ (8008324 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800822a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800822e:	f003 0304 	and.w	r3, r3, #4
 8008232:	2b00      	cmp	r3, #0
 8008234:	d003      	beq.n	800823e <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8008236:	f7fe fd11 	bl	8006c5c <HAL_PWREx_GetVoltageRange>
 800823a:	6178      	str	r0, [r7, #20]
 800823c:	e019      	b.n	8008272 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800823e:	4b39      	ldr	r3, [pc, #228]	@ (8008324 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8008240:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008244:	4a37      	ldr	r2, [pc, #220]	@ (8008324 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8008246:	f043 0304 	orr.w	r3, r3, #4
 800824a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800824e:	4b35      	ldr	r3, [pc, #212]	@ (8008324 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8008250:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008254:	f003 0304 	and.w	r3, r3, #4
 8008258:	60fb      	str	r3, [r7, #12]
 800825a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800825c:	f7fe fcfe 	bl	8006c5c <HAL_PWREx_GetVoltageRange>
 8008260:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8008262:	4b30      	ldr	r3, [pc, #192]	@ (8008324 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8008264:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008268:	4a2e      	ldr	r2, [pc, #184]	@ (8008324 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800826a:	f023 0304 	bic.w	r3, r3, #4
 800826e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8008272:	697b      	ldr	r3, [r7, #20]
 8008274:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008278:	d003      	beq.n	8008282 <RCC_SetFlashLatencyFromMSIRange+0x62>
 800827a:	697b      	ldr	r3, [r7, #20]
 800827c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008280:	d109      	bne.n	8008296 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008288:	d202      	bcs.n	8008290 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 800828a:	2301      	movs	r3, #1
 800828c:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800828e:	e033      	b.n	80082f8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8008290:	2300      	movs	r3, #0
 8008292:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8008294:	e030      	b.n	80082f8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800829c:	d208      	bcs.n	80082b0 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800829e:	697b      	ldr	r3, [r7, #20]
 80082a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80082a4:	d102      	bne.n	80082ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 80082a6:	2303      	movs	r3, #3
 80082a8:	613b      	str	r3, [r7, #16]
 80082aa:	e025      	b.n	80082f8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 80082ac:	2301      	movs	r3, #1
 80082ae:	e035      	b.n	800831c <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80082b6:	d90f      	bls.n	80082d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 80082b8:	697b      	ldr	r3, [r7, #20]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d109      	bne.n	80082d2 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80082c4:	d902      	bls.n	80082cc <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 80082c6:	2300      	movs	r3, #0
 80082c8:	613b      	str	r3, [r7, #16]
 80082ca:	e015      	b.n	80082f8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 80082cc:	2301      	movs	r3, #1
 80082ce:	613b      	str	r3, [r7, #16]
 80082d0:	e012      	b.n	80082f8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 80082d2:	2300      	movs	r3, #0
 80082d4:	613b      	str	r3, [r7, #16]
 80082d6:	e00f      	b.n	80082f8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80082de:	d109      	bne.n	80082f4 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 80082e0:	697b      	ldr	r3, [r7, #20]
 80082e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80082e6:	d102      	bne.n	80082ee <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 80082e8:	2301      	movs	r3, #1
 80082ea:	613b      	str	r3, [r7, #16]
 80082ec:	e004      	b.n	80082f8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 80082ee:	2302      	movs	r3, #2
 80082f0:	613b      	str	r3, [r7, #16]
 80082f2:	e001      	b.n	80082f8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 80082f4:	2301      	movs	r3, #1
 80082f6:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80082f8:	4b0b      	ldr	r3, [pc, #44]	@ (8008328 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	f023 020f 	bic.w	r2, r3, #15
 8008300:	4909      	ldr	r1, [pc, #36]	@ (8008328 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8008302:	693b      	ldr	r3, [r7, #16]
 8008304:	4313      	orrs	r3, r2
 8008306:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8008308:	4b07      	ldr	r3, [pc, #28]	@ (8008328 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	f003 030f 	and.w	r3, r3, #15
 8008310:	693a      	ldr	r2, [r7, #16]
 8008312:	429a      	cmp	r2, r3
 8008314:	d001      	beq.n	800831a <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8008316:	2301      	movs	r3, #1
 8008318:	e000      	b.n	800831c <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 800831a:	2300      	movs	r3, #0
}
 800831c:	4618      	mov	r0, r3
 800831e:	3718      	adds	r7, #24
 8008320:	46bd      	mov	sp, r7
 8008322:	bd80      	pop	{r7, pc}
 8008324:	46020c00 	.word	0x46020c00
 8008328:	40022000 	.word	0x40022000

0800832c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 800832c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008330:	b0c8      	sub	sp, #288	@ 0x120
 8008332:	af00      	add	r7, sp, #0
 8008334:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008338:	2300      	movs	r3, #0
 800833a:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800833e:	2300      	movs	r3, #0
 8008340:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008344:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800834c:	f002 0401 	and.w	r4, r2, #1
 8008350:	2500      	movs	r5, #0
 8008352:	ea54 0305 	orrs.w	r3, r4, r5
 8008356:	d00b      	beq.n	8008370 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8008358:	4bd5      	ldr	r3, [pc, #852]	@ (80086b0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800835a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800835e:	f023 0103 	bic.w	r1, r3, #3
 8008362:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008366:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008368:	4ad1      	ldr	r2, [pc, #836]	@ (80086b0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800836a:	430b      	orrs	r3, r1
 800836c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008370:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008378:	f002 0802 	and.w	r8, r2, #2
 800837c:	f04f 0900 	mov.w	r9, #0
 8008380:	ea58 0309 	orrs.w	r3, r8, r9
 8008384:	d00b      	beq.n	800839e <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8008386:	4bca      	ldr	r3, [pc, #808]	@ (80086b0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008388:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800838c:	f023 010c 	bic.w	r1, r3, #12
 8008390:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008394:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008396:	4ac6      	ldr	r2, [pc, #792]	@ (80086b0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008398:	430b      	orrs	r3, r1
 800839a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800839e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80083a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083a6:	f002 0a04 	and.w	sl, r2, #4
 80083aa:	f04f 0b00 	mov.w	fp, #0
 80083ae:	ea5a 030b 	orrs.w	r3, sl, fp
 80083b2:	d00b      	beq.n	80083cc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 80083b4:	4bbe      	ldr	r3, [pc, #760]	@ (80086b0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80083b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80083ba:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80083be:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80083c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80083c4:	4aba      	ldr	r2, [pc, #744]	@ (80086b0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80083c6:	430b      	orrs	r3, r1
 80083c8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80083cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80083d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083d4:	f002 0308 	and.w	r3, r2, #8
 80083d8:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80083dc:	2300      	movs	r3, #0
 80083de:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80083e2:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80083e6:	460b      	mov	r3, r1
 80083e8:	4313      	orrs	r3, r2
 80083ea:	d00b      	beq.n	8008404 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 80083ec:	4bb0      	ldr	r3, [pc, #704]	@ (80086b0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80083ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80083f2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80083f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80083fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80083fc:	4aac      	ldr	r2, [pc, #688]	@ (80086b0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80083fe:	430b      	orrs	r3, r1
 8008400:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008404:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800840c:	f002 0310 	and.w	r3, r2, #16
 8008410:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8008414:	2300      	movs	r3, #0
 8008416:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800841a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800841e:	460b      	mov	r3, r1
 8008420:	4313      	orrs	r3, r2
 8008422:	d00b      	beq.n	800843c <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8008424:	4ba2      	ldr	r3, [pc, #648]	@ (80086b0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008426:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800842a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800842e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008432:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008434:	4a9e      	ldr	r2, [pc, #632]	@ (80086b0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008436:	430b      	orrs	r3, r1
 8008438:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800843c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008444:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8008448:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800844c:	2300      	movs	r3, #0
 800844e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8008452:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8008456:	460b      	mov	r3, r1
 8008458:	4313      	orrs	r3, r2
 800845a:	d00b      	beq.n	8008474 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 800845c:	4b94      	ldr	r3, [pc, #592]	@ (80086b0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800845e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008462:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8008466:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800846a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800846c:	4a90      	ldr	r2, [pc, #576]	@ (80086b0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800846e:	430b      	orrs	r3, r1
 8008470:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008474:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800847c:	f002 0320 	and.w	r3, r2, #32
 8008480:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008484:	2300      	movs	r3, #0
 8008486:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800848a:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800848e:	460b      	mov	r3, r1
 8008490:	4313      	orrs	r3, r2
 8008492:	d00b      	beq.n	80084ac <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8008494:	4b86      	ldr	r3, [pc, #536]	@ (80086b0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008496:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800849a:	f023 0107 	bic.w	r1, r3, #7
 800849e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80084a2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80084a4:	4a82      	ldr	r2, [pc, #520]	@ (80086b0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80084a6:	430b      	orrs	r3, r1
 80084a8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80084ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80084b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084b4:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80084b8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80084bc:	2300      	movs	r3, #0
 80084be:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80084c2:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80084c6:	460b      	mov	r3, r1
 80084c8:	4313      	orrs	r3, r2
 80084ca:	d00b      	beq.n	80084e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 80084cc:	4b78      	ldr	r3, [pc, #480]	@ (80086b0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80084ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80084d2:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 80084d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80084da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80084dc:	4a74      	ldr	r2, [pc, #464]	@ (80086b0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80084de:	430b      	orrs	r3, r1
 80084e0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80084e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80084e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084ec:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80084f0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80084f4:	2300      	movs	r3, #0
 80084f6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80084fa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80084fe:	460b      	mov	r3, r1
 8008500:	4313      	orrs	r3, r2
 8008502:	d00b      	beq.n	800851c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8008504:	4b6a      	ldr	r3, [pc, #424]	@ (80086b0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008506:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800850a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800850e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008512:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008514:	4a66      	ldr	r2, [pc, #408]	@ (80086b0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008516:	430b      	orrs	r3, r1
 8008518:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800851c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008524:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 8008528:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800852c:	2300      	movs	r3, #0
 800852e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8008532:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8008536:	460b      	mov	r3, r1
 8008538:	4313      	orrs	r3, r2
 800853a:	d00b      	beq.n	8008554 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 800853c:	4b5c      	ldr	r3, [pc, #368]	@ (80086b0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800853e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008542:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8008546:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800854a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800854c:	4a58      	ldr	r2, [pc, #352]	@ (80086b0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800854e:	430b      	orrs	r3, r1
 8008550:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008554:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800855c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8008560:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008564:	2300      	movs	r3, #0
 8008566:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800856a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800856e:	460b      	mov	r3, r1
 8008570:	4313      	orrs	r3, r2
 8008572:	d00b      	beq.n	800858c <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8008574:	4b4e      	ldr	r3, [pc, #312]	@ (80086b0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008576:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800857a:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 800857e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008582:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008584:	4a4a      	ldr	r2, [pc, #296]	@ (80086b0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008586:	430b      	orrs	r3, r1
 8008588:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(I2C5)
  /*-------------------------- I2C5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C5) == RCC_PERIPHCLK_I2C5)
 800858c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008594:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8008598:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800859c:	2300      	movs	r3, #0
 800859e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80085a2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80085a6:	460b      	mov	r3, r1
 80085a8:	4313      	orrs	r3, r2
 80085aa:	d00b      	beq.n	80085c4 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C5CLKSOURCE(pPeriphClkInit->I2c5ClockSelection));

    /* Configure the I2C5 clock source */
    __HAL_RCC_I2C5_CONFIG(pPeriphClkInit->I2c5ClockSelection);
 80085ac:	4b40      	ldr	r3, [pc, #256]	@ (80086b0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80085ae:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80085b2:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 80085b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80085ba:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80085bc:	4a3c      	ldr	r2, [pc, #240]	@ (80086b0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80085be:	430b      	orrs	r3, r1
 80085c0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* I2C5 */

#if defined(I2C6)
  /*-------------------------- I2C6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C6) == RCC_PERIPHCLK_I2C6)
 80085c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80085c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085cc:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80085d0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80085d4:	2300      	movs	r3, #0
 80085d6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80085da:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80085de:	460b      	mov	r3, r1
 80085e0:	4313      	orrs	r3, r2
 80085e2:	d00c      	beq.n	80085fe <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C6CLKSOURCE(pPeriphClkInit->I2c6ClockSelection));

    /* Configure the I2C6 clock source */
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
 80085e4:	4b32      	ldr	r3, [pc, #200]	@ (80086b0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80085e6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80085ea:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80085ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80085f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80085f6:	4a2e      	ldr	r2, [pc, #184]	@ (80086b0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80085f8:	430b      	orrs	r3, r1
 80085fa:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80085fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008606:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 800860a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800860e:	2300      	movs	r3, #0
 8008610:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008614:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8008618:	460b      	mov	r3, r1
 800861a:	4313      	orrs	r3, r2
 800861c:	d00c      	beq.n	8008638 <HAL_RCCEx_PeriphCLKConfig+0x30c>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 800861e:	4b24      	ldr	r3, [pc, #144]	@ (80086b0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008620:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008624:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8008628:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800862c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008630:	4a1f      	ldr	r2, [pc, #124]	@ (80086b0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008632:	430b      	orrs	r3, r1
 8008634:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8008638:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800863c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008640:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8008644:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008648:	2300      	movs	r3, #0
 800864a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800864e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008652:	460b      	mov	r3, r1
 8008654:	4313      	orrs	r3, r2
 8008656:	d00c      	beq.n	8008672 <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8008658:	4b15      	ldr	r3, [pc, #84]	@ (80086b0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800865a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800865e:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8008662:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008666:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800866a:	4a11      	ldr	r2, [pc, #68]	@ (80086b0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800866c:	430b      	orrs	r3, r1
 800866e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8008672:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800867a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800867e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008682:	2300      	movs	r3, #0
 8008684:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008688:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800868c:	460b      	mov	r3, r1
 800868e:	4313      	orrs	r3, r2
 8008690:	d010      	beq.n	80086b4 <HAL_RCCEx_PeriphCLKConfig+0x388>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8008692:	4b07      	ldr	r3, [pc, #28]	@ (80086b0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008694:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008698:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800869c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80086a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80086a4:	4a02      	ldr	r2, [pc, #8]	@ (80086b0 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80086a6:	430b      	orrs	r3, r1
 80086a8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80086ac:	e002      	b.n	80086b4 <HAL_RCCEx_PeriphCLKConfig+0x388>
 80086ae:	bf00      	nop
 80086b0:	46020c00 	.word	0x46020c00
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80086b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80086b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086bc:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80086c0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80086c4:	2300      	movs	r3, #0
 80086c6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80086ca:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80086ce:	460b      	mov	r3, r1
 80086d0:	4313      	orrs	r3, r2
 80086d2:	d04c      	beq.n	800876e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 80086d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80086d8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80086dc:	2b80      	cmp	r3, #128	@ 0x80
 80086de:	d02d      	beq.n	800873c <HAL_RCCEx_PeriphCLKConfig+0x410>
 80086e0:	2b80      	cmp	r3, #128	@ 0x80
 80086e2:	d827      	bhi.n	8008734 <HAL_RCCEx_PeriphCLKConfig+0x408>
 80086e4:	2b60      	cmp	r3, #96	@ 0x60
 80086e6:	d02b      	beq.n	8008740 <HAL_RCCEx_PeriphCLKConfig+0x414>
 80086e8:	2b60      	cmp	r3, #96	@ 0x60
 80086ea:	d823      	bhi.n	8008734 <HAL_RCCEx_PeriphCLKConfig+0x408>
 80086ec:	2b40      	cmp	r3, #64	@ 0x40
 80086ee:	d006      	beq.n	80086fe <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 80086f0:	2b40      	cmp	r3, #64	@ 0x40
 80086f2:	d81f      	bhi.n	8008734 <HAL_RCCEx_PeriphCLKConfig+0x408>
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d009      	beq.n	800870c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80086f8:	2b20      	cmp	r3, #32
 80086fa:	d011      	beq.n	8008720 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 80086fc:	e01a      	b.n	8008734 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80086fe:	4bc0      	ldr	r3, [pc, #768]	@ (8008a00 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8008700:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008702:	4abf      	ldr	r2, [pc, #764]	@ (8008a00 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8008704:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008708:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 800870a:	e01a      	b.n	8008742 <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800870c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008710:	3308      	adds	r3, #8
 8008712:	4618      	mov	r0, r3
 8008714:	f002 fcd6 	bl	800b0c4 <RCCEx_PLL2_Config>
 8008718:	4603      	mov	r3, r0
 800871a:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI1 clock source config set later after clock selection check */
        break;
 800871e:	e010      	b.n	8008742 <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008720:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008724:	332c      	adds	r3, #44	@ 0x2c
 8008726:	4618      	mov	r0, r3
 8008728:	f002 fd64 	bl	800b1f4 <RCCEx_PLL3_Config>
 800872c:	4603      	mov	r3, r0
 800872e:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8008732:	e006      	b.n	8008742 <HAL_RCCEx_PeriphCLKConfig+0x416>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008734:	2301      	movs	r3, #1
 8008736:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800873a:	e002      	b.n	8008742 <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 800873c:	bf00      	nop
 800873e:	e000      	b.n	8008742 <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 8008740:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008742:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8008746:	2b00      	cmp	r3, #0
 8008748:	d10d      	bne.n	8008766 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 800874a:	4bad      	ldr	r3, [pc, #692]	@ (8008a00 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800874c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008750:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 8008754:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008758:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800875c:	4aa8      	ldr	r2, [pc, #672]	@ (8008a00 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800875e:	430b      	orrs	r3, r1
 8008760:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8008764:	e003      	b.n	800876e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008766:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800876a:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800876e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008776:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800877a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800877e:	2300      	movs	r3, #0
 8008780:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008784:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8008788:	460b      	mov	r3, r1
 800878a:	4313      	orrs	r3, r2
 800878c:	d053      	beq.n	8008836 <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 800878e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008792:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008796:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800879a:	d033      	beq.n	8008804 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
 800879c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80087a0:	d82c      	bhi.n	80087fc <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 80087a2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80087a6:	d02f      	beq.n	8008808 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
 80087a8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80087ac:	d826      	bhi.n	80087fc <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 80087ae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80087b2:	d008      	beq.n	80087c6 <HAL_RCCEx_PeriphCLKConfig+0x49a>
 80087b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80087b8:	d820      	bhi.n	80087fc <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d00a      	beq.n	80087d4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80087be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80087c2:	d011      	beq.n	80087e8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80087c4:	e01a      	b.n	80087fc <HAL_RCCEx_PeriphCLKConfig+0x4d0>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80087c6:	4b8e      	ldr	r3, [pc, #568]	@ (8008a00 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80087c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087ca:	4a8d      	ldr	r2, [pc, #564]	@ (8008a00 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80087cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80087d0:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 80087d2:	e01a      	b.n	800880a <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80087d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80087d8:	3308      	adds	r3, #8
 80087da:	4618      	mov	r0, r3
 80087dc:	f002 fc72 	bl	800b0c4 <RCCEx_PLL2_Config>
 80087e0:	4603      	mov	r3, r0
 80087e2:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI2 clock source config set later after clock selection check */
        break;
 80087e6:	e010      	b.n	800880a <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80087e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80087ec:	332c      	adds	r3, #44	@ 0x2c
 80087ee:	4618      	mov	r0, r3
 80087f0:	f002 fd00 	bl	800b1f4 <RCCEx_PLL3_Config>
 80087f4:	4603      	mov	r3, r0
 80087f6:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI2 clock source config set later after clock selection check */
        break;
 80087fa:	e006      	b.n	800880a <HAL_RCCEx_PeriphCLKConfig+0x4de>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80087fc:	2301      	movs	r3, #1
 80087fe:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8008802:	e002      	b.n	800880a <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 8008804:	bf00      	nop
 8008806:	e000      	b.n	800880a <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 8008808:	bf00      	nop
    }

    if (ret == HAL_OK)
 800880a:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800880e:	2b00      	cmp	r3, #0
 8008810:	d10d      	bne.n	800882e <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8008812:	4b7b      	ldr	r3, [pc, #492]	@ (8008a00 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8008814:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008818:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 800881c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008820:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008824:	4a76      	ldr	r2, [pc, #472]	@ (8008a00 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8008826:	430b      	orrs	r3, r1
 8008828:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800882c:	e003      	b.n	8008836 <HAL_RCCEx_PeriphCLKConfig+0x50a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800882e:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8008832:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8008836:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800883a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800883e:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8008842:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008846:	2300      	movs	r3, #0
 8008848:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800884c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8008850:	460b      	mov	r3, r1
 8008852:	4313      	orrs	r3, r2
 8008854:	d046      	beq.n	80088e4 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8008856:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800885a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800885e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8008862:	d028      	beq.n	80088b6 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 8008864:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8008868:	d821      	bhi.n	80088ae <HAL_RCCEx_PeriphCLKConfig+0x582>
 800886a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800886e:	d022      	beq.n	80088b6 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 8008870:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008874:	d81b      	bhi.n	80088ae <HAL_RCCEx_PeriphCLKConfig+0x582>
 8008876:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800887a:	d01c      	beq.n	80088b6 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800887c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008880:	d815      	bhi.n	80088ae <HAL_RCCEx_PeriphCLKConfig+0x582>
 8008882:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008886:	d008      	beq.n	800889a <HAL_RCCEx_PeriphCLKConfig+0x56e>
 8008888:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800888c:	d80f      	bhi.n	80088ae <HAL_RCCEx_PeriphCLKConfig+0x582>
 800888e:	2b00      	cmp	r3, #0
 8008890:	d011      	beq.n	80088b6 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 8008892:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008896:	d00e      	beq.n	80088b6 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 8008898:	e009      	b.n	80088ae <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800889a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800889e:	3308      	adds	r3, #8
 80088a0:	4618      	mov	r0, r3
 80088a2:	f002 fc0f 	bl	800b0c4 <RCCEx_PLL2_Config>
 80088a6:	4603      	mov	r3, r0
 80088a8:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 80088ac:	e004      	b.n	80088b8 <HAL_RCCEx_PeriphCLKConfig+0x58c>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80088ae:	2301      	movs	r3, #1
 80088b0:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 80088b4:	e000      	b.n	80088b8 <HAL_RCCEx_PeriphCLKConfig+0x58c>
        break;
 80088b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80088b8:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d10d      	bne.n	80088dc <HAL_RCCEx_PeriphCLKConfig+0x5b0>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 80088c0:	4b4f      	ldr	r3, [pc, #316]	@ (8008a00 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80088c2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80088c6:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80088ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80088ce:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80088d2:	4a4b      	ldr	r2, [pc, #300]	@ (8008a00 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80088d4:	430b      	orrs	r3, r1
 80088d6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80088da:	e003      	b.n	80088e4 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088dc:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 80088e0:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 80088e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80088e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088ec:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80088f0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80088f4:	2300      	movs	r3, #0
 80088f6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80088fa:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80088fe:	460b      	mov	r3, r1
 8008900:	4313      	orrs	r3, r2
 8008902:	d03f      	beq.n	8008984 <HAL_RCCEx_PeriphCLKConfig+0x658>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8008904:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008908:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800890c:	2b04      	cmp	r3, #4
 800890e:	d81e      	bhi.n	800894e <HAL_RCCEx_PeriphCLKConfig+0x622>
 8008910:	a201      	add	r2, pc, #4	@ (adr r2, 8008918 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8008912:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008916:	bf00      	nop
 8008918:	08008957 	.word	0x08008957
 800891c:	0800892d 	.word	0x0800892d
 8008920:	0800893b 	.word	0x0800893b
 8008924:	08008957 	.word	0x08008957
 8008928:	08008957 	.word	0x08008957
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800892c:	4b34      	ldr	r3, [pc, #208]	@ (8008a00 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800892e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008930:	4a33      	ldr	r2, [pc, #204]	@ (8008a00 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8008932:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008936:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8008938:	e00e      	b.n	8008958 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800893a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800893e:	332c      	adds	r3, #44	@ 0x2c
 8008940:	4618      	mov	r0, r3
 8008942:	f002 fc57 	bl	800b1f4 <RCCEx_PLL3_Config>
 8008946:	4603      	mov	r3, r0
 8008948:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800894c:	e004      	b.n	8008958 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800894e:	2301      	movs	r3, #1
 8008950:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8008954:	e000      	b.n	8008958 <HAL_RCCEx_PeriphCLKConfig+0x62c>
        break;
 8008956:	bf00      	nop
    }
    if (ret == HAL_OK)
 8008958:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800895c:	2b00      	cmp	r3, #0
 800895e:	d10d      	bne.n	800897c <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8008960:	4b27      	ldr	r3, [pc, #156]	@ (8008a00 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8008962:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008966:	f023 0107 	bic.w	r1, r3, #7
 800896a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800896e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008972:	4a23      	ldr	r2, [pc, #140]	@ (8008a00 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8008974:	430b      	orrs	r3, r1
 8008976:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800897a:	e003      	b.n	8008984 <HAL_RCCEx_PeriphCLKConfig+0x658>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800897c:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8008980:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8008984:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800898c:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8008990:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008992:	2300      	movs	r3, #0
 8008994:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008996:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800899a:	460b      	mov	r3, r1
 800899c:	4313      	orrs	r3, r2
 800899e:	d04c      	beq.n	8008a3a <HAL_RCCEx_PeriphCLKConfig+0x70e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 80089a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80089a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80089a8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80089ac:	d02a      	beq.n	8008a04 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
 80089ae:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80089b2:	d821      	bhi.n	80089f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 80089b4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80089b8:	d026      	beq.n	8008a08 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
 80089ba:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80089be:	d81b      	bhi.n	80089f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 80089c0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80089c4:	d00e      	beq.n	80089e4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 80089c6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80089ca:	d815      	bhi.n	80089f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d01d      	beq.n	8008a0c <HAL_RCCEx_PeriphCLKConfig+0x6e0>
 80089d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80089d4:	d110      	bne.n	80089f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80089d6:	4b0a      	ldr	r3, [pc, #40]	@ (8008a00 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80089d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089da:	4a09      	ldr	r2, [pc, #36]	@ (8008a00 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80089dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80089e0:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 80089e2:	e014      	b.n	8008a0e <HAL_RCCEx_PeriphCLKConfig+0x6e2>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80089e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80089e8:	332c      	adds	r3, #44	@ 0x2c
 80089ea:	4618      	mov	r0, r3
 80089ec:	f002 fc02 	bl	800b1f4 <RCCEx_PLL3_Config>
 80089f0:	4603      	mov	r3, r0
 80089f2:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 80089f6:	e00a      	b.n	8008a0e <HAL_RCCEx_PeriphCLKConfig+0x6e2>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80089f8:	2301      	movs	r3, #1
 80089fa:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 80089fe:	e006      	b.n	8008a0e <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8008a00:	46020c00 	.word	0x46020c00
        break;
 8008a04:	bf00      	nop
 8008a06:	e002      	b.n	8008a0e <HAL_RCCEx_PeriphCLKConfig+0x6e2>
        break;
 8008a08:	bf00      	nop
 8008a0a:	e000      	b.n	8008a0e <HAL_RCCEx_PeriphCLKConfig+0x6e2>
        break;
 8008a0c:	bf00      	nop
    }
    if (ret == HAL_OK)
 8008a0e:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d10d      	bne.n	8008a32 <HAL_RCCEx_PeriphCLKConfig+0x706>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 8008a16:	4baf      	ldr	r3, [pc, #700]	@ (8008cd4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8008a18:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008a1c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8008a20:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008a24:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008a28:	4aaa      	ldr	r2, [pc, #680]	@ (8008cd4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8008a2a:	430b      	orrs	r3, r1
 8008a2c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8008a30:	e003      	b.n	8008a3a <HAL_RCCEx_PeriphCLKConfig+0x70e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a32:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8008a36:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008a3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a42:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8008a46:	673b      	str	r3, [r7, #112]	@ 0x70
 8008a48:	2300      	movs	r3, #0
 8008a4a:	677b      	str	r3, [r7, #116]	@ 0x74
 8008a4c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8008a50:	460b      	mov	r3, r1
 8008a52:	4313      	orrs	r3, r2
 8008a54:	f000 80b5 	beq.w	8008bc2 <HAL_RCCEx_PeriphCLKConfig+0x896>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008a58:	2300      	movs	r3, #0
 8008a5a:	f887 3119 	strb.w	r3, [r7, #281]	@ 0x119
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008a5e:	4b9d      	ldr	r3, [pc, #628]	@ (8008cd4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8008a60:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008a64:	f003 0304 	and.w	r3, r3, #4
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d113      	bne.n	8008a94 <HAL_RCCEx_PeriphCLKConfig+0x768>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008a6c:	4b99      	ldr	r3, [pc, #612]	@ (8008cd4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8008a6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008a72:	4a98      	ldr	r2, [pc, #608]	@ (8008cd4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8008a74:	f043 0304 	orr.w	r3, r3, #4
 8008a78:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8008a7c:	4b95      	ldr	r3, [pc, #596]	@ (8008cd4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8008a7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008a82:	f003 0304 	and.w	r3, r3, #4
 8008a86:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8008a8a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
      pwrclkchanged = SET;
 8008a8e:	2301      	movs	r3, #1
 8008a90:	f887 3119 	strb.w	r3, [r7, #281]	@ 0x119
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8008a94:	4b90      	ldr	r3, [pc, #576]	@ (8008cd8 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 8008a96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a98:	4a8f      	ldr	r2, [pc, #572]	@ (8008cd8 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 8008a9a:	f043 0301 	orr.w	r3, r3, #1
 8008a9e:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008aa0:	f7f9 fe88 	bl	80027b4 <HAL_GetTick>
 8008aa4:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8008aa8:	e00b      	b.n	8008ac2 <HAL_RCCEx_PeriphCLKConfig+0x796>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008aaa:	f7f9 fe83 	bl	80027b4 <HAL_GetTick>
 8008aae:	4602      	mov	r2, r0
 8008ab0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ab4:	1ad3      	subs	r3, r2, r3
 8008ab6:	2b02      	cmp	r3, #2
 8008ab8:	d903      	bls.n	8008ac2 <HAL_RCCEx_PeriphCLKConfig+0x796>
      {
        ret = HAL_TIMEOUT;
 8008aba:	2303      	movs	r3, #3
 8008abc:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8008ac0:	e005      	b.n	8008ace <HAL_RCCEx_PeriphCLKConfig+0x7a2>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8008ac2:	4b85      	ldr	r3, [pc, #532]	@ (8008cd8 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 8008ac4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ac6:	f003 0301 	and.w	r3, r3, #1
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d0ed      	beq.n	8008aaa <HAL_RCCEx_PeriphCLKConfig+0x77e>
      }
    }

    if (ret == HAL_OK)
 8008ace:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d165      	bne.n	8008ba2 <HAL_RCCEx_PeriphCLKConfig+0x876>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8008ad6:	4b7f      	ldr	r3, [pc, #508]	@ (8008cd4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8008ad8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008adc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008ae0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8008ae4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d023      	beq.n	8008b34 <HAL_RCCEx_PeriphCLKConfig+0x808>
 8008aec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008af0:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8008af4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8008af8:	4293      	cmp	r3, r2
 8008afa:	d01b      	beq.n	8008b34 <HAL_RCCEx_PeriphCLKConfig+0x808>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008afc:	4b75      	ldr	r3, [pc, #468]	@ (8008cd4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8008afe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008b02:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008b06:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008b0a:	4b72      	ldr	r3, [pc, #456]	@ (8008cd4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8008b0c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008b10:	4a70      	ldr	r2, [pc, #448]	@ (8008cd4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8008b12:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008b16:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008b1a:	4b6e      	ldr	r3, [pc, #440]	@ (8008cd4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8008b1c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008b20:	4a6c      	ldr	r2, [pc, #432]	@ (8008cd4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8008b22:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008b26:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8008b2a:	4a6a      	ldr	r2, [pc, #424]	@ (8008cd4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8008b2c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8008b30:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008b34:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8008b38:	f003 0301 	and.w	r3, r3, #1
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d019      	beq.n	8008b74 <HAL_RCCEx_PeriphCLKConfig+0x848>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b40:	f7f9 fe38 	bl	80027b4 <HAL_GetTick>
 8008b44:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008b48:	e00d      	b.n	8008b66 <HAL_RCCEx_PeriphCLKConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008b4a:	f7f9 fe33 	bl	80027b4 <HAL_GetTick>
 8008b4e:	4602      	mov	r2, r0
 8008b50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b54:	1ad2      	subs	r2, r2, r3
 8008b56:	f241 3388 	movw	r3, #5000	@ 0x1388
 8008b5a:	429a      	cmp	r2, r3
 8008b5c:	d903      	bls.n	8008b66 <HAL_RCCEx_PeriphCLKConfig+0x83a>
          {
            ret = HAL_TIMEOUT;
 8008b5e:	2303      	movs	r3, #3
 8008b60:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
            break;
 8008b64:	e006      	b.n	8008b74 <HAL_RCCEx_PeriphCLKConfig+0x848>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008b66:	4b5b      	ldr	r3, [pc, #364]	@ (8008cd4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8008b68:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008b6c:	f003 0302 	and.w	r3, r3, #2
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d0ea      	beq.n	8008b4a <HAL_RCCEx_PeriphCLKConfig+0x81e>
          }
        }
      }

      if (ret == HAL_OK)
 8008b74:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d10d      	bne.n	8008b98 <HAL_RCCEx_PeriphCLKConfig+0x86c>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8008b7c:	4b55      	ldr	r3, [pc, #340]	@ (8008cd4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8008b7e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008b82:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008b86:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008b8a:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8008b8e:	4a51      	ldr	r2, [pc, #324]	@ (8008cd4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8008b90:	430b      	orrs	r3, r1
 8008b92:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8008b96:	e008      	b.n	8008baa <HAL_RCCEx_PeriphCLKConfig+0x87e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008b98:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8008b9c:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
 8008ba0:	e003      	b.n	8008baa <HAL_RCCEx_PeriphCLKConfig+0x87e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ba2:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8008ba6:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008baa:	f897 3119 	ldrb.w	r3, [r7, #281]	@ 0x119
 8008bae:	2b01      	cmp	r3, #1
 8008bb0:	d107      	bne.n	8008bc2 <HAL_RCCEx_PeriphCLKConfig+0x896>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008bb2:	4b48      	ldr	r3, [pc, #288]	@ (8008cd4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8008bb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008bb8:	4a46      	ldr	r2, [pc, #280]	@ (8008cd4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8008bba:	f023 0304 	bic.w	r3, r3, #4
 8008bbe:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8008bc2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bca:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8008bce:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008bd4:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8008bd8:	460b      	mov	r3, r1
 8008bda:	4313      	orrs	r3, r2
 8008bdc:	d042      	beq.n	8008c64 <HAL_RCCEx_PeriphCLKConfig+0x938>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 8008bde:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008be2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008be6:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8008bea:	d022      	beq.n	8008c32 <HAL_RCCEx_PeriphCLKConfig+0x906>
 8008bec:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8008bf0:	d81b      	bhi.n	8008c2a <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 8008bf2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008bf6:	d011      	beq.n	8008c1c <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 8008bf8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008bfc:	d815      	bhi.n	8008c2a <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d019      	beq.n	8008c36 <HAL_RCCEx_PeriphCLKConfig+0x90a>
 8008c02:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008c06:	d110      	bne.n	8008c2a <HAL_RCCEx_PeriphCLKConfig+0x8fe>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008c08:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008c0c:	3308      	adds	r3, #8
 8008c0e:	4618      	mov	r0, r3
 8008c10:	f002 fa58 	bl	800b0c4 <RCCEx_PLL2_Config>
 8008c14:	4603      	mov	r3, r0
 8008c16:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8008c1a:	e00d      	b.n	8008c38 <HAL_RCCEx_PeriphCLKConfig+0x90c>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008c1c:	4b2d      	ldr	r3, [pc, #180]	@ (8008cd4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8008c1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c20:	4a2c      	ldr	r2, [pc, #176]	@ (8008cd4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8008c22:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008c26:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8008c28:	e006      	b.n	8008c38 <HAL_RCCEx_PeriphCLKConfig+0x90c>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8008c2a:	2301      	movs	r3, #1
 8008c2c:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8008c30:	e002      	b.n	8008c38 <HAL_RCCEx_PeriphCLKConfig+0x90c>
        break;
 8008c32:	bf00      	nop
 8008c34:	e000      	b.n	8008c38 <HAL_RCCEx_PeriphCLKConfig+0x90c>
        break;
 8008c36:	bf00      	nop
    }
    if (ret == HAL_OK)
 8008c38:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d10d      	bne.n	8008c5c <HAL_RCCEx_PeriphCLKConfig+0x930>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 8008c40:	4b24      	ldr	r3, [pc, #144]	@ (8008cd4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8008c42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008c46:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8008c4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008c4e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008c52:	4a20      	ldr	r2, [pc, #128]	@ (8008cd4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8008c54:	430b      	orrs	r3, r1
 8008c56:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8008c5a:	e003      	b.n	8008c64 <HAL_RCCEx_PeriphCLKConfig+0x938>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c5c:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8008c60:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008c64:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c6c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8008c70:	663b      	str	r3, [r7, #96]	@ 0x60
 8008c72:	2300      	movs	r3, #0
 8008c74:	667b      	str	r3, [r7, #100]	@ 0x64
 8008c76:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8008c7a:	460b      	mov	r3, r1
 8008c7c:	4313      	orrs	r3, r2
 8008c7e:	d031      	beq.n	8008ce4 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8008c80:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008c84:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008c88:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008c8c:	d00b      	beq.n	8008ca6 <HAL_RCCEx_PeriphCLKConfig+0x97a>
 8008c8e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008c92:	d804      	bhi.n	8008c9e <HAL_RCCEx_PeriphCLKConfig+0x972>
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d008      	beq.n	8008caa <HAL_RCCEx_PeriphCLKConfig+0x97e>
 8008c98:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008c9c:	d007      	beq.n	8008cae <HAL_RCCEx_PeriphCLKConfig+0x982>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 8008c9e:	2301      	movs	r3, #1
 8008ca0:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8008ca4:	e004      	b.n	8008cb0 <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 8008ca6:	bf00      	nop
 8008ca8:	e002      	b.n	8008cb0 <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 8008caa:	bf00      	nop
 8008cac:	e000      	b.n	8008cb0 <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 8008cae:	bf00      	nop
    }
    if (ret == HAL_OK)
 8008cb0:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d111      	bne.n	8008cdc <HAL_RCCEx_PeriphCLKConfig+0x9b0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8008cb8:	4b06      	ldr	r3, [pc, #24]	@ (8008cd4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8008cba:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008cbe:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008cc2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008cc6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008cca:	4a02      	ldr	r2, [pc, #8]	@ (8008cd4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8008ccc:	430b      	orrs	r3, r1
 8008cce:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8008cd2:	e007      	b.n	8008ce4 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
 8008cd4:	46020c00 	.word	0x46020c00
 8008cd8:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008cdc:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8008ce0:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#if defined(SAES)
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 8008ce4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cec:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8008cf0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008cf6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8008cfa:	460b      	mov	r3, r1
 8008cfc:	4313      	orrs	r3, r2
 8008cfe:	d00c      	beq.n	8008d1a <HAL_RCCEx_PeriphCLKConfig+0x9ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 8008d00:	4bb2      	ldr	r3, [pc, #712]	@ (8008fcc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008d02:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008d06:	f423 6100 	bic.w	r1, r3, #2048	@ 0x800
 8008d0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008d0e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8008d12:	4aae      	ldr	r2, [pc, #696]	@ (8008fcc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008d14:	430b      	orrs	r3, r1
 8008d16:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8008d1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d22:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8008d26:	653b      	str	r3, [r7, #80]	@ 0x50
 8008d28:	2300      	movs	r3, #0
 8008d2a:	657b      	str	r3, [r7, #84]	@ 0x54
 8008d2c:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8008d30:	460b      	mov	r3, r1
 8008d32:	4313      	orrs	r3, r2
 8008d34:	d019      	beq.n	8008d6a <HAL_RCCEx_PeriphCLKConfig+0xa3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8008d36:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008d3a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008d3e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008d42:	d105      	bne.n	8008d50 <HAL_RCCEx_PeriphCLKConfig+0xa24>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008d44:	4ba1      	ldr	r3, [pc, #644]	@ (8008fcc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008d46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d48:	4aa0      	ldr	r2, [pc, #640]	@ (8008fcc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008d4a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008d4e:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 8008d50:	4b9e      	ldr	r3, [pc, #632]	@ (8008fcc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008d52:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008d56:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8008d5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008d5e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008d62:	4a9a      	ldr	r2, [pc, #616]	@ (8008fcc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008d64:	430b      	orrs	r3, r1
 8008d66:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8008d6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d72:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8008d76:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008d78:	2300      	movs	r3, #0
 8008d7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008d7c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8008d80:	460b      	mov	r3, r1
 8008d82:	4313      	orrs	r3, r2
 8008d84:	d00c      	beq.n	8008da0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8008d86:	4b91      	ldr	r3, [pc, #580]	@ (8008fcc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008d88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008d8c:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8008d90:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008d94:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8008d98:	4a8c      	ldr	r2, [pc, #560]	@ (8008fcc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008d9a:	430b      	orrs	r3, r1
 8008d9c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8008da0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008da8:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8008dac:	643b      	str	r3, [r7, #64]	@ 0x40
 8008dae:	2300      	movs	r3, #0
 8008db0:	647b      	str	r3, [r7, #68]	@ 0x44
 8008db2:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8008db6:	460b      	mov	r3, r1
 8008db8:	4313      	orrs	r3, r2
 8008dba:	d00c      	beq.n	8008dd6 <HAL_RCCEx_PeriphCLKConfig+0xaaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8008dbc:	4b83      	ldr	r3, [pc, #524]	@ (8008fcc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008dbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008dc2:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8008dc6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008dca:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8008dce:	4a7f      	ldr	r2, [pc, #508]	@ (8008fcc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008dd0:	430b      	orrs	r3, r1
 8008dd2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8008dd6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dde:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8008de2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008de4:	2300      	movs	r3, #0
 8008de6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008de8:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8008dec:	460b      	mov	r3, r1
 8008dee:	4313      	orrs	r3, r2
 8008df0:	d00c      	beq.n	8008e0c <HAL_RCCEx_PeriphCLKConfig+0xae0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8008df2:	4b76      	ldr	r3, [pc, #472]	@ (8008fcc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008df4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008df8:	f023 0118 	bic.w	r1, r3, #24
 8008dfc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008e00:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8008e04:	4a71      	ldr	r2, [pc, #452]	@ (8008fcc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008e06:	430b      	orrs	r3, r1
 8008e08:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8008e0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e14:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8008e18:	633b      	str	r3, [r7, #48]	@ 0x30
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e1e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8008e22:	460b      	mov	r3, r1
 8008e24:	4313      	orrs	r3, r2
 8008e26:	d032      	beq.n	8008e8e <HAL_RCCEx_PeriphCLKConfig+0xb62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8008e28:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008e2c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8008e30:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008e34:	d105      	bne.n	8008e42 <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008e36:	4b65      	ldr	r3, [pc, #404]	@ (8008fcc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008e38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e3a:	4a64      	ldr	r2, [pc, #400]	@ (8008fcc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008e3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008e40:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 8008e42:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008e46:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8008e4a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008e4e:	d108      	bne.n	8008e62 <HAL_RCCEx_PeriphCLKConfig+0xb36>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008e50:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008e54:	3308      	adds	r3, #8
 8008e56:	4618      	mov	r0, r3
 8008e58:	f002 f934 	bl	800b0c4 <RCCEx_PLL2_Config>
 8008e5c:	4603      	mov	r3, r0
 8008e5e:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
    }
    if (ret == HAL_OK)
 8008e62:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d10d      	bne.n	8008e86 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8008e6a:	4b58      	ldr	r3, [pc, #352]	@ (8008fcc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008e6c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008e70:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8008e74:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008e78:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8008e7c:	4a53      	ldr	r2, [pc, #332]	@ (8008fcc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008e7e:	430b      	orrs	r3, r1
 8008e80:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8008e84:	e003      	b.n	8008e8e <HAL_RCCEx_PeriphCLKConfig+0xb62>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e86:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8008e8a:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#if defined(HSPI1)
  /*-------------------------- HSPIx kernel clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSPI) == RCC_PERIPHCLK_HSPI)
 8008e8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e96:	2100      	movs	r1, #0
 8008e98:	62b9      	str	r1, [r7, #40]	@ 0x28
 8008e9a:	f003 0301 	and.w	r3, r3, #1
 8008e9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008ea0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8008ea4:	460b      	mov	r3, r1
 8008ea6:	4313      	orrs	r3, r2
 8008ea8:	d04a      	beq.n	8008f40 <HAL_RCCEx_PeriphCLKConfig+0xc14>
  {

    /* Check the parameters */
    assert_param(IS_RCC_HSPICLKSOURCE(pPeriphClkInit->HspiClockSelection));

    switch (pPeriphClkInit->HspiClockSelection)
 8008eaa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008eae:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8008eb2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8008eb6:	d01e      	beq.n	8008ef6 <HAL_RCCEx_PeriphCLKConfig+0xbca>
 8008eb8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8008ebc:	d825      	bhi.n	8008f0a <HAL_RCCEx_PeriphCLKConfig+0xbde>
 8008ebe:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008ec2:	d00e      	beq.n	8008ee2 <HAL_RCCEx_PeriphCLKConfig+0xbb6>
 8008ec4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008ec8:	d81f      	bhi.n	8008f0a <HAL_RCCEx_PeriphCLKConfig+0xbde>
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d021      	beq.n	8008f12 <HAL_RCCEx_PeriphCLKConfig+0xbe6>
 8008ece:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008ed2:	d11a      	bne.n	8008f0a <HAL_RCCEx_PeriphCLKConfig+0xbde>
        /* HSPI kernel clock source config set later after clock selection check */
        break;

      case RCC_HSPICLKSOURCE_PLL1:  /* PLL1 is used as clock source for HSPI kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008ed4:	4b3d      	ldr	r3, [pc, #244]	@ (8008fcc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008ed6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ed8:	4a3c      	ldr	r2, [pc, #240]	@ (8008fcc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008eda:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008ede:	6293      	str	r3, [r2, #40]	@ 0x28
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 8008ee0:	e018      	b.n	8008f14 <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      case RCC_HSPICLKSOURCE_PLL2:  /* PLL2 is used as clock source for HSPI kernel clock*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008ee2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008ee6:	3308      	adds	r3, #8
 8008ee8:	4618      	mov	r0, r3
 8008eea:	f002 f8eb 	bl	800b0c4 <RCCEx_PLL2_Config>
 8008eee:	4603      	mov	r3, r0
 8008ef0:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 8008ef4:	e00e      	b.n	8008f14 <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      case RCC_HSPICLKSOURCE_PLL3:  /* PLL3 is used as clock source for HSPI kernel clock*/
        /* PLL3 input clock, parameters M, N & R configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008ef6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008efa:	332c      	adds	r3, #44	@ 0x2c
 8008efc:	4618      	mov	r0, r3
 8008efe:	f002 f979 	bl	800b1f4 <RCCEx_PLL3_Config>
 8008f02:	4603      	mov	r3, r0
 8008f04:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 8008f08:	e004      	b.n	8008f14 <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      default:
        ret = HAL_ERROR;
 8008f0a:	2301      	movs	r3, #1
 8008f0c:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8008f10:	e000      	b.n	8008f14 <HAL_RCCEx_PeriphCLKConfig+0xbe8>
        break;
 8008f12:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008f14:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d10d      	bne.n	8008f38 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
    {
      /* Set the source of HSPI kernel clock*/
      __HAL_RCC_HSPI_CONFIG(pPeriphClkInit->HspiClockSelection);
 8008f1c:	4b2b      	ldr	r3, [pc, #172]	@ (8008fcc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008f1e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008f22:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8008f26:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f2a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8008f2e:	4927      	ldr	r1, [pc, #156]	@ (8008fcc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008f30:	4313      	orrs	r3, r2
 8008f32:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8008f36:	e003      	b.n	8008f40 <HAL_RCCEx_PeriphCLKConfig+0xc14>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f38:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8008f3c:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 8008f40:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f48:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8008f4c:	623b      	str	r3, [r7, #32]
 8008f4e:	2300      	movs	r3, #0
 8008f50:	627b      	str	r3, [r7, #36]	@ 0x24
 8008f52:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8008f56:	460b      	mov	r3, r1
 8008f58:	4313      	orrs	r3, r2
 8008f5a:	d03d      	beq.n	8008fd8 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 8008f5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008f64:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008f68:	d00e      	beq.n	8008f88 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 8008f6a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008f6e:	d815      	bhi.n	8008f9c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d017      	beq.n	8008fa4 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8008f74:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008f78:	d110      	bne.n	8008f9c <HAL_RCCEx_PeriphCLKConfig+0xc70>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008f7a:	4b14      	ldr	r3, [pc, #80]	@ (8008fcc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008f7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f7e:	4a13      	ldr	r2, [pc, #76]	@ (8008fcc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008f80:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008f84:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8008f86:	e00e      	b.n	8008fa6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008f88:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f8c:	3308      	adds	r3, #8
 8008f8e:	4618      	mov	r0, r3
 8008f90:	f002 f898 	bl	800b0c4 <RCCEx_PLL2_Config>
 8008f94:	4603      	mov	r3, r0
 8008f96:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8008f9a:	e004      	b.n	8008fa6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      default:
        ret = HAL_ERROR;
 8008f9c:	2301      	movs	r3, #1
 8008f9e:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8008fa2:	e000      	b.n	8008fa6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8008fa4:	bf00      	nop
    }
    if (ret == HAL_OK)
 8008fa6:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d110      	bne.n	8008fd0 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 8008fae:	4b07      	ldr	r3, [pc, #28]	@ (8008fcc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008fb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008fb4:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8008fb8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008fbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008fc0:	4902      	ldr	r1, [pc, #8]	@ (8008fcc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008fc2:	4313      	orrs	r3, r2
 8008fc4:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8008fc8:	e006      	b.n	8008fd8 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 8008fca:	bf00      	nop
 8008fcc:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008fd0:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8008fd4:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8008fd8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fe0:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8008fe4:	61bb      	str	r3, [r7, #24]
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	61fb      	str	r3, [r7, #28]
 8008fea:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8008fee:	460b      	mov	r3, r1
 8008ff0:	4313      	orrs	r3, r2
 8008ff2:	d00c      	beq.n	800900e <HAL_RCCEx_PeriphCLKConfig+0xce2>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 8008ff4:	4b68      	ldr	r3, [pc, #416]	@ (8009198 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 8008ff6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008ffa:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8008ffe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009002:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8009006:	4964      	ldr	r1, [pc, #400]	@ (8009198 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 8009008:	4313      	orrs	r3, r2
 800900a:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800900e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009016:	2100      	movs	r1, #0
 8009018:	6139      	str	r1, [r7, #16]
 800901a:	f003 0302 	and.w	r3, r3, #2
 800901e:	617b      	str	r3, [r7, #20]
 8009020:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8009024:	460b      	mov	r3, r1
 8009026:	4313      	orrs	r3, r2
 8009028:	d036      	beq.n	8009098 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(pPeriphClkInit->LtdcClockSelection));

    switch (pPeriphClkInit->LtdcClockSelection)
 800902a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800902e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8009032:	2b00      	cmp	r3, #0
 8009034:	d00c      	beq.n	8009050 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 8009036:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800903a:	d113      	bne.n	8009064 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      case RCC_LTDCCLKSOURCE_PLL2:  /* PLL2 is used as clock source for LTDC clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800903c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009040:	3308      	adds	r3, #8
 8009042:	4618      	mov	r0, r3
 8009044:	f002 f83e 	bl	800b0c4 <RCCEx_PLL2_Config>
 8009048:	4603      	mov	r3, r0
 800904a:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* LTDC clock source config set later after clock selection check */
        break;
 800904e:	e00d      	b.n	800906c <HAL_RCCEx_PeriphCLKConfig+0xd40>

      case RCC_LTDCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for LTDC clock*/
        /* PLL3 input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8009050:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009054:	332c      	adds	r3, #44	@ 0x2c
 8009056:	4618      	mov	r0, r3
 8009058:	f002 f8cc 	bl	800b1f4 <RCCEx_PLL3_Config>
 800905c:	4603      	mov	r3, r0
 800905e:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* LTDC clock source config set later after clock selection check */
        break;
 8009062:	e003      	b.n	800906c <HAL_RCCEx_PeriphCLKConfig+0xd40>

      default:
        ret = HAL_ERROR;
 8009064:	2301      	movs	r3, #1
 8009066:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800906a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800906c:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8009070:	2b00      	cmp	r3, #0
 8009072:	d10d      	bne.n	8009090 <HAL_RCCEx_PeriphCLKConfig+0xd64>
    {
      /* Set the source of LTDC clock*/
      __HAL_RCC_LTDC_CONFIG(pPeriphClkInit->LtdcClockSelection);
 8009074:	4b48      	ldr	r3, [pc, #288]	@ (8009198 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 8009076:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800907a:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800907e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009082:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8009086:	4944      	ldr	r1, [pc, #272]	@ (8009198 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 8009088:	4313      	orrs	r3, r2
 800908a:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800908e:	e003      	b.n	8009098 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009090:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8009094:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
#endif /* defined(LTDC) */

#if defined(DSI)

  /*-------------------------- DSI clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8009098:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800909c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090a0:	2100      	movs	r1, #0
 80090a2:	60b9      	str	r1, [r7, #8]
 80090a4:	f003 0304 	and.w	r3, r3, #4
 80090a8:	60fb      	str	r3, [r7, #12]
 80090aa:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80090ae:	460b      	mov	r3, r1
 80090b0:	4313      	orrs	r3, r2
 80090b2:	d024      	beq.n	80090fe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(pPeriphClkInit->DsiClockSelection));

    if (pPeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLL3)
 80090b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80090b8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d108      	bne.n	80090d2 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* PLL3 is used as clock source for DSI clock*/
      /* PLL3 input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
      ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80090c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80090c4:	332c      	adds	r3, #44	@ 0x2c
 80090c6:	4618      	mov	r0, r3
 80090c8:	f002 f894 	bl	800b1f4 <RCCEx_PLL3_Config>
 80090cc:	4603      	mov	r3, r0
 80090ce:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
    }

    if (ret == HAL_OK)
 80090d2:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d10d      	bne.n	80090f6 <HAL_RCCEx_PeriphCLKConfig+0xdca>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(pPeriphClkInit->DsiClockSelection);
 80090da:	4b2f      	ldr	r3, [pc, #188]	@ (8009198 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 80090dc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80090e0:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 80090e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80090e8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80090ec:	492a      	ldr	r1, [pc, #168]	@ (8009198 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 80090ee:	4313      	orrs	r3, r2
 80090f0:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 80090f4:	e003      	b.n	80090fe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090f6:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 80090fa:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
#endif /* defined(DSI) */

#if defined(USB_OTG_HS)

  /*-------------------------- USB PHY clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USBPHY) == RCC_PERIPHCLK_USBPHY)
 80090fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009106:	2100      	movs	r1, #0
 8009108:	6039      	str	r1, [r7, #0]
 800910a:	f003 0308 	and.w	r3, r3, #8
 800910e:	607b      	str	r3, [r7, #4]
 8009110:	e9d7 1200 	ldrd	r1, r2, [r7]
 8009114:	460b      	mov	r3, r1
 8009116:	4313      	orrs	r3, r2
 8009118:	d036      	beq.n	8009188 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBPHYCLKSOURCE(pPeriphClkInit->UsbPhyClockSelection));

    switch (pPeriphClkInit->UsbPhyClockSelection)
 800911a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800911e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8009122:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8009126:	d00d      	beq.n	8009144 <HAL_RCCEx_PeriphCLKConfig+0xe18>
 8009128:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800912c:	d811      	bhi.n	8009152 <HAL_RCCEx_PeriphCLKConfig+0xe26>
 800912e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009132:	d012      	beq.n	800915a <HAL_RCCEx_PeriphCLKConfig+0xe2e>
 8009134:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009138:	d80b      	bhi.n	8009152 <HAL_RCCEx_PeriphCLKConfig+0xe26>
 800913a:	2b00      	cmp	r3, #0
 800913c:	d00d      	beq.n	800915a <HAL_RCCEx_PeriphCLKConfig+0xe2e>
 800913e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009142:	d106      	bne.n	8009152 <HAL_RCCEx_PeriphCLKConfig+0xe26>
        break;

      case RCC_USBPHYCLKSOURCE_PLL1:      /* PLL1 P divider clock selected as USB PHY clock */
      case RCC_USBPHYCLKSOURCE_PLL1_DIV2: /* PLL1 P divider clock div 2 selected as USB PHY clock */
        /* Enable P Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009144:	4b14      	ldr	r3, [pc, #80]	@ (8009198 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 8009146:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009148:	4a13      	ldr	r2, [pc, #76]	@ (8009198 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800914a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800914e:	6293      	str	r3, [r2, #40]	@ 0x28
        /* USB-PHY clock source config set later after clock selection check */
        break;
 8009150:	e004      	b.n	800915c <HAL_RCCEx_PeriphCLKConfig+0xe30>

      default:
        ret = HAL_ERROR;
 8009152:	2301      	movs	r3, #1
 8009154:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8009158:	e000      	b.n	800915c <HAL_RCCEx_PeriphCLKConfig+0xe30>
        break;
 800915a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800915c:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8009160:	2b00      	cmp	r3, #0
 8009162:	d10d      	bne.n	8009180 <HAL_RCCEx_PeriphCLKConfig+0xe54>
    {
      /* Set the source of USBPHY clock*/
      __HAL_RCC_USBPHY_CONFIG(pPeriphClkInit->UsbPhyClockSelection);
 8009164:	4b0c      	ldr	r3, [pc, #48]	@ (8009198 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 8009166:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800916a:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800916e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009172:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8009176:	4908      	ldr	r1, [pc, #32]	@ (8009198 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 8009178:	4313      	orrs	r3, r2
 800917a:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800917e:	e003      	b.n	8009188 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009180:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8009184:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 8009188:	f897 311a 	ldrb.w	r3, [r7, #282]	@ 0x11a
}
 800918c:	4618      	mov	r0, r3
 800918e:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8009192:	46bd      	mov	sp, r7
 8009194:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009198:	46020c00 	.word	0x46020c00

0800919c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800919c:	b480      	push	{r7}
 800919e:	b089      	sub	sp, #36	@ 0x24
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 80091a4:	4ba6      	ldr	r3, [pc, #664]	@ (8009440 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80091a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80091a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091ac:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80091ae:	4ba4      	ldr	r3, [pc, #656]	@ (8009440 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80091b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80091b2:	f003 0303 	and.w	r3, r3, #3
 80091b6:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 80091b8:	4ba1      	ldr	r3, [pc, #644]	@ (8009440 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80091ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80091bc:	0a1b      	lsrs	r3, r3, #8
 80091be:	f003 030f 	and.w	r3, r3, #15
 80091c2:	3301      	adds	r3, #1
 80091c4:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80091c6:	4b9e      	ldr	r3, [pc, #632]	@ (8009440 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80091c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80091ca:	091b      	lsrs	r3, r3, #4
 80091cc:	f003 0301 	and.w	r3, r3, #1
 80091d0:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80091d2:	4b9b      	ldr	r3, [pc, #620]	@ (8009440 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80091d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091d6:	08db      	lsrs	r3, r3, #3
 80091d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80091dc:	68fa      	ldr	r2, [r7, #12]
 80091de:	fb02 f303 	mul.w	r3, r2, r3
 80091e2:	ee07 3a90 	vmov	s15, r3
 80091e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091ea:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 80091ee:	697b      	ldr	r3, [r7, #20]
 80091f0:	2b03      	cmp	r3, #3
 80091f2:	d062      	beq.n	80092ba <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 80091f4:	697b      	ldr	r3, [r7, #20]
 80091f6:	2b03      	cmp	r3, #3
 80091f8:	f200 8081 	bhi.w	80092fe <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 80091fc:	697b      	ldr	r3, [r7, #20]
 80091fe:	2b01      	cmp	r3, #1
 8009200:	d024      	beq.n	800924c <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 8009202:	697b      	ldr	r3, [r7, #20]
 8009204:	2b02      	cmp	r3, #2
 8009206:	d17a      	bne.n	80092fe <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009208:	693b      	ldr	r3, [r7, #16]
 800920a:	ee07 3a90 	vmov	s15, r3
 800920e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009212:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8009444 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 8009216:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800921a:	4b89      	ldr	r3, [pc, #548]	@ (8009440 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800921c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800921e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009222:	ee07 3a90 	vmov	s15, r3
 8009226:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800922a:	ed97 6a02 	vldr	s12, [r7, #8]
 800922e:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8009448 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8009232:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009236:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800923a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800923e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009242:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009246:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800924a:	e08f      	b.n	800936c <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800924c:	4b7c      	ldr	r3, [pc, #496]	@ (8009440 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800924e:	689b      	ldr	r3, [r3, #8]
 8009250:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009254:	2b00      	cmp	r3, #0
 8009256:	d005      	beq.n	8009264 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 8009258:	4b79      	ldr	r3, [pc, #484]	@ (8009440 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800925a:	689b      	ldr	r3, [r3, #8]
 800925c:	0f1b      	lsrs	r3, r3, #28
 800925e:	f003 030f 	and.w	r3, r3, #15
 8009262:	e006      	b.n	8009272 <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 8009264:	4b76      	ldr	r3, [pc, #472]	@ (8009440 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009266:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800926a:	041b      	lsls	r3, r3, #16
 800926c:	0f1b      	lsrs	r3, r3, #28
 800926e:	f003 030f 	and.w	r3, r3, #15
 8009272:	4a76      	ldr	r2, [pc, #472]	@ (800944c <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 8009274:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009278:	ee07 3a90 	vmov	s15, r3
 800927c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009280:	693b      	ldr	r3, [r7, #16]
 8009282:	ee07 3a90 	vmov	s15, r3
 8009286:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800928a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800928e:	69bb      	ldr	r3, [r7, #24]
 8009290:	ee07 3a90 	vmov	s15, r3
 8009294:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009298:	ed97 6a02 	vldr	s12, [r7, #8]
 800929c:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8009448 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 80092a0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80092a4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80092a8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80092ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80092b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80092b4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80092b8:	e058      	b.n	800936c <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80092ba:	693b      	ldr	r3, [r7, #16]
 80092bc:	ee07 3a90 	vmov	s15, r3
 80092c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092c4:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8009444 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 80092c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80092cc:	4b5c      	ldr	r3, [pc, #368]	@ (8009440 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80092ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80092d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80092d4:	ee07 3a90 	vmov	s15, r3
 80092d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 80092dc:	ed97 6a02 	vldr	s12, [r7, #8]
 80092e0:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8009448 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 80092e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80092e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 80092ec:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80092f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80092f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80092f8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80092fc:	e036      	b.n	800936c <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80092fe:	4b50      	ldr	r3, [pc, #320]	@ (8009440 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009300:	689b      	ldr	r3, [r3, #8]
 8009302:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009306:	2b00      	cmp	r3, #0
 8009308:	d005      	beq.n	8009316 <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 800930a:	4b4d      	ldr	r3, [pc, #308]	@ (8009440 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800930c:	689b      	ldr	r3, [r3, #8]
 800930e:	0f1b      	lsrs	r3, r3, #28
 8009310:	f003 030f 	and.w	r3, r3, #15
 8009314:	e006      	b.n	8009324 <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 8009316:	4b4a      	ldr	r3, [pc, #296]	@ (8009440 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009318:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800931c:	041b      	lsls	r3, r3, #16
 800931e:	0f1b      	lsrs	r3, r3, #28
 8009320:	f003 030f 	and.w	r3, r3, #15
 8009324:	4a49      	ldr	r2, [pc, #292]	@ (800944c <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 8009326:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800932a:	ee07 3a90 	vmov	s15, r3
 800932e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009332:	693b      	ldr	r3, [r7, #16]
 8009334:	ee07 3a90 	vmov	s15, r3
 8009338:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800933c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009340:	69bb      	ldr	r3, [r7, #24]
 8009342:	ee07 3a90 	vmov	s15, r3
 8009346:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800934a:	ed97 6a02 	vldr	s12, [r7, #8]
 800934e:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8009448 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8009352:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009356:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800935a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800935e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8009362:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009366:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800936a:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 800936c:	4b34      	ldr	r3, [pc, #208]	@ (8009440 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800936e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009370:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009374:	2b00      	cmp	r3, #0
 8009376:	d017      	beq.n	80093a8 <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8009378:	4b31      	ldr	r3, [pc, #196]	@ (8009440 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800937a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800937c:	0a5b      	lsrs	r3, r3, #9
 800937e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009382:	ee07 3a90 	vmov	s15, r3
 8009386:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 800938a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800938e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8009392:	edd7 6a07 	vldr	s13, [r7, #28]
 8009396:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800939a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800939e:	ee17 2a90 	vmov	r2, s15
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	601a      	str	r2, [r3, #0]
 80093a6:	e002      	b.n	80093ae <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	2200      	movs	r2, #0
 80093ac:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 80093ae:	4b24      	ldr	r3, [pc, #144]	@ (8009440 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80093b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d017      	beq.n	80093ea <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80093ba:	4b21      	ldr	r3, [pc, #132]	@ (8009440 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80093bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80093be:	0c1b      	lsrs	r3, r3, #16
 80093c0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80093c4:	ee07 3a90 	vmov	s15, r3
 80093c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 80093cc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80093d0:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80093d4:	edd7 6a07 	vldr	s13, [r7, #28]
 80093d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80093dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80093e0:	ee17 2a90 	vmov	r2, s15
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	605a      	str	r2, [r3, #4]
 80093e8:	e002      	b.n	80093f0 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	2200      	movs	r2, #0
 80093ee:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 80093f0:	4b13      	ldr	r3, [pc, #76]	@ (8009440 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80093f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093f4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d017      	beq.n	800942c <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80093fc:	4b10      	ldr	r3, [pc, #64]	@ (8009440 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80093fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009400:	0e1b      	lsrs	r3, r3, #24
 8009402:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009406:	ee07 3a90 	vmov	s15, r3
 800940a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 800940e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009412:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8009416:	edd7 6a07 	vldr	s13, [r7, #28]
 800941a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800941e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009422:	ee17 2a90 	vmov	r2, s15
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800942a:	e002      	b.n	8009432 <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	2200      	movs	r2, #0
 8009430:	609a      	str	r2, [r3, #8]
}
 8009432:	bf00      	nop
 8009434:	3724      	adds	r7, #36	@ 0x24
 8009436:	46bd      	mov	sp, r7
 8009438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943c:	4770      	bx	lr
 800943e:	bf00      	nop
 8009440:	46020c00 	.word	0x46020c00
 8009444:	4b742400 	.word	0x4b742400
 8009448:	46000000 	.word	0x46000000
 800944c:	08011c68 	.word	0x08011c68

08009450 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8009450:	b480      	push	{r7}
 8009452:	b089      	sub	sp, #36	@ 0x24
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8009458:	4ba6      	ldr	r3, [pc, #664]	@ (80096f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800945a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800945c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009460:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8009462:	4ba4      	ldr	r3, [pc, #656]	@ (80096f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009464:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009466:	f003 0303 	and.w	r3, r3, #3
 800946a:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 800946c:	4ba1      	ldr	r3, [pc, #644]	@ (80096f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800946e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009470:	0a1b      	lsrs	r3, r3, #8
 8009472:	f003 030f 	and.w	r3, r3, #15
 8009476:	3301      	adds	r3, #1
 8009478:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 800947a:	4b9e      	ldr	r3, [pc, #632]	@ (80096f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800947c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800947e:	091b      	lsrs	r3, r3, #4
 8009480:	f003 0301 	and.w	r3, r3, #1
 8009484:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8009486:	4b9b      	ldr	r3, [pc, #620]	@ (80096f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009488:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800948a:	08db      	lsrs	r3, r3, #3
 800948c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009490:	68fa      	ldr	r2, [r7, #12]
 8009492:	fb02 f303 	mul.w	r3, r2, r3
 8009496:	ee07 3a90 	vmov	s15, r3
 800949a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800949e:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 80094a2:	697b      	ldr	r3, [r7, #20]
 80094a4:	2b03      	cmp	r3, #3
 80094a6:	d062      	beq.n	800956e <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 80094a8:	697b      	ldr	r3, [r7, #20]
 80094aa:	2b03      	cmp	r3, #3
 80094ac:	f200 8081 	bhi.w	80095b2 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 80094b0:	697b      	ldr	r3, [r7, #20]
 80094b2:	2b01      	cmp	r3, #1
 80094b4:	d024      	beq.n	8009500 <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 80094b6:	697b      	ldr	r3, [r7, #20]
 80094b8:	2b02      	cmp	r3, #2
 80094ba:	d17a      	bne.n	80095b2 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80094bc:	693b      	ldr	r3, [r7, #16]
 80094be:	ee07 3a90 	vmov	s15, r3
 80094c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094c6:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 80096f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 80094ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80094ce:	4b89      	ldr	r3, [pc, #548]	@ (80096f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80094d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80094d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094d6:	ee07 3a90 	vmov	s15, r3
 80094da:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 80094de:	ed97 6a02 	vldr	s12, [r7, #8]
 80094e2:	eddf 5a86 	vldr	s11, [pc, #536]	@ 80096fc <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 80094e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80094ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 80094ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80094f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80094f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094fa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80094fe:	e08f      	b.n	8009620 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8009500:	4b7c      	ldr	r3, [pc, #496]	@ (80096f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009502:	689b      	ldr	r3, [r3, #8]
 8009504:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009508:	2b00      	cmp	r3, #0
 800950a:	d005      	beq.n	8009518 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 800950c:	4b79      	ldr	r3, [pc, #484]	@ (80096f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800950e:	689b      	ldr	r3, [r3, #8]
 8009510:	0f1b      	lsrs	r3, r3, #28
 8009512:	f003 030f 	and.w	r3, r3, #15
 8009516:	e006      	b.n	8009526 <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 8009518:	4b76      	ldr	r3, [pc, #472]	@ (80096f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800951a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800951e:	041b      	lsls	r3, r3, #16
 8009520:	0f1b      	lsrs	r3, r3, #28
 8009522:	f003 030f 	and.w	r3, r3, #15
 8009526:	4a76      	ldr	r2, [pc, #472]	@ (8009700 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8009528:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800952c:	ee07 3a90 	vmov	s15, r3
 8009530:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009534:	693b      	ldr	r3, [r7, #16]
 8009536:	ee07 3a90 	vmov	s15, r3
 800953a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800953e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009542:	69bb      	ldr	r3, [r7, #24]
 8009544:	ee07 3a90 	vmov	s15, r3
 8009548:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800954c:	ed97 6a02 	vldr	s12, [r7, #8]
 8009550:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 80096fc <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8009554:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009558:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800955c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009560:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8009564:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009568:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800956c:	e058      	b.n	8009620 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800956e:	693b      	ldr	r3, [r7, #16]
 8009570:	ee07 3a90 	vmov	s15, r3
 8009574:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009578:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80096f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 800957c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009580:	4b5c      	ldr	r3, [pc, #368]	@ (80096f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009582:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009584:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009588:	ee07 3a90 	vmov	s15, r3
 800958c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8009590:	ed97 6a02 	vldr	s12, [r7, #8]
 8009594:	eddf 5a59 	vldr	s11, [pc, #356]	@ 80096fc <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8009598:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800959c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 80095a0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80095a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80095a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80095ac:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80095b0:	e036      	b.n	8009620 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 80095b2:	4b50      	ldr	r3, [pc, #320]	@ (80096f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80095b4:	689b      	ldr	r3, [r3, #8]
 80095b6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d005      	beq.n	80095ca <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 80095be:	4b4d      	ldr	r3, [pc, #308]	@ (80096f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80095c0:	689b      	ldr	r3, [r3, #8]
 80095c2:	0f1b      	lsrs	r3, r3, #28
 80095c4:	f003 030f 	and.w	r3, r3, #15
 80095c8:	e006      	b.n	80095d8 <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 80095ca:	4b4a      	ldr	r3, [pc, #296]	@ (80096f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80095cc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80095d0:	041b      	lsls	r3, r3, #16
 80095d2:	0f1b      	lsrs	r3, r3, #28
 80095d4:	f003 030f 	and.w	r3, r3, #15
 80095d8:	4a49      	ldr	r2, [pc, #292]	@ (8009700 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 80095da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80095de:	ee07 3a90 	vmov	s15, r3
 80095e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80095e6:	693b      	ldr	r3, [r7, #16]
 80095e8:	ee07 3a90 	vmov	s15, r3
 80095ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 80095f4:	69bb      	ldr	r3, [r7, #24]
 80095f6:	ee07 3a90 	vmov	s15, r3
 80095fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80095fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8009602:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 80096fc <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8009606:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800960a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800960e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009612:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8009616:	ee67 7a27 	vmul.f32	s15, s14, s15
 800961a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800961e:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8009620:	4b34      	ldr	r3, [pc, #208]	@ (80096f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009622:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009624:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009628:	2b00      	cmp	r3, #0
 800962a:	d017      	beq.n	800965c <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800962c:	4b31      	ldr	r3, [pc, #196]	@ (80096f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800962e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009630:	0a5b      	lsrs	r3, r3, #9
 8009632:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009636:	ee07 3a90 	vmov	s15, r3
 800963a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 800963e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009642:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8009646:	edd7 6a07 	vldr	s13, [r7, #28]
 800964a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800964e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009652:	ee17 2a90 	vmov	r2, s15
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	601a      	str	r2, [r3, #0]
 800965a:	e002      	b.n	8009662 <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	2200      	movs	r2, #0
 8009660:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8009662:	4b24      	ldr	r3, [pc, #144]	@ (80096f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009664:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009666:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800966a:	2b00      	cmp	r3, #0
 800966c:	d017      	beq.n	800969e <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800966e:	4b21      	ldr	r3, [pc, #132]	@ (80096f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009670:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009672:	0c1b      	lsrs	r3, r3, #16
 8009674:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009678:	ee07 3a90 	vmov	s15, r3
 800967c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 8009680:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009684:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8009688:	edd7 6a07 	vldr	s13, [r7, #28]
 800968c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009690:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009694:	ee17 2a90 	vmov	r2, s15
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	605a      	str	r2, [r3, #4]
 800969c:	e002      	b.n	80096a4 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	2200      	movs	r2, #0
 80096a2:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 80096a4:	4b13      	ldr	r3, [pc, #76]	@ (80096f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80096a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096a8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d017      	beq.n	80096e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80096b0:	4b10      	ldr	r3, [pc, #64]	@ (80096f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80096b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80096b4:	0e1b      	lsrs	r3, r3, #24
 80096b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80096ba:	ee07 3a90 	vmov	s15, r3
 80096be:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 80096c2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80096c6:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80096ca:	edd7 6a07 	vldr	s13, [r7, #28]
 80096ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80096d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80096d6:	ee17 2a90 	vmov	r2, s15
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80096de:	e002      	b.n	80096e6 <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	2200      	movs	r2, #0
 80096e4:	609a      	str	r2, [r3, #8]
}
 80096e6:	bf00      	nop
 80096e8:	3724      	adds	r7, #36	@ 0x24
 80096ea:	46bd      	mov	sp, r7
 80096ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f0:	4770      	bx	lr
 80096f2:	bf00      	nop
 80096f4:	46020c00 	.word	0x46020c00
 80096f8:	4b742400 	.word	0x4b742400
 80096fc:	46000000 	.word	0x46000000
 8009700:	08011c68 	.word	0x08011c68

08009704 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8009704:	b480      	push	{r7}
 8009706:	b089      	sub	sp, #36	@ 0x24
 8009708:	af00      	add	r7, sp, #0
 800970a:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 800970c:	4ba6      	ldr	r3, [pc, #664]	@ (80099a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800970e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009710:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009714:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8009716:	4ba4      	ldr	r3, [pc, #656]	@ (80099a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8009718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800971a:	f003 0303 	and.w	r3, r3, #3
 800971e:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 8009720:	4ba1      	ldr	r3, [pc, #644]	@ (80099a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8009722:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009724:	0a1b      	lsrs	r3, r3, #8
 8009726:	f003 030f 	and.w	r3, r3, #15
 800972a:	3301      	adds	r3, #1
 800972c:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 800972e:	4b9e      	ldr	r3, [pc, #632]	@ (80099a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8009730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009732:	091b      	lsrs	r3, r3, #4
 8009734:	f003 0301 	and.w	r3, r3, #1
 8009738:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 800973a:	4b9b      	ldr	r3, [pc, #620]	@ (80099a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800973c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800973e:	08db      	lsrs	r3, r3, #3
 8009740:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009744:	68fa      	ldr	r2, [r7, #12]
 8009746:	fb02 f303 	mul.w	r3, r2, r3
 800974a:	ee07 3a90 	vmov	s15, r3
 800974e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009752:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 8009756:	697b      	ldr	r3, [r7, #20]
 8009758:	2b03      	cmp	r3, #3
 800975a:	d062      	beq.n	8009822 <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 800975c:	697b      	ldr	r3, [r7, #20]
 800975e:	2b03      	cmp	r3, #3
 8009760:	f200 8081 	bhi.w	8009866 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 8009764:	697b      	ldr	r3, [r7, #20]
 8009766:	2b01      	cmp	r3, #1
 8009768:	d024      	beq.n	80097b4 <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 800976a:	697b      	ldr	r3, [r7, #20]
 800976c:	2b02      	cmp	r3, #2
 800976e:	d17a      	bne.n	8009866 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8009770:	693b      	ldr	r3, [r7, #16]
 8009772:	ee07 3a90 	vmov	s15, r3
 8009776:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800977a:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 80099ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 800977e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009782:	4b89      	ldr	r3, [pc, #548]	@ (80099a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8009784:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009786:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800978a:	ee07 3a90 	vmov	s15, r3
 800978e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8009792:	ed97 6a02 	vldr	s12, [r7, #8]
 8009796:	eddf 5a86 	vldr	s11, [pc, #536]	@ 80099b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800979a:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800979e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 80097a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80097a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80097aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80097ae:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 80097b2:	e08f      	b.n	80098d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80097b4:	4b7c      	ldr	r3, [pc, #496]	@ (80099a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80097b6:	689b      	ldr	r3, [r3, #8]
 80097b8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d005      	beq.n	80097cc <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 80097c0:	4b79      	ldr	r3, [pc, #484]	@ (80099a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80097c2:	689b      	ldr	r3, [r3, #8]
 80097c4:	0f1b      	lsrs	r3, r3, #28
 80097c6:	f003 030f 	and.w	r3, r3, #15
 80097ca:	e006      	b.n	80097da <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 80097cc:	4b76      	ldr	r3, [pc, #472]	@ (80099a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80097ce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80097d2:	041b      	lsls	r3, r3, #16
 80097d4:	0f1b      	lsrs	r3, r3, #28
 80097d6:	f003 030f 	and.w	r3, r3, #15
 80097da:	4a76      	ldr	r2, [pc, #472]	@ (80099b4 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 80097dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80097e0:	ee07 3a90 	vmov	s15, r3
 80097e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80097e8:	693b      	ldr	r3, [r7, #16]
 80097ea:	ee07 3a90 	vmov	s15, r3
 80097ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 80097f6:	69bb      	ldr	r3, [r7, #24]
 80097f8:	ee07 3a90 	vmov	s15, r3
 80097fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009800:	ed97 6a02 	vldr	s12, [r7, #8]
 8009804:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 80099b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8009808:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800980c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009810:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009814:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8009818:	ee67 7a27 	vmul.f32	s15, s14, s15
 800981c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009820:	e058      	b.n	80098d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8009822:	693b      	ldr	r3, [r7, #16]
 8009824:	ee07 3a90 	vmov	s15, r3
 8009828:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800982c:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80099ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8009830:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009834:	4b5c      	ldr	r3, [pc, #368]	@ (80099a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8009836:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009838:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800983c:	ee07 3a90 	vmov	s15, r3
 8009840:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8009844:	ed97 6a02 	vldr	s12, [r7, #8]
 8009848:	eddf 5a59 	vldr	s11, [pc, #356]	@ 80099b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800984c:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8009850:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8009854:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009858:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800985c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009860:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009864:	e036      	b.n	80098d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8009866:	4b50      	ldr	r3, [pc, #320]	@ (80099a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8009868:	689b      	ldr	r3, [r3, #8]
 800986a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800986e:	2b00      	cmp	r3, #0
 8009870:	d005      	beq.n	800987e <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 8009872:	4b4d      	ldr	r3, [pc, #308]	@ (80099a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8009874:	689b      	ldr	r3, [r3, #8]
 8009876:	0f1b      	lsrs	r3, r3, #28
 8009878:	f003 030f 	and.w	r3, r3, #15
 800987c:	e006      	b.n	800988c <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 800987e:	4b4a      	ldr	r3, [pc, #296]	@ (80099a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8009880:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009884:	041b      	lsls	r3, r3, #16
 8009886:	0f1b      	lsrs	r3, r3, #28
 8009888:	f003 030f 	and.w	r3, r3, #15
 800988c:	4a49      	ldr	r2, [pc, #292]	@ (80099b4 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 800988e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009892:	ee07 3a90 	vmov	s15, r3
 8009896:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800989a:	693b      	ldr	r3, [r7, #16]
 800989c:	ee07 3a90 	vmov	s15, r3
 80098a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 80098a8:	69bb      	ldr	r3, [r7, #24]
 80098aa:	ee07 3a90 	vmov	s15, r3
 80098ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80098b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80098b6:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 80099b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 80098ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80098be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80098c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80098c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80098ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80098ce:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80098d2:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 80098d4:	4b34      	ldr	r3, [pc, #208]	@ (80099a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80098d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80098d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d017      	beq.n	8009910 <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80098e0:	4b31      	ldr	r3, [pc, #196]	@ (80099a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80098e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80098e4:	0a5b      	lsrs	r3, r3, #9
 80098e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80098ea:	ee07 3a90 	vmov	s15, r3
 80098ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 80098f2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80098f6:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80098fa:	edd7 6a07 	vldr	s13, [r7, #28]
 80098fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009902:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009906:	ee17 2a90 	vmov	r2, s15
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	601a      	str	r2, [r3, #0]
 800990e:	e002      	b.n	8009916 <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	2200      	movs	r2, #0
 8009914:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8009916:	4b24      	ldr	r3, [pc, #144]	@ (80099a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8009918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800991a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800991e:	2b00      	cmp	r3, #0
 8009920:	d017      	beq.n	8009952 <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8009922:	4b21      	ldr	r3, [pc, #132]	@ (80099a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8009924:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009926:	0c1b      	lsrs	r3, r3, #16
 8009928:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800992c:	ee07 3a90 	vmov	s15, r3
 8009930:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 8009934:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009938:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800993c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009940:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009944:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009948:	ee17 2a90 	vmov	r2, s15
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	605a      	str	r2, [r3, #4]
 8009950:	e002      	b.n	8009958 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	2200      	movs	r2, #0
 8009956:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8009958:	4b13      	ldr	r3, [pc, #76]	@ (80099a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800995a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800995c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009960:	2b00      	cmp	r3, #0
 8009962:	d017      	beq.n	8009994 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8009964:	4b10      	ldr	r3, [pc, #64]	@ (80099a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8009966:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009968:	0e1b      	lsrs	r3, r3, #24
 800996a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800996e:	ee07 3a90 	vmov	s15, r3
 8009972:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 8009976:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800997a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800997e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009982:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009986:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800998a:	ee17 2a90 	vmov	r2, s15
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009992:	e002      	b.n	800999a <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	2200      	movs	r2, #0
 8009998:	609a      	str	r2, [r3, #8]
}
 800999a:	bf00      	nop
 800999c:	3724      	adds	r7, #36	@ 0x24
 800999e:	46bd      	mov	sp, r7
 80099a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a4:	4770      	bx	lr
 80099a6:	bf00      	nop
 80099a8:	46020c00 	.word	0x46020c00
 80099ac:	4b742400 	.word	0x4b742400
 80099b0:	46000000 	.word	0x46000000
 80099b4:	08011c68 	.word	0x08011c68

080099b8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80099b8:	b580      	push	{r7, lr}
 80099ba:	b08e      	sub	sp, #56	@ 0x38
 80099bc:	af00      	add	r7, sp, #0
 80099be:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 80099c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80099c6:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 80099ca:	430b      	orrs	r3, r1
 80099cc:	d145      	bne.n	8009a5a <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80099ce:	4ba7      	ldr	r3, [pc, #668]	@ (8009c6c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80099d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80099d4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80099d8:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 80099da:	4ba4      	ldr	r3, [pc, #656]	@ (8009c6c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80099dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80099e0:	f003 0302 	and.w	r3, r3, #2
 80099e4:	2b02      	cmp	r3, #2
 80099e6:	d108      	bne.n	80099fa <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 80099e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80099ee:	d104      	bne.n	80099fa <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 80099f0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80099f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80099f6:	f001 bb5a 	b.w	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 80099fa:	4b9c      	ldr	r3, [pc, #624]	@ (8009c6c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80099fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009a00:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009a04:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009a08:	d114      	bne.n	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 8009a0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a0c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009a10:	d110      	bne.n	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009a12:	4b96      	ldr	r3, [pc, #600]	@ (8009c6c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8009a14:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009a18:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009a1c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009a20:	d103      	bne.n	8009a2a <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 8009a22:	23fa      	movs	r3, #250	@ 0xfa
 8009a24:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009a26:	f001 bb42 	b.w	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 8009a2a:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009a2e:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009a30:	f001 bb3d 	b.w	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8009a34:	4b8d      	ldr	r3, [pc, #564]	@ (8009c6c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009a3c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009a40:	d107      	bne.n	8009a52 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 8009a42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a44:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009a48:	d103      	bne.n	8009a52 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 8009a4a:	4b89      	ldr	r3, [pc, #548]	@ (8009c70 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8009a4c:	637b      	str	r3, [r7, #52]	@ 0x34
 8009a4e:	f001 bb2e 	b.w	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8009a52:	2300      	movs	r3, #0
 8009a54:	637b      	str	r3, [r7, #52]	@ 0x34
 8009a56:	f001 bb2a 	b.w	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8009a5a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009a5e:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8009a62:	430b      	orrs	r3, r1
 8009a64:	d151      	bne.n	8009b0a <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8009a66:	4b81      	ldr	r3, [pc, #516]	@ (8009c6c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8009a68:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009a6c:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8009a70:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8009a72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a74:	2b80      	cmp	r3, #128	@ 0x80
 8009a76:	d035      	beq.n	8009ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 8009a78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a7a:	2b80      	cmp	r3, #128	@ 0x80
 8009a7c:	d841      	bhi.n	8009b02 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8009a7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a80:	2b60      	cmp	r3, #96	@ 0x60
 8009a82:	d02a      	beq.n	8009ada <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 8009a84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a86:	2b60      	cmp	r3, #96	@ 0x60
 8009a88:	d83b      	bhi.n	8009b02 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8009a8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a8c:	2b40      	cmp	r3, #64	@ 0x40
 8009a8e:	d009      	beq.n	8009aa4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8009a90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a92:	2b40      	cmp	r3, #64	@ 0x40
 8009a94:	d835      	bhi.n	8009b02 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8009a96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d00c      	beq.n	8009ab6 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 8009a9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a9e:	2b20      	cmp	r3, #32
 8009aa0:	d012      	beq.n	8009ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8009aa2:	e02e      	b.n	8009b02 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009aa4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009aa8:	4618      	mov	r0, r3
 8009aaa:	f7ff fb77 	bl	800919c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8009aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ab0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009ab2:	f001 bafc 	b.w	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009ab6:	f107 0318 	add.w	r3, r7, #24
 8009aba:	4618      	mov	r0, r3
 8009abc:	f7ff fcc8 	bl	8009450 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8009ac0:	69bb      	ldr	r3, [r7, #24]
 8009ac2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009ac4:	f001 baf3 	b.w	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009ac8:	f107 030c 	add.w	r3, r7, #12
 8009acc:	4618      	mov	r0, r3
 8009ace:	f7ff fe19 	bl	8009704 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009ad6:	f001 baea 	b.w	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8009ada:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8009ade:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009ae0:	f001 bae5 	b.w	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009ae4:	4b61      	ldr	r3, [pc, #388]	@ (8009c6c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009aec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009af0:	d103      	bne.n	8009afa <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 8009af2:	4b60      	ldr	r3, [pc, #384]	@ (8009c74 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8009af4:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009af6:	f001 bada 	b.w	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 8009afa:	2300      	movs	r3, #0
 8009afc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009afe:	f001 bad6 	b.w	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default :
      {
        frequency = 0U;
 8009b02:	2300      	movs	r3, #0
 8009b04:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009b06:	f001 bad2 	b.w	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8009b0a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009b0e:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8009b12:	430b      	orrs	r3, r1
 8009b14:	d158      	bne.n	8009bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8009b16:	4b55      	ldr	r3, [pc, #340]	@ (8009c6c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8009b18:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009b1c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009b20:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8009b22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b24:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009b28:	d03b      	beq.n	8009ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8009b2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b2c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009b30:	d846      	bhi.n	8009bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8009b32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b34:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009b38:	d02e      	beq.n	8009b98 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 8009b3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b3c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009b40:	d83e      	bhi.n	8009bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8009b42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b44:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009b48:	d00b      	beq.n	8009b62 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 8009b4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b4c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009b50:	d836      	bhi.n	8009bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8009b52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d00d      	beq.n	8009b74 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8009b58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b5a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009b5e:	d012      	beq.n	8009b86 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 8009b60:	e02e      	b.n	8009bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009b62:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009b66:	4618      	mov	r0, r3
 8009b68:	f7ff fb18 	bl	800919c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8009b6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b6e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009b70:	f001 ba9d 	b.w	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009b74:	f107 0318 	add.w	r3, r7, #24
 8009b78:	4618      	mov	r0, r3
 8009b7a:	f7ff fc69 	bl	8009450 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8009b7e:	69bb      	ldr	r3, [r7, #24]
 8009b80:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009b82:	f001 ba94 	b.w	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009b86:	f107 030c 	add.w	r3, r7, #12
 8009b8a:	4618      	mov	r0, r3
 8009b8c:	f7ff fdba 	bl	8009704 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009b94:	f001 ba8b 	b.w	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8009b98:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8009b9c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009b9e:	f001 ba86 	b.w	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009ba2:	4b32      	ldr	r3, [pc, #200]	@ (8009c6c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009baa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009bae:	d103      	bne.n	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 8009bb0:	4b30      	ldr	r3, [pc, #192]	@ (8009c74 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8009bb2:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009bb4:	f001 ba7b 	b.w	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 8009bb8:	2300      	movs	r3, #0
 8009bba:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009bbc:	f001 ba77 	b.w	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default :

        frequency = 0U;
 8009bc0:	2300      	movs	r3, #0
 8009bc2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009bc4:	f001 ba73 	b.w	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* SAI2 */
#if defined(SAES)
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 8009bc8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009bcc:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8009bd0:	430b      	orrs	r3, r1
 8009bd2:	d126      	bne.n	8009c22 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 8009bd4:	4b25      	ldr	r3, [pc, #148]	@ (8009c6c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8009bd6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009bda:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009bde:	633b      	str	r3, [r7, #48]	@ 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 8009be0:	4b22      	ldr	r3, [pc, #136]	@ (8009c6c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009be8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009bec:	d106      	bne.n	8009bfc <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8009bee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d103      	bne.n	8009bfc <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 8009bf4:	4b1f      	ldr	r3, [pc, #124]	@ (8009c74 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8009bf6:	637b      	str	r3, [r7, #52]	@ 0x34
 8009bf8:	f001 ba59 	b.w	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 8009bfc:	4b1b      	ldr	r3, [pc, #108]	@ (8009c6c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009c04:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009c08:	d107      	bne.n	8009c1a <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 8009c0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c0c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009c10:	d103      	bne.n	8009c1a <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 8009c12:	4b19      	ldr	r3, [pc, #100]	@ (8009c78 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8009c14:	637b      	str	r3, [r7, #52]	@ 0x34
 8009c16:	f001 ba4a 	b.w	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 8009c1a:	2300      	movs	r3, #0
 8009c1c:	637b      	str	r3, [r7, #52]	@ 0x34
 8009c1e:	f001 ba46 	b.w	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 8009c22:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009c26:	f5a2 1180 	sub.w	r1, r2, #1048576	@ 0x100000
 8009c2a:	430b      	orrs	r3, r1
 8009c2c:	d16e      	bne.n	8009d0c <HAL_RCCEx_GetPeriphCLKFreq+0x354>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8009c2e:	4b0f      	ldr	r3, [pc, #60]	@ (8009c6c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8009c30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009c34:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8009c38:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8009c3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c3c:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8009c40:	d03d      	beq.n	8009cbe <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8009c42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c44:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8009c48:	d85c      	bhi.n	8009d04 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8009c4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c4c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009c50:	d014      	beq.n	8009c7c <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 8009c52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c54:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009c58:	d854      	bhi.n	8009d04 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8009c5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d01f      	beq.n	8009ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 8009c60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c62:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009c66:	d012      	beq.n	8009c8e <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 8009c68:	e04c      	b.n	8009d04 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8009c6a:	bf00      	nop
 8009c6c:	46020c00 	.word	0x46020c00
 8009c70:	0007a120 	.word	0x0007a120
 8009c74:	00f42400 	.word	0x00f42400
 8009c78:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009c7c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009c80:	4618      	mov	r0, r3
 8009c82:	f7ff fa8b 	bl	800919c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8009c86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c88:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009c8a:	f001 ba10 	b.w	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009c8e:	f107 0318 	add.w	r3, r7, #24
 8009c92:	4618      	mov	r0, r3
 8009c94:	f7ff fbdc 	bl	8009450 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8009c98:	69fb      	ldr	r3, [r7, #28]
 8009c9a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009c9c:	f001 ba07 	b.w	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8009ca0:	4ba7      	ldr	r3, [pc, #668]	@ (8009f40 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009ca8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009cac:	d103      	bne.n	8009cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 8009cae:	4ba5      	ldr	r3, [pc, #660]	@ (8009f44 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009cb0:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009cb2:	f001 b9fc 	b.w	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 8009cb6:	2300      	movs	r3, #0
 8009cb8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009cba:	f001 b9f8 	b.w	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8009cbe:	4ba0      	ldr	r3, [pc, #640]	@ (8009f40 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	f003 0320 	and.w	r3, r3, #32
 8009cc6:	2b20      	cmp	r3, #32
 8009cc8:	d118      	bne.n	8009cfc <HAL_RCCEx_GetPeriphCLKFreq+0x344>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009cca:	4b9d      	ldr	r3, [pc, #628]	@ (8009f40 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8009ccc:	689b      	ldr	r3, [r3, #8]
 8009cce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d005      	beq.n	8009ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8009cd6:	4b9a      	ldr	r3, [pc, #616]	@ (8009f40 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8009cd8:	689b      	ldr	r3, [r3, #8]
 8009cda:	0e1b      	lsrs	r3, r3, #24
 8009cdc:	f003 030f 	and.w	r3, r3, #15
 8009ce0:	e006      	b.n	8009cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8009ce2:	4b97      	ldr	r3, [pc, #604]	@ (8009f40 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8009ce4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009ce8:	041b      	lsls	r3, r3, #16
 8009cea:	0e1b      	lsrs	r3, r3, #24
 8009cec:	f003 030f 	and.w	r3, r3, #15
 8009cf0:	4a95      	ldr	r2, [pc, #596]	@ (8009f48 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8009cf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009cf6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009cf8:	f001 b9d9 	b.w	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009d00:	f001 b9d5 	b.w	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default :

        frequency = 0U;
 8009d04:	2300      	movs	r3, #0
 8009d06:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009d08:	f001 b9d1 	b.w	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8009d0c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009d10:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 8009d14:	430b      	orrs	r3, r1
 8009d16:	d17f      	bne.n	8009e18 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8009d18:	4b89      	ldr	r3, [pc, #548]	@ (8009f40 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8009d1a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009d1e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009d22:	633b      	str	r3, [r7, #48]	@ 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 8009d24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d165      	bne.n	8009df6 <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8009d2a:	4b85      	ldr	r3, [pc, #532]	@ (8009f40 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8009d2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009d30:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8009d34:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (srcclk)
 8009d36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d38:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8009d3c:	d034      	beq.n	8009da8 <HAL_RCCEx_GetPeriphCLKFreq+0x3f0>
 8009d3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d40:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8009d44:	d853      	bhi.n	8009dee <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 8009d46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d48:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009d4c:	d00b      	beq.n	8009d66 <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
 8009d4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d50:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009d54:	d84b      	bhi.n	8009dee <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 8009d56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d016      	beq.n	8009d8a <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
 8009d5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d5e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009d62:	d009      	beq.n	8009d78 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8009d64:	e043      	b.n	8009dee <HAL_RCCEx_GetPeriphCLKFreq+0x436>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009d66:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	f7ff fa16 	bl	800919c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009d70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d72:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8009d74:	f001 b99b 	b.w	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009d78:	f107 0318 	add.w	r3, r7, #24
 8009d7c:	4618      	mov	r0, r3
 8009d7e:	f7ff fb67 	bl	8009450 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009d82:	69fb      	ldr	r3, [r7, #28]
 8009d84:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8009d86:	f001 b992 	b.w	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8009d8a:	4b6d      	ldr	r3, [pc, #436]	@ (8009f40 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009d92:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009d96:	d103      	bne.n	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
          {
            frequency = HSI48_VALUE;
 8009d98:	4b6a      	ldr	r3, [pc, #424]	@ (8009f44 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009d9a:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8009d9c:	f001 b987 	b.w	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
            frequency = 0U;
 8009da0:	2300      	movs	r3, #0
 8009da2:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8009da4:	f001 b983 	b.w	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8009da8:	4b65      	ldr	r3, [pc, #404]	@ (8009f40 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	f003 0320 	and.w	r3, r3, #32
 8009db0:	2b20      	cmp	r3, #32
 8009db2:	d118      	bne.n	8009de6 <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009db4:	4b62      	ldr	r3, [pc, #392]	@ (8009f40 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8009db6:	689b      	ldr	r3, [r3, #8]
 8009db8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d005      	beq.n	8009dcc <HAL_RCCEx_GetPeriphCLKFreq+0x414>
 8009dc0:	4b5f      	ldr	r3, [pc, #380]	@ (8009f40 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8009dc2:	689b      	ldr	r3, [r3, #8]
 8009dc4:	0e1b      	lsrs	r3, r3, #24
 8009dc6:	f003 030f 	and.w	r3, r3, #15
 8009dca:	e006      	b.n	8009dda <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8009dcc:	4b5c      	ldr	r3, [pc, #368]	@ (8009f40 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8009dce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009dd2:	041b      	lsls	r3, r3, #16
 8009dd4:	0e1b      	lsrs	r3, r3, #24
 8009dd6:	f003 030f 	and.w	r3, r3, #15
 8009dda:	4a5b      	ldr	r2, [pc, #364]	@ (8009f48 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8009ddc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009de0:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8009de2:	f001 b964 	b.w	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
            frequency = 0U;
 8009de6:	2300      	movs	r3, #0
 8009de8:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8009dea:	f001 b960 	b.w	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        default :
        {
          frequency = 0U;
 8009dee:	2300      	movs	r3, #0
 8009df0:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8009df2:	f001 b95c 	b.w	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 8009df6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009df8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009dfc:	d108      	bne.n	8009e10 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009dfe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009e02:	4618      	mov	r0, r3
 8009e04:	f7ff f9ca 	bl	800919c <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8009e08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e0a:	637b      	str	r3, [r7, #52]	@ 0x34
 8009e0c:	f001 b94f 	b.w	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else
    {
      frequency = 0U;
 8009e10:	2300      	movs	r3, #0
 8009e12:	637b      	str	r3, [r7, #52]	@ 0x34
 8009e14:	f001 b94b 	b.w	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 8009e18:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009e1c:	1e51      	subs	r1, r2, #1
 8009e1e:	430b      	orrs	r3, r1
 8009e20:	d136      	bne.n	8009e90 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8009e22:	4b47      	ldr	r3, [pc, #284]	@ (8009f40 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8009e24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009e28:	f003 0303 	and.w	r3, r3, #3
 8009e2c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8009e2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d104      	bne.n	8009e3e <HAL_RCCEx_GetPeriphCLKFreq+0x486>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 8009e34:	f7fe f9cc 	bl	80081d0 <HAL_RCC_GetPCLK2Freq>
 8009e38:	6378      	str	r0, [r7, #52]	@ 0x34
 8009e3a:	f001 b938 	b.w	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 8009e3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e40:	2b01      	cmp	r3, #1
 8009e42:	d104      	bne.n	8009e4e <HAL_RCCEx_GetPeriphCLKFreq+0x496>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8009e44:	f7fe f894 	bl	8007f70 <HAL_RCC_GetSysClockFreq>
 8009e48:	6378      	str	r0, [r7, #52]	@ 0x34
 8009e4a:	f001 b930 	b.w	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8009e4e:	4b3c      	ldr	r3, [pc, #240]	@ (8009f40 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009e56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009e5a:	d106      	bne.n	8009e6a <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 8009e5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e5e:	2b02      	cmp	r3, #2
 8009e60:	d103      	bne.n	8009e6a <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
    {
      frequency = HSI_VALUE;
 8009e62:	4b3a      	ldr	r3, [pc, #232]	@ (8009f4c <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8009e64:	637b      	str	r3, [r7, #52]	@ 0x34
 8009e66:	f001 b922 	b.w	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8009e6a:	4b35      	ldr	r3, [pc, #212]	@ (8009f40 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8009e6c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009e70:	f003 0302 	and.w	r3, r3, #2
 8009e74:	2b02      	cmp	r3, #2
 8009e76:	d107      	bne.n	8009e88 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8009e78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e7a:	2b03      	cmp	r3, #3
 8009e7c:	d104      	bne.n	8009e88 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = LSE_VALUE;
 8009e7e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009e82:	637b      	str	r3, [r7, #52]	@ 0x34
 8009e84:	f001 b913 	b.w	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 8009e88:	2300      	movs	r3, #0
 8009e8a:	637b      	str	r3, [r7, #52]	@ 0x34
 8009e8c:	f001 b90f 	b.w	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 8009e90:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009e94:	1e91      	subs	r1, r2, #2
 8009e96:	430b      	orrs	r3, r1
 8009e98:	d136      	bne.n	8009f08 <HAL_RCCEx_GetPeriphCLKFreq+0x550>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8009e9a:	4b29      	ldr	r3, [pc, #164]	@ (8009f40 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8009e9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009ea0:	f003 030c 	and.w	r3, r3, #12
 8009ea4:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8009ea6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d104      	bne.n	8009eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8009eac:	f7fe f97c 	bl	80081a8 <HAL_RCC_GetPCLK1Freq>
 8009eb0:	6378      	str	r0, [r7, #52]	@ 0x34
 8009eb2:	f001 b8fc 	b.w	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8009eb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009eb8:	2b04      	cmp	r3, #4
 8009eba:	d104      	bne.n	8009ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8009ebc:	f7fe f858 	bl	8007f70 <HAL_RCC_GetSysClockFreq>
 8009ec0:	6378      	str	r0, [r7, #52]	@ 0x34
 8009ec2:	f001 b8f4 	b.w	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8009ec6:	4b1e      	ldr	r3, [pc, #120]	@ (8009f40 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009ece:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009ed2:	d106      	bne.n	8009ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8009ed4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ed6:	2b08      	cmp	r3, #8
 8009ed8:	d103      	bne.n	8009ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
    {
      frequency = HSI_VALUE;
 8009eda:	4b1c      	ldr	r3, [pc, #112]	@ (8009f4c <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8009edc:	637b      	str	r3, [r7, #52]	@ 0x34
 8009ede:	f001 b8e6 	b.w	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8009ee2:	4b17      	ldr	r3, [pc, #92]	@ (8009f40 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8009ee4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009ee8:	f003 0302 	and.w	r3, r3, #2
 8009eec:	2b02      	cmp	r3, #2
 8009eee:	d107      	bne.n	8009f00 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 8009ef0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ef2:	2b0c      	cmp	r3, #12
 8009ef4:	d104      	bne.n	8009f00 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = LSE_VALUE;
 8009ef6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009efa:	637b      	str	r3, [r7, #52]	@ 0x34
 8009efc:	f001 b8d7 	b.w	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 8009f00:	2300      	movs	r3, #0
 8009f02:	637b      	str	r3, [r7, #52]	@ 0x34
 8009f04:	f001 b8d3 	b.w	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 8009f08:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009f0c:	1f11      	subs	r1, r2, #4
 8009f0e:	430b      	orrs	r3, r1
 8009f10:	d13f      	bne.n	8009f92 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8009f12:	4b0b      	ldr	r3, [pc, #44]	@ (8009f40 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8009f14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009f18:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8009f1c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8009f1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d104      	bne.n	8009f2e <HAL_RCCEx_GetPeriphCLKFreq+0x576>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8009f24:	f7fe f940 	bl	80081a8 <HAL_RCC_GetPCLK1Freq>
 8009f28:	6378      	str	r0, [r7, #52]	@ 0x34
 8009f2a:	f001 b8c0 	b.w	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 8009f2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f30:	2b10      	cmp	r3, #16
 8009f32:	d10d      	bne.n	8009f50 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8009f34:	f7fe f81c 	bl	8007f70 <HAL_RCC_GetSysClockFreq>
 8009f38:	6378      	str	r0, [r7, #52]	@ 0x34
 8009f3a:	f001 b8b8 	b.w	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 8009f3e:	bf00      	nop
 8009f40:	46020c00 	.word	0x46020c00
 8009f44:	02dc6c00 	.word	0x02dc6c00
 8009f48:	08011c68 	.word	0x08011c68
 8009f4c:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8009f50:	4ba8      	ldr	r3, [pc, #672]	@ (800a1f4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009f58:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009f5c:	d106      	bne.n	8009f6c <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 8009f5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f60:	2b20      	cmp	r3, #32
 8009f62:	d103      	bne.n	8009f6c <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
    {
      frequency = HSI_VALUE;
 8009f64:	4ba4      	ldr	r3, [pc, #656]	@ (800a1f8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8009f66:	637b      	str	r3, [r7, #52]	@ 0x34
 8009f68:	f001 b8a1 	b.w	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8009f6c:	4ba1      	ldr	r3, [pc, #644]	@ (800a1f4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8009f6e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009f72:	f003 0302 	and.w	r3, r3, #2
 8009f76:	2b02      	cmp	r3, #2
 8009f78:	d107      	bne.n	8009f8a <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 8009f7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f7c:	2b30      	cmp	r3, #48	@ 0x30
 8009f7e:	d104      	bne.n	8009f8a <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
    {
      frequency = LSE_VALUE;
 8009f80:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009f84:	637b      	str	r3, [r7, #52]	@ 0x34
 8009f86:	f001 b892 	b.w	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 8009f8a:	2300      	movs	r3, #0
 8009f8c:	637b      	str	r3, [r7, #52]	@ 0x34
 8009f8e:	f001 b88e 	b.w	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 8009f92:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009f96:	f1a2 0108 	sub.w	r1, r2, #8
 8009f9a:	430b      	orrs	r3, r1
 8009f9c:	d136      	bne.n	800a00c <HAL_RCCEx_GetPeriphCLKFreq+0x654>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8009f9e:	4b95      	ldr	r3, [pc, #596]	@ (800a1f4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8009fa0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009fa4:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8009fa8:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8009faa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d104      	bne.n	8009fba <HAL_RCCEx_GetPeriphCLKFreq+0x602>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8009fb0:	f7fe f8fa 	bl	80081a8 <HAL_RCC_GetPCLK1Freq>
 8009fb4:	6378      	str	r0, [r7, #52]	@ 0x34
 8009fb6:	f001 b87a 	b.w	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 8009fba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fbc:	2b40      	cmp	r3, #64	@ 0x40
 8009fbe:	d104      	bne.n	8009fca <HAL_RCCEx_GetPeriphCLKFreq+0x612>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8009fc0:	f7fd ffd6 	bl	8007f70 <HAL_RCC_GetSysClockFreq>
 8009fc4:	6378      	str	r0, [r7, #52]	@ 0x34
 8009fc6:	f001 b872 	b.w	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8009fca:	4b8a      	ldr	r3, [pc, #552]	@ (800a1f4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009fd2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009fd6:	d106      	bne.n	8009fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
 8009fd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fda:	2b80      	cmp	r3, #128	@ 0x80
 8009fdc:	d103      	bne.n	8009fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
    {
      frequency = HSI_VALUE;
 8009fde:	4b86      	ldr	r3, [pc, #536]	@ (800a1f8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8009fe0:	637b      	str	r3, [r7, #52]	@ 0x34
 8009fe2:	f001 b864 	b.w	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8009fe6:	4b83      	ldr	r3, [pc, #524]	@ (800a1f4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8009fe8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009fec:	f003 0302 	and.w	r3, r3, #2
 8009ff0:	2b02      	cmp	r3, #2
 8009ff2:	d107      	bne.n	800a004 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8009ff4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ff6:	2bc0      	cmp	r3, #192	@ 0xc0
 8009ff8:	d104      	bne.n	800a004 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
    {
      frequency = LSE_VALUE;
 8009ffa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009ffe:	637b      	str	r3, [r7, #52]	@ 0x34
 800a000:	f001 b855 	b.w	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 800a004:	2300      	movs	r3, #0
 800a006:	637b      	str	r3, [r7, #52]	@ 0x34
 800a008:	f001 b851 	b.w	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 800a00c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a010:	f1a2 0110 	sub.w	r1, r2, #16
 800a014:	430b      	orrs	r3, r1
 800a016:	d139      	bne.n	800a08c <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800a018:	4b76      	ldr	r3, [pc, #472]	@ (800a1f4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a01a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a01e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a022:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 800a024:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a026:	2b00      	cmp	r3, #0
 800a028:	d104      	bne.n	800a034 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800a02a:	f7fe f8bd 	bl	80081a8 <HAL_RCC_GetPCLK1Freq>
 800a02e:	6378      	str	r0, [r7, #52]	@ 0x34
 800a030:	f001 b83d 	b.w	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 800a034:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a036:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a03a:	d104      	bne.n	800a046 <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800a03c:	f7fd ff98 	bl	8007f70 <HAL_RCC_GetSysClockFreq>
 800a040:	6378      	str	r0, [r7, #52]	@ 0x34
 800a042:	f001 b834 	b.w	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 800a046:	4b6b      	ldr	r3, [pc, #428]	@ (800a1f4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a04e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a052:	d107      	bne.n	800a064 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
 800a054:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a056:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a05a:	d103      	bne.n	800a064 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
    {
      frequency = HSI_VALUE;
 800a05c:	4b66      	ldr	r3, [pc, #408]	@ (800a1f8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800a05e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a060:	f001 b825 	b.w	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 800a064:	4b63      	ldr	r3, [pc, #396]	@ (800a1f4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a066:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a06a:	f003 0302 	and.w	r3, r3, #2
 800a06e:	2b02      	cmp	r3, #2
 800a070:	d108      	bne.n	800a084 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 800a072:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a074:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a078:	d104      	bne.n	800a084 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
    {
      frequency = LSE_VALUE;
 800a07a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a07e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a080:	f001 b815 	b.w	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 800a084:	2300      	movs	r3, #0
 800a086:	637b      	str	r3, [r7, #52]	@ 0x34
 800a088:	f001 b811 	b.w	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined(USART6)
  else if (PeriphClk == RCC_PERIPHCLK_USART6)
 800a08c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a090:	f102 4160 	add.w	r1, r2, #3758096384	@ 0xe0000000
 800a094:	430b      	orrs	r3, r1
 800a096:	d139      	bne.n	800a10c <HAL_RCCEx_GetPeriphCLKFreq+0x754>
  {
    /* Get the current USART6 source */
    srcclk = __HAL_RCC_GET_USART6_SOURCE();
 800a098:	4b56      	ldr	r3, [pc, #344]	@ (800a1f4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a09a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a09e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800a0a2:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 800a0a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d104      	bne.n	800a0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800a0aa:	f7fe f87d 	bl	80081a8 <HAL_RCC_GetPCLK1Freq>
 800a0ae:	6378      	str	r0, [r7, #52]	@ 0x34
 800a0b0:	f000 bffd 	b.w	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART6CLKSOURCE_SYSCLK)
 800a0b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a0ba:	d104      	bne.n	800a0c6 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800a0bc:	f7fd ff58 	bl	8007f70 <HAL_RCC_GetSysClockFreq>
 800a0c0:	6378      	str	r0, [r7, #52]	@ 0x34
 800a0c2:	f000 bff4 	b.w	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 800a0c6:	4b4b      	ldr	r3, [pc, #300]	@ (800a1f4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a0ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a0d2:	d107      	bne.n	800a0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 800a0d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0d6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a0da:	d103      	bne.n	800a0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
    {
      frequency = HSI_VALUE;
 800a0dc:	4b46      	ldr	r3, [pc, #280]	@ (800a1f8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800a0de:	637b      	str	r3, [r7, #52]	@ 0x34
 800a0e0:	f000 bfe5 	b.w	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 800a0e4:	4b43      	ldr	r3, [pc, #268]	@ (800a1f4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a0e6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a0ea:	f003 0302 	and.w	r3, r3, #2
 800a0ee:	2b02      	cmp	r3, #2
 800a0f0:	d108      	bne.n	800a104 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
 800a0f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0f4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a0f8:	d104      	bne.n	800a104 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
    {
      frequency = LSE_VALUE;
 800a0fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a0fe:	637b      	str	r3, [r7, #52]	@ 0x34
 800a100:	f000 bfd5 	b.w	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 800a104:	2300      	movs	r3, #0
 800a106:	637b      	str	r3, [r7, #52]	@ 0x34
 800a108:	f000 bfd1 	b.w	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 800a10c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a110:	f1a2 0120 	sub.w	r1, r2, #32
 800a114:	430b      	orrs	r3, r1
 800a116:	d158      	bne.n	800a1ca <HAL_RCCEx_GetPeriphCLKFreq+0x812>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800a118:	4b36      	ldr	r3, [pc, #216]	@ (800a1f4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a11a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a11e:	f003 0307 	and.w	r3, r3, #7
 800a122:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 800a124:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a126:	2b00      	cmp	r3, #0
 800a128:	d104      	bne.n	800a134 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 800a12a:	f7fe f865 	bl	80081f8 <HAL_RCC_GetPCLK3Freq>
 800a12e:	6378      	str	r0, [r7, #52]	@ 0x34
 800a130:	f000 bfbd 	b.w	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 800a134:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a136:	2b01      	cmp	r3, #1
 800a138:	d104      	bne.n	800a144 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800a13a:	f7fd ff19 	bl	8007f70 <HAL_RCC_GetSysClockFreq>
 800a13e:	6378      	str	r0, [r7, #52]	@ 0x34
 800a140:	f000 bfb5 	b.w	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800a144:	4b2b      	ldr	r3, [pc, #172]	@ (800a1f4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a14c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a150:	d106      	bne.n	800a160 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
 800a152:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a154:	2b02      	cmp	r3, #2
 800a156:	d103      	bne.n	800a160 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      frequency = HSI_VALUE;
 800a158:	4b27      	ldr	r3, [pc, #156]	@ (800a1f8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800a15a:	637b      	str	r3, [r7, #52]	@ 0x34
 800a15c:	f000 bfa7 	b.w	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800a160:	4b24      	ldr	r3, [pc, #144]	@ (800a1f4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a162:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a166:	f003 0302 	and.w	r3, r3, #2
 800a16a:	2b02      	cmp	r3, #2
 800a16c:	d107      	bne.n	800a17e <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
 800a16e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a170:	2b03      	cmp	r3, #3
 800a172:	d104      	bne.n	800a17e <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
    {
      frequency = LSE_VALUE;
 800a174:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a178:	637b      	str	r3, [r7, #52]	@ 0x34
 800a17a:	f000 bf98 	b.w	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 800a17e:	4b1d      	ldr	r3, [pc, #116]	@ (800a1f4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	f003 0320 	and.w	r3, r3, #32
 800a186:	2b20      	cmp	r3, #32
 800a188:	d11b      	bne.n	800a1c2 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 800a18a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a18c:	2b04      	cmp	r3, #4
 800a18e:	d118      	bne.n	800a1c2 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800a190:	4b18      	ldr	r3, [pc, #96]	@ (800a1f4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a192:	689b      	ldr	r3, [r3, #8]
 800a194:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d005      	beq.n	800a1a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
 800a19c:	4b15      	ldr	r3, [pc, #84]	@ (800a1f4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a19e:	689b      	ldr	r3, [r3, #8]
 800a1a0:	0e1b      	lsrs	r3, r3, #24
 800a1a2:	f003 030f 	and.w	r3, r3, #15
 800a1a6:	e006      	b.n	800a1b6 <HAL_RCCEx_GetPeriphCLKFreq+0x7fe>
 800a1a8:	4b12      	ldr	r3, [pc, #72]	@ (800a1f4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a1aa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a1ae:	041b      	lsls	r3, r3, #16
 800a1b0:	0e1b      	lsrs	r3, r3, #24
 800a1b2:	f003 030f 	and.w	r3, r3, #15
 800a1b6:	4a11      	ldr	r2, [pc, #68]	@ (800a1fc <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800a1b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a1bc:	637b      	str	r3, [r7, #52]	@ 0x34
 800a1be:	f000 bf76 	b.w	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 800a1c2:	2300      	movs	r3, #0
 800a1c4:	637b      	str	r3, [r7, #52]	@ 0x34
 800a1c6:	f000 bf72 	b.w	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 800a1ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a1ce:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800a1d2:	430b      	orrs	r3, r1
 800a1d4:	d172      	bne.n	800a2bc <HAL_RCCEx_GetPeriphCLKFreq+0x904>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 800a1d6:	4b07      	ldr	r3, [pc, #28]	@ (800a1f4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a1d8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a1dc:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800a1e0:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 800a1e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a1e8:	d10a      	bne.n	800a200 <HAL_RCCEx_GetPeriphCLKFreq+0x848>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800a1ea:	f7fd fec1 	bl	8007f70 <HAL_RCC_GetSysClockFreq>
 800a1ee:	6378      	str	r0, [r7, #52]	@ 0x34
 800a1f0:	f000 bf5d 	b.w	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800a1f4:	46020c00 	.word	0x46020c00
 800a1f8:	00f42400 	.word	0x00f42400
 800a1fc:	08011c68 	.word	0x08011c68
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 800a200:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a202:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a206:	d108      	bne.n	800a21a <HAL_RCCEx_GetPeriphCLKFreq+0x862>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a208:	f107 0318 	add.w	r3, r7, #24
 800a20c:	4618      	mov	r0, r3
 800a20e:	f7ff f91f 	bl	8009450 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 800a212:	6a3b      	ldr	r3, [r7, #32]
 800a214:	637b      	str	r3, [r7, #52]	@ 0x34
 800a216:	f000 bf4a 	b.w	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 800a21a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d104      	bne.n	800a22a <HAL_RCCEx_GetPeriphCLKFreq+0x872>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 800a220:	f7fd ffa8 	bl	8008174 <HAL_RCC_GetHCLKFreq>
 800a224:	6378      	str	r0, [r7, #52]	@ 0x34
 800a226:	f000 bf42 	b.w	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 800a22a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a22c:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800a230:	d122      	bne.n	800a278 <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800a232:	4bb0      	ldr	r3, [pc, #704]	@ (800a4f4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	f003 0320 	and.w	r3, r3, #32
 800a23a:	2b20      	cmp	r3, #32
 800a23c:	d118      	bne.n	800a270 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800a23e:	4bad      	ldr	r3, [pc, #692]	@ (800a4f4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800a240:	689b      	ldr	r3, [r3, #8]
 800a242:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a246:	2b00      	cmp	r3, #0
 800a248:	d005      	beq.n	800a256 <HAL_RCCEx_GetPeriphCLKFreq+0x89e>
 800a24a:	4baa      	ldr	r3, [pc, #680]	@ (800a4f4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800a24c:	689b      	ldr	r3, [r3, #8]
 800a24e:	0e1b      	lsrs	r3, r3, #24
 800a250:	f003 030f 	and.w	r3, r3, #15
 800a254:	e006      	b.n	800a264 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
 800a256:	4ba7      	ldr	r3, [pc, #668]	@ (800a4f4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800a258:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a25c:	041b      	lsls	r3, r3, #16
 800a25e:	0e1b      	lsrs	r3, r3, #24
 800a260:	f003 030f 	and.w	r3, r3, #15
 800a264:	4aa4      	ldr	r2, [pc, #656]	@ (800a4f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800a266:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a26a:	637b      	str	r3, [r7, #52]	@ 0x34
 800a26c:	f000 bf1f 	b.w	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = 0U;
 800a270:	2300      	movs	r3, #0
 800a272:	637b      	str	r3, [r7, #52]	@ 0x34
 800a274:	f000 bf1b 	b.w	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 800a278:	4b9e      	ldr	r3, [pc, #632]	@ (800a4f4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a280:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a284:	d107      	bne.n	800a296 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 800a286:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a288:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a28c:	d103      	bne.n	800a296 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    {
      frequency = HSE_VALUE;
 800a28e:	4b9b      	ldr	r3, [pc, #620]	@ (800a4fc <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 800a290:	637b      	str	r3, [r7, #52]	@ 0x34
 800a292:	f000 bf0c 	b.w	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 800a296:	4b97      	ldr	r3, [pc, #604]	@ (800a4f4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a29e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a2a2:	d107      	bne.n	800a2b4 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
 800a2a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2a6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a2aa:	d103      	bne.n	800a2b4 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
    {
      frequency = HSI_VALUE;
 800a2ac:	4b93      	ldr	r3, [pc, #588]	@ (800a4fc <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 800a2ae:	637b      	str	r3, [r7, #52]	@ 0x34
 800a2b0:	f000 befd 	b.w	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 800a2b4:	2300      	movs	r3, #0
 800a2b6:	637b      	str	r3, [r7, #52]	@ 0x34
 800a2b8:	f000 bef9 	b.w	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 800a2bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a2c0:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800a2c4:	430b      	orrs	r3, r1
 800a2c6:	d158      	bne.n	800a37a <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 800a2c8:	4b8a      	ldr	r3, [pc, #552]	@ (800a4f4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800a2ca:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a2ce:	f003 0307 	and.w	r3, r3, #7
 800a2d2:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800a2d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2d6:	2b04      	cmp	r3, #4
 800a2d8:	d84b      	bhi.n	800a372 <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
 800a2da:	a201      	add	r2, pc, #4	@ (adr r2, 800a2e0 <HAL_RCCEx_GetPeriphCLKFreq+0x928>)
 800a2dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2e0:	0800a319 	.word	0x0800a319
 800a2e4:	0800a2f5 	.word	0x0800a2f5
 800a2e8:	0800a307 	.word	0x0800a307
 800a2ec:	0800a323 	.word	0x0800a323
 800a2f0:	0800a32d 	.word	0x0800a32d
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a2f4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a2f8:	4618      	mov	r0, r3
 800a2fa:	f7fe ff4f 	bl	800919c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800a2fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a300:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a302:	f000 bed4 	b.w	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a306:	f107 030c 	add.w	r3, r7, #12
 800a30a:	4618      	mov	r0, r3
 800a30c:	f7ff f9fa 	bl	8009704 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800a310:	693b      	ldr	r3, [r7, #16]
 800a312:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a314:	f000 becb 	b.w	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800a318:	f7fd ff2c 	bl	8008174 <HAL_RCC_GetHCLKFreq>
 800a31c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800a31e:	f000 bec6 	b.w	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800a322:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800a326:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a328:	f000 bec1 	b.w	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800a32c:	4b71      	ldr	r3, [pc, #452]	@ (800a4f4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	f003 0320 	and.w	r3, r3, #32
 800a334:	2b20      	cmp	r3, #32
 800a336:	d118      	bne.n	800a36a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800a338:	4b6e      	ldr	r3, [pc, #440]	@ (800a4f4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800a33a:	689b      	ldr	r3, [r3, #8]
 800a33c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a340:	2b00      	cmp	r3, #0
 800a342:	d005      	beq.n	800a350 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 800a344:	4b6b      	ldr	r3, [pc, #428]	@ (800a4f4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800a346:	689b      	ldr	r3, [r3, #8]
 800a348:	0e1b      	lsrs	r3, r3, #24
 800a34a:	f003 030f 	and.w	r3, r3, #15
 800a34e:	e006      	b.n	800a35e <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
 800a350:	4b68      	ldr	r3, [pc, #416]	@ (800a4f4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800a352:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a356:	041b      	lsls	r3, r3, #16
 800a358:	0e1b      	lsrs	r3, r3, #24
 800a35a:	f003 030f 	and.w	r3, r3, #15
 800a35e:	4a66      	ldr	r2, [pc, #408]	@ (800a4f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800a360:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a364:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800a366:	f000 bea2 	b.w	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800a36a:	2300      	movs	r3, #0
 800a36c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a36e:	f000 be9e 	b.w	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800a372:	2300      	movs	r3, #0
 800a374:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a376:	f000 be9a 	b.w	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 800a37a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a37e:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 800a382:	430b      	orrs	r3, r1
 800a384:	d167      	bne.n	800a456 <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 800a386:	4b5b      	ldr	r3, [pc, #364]	@ (800a4f4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800a388:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a38c:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800a390:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800a392:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a394:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a398:	d036      	beq.n	800a408 <HAL_RCCEx_GetPeriphCLKFreq+0xa50>
 800a39a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a39c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a3a0:	d855      	bhi.n	800a44e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800a3a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3a4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a3a8:	d029      	beq.n	800a3fe <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 800a3aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3ac:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a3b0:	d84d      	bhi.n	800a44e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800a3b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3b4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a3b8:	d013      	beq.n	800a3e2 <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
 800a3ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3bc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a3c0:	d845      	bhi.n	800a44e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800a3c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d015      	beq.n	800a3f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>
 800a3c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3ca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a3ce:	d13e      	bne.n	800a44e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a3d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a3d4:	4618      	mov	r0, r3
 800a3d6:	f7fe fee1 	bl	800919c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800a3da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3dc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a3de:	f000 be66 	b.w	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a3e2:	f107 030c 	add.w	r3, r7, #12
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	f7ff f98c 	bl	8009704 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800a3ec:	693b      	ldr	r3, [r7, #16]
 800a3ee:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a3f0:	f000 be5d 	b.w	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800a3f4:	f7fd febe 	bl	8008174 <HAL_RCC_GetHCLKFreq>
 800a3f8:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800a3fa:	f000 be58 	b.w	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800a3fe:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800a402:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a404:	f000 be53 	b.w	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800a408:	4b3a      	ldr	r3, [pc, #232]	@ (800a4f4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	f003 0320 	and.w	r3, r3, #32
 800a410:	2b20      	cmp	r3, #32
 800a412:	d118      	bne.n	800a446 <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800a414:	4b37      	ldr	r3, [pc, #220]	@ (800a4f4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800a416:	689b      	ldr	r3, [r3, #8]
 800a418:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d005      	beq.n	800a42c <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
 800a420:	4b34      	ldr	r3, [pc, #208]	@ (800a4f4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800a422:	689b      	ldr	r3, [r3, #8]
 800a424:	0e1b      	lsrs	r3, r3, #24
 800a426:	f003 030f 	and.w	r3, r3, #15
 800a42a:	e006      	b.n	800a43a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800a42c:	4b31      	ldr	r3, [pc, #196]	@ (800a4f4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800a42e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a432:	041b      	lsls	r3, r3, #16
 800a434:	0e1b      	lsrs	r3, r3, #24
 800a436:	f003 030f 	and.w	r3, r3, #15
 800a43a:	4a2f      	ldr	r2, [pc, #188]	@ (800a4f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800a43c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a440:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800a442:	f000 be34 	b.w	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800a446:	2300      	movs	r3, #0
 800a448:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a44a:	f000 be30 	b.w	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800a44e:	2300      	movs	r3, #0
 800a450:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a452:	f000 be2c 	b.w	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 800a456:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a45a:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 800a45e:	430b      	orrs	r3, r1
 800a460:	d152      	bne.n	800a508 <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800a462:	4b24      	ldr	r3, [pc, #144]	@ (800a4f4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800a464:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a468:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800a46c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800a46e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a470:	2b00      	cmp	r3, #0
 800a472:	d104      	bne.n	800a47e <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800a474:	f7fd fe98 	bl	80081a8 <HAL_RCC_GetPCLK1Freq>
 800a478:	6378      	str	r0, [r7, #52]	@ 0x34
 800a47a:	f000 be18 	b.w	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 800a47e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a480:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a484:	d104      	bne.n	800a490 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800a486:	f7fd fd73 	bl	8007f70 <HAL_RCC_GetSysClockFreq>
 800a48a:	6378      	str	r0, [r7, #52]	@ 0x34
 800a48c:	f000 be0f 	b.w	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 800a490:	4b18      	ldr	r3, [pc, #96]	@ (800a4f4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a498:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a49c:	d107      	bne.n	800a4ae <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
 800a49e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4a0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a4a4:	d103      	bne.n	800a4ae <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
    {
      frequency = HSI_VALUE;
 800a4a6:	4b15      	ldr	r3, [pc, #84]	@ (800a4fc <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 800a4a8:	637b      	str	r3, [r7, #52]	@ 0x34
 800a4aa:	f000 be00 	b.w	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 800a4ae:	4b11      	ldr	r3, [pc, #68]	@ (800a4f4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	f003 0320 	and.w	r3, r3, #32
 800a4b6:	2b20      	cmp	r3, #32
 800a4b8:	d122      	bne.n	800a500 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
 800a4ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4bc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a4c0:	d11e      	bne.n	800a500 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800a4c2:	4b0c      	ldr	r3, [pc, #48]	@ (800a4f4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800a4c4:	689b      	ldr	r3, [r3, #8]
 800a4c6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d005      	beq.n	800a4da <HAL_RCCEx_GetPeriphCLKFreq+0xb22>
 800a4ce:	4b09      	ldr	r3, [pc, #36]	@ (800a4f4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800a4d0:	689b      	ldr	r3, [r3, #8]
 800a4d2:	0e1b      	lsrs	r3, r3, #24
 800a4d4:	f003 030f 	and.w	r3, r3, #15
 800a4d8:	e006      	b.n	800a4e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb30>
 800a4da:	4b06      	ldr	r3, [pc, #24]	@ (800a4f4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800a4dc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a4e0:	041b      	lsls	r3, r3, #16
 800a4e2:	0e1b      	lsrs	r3, r3, #24
 800a4e4:	f003 030f 	and.w	r3, r3, #15
 800a4e8:	4a03      	ldr	r2, [pc, #12]	@ (800a4f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800a4ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a4ee:	637b      	str	r3, [r7, #52]	@ 0x34
 800a4f0:	f000 bddd 	b.w	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800a4f4:	46020c00 	.word	0x46020c00
 800a4f8:	08011c68 	.word	0x08011c68
 800a4fc:	00f42400 	.word	0x00f42400
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 800a500:	2300      	movs	r3, #0
 800a502:	637b      	str	r3, [r7, #52]	@ 0x34
 800a504:	f000 bdd3 	b.w	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 800a508:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a50c:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 800a510:	430b      	orrs	r3, r1
 800a512:	d14c      	bne.n	800a5ae <HAL_RCCEx_GetPeriphCLKFreq+0xbf6>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800a514:	4ba8      	ldr	r3, [pc, #672]	@ (800a7b8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800a516:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a51a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800a51e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 800a520:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a522:	2b00      	cmp	r3, #0
 800a524:	d104      	bne.n	800a530 <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800a526:	f7fd fe3f 	bl	80081a8 <HAL_RCC_GetPCLK1Freq>
 800a52a:	6378      	str	r0, [r7, #52]	@ 0x34
 800a52c:	f000 bdbf 	b.w	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 800a530:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a532:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a536:	d104      	bne.n	800a542 <HAL_RCCEx_GetPeriphCLKFreq+0xb8a>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800a538:	f7fd fd1a 	bl	8007f70 <HAL_RCC_GetSysClockFreq>
 800a53c:	6378      	str	r0, [r7, #52]	@ 0x34
 800a53e:	f000 bdb6 	b.w	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 800a542:	4b9d      	ldr	r3, [pc, #628]	@ (800a7b8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a54a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a54e:	d107      	bne.n	800a560 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
 800a550:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a552:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a556:	d103      	bne.n	800a560 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
    {
      frequency = HSI_VALUE;
 800a558:	4b98      	ldr	r3, [pc, #608]	@ (800a7bc <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800a55a:	637b      	str	r3, [r7, #52]	@ 0x34
 800a55c:	f000 bda7 	b.w	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 800a560:	4b95      	ldr	r3, [pc, #596]	@ (800a7b8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	f003 0320 	and.w	r3, r3, #32
 800a568:	2b20      	cmp	r3, #32
 800a56a:	d11c      	bne.n	800a5a6 <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
 800a56c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a56e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a572:	d118      	bne.n	800a5a6 <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800a574:	4b90      	ldr	r3, [pc, #576]	@ (800a7b8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800a576:	689b      	ldr	r3, [r3, #8]
 800a578:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d005      	beq.n	800a58c <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 800a580:	4b8d      	ldr	r3, [pc, #564]	@ (800a7b8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800a582:	689b      	ldr	r3, [r3, #8]
 800a584:	0e1b      	lsrs	r3, r3, #24
 800a586:	f003 030f 	and.w	r3, r3, #15
 800a58a:	e006      	b.n	800a59a <HAL_RCCEx_GetPeriphCLKFreq+0xbe2>
 800a58c:	4b8a      	ldr	r3, [pc, #552]	@ (800a7b8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800a58e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a592:	041b      	lsls	r3, r3, #16
 800a594:	0e1b      	lsrs	r3, r3, #24
 800a596:	f003 030f 	and.w	r3, r3, #15
 800a59a:	4a89      	ldr	r2, [pc, #548]	@ (800a7c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800a59c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a5a0:	637b      	str	r3, [r7, #52]	@ 0x34
 800a5a2:	f000 bd84 	b.w	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 800a5a6:	2300      	movs	r3, #0
 800a5a8:	637b      	str	r3, [r7, #52]	@ 0x34
 800a5aa:	f000 bd80 	b.w	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 800a5ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a5b2:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800a5b6:	430b      	orrs	r3, r1
 800a5b8:	d158      	bne.n	800a66c <HAL_RCCEx_GetPeriphCLKFreq+0xcb4>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800a5ba:	4b7f      	ldr	r3, [pc, #508]	@ (800a7b8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800a5bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a5c0:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800a5c4:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800a5c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5c8:	2bc0      	cmp	r3, #192	@ 0xc0
 800a5ca:	d028      	beq.n	800a61e <HAL_RCCEx_GetPeriphCLKFreq+0xc66>
 800a5cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5ce:	2bc0      	cmp	r3, #192	@ 0xc0
 800a5d0:	d848      	bhi.n	800a664 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 800a5d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5d4:	2b80      	cmp	r3, #128	@ 0x80
 800a5d6:	d00e      	beq.n	800a5f6 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 800a5d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5da:	2b80      	cmp	r3, #128	@ 0x80
 800a5dc:	d842      	bhi.n	800a664 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 800a5de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d003      	beq.n	800a5ec <HAL_RCCEx_GetPeriphCLKFreq+0xc34>
 800a5e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5e6:	2b40      	cmp	r3, #64	@ 0x40
 800a5e8:	d014      	beq.n	800a614 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 800a5ea:	e03b      	b.n	800a664 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 800a5ec:	f7fd fe04 	bl	80081f8 <HAL_RCC_GetPCLK3Freq>
 800a5f0:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800a5f2:	f000 bd5c 	b.w	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a5f6:	4b70      	ldr	r3, [pc, #448]	@ (800a7b8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a5fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a602:	d103      	bne.n	800a60c <HAL_RCCEx_GetPeriphCLKFreq+0xc54>
        {
          frequency = HSI_VALUE;
 800a604:	4b6d      	ldr	r3, [pc, #436]	@ (800a7bc <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800a606:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800a608:	f000 bd51 	b.w	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800a60c:	2300      	movs	r3, #0
 800a60e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a610:	f000 bd4d 	b.w	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 800a614:	f7fd fcac 	bl	8007f70 <HAL_RCC_GetSysClockFreq>
 800a618:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800a61a:	f000 bd48 	b.w	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800a61e:	4b66      	ldr	r3, [pc, #408]	@ (800a7b8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	f003 0320 	and.w	r3, r3, #32
 800a626:	2b20      	cmp	r3, #32
 800a628:	d118      	bne.n	800a65c <HAL_RCCEx_GetPeriphCLKFreq+0xca4>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800a62a:	4b63      	ldr	r3, [pc, #396]	@ (800a7b8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800a62c:	689b      	ldr	r3, [r3, #8]
 800a62e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a632:	2b00      	cmp	r3, #0
 800a634:	d005      	beq.n	800a642 <HAL_RCCEx_GetPeriphCLKFreq+0xc8a>
 800a636:	4b60      	ldr	r3, [pc, #384]	@ (800a7b8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800a638:	689b      	ldr	r3, [r3, #8]
 800a63a:	0e1b      	lsrs	r3, r3, #24
 800a63c:	f003 030f 	and.w	r3, r3, #15
 800a640:	e006      	b.n	800a650 <HAL_RCCEx_GetPeriphCLKFreq+0xc98>
 800a642:	4b5d      	ldr	r3, [pc, #372]	@ (800a7b8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800a644:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a648:	041b      	lsls	r3, r3, #16
 800a64a:	0e1b      	lsrs	r3, r3, #24
 800a64c:	f003 030f 	and.w	r3, r3, #15
 800a650:	4a5b      	ldr	r2, [pc, #364]	@ (800a7c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800a652:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a656:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800a658:	f000 bd29 	b.w	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800a65c:	2300      	movs	r3, #0
 800a65e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a660:	f000 bd25 	b.w	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      default:
      {
        frequency = 0U;
 800a664:	2300      	movs	r3, #0
 800a666:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a668:	f000 bd21 	b.w	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 800a66c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a670:	f5a2 0180 	sub.w	r1, r2, #4194304	@ 0x400000
 800a674:	430b      	orrs	r3, r1
 800a676:	d14c      	bne.n	800a712 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800a678:	4b4f      	ldr	r3, [pc, #316]	@ (800a7b8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800a67a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a67e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800a682:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 800a684:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a686:	2b00      	cmp	r3, #0
 800a688:	d104      	bne.n	800a694 <HAL_RCCEx_GetPeriphCLKFreq+0xcdc>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800a68a:	f7fd fd8d 	bl	80081a8 <HAL_RCC_GetPCLK1Freq>
 800a68e:	6378      	str	r0, [r7, #52]	@ 0x34
 800a690:	f000 bd0d 	b.w	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 800a694:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a696:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a69a:	d104      	bne.n	800a6a6 <HAL_RCCEx_GetPeriphCLKFreq+0xcee>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800a69c:	f7fd fc68 	bl	8007f70 <HAL_RCC_GetSysClockFreq>
 800a6a0:	6378      	str	r0, [r7, #52]	@ 0x34
 800a6a2:	f000 bd04 	b.w	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 800a6a6:	4b44      	ldr	r3, [pc, #272]	@ (800a7b8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a6ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a6b2:	d107      	bne.n	800a6c4 <HAL_RCCEx_GetPeriphCLKFreq+0xd0c>
 800a6b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6b6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a6ba:	d103      	bne.n	800a6c4 <HAL_RCCEx_GetPeriphCLKFreq+0xd0c>
    {
      frequency = HSI_VALUE;
 800a6bc:	4b3f      	ldr	r3, [pc, #252]	@ (800a7bc <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800a6be:	637b      	str	r3, [r7, #52]	@ 0x34
 800a6c0:	f000 bcf5 	b.w	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 800a6c4:	4b3c      	ldr	r3, [pc, #240]	@ (800a7b8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	f003 0320 	and.w	r3, r3, #32
 800a6cc:	2b20      	cmp	r3, #32
 800a6ce:	d11c      	bne.n	800a70a <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
 800a6d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6d2:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800a6d6:	d118      	bne.n	800a70a <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800a6d8:	4b37      	ldr	r3, [pc, #220]	@ (800a7b8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800a6da:	689b      	ldr	r3, [r3, #8]
 800a6dc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d005      	beq.n	800a6f0 <HAL_RCCEx_GetPeriphCLKFreq+0xd38>
 800a6e4:	4b34      	ldr	r3, [pc, #208]	@ (800a7b8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800a6e6:	689b      	ldr	r3, [r3, #8]
 800a6e8:	0e1b      	lsrs	r3, r3, #24
 800a6ea:	f003 030f 	and.w	r3, r3, #15
 800a6ee:	e006      	b.n	800a6fe <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 800a6f0:	4b31      	ldr	r3, [pc, #196]	@ (800a7b8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800a6f2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a6f6:	041b      	lsls	r3, r3, #16
 800a6f8:	0e1b      	lsrs	r3, r3, #24
 800a6fa:	f003 030f 	and.w	r3, r3, #15
 800a6fe:	4a30      	ldr	r2, [pc, #192]	@ (800a7c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800a700:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a704:	637b      	str	r3, [r7, #52]	@ 0x34
 800a706:	f000 bcd2 	b.w	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 800a70a:	2300      	movs	r3, #0
 800a70c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a70e:	f000 bcce 	b.w	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined (I2C5)
  else if (PeriphClk == RCC_PERIPHCLK_I2C5)
 800a712:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a716:	f102 4140 	add.w	r1, r2, #3221225472	@ 0xc0000000
 800a71a:	430b      	orrs	r3, r1
 800a71c:	d152      	bne.n	800a7c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0c>
  {
    /* Get the current I2C5 source */
    srcclk = __HAL_RCC_GET_I2C5_SOURCE();
 800a71e:	4b26      	ldr	r3, [pc, #152]	@ (800a7b8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800a720:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a724:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 800a728:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C5CLKSOURCE_PCLK1)
 800a72a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d104      	bne.n	800a73a <HAL_RCCEx_GetPeriphCLKFreq+0xd82>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800a730:	f7fd fd3a 	bl	80081a8 <HAL_RCC_GetPCLK1Freq>
 800a734:	6378      	str	r0, [r7, #52]	@ 0x34
 800a736:	f000 bcba 	b.w	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C5CLKSOURCE_SYSCLK)
 800a73a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a73c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a740:	d104      	bne.n	800a74c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800a742:	f7fd fc15 	bl	8007f70 <HAL_RCC_GetSysClockFreq>
 800a746:	6378      	str	r0, [r7, #52]	@ 0x34
 800a748:	f000 bcb1 	b.w	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C5CLKSOURCE_HSI))
 800a74c:	4b1a      	ldr	r3, [pc, #104]	@ (800a7b8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a754:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a758:	d107      	bne.n	800a76a <HAL_RCCEx_GetPeriphCLKFreq+0xdb2>
 800a75a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a75c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a760:	d103      	bne.n	800a76a <HAL_RCCEx_GetPeriphCLKFreq+0xdb2>
    {
      frequency = HSI_VALUE;
 800a762:	4b16      	ldr	r3, [pc, #88]	@ (800a7bc <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800a764:	637b      	str	r3, [r7, #52]	@ 0x34
 800a766:	f000 bca2 	b.w	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C5CLKSOURCE_MSIK))
 800a76a:	4b13      	ldr	r3, [pc, #76]	@ (800a7b8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	f003 0320 	and.w	r3, r3, #32
 800a772:	2b20      	cmp	r3, #32
 800a774:	d11c      	bne.n	800a7b0 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 800a776:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a778:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a77c:	d118      	bne.n	800a7b0 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800a77e:	4b0e      	ldr	r3, [pc, #56]	@ (800a7b8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800a780:	689b      	ldr	r3, [r3, #8]
 800a782:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a786:	2b00      	cmp	r3, #0
 800a788:	d005      	beq.n	800a796 <HAL_RCCEx_GetPeriphCLKFreq+0xdde>
 800a78a:	4b0b      	ldr	r3, [pc, #44]	@ (800a7b8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800a78c:	689b      	ldr	r3, [r3, #8]
 800a78e:	0e1b      	lsrs	r3, r3, #24
 800a790:	f003 030f 	and.w	r3, r3, #15
 800a794:	e006      	b.n	800a7a4 <HAL_RCCEx_GetPeriphCLKFreq+0xdec>
 800a796:	4b08      	ldr	r3, [pc, #32]	@ (800a7b8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800a798:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a79c:	041b      	lsls	r3, r3, #16
 800a79e:	0e1b      	lsrs	r3, r3, #24
 800a7a0:	f003 030f 	and.w	r3, r3, #15
 800a7a4:	4a06      	ldr	r2, [pc, #24]	@ (800a7c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800a7a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a7aa:	637b      	str	r3, [r7, #52]	@ 0x34
 800a7ac:	f000 bc7f 	b.w	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C5 */
    else
    {
      frequency = 0U;
 800a7b0:	2300      	movs	r3, #0
 800a7b2:	637b      	str	r3, [r7, #52]	@ 0x34
 800a7b4:	f000 bc7b 	b.w	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800a7b8:	46020c00 	.word	0x46020c00
 800a7bc:	00f42400 	.word	0x00f42400
 800a7c0:	08011c68 	.word	0x08011c68
    }
  }
#endif /* I2C5 */
#if defined (I2C6)
  else if (PeriphClk == RCC_PERIPHCLK_I2C6)
 800a7c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a7c8:	f102 4100 	add.w	r1, r2, #2147483648	@ 0x80000000
 800a7cc:	430b      	orrs	r3, r1
 800a7ce:	d14c      	bne.n	800a86a <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
  {
    /* Get the current I2C6 source */
    srcclk = __HAL_RCC_GET_I2C6_SOURCE();
 800a7d0:	4ba6      	ldr	r3, [pc, #664]	@ (800aa6c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800a7d2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a7d6:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800a7da:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C6CLKSOURCE_PCLK1)
 800a7dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d104      	bne.n	800a7ec <HAL_RCCEx_GetPeriphCLKFreq+0xe34>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800a7e2:	f7fd fce1 	bl	80081a8 <HAL_RCC_GetPCLK1Freq>
 800a7e6:	6378      	str	r0, [r7, #52]	@ 0x34
 800a7e8:	f000 bc61 	b.w	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C6CLKSOURCE_SYSCLK)
 800a7ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7ee:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a7f2:	d104      	bne.n	800a7fe <HAL_RCCEx_GetPeriphCLKFreq+0xe46>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800a7f4:	f7fd fbbc 	bl	8007f70 <HAL_RCC_GetSysClockFreq>
 800a7f8:	6378      	str	r0, [r7, #52]	@ 0x34
 800a7fa:	f000 bc58 	b.w	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C6CLKSOURCE_HSI))
 800a7fe:	4b9b      	ldr	r3, [pc, #620]	@ (800aa6c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a806:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a80a:	d107      	bne.n	800a81c <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800a80c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a80e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a812:	d103      	bne.n	800a81c <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
    {
      frequency = HSI_VALUE;
 800a814:	4b96      	ldr	r3, [pc, #600]	@ (800aa70 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 800a816:	637b      	str	r3, [r7, #52]	@ 0x34
 800a818:	f000 bc49 	b.w	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C6CLKSOURCE_MSIK))
 800a81c:	4b93      	ldr	r3, [pc, #588]	@ (800aa6c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	f003 0320 	and.w	r3, r3, #32
 800a824:	2b20      	cmp	r3, #32
 800a826:	d11c      	bne.n	800a862 <HAL_RCCEx_GetPeriphCLKFreq+0xeaa>
 800a828:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a82a:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800a82e:	d118      	bne.n	800a862 <HAL_RCCEx_GetPeriphCLKFreq+0xeaa>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800a830:	4b8e      	ldr	r3, [pc, #568]	@ (800aa6c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800a832:	689b      	ldr	r3, [r3, #8]
 800a834:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d005      	beq.n	800a848 <HAL_RCCEx_GetPeriphCLKFreq+0xe90>
 800a83c:	4b8b      	ldr	r3, [pc, #556]	@ (800aa6c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800a83e:	689b      	ldr	r3, [r3, #8]
 800a840:	0e1b      	lsrs	r3, r3, #24
 800a842:	f003 030f 	and.w	r3, r3, #15
 800a846:	e006      	b.n	800a856 <HAL_RCCEx_GetPeriphCLKFreq+0xe9e>
 800a848:	4b88      	ldr	r3, [pc, #544]	@ (800aa6c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800a84a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a84e:	041b      	lsls	r3, r3, #16
 800a850:	0e1b      	lsrs	r3, r3, #24
 800a852:	f003 030f 	and.w	r3, r3, #15
 800a856:	4a87      	ldr	r2, [pc, #540]	@ (800aa74 <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 800a858:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a85c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a85e:	f000 bc26 	b.w	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C6 */
    else
    {
      frequency = 0U;
 800a862:	2300      	movs	r3, #0
 800a864:	637b      	str	r3, [r7, #52]	@ 0x34
 800a866:	f000 bc22 	b.w	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 800a86a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a86e:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800a872:	430b      	orrs	r3, r1
 800a874:	d164      	bne.n	800a940 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 800a876:	4b7d      	ldr	r3, [pc, #500]	@ (800aa6c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800a878:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a87c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a880:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 800a882:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a884:	2b00      	cmp	r3, #0
 800a886:	d120      	bne.n	800a8ca <HAL_RCCEx_GetPeriphCLKFreq+0xf12>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800a888:	4b78      	ldr	r3, [pc, #480]	@ (800aa6c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	f003 0320 	and.w	r3, r3, #32
 800a890:	2b20      	cmp	r3, #32
 800a892:	d117      	bne.n	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0xf0c>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800a894:	4b75      	ldr	r3, [pc, #468]	@ (800aa6c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800a896:	689b      	ldr	r3, [r3, #8]
 800a898:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d005      	beq.n	800a8ac <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
 800a8a0:	4b72      	ldr	r3, [pc, #456]	@ (800aa6c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800a8a2:	689b      	ldr	r3, [r3, #8]
 800a8a4:	0e1b      	lsrs	r3, r3, #24
 800a8a6:	f003 030f 	and.w	r3, r3, #15
 800a8aa:	e006      	b.n	800a8ba <HAL_RCCEx_GetPeriphCLKFreq+0xf02>
 800a8ac:	4b6f      	ldr	r3, [pc, #444]	@ (800aa6c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800a8ae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a8b2:	041b      	lsls	r3, r3, #16
 800a8b4:	0e1b      	lsrs	r3, r3, #24
 800a8b6:	f003 030f 	and.w	r3, r3, #15
 800a8ba:	4a6e      	ldr	r2, [pc, #440]	@ (800aa74 <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 800a8bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a8c0:	637b      	str	r3, [r7, #52]	@ 0x34
 800a8c2:	e3f4      	b.n	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = 0U;
 800a8c4:	2300      	movs	r3, #0
 800a8c6:	637b      	str	r3, [r7, #52]	@ 0x34
 800a8c8:	e3f1      	b.n	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 800a8ca:	4b68      	ldr	r3, [pc, #416]	@ (800aa6c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800a8cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a8d0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a8d4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a8d8:	d112      	bne.n	800a900 <HAL_RCCEx_GetPeriphCLKFreq+0xf48>
 800a8da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a8e0:	d10e      	bne.n	800a900 <HAL_RCCEx_GetPeriphCLKFreq+0xf48>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800a8e2:	4b62      	ldr	r3, [pc, #392]	@ (800aa6c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800a8e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a8e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a8ec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a8f0:	d102      	bne.n	800a8f8 <HAL_RCCEx_GetPeriphCLKFreq+0xf40>
      {
        frequency = LSI_VALUE / 128U;
 800a8f2:	23fa      	movs	r3, #250	@ 0xfa
 800a8f4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800a8f6:	e3da      	b.n	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800a8f8:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800a8fc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800a8fe:	e3d6      	b.n	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 800a900:	4b5a      	ldr	r3, [pc, #360]	@ (800aa6c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a908:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a90c:	d106      	bne.n	800a91c <HAL_RCCEx_GetPeriphCLKFreq+0xf64>
 800a90e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a910:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a914:	d102      	bne.n	800a91c <HAL_RCCEx_GetPeriphCLKFreq+0xf64>
    {
      frequency = HSI_VALUE;
 800a916:	4b56      	ldr	r3, [pc, #344]	@ (800aa70 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 800a918:	637b      	str	r3, [r7, #52]	@ 0x34
 800a91a:	e3c8      	b.n	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 800a91c:	4b53      	ldr	r3, [pc, #332]	@ (800aa6c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800a91e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a922:	f003 0302 	and.w	r3, r3, #2
 800a926:	2b02      	cmp	r3, #2
 800a928:	d107      	bne.n	800a93a <HAL_RCCEx_GetPeriphCLKFreq+0xf82>
 800a92a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a92c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a930:	d103      	bne.n	800a93a <HAL_RCCEx_GetPeriphCLKFreq+0xf82>
    {
      frequency = LSE_VALUE;
 800a932:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a936:	637b      	str	r3, [r7, #52]	@ 0x34
 800a938:	e3b9      	b.n	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 800a93a:	2300      	movs	r3, #0
 800a93c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a93e:	e3b6      	b.n	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 800a940:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a944:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 800a948:	430b      	orrs	r3, r1
 800a94a:	d164      	bne.n	800aa16 <HAL_RCCEx_GetPeriphCLKFreq+0x105e>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800a94c:	4b47      	ldr	r3, [pc, #284]	@ (800aa6c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800a94e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a952:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800a956:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 800a958:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d120      	bne.n	800a9a0 <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800a95e:	4b43      	ldr	r3, [pc, #268]	@ (800aa6c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	f003 0320 	and.w	r3, r3, #32
 800a966:	2b20      	cmp	r3, #32
 800a968:	d117      	bne.n	800a99a <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800a96a:	4b40      	ldr	r3, [pc, #256]	@ (800aa6c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800a96c:	689b      	ldr	r3, [r3, #8]
 800a96e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a972:	2b00      	cmp	r3, #0
 800a974:	d005      	beq.n	800a982 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
 800a976:	4b3d      	ldr	r3, [pc, #244]	@ (800aa6c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800a978:	689b      	ldr	r3, [r3, #8]
 800a97a:	0e1b      	lsrs	r3, r3, #24
 800a97c:	f003 030f 	and.w	r3, r3, #15
 800a980:	e006      	b.n	800a990 <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>
 800a982:	4b3a      	ldr	r3, [pc, #232]	@ (800aa6c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800a984:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a988:	041b      	lsls	r3, r3, #16
 800a98a:	0e1b      	lsrs	r3, r3, #24
 800a98c:	f003 030f 	and.w	r3, r3, #15
 800a990:	4a38      	ldr	r2, [pc, #224]	@ (800aa74 <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 800a992:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a996:	637b      	str	r3, [r7, #52]	@ 0x34
 800a998:	e389      	b.n	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = 0U;
 800a99a:	2300      	movs	r3, #0
 800a99c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a99e:	e386      	b.n	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 800a9a0:	4b32      	ldr	r3, [pc, #200]	@ (800aa6c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800a9a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a9a6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a9aa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a9ae:	d112      	bne.n	800a9d6 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
 800a9b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a9b6:	d10e      	bne.n	800a9d6 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800a9b8:	4b2c      	ldr	r3, [pc, #176]	@ (800aa6c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800a9ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a9be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a9c2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a9c6:	d102      	bne.n	800a9ce <HAL_RCCEx_GetPeriphCLKFreq+0x1016>
      {
        frequency = LSI_VALUE / 128U;
 800a9c8:	23fa      	movs	r3, #250	@ 0xfa
 800a9ca:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800a9cc:	e36f      	b.n	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800a9ce:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800a9d2:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800a9d4:	e36b      	b.n	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 800a9d6:	4b25      	ldr	r3, [pc, #148]	@ (800aa6c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a9de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a9e2:	d106      	bne.n	800a9f2 <HAL_RCCEx_GetPeriphCLKFreq+0x103a>
 800a9e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9e6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a9ea:	d102      	bne.n	800a9f2 <HAL_RCCEx_GetPeriphCLKFreq+0x103a>
    {
      frequency = HSI_VALUE;
 800a9ec:	4b20      	ldr	r3, [pc, #128]	@ (800aa70 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 800a9ee:	637b      	str	r3, [r7, #52]	@ 0x34
 800a9f0:	e35d      	b.n	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 800a9f2:	4b1e      	ldr	r3, [pc, #120]	@ (800aa6c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800a9f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a9f8:	f003 0302 	and.w	r3, r3, #2
 800a9fc:	2b02      	cmp	r3, #2
 800a9fe:	d107      	bne.n	800aa10 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>
 800aa00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa02:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800aa06:	d103      	bne.n	800aa10 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>
    {
      frequency = LSE_VALUE;
 800aa08:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800aa0c:	637b      	str	r3, [r7, #52]	@ 0x34
 800aa0e:	e34e      	b.n	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 800aa10:	2300      	movs	r3, #0
 800aa12:	637b      	str	r3, [r7, #52]	@ 0x34
 800aa14:	e34b      	b.n	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 800aa16:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aa1a:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800aa1e:	430b      	orrs	r3, r1
 800aa20:	d14e      	bne.n	800aac0 <HAL_RCCEx_GetPeriphCLKFreq+0x1108>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800aa22:	4b12      	ldr	r3, [pc, #72]	@ (800aa6c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800aa24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800aa28:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800aa2c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 800aa2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d103      	bne.n	800aa3c <HAL_RCCEx_GetPeriphCLKFreq+0x1084>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800aa34:	f7fd fbb8 	bl	80081a8 <HAL_RCC_GetPCLK1Freq>
 800aa38:	6378      	str	r0, [r7, #52]	@ 0x34
 800aa3a:	e338      	b.n	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 800aa3c:	4b0b      	ldr	r3, [pc, #44]	@ (800aa6c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800aa3e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800aa42:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800aa46:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800aa4a:	d119      	bne.n	800aa80 <HAL_RCCEx_GetPeriphCLKFreq+0x10c8>
 800aa4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa4e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800aa52:	d115      	bne.n	800aa80 <HAL_RCCEx_GetPeriphCLKFreq+0x10c8>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800aa54:	4b05      	ldr	r3, [pc, #20]	@ (800aa6c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800aa56:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800aa5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800aa5e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800aa62:	d109      	bne.n	800aa78 <HAL_RCCEx_GetPeriphCLKFreq+0x10c0>
      {
        frequency = LSI_VALUE / 128U;
 800aa64:	23fa      	movs	r3, #250	@ 0xfa
 800aa66:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800aa68:	e321      	b.n	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800aa6a:	bf00      	nop
 800aa6c:	46020c00 	.word	0x46020c00
 800aa70:	00f42400 	.word	0x00f42400
 800aa74:	08011c68 	.word	0x08011c68
      }
      else
      {
        frequency = LSI_VALUE;
 800aa78:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800aa7c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800aa7e:	e316      	b.n	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 800aa80:	4ba8      	ldr	r3, [pc, #672]	@ (800ad24 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800aa88:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800aa8c:	d106      	bne.n	800aa9c <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>
 800aa8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa90:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800aa94:	d102      	bne.n	800aa9c <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>
    {
      frequency = HSI_VALUE;
 800aa96:	4ba4      	ldr	r3, [pc, #656]	@ (800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800aa98:	637b      	str	r3, [r7, #52]	@ 0x34
 800aa9a:	e308      	b.n	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 800aa9c:	4ba1      	ldr	r3, [pc, #644]	@ (800ad24 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800aa9e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800aaa2:	f003 0302 	and.w	r3, r3, #2
 800aaa6:	2b02      	cmp	r3, #2
 800aaa8:	d107      	bne.n	800aaba <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
 800aaaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aaac:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800aab0:	d103      	bne.n	800aaba <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
    {
      frequency = LSE_VALUE;
 800aab2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800aab6:	637b      	str	r3, [r7, #52]	@ 0x34
 800aab8:	e2f9      	b.n	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 800aaba:	2300      	movs	r3, #0
 800aabc:	637b      	str	r3, [r7, #52]	@ 0x34
 800aabe:	e2f6      	b.n	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 800aac0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aac4:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 800aac8:	430b      	orrs	r3, r1
 800aaca:	d12d      	bne.n	800ab28 <HAL_RCCEx_GetPeriphCLKFreq+0x1170>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 800aacc:	4b95      	ldr	r3, [pc, #596]	@ (800ad24 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800aace:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800aad2:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 800aad6:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 800aad8:	4b92      	ldr	r3, [pc, #584]	@ (800ad24 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800aae0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aae4:	d105      	bne.n	800aaf2 <HAL_RCCEx_GetPeriphCLKFreq+0x113a>
 800aae6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d102      	bne.n	800aaf2 <HAL_RCCEx_GetPeriphCLKFreq+0x113a>
    {
      frequency = HSE_VALUE;
 800aaec:	4b8e      	ldr	r3, [pc, #568]	@ (800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800aaee:	637b      	str	r3, [r7, #52]	@ 0x34
 800aaf0:	e2dd      	b.n	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 800aaf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aaf4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800aaf8:	d107      	bne.n	800ab0a <HAL_RCCEx_GetPeriphCLKFreq+0x1152>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800aafa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800aafe:	4618      	mov	r0, r3
 800ab00:	f7fe fb4c 	bl	800919c <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 800ab04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab06:	637b      	str	r3, [r7, #52]	@ 0x34
 800ab08:	e2d1      	b.n	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 800ab0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab0c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ab10:	d107      	bne.n	800ab22 <HAL_RCCEx_GetPeriphCLKFreq+0x116a>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ab12:	f107 0318 	add.w	r3, r7, #24
 800ab16:	4618      	mov	r0, r3
 800ab18:	f7fe fc9a 	bl	8009450 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 800ab1c:	69bb      	ldr	r3, [r7, #24]
 800ab1e:	637b      	str	r3, [r7, #52]	@ 0x34
 800ab20:	e2c5      	b.n	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 800ab22:	2300      	movs	r3, #0
 800ab24:	637b      	str	r3, [r7, #52]	@ 0x34
 800ab26:	e2c2      	b.n	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 800ab28:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ab2c:	f5a2 0100 	sub.w	r1, r2, #8388608	@ 0x800000
 800ab30:	430b      	orrs	r3, r1
 800ab32:	d156      	bne.n	800abe2 <HAL_RCCEx_GetPeriphCLKFreq+0x122a>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 800ab34:	4b7b      	ldr	r3, [pc, #492]	@ (800ad24 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800ab36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ab3a:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800ab3e:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800ab40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab42:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800ab46:	d028      	beq.n	800ab9a <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 800ab48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab4a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800ab4e:	d845      	bhi.n	800abdc <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
 800ab50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab52:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ab56:	d013      	beq.n	800ab80 <HAL_RCCEx_GetPeriphCLKFreq+0x11c8>
 800ab58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab5a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ab5e:	d83d      	bhi.n	800abdc <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
 800ab60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d004      	beq.n	800ab70 <HAL_RCCEx_GetPeriphCLKFreq+0x11b8>
 800ab66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab68:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ab6c:	d004      	beq.n	800ab78 <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
 800ab6e:	e035      	b.n	800abdc <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 800ab70:	f7fd fb2e 	bl	80081d0 <HAL_RCC_GetPCLK2Freq>
 800ab74:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800ab76:	e29a      	b.n	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800ab78:	f7fd f9fa 	bl	8007f70 <HAL_RCC_GetSysClockFreq>
 800ab7c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800ab7e:	e296      	b.n	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ab80:	4b68      	ldr	r3, [pc, #416]	@ (800ad24 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ab88:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ab8c:	d102      	bne.n	800ab94 <HAL_RCCEx_GetPeriphCLKFreq+0x11dc>
        {
          frequency = HSI_VALUE;
 800ab8e:	4b66      	ldr	r3, [pc, #408]	@ (800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800ab90:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800ab92:	e28c      	b.n	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800ab94:	2300      	movs	r3, #0
 800ab96:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ab98:	e289      	b.n	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800ab9a:	4b62      	ldr	r3, [pc, #392]	@ (800ad24 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	f003 0320 	and.w	r3, r3, #32
 800aba2:	2b20      	cmp	r3, #32
 800aba4:	d117      	bne.n	800abd6 <HAL_RCCEx_GetPeriphCLKFreq+0x121e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800aba6:	4b5f      	ldr	r3, [pc, #380]	@ (800ad24 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800aba8:	689b      	ldr	r3, [r3, #8]
 800abaa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d005      	beq.n	800abbe <HAL_RCCEx_GetPeriphCLKFreq+0x1206>
 800abb2:	4b5c      	ldr	r3, [pc, #368]	@ (800ad24 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800abb4:	689b      	ldr	r3, [r3, #8]
 800abb6:	0e1b      	lsrs	r3, r3, #24
 800abb8:	f003 030f 	and.w	r3, r3, #15
 800abbc:	e006      	b.n	800abcc <HAL_RCCEx_GetPeriphCLKFreq+0x1214>
 800abbe:	4b59      	ldr	r3, [pc, #356]	@ (800ad24 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800abc0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800abc4:	041b      	lsls	r3, r3, #16
 800abc6:	0e1b      	lsrs	r3, r3, #24
 800abc8:	f003 030f 	and.w	r3, r3, #15
 800abcc:	4a57      	ldr	r2, [pc, #348]	@ (800ad2c <HAL_RCCEx_GetPeriphCLKFreq+0x1374>)
 800abce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800abd2:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800abd4:	e26b      	b.n	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800abd6:	2300      	movs	r3, #0
 800abd8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800abda:	e268      	b.n	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800abdc:	2300      	movs	r3, #0
 800abde:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800abe0:	e265      	b.n	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 800abe2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800abe6:	f102 417f 	add.w	r1, r2, #4278190080	@ 0xff000000
 800abea:	430b      	orrs	r3, r1
 800abec:	d156      	bne.n	800ac9c <HAL_RCCEx_GetPeriphCLKFreq+0x12e4>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 800abee:	4b4d      	ldr	r3, [pc, #308]	@ (800ad24 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800abf0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800abf4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800abf8:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800abfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abfc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800ac00:	d028      	beq.n	800ac54 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>
 800ac02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac04:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800ac08:	d845      	bhi.n	800ac96 <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
 800ac0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac0c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ac10:	d013      	beq.n	800ac3a <HAL_RCCEx_GetPeriphCLKFreq+0x1282>
 800ac12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac14:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ac18:	d83d      	bhi.n	800ac96 <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
 800ac1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d004      	beq.n	800ac2a <HAL_RCCEx_GetPeriphCLKFreq+0x1272>
 800ac20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac22:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ac26:	d004      	beq.n	800ac32 <HAL_RCCEx_GetPeriphCLKFreq+0x127a>
 800ac28:	e035      	b.n	800ac96 <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 800ac2a:	f7fd fabd 	bl	80081a8 <HAL_RCC_GetPCLK1Freq>
 800ac2e:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800ac30:	e23d      	b.n	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800ac32:	f7fd f99d 	bl	8007f70 <HAL_RCC_GetSysClockFreq>
 800ac36:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800ac38:	e239      	b.n	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ac3a:	4b3a      	ldr	r3, [pc, #232]	@ (800ad24 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ac42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ac46:	d102      	bne.n	800ac4e <HAL_RCCEx_GetPeriphCLKFreq+0x1296>
        {
          frequency = HSI_VALUE;
 800ac48:	4b37      	ldr	r3, [pc, #220]	@ (800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800ac4a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800ac4c:	e22f      	b.n	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800ac4e:	2300      	movs	r3, #0
 800ac50:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ac52:	e22c      	b.n	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800ac54:	4b33      	ldr	r3, [pc, #204]	@ (800ad24 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	f003 0320 	and.w	r3, r3, #32
 800ac5c:	2b20      	cmp	r3, #32
 800ac5e:	d117      	bne.n	800ac90 <HAL_RCCEx_GetPeriphCLKFreq+0x12d8>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800ac60:	4b30      	ldr	r3, [pc, #192]	@ (800ad24 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800ac62:	689b      	ldr	r3, [r3, #8]
 800ac64:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d005      	beq.n	800ac78 <HAL_RCCEx_GetPeriphCLKFreq+0x12c0>
 800ac6c:	4b2d      	ldr	r3, [pc, #180]	@ (800ad24 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800ac6e:	689b      	ldr	r3, [r3, #8]
 800ac70:	0e1b      	lsrs	r3, r3, #24
 800ac72:	f003 030f 	and.w	r3, r3, #15
 800ac76:	e006      	b.n	800ac86 <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
 800ac78:	4b2a      	ldr	r3, [pc, #168]	@ (800ad24 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800ac7a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800ac7e:	041b      	lsls	r3, r3, #16
 800ac80:	0e1b      	lsrs	r3, r3, #24
 800ac82:	f003 030f 	and.w	r3, r3, #15
 800ac86:	4a29      	ldr	r2, [pc, #164]	@ (800ad2c <HAL_RCCEx_GetPeriphCLKFreq+0x1374>)
 800ac88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ac8c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800ac8e:	e20e      	b.n	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800ac90:	2300      	movs	r3, #0
 800ac92:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ac94:	e20b      	b.n	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800ac96:	2300      	movs	r3, #0
 800ac98:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ac9a:	e208      	b.n	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 800ac9c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aca0:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 800aca4:	430b      	orrs	r3, r1
 800aca6:	d17c      	bne.n	800ada2 <HAL_RCCEx_GetPeriphCLKFreq+0x13ea>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800aca8:	4b1e      	ldr	r3, [pc, #120]	@ (800ad24 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800acaa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800acae:	f003 0318 	and.w	r3, r3, #24
 800acb2:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800acb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acb6:	2b18      	cmp	r3, #24
 800acb8:	d870      	bhi.n	800ad9c <HAL_RCCEx_GetPeriphCLKFreq+0x13e4>
 800acba:	a201      	add	r2, pc, #4	@ (adr r2, 800acc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>)
 800acbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acc0:	0800ad31 	.word	0x0800ad31
 800acc4:	0800ad9d 	.word	0x0800ad9d
 800acc8:	0800ad9d 	.word	0x0800ad9d
 800accc:	0800ad9d 	.word	0x0800ad9d
 800acd0:	0800ad9d 	.word	0x0800ad9d
 800acd4:	0800ad9d 	.word	0x0800ad9d
 800acd8:	0800ad9d 	.word	0x0800ad9d
 800acdc:	0800ad9d 	.word	0x0800ad9d
 800ace0:	0800ad39 	.word	0x0800ad39
 800ace4:	0800ad9d 	.word	0x0800ad9d
 800ace8:	0800ad9d 	.word	0x0800ad9d
 800acec:	0800ad9d 	.word	0x0800ad9d
 800acf0:	0800ad9d 	.word	0x0800ad9d
 800acf4:	0800ad9d 	.word	0x0800ad9d
 800acf8:	0800ad9d 	.word	0x0800ad9d
 800acfc:	0800ad9d 	.word	0x0800ad9d
 800ad00:	0800ad41 	.word	0x0800ad41
 800ad04:	0800ad9d 	.word	0x0800ad9d
 800ad08:	0800ad9d 	.word	0x0800ad9d
 800ad0c:	0800ad9d 	.word	0x0800ad9d
 800ad10:	0800ad9d 	.word	0x0800ad9d
 800ad14:	0800ad9d 	.word	0x0800ad9d
 800ad18:	0800ad9d 	.word	0x0800ad9d
 800ad1c:	0800ad9d 	.word	0x0800ad9d
 800ad20:	0800ad5b 	.word	0x0800ad5b
 800ad24:	46020c00 	.word	0x46020c00
 800ad28:	00f42400 	.word	0x00f42400
 800ad2c:	08011c68 	.word	0x08011c68
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 800ad30:	f7fd fa62 	bl	80081f8 <HAL_RCC_GetPCLK3Freq>
 800ad34:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800ad36:	e1ba      	b.n	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800ad38:	f7fd f91a 	bl	8007f70 <HAL_RCC_GetSysClockFreq>
 800ad3c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800ad3e:	e1b6      	b.n	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ad40:	4b9f      	ldr	r3, [pc, #636]	@ (800afc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ad48:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ad4c:	d102      	bne.n	800ad54 <HAL_RCCEx_GetPeriphCLKFreq+0x139c>
        {
          frequency = HSI_VALUE;
 800ad4e:	4b9d      	ldr	r3, [pc, #628]	@ (800afc4 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 800ad50:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800ad52:	e1ac      	b.n	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800ad54:	2300      	movs	r3, #0
 800ad56:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ad58:	e1a9      	b.n	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800ad5a:	4b99      	ldr	r3, [pc, #612]	@ (800afc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	f003 0320 	and.w	r3, r3, #32
 800ad62:	2b20      	cmp	r3, #32
 800ad64:	d117      	bne.n	800ad96 <HAL_RCCEx_GetPeriphCLKFreq+0x13de>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800ad66:	4b96      	ldr	r3, [pc, #600]	@ (800afc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800ad68:	689b      	ldr	r3, [r3, #8]
 800ad6a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d005      	beq.n	800ad7e <HAL_RCCEx_GetPeriphCLKFreq+0x13c6>
 800ad72:	4b93      	ldr	r3, [pc, #588]	@ (800afc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800ad74:	689b      	ldr	r3, [r3, #8]
 800ad76:	0e1b      	lsrs	r3, r3, #24
 800ad78:	f003 030f 	and.w	r3, r3, #15
 800ad7c:	e006      	b.n	800ad8c <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
 800ad7e:	4b90      	ldr	r3, [pc, #576]	@ (800afc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800ad80:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800ad84:	041b      	lsls	r3, r3, #16
 800ad86:	0e1b      	lsrs	r3, r3, #24
 800ad88:	f003 030f 	and.w	r3, r3, #15
 800ad8c:	4a8e      	ldr	r2, [pc, #568]	@ (800afc8 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>)
 800ad8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ad92:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800ad94:	e18b      	b.n	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800ad96:	2300      	movs	r3, #0
 800ad98:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ad9a:	e188      	b.n	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800ad9c:	2300      	movs	r3, #0
 800ad9e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ada0:	e185      	b.n	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 800ada2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ada6:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 800adaa:	430b      	orrs	r3, r1
 800adac:	d155      	bne.n	800ae5a <HAL_RCCEx_GetPeriphCLKFreq+0x14a2>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800adae:	4b84      	ldr	r3, [pc, #528]	@ (800afc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800adb0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800adb4:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800adb8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800adba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800adbc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800adc0:	d013      	beq.n	800adea <HAL_RCCEx_GetPeriphCLKFreq+0x1432>
 800adc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800adc4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800adc8:	d844      	bhi.n	800ae54 <HAL_RCCEx_GetPeriphCLKFreq+0x149c>
 800adca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800adcc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800add0:	d013      	beq.n	800adfa <HAL_RCCEx_GetPeriphCLKFreq+0x1442>
 800add2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800add4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800add8:	d83c      	bhi.n	800ae54 <HAL_RCCEx_GetPeriphCLKFreq+0x149c>
 800adda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800addc:	2b00      	cmp	r3, #0
 800adde:	d014      	beq.n	800ae0a <HAL_RCCEx_GetPeriphCLKFreq+0x1452>
 800ade0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ade2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ade6:	d014      	beq.n	800ae12 <HAL_RCCEx_GetPeriphCLKFreq+0x145a>
 800ade8:	e034      	b.n	800ae54 <HAL_RCCEx_GetPeriphCLKFreq+0x149c>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800adea:	f107 0318 	add.w	r3, r7, #24
 800adee:	4618      	mov	r0, r3
 800adf0:	f7fe fb2e 	bl	8009450 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800adf4:	69fb      	ldr	r3, [r7, #28]
 800adf6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800adf8:	e159      	b.n	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800adfa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800adfe:	4618      	mov	r0, r3
 800ae00:	f7fe f9cc 	bl	800919c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800ae04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae06:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ae08:	e151      	b.n	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800ae0a:	f7fd f8b1 	bl	8007f70 <HAL_RCC_GetSysClockFreq>
 800ae0e:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800ae10:	e14d      	b.n	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800ae12:	4b6b      	ldr	r3, [pc, #428]	@ (800afc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	f003 0320 	and.w	r3, r3, #32
 800ae1a:	2b20      	cmp	r3, #32
 800ae1c:	d117      	bne.n	800ae4e <HAL_RCCEx_GetPeriphCLKFreq+0x1496>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800ae1e:	4b68      	ldr	r3, [pc, #416]	@ (800afc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800ae20:	689b      	ldr	r3, [r3, #8]
 800ae22:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d005      	beq.n	800ae36 <HAL_RCCEx_GetPeriphCLKFreq+0x147e>
 800ae2a:	4b65      	ldr	r3, [pc, #404]	@ (800afc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800ae2c:	689b      	ldr	r3, [r3, #8]
 800ae2e:	0e1b      	lsrs	r3, r3, #24
 800ae30:	f003 030f 	and.w	r3, r3, #15
 800ae34:	e006      	b.n	800ae44 <HAL_RCCEx_GetPeriphCLKFreq+0x148c>
 800ae36:	4b62      	ldr	r3, [pc, #392]	@ (800afc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800ae38:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800ae3c:	041b      	lsls	r3, r3, #16
 800ae3e:	0e1b      	lsrs	r3, r3, #24
 800ae40:	f003 030f 	and.w	r3, r3, #15
 800ae44:	4a60      	ldr	r2, [pc, #384]	@ (800afc8 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>)
 800ae46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ae4a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800ae4c:	e12f      	b.n	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800ae4e:	2300      	movs	r3, #0
 800ae50:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ae52:	e12c      	b.n	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800ae54:	2300      	movs	r3, #0
 800ae56:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ae58:	e129      	b.n	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined(HSPI1)

  else if (PeriphClk == RCC_PERIPHCLK_HSPI)
 800ae5a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ae5e:	1e59      	subs	r1, r3, #1
 800ae60:	ea52 0301 	orrs.w	r3, r2, r1
 800ae64:	d13c      	bne.n	800aee0 <HAL_RCCEx_GetPeriphCLKFreq+0x1528>
  {
    /* Get the current HSPI kernel source */
    srcclk = __HAL_RCC_GET_HSPI_SOURCE();
 800ae66:	4b56      	ldr	r3, [pc, #344]	@ (800afc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800ae68:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800ae6c:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800ae70:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800ae72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae74:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800ae78:	d027      	beq.n	800aeca <HAL_RCCEx_GetPeriphCLKFreq+0x1512>
 800ae7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae7c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800ae80:	d82b      	bhi.n	800aeda <HAL_RCCEx_GetPeriphCLKFreq+0x1522>
 800ae82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae84:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800ae88:	d017      	beq.n	800aeba <HAL_RCCEx_GetPeriphCLKFreq+0x1502>
 800ae8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae8c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800ae90:	d823      	bhi.n	800aeda <HAL_RCCEx_GetPeriphCLKFreq+0x1522>
 800ae92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d004      	beq.n	800aea2 <HAL_RCCEx_GetPeriphCLKFreq+0x14ea>
 800ae98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae9a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ae9e:	d004      	beq.n	800aeaa <HAL_RCCEx_GetPeriphCLKFreq+0x14f2>
 800aea0:	e01b      	b.n	800aeda <HAL_RCCEx_GetPeriphCLKFreq+0x1522>
    {
      case RCC_HSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800aea2:	f7fd f865 	bl	8007f70 <HAL_RCC_GetSysClockFreq>
 800aea6:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800aea8:	e101      	b.n	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_HSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800aeaa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800aeae:	4618      	mov	r0, r3
 800aeb0:	f7fe f974 	bl	800919c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800aeb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aeb6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800aeb8:	e0f9      	b.n	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_HSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aeba:	f107 0318 	add.w	r3, r7, #24
 800aebe:	4618      	mov	r0, r3
 800aec0:	f7fe fac6 	bl	8009450 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800aec4:	69fb      	ldr	r3, [r7, #28]
 800aec6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800aec8:	e0f1      	b.n	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      case RCC_HSPICLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aeca:	f107 030c 	add.w	r3, r7, #12
 800aece:	4618      	mov	r0, r3
 800aed0:	f7fe fc18 	bl	8009704 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_R_Frequency;
 800aed4:	697b      	ldr	r3, [r7, #20]
 800aed6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800aed8:	e0e9      	b.n	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800aeda:	2300      	movs	r3, #0
 800aedc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800aede:	e0e6      	b.n	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 800aee0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aee4:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 800aee8:	430b      	orrs	r3, r1
 800aeea:	d131      	bne.n	800af50 <HAL_RCCEx_GetPeriphCLKFreq+0x1598>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 800aeec:	4b34      	ldr	r3, [pc, #208]	@ (800afc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800aeee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800aef2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800aef6:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 800aef8:	4b31      	ldr	r3, [pc, #196]	@ (800afc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800aefa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800aefe:	f003 0302 	and.w	r3, r3, #2
 800af02:	2b02      	cmp	r3, #2
 800af04:	d106      	bne.n	800af14 <HAL_RCCEx_GetPeriphCLKFreq+0x155c>
 800af06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d103      	bne.n	800af14 <HAL_RCCEx_GetPeriphCLKFreq+0x155c>
    {
      frequency = LSE_VALUE;
 800af0c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800af10:	637b      	str	r3, [r7, #52]	@ 0x34
 800af12:	e0cc      	b.n	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 800af14:	4b2a      	ldr	r3, [pc, #168]	@ (800afc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800af16:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800af1a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800af1e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800af22:	d112      	bne.n	800af4a <HAL_RCCEx_GetPeriphCLKFreq+0x1592>
 800af24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af26:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800af2a:	d10e      	bne.n	800af4a <HAL_RCCEx_GetPeriphCLKFreq+0x1592>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800af2c:	4b24      	ldr	r3, [pc, #144]	@ (800afc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800af2e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800af32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800af36:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800af3a:	d102      	bne.n	800af42 <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
      {
        frequency = LSI_VALUE / 128U;
 800af3c:	23fa      	movs	r3, #250	@ 0xfa
 800af3e:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800af40:	e0b5      	b.n	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800af42:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800af46:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800af48:	e0b1      	b.n	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 800af4a:	2300      	movs	r3, #0
 800af4c:	637b      	str	r3, [r7, #52]	@ 0x34
 800af4e:	e0ae      	b.n	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 800af50:	e9d7 2300 	ldrd	r2, r3, [r7]
 800af54:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800af58:	430b      	orrs	r3, r1
 800af5a:	d13b      	bne.n	800afd4 <HAL_RCCEx_GetPeriphCLKFreq+0x161c>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 800af5c:	4b18      	ldr	r3, [pc, #96]	@ (800afc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800af5e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800af62:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800af66:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 800af68:	4b15      	ldr	r3, [pc, #84]	@ (800afc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800af70:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800af74:	d105      	bne.n	800af82 <HAL_RCCEx_GetPeriphCLKFreq+0x15ca>
 800af76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d102      	bne.n	800af82 <HAL_RCCEx_GetPeriphCLKFreq+0x15ca>
    {
      frequency = HSI48_VALUE;
 800af7c:	4b13      	ldr	r3, [pc, #76]	@ (800afcc <HAL_RCCEx_GetPeriphCLKFreq+0x1614>)
 800af7e:	637b      	str	r3, [r7, #52]	@ 0x34
 800af80:	e095      	b.n	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 800af82:	4b0f      	ldr	r3, [pc, #60]	@ (800afc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800af8a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800af8e:	d106      	bne.n	800af9e <HAL_RCCEx_GetPeriphCLKFreq+0x15e6>
 800af90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af92:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800af96:	d102      	bne.n	800af9e <HAL_RCCEx_GetPeriphCLKFreq+0x15e6>
    {
      frequency = HSI48_VALUE >> 1U ;
 800af98:	4b0d      	ldr	r3, [pc, #52]	@ (800afd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1618>)
 800af9a:	637b      	str	r3, [r7, #52]	@ 0x34
 800af9c:	e087      	b.n	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 800af9e:	4b08      	ldr	r3, [pc, #32]	@ (800afc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800afa6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800afaa:	d106      	bne.n	800afba <HAL_RCCEx_GetPeriphCLKFreq+0x1602>
 800afac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800afb2:	d102      	bne.n	800afba <HAL_RCCEx_GetPeriphCLKFreq+0x1602>
    {
      frequency = HSI_VALUE;
 800afb4:	4b03      	ldr	r3, [pc, #12]	@ (800afc4 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 800afb6:	637b      	str	r3, [r7, #52]	@ 0x34
 800afb8:	e079      	b.n	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 800afba:	2300      	movs	r3, #0
 800afbc:	637b      	str	r3, [r7, #52]	@ 0x34
 800afbe:	e076      	b.n	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800afc0:	46020c00 	.word	0x46020c00
 800afc4:	00f42400 	.word	0x00f42400
 800afc8:	08011c68 	.word	0x08011c68
 800afcc:	02dc6c00 	.word	0x02dc6c00
 800afd0:	016e3600 	.word	0x016e3600
    }
  }
#if defined(LTDC)
  else if (PeriphClk == RCC_PERIPHCLK_LTDC)
 800afd4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800afd8:	1e99      	subs	r1, r3, #2
 800afda:	ea52 0301 	orrs.w	r3, r2, r1
 800afde:	d120      	bne.n	800b022 <HAL_RCCEx_GetPeriphCLKFreq+0x166a>
  {
    /* Get the current LTDC kernel source */
    srcclk = __HAL_RCC_GET_LTDC_SOURCE();
 800afe0:	4b35      	ldr	r3, [pc, #212]	@ (800b0b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800afe2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800afe6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800afea:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800afec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d004      	beq.n	800affc <HAL_RCCEx_GetPeriphCLKFreq+0x1644>
 800aff2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aff4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800aff8:	d008      	beq.n	800b00c <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
 800affa:	e00f      	b.n	800b01c <HAL_RCCEx_GetPeriphCLKFreq+0x1664>
    {
      case RCC_LTDCCLKSOURCE_PLL3:  /* PLL3R is the clock source for LTDC */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800affc:	f107 030c 	add.w	r3, r7, #12
 800b000:	4618      	mov	r0, r3
 800b002:	f7fe fb7f 	bl	8009704 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_R_Frequency;
 800b006:	697b      	ldr	r3, [r7, #20]
 800b008:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b00a:	e050      	b.n	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_LTDCCLKSOURCE_PLL2:  /* PLL2R is the clock source for LTDC */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b00c:	f107 0318 	add.w	r3, r7, #24
 800b010:	4618      	mov	r0, r3
 800b012:	f7fe fa1d 	bl	8009450 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_R_Frequency;
 800b016:	6a3b      	ldr	r3, [r7, #32]
 800b018:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b01a:	e048      	b.n	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800b01c:	2300      	movs	r3, #0
 800b01e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b020:	e045      	b.n	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
  }
#endif /* defined(LTDC) */

#if defined(USB_OTG_HS)

  else if (PeriphClk == RCC_PERIPHCLK_USBPHY)
 800b022:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b026:	f1a3 0108 	sub.w	r1, r3, #8
 800b02a:	ea52 0301 	orrs.w	r3, r2, r1
 800b02e:	d13c      	bne.n	800b0aa <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
  {
    /* Get the current USB_OTG_HS kernel source */
    srcclk = __HAL_RCC_GET_USBPHY_SOURCE();
 800b030:	4b21      	ldr	r3, [pc, #132]	@ (800b0b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800b032:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b036:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800b03a:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE))
 800b03c:	4b1e      	ldr	r3, [pc, #120]	@ (800b0b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b044:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b048:	d105      	bne.n	800b056 <HAL_RCCEx_GetPeriphCLKFreq+0x169e>
 800b04a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d102      	bne.n	800b056 <HAL_RCCEx_GetPeriphCLKFreq+0x169e>
    {
      frequency = HSE_VALUE;
 800b050:	4b1a      	ldr	r3, [pc, #104]	@ (800b0bc <HAL_RCCEx_GetPeriphCLKFreq+0x1704>)
 800b052:	637b      	str	r3, [r7, #52]	@ 0x34
 800b054:	e02b      	b.n	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE_DIV2))
 800b056:	4b18      	ldr	r3, [pc, #96]	@ (800b0b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b05e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b062:	d106      	bne.n	800b072 <HAL_RCCEx_GetPeriphCLKFreq+0x16ba>
 800b064:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b066:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b06a:	d102      	bne.n	800b072 <HAL_RCCEx_GetPeriphCLKFreq+0x16ba>
    {
      frequency = HSE_VALUE >> 1U ;
 800b06c:	4b14      	ldr	r3, [pc, #80]	@ (800b0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1708>)
 800b06e:	637b      	str	r3, [r7, #52]	@ 0x34
 800b070:	e01d      	b.n	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1) /* PLL1P */
 800b072:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b074:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b078:	d107      	bne.n	800b08a <HAL_RCCEx_GetPeriphCLKFreq+0x16d2>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b07a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b07e:	4618      	mov	r0, r3
 800b080:	f7fe f88c 	bl	800919c <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 800b084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b086:	637b      	str	r3, [r7, #52]	@ 0x34
 800b088:	e011      	b.n	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1_DIV2) /* PLL1P_DIV2 */
 800b08a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b08c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800b090:	d108      	bne.n	800b0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x16ec>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b092:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b096:	4618      	mov	r0, r3
 800b098:	f7fe f880 	bl	800919c <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = (pll1_clocks.PLL1_P_Frequency) / 2U;
 800b09c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b09e:	085b      	lsrs	r3, r3, #1
 800b0a0:	637b      	str	r3, [r7, #52]	@ 0x34
 800b0a2:	e004      	b.n	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USB_OTG_HS */
    else
    {
      frequency = 0U;
 800b0a4:	2300      	movs	r3, #0
 800b0a6:	637b      	str	r3, [r7, #52]	@ 0x34
 800b0a8:	e001      	b.n	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 800b0aa:	2300      	movs	r3, #0
 800b0ac:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  return (frequency);
 800b0ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800b0b0:	4618      	mov	r0, r3
 800b0b2:	3738      	adds	r7, #56	@ 0x38
 800b0b4:	46bd      	mov	sp, r7
 800b0b6:	bd80      	pop	{r7, pc}
 800b0b8:	46020c00 	.word	0x46020c00
 800b0bc:	00f42400 	.word	0x00f42400
 800b0c0:	007a1200 	.word	0x007a1200

0800b0c4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 800b0c4:	b580      	push	{r7, lr}
 800b0c6:	b084      	sub	sp, #16
 800b0c8:	af00      	add	r7, sp, #0
 800b0ca:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 800b0cc:	4b47      	ldr	r3, [pc, #284]	@ (800b1ec <RCCEx_PLL2_Config+0x128>)
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	4a46      	ldr	r2, [pc, #280]	@ (800b1ec <RCCEx_PLL2_Config+0x128>)
 800b0d2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b0d6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800b0d8:	f7f7 fb6c 	bl	80027b4 <HAL_GetTick>
 800b0dc:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b0de:	e008      	b.n	800b0f2 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b0e0:	f7f7 fb68 	bl	80027b4 <HAL_GetTick>
 800b0e4:	4602      	mov	r2, r0
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	1ad3      	subs	r3, r2, r3
 800b0ea:	2b02      	cmp	r3, #2
 800b0ec:	d901      	bls.n	800b0f2 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800b0ee:	2303      	movs	r3, #3
 800b0f0:	e077      	b.n	800b1e2 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b0f2:	4b3e      	ldr	r3, [pc, #248]	@ (800b1ec <RCCEx_PLL2_Config+0x128>)
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d1f0      	bne.n	800b0e0 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800b0fe:	4b3b      	ldr	r3, [pc, #236]	@ (800b1ec <RCCEx_PLL2_Config+0x128>)
 800b100:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b102:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800b106:	f023 0303 	bic.w	r3, r3, #3
 800b10a:	687a      	ldr	r2, [r7, #4]
 800b10c:	6811      	ldr	r1, [r2, #0]
 800b10e:	687a      	ldr	r2, [r7, #4]
 800b110:	6852      	ldr	r2, [r2, #4]
 800b112:	3a01      	subs	r2, #1
 800b114:	0212      	lsls	r2, r2, #8
 800b116:	430a      	orrs	r2, r1
 800b118:	4934      	ldr	r1, [pc, #208]	@ (800b1ec <RCCEx_PLL2_Config+0x128>)
 800b11a:	4313      	orrs	r3, r2
 800b11c:	62cb      	str	r3, [r1, #44]	@ 0x2c
 800b11e:	4b33      	ldr	r3, [pc, #204]	@ (800b1ec <RCCEx_PLL2_Config+0x128>)
 800b120:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b122:	4b33      	ldr	r3, [pc, #204]	@ (800b1f0 <RCCEx_PLL2_Config+0x12c>)
 800b124:	4013      	ands	r3, r2
 800b126:	687a      	ldr	r2, [r7, #4]
 800b128:	6892      	ldr	r2, [r2, #8]
 800b12a:	3a01      	subs	r2, #1
 800b12c:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800b130:	687a      	ldr	r2, [r7, #4]
 800b132:	68d2      	ldr	r2, [r2, #12]
 800b134:	3a01      	subs	r2, #1
 800b136:	0252      	lsls	r2, r2, #9
 800b138:	b292      	uxth	r2, r2
 800b13a:	4311      	orrs	r1, r2
 800b13c:	687a      	ldr	r2, [r7, #4]
 800b13e:	6912      	ldr	r2, [r2, #16]
 800b140:	3a01      	subs	r2, #1
 800b142:	0412      	lsls	r2, r2, #16
 800b144:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800b148:	4311      	orrs	r1, r2
 800b14a:	687a      	ldr	r2, [r7, #4]
 800b14c:	6952      	ldr	r2, [r2, #20]
 800b14e:	3a01      	subs	r2, #1
 800b150:	0612      	lsls	r2, r2, #24
 800b152:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800b156:	430a      	orrs	r2, r1
 800b158:	4924      	ldr	r1, [pc, #144]	@ (800b1ec <RCCEx_PLL2_Config+0x128>)
 800b15a:	4313      	orrs	r3, r2
 800b15c:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800b15e:	4b23      	ldr	r3, [pc, #140]	@ (800b1ec <RCCEx_PLL2_Config+0x128>)
 800b160:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b162:	f023 020c 	bic.w	r2, r3, #12
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	699b      	ldr	r3, [r3, #24]
 800b16a:	4920      	ldr	r1, [pc, #128]	@ (800b1ec <RCCEx_PLL2_Config+0x128>)
 800b16c:	4313      	orrs	r3, r2
 800b16e:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800b170:	4b1e      	ldr	r3, [pc, #120]	@ (800b1ec <RCCEx_PLL2_Config+0x128>)
 800b172:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	6a1b      	ldr	r3, [r3, #32]
 800b178:	491c      	ldr	r1, [pc, #112]	@ (800b1ec <RCCEx_PLL2_Config+0x128>)
 800b17a:	4313      	orrs	r3, r2
 800b17c:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 800b17e:	4b1b      	ldr	r3, [pc, #108]	@ (800b1ec <RCCEx_PLL2_Config+0x128>)
 800b180:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b182:	4a1a      	ldr	r2, [pc, #104]	@ (800b1ec <RCCEx_PLL2_Config+0x128>)
 800b184:	f023 0310 	bic.w	r3, r3, #16
 800b188:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b18a:	4b18      	ldr	r3, [pc, #96]	@ (800b1ec <RCCEx_PLL2_Config+0x128>)
 800b18c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b18e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b192:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800b196:	687a      	ldr	r2, [r7, #4]
 800b198:	69d2      	ldr	r2, [r2, #28]
 800b19a:	00d2      	lsls	r2, r2, #3
 800b19c:	4913      	ldr	r1, [pc, #76]	@ (800b1ec <RCCEx_PLL2_Config+0x128>)
 800b19e:	4313      	orrs	r3, r2
 800b1a0:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 800b1a2:	4b12      	ldr	r3, [pc, #72]	@ (800b1ec <RCCEx_PLL2_Config+0x128>)
 800b1a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b1a6:	4a11      	ldr	r2, [pc, #68]	@ (800b1ec <RCCEx_PLL2_Config+0x128>)
 800b1a8:	f043 0310 	orr.w	r3, r3, #16
 800b1ac:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 800b1ae:	4b0f      	ldr	r3, [pc, #60]	@ (800b1ec <RCCEx_PLL2_Config+0x128>)
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	4a0e      	ldr	r2, [pc, #56]	@ (800b1ec <RCCEx_PLL2_Config+0x128>)
 800b1b4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b1b8:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800b1ba:	f7f7 fafb 	bl	80027b4 <HAL_GetTick>
 800b1be:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b1c0:	e008      	b.n	800b1d4 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b1c2:	f7f7 faf7 	bl	80027b4 <HAL_GetTick>
 800b1c6:	4602      	mov	r2, r0
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	1ad3      	subs	r3, r2, r3
 800b1cc:	2b02      	cmp	r3, #2
 800b1ce:	d901      	bls.n	800b1d4 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 800b1d0:	2303      	movs	r3, #3
 800b1d2:	e006      	b.n	800b1e2 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b1d4:	4b05      	ldr	r3, [pc, #20]	@ (800b1ec <RCCEx_PLL2_Config+0x128>)
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d0f0      	beq.n	800b1c2 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 800b1e0:	2300      	movs	r3, #0

}
 800b1e2:	4618      	mov	r0, r3
 800b1e4:	3710      	adds	r7, #16
 800b1e6:	46bd      	mov	sp, r7
 800b1e8:	bd80      	pop	{r7, pc}
 800b1ea:	bf00      	nop
 800b1ec:	46020c00 	.word	0x46020c00
 800b1f0:	80800000 	.word	0x80800000

0800b1f4 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 800b1f4:	b580      	push	{r7, lr}
 800b1f6:	b084      	sub	sp, #16
 800b1f8:	af00      	add	r7, sp, #0
 800b1fa:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 800b1fc:	4b47      	ldr	r3, [pc, #284]	@ (800b31c <RCCEx_PLL3_Config+0x128>)
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	4a46      	ldr	r2, [pc, #280]	@ (800b31c <RCCEx_PLL3_Config+0x128>)
 800b202:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b206:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800b208:	f7f7 fad4 	bl	80027b4 <HAL_GetTick>
 800b20c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b20e:	e008      	b.n	800b222 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b210:	f7f7 fad0 	bl	80027b4 <HAL_GetTick>
 800b214:	4602      	mov	r2, r0
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	1ad3      	subs	r3, r2, r3
 800b21a:	2b02      	cmp	r3, #2
 800b21c:	d901      	bls.n	800b222 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800b21e:	2303      	movs	r3, #3
 800b220:	e077      	b.n	800b312 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b222:	4b3e      	ldr	r3, [pc, #248]	@ (800b31c <RCCEx_PLL3_Config+0x128>)
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d1f0      	bne.n	800b210 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800b22e:	4b3b      	ldr	r3, [pc, #236]	@ (800b31c <RCCEx_PLL3_Config+0x128>)
 800b230:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b232:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800b236:	f023 0303 	bic.w	r3, r3, #3
 800b23a:	687a      	ldr	r2, [r7, #4]
 800b23c:	6811      	ldr	r1, [r2, #0]
 800b23e:	687a      	ldr	r2, [r7, #4]
 800b240:	6852      	ldr	r2, [r2, #4]
 800b242:	3a01      	subs	r2, #1
 800b244:	0212      	lsls	r2, r2, #8
 800b246:	430a      	orrs	r2, r1
 800b248:	4934      	ldr	r1, [pc, #208]	@ (800b31c <RCCEx_PLL3_Config+0x128>)
 800b24a:	4313      	orrs	r3, r2
 800b24c:	630b      	str	r3, [r1, #48]	@ 0x30
 800b24e:	4b33      	ldr	r3, [pc, #204]	@ (800b31c <RCCEx_PLL3_Config+0x128>)
 800b250:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b252:	4b33      	ldr	r3, [pc, #204]	@ (800b320 <RCCEx_PLL3_Config+0x12c>)
 800b254:	4013      	ands	r3, r2
 800b256:	687a      	ldr	r2, [r7, #4]
 800b258:	6892      	ldr	r2, [r2, #8]
 800b25a:	3a01      	subs	r2, #1
 800b25c:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800b260:	687a      	ldr	r2, [r7, #4]
 800b262:	68d2      	ldr	r2, [r2, #12]
 800b264:	3a01      	subs	r2, #1
 800b266:	0252      	lsls	r2, r2, #9
 800b268:	b292      	uxth	r2, r2
 800b26a:	4311      	orrs	r1, r2
 800b26c:	687a      	ldr	r2, [r7, #4]
 800b26e:	6912      	ldr	r2, [r2, #16]
 800b270:	3a01      	subs	r2, #1
 800b272:	0412      	lsls	r2, r2, #16
 800b274:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800b278:	4311      	orrs	r1, r2
 800b27a:	687a      	ldr	r2, [r7, #4]
 800b27c:	6952      	ldr	r2, [r2, #20]
 800b27e:	3a01      	subs	r2, #1
 800b280:	0612      	lsls	r2, r2, #24
 800b282:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800b286:	430a      	orrs	r2, r1
 800b288:	4924      	ldr	r1, [pc, #144]	@ (800b31c <RCCEx_PLL3_Config+0x128>)
 800b28a:	4313      	orrs	r3, r2
 800b28c:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 800b28e:	4b23      	ldr	r3, [pc, #140]	@ (800b31c <RCCEx_PLL3_Config+0x128>)
 800b290:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b292:	f023 020c 	bic.w	r2, r3, #12
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	699b      	ldr	r3, [r3, #24]
 800b29a:	4920      	ldr	r1, [pc, #128]	@ (800b31c <RCCEx_PLL3_Config+0x128>)
 800b29c:	4313      	orrs	r3, r2
 800b29e:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 800b2a0:	4b1e      	ldr	r3, [pc, #120]	@ (800b31c <RCCEx_PLL3_Config+0x128>)
 800b2a2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	6a1b      	ldr	r3, [r3, #32]
 800b2a8:	491c      	ldr	r1, [pc, #112]	@ (800b31c <RCCEx_PLL3_Config+0x128>)
 800b2aa:	4313      	orrs	r3, r2
 800b2ac:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 800b2ae:	4b1b      	ldr	r3, [pc, #108]	@ (800b31c <RCCEx_PLL3_Config+0x128>)
 800b2b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b2b2:	4a1a      	ldr	r2, [pc, #104]	@ (800b31c <RCCEx_PLL3_Config+0x128>)
 800b2b4:	f023 0310 	bic.w	r3, r3, #16
 800b2b8:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b2ba:	4b18      	ldr	r3, [pc, #96]	@ (800b31c <RCCEx_PLL3_Config+0x128>)
 800b2bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b2be:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b2c2:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800b2c6:	687a      	ldr	r2, [r7, #4]
 800b2c8:	69d2      	ldr	r2, [r2, #28]
 800b2ca:	00d2      	lsls	r2, r2, #3
 800b2cc:	4913      	ldr	r1, [pc, #76]	@ (800b31c <RCCEx_PLL3_Config+0x128>)
 800b2ce:	4313      	orrs	r3, r2
 800b2d0:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 800b2d2:	4b12      	ldr	r3, [pc, #72]	@ (800b31c <RCCEx_PLL3_Config+0x128>)
 800b2d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b2d6:	4a11      	ldr	r2, [pc, #68]	@ (800b31c <RCCEx_PLL3_Config+0x128>)
 800b2d8:	f043 0310 	orr.w	r3, r3, #16
 800b2dc:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 800b2de:	4b0f      	ldr	r3, [pc, #60]	@ (800b31c <RCCEx_PLL3_Config+0x128>)
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	4a0e      	ldr	r2, [pc, #56]	@ (800b31c <RCCEx_PLL3_Config+0x128>)
 800b2e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b2e8:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800b2ea:	f7f7 fa63 	bl	80027b4 <HAL_GetTick>
 800b2ee:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b2f0:	e008      	b.n	800b304 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b2f2:	f7f7 fa5f 	bl	80027b4 <HAL_GetTick>
 800b2f6:	4602      	mov	r2, r0
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	1ad3      	subs	r3, r2, r3
 800b2fc:	2b02      	cmp	r3, #2
 800b2fe:	d901      	bls.n	800b304 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 800b300:	2303      	movs	r3, #3
 800b302:	e006      	b.n	800b312 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b304:	4b05      	ldr	r3, [pc, #20]	@ (800b31c <RCCEx_PLL3_Config+0x128>)
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d0f0      	beq.n	800b2f2 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 800b310:	2300      	movs	r3, #0
}
 800b312:	4618      	mov	r0, r3
 800b314:	3710      	adds	r7, #16
 800b316:	46bd      	mov	sp, r7
 800b318:	bd80      	pop	{r7, pc}
 800b31a:	bf00      	nop
 800b31c:	46020c00 	.word	0x46020c00
 800b320:	80800000 	.word	0x80800000

0800b324 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b324:	b580      	push	{r7, lr}
 800b326:	b082      	sub	sp, #8
 800b328:	af00      	add	r7, sp, #0
 800b32a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d101      	bne.n	800b336 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b332:	2301      	movs	r3, #1
 800b334:	e042      	b.n	800b3bc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d106      	bne.n	800b34e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	2200      	movs	r2, #0
 800b344:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b348:	6878      	ldr	r0, [r7, #4]
 800b34a:	f7f7 f827 	bl	800239c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	2224      	movs	r2, #36	@ 0x24
 800b352:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	681a      	ldr	r2, [r3, #0]
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	f022 0201 	bic.w	r2, r2, #1
 800b364:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d002      	beq.n	800b374 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800b36e:	6878      	ldr	r0, [r7, #4]
 800b370:	f000 fd1c 	bl	800bdac <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b374:	6878      	ldr	r0, [r7, #4]
 800b376:	f000 fb6b 	bl	800ba50 <UART_SetConfig>
 800b37a:	4603      	mov	r3, r0
 800b37c:	2b01      	cmp	r3, #1
 800b37e:	d101      	bne.n	800b384 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800b380:	2301      	movs	r3, #1
 800b382:	e01b      	b.n	800b3bc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	685a      	ldr	r2, [r3, #4]
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800b392:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	689a      	ldr	r2, [r3, #8]
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800b3a2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	681a      	ldr	r2, [r3, #0]
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	f042 0201 	orr.w	r2, r2, #1
 800b3b2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b3b4:	6878      	ldr	r0, [r7, #4]
 800b3b6:	f000 fd9b 	bl	800bef0 <UART_CheckIdleState>
 800b3ba:	4603      	mov	r3, r0
}
 800b3bc:	4618      	mov	r0, r3
 800b3be:	3708      	adds	r7, #8
 800b3c0:	46bd      	mov	sp, r7
 800b3c2:	bd80      	pop	{r7, pc}

0800b3c4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b3c4:	b580      	push	{r7, lr}
 800b3c6:	b0ba      	sub	sp, #232	@ 0xe8
 800b3c8:	af00      	add	r7, sp, #0
 800b3ca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	69db      	ldr	r3, [r3, #28]
 800b3d2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	689b      	ldr	r3, [r3, #8]
 800b3e6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b3ea:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800b3ee:	f640 030f 	movw	r3, #2063	@ 0x80f
 800b3f2:	4013      	ands	r3, r2
 800b3f4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800b3f8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d11b      	bne.n	800b438 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b400:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b404:	f003 0320 	and.w	r3, r3, #32
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d015      	beq.n	800b438 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b40c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b410:	f003 0320 	and.w	r3, r3, #32
 800b414:	2b00      	cmp	r3, #0
 800b416:	d105      	bne.n	800b424 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b418:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b41c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b420:	2b00      	cmp	r3, #0
 800b422:	d009      	beq.n	800b438 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b428:	2b00      	cmp	r3, #0
 800b42a:	f000 82e5 	beq.w	800b9f8 <HAL_UART_IRQHandler+0x634>
      {
        huart->RxISR(huart);
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b432:	6878      	ldr	r0, [r7, #4]
 800b434:	4798      	blx	r3
      }
      return;
 800b436:	e2df      	b.n	800b9f8 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800b438:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	f000 8123 	beq.w	800b688 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800b442:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800b446:	4b8d      	ldr	r3, [pc, #564]	@ (800b67c <HAL_UART_IRQHandler+0x2b8>)
 800b448:	4013      	ands	r3, r2
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d106      	bne.n	800b45c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800b44e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800b452:	4b8b      	ldr	r3, [pc, #556]	@ (800b680 <HAL_UART_IRQHandler+0x2bc>)
 800b454:	4013      	ands	r3, r2
 800b456:	2b00      	cmp	r3, #0
 800b458:	f000 8116 	beq.w	800b688 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b45c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b460:	f003 0301 	and.w	r3, r3, #1
 800b464:	2b00      	cmp	r3, #0
 800b466:	d011      	beq.n	800b48c <HAL_UART_IRQHandler+0xc8>
 800b468:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b46c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b470:	2b00      	cmp	r3, #0
 800b472:	d00b      	beq.n	800b48c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	2201      	movs	r2, #1
 800b47a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b482:	f043 0201 	orr.w	r2, r3, #1
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b48c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b490:	f003 0302 	and.w	r3, r3, #2
 800b494:	2b00      	cmp	r3, #0
 800b496:	d011      	beq.n	800b4bc <HAL_UART_IRQHandler+0xf8>
 800b498:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b49c:	f003 0301 	and.w	r3, r3, #1
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d00b      	beq.n	800b4bc <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	2202      	movs	r2, #2
 800b4aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b4b2:	f043 0204 	orr.w	r2, r3, #4
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b4bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b4c0:	f003 0304 	and.w	r3, r3, #4
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d011      	beq.n	800b4ec <HAL_UART_IRQHandler+0x128>
 800b4c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b4cc:	f003 0301 	and.w	r3, r3, #1
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d00b      	beq.n	800b4ec <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	2204      	movs	r2, #4
 800b4da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b4e2:	f043 0202 	orr.w	r2, r3, #2
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b4ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b4f0:	f003 0308 	and.w	r3, r3, #8
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d017      	beq.n	800b528 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b4f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b4fc:	f003 0320 	and.w	r3, r3, #32
 800b500:	2b00      	cmp	r3, #0
 800b502:	d105      	bne.n	800b510 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800b504:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800b508:	4b5c      	ldr	r3, [pc, #368]	@ (800b67c <HAL_UART_IRQHandler+0x2b8>)
 800b50a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d00b      	beq.n	800b528 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	2208      	movs	r2, #8
 800b516:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b51e:	f043 0208 	orr.w	r2, r3, #8
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b528:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b52c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b530:	2b00      	cmp	r3, #0
 800b532:	d012      	beq.n	800b55a <HAL_UART_IRQHandler+0x196>
 800b534:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b538:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d00c      	beq.n	800b55a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b548:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b550:	f043 0220 	orr.w	r2, r3, #32
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b560:	2b00      	cmp	r3, #0
 800b562:	f000 824b 	beq.w	800b9fc <HAL_UART_IRQHandler+0x638>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b566:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b56a:	f003 0320 	and.w	r3, r3, #32
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d013      	beq.n	800b59a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b572:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b576:	f003 0320 	and.w	r3, r3, #32
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d105      	bne.n	800b58a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b57e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b582:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b586:	2b00      	cmp	r3, #0
 800b588:	d007      	beq.n	800b59a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d003      	beq.n	800b59a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b596:	6878      	ldr	r0, [r7, #4]
 800b598:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b5a0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	689b      	ldr	r3, [r3, #8]
 800b5aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b5ae:	2b40      	cmp	r3, #64	@ 0x40
 800b5b0:	d005      	beq.n	800b5be <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b5b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800b5b6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d054      	beq.n	800b668 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b5be:	6878      	ldr	r0, [r7, #4]
 800b5c0:	f000 fdad 	bl	800c11e <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	689b      	ldr	r3, [r3, #8]
 800b5ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b5ce:	2b40      	cmp	r3, #64	@ 0x40
 800b5d0:	d146      	bne.n	800b660 <HAL_UART_IRQHandler+0x29c>
        {
#if !defined(USART_DMAREQUESTS_SW_WA)
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	3308      	adds	r3, #8
 800b5d8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5dc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b5e0:	e853 3f00 	ldrex	r3, [r3]
 800b5e4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800b5e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b5ec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b5f0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	3308      	adds	r3, #8
 800b5fa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800b5fe:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800b602:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b606:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800b60a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800b60e:	e841 2300 	strex	r3, r2, [r1]
 800b612:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800b616:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d1d9      	bne.n	800b5d2 <HAL_UART_IRQHandler+0x20e>

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b624:	2b00      	cmp	r3, #0
 800b626:	d017      	beq.n	800b658 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b62e:	4a15      	ldr	r2, [pc, #84]	@ (800b684 <HAL_UART_IRQHandler+0x2c0>)
 800b630:	66da      	str	r2, [r3, #108]	@ 0x6c

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b638:	4618      	mov	r0, r3
 800b63a:	f7f8 ff19 	bl	8004470 <HAL_DMA_Abort_IT>
 800b63e:	4603      	mov	r3, r0
 800b640:	2b00      	cmp	r3, #0
 800b642:	d019      	beq.n	800b678 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b64a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b64c:	687a      	ldr	r2, [r7, #4]
 800b64e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800b652:	4610      	mov	r0, r2
 800b654:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b656:	e00f      	b.n	800b678 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b658:	6878      	ldr	r0, [r7, #4]
 800b65a:	f000 f9e3 	bl	800ba24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b65e:	e00b      	b.n	800b678 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b660:	6878      	ldr	r0, [r7, #4]
 800b662:	f000 f9df 	bl	800ba24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b666:	e007      	b.n	800b678 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b668:	6878      	ldr	r0, [r7, #4]
 800b66a:	f000 f9db 	bl	800ba24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	2200      	movs	r2, #0
 800b672:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800b676:	e1c1      	b.n	800b9fc <HAL_UART_IRQHandler+0x638>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b678:	bf00      	nop
    return;
 800b67a:	e1bf      	b.n	800b9fc <HAL_UART_IRQHandler+0x638>
 800b67c:	10000001 	.word	0x10000001
 800b680:	04000120 	.word	0x04000120
 800b684:	0800c1eb 	.word	0x0800c1eb

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b68c:	2b01      	cmp	r3, #1
 800b68e:	f040 816a 	bne.w	800b966 <HAL_UART_IRQHandler+0x5a2>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b692:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b696:	f003 0310 	and.w	r3, r3, #16
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	f000 8163 	beq.w	800b966 <HAL_UART_IRQHandler+0x5a2>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b6a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b6a4:	f003 0310 	and.w	r3, r3, #16
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	f000 815c 	beq.w	800b966 <HAL_UART_IRQHandler+0x5a2>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	2210      	movs	r2, #16
 800b6b4:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	689b      	ldr	r3, [r3, #8]
 800b6bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b6c0:	2b40      	cmp	r3, #64	@ 0x40
 800b6c2:	f040 80d2 	bne.w	800b86a <HAL_UART_IRQHandler+0x4a6>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b6d0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b6d4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	f000 80ac 	beq.w	800b836 <HAL_UART_IRQHandler+0x472>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b6e4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b6e8:	429a      	cmp	r2, r3
 800b6ea:	f080 80a4 	bcs.w	800b836 <HAL_UART_IRQHandler+0x472>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b6f4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Mode != DMA_LINKEDLIST_CIRCULAR)
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b6fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b700:	2b81      	cmp	r3, #129	@ 0x81
 800b702:	f000 8087 	beq.w	800b814 <HAL_UART_IRQHandler+0x450>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b70e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b712:	e853 3f00 	ldrex	r3, [r3]
 800b716:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800b71a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b71e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b722:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	461a      	mov	r2, r3
 800b72c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b730:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b734:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b738:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800b73c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800b740:	e841 2300 	strex	r3, r2, [r1]
 800b744:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800b748:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d1da      	bne.n	800b706 <HAL_UART_IRQHandler+0x342>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	3308      	adds	r3, #8
 800b756:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b758:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b75a:	e853 3f00 	ldrex	r3, [r3]
 800b75e:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800b760:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b762:	f023 0301 	bic.w	r3, r3, #1
 800b766:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	3308      	adds	r3, #8
 800b770:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800b774:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800b778:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b77a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800b77c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800b780:	e841 2300 	strex	r3, r2, [r1]
 800b784:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800b786:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d1e1      	bne.n	800b750 <HAL_UART_IRQHandler+0x38c>

#if !defined(USART_DMAREQUESTS_SW_WA)
          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	3308      	adds	r3, #8
 800b792:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b794:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b796:	e853 3f00 	ldrex	r3, [r3]
 800b79a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800b79c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b79e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b7a2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	3308      	adds	r3, #8
 800b7ac:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800b7b0:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800b7b2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7b4:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800b7b6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b7b8:	e841 2300 	strex	r3, r2, [r1]
 800b7bc:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800b7be:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d1e3      	bne.n	800b78c <HAL_UART_IRQHandler+0x3c8>

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	2220      	movs	r2, #32
 800b7c8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	2200      	movs	r2, #0
 800b7d0:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b7da:	e853 3f00 	ldrex	r3, [r3]
 800b7de:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b7e0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b7e2:	f023 0310 	bic.w	r3, r3, #16
 800b7e6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	461a      	mov	r2, r3
 800b7f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b7f4:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b7f6:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7f8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b7fa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b7fc:	e841 2300 	strex	r3, r2, [r1]
 800b800:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b802:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b804:	2b00      	cmp	r3, #0
 800b806:	d1e4      	bne.n	800b7d2 <HAL_UART_IRQHandler+0x40e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b80e:	4618      	mov	r0, r3
 800b810:	f7f8 fdb2 	bl	8004378 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	2202      	movs	r2, #2
 800b818:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b826:	b29b      	uxth	r3, r3
 800b828:	1ad3      	subs	r3, r2, r3
 800b82a:	b29b      	uxth	r3, r3
 800b82c:	4619      	mov	r1, r3
 800b82e:	6878      	ldr	r0, [r7, #4]
 800b830:	f000 f902 	bl	800ba38 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800b834:	e0e4      	b.n	800ba00 <HAL_UART_IRQHandler+0x63c>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b83c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b840:	429a      	cmp	r2, r3
 800b842:	f040 80dd 	bne.w	800ba00 <HAL_UART_IRQHandler+0x63c>
          if (huart->hdmarx->Mode == DMA_LINKEDLIST_CIRCULAR)
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b84c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b84e:	2b81      	cmp	r3, #129	@ 0x81
 800b850:	f040 80d6 	bne.w	800ba00 <HAL_UART_IRQHandler+0x63c>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	2202      	movs	r2, #2
 800b858:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b860:	4619      	mov	r1, r3
 800b862:	6878      	ldr	r0, [r7, #4]
 800b864:	f000 f8e8 	bl	800ba38 <HAL_UARTEx_RxEventCallback>
      return;
 800b868:	e0ca      	b.n	800ba00 <HAL_UART_IRQHandler+0x63c>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b876:	b29b      	uxth	r3, r3
 800b878:	1ad3      	subs	r3, r2, r3
 800b87a:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b884:	b29b      	uxth	r3, r3
 800b886:	2b00      	cmp	r3, #0
 800b888:	f000 80bc 	beq.w	800ba04 <HAL_UART_IRQHandler+0x640>
          && (nb_rx_data > 0U))
 800b88c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b890:	2b00      	cmp	r3, #0
 800b892:	f000 80b7 	beq.w	800ba04 <HAL_UART_IRQHandler+0x640>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b89c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b89e:	e853 3f00 	ldrex	r3, [r3]
 800b8a2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b8a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b8a6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b8aa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	461a      	mov	r2, r3
 800b8b4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b8b8:	647b      	str	r3, [r7, #68]	@ 0x44
 800b8ba:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8bc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b8be:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b8c0:	e841 2300 	strex	r3, r2, [r1]
 800b8c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b8c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d1e4      	bne.n	800b896 <HAL_UART_IRQHandler+0x4d2>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	3308      	adds	r3, #8
 800b8d2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8d6:	e853 3f00 	ldrex	r3, [r3]
 800b8da:	623b      	str	r3, [r7, #32]
   return(result);
 800b8dc:	6a3b      	ldr	r3, [r7, #32]
 800b8de:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b8e2:	f023 0301 	bic.w	r3, r3, #1
 800b8e6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	3308      	adds	r3, #8
 800b8f0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800b8f4:	633a      	str	r2, [r7, #48]	@ 0x30
 800b8f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8f8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b8fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b8fc:	e841 2300 	strex	r3, r2, [r1]
 800b900:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b902:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b904:	2b00      	cmp	r3, #0
 800b906:	d1e1      	bne.n	800b8cc <HAL_UART_IRQHandler+0x508>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	2220      	movs	r2, #32
 800b90c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	2200      	movs	r2, #0
 800b914:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	2200      	movs	r2, #0
 800b91a:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b922:	693b      	ldr	r3, [r7, #16]
 800b924:	e853 3f00 	ldrex	r3, [r3]
 800b928:	60fb      	str	r3, [r7, #12]
   return(result);
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	f023 0310 	bic.w	r3, r3, #16
 800b930:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	461a      	mov	r2, r3
 800b93a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800b93e:	61fb      	str	r3, [r7, #28]
 800b940:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b942:	69b9      	ldr	r1, [r7, #24]
 800b944:	69fa      	ldr	r2, [r7, #28]
 800b946:	e841 2300 	strex	r3, r2, [r1]
 800b94a:	617b      	str	r3, [r7, #20]
   return(result);
 800b94c:	697b      	ldr	r3, [r7, #20]
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d1e4      	bne.n	800b91c <HAL_UART_IRQHandler+0x558>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	2202      	movs	r2, #2
 800b956:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b958:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b95c:	4619      	mov	r1, r3
 800b95e:	6878      	ldr	r0, [r7, #4]
 800b960:	f000 f86a 	bl	800ba38 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b964:	e04e      	b.n	800ba04 <HAL_UART_IRQHandler+0x640>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800b966:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b96a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d014      	beq.n	800b99c <HAL_UART_IRQHandler+0x5d8>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800b972:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b976:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d105      	bne.n	800b98a <HAL_UART_IRQHandler+0x5c6>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800b97e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b982:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b986:	2b00      	cmp	r3, #0
 800b988:	d008      	beq.n	800b99c <HAL_UART_IRQHandler+0x5d8>
  {
    if (huart->TxISR != NULL)
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d03a      	beq.n	800ba08 <HAL_UART_IRQHandler+0x644>
    {
      huart->TxISR(huart);
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b996:	6878      	ldr	r0, [r7, #4]
 800b998:	4798      	blx	r3
    }
    return;
 800b99a:	e035      	b.n	800ba08 <HAL_UART_IRQHandler+0x644>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b99c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b9a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d009      	beq.n	800b9bc <HAL_UART_IRQHandler+0x5f8>
 800b9a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b9ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d003      	beq.n	800b9bc <HAL_UART_IRQHandler+0x5f8>
  {
    UART_EndTransmit_IT(huart);
 800b9b4:	6878      	ldr	r0, [r7, #4]
 800b9b6:	f000 fc2a 	bl	800c20e <UART_EndTransmit_IT>
    return;
 800b9ba:	e026      	b.n	800ba0a <HAL_UART_IRQHandler+0x646>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800b9bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b9c0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d009      	beq.n	800b9dc <HAL_UART_IRQHandler+0x618>
 800b9c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b9cc:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d003      	beq.n	800b9dc <HAL_UART_IRQHandler+0x618>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800b9d4:	6878      	ldr	r0, [r7, #4]
 800b9d6:	f000 fc4f 	bl	800c278 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b9da:	e016      	b.n	800ba0a <HAL_UART_IRQHandler+0x646>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800b9dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b9e0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d010      	beq.n	800ba0a <HAL_UART_IRQHandler+0x646>
 800b9e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	da0c      	bge.n	800ba0a <HAL_UART_IRQHandler+0x646>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800b9f0:	6878      	ldr	r0, [r7, #4]
 800b9f2:	f000 fc37 	bl	800c264 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b9f6:	e008      	b.n	800ba0a <HAL_UART_IRQHandler+0x646>
      return;
 800b9f8:	bf00      	nop
 800b9fa:	e006      	b.n	800ba0a <HAL_UART_IRQHandler+0x646>
    return;
 800b9fc:	bf00      	nop
 800b9fe:	e004      	b.n	800ba0a <HAL_UART_IRQHandler+0x646>
      return;
 800ba00:	bf00      	nop
 800ba02:	e002      	b.n	800ba0a <HAL_UART_IRQHandler+0x646>
      return;
 800ba04:	bf00      	nop
 800ba06:	e000      	b.n	800ba0a <HAL_UART_IRQHandler+0x646>
    return;
 800ba08:	bf00      	nop
  }
}
 800ba0a:	37e8      	adds	r7, #232	@ 0xe8
 800ba0c:	46bd      	mov	sp, r7
 800ba0e:	bd80      	pop	{r7, pc}

0800ba10 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800ba10:	b480      	push	{r7}
 800ba12:	b083      	sub	sp, #12
 800ba14:	af00      	add	r7, sp, #0
 800ba16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800ba18:	bf00      	nop
 800ba1a:	370c      	adds	r7, #12
 800ba1c:	46bd      	mov	sp, r7
 800ba1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba22:	4770      	bx	lr

0800ba24 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ba24:	b480      	push	{r7}
 800ba26:	b083      	sub	sp, #12
 800ba28:	af00      	add	r7, sp, #0
 800ba2a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800ba2c:	bf00      	nop
 800ba2e:	370c      	adds	r7, #12
 800ba30:	46bd      	mov	sp, r7
 800ba32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba36:	4770      	bx	lr

0800ba38 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800ba38:	b480      	push	{r7}
 800ba3a:	b083      	sub	sp, #12
 800ba3c:	af00      	add	r7, sp, #0
 800ba3e:	6078      	str	r0, [r7, #4]
 800ba40:	460b      	mov	r3, r1
 800ba42:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800ba44:	bf00      	nop
 800ba46:	370c      	adds	r7, #12
 800ba48:	46bd      	mov	sp, r7
 800ba4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba4e:	4770      	bx	lr

0800ba50 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ba50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ba54:	b094      	sub	sp, #80	@ 0x50
 800ba56:	af00      	add	r7, sp, #0
 800ba58:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ba5a:	2300      	movs	r3, #0
 800ba5c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800ba60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba62:	681a      	ldr	r2, [r3, #0]
 800ba64:	4b83      	ldr	r3, [pc, #524]	@ (800bc74 <UART_SetConfig+0x224>)
 800ba66:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ba68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba6a:	689a      	ldr	r2, [r3, #8]
 800ba6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba6e:	691b      	ldr	r3, [r3, #16]
 800ba70:	431a      	orrs	r2, r3
 800ba72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba74:	695b      	ldr	r3, [r3, #20]
 800ba76:	431a      	orrs	r2, r3
 800ba78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba7a:	69db      	ldr	r3, [r3, #28]
 800ba7c:	4313      	orrs	r3, r2
 800ba7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ba80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	497c      	ldr	r1, [pc, #496]	@ (800bc78 <UART_SetConfig+0x228>)
 800ba88:	4019      	ands	r1, r3
 800ba8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba8c:	681a      	ldr	r2, [r3, #0]
 800ba8e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ba90:	430b      	orrs	r3, r1
 800ba92:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ba94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	685b      	ldr	r3, [r3, #4]
 800ba9a:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800ba9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800baa0:	68d9      	ldr	r1, [r3, #12]
 800baa2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800baa4:	681a      	ldr	r2, [r3, #0]
 800baa6:	ea40 0301 	orr.w	r3, r0, r1
 800baaa:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800baac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800baae:	699b      	ldr	r3, [r3, #24]
 800bab0:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800bab2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bab4:	681a      	ldr	r2, [r3, #0]
 800bab6:	4b6f      	ldr	r3, [pc, #444]	@ (800bc74 <UART_SetConfig+0x224>)
 800bab8:	429a      	cmp	r2, r3
 800baba:	d009      	beq.n	800bad0 <UART_SetConfig+0x80>
 800babc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800babe:	681a      	ldr	r2, [r3, #0]
 800bac0:	4b6e      	ldr	r3, [pc, #440]	@ (800bc7c <UART_SetConfig+0x22c>)
 800bac2:	429a      	cmp	r2, r3
 800bac4:	d004      	beq.n	800bad0 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800bac6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bac8:	6a1a      	ldr	r2, [r3, #32]
 800baca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bacc:	4313      	orrs	r3, r2
 800bace:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800bad0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	689b      	ldr	r3, [r3, #8]
 800bad6:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 800bada:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 800bade:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bae0:	681a      	ldr	r2, [r3, #0]
 800bae2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bae4:	430b      	orrs	r3, r1
 800bae6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800bae8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800baee:	f023 000f 	bic.w	r0, r3, #15
 800baf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800baf4:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800baf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800baf8:	681a      	ldr	r2, [r3, #0]
 800bafa:	ea40 0301 	orr.w	r3, r0, r1
 800bafe:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bb00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb02:	681a      	ldr	r2, [r3, #0]
 800bb04:	4b5e      	ldr	r3, [pc, #376]	@ (800bc80 <UART_SetConfig+0x230>)
 800bb06:	429a      	cmp	r2, r3
 800bb08:	d102      	bne.n	800bb10 <UART_SetConfig+0xc0>
 800bb0a:	2301      	movs	r3, #1
 800bb0c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bb0e:	e032      	b.n	800bb76 <UART_SetConfig+0x126>
 800bb10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb12:	681a      	ldr	r2, [r3, #0]
 800bb14:	4b5b      	ldr	r3, [pc, #364]	@ (800bc84 <UART_SetConfig+0x234>)
 800bb16:	429a      	cmp	r2, r3
 800bb18:	d102      	bne.n	800bb20 <UART_SetConfig+0xd0>
 800bb1a:	2302      	movs	r3, #2
 800bb1c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bb1e:	e02a      	b.n	800bb76 <UART_SetConfig+0x126>
 800bb20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb22:	681a      	ldr	r2, [r3, #0]
 800bb24:	4b58      	ldr	r3, [pc, #352]	@ (800bc88 <UART_SetConfig+0x238>)
 800bb26:	429a      	cmp	r2, r3
 800bb28:	d102      	bne.n	800bb30 <UART_SetConfig+0xe0>
 800bb2a:	2304      	movs	r3, #4
 800bb2c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bb2e:	e022      	b.n	800bb76 <UART_SetConfig+0x126>
 800bb30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb32:	681a      	ldr	r2, [r3, #0]
 800bb34:	4b55      	ldr	r3, [pc, #340]	@ (800bc8c <UART_SetConfig+0x23c>)
 800bb36:	429a      	cmp	r2, r3
 800bb38:	d102      	bne.n	800bb40 <UART_SetConfig+0xf0>
 800bb3a:	2308      	movs	r3, #8
 800bb3c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bb3e:	e01a      	b.n	800bb76 <UART_SetConfig+0x126>
 800bb40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb42:	681a      	ldr	r2, [r3, #0]
 800bb44:	4b52      	ldr	r3, [pc, #328]	@ (800bc90 <UART_SetConfig+0x240>)
 800bb46:	429a      	cmp	r2, r3
 800bb48:	d102      	bne.n	800bb50 <UART_SetConfig+0x100>
 800bb4a:	2310      	movs	r3, #16
 800bb4c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bb4e:	e012      	b.n	800bb76 <UART_SetConfig+0x126>
 800bb50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb52:	681a      	ldr	r2, [r3, #0]
 800bb54:	4b4f      	ldr	r3, [pc, #316]	@ (800bc94 <UART_SetConfig+0x244>)
 800bb56:	429a      	cmp	r2, r3
 800bb58:	d103      	bne.n	800bb62 <UART_SetConfig+0x112>
 800bb5a:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800bb5e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bb60:	e009      	b.n	800bb76 <UART_SetConfig+0x126>
 800bb62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb64:	681a      	ldr	r2, [r3, #0]
 800bb66:	4b43      	ldr	r3, [pc, #268]	@ (800bc74 <UART_SetConfig+0x224>)
 800bb68:	429a      	cmp	r2, r3
 800bb6a:	d102      	bne.n	800bb72 <UART_SetConfig+0x122>
 800bb6c:	2320      	movs	r3, #32
 800bb6e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bb70:	e001      	b.n	800bb76 <UART_SetConfig+0x126>
 800bb72:	2300      	movs	r3, #0
 800bb74:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800bb76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb78:	681a      	ldr	r2, [r3, #0]
 800bb7a:	4b3e      	ldr	r3, [pc, #248]	@ (800bc74 <UART_SetConfig+0x224>)
 800bb7c:	429a      	cmp	r2, r3
 800bb7e:	d005      	beq.n	800bb8c <UART_SetConfig+0x13c>
 800bb80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb82:	681a      	ldr	r2, [r3, #0]
 800bb84:	4b3d      	ldr	r3, [pc, #244]	@ (800bc7c <UART_SetConfig+0x22c>)
 800bb86:	429a      	cmp	r2, r3
 800bb88:	f040 8088 	bne.w	800bc9c <UART_SetConfig+0x24c>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800bb8c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bb8e:	2200      	movs	r2, #0
 800bb90:	623b      	str	r3, [r7, #32]
 800bb92:	627a      	str	r2, [r7, #36]	@ 0x24
 800bb94:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800bb98:	f7fd ff0e 	bl	80099b8 <HAL_RCCEx_GetPeriphCLKFreq>
 800bb9c:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800bb9e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	f000 80eb 	beq.w	800bd7c <UART_SetConfig+0x32c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800bba6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bba8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bbaa:	4a3b      	ldr	r2, [pc, #236]	@ (800bc98 <UART_SetConfig+0x248>)
 800bbac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bbb0:	461a      	mov	r2, r3
 800bbb2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bbb4:	fbb3 f3f2 	udiv	r3, r3, r2
 800bbb8:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bbba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bbbc:	685a      	ldr	r2, [r3, #4]
 800bbbe:	4613      	mov	r3, r2
 800bbc0:	005b      	lsls	r3, r3, #1
 800bbc2:	4413      	add	r3, r2
 800bbc4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bbc6:	429a      	cmp	r2, r3
 800bbc8:	d305      	bcc.n	800bbd6 <UART_SetConfig+0x186>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800bbca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bbcc:	685b      	ldr	r3, [r3, #4]
 800bbce:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bbd0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bbd2:	429a      	cmp	r2, r3
 800bbd4:	d903      	bls.n	800bbde <UART_SetConfig+0x18e>
      {
        ret = HAL_ERROR;
 800bbd6:	2301      	movs	r3, #1
 800bbd8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800bbdc:	e048      	b.n	800bc70 <UART_SetConfig+0x220>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bbde:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bbe0:	2200      	movs	r2, #0
 800bbe2:	61bb      	str	r3, [r7, #24]
 800bbe4:	61fa      	str	r2, [r7, #28]
 800bbe6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bbe8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bbea:	4a2b      	ldr	r2, [pc, #172]	@ (800bc98 <UART_SetConfig+0x248>)
 800bbec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bbf0:	b29b      	uxth	r3, r3
 800bbf2:	2200      	movs	r2, #0
 800bbf4:	613b      	str	r3, [r7, #16]
 800bbf6:	617a      	str	r2, [r7, #20]
 800bbf8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800bbfc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800bc00:	f7f5 f866 	bl	8000cd0 <__aeabi_uldivmod>
 800bc04:	4602      	mov	r2, r0
 800bc06:	460b      	mov	r3, r1
 800bc08:	4610      	mov	r0, r2
 800bc0a:	4619      	mov	r1, r3
 800bc0c:	f04f 0200 	mov.w	r2, #0
 800bc10:	f04f 0300 	mov.w	r3, #0
 800bc14:	020b      	lsls	r3, r1, #8
 800bc16:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800bc1a:	0202      	lsls	r2, r0, #8
 800bc1c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bc1e:	6849      	ldr	r1, [r1, #4]
 800bc20:	0849      	lsrs	r1, r1, #1
 800bc22:	2000      	movs	r0, #0
 800bc24:	460c      	mov	r4, r1
 800bc26:	4605      	mov	r5, r0
 800bc28:	eb12 0804 	adds.w	r8, r2, r4
 800bc2c:	eb43 0905 	adc.w	r9, r3, r5
 800bc30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc32:	685b      	ldr	r3, [r3, #4]
 800bc34:	2200      	movs	r2, #0
 800bc36:	60bb      	str	r3, [r7, #8]
 800bc38:	60fa      	str	r2, [r7, #12]
 800bc3a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800bc3e:	4640      	mov	r0, r8
 800bc40:	4649      	mov	r1, r9
 800bc42:	f7f5 f845 	bl	8000cd0 <__aeabi_uldivmod>
 800bc46:	4602      	mov	r2, r0
 800bc48:	460b      	mov	r3, r1
 800bc4a:	4613      	mov	r3, r2
 800bc4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800bc4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bc50:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800bc54:	d308      	bcc.n	800bc68 <UART_SetConfig+0x218>
 800bc56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bc58:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bc5c:	d204      	bcs.n	800bc68 <UART_SetConfig+0x218>
        {
          huart->Instance->BRR = usartdiv;
 800bc5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800bc64:	60da      	str	r2, [r3, #12]
 800bc66:	e003      	b.n	800bc70 <UART_SetConfig+0x220>
        }
        else
        {
          ret = HAL_ERROR;
 800bc68:	2301      	movs	r3, #1
 800bc6a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 800bc6e:	e085      	b.n	800bd7c <UART_SetConfig+0x32c>
 800bc70:	e084      	b.n	800bd7c <UART_SetConfig+0x32c>
 800bc72:	bf00      	nop
 800bc74:	46002400 	.word	0x46002400
 800bc78:	cfff69f3 	.word	0xcfff69f3
 800bc7c:	56002400 	.word	0x56002400
 800bc80:	40013800 	.word	0x40013800
 800bc84:	40004400 	.word	0x40004400
 800bc88:	40004800 	.word	0x40004800
 800bc8c:	40004c00 	.word	0x40004c00
 800bc90:	40005000 	.word	0x40005000
 800bc94:	40006400 	.word	0x40006400
 800bc98:	08011d28 	.word	0x08011d28
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bc9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc9e:	69db      	ldr	r3, [r3, #28]
 800bca0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800bca4:	d13c      	bne.n	800bd20 <UART_SetConfig+0x2d0>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800bca6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bca8:	2200      	movs	r2, #0
 800bcaa:	603b      	str	r3, [r7, #0]
 800bcac:	607a      	str	r2, [r7, #4]
 800bcae:	e9d7 0100 	ldrd	r0, r1, [r7]
 800bcb2:	f7fd fe81 	bl	80099b8 <HAL_RCCEx_GetPeriphCLKFreq>
 800bcb6:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800bcb8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d05e      	beq.n	800bd7c <UART_SetConfig+0x32c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bcbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bcc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bcc2:	4a39      	ldr	r2, [pc, #228]	@ (800bda8 <UART_SetConfig+0x358>)
 800bcc4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bcc8:	461a      	mov	r2, r3
 800bcca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bccc:	fbb3 f3f2 	udiv	r3, r3, r2
 800bcd0:	005a      	lsls	r2, r3, #1
 800bcd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bcd4:	685b      	ldr	r3, [r3, #4]
 800bcd6:	085b      	lsrs	r3, r3, #1
 800bcd8:	441a      	add	r2, r3
 800bcda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bcdc:	685b      	ldr	r3, [r3, #4]
 800bcde:	fbb2 f3f3 	udiv	r3, r2, r3
 800bce2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bce4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bce6:	2b0f      	cmp	r3, #15
 800bce8:	d916      	bls.n	800bd18 <UART_SetConfig+0x2c8>
 800bcea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bcec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bcf0:	d212      	bcs.n	800bd18 <UART_SetConfig+0x2c8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800bcf2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bcf4:	b29b      	uxth	r3, r3
 800bcf6:	f023 030f 	bic.w	r3, r3, #15
 800bcfa:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800bcfc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bcfe:	085b      	lsrs	r3, r3, #1
 800bd00:	b29b      	uxth	r3, r3
 800bd02:	f003 0307 	and.w	r3, r3, #7
 800bd06:	b29a      	uxth	r2, r3
 800bd08:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800bd0a:	4313      	orrs	r3, r2
 800bd0c:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 800bd0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800bd14:	60da      	str	r2, [r3, #12]
 800bd16:	e031      	b.n	800bd7c <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 800bd18:	2301      	movs	r3, #1
 800bd1a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800bd1e:	e02d      	b.n	800bd7c <UART_SetConfig+0x32c>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800bd20:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bd22:	2200      	movs	r2, #0
 800bd24:	469a      	mov	sl, r3
 800bd26:	4693      	mov	fp, r2
 800bd28:	4650      	mov	r0, sl
 800bd2a:	4659      	mov	r1, fp
 800bd2c:	f7fd fe44 	bl	80099b8 <HAL_RCCEx_GetPeriphCLKFreq>
 800bd30:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 800bd32:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d021      	beq.n	800bd7c <UART_SetConfig+0x32c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bd38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bd3c:	4a1a      	ldr	r2, [pc, #104]	@ (800bda8 <UART_SetConfig+0x358>)
 800bd3e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bd42:	461a      	mov	r2, r3
 800bd44:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bd46:	fbb3 f2f2 	udiv	r2, r3, r2
 800bd4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd4c:	685b      	ldr	r3, [r3, #4]
 800bd4e:	085b      	lsrs	r3, r3, #1
 800bd50:	441a      	add	r2, r3
 800bd52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd54:	685b      	ldr	r3, [r3, #4]
 800bd56:	fbb2 f3f3 	udiv	r3, r2, r3
 800bd5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bd5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bd5e:	2b0f      	cmp	r3, #15
 800bd60:	d909      	bls.n	800bd76 <UART_SetConfig+0x326>
 800bd62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bd64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bd68:	d205      	bcs.n	800bd76 <UART_SetConfig+0x326>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800bd6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bd6c:	b29a      	uxth	r2, r3
 800bd6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	60da      	str	r2, [r3, #12]
 800bd74:	e002      	b.n	800bd7c <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 800bd76:	2301      	movs	r3, #1
 800bd78:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800bd7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd7e:	2201      	movs	r2, #1
 800bd80:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800bd84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd86:	2201      	movs	r2, #1
 800bd88:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800bd8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd8e:	2200      	movs	r2, #0
 800bd90:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800bd92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd94:	2200      	movs	r2, #0
 800bd96:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800bd98:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800bd9c:	4618      	mov	r0, r3
 800bd9e:	3750      	adds	r7, #80	@ 0x50
 800bda0:	46bd      	mov	sp, r7
 800bda2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bda6:	bf00      	nop
 800bda8:	08011d28 	.word	0x08011d28

0800bdac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800bdac:	b480      	push	{r7}
 800bdae:	b083      	sub	sp, #12
 800bdb0:	af00      	add	r7, sp, #0
 800bdb2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bdb8:	f003 0308 	and.w	r3, r3, #8
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d00a      	beq.n	800bdd6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	685b      	ldr	r3, [r3, #4]
 800bdc6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	430a      	orrs	r2, r1
 800bdd4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bdda:	f003 0301 	and.w	r3, r3, #1
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d00a      	beq.n	800bdf8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	685b      	ldr	r3, [r3, #4]
 800bde8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	430a      	orrs	r2, r1
 800bdf6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bdfc:	f003 0302 	and.w	r3, r3, #2
 800be00:	2b00      	cmp	r3, #0
 800be02:	d00a      	beq.n	800be1a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	685b      	ldr	r3, [r3, #4]
 800be0a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	430a      	orrs	r2, r1
 800be18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be1e:	f003 0304 	and.w	r3, r3, #4
 800be22:	2b00      	cmp	r3, #0
 800be24:	d00a      	beq.n	800be3c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	685b      	ldr	r3, [r3, #4]
 800be2c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	430a      	orrs	r2, r1
 800be3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be40:	f003 0310 	and.w	r3, r3, #16
 800be44:	2b00      	cmp	r3, #0
 800be46:	d00a      	beq.n	800be5e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	689b      	ldr	r3, [r3, #8]
 800be4e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	430a      	orrs	r2, r1
 800be5c:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be62:	f003 0320 	and.w	r3, r3, #32
 800be66:	2b00      	cmp	r3, #0
 800be68:	d00a      	beq.n	800be80 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	689b      	ldr	r3, [r3, #8]
 800be70:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	430a      	orrs	r2, r1
 800be7e:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d01a      	beq.n	800bec2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	685b      	ldr	r3, [r3, #4]
 800be92:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	430a      	orrs	r2, r1
 800bea0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bea6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800beaa:	d10a      	bne.n	800bec2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	685b      	ldr	r3, [r3, #4]
 800beb2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	430a      	orrs	r2, r1
 800bec0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bec6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800beca:	2b00      	cmp	r3, #0
 800becc:	d00a      	beq.n	800bee4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	685b      	ldr	r3, [r3, #4]
 800bed4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	430a      	orrs	r2, r1
 800bee2:	605a      	str	r2, [r3, #4]
  }
}
 800bee4:	bf00      	nop
 800bee6:	370c      	adds	r7, #12
 800bee8:	46bd      	mov	sp, r7
 800beea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beee:	4770      	bx	lr

0800bef0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800bef0:	b580      	push	{r7, lr}
 800bef2:	b098      	sub	sp, #96	@ 0x60
 800bef4:	af02      	add	r7, sp, #8
 800bef6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	2200      	movs	r2, #0
 800befc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800bf00:	f7f6 fc58 	bl	80027b4 <HAL_GetTick>
 800bf04:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	f003 0308 	and.w	r3, r3, #8
 800bf10:	2b08      	cmp	r3, #8
 800bf12:	d12f      	bne.n	800bf74 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bf14:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800bf18:	9300      	str	r3, [sp, #0]
 800bf1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bf1c:	2200      	movs	r2, #0
 800bf1e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800bf22:	6878      	ldr	r0, [r7, #4]
 800bf24:	f000 f88e 	bl	800c044 <UART_WaitOnFlagUntilTimeout>
 800bf28:	4603      	mov	r3, r0
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d022      	beq.n	800bf74 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf36:	e853 3f00 	ldrex	r3, [r3]
 800bf3a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800bf3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bf3e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bf42:	653b      	str	r3, [r7, #80]	@ 0x50
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	461a      	mov	r2, r3
 800bf4a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bf4c:	647b      	str	r3, [r7, #68]	@ 0x44
 800bf4e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf50:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800bf52:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bf54:	e841 2300 	strex	r3, r2, [r1]
 800bf58:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800bf5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d1e6      	bne.n	800bf2e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	2220      	movs	r2, #32
 800bf64:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	2200      	movs	r2, #0
 800bf6c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bf70:	2303      	movs	r3, #3
 800bf72:	e063      	b.n	800c03c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	f003 0304 	and.w	r3, r3, #4
 800bf7e:	2b04      	cmp	r3, #4
 800bf80:	d149      	bne.n	800c016 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bf82:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800bf86:	9300      	str	r3, [sp, #0]
 800bf88:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bf8a:	2200      	movs	r2, #0
 800bf8c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800bf90:	6878      	ldr	r0, [r7, #4]
 800bf92:	f000 f857 	bl	800c044 <UART_WaitOnFlagUntilTimeout>
 800bf96:	4603      	mov	r3, r0
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d03c      	beq.n	800c016 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfa4:	e853 3f00 	ldrex	r3, [r3]
 800bfa8:	623b      	str	r3, [r7, #32]
   return(result);
 800bfaa:	6a3b      	ldr	r3, [r7, #32]
 800bfac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800bfb0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	461a      	mov	r2, r3
 800bfb8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bfba:	633b      	str	r3, [r7, #48]	@ 0x30
 800bfbc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfbe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bfc0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bfc2:	e841 2300 	strex	r3, r2, [r1]
 800bfc6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800bfc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d1e6      	bne.n	800bf9c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	3308      	adds	r3, #8
 800bfd4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfd6:	693b      	ldr	r3, [r7, #16]
 800bfd8:	e853 3f00 	ldrex	r3, [r3]
 800bfdc:	60fb      	str	r3, [r7, #12]
   return(result);
 800bfde:	68fb      	ldr	r3, [r7, #12]
 800bfe0:	f023 0301 	bic.w	r3, r3, #1
 800bfe4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	3308      	adds	r3, #8
 800bfec:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bfee:	61fa      	str	r2, [r7, #28]
 800bff0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bff2:	69b9      	ldr	r1, [r7, #24]
 800bff4:	69fa      	ldr	r2, [r7, #28]
 800bff6:	e841 2300 	strex	r3, r2, [r1]
 800bffa:	617b      	str	r3, [r7, #20]
   return(result);
 800bffc:	697b      	ldr	r3, [r7, #20]
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d1e5      	bne.n	800bfce <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	2220      	movs	r2, #32
 800c006:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	2200      	movs	r2, #0
 800c00e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c012:	2303      	movs	r3, #3
 800c014:	e012      	b.n	800c03c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	2220      	movs	r2, #32
 800c01a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	2220      	movs	r2, #32
 800c022:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	2200      	movs	r2, #0
 800c02a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	2200      	movs	r2, #0
 800c030:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	2200      	movs	r2, #0
 800c036:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c03a:	2300      	movs	r3, #0
}
 800c03c:	4618      	mov	r0, r3
 800c03e:	3758      	adds	r7, #88	@ 0x58
 800c040:	46bd      	mov	sp, r7
 800c042:	bd80      	pop	{r7, pc}

0800c044 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c044:	b580      	push	{r7, lr}
 800c046:	b084      	sub	sp, #16
 800c048:	af00      	add	r7, sp, #0
 800c04a:	60f8      	str	r0, [r7, #12]
 800c04c:	60b9      	str	r1, [r7, #8]
 800c04e:	603b      	str	r3, [r7, #0]
 800c050:	4613      	mov	r3, r2
 800c052:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c054:	e04f      	b.n	800c0f6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c056:	69bb      	ldr	r3, [r7, #24]
 800c058:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c05c:	d04b      	beq.n	800c0f6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c05e:	f7f6 fba9 	bl	80027b4 <HAL_GetTick>
 800c062:	4602      	mov	r2, r0
 800c064:	683b      	ldr	r3, [r7, #0]
 800c066:	1ad3      	subs	r3, r2, r3
 800c068:	69ba      	ldr	r2, [r7, #24]
 800c06a:	429a      	cmp	r2, r3
 800c06c:	d302      	bcc.n	800c074 <UART_WaitOnFlagUntilTimeout+0x30>
 800c06e:	69bb      	ldr	r3, [r7, #24]
 800c070:	2b00      	cmp	r3, #0
 800c072:	d101      	bne.n	800c078 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800c074:	2303      	movs	r3, #3
 800c076:	e04e      	b.n	800c116 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	f003 0304 	and.w	r3, r3, #4
 800c082:	2b00      	cmp	r3, #0
 800c084:	d037      	beq.n	800c0f6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800c086:	68bb      	ldr	r3, [r7, #8]
 800c088:	2b80      	cmp	r3, #128	@ 0x80
 800c08a:	d034      	beq.n	800c0f6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800c08c:	68bb      	ldr	r3, [r7, #8]
 800c08e:	2b40      	cmp	r3, #64	@ 0x40
 800c090:	d031      	beq.n	800c0f6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	69db      	ldr	r3, [r3, #28]
 800c098:	f003 0308 	and.w	r3, r3, #8
 800c09c:	2b08      	cmp	r3, #8
 800c09e:	d110      	bne.n	800c0c2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	2208      	movs	r2, #8
 800c0a6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c0a8:	68f8      	ldr	r0, [r7, #12]
 800c0aa:	f000 f838 	bl	800c11e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	2208      	movs	r2, #8
 800c0b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	2200      	movs	r2, #0
 800c0ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800c0be:	2301      	movs	r3, #1
 800c0c0:	e029      	b.n	800c116 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	69db      	ldr	r3, [r3, #28]
 800c0c8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c0cc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c0d0:	d111      	bne.n	800c0f6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c0da:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c0dc:	68f8      	ldr	r0, [r7, #12]
 800c0de:	f000 f81e 	bl	800c11e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c0e2:	68fb      	ldr	r3, [r7, #12]
 800c0e4:	2220      	movs	r2, #32
 800c0e6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	2200      	movs	r2, #0
 800c0ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800c0f2:	2303      	movs	r3, #3
 800c0f4:	e00f      	b.n	800c116 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	69da      	ldr	r2, [r3, #28]
 800c0fc:	68bb      	ldr	r3, [r7, #8]
 800c0fe:	4013      	ands	r3, r2
 800c100:	68ba      	ldr	r2, [r7, #8]
 800c102:	429a      	cmp	r2, r3
 800c104:	bf0c      	ite	eq
 800c106:	2301      	moveq	r3, #1
 800c108:	2300      	movne	r3, #0
 800c10a:	b2db      	uxtb	r3, r3
 800c10c:	461a      	mov	r2, r3
 800c10e:	79fb      	ldrb	r3, [r7, #7]
 800c110:	429a      	cmp	r2, r3
 800c112:	d0a0      	beq.n	800c056 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c114:	2300      	movs	r3, #0
}
 800c116:	4618      	mov	r0, r3
 800c118:	3710      	adds	r7, #16
 800c11a:	46bd      	mov	sp, r7
 800c11c:	bd80      	pop	{r7, pc}

0800c11e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c11e:	b480      	push	{r7}
 800c120:	b095      	sub	sp, #84	@ 0x54
 800c122:	af00      	add	r7, sp, #0
 800c124:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c12c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c12e:	e853 3f00 	ldrex	r3, [r3]
 800c132:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c134:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c136:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c13a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	461a      	mov	r2, r3
 800c142:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c144:	643b      	str	r3, [r7, #64]	@ 0x40
 800c146:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c148:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c14a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c14c:	e841 2300 	strex	r3, r2, [r1]
 800c150:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c152:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c154:	2b00      	cmp	r3, #0
 800c156:	d1e6      	bne.n	800c126 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	3308      	adds	r3, #8
 800c15e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c160:	6a3b      	ldr	r3, [r7, #32]
 800c162:	e853 3f00 	ldrex	r3, [r3]
 800c166:	61fb      	str	r3, [r7, #28]
   return(result);
 800c168:	69fb      	ldr	r3, [r7, #28]
 800c16a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c16e:	f023 0301 	bic.w	r3, r3, #1
 800c172:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	3308      	adds	r3, #8
 800c17a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c17c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c17e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c180:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c182:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c184:	e841 2300 	strex	r3, r2, [r1]
 800c188:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c18a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d1e3      	bne.n	800c158 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c194:	2b01      	cmp	r3, #1
 800c196:	d118      	bne.n	800c1ca <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	e853 3f00 	ldrex	r3, [r3]
 800c1a4:	60bb      	str	r3, [r7, #8]
   return(result);
 800c1a6:	68bb      	ldr	r3, [r7, #8]
 800c1a8:	f023 0310 	bic.w	r3, r3, #16
 800c1ac:	647b      	str	r3, [r7, #68]	@ 0x44
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	461a      	mov	r2, r3
 800c1b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c1b6:	61bb      	str	r3, [r7, #24]
 800c1b8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1ba:	6979      	ldr	r1, [r7, #20]
 800c1bc:	69ba      	ldr	r2, [r7, #24]
 800c1be:	e841 2300 	strex	r3, r2, [r1]
 800c1c2:	613b      	str	r3, [r7, #16]
   return(result);
 800c1c4:	693b      	ldr	r3, [r7, #16]
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d1e6      	bne.n	800c198 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	2220      	movs	r2, #32
 800c1ce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	2200      	movs	r2, #0
 800c1d6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	2200      	movs	r2, #0
 800c1dc:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800c1de:	bf00      	nop
 800c1e0:	3754      	adds	r7, #84	@ 0x54
 800c1e2:	46bd      	mov	sp, r7
 800c1e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1e8:	4770      	bx	lr

0800c1ea <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c1ea:	b580      	push	{r7, lr}
 800c1ec:	b084      	sub	sp, #16
 800c1ee:	af00      	add	r7, sp, #0
 800c1f0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c1f6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	2200      	movs	r2, #0
 800c1fc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c200:	68f8      	ldr	r0, [r7, #12]
 800c202:	f7ff fc0f 	bl	800ba24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c206:	bf00      	nop
 800c208:	3710      	adds	r7, #16
 800c20a:	46bd      	mov	sp, r7
 800c20c:	bd80      	pop	{r7, pc}

0800c20e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c20e:	b580      	push	{r7, lr}
 800c210:	b088      	sub	sp, #32
 800c212:	af00      	add	r7, sp, #0
 800c214:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	e853 3f00 	ldrex	r3, [r3]
 800c222:	60bb      	str	r3, [r7, #8]
   return(result);
 800c224:	68bb      	ldr	r3, [r7, #8]
 800c226:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c22a:	61fb      	str	r3, [r7, #28]
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	461a      	mov	r2, r3
 800c232:	69fb      	ldr	r3, [r7, #28]
 800c234:	61bb      	str	r3, [r7, #24]
 800c236:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c238:	6979      	ldr	r1, [r7, #20]
 800c23a:	69ba      	ldr	r2, [r7, #24]
 800c23c:	e841 2300 	strex	r3, r2, [r1]
 800c240:	613b      	str	r3, [r7, #16]
   return(result);
 800c242:	693b      	ldr	r3, [r7, #16]
 800c244:	2b00      	cmp	r3, #0
 800c246:	d1e6      	bne.n	800c216 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	2220      	movs	r2, #32
 800c24c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	2200      	movs	r2, #0
 800c254:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c256:	6878      	ldr	r0, [r7, #4]
 800c258:	f7ff fbda 	bl	800ba10 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c25c:	bf00      	nop
 800c25e:	3720      	adds	r7, #32
 800c260:	46bd      	mov	sp, r7
 800c262:	bd80      	pop	{r7, pc}

0800c264 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800c264:	b480      	push	{r7}
 800c266:	b083      	sub	sp, #12
 800c268:	af00      	add	r7, sp, #0
 800c26a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800c26c:	bf00      	nop
 800c26e:	370c      	adds	r7, #12
 800c270:	46bd      	mov	sp, r7
 800c272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c276:	4770      	bx	lr

0800c278 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800c278:	b480      	push	{r7}
 800c27a:	b083      	sub	sp, #12
 800c27c:	af00      	add	r7, sp, #0
 800c27e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800c280:	bf00      	nop
 800c282:	370c      	adds	r7, #12
 800c284:	46bd      	mov	sp, r7
 800c286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c28a:	4770      	bx	lr

0800c28c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c28c:	b480      	push	{r7}
 800c28e:	b085      	sub	sp, #20
 800c290:	af00      	add	r7, sp, #0
 800c292:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c29a:	2b01      	cmp	r3, #1
 800c29c:	d101      	bne.n	800c2a2 <HAL_UARTEx_DisableFifoMode+0x16>
 800c29e:	2302      	movs	r3, #2
 800c2a0:	e027      	b.n	800c2f2 <HAL_UARTEx_DisableFifoMode+0x66>
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	2201      	movs	r2, #1
 800c2a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	2224      	movs	r2, #36	@ 0x24
 800c2ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	681a      	ldr	r2, [r3, #0]
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	f022 0201 	bic.w	r2, r2, #1
 800c2c8:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c2ca:	68fb      	ldr	r3, [r7, #12]
 800c2cc:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800c2d0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	2200      	movs	r2, #0
 800c2d6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	68fa      	ldr	r2, [r7, #12]
 800c2de:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	2220      	movs	r2, #32
 800c2e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	2200      	movs	r2, #0
 800c2ec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c2f0:	2300      	movs	r3, #0
}
 800c2f2:	4618      	mov	r0, r3
 800c2f4:	3714      	adds	r7, #20
 800c2f6:	46bd      	mov	sp, r7
 800c2f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2fc:	4770      	bx	lr

0800c2fe <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c2fe:	b580      	push	{r7, lr}
 800c300:	b084      	sub	sp, #16
 800c302:	af00      	add	r7, sp, #0
 800c304:	6078      	str	r0, [r7, #4]
 800c306:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c30e:	2b01      	cmp	r3, #1
 800c310:	d101      	bne.n	800c316 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c312:	2302      	movs	r3, #2
 800c314:	e02d      	b.n	800c372 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	2201      	movs	r2, #1
 800c31a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	2224      	movs	r2, #36	@ 0x24
 800c322:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	681a      	ldr	r2, [r3, #0]
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	f022 0201 	bic.w	r2, r2, #1
 800c33c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	689b      	ldr	r3, [r3, #8]
 800c344:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	683a      	ldr	r2, [r7, #0]
 800c34e:	430a      	orrs	r2, r1
 800c350:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c352:	6878      	ldr	r0, [r7, #4]
 800c354:	f000 f850 	bl	800c3f8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	68fa      	ldr	r2, [r7, #12]
 800c35e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	2220      	movs	r2, #32
 800c364:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	2200      	movs	r2, #0
 800c36c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c370:	2300      	movs	r3, #0
}
 800c372:	4618      	mov	r0, r3
 800c374:	3710      	adds	r7, #16
 800c376:	46bd      	mov	sp, r7
 800c378:	bd80      	pop	{r7, pc}

0800c37a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c37a:	b580      	push	{r7, lr}
 800c37c:	b084      	sub	sp, #16
 800c37e:	af00      	add	r7, sp, #0
 800c380:	6078      	str	r0, [r7, #4]
 800c382:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c38a:	2b01      	cmp	r3, #1
 800c38c:	d101      	bne.n	800c392 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c38e:	2302      	movs	r3, #2
 800c390:	e02d      	b.n	800c3ee <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	2201      	movs	r2, #1
 800c396:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	2224      	movs	r2, #36	@ 0x24
 800c39e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	681a      	ldr	r2, [r3, #0]
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	f022 0201 	bic.w	r2, r2, #1
 800c3b8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	689b      	ldr	r3, [r3, #8]
 800c3c0:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	683a      	ldr	r2, [r7, #0]
 800c3ca:	430a      	orrs	r2, r1
 800c3cc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c3ce:	6878      	ldr	r0, [r7, #4]
 800c3d0:	f000 f812 	bl	800c3f8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	68fa      	ldr	r2, [r7, #12]
 800c3da:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	2220      	movs	r2, #32
 800c3e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	2200      	movs	r2, #0
 800c3e8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c3ec:	2300      	movs	r3, #0
}
 800c3ee:	4618      	mov	r0, r3
 800c3f0:	3710      	adds	r7, #16
 800c3f2:	46bd      	mov	sp, r7
 800c3f4:	bd80      	pop	{r7, pc}
	...

0800c3f8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c3f8:	b480      	push	{r7}
 800c3fa:	b085      	sub	sp, #20
 800c3fc:	af00      	add	r7, sp, #0
 800c3fe:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c404:	2b00      	cmp	r3, #0
 800c406:	d108      	bne.n	800c41a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	2201      	movs	r2, #1
 800c40c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	2201      	movs	r2, #1
 800c414:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c418:	e031      	b.n	800c47e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c41a:	2308      	movs	r3, #8
 800c41c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c41e:	2308      	movs	r3, #8
 800c420:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	689b      	ldr	r3, [r3, #8]
 800c428:	0e5b      	lsrs	r3, r3, #25
 800c42a:	b2db      	uxtb	r3, r3
 800c42c:	f003 0307 	and.w	r3, r3, #7
 800c430:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	689b      	ldr	r3, [r3, #8]
 800c438:	0f5b      	lsrs	r3, r3, #29
 800c43a:	b2db      	uxtb	r3, r3
 800c43c:	f003 0307 	and.w	r3, r3, #7
 800c440:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c442:	7bbb      	ldrb	r3, [r7, #14]
 800c444:	7b3a      	ldrb	r2, [r7, #12]
 800c446:	4911      	ldr	r1, [pc, #68]	@ (800c48c <UARTEx_SetNbDataToProcess+0x94>)
 800c448:	5c8a      	ldrb	r2, [r1, r2]
 800c44a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c44e:	7b3a      	ldrb	r2, [r7, #12]
 800c450:	490f      	ldr	r1, [pc, #60]	@ (800c490 <UARTEx_SetNbDataToProcess+0x98>)
 800c452:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c454:	fb93 f3f2 	sdiv	r3, r3, r2
 800c458:	b29a      	uxth	r2, r3
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c460:	7bfb      	ldrb	r3, [r7, #15]
 800c462:	7b7a      	ldrb	r2, [r7, #13]
 800c464:	4909      	ldr	r1, [pc, #36]	@ (800c48c <UARTEx_SetNbDataToProcess+0x94>)
 800c466:	5c8a      	ldrb	r2, [r1, r2]
 800c468:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c46c:	7b7a      	ldrb	r2, [r7, #13]
 800c46e:	4908      	ldr	r1, [pc, #32]	@ (800c490 <UARTEx_SetNbDataToProcess+0x98>)
 800c470:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c472:	fb93 f3f2 	sdiv	r3, r3, r2
 800c476:	b29a      	uxth	r2, r3
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800c47e:	bf00      	nop
 800c480:	3714      	adds	r7, #20
 800c482:	46bd      	mov	sp, r7
 800c484:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c488:	4770      	bx	lr
 800c48a:	bf00      	nop
 800c48c:	08011d40 	.word	0x08011d40
 800c490:	08011d48 	.word	0x08011d48

0800c494 <HAL_XSPI_Init>:
  *         in the XSPI_InitTypeDef and initialize the associated handle.
  * @param  hxspi : XSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_Init(XSPI_HandleTypeDef *hxspi)
{
 800c494:	b580      	push	{r7, lr}
 800c496:	b086      	sub	sp, #24
 800c498:	af02      	add	r7, sp, #8
 800c49a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c49c:	2300      	movs	r3, #0
 800c49e:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 800c4a0:	f7f6 f988 	bl	80027b4 <HAL_GetTick>
 800c4a4:	60b8      	str	r0, [r7, #8]

  /* Check the XSPI handle allocation */
  if (hxspi == NULL)
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	d102      	bne.n	800c4b2 <HAL_XSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 800c4ac:	2301      	movs	r3, #1
 800c4ae:	73fb      	strb	r3, [r7, #15]
 800c4b0:	e137      	b.n	800c722 <HAL_XSPI_Init+0x28e>
    assert_param(IS_XSPI_WRAP_SIZE(hxspi->Init.WrapSize));
    assert_param(IS_XSPI_CLK_PRESCALER(hxspi->Init.ClockPrescaler));
    assert_param(IS_XSPI_SAMPLE_SHIFTING(hxspi->Init.SampleShifting));
    assert_param(IS_XSPI_DHQC(hxspi->Init.DelayHoldQuarterCycle));
    assert_param(IS_XSPI_CS_BOUND(hxspi->Init.ChipSelectBoundary));
    if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	4a76      	ldr	r2, [pc, #472]	@ (800c690 <HAL_XSPI_Init+0x1fc>)
 800c4b8:	4293      	cmp	r3, r2
 800c4ba:	d008      	beq.n	800c4ce <HAL_XSPI_Init+0x3a>
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	4a74      	ldr	r2, [pc, #464]	@ (800c694 <HAL_XSPI_Init+0x200>)
 800c4c2:	4293      	cmp	r3, r2
 800c4c4:	d003      	beq.n	800c4ce <HAL_XSPI_Init+0x3a>
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	4a73      	ldr	r2, [pc, #460]	@ (800c698 <HAL_XSPI_Init+0x204>)
 800c4cc:	4293      	cmp	r3, r2
    {
      assert_param(IS_OCTOSPI_FIFO_THRESHOLD_BYTE(hxspi->Init.FifoThresholdByte));
    }
#if defined(HSPI1)
    if (IS_HSPI_ALL_INSTANCE(hxspi->Instance))
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	4a72      	ldr	r2, [pc, #456]	@ (800c69c <HAL_XSPI_Init+0x208>)
 800c4d4:	4293      	cmp	r3, r2
    {
      assert_param(IS_HSPI_FIFO_THRESHOLD_BYTE(hxspi->Init.FifoThresholdByte));
    }
#endif /* HSPI1 */
    if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	4a6d      	ldr	r2, [pc, #436]	@ (800c690 <HAL_XSPI_Init+0x1fc>)
 800c4dc:	4293      	cmp	r3, r2
 800c4de:	d008      	beq.n	800c4f2 <HAL_XSPI_Init+0x5e>
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	4a6b      	ldr	r2, [pc, #428]	@ (800c694 <HAL_XSPI_Init+0x200>)
 800c4e6:	4293      	cmp	r3, r2
 800c4e8:	d003      	beq.n	800c4f2 <HAL_XSPI_Init+0x5e>
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	4a6a      	ldr	r2, [pc, #424]	@ (800c698 <HAL_XSPI_Init+0x204>)
 800c4f0:	4293      	cmp	r3, r2
    {
      assert_param(IS_XSPI_DLYB_BYPASS(hxspi->Init.DelayBlockBypass));
    }
    if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	4a66      	ldr	r2, [pc, #408]	@ (800c690 <HAL_XSPI_Init+0x1fc>)
 800c4f8:	4293      	cmp	r3, r2
 800c4fa:	d008      	beq.n	800c50e <HAL_XSPI_Init+0x7a>
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	4a64      	ldr	r2, [pc, #400]	@ (800c694 <HAL_XSPI_Init+0x200>)
 800c502:	4293      	cmp	r3, r2
 800c504:	d003      	beq.n	800c50e <HAL_XSPI_Init+0x7a>
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	4a63      	ldr	r2, [pc, #396]	@ (800c698 <HAL_XSPI_Init+0x204>)
 800c50c:	4293      	cmp	r3, r2
    {
      assert_param(IS_XSPI_MAXTRAN(hxspi->Init.MaxTran));
    }
    /* Initialize error code */
    hxspi->ErrorCode = HAL_XSPI_ERROR_NONE;
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	2200      	movs	r2, #0
 800c512:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Check if the state is the reset state */
    if (hxspi->State == HAL_XSPI_STATE_RESET)
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c518:	2b00      	cmp	r3, #0
 800c51a:	f040 8102 	bne.w	800c722 <HAL_XSPI_Init+0x28e>

      /* Init the low level hardware */
      hxspi->MspInitCallback(hxspi);
#else
      /* Initialization of the low level hardware */
      HAL_XSPI_MspInit(hxspi);
 800c51e:	6878      	ldr	r0, [r7, #4]
 800c520:	f7f5 f81a 	bl	8001558 <HAL_XSPI_MspInit>
#endif /* defined (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the XSPI memory access */
      (void)HAL_XSPI_SetTimeout(hxspi, HAL_XSPI_TIMEOUT_DEFAULT_VALUE);
 800c524:	f241 3188 	movw	r1, #5000	@ 0x1388
 800c528:	6878      	ldr	r0, [r7, #4]
 800c52a:	f000 f8ff 	bl	800c72c <HAL_XSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, free running clock, clock mode */
      MODIFY_REG(hxspi->Instance->DCR1,
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	689a      	ldr	r2, [r3, #8]
 800c534:	4b5a      	ldr	r3, [pc, #360]	@ (800c6a0 <HAL_XSPI_Init+0x20c>)
 800c536:	4013      	ands	r3, r2
 800c538:	687a      	ldr	r2, [r7, #4]
 800c53a:	68d1      	ldr	r1, [r2, #12]
 800c53c:	687a      	ldr	r2, [r7, #4]
 800c53e:	6912      	ldr	r2, [r2, #16]
 800c540:	0412      	lsls	r2, r2, #16
 800c542:	4311      	orrs	r1, r2
 800c544:	687a      	ldr	r2, [r7, #4]
 800c546:	6952      	ldr	r2, [r2, #20]
 800c548:	3a01      	subs	r2, #1
 800c54a:	0212      	lsls	r2, r2, #8
 800c54c:	4311      	orrs	r1, r2
 800c54e:	687a      	ldr	r2, [r7, #4]
 800c550:	69d2      	ldr	r2, [r2, #28]
 800c552:	4311      	orrs	r1, r2
 800c554:	687a      	ldr	r2, [r7, #4]
 800c556:	6812      	ldr	r2, [r2, #0]
 800c558:	430b      	orrs	r3, r1
 800c55a:	6093      	str	r3, [r2, #8]
                 (XSPI_DCR1_MTYP | XSPI_DCR1_DEVSIZE | XSPI_DCR1_CSHT | XSPI_DCR1_FRCK | XSPI_DCR1_CKMODE),
                 (hxspi->Init.MemoryType | ((hxspi->Init.MemorySize) << XSPI_DCR1_DEVSIZE_Pos) |
                  ((hxspi->Init.ChipSelectHighTimeCycle - 1U) << XSPI_DCR1_CSHT_Pos) | hxspi->Init.ClockMode));

      /* Configure delay block bypass */
      if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	4a4b      	ldr	r2, [pc, #300]	@ (800c690 <HAL_XSPI_Init+0x1fc>)
 800c562:	4293      	cmp	r3, r2
 800c564:	d00e      	beq.n	800c584 <HAL_XSPI_Init+0xf0>
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	4a4a      	ldr	r2, [pc, #296]	@ (800c694 <HAL_XSPI_Init+0x200>)
 800c56c:	4293      	cmp	r3, r2
 800c56e:	d009      	beq.n	800c584 <HAL_XSPI_Init+0xf0>
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	4a48      	ldr	r2, [pc, #288]	@ (800c698 <HAL_XSPI_Init+0x204>)
 800c576:	4293      	cmp	r3, r2
 800c578:	d004      	beq.n	800c584 <HAL_XSPI_Init+0xf0>
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	681b      	ldr	r3, [r3, #0]
 800c57e:	4a49      	ldr	r2, [pc, #292]	@ (800c6a4 <HAL_XSPI_Init+0x210>)
 800c580:	4293      	cmp	r3, r2
 800c582:	d10a      	bne.n	800c59a <HAL_XSPI_Init+0x106>
      {
        MODIFY_REG(hxspi->Instance->DCR1, OCTOSPI_DCR1_DLYBYP, hxspi->Init.DelayBlockBypass);
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	689b      	ldr	r3, [r3, #8]
 800c58a:	f023 0108 	bic.w	r1, r3, #8
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	430a      	orrs	r2, r1
 800c598:	609a      	str	r2, [r3, #8]
      }

      /* Configure wrap size */
      MODIFY_REG(hxspi->Instance->DCR2, XSPI_DCR2_WRAPSIZE, hxspi->Init.WrapSize);
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	68db      	ldr	r3, [r3, #12]
 800c5a0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	6a1a      	ldr	r2, [r3, #32]
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	430a      	orrs	r2, r1
 800c5ae:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary */
      MODIFY_REG(hxspi->Instance->DCR3, XSPI_DCR3_CSBOUND, (hxspi->Init.ChipSelectBoundary << XSPI_DCR3_CSBOUND_Pos));
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	691b      	ldr	r3, [r3, #16]
 800c5b6:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c5be:	041a      	lsls	r2, r3, #16
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	430a      	orrs	r2, r1
 800c5c6:	611a      	str	r2, [r3, #16]

      /* Configure maximum transfer */
      if (IS_OSPI_ALL_INSTANCE(hxspi->Instance))
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	4a30      	ldr	r2, [pc, #192]	@ (800c690 <HAL_XSPI_Init+0x1fc>)
 800c5ce:	4293      	cmp	r3, r2
 800c5d0:	d00e      	beq.n	800c5f0 <HAL_XSPI_Init+0x15c>
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	4a2f      	ldr	r2, [pc, #188]	@ (800c694 <HAL_XSPI_Init+0x200>)
 800c5d8:	4293      	cmp	r3, r2
 800c5da:	d009      	beq.n	800c5f0 <HAL_XSPI_Init+0x15c>
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	4a2d      	ldr	r2, [pc, #180]	@ (800c698 <HAL_XSPI_Init+0x204>)
 800c5e2:	4293      	cmp	r3, r2
 800c5e4:	d004      	beq.n	800c5f0 <HAL_XSPI_Init+0x15c>
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	4a2e      	ldr	r2, [pc, #184]	@ (800c6a4 <HAL_XSPI_Init+0x210>)
 800c5ec:	4293      	cmp	r3, r2
 800c5ee:	d10a      	bne.n	800c606 <HAL_XSPI_Init+0x172>
      {
        MODIFY_REG(hxspi->Instance->DCR3, OCTOSPI_DCR3_MAXTRAN, \
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	691b      	ldr	r3, [r3, #16]
 800c5f6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	430a      	orrs	r2, r1
 800c604:	611a      	str	r2, [r3, #16]
                   (hxspi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
      }

      /* Configure refresh */
      hxspi->Instance->DCR4 = hxspi->Init.Refresh;
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	687a      	ldr	r2, [r7, #4]
 800c60c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800c60e:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FTHRES, ((hxspi->Init.FifoThresholdByte - 1U) << XSPI_CR_FTHRES_Pos));
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	685b      	ldr	r3, [r3, #4]
 800c61e:	3b01      	subs	r3, #1
 800c620:	021a      	lsls	r2, r3, #8
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	430a      	orrs	r2, r1
 800c628:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c62e:	9300      	str	r3, [sp, #0]
 800c630:	68bb      	ldr	r3, [r7, #8]
 800c632:	2200      	movs	r2, #0
 800c634:	2120      	movs	r1, #32
 800c636:	6878      	ldr	r0, [r7, #4]
 800c638:	f000 f887 	bl	800c74a <XSPI_WaitFlagStateUntilTimeout>
 800c63c:	4603      	mov	r3, r0
 800c63e:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800c640:	7bfb      	ldrb	r3, [r7, #15]
 800c642:	2b00      	cmp	r3, #0
 800c644:	d16d      	bne.n	800c722 <HAL_XSPI_Init+0x28e>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hxspi->Instance->DCR2, XSPI_DCR2_PRESCALER,
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	68db      	ldr	r3, [r3, #12]
 800c64c:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	430a      	orrs	r2, r1
 800c65a:	60da      	str	r2, [r3, #12]
                   ((hxspi->Init.ClockPrescaler) << XSPI_DCR2_PRESCALER_Pos));

#if defined(HSPI_CALFCR_FINE)
        if (IS_HSPI_ALL_INSTANCE(hxspi->Instance))
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	4a0e      	ldr	r2, [pc, #56]	@ (800c69c <HAL_XSPI_Init+0x208>)
 800c662:	4293      	cmp	r3, r2
 800c664:	d004      	beq.n	800c670 <HAL_XSPI_Init+0x1dc>
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	4a0f      	ldr	r2, [pc, #60]	@ (800c6a8 <HAL_XSPI_Init+0x214>)
 800c66c:	4293      	cmp	r3, r2
 800c66e:	d11d      	bne.n	800c6ac <HAL_XSPI_Init+0x218>
        {
          /* The configuration of clock prescaler trigger automatically a calibration process.
          So it is necessary to wait the calibration is complete */
          status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c674:	9300      	str	r3, [sp, #0]
 800c676:	68bb      	ldr	r3, [r7, #8]
 800c678:	2200      	movs	r2, #0
 800c67a:	2120      	movs	r1, #32
 800c67c:	6878      	ldr	r0, [r7, #4]
 800c67e:	f000 f864 	bl	800c74a <XSPI_WaitFlagStateUntilTimeout>
 800c682:	4603      	mov	r3, r0
 800c684:	73fb      	strb	r3, [r7, #15]
          if (status != HAL_OK)
 800c686:	7bfb      	ldrb	r3, [r7, #15]
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d00f      	beq.n	800c6ac <HAL_XSPI_Init+0x218>
          {
            return status;
 800c68c:	7bfb      	ldrb	r3, [r7, #15]
 800c68e:	e049      	b.n	800c724 <HAL_XSPI_Init+0x290>
 800c690:	420d1400 	.word	0x420d1400
 800c694:	520d1400 	.word	0x520d1400
 800c698:	420d2400 	.word	0x420d2400
 800c69c:	420d3400 	.word	0x420d3400
 800c6a0:	f8e0c0fc 	.word	0xf8e0c0fc
 800c6a4:	520d2400 	.word	0x520d2400
 800c6a8:	520d3400 	.word	0x520d3400
          }
        }
#endif /* HSPI_CALFCR_FINE */
        /* Configure Dual Memory mode */
        MODIFY_REG(hxspi->Instance->CR, XSPI_CR_DMM, hxspi->Init.MemoryMode);
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	689a      	ldr	r2, [r3, #8]
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	430a      	orrs	r2, r1
 800c6c0:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hxspi->Instance->TCR, (XSPI_TCR_SSHIFT | XSPI_TCR_DHQC),
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800c6ca:	f023 41a0 	bic.w	r1, r3, #1342177280	@ 0x50000000
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c6d6:	431a      	orrs	r2, r3
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	430a      	orrs	r2, r1
 800c6de:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
                   (hxspi->Init.SampleShifting | hxspi->Init.DelayHoldQuarterCycle));

        /* Enable XSPI */
        HAL_XSPI_ENABLE(hxspi);
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	681a      	ldr	r2, [r3, #0]
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	f042 0201 	orr.w	r2, r2, #1
 800c6f0:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after XSPI enable */
        if (hxspi->Init.FreeRunningClock == HAL_XSPI_FREERUNCLK_ENABLE)
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	699b      	ldr	r3, [r3, #24]
 800c6f6:	2b02      	cmp	r3, #2
 800c6f8:	d107      	bne.n	800c70a <HAL_XSPI_Init+0x276>
        {
          SET_BIT(hxspi->Instance->DCR1, XSPI_DCR1_FRCK);
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	689a      	ldr	r2, [r3, #8]
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	f042 0202 	orr.w	r2, r2, #2
 800c708:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the XSPI state */
        if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	68db      	ldr	r3, [r3, #12]
 800c70e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800c712:	d103      	bne.n	800c71c <HAL_XSPI_Init+0x288>
        {
          hxspi->State = HAL_XSPI_STATE_HYPERBUS_INIT;
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	2201      	movs	r2, #1
 800c718:	655a      	str	r2, [r3, #84]	@ 0x54
 800c71a:	e002      	b.n	800c722 <HAL_XSPI_Init+0x28e>
        }
        else
        {
          hxspi->State = HAL_XSPI_STATE_READY;
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	2202      	movs	r2, #2
 800c720:	655a      	str	r2, [r3, #84]	@ 0x54
        }
      }
    }
  }
  return status;
 800c722:	7bfb      	ldrb	r3, [r7, #15]
}
 800c724:	4618      	mov	r0, r3
 800c726:	3710      	adds	r7, #16
 800c728:	46bd      	mov	sp, r7
 800c72a:	bd80      	pop	{r7, pc}

0800c72c <HAL_XSPI_SetTimeout>:
  * @param  hxspi   : XSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval HAL state
  */
HAL_StatusTypeDef HAL_XSPI_SetTimeout(XSPI_HandleTypeDef *hxspi, uint32_t Timeout)
{
 800c72c:	b480      	push	{r7}
 800c72e:	b083      	sub	sp, #12
 800c730:	af00      	add	r7, sp, #0
 800c732:	6078      	str	r0, [r7, #4]
 800c734:	6039      	str	r1, [r7, #0]
  hxspi->Timeout = Timeout;
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	683a      	ldr	r2, [r7, #0]
 800c73a:	65da      	str	r2, [r3, #92]	@ 0x5c
  return HAL_OK;
 800c73c:	2300      	movs	r3, #0
}
 800c73e:	4618      	mov	r0, r3
 800c740:	370c      	adds	r7, #12
 800c742:	46bd      	mov	sp, r7
 800c744:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c748:	4770      	bx	lr

0800c74a <XSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef XSPI_WaitFlagStateUntilTimeout(XSPI_HandleTypeDef *hxspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800c74a:	b580      	push	{r7, lr}
 800c74c:	b084      	sub	sp, #16
 800c74e:	af00      	add	r7, sp, #0
 800c750:	60f8      	str	r0, [r7, #12]
 800c752:	60b9      	str	r1, [r7, #8]
 800c754:	603b      	str	r3, [r7, #0]
 800c756:	4613      	mov	r3, r2
 800c758:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((HAL_XSPI_GET_FLAG(hxspi, Flag)) != State)
 800c75a:	e019      	b.n	800c790 <XSPI_WaitFlagStateUntilTimeout+0x46>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c75c:	69bb      	ldr	r3, [r7, #24]
 800c75e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c762:	d015      	beq.n	800c790 <XSPI_WaitFlagStateUntilTimeout+0x46>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c764:	f7f6 f826 	bl	80027b4 <HAL_GetTick>
 800c768:	4602      	mov	r2, r0
 800c76a:	683b      	ldr	r3, [r7, #0]
 800c76c:	1ad3      	subs	r3, r2, r3
 800c76e:	69ba      	ldr	r2, [r7, #24]
 800c770:	429a      	cmp	r2, r3
 800c772:	d302      	bcc.n	800c77a <XSPI_WaitFlagStateUntilTimeout+0x30>
 800c774:	69bb      	ldr	r3, [r7, #24]
 800c776:	2b00      	cmp	r3, #0
 800c778:	d10a      	bne.n	800c790 <XSPI_WaitFlagStateUntilTimeout+0x46>
      {
        hxspi->State     = HAL_XSPI_STATE_READY;
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	2202      	movs	r2, #2
 800c77e:	655a      	str	r2, [r3, #84]	@ 0x54
        hxspi->ErrorCode |= HAL_XSPI_ERROR_TIMEOUT;
 800c780:	68fb      	ldr	r3, [r7, #12]
 800c782:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c784:	f043 0201 	orr.w	r2, r3, #1
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	659a      	str	r2, [r3, #88]	@ 0x58

        return HAL_TIMEOUT;
 800c78c:	2303      	movs	r3, #3
 800c78e:	e00e      	b.n	800c7ae <XSPI_WaitFlagStateUntilTimeout+0x64>
  while ((HAL_XSPI_GET_FLAG(hxspi, Flag)) != State)
 800c790:	68fb      	ldr	r3, [r7, #12]
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	6a1a      	ldr	r2, [r3, #32]
 800c796:	68bb      	ldr	r3, [r7, #8]
 800c798:	4013      	ands	r3, r2
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	bf14      	ite	ne
 800c79e:	2301      	movne	r3, #1
 800c7a0:	2300      	moveq	r3, #0
 800c7a2:	b2db      	uxtb	r3, r3
 800c7a4:	461a      	mov	r2, r3
 800c7a6:	79fb      	ldrb	r3, [r7, #7]
 800c7a8:	429a      	cmp	r2, r3
 800c7aa:	d1d7      	bne.n	800c75c <XSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800c7ac:	2300      	movs	r3, #0
}
 800c7ae:	4618      	mov	r0, r3
 800c7b0:	3710      	adds	r7, #16
 800c7b2:	46bd      	mov	sp, r7
 800c7b4:	bd80      	pop	{r7, pc}

0800c7b6 <LL_DLYB_SetDelay>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: the Delay value is set.
  *          - ERROR: the Delay value is not set.
  */
void LL_DLYB_SetDelay(DLYB_TypeDef *DLYBx, LL_DLYB_CfgTypeDef  *pdlyb_cfg)
{
 800c7b6:	b480      	push	{r7}
 800c7b8:	b083      	sub	sp, #12
 800c7ba:	af00      	add	r7, sp, #0
 800c7bc:	6078      	str	r0, [r7, #4]
 800c7be:	6039      	str	r1, [r7, #0]
  /* Check the DelayBlock instance */
  assert_param(IS_DLYB_ALL_INSTANCE(DLYBx));

  /* Enable the length sampling */
  SET_BIT(DLYBx->CR, DLYB_CR_SEN);
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	f043 0202 	orr.w	r2, r3, #2
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	601a      	str	r2, [r3, #0]

  /* Update the UNIT and SEL field */
  DLYBx->CFGR = (pdlyb_cfg->PhaseSel) | ((pdlyb_cfg->Units) << DLYB_CFGR_UNIT_Pos);
 800c7cc:	683b      	ldr	r3, [r7, #0]
 800c7ce:	685a      	ldr	r2, [r3, #4]
 800c7d0:	683b      	ldr	r3, [r7, #0]
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	021b      	lsls	r3, r3, #8
 800c7d6:	431a      	orrs	r2, r3
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	605a      	str	r2, [r3, #4]

  /* Disable the length sampling */
  CLEAR_BIT(DLYBx->CR, DLYB_CR_SEN);
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	f023 0202 	bic.w	r2, r3, #2
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	601a      	str	r2, [r3, #0]
}
 800c7e8:	bf00      	nop
 800c7ea:	370c      	adds	r7, #12
 800c7ec:	46bd      	mov	sp, r7
 800c7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7f2:	4770      	bx	lr

0800c7f4 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800c7f4:	b084      	sub	sp, #16
 800c7f6:	b480      	push	{r7}
 800c7f8:	b085      	sub	sp, #20
 800c7fa:	af00      	add	r7, sp, #0
 800c7fc:	6078      	str	r0, [r7, #4]
 800c7fe:	f107 001c 	add.w	r0, r7, #28
 800c802:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800c806:	2300      	movs	r3, #0
 800c808:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800c80a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 800c80c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 800c80e:	431a      	orrs	r2, r3
             Init.BusWide             | \
 800c810:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockPowerSave      | \
 800c812:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 800c814:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.BusWide             | \
 800c816:	431a      	orrs	r2, r3
             Init.ClockDiv
 800c818:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.HardwareFlowControl | \
 800c81a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 800c81c:	68fa      	ldr	r2, [r7, #12]
 800c81e:	4313      	orrs	r3, r2
 800c820:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	685a      	ldr	r2, [r3, #4]
 800c826:	4b07      	ldr	r3, [pc, #28]	@ (800c844 <SDMMC_Init+0x50>)
 800c828:	4013      	ands	r3, r2
 800c82a:	68fa      	ldr	r2, [r7, #12]
 800c82c:	431a      	orrs	r2, r3
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800c832:	2300      	movs	r3, #0
}
 800c834:	4618      	mov	r0, r3
 800c836:	3714      	adds	r7, #20
 800c838:	46bd      	mov	sp, r7
 800c83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c83e:	b004      	add	sp, #16
 800c840:	4770      	bx	lr
 800c842:	bf00      	nop
 800c844:	ffc02c00 	.word	0xffc02c00

0800c848 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(const SDMMC_TypeDef *SDMMCx)
{
 800c848:	b480      	push	{r7}
 800c84a:	b083      	sub	sp, #12
 800c84c:	af00      	add	r7, sp, #0
 800c84e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800c856:	4618      	mov	r0, r3
 800c858:	370c      	adds	r7, #12
 800c85a:	46bd      	mov	sp, r7
 800c85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c860:	4770      	bx	lr

0800c862 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800c862:	b480      	push	{r7}
 800c864:	b083      	sub	sp, #12
 800c866:	af00      	add	r7, sp, #0
 800c868:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	f043 0203 	orr.w	r2, r3, #3
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800c876:	2300      	movs	r3, #0
}
 800c878:	4618      	mov	r0, r3
 800c87a:	370c      	adds	r7, #12
 800c87c:	46bd      	mov	sp, r7
 800c87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c882:	4770      	bx	lr

0800c884 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(const SDMMC_TypeDef *SDMMCx)
{
 800c884:	b480      	push	{r7}
 800c886:	b083      	sub	sp, #12
 800c888:	af00      	add	r7, sp, #0
 800c88a:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	f003 0303 	and.w	r3, r3, #3
}
 800c894:	4618      	mov	r0, r3
 800c896:	370c      	adds	r7, #12
 800c898:	46bd      	mov	sp, r7
 800c89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c89e:	4770      	bx	lr

0800c8a0 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, const SDMMC_CmdInitTypeDef *Command)
{
 800c8a0:	b480      	push	{r7}
 800c8a2:	b085      	sub	sp, #20
 800c8a4:	af00      	add	r7, sp, #0
 800c8a6:	6078      	str	r0, [r7, #4]
 800c8a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800c8aa:	2300      	movs	r3, #0
 800c8ac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800c8ae:	683b      	ldr	r3, [r7, #0]
 800c8b0:	681a      	ldr	r2, [r3, #0]
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800c8b6:	683b      	ldr	r3, [r7, #0]
 800c8b8:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 800c8ba:	683b      	ldr	r3, [r7, #0]
 800c8bc:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800c8be:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 800c8c0:	683b      	ldr	r3, [r7, #0]
 800c8c2:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 800c8c4:	431a      	orrs	r2, r3
                       Command->CPSM);
 800c8c6:	683b      	ldr	r3, [r7, #0]
 800c8c8:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 800c8ca:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800c8cc:	68fa      	ldr	r2, [r7, #12]
 800c8ce:	4313      	orrs	r3, r2
 800c8d0:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	68da      	ldr	r2, [r3, #12]
 800c8d6:	4b06      	ldr	r3, [pc, #24]	@ (800c8f0 <SDMMC_SendCommand+0x50>)
 800c8d8:	4013      	ands	r3, r2
 800c8da:	68fa      	ldr	r2, [r7, #12]
 800c8dc:	431a      	orrs	r2, r3
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800c8e2:	2300      	movs	r3, #0
}
 800c8e4:	4618      	mov	r0, r3
 800c8e6:	3714      	adds	r7, #20
 800c8e8:	46bd      	mov	sp, r7
 800c8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ee:	4770      	bx	lr
 800c8f0:	fffee0c0 	.word	0xfffee0c0

0800c8f4 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(const SDMMC_TypeDef *SDMMCx)
{
 800c8f4:	b480      	push	{r7}
 800c8f6:	b083      	sub	sp, #12
 800c8f8:	af00      	add	r7, sp, #0
 800c8fa:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	691b      	ldr	r3, [r3, #16]
 800c900:	b2db      	uxtb	r3, r3
}
 800c902:	4618      	mov	r0, r3
 800c904:	370c      	adds	r7, #12
 800c906:	46bd      	mov	sp, r7
 800c908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c90c:	4770      	bx	lr

0800c90e <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(const SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800c90e:	b480      	push	{r7}
 800c910:	b085      	sub	sp, #20
 800c912:	af00      	add	r7, sp, #0
 800c914:	6078      	str	r0, [r7, #4]
 800c916:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	3314      	adds	r3, #20
 800c91c:	461a      	mov	r2, r3
 800c91e:	683b      	ldr	r3, [r7, #0]
 800c920:	4413      	add	r3, r2
 800c922:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	681b      	ldr	r3, [r3, #0]
}
 800c928:	4618      	mov	r0, r3
 800c92a:	3714      	adds	r7, #20
 800c92c:	46bd      	mov	sp, r7
 800c92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c932:	4770      	bx	lr

0800c934 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, const SDMMC_DataInitTypeDef *Data)
{
 800c934:	b480      	push	{r7}
 800c936:	b085      	sub	sp, #20
 800c938:	af00      	add	r7, sp, #0
 800c93a:	6078      	str	r0, [r7, #4]
 800c93c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800c93e:	2300      	movs	r3, #0
 800c940:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800c942:	683b      	ldr	r3, [r7, #0]
 800c944:	681a      	ldr	r2, [r3, #0]
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800c94a:	683b      	ldr	r3, [r7, #0]
 800c94c:	685a      	ldr	r2, [r3, #4]
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800c952:	683b      	ldr	r3, [r7, #0]
 800c954:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 800c956:	683b      	ldr	r3, [r7, #0]
 800c958:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800c95a:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 800c95c:	683b      	ldr	r3, [r7, #0]
 800c95e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 800c960:	431a      	orrs	r2, r3
                       Data->DPSM);
 800c962:	683b      	ldr	r3, [r7, #0]
 800c964:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 800c966:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800c968:	68fa      	ldr	r2, [r7, #12]
 800c96a:	4313      	orrs	r3, r2
 800c96c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c972:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800c976:	68fb      	ldr	r3, [r7, #12]
 800c978:	431a      	orrs	r2, r3
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800c97e:	2300      	movs	r3, #0

}
 800c980:	4618      	mov	r0, r3
 800c982:	3714      	adds	r7, #20
 800c984:	46bd      	mov	sp, r7
 800c986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c98a:	4770      	bx	lr

0800c98c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800c98c:	b580      	push	{r7, lr}
 800c98e:	b088      	sub	sp, #32
 800c990:	af00      	add	r7, sp, #0
 800c992:	6078      	str	r0, [r7, #4]
 800c994:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800c996:	683b      	ldr	r3, [r7, #0]
 800c998:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800c99a:	2310      	movs	r3, #16
 800c99c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c99e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c9a2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c9a4:	2300      	movs	r3, #0
 800c9a6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c9a8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c9ac:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c9ae:	f107 0308 	add.w	r3, r7, #8
 800c9b2:	4619      	mov	r1, r3
 800c9b4:	6878      	ldr	r0, [r7, #4]
 800c9b6:	f7ff ff73 	bl	800c8a0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800c9ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c9be:	2110      	movs	r1, #16
 800c9c0:	6878      	ldr	r0, [r7, #4]
 800c9c2:	f000 f935 	bl	800cc30 <SDMMC_GetCmdResp1>
 800c9c6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c9c8:	69fb      	ldr	r3, [r7, #28]
}
 800c9ca:	4618      	mov	r0, r3
 800c9cc:	3720      	adds	r7, #32
 800c9ce:	46bd      	mov	sp, r7
 800c9d0:	bd80      	pop	{r7, pc}

0800c9d2 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 800c9d2:	b580      	push	{r7, lr}
 800c9d4:	b088      	sub	sp, #32
 800c9d6:	af00      	add	r7, sp, #0
 800c9d8:	6078      	str	r0, [r7, #4]
 800c9da:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800c9dc:	683b      	ldr	r3, [r7, #0]
 800c9de:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800c9e0:	2307      	movs	r3, #7
 800c9e2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c9e4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c9e8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c9ea:	2300      	movs	r3, #0
 800c9ec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c9ee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c9f2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c9f4:	f107 0308 	add.w	r3, r7, #8
 800c9f8:	4619      	mov	r1, r3
 800c9fa:	6878      	ldr	r0, [r7, #4]
 800c9fc:	f7ff ff50 	bl	800c8a0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800ca00:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ca04:	2107      	movs	r1, #7
 800ca06:	6878      	ldr	r0, [r7, #4]
 800ca08:	f000 f912 	bl	800cc30 <SDMMC_GetCmdResp1>
 800ca0c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ca0e:	69fb      	ldr	r3, [r7, #28]
}
 800ca10:	4618      	mov	r0, r3
 800ca12:	3720      	adds	r7, #32
 800ca14:	46bd      	mov	sp, r7
 800ca16:	bd80      	pop	{r7, pc}

0800ca18 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800ca18:	b580      	push	{r7, lr}
 800ca1a:	b088      	sub	sp, #32
 800ca1c:	af00      	add	r7, sp, #0
 800ca1e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800ca20:	2300      	movs	r3, #0
 800ca22:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800ca24:	2300      	movs	r3, #0
 800ca26:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800ca28:	2300      	movs	r3, #0
 800ca2a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ca2c:	2300      	movs	r3, #0
 800ca2e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ca30:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ca34:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ca36:	f107 0308 	add.w	r3, r7, #8
 800ca3a:	4619      	mov	r1, r3
 800ca3c:	6878      	ldr	r0, [r7, #4]
 800ca3e:	f7ff ff2f 	bl	800c8a0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800ca42:	6878      	ldr	r0, [r7, #4]
 800ca44:	f000 fa70 	bl	800cf28 <SDMMC_GetCmdError>
 800ca48:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ca4a:	69fb      	ldr	r3, [r7, #28]
}
 800ca4c:	4618      	mov	r0, r3
 800ca4e:	3720      	adds	r7, #32
 800ca50:	46bd      	mov	sp, r7
 800ca52:	bd80      	pop	{r7, pc}

0800ca54 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800ca54:	b580      	push	{r7, lr}
 800ca56:	b088      	sub	sp, #32
 800ca58:	af00      	add	r7, sp, #0
 800ca5a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800ca5c:	2300      	movs	r3, #0
 800ca5e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800ca60:	2302      	movs	r3, #2
 800ca62:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800ca64:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800ca68:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ca6a:	2300      	movs	r3, #0
 800ca6c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ca6e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ca72:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ca74:	f107 0308 	add.w	r3, r7, #8
 800ca78:	4619      	mov	r1, r3
 800ca7a:	6878      	ldr	r0, [r7, #4]
 800ca7c:	f7ff ff10 	bl	800c8a0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800ca80:	6878      	ldr	r0, [r7, #4]
 800ca82:	f000 f9c7 	bl	800ce14 <SDMMC_GetCmdResp2>
 800ca86:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ca88:	69fb      	ldr	r3, [r7, #28]
}
 800ca8a:	4618      	mov	r0, r3
 800ca8c:	3720      	adds	r7, #32
 800ca8e:	46bd      	mov	sp, r7
 800ca90:	bd80      	pop	{r7, pc}

0800ca92 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ca92:	b580      	push	{r7, lr}
 800ca94:	b088      	sub	sp, #32
 800ca96:	af00      	add	r7, sp, #0
 800ca98:	6078      	str	r0, [r7, #4]
 800ca9a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800ca9c:	683b      	ldr	r3, [r7, #0]
 800ca9e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800caa0:	2309      	movs	r3, #9
 800caa2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800caa4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800caa8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800caaa:	2300      	movs	r3, #0
 800caac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800caae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800cab2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cab4:	f107 0308 	add.w	r3, r7, #8
 800cab8:	4619      	mov	r1, r3
 800caba:	6878      	ldr	r0, [r7, #4]
 800cabc:	f7ff fef0 	bl	800c8a0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800cac0:	6878      	ldr	r0, [r7, #4]
 800cac2:	f000 f9a7 	bl	800ce14 <SDMMC_GetCmdResp2>
 800cac6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cac8:	69fb      	ldr	r3, [r7, #28]
}
 800caca:	4618      	mov	r0, r3
 800cacc:	3720      	adds	r7, #32
 800cace:	46bd      	mov	sp, r7
 800cad0:	bd80      	pop	{r7, pc}

0800cad2 <SDMMC_CmdSetRelAddMmc>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  RCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAddMmc(SDMMC_TypeDef *SDMMCx, uint16_t RCA)
{
 800cad2:	b580      	push	{r7, lr}
 800cad4:	b088      	sub	sp, #32
 800cad6:	af00      	add	r7, sp, #0
 800cad8:	6078      	str	r0, [r7, #4]
 800cada:	460b      	mov	r3, r1
 800cadc:	807b      	strh	r3, [r7, #2]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = ((uint32_t)RCA << 16U);
 800cade:	887b      	ldrh	r3, [r7, #2]
 800cae0:	041b      	lsls	r3, r3, #16
 800cae2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800cae4:	2303      	movs	r3, #3
 800cae6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cae8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800caec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800caee:	2300      	movs	r3, #0
 800caf0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800caf2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800caf6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800caf8:	f107 0308 	add.w	r3, r7, #8
 800cafc:	4619      	mov	r1, r3
 800cafe:	6878      	ldr	r0, [r7, #4]
 800cb00:	f7ff fece 	bl	800c8a0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_REL_ADDR, SDMMC_CMDTIMEOUT);
 800cb04:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cb08:	2103      	movs	r1, #3
 800cb0a:	6878      	ldr	r0, [r7, #4]
 800cb0c:	f000 f890 	bl	800cc30 <SDMMC_GetCmdResp1>
 800cb10:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cb12:	69fb      	ldr	r3, [r7, #28]
}
 800cb14:	4618      	mov	r0, r3
 800cb16:	3720      	adds	r7, #32
 800cb18:	46bd      	mov	sp, r7
 800cb1a:	bd80      	pop	{r7, pc}

0800cb1c <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800cb1c:	b580      	push	{r7, lr}
 800cb1e:	b088      	sub	sp, #32
 800cb20:	af00      	add	r7, sp, #0
 800cb22:	6078      	str	r0, [r7, #4]
 800cb24:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800cb26:	683b      	ldr	r3, [r7, #0]
 800cb28:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800cb2a:	230d      	movs	r3, #13
 800cb2c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cb2e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800cb32:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cb34:	2300      	movs	r3, #0
 800cb36:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cb38:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800cb3c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cb3e:	f107 0308 	add.w	r3, r7, #8
 800cb42:	4619      	mov	r1, r3
 800cb44:	6878      	ldr	r0, [r7, #4]
 800cb46:	f7ff feab 	bl	800c8a0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800cb4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cb4e:	210d      	movs	r1, #13
 800cb50:	6878      	ldr	r0, [r7, #4]
 800cb52:	f000 f86d 	bl	800cc30 <SDMMC_GetCmdResp1>
 800cb56:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cb58:	69fb      	ldr	r3, [r7, #28]
}
 800cb5a:	4618      	mov	r0, r3
 800cb5c:	3720      	adds	r7, #32
 800cb5e:	46bd      	mov	sp, r7
 800cb60:	bd80      	pop	{r7, pc}

0800cb62 <SDMMC_CmdOpCondition>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @parame Argument: Argument used for the command
  * @retval HAL status
  */
uint32_t SDMMC_CmdOpCondition(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800cb62:	b580      	push	{r7, lr}
 800cb64:	b088      	sub	sp, #32
 800cb66:	af00      	add	r7, sp, #0
 800cb68:	6078      	str	r0, [r7, #4]
 800cb6a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800cb6c:	683b      	ldr	r3, [r7, #0]
 800cb6e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_OP_COND;
 800cb70:	2301      	movs	r3, #1
 800cb72:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cb74:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800cb78:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cb7a:	2300      	movs	r3, #0
 800cb7c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cb7e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800cb82:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cb84:	f107 0308 	add.w	r3, r7, #8
 800cb88:	4619      	mov	r1, r3
 800cb8a:	6878      	ldr	r0, [r7, #4]
 800cb8c:	f7ff fe88 	bl	800c8a0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800cb90:	6878      	ldr	r0, [r7, #4]
 800cb92:	f000 f989 	bl	800cea8 <SDMMC_GetCmdResp3>
 800cb96:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cb98:	69fb      	ldr	r3, [r7, #28]
}
 800cb9a:	4618      	mov	r0, r3
 800cb9c:	3720      	adds	r7, #32
 800cb9e:	46bd      	mov	sp, r7
 800cba0:	bd80      	pop	{r7, pc}

0800cba2 <SDMMC_CmdSwitch>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @parame Argument: Argument used for the command
  * @retval HAL status
  */
uint32_t SDMMC_CmdSwitch(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800cba2:	b580      	push	{r7, lr}
 800cba4:	b088      	sub	sp, #32
 800cba6:	af00      	add	r7, sp, #0
 800cba8:	6078      	str	r0, [r7, #4]
 800cbaa:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD6 to activate SDR50 Mode and Power Limit 1.44W */
  /* CMD Response: R1 */
  sdmmc_cmdinit.Argument         = Argument; /* SDMMC_SDR25_SWITCH_PATTERN*/
 800cbac:	683b      	ldr	r3, [r7, #0]
 800cbae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SWITCH;
 800cbb0:	2306      	movs	r3, #6
 800cbb2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cbb4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800cbb8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cbba:	2300      	movs	r3, #0
 800cbbc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cbbe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800cbc2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cbc4:	f107 0308 	add.w	r3, r7, #8
 800cbc8:	4619      	mov	r1, r3
 800cbca:	6878      	ldr	r0, [r7, #4]
 800cbcc:	f7ff fe68 	bl	800c8a0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_HS_SWITCH, SDMMC_CMDTIMEOUT);
 800cbd0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cbd4:	2106      	movs	r1, #6
 800cbd6:	6878      	ldr	r0, [r7, #4]
 800cbd8:	f000 f82a 	bl	800cc30 <SDMMC_GetCmdResp1>
 800cbdc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cbde:	69fb      	ldr	r3, [r7, #28]
}
 800cbe0:	4618      	mov	r0, r3
 800cbe2:	3720      	adds	r7, #32
 800cbe4:	46bd      	mov	sp, r7
 800cbe6:	bd80      	pop	{r7, pc}

0800cbe8 <SDMMC_CmdSendEXTCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendEXTCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800cbe8:	b580      	push	{r7, lr}
 800cbea:	b088      	sub	sp, #32
 800cbec:	af00      	add	r7, sp, #0
 800cbee:	6078      	str	r0, [r7, #4]
 800cbf0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800cbf2:	683b      	ldr	r3, [r7, #0]
 800cbf4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800cbf6:	2308      	movs	r3, #8
 800cbf8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cbfa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800cbfe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cc00:	2300      	movs	r3, #0
 800cc02:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cc04:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800cc08:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cc0a:	f107 0308 	add.w	r3, r7, #8
 800cc0e:	4619      	mov	r1, r3
 800cc10:	6878      	ldr	r0, [r7, #4]
 800cc12:	f7ff fe45 	bl	800c8a0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_HS_SEND_EXT_CSD, SDMMC_CMDTIMEOUT);
 800cc16:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cc1a:	2108      	movs	r1, #8
 800cc1c:	6878      	ldr	r0, [r7, #4]
 800cc1e:	f000 f807 	bl	800cc30 <SDMMC_GetCmdResp1>
 800cc22:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cc24:	69fb      	ldr	r3, [r7, #28]
}
 800cc26:	4618      	mov	r0, r3
 800cc28:	3720      	adds	r7, #32
 800cc2a:	46bd      	mov	sp, r7
 800cc2c:	bd80      	pop	{r7, pc}
	...

0800cc30 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800cc30:	b580      	push	{r7, lr}
 800cc32:	b088      	sub	sp, #32
 800cc34:	af00      	add	r7, sp, #0
 800cc36:	60f8      	str	r0, [r7, #12]
 800cc38:	460b      	mov	r3, r1
 800cc3a:	607a      	str	r2, [r7, #4]
 800cc3c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800cc3e:	4b70      	ldr	r3, [pc, #448]	@ (800ce00 <SDMMC_GetCmdResp1+0x1d0>)
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	4a70      	ldr	r2, [pc, #448]	@ (800ce04 <SDMMC_GetCmdResp1+0x1d4>)
 800cc44:	fba2 2303 	umull	r2, r3, r2, r3
 800cc48:	0a5a      	lsrs	r2, r3, #9
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	fb02 f303 	mul.w	r3, r2, r3
 800cc50:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800cc52:	69fb      	ldr	r3, [r7, #28]
 800cc54:	1e5a      	subs	r2, r3, #1
 800cc56:	61fa      	str	r2, [r7, #28]
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d102      	bne.n	800cc62 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800cc5c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800cc60:	e0c9      	b.n	800cdf6 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800cc62:	68fb      	ldr	r3, [r7, #12]
 800cc64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cc66:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800cc68:	69ba      	ldr	r2, [r7, #24]
 800cc6a:	4b67      	ldr	r3, [pc, #412]	@ (800ce08 <SDMMC_GetCmdResp1+0x1d8>)
 800cc6c:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d0ef      	beq.n	800cc52 <SDMMC_GetCmdResp1+0x22>
 800cc72:	69bb      	ldr	r3, [r7, #24]
 800cc74:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	d1ea      	bne.n	800cc52 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800cc7c:	68fb      	ldr	r3, [r7, #12]
 800cc7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cc80:	f003 0304 	and.w	r3, r3, #4
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	d004      	beq.n	800cc92 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800cc88:	68fb      	ldr	r3, [r7, #12]
 800cc8a:	2204      	movs	r2, #4
 800cc8c:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800cc8e:	2304      	movs	r3, #4
 800cc90:	e0b1      	b.n	800cdf6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800cc92:	68fb      	ldr	r3, [r7, #12]
 800cc94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cc96:	f003 0301 	and.w	r3, r3, #1
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d004      	beq.n	800cca8 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800cc9e:	68fb      	ldr	r3, [r7, #12]
 800cca0:	2201      	movs	r2, #1
 800cca2:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cca4:	2301      	movs	r3, #1
 800cca6:	e0a6      	b.n	800cdf6 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800cca8:	68fb      	ldr	r3, [r7, #12]
 800ccaa:	4a58      	ldr	r2, [pc, #352]	@ (800ce0c <SDMMC_GetCmdResp1+0x1dc>)
 800ccac:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800ccae:	68f8      	ldr	r0, [r7, #12]
 800ccb0:	f7ff fe20 	bl	800c8f4 <SDMMC_GetCommandResponse>
 800ccb4:	4603      	mov	r3, r0
 800ccb6:	461a      	mov	r2, r3
 800ccb8:	7afb      	ldrb	r3, [r7, #11]
 800ccba:	4293      	cmp	r3, r2
 800ccbc:	d001      	beq.n	800ccc2 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ccbe:	2301      	movs	r3, #1
 800ccc0:	e099      	b.n	800cdf6 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800ccc2:	2100      	movs	r1, #0
 800ccc4:	68f8      	ldr	r0, [r7, #12]
 800ccc6:	f7ff fe22 	bl	800c90e <SDMMC_GetResponse>
 800ccca:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800cccc:	697a      	ldr	r2, [r7, #20]
 800ccce:	4b50      	ldr	r3, [pc, #320]	@ (800ce10 <SDMMC_GetCmdResp1+0x1e0>)
 800ccd0:	4013      	ands	r3, r2
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	d101      	bne.n	800ccda <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800ccd6:	2300      	movs	r3, #0
 800ccd8:	e08d      	b.n	800cdf6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800ccda:	697b      	ldr	r3, [r7, #20]
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	da02      	bge.n	800cce6 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800cce0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800cce4:	e087      	b.n	800cdf6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800cce6:	697b      	ldr	r3, [r7, #20]
 800cce8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	d001      	beq.n	800ccf4 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800ccf0:	2340      	movs	r3, #64	@ 0x40
 800ccf2:	e080      	b.n	800cdf6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800ccf4:	697b      	ldr	r3, [r7, #20]
 800ccf6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d001      	beq.n	800cd02 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800ccfe:	2380      	movs	r3, #128	@ 0x80
 800cd00:	e079      	b.n	800cdf6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800cd02:	697b      	ldr	r3, [r7, #20]
 800cd04:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d002      	beq.n	800cd12 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800cd0c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800cd10:	e071      	b.n	800cdf6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800cd12:	697b      	ldr	r3, [r7, #20]
 800cd14:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	d002      	beq.n	800cd22 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800cd1c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800cd20:	e069      	b.n	800cdf6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800cd22:	697b      	ldr	r3, [r7, #20]
 800cd24:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	d002      	beq.n	800cd32 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800cd2c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cd30:	e061      	b.n	800cdf6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800cd32:	697b      	ldr	r3, [r7, #20]
 800cd34:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d002      	beq.n	800cd42 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800cd3c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800cd40:	e059      	b.n	800cdf6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800cd42:	697b      	ldr	r3, [r7, #20]
 800cd44:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d002      	beq.n	800cd52 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800cd4c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800cd50:	e051      	b.n	800cdf6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800cd52:	697b      	ldr	r3, [r7, #20]
 800cd54:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d002      	beq.n	800cd62 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800cd5c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800cd60:	e049      	b.n	800cdf6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800cd62:	697b      	ldr	r3, [r7, #20]
 800cd64:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d002      	beq.n	800cd72 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800cd6c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800cd70:	e041      	b.n	800cdf6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800cd72:	697b      	ldr	r3, [r7, #20]
 800cd74:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d002      	beq.n	800cd82 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800cd7c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800cd80:	e039      	b.n	800cdf6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800cd82:	697b      	ldr	r3, [r7, #20]
 800cd84:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d002      	beq.n	800cd92 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800cd8c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800cd90:	e031      	b.n	800cdf6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800cd92:	697b      	ldr	r3, [r7, #20]
 800cd94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d002      	beq.n	800cda2 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800cd9c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800cda0:	e029      	b.n	800cdf6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800cda2:	697b      	ldr	r3, [r7, #20]
 800cda4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	d002      	beq.n	800cdb2 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800cdac:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800cdb0:	e021      	b.n	800cdf6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800cdb2:	697b      	ldr	r3, [r7, #20]
 800cdb4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d002      	beq.n	800cdc2 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800cdbc:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800cdc0:	e019      	b.n	800cdf6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800cdc2:	697b      	ldr	r3, [r7, #20]
 800cdc4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d002      	beq.n	800cdd2 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800cdcc:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800cdd0:	e011      	b.n	800cdf6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800cdd2:	697b      	ldr	r3, [r7, #20]
 800cdd4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d002      	beq.n	800cde2 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800cddc:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800cde0:	e009      	b.n	800cdf6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800cde2:	697b      	ldr	r3, [r7, #20]
 800cde4:	f003 0308 	and.w	r3, r3, #8
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	d002      	beq.n	800cdf2 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800cdec:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800cdf0:	e001      	b.n	800cdf6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800cdf2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800cdf6:	4618      	mov	r0, r3
 800cdf8:	3720      	adds	r7, #32
 800cdfa:	46bd      	mov	sp, r7
 800cdfc:	bd80      	pop	{r7, pc}
 800cdfe:	bf00      	nop
 800ce00:	20000000 	.word	0x20000000
 800ce04:	10624dd3 	.word	0x10624dd3
 800ce08:	00200045 	.word	0x00200045
 800ce0c:	002000c5 	.word	0x002000c5
 800ce10:	fdffe008 	.word	0xfdffe008

0800ce14 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800ce14:	b480      	push	{r7}
 800ce16:	b085      	sub	sp, #20
 800ce18:	af00      	add	r7, sp, #0
 800ce1a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800ce1c:	4b1f      	ldr	r3, [pc, #124]	@ (800ce9c <SDMMC_GetCmdResp2+0x88>)
 800ce1e:	681b      	ldr	r3, [r3, #0]
 800ce20:	4a1f      	ldr	r2, [pc, #124]	@ (800cea0 <SDMMC_GetCmdResp2+0x8c>)
 800ce22:	fba2 2303 	umull	r2, r3, r2, r3
 800ce26:	0a5b      	lsrs	r3, r3, #9
 800ce28:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ce2c:	fb02 f303 	mul.w	r3, r2, r3
 800ce30:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800ce32:	68fb      	ldr	r3, [r7, #12]
 800ce34:	1e5a      	subs	r2, r3, #1
 800ce36:	60fa      	str	r2, [r7, #12]
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d102      	bne.n	800ce42 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ce3c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800ce40:	e026      	b.n	800ce90 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ce46:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ce48:	68bb      	ldr	r3, [r7, #8]
 800ce4a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d0ef      	beq.n	800ce32 <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800ce52:	68bb      	ldr	r3, [r7, #8]
 800ce54:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d1ea      	bne.n	800ce32 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ce60:	f003 0304 	and.w	r3, r3, #4
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d004      	beq.n	800ce72 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	2204      	movs	r2, #4
 800ce6c:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ce6e:	2304      	movs	r3, #4
 800ce70:	e00e      	b.n	800ce90 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ce76:	f003 0301 	and.w	r3, r3, #1
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d004      	beq.n	800ce88 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	2201      	movs	r2, #1
 800ce82:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ce84:	2301      	movs	r3, #1
 800ce86:	e003      	b.n	800ce90 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	4a06      	ldr	r2, [pc, #24]	@ (800cea4 <SDMMC_GetCmdResp2+0x90>)
 800ce8c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800ce8e:	2300      	movs	r3, #0
}
 800ce90:	4618      	mov	r0, r3
 800ce92:	3714      	adds	r7, #20
 800ce94:	46bd      	mov	sp, r7
 800ce96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce9a:	4770      	bx	lr
 800ce9c:	20000000 	.word	0x20000000
 800cea0:	10624dd3 	.word	0x10624dd3
 800cea4:	002000c5 	.word	0x002000c5

0800cea8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800cea8:	b480      	push	{r7}
 800ceaa:	b085      	sub	sp, #20
 800ceac:	af00      	add	r7, sp, #0
 800ceae:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800ceb0:	4b1a      	ldr	r3, [pc, #104]	@ (800cf1c <SDMMC_GetCmdResp3+0x74>)
 800ceb2:	681b      	ldr	r3, [r3, #0]
 800ceb4:	4a1a      	ldr	r2, [pc, #104]	@ (800cf20 <SDMMC_GetCmdResp3+0x78>)
 800ceb6:	fba2 2303 	umull	r2, r3, r2, r3
 800ceba:	0a5b      	lsrs	r3, r3, #9
 800cebc:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cec0:	fb02 f303 	mul.w	r3, r2, r3
 800cec4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800cec6:	68fb      	ldr	r3, [r7, #12]
 800cec8:	1e5a      	subs	r2, r3, #1
 800ceca:	60fa      	str	r2, [r7, #12]
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d102      	bne.n	800ced6 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ced0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800ced4:	e01b      	b.n	800cf0e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ceda:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800cedc:	68bb      	ldr	r3, [r7, #8]
 800cede:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	d0ef      	beq.n	800cec6 <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800cee6:	68bb      	ldr	r3, [r7, #8]
 800cee8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	d1ea      	bne.n	800cec6 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cef4:	f003 0304 	and.w	r3, r3, #4
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d004      	beq.n	800cf06 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	2204      	movs	r2, #4
 800cf00:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800cf02:	2304      	movs	r3, #4
 800cf04:	e003      	b.n	800cf0e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	4a06      	ldr	r2, [pc, #24]	@ (800cf24 <SDMMC_GetCmdResp3+0x7c>)
 800cf0a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800cf0c:	2300      	movs	r3, #0
}
 800cf0e:	4618      	mov	r0, r3
 800cf10:	3714      	adds	r7, #20
 800cf12:	46bd      	mov	sp, r7
 800cf14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf18:	4770      	bx	lr
 800cf1a:	bf00      	nop
 800cf1c:	20000000 	.word	0x20000000
 800cf20:	10624dd3 	.word	0x10624dd3
 800cf24:	002000c5 	.word	0x002000c5

0800cf28 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800cf28:	b480      	push	{r7}
 800cf2a:	b085      	sub	sp, #20
 800cf2c:	af00      	add	r7, sp, #0
 800cf2e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800cf30:	4b11      	ldr	r3, [pc, #68]	@ (800cf78 <SDMMC_GetCmdError+0x50>)
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	4a11      	ldr	r2, [pc, #68]	@ (800cf7c <SDMMC_GetCmdError+0x54>)
 800cf36:	fba2 2303 	umull	r2, r3, r2, r3
 800cf3a:	0a5b      	lsrs	r3, r3, #9
 800cf3c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cf40:	fb02 f303 	mul.w	r3, r2, r3
 800cf44:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800cf46:	68fb      	ldr	r3, [r7, #12]
 800cf48:	1e5a      	subs	r2, r3, #1
 800cf4a:	60fa      	str	r2, [r7, #12]
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	d102      	bne.n	800cf56 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800cf50:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800cf54:	e009      	b.n	800cf6a <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cf5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d0f1      	beq.n	800cf46 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	4a06      	ldr	r2, [pc, #24]	@ (800cf80 <SDMMC_GetCmdError+0x58>)
 800cf66:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 800cf68:	2300      	movs	r3, #0
}
 800cf6a:	4618      	mov	r0, r3
 800cf6c:	3714      	adds	r7, #20
 800cf6e:	46bd      	mov	sp, r7
 800cf70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf74:	4770      	bx	lr
 800cf76:	bf00      	nop
 800cf78:	20000000 	.word	0x20000000
 800cf7c:	10624dd3 	.word	0x10624dd3
 800cf80:	002000c5 	.word	0x002000c5

0800cf84 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800cf84:	b084      	sub	sp, #16
 800cf86:	b580      	push	{r7, lr}
 800cf88:	b084      	sub	sp, #16
 800cf8a:	af00      	add	r7, sp, #0
 800cf8c:	6078      	str	r0, [r7, #4]
 800cf8e:	f107 001c 	add.w	r0, r7, #28
 800cf92:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
  if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 800cf96:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800cf9a:	2b03      	cmp	r3, #3
 800cf9c:	d105      	bne.n	800cfaa <USB_CoreInit+0x26>
  {
    /* Init The UTMI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS);
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	68db      	ldr	r3, [r3, #12]
 800cfa2:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	60da      	str	r2, [r3, #12]
  }

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800cfaa:	6878      	ldr	r0, [r7, #4]
 800cfac:	f000 fa8e 	bl	800d4cc <USB_CoreReset>
 800cfb0:	4603      	mov	r3, r0
 800cfb2:	73fb      	strb	r3, [r7, #15]

  if (cfg.dma_enable == 1U)
 800cfb4:	7fbb      	ldrb	r3, [r7, #30]
 800cfb6:	2b01      	cmp	r3, #1
 800cfb8:	d10b      	bne.n	800cfd2 <USB_CoreInit+0x4e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	689b      	ldr	r3, [r3, #8]
 800cfbe:	f043 0208 	orr.w	r2, r3, #8
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	689b      	ldr	r3, [r3, #8]
 800cfca:	f043 0220 	orr.w	r2, r3, #32
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	609a      	str	r2, [r3, #8]
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
  }
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  return ret;
 800cfd2:	7bfb      	ldrb	r3, [r7, #15]
}
 800cfd4:	4618      	mov	r0, r3
 800cfd6:	3710      	adds	r7, #16
 800cfd8:	46bd      	mov	sp, r7
 800cfda:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800cfde:	b004      	add	sp, #16
 800cfe0:	4770      	bx	lr

0800cfe2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800cfe2:	b480      	push	{r7}
 800cfe4:	b083      	sub	sp, #12
 800cfe6:	af00      	add	r7, sp, #0
 800cfe8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	689b      	ldr	r3, [r3, #8]
 800cfee:	f023 0201 	bic.w	r2, r3, #1
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800cff6:	2300      	movs	r3, #0
}
 800cff8:	4618      	mov	r0, r3
 800cffa:	370c      	adds	r7, #12
 800cffc:	46bd      	mov	sp, r7
 800cffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d002:	4770      	bx	lr

0800d004 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800d004:	b580      	push	{r7, lr}
 800d006:	b084      	sub	sp, #16
 800d008:	af00      	add	r7, sp, #0
 800d00a:	6078      	str	r0, [r7, #4]
 800d00c:	460b      	mov	r3, r1
 800d00e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800d010:	2300      	movs	r3, #0
 800d012:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	68db      	ldr	r3, [r3, #12]
 800d018:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800d020:	78fb      	ldrb	r3, [r7, #3]
 800d022:	2b01      	cmp	r3, #1
 800d024:	d115      	bne.n	800d052 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	68db      	ldr	r3, [r3, #12]
 800d02a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800d032:	200a      	movs	r0, #10
 800d034:	f7f5 fbca 	bl	80027cc <HAL_Delay>
      ms += 10U;
 800d038:	68fb      	ldr	r3, [r7, #12]
 800d03a:	330a      	adds	r3, #10
 800d03c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800d03e:	6878      	ldr	r0, [r7, #4]
 800d040:	f000 fa36 	bl	800d4b0 <USB_GetMode>
 800d044:	4603      	mov	r3, r0
 800d046:	2b01      	cmp	r3, #1
 800d048:	d01e      	beq.n	800d088 <USB_SetCurrentMode+0x84>
 800d04a:	68fb      	ldr	r3, [r7, #12]
 800d04c:	2bc7      	cmp	r3, #199	@ 0xc7
 800d04e:	d9f0      	bls.n	800d032 <USB_SetCurrentMode+0x2e>
 800d050:	e01a      	b.n	800d088 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800d052:	78fb      	ldrb	r3, [r7, #3]
 800d054:	2b00      	cmp	r3, #0
 800d056:	d115      	bne.n	800d084 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	68db      	ldr	r3, [r3, #12]
 800d05c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800d064:	200a      	movs	r0, #10
 800d066:	f7f5 fbb1 	bl	80027cc <HAL_Delay>
      ms += 10U;
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	330a      	adds	r3, #10
 800d06e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800d070:	6878      	ldr	r0, [r7, #4]
 800d072:	f000 fa1d 	bl	800d4b0 <USB_GetMode>
 800d076:	4603      	mov	r3, r0
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d005      	beq.n	800d088 <USB_SetCurrentMode+0x84>
 800d07c:	68fb      	ldr	r3, [r7, #12]
 800d07e:	2bc7      	cmp	r3, #199	@ 0xc7
 800d080:	d9f0      	bls.n	800d064 <USB_SetCurrentMode+0x60>
 800d082:	e001      	b.n	800d088 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800d084:	2301      	movs	r3, #1
 800d086:	e005      	b.n	800d094 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800d088:	68fb      	ldr	r3, [r7, #12]
 800d08a:	2bc8      	cmp	r3, #200	@ 0xc8
 800d08c:	d101      	bne.n	800d092 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800d08e:	2301      	movs	r3, #1
 800d090:	e000      	b.n	800d094 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800d092:	2300      	movs	r3, #0
}
 800d094:	4618      	mov	r0, r3
 800d096:	3710      	adds	r7, #16
 800d098:	46bd      	mov	sp, r7
 800d09a:	bd80      	pop	{r7, pc}

0800d09c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d09c:	b084      	sub	sp, #16
 800d09e:	b580      	push	{r7, lr}
 800d0a0:	b086      	sub	sp, #24
 800d0a2:	af00      	add	r7, sp, #0
 800d0a4:	6078      	str	r0, [r7, #4]
 800d0a6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800d0aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800d0ae:	2300      	movs	r3, #0
 800d0b0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800d0b6:	2300      	movs	r3, #0
 800d0b8:	613b      	str	r3, [r7, #16]
 800d0ba:	e009      	b.n	800d0d0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800d0bc:	687a      	ldr	r2, [r7, #4]
 800d0be:	693b      	ldr	r3, [r7, #16]
 800d0c0:	3340      	adds	r3, #64	@ 0x40
 800d0c2:	009b      	lsls	r3, r3, #2
 800d0c4:	4413      	add	r3, r2
 800d0c6:	2200      	movs	r2, #0
 800d0c8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800d0ca:	693b      	ldr	r3, [r7, #16]
 800d0cc:	3301      	adds	r3, #1
 800d0ce:	613b      	str	r3, [r7, #16]
 800d0d0:	693b      	ldr	r3, [r7, #16]
 800d0d2:	2b0e      	cmp	r3, #14
 800d0d4:	d9f2      	bls.n	800d0bc <USB_DevInit+0x20>
  }

#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
  /* Disable USB PHY pulldown resistors */
  USBx->GCCFG &= ~USB_OTG_GCCFG_PULLDOWNEN;
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d0da:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800d0e2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	d11c      	bne.n	800d124 <USB_DevInit+0x88>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d0ea:	68fb      	ldr	r3, [r7, #12]
 800d0ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d0f0:	685b      	ldr	r3, [r3, #4]
 800d0f2:	68fa      	ldr	r2, [r7, #12]
 800d0f4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800d0f8:	f043 0302 	orr.w	r3, r3, #2
 800d0fc:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d102:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALEXTOEN;
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d10e:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALOVAL;
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d11a:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	639a      	str	r2, [r3, #56]	@ 0x38
 800d122:	e011      	b.n	800d148 <USB_DevInit+0xac>
  else
  {
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
    /* B-peripheral session valid override disable */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBVALEXTOEN;
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d128:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBVALOVAL;
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d134:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d140:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800d14e:	461a      	mov	r2, r3
 800d150:	2300      	movs	r3, #0
 800d152:	6013      	str	r3, [r2, #0]

#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
  if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 800d154:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800d158:	2b03      	cmp	r3, #3
 800d15a:	d10d      	bne.n	800d178 <USB_DevInit+0xdc>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800d15c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d160:	2b00      	cmp	r3, #0
 800d162:	d104      	bne.n	800d16e <USB_DevInit+0xd2>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800d164:	2100      	movs	r1, #0
 800d166:	6878      	ldr	r0, [r7, #4]
 800d168:	f000 f968 	bl	800d43c <USB_SetDevSpeed>
 800d16c:	e008      	b.n	800d180 <USB_DevInit+0xe4>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800d16e:	2101      	movs	r1, #1
 800d170:	6878      	ldr	r0, [r7, #4]
 800d172:	f000 f963 	bl	800d43c <USB_SetDevSpeed>
 800d176:	e003      	b.n	800d180 <USB_DevInit+0xe4>
  else
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800d178:	2103      	movs	r1, #3
 800d17a:	6878      	ldr	r0, [r7, #4]
 800d17c:	f000 f95e 	bl	800d43c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800d180:	2110      	movs	r1, #16
 800d182:	6878      	ldr	r0, [r7, #4]
 800d184:	f000 f8fa 	bl	800d37c <USB_FlushTxFifo>
 800d188:	4603      	mov	r3, r0
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d001      	beq.n	800d192 <USB_DevInit+0xf6>
  {
    ret = HAL_ERROR;
 800d18e:	2301      	movs	r3, #1
 800d190:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800d192:	6878      	ldr	r0, [r7, #4]
 800d194:	f000 f924 	bl	800d3e0 <USB_FlushRxFifo>
 800d198:	4603      	mov	r3, r0
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	d001      	beq.n	800d1a2 <USB_DevInit+0x106>
  {
    ret = HAL_ERROR;
 800d19e:	2301      	movs	r3, #1
 800d1a0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800d1a2:	68fb      	ldr	r3, [r7, #12]
 800d1a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d1a8:	461a      	mov	r2, r3
 800d1aa:	2300      	movs	r3, #0
 800d1ac:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800d1ae:	68fb      	ldr	r3, [r7, #12]
 800d1b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d1b4:	461a      	mov	r2, r3
 800d1b6:	2300      	movs	r3, #0
 800d1b8:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800d1ba:	68fb      	ldr	r3, [r7, #12]
 800d1bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d1c0:	461a      	mov	r2, r3
 800d1c2:	2300      	movs	r3, #0
 800d1c4:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d1c6:	2300      	movs	r3, #0
 800d1c8:	613b      	str	r3, [r7, #16]
 800d1ca:	e043      	b.n	800d254 <USB_DevInit+0x1b8>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800d1cc:	693b      	ldr	r3, [r7, #16]
 800d1ce:	015a      	lsls	r2, r3, #5
 800d1d0:	68fb      	ldr	r3, [r7, #12]
 800d1d2:	4413      	add	r3, r2
 800d1d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800d1de:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800d1e2:	d118      	bne.n	800d216 <USB_DevInit+0x17a>
    {
      if (i == 0U)
 800d1e4:	693b      	ldr	r3, [r7, #16]
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	d10a      	bne.n	800d200 <USB_DevInit+0x164>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800d1ea:	693b      	ldr	r3, [r7, #16]
 800d1ec:	015a      	lsls	r2, r3, #5
 800d1ee:	68fb      	ldr	r3, [r7, #12]
 800d1f0:	4413      	add	r3, r2
 800d1f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d1f6:	461a      	mov	r2, r3
 800d1f8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800d1fc:	6013      	str	r3, [r2, #0]
 800d1fe:	e013      	b.n	800d228 <USB_DevInit+0x18c>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800d200:	693b      	ldr	r3, [r7, #16]
 800d202:	015a      	lsls	r2, r3, #5
 800d204:	68fb      	ldr	r3, [r7, #12]
 800d206:	4413      	add	r3, r2
 800d208:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d20c:	461a      	mov	r2, r3
 800d20e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800d212:	6013      	str	r3, [r2, #0]
 800d214:	e008      	b.n	800d228 <USB_DevInit+0x18c>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800d216:	693b      	ldr	r3, [r7, #16]
 800d218:	015a      	lsls	r2, r3, #5
 800d21a:	68fb      	ldr	r3, [r7, #12]
 800d21c:	4413      	add	r3, r2
 800d21e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d222:	461a      	mov	r2, r3
 800d224:	2300      	movs	r3, #0
 800d226:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800d228:	693b      	ldr	r3, [r7, #16]
 800d22a:	015a      	lsls	r2, r3, #5
 800d22c:	68fb      	ldr	r3, [r7, #12]
 800d22e:	4413      	add	r3, r2
 800d230:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d234:	461a      	mov	r2, r3
 800d236:	2300      	movs	r3, #0
 800d238:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800d23a:	693b      	ldr	r3, [r7, #16]
 800d23c:	015a      	lsls	r2, r3, #5
 800d23e:	68fb      	ldr	r3, [r7, #12]
 800d240:	4413      	add	r3, r2
 800d242:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d246:	461a      	mov	r2, r3
 800d248:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800d24c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d24e:	693b      	ldr	r3, [r7, #16]
 800d250:	3301      	adds	r3, #1
 800d252:	613b      	str	r3, [r7, #16]
 800d254:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800d258:	461a      	mov	r2, r3
 800d25a:	693b      	ldr	r3, [r7, #16]
 800d25c:	4293      	cmp	r3, r2
 800d25e:	d3b5      	bcc.n	800d1cc <USB_DevInit+0x130>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d260:	2300      	movs	r3, #0
 800d262:	613b      	str	r3, [r7, #16]
 800d264:	e043      	b.n	800d2ee <USB_DevInit+0x252>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d266:	693b      	ldr	r3, [r7, #16]
 800d268:	015a      	lsls	r2, r3, #5
 800d26a:	68fb      	ldr	r3, [r7, #12]
 800d26c:	4413      	add	r3, r2
 800d26e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d272:	681b      	ldr	r3, [r3, #0]
 800d274:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800d278:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800d27c:	d118      	bne.n	800d2b0 <USB_DevInit+0x214>
    {
      if (i == 0U)
 800d27e:	693b      	ldr	r3, [r7, #16]
 800d280:	2b00      	cmp	r3, #0
 800d282:	d10a      	bne.n	800d29a <USB_DevInit+0x1fe>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800d284:	693b      	ldr	r3, [r7, #16]
 800d286:	015a      	lsls	r2, r3, #5
 800d288:	68fb      	ldr	r3, [r7, #12]
 800d28a:	4413      	add	r3, r2
 800d28c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d290:	461a      	mov	r2, r3
 800d292:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800d296:	6013      	str	r3, [r2, #0]
 800d298:	e013      	b.n	800d2c2 <USB_DevInit+0x226>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800d29a:	693b      	ldr	r3, [r7, #16]
 800d29c:	015a      	lsls	r2, r3, #5
 800d29e:	68fb      	ldr	r3, [r7, #12]
 800d2a0:	4413      	add	r3, r2
 800d2a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d2a6:	461a      	mov	r2, r3
 800d2a8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800d2ac:	6013      	str	r3, [r2, #0]
 800d2ae:	e008      	b.n	800d2c2 <USB_DevInit+0x226>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800d2b0:	693b      	ldr	r3, [r7, #16]
 800d2b2:	015a      	lsls	r2, r3, #5
 800d2b4:	68fb      	ldr	r3, [r7, #12]
 800d2b6:	4413      	add	r3, r2
 800d2b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d2bc:	461a      	mov	r2, r3
 800d2be:	2300      	movs	r3, #0
 800d2c0:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800d2c2:	693b      	ldr	r3, [r7, #16]
 800d2c4:	015a      	lsls	r2, r3, #5
 800d2c6:	68fb      	ldr	r3, [r7, #12]
 800d2c8:	4413      	add	r3, r2
 800d2ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d2ce:	461a      	mov	r2, r3
 800d2d0:	2300      	movs	r3, #0
 800d2d2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800d2d4:	693b      	ldr	r3, [r7, #16]
 800d2d6:	015a      	lsls	r2, r3, #5
 800d2d8:	68fb      	ldr	r3, [r7, #12]
 800d2da:	4413      	add	r3, r2
 800d2dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d2e0:	461a      	mov	r2, r3
 800d2e2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800d2e6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d2e8:	693b      	ldr	r3, [r7, #16]
 800d2ea:	3301      	adds	r3, #1
 800d2ec:	613b      	str	r3, [r7, #16]
 800d2ee:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800d2f2:	461a      	mov	r2, r3
 800d2f4:	693b      	ldr	r3, [r7, #16]
 800d2f6:	4293      	cmp	r3, r2
 800d2f8:	d3b5      	bcc.n	800d266 <USB_DevInit+0x1ca>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800d2fa:	68fb      	ldr	r3, [r7, #12]
 800d2fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d300:	691b      	ldr	r3, [r3, #16]
 800d302:	68fa      	ldr	r2, [r7, #12]
 800d304:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800d308:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d30c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	2200      	movs	r2, #0
 800d312:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800d31a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800d31c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d320:	2b00      	cmp	r3, #0
 800d322:	d105      	bne.n	800d330 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	699b      	ldr	r3, [r3, #24]
 800d328:	f043 0210 	orr.w	r2, r3, #16
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	699a      	ldr	r2, [r3, #24]
 800d334:	4b10      	ldr	r3, [pc, #64]	@ (800d378 <USB_DevInit+0x2dc>)
 800d336:	4313      	orrs	r3, r2
 800d338:	687a      	ldr	r2, [r7, #4]
 800d33a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800d33c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800d340:	2b00      	cmp	r3, #0
 800d342:	d005      	beq.n	800d350 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	699b      	ldr	r3, [r3, #24]
 800d348:	f043 0208 	orr.w	r2, r3, #8
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800d350:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800d354:	2b01      	cmp	r3, #1
 800d356:	d107      	bne.n	800d368 <USB_DevInit+0x2cc>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	699b      	ldr	r3, [r3, #24]
 800d35c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800d360:	f043 0304 	orr.w	r3, r3, #4
 800d364:	687a      	ldr	r2, [r7, #4]
 800d366:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800d368:	7dfb      	ldrb	r3, [r7, #23]
}
 800d36a:	4618      	mov	r0, r3
 800d36c:	3718      	adds	r7, #24
 800d36e:	46bd      	mov	sp, r7
 800d370:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d374:	b004      	add	sp, #16
 800d376:	4770      	bx	lr
 800d378:	803c3800 	.word	0x803c3800

0800d37c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800d37c:	b480      	push	{r7}
 800d37e:	b085      	sub	sp, #20
 800d380:	af00      	add	r7, sp, #0
 800d382:	6078      	str	r0, [r7, #4]
 800d384:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800d386:	2300      	movs	r3, #0
 800d388:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d38a:	68fb      	ldr	r3, [r7, #12]
 800d38c:	3301      	adds	r3, #1
 800d38e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d390:	68fb      	ldr	r3, [r7, #12]
 800d392:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d396:	d901      	bls.n	800d39c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800d398:	2303      	movs	r3, #3
 800d39a:	e01b      	b.n	800d3d4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	691b      	ldr	r3, [r3, #16]
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	daf2      	bge.n	800d38a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800d3a4:	2300      	movs	r3, #0
 800d3a6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800d3a8:	683b      	ldr	r3, [r7, #0]
 800d3aa:	019b      	lsls	r3, r3, #6
 800d3ac:	f043 0220 	orr.w	r2, r3, #32
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d3b4:	68fb      	ldr	r3, [r7, #12]
 800d3b6:	3301      	adds	r3, #1
 800d3b8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d3ba:	68fb      	ldr	r3, [r7, #12]
 800d3bc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d3c0:	d901      	bls.n	800d3c6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800d3c2:	2303      	movs	r3, #3
 800d3c4:	e006      	b.n	800d3d4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	691b      	ldr	r3, [r3, #16]
 800d3ca:	f003 0320 	and.w	r3, r3, #32
 800d3ce:	2b20      	cmp	r3, #32
 800d3d0:	d0f0      	beq.n	800d3b4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800d3d2:	2300      	movs	r3, #0
}
 800d3d4:	4618      	mov	r0, r3
 800d3d6:	3714      	adds	r7, #20
 800d3d8:	46bd      	mov	sp, r7
 800d3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3de:	4770      	bx	lr

0800d3e0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800d3e0:	b480      	push	{r7}
 800d3e2:	b085      	sub	sp, #20
 800d3e4:	af00      	add	r7, sp, #0
 800d3e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d3e8:	2300      	movs	r3, #0
 800d3ea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d3ec:	68fb      	ldr	r3, [r7, #12]
 800d3ee:	3301      	adds	r3, #1
 800d3f0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d3f2:	68fb      	ldr	r3, [r7, #12]
 800d3f4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d3f8:	d901      	bls.n	800d3fe <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800d3fa:	2303      	movs	r3, #3
 800d3fc:	e018      	b.n	800d430 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	691b      	ldr	r3, [r3, #16]
 800d402:	2b00      	cmp	r3, #0
 800d404:	daf2      	bge.n	800d3ec <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800d406:	2300      	movs	r3, #0
 800d408:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	2210      	movs	r2, #16
 800d40e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d410:	68fb      	ldr	r3, [r7, #12]
 800d412:	3301      	adds	r3, #1
 800d414:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d416:	68fb      	ldr	r3, [r7, #12]
 800d418:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d41c:	d901      	bls.n	800d422 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800d41e:	2303      	movs	r3, #3
 800d420:	e006      	b.n	800d430 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	691b      	ldr	r3, [r3, #16]
 800d426:	f003 0310 	and.w	r3, r3, #16
 800d42a:	2b10      	cmp	r3, #16
 800d42c:	d0f0      	beq.n	800d410 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800d42e:	2300      	movs	r3, #0
}
 800d430:	4618      	mov	r0, r3
 800d432:	3714      	adds	r7, #20
 800d434:	46bd      	mov	sp, r7
 800d436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d43a:	4770      	bx	lr

0800d43c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800d43c:	b480      	push	{r7}
 800d43e:	b085      	sub	sp, #20
 800d440:	af00      	add	r7, sp, #0
 800d442:	6078      	str	r0, [r7, #4]
 800d444:	460b      	mov	r3, r1
 800d446:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800d44c:	68fb      	ldr	r3, [r7, #12]
 800d44e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d452:	681a      	ldr	r2, [r3, #0]
 800d454:	78fb      	ldrb	r3, [r7, #3]
 800d456:	68f9      	ldr	r1, [r7, #12]
 800d458:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800d45c:	4313      	orrs	r3, r2
 800d45e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800d460:	2300      	movs	r3, #0
}
 800d462:	4618      	mov	r0, r3
 800d464:	3714      	adds	r7, #20
 800d466:	46bd      	mov	sp, r7
 800d468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d46c:	4770      	bx	lr

0800d46e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800d46e:	b480      	push	{r7}
 800d470:	b085      	sub	sp, #20
 800d472:	af00      	add	r7, sp, #0
 800d474:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800d47a:	68fb      	ldr	r3, [r7, #12]
 800d47c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800d480:	681b      	ldr	r3, [r3, #0]
 800d482:	68fa      	ldr	r2, [r7, #12]
 800d484:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800d488:	f023 0303 	bic.w	r3, r3, #3
 800d48c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d48e:	68fb      	ldr	r3, [r7, #12]
 800d490:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d494:	685b      	ldr	r3, [r3, #4]
 800d496:	68fa      	ldr	r2, [r7, #12]
 800d498:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800d49c:	f043 0302 	orr.w	r3, r3, #2
 800d4a0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d4a2:	2300      	movs	r3, #0
}
 800d4a4:	4618      	mov	r0, r3
 800d4a6:	3714      	adds	r7, #20
 800d4a8:	46bd      	mov	sp, r7
 800d4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ae:	4770      	bx	lr

0800d4b0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800d4b0:	b480      	push	{r7}
 800d4b2:	b083      	sub	sp, #12
 800d4b4:	af00      	add	r7, sp, #0
 800d4b6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	695b      	ldr	r3, [r3, #20]
 800d4bc:	f003 0301 	and.w	r3, r3, #1
}
 800d4c0:	4618      	mov	r0, r3
 800d4c2:	370c      	adds	r7, #12
 800d4c4:	46bd      	mov	sp, r7
 800d4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ca:	4770      	bx	lr

0800d4cc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800d4cc:	b480      	push	{r7}
 800d4ce:	b085      	sub	sp, #20
 800d4d0:	af00      	add	r7, sp, #0
 800d4d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d4d4:	2300      	movs	r3, #0
 800d4d6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d4d8:	68fb      	ldr	r3, [r7, #12]
 800d4da:	3301      	adds	r3, #1
 800d4dc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d4de:	68fb      	ldr	r3, [r7, #12]
 800d4e0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d4e4:	d901      	bls.n	800d4ea <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800d4e6:	2303      	movs	r3, #3
 800d4e8:	e01b      	b.n	800d522 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	691b      	ldr	r3, [r3, #16]
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	daf2      	bge.n	800d4d8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800d4f2:	2300      	movs	r3, #0
 800d4f4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	691b      	ldr	r3, [r3, #16]
 800d4fa:	f043 0201 	orr.w	r2, r3, #1
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d502:	68fb      	ldr	r3, [r7, #12]
 800d504:	3301      	adds	r3, #1
 800d506:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d508:	68fb      	ldr	r3, [r7, #12]
 800d50a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d50e:	d901      	bls.n	800d514 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800d510:	2303      	movs	r3, #3
 800d512:	e006      	b.n	800d522 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	691b      	ldr	r3, [r3, #16]
 800d518:	f003 0301 	and.w	r3, r3, #1
 800d51c:	2b01      	cmp	r3, #1
 800d51e:	d0f0      	beq.n	800d502 <USB_CoreReset+0x36>

  return HAL_OK;
 800d520:	2300      	movs	r3, #0
}
 800d522:	4618      	mov	r0, r3
 800d524:	3714      	adds	r7, #20
 800d526:	46bd      	mov	sp, r7
 800d528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d52c:	4770      	bx	lr

0800d52e <__cvt>:
 800d52e:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d532:	ec57 6b10 	vmov	r6, r7, d0
 800d536:	2f00      	cmp	r7, #0
 800d538:	460c      	mov	r4, r1
 800d53a:	4619      	mov	r1, r3
 800d53c:	463b      	mov	r3, r7
 800d53e:	bfb4      	ite	lt
 800d540:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800d544:	2300      	movge	r3, #0
 800d546:	4691      	mov	r9, r2
 800d548:	bfbf      	itttt	lt
 800d54a:	4632      	movlt	r2, r6
 800d54c:	461f      	movlt	r7, r3
 800d54e:	232d      	movlt	r3, #45	@ 0x2d
 800d550:	4616      	movlt	r6, r2
 800d552:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800d556:	700b      	strb	r3, [r1, #0]
 800d558:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d55a:	f023 0820 	bic.w	r8, r3, #32
 800d55e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800d562:	d005      	beq.n	800d570 <__cvt+0x42>
 800d564:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800d568:	d100      	bne.n	800d56c <__cvt+0x3e>
 800d56a:	3401      	adds	r4, #1
 800d56c:	2102      	movs	r1, #2
 800d56e:	e000      	b.n	800d572 <__cvt+0x44>
 800d570:	2103      	movs	r1, #3
 800d572:	ab03      	add	r3, sp, #12
 800d574:	4622      	mov	r2, r4
 800d576:	9301      	str	r3, [sp, #4]
 800d578:	ab02      	add	r3, sp, #8
 800d57a:	ec47 6b10 	vmov	d0, r6, r7
 800d57e:	9300      	str	r3, [sp, #0]
 800d580:	4653      	mov	r3, sl
 800d582:	f001 f889 	bl	800e698 <_dtoa_r>
 800d586:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800d58a:	4605      	mov	r5, r0
 800d58c:	d119      	bne.n	800d5c2 <__cvt+0x94>
 800d58e:	f019 0f01 	tst.w	r9, #1
 800d592:	d00e      	beq.n	800d5b2 <__cvt+0x84>
 800d594:	eb00 0904 	add.w	r9, r0, r4
 800d598:	2200      	movs	r2, #0
 800d59a:	2300      	movs	r3, #0
 800d59c:	4630      	mov	r0, r6
 800d59e:	4639      	mov	r1, r7
 800d5a0:	f7f3 fab6 	bl	8000b10 <__aeabi_dcmpeq>
 800d5a4:	b108      	cbz	r0, 800d5aa <__cvt+0x7c>
 800d5a6:	f8cd 900c 	str.w	r9, [sp, #12]
 800d5aa:	2230      	movs	r2, #48	@ 0x30
 800d5ac:	9b03      	ldr	r3, [sp, #12]
 800d5ae:	454b      	cmp	r3, r9
 800d5b0:	d31e      	bcc.n	800d5f0 <__cvt+0xc2>
 800d5b2:	9b03      	ldr	r3, [sp, #12]
 800d5b4:	4628      	mov	r0, r5
 800d5b6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d5b8:	1b5b      	subs	r3, r3, r5
 800d5ba:	6013      	str	r3, [r2, #0]
 800d5bc:	b004      	add	sp, #16
 800d5be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d5c2:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800d5c6:	eb00 0904 	add.w	r9, r0, r4
 800d5ca:	d1e5      	bne.n	800d598 <__cvt+0x6a>
 800d5cc:	7803      	ldrb	r3, [r0, #0]
 800d5ce:	2b30      	cmp	r3, #48	@ 0x30
 800d5d0:	d10a      	bne.n	800d5e8 <__cvt+0xba>
 800d5d2:	2200      	movs	r2, #0
 800d5d4:	2300      	movs	r3, #0
 800d5d6:	4630      	mov	r0, r6
 800d5d8:	4639      	mov	r1, r7
 800d5da:	f7f3 fa99 	bl	8000b10 <__aeabi_dcmpeq>
 800d5de:	b918      	cbnz	r0, 800d5e8 <__cvt+0xba>
 800d5e0:	f1c4 0401 	rsb	r4, r4, #1
 800d5e4:	f8ca 4000 	str.w	r4, [sl]
 800d5e8:	f8da 3000 	ldr.w	r3, [sl]
 800d5ec:	4499      	add	r9, r3
 800d5ee:	e7d3      	b.n	800d598 <__cvt+0x6a>
 800d5f0:	1c59      	adds	r1, r3, #1
 800d5f2:	9103      	str	r1, [sp, #12]
 800d5f4:	701a      	strb	r2, [r3, #0]
 800d5f6:	e7d9      	b.n	800d5ac <__cvt+0x7e>

0800d5f8 <__exponent>:
 800d5f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d5fa:	2900      	cmp	r1, #0
 800d5fc:	7002      	strb	r2, [r0, #0]
 800d5fe:	bfba      	itte	lt
 800d600:	4249      	neglt	r1, r1
 800d602:	232d      	movlt	r3, #45	@ 0x2d
 800d604:	232b      	movge	r3, #43	@ 0x2b
 800d606:	2909      	cmp	r1, #9
 800d608:	7043      	strb	r3, [r0, #1]
 800d60a:	dd28      	ble.n	800d65e <__exponent+0x66>
 800d60c:	f10d 0307 	add.w	r3, sp, #7
 800d610:	270a      	movs	r7, #10
 800d612:	461d      	mov	r5, r3
 800d614:	461a      	mov	r2, r3
 800d616:	3b01      	subs	r3, #1
 800d618:	fbb1 f6f7 	udiv	r6, r1, r7
 800d61c:	fb07 1416 	mls	r4, r7, r6, r1
 800d620:	3430      	adds	r4, #48	@ 0x30
 800d622:	f802 4c01 	strb.w	r4, [r2, #-1]
 800d626:	460c      	mov	r4, r1
 800d628:	4631      	mov	r1, r6
 800d62a:	2c63      	cmp	r4, #99	@ 0x63
 800d62c:	dcf2      	bgt.n	800d614 <__exponent+0x1c>
 800d62e:	3130      	adds	r1, #48	@ 0x30
 800d630:	1e94      	subs	r4, r2, #2
 800d632:	f803 1c01 	strb.w	r1, [r3, #-1]
 800d636:	1c41      	adds	r1, r0, #1
 800d638:	4623      	mov	r3, r4
 800d63a:	42ab      	cmp	r3, r5
 800d63c:	d30a      	bcc.n	800d654 <__exponent+0x5c>
 800d63e:	f10d 0309 	add.w	r3, sp, #9
 800d642:	1a9b      	subs	r3, r3, r2
 800d644:	42ac      	cmp	r4, r5
 800d646:	bf88      	it	hi
 800d648:	2300      	movhi	r3, #0
 800d64a:	3302      	adds	r3, #2
 800d64c:	4403      	add	r3, r0
 800d64e:	1a18      	subs	r0, r3, r0
 800d650:	b003      	add	sp, #12
 800d652:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d654:	f813 6b01 	ldrb.w	r6, [r3], #1
 800d658:	f801 6f01 	strb.w	r6, [r1, #1]!
 800d65c:	e7ed      	b.n	800d63a <__exponent+0x42>
 800d65e:	2330      	movs	r3, #48	@ 0x30
 800d660:	3130      	adds	r1, #48	@ 0x30
 800d662:	7083      	strb	r3, [r0, #2]
 800d664:	1d03      	adds	r3, r0, #4
 800d666:	70c1      	strb	r1, [r0, #3]
 800d668:	e7f1      	b.n	800d64e <__exponent+0x56>
	...

0800d66c <_printf_float>:
 800d66c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d670:	b08d      	sub	sp, #52	@ 0x34
 800d672:	460c      	mov	r4, r1
 800d674:	4616      	mov	r6, r2
 800d676:	461f      	mov	r7, r3
 800d678:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800d67c:	4605      	mov	r5, r0
 800d67e:	f000 fef1 	bl	800e464 <_localeconv_r>
 800d682:	6803      	ldr	r3, [r0, #0]
 800d684:	4618      	mov	r0, r3
 800d686:	9304      	str	r3, [sp, #16]
 800d688:	f7f2 fe16 	bl	80002b8 <strlen>
 800d68c:	2300      	movs	r3, #0
 800d68e:	9005      	str	r0, [sp, #20]
 800d690:	930a      	str	r3, [sp, #40]	@ 0x28
 800d692:	f8d8 3000 	ldr.w	r3, [r8]
 800d696:	f894 a018 	ldrb.w	sl, [r4, #24]
 800d69a:	3307      	adds	r3, #7
 800d69c:	f8d4 b000 	ldr.w	fp, [r4]
 800d6a0:	f023 0307 	bic.w	r3, r3, #7
 800d6a4:	f103 0208 	add.w	r2, r3, #8
 800d6a8:	f8c8 2000 	str.w	r2, [r8]
 800d6ac:	f04f 32ff 	mov.w	r2, #4294967295
 800d6b0:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d6b4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800d6b8:	f8cd 8018 	str.w	r8, [sp, #24]
 800d6bc:	9307      	str	r3, [sp, #28]
 800d6be:	4b9d      	ldr	r3, [pc, #628]	@ (800d934 <_printf_float+0x2c8>)
 800d6c0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d6c4:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800d6c8:	f7f3 fa54 	bl	8000b74 <__aeabi_dcmpun>
 800d6cc:	bb70      	cbnz	r0, 800d72c <_printf_float+0xc0>
 800d6ce:	f04f 32ff 	mov.w	r2, #4294967295
 800d6d2:	4b98      	ldr	r3, [pc, #608]	@ (800d934 <_printf_float+0x2c8>)
 800d6d4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d6d8:	f7f3 fa2e 	bl	8000b38 <__aeabi_dcmple>
 800d6dc:	bb30      	cbnz	r0, 800d72c <_printf_float+0xc0>
 800d6de:	2200      	movs	r2, #0
 800d6e0:	2300      	movs	r3, #0
 800d6e2:	4640      	mov	r0, r8
 800d6e4:	4649      	mov	r1, r9
 800d6e6:	f7f3 fa1d 	bl	8000b24 <__aeabi_dcmplt>
 800d6ea:	b110      	cbz	r0, 800d6f2 <_printf_float+0x86>
 800d6ec:	232d      	movs	r3, #45	@ 0x2d
 800d6ee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d6f2:	4a91      	ldr	r2, [pc, #580]	@ (800d938 <_printf_float+0x2cc>)
 800d6f4:	4b91      	ldr	r3, [pc, #580]	@ (800d93c <_printf_float+0x2d0>)
 800d6f6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800d6fa:	bf94      	ite	ls
 800d6fc:	4690      	movls	r8, r2
 800d6fe:	4698      	movhi	r8, r3
 800d700:	2303      	movs	r3, #3
 800d702:	f04f 0900 	mov.w	r9, #0
 800d706:	6123      	str	r3, [r4, #16]
 800d708:	f02b 0304 	bic.w	r3, fp, #4
 800d70c:	6023      	str	r3, [r4, #0]
 800d70e:	4633      	mov	r3, r6
 800d710:	aa0b      	add	r2, sp, #44	@ 0x2c
 800d712:	4621      	mov	r1, r4
 800d714:	4628      	mov	r0, r5
 800d716:	9700      	str	r7, [sp, #0]
 800d718:	f000 f9d2 	bl	800dac0 <_printf_common>
 800d71c:	3001      	adds	r0, #1
 800d71e:	f040 808d 	bne.w	800d83c <_printf_float+0x1d0>
 800d722:	f04f 30ff 	mov.w	r0, #4294967295
 800d726:	b00d      	add	sp, #52	@ 0x34
 800d728:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d72c:	4642      	mov	r2, r8
 800d72e:	464b      	mov	r3, r9
 800d730:	4640      	mov	r0, r8
 800d732:	4649      	mov	r1, r9
 800d734:	f7f3 fa1e 	bl	8000b74 <__aeabi_dcmpun>
 800d738:	b140      	cbz	r0, 800d74c <_printf_float+0xe0>
 800d73a:	464b      	mov	r3, r9
 800d73c:	4a80      	ldr	r2, [pc, #512]	@ (800d940 <_printf_float+0x2d4>)
 800d73e:	2b00      	cmp	r3, #0
 800d740:	bfbc      	itt	lt
 800d742:	232d      	movlt	r3, #45	@ 0x2d
 800d744:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800d748:	4b7e      	ldr	r3, [pc, #504]	@ (800d944 <_printf_float+0x2d8>)
 800d74a:	e7d4      	b.n	800d6f6 <_printf_float+0x8a>
 800d74c:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800d750:	6863      	ldr	r3, [r4, #4]
 800d752:	9206      	str	r2, [sp, #24]
 800d754:	1c5a      	adds	r2, r3, #1
 800d756:	d13b      	bne.n	800d7d0 <_printf_float+0x164>
 800d758:	2306      	movs	r3, #6
 800d75a:	6063      	str	r3, [r4, #4]
 800d75c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800d760:	2300      	movs	r3, #0
 800d762:	4628      	mov	r0, r5
 800d764:	6022      	str	r2, [r4, #0]
 800d766:	9303      	str	r3, [sp, #12]
 800d768:	ab0a      	add	r3, sp, #40	@ 0x28
 800d76a:	e9cd a301 	strd	sl, r3, [sp, #4]
 800d76e:	ab09      	add	r3, sp, #36	@ 0x24
 800d770:	ec49 8b10 	vmov	d0, r8, r9
 800d774:	9300      	str	r3, [sp, #0]
 800d776:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800d77a:	6861      	ldr	r1, [r4, #4]
 800d77c:	f7ff fed7 	bl	800d52e <__cvt>
 800d780:	9b06      	ldr	r3, [sp, #24]
 800d782:	4680      	mov	r8, r0
 800d784:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d786:	2b47      	cmp	r3, #71	@ 0x47
 800d788:	d129      	bne.n	800d7de <_printf_float+0x172>
 800d78a:	1cc8      	adds	r0, r1, #3
 800d78c:	db02      	blt.n	800d794 <_printf_float+0x128>
 800d78e:	6863      	ldr	r3, [r4, #4]
 800d790:	4299      	cmp	r1, r3
 800d792:	dd41      	ble.n	800d818 <_printf_float+0x1ac>
 800d794:	f1aa 0a02 	sub.w	sl, sl, #2
 800d798:	fa5f fa8a 	uxtb.w	sl, sl
 800d79c:	3901      	subs	r1, #1
 800d79e:	4652      	mov	r2, sl
 800d7a0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800d7a4:	9109      	str	r1, [sp, #36]	@ 0x24
 800d7a6:	f7ff ff27 	bl	800d5f8 <__exponent>
 800d7aa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d7ac:	4681      	mov	r9, r0
 800d7ae:	1813      	adds	r3, r2, r0
 800d7b0:	2a01      	cmp	r2, #1
 800d7b2:	6123      	str	r3, [r4, #16]
 800d7b4:	dc02      	bgt.n	800d7bc <_printf_float+0x150>
 800d7b6:	6822      	ldr	r2, [r4, #0]
 800d7b8:	07d2      	lsls	r2, r2, #31
 800d7ba:	d501      	bpl.n	800d7c0 <_printf_float+0x154>
 800d7bc:	3301      	adds	r3, #1
 800d7be:	6123      	str	r3, [r4, #16]
 800d7c0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d0a2      	beq.n	800d70e <_printf_float+0xa2>
 800d7c8:	232d      	movs	r3, #45	@ 0x2d
 800d7ca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d7ce:	e79e      	b.n	800d70e <_printf_float+0xa2>
 800d7d0:	9a06      	ldr	r2, [sp, #24]
 800d7d2:	2a47      	cmp	r2, #71	@ 0x47
 800d7d4:	d1c2      	bne.n	800d75c <_printf_float+0xf0>
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d1c0      	bne.n	800d75c <_printf_float+0xf0>
 800d7da:	2301      	movs	r3, #1
 800d7dc:	e7bd      	b.n	800d75a <_printf_float+0xee>
 800d7de:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d7e2:	d9db      	bls.n	800d79c <_printf_float+0x130>
 800d7e4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800d7e8:	d118      	bne.n	800d81c <_printf_float+0x1b0>
 800d7ea:	2900      	cmp	r1, #0
 800d7ec:	6863      	ldr	r3, [r4, #4]
 800d7ee:	dd0b      	ble.n	800d808 <_printf_float+0x19c>
 800d7f0:	6121      	str	r1, [r4, #16]
 800d7f2:	b913      	cbnz	r3, 800d7fa <_printf_float+0x18e>
 800d7f4:	6822      	ldr	r2, [r4, #0]
 800d7f6:	07d0      	lsls	r0, r2, #31
 800d7f8:	d502      	bpl.n	800d800 <_printf_float+0x194>
 800d7fa:	3301      	adds	r3, #1
 800d7fc:	440b      	add	r3, r1
 800d7fe:	6123      	str	r3, [r4, #16]
 800d800:	f04f 0900 	mov.w	r9, #0
 800d804:	65a1      	str	r1, [r4, #88]	@ 0x58
 800d806:	e7db      	b.n	800d7c0 <_printf_float+0x154>
 800d808:	b913      	cbnz	r3, 800d810 <_printf_float+0x1a4>
 800d80a:	6822      	ldr	r2, [r4, #0]
 800d80c:	07d2      	lsls	r2, r2, #31
 800d80e:	d501      	bpl.n	800d814 <_printf_float+0x1a8>
 800d810:	3302      	adds	r3, #2
 800d812:	e7f4      	b.n	800d7fe <_printf_float+0x192>
 800d814:	2301      	movs	r3, #1
 800d816:	e7f2      	b.n	800d7fe <_printf_float+0x192>
 800d818:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800d81c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d81e:	4299      	cmp	r1, r3
 800d820:	db05      	blt.n	800d82e <_printf_float+0x1c2>
 800d822:	6823      	ldr	r3, [r4, #0]
 800d824:	6121      	str	r1, [r4, #16]
 800d826:	07d8      	lsls	r0, r3, #31
 800d828:	d5ea      	bpl.n	800d800 <_printf_float+0x194>
 800d82a:	1c4b      	adds	r3, r1, #1
 800d82c:	e7e7      	b.n	800d7fe <_printf_float+0x192>
 800d82e:	2900      	cmp	r1, #0
 800d830:	bfd4      	ite	le
 800d832:	f1c1 0202 	rsble	r2, r1, #2
 800d836:	2201      	movgt	r2, #1
 800d838:	4413      	add	r3, r2
 800d83a:	e7e0      	b.n	800d7fe <_printf_float+0x192>
 800d83c:	6823      	ldr	r3, [r4, #0]
 800d83e:	055a      	lsls	r2, r3, #21
 800d840:	d407      	bmi.n	800d852 <_printf_float+0x1e6>
 800d842:	6923      	ldr	r3, [r4, #16]
 800d844:	4642      	mov	r2, r8
 800d846:	4631      	mov	r1, r6
 800d848:	4628      	mov	r0, r5
 800d84a:	47b8      	blx	r7
 800d84c:	3001      	adds	r0, #1
 800d84e:	d12b      	bne.n	800d8a8 <_printf_float+0x23c>
 800d850:	e767      	b.n	800d722 <_printf_float+0xb6>
 800d852:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d856:	f240 80dd 	bls.w	800da14 <_printf_float+0x3a8>
 800d85a:	2200      	movs	r2, #0
 800d85c:	2300      	movs	r3, #0
 800d85e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d862:	f7f3 f955 	bl	8000b10 <__aeabi_dcmpeq>
 800d866:	2800      	cmp	r0, #0
 800d868:	d033      	beq.n	800d8d2 <_printf_float+0x266>
 800d86a:	2301      	movs	r3, #1
 800d86c:	4a36      	ldr	r2, [pc, #216]	@ (800d948 <_printf_float+0x2dc>)
 800d86e:	4631      	mov	r1, r6
 800d870:	4628      	mov	r0, r5
 800d872:	47b8      	blx	r7
 800d874:	3001      	adds	r0, #1
 800d876:	f43f af54 	beq.w	800d722 <_printf_float+0xb6>
 800d87a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800d87e:	4543      	cmp	r3, r8
 800d880:	db02      	blt.n	800d888 <_printf_float+0x21c>
 800d882:	6823      	ldr	r3, [r4, #0]
 800d884:	07d8      	lsls	r0, r3, #31
 800d886:	d50f      	bpl.n	800d8a8 <_printf_float+0x23c>
 800d888:	4631      	mov	r1, r6
 800d88a:	4628      	mov	r0, r5
 800d88c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d890:	47b8      	blx	r7
 800d892:	3001      	adds	r0, #1
 800d894:	f43f af45 	beq.w	800d722 <_printf_float+0xb6>
 800d898:	f04f 0900 	mov.w	r9, #0
 800d89c:	f108 38ff 	add.w	r8, r8, #4294967295
 800d8a0:	f104 0a1a 	add.w	sl, r4, #26
 800d8a4:	45c8      	cmp	r8, r9
 800d8a6:	dc09      	bgt.n	800d8bc <_printf_float+0x250>
 800d8a8:	6823      	ldr	r3, [r4, #0]
 800d8aa:	079b      	lsls	r3, r3, #30
 800d8ac:	f100 8103 	bmi.w	800dab6 <_printf_float+0x44a>
 800d8b0:	68e0      	ldr	r0, [r4, #12]
 800d8b2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d8b4:	4298      	cmp	r0, r3
 800d8b6:	bfb8      	it	lt
 800d8b8:	4618      	movlt	r0, r3
 800d8ba:	e734      	b.n	800d726 <_printf_float+0xba>
 800d8bc:	2301      	movs	r3, #1
 800d8be:	4652      	mov	r2, sl
 800d8c0:	4631      	mov	r1, r6
 800d8c2:	4628      	mov	r0, r5
 800d8c4:	47b8      	blx	r7
 800d8c6:	3001      	adds	r0, #1
 800d8c8:	f43f af2b 	beq.w	800d722 <_printf_float+0xb6>
 800d8cc:	f109 0901 	add.w	r9, r9, #1
 800d8d0:	e7e8      	b.n	800d8a4 <_printf_float+0x238>
 800d8d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	dc39      	bgt.n	800d94c <_printf_float+0x2e0>
 800d8d8:	2301      	movs	r3, #1
 800d8da:	4a1b      	ldr	r2, [pc, #108]	@ (800d948 <_printf_float+0x2dc>)
 800d8dc:	4631      	mov	r1, r6
 800d8de:	4628      	mov	r0, r5
 800d8e0:	47b8      	blx	r7
 800d8e2:	3001      	adds	r0, #1
 800d8e4:	f43f af1d 	beq.w	800d722 <_printf_float+0xb6>
 800d8e8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800d8ec:	ea59 0303 	orrs.w	r3, r9, r3
 800d8f0:	d102      	bne.n	800d8f8 <_printf_float+0x28c>
 800d8f2:	6823      	ldr	r3, [r4, #0]
 800d8f4:	07d9      	lsls	r1, r3, #31
 800d8f6:	d5d7      	bpl.n	800d8a8 <_printf_float+0x23c>
 800d8f8:	4631      	mov	r1, r6
 800d8fa:	4628      	mov	r0, r5
 800d8fc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d900:	47b8      	blx	r7
 800d902:	3001      	adds	r0, #1
 800d904:	f43f af0d 	beq.w	800d722 <_printf_float+0xb6>
 800d908:	f04f 0a00 	mov.w	sl, #0
 800d90c:	f104 0b1a 	add.w	fp, r4, #26
 800d910:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d912:	425b      	negs	r3, r3
 800d914:	4553      	cmp	r3, sl
 800d916:	dc01      	bgt.n	800d91c <_printf_float+0x2b0>
 800d918:	464b      	mov	r3, r9
 800d91a:	e793      	b.n	800d844 <_printf_float+0x1d8>
 800d91c:	2301      	movs	r3, #1
 800d91e:	465a      	mov	r2, fp
 800d920:	4631      	mov	r1, r6
 800d922:	4628      	mov	r0, r5
 800d924:	47b8      	blx	r7
 800d926:	3001      	adds	r0, #1
 800d928:	f43f aefb 	beq.w	800d722 <_printf_float+0xb6>
 800d92c:	f10a 0a01 	add.w	sl, sl, #1
 800d930:	e7ee      	b.n	800d910 <_printf_float+0x2a4>
 800d932:	bf00      	nop
 800d934:	7fefffff 	.word	0x7fefffff
 800d938:	08011d50 	.word	0x08011d50
 800d93c:	08011d54 	.word	0x08011d54
 800d940:	08011d58 	.word	0x08011d58
 800d944:	08011d5c 	.word	0x08011d5c
 800d948:	08011d60 	.word	0x08011d60
 800d94c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d94e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d952:	4553      	cmp	r3, sl
 800d954:	bfa8      	it	ge
 800d956:	4653      	movge	r3, sl
 800d958:	2b00      	cmp	r3, #0
 800d95a:	4699      	mov	r9, r3
 800d95c:	dc36      	bgt.n	800d9cc <_printf_float+0x360>
 800d95e:	f04f 0b00 	mov.w	fp, #0
 800d962:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d966:	f104 021a 	add.w	r2, r4, #26
 800d96a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d96c:	9306      	str	r3, [sp, #24]
 800d96e:	eba3 0309 	sub.w	r3, r3, r9
 800d972:	455b      	cmp	r3, fp
 800d974:	dc31      	bgt.n	800d9da <_printf_float+0x36e>
 800d976:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d978:	459a      	cmp	sl, r3
 800d97a:	dc3a      	bgt.n	800d9f2 <_printf_float+0x386>
 800d97c:	6823      	ldr	r3, [r4, #0]
 800d97e:	07da      	lsls	r2, r3, #31
 800d980:	d437      	bmi.n	800d9f2 <_printf_float+0x386>
 800d982:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d984:	ebaa 0903 	sub.w	r9, sl, r3
 800d988:	9b06      	ldr	r3, [sp, #24]
 800d98a:	ebaa 0303 	sub.w	r3, sl, r3
 800d98e:	4599      	cmp	r9, r3
 800d990:	bfa8      	it	ge
 800d992:	4699      	movge	r9, r3
 800d994:	f1b9 0f00 	cmp.w	r9, #0
 800d998:	dc33      	bgt.n	800da02 <_printf_float+0x396>
 800d99a:	f04f 0800 	mov.w	r8, #0
 800d99e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d9a2:	f104 0b1a 	add.w	fp, r4, #26
 800d9a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d9a8:	ebaa 0303 	sub.w	r3, sl, r3
 800d9ac:	eba3 0309 	sub.w	r3, r3, r9
 800d9b0:	4543      	cmp	r3, r8
 800d9b2:	f77f af79 	ble.w	800d8a8 <_printf_float+0x23c>
 800d9b6:	2301      	movs	r3, #1
 800d9b8:	465a      	mov	r2, fp
 800d9ba:	4631      	mov	r1, r6
 800d9bc:	4628      	mov	r0, r5
 800d9be:	47b8      	blx	r7
 800d9c0:	3001      	adds	r0, #1
 800d9c2:	f43f aeae 	beq.w	800d722 <_printf_float+0xb6>
 800d9c6:	f108 0801 	add.w	r8, r8, #1
 800d9ca:	e7ec      	b.n	800d9a6 <_printf_float+0x33a>
 800d9cc:	4642      	mov	r2, r8
 800d9ce:	4631      	mov	r1, r6
 800d9d0:	4628      	mov	r0, r5
 800d9d2:	47b8      	blx	r7
 800d9d4:	3001      	adds	r0, #1
 800d9d6:	d1c2      	bne.n	800d95e <_printf_float+0x2f2>
 800d9d8:	e6a3      	b.n	800d722 <_printf_float+0xb6>
 800d9da:	2301      	movs	r3, #1
 800d9dc:	4631      	mov	r1, r6
 800d9de:	4628      	mov	r0, r5
 800d9e0:	9206      	str	r2, [sp, #24]
 800d9e2:	47b8      	blx	r7
 800d9e4:	3001      	adds	r0, #1
 800d9e6:	f43f ae9c 	beq.w	800d722 <_printf_float+0xb6>
 800d9ea:	f10b 0b01 	add.w	fp, fp, #1
 800d9ee:	9a06      	ldr	r2, [sp, #24]
 800d9f0:	e7bb      	b.n	800d96a <_printf_float+0x2fe>
 800d9f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d9f6:	4631      	mov	r1, r6
 800d9f8:	4628      	mov	r0, r5
 800d9fa:	47b8      	blx	r7
 800d9fc:	3001      	adds	r0, #1
 800d9fe:	d1c0      	bne.n	800d982 <_printf_float+0x316>
 800da00:	e68f      	b.n	800d722 <_printf_float+0xb6>
 800da02:	9a06      	ldr	r2, [sp, #24]
 800da04:	464b      	mov	r3, r9
 800da06:	4631      	mov	r1, r6
 800da08:	4628      	mov	r0, r5
 800da0a:	4442      	add	r2, r8
 800da0c:	47b8      	blx	r7
 800da0e:	3001      	adds	r0, #1
 800da10:	d1c3      	bne.n	800d99a <_printf_float+0x32e>
 800da12:	e686      	b.n	800d722 <_printf_float+0xb6>
 800da14:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800da18:	f1ba 0f01 	cmp.w	sl, #1
 800da1c:	dc01      	bgt.n	800da22 <_printf_float+0x3b6>
 800da1e:	07db      	lsls	r3, r3, #31
 800da20:	d536      	bpl.n	800da90 <_printf_float+0x424>
 800da22:	2301      	movs	r3, #1
 800da24:	4642      	mov	r2, r8
 800da26:	4631      	mov	r1, r6
 800da28:	4628      	mov	r0, r5
 800da2a:	47b8      	blx	r7
 800da2c:	3001      	adds	r0, #1
 800da2e:	f43f ae78 	beq.w	800d722 <_printf_float+0xb6>
 800da32:	4631      	mov	r1, r6
 800da34:	4628      	mov	r0, r5
 800da36:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800da3a:	47b8      	blx	r7
 800da3c:	3001      	adds	r0, #1
 800da3e:	f43f ae70 	beq.w	800d722 <_printf_float+0xb6>
 800da42:	2200      	movs	r2, #0
 800da44:	2300      	movs	r3, #0
 800da46:	f10a 3aff 	add.w	sl, sl, #4294967295
 800da4a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800da4e:	f7f3 f85f 	bl	8000b10 <__aeabi_dcmpeq>
 800da52:	b9c0      	cbnz	r0, 800da86 <_printf_float+0x41a>
 800da54:	4653      	mov	r3, sl
 800da56:	f108 0201 	add.w	r2, r8, #1
 800da5a:	4631      	mov	r1, r6
 800da5c:	4628      	mov	r0, r5
 800da5e:	47b8      	blx	r7
 800da60:	3001      	adds	r0, #1
 800da62:	d10c      	bne.n	800da7e <_printf_float+0x412>
 800da64:	e65d      	b.n	800d722 <_printf_float+0xb6>
 800da66:	2301      	movs	r3, #1
 800da68:	465a      	mov	r2, fp
 800da6a:	4631      	mov	r1, r6
 800da6c:	4628      	mov	r0, r5
 800da6e:	47b8      	blx	r7
 800da70:	3001      	adds	r0, #1
 800da72:	f43f ae56 	beq.w	800d722 <_printf_float+0xb6>
 800da76:	f108 0801 	add.w	r8, r8, #1
 800da7a:	45d0      	cmp	r8, sl
 800da7c:	dbf3      	blt.n	800da66 <_printf_float+0x3fa>
 800da7e:	464b      	mov	r3, r9
 800da80:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800da84:	e6df      	b.n	800d846 <_printf_float+0x1da>
 800da86:	f04f 0800 	mov.w	r8, #0
 800da8a:	f104 0b1a 	add.w	fp, r4, #26
 800da8e:	e7f4      	b.n	800da7a <_printf_float+0x40e>
 800da90:	2301      	movs	r3, #1
 800da92:	4642      	mov	r2, r8
 800da94:	e7e1      	b.n	800da5a <_printf_float+0x3ee>
 800da96:	2301      	movs	r3, #1
 800da98:	464a      	mov	r2, r9
 800da9a:	4631      	mov	r1, r6
 800da9c:	4628      	mov	r0, r5
 800da9e:	47b8      	blx	r7
 800daa0:	3001      	adds	r0, #1
 800daa2:	f43f ae3e 	beq.w	800d722 <_printf_float+0xb6>
 800daa6:	f108 0801 	add.w	r8, r8, #1
 800daaa:	68e3      	ldr	r3, [r4, #12]
 800daac:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800daae:	1a5b      	subs	r3, r3, r1
 800dab0:	4543      	cmp	r3, r8
 800dab2:	dcf0      	bgt.n	800da96 <_printf_float+0x42a>
 800dab4:	e6fc      	b.n	800d8b0 <_printf_float+0x244>
 800dab6:	f04f 0800 	mov.w	r8, #0
 800daba:	f104 0919 	add.w	r9, r4, #25
 800dabe:	e7f4      	b.n	800daaa <_printf_float+0x43e>

0800dac0 <_printf_common>:
 800dac0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dac4:	4616      	mov	r6, r2
 800dac6:	4698      	mov	r8, r3
 800dac8:	688a      	ldr	r2, [r1, #8]
 800daca:	4607      	mov	r7, r0
 800dacc:	690b      	ldr	r3, [r1, #16]
 800dace:	460c      	mov	r4, r1
 800dad0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800dad4:	4293      	cmp	r3, r2
 800dad6:	bfb8      	it	lt
 800dad8:	4613      	movlt	r3, r2
 800dada:	6033      	str	r3, [r6, #0]
 800dadc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800dae0:	b10a      	cbz	r2, 800dae6 <_printf_common+0x26>
 800dae2:	3301      	adds	r3, #1
 800dae4:	6033      	str	r3, [r6, #0]
 800dae6:	6823      	ldr	r3, [r4, #0]
 800dae8:	0699      	lsls	r1, r3, #26
 800daea:	bf42      	ittt	mi
 800daec:	6833      	ldrmi	r3, [r6, #0]
 800daee:	3302      	addmi	r3, #2
 800daf0:	6033      	strmi	r3, [r6, #0]
 800daf2:	6825      	ldr	r5, [r4, #0]
 800daf4:	f015 0506 	ands.w	r5, r5, #6
 800daf8:	d106      	bne.n	800db08 <_printf_common+0x48>
 800dafa:	f104 0a19 	add.w	sl, r4, #25
 800dafe:	68e3      	ldr	r3, [r4, #12]
 800db00:	6832      	ldr	r2, [r6, #0]
 800db02:	1a9b      	subs	r3, r3, r2
 800db04:	42ab      	cmp	r3, r5
 800db06:	dc2b      	bgt.n	800db60 <_printf_common+0xa0>
 800db08:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800db0c:	6822      	ldr	r2, [r4, #0]
 800db0e:	3b00      	subs	r3, #0
 800db10:	bf18      	it	ne
 800db12:	2301      	movne	r3, #1
 800db14:	0692      	lsls	r2, r2, #26
 800db16:	d430      	bmi.n	800db7a <_printf_common+0xba>
 800db18:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800db1c:	4641      	mov	r1, r8
 800db1e:	4638      	mov	r0, r7
 800db20:	47c8      	blx	r9
 800db22:	3001      	adds	r0, #1
 800db24:	d023      	beq.n	800db6e <_printf_common+0xae>
 800db26:	6823      	ldr	r3, [r4, #0]
 800db28:	341a      	adds	r4, #26
 800db2a:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800db2e:	f003 0306 	and.w	r3, r3, #6
 800db32:	2b04      	cmp	r3, #4
 800db34:	bf0a      	itet	eq
 800db36:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 800db3a:	2500      	movne	r5, #0
 800db3c:	6833      	ldreq	r3, [r6, #0]
 800db3e:	f04f 0600 	mov.w	r6, #0
 800db42:	bf08      	it	eq
 800db44:	1aed      	subeq	r5, r5, r3
 800db46:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800db4a:	bf08      	it	eq
 800db4c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800db50:	4293      	cmp	r3, r2
 800db52:	bfc4      	itt	gt
 800db54:	1a9b      	subgt	r3, r3, r2
 800db56:	18ed      	addgt	r5, r5, r3
 800db58:	42b5      	cmp	r5, r6
 800db5a:	d11a      	bne.n	800db92 <_printf_common+0xd2>
 800db5c:	2000      	movs	r0, #0
 800db5e:	e008      	b.n	800db72 <_printf_common+0xb2>
 800db60:	2301      	movs	r3, #1
 800db62:	4652      	mov	r2, sl
 800db64:	4641      	mov	r1, r8
 800db66:	4638      	mov	r0, r7
 800db68:	47c8      	blx	r9
 800db6a:	3001      	adds	r0, #1
 800db6c:	d103      	bne.n	800db76 <_printf_common+0xb6>
 800db6e:	f04f 30ff 	mov.w	r0, #4294967295
 800db72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db76:	3501      	adds	r5, #1
 800db78:	e7c1      	b.n	800dafe <_printf_common+0x3e>
 800db7a:	18e1      	adds	r1, r4, r3
 800db7c:	1c5a      	adds	r2, r3, #1
 800db7e:	2030      	movs	r0, #48	@ 0x30
 800db80:	3302      	adds	r3, #2
 800db82:	4422      	add	r2, r4
 800db84:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800db88:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800db8c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800db90:	e7c2      	b.n	800db18 <_printf_common+0x58>
 800db92:	2301      	movs	r3, #1
 800db94:	4622      	mov	r2, r4
 800db96:	4641      	mov	r1, r8
 800db98:	4638      	mov	r0, r7
 800db9a:	47c8      	blx	r9
 800db9c:	3001      	adds	r0, #1
 800db9e:	d0e6      	beq.n	800db6e <_printf_common+0xae>
 800dba0:	3601      	adds	r6, #1
 800dba2:	e7d9      	b.n	800db58 <_printf_common+0x98>

0800dba4 <_printf_i>:
 800dba4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800dba8:	7e0f      	ldrb	r7, [r1, #24]
 800dbaa:	4691      	mov	r9, r2
 800dbac:	4680      	mov	r8, r0
 800dbae:	460c      	mov	r4, r1
 800dbb0:	2f78      	cmp	r7, #120	@ 0x78
 800dbb2:	469a      	mov	sl, r3
 800dbb4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800dbb6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800dbba:	d807      	bhi.n	800dbcc <_printf_i+0x28>
 800dbbc:	2f62      	cmp	r7, #98	@ 0x62
 800dbbe:	d80a      	bhi.n	800dbd6 <_printf_i+0x32>
 800dbc0:	2f00      	cmp	r7, #0
 800dbc2:	f000 80d2 	beq.w	800dd6a <_printf_i+0x1c6>
 800dbc6:	2f58      	cmp	r7, #88	@ 0x58
 800dbc8:	f000 80b9 	beq.w	800dd3e <_printf_i+0x19a>
 800dbcc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800dbd0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800dbd4:	e03a      	b.n	800dc4c <_printf_i+0xa8>
 800dbd6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800dbda:	2b15      	cmp	r3, #21
 800dbdc:	d8f6      	bhi.n	800dbcc <_printf_i+0x28>
 800dbde:	a101      	add	r1, pc, #4	@ (adr r1, 800dbe4 <_printf_i+0x40>)
 800dbe0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800dbe4:	0800dc3d 	.word	0x0800dc3d
 800dbe8:	0800dc51 	.word	0x0800dc51
 800dbec:	0800dbcd 	.word	0x0800dbcd
 800dbf0:	0800dbcd 	.word	0x0800dbcd
 800dbf4:	0800dbcd 	.word	0x0800dbcd
 800dbf8:	0800dbcd 	.word	0x0800dbcd
 800dbfc:	0800dc51 	.word	0x0800dc51
 800dc00:	0800dbcd 	.word	0x0800dbcd
 800dc04:	0800dbcd 	.word	0x0800dbcd
 800dc08:	0800dbcd 	.word	0x0800dbcd
 800dc0c:	0800dbcd 	.word	0x0800dbcd
 800dc10:	0800dd51 	.word	0x0800dd51
 800dc14:	0800dc7b 	.word	0x0800dc7b
 800dc18:	0800dd0b 	.word	0x0800dd0b
 800dc1c:	0800dbcd 	.word	0x0800dbcd
 800dc20:	0800dbcd 	.word	0x0800dbcd
 800dc24:	0800dd73 	.word	0x0800dd73
 800dc28:	0800dbcd 	.word	0x0800dbcd
 800dc2c:	0800dc7b 	.word	0x0800dc7b
 800dc30:	0800dbcd 	.word	0x0800dbcd
 800dc34:	0800dbcd 	.word	0x0800dbcd
 800dc38:	0800dd13 	.word	0x0800dd13
 800dc3c:	6833      	ldr	r3, [r6, #0]
 800dc3e:	1d1a      	adds	r2, r3, #4
 800dc40:	681b      	ldr	r3, [r3, #0]
 800dc42:	6032      	str	r2, [r6, #0]
 800dc44:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800dc48:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800dc4c:	2301      	movs	r3, #1
 800dc4e:	e09d      	b.n	800dd8c <_printf_i+0x1e8>
 800dc50:	6833      	ldr	r3, [r6, #0]
 800dc52:	6820      	ldr	r0, [r4, #0]
 800dc54:	1d19      	adds	r1, r3, #4
 800dc56:	6031      	str	r1, [r6, #0]
 800dc58:	0606      	lsls	r6, r0, #24
 800dc5a:	d501      	bpl.n	800dc60 <_printf_i+0xbc>
 800dc5c:	681d      	ldr	r5, [r3, #0]
 800dc5e:	e003      	b.n	800dc68 <_printf_i+0xc4>
 800dc60:	0645      	lsls	r5, r0, #25
 800dc62:	d5fb      	bpl.n	800dc5c <_printf_i+0xb8>
 800dc64:	f9b3 5000 	ldrsh.w	r5, [r3]
 800dc68:	2d00      	cmp	r5, #0
 800dc6a:	da03      	bge.n	800dc74 <_printf_i+0xd0>
 800dc6c:	232d      	movs	r3, #45	@ 0x2d
 800dc6e:	426d      	negs	r5, r5
 800dc70:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800dc74:	4859      	ldr	r0, [pc, #356]	@ (800dddc <_printf_i+0x238>)
 800dc76:	230a      	movs	r3, #10
 800dc78:	e011      	b.n	800dc9e <_printf_i+0xfa>
 800dc7a:	6821      	ldr	r1, [r4, #0]
 800dc7c:	6833      	ldr	r3, [r6, #0]
 800dc7e:	0608      	lsls	r0, r1, #24
 800dc80:	f853 5b04 	ldr.w	r5, [r3], #4
 800dc84:	d402      	bmi.n	800dc8c <_printf_i+0xe8>
 800dc86:	0649      	lsls	r1, r1, #25
 800dc88:	bf48      	it	mi
 800dc8a:	b2ad      	uxthmi	r5, r5
 800dc8c:	2f6f      	cmp	r7, #111	@ 0x6f
 800dc8e:	6033      	str	r3, [r6, #0]
 800dc90:	4852      	ldr	r0, [pc, #328]	@ (800dddc <_printf_i+0x238>)
 800dc92:	bf14      	ite	ne
 800dc94:	230a      	movne	r3, #10
 800dc96:	2308      	moveq	r3, #8
 800dc98:	2100      	movs	r1, #0
 800dc9a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800dc9e:	6866      	ldr	r6, [r4, #4]
 800dca0:	2e00      	cmp	r6, #0
 800dca2:	60a6      	str	r6, [r4, #8]
 800dca4:	bfa2      	ittt	ge
 800dca6:	6821      	ldrge	r1, [r4, #0]
 800dca8:	f021 0104 	bicge.w	r1, r1, #4
 800dcac:	6021      	strge	r1, [r4, #0]
 800dcae:	b90d      	cbnz	r5, 800dcb4 <_printf_i+0x110>
 800dcb0:	2e00      	cmp	r6, #0
 800dcb2:	d04b      	beq.n	800dd4c <_printf_i+0x1a8>
 800dcb4:	4616      	mov	r6, r2
 800dcb6:	fbb5 f1f3 	udiv	r1, r5, r3
 800dcba:	fb03 5711 	mls	r7, r3, r1, r5
 800dcbe:	5dc7      	ldrb	r7, [r0, r7]
 800dcc0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800dcc4:	462f      	mov	r7, r5
 800dcc6:	460d      	mov	r5, r1
 800dcc8:	42bb      	cmp	r3, r7
 800dcca:	d9f4      	bls.n	800dcb6 <_printf_i+0x112>
 800dccc:	2b08      	cmp	r3, #8
 800dcce:	d10b      	bne.n	800dce8 <_printf_i+0x144>
 800dcd0:	6823      	ldr	r3, [r4, #0]
 800dcd2:	07df      	lsls	r7, r3, #31
 800dcd4:	d508      	bpl.n	800dce8 <_printf_i+0x144>
 800dcd6:	6923      	ldr	r3, [r4, #16]
 800dcd8:	6861      	ldr	r1, [r4, #4]
 800dcda:	4299      	cmp	r1, r3
 800dcdc:	bfde      	ittt	le
 800dcde:	2330      	movle	r3, #48	@ 0x30
 800dce0:	f806 3c01 	strble.w	r3, [r6, #-1]
 800dce4:	f106 36ff 	addle.w	r6, r6, #4294967295
 800dce8:	1b92      	subs	r2, r2, r6
 800dcea:	6122      	str	r2, [r4, #16]
 800dcec:	464b      	mov	r3, r9
 800dcee:	aa03      	add	r2, sp, #12
 800dcf0:	4621      	mov	r1, r4
 800dcf2:	4640      	mov	r0, r8
 800dcf4:	f8cd a000 	str.w	sl, [sp]
 800dcf8:	f7ff fee2 	bl	800dac0 <_printf_common>
 800dcfc:	3001      	adds	r0, #1
 800dcfe:	d14a      	bne.n	800dd96 <_printf_i+0x1f2>
 800dd00:	f04f 30ff 	mov.w	r0, #4294967295
 800dd04:	b004      	add	sp, #16
 800dd06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dd0a:	6823      	ldr	r3, [r4, #0]
 800dd0c:	f043 0320 	orr.w	r3, r3, #32
 800dd10:	6023      	str	r3, [r4, #0]
 800dd12:	2778      	movs	r7, #120	@ 0x78
 800dd14:	4832      	ldr	r0, [pc, #200]	@ (800dde0 <_printf_i+0x23c>)
 800dd16:	6823      	ldr	r3, [r4, #0]
 800dd18:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800dd1c:	061f      	lsls	r7, r3, #24
 800dd1e:	6831      	ldr	r1, [r6, #0]
 800dd20:	f851 5b04 	ldr.w	r5, [r1], #4
 800dd24:	d402      	bmi.n	800dd2c <_printf_i+0x188>
 800dd26:	065f      	lsls	r7, r3, #25
 800dd28:	bf48      	it	mi
 800dd2a:	b2ad      	uxthmi	r5, r5
 800dd2c:	6031      	str	r1, [r6, #0]
 800dd2e:	07d9      	lsls	r1, r3, #31
 800dd30:	bf44      	itt	mi
 800dd32:	f043 0320 	orrmi.w	r3, r3, #32
 800dd36:	6023      	strmi	r3, [r4, #0]
 800dd38:	b11d      	cbz	r5, 800dd42 <_printf_i+0x19e>
 800dd3a:	2310      	movs	r3, #16
 800dd3c:	e7ac      	b.n	800dc98 <_printf_i+0xf4>
 800dd3e:	4827      	ldr	r0, [pc, #156]	@ (800dddc <_printf_i+0x238>)
 800dd40:	e7e9      	b.n	800dd16 <_printf_i+0x172>
 800dd42:	6823      	ldr	r3, [r4, #0]
 800dd44:	f023 0320 	bic.w	r3, r3, #32
 800dd48:	6023      	str	r3, [r4, #0]
 800dd4a:	e7f6      	b.n	800dd3a <_printf_i+0x196>
 800dd4c:	4616      	mov	r6, r2
 800dd4e:	e7bd      	b.n	800dccc <_printf_i+0x128>
 800dd50:	6833      	ldr	r3, [r6, #0]
 800dd52:	6825      	ldr	r5, [r4, #0]
 800dd54:	1d18      	adds	r0, r3, #4
 800dd56:	6961      	ldr	r1, [r4, #20]
 800dd58:	6030      	str	r0, [r6, #0]
 800dd5a:	062e      	lsls	r6, r5, #24
 800dd5c:	681b      	ldr	r3, [r3, #0]
 800dd5e:	d501      	bpl.n	800dd64 <_printf_i+0x1c0>
 800dd60:	6019      	str	r1, [r3, #0]
 800dd62:	e002      	b.n	800dd6a <_printf_i+0x1c6>
 800dd64:	0668      	lsls	r0, r5, #25
 800dd66:	d5fb      	bpl.n	800dd60 <_printf_i+0x1bc>
 800dd68:	8019      	strh	r1, [r3, #0]
 800dd6a:	2300      	movs	r3, #0
 800dd6c:	4616      	mov	r6, r2
 800dd6e:	6123      	str	r3, [r4, #16]
 800dd70:	e7bc      	b.n	800dcec <_printf_i+0x148>
 800dd72:	6833      	ldr	r3, [r6, #0]
 800dd74:	2100      	movs	r1, #0
 800dd76:	1d1a      	adds	r2, r3, #4
 800dd78:	6032      	str	r2, [r6, #0]
 800dd7a:	681e      	ldr	r6, [r3, #0]
 800dd7c:	6862      	ldr	r2, [r4, #4]
 800dd7e:	4630      	mov	r0, r6
 800dd80:	f000 fbe7 	bl	800e552 <memchr>
 800dd84:	b108      	cbz	r0, 800dd8a <_printf_i+0x1e6>
 800dd86:	1b80      	subs	r0, r0, r6
 800dd88:	6060      	str	r0, [r4, #4]
 800dd8a:	6863      	ldr	r3, [r4, #4]
 800dd8c:	6123      	str	r3, [r4, #16]
 800dd8e:	2300      	movs	r3, #0
 800dd90:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800dd94:	e7aa      	b.n	800dcec <_printf_i+0x148>
 800dd96:	6923      	ldr	r3, [r4, #16]
 800dd98:	4632      	mov	r2, r6
 800dd9a:	4649      	mov	r1, r9
 800dd9c:	4640      	mov	r0, r8
 800dd9e:	47d0      	blx	sl
 800dda0:	3001      	adds	r0, #1
 800dda2:	d0ad      	beq.n	800dd00 <_printf_i+0x15c>
 800dda4:	6823      	ldr	r3, [r4, #0]
 800dda6:	079b      	lsls	r3, r3, #30
 800dda8:	d413      	bmi.n	800ddd2 <_printf_i+0x22e>
 800ddaa:	68e0      	ldr	r0, [r4, #12]
 800ddac:	9b03      	ldr	r3, [sp, #12]
 800ddae:	4298      	cmp	r0, r3
 800ddb0:	bfb8      	it	lt
 800ddb2:	4618      	movlt	r0, r3
 800ddb4:	e7a6      	b.n	800dd04 <_printf_i+0x160>
 800ddb6:	2301      	movs	r3, #1
 800ddb8:	4632      	mov	r2, r6
 800ddba:	4649      	mov	r1, r9
 800ddbc:	4640      	mov	r0, r8
 800ddbe:	47d0      	blx	sl
 800ddc0:	3001      	adds	r0, #1
 800ddc2:	d09d      	beq.n	800dd00 <_printf_i+0x15c>
 800ddc4:	3501      	adds	r5, #1
 800ddc6:	68e3      	ldr	r3, [r4, #12]
 800ddc8:	9903      	ldr	r1, [sp, #12]
 800ddca:	1a5b      	subs	r3, r3, r1
 800ddcc:	42ab      	cmp	r3, r5
 800ddce:	dcf2      	bgt.n	800ddb6 <_printf_i+0x212>
 800ddd0:	e7eb      	b.n	800ddaa <_printf_i+0x206>
 800ddd2:	2500      	movs	r5, #0
 800ddd4:	f104 0619 	add.w	r6, r4, #25
 800ddd8:	e7f5      	b.n	800ddc6 <_printf_i+0x222>
 800ddda:	bf00      	nop
 800dddc:	08011d62 	.word	0x08011d62
 800dde0:	08011d73 	.word	0x08011d73

0800dde4 <_scanf_float>:
 800dde4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dde8:	b087      	sub	sp, #28
 800ddea:	4617      	mov	r7, r2
 800ddec:	4680      	mov	r8, r0
 800ddee:	460c      	mov	r4, r1
 800ddf0:	9303      	str	r3, [sp, #12]
 800ddf2:	688b      	ldr	r3, [r1, #8]
 800ddf4:	1e5a      	subs	r2, r3, #1
 800ddf6:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800ddfa:	460a      	mov	r2, r1
 800ddfc:	bf89      	itett	hi
 800ddfe:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800de02:	f04f 0b00 	movls.w	fp, #0
 800de06:	eb03 0b05 	addhi.w	fp, r3, r5
 800de0a:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800de0e:	f04f 0500 	mov.w	r5, #0
 800de12:	bf88      	it	hi
 800de14:	608b      	strhi	r3, [r1, #8]
 800de16:	680b      	ldr	r3, [r1, #0]
 800de18:	46aa      	mov	sl, r5
 800de1a:	46a9      	mov	r9, r5
 800de1c:	9502      	str	r5, [sp, #8]
 800de1e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800de22:	f842 3b1c 	str.w	r3, [r2], #28
 800de26:	4616      	mov	r6, r2
 800de28:	9201      	str	r2, [sp, #4]
 800de2a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800de2e:	68a2      	ldr	r2, [r4, #8]
 800de30:	b152      	cbz	r2, 800de48 <_scanf_float+0x64>
 800de32:	683b      	ldr	r3, [r7, #0]
 800de34:	781b      	ldrb	r3, [r3, #0]
 800de36:	2b4e      	cmp	r3, #78	@ 0x4e
 800de38:	d864      	bhi.n	800df04 <_scanf_float+0x120>
 800de3a:	2b40      	cmp	r3, #64	@ 0x40
 800de3c:	d83c      	bhi.n	800deb8 <_scanf_float+0xd4>
 800de3e:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800de42:	b2c8      	uxtb	r0, r1
 800de44:	280e      	cmp	r0, #14
 800de46:	d93a      	bls.n	800debe <_scanf_float+0xda>
 800de48:	f1b9 0f00 	cmp.w	r9, #0
 800de4c:	d003      	beq.n	800de56 <_scanf_float+0x72>
 800de4e:	6823      	ldr	r3, [r4, #0]
 800de50:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800de54:	6023      	str	r3, [r4, #0]
 800de56:	f10a 3aff 	add.w	sl, sl, #4294967295
 800de5a:	f1ba 0f01 	cmp.w	sl, #1
 800de5e:	f200 8117 	bhi.w	800e090 <_scanf_float+0x2ac>
 800de62:	9b01      	ldr	r3, [sp, #4]
 800de64:	429e      	cmp	r6, r3
 800de66:	f200 8108 	bhi.w	800e07a <_scanf_float+0x296>
 800de6a:	2001      	movs	r0, #1
 800de6c:	b007      	add	sp, #28
 800de6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de72:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800de76:	2a0d      	cmp	r2, #13
 800de78:	d8e6      	bhi.n	800de48 <_scanf_float+0x64>
 800de7a:	a101      	add	r1, pc, #4	@ (adr r1, 800de80 <_scanf_float+0x9c>)
 800de7c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800de80:	0800dfc7 	.word	0x0800dfc7
 800de84:	0800de49 	.word	0x0800de49
 800de88:	0800de49 	.word	0x0800de49
 800de8c:	0800de49 	.word	0x0800de49
 800de90:	0800e027 	.word	0x0800e027
 800de94:	0800dfff 	.word	0x0800dfff
 800de98:	0800de49 	.word	0x0800de49
 800de9c:	0800de49 	.word	0x0800de49
 800dea0:	0800dfd5 	.word	0x0800dfd5
 800dea4:	0800de49 	.word	0x0800de49
 800dea8:	0800de49 	.word	0x0800de49
 800deac:	0800de49 	.word	0x0800de49
 800deb0:	0800de49 	.word	0x0800de49
 800deb4:	0800df8d 	.word	0x0800df8d
 800deb8:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800debc:	e7db      	b.n	800de76 <_scanf_float+0x92>
 800debe:	290e      	cmp	r1, #14
 800dec0:	d8c2      	bhi.n	800de48 <_scanf_float+0x64>
 800dec2:	a001      	add	r0, pc, #4	@ (adr r0, 800dec8 <_scanf_float+0xe4>)
 800dec4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800dec8:	0800df7d 	.word	0x0800df7d
 800decc:	0800de49 	.word	0x0800de49
 800ded0:	0800df7d 	.word	0x0800df7d
 800ded4:	0800e013 	.word	0x0800e013
 800ded8:	0800de49 	.word	0x0800de49
 800dedc:	0800df25 	.word	0x0800df25
 800dee0:	0800df63 	.word	0x0800df63
 800dee4:	0800df63 	.word	0x0800df63
 800dee8:	0800df63 	.word	0x0800df63
 800deec:	0800df63 	.word	0x0800df63
 800def0:	0800df63 	.word	0x0800df63
 800def4:	0800df63 	.word	0x0800df63
 800def8:	0800df63 	.word	0x0800df63
 800defc:	0800df63 	.word	0x0800df63
 800df00:	0800df63 	.word	0x0800df63
 800df04:	2b6e      	cmp	r3, #110	@ 0x6e
 800df06:	d809      	bhi.n	800df1c <_scanf_float+0x138>
 800df08:	2b60      	cmp	r3, #96	@ 0x60
 800df0a:	d8b2      	bhi.n	800de72 <_scanf_float+0x8e>
 800df0c:	2b54      	cmp	r3, #84	@ 0x54
 800df0e:	d07b      	beq.n	800e008 <_scanf_float+0x224>
 800df10:	2b59      	cmp	r3, #89	@ 0x59
 800df12:	d199      	bne.n	800de48 <_scanf_float+0x64>
 800df14:	2d07      	cmp	r5, #7
 800df16:	d197      	bne.n	800de48 <_scanf_float+0x64>
 800df18:	2508      	movs	r5, #8
 800df1a:	e02c      	b.n	800df76 <_scanf_float+0x192>
 800df1c:	2b74      	cmp	r3, #116	@ 0x74
 800df1e:	d073      	beq.n	800e008 <_scanf_float+0x224>
 800df20:	2b79      	cmp	r3, #121	@ 0x79
 800df22:	e7f6      	b.n	800df12 <_scanf_float+0x12e>
 800df24:	6821      	ldr	r1, [r4, #0]
 800df26:	05c8      	lsls	r0, r1, #23
 800df28:	d51b      	bpl.n	800df62 <_scanf_float+0x17e>
 800df2a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800df2e:	f109 0901 	add.w	r9, r9, #1
 800df32:	6021      	str	r1, [r4, #0]
 800df34:	f1bb 0f00 	cmp.w	fp, #0
 800df38:	d003      	beq.n	800df42 <_scanf_float+0x15e>
 800df3a:	3201      	adds	r2, #1
 800df3c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800df40:	60a2      	str	r2, [r4, #8]
 800df42:	68a3      	ldr	r3, [r4, #8]
 800df44:	3b01      	subs	r3, #1
 800df46:	60a3      	str	r3, [r4, #8]
 800df48:	6923      	ldr	r3, [r4, #16]
 800df4a:	3301      	adds	r3, #1
 800df4c:	6123      	str	r3, [r4, #16]
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	3b01      	subs	r3, #1
 800df52:	2b00      	cmp	r3, #0
 800df54:	607b      	str	r3, [r7, #4]
 800df56:	f340 8087 	ble.w	800e068 <_scanf_float+0x284>
 800df5a:	683b      	ldr	r3, [r7, #0]
 800df5c:	3301      	adds	r3, #1
 800df5e:	603b      	str	r3, [r7, #0]
 800df60:	e765      	b.n	800de2e <_scanf_float+0x4a>
 800df62:	eb1a 0105 	adds.w	r1, sl, r5
 800df66:	f47f af6f 	bne.w	800de48 <_scanf_float+0x64>
 800df6a:	6822      	ldr	r2, [r4, #0]
 800df6c:	460d      	mov	r5, r1
 800df6e:	468a      	mov	sl, r1
 800df70:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800df74:	6022      	str	r2, [r4, #0]
 800df76:	f806 3b01 	strb.w	r3, [r6], #1
 800df7a:	e7e2      	b.n	800df42 <_scanf_float+0x15e>
 800df7c:	6822      	ldr	r2, [r4, #0]
 800df7e:	0610      	lsls	r0, r2, #24
 800df80:	f57f af62 	bpl.w	800de48 <_scanf_float+0x64>
 800df84:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800df88:	6022      	str	r2, [r4, #0]
 800df8a:	e7f4      	b.n	800df76 <_scanf_float+0x192>
 800df8c:	f1ba 0f00 	cmp.w	sl, #0
 800df90:	d10e      	bne.n	800dfb0 <_scanf_float+0x1cc>
 800df92:	f1b9 0f00 	cmp.w	r9, #0
 800df96:	d10e      	bne.n	800dfb6 <_scanf_float+0x1d2>
 800df98:	6822      	ldr	r2, [r4, #0]
 800df9a:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800df9e:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800dfa2:	d108      	bne.n	800dfb6 <_scanf_float+0x1d2>
 800dfa4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800dfa8:	f04f 0a01 	mov.w	sl, #1
 800dfac:	6022      	str	r2, [r4, #0]
 800dfae:	e7e2      	b.n	800df76 <_scanf_float+0x192>
 800dfb0:	f1ba 0f02 	cmp.w	sl, #2
 800dfb4:	d055      	beq.n	800e062 <_scanf_float+0x27e>
 800dfb6:	2d01      	cmp	r5, #1
 800dfb8:	d002      	beq.n	800dfc0 <_scanf_float+0x1dc>
 800dfba:	2d04      	cmp	r5, #4
 800dfbc:	f47f af44 	bne.w	800de48 <_scanf_float+0x64>
 800dfc0:	3501      	adds	r5, #1
 800dfc2:	b2ed      	uxtb	r5, r5
 800dfc4:	e7d7      	b.n	800df76 <_scanf_float+0x192>
 800dfc6:	f1ba 0f01 	cmp.w	sl, #1
 800dfca:	f47f af3d 	bne.w	800de48 <_scanf_float+0x64>
 800dfce:	f04f 0a02 	mov.w	sl, #2
 800dfd2:	e7d0      	b.n	800df76 <_scanf_float+0x192>
 800dfd4:	b97d      	cbnz	r5, 800dff6 <_scanf_float+0x212>
 800dfd6:	f1b9 0f00 	cmp.w	r9, #0
 800dfda:	f47f af38 	bne.w	800de4e <_scanf_float+0x6a>
 800dfde:	6822      	ldr	r2, [r4, #0]
 800dfe0:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800dfe4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800dfe8:	f040 8107 	bne.w	800e1fa <_scanf_float+0x416>
 800dfec:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800dff0:	2501      	movs	r5, #1
 800dff2:	6022      	str	r2, [r4, #0]
 800dff4:	e7bf      	b.n	800df76 <_scanf_float+0x192>
 800dff6:	2d03      	cmp	r5, #3
 800dff8:	d0e2      	beq.n	800dfc0 <_scanf_float+0x1dc>
 800dffa:	2d05      	cmp	r5, #5
 800dffc:	e7de      	b.n	800dfbc <_scanf_float+0x1d8>
 800dffe:	2d02      	cmp	r5, #2
 800e000:	f47f af22 	bne.w	800de48 <_scanf_float+0x64>
 800e004:	2503      	movs	r5, #3
 800e006:	e7b6      	b.n	800df76 <_scanf_float+0x192>
 800e008:	2d06      	cmp	r5, #6
 800e00a:	f47f af1d 	bne.w	800de48 <_scanf_float+0x64>
 800e00e:	2507      	movs	r5, #7
 800e010:	e7b1      	b.n	800df76 <_scanf_float+0x192>
 800e012:	6822      	ldr	r2, [r4, #0]
 800e014:	0591      	lsls	r1, r2, #22
 800e016:	f57f af17 	bpl.w	800de48 <_scanf_float+0x64>
 800e01a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800e01e:	f8cd 9008 	str.w	r9, [sp, #8]
 800e022:	6022      	str	r2, [r4, #0]
 800e024:	e7a7      	b.n	800df76 <_scanf_float+0x192>
 800e026:	6822      	ldr	r2, [r4, #0]
 800e028:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800e02c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800e030:	d006      	beq.n	800e040 <_scanf_float+0x25c>
 800e032:	0550      	lsls	r0, r2, #21
 800e034:	f57f af08 	bpl.w	800de48 <_scanf_float+0x64>
 800e038:	f1b9 0f00 	cmp.w	r9, #0
 800e03c:	f000 80dd 	beq.w	800e1fa <_scanf_float+0x416>
 800e040:	0591      	lsls	r1, r2, #22
 800e042:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800e046:	bf58      	it	pl
 800e048:	9902      	ldrpl	r1, [sp, #8]
 800e04a:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800e04e:	bf58      	it	pl
 800e050:	eba9 0101 	subpl.w	r1, r9, r1
 800e054:	6022      	str	r2, [r4, #0]
 800e056:	f04f 0900 	mov.w	r9, #0
 800e05a:	bf58      	it	pl
 800e05c:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800e060:	e789      	b.n	800df76 <_scanf_float+0x192>
 800e062:	f04f 0a03 	mov.w	sl, #3
 800e066:	e786      	b.n	800df76 <_scanf_float+0x192>
 800e068:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800e06c:	4639      	mov	r1, r7
 800e06e:	4640      	mov	r0, r8
 800e070:	4798      	blx	r3
 800e072:	2800      	cmp	r0, #0
 800e074:	f43f aedb 	beq.w	800de2e <_scanf_float+0x4a>
 800e078:	e6e6      	b.n	800de48 <_scanf_float+0x64>
 800e07a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e07e:	463a      	mov	r2, r7
 800e080:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e084:	4640      	mov	r0, r8
 800e086:	4798      	blx	r3
 800e088:	6923      	ldr	r3, [r4, #16]
 800e08a:	3b01      	subs	r3, #1
 800e08c:	6123      	str	r3, [r4, #16]
 800e08e:	e6e8      	b.n	800de62 <_scanf_float+0x7e>
 800e090:	1e6b      	subs	r3, r5, #1
 800e092:	2b06      	cmp	r3, #6
 800e094:	d824      	bhi.n	800e0e0 <_scanf_float+0x2fc>
 800e096:	2d02      	cmp	r5, #2
 800e098:	d836      	bhi.n	800e108 <_scanf_float+0x324>
 800e09a:	9b01      	ldr	r3, [sp, #4]
 800e09c:	429e      	cmp	r6, r3
 800e09e:	f67f aee4 	bls.w	800de6a <_scanf_float+0x86>
 800e0a2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e0a6:	463a      	mov	r2, r7
 800e0a8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e0ac:	4640      	mov	r0, r8
 800e0ae:	4798      	blx	r3
 800e0b0:	6923      	ldr	r3, [r4, #16]
 800e0b2:	3b01      	subs	r3, #1
 800e0b4:	6123      	str	r3, [r4, #16]
 800e0b6:	e7f0      	b.n	800e09a <_scanf_float+0x2b6>
 800e0b8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e0bc:	463a      	mov	r2, r7
 800e0be:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800e0c2:	4640      	mov	r0, r8
 800e0c4:	4798      	blx	r3
 800e0c6:	6923      	ldr	r3, [r4, #16]
 800e0c8:	3b01      	subs	r3, #1
 800e0ca:	6123      	str	r3, [r4, #16]
 800e0cc:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e0d0:	fa5f fa8a 	uxtb.w	sl, sl
 800e0d4:	f1ba 0f02 	cmp.w	sl, #2
 800e0d8:	d1ee      	bne.n	800e0b8 <_scanf_float+0x2d4>
 800e0da:	3d03      	subs	r5, #3
 800e0dc:	b2ed      	uxtb	r5, r5
 800e0de:	1b76      	subs	r6, r6, r5
 800e0e0:	6823      	ldr	r3, [r4, #0]
 800e0e2:	05da      	lsls	r2, r3, #23
 800e0e4:	d52f      	bpl.n	800e146 <_scanf_float+0x362>
 800e0e6:	055b      	lsls	r3, r3, #21
 800e0e8:	d511      	bpl.n	800e10e <_scanf_float+0x32a>
 800e0ea:	9b01      	ldr	r3, [sp, #4]
 800e0ec:	429e      	cmp	r6, r3
 800e0ee:	f67f aebc 	bls.w	800de6a <_scanf_float+0x86>
 800e0f2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e0f6:	463a      	mov	r2, r7
 800e0f8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e0fc:	4640      	mov	r0, r8
 800e0fe:	4798      	blx	r3
 800e100:	6923      	ldr	r3, [r4, #16]
 800e102:	3b01      	subs	r3, #1
 800e104:	6123      	str	r3, [r4, #16]
 800e106:	e7f0      	b.n	800e0ea <_scanf_float+0x306>
 800e108:	46aa      	mov	sl, r5
 800e10a:	46b3      	mov	fp, r6
 800e10c:	e7de      	b.n	800e0cc <_scanf_float+0x2e8>
 800e10e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800e112:	1e75      	subs	r5, r6, #1
 800e114:	6923      	ldr	r3, [r4, #16]
 800e116:	2965      	cmp	r1, #101	@ 0x65
 800e118:	f103 33ff 	add.w	r3, r3, #4294967295
 800e11c:	6123      	str	r3, [r4, #16]
 800e11e:	d00c      	beq.n	800e13a <_scanf_float+0x356>
 800e120:	2945      	cmp	r1, #69	@ 0x45
 800e122:	d00a      	beq.n	800e13a <_scanf_float+0x356>
 800e124:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e128:	463a      	mov	r2, r7
 800e12a:	4640      	mov	r0, r8
 800e12c:	1eb5      	subs	r5, r6, #2
 800e12e:	4798      	blx	r3
 800e130:	6923      	ldr	r3, [r4, #16]
 800e132:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800e136:	3b01      	subs	r3, #1
 800e138:	6123      	str	r3, [r4, #16]
 800e13a:	462e      	mov	r6, r5
 800e13c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e140:	463a      	mov	r2, r7
 800e142:	4640      	mov	r0, r8
 800e144:	4798      	blx	r3
 800e146:	6822      	ldr	r2, [r4, #0]
 800e148:	f012 0210 	ands.w	r2, r2, #16
 800e14c:	d001      	beq.n	800e152 <_scanf_float+0x36e>
 800e14e:	2000      	movs	r0, #0
 800e150:	e68c      	b.n	800de6c <_scanf_float+0x88>
 800e152:	7032      	strb	r2, [r6, #0]
 800e154:	6823      	ldr	r3, [r4, #0]
 800e156:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800e15a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e15e:	d11c      	bne.n	800e19a <_scanf_float+0x3b6>
 800e160:	9b02      	ldr	r3, [sp, #8]
 800e162:	454b      	cmp	r3, r9
 800e164:	eba3 0209 	sub.w	r2, r3, r9
 800e168:	d123      	bne.n	800e1b2 <_scanf_float+0x3ce>
 800e16a:	2200      	movs	r2, #0
 800e16c:	9901      	ldr	r1, [sp, #4]
 800e16e:	4640      	mov	r0, r8
 800e170:	f002 fc16 	bl	80109a0 <_strtod_r>
 800e174:	6821      	ldr	r1, [r4, #0]
 800e176:	9b03      	ldr	r3, [sp, #12]
 800e178:	f011 0f02 	tst.w	r1, #2
 800e17c:	681b      	ldr	r3, [r3, #0]
 800e17e:	ec57 6b10 	vmov	r6, r7, d0
 800e182:	f103 0204 	add.w	r2, r3, #4
 800e186:	d01f      	beq.n	800e1c8 <_scanf_float+0x3e4>
 800e188:	9903      	ldr	r1, [sp, #12]
 800e18a:	600a      	str	r2, [r1, #0]
 800e18c:	681b      	ldr	r3, [r3, #0]
 800e18e:	e9c3 6700 	strd	r6, r7, [r3]
 800e192:	68e3      	ldr	r3, [r4, #12]
 800e194:	3301      	adds	r3, #1
 800e196:	60e3      	str	r3, [r4, #12]
 800e198:	e7d9      	b.n	800e14e <_scanf_float+0x36a>
 800e19a:	9b04      	ldr	r3, [sp, #16]
 800e19c:	2b00      	cmp	r3, #0
 800e19e:	d0e4      	beq.n	800e16a <_scanf_float+0x386>
 800e1a0:	9905      	ldr	r1, [sp, #20]
 800e1a2:	230a      	movs	r3, #10
 800e1a4:	4640      	mov	r0, r8
 800e1a6:	3101      	adds	r1, #1
 800e1a8:	f002 fc7a 	bl	8010aa0 <_strtol_r>
 800e1ac:	9b04      	ldr	r3, [sp, #16]
 800e1ae:	9e05      	ldr	r6, [sp, #20]
 800e1b0:	1ac2      	subs	r2, r0, r3
 800e1b2:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800e1b6:	4912      	ldr	r1, [pc, #72]	@ (800e200 <_scanf_float+0x41c>)
 800e1b8:	429e      	cmp	r6, r3
 800e1ba:	bf28      	it	cs
 800e1bc:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800e1c0:	4630      	mov	r0, r6
 800e1c2:	f000 f8e3 	bl	800e38c <siprintf>
 800e1c6:	e7d0      	b.n	800e16a <_scanf_float+0x386>
 800e1c8:	f011 0f04 	tst.w	r1, #4
 800e1cc:	9903      	ldr	r1, [sp, #12]
 800e1ce:	600a      	str	r2, [r1, #0]
 800e1d0:	d1dc      	bne.n	800e18c <_scanf_float+0x3a8>
 800e1d2:	681d      	ldr	r5, [r3, #0]
 800e1d4:	4632      	mov	r2, r6
 800e1d6:	463b      	mov	r3, r7
 800e1d8:	4630      	mov	r0, r6
 800e1da:	4639      	mov	r1, r7
 800e1dc:	f7f2 fcca 	bl	8000b74 <__aeabi_dcmpun>
 800e1e0:	b128      	cbz	r0, 800e1ee <_scanf_float+0x40a>
 800e1e2:	4808      	ldr	r0, [pc, #32]	@ (800e204 <_scanf_float+0x420>)
 800e1e4:	f000 f9c4 	bl	800e570 <nanf>
 800e1e8:	ed85 0a00 	vstr	s0, [r5]
 800e1ec:	e7d1      	b.n	800e192 <_scanf_float+0x3ae>
 800e1ee:	4630      	mov	r0, r6
 800e1f0:	4639      	mov	r1, r7
 800e1f2:	f7f2 fd1d 	bl	8000c30 <__aeabi_d2f>
 800e1f6:	6028      	str	r0, [r5, #0]
 800e1f8:	e7cb      	b.n	800e192 <_scanf_float+0x3ae>
 800e1fa:	f04f 0900 	mov.w	r9, #0
 800e1fe:	e62a      	b.n	800de56 <_scanf_float+0x72>
 800e200:	08011d84 	.word	0x08011d84
 800e204:	0801211d 	.word	0x0801211d

0800e208 <std>:
 800e208:	2300      	movs	r3, #0
 800e20a:	b510      	push	{r4, lr}
 800e20c:	4604      	mov	r4, r0
 800e20e:	6083      	str	r3, [r0, #8]
 800e210:	8181      	strh	r1, [r0, #12]
 800e212:	4619      	mov	r1, r3
 800e214:	6643      	str	r3, [r0, #100]	@ 0x64
 800e216:	81c2      	strh	r2, [r0, #14]
 800e218:	2208      	movs	r2, #8
 800e21a:	6183      	str	r3, [r0, #24]
 800e21c:	e9c0 3300 	strd	r3, r3, [r0]
 800e220:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e224:	305c      	adds	r0, #92	@ 0x5c
 800e226:	f000 f914 	bl	800e452 <memset>
 800e22a:	4b0d      	ldr	r3, [pc, #52]	@ (800e260 <std+0x58>)
 800e22c:	6224      	str	r4, [r4, #32]
 800e22e:	6263      	str	r3, [r4, #36]	@ 0x24
 800e230:	4b0c      	ldr	r3, [pc, #48]	@ (800e264 <std+0x5c>)
 800e232:	62a3      	str	r3, [r4, #40]	@ 0x28
 800e234:	4b0c      	ldr	r3, [pc, #48]	@ (800e268 <std+0x60>)
 800e236:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800e238:	4b0c      	ldr	r3, [pc, #48]	@ (800e26c <std+0x64>)
 800e23a:	6323      	str	r3, [r4, #48]	@ 0x30
 800e23c:	4b0c      	ldr	r3, [pc, #48]	@ (800e270 <std+0x68>)
 800e23e:	429c      	cmp	r4, r3
 800e240:	d006      	beq.n	800e250 <std+0x48>
 800e242:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800e246:	4294      	cmp	r4, r2
 800e248:	d002      	beq.n	800e250 <std+0x48>
 800e24a:	33d0      	adds	r3, #208	@ 0xd0
 800e24c:	429c      	cmp	r4, r3
 800e24e:	d105      	bne.n	800e25c <std+0x54>
 800e250:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800e254:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e258:	f000 b978 	b.w	800e54c <__retarget_lock_init_recursive>
 800e25c:	bd10      	pop	{r4, pc}
 800e25e:	bf00      	nop
 800e260:	0800e3cd 	.word	0x0800e3cd
 800e264:	0800e3ef 	.word	0x0800e3ef
 800e268:	0800e427 	.word	0x0800e427
 800e26c:	0800e44b 	.word	0x0800e44b
 800e270:	20000bdc 	.word	0x20000bdc

0800e274 <stdio_exit_handler>:
 800e274:	4a02      	ldr	r2, [pc, #8]	@ (800e280 <stdio_exit_handler+0xc>)
 800e276:	4903      	ldr	r1, [pc, #12]	@ (800e284 <stdio_exit_handler+0x10>)
 800e278:	4803      	ldr	r0, [pc, #12]	@ (800e288 <stdio_exit_handler+0x14>)
 800e27a:	f000 b869 	b.w	800e350 <_fwalk_sglue>
 800e27e:	bf00      	nop
 800e280:	2000000c 	.word	0x2000000c
 800e284:	08010e5d 	.word	0x08010e5d
 800e288:	2000001c 	.word	0x2000001c

0800e28c <cleanup_stdio>:
 800e28c:	6841      	ldr	r1, [r0, #4]
 800e28e:	4b0c      	ldr	r3, [pc, #48]	@ (800e2c0 <cleanup_stdio+0x34>)
 800e290:	4299      	cmp	r1, r3
 800e292:	b510      	push	{r4, lr}
 800e294:	4604      	mov	r4, r0
 800e296:	d001      	beq.n	800e29c <cleanup_stdio+0x10>
 800e298:	f002 fde0 	bl	8010e5c <_fflush_r>
 800e29c:	68a1      	ldr	r1, [r4, #8]
 800e29e:	4b09      	ldr	r3, [pc, #36]	@ (800e2c4 <cleanup_stdio+0x38>)
 800e2a0:	4299      	cmp	r1, r3
 800e2a2:	d002      	beq.n	800e2aa <cleanup_stdio+0x1e>
 800e2a4:	4620      	mov	r0, r4
 800e2a6:	f002 fdd9 	bl	8010e5c <_fflush_r>
 800e2aa:	68e1      	ldr	r1, [r4, #12]
 800e2ac:	4b06      	ldr	r3, [pc, #24]	@ (800e2c8 <cleanup_stdio+0x3c>)
 800e2ae:	4299      	cmp	r1, r3
 800e2b0:	d004      	beq.n	800e2bc <cleanup_stdio+0x30>
 800e2b2:	4620      	mov	r0, r4
 800e2b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e2b8:	f002 bdd0 	b.w	8010e5c <_fflush_r>
 800e2bc:	bd10      	pop	{r4, pc}
 800e2be:	bf00      	nop
 800e2c0:	20000bdc 	.word	0x20000bdc
 800e2c4:	20000c44 	.word	0x20000c44
 800e2c8:	20000cac 	.word	0x20000cac

0800e2cc <global_stdio_init.part.0>:
 800e2cc:	b510      	push	{r4, lr}
 800e2ce:	4b0b      	ldr	r3, [pc, #44]	@ (800e2fc <global_stdio_init.part.0+0x30>)
 800e2d0:	2104      	movs	r1, #4
 800e2d2:	4c0b      	ldr	r4, [pc, #44]	@ (800e300 <global_stdio_init.part.0+0x34>)
 800e2d4:	4a0b      	ldr	r2, [pc, #44]	@ (800e304 <global_stdio_init.part.0+0x38>)
 800e2d6:	4620      	mov	r0, r4
 800e2d8:	601a      	str	r2, [r3, #0]
 800e2da:	2200      	movs	r2, #0
 800e2dc:	f7ff ff94 	bl	800e208 <std>
 800e2e0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800e2e4:	2201      	movs	r2, #1
 800e2e6:	2109      	movs	r1, #9
 800e2e8:	f7ff ff8e 	bl	800e208 <std>
 800e2ec:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800e2f0:	2202      	movs	r2, #2
 800e2f2:	2112      	movs	r1, #18
 800e2f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e2f8:	f7ff bf86 	b.w	800e208 <std>
 800e2fc:	20000d14 	.word	0x20000d14
 800e300:	20000bdc 	.word	0x20000bdc
 800e304:	0800e275 	.word	0x0800e275

0800e308 <__sfp_lock_acquire>:
 800e308:	4801      	ldr	r0, [pc, #4]	@ (800e310 <__sfp_lock_acquire+0x8>)
 800e30a:	f000 b920 	b.w	800e54e <__retarget_lock_acquire_recursive>
 800e30e:	bf00      	nop
 800e310:	20000d1d 	.word	0x20000d1d

0800e314 <__sfp_lock_release>:
 800e314:	4801      	ldr	r0, [pc, #4]	@ (800e31c <__sfp_lock_release+0x8>)
 800e316:	f000 b91b 	b.w	800e550 <__retarget_lock_release_recursive>
 800e31a:	bf00      	nop
 800e31c:	20000d1d 	.word	0x20000d1d

0800e320 <__sinit>:
 800e320:	b510      	push	{r4, lr}
 800e322:	4604      	mov	r4, r0
 800e324:	f7ff fff0 	bl	800e308 <__sfp_lock_acquire>
 800e328:	6a23      	ldr	r3, [r4, #32]
 800e32a:	b11b      	cbz	r3, 800e334 <__sinit+0x14>
 800e32c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e330:	f7ff bff0 	b.w	800e314 <__sfp_lock_release>
 800e334:	4b04      	ldr	r3, [pc, #16]	@ (800e348 <__sinit+0x28>)
 800e336:	6223      	str	r3, [r4, #32]
 800e338:	4b04      	ldr	r3, [pc, #16]	@ (800e34c <__sinit+0x2c>)
 800e33a:	681b      	ldr	r3, [r3, #0]
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	d1f5      	bne.n	800e32c <__sinit+0xc>
 800e340:	f7ff ffc4 	bl	800e2cc <global_stdio_init.part.0>
 800e344:	e7f2      	b.n	800e32c <__sinit+0xc>
 800e346:	bf00      	nop
 800e348:	0800e28d 	.word	0x0800e28d
 800e34c:	20000d14 	.word	0x20000d14

0800e350 <_fwalk_sglue>:
 800e350:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e354:	4607      	mov	r7, r0
 800e356:	4688      	mov	r8, r1
 800e358:	4614      	mov	r4, r2
 800e35a:	2600      	movs	r6, #0
 800e35c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e360:	f1b9 0901 	subs.w	r9, r9, #1
 800e364:	d505      	bpl.n	800e372 <_fwalk_sglue+0x22>
 800e366:	6824      	ldr	r4, [r4, #0]
 800e368:	2c00      	cmp	r4, #0
 800e36a:	d1f7      	bne.n	800e35c <_fwalk_sglue+0xc>
 800e36c:	4630      	mov	r0, r6
 800e36e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e372:	89ab      	ldrh	r3, [r5, #12]
 800e374:	2b01      	cmp	r3, #1
 800e376:	d907      	bls.n	800e388 <_fwalk_sglue+0x38>
 800e378:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e37c:	3301      	adds	r3, #1
 800e37e:	d003      	beq.n	800e388 <_fwalk_sglue+0x38>
 800e380:	4629      	mov	r1, r5
 800e382:	4638      	mov	r0, r7
 800e384:	47c0      	blx	r8
 800e386:	4306      	orrs	r6, r0
 800e388:	3568      	adds	r5, #104	@ 0x68
 800e38a:	e7e9      	b.n	800e360 <_fwalk_sglue+0x10>

0800e38c <siprintf>:
 800e38c:	b40e      	push	{r1, r2, r3}
 800e38e:	b500      	push	{lr}
 800e390:	b09c      	sub	sp, #112	@ 0x70
 800e392:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800e396:	ab1d      	add	r3, sp, #116	@ 0x74
 800e398:	9002      	str	r0, [sp, #8]
 800e39a:	9006      	str	r0, [sp, #24]
 800e39c:	9107      	str	r1, [sp, #28]
 800e39e:	9104      	str	r1, [sp, #16]
 800e3a0:	4808      	ldr	r0, [pc, #32]	@ (800e3c4 <siprintf+0x38>)
 800e3a2:	4909      	ldr	r1, [pc, #36]	@ (800e3c8 <siprintf+0x3c>)
 800e3a4:	f853 2b04 	ldr.w	r2, [r3], #4
 800e3a8:	9105      	str	r1, [sp, #20]
 800e3aa:	a902      	add	r1, sp, #8
 800e3ac:	6800      	ldr	r0, [r0, #0]
 800e3ae:	9301      	str	r3, [sp, #4]
 800e3b0:	f002 fbd4 	bl	8010b5c <_svfiprintf_r>
 800e3b4:	9b02      	ldr	r3, [sp, #8]
 800e3b6:	2200      	movs	r2, #0
 800e3b8:	701a      	strb	r2, [r3, #0]
 800e3ba:	b01c      	add	sp, #112	@ 0x70
 800e3bc:	f85d eb04 	ldr.w	lr, [sp], #4
 800e3c0:	b003      	add	sp, #12
 800e3c2:	4770      	bx	lr
 800e3c4:	20000018 	.word	0x20000018
 800e3c8:	ffff0208 	.word	0xffff0208

0800e3cc <__sread>:
 800e3cc:	b510      	push	{r4, lr}
 800e3ce:	460c      	mov	r4, r1
 800e3d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e3d4:	f000 f86c 	bl	800e4b0 <_read_r>
 800e3d8:	2800      	cmp	r0, #0
 800e3da:	bfab      	itete	ge
 800e3dc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800e3de:	89a3      	ldrhlt	r3, [r4, #12]
 800e3e0:	181b      	addge	r3, r3, r0
 800e3e2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800e3e6:	bfac      	ite	ge
 800e3e8:	6563      	strge	r3, [r4, #84]	@ 0x54
 800e3ea:	81a3      	strhlt	r3, [r4, #12]
 800e3ec:	bd10      	pop	{r4, pc}

0800e3ee <__swrite>:
 800e3ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e3f2:	461f      	mov	r7, r3
 800e3f4:	898b      	ldrh	r3, [r1, #12]
 800e3f6:	4605      	mov	r5, r0
 800e3f8:	460c      	mov	r4, r1
 800e3fa:	05db      	lsls	r3, r3, #23
 800e3fc:	4616      	mov	r6, r2
 800e3fe:	d505      	bpl.n	800e40c <__swrite+0x1e>
 800e400:	2302      	movs	r3, #2
 800e402:	2200      	movs	r2, #0
 800e404:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e408:	f000 f840 	bl	800e48c <_lseek_r>
 800e40c:	89a3      	ldrh	r3, [r4, #12]
 800e40e:	4632      	mov	r2, r6
 800e410:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e414:	4628      	mov	r0, r5
 800e416:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800e41a:	81a3      	strh	r3, [r4, #12]
 800e41c:	463b      	mov	r3, r7
 800e41e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e422:	f000 b857 	b.w	800e4d4 <_write_r>

0800e426 <__sseek>:
 800e426:	b510      	push	{r4, lr}
 800e428:	460c      	mov	r4, r1
 800e42a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e42e:	f000 f82d 	bl	800e48c <_lseek_r>
 800e432:	1c43      	adds	r3, r0, #1
 800e434:	89a3      	ldrh	r3, [r4, #12]
 800e436:	bf15      	itete	ne
 800e438:	6560      	strne	r0, [r4, #84]	@ 0x54
 800e43a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800e43e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800e442:	81a3      	strheq	r3, [r4, #12]
 800e444:	bf18      	it	ne
 800e446:	81a3      	strhne	r3, [r4, #12]
 800e448:	bd10      	pop	{r4, pc}

0800e44a <__sclose>:
 800e44a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e44e:	f000 b80d 	b.w	800e46c <_close_r>

0800e452 <memset>:
 800e452:	4402      	add	r2, r0
 800e454:	4603      	mov	r3, r0
 800e456:	4293      	cmp	r3, r2
 800e458:	d100      	bne.n	800e45c <memset+0xa>
 800e45a:	4770      	bx	lr
 800e45c:	f803 1b01 	strb.w	r1, [r3], #1
 800e460:	e7f9      	b.n	800e456 <memset+0x4>
	...

0800e464 <_localeconv_r>:
 800e464:	4800      	ldr	r0, [pc, #0]	@ (800e468 <_localeconv_r+0x4>)
 800e466:	4770      	bx	lr
 800e468:	20000158 	.word	0x20000158

0800e46c <_close_r>:
 800e46c:	b538      	push	{r3, r4, r5, lr}
 800e46e:	2300      	movs	r3, #0
 800e470:	4d05      	ldr	r5, [pc, #20]	@ (800e488 <_close_r+0x1c>)
 800e472:	4604      	mov	r4, r0
 800e474:	4608      	mov	r0, r1
 800e476:	602b      	str	r3, [r5, #0]
 800e478:	f7f3 fea2 	bl	80021c0 <_close>
 800e47c:	1c43      	adds	r3, r0, #1
 800e47e:	d102      	bne.n	800e486 <_close_r+0x1a>
 800e480:	682b      	ldr	r3, [r5, #0]
 800e482:	b103      	cbz	r3, 800e486 <_close_r+0x1a>
 800e484:	6023      	str	r3, [r4, #0]
 800e486:	bd38      	pop	{r3, r4, r5, pc}
 800e488:	20000d18 	.word	0x20000d18

0800e48c <_lseek_r>:
 800e48c:	b538      	push	{r3, r4, r5, lr}
 800e48e:	4604      	mov	r4, r0
 800e490:	4d06      	ldr	r5, [pc, #24]	@ (800e4ac <_lseek_r+0x20>)
 800e492:	4608      	mov	r0, r1
 800e494:	4611      	mov	r1, r2
 800e496:	2200      	movs	r2, #0
 800e498:	602a      	str	r2, [r5, #0]
 800e49a:	461a      	mov	r2, r3
 800e49c:	f7f3 feb7 	bl	800220e <_lseek>
 800e4a0:	1c43      	adds	r3, r0, #1
 800e4a2:	d102      	bne.n	800e4aa <_lseek_r+0x1e>
 800e4a4:	682b      	ldr	r3, [r5, #0]
 800e4a6:	b103      	cbz	r3, 800e4aa <_lseek_r+0x1e>
 800e4a8:	6023      	str	r3, [r4, #0]
 800e4aa:	bd38      	pop	{r3, r4, r5, pc}
 800e4ac:	20000d18 	.word	0x20000d18

0800e4b0 <_read_r>:
 800e4b0:	b538      	push	{r3, r4, r5, lr}
 800e4b2:	4604      	mov	r4, r0
 800e4b4:	4d06      	ldr	r5, [pc, #24]	@ (800e4d0 <_read_r+0x20>)
 800e4b6:	4608      	mov	r0, r1
 800e4b8:	4611      	mov	r1, r2
 800e4ba:	2200      	movs	r2, #0
 800e4bc:	602a      	str	r2, [r5, #0]
 800e4be:	461a      	mov	r2, r3
 800e4c0:	f7f3 fe45 	bl	800214e <_read>
 800e4c4:	1c43      	adds	r3, r0, #1
 800e4c6:	d102      	bne.n	800e4ce <_read_r+0x1e>
 800e4c8:	682b      	ldr	r3, [r5, #0]
 800e4ca:	b103      	cbz	r3, 800e4ce <_read_r+0x1e>
 800e4cc:	6023      	str	r3, [r4, #0]
 800e4ce:	bd38      	pop	{r3, r4, r5, pc}
 800e4d0:	20000d18 	.word	0x20000d18

0800e4d4 <_write_r>:
 800e4d4:	b538      	push	{r3, r4, r5, lr}
 800e4d6:	4604      	mov	r4, r0
 800e4d8:	4d06      	ldr	r5, [pc, #24]	@ (800e4f4 <_write_r+0x20>)
 800e4da:	4608      	mov	r0, r1
 800e4dc:	4611      	mov	r1, r2
 800e4de:	2200      	movs	r2, #0
 800e4e0:	602a      	str	r2, [r5, #0]
 800e4e2:	461a      	mov	r2, r3
 800e4e4:	f7f3 fe50 	bl	8002188 <_write>
 800e4e8:	1c43      	adds	r3, r0, #1
 800e4ea:	d102      	bne.n	800e4f2 <_write_r+0x1e>
 800e4ec:	682b      	ldr	r3, [r5, #0]
 800e4ee:	b103      	cbz	r3, 800e4f2 <_write_r+0x1e>
 800e4f0:	6023      	str	r3, [r4, #0]
 800e4f2:	bd38      	pop	{r3, r4, r5, pc}
 800e4f4:	20000d18 	.word	0x20000d18

0800e4f8 <__errno>:
 800e4f8:	4b01      	ldr	r3, [pc, #4]	@ (800e500 <__errno+0x8>)
 800e4fa:	6818      	ldr	r0, [r3, #0]
 800e4fc:	4770      	bx	lr
 800e4fe:	bf00      	nop
 800e500:	20000018 	.word	0x20000018

0800e504 <__libc_init_array>:
 800e504:	b570      	push	{r4, r5, r6, lr}
 800e506:	4d0d      	ldr	r5, [pc, #52]	@ (800e53c <__libc_init_array+0x38>)
 800e508:	2600      	movs	r6, #0
 800e50a:	4c0d      	ldr	r4, [pc, #52]	@ (800e540 <__libc_init_array+0x3c>)
 800e50c:	1b64      	subs	r4, r4, r5
 800e50e:	10a4      	asrs	r4, r4, #2
 800e510:	42a6      	cmp	r6, r4
 800e512:	d109      	bne.n	800e528 <__libc_init_array+0x24>
 800e514:	4d0b      	ldr	r5, [pc, #44]	@ (800e544 <__libc_init_array+0x40>)
 800e516:	2600      	movs	r6, #0
 800e518:	4c0b      	ldr	r4, [pc, #44]	@ (800e548 <__libc_init_array+0x44>)
 800e51a:	f003 fb8b 	bl	8011c34 <_init>
 800e51e:	1b64      	subs	r4, r4, r5
 800e520:	10a4      	asrs	r4, r4, #2
 800e522:	42a6      	cmp	r6, r4
 800e524:	d105      	bne.n	800e532 <__libc_init_array+0x2e>
 800e526:	bd70      	pop	{r4, r5, r6, pc}
 800e528:	f855 3b04 	ldr.w	r3, [r5], #4
 800e52c:	3601      	adds	r6, #1
 800e52e:	4798      	blx	r3
 800e530:	e7ee      	b.n	800e510 <__libc_init_array+0xc>
 800e532:	f855 3b04 	ldr.w	r3, [r5], #4
 800e536:	3601      	adds	r6, #1
 800e538:	4798      	blx	r3
 800e53a:	e7f2      	b.n	800e522 <__libc_init_array+0x1e>
 800e53c:	08012188 	.word	0x08012188
 800e540:	08012188 	.word	0x08012188
 800e544:	08012188 	.word	0x08012188
 800e548:	0801218c 	.word	0x0801218c

0800e54c <__retarget_lock_init_recursive>:
 800e54c:	4770      	bx	lr

0800e54e <__retarget_lock_acquire_recursive>:
 800e54e:	4770      	bx	lr

0800e550 <__retarget_lock_release_recursive>:
 800e550:	4770      	bx	lr

0800e552 <memchr>:
 800e552:	b2c9      	uxtb	r1, r1
 800e554:	4603      	mov	r3, r0
 800e556:	4402      	add	r2, r0
 800e558:	b510      	push	{r4, lr}
 800e55a:	4293      	cmp	r3, r2
 800e55c:	4618      	mov	r0, r3
 800e55e:	d101      	bne.n	800e564 <memchr+0x12>
 800e560:	2000      	movs	r0, #0
 800e562:	e003      	b.n	800e56c <memchr+0x1a>
 800e564:	7804      	ldrb	r4, [r0, #0]
 800e566:	3301      	adds	r3, #1
 800e568:	428c      	cmp	r4, r1
 800e56a:	d1f6      	bne.n	800e55a <memchr+0x8>
 800e56c:	bd10      	pop	{r4, pc}
	...

0800e570 <nanf>:
 800e570:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800e578 <nanf+0x8>
 800e574:	4770      	bx	lr
 800e576:	bf00      	nop
 800e578:	7fc00000 	.word	0x7fc00000

0800e57c <quorem>:
 800e57c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e580:	6903      	ldr	r3, [r0, #16]
 800e582:	4607      	mov	r7, r0
 800e584:	690c      	ldr	r4, [r1, #16]
 800e586:	42a3      	cmp	r3, r4
 800e588:	f2c0 8083 	blt.w	800e692 <quorem+0x116>
 800e58c:	3c01      	subs	r4, #1
 800e58e:	f100 0514 	add.w	r5, r0, #20
 800e592:	f101 0814 	add.w	r8, r1, #20
 800e596:	00a3      	lsls	r3, r4, #2
 800e598:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e59c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e5a0:	9300      	str	r3, [sp, #0]
 800e5a2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e5a6:	9301      	str	r3, [sp, #4]
 800e5a8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e5ac:	3301      	adds	r3, #1
 800e5ae:	429a      	cmp	r2, r3
 800e5b0:	fbb2 f6f3 	udiv	r6, r2, r3
 800e5b4:	d331      	bcc.n	800e61a <quorem+0x9e>
 800e5b6:	f04f 0a00 	mov.w	sl, #0
 800e5ba:	46c4      	mov	ip, r8
 800e5bc:	46ae      	mov	lr, r5
 800e5be:	46d3      	mov	fp, sl
 800e5c0:	f85c 3b04 	ldr.w	r3, [ip], #4
 800e5c4:	b298      	uxth	r0, r3
 800e5c6:	45e1      	cmp	r9, ip
 800e5c8:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800e5cc:	fb06 a000 	mla	r0, r6, r0, sl
 800e5d0:	ea4f 4210 	mov.w	r2, r0, lsr #16
 800e5d4:	b280      	uxth	r0, r0
 800e5d6:	fb06 2303 	mla	r3, r6, r3, r2
 800e5da:	f8de 2000 	ldr.w	r2, [lr]
 800e5de:	b292      	uxth	r2, r2
 800e5e0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e5e4:	eba2 0200 	sub.w	r2, r2, r0
 800e5e8:	b29b      	uxth	r3, r3
 800e5ea:	f8de 0000 	ldr.w	r0, [lr]
 800e5ee:	445a      	add	r2, fp
 800e5f0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800e5f4:	b292      	uxth	r2, r2
 800e5f6:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800e5fa:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800e5fe:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800e602:	f84e 2b04 	str.w	r2, [lr], #4
 800e606:	d2db      	bcs.n	800e5c0 <quorem+0x44>
 800e608:	9b00      	ldr	r3, [sp, #0]
 800e60a:	58eb      	ldr	r3, [r5, r3]
 800e60c:	b92b      	cbnz	r3, 800e61a <quorem+0x9e>
 800e60e:	9b01      	ldr	r3, [sp, #4]
 800e610:	3b04      	subs	r3, #4
 800e612:	429d      	cmp	r5, r3
 800e614:	461a      	mov	r2, r3
 800e616:	d330      	bcc.n	800e67a <quorem+0xfe>
 800e618:	613c      	str	r4, [r7, #16]
 800e61a:	4638      	mov	r0, r7
 800e61c:	f001 f9c6 	bl	800f9ac <__mcmp>
 800e620:	2800      	cmp	r0, #0
 800e622:	db26      	blt.n	800e672 <quorem+0xf6>
 800e624:	4629      	mov	r1, r5
 800e626:	2000      	movs	r0, #0
 800e628:	f858 2b04 	ldr.w	r2, [r8], #4
 800e62c:	f8d1 c000 	ldr.w	ip, [r1]
 800e630:	fa1f fe82 	uxth.w	lr, r2
 800e634:	45c1      	cmp	r9, r8
 800e636:	fa1f f38c 	uxth.w	r3, ip
 800e63a:	ea4f 4212 	mov.w	r2, r2, lsr #16
 800e63e:	eba3 030e 	sub.w	r3, r3, lr
 800e642:	4403      	add	r3, r0
 800e644:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800e648:	b29b      	uxth	r3, r3
 800e64a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800e64e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e652:	ea4f 4022 	mov.w	r0, r2, asr #16
 800e656:	f841 3b04 	str.w	r3, [r1], #4
 800e65a:	d2e5      	bcs.n	800e628 <quorem+0xac>
 800e65c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e660:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e664:	b922      	cbnz	r2, 800e670 <quorem+0xf4>
 800e666:	3b04      	subs	r3, #4
 800e668:	429d      	cmp	r5, r3
 800e66a:	461a      	mov	r2, r3
 800e66c:	d30b      	bcc.n	800e686 <quorem+0x10a>
 800e66e:	613c      	str	r4, [r7, #16]
 800e670:	3601      	adds	r6, #1
 800e672:	4630      	mov	r0, r6
 800e674:	b003      	add	sp, #12
 800e676:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e67a:	6812      	ldr	r2, [r2, #0]
 800e67c:	3b04      	subs	r3, #4
 800e67e:	2a00      	cmp	r2, #0
 800e680:	d1ca      	bne.n	800e618 <quorem+0x9c>
 800e682:	3c01      	subs	r4, #1
 800e684:	e7c5      	b.n	800e612 <quorem+0x96>
 800e686:	6812      	ldr	r2, [r2, #0]
 800e688:	3b04      	subs	r3, #4
 800e68a:	2a00      	cmp	r2, #0
 800e68c:	d1ef      	bne.n	800e66e <quorem+0xf2>
 800e68e:	3c01      	subs	r4, #1
 800e690:	e7ea      	b.n	800e668 <quorem+0xec>
 800e692:	2000      	movs	r0, #0
 800e694:	e7ee      	b.n	800e674 <quorem+0xf8>
	...

0800e698 <_dtoa_r>:
 800e698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e69c:	69c7      	ldr	r7, [r0, #28]
 800e69e:	b099      	sub	sp, #100	@ 0x64
 800e6a0:	4683      	mov	fp, r0
 800e6a2:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800e6a4:	9109      	str	r1, [sp, #36]	@ 0x24
 800e6a6:	920e      	str	r2, [sp, #56]	@ 0x38
 800e6a8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e6aa:	ec55 4b10 	vmov	r4, r5, d0
 800e6ae:	ed8d 0b02 	vstr	d0, [sp, #8]
 800e6b2:	b97f      	cbnz	r7, 800e6d4 <_dtoa_r+0x3c>
 800e6b4:	2010      	movs	r0, #16
 800e6b6:	f000 fdfd 	bl	800f2b4 <malloc>
 800e6ba:	4602      	mov	r2, r0
 800e6bc:	f8cb 001c 	str.w	r0, [fp, #28]
 800e6c0:	b920      	cbnz	r0, 800e6cc <_dtoa_r+0x34>
 800e6c2:	4ba7      	ldr	r3, [pc, #668]	@ (800e960 <_dtoa_r+0x2c8>)
 800e6c4:	21ef      	movs	r1, #239	@ 0xef
 800e6c6:	48a7      	ldr	r0, [pc, #668]	@ (800e964 <_dtoa_r+0x2cc>)
 800e6c8:	f002 fc42 	bl	8010f50 <__assert_func>
 800e6cc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800e6d0:	6007      	str	r7, [r0, #0]
 800e6d2:	60c7      	str	r7, [r0, #12]
 800e6d4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800e6d8:	6819      	ldr	r1, [r3, #0]
 800e6da:	b159      	cbz	r1, 800e6f4 <_dtoa_r+0x5c>
 800e6dc:	685a      	ldr	r2, [r3, #4]
 800e6de:	2301      	movs	r3, #1
 800e6e0:	4658      	mov	r0, fp
 800e6e2:	4093      	lsls	r3, r2
 800e6e4:	604a      	str	r2, [r1, #4]
 800e6e6:	608b      	str	r3, [r1, #8]
 800e6e8:	f000 feda 	bl	800f4a0 <_Bfree>
 800e6ec:	f8db 301c 	ldr.w	r3, [fp, #28]
 800e6f0:	2200      	movs	r2, #0
 800e6f2:	601a      	str	r2, [r3, #0]
 800e6f4:	1e2b      	subs	r3, r5, #0
 800e6f6:	bfb7      	itett	lt
 800e6f8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800e6fc:	2300      	movge	r3, #0
 800e6fe:	2201      	movlt	r2, #1
 800e700:	9303      	strlt	r3, [sp, #12]
 800e702:	bfa8      	it	ge
 800e704:	6033      	strge	r3, [r6, #0]
 800e706:	9f03      	ldr	r7, [sp, #12]
 800e708:	4b97      	ldr	r3, [pc, #604]	@ (800e968 <_dtoa_r+0x2d0>)
 800e70a:	bfb8      	it	lt
 800e70c:	6032      	strlt	r2, [r6, #0]
 800e70e:	43bb      	bics	r3, r7
 800e710:	d112      	bne.n	800e738 <_dtoa_r+0xa0>
 800e712:	f242 730f 	movw	r3, #9999	@ 0x270f
 800e716:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800e718:	6013      	str	r3, [r2, #0]
 800e71a:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e71e:	4323      	orrs	r3, r4
 800e720:	f000 854c 	beq.w	800f1bc <_dtoa_r+0xb24>
 800e724:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e726:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800e97c <_dtoa_r+0x2e4>
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	f000 854e 	beq.w	800f1cc <_dtoa_r+0xb34>
 800e730:	f10a 0303 	add.w	r3, sl, #3
 800e734:	f000 bd48 	b.w	800f1c8 <_dtoa_r+0xb30>
 800e738:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e73c:	2200      	movs	r2, #0
 800e73e:	2300      	movs	r3, #0
 800e740:	ec51 0b17 	vmov	r0, r1, d7
 800e744:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800e748:	f7f2 f9e2 	bl	8000b10 <__aeabi_dcmpeq>
 800e74c:	4680      	mov	r8, r0
 800e74e:	b158      	cbz	r0, 800e768 <_dtoa_r+0xd0>
 800e750:	2301      	movs	r3, #1
 800e752:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800e754:	6013      	str	r3, [r2, #0]
 800e756:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e758:	b113      	cbz	r3, 800e760 <_dtoa_r+0xc8>
 800e75a:	4b84      	ldr	r3, [pc, #528]	@ (800e96c <_dtoa_r+0x2d4>)
 800e75c:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800e75e:	6013      	str	r3, [r2, #0]
 800e760:	f8df a21c 	ldr.w	sl, [pc, #540]	@ 800e980 <_dtoa_r+0x2e8>
 800e764:	f000 bd32 	b.w	800f1cc <_dtoa_r+0xb34>
 800e768:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800e76c:	aa16      	add	r2, sp, #88	@ 0x58
 800e76e:	a917      	add	r1, sp, #92	@ 0x5c
 800e770:	4658      	mov	r0, fp
 800e772:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800e776:	f001 fa41 	bl	800fbfc <__d2b>
 800e77a:	4681      	mov	r9, r0
 800e77c:	2e00      	cmp	r6, #0
 800e77e:	d075      	beq.n	800e86c <_dtoa_r+0x1d4>
 800e780:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e782:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800e786:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800e78a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e78e:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800e792:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e796:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800e79a:	4619      	mov	r1, r3
 800e79c:	2200      	movs	r2, #0
 800e79e:	4b74      	ldr	r3, [pc, #464]	@ (800e970 <_dtoa_r+0x2d8>)
 800e7a0:	f7f1 fd96 	bl	80002d0 <__aeabi_dsub>
 800e7a4:	a368      	add	r3, pc, #416	@ (adr r3, 800e948 <_dtoa_r+0x2b0>)
 800e7a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7aa:	f7f1 ff49 	bl	8000640 <__aeabi_dmul>
 800e7ae:	a368      	add	r3, pc, #416	@ (adr r3, 800e950 <_dtoa_r+0x2b8>)
 800e7b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7b4:	f7f1 fd8e 	bl	80002d4 <__adddf3>
 800e7b8:	4604      	mov	r4, r0
 800e7ba:	460d      	mov	r5, r1
 800e7bc:	4630      	mov	r0, r6
 800e7be:	f7f1 fed5 	bl	800056c <__aeabi_i2d>
 800e7c2:	a365      	add	r3, pc, #404	@ (adr r3, 800e958 <_dtoa_r+0x2c0>)
 800e7c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7c8:	f7f1 ff3a 	bl	8000640 <__aeabi_dmul>
 800e7cc:	4602      	mov	r2, r0
 800e7ce:	460b      	mov	r3, r1
 800e7d0:	4620      	mov	r0, r4
 800e7d2:	4629      	mov	r1, r5
 800e7d4:	f7f1 fd7e 	bl	80002d4 <__adddf3>
 800e7d8:	4604      	mov	r4, r0
 800e7da:	460d      	mov	r5, r1
 800e7dc:	f7f2 f9e0 	bl	8000ba0 <__aeabi_d2iz>
 800e7e0:	2200      	movs	r2, #0
 800e7e2:	4607      	mov	r7, r0
 800e7e4:	2300      	movs	r3, #0
 800e7e6:	4620      	mov	r0, r4
 800e7e8:	4629      	mov	r1, r5
 800e7ea:	f7f2 f99b 	bl	8000b24 <__aeabi_dcmplt>
 800e7ee:	b140      	cbz	r0, 800e802 <_dtoa_r+0x16a>
 800e7f0:	4638      	mov	r0, r7
 800e7f2:	f7f1 febb 	bl	800056c <__aeabi_i2d>
 800e7f6:	4622      	mov	r2, r4
 800e7f8:	462b      	mov	r3, r5
 800e7fa:	f7f2 f989 	bl	8000b10 <__aeabi_dcmpeq>
 800e7fe:	b900      	cbnz	r0, 800e802 <_dtoa_r+0x16a>
 800e800:	3f01      	subs	r7, #1
 800e802:	2f16      	cmp	r7, #22
 800e804:	d851      	bhi.n	800e8aa <_dtoa_r+0x212>
 800e806:	4b5b      	ldr	r3, [pc, #364]	@ (800e974 <_dtoa_r+0x2dc>)
 800e808:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e80c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e810:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e814:	f7f2 f986 	bl	8000b24 <__aeabi_dcmplt>
 800e818:	2800      	cmp	r0, #0
 800e81a:	d048      	beq.n	800e8ae <_dtoa_r+0x216>
 800e81c:	3f01      	subs	r7, #1
 800e81e:	2300      	movs	r3, #0
 800e820:	9312      	str	r3, [sp, #72]	@ 0x48
 800e822:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800e824:	1b9b      	subs	r3, r3, r6
 800e826:	1e5a      	subs	r2, r3, #1
 800e828:	bf46      	itte	mi
 800e82a:	f1c3 0801 	rsbmi	r8, r3, #1
 800e82e:	2300      	movmi	r3, #0
 800e830:	f04f 0800 	movpl.w	r8, #0
 800e834:	9208      	str	r2, [sp, #32]
 800e836:	bf48      	it	mi
 800e838:	9308      	strmi	r3, [sp, #32]
 800e83a:	2f00      	cmp	r7, #0
 800e83c:	db39      	blt.n	800e8b2 <_dtoa_r+0x21a>
 800e83e:	9b08      	ldr	r3, [sp, #32]
 800e840:	970f      	str	r7, [sp, #60]	@ 0x3c
 800e842:	443b      	add	r3, r7
 800e844:	9308      	str	r3, [sp, #32]
 800e846:	2300      	movs	r3, #0
 800e848:	930a      	str	r3, [sp, #40]	@ 0x28
 800e84a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e84c:	2b09      	cmp	r3, #9
 800e84e:	d864      	bhi.n	800e91a <_dtoa_r+0x282>
 800e850:	2b05      	cmp	r3, #5
 800e852:	bfc5      	ittet	gt
 800e854:	3b04      	subgt	r3, #4
 800e856:	2400      	movgt	r4, #0
 800e858:	2401      	movle	r4, #1
 800e85a:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800e85c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e85e:	3b02      	subs	r3, #2
 800e860:	2b03      	cmp	r3, #3
 800e862:	d865      	bhi.n	800e930 <_dtoa_r+0x298>
 800e864:	e8df f003 	tbb	[pc, r3]
 800e868:	5737392c 	.word	0x5737392c
 800e86c:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800e870:	441e      	add	r6, r3
 800e872:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800e876:	2b20      	cmp	r3, #32
 800e878:	bfc9      	itett	gt
 800e87a:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800e87e:	f1c3 0320 	rsble	r3, r3, #32
 800e882:	409f      	lslgt	r7, r3
 800e884:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800e888:	bfd8      	it	le
 800e88a:	fa04 f003 	lslle.w	r0, r4, r3
 800e88e:	f106 36ff 	add.w	r6, r6, #4294967295
 800e892:	bfc4      	itt	gt
 800e894:	fa24 f303 	lsrgt.w	r3, r4, r3
 800e898:	ea47 0003 	orrgt.w	r0, r7, r3
 800e89c:	f7f1 fe56 	bl	800054c <__aeabi_ui2d>
 800e8a0:	2201      	movs	r2, #1
 800e8a2:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800e8a6:	9214      	str	r2, [sp, #80]	@ 0x50
 800e8a8:	e777      	b.n	800e79a <_dtoa_r+0x102>
 800e8aa:	2301      	movs	r3, #1
 800e8ac:	e7b8      	b.n	800e820 <_dtoa_r+0x188>
 800e8ae:	9012      	str	r0, [sp, #72]	@ 0x48
 800e8b0:	e7b7      	b.n	800e822 <_dtoa_r+0x18a>
 800e8b2:	427b      	negs	r3, r7
 800e8b4:	eba8 0807 	sub.w	r8, r8, r7
 800e8b8:	930a      	str	r3, [sp, #40]	@ 0x28
 800e8ba:	2300      	movs	r3, #0
 800e8bc:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e8be:	e7c4      	b.n	800e84a <_dtoa_r+0x1b2>
 800e8c0:	2300      	movs	r3, #0
 800e8c2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e8c4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e8c6:	2b00      	cmp	r3, #0
 800e8c8:	dc35      	bgt.n	800e936 <_dtoa_r+0x29e>
 800e8ca:	2301      	movs	r3, #1
 800e8cc:	461a      	mov	r2, r3
 800e8ce:	9300      	str	r3, [sp, #0]
 800e8d0:	9307      	str	r3, [sp, #28]
 800e8d2:	920e      	str	r2, [sp, #56]	@ 0x38
 800e8d4:	e00b      	b.n	800e8ee <_dtoa_r+0x256>
 800e8d6:	2301      	movs	r3, #1
 800e8d8:	e7f3      	b.n	800e8c2 <_dtoa_r+0x22a>
 800e8da:	2300      	movs	r3, #0
 800e8dc:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e8de:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e8e0:	18fb      	adds	r3, r7, r3
 800e8e2:	9300      	str	r3, [sp, #0]
 800e8e4:	3301      	adds	r3, #1
 800e8e6:	2b01      	cmp	r3, #1
 800e8e8:	9307      	str	r3, [sp, #28]
 800e8ea:	bfb8      	it	lt
 800e8ec:	2301      	movlt	r3, #1
 800e8ee:	f8db 001c 	ldr.w	r0, [fp, #28]
 800e8f2:	2100      	movs	r1, #0
 800e8f4:	2204      	movs	r2, #4
 800e8f6:	f102 0514 	add.w	r5, r2, #20
 800e8fa:	429d      	cmp	r5, r3
 800e8fc:	d91f      	bls.n	800e93e <_dtoa_r+0x2a6>
 800e8fe:	6041      	str	r1, [r0, #4]
 800e900:	4658      	mov	r0, fp
 800e902:	f000 fd8d 	bl	800f420 <_Balloc>
 800e906:	4682      	mov	sl, r0
 800e908:	2800      	cmp	r0, #0
 800e90a:	d13b      	bne.n	800e984 <_dtoa_r+0x2ec>
 800e90c:	4b1a      	ldr	r3, [pc, #104]	@ (800e978 <_dtoa_r+0x2e0>)
 800e90e:	4602      	mov	r2, r0
 800e910:	f240 11af 	movw	r1, #431	@ 0x1af
 800e914:	e6d7      	b.n	800e6c6 <_dtoa_r+0x2e>
 800e916:	2301      	movs	r3, #1
 800e918:	e7e0      	b.n	800e8dc <_dtoa_r+0x244>
 800e91a:	2401      	movs	r4, #1
 800e91c:	2300      	movs	r3, #0
 800e91e:	940b      	str	r4, [sp, #44]	@ 0x2c
 800e920:	9309      	str	r3, [sp, #36]	@ 0x24
 800e922:	f04f 33ff 	mov.w	r3, #4294967295
 800e926:	2200      	movs	r2, #0
 800e928:	9300      	str	r3, [sp, #0]
 800e92a:	9307      	str	r3, [sp, #28]
 800e92c:	2312      	movs	r3, #18
 800e92e:	e7d0      	b.n	800e8d2 <_dtoa_r+0x23a>
 800e930:	2301      	movs	r3, #1
 800e932:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e934:	e7f5      	b.n	800e922 <_dtoa_r+0x28a>
 800e936:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e938:	9300      	str	r3, [sp, #0]
 800e93a:	9307      	str	r3, [sp, #28]
 800e93c:	e7d7      	b.n	800e8ee <_dtoa_r+0x256>
 800e93e:	3101      	adds	r1, #1
 800e940:	0052      	lsls	r2, r2, #1
 800e942:	e7d8      	b.n	800e8f6 <_dtoa_r+0x25e>
 800e944:	f3af 8000 	nop.w
 800e948:	636f4361 	.word	0x636f4361
 800e94c:	3fd287a7 	.word	0x3fd287a7
 800e950:	8b60c8b3 	.word	0x8b60c8b3
 800e954:	3fc68a28 	.word	0x3fc68a28
 800e958:	509f79fb 	.word	0x509f79fb
 800e95c:	3fd34413 	.word	0x3fd34413
 800e960:	08011d96 	.word	0x08011d96
 800e964:	08011dad 	.word	0x08011dad
 800e968:	7ff00000 	.word	0x7ff00000
 800e96c:	08011d61 	.word	0x08011d61
 800e970:	3ff80000 	.word	0x3ff80000
 800e974:	08011ea8 	.word	0x08011ea8
 800e978:	08011e05 	.word	0x08011e05
 800e97c:	08011d92 	.word	0x08011d92
 800e980:	08011d60 	.word	0x08011d60
 800e984:	f8db 301c 	ldr.w	r3, [fp, #28]
 800e988:	6018      	str	r0, [r3, #0]
 800e98a:	9b07      	ldr	r3, [sp, #28]
 800e98c:	2b0e      	cmp	r3, #14
 800e98e:	f200 80a4 	bhi.w	800eada <_dtoa_r+0x442>
 800e992:	2c00      	cmp	r4, #0
 800e994:	f000 80a1 	beq.w	800eada <_dtoa_r+0x442>
 800e998:	2f00      	cmp	r7, #0
 800e99a:	dd33      	ble.n	800ea04 <_dtoa_r+0x36c>
 800e99c:	f007 020f 	and.w	r2, r7, #15
 800e9a0:	4bac      	ldr	r3, [pc, #688]	@ (800ec54 <_dtoa_r+0x5bc>)
 800e9a2:	05f8      	lsls	r0, r7, #23
 800e9a4:	ea4f 1427 	mov.w	r4, r7, asr #4
 800e9a8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e9ac:	ed93 7b00 	vldr	d7, [r3]
 800e9b0:	ed8d 7b04 	vstr	d7, [sp, #16]
 800e9b4:	d516      	bpl.n	800e9e4 <_dtoa_r+0x34c>
 800e9b6:	4ba8      	ldr	r3, [pc, #672]	@ (800ec58 <_dtoa_r+0x5c0>)
 800e9b8:	f004 040f 	and.w	r4, r4, #15
 800e9bc:	2603      	movs	r6, #3
 800e9be:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e9c2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e9c6:	f7f1 ff65 	bl	8000894 <__aeabi_ddiv>
 800e9ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e9ce:	4da2      	ldr	r5, [pc, #648]	@ (800ec58 <_dtoa_r+0x5c0>)
 800e9d0:	b954      	cbnz	r4, 800e9e8 <_dtoa_r+0x350>
 800e9d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e9d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e9da:	f7f1 ff5b 	bl	8000894 <__aeabi_ddiv>
 800e9de:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e9e2:	e028      	b.n	800ea36 <_dtoa_r+0x39e>
 800e9e4:	2602      	movs	r6, #2
 800e9e6:	e7f2      	b.n	800e9ce <_dtoa_r+0x336>
 800e9e8:	07e1      	lsls	r1, r4, #31
 800e9ea:	d508      	bpl.n	800e9fe <_dtoa_r+0x366>
 800e9ec:	3601      	adds	r6, #1
 800e9ee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e9f2:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e9f6:	f7f1 fe23 	bl	8000640 <__aeabi_dmul>
 800e9fa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e9fe:	1064      	asrs	r4, r4, #1
 800ea00:	3508      	adds	r5, #8
 800ea02:	e7e5      	b.n	800e9d0 <_dtoa_r+0x338>
 800ea04:	f000 80d2 	beq.w	800ebac <_dtoa_r+0x514>
 800ea08:	427c      	negs	r4, r7
 800ea0a:	4b92      	ldr	r3, [pc, #584]	@ (800ec54 <_dtoa_r+0x5bc>)
 800ea0c:	4d92      	ldr	r5, [pc, #584]	@ (800ec58 <_dtoa_r+0x5c0>)
 800ea0e:	2602      	movs	r6, #2
 800ea10:	f004 020f 	and.w	r2, r4, #15
 800ea14:	1124      	asrs	r4, r4, #4
 800ea16:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ea1a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ea1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea22:	f7f1 fe0d 	bl	8000640 <__aeabi_dmul>
 800ea26:	2300      	movs	r3, #0
 800ea28:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ea2c:	2c00      	cmp	r4, #0
 800ea2e:	f040 80b2 	bne.w	800eb96 <_dtoa_r+0x4fe>
 800ea32:	2b00      	cmp	r3, #0
 800ea34:	d1d3      	bne.n	800e9de <_dtoa_r+0x346>
 800ea36:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ea38:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	f000 80b7 	beq.w	800ebb0 <_dtoa_r+0x518>
 800ea42:	2200      	movs	r2, #0
 800ea44:	4b85      	ldr	r3, [pc, #532]	@ (800ec5c <_dtoa_r+0x5c4>)
 800ea46:	4620      	mov	r0, r4
 800ea48:	4629      	mov	r1, r5
 800ea4a:	f7f2 f86b 	bl	8000b24 <__aeabi_dcmplt>
 800ea4e:	2800      	cmp	r0, #0
 800ea50:	f000 80ae 	beq.w	800ebb0 <_dtoa_r+0x518>
 800ea54:	9b07      	ldr	r3, [sp, #28]
 800ea56:	2b00      	cmp	r3, #0
 800ea58:	f000 80aa 	beq.w	800ebb0 <_dtoa_r+0x518>
 800ea5c:	9b00      	ldr	r3, [sp, #0]
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	dd37      	ble.n	800ead2 <_dtoa_r+0x43a>
 800ea62:	1e7b      	subs	r3, r7, #1
 800ea64:	4620      	mov	r0, r4
 800ea66:	2200      	movs	r2, #0
 800ea68:	4629      	mov	r1, r5
 800ea6a:	9304      	str	r3, [sp, #16]
 800ea6c:	3601      	adds	r6, #1
 800ea6e:	4b7c      	ldr	r3, [pc, #496]	@ (800ec60 <_dtoa_r+0x5c8>)
 800ea70:	f7f1 fde6 	bl	8000640 <__aeabi_dmul>
 800ea74:	9c00      	ldr	r4, [sp, #0]
 800ea76:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ea7a:	4630      	mov	r0, r6
 800ea7c:	f7f1 fd76 	bl	800056c <__aeabi_i2d>
 800ea80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ea84:	f7f1 fddc 	bl	8000640 <__aeabi_dmul>
 800ea88:	2200      	movs	r2, #0
 800ea8a:	4b76      	ldr	r3, [pc, #472]	@ (800ec64 <_dtoa_r+0x5cc>)
 800ea8c:	f7f1 fc22 	bl	80002d4 <__adddf3>
 800ea90:	4605      	mov	r5, r0
 800ea92:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800ea96:	2c00      	cmp	r4, #0
 800ea98:	f040 808d 	bne.w	800ebb6 <_dtoa_r+0x51e>
 800ea9c:	2200      	movs	r2, #0
 800ea9e:	4b72      	ldr	r3, [pc, #456]	@ (800ec68 <_dtoa_r+0x5d0>)
 800eaa0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800eaa4:	f7f1 fc14 	bl	80002d0 <__aeabi_dsub>
 800eaa8:	4602      	mov	r2, r0
 800eaaa:	460b      	mov	r3, r1
 800eaac:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800eab0:	462a      	mov	r2, r5
 800eab2:	4633      	mov	r3, r6
 800eab4:	f7f2 f854 	bl	8000b60 <__aeabi_dcmpgt>
 800eab8:	2800      	cmp	r0, #0
 800eaba:	f040 828b 	bne.w	800efd4 <_dtoa_r+0x93c>
 800eabe:	462a      	mov	r2, r5
 800eac0:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800eac4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800eac8:	f7f2 f82c 	bl	8000b24 <__aeabi_dcmplt>
 800eacc:	2800      	cmp	r0, #0
 800eace:	f040 8128 	bne.w	800ed22 <_dtoa_r+0x68a>
 800ead2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800ead6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800eada:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800eadc:	2b00      	cmp	r3, #0
 800eade:	f2c0 815a 	blt.w	800ed96 <_dtoa_r+0x6fe>
 800eae2:	2f0e      	cmp	r7, #14
 800eae4:	f300 8157 	bgt.w	800ed96 <_dtoa_r+0x6fe>
 800eae8:	4b5a      	ldr	r3, [pc, #360]	@ (800ec54 <_dtoa_r+0x5bc>)
 800eaea:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800eaee:	ed93 7b00 	vldr	d7, [r3]
 800eaf2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800eaf4:	2b00      	cmp	r3, #0
 800eaf6:	ed8d 7b00 	vstr	d7, [sp]
 800eafa:	da03      	bge.n	800eb04 <_dtoa_r+0x46c>
 800eafc:	9b07      	ldr	r3, [sp, #28]
 800eafe:	2b00      	cmp	r3, #0
 800eb00:	f340 8101 	ble.w	800ed06 <_dtoa_r+0x66e>
 800eb04:	4656      	mov	r6, sl
 800eb06:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800eb0a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800eb0e:	4620      	mov	r0, r4
 800eb10:	4629      	mov	r1, r5
 800eb12:	f7f1 febf 	bl	8000894 <__aeabi_ddiv>
 800eb16:	f7f2 f843 	bl	8000ba0 <__aeabi_d2iz>
 800eb1a:	4680      	mov	r8, r0
 800eb1c:	f7f1 fd26 	bl	800056c <__aeabi_i2d>
 800eb20:	e9dd 2300 	ldrd	r2, r3, [sp]
 800eb24:	f7f1 fd8c 	bl	8000640 <__aeabi_dmul>
 800eb28:	4602      	mov	r2, r0
 800eb2a:	4620      	mov	r0, r4
 800eb2c:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800eb30:	460b      	mov	r3, r1
 800eb32:	4629      	mov	r1, r5
 800eb34:	f7f1 fbcc 	bl	80002d0 <__aeabi_dsub>
 800eb38:	9d07      	ldr	r5, [sp, #28]
 800eb3a:	f806 4b01 	strb.w	r4, [r6], #1
 800eb3e:	eba6 040a 	sub.w	r4, r6, sl
 800eb42:	4602      	mov	r2, r0
 800eb44:	460b      	mov	r3, r1
 800eb46:	42a5      	cmp	r5, r4
 800eb48:	f040 8117 	bne.w	800ed7a <_dtoa_r+0x6e2>
 800eb4c:	f7f1 fbc2 	bl	80002d4 <__adddf3>
 800eb50:	4604      	mov	r4, r0
 800eb52:	460d      	mov	r5, r1
 800eb54:	e9dd 2300 	ldrd	r2, r3, [sp]
 800eb58:	f7f2 f802 	bl	8000b60 <__aeabi_dcmpgt>
 800eb5c:	2800      	cmp	r0, #0
 800eb5e:	f040 80f9 	bne.w	800ed54 <_dtoa_r+0x6bc>
 800eb62:	4620      	mov	r0, r4
 800eb64:	4629      	mov	r1, r5
 800eb66:	e9dd 2300 	ldrd	r2, r3, [sp]
 800eb6a:	f7f1 ffd1 	bl	8000b10 <__aeabi_dcmpeq>
 800eb6e:	b118      	cbz	r0, 800eb78 <_dtoa_r+0x4e0>
 800eb70:	f018 0f01 	tst.w	r8, #1
 800eb74:	f040 80ee 	bne.w	800ed54 <_dtoa_r+0x6bc>
 800eb78:	4649      	mov	r1, r9
 800eb7a:	4658      	mov	r0, fp
 800eb7c:	f000 fc90 	bl	800f4a0 <_Bfree>
 800eb80:	2300      	movs	r3, #0
 800eb82:	3701      	adds	r7, #1
 800eb84:	7033      	strb	r3, [r6, #0]
 800eb86:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800eb88:	601f      	str	r7, [r3, #0]
 800eb8a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800eb8c:	2b00      	cmp	r3, #0
 800eb8e:	f000 831d 	beq.w	800f1cc <_dtoa_r+0xb34>
 800eb92:	601e      	str	r6, [r3, #0]
 800eb94:	e31a      	b.n	800f1cc <_dtoa_r+0xb34>
 800eb96:	07e2      	lsls	r2, r4, #31
 800eb98:	d505      	bpl.n	800eba6 <_dtoa_r+0x50e>
 800eb9a:	3601      	adds	r6, #1
 800eb9c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800eba0:	f7f1 fd4e 	bl	8000640 <__aeabi_dmul>
 800eba4:	2301      	movs	r3, #1
 800eba6:	1064      	asrs	r4, r4, #1
 800eba8:	3508      	adds	r5, #8
 800ebaa:	e73f      	b.n	800ea2c <_dtoa_r+0x394>
 800ebac:	2602      	movs	r6, #2
 800ebae:	e742      	b.n	800ea36 <_dtoa_r+0x39e>
 800ebb0:	9c07      	ldr	r4, [sp, #28]
 800ebb2:	9704      	str	r7, [sp, #16]
 800ebb4:	e761      	b.n	800ea7a <_dtoa_r+0x3e2>
 800ebb6:	4b27      	ldr	r3, [pc, #156]	@ (800ec54 <_dtoa_r+0x5bc>)
 800ebb8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ebba:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ebbe:	4454      	add	r4, sl
 800ebc0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ebc4:	2900      	cmp	r1, #0
 800ebc6:	d053      	beq.n	800ec70 <_dtoa_r+0x5d8>
 800ebc8:	2000      	movs	r0, #0
 800ebca:	4928      	ldr	r1, [pc, #160]	@ (800ec6c <_dtoa_r+0x5d4>)
 800ebcc:	f7f1 fe62 	bl	8000894 <__aeabi_ddiv>
 800ebd0:	4633      	mov	r3, r6
 800ebd2:	4656      	mov	r6, sl
 800ebd4:	462a      	mov	r2, r5
 800ebd6:	f7f1 fb7b 	bl	80002d0 <__aeabi_dsub>
 800ebda:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ebde:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ebe2:	f7f1 ffdd 	bl	8000ba0 <__aeabi_d2iz>
 800ebe6:	4605      	mov	r5, r0
 800ebe8:	f7f1 fcc0 	bl	800056c <__aeabi_i2d>
 800ebec:	4602      	mov	r2, r0
 800ebee:	460b      	mov	r3, r1
 800ebf0:	3530      	adds	r5, #48	@ 0x30
 800ebf2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ebf6:	f7f1 fb6b 	bl	80002d0 <__aeabi_dsub>
 800ebfa:	4602      	mov	r2, r0
 800ebfc:	460b      	mov	r3, r1
 800ebfe:	f806 5b01 	strb.w	r5, [r6], #1
 800ec02:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ec06:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ec0a:	f7f1 ff8b 	bl	8000b24 <__aeabi_dcmplt>
 800ec0e:	2800      	cmp	r0, #0
 800ec10:	d171      	bne.n	800ecf6 <_dtoa_r+0x65e>
 800ec12:	2000      	movs	r0, #0
 800ec14:	4911      	ldr	r1, [pc, #68]	@ (800ec5c <_dtoa_r+0x5c4>)
 800ec16:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ec1a:	f7f1 fb59 	bl	80002d0 <__aeabi_dsub>
 800ec1e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ec22:	f7f1 ff7f 	bl	8000b24 <__aeabi_dcmplt>
 800ec26:	2800      	cmp	r0, #0
 800ec28:	f040 8095 	bne.w	800ed56 <_dtoa_r+0x6be>
 800ec2c:	42a6      	cmp	r6, r4
 800ec2e:	f43f af50 	beq.w	800ead2 <_dtoa_r+0x43a>
 800ec32:	2200      	movs	r2, #0
 800ec34:	4b0a      	ldr	r3, [pc, #40]	@ (800ec60 <_dtoa_r+0x5c8>)
 800ec36:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800ec3a:	f7f1 fd01 	bl	8000640 <__aeabi_dmul>
 800ec3e:	2200      	movs	r2, #0
 800ec40:	4b07      	ldr	r3, [pc, #28]	@ (800ec60 <_dtoa_r+0x5c8>)
 800ec42:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ec46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ec4a:	f7f1 fcf9 	bl	8000640 <__aeabi_dmul>
 800ec4e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ec52:	e7c4      	b.n	800ebde <_dtoa_r+0x546>
 800ec54:	08011ea8 	.word	0x08011ea8
 800ec58:	08011e80 	.word	0x08011e80
 800ec5c:	3ff00000 	.word	0x3ff00000
 800ec60:	40240000 	.word	0x40240000
 800ec64:	401c0000 	.word	0x401c0000
 800ec68:	40140000 	.word	0x40140000
 800ec6c:	3fe00000 	.word	0x3fe00000
 800ec70:	4631      	mov	r1, r6
 800ec72:	4656      	mov	r6, sl
 800ec74:	4628      	mov	r0, r5
 800ec76:	f7f1 fce3 	bl	8000640 <__aeabi_dmul>
 800ec7a:	9415      	str	r4, [sp, #84]	@ 0x54
 800ec7c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ec80:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ec84:	f7f1 ff8c 	bl	8000ba0 <__aeabi_d2iz>
 800ec88:	4605      	mov	r5, r0
 800ec8a:	f7f1 fc6f 	bl	800056c <__aeabi_i2d>
 800ec8e:	4602      	mov	r2, r0
 800ec90:	3530      	adds	r5, #48	@ 0x30
 800ec92:	460b      	mov	r3, r1
 800ec94:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ec98:	f7f1 fb1a 	bl	80002d0 <__aeabi_dsub>
 800ec9c:	f806 5b01 	strb.w	r5, [r6], #1
 800eca0:	4602      	mov	r2, r0
 800eca2:	460b      	mov	r3, r1
 800eca4:	42a6      	cmp	r6, r4
 800eca6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ecaa:	f04f 0200 	mov.w	r2, #0
 800ecae:	d124      	bne.n	800ecfa <_dtoa_r+0x662>
 800ecb0:	4bac      	ldr	r3, [pc, #688]	@ (800ef64 <_dtoa_r+0x8cc>)
 800ecb2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800ecb6:	f7f1 fb0d 	bl	80002d4 <__adddf3>
 800ecba:	4602      	mov	r2, r0
 800ecbc:	460b      	mov	r3, r1
 800ecbe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ecc2:	f7f1 ff4d 	bl	8000b60 <__aeabi_dcmpgt>
 800ecc6:	2800      	cmp	r0, #0
 800ecc8:	d145      	bne.n	800ed56 <_dtoa_r+0x6be>
 800ecca:	2000      	movs	r0, #0
 800eccc:	49a5      	ldr	r1, [pc, #660]	@ (800ef64 <_dtoa_r+0x8cc>)
 800ecce:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ecd2:	f7f1 fafd 	bl	80002d0 <__aeabi_dsub>
 800ecd6:	4602      	mov	r2, r0
 800ecd8:	460b      	mov	r3, r1
 800ecda:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ecde:	f7f1 ff21 	bl	8000b24 <__aeabi_dcmplt>
 800ece2:	2800      	cmp	r0, #0
 800ece4:	f43f aef5 	beq.w	800ead2 <_dtoa_r+0x43a>
 800ece8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800ecea:	1e73      	subs	r3, r6, #1
 800ecec:	9315      	str	r3, [sp, #84]	@ 0x54
 800ecee:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ecf2:	2b30      	cmp	r3, #48	@ 0x30
 800ecf4:	d0f8      	beq.n	800ece8 <_dtoa_r+0x650>
 800ecf6:	9f04      	ldr	r7, [sp, #16]
 800ecf8:	e73e      	b.n	800eb78 <_dtoa_r+0x4e0>
 800ecfa:	4b9b      	ldr	r3, [pc, #620]	@ (800ef68 <_dtoa_r+0x8d0>)
 800ecfc:	f7f1 fca0 	bl	8000640 <__aeabi_dmul>
 800ed00:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ed04:	e7bc      	b.n	800ec80 <_dtoa_r+0x5e8>
 800ed06:	d10c      	bne.n	800ed22 <_dtoa_r+0x68a>
 800ed08:	2200      	movs	r2, #0
 800ed0a:	4b98      	ldr	r3, [pc, #608]	@ (800ef6c <_dtoa_r+0x8d4>)
 800ed0c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ed10:	f7f1 fc96 	bl	8000640 <__aeabi_dmul>
 800ed14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ed18:	f7f1 ff18 	bl	8000b4c <__aeabi_dcmpge>
 800ed1c:	2800      	cmp	r0, #0
 800ed1e:	f000 8157 	beq.w	800efd0 <_dtoa_r+0x938>
 800ed22:	2400      	movs	r4, #0
 800ed24:	4625      	mov	r5, r4
 800ed26:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ed28:	4656      	mov	r6, sl
 800ed2a:	43db      	mvns	r3, r3
 800ed2c:	9304      	str	r3, [sp, #16]
 800ed2e:	2700      	movs	r7, #0
 800ed30:	4621      	mov	r1, r4
 800ed32:	4658      	mov	r0, fp
 800ed34:	f000 fbb4 	bl	800f4a0 <_Bfree>
 800ed38:	2d00      	cmp	r5, #0
 800ed3a:	d0dc      	beq.n	800ecf6 <_dtoa_r+0x65e>
 800ed3c:	b12f      	cbz	r7, 800ed4a <_dtoa_r+0x6b2>
 800ed3e:	42af      	cmp	r7, r5
 800ed40:	d003      	beq.n	800ed4a <_dtoa_r+0x6b2>
 800ed42:	4639      	mov	r1, r7
 800ed44:	4658      	mov	r0, fp
 800ed46:	f000 fbab 	bl	800f4a0 <_Bfree>
 800ed4a:	4629      	mov	r1, r5
 800ed4c:	4658      	mov	r0, fp
 800ed4e:	f000 fba7 	bl	800f4a0 <_Bfree>
 800ed52:	e7d0      	b.n	800ecf6 <_dtoa_r+0x65e>
 800ed54:	9704      	str	r7, [sp, #16]
 800ed56:	4633      	mov	r3, r6
 800ed58:	461e      	mov	r6, r3
 800ed5a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ed5e:	2a39      	cmp	r2, #57	@ 0x39
 800ed60:	d107      	bne.n	800ed72 <_dtoa_r+0x6da>
 800ed62:	459a      	cmp	sl, r3
 800ed64:	d1f8      	bne.n	800ed58 <_dtoa_r+0x6c0>
 800ed66:	9a04      	ldr	r2, [sp, #16]
 800ed68:	3201      	adds	r2, #1
 800ed6a:	9204      	str	r2, [sp, #16]
 800ed6c:	2230      	movs	r2, #48	@ 0x30
 800ed6e:	f88a 2000 	strb.w	r2, [sl]
 800ed72:	781a      	ldrb	r2, [r3, #0]
 800ed74:	3201      	adds	r2, #1
 800ed76:	701a      	strb	r2, [r3, #0]
 800ed78:	e7bd      	b.n	800ecf6 <_dtoa_r+0x65e>
 800ed7a:	2200      	movs	r2, #0
 800ed7c:	4b7a      	ldr	r3, [pc, #488]	@ (800ef68 <_dtoa_r+0x8d0>)
 800ed7e:	f7f1 fc5f 	bl	8000640 <__aeabi_dmul>
 800ed82:	2200      	movs	r2, #0
 800ed84:	2300      	movs	r3, #0
 800ed86:	4604      	mov	r4, r0
 800ed88:	460d      	mov	r5, r1
 800ed8a:	f7f1 fec1 	bl	8000b10 <__aeabi_dcmpeq>
 800ed8e:	2800      	cmp	r0, #0
 800ed90:	f43f aebb 	beq.w	800eb0a <_dtoa_r+0x472>
 800ed94:	e6f0      	b.n	800eb78 <_dtoa_r+0x4e0>
 800ed96:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800ed98:	2a00      	cmp	r2, #0
 800ed9a:	f000 80db 	beq.w	800ef54 <_dtoa_r+0x8bc>
 800ed9e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800eda0:	2a01      	cmp	r2, #1
 800eda2:	f300 80bf 	bgt.w	800ef24 <_dtoa_r+0x88c>
 800eda6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800eda8:	2a00      	cmp	r2, #0
 800edaa:	f000 80b7 	beq.w	800ef1c <_dtoa_r+0x884>
 800edae:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800edb2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800edb4:	4646      	mov	r6, r8
 800edb6:	9a08      	ldr	r2, [sp, #32]
 800edb8:	2101      	movs	r1, #1
 800edba:	4658      	mov	r0, fp
 800edbc:	4498      	add	r8, r3
 800edbe:	441a      	add	r2, r3
 800edc0:	9208      	str	r2, [sp, #32]
 800edc2:	f000 fc6d 	bl	800f6a0 <__i2b>
 800edc6:	4605      	mov	r5, r0
 800edc8:	b15e      	cbz	r6, 800ede2 <_dtoa_r+0x74a>
 800edca:	9b08      	ldr	r3, [sp, #32]
 800edcc:	2b00      	cmp	r3, #0
 800edce:	dd08      	ble.n	800ede2 <_dtoa_r+0x74a>
 800edd0:	42b3      	cmp	r3, r6
 800edd2:	9a08      	ldr	r2, [sp, #32]
 800edd4:	bfa8      	it	ge
 800edd6:	4633      	movge	r3, r6
 800edd8:	eba8 0803 	sub.w	r8, r8, r3
 800eddc:	1af6      	subs	r6, r6, r3
 800edde:	1ad3      	subs	r3, r2, r3
 800ede0:	9308      	str	r3, [sp, #32]
 800ede2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ede4:	b1f3      	cbz	r3, 800ee24 <_dtoa_r+0x78c>
 800ede6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ede8:	2b00      	cmp	r3, #0
 800edea:	f000 80b7 	beq.w	800ef5c <_dtoa_r+0x8c4>
 800edee:	b18c      	cbz	r4, 800ee14 <_dtoa_r+0x77c>
 800edf0:	4629      	mov	r1, r5
 800edf2:	4622      	mov	r2, r4
 800edf4:	4658      	mov	r0, fp
 800edf6:	f000 fd13 	bl	800f820 <__pow5mult>
 800edfa:	464a      	mov	r2, r9
 800edfc:	4601      	mov	r1, r0
 800edfe:	4605      	mov	r5, r0
 800ee00:	4658      	mov	r0, fp
 800ee02:	f000 fc63 	bl	800f6cc <__multiply>
 800ee06:	4649      	mov	r1, r9
 800ee08:	9004      	str	r0, [sp, #16]
 800ee0a:	4658      	mov	r0, fp
 800ee0c:	f000 fb48 	bl	800f4a0 <_Bfree>
 800ee10:	9b04      	ldr	r3, [sp, #16]
 800ee12:	4699      	mov	r9, r3
 800ee14:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ee16:	1b1a      	subs	r2, r3, r4
 800ee18:	d004      	beq.n	800ee24 <_dtoa_r+0x78c>
 800ee1a:	4649      	mov	r1, r9
 800ee1c:	4658      	mov	r0, fp
 800ee1e:	f000 fcff 	bl	800f820 <__pow5mult>
 800ee22:	4681      	mov	r9, r0
 800ee24:	2101      	movs	r1, #1
 800ee26:	4658      	mov	r0, fp
 800ee28:	f000 fc3a 	bl	800f6a0 <__i2b>
 800ee2c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ee2e:	4604      	mov	r4, r0
 800ee30:	2b00      	cmp	r3, #0
 800ee32:	f000 81cf 	beq.w	800f1d4 <_dtoa_r+0xb3c>
 800ee36:	461a      	mov	r2, r3
 800ee38:	4601      	mov	r1, r0
 800ee3a:	4658      	mov	r0, fp
 800ee3c:	f000 fcf0 	bl	800f820 <__pow5mult>
 800ee40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ee42:	4604      	mov	r4, r0
 800ee44:	2b01      	cmp	r3, #1
 800ee46:	f300 8095 	bgt.w	800ef74 <_dtoa_r+0x8dc>
 800ee4a:	9b02      	ldr	r3, [sp, #8]
 800ee4c:	2b00      	cmp	r3, #0
 800ee4e:	f040 8087 	bne.w	800ef60 <_dtoa_r+0x8c8>
 800ee52:	9b03      	ldr	r3, [sp, #12]
 800ee54:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ee58:	2b00      	cmp	r3, #0
 800ee5a:	f040 8089 	bne.w	800ef70 <_dtoa_r+0x8d8>
 800ee5e:	9b03      	ldr	r3, [sp, #12]
 800ee60:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ee64:	0d1b      	lsrs	r3, r3, #20
 800ee66:	051b      	lsls	r3, r3, #20
 800ee68:	b12b      	cbz	r3, 800ee76 <_dtoa_r+0x7de>
 800ee6a:	9b08      	ldr	r3, [sp, #32]
 800ee6c:	f108 0801 	add.w	r8, r8, #1
 800ee70:	3301      	adds	r3, #1
 800ee72:	9308      	str	r3, [sp, #32]
 800ee74:	2301      	movs	r3, #1
 800ee76:	930a      	str	r3, [sp, #40]	@ 0x28
 800ee78:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ee7a:	2b00      	cmp	r3, #0
 800ee7c:	f000 81b0 	beq.w	800f1e0 <_dtoa_r+0xb48>
 800ee80:	6923      	ldr	r3, [r4, #16]
 800ee82:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ee86:	6918      	ldr	r0, [r3, #16]
 800ee88:	f000 fbbe 	bl	800f608 <__hi0bits>
 800ee8c:	f1c0 0020 	rsb	r0, r0, #32
 800ee90:	9b08      	ldr	r3, [sp, #32]
 800ee92:	4418      	add	r0, r3
 800ee94:	f010 001f 	ands.w	r0, r0, #31
 800ee98:	d077      	beq.n	800ef8a <_dtoa_r+0x8f2>
 800ee9a:	f1c0 0320 	rsb	r3, r0, #32
 800ee9e:	2b04      	cmp	r3, #4
 800eea0:	dd6b      	ble.n	800ef7a <_dtoa_r+0x8e2>
 800eea2:	f1c0 001c 	rsb	r0, r0, #28
 800eea6:	9b08      	ldr	r3, [sp, #32]
 800eea8:	4480      	add	r8, r0
 800eeaa:	4403      	add	r3, r0
 800eeac:	4406      	add	r6, r0
 800eeae:	9308      	str	r3, [sp, #32]
 800eeb0:	f1b8 0f00 	cmp.w	r8, #0
 800eeb4:	dd05      	ble.n	800eec2 <_dtoa_r+0x82a>
 800eeb6:	4649      	mov	r1, r9
 800eeb8:	4642      	mov	r2, r8
 800eeba:	4658      	mov	r0, fp
 800eebc:	f000 fd0a 	bl	800f8d4 <__lshift>
 800eec0:	4681      	mov	r9, r0
 800eec2:	9b08      	ldr	r3, [sp, #32]
 800eec4:	2b00      	cmp	r3, #0
 800eec6:	dd05      	ble.n	800eed4 <_dtoa_r+0x83c>
 800eec8:	4621      	mov	r1, r4
 800eeca:	461a      	mov	r2, r3
 800eecc:	4658      	mov	r0, fp
 800eece:	f000 fd01 	bl	800f8d4 <__lshift>
 800eed2:	4604      	mov	r4, r0
 800eed4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800eed6:	2b00      	cmp	r3, #0
 800eed8:	d059      	beq.n	800ef8e <_dtoa_r+0x8f6>
 800eeda:	4621      	mov	r1, r4
 800eedc:	4648      	mov	r0, r9
 800eede:	f000 fd65 	bl	800f9ac <__mcmp>
 800eee2:	2800      	cmp	r0, #0
 800eee4:	da53      	bge.n	800ef8e <_dtoa_r+0x8f6>
 800eee6:	1e7b      	subs	r3, r7, #1
 800eee8:	4649      	mov	r1, r9
 800eeea:	220a      	movs	r2, #10
 800eeec:	4658      	mov	r0, fp
 800eeee:	9304      	str	r3, [sp, #16]
 800eef0:	2300      	movs	r3, #0
 800eef2:	f000 faf7 	bl	800f4e4 <__multadd>
 800eef6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800eef8:	4681      	mov	r9, r0
 800eefa:	2b00      	cmp	r3, #0
 800eefc:	f000 8172 	beq.w	800f1e4 <_dtoa_r+0xb4c>
 800ef00:	2300      	movs	r3, #0
 800ef02:	4629      	mov	r1, r5
 800ef04:	220a      	movs	r2, #10
 800ef06:	4658      	mov	r0, fp
 800ef08:	f000 faec 	bl	800f4e4 <__multadd>
 800ef0c:	9b00      	ldr	r3, [sp, #0]
 800ef0e:	4605      	mov	r5, r0
 800ef10:	2b00      	cmp	r3, #0
 800ef12:	dc67      	bgt.n	800efe4 <_dtoa_r+0x94c>
 800ef14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ef16:	2b02      	cmp	r3, #2
 800ef18:	dc41      	bgt.n	800ef9e <_dtoa_r+0x906>
 800ef1a:	e063      	b.n	800efe4 <_dtoa_r+0x94c>
 800ef1c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800ef1e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800ef22:	e746      	b.n	800edb2 <_dtoa_r+0x71a>
 800ef24:	9b07      	ldr	r3, [sp, #28]
 800ef26:	1e5c      	subs	r4, r3, #1
 800ef28:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ef2a:	42a3      	cmp	r3, r4
 800ef2c:	bfb7      	itett	lt
 800ef2e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800ef30:	1b1c      	subge	r4, r3, r4
 800ef32:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800ef34:	1ae3      	sublt	r3, r4, r3
 800ef36:	bfbe      	ittt	lt
 800ef38:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800ef3a:	2400      	movlt	r4, #0
 800ef3c:	18d2      	addlt	r2, r2, r3
 800ef3e:	9b07      	ldr	r3, [sp, #28]
 800ef40:	bfb8      	it	lt
 800ef42:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800ef44:	2b00      	cmp	r3, #0
 800ef46:	bfb5      	itete	lt
 800ef48:	eba8 0603 	sublt.w	r6, r8, r3
 800ef4c:	4646      	movge	r6, r8
 800ef4e:	2300      	movlt	r3, #0
 800ef50:	9b07      	ldrge	r3, [sp, #28]
 800ef52:	e730      	b.n	800edb6 <_dtoa_r+0x71e>
 800ef54:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800ef56:	4646      	mov	r6, r8
 800ef58:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800ef5a:	e735      	b.n	800edc8 <_dtoa_r+0x730>
 800ef5c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ef5e:	e75c      	b.n	800ee1a <_dtoa_r+0x782>
 800ef60:	2300      	movs	r3, #0
 800ef62:	e788      	b.n	800ee76 <_dtoa_r+0x7de>
 800ef64:	3fe00000 	.word	0x3fe00000
 800ef68:	40240000 	.word	0x40240000
 800ef6c:	40140000 	.word	0x40140000
 800ef70:	9b02      	ldr	r3, [sp, #8]
 800ef72:	e780      	b.n	800ee76 <_dtoa_r+0x7de>
 800ef74:	2300      	movs	r3, #0
 800ef76:	930a      	str	r3, [sp, #40]	@ 0x28
 800ef78:	e782      	b.n	800ee80 <_dtoa_r+0x7e8>
 800ef7a:	d099      	beq.n	800eeb0 <_dtoa_r+0x818>
 800ef7c:	331c      	adds	r3, #28
 800ef7e:	9a08      	ldr	r2, [sp, #32]
 800ef80:	441a      	add	r2, r3
 800ef82:	4498      	add	r8, r3
 800ef84:	441e      	add	r6, r3
 800ef86:	9208      	str	r2, [sp, #32]
 800ef88:	e792      	b.n	800eeb0 <_dtoa_r+0x818>
 800ef8a:	4603      	mov	r3, r0
 800ef8c:	e7f6      	b.n	800ef7c <_dtoa_r+0x8e4>
 800ef8e:	9b07      	ldr	r3, [sp, #28]
 800ef90:	9704      	str	r7, [sp, #16]
 800ef92:	2b00      	cmp	r3, #0
 800ef94:	dc20      	bgt.n	800efd8 <_dtoa_r+0x940>
 800ef96:	9300      	str	r3, [sp, #0]
 800ef98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ef9a:	2b02      	cmp	r3, #2
 800ef9c:	dd1e      	ble.n	800efdc <_dtoa_r+0x944>
 800ef9e:	9b00      	ldr	r3, [sp, #0]
 800efa0:	2b00      	cmp	r3, #0
 800efa2:	f47f aec0 	bne.w	800ed26 <_dtoa_r+0x68e>
 800efa6:	4621      	mov	r1, r4
 800efa8:	2205      	movs	r2, #5
 800efaa:	4658      	mov	r0, fp
 800efac:	f000 fa9a 	bl	800f4e4 <__multadd>
 800efb0:	4601      	mov	r1, r0
 800efb2:	4604      	mov	r4, r0
 800efb4:	4648      	mov	r0, r9
 800efb6:	f000 fcf9 	bl	800f9ac <__mcmp>
 800efba:	2800      	cmp	r0, #0
 800efbc:	f77f aeb3 	ble.w	800ed26 <_dtoa_r+0x68e>
 800efc0:	2331      	movs	r3, #49	@ 0x31
 800efc2:	4656      	mov	r6, sl
 800efc4:	f806 3b01 	strb.w	r3, [r6], #1
 800efc8:	9b04      	ldr	r3, [sp, #16]
 800efca:	3301      	adds	r3, #1
 800efcc:	9304      	str	r3, [sp, #16]
 800efce:	e6ae      	b.n	800ed2e <_dtoa_r+0x696>
 800efd0:	9c07      	ldr	r4, [sp, #28]
 800efd2:	9704      	str	r7, [sp, #16]
 800efd4:	4625      	mov	r5, r4
 800efd6:	e7f3      	b.n	800efc0 <_dtoa_r+0x928>
 800efd8:	9b07      	ldr	r3, [sp, #28]
 800efda:	9300      	str	r3, [sp, #0]
 800efdc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800efde:	2b00      	cmp	r3, #0
 800efe0:	f000 8104 	beq.w	800f1ec <_dtoa_r+0xb54>
 800efe4:	2e00      	cmp	r6, #0
 800efe6:	dd05      	ble.n	800eff4 <_dtoa_r+0x95c>
 800efe8:	4629      	mov	r1, r5
 800efea:	4632      	mov	r2, r6
 800efec:	4658      	mov	r0, fp
 800efee:	f000 fc71 	bl	800f8d4 <__lshift>
 800eff2:	4605      	mov	r5, r0
 800eff4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800eff6:	2b00      	cmp	r3, #0
 800eff8:	d05a      	beq.n	800f0b0 <_dtoa_r+0xa18>
 800effa:	6869      	ldr	r1, [r5, #4]
 800effc:	4658      	mov	r0, fp
 800effe:	f000 fa0f 	bl	800f420 <_Balloc>
 800f002:	4606      	mov	r6, r0
 800f004:	b928      	cbnz	r0, 800f012 <_dtoa_r+0x97a>
 800f006:	4b84      	ldr	r3, [pc, #528]	@ (800f218 <_dtoa_r+0xb80>)
 800f008:	4602      	mov	r2, r0
 800f00a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800f00e:	f7ff bb5a 	b.w	800e6c6 <_dtoa_r+0x2e>
 800f012:	692a      	ldr	r2, [r5, #16]
 800f014:	f105 010c 	add.w	r1, r5, #12
 800f018:	300c      	adds	r0, #12
 800f01a:	3202      	adds	r2, #2
 800f01c:	0092      	lsls	r2, r2, #2
 800f01e:	f001 ff81 	bl	8010f24 <memcpy>
 800f022:	2201      	movs	r2, #1
 800f024:	4631      	mov	r1, r6
 800f026:	4658      	mov	r0, fp
 800f028:	f000 fc54 	bl	800f8d4 <__lshift>
 800f02c:	f10a 0301 	add.w	r3, sl, #1
 800f030:	462f      	mov	r7, r5
 800f032:	4605      	mov	r5, r0
 800f034:	9307      	str	r3, [sp, #28]
 800f036:	9b00      	ldr	r3, [sp, #0]
 800f038:	4453      	add	r3, sl
 800f03a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f03c:	9b02      	ldr	r3, [sp, #8]
 800f03e:	f003 0301 	and.w	r3, r3, #1
 800f042:	930a      	str	r3, [sp, #40]	@ 0x28
 800f044:	9b07      	ldr	r3, [sp, #28]
 800f046:	4621      	mov	r1, r4
 800f048:	4648      	mov	r0, r9
 800f04a:	3b01      	subs	r3, #1
 800f04c:	9300      	str	r3, [sp, #0]
 800f04e:	f7ff fa95 	bl	800e57c <quorem>
 800f052:	4639      	mov	r1, r7
 800f054:	9002      	str	r0, [sp, #8]
 800f056:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800f05a:	4648      	mov	r0, r9
 800f05c:	f000 fca6 	bl	800f9ac <__mcmp>
 800f060:	462a      	mov	r2, r5
 800f062:	9008      	str	r0, [sp, #32]
 800f064:	4621      	mov	r1, r4
 800f066:	4658      	mov	r0, fp
 800f068:	f000 fcbc 	bl	800f9e4 <__mdiff>
 800f06c:	68c2      	ldr	r2, [r0, #12]
 800f06e:	4606      	mov	r6, r0
 800f070:	bb02      	cbnz	r2, 800f0b4 <_dtoa_r+0xa1c>
 800f072:	4601      	mov	r1, r0
 800f074:	4648      	mov	r0, r9
 800f076:	f000 fc99 	bl	800f9ac <__mcmp>
 800f07a:	4602      	mov	r2, r0
 800f07c:	4631      	mov	r1, r6
 800f07e:	4658      	mov	r0, fp
 800f080:	920e      	str	r2, [sp, #56]	@ 0x38
 800f082:	f000 fa0d 	bl	800f4a0 <_Bfree>
 800f086:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f088:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f08a:	9e07      	ldr	r6, [sp, #28]
 800f08c:	ea43 0102 	orr.w	r1, r3, r2
 800f090:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f092:	4319      	orrs	r1, r3
 800f094:	d110      	bne.n	800f0b8 <_dtoa_r+0xa20>
 800f096:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800f09a:	d029      	beq.n	800f0f0 <_dtoa_r+0xa58>
 800f09c:	9b08      	ldr	r3, [sp, #32]
 800f09e:	2b00      	cmp	r3, #0
 800f0a0:	dd02      	ble.n	800f0a8 <_dtoa_r+0xa10>
 800f0a2:	9b02      	ldr	r3, [sp, #8]
 800f0a4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800f0a8:	9b00      	ldr	r3, [sp, #0]
 800f0aa:	f883 8000 	strb.w	r8, [r3]
 800f0ae:	e63f      	b.n	800ed30 <_dtoa_r+0x698>
 800f0b0:	4628      	mov	r0, r5
 800f0b2:	e7bb      	b.n	800f02c <_dtoa_r+0x994>
 800f0b4:	2201      	movs	r2, #1
 800f0b6:	e7e1      	b.n	800f07c <_dtoa_r+0x9e4>
 800f0b8:	9b08      	ldr	r3, [sp, #32]
 800f0ba:	2b00      	cmp	r3, #0
 800f0bc:	db04      	blt.n	800f0c8 <_dtoa_r+0xa30>
 800f0be:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f0c0:	430b      	orrs	r3, r1
 800f0c2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f0c4:	430b      	orrs	r3, r1
 800f0c6:	d120      	bne.n	800f10a <_dtoa_r+0xa72>
 800f0c8:	2a00      	cmp	r2, #0
 800f0ca:	dded      	ble.n	800f0a8 <_dtoa_r+0xa10>
 800f0cc:	4649      	mov	r1, r9
 800f0ce:	2201      	movs	r2, #1
 800f0d0:	4658      	mov	r0, fp
 800f0d2:	f000 fbff 	bl	800f8d4 <__lshift>
 800f0d6:	4621      	mov	r1, r4
 800f0d8:	4681      	mov	r9, r0
 800f0da:	f000 fc67 	bl	800f9ac <__mcmp>
 800f0de:	2800      	cmp	r0, #0
 800f0e0:	dc03      	bgt.n	800f0ea <_dtoa_r+0xa52>
 800f0e2:	d1e1      	bne.n	800f0a8 <_dtoa_r+0xa10>
 800f0e4:	f018 0f01 	tst.w	r8, #1
 800f0e8:	d0de      	beq.n	800f0a8 <_dtoa_r+0xa10>
 800f0ea:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800f0ee:	d1d8      	bne.n	800f0a2 <_dtoa_r+0xa0a>
 800f0f0:	2339      	movs	r3, #57	@ 0x39
 800f0f2:	9a00      	ldr	r2, [sp, #0]
 800f0f4:	7013      	strb	r3, [r2, #0]
 800f0f6:	4633      	mov	r3, r6
 800f0f8:	461e      	mov	r6, r3
 800f0fa:	3b01      	subs	r3, #1
 800f0fc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800f100:	2a39      	cmp	r2, #57	@ 0x39
 800f102:	d052      	beq.n	800f1aa <_dtoa_r+0xb12>
 800f104:	3201      	adds	r2, #1
 800f106:	701a      	strb	r2, [r3, #0]
 800f108:	e612      	b.n	800ed30 <_dtoa_r+0x698>
 800f10a:	2a00      	cmp	r2, #0
 800f10c:	dd07      	ble.n	800f11e <_dtoa_r+0xa86>
 800f10e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800f112:	d0ed      	beq.n	800f0f0 <_dtoa_r+0xa58>
 800f114:	f108 0301 	add.w	r3, r8, #1
 800f118:	9a00      	ldr	r2, [sp, #0]
 800f11a:	7013      	strb	r3, [r2, #0]
 800f11c:	e608      	b.n	800ed30 <_dtoa_r+0x698>
 800f11e:	9b07      	ldr	r3, [sp, #28]
 800f120:	9a07      	ldr	r2, [sp, #28]
 800f122:	f803 8c01 	strb.w	r8, [r3, #-1]
 800f126:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f128:	4293      	cmp	r3, r2
 800f12a:	d028      	beq.n	800f17e <_dtoa_r+0xae6>
 800f12c:	4649      	mov	r1, r9
 800f12e:	2300      	movs	r3, #0
 800f130:	220a      	movs	r2, #10
 800f132:	4658      	mov	r0, fp
 800f134:	f000 f9d6 	bl	800f4e4 <__multadd>
 800f138:	42af      	cmp	r7, r5
 800f13a:	4681      	mov	r9, r0
 800f13c:	f04f 0300 	mov.w	r3, #0
 800f140:	f04f 020a 	mov.w	r2, #10
 800f144:	4639      	mov	r1, r7
 800f146:	4658      	mov	r0, fp
 800f148:	d107      	bne.n	800f15a <_dtoa_r+0xac2>
 800f14a:	f000 f9cb 	bl	800f4e4 <__multadd>
 800f14e:	4607      	mov	r7, r0
 800f150:	4605      	mov	r5, r0
 800f152:	9b07      	ldr	r3, [sp, #28]
 800f154:	3301      	adds	r3, #1
 800f156:	9307      	str	r3, [sp, #28]
 800f158:	e774      	b.n	800f044 <_dtoa_r+0x9ac>
 800f15a:	f000 f9c3 	bl	800f4e4 <__multadd>
 800f15e:	4629      	mov	r1, r5
 800f160:	4607      	mov	r7, r0
 800f162:	2300      	movs	r3, #0
 800f164:	220a      	movs	r2, #10
 800f166:	4658      	mov	r0, fp
 800f168:	f000 f9bc 	bl	800f4e4 <__multadd>
 800f16c:	4605      	mov	r5, r0
 800f16e:	e7f0      	b.n	800f152 <_dtoa_r+0xaba>
 800f170:	9b00      	ldr	r3, [sp, #0]
 800f172:	2700      	movs	r7, #0
 800f174:	2b00      	cmp	r3, #0
 800f176:	bfcc      	ite	gt
 800f178:	461e      	movgt	r6, r3
 800f17a:	2601      	movle	r6, #1
 800f17c:	4456      	add	r6, sl
 800f17e:	4649      	mov	r1, r9
 800f180:	2201      	movs	r2, #1
 800f182:	4658      	mov	r0, fp
 800f184:	f000 fba6 	bl	800f8d4 <__lshift>
 800f188:	4621      	mov	r1, r4
 800f18a:	4681      	mov	r9, r0
 800f18c:	f000 fc0e 	bl	800f9ac <__mcmp>
 800f190:	2800      	cmp	r0, #0
 800f192:	dcb0      	bgt.n	800f0f6 <_dtoa_r+0xa5e>
 800f194:	d102      	bne.n	800f19c <_dtoa_r+0xb04>
 800f196:	f018 0f01 	tst.w	r8, #1
 800f19a:	d1ac      	bne.n	800f0f6 <_dtoa_r+0xa5e>
 800f19c:	4633      	mov	r3, r6
 800f19e:	461e      	mov	r6, r3
 800f1a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f1a4:	2a30      	cmp	r2, #48	@ 0x30
 800f1a6:	d0fa      	beq.n	800f19e <_dtoa_r+0xb06>
 800f1a8:	e5c2      	b.n	800ed30 <_dtoa_r+0x698>
 800f1aa:	459a      	cmp	sl, r3
 800f1ac:	d1a4      	bne.n	800f0f8 <_dtoa_r+0xa60>
 800f1ae:	9b04      	ldr	r3, [sp, #16]
 800f1b0:	3301      	adds	r3, #1
 800f1b2:	9304      	str	r3, [sp, #16]
 800f1b4:	2331      	movs	r3, #49	@ 0x31
 800f1b6:	f88a 3000 	strb.w	r3, [sl]
 800f1ba:	e5b9      	b.n	800ed30 <_dtoa_r+0x698>
 800f1bc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800f1be:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800f21c <_dtoa_r+0xb84>
 800f1c2:	b11b      	cbz	r3, 800f1cc <_dtoa_r+0xb34>
 800f1c4:	f10a 0308 	add.w	r3, sl, #8
 800f1c8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800f1ca:	6013      	str	r3, [r2, #0]
 800f1cc:	4650      	mov	r0, sl
 800f1ce:	b019      	add	sp, #100	@ 0x64
 800f1d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f1d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f1d6:	2b01      	cmp	r3, #1
 800f1d8:	f77f ae37 	ble.w	800ee4a <_dtoa_r+0x7b2>
 800f1dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f1de:	930a      	str	r3, [sp, #40]	@ 0x28
 800f1e0:	2001      	movs	r0, #1
 800f1e2:	e655      	b.n	800ee90 <_dtoa_r+0x7f8>
 800f1e4:	9b00      	ldr	r3, [sp, #0]
 800f1e6:	2b00      	cmp	r3, #0
 800f1e8:	f77f aed6 	ble.w	800ef98 <_dtoa_r+0x900>
 800f1ec:	4656      	mov	r6, sl
 800f1ee:	4621      	mov	r1, r4
 800f1f0:	4648      	mov	r0, r9
 800f1f2:	f7ff f9c3 	bl	800e57c <quorem>
 800f1f6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800f1fa:	9b00      	ldr	r3, [sp, #0]
 800f1fc:	f806 8b01 	strb.w	r8, [r6], #1
 800f200:	eba6 020a 	sub.w	r2, r6, sl
 800f204:	4293      	cmp	r3, r2
 800f206:	ddb3      	ble.n	800f170 <_dtoa_r+0xad8>
 800f208:	4649      	mov	r1, r9
 800f20a:	2300      	movs	r3, #0
 800f20c:	220a      	movs	r2, #10
 800f20e:	4658      	mov	r0, fp
 800f210:	f000 f968 	bl	800f4e4 <__multadd>
 800f214:	4681      	mov	r9, r0
 800f216:	e7ea      	b.n	800f1ee <_dtoa_r+0xb56>
 800f218:	08011e05 	.word	0x08011e05
 800f21c:	08011d89 	.word	0x08011d89

0800f220 <_free_r>:
 800f220:	b538      	push	{r3, r4, r5, lr}
 800f222:	4605      	mov	r5, r0
 800f224:	2900      	cmp	r1, #0
 800f226:	d041      	beq.n	800f2ac <_free_r+0x8c>
 800f228:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f22c:	1f0c      	subs	r4, r1, #4
 800f22e:	2b00      	cmp	r3, #0
 800f230:	bfb8      	it	lt
 800f232:	18e4      	addlt	r4, r4, r3
 800f234:	f000 f8e8 	bl	800f408 <__malloc_lock>
 800f238:	4a1d      	ldr	r2, [pc, #116]	@ (800f2b0 <_free_r+0x90>)
 800f23a:	6813      	ldr	r3, [r2, #0]
 800f23c:	b933      	cbnz	r3, 800f24c <_free_r+0x2c>
 800f23e:	6063      	str	r3, [r4, #4]
 800f240:	6014      	str	r4, [r2, #0]
 800f242:	4628      	mov	r0, r5
 800f244:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f248:	f000 b8e4 	b.w	800f414 <__malloc_unlock>
 800f24c:	42a3      	cmp	r3, r4
 800f24e:	d908      	bls.n	800f262 <_free_r+0x42>
 800f250:	6820      	ldr	r0, [r4, #0]
 800f252:	1821      	adds	r1, r4, r0
 800f254:	428b      	cmp	r3, r1
 800f256:	bf01      	itttt	eq
 800f258:	6819      	ldreq	r1, [r3, #0]
 800f25a:	685b      	ldreq	r3, [r3, #4]
 800f25c:	1809      	addeq	r1, r1, r0
 800f25e:	6021      	streq	r1, [r4, #0]
 800f260:	e7ed      	b.n	800f23e <_free_r+0x1e>
 800f262:	461a      	mov	r2, r3
 800f264:	685b      	ldr	r3, [r3, #4]
 800f266:	b10b      	cbz	r3, 800f26c <_free_r+0x4c>
 800f268:	42a3      	cmp	r3, r4
 800f26a:	d9fa      	bls.n	800f262 <_free_r+0x42>
 800f26c:	6811      	ldr	r1, [r2, #0]
 800f26e:	1850      	adds	r0, r2, r1
 800f270:	42a0      	cmp	r0, r4
 800f272:	d10b      	bne.n	800f28c <_free_r+0x6c>
 800f274:	6820      	ldr	r0, [r4, #0]
 800f276:	4401      	add	r1, r0
 800f278:	1850      	adds	r0, r2, r1
 800f27a:	6011      	str	r1, [r2, #0]
 800f27c:	4283      	cmp	r3, r0
 800f27e:	d1e0      	bne.n	800f242 <_free_r+0x22>
 800f280:	6818      	ldr	r0, [r3, #0]
 800f282:	685b      	ldr	r3, [r3, #4]
 800f284:	4408      	add	r0, r1
 800f286:	6053      	str	r3, [r2, #4]
 800f288:	6010      	str	r0, [r2, #0]
 800f28a:	e7da      	b.n	800f242 <_free_r+0x22>
 800f28c:	d902      	bls.n	800f294 <_free_r+0x74>
 800f28e:	230c      	movs	r3, #12
 800f290:	602b      	str	r3, [r5, #0]
 800f292:	e7d6      	b.n	800f242 <_free_r+0x22>
 800f294:	6820      	ldr	r0, [r4, #0]
 800f296:	1821      	adds	r1, r4, r0
 800f298:	428b      	cmp	r3, r1
 800f29a:	bf02      	ittt	eq
 800f29c:	6819      	ldreq	r1, [r3, #0]
 800f29e:	685b      	ldreq	r3, [r3, #4]
 800f2a0:	1809      	addeq	r1, r1, r0
 800f2a2:	6063      	str	r3, [r4, #4]
 800f2a4:	bf08      	it	eq
 800f2a6:	6021      	streq	r1, [r4, #0]
 800f2a8:	6054      	str	r4, [r2, #4]
 800f2aa:	e7ca      	b.n	800f242 <_free_r+0x22>
 800f2ac:	bd38      	pop	{r3, r4, r5, pc}
 800f2ae:	bf00      	nop
 800f2b0:	20000d24 	.word	0x20000d24

0800f2b4 <malloc>:
 800f2b4:	4b02      	ldr	r3, [pc, #8]	@ (800f2c0 <malloc+0xc>)
 800f2b6:	4601      	mov	r1, r0
 800f2b8:	6818      	ldr	r0, [r3, #0]
 800f2ba:	f000 b825 	b.w	800f308 <_malloc_r>
 800f2be:	bf00      	nop
 800f2c0:	20000018 	.word	0x20000018

0800f2c4 <sbrk_aligned>:
 800f2c4:	b570      	push	{r4, r5, r6, lr}
 800f2c6:	4e0f      	ldr	r6, [pc, #60]	@ (800f304 <sbrk_aligned+0x40>)
 800f2c8:	460c      	mov	r4, r1
 800f2ca:	4605      	mov	r5, r0
 800f2cc:	6831      	ldr	r1, [r6, #0]
 800f2ce:	b911      	cbnz	r1, 800f2d6 <sbrk_aligned+0x12>
 800f2d0:	f001 fe18 	bl	8010f04 <_sbrk_r>
 800f2d4:	6030      	str	r0, [r6, #0]
 800f2d6:	4621      	mov	r1, r4
 800f2d8:	4628      	mov	r0, r5
 800f2da:	f001 fe13 	bl	8010f04 <_sbrk_r>
 800f2de:	1c43      	adds	r3, r0, #1
 800f2e0:	d103      	bne.n	800f2ea <sbrk_aligned+0x26>
 800f2e2:	f04f 34ff 	mov.w	r4, #4294967295
 800f2e6:	4620      	mov	r0, r4
 800f2e8:	bd70      	pop	{r4, r5, r6, pc}
 800f2ea:	1cc4      	adds	r4, r0, #3
 800f2ec:	f024 0403 	bic.w	r4, r4, #3
 800f2f0:	42a0      	cmp	r0, r4
 800f2f2:	d0f8      	beq.n	800f2e6 <sbrk_aligned+0x22>
 800f2f4:	1a21      	subs	r1, r4, r0
 800f2f6:	4628      	mov	r0, r5
 800f2f8:	f001 fe04 	bl	8010f04 <_sbrk_r>
 800f2fc:	3001      	adds	r0, #1
 800f2fe:	d1f2      	bne.n	800f2e6 <sbrk_aligned+0x22>
 800f300:	e7ef      	b.n	800f2e2 <sbrk_aligned+0x1e>
 800f302:	bf00      	nop
 800f304:	20000d20 	.word	0x20000d20

0800f308 <_malloc_r>:
 800f308:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f30c:	1ccd      	adds	r5, r1, #3
 800f30e:	4606      	mov	r6, r0
 800f310:	f025 0503 	bic.w	r5, r5, #3
 800f314:	3508      	adds	r5, #8
 800f316:	2d0c      	cmp	r5, #12
 800f318:	bf38      	it	cc
 800f31a:	250c      	movcc	r5, #12
 800f31c:	2d00      	cmp	r5, #0
 800f31e:	db01      	blt.n	800f324 <_malloc_r+0x1c>
 800f320:	42a9      	cmp	r1, r5
 800f322:	d904      	bls.n	800f32e <_malloc_r+0x26>
 800f324:	230c      	movs	r3, #12
 800f326:	6033      	str	r3, [r6, #0]
 800f328:	2000      	movs	r0, #0
 800f32a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f32e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800f404 <_malloc_r+0xfc>
 800f332:	f000 f869 	bl	800f408 <__malloc_lock>
 800f336:	f8d8 3000 	ldr.w	r3, [r8]
 800f33a:	461c      	mov	r4, r3
 800f33c:	bb44      	cbnz	r4, 800f390 <_malloc_r+0x88>
 800f33e:	4629      	mov	r1, r5
 800f340:	4630      	mov	r0, r6
 800f342:	f7ff ffbf 	bl	800f2c4 <sbrk_aligned>
 800f346:	1c43      	adds	r3, r0, #1
 800f348:	4604      	mov	r4, r0
 800f34a:	d158      	bne.n	800f3fe <_malloc_r+0xf6>
 800f34c:	f8d8 4000 	ldr.w	r4, [r8]
 800f350:	4627      	mov	r7, r4
 800f352:	2f00      	cmp	r7, #0
 800f354:	d143      	bne.n	800f3de <_malloc_r+0xd6>
 800f356:	2c00      	cmp	r4, #0
 800f358:	d04b      	beq.n	800f3f2 <_malloc_r+0xea>
 800f35a:	6823      	ldr	r3, [r4, #0]
 800f35c:	4639      	mov	r1, r7
 800f35e:	4630      	mov	r0, r6
 800f360:	eb04 0903 	add.w	r9, r4, r3
 800f364:	f001 fdce 	bl	8010f04 <_sbrk_r>
 800f368:	4581      	cmp	r9, r0
 800f36a:	d142      	bne.n	800f3f2 <_malloc_r+0xea>
 800f36c:	6821      	ldr	r1, [r4, #0]
 800f36e:	4630      	mov	r0, r6
 800f370:	1a6d      	subs	r5, r5, r1
 800f372:	4629      	mov	r1, r5
 800f374:	f7ff ffa6 	bl	800f2c4 <sbrk_aligned>
 800f378:	3001      	adds	r0, #1
 800f37a:	d03a      	beq.n	800f3f2 <_malloc_r+0xea>
 800f37c:	6823      	ldr	r3, [r4, #0]
 800f37e:	442b      	add	r3, r5
 800f380:	6023      	str	r3, [r4, #0]
 800f382:	f8d8 3000 	ldr.w	r3, [r8]
 800f386:	685a      	ldr	r2, [r3, #4]
 800f388:	bb62      	cbnz	r2, 800f3e4 <_malloc_r+0xdc>
 800f38a:	f8c8 7000 	str.w	r7, [r8]
 800f38e:	e00f      	b.n	800f3b0 <_malloc_r+0xa8>
 800f390:	6822      	ldr	r2, [r4, #0]
 800f392:	1b52      	subs	r2, r2, r5
 800f394:	d420      	bmi.n	800f3d8 <_malloc_r+0xd0>
 800f396:	2a0b      	cmp	r2, #11
 800f398:	d917      	bls.n	800f3ca <_malloc_r+0xc2>
 800f39a:	1961      	adds	r1, r4, r5
 800f39c:	42a3      	cmp	r3, r4
 800f39e:	6025      	str	r5, [r4, #0]
 800f3a0:	bf18      	it	ne
 800f3a2:	6059      	strne	r1, [r3, #4]
 800f3a4:	6863      	ldr	r3, [r4, #4]
 800f3a6:	bf08      	it	eq
 800f3a8:	f8c8 1000 	streq.w	r1, [r8]
 800f3ac:	5162      	str	r2, [r4, r5]
 800f3ae:	604b      	str	r3, [r1, #4]
 800f3b0:	4630      	mov	r0, r6
 800f3b2:	f000 f82f 	bl	800f414 <__malloc_unlock>
 800f3b6:	f104 000b 	add.w	r0, r4, #11
 800f3ba:	1d23      	adds	r3, r4, #4
 800f3bc:	f020 0007 	bic.w	r0, r0, #7
 800f3c0:	1ac2      	subs	r2, r0, r3
 800f3c2:	bf1c      	itt	ne
 800f3c4:	1a1b      	subne	r3, r3, r0
 800f3c6:	50a3      	strne	r3, [r4, r2]
 800f3c8:	e7af      	b.n	800f32a <_malloc_r+0x22>
 800f3ca:	6862      	ldr	r2, [r4, #4]
 800f3cc:	42a3      	cmp	r3, r4
 800f3ce:	bf0c      	ite	eq
 800f3d0:	f8c8 2000 	streq.w	r2, [r8]
 800f3d4:	605a      	strne	r2, [r3, #4]
 800f3d6:	e7eb      	b.n	800f3b0 <_malloc_r+0xa8>
 800f3d8:	4623      	mov	r3, r4
 800f3da:	6864      	ldr	r4, [r4, #4]
 800f3dc:	e7ae      	b.n	800f33c <_malloc_r+0x34>
 800f3de:	463c      	mov	r4, r7
 800f3e0:	687f      	ldr	r7, [r7, #4]
 800f3e2:	e7b6      	b.n	800f352 <_malloc_r+0x4a>
 800f3e4:	461a      	mov	r2, r3
 800f3e6:	685b      	ldr	r3, [r3, #4]
 800f3e8:	42a3      	cmp	r3, r4
 800f3ea:	d1fb      	bne.n	800f3e4 <_malloc_r+0xdc>
 800f3ec:	2300      	movs	r3, #0
 800f3ee:	6053      	str	r3, [r2, #4]
 800f3f0:	e7de      	b.n	800f3b0 <_malloc_r+0xa8>
 800f3f2:	230c      	movs	r3, #12
 800f3f4:	4630      	mov	r0, r6
 800f3f6:	6033      	str	r3, [r6, #0]
 800f3f8:	f000 f80c 	bl	800f414 <__malloc_unlock>
 800f3fc:	e794      	b.n	800f328 <_malloc_r+0x20>
 800f3fe:	6005      	str	r5, [r0, #0]
 800f400:	e7d6      	b.n	800f3b0 <_malloc_r+0xa8>
 800f402:	bf00      	nop
 800f404:	20000d24 	.word	0x20000d24

0800f408 <__malloc_lock>:
 800f408:	4801      	ldr	r0, [pc, #4]	@ (800f410 <__malloc_lock+0x8>)
 800f40a:	f7ff b8a0 	b.w	800e54e <__retarget_lock_acquire_recursive>
 800f40e:	bf00      	nop
 800f410:	20000d1c 	.word	0x20000d1c

0800f414 <__malloc_unlock>:
 800f414:	4801      	ldr	r0, [pc, #4]	@ (800f41c <__malloc_unlock+0x8>)
 800f416:	f7ff b89b 	b.w	800e550 <__retarget_lock_release_recursive>
 800f41a:	bf00      	nop
 800f41c:	20000d1c 	.word	0x20000d1c

0800f420 <_Balloc>:
 800f420:	b570      	push	{r4, r5, r6, lr}
 800f422:	69c6      	ldr	r6, [r0, #28]
 800f424:	4604      	mov	r4, r0
 800f426:	460d      	mov	r5, r1
 800f428:	b976      	cbnz	r6, 800f448 <_Balloc+0x28>
 800f42a:	2010      	movs	r0, #16
 800f42c:	f7ff ff42 	bl	800f2b4 <malloc>
 800f430:	4602      	mov	r2, r0
 800f432:	61e0      	str	r0, [r4, #28]
 800f434:	b920      	cbnz	r0, 800f440 <_Balloc+0x20>
 800f436:	4b18      	ldr	r3, [pc, #96]	@ (800f498 <_Balloc+0x78>)
 800f438:	216b      	movs	r1, #107	@ 0x6b
 800f43a:	4818      	ldr	r0, [pc, #96]	@ (800f49c <_Balloc+0x7c>)
 800f43c:	f001 fd88 	bl	8010f50 <__assert_func>
 800f440:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f444:	6006      	str	r6, [r0, #0]
 800f446:	60c6      	str	r6, [r0, #12]
 800f448:	69e6      	ldr	r6, [r4, #28]
 800f44a:	68f3      	ldr	r3, [r6, #12]
 800f44c:	b183      	cbz	r3, 800f470 <_Balloc+0x50>
 800f44e:	69e3      	ldr	r3, [r4, #28]
 800f450:	68db      	ldr	r3, [r3, #12]
 800f452:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f456:	b9b8      	cbnz	r0, 800f488 <_Balloc+0x68>
 800f458:	2101      	movs	r1, #1
 800f45a:	4620      	mov	r0, r4
 800f45c:	fa01 f605 	lsl.w	r6, r1, r5
 800f460:	1d72      	adds	r2, r6, #5
 800f462:	0092      	lsls	r2, r2, #2
 800f464:	f001 fd92 	bl	8010f8c <_calloc_r>
 800f468:	b160      	cbz	r0, 800f484 <_Balloc+0x64>
 800f46a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f46e:	e00e      	b.n	800f48e <_Balloc+0x6e>
 800f470:	2221      	movs	r2, #33	@ 0x21
 800f472:	2104      	movs	r1, #4
 800f474:	4620      	mov	r0, r4
 800f476:	f001 fd89 	bl	8010f8c <_calloc_r>
 800f47a:	69e3      	ldr	r3, [r4, #28]
 800f47c:	60f0      	str	r0, [r6, #12]
 800f47e:	68db      	ldr	r3, [r3, #12]
 800f480:	2b00      	cmp	r3, #0
 800f482:	d1e4      	bne.n	800f44e <_Balloc+0x2e>
 800f484:	2000      	movs	r0, #0
 800f486:	bd70      	pop	{r4, r5, r6, pc}
 800f488:	6802      	ldr	r2, [r0, #0]
 800f48a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f48e:	2300      	movs	r3, #0
 800f490:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f494:	e7f7      	b.n	800f486 <_Balloc+0x66>
 800f496:	bf00      	nop
 800f498:	08011d96 	.word	0x08011d96
 800f49c:	08011e16 	.word	0x08011e16

0800f4a0 <_Bfree>:
 800f4a0:	b570      	push	{r4, r5, r6, lr}
 800f4a2:	69c6      	ldr	r6, [r0, #28]
 800f4a4:	4605      	mov	r5, r0
 800f4a6:	460c      	mov	r4, r1
 800f4a8:	b976      	cbnz	r6, 800f4c8 <_Bfree+0x28>
 800f4aa:	2010      	movs	r0, #16
 800f4ac:	f7ff ff02 	bl	800f2b4 <malloc>
 800f4b0:	4602      	mov	r2, r0
 800f4b2:	61e8      	str	r0, [r5, #28]
 800f4b4:	b920      	cbnz	r0, 800f4c0 <_Bfree+0x20>
 800f4b6:	4b09      	ldr	r3, [pc, #36]	@ (800f4dc <_Bfree+0x3c>)
 800f4b8:	218f      	movs	r1, #143	@ 0x8f
 800f4ba:	4809      	ldr	r0, [pc, #36]	@ (800f4e0 <_Bfree+0x40>)
 800f4bc:	f001 fd48 	bl	8010f50 <__assert_func>
 800f4c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f4c4:	6006      	str	r6, [r0, #0]
 800f4c6:	60c6      	str	r6, [r0, #12]
 800f4c8:	b13c      	cbz	r4, 800f4da <_Bfree+0x3a>
 800f4ca:	69eb      	ldr	r3, [r5, #28]
 800f4cc:	6862      	ldr	r2, [r4, #4]
 800f4ce:	68db      	ldr	r3, [r3, #12]
 800f4d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f4d4:	6021      	str	r1, [r4, #0]
 800f4d6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f4da:	bd70      	pop	{r4, r5, r6, pc}
 800f4dc:	08011d96 	.word	0x08011d96
 800f4e0:	08011e16 	.word	0x08011e16

0800f4e4 <__multadd>:
 800f4e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f4e8:	f101 0c14 	add.w	ip, r1, #20
 800f4ec:	4607      	mov	r7, r0
 800f4ee:	460c      	mov	r4, r1
 800f4f0:	461e      	mov	r6, r3
 800f4f2:	690d      	ldr	r5, [r1, #16]
 800f4f4:	2000      	movs	r0, #0
 800f4f6:	f8dc 3000 	ldr.w	r3, [ip]
 800f4fa:	3001      	adds	r0, #1
 800f4fc:	b299      	uxth	r1, r3
 800f4fe:	4285      	cmp	r5, r0
 800f500:	fb02 6101 	mla	r1, r2, r1, r6
 800f504:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f508:	ea4f 4311 	mov.w	r3, r1, lsr #16
 800f50c:	b289      	uxth	r1, r1
 800f50e:	fb02 3306 	mla	r3, r2, r6, r3
 800f512:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f516:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f51a:	f84c 1b04 	str.w	r1, [ip], #4
 800f51e:	dcea      	bgt.n	800f4f6 <__multadd+0x12>
 800f520:	b30e      	cbz	r6, 800f566 <__multadd+0x82>
 800f522:	68a3      	ldr	r3, [r4, #8]
 800f524:	42ab      	cmp	r3, r5
 800f526:	dc19      	bgt.n	800f55c <__multadd+0x78>
 800f528:	6861      	ldr	r1, [r4, #4]
 800f52a:	4638      	mov	r0, r7
 800f52c:	3101      	adds	r1, #1
 800f52e:	f7ff ff77 	bl	800f420 <_Balloc>
 800f532:	4680      	mov	r8, r0
 800f534:	b928      	cbnz	r0, 800f542 <__multadd+0x5e>
 800f536:	4602      	mov	r2, r0
 800f538:	4b0c      	ldr	r3, [pc, #48]	@ (800f56c <__multadd+0x88>)
 800f53a:	21ba      	movs	r1, #186	@ 0xba
 800f53c:	480c      	ldr	r0, [pc, #48]	@ (800f570 <__multadd+0x8c>)
 800f53e:	f001 fd07 	bl	8010f50 <__assert_func>
 800f542:	6922      	ldr	r2, [r4, #16]
 800f544:	f104 010c 	add.w	r1, r4, #12
 800f548:	300c      	adds	r0, #12
 800f54a:	3202      	adds	r2, #2
 800f54c:	0092      	lsls	r2, r2, #2
 800f54e:	f001 fce9 	bl	8010f24 <memcpy>
 800f552:	4621      	mov	r1, r4
 800f554:	4644      	mov	r4, r8
 800f556:	4638      	mov	r0, r7
 800f558:	f7ff ffa2 	bl	800f4a0 <_Bfree>
 800f55c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f560:	3501      	adds	r5, #1
 800f562:	615e      	str	r6, [r3, #20]
 800f564:	6125      	str	r5, [r4, #16]
 800f566:	4620      	mov	r0, r4
 800f568:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f56c:	08011e05 	.word	0x08011e05
 800f570:	08011e16 	.word	0x08011e16

0800f574 <__s2b>:
 800f574:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f578:	4615      	mov	r5, r2
 800f57a:	461f      	mov	r7, r3
 800f57c:	2209      	movs	r2, #9
 800f57e:	3308      	adds	r3, #8
 800f580:	460c      	mov	r4, r1
 800f582:	4606      	mov	r6, r0
 800f584:	2100      	movs	r1, #0
 800f586:	fb93 f3f2 	sdiv	r3, r3, r2
 800f58a:	2201      	movs	r2, #1
 800f58c:	429a      	cmp	r2, r3
 800f58e:	db09      	blt.n	800f5a4 <__s2b+0x30>
 800f590:	4630      	mov	r0, r6
 800f592:	f7ff ff45 	bl	800f420 <_Balloc>
 800f596:	b940      	cbnz	r0, 800f5aa <__s2b+0x36>
 800f598:	4602      	mov	r2, r0
 800f59a:	4b19      	ldr	r3, [pc, #100]	@ (800f600 <__s2b+0x8c>)
 800f59c:	21d3      	movs	r1, #211	@ 0xd3
 800f59e:	4819      	ldr	r0, [pc, #100]	@ (800f604 <__s2b+0x90>)
 800f5a0:	f001 fcd6 	bl	8010f50 <__assert_func>
 800f5a4:	0052      	lsls	r2, r2, #1
 800f5a6:	3101      	adds	r1, #1
 800f5a8:	e7f0      	b.n	800f58c <__s2b+0x18>
 800f5aa:	9b08      	ldr	r3, [sp, #32]
 800f5ac:	2d09      	cmp	r5, #9
 800f5ae:	6143      	str	r3, [r0, #20]
 800f5b0:	f04f 0301 	mov.w	r3, #1
 800f5b4:	6103      	str	r3, [r0, #16]
 800f5b6:	dd16      	ble.n	800f5e6 <__s2b+0x72>
 800f5b8:	f104 0909 	add.w	r9, r4, #9
 800f5bc:	442c      	add	r4, r5
 800f5be:	46c8      	mov	r8, r9
 800f5c0:	f818 3b01 	ldrb.w	r3, [r8], #1
 800f5c4:	4601      	mov	r1, r0
 800f5c6:	220a      	movs	r2, #10
 800f5c8:	4630      	mov	r0, r6
 800f5ca:	3b30      	subs	r3, #48	@ 0x30
 800f5cc:	f7ff ff8a 	bl	800f4e4 <__multadd>
 800f5d0:	45a0      	cmp	r8, r4
 800f5d2:	d1f5      	bne.n	800f5c0 <__s2b+0x4c>
 800f5d4:	f1a5 0408 	sub.w	r4, r5, #8
 800f5d8:	444c      	add	r4, r9
 800f5da:	1b2d      	subs	r5, r5, r4
 800f5dc:	1963      	adds	r3, r4, r5
 800f5de:	42bb      	cmp	r3, r7
 800f5e0:	db04      	blt.n	800f5ec <__s2b+0x78>
 800f5e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f5e6:	340a      	adds	r4, #10
 800f5e8:	2509      	movs	r5, #9
 800f5ea:	e7f6      	b.n	800f5da <__s2b+0x66>
 800f5ec:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f5f0:	4601      	mov	r1, r0
 800f5f2:	220a      	movs	r2, #10
 800f5f4:	4630      	mov	r0, r6
 800f5f6:	3b30      	subs	r3, #48	@ 0x30
 800f5f8:	f7ff ff74 	bl	800f4e4 <__multadd>
 800f5fc:	e7ee      	b.n	800f5dc <__s2b+0x68>
 800f5fe:	bf00      	nop
 800f600:	08011e05 	.word	0x08011e05
 800f604:	08011e16 	.word	0x08011e16

0800f608 <__hi0bits>:
 800f608:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800f60c:	4603      	mov	r3, r0
 800f60e:	bf36      	itet	cc
 800f610:	0403      	lslcc	r3, r0, #16
 800f612:	2000      	movcs	r0, #0
 800f614:	2010      	movcc	r0, #16
 800f616:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800f61a:	bf3c      	itt	cc
 800f61c:	021b      	lslcc	r3, r3, #8
 800f61e:	3008      	addcc	r0, #8
 800f620:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f624:	bf3c      	itt	cc
 800f626:	011b      	lslcc	r3, r3, #4
 800f628:	3004      	addcc	r0, #4
 800f62a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f62e:	bf3c      	itt	cc
 800f630:	009b      	lslcc	r3, r3, #2
 800f632:	3002      	addcc	r0, #2
 800f634:	2b00      	cmp	r3, #0
 800f636:	db05      	blt.n	800f644 <__hi0bits+0x3c>
 800f638:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800f63c:	f100 0001 	add.w	r0, r0, #1
 800f640:	bf08      	it	eq
 800f642:	2020      	moveq	r0, #32
 800f644:	4770      	bx	lr

0800f646 <__lo0bits>:
 800f646:	6803      	ldr	r3, [r0, #0]
 800f648:	4602      	mov	r2, r0
 800f64a:	f013 0007 	ands.w	r0, r3, #7
 800f64e:	d00b      	beq.n	800f668 <__lo0bits+0x22>
 800f650:	07d9      	lsls	r1, r3, #31
 800f652:	d421      	bmi.n	800f698 <__lo0bits+0x52>
 800f654:	0798      	lsls	r0, r3, #30
 800f656:	bf47      	ittee	mi
 800f658:	085b      	lsrmi	r3, r3, #1
 800f65a:	2001      	movmi	r0, #1
 800f65c:	089b      	lsrpl	r3, r3, #2
 800f65e:	2002      	movpl	r0, #2
 800f660:	bf4c      	ite	mi
 800f662:	6013      	strmi	r3, [r2, #0]
 800f664:	6013      	strpl	r3, [r2, #0]
 800f666:	4770      	bx	lr
 800f668:	b299      	uxth	r1, r3
 800f66a:	b909      	cbnz	r1, 800f670 <__lo0bits+0x2a>
 800f66c:	0c1b      	lsrs	r3, r3, #16
 800f66e:	2010      	movs	r0, #16
 800f670:	b2d9      	uxtb	r1, r3
 800f672:	b909      	cbnz	r1, 800f678 <__lo0bits+0x32>
 800f674:	3008      	adds	r0, #8
 800f676:	0a1b      	lsrs	r3, r3, #8
 800f678:	0719      	lsls	r1, r3, #28
 800f67a:	bf04      	itt	eq
 800f67c:	091b      	lsreq	r3, r3, #4
 800f67e:	3004      	addeq	r0, #4
 800f680:	0799      	lsls	r1, r3, #30
 800f682:	bf04      	itt	eq
 800f684:	089b      	lsreq	r3, r3, #2
 800f686:	3002      	addeq	r0, #2
 800f688:	07d9      	lsls	r1, r3, #31
 800f68a:	d403      	bmi.n	800f694 <__lo0bits+0x4e>
 800f68c:	085b      	lsrs	r3, r3, #1
 800f68e:	f100 0001 	add.w	r0, r0, #1
 800f692:	d003      	beq.n	800f69c <__lo0bits+0x56>
 800f694:	6013      	str	r3, [r2, #0]
 800f696:	4770      	bx	lr
 800f698:	2000      	movs	r0, #0
 800f69a:	4770      	bx	lr
 800f69c:	2020      	movs	r0, #32
 800f69e:	4770      	bx	lr

0800f6a0 <__i2b>:
 800f6a0:	b510      	push	{r4, lr}
 800f6a2:	460c      	mov	r4, r1
 800f6a4:	2101      	movs	r1, #1
 800f6a6:	f7ff febb 	bl	800f420 <_Balloc>
 800f6aa:	4602      	mov	r2, r0
 800f6ac:	b928      	cbnz	r0, 800f6ba <__i2b+0x1a>
 800f6ae:	4b05      	ldr	r3, [pc, #20]	@ (800f6c4 <__i2b+0x24>)
 800f6b0:	f240 1145 	movw	r1, #325	@ 0x145
 800f6b4:	4804      	ldr	r0, [pc, #16]	@ (800f6c8 <__i2b+0x28>)
 800f6b6:	f001 fc4b 	bl	8010f50 <__assert_func>
 800f6ba:	2301      	movs	r3, #1
 800f6bc:	6144      	str	r4, [r0, #20]
 800f6be:	6103      	str	r3, [r0, #16]
 800f6c0:	bd10      	pop	{r4, pc}
 800f6c2:	bf00      	nop
 800f6c4:	08011e05 	.word	0x08011e05
 800f6c8:	08011e16 	.word	0x08011e16

0800f6cc <__multiply>:
 800f6cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6d0:	4614      	mov	r4, r2
 800f6d2:	690a      	ldr	r2, [r1, #16]
 800f6d4:	460f      	mov	r7, r1
 800f6d6:	b085      	sub	sp, #20
 800f6d8:	6923      	ldr	r3, [r4, #16]
 800f6da:	429a      	cmp	r2, r3
 800f6dc:	bfa2      	ittt	ge
 800f6de:	4623      	movge	r3, r4
 800f6e0:	460c      	movge	r4, r1
 800f6e2:	461f      	movge	r7, r3
 800f6e4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800f6e8:	68a3      	ldr	r3, [r4, #8]
 800f6ea:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800f6ee:	6861      	ldr	r1, [r4, #4]
 800f6f0:	eb0a 0609 	add.w	r6, sl, r9
 800f6f4:	42b3      	cmp	r3, r6
 800f6f6:	bfb8      	it	lt
 800f6f8:	3101      	addlt	r1, #1
 800f6fa:	f7ff fe91 	bl	800f420 <_Balloc>
 800f6fe:	b930      	cbnz	r0, 800f70e <__multiply+0x42>
 800f700:	4602      	mov	r2, r0
 800f702:	4b45      	ldr	r3, [pc, #276]	@ (800f818 <__multiply+0x14c>)
 800f704:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800f708:	4844      	ldr	r0, [pc, #272]	@ (800f81c <__multiply+0x150>)
 800f70a:	f001 fc21 	bl	8010f50 <__assert_func>
 800f70e:	f100 0514 	add.w	r5, r0, #20
 800f712:	2200      	movs	r2, #0
 800f714:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800f718:	462b      	mov	r3, r5
 800f71a:	4543      	cmp	r3, r8
 800f71c:	d321      	bcc.n	800f762 <__multiply+0x96>
 800f71e:	f107 0114 	add.w	r1, r7, #20
 800f722:	f104 0214 	add.w	r2, r4, #20
 800f726:	f104 0715 	add.w	r7, r4, #21
 800f72a:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800f72e:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800f732:	9302      	str	r3, [sp, #8]
 800f734:	1b13      	subs	r3, r2, r4
 800f736:	3b15      	subs	r3, #21
 800f738:	f023 0303 	bic.w	r3, r3, #3
 800f73c:	3304      	adds	r3, #4
 800f73e:	42ba      	cmp	r2, r7
 800f740:	bf38      	it	cc
 800f742:	2304      	movcc	r3, #4
 800f744:	9301      	str	r3, [sp, #4]
 800f746:	9b02      	ldr	r3, [sp, #8]
 800f748:	9103      	str	r1, [sp, #12]
 800f74a:	428b      	cmp	r3, r1
 800f74c:	d80c      	bhi.n	800f768 <__multiply+0x9c>
 800f74e:	2e00      	cmp	r6, #0
 800f750:	dd03      	ble.n	800f75a <__multiply+0x8e>
 800f752:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f756:	2b00      	cmp	r3, #0
 800f758:	d05b      	beq.n	800f812 <__multiply+0x146>
 800f75a:	6106      	str	r6, [r0, #16]
 800f75c:	b005      	add	sp, #20
 800f75e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f762:	f843 2b04 	str.w	r2, [r3], #4
 800f766:	e7d8      	b.n	800f71a <__multiply+0x4e>
 800f768:	f8b1 a000 	ldrh.w	sl, [r1]
 800f76c:	f1ba 0f00 	cmp.w	sl, #0
 800f770:	d024      	beq.n	800f7bc <__multiply+0xf0>
 800f772:	f104 0e14 	add.w	lr, r4, #20
 800f776:	46a9      	mov	r9, r5
 800f778:	f04f 0c00 	mov.w	ip, #0
 800f77c:	f85e 7b04 	ldr.w	r7, [lr], #4
 800f780:	f8d9 3000 	ldr.w	r3, [r9]
 800f784:	fa1f fb87 	uxth.w	fp, r7
 800f788:	4572      	cmp	r2, lr
 800f78a:	b29b      	uxth	r3, r3
 800f78c:	fb0a 330b 	mla	r3, sl, fp, r3
 800f790:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800f794:	f8d9 7000 	ldr.w	r7, [r9]
 800f798:	4463      	add	r3, ip
 800f79a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800f79e:	fb0a c70b 	mla	r7, sl, fp, ip
 800f7a2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800f7a6:	b29b      	uxth	r3, r3
 800f7a8:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800f7ac:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800f7b0:	f849 3b04 	str.w	r3, [r9], #4
 800f7b4:	d8e2      	bhi.n	800f77c <__multiply+0xb0>
 800f7b6:	9b01      	ldr	r3, [sp, #4]
 800f7b8:	f845 c003 	str.w	ip, [r5, r3]
 800f7bc:	9b03      	ldr	r3, [sp, #12]
 800f7be:	3104      	adds	r1, #4
 800f7c0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800f7c4:	f1b9 0f00 	cmp.w	r9, #0
 800f7c8:	d021      	beq.n	800f80e <__multiply+0x142>
 800f7ca:	682b      	ldr	r3, [r5, #0]
 800f7cc:	f104 0c14 	add.w	ip, r4, #20
 800f7d0:	46ae      	mov	lr, r5
 800f7d2:	f04f 0a00 	mov.w	sl, #0
 800f7d6:	f8bc b000 	ldrh.w	fp, [ip]
 800f7da:	b29b      	uxth	r3, r3
 800f7dc:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800f7e0:	fb09 770b 	mla	r7, r9, fp, r7
 800f7e4:	4457      	add	r7, sl
 800f7e6:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800f7ea:	f84e 3b04 	str.w	r3, [lr], #4
 800f7ee:	f85c 3b04 	ldr.w	r3, [ip], #4
 800f7f2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f7f6:	f8be 3000 	ldrh.w	r3, [lr]
 800f7fa:	4562      	cmp	r2, ip
 800f7fc:	fb09 330a 	mla	r3, r9, sl, r3
 800f800:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800f804:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f808:	d8e5      	bhi.n	800f7d6 <__multiply+0x10a>
 800f80a:	9f01      	ldr	r7, [sp, #4]
 800f80c:	51eb      	str	r3, [r5, r7]
 800f80e:	3504      	adds	r5, #4
 800f810:	e799      	b.n	800f746 <__multiply+0x7a>
 800f812:	3e01      	subs	r6, #1
 800f814:	e79b      	b.n	800f74e <__multiply+0x82>
 800f816:	bf00      	nop
 800f818:	08011e05 	.word	0x08011e05
 800f81c:	08011e16 	.word	0x08011e16

0800f820 <__pow5mult>:
 800f820:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f824:	4615      	mov	r5, r2
 800f826:	f012 0203 	ands.w	r2, r2, #3
 800f82a:	4607      	mov	r7, r0
 800f82c:	460e      	mov	r6, r1
 800f82e:	d007      	beq.n	800f840 <__pow5mult+0x20>
 800f830:	3a01      	subs	r2, #1
 800f832:	4c25      	ldr	r4, [pc, #148]	@ (800f8c8 <__pow5mult+0xa8>)
 800f834:	2300      	movs	r3, #0
 800f836:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f83a:	f7ff fe53 	bl	800f4e4 <__multadd>
 800f83e:	4606      	mov	r6, r0
 800f840:	10ad      	asrs	r5, r5, #2
 800f842:	d03d      	beq.n	800f8c0 <__pow5mult+0xa0>
 800f844:	69fc      	ldr	r4, [r7, #28]
 800f846:	b97c      	cbnz	r4, 800f868 <__pow5mult+0x48>
 800f848:	2010      	movs	r0, #16
 800f84a:	f7ff fd33 	bl	800f2b4 <malloc>
 800f84e:	4602      	mov	r2, r0
 800f850:	61f8      	str	r0, [r7, #28]
 800f852:	b928      	cbnz	r0, 800f860 <__pow5mult+0x40>
 800f854:	4b1d      	ldr	r3, [pc, #116]	@ (800f8cc <__pow5mult+0xac>)
 800f856:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800f85a:	481d      	ldr	r0, [pc, #116]	@ (800f8d0 <__pow5mult+0xb0>)
 800f85c:	f001 fb78 	bl	8010f50 <__assert_func>
 800f860:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f864:	6004      	str	r4, [r0, #0]
 800f866:	60c4      	str	r4, [r0, #12]
 800f868:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800f86c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f870:	b94c      	cbnz	r4, 800f886 <__pow5mult+0x66>
 800f872:	f240 2171 	movw	r1, #625	@ 0x271
 800f876:	4638      	mov	r0, r7
 800f878:	f7ff ff12 	bl	800f6a0 <__i2b>
 800f87c:	2300      	movs	r3, #0
 800f87e:	4604      	mov	r4, r0
 800f880:	f8c8 0008 	str.w	r0, [r8, #8]
 800f884:	6003      	str	r3, [r0, #0]
 800f886:	f04f 0900 	mov.w	r9, #0
 800f88a:	07eb      	lsls	r3, r5, #31
 800f88c:	d50a      	bpl.n	800f8a4 <__pow5mult+0x84>
 800f88e:	4631      	mov	r1, r6
 800f890:	4622      	mov	r2, r4
 800f892:	4638      	mov	r0, r7
 800f894:	f7ff ff1a 	bl	800f6cc <__multiply>
 800f898:	4680      	mov	r8, r0
 800f89a:	4631      	mov	r1, r6
 800f89c:	4638      	mov	r0, r7
 800f89e:	4646      	mov	r6, r8
 800f8a0:	f7ff fdfe 	bl	800f4a0 <_Bfree>
 800f8a4:	106d      	asrs	r5, r5, #1
 800f8a6:	d00b      	beq.n	800f8c0 <__pow5mult+0xa0>
 800f8a8:	6820      	ldr	r0, [r4, #0]
 800f8aa:	b938      	cbnz	r0, 800f8bc <__pow5mult+0x9c>
 800f8ac:	4622      	mov	r2, r4
 800f8ae:	4621      	mov	r1, r4
 800f8b0:	4638      	mov	r0, r7
 800f8b2:	f7ff ff0b 	bl	800f6cc <__multiply>
 800f8b6:	6020      	str	r0, [r4, #0]
 800f8b8:	f8c0 9000 	str.w	r9, [r0]
 800f8bc:	4604      	mov	r4, r0
 800f8be:	e7e4      	b.n	800f88a <__pow5mult+0x6a>
 800f8c0:	4630      	mov	r0, r6
 800f8c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f8c6:	bf00      	nop
 800f8c8:	08011e70 	.word	0x08011e70
 800f8cc:	08011d96 	.word	0x08011d96
 800f8d0:	08011e16 	.word	0x08011e16

0800f8d4 <__lshift>:
 800f8d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f8d8:	460c      	mov	r4, r1
 800f8da:	4607      	mov	r7, r0
 800f8dc:	4691      	mov	r9, r2
 800f8de:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f8e2:	6923      	ldr	r3, [r4, #16]
 800f8e4:	6849      	ldr	r1, [r1, #4]
 800f8e6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f8ea:	68a3      	ldr	r3, [r4, #8]
 800f8ec:	f108 0601 	add.w	r6, r8, #1
 800f8f0:	42b3      	cmp	r3, r6
 800f8f2:	db0b      	blt.n	800f90c <__lshift+0x38>
 800f8f4:	4638      	mov	r0, r7
 800f8f6:	f7ff fd93 	bl	800f420 <_Balloc>
 800f8fa:	4605      	mov	r5, r0
 800f8fc:	b948      	cbnz	r0, 800f912 <__lshift+0x3e>
 800f8fe:	4602      	mov	r2, r0
 800f900:	4b28      	ldr	r3, [pc, #160]	@ (800f9a4 <__lshift+0xd0>)
 800f902:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800f906:	4828      	ldr	r0, [pc, #160]	@ (800f9a8 <__lshift+0xd4>)
 800f908:	f001 fb22 	bl	8010f50 <__assert_func>
 800f90c:	3101      	adds	r1, #1
 800f90e:	005b      	lsls	r3, r3, #1
 800f910:	e7ee      	b.n	800f8f0 <__lshift+0x1c>
 800f912:	2300      	movs	r3, #0
 800f914:	f100 0114 	add.w	r1, r0, #20
 800f918:	f100 0210 	add.w	r2, r0, #16
 800f91c:	4618      	mov	r0, r3
 800f91e:	4553      	cmp	r3, sl
 800f920:	db33      	blt.n	800f98a <__lshift+0xb6>
 800f922:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f926:	f104 0314 	add.w	r3, r4, #20
 800f92a:	6920      	ldr	r0, [r4, #16]
 800f92c:	f019 091f 	ands.w	r9, r9, #31
 800f930:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f934:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800f938:	d02b      	beq.n	800f992 <__lshift+0xbe>
 800f93a:	f1c9 0e20 	rsb	lr, r9, #32
 800f93e:	468a      	mov	sl, r1
 800f940:	2200      	movs	r2, #0
 800f942:	6818      	ldr	r0, [r3, #0]
 800f944:	fa00 f009 	lsl.w	r0, r0, r9
 800f948:	4310      	orrs	r0, r2
 800f94a:	f84a 0b04 	str.w	r0, [sl], #4
 800f94e:	f853 2b04 	ldr.w	r2, [r3], #4
 800f952:	459c      	cmp	ip, r3
 800f954:	fa22 f20e 	lsr.w	r2, r2, lr
 800f958:	d8f3      	bhi.n	800f942 <__lshift+0x6e>
 800f95a:	ebac 0304 	sub.w	r3, ip, r4
 800f95e:	f104 0015 	add.w	r0, r4, #21
 800f962:	3b15      	subs	r3, #21
 800f964:	f023 0303 	bic.w	r3, r3, #3
 800f968:	3304      	adds	r3, #4
 800f96a:	4584      	cmp	ip, r0
 800f96c:	bf38      	it	cc
 800f96e:	2304      	movcc	r3, #4
 800f970:	50ca      	str	r2, [r1, r3]
 800f972:	b10a      	cbz	r2, 800f978 <__lshift+0xa4>
 800f974:	f108 0602 	add.w	r6, r8, #2
 800f978:	3e01      	subs	r6, #1
 800f97a:	4638      	mov	r0, r7
 800f97c:	4621      	mov	r1, r4
 800f97e:	612e      	str	r6, [r5, #16]
 800f980:	f7ff fd8e 	bl	800f4a0 <_Bfree>
 800f984:	4628      	mov	r0, r5
 800f986:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f98a:	3301      	adds	r3, #1
 800f98c:	f842 0f04 	str.w	r0, [r2, #4]!
 800f990:	e7c5      	b.n	800f91e <__lshift+0x4a>
 800f992:	3904      	subs	r1, #4
 800f994:	f853 2b04 	ldr.w	r2, [r3], #4
 800f998:	459c      	cmp	ip, r3
 800f99a:	f841 2f04 	str.w	r2, [r1, #4]!
 800f99e:	d8f9      	bhi.n	800f994 <__lshift+0xc0>
 800f9a0:	e7ea      	b.n	800f978 <__lshift+0xa4>
 800f9a2:	bf00      	nop
 800f9a4:	08011e05 	.word	0x08011e05
 800f9a8:	08011e16 	.word	0x08011e16

0800f9ac <__mcmp>:
 800f9ac:	4603      	mov	r3, r0
 800f9ae:	690a      	ldr	r2, [r1, #16]
 800f9b0:	6900      	ldr	r0, [r0, #16]
 800f9b2:	1a80      	subs	r0, r0, r2
 800f9b4:	b530      	push	{r4, r5, lr}
 800f9b6:	d10e      	bne.n	800f9d6 <__mcmp+0x2a>
 800f9b8:	3314      	adds	r3, #20
 800f9ba:	3114      	adds	r1, #20
 800f9bc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800f9c0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800f9c4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800f9c8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800f9cc:	4295      	cmp	r5, r2
 800f9ce:	d003      	beq.n	800f9d8 <__mcmp+0x2c>
 800f9d0:	d205      	bcs.n	800f9de <__mcmp+0x32>
 800f9d2:	f04f 30ff 	mov.w	r0, #4294967295
 800f9d6:	bd30      	pop	{r4, r5, pc}
 800f9d8:	42a3      	cmp	r3, r4
 800f9da:	d3f3      	bcc.n	800f9c4 <__mcmp+0x18>
 800f9dc:	e7fb      	b.n	800f9d6 <__mcmp+0x2a>
 800f9de:	2001      	movs	r0, #1
 800f9e0:	e7f9      	b.n	800f9d6 <__mcmp+0x2a>
	...

0800f9e4 <__mdiff>:
 800f9e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9e8:	4689      	mov	r9, r1
 800f9ea:	4606      	mov	r6, r0
 800f9ec:	4611      	mov	r1, r2
 800f9ee:	4614      	mov	r4, r2
 800f9f0:	4648      	mov	r0, r9
 800f9f2:	f7ff ffdb 	bl	800f9ac <__mcmp>
 800f9f6:	1e05      	subs	r5, r0, #0
 800f9f8:	d112      	bne.n	800fa20 <__mdiff+0x3c>
 800f9fa:	4629      	mov	r1, r5
 800f9fc:	4630      	mov	r0, r6
 800f9fe:	f7ff fd0f 	bl	800f420 <_Balloc>
 800fa02:	4602      	mov	r2, r0
 800fa04:	b928      	cbnz	r0, 800fa12 <__mdiff+0x2e>
 800fa06:	4b41      	ldr	r3, [pc, #260]	@ (800fb0c <__mdiff+0x128>)
 800fa08:	f240 2137 	movw	r1, #567	@ 0x237
 800fa0c:	4840      	ldr	r0, [pc, #256]	@ (800fb10 <__mdiff+0x12c>)
 800fa0e:	f001 fa9f 	bl	8010f50 <__assert_func>
 800fa12:	2301      	movs	r3, #1
 800fa14:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800fa18:	4610      	mov	r0, r2
 800fa1a:	b003      	add	sp, #12
 800fa1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa20:	bfbc      	itt	lt
 800fa22:	464b      	movlt	r3, r9
 800fa24:	46a1      	movlt	r9, r4
 800fa26:	4630      	mov	r0, r6
 800fa28:	bfb8      	it	lt
 800fa2a:	2501      	movlt	r5, #1
 800fa2c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800fa30:	bfb4      	ite	lt
 800fa32:	461c      	movlt	r4, r3
 800fa34:	2500      	movge	r5, #0
 800fa36:	f7ff fcf3 	bl	800f420 <_Balloc>
 800fa3a:	4602      	mov	r2, r0
 800fa3c:	b918      	cbnz	r0, 800fa46 <__mdiff+0x62>
 800fa3e:	4b33      	ldr	r3, [pc, #204]	@ (800fb0c <__mdiff+0x128>)
 800fa40:	f240 2145 	movw	r1, #581	@ 0x245
 800fa44:	e7e2      	b.n	800fa0c <__mdiff+0x28>
 800fa46:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800fa4a:	f104 0e14 	add.w	lr, r4, #20
 800fa4e:	6926      	ldr	r6, [r4, #16]
 800fa50:	f100 0b14 	add.w	fp, r0, #20
 800fa54:	60c5      	str	r5, [r0, #12]
 800fa56:	f109 0514 	add.w	r5, r9, #20
 800fa5a:	f109 0310 	add.w	r3, r9, #16
 800fa5e:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800fa62:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800fa66:	46d9      	mov	r9, fp
 800fa68:	f04f 0c00 	mov.w	ip, #0
 800fa6c:	9301      	str	r3, [sp, #4]
 800fa6e:	9b01      	ldr	r3, [sp, #4]
 800fa70:	f85e 0b04 	ldr.w	r0, [lr], #4
 800fa74:	f853 af04 	ldr.w	sl, [r3, #4]!
 800fa78:	4576      	cmp	r6, lr
 800fa7a:	9301      	str	r3, [sp, #4]
 800fa7c:	fa1f f38a 	uxth.w	r3, sl
 800fa80:	4619      	mov	r1, r3
 800fa82:	b283      	uxth	r3, r0
 800fa84:	ea4f 4010 	mov.w	r0, r0, lsr #16
 800fa88:	eba1 0303 	sub.w	r3, r1, r3
 800fa8c:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800fa90:	4463      	add	r3, ip
 800fa92:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800fa96:	b29b      	uxth	r3, r3
 800fa98:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800fa9c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800faa0:	f849 3b04 	str.w	r3, [r9], #4
 800faa4:	d8e3      	bhi.n	800fa6e <__mdiff+0x8a>
 800faa6:	1b33      	subs	r3, r6, r4
 800faa8:	3415      	adds	r4, #21
 800faaa:	3b15      	subs	r3, #21
 800faac:	f023 0303 	bic.w	r3, r3, #3
 800fab0:	3304      	adds	r3, #4
 800fab2:	42a6      	cmp	r6, r4
 800fab4:	bf38      	it	cc
 800fab6:	2304      	movcc	r3, #4
 800fab8:	441d      	add	r5, r3
 800faba:	445b      	add	r3, fp
 800fabc:	462c      	mov	r4, r5
 800fabe:	461e      	mov	r6, r3
 800fac0:	4544      	cmp	r4, r8
 800fac2:	d30e      	bcc.n	800fae2 <__mdiff+0xfe>
 800fac4:	f108 0103 	add.w	r1, r8, #3
 800fac8:	1b49      	subs	r1, r1, r5
 800faca:	3d03      	subs	r5, #3
 800facc:	f021 0103 	bic.w	r1, r1, #3
 800fad0:	45a8      	cmp	r8, r5
 800fad2:	bf38      	it	cc
 800fad4:	2100      	movcc	r1, #0
 800fad6:	440b      	add	r3, r1
 800fad8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800fadc:	b199      	cbz	r1, 800fb06 <__mdiff+0x122>
 800fade:	6117      	str	r7, [r2, #16]
 800fae0:	e79a      	b.n	800fa18 <__mdiff+0x34>
 800fae2:	f854 1b04 	ldr.w	r1, [r4], #4
 800fae6:	46e6      	mov	lr, ip
 800fae8:	fa1f fc81 	uxth.w	ip, r1
 800faec:	0c08      	lsrs	r0, r1, #16
 800faee:	4471      	add	r1, lr
 800faf0:	44f4      	add	ip, lr
 800faf2:	b289      	uxth	r1, r1
 800faf4:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800faf8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800fafc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800fb00:	f846 1b04 	str.w	r1, [r6], #4
 800fb04:	e7dc      	b.n	800fac0 <__mdiff+0xdc>
 800fb06:	3f01      	subs	r7, #1
 800fb08:	e7e6      	b.n	800fad8 <__mdiff+0xf4>
 800fb0a:	bf00      	nop
 800fb0c:	08011e05 	.word	0x08011e05
 800fb10:	08011e16 	.word	0x08011e16

0800fb14 <__ulp>:
 800fb14:	b082      	sub	sp, #8
 800fb16:	4b11      	ldr	r3, [pc, #68]	@ (800fb5c <__ulp+0x48>)
 800fb18:	ed8d 0b00 	vstr	d0, [sp]
 800fb1c:	9a01      	ldr	r2, [sp, #4]
 800fb1e:	4013      	ands	r3, r2
 800fb20:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800fb24:	2b00      	cmp	r3, #0
 800fb26:	dc08      	bgt.n	800fb3a <__ulp+0x26>
 800fb28:	425b      	negs	r3, r3
 800fb2a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800fb2e:	ea4f 5223 	mov.w	r2, r3, asr #20
 800fb32:	da04      	bge.n	800fb3e <__ulp+0x2a>
 800fb34:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800fb38:	4113      	asrs	r3, r2
 800fb3a:	2200      	movs	r2, #0
 800fb3c:	e008      	b.n	800fb50 <__ulp+0x3c>
 800fb3e:	f1a2 0314 	sub.w	r3, r2, #20
 800fb42:	2b1e      	cmp	r3, #30
 800fb44:	bfd6      	itet	le
 800fb46:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800fb4a:	2201      	movgt	r2, #1
 800fb4c:	40da      	lsrle	r2, r3
 800fb4e:	2300      	movs	r3, #0
 800fb50:	4619      	mov	r1, r3
 800fb52:	4610      	mov	r0, r2
 800fb54:	ec41 0b10 	vmov	d0, r0, r1
 800fb58:	b002      	add	sp, #8
 800fb5a:	4770      	bx	lr
 800fb5c:	7ff00000 	.word	0x7ff00000

0800fb60 <__b2d>:
 800fb60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fb64:	6906      	ldr	r6, [r0, #16]
 800fb66:	f100 0814 	add.w	r8, r0, #20
 800fb6a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800fb6e:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800fb72:	1f37      	subs	r7, r6, #4
 800fb74:	4610      	mov	r0, r2
 800fb76:	f7ff fd47 	bl	800f608 <__hi0bits>
 800fb7a:	f1c0 0320 	rsb	r3, r0, #32
 800fb7e:	280a      	cmp	r0, #10
 800fb80:	600b      	str	r3, [r1, #0]
 800fb82:	491d      	ldr	r1, [pc, #116]	@ (800fbf8 <__b2d+0x98>)
 800fb84:	dc16      	bgt.n	800fbb4 <__b2d+0x54>
 800fb86:	f1c0 0c0b 	rsb	ip, r0, #11
 800fb8a:	45b8      	cmp	r8, r7
 800fb8c:	f100 0015 	add.w	r0, r0, #21
 800fb90:	fa22 f30c 	lsr.w	r3, r2, ip
 800fb94:	fa02 f000 	lsl.w	r0, r2, r0
 800fb98:	ea43 0501 	orr.w	r5, r3, r1
 800fb9c:	bf34      	ite	cc
 800fb9e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800fba2:	2300      	movcs	r3, #0
 800fba4:	fa23 f30c 	lsr.w	r3, r3, ip
 800fba8:	4303      	orrs	r3, r0
 800fbaa:	461c      	mov	r4, r3
 800fbac:	ec45 4b10 	vmov	d0, r4, r5
 800fbb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fbb4:	45b8      	cmp	r8, r7
 800fbb6:	bf3a      	itte	cc
 800fbb8:	f1a6 0708 	subcc.w	r7, r6, #8
 800fbbc:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800fbc0:	2300      	movcs	r3, #0
 800fbc2:	380b      	subs	r0, #11
 800fbc4:	d014      	beq.n	800fbf0 <__b2d+0x90>
 800fbc6:	f1c0 0120 	rsb	r1, r0, #32
 800fbca:	4082      	lsls	r2, r0
 800fbcc:	4547      	cmp	r7, r8
 800fbce:	fa23 f401 	lsr.w	r4, r3, r1
 800fbd2:	fa03 f300 	lsl.w	r3, r3, r0
 800fbd6:	ea42 0204 	orr.w	r2, r2, r4
 800fbda:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800fbde:	bf8c      	ite	hi
 800fbe0:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800fbe4:	2200      	movls	r2, #0
 800fbe6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800fbea:	40ca      	lsrs	r2, r1
 800fbec:	4313      	orrs	r3, r2
 800fbee:	e7dc      	b.n	800fbaa <__b2d+0x4a>
 800fbf0:	ea42 0501 	orr.w	r5, r2, r1
 800fbf4:	e7d9      	b.n	800fbaa <__b2d+0x4a>
 800fbf6:	bf00      	nop
 800fbf8:	3ff00000 	.word	0x3ff00000

0800fbfc <__d2b>:
 800fbfc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800fc00:	460f      	mov	r7, r1
 800fc02:	2101      	movs	r1, #1
 800fc04:	4616      	mov	r6, r2
 800fc06:	ec59 8b10 	vmov	r8, r9, d0
 800fc0a:	f7ff fc09 	bl	800f420 <_Balloc>
 800fc0e:	4604      	mov	r4, r0
 800fc10:	b930      	cbnz	r0, 800fc20 <__d2b+0x24>
 800fc12:	4602      	mov	r2, r0
 800fc14:	4b23      	ldr	r3, [pc, #140]	@ (800fca4 <__d2b+0xa8>)
 800fc16:	f240 310f 	movw	r1, #783	@ 0x30f
 800fc1a:	4823      	ldr	r0, [pc, #140]	@ (800fca8 <__d2b+0xac>)
 800fc1c:	f001 f998 	bl	8010f50 <__assert_func>
 800fc20:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800fc24:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800fc28:	b10d      	cbz	r5, 800fc2e <__d2b+0x32>
 800fc2a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800fc2e:	9301      	str	r3, [sp, #4]
 800fc30:	f1b8 0300 	subs.w	r3, r8, #0
 800fc34:	d023      	beq.n	800fc7e <__d2b+0x82>
 800fc36:	4668      	mov	r0, sp
 800fc38:	9300      	str	r3, [sp, #0]
 800fc3a:	f7ff fd04 	bl	800f646 <__lo0bits>
 800fc3e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800fc42:	b1d0      	cbz	r0, 800fc7a <__d2b+0x7e>
 800fc44:	f1c0 0320 	rsb	r3, r0, #32
 800fc48:	fa02 f303 	lsl.w	r3, r2, r3
 800fc4c:	40c2      	lsrs	r2, r0
 800fc4e:	430b      	orrs	r3, r1
 800fc50:	9201      	str	r2, [sp, #4]
 800fc52:	6163      	str	r3, [r4, #20]
 800fc54:	9b01      	ldr	r3, [sp, #4]
 800fc56:	2b00      	cmp	r3, #0
 800fc58:	61a3      	str	r3, [r4, #24]
 800fc5a:	bf0c      	ite	eq
 800fc5c:	2201      	moveq	r2, #1
 800fc5e:	2202      	movne	r2, #2
 800fc60:	6122      	str	r2, [r4, #16]
 800fc62:	b1a5      	cbz	r5, 800fc8e <__d2b+0x92>
 800fc64:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800fc68:	4405      	add	r5, r0
 800fc6a:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800fc6e:	603d      	str	r5, [r7, #0]
 800fc70:	6030      	str	r0, [r6, #0]
 800fc72:	4620      	mov	r0, r4
 800fc74:	b003      	add	sp, #12
 800fc76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fc7a:	6161      	str	r1, [r4, #20]
 800fc7c:	e7ea      	b.n	800fc54 <__d2b+0x58>
 800fc7e:	a801      	add	r0, sp, #4
 800fc80:	f7ff fce1 	bl	800f646 <__lo0bits>
 800fc84:	9b01      	ldr	r3, [sp, #4]
 800fc86:	3020      	adds	r0, #32
 800fc88:	2201      	movs	r2, #1
 800fc8a:	6163      	str	r3, [r4, #20]
 800fc8c:	e7e8      	b.n	800fc60 <__d2b+0x64>
 800fc8e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800fc92:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800fc96:	6038      	str	r0, [r7, #0]
 800fc98:	6918      	ldr	r0, [r3, #16]
 800fc9a:	f7ff fcb5 	bl	800f608 <__hi0bits>
 800fc9e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800fca2:	e7e5      	b.n	800fc70 <__d2b+0x74>
 800fca4:	08011e05 	.word	0x08011e05
 800fca8:	08011e16 	.word	0x08011e16

0800fcac <__ratio>:
 800fcac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fcb0:	b085      	sub	sp, #20
 800fcb2:	e9cd 1000 	strd	r1, r0, [sp]
 800fcb6:	a902      	add	r1, sp, #8
 800fcb8:	f7ff ff52 	bl	800fb60 <__b2d>
 800fcbc:	a903      	add	r1, sp, #12
 800fcbe:	9800      	ldr	r0, [sp, #0]
 800fcc0:	ec55 4b10 	vmov	r4, r5, d0
 800fcc4:	f7ff ff4c 	bl	800fb60 <__b2d>
 800fcc8:	9b01      	ldr	r3, [sp, #4]
 800fcca:	462f      	mov	r7, r5
 800fccc:	4620      	mov	r0, r4
 800fcce:	6919      	ldr	r1, [r3, #16]
 800fcd0:	9b00      	ldr	r3, [sp, #0]
 800fcd2:	691b      	ldr	r3, [r3, #16]
 800fcd4:	1ac9      	subs	r1, r1, r3
 800fcd6:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800fcda:	ec5b ab10 	vmov	sl, fp, d0
 800fcde:	1a9b      	subs	r3, r3, r2
 800fce0:	46d9      	mov	r9, fp
 800fce2:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800fce6:	2b00      	cmp	r3, #0
 800fce8:	bfcd      	iteet	gt
 800fcea:	462a      	movgt	r2, r5
 800fcec:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800fcf0:	465a      	movle	r2, fp
 800fcf2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800fcf6:	bfd8      	it	le
 800fcf8:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800fcfc:	4652      	mov	r2, sl
 800fcfe:	4639      	mov	r1, r7
 800fd00:	464b      	mov	r3, r9
 800fd02:	f7f0 fdc7 	bl	8000894 <__aeabi_ddiv>
 800fd06:	ec41 0b10 	vmov	d0, r0, r1
 800fd0a:	b005      	add	sp, #20
 800fd0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800fd10 <__copybits>:
 800fd10:	3901      	subs	r1, #1
 800fd12:	f102 0314 	add.w	r3, r2, #20
 800fd16:	1149      	asrs	r1, r1, #5
 800fd18:	b570      	push	{r4, r5, r6, lr}
 800fd1a:	3101      	adds	r1, #1
 800fd1c:	6914      	ldr	r4, [r2, #16]
 800fd1e:	1f05      	subs	r5, r0, #4
 800fd20:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800fd24:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800fd28:	42a3      	cmp	r3, r4
 800fd2a:	d30c      	bcc.n	800fd46 <__copybits+0x36>
 800fd2c:	1aa3      	subs	r3, r4, r2
 800fd2e:	3211      	adds	r2, #17
 800fd30:	3b11      	subs	r3, #17
 800fd32:	f023 0303 	bic.w	r3, r3, #3
 800fd36:	42a2      	cmp	r2, r4
 800fd38:	bf88      	it	hi
 800fd3a:	2300      	movhi	r3, #0
 800fd3c:	4418      	add	r0, r3
 800fd3e:	2300      	movs	r3, #0
 800fd40:	4288      	cmp	r0, r1
 800fd42:	d305      	bcc.n	800fd50 <__copybits+0x40>
 800fd44:	bd70      	pop	{r4, r5, r6, pc}
 800fd46:	f853 6b04 	ldr.w	r6, [r3], #4
 800fd4a:	f845 6f04 	str.w	r6, [r5, #4]!
 800fd4e:	e7eb      	b.n	800fd28 <__copybits+0x18>
 800fd50:	f840 3b04 	str.w	r3, [r0], #4
 800fd54:	e7f4      	b.n	800fd40 <__copybits+0x30>

0800fd56 <__any_on>:
 800fd56:	f100 0214 	add.w	r2, r0, #20
 800fd5a:	114b      	asrs	r3, r1, #5
 800fd5c:	6900      	ldr	r0, [r0, #16]
 800fd5e:	4298      	cmp	r0, r3
 800fd60:	b510      	push	{r4, lr}
 800fd62:	db11      	blt.n	800fd88 <__any_on+0x32>
 800fd64:	dd0a      	ble.n	800fd7c <__any_on+0x26>
 800fd66:	f011 011f 	ands.w	r1, r1, #31
 800fd6a:	d007      	beq.n	800fd7c <__any_on+0x26>
 800fd6c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800fd70:	fa24 f001 	lsr.w	r0, r4, r1
 800fd74:	fa00 f101 	lsl.w	r1, r0, r1
 800fd78:	428c      	cmp	r4, r1
 800fd7a:	d10b      	bne.n	800fd94 <__any_on+0x3e>
 800fd7c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800fd80:	4293      	cmp	r3, r2
 800fd82:	d803      	bhi.n	800fd8c <__any_on+0x36>
 800fd84:	2000      	movs	r0, #0
 800fd86:	bd10      	pop	{r4, pc}
 800fd88:	4603      	mov	r3, r0
 800fd8a:	e7f7      	b.n	800fd7c <__any_on+0x26>
 800fd8c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800fd90:	2900      	cmp	r1, #0
 800fd92:	d0f5      	beq.n	800fd80 <__any_on+0x2a>
 800fd94:	2001      	movs	r0, #1
 800fd96:	e7f6      	b.n	800fd86 <__any_on+0x30>

0800fd98 <sulp>:
 800fd98:	b570      	push	{r4, r5, r6, lr}
 800fd9a:	4604      	mov	r4, r0
 800fd9c:	460d      	mov	r5, r1
 800fd9e:	4616      	mov	r6, r2
 800fda0:	ec45 4b10 	vmov	d0, r4, r5
 800fda4:	f7ff feb6 	bl	800fb14 <__ulp>
 800fda8:	ec51 0b10 	vmov	r0, r1, d0
 800fdac:	b17e      	cbz	r6, 800fdce <sulp+0x36>
 800fdae:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800fdb2:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800fdb6:	2b00      	cmp	r3, #0
 800fdb8:	dd09      	ble.n	800fdce <sulp+0x36>
 800fdba:	051b      	lsls	r3, r3, #20
 800fdbc:	2400      	movs	r4, #0
 800fdbe:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800fdc2:	4622      	mov	r2, r4
 800fdc4:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800fdc8:	462b      	mov	r3, r5
 800fdca:	f7f0 fc39 	bl	8000640 <__aeabi_dmul>
 800fdce:	ec41 0b10 	vmov	d0, r0, r1
 800fdd2:	bd70      	pop	{r4, r5, r6, pc}
 800fdd4:	0000      	movs	r0, r0
	...

0800fdd8 <_strtod_l>:
 800fdd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fddc:	b09f      	sub	sp, #124	@ 0x7c
 800fdde:	460c      	mov	r4, r1
 800fde0:	f04f 0a00 	mov.w	sl, #0
 800fde4:	f04f 0b00 	mov.w	fp, #0
 800fde8:	9217      	str	r2, [sp, #92]	@ 0x5c
 800fdea:	2200      	movs	r2, #0
 800fdec:	9005      	str	r0, [sp, #20]
 800fdee:	921a      	str	r2, [sp, #104]	@ 0x68
 800fdf0:	460a      	mov	r2, r1
 800fdf2:	9219      	str	r2, [sp, #100]	@ 0x64
 800fdf4:	7811      	ldrb	r1, [r2, #0]
 800fdf6:	292b      	cmp	r1, #43	@ 0x2b
 800fdf8:	d04a      	beq.n	800fe90 <_strtod_l+0xb8>
 800fdfa:	d838      	bhi.n	800fe6e <_strtod_l+0x96>
 800fdfc:	290d      	cmp	r1, #13
 800fdfe:	d832      	bhi.n	800fe66 <_strtod_l+0x8e>
 800fe00:	2908      	cmp	r1, #8
 800fe02:	d832      	bhi.n	800fe6a <_strtod_l+0x92>
 800fe04:	2900      	cmp	r1, #0
 800fe06:	d03b      	beq.n	800fe80 <_strtod_l+0xa8>
 800fe08:	2200      	movs	r2, #0
 800fe0a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800fe0c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800fe0e:	782a      	ldrb	r2, [r5, #0]
 800fe10:	2a30      	cmp	r2, #48	@ 0x30
 800fe12:	f040 80b3 	bne.w	800ff7c <_strtod_l+0x1a4>
 800fe16:	786a      	ldrb	r2, [r5, #1]
 800fe18:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800fe1c:	2a58      	cmp	r2, #88	@ 0x58
 800fe1e:	d16e      	bne.n	800fefe <_strtod_l+0x126>
 800fe20:	9302      	str	r3, [sp, #8]
 800fe22:	a919      	add	r1, sp, #100	@ 0x64
 800fe24:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fe26:	4a90      	ldr	r2, [pc, #576]	@ (8010068 <_strtod_l+0x290>)
 800fe28:	9301      	str	r3, [sp, #4]
 800fe2a:	ab1a      	add	r3, sp, #104	@ 0x68
 800fe2c:	9805      	ldr	r0, [sp, #20]
 800fe2e:	9300      	str	r3, [sp, #0]
 800fe30:	ab1b      	add	r3, sp, #108	@ 0x6c
 800fe32:	f001 f925 	bl	8011080 <__gethex>
 800fe36:	f010 060f 	ands.w	r6, r0, #15
 800fe3a:	4604      	mov	r4, r0
 800fe3c:	d005      	beq.n	800fe4a <_strtod_l+0x72>
 800fe3e:	2e06      	cmp	r6, #6
 800fe40:	d128      	bne.n	800fe94 <_strtod_l+0xbc>
 800fe42:	3501      	adds	r5, #1
 800fe44:	2300      	movs	r3, #0
 800fe46:	9519      	str	r5, [sp, #100]	@ 0x64
 800fe48:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fe4a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800fe4c:	2b00      	cmp	r3, #0
 800fe4e:	f040 858e 	bne.w	801096e <_strtod_l+0xb96>
 800fe52:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fe54:	b1cb      	cbz	r3, 800fe8a <_strtod_l+0xb2>
 800fe56:	4652      	mov	r2, sl
 800fe58:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800fe5c:	ec43 2b10 	vmov	d0, r2, r3
 800fe60:	b01f      	add	sp, #124	@ 0x7c
 800fe62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe66:	2920      	cmp	r1, #32
 800fe68:	d1ce      	bne.n	800fe08 <_strtod_l+0x30>
 800fe6a:	3201      	adds	r2, #1
 800fe6c:	e7c1      	b.n	800fdf2 <_strtod_l+0x1a>
 800fe6e:	292d      	cmp	r1, #45	@ 0x2d
 800fe70:	d1ca      	bne.n	800fe08 <_strtod_l+0x30>
 800fe72:	2101      	movs	r1, #1
 800fe74:	910b      	str	r1, [sp, #44]	@ 0x2c
 800fe76:	1c51      	adds	r1, r2, #1
 800fe78:	9119      	str	r1, [sp, #100]	@ 0x64
 800fe7a:	7852      	ldrb	r2, [r2, #1]
 800fe7c:	2a00      	cmp	r2, #0
 800fe7e:	d1c5      	bne.n	800fe0c <_strtod_l+0x34>
 800fe80:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800fe82:	9419      	str	r4, [sp, #100]	@ 0x64
 800fe84:	2b00      	cmp	r3, #0
 800fe86:	f040 8570 	bne.w	801096a <_strtod_l+0xb92>
 800fe8a:	4652      	mov	r2, sl
 800fe8c:	465b      	mov	r3, fp
 800fe8e:	e7e5      	b.n	800fe5c <_strtod_l+0x84>
 800fe90:	2100      	movs	r1, #0
 800fe92:	e7ef      	b.n	800fe74 <_strtod_l+0x9c>
 800fe94:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800fe96:	b13a      	cbz	r2, 800fea8 <_strtod_l+0xd0>
 800fe98:	2135      	movs	r1, #53	@ 0x35
 800fe9a:	a81c      	add	r0, sp, #112	@ 0x70
 800fe9c:	f7ff ff38 	bl	800fd10 <__copybits>
 800fea0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800fea2:	9805      	ldr	r0, [sp, #20]
 800fea4:	f7ff fafc 	bl	800f4a0 <_Bfree>
 800fea8:	3e01      	subs	r6, #1
 800feaa:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800feac:	2e04      	cmp	r6, #4
 800feae:	d806      	bhi.n	800febe <_strtod_l+0xe6>
 800feb0:	e8df f006 	tbb	[pc, r6]
 800feb4:	201d0314 	.word	0x201d0314
 800feb8:	14          	.byte	0x14
 800feb9:	00          	.byte	0x00
 800feba:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800febe:	05e1      	lsls	r1, r4, #23
 800fec0:	bf48      	it	mi
 800fec2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800fec6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800feca:	0d1b      	lsrs	r3, r3, #20
 800fecc:	051b      	lsls	r3, r3, #20
 800fece:	2b00      	cmp	r3, #0
 800fed0:	d1bb      	bne.n	800fe4a <_strtod_l+0x72>
 800fed2:	f7fe fb11 	bl	800e4f8 <__errno>
 800fed6:	2322      	movs	r3, #34	@ 0x22
 800fed8:	6003      	str	r3, [r0, #0]
 800feda:	e7b6      	b.n	800fe4a <_strtod_l+0x72>
 800fedc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800fee0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800fee4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800fee8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800feec:	e7e7      	b.n	800febe <_strtod_l+0xe6>
 800feee:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8010070 <_strtod_l+0x298>
 800fef2:	e7e4      	b.n	800febe <_strtod_l+0xe6>
 800fef4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800fef8:	f04f 3aff 	mov.w	sl, #4294967295
 800fefc:	e7df      	b.n	800febe <_strtod_l+0xe6>
 800fefe:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ff00:	1c5a      	adds	r2, r3, #1
 800ff02:	9219      	str	r2, [sp, #100]	@ 0x64
 800ff04:	785b      	ldrb	r3, [r3, #1]
 800ff06:	2b30      	cmp	r3, #48	@ 0x30
 800ff08:	d0f9      	beq.n	800fefe <_strtod_l+0x126>
 800ff0a:	2b00      	cmp	r3, #0
 800ff0c:	d09d      	beq.n	800fe4a <_strtod_l+0x72>
 800ff0e:	2301      	movs	r3, #1
 800ff10:	9309      	str	r3, [sp, #36]	@ 0x24
 800ff12:	220a      	movs	r2, #10
 800ff14:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ff16:	930c      	str	r3, [sp, #48]	@ 0x30
 800ff18:	2300      	movs	r3, #0
 800ff1a:	461f      	mov	r7, r3
 800ff1c:	9308      	str	r3, [sp, #32]
 800ff1e:	930a      	str	r3, [sp, #40]	@ 0x28
 800ff20:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800ff22:	7805      	ldrb	r5, [r0, #0]
 800ff24:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800ff28:	b2d9      	uxtb	r1, r3
 800ff2a:	2909      	cmp	r1, #9
 800ff2c:	d928      	bls.n	800ff80 <_strtod_l+0x1a8>
 800ff2e:	2201      	movs	r2, #1
 800ff30:	494e      	ldr	r1, [pc, #312]	@ (801006c <_strtod_l+0x294>)
 800ff32:	f000 ffd5 	bl	8010ee0 <strncmp>
 800ff36:	2800      	cmp	r0, #0
 800ff38:	d033      	beq.n	800ffa2 <_strtod_l+0x1ca>
 800ff3a:	2000      	movs	r0, #0
 800ff3c:	462a      	mov	r2, r5
 800ff3e:	463d      	mov	r5, r7
 800ff40:	4681      	mov	r9, r0
 800ff42:	4603      	mov	r3, r0
 800ff44:	2a65      	cmp	r2, #101	@ 0x65
 800ff46:	d001      	beq.n	800ff4c <_strtod_l+0x174>
 800ff48:	2a45      	cmp	r2, #69	@ 0x45
 800ff4a:	d114      	bne.n	800ff76 <_strtod_l+0x19e>
 800ff4c:	b91d      	cbnz	r5, 800ff56 <_strtod_l+0x17e>
 800ff4e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ff50:	4302      	orrs	r2, r0
 800ff52:	d095      	beq.n	800fe80 <_strtod_l+0xa8>
 800ff54:	2500      	movs	r5, #0
 800ff56:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800ff58:	1c62      	adds	r2, r4, #1
 800ff5a:	9219      	str	r2, [sp, #100]	@ 0x64
 800ff5c:	7862      	ldrb	r2, [r4, #1]
 800ff5e:	2a2b      	cmp	r2, #43	@ 0x2b
 800ff60:	d078      	beq.n	8010054 <_strtod_l+0x27c>
 800ff62:	2a2d      	cmp	r2, #45	@ 0x2d
 800ff64:	d07c      	beq.n	8010060 <_strtod_l+0x288>
 800ff66:	f04f 0c00 	mov.w	ip, #0
 800ff6a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800ff6e:	2909      	cmp	r1, #9
 800ff70:	f240 8084 	bls.w	801007c <_strtod_l+0x2a4>
 800ff74:	9419      	str	r4, [sp, #100]	@ 0x64
 800ff76:	f04f 0800 	mov.w	r8, #0
 800ff7a:	e0a4      	b.n	80100c6 <_strtod_l+0x2ee>
 800ff7c:	2300      	movs	r3, #0
 800ff7e:	e7c7      	b.n	800ff10 <_strtod_l+0x138>
 800ff80:	2f08      	cmp	r7, #8
 800ff82:	f100 0001 	add.w	r0, r0, #1
 800ff86:	f107 0701 	add.w	r7, r7, #1
 800ff8a:	bfd5      	itete	le
 800ff8c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800ff8e:	9908      	ldrgt	r1, [sp, #32]
 800ff90:	fb02 3301 	mlale	r3, r2, r1, r3
 800ff94:	fb02 3301 	mlagt	r3, r2, r1, r3
 800ff98:	bfd4      	ite	le
 800ff9a:	930a      	strle	r3, [sp, #40]	@ 0x28
 800ff9c:	9308      	strgt	r3, [sp, #32]
 800ff9e:	9019      	str	r0, [sp, #100]	@ 0x64
 800ffa0:	e7be      	b.n	800ff20 <_strtod_l+0x148>
 800ffa2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ffa4:	1c5a      	adds	r2, r3, #1
 800ffa6:	9219      	str	r2, [sp, #100]	@ 0x64
 800ffa8:	785a      	ldrb	r2, [r3, #1]
 800ffaa:	b37f      	cbz	r7, 801000c <_strtod_l+0x234>
 800ffac:	4681      	mov	r9, r0
 800ffae:	463d      	mov	r5, r7
 800ffb0:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800ffb4:	2b09      	cmp	r3, #9
 800ffb6:	d912      	bls.n	800ffde <_strtod_l+0x206>
 800ffb8:	2301      	movs	r3, #1
 800ffba:	e7c3      	b.n	800ff44 <_strtod_l+0x16c>
 800ffbc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ffbe:	3001      	adds	r0, #1
 800ffc0:	1c5a      	adds	r2, r3, #1
 800ffc2:	9219      	str	r2, [sp, #100]	@ 0x64
 800ffc4:	785a      	ldrb	r2, [r3, #1]
 800ffc6:	2a30      	cmp	r2, #48	@ 0x30
 800ffc8:	d0f8      	beq.n	800ffbc <_strtod_l+0x1e4>
 800ffca:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800ffce:	2b08      	cmp	r3, #8
 800ffd0:	f200 84d2 	bhi.w	8010978 <_strtod_l+0xba0>
 800ffd4:	4681      	mov	r9, r0
 800ffd6:	2000      	movs	r0, #0
 800ffd8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ffda:	4605      	mov	r5, r0
 800ffdc:	930c      	str	r3, [sp, #48]	@ 0x30
 800ffde:	3a30      	subs	r2, #48	@ 0x30
 800ffe0:	f100 0301 	add.w	r3, r0, #1
 800ffe4:	d02a      	beq.n	801003c <_strtod_l+0x264>
 800ffe6:	4499      	add	r9, r3
 800ffe8:	eb00 0c05 	add.w	ip, r0, r5
 800ffec:	462b      	mov	r3, r5
 800ffee:	210a      	movs	r1, #10
 800fff0:	4563      	cmp	r3, ip
 800fff2:	d10d      	bne.n	8010010 <_strtod_l+0x238>
 800fff4:	1c69      	adds	r1, r5, #1
 800fff6:	4401      	add	r1, r0
 800fff8:	4428      	add	r0, r5
 800fffa:	2808      	cmp	r0, #8
 800fffc:	dc16      	bgt.n	801002c <_strtod_l+0x254>
 800fffe:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8010000:	230a      	movs	r3, #10
 8010002:	fb03 2300 	mla	r3, r3, r0, r2
 8010006:	930a      	str	r3, [sp, #40]	@ 0x28
 8010008:	2300      	movs	r3, #0
 801000a:	e018      	b.n	801003e <_strtod_l+0x266>
 801000c:	4638      	mov	r0, r7
 801000e:	e7da      	b.n	800ffc6 <_strtod_l+0x1ee>
 8010010:	2b08      	cmp	r3, #8
 8010012:	f103 0301 	add.w	r3, r3, #1
 8010016:	dc03      	bgt.n	8010020 <_strtod_l+0x248>
 8010018:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 801001a:	434e      	muls	r6, r1
 801001c:	960a      	str	r6, [sp, #40]	@ 0x28
 801001e:	e7e7      	b.n	800fff0 <_strtod_l+0x218>
 8010020:	2b10      	cmp	r3, #16
 8010022:	bfde      	ittt	le
 8010024:	9e08      	ldrle	r6, [sp, #32]
 8010026:	434e      	mulle	r6, r1
 8010028:	9608      	strle	r6, [sp, #32]
 801002a:	e7e1      	b.n	800fff0 <_strtod_l+0x218>
 801002c:	280f      	cmp	r0, #15
 801002e:	dceb      	bgt.n	8010008 <_strtod_l+0x230>
 8010030:	9808      	ldr	r0, [sp, #32]
 8010032:	230a      	movs	r3, #10
 8010034:	fb03 2300 	mla	r3, r3, r0, r2
 8010038:	9308      	str	r3, [sp, #32]
 801003a:	e7e5      	b.n	8010008 <_strtod_l+0x230>
 801003c:	4629      	mov	r1, r5
 801003e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8010040:	460d      	mov	r5, r1
 8010042:	1c50      	adds	r0, r2, #1
 8010044:	9019      	str	r0, [sp, #100]	@ 0x64
 8010046:	4618      	mov	r0, r3
 8010048:	7852      	ldrb	r2, [r2, #1]
 801004a:	e7b1      	b.n	800ffb0 <_strtod_l+0x1d8>
 801004c:	f04f 0900 	mov.w	r9, #0
 8010050:	2301      	movs	r3, #1
 8010052:	e77c      	b.n	800ff4e <_strtod_l+0x176>
 8010054:	f04f 0c00 	mov.w	ip, #0
 8010058:	1ca2      	adds	r2, r4, #2
 801005a:	9219      	str	r2, [sp, #100]	@ 0x64
 801005c:	78a2      	ldrb	r2, [r4, #2]
 801005e:	e784      	b.n	800ff6a <_strtod_l+0x192>
 8010060:	f04f 0c01 	mov.w	ip, #1
 8010064:	e7f8      	b.n	8010058 <_strtod_l+0x280>
 8010066:	bf00      	nop
 8010068:	08011f88 	.word	0x08011f88
 801006c:	08011f70 	.word	0x08011f70
 8010070:	7ff00000 	.word	0x7ff00000
 8010074:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8010076:	1c51      	adds	r1, r2, #1
 8010078:	9119      	str	r1, [sp, #100]	@ 0x64
 801007a:	7852      	ldrb	r2, [r2, #1]
 801007c:	2a30      	cmp	r2, #48	@ 0x30
 801007e:	d0f9      	beq.n	8010074 <_strtod_l+0x29c>
 8010080:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8010084:	2908      	cmp	r1, #8
 8010086:	f63f af76 	bhi.w	800ff76 <_strtod_l+0x19e>
 801008a:	3a30      	subs	r2, #48	@ 0x30
 801008c:	f04f 080a 	mov.w	r8, #10
 8010090:	920e      	str	r2, [sp, #56]	@ 0x38
 8010092:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8010094:	920f      	str	r2, [sp, #60]	@ 0x3c
 8010096:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8010098:	1c56      	adds	r6, r2, #1
 801009a:	9619      	str	r6, [sp, #100]	@ 0x64
 801009c:	7852      	ldrb	r2, [r2, #1]
 801009e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80100a2:	f1be 0f09 	cmp.w	lr, #9
 80100a6:	d939      	bls.n	801011c <_strtod_l+0x344>
 80100a8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80100aa:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80100ae:	1a76      	subs	r6, r6, r1
 80100b0:	2e08      	cmp	r6, #8
 80100b2:	dc03      	bgt.n	80100bc <_strtod_l+0x2e4>
 80100b4:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80100b6:	4588      	cmp	r8, r1
 80100b8:	bfa8      	it	ge
 80100ba:	4688      	movge	r8, r1
 80100bc:	f1bc 0f00 	cmp.w	ip, #0
 80100c0:	d001      	beq.n	80100c6 <_strtod_l+0x2ee>
 80100c2:	f1c8 0800 	rsb	r8, r8, #0
 80100c6:	2d00      	cmp	r5, #0
 80100c8:	d14e      	bne.n	8010168 <_strtod_l+0x390>
 80100ca:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80100cc:	4308      	orrs	r0, r1
 80100ce:	f47f aebc 	bne.w	800fe4a <_strtod_l+0x72>
 80100d2:	2b00      	cmp	r3, #0
 80100d4:	f47f aed4 	bne.w	800fe80 <_strtod_l+0xa8>
 80100d8:	2a69      	cmp	r2, #105	@ 0x69
 80100da:	d028      	beq.n	801012e <_strtod_l+0x356>
 80100dc:	dc25      	bgt.n	801012a <_strtod_l+0x352>
 80100de:	2a49      	cmp	r2, #73	@ 0x49
 80100e0:	d025      	beq.n	801012e <_strtod_l+0x356>
 80100e2:	2a4e      	cmp	r2, #78	@ 0x4e
 80100e4:	f47f aecc 	bne.w	800fe80 <_strtod_l+0xa8>
 80100e8:	499b      	ldr	r1, [pc, #620]	@ (8010358 <_strtod_l+0x580>)
 80100ea:	a819      	add	r0, sp, #100	@ 0x64
 80100ec:	f001 f9e8 	bl	80114c0 <__match>
 80100f0:	2800      	cmp	r0, #0
 80100f2:	f43f aec5 	beq.w	800fe80 <_strtod_l+0xa8>
 80100f6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80100f8:	781b      	ldrb	r3, [r3, #0]
 80100fa:	2b28      	cmp	r3, #40	@ 0x28
 80100fc:	d12e      	bne.n	801015c <_strtod_l+0x384>
 80100fe:	aa1c      	add	r2, sp, #112	@ 0x70
 8010100:	4996      	ldr	r1, [pc, #600]	@ (801035c <_strtod_l+0x584>)
 8010102:	a819      	add	r0, sp, #100	@ 0x64
 8010104:	f001 f9f0 	bl	80114e8 <__hexnan>
 8010108:	2805      	cmp	r0, #5
 801010a:	d127      	bne.n	801015c <_strtod_l+0x384>
 801010c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801010e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8010112:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8010116:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 801011a:	e696      	b.n	800fe4a <_strtod_l+0x72>
 801011c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801011e:	fb08 2101 	mla	r1, r8, r1, r2
 8010122:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8010126:	920e      	str	r2, [sp, #56]	@ 0x38
 8010128:	e7b5      	b.n	8010096 <_strtod_l+0x2be>
 801012a:	2a6e      	cmp	r2, #110	@ 0x6e
 801012c:	e7da      	b.n	80100e4 <_strtod_l+0x30c>
 801012e:	498c      	ldr	r1, [pc, #560]	@ (8010360 <_strtod_l+0x588>)
 8010130:	a819      	add	r0, sp, #100	@ 0x64
 8010132:	f001 f9c5 	bl	80114c0 <__match>
 8010136:	2800      	cmp	r0, #0
 8010138:	f43f aea2 	beq.w	800fe80 <_strtod_l+0xa8>
 801013c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801013e:	a819      	add	r0, sp, #100	@ 0x64
 8010140:	4988      	ldr	r1, [pc, #544]	@ (8010364 <_strtod_l+0x58c>)
 8010142:	3b01      	subs	r3, #1
 8010144:	9319      	str	r3, [sp, #100]	@ 0x64
 8010146:	f001 f9bb 	bl	80114c0 <__match>
 801014a:	b910      	cbnz	r0, 8010152 <_strtod_l+0x37a>
 801014c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801014e:	3301      	adds	r3, #1
 8010150:	9319      	str	r3, [sp, #100]	@ 0x64
 8010152:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8010374 <_strtod_l+0x59c>
 8010156:	f04f 0a00 	mov.w	sl, #0
 801015a:	e676      	b.n	800fe4a <_strtod_l+0x72>
 801015c:	4882      	ldr	r0, [pc, #520]	@ (8010368 <_strtod_l+0x590>)
 801015e:	f000 feef 	bl	8010f40 <nan>
 8010162:	ec5b ab10 	vmov	sl, fp, d0
 8010166:	e670      	b.n	800fe4a <_strtod_l+0x72>
 8010168:	eba8 0309 	sub.w	r3, r8, r9
 801016c:	2f00      	cmp	r7, #0
 801016e:	bf08      	it	eq
 8010170:	462f      	moveq	r7, r5
 8010172:	2d10      	cmp	r5, #16
 8010174:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8010176:	462c      	mov	r4, r5
 8010178:	9309      	str	r3, [sp, #36]	@ 0x24
 801017a:	bfa8      	it	ge
 801017c:	2410      	movge	r4, #16
 801017e:	f7f0 f9e5 	bl	800054c <__aeabi_ui2d>
 8010182:	2d09      	cmp	r5, #9
 8010184:	4682      	mov	sl, r0
 8010186:	468b      	mov	fp, r1
 8010188:	dc13      	bgt.n	80101b2 <_strtod_l+0x3da>
 801018a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801018c:	2b00      	cmp	r3, #0
 801018e:	f43f ae5c 	beq.w	800fe4a <_strtod_l+0x72>
 8010192:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010194:	dd78      	ble.n	8010288 <_strtod_l+0x4b0>
 8010196:	2b16      	cmp	r3, #22
 8010198:	dc5f      	bgt.n	801025a <_strtod_l+0x482>
 801019a:	4974      	ldr	r1, [pc, #464]	@ (801036c <_strtod_l+0x594>)
 801019c:	4652      	mov	r2, sl
 801019e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80101a2:	465b      	mov	r3, fp
 80101a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80101a8:	f7f0 fa4a 	bl	8000640 <__aeabi_dmul>
 80101ac:	4682      	mov	sl, r0
 80101ae:	468b      	mov	fp, r1
 80101b0:	e64b      	b.n	800fe4a <_strtod_l+0x72>
 80101b2:	4b6e      	ldr	r3, [pc, #440]	@ (801036c <_strtod_l+0x594>)
 80101b4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80101b8:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80101bc:	f7f0 fa40 	bl	8000640 <__aeabi_dmul>
 80101c0:	4682      	mov	sl, r0
 80101c2:	468b      	mov	fp, r1
 80101c4:	9808      	ldr	r0, [sp, #32]
 80101c6:	f7f0 f9c1 	bl	800054c <__aeabi_ui2d>
 80101ca:	4602      	mov	r2, r0
 80101cc:	460b      	mov	r3, r1
 80101ce:	4650      	mov	r0, sl
 80101d0:	4659      	mov	r1, fp
 80101d2:	f7f0 f87f 	bl	80002d4 <__adddf3>
 80101d6:	2d0f      	cmp	r5, #15
 80101d8:	4682      	mov	sl, r0
 80101da:	468b      	mov	fp, r1
 80101dc:	ddd5      	ble.n	801018a <_strtod_l+0x3b2>
 80101de:	1b2c      	subs	r4, r5, r4
 80101e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80101e2:	441c      	add	r4, r3
 80101e4:	2c00      	cmp	r4, #0
 80101e6:	f340 8096 	ble.w	8010316 <_strtod_l+0x53e>
 80101ea:	f014 030f 	ands.w	r3, r4, #15
 80101ee:	d00a      	beq.n	8010206 <_strtod_l+0x42e>
 80101f0:	495e      	ldr	r1, [pc, #376]	@ (801036c <_strtod_l+0x594>)
 80101f2:	4652      	mov	r2, sl
 80101f4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80101f8:	465b      	mov	r3, fp
 80101fa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80101fe:	f7f0 fa1f 	bl	8000640 <__aeabi_dmul>
 8010202:	4682      	mov	sl, r0
 8010204:	468b      	mov	fp, r1
 8010206:	f034 040f 	bics.w	r4, r4, #15
 801020a:	d073      	beq.n	80102f4 <_strtod_l+0x51c>
 801020c:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8010210:	dd48      	ble.n	80102a4 <_strtod_l+0x4cc>
 8010212:	2400      	movs	r4, #0
 8010214:	46a0      	mov	r8, r4
 8010216:	46a1      	mov	r9, r4
 8010218:	940a      	str	r4, [sp, #40]	@ 0x28
 801021a:	2322      	movs	r3, #34	@ 0x22
 801021c:	9a05      	ldr	r2, [sp, #20]
 801021e:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8010374 <_strtod_l+0x59c>
 8010222:	f04f 0a00 	mov.w	sl, #0
 8010226:	6013      	str	r3, [r2, #0]
 8010228:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801022a:	2b00      	cmp	r3, #0
 801022c:	f43f ae0d 	beq.w	800fe4a <_strtod_l+0x72>
 8010230:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8010232:	9805      	ldr	r0, [sp, #20]
 8010234:	f7ff f934 	bl	800f4a0 <_Bfree>
 8010238:	4649      	mov	r1, r9
 801023a:	9805      	ldr	r0, [sp, #20]
 801023c:	f7ff f930 	bl	800f4a0 <_Bfree>
 8010240:	4641      	mov	r1, r8
 8010242:	9805      	ldr	r0, [sp, #20]
 8010244:	f7ff f92c 	bl	800f4a0 <_Bfree>
 8010248:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801024a:	9805      	ldr	r0, [sp, #20]
 801024c:	f7ff f928 	bl	800f4a0 <_Bfree>
 8010250:	4621      	mov	r1, r4
 8010252:	9805      	ldr	r0, [sp, #20]
 8010254:	f7ff f924 	bl	800f4a0 <_Bfree>
 8010258:	e5f7      	b.n	800fe4a <_strtod_l+0x72>
 801025a:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 801025e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010260:	4293      	cmp	r3, r2
 8010262:	dbbc      	blt.n	80101de <_strtod_l+0x406>
 8010264:	f1c5 050f 	rsb	r5, r5, #15
 8010268:	4c40      	ldr	r4, [pc, #256]	@ (801036c <_strtod_l+0x594>)
 801026a:	4652      	mov	r2, sl
 801026c:	465b      	mov	r3, fp
 801026e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8010272:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010276:	f7f0 f9e3 	bl	8000640 <__aeabi_dmul>
 801027a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801027c:	1b5d      	subs	r5, r3, r5
 801027e:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8010282:	e9d4 2300 	ldrd	r2, r3, [r4]
 8010286:	e78f      	b.n	80101a8 <_strtod_l+0x3d0>
 8010288:	3316      	adds	r3, #22
 801028a:	dba8      	blt.n	80101de <_strtod_l+0x406>
 801028c:	eba9 0808 	sub.w	r8, r9, r8
 8010290:	4b36      	ldr	r3, [pc, #216]	@ (801036c <_strtod_l+0x594>)
 8010292:	4650      	mov	r0, sl
 8010294:	4659      	mov	r1, fp
 8010296:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 801029a:	e9d8 2300 	ldrd	r2, r3, [r8]
 801029e:	f7f0 faf9 	bl	8000894 <__aeabi_ddiv>
 80102a2:	e783      	b.n	80101ac <_strtod_l+0x3d4>
 80102a4:	4b32      	ldr	r3, [pc, #200]	@ (8010370 <_strtod_l+0x598>)
 80102a6:	1124      	asrs	r4, r4, #4
 80102a8:	4650      	mov	r0, sl
 80102aa:	4659      	mov	r1, fp
 80102ac:	9308      	str	r3, [sp, #32]
 80102ae:	2300      	movs	r3, #0
 80102b0:	461e      	mov	r6, r3
 80102b2:	2c01      	cmp	r4, #1
 80102b4:	dc21      	bgt.n	80102fa <_strtod_l+0x522>
 80102b6:	b10b      	cbz	r3, 80102bc <_strtod_l+0x4e4>
 80102b8:	4682      	mov	sl, r0
 80102ba:	468b      	mov	fp, r1
 80102bc:	492c      	ldr	r1, [pc, #176]	@ (8010370 <_strtod_l+0x598>)
 80102be:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80102c2:	4652      	mov	r2, sl
 80102c4:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80102c8:	465b      	mov	r3, fp
 80102ca:	e9d1 0100 	ldrd	r0, r1, [r1]
 80102ce:	f7f0 f9b7 	bl	8000640 <__aeabi_dmul>
 80102d2:	4b28      	ldr	r3, [pc, #160]	@ (8010374 <_strtod_l+0x59c>)
 80102d4:	460a      	mov	r2, r1
 80102d6:	4682      	mov	sl, r0
 80102d8:	400b      	ands	r3, r1
 80102da:	4927      	ldr	r1, [pc, #156]	@ (8010378 <_strtod_l+0x5a0>)
 80102dc:	428b      	cmp	r3, r1
 80102de:	d898      	bhi.n	8010212 <_strtod_l+0x43a>
 80102e0:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80102e4:	428b      	cmp	r3, r1
 80102e6:	bf86      	itte	hi
 80102e8:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 801037c <_strtod_l+0x5a4>
 80102ec:	f04f 3aff 	movhi.w	sl, #4294967295
 80102f0:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80102f4:	2300      	movs	r3, #0
 80102f6:	9308      	str	r3, [sp, #32]
 80102f8:	e07a      	b.n	80103f0 <_strtod_l+0x618>
 80102fa:	07e2      	lsls	r2, r4, #31
 80102fc:	d505      	bpl.n	801030a <_strtod_l+0x532>
 80102fe:	9b08      	ldr	r3, [sp, #32]
 8010300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010304:	f7f0 f99c 	bl	8000640 <__aeabi_dmul>
 8010308:	2301      	movs	r3, #1
 801030a:	9a08      	ldr	r2, [sp, #32]
 801030c:	3601      	adds	r6, #1
 801030e:	1064      	asrs	r4, r4, #1
 8010310:	3208      	adds	r2, #8
 8010312:	9208      	str	r2, [sp, #32]
 8010314:	e7cd      	b.n	80102b2 <_strtod_l+0x4da>
 8010316:	d0ed      	beq.n	80102f4 <_strtod_l+0x51c>
 8010318:	4264      	negs	r4, r4
 801031a:	f014 020f 	ands.w	r2, r4, #15
 801031e:	d00a      	beq.n	8010336 <_strtod_l+0x55e>
 8010320:	4b12      	ldr	r3, [pc, #72]	@ (801036c <_strtod_l+0x594>)
 8010322:	4650      	mov	r0, sl
 8010324:	4659      	mov	r1, fp
 8010326:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801032a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801032e:	f7f0 fab1 	bl	8000894 <__aeabi_ddiv>
 8010332:	4682      	mov	sl, r0
 8010334:	468b      	mov	fp, r1
 8010336:	1124      	asrs	r4, r4, #4
 8010338:	d0dc      	beq.n	80102f4 <_strtod_l+0x51c>
 801033a:	2c1f      	cmp	r4, #31
 801033c:	dd20      	ble.n	8010380 <_strtod_l+0x5a8>
 801033e:	2400      	movs	r4, #0
 8010340:	46a0      	mov	r8, r4
 8010342:	46a1      	mov	r9, r4
 8010344:	940a      	str	r4, [sp, #40]	@ 0x28
 8010346:	2322      	movs	r3, #34	@ 0x22
 8010348:	9a05      	ldr	r2, [sp, #20]
 801034a:	f04f 0a00 	mov.w	sl, #0
 801034e:	f04f 0b00 	mov.w	fp, #0
 8010352:	6013      	str	r3, [r2, #0]
 8010354:	e768      	b.n	8010228 <_strtod_l+0x450>
 8010356:	bf00      	nop
 8010358:	08011d5d 	.word	0x08011d5d
 801035c:	08011f74 	.word	0x08011f74
 8010360:	08011d55 	.word	0x08011d55
 8010364:	08011d8c 	.word	0x08011d8c
 8010368:	0801211d 	.word	0x0801211d
 801036c:	08011ea8 	.word	0x08011ea8
 8010370:	08011e80 	.word	0x08011e80
 8010374:	7ff00000 	.word	0x7ff00000
 8010378:	7ca00000 	.word	0x7ca00000
 801037c:	7fefffff 	.word	0x7fefffff
 8010380:	f014 0310 	ands.w	r3, r4, #16
 8010384:	4650      	mov	r0, sl
 8010386:	4659      	mov	r1, fp
 8010388:	4ea9      	ldr	r6, [pc, #676]	@ (8010630 <_strtod_l+0x858>)
 801038a:	bf18      	it	ne
 801038c:	236a      	movne	r3, #106	@ 0x6a
 801038e:	9308      	str	r3, [sp, #32]
 8010390:	2300      	movs	r3, #0
 8010392:	07e2      	lsls	r2, r4, #31
 8010394:	d504      	bpl.n	80103a0 <_strtod_l+0x5c8>
 8010396:	e9d6 2300 	ldrd	r2, r3, [r6]
 801039a:	f7f0 f951 	bl	8000640 <__aeabi_dmul>
 801039e:	2301      	movs	r3, #1
 80103a0:	1064      	asrs	r4, r4, #1
 80103a2:	f106 0608 	add.w	r6, r6, #8
 80103a6:	d1f4      	bne.n	8010392 <_strtod_l+0x5ba>
 80103a8:	b10b      	cbz	r3, 80103ae <_strtod_l+0x5d6>
 80103aa:	4682      	mov	sl, r0
 80103ac:	468b      	mov	fp, r1
 80103ae:	9b08      	ldr	r3, [sp, #32]
 80103b0:	b1b3      	cbz	r3, 80103e0 <_strtod_l+0x608>
 80103b2:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80103b6:	4659      	mov	r1, fp
 80103b8:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80103bc:	2b00      	cmp	r3, #0
 80103be:	dd0f      	ble.n	80103e0 <_strtod_l+0x608>
 80103c0:	2b1f      	cmp	r3, #31
 80103c2:	dd55      	ble.n	8010470 <_strtod_l+0x698>
 80103c4:	2b34      	cmp	r3, #52	@ 0x34
 80103c6:	f04f 0a00 	mov.w	sl, #0
 80103ca:	bfdb      	ittet	le
 80103cc:	f04f 33ff 	movle.w	r3, #4294967295
 80103d0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80103d4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80103d8:	4093      	lslle	r3, r2
 80103da:	bfd8      	it	le
 80103dc:	ea03 0b01 	andle.w	fp, r3, r1
 80103e0:	2200      	movs	r2, #0
 80103e2:	2300      	movs	r3, #0
 80103e4:	4650      	mov	r0, sl
 80103e6:	4659      	mov	r1, fp
 80103e8:	f7f0 fb92 	bl	8000b10 <__aeabi_dcmpeq>
 80103ec:	2800      	cmp	r0, #0
 80103ee:	d1a6      	bne.n	801033e <_strtod_l+0x566>
 80103f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80103f2:	463a      	mov	r2, r7
 80103f4:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80103f6:	9300      	str	r3, [sp, #0]
 80103f8:	462b      	mov	r3, r5
 80103fa:	9805      	ldr	r0, [sp, #20]
 80103fc:	f7ff f8ba 	bl	800f574 <__s2b>
 8010400:	900a      	str	r0, [sp, #40]	@ 0x28
 8010402:	2800      	cmp	r0, #0
 8010404:	f43f af05 	beq.w	8010212 <_strtod_l+0x43a>
 8010408:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801040a:	eba9 0308 	sub.w	r3, r9, r8
 801040e:	2400      	movs	r4, #0
 8010410:	2a00      	cmp	r2, #0
 8010412:	46a0      	mov	r8, r4
 8010414:	bfa8      	it	ge
 8010416:	2300      	movge	r3, #0
 8010418:	9312      	str	r3, [sp, #72]	@ 0x48
 801041a:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 801041e:	9316      	str	r3, [sp, #88]	@ 0x58
 8010420:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010422:	9805      	ldr	r0, [sp, #20]
 8010424:	6859      	ldr	r1, [r3, #4]
 8010426:	f7fe fffb 	bl	800f420 <_Balloc>
 801042a:	4681      	mov	r9, r0
 801042c:	2800      	cmp	r0, #0
 801042e:	f43f aef4 	beq.w	801021a <_strtod_l+0x442>
 8010432:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010434:	300c      	adds	r0, #12
 8010436:	691a      	ldr	r2, [r3, #16]
 8010438:	f103 010c 	add.w	r1, r3, #12
 801043c:	3202      	adds	r2, #2
 801043e:	0092      	lsls	r2, r2, #2
 8010440:	f000 fd70 	bl	8010f24 <memcpy>
 8010444:	aa1c      	add	r2, sp, #112	@ 0x70
 8010446:	a91b      	add	r1, sp, #108	@ 0x6c
 8010448:	9805      	ldr	r0, [sp, #20]
 801044a:	ec4b ab10 	vmov	d0, sl, fp
 801044e:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8010452:	f7ff fbd3 	bl	800fbfc <__d2b>
 8010456:	901a      	str	r0, [sp, #104]	@ 0x68
 8010458:	2800      	cmp	r0, #0
 801045a:	f43f aede 	beq.w	801021a <_strtod_l+0x442>
 801045e:	2101      	movs	r1, #1
 8010460:	9805      	ldr	r0, [sp, #20]
 8010462:	f7ff f91d 	bl	800f6a0 <__i2b>
 8010466:	4680      	mov	r8, r0
 8010468:	b948      	cbnz	r0, 801047e <_strtod_l+0x6a6>
 801046a:	f04f 0800 	mov.w	r8, #0
 801046e:	e6d4      	b.n	801021a <_strtod_l+0x442>
 8010470:	f04f 32ff 	mov.w	r2, #4294967295
 8010474:	fa02 f303 	lsl.w	r3, r2, r3
 8010478:	ea03 0a0a 	and.w	sl, r3, sl
 801047c:	e7b0      	b.n	80103e0 <_strtod_l+0x608>
 801047e:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8010480:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8010482:	2d00      	cmp	r5, #0
 8010484:	bfa9      	itett	ge
 8010486:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8010488:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 801048a:	18ef      	addge	r7, r5, r3
 801048c:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 801048e:	bfb8      	it	lt
 8010490:	1b5e      	sublt	r6, r3, r5
 8010492:	9b08      	ldr	r3, [sp, #32]
 8010494:	bfb8      	it	lt
 8010496:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8010498:	1aed      	subs	r5, r5, r3
 801049a:	4b66      	ldr	r3, [pc, #408]	@ (8010634 <_strtod_l+0x85c>)
 801049c:	4415      	add	r5, r2
 801049e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80104a2:	3d01      	subs	r5, #1
 80104a4:	429d      	cmp	r5, r3
 80104a6:	da4f      	bge.n	8010548 <_strtod_l+0x770>
 80104a8:	1b5b      	subs	r3, r3, r5
 80104aa:	2101      	movs	r1, #1
 80104ac:	2b1f      	cmp	r3, #31
 80104ae:	eba2 0203 	sub.w	r2, r2, r3
 80104b2:	dc3d      	bgt.n	8010530 <_strtod_l+0x758>
 80104b4:	fa01 f303 	lsl.w	r3, r1, r3
 80104b8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80104ba:	2300      	movs	r3, #0
 80104bc:	9310      	str	r3, [sp, #64]	@ 0x40
 80104be:	18bd      	adds	r5, r7, r2
 80104c0:	9b08      	ldr	r3, [sp, #32]
 80104c2:	4416      	add	r6, r2
 80104c4:	42af      	cmp	r7, r5
 80104c6:	441e      	add	r6, r3
 80104c8:	463b      	mov	r3, r7
 80104ca:	bfa8      	it	ge
 80104cc:	462b      	movge	r3, r5
 80104ce:	42b3      	cmp	r3, r6
 80104d0:	bfa8      	it	ge
 80104d2:	4633      	movge	r3, r6
 80104d4:	2b00      	cmp	r3, #0
 80104d6:	bfc2      	ittt	gt
 80104d8:	1aed      	subgt	r5, r5, r3
 80104da:	1af6      	subgt	r6, r6, r3
 80104dc:	1aff      	subgt	r7, r7, r3
 80104de:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80104e0:	2b00      	cmp	r3, #0
 80104e2:	dd16      	ble.n	8010512 <_strtod_l+0x73a>
 80104e4:	4641      	mov	r1, r8
 80104e6:	461a      	mov	r2, r3
 80104e8:	9805      	ldr	r0, [sp, #20]
 80104ea:	f7ff f999 	bl	800f820 <__pow5mult>
 80104ee:	4680      	mov	r8, r0
 80104f0:	2800      	cmp	r0, #0
 80104f2:	d0ba      	beq.n	801046a <_strtod_l+0x692>
 80104f4:	4601      	mov	r1, r0
 80104f6:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80104f8:	9805      	ldr	r0, [sp, #20]
 80104fa:	f7ff f8e7 	bl	800f6cc <__multiply>
 80104fe:	900e      	str	r0, [sp, #56]	@ 0x38
 8010500:	2800      	cmp	r0, #0
 8010502:	f43f ae8a 	beq.w	801021a <_strtod_l+0x442>
 8010506:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8010508:	9805      	ldr	r0, [sp, #20]
 801050a:	f7fe ffc9 	bl	800f4a0 <_Bfree>
 801050e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010510:	931a      	str	r3, [sp, #104]	@ 0x68
 8010512:	2d00      	cmp	r5, #0
 8010514:	dc1d      	bgt.n	8010552 <_strtod_l+0x77a>
 8010516:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010518:	2b00      	cmp	r3, #0
 801051a:	dd23      	ble.n	8010564 <_strtod_l+0x78c>
 801051c:	4649      	mov	r1, r9
 801051e:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8010520:	9805      	ldr	r0, [sp, #20]
 8010522:	f7ff f97d 	bl	800f820 <__pow5mult>
 8010526:	4681      	mov	r9, r0
 8010528:	b9e0      	cbnz	r0, 8010564 <_strtod_l+0x78c>
 801052a:	f04f 0900 	mov.w	r9, #0
 801052e:	e674      	b.n	801021a <_strtod_l+0x442>
 8010530:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8010534:	9113      	str	r1, [sp, #76]	@ 0x4c
 8010536:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 801053a:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 801053e:	35e2      	adds	r5, #226	@ 0xe2
 8010540:	fa01 f305 	lsl.w	r3, r1, r5
 8010544:	9310      	str	r3, [sp, #64]	@ 0x40
 8010546:	e7ba      	b.n	80104be <_strtod_l+0x6e6>
 8010548:	2300      	movs	r3, #0
 801054a:	9310      	str	r3, [sp, #64]	@ 0x40
 801054c:	2301      	movs	r3, #1
 801054e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8010550:	e7b5      	b.n	80104be <_strtod_l+0x6e6>
 8010552:	462a      	mov	r2, r5
 8010554:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8010556:	9805      	ldr	r0, [sp, #20]
 8010558:	f7ff f9bc 	bl	800f8d4 <__lshift>
 801055c:	901a      	str	r0, [sp, #104]	@ 0x68
 801055e:	2800      	cmp	r0, #0
 8010560:	d1d9      	bne.n	8010516 <_strtod_l+0x73e>
 8010562:	e65a      	b.n	801021a <_strtod_l+0x442>
 8010564:	2e00      	cmp	r6, #0
 8010566:	dd07      	ble.n	8010578 <_strtod_l+0x7a0>
 8010568:	4649      	mov	r1, r9
 801056a:	4632      	mov	r2, r6
 801056c:	9805      	ldr	r0, [sp, #20]
 801056e:	f7ff f9b1 	bl	800f8d4 <__lshift>
 8010572:	4681      	mov	r9, r0
 8010574:	2800      	cmp	r0, #0
 8010576:	d0d8      	beq.n	801052a <_strtod_l+0x752>
 8010578:	2f00      	cmp	r7, #0
 801057a:	dd08      	ble.n	801058e <_strtod_l+0x7b6>
 801057c:	4641      	mov	r1, r8
 801057e:	463a      	mov	r2, r7
 8010580:	9805      	ldr	r0, [sp, #20]
 8010582:	f7ff f9a7 	bl	800f8d4 <__lshift>
 8010586:	4680      	mov	r8, r0
 8010588:	2800      	cmp	r0, #0
 801058a:	f43f ae46 	beq.w	801021a <_strtod_l+0x442>
 801058e:	464a      	mov	r2, r9
 8010590:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8010592:	9805      	ldr	r0, [sp, #20]
 8010594:	f7ff fa26 	bl	800f9e4 <__mdiff>
 8010598:	4604      	mov	r4, r0
 801059a:	2800      	cmp	r0, #0
 801059c:	f43f ae3d 	beq.w	801021a <_strtod_l+0x442>
 80105a0:	68c3      	ldr	r3, [r0, #12]
 80105a2:	4641      	mov	r1, r8
 80105a4:	930f      	str	r3, [sp, #60]	@ 0x3c
 80105a6:	2300      	movs	r3, #0
 80105a8:	60c3      	str	r3, [r0, #12]
 80105aa:	f7ff f9ff 	bl	800f9ac <__mcmp>
 80105ae:	2800      	cmp	r0, #0
 80105b0:	da46      	bge.n	8010640 <_strtod_l+0x868>
 80105b2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80105b4:	ea53 030a 	orrs.w	r3, r3, sl
 80105b8:	d16c      	bne.n	8010694 <_strtod_l+0x8bc>
 80105ba:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80105be:	2b00      	cmp	r3, #0
 80105c0:	d168      	bne.n	8010694 <_strtod_l+0x8bc>
 80105c2:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80105c6:	0d1b      	lsrs	r3, r3, #20
 80105c8:	051b      	lsls	r3, r3, #20
 80105ca:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80105ce:	d961      	bls.n	8010694 <_strtod_l+0x8bc>
 80105d0:	6963      	ldr	r3, [r4, #20]
 80105d2:	b913      	cbnz	r3, 80105da <_strtod_l+0x802>
 80105d4:	6923      	ldr	r3, [r4, #16]
 80105d6:	2b01      	cmp	r3, #1
 80105d8:	dd5c      	ble.n	8010694 <_strtod_l+0x8bc>
 80105da:	4621      	mov	r1, r4
 80105dc:	2201      	movs	r2, #1
 80105de:	9805      	ldr	r0, [sp, #20]
 80105e0:	f7ff f978 	bl	800f8d4 <__lshift>
 80105e4:	4641      	mov	r1, r8
 80105e6:	4604      	mov	r4, r0
 80105e8:	f7ff f9e0 	bl	800f9ac <__mcmp>
 80105ec:	2800      	cmp	r0, #0
 80105ee:	dd51      	ble.n	8010694 <_strtod_l+0x8bc>
 80105f0:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80105f4:	9a08      	ldr	r2, [sp, #32]
 80105f6:	0d1b      	lsrs	r3, r3, #20
 80105f8:	051b      	lsls	r3, r3, #20
 80105fa:	2a00      	cmp	r2, #0
 80105fc:	d06b      	beq.n	80106d6 <_strtod_l+0x8fe>
 80105fe:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8010602:	d868      	bhi.n	80106d6 <_strtod_l+0x8fe>
 8010604:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8010608:	f67f ae9d 	bls.w	8010346 <_strtod_l+0x56e>
 801060c:	4b0a      	ldr	r3, [pc, #40]	@ (8010638 <_strtod_l+0x860>)
 801060e:	4650      	mov	r0, sl
 8010610:	4659      	mov	r1, fp
 8010612:	2200      	movs	r2, #0
 8010614:	f7f0 f814 	bl	8000640 <__aeabi_dmul>
 8010618:	4b08      	ldr	r3, [pc, #32]	@ (801063c <_strtod_l+0x864>)
 801061a:	4682      	mov	sl, r0
 801061c:	468b      	mov	fp, r1
 801061e:	400b      	ands	r3, r1
 8010620:	2b00      	cmp	r3, #0
 8010622:	f47f ae05 	bne.w	8010230 <_strtod_l+0x458>
 8010626:	2322      	movs	r3, #34	@ 0x22
 8010628:	9a05      	ldr	r2, [sp, #20]
 801062a:	6013      	str	r3, [r2, #0]
 801062c:	e600      	b.n	8010230 <_strtod_l+0x458>
 801062e:	bf00      	nop
 8010630:	08011fa0 	.word	0x08011fa0
 8010634:	fffffc02 	.word	0xfffffc02
 8010638:	39500000 	.word	0x39500000
 801063c:	7ff00000 	.word	0x7ff00000
 8010640:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8010644:	d165      	bne.n	8010712 <_strtod_l+0x93a>
 8010646:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8010648:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801064c:	b35a      	cbz	r2, 80106a6 <_strtod_l+0x8ce>
 801064e:	4a9e      	ldr	r2, [pc, #632]	@ (80108c8 <_strtod_l+0xaf0>)
 8010650:	4293      	cmp	r3, r2
 8010652:	d12b      	bne.n	80106ac <_strtod_l+0x8d4>
 8010654:	9b08      	ldr	r3, [sp, #32]
 8010656:	4651      	mov	r1, sl
 8010658:	b303      	cbz	r3, 801069c <_strtod_l+0x8c4>
 801065a:	465a      	mov	r2, fp
 801065c:	4b9b      	ldr	r3, [pc, #620]	@ (80108cc <_strtod_l+0xaf4>)
 801065e:	4013      	ands	r3, r2
 8010660:	f04f 32ff 	mov.w	r2, #4294967295
 8010664:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8010668:	d81b      	bhi.n	80106a2 <_strtod_l+0x8ca>
 801066a:	0d1b      	lsrs	r3, r3, #20
 801066c:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8010670:	fa02 f303 	lsl.w	r3, r2, r3
 8010674:	4299      	cmp	r1, r3
 8010676:	d119      	bne.n	80106ac <_strtod_l+0x8d4>
 8010678:	4b95      	ldr	r3, [pc, #596]	@ (80108d0 <_strtod_l+0xaf8>)
 801067a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801067c:	429a      	cmp	r2, r3
 801067e:	d102      	bne.n	8010686 <_strtod_l+0x8ae>
 8010680:	3101      	adds	r1, #1
 8010682:	f43f adca 	beq.w	801021a <_strtod_l+0x442>
 8010686:	4b91      	ldr	r3, [pc, #580]	@ (80108cc <_strtod_l+0xaf4>)
 8010688:	f04f 0a00 	mov.w	sl, #0
 801068c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801068e:	401a      	ands	r2, r3
 8010690:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8010694:	9b08      	ldr	r3, [sp, #32]
 8010696:	2b00      	cmp	r3, #0
 8010698:	d1b8      	bne.n	801060c <_strtod_l+0x834>
 801069a:	e5c9      	b.n	8010230 <_strtod_l+0x458>
 801069c:	f04f 33ff 	mov.w	r3, #4294967295
 80106a0:	e7e8      	b.n	8010674 <_strtod_l+0x89c>
 80106a2:	4613      	mov	r3, r2
 80106a4:	e7e6      	b.n	8010674 <_strtod_l+0x89c>
 80106a6:	ea53 030a 	orrs.w	r3, r3, sl
 80106aa:	d0a1      	beq.n	80105f0 <_strtod_l+0x818>
 80106ac:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80106ae:	b1db      	cbz	r3, 80106e8 <_strtod_l+0x910>
 80106b0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80106b2:	4213      	tst	r3, r2
 80106b4:	d0ee      	beq.n	8010694 <_strtod_l+0x8bc>
 80106b6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80106b8:	4650      	mov	r0, sl
 80106ba:	9a08      	ldr	r2, [sp, #32]
 80106bc:	4659      	mov	r1, fp
 80106be:	b1bb      	cbz	r3, 80106f0 <_strtod_l+0x918>
 80106c0:	f7ff fb6a 	bl	800fd98 <sulp>
 80106c4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80106c8:	ec53 2b10 	vmov	r2, r3, d0
 80106cc:	f7ef fe02 	bl	80002d4 <__adddf3>
 80106d0:	4682      	mov	sl, r0
 80106d2:	468b      	mov	fp, r1
 80106d4:	e7de      	b.n	8010694 <_strtod_l+0x8bc>
 80106d6:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80106da:	f04f 3aff 	mov.w	sl, #4294967295
 80106de:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80106e2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80106e6:	e7d5      	b.n	8010694 <_strtod_l+0x8bc>
 80106e8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80106ea:	ea13 0f0a 	tst.w	r3, sl
 80106ee:	e7e1      	b.n	80106b4 <_strtod_l+0x8dc>
 80106f0:	f7ff fb52 	bl	800fd98 <sulp>
 80106f4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80106f8:	ec53 2b10 	vmov	r2, r3, d0
 80106fc:	f7ef fde8 	bl	80002d0 <__aeabi_dsub>
 8010700:	2200      	movs	r2, #0
 8010702:	2300      	movs	r3, #0
 8010704:	4682      	mov	sl, r0
 8010706:	468b      	mov	fp, r1
 8010708:	f7f0 fa02 	bl	8000b10 <__aeabi_dcmpeq>
 801070c:	2800      	cmp	r0, #0
 801070e:	d0c1      	beq.n	8010694 <_strtod_l+0x8bc>
 8010710:	e619      	b.n	8010346 <_strtod_l+0x56e>
 8010712:	4641      	mov	r1, r8
 8010714:	4620      	mov	r0, r4
 8010716:	f7ff fac9 	bl	800fcac <__ratio>
 801071a:	2200      	movs	r2, #0
 801071c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8010720:	ec57 6b10 	vmov	r6, r7, d0
 8010724:	4630      	mov	r0, r6
 8010726:	4639      	mov	r1, r7
 8010728:	f7f0 fa06 	bl	8000b38 <__aeabi_dcmple>
 801072c:	2800      	cmp	r0, #0
 801072e:	d06f      	beq.n	8010810 <_strtod_l+0xa38>
 8010730:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010732:	2b00      	cmp	r3, #0
 8010734:	d17a      	bne.n	801082c <_strtod_l+0xa54>
 8010736:	f1ba 0f00 	cmp.w	sl, #0
 801073a:	d158      	bne.n	80107ee <_strtod_l+0xa16>
 801073c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801073e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010742:	2b00      	cmp	r3, #0
 8010744:	d15a      	bne.n	80107fc <_strtod_l+0xa24>
 8010746:	2200      	movs	r2, #0
 8010748:	4b62      	ldr	r3, [pc, #392]	@ (80108d4 <_strtod_l+0xafc>)
 801074a:	4630      	mov	r0, r6
 801074c:	4639      	mov	r1, r7
 801074e:	f7f0 f9e9 	bl	8000b24 <__aeabi_dcmplt>
 8010752:	2800      	cmp	r0, #0
 8010754:	d159      	bne.n	801080a <_strtod_l+0xa32>
 8010756:	4630      	mov	r0, r6
 8010758:	4639      	mov	r1, r7
 801075a:	2200      	movs	r2, #0
 801075c:	4b5e      	ldr	r3, [pc, #376]	@ (80108d8 <_strtod_l+0xb00>)
 801075e:	f7ef ff6f 	bl	8000640 <__aeabi_dmul>
 8010762:	4606      	mov	r6, r0
 8010764:	460f      	mov	r7, r1
 8010766:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 801076a:	9606      	str	r6, [sp, #24]
 801076c:	9307      	str	r3, [sp, #28]
 801076e:	4d57      	ldr	r5, [pc, #348]	@ (80108cc <_strtod_l+0xaf4>)
 8010770:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010774:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8010778:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801077a:	401d      	ands	r5, r3
 801077c:	4b57      	ldr	r3, [pc, #348]	@ (80108dc <_strtod_l+0xb04>)
 801077e:	429d      	cmp	r5, r3
 8010780:	f040 80b0 	bne.w	80108e4 <_strtod_l+0xb0c>
 8010784:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010786:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 801078a:	ec4b ab10 	vmov	d0, sl, fp
 801078e:	f7ff f9c1 	bl	800fb14 <__ulp>
 8010792:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010796:	ec51 0b10 	vmov	r0, r1, d0
 801079a:	f7ef ff51 	bl	8000640 <__aeabi_dmul>
 801079e:	4652      	mov	r2, sl
 80107a0:	465b      	mov	r3, fp
 80107a2:	f7ef fd97 	bl	80002d4 <__adddf3>
 80107a6:	460b      	mov	r3, r1
 80107a8:	4948      	ldr	r1, [pc, #288]	@ (80108cc <_strtod_l+0xaf4>)
 80107aa:	4682      	mov	sl, r0
 80107ac:	4a4c      	ldr	r2, [pc, #304]	@ (80108e0 <_strtod_l+0xb08>)
 80107ae:	4019      	ands	r1, r3
 80107b0:	4291      	cmp	r1, r2
 80107b2:	d942      	bls.n	801083a <_strtod_l+0xa62>
 80107b4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80107b6:	4b46      	ldr	r3, [pc, #280]	@ (80108d0 <_strtod_l+0xaf8>)
 80107b8:	429a      	cmp	r2, r3
 80107ba:	d103      	bne.n	80107c4 <_strtod_l+0x9ec>
 80107bc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80107be:	3301      	adds	r3, #1
 80107c0:	f43f ad2b 	beq.w	801021a <_strtod_l+0x442>
 80107c4:	f8df b108 	ldr.w	fp, [pc, #264]	@ 80108d0 <_strtod_l+0xaf8>
 80107c8:	f04f 3aff 	mov.w	sl, #4294967295
 80107cc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80107ce:	9805      	ldr	r0, [sp, #20]
 80107d0:	f7fe fe66 	bl	800f4a0 <_Bfree>
 80107d4:	4649      	mov	r1, r9
 80107d6:	9805      	ldr	r0, [sp, #20]
 80107d8:	f7fe fe62 	bl	800f4a0 <_Bfree>
 80107dc:	4641      	mov	r1, r8
 80107de:	9805      	ldr	r0, [sp, #20]
 80107e0:	f7fe fe5e 	bl	800f4a0 <_Bfree>
 80107e4:	4621      	mov	r1, r4
 80107e6:	9805      	ldr	r0, [sp, #20]
 80107e8:	f7fe fe5a 	bl	800f4a0 <_Bfree>
 80107ec:	e618      	b.n	8010420 <_strtod_l+0x648>
 80107ee:	f1ba 0f01 	cmp.w	sl, #1
 80107f2:	d103      	bne.n	80107fc <_strtod_l+0xa24>
 80107f4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80107f6:	2b00      	cmp	r3, #0
 80107f8:	f43f ada5 	beq.w	8010346 <_strtod_l+0x56e>
 80107fc:	2600      	movs	r6, #0
 80107fe:	4f35      	ldr	r7, [pc, #212]	@ (80108d4 <_strtod_l+0xafc>)
 8010800:	ed9f 7b29 	vldr	d7, [pc, #164]	@ 80108a8 <_strtod_l+0xad0>
 8010804:	ed8d 7b06 	vstr	d7, [sp, #24]
 8010808:	e7b1      	b.n	801076e <_strtod_l+0x996>
 801080a:	2600      	movs	r6, #0
 801080c:	4f32      	ldr	r7, [pc, #200]	@ (80108d8 <_strtod_l+0xb00>)
 801080e:	e7aa      	b.n	8010766 <_strtod_l+0x98e>
 8010810:	4b31      	ldr	r3, [pc, #196]	@ (80108d8 <_strtod_l+0xb00>)
 8010812:	4630      	mov	r0, r6
 8010814:	4639      	mov	r1, r7
 8010816:	2200      	movs	r2, #0
 8010818:	f7ef ff12 	bl	8000640 <__aeabi_dmul>
 801081c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801081e:	4606      	mov	r6, r0
 8010820:	460f      	mov	r7, r1
 8010822:	2b00      	cmp	r3, #0
 8010824:	d09f      	beq.n	8010766 <_strtod_l+0x98e>
 8010826:	e9cd 6706 	strd	r6, r7, [sp, #24]
 801082a:	e7a0      	b.n	801076e <_strtod_l+0x996>
 801082c:	ed9f 7b20 	vldr	d7, [pc, #128]	@ 80108b0 <_strtod_l+0xad8>
 8010830:	ec57 6b17 	vmov	r6, r7, d7
 8010834:	ed8d 7b06 	vstr	d7, [sp, #24]
 8010838:	e799      	b.n	801076e <_strtod_l+0x996>
 801083a:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 801083e:	9b08      	ldr	r3, [sp, #32]
 8010840:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8010844:	2b00      	cmp	r3, #0
 8010846:	d1c1      	bne.n	80107cc <_strtod_l+0x9f4>
 8010848:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801084c:	0d1b      	lsrs	r3, r3, #20
 801084e:	051b      	lsls	r3, r3, #20
 8010850:	429d      	cmp	r5, r3
 8010852:	d1bb      	bne.n	80107cc <_strtod_l+0x9f4>
 8010854:	4630      	mov	r0, r6
 8010856:	4639      	mov	r1, r7
 8010858:	f7f0 fa52 	bl	8000d00 <__aeabi_d2lz>
 801085c:	f7ef fec2 	bl	80005e4 <__aeabi_l2d>
 8010860:	4602      	mov	r2, r0
 8010862:	460b      	mov	r3, r1
 8010864:	4630      	mov	r0, r6
 8010866:	4639      	mov	r1, r7
 8010868:	f3cb 0613 	ubfx	r6, fp, #0, #20
 801086c:	f7ef fd30 	bl	80002d0 <__aeabi_dsub>
 8010870:	460b      	mov	r3, r1
 8010872:	4602      	mov	r2, r0
 8010874:	ea46 060a 	orr.w	r6, r6, sl
 8010878:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 801087c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801087e:	431e      	orrs	r6, r3
 8010880:	d06d      	beq.n	801095e <_strtod_l+0xb86>
 8010882:	a30d      	add	r3, pc, #52	@ (adr r3, 80108b8 <_strtod_l+0xae0>)
 8010884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010888:	f7f0 f94c 	bl	8000b24 <__aeabi_dcmplt>
 801088c:	2800      	cmp	r0, #0
 801088e:	f47f accf 	bne.w	8010230 <_strtod_l+0x458>
 8010892:	a30b      	add	r3, pc, #44	@ (adr r3, 80108c0 <_strtod_l+0xae8>)
 8010894:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010898:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801089c:	f7f0 f960 	bl	8000b60 <__aeabi_dcmpgt>
 80108a0:	2800      	cmp	r0, #0
 80108a2:	d093      	beq.n	80107cc <_strtod_l+0x9f4>
 80108a4:	e4c4      	b.n	8010230 <_strtod_l+0x458>
 80108a6:	bf00      	nop
 80108a8:	00000000 	.word	0x00000000
 80108ac:	bff00000 	.word	0xbff00000
 80108b0:	00000000 	.word	0x00000000
 80108b4:	3ff00000 	.word	0x3ff00000
 80108b8:	94a03595 	.word	0x94a03595
 80108bc:	3fdfffff 	.word	0x3fdfffff
 80108c0:	35afe535 	.word	0x35afe535
 80108c4:	3fe00000 	.word	0x3fe00000
 80108c8:	000fffff 	.word	0x000fffff
 80108cc:	7ff00000 	.word	0x7ff00000
 80108d0:	7fefffff 	.word	0x7fefffff
 80108d4:	3ff00000 	.word	0x3ff00000
 80108d8:	3fe00000 	.word	0x3fe00000
 80108dc:	7fe00000 	.word	0x7fe00000
 80108e0:	7c9fffff 	.word	0x7c9fffff
 80108e4:	9b08      	ldr	r3, [sp, #32]
 80108e6:	b323      	cbz	r3, 8010932 <_strtod_l+0xb5a>
 80108e8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80108ec:	d821      	bhi.n	8010932 <_strtod_l+0xb5a>
 80108ee:	4630      	mov	r0, r6
 80108f0:	4639      	mov	r1, r7
 80108f2:	a327      	add	r3, pc, #156	@ (adr r3, 8010990 <_strtod_l+0xbb8>)
 80108f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108f8:	f7f0 f91e 	bl	8000b38 <__aeabi_dcmple>
 80108fc:	b1a0      	cbz	r0, 8010928 <_strtod_l+0xb50>
 80108fe:	4639      	mov	r1, r7
 8010900:	4630      	mov	r0, r6
 8010902:	f7f0 f975 	bl	8000bf0 <__aeabi_d2uiz>
 8010906:	2801      	cmp	r0, #1
 8010908:	bf38      	it	cc
 801090a:	2001      	movcc	r0, #1
 801090c:	f7ef fe1e 	bl	800054c <__aeabi_ui2d>
 8010910:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010912:	4606      	mov	r6, r0
 8010914:	460f      	mov	r7, r1
 8010916:	b9fb      	cbnz	r3, 8010958 <_strtod_l+0xb80>
 8010918:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801091c:	9014      	str	r0, [sp, #80]	@ 0x50
 801091e:	9315      	str	r3, [sp, #84]	@ 0x54
 8010920:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8010924:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8010928:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801092a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 801092e:	1b5b      	subs	r3, r3, r5
 8010930:	9311      	str	r3, [sp, #68]	@ 0x44
 8010932:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8010936:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 801093a:	f7ff f8eb 	bl	800fb14 <__ulp>
 801093e:	4650      	mov	r0, sl
 8010940:	4659      	mov	r1, fp
 8010942:	ec53 2b10 	vmov	r2, r3, d0
 8010946:	f7ef fe7b 	bl	8000640 <__aeabi_dmul>
 801094a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 801094e:	f7ef fcc1 	bl	80002d4 <__adddf3>
 8010952:	4682      	mov	sl, r0
 8010954:	468b      	mov	fp, r1
 8010956:	e772      	b.n	801083e <_strtod_l+0xa66>
 8010958:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 801095c:	e7e0      	b.n	8010920 <_strtod_l+0xb48>
 801095e:	a30e      	add	r3, pc, #56	@ (adr r3, 8010998 <_strtod_l+0xbc0>)
 8010960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010964:	f7f0 f8de 	bl	8000b24 <__aeabi_dcmplt>
 8010968:	e79a      	b.n	80108a0 <_strtod_l+0xac8>
 801096a:	2300      	movs	r3, #0
 801096c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801096e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010970:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8010972:	6013      	str	r3, [r2, #0]
 8010974:	f7ff ba6d 	b.w	800fe52 <_strtod_l+0x7a>
 8010978:	2a65      	cmp	r2, #101	@ 0x65
 801097a:	f43f ab67 	beq.w	801004c <_strtod_l+0x274>
 801097e:	2a45      	cmp	r2, #69	@ 0x45
 8010980:	f43f ab64 	beq.w	801004c <_strtod_l+0x274>
 8010984:	2301      	movs	r3, #1
 8010986:	f7ff bba0 	b.w	80100ca <_strtod_l+0x2f2>
 801098a:	bf00      	nop
 801098c:	f3af 8000 	nop.w
 8010990:	ffc00000 	.word	0xffc00000
 8010994:	41dfffff 	.word	0x41dfffff
 8010998:	94a03595 	.word	0x94a03595
 801099c:	3fcfffff 	.word	0x3fcfffff

080109a0 <_strtod_r>:
 80109a0:	4b01      	ldr	r3, [pc, #4]	@ (80109a8 <_strtod_r+0x8>)
 80109a2:	f7ff ba19 	b.w	800fdd8 <_strtod_l>
 80109a6:	bf00      	nop
 80109a8:	20000068 	.word	0x20000068

080109ac <_strtol_l.constprop.0>:
 80109ac:	2b24      	cmp	r3, #36	@ 0x24
 80109ae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80109b2:	4686      	mov	lr, r0
 80109b4:	4690      	mov	r8, r2
 80109b6:	d801      	bhi.n	80109bc <_strtol_l.constprop.0+0x10>
 80109b8:	2b01      	cmp	r3, #1
 80109ba:	d106      	bne.n	80109ca <_strtol_l.constprop.0+0x1e>
 80109bc:	f7fd fd9c 	bl	800e4f8 <__errno>
 80109c0:	2316      	movs	r3, #22
 80109c2:	6003      	str	r3, [r0, #0]
 80109c4:	2000      	movs	r0, #0
 80109c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80109ca:	460d      	mov	r5, r1
 80109cc:	4833      	ldr	r0, [pc, #204]	@ (8010a9c <_strtol_l.constprop.0+0xf0>)
 80109ce:	462a      	mov	r2, r5
 80109d0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80109d4:	5d06      	ldrb	r6, [r0, r4]
 80109d6:	f016 0608 	ands.w	r6, r6, #8
 80109da:	d1f8      	bne.n	80109ce <_strtol_l.constprop.0+0x22>
 80109dc:	2c2d      	cmp	r4, #45	@ 0x2d
 80109de:	d12d      	bne.n	8010a3c <_strtol_l.constprop.0+0x90>
 80109e0:	782c      	ldrb	r4, [r5, #0]
 80109e2:	2601      	movs	r6, #1
 80109e4:	1c95      	adds	r5, r2, #2
 80109e6:	f033 0210 	bics.w	r2, r3, #16
 80109ea:	d109      	bne.n	8010a00 <_strtol_l.constprop.0+0x54>
 80109ec:	2c30      	cmp	r4, #48	@ 0x30
 80109ee:	d12a      	bne.n	8010a46 <_strtol_l.constprop.0+0x9a>
 80109f0:	782a      	ldrb	r2, [r5, #0]
 80109f2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80109f6:	2a58      	cmp	r2, #88	@ 0x58
 80109f8:	d125      	bne.n	8010a46 <_strtol_l.constprop.0+0x9a>
 80109fa:	786c      	ldrb	r4, [r5, #1]
 80109fc:	2310      	movs	r3, #16
 80109fe:	3502      	adds	r5, #2
 8010a00:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8010a04:	2200      	movs	r2, #0
 8010a06:	f10c 3cff 	add.w	ip, ip, #4294967295
 8010a0a:	4610      	mov	r0, r2
 8010a0c:	fbbc f9f3 	udiv	r9, ip, r3
 8010a10:	fb03 ca19 	mls	sl, r3, r9, ip
 8010a14:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8010a18:	2f09      	cmp	r7, #9
 8010a1a:	d81b      	bhi.n	8010a54 <_strtol_l.constprop.0+0xa8>
 8010a1c:	463c      	mov	r4, r7
 8010a1e:	42a3      	cmp	r3, r4
 8010a20:	dd27      	ble.n	8010a72 <_strtol_l.constprop.0+0xc6>
 8010a22:	1c57      	adds	r7, r2, #1
 8010a24:	d007      	beq.n	8010a36 <_strtol_l.constprop.0+0x8a>
 8010a26:	4581      	cmp	r9, r0
 8010a28:	d320      	bcc.n	8010a6c <_strtol_l.constprop.0+0xc0>
 8010a2a:	d101      	bne.n	8010a30 <_strtol_l.constprop.0+0x84>
 8010a2c:	45a2      	cmp	sl, r4
 8010a2e:	db1d      	blt.n	8010a6c <_strtol_l.constprop.0+0xc0>
 8010a30:	fb00 4003 	mla	r0, r0, r3, r4
 8010a34:	2201      	movs	r2, #1
 8010a36:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010a3a:	e7eb      	b.n	8010a14 <_strtol_l.constprop.0+0x68>
 8010a3c:	2c2b      	cmp	r4, #43	@ 0x2b
 8010a3e:	bf04      	itt	eq
 8010a40:	782c      	ldrbeq	r4, [r5, #0]
 8010a42:	1c95      	addeq	r5, r2, #2
 8010a44:	e7cf      	b.n	80109e6 <_strtol_l.constprop.0+0x3a>
 8010a46:	2b00      	cmp	r3, #0
 8010a48:	d1da      	bne.n	8010a00 <_strtol_l.constprop.0+0x54>
 8010a4a:	2c30      	cmp	r4, #48	@ 0x30
 8010a4c:	bf0c      	ite	eq
 8010a4e:	2308      	moveq	r3, #8
 8010a50:	230a      	movne	r3, #10
 8010a52:	e7d5      	b.n	8010a00 <_strtol_l.constprop.0+0x54>
 8010a54:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8010a58:	2f19      	cmp	r7, #25
 8010a5a:	d801      	bhi.n	8010a60 <_strtol_l.constprop.0+0xb4>
 8010a5c:	3c37      	subs	r4, #55	@ 0x37
 8010a5e:	e7de      	b.n	8010a1e <_strtol_l.constprop.0+0x72>
 8010a60:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8010a64:	2f19      	cmp	r7, #25
 8010a66:	d804      	bhi.n	8010a72 <_strtol_l.constprop.0+0xc6>
 8010a68:	3c57      	subs	r4, #87	@ 0x57
 8010a6a:	e7d8      	b.n	8010a1e <_strtol_l.constprop.0+0x72>
 8010a6c:	f04f 32ff 	mov.w	r2, #4294967295
 8010a70:	e7e1      	b.n	8010a36 <_strtol_l.constprop.0+0x8a>
 8010a72:	1c53      	adds	r3, r2, #1
 8010a74:	d108      	bne.n	8010a88 <_strtol_l.constprop.0+0xdc>
 8010a76:	2322      	movs	r3, #34	@ 0x22
 8010a78:	4660      	mov	r0, ip
 8010a7a:	f8ce 3000 	str.w	r3, [lr]
 8010a7e:	f1b8 0f00 	cmp.w	r8, #0
 8010a82:	d0a0      	beq.n	80109c6 <_strtol_l.constprop.0+0x1a>
 8010a84:	1e69      	subs	r1, r5, #1
 8010a86:	e006      	b.n	8010a96 <_strtol_l.constprop.0+0xea>
 8010a88:	b106      	cbz	r6, 8010a8c <_strtol_l.constprop.0+0xe0>
 8010a8a:	4240      	negs	r0, r0
 8010a8c:	f1b8 0f00 	cmp.w	r8, #0
 8010a90:	d099      	beq.n	80109c6 <_strtol_l.constprop.0+0x1a>
 8010a92:	2a00      	cmp	r2, #0
 8010a94:	d1f6      	bne.n	8010a84 <_strtol_l.constprop.0+0xd8>
 8010a96:	f8c8 1000 	str.w	r1, [r8]
 8010a9a:	e794      	b.n	80109c6 <_strtol_l.constprop.0+0x1a>
 8010a9c:	08011fc9 	.word	0x08011fc9

08010aa0 <_strtol_r>:
 8010aa0:	f7ff bf84 	b.w	80109ac <_strtol_l.constprop.0>

08010aa4 <__ssputs_r>:
 8010aa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010aa8:	461f      	mov	r7, r3
 8010aaa:	688e      	ldr	r6, [r1, #8]
 8010aac:	4682      	mov	sl, r0
 8010aae:	460c      	mov	r4, r1
 8010ab0:	42be      	cmp	r6, r7
 8010ab2:	4690      	mov	r8, r2
 8010ab4:	680b      	ldr	r3, [r1, #0]
 8010ab6:	d82d      	bhi.n	8010b14 <__ssputs_r+0x70>
 8010ab8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010abc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8010ac0:	d026      	beq.n	8010b10 <__ssputs_r+0x6c>
 8010ac2:	6965      	ldr	r5, [r4, #20]
 8010ac4:	6909      	ldr	r1, [r1, #16]
 8010ac6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010aca:	eba3 0901 	sub.w	r9, r3, r1
 8010ace:	1c7b      	adds	r3, r7, #1
 8010ad0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010ad4:	444b      	add	r3, r9
 8010ad6:	106d      	asrs	r5, r5, #1
 8010ad8:	429d      	cmp	r5, r3
 8010ada:	bf38      	it	cc
 8010adc:	461d      	movcc	r5, r3
 8010ade:	0553      	lsls	r3, r2, #21
 8010ae0:	d527      	bpl.n	8010b32 <__ssputs_r+0x8e>
 8010ae2:	4629      	mov	r1, r5
 8010ae4:	f7fe fc10 	bl	800f308 <_malloc_r>
 8010ae8:	4606      	mov	r6, r0
 8010aea:	b360      	cbz	r0, 8010b46 <__ssputs_r+0xa2>
 8010aec:	464a      	mov	r2, r9
 8010aee:	6921      	ldr	r1, [r4, #16]
 8010af0:	f000 fa18 	bl	8010f24 <memcpy>
 8010af4:	89a3      	ldrh	r3, [r4, #12]
 8010af6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8010afa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010afe:	81a3      	strh	r3, [r4, #12]
 8010b00:	6126      	str	r6, [r4, #16]
 8010b02:	444e      	add	r6, r9
 8010b04:	6165      	str	r5, [r4, #20]
 8010b06:	eba5 0509 	sub.w	r5, r5, r9
 8010b0a:	6026      	str	r6, [r4, #0]
 8010b0c:	463e      	mov	r6, r7
 8010b0e:	60a5      	str	r5, [r4, #8]
 8010b10:	42be      	cmp	r6, r7
 8010b12:	d900      	bls.n	8010b16 <__ssputs_r+0x72>
 8010b14:	463e      	mov	r6, r7
 8010b16:	4632      	mov	r2, r6
 8010b18:	4641      	mov	r1, r8
 8010b1a:	6820      	ldr	r0, [r4, #0]
 8010b1c:	f000 f9c6 	bl	8010eac <memmove>
 8010b20:	68a3      	ldr	r3, [r4, #8]
 8010b22:	2000      	movs	r0, #0
 8010b24:	1b9b      	subs	r3, r3, r6
 8010b26:	60a3      	str	r3, [r4, #8]
 8010b28:	6823      	ldr	r3, [r4, #0]
 8010b2a:	4433      	add	r3, r6
 8010b2c:	6023      	str	r3, [r4, #0]
 8010b2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010b32:	462a      	mov	r2, r5
 8010b34:	f000 fd85 	bl	8011642 <_realloc_r>
 8010b38:	4606      	mov	r6, r0
 8010b3a:	2800      	cmp	r0, #0
 8010b3c:	d1e0      	bne.n	8010b00 <__ssputs_r+0x5c>
 8010b3e:	6921      	ldr	r1, [r4, #16]
 8010b40:	4650      	mov	r0, sl
 8010b42:	f7fe fb6d 	bl	800f220 <_free_r>
 8010b46:	230c      	movs	r3, #12
 8010b48:	f04f 30ff 	mov.w	r0, #4294967295
 8010b4c:	f8ca 3000 	str.w	r3, [sl]
 8010b50:	89a3      	ldrh	r3, [r4, #12]
 8010b52:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010b56:	81a3      	strh	r3, [r4, #12]
 8010b58:	e7e9      	b.n	8010b2e <__ssputs_r+0x8a>
	...

08010b5c <_svfiprintf_r>:
 8010b5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b60:	4698      	mov	r8, r3
 8010b62:	898b      	ldrh	r3, [r1, #12]
 8010b64:	b09d      	sub	sp, #116	@ 0x74
 8010b66:	4607      	mov	r7, r0
 8010b68:	061b      	lsls	r3, r3, #24
 8010b6a:	460d      	mov	r5, r1
 8010b6c:	4614      	mov	r4, r2
 8010b6e:	d510      	bpl.n	8010b92 <_svfiprintf_r+0x36>
 8010b70:	690b      	ldr	r3, [r1, #16]
 8010b72:	b973      	cbnz	r3, 8010b92 <_svfiprintf_r+0x36>
 8010b74:	2140      	movs	r1, #64	@ 0x40
 8010b76:	f7fe fbc7 	bl	800f308 <_malloc_r>
 8010b7a:	6028      	str	r0, [r5, #0]
 8010b7c:	6128      	str	r0, [r5, #16]
 8010b7e:	b930      	cbnz	r0, 8010b8e <_svfiprintf_r+0x32>
 8010b80:	230c      	movs	r3, #12
 8010b82:	603b      	str	r3, [r7, #0]
 8010b84:	f04f 30ff 	mov.w	r0, #4294967295
 8010b88:	b01d      	add	sp, #116	@ 0x74
 8010b8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b8e:	2340      	movs	r3, #64	@ 0x40
 8010b90:	616b      	str	r3, [r5, #20]
 8010b92:	2300      	movs	r3, #0
 8010b94:	f8cd 800c 	str.w	r8, [sp, #12]
 8010b98:	f04f 0901 	mov.w	r9, #1
 8010b9c:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 8010d40 <_svfiprintf_r+0x1e4>
 8010ba0:	9309      	str	r3, [sp, #36]	@ 0x24
 8010ba2:	2320      	movs	r3, #32
 8010ba4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010ba8:	2330      	movs	r3, #48	@ 0x30
 8010baa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010bae:	4623      	mov	r3, r4
 8010bb0:	469a      	mov	sl, r3
 8010bb2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010bb6:	b10a      	cbz	r2, 8010bbc <_svfiprintf_r+0x60>
 8010bb8:	2a25      	cmp	r2, #37	@ 0x25
 8010bba:	d1f9      	bne.n	8010bb0 <_svfiprintf_r+0x54>
 8010bbc:	ebba 0b04 	subs.w	fp, sl, r4
 8010bc0:	d00b      	beq.n	8010bda <_svfiprintf_r+0x7e>
 8010bc2:	465b      	mov	r3, fp
 8010bc4:	4622      	mov	r2, r4
 8010bc6:	4629      	mov	r1, r5
 8010bc8:	4638      	mov	r0, r7
 8010bca:	f7ff ff6b 	bl	8010aa4 <__ssputs_r>
 8010bce:	3001      	adds	r0, #1
 8010bd0:	f000 80a7 	beq.w	8010d22 <_svfiprintf_r+0x1c6>
 8010bd4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010bd6:	445a      	add	r2, fp
 8010bd8:	9209      	str	r2, [sp, #36]	@ 0x24
 8010bda:	f89a 3000 	ldrb.w	r3, [sl]
 8010bde:	2b00      	cmp	r3, #0
 8010be0:	f000 809f 	beq.w	8010d22 <_svfiprintf_r+0x1c6>
 8010be4:	2300      	movs	r3, #0
 8010be6:	f04f 32ff 	mov.w	r2, #4294967295
 8010bea:	f10a 0a01 	add.w	sl, sl, #1
 8010bee:	9304      	str	r3, [sp, #16]
 8010bf0:	9307      	str	r3, [sp, #28]
 8010bf2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010bf6:	931a      	str	r3, [sp, #104]	@ 0x68
 8010bf8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010bfc:	4654      	mov	r4, sl
 8010bfe:	2205      	movs	r2, #5
 8010c00:	484f      	ldr	r0, [pc, #316]	@ (8010d40 <_svfiprintf_r+0x1e4>)
 8010c02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010c06:	f7fd fca4 	bl	800e552 <memchr>
 8010c0a:	9a04      	ldr	r2, [sp, #16]
 8010c0c:	b9d8      	cbnz	r0, 8010c46 <_svfiprintf_r+0xea>
 8010c0e:	06d0      	lsls	r0, r2, #27
 8010c10:	bf44      	itt	mi
 8010c12:	2320      	movmi	r3, #32
 8010c14:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010c18:	0711      	lsls	r1, r2, #28
 8010c1a:	bf44      	itt	mi
 8010c1c:	232b      	movmi	r3, #43	@ 0x2b
 8010c1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010c22:	f89a 3000 	ldrb.w	r3, [sl]
 8010c26:	2b2a      	cmp	r3, #42	@ 0x2a
 8010c28:	d015      	beq.n	8010c56 <_svfiprintf_r+0xfa>
 8010c2a:	9a07      	ldr	r2, [sp, #28]
 8010c2c:	4654      	mov	r4, sl
 8010c2e:	2000      	movs	r0, #0
 8010c30:	f04f 0c0a 	mov.w	ip, #10
 8010c34:	4621      	mov	r1, r4
 8010c36:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010c3a:	3b30      	subs	r3, #48	@ 0x30
 8010c3c:	2b09      	cmp	r3, #9
 8010c3e:	d94b      	bls.n	8010cd8 <_svfiprintf_r+0x17c>
 8010c40:	b1b0      	cbz	r0, 8010c70 <_svfiprintf_r+0x114>
 8010c42:	9207      	str	r2, [sp, #28]
 8010c44:	e014      	b.n	8010c70 <_svfiprintf_r+0x114>
 8010c46:	eba0 0308 	sub.w	r3, r0, r8
 8010c4a:	46a2      	mov	sl, r4
 8010c4c:	fa09 f303 	lsl.w	r3, r9, r3
 8010c50:	4313      	orrs	r3, r2
 8010c52:	9304      	str	r3, [sp, #16]
 8010c54:	e7d2      	b.n	8010bfc <_svfiprintf_r+0xa0>
 8010c56:	9b03      	ldr	r3, [sp, #12]
 8010c58:	1d19      	adds	r1, r3, #4
 8010c5a:	681b      	ldr	r3, [r3, #0]
 8010c5c:	2b00      	cmp	r3, #0
 8010c5e:	9103      	str	r1, [sp, #12]
 8010c60:	bfbb      	ittet	lt
 8010c62:	425b      	neglt	r3, r3
 8010c64:	f042 0202 	orrlt.w	r2, r2, #2
 8010c68:	9307      	strge	r3, [sp, #28]
 8010c6a:	9307      	strlt	r3, [sp, #28]
 8010c6c:	bfb8      	it	lt
 8010c6e:	9204      	strlt	r2, [sp, #16]
 8010c70:	7823      	ldrb	r3, [r4, #0]
 8010c72:	2b2e      	cmp	r3, #46	@ 0x2e
 8010c74:	d10a      	bne.n	8010c8c <_svfiprintf_r+0x130>
 8010c76:	7863      	ldrb	r3, [r4, #1]
 8010c78:	2b2a      	cmp	r3, #42	@ 0x2a
 8010c7a:	d132      	bne.n	8010ce2 <_svfiprintf_r+0x186>
 8010c7c:	9b03      	ldr	r3, [sp, #12]
 8010c7e:	3402      	adds	r4, #2
 8010c80:	1d1a      	adds	r2, r3, #4
 8010c82:	681b      	ldr	r3, [r3, #0]
 8010c84:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010c88:	9203      	str	r2, [sp, #12]
 8010c8a:	9305      	str	r3, [sp, #20]
 8010c8c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8010d50 <_svfiprintf_r+0x1f4>
 8010c90:	2203      	movs	r2, #3
 8010c92:	7821      	ldrb	r1, [r4, #0]
 8010c94:	4650      	mov	r0, sl
 8010c96:	f7fd fc5c 	bl	800e552 <memchr>
 8010c9a:	b138      	cbz	r0, 8010cac <_svfiprintf_r+0x150>
 8010c9c:	eba0 000a 	sub.w	r0, r0, sl
 8010ca0:	2240      	movs	r2, #64	@ 0x40
 8010ca2:	9b04      	ldr	r3, [sp, #16]
 8010ca4:	3401      	adds	r4, #1
 8010ca6:	4082      	lsls	r2, r0
 8010ca8:	4313      	orrs	r3, r2
 8010caa:	9304      	str	r3, [sp, #16]
 8010cac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010cb0:	2206      	movs	r2, #6
 8010cb2:	4824      	ldr	r0, [pc, #144]	@ (8010d44 <_svfiprintf_r+0x1e8>)
 8010cb4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010cb8:	f7fd fc4b 	bl	800e552 <memchr>
 8010cbc:	2800      	cmp	r0, #0
 8010cbe:	d036      	beq.n	8010d2e <_svfiprintf_r+0x1d2>
 8010cc0:	4b21      	ldr	r3, [pc, #132]	@ (8010d48 <_svfiprintf_r+0x1ec>)
 8010cc2:	bb1b      	cbnz	r3, 8010d0c <_svfiprintf_r+0x1b0>
 8010cc4:	9b03      	ldr	r3, [sp, #12]
 8010cc6:	3307      	adds	r3, #7
 8010cc8:	f023 0307 	bic.w	r3, r3, #7
 8010ccc:	3308      	adds	r3, #8
 8010cce:	9303      	str	r3, [sp, #12]
 8010cd0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010cd2:	4433      	add	r3, r6
 8010cd4:	9309      	str	r3, [sp, #36]	@ 0x24
 8010cd6:	e76a      	b.n	8010bae <_svfiprintf_r+0x52>
 8010cd8:	fb0c 3202 	mla	r2, ip, r2, r3
 8010cdc:	460c      	mov	r4, r1
 8010cde:	2001      	movs	r0, #1
 8010ce0:	e7a8      	b.n	8010c34 <_svfiprintf_r+0xd8>
 8010ce2:	2300      	movs	r3, #0
 8010ce4:	3401      	adds	r4, #1
 8010ce6:	f04f 0c0a 	mov.w	ip, #10
 8010cea:	4619      	mov	r1, r3
 8010cec:	9305      	str	r3, [sp, #20]
 8010cee:	4620      	mov	r0, r4
 8010cf0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010cf4:	3a30      	subs	r2, #48	@ 0x30
 8010cf6:	2a09      	cmp	r2, #9
 8010cf8:	d903      	bls.n	8010d02 <_svfiprintf_r+0x1a6>
 8010cfa:	2b00      	cmp	r3, #0
 8010cfc:	d0c6      	beq.n	8010c8c <_svfiprintf_r+0x130>
 8010cfe:	9105      	str	r1, [sp, #20]
 8010d00:	e7c4      	b.n	8010c8c <_svfiprintf_r+0x130>
 8010d02:	fb0c 2101 	mla	r1, ip, r1, r2
 8010d06:	4604      	mov	r4, r0
 8010d08:	2301      	movs	r3, #1
 8010d0a:	e7f0      	b.n	8010cee <_svfiprintf_r+0x192>
 8010d0c:	ab03      	add	r3, sp, #12
 8010d0e:	462a      	mov	r2, r5
 8010d10:	a904      	add	r1, sp, #16
 8010d12:	4638      	mov	r0, r7
 8010d14:	9300      	str	r3, [sp, #0]
 8010d16:	4b0d      	ldr	r3, [pc, #52]	@ (8010d4c <_svfiprintf_r+0x1f0>)
 8010d18:	f7fc fca8 	bl	800d66c <_printf_float>
 8010d1c:	1c42      	adds	r2, r0, #1
 8010d1e:	4606      	mov	r6, r0
 8010d20:	d1d6      	bne.n	8010cd0 <_svfiprintf_r+0x174>
 8010d22:	89ab      	ldrh	r3, [r5, #12]
 8010d24:	065b      	lsls	r3, r3, #25
 8010d26:	f53f af2d 	bmi.w	8010b84 <_svfiprintf_r+0x28>
 8010d2a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010d2c:	e72c      	b.n	8010b88 <_svfiprintf_r+0x2c>
 8010d2e:	ab03      	add	r3, sp, #12
 8010d30:	462a      	mov	r2, r5
 8010d32:	a904      	add	r1, sp, #16
 8010d34:	4638      	mov	r0, r7
 8010d36:	9300      	str	r3, [sp, #0]
 8010d38:	4b04      	ldr	r3, [pc, #16]	@ (8010d4c <_svfiprintf_r+0x1f0>)
 8010d3a:	f7fc ff33 	bl	800dba4 <_printf_i>
 8010d3e:	e7ed      	b.n	8010d1c <_svfiprintf_r+0x1c0>
 8010d40:	080120c9 	.word	0x080120c9
 8010d44:	080120d3 	.word	0x080120d3
 8010d48:	0800d66d 	.word	0x0800d66d
 8010d4c:	08010aa5 	.word	0x08010aa5
 8010d50:	080120cf 	.word	0x080120cf

08010d54 <__sflush_r>:
 8010d54:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010d58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010d5c:	0716      	lsls	r6, r2, #28
 8010d5e:	4605      	mov	r5, r0
 8010d60:	460c      	mov	r4, r1
 8010d62:	d454      	bmi.n	8010e0e <__sflush_r+0xba>
 8010d64:	684b      	ldr	r3, [r1, #4]
 8010d66:	2b00      	cmp	r3, #0
 8010d68:	dc02      	bgt.n	8010d70 <__sflush_r+0x1c>
 8010d6a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8010d6c:	2b00      	cmp	r3, #0
 8010d6e:	dd48      	ble.n	8010e02 <__sflush_r+0xae>
 8010d70:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010d72:	2e00      	cmp	r6, #0
 8010d74:	d045      	beq.n	8010e02 <__sflush_r+0xae>
 8010d76:	2300      	movs	r3, #0
 8010d78:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8010d7c:	682f      	ldr	r7, [r5, #0]
 8010d7e:	6a21      	ldr	r1, [r4, #32]
 8010d80:	602b      	str	r3, [r5, #0]
 8010d82:	d030      	beq.n	8010de6 <__sflush_r+0x92>
 8010d84:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8010d86:	89a3      	ldrh	r3, [r4, #12]
 8010d88:	0759      	lsls	r1, r3, #29
 8010d8a:	d505      	bpl.n	8010d98 <__sflush_r+0x44>
 8010d8c:	6863      	ldr	r3, [r4, #4]
 8010d8e:	1ad2      	subs	r2, r2, r3
 8010d90:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8010d92:	b10b      	cbz	r3, 8010d98 <__sflush_r+0x44>
 8010d94:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8010d96:	1ad2      	subs	r2, r2, r3
 8010d98:	2300      	movs	r3, #0
 8010d9a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010d9c:	6a21      	ldr	r1, [r4, #32]
 8010d9e:	4628      	mov	r0, r5
 8010da0:	47b0      	blx	r6
 8010da2:	1c43      	adds	r3, r0, #1
 8010da4:	89a3      	ldrh	r3, [r4, #12]
 8010da6:	d106      	bne.n	8010db6 <__sflush_r+0x62>
 8010da8:	6829      	ldr	r1, [r5, #0]
 8010daa:	291d      	cmp	r1, #29
 8010dac:	d82b      	bhi.n	8010e06 <__sflush_r+0xb2>
 8010dae:	4a2a      	ldr	r2, [pc, #168]	@ (8010e58 <__sflush_r+0x104>)
 8010db0:	410a      	asrs	r2, r1
 8010db2:	07d6      	lsls	r6, r2, #31
 8010db4:	d427      	bmi.n	8010e06 <__sflush_r+0xb2>
 8010db6:	2200      	movs	r2, #0
 8010db8:	04d9      	lsls	r1, r3, #19
 8010dba:	6062      	str	r2, [r4, #4]
 8010dbc:	6922      	ldr	r2, [r4, #16]
 8010dbe:	6022      	str	r2, [r4, #0]
 8010dc0:	d504      	bpl.n	8010dcc <__sflush_r+0x78>
 8010dc2:	1c42      	adds	r2, r0, #1
 8010dc4:	d101      	bne.n	8010dca <__sflush_r+0x76>
 8010dc6:	682b      	ldr	r3, [r5, #0]
 8010dc8:	b903      	cbnz	r3, 8010dcc <__sflush_r+0x78>
 8010dca:	6560      	str	r0, [r4, #84]	@ 0x54
 8010dcc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010dce:	602f      	str	r7, [r5, #0]
 8010dd0:	b1b9      	cbz	r1, 8010e02 <__sflush_r+0xae>
 8010dd2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010dd6:	4299      	cmp	r1, r3
 8010dd8:	d002      	beq.n	8010de0 <__sflush_r+0x8c>
 8010dda:	4628      	mov	r0, r5
 8010ddc:	f7fe fa20 	bl	800f220 <_free_r>
 8010de0:	2300      	movs	r3, #0
 8010de2:	6363      	str	r3, [r4, #52]	@ 0x34
 8010de4:	e00d      	b.n	8010e02 <__sflush_r+0xae>
 8010de6:	2301      	movs	r3, #1
 8010de8:	4628      	mov	r0, r5
 8010dea:	47b0      	blx	r6
 8010dec:	4602      	mov	r2, r0
 8010dee:	1c50      	adds	r0, r2, #1
 8010df0:	d1c9      	bne.n	8010d86 <__sflush_r+0x32>
 8010df2:	682b      	ldr	r3, [r5, #0]
 8010df4:	2b00      	cmp	r3, #0
 8010df6:	d0c6      	beq.n	8010d86 <__sflush_r+0x32>
 8010df8:	2b1d      	cmp	r3, #29
 8010dfa:	d001      	beq.n	8010e00 <__sflush_r+0xac>
 8010dfc:	2b16      	cmp	r3, #22
 8010dfe:	d11d      	bne.n	8010e3c <__sflush_r+0xe8>
 8010e00:	602f      	str	r7, [r5, #0]
 8010e02:	2000      	movs	r0, #0
 8010e04:	e021      	b.n	8010e4a <__sflush_r+0xf6>
 8010e06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010e0a:	b21b      	sxth	r3, r3
 8010e0c:	e01a      	b.n	8010e44 <__sflush_r+0xf0>
 8010e0e:	690f      	ldr	r7, [r1, #16]
 8010e10:	2f00      	cmp	r7, #0
 8010e12:	d0f6      	beq.n	8010e02 <__sflush_r+0xae>
 8010e14:	0793      	lsls	r3, r2, #30
 8010e16:	680e      	ldr	r6, [r1, #0]
 8010e18:	600f      	str	r7, [r1, #0]
 8010e1a:	bf0c      	ite	eq
 8010e1c:	694b      	ldreq	r3, [r1, #20]
 8010e1e:	2300      	movne	r3, #0
 8010e20:	eba6 0807 	sub.w	r8, r6, r7
 8010e24:	608b      	str	r3, [r1, #8]
 8010e26:	f1b8 0f00 	cmp.w	r8, #0
 8010e2a:	ddea      	ble.n	8010e02 <__sflush_r+0xae>
 8010e2c:	4643      	mov	r3, r8
 8010e2e:	463a      	mov	r2, r7
 8010e30:	6a21      	ldr	r1, [r4, #32]
 8010e32:	4628      	mov	r0, r5
 8010e34:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8010e36:	47b0      	blx	r6
 8010e38:	2800      	cmp	r0, #0
 8010e3a:	dc08      	bgt.n	8010e4e <__sflush_r+0xfa>
 8010e3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010e40:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010e44:	f04f 30ff 	mov.w	r0, #4294967295
 8010e48:	81a3      	strh	r3, [r4, #12]
 8010e4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010e4e:	4407      	add	r7, r0
 8010e50:	eba8 0800 	sub.w	r8, r8, r0
 8010e54:	e7e7      	b.n	8010e26 <__sflush_r+0xd2>
 8010e56:	bf00      	nop
 8010e58:	dfbffffe 	.word	0xdfbffffe

08010e5c <_fflush_r>:
 8010e5c:	b538      	push	{r3, r4, r5, lr}
 8010e5e:	690b      	ldr	r3, [r1, #16]
 8010e60:	4605      	mov	r5, r0
 8010e62:	460c      	mov	r4, r1
 8010e64:	b913      	cbnz	r3, 8010e6c <_fflush_r+0x10>
 8010e66:	2500      	movs	r5, #0
 8010e68:	4628      	mov	r0, r5
 8010e6a:	bd38      	pop	{r3, r4, r5, pc}
 8010e6c:	b118      	cbz	r0, 8010e76 <_fflush_r+0x1a>
 8010e6e:	6a03      	ldr	r3, [r0, #32]
 8010e70:	b90b      	cbnz	r3, 8010e76 <_fflush_r+0x1a>
 8010e72:	f7fd fa55 	bl	800e320 <__sinit>
 8010e76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010e7a:	2b00      	cmp	r3, #0
 8010e7c:	d0f3      	beq.n	8010e66 <_fflush_r+0xa>
 8010e7e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8010e80:	07d0      	lsls	r0, r2, #31
 8010e82:	d404      	bmi.n	8010e8e <_fflush_r+0x32>
 8010e84:	0599      	lsls	r1, r3, #22
 8010e86:	d402      	bmi.n	8010e8e <_fflush_r+0x32>
 8010e88:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010e8a:	f7fd fb60 	bl	800e54e <__retarget_lock_acquire_recursive>
 8010e8e:	4628      	mov	r0, r5
 8010e90:	4621      	mov	r1, r4
 8010e92:	f7ff ff5f 	bl	8010d54 <__sflush_r>
 8010e96:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010e98:	4605      	mov	r5, r0
 8010e9a:	07da      	lsls	r2, r3, #31
 8010e9c:	d4e4      	bmi.n	8010e68 <_fflush_r+0xc>
 8010e9e:	89a3      	ldrh	r3, [r4, #12]
 8010ea0:	059b      	lsls	r3, r3, #22
 8010ea2:	d4e1      	bmi.n	8010e68 <_fflush_r+0xc>
 8010ea4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010ea6:	f7fd fb53 	bl	800e550 <__retarget_lock_release_recursive>
 8010eaa:	e7dd      	b.n	8010e68 <_fflush_r+0xc>

08010eac <memmove>:
 8010eac:	4288      	cmp	r0, r1
 8010eae:	b510      	push	{r4, lr}
 8010eb0:	eb01 0402 	add.w	r4, r1, r2
 8010eb4:	d902      	bls.n	8010ebc <memmove+0x10>
 8010eb6:	4284      	cmp	r4, r0
 8010eb8:	4623      	mov	r3, r4
 8010eba:	d807      	bhi.n	8010ecc <memmove+0x20>
 8010ebc:	1e43      	subs	r3, r0, #1
 8010ebe:	42a1      	cmp	r1, r4
 8010ec0:	d008      	beq.n	8010ed4 <memmove+0x28>
 8010ec2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010ec6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010eca:	e7f8      	b.n	8010ebe <memmove+0x12>
 8010ecc:	4402      	add	r2, r0
 8010ece:	4601      	mov	r1, r0
 8010ed0:	428a      	cmp	r2, r1
 8010ed2:	d100      	bne.n	8010ed6 <memmove+0x2a>
 8010ed4:	bd10      	pop	{r4, pc}
 8010ed6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010eda:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010ede:	e7f7      	b.n	8010ed0 <memmove+0x24>

08010ee0 <strncmp>:
 8010ee0:	b510      	push	{r4, lr}
 8010ee2:	b16a      	cbz	r2, 8010f00 <strncmp+0x20>
 8010ee4:	3901      	subs	r1, #1
 8010ee6:	1884      	adds	r4, r0, r2
 8010ee8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010eec:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8010ef0:	429a      	cmp	r2, r3
 8010ef2:	d103      	bne.n	8010efc <strncmp+0x1c>
 8010ef4:	42a0      	cmp	r0, r4
 8010ef6:	d001      	beq.n	8010efc <strncmp+0x1c>
 8010ef8:	2a00      	cmp	r2, #0
 8010efa:	d1f5      	bne.n	8010ee8 <strncmp+0x8>
 8010efc:	1ad0      	subs	r0, r2, r3
 8010efe:	bd10      	pop	{r4, pc}
 8010f00:	4610      	mov	r0, r2
 8010f02:	e7fc      	b.n	8010efe <strncmp+0x1e>

08010f04 <_sbrk_r>:
 8010f04:	b538      	push	{r3, r4, r5, lr}
 8010f06:	2300      	movs	r3, #0
 8010f08:	4d05      	ldr	r5, [pc, #20]	@ (8010f20 <_sbrk_r+0x1c>)
 8010f0a:	4604      	mov	r4, r0
 8010f0c:	4608      	mov	r0, r1
 8010f0e:	602b      	str	r3, [r5, #0]
 8010f10:	f7f1 f98a 	bl	8002228 <_sbrk>
 8010f14:	1c43      	adds	r3, r0, #1
 8010f16:	d102      	bne.n	8010f1e <_sbrk_r+0x1a>
 8010f18:	682b      	ldr	r3, [r5, #0]
 8010f1a:	b103      	cbz	r3, 8010f1e <_sbrk_r+0x1a>
 8010f1c:	6023      	str	r3, [r4, #0]
 8010f1e:	bd38      	pop	{r3, r4, r5, pc}
 8010f20:	20000d18 	.word	0x20000d18

08010f24 <memcpy>:
 8010f24:	440a      	add	r2, r1
 8010f26:	1e43      	subs	r3, r0, #1
 8010f28:	4291      	cmp	r1, r2
 8010f2a:	d100      	bne.n	8010f2e <memcpy+0xa>
 8010f2c:	4770      	bx	lr
 8010f2e:	b510      	push	{r4, lr}
 8010f30:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010f34:	4291      	cmp	r1, r2
 8010f36:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010f3a:	d1f9      	bne.n	8010f30 <memcpy+0xc>
 8010f3c:	bd10      	pop	{r4, pc}
	...

08010f40 <nan>:
 8010f40:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8010f48 <nan+0x8>
 8010f44:	4770      	bx	lr
 8010f46:	bf00      	nop
 8010f48:	00000000 	.word	0x00000000
 8010f4c:	7ff80000 	.word	0x7ff80000

08010f50 <__assert_func>:
 8010f50:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010f52:	4614      	mov	r4, r2
 8010f54:	461a      	mov	r2, r3
 8010f56:	4b09      	ldr	r3, [pc, #36]	@ (8010f7c <__assert_func+0x2c>)
 8010f58:	4605      	mov	r5, r0
 8010f5a:	681b      	ldr	r3, [r3, #0]
 8010f5c:	68d8      	ldr	r0, [r3, #12]
 8010f5e:	b954      	cbnz	r4, 8010f76 <__assert_func+0x26>
 8010f60:	4b07      	ldr	r3, [pc, #28]	@ (8010f80 <__assert_func+0x30>)
 8010f62:	461c      	mov	r4, r3
 8010f64:	9100      	str	r1, [sp, #0]
 8010f66:	4907      	ldr	r1, [pc, #28]	@ (8010f84 <__assert_func+0x34>)
 8010f68:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010f6c:	462b      	mov	r3, r5
 8010f6e:	f000 fba3 	bl	80116b8 <fiprintf>
 8010f72:	f000 fbb3 	bl	80116dc <abort>
 8010f76:	4b04      	ldr	r3, [pc, #16]	@ (8010f88 <__assert_func+0x38>)
 8010f78:	e7f4      	b.n	8010f64 <__assert_func+0x14>
 8010f7a:	bf00      	nop
 8010f7c:	20000018 	.word	0x20000018
 8010f80:	0801211d 	.word	0x0801211d
 8010f84:	080120ef 	.word	0x080120ef
 8010f88:	080120e2 	.word	0x080120e2

08010f8c <_calloc_r>:
 8010f8c:	b570      	push	{r4, r5, r6, lr}
 8010f8e:	fba1 5402 	umull	r5, r4, r1, r2
 8010f92:	b93c      	cbnz	r4, 8010fa4 <_calloc_r+0x18>
 8010f94:	4629      	mov	r1, r5
 8010f96:	f7fe f9b7 	bl	800f308 <_malloc_r>
 8010f9a:	4606      	mov	r6, r0
 8010f9c:	b928      	cbnz	r0, 8010faa <_calloc_r+0x1e>
 8010f9e:	2600      	movs	r6, #0
 8010fa0:	4630      	mov	r0, r6
 8010fa2:	bd70      	pop	{r4, r5, r6, pc}
 8010fa4:	220c      	movs	r2, #12
 8010fa6:	6002      	str	r2, [r0, #0]
 8010fa8:	e7f9      	b.n	8010f9e <_calloc_r+0x12>
 8010faa:	462a      	mov	r2, r5
 8010fac:	4621      	mov	r1, r4
 8010fae:	f7fd fa50 	bl	800e452 <memset>
 8010fb2:	e7f5      	b.n	8010fa0 <_calloc_r+0x14>

08010fb4 <rshift>:
 8010fb4:	6903      	ldr	r3, [r0, #16]
 8010fb6:	114a      	asrs	r2, r1, #5
 8010fb8:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8010fbc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010fc0:	f100 0414 	add.w	r4, r0, #20
 8010fc4:	dd45      	ble.n	8011052 <rshift+0x9e>
 8010fc6:	f011 011f 	ands.w	r1, r1, #31
 8010fca:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8010fce:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8010fd2:	d10c      	bne.n	8010fee <rshift+0x3a>
 8010fd4:	f100 0710 	add.w	r7, r0, #16
 8010fd8:	4629      	mov	r1, r5
 8010fda:	42b1      	cmp	r1, r6
 8010fdc:	d334      	bcc.n	8011048 <rshift+0x94>
 8010fde:	1a9b      	subs	r3, r3, r2
 8010fe0:	1eea      	subs	r2, r5, #3
 8010fe2:	009b      	lsls	r3, r3, #2
 8010fe4:	4296      	cmp	r6, r2
 8010fe6:	bf38      	it	cc
 8010fe8:	2300      	movcc	r3, #0
 8010fea:	4423      	add	r3, r4
 8010fec:	e015      	b.n	801101a <rshift+0x66>
 8010fee:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8010ff2:	f1c1 0820 	rsb	r8, r1, #32
 8010ff6:	f105 0e04 	add.w	lr, r5, #4
 8010ffa:	46a1      	mov	r9, r4
 8010ffc:	40cf      	lsrs	r7, r1
 8010ffe:	4576      	cmp	r6, lr
 8011000:	46f4      	mov	ip, lr
 8011002:	d815      	bhi.n	8011030 <rshift+0x7c>
 8011004:	1a9a      	subs	r2, r3, r2
 8011006:	3501      	adds	r5, #1
 8011008:	0092      	lsls	r2, r2, #2
 801100a:	3a04      	subs	r2, #4
 801100c:	42ae      	cmp	r6, r5
 801100e:	bf38      	it	cc
 8011010:	2200      	movcc	r2, #0
 8011012:	18a3      	adds	r3, r4, r2
 8011014:	50a7      	str	r7, [r4, r2]
 8011016:	b107      	cbz	r7, 801101a <rshift+0x66>
 8011018:	3304      	adds	r3, #4
 801101a:	1b1a      	subs	r2, r3, r4
 801101c:	42a3      	cmp	r3, r4
 801101e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8011022:	bf08      	it	eq
 8011024:	2300      	moveq	r3, #0
 8011026:	6102      	str	r2, [r0, #16]
 8011028:	bf08      	it	eq
 801102a:	6143      	streq	r3, [r0, #20]
 801102c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011030:	f8dc c000 	ldr.w	ip, [ip]
 8011034:	fa0c fc08 	lsl.w	ip, ip, r8
 8011038:	ea4c 0707 	orr.w	r7, ip, r7
 801103c:	f849 7b04 	str.w	r7, [r9], #4
 8011040:	f85e 7b04 	ldr.w	r7, [lr], #4
 8011044:	40cf      	lsrs	r7, r1
 8011046:	e7da      	b.n	8010ffe <rshift+0x4a>
 8011048:	f851 cb04 	ldr.w	ip, [r1], #4
 801104c:	f847 cf04 	str.w	ip, [r7, #4]!
 8011050:	e7c3      	b.n	8010fda <rshift+0x26>
 8011052:	4623      	mov	r3, r4
 8011054:	e7e1      	b.n	801101a <rshift+0x66>

08011056 <__hexdig_fun>:
 8011056:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 801105a:	2b09      	cmp	r3, #9
 801105c:	d802      	bhi.n	8011064 <__hexdig_fun+0xe>
 801105e:	3820      	subs	r0, #32
 8011060:	b2c0      	uxtb	r0, r0
 8011062:	4770      	bx	lr
 8011064:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8011068:	2b05      	cmp	r3, #5
 801106a:	d801      	bhi.n	8011070 <__hexdig_fun+0x1a>
 801106c:	3847      	subs	r0, #71	@ 0x47
 801106e:	e7f7      	b.n	8011060 <__hexdig_fun+0xa>
 8011070:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8011074:	2b05      	cmp	r3, #5
 8011076:	d801      	bhi.n	801107c <__hexdig_fun+0x26>
 8011078:	3827      	subs	r0, #39	@ 0x27
 801107a:	e7f1      	b.n	8011060 <__hexdig_fun+0xa>
 801107c:	2000      	movs	r0, #0
 801107e:	4770      	bx	lr

08011080 <__gethex>:
 8011080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011084:	b085      	sub	sp, #20
 8011086:	468a      	mov	sl, r1
 8011088:	4690      	mov	r8, r2
 801108a:	9302      	str	r3, [sp, #8]
 801108c:	680b      	ldr	r3, [r1, #0]
 801108e:	9001      	str	r0, [sp, #4]
 8011090:	1c9c      	adds	r4, r3, #2
 8011092:	46a1      	mov	r9, r4
 8011094:	f814 0b01 	ldrb.w	r0, [r4], #1
 8011098:	2830      	cmp	r0, #48	@ 0x30
 801109a:	d0fa      	beq.n	8011092 <__gethex+0x12>
 801109c:	eba9 0303 	sub.w	r3, r9, r3
 80110a0:	f1a3 0b02 	sub.w	fp, r3, #2
 80110a4:	f7ff ffd7 	bl	8011056 <__hexdig_fun>
 80110a8:	4605      	mov	r5, r0
 80110aa:	2800      	cmp	r0, #0
 80110ac:	d166      	bne.n	801117c <__gethex+0xfc>
 80110ae:	2201      	movs	r2, #1
 80110b0:	499e      	ldr	r1, [pc, #632]	@ (801132c <__gethex+0x2ac>)
 80110b2:	4648      	mov	r0, r9
 80110b4:	f7ff ff14 	bl	8010ee0 <strncmp>
 80110b8:	4607      	mov	r7, r0
 80110ba:	2800      	cmp	r0, #0
 80110bc:	d165      	bne.n	801118a <__gethex+0x10a>
 80110be:	f899 0001 	ldrb.w	r0, [r9, #1]
 80110c2:	4626      	mov	r6, r4
 80110c4:	f7ff ffc7 	bl	8011056 <__hexdig_fun>
 80110c8:	2800      	cmp	r0, #0
 80110ca:	d060      	beq.n	801118e <__gethex+0x10e>
 80110cc:	4623      	mov	r3, r4
 80110ce:	7818      	ldrb	r0, [r3, #0]
 80110d0:	4699      	mov	r9, r3
 80110d2:	3301      	adds	r3, #1
 80110d4:	2830      	cmp	r0, #48	@ 0x30
 80110d6:	d0fa      	beq.n	80110ce <__gethex+0x4e>
 80110d8:	f7ff ffbd 	bl	8011056 <__hexdig_fun>
 80110dc:	fab0 f580 	clz	r5, r0
 80110e0:	f04f 0b01 	mov.w	fp, #1
 80110e4:	096d      	lsrs	r5, r5, #5
 80110e6:	464a      	mov	r2, r9
 80110e8:	4616      	mov	r6, r2
 80110ea:	3201      	adds	r2, #1
 80110ec:	7830      	ldrb	r0, [r6, #0]
 80110ee:	f7ff ffb2 	bl	8011056 <__hexdig_fun>
 80110f2:	2800      	cmp	r0, #0
 80110f4:	d1f8      	bne.n	80110e8 <__gethex+0x68>
 80110f6:	2201      	movs	r2, #1
 80110f8:	498c      	ldr	r1, [pc, #560]	@ (801132c <__gethex+0x2ac>)
 80110fa:	4630      	mov	r0, r6
 80110fc:	f7ff fef0 	bl	8010ee0 <strncmp>
 8011100:	2800      	cmp	r0, #0
 8011102:	d13e      	bne.n	8011182 <__gethex+0x102>
 8011104:	b944      	cbnz	r4, 8011118 <__gethex+0x98>
 8011106:	1c74      	adds	r4, r6, #1
 8011108:	4622      	mov	r2, r4
 801110a:	4616      	mov	r6, r2
 801110c:	3201      	adds	r2, #1
 801110e:	7830      	ldrb	r0, [r6, #0]
 8011110:	f7ff ffa1 	bl	8011056 <__hexdig_fun>
 8011114:	2800      	cmp	r0, #0
 8011116:	d1f8      	bne.n	801110a <__gethex+0x8a>
 8011118:	1ba4      	subs	r4, r4, r6
 801111a:	00a7      	lsls	r7, r4, #2
 801111c:	7833      	ldrb	r3, [r6, #0]
 801111e:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8011122:	2b50      	cmp	r3, #80	@ 0x50
 8011124:	d13d      	bne.n	80111a2 <__gethex+0x122>
 8011126:	7873      	ldrb	r3, [r6, #1]
 8011128:	2b2b      	cmp	r3, #43	@ 0x2b
 801112a:	d032      	beq.n	8011192 <__gethex+0x112>
 801112c:	2b2d      	cmp	r3, #45	@ 0x2d
 801112e:	d033      	beq.n	8011198 <__gethex+0x118>
 8011130:	1c71      	adds	r1, r6, #1
 8011132:	2400      	movs	r4, #0
 8011134:	7808      	ldrb	r0, [r1, #0]
 8011136:	f7ff ff8e 	bl	8011056 <__hexdig_fun>
 801113a:	1e43      	subs	r3, r0, #1
 801113c:	b2db      	uxtb	r3, r3
 801113e:	2b18      	cmp	r3, #24
 8011140:	d82f      	bhi.n	80111a2 <__gethex+0x122>
 8011142:	f1a0 0210 	sub.w	r2, r0, #16
 8011146:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801114a:	f7ff ff84 	bl	8011056 <__hexdig_fun>
 801114e:	f100 3cff 	add.w	ip, r0, #4294967295
 8011152:	230a      	movs	r3, #10
 8011154:	fa5f fc8c 	uxtb.w	ip, ip
 8011158:	f1bc 0f18 	cmp.w	ip, #24
 801115c:	d91e      	bls.n	801119c <__gethex+0x11c>
 801115e:	b104      	cbz	r4, 8011162 <__gethex+0xe2>
 8011160:	4252      	negs	r2, r2
 8011162:	4417      	add	r7, r2
 8011164:	f8ca 1000 	str.w	r1, [sl]
 8011168:	b1ed      	cbz	r5, 80111a6 <__gethex+0x126>
 801116a:	f1bb 0f00 	cmp.w	fp, #0
 801116e:	bf0c      	ite	eq
 8011170:	2506      	moveq	r5, #6
 8011172:	2500      	movne	r5, #0
 8011174:	4628      	mov	r0, r5
 8011176:	b005      	add	sp, #20
 8011178:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801117c:	2500      	movs	r5, #0
 801117e:	462c      	mov	r4, r5
 8011180:	e7b1      	b.n	80110e6 <__gethex+0x66>
 8011182:	2c00      	cmp	r4, #0
 8011184:	d1c8      	bne.n	8011118 <__gethex+0x98>
 8011186:	4627      	mov	r7, r4
 8011188:	e7c8      	b.n	801111c <__gethex+0x9c>
 801118a:	464e      	mov	r6, r9
 801118c:	462f      	mov	r7, r5
 801118e:	2501      	movs	r5, #1
 8011190:	e7c4      	b.n	801111c <__gethex+0x9c>
 8011192:	2400      	movs	r4, #0
 8011194:	1cb1      	adds	r1, r6, #2
 8011196:	e7cd      	b.n	8011134 <__gethex+0xb4>
 8011198:	2401      	movs	r4, #1
 801119a:	e7fb      	b.n	8011194 <__gethex+0x114>
 801119c:	fb03 0002 	mla	r0, r3, r2, r0
 80111a0:	e7cf      	b.n	8011142 <__gethex+0xc2>
 80111a2:	4631      	mov	r1, r6
 80111a4:	e7de      	b.n	8011164 <__gethex+0xe4>
 80111a6:	eba6 0309 	sub.w	r3, r6, r9
 80111aa:	4629      	mov	r1, r5
 80111ac:	3b01      	subs	r3, #1
 80111ae:	2b07      	cmp	r3, #7
 80111b0:	dc0a      	bgt.n	80111c8 <__gethex+0x148>
 80111b2:	9801      	ldr	r0, [sp, #4]
 80111b4:	f7fe f934 	bl	800f420 <_Balloc>
 80111b8:	4604      	mov	r4, r0
 80111ba:	b940      	cbnz	r0, 80111ce <__gethex+0x14e>
 80111bc:	4b5c      	ldr	r3, [pc, #368]	@ (8011330 <__gethex+0x2b0>)
 80111be:	4602      	mov	r2, r0
 80111c0:	21e4      	movs	r1, #228	@ 0xe4
 80111c2:	485c      	ldr	r0, [pc, #368]	@ (8011334 <__gethex+0x2b4>)
 80111c4:	f7ff fec4 	bl	8010f50 <__assert_func>
 80111c8:	3101      	adds	r1, #1
 80111ca:	105b      	asrs	r3, r3, #1
 80111cc:	e7ef      	b.n	80111ae <__gethex+0x12e>
 80111ce:	f100 0a14 	add.w	sl, r0, #20
 80111d2:	2300      	movs	r3, #0
 80111d4:	4655      	mov	r5, sl
 80111d6:	469b      	mov	fp, r3
 80111d8:	45b1      	cmp	r9, r6
 80111da:	d337      	bcc.n	801124c <__gethex+0x1cc>
 80111dc:	f845 bb04 	str.w	fp, [r5], #4
 80111e0:	eba5 050a 	sub.w	r5, r5, sl
 80111e4:	4658      	mov	r0, fp
 80111e6:	10ad      	asrs	r5, r5, #2
 80111e8:	6125      	str	r5, [r4, #16]
 80111ea:	016d      	lsls	r5, r5, #5
 80111ec:	f7fe fa0c 	bl	800f608 <__hi0bits>
 80111f0:	f8d8 6000 	ldr.w	r6, [r8]
 80111f4:	1a2d      	subs	r5, r5, r0
 80111f6:	42b5      	cmp	r5, r6
 80111f8:	dd54      	ble.n	80112a4 <__gethex+0x224>
 80111fa:	1bad      	subs	r5, r5, r6
 80111fc:	4620      	mov	r0, r4
 80111fe:	4629      	mov	r1, r5
 8011200:	f7fe fda9 	bl	800fd56 <__any_on>
 8011204:	4681      	mov	r9, r0
 8011206:	b178      	cbz	r0, 8011228 <__gethex+0x1a8>
 8011208:	1e6b      	subs	r3, r5, #1
 801120a:	f04f 0901 	mov.w	r9, #1
 801120e:	1159      	asrs	r1, r3, #5
 8011210:	f003 021f 	and.w	r2, r3, #31
 8011214:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8011218:	fa09 f202 	lsl.w	r2, r9, r2
 801121c:	420a      	tst	r2, r1
 801121e:	d003      	beq.n	8011228 <__gethex+0x1a8>
 8011220:	454b      	cmp	r3, r9
 8011222:	dc36      	bgt.n	8011292 <__gethex+0x212>
 8011224:	f04f 0902 	mov.w	r9, #2
 8011228:	442f      	add	r7, r5
 801122a:	4629      	mov	r1, r5
 801122c:	4620      	mov	r0, r4
 801122e:	f7ff fec1 	bl	8010fb4 <rshift>
 8011232:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011236:	42bb      	cmp	r3, r7
 8011238:	da42      	bge.n	80112c0 <__gethex+0x240>
 801123a:	4621      	mov	r1, r4
 801123c:	9801      	ldr	r0, [sp, #4]
 801123e:	f7fe f92f 	bl	800f4a0 <_Bfree>
 8011242:	2300      	movs	r3, #0
 8011244:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011246:	25a3      	movs	r5, #163	@ 0xa3
 8011248:	6013      	str	r3, [r2, #0]
 801124a:	e793      	b.n	8011174 <__gethex+0xf4>
 801124c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8011250:	2a2e      	cmp	r2, #46	@ 0x2e
 8011252:	d012      	beq.n	801127a <__gethex+0x1fa>
 8011254:	2b20      	cmp	r3, #32
 8011256:	d104      	bne.n	8011262 <__gethex+0x1e2>
 8011258:	f845 bb04 	str.w	fp, [r5], #4
 801125c:	f04f 0b00 	mov.w	fp, #0
 8011260:	465b      	mov	r3, fp
 8011262:	7830      	ldrb	r0, [r6, #0]
 8011264:	9303      	str	r3, [sp, #12]
 8011266:	f7ff fef6 	bl	8011056 <__hexdig_fun>
 801126a:	9b03      	ldr	r3, [sp, #12]
 801126c:	f000 000f 	and.w	r0, r0, #15
 8011270:	4098      	lsls	r0, r3
 8011272:	3304      	adds	r3, #4
 8011274:	ea4b 0b00 	orr.w	fp, fp, r0
 8011278:	e7ae      	b.n	80111d8 <__gethex+0x158>
 801127a:	45b1      	cmp	r9, r6
 801127c:	d8ea      	bhi.n	8011254 <__gethex+0x1d4>
 801127e:	2201      	movs	r2, #1
 8011280:	492a      	ldr	r1, [pc, #168]	@ (801132c <__gethex+0x2ac>)
 8011282:	4630      	mov	r0, r6
 8011284:	9303      	str	r3, [sp, #12]
 8011286:	f7ff fe2b 	bl	8010ee0 <strncmp>
 801128a:	9b03      	ldr	r3, [sp, #12]
 801128c:	2800      	cmp	r0, #0
 801128e:	d1e1      	bne.n	8011254 <__gethex+0x1d4>
 8011290:	e7a2      	b.n	80111d8 <__gethex+0x158>
 8011292:	1ea9      	subs	r1, r5, #2
 8011294:	4620      	mov	r0, r4
 8011296:	f7fe fd5e 	bl	800fd56 <__any_on>
 801129a:	2800      	cmp	r0, #0
 801129c:	d0c2      	beq.n	8011224 <__gethex+0x1a4>
 801129e:	f04f 0903 	mov.w	r9, #3
 80112a2:	e7c1      	b.n	8011228 <__gethex+0x1a8>
 80112a4:	da09      	bge.n	80112ba <__gethex+0x23a>
 80112a6:	1b75      	subs	r5, r6, r5
 80112a8:	4621      	mov	r1, r4
 80112aa:	9801      	ldr	r0, [sp, #4]
 80112ac:	462a      	mov	r2, r5
 80112ae:	1b7f      	subs	r7, r7, r5
 80112b0:	f7fe fb10 	bl	800f8d4 <__lshift>
 80112b4:	4604      	mov	r4, r0
 80112b6:	f100 0a14 	add.w	sl, r0, #20
 80112ba:	f04f 0900 	mov.w	r9, #0
 80112be:	e7b8      	b.n	8011232 <__gethex+0x1b2>
 80112c0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80112c4:	42bd      	cmp	r5, r7
 80112c6:	dd6f      	ble.n	80113a8 <__gethex+0x328>
 80112c8:	1bed      	subs	r5, r5, r7
 80112ca:	42ae      	cmp	r6, r5
 80112cc:	dc34      	bgt.n	8011338 <__gethex+0x2b8>
 80112ce:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80112d2:	2b02      	cmp	r3, #2
 80112d4:	d022      	beq.n	801131c <__gethex+0x29c>
 80112d6:	2b03      	cmp	r3, #3
 80112d8:	d024      	beq.n	8011324 <__gethex+0x2a4>
 80112da:	2b01      	cmp	r3, #1
 80112dc:	d115      	bne.n	801130a <__gethex+0x28a>
 80112de:	42ae      	cmp	r6, r5
 80112e0:	d113      	bne.n	801130a <__gethex+0x28a>
 80112e2:	2e01      	cmp	r6, #1
 80112e4:	d10b      	bne.n	80112fe <__gethex+0x27e>
 80112e6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80112ea:	2562      	movs	r5, #98	@ 0x62
 80112ec:	9a02      	ldr	r2, [sp, #8]
 80112ee:	6013      	str	r3, [r2, #0]
 80112f0:	2301      	movs	r3, #1
 80112f2:	6123      	str	r3, [r4, #16]
 80112f4:	f8ca 3000 	str.w	r3, [sl]
 80112f8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80112fa:	601c      	str	r4, [r3, #0]
 80112fc:	e73a      	b.n	8011174 <__gethex+0xf4>
 80112fe:	1e71      	subs	r1, r6, #1
 8011300:	4620      	mov	r0, r4
 8011302:	f7fe fd28 	bl	800fd56 <__any_on>
 8011306:	2800      	cmp	r0, #0
 8011308:	d1ed      	bne.n	80112e6 <__gethex+0x266>
 801130a:	4621      	mov	r1, r4
 801130c:	9801      	ldr	r0, [sp, #4]
 801130e:	f7fe f8c7 	bl	800f4a0 <_Bfree>
 8011312:	2300      	movs	r3, #0
 8011314:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011316:	2550      	movs	r5, #80	@ 0x50
 8011318:	6013      	str	r3, [r2, #0]
 801131a:	e72b      	b.n	8011174 <__gethex+0xf4>
 801131c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801131e:	2b00      	cmp	r3, #0
 8011320:	d1f3      	bne.n	801130a <__gethex+0x28a>
 8011322:	e7e0      	b.n	80112e6 <__gethex+0x266>
 8011324:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011326:	2b00      	cmp	r3, #0
 8011328:	d1dd      	bne.n	80112e6 <__gethex+0x266>
 801132a:	e7ee      	b.n	801130a <__gethex+0x28a>
 801132c:	08011f70 	.word	0x08011f70
 8011330:	08011e05 	.word	0x08011e05
 8011334:	0801211e 	.word	0x0801211e
 8011338:	1e6f      	subs	r7, r5, #1
 801133a:	f1b9 0f00 	cmp.w	r9, #0
 801133e:	d130      	bne.n	80113a2 <__gethex+0x322>
 8011340:	b127      	cbz	r7, 801134c <__gethex+0x2cc>
 8011342:	4639      	mov	r1, r7
 8011344:	4620      	mov	r0, r4
 8011346:	f7fe fd06 	bl	800fd56 <__any_on>
 801134a:	4681      	mov	r9, r0
 801134c:	117a      	asrs	r2, r7, #5
 801134e:	2301      	movs	r3, #1
 8011350:	f007 071f 	and.w	r7, r7, #31
 8011354:	4629      	mov	r1, r5
 8011356:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 801135a:	4620      	mov	r0, r4
 801135c:	40bb      	lsls	r3, r7
 801135e:	1b76      	subs	r6, r6, r5
 8011360:	2502      	movs	r5, #2
 8011362:	4213      	tst	r3, r2
 8011364:	bf18      	it	ne
 8011366:	f049 0902 	orrne.w	r9, r9, #2
 801136a:	f7ff fe23 	bl	8010fb4 <rshift>
 801136e:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8011372:	f1b9 0f00 	cmp.w	r9, #0
 8011376:	d047      	beq.n	8011408 <__gethex+0x388>
 8011378:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801137c:	2b02      	cmp	r3, #2
 801137e:	d015      	beq.n	80113ac <__gethex+0x32c>
 8011380:	2b03      	cmp	r3, #3
 8011382:	d017      	beq.n	80113b4 <__gethex+0x334>
 8011384:	2b01      	cmp	r3, #1
 8011386:	d109      	bne.n	801139c <__gethex+0x31c>
 8011388:	f019 0f02 	tst.w	r9, #2
 801138c:	d006      	beq.n	801139c <__gethex+0x31c>
 801138e:	f8da 3000 	ldr.w	r3, [sl]
 8011392:	ea49 0903 	orr.w	r9, r9, r3
 8011396:	f019 0f01 	tst.w	r9, #1
 801139a:	d10e      	bne.n	80113ba <__gethex+0x33a>
 801139c:	f045 0510 	orr.w	r5, r5, #16
 80113a0:	e032      	b.n	8011408 <__gethex+0x388>
 80113a2:	f04f 0901 	mov.w	r9, #1
 80113a6:	e7d1      	b.n	801134c <__gethex+0x2cc>
 80113a8:	2501      	movs	r5, #1
 80113aa:	e7e2      	b.n	8011372 <__gethex+0x2f2>
 80113ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80113ae:	f1c3 0301 	rsb	r3, r3, #1
 80113b2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80113b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80113b6:	2b00      	cmp	r3, #0
 80113b8:	d0f0      	beq.n	801139c <__gethex+0x31c>
 80113ba:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80113be:	f104 0314 	add.w	r3, r4, #20
 80113c2:	f04f 0c00 	mov.w	ip, #0
 80113c6:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80113ca:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80113ce:	4618      	mov	r0, r3
 80113d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80113d4:	f1b2 3fff 	cmp.w	r2, #4294967295
 80113d8:	d01b      	beq.n	8011412 <__gethex+0x392>
 80113da:	3201      	adds	r2, #1
 80113dc:	6002      	str	r2, [r0, #0]
 80113de:	2d02      	cmp	r5, #2
 80113e0:	f104 0314 	add.w	r3, r4, #20
 80113e4:	d13c      	bne.n	8011460 <__gethex+0x3e0>
 80113e6:	f8d8 2000 	ldr.w	r2, [r8]
 80113ea:	3a01      	subs	r2, #1
 80113ec:	42b2      	cmp	r2, r6
 80113ee:	d109      	bne.n	8011404 <__gethex+0x384>
 80113f0:	1171      	asrs	r1, r6, #5
 80113f2:	2201      	movs	r2, #1
 80113f4:	f006 061f 	and.w	r6, r6, #31
 80113f8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80113fc:	fa02 f606 	lsl.w	r6, r2, r6
 8011400:	421e      	tst	r6, r3
 8011402:	d13a      	bne.n	801147a <__gethex+0x3fa>
 8011404:	f045 0520 	orr.w	r5, r5, #32
 8011408:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801140a:	601c      	str	r4, [r3, #0]
 801140c:	9b02      	ldr	r3, [sp, #8]
 801140e:	601f      	str	r7, [r3, #0]
 8011410:	e6b0      	b.n	8011174 <__gethex+0xf4>
 8011412:	4299      	cmp	r1, r3
 8011414:	f843 cc04 	str.w	ip, [r3, #-4]
 8011418:	d8d9      	bhi.n	80113ce <__gethex+0x34e>
 801141a:	68a3      	ldr	r3, [r4, #8]
 801141c:	459b      	cmp	fp, r3
 801141e:	db17      	blt.n	8011450 <__gethex+0x3d0>
 8011420:	6861      	ldr	r1, [r4, #4]
 8011422:	9801      	ldr	r0, [sp, #4]
 8011424:	3101      	adds	r1, #1
 8011426:	f7fd fffb 	bl	800f420 <_Balloc>
 801142a:	4681      	mov	r9, r0
 801142c:	b918      	cbnz	r0, 8011436 <__gethex+0x3b6>
 801142e:	4b1a      	ldr	r3, [pc, #104]	@ (8011498 <__gethex+0x418>)
 8011430:	4602      	mov	r2, r0
 8011432:	2184      	movs	r1, #132	@ 0x84
 8011434:	e6c5      	b.n	80111c2 <__gethex+0x142>
 8011436:	6922      	ldr	r2, [r4, #16]
 8011438:	f104 010c 	add.w	r1, r4, #12
 801143c:	300c      	adds	r0, #12
 801143e:	3202      	adds	r2, #2
 8011440:	0092      	lsls	r2, r2, #2
 8011442:	f7ff fd6f 	bl	8010f24 <memcpy>
 8011446:	4621      	mov	r1, r4
 8011448:	464c      	mov	r4, r9
 801144a:	9801      	ldr	r0, [sp, #4]
 801144c:	f7fe f828 	bl	800f4a0 <_Bfree>
 8011450:	6923      	ldr	r3, [r4, #16]
 8011452:	1c5a      	adds	r2, r3, #1
 8011454:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8011458:	6122      	str	r2, [r4, #16]
 801145a:	2201      	movs	r2, #1
 801145c:	615a      	str	r2, [r3, #20]
 801145e:	e7be      	b.n	80113de <__gethex+0x35e>
 8011460:	6922      	ldr	r2, [r4, #16]
 8011462:	455a      	cmp	r2, fp
 8011464:	dd0b      	ble.n	801147e <__gethex+0x3fe>
 8011466:	2101      	movs	r1, #1
 8011468:	4620      	mov	r0, r4
 801146a:	f7ff fda3 	bl	8010fb4 <rshift>
 801146e:	3701      	adds	r7, #1
 8011470:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011474:	42bb      	cmp	r3, r7
 8011476:	f6ff aee0 	blt.w	801123a <__gethex+0x1ba>
 801147a:	2501      	movs	r5, #1
 801147c:	e7c2      	b.n	8011404 <__gethex+0x384>
 801147e:	f016 061f 	ands.w	r6, r6, #31
 8011482:	d0fa      	beq.n	801147a <__gethex+0x3fa>
 8011484:	4453      	add	r3, sl
 8011486:	f1c6 0620 	rsb	r6, r6, #32
 801148a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801148e:	f7fe f8bb 	bl	800f608 <__hi0bits>
 8011492:	42b0      	cmp	r0, r6
 8011494:	dbe7      	blt.n	8011466 <__gethex+0x3e6>
 8011496:	e7f0      	b.n	801147a <__gethex+0x3fa>
 8011498:	08011e05 	.word	0x08011e05

0801149c <L_shift>:
 801149c:	f1c2 0208 	rsb	r2, r2, #8
 80114a0:	0092      	lsls	r2, r2, #2
 80114a2:	b570      	push	{r4, r5, r6, lr}
 80114a4:	f1c2 0620 	rsb	r6, r2, #32
 80114a8:	6843      	ldr	r3, [r0, #4]
 80114aa:	6804      	ldr	r4, [r0, #0]
 80114ac:	fa03 f506 	lsl.w	r5, r3, r6
 80114b0:	40d3      	lsrs	r3, r2
 80114b2:	432c      	orrs	r4, r5
 80114b4:	6004      	str	r4, [r0, #0]
 80114b6:	f840 3f04 	str.w	r3, [r0, #4]!
 80114ba:	4288      	cmp	r0, r1
 80114bc:	d3f4      	bcc.n	80114a8 <L_shift+0xc>
 80114be:	bd70      	pop	{r4, r5, r6, pc}

080114c0 <__match>:
 80114c0:	6803      	ldr	r3, [r0, #0]
 80114c2:	3301      	adds	r3, #1
 80114c4:	b530      	push	{r4, r5, lr}
 80114c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80114ca:	b914      	cbnz	r4, 80114d2 <__match+0x12>
 80114cc:	6003      	str	r3, [r0, #0]
 80114ce:	2001      	movs	r0, #1
 80114d0:	bd30      	pop	{r4, r5, pc}
 80114d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80114d6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80114da:	2d19      	cmp	r5, #25
 80114dc:	bf98      	it	ls
 80114de:	3220      	addls	r2, #32
 80114e0:	42a2      	cmp	r2, r4
 80114e2:	d0f0      	beq.n	80114c6 <__match+0x6>
 80114e4:	2000      	movs	r0, #0
 80114e6:	e7f3      	b.n	80114d0 <__match+0x10>

080114e8 <__hexnan>:
 80114e8:	680b      	ldr	r3, [r1, #0]
 80114ea:	6801      	ldr	r1, [r0, #0]
 80114ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80114f0:	115e      	asrs	r6, r3, #5
 80114f2:	f013 031f 	ands.w	r3, r3, #31
 80114f6:	f04f 0500 	mov.w	r5, #0
 80114fa:	b087      	sub	sp, #28
 80114fc:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8011500:	4682      	mov	sl, r0
 8011502:	4690      	mov	r8, r2
 8011504:	46ab      	mov	fp, r5
 8011506:	bf18      	it	ne
 8011508:	3604      	addne	r6, #4
 801150a:	9301      	str	r3, [sp, #4]
 801150c:	9502      	str	r5, [sp, #8]
 801150e:	1f37      	subs	r7, r6, #4
 8011510:	f846 5c04 	str.w	r5, [r6, #-4]
 8011514:	46b9      	mov	r9, r7
 8011516:	463c      	mov	r4, r7
 8011518:	1c4b      	adds	r3, r1, #1
 801151a:	784a      	ldrb	r2, [r1, #1]
 801151c:	9303      	str	r3, [sp, #12]
 801151e:	b342      	cbz	r2, 8011572 <__hexnan+0x8a>
 8011520:	4610      	mov	r0, r2
 8011522:	9105      	str	r1, [sp, #20]
 8011524:	9204      	str	r2, [sp, #16]
 8011526:	f7ff fd96 	bl	8011056 <__hexdig_fun>
 801152a:	2800      	cmp	r0, #0
 801152c:	d151      	bne.n	80115d2 <__hexnan+0xea>
 801152e:	9a04      	ldr	r2, [sp, #16]
 8011530:	9905      	ldr	r1, [sp, #20]
 8011532:	2a20      	cmp	r2, #32
 8011534:	d818      	bhi.n	8011568 <__hexnan+0x80>
 8011536:	9b02      	ldr	r3, [sp, #8]
 8011538:	459b      	cmp	fp, r3
 801153a:	dd13      	ble.n	8011564 <__hexnan+0x7c>
 801153c:	454c      	cmp	r4, r9
 801153e:	d206      	bcs.n	801154e <__hexnan+0x66>
 8011540:	2d07      	cmp	r5, #7
 8011542:	dc04      	bgt.n	801154e <__hexnan+0x66>
 8011544:	462a      	mov	r2, r5
 8011546:	4649      	mov	r1, r9
 8011548:	4620      	mov	r0, r4
 801154a:	f7ff ffa7 	bl	801149c <L_shift>
 801154e:	4544      	cmp	r4, r8
 8011550:	d951      	bls.n	80115f6 <__hexnan+0x10e>
 8011552:	2300      	movs	r3, #0
 8011554:	f1a4 0904 	sub.w	r9, r4, #4
 8011558:	f8cd b008 	str.w	fp, [sp, #8]
 801155c:	f844 3c04 	str.w	r3, [r4, #-4]
 8011560:	461d      	mov	r5, r3
 8011562:	464c      	mov	r4, r9
 8011564:	9903      	ldr	r1, [sp, #12]
 8011566:	e7d7      	b.n	8011518 <__hexnan+0x30>
 8011568:	2a29      	cmp	r2, #41	@ 0x29
 801156a:	d156      	bne.n	801161a <__hexnan+0x132>
 801156c:	3102      	adds	r1, #2
 801156e:	f8ca 1000 	str.w	r1, [sl]
 8011572:	f1bb 0f00 	cmp.w	fp, #0
 8011576:	d050      	beq.n	801161a <__hexnan+0x132>
 8011578:	454c      	cmp	r4, r9
 801157a:	d206      	bcs.n	801158a <__hexnan+0xa2>
 801157c:	2d07      	cmp	r5, #7
 801157e:	dc04      	bgt.n	801158a <__hexnan+0xa2>
 8011580:	462a      	mov	r2, r5
 8011582:	4649      	mov	r1, r9
 8011584:	4620      	mov	r0, r4
 8011586:	f7ff ff89 	bl	801149c <L_shift>
 801158a:	4544      	cmp	r4, r8
 801158c:	d935      	bls.n	80115fa <__hexnan+0x112>
 801158e:	f1a8 0204 	sub.w	r2, r8, #4
 8011592:	4623      	mov	r3, r4
 8011594:	f853 1b04 	ldr.w	r1, [r3], #4
 8011598:	429f      	cmp	r7, r3
 801159a:	f842 1f04 	str.w	r1, [r2, #4]!
 801159e:	d2f9      	bcs.n	8011594 <__hexnan+0xac>
 80115a0:	1b3b      	subs	r3, r7, r4
 80115a2:	3e03      	subs	r6, #3
 80115a4:	3401      	adds	r4, #1
 80115a6:	2200      	movs	r2, #0
 80115a8:	f023 0303 	bic.w	r3, r3, #3
 80115ac:	3304      	adds	r3, #4
 80115ae:	42b4      	cmp	r4, r6
 80115b0:	bf88      	it	hi
 80115b2:	2304      	movhi	r3, #4
 80115b4:	4443      	add	r3, r8
 80115b6:	f843 2b04 	str.w	r2, [r3], #4
 80115ba:	429f      	cmp	r7, r3
 80115bc:	d2fb      	bcs.n	80115b6 <__hexnan+0xce>
 80115be:	683b      	ldr	r3, [r7, #0]
 80115c0:	b91b      	cbnz	r3, 80115ca <__hexnan+0xe2>
 80115c2:	4547      	cmp	r7, r8
 80115c4:	d127      	bne.n	8011616 <__hexnan+0x12e>
 80115c6:	2301      	movs	r3, #1
 80115c8:	603b      	str	r3, [r7, #0]
 80115ca:	2005      	movs	r0, #5
 80115cc:	b007      	add	sp, #28
 80115ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80115d2:	3501      	adds	r5, #1
 80115d4:	f10b 0b01 	add.w	fp, fp, #1
 80115d8:	2d08      	cmp	r5, #8
 80115da:	dd05      	ble.n	80115e8 <__hexnan+0x100>
 80115dc:	4544      	cmp	r4, r8
 80115de:	d9c1      	bls.n	8011564 <__hexnan+0x7c>
 80115e0:	2300      	movs	r3, #0
 80115e2:	3c04      	subs	r4, #4
 80115e4:	2501      	movs	r5, #1
 80115e6:	6023      	str	r3, [r4, #0]
 80115e8:	6822      	ldr	r2, [r4, #0]
 80115ea:	f000 000f 	and.w	r0, r0, #15
 80115ee:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80115f2:	6020      	str	r0, [r4, #0]
 80115f4:	e7b6      	b.n	8011564 <__hexnan+0x7c>
 80115f6:	2508      	movs	r5, #8
 80115f8:	e7b4      	b.n	8011564 <__hexnan+0x7c>
 80115fa:	9b01      	ldr	r3, [sp, #4]
 80115fc:	2b00      	cmp	r3, #0
 80115fe:	d0de      	beq.n	80115be <__hexnan+0xd6>
 8011600:	f1c3 0320 	rsb	r3, r3, #32
 8011604:	f04f 32ff 	mov.w	r2, #4294967295
 8011608:	40da      	lsrs	r2, r3
 801160a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801160e:	4013      	ands	r3, r2
 8011610:	f846 3c04 	str.w	r3, [r6, #-4]
 8011614:	e7d3      	b.n	80115be <__hexnan+0xd6>
 8011616:	3f04      	subs	r7, #4
 8011618:	e7d1      	b.n	80115be <__hexnan+0xd6>
 801161a:	2004      	movs	r0, #4
 801161c:	e7d6      	b.n	80115cc <__hexnan+0xe4>

0801161e <__ascii_mbtowc>:
 801161e:	b082      	sub	sp, #8
 8011620:	b901      	cbnz	r1, 8011624 <__ascii_mbtowc+0x6>
 8011622:	a901      	add	r1, sp, #4
 8011624:	b142      	cbz	r2, 8011638 <__ascii_mbtowc+0x1a>
 8011626:	b14b      	cbz	r3, 801163c <__ascii_mbtowc+0x1e>
 8011628:	7813      	ldrb	r3, [r2, #0]
 801162a:	600b      	str	r3, [r1, #0]
 801162c:	7812      	ldrb	r2, [r2, #0]
 801162e:	1e10      	subs	r0, r2, #0
 8011630:	bf18      	it	ne
 8011632:	2001      	movne	r0, #1
 8011634:	b002      	add	sp, #8
 8011636:	4770      	bx	lr
 8011638:	4610      	mov	r0, r2
 801163a:	e7fb      	b.n	8011634 <__ascii_mbtowc+0x16>
 801163c:	f06f 0001 	mvn.w	r0, #1
 8011640:	e7f8      	b.n	8011634 <__ascii_mbtowc+0x16>

08011642 <_realloc_r>:
 8011642:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011646:	4680      	mov	r8, r0
 8011648:	4615      	mov	r5, r2
 801164a:	460c      	mov	r4, r1
 801164c:	b921      	cbnz	r1, 8011658 <_realloc_r+0x16>
 801164e:	4611      	mov	r1, r2
 8011650:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011654:	f7fd be58 	b.w	800f308 <_malloc_r>
 8011658:	b92a      	cbnz	r2, 8011666 <_realloc_r+0x24>
 801165a:	f7fd fde1 	bl	800f220 <_free_r>
 801165e:	2400      	movs	r4, #0
 8011660:	4620      	mov	r0, r4
 8011662:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011666:	f000 f840 	bl	80116ea <_malloc_usable_size_r>
 801166a:	4285      	cmp	r5, r0
 801166c:	4606      	mov	r6, r0
 801166e:	d802      	bhi.n	8011676 <_realloc_r+0x34>
 8011670:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8011674:	d8f4      	bhi.n	8011660 <_realloc_r+0x1e>
 8011676:	4629      	mov	r1, r5
 8011678:	4640      	mov	r0, r8
 801167a:	f7fd fe45 	bl	800f308 <_malloc_r>
 801167e:	4607      	mov	r7, r0
 8011680:	2800      	cmp	r0, #0
 8011682:	d0ec      	beq.n	801165e <_realloc_r+0x1c>
 8011684:	42b5      	cmp	r5, r6
 8011686:	462a      	mov	r2, r5
 8011688:	4621      	mov	r1, r4
 801168a:	bf28      	it	cs
 801168c:	4632      	movcs	r2, r6
 801168e:	f7ff fc49 	bl	8010f24 <memcpy>
 8011692:	4621      	mov	r1, r4
 8011694:	4640      	mov	r0, r8
 8011696:	463c      	mov	r4, r7
 8011698:	f7fd fdc2 	bl	800f220 <_free_r>
 801169c:	e7e0      	b.n	8011660 <_realloc_r+0x1e>

0801169e <__ascii_wctomb>:
 801169e:	4603      	mov	r3, r0
 80116a0:	4608      	mov	r0, r1
 80116a2:	b141      	cbz	r1, 80116b6 <__ascii_wctomb+0x18>
 80116a4:	2aff      	cmp	r2, #255	@ 0xff
 80116a6:	d904      	bls.n	80116b2 <__ascii_wctomb+0x14>
 80116a8:	228a      	movs	r2, #138	@ 0x8a
 80116aa:	f04f 30ff 	mov.w	r0, #4294967295
 80116ae:	601a      	str	r2, [r3, #0]
 80116b0:	4770      	bx	lr
 80116b2:	2001      	movs	r0, #1
 80116b4:	700a      	strb	r2, [r1, #0]
 80116b6:	4770      	bx	lr

080116b8 <fiprintf>:
 80116b8:	b40e      	push	{r1, r2, r3}
 80116ba:	b503      	push	{r0, r1, lr}
 80116bc:	ab03      	add	r3, sp, #12
 80116be:	4601      	mov	r1, r0
 80116c0:	4805      	ldr	r0, [pc, #20]	@ (80116d8 <fiprintf+0x20>)
 80116c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80116c6:	6800      	ldr	r0, [r0, #0]
 80116c8:	9301      	str	r3, [sp, #4]
 80116ca:	f000 f83f 	bl	801174c <_vfiprintf_r>
 80116ce:	b002      	add	sp, #8
 80116d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80116d4:	b003      	add	sp, #12
 80116d6:	4770      	bx	lr
 80116d8:	20000018 	.word	0x20000018

080116dc <abort>:
 80116dc:	2006      	movs	r0, #6
 80116de:	b508      	push	{r3, lr}
 80116e0:	f000 fa08 	bl	8011af4 <raise>
 80116e4:	2001      	movs	r0, #1
 80116e6:	f7f0 fd27 	bl	8002138 <_exit>

080116ea <_malloc_usable_size_r>:
 80116ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80116ee:	1f18      	subs	r0, r3, #4
 80116f0:	2b00      	cmp	r3, #0
 80116f2:	bfbc      	itt	lt
 80116f4:	580b      	ldrlt	r3, [r1, r0]
 80116f6:	18c0      	addlt	r0, r0, r3
 80116f8:	4770      	bx	lr

080116fa <__sfputc_r>:
 80116fa:	6893      	ldr	r3, [r2, #8]
 80116fc:	3b01      	subs	r3, #1
 80116fe:	2b00      	cmp	r3, #0
 8011700:	6093      	str	r3, [r2, #8]
 8011702:	b410      	push	{r4}
 8011704:	da08      	bge.n	8011718 <__sfputc_r+0x1e>
 8011706:	6994      	ldr	r4, [r2, #24]
 8011708:	42a3      	cmp	r3, r4
 801170a:	db01      	blt.n	8011710 <__sfputc_r+0x16>
 801170c:	290a      	cmp	r1, #10
 801170e:	d103      	bne.n	8011718 <__sfputc_r+0x1e>
 8011710:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011714:	f000 b932 	b.w	801197c <__swbuf_r>
 8011718:	6813      	ldr	r3, [r2, #0]
 801171a:	1c58      	adds	r0, r3, #1
 801171c:	6010      	str	r0, [r2, #0]
 801171e:	4608      	mov	r0, r1
 8011720:	7019      	strb	r1, [r3, #0]
 8011722:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011726:	4770      	bx	lr

08011728 <__sfputs_r>:
 8011728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801172a:	4606      	mov	r6, r0
 801172c:	460f      	mov	r7, r1
 801172e:	4614      	mov	r4, r2
 8011730:	18d5      	adds	r5, r2, r3
 8011732:	42ac      	cmp	r4, r5
 8011734:	d101      	bne.n	801173a <__sfputs_r+0x12>
 8011736:	2000      	movs	r0, #0
 8011738:	e007      	b.n	801174a <__sfputs_r+0x22>
 801173a:	463a      	mov	r2, r7
 801173c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011740:	4630      	mov	r0, r6
 8011742:	f7ff ffda 	bl	80116fa <__sfputc_r>
 8011746:	1c43      	adds	r3, r0, #1
 8011748:	d1f3      	bne.n	8011732 <__sfputs_r+0xa>
 801174a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801174c <_vfiprintf_r>:
 801174c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011750:	460d      	mov	r5, r1
 8011752:	b09d      	sub	sp, #116	@ 0x74
 8011754:	4614      	mov	r4, r2
 8011756:	4698      	mov	r8, r3
 8011758:	4606      	mov	r6, r0
 801175a:	b118      	cbz	r0, 8011764 <_vfiprintf_r+0x18>
 801175c:	6a03      	ldr	r3, [r0, #32]
 801175e:	b90b      	cbnz	r3, 8011764 <_vfiprintf_r+0x18>
 8011760:	f7fc fdde 	bl	800e320 <__sinit>
 8011764:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011766:	07d9      	lsls	r1, r3, #31
 8011768:	d405      	bmi.n	8011776 <_vfiprintf_r+0x2a>
 801176a:	89ab      	ldrh	r3, [r5, #12]
 801176c:	059a      	lsls	r2, r3, #22
 801176e:	d402      	bmi.n	8011776 <_vfiprintf_r+0x2a>
 8011770:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011772:	f7fc feec 	bl	800e54e <__retarget_lock_acquire_recursive>
 8011776:	89ab      	ldrh	r3, [r5, #12]
 8011778:	071b      	lsls	r3, r3, #28
 801177a:	d501      	bpl.n	8011780 <_vfiprintf_r+0x34>
 801177c:	692b      	ldr	r3, [r5, #16]
 801177e:	b99b      	cbnz	r3, 80117a8 <_vfiprintf_r+0x5c>
 8011780:	4629      	mov	r1, r5
 8011782:	4630      	mov	r0, r6
 8011784:	f000 f938 	bl	80119f8 <__swsetup_r>
 8011788:	b170      	cbz	r0, 80117a8 <_vfiprintf_r+0x5c>
 801178a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801178c:	07dc      	lsls	r4, r3, #31
 801178e:	d504      	bpl.n	801179a <_vfiprintf_r+0x4e>
 8011790:	f04f 30ff 	mov.w	r0, #4294967295
 8011794:	b01d      	add	sp, #116	@ 0x74
 8011796:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801179a:	89ab      	ldrh	r3, [r5, #12]
 801179c:	0598      	lsls	r0, r3, #22
 801179e:	d4f7      	bmi.n	8011790 <_vfiprintf_r+0x44>
 80117a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80117a2:	f7fc fed5 	bl	800e550 <__retarget_lock_release_recursive>
 80117a6:	e7f3      	b.n	8011790 <_vfiprintf_r+0x44>
 80117a8:	2300      	movs	r3, #0
 80117aa:	f8cd 800c 	str.w	r8, [sp, #12]
 80117ae:	f04f 0901 	mov.w	r9, #1
 80117b2:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 8011968 <_vfiprintf_r+0x21c>
 80117b6:	9309      	str	r3, [sp, #36]	@ 0x24
 80117b8:	2320      	movs	r3, #32
 80117ba:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80117be:	2330      	movs	r3, #48	@ 0x30
 80117c0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80117c4:	4623      	mov	r3, r4
 80117c6:	469a      	mov	sl, r3
 80117c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80117cc:	b10a      	cbz	r2, 80117d2 <_vfiprintf_r+0x86>
 80117ce:	2a25      	cmp	r2, #37	@ 0x25
 80117d0:	d1f9      	bne.n	80117c6 <_vfiprintf_r+0x7a>
 80117d2:	ebba 0b04 	subs.w	fp, sl, r4
 80117d6:	d00b      	beq.n	80117f0 <_vfiprintf_r+0xa4>
 80117d8:	465b      	mov	r3, fp
 80117da:	4622      	mov	r2, r4
 80117dc:	4629      	mov	r1, r5
 80117de:	4630      	mov	r0, r6
 80117e0:	f7ff ffa2 	bl	8011728 <__sfputs_r>
 80117e4:	3001      	adds	r0, #1
 80117e6:	f000 80a7 	beq.w	8011938 <_vfiprintf_r+0x1ec>
 80117ea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80117ec:	445a      	add	r2, fp
 80117ee:	9209      	str	r2, [sp, #36]	@ 0x24
 80117f0:	f89a 3000 	ldrb.w	r3, [sl]
 80117f4:	2b00      	cmp	r3, #0
 80117f6:	f000 809f 	beq.w	8011938 <_vfiprintf_r+0x1ec>
 80117fa:	2300      	movs	r3, #0
 80117fc:	f04f 32ff 	mov.w	r2, #4294967295
 8011800:	f10a 0a01 	add.w	sl, sl, #1
 8011804:	9304      	str	r3, [sp, #16]
 8011806:	9307      	str	r3, [sp, #28]
 8011808:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801180c:	931a      	str	r3, [sp, #104]	@ 0x68
 801180e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011812:	4654      	mov	r4, sl
 8011814:	2205      	movs	r2, #5
 8011816:	4854      	ldr	r0, [pc, #336]	@ (8011968 <_vfiprintf_r+0x21c>)
 8011818:	f814 1b01 	ldrb.w	r1, [r4], #1
 801181c:	f7fc fe99 	bl	800e552 <memchr>
 8011820:	9a04      	ldr	r2, [sp, #16]
 8011822:	b9d8      	cbnz	r0, 801185c <_vfiprintf_r+0x110>
 8011824:	06d1      	lsls	r1, r2, #27
 8011826:	bf44      	itt	mi
 8011828:	2320      	movmi	r3, #32
 801182a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801182e:	0713      	lsls	r3, r2, #28
 8011830:	bf44      	itt	mi
 8011832:	232b      	movmi	r3, #43	@ 0x2b
 8011834:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011838:	f89a 3000 	ldrb.w	r3, [sl]
 801183c:	2b2a      	cmp	r3, #42	@ 0x2a
 801183e:	d015      	beq.n	801186c <_vfiprintf_r+0x120>
 8011840:	9a07      	ldr	r2, [sp, #28]
 8011842:	4654      	mov	r4, sl
 8011844:	2000      	movs	r0, #0
 8011846:	f04f 0c0a 	mov.w	ip, #10
 801184a:	4621      	mov	r1, r4
 801184c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011850:	3b30      	subs	r3, #48	@ 0x30
 8011852:	2b09      	cmp	r3, #9
 8011854:	d94b      	bls.n	80118ee <_vfiprintf_r+0x1a2>
 8011856:	b1b0      	cbz	r0, 8011886 <_vfiprintf_r+0x13a>
 8011858:	9207      	str	r2, [sp, #28]
 801185a:	e014      	b.n	8011886 <_vfiprintf_r+0x13a>
 801185c:	eba0 0308 	sub.w	r3, r0, r8
 8011860:	46a2      	mov	sl, r4
 8011862:	fa09 f303 	lsl.w	r3, r9, r3
 8011866:	4313      	orrs	r3, r2
 8011868:	9304      	str	r3, [sp, #16]
 801186a:	e7d2      	b.n	8011812 <_vfiprintf_r+0xc6>
 801186c:	9b03      	ldr	r3, [sp, #12]
 801186e:	1d19      	adds	r1, r3, #4
 8011870:	681b      	ldr	r3, [r3, #0]
 8011872:	2b00      	cmp	r3, #0
 8011874:	9103      	str	r1, [sp, #12]
 8011876:	bfbb      	ittet	lt
 8011878:	425b      	neglt	r3, r3
 801187a:	f042 0202 	orrlt.w	r2, r2, #2
 801187e:	9307      	strge	r3, [sp, #28]
 8011880:	9307      	strlt	r3, [sp, #28]
 8011882:	bfb8      	it	lt
 8011884:	9204      	strlt	r2, [sp, #16]
 8011886:	7823      	ldrb	r3, [r4, #0]
 8011888:	2b2e      	cmp	r3, #46	@ 0x2e
 801188a:	d10a      	bne.n	80118a2 <_vfiprintf_r+0x156>
 801188c:	7863      	ldrb	r3, [r4, #1]
 801188e:	2b2a      	cmp	r3, #42	@ 0x2a
 8011890:	d132      	bne.n	80118f8 <_vfiprintf_r+0x1ac>
 8011892:	9b03      	ldr	r3, [sp, #12]
 8011894:	3402      	adds	r4, #2
 8011896:	1d1a      	adds	r2, r3, #4
 8011898:	681b      	ldr	r3, [r3, #0]
 801189a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801189e:	9203      	str	r2, [sp, #12]
 80118a0:	9305      	str	r3, [sp, #20]
 80118a2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8011978 <_vfiprintf_r+0x22c>
 80118a6:	2203      	movs	r2, #3
 80118a8:	7821      	ldrb	r1, [r4, #0]
 80118aa:	4650      	mov	r0, sl
 80118ac:	f7fc fe51 	bl	800e552 <memchr>
 80118b0:	b138      	cbz	r0, 80118c2 <_vfiprintf_r+0x176>
 80118b2:	eba0 000a 	sub.w	r0, r0, sl
 80118b6:	2240      	movs	r2, #64	@ 0x40
 80118b8:	9b04      	ldr	r3, [sp, #16]
 80118ba:	3401      	adds	r4, #1
 80118bc:	4082      	lsls	r2, r0
 80118be:	4313      	orrs	r3, r2
 80118c0:	9304      	str	r3, [sp, #16]
 80118c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80118c6:	2206      	movs	r2, #6
 80118c8:	4828      	ldr	r0, [pc, #160]	@ (801196c <_vfiprintf_r+0x220>)
 80118ca:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80118ce:	f7fc fe40 	bl	800e552 <memchr>
 80118d2:	2800      	cmp	r0, #0
 80118d4:	d03f      	beq.n	8011956 <_vfiprintf_r+0x20a>
 80118d6:	4b26      	ldr	r3, [pc, #152]	@ (8011970 <_vfiprintf_r+0x224>)
 80118d8:	bb1b      	cbnz	r3, 8011922 <_vfiprintf_r+0x1d6>
 80118da:	9b03      	ldr	r3, [sp, #12]
 80118dc:	3307      	adds	r3, #7
 80118de:	f023 0307 	bic.w	r3, r3, #7
 80118e2:	3308      	adds	r3, #8
 80118e4:	9303      	str	r3, [sp, #12]
 80118e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80118e8:	443b      	add	r3, r7
 80118ea:	9309      	str	r3, [sp, #36]	@ 0x24
 80118ec:	e76a      	b.n	80117c4 <_vfiprintf_r+0x78>
 80118ee:	fb0c 3202 	mla	r2, ip, r2, r3
 80118f2:	460c      	mov	r4, r1
 80118f4:	2001      	movs	r0, #1
 80118f6:	e7a8      	b.n	801184a <_vfiprintf_r+0xfe>
 80118f8:	2300      	movs	r3, #0
 80118fa:	3401      	adds	r4, #1
 80118fc:	f04f 0c0a 	mov.w	ip, #10
 8011900:	4619      	mov	r1, r3
 8011902:	9305      	str	r3, [sp, #20]
 8011904:	4620      	mov	r0, r4
 8011906:	f810 2b01 	ldrb.w	r2, [r0], #1
 801190a:	3a30      	subs	r2, #48	@ 0x30
 801190c:	2a09      	cmp	r2, #9
 801190e:	d903      	bls.n	8011918 <_vfiprintf_r+0x1cc>
 8011910:	2b00      	cmp	r3, #0
 8011912:	d0c6      	beq.n	80118a2 <_vfiprintf_r+0x156>
 8011914:	9105      	str	r1, [sp, #20]
 8011916:	e7c4      	b.n	80118a2 <_vfiprintf_r+0x156>
 8011918:	fb0c 2101 	mla	r1, ip, r1, r2
 801191c:	4604      	mov	r4, r0
 801191e:	2301      	movs	r3, #1
 8011920:	e7f0      	b.n	8011904 <_vfiprintf_r+0x1b8>
 8011922:	ab03      	add	r3, sp, #12
 8011924:	462a      	mov	r2, r5
 8011926:	a904      	add	r1, sp, #16
 8011928:	4630      	mov	r0, r6
 801192a:	9300      	str	r3, [sp, #0]
 801192c:	4b11      	ldr	r3, [pc, #68]	@ (8011974 <_vfiprintf_r+0x228>)
 801192e:	f7fb fe9d 	bl	800d66c <_printf_float>
 8011932:	4607      	mov	r7, r0
 8011934:	1c78      	adds	r0, r7, #1
 8011936:	d1d6      	bne.n	80118e6 <_vfiprintf_r+0x19a>
 8011938:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801193a:	07d9      	lsls	r1, r3, #31
 801193c:	d405      	bmi.n	801194a <_vfiprintf_r+0x1fe>
 801193e:	89ab      	ldrh	r3, [r5, #12]
 8011940:	059a      	lsls	r2, r3, #22
 8011942:	d402      	bmi.n	801194a <_vfiprintf_r+0x1fe>
 8011944:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011946:	f7fc fe03 	bl	800e550 <__retarget_lock_release_recursive>
 801194a:	89ab      	ldrh	r3, [r5, #12]
 801194c:	065b      	lsls	r3, r3, #25
 801194e:	f53f af1f 	bmi.w	8011790 <_vfiprintf_r+0x44>
 8011952:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011954:	e71e      	b.n	8011794 <_vfiprintf_r+0x48>
 8011956:	ab03      	add	r3, sp, #12
 8011958:	462a      	mov	r2, r5
 801195a:	a904      	add	r1, sp, #16
 801195c:	4630      	mov	r0, r6
 801195e:	9300      	str	r3, [sp, #0]
 8011960:	4b04      	ldr	r3, [pc, #16]	@ (8011974 <_vfiprintf_r+0x228>)
 8011962:	f7fc f91f 	bl	800dba4 <_printf_i>
 8011966:	e7e4      	b.n	8011932 <_vfiprintf_r+0x1e6>
 8011968:	080120c9 	.word	0x080120c9
 801196c:	080120d3 	.word	0x080120d3
 8011970:	0800d66d 	.word	0x0800d66d
 8011974:	08011729 	.word	0x08011729
 8011978:	080120cf 	.word	0x080120cf

0801197c <__swbuf_r>:
 801197c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801197e:	460e      	mov	r6, r1
 8011980:	4614      	mov	r4, r2
 8011982:	4605      	mov	r5, r0
 8011984:	b118      	cbz	r0, 801198e <__swbuf_r+0x12>
 8011986:	6a03      	ldr	r3, [r0, #32]
 8011988:	b90b      	cbnz	r3, 801198e <__swbuf_r+0x12>
 801198a:	f7fc fcc9 	bl	800e320 <__sinit>
 801198e:	69a3      	ldr	r3, [r4, #24]
 8011990:	60a3      	str	r3, [r4, #8]
 8011992:	89a3      	ldrh	r3, [r4, #12]
 8011994:	071a      	lsls	r2, r3, #28
 8011996:	d501      	bpl.n	801199c <__swbuf_r+0x20>
 8011998:	6923      	ldr	r3, [r4, #16]
 801199a:	b943      	cbnz	r3, 80119ae <__swbuf_r+0x32>
 801199c:	4621      	mov	r1, r4
 801199e:	4628      	mov	r0, r5
 80119a0:	f000 f82a 	bl	80119f8 <__swsetup_r>
 80119a4:	b118      	cbz	r0, 80119ae <__swbuf_r+0x32>
 80119a6:	f04f 37ff 	mov.w	r7, #4294967295
 80119aa:	4638      	mov	r0, r7
 80119ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80119ae:	6823      	ldr	r3, [r4, #0]
 80119b0:	b2f6      	uxtb	r6, r6
 80119b2:	6922      	ldr	r2, [r4, #16]
 80119b4:	4637      	mov	r7, r6
 80119b6:	1a98      	subs	r0, r3, r2
 80119b8:	6963      	ldr	r3, [r4, #20]
 80119ba:	4283      	cmp	r3, r0
 80119bc:	dc05      	bgt.n	80119ca <__swbuf_r+0x4e>
 80119be:	4621      	mov	r1, r4
 80119c0:	4628      	mov	r0, r5
 80119c2:	f7ff fa4b 	bl	8010e5c <_fflush_r>
 80119c6:	2800      	cmp	r0, #0
 80119c8:	d1ed      	bne.n	80119a6 <__swbuf_r+0x2a>
 80119ca:	68a3      	ldr	r3, [r4, #8]
 80119cc:	3b01      	subs	r3, #1
 80119ce:	60a3      	str	r3, [r4, #8]
 80119d0:	6823      	ldr	r3, [r4, #0]
 80119d2:	1c5a      	adds	r2, r3, #1
 80119d4:	6022      	str	r2, [r4, #0]
 80119d6:	701e      	strb	r6, [r3, #0]
 80119d8:	1c43      	adds	r3, r0, #1
 80119da:	6962      	ldr	r2, [r4, #20]
 80119dc:	429a      	cmp	r2, r3
 80119de:	d004      	beq.n	80119ea <__swbuf_r+0x6e>
 80119e0:	89a3      	ldrh	r3, [r4, #12]
 80119e2:	07db      	lsls	r3, r3, #31
 80119e4:	d5e1      	bpl.n	80119aa <__swbuf_r+0x2e>
 80119e6:	2e0a      	cmp	r6, #10
 80119e8:	d1df      	bne.n	80119aa <__swbuf_r+0x2e>
 80119ea:	4621      	mov	r1, r4
 80119ec:	4628      	mov	r0, r5
 80119ee:	f7ff fa35 	bl	8010e5c <_fflush_r>
 80119f2:	2800      	cmp	r0, #0
 80119f4:	d0d9      	beq.n	80119aa <__swbuf_r+0x2e>
 80119f6:	e7d6      	b.n	80119a6 <__swbuf_r+0x2a>

080119f8 <__swsetup_r>:
 80119f8:	b538      	push	{r3, r4, r5, lr}
 80119fa:	4b29      	ldr	r3, [pc, #164]	@ (8011aa0 <__swsetup_r+0xa8>)
 80119fc:	4605      	mov	r5, r0
 80119fe:	460c      	mov	r4, r1
 8011a00:	6818      	ldr	r0, [r3, #0]
 8011a02:	b118      	cbz	r0, 8011a0c <__swsetup_r+0x14>
 8011a04:	6a03      	ldr	r3, [r0, #32]
 8011a06:	b90b      	cbnz	r3, 8011a0c <__swsetup_r+0x14>
 8011a08:	f7fc fc8a 	bl	800e320 <__sinit>
 8011a0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011a10:	0719      	lsls	r1, r3, #28
 8011a12:	d422      	bmi.n	8011a5a <__swsetup_r+0x62>
 8011a14:	06da      	lsls	r2, r3, #27
 8011a16:	d407      	bmi.n	8011a28 <__swsetup_r+0x30>
 8011a18:	2209      	movs	r2, #9
 8011a1a:	602a      	str	r2, [r5, #0]
 8011a1c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011a20:	f04f 30ff 	mov.w	r0, #4294967295
 8011a24:	81a3      	strh	r3, [r4, #12]
 8011a26:	e033      	b.n	8011a90 <__swsetup_r+0x98>
 8011a28:	0758      	lsls	r0, r3, #29
 8011a2a:	d512      	bpl.n	8011a52 <__swsetup_r+0x5a>
 8011a2c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011a2e:	b141      	cbz	r1, 8011a42 <__swsetup_r+0x4a>
 8011a30:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011a34:	4299      	cmp	r1, r3
 8011a36:	d002      	beq.n	8011a3e <__swsetup_r+0x46>
 8011a38:	4628      	mov	r0, r5
 8011a3a:	f7fd fbf1 	bl	800f220 <_free_r>
 8011a3e:	2300      	movs	r3, #0
 8011a40:	6363      	str	r3, [r4, #52]	@ 0x34
 8011a42:	89a3      	ldrh	r3, [r4, #12]
 8011a44:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8011a48:	81a3      	strh	r3, [r4, #12]
 8011a4a:	2300      	movs	r3, #0
 8011a4c:	6063      	str	r3, [r4, #4]
 8011a4e:	6923      	ldr	r3, [r4, #16]
 8011a50:	6023      	str	r3, [r4, #0]
 8011a52:	89a3      	ldrh	r3, [r4, #12]
 8011a54:	f043 0308 	orr.w	r3, r3, #8
 8011a58:	81a3      	strh	r3, [r4, #12]
 8011a5a:	6923      	ldr	r3, [r4, #16]
 8011a5c:	b94b      	cbnz	r3, 8011a72 <__swsetup_r+0x7a>
 8011a5e:	89a3      	ldrh	r3, [r4, #12]
 8011a60:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8011a64:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011a68:	d003      	beq.n	8011a72 <__swsetup_r+0x7a>
 8011a6a:	4621      	mov	r1, r4
 8011a6c:	4628      	mov	r0, r5
 8011a6e:	f000 f882 	bl	8011b76 <__smakebuf_r>
 8011a72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011a76:	f013 0201 	ands.w	r2, r3, #1
 8011a7a:	d00a      	beq.n	8011a92 <__swsetup_r+0x9a>
 8011a7c:	2200      	movs	r2, #0
 8011a7e:	60a2      	str	r2, [r4, #8]
 8011a80:	6962      	ldr	r2, [r4, #20]
 8011a82:	4252      	negs	r2, r2
 8011a84:	61a2      	str	r2, [r4, #24]
 8011a86:	6922      	ldr	r2, [r4, #16]
 8011a88:	b942      	cbnz	r2, 8011a9c <__swsetup_r+0xa4>
 8011a8a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8011a8e:	d1c5      	bne.n	8011a1c <__swsetup_r+0x24>
 8011a90:	bd38      	pop	{r3, r4, r5, pc}
 8011a92:	0799      	lsls	r1, r3, #30
 8011a94:	bf58      	it	pl
 8011a96:	6962      	ldrpl	r2, [r4, #20]
 8011a98:	60a2      	str	r2, [r4, #8]
 8011a9a:	e7f4      	b.n	8011a86 <__swsetup_r+0x8e>
 8011a9c:	2000      	movs	r0, #0
 8011a9e:	e7f7      	b.n	8011a90 <__swsetup_r+0x98>
 8011aa0:	20000018 	.word	0x20000018

08011aa4 <_raise_r>:
 8011aa4:	291f      	cmp	r1, #31
 8011aa6:	b538      	push	{r3, r4, r5, lr}
 8011aa8:	4605      	mov	r5, r0
 8011aaa:	460c      	mov	r4, r1
 8011aac:	d904      	bls.n	8011ab8 <_raise_r+0x14>
 8011aae:	2316      	movs	r3, #22
 8011ab0:	6003      	str	r3, [r0, #0]
 8011ab2:	f04f 30ff 	mov.w	r0, #4294967295
 8011ab6:	bd38      	pop	{r3, r4, r5, pc}
 8011ab8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8011aba:	b112      	cbz	r2, 8011ac2 <_raise_r+0x1e>
 8011abc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011ac0:	b94b      	cbnz	r3, 8011ad6 <_raise_r+0x32>
 8011ac2:	4628      	mov	r0, r5
 8011ac4:	f000 f830 	bl	8011b28 <_getpid_r>
 8011ac8:	4622      	mov	r2, r4
 8011aca:	4601      	mov	r1, r0
 8011acc:	4628      	mov	r0, r5
 8011ace:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011ad2:	f000 b817 	b.w	8011b04 <_kill_r>
 8011ad6:	2b01      	cmp	r3, #1
 8011ad8:	d00a      	beq.n	8011af0 <_raise_r+0x4c>
 8011ada:	1c59      	adds	r1, r3, #1
 8011adc:	d103      	bne.n	8011ae6 <_raise_r+0x42>
 8011ade:	2316      	movs	r3, #22
 8011ae0:	6003      	str	r3, [r0, #0]
 8011ae2:	2001      	movs	r0, #1
 8011ae4:	e7e7      	b.n	8011ab6 <_raise_r+0x12>
 8011ae6:	2100      	movs	r1, #0
 8011ae8:	4620      	mov	r0, r4
 8011aea:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8011aee:	4798      	blx	r3
 8011af0:	2000      	movs	r0, #0
 8011af2:	e7e0      	b.n	8011ab6 <_raise_r+0x12>

08011af4 <raise>:
 8011af4:	4b02      	ldr	r3, [pc, #8]	@ (8011b00 <raise+0xc>)
 8011af6:	4601      	mov	r1, r0
 8011af8:	6818      	ldr	r0, [r3, #0]
 8011afa:	f7ff bfd3 	b.w	8011aa4 <_raise_r>
 8011afe:	bf00      	nop
 8011b00:	20000018 	.word	0x20000018

08011b04 <_kill_r>:
 8011b04:	b538      	push	{r3, r4, r5, lr}
 8011b06:	2300      	movs	r3, #0
 8011b08:	4d06      	ldr	r5, [pc, #24]	@ (8011b24 <_kill_r+0x20>)
 8011b0a:	4604      	mov	r4, r0
 8011b0c:	4608      	mov	r0, r1
 8011b0e:	4611      	mov	r1, r2
 8011b10:	602b      	str	r3, [r5, #0]
 8011b12:	f7f0 fb01 	bl	8002118 <_kill>
 8011b16:	1c43      	adds	r3, r0, #1
 8011b18:	d102      	bne.n	8011b20 <_kill_r+0x1c>
 8011b1a:	682b      	ldr	r3, [r5, #0]
 8011b1c:	b103      	cbz	r3, 8011b20 <_kill_r+0x1c>
 8011b1e:	6023      	str	r3, [r4, #0]
 8011b20:	bd38      	pop	{r3, r4, r5, pc}
 8011b22:	bf00      	nop
 8011b24:	20000d18 	.word	0x20000d18

08011b28 <_getpid_r>:
 8011b28:	f7f0 baee 	b.w	8002108 <_getpid>

08011b2c <__swhatbuf_r>:
 8011b2c:	b570      	push	{r4, r5, r6, lr}
 8011b2e:	460c      	mov	r4, r1
 8011b30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011b34:	b096      	sub	sp, #88	@ 0x58
 8011b36:	4615      	mov	r5, r2
 8011b38:	2900      	cmp	r1, #0
 8011b3a:	461e      	mov	r6, r3
 8011b3c:	da0c      	bge.n	8011b58 <__swhatbuf_r+0x2c>
 8011b3e:	89a3      	ldrh	r3, [r4, #12]
 8011b40:	2100      	movs	r1, #0
 8011b42:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8011b46:	bf14      	ite	ne
 8011b48:	2340      	movne	r3, #64	@ 0x40
 8011b4a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8011b4e:	2000      	movs	r0, #0
 8011b50:	6031      	str	r1, [r6, #0]
 8011b52:	602b      	str	r3, [r5, #0]
 8011b54:	b016      	add	sp, #88	@ 0x58
 8011b56:	bd70      	pop	{r4, r5, r6, pc}
 8011b58:	466a      	mov	r2, sp
 8011b5a:	f000 f849 	bl	8011bf0 <_fstat_r>
 8011b5e:	2800      	cmp	r0, #0
 8011b60:	dbed      	blt.n	8011b3e <__swhatbuf_r+0x12>
 8011b62:	9901      	ldr	r1, [sp, #4]
 8011b64:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8011b68:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8011b6c:	4259      	negs	r1, r3
 8011b6e:	4159      	adcs	r1, r3
 8011b70:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011b74:	e7eb      	b.n	8011b4e <__swhatbuf_r+0x22>

08011b76 <__smakebuf_r>:
 8011b76:	898b      	ldrh	r3, [r1, #12]
 8011b78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011b7a:	079d      	lsls	r5, r3, #30
 8011b7c:	4606      	mov	r6, r0
 8011b7e:	460c      	mov	r4, r1
 8011b80:	d507      	bpl.n	8011b92 <__smakebuf_r+0x1c>
 8011b82:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8011b86:	6023      	str	r3, [r4, #0]
 8011b88:	6123      	str	r3, [r4, #16]
 8011b8a:	2301      	movs	r3, #1
 8011b8c:	6163      	str	r3, [r4, #20]
 8011b8e:	b003      	add	sp, #12
 8011b90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011b92:	ab01      	add	r3, sp, #4
 8011b94:	466a      	mov	r2, sp
 8011b96:	f7ff ffc9 	bl	8011b2c <__swhatbuf_r>
 8011b9a:	9f00      	ldr	r7, [sp, #0]
 8011b9c:	4605      	mov	r5, r0
 8011b9e:	4630      	mov	r0, r6
 8011ba0:	4639      	mov	r1, r7
 8011ba2:	f7fd fbb1 	bl	800f308 <_malloc_r>
 8011ba6:	b948      	cbnz	r0, 8011bbc <__smakebuf_r+0x46>
 8011ba8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011bac:	059a      	lsls	r2, r3, #22
 8011bae:	d4ee      	bmi.n	8011b8e <__smakebuf_r+0x18>
 8011bb0:	f023 0303 	bic.w	r3, r3, #3
 8011bb4:	f043 0302 	orr.w	r3, r3, #2
 8011bb8:	81a3      	strh	r3, [r4, #12]
 8011bba:	e7e2      	b.n	8011b82 <__smakebuf_r+0xc>
 8011bbc:	89a3      	ldrh	r3, [r4, #12]
 8011bbe:	6020      	str	r0, [r4, #0]
 8011bc0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011bc4:	81a3      	strh	r3, [r4, #12]
 8011bc6:	9b01      	ldr	r3, [sp, #4]
 8011bc8:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8011bcc:	b15b      	cbz	r3, 8011be6 <__smakebuf_r+0x70>
 8011bce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011bd2:	4630      	mov	r0, r6
 8011bd4:	f000 f81e 	bl	8011c14 <_isatty_r>
 8011bd8:	b128      	cbz	r0, 8011be6 <__smakebuf_r+0x70>
 8011bda:	89a3      	ldrh	r3, [r4, #12]
 8011bdc:	f023 0303 	bic.w	r3, r3, #3
 8011be0:	f043 0301 	orr.w	r3, r3, #1
 8011be4:	81a3      	strh	r3, [r4, #12]
 8011be6:	89a3      	ldrh	r3, [r4, #12]
 8011be8:	431d      	orrs	r5, r3
 8011bea:	81a5      	strh	r5, [r4, #12]
 8011bec:	e7cf      	b.n	8011b8e <__smakebuf_r+0x18>
	...

08011bf0 <_fstat_r>:
 8011bf0:	b538      	push	{r3, r4, r5, lr}
 8011bf2:	2300      	movs	r3, #0
 8011bf4:	4d06      	ldr	r5, [pc, #24]	@ (8011c10 <_fstat_r+0x20>)
 8011bf6:	4604      	mov	r4, r0
 8011bf8:	4608      	mov	r0, r1
 8011bfa:	4611      	mov	r1, r2
 8011bfc:	602b      	str	r3, [r5, #0]
 8011bfe:	f7f0 faeb 	bl	80021d8 <_fstat>
 8011c02:	1c43      	adds	r3, r0, #1
 8011c04:	d102      	bne.n	8011c0c <_fstat_r+0x1c>
 8011c06:	682b      	ldr	r3, [r5, #0]
 8011c08:	b103      	cbz	r3, 8011c0c <_fstat_r+0x1c>
 8011c0a:	6023      	str	r3, [r4, #0]
 8011c0c:	bd38      	pop	{r3, r4, r5, pc}
 8011c0e:	bf00      	nop
 8011c10:	20000d18 	.word	0x20000d18

08011c14 <_isatty_r>:
 8011c14:	b538      	push	{r3, r4, r5, lr}
 8011c16:	2300      	movs	r3, #0
 8011c18:	4d05      	ldr	r5, [pc, #20]	@ (8011c30 <_isatty_r+0x1c>)
 8011c1a:	4604      	mov	r4, r0
 8011c1c:	4608      	mov	r0, r1
 8011c1e:	602b      	str	r3, [r5, #0]
 8011c20:	f7f0 faea 	bl	80021f8 <_isatty>
 8011c24:	1c43      	adds	r3, r0, #1
 8011c26:	d102      	bne.n	8011c2e <_isatty_r+0x1a>
 8011c28:	682b      	ldr	r3, [r5, #0]
 8011c2a:	b103      	cbz	r3, 8011c2e <_isatty_r+0x1a>
 8011c2c:	6023      	str	r3, [r4, #0]
 8011c2e:	bd38      	pop	{r3, r4, r5, pc}
 8011c30:	20000d18 	.word	0x20000d18

08011c34 <_init>:
 8011c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011c36:	bf00      	nop
 8011c38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011c3a:	bc08      	pop	{r3}
 8011c3c:	469e      	mov	lr, r3
 8011c3e:	4770      	bx	lr

08011c40 <_fini>:
 8011c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011c42:	bf00      	nop
 8011c44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011c46:	bc08      	pop	{r3}
 8011c48:	469e      	mov	lr, r3
 8011c4a:	4770      	bx	lr
